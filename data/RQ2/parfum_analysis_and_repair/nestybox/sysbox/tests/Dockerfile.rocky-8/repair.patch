diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nestybox/sysbox/tests/Dockerfile.rocky-8 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nestybox/sysbox/tests/Dockerfile.rocky-8/repaired.Dockerfile
index 1818aee..84ec7cd 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nestybox/sysbox/tests/Dockerfile.rocky-8
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nestybox/sysbox/tests/Dockerfile.rocky-8/repaired.Dockerfile
@@ -82,7 +82,7 @@ RUN dnf update -y && dnf install -y \
 # Install Golang 1.16.4 release and explicitly activate modules functionality.
 RUN wget https://golang.org/dl/go1.16.4.linux-${sys_arch}.tar.gz && \
     tar -C /usr/local -xzf go1.16.4.linux-${sys_arch}.tar.gz && \
-    /usr/local/go/bin/go env -w GONOSUMDB=/root/nestybox
+    /usr/local/go/bin/go env -w GONOSUMDB=/root/nestybox && rm go1.16.4.linux-${sys_arch}.tar.gz
 
 ENV GOPATH /go
 ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
@@ -106,7 +106,7 @@ RUN cd /tmp \
 RUN if [ "$sys_arch" = "amd64" ] ; then arch_str="x86_64"; \
     elif [ "$sys_arch" = "arm64" ]; then arch_str="aarch_64"; \
     else echo "Unsupported platform: ${sys_arch}"; exit; fi \
-    && curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-${arch_str}.zip \
+    && curl -f -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-${arch_str}.zip \
     && unzip protoc-3.15.8-linux-${arch_str}.zip \
     && mv include /usr/bin \
     && go install github.com/golang/protobuf/protoc-gen-go@latest \
@@ -130,12 +130,12 @@ repo_gpgcheck=1 \n\
 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg \
 " > /etc/yum.repos.d/kubernetes.repo \
     && yum update -y \
-    && yum install -y kubectl --nobest
+    && yum install -y kubectl --nobest && rm -rf /var/cache/yum
 
 # CRI-O and crictl for testing deployment of pods with sysbox (aka "sysbox pods")
-RUN curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${crio_os}/devel:kubic:libcontainers:stable.repo \
-    && curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:${crio_version}.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:${crio_version}/${crio_os}/devel:kubic:libcontainers:stable:cri-o:${crio_version}.repo \
-    && yum install -y conntrack cri-o
+RUN curl -f -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${crio_os}/devel:kubic:libcontainers:stable.repo \
+    && curl -f -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:${crio_version}.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:${crio_version}/${crio_os}/devel:kubic:libcontainers:stable:cri-o:${crio_version}.repo \
+    && yum install -y conntrack cri-o && rm -rf /var/cache/yum
 
 # install Docker (used by most sysbox tests to launch sys containers)
 RUN dnf update -y \
@@ -152,10 +152,10 @@ RUN go get github.com/go-delve/delve/cmd/dlv
 # Install Kubectl for k8s-in-docker integration-testing. Notice that we are explicitly
 # stating the kubectl version to download, which should match the K8s release
 # deployed in the K8s-in-docker nodes (L2).
-RUN curl -LO https://dl.k8s.io/release/${k8s_version}/bin/linux/${sys_arch}/kubectl \
+RUN curl -f -LO https://dl.k8s.io/release/${k8s_version}/bin/linux/${sys_arch}/kubectl \
     && install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
 
-RUN curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/${crictl_version}/crictl-${crictl_version}-linux-${sys_arch}.tar.gz --output crictl-${crictl_version}-linux-${sys_arch}.tar.gz \
+RUN curl -f -L https://github.com/kubernetes-sigs/cri-tools/releases/download/${crictl_version}/crictl-${crictl_version}-linux-${sys_arch}.tar.gz --output crictl-${crictl_version}-linux-${sys_arch}.tar.gz \
     && tar zxvf crictl-${crictl_version}-linux-${sys_arch}.tar.gz -C /usr/local/bin \
     && rm -f crictl-${crictl_version}-linux-${sys_arch}.tar.gz
 
@@ -169,7 +169,7 @@ RUN cd /root \
     && cp bin/* /opt/cni/bin/
 
 # Dasl (for yaml, toml, json parsing) (https://github.com/TomWright/dasel)
-RUN curl -s https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_${sys_arch} | cut -d '"' -f 4 | wget -qi - && mv dasel_linux_${sys_arch} dasel && chmod +x dasel \
+RUN curl -f -s https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_${sys_arch} | cut -d '"' -f 4 | wget -qi - && mv dasel_linux_${sys_arch} dasel && chmod +x dasel \
     && mv ./dasel /usr/local/bin/dasel
 
 # Use the old definition for SECCOMP_NOTIF_ID_VALID in /usr/include/linux/seccomp.h