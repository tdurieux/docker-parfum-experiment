{
  "startTime": 1674251430581,
  "endTime": 1674251431712,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 7,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 197
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 7,
        "columnEnd": 263
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 201
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Sysbox Test Container Dockerfile (AlmaLinux-8 image)\n#\n# This Dockerfile creates the sysbox test container image. The image\n# contains all dependencies needed to build, run, and test sysbox.\n#\n# The image does not contain sysbox itself; the sysbox repo\n# must be bind mounted into the image. It can then be built,\n# installed, and executed within the container.\n#\n# The image must be run as a privileged container (i.e., docker run --privileged ...)\n# Refer to the sysbox Makefile test targets.\n#\n# This Dockerfile is based on a similar Dockerfile in the OCI runc\n# github repo, but adapted to sysbox testing.\n#\n# Instructions:\n#\n# docker build -t sysbox-test .\n#\n\nFROM almalinux:8.5\n\nARG k8s_version=v1.18.2\n\n# Desired platform architecture to build upon.\nARG sys_arch\nENV SYS_ARCH=${sys_arch}\nARG target_arch\nENV TARGET_ARCH=${target_arch}\n\n# CRI-O & crictl version for testing sysbox pods; CRI-O 1.20 is required as it\n# introduces rootless pod support (via the Linux user-ns)\nARG crio_version=1.22\nARG crio_os=CentOS_8\nARG crictl_version=v1.20.0\n\nRUN dnf update -y && dnf install -y \\\n    acl \\\n    yum-utils \\\n    automake \\\n    autoconf \\\n    libtool \\\n    procps \\\n    psmisc \\\n    nano \\\n    less \\\n    curl \\\n    sudo \\\n    gawk \\\n    git \\\n    iptables \\\n    jq \\\n    pkg-config \\\n    libaio-devel \\\n    libcap-devel \\\n    libnl3-devel \\\n    libseccomp \\\n    libseccomp-devel \\\n    python3 \\\n    kmod \\\n    unzip \\\n    time \\\n    net-tools \\\n    wget \\\n    lsof \\\n    iputils \\\n    ca-certificates \\\n    iproute \\\n    # sysbox deps\n    fuse \\\n    rsync \\\n    redhat-lsb-core \\\n    bash-completion \\\n    attr \\\n    tree \\\n    strace \\\n    && echo \". /etc/bash_completion\" >> /etc/bash.bashrc \\\n    && ssh-keygen -t rsa -N \"\" -f ~/.ssh/id_rsa \\\n    && echo \"    StrictHostKeyChecking accept-new\" >> /etc/ssh/ssh_config\n\n# Install Golang 1.16.4 release and explicitly activate modules functionality.\nRUN wget https://golang.org/dl/go1.16.4.linux-${sys_arch}.tar.gz && \\\n    tar -C /usr/local -xzf go1.16.4.linux-${sys_arch}.tar.gz && \\\n    /usr/local/go/bin/go env -w GONOSUMDB=/root/nestybox && rm go1.16.4.linux-${sys_arch}.tar.gz\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\nRUN go env -w GONOSUMDB=/root/nestybox && \\\n    mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && \\\n    chmod -R 777 \"$GOPATH\"\n\n# Add a dummy user for the rootless integration tests; needed by the\n# `git clone` operations below.\nRUN useradd -u1000 -m -d/home/rootless -s/bin/bash rootless\n\n# install bats\nRUN cd /tmp \\\n    && git clone https://github.com/sstephenson/bats.git \\\n    && cd bats \\\n    && git reset --hard 03608115df2071fff4eaaff1605768c275e5f81f \\\n    && ./install.sh /usr/local \\\n    && rm -rf /tmp/bats\n\n# install protoc compiler for gRPC\nRUN if [ \"$sys_arch\" = \"amd64\" ] ; then arch_str=\"x86_64\"; \\\n    elif [ \"$sys_arch\" = \"arm64\" ]; then arch_str=\"aarch_64\"; \\\n    else echo \"Unsupported platform: ${sys_arch}\"; exit; fi \\\n    && curl -f -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-${arch_str}.zip \\\n    && unzip protoc-3.15.8-linux-${arch_str}.zip \\\n    && mv include /usr/bin \\\n    && go install github.com/golang/protobuf/protoc-gen-go@latest \\\n    && export PATH=\"$PATH:$(go env GOPATH)/bin\"\n\n# Install Kubectl for K8s integration-testing. Notice that we are explicitly\n# stating the kubectl version to download, which should match the K8s release\n# deployed in K8s (L2) nodes.\n#\n# TODO: Define a mechanism in our testing-framework to allow K8s version to be\n# configured in a centralized location, so that the installed K8s components\n# (both inside privileged test-container and within L2 K8s image) are all\n# matching the same K8s release.\nRUN echo -e \"\\\n[kubernetes] \\n\\\nname=Kubernetes \\n\\\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64 \\n\\\nenabled=1 \\n\\\ngpgcheck=1 \\n\\\nrepo_gpgcheck=1 \\n\\\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg \\\n\" > /etc/yum.repos.d/kubernetes.repo \\\n    && yum update -y \\\n    && yum install -y kubectl --nobest && rm -rf /var/cache/yum\n\n# CRI-O and crictl for testing deployment of pods with sysbox (aka \"sysbox pods\")\nRUN curl -f -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${crio_os}/devel:kubic:libcontainers:stable.repo \\\n    && curl -f -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:${crio_version}.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:${crio_version}/${crio_os}/devel:kubic:libcontainers:stable:cri-o:${crio_version}.repo \\\n    && yum install -y conntrack cri-o && rm -rf /var/cache/yum\n\n# install Docker (used by most sysbox tests to launch sys containers)\nRUN dnf update -y \\\n    && dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo \\\n    && dnf config-manager --set-disabled docker-ce-stable \\\n    && rpm --install --nodeps --replacefiles --excludepath=/usr/bin/runc https://download.docker.com/linux/centos/8/x86_64/stable/Packages/containerd.io-1.4.12-3.1.el8.x86_64.rpm \\\n    && dnf install -y --enablerepo=docker-ce-stable docker-ce --nobest\nADD https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker \\\n    /etc/bash_completion.d/docker.sh\n\n# Go Dlv for debugging\nRUN go get github.com/go-delve/delve/cmd/dlv\n\n# Install Kubectl for k8s-in-docker integration-testing. Notice that we are explicitly\n# stating the kubectl version to download, which should match the K8s release\n# deployed in the K8s-in-docker nodes (L2).\nRUN curl -f -LO https://dl.k8s.io/release/${k8s_version}/bin/linux/${sys_arch}/kubectl \\\n    && install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n\nRUN curl -f -L https://github.com/kubernetes-sigs/cri-tools/releases/download/${crictl_version}/crictl-${crictl_version}-linux-${sys_arch}.tar.gz --output crictl-${crictl_version}-linux-${sys_arch}.tar.gz \\\n    && tar zxvf crictl-${crictl_version}-linux-${sys_arch}.tar.gz -C /usr/local/bin \\\n    && rm -f crictl-${crictl_version}-linux-${sys_arch}.tar.gz\n\n# Container CNIs (needed by CRI-O)\nRUN cd /root \\\n    && git clone https://github.com/containernetworking/plugins \\\n    && cd plugins \\\n    && git checkout -b v0.9.1 v0.9.1 \\\n    && ./build_linux.sh \\\n    && mkdir -p /opt/cni/bin \\\n    && cp bin/* /opt/cni/bin/\n\n# Dasl (for yaml, toml, json parsing) (https://github.com/TomWright/dasel)\nRUN curl -f -s https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_${sys_arch} | cut -d '\"' -f 4 | wget -qi - && mv dasel_linux_${sys_arch} dasel && chmod +x dasel \\\n    && mv ./dasel /usr/local/bin/dasel\n\n# Use the old definition for SECCOMP_NOTIF_ID_VALID in /usr/include/linux/seccomp.h\n#\n# This is needed because the definition changed in the mainline kernel\n# on 06/2020 (from SECCOMP_IOR -> SECCOMP_IOW), and some distros we\n# support have picked it up in their latest releases / kernels\n# updates. The kernel change was backward compatible, so by using the\n# old definition, we are guaranteed it will work on kernels before and\n# after the change. On the other hand, if we were to use the new\n# definition, seccomp notify would fail when sysbox runs in old\n# kernels.\nRUN sed -i 's/^#define SECCOMP_IOCTL_NOTIF_ID_VALID[ \\t]*SECCOMP_IOW(2, __u64)/#define SECCOMP_IOCTL_NOTIF_ID_VALID   SECCOMP_IOR(2, __u64)/g' /usr/include/linux/seccomp.h\n\n# sysbox env\nRUN useradd sysbox\n\n# test scripts\nCOPY scr/testContainerInit /usr/bin\nCOPY scr/testContainerCleanup /usr/bin\nCOPY scr/buildContainerInit /usr/bin\nCOPY scr/sindTestContainerInit /usr/bin\nCOPY bin/userns_child_exec_${sys_arch} /usr/bin\n\nRUN mkdir -p /root/nestybox\nWORKDIR /root/nestybox/sysbox\nCMD /bin/bash\n"
}