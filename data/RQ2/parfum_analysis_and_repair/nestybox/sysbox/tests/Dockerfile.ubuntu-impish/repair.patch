diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nestybox/sysbox/tests/Dockerfile.ubuntu-impish b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nestybox/sysbox/tests/Dockerfile.ubuntu-impish/repaired.Dockerfile
index 2b0eea8..e5acc7f 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nestybox/sysbox/tests/Dockerfile.ubuntu-impish
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nestybox/sysbox/tests/Dockerfile.ubuntu-impish/repaired.Dockerfile
@@ -109,7 +109,7 @@ RUN apt-get update && apt-get install -y \
 # Install Golang 1.16.4 release and explicitly activate modules functionality.
 RUN wget https://golang.org/dl/go1.16.4.linux-${sys_arch}.tar.gz && \
     tar -C /usr/local -xzf go1.16.4.linux-${sys_arch}.tar.gz && \
-    /usr/local/go/bin/go env -w GONOSUMDB=/root/nestybox
+    /usr/local/go/bin/go env -w GONOSUMDB=/root/nestybox && rm go1.16.4.linux-${sys_arch}.tar.gz
 
 ENV GOPATH /go
 ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
@@ -133,7 +133,7 @@ RUN cd /tmp \
 RUN if [ "$sys_arch" = "amd64" ] ; then arch_str="x86_64"; \
     elif [ "$sys_arch" = "arm64" ]; then arch_str="aarch_64"; \
     else echo "Unsupported platform: ${sys_arch}"; exit; fi \
-    && curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-${arch_str}.zip \
+    && curl -f -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-${arch_str}.zip \
     && unzip protoc-3.15.8-linux-${arch_str}.zip -d $HOME/.local \
     && export PATH="$PATH:$HOME/.local/bin" \
     && go install github.com/golang/protobuf/protoc-gen-go@latest \
@@ -150,22 +150,22 @@ RUN go get github.com/go-delve/delve/cmd/dlv
 # Install Kubectl for k8s-in-docker integration-testing. Notice that we are explicitly
 # stating the kubectl version to download, which should match the K8s release
 # deployed in the K8s-in-docker nodes (L2).
-RUN curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -  \
+RUN curl -f -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - \
     && echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list \
     && apt-get update \
-    && apt-get install kubectl:${sys_arch}="${k8s_version#v}"-00 \
+    && apt-get install -y --no-install-recommends kubectl:${sys_arch}="${k8s_version#v}"-00 \
     && apt-get clean -y \
     && rm -rf /var/lib/apt/lists/*
 
 # CRI-O and crictl for testing deployment of pods with sysbox (aka "sysbox pods")
 RUN echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${crio_os}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list \
     && echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${crio_version}/${crio_os}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:${crio_version}.list \
-    && curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:${crio_version}/${crio_os}/Release.key | apt-key add - \
-    && curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${crio_os}/Release.key | apt-key add - \
+    && curl -f -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:${crio_version}/${crio_os}/Release.key | apt-key add - \
+    && curl -f -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${crio_os}/Release.key | apt-key add - \
     && apt-get update && apt-get install -y --no-install-recommends conntrack:${sys_arch} cri-o:${sys_arch} cri-o-runc:${sys_arch} \
     && wget https://github.com/kubernetes-sigs/cri-tools/releases/download/${crictl_version}/crictl-${crictl_version}-linux-${sys_arch}.tar.gz \
     && sudo tar zxvf crictl-${crictl_version}-linux-${sys_arch}.tar.gz -C /usr/local/bin \
-    && rm -f crictl-${crictl_version}-linux-${sys_arch}.tar.gz
+    && rm -f crictl-${crictl_version}-linux-${sys_arch}.tar.gz && rm -rf /var/lib/apt/lists/*;
 
 # Container CNIs (needed by CRI-O)
 RUN cd /root \
@@ -177,7 +177,7 @@ RUN cd /root \
     && cp bin/* /opt/cni/bin/
 
 # Dasl (for yaml, toml, json parsing) (https://github.com/TomWright/dasel)
-RUN curl -s https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_${sys_arch} | cut -d '"' -f 4 | wget -qi - && mv dasel_linux_${sys_arch} dasel && chmod +x dasel \
+RUN curl -f -s https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_${sys_arch} | cut -d '"' -f 4 | wget -qi - && mv dasel_linux_${sys_arch} dasel && chmod +x dasel \
     && mv ./dasel /usr/local/bin/dasel
 
 # Use the old definition for SECCOMP_NOTIF_ID_VALID in /usr/include/linux/seccomp.h