{
  "startTime": 1674249418631,
  "endTime": 1674249419489,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 63,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GO_VERSION=1.16\nARG BATS_VERSION=v1.2.1\nARG UMOCI_VERSION=v0.4.6\n\nFROM golang:${GO_VERSION}-bullseye\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN echo 'deb https://download.opensuse.org/repositories/devel:/tools:/criu/Debian_11/ /' > /etc/apt/sources.list.d/criu.list \\\n    && wget -nv https://download.opensuse.org/repositories/devel:/tools:/criu/Debian_11/Release.key -O- | apt-key add - \\\n    && echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_11/ /' > /etc/apt/sources.list.d/skopeo.list \\\n    && wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/Debian_11/Release.key -O- | apt-key add - \\\n    && dpkg --add-architecture armel \\\n    && dpkg --add-architecture armhf \\\n    && dpkg --add-architecture arm64 \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        criu \\\n        crossbuild-essential-arm64 \\\n        crossbuild-essential-armel \\\n        crossbuild-essential-armhf \\\n        curl \\\n        gawk \\\n        iptables \\\n        jq \\\n        kmod \\\n        libseccomp-dev \\\n        libseccomp-dev:arm64 \\\n        libseccomp-dev:armel \\\n        libseccomp-dev:armhf \\\n        libseccomp2 \\\n        lsb-release \\\n        pkg-config \\\n        python2-minimal \\\n        skopeo \\\n        sudo \\\n        uidmap \\\n    && apt-get clean \\\n    && rm -rf /var/cache/apt /var/lib/apt/lists/* /etc/apt/sources.list.d/*.list\n\n# Add a dummy user for the rootless integration tests. While runC does\n# not require an entry in /etc/passwd to operate, one of the tests uses\n# `git clone` -- and `git clone` does not allow you to clone a\n# repository if the current uid does not have an entry in /etc/passwd.\nRUN useradd -u1000 -m -d/home/rootless -s/bin/bash rootless\n\n# install bats\nARG BATS_VERSION\nRUN cd /tmp \\\n    && git clone https://github.com/bats-core/bats-core.git \\\n    && cd bats-core \\\n    && git reset --hard \"${BATS_VERSION}\" \\\n    && ./install.sh /usr/local \\\n    && rm -rf /tmp/bats-core\n\n# install umoci\nARG UMOCI_VERSION\nRUN curl -o /usr/local/bin/umoci -fsSL https://github.com/opencontainers/umoci/releases/download/${UMOCI_VERSION}/umoci.amd64 \\\n    && chmod +x /usr/local/bin/umoci\n\n# install debug tools\nRUN go get github.com/go-delve/delve/cmd/dlv \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    psmisc && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /root/nestybox/sysbox-runc\n\n# setup a playground for us to spawn containers in\nCOPY tests/integration/multi-arch.bash tests/integration/\nENV ROOTFS /busybox\nRUN mkdir -p \"${ROOTFS}\"\nRUN . tests/integration/multi-arch.bash \\\n    && curl -fsSL `get_busybox` | tar xfJC - \"${ROOTFS}\"\n\nENV DEBIAN_ROOTFS /debian\nRUN mkdir -p \"${DEBIAN_ROOTFS}\"\nRUN . tests/integration/multi-arch.bash \\\n    && get_and_extract_debian \"$DEBIAN_ROOTFS\"\n"
}