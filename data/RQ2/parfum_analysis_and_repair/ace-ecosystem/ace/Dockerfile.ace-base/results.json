{
  "startTime": 1674216718630,
  "endTime": 1674216720299,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 7,
        "columnEnd": 103
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9.0-buster\nENV SAQ_HOME /opt/ace\nENV SAQ_USER ace\nENV SAQ_GROUP ace\nENV TZ UTC\nENV DEBIAN_FRONTEND noninteractive\n# by default we use uid and guid 1000 inside the linux container\n# for the development environment this needs to map to whatever uid is being used\n# for the bind mounts to work in linux (not sure about macos or windows yet)\n# these params are set in the docker build script\nARG SAQ_USER_ID=1000\nARG SAQ_GROUP_ID=1000\nARG http_proxy\nARG https_proxy\nENV http_proxy $http_proxy\nENV https_proxy $https_proxy\nCOPY docker/provision/ace/etc/apt/proxy.conf /etc/apt/apt.conf.d/proxy.conf\nRUN groupadd ace \\\n    && useradd -g ace -G sudo -m -s /bin/bash -u $SAQ_USER_ID ace \\\n    && sed -i -e 's/main$/main contrib non-free/g' /etc/apt/sources.list \\\n    && curl -f -s https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n    && curl -f -s https://packages.microsoft.com/config/ubuntu/18.04/prod.list | tee /etc/apt/sources.list.d/mssql-release.list \\\n    && apt-get -y update \\\n    && apt-get -y install --no-install-recommends apt-utils \\\n    && mkdir -p /usr/share/man/man1/ \\\n    && ACCEPT_EULA=Y apt-get -y install --no-install-recommends \\\n        ca-certificates \\\n        nmap \\\n        libmagic-dev \\\n        libldap2-dev \\\n        libsasl2-dev \\\n        libffi-dev \\\n        libimage-exiftool-perl \\\n        p7zip-full \\\n        p7zip-rar \\\n        unzip \\\n        zip \\\n        unrar \\\n        unace-nonfree \\\n        libxml2-dev libxslt1-dev \\\n        libyaml-dev \\\n        ssdeep \\\n        poppler-utils \\\n        rng-tools \\\n        wireshark-common \\\n        build-essential \\\n        file \\\n        less \\\n        nginx \\\n        default-jre \\\n        bsdmainutils \\\n        node-esprima \\\n        python2.7 \\\n        python-pip \\\n        dnsutils \\\n        msodbcsql17 \\\n        unixodbc-dev \\\n        automake \\\n        libtool \\\n        make \\\n        gcc \\\n        pkg-config \\\n        flex \\\n        bison \\\n    && mkdir /opt/signatures \\\n    && chown ace:ace /opt/signatures \\\n    && mkdir /opt/ace \\\n    && chown ace:ace /opt/ace \\\n    && mkdir /venv \\\n    && chown ace:ace /venv \\\n    && mkdir /opt/misc \\\n    && chown ace:ace /opt/misc && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /usr/local/share/ca-certificates/extra\nCOPY ssl/extra /usr/local/share/ca-certificates/extra\nCOPY docker/provision/ace/install_site_CAs.sh /install_site_CAs.sh\nRUN /install_site_CAs.sh \\\n    && update-ca-certificates \\\n    && python3 -m pip config set global.cert /etc/ssl/certs/ca-certificates.crt \\\n    && python2.7 -m pip config set global.cert /etc/ssl/certs/ca-certificates.crt \\ \n    && python3 -m pip install pip virtualenv --upgrade \\\n    && python2.7 -m pip install officeparser \nRUN git clone https://github.com/VirusTotal/yara.git /tmp/yara \\\n    && cd /tmp/yara \\\n    && ./bootstrap.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-magic --enable-dotnet --enable-macho --enable-dex \\\n    && make \\\n    && make install \\\n    && ldconfig\nSHELL [\"/bin/bash\", \"-c\"]\nUSER ace\nCOPY --chown=ace:ace installer/requirements-3.6.txt /venv/python-requirements-3.6.txt\nRUN python3 -m virtualenv --python=python3 /venv \\\n    && source /venv/bin/activate \\\n    && pip config set global.cert /etc/ssl/certs/ca-certificates.crt \\\n    && pip install --no-cache-dir -r /venv/python-requirements-3.6.txt \\\n    && cp /etc/ssl/certs/ca-certificates.crt /venv/lib/python3.9/site-packages/certifi/cacert.pem \\\n    && pip uninstall -y yara-python \\\n    && git clone https://github.com/VirusTotal/yara-python /tmp/yara-python \\\n    && cd /tmp/yara-python \\\n    && python setup.py build --dynamic-linking \\\n    && python setup.py install \\\n    && echo 'source /venv/bin/activate' >> /home/ace/.bashrc \\\n    && echo 'export PATH=\"$PATH:/opt/ace/bin:/opt/ace\"' >> /home/ace/.bashrc \\\n    && echo 'if [ -e /opt/ace/load_environment ]; then source /opt/ace/load_environment; fi' >> /home/ace/.bashrc\nRUN git clone https://github.com/DissectMalware/XLMMacroDeobfuscator.git /tmp/XLMMacroDeobfuscator \\\n    && cd /tmp/XLMMacroDeobfuscator \\\n    && source /venv/bin/activate \\\n    && python setup.py install\nRUN cd /opt/misc \\\n    && curl -f -s 'https://www.openwall.com/john/k/john-1.9.0-jumbo-1.tar.gz' -o john-1.9.0-jumbo-1.tar.gz \\\n    && tar zxvf john-1.9.0-jumbo-1.tar.gz \\\n    && cd john-1.9.0-jumbo-1/src \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -s clean && make -sj4 && rm john-1.9.0-jumbo-1.tar.gz\n"
}