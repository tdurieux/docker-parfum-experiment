diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ydatech/yii2-laradock/workspace/Dockerfile-71 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ydatech/yii2-laradock/workspace/Dockerfile-71/repaired.Dockerfile
index f3adea2..d8fbcf6 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ydatech/yii2-laradock/workspace/Dockerfile-71
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ydatech/yii2-laradock/workspace/Dockerfile-71/repaired.Dockerfile
@@ -65,11 +65,10 @@ ARG INSTALL_SOAP=false
 ENV INSTALL_SOAP ${INSTALL_SOAP}
 
 RUN if [ ${INSTALL_SOAP} = true ]; then \
-    # Install the PHP SOAP extension
     add-apt-repository -y ppa:ondrej/php && \
     apt-get update -yqq && \
-    apt-get -y install libxml2-dev php7.1-soap \
-    ;fi
+    apt-get -y --no-install-recommends install libxml2-dev php7.1-soap \
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # LDAP:
@@ -80,9 +79,9 @@ ENV INSTALL_LDAP ${INSTALL_LDAP}
 
 RUN if [ ${INSTALL_LDAP} = true ]; then \
     apt-get update -yqq && \
-    apt-get install -y libldap2-dev && \
-    apt-get install -y php7.1-ldap \
-    ;fi
+    apt-get install --no-install-recommends -y libldap2-dev && \
+    apt-get install --no-install-recommends -y php7.1-ldap \
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # IMAP:
@@ -93,8 +92,8 @@ ENV INSTALL_IMAP ${INSTALL_IMAP}
 
 RUN if [ ${INSTALL_IMAP} = true ]; then \
     apt-get update -yqq && \
-    apt-get install -y php7.1-imap \
-;fi
+    apt-get install --no-install-recommends -y php7.1-imap \
+; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # Set Timezone
@@ -158,12 +157,11 @@ RUN echo "" >> ~/.bashrc && \
 
 ARG INSTALL_XDEBUG=false
 RUN if [ ${INSTALL_XDEBUG} = true ]; then \
-    # Load the xdebug extension only with phpunit commands
     apt-get update && \
-    apt-get install -y --force-yes php7.1-xdebug && \
+    apt-get install --no-install-recommends -y --force-yes php7.1-xdebug && \
     sed -i 's/^;//g' /etc/php/7.1/cli/conf.d/20-xdebug.ini && \
     echo "alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'" >> ~/.bashrc \
-    ;fi
+    ; rm -rf /var/lib/apt/lists/*; fi
 # ADD for REMOTE debugging
 COPY ./xdebug.ini /etc/php/7.1/cli/conf.d/xdebug.ini
 
@@ -179,11 +177,11 @@ ENV BLACKFIRE_CLIENT_ID ${BLACKFIRE_CLIENT_ID}
 ENV BLACKFIRE_CLIENT_TOKEN ${BLACKFIRE_CLIENT_TOKEN}
 
 RUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \
-    curl -L https://packagecloud.io/gpg.key | apt-key add - && \
+    curl -f -L https://packagecloud.io/gpg.key | apt-key add - && \
     echo "deb http://packages.blackfire.io/debian any main" | tee /etc/apt/sources.list.d/blackfire.list && \
     apt-get update -yqq && \
-    apt-get install blackfire-agent \
-    ;fi
+    apt-get install -y --no-install-recommends blackfire-agent \
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # ssh:
@@ -228,12 +226,12 @@ RUN if [ ${INSTALL_MONGO} = true ]; then \
 ARG INSTALL_AMQP=false
 ENV INSTALL_AMQP ${INSTALL_AMQP}
 RUN if [ ${INSTALL_AMQP} = true ]; then \
-    apt-get install librabbitmq-dev -y && \
+    apt-get install --no-install-recommends librabbitmq-dev -y && \
     # Install the mongodb extension
     pecl -q install amqp && \
     echo "extension=amqp.so" >> /etc/php/7.1/mods-available/amqp.ini && \
     ln -s /etc/php/7.1/mods-available/amqp.ini /etc/php/7.1/cli/conf.d/30-amqp.ini \
-;fi
+; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # PHP REDIS EXTENSION FOR PHP 7.1
@@ -269,12 +267,12 @@ ARG INSTALL_DRUSH=false
 ENV INSTALL_DRUSH ${INSTALL_DRUSH}
 RUN if [ ${INSTALL_DRUSH} = true ]; then \
     apt-get update -yqq && \
-    apt-get -y install mysql-client && \
+    apt-get -y --no-install-recommends install mysql-client && \
     # Install Drush 8 with the phar file.
     curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash && \
     chmod +x /usr/local/bin/drush && \
     drush core-status \
-    ;fi
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # Drupal Console:
@@ -284,11 +282,11 @@ ARG INSTALL_DRUPAL_CONSOLE=false
 ENV INSTALL_DRUPAL_CONSOLE ${INSTALL_DRUPAL_CONSOLE}
 RUN if [ ${INSTALL_DRUPAL_CONSOLE} = true ]; then \
     apt-get update -yqq && \
-    apt-get -y install mysql-client && \
-    curl https://drupalconsole.com/installer -L -o drupal.phar && \
+    apt-get -y --no-install-recommends install mysql-client && \
+    curl -f https://drupalconsole.com/installer -L -o drupal.phar && \
     mv drupal.phar /usr/local/bin/drupal && \
     chmod +x /usr/local/bin/drupal \
-    ;fi
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 USER laradock
 
@@ -303,14 +301,13 @@ ARG INSTALL_NODE=false
 ENV INSTALL_NODE ${INSTALL_NODE}
 ENV NVM_DIR /home/laradock/.nvm
 RUN if [ ${INSTALL_NODE} = true ]; then \
-    # Install nvm (A Node Version Manager)
-    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \
+    curl -f -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \
     . $NVM_DIR/nvm.sh && \
     nvm install ${NODE_VERSION} && \
     nvm use ${NODE_VERSION} && \
     nvm alias ${NODE_VERSION} && \
     npm install -g gulp bower vue-cli \
-    ;fi
+    ; npm cache clean --force; fi
 
 # Wouldn't execute when added to the RUN statement in the above block
 # Source NVM when loading bash since ~/.profile isn't loaded on non-login shell
@@ -347,13 +344,18 @@ ENV YARN_VERSION ${YARN_VERSION}
 RUN if [ ${INSTALL_YARN} = true ]; then \
     [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && \
     if [ ${YARN_VERSION} = "latest" ]; then \
-    curl -o- -L https://yarnpkg.com/install.sh | bash; \
+    curl -f -o- -L https://yarnpkg.com/install.sh | bash; \
     else \
-    curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \
+    curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \
     fi && \
     echo "" >> ~/.bashrc && \
     echo 'export PATH="$HOME/.yarn/bin:$PATH"' >> ~/.bashrc \
-    ;fi
+    ; else \
+    curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \
+    fi \
+
+
+    fi
 
 # Add YARN binaries to root's .bashrc
 USER root
@@ -376,12 +378,11 @@ ENV INSTALL_AEROSPIKE ${INSTALL_AEROSPIKE}
 COPY ./aerospike.ini /etc/php/7.1/cli/conf.d/aerospike.ini
 
 RUN if [ ${INSTALL_AEROSPIKE} = true ]; then \
-    # Fix dependencies for PHPUnit within aerospike extension
     apt-get update -yqq && \
-    apt-get -y install sudo wget && \
+    apt-get -y --no-install-recommends install sudo wget && \
 
     # Install the php aerospike extension
-    curl -L -o /tmp/aerospike-client-php.tar.gz "https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz" \
+    curl -f -L -o /tmp/aerospike-client-php.tar.gz "https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz" \
     && mkdir -p aerospike-client-php \
     && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \
     && ( \
@@ -391,7 +392,7 @@ RUN if [ ${INSTALL_AEROSPIKE} = true ]; then \
     && make install \
     ) \
     && rm /tmp/aerospike-client-php.tar.gz \
-    ;fi
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 RUN if [ ${INSTALL_AEROSPIKE} = false ]; then \
     rm /etc/php/7.1/cli/conf.d/aerospike.ini \
@@ -406,13 +407,12 @@ ARG INSTALL_V8JS=false
 ENV INSTALL_V8JS ${INSTALL_V8JS}
 
 RUN if [ ${INSTALL_V8JS} = true ]; then \
-    # Install the php V8JS extension
     add-apt-repository -y ppa:pinepain/libv8-5.4 \
     && apt-get update -yqq \
-    && apt-get install -y php-xml php-dev php-pear libv8-5.4 \
+    && apt-get install --no-install-recommends -y php-xml php-dev php-pear libv8-5.4 \
     && pecl install v8js \
     && echo "extension=v8js.so" >> /etc/php/7.1/cli/php.ini \
-    ;fi
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # Non-root user : PHPUnit path
@@ -476,10 +476,8 @@ ARG INSTALL_LINUXBREW=false
 ENV INSTALL_LINUXBREW ${INSTALL_LINUXBREW}
 
 RUN if [ ${INSTALL_LINUXBREW} = true ]; then \
-
-    # Preparation
     apt-get upgrade -y && \
-    apt-get install -y build-essential make cmake scons curl git \
+    apt-get install --no-install-recommends -y build-essential make cmake scons curl git \
     ruby autoconf automake autoconf-archive \
     gettext libtool flex bison \
     libbz2-dev libcurl4-openssl-dev \
@@ -497,7 +495,7 @@ RUN if [ ${INSTALL_LINUXBREW} = true ]; then \
     echo 'export MANPATH="$LINUXBREWHOME/man:$MANPATH"' >> ~/.bashrc && \
     echo 'export PKG_CONFIG_PATH="$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH"' >> ~/.bashrc && \
     echo 'export LD_LIBRARY_PATH="$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH"' >> ~/.bashrc \
-    ;fi
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # SQL SERVER:
@@ -506,12 +504,9 @@ ARG INSTALL_MSSQL=false
 ENV INSTALL_MSSQL ${INSTALL_MSSQL}
 
 RUN if [ ${INSTALL_MSSQL} = true ]; then \
-    #####################################
-    # Install Depenencies:
-    #####################################
     cd / && \
     apt-get update -yqq && \
-    apt-get install -y --force-yes wget apt-transport-https curl freetds-common libsybdb5 freetds-bin unixodbc unixodbc-dev && \
+    apt-get install --no-install-recommends -y --force-yes wget apt-transport-https curl freetds-common libsybdb5 freetds-bin unixodbc unixodbc-dev && \
 
     #####################################
     #  The following steps were taken from
@@ -534,11 +529,11 @@ RUN if [ ${INSTALL_MSSQL} = true ]; then \
     # Compile odbc_config as it is not part of unixodbc package
     cd / && \
     apt-get update -yqq && \
-    apt-get install -y whiptail \
+    apt-get install --no-install-recommends -y whiptail \
     unixodbc libgss3 odbcinst devscripts debhelper dh-exec dh-autoreconf libreadline-dev libltdl-dev \
     && dget -u -x http://http.debian.net/debian/pool/main/u/unixodbc/unixodbc_2.3.1-3.dsc \
     && cd unixodbc-*/ \
-    && ./configure && make && make install \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && make && make install \
     && cp -v ./exe/odbc_config /usr/local/bin/ && \
 
     # Fake uname for install.sh
@@ -571,12 +566,12 @@ RUN if [ ${INSTALL_MSSQL} = true ]; then \
     # Set locales for the container
     #####################################
 
-    apt-get install -y locales \
+    apt-get install --no-install-recommends -y locales \
     && echo "en_US.UTF-8 UTF-8" > /etc/locale.gen \
     && locale-gen \
     && echo "extension=sqlsrv.so" > /etc/php/7.1/cli/conf.d/20-sqlsrv.ini \
     && echo "extension=pdo_sqlsrv.so" > /etc/php/7.1/cli/conf.d/20-pdo_sqlsrv.ini \
-    ;fi
+    ; rm msodbcsql-13.0.0.0.tar.gz rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # Minio:
@@ -599,11 +594,11 @@ USER root
 ARG INSTALL_IMAGE_OPTIMIZERS=false
 ENV INSTALL_IMAGE_OPTIMIZERS ${INSTALL_IMAGE_OPTIMIZERS}
 RUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then \
-    apt-get install -y --force-yes jpegoptim optipng pngquant gifsicle && \
+    apt-get install --no-install-recommends -y --force-yes jpegoptim optipng pngquant gifsicle && \
     if [ ${INSTALL_NODE} = true ]; then \
     . ~/.bashrc && npm install -g svgo \
-    ;fi\
-    ;fi
+    ; npm cache clean --force; fi \
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 USER laradock
 
@@ -614,20 +609,19 @@ USER root
 ARG INSTALL_SYMFONY=false
 ENV INSTALL_SYMFONY ${INSTALL_SYMFONY}
 RUN if [ ${INSTALL_SYMFONY} = true ]; then \
-
     mkdir -p /usr/local/bin \
-    && curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony \
+    && curl -f -LsS https://symfony.com/installer -o /usr/local/bin/symfony \
     && chmod a+x /usr/local/bin/symfony \
 
     #  Symfony 3 alias
     && echo 'alias dev="php bin/console -e=dev"' >> ~/.bashrc \
     && echo 'alias prod="php bin/console -e=prod"' >> ~/.bashrc \
 
-    #  Symfony 2 alias
-    #  && echo 'alias dev="php app/console -e=dev"' >> ~/.bashrc \
-    #  && echo 'alias prod="php app/console -e=prod"' >> ~/.bashrc \
 
-    ;fi
+
+
+
+    ; fi
 
 #####################################
 # PYTHON:
@@ -637,10 +631,10 @@ ARG INSTALL_PYTHON=false
 ENV INSTALL_PYTHON ${INSTALL_PYTHON}
 RUN if [ ${INSTALL_PYTHON} = true ]; then \
     apt-get update \
-    && apt-get -y install python python-pip python-dev build-essential  \
-    && pip install --upgrade pip  \
-    && pip install --upgrade virtualenv \
-    ;fi
+    && apt-get -y --no-install-recommends install python python-pip python-dev build-essential \
+    && pip install --no-cache-dir --upgrade pip \
+    && pip install --no-cache-dir --upgrade virtualenv \
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # ImageMagick:
@@ -649,8 +643,8 @@ USER root
 ARG INSTALL_IMAGEMAGICK=false
 ENV INSTALL_IMAGEMAGICK ${INSTALL_IMAGEMAGICK}
 RUN if [ ${INSTALL_IMAGEMAGICK} = true ]; then \
-    apt-get install -y --force-yes imagemagick php-imagick \
-    ;fi
+    apt-get install --no-install-recommends -y --force-yes imagemagick php-imagick \
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # Terraform:
@@ -660,12 +654,12 @@ ARG INSTALL_TERRAFORM=false
 ENV INSTALL_TERRAFORM ${INSTALL_TERRAFORM}
 RUN if [ ${INSTALL_TERRAFORM} = true ]; then \
     apt-get update -yqq \
-    && apt-get -y install sudo wget unzip \
+    && apt-get -y --no-install-recommends install sudo wget unzip \
     && wget https://releases.hashicorp.com/terraform/0.10.6/terraform_0.10.6_linux_amd64.zip \
     && unzip terraform_0.10.6_linux_amd64.zip \
     && mv terraform /usr/local/bin \
     && rm terraform_0.10.6_linux_amd64.zip \
-;fi
+; rm -rf /var/lib/apt/lists/*; fi
 #####################################
 # pgsql client
 #####################################
@@ -673,10 +667,9 @@ USER root
 ARG INSTALL_PG_CLIENT=false
 ENV INSTALL_PG_CLIENT ${INSTALL_PG_CLIENT}
 RUN if [ ${INSTALL_PG_CLIENT} = true ]; then \
-    # Install the pgsql clint
     apt-get update -yqq && \
-    apt-get -y install postgresql-client \
-;fi
+    apt-get -y --no-install-recommends install postgresql-client \
+; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # Dusk Dependencies:
@@ -689,7 +682,7 @@ ENV INSTALL_DUSK_DEPS ${INSTALL_DUSK_DEPS}
 RUN if [ ${INSTALL_DUSK_DEPS} = true ]; then \
     add-apt-repository ppa:ondrej/php \
     && apt-get update \
-    && apt-get -y install zip wget unzip xdg-utils \
+    && apt-get -y --no-install-recommends install zip wget unzip xdg-utils \
     libxpm4 libxrender1 libgtk2.0-0 libnss3 libgconf-2-4 xvfb \
     gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi \
     xfonts-base xfonts-scalable x11-apps \
@@ -702,7 +695,7 @@ RUN if [ ${INSTALL_DUSK_DEPS} = true ]; then \
     && unzip chromedriver_linux64.zip \
     && mv chromedriver /usr/local/bin/ \
     && rm chromedriver_linux64.zip \
-    ;fi
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # Human Language and Character Encoding Support:
@@ -711,11 +704,10 @@ USER root
 ARG INSTALL_INTL=false
 ENV INSTALL_INTL ${INSTALL_INTL}
 RUN if [ ${INSTALL_INTL} = true ]; then \
-    # Install intl and requirements
     apt-get update -yqq && \
-    apt-get install -y zlib1g-dev libicu-dev g++ && \
-    apt-get install -y php7.1-intl \
-    ;fi
+    apt-get install --no-install-recommends -y zlib1g-dev libicu-dev g++ && \
+    apt-get install --no-install-recommends -y php7.1-intl \
+    ; rm -rf /var/lib/apt/lists/*; fi
 
 #
 #--------------------------------------------------------------------------