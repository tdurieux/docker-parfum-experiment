{
  "startTime": 1674255775187,
  "endTime": 1674255775920,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 49,
        "columnEnd": 92
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 3
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###\n# speaker.app backend Dockerfile\n###\n\nFROM node:16.14\nLABEL maintainer=\"info@zenosmosis.com\"\n\nARG BUILD_ENV\nARG GIT_HASH\n\nRUN if [ \"${BUILD_ENV}\" = \"development\" ] ; then \\\n npm install --loglevel verbose -g nodemon ; npm cache clean --force; fi\n\nWORKDIR /app/backend\n\n# Build node_modules before copying rest of program in order to speed up\n# subsequent Docker builds which don't have changed package.json contents\n#\n# IMPORTANT: \"--only=production\" is used here in BE, while not being used\n# in FE as the FE can't build without development modules\nCOPY package.json ./\nCOPY package-lock.json ./\nRUN chown -R node:node /app/backend\n\nUSER node\n\nRUN if [ \"${BUILD_ENV}\" = \"production\" ] ; then \\\n  npm install --loglevel verbose --only=production \\\n  ; npm cache clean --force; fi\n\n# Subsequent builds usually will start here\nCOPY ./ ./\n\n# Copy shared modules from parent directory\nUSER root\nRUN if [ \"${BUILD_ENV}\" = \"production\" ] ; then \\\n  rm src/shared \\\n  && mv src/tmp.shared src/shared \\\n  ; fi\nUSER node\n\n# Used for version number\nENV GIT_HASH=\"${GIT_HASH}\"\n\nEXPOSE 3001\n\nCMD npm run start\n"
}