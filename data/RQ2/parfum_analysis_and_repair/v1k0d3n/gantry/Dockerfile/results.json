{
  "startTime": 1674249567043,
  "endTime": 1674249568314,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 163
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 173
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 193
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 100,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 84,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 100,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 100,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 84,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 100,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2018 JinkIT LLC, v1k0d3n, and its Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nFROM ubuntu:16.04\nMAINTAINER bjozsa@jinkit.com\n\n# Set buildtime ARGs:\nARG DEBIAN_FRONTED=noninteractive\nARG ARCH=\"amd64\"\nARG VERSION_CNI=\"v0.6.0\"\nARG VERSION_DOCK=\"17.03.2\"\nARG VERSION_HELM=\"v2.7.2\"\nARG VERSION_KUBEADM=\"v1.9.3\"\nARG VERSION_KUBECTL=\"v1.9.3\"\nARG VERSION_KUBELET=\"v1.9.3\"\nARG BOOTSTR_CONF=\"/root/etc/kubeadm-conf.yaml\"\nARG ROOTFS=${ROOTFS:-kubeadm}\n\n# Set container ENVs from ARGs:\nENV ARCH=${ARCH} \\\n    VERSION_CNI=${VERSION_CNI} \\\n    VERSION_DOCK=${VERSION_DOCK} \\\n    VERSION_HELM=${VERSION_HELM} \\\n    VERSION_KUBEADM=${VERSION_KUBEADM} \\\n    VERSION_KUBECTL=${VERSION_KUBECTL} \\\n    VERSION_KUBELET=${VERSION_KUBELET} \\\n    BOOTSTR_CONF=${BOOTSTR_CONF} \\\n    ROOTFS=${ROOTFS} \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    DIR_BIN_CNI=\"/opt/cni/bin\"\n\nENV container docker\nSTOPSIGNAL SIGRTMIN+3\n\n# Set variables from ARGS for reuse later:\nRUN set | grep VERSION_ > /.kubeadm.env ;\\\n    set | grep BOOTSTR_ >> /.kubeadm.env ;\\\n    set | grep ROOTFS >> /.kubeadm.env\n\n# We don't need no graphical.target here:\nRUN systemctl set-default multi-user.target\n\n# Create various directories:\nRUN mkdir -p /opt/${ROOTFS} ;\\\n    mkdir -p ${ROOTFS}\n\n# Add files to container during build process:\nCOPY bin /${ROOTFS}/bin\nCOPY etc /${ROOTFS}/etc\n\n# Update/upgrade sources/packages:\nRUN apt-get update ;\\\n    apt-get upgrade -y\n\n# Install prereqs:\nRUN apt-get install --no-install-recommends -y \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Add gpg keys for custom any repos:\nRUN curl -f -s https://download.docker.com/linux/ubuntu/gpg | apt-key add -; \\\n    curl -f -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n\n# Add the custom repos to apt sources:\nRUN chmod +x /${ROOTFS}/bin/repo\nRUN /${ROOTFS}/bin/repo\n\n# Update with new sources/repos:\nRUN apt-get update\n\n# Install packages from those sources:\nRUN apt-get install --no-install-recommends -y \\\n    docker-ce=${VERSION_DOCK}~ce-0~ubuntu-xenial \\\n    ebtables \\\n    ethtool \\\n    kmod \\\n    kubernetes-cni \\\n    libwrap0 \\\n    systemd \\\n    tcpd && rm -rf /var/lib/apt/lists/*;\n\n# Install libgcrypt11 for CentOS support:\nRUN curl -f -o /tmp/libgcrypt11_1.5.3.deb -L https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/8993248/+files/libgcrypt11_1.5.3-2ubuntu4.3_amd64.deb; \\\n    dpkg -i /tmp/libgcrypt11_1.5.3.deb ; \\\n    apt-get install -y -f\n\n# Separately install any kubeadm requirements:\nRUN apt-get install --no-install-recommends -y \\\n    socat && rm -rf /var/lib/apt/lists/*;\n\n# Clean up apt-cache:\nRUN apt-get clean ;\\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Download - kubeadm:\nRUN curl -f -o /${ROOTFS}/bin/kubeadm https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubeadm; \\\n    chmod +x /${ROOTFS}/bin/kubeadm\n\n# Download - kubectl:\nRUN curl -f -o /${ROOTFS}/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubectl; \\\n    chmod +x /${ROOTFS}/bin/kubectl\n\n# Download - kubelet:\nRUN curl -f -o /${ROOTFS}/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubelet; \\\n    chmod +x /${ROOTFS}/bin/kubelet\n\n# Download - cni:\nRUN mkdir /${ROOTFS}/cni ; \\\n    curl -f -o /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/cni/releases/download/${VERSION_CNI}/cni-${ARCH}-${VERSION_CNI}.tgz --location; \\\n    curl -f -o /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/plugins/releases/download/${VERSION_CNI}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz --location; \\\n    tar -zxvf /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/ ; rm /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz \\\n    tar -zxvf /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/ ; \\\n    rm -rf /${ROOTFS}/cni-*\n\n# Set PATH inside of the container:\nENV PATH=\"/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin:${PATH}\"\n\n# Clean directories to read host systemd:\nRUN cd /lib/systemd/system/sysinit.target.wants/; ls | grep -v systemd-tmpfiles-setup | xargs rm -f $1 \\\n    rm -f /lib/systemd/system/multi-user.target.wants/*;\\\n    rm -f /etc/systemd/system/*.wants/*;\\\n    rm -f /lib/systemd/system/local-fs.target.wants/*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\n    rm -f /lib/systemd/system/basic.target.wants/*;\\\n    rm -f /lib/systemd/system/anaconda.target.wants/*; \\\n    rm -f /lib/systemd/system/plymouth*; \\\n    rm -f /lib/systemd/system/systemd-update-utmp*;\n\n# Well, we are trying to access systemd from here:\nRUN systemctl set-default multi-user.target\nENV init /lib/systemd/systemd\n\n# WORKDIR \"/opt/${ROOTFS}/etc/kubeadm/\"\n# VOLUME [\"/opt/${ROOTFS}\"]\n\n# Final entrypoint for the container:\n#CMD [\"kubeadm\", \"init\", \"--config=config.yaml\"]\nCOPY gantry /usr/local/bin/gantry\n#WORKDIR /opt/${ROOTFS}/etc/kubeadm/\nCMD [\"gantry\"]\n"
}