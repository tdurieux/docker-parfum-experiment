{
  "startTime": 1674218908861,
  "endTime": 1674218909692,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 25,
        "columnEnd": 189
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 25,
        "columnEnd": 189
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n# vim: filetype=dockerfile:\n#\n# \\file      tools/docker/Dockerfile.quinoa-build-debian\n# \\copyright 2012-2015 J. Bakosi,\n#            2016-2018 Los Alamos National Security, LLC.,\n#            2019-2021 Triad National Security, LLC.\n#            All rights reserved. See the LICENSE file for details.\n# \\brief     Dockerfile for a simple dynamic build of Quinoa on Debian\n# \\details   Dockerfile for a simple dynamic build of Quinoa on Debian Linux\n# using the native system-wide compiler and MPI wrappers.\n#\n# We start from the Debian/testing Linux distribution and install all possible\n# prerequisites, then build the required but missing third-party libraries,\n# build the code, and test.\n#\n# This docker image is intended to test and demonstrate a simple way of building\n# Quinoa. It creates dynamically built executables which require runtime\n# libraries.\n#\n################################################################################\n\nFROM debian:buster\n\n# Install system-wide prerequisites\nRUN apt-get update -y && apt-get install --no-install-recommends -y git autoconf cmake gfortran g++ libopenmpi-dev m4 zlib1g-dev libx11-dev libxpm-dev libxft-dev libxext-dev python python-dev flex bison libssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# Setup user\nRUN adduser --gecos \"\" --disabled-password quinoa\nWORKDIR /home/quinoa\nUSER quinoa\nWORKDIR /home/quinoa\n#CMD [\"/bin/bash\"]\n\n# Clone quinoa\nRUN git clone --recurse-submodules https://github.com/quinoacomputing/quinoa.git\n# Checkout commit to be tested\nARG COMMIT\nRUN cd quinoa && git checkout $COMMIT && git log -1 HEAD\n# Update submodules\nRUN cd quinoa && git submodule init && git submodule update --recursive && cd external && git submodule init && git submodule update --recursive && cd .. && git submodule status --recursive\n# Build TPLs\nRUN cd quinoa && mkdir -p external/build && cd external/build && cmake -DENABLE_ROOT=true -DENABLE_OMEGA_H=true -DCXXFLAGS=-w .. && make -sj$(grep -c processor /proc/cpuinfo)\n# Build code\nRUN cd quinoa && mkdir -p build && cd build && cmake -DRUNNER=mpirun -DRUNNER_NCPUS_ARG=-n -DRUNNER_ARGS=\"--bind-to none -oversubscribe\" ../src && make -sj$(grep -c processor /proc/cpuinfo)\n# Run tests\nRUN cd quinoa/build && npe=$(expr $(grep -c processor /proc/cpuinfo) / 2) && mpirun -n $npe Main/unittest -v -q && ctest -j $npe --output-on-failure -LE extreme\n"
}