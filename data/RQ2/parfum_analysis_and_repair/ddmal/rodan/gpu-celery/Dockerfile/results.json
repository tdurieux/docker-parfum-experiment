{
  "startTime": 1674246287504,
  "endTime": 1674246288553,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 44,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 121,
        "lineEnd": 136,
        "columnStart": 5,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 60,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 121,
        "lineEnd": 136,
        "columnStart": 5,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG UBUNTU_VERSION=18.04\nARG CUDA=11.2\nFROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}.1-base-ubuntu${UBUNTU_VERSION} as base\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\nARG ARCH\nARG CUDA\nARG CUDNN=8.1.0.77-1\nARG CUDNN_MAJOR_VERSION=8\nARG LIB_DIR_PREFIX=x86_64\nARG LIBNVINFER=7.2.2-1\nARG LIBNVINFER_MAJOR_VERSION=7\n\n# The following two arguments are rodan-specific\nARG BRANCHES\nARG VERSION\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\n# Pick up some TF dependencies\nRUN apt update\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        libcublas-${CUDA/./-} \\\n        cuda-nvrtc-${CUDA/./-} \\\n        libcufft-${CUDA/./-} \\\n        libcurand-${CUDA/./-} \\\n        libcusolver-${CUDA/./-} \\\n        libcusparse-${CUDA/./-} \\\n        curl \\\n        libcudnn8=${CUDNN}+cuda${CUDA} \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        software-properties-common \\\n        unzip \\\n\t\twget && rm -rf /var/lib/apt/lists/*;\n# added wget\t\t\n\n# Install TensorRT if not building for PowerPC\n# NOTE: libnvinfer uses cuda11.1 versions\n# RUN [[ \"${ARCH}\" = \"ppc64le\" ]] || { apt-get update && \\\n#         apt-get install -y --no-install-recommends libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda11.1 \\\n#         libnvinfer-plugin${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda11.1 \\\n#         && apt-get clean \\\n#         && rm -rf /var/lib/apt/lists/*; }\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda-11.1/lib64:$LD_LIBRARY_PATH\n\n# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure\n# dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\n# This section differs from the default tensorflow2.5.1 Dockerfile, because we specifically add python 3.7;\nARG PYTHON=python3.7\nARG TF_PACKAGE=tensorflow\nARG TF_PACKAGE_VERSION=2.5.1\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    python3.7 \\\n    python3-pip \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* \\\n  && wget https://bootstrap.pypa.io/get-pip.py \\\n  && ${PYTHON} get-pip.py \\\n  && ln -sf /usr/bin/${PYTHON} /usr/local/bin/python3 \\\n  && ln -sf /usr/local/bin/pip /usr/local/bin/pip3 \\\n  && pip3 --no-cache-dir install --upgrade pip setuptools==57.0.0 \\\n  # Some TF tools expect a \"python\" binary\n  && ln -s $(which python3) /usr/local/bin/python \\\n  && python3 -m pip install --no-cache-dir ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}\n\n# RUN ln -s $(which python3) /usr/local/bin/python\n\n# Options:\n#   tensorflow\n#   tensorflow-gpu\n#   tf-nightly\n#   tf-nightly-gpu\n# Set --build-arg TF_PACKAGE_VERSION=1.11.0rc0 to install a specific version.\n# Installs the latest version by default.\n\n# COPY bashrc /etc/bash.bashrc\n# RUN chmod a+rwx /etc/bash.bashrc\n\n# This ends the material obtained from TensorFlow's dockerfile. the remainder is rodan-docker-specific setup.\n\n# FROM base\nRUN set -e \\\n  && apt-get update \\\n  && DEBIAN_FRONTEND=\"noninteractive\" apt-get --no-install-recommends install -yqq \\\n    git \\\n\n    python3.7-dev \\\n    python3-opencv \\\n    libxml2-dev \\\n    libxslt1-dev \\\n    zlib1g-dev \\\n    lib32ncurses5-dev \\\n\n    libpq-dev \\\n\n    libmagic-dev \\\n    unzip \\\n\n    vim && rm -rf /var/lib/apt/lists/*;\n\nRUN rm -rf /var/lib/apt/lists/*\n\n# Bandaid fix for the cannot import name '_registerMatType' from 'cv2.cv2' issue\nRUN pip uninstall opencv-python-headless && pip install --no-cache-dir opencv-python-headless==4.1.2.30\n\n# Install GPU Rodan Jobs\nCOPY ./scripts/install_gpu_rodan_jobs /opt/\n# Install Rodan\nCOPY ./scripts/install_rodan /run/\n# Runs on both Rodan service, and Rodan-Celery\nCOPY ./scripts/entrypoint /opt/\nCOPY ./scripts/start-celery /run/\nCOPY ./scripts/wait-for-app /run/\n\n# Copying rodan core from build context into container\n# Rodan folder MUST be uppercase, otherwise many unittests fail.\nCOPY ./rodan-main/code /code/Rodan\n\n# necessary for scikit-image > 0.17, or else it will try to make a cache directory\n# in a place where the www-data user does not have permissions to do so\nENV SKIMAGE_DATADIR \"/tmp/.skimage_cache\"\n\n\nRUN set -x \\\n  # Create Folders\n  && mkdir -p /code/jobs \\\n  # Install GPU Jobs\n  && chmod +x /opt/install_gpu_rodan_jobs \\\n  && chown www-data /opt/install_gpu_rodan_jobs \\\n  && /opt/install_gpu_rodan_jobs \\\n  # Install Rodan\n  && sed -i \"s/pip /pip3 /g\" /run/install_rodan \\\n  && sed -i \"s/lxml/#lxml/g\" /code/Rodan/requirements.txt \\\n  # && sed -i \"s/pybagit==1.5.0/-e git:\\/\\/github.com\\/deepio\\/pybagit.git@a27c9e0fc3bdf99dab8bd327f3ce9ea884abd6b4#egg=pybagit/g\" /code/Rodan/requirements.txt \\\n  # Add Entrypoints\n  && sed -i 's/\\r//' /opt/entrypoint \\\n  && chmod +x /opt/entrypoint \\\n  && chown www-data /opt/entrypoint \\\n  # Install Rodan\n  && chmod +x /run/install_rodan \\\n  && chown www-data /run/install_rodan \\\n  && /run/install_rodan \\\n  # Add Celery script\n  && chmod +x /run/start-celery \\\n  && chown www-data /run/start-celery \\\n  # Change the concurency for gpu jobs because Calvo is very expensive\n  && sed -i \"s/=10/=1/g\" /run/start-celery \\\n  # Script to wait for postgres and redis to be running before attempting to connect to them.\n  && chmod +x /run/wait-for-app \\\n  && chown www-data /run/wait-for-app \\\n  && chown -R www-data /code/Rodan /code/jobs\n\nENTRYPOINT [\"/opt/entrypoint\"]"
}