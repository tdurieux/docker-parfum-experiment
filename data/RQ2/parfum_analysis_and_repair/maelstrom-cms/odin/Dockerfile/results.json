{
  "startTime": 1674252087059,
  "endTime": 1674252088535,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.4-fpm-alpine\n\n# install extensions\n# intl, zip, soap\nRUN apk add --update --no-cache libintl icu icu-dev libxml2-dev libzip libzip-dev \\\n    && docker-php-ext-install intl zip soap\n\n# mysqli, pdo, pdo_mysql, pdo_pgsql\nRUN apk add --update --no-cache postgresql-dev \\\n    && docker-php-ext-install mysqli pdo pdo_mysql\n\n# mcrypt, gd, iconv\nRUN apk add --update --no-cache \\\n        freetype-dev \\\n        php7-dev \\\n        libc-dev \\\n        gcc \\\n        make \\\n        cmake \\\n        libjpeg-turbo-dev \\\n        libmcrypt-dev \\\n        libpng-dev \\\n    && pecl install mcrypt \\\n    && docker-php-ext-enable mcrypt \\\n    && docker-php-ext-install -j\"$(getconf _NPROCESSORS_ONLN)\" iconv \\\n    && docker-php-ext-configure gd \\\n    && docker-php-ext-install -j\"$(getconf _NPROCESSORS_ONLN)\" gd\n\n# gmp\nRUN apk add --update --no-cache gmp gmp-dev \\\n    && docker-php-ext-install gmp\n\n# php-redis\nENV PHPREDIS_VERSION 3.1.2\n\nRUN docker-php-source extract \\\n    && curl -f -L -o /tmp/redis.tar.gz https://github.com/phpredis/phpredis/archive/$PHPREDIS_VERSION.tar.gz \\\n    && tar xfz /tmp/redis.tar.gz \\\n    && rm -r /tmp/redis.tar.gz \\\n    && mv phpredis-$PHPREDIS_VERSION /usr/src/php/ext/redis \\\n    && docker-php-ext-install redis \\\n    && docker-php-source delete\n\n# apcu\nRUN docker-php-source extract \\\n    && apk add --no-cache --virtual .phpize-deps-configure $PHPIZE_DEPS \\\n    && pecl install apcu \\\n    && docker-php-ext-enable apcu \\\n    && apk del .phpize-deps-configure \\\n    && docker-php-source delete\n\n\n# git client\nRUN apk add --update --no-cache git nodejs npm oniguruma oniguruma-dev\n\n# imagick\nRUN apk add --update --no-cache autoconf g++ imagemagick-dev libtool make pcre-dev icu-dev gettext-dev \\\n    && pecl install imagick \\\n    && docker-php-ext-enable imagick\n\n# install bcmath extension\nRUN docker-php-ext-install bcmath\n# Change TimeZone\nRUN echo \"Set default timezone - Europe/Vienna\"\nRUN echo \"Europe/Vienna\" > /etc/timezone\n\n# Install composer globally\nRUN echo \"Install composer globally\"\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer\n\nRUN docker-php-ext-install -j$(nproc) exif pcntl bcmath gd intl mysqli pdo_mysql shmop opcache gettext sockets sysvmsg sysvsem sysvshm tokenizer\n#RUN docker-php-ext-install curl ftp\n\n# failed to install\nRUN docker-php-ext-install posix phar readline\n\n# already loaded\nRUN docker-php-ext-install pdo mbstring dom iconv json\n\n# Installs latest Chromium (85) package.\nRUN apk add --no-cache \\\n      chromium \\\n      nss \\\n      freetype \\\n      freetype-dev \\\n      harfbuzz \\\n      ca-certificates \\\n      ttf-freefont \\\n      nodejs \\\n      yarn \\\n      nginx\n\n\n# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \\\n    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser\n\n# Puppeteer v5.2.1 works with Chromium 85.\nRUN yarn add puppeteer@5.2.1\n\nRUN sed -i 's/memory_limit = 128M/memory_limit = 2048M/g' /etc/php7/php.ini\nRUN sed -i 's/max_execution_time = 30/max_execution_time = 3000/g' /etc/php7/php.ini\n\nWORKDIR /var/www\n\nADD . /var/www/\n\nCOPY ./.env.example /var/www/.env\n\nCOPY ./storage /opt/storage\n\nCOPY ./docker/odin.conf /etc/nginx/conf.d/default.conf\n\nRUN mkdir /run/nginx && chown nginx:root /run/nginx\n\nRUN chown -R nginx:nginx /var/www\n\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n\nUSER nginx\n\nRUN composer install\n\nRUN npm install && npm cache clean --force;\n\nRUN npx browserslist@latest --update-db\n\nRUN composer require spatie/browsershot\n\nRUN npm i pixelmatch && npm cache clean --force;\n\nRUN npm run prod\n\nEXPOSE 80\n\nENTRYPOINT /var/www/docker/entrypoint.sh\n\n"
}