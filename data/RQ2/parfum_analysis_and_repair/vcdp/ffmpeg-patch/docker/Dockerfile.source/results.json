{
  "startTime": 1674255770081,
  "endTime": 1674255773660,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 5,
        "columnEnd": 79
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 79
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 170
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 5,
        "columnEnd": 95
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 234,
        "lineEnd": 234,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 329,
        "lineEnd": 329,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 341,
        "lineEnd": 341,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 468,
        "lineEnd": 468,
        "columnStart": 4,
        "columnEnd": 752
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 352,
        "lineEnd": 352,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 25,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 367,
        "lineEnd": 367,
        "columnStart": 22,
        "columnEnd": 105
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 507,
        "lineEnd": 507,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 53,
        "columnEnd": 240
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 54,
        "columnEnd": 111
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 25,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 230,
        "lineEnd": 230,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 53,
        "columnEnd": 153
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 273,
        "lineEnd": 273,
        "columnStart": 53,
        "columnEnd": 162
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 349,
        "lineEnd": 349,
        "columnStart": 53,
        "columnEnd": 112
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 367,
        "lineEnd": 367,
        "columnStart": 22,
        "columnEnd": 105
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 446,
        "lineEnd": 446,
        "columnStart": 53,
        "columnEnd": 232
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 507,
        "lineEnd": 507,
        "columnStart": 22,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 8,
        "columnEnd": 62
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04 AS build\nWORKDIR /home\n\n# COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN git config --global http.proxy ${http_proxy}\nRUN git config --global https.proxy ${https_proxy}\n\n# Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \\\n    cd cmake-${CMAKE_VER} && \\\n    ./bootstrap --prefix=\"/usr/local\" --system-curl && \\\n    make -j8 && \\\n    make install\n\n# Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\n    RUN apt-get install --no-install-recommends -y -q automake && rm -rf /var/lib/apt/lists/*;\n\n# Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} && \\\n     tar -xaf nasm* && \\\n     cd nasm-${NASM_VER} && \\\n     ./autogen.sh && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n     make -j8 && \\\n     make install\n\n# Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz && \\\n     cd yasm-${YASM_VER} && \\\n     sed -i \"s/) ytasm.*/)/\" Makefile.in && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n     make -j8 && \\\n     make install\n\n# Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://github.com/xiph/ogg/releases/download/v${OGG_VER}/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ && \\\n    cd libogg-${OGG_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://github.com/xiph/vorbis/archive/v${VORBIS_VER}.tar.gz\nRUN wget -O - ${VORBIS_REPO} | tar xz && \\\n    cd vorbis-${VORBIS_VER} && \\\n    ./autogen.sh && \\\n    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib/x86_64-linux-gnu && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\n\nRUN wget -O - ${MP3LAME_REPO} | tar xz && \\\n    cd lame-${MP3LAME_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared --enable-nasm && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\n\nRUN wget -O - ${FDK_AAC_REPO} | tar xz && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac && \\\n    cd fdk-aac && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\n\nRUN wget -O - ${OPUS_REPO} | tar xz && \\\n    cd opus-${OPUS_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\n\nRUN git clone ${VPX_REPO} && \\\n    cd libvpx && \\\n    git checkout ${VPX_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\n\nRUN git clone ${X264_REPO} && \\\n     cd x264 && \\\n     git checkout ${X264_VER} && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n\n# Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libnuma-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN  wget -O - ${X265_REPO} | tar xz && mv x265-${X265_VER} x265 && \\\n     cd x265/build/linux && \\\n     cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DLIB_INSTALL_DIR=/usr/local/lib/x86_64-linux-gnu ../../source && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n# Install required packges\nRUN apt-get update -y && apt-get install --no-install-recommends -y python3-pip ninja-build; rm -rf /var/lib/apt/lists/*;\n\n# Build Meson\nARG MESON_VER=0.53.1\nARG MESON_REPO=https://github.com/mesonbuild/meson\n\nRUN git clone ${MESON_REPO}; \\\n    cd meson; \\\n    git checkout ${MESON_VER}; \\\n    python3 setup.py install;\n\n# Build dav1d\nARG LIBDAV1D_VER=0.5.2\nARG LIBDAV1D_REPO=https://code.videolan.org/videolan/dav1d.git\n\nRUN  git clone ${LIBDAV1D_REPO}; \\\n     cd dav1d; \\\n     git checkout ${LIBDAV1D_VER}; \\\n     meson build --prefix /usr --libdir /usr/lib/x86_64-linux-gnu --buildtype release; \\\n     ninja -C build; \\\n     cd build; \\\n     DESTDIR=\"/home/build\" ninja install; \\\n     ninja install;\n\n\n# Fetch SVT-HEVC\nARG SVT_HEVC_VER=v1.4.3\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\n\nRUN git clone ${SVT_HEVC_REPO} && \\\n    cd SVT-HEVC/Build/linux && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\" && \\\n    git checkout ${SVT_HEVC_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Fetch SVT-AV1\nARG SVT_AV1_VER=v0.8.1\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\n\nARG SVT_AV1_PATCHES_RELEASE_VER=0.3\nARG SVT_AV1_PATCHES_RELEASE_URL=https://github.com/VCDP/CDN/archive/v${SVT_AV1_PATCHES_RELEASE_VER}.tar.gz\nARG SVT_AV1_PATCHES_PATH=/home/CDN-${SVT_AV1_PATCHES_RELEASE_VER}\nRUN wget -O - ${SVT_AV1_PATCHES_RELEASE_URL} | tar xz\n\nRUN git clone ${SVT_AV1_REPO} && \\\n    cd SVT-AV1 && \\\n    git checkout ${SVT_AV1_VER} && \\\n    find ${SVT_AV1_PATCHES_PATH}/SVT-AV1_patches -type f -name '*.patch' -print0 | sort -z | xargs -t -0 -n 1 patch -p1 -i && \\\n    cd Build/linux && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n#Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ]; then rm -rf build/home/; fi\n\n\n# Fetch SVT-VP9\nARG SVT_VP9_VER=v0.1.0\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\n\nRUN git clone ${SVT_VP9_REPO} && \\\n    cd SVT-VP9/Build/linux && \\\n    git checkout ${SVT_VP9_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Fetch gmmlib\nARG GMMLIB_VER=intel-gmmlib-18.3.0\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/${GMMLIB_VER}.tar.gz\n\nRUN wget -O - ${GMMLIB_REPO} | tar xz && mv gmmlib-${GMMLIB_VER} gmmlib;\n\n\n# Build libdrm\nARG LIBDRM_VER=2.4.96\nARG LIBDRM_REPO=https://dri.freedesktop.org/libdrm/libdrm-${LIBDRM_VER}.tar.gz\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends libpciaccess-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${LIBDRM_REPO} | tar xz && \\\n    cd libdrm-${LIBDRM_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install;\n\n\n# Build libva\nARG LIBVA_VER=2.4.0\nARG LIBVA_REPO=https://github.com/intel/libva/archive/${LIBVA_VER}.tar.gz\n\nRUN apt-get remove libva*\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libdrm-dev libx11-dev xorg-dev libgl1-mesa-dev openbox && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${LIBVA_REPO} | tar xz && \\\n    cd libva-${LIBVA_VER} && \\\n    ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install;\n\n\n# Build libva-utils\nARG LIBVA_UTILS_VER=2.4.0\nARG LIBVA_UTILS_REPO=https://github.com/intel/libva-utils/archive/${LIBVA_UTILS_VER}.tar.gz\n\nRUN wget -O - ${LIBVA_UTILS_REPO} | tar xz; \\\n    cd libva-utils-${LIBVA_UTILS_VER}; \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\"; \\\n    ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu; \\\n    make -j8; \\\n    make install DESTDIR=/home/build; \\\n    make install;\n\n\n# Build media driver\nARG MEDIA_DRIVER_VER=intel-media-kbl-19.1.1\nARG MEDIA_DRIVER_REPO=https://github.com/VCDP/media-driver/archive/${MEDIA_DRIVER_VER}.tar.gz\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libdrm-dev libpciaccess-dev libx11-dev xorg-dev libgl1-mesa-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${MEDIA_DRIVER_REPO} | tar xz && mv media-driver-${MEDIA_DRIVER_VER} media-driver && \\\n    mkdir -p media-driver/build && \\\n    cd media-driver/build && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\" && \\\n    cmake -DBUILD_TYPE=release -DBUILD_ALONG_WITH_CMRTLIB=1 -DMEDIA_VERSION=\"2.0.0\" -DBS_DIR_GMMLIB=/home/gmmlib/Source/GmmLib -DBS_DIR_COMMON=/home/gmmlib/Source/Common -DBS_DIR_INC=/home/gmmlib/Source/inc -DBS_DIR_MEDIA=/home/media-driver -Wno-dev -DCMAKE_INSTALL_PREFIX=/usr/local -DMEDIA_BUILD_FATAL_WARNINGS=OFF .. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n\n# Build Intel(R) Media SDK\nARG MSDK_VER=MSS-KBL-2019-R1-HF1\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VER}.tar.gz\n\nRUN wget -O - ${MSDK_REPO} | tar xz && mv MediaSDK-${MSDK_VER} MediaSDK && \\\n    mkdir -p MediaSDK/build && \\\n    cd MediaSDK/build && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\" && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SAMPLES=OFF -DENABLE_OPENCL=OFF -Wno-dev .. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    rm -rf /home/build/usr/samples && \\\n    rm -rf /home/build/usr/plugins && \\\n    rm -rf /home/build/usr/local/samples && \\\n    rm -rf /home/build/usr/local/plugins && \\\n    make install;\n\n#install OpenCL\n\nRUN mkdir neo\n\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.01.12103/intel-gmmlib_18.4.0.348_amd64.deb\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.01.12103/intel-igc-core_18.50.1270_amd64.deb\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.01.12103/intel-igc-opencl_18.50.1270_amd64.deb\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.01.12103/intel-opencl_19.01.12103_amd64.deb\n\nRUN cd neo && \\\n    dpkg -i *.deb && \\\n    dpkg-deb -x intel-gmmlib_18.4.0.348_amd64.deb /home/build/ && \\\n    dpkg-deb -x intel-igc-core_18.50.1270_amd64.deb /home/build/ && \\\n    dpkg-deb -x intel-igc-opencl_18.50.1270_amd64.deb /home/build/ && \\\n    dpkg-deb -x intel-opencl_19.01.12103_amd64.deb /home/build/\n\n\n#clinfo needs to be installed after build directory is copied over\n\n# Build libjson-c\nARG LIBJSONC_VER=0.13.1-20180305\nARG LIBJSONC_REPO=https://github.com/json-c/json-c/archive/json-c-${LIBJSONC_VER}.tar.gz\n\nRUN wget -O - ${LIBJSONC_REPO} | tar xz && \\\n    cd json-c-json-c-${LIBJSONC_VER} && \\\n    sh autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n    make -j8 && \\\n    make install DESTDIR=\"/home/build\" && \\\n    make install;\n\n# Build librdkafka\nARG LIBRDKAFKA_VER=1.0.0\nARG FILE_NAME=v${LIBRDKAFKA_VER}\nARG LIBRDKAFKA_REPO=https://github.com/edenhill/librdkafka/archive/${FILE_NAME}.tar.gz\n\nRUN wget -O - ${LIBRDKAFKA_REPO} | tar xz && \\\n    cd librdkafka-${LIBRDKAFKA_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install;\n\nARG OPENCV_VER=4.3.0\nARG OPENCV_REPO=https://github.com/opencv/opencv/archive/${OPENCV_VER}.tar.gz\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libeigen3-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget ${OPENCV_REPO} && \\\n    tar -zxvf ${OPENCV_VER}.tar.gz && \\\n    cd opencv-${OPENCV_VER} && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_EXAMPLES=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF .. && \\\n    make -j $(nproc) && \\\n    make install DESTDIR=/home/build && \\\n    make install && rm ${OPENCV_VER}.tar.gz\n\nENV CPATH=$CPATH:/usr/local/include/opencv4/\n\n# Build DLDT-Inference Engine\nARG DLDT_VER=2020.2\nARG DLDT_REPO=https://github.com/opencv/dldt.git\n\nRUN apt-get update && apt-get -y --no-install-recommends install libusb-1.0.0-dev python python-pip python-setuptools python-yaml && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone -b ${DLDT_VER} ${DLDT_REPO} && \\\n    cd dldt && \\\n    git submodule update --init --recursive && \\\n    mkdir build && \\\n    cd build && \\\n    cmake  -DCMAKE_INSTALL_PREFIX=/opt/intel/dldt -DLIB_INSTALL_PATH=/opt/intel/dldt -DENABLE_MKL_DNN=ON -DENABLE_CLDNN=ON -DENABLE_SAMPLES=OFF -DENABLE_OPENCV=OFF -DENABLE_TESTS=OFF -DENABLE_GNA=OFF -DENABLE_PROFILING_ITT=OFF -DENABLE_SAMPLES_CORE=OFF -DENABLE_SEGMENTATION_TESTS=OFF -DENABLE_OBJECT_DETECTION_TESTS=OFF -DBUILD_TESTS=OFF -DNGRAPH_UNIT_TEST_ENABLE=OFF -DNGRAPH_TEST_UTIL_ENABLE=OFF .. && \\\n    make -j $(nproc) && \\\n    rm -rf ../bin/intel64/Release/lib/libgtest* && \\\n    rm -rf ../bin/intel64/Release/lib/libgmock* && \\\n    rm -rf ../bin/intel64/Release/lib/libmock* && \\\n    rm -rf ../bin/intel64/Release/lib/libtest*\n\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\n\nRUN mkdir -p /opt/intel/dldt/inference-engine/include && \\\n    cp -r dldt/inference-engine/include/* /opt/intel/dldt/inference-engine/include && \\\n    cp -r dldt/inference-engine/ie_bridges/c/include/* /opt/intel/dldt/inference-engine/include && \\\n    mkdir -p ${libdir} && \\\n    cp -r dldt/bin/intel64/Release/lib/* ${libdir} && \\\n    mkdir -p /opt/intel/dldt/inference-engine/src && \\\n    cp -r dldt/inference-engine/src/* /opt/intel/dldt/inference-engine/src/ && \\\n    mkdir -p /opt/intel/dldt/inference-engine/share && \\\n    cp -r dldt/build/share/* /opt/intel/dldt/inference-engine/share/ && \\\n    mkdir -p /opt/intel/dldt/inference-engine/external/ && \\\n    cp -r dldt/inference-engine/temp/tbb /opt/intel/dldt/inference-engine/external/\n\nRUN mkdir -p build/opt/intel/dldt/inference-engine/include && \\\n    cp -r dldt/inference-engine/include/* build/opt/intel/dldt/inference-engine/include && \\\n    cp -r dldt/inference-engine/ie_bridges/c/include/* build/opt/intel/dldt/inference-engine/include && \\\n    mkdir -p build${libdir} && \\\n    cp -r dldt/bin/intel64/Release/lib/* build${libdir} && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/src && \\\n    cp -r dldt/inference-engine/src/* build/opt/intel/dldt/inference-engine/src/ && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/share && \\\n    cp -r dldt/build/share/* build/opt/intel/dldt/inference-engine/share/ && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/external/ && \\\n    cp -r dldt/inference-engine/temp/tbb build/opt/intel/dldt/inference-engine/external/\n\nRUN for p in /usr /home/build/usr /opt/intel/dldt/inference-engine /home/build/opt/intel/dldt/inference-engine; do \\\n        pkgconfiglibdir=\"$p/lib/x86_64-linux-gnu\" && \\\n        mkdir -p \"${pkgconfiglibdir}/pkgconfig\" && \\\n        pc=\"${pkgconfiglibdir}/pkgconfig/dldt.pc\" && \\\n        echo \"prefix=/opt\" > \"$pc\" && \\\n        echo \"libdir=${libdir}\" >> \"$pc\" && \\\n        echo \"includedir=/opt/intel/dldt/inference-engine/include\" >> \"$pc\" && \\\n        echo \"\" >> \"$pc\" && \\\n        echo \"Name: DLDT\" >> \"$pc\" && \\\n        echo \"Description: Intel Deep Learning Deployment Toolkit\" >> \"$pc\" && \\\n        echo \"Version: 5.0\" >> \"$pc\" && \\\n        echo \"\" >> \"$pc\" && \\\n        echo \"Libs: -L\\${libdir} -linference_engine\" >> \"$pc\" && \\\n        echo \"Cflags: -I\\${includedir}\" >> \"$pc\"; \\\n    done;\n\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\n\n\n#install Model Optimizer in the DLDT for Dev\n\n\n\n# Fetch FFmpeg source\nARG FFMPEG_VER=n4.2\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\n\nARG FFMPEG_PATCHES_RELEASE_VER=0.2\nARG FFMPEG_PATCHES_RELEASE_URL=https://github.com/VCDP/CDN/archive/v${FFMPEG_PATCHES_RELEASE_VER}.tar.gz\nARG FFMPEG_PATCHES_PATH=/home/CDN-${FFMPEG_PATCHES_RELEASE_VER}\nRUN wget -O - ${FFMPEG_PATCHES_RELEASE_URL} | tar xz\n\nARG FFMPEG_MA_RELEASE_VER=0.5\nARG FFMPEG_MA_RELEASE_URL=https://github.com/VCDP/FFmpeg-patch/archive/v${FFMPEG_MA_RELEASE_VER}.tar.gz\nARG FFMPEG_MA_PATH=/home/FFmpeg-patch-${FFMPEG_MA_RELEASE_VER}\nRUN wget -O - ${FFMPEG_MA_RELEASE_URL} | tar xz\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libass-dev libfreetype6-dev libvdpau-dev libsdl2-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev zlib1g-dev libssl-dev python3-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${FFMPEG_REPO} | tar xz && mv FFmpeg-${FFMPEG_VER} FFmpeg && \\\n    cd FFmpeg && \\\n    find ${FFMPEG_PATCHES_PATH}/FFmpeg_patches -type f -name '*.patch' -print0 | sort -z | xargs -t -0 -n 1 patch -p1 -i && \\\n    find ${FFMPEG_MA_PATH}/patches -type f -name '*.patch' -print0 | sort -z | xargs -t -0 -n 1 patch -p1 -i;\n\n# Patch FFmpeg source for SVT-HEVC\nRUN cd /home/FFmpeg && \\\n    patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch;\n\n# Patch FFmpeg source for SVT-AV1\nRUN cd /home/FFmpeg; \\\n    patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch;\n\nADD patch /root/patch\n\n# Compile FFmpeg\nRUN cd /home/FFmpeg && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\" && \\\n    cp /root/patch/opencv.pc /usr/local/lib/pkgconfig/ && \\\n    cp /root/patch/cvdef.h /usr/local/include/opencv4/opencv2/core/cvdef.h && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --extra-cflags=\"-I/opt/intel/dldt/inference-engine/include \" --extra-ldflags=\"-L/opt/intel/dldt/inference-engine/lib/intel64 \" --libdir=/usr/local/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-libass --enable-libfreetype --enable-openssl --enable-nonfree --enable-libdrm --enable-libmfx --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libdav1d --enable-libsvthevc --enable-libsvtav1 --enable-libinference_engine_c_api --enable-librdkafka --enable-libjson_c --enable-libopencv --enable-python3 && \\\n    make -j8 && \\\n    make install && make install DESTDIR=\"/home/build\" && \\\n    cp -rf python /home/build/python\n\n# remake opencv videoio to incorporate ffmpeg/gst\nRUN cd opencv-${OPENCV_VER}/build && \\\n    rm -rf * && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_GENERATE_PKGCONFIG=ON -DBUILD_EXAMPLES=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF .. && \\\n    cd modules/videoio && \\\n    make -j $(nproc) && \\\n    cp -f ../../lib/libopencv_videoio.so.${OPENCV_VER} /home/build/usr/local/lib\n\n# Clean up after build\nRUN rm -rf /home/build/usr/include && \\\n    rm -rf /home/build/usr/share/doc && \\\n    rm -rf /home/build/usr/share/gtk-doc && \\\n    rm -rf /home/build/usr/share/man && \\\n    rm -rf /home/build/usr/local/include && \\\n    rm -rf /home/build/usr/local/share/doc && \\\n    rm -rf /home/build/usr/local/share/gtk-doc && \\\n    rm -rf /home/build/usr/local/share/man && \\\n    find /home/build -name \"*.a\" -exec rm -f {} \\;\n\nFROM ubuntu:18.04\nLABEL Description=\"This is the base image for FFMPEG & DLDT Ubuntu 18.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n\n# Prerequisites\nRUN ln -sf /usr/share/zoneinfo/UTC /etc/localtime && \\\n    DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends  libxv1 libxcb-shm0 libxcb-shape0 libxcb-xfixes0 libsdl2-2.0-0 libasound2 libvdpau1 libnuma1 libass9 libssl1.1 libpciaccess0 libdrm2 libjson-c-dev python3-dev python3-pip && \\\n    rm -rf /var/lib/apt/lists/*\nRUN python3 -m pip install Pillow numpy\n\n# Install\nCOPY --from=build /home/build /\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib:/usr/local/lib/x86_64-linux-gnu\nENV LIBVA_DRIVERS_PATH=/usr/local/lib/x86_64-linux-gnu/dri\nENV LIBVA_DRIVER_NAME=iHD\nRUN apt-get update && apt-get install --no-install-recommends -y clinfo && rm -rf /var/lib/apt/lists/*;\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\n\n"
}