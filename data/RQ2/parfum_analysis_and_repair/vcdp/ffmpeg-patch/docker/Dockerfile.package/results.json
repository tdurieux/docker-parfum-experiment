{
  "startTime": 1674255526781,
  "endTime": 1674255529773,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 5,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 158
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 5,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 361,
        "lineEnd": 361,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 403,
        "lineEnd": 403,
        "columnStart": 4,
        "columnEnd": 648
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 372,
        "lineEnd": 372,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 429,
        "lineEnd": 429,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 53,
        "columnEnd": 240
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 54,
        "columnEnd": 111
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 209,
        "lineEnd": 209,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 225,
        "lineEnd": 225,
        "columnStart": 53,
        "columnEnd": 153
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 251,
        "lineEnd": 251,
        "columnStart": 53,
        "columnEnd": 162
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 307,
        "lineEnd": 310,
        "columnStart": 54,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 369,
        "lineEnd": 369,
        "columnStart": 54,
        "columnEnd": 208
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 385,
        "lineEnd": 385,
        "columnStart": 53,
        "columnEnd": 243
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 429,
        "lineEnd": 429,
        "columnStart": 22,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 8,
        "columnEnd": 62
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04 AS build\nWORKDIR /home\n\n# COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN git config --global http.proxy ${http_proxy}\nRUN git config --global https.proxy ${https_proxy}\n\n# Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \\\n    cd cmake-${CMAKE_VER} && \\\n    ./bootstrap --prefix=\"/usr\" --system-curl && \\\n    make -j8 && \\\n    make install\n\n# Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\n    RUN apt-get install --no-install-recommends -y -q automake && rm -rf /var/lib/apt/lists/*;\n\n# Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} && \\\n     tar -xaf nasm* && \\\n     cd nasm-${NASM_VER} && \\\n     ./autogen.sh && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu && \\\n     make -j8 && \\\n     make install\n\n# Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz && \\\n     cd yasm-${YASM_VER} && \\\n     sed -i \"s/) ytasm.*/)/\" Makefile.in && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu && \\\n     make -j8 && \\\n     make install\n\n# Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\n\nRUN wget -O - ${OGG_REPO} | tar xJ && \\\n    cd libogg-${OGG_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\n\nRUN wget -O - ${VORBIS_REPO} | tar xJ && \\\n    cd libvorbis-${VORBIS_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\n\nRUN wget -O - ${MP3LAME_REPO} | tar xz && \\\n    cd lame-${MP3LAME_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\n\nRUN wget -O - ${FDK_AAC_REPO} | tar xz && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac && \\\n    cd fdk-aac && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\n\nRUN wget -O - ${OPUS_REPO} | tar xz && \\\n    cd opus-${OPUS_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\n\nRUN git clone ${VPX_REPO} && \\\n    cd libvpx && \\\n    git checkout ${VPX_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\n\nRUN  git clone ${AOM_REPO} && \\\n     mkdir aom/aom_build && \\\n     cd aom/aom_build && \\\n     git checkout ${AOM_VER} && \\\n     cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n# Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\n\nRUN git clone ${X264_REPO} && \\\n     cd x264 && \\\n     git checkout ${X264_VER} && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n\n# Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libnuma-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN  wget -O - ${X265_REPO} | tar xz && mv x265-${X265_VER} x265 && \\\n     cd x265/build/linux && \\\n     cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n# Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\n\nRUN git clone ${SVT_HEVC_REPO} && \\\n    cd SVT-HEVC/Build/linux && \\\n    git checkout ${SVT_HEVC_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Fetch SVT-AV1\nARG SVT_AV1_VER=90b56a80795d4d0448673c4c7276ce6d5c8ac9d4\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\n\nRUN git clone ${SVT_AV1_REPO} && \\\n    cd SVT-AV1/Build/linux && \\\n    git checkout ${SVT_AV1_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n#Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ]; then rm -rf build/home/; fi\n\n\n# Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\n\nRUN git clone ${SVT_VP9_REPO} && \\\n    cd SVT-VP9/Build/linux && \\\n    git checkout ${SVT_VP9_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Fetch gmmlib\nARG GMMLIB_VER=intel-gmmlib-19.4.1\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/${GMMLIB_VER}.tar.gz\n\nRUN wget -O - ${GMMLIB_REPO} | tar xz && mv gmmlib-${GMMLIB_VER} gmmlib;\n\n\n# Build libdrm\nARG LIBDRM_VER=2.4.96\nARG LIBDRM_REPO=https://dri.freedesktop.org/libdrm/libdrm-${LIBDRM_VER}.tar.gz\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends libpciaccess-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${LIBDRM_REPO} | tar xz && \\\n    cd libdrm-${LIBDRM_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install;\n\n\n# Build libva\nARG LIBVA_VER=2.6.1\nARG LIBVA_REPO=https://github.com/intel/libva/archive/${LIBVA_VER}.tar.gz\n\nRUN apt-get remove libva*\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libdrm-dev libx11-dev xorg-dev libgl1-mesa-dev openbox && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${LIBVA_REPO} | tar xz && \\\n    cd libva-${LIBVA_VER} && \\\n    ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install;\n\n\n# Build libva-utils\nARG LIBVA_UTILS_VER=2.4.0\nARG LIBVA_UTILS_REPO=https://github.com/intel/libva-utils/archive/${LIBVA_UTILS_VER}.tar.gz\n\nRUN wget -O - ${LIBVA_UTILS_REPO} | tar xz; \\\n    cd libva-utils-${LIBVA_UTILS_VER}; \\\n    ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu; \\\n    make -j8; \\\n    make install DESTDIR=/home/build; \\\n    make install;\n\n\n# Build media driver\nARG MEDIA_DRIVER_VER=intel-media-19.4.0r\nARG MEDIA_DRIVER_REPO=https://github.com/intel/media-driver/archive/${MEDIA_DRIVER_VER}.tar.gz\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libdrm-dev libpciaccess-dev libx11-dev xorg-dev libgl1-mesa-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${MEDIA_DRIVER_REPO} | tar xz && mv media-driver-${MEDIA_DRIVER_VER} media-driver && \\\n    mkdir -p media-driver/build && \\\n    cd media-driver/build && \\\n    cmake -DBUILD_TYPE=release -DBUILD_ALONG_WITH_CMRTLIB=1 -DMEDIA_VERSION=\"2.0.0\" -DBS_DIR_GMMLIB=/home/gmmlib/Source/GmmLib -DBS_DIR_COMMON=/home/gmmlib/Source/Common -DBS_DIR_INC=/home/gmmlib/Source/inc -DBS_DIR_MEDIA=/home/media-driver -Wno-dev -DCMAKE_INSTALL_PREFIX=/usr .. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n\n# Build Intel(R) Media SDK\nARG MSDK_VER=MSS-KBL-2019-R1\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VER}.tar.gz\n\nRUN wget -O - ${MSDK_REPO} | tar xz && mv MediaSDK-${MSDK_VER} MediaSDK && \\\n    mkdir -p MediaSDK/build && \\\n    cd MediaSDK/build && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_INCLUDEDIR=include/mfx -DBUILD_SAMPLES=OFF -DENABLE_OPENCL=OFF -Wno-dev .. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    rm -rf /home/build/usr/samples && \\\n    rm -rf /home/build/usr/plugins && \\\n    make install;\n\n#install OpenCL\n\nRUN mkdir neo\n\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.41.14441/intel-gmmlib_19.3.2_amd64.deb\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.41.14441/intel-igc-core_1.0.2597_amd64.deb\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.41.14441/intel-igc-opencl_1.0.2597_amd64.deb\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.41.14441/intel-opencl_19.41.14441_amd64.deb\nRUN cd neo && wget https://github.com/intel/compute-runtime/releases/download/19.41.14441/intel-ocloc_19.41.14441_amd64.deb\n\nRUN cd neo && \\\n    dpkg -i *.deb && \\\n    dpkg-deb -x intel-gmmlib_19.3.2_amd64.deb       /home/build/ && \\\n    dpkg-deb -x intel-igc-core_1.0.2597_amd64.deb   /home/build/ && \\\n    dpkg-deb -x intel-igc-opencl_1.0.2597_amd64.deb /home/build/ && \\\n    dpkg-deb -x intel-opencl_19.41.14441_amd64.deb  /home/build/ && \\\n    dpkg-deb -x intel-ocloc_19.41.14441_amd64.deb   /home/build/\n\n# ARGS to download specific versions of openvino, uncomment the one to download\n#R3\n#ARG OPENVINO_BUNDLE=l_openvino_toolkit_p_2019.3.334\n#ARG OPENVINO_URL=http://registrationcenter-download.intel.com/akdlm/irc_nas/15944/l_openvino_toolkit_p_2019.3.334.tgz\n# 2020.1\n#ARG OPENVINO_BUNDLE=l_openvino_toolkit_p_2020.1.023\n#ARG OPENVINO_URL=http://registrationcenter-download.intel.com/akdlm/irc_nas/16345/l_openvino_toolkit_p_2020.1.023.tgz\n# 2020.2\nARG OPENVINO_BUNDLE=l_openvino_toolkit_p_2020.2.120\nARG OPENVINO_URL=http://registrationcenter-download.intel.com/akdlm/irc_nas/16612/l_openvino_toolkit_p_2020.2.120.tgz\n\n#Install OpenVino dependencies\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends cpio joe nano sudo unzip wget less \\\nlibcairo2-dev libpango1.0-dev \\\nlibglib2.0-dev libgtk2.0-dev libswscale-dev libavcodec-dev libavformat-dev build-essential \\\nlibusb-1.0-0-dev && rm -rf /var/lib/apt/lists/*;\n\n#Download and unpack OpenVino\nRUN mkdir /tmp2\nRUN wget ${OPENVINO_URL} -P /tmp2\nRUN if [ -f /tmp2/${OPENVINO_BUNDLE}.tgz ]; \\\n    then tar xzvf /tmp2/${OPENVINO_BUNDLE}.tgz -C /tmp2 && rm /tmp2/${OPENVINO_BUNDLE}.tgz; \\\n    else echo \"Please prepare the OpenVino installation bundle\"; \\\nfi\n\n# Create a silent configuration file for install\nRUN echo \"ACCEPT_EULA=accept\" > /tmp2/silent.cfg                        && \\\n    echo \"CONTINUE_WITH_OPTIONAL_ERROR=yes\" >> /tmp2/silent.cfg         && \\\n    echo \"PSET_INSTALL_DIR=/opt/intel\" >> /tmp2/silent.cfg              && \\\n    echo \"CONTINUE_WITH_INSTALLDIR_OVERWRITE=yes\" >> /tmp2/silent.cfg   && \\\n    echo \"COMPONENTS=DEFAULTS\" >> /tmp2/silent.cfg                      && \\\n    echo \"COMPONENTS=ALL\" >> /tmp2/silent.cfg                           && \\\n    echo \"PSET_MODE=install\" >> /tmp2/silent.cfg                        && \\\n    echo \"INTEL_SW_IMPROVEMENT_PROGRAM_CONSENT=no\" >> /tmp2/silent.cfg  && \\\n    echo \"SIGNING_ENABLED=no\" >> /tmp2/silent.cfg\n\n#Install OpenVino\nRUN /tmp2/${OPENVINO_BUNDLE}/install.sh --ignore-signature --cli-mode -s /tmp2/silent.cfg && rm -rf /tmp2\n\n#Remove components of OpenVino that won't be used\nARG CV_BASE_DIR=/opt/intel/openvino\nRUN rm -rf ${CV_BASE_DIR}/uninstall*\n\n#Copy over directories to copy over to clean image\nRUN mkdir -p /home/build/usr/local/lib && \\\n    mkdir -p /home/build/opt/intel && \\\n    mkdir -p /home/build/usr/lib && \\\n    cp -r /usr/local/lib/* /home/build/usr/local/lib/ && \\\n    cp -r /opt/intel/* /home/build/opt/intel/ && \\\n    cp -r /usr/lib/* /home/build/usr/lib\n\nENV IE_PLUGINS_PATH=/opt/intel/openvino/deployment_tools/inference_engine/lib/intel64\nENV HDDL_INSTALL_DIR=/opt/intel/openvino/deployment_tools/inference_engine/external/hddl\nENV InferenceEngine_DIR=\"/opt/intel/openvino/deployment_tools/inference_engine/share\"\nENV OpenCV_DIR=/opt/intel/openvino/opencv/share/OpenCV\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/openvino/deployment_tools/ngraph/lib:/opt/intel/opencl:$HDDL_INSTALL_DIR/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/gna/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/mkltiny_lnx/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/tbb/lib:/opt/intel/openvino/openvx/lib:$IE_PLUGINS_PATH\nRUN rm -rf /var/lib/apt/lists/*;\n\n\n# Build librdkafka\nARG LIBRDKAFKA_VER=1.0.0\nARG FILE_NAME=v${LIBRDKAFKA_VER}\nARG LIBRDKAFKA_REPO=https://github.com/edenhill/librdkafka/archive/${FILE_NAME}.tar.gz\n\nRUN wget -O - ${LIBRDKAFKA_REPO} | tar xz && \\\n    cd librdkafka-${LIBRDKAFKA_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install;\n\nARG OPENCV_VER=4.3.0\nARG OPENCV_REPO=https://github.com/opencv/opencv/archive/${OPENCV_VER}.tar.gz\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libjson-c-dev libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy && rm -rf /var/lib/apt/lists/*;\n\nRUN wget ${OPENCV_REPO} && \\\n    tar -zxvf ${OPENCV_VER}.tar.gz && \\\n    cd opencv-${OPENCV_VER} && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_EXAMPLES=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF .. && \\\n    make -j $(nproc) && \\\n    make install DESTDIR=/home/build && \\\n    make install && rm ${OPENCV_VER}.tar.gz\n\nENV CPATH=$CPATH:/usr/local/include/opencv4/\n\n# Fetch FFmpeg source\nENV IE_PATH=/opt/intel/openvino/deployment_tools/inference_engine\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libass-dev libfreetype6-dev libvdpau-dev libsdl2-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev zlib1g-dev libssl-dev ssh-client python3-dev && rm -rf /var/lib/apt/lists/*;\n\nADD patch /root/patch\nARG FFMPEG_VER=n4.2\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\n\nARG FFMPEG_MA_RELEASE_VER=0.5\nARG FFMPEG_MA_RELEASE_URL=https://github.com/VCDP/FFmpeg-patch/archive/v${FFMPEG_MA_RELEASE_VER}.tar.gz\nARG FFMPEG_MA_PATH=/home/FFmpeg-patch-${FFMPEG_MA_RELEASE_VER}\nRUN wget -O - ${FFMPEG_MA_RELEASE_URL} | tar xz\n\n# Compile FFmpeg\nRUN wget -O - ${FFMPEG_REPO} | tar xz && mv FFmpeg-${FFMPEG_VER} FFmpeg\n\nRUN cd /home/FFmpeg && \\\n    find ${FFMPEG_MA_PATH}/patches -type f -name '*.patch' -print0 | sort -z | xargs -t -0 -n 1 patch -p1 -i && \\\n    cp /root/patch/opencv.pc /usr/lib/pkgconfig/ && \\\n    cp /root/patch/cvdef.h /usr/local/include/opencv4/opencv2/core/cvdef.h && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --extra-cflags=\"-I$IE_PATH/include\" --extra-ldflags=\"-L$IE_PATH/lib/intel64\" --libdir=/usr/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-libass --enable-libfreetype --enable-openssl --enable-nonfree --enable-libdrm --enable-libmfx --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libaom --enable-librdkafka --enable-libjson_c --enable-libinference_engine_c_api --enable-libopencv --enable-python3 && \\\n    make -j8 && \\\n    make install DESTDIR=\"/home/build\" && \\\n    cp -rf python /home/build/python\n\n# Clean up after build\nRUN rm -rf /home/build/usr/include && \\\n    rm -rf /home/build/usr/share/doc && \\\n    rm -rf /home/build/usr/share/gtk-doc && \\\n    rm -rf /home/build/usr/share/man && \\\n    find /home/build -name \"*.a\" -exec rm -f {} \\;\n\nFROM ubuntu:18.04\nLABEL Description=\"This is the base image for FFMPEG & openvino Ubuntu 18.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n\n# Prerequisites\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libxv1 libxcb-shm0 libxcb-shape0 libxcb-xfixes0 libsdl2-2.0-0 libasound2 libvdpau1 libnuma1 libass-dev libssl1.0.0 libdrm2 libboost-all-dev libusb-1.0-0-dev libjson-c-dev python3-dev python3-pip ; \\\n    rm -rf /var/lib/apt/lists/*;\nRUN python3 -m pip install Pillow numpy\n\n# Install\nCOPY --from=build /home/build /\nENV LIBVA_DRIVERS_PATH=/usr/lib/x86_64-linux-gnu/dri\nENV LIBVA_DRIVER_NAME=iHD\nRUN apt-get update && apt-get install --no-install-recommends -y clinfo && rm -rf /var/lib/apt/lists/*;\nENV IE_PLUGINS_PATH=/opt/intel/openvino/deployment_tools/inference_engine/lib/intel64\nENV HDDL_INSTALL_DIR=/opt/intel/openvino/deployment_tools/inference_engine/external/hddl\nENV InferenceEngine_DIR=\"/opt/intel/openvino/deployment_tools/inference_engine/share\"\nENV OpenCV_DIR=/opt/intel/openvino/opencv/share/OpenCV\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/opt/intel/openvino/deployment_tools/ngraph/lib:/opt/intel/opencl:$HDDL_INSTALL_DIR/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/gna/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/mkltiny_lnx/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/tbb/lib:/opt/intel/openvino/openvx/lib:$IE_PLUGINS_PATH\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/openvino/deployment_tools/ngraph/lib:/usr/local/lib:/opt/intel/opencl:$HDDL_INSTALL_DIR/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/gna/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/mkltiny_lnx/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/tbb/lib:/opt/intel/openvino/openvx/lib:$IE_PLUGINS_PATH\n\n"
}