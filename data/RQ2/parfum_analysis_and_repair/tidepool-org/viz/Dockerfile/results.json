{
  "startTime": 1674218367355,
  "endTime": 1674218368201,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### Stage 0 - Base image\nFROM node:10.14.2-alpine as base\nWORKDIR /app\nRUN mkdir -p dist node_modules && chown -R node:node .\n\n\n### Stage 1 - Base image for development image to install and configure Chromium for unit tests\nFROM base as developBase\nRUN \\\n  echo \"http://dl-cdn.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n  && echo \"http://dl-cdn.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories \\\n  && echo \"http://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories \\\n  && apk --no-cache  update \\\n  && apk --no-cache  upgrade \\\n  && apk add --no-cache git fontconfig bash udev ttf-opensans chromium \\\n  && rm -rf /var/cache/apk/* /tmp/*\nENV \\\n  CHROME_BIN=/usr/bin/chromium-browser \\\n  LIGHTHOUSE_CHROMIUM_PATH=/usr/bin/chromium-browser \\\n  NODE_ENV=development\n\n\n### Stage 2 - Create cached `node_modules`\n# Only rebuild layer if `package.json` has changed\nFROM base as dependencies\nRUN apk --no-cache update \\\n  && apk --no-cache upgrade \\\n  && apk add --no-cache git\nUSER node\nCOPY package.json .\n# Ignore scripts during install to prevent `prepare` and `prepublishOnly` from running\nRUN npm install --ignore-scripts && npm cache clean --force;\n\n\n### Stage 3 - Development root with Chromium installed for unit tests\nFROM developBase as develop\nWORKDIR /app\nUSER node\n# Copy all `node_modules` from dependancies layer\nCOPY --chown=node:node --from=dependencies /app/node_modules ./node_modules\n# Copy source files\nCOPY --chown=node:node . .\nEXPOSE 8082 8083\nVOLUME [\"/app\", \"/app/node_modules\", \"/app/dist\"]\nCMD [\"npm\", \"start\"]\n"
}