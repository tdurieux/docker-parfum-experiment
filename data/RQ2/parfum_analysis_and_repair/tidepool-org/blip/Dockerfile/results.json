{
  "startTime": 1674250007312,
  "endTime": 1674250007977,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 113,
        "columnEnd": 186
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 79,
        "columnEnd": 152
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 108,
        "columnEnd": 181
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 124,
        "columnEnd": 197
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 62,
        "columnEnd": 71
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 86,
        "columnEnd": 100
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### Stage: Base image\nFROM node:10.14.2-alpine as base\nWORKDIR /app\nRUN mkdir -p dist node_modules .yarn-cache && chown -R node:node .\n\n\n### Stage: Development root with Chromium installed for unit tests\nFROM base as development\nARG I18N_ENABLED=false\nARG RX_ENABLED=false\nARG PENDO_ENABLED=true\nARG CLINICS_ENABLED=false\nENV \\\n  CHROME_BIN=/usr/bin/chromium-browser \\\n  LIGHTHOUSE_CHROMIUM_PATH=/usr/bin/chromium-browser \\\n  I18N_ENABLED=$I18N_ENABLED \\\n  RX_ENABLED=$RX_ENABLED \\\n  PENDO_ENABLED=$PENDO_ENABLED \\\n  CLINICS_ENABLED=$CLINICS_ENABLED \\\n  NODE_ENV=development \\\n  TIDEPOOL_DOCKER_VIZ_DIR=/app/packageMounts/@tidepool/viz\nRUN \\\n  echo \"http://dl-cdn.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n  && echo \"http://dl-cdn.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories \\\n  && echo \"http://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories \\\n  && apk --no-cache update \\\n  && apk --no-cache upgrade \\\n  && apk add --no-cache git fontconfig bash udev ttf-opensans chromium rsync \\\n  && rm -rf /var/cache/apk/* /tmp/*\n# Install package dependancies for blip and mounted packages if present\nUSER node\nRUN mkdir -p /home/node/.yarn-cache /home/node/.cache/yarn\n# viz\nCOPY --chown=node:node packageMounts/@tidepool/viz/stub packageMounts/@tidepool/viz/yarn.lock* packageMounts/@tidepool/viz/package.json* packageMounts/@tidepool/viz/\nRUN --mount=type=cache,target=/home/node/.yarn-cache,id=yarn,uid=1000,gid=1000 cd packageMounts/@tidepool/viz && yarn install --cache-folder /home/node/.yarn-cache --silent --no-progress && yarn cache clean;\n# blip\nCOPY --chown=node:node package.json yarn.lock .yarnrc ./\nRUN --mount=type=cache,target=/home/node/.yarn-cache,id=yarn,uid=1000,gid=1000 yarn install --cache-folder /home/node/.yarn-cache --silent --no-progress && yarn cache clean;\n# tideline\nCOPY --chown=node:node packageMounts/tideline/stub packageMounts/tideline/yarn.lock* packageMounts/tideline/package.json* packageMounts/tideline/\nRUN --mount=type=cache,target=/home/node/.yarn-cache,id=yarn,uid=1000,gid=1000 cd packageMounts/tideline && yarn install --cache-folder /home/node/.yarn-cache --silent --no-progress && yarn cache clean;\n# platform-client\nCOPY --chown=node:node packageMounts/tidepool-platform-client/stub packageMounts/tidepool-platform-client/yarn.lock* packageMounts/tidepool-platform-client/package.json* packageMounts/tidepool-platform-client/\nRUN --mount=type=cache,target=/home/node/.yarn-cache,id=yarn,uid=1000,gid=1000 cd packageMounts/tidepool-platform-client && yarn install --cache-folder /home/node/.yarn-cache --silent --no-progress && yarn cache clean;\n# Copy the yarn cache mount to the standard yarn cache directory for quicker installs within running containers\nRUN --mount=type=cache,target=/home/node/.yarn-cache,id=yarn,uid=1000,gid=1000 (cd /home/node/.yarn-cache; tar cf - .) | (cd /home/node/.cache/yarn; tar xpf -)\n# Link any packages as needed\nARG LINKED_PKGS=\"\"\nRUN for i in ${LINKED_PKGS//,/ }; docd packageMounts/${i} && yarn link && cd /app && yarn link ${i};done && yarn cache clean;\n# Copy source files\nCOPY --chown=node:node . .\nCMD [\"npm\", \"start\"]\n\n\n### Stage: Build production-ready release\nFROM base as build\n# ARGs\nARG API_HOST\nARG PORT=3000\nARG SERVICE_NAME=blip\nARG ROLLBAR_POST_SERVER_TOKEN\nARG I18N_ENABLED=false\nARG RX_ENABLED=false\nARG PENDO_ENABLED=true\nARG CLINICS_ENABLED=false\nARG TRAVIS_COMMIT\n# Set ENV from ARGs\nENV \\\n  API_HOST=$API_HOST \\\n  PORT=$PORT \\\n  SERVICE_NAME=$SERVICE_NAME \\\n  ROLLBAR_POST_SERVER_TOKEN=$ROLLBAR_POST_SERVER_TOKEN \\\n  I18N_ENABLED=$I18N_ENABLED \\\n  RX_ENABLED=$RX_ENABLED \\\n  PENDO_ENABLED=$PENDO_ENABLED \\\n  CLINICS_ENABLED=$CLINICS_ENABLED \\\n  TRAVIS_COMMIT=$TRAVIS_COMMIT \\\n  NODE_ENV=production\nUSER node\n# Copy all `node_modules` from `development` layer\nCOPY --from=development /app/node_modules ./node_modules\n# Copy source files, and possibily invalidate so we have to rebuild\nCOPY . .\nRUN npm run build\n\n\n### Stage: Serve production-ready release\nFROM base as production\nRUN apk --no-cache update \\\n  && apk --no-cache upgrade \\\n  && apk add --no-cache git\nCOPY package.json .\nCOPY yarn.lock .\nCOPY .yarnrc .\n# Only install `node_modules` dependancies needed for production\nRUN yarn install --production --frozen-lockfile && yarn cache clean;\nUSER node\n# Copy only files needed to run the server\nCOPY --from=build /app/dist dist\nCOPY --from=build /app/tilt tilt\nCOPY --from=build \\\n  /app/config.server.js \\\n  /app/package.json \\\n  /app/server.js \\\n  ./\nCMD [\"npm\", \"run\", \"server\"]\n"
}