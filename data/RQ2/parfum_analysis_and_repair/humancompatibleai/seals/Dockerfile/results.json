{
  "startTime": 1674246091407,
  "endTime": 1674246092686,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# base stage contains just binary dependencies.\n# This is used in the CI build.\nFROM nvidia/cuda:10.0-runtime-ubuntu18.04 AS base\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN    apt-get update -q \\\n    && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    curl \\\n    ffmpeg \\\n    git \\\n    libgl1-mesa-dev \\\n    libgl1-mesa-glx \\\n    libglew-dev \\\n    libosmesa6-dev \\\n    net-tools \\\n    parallel \\\n    patchelf \\\n    python3.7 \\\n    python3.7-dev \\\n    python3-pip \\\n    rsync \\\n    software-properties-common \\\n    unzip \\\n    vim \\\n    virtualenv \\\n    xpra \\\n    xserver-xorg-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV LANG C.UTF-8\n\nRUN mkdir -p /root/.mujoco \\\n    && curl -f -o mjpro150.zip https://www.roboti.us/download/mjpro150_linux.zip \\\n    && unzip mjpro150.zip -d /root/.mujoco \\\n    && rm mjpro150.zip \\\n    && curl -f -o /root/.mujoco/mjkey.txt https://www.roboti.us/file/mjkey.txt\n\n# Set the PATH to the venv before we create the venv, so it's visible in base.\n# This is since we may create the venv outside of Docker, e.g. in CI\n# or by binding it in for local development.\nENV PATH=\"/venv/bin:$PATH\"\nENV LD_LIBRARY_PATH /root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\n\n# Run Xdummy mock X server by default so that rendering will work.\nCOPY ci/xorg.conf /etc/dummy_xorg.conf\nCOPY ci/Xdummy-entrypoint.py /usr/bin/Xdummy-entrypoint.py\nENTRYPOINT [\"/usr/bin/Xdummy-entrypoint.py\"]\n\n# python-req stage contains Python venv, but not code.\n# It is useful for development purposes: you can mount\n# code from outside the Docker container.\nFROM base as python-req\n\nWORKDIR /seals\n# Copy only necessary dependencies to build virtual environment.\n# This minimizes how often this layer needs to be rebuilt.\nCOPY ./setup.py ./setup.py\nCOPY ./README.md ./README.md\nCOPY ./src/seals/version.py ./src/seals/version.py\nCOPY ./ci/build_venv.sh ./ci/build_venv.sh\nRUN    /seals/ci/build_venv.sh /venv \\\n    && rm -rf $HOME/.cache/pip\n\n# full stage contains everything.\n# Can be used for deployment and local testing.\nFROM python-req as full\n\n# Delay copying (and installing) the code until the very end\nCOPY . /seals\n# Build a wheel then install to avoid copying whole directory (pip issue #2195)\nRUN python3 setup.py sdist bdist_wheel\nRUN pip install --no-cache-dir --upgrade dist/seals-*.whl\n\n# Default entrypoints\nCMD [\"pytest\", \"-n\", \"auto\", \"-vv\", \"tests/\"]\n"
}