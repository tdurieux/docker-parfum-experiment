{
  "startTime": 1674247994952,
  "endTime": 1674247996129,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 128
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Based on mujoco-py's Dockerfile, but with the following changes:\n# - Slightly changed nvidia stuff.\n# - Uses Conda Python 3.7 instead of Python 3.6.\n# - Adds nfs\n# The Conda bits are based on https://hub.docker.com/r/continuumio/miniconda3/dockerfile\nFROM nvidia/cuda:10.1-cudnn8-runtime-ubuntu18.04\n\nRUN apt-get update -q \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    curl \\\n    git \\\n    libgl1-mesa-dev \\\n    libgl1-mesa-glx \\\n    libglew-dev \\\n    libosmesa6-dev \\\n    software-properties-common \\\n    net-tools \\\n    unzip \\\n    vim \\\n    virtualenv \\\n    wget \\\n    xpra \\\n    xserver-xorg-dev \\\n    libxrandr2 \\\n    libxss1 \\\n    libxcursor1 \\\n    libxcomposite1 \\\n    libasound2 \\\n    libxi6 \\\n    libxtst6 \\\n    libegl1-mesa \\\n    xvfb \\\n    rsync \\\n    gcc \\\n    tmux \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nRUN curl -f -o /usr/local/bin/patchelf https://s3-us-west-2.amazonaws.com/openai-sci-artifacts/manual-builds/patchelf_0.9_amd64.elf \\\n  && chmod +x /usr/local/bin/patchelf\n\nRUN mkdir -p /root/.mujoco \\\n  && wget https://www.roboti.us/download/mujoco200_linux.zip -O mujoco.zip \\\n  && unzip mujoco.zip -d /root/.mujoco \\\n  && rm mujoco.zip\n# fake MuJoCo key; we'll add a real one at run time\nRUN touch /root/.mujoco/mjkey.txt\nENV LD_LIBRARY_PATH /root/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}\n\n# tini is a simple init which is used by the official Conda Dockerfile (among\n# other things). It can do stuff like reap zombie processes & forward signals\n# (e.g. from \"docker stop\") to subprocesses. This may be useful if our code\n# breaks in such a way that it creates lots of zombies or cannot easily be\n# killed (e.g. maybe a Python extension segfaults and doesn't wait on its\n# children, which keep running). That said, I (Sam) haven't yet run into a\n# situation where it was necessary with our il-representations code base, at\n# least as of October 2020.\nENV TINI_VERSION v0.16.1\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n\n# Install Conda and make it the default Python\nENV PATH /opt/conda/bin:$PATH\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /root/conda.sh || true \\\n  && bash /root/conda.sh -b -p /opt/conda || true \\\n  && rm /root/conda.sh\nRUN conda update -n base -c defaults conda \\\n  && conda install -c anaconda python=3.7 \\\n  && conda clean -ay\n\n# MineRL installed separately because pip installs from Github don't work with submodules\nCOPY minecraft_setup.sh /root/minecraft_setup.sh\nRUN bash /root/minecraft_setup.sh\n\n# Install remaining dependencies\nCOPY requirements.txt /root/requirements.txt\nRUN CFLAGS=\"-I/opt/conda/include\" pip install --no-cache-dir -r /root/requirements.txt\n\n# This is useful for making the X server work (but will break unless the X\n# server is on the right port)\nENV DISPLAY=:0\n\n# Always run under tini (see explanation above)\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\n"
}