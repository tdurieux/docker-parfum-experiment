{
  "startTime": 1674217201095,
  "endTime": 1674217203431,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 19,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 63,
        "columnStart": 1,
        "columnEnd": 126
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 64,
        "lineEnd": 66,
        "columnStart": 1,
        "columnEnd": 5
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 13,
        "columnStart": 1,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GOLANG_VERSION=1.17.6\nARG ALPINE_VERSION=3.15\n\nFROM golang:${GOLANG_VERSION}-bullseye as builder\n\nARG go_tag=0.0.20220117\nARG tools_tag=v1.0.20210914\n\nRUN apt-get update && \\\n apt-get install -y --no-install-recommends \\\n git \\\n build-essential \\\n libmnl-dev \\\n iptables && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone https://git.zx2c4.com/wireguard-go && \\\n    cd wireguard-go && \\\n    git checkout $go_tag && \\\n    make && \\\n    make install\n\nENV WITH_WGQUICK=yes\nRUN git clone https://git.zx2c4.com/wireguard-tools && \\\n    cd wireguard-tools && \\\n    git checkout $tools_tag && \\\n    cd src && \\\n    make && \\\n    make install\n\nFROM ghcr.io/linuxserver/baseimage-ubuntu:bionic\nCOPY --from=builder /usr/bin/wireguard-go /usr/bin/wg* /usr/bin/\nCOPY --from=builder /usr/bin/wg-quick /usr/bin/\n\n# set version label\nARG BUILD_DATE\nARG VERSION\nARG WIREGUARD_RELEASE\nLABEL maintainer=\"Schille\"\n\nENV DEBIAN_FRONTEND=\"noninteractive\"\n\nARG TARGETARCH\nRUN \\\n echo \"**** install dependencies ****\" && \\\n apt-get update && \\\n apt-get install -y --no-install-recommends \\\n\tbc \\\n\tcurl \\\n\tgnupg \\\n\tifupdown \\\n\tiproute2 \\\n\tiptables \\\n\tiputils-ping \\\n\tjq \\\n\tnet-tools \\\n\topenresolv \\\n\tpkg-config \\\n\tqrencode && \\\n echo \"**** install CoreDNS ****\" && \\\n COREDNS_VERSION=$( curl -f -sX GET \"https://api.github.com/repos/coredns/coredns/releases/latest\" \\\n\t| awk '/tag_name/{print $4;exit}' FS='[\"\"]' | awk '{print substr($1,2); }') && \\\n curl -f -o \\\n\t/tmp/coredns.tar.gz -L \\\n\t\"https://github.com/coredns/coredns/releases/download/v${COREDNS_VERSION}/coredns_${COREDNS_VERSION}_linux_${TARGETARCH}.tgz\" && \\\n tar xf \\\n\t/tmp/coredns.tar.gz -C \\\n\t/app && \\\n echo \"**** clean up ****\" && \\\n rm -rf \\\n\t/tmp/* \\\n\t/var/lib/apt/lists/* \\\n\t/var/tmp/* && rm /tmp/coredns.tar.gz\n\nENV NGINX_VERSION   1.20.2\nENV NJS_VERSION     0.7.0\nENV PKG_RELEASE     1~bionic\n\nARG UID=912\nARG GID=912\n\nRUN set -x \\\n# create nginx user/group first, to be consistent throughout docker variants\n    && addgroup --system --gid $GID nginx || true \\\n    && adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos \"nginx user\" --shell /bin/false --uid $UID nginx || true \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates rsync \\\n    && \\\n    NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \\\n    found=''; \\\n    for server in \\\n        hkp://keyserver.ubuntu.com:80 \\\n        pgp.mit.edu \\\n    ; do \\\n        echo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \\\n        apt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" && found=yes && break; \\\n    done; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $NGINX_GPGKEY\" && exit 1; \\\n    apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \\\n    && dpkgArch=\"$(dpkg --print-architecture)\" \\\n    && nginxPackages=\" \\\n        nginx=${NGINX_VERSION}-${PKG_RELEASE} \\\n        nginx-module-xslt=${NGINX_VERSION}-${PKG_RELEASE} \\\n        nginx-module-geoip=${NGINX_VERSION}-${PKG_RELEASE} \\\n        nginx-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE} \\\n        nginx-module-njs=${NGINX_VERSION}+${NJS_VERSION}-${PKG_RELEASE} \\\n    \" \\\n    && case \"$dpkgArch\" in \\\n        amd64|arm64) \\\n            # arches officialy built by upstream\n            echo \"deb https://nginx.org/packages/ubuntu/ bionic nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n            && apt-get update \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published source packages\n            echo \"deb-src https://nginx.org/packages/ubuntu/ bionic nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n            \\\n# new directory for storing sources and .deb files\n            && tempDir=\"$(mktemp -d)\" \\\n            && chmod 777 \"$tempDir\" \\\n# (777 to ensure APT's \"_apt\" user can access it too)\n            \\\n# save list of currently-installed packages so build dependencies can be cleanly removed later\n            && savedAptMark=\"$(apt-mark showmanual)\" \\\n            \\\n# build .deb files from upstream's source packages (which are verified by apt-get)\n            && apt-get update \\\n            && apt-get build-dep -y $nginxPackages \\\n            && ( \\\n                cd \"$tempDir\" \\\n                && DEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \\\n                    apt-get source --compile $nginxPackages \\\n            ) \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n            \\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n            && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n            && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \\\n            \\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n            && ls -lAFh \"$tempDir\" \\\n            && ( cd \"$tempDir\" && dpkg-scanpackages . > Packages ) \\\n            && grep '^Package: ' \"$tempDir/Packages\" \\\n            && echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n            && apt-get -o Acquire::GzipIndexes=false update \\\n            ;; \\\n    esac \\\n    \\\n    && apt-get install --no-install-recommends --no-install-suggests -y \\\n                        $nginxPackages \\\n                        gettext-base \\\n                        curl \\\n    && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n    \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then \\\n        apt-get purge -y --auto-remove \\\n        && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n    fi \\\n# forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log \\\n# create a docker-entrypoint.d directory\n    && mkdir /docker-entrypoint.d\n\n\n# implement changes required to run NGINX as an unprivileged user\nRUN sed -i 's,listen       80;,listen       8080;,' /etc/nginx/conf.d/default.conf \\\n    && sed -i '/user  nginx;/d' /etc/nginx/nginx.conf \\\n    && sed -i 's,/var/run/nginx.pid,/tmp/nginx.pid,' /etc/nginx/nginx.conf \\\n    && sed -i \"/^http {/a \\    proxy_temp_path /tmp/proxy_temp;\\n    client_body_temp_path /tmp/client_temp;\\n    fastcgi_temp_path /tmp/fastcgi_temp;\\n    uwsgi_temp_path /tmp/uwsgi_temp;\\n    scgi_temp_path /tmp/scgi_temp;\\n\" /etc/nginx/nginx.conf \\\n# nginx user must own the cache and etc directory to write cache and tweak the nginx config\n    && chown -R $UID:0 /var/cache/nginx \\\n    && chmod -R g+w /var/cache/nginx \\\n    && chown -R $UID:0 /etc/nginx \\\n    && chmod -R g+w /etc/nginx\n\n# add local files\nCOPY /root /\n\nRUN mkdir /rsync/\n"
}