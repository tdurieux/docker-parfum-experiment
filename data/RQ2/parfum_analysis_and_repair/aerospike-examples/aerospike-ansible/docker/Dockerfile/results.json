{
  "startTime": 1674249712733,
  "endTime": 1674249713867,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 0,
        "columnEnd": 81
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch-slim\n\n# Build varialbes - meaning should be clear\n# Placeholders have been provided for the aws access key and secret access key\n# These would either be overridden by providing build arguments at the command line\n# or by executing aws configure\n# ==================================================================================\n\nARG RUN_TIME_USER=asbuild\nARG RUN_TIME_GROUP=asbuild\nARG AEROSPIKE_RUN_DIR=/home/${RUN_TIME_USER}\nARG AEROSPIKE_ANSIBLE_SUB_DIR=aerospike-ansible\nARG AWS_ACCESS_KEY=XXXXXX\nARG AWS_SECRET_ACCESS_KEY=XXXXXX\n\n# Install Binaries\n# ==================================================================================\n\nRUN apt-get update && apt-get -y --no-install-recommends install python-pip curl unzip git vim && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir -U pip\nRUN pip install --no-cache-dir virtualenv boto boto3 ansible ec2\nRUN cd /tmp && \\\n curl -f \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" && \\\nunzip awscliv2.zip && \\\n./aws/install && \\\ncd -\n\n# Set up run time user\n# ==================================================================================\n\nRUN mkdir $AEROSPIKE_RUN_DIR && \\\ngroupadd $RUN_TIME_GROUP && \\\nuseradd -u 10001 $RUN_TIME_USER -g $RUN_TIME_GROUP && \\\nmkdir $AEROSPIKE_RUN_DIR/.ssh && \\\nmkdir $AEROSPIKE_RUN_DIR/.aws && \\\nchown -R $RUN_TIME_USER:$RUN_TIME_GROUP $AEROSPIKE_RUN_DIR && \\\necho \"IdentitiesOnly=yes\" >> $AEROSPIKE_RUN_DIR/.ssh/config && \\\nchmod 644 $AEROSPIKE_RUN_DIR/.ssh/config\n\nRUN ansible-galaxy role install sleighzy.zookeeper sleighzy.kafka -p $AEROSPIKE_RUN_DIR/.ansible/roles\n\n# Clone the Aerospike Ansible project\n# ==================================================================================\n\nRUN git clone https://github.com/aerospike-examples/aerospike-ansible ${AEROSPIKE_RUN_DIR}/${AEROSPIKE_ANSIBLE_SUB_DIR}\n\n# Set up the AWS credentials\n# As above this means the credentials can be baked in at build time\n# But they can be overridden at run time\n# ==================================================================================\n\nRUN echo [default] >> $AEROSPIKE_RUN_DIR/.aws/credentials && \\\necho \"aws_access_key_id = $AWS_ACCESS_KEY\" >> $AEROSPIKE_RUN_DIR/.aws/credentials && \\\necho \"aws_secret_access_key = $AWS_SECRET_ACCESS_KEY\" >> $AEROSPIKE_RUN_DIR/.aws/credentials\n\n# Make sure all the permissions are correct for the run time user\n# ==================================================================================\n\nRUN chown -R $RUN_TIME_USER:$RUN_TIME_GROUP $AEROSPIKE_RUN_DIR\n\nUSER $RUN_TIME_USER\nWORKDIR ${AEROSPIKE_RUN_DIR}/${AEROSPIKE_ANSIBLE_SUB_DIR}\n\n# Keep it running\nENTRYPOINT [\"tail\", \"-f\", \"/dev/null\"]\n"
}