{
  "startTime": 1674250375249,
  "endTime": 1674250377016,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE=nvidia/cuda:10.2-devel\nFROM $BASE\n\nARG NPROCS=4\n\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq \\\n        bc \\\n        wget \\\n        ccache \\\n        ninja-build \\\n        python3 \\\n        git \\\n        vim \\\n        jq \\\n        libopenmpi-dev \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN KEYDUMP_URL=https://cloud.cees.ornl.gov/download && \\\n    KEYDUMP_FILE=keydump && \\\n    wget --quiet ${KEYDUMP_URL}/${KEYDUMP_FILE} && \\\n    wget --quiet ${KEYDUMP_URL}/${KEYDUMP_FILE}.sig && \\\n    gpg --batch --import ${KEYDUMP_FILE} && \\\n    gpg --batch --verify ${KEYDUMP_FILE}.sig ${KEYDUMP_FILE} && \\\n    rm ${KEYDUMP_FILE}*\n\nARG CMAKE_VERSION=3.19.0\nENV CMAKE_DIR=/opt/cmake\nRUN CMAKE_KEY=2D2CEF1034921684 && \\\n    CMAKE_URL=https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION} && \\\n    CMAKE_SCRIPT=cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    CMAKE_SHA256=cmake-${CMAKE_VERSION}-SHA-256.txt && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SHA256} && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SHA256}.asc && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SCRIPT} && \\\n    gpg --batch --verify ${CMAKE_SHA256}.asc ${CMAKE_SHA256} && \\\n    grep -i ${CMAKE_SCRIPT} ${CMAKE_SHA256} | sed -e s/linux/Linux/ | sha256sum --check && \\\n    mkdir -p ${CMAKE_DIR} && \\\n    sh ${CMAKE_SCRIPT} --skip-license --prefix=${CMAKE_DIR} && \\\n    rm cmake*\nENV PATH=${CMAKE_DIR}/bin:$PATH\n\nENV SYCL_DIR=/opt/sycl\nRUN SYCL_VERSION=20220106 && \\\n    SYCL_URL=https://github.com/intel/llvm/archive/sycl-nightly && \\\n    SYCL_ARCHIVE=${SYCL_VERSION}.tar.gz && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${SYCL_URL}/${SYCL_ARCHIVE} && \\\n    mkdir llvm && \\\n    tar -xf ${SYCL_ARCHIVE} -C llvm --strip-components=1 && \\\n    cd llvm && \\\n    python3 buildbot/configure.py --cuda --cmake-opt=\"-DCMAKE_CXX_FLAGS=-w\" && \\\n    python3 buildbot/compile.py && \\\n    mkdir -p ${SYCL_DIR} && \\\n    mv ${SCRATCH_DIR}/llvm/build/install/* ${SYCL_DIR} && \\\n    echo \"${SYCL_DIR}/lib\" > /etc/ld.so.conf.d/sycl.conf && ldconfig && \\\n    rm -rf ${SCRATCH_DIR}\nENV PATH=${SYCL_DIR}/bin:$PATH\n\n# Install oneDPL\nENV ONE_DPL_DIR=/opt/onedpl\nRUN ONE_DPL_VERSION=oneDPL-2021.6.0-release && \\\n    ONE_DPL_URL=https://github.com/oneapi-src/oneDPL/archive && \\\n    ONE_DPL_ARCHIVE=${ONE_DPL_VERSION}.tar.gz && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${ONE_DPL_URL}/${ONE_DPL_ARCHIVE} && \\\n    mkdir onedpl && \\\n    tar -xf ${ONE_DPL_ARCHIVE} -C onedpl --strip-components=1 && cd onedpl && \\\n    echo 'install(CODE \"set(OUTPUT_DIR \\\"${CMAKE_INSTALL_PREFIX}/lib/cmake/oneDPL\\\")\")' >> CMakeLists.txt && \\\n    echo 'install(SCRIPT cmake/scripts/generate_config.cmake)' >> CMakeLists.txt && \\\n    echo 'install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include DESTINATION linux)' >> CMakeLists.txt && \\\n    mkdir build && cd build && \\\n    cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS=\"-w\" -DCMAKE_INSTALL_PREFIX=${ONE_DPL_DIR} -DCMAKE_SKIP_INSTALL_ALL_DEPENDENCY=TRUE -DONEDPL_BACKEND=\"dpcpp_only\" .. && \\\n    make -j${NPROCS} install && \\\n    rm -rf ${SCRATCH_DIR}\n\n# Install Boost\nENV BOOST_DIR=/opt/boost\nRUN BOOST_VERSION=1.72.0 && \\\n    BOOST_VERSION_UNDERSCORE=$(echo \"$BOOST_VERSION\" | sed -e \"s/\\./_/g\") && \\\n    BOOST_KEY=379CE192D401AB61 && \\\n    BOOST_URL=https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source && \\\n    BOOST_ARCHIVE=boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${BOOST_URL}/${BOOST_ARCHIVE} && \\\n    wget --quiet ${BOOST_URL}/${BOOST_ARCHIVE}.asc && \\\n    wget --quiet ${BOOST_URL}/${BOOST_ARCHIVE}.json && \\\n    wget --quiet ${BOOST_URL}/${BOOST_ARCHIVE}.json.asc && \\\n    gpg --batch --verify ${BOOST_ARCHIVE}.json.asc ${BOOST_ARCHIVE}.json && \\\n    gpg --batch --verify ${BOOST_ARCHIVE}.asc ${BOOST_ARCHIVE} && \\\n    cat ${BOOST_ARCHIVE}.json | jq -r '. | .sha256 + \"  \" + .file' | sha256sum --check && \\\n    mkdir -p boost && \\\n    tar -xf ${BOOST_ARCHIVE} -C boost --strip-components=1 && \\\n    cd boost && \\\n    CXXFLAGS=\"-w\" ./bootstrap.sh \\\n        --prefix=${BOOST_DIR} \\\n        && \\\n    ./b2 -j${NPROCS} \\\n        hardcode-dll-paths=true dll-path=${BOOST_DIR}/lib \\\n        link=shared \\\n        variant=release \\\n        cxxflags=-w \\\n        install \\\n        && \\\n    rm -rf ${SCRATCH_DIR}\n\n# Install Google Benchmark support library\nENV BENCHMARK_DIR=/opt/benchmark\nRUN SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    git clone https://github.com/google/benchmark.git -b v1.5.0 && \\\n    cd benchmark && \\\n    mkdir build && cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=${BENCHMARK_DIR} -D BENCHMARK_ENABLE_TESTING=OFF .. && \\\n    make -j${NPROCS} && make install && \\\n    rm -rf ${SCRATCH_DIR}\n\n# Install Kokkos\n# FIXME hash below correspond to 3.5.99 (pre 3.6 release develop branch)\nARG KOKKOS_VERSION=bb340781ba774eb0829de03735fe25e89b1176fc\nARG KOKKOS_OPTIONS=\"-DKokkos_ENABLE_SYCL=ON -DCMAKE_CXX_FLAGS=-Wno-unknown-cuda-version -DKokkos_ENABLE_UNSUPPORTED_ARCHS=ON -DKokkos_ENABLE_DEPRECATED_CODE_3=OFF -DKokkos_ARCH_VOLTA70=ON -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_FLAGS=-w\"\nENV KOKKOS_DIR=/opt/kokkos\nRUN KOKKOS_URL=https://github.com/kokkos/kokkos/archive/${KOKKOS_VERSION}.tar.gz && \\\n    KOKKOS_ARCHIVE=kokkos-${KOKKOS_HASH}.tar.gz && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${KOKKOS_URL} --output-document=${KOKKOS_ARCHIVE} && \\\n    mkdir -p kokkos && \\\n    tar -xf ${KOKKOS_ARCHIVE} -C kokkos --strip-components=1 && \\\n    cd kokkos && \\\n    mkdir -p build && cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=${KOKKOS_DIR} -D CMAKE_CXX_COMPILER=clang++ ${KOKKOS_OPTIONS} .. && \\\n    make -j${NPROCS} install && \\\n    rm -rf ${SCRATCH_DIR}\n"
}