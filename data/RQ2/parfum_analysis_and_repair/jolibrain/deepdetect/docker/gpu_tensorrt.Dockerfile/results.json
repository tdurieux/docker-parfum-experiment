{
  "startTime": 1674220292346,
  "endTime": 1674220293918,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 13,
        "columnEnd": 42
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 25,
        "columnEnd": 133
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 98,
        "columnStart": 25,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 180,
        "lineEnd": 203,
        "columnStart": 25,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 25,
        "columnEnd": 133
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 98,
        "columnStart": 25,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 180,
        "lineEnd": 203,
        "columnStart": 25,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 8,
        "columnEnd": 40
      }
    }
  ],
  "repairedDockerfile": "FROM nvcr.io/nvidia/tensorrt:22.03-py3 AS build\n\nARG DEEPDETECT_RELEASE=OFF\nARG DEEPDETECT_ARCH=gpu\nARG DEEPDETECT_BUILD=tensorrt\nARG DEEPDETECT_DEFAULT_MODELS=true\nARG DEEPDETECT_OPENCV4_BUILD_PATH=/tmp/opencv/opencv-4.5.3/build\n#ARG DEEPDETECT_OPENCV4_BUILD_PATH=/tmp\n\n# Install build dependencies\nRUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n\nRUN --mount=type=cache,id=dede_cache_lib,sharing=locked,target=/var/cache/apt \\\n    --mount=type=cache,id=dede_apt_lib,sharing=locked,target=/var/lib/apt \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update -y && apt-get install --no-install-recommends -y python-dev apt-transport-https ca-certificates gnupg software-properties-common wget curl && rm -rf /var/lib/apt/lists/*;\n\n# CMake\nRUN curl -f https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add -\nRUN apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'\n\n# python2 pycompile + docker-buildkit is a bit buggy, it's slow as hell, so disable it for dev\n# bug closed as won't fix as python2 is eol: https://github.com/docker/for-linux/issues/502\nRUN cp /bin/true /usr/bin/pycompile\n\n# Don't install opencv-ml-dev, it will install libprotobuf dans link dede to 2 versions of protobuf\nRUN --mount=type=cache,id=dede_cache_lib,sharing=locked,target=/var/cache/apt \\\n    --mount=type=cache,id=dede_apt_lib,sharing=locked,target=/var/lib/apt \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update -y && apt-get install --no-install-recommends -y \\\n    git \\\n    ccache \\\n    automake \\\n    build-essential \\\n    openjdk-8-jdk \\\n    pkg-config \\\n    cmake \\\n    zip \\\n    g++ \\\n    gcc-7 g++-7 \\\n    zlib1g-dev \\\n    libgoogle-glog-dev \\\n    libgflags-dev \\\n    libeigen3-dev \\\n    libboost-dev \\\n    libboost-filesystem-dev \\\n    libboost-thread-dev \\\n    libboost-system-dev \\\n    libboost-iostreams-dev \\\n    libboost-program-options-dev \\\n    libboost-test-dev \\\n    libboost-regex-dev \\\n    libboost-date-time-dev \\\n    libboost-chrono-dev \\\n    libboost-stacktrace-dev \\\n    libssl-dev \\\n    libcurlpp-dev \\\n    libcurl4-openssl-dev \\\n    libopenblas-dev \\\n    libhdf5-dev \\\n    libleveldb-dev \\\n    libsnappy-dev \\\n    liblmdb-dev \\\n    libutfcpp-dev \\\n    rapidjson-dev \\\n    libmapbox-variant-dev \\\n    autoconf \\\n    libtool-bin \\\n    python-numpy \\\n    python-yaml \\\n    python-typing \\\n    swig \\\n    curl \\\n    unzip \\\n    python-setuptools \\\n    python-dev \\\n    python3-dev \\\n    python3-pip \\\n    python-six \\\n    python-enum34 \\\n    python3-yaml \\\n    unzip \\\n    libgoogle-perftools-dev \\\n    curl \\\n    libarchive-dev \\\n    libgstreamer1.0-dev \\\n    libgstreamer-plugins-base1.0-dev \\\n    libgstreamer-plugins-bad1.0-dev \\\n    gstreamer1.0-plugins-base \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-plugins-ugly \\\n    gstreamer1.0-libav \\\n    gstreamer1.0-doc \\\n    gstreamer1.0-tools \\\n    gstreamer1.0-x \\\n    gstreamer1.0-gl \\\n    bash-completion && rm -rf /var/lib/apt/lists/*;\n\nRUN for url in \\\n        https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel_0.24.1-linux-x86_64.deb; do \\\n        \n        curl -f -L -s -o /tmp/p.deb $url && dpkg -i /tmp/p.deb && rm -rf /tmp/p.deb; \\\n       done\n\n# Fix \"ImportError: No module named builtins\"\n# RUN pip install future pyyaml typing\n\n# Fix  ModuleNotFoundError: No module named 'dataclasses', 'typing_extensions' for torch 1.8.0\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install dataclasses typing_extensions\n\nWORKDIR /tmp/\n\nENV CCACHE_DIR=/ccache\nENV PATH=/usr/lib/ccache:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\n# Install NVidia video codec\nRUN wget https://www.deepdetect.com/stuff/Video_Codec_SDK_11.1.5.zip && unzip Video_Codec_SDK_11.1.5.zip\nRUN cd Video_Codec_SDK_11.1.5 && cp Interface/* /usr/local/cuda/targets/x86_64-linux/include/ && \\\ncp Lib/linux/stubs/x86_64/* /usr/local/cuda/targets/x86_64-linux/lib/stubs/ && \\\ncd /usr/local/cuda/targets/x86_64-linux/lib/stubs/ && \\\nln -s libcuda.so libcuda.so.1 && ln -s libnvcuvid.so libnvcuvid.so.1\n\n# Build OpenCV 4 with CUDA\nRUN mkdir opencv && cd opencv && wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.5.3.zip && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.3.zip && unzip opencv.zip && unzip opencv_contrib.zip\nRUN cd /tmp/opencv/opencv-4.5.3 && mkdir build && cd build && cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n-D CMAKE_INSTALL_PREFIX=/tmp/ \\\n-D CMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs \\\n-D CMAKE_CXX_FLAGS=\"-Wl,--allow-shlib-undefined\" \\\n-D WITH_TBB=ON \\\n-D ENABLE_FAST_MATH=1 \\\n-D CUDA_FAST_MATH=1 \\\n-D WITH_CUBLAS=1 \\\n-D WITH_CUDA=ON \\\n-D BUILD_opencv_cudacodec=ON \\\n-D WITH_CUDNN=ON \\\n-D OPENCV_DNN_CUDA=OFF \\\n-D CUDA_ARCH_BIN=\"6.1 7.5 8.6\" \\\n-D WITH_V4L=ON \\\n-D WITH_QT=OFF \\\n-D WITH_OPENGL=ON \\\n-D WITH_GSTREAMER=ON \\\n-D WITH_NVCUVID=ON \\\n-D OPENCV_GENERATE_PKGCONFIG=ON \\\n-D OPENCV_PC_FILE_NAME=opencv.pc \\\n-D OPENCV_ENABLE_NONFREE=ON \\\n-D BUILD_opencv_python2=OFF \\\n-D BUILD_opencv_python3=OFF \\\n-D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv/opencv_contrib-4.5.3/modules \\\n-D INSTALL_PYTHON_EXAMPLES=OFF \\\n-D INSTALL_C_EXAMPLES=OFF \\\n-D BUILD_EXAMPLES=OFF ..\n\nWORKDIR /tmp/opencv/opencv-4.5.3/build\nRUN make -j20\nRUN make install\n\n# Build Deepdetect\nADD . /opt/deepdetect\nWORKDIR /opt/deepdetect\nENV TERM=xterm\nENV LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs\nRUN --mount=type=cache,target=/ccache/ mkdir build && cd build && ../build.sh\n\n# Copy libs to /tmp/libs for next build stage\nRUN ./docker/get_libs.sh\n\n# Build final Docker image\nFROM nvcr.io/nvidia/tensorrt:22.03-py3 AS runtime\n\nARG DEEPDETECT_ARCH=gpu\nARG DEEPDETECT_CUDA_VERSION=11.6\n\nLABEL description=\"DeepDetect deep learning server & API / ${DEEPDETECT_ARCH} version\"\nLABEL maintainer=\"emmanuel.benazera@jolibrain.com\"\n\n# Install tools and dependencies\nRUN --mount=type=cache,id=dede_cache_lib,sharing=locked,target=/var/cache/apt \\\n    --mount=type=cache,id=dede_apt_lib,sharing=locked,target=/var/lib/apt \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update -y && apt-get install --no-install-recommends -y \\\n    wget \\\n    curl \\\n\tlibopenblas-base \\\n\tliblmdb0 \\\n\tlibleveldb1d \\\n    libboost-regex1.71.0 \\\n\tlibgoogle-glog0v5 \\\n    libopencv4.2 \\\n\tlibgflags2.2 \\\n\tlibcurl4 \\\n\tlibcurlpp0 \\\n\tlibhdf5-cpp-103 \\\n    libboost-atomic1.71.0 \\\n    libboost-chrono1.71.0 \\\n    libboost-date-time1.71.0 \\\n\tlibboost-filesystem1.71.0 \\\n\tlibboost-thread1.71.0 \\\n\tlibboost-iostreams1.71.0 \\\n    libboost-regex1.71.0 \\\n    libboost-stacktrace1.71.0 \\\n    libboost-system1.71.0 \\\n\tlibarchive13 \\\n\tlibgstreamer1.0-0 && rm -rf /var/lib/apt/lists/*;\n\n# Fix permissions\nRUN ln -sf /dev/stdout /var/log/deepdetect.log && \\\n    ln -sf /dev/stderr /var/log/deepdetect.log\n\nRUN useradd -ms /bin/bash dd && \\\n    chown -R dd:dd /opt\n\n# Copy stubs for libraries checking\n# XXX: some version of buildkit fail when copying to simlink, using cuda true path instead\nCOPY --from=build /usr/local/cuda/targets/x86_64-linux/lib/stubs/libnvcuvid.so.1 /usr/local/cuda-${DEEPDETECT_CUDA_VERSION}/targets/x86_64-linux/lib/stubs/libnvcuvid.so.1\nCOPY --from=build /usr/local/cuda/targets/x86_64-linux/lib/stubs/libcuda.so.1 /usr/local/cuda-${DEEPDETECT_CUDA_VERSION}/targets/x86_64-linux/lib/stubs/libcuda.so.1\n\nUSER dd\n\n# Copy Deepdetect binaries from previous step\nCOPY --from=build /opt/deepdetect/build/main /opt/deepdetect/build/main\nCOPY --from=build /opt/deepdetect/build/oatpp-swagger/src/oatpp-swagger/res/ /opt/deepdetect/build/oatpp-swagger/src/oatpp-swagger/res/\nCOPY --from=build --chown=dd /opt/deepdetect/datasets/imagenet/corresp_ilsvrc12.txt /opt/models/ggnet/corresp.txt\nCOPY --from=build --chown=dd /opt/deepdetect/datasets/imagenet/corresp_ilsvrc12.txt /opt/models/resnet_50/corresp.txt\nCOPY --from=build --chown=dd /opt/deepdetect/templates/caffe/googlenet/*prototxt /opt/models/ggnet/\nCOPY --from=build --chown=dd /opt/deepdetect/templates/caffe/resnet_50/*prototxt /opt/models/resnet_50/\nCOPY --from=build /tmp/lib/* /opt/deepdetect/build/lib/\nCOPY --from=build /opt/deepdetect/templates /opt/deepdetect/build/templates\n\nCOPY --from=build /opt/deepdetect/get_models.sh /opt/deepdetect/\nCOPY --from=build /opt/deepdetect/docker/check-dede-deps.sh /opt/deepdetect/\nCOPY --from=build /opt/deepdetect/docker/start-dede.sh /opt/deepdetect/\n\n# External volume to be mapped, e.g. for models or training data\nWORKDIR /opt/models\n\nUSER root\nRUN chown -R dd:dd /opt/models\n\nUSER dd\nRUN /opt/deepdetect/get_models.sh\n\n# Ensure all libs are presents\nRUN /opt/deepdetect/check-dede-deps.sh\n\nWORKDIR /opt/deepdetect/build/main\nCMD /opt/deepdetect/start-dede.sh -host 0.0.0.0\nVOLUME [\"/data\"]\nEXPOSE 8080\n"
}