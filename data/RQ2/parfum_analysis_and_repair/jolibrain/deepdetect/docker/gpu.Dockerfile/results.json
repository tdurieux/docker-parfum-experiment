{
  "startTime": 1674255208769,
  "endTime": 1674255210010,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 13,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 25,
        "columnEnd": 133
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 86,
        "columnStart": 25,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 124,
        "lineEnd": 147,
        "columnStart": 25,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 25,
        "columnEnd": 133
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 86,
        "columnStart": 25,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 124,
        "lineEnd": 147,
        "columnStart": 25,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.6.0-cudnn8-devel-ubuntu20.04 AS build\n\nARG DEEPDETECT_RELEASE=OFF\nARG DEEPDETECT_ARCH=gpu\nARG DEEPDETECT_BUILD=default\nARG DEEPDETECT_DEFAULT_MODELS=true\n\n# Install build dependencies\nRUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n\nRUN --mount=type=cache,id=dede_cache_lib,sharing=locked,target=/var/cache/apt \\\n    --mount=type=cache,id=dede_apt_lib,sharing=locked,target=/var/lib/apt \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update -y && apt-get install --no-install-recommends -y python-dev apt-transport-https ca-certificates gnupg software-properties-common wget curl && rm -rf /var/lib/apt/lists/*;\n\n# CMake\nRUN curl -f https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add -\nRUN apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'\n\n# python2 pycompile + docker-buildkit is a bit buggy, it's slow as hell, so disable it for dev\n# bug closed as won't fix as python2 is eol: https://github.com/docker/for-linux/issues/502\nRUN cp /bin/true /usr/bin/pycompile\n\n# Don't install opencv-ml-dev, it will install libprotobuf dans link dede to 2 versions of protobuf\nRUN --mount=type=cache,id=dede_cache_lib,sharing=locked,target=/var/cache/apt \\\n    --mount=type=cache,id=dede_apt_lib,sharing=locked,target=/var/lib/apt \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update -y && apt-get install --no-install-recommends -y \\\n    git \\\n    ccache \\\n    automake \\\n    build-essential \\\n    openjdk-8-jdk \\\n    pkg-config \\\n    cmake \\\n    zip \\\n    g++ \\\n    gcc-7 g++-7 \\\n    zlib1g-dev \\\n    libgoogle-glog-dev \\\n    libgflags-dev \\\n    libeigen3-dev \\\n    libopencv-dev \\\n    libboost-dev \\\n    libboost-filesystem-dev \\\n    libboost-thread-dev \\\n    libboost-system-dev \\\n    libboost-iostreams-dev \\\n    libboost-program-options-dev \\\n    libboost-test-dev \\\n    libboost-regex-dev \\\n    libboost-date-time-dev \\\n    libboost-chrono-dev \\\n    libboost-stacktrace-dev \\\n    libssl-dev \\\n    libcurlpp-dev \\\n    libcurl4-openssl-dev \\\n    libopenblas-dev \\\n    libhdf5-dev \\\n    libleveldb-dev \\\n    libsnappy-dev \\\n    liblmdb-dev \\\n    libutfcpp-dev \\\n    rapidjson-dev \\\n    libmapbox-variant-dev \\\n    autoconf \\\n    libtool-bin \\\n    python-numpy \\\n    python-yaml \\\n    python-typing \\\n    swig \\\n    curl \\\n    unzip \\\n    python-setuptools \\\n    python-dev \\\n    python3-dev \\\n    python3-pip \\\n    python-six \\\n    python-enum34 \\\n    python3-yaml \\\n    unzip \\\n    libgoogle-perftools-dev \\\n    curl \\\n    libarchive-dev \\\n    libtcmalloc-minimal4 \\\n    bash-completion && rm -rf /var/lib/apt/lists/*;\n\nRUN for url in \\\n        https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel_0.24.1-linux-x86_64.deb; \\\n        do curl -f -L -s -o /tmp/p.deb $url && dpkg -i /tmp/p.deb && rm -rf /tmp/p.deb; done\n\n# Fix \"ImportError: No module named builtins\"\n# RUN pip install future pyyaml typing\n\n# Fix  ModuleNotFoundError: No module named 'dataclasses', 'typing_extensions' for torch 1.8.0\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install dataclasses typing_extensions\n\nADD . /opt/deepdetect\nWORKDIR /opt/deepdetect/\n\nENV CCACHE_DIR=/ccache\nENV PATH=/usr/lib/ccache:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\n# Build Deepdetect\nENV TERM=xterm\nRUN --mount=type=cache,target=/ccache/ mkdir build && cd build && ../build.sh\n\n# Copy libs to /tmp/libs for next build stage\nRUN ./docker/get_libs.sh\n\n# Build final Docker image\nFROM nvidia/cuda:11.6.0-cudnn8-runtime-ubuntu20.04 AS runtime\n\nARG DEEPDETECT_ARCH=gpu\n\nLABEL description=\"DeepDetect deep learning server & API / ${DEEPDETECT_ARCH} version\"\nLABEL maintainer=\"emmanuel.benazera@jolibrain.com\"\n\n# Install tools and dependencies\nRUN --mount=type=cache,id=dede_cache_lib,sharing=locked,target=/var/cache/apt \\\n    --mount=type=cache,id=dede_apt_lib,sharing=locked,target=/var/lib/apt \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update -y && apt-get install --no-install-recommends -y \\\n    wget \\\n    curl \\\n\tlibopenblas-base \\\n\tliblmdb0 \\\n\tlibleveldb1d \\\n    libboost-regex1.71.0 \\\n\tlibgoogle-glog0v5 \\\n    libopencv4.2 \\\n\tlibgflags2.2 \\\n\tlibcurl4 \\\n\tlibcurlpp0 \\\n\tlibhdf5-cpp-103 \\\n    libboost-atomic1.71.0 \\\n    libboost-chrono1.71.0 \\\n    libboost-date-time1.71.0 \\\n\tlibboost-filesystem1.71.0 \\\n\tlibboost-thread1.71.0 \\\n\tlibboost-iostreams1.71.0 \\\n    libboost-regex1.71.0 \\\n    libboost-stacktrace1.71.0 \\\n    libboost-system1.71.0 \\\n\tlibarchive13 \\\n\tlibtcmalloc-minimal4 && rm -rf /var/lib/apt/lists/*;\n\n# Fix permissions\nRUN ln -sf /dev/stdout /var/log/deepdetect.log && \\\n    ln -sf /dev/stderr /var/log/deepdetect.log\n\nRUN useradd -ms /bin/bash dd && \\\n    chown -R dd:dd /opt\nUSER dd\n\n# Copy Deepdetect binaries from previous step\nCOPY --from=build /opt/deepdetect/build/main /opt/deepdetect/build/main\nCOPY --from=build /opt/deepdetect/build/oatpp-swagger/src/oatpp-swagger/res/ /opt/deepdetect/build/oatpp-swagger/src/oatpp-swagger/res/\nCOPY --from=build --chown=dd /opt/deepdetect/datasets/imagenet/corresp_ilsvrc12.txt /opt/models/ggnet/corresp.txt\nCOPY --from=build --chown=dd /opt/deepdetect/datasets/imagenet/corresp_ilsvrc12.txt /opt/models/resnet_50/corresp.txt\nCOPY --from=build --chown=dd /opt/deepdetect/templates/caffe/googlenet/*prototxt /opt/models/ggnet/\nCOPY --from=build --chown=dd /opt/deepdetect/templates/caffe/resnet_50/*prototxt /opt/models/resnet_50/\nCOPY --from=build /tmp/lib/* /opt/deepdetect/build/lib/\nCOPY --from=build /opt/deepdetect/templates /opt/deepdetect/build/templates\n\nCOPY --from=build /opt/deepdetect/get_models.sh /opt/deepdetect/\nCOPY --from=build /opt/deepdetect/docker/check-dede-deps.sh /opt/deepdetect/\nCOPY --from=build /opt/deepdetect/docker/start-dede.sh /opt/deepdetect/\n\n# External volume to be mapped, e.g. for models or training data\nWORKDIR /opt/models\n\nUSER root\nRUN chown -R dd:dd /opt/models\n\nUSER dd\nRUN /opt/deepdetect/get_models.sh\n\n# Ensure all libs are presents\nRUN /opt/deepdetect/check-dede-deps.sh\n\nWORKDIR /opt/deepdetect/build/main\nCMD /opt/deepdetect/start-dede.sh -host 0.0.0.0\nVOLUME [\"/data\"]\nEXPOSE 8080\n"
}