{
  "startTime": 1674247876920,
  "endTime": 1674247878615,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 13,
        "columnEnd": 42
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 25,
        "columnEnd": 133
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 101,
        "columnStart": 25,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 25,
        "columnEnd": 133
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 101,
        "columnStart": 25,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG DD_UBUNTU_VERSION=20.04\nARG DD_CUDA_VERSION=11.4\nARG DD_CUDNN_VERSION=8\nARG DD_TENSORRT_VERSION=8.2.3-1+cuda11.4\n\n# FROM nvidia/cuda:${DD_CUDA_VERSION}-cudnn${DD_CUDNN_VERSION}-devel-ubuntu${DD_UBUNTU_VERSION}\n# TODO(sileht): tensorrt is not yet in ubuntu20.04 nvidia machine learning repository\n# https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/\n# https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/\n# We temporary use another docker image just to build tensorrt\n\nFROM nvcr.io/nvidia/tensorrt:22.03-py3 AS build\n\nARG DD_UBUNTU_VERSION\nARG DD_CUDA_VERSION\nARG DD_CUDNN_VERSION\nARG DD_TENSORRT_VERSION\n\nRUN echo UBUNTU_VERSION=${DD_UBUNTU_VERSION} >> /image-info\nRUN echo CUDA_VERSION=${DD_CUDA_VERSION} >> /image-info\nRUN echo CUDNN_VERSION=${DD_CUDNN_VERSION} >> /image-info\nRUN echo TENSORRT_VERSION=${DD_TENSORRT_VERSION} >> /image-info\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update -y && apt-get install --no-install-recommends -y python-dev apt-transport-https ca-certificates gnupg software-properties-common wget curl && rm -rf /var/lib/apt/lists/*;\nRUN curl -f https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add -\nRUN apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'\n\n# python2 pycompile + docker-buildkit is a bit buggy, it's slow as hell, so disable it for dev\n# bug closed as won't fix as python2 is eol: https://github.com/docker/for-linux/issues/502\nRUN cp /bin/true /usr/bin/pycompile\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update -y && apt-get install --no-install-recommends -y \\\n    git \\\n    ccache \\\n    automake \\\n    rsync \\\n    clang-format-10 \\\n    build-essential \\\n    openjdk-8-jdk \\\n    pkg-config \\\n    cmake \\\n    zip \\\n    g++ \\\n    gcc-7 g++-7 \\\n    zlib1g-dev \\\n    libgoogle-glog-dev \\\n    libgflags-dev \\\n    libeigen3-dev \\\n    libprotobuf-dev \\\n    protobuf-compiler \\\n    libboost-dev \\\n    libboost-filesystem-dev \\\n    libboost-thread-dev \\\n    libboost-system-dev \\\n    libboost-stacktrace-dev \\\n    libboost-iostreams-dev \\\n    libboost-program-options-dev \\\n    libboost-test-dev \\\n    libboost-regex-dev \\\n    libboost-date-time-dev \\\n    libboost-chrono-dev \\\n    libssl-dev \\\n    libgtest-dev \\\n    libcurlpp-dev \\\n    libcurl4-openssl-dev \\\n    libopenblas-dev \\\n    libhdf5-dev \\\n    libleveldb-dev \\\n    libsnappy-dev \\\n    liblmdb-dev \\\n    libutfcpp-dev \\\n    rapidjson-dev \\\n    libmapbox-variant-dev \\\n    autoconf \\\n    libtool-bin \\\n    python-numpy \\\n    python-yaml \\\n    python-typing \\\n    swig \\\n    curl \\\n    unzip \\\n    python-setuptools \\\n    python-dev \\\n    python3-dev \\\n    python3-pip \\\n    tox \\\n    python-six \\\n    python-enum34 \\\n    python3-yaml \\\n    unzip \\\n    libgoogle-perftools-dev \\\n    curl \\\n    git \\\n    libarchive-dev \\\n    bash-completion \\\n    schedtool \\\n    util-linux \\\n    libgstreamer1.0-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN for url in \\\n        https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel_0.24.1-linux-x86_64.deb; \\\n        do curl -f -L -s -o /tmp/p.deb $url && dpkg -i /tmp/p.deb && rm -rf /tmp/p.deb; done\n\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install torch==1.11.0\n\nWORKDIR /tmp\n\n# Install NVidia video codec\nRUN wget https://www.deepdetect.com/stuff/Video_Codec_SDK_11.1.5.zip && unzip Video_Codec_SDK_11.1.5.zip\nRUN cd Video_Codec_SDK_11.1.5 && cp Interface/* /usr/local/cuda/targets/x86_64-linux/include/ && cp Lib/linux/stubs/x86_64/* /usr/local/cuda/targets/x86_64-linux/lib/stubs/\n\n# Build OpenCV 4 with CUDA\nRUN mkdir opencv && cd opencv && wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.5.3.zip && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.3.zip && unzip opencv.zip && unzip opencv_contrib.zip\nRUN cd /tmp/opencv/opencv-4.5.3 && mkdir build && cd build && cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n-D CMAKE_INSTALL_PREFIX=/usr/local/ \\\n-D CMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs \\\n-D CMAKE_CXX_FLAGS=\"-Wl,--allow-shlib-undefined\" \\\n-D WITH_TBB=ON \\\n-D ENABLE_FAST_MATH=1 \\\n-D CUDA_FAST_MATH=1 \\\n-D WITH_CUBLAS=1 \\\n-D WITH_CUDA=ON \\\n-D BUILD_opencv_cudacodec=ON \\\n-D WITH_CUDNN=ON \\\n-D OPENCV_DNN_CUDA=OFF \\\n-D CUDA_ARCH_BIN=\"6.1 7.5 8.6\" \\\n-D WITH_V4L=ON \\\n-D WITH_QT=OFF \\\n-D WITH_OPENGL=ON \\\n-D WITH_GSTREAMER=ON \\\n-D WITH_NVCUVID=ON \\\n-D OPENCV_GENERATE_PKGCONFIG=ON \\\n-D OPENCV_PC_FILE_NAME=opencv.pc \\\n-D OPENCV_ENABLE_NONFREE=ON \\\n-D BUILD_opencv_python2=OFF \\\n-D BUILD_opencv_python3=OFF \\\n-D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv/opencv_contrib-4.5.3/modules \\\n-D INSTALL_PYTHON_EXAMPLES=OFF \\\n-D INSTALL_C_EXAMPLES=OFF \\\n-D BUILD_EXAMPLES=OFF ..\n\nWORKDIR /tmp/opencv/opencv-4.5.3/build\nRUN make -j20\nRUN make install\n\nRUN apt clean -y\nADD ci/gitconfig /etc/gitconfig\nWORKDIR /root\n"
}