{
  "startTime": 1674250251115,
  "endTime": 1674250252018,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### INSTALLER STAGE ###\nFROM node:16.14.2-alpine AS installer\n\n# Create app directory\nWORKDIR /usr/src/installer\n\nENV NODE_ENV=production\n\n# Prisma needs to have a schema present because of the postinstall script that generates the SDK\nCOPY package.json yarn.lock .yarnrc.yml schema.prisma .snyk ./\nCOPY .yarn ./.yarn\n\n# Install build tools for native dependencies\n# hadolint ignore=DL3018\nRUN apk add --no-cache make gcc g++ python3\nRUN yarn install --immutable && yarn cache clean;\n\n### BUILDER STAGE ###\nFROM node:16.14.2-alpine AS builder\n\n# Create app directory\nWORKDIR /usr/src/builder\n\nENV NODE_ENV=production\n\n# Install dependencies and copy Prisma schema\nCOPY package.json yarn.lock .yarnrc.yml schema.prisma .snyk ./\n\n# Copy dependencies that were installed before\nCOPY --from=installer /usr/src/installer/node_modules node_modules\n# Copy build configurations\nCOPY tsconfig.json ./\n\n# Copy types\nCOPY types ./types\n\n# Copy Yarn release\nCOPY .yarn/releases ./.yarn/releases\n\n# Copy source\nCOPY src ./src\n\n# Build the project\nRUN yarn run build\n\n### BOT STAGE ###\nFROM node:16.14.2-alpine AS bot\n\nLABEL maintainer 'Jonah Snider <jonah@jonah.pw> (jonah.pw)'\n\nWORKDIR /usr/src/dice\n\nENV NODE_ENV=production\n\n# Top.gg webhook port\nEXPOSE 5000\n\n# Install dependencies\nCOPY --from=installer /usr/src/installer/node_modules ./node_modules\nCOPY --from=installer /usr/src/installer/yarn.lock ./yarn.lock\nCOPY --from=installer /usr/src/installer/.yarn/releases ./.yarn/releases\nCOPY --from=installer /usr/src/installer/.yarnrc.yml ./.yarnrc.yml\nCOPY --from=installer /usr/src/installer/schema.prisma ./schema.prisma\n\n# Copy other required files\nCOPY package.json package.json\n\n# Copy compiled TypeScript\nCOPY --from=builder /usr/src/builder/tsc_output ./tsc_output\n\nENTRYPOINT [\"yarn\", \"run\", \"start\"]\n"
}