{
  "startTime": 1674253815270,
  "endTime": 1674253816119,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:3.0.0-alpine3.13 as build\n\nARG RAILS_ENV=production\nENV RAILS_ENV=$RAILS_ENV\n\nRUN apk add --no-cache libxml2-dev libxslt-dev build-base postgresql-dev yarn tzdata\n\nRUN mkdir -p /usr/src/garrison && rm -rf /usr/src/garrison\nWORKDIR /usr/src/garrison\n\nCOPY Gemfile Gemfile.lock /usr/src/garrison/\n\nRUN set -ex; \\\n  if [ \"$RAILS_ENV\" = \"production\" ]; then \\\n  bundle install --jobs \"$(getconf _NPROCESSORS_ONLN)\" --retry 5 --without test development; \\\n  elif [ \"$RAILS_ENV\" = \"development\" ]; then \\\n  bundle install --jobs \"$(getconf _NPROCESSORS_ONLN)\" --retry 5; \\\n  fi;\n\nRUN rm /usr/local/bundle/cache/*.gem\n\nCOPY package.json yarn.lock /usr/src/garrison/\nRUN set -ex; \\\n  if [ \"$RAILS_ENV\" = \"production\" ]; then \\\n  yarn install --frozen-lockfile --production && yarn cache clean; \\\n  elif [ \"$RAILS_ENV\" = \"development\" ]; then \\\n  yarn install --frozen-lockfile && yarn cache clean; \\\n  fi;\n\nCOPY . /usr/src/garrison\nRUN SECRET_KEY_BASE=1 bundle exec rake assets:precompile\n\nRUN rm -rf /usr/src/garrison/app/assets\nRUN rm -rf /usr/src/garrison/node_modules\nRUN rm -rf /usr/src/garrison/tmp\nRUN find /usr/local/bundle -iname '*.o' -exec rm {} \\;\nRUN find /usr/local/bundle -iname '*.a' -exec rm {} \\;\n\n# RUNTIME CONTAINER\nFROM ruby:3.0.0-alpine3.13\n\nARG RAILS_ENV=production\nENV RAILS_ENV=$RAILS_ENV\n\nRUN apk upgrade --no-cache\nRUN apk add --no-cache libpq tzdata xz-libs\n\nWORKDIR /usr/src/garrison\nCOPY --from=build /usr/local/bundle /usr/local/bundle\nCOPY --from=build /usr/src/garrison /usr/src/garrison\nCOPY app/assets/config /usr/src/garrison/app/assets/config\n\nENV RAILS_LOG_TO_STDOUT true\nENV RAILS_SERVE_STATIC_FILES true\n\nRUN set -ex; \\\n  if [ \"$RAILS_ENV\" = \"production\" ]; then \\\n  bundle install --without assets;\\\n  elif [ \"$RAILS_ENV\" = \"development\" ]; then \\\n  bundle install;\\\n  apk add --no-cache build-base nodejs; \\\n  fi;\n\nEXPOSE 3000\nCMD [\"bin/entry\"]\n"
}