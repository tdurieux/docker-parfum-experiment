{
  "startTime": 1674248001451,
  "endTime": 1674248003196,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 7,
        "columnEnd": 108
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 The Chromium OS Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\nFROM debian:bullseye\nLABEL description=\"Test crosvm using a command like the following: \\\ndocker run --privileged -v /dev/log:/dev/log -v <path to crosvm>:/platform/crosvm:ro <crosvm base image>\"\n\n# should be set to the ID/GROUP_ID of the user running the docker image\nARG USER_ID\nARG GROUP_ID\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends ca-certificates gnupg wget && \\\n    echo 'deb-src https://deb.debian.org/debian bullseye main' >> /etc/apt/sources.list && \\\n    cat /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get build-dep -y mesa && \\\n    apt-get install -y --no-install-recommends ca-certificates \\\n                                               python3-setuptools \\\n                                               llvm-dev \\\n                                               libxcb-shm0-dev \\\n                                               libelf-dev \\\n                                               cmake \\\n                                               chrony \\\n                                               bc \\\n                                               flex \\\n                                               bison \\\n                                               debootstrap \\\n                                               cpio \\\n                                               xz-utils \\\n                                               libegl1-mesa-dev \\\n                                               autoconf \\\n                                               automake \\\n                                               curl \\\n                                               g++ \\\n                                               gcc \\\n                                               gdb \\\n                                               git \\\n                                               kmod \\\n                                               libcap-dev \\\n                                               libdbus-1-dev \\\n                                               libegl1-mesa-dev \\\n                                               libepoxy-dev \\\n                                               libfdt-dev \\\n                                               libgl1-mesa-dev \\\n                                               libgles2-mesa-dev \\\n                                               libpciaccess-dev \\\n                                               libssl-dev \\\n                                               libtool \\\n                                               libusb-1.0-0-dev \\\n                                               libwayland-dev \\\n                                               make \\\n                                               nasm \\\n                                               ninja-build \\\n                                               pkg-config \\\n                                               protobuf-compiler \\\n                                               python \\\n                                               libtinfo5 \\\n                                               python3-protobuf \\\n                                               clang \\\n                                               iptables \\\n                                               libunwind-dev \\\n                                               libprotobuf-dev \\\n                                               protobuf-compiler \\\n                                               libprotoc-dev \\\n                                               libdw-dev \\\n                                               libprotobuf-dev \\\n                                               libdocopt-dev \\\n                                               && \\\n    apt-get -y build-dep intel-gpu-tools && rm -rf /var/lib/apt/lists/*;\n\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH \\\n    RUST_VERSION=1.45.2 \\\n    RUSTFLAGS='--cfg hermetic'\n\n# Debian usually has an old rust version in the repository. Instead of using that, we use rustup to\n# pull in a toolchain versions of our choosing.\nRUN curl -f -LO \"https://static.rust-lang.org/rustup/archive/1.22.1/x86_64-unknown-linux-gnu/rustup-init\" \\\n    && echo \"49c96f3f74be82f4752b8bffcf81961dea5e6e94ce1ccba94435f12e871c3bdb  *rustup-init\" | sha256sum -c - \\\n    && chmod +x rustup-init \\\n    && ./rustup-init -y --no-modify-path --default-toolchain $RUST_VERSION \\\n    && rm rustup-init \\\n    && chmod -R a+w $RUSTUP_HOME $CARGO_HOME \\\n    && rustup --version \\\n    && cargo --version \\\n    && rustc --version\n\n# Set the default toolchain to 'stable' to match the one that bin/smoke_test\n# uses. This allows kokoro runs to avoid re-downloading the toolchain as long\n# as the version matches RUST_VERSION.\nRUN rustup default stable\n\n# Warms up the cargo registry cache for future cargo runs. Cargo will still update the cache using a\n# git pull, but it only needs to download files that were changed since this image was built.\nRUN cargo install thisiznotarealpackage -q || true\n\n# Used /scratch for building dependencies which are too new or don't exist on Debian stretch.\nWORKDIR /scratch\n\n# Suppress warnings about detached HEAD, which will happen a lot and is meaningless in this context.\nRUN git config --global advice.detachedHead false\n\n# New libepoxy and libdrm-dev requires newer meson than is in Debian stretch.\nARG MESON_COMMIT=master\nRUN git clone https://github.com/mesonbuild/meson /meson \\\n    && cd /meson \\\n    && git checkout $MESON_COMMIT \\\n    && rm -f /usr/bin/meson \\\n    && ln -s $PWD/meson.py /usr/bin/meson\n\n# The libdrm-dev in distro can be too old to build minigbm,\n# so we build it from upstream.\nARG DRM_COMMIT=master\nRUN git clone https://gitlab.freedesktop.org/mesa/drm.git/ \\\n    && cd drm \\\n    && git checkout $DRM_COMMIT \\\n    && meson build -Dlibdir=lib \\\n    && ninja -C build/ install\n\n# The gbm used by upstream linux distros is not compatible with crosvm, which must use Chrome OS's\n# minigbm.\nRUN git clone https://chromium.googlesource.com/chromiumos/platform/minigbm \\\n    && cd minigbm \\\n    && sed 's/-Wall/-Wno-maybe-uninitialized/g' -i Makefile \\\n    && make CPPFLAGS=\"-DDRV_I915\" DRV_I915=1 install -j$(nproc)\n\nRUN git clone https://gitlab.freedesktop.org/virgl/virglrenderer.git \\\n    && cd virglrenderer \\\n    && mkdir -p build \\\n    && meson build/ -Dprefix=/usr/local -Dlibdir=lib \\\n    && ninja -C build/ install\n\n# Install libtpm2 so that tpm2-sys/build.rs does not try to build it in place in\n# the read-only source directory.\nARG TPM2_COMMIT=073dc25aa4dda42475a7a5a140399fc5db61b20f\nRUN git clone https://chromium.googlesource.com/chromiumos/third_party/tpm2 \\\n    && cd tpm2 \\\n    && git checkout $TPM2_COMMIT \\\n    && make -j$(nproc) \\\n    && cp build/libtpm2.a /lib\n\n# PUll down platform2 repositroy and install librendernodehost.\n# Note that we clone the repository outside of /scratch not to be removed\n# because crosvm depends on libvda.\nENV PLATFORM2_ROOT=/platform2\nARG PLATFORM2_COMMIT=2dce812fc9091e41a33094929610199468ee322b\nRUN git clone https://chromium.googlesource.com/chromiumos/platform2 $PLATFORM2_ROOT \\\n    && cd $PLATFORM2_ROOT \\\n    && git checkout $PLATFORM2_COMMIT\n\n# Set up sysroot from which system_api proto files are built.\nENV SYSROOT=/sysroot\nRUN mkdir -p $SYSROOT/usr/include/chromeos/dbus/trunks \\\n    && cp $PLATFORM2_ROOT/trunks/interface.proto \\\n        $SYSROOT/usr/include/chromeos/dbus/trunks\n# Copy it under rustc's sysroot as well for cargo clippy.\nRUN export RUST_SYSROOT=$(rustc --print sysroot); echo $RUST_SYSROOT\nRUN mkdir -p $RUST_SYSROOT/usr/include/chromeos/dbus/trunks \\\n  && cp $PLATFORM2_ROOT/trunks/interface.proto \\\n        $RUST_SYSROOT/usr/include/chromeos/dbus/trunks\n\n# Reduces image size and prevents accidentally using /scratch files\nRUN rm -r /scratch\nWORKDIR /\n\n# The manual installation of shared objects requires an ld.so.cache refresh.\nRUN ldconfig\n\n# Pull down repositories that crosvm depends on to cros checkout-like locations.\nENV CROS_ROOT=/\nENV THIRD_PARTY_ROOT=$CROS_ROOT/third_party\nRUN mkdir -p $THIRD_PARTY_ROOT\nENV PLATFORM_ROOT=$CROS_ROOT/platform\nRUN mkdir -p $PLATFORM_ROOT\nENV AOSP_EXTERNAL_ROOT=$CROS_ROOT/aosp/external\nRUN mkdir -p $AOSP_EXTERNAL_ROOT\n\n# minijail does not exist in upstream linux distros.\nARG MINIJAIL_COMMIT=5f9e3001c61626d2863dad91248ba8496c3ef511\nRUN git clone https://android.googlesource.com/platform/external/minijail $AOSP_EXTERNAL_ROOT/minijail \\\n    && cd $AOSP_EXTERNAL_ROOT/minijail \\\n    && git checkout $MINIJAIL_COMMIT \\\n    && make -j$(nproc) \\\n    && cp libminijail.so /usr/lib/x86_64-linux-gnu/\n\n# Pull the cras library for audio access.\nARG ADHD_COMMIT=5068bdd18b51de8f2d5bcff754cdecda80de8f44\nRUN git clone https://chromium.googlesource.com/chromiumos/third_party/adhd $THIRD_PARTY_ROOT/adhd \\\n    && cd $THIRD_PARTY_ROOT/adhd \\\n    && git checkout $ADHD_COMMIT\n\nARG VPERFETTO_COMMIT=3ce4813ae114e5f2e6e0b3f29517a88246c00363\nRUN git clone https://github.com/741g/vperfetto.git && \\\n  cd vperfetto && \\\n  git checkout $VPERFETTO_COMMIT && \\\n  cmake -G Ninja -B_build -DOPTION_BUILD_TESTS=FALSE && \\\n  ninja -C _build install\n\nARG CROSVM_COMMIT=3f9373f474a295df0f8a38592472ae59adc98e29\nRUN mkdir -p /platform/ \\\n   && cd /platform \\\n   && git clone --single-branch -b perfetto https://gitlab.freedesktop.org/tomeu/crosvm.git \\\n   && cd crosvm \\\n   && cargo install --locked --debug --features 'default-no-sandbox wl-dmabuf gpu x virtio-gpu-next' --path . --root /usr/local\n\nRUN export uid=$USER_ID gid=$GROUP_ID && \\\n    mkdir -p /home/chronos && \\\n    echo \"chronos:x:${uid}:${gid}:Developer,,,:/home/chronos:/bin/bash\" >> /etc/passwd && \\\n    echo \"chronos:x:${uid}:\" >> /etc/group && \\\n    chown ${uid}:${gid} -R /home/chronos\n\n\n#crony didn't install cleanly when using --include, so we add it by using an extra apt install\n\nENV EXTRA_PACKAGES=\"sudo,strace,libxcb-dri2-0,libxcb-dri3-0,libx11-xcb1,libxcb-xfixes0,libxcb-present0,libxcb-sync1,libxshmfence1,libx11-6,sysvinit-core,libwayland-client0,libwayland-server0,time,inetutils-ping,dnsutils,libpng16-16,libprocps8,valgrind,libsensors5,python3,wget,gnupg,ca-certificates,llvm-dev,chrony\"\n\nRUN ulimit -n 1024 && \\\n    debootstrap --variant=minbase --components main,contrib,non-free --include=$EXTRA_PACKAGES  bullseye /rootfs http://deb.debian.org/debian && \\\n    chroot /rootfs /bin/bash -c \"apt install -yy gdb\" && \\\n    chroot /rootfs /bin/bash -c \"dpkg-query -Wf '\\${Installed-Size}\\t\\${Package}\\n' | sort -n \" && \\\n    chroot /rootfs /bin/bash -c \"useradd -u 1001 -r -d / -s /sbin/nologin -c 'crossvm image user' perfetto\"\n\nCOPY perf-testing/Docker/init.sh /rootfs/.\n\nRUN cd /rootfs && \\\n  find -H | cpio -H newc -o | xz --check=crc32 -T4 - > /rootfs.cpio.gz\n\nCOPY perf-testing/Docker/x86_64.config /tmp/.\nRUN mkdir -p kernel && \\\n  wget -O- https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.16.tar.xz | tar -xJ --strip-components=1 -C kernel && \\\n  cd kernel && \\\n  ./scripts/kconfig/merge_config.sh arch/x86/configs/x86_64_defconfig /tmp/x86_64.config && \\\n  make -j12 vmlinux && \\\n  cp vmlinux /. && \\\n  cd .. && \\\n  rm -rf kernel\n\n# Need an unreleased version of Waffle for surfaceless support in apitrace\n# Replace this build with the Debian package once that's possible\nENV WAFFLE_VERSION=\"b6d94483694b6889a8567b6bd748f7baad527df4\"\nRUN git clone https://gitlab.freedesktop.org/mesa/waffle.git --single-branch --no-checkout /waffle && \\\n  cd /waffle && \\\n  git checkout \"$WAFFLE_VERSION\" && \\\n  cmake -B_build -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Debug -Dwaffle_has_surfaceless_egl=1 . && \\\n  make -j12 -C _build install && \\\n  mkdir -p build/lib build/bin && \\\n  cp _build/lib/libwaffle-1.so build/lib/libwaffle-1.so.0 && \\\n  cp _build/bin/wflinfo build/bin/wflinfo\n\nENV APITRACE_VERSION=\"perfetto\"\nRUN git clone https://gitlab.freedesktop.org/tomeu/apitrace.git --single-branch -b perfetto --no-checkout /apitrace && \\\n  cd /apitrace && \\\n  git checkout \"$APITRACE_VERSION\" && \\\n  cmake -G Ninja -B_build -H. -DCMAKE_BUILD_TYPE=Debug -DENABLE_GUI=False -DENABLE_WAFFLE=on -DWaffle_DIR=/usr/local/lib/cmake/Waffle/ && \\\n  ninja -C _build && \\\n  mkdir build && \\\n  cp _build/apitrace build && \\\n  cp _build/eglretrace build\n\nENV GN_ARGS=\"is_debug=false use_custom_libcxx=false\"\nENV CFG=linux_trusty-gcc7-x86_64-release\nRUN git clone https://android.googlesource.com/platform/external/perfetto && \\\n  cd perfetto && \\\n  git checkout v12.1 && \\\n  python3 tools/install-build-deps && \\\n  python3 tools/install-build-deps --ui && \\\n  tools/gn gen out/dist --args=\"${GN_ARGS}\" --check && \\\n  tools/ninja -C out/dist traced traced_probes perfetto trace_to_text ui trace_processor_shell && \\\n  mkdir -p /usr/local/lib/python3.7/site-packages && \\\n  protoc --python_out=/usr/local/lib/python3.7/site-packages protos/perfetto/trace/perfetto_trace.proto && \\\n  tools/gen_amalgamated --gn_args 'target_os=\"linux\" is_debug=false'\n\nRUN mkdir -p /traces-db && chown chronos:chronos /traces-db && mkdir -p /wd && chown -R chronos:chronos /wd\n\nENV IGT_GPU_TOOLS_VERSION=\"igt-gpu-tools-1.25\"\nRUN git clone --single-branch -b master https://gitlab.freedesktop.org/drm/igt-gpu-tools.git && \\\n    cd igt-gpu-tools && \\\n    git checkout \"$IGT_GPU_TOOLS_VERSION\" && \\\n    meson build -Doverlay=disabled -Dchamelium=disabled -Dvalgrind=disabled -Dman=disabled -Ddocs=disabled -Dtests=disabled -Drunner=disabled && \\\n    ninja -C build install\n\nENV GFX_PPS_VERSION=\"v0.3.0\"\nRUN git clone --single-branch -b master https://gitlab.freedesktop.org/Fahien/gfx-pps.git && \\\n    cd gfx-pps && \\\n    git checkout \"$GFX_PPS_VERSION\" && \\\n    meson build -Dtest=false -Dbuildtype=debugoptimized && \\\n    ninja -C build\n\nCOPY perf-testing/Docker/run_traces.sh /usr/local/.\nCOPY perf-testing/Docker/run_perfetto_ui.sh /usr/local/.\nCOPY perf-testing/Docker/run.sh /usr/local/.\nCOPY perf-testing/Docker/perfetto-guest.cfg /usr/local/.\nCOPY perf-testing/Docker/perfetto-host.cfg /usr/local/.\nCOPY perf-testing/Docker/merge_traces.py /usr/local/.\n\nENTRYPOINT [\"/usr/local/run.sh\"]\n"
}