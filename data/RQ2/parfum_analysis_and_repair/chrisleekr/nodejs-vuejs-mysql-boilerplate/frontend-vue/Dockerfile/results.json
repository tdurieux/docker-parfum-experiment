{
  "startTime": 1674216564894,
  "endTime": 1674216565680,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# initial stage\nFROM node:16-buster AS initial-stage\n\nRUN apt-get update -y && \\\n  apt-get install -yq --no-install-recommends \\\n  cmake=3.13.4-1 \\\n  build-essential=12.6 \\\n  libpng-dev=1.6.36-6 \\\n  libjpeg-dev=1:1.5.2-2+deb10u1 \\\n  gifsicle=1.91-5 \\\n  xvfb=2:1.20.4-1+deb10u4 \\\n  libgtk-3-dev=3.24.5-1 \\\n  libnotify-dev=0.7.7-4 \\\n  libgconf-2-4=3.2.6-5 \\\n  libnss3=2:3.42.1-1+deb10u5 \\\n  libxss1=1:1.2.3-1 \\\n  libasound2=1.1.8-1 && \\\n  rm -rf /var/lib/apt/lists/*\n\nWORKDIR /srv\n\nCOPY package*.json ./\n\nRUN npm install && npm cache clean --force;\n\n# build stage\nFROM initial-stage AS build-stage\n\nARG NODE_ENV\nARG BASE_URL\nENV NODE_ENV=${NODE_ENV}\nENV BASE_URL=${BASE_URL}\n\n# Add configuration files\nCOPY image-files/ /\n\nWORKDIR /srv\n\nCOPY . .\n\nRUN npm run build --mode=production\n\nENTRYPOINT [ \"docker-entrypoint.dev.sh\" ]\n\n# production stage\nFROM nginx:stable-alpine AS production-stage\n\nRUN apk --no-cache add \\\n  xz-libs=5.2.5-r1 \\\n  freetype=2.10.4-r2\n\n# Add configuration files\nCOPY image-files/ /\n\nCOPY --from=build-stage /srv/dist /srv\n\nEXPOSE 80\n\nENTRYPOINT [ \"docker-entrypoint.sh\" ]\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}