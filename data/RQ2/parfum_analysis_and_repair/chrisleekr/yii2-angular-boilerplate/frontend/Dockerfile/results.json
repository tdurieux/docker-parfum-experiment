{
  "startTime": 1674252789352,
  "endTime": 1674252790426,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#################################\n# STEP 1: NPM install\n#################################\nFROM node:14-alpine as initial-stage\n\nRUN apk add --no-cache nodejs nodejs-npm bash chromium nss chromium-chromedriver\n\nENV CHROME_BIN=/usr/bin/chromium-browser\nENV CHROME_DRIVER=/usr/bin/chromedrive\n\nRUN npm install -g @angular/cli && npm cache clean --force;\n\nWORKDIR /app\n\nCOPY package*.json ./\n\nRUN npm install && npm cache clean --force;\n\n#################################\n# STEP 2: Build\n#################################\nFROM initial-stage AS build-stage\n\nRUN apk --no-cache add nginx\n\nWORKDIR /app\n\nCOPY image-files/ /\n\nCOPY . .\n\nEXPOSE 80\n\n#################################\n# STEP 3: Deployment\n#################################\nFROM build-stage AS build-production-stage\n\nWORKDIR /app\n\nRUN npm run build\n\nFROM nginx:stable-alpine AS production-stage\n\nCOPY image-files/ /\n\nCOPY --from=build-production-stage /app/dist /srv\n\nEXPOSE 80\n\nENTRYPOINT [ \"docker-entrypoint.sh\" ]\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}