{
  "startTime": 1674217788622,
  "endTime": 1674217790009,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 121,
        "columnStart": 2,
        "columnEnd": 17
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 2,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 2,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GDAL_VERSION=3.1.4\nARG LIBKML_VERSION=1.3.0\nARG NODE_VERSION=16.15.0\nARG ALPINE_VERSION=3.15\n\nFROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} as builder\n\nARG GDAL_VERSION\nARG LIBKML_VERSION\n\nENV GDAL_DEPS_DEV='\\\n    # common certificates for https\n    libressl ca-certificates \\\n    # base compile\n    build-base cmake musl-dev linux-headers tar \\\n    # kml deps see https://github.com/boundlessgeo/alpine-pkg-b7s/blob/master/libkml/APKBUILD\n    cmake \\\n    boost-dev \\\n    expat-dev \\\n    minizip-dev \\\n    uriparser-dev \\\n    zlib-dev \\\n    # gdal deps see https://github.com/boundlessgeo/alpine-pkg-b7s/blob/master/gdal/APKBUILD\n    linux-headers \\\n    curl-dev \\\n    expat-dev \\\n    geos-dev \\\n    proj-dev \\\n    libxml2-dev \\\n    postgresql-dev \\\n    libxslt-dev \\\n    sqlite-dev \\\n    tiff-dev \\\n    zlib-dev'\n\nENV GDAL_DEPS_RUN='\\\n    # kml deps\n    expat \\\n    minizip \\\n    uriparser \\\n    zlib \\\n    # gdal deps\n    curl \\\n    expat \\\n    geos \\\n    libpq \\\n    libxml2 \\\n    libxslt \\\n    sqlite-libs \\\n    tiff \\\n    zlib \\\n    proj\\\n    '\n\nENV DEPS_RUN='\\\n    postgresql-client\\\n    '\n\nWORKDIR /build\n#\n# Download stuff\n#\nRUN wget -O libkml.tar.gz \"https://github.com/libkml/libkml/archive/${LIBKML_VERSION}.tar.gz\"\nRUN wget -O gdal.tar.gz \"https://github.com/OSGeo/gdal/archive/v${GDAL_VERSION}.tar.gz\"\n\n#\n# GDAL\n#\nRUN \\\n  echo \"http://nl.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories && \\\n  apk add --no-cache --virtual .build_dep $GDAL_DEPS_DEV && \\\n  apk add --no-cache $GDAL_DEPS_RUN && \\\n  apk add --no-cache $DEPS_RUN && \\\n  # https://github.com/gliderlabs/docker-alpine/issues/30\n  # issue with update-ca-certificates failing:\n  update-ca-certificates && \\\n  #\n  # Build KML\n  # \n  tar --extract --file libkml.tar.gz && \\\n  cd libkml-${LIBKML_VERSION} && \\\n  mkdir buildkml && \\\n  cd buildkml && \\\n  cmake .. && \\\n  make && \\\n  make install && \\\n  #\n  # gdal\n  # see option in configure (https://raw.githubusercontent.com/OSGeo/gdal/master/gdal/configure)\n  #\n  cd /build && \\\n  tar --extract --file gdal.tar.gz --strip-components 1 && \\\n  cd gdal && \\\n  CXXFLAGS=\"-D__MUSL__ -Os\" CFLAGS=\"-march=native -mtune=native -Os\" LDFLAGS=\"-s\" && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/usr \\\n    --without-libtool \\\n    --with-hide-internal-symbols \\\n    --with-geos=yes \\\n    --with-proj=yes \\\n    --with-threads=yes \\\n    --with-sqlite3=yes \\\n    --with-pg=yes \\\n    --with-libkml=yes \\\n    --with-libz=internal \\\n    --with-libtiff=internal --with-rename-internal-libtiff-symbols \\\n    --with-geotiff=internal --with-rename-internal-libgeotiff-symbols \\\n    --disable-all-optional-drivers \\\n    --enable-driver-shape \\\n    --enable-driver-gpkg \\\n    --enable-driver-dxf \\\n    --enable-driver-gml \\\n    --enable-driver-gpx \\\n    --enable-driver-csv \\\n    --enable-driver-pgdump \\\n    --without-jpeg12 \\\n    --without-pcraster \\\n    --without-pcidsk \\\n    --without-lerc \\\n    --without-gnm \\\n    --without-gif \\\n    --with-png=no && \\\n      #--enable-lto && \\\n  make && make install && \\\n  #\n  # cleanup\n  #\n  apk del .build_dep && \\\n  cd / && \\\n  rm -rf /build && \\\n  rm -rf /var/cache/apk/* && rm libkml.tar.gz\n\nFROM scratch as final\nENV NODE_OPTIONS=\"--max-old-space-size=4096\"\nENV NODE_ENV=production\n\nCOPY --from=builder / /\n\nWORKDIR /api\n\nCOPY . .\n\n#\n# If no dev dependencies required, build node_modules here,\n#\nRUN npm install --production && \\\n    rm package-lock.json && npm cache clean --force;\n\n#--------------------- Debian / alpine user setting ----------------------------\nENV USER=api\nENV GROUP=mapx\nENV UID=12345\nENV GID=101\nENV DATADIR=/shared\n\nRUN addgroup \\\n    --system \\\n    --gid $GID \\\n     $GROUP &&\\\n    adduser \\\n     --system \\\n     --disabled-password \\\n     --gecos \"\"\\\n     --ingroup $GROUP \\\n     --no-create-home \\\n     --uid $UID \\\n     $USER\n\nRUN mkdir -p $DATADIR && chown -R $USER:$GROUP $DATADIR\nUSER $USER\nVOLUME $DATADIR\n#-------------------------------------------------------------------------------\n\nEXPOSE 3030\n\nCMD [\"node\", \"index.js\"]\n"
}