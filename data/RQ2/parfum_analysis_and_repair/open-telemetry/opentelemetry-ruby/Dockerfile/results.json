{
  "startTime": 1674251156494,
  "endTime": 1674251157821,
  "originalSmells": [
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gemUpdateNoDocument",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Configuration for Ruby base image\nARG ALPINE_VERSION=3.10\nARG RUBY_VERSION=2.6.5\n\nFROM ruby:\"${RUBY_VERSION}-alpine${ALPINE_VERSION}\" as ruby\n\n# Metadata\nLABEL maintainer=\"open-telemetry/opentelemetry-ruby\"\n\n# User and Group for app isolation\nARG APP_UID=1000\nARG APP_USER=app\nARG APP_GID=1000\nARG APP_GROUP=app\nARG APP_DIR=/app\n\n# Rubygems Bundler version\nARG BUNDLER_VERSION=2.0.2\n\nENV SHELL /bin/bash\n\nARG PACKAGES=\"\\\n    autoconf \\\n    automake \\\n    bash \\\n    binutils \\\n    build-base \\\n    coreutils  \\\n    execline \\\n    findutils \\\n    git \\\n    grep \\\n    less \\\n    libstdc++ \\\n    libtool \\\n    libxml2-dev \\\n    libxslt-dev \\\n    mariadb-dev \\\n    openssl \\\n    postgresql-dev \\\n    tzdata \\\n    util-linux \\\n    \"\n# Install packages\nRUN apk update && \\\n    apk upgrade && \\\n    apk add --no-cache ${PACKAGES}\n\n# Configure Bundler and PATH\nENV LANG=C.UTF-8 \\\n    GEM_HOME=/bundle \\\n    BUNDLE_JOBS=20 \\\n    BUNDLE_RETRY=3\nENV BUNDLE_PATH $GEM_HOME\nENV BUNDLE_APP_CONFIG=\"${BUNDLE_PATH}\" \\\n    BUNDLE_BIN=\"${BUNDLE_PATH}/bin\" \\\n    BUNDLE_GEMFILE=Gemfile\nENV PATH \"${APP_DIR}/bin:${BUNDLE_BIN}:${PATH}\"\n\n# Upgrade RubyGems and install required Bundler version\nRUN mkdir -p /usr/local/etc \\\n  && { \\\n    echo 'install: --no-document'; \\\n    echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc;\nRUN gem update --system && \\\n    gem install \"bundler:${BUNDLER_VERSION}\" && \\\n    gem cleanup && rm -rf /root/.gem;\n\n# Add custom app User and Group\nRUN addgroup -S -g \"${APP_GID}\" \"${APP_GROUP}\" && \\\n    adduser -S -g \"${APP_GROUP}\" -u \"${APP_UID}\" \"${APP_USER}\"\n\n# Create directories for the app code\nRUN mkdir -p \"${APP_DIR}\" \\\n    \"${APP_DIR}/tmp\" && \\\n    chown -R \"${APP_USER}\":\"${APP_GROUP}\" \"${APP_DIR}\" \\\n    \"${APP_DIR}/tmp\" \\\n    \"${BUNDLE_PATH}/\"\n\nUSER \"${APP_USER}\"\n\nWORKDIR \"${APP_DIR}\"\n\n# Commands will be supplied via `docker-compose`\nCMD []\n"
}