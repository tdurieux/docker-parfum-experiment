{
  "startTime": 1674217038132,
  "endTime": 1674217039947,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 137
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 21,
        "columnEnd": 129
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ALPINE_VERSION=3.14\nARG GO_VERSION=1.17.1\n# gRPC core version that applies to C++, C#, Objective-C, PhP, Python, Ruby\nARG GRPC_VERSION=1.41.0\nARG PROTOBUF_C_VERSION=1.4.0\nARG GRPC_WEB_VERSION=1.3.0\n\nARG PROTOC_GEN_GO_VERSION=1.5.2\nARG PROTOC_GEN_GO_GRPC_VERSION=1.41.0\nARG GRPC_JAVA_VERSION=1.41.0\n# v1.3.2, using the version directly does not work: \"tar: invalid magic\"\nARG PROTOC_GEN_GOGO_VERSION=b03c65ea87cdc3521ede29f62fe3ce239267c1bc\nARG PROTOC_GEN_LINT_VERSION=0.2.4\nARG GRPC_GATEWAY_VERSION=2.6.0\nARG PROTOC_GEN_PARQUET_VERSION=0.4.3\nARG UPX_VERSION=3.96\n\n\nFROM alpine:${ALPINE_VERSION} as protoc_builder\nRUN apk add --no-cache build-base curl automake autoconf libtool git zlib-dev linux-headers cmake ninja\n\nRUN mkdir -p /out\n\nARG GRPC_VERSION\nRUN git clone --recursive --depth=1 -b v${GRPC_VERSION} https://github.com/grpc/grpc.git /grpc && \\\n    ln -s /grpc/third_party/protobuf /protobuf && \\\n    mkdir -p /grpc/cmake/build && \\\n    cd /grpc/cmake/build && \\\n    cmake \\\n        -GNinja \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DgRPC_INSTALL=ON \\\n        -DgRPC_BUILD_TESTS=OFF \\\n        ../.. && \\\n    cmake --build . --target plugins && \\\n    cmake --build . --target install && \\\n    DESTDIR=/out cmake --build . --target install\n\nARG PROTOBUF_C_VERSION\nRUN mkdir -p /protobuf-c && \\\n    curl -f -sSL https://api.github.com/repos/protobuf-c/protobuf-c/tarball/v${PROTOBUF_C_VERSION} | tar xz --strip 1 -C /protobuf-c && \\\n    cd /protobuf-c && \\\n    export LD_LIBRARY_PATH=/usr/lib:/usr/lib64 && \\\n    export PKG_CONFIG_PATH=/usr/lib64/pkgconfig && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && \\\n    make && make install DESTDIR=/out\n\nARG GRPC_JAVA_VERSION\nRUN mkdir -p /grpc-java && \\\n    curl -f -sSL https://api.github.com/repos/grpc/grpc-java/tarball/v${GRPC_JAVA_VERSION} | tar xz --strip 1 -C /grpc-java && \\\n    cd /grpc-java && \\\n    g++ \\\n        -I. -I/usr/include \\\n        compiler/src/java_plugin/cpp/*.cpp \\\n        -L/usr/lib64 \\\n        -lprotoc -lprotobuf -lpthread --std=c++0x -s \\\n        -o protoc-gen-grpc-java && \\\n    install -Ds protoc-gen-grpc-java /out/usr/bin/protoc-gen-grpc-java && \\\n    rm -Rf /grpc-java && \\\n    rm -Rf /grpc\n\nARG GRPC_WEB_VERSION\nRUN mkdir -p /grpc-web && \\\n    curl -f -sSL https://api.github.com/repos/grpc/grpc-web/tarball/${GRPC_WEB_VERSION} | tar xz --strip 1 -C /grpc-web && \\\n    cd /grpc-web && \\\n    make install-plugin && \\\n    install -Ds /usr/local/bin/protoc-gen-grpc-web /out/usr/bin/protoc-gen-grpc-web\n\nFROM golang:${GO_VERSION}-alpine${ALPINE_VERSION} as go_builder\nRUN apk add --no-cache build-base curl git\n\nARG PROTOC_GEN_GO_GRPC_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/grpc/grpc-go && \\\n    curl -f -sSL https://api.github.com/repos/grpc/grpc-go/tarball/v${PROTOC_GEN_GO_GRPC_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/grpc/grpc-go && \\\n    cd ${GOPATH}/src/github.com/grpc/grpc-go/cmd/protoc-gen-go-grpc && \\\n    go build -ldflags '-w -s' -o /golang-protobuf-out/protoc-gen-go-grpc . && \\\n    install -Ds /golang-protobuf-out/protoc-gen-go-grpc /out/usr/bin/protoc-gen-go-grpc\n\nARG PROTOC_GEN_GO_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/golang/protobuf && \\\n    curl -f -sSL https://api.github.com/repos/golang/protobuf/tarball/v${PROTOC_GEN_GO_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/golang/protobuf && \\\n    cd ${GOPATH}/src/github.com/golang/protobuf && \\\n    go build -ldflags '-w -s' -o /golang-protobuf-out/protoc-gen-go ./protoc-gen-go && \\\n    install -Ds /golang-protobuf-out/protoc-gen-go /out/usr/bin/protoc-gen-go\n\nARG PROTOC_GEN_GOGO_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/gogo/protobuf && \\\n    curl -f -sSL https://api.github.com/repos/gogo/protobuf/tarball/${PROTOC_GEN_GOGO_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/gogo/protobuf && \\\n    cd ${GOPATH}/src/github.com/gogo/protobuf && \\\n    go build -ldflags '-w -s' -o /gogo-protobuf-out/protoc-gen-gofast ./protoc-gen-gofast && \\\n    install -Ds /gogo-protobuf-out/protoc-gen-gofast /out/usr/bin/protoc-gen-gofast && \\\n    go build -ldflags '-w -s' -o /gogo-protobuf-out/protoc-gen-gogo ./protoc-gen-gogo && \\\n    install -Ds /gogo-protobuf-out/protoc-gen-gogo /out/usr/bin/protoc-gen-gogo && \\\n    go build -ldflags '-w -s' -o /gogo-protobuf-out/protoc-gen-gogofast ./protoc-gen-gogofast && \\\n    install -Ds /gogo-protobuf-out/protoc-gen-gogofast /out/usr/bin/protoc-gen-gogofast && \\\n    go build -ldflags '-w -s' -o /gogo-protobuf-out/protoc-gen-gogofaster ./protoc-gen-gogofaster && \\\n    install -Ds /gogo-protobuf-out/protoc-gen-gogofaster /out/usr/bin/protoc-gen-gogofaster && \\\n    mkdir -p /out/usr/include/github.com/gogo/protobuf/protobuf/google/protobuf && \\\n    install -D $(find ./protobuf/google/protobuf -name '*.proto') -t /out/usr/include/github.com/gogo/protobuf/protobuf/google/protobuf && \\\n    install -D ./gogoproto/gogo.proto /out/usr/include/github.com/gogo/protobuf/gogoproto/gogo.proto\n\nARG PROTOC_GEN_LINT_VERSION\nRUN cd / && \\\n    curl -f -sSLO https://github.com/ckaznocha/protoc-gen-lint/releases/download/v${PROTOC_GEN_LINT_VERSION}/protoc-gen-lint_linux_amd64.zip && \\\n    mkdir -p /protoc-gen-lint-out && \\\n    cd /protoc-gen-lint-out && \\\n    unzip -q /protoc-gen-lint_linux_amd64.zip && \\\n    install -Ds /protoc-gen-lint-out/protoc-gen-lint /out/usr/bin/protoc-gen-lint\n\nARG GRPC_GATEWAY_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway && \\\n    curl -f -sSL https://api.github.com/repos/grpc-ecosystem/grpc-gateway/tarball/v${GRPC_GATEWAY_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway && \\\n    cd ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway && \\\n    go build -ldflags '-w -s' -o /grpc-gateway-out/protoc-gen-grpc-gateway ./protoc-gen-grpc-gateway && \\\n    go build -ldflags '-w -s' -o /grpc-gateway-out/protoc-gen-openapiv2 ./protoc-gen-openapiv2 && \\\n    install -Ds /grpc-gateway-out/protoc-gen-grpc-gateway /out/usr/bin/protoc-gen-grpc-gateway && \\\n    install -Ds /grpc-gateway-out/protoc-gen-openapiv2 /out/usr/bin/protoc-gen-openapiv2 && \\\n    mkdir -p /out/usr/include/protoc-gen-openapiv2/options && \\\n    install -D $(find ./protoc-gen-openapiv2/options -name '*.proto') -t /out/usr/include/protoc-gen-openapiv2/options\n\nARG PROTOC_GEN_PARQUET_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/atoulme/protoc-gen-parquet && \\\n    curl -f -sSL https://api.github.com/repos/atoulme/protoc-gen-parquet/tarball/v${PROTOC_GEN_PARQUET_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/atoulme/protoc-gen-parquet && \\\n    cd ${GOPATH}/src/github.com/atoulme/protoc-gen-parquet && \\\n    go build -ldflags '-w -s' -o bin/protoc-gen-parquet . && \\\n    install -Ds bin/protoc-gen-parquet /out/usr/bin/protoc-gen-parquet && \\\n    mkdir -p /out/usr/include/protoc-gen-parquet/options && \\\n    install -D $(find ./parquet_options -name '*.proto') -t /out/usr/include/protoc-gen-parquet/options\n\nFROM alpine:${ALPINE_VERSION} as packer\nRUN apk add --no-cache curl\n\nARG UPX_VERSION\nRUN mkdir -p /upx && curl -f -sSL https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz | tar xJ --strip 1 -C /upx && \\\n    install -D /upx/upx /usr/local/bin/upx\n\n# Use all output including headers and protoc from protoc_builder\nCOPY --from=protoc_builder /out/ /out/\n\n# Integrate all output from go_builder\nCOPY --from=go_builder /out/ /out/\n\nRUN upx --lzma $(find /out/usr/bin/ \\\n        -type f -name 'grpc_*' \\\n        -not -name 'grpc_csharp_plugin' \\\n        -not -name 'grpc_node_plugin' \\\n        -not -name 'grpc_php_plugin' \\\n        -not -name 'grpc_ruby_plugin' \\\n        -not -name 'grpc_python_plugin' \\\n        -or -name 'protoc-gen-*' \\\n    )\nRUN find /out -name \"*.a\" -delete -or -name \"*.la\" -delete\n\n\nFROM alpine:${ALPINE_VERSION}\nLABEL maintainer=\"The OpenTelemetry Authors\"\nCOPY --from=packer /out/ /\nRUN apk add --no-cache bash libstdc++ && \\\n    ln -s /usr/bin/grpc_cpp_plugin /usr/bin/protoc-gen-grpc-cpp && \\\n    ln -s /usr/bin/grpc_csharp_plugin /usr/bin/protoc-gen-grpc-csharp && \\\n    ln -s /usr/bin/grpc_objective_c_plugin /usr/bin/protoc-gen-grpc-objc && \\\n    ln -s /usr/bin/grpc_node_plugin /usr/bin/protoc-gen-grpc-js && \\\n    ln -s /usr/bin/grpc_php_plugin /usr/bin/protoc-gen-grpc-php && \\\n    ln -s /usr/bin/grpc_python_plugin /usr/bin/protoc-gen-grpc-python && \\\n    ln -s /usr/bin/grpc_ruby_plugin /usr/bin/protoc-gen-grpc-ruby\nCOPY protoc-wrapper /usr/bin/protoc-wrapper\nENV LD_LIBRARY_PATH='/usr/lib:/usr/lib64:/usr/lib/local'\nENTRYPOINT [\"protoc-wrapper\", \"-I/usr/include\"]\n"
}