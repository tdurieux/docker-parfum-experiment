{
  "startTime": 1674255217936,
  "endTime": 1674255220356,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 5,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 5,
        "columnEnd": 112
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 5,
        "columnEnd": 118
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 7,
        "columnEnd": 91
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 238,
        "lineEnd": 238,
        "columnStart": 7,
        "columnEnd": 91
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 35,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 7,
        "columnEnd": 110
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 7,
        "columnEnd": 114
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 7,
        "columnEnd": 213
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 7,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 7,
        "columnEnd": 230
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 7,
        "columnEnd": 75
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 38,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 5,
        "columnEnd": 38
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 5,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 5,
        "columnEnd": 32
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 230,
        "lineEnd": 230,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 239,
        "lineEnd": 239,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 257,
        "lineEnd": 257,
        "columnStart": 7,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:6.9\n\nARG BUILD_NUMBER\n\nLABEL NAME=apm/build-image-webserver-agent-centos6-x64 VERSION=$BUILD_NUMBER\n\nENV GOSU_ARCH amd64\nENV JDK_ARCH x64\n\nARG PYTHON_VERSION=\"2.7.8\"\nARG CMAKE_VERSION=\"3.20\"\nARG CMAKE_0VERSION=\"3.20.0\"\nARG GRPC_VERSION=\"1.36.4\"\nARG OPENTELEMETRY_VERSION=\"1.2.0\"\nARG BOOST_VERSION=\"1.75.0\"\nARG BOOST_FILENAME=\"boost_1_75_0\"\nARG APR_VERSION=\"1.7.0\"\nARG EXPAT_VERSION=\"2.3.0\"\nARG EXPAT_RVERSION=\"R_2_3_0\"\nARG APRUTIL_VERSION=\"1.6.1\"\nARG AUTOCONF_VERSION=\"2.68\"\nARG LIBTOOL_VERSION=\"2.4.6\"\nARG LOG4CXX_VERSION=\"0.11.0\"\nARG GTEST_VERSION=\"1.10.0\"\nARG AUTOMAKE_VERSION=\"1.16.3\"\nARG PCRE_VERSION=\"8.44\"\nARG NGINX_VERSION=\"1.18.0\"\n\n\n# create default non-root user\nRUN groupadd -r swuser && useradd -u 1000 -g swuser -m -s /sbin/nologin -c \"default non-root user\" swuser\n\nRUN chmod -R 777 /opt\n\nRUN curl -f https://www.getpagespeed.com/files/centos6-eol.repo --output /etc/yum.repos.d/CentOS-Base.repo\n\n# install required packages\nRUN yum update -y \\\n    && yum install -y \\\n    yum install wget -y \\\n    yum install -y zlib-devel \\\n    yum install -y openssl-devel \\\n    yum install java-1.8.0-openjdk -y \\\n    yum install pcre-devel -y \\\n    yum install xz -y \\\n    yum install httpd -y \\\n    && yum clean all && rm -rf /var/cache/yum\n\n# install lcov package\nRUN wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n\t&& yum install ./epel-release-latest-*.noarch.rpm -y \\\n\t&& yum install lcov -y \\\n\t&& yum clean all && rm -rf /var/cache/yum\n\n# install devtoolset toolchain\nRUN curl -f https://www.getpagespeed.com/files/centos6-eol.repo --output /etc/yum.repos.d/CentOS-Base.repo \\\n  && curl -f https://www.getpagespeed.com/files/centos6-epel-eol.repo --output /etc/yum.repos.d/epel.repo \\\n  && yum -y install centos-release-scl \\\n  && curl -f https://www.getpagespeed.com/files/centos6-scl-eol.repo --output /etc/yum.repos.d/CentOS-SCLo-scl.repo \\\n  && curl -f https://www.getpagespeed.com/files/centos6-scl-rh-eol.repo --output /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo \\\n  && yum install yum-utils -y \\\n  && yum-config-manager --enable rhel-server-rhscl-7-rpms -y \\\n  && yum install devtoolset-7 -y \\\n  && yum clean all && rm -rf /var/cache/yum\nENV PATH=\"/opt/rh/devtoolset-7/root/usr/bin:${PATH}\"\n\n# install python\nRUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \\\n\t&& unxz Python-${PYTHON_VERSION}.tar.xz \\\n\t&& tar -xf Python-${PYTHON_VERSION}.tar \\\n\t&& cd Python-${PYTHON_VERSION} && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && make && make install \\\n\t&& cd .. \\\n\t&& rm -rf Python-${PYTHON_VERSION}.tar.xz && rm -rf Python-${PYTHON_VERSION}.tar\n\n# install gosu for easy step-down from root (from https://github.com/tianon/gosu/blob/master/INSTALL.md#from-centos)\nENV GOSU_VERSION=1.10\n\nRUN curl -f -o /usr/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n    && chmod +x /usr/bin/gosu \\\n    # Verify that the binary works\n    && gosu nobody true\n\n# install git required for grpc\nRUN yum install git -y \\\n  && yum clean all && rm -rf /var/cache/yum\n\n# install cmake\nRUN wget https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_0VERSION}-linux-x86_64.tar.gz \\\n  && tar -xvf cmake-${CMAKE_0VERSION}-linux-x86_64.tar.gz \\\n  && cd cmake-${CMAKE_0VERSION}-linux-x86_64 \\\n  && cp -rf * /usr/local/ \\\n  && cd .. && rm -rf cmake-${CMAKE_0VERSION}-linux-x86_64.tar.gz\n\n# install grpc. If planning to upgrade, make sure sed command works\nRUN git clone https://github.com/grpc/grpc \\\n  && cd grpc \\\n  && git checkout tags/v${GRPC_VERSION} -b v${GRPC_VERSION} \\\n  && git submodule update --init \\\n  && sed -i \"s/target_link_libraries(bssl ssl crypto)/target_link_libraries(bssl ssl crypto rt)/g\" third_party/boringssl-with-bazel/CMakeLists.txt \\\n  && mkdir -p cmake/build \\\n  && cd cmake/build \\\n  && cmake ../.. -DgRPC_INSTALL=ON -DCMAKE_BUILD_TYPE=Release -DgRPC_ABSL_PROVIDER=module -DgRPC_CARES_PROVIDER=module -DgRPC_PROTOBUF_PROVIDER=module -DgRPC_RE2_PROVIDER=module -DgRPC_SSL_PROVIDER=module -DgRPC_ZLIB_PROVIDER=module \\\n  && make \\\n  && make install \\\n  && cd ../../..\n\n# Create dependencies folder to store all dependencies.\nRUN mkdir -p dependencies\n\n# install boost version\nRUN wget https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/${BOOST_FILENAME}_rc1.tar.gz \\\n    && tar -xvf ${BOOST_FILENAME}_rc1.tar.gz \\\n    && cd ${BOOST_FILENAME} \\\n    && ./bootstrap.sh --with-libraries=filesystem,system --prefix=/dependencies/boost/${BOOST_VERSION}/ \\\n    && ./b2 install define=BOOST_ERROR_CODE_HEADER_ONLY link=static threading=multi cxxflags=\"-fvisibility=hidden -fPIC\" cflags=\"-fvisibility=hidden -fPIC\" \\\n    && cd .. && rm -rf ${BOOST_FILENAME} && rm ${BOOST_FILENAME}_rc1.tar.gz\n\n#install Apr\nRUN mkdir -p dependencies/apr/${APR_VERSION} \\\n    && wget https://dlcdn.apache.org//apr/apr-${APR_VERSION}.tar.gz --no-check-certificate \\\n    && tar -xf apr-${APR_VERSION}.tar.gz \\\n    && cd apr-${APR_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/dependencies/apr/${APR_VERSION} --enable-static=yes --enable-shared=no --with-pic && echo $? \\\n    && make -j 6 \\\n    && make install \\\n    && cd ../ && rm -rf apr-${APR_VERSION} && rm -rf apr-${APR_VERSION}.tar.gz\n\n# install libexpat\nRUN mkdir -p dependencies/expat/${EXPAT_VERSION} \\\n    && wget https://github.com/libexpat/libexpat/releases/download/${EXPAT_RVERSION}/expat-${EXPAT_VERSION}.tar.gz --no-check-certificate \\\n    && tar -xf expat-${EXPAT_VERSION}.tar.gz \\\n    && cd expat-${EXPAT_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/dependencies/expat/${EXPAT_VERSION} --enable-static=yes --enable-shared=no --with-pic && echo $? \\\n    && make -j 6 \\\n    && make install \\\n    && cd ../ && rm -rf expat-${EXPAT_VERSION} && rm -rf expat-${EXPAT_VERSION}.tar.gz\n\n# install Apr-util\nRUN mkdir -p dependencies/apr-util/${APRUTIL_VERSION} \\\n    && wget https://dlcdn.apache.org//apr/apr-util-${APRUTIL_VERSION}.tar.gz --no-check-certificate \\\n    && tar -xf apr-util-${APRUTIL_VERSION}.tar.gz \\\n    && cd apr-util-${APRUTIL_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/dependencies/apr-util/${APRUTIL_VERSION} --enable-static=yes --enable-shared=no --with-pic --with-apr=/dependencies/apr/${APR_VERSION} --with-expat=/dependencies/expat/${EXPAT_VERSION} && echo $? \\\n    && make -j 6 \\\n    && make install \\\n    && cd ../ && rm -rf apr-util-${APRUTIL_VERSION} && rm -rf apr-util-${APRUTIL_VERSION}.tar.gz\n\n# install m4\nRUN yum install m4 -y && rm -rf /var/cache/yum\n\n# install autoconf\nRUN wget --no-check-certificate https://ftp.gnu.org/gnu/autoconf/autoconf-${AUTOCONF_VERSION}.tar.gz \\\n    && tar xzf autoconf-${AUTOCONF_VERSION}.tar.gz  \\\n    && cd autoconf-${AUTOCONF_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/ && make -j && make install && autoconf -V \\\n    && cd .. && rm -rf autoconf-${AUTOCONF_VERSION}.tar.gz\n\n# install automake\nRUN wget --no-check-certificate https://ftp.gnu.org/gnu/automake/automake-${AUTOMAKE_VERSION}.tar.gz \\\n    && tar xzf automake-${AUTOMAKE_VERSION}.tar.gz \\\n    && cd automake-${AUTOMAKE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --libdir=/usr/lib64 \\\n    && make -j && make install \\\n    && automake --version \\\n    && cd .. && rm -rf automake-${AUTOMAKE_VERSION}.tar.gz\n\n# install libtool\nRUN wget --no-check-certificate https://ftpmirror.gnu.org/libtool/libtool-${LIBTOOL_VERSION}.tar.gz \\\n    && tar xzf libtool-${LIBTOOL_VERSION}.tar.gz \\\n    && cd libtool-${LIBTOOL_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr \\\n    && make -j 6 \\\n    && make install \\\n    && libtool --version \\\n    && cd .. && rm -rf libtool--${LIBTOOL_VERSION}.tar.gz\n\n#install log4cxx\nRUN mkdir -p dependencies/apache-log4cxx/-${LOG4CXX_VERSION} \\\n    && wget https://archive.apache.org/dist/logging/log4cxx/${LOG4CXX_VERSION}/apache-log4cxx-${LOG4CXX_VERSION}.tar.gz --no-check-certificate \\\n    && tar -xf apache-log4cxx-${LOG4CXX_VERSION}.tar.gz \\\n    && cd apache-log4cxx-${LOG4CXX_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/dependencies/apache-log4cxx/${LOG4CXX_VERSION}/ --enable-static=yes --enable-shared=no --with-pic --with-apr=/dependencies/apr/${APR_VERSION}/ --with-apr-util=/dependencies/apr-util/${APRUTIL_VERSION}/ && echo $? \\\n    && make -j 6; echo 0 \\\n    && automake --add-missing \\\n    && make install \\\n    && cd .. && rm -rf apache-log4cxx-${LOG4CXX_VERSION}.tar.gz && rm -rf apache-log4cxx-${LOG4CXX_VERSION}\n\n# install opentelemetry\nRUN mkdir -p dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib \\\n    && mkdir -p dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/include \\\n    && git clone https://github.com/open-telemetry/opentelemetry-cpp \\\n    && cd opentelemetry-cpp/ \\\n    && git checkout tags/v${OPENTELEMETRY_VERSION} -b v${OPENTELEMETRY_VERSION} \\\n    && git submodule update --init --recursive \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_TESTING=OFF -DBUILD_SHARED_LIBS=ON -DWITH_OTLP=ON -DCMAKE_INSTALL_PREFIX=/dependencies/opentelemetry/${OPENTELEMETRY_VERSION} \\\n    && cmake --build . --target all \\\n    && cd .. \\\n    && find . -name \"*.so\" -type f -exec cp {} /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib/ \\; \\\n    && cp build/libopentelemetry_proto.a /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib \\\n    && cp -r api/include/ /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/ \\\n    && for dir in exporters/*; do if [ -d \"$dir\" ]; then cp -rf \"$dir/include\" /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/; fi; done \\\n    && cp -r sdk/include/ /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/ \\\n    && cp -r build/generated/third_party/opentelemetry-proto/opentelemetry/proto/ /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/include/opentelemetry/ \\\n    && cd .. && rm -rf opentelemetry-cpp\n\n# install googletest\nRUN mkdir -p dependencies/googletest/${GTEST_VERSION}/ \\\n    && wget https://github.com/google/googletest/archive/refs/tags/release-${GTEST_VERSION}.tar.gz --no-check-certificate \\\n    && tar -xf release-${GTEST_VERSION}.tar.gz \\\n    && cd googletest-release-${GTEST_VERSION}/  \\\n    && mkdir build && cd build \\\n    && cmake .. -DCMAKE_INSTALL_PREFIX=/dependencies/googletest/${GTEST_VERSION}/ \\\n    && make \\\n    && make install \\\n    && cd ../.. && rm -rf release-${GTEST_VERSION}.tar.gz && rm -rf googletest-release-${GTEST_VERSION}/\n\n# install pcre\nRUN mkdir -p dependencies/pcre/${PCRE_VERSION}/ \\\n    && wget https://ftp.exim.org/pub/pcre/pcre-${PCRE_VERSION}.tar.gz --no-check-certificate \\\n    && tar -xvf pcre-${PCRE_VERSION}.tar.gz \\\n    && cd pcre-${PCRE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/dependencies/pcre/${PCRE_VERSION} --enable-jit \\\n    && make && make install \\\n    && cd .. && rm -rf ${PCRE_VERSION}.tar.gz && rm -rf pcre-${PCRE_VERSION}\n\n#Installing Apache and apr source code\nRUN mkdir build-dependencies \\\n    && wget --no-check-certificate https://archive.apache.org/dist/apr/apr-${APR_VERSION}.tar.gz \\\n    && tar -xf apr-${APR_VERSION}.tar.gz \\\n    && mv -f apr-${APR_VERSION} build-dependencies \\\n    && wget --no-check-certificate https://archive.apache.org/dist/apr/apr-util-${APRUTIL_VERSION}.tar.gz \\\n    && tar -xf apr-util-${APRUTIL_VERSION}.tar.gz \\\n    && mv -f apr-util-${APRUTIL_VERSION} build-dependencies \\\n    && wget --no-check-certificate https://archive.apache.org/dist/httpd/httpd-2.2.31.tar.gz \\\n    && tar -xf httpd-2.2.31.tar.gz \\\n    && mv -f httpd-2.2.31 build-dependencies \\\n    && wget --no-check-certificate https://archive.apache.org/dist/httpd/httpd-2.4.23.tar.gz \\\n    && tar -xf httpd-2.4.23.tar.gz \\\n    && mv -f httpd-2.4.23 build-dependencies && rm apr-${APR_VERSION}.tar.gz\n\n# install nginx\nRUN wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \\\n    && tar -xvf nginx-${NGINX_VERSION}.tar.gz -C /build-dependencies \\\n    && rm -rf nginx-${NGINX_VERSION}.tar.gz\n\n# Build Webserver Module\nCOPY . /otel-webserver-module\n\nRUN cp -r /dependencies /otel-webserver-module/ \\\n    && cp -r /build-dependencies /otel-webserver-module/ \\\n    && cd otel-webserver-module \\\n    && ./gradlew assembleApacheModule\n\n# install webserver module\nRUN cd /otel-webserver-module/build \\\n    && tar -xf opentelemetry-webserver-sdk-x64-linux.tgz \\\n    && mv -f opentelemetry-webserver-sdk /opt/ \\\n    && cd ../ \\\n    && cp opentelemetry_module.conf /etc/httpd/conf/ \\\n    && echo 'Include conf/opentelemetry_module.conf' >> /etc/httpd/conf/httpd.conf \\\n    && cd /opt/opentelemetry-webserver-sdk \\\n    && ./install.sh \\\n    && cd / && rm opentelemetry-webserver-sdk-x64-linux.tgz\n\n# Remove unwanted files\nRUN rm -rf grpc && rm -rf autoconf-${AUTOCONF_VERSION} && rm -rf automake-${AUTOMAKE_VERSION} && rm -rf cmake-${CMAKE_VERSION}-linux-x86_64 \\\n    && rm -rf libtool-${LIBTOOL_VERSION} && rm -rf Python-${PYTHON_VERSION} \\\n    && rm -f apr-${APR_VERSION}.tar.gz && rm -f apr-util-${APRUTIL_VERSION}.tar.gz \\\n    && rm -f httpd-2.2.31.tar.gz && rm -f httpd-2.4.23.tar.gz\n\nCOPY entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"entrypoint.sh\"]\n"
}