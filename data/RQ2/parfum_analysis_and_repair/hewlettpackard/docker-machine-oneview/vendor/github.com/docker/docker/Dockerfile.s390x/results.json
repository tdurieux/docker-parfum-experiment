{
  "startTime": 1674221156512,
  "endTime": 1674221158286,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 2,
        "columnEnd": 123
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 48,
        "columnStart": 22,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 2,
        "columnEnd": 124
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 27,
        "columnEnd": 36
      }
    }
  ],
  "repairedDockerfile": "# This file describes the standard way to build Docker on s390x, using docker\n#\n# Usage:\n#\n# # Assemble the full dev environment. This is slow the first time.\n# docker build -t docker -f Dockerfile.s390x .\n#\n# # Mount your source in an interactive container for quick testing:\n# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n# # Run the test suite:\n# docker run --privileged docker hack/make.sh test\n#\n# Note: AppArmor used to mess with privileged mode, but this is no longer\n# the case. Therefore, you don't have to disable it anymore.\n#\n\nFROM s390x/gcc:6.1\n\n# Packaged dependencies\nRUN apt-get update && apt-get install -y \\\n\tapparmor \\\n\taufs-tools \\\n\tautomake \\\n\tbash-completion \\\n\tbtrfs-tools \\\n\tbuild-essential \\\n\tcreaterepo \\\n\tcurl \\\n\tdpkg-sig \\\n\tgit \\\n\tiptables \\\n\tjq \\\n\tnet-tools \\\n\tlibapparmor-dev \\\n\tlibcap-dev \\\n\tlibltdl-dev \\\n\tlibsqlite3-dev \\\n\tlibsystemd-journal-dev \\\n\tlibtool \\\n\tmercurial \\\n\tpkg-config \\\n\tpython-dev \\\n\tpython-mock \\\n\tpython-pip \\\n\tpython-websocket \\\n\txfsprogs \\\n\ttar \\\n\t--no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# install seccomp: the version shipped in jessie is too old\nENV SECCOMP_VERSION 2.3.1\nRUN set -x \\\n\t&& export SECCOMP_PATH=\"$(mktemp -d)\" \\\n\t&& curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" \\\n\t\t| tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n\t&& ( cd \"$SECCOMP_PATH\" \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n\t\t&& make \\\n\t\t&& make install \\\n\t\t&& ldconfig) \\\n\n\t&& rm -rf \"$SECCOMP_PATH\"\n\n# Get lvm2 source for compiling statically\nENV LVM2_VERSION 2.02.103\nRUN mkdir -p /usr/local/lvm2 \\\n\t&& curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" \\\n\t\t| tar -xzC /usr/local/lvm2 --strip-components=1\n# see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n\n# fix platform enablement in lvm2 to support s390x properly\nRUN set -e \\\n\t&& for f in config.guessconfig.sub; do \\\n\n\t\tcurl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\"; \\\n\tdone\n# \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n\n# Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n\t&& ./configure \\\n\t\t--build=\"$(gcc -print-multiarch)\" \\\n\t\t--enable-static_link \\\n\t&& make device-mapper \\\n\t&& make install_device-mapper\n# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n\n# Note: Go comes from the base image (gccgo, specifically)\n# We can't compile Go proper because s390x isn't an officially supported architecture yet.\n\nENV PATH /go/bin:$PATH\nENV GOPATH /go:/go/src/github.com/docker/docker/vendor\n\n# This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n# ENV GOFMT_VERSION 1.3.3\n# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n\n# TODO update this sha when we upgrade to Go 1.5+\nENV GO_TOOLS_COMMIT 069d2f3bcb68257b627205f0486d6cc69a231ff9\n# Grab Go's cover tool for dead-simple code coverage testing\n# Grab Go's vet tool for examining go code to find suspicious constructs\n# and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n\t&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \\\n\t&& go install -v golang.org/x/tools/cmd/cover \\\n\t&& go install -v golang.org/x/tools/cmd/vet\n# Grab Go's lint tool\nENV GO_LINT_COMMIT f42f5c1c440621302702cb0741e9d2ca547ae80f\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n\t&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \\\n\t&& go install -v github.com/golang/lint/golint\n\n\n# Install two versions of the registry. The first is an older version that\n# only supports schema1 manifests. The second is a newer version that supports\n# both. This allows integration-cli tests to cover push/pull with both schema1\n# and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd\nENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n\t&& (cd \"$GOPATH/src/github.com/docker/distribution\" && git checkout -q \"$REGISTRY_COMMIT\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n\t&& (cd \"$GOPATH/src/github.com/docker/distribution\" && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n\t&& rm -rf \"$GOPATH\"\n\n# Install notary and notary-server\n#\n# Note: We have to explicitly set GO15VENDOREXPERIMENT=0 because gccgo does not\n# support vendoring: https://github.com/golang/go/issues/15628\nENV NOTARY_VERSION v0.3.0\nRUN set -x \\\n\t&& export GO15VENDOREXPERIMENT=0 \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n\t&& (cd \"$GOPATH/src/github.com/docker/notary\" && git checkout -q \"$NOTARY_VERSION\" && ln -s . vendor/src) \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n\t&& rm -rf \"$GOPATH\"\n\n# Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n\t&& cd /docker-py \\\n\t&& git checkout -q $DOCKER_PY_COMMIT \\\n\t&& pip install --no-cache-dir -r test-requirements.txt\n\n# Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n\n# Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\n\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS apparmor selinux seccomp\n\n# Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n\n# Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n\n# Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \\\n\ts390x/buildpack-deps:jessie@sha256:4d1381224acaca6c4bfe3604de3af6972083a8558a99672cb6989c7541780099 \\\n\ts390x/busybox:latest@sha256:dd61522c983884a66ed72d60301925889028c6d2d5e0220a8fe1d9b4c6a4f01b \\\n\ts390x/debian:jessie@sha256:b74c863400909eff3c5e196cac9bfd1f6333ce47aae6a38398d87d5875da170a \\\n\ts390x/hello-world:latest@sha256:780d80b3a7677c3788c0d5cd9168281320c8d4a6d9183892d8ee5cdd610f5699\n# see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n\n# Download man page generator\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n\t&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n\t&& go get -v -d github.com/cpuguy83/go-md2man \\\n\t&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n\t&& rm -rf \"$GOPATH\"\n\n# Download toml validator\nENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n\t&& (cd \"$GOPATH/src/github.com/BurntSushi/toml\" && git checkout -q \"$TOMLV_COMMIT\") \\\n\t&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n\t&& rm -rf \"$GOPATH\"\n\n# Install runc\nENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n\t&& cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n\t&& git checkout -q \"$RUNC_COMMIT\" \\\n\t&& make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n\t&& cp runc /usr/local/bin/docker-runc \\\n\t&& rm -rf \"$GOPATH\"\n\n# Install containerd\nENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n\t&& cd \"$GOPATH/src/github.com/docker/containerd\" \\\n\t&& git checkout -q \"$CONTAINERD_COMMIT\" \\\n\t&& make static \\\n\t&& cp bin/containerd /usr/local/bin/docker-containerd \\\n\t&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n\t&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \\\n\t&& rm -rf \"$GOPATH\"\n\n# Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n\n# Upload docker source\nCOPY . /go/src/github.com/docker/docker\n"
}