{
  "startTime": 1674251185937,
  "endTime": 1674251187273,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python\n\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        cron \\\n        ffmpeg \\\n        ghostscript \\\n        imagemagick \\\n        mime-support \\\n        netcat \\\n        openssh-client \\\n        rsync \\\n        sshpass \\\n        util-linux \\\n        wget \\\n        libpq-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# cron: To run the backups on a schedule\n# ffmpeg: To make image and video previews\n# ghostscript: To make PDF previews\n# mime-support: To populate the list of mime types, and figure out file types\n# netcat: To wait for the DB before starting Django\n# openssh-client: To copy SSH keys to sources\n# rsync: To backup files\n# sshpass: To connect to ssh with a password without user interaction\n# util-linux: For flock, which prevents a job from running multiple instances at once\n# wget: To download more mimetypes\n\n# https://stackoverflow.com/questions/52998331/imagemagick-security-policy-pdf-blocking-conversion\n# https://askubuntu.com/questions/1181762/imagemagickconvert-im6-q16-no-images-defined\n# These solutions do not work. Removing the file entirely does.\n# RUN sed -i_bak 's/rights=\"none\" pattern=\"PDF\"/rights=\"read | write\" pattern=\"PDF\"/' /etc/ImageMagick-6/policy.xml\nRUN rm /etc/ImageMagick-6/policy.xml\n\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Get a longer list of mimetypes. The default IANA list is missing important ones like GPX\nRUN wget https://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/conf/mime.types -O /usr/local/etc/mime.types\n\nCOPY ssh_config /etc/ssh/ssh_config\nCOPY crontab /etc/timeline-crontab\n\nRUN mkdir -p /data/mounts\n\n# Start the backend\nWORKDIR /usr/src/app\nEXPOSE 80\nCOPY ./docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]"
}