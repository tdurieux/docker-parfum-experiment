{
  "startTime": 1674253810210,
  "endTime": 1674253811628,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-base-ubuntu18.04\nUSER root\nRUN apt update && \\\n    apt upgrade -y && \\\n    apt install --no-install-recommends -y python3-pip && rm -rf /var/lib/apt/lists/*;\nRUN pip3 install --no-cache-dir torch torchvision\nCMD python3\n#FROM anibali/pytorch:cuda-10.0\n#FROM ubuntu:latest\n\nRUN apt-get install --no-install-recommends -y \\\n\t\tpython3-dev \\\n        python3-gi \\\n        python3-gi-cairo \\\n\t\tpython3-pip \\\n\t\tlibcairo2-dev \\\n\t\tlibgirepository1.0-dev \\\n\t\tgcc \\\n\t\tpkg-config \\\n\t\tpython3-dev \\\n\t\tgir1.2-gtk-3.0 \\\n        libopenmpi-dev \\\n        python3-mpi4py \\\n        git \\\n        swig3.0 \\\n        python3-cairo-dev \\\n        libcanberra-gtk3-module \\\n        libsm6 && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir pycairo \\\n\t\tPyGObject \\\n        matplotlib \\\n\t\timutils \\\n\t\tgraphviz \\\n\t\tvisdom \\\n        tensorflow \\\n        torchsummary\n\n#WORKDIR /usr/src/app\n\nRUN git clone https://github.com/openai/baselines\nWORKDIR ./baselines\nRUN pip3 install --no-cache-dir -e .\n\nWORKDIR /usr/src/app\nCOPY . ./\nRUN mkdir gym_city/envs/micropolis/MicropolisCore/src/TileEngine/objs; exit 0\nRUN mkdir gym_city/envs/micropolis/MicropolisCore/src/CellEngine/objs; exit 0\nRUN mkdir gym_city/envs/micropolis/MicropolisCore/src/MicropolisEngine/objs; exit 0\nRUN make ; exit 0\nRUN make install; exit 0\nCMD python3 -c 'import torch; print(torch.cuda.is_available())'\nCMD python3 -c 'import multiprocessing; print(multiprocessing.cpu_count())'\nRUN mkdir trained_models;\nCOPY setup.py README.md ./\nRUN pip3 install --no-cache-dir -e .\n#COPY algo game_of_life ./\n#COPY *.py ./\n\n#RUN export GDK_SUNCHRONIZE=1\n#RUN export NO_AT_BRIDGE=1\n#RUN dbus-uuidgen > /var/lib/dbus/machine-id\n\nCMD python3 main.py \\\n    --experiment DockerTest \\ \n    --render \\\n    --overwrite\n"
}