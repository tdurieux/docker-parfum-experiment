{
  "startTime": 1674221014029,
  "endTime": 1674221014961,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14.8.0-stretch\n\nRUN mkdir -p /usr/src/app && \\\n    chown node:node /usr/src/app && rm -rf /usr/src/app\n\nUSER node:node\n\nWORKDIR /usr/src/app\n\nCOPY --chown=node:node . .\n\nRUN npm install && \\\n    npm install redis@0.8.1 && \\\n    npm install pg@4.1.1 && \\\n    npm install memcached@2.2.2 && \\\n    npm install aws-sdk@2.738.0 && \\\n    npm install rethinkdbdash@2.3.31 && npm cache clean --force;\n\nENV STORAGE_TYPE=memcached \\\n    STORAGE_HOST=127.0.0.1 \\\n    STORAGE_PORT=11211\\\n    STORAGE_EXPIRE_SECONDS=2592000\\\n    STORAGE_DB=2 \\\n    STORAGE_AWS_BUCKET= \\\n    STORAGE_AWS_REGION= \\\n    STORAGE_USENAME= \\\n    STORAGE_PASSWORD= \\\n    STORAGE_FILEPATH=\n\nENV LOGGING_LEVEL=verbose \\\n    LOGGING_TYPE=Console \\\n    LOGGING_COLORIZE=true\n\nENV HOST=0.0.0.0\\\n    PORT=7777\\\n    KEY_LENGTH=10\\\n    MAX_LENGTH=400000\\\n    STATIC_MAX_AGE=86400\\\n    RECOMPRESS_STATIC_ASSETS=true\n\nENV KEYGENERATOR_TYPE=phonetic \\\n    KEYGENERATOR_KEYSPACE=\n\nENV RATELIMITS_NORMAL_TOTAL_REQUESTS=500\\\n    RATELIMITS_NORMAL_EVERY_MILLISECONDS=60000 \\\n    RATELIMITS_WHITELIST_TOTAL_REQUESTS= \\\n    RATELIMITS_WHITELIST_EVERY_MILLISECONDS=  \\\n    # comma separated list for the whitelisted \\\n    RATELIMITS_WHITELIST=example1.whitelist,example2.whitelist \\\n    \\\n    RATELIMITS_BLACKLIST_TOTAL_REQUESTS= \\\n    RATELIMITS_BLACKLIST_EVERY_MILLISECONDS= \\\n    # comma separated list for the blacklisted \\\n    RATELIMITS_BLACKLIST=example1.blacklist,example2.blacklist\nENV DOCUMENTS=about=./about.md\n\nEXPOSE ${PORT}\nSTOPSIGNAL SIGINT\nENTRYPOINT [ \"bash\", \"docker-entrypoint.sh\" ]\n\nHEALTHCHECK --interval=30s --timeout=30s --start-period=5s \\\n    --retries=3 CMD [ \"sh\", \"-c\", \"echo -n 'curl localhost:7777... '; \\\n    (\\\n        curl -sf localhost:7777 > /dev/null\\\n    ) && echo OK || (\\\n        echo Fail && exit 2\\\n    )\"]\nCMD [\"npm\", \"start\"]\n"
}