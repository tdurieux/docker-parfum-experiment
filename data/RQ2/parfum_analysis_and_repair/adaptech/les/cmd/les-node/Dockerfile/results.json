{
  "startTime": 1674215346693,
  "endTime": 1674215347675,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:latest AS build\n\n# without this 'go get' fails with \"go get: no install location for directory /go/src outside GOPATH\"\nENV GOBIN /go/bin\n\nWORKDIR /go/src\n\nCOPY *.go ./\n\nRUN go get\n\n# because of DNS lookups and `os/user` it's quite complicated to do a statically-linked binary :(\nRUN go build -o ../bin/les-node\n\n\n# ---------------------------\n\n# if there's a way to support `libc` and `os/user` from `scratch` or `alpine` I haven't found it :(\nFROM ubuntu:latest\n\n# this avoids \"x509: failed to load system roots and no roots provided\"\nRUN apt-get update && apt-get install --no-install-recommends -y ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p /go/bin\nCOPY --from=build /go/bin/les-node /go/bin/\n\nWORKDIR /les\n\nRUN groupadd --gid 1000 les \\\n  && useradd --uid 1000 --gid les --shell /bin/bash --create-home les\n\nUSER les\n\nENTRYPOINT [\"/go/bin/les-node\"]\n\n"
}