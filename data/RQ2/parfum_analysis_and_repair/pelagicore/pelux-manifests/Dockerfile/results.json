{
  "startTime": 1674221098257,
  "endTime": 1674221099727,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 106,
        "columnEnd": 132
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 106,
        "columnEnd": 132
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 106,
        "columnEnd": 132
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 109,
        "columnEnd": 159
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nLABEL description=\"PELUX Yocto build environment\"\n\n# Enables us to overwrite the user and group ID for the yoctouser. See below\nARG userid=1000\nARG groupid=1000\n\nUSER root\n\n# Install dependencies in one command to avoid potential use of previous cache\n# like explained here: https://stackoverflow.com/a/37727984\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        bc \\\n        build-essential \\\n        chrpath \\\n        coreutils \\\n        cpio \\\n        curl \\\n        cvs \\\n        debianutils \\\n        diffstat \\\n        g++-multilib \\\n        gawk \\\n        gcc-multilib \\\n        git-core \\\n        graphviz \\\n        help2man \\\n        iptables \\\n        iputils-ping \\\n        libegl1-mesa \\\n        libfdt1 \\\n        libsdl1.2-dev \\\n        libxml2-utils \\\n        locales \\\n        m4 \\\n        openssh-server \\\n        python \\\n        python-pysqlite2 \\\n        python3 \\\n        python3-git \\\n        python3-jinja2 \\\n        python3-pexpect \\\n        python3-pip \\\n        qemu-user \\\n        repo \\\n        rsync \\\n        screen \\\n        socat \\\n        subversion \\\n        sudo \\\n        sysstat \\\n        texinfo \\\n        tmux \\\n        unzip \\\n        wget \\\n        xz-utils && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get clean\n\n# For Yocto bitbake -c testimage XML reporting\nRUN pip3 install --no-cache-dir unittest-xml-reporting\n\n# For git-lfs\n# The downloaded script is needed since git-lfs is not available per default for Ubuntu 16.04\nRUN curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash && sudo apt-get install --no-install-recommends -y git-lfs && rm -rf /var/lib/apt/lists/*;\n\n# Remove all apt lists to avoid build caching\nRUN rm -rf /var/lib/apt/lists/*\n\n# en_US.utf8 is required by Yocto sanity check\nRUN /usr/sbin/locale-gen en_US.UTF-8\nRUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nRUN echo 'export LC_ALL=\"en_US.UTF-8\"' >> /etc/profile\nENV LANG en_US.utf8\n\nRUN useradd -U -m yoctouser\n\n# Make sure the user/groupID matches the UID/GID given to Docker. This is so that mounted\n# dirs will get the correct permissions\nRUN usermod --uid $userid yoctouser\nRUN groupmod --gid $groupid yoctouser\nRUN echo 'yoctouser:yoctouser' | chpasswd\nRUN echo 'yoctouser ALL=(ALL) NOPASSWD:SETENV: ALL' > /etc/sudoers.d/yoctouser\n\n# Copy cookbook\nADD --chown=yoctouser:yoctouser cookbook /tmp/cookbook/\n\nUSER yoctouser\nWORKDIR /home/yoctouser\n\n# Script which allows to pass containers CMD as an argument to timeout command\n# in case we need redefine entrypoint '--entrypoint' key can be used durring container start\nRUN echo \"#!/usr/bin/env bash\" >> /home/yoctouser/docker-ep.sh && \\\n    echo 'exec  timeout --signal=SIGKILL 21600 \"$@\"' >> /home/yoctouser/docker-ep.sh && \\\n    chmod +x /home/yoctouser/docker-ep.sh\nENTRYPOINT [\"/home/yoctouser/docker-ep.sh\"]\n\n"
}