{
  "startTime": 1674217720764,
  "endTime": 1674217721941,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 32,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# SPDX-License-Identifier: BSD-3-Clause\n#\n# Authors: Alexander Jung <alexander.jung@neclab.eu>\n#\n# Copyright (c) 2020, NEC Europe Ltd., NEC Corporation. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n# 3. Neither the name of the copyright holder nor the names of its\n#    contributors may be used to endorse or promote products derived from\n#    this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nFROM alpine:3.10 AS linuxk-build\n\nLABEL MAINTAINER=\"Alexander Jung <a.jung@lancs.ac.uk>\"\n\nARG LINUXK_VERSION\nARG EXTRA\nARG DEBUG\nARG UK_ARCH\n\nRUN set -x; \\\n    apk --no-cache add \\\n        argp-standalone \\\n        automake \\\n        bash \\\n        bc \\\n        binutils-dev \\\n        bison \\\n        build-base \\\n        curl \\\n        diffutils \\\n        flex \\\n        git \\\n        gmp-dev \\\n        gnupg \\\n        installkernel \\\n        iucode-tool \\\n        kmod \\\n        elfutils-dev \\\n        linux-headers \\\n        mpc1-dev \\\n        mpfr-dev \\\n        ncurses-dev \\\n        openssl-dev \\\n        patch \\\n        rsync \\\n        sed \\\n        squashfs-tools \\\n        tar \\\n        xz \\\n        xz-dev \\\n        zlib-dev\n\n# libunwind-dev pkg is missed from arm64 now, below statement will be removed if the pkg is available.\nRUN [ ${UK_ARCH} == x86_64 ] && apk add --no-cache libunwind-dev || true\n\nCOPY keys.asc /\n\n# Download and verify kernel\n# PGP keys: 589DA6B1 (greg@kroah.com)\n#           6092693E (autosigner@kernel.org)\n#           00411886 (torvalds@linux-foundation.org)\nRUN set -ex; \\\n    KERNEL_MAJOR=$(echo ${LINUXK_VERSION} | cut -d . -f 1); \\\n    KERNEL_MAJOR=v${KERNEL_MAJOR}.x; \\\n    KERNEL_SERIES=$(echo ${LINUXK_VERSION} | cut -d . -f 1-2); \\\n    KERNEL_SOURCE=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/linux-${LINUXK_VERSION}.tar.xz; \\\n    KERNEL_SHA256_SUMS=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/sha256sums.asc; \\\n    KERNEL_PGP2_SIGN=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/linux-${LINUXK_VERSION}.tar.sign; \\\n    curl -fsSLO ${KERNEL_SHA256_SUMS}; \\\n    gpg2 -q --import keys.asc; \\\n    gpg2 --verify sha256sums.asc; \\\n    KERNEL_SHA256=$(grep linux-${LINUXK_VERSION}.tar.xz sha256sums.asc | cut -d ' ' -f 1); \\\n    [ -f linux-${LINUXK_VERSION}.tar.xz ] || curl -fsSLO ${KERNEL_SOURCE}; \\\n    echo \"${KERNEL_SHA256}  linux-${LINUXK_VERSION}.tar.xz\" | sha256sum -c -; \\\n    xz -d linux-${LINUXK_VERSION}.tar.xz; \\\n    curl -fsSLO ${KERNEL_PGP2_SIGN}; \\\n    gpg2 --verify linux-${LINUXK_VERSION}.tar.sign linux-${LINUXK_VERSION}.tar; \\\n    cat linux-${LINUXK_VERSION}.tar | tar --absolute-names -x && mv /linux-${LINUXK_VERSION} /linux\n\nRUN mkdir -p /out/src\n\nWORKDIR /tmp\n# Download Intel ucode, create a CPIO archive for it, and keep it in the build context\n# so the firmware can also be referenced with CONFIG_EXTRA_FIRMWARE\nENV UCODE_REPO=https://github.com/intel/Intel-Linux-Processor-Microcode-Data-Files\nENV UCODE_COMMIT=microcode-20191115\nRUN set -ex; \\\n    if [ \"${UK_ARCH}\" == \"x86_64\" ]; then \\\n        git clone ${UCODE_REPO} ucode; \\\n        cd ucode; \\\n        git checkout ${UCODE_COMMIT}; \\\n        iucode_tool --normal-earlyfw --write-earlyfw=/out/intel-ucode.cpio ./intel-ucode; \\\n        cp license /out/intel-ucode-license.txt; \\\n        mkdir -p /lib/firmware; \\\n        cp -rav ./intel-ucode /lib/firmware; \\\n    fi\n\nWORKDIR /linux\n\n# Save kernel source\nRUN tar cJf /out/src/linux.tar.xz /linux\n\n# Kernel config\nRUN set -x; \\\n    case ${UK_ARCH} in \\\n      x86_64) \\\n        KERNEL_DEF_CONF=/linux/arch/x86/configs/x86_64_defconfig; \\\n        ;; \\\n      arm64) \\\n        KERNEL_DEF_CONF=/linux/arch/arm64/configs/defconfig; \\\n        ;; \\\n    esac; \\\n    cp /config-${KERNEL_SERIES}-${UK_ARCH} ${KERNEL_DEF_CONF}; \\\n    if [ -n \"${EXTRA}\" ] && [ -f \"/config-${KERNEL_SERIES}-${UK_ARCH}${EXTRA}\" ]; then \\\n        cat /config-${KERNEL_SERIES}-${UK_ARCH}${EXTRA} >> ${KERNEL_DEF_CONF}; \\\n    fi; \\\n    sed -i \"s/CONFIG_LOCALVERSION=\\\"-unikraft\\\"/CONFIG_LOCALVERSION=\\\"-unikraft${EXTRA}${DEBUG}\\\"/\" ${KERNEL_DEF_CONF}; \\\n    if [ -n \"${DEBUG}\" ]; then \\\n        sed -i 's/CONFIG_PANIC_ON_OOPS=y/# CONFIG_PANIC_ON_OOPS is not set/' ${KERNEL_DEF_CONF}; \\\n        cat /config${DEBUG} >> ${KERNEL_DEF_CONF}; \\\n    fi; \\\n    make defconfig; \\\n    make oldconfig;\n\n# Kernel\nRUN set -x; \\\n    make -j \"$(getconf _NPROCESSORS_ONLN)\" KCFLAGS=\"-fno-pie\"; \\\n    case ${UK_ARCH} in \\\n      x86_64) \\\n        cp arch/x86_64/boot/bzImage /out/kernel; \\\n        ;; \\\n      arm64) \\\n        cp arch/arm64/boot/Image.gz /out/kernel; \\\n        ;; \\\n    esac; \\\n    cp System.map /out; \\\n    ([ -n \"${DEBUG}\" ] && cp vmlinux /out || true)\n\n# Modules and Device Tree binaries\nRUN make INSTALL_MOD_PATH=/tmp/kernel-modules modules_install; \\\n    ( DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)); \\\n      cd /tmp/kernel-modules/lib/modules/$DVER &&; \\\n      rm build source; \\\n      ln -s /usr/src/linux-headers-$DVER build ); \\\n    case ${UK_ARCH} in \\\n      aarch64) \\\n        make INSTALL_DTBS_PATH=/tmp/kernel-modules/boot/dtb dtbs_install; \\\n        ;; \\\n    esac; \\\n        ( cd /tmp/kernel-modules && tar cf /out/kernel.tar . )\n\n# Headers (userspace API)\nRUN mkdir -p /tmp/kernel-headers/usr; \\\n    make INSTALL_HDR_PATH=/tmp/kernel-headers/usr headers_install; \\\n    ( cd /tmp/kernel-headers && tar cf /out/kernel-headers.tar usr )\n\n# Headers (kernel development)\nRUN DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)); \\\n    dir=/tmp/usr/src/linux-headers-$DVER; \\\n    mkdir -p $dir; \\\n    cp /linux/.config $dir; \\\n    cp /linux/Module.symvers $dir; \\\n    find . -path './include/*' -prune -o \\\n           -path './arch/*/include' -prune -o \\\n           -path './scripts/*' -prune -o \\\n           -type f \\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \\\n                      -name '*.lds' -o -name '*.pl' -o -name '*.sh' -o \\\n                      -name 'objtool' -o -name 'fixdep' -o -name 'randomize_layout_seed.h' \\) | \\\n    tar cf - -T - | (cd $dir; tar xf -); \\\n    ( cd /tmp && tar cf /out/kernel-dev.tar usr/src )\n\nRUN printf \"KERNEL_SOURCE=${KERNEL_SOURCE}\\n\" > /out/kernel-source-info\n\nFROM scratch AS linux\nENTRYPOINT []\nCMD []\nWORKDIR /\nCOPY --from=linuxk-build /out/* /\n"
}