{
  "startTime": 1674253664470,
  "endTime": 1674253665445,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# MRIQC Docker Container Image distribution\n#\n# MIT License\n#\n# Copyright (c) 2021 The NiPreps Developers\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n# Use Ubuntu 20.04 LTS\nFROM nipreps/miniconda:py38_1.4.2\n\nARG DEBIAN_FRONTEND=noninteractive\nENV LD_LIBRARY_PATH=\"/usr/lib/x86_64-linux-gnu:${CONDA_PATH}/lib\"\n\n# Install AFNI latest (neurodocker build)\nENV AFNI_DIR=\"/opt/afni\"\nRUN echo \"Downloading AFNI ...\" \\\n    && mkdir -p ${AFNI_DIR} \\\n    && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n    | tar -xz -C ${AFNI_DIR} --strip-components 1\nENV PATH=\"${AFNI_DIR}:$PATH\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_MODELPATH=\"${AFNI_DIR}/models\" \\\n    AFNI_TTATLAS_DATASET=\"${AFNI_DIR}/atlases\" \\\n    AFNI_PLUGINPATH=\"${AFNI_DIR}/plugins\"\n\n# Install AFNI's dependencies\nRUN ${CONDA_PATH}/bin/conda install -c conda-forge -c anaconda \\\n                            gsl                                \\\n                            xorg-libxp                         \\\n                            scipy=1.8                          \\\n    && ${CONDA_PATH}/bin/conda install -c sssdgc png \\\n    && sync \\\n    && ${CONDA_PATH}/bin/conda clean -afy; sync \\\n    && rm -rf ~/.conda ~/.cache/pip/*; sync \\\n    && ln -s ${CONDA_PATH}/lib/libgsl.so.25 /usr/lib/x86_64-linux-gnu/libgsl.so.19 \\\n    && ln -s ${CONDA_PATH}/lib/libgsl.so.25 /usr/lib/x86_64-linux-gnu/libgsl.so.0 \\\n    && ldconfig\n\nRUN apt-get update \\\n && apt-get install -y -q --no-install-recommends     \\\n                    libcurl4-openssl-dev              \\\n                    libgdal-dev                       \\\n                    libgfortran-8-dev                 \\\n                    libgfortran4                      \\\n                    libglw1-mesa                      \\\n                    libgomp1                          \\\n                    libjpeg62                         \\\n                    libnode-dev                       \\\n                    libssl-dev                        \\\n                    libudunits2-dev                   \\\n                    libxm4                            \\\n                    libxml2-dev                       \\\n                    netpbm                            \\\n                    tcsh                              \\\n                    xfonts-base                       \\\n && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && ldconfig\n\n# Installing ANTs 2.3.4 (NeuroDocker build)\nENV ANTSPATH=\"/opt/ants\"\nWORKDIR $ANTSPATH\nRUN curl -f -sSL \"https://dl.dropbox.com/s/gwf51ykkk5bifyj/ants-Linux-centos6_x86_64-v2.3.4.tar.gz\" \\\n    | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=\"$ANTSPATH:$PATH\"\n\n# Install FSL 5.0.11\nRUN curl -f -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.11-centos7_64.tar.gz | tar zxv --no-same-owner -C /opt \\\n    --exclude='fsl/doc' \\\n    --exclude='fsl/refdoc' \\\n    --exclude='fsl/python/oxford_asl' \\\n    --exclude='fsl/data/possum' \\\n    --exclude='fsl/data/first' \\\n    --exclude='fsl/data/mist' \\\n    --exclude='fsl/data/atlases' \\\n    --exclude='fsl/data/xtract_data' \\\n    --exclude='fsl/extras/doc' \\\n    --exclude='fsl/extras/man' \\\n    --exclude='fsl/extras/src' \\\n    --exclude='fsl/src' \\\n    --exclude='fsl/tcl'\n\nENV FSLDIR=\"/opt/fsl\" \\\n    PATH=\"/opt/fsl/bin:$PATH\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    FSLTCLSH=\"/opt/fsl/bin/fsltclsh\" \\\n    FSLWISH=\"/opt/fsl/bin/fslwish\" \\\n    FSLLOCKDIR=\"\" \\\n    FSLMACHINELIST=\"\" \\\n    FSLREMOTECALL=\"\" \\\n    FSLGECUDAQ=\"cuda.q\" \\\n    POSSUMDIR=\"/opt/fsl\" \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/fsl\"\n\n# Unless otherwise specified each process should only use one thread - nipype\n# will handle parallelization\nENV MKL_NUM_THREADS=1 \\\n    OMP_NUM_THREADS=1\n\nCOPY --from=freesurfer/synthstrip@sha256:f19578e5f033f2c707fa66efc8b3e11440569facb46e904b45fd52f1a12beb8b /freesurfer/models/synthstrip.1.pt /opt/freesurfer/models/synthstrip.1.pt\n\nENV FREESURFER_HOME=/opt/freesurfer\n\n# Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users mriqc\nWORKDIR /home/mriqc\nENV HOME=\"/home/mriqc\"\n# Refresh linked libraries\nRUN ldconfig\n# Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\n# Precaching atlases\nRUN python -c \"from templateflow import api as tfapi; \\\n               tfapi.get('MNI152NLin2009cAsym', resolution=[1, 2], suffix=['T1w', 'T2w'], desc=None); \\\n               tfapi.get('MNI152NLin2009cAsym', resolution=[1, 2], suffix='mask',\\\n                         desc=['brain', 'head']); \\\n               tfapi.get('MNI152NLin2009cAsym', resolution=1, suffix='dseg', desc='carpet'); \\\n               tfapi.get('MNI152NLin2009cAsym', resolution=1, suffix='probseg',\\\n                         label=['CSF', 'GM', 'WM']);\\\n               tfapi.get('MNI152NLin2009cAsym', resolution=[1, 2], suffix='boldref')\"\n# Installing MRIQC\nCOPY . /src/mriqc\nARG VERSION\n# Force static versioning within container\nRUN echo \"${VERSION}\" > /src/mriqc/mriqc/VERSION && \\\n    echo \"include mriqc/VERSION\" >> /src/mriqc/MANIFEST.in && \\\n    pip install --no-cache-dir \"/src/mriqc[all]\"\nRUN find $HOME -type d -exec chmod go=u {} + && \\\n    find $HOME -type f -exec chmod go=u {} + && \\\n    rm -rf $HOME/.npm $HOME/.conda $HOME/.empty\n\n# Best practices\nRUN ldconfig\n\nWORKDIR /tmp/\n\n# Run mriqc by default\nENTRYPOINT [\"/opt/conda/bin/mriqc\"]\nARG BUILD_DATE\nARG VCS_REF\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"MRIQC\" \\\n      org.label-schema.description=\"MRIQC - Automated Quality Control and visual reports for Quality Assessment of structural (T1w, T2w) and functional MRI of the brain\" \\\n      org.label-schema.url=\"http://mriqc.readthedocs.io\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/nipreps/mriqc\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"1.0\"\n\n"
}