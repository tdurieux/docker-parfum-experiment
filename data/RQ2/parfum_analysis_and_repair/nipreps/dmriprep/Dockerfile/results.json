{
  "startTime": 1674252312344,
  "endTime": 1674252313396,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 173,
        "lineEnd": 173,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 138
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# dMRIPrep Docker Container Image distribution\n#\n# MIT License\n#\n# Copyright (c) 2021 The NiPreps Developers\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n# Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20201030\n\n# Prepare environment\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    autoconf \\\n                    build-essential \\\n                    bzip2 \\\n                    ca-certificates \\\n                    curl \\\n                    cython3 \\\n                    git \\\n                    libtool \\\n                    lsb-release \\\n                    pkg-config \\\n                    xvfb && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Installing freesurfer\nRUN curl -f -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.1/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.1.tar.gz | tar zxv --no-same-owner -C /opt \\\n    --exclude='freesurfer/diffusion' \\\n    --exclude='freesurfer/docs' \\\n    --exclude='freesurfer/fsfast' \\\n    --exclude='freesurfer/lib/cuda' \\\n    --exclude='freesurfer/lib/qt' \\\n    --exclude='freesurfer/matlab' \\\n    --exclude='freesurfer/mni/share/man' \\\n    --exclude='freesurfer/subjects/fsaverage_sym' \\\n    --exclude='freesurfer/subjects/fsaverage3' \\\n    --exclude='freesurfer/subjects/fsaverage4' \\\n    --exclude='freesurfer/subjects/cvs_avg35' \\\n    --exclude='freesurfer/subjects/cvs_avg35_inMNI152' \\\n    --exclude='freesurfer/subjects/bert' \\\n    --exclude='freesurfer/subjects/lh.EC_average' \\\n    --exclude='freesurfer/subjects/rh.EC_average' \\\n    --exclude='freesurfer/subjects/sample-*.mgz' \\\n    --exclude='freesurfer/subjects/V1_average' \\\n    --exclude='freesurfer/trctrain'\n\nENV FSL_DIR=\"/usr/share/fsl/5.0\" \\\n    OS=\"Linux\" \\\n    FS_OVERRIDE=0 \\\n    FIX_VERTEX_AREA=\"\" \\\n    FSF_OUTPUT_FORMAT=\"nii.gz\" \\\n    FREESURFER_HOME=\"/opt/freesurfer\"\nENV SUBJECTS_DIR=\"$FREESURFER_HOME/subjects\" \\\n    FUNCTIONALS_DIR=\"$FREESURFER_HOME/sessions\" \\\n    MNI_DIR=\"$FREESURFER_HOME/mni\" \\\n    LOCAL_DIR=\"$FREESURFER_HOME/local\" \\\n    MINC_BIN_DIR=\"$FREESURFER_HOME/mni/bin\" \\\n    MINC_LIB_DIR=\"$FREESURFER_HOME/mni/lib\" \\\n    MNI_DATAPATH=\"$FREESURFER_HOME/mni/data\"\nENV PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    MNI_PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    PATH=\"$FREESURFER_HOME/bin:$FSFAST_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH\"\n\n# Pre-cache neurodebian key\nCOPY .docker/neurodebian.gpg /usr/local/etc/neurodebian.gpg\n# Installing Neurodebian packages (FSL, AFNI, git)\nRUN curl -f -sSL \"https://neuro.debian.net/lists/$( lsb_release -c | cut -f2 ).us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list && \\\n    apt-key add /usr/local/etc/neurodebian.gpg && \\\n    (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true)\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    fsl-core=5.0.9-5~nd16.04+1 \\\n                    fsl-mni152-templates=5.0.7-2 \\\n                    afni=16.2.07~dfsg.1-5~nd16.04+1 \\\n                    convert3d && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n\nCOPY .docker/fsl-6.0/bin/topup /usr/share/fsl/5.0/bin/topup\nCOPY .docker/fsl-6.0/bin/imglob /usr/share/fsl/5.0/bin/imglob\nCOPY .docker/fsl-6.0/bin/eddy_openmp  /usr/lib/fsl/5.0/eddy_openmp\nCOPY .docker/fsl-6.0/lib/* /usr/lib/fsl/5.0/\n\n# Installing ANTs 2.3.3 (NeuroDocker build)\n# Note: the URL says 2.3.4 but it is actually 2.3.3\nENV ANTSPATH=/usr/lib/ants\nRUN mkdir -p $ANTSPATH && \\\n    curl -f -sSL \"https://dl.dropbox.com/s/gwf51ykkk5bifyj/ants-Linux-centos6_x86_64-v2.3.4.tar.gz\" \\\n    | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=$ANTSPATH:$PATH\n\n# Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users dmriprep\nWORKDIR /home/dmriprep\nENV HOME=\"/home/dmriprep\"\n\n# Installing and setting up miniconda\nRUN curl -f -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh && \\\n    bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda && \\\n    rm Miniconda3-4.5.11-Linux-x86_64.sh\n\n# Set CPATH for packages relying on compiled libs (e.g. indexed_gzip)\nENV PATH=\"/usr/local/miniconda/bin:$PATH\" \\\n    CPATH=\"/usr/local/miniconda/include/:$CPATH\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    PYTHONNOUSERSITE=1\n\n# Installing precomputed python packages\nRUN conda install -y -c anaconda -c conda-forge \\\n                     python=3.7.1 \\\n                     graphviz=2.40 \\\n                     git-annex \\\n                     libxml2=2.9.8 \\\n                     libxslt=1.1.32 \\\n                     matplotlib=2.2 \\\n                     mkl \\\n                     mkl-service \\\n                     nodejs \\\n                     numpy=1.20 \\\n                     pandoc=2.11 \\\n                     pip=20.3 \\\n                     scikit-learn=0.19 \\\n                     scipy=1.5 \\\n                     setuptools=51.1 \\\n                     traits=4.6.0 \\\n                     zlib; sync && \\\n    chmod -R a+rX /usr/local/miniconda; sync && \\\n    chmod +x /usr/local/miniconda/bin/*; sync && \\\n    conda build purge-all; sync && \\\n    conda clean -tipsy && sync\n\n# Unless otherwise specified each process should only use one thread - nipype\n# will handle parallelization\nENV MKL_NUM_THREADS=1 \\\n    OMP_NUM_THREADS=1\n\n# Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" && \\\n    sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" )\n\n# Installing SVGO\nRUN npm install -g svgo && npm cache clean --force;\n\n# Installing bids-validator\nRUN npm install -g bids-validator@1.4.0 && npm cache clean --force;\n\n# Refresh linked libraries\nRUN ldconfig\n\nWORKDIR /src\n\n# Installing dMRIPrep\nCOPY . /src/dmriprep\nARG VERSION\n# Force static versioning within container\nRUN echo \"${VERSION}\" > /src/dmriprep/dmriprep/VERSION && \\\n    echo \"include dmriprep/VERSION\" >> /src/dmriprep/MANIFEST.in && \\\n    cd /src/dmriprep && \\\n    pip install --no-cache-dir .[all]\n\nRUN find $HOME -type d -exec chmod go=u {} + && \\\n    find $HOME -type f -exec chmod go=u {} +\n\nWORKDIR /tmp/\nENTRYPOINT [\"/usr/local/miniconda/bin/dmriprep\"]\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"dMRIPrep\" \\\n      org.label-schema.description=\"dMRIPrep - robust dMRI preprocessing tool\" \\\n      org.label-schema.url=\"http://dmriprep.org\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/nipreps/dmriprep\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"1.0\"\n"
}