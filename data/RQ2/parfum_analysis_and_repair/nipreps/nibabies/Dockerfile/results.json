{
  "startTime": 1674215454518,
  "endTime": 1674215456650,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 182
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 230,
        "lineEnd": 230,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 225,
        "lineEnd": 225,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 182
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ubuntu 20.04 LTS\nFROM ubuntu:focal-20210827\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\n\n# Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/neurodebian.gpg\n\n# Prepare environment\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    apt-utils \\\n                    autoconf \\\n                    build-essential \\\n                    bzip2 \\\n                    ca-certificates \\\n                    curl \\\n                    git \\\n                    graphviz \\\n                    libtool \\\n                    locales \\\n                    lsb-release \\\n                    pandoc \\\n                    pandoc-citeproc \\\n                    pkg-config \\\n                    xvfb && \\\n    curl -f -sSL https://deb.nodesource.com/setup_14.x | bash - && \\\n    apt-get install -y --no-install-recommends \\\n                    nodejs && \\\n    locale-gen en_US.UTF-8 && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Installing Neurodebian packages (workbench, git-annex)\nRUN curl -f -sSL \"https://neuro.debian.net/lists/$( lsb_release -c | cut -f2 ).us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list && \\\n    apt-key add /usr/local/etc/neurodebian.gpg && \\\n    (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true)\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    connectome-workbench=1.5.0-1~nd20.04+1 && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Installing ANTs 2.3.4 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\" \\\n    PATH=\"/usr/lib/ants:$PATH\"\nWORKDIR $ANTSPATH\nRUN curl -f -sSL \"https://dl.dropbox.com/s/gwf51ykkk5bifyj/ants-Linux-centos6_x86_64-v2.3.4.tar.gz\" \\\n    | tar -xzC $ANTSPATH --strip-components 1\n\n# # AFNI latest (neurodocker build)\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           ed \\\n           gsl-bin \\\n           libglib2.0-0 \\\n           libglu1-mesa-dev \\\n           libglw1-mesa \\\n           libgomp1 \\\n           libjpeg62 \\\n           libxm4 \\\n           netpbm \\\n           tcsh \\\n           xfonts-base \\\n           xvfb \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && curl -f -sSL --retry 5 -o /tmp/multiarch.deb https://archive.ubuntu.com/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1.5_amd64.deb \\\n    && dpkg -i /tmp/multiarch.deb \\\n    && rm /tmp/multiarch.deb \\\n    && curl -f -sSL --retry 5 -o /tmp/libxp6.deb https://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n    && dpkg -i /tmp/libxp6.deb \\\n    && rm /tmp/libxp6.deb \\\n    && curl -f -sSL --retry 5 -o /tmp/libpng.deb https://snapshot.debian.org/archive/debian-security/20160113T213056Z/pool/updates/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \\\n    && dpkg -i /tmp/libpng.deb \\\n    && rm /tmp/libpng.deb \\\n    && apt-get install -y -f \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && gsl2_path=\"$(find / -name 'libgsl.so.19' || printf '')\" \\\n    && if [ -n \"$gsl2_path\" ]; then \\\n         ln -sfv \"$gsl2_path\" \"$(dirname $gsl2_path)/libgsl.so.0\"; \\\n    fi \\\n    && ldconfig \\\n    && echo \"Downloading AFNI ...\" \\\n    && mkdir -p /opt/afni-latest \\\n    && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n    | tar -xz -C /opt/afni-latest --strip-components 1 \\\n    --exclude \"linux_openmp_64/*.gz\" \\\n    --exclude \"linux_openmp_64/funstuff\" \\\n    --exclude \"linux_openmp_64/shiny\" \\\n    --exclude \"linux_openmp_64/afnipy\" \\\n    --exclude \"linux_openmp_64/lib/RetroTS\" \\\n    --exclude \"linux_openmp_64/meica.libs\" \\\n    # Keep only what we use\n    && find /opt/afni-latest -type f -not \\( \\\n        -name \"3dTshift\" -or \\\n        -name \"3dUnifize\" -or \\\n        -name \"3dAutomask\" -or \\\n        -name \"3dvolreg\" \\) -delete\nENV PATH=\"/opt/afni-latest:$PATH\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_PLUGINPATH=\"/opt/afni-latest\"\n\n# Install AFNI latest (neurodocker build)\nENV AFNI_DIR=\"/opt/afni\"\nRUN echo \"Downloading AFNI ...\" \\\n    && mkdir -p ${AFNI_DIR} \\\n    && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n       | tar -xz -C ${AFNI_DIR} --strip-components 1 \\\n    # Keep only what we use\n    && find ${AFNI_DIR} -type f -not \\( \\\n        -name \"3dTshift\" -or \\\n        -name \"3dUnifize\" -or \\\n        -name \"3dAutomask\" -or \\\n        -name \"3dvolreg\" \\) -delete\n\n# Convert3D (neurodocker build)\nRUN echo \"Downloading Convert3D ...\" \\\n    && mkdir -p /opt/convert3d-1.0.0 \\\n    && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download \\\n    | tar -xz -C /opt/convert3d-1.0.0 --strip-components 1 \\\n    --exclude \"c3d-1.0.0-Linux-x86_64/lib\" \\\n    --exclude \"c3d-1.0.0-Linux-x86_64/share\" \\\n    --exclude \"c3d-1.0.0-Linux-x86_64/bin/c3d_gui\"\nENV C3DPATH=\"/opt/convert3d-1.0.0\" \\\n    PATH=\"/opt/convert3d-1.0.0/bin:$PATH\"\n\n# FSL 6.0.5.1\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           bc \\\n           dc \\\n           file \\\n           libfontconfig1 \\\n           libfreetype6 \\\n           libgl1-mesa-dev \\\n           libgl1-mesa-dri \\\n           libglu1-mesa-dev \\\n           libgomp1 \\\n           libice6 \\\n           libxcursor1 \\\n           libxft2 \\\n           libxinerama1 \\\n           libxrandr2 \\\n           libxrender1 \\\n           libxt6 \\\n           sudo \\\n           wget \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && echo \"Downloading FSL ...\" \\\n    && mkdir -p /opt/fsl \\\n    && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.5.1-centos7_64.tar.gz \\\n    | tar -xz -C /opt/fsl --strip-components 1 \\\n    --exclude \"fsl/config\" \\\n    --exclude \"fsl/data/atlases\" \\\n    --exclude \"fsl/data/first\" \\\n    --exclude \"fsl/data/mist\" \\\n    --exclude \"fsl/data/possum\" \\\n    --exclude \"fsl/data/standard/bianca\" \\\n    --exclude \"fsl/data/standard/tissuepriors\" \\\n    --exclude \"fsl/doc\" \\\n    --exclude \"fsl/etc/default_flobs.flobs\" \\\n    --exclude \"fsl/etc/fslconf\" \\\n    --exclude \"fsl/etc/js\" \\\n    --exclude \"fsl/etc/luts\" \\\n    --exclude \"fsl/etc/matlab\" \\\n    --exclude \"fsl/extras\" \\\n    --exclude \"fsl/include\" \\\n    --exclude \"fsl/python\" \\\n    --exclude \"fsl/refdoc\" \\\n    --exclude \"fsl/src\" \\\n    --exclude \"fsl/tcl\" \\\n    --exclude \"fsl/bin/FSLeyes\" \\\n    && find /opt/fsl/bin -type f -not \\( \\\n        -name \"applywarp\" -or \\\n        -name \"bet\" -or \\\n        -name \"bet2\" -or \\\n        -name \"convert_xfm\" -or \\\n        -name \"fast\" -or \\\n        -name \"flirt\" -or \\\n        -name \"fsl_regfilt\" -or \\\n        -name \"fslhd\" -or \\\n        -name \"fslinfo\" -or \\\n        -name \"fslmaths\" -or \\\n        -name \"fslmerge\" -or \\\n        -name \"fslroi\" -or \\\n        -name \"fslsplit\" -or \\\n        -name \"fslstats\" -or \\\n        -name \"imtest\" -or \\\n        -name \"mcflirt\" -or \\\n        -name \"melodic\" -or \\\n        -name \"prelude\" -or \\\n        -name \"remove_ext\" -or \\\n        -name \"susan\" -or \\\n        -name \"topup\" -or \\\n        -name \"zeropad\" \\) -delete \\\n    && find /opt/fsl/data/standard -type f -not -name \"MNI152_T1_2mm_brain.nii.gz\" -delete\nENV FSLDIR=\"/opt/fsl\" \\\n    PATH=\"/opt/fsl/bin:$PATH\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    FSLLOCKDIR=\"\" \\\n    FSLMACHINELIST=\"\" \\\n    FSLREMOTECALL=\"\" \\\n    FSLGECUDAQ=\"cuda.q\" \\\n    LD_LIBRARY_PATH=\"/opt/fsl/lib:$LD_LIBRARY_PATH\"\n\n# Install FreeSurfer\nCOPY --from=nipreps/freesurfer@sha256:7a750b97e276008030bfc68ffad3266a8838c4767398d82b25b539d389c8688e /opt/freesurfer /opt/freesurfer\nENV FREESURFER_HOME=\"/opt/freesurfer\"\nENV SUBJECTS_DIR=\"$FREESURFER_HOME/subjects\" \\\n    FUNCTIONALS_DIR=\"$FREESURFER_HOME/sessions\" \\\n    MNI_DIR=\"$FREESURFER_HOME/mni\" \\\n    LOCAL_DIR=\"$FREESURFER_HOME/local\" \\\n    MINC_BIN_DIR=\"$FREESURFER_HOME/mni/bin\" \\\n    MINC_LIB_DIR=\"$FREESURFER_HOME/mni/lib\" \\\n    MNI_DATAPATH=\"$FREESURFER_HOME/mni/data\" \\\n    FSL_DIR=${FSLDIR}\nENV PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    MNI_PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    PATH=\"$FREESURFER_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH\"\n# remove build-stamp to play nice with nipype\n\n# Installing SVGO and bids-validator\nRUN npm install -g svgo@^2.3 bids-validator@1.9.0 \\\n  && rm -rf ~/.npm ~/.empty /root/.npm && npm cache clean --force;\n\n# ICA AROMA\nWORKDIR /opt/ICA-AROMA\nRUN curl -f -sSL \"https://github.com/oesteban/ICA-AROMA/archive/v0.4.5.tar.gz\" \\\n  | tar -xzC /opt/ICA-AROMA --strip-components 1 && \\\n  chmod +x /opt/ICA-AROMA/ICA_AROMA.py\nENV PATH=\"/opt/ICA-AROMA:$PATH\" \\\n    AROMA_VERSION=\"0.4.5\"\n\n# Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users nibabies\nWORKDIR /home/nibabies\nENV HOME=\"/home/nibabies\"\n\n# py39_0525.0\nCOPY --from=nipreps/miniconda@sha256:40fffd37963502dcd8549773559fc21182f52460e59e0ad6398a84faf6055641 /opt/conda /opt/conda\n\nRUN ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc\n\n# Set CPATH for packages relying on compiled libs (e.g. indexed_gzip)\nENV PATH=\"/opt/conda/bin:$PATH\" \\\n    CPATH=\"/opt/conda/include:$CPATH\" \\\n    PYTHONNOUSERSITE=1 \\\n    MKL_NUM_THREADS=1 \\\n    OMP_NUM_THREADS=1 \\\n    IS_DOCKER_8395080871=1 \\\n    CONDA_PYTHON=\"/opt/conda/bin/python\"\n\n# Precaching atlases\nCOPY setup.cfg nibabies-setup.cfg\nCOPY scripts/fetch_templates.py fetch_templates.py\nRUN ${CONDA_PYTHON} -m pip install --no-cache-dir \"$( grep templateflow nibabies-setup.cfg | xargs )\" && \\\n    ${CONDA_PYTHON} fetch_templates.py && \\\n    rm nibabies-setup.cfg fetch_templates.py && \\\n    find $HOME/.cache/templateflow -type d -exec chmod go=u {} + && \\\n    find $HOME/.cache/templateflow -type f -exec chmod go=u {} +\n\nCOPY . /src/nibabies\n# Force static versioning within container\nARG VERSION\nRUN echo \"${VERSION}\" > /src/nibabies/nibabies/VERSION && \\\n    echo \"include nibabies/VERSION\" >> /src/nibabies/MANIFEST.in && \\\n    ${CONDA_PYTHON} -m pip install --no-cache-dir \"/src/nibabies[all]\"\n\n# ABI tags can interfere when running on Singularity/Apptainer\nRUN strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n\n# Final settings\nRUN ldconfig\nWORKDIR /tmp\nARG BUILD_DATE\nARG VCS_REF\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"nibabies\" \\\n      org.label-schema.description=\"nibabies - NeuroImaging tools for babies\" \\\n      org.label-schema.url=\"https://github.com/nipreps/nibabies\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/nipreps/nibabies\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"1.0\"\n\nENTRYPOINT [\"/opt/conda/bin/nibabies\"]\n"
}