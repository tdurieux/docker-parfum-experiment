{
  "startTime": 1674215739434,
  "endTime": 1674215740464,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 57,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 18,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 68,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM library/centos:7\n\n# Setup httpd\nRUN yum update -y && \\\n    yum install -y  gettext \\\n                    wget \\\n                    expat-devel \\\n                    make \\\n                    gcc \\\n                    pcre-devel \\\n                    zlib-devel \\\n                    libcurl-devel \\\n                    libxml2-devel \\\n                    openssl-devel && rm -rf /var/cache/yum\nARG APACHE_BUILD_DIR=/opt/httpd-build\nARG APACHE_VERSION=2.4.41\nARG APR_VERSION=1.7.0\nARG APR_UTIL_VERSION=1.6.1\nENV APACHE_HOME=/opt/httpd\nENV APACHE_LOG_DIR=/var/log/dav/httpd\nENV CFLAGS=\"-DBIG_SECURITY_HOLE -O2\"\n\nCOPY httpd/conf /tmp/\nCOPY httpd/modules.shared ${APACHE_BUILD_DIR}/\nCOPY httpd/modules.static ${APACHE_BUILD_DIR}/\nRUN rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm\nRUN modules_shared=\"$(echo $(cat ${APACHE_BUILD_DIR}/modules.shared))\" && \\\n    modules_static=\"$(echo $(cat ${APACHE_BUILD_DIR}/modules.static))\" && \\\n    mkdir -p ${APACHE_BUILD_DIR} && \\\n    cd ${APACHE_BUILD_DIR} && \\\n    wget -q https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/httpd/httpd-${APACHE_VERSION}.tar.gz && \\\n    tar -zxf httpd-${APACHE_VERSION}.tar.gz && \\\n    rm -f httpd-${APACHE_VERSION}.tar.gz && \\\n    cd ${APACHE_BUILD_DIR} && \\\n    wget -q -c https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/apr/apr-${APR_VERSION}.tar.gz && \\\n    wget -q -c https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/apr/apr-util-${APR_UTIL_VERSION}.tar.gz && \\\n    tar -zxf apr-${APR_VERSION}.tar.gz && \\\n    rm -f apr-${APR_VERSION}.tar.gz && \\\n    tar -zxf apr-util-${APR_UTIL_VERSION}.tar.gz && \\\n    rm -f apr-util-${APR_UTIL_VERSION}.tar.gz && \\\n    mv apr-${APR_VERSION} ${APACHE_BUILD_DIR}/httpd-${APACHE_VERSION}/srclib/apr && \\\n    mv apr-util-${APR_UTIL_VERSION} ${APACHE_BUILD_DIR}/httpd-${APACHE_VERSION}/srclib/apr-util && \\\n    cd ${APACHE_BUILD_DIR}/httpd-${APACHE_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${APACHE_HOME} \\\n                --with-included-apr \\\n                --with-included-apr-util \\\n                --enable-mods-shared=\"$modules_shared\" \\\n                --enable-mods-static=\"$modules_static\" \\\n                --enable-load-all-modules && \\\n    make -j $(nproc) && \\\n    make install && \\\n    rm -rf ${APACHE_BUILD_DIR}\n\n# Setup nfs sync\nRUN yum install -y cronie \\\n                   nfs-utils \\\n                   cifs-utils \\\n                   python blobfuse fuse && rm -rf /var/cache/yum\nARG LUSTRE_VERSION=\"2.12.5-1.el7.x86_64\"\nARG LUSTRE_CLIENT_URL=\"https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/lustre/client/rpm/lustre-client-$LUSTRE_VERSION.tar.gz\"\nRUN cd /tmp && \\\n    wget -q https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/lustre/client/rpm/lustre-client-2.12.5-1.el7.x86_64.tar.gz -O lustre-client.tar.gz && \\\n    mkdir -p lustre-client && \\\n    tar -xzvf lustre-client.tar.gz -C lustre-client/ && \\\n    rpm -i --justdb --quiet --nodeps --force lustre-client/dependencies/*.rpm && \\\n    yum install -y lustre-client/*.rpm && \\\n    package-cleanup --cleandupes -y && \\\n    rm -rf lustre-client* && rm -rf /var/cache/yum\n\nRUN curl -f -s https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/pip/2.7/get-pip.py | python && \\\n    pip install --no-cache-dir -I requests==2.21.0 && \\\n    wget -q \"https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/jq/jq-1.6/jq-linux64\" -O /usr/bin/jq && \\\n    chmod +x /usr/bin/jq\n\nENV SYNC_HOME=/opt/sync\nENV SYNC_LOG_DIR=/var/log/dav/sync\nCOPY sync/crontab /tmp/sync\nCOPY sync/sync-nfs.sh ${SYNC_HOME}/\nCOPY sync/nfs-watcher.sh ${SYNC_HOME}/\n# \"nfs-roles-management\" shall be copied to the docker build folder from \"(repo-root)/scripts/nfs-roles-management\"\n# E.g.: cp cp ../../../scripts/nfs-roles-management ./ -r && docker build ...\nCOPY nfs-roles-management ${SYNC_HOME}/nfs-roles-management\n\nADD liveness.sh /liveness.sh\nRUN chmod +x /liveness.sh\n\nCOPY init /init\nRUN  chmod +x /init\n"
}