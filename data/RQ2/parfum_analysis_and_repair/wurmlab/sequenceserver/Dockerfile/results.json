{
  "startTime": 1674255906083,
  "endTime": 1674255906795,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build variables. These need to be declared befored the first FROM\n# for the variables to be accessible in FROM instruction.\nARG BLAST_VERSION=2.12.0\n\n## Stage 1: gem dependencies.\nFROM ruby:2.7-slim-buster AS builder\n\n# Copy over files required for installing gem dependencies.\nWORKDIR /sequenceserver\nCOPY Gemfile Gemfile.lock sequenceserver.gemspec ./\nCOPY lib/sequenceserver/version.rb lib/sequenceserver/version.rb\n\n# Install packages required for building gems with C extensions.\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    gcc make patch && rm -rf /var/lib/apt/lists/*\n\n# Install gem dependencies using bundler.\nRUN bundle install --without=development\n\n\n## Stage 2: BLAST+ binaries.\n# We will copy them from NCBI's docker image.\nFROM ncbi/blast:${BLAST_VERSION} AS ncbi-blast\n\n## Stage 3: Puting it together.\nFROM ruby:2.7-slim-buster AS final\n\nLABEL Description=\"Intuitive local web frontend for the BLAST bioinformatics tool\"\nLABEL MailingList=\"https://groups.google.com/forum/#!forum/sequenceserver\"\nLABEL Website=\"http://sequenceserver.com\"\n\n# Install packages required to run SequenceServer and BLAST.\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl libgomp1 liblmdb0 && rm -rf /var/lib/apt/lists/*\n\n# Copy gem dependencies and BLAST+ binaries from previous build stages.\nCOPY --from=builder /usr/local/bundle/ /usr/local/bundle/\nCOPY --from=ncbi-blast /blast/lib /blast/lib/\nCOPY --from=ncbi-blast /blast/bin/blast_formatter /blast/bin/\nCOPY --from=ncbi-blast /blast/bin/blastdbcmd /blast/bin/\nCOPY --from=ncbi-blast /blast/bin/blastn.REAL /blast/bin/blastn\nCOPY --from=ncbi-blast /blast/bin/blastp.REAL /blast/bin/blastp\nCOPY --from=ncbi-blast /blast/bin/blastx.REAL /blast/bin/blastx\nCOPY --from=ncbi-blast /blast/bin/makeblastdb /blast/bin\nCOPY --from=ncbi-blast /blast/bin/tblastn.REAL /blast/bin/tblastn\nCOPY --from=ncbi-blast /blast/bin/tblastx.REAL /blast/bin/tblastx\n\n# Add BLAST+ binaries to PATH.\nENV PATH=/blast/bin:${PATH}\n\n# Setup working directory, volume for databases, port, and copy the code.\n# SequenceServer code.\nWORKDIR /sequenceserver\nVOLUME [\"/db\"]\nEXPOSE 4567\nCOPY . .\n\n# Generate config file with default configs and database directory set to /db.\n# Setting database directory in config file means users can pass command line\n# arguments to SequenceServer without having to specify -d option again.\nRUN mkdir -p /db && echo 'n' | script -qfec \"bundle exec bin/sequenceserver -s -d /db\" /dev/null\n\n# Prevent SequenceServer from prompting user to join announcements list.\nRUN mkdir -p ~/.sequenceserver && touch ~/.sequenceserver/asked_to_join\n\n# Add SequenceServer's bin directory to PATH and set ENTRYPOINT to\n# 'bundle exec'. Combined, this simplifies passing command-line\n# arguments to SequenceServer, while retaining the ability to run\n# bash in the container.\nENV PATH=/sequenceserver/bin:${PATH}\nENTRYPOINT [\"bundle\", \"exec\"]\nCMD [\"sequenceserver\"]\n\n## Stage 4 (optional) minify CSS & JS.\nFROM node:15-alpine3.12 AS node\n\nRUN apk add --no-cache git\nWORKDIR /usr/src/app\nCOPY ./package.json ./package-lock.json ./webpack.config.js ./babel.config.js ./\nRUN npm install && npm cache clean --force;\nENV PATH=${PWD}/node_modules/.bin:${PATH}\nCOPY public public\nRUN npm run-script build\n\n## Stage 5 (optional) minify\nFROM final AS minify\n\nCOPY --from=node /usr/src/app/public/sequenceserver-*.min.js public/\nCOPY --from=node /usr/src/app/public/css/sequenceserver.min.css public/css/\n\nFROM final\n"
}