{
  "startTime": 1674253995655,
  "endTime": 1674253997226,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 8,
        "columnEnd": 146
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 321,
        "lineEnd": 321,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 208,
        "lineEnd": 208,
        "columnStart": 8,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2022 MosaicML Composer authors\n# SPDX-License-Identifier: Apache-2.0\n\n######################\n# Base Image Arguments\n######################\n\n# CUDA Version\n# For a slim CPU-only image, leave the CUDA_VERSION argument blank -- e.g.\n# ARG CUDA_VERSION=\nARG CUDA_VERSION=11.3.1\n\n# Calculate the base image based on CUDA_VERSION\nARG BASE_IMAGE=${CUDA_VERSION:+\"nvidia/cuda:${CUDA_VERSION}-cudnn8-devel-ubuntu20.04\"}\nARG BASE_IMAGE=${BASE_IMAGE:-\"ubuntu:20.04\"}\n\n# The Python version to install\nARG PYTHON_VERSION=3.9\n\n# The Pytorch Version to install\nARG PYTORCH_VERSION=1.11.0\n\n# The Torchvision version to install.\n# Reference https://github.com/pytorch/vision#installation to determine the Torchvision\n# version that corresponds to the PyTorch version\nARG TORCHVISION_VERSION=0.12.0\n\n# In the Dockerimage, Pillow-SIMD is installed instead of Pillow. To trick pip into thinking that\n# Pillow is also installed (so it won't override it with a future pip install), a Pillow stub is included\n# PILLOW_PSEUDOVERSION is the Pillow version that pip thinks is installed\n# PILLOW_SIMD_VERSION is the actual version of pillow-simd that is installed.\nARG PILLOW_PSEUDOVERSION=7.0.0\nARG PILLOW_SIMD_VERSION=7.0.0.post3\n\n# Version of the Mellanox Drivers to install (for InfiniBand support)\n# Levave blank for no Mellanox Drivers\nARG MOFED_VERSION=5.5-1.0.3.2\n\n########################\n# Vision Image Arguments\n########################\n\n# Build the vision image on the pytorch stage\nARG VISION_BASE=pytorch_stage\n\n# Pip version strings of dependencies to install\nARG MMCV_VERSION='==1.4.8'\nARG FFCV_VERSION='==0.0.3'\nARG OPENCV_VERSION='>=4.5.5.64,<4.6'\nARG NUMBA_VERSION='>=0.55.0,<0.56'\nARG MMSEGMENTATION_VERSION='>=0.22.0,<0.23'\nARG CUPY_VERSION='>=10.2.0'\n\n##########################\n# Composer Image Arguments\n##########################\n\n# Build the composer image on the vision image\nARG COMPOSER_BASE=vision_stage\n\n# The command that is passed to `pip install` -- e.g. `pip install \"${COMPOSER_INSTALL_COMMAND}\"`\nARG COMPOSER_INSTALL_COMMAND='mosaicml[all]'\n\n#########################\n# Build the PyTorch Image\n#########################\n\nFROM ${BASE_IMAGE} AS pytorch_stage\nARG DEBIAN_FRONTEND=noninteractive\n\n#######################\n# Set the shell to bash\n#######################\nSHELL [\"/bin/bash\", \"-c\"]\n\nARG CUDA_VERSION\n\n# Remove a bad symlink from the base composer image\n# If this file is present after the first command, kaniko\n# won't be able to build the docker image.\nRUN if [ -n \"$CUDA_VERSION\" ]; then \\\n        rm -f /usr/local/cuda-$(echo $CUDA_VERSION | cut -c -4)/cuda-$(echo $CUDA_VERSION | cut -c -4); \\\n    fi\n\n\n# update repository keys\n# https://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/\nRUN if [ -n \"$CUDA_VERSION\" ] ; then \\\n        rm -f /etc/apt/sources.list.d/cuda.list && \\\n        rm -f /etc/apt/sources.list.d/nvidia-ml.list && \\\n        apt-get update &&  \\\n        apt-get install -y --no-install-recommends wget && \\\n        apt-get autoclean && \\\n        apt-get clean && \\\n        rm -rf /var/lib/apt/lists/* \\\n        apt-key del 7fa2af80 && \\\n        mkdir -p /tmp/cuda-keyring && \\\n        wget -P /tmp/cuda-keyring https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb && \\\n        dpkg -i /tmp/cuda-keyring/cuda-keyring_1.0-1_all.deb && \\\n        rm -rf /tmp/cuda-keyring ; \\\n    fi\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        libgomp1 \\\n        curl \\\n        wget \\\n        sudo \\\n        build-essential \\\n        git \\\n        software-properties-common \\\n        dirmngr \\\n        apt-utils \\\n        gpg-agent \\\n        openssh-client \\\n        # For PILLOW:\n        zlib1g-dev \\\n        libtiff-dev \\\n        libfreetype6-dev \\\n        liblcms2-dev \\\n        tcl \\\n        libjpeg8-dev && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n##################################################\n# Change the NCCL version to fix NVLink errors\n# This is required to train on Nvidia A100s in GCP\n##################################################\nRUN if [ -n \"$CUDA_VERSION\" ] ; then \\\n        apt-get update && \\\n        apt-get install -y --no-install-recommends --allow-change-held-packages --allow-downgrades \\\n            libnccl2=2.9.6-1+cuda11.0 \\\n            libnccl-dev=2.9.6-1+cuda11.0 && \\\n        apt-get autoclean && \\\n        apt-get clean && \\\n        rm -rf /var/lib/apt/lists/* ; \\\n    fi\n\n# If using CUDA_VERSION, then use system installed NCCL per update above and point to library\nENV USE_SYSTEM_NCCL=${CUDA_VERSION:+1}\nENV LD_PRELOAD=${CUDA_VERSION:+/usr/lib/x86_64-linux-gnu/libnccl.so.2.9.6}\n\n##############################\n# Install NodeJS (for Pyright)\n##############################\nRUN \\\n    curl -fsSL https://deb.nodesource.com/setup_17.x | bash - && \\\n    apt-get install -y --no-install-recommends nodejs && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n################\n# Install Python\n################\nARG PYTHON_VERSION\n\nRUN add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    python3-apt \\\n    python${PYTHON_VERSION} \\\n    python${PYTHON_VERSION}-dev \\\n    python${PYTHON_VERSION}-distutils \\\n    python${PYTHON_VERSION}-venv && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -fsSL https://bootstrap.pypa.io/get-pip.py | python${PYTHON_VERSION} - && \\\n    pip${PYTHON_VERSION} install --no-cache-dir --upgrade pip setuptools\n\n#####################\n# Install pillow-simd\n#####################\nARG PILLOW_PSEUDOVERSION\nARG PILLOW_SIMD_VERSION\n\n# pillow_stub tricks pip into thinking that it installed pillow,\n# so when pillow_simd is installed, other packages won't later override it\nCOPY pillow_stub /tmp/pillow_stub\n\nRUN pip${PYTHON_VERSION} install --no-cache-dir --upgrade /tmp/pillow_stub && \\\n    pip${PYTHON_VERSION} install --no-cache-dir --upgrade pillow_simd==${PILLOW_SIMD_VERSION} && \\\n    rm -rf /tmp/pillow_stub\n\n#################\n# Install Pytorch\n#################\nARG PYTORCH_VERSION\nARG TORCHVISION_VERSION\n\nRUN CUDA_VERSION_TAG=$(python${PYTHON_VERSION} -c \"print('cu' + ''.join('${CUDA_VERSION}'.split('.')[:2]) if '${CUDA_VERSION}' else 'cpu')\") && \\\n    pip${PYTHON_VERSION} install --no-cache-dir --find-links https://download.pytorch.org/whl/torch_stable.html \\\n        torch==${PYTORCH_VERSION}+${CUDA_VERSION_TAG} \\\n        torchvision==${TORCHVISION_VERSION}+${CUDA_VERSION_TAG}\n\n###################################\n# Mellanox OFED driver installation\n###################################\n\nARG MOFED_VERSION\n\nRUN if [ -n \"$MOFED_VERSION\" ] ; then \\\n        mkdir -p /tmp/mofed && \\\n        wget -nv -P /tmp/mofed https://content.mellanox.com/ofed/MLNX_OFED-${MOFED_VERSION}/MLNX_OFED_LINUX-${MOFED_VERSION}-ubuntu20.04-x86_64.tgz && \\\n        tar -zxvf /tmp/mofed/MLNX_OFED_LINUX-${MOFED_VERSION}-ubuntu20.04-x86_64.tgz -C /tmp/mofed && \\\n        /tmp/mofed/MLNX_OFED_LINUX-${MOFED_VERSION}-ubuntu20.04-x86_64/mlnxofedinstall --user-space-only --without-fw-update --force && \\\n        rm -rf /tmp/mofed; rm /tmp/mofed/MLNX_OFED_LINUX-${MOFED_VERSION}-ubuntu20.04-x86_64.tgz \\\n    fi\n\n\n#####################\n# Install NVIDIA Apex\n#####################\nRUN if [ -n \"$CUDA_VERSION\" ] ; then \\\n        mkdir -p /tmp/apex && \\\n        cd /tmp/apex && \\\n        git clone https://github.com/NVIDIA/apex && \\\n        cd apex && \\\n        pip${PYTHON_VERSION} install --no-cache-dir \\\n            --global-option=\"--cpp_ext\" \\\n            --global-option=\"--cuda_ext\" \\\n            --target  /usr/local/lib/python${PYTHON_VERSION}/dist-packages \\\n            ./ && \\\n        rm -rf /tmp/apex ; \\\n    fi\n\n\n################################\n# Use the correct python version\n################################\n\n# Set the default python by creating our own folder and hacking the path\n# We don't want to use upgrade-alternatives as that will break system packages\n\nARG COMPOSER_PYTHON_BIN=/composer-python\n\nRUN mkdir -p ${COMPOSER_PYTHON_BIN} && \\\n    ln -s $(which python${PYTHON_VERSION}) ${COMPOSER_PYTHON_BIN}/python && \\\n    ln -s $(which python${PYTHON_VERSION}) ${COMPOSER_PYTHON_BIN}/python3 && \\\n    ln -s $(which python${PYTHON_VERSION}) ${COMPOSER_PYTHON_BIN}/python${PYTHON_VERSION} && \\\n    ln -s $(which pip${PYTHON_VERSION}) ${COMPOSER_PYTHON_BIN}/pip && \\\n    ln -s $(which pip${PYTHON_VERSION}) ${COMPOSER_PYTHON_BIN}/pip3 && \\\n    ln -s $(which pip${PYTHON_VERSION}) ${COMPOSER_PYTHON_BIN}/pip${PYTHON_VERSION} && \\\n    # Include this folder, and the local bin folder, on the path\n    echo \"export PATH=~/.local/bin:$COMPOSER_PYTHON_BIN:$PATH\" >> /etc/profile && \\\n    echo \"export PATH=~/.local/bin:$COMPOSER_PYTHON_BIN:$PATH\" >> /etc/bash.bashrc && \\\n    echo \"export PATH=~/.local/bin:$COMPOSER_PYTHON_BIN:$PATH\" >> /etc/zshenv\n\n# Ensure that non-interactive shells load /etc/profile\nENV BASH_ENV=/etc/profile\n\n#########################\n# Configure non-root user\n#########################\nRUN useradd -rm -d /home/mosaicml -s /bin/bash -u 1000 -U -s /bin/bash mosaicml && \\\n    usermod -a -G sudo mosaicml && \\\n    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n######################\n# PyTorch Vision Image\n######################\n\nFROM ${VISION_BASE} AS vision_stage\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN sudo apt-get update && \\\n    sudo apt-get install -y --no-install-recommends \\\n    # For FFCV:\n    pkg-config \\\n    libturbojpeg-dev \\\n    libopencv-dev \\\n    # For deeplabv3:\n    ffmpeg \\\n    libsm6 \\\n    libxext6 && \\\n    sudo apt-get autoclean && \\\n    sudo apt-get clean && \\\n    sudo rm -rf /var/lib/apt/lists/*\n\nARG MMCV_VERSION\nARG FFCV_VERSION\nARG OPENCV_VERSION\nARG NUMBA_VERSION\nARG MMSEGMENTATION_VERSION\nARG PYTHON_VERSION\nARG CUPY_VERSION\nARG CUDA_VERSION\n\nRUN CUDA_VERSION_TAG=$(python${PYTHON_VERSION} -c \"print('cu' + ''.join('${CUDA_VERSION}'.split('.')[:2]) if '${CUDA_VERSION}' else 'cpu')\") && \\\n    MMCV_TORCH_VERSION=$(python -c \"print('torch' + ''.join('${PYTORCH_VERSION}'.split('.')[:2]) + '.0')\") && \\\n    sudo pip${PYTHON_VERSION} install --no-cache-dir \\\n        \"ffcv${FFCV_VERSION}\" \\\n        \"opencv-python${OPENCV_VERSION}\" \\\n        \"numba${NUMBA_VERSION}\" \\\n        \"mmsegmentation${MMSEGMENTATION_VERSION}\" && \\\n    sudo pip${PYTHON_VERSION} install --no-cache-dir \\\n        \"mmcv-full${MMCV_VERSION}\" \\\n        -f https://download.openmmlab.com/mmcv/dist/${CUDA_VERSION_TAG}/${MMCV_TORCH_VERSION}/index.html && \\\n    if [ -n \"$CUDA_VERSION\" ] ; then \\\n        sudo pip${PYTHON_VERSION} install --no-cache-dir cupy-`echo ${CUDA_VERSION_TAG} | sed \"s/cu/cuda/g\"`${CUPY_VERSION}; \\\n    fi\n\n\n################\n# Composer Image\n################\n\nFROM ${COMPOSER_BASE} as composer_stage\n\nARG DEBIAN_FRONTEND=noninteractive\n\n##################\n# Install Composer\n##################\n\nARG COMPOSER_INSTALL_COMMAND\n\nRUN pip install --no-cache-dir \"${COMPOSER_INSTALL_COMMAND}\"\n"
}