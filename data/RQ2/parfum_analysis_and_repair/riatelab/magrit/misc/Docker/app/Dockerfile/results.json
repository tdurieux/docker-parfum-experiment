{
  "startTime": 1674254052808,
  "endTime": 1674254053636,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 60,
        "columnEnd": 119
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 54,
        "columnEnd": 105
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 7,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 32,
        "columnStart": 5,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "####################################################################\n# Working config file building an \"all-in one\" (and heavy..)\n# image of the app and making it accessible on port 9999\n# (but it should be splited in multiple containers).\n# Configured in order to avoid using cache when fetching the code of the\n# application.\n####################################################################\n# Can be build like this :\n#\n# $ docker build -t \"magrit_app:latest\" --build-arg CACHEBUST=$(date +%s) .\n#\n#\n# App can be started like this (exposing port 9999 in the host):\n#\n# $ docker run --publish \"9999:9999\" -it \"magrit_app:latest\"\n#\n#\n# Access to a shell in the container can be obtained with a command like :\n#\n# $ docker run -it --entrypoint=/bin/bash \"magrit_app:latest\"\n#\n\n\nFROM ubuntu:18.04\nMAINTAINER mth\n\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa \\\n\t\t&& apt-get update \\\n\t\t&& apt-get install --no-install-recommends -y gcc libpython3.6-dev libopenblas-dev libopenblas-base \\\n        python3.6 python3.6-dev libgeos-dev \\\n        libfreetype6-dev libfreetype6 libproj-dev libspatialindex-dev libv8-3.14-dev libffi-dev \\\n        nodejs nodejs-dev npm redis-server libuv1-dev git wget \\\n        libxslt1-dev libxml2 libxml2-dev libkml-dev locales \\\n    && npm -g install topojson \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && locale-gen fr_FR.UTF-8 && npm cache clean --force;\n\nENV LANG='fr_FR.UTF-8' LANGUAGE='fr_FR' LC_ALL='fr_FR.UTF-8'\n\nWORKDIR /home\n\nENV GDALINST /home/gdalinstall\nENV GDALBUILD /home/gdalbuild\nENV GDALOPTS=\"  --with-geos \\\n\t\t        --with-expat \\\n\t\t        --without-libtool \\\n\t\t        --without-gif \\\n\t\t        --without-pg \\\n\t\t        --without-grass \\\n\t\t        --without-libgrass \\\n\t\t        --without-cfitsio \\\n\t\t        --without-pcraster \\\n\t\t        --without-netcdf \\\n\t\t        --without-gif \\\n\t\t        --without-ogdi \\\n\t\t        --without-fme \\\n\t\t        --without-hdf4 \\\n\t\t        --with-spatialite \\\n\t\t        --with-static-proj4=/usr/lib\"\n\nRUN mkdir $GDALBUILD && mkdir $GDALINST && cd $GDALBUILD && wget https://download.osgeo.org/gdal/2.4.2/gdal-2.4.2.tar.gz \\\n    && tar -xzf gdal-2.4.2.tar.gz && cd gdal-2.4.2 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$GDALINST/gdal-2.4.2 $GDALOPTS \\\n\t&& make -s -j 2 && make install && rm gdal-2.4.2.tar.gz\n\nENV PATH=\"${GDALINST}/gdal-2.4.2/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"${GDALINST}/gdal-2.4.2/lib:${LD_LIBRARY_PATH}\"\n\nRUN cd /tmp && wget https://bootstrap.pypa.io/pip/3.6/get-pip.py && python3.6 get-pip.py\n\nARG CACHEBUST=1\n\nRUN mkdir /home/app && cd /home/app && mkdir magrit\nCOPY magrit /home/app/magrit\nCOPY redis.conf /etc/redis/redis.conf\n\nRUN cd /home/app/magrit/ \\\n    && pip3.6 install -U setuptools numpy==1.17.3 \\\n    && pip3.6 install -U -r requirements/prod.txt \\\n    && python3.6 setup.py build_ext --inplace\n\nEXPOSE 9999\n\nCMD redis-server /etc/redis/redis.conf \\\n    & gunicorn \"magrit_app.app:create_app()\" --bind 0.0.0.0:9999 --worker-class aiohttp.worker.GunicornUVLoopWebWorker --max-requests 450 --max-requests-jitter 50 --workers 3 --chdir /home/app/magrit/\n"
}