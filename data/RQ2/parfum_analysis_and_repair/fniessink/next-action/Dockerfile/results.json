{
  "startTime": 1674248527801,
  "endTime": 1674248529076,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM koalaman/shellcheck-alpine:v0.7.1 AS shellcheck\nFROM hadolint/hadolint:v1.18.0-alpine AS hadolint\nFROM python:3.8-alpine\n\nLABEL maintainer=\"Frank Niessink <frank@niessink.com>\"\nLABEL description=\"Development dependencies for Next-action.\"\n\n# Hadolint wants pinned versions but that breaks the build of the Docker image on Travis\n# hadolint ignore=DL3018\nRUN apk --no-cache add musl-dev gcc make nodejs nodejs-npm graphviz ttf-ubuntu-font-family docker libffi-dev openjdk11 unzip sed libxml2-dev libxslt-dev openssl-dev\n# libffi is needed for twine, ubuntu-font-family for graphviz, openjdk11 for sonar-scanner, libxml2 for lxml\n\nADD https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip ./package.zip\nRUN unzip package.zip && mv ./sonar-scanner* /sonar-scanner && ln -s /sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner && rm package.zip\n# Ensure Sonar uses the provided Java for musl instead of the included glibc one\nRUN sed -i 's/use_embedded_jre=true/use_embedded_jre=false/g' /sonar-scanner/bin/sonar-scanner\n\nCOPY --from=shellcheck /bin/shellcheck /usr/local/bin/\nCOPY --from=hadolint /bin/hadolint /usr/local/bin/\n\nRUN npm install -g gherkin-lint@4.1.2 markdownlint-cli@0.23.2 markdown-to-html@0.0.13 && npm cache clean --force;\nRUN pip install --no-cache-dir pip==20.2.1\nWORKDIR /next-action\nCOPY requirements*.txt /next-action/\nRUN pip install --no-cache-dir -r requirements.txt -r\n"
}