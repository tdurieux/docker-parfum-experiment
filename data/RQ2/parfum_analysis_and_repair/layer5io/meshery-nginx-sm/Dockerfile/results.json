{
  "startTime": 1674252519893,
  "endTime": 1674252521065,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 111
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.17 as builder\n\nARG VERSION\nARG GIT_COMMITSHA\nWORKDIR /build\n# Copy the Go Modules manifests\nCOPY go.mod go.mod\nCOPY go.sum go.sum\n# cache deps before building and copying source so that we don't need to re-download as much\n# and so that source changes don't invalidate our downloaded layer\nRUN go mod download\n# Copy the go source\nCOPY main.go main.go\nCOPY internal/ internal/\nCOPY nginx/ nginx/\nCOPY build/ build/\n# Build\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=\"-w -s -X main.version=$VERSION -X main.gitsha=$GIT_COMMITSHA\" -a -o meshery-nginx-sm main.go\n\nFROM alpine:3.15 as jsonschema-util\nRUN apk add --no-cache curl\nWORKDIR /\nRUN curl -f -LO https://github.com/layer5io/kubeopenapi-jsonschema/releases/download/v0.1.3/kubeopenapi-jsonschema\nRUN chmod +x /kubeopenapi-jsonschema\n\n# Use distroless as minimal base image to package the manager binary\n# Refer to https://github.com/GoogleContainerTools/distroless for more details\nFROM gcr.io/distroless/nodejs:14\nENV DISTRO=\"debian\"\nENV GOARCH=\"amd64\"\nENV SERVICE_ADDR=\"meshery-nginx-sm\"\nENV MESHERY_SERVER=\"http://meshery:9081\"\nCOPY templates/ ./templates\nWORKDIR /\nCOPY --from=builder /build/meshery-nginx-sm .\nCOPY --from=jsonschema-util /kubeopenapi-jsonschema /root/.meshery/bin/kubeopenapi-jsonschema\nENTRYPOINT [\"/meshery-nginx-sm\"]\n"
}