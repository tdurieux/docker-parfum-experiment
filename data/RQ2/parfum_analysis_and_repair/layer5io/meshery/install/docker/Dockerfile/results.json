{
  "startTime": 1674215789505,
  "endTime": 1674215793304,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 12,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 7,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 52,
        "columnStart": 45,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 19,
        "columnEnd": 106
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 11,
        "columnEnd": 41
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 20,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 25,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 25,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 25,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.17 as meshery-server\nARG TOKEN\nARG GIT_VERSION\nARG GIT_COMMITSHA\nARG RELEASE_CHANNEL\n\nRUN adduser --disabled-login appuser\nWORKDIR /github.com/meshery/meshery\nADD . .\nRUN go clean -modcache; cd cmd; GOPROXY=https://proxy.golang.org GOSUMDB=off go build -ldflags=\"-w -s -X main.globalTokenForAnonymousResults=$TOKEN -X main.version=$GIT_VERSION -X main.commitsha=$GIT_COMMITSHA -X main.releasechannel=$RELEASE_CHANNEL\" -tags draft -a -o /meshery .\n\nFROM node:lts-slim as ui\nADD ui ui\nRUN cd ui; npm install --only=production; npm cache clean --force; npm run build && npm run export; mv out /\n\nFROM node:16 as provider-ui\nADD provider-ui provider-ui\nRUN cd provider-ui; npm install --only=production; npm cache clean --force; npm run build && npm run export; mv out /\n\nFROM ubuntu as wrk2\nRUN apt-get -y update && apt-get -y --no-install-recommends install git && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/man/?? /usr/share/man/??_*\nRUN apt-get -y update && apt-get -y --no-install-recommends install build-essential libssl-dev git zlib1g-dev && rm -rf /var/lib/apt/lists/*;\nRUN git config --global user.email \"meshery@layer5.io\"\nRUN git config --global user.name \"meshery\"\nRUN git clone --depth=1 https://github.com/layer5io/wrk2 && cd wrk2 && make\n\nFROM alpine:3.15.3 as seed_content\nRUN apk add --no-cache curl\nWORKDIR /\nRUN lines=$( curl -f -s https://api.github.com/repos/layer5io/wasm-filters/releases/latest | grep \"browser_download_url.*wasm\" | cut -d : -f 2,3 | sed 's/\"//g') \\\n    && mkdir -p seed_content/filters/binaries \\\n    && cd seed_content/filters/binaries  \\\n    for line in $lines \\\n    do \\\n    curl -LO $line \\\n    done\n\n# bundling patterns\nRUN curl -f -L -s https://github.com/service-mesh-patterns/service-mesh-patterns/tarball/master -o service-mesh-patterns.tgz \\\n    && mkdir service-mesh-patterns \\\n    && mkdir -p /seed_content/patterns \\\n    && tar xzf service-mesh-patterns.tgz --directory=service-mesh-patterns \\\n    && mv service-mesh-patterns/*/samples/* /seed_content/patterns/ && rm service-mesh-patterns.tgz\n\n# bundling applications\nRUN mkdir -p /seed_content/applications && cd /seed_content/applications \\\n    && curl -f -LO https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo.yaml \\\n    && curl -f -LO https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml \\\n    && curl -f -L https://raw.githubusercontent.com/layer5io/image-hub/master/deployment.yaml -o imagehub.yaml \\\n    && mkdir /emojivoto && ( cd /emojivoto && curl -f --remote-name-all -L https://raw.githubusercontent.com/BuoyantIO/emojivoto/main/kustomize/deployment/emoji.yml \\\n    https://raw.githubusercontent.com/BuoyantIO/emojivoto/main/kustomize/deployment/vote-bot.yml \\\n    https://raw.githubusercontent.com/BuoyantIO/emojivoto/main/kustomize/deployment/voting.yml \\\n    https://raw.githubusercontent.com/BuoyantIO/emojivoto/main/kustomize/deployment/web.yml) \\\n    && awk 'FNR==1 && NR>1 { printf(\"\\n%s\\n\\n\",\"---\") } 1' /emojivoto/*.yml > /seed_content/applications/emojivoto.yml\n\n#FROM ubuntu as nighthawk\n#RUN apt-get -y update && apt-get -y install git && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/man/?? /usr/share/man/??_*\n#RUN apt-get -y update && apt-get -y  install build-essential libssl-dev git zlib1g-dev\n#RUN git config --global user.email \"meshery@layer5.io\"\n#RUN git config --global user.name \"meshery\"\n#RUN git clone https://github.com/layer5io/nighthawk-go\n#RUN cd nighthawk-go/apinighthawk/bin && chmod +x ./nighthawk_client\n\nFROM alpine:3.15.3 as jsonschema-util\nRUN apk add --no-cache curl\nWORKDIR /\nRUN UTIL_VERSION=$( curl -f -L -s https://api.github.com/repos/layer5io/kubeopenapi-jsonschema/releases/latest | \\\n\tgrep tag_name | sed \"s/ *\\\"tag_name\\\": *\\\"\\\\(.*\\\\)\\\",*/\\\\1/\" | \\\n\tgrep -v \"rc\\.[0-9]$\" | head -n 1) \\\n\t&& curl -f -L https://github.com/layer5io/kubeopenapi-jsonschema/releases/download/${UTIL_VERSION}/kubeopenapi-jsonschema -o kubeopenapi-jsonschema \\\n\t&& chmod +x /kubeopenapi-jsonschema\n\nFROM frolvlad/alpine-glibc:alpine-3.13_glibc-2.32\n#RUN apt-get update; apt-get install -y ca-certificates; update-ca-certificates && rm -rf /var/lib/apt/lists/*\nRUN apk update && apk add ca-certificates; update-ca-certificates && rm -rf /var/cache/apk/*\nRUN update-ca-certificates\nRUN apk upgrade --no-cache && \\\n    apk add --no-cache libstdc++\nCOPY ./oam /app/oam\nCOPY --from=meshery-server /meshery /app/cmd/\nCOPY --from=meshery-server /etc/passwd /etc/passwd\nCOPY --from=meshery-server /github.com/meshery/meshery/helpers/swagger.yaml /app/helpers/swagger.yaml\nCOPY --from=ui /out /app/ui/out\nCOPY --from=provider-ui /out /app/provider-ui/out\nCOPY --from=wrk2 /wrk2 /app/cmd/wrk2\nCOPY --from=wrk2 /wrk2/wrk /usr/local/bin\nCOPY --from=seed_content /seed_content /home/appuser/.meshery/seed_content\nCOPY --from=layer5/getnighthawk:latest /usr/local/bin/nighthawk_service /app/cmd/\nCOPY --from=layer5/getnighthawk:latest /usr/local/bin/nighthawk_output_transform /app/cmd/\nCOPY --from=jsonschema-util /kubeopenapi-jsonschema /home/appuser/.meshery/bin/kubeopenapi-jsonschema\n\nRUN mkdir -p /home/appuser/.meshery/config; chown -R appuser /home/appuser/\nUSER appuser\nWORKDIR /app/cmd\nCMD ./meshery\n"
}