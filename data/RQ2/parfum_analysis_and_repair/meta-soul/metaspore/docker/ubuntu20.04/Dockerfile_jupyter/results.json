{
  "startTime": 1674254556649,
  "endTime": 1674254558099,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 167
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 175
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 3,
        "columnEnd": 96
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 3,
        "columnEnd": 96
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 3,
        "columnEnd": 95
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 3,
        "columnEnd": 106
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 84,
        "columnEnd": 99
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright 2022 DMetaSoul\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nARG RELEASE_IMAGE\n\nFROM ${RELEASE_IMAGE}\n\n# The following is modified from: https://github.com/kubeflow/kubeflow/blob/master/components/example-notebook-servers/base/Dockerfile\n\nENV NB_USER jovyan\nENV NB_UID 1000\nENV NB_PREFIX /\nENV HOME /home/$NB_USER\nENV SHELL /bin/bash\n\n# args - software versions\nARG KUBECTL_ARCH=\"amd64\"\nARG KUBECTL_VERSION=v1.21.0\nARG S6_ARCH=\"amd64\"\n # renovate: datasource=github-tags depName=just-containers/s6-overlay versioning=loose\nARG S6_VERSION=v2.2.0.3\n\n# set shell to bash\nSHELL [\"/bin/bash\", \"-c\"]\n\n# install - useful linux packages\n# install gcc 11 because MetaSpore is built on it\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && apt-get -yq update \\\n && apt-get -yq install --no-install-recommends \\\n    software-properties-common \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --batch --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null \\\n && apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\" \\\n && apt-get -yq update \\\n && apt-get -yq install --no-install-recommends \\\n    apt-transport-https \\\n    bash \\\n    bzip2 \\\n    gnupg \\\n    gnupg2 \\\n    locales \\\n    lsb-release \\\n    nano \\\n    unzip \\\n    zip \\\n    zsh \\\n    vim \\\n    net-tools \\\n    openjdk-11-jdk \\\n && apt-get -yq --no-install-recommends install manpages-dev binutils tar pkg-config bison flex \\\n && apt-get -yq --no-install-recommends install gcc-11 g++-11 cmake \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11 --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-11 --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-11\n\n# install - s6 overlay\nRUN export GNUPGHOME=/tmp/ \\\n && curl -f -sL \"https://github.com/just-containers/s6-overlay/releases/download/${S6_VERSION}/s6-overlay-${S6_ARCH}-installer\" -o /tmp/s6-overlay-${S6_VERSION}-installer \\\n && curl -f -sL \"https://github.com/just-containers/s6-overlay/releases/download/${S6_VERSION}/s6-overlay-${S6_ARCH}-installer.sig\" -o /tmp/s6-overlay-${S6_VERSION}-installer.sig \\\n && gpg --batch --keyserver keys.gnupg.net --keyserver --recv-keys 6101B2783B2FD161 \\\n && gpg --batch -q --verify /tmp/s6-overlay-${S6_VERSION}-installer.sig /tmp/s6-overlay-${S6_VERSION}-installer \\\n && chmod +x /tmp/s6-overlay-${S6_VERSION}-installer \\\n && /tmp/s6-overlay-${S6_VERSION}-installer / \\\n && rm /tmp/s6-overlay-${S6_VERSION}-installer.sig /tmp/s6-overlay-${S6_VERSION}-installer\n\n# install - kubectl\nRUN curl -f -sL \"https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/${KUBECTL_ARCH}/kubectl\" -o /usr/local/bin/kubectl \\\n && curl -f -sL \"https://dl.k8s.io/${KUBECTL_VERSION}/bin/linux/${KUBECTL_ARCH}/kubectl.sha256\" -o /tmp/kubectl.sha256 \\\n && echo \"$(cat /tmp/kubectl.sha256)  /usr/local/bin/kubectl\" | sha256sum --check \\\n && rm /tmp/kubectl.sha256 \\\n && chmod +x /usr/local/bin/kubectl\n\n# create user and set required ownership\n# enable sudo for user to be able to install system packages\nRUN useradd -M -s /bin/zsh -N -u ${NB_UID} ${NB_USER} \\\n && mkdir -p ${HOME} \\\n && chown -R ${NB_USER}:users ${HOME} \\\n && chown -R ${NB_USER}:users /usr/local/bin \\\n && chown -R ${NB_USER}:users /etc/s6 \\\n && passwd -d ${NB_USER} \\\n && usermod -aG sudo ${NB_USER} \\\n && echo ${NB_USER}' ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# The following is modified from https://github.com/kubeflow/kubeflow/blob/master/components/example-notebook-servers/jupyter/Dockerfile\nUSER root\n\n# install -- node.js\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && curl -f -sL \"https://deb.nodesource.com/gpgkey/nodesource.gpg.key\" | apt-key add - \\\n && echo \"deb https://deb.nodesource.com/node_14.x focal main\" > /etc/apt/sources.list.d/nodesource.list \\\n && apt-get -yq update \\\n && apt-get -yq install --no-install-recommends \\\n    nodejs \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\n\n# switch to NB_UID for installs\nUSER ${NB_UID}\n\nENV PATH ${HOME}/.local/bin:$PATH\n\n# install manually without requirements.txt to make pip deps resolver happy\nRUN python3 -m pip install --upgrade setuptools --no-cache-dir && \\\n python3 -m pip install --upgrade pyasn1-modules --no-cache-dir && \\\n python3 -m pip install --upgrade kfp==1.8.11 --no-cache-dir && \\\n python3 -m pip install --upgrade jupyterlab notebook ipykernel --no-cache-dir && \\\n python3 -m pip install --upgrade jupyterlab-git ipython-sql ipywidgets --no-cache-dir && \\\n python3 -m pip install --upgrade widgetsnbextension plotly ipympl --no-cache-dir && \\\n python3 -m pip install --upgrade elyra[all] --no-cache-dir && \\\n python3 -m pip install --upgrade jupyterlab-sparkmonitor --no-cache-dir && \\\n python3 -m pip install jupyterlab-language-pack-zh-CN --no-cache-dir && \\\n python3 -m pip install git+https://github.com/cliffwoolley/jupyter_tensorboard.git --no-cache-dir && \\\n python3 -m pip install git+https://github.com/twalcari/jupyterlab_tensorboard.git --no-cache-dir && \\\n python3 -m pip install tensorboard --no-cache-dir \\\n && jupyter lab --generate-config \\\n && ipython profile create \\\n && echo \"c.InteractiveShellApp.extensions.append('sparkmonitor.kernelextension')\" >> $(ipython profile locate default)/ipython_config.py \\\n && rm -rf ${HOME}/.cache/yarn\n\nENV IPYTHONDIR=${HOME}/.ipython\n\n# s6 - copy scripts\nCOPY --chown=jovyan:users jupyter-s6/ /etc\n\nUSER root\nRUN mkdir -p /var/run/s6 \\\n && mkdir -p /opt/spark/local_dir/s3a \\\n && chown -R ${NB_USER}:users /var/run/s6 \\\n && npm config set registry https://registry.npm.taobao.org \\\n && chown -R ${NB_USER}:users ${HOME}/.config \\\n && chown -R ${NB_USER}:users /opt/spark\nUSER ${NB_UID}\n\nWORKDIR ${HOME}\n\nENV NPM_CONFIG_PREFIX=${HOME}/.local/share/jupyter/lab/staging\n\n# We should build first then install nodejs based language servers\nRUN mkdir -p ${HOME}/.local/share/jupyter/lab/staging && \\\n   npm config set prefix=${HOME}/.local/share/jupyter/lab/staging && \\\n   jlpm config set registry https://registry.npm.taobao.org && \\\n   python3 -m pip install -U jedi-language-server && \\\n   jupyter lab build --debug && \\\n   npm install --prefix ${HOME}/.local/share/jupyter/lab/staging --save-dev yaml-language-server && \\\n   npm install --prefix ${HOME}/.local/share/jupyter/lab/staging --save-dev bash-language-server && \\\n   npm install --prefix ${HOME}/.local/share/jupyter/lab/staging --save-dev sql-language-server && \\\n   npm install --prefix ${HOME}/.local/share/jupyter/lab/staging --save-dev vscode-json-languageserver-bin && \\\n   rm -rf ${HOME}/.cache/yarn && npm cache clean --force;\n\nRUN sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\nRUN mkdir -p ${HOME}/workspace\n\nENV SHELL /bin/zsh\nENV USER ${NB_USER}\n\nEXPOSE 8888\n\nENTRYPOINT [\"/init\"]"
}