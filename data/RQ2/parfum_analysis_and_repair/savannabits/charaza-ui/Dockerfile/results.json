{
  "startTime": 1674251830129,
  "endTime": 1674251830942,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "FROM php:7.4-fpm\n\n# Arguments defined in docker-compose.yml\nARG user\nARG uid\n\n# Install system dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    git \\\n    curl \\\n    nano \\\n    g++ \\\n    sudo \\\n    iputils-ping \\\n    libcurl3-dev \\\n    libzip-dev \\\n    libjpeg-dev \\\n    libpng-dev \\\n    libonig-dev \\\n    libxml2-dev \\\n    libxrender1 \\\n    libfontconfig1 \\\n    libx11-dev \\\n    libjpeg62 \\\n    libxtst6 \\\n    libfreetype6-dev \\\n    libsqlite3-dev \\\n    libldap2-dev \\\n    zip \\\n    unzip && rm -rf /var/lib/apt/lists/*;\n\n#RUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n#ENV NVM_DIR=/root/.nvm\n#RUN . \"$NVM_DIR/nvm.sh\" && nvm install ${NODE_VERSION}\n#RUN . \"$NVM_DIR/nvm.sh\" && nvm use v${NODE_VERSION}\n#RUN . \"$NVM_DIR/nvm.sh\" && nvm alias default v${NODE_VERSION}\n#ENV PATH=\"/root/.nvm/versions/node/v${NODE_VERSION}/bin/:${PATH}\"\n\nRUN docker-php-ext-configure gd --with-freetype --with-jpeg\nRUN docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/\n# Install PHP extensions\nRUN docker-php-ext-install pdo_mysql \\\n    tokenizer \\\n    fileinfo \\\n    ctype \\\n    mbstring \\\n    exif \\\n    intl \\\n    pcntl \\\n    bcmath \\\n    gd \\\n    json \\\n    curl \\\n    xml \\\n    zip \\\n    ldap \\\n    pdo_sqlite\n\n# Get latest Composer\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN pecl install redis\nRUN docker-php-ext-enable redis\n# Create system user to run Composer and Artisan Commands\nRUN useradd -G www-data,root -u $uid -d /home/$user $user\nRUN mkdir -p /home/$user/.composer && \\\n    chown -R $user:$user /home/$user\nRUN chown -R $user:www-data /var/www\nRUN apt-get install -y --no-install-recommends libssl-dev && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Set working directory\n\nWORKDIR /var/www\nUSER $user\nENV NVM_DIR /home/$user/.nvm\nENV NODE_VERSION 12.18.3\n# install nvm\n# https://github.com/creationix/nvm#install-script\nRUN curl -f --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nRUN export NVM_DIR=\"/home/$user/.nvm\"\n# install node and npm\n#RUN source $NVM_DIR/nvm.sh \\\n#    && nvm install $NODE_VERSION \\\n#    && nvm alias default $NODE_VERSION \\\n#    && nvm use default\n\n# add node and npm to path so the commands are available\nENV NODE_PATH $NVM_DIR/versions/node/v$NODE_VERSION\nENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\nRUN export PATH=$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\n#RUN source $NVM_DIR/nvm.sh\n#SHELL [\"/bin/bash\", \"--login\", \"-c\"]\n#\n#RUN curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n#RUN nvm install 12 && nvm use 12\n# Clear cache\nRUN npm install -g yarn && npm cache clean --force;\nUSER root\nENV WORKING_DIR /var/www\nRUN  chown -R $user:www-data ${WORKING_DIR}\n#CMD find $WORKING_DIR -type d -exec chmod 755 {} \\;\n#CMD find $WORKING_DIR -type f -exec chmod 664 {} \\;\nUSER $user\nCMD [\"./entry.sh\"]\n"
}