{
  "startTime": 1674250038734,
  "endTime": 1674250040148,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine as base\nENV LD_LIBRARY_PATH=/usr/local/lib\nWORKDIR /tmp\n\nFROM base as build\nRUN apk add --no-cache build-base cmake nasm bash findutils\nCOPY script/extract ./\nENV CPATH=/usr/local/include\n\nFROM build as libz\nARG LIBZ_VER\nARG LIBZ_SHA256\nCOPY download/libz-$LIBZ_VER.tar.gz download/\nRUN ./extract libz && \\\n    cd build/libz && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install\n\nFROM libz as libpng\nARG LIBPNG_VER\nARG LIBPNG_SHA256\nCOPY download/libpng-$LIBPNG_VER.tar.gz download/\nRUN ./extract libpng && \\\n    cd build/libpng && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-zlib-prefix=/usr/local && \\\n    make install\n\nFROM libpng as liblcms\nARG LIBLCMS_VER\nARG LIBLCMS_SHA256\nCOPY download/liblcms-$LIBLCMS_VER.tar.gz download/\nRUN ./extract liblcms && \\\n    cd build/liblcms && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install\n\nFROM build as libjpeg\nARG LIBJPEG_VER\nARG LIBJPEG_SHA256\nCOPY download/libjpeg-$LIBJPEG_VER.tar.gz download/\nRUN ./extract libjpeg && \\\n    cd build/libjpeg && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install\n\nFROM build as libmozjpeg\nARG LIBMOZJPEG_VER\nARG LIBMOZJPEG_SHA256\nCOPY download/libmozjpeg-$LIBMOZJPEG_VER.tar.gz download/\nRUN ./extract libmozjpeg && \\\n    cd build/libmozjpeg && \\\n    cmake -DPNG_SUPPORTED=0 . && \\\n    make install\n\nFROM libpng as advancecomp\nARG ADVANCECOMP_VER\nARG ADVANCECOMP_SHA256\nCOPY download/advancecomp-$ADVANCECOMP_VER.tar.gz download/\nRUN ./extract advancecomp && \\\n    cd build/advancecomp && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install\n\nFROM build as gifsicle\nARG GIFSICLE_VER\nARG GIFSICLE_SHA256\nCOPY download/gifsicle-$GIFSICLE_VER.tar.gz download/\nRUN ./extract gifsicle && \\\n    cd build/gifsicle && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install\n\nFROM build as jhead\nARG JHEAD_VER\nARG JHEAD_SHA256\nCOPY download/jhead-$JHEAD_VER.tar.gz download/\nRUN ./extract jhead && \\\n    cd build/jhead && \\\n    make && \\\n    install -c jhead /usr/local/bin\n\nFROM libmozjpeg as jpegarchive\nARG JPEGARCHIVE_VER\nARG JPEGARCHIVE_SHA256\nCOPY download/jpegarchive-$JPEGARCHIVE_VER.tar.gz download/\nRUN ./extract jpegarchive && \\\n    cd build/jpegarchive && \\\n    CFLAGS=-fcommon make install\n\nFROM libjpeg as jpegoptim\nARG JPEGOPTIM_VER\nARG JPEGOPTIM_SHA256\nCOPY download/jpegoptim-$JPEGOPTIM_VER.tar.gz download/\nRUN ./extract jpegoptim && \\\n    cd build/jpegoptim && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install\n\nFROM libpng as optipng\nARG OPTIPNG_VER\nARG OPTIPNG_SHA256\nCOPY download/optipng-$OPTIPNG_VER.tar.gz download/\nRUN ./extract optipng && \\\n    cd build/optipng && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install\n\nFROM rust:1-alpine as oxipng\nRUN apk add --no-cache build-base\nCOPY script/extract ./\nARG OXIPNG_VER\nARG OXIPNG_SHA256\nCOPY download/oxipng-$OXIPNG_VER.tar.gz download/\nRUN ./extract oxipng && \\\n    cd build/oxipng && \\\n    cargo build --release && \\\n    install -c target/release/oxipng /usr/local/bin\n\nFROM libpng as pngcrush\nARG PNGCRUSH_VER\nARG PNGCRUSH_SHA256\nCOPY download/pngcrush-$PNGCRUSH_VER.tar.gz download/\nRUN ./extract pngcrush && \\\n    cd build/pngcrush && \\\n    make && \\\n    install -c pngcrush /usr/local/bin\n\nFROM build as pngout\nARG PNGOUT_LINUX_STATIC_VER\nARG PNGOUT_LINUX_STATIC_SHA256\nCOPY download/pngout_linux_static-$PNGOUT_LINUX_STATIC_VER.tar.gz download/\nRUN ./extract pngout_linux_static && \\\n    cd build/pngout_linux_static && \\\n    cp amd64/pngout-static /usr/local/bin/pngout\n\nFROM liblcms as pngquant\nARG PNGQUANT_VER\nARG PNGQUANT_SHA256\nCOPY download/pngquant-$PNGQUANT_VER.tar.gz download/\nRUN ./extract pngquant && \\\n    cd build/pngquant && \\\n    make install\n\n# FROM build as [name]\n# ARG [NAME]_VER\n# ARG [NAME]_SHA256\n# COPY download/[name]-$[NAME]_VER.tar.gz download/\n# RUN ./extract [name] && \\\n#     cd build/[name] && \\\n#     ./configure && \\\n#     make install\n\nFROM base as image_optim\nRUN apk add --no-cache libstdc++ ruby npm perl dumb-init\n\nCOPY README.markdown /\nCOPY acknowledgements /acknowledgements\n\nCOPY --from=advancecomp /usr/local/bin/advpng          /usr/local/bin/\nCOPY --from=gifsicle    /usr/local/bin/gifsicle        /usr/local/bin/\nCOPY --from=jhead       /usr/local/bin/jhead           /usr/local/bin/\nCOPY --from=jpegarchive /usr/local/bin/jpeg-recompress /usr/local/bin/\nCOPY --from=jpegoptim   /usr/local/bin/jpegoptim       /usr/local/bin/\nCOPY --from=libjpeg     /usr/local/bin/jpegtran        /usr/local/bin/\nCOPY --from=optipng     /usr/local/bin/optipng         /usr/local/bin/\nCOPY --from=oxipng      /usr/local/bin/oxipng          /usr/local/bin/\nCOPY --from=pngcrush    /usr/local/bin/pngcrush        /usr/local/bin/\nCOPY --from=pngout      /usr/local/bin/pngout          /usr/local/bin/\nCOPY --from=pngquant    /usr/local/bin/pngquant        /usr/local/bin/\n\nCOPY --from=libjpeg     /usr/local/lib/libjpeg.so.9    /usr/local/lib/\nCOPY --from=libpng      /usr/local/lib/libpng16.so.16  /usr/local/lib/\nCOPY --from=libz        /usr/local/lib/libz.so.1       /usr/local/lib/\nCOPY --from=liblcms     /usr/local/lib/liblcms2.so.2   /usr/local/lib/\n\nRUN npm -g install svgo && npm cache clean --force;\nRUN gem install --no-document image_optim\nENTRYPOINT [\"dumb-init\", \"image_optim\"]\nCMD [\"--help\"]\n"
}