{
  "startTime": 1674251814026,
  "endTime": 1674251815503,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 70,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The MIT License (MIT)\n#\n# Copyright (c) 2020-2022 NVIDIA CORPORATION\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of\n# this software and associated documentation files (the \"Software\"), to deal in\n# the Software without restriction, including without limitation the rights to\n# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n# the Software, and to permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n# -------------------------------------------------- #\n# This is a Docker image dedicated to develop\n# DALI Backend. If you don't want to build the\n# backend together with tritonserver, start from here\n# -------------------------------------------------- #\n\nARG TRITON_VERSION=22.04\nARG BASE_IMAGE=nvcr.io/nvidia/tritonserver:${TRITON_VERSION}-py3\nFROM ${BASE_IMAGE} as builder\n\nRUN apt-key adv --fetch-keys \\\n    # Manually update the keys to NVIDIA repository because they are outdated in the base image\n    https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n              zip \\\n              wget \\\n              build-essential \\\n              autoconf \\\n              autogen \\\n              unzip \\\n              python3.8 \\\n              python3-pip \\\n              libboost-all-dev \\\n              rapidjson-dev \\\n              gdb && rm -rf /var/lib/apt/lists/*;\n\n# pip version in apt packages is ancient - we need to update it\nRUN pip3 install --no-cache-dir -U pip\n\nWORKDIR /opt\n\n# CMake\nRUN CMAKE_VERSION=3.18 && \\\n    CMAKE_BUILD=3.18.6 && \\\n    wget -nv https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz && \\\n    tar -xf cmake-${CMAKE_BUILD}.tar.gz && \\\n    cd cmake-${CMAKE_BUILD} && \\\n    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) -- -DCMAKE_USE_OPENSSL=OFF && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    rm -rf /cmake-${CMAKE_BUILD} && rm cmake-${CMAKE_BUILD}.tar.gz\n\n# Miniconda\nENV PATH=\"/opt/conda/bin:${PATH}\"\nRUN MINICONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-py38_4.12.0-Linux-x86_64.sh\"; \\\n    SHA256SUM=\"3190da6626f86eee8abf1b2fd7a5af492994eb2667357ee4243975cdbb175d7a\"; \\\n    wget \"${MINICONDA_URL}\" -O miniconda.sh -q && \\\n    echo \"${SHA256SUM}  miniconda.sh\" > shasum && \\\n    sha256sum -c ./shasum && \\\n    sh miniconda.sh -b -p /opt/conda && \\\n    rm miniconda.sh shasum && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc && \\\n    find /opt/conda/ -follow -type f -name '*.a' -delete && \\\n    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \\\n    /opt/conda/bin/conda clean -afy\n\nWORKDIR /dali\n\nARG DALI_DOWNLOAD_EXTRA_INDEX_URL=https://developer.download.nvidia.com/compute/redist/nightly\nARG DALI_DOWNLOAD_PKG_NAME=nvidia-dali-nightly-cuda110\nARG DALI_DOWNLOAD_VERSION\nARG DALI_DOWNLOAD_EXTRA_OPTIONS\n\nRUN pip install --no-cache-dir --force-reinstall \\\n    ${DALI_DOWNLOAD_EXTRA_OPTIONS} --extra-index-url ${DALI_DOWNLOAD_EXTRA_INDEX_URL} \\\n    ${DALI_DOWNLOAD_PKG_NAME}${DALI_DOWNLOAD_VERSION:+==${DALI_DOWNLOAD_VERSION}}\n\nCOPY . .\n\nARG TRITON_BACKEND_API_VERSION=\"r21.05\"\n\nRUN mkdir build_in_ci && cd build_in_ci && \\\n    cmake                                                         \\\n      -D CMAKE_INSTALL_PREFIX=/opt/tritonserver                   \\\n      -D CMAKE_BUILD_TYPE=Debug                                   \\\n      -D TRITON_BACKEND_API_VERSION=${TRITON_BACKEND_API_VERSION} \\\n      -D TRITON_DALI_SKIP_DOWNLOAD=ON                             \\\n      .. &&                                                       \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install\n\nENV LD_LIBRARY_PATH=/opt/tritonserver/lib:/opt/tritonserver/backends/dali/dali:${LD_LIBRARY_PATH}\n\nWORKDIR /opt/tritonserver\n"
}