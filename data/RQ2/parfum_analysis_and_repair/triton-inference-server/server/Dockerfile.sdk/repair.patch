diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/triton-inference-server/server/Dockerfile.sdk b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/triton-inference-server/server/Dockerfile.sdk/repaired.Dockerfile
index c0b5dbd..c08daaf 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/triton-inference-server/server/Dockerfile.sdk
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/triton-inference-server/server/Dockerfile.sdk/repaired.Dockerfile
@@ -80,25 +80,25 @@ RUN apt-get update && \
             python3-pdfkit \
             openjdk-11-jdk \
             maven && \
-    pip3 install --upgrade wheel setuptools && \
-    pip3 install --upgrade grpcio-tools && \
-    pip3 install --upgrade pip
+    pip3 install --no-cache-dir --upgrade wheel setuptools && \
+    pip3 install --no-cache-dir --upgrade grpcio-tools && \
+    pip3 install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/*;
 
 ARG CMAKE_UBUNTU_VERSION
 # Client build requires recent version of CMake (FetchContent required)
 RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \
-      gpg --dearmor - |  \
+      gpg --batch --dearmor - | \
       tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
     if [ "$CMAKE_UBUNTU_VERSION" = "20.04" ]; then \
       apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' && \
       apt-get update && \
       apt-get install -y --no-install-recommends \
-        cmake-data=3.21.1-0kitware1ubuntu20.04.1 cmake=3.21.1-0kitware1ubuntu20.04.1; \
+        cmake-data=3.21.1-0kitware1ubuntu20.04.1 cmake=3.21.1-0kitware1ubuntu20.04.1; rm -rf /var/lib/apt/lists/*; \
     elif [ "$CMAKE_UBUNTU_VERSION" = "18.04" ]; then \
       apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \
       apt-get update && \
       apt-get install -y --no-install-recommends \
-        cmake-data=3.18.4-0kitware1 cmake=3.18.4-0kitware1; \
+        cmake-data=3.18.4-0kitware1 cmake=3.18.4-0kitware1; rm -rf /var/lib/apt/lists/*; \
     else \
       echo "ERROR: Only support CMAKE_UBUNTU_VERSION to be 18.04 or 20.04" && false; \
     fi && \
@@ -180,9 +180,9 @@ RUN apt-get update && \
             python3-pdfkit \
             maven \
             default-jdk && \
-    pip3 install --upgrade wheel setuptools && \
-    pip3 install --upgrade grpcio-tools && \
-    pip3 install --upgrade pip
+    pip3 install --no-cache-dir --upgrade wheel setuptools && \
+    pip3 install --no-cache-dir --upgrade grpcio-tools && \
+    pip3 install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /workspace
 COPY TRITON_VERSION .
@@ -204,7 +204,7 @@ COPY qa/images/mug.jpg images/mug.jpg
 # Install the dependencies needed to run the client examples. These
 # are not needed for building but including them allows this image to
 # be used to run the client examples.
-RUN pip3 install --upgrade numpy pillow attrdict && \
+RUN pip3 install --no-cache-dir --upgrade numpy pillow attrdict && \
     find install/python/ -maxdepth 1 -type f -name \
          "tritonclient-*linux*.whl" | xargs printf -- '%s[all]' | \
     xargs pip3 install --upgrade
@@ -212,10 +212,10 @@ RUN pip3 install --upgrade numpy pillow attrdict && \
 # Install DCGM
 RUN if [ "$TRITON_ENABLE_GPU" = "ON" ]; then \
         [ "$(uname -m)" != "x86_64" ] && arch="sbsa" || arch="x86_64" && \
-        curl -o /tmp/cuda-keyring.deb \
+        curl -f -o /tmp/cuda-keyring.deb \
         https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/$arch/cuda-keyring_1.0-1_all.deb \
-        && apt install /tmp/cuda-keyring.deb && rm /tmp/cuda-keyring.deb && \
-        apt-get update && apt-get install -y datacenter-gpu-manager=1:${DCGM_VERSION}; \
+        && apt install -y --no-install-recommends /tmp/cuda-keyring.deb && rm /tmp/cuda-keyring.deb && \
+        apt-get update && apt-get install --no-install-recommends -y datacenter-gpu-manager=1:${DCGM_VERSION}; rm -rf /var/lib/apt/lists/*; \
     fi
 
 # Build expects "python" executable (not python3).
@@ -225,7 +225,7 @@ RUN rm -f /usr/bin/python && \
 # Install Model Analyzer
 ARG TRITON_MODEL_ANALYZER_REPO_TAG
 ARG TRITON_MODEL_ANALYZER_REPO="https://github.com/triton-inference-server/model_analyzer@${TRITON_MODEL_ANALYZER_REPO_TAG}"
-RUN pip3 install "git+${TRITON_MODEL_ANALYZER_REPO}"
+RUN pip3 install --no-cache-dir "git+${TRITON_MODEL_ANALYZER_REPO}"
 
 # Entrypoint Banner
 ENV NVIDIA_PRODUCT_NAME="Triton Server SDK"