{
  "startTime": 1674252383325,
  "endTime": 1674252385284,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 214,
        "lineEnd": 215,
        "columnStart": 8,
        "columnEnd": 108
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 206,
        "lineEnd": 206,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 227,
        "lineEnd": 227,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 6,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 11,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 11,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 217,
        "lineEnd": 217,
        "columnStart": 26,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 11,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 59,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 95,
        "columnStart": 6,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 99,
        "lineEnd": 100,
        "columnStart": 6,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 165,
        "lineEnd": 181,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 11,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 217,
        "lineEnd": 217,
        "columnStart": 26,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 11,
        "columnEnd": 71
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2019-2022, NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#  * Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#  * Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#  * Neither the name of NVIDIA CORPORATION nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n# Multistage build.\n#\n\n# Base image on the minimum Triton container\nARG BASE_IMAGE=nvcr.io/nvidia/tritonserver:22.06-py3-min\n\nARG TRITON_CLIENT_REPO_SUBDIR=clientrepo\nARG TRITON_COMMON_REPO_TAG=main\nARG TRITON_CORE_REPO_TAG=main\nARG TRITON_BACKEND_REPO_TAG=main\nARG TRITON_THIRD_PARTY_REPO_TAG=main\nARG TRITON_MODEL_ANALYZER_REPO_TAG=main\nARG CMAKE_UBUNTU_VERSION=20.04\nARG TRITON_ENABLE_GPU=ON\nARG JAVA_BINDINGS_MAVEN_VERSION=3.8.4\n\n# DCGM version to install for Model Analyzer\nARG DCGM_VERSION=2.2.9\n\nARG NVIDIA_TRITON_SERVER_SDK_VERSION=unknown\nARG NVIDIA_BUILD_ID=unknown\n\n############################################################################\n##  Build image\n############################################################################\n\nFROM ${BASE_IMAGE} AS sdk_build\n\n# Ensure apt-get won't prompt for selecting options\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n            ca-certificates \\\n            software-properties-common \\\n            autoconf \\\n            automake \\\n            build-essential \\\n            curl \\\n            git \\\n            libb64-dev \\\n            libopencv-dev \\\n            libopencv-core-dev \\\n            libssl-dev \\\n            libtool \\\n            pkg-config \\\n            python3 \\\n            python3-pip \\\n            python3-dev \\\n            rapidjson-dev \\\n            vim \\\n            wget \\\n            python3-pdfkit \\\n            openjdk-11-jdk \\\n            maven && \\\n    pip3 install --no-cache-dir --upgrade wheel setuptools && \\\n    pip3 install --no-cache-dir --upgrade grpcio-tools && \\\n    pip3 install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/*;\n\nARG CMAKE_UBUNTU_VERSION\n# Client build requires recent version of CMake (FetchContent required)\nRUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \\\n      gpg --batch --dearmor - | \\\n      tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \\\n    if [ \"$CMAKE_UBUNTU_VERSION\" = \"20.04\" ]; then \\\n      apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' && \\\n      apt-get update && \\\n      apt-get install -y --no-install-recommends \\\n        cmake-data=3.21.1-0kitware1ubuntu20.04.1 cmake=3.21.1-0kitware1ubuntu20.04.1; rm -rf /var/lib/apt/lists/*; \\\n    elif [ \"$CMAKE_UBUNTU_VERSION\" = \"18.04\" ]; then \\\n      apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \\\n      apt-get update && \\\n      apt-get install -y --no-install-recommends \\\n        cmake-data=3.18.4-0kitware1 cmake=3.18.4-0kitware1; rm -rf /var/lib/apt/lists/*; \\\n    else \\\n      echo \"ERROR: Only support CMAKE_UBUNTU_VERSION to be 18.04 or 20.04\" && false; \\\n    fi && \\\n    cmake --version\n\n# Build expects \"python\" executable (not python3).\nRUN rm -f /usr/bin/python && \\\n    ln -s /usr/bin/python3 /usr/bin/python\n\n# Build the client library and examples\nARG TRITON_CLIENT_REPO_SUBDIR\nARG TRITON_COMMON_REPO_TAG\nARG TRITON_CORE_REPO_TAG\nARG TRITON_BACKEND_REPO_TAG\nARG TRITON_THIRD_PARTY_REPO_TAG\nARG TRITON_ENABLE_GPU\nARG JAVA_BINDINGS_MAVEN_VERSION\nARG TARGETPLATFORM\n\nWORKDIR /workspace\nCOPY TRITON_VERSION .\nCOPY ${TRITON_CLIENT_REPO_SUBDIR} client\n\nWORKDIR /workspace/build\nRUN cmake -DCMAKE_INSTALL_PREFIX=/workspace/install \\\n          -DTRITON_VERSION=`cat /workspace/TRITON_VERSION` \\\n          -DTRITON_COMMON_REPO_TAG=${TRITON_COMMON_REPO_TAG} \\\n          -DTRITON_CORE_REPO_TAG=${TRITON_CORE_REPO_TAG} \\\n          -DTRITON_BACKEND_REPO_TAG=${TRITON_BACKEND_REPO_TAG} \\\n          -DTRITON_THIRD_PARTY_REPO_TAG=${TRITON_THIRD_PARTY_REPO_TAG} \\\n          -DTRITON_ENABLE_CC_HTTP=ON -DTRITON_ENABLE_CC_GRPC=ON \\\n          -DTRITON_ENABLE_PYTHON_HTTP=ON -DTRITON_ENABLE_PYTHON_GRPC=ON \\\n          -DTRITON_ENABLE_JAVA_HTTP=ON \\\n          -DTRITON_ENABLE_PERF_ANALYZER=ON \\\n          -DTRITON_ENABLE_PERF_ANALYZER_C_API=ON \\\n          -DTRITON_ENABLE_PERF_ANALYZER_TFS=ON \\\n          -DTRITON_ENABLE_PERF_ANALYZER_TS=ON \\\n          -DTRITON_ENABLE_EXAMPLES=ON -DTRITON_ENABLE_TESTS=ON \\\n          -DTRITON_ENABLE_GPU=${TRITON_ENABLE_GPU} /workspace/client\nRUN make -j16 cc-clients python-clients java-clients && \\\n    rm -fr ~/.m2\n\n# Install Java API Bindings\nRUN if [ \"$TARGETPLATFORM\" = \"linux/amd64\" ]; then \\\n        source /workspace/client/src/java-api-bindings/scripts/install_dependencies_and_build.sh \\\n        --maven-version ${JAVA_BINDINGS_MAVEN_VERSION} \\\n        --core-tag ${TRITON_CORE_REPO_TAG} \\\n        --jar-install-path /workspace/install/java-api-bindings; \\\n    fi\n\n############################################################################\n## Create sdk container\n############################################################################\nFROM ${BASE_IMAGE}\n\n# Ensure apt-get won't prompt for selecting options\nENV DEBIAN_FRONTEND=noninteractive\n\nARG DCGM_VERSION\nARG TRITON_CORE_REPO_TAG\nARG TARGETPLATFORM\nARG TRITON_ENABLE_GPU\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n            software-properties-common \\\n            curl \\\n            git \\\n            libb64-dev \\\n            libopencv-dev \\\n            libopencv-core-dev \\\n            libssl-dev \\\n            libtool \\\n            python3 \\\n            python3-pip \\\n            python3-dev \\\n            vim \\\n            wget \\\n            python3-pdfkit \\\n            maven \\\n            default-jdk && \\\n    pip3 install --no-cache-dir --upgrade wheel setuptools && \\\n    pip3 install --no-cache-dir --upgrade grpcio-tools && \\\n    pip3 install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /workspace\nCOPY TRITON_VERSION .\nCOPY NVIDIA_Deep_Learning_Container_License.pdf .\nCOPY --from=sdk_build /workspace/client/ client/\nCOPY --from=sdk_build /workspace/install/ install/\nRUN cd install && \\\n    export VERSION=`cat /workspace/TRITON_VERSION` && \\\n    tar zcf /workspace/v$VERSION.clients.tar.gz *\n\n# For CI testing need to copy over L0_sdk test and L0_client_build_variants test.\nRUN mkdir qa\nCOPY qa/L0_sdk qa/L0_sdk\nCOPY qa/L0_client_build_variants qa/L0_client_build_variants\n\n# Install an image needed by the quickstart and other documentation.\nCOPY qa/images/mug.jpg images/mug.jpg\n\n# Install the dependencies needed to run the client examples. These\n# are not needed for building but including them allows this image to\n# be used to run the client examples.\nRUN pip3 install --no-cache-dir --upgrade numpy pillow attrdict && \\\n    find install/python/ -maxdepth 1 -type f -name \\\n         \"tritonclient-*linux*.whl\" | xargs printf -- '%s[all]' | \\\n    xargs pip3 install --upgrade\n\n# Install DCGM\nRUN if [ \"$TRITON_ENABLE_GPU\" = \"ON\" ]; then \\\n        [ \"$(uname -m)\" != \"x86_64\" ] && arch=\"sbsa\" || arch=\"x86_64\" && \\\n        curl -f -o /tmp/cuda-keyring.deb \\\n        https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/$arch/cuda-keyring_1.0-1_all.deb \\\n        && apt install -y --no-install-recommends /tmp/cuda-keyring.deb && rm /tmp/cuda-keyring.deb && \\\n        apt-get update && apt-get install --no-install-recommends -y datacenter-gpu-manager=1:${DCGM_VERSION}; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n# Build expects \"python\" executable (not python3).\nRUN rm -f /usr/bin/python && \\\n    ln -s /usr/bin/python3 /usr/bin/python\n\n# Install Model Analyzer\nARG TRITON_MODEL_ANALYZER_REPO_TAG\nARG TRITON_MODEL_ANALYZER_REPO=\"https://github.com/triton-inference-server/model_analyzer@${TRITON_MODEL_ANALYZER_REPO_TAG}\"\nRUN pip3 install --no-cache-dir \"git+${TRITON_MODEL_ANALYZER_REPO}\"\n\n# Entrypoint Banner\nENV NVIDIA_PRODUCT_NAME=\"Triton Server SDK\"\nCOPY docker/entrypoint.d/ /opt/nvidia/entrypoint.d/\nRUN sed 's/Server/Server SDK/' /opt/nvidia/entrypoint.d/10-banner.txt | \\\n    sed 's/^===/=======/' > /opt/nvidia/entrypoint.d/10-banner.new && \\\n    mv /opt/nvidia/entrypoint.d/10-banner.new /opt/nvidia/entrypoint.d/10-banner.txt\n\nARG NVIDIA_TRITON_SERVER_SDK_VERSION\nARG NVIDIA_BUILD_ID\nENV NVIDIA_TRITON_SERVER_SDK_VERSION=${NVIDIA_TRITON_SERVER_SDK_VERSION}\nENV NVIDIA_BUILD_ID=${NVIDIA_BUILD_ID}\n\nENV PATH /workspace/install/bin:${PATH}\nENV LD_LIBRARY_PATH /workspace/install/lib:${LD_LIBRARY_PATH}\n\n# DLIS-3631: Needed to run Perf Analyzer CI tests correctly\nENV LD_LIBRARY_PATH /opt/hpcx/ompi/lib:${LD_LIBRARY_PATH}\n"
}