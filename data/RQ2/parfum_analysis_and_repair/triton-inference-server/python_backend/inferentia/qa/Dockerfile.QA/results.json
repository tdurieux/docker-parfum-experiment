{
  "startTime": 1674220968010,
  "endTime": 1674220969077,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 42,
        "columnStart": 8,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 46,
        "columnStart": 8,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2021, NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#  * Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#  * Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#  * Neither the name of NVIDIA CORPORATION nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n# Multistage build.\n#\nARG BASE_IMAGE=tritonserver\nARG BUILD_IMAGE=tritonserver_build\nARG SDK_IMAGE=tritonserver_sdk\nARG TRITON_PATH=/home/ubuntu\n\nFROM ${SDK_IMAGE} AS sdk\nFROM $BASE_IMAGE\n# Ensure apt-get won't prompt for selecting options\nENV DEBIAN_FRONTEND=noninteractive\n# install platform specific packages\nRUN if [ $(cat /etc/os-release | grep 'VERSION_ID=\"20.04\"' | wc -l) -ne 0 ]; then \\\n        apt-get update && \\\r\n        apt-get install -y --no-install-recommends \\\r\n                libpng-dev; rm -rf /var/lib/apt/lists/*; \\\n    elif [ $(cat /etc/os-release | grep 'VERSION_ID=\"18.04\"' | wc -l) -ne 0 ]; then \\\n        apt-get update && \\\r\n        apt-get install -y --no-install-recommends \\\r\n                libpng-dev; rm -rf /var/lib/apt/lists/*; \\\n    else \\\r\n        echo \"Ubuntu version must be either 18.04 or 20.04\" && \\\r\n        exit 1; \\\r\n    fi\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\r\n                              python3-dev \\\r\n                              python3-pip \\\r\n                              build-essential \\\r\n                              wget && \\\r\n    rm -rf /var/lib/apt/lists/*\n\nRUN rm -f /usr/bin/python && \\\r\n    ln -s /usr/bin/python3 /usr/bin/python\n\nRUN pip3 install --no-cache-dir --upgrade wheel setuptools && \\\n    pip3 install --no-cache-dir --upgrade numpy pillow attrdict future grpcio requests gsutil awscli six grpcio-channelz\n\nWORKDIR /opt/tritonserver\n# Copy the entire qa repo to the /opt/tritonserver/qa repo\nCOPY --from=tritonserver_build /workspace/qa qa\nCOPY --chown=1000:1000 --from=sdk /workspace/install client_tmp\nRUN mkdir -p qa/clients && mkdir -p qa/pkgs && \\\r\n    cp -a client_tmp/bin/* qa/clients/. && \\\r\n    cp client_tmp/lib/libgrpcclient.so qa/clients/. && \\\r\n    cp client_tmp/lib/libhttpclient.so qa/clients/. && \\\r\n    cp client_tmp/python/*.py qa/clients/. && \\\r\n    cp client_tmp/python/triton*.whl qa/pkgs/. && \\\r\n    cp client_tmp/java/examples/*.jar qa/clients/. && \\\r\n    rm -rf client_tmp\n# Create mount paths for lib\nRUN mkdir /mylib && mkdir /home/ubuntu\n\nENV TRITON_PATH ${TRITON_PATH}\nENV LD_LIBRARY_PATH /opt/tritonserver/qa/clients:${LD_LIBRARY_PATH}\n"
}