diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ibz/lightning-shell/Dockerfile.tmpl b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ibz/lightning-shell/Dockerfile.tmpl/repaired.Dockerfile
index e90b752..c14a477 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ibz/lightning-shell/Dockerfile.tmpl
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ibz/lightning-shell/Dockerfile.tmpl/repaired.Dockerfile
@@ -10,28 +10,28 @@ FROM debian:${DEBIAN_VERSION}-slim as builder
 ARG arch
 
 RUN apt-get update \
-    && apt-get install -y asciidoctor bison build-essential cmake curl gnupg libaspell-dev libcurl4-gnutls-dev libgcrypt20-dev libjson-c-dev libncursesw5-dev libgnutls28-dev libwebsockets-dev pkg-config python3-dev zlib1g-dev \
-    && apt clean all
+    && apt-get install --no-install-recommends -y asciidoctor bison build-essential cmake curl gnupg libaspell-dev libcurl4-gnutls-dev libgcrypt20-dev libjson-c-dev libncursesw5-dev libgnutls28-dev libwebsockets-dev pkg-config python3-dev zlib1g-dev \
+    && apt clean all && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /build
 COPY . /build
 
 ARG bitcoin_version
 RUN if [ "$arch" = "arm64" ]; then export btc_arch=aarch64; else export btc_arch=x86_64; fi \
- && curl -sSLO https://bitcoincore.org/bin/bitcoin-core-${bitcoin_version}/bitcoin-${bitcoin_version}-${btc_arch}-linux-gnu.tar.gz \
- && curl -sSLO https://bitcoincore.org/bin/bitcoin-core-${bitcoin_version}/SHA256SUMS \
+ && curl -f -sSLO https://bitcoincore.org/bin/bitcoin-core-${bitcoin_version}/bitcoin-${bitcoin_version}-${btc_arch}-linux-gnu.tar.gz \
+ && curl -f -sSLO https://bitcoincore.org/bin/bitcoin-core-${bitcoin_version}/SHA256SUMS \
  && sha256sum --ignore-missing --check SHA256SUMS \
  && tar xzf bitcoin-${bitcoin_version}-${btc_arch}-linux-gnu.tar.gz \
- && mv bitcoin-${bitcoin_version} /bitcoin
+ && mv bitcoin-${bitcoin_version} /bitcoin && rm bitcoin-${bitcoin_version}-${btc_arch}-linux-gnu.tar.gz
 
 ARG lnd_version
-RUN curl -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/lnd-linux-${arch}-${lnd_version}.tar.gz \
- && curl -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-guggero-${lnd_version}.sig \
- && curl -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-${lnd_version}.txt \
- && curl https://raw.githubusercontent.com/lightningnetwork/lnd/master/scripts/keys/guggero.asc | gpg --import \
- && gpg --verify manifest-guggero-${lnd_version}.sig manifest-${lnd_version}.txt \
+RUN curl -f -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/lnd-linux-${arch}-${lnd_version}.tar.gz \
+ && curl -f -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-guggero-${lnd_version}.sig \
+ && curl -f -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-${lnd_version}.txt \
+ && curl -f https://raw.githubusercontent.com/lightningnetwork/lnd/master/scripts/keys/guggero.asc | gpg --batch --import \
+ && gpg --batch --verify manifest-guggero-${lnd_version}.sig manifest-${lnd_version}.txt \
  && tar xzf lnd-linux-${arch}-${lnd_version}.tar.gz \
- && mv lnd-linux-${arch}-${lnd_version} /lnd
+ && mv lnd-linux-${arch}-${lnd_version} /lnd && rm lnd-linux-${arch}-${lnd_version}.tar.gz
 
 RUN cd /build/apps/libwebsockets && mkdir build && cd build && cmake .. -DLWS_WITH_LIBUV=ON && make && make install
 
@@ -51,19 +51,19 @@ RUN cd /build/apps/weechat \
 FROM python:3 as python-builder
 
 RUN apt-get update \
-    && apt-get install -y build-essential gzip pandoc \
-    && apt clean all
+    && apt-get install --no-install-recommends -y build-essential gzip pandoc \
+    && apt clean all && rm -rf /var/lib/apt/lists/*;
 
-RUN pip install jinja2-cli
+RUN pip install --no-cache-dir jinja2-cli
 
-RUN curl -sSL https://install.python-poetry.org | python -
+RUN curl -f -sSL https://install.python-poetry.org | python -
 
 WORKDIR /build
 COPY . /build
 
 RUN cd /build/apps/lndmanage && python -m venv .venv
 ENV PATH="/build/apps/lndmanage/.venv/bin:$PATH"
-RUN cd /build/apps/lndmanage && pip install wheel && pip install -r requirements.txt
+RUN cd /build/apps/lndmanage && pip install --no-cache-dir wheel && pip install --no-cache-dir -r requirements.txt
 
 RUN cd /build/apps/suez && /root/.local/bin/poetry export -f requirements.txt --output requirements.txt --without-hashes
 
@@ -84,8 +84,8 @@ FROM golang:1.17-${DEBIAN_VERSION} AS golang-builder
 ARG arch
 
 RUN apt-get update \
-    && apt-get install -y build-essential \
-    && apt clean all
+    && apt-get install --no-install-recommends -y build-essential \
+    && apt clean all && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /build
 COPY . /build
@@ -103,8 +103,8 @@ RUN cd /build/apps/whatsat && mkdir bin && go build -o bin/whatsat
 FROM rust:slim-${DEBIAN_VERSION} AS rust-builder
 
 RUN apt-get update \
-    && apt-get install -y gzip libssl-dev pandoc pkg-config \
-    && apt clean all
+    && apt-get install --no-install-recommends -y gzip libssl-dev pandoc pkg-config \
+    && apt clean all && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /build
 COPY . /build