{
  "startTime": 1674255109227,
  "endTime": 1674255110922,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 32,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 53,
        "columnEnd": 84
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 98,
        "columnEnd": 110
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 225
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 225
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG bitcoin_version=22.0\nARG lnd_version=v0.14.2-beta\n\nARG balanceofsatoshis_tag=v11.55.0\n\nARG node_version=16.14.0\n\n###############\nFROM debian:${DEBIAN_VERSION}-slim as builder\nARG arch\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y asciidoctor bison build-essential cmake curl gnupg libaspell-dev libcurl4-gnutls-dev libgcrypt20-dev libjson-c-dev libncursesw5-dev libgnutls28-dev libwebsockets-dev pkg-config python3-dev zlib1g-dev \\\n    && apt clean all && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /build\nCOPY . /build\n\nARG bitcoin_version\nRUN if [ \"$arch\" = \"arm64\" ]; then export btc_arch=aarch64; else export btc_arch=x86_64; fi \\\n && curl -f -sSLO https://bitcoincore.org/bin/bitcoin-core-${bitcoin_version}/bitcoin-${bitcoin_version}-${btc_arch}-linux-gnu.tar.gz \\\n && curl -f -sSLO https://bitcoincore.org/bin/bitcoin-core-${bitcoin_version}/SHA256SUMS \\\n && sha256sum --ignore-missing --check SHA256SUMS \\\n && tar xzf bitcoin-${bitcoin_version}-${btc_arch}-linux-gnu.tar.gz \\\n && mv bitcoin-${bitcoin_version} /bitcoin && rm bitcoin-${bitcoin_version}-${btc_arch}-linux-gnu.tar.gz\n\nARG lnd_version\nRUN curl -f -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/lnd-linux-${arch}-${lnd_version}.tar.gz \\\n && curl -f -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-guggero-${lnd_version}.sig \\\n && curl -f -sSLO https://github.com/lightningnetwork/lnd/releases/download/${lnd_version}/manifest-${lnd_version}.txt \\\n && curl -f https://raw.githubusercontent.com/lightningnetwork/lnd/master/scripts/keys/guggero.asc | gpg --batch --import \\\n && gpg --batch --verify manifest-guggero-${lnd_version}.sig manifest-${lnd_version}.txt \\\n && tar xzf lnd-linux-${arch}-${lnd_version}.tar.gz \\\n && mv lnd-linux-${arch}-${lnd_version} /lnd && rm lnd-linux-${arch}-${lnd_version}.tar.gz\n\nRUN cd /build/apps/libwebsockets && mkdir build && cd build && cmake .. -DLWS_WITH_LIBUV=ON && make && make install\n\nRUN cd /build/apps/sc-im/src && make\n\nRUN cd /build/apps/ttyd && mkdir build && cd build && cmake .. && make\n\nRUN cd /build/apps/weechat \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DENABLE_PHP=OFF -DENABLE_PERL=OFF -DENABLE_RUBY=OFF -DENABLE_TCL=OFF -DENABLE_LUA=OFF -DENABLE_GUILE=OFF \\\n && make \\\n && make install \\\n && asciidoctor -b manpage /build/apps/weechat/doc/en/weechat.1.en.adoc\n\n###############\nFROM python:3 as python-builder\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y build-essential gzip pandoc \\\n    && apt clean all && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir jinja2-cli\n\nRUN curl -f -sSL https://install.python-poetry.org | python -\n\nWORKDIR /build\nCOPY . /build\n\nRUN cd /build/apps/lndmanage && python -m venv .venv\nENV PATH=\"/build/apps/lndmanage/.venv/bin:$PATH\"\nRUN cd /build/apps/lndmanage && pip install --no-cache-dir wheel && pip install --no-cache-dir -r requirements.txt\n\nRUN cd /build/apps/suez && /root/.local/bin/poetry export -f requirements.txt --output requirements.txt --without-hashes\n\nRUN jinja2 /build/apps/apps.7.md /build/apps/apps.json | pandoc -s -t man | gzip > /build/apps/apps.7.gz\n\nRUN mkdir -p /opt \\\n && mv \\\n    /build/apps/charge-lnd/ \\\n    /build/apps/igniter/ \\\n    /build/apps/lndmanage/ \\\n    /build/apps/perfectly-balanced/ \\\n    /build/apps/rebalance-lnd/ \\\n    /build/apps/suez/ \\\n    /opt\n\n###############\nFROM golang:1.17-${DEBIAN_VERSION} AS golang-builder\nARG arch\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y build-essential \\\n    && apt clean all && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /build\nCOPY . /build\n\nENV GOARCH=${arch}\nENV GOOS=linux\n\nRUN cd /build/apps/circuitbreaker && mkdir bin && go build -o bin/circuitbreaker\n\nRUN cd /build/apps/lntop && mkdir bin && go build -o bin/lntop cmd/lntop/main.go\n\nRUN cd /build/apps/whatsat && mkdir bin && go build -o bin/whatsat\n\n###############\nFROM rust:slim-${DEBIAN_VERSION} AS rust-builder\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y gzip libssl-dev pandoc pkg-config \\\n    && apt clean all && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /build\nCOPY . /build\n\nENV CARGO_TARGET_DIR=/build/target\n\nRUN cd /build/apps/csview && cargo build --release\n\nRUN cd /build/apps/dog && cargo build --release\nRUN pandoc /build/apps/dog/man/dog.1.md -s -t man | gzip > /build/apps/dog/man/dog.1.gz\n\nRUN cd /build/apps/gping && cargo build --release\n\nRUN cd /build/apps/oha && cargo build --release\n\n###############\nFROM python:3.8-slim-${DEBIAN_VERSION}\n\nARG node_version\n\nARG balanceofsatoshis_tag\n\nARG arch\n\nRUN echo \"deb http://deb.debian.org/debian ${DEBIAN_VERSION}-backports main\" | tee -a /etc/apt/sources.list \\\n && apt update \\\n && apt upgrade -y \\\n && apt install -y --no-install-recommends \\\n    bc \\\n    ca-certificates \\\n    curl \\\n    figlet \\\n    git \\\n    iputils-ping \\\n    jq \\\n    less \\\n    libaspell15 \\\n    libc6 \\\n    libcap2 \\\n    libpython3.7 \\\n    libssl1.1 \\\n    libuv1 \\\n    links \\\n    man \\\n    mc \\\n    micro \\\n    nano \\\n    procps \\\n    python3-pip \\\n    screen \\\n    sysstat \\\n    telnet \\\n    tini \\\n    tmux \\\n    vim \\\n    xz-utils \\\n    zlib1g <VERSION_SPECIFIC_DEPENDENCIES> \\\n && apt clean all \\\n && rm -rf /var/lib/apt/lists/* \\\n && if [ \"$arch\" = \"amd64\" ]; then export node_arch=x64; else export node_arch=arm64; fi \\\n && curl -sSLO \"https://nodejs.org/dist/v$node_version/node-v$node_version-linux-$node_arch.tar.xz\" \\\n && tar -xf \"node-v$node_version-linux-$node_arch.tar.xz\" && rm -f \"/node-v$node_version-linux-$node_arch.tar.xz\" \\\n && cd \"/node-v$node_version-linux-$node_arch\" && cp -r bin lib share /usr/local \\\n && cd / && rm -rf \"node-v$node_version-linux-$node_arch\" \\\n && pip3 install --upgrade pip \\\n && pip3 install btc2fiat \\\n && npm i -g balanceofsatoshis@${balanceofsatoshis_tag} \\\n && npm cache clean --force\n\nCOPY --from=python-builder /opt/ /opt/\n\nENV PATH=\"/opt/lndmanage/.venv/bin:$PATH\" LD_LIBRARY_PATH=/usr/local/lib/\n\nRUN chmod +x /opt/igniter/igniter.sh /opt/perfectly-balanced/perfectlybalanced.sh \\\n && cd /opt/charge-lnd \\\n && <INSTALL_MAYBE_NO_GRPC> \\\n && cd /opt/lndmanage \\\n && <INSTALL_MAYBE_NO_GRPC> \\\n && cd /opt/rebalance-lnd \\\n && <INSTALL_MAYBE_NO_GRPC> \\\n && cd /opt/suez \\\n && <INSTALL_MAYBE_NO_GRPC>\n\nCOPY \\\n    --from=builder \\\n    /bitcoin/bin/bitcoin-cli \\\n    /lnd/lncli \\\n    /build/apps/sc-im/src/sc-im \\\n    /build/apps/sc-im/src/scopen \\\n    /build/apps/ttyd/build/ttyd \\\n    /build/apps/weechat/build/src/gui/curses/normal/weechat \\\n    /usr/local/bin/\nCOPY \\\n    --from=builder \\\n    /usr/local/lib/libwebsockets.so \\\n    /usr/local/lib/libwebsockets.so.19 \\\n    /usr/local/lib/libwebsockets-evlib_uv.so \\\n    /usr/local/lib/\nCOPY \\\n    --from=builder \\\n    /usr/local/lib/weechat/plugins/ \\\n    /usr/local/lib/weechat/plugins/\n\nCOPY \\\n    --from=golang-builder \\\n    /build/apps/circuitbreaker/bin/circuitbreaker \\\n    /build/apps/lntop/bin/lntop \\\n    /build/apps/whatsat/bin/whatsat \\\n    /usr/local/bin/\n\nCOPY \\\n    --from=builder \\\n    /bitcoin/share/man/man1/bitcoin-cli.1 \\\n    /build/apps/sc-im/src/sc-im.1 \\\n    /build/apps/weechat/doc/en/weechat.1 \\\n    /usr/local/share/man/man1/\nCOPY --from=python-builder /build/apps/apps.7.gz /usr/share/man/man7/\nCOPY --from=golang-builder /build/apps/circuitbreaker/circuitbreaker-example.yaml /opt/circuitbreaker/\nCOPY --from=rust-builder /build/apps/dog/man/dog.1.gz /usr/local/share/man/man1/\n\nCOPY \\\n    --from=rust-builder \\\n    /build/target/release/csview \\\n    /build/target/release/dog \\\n    /build/target/release/gping \\\n    /build/target/release/oha \\\n    /usr/local/bin/\n\nCOPY motd /etc/motd\nCOPY start.sh lsh_exec.sh /\nRUN chmod +x /start.sh \\\n && groupadd -r lnshell --gid=1000 \\\n && useradd -r -g lnshell --uid=1000 --create-home --shell /bin/bash lnshell\n\nUSER lnshell\nWORKDIR /home/lnshell\n\nCOPY --chown=lnshell:lnshell install-apps.sh bin/* /home/lnshell/.local/bin/\nCOPY --chown=lnshell:lnshell apps/apps.json /home/lnshell/.local/share/\n\nARG version\nRUN /bin/bash /home/lnshell/.local/bin/install-apps.sh \\\n && chmod +x /home/lnshell/.local/bin/* \\\n && echo \"export PATH=/home/lnshell/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" >> /home/lnshell/.bashrc \\\n && echo \"cat /etc/motd\" >> /home/lnshell/.bashrc \\\n && echo \"${version}\" > /home/lnshell/.lnshell-version\n\nEXPOSE 7681\n\nENV USERNAME=umbrel APP_PASSWORD=\n\nCMD [ \"/start.sh\" ]\n"
}