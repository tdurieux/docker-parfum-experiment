{
  "startTime": 1674221125678,
  "endTime": 1674221126186,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedDockerfile": "FROM m0elnx/ubuntu-32bit\n\nRUN apt-get update && apt-get install --no-install-recommends -y vim gcc make nano build-essential gdb && rm -rf /var/lib/apt/lists/*;\n\nCOPY adduser.sh /adduser.sh\nCOPY setgw.sh /setgw.sh\nCOPY addctf.sh /addctf.sh\nCOPY exec.sh /exec.sh\nCOPY start_telnet.sh /start_telnet.sh\nCOPY disable_aslr.sh /disable_aslr.sh\nCOPY disable_compiler_protection.sh /disable_compiler_protection.sh\n\nRUN apt-get install --no-install-recommends -y xinetd telnetd && rm -rf /var/lib/apt/lists/*;\nRUN echo ' service telnet \\n\\\n{\\n\\\n        disable                 = no \\n\\\n        socket_type             = stream\\n\\\n        wait                    = no\\n\\\n        user                    = root\\n\\\n        server                  = /usr/sbin/in.telnetd\\n\\\n        log_on_failure          += HOST\\n\\\n}\\n' \\\n>> /etc/xinetd.d/telnet\n\nLABEL \\\n      type=\"host\" \\\n      caps_add=\"ALL\" \\\n      privileged=true \\\n      actions.exec.command=\"/exec.sh \" \\ \n      actions.exec.description=\"Execute a command in the container\" \\ \n      actions.exec.args.command.val=\"mkdir hello\" \\\n      actions.exec.args.command.type=\"text\" \\\n\n      actions.adduser.command=\"/adduser.sh\" \\ \n      actions.adduser.description=\"Add a new username : <name> <password> \" \\ \n      actions.adduser.args.name.val=\"user\" \\\n      actions.adduser.args.name.type=\"text\" \\\n      actions.adduser.args.name.rule.pattern=\"^[a-zA-Z0-9_-]+$\" \\\n      actions.adduser.args.password.val=\"password\" \\\n      actions.adduser.args.password.type=\"text\" \\\n      actions.adduser.args.password.rule.pattern=\"^[a-zA-Z0-9_-]+$\" \\\n\n      actions.addctf.command=\"/addctf.sh\" \\ \n      actions.addctf.description=\"Add a ctf in /home/<username> directory inside a secret file\" \\ \n      actions.addctf.args.username.val=\"\" \\\n      actions.addctf.args.username.type=\"text\" \\\n      actions.addctf.args.username.rule.pattern=\"^[a-zA-Z0-9_-]+$\" \\\n      actions.addctf.args.ctf.val=\"\" \\\n      actions.addctf.args.ctf.type=\"text\" \\\n\n      actions.disable_aslr.command=\"/disable_aslr.sh\" \\ \n      actions.disable_aslr.description=\"Disable aslr from this container\" \\ \n\n      actions.disable_compiler_protection.command=\"/disable_compiler_protection.sh\" \\ \n      actions.disable_compiler_protection.description=\"Disable compiler protection from this container and make stack executable\" \\ \n\n      actions.start_telnet.command=\"/start_telnet.sh\" \\\n      actions.start_telnet.description=\"Start a telnet server\" \\\n"
}