{
  "startTime": 1674249988928,
  "endTime": 1674249989633,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 37,
        "columnStart": 21,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 21,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile for Building Eventum Release\n# https://github.com/eventum/eventum\n#\n\nARG BUILD_IMAGE=ghcr.io/eventum/eventum:release-image-v2\n\n# Image for building release\nFROM ubuntu:focal AS base\n\nFROM base AS deps\nRUN set -x \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && apt update && apt install -y --no-install-recommends \\\n    bash \\\n    bzr \\\n    composer \\\n    coreutils \\\n    curl \\\n    gettext \\\n    git \\\n    gnupg \\\n    jq \\\n    make \\\n    php-curl \\\n    php-dom \\\n    php-gd \\\n    php-intl \\\n    php-ldap \\\n    php-mbstring \\\n    php-pdo-mysql \\\n    php-pdo-sqlite \\\n    php-xml \\\n    php-zip \\\n    sudo \\\n    unzip \\\n    xz-utils \\\n    && curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \\\n    && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list \\\n    && apt update && apt install -y --no-install-recommends nodejs yarn \\\n\t&& exit 0 && rm -rf /var/lib/apt/lists/*;\n\nFROM deps AS releng\nWORKDIR /app\nRUN \\\n    --mount=type=bind,source=./bin/releng/locales.sh,target=./bin/releng/locales.sh \\\n    bin/releng/locales.sh\n\nRUN \\\n    --mount=type=bind,source=./Makefile,target=./Makefile \\\n    --mount=type=bind,source=./bin/releng/tools.sh,target=./bin/releng/tools.sh \\\n    bin/releng/tools.sh /usr/bin\n\n# docker build . -f bin/releng/Dockerfile -t app --target=stage-release\nFROM releng AS stage-release\nCOPY . .\n\n# docker build . -f bin/releng/Dockerfile -t app --target=build-release\nFROM stage-release AS build-release\nRUN bin/releng/build-release.sh\n\n# docker build . -f bin/releng/Dockerfile -t app --target=build-src\nFROM $BUILD_IMAGE AS build-src\nWORKDIR /src\nRUN \\\n    --mount=type=bind,target=/src \\\n    git archive HEAD | tar -x -C /app && \\\n    bin/releng/update_timestamps.sh / /app\n\n# docker build . -f bin/releng/Dockerfile -t app --target=build-po\nFROM $BUILD_IMAGE AS build-po\nRUN bzr branch lp:~glen666/eventum/po /po\nWORKDIR /app/localization\nRUN \\\n    --mount=type=bind,source=./localization,target=/src/localization,rw \\\n<<eot bash\n    cp -af /po/localization/*.po .\n    make -r -f /src/localization/Makefile touch-po\neot\nRUN \\\n    --mount=type=bind,source=./localization/Makefile,target=./Makefile \\\n    make install clean\n\n# docker build . -f bin/releng/Dockerfile -t app --target=build-vendor\nFROM $BUILD_IMAGE AS build-vendor\nWORKDIR /app\n\n# Install hirak/prestissimo for parallel downloads\nENV COMPOSER_CACHE_DIR=/root/.cache/composer\nRUN \\\n    --mount=type=cache,id=composer,target=/root/.cache/composer \\\n    --mount=type=cache,id=composer-bin,target=/root/.composer \\\n   composer global require hirak/prestissimo --ansi\n\n# Install runtime dependencies\nRUN \\\n    --mount=type=cache,id=composer,target=/root/.cache/composer \\\n    --mount=type=cache,id=composer-bin,target=/root/.composer \\\n    --mount=type=bind,source=./composer.json,target=./composer.json \\\n    --mount=type=bind,source=./composer.lock,target=./composer.lock \\\n    --mount=type=cache,target=./lib/eventum,ro \\\n    composer install --prefer-dist --no-dev --no-suggest --no-scripts --no-autoloader --ansi\n\n# Remove packages defined in \"extra.replace\"\nRUN \\\n    --mount=type=cache,id=composer,target=/root/.cache/composer \\\n    --mount=type=cache,id=composer-bin,target=/root/.composer \\\n    --mount=type=bind,source=./composer.json,target=/src/composer.json \\\n    --mount=type=bind,source=./composer.lock,target=/src/composer.lock \\\n    --mount=type=bind,source=./bin/releng/composer-replace.sh,target=./bin/releng/composer-replace.sh \\\n    cp /src/* . && \\\n    bin/releng/composer-replace.sh\n\n# Cleanup vendor of unwanted files\nRUN \\\n    --mount=type=bind,source=./build.xml,target=/src/build.xml \\\n    phing -f /src/build.xml clean-vendor\n\n# Clean empty dirs\nRUN find vendor -type d -print0 | sort -zr | xargs -0 rmdir --ignore-fail-on-non-empty\n\n# Dump autoloader, including package versions\nARG APP_VERSION=0.0.0\nRUN \\\n    --mount=type=cache,id=composer,target=/root/.cache/composer \\\n    --mount=type=bind,source=./composer.json,target=./composer.json \\\n    --mount=type=bind,source=./composer.lock,target=./composer.lock \\\n    --mount=type=bind,from=build-src,source=/app/lib/eventum,target=./lib/eventum,ro \\\n<<eot\n    if [ \"${APP_VERSION%-*-*}\" != \"$APP_VERSION\" ]; then\n        APP_VERSION=$(IFS=-; set -- $APP_VERSION; echo dev-${1#v}-$2@$3)\n    fi\n    COMPOSER_ROOT_VERSION=$APP_VERSION \\\n    composer dump-autoload --no-dev --ansi\neot\n\n# docker build . -f bin/releng/Dockerfile -t app --target=build-assets\nFROM $BUILD_IMAGE AS build-assets\nWORKDIR /app\nRUN \\\n    --mount=type=cache,id=yarn,target=/usr/local/share/.cache/yarn \\\n    --mount=type=bind,source=./package.json,target=./package.json \\\n    --mount=type=bind,source=./yarn.lock,target=./yarn.lock \\\n    yarn\nRUN \\\n    --mount=type=bind,source=./package.json,target=./package.json \\\n    --mount=type=bind,source=./webpack.mix.js,target=./webpack.mix.js \\\n    --mount=type=bind,source=./res/assets,target=./res/assets \\\n    yarn assets:production\n\n# docker build . -f bin/releng/Dockerfile -t app --target=build-phpcompatinfo\nFROM $BUILD_IMAGE AS build-phpcompatinfo\nRUN \\\n    --mount=type=bind,source=./phpcompatinfo.json,target=./phpcompatinfo.json \\\n    --mount=type=bind,source=./bin,target=./bin \\\n    --mount=type=bind,source=./db,target=./db \\\n    --mount=type=bind,source=./htdocs,target=./htdocs \\\n    --mount=type=bind,source=./lib,target=./lib \\\n    --mount=type=bind,source=./res,target=./res \\\n    --mount=type=bind,source=./src,target=./src \\\n    --mount=type=bind,source=./autoload.php,target=./autoload.php \\\n    --mount=type=bind,source=./init.php,target=./init.php \\\n    --mount=type=bind,source=./phinx.php,target=./phinx.php \\\n\tphpcompatinfo analyser:run --alias current --output PhpCompatInfo.txt\n\n# Avoid empty result\nRUN if grep -qF 'None data source matching' PhpCompatInfo.txt; then exit 2; fi\n\n# docker build . -f bin/releng/Dockerfile -t app --target=build-tar\nFROM $BUILD_IMAGE AS build-tar\nWORKDIR /out\nARG APP_VERSION=unknown\nWORKDIR /eventum-$APP_VERSION\nRUN \\\n    --mount=type=bind,from=build-src,source=/app,target=.,rw \\\n    --mount=type=bind,from=build-po,source=/app/localization,target=./localization,rw \\\n    --mount=type=bind,from=build-src,source=/app/localization/LINGUAS.php,target=./localization/LINGUAS.php,rw \\\n    --mount=type=bind,from=build-src,source=/app/localization/Makefile,target=./localization/Makefile,rw \\\n    --mount=type=bind,from=build-src,source=/app/localization/eventum.pot,target=./localization/eventum.pot,rw \\\n    --mount=type=bind,from=build-assets,source=/app/htdocs/css,target=./htdocs/css,rw \\\n    --mount=type=bind,from=build-assets,source=/app/htdocs/js,target=./htdocs/js,rw \\\n    --mount=type=bind,from=build-assets,source=/app/htdocs/fonts,target=./htdocs/fonts,rw \\\n    --mount=type=bind,from=build-assets,source=/app/htdocs/images,target=./htdocs/images,rw \\\n    --mount=type=bind,from=build-assets,source=/app/htdocs/mix-manifest.json,target=./htdocs/mix-manifest.json,rw \\\n    --mount=type=bind,from=build-src,source=/app/htdocs/images/eventum.gif,target=./htdocs/images/eventum.gif,rw \\\n    --mount=type=bind,from=build-src,source=/app/htdocs/images/no_data.gif,target=./htdocs/images/no_data.gif,rw \\\n    --mount=type=bind,from=build-phpcompatinfo,source=/app/PhpCompatInfo.txt,target=./docs/PhpCompatInfo.txt,rw \\\n    --mount=type=bind,from=build-vendor,source=/app/vendor,target=./vendor,rw \\\n<<eot bash -xe\n    # install dirs and fix permissions\n    install -d var/{log,cache,lock}\n    install -d config/{workflow,custom_field,templates,crm,partner,include}\n    touch var/log/{eventum.log,auth.log,cli.log,errors.log,login_attempts.log}\n    touch config/{private_key.php,secret_key.php,setup.php}\n    chmod -R a+rX,g-w .\n    chmod -R a+rwX config var\n\n    tar -cf /out/eventum-$APP_VERSION.tar \\\n        --exclude=*.phar \\\n        --exclude=.dockerignore \\\n        --exclude=bin/releng \\\n        --exclude=composer.json \\\n        --exclude=composer.lock \\\n        --exclude=contrib/git \\\n        --exclude=contrib/shell-semver \\\n        --exclude=htdocs/debugbar \\\n        --exclude=package.json \\\n        --exclude=res/packages/test \\\n        --exclude=src/Mail/MailStorage.php \\\n        --exclude=symfony.lock \\\n        --exclude=webpack.mix.js \\\n        --exclude=yarn.lock \\\n        -C / eventum-$APP_VERSION/\neot\n\n# APP_VERSION=$(git describe --tags --match=v*)\n# docker build . -f bin/releng/Dockerfile --build-arg=APP_VERSION=${APP_VERSION#v} --target=out -o out\nFROM scratch AS out\nCOPY --from=build-tar /out/* /\n\nFROM releng AS release\n"
}