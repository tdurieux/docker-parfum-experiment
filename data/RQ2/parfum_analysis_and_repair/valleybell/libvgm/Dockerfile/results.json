{
  "startTime": 1674220968428,
  "endTime": 1674220969358,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      gcc \\\n      g++ \\\n      zlib1g-dev \\\n      cmake \\\n      libasound2-dev \\\n      libpulse-dev \\\n      oss4-dev \\\n      mingw-w64 \\\n      make \\\n      curl && \\\n    mkdir -p /src/ && rm -rf /var/lib/apt/lists/*;\n\n# setup toolchain file - i686\nRUN echo \"set(CMAKE_SYSTEM_NAME Windows)\" > /opt/i686-w64-mingw32.cmake && \\\n    echo \"set(TOOLCHAIN_PREFIX i686-w64-mingw32)\" >> /opt/i686-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)' >> /opt/i686-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)' >> /opt/i686-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_Fortran_COMPILER ${TOOLCHAIN_PREFIX}-gfortran)' >> /opt/i686-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_RC_COMPILER ${TOOLCHAIN_PREFIX}-windres)' >> /opt/i686-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_FIND_ROOT_PATH \"/usr/${TOOLCHAIN_PREFIX};/opt/${TOOLCHAIN_PREFIX}\")' >> /opt/i686-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)' >> /opt/i686-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)' >> /opt/i686-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)' >> /opt/i686-w64-mingw32.cmake\n\n# setup toolchain file - x86_64\nRUN echo \"set(CMAKE_SYSTEM_NAME Windows)\" > /opt/x86_64-w64-mingw32.cmake && \\\n    echo \"set(TOOLCHAIN_PREFIX x86_64-w64-mingw32)\" >> /opt/x86_64-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)' >> /opt/x86_64-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)' >> /opt/x86_64-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_Fortran_COMPILER ${TOOLCHAIN_PREFIX}-gfortran)' >> /opt/x86_64-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_RC_COMPILER ${TOOLCHAIN_PREFIX}-windres)' >> /opt/x86_64-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_FIND_ROOT_PATH \"/usr/${TOOLCHAIN_PREFIX};/opt/${TOOLCHAIN_PREFIX}\")' >> /opt/x86_64-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)' >> /opt/x86_64-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)' >> /opt/x86_64-w64-mingw32.cmake && \\\n    echo 'set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)' >> /opt/x86_64-w64-mingw32.cmake\n\nCOPY . /src/libvgm\n\n# regular ol linux compile\nRUN mkdir -p /src/libvgm-build && \\\n    cd /src/libvgm-build && \\\n    cmake /src/libvgm && \\\n    make\n\n# build zlib for win32 and win64\nRUN cd /src && \\\n    curl -f -R -L -O https://zlib.net/zlib-1.2.11.tar.gz && \\\n    tar xf zlib-1.2.11.tar.gz && \\\n    mkdir /src/zlib-win32 && \\\n    cd /src/zlib-win32 && \\\n    cmake \\\n      -DCMAKE_INSTALL_PREFIX=/opt/i686-w64-mingw32 \\\n      -DCMAKE_TOOLCHAIN_FILE=/opt/i686-w64-mingw32.cmake \\\n      /src/zlib-1.2.11 && \\\n    make && \\\n    make install && \\\n    mkdir /src/zlib-win64 && \\\n    cd /src/zlib-win64 && \\\n    cmake \\\n      -DCMAKE_INSTALL_PREFIX=/opt/x86_64-w64-mingw32 \\\n      -DCMAKE_TOOLCHAIN_FILE=/opt/x86_64-w64-mingw32.cmake \\\n      /src/zlib-1.2.11 && \\\n    make && \\\n    make install && \\\n    mv /opt/i686-w64-mingw32/lib/libzlibstatic.a \\\n       /opt/i686-w64-mingw32/lib/libz.a && \\\n    rm /opt/i686-w64-mingw32/lib/libzlib.dll.a && \\\n    rm /opt/i686-w64-mingw32/bin/libzlib.dll && \\\n    mv /opt/x86_64-w64-mingw32/lib/libzlibstatic.a \\\n       /opt/x86_64-w64-mingw32/lib/libz.a && \\\n    rm /opt/x86_64-w64-mingw32/lib/libzlib.dll.a && \\\n    rm /opt/x86_64-w64-mingw32/bin/libzlib.dll && rm zlib-1.2.11.tar.gz\n\n# ubuntu 20.04 includes mingw 7.0.0, xaudio2\n# is supported starting with version 8.0.0,\n# disabling xaudio2 until later upgrade of image\nRUN mkdir -p /src/libvgm-build-win32 && \\\n    cd /src/libvgm-build-win32 && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DAUDIODRV_XAUDIO2=OFF \\\n      -DCMAKE_TOOLCHAIN_FILE=/opt/i686-w64-mingw32.cmake \\\n      /src/libvgm && \\\n    make\n\nRUN mkdir -p /src/libvgm-build-win64 && \\\n    cd /src/libvgm-build-win64 && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DAUDIODRV_XAUDIO2=OFF \\\n      -DCMAKE_TOOLCHAIN_FILE=/opt/x86_64-w64-mingw32.cmake \\\n      /src/libvgm && \\\n    make\n"
}