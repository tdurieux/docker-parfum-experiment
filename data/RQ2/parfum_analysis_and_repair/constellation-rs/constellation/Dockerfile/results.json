{
  "startTime": 1674252247286,
  "endTime": 1674252247865,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 75
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rustlang/rust:nightly as build\nWORKDIR /usr/src\n\n# Install musl-gcc\nRUN apt-get update && apt-get install -y --no-install-recommends musl-tools && rm -rf /var/lib/apt/lists/*;\n\n# Download the target for static linking.\nRUN rustup target add x86_64-unknown-linux-musl\n\n# Create a dummy project and build the app's dependencies.\n# If the Cargo.toml and Cargo.lock files have not changed,\n# we can use the docker build cache and skip this slow step.\nRUN USER=root cargo init --bin && USER=root cargo new --lib constellation-internal && mkdir -p src/bin/constellation && echo 'fn main(){}' > src/bin/constellation/main.rs\nCOPY Cargo.toml build.rs ./\nRUN sed -i '/^###$/q' Cargo.toml\nCOPY constellation-internal/Cargo.toml ./constellation-internal/\nRUN cargo generate-lockfile\nRUN cargo build --bins --features kubernetes --target x86_64-unknown-linux-musl --release\n\n# Copy the source and build the application.\nCOPY . ./\nRUN touch ./constellation-internal/src/lib.rs\nRUN cargo build --locked --frozen --offline --bin constellation --features kubernetes --target x86_64-unknown-linux-musl --release\n\n# Copy the statically-linked binary into a scratch container.\nFROM scratch\nCOPY --from=build /usr/src/target/x86_64-unknown-linux-musl/release/constellation .\nUSER 1000\nENTRYPOINT [\"./constellation\"]\n"
}