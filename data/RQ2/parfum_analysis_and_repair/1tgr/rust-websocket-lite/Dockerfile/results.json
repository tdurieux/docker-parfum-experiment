{
  "startTime": 1674249694404,
  "endTime": 1674249695517,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 6,
        "columnStart": 25,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 67,
        "lineEnd": 73,
        "columnStart": 25,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 6,
        "columnStart": 25,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 73,
        "columnStart": 25,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic-20210416 as deps\n\nRUN apt-get -y update && apt-get -y --no-install-recommends install \\\n    clang \\\n    curl \\\n    libssl-dev \\\n    pkg-config && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /build\nCOPY rust-toolchain .\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal -c clippy rustfmt --default-toolchain $(cat rust-toolchain)\nENV PATH=$PATH:/root/.cargo/bin\nRUN cargo install cargo-fuzz\n\nCOPY rust-nightly-toolchain .\nRUN rustup toolchain install $(cat rust-nightly-toolchain)\n\nFROM deps as src\n\nCOPY Cargo.toml Cargo.lock ./\nCOPY assert-allocations/Cargo.toml assert-allocations/\nCOPY fuzz/Cargo.toml fuzz/\nCOPY hyper-websocket-lite/Cargo.toml hyper-websocket-lite/\nCOPY websocket-codec/Cargo.toml websocket-codec/\nCOPY websocket-lite/Cargo.toml websocket-lite/\n\nRUN mkdir -p \\\n    assert-allocations/src \\\n    hyper-websocket-lite/examples \\\n    hyper-websocket-lite/src \\\n    websocket-codec/benches \\\n    websocket-codec/examples \\\n    websocket-codec/src \\\n    websocket-lite/examples \\\n    websocket-lite/src\n\nRUN touch \\\n    assert-allocations/src/lib.rs \\\n    hyper-websocket-lite/src/lib.rs \\\n    websocket-codec/src/lib.rs \\\n    websocket-lite/src/lib.rs\n\nRUN \\\n    echo \"fn main() {}\" > hyper-websocket-lite/examples/autobahn-server.rs && \\\n    echo \"fn main() {}\" > hyper-websocket-lite/examples/hello-world-server.rs && \\\n    echo \"fn main() {}\" > websocket-codec/benches/bench.rs && \\\n    echo \"fn main() {}\" > websocket-codec/examples/wsinspect.rs && \\\n    echo \"fn main() {}\" > websocket-lite/examples/async-autobahn-client.rs && \\\n    echo \"fn main() {}\" > websocket-lite/examples/autobahn-client.rs && \\\n    echo \"fn main() {}\" > websocket-lite/examples/hello-world-client.rs && \\\n    echo \"fn main() {}\" > websocket-lite/examples/wsdump.rs\n\nENV RUSTFLAGS=-Dwarnings\nRUN cargo build --release --workspace --exclude fuzz --all-targets\n\nCOPY . .\nRUN find . -name \"*.rs\" | grep -v \"^\\./target\" | xargs touch\n\nFROM src as build\nRUN cargo build --release --workspace --exclude fuzz --all-targets\n\nFROM build as fuzz\nRUN mv rust-nightly-toolchain rust-toolchain\nRUN cargo fuzz build\n\nFROM ubuntu:bionic-20210416 as app\n\nRUN apt-get -y update && apt-get -y --no-install-recommends install \\\n    ca-certificates \\\n    netcat \\\n    openssl \\\n    python-pip \\\n    python2.7 \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN pip2 install --no-cache-dir \\\n    autobahntestsuite\n\nRUN pip3 install --no-cache-dir \\\n    websockets\n\nWORKDIR /app\n\nCOPY --from=build \\\n    /build/target/release/examples/async-autobahn-client \\\n    /build/target/release/examples/autobahn-client \\\n    /build/target/release/examples/autobahn-server \\\n    /build/target/release/examples/hello-world-client \\\n    /build/target/release/examples/hello-world-server \\\n    /build/target/release/examples/wsdump \\\n    ./\n"
}