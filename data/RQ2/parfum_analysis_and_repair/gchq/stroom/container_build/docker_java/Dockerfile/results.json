{
  "startTime": 1674252784834,
  "endTime": 1674252786171,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 76,
        "columnStart": 7,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#**********************************************************************\n# Copyright 2018 Crown Copyright\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#**********************************************************************\n\n# This is our java build image for building stroom\n# It also contains plantuml for plant uml image generation\n# Using 'openjdk' on Alpine is not fully supported so using Eclipse Temurin JDK to ensure we have a known jdk version\n# See https://github.com/docker-library/docs/blob/master/openjdk/README.md#openjdkversion-alpine\nFROM eclipse-temurin:17.0.1_12-jdk-alpine\n\n# Work from the shared git repo dir\nWORKDIR /builder/shared\n\n# Pass in the uid/gid of the running user so we can use the same user id\n# in the container so that any files created can be read outside the\n# container.\nARG USER_ID\nARG GROUP_ID   \n# The gid of the docker group on the host, needed so we can add our\n# non-root user to it to get access to the docker.sock\nARG DOCKER_GROUP_ID   \n\n# Pass in the abs path to the repo root on the docker host\n# Needed to allow us to mount it in containers we spawn from here.\nARG HOST_REPO_DIR   \n\n# The IP/hostname of the docker host so we can comminicate with other containers\n# via the host's address\n# The name DOCKER_HOST is used by docker so don't use that.\nARG DOCKER_HOST_IP\n\nARG PLANTUML_VERSION=1.2021.5\n\n# Set the user ID into an env var so the entrypoint can see it\nENV CONTAINER_USER_ID=$USER_ID \\\n    HOST_REPO_DIR=$HOST_REPO_DIR \\\n    DOCKER_HOST_IP=$DOCKER_HOST_IP \\\n    LANG=en_GB.UTF-8\n\n# Set tini as entrypoint\n#ENTRYPOINT [\"/sbin/tini\", \"--\", \"/builder/docker-entrypoint.sh\"]\n\nCMD id\n\n# graphviz, ttf-* for plantuml\n# As this container will be trying to use the docker cli to run/interact with other\n# containers we need to add our non-root user to the docker group i.e. the same gid as\n# on the host, but may have a different name or that gid in the container or none at all.\n# If we have the gid then find its name and add the user to it, if not create a group\n# with that gid then add the user.\n# We need this membership to have access to docker.sock.\nRUN apk add --no-cache \\\n      bash \\\n      curl \\\n      docker-cli \\\n      git \\\n      graphviz \\\n      su-exec \\\n      tini \\\n      ttf-droid \\\n      ttf-droid-nonlatin \\\n    && curl -f \\\n      -Ls \\\n      https://sourceforge.net/projects/plantuml/files/plantuml.$PLANTUML_VERSION.jar/download \\\n      -o /builder/plantuml.jar \\\n    && alias ll='ls -l' \\\n    && apk del curl \\\n    && echo \"USER_ID: [$USER_ID]\" \\\n    && echo \"GROUP_ID: [$GROUP_ID]\" \\\n    && echo \"PLANTUML_VERSION: [$PLANTUML_VERSION]\" \\\n    && echo \"DOCKER_GROUP_ID: [$DOCKER_GROUP_ID]\" \\\n    && echo \\\n    && echo \"Ensuring group exists for group id [${GROUP_ID}]\" \\\n    && group_name=\"$(cat /etc/group | grep \":${GROUP_ID}:\" | awk -F \":\" '{ print $1 }')\" \\\n    && echo \"group_name from /etc/group: [$group_name\"] \\\n    && if [ -n \"${group_name}\" ]; then echo \"Found group [${group_name}] with id ${GROUP_ID}\"; fi \\\n    && if [ ! -n \"${group_name}\" ]; then echo \"Creating group [builder] with id ${GROUP_ID}\"; fi \\\n    && if [ ! -n \"${group_name}\" ]; then addgroup -g \"$GROUP_ID\" -S builder; fi \\\n    && if [ ! -n \"${group_name}\" ]; then group_name=\"builder\"; fi \\\n    && echo \"group_name: [$group_name\"] \\\n    && echo \\\n    && echo \"Ensuring user exists for user id [${USER_ID}]\" \\\n    && user_name=\"$(getent passwd \"$USER_ID\" | cut -d: -f1)\" \\\n    && echo \"user_name from passwd with id ${USER_ID}: [$user_name]\" \\\n    && if [ -n \"${user_name}\" ]; then echo \"Found user [${user_name}] with id ${USER_ID}\"; fi \\\n    && if [ ! -n \"${user_name}\" ]; then echo \"Creating user [builder] with id ${USER_ID}\"; fi \\\n    && if [ ! -n \"${user_name}\" ]; then adduser -u \"$USER_ID\" -S -s /bin/false -D -G \"${group_name}\" builder; fi \\\n    && if [ ! -n \"${user_name}\" ]; then user_name=\"builder\"; fi \\\n    && echo \"user_name: [$user_name]\" \\\n    && echo \\\n    && echo \"Ensuring group exists for docker group id [${DOCKER_GROUP_ID}]\" \\\n    && docker_group_name=\"$(cat /etc/group | grep \":${DOCKER_GROUP_ID}:\" | awk -F \":\" '{ print $1 }')\" \\\n    && if [ -n \"${docker_group_name}\" ]; then echo \"Found group [${docker_group_name}] with docker group id ${DOCKER_GROUP_ID}\"; fi \\\n    && if [ ! -n \"${docker_group_name}\" ]; then echo \"Creating group [docker] with id ${DOCKER_GROUP_ID}\"; fi \\\n    && if [ ! -n \"${docker_group_name}\" ]; then addgroup -g $DOCKER_GROUP_ID -S docker; fi \\\n    && if [ ! -n \"${docker_group_name}\" ]; then docker_group_name=\"docker\"; fi \\\n    && echo \"docker_group_name: $docker_group_name\" \\\n    && echo \"Adding user [builder] to docker group [${docker_group_name}]\" \\\n    && addgroup builder \"${docker_group_name}\" \\\n    && mkdir -p /builder/shared \\\n    && chown -R $USER_ID:$GROUP_ID /builder\n\nCOPY --chown=$USER_ID:$GROUP_ID *.sh /builder/\n\nUSER $USER_ID\n"
}