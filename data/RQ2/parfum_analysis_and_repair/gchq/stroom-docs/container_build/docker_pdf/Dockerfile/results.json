{
  "startTime": 1674251564803,
  "endTime": 1674251565487,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 11
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 5,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# See this link for details of how this is put together\n# https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md\nFROM node:14.19.3-buster-slim\n\nWORKDIR /builder\n\n# Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)\n# Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer\n# installs, work.\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y wget gnupg \\\n    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n    && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\\n    && apt-get update \\\n    && apt-get install -y \\\n      curl \\\n      wait-for-it \\\n      google-chrome-stable \\\n      fonts-ipafont-gothic \\\n      fonts-wqy-zenhei \\\n      fonts-thai-tlwg \\\n      fonts-kacst \\\n      fonts-freefont-ttf \\\n      libxss1 \\\n      --no-install-recommends \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install puppeteer so it's available in the container.\nRUN npm init -y \\\n    && npm install \\\n      puppeteer \\\n      html2canvas \\\n      jspdf && npm cache clean --force;\n\n# Run separately so docker can cache the layer to speed up image re-creation\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl \\\n    wait-for-it \\\n  && echo \"installing npm packages\" \\\n  && npm install html2canvas jspdf \\\n  && mkdir -p /builder/repo && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Pass in the uid/gid of the running user so we can use the same user id\n# in the container so that any files created can be read outside the\n# container.\nARG USER_ID\nARG GROUP_ID   \n\nRUN echo \"USER_ID: [$USER_ID]\" \\\n  && echo \"GROUP_ID: [$GROUP_ID]\" \\\n  && echo \\\n  && echo \"Ensuring group exists for group id [${GROUP_ID}]\" \\\n  && group_name=\"$(cat /etc/group | grep \":${GROUP_ID}:\" | awk -F \":\" '{ print $1 }')\" \\\n  && echo \"group_name from /etc/group: [$group_name\"] \\\n  && if [ -n \"${group_name}\" ]; then echo \"Found group [${group_name}] with id ${GROUP_ID}\"; fi \\\n  && if [ ! -n \"${group_name}\" ]; then echo \"Creating group [builder] with id ${GROUP_ID}\"; fi \\\n  && if [ ! -n \"${group_name}\" ]; then addgroup --gid \"$GROUP_ID\" --system builder; fi \\\n  && if [ ! -n \"${group_name}\" ]; then group_name=\"builder\"; fi \\\n  && echo \"group_name: [$group_name\"] \\\n  && echo \\\n  && echo \"Ensuring user exists for user id [${USER_ID}]\" \\\n  && user_name=\"$(getent passwd \"$USER_ID\" | cut -d: -f1)\" \\\n  && echo \"user_name from passwd with id ${USER_ID}: [$user_name]\" \\\n  && if [ -n \"${user_name}\" ]; then echo \"Found user [${user_name}] with id ${USER_ID}\"; fi \\\n  && if [ ! -n \"${user_name}\" ]; then echo \"Creating user [builder] with id ${USER_ID}\"; fi \\\n  && if [ ! -n \"${user_name}\" ]; then adduser --uid \"$USER_ID\" --system --shell /bin/false --disabled-password --ingroup  \"${group_name}\" builder; fi \\\n  && if [ ! -n \"${user_name}\" ]; then user_name=\"builder\"; fi \\\n  && echo \"user_name: [$user_name]\" \\\n  && mkdir -p \"/home/${user_name}/Downloads\" \\\n  && chown -R \"${USER_ID}:${GROUP_ID}\" \"/home/${user_name}\" \\\n  && chown -R \"${USER_ID}:${GROUP_ID}\" ./node_modules \\\n  && chown -R \"${USER_ID}:${GROUP_ID}\" ./package.json \\\n  && chown -R \"${USER_ID}:${GROUP_ID}\" ./package-lock.json \\\n  && echo \"Done\"\n\nENV PATH=\"${PATH}:/builder/node_modules/.bin\"\n\nCOPY --chown=$USER_ID:$GROUP_ID generate-pdf.js /builder/\n\nUSER $USER_ID\n\n"
}