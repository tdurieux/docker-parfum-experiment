{
  "startTime": 1674254562804,
  "endTime": 1674254563871,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 5,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM buildkite/puppeteer:10.0.0\n\nWORKDIR /builder\n\n# Run separately so docker can cache the layer to speed up image re-creation\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl \\\n    wait-for-it \\\n  && echo \"installing npm packages\" \\\n  && npm install html2canvas jspdf \\\n  && mkdir -p /builder/repo && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Pass in the uid/gid of the running user so we can use the same user id\n# in the container so that any files created can be read outside the\n# container.\nARG USER_ID\nARG GROUP_ID   \n\nRUN echo \"USER_ID: [$USER_ID]\" \\\n  && echo \"GROUP_ID: [$GROUP_ID]\" \\\n  && echo \\\n  && echo \"Ensuring group exists for group id [${GROUP_ID}]\" \\\n  && group_name=\"$(cat /etc/group | grep \":${GROUP_ID}:\" | awk -F \":\" '{ print $1 }')\" \\\n  && echo \"group_name from /etc/group: [$group_name\"] \\\n  && if [ -n \"${group_name}\" ]; then echo \"Found group [${group_name}] with id ${GROUP_ID}\"; fi \\\n  && if [ ! -n \"${group_name}\" ]; then echo \"Creating group [builder] with id ${GROUP_ID}\"; fi \\\n  && if [ ! -n \"${group_name}\" ]; then addgroup --gid \"$GROUP_ID\" --system builder; fi \\\n  && if [ ! -n \"${group_name}\" ]; then group_name=\"builder\"; fi \\\n  && echo \"group_name: [$group_name\"] \\\n  && echo \\\n  && echo \"Ensuring user exists for user id [${USER_ID}]\" \\\n  && user_name=\"$(getent passwd \"$USER_ID\" | cut -d: -f1)\" \\\n  && echo \"user_name from passwd with id ${USER_ID}: [$user_name]\" \\\n  && if [ -n \"${user_name}\" ]; then echo \"Found user [${user_name}] with id ${USER_ID}\"; fi \\\n  && if [ ! -n \"${user_name}\" ]; then echo \"Creating user [builder] with id ${USER_ID}\"; fi \\\n  && if [ ! -n \"${user_name}\" ]; then adduser --uid \"$USER_ID\" --system --shell /bin/false --disabled-password --ingroup  \"${group_name}\" builder; fi \\\n  && if [ ! -n \"${user_name}\" ]; then user_name=\"builder\"; fi \\\n  && echo \"user_name: [$user_name]\" \\\n  && echo \"Done\"\n\nENV  PATH=\"${PATH}:/node_modules/.bin\"\n\nCOPY --chown=$USER_ID:$GROUP_ID generate-pdf.js /builder/\n\nUSER $USER_ID\n\n"
}