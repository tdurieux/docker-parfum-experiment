{
  "startTime": 1674255846360,
  "endTime": 1674255846882,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_VARIANT=alpine\nARG GO_VERSION=1.17\nARG XX_VERSION=1.1.0\n\nARG LIBGIT2_IMG=ghcr.io/fluxcd/golang-with-libgit2-all\nARG LIBGIT2_TAG=v0.1.1\n\nFROM ${LIBGIT2_IMG}:${LIBGIT2_TAG} AS libgit2-libs\n\nFROM --platform=$BUILDPLATFORM tonistiigi/xx:${XX_VERSION} AS xx\n\nFROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-${BASE_VARIANT} as gostable\n\nFROM gostable AS go-linux\n\n# Build-base consists of build platform dependencies and xx.\n# These will be used at current arch to yield execute the cross compilations.\nFROM go-${TARGETOS} AS build-base\n\nRUN apk add --no-cache clang lld pkgconfig\n\nCOPY --from=xx / /\n\n# build-go-mod can still be cached at build platform architecture.\nFROM build-base as build-go-mod\n\n# Configure workspace\nWORKDIR /workspace\n\n# Copy api submodule\nCOPY api/ api/\n\n# Copy modules manifests\nCOPY go.mod go.mod\nCOPY go.sum go.sum\n\n# Cache modules\nRUN go mod download\n\n# The musl-tool-chain layer is an adhoc solution\n# for the problem in which xx gets confused during compilation\n# and a) looks for gold linker and then b) cannot find musl's dynamic linker.\nFROM --platform=$BUILDPLATFORM alpine as musl-tool-chain\n\nCOPY --from=xx / /\n\nRUN apk add --no-cache bash curl tar\n\nWORKDIR /workspace\nCOPY hack/download-musl.sh .\n\nARG TARGETPLATFORM\nARG TARGETARCH\nRUN ROOT_DIR=\"$(pwd)\" TARGET_ARCH=\"$(xx-info alpine-arch)\" ENV_FILE=true \\\n        ./download-musl.sh\n\n# Build stage install per target platform\n# dependency and effectively cross compile the application.\nFROM build-go-mod as build\n\nARG TARGETPLATFORM\n\nCOPY --from=libgit2-libs /usr/local/ /usr/local/\n\n# Some dependencies have to installed\n# for the target platform: https://github.com/tonistiigi/xx#go--cgo\nRUN xx-apk add musl-dev gcc lld\n\nWORKDIR /workspace\n\n# Copy source code\nCOPY main.go main.go\nCOPY controllers/ controllers/\nCOPY pkg/ pkg/\nCOPY internal/ internal/\n\nCOPY --from=musl-tool-chain /workspace/build /workspace/build\n\nARG TARGETPLATFORM\nARG TARGETARCH\nENV CGO_ENABLED=1\n\n# Instead of using xx-go, (cross) compile with vanilla go leveraging musl tool chain.\nRUN export $(cat build/musl/$(xx-info alpine-arch).env | xargs) && \\\n    export LIBRARY_PATH=\"/usr/local/$(xx-info triple):/usr/local/$(xx-info triple)/lib64\" && \\\n    export PKG_CONFIG_PATH=\"/usr/local/$(xx-info triple)/lib/pkgconfig:/usr/local/$(xx-info triple)/lib64/pkgconfig\" && \\\n    export CGO_LDFLAGS=\"$(pkg-config --static --libs --cflags libssh2 openssl libgit2) -static\" && \\\n    GOARCH=$TARGETARCH go build  \\\n        -ldflags \"-s -w\" \\\n        -tags 'netgo,osusergo,static_build' \\\n        -o /source-controller -trimpath main.go;\n\n# Ensure that the binary was cross-compiled correctly to the target platform.\nRUN xx-verify --static /source-controller\n\n\nFROM alpine:3.16\n\nARG TARGETPLATFORM\nRUN apk --no-cache add ca-certificates \\\n  && update-ca-certificates\n\n# Create minimal nsswitch.conf file to prioritize the usage of /etc/hosts over DNS queries.\n# https://github.com/gliderlabs/docker-alpine/issues/367#issuecomment-354316460\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n\n# Copy over binary from build\nCOPY --from=build /source-controller /usr/local/bin/\nCOPY ATTRIBUTIONS.md /\n\nUSER 65534:65534\nENTRYPOINT [ \"source-controller\" ]\n"
}