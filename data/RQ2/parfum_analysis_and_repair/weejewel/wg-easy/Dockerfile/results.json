{
  "startTime": 1674252245386,
  "endTime": 1674252246282,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# There's an issue with node:16-alpine.\n# On Raspberry Pi, the following crash happens:\n\n# #FailureMessage Object: 0x7e87753c\n# #\n# # Fatal error in , line 0\n# # unreachable code\n# #\n# #\n# #\n\nFROM docker.io/library/node:14-alpine@sha256:dc92f36e7cd917816fa2df041d4e9081453366381a00f40398d99e9392e78664 AS build_node_modules\n\n# Copy Web UI\nCOPY src/ /app/\nWORKDIR /app\nRUN npm ci --production\n\n# Copy build result to a new image.\n# This saves a lot of disk space.\nFROM docker.io/library/node:14-alpine@sha256:dc92f36e7cd917816fa2df041d4e9081453366381a00f40398d99e9392e78664\nCOPY --from=build_node_modules /app /app\n\n# Move node_modules one directory up, so during development\n# we don't have to mount it in a volume.\n# This results in much faster reloading!\n#\n# Also, some node_modules might be native, and\n# the architecture & OS of your development machine might differ\n# than what runs inside of docker.\nRUN mv /app/node_modules /node_modules\n\n# Enable this to run `npm run serve`\nRUN npm i -g nodemon && npm cache clean --force;\n\n# Install Linux packages\nRUN apk add -U --no-cache \\\n  wireguard-tools \\\n  dumb-init\n\n# Expose Ports\nEXPOSE 51820/udp\nEXPOSE 51821/tcp\n\n# Set Environment\nENV DEBUG=Server,WireGuard\n\n# Run Web UI\nWORKDIR /app\nCMD [\"/usr/bin/dumb-init\", \"node\", \"server.js\"]\n"
}