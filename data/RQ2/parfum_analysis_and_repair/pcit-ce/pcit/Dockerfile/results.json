{
  "startTime": 1674251301220,
  "endTime": 1674251302062,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 9,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 7,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# @see https://laravel-news.com/multi-stage-docker-builds-for-laravel\n# @see https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md\n\n# ARG PHP_VERSION=7.4.12\n# ARG PHP_VERSION=8.0.5\nARG PHP_VERSION=nightly\nARG NODE_VERSION=15.5.0\nARG USERNAME=khs1994\n\n# 前端构建\nFROM ${USERNAME}/node:git as frontend-builder\n\nARG NODE_REGISTRY=https://registry.npmjs.org\n\nCOPY frontend/package.json /app/pcit/frontend/\n\nRUN --mount=type=cache,target=/root/.npm,id=npm_cache cd /app/pcit/frontend \\\n      set -x \\\n      # && npm install cross-env --registry=${NODE_REGISTRY} \\\n      # && npm install --registry=${NODE_REGISTRY} --production \\\n      && npm install --registry=${NODE_REGISTRY} && npm cache clean --force;\n\nCOPY ./frontend/tsconfig.json /app/pcit/frontend/\nCOPY ./frontend/webpack.config.js /app/pcit/frontend/\nCOPY ./frontend/images /app/pcit/frontend/images\nCOPY ./frontend/js /app/pcit/frontend/js\nCOPY ./frontend/html /app/pcit/frontend/html\nCOPY ./frontend/css /app/pcit/frontend/css\nCOPY ./frontend/src /app/pcit/frontend/src\n\nRUN set -x \\\n      && cd /app/pcit/frontend \\\n      && npm run build\n\n# 安装 composer 依赖\nFROM ${USERNAME}/php:7.4.12-composer-alpine as composer\n\nCOPY composer.json /app/pcit/\nCOPY src /app/pcit/src/\n\nRUN --mount=type=cache,target=/tmp/composer/cache,id=composer_cache cd /app/pcit \\\n      set -x \\\n      && composer config -g --unset repos.packagist \\\n      && composer install --no-dev \\\n      && rm -rf src app\n\n# 整合项目\nFROM ${USERNAME}/php:${PHP_VERSION}-cli-alpine as dump\n\nCOPY --from=composer /app/pcit/vendor /app/pcit/vendor\nCOPY . /app/pcit\nCOPY --from=frontend-builder /app/pcit/public/ /app/pcit/public/\n\nRUN set -x \\\n      && rm -rf /app/pcit/Dockerfile \\\n      && rm -rf /app/pcit/frontend \\\n      && rm -rf /app/pcit/.docker \\\n      \\\n      && /app/pcit/bin/pcit developer:plugin \\\n      && rm -rf /app/pcit/plugins\n\n# ==> pcit\nFROM --platform=$TARGETPLATFORM ${USERNAME}/php:${PHP_VERSION}-cli-alpine as pcit\n\nARG VCS_REF=\"unknow\"\nARG UI_VCS_REF=\"unknow\"\n\nLABEL org.opencontainers.image.revision=$VCS_REF \\\n      ui.revision=$UI_VCS_REF \\\n      org.opencontainers.image.source=\"https://github.com/pcit-ce/pcit\"\n\nCOPY --from=dump /app/pcit/ /app/pcit/\n\nENTRYPOINT [\"/app/pcit/bin/pcitd\"]\n# ENTRYPOINT [\"/app/pcit/bin/pcit\"]\n\nCMD [\"up\"]\n# CMD [\"server\"]\n# CMD [\"agent\"]\n\n# ==> cli\nFROM --platform=$TARGETPLATFORM ${USERNAME}/php:${PHP_VERSION}-cli-alpine as pcit_cli\n\nARG VCS_REF=\"unknow\"\nARG UI_VCS_REF=\"unknow\"\n\nLABEL org.opencontainers.image.revision=$VCS_REF \\\n      ui.revision=$UI_VCS_REF \\\n      org.opencontainers.image.source=\"https://github.com/pcit-ce/pcit\"\n\nCOPY --from=dump /app/pcit/ /app/pcit/\n\nVOLUME [ \"/workspace\" ]\n\nWORKDIR /workspace\n\nENTRYPOINT [\"/app/pcit/bin/pcit\"]\n\nCMD [\"list\"]\n\n# ==> fpm\nFROM --platform=$TARGETPLATFORM ${USERNAME}/php:${PHP_VERSION}-fpm-alpine as pcit_fpm\n\nARG VCS_REF=\"unknow\"\nARG UI_VCS_REF=\"unknow\"\n\nLABEL org.opencontainers.image.revision=$VCS_REF \\\n      ui.revision=$UI_VCS_REF \\\n      org.opencontainers.image.source=\"https://github.com/pcit-ce/pcit\"\n\nCOPY --from=dump /app/pcit/ /app/.pcit/\n\nCOPY .docker/fpm/docker-entrypoint.sh /\n\nENV CI_DAEMON_ENABLED=true\n\nENTRYPOINT [ \"sh\",\"/docker-entrypoint.sh\" ]\n\nCMD [\"up\"]\n# CMD [\"server\"]\n\n# ==> nginx unit\nFROM --platform=$TARGETPLATFORM ${USERNAME}/php:${PHP_VERSION}-unit-alpine as unit\n\nRUN --mount=type=bind,from=khs1994/s6:2.1.0.1,source=/,target=/tmp/s6 \\\n    set -x \\\n    && tar -zxvf /tmp/s6/s6-overlay.tar.gz -C / \\\n# https://github.com/MinchinWeb/docker-base/commit/f5e350dcf3523a424772a1e42a3dba3200d7a2aa \\\n    && ln -s /init /s6-init && rm /tmp/s6/s6-overlay.tar.gz\n\nARG VCS_REF=\"unknow\"\nARG UI_VCS_REF=\"unknow\"\n\nLABEL org.opencontainers.image.revision=$VCS_REF \\\n      ui.revision=$UI_VCS_REF \\\n      org.opencontainers.image.source=\"https://github.com/pcit-ce/pcit\"\n\nCOPY --from=dump /app/pcit/ /app/pcit/\n\nCOPY .docker/unit/docker-entrypoint.sh /\n\nCOPY .docker/unit/config.json /etc/nginx-unit/\n\nCOPY .docker/unit/services.d /etc/services.d\n\nEXPOSE 80\n\nENV CI_DAEMON_ENABLED=true\n\nENTRYPOINT [ \"sh\",\"/docker-entrypoint.sh\" ]\n\nCMD [\"up\"]\n# CMD [\"server\"]\n\n# ==> nginx unit + dockerd + pcitd (all in one)\nFROM --platform=$TARGETPLATFORM docker:dind as all-in-one\n\nCOPY --from=khs1994/php:nightly-unit-alpine /usr/local/ /usr/local\n\nCOPY --from=redis:6.0.6-alpine /usr/local/bin /usr/local/bin/\n\nRUN set -x \\\n#    && sed -i \"s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g\" /etc/apk/repositories \\\n    && runDeps=\"$( \\\n    scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n      | tr ',' '\\n' \\\n      | sort -u \\\n      | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    )\" \\\n    && apk add --no-cache $runDeps \\\n                          tzdata \\\n                          bash \\\n                          curl \\\n    \\\n    && mkdir -p /usr/local/etc/redis /data \\\n    && echo > /usr/local/etc/redis/redis.conf \\\n    \\\n    && mkdir -p /var/log/nginx-unit /usr/local/nginx-unit/tmp \\\n    && ln -sf /dev/stdout /var/log/nginx-unit/nginx-unit.log \\\n    && ln -sf /dev/stdout /var/log/nginx-unit/access.log \\\n    \\\n    && php -v \\\n    && php -d error_reporting=22527 -d display_errors=1 -r 'var_dump(iconv(\"UTF-8\", \"UTF-8//IGNORE\", \"This is the Euro symbol '\\''€'\\''.\"));' \\\n    \\\n    && dockerd -v \\\n    \\\n    && unitd --version \\\n    \\\n    && redis-server -v\n\nRUN --mount=type=bind,from=khs1994/s6:2.1.0.1,source=/,target=/tmp/s6 \\\n    set -x \\\n    && tar -zxvf /tmp/s6/s6-overlay.tar.gz -C / \\\n# https://github.com/MinchinWeb/docker-base/commit/f5e350dcf3523a424772a1e42a3dba3200d7a2aa \\\n    && ln -s /init /s6-init && rm /tmp/s6/s6-overlay.tar.gz\n\nCOPY --from=khs1994/php:nightly-composer-alpine /usr/bin/composer /usr/bin/composer\n\nCOPY .docker/unit/docker-entrypoint.sh /\n\nCOPY .docker/unit/config.json /etc/nginx-unit/\n\nCOPY .docker/unit/services.d /etc/services.d\n\nARG VCS_REF=\"unknow\"\nARG UI_VCS_REF=\"unknow\"\n\nLABEL org.opencontainers.image.revision=$VCS_REF \\\n      ui.revision=$UI_VCS_REF \\\n      org.opencontainers.image.source=\"https://github.com/pcit-ce/pcit\"\n\nCOPY --from=dump /app/pcit/ /app/pcit/\n\nEXPOSE 80\n\nENV CI_DAEMON_ENABLED=true\n\nENV CI_REDIS_HOST=127.0.0.1\n\nENTRYPOINT [ \"sh\",\"/docker-entrypoint.sh\" ]\n\nCMD [\"up\"]\n# CMD [\"server\"]\n\n# dockerd\nVOLUME [ \"/var/lib/docker\" ]\n# redis-server\nVOLUME [ \"/data\" ]\n# nginx unit\nVOLUME [ \"/usr/local/nginx-unit/tmp\", \"/usr/local/nginx-unit/state\" ]\n# vscode remote\nVOLUME [ \"/root/.vscode-server\", \"/root/.vscode-server-insiders\" ]\n\nHEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 CMD [ \"curl\", \"-f\", \"127.0.0.1:80/api/healthz\" ]\n\n# ==> 前端资源\nFROM --platform=$TARGETPLATFORM alpine as frontend\n\nARG VCS_REF=\"unknow\"\nARG UI_VCS_REF=\"unknow\"\n\nLABEL org.opencontainers.image.revision=$VCS_REF \\\n      ui.revision=$UI_VCS_REF \\\n      org.opencontainers.image.source=\"https://github.com/pcit-ce/ui\"\n\nCOPY --from=dump /app/pcit/public/ /app/pcit/public/\n\nVOLUME /var/www/pcit/public\n\nCMD [\"cp\",\"-r\",\"/app/pcit/public/\",\"/var/www/pcit/\"]\n\n#\n# $ docker buildx build -t pcit/pcit --target=pcit .\n#\n# $ docker buildx build -t pcit/pcit --target=frontend .\n#\n# @link https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n#\n"
}