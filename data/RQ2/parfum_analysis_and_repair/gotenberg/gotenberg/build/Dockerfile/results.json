{
  "startTime": 1674249704468,
  "endTime": 1674249705317,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 156
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 153
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Note: ARG instructions do not create additional layers.\n# Instead, next layers will concatenate them.\nARG GOLANG_VERSION\n# Note: we have to repeat ARG instructions in each build stage that uses them.\nARG GOTENBERG_VERSION\n\nFROM golang:$GOLANG_VERSION AS builder\n\nENV CGO_ENABLED 0\n\n# Define the working directory outside of $GOPATH (we're using go modules).\nWORKDIR /home\n\n# Install module dependencies.\nCOPY go.mod go.sum ./\n\nRUN go mod download &&\\\n    go mod verify\n\n# Copy the source code.\nCOPY cmd ./cmd\nCOPY pkg ./pkg\n\n# Build the binary.\nARG GOTENBERG_VERSION\n\nRUN go build -o gotenberg -ldflags \"-X 'github.com/gotenberg/gotenberg/v7/cmd.Version=$GOTENBERG_VERSION'\" cmd/gotenberg/main.go\n\nFROM debian:11-slim\n\nARG GOTENBERG_VERSION\n\nLABEL author=\"Julien Neuhart\" \\\n      description=\"A Docker-powered stateless API for PDF files.\" \\\n      github=\"https://github.com/gotenberg/gotenberg\" \\\n      version=\"$GOTENBERG_VERSION\" \\\n      website=\"https://gotenberg.dev\"\n\n# Improve fonts subpixel hinting and smoothing.\n# Credits:\n# https://github.com/arachnys/athenapdf/issues/69.\n# https://github.com/arachnys/athenapdf/commit/ba25a8d80a25d08d58865519c4cd8756dc9a336d.\nCOPY build/fonts.conf /etc/fonts/conf.d/100-gotenberg.conf\n\n# Simple wrapper around Java and PDFtk.\nCOPY build/pdftk.sh /usr/bin/pdftk\n\n# Setup the Docker image.\nARG GOTENBERG_USER_GID\nARG GOTENBERG_USER_UID\nARG NOTO_COLOR_EMOJI_VERSION\nARG PDFTK_VERSION\n\n# Script for installing either Google Chrome stable on amd64 architecture or\n# Chromium on other architectures.\n# See https://github.com/gotenberg/gotenberg/issues/328.\nCOPY build/install-chromium.sh /tmp/install-chromium.sh\n\nRUN \\\n\n\n    groupadd --gid \"$GOTENBERG_USER_GID\" gotenberg &&\\\n    useradd --uid \"$GOTENBERG_USER_UID\" --gid gotenberg --shell /bin/bash --home /home/gotenberg --no-create-home gotenberg &&\\\n    mkdir /home/gotenberg &&\\\n    chown gotenberg: /home/gotenberg &&\\\n    # Install dependencies required for the next instructions or debugging.\n    # Note: tini is a helper for reaping zombie processes.\n    apt-get update -qq &&\\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y -qq --no-install-recommends curl gnupg htop tini python3 default-jre-headless &&\\\n    ln -s /usr/bin/htop /usr/bin/top && \\\n    # Install fonts.\n    # Credits:\n    # https://github.com/arachnys/athenapdf/blob/master/cli/Dockerfile.\n    # https://help.accusoft.com/PrizmDoc/v12.1/HTML/Installing_Asian_Fonts_on_Ubuntu_and_Debian.html.\n    curl -f -o ./ttf-mscorefonts-installer_3.8_all.deb https://httpredir.debian.org/debian/pool/contrib/m/msttcorefonts/ttf-mscorefonts-installer_3.8_all.deb && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y -qq --no-install-recommends \\\n    ./ttf-mscorefonts-installer_3.8_all.deb \\\n    culmus \\\n    fonts-beng \\\n    fonts-hosny-amiri \\\n    fonts-lklug-sinhala \\\n    fonts-lohit-guru \\\n    fonts-lohit-knda \\\n    fonts-samyak-gujr \\\n    fonts-samyak-mlym \\\n    fonts-samyak-taml \\\n    fonts-sarai \\\n    fonts-sil-abyssinica \\\n    fonts-sil-padauk \\\n    fonts-telu \\\n    fonts-thai-tlwg \\\n    ttf-wqy-zenhei \\\n    fonts-arphic-ukai \\\n    fonts-arphic-uming \\\n    fonts-ipafont-mincho \\\n    fonts-ipafont-gothic \\\n    fonts-unfonts-core \\\n    # LibreOffice recommends.\n    fonts-crosextra-caladea \\\n    fonts-crosextra-carlito \\\n    fonts-dejavu \\\n    fonts-dejavu-extra \\\n    fonts-liberation \\\n    fonts-liberation2 \\\n    fonts-linuxlibertine \\\n    fonts-noto-cjk \\\n    fonts-noto-core \\\n    fonts-noto-mono \\\n    fonts-noto-ui-core \\\n    fonts-sil-gentium \\\n    fonts-sil-gentium-basic && \\\n    rm -f ./ttf-mscorefonts-installer_3.8_all.deb && \\\n    # Add Color and Black-and-White Noto emoji font.\n    # Credits:\n    # https://github.com/gotenberg/gotenberg/pull/325.\n    # https://github.com/googlefonts/noto-emoji.\n    curl -f -Ls \"https://github.com/googlefonts/noto-emoji/raw/$NOTO_COLOR_EMOJI_VERSION/fonts/NotoColorEmoji.ttf\" -o /usr/local/share/fonts/NotoColorEmoji.ttf && \\\n    # Install Google Chrome / Chromium.\n    /tmp/install-chromium.sh && \\\n    # Install LibreOffice.\n    # Note: we use the bullseye-backports distribution to get the latest LibreOffice version.\n    # See:\n    # https://github.com/gotenberg/gotenberg/pull/322.\n    # https://github.com/gotenberg/gotenberg/issues/403.\n    echo \"deb https://httpredir.debian.org/debian/ bullseye-backports main contrib non-free\" >> /etc/apt/sources.list && \\\n    apt-get update -qq && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y -qq --no-install-recommends -t bullseye-backports libreoffice && \\\n    # Download unoconv (Python script).\n    curl -f -Ls https://raw.githubusercontent.com/dagwieers/unoconv/master/unoconv -o /usr/bin/unoconv && \\\n    chmod +x /usr/bin/unoconv && \\\n    # unoconv will look for the Python binary, which has to be at version 3.\n    ln -s /usr/bin/python3 /usr/bin/python && \\\n    # Download PDFtk.\n    # See https://github.com/gotenberg/gotenberg/pull/273. \\\n    curl -f -o /usr/bin/pdftk-all.jar \"https://gitlab.com/api/v4/projects/5024297/packages/generic/pdftk-java/$PDFTK_VERSION/pdftk-all.jar\" && \\\n    chmod a+x /usr/bin/pdftk-all.jar && \\\n    # Download QPDF.\n    DEBIAN_FRONTEND=noninteractive apt-get install -y -qq --no-install-recommends qpdf && \\\n    # See https://github.com/nextcloud/docker/issues/380.\n    mkdir -p /usr/share/man/man1mkdir -p /usr/share/man/man1 && \\\n    # Cleanup.\n    # Note: the Debian image does automatically a clean after each install thanks to a hook.\n    # Therefore, there is no need for apt-get clean.\n    # See https://stackoverflow.com/a/24417119/3248473.\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    # Print versions of main dependencies.\n    chromium --version && \\\n    libreoffice --version && \\\n    unoconv --version && \\\n    pdftk --version && \\\n    qpdf --version\n\n# Copy the Gotenberg binary from the builder stage.\nCOPY --from=builder /home/gotenberg /usr/bin/\n\n# Environment variables required by modules or else.\nENV GC_EXCLUDE_SUBSTR \"hsperfdata_root,hsperfdata_gotenberg\"\nENV CHROMIUM_BIN_PATH /usr/bin/chromium\nENV UNOCONV_BIN_PATH /usr/bin/unoconv\nENV LIBREOFFICE_BIN_PATH /usr/lib/libreoffice/program/soffice.bin\nENV PDFTK_BIN_PATH /usr/bin/pdftk\nENV QPDF_BIN_PATH /usr/bin/qpdf\n\nUSER gotenberg\nWORKDIR /home/gotenberg\n\n# Default API port.\nEXPOSE 3000\n\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\nCMD [ \"gotenberg\" ]\n"
}