{
  "startTime": 1674248086227,
  "endTime": 1674248086682,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:alpine\n\n# env vars\nENV WORK_DIR=\"/srv/fosscord-server\"\nENV DEV_MODE=0\nENV HTTP_PORT=3001\nENV WS_PORT=3002\nENV CDN_PORT=3003\nENV RTC_PORT=3004\nENV ADMIN_PORT=3005\n\n# exposed ports (only for reference, see https://docs.docker.com/engine/reference/builder/#expose)\nEXPOSE ${HTTP_PORT}/tcp ${WS_PORT}/tcp ${CDN_PORT}/tcp ${RTC_PORT}/tcp ${ADMIN_PORT}/tcp\n\n# install required apps\nRUN apk add --no-cache --update git python2 py-pip make build-base\n\n# optionl: packages for debugging/development\nRUN apk add --no-cache sqlite\n\n# download fosscord-server\nWORKDIR $WORK_DIR/src\nRUN git clone https://github.com/fosscord/fosscord-server.git .\n\n# setup and run\nWORKDIR $WORK_DIR/src/bundle\nRUN npm run setup\nRUN npm install @yukikaze-bot/erlpack && npm cache clean --force;\n# RUN npm install mysql --save\n\n# create update script\nRUN printf '#!/bin/sh\\n\\ngit -C $WORK_DIR/src/ checkout master\\ngit -C $WORK_DIR/src/ reset --hard HEAD\\ngit -C $WORK_DIR/src/ pull\\ncd $WORK_DIR/src/bundle/\\nnpm run setup\\n' > $WORK_DIR/update.sh\nRUN chmod +x $WORK_DIR/update.sh\n\n# configure entrypoint file\nRUN printf '#!/bin/sh\\n\\nDEV_MODE=${DEV_MODE:-0}\\n\\nif [ \"$DEV_MODE\" -eq 1 ]; then\\n    tail -f /dev/null\\nelse\\n    cd $WORK_DIR/src/bundle/\\n    npm run start:bundle\\nfi\\n' > $WORK_DIR/entrypoint.sh\nRUN chmod +x $WORK_DIR/entrypoint.sh\n\nWORKDIR $WORK_DIR\nENTRYPOINT [\"./entrypoint.sh\"]\n"
}