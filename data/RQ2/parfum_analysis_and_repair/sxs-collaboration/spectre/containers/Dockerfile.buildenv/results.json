{
  "startTime": 1674251909321,
  "endTime": 1674251912216,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 228,
        "lineEnd": 228,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 300,
        "lineEnd": 300,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 7,
        "columnEnd": 68
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 312,
        "lineEnd": 312,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 52,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 28,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 28,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 212,
        "lineEnd": 212,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 288,
        "lineEnd": 288,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 52,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 28,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 28,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 212,
        "lineEnd": 212,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 288,
        "lineEnd": 288,
        "columnStart": 7,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Distributed under the MIT License.\n# See LICENSE.txt for details.\n\n# If you change this file please push a new image to DockerHub so that the\n# new image is used for testing. Docker must be run as root on your machine,\n# so to build a new image run the following as root (e.g. sudo su):\n#   cd $SPECTRE_HOME/containers\n#   docker build  -t sxscollaboration/spectrebuildenv:latest \\\n#                 -f ./Dockerfile.buildenv .\n# and then to push to DockerHub:\n#   docker push sxscollaboration/spectrebuildenv\n# If you do not have permission to push to DockerHub please coordinate with\n# someone who does. Since changes to this image effect our testing\n# infrastructure it is important all changes be carefully reviewed.\n\nFROM ubuntu:20.04\n\nARG PARALLEL_MAKE_ARG=-j2\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install add-apt-repository\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && add-apt-repository -y ppa:ubuntu-toolchain-r/test && rm -rf /var/lib/apt/lists/*;\n\n# Install required packages for SpECTRE\n#\n# We intentionally don't install libboost-all-dev because that installs\n# Boost.MPI, which installs OpenMPI into the container. When MPI is\n# installed inside the container it makes it very difficult to use\n# Singularity on HPC systems to interface with the system MPI library.\n# The system MPI libraries are usually configured to take advantage of\n# InfiniBand or various other networking layers.\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y gcc-7 g++-7 gfortran-7 \\\n                          gcc-8 g++-8 gfortran-8 \\\n                          gcc-9 g++-9 gfortran-9 \\\n                          gcc-10 g++-10 gfortran-10 \\\n                          gcc-11 g++-11 gfortran-11 \\\n                          gdb git ninja-build autoconf automake \\\n                          bison flex \\\n                          libopenblas-dev liblapack-dev \\\n                          libhdf5-dev hdf5-tools \\\n                          libgsl0-dev \\\n                          clang-8 clang-9 \\\n                          clang-10 clang-format-10 clang-tidy-10 \\\n                          lld \\\n                          wget libncurses-dev \\\n                          lcov cppcheck \\\n                          libboost-dev libboost-program-options-dev \\\n                          libboost-thread-dev libboost-tools-dev libssl-dev \\\n                          libbenchmark-dev \\\n                          libarpack2-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install clang-11 and clang-13\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n    && add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main' \\\n    && apt-get update -y && apt-get install --no-install-recommends -y clang-11 \\\n    && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n    && add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main' \\\n    && apt-get update -y && apt-get install --no-install-recommends -y clang-13 && rm -rf /var/lib/apt/lists/*;\n\n# Install libc++ and jemalloc\n# The second `apt-get update` is to ensure that anything that depends on\n# libc++-dev is properly found. This was an issue on older versions of Ubuntu\n# but might be fixed in the package manager now. To minimize changes, we are\n# leaving the update call in for now.\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y libc++-dev libc++1 libc++abi-dev \\\n    && apt-get update -y \\\n    && apt-get install --no-install-recommends -y libjemalloc2 libjemalloc-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install ccache to cache compilations for reduced compile time\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y ccache && rm -rf /var/lib/apt/lists/*;\n\n# Install Python packages\n# We only install packages that are needed by the build system (e.g. to compile\n# Python bindings or build documentation) or used by Python code that is\n# unit-tested. Any other packages can be installed on-demand.\n# - We use python-is-python3 because on Ubuntu 20.04 /usr/bin/python was removed\n#   to aid in tracking down anything that depends on python 2. However, many\n#   scripts use `/usr/bin/env python` to find python so restore it.\n# - We pin the Numpy version because v1.22 segfaults in Pypp tests, see issue\n#   https://github.com/sxs-collaboration/spectre/issues/3844\n# - We need `coverxygen`, `beautifulsoup4` and `pybtex` to build documentation\n#   on CI. `nbconvert` is used to process ipynb files.\n# - We need `yapf` so the CI can check Python formatting. We use a specific\n# version of it in order to avoid formatting differences between versions.\n# `futures` is needed for `yapf` parallelization on Python 2.\nRUN add-apt-repository universe \\\n    && apt-get update -y \\\n    && apt-get install --no-install-recommends -y curl python2 python2-dev \\\n    && curl -f https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py \\\n    && python2 get-pip.py && rm get-pip.py \\\n    && apt-get install --no-install-recommends -y python3-pip python-is-python3 \\\n    && pip3 --no-cache-dir install -U pip \\\n    && pip2 --no-cache-dir install pybind11~=2.6.1 numpy scipy h5py matplotlib \\\n      pyyaml \\\n    && pip3 --no-cache-dir install pybind11~=2.6.1 \\\n      numpy~=1.21.5 scipy h5py matplotlib \\\n      coverxygen beautifulsoup4 pybtex pyyaml nbconvert \\\n    && pip2 --no-cache-dir install yapf==0.29.0 futures unittest2 \\\n    && pip3 --no-cache-dir install yapf==0.29.0 && rm -rf /var/lib/apt/lists/*;\n\n# Add ruby gems and install coveralls using gem\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y rubygems \\\n    && gem install coveralls-lcov && rm -rf /var/lib/apt/lists/*;\n\n# Enable bash-completion by installing it and then adding it to the .bashrc file\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y bash-completion \\\n    && printf \"if [ -f /etc/bash_completion ] && ! shopt -oq posix; then\\n\\\n    . /etc/bash_completion\\nfi\\n\\n\" >> /root/.bashrc && rm -rf /var/lib/apt/lists/*;\n\n\n# Install cmake.  We need version 3.18.2 so that fortran builds work\n# with ninja.\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2.tar.gz \\\n    && tar -xzf cmake-3.18.2.tar.gz \\\n    && cd cmake-3.18.2 \\\n    && ./bootstrap --prefix=/usr/local \\\n    && make $PARALLEL_MAKE_ARG\\\n    && make install \\\n    && cd .. && rm -rf cmake* && rm cmake-3.18.2.tar.gz\n# Also install our minimum required CMake version so we can test it on CI.\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.12.4/cmake-3.12.4.tar.gz \\\n    && tar -xzf cmake-3.12.4.tar.gz \\\n    && cd cmake-3.12.4 \\\n    && mkdir -p /opt/local/cmake/3.12.4 \\\n    && ./bootstrap --prefix=/opt/local/cmake/3.12.4 \\\n    && make $PARALLEL_MAKE_ARG\\\n    && make install \\\n    && cd .. && rm -rf cmake* && rm cmake-3.12.4.tar.gz\n\n# We install dependencies not available through apt manually rather than using\n# Spack since Spack ends up building a lot of dependencies from scratch\n# that we don't need. Thus, not building the deps with Spack reduces total\n# build time of the Docker image. We build with GCC7 when easily possible to\n# maximize ABI compatibility.\n# - Blaze\nRUN wget https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.8.tar.gz -O blaze.tar.gz \\\n    && tar -xzf blaze.tar.gz \\\n    && mv blaze-* blaze \\\n    && mv blaze/blaze /usr/local/include \\\n    && rm -rf blaze* && rm blaze.tar.gz\n# - Brigand\nRUN git clone https://github.com/edouarda/brigand.git \\\n    && mv brigand/include/brigand /usr/local/include \\\n    && rm -rf brigand\n# - Catch2\nRUN wget https://github.com/catchorg/Catch2/releases/download/v2.11.1/catch.hpp -O catch.hpp \\\n    && mv catch.hpp /usr/local/include\n# - Doxygen\nRUN wget https://github.com/doxygen/doxygen/archive/Release_1_9_3.tar.gz -O doxygen.tar.gz \\\n    && tar -xzf doxygen.tar.gz \\\n    && mv doxygen-* doxygen \\\n    && cd doxygen \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -G \"Unix Makefiles\" -D CMAKE_BUILD_TYPE=Release .. \\\n    && make $PARALLEL_MAKE_ARG \\\n    && make install \\\n    && cd ../.. && rm -rf doxygen* && rm doxygen.tar.gz\n# - Libsharp\nRUN wget https://github.com/Libsharp/libsharp/archive/v1.0.0.tar.gz -O libsharp.tar.gz \\\n    && tar -xzf libsharp.tar.gz \\\n    && mv libsharp-* libsharp_build \\\n    && cd libsharp_build \\\n    && sed -i 's/march=native/march=x86-64/' configure.ac \\\n    && autoconf \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-pic --disable-openmp \\\n    && make $PARALLEL_MAKE_ARG \\\n    && mv auto/bin/* /usr/local/bin \\\n    && mv auto/include/* /usr/local/include \\\n    && mv auto/lib/* /usr/local/lib \\\n    && cd ../ \\\n    && rm -r libsharp* && rm libsharp.tar.gz\n# - LibXSMM\nRUN wget https://github.com/hfp/libxsmm/archive/1.16.1.tar.gz -O libxsmm.tar.gz \\\n    && tar -xzf libxsmm.tar.gz \\\n    && mv libxsmm-* libxsmm \\\n    && cd libxsmm \\\n    && make $PARALLEL_MAKE_ARG PREFIX=/usr/local/ CXX=g++-7 CC=gcc-7 \\\n        FC=gfortran-7 install \\\n    && cd .. \\\n    && rm -rf libxsmm libxsmm.tar.gz\n# - Yaml-cpp\nRUN wget https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.3.tar.gz -O yaml-cpp.tar.gz \\\n    && tar -xzf yaml-cpp.tar.gz \\\n    && mv yaml-cpp-* yaml-cpp-build \\\n    && cd yaml-cpp-build \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -D CMAKE_BUILD_TYPE=Release -D YAML_CPP_BUILD_TESTS=OFF \\\n             -D CMAKE_C_COMPILER=gcc-7 -D CMAKE_CXX_COMPILER=g++-7 \\\n             -D YAML_CPP_BUILD_CONTRIB=OFF \\\n             -D YAML_CPP_BUILD_TOOLS=ON \\\n             -D CMAKE_INSTALL_PREFIX=/usr/local/ \\\n             -D YAML_BUILD_SHARED_LIBS=ON .. \\\n    && make $PARALLEL_MAKE_ARG \\\n    && make install \\\n    && cd ../.. \\\n    && rm -rf yaml-cpp* && rm yaml-cpp.tar.gz\n\n# Install include-what-you-use\n# We specify the CMAKE_PREFIX_PATH to make sure that CMake finds the LLVM libs\n# from the specific LLVM version that IWYU expects. Without this help, CMake\n# can pick up one of the other LLVM libs from the various clang versions that\n# are installed in our container.\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y libclang-10-dev && rm -rf /var/lib/apt/lists/*;\nWORKDIR /work\nRUN wget https://github.com/include-what-you-use/include-what-you-use/archive/clang_10.tar.gz \\\n    && tar -xzf clang_10.tar.gz \\\n    && rm clang_10.tar.gz \\\n    && mkdir /work/include-what-you-use-clang_10/build \\\n    && cd /work/include-what-you-use-clang_10/build \\\n    && cmake -D CMAKE_CXX_COMPILER=clang++-10 \\\n        -D CMAKE_C_COMPILER=clang-10 \\\n        -D CMAKE_PREFIX_PATH=/usr/lib/llvm-10 .. \\\n    && make $PARALLEL_MAKE_ARG \\\n    && make install \\\n    && cd /work \\\n    && rm -rf /work/include-what-you-use-clang_10\n\n# Install xsimd https://github.com/xtensor-stack/xsimd\nRUN wget https://github.com/xtensor-stack/xsimd/archive/refs/tags/8.1.0.tar.gz \\\n    && tar -xzf 8.1.0.tar.gz \\\n    && cd ./xsimd-8.1.0 \\\n    && mkdir build \\\n    && cd ./build \\\n    && cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF \\\n             -D CMAKE_INSTALL_PREFIX=/usr/local ../ \\\n    && make install \\\n    && cd /work \\\n    && rm -rf /work/8.1.0.tar.gz /work/xsimd-8.1.0\n\n# Download and build the Charm++ version used by SpECTRE\n# We build both Clang and GCC versions of Charm++ so that all our tests can\n# use the same build environment.\nWORKDIR /work\n# Charm doesn't support compiling with clang without symbolic links\nRUN ln -s $(which clang++-10) /usr/local/bin/clang++ \\\n    && ln -s $(which clang-10) /usr/local/bin/clang \\\n    && ln -s $(which clang-format-10) /usr/local/bin/clang-format \\\n    && ln -s $(which clang-tidy-10) /usr/local/bin/clang-tidy\n# Build charm with both GCC and clang.\n#\n# We check out only a specific branch in order to reduce the repo size.\n#\n# We remove the `doc` and `example` directories since these aren't useful to us\n# in the container and we want to reduce the size of the container. We do NOT\n# remove the `tmp` directories inside the Charm++ build directories because\n# Charm++ stores non-temporary files (such as headers) that are needed when\n# building with Charm++ in the `tmp` directories.\n#\n# We build  with debug symbols to make debugging Charm++-interoperability\n# easier for people, and build with O2 to reduce build size.\nRUN git clone --single-branch --branch v6.10.2 --depth 1 \\\n        https://github.com/UIUC-PPL/charm charm_6_10_2 \\\n    && cd /work/charm_6_10_2 \\\n    && git checkout v6.10.2 \\\n    && ./build LIBS multicore-linux-x86_64 gcc \\\n      ${PARALLEL_MAKE_ARG} -g -O2 --build-shared \\\n    && ./build LIBS multicore-linux-x86_64 clang \\\n      ${PARALLEL_MAKE_ARG} -g -O2 --build-shared\\\n    && rm -r /work/charm_6_10_2/doc /work/charm_6_10_2/examples\n\nRUN wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/Charm/v7.0.0.patch\n\nRUN git clone --single-branch --branch v7.0.0 --depth 1 \\\n        https://github.com/UIUC-PPL/charm charm_7_0_0 \\\n    && cd /work/charm_7_0_0 \\\n    && git checkout v7.0.0 \\\n    && git apply /work/v7.0.0.patch \\\n    && ./build LIBS multicore-linux-x86_64 gcc \\\n      ${PARALLEL_MAKE_ARG} -g -O2 --build-shared \\\n    && ./build LIBS multicore-linux-x86_64 clang \\\n      ${PARALLEL_MAKE_ARG} -g -O2 --build-shared\\\n    && rm -r /work/charm_7_0_0/doc /work/charm_7_0_0/examples\n\n# - Set the environment variable SPECTRE_CONTAINER so we can check if we are\n#   inside a container (0 is true in bash)\n# - The singularity containers work better if the locale is set properly\nENV SPECTRE_CONTAINER 0\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y locales language-pack-fi language-pack-en \\\n    && export LANGUAGE=en_US.UTF-8 \\\n    && export LANG=en_US.UTF-8 \\\n    && export LC_ALL=en_US.UTF-8 \\\n    && locale-gen en_US.UTF-8 \\\n    && dpkg-reconfigure locales && rm -rf /var/lib/apt/lists/*;\n\n# Install bibtex for Doxygen bibliography management\n# We first install the TeXLive infrastructure according to the configuration in\n# support/TeXLive/texlive.profile and then use it to install the bibtex package.\nRUN mkdir /work/texlive\nWORKDIR /work/texlive\nRUN wget https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \\\n    && tar -xzf install-tl-unx.tar.gz \\\n    && rm install-tl-unx.tar.gz \\\n    && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/TeXLive/texlive.profile \\\n    && install-tl-*/install-tl -profile=texlive.profile \\\n    && rm -r install-tl-* texlive.profile install-tl.log \\\n    && /work/texlive/bin/x86_64-linux/tlmgr install bibtex\nENV PATH=\"${PATH}:/work/texlive/bin/x86_64-linux\"\n\n# Download and extract the intel Software Development Emulator binaries\nWORKDIR /work\nRUN wget https://downloadmirror.intel.com/684899/sde-external-9.0.0-2021-11-07-lin.tar.xz -O sde-external.tar.xz \\\n    && tar -xJf sde-external.tar.xz \\\n    && mv sde-external-* sde \\\n    && rm sde-* && rm sde-external.tar.xz\n\n# Remove the apt-get cache in order to reduce image size\nRUN apt-get -y clean\n"
}