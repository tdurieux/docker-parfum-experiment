diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/sxs-collaboration/spectre/containers/Dockerfile.buildenv b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/sxs-collaboration/spectre/containers/Dockerfile.buildenv/repaired.Dockerfile
index 524fb89..a8e3bd8 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/sxs-collaboration/spectre/containers/Dockerfile.buildenv
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/sxs-collaboration/spectre/containers/Dockerfile.buildenv/repaired.Dockerfile
@@ -20,8 +20,8 @@ ARG DEBIAN_FRONTEND=noninteractive
 
 # Install add-apt-repository
 RUN apt-get update -y \
-    && apt-get install -y software-properties-common \
-    && add-apt-repository -y ppa:ubuntu-toolchain-r/test
+    && apt-get install --no-install-recommends -y software-properties-common \
+    && add-apt-repository -y ppa:ubuntu-toolchain-r/test && rm -rf /var/lib/apt/lists/*;
 
 # Install required packages for SpECTRE
 #
@@ -32,7 +32,7 @@ RUN apt-get update -y \
 # The system MPI libraries are usually configured to take advantage of
 # InfiniBand or various other networking layers.
 RUN apt-get update -y \
-    && apt-get install -y gcc-7 g++-7 gfortran-7 \
+    && apt-get install --no-install-recommends -y gcc-7 g++-7 gfortran-7 \
                           gcc-8 g++-8 gfortran-8 \
                           gcc-9 g++-9 gfortran-9 \
                           gcc-10 g++-10 gfortran-10 \
@@ -50,15 +50,15 @@ RUN apt-get update -y \
                           libboost-dev libboost-program-options-dev \
                           libboost-thread-dev libboost-tools-dev libssl-dev \
                           libbenchmark-dev \
-                          libarpack2-dev
+                          libarpack2-dev && rm -rf /var/lib/apt/lists/*;
 
 # Install clang-11 and clang-13
 RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
     && add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main' \
-    && apt-get update -y && apt-get install -y clang-11 \
+    && apt-get update -y && apt-get install --no-install-recommends -y clang-11 \
     && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
     && add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main' \
-    && apt-get update -y && apt-get install -y clang-13
+    && apt-get update -y && apt-get install --no-install-recommends -y clang-13 && rm -rf /var/lib/apt/lists/*;
 
 # Install libc++ and jemalloc
 # The second `apt-get update` is to ensure that anything that depends on
@@ -66,13 +66,13 @@ RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
 # but might be fixed in the package manager now. To minimize changes, we are
 # leaving the update call in for now.
 RUN apt-get update -y \
-    && apt-get install -y libc++-dev libc++1 libc++abi-dev \
+    && apt-get install --no-install-recommends -y libc++-dev libc++1 libc++abi-dev \
     && apt-get update -y \
-    && apt-get install -y libjemalloc2 libjemalloc-dev
+    && apt-get install --no-install-recommends -y libjemalloc2 libjemalloc-dev && rm -rf /var/lib/apt/lists/*;
 
 # Install ccache to cache compilations for reduced compile time
 RUN apt-get update -y \
-    && apt-get install -y ccache
+    && apt-get install --no-install-recommends -y ccache && rm -rf /var/lib/apt/lists/*;
 
 # Install Python packages
 # We only install packages that are needed by the build system (e.g. to compile
@@ -90,10 +90,10 @@ RUN apt-get update -y \
 # `futures` is needed for `yapf` parallelization on Python 2.
 RUN add-apt-repository universe \
     && apt-get update -y \
-    && apt-get install -y curl python2 python2-dev \
-    && curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py \
+    && apt-get install --no-install-recommends -y curl python2 python2-dev \
+    && curl -f https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py \
     && python2 get-pip.py && rm get-pip.py \
-    && apt-get install -y python3-pip python-is-python3 \
+    && apt-get install --no-install-recommends -y python3-pip python-is-python3 \
     && pip3 --no-cache-dir install -U pip \
     && pip2 --no-cache-dir install pybind11~=2.6.1 numpy scipy h5py matplotlib \
       pyyaml \
@@ -101,18 +101,18 @@ RUN add-apt-repository universe \
       numpy~=1.21.5 scipy h5py matplotlib \
       coverxygen beautifulsoup4 pybtex pyyaml nbconvert \
     && pip2 --no-cache-dir install yapf==0.29.0 futures unittest2 \
-    && pip3 --no-cache-dir install yapf==0.29.0
+    && pip3 --no-cache-dir install yapf==0.29.0 && rm -rf /var/lib/apt/lists/*;
 
 # Add ruby gems and install coveralls using gem
 RUN apt-get update -y \
-    && apt-get install -y rubygems \
-    && gem install coveralls-lcov
+    && apt-get install --no-install-recommends -y rubygems \
+    && gem install coveralls-lcov && rm -rf /var/lib/apt/lists/*;
 
 # Enable bash-completion by installing it and then adding it to the .bashrc file
 RUN apt-get update -y \
-    && apt-get install -y bash-completion \
+    && apt-get install --no-install-recommends -y bash-completion \
     && printf "if [ -f /etc/bash_completion ] && ! shopt -oq posix; then\n\
-    . /etc/bash_completion\nfi\n\n" >> /root/.bashrc
+    . /etc/bash_completion\nfi\n\n" >> /root/.bashrc && rm -rf /var/lib/apt/lists/*;
 
 
 # Install cmake.  We need version 3.18.2 so that fortran builds work
@@ -123,7 +123,7 @@ RUN wget https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2
     && ./bootstrap --prefix=/usr/local \
     && make $PARALLEL_MAKE_ARG\
     && make install \
-    && cd .. && rm -rf cmake*
+    && cd .. && rm -rf cmake* && rm cmake-3.18.2.tar.gz
 # Also install our minimum required CMake version so we can test it on CI.
 RUN wget https://github.com/Kitware/CMake/releases/download/v3.12.4/cmake-3.12.4.tar.gz \
     && tar -xzf cmake-3.12.4.tar.gz \
@@ -132,7 +132,7 @@ RUN wget https://github.com/Kitware/CMake/releases/download/v3.12.4/cmake-3.12.4
     && ./bootstrap --prefix=/opt/local/cmake/3.12.4 \
     && make $PARALLEL_MAKE_ARG\
     && make install \
-    && cd .. && rm -rf cmake*
+    && cd .. && rm -rf cmake* && rm cmake-3.12.4.tar.gz
 
 # We install dependencies not available through apt manually rather than using
 # Spack since Spack ends up building a lot of dependencies from scratch
@@ -144,7 +144,7 @@ RUN wget https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.8.tar.gz -O bla
     && tar -xzf blaze.tar.gz \
     && mv blaze-* blaze \
     && mv blaze/blaze /usr/local/include \
-    && rm -rf blaze*
+    && rm -rf blaze* && rm blaze.tar.gz
 # - Brigand
 RUN git clone https://github.com/edouarda/brigand.git \
     && mv brigand/include/brigand /usr/local/include \
@@ -162,7 +162,7 @@ RUN wget https://github.com/doxygen/doxygen/archive/Release_1_9_3.tar.gz -O doxy
     && cmake -G "Unix Makefiles" -D CMAKE_BUILD_TYPE=Release .. \
     && make $PARALLEL_MAKE_ARG \
     && make install \
-    && cd ../.. && rm -rf doxygen*
+    && cd ../.. && rm -rf doxygen* && rm doxygen.tar.gz
 # - Libsharp
 RUN wget https://github.com/Libsharp/libsharp/archive/v1.0.0.tar.gz -O libsharp.tar.gz \
     && tar -xzf libsharp.tar.gz \
@@ -170,13 +170,13 @@ RUN wget https://github.com/Libsharp/libsharp/archive/v1.0.0.tar.gz -O libsharp.
     && cd libsharp_build \
     && sed -i 's/march=native/march=x86-64/' configure.ac \
     && autoconf \
-    && ./configure --prefix=/usr/local --enable-pic --disable-openmp \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local --enable-pic --disable-openmp \
     && make $PARALLEL_MAKE_ARG \
     && mv auto/bin/* /usr/local/bin \
     && mv auto/include/* /usr/local/include \
     && mv auto/lib/* /usr/local/lib \
     && cd ../ \
-    && rm -r libsharp*
+    && rm -r libsharp* && rm libsharp.tar.gz
 # - LibXSMM
 RUN wget https://github.com/hfp/libxsmm/archive/1.16.1.tar.gz -O libxsmm.tar.gz \
     && tar -xzf libxsmm.tar.gz \
@@ -202,7 +202,7 @@ RUN wget https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.3.tar.gz -O yam
     && make $PARALLEL_MAKE_ARG \
     && make install \
     && cd ../.. \
-    && rm -rf yaml-cpp*
+    && rm -rf yaml-cpp* && rm yaml-cpp.tar.gz
 
 # Install include-what-you-use
 # We specify the CMAKE_PREFIX_PATH to make sure that CMake finds the LLVM libs
@@ -210,7 +210,7 @@ RUN wget https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.3.tar.gz -O yam
 # can pick up one of the other LLVM libs from the various clang versions that
 # are installed in our container.
 RUN apt-get update -y \
-    && apt-get install -y libclang-10-dev
+    && apt-get install --no-install-recommends -y libclang-10-dev && rm -rf /var/lib/apt/lists/*;
 WORKDIR /work
 RUN wget https://github.com/include-what-you-use/include-what-you-use/archive/clang_10.tar.gz \
     && tar -xzf clang_10.tar.gz \
@@ -226,9 +226,9 @@ RUN wget https://github.com/include-what-you-use/include-what-you-use/archive/cl
     && rm -rf /work/include-what-you-use-clang_10
 
 # Install xsimd https://github.com/xtensor-stack/xsimd
-RUN wget http://github.com/xtensor-stack/xsimd/archive/refs/tags/8.1.0.tar.gz \
+RUN wget https://github.com/xtensor-stack/xsimd/archive/refs/tags/8.1.0.tar.gz \
     && tar -xzf 8.1.0.tar.gz \
-    && cd ./xsimd-8.1.0  \
+    && cd ./xsimd-8.1.0 \
     && mkdir build \
     && cd ./build \
     && cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF \
@@ -286,19 +286,19 @@ RUN git clone --single-branch --branch v7.0.0 --depth 1 \
 # - The singularity containers work better if the locale is set properly
 ENV SPECTRE_CONTAINER 0
 RUN apt-get update -y \
-    && apt-get install -y locales language-pack-fi language-pack-en \
+    && apt-get install --no-install-recommends -y locales language-pack-fi language-pack-en \
     && export LANGUAGE=en_US.UTF-8 \
     && export LANG=en_US.UTF-8 \
     && export LC_ALL=en_US.UTF-8 \
     && locale-gen en_US.UTF-8 \
-    && dpkg-reconfigure locales
+    && dpkg-reconfigure locales && rm -rf /var/lib/apt/lists/*;
 
 # Install bibtex for Doxygen bibliography management
 # We first install the TeXLive infrastructure according to the configuration in
 # support/TeXLive/texlive.profile and then use it to install the bibtex package.
 RUN mkdir /work/texlive
 WORKDIR /work/texlive
-RUN wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \
+RUN wget https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \
     && tar -xzf install-tl-unx.tar.gz \
     && rm install-tl-unx.tar.gz \
     && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/TeXLive/texlive.profile \
@@ -312,7 +312,7 @@ WORKDIR /work
 RUN wget https://downloadmirror.intel.com/684899/sde-external-9.0.0-2021-11-07-lin.tar.xz -O sde-external.tar.xz \
     && tar -xJf sde-external.tar.xz \
     && mv sde-external-* sde \
-    && rm sde-*
+    && rm sde-* && rm sde-external.tar.xz
 
 # Remove the apt-get cache in order to reduce image size
 RUN apt-get -y clean