{
  "startTime": 1674255925558,
  "endTime": 1674255926181,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 1,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 1,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 1,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 1,
        "columnEnd": 7
      }
    }
  ],
  "repairedDockerfile": "# ------------------------------------------------------------------------------\n# App Base Stage\n# ------------------------------------------------------------------------------\nFROM debian:bullseye AS app-base\n\nENV DEBIAN_FRONTEND=noninteractive\n\nWORKDIR /usr/src/webhooky\n\nRUN apt-get update && apt-get install -y \\\n\tasciidoctor \\\n\tca-certificates \\\n\tlibpq5 \\\n\tlibssl1.1 \\\n\tlibusb-1.0-0-dev \\\n\tlmodern \\\n    p7zip \\\n\tpandoc \\\n\tpoppler-utils \\\n\truby \\\n\tcurl \\\n    texlive-latex-base \\\n\ttexlive-fonts-recommended \\\n\ttexlive-fonts-extra \\\n\ttexlive-latex-extra \\\n\t--no-install-recommends \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - && \\\n\tapt install -y --no-install-recommends \\\n\tnodejs && rm -rf /var/lib/apt/lists/*;\n\nRUN gem install \\\n\tasciidoctor-pdf \\\n\tasciidoctor-mermaid \\\n\trouge\n\nRUN cd /usr/local/lib && \\\n\tnpm install @mermaid-js/mermaid-cli && \\\n\tln -s ../lib/node_modules/.bin/mmdc /usr/local/bin/mmdc && npm cache clean --force;\n\n# ------------------------------------------------------------------------------\n# Cargo Nightly Stage\n# ------------------------------------------------------------------------------\n\nFROM rust:latest AS cargo-nightly\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN rustup default nightly\n\nWORKDIR /usr/src/webhooky\n\n\n# ------------------------------------------------------------------------------\n# Cargo Build Stage\n# ------------------------------------------------------------------------------\n\nFROM cargo-nightly AS cargo-build\n\nRUN apt-get update && apt-get install -y \\\n\tca-certificates \\\n\tlibpq-dev \\\n\tlibssl-dev \\\n\tlibusb-1.0-0-dev \\\n\t--no-install-recommends \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nCOPY webhooky/src/dummy.rs ./src/dummy.rs\n\nCOPY webhooky/Cargo.toml ./Cargo.toml\n\nCOPY Cargo.lock ./Cargo.lock\n\nCOPY rust-toolchain ./rust-toolchain\n\n# Move the deps we need to compile.\nCOPY cio ../cio\n\nCOPY macros ../macros\n\nCOPY mailchimp-minimal-api ../mailchimp-minimal-api\n\nCOPY diesel-sentry ../diesel-sentry\n\nCOPY zoho-client ../zoho-client\n\nRUN sed -i 's#main.rs#dummy.rs#' ./Cargo.toml\n\nRUN cargo build --bin webhooky\n\nRUN sed -i 's#dummy.rs#main.rs#' ./Cargo.toml\n\nCOPY webhooky/src ./src\n\nRUN cargo build --bin webhooky\n\n# ------------------------------------------------------------------------------\n# Final Stage\n# ------------------------------------------------------------------------------\n\nFROM app-base\n\nCOPY --from=cargo-build /usr/src/webhooky/target/debug/webhooky /usr/bin/webhooky\n\nCMD [\"webhooky\", \"--json\", \"server\"]\n"
}