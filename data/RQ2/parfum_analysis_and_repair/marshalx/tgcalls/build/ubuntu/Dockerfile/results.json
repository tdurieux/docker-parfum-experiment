{
  "startTime": 1674253654958,
  "endTime": 1674253656555,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:latest AS builder\n\nENV DEBIAN_FRONTEND=noninteractive\nENV PKG_CONFIG_PATH /usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig\nENV OPENSSL_PREFIX /usr/local/desktop-app/openssl-1.1.1\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n    wget \\\n    pkg-config \\\n    git \\\n    build-essential \\\n    cmake \\\n    autoconf \\\n    libtool \\\n    yasm \\\n    libasound2-dev \\\n    libpulse-dev \\\n    ninja-build \\\n    python-dev-is-python3 && rm -rf /var/lib/apt/lists/*;\n\nENV MainPath /usr/src\nENV LibrariesPath ${MainPath}/Libraries\nWORKDIR $LibrariesPath\n\nRUN wget https://bootstrap.pypa.io/get-pip.py\nRUN python3 get-pip.py\nRUN rm get-pip.py\n\nFROM builder AS mozjpeg\nRUN git clone -b v4.0.1-rc2 --depth=1 https://github.com/mozilla/mozjpeg.git\n\nWORKDIR mozjpeg\nRUN cmake -B build . \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/usr/local \\\n    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n    -DWITH_JAVA=OFF \\\n    -DWITH_JPEG8=ON \\\n    -DPNG_SUPPORTED=OFF\n\nRUN cmake --build build -j$(nproc)\nRUN DESTDIR=\"$LibrariesPath/mozjpeg-cache\" cmake --install build\n\nWORKDIR ..\n\nFROM builder AS opus\nRUN git clone -b v1.3 --depth=1 https://github.com/xiph/opus.git\n\nWORKDIR opus\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-pic\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/opus-cache\" install\n\nFROM builder AS openssl\nENV opensslDir openssl_1_1_1\nRUN git clone -b OpenSSL_1_1_1-stable --depth=1 \\\n    https://github.com/openssl/openssl.git $opensslDir\n\nWORKDIR ${opensslDir}\nRUN ./config \\\n    --prefix=\"$OPENSSL_PREFIX\" \\\n    --openssldir=/etc/ssl \\\n    no-tests \\\n    no-dso\n\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/openssl-cache\" install_sw\n\nWORKDIR ..\n\nFROM builder AS ffmpeg\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nRUN git clone -b release/4.4 --depth=1 https://github.com/FFmpeg/FFmpeg.git ffmpeg\n\nWORKDIR ffmpeg\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --disable-debug \\\n    --disable-programs \\\n    --disable-doc \\\n    --disable-network \\\n    --disable-autodetect \\\n    --disable-everything \\\n    --disable-asm \\\n    --disable-iconv \\\n    --disable-shared \\\n    --enable-static \\\n    --enable-libopus \\\n    --enable-pic \\\n    --enable-protocol=file \\\n    --enable-hwaccel=h264_vaapi \\\n    --enable-hwaccel=h264_vdpau \\\n    --enable-hwaccel=mpeg4_vaapi \\\n    --enable-hwaccel=mpeg4_vdpau \\\n    --enable-decoder=aac \\\n    --enable-decoder=aac_fixed \\\n    --enable-decoder=aac_latm \\\n    --enable-decoder=aasc \\\n    --enable-decoder=alac \\\n    --enable-decoder=flac \\\n    --enable-decoder=gif \\\n    --enable-decoder=h264 \\\n    --enable-decoder=h264_vdpau \\\n    --enable-decoder=hevc \\\n    --enable-decoder=mp1 \\\n    --enable-decoder=mp1float \\\n    --enable-decoder=mp2 \\\n    --enable-decoder=mp2float \\\n    --enable-decoder=mp3 \\\n    --enable-decoder=mp3adu \\\n    --enable-decoder=mp3adufloat \\\n    --enable-decoder=mp3float \\\n    --enable-decoder=mp3on4 \\\n    --enable-decoder=mp3on4float \\\n    --enable-decoder=mpeg4 \\\n    --enable-decoder=mpeg4_vdpau \\\n    --enable-decoder=msmpeg4v2 \\\n    --enable-decoder=msmpeg4v3 \\\n    --enable-decoder=opus \\\n    --enable-decoder=pcm_alaw \\\n    --enable-decoder=pcm_f32be \\\n    --enable-decoder=pcm_f32le \\\n    --enable-decoder=pcm_f64be \\\n    --enable-decoder=pcm_f64le \\\n    --enable-decoder=pcm_lxf \\\n    --enable-decoder=pcm_mulaw \\\n    --enable-decoder=pcm_s16be \\\n    --enable-decoder=pcm_s16be_planar \\\n    --enable-decoder=pcm_s16le \\\n    --enable-decoder=pcm_s16le_planar \\\n    --enable-decoder=pcm_s24be \\\n    --enable-decoder=pcm_s24daud \\\n    --enable-decoder=pcm_s24le \\\n    --enable-decoder=pcm_s24le_planar \\\n    --enable-decoder=pcm_s32be \\\n    --enable-decoder=pcm_s32le \\\n    --enable-decoder=pcm_s32le_planar \\\n    --enable-decoder=pcm_s64be \\\n    --enable-decoder=pcm_s64le \\\n    --enable-decoder=pcm_s8 \\\n    --enable-decoder=pcm_s8_planar \\\n    --enable-decoder=pcm_u16be \\\n    --enable-decoder=pcm_u16le \\\n    --enable-decoder=pcm_u24be \\\n    --enable-decoder=pcm_u24le \\\n    --enable-decoder=pcm_u32be \\\n    --enable-decoder=pcm_u32le \\\n    --enable-decoder=pcm_u8 \\\n    --enable-decoder=pcm_zork \\\n    --enable-decoder=vorbis \\\n    --enable-decoder=wavpack \\\n    --enable-decoder=wmalossless \\\n    --enable-decoder=wmapro \\\n    --enable-decoder=wmav1 \\\n    --enable-decoder=wmav2 \\\n    --enable-decoder=wmavoice \\\n    --enable-encoder=libopus \\\n    --enable-parser=aac \\\n    --enable-parser=aac_latm \\\n    --enable-parser=flac \\\n    --enable-parser=h264 \\\n    --enable-parser=hevc \\\n    --enable-parser=mpeg4video \\\n    --enable-parser=mpegaudio \\\n    --enable-parser=opus \\\n    --enable-parser=vorbis \\\n    --enable-demuxer=aac \\\n    --enable-demuxer=flac \\\n    --enable-demuxer=gif \\\n    --enable-demuxer=h264 \\\n    --enable-demuxer=hevc \\\n    --enable-demuxer=m4v \\\n    --enable-demuxer=mov \\\n    --enable-demuxer=mp3 \\\n    --enable-demuxer=ogg \\\n    --enable-demuxer=wav \\\n    --enable-muxer=ogg \\\n    --enable-muxer=opus\n\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/ffmpeg-cache\" install\n\nWORKDIR ..\n\nFROM builder AS webrtc\n\nCOPY --from=mozjpeg ${LibrariesPath}/mozjpeg-cache /\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nCOPY --from=ffmpeg ${LibrariesPath}/ffmpeg-cache /\nCOPY --from=openssl ${LibrariesPath}/openssl-cache /\n\nCOPY tgcalls/third_party/webrtc ${LibrariesPath}/webrtc\n\nWORKDIR webrtc\n\nRUN cmake -B out/Release . \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DTG_OWT_SPECIAL_TARGET=linux \\\n    -DBUILD_SHARED_LIBS=OFF \\\n    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n    -DTG_OWT_USE_PIPEWIRE=OFF \\\n    -DTG_OWT_LIBJPEG_INCLUDE_PATH=/usr/local/include \\\n    -DTG_OWT_OPENSSL_INCLUDE_PATH=$OPENSSL_PREFIX/include \\\n    -DTG_OWT_OPUS_INCLUDE_PATH=/usr/local/include/opus \\\n    -DTG_OWT_FFMPEG_INCLUDE_PATH=/usr/local/include\nRUN cmake --build out/Release -- -j$(nproc)\n\nRUN cmake -B out/Debug . \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DTG_OWT_SPECIAL_TARGET=linux \\\n    -DBUILD_SHARED_LIBS=OFF \\\n    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n    -DTG_OWT_USE_PIPEWIRE=OFF \\\n    -DTG_OWT_LIBJPEG_INCLUDE_PATH=/usr/local/include \\\n    -DTG_OWT_OPENSSL_INCLUDE_PATH=$OPENSSL_PREFIX/include \\\n    -DTG_OWT_OPUS_INCLUDE_PATH=/usr/local/include/opus \\\n    -DTG_OWT_FFMPEG_INCLUDE_PATH=/usr/local/include\nRUN cmake --build out/Debug -- -j$(nproc)\n\nWORKDIR ..\n\nFROM builder\n\nCOPY --from=mozjpeg ${LibrariesPath}/mozjpeg-cache /\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nCOPY --from=ffmpeg ${LibrariesPath}/ffmpeg ffmpeg\nCOPY --from=ffmpeg ${LibrariesPath}/ffmpeg-cache /\nCOPY --from=openssl ${LibrariesPath}/openssl-cache /\nCOPY --from=webrtc ${LibrariesPath}/webrtc tg_owt\n\nWORKDIR ..\nCOPY ./ ${MainPath}/tgcalls\nWORKDIR ${MainPath}/tgcalls\n\nRUN pip3 install --no-cache-dir pyrogram tgcrypto telethon\nRUN python3 setup.py build --debug\n\nCMD pip3 wheel . --no-deps -w ../dist/ --use-feature=in-tree-build\n"
}