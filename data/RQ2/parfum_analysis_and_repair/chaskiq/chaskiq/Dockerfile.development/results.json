{
  "startTime": 1674251406172,
  "endTime": 1674251406919,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gemUpdateNoDocument",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG RUBY_VERSION\nFROM ruby:$RUBY_VERSION-slim-buster\n\nARG APP_ENV\n\nARG PG_MAJOR\nARG NODE_MAJOR\nARG BUNDLER_VERSION\nARG YARN_VERSION\n\n# Copy Installers\nRUN mkdir -p /docker-files\nCOPY .docker-files/ /docker-files\nRUN chmod +x /docker-files/*.sh\n\n# Install Dependencies\nRUN /docker-files/deps.sh\n\n# Install PostgreSQL\nRUN /docker-files/pg.sh\n\n# Install NodeJS, Yarn\nRUN /docker-files/node.sh\n\n# Configure bundler\nENV LANG=C.UTF-8 BUNDLE_JOBS=4 BUNDLE_RETRY=3\n\n# Configure bundler\nENV LANG=C.UTF-8 \\\n  BUNDLE_JOBS=4 \\\n  BUNDLE_RETRY=3\n\n# Uncomment this line if you store Bundler settings in the project's root\n# ENV BUNDLE_APP_CONFIG=.bundle\n\n# Uncomment this line if you want to run binstubs without prefixing with `bin/` or `bundle exec`\nENV PATH /app/bin:$PATH\n\n# Upgrade RubyGems and install required Bundler version\nRUN mkdir -p /usr/local/etc \\\n  && { \\\n    echo 'install: --no-document'; \\\n    echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc;\nRUN gem update --system && \\\n  gem install bundler:$BUNDLER_VERSION && rm -rf /root/.gem;\n\n# Create a directory for the app code\nRUN mkdir -p /app\n\n# Bundler install gems\nWORKDIR /tmp\nCOPY Gemfile Gemfile.lock /tmp/\nRUN bundle install -j ${BUNDLE_JOBS} --retry ${BUNDLE_RETRY}\nRUN yarn install && yarn cache clean;\n\n\nWORKDIR /app"
}