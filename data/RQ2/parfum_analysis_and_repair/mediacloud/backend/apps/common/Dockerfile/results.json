{
  "startTime": 1674249850195,
  "endTime": 1674249851397,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedDockerfile": "#\n# Common Media Cloud code\n#\n\nFROM gcr.io/mcback/perl-python-base:latest\n\n# Install mecab-ipadic-neologd (for Japanese language tokenization) first because it's so large\nRUN \\\n\n    apt-get -y update && \\\n    apt-get -y --no-install-recommends install \\\n        libmecab-dev \\\n        swig \\\n        mecab \\\n    && \\\n    /dl_to_stdout.sh \\\n        \"https://github.com/mediacloud/mecab-ipadic-neologd-prebuilt/releases/download/20201204-2/mecab-ipadic-utf8.deb\" \\\n        > /var/tmp/mecab-ipadic-neologd.deb && \\\n    dpkg -i /var/tmp/mecab-ipadic-neologd.deb && \\\n    rm /var/tmp/mecab-ipadic-neologd.deb && \\\n    true && rm -rf /var/lib/apt/lists/*;\n\n# Install the rest of the dependencies\nRUN \\\n    apt-get -y --no-install-recommends install \\\n        #\n        # Required by \"cld2-cffi\" Python module\n        libffi-dev \\\n        #\n        # OpenSSL headers for various SSL modules\n        libssl-dev \\\n        #\n        # Required by \"lxml\" Python module\n        libxml2-dev \\\n        #\n        # Hindi stemming with Hunspell\n        hunspell \\\n        libhunspell-dev \\\n    && \\\n    #\n    true && rm -rf /var/lib/apt/lists/*;\n\n# Install Perl dependencies\nCOPY src/cpanfile /var/tmp/\nRUN \\\n    cd /var/tmp/ && \\\n    cpm install --global --resolver 02packages --no-prebuilt --mirror \"$MC_PERL_CPAN_MIRROR\" && \\\n    rm cpanfile && \\\n    rm -rf /root/.perl-cpm/ && \\\n    true\n\n# Install Python dependencies\nCOPY src/requirements.txt /var/tmp/\n\nRUN \\\n    cd /var/tmp/ && \\\n    #\n    # cld2-cffi: https://github.com/chartbeat-labs/textacy/issues/94#issuecomment-299656714\n    export CFLAGS=\"-Wno-narrowing\" && \\\n    #\n    # Has to be done separately before anything else because pyre2 depends on it,\n    # and Pip is unable to figure out that it has to install Cython first from\n    # requirements.txt; also, PyStemmer doesn't build correctly withou Cython\n    # installed beforehand\n    pip3 install --no-cache-dir Cython==0.29.21 && \\\n    #\n    # Install CyHunspell 2.0.2 directly from the repository as PyPi install doesn't seem to work on ARM64\n    apt-get -y --no-install-recommends install autoconf automake libtool && \\\n    pip3 install --no-cache-dir https://github.com/MSeal/cython_hunspell/archive/11c4602b1ee19d61d506eafc441652b3dcb1e81a.zip && \\\n    apt-get -y remove autoconf automake libtool && \\\n    apt-get -y autoremove && \\\n    apt-get -y clean && \\\n    #\n    # Install psycopg2 via APT as it has reasonably up-to-date version and the psycopg2-binary from Pip doesn't seem to work\n    apt-get -y --no-install-recommends install python3-psycopg2 && \\\n    #\n    # Install the rest\n    pip3 install --no-cache-dir -r requirements.txt && \\\n    rm requirements.txt && \\\n    rm -rf /root/.cache/ && \\\n    #\n    true && rm -rf /var/lib/apt/lists/*;\n\n# Add user that will be used for running userland apps\nRUN useradd -ms /bin/bash mediacloud\n\nRUN \\\n    #\n    # Create directory where sources will be stored in\n    mkdir -p /opt/mediacloud/src/ /opt/mediacloud/tests/ && \\\n    #\n    # Create directory where Perl's Inline module will store its stuff && \\\n    mkdir -p /perl-inline/ && \\\n    chown -R mediacloud:mediacloud /perl-inline/ && \\\n    #\n    true\n\n# Create convenience link\nRUN ln -s /opt/mediacloud /mc\n\n# Copy sources\nCOPY src/ /opt/mediacloud/src/common/\n\nENV PERL5LIB=\"/opt/mediacloud/src/common/perl\" \\\n    PYTHONPATH=\"/opt/mediacloud/src/common/python\" \\\n    #\n    PERL_INLINE_DIRECTORY=\"/perl-inline/\" \\\n    #\n    # /opt/mediacloud/bin is where container images are expected to store executables\n    PATH=\"/opt/mediacloud/bin:${PATH}\"\n\n# MC_REWRITE_TO_PYTHON: Perl + Inline::Python + Python 3.8 insists on looking for libraries only under /lib and not /usr/lib\nENV PYTHONPATH=\"${PYTHONPATH}:/usr/lib/python38.zip:/usr/lib/python3.8:/usr/lib/python3.8/lib-dynload:/usr/local/lib/python3.8/dist-packages:/usr/lib/python3/dist-packages\"\n\n# Test if submodules were checked out\nRUN \\\n    for submodule_file in \\\n        # Catalan stemmer\n        \"python/mediawords/languages/ca/snowball_stemmer/stemmer.sbl\"                           \\\n        # Lithuanian stemmer\n        \"python/mediawords/languages/lt/snowball_stemmer/lithuanian.sbl\"                        \\\n        # Hindi Hunspell dictionary for lemmatizing\n        \"python/mediawords/languages/hi/hindi-hunspell/dict-hi_IN/hi_IN.dic\"                    \\\n        # Snowball main module\n        \"python/snowball/python/snowballstemmer/basestemmer.py\"                                 \\\n        # Email templates\n        \"perl/MediaWords/Util/Mail/Message/Templates/email-templates/activation_needed.html\"    \\\n    ; do \\\n        if [ ! -f \"/opt/mediacloud/src/common/${submodule_file}\" ]; then \\\n            echo && \\\n            echo \"Git submodules (file ${submodule_file}) haven't been checked out, please run:\" && \\\n            echo && \\\n            echo \"    git submodule update --init --recursive\" && \\\n            echo && \\\n            echo \"and then rebuild this image.\" && \\\n            echo && \\\n            exit 1; \\\n        fi; \\\n    done\n\n# Prebuild Jieba dictionary cache\nCOPY bin/build_jieba_dict_cache.py /\nRUN \\\n    /build_jieba_dict_cache.py && \\\n    rm /build_jieba_dict_cache.py && \\\n    true\n\n# Symlink Log::Log4perl configuration to where it's going to be found\nRUN ln -s /opt/mediacloud/src/common/perl/log4perl.conf /etc/log4perl.conf\n"
}