{
  "startTime": 1674246388873,
  "endTime": 1674246390246,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 13,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 13,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 30,
        "columnStart": 8,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 44,
        "columnStart": 8,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 13,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 13,
        "columnEnd": 64
      }
    }
  ],
  "repairedDockerfile": "#\n# PostgreSQL base server\n#\n\nFROM gcr.io/mcback/postgresql-repo-base:latest\n\n# Install PostgreSQL\nRUN \\\n\n    apt-get -y update && \\\n    if [ \"$(dpkg --print-architecture)\" = \"arm64\" ]; then \\\n        echo \"Installing Graviton2-optimized PostgreSQL...\" && \\\n        #\n        # We might need newer libstdc++6 from PPA\n        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 60C317803A41BA51845E371A1E9377A2BA9EF27F && \\\n        echo \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu focal main\" > /etc/apt/sources.list.d/ubuntu-toolchain-r-test.list && \\\n        apt-get -y update && \\\n        apt-get -y --no-install-recommends install libstdc++6 && \\\n        #\n        /dl_to_stdout.sh \"https://github.com/mediacloud/postgresql-citus-aws-graviton2/releases/download/14.1-2.pgdg20.04%2B1/postgresql-14_14.1-2.pgdg20.04+1_arm64.deb\" > /var/tmp/postgresql-14.deb && \\\n        /dl_to_stdout.sh \"https://github.com/mediacloud/postgresql-citus-aws-graviton2/releases/download/14.1-2.pgdg20.04%2B1/postgresql-client-14_14.1-2.pgdg20.04+1_arm64.deb\" > /var/tmp/postgresql-client-14.deb && \\\n        /dl_to_stdout.sh \"https://github.com/mediacloud/postgresql-citus-aws-graviton2/releases/download/14.1-2.pgdg20.04%2B1/postgresql-plperl-14_14.1-2.pgdg20.04+1_arm64.deb\" > /var/tmp/postgresql-plperl-14.deb && \\\n        /dl_to_stdout.sh \"https://github.com/mediacloud/postgresql-citus-aws-graviton2/releases/download/14.1-2.pgdg20.04%2B1/libpq5_14.1-2.pgdg20.04+1_arm64.deb\" > /var/tmp/libpq5.deb && \\\n        apt-get -y --no-install-recommends install \\\n            postgresql-client-common \\\n            postgresql-common \\\n            ssl-cert \\\n            libicu66 \\\n            libllvm11 \\\n            libxml2 \\\n            libxslt1.1 \\\n        && \\\n        # FIXME dpkg doesn't exit with non-zero status if dependencies are missing\n        dpkg -i /var/tmp/libpq5.deb && \\\n        dpkg -i /var/tmp/postgresql-client-14.deb && \\\n        dpkg -i /var/tmp/postgresql-14.deb && \\\n        dpkg -i /var/tmp/postgresql-plperl-14.deb && \\\n        rm /var/tmp/*.deb && \\\n        true; rm -rf /var/lib/apt/lists/*; \\\n    else \\\n        echo \"Installing generic build of PostgreSQL...\" && \\\n        apt-get -y --no-install-recommends install \\\n            postgresql-14 \\\n            postgresql-client-14 \\\n            postgresql-plperl-14 \\\n        && \\\n        true; rm -rf /var/lib/apt/lists/*; \\\n    fi; \\\n    true\n\n# Install WAL-G for backing up PostgreSQL\nRUN \\\n    if [ \"$(dpkg --print-architecture)\" = \"arm64\" ]; then \\\n        sudo apt-get -y --no-install-recommends install xz-utils && \\\n        /dl_to_stdout.sh https://github.com/mediacloud/wal-g-aws-graviton2/releases/download/v1.1/wal-g-pg-ubuntu-20.04-arm64-graviton2.xz > /var/tmp/wal-g.xz && \\\n        cd /var/tmp/ && \\\n        xz -d wal-g.xz && \\\n        mv wal-g wal-g-pg-ubuntu-20.04-amd64 && \\\n        apt-get remove xz-utils && \\\n        true; rm -rf /var/lib/apt/lists/*; \\\n    else \\\n        /dl_to_stdout.sh https://github.com/wal-g/wal-g/releases/download/v1.1/wal-g-pg-ubuntu-20.04-amd64.tar.gz > /var/tmp/wal-g.tar.gz && \\\n        cd /var/tmp/ && \\\n        #\n        # Verify SHA1 so that we're sure about what we're installing\n        echo \"f7cc6bf4d3f8e36cf05ae7fdd03bd3a0906359a3 wal-g.tar.gz\" > /var/tmp/wal-g.tar.gz.sha1 && \\\n        sha1sum -c wal-g.tar.gz.sha1 && \\\n        tar -zxf wal-g.tar.gz && \\\n        rm /var/tmp/wal-g.tar.gz* && \\\n        true; \\\n    fi; \\\n    #\n    # Users are expected to use wal-g.sh wrapper instead of \"wal-g\" binary directly\n    mv wal-g-pg-ubuntu-20.04-amd64 /usr/bin/_wal-g && \\\n    chmod +x /usr/bin/_wal-g && \\\n    true\n\n# Make some run directories\nRUN \\\n    mkdir -p /var/run/postgresql/14-main.pg_stat_tmp && \\\n    chown -R postgres:postgres /var/run/postgresql/14-main.pg_stat_tmp && \\\n    true\n\n# Write our own configuration\nRUN \\\n    rm -rf /etc/postgresql/14/ && \\\n    mkdir -p /etc/postgresql/14/extra/ && \\\n    true\n\nCOPY etc/postgresql/14/main/ /etc/postgresql/14/main/\n\nRUN \\\n    #\n    # This is where \"generate_runtime_config.sh\" script will write its memory settings\n    # which it will auto-determine from available RAM on every run.\n    touch /var/run/postgresql/postgresql-memory.conf && \\\n    chown postgres:postgres /var/run/postgresql/postgresql-memory.conf && \\\n    #\n    # This is where \"generate_runtime_config.sh\" script will write WAL-G-related\n    # configuration\n    touch /var/run/postgresql/postgresql-walg.conf && \\\n    chown postgres:postgres /var/run/postgresql/postgresql-walg.conf && \\\n    #\n    # This is where \"generate_runtime_config.sh\" script will write WAL-G\n    # configuration to later be \"source\"'d in by wal-g.sh wrapper script\n    touch /var/run/postgresql/walg.env && \\\n    chown postgres:postgres /var/run/postgresql/walg.env && \\\n    chmod 600 /var/run/postgresql/walg.env && \\\n    #\n    true\n\n# Copy helper scripts\nRUN mkdir -p /opt/postgresql-base/\nCOPY bin/* /opt/postgresql-base/bin/\n\nENV \\\n    PATH=\"/opt/postgresql-base/bin:${PATH}\" \\\n    #\n    # Make sure that we can connect via \"psql\" without sudoing into \"postgres\" user\n    # (PGUSER, PGPASSWORD and PGDATABASE will be set by sub-images of this image)\n    PGHOST=localhost \\\n    PGPORT=5432\n\nUSER postgres\n\nRUN \\\n    #\n    # Remove APT-initialized data directory because it doesn't have the right\n    # locale, doesn't use checksums etc.\n    rm -rf /var/lib/postgresql/14/main/ && \\\n    #\n    # Generate memory configuration in case we decide to start PostgreSQL at\n    # build time\n    /opt/postgresql-base/bin/generate_runtime_config.sh && \\\n    #\n    # Run initdb\n    mkdir -p /var/lib/postgresql/14/main/ && \\\n    /usr/lib/postgresql/14/bin/initdb \\\n        --pgdata=/var/lib/postgresql/14/main/ \\\n        --data-checksums \\\n        --encoding=UTF-8 \\\n        --lc-collate='en_US.UTF-8' \\\n        --lc-ctype='en_US.UTF-8' \\\n    && \\\n    #\n    true\n\n# VOLUME doesn't get set here as children of this image might amend the initial\n# data directory somehow (e.g. pre-initialize it with some schema). Once you do\n# that in the sub-image, don't forget to define \"VOLUME /var/lib/postgresql/\"\n# afterwards!\n\n# SIGTERM (Docker's default) will initiate PostgreSQL's \"Smart Shutdown\" mode\n# which will then wait for the current transactions to finish. If there are\n# active long-running queries, Docker will wait for \"stop_grace_period\", run\n# out of patience and SIGKILL the process, forcing PostgreSQL to recover the\n# database on restart.\n# So, instead we stop the database with SIGINT which triggers \"Fast Shutdown\":\n# active connections get terminated, and PostgreSQL shuts down considerably\n# faster and safer.\nSTOPSIGNAL SIGINT\n\n# Server\nEXPOSE 5432\n\n# *Not* adding /opt/postgresql-base/ to $PATH so that users get to pick which\n# specific version of \"postgresql.sh\" to run\n\nCMD [\"/opt/postgresql-base/bin/postgresql.sh\"]\n"
}