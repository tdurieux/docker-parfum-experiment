{
  "startTime": 1674249909983,
  "endTime": 1674249910952,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "#\n# PostgreSQL server for Temporal's workflow storage\n#\n\nFROM gcr.io/mcback/postgresql-base:latest\n\nUSER root\n\nRUN \\\n    mkdir -p \\\n        /opt/temporal-postgresql/bin/ \\\n        /opt/temporal-postgresql/schema/ \\\n    && \\\n    #\n    # Install temporal-sql-tool\n    # Keep version that's being used in sync with temporal-server\n    mkdir -p /var/tmp/temporal/ && \\\n    /dl_to_stdout.sh \"https://github.com/temporalio/temporal/releases/download/v1.9.2/temporal_1.9.2_linux_$(dpkg --print-architecture).tar.gz\" | \\\n        tar -zx -C /var/tmp/temporal/ && \\\n    mv \\\n        # Needed for creating the default namespace\n        /var/tmp/temporal/tctl \\\n        # Needed for temporarily starting the server at build time to create\n        # the default namespace\n        /var/tmp/temporal/temporal-server \\\n        # Needed for initializing default schema\n        /var/tmp/temporal/temporal-sql-tool \\\n        #\n        /usr/bin/ && \\\n    rm -rf /var/tmp/temporal/ && \\\n    true\n\n# Check out schema\nRUN \\\n    apt-get -y --no-install-recommends install git && \\\n    mkdir -p /var/tmp/temporal/ && \\\n    cd /var/tmp/temporal/ && \\\n    git init && \\\n    git remote add origin https://github.com/temporalio/temporal.git && \\\n    # HEAD of \"v1.9.2\" tag:\n    git fetch --depth 1 origin d3acf160e51deb60ac798746fc06fc5c46c46269 && \\\n    git checkout FETCH_HEAD && \\\n    mv schema/postgresql/* /opt/temporal-postgresql/schema/ && \\\n    cd / && \\\n    rm -rf /var/tmp/temporal/ && \\\n    apt-get -y remove git && \\\n    apt-get -y autoremove && \\\n    apt-get -y clean && \\\n    true && rm -rf /var/lib/apt/lists/*;\n\n# Install envsubst for generating configuration\nRUN apt-get -y --no-install-recommends install gettext-base && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p /opt/temporal-server/config/\nCOPY temporal-config/* /opt/temporal-server/config/\n\n# Allow a final mediacloud.yml to get generated\nRUN chown postgres:postgres /opt/temporal-server/config/\n\n# Copy helper scripts\nCOPY bin/* /opt/temporal-postgresql/bin/\n\nUSER postgres\n\n# Initialize data volume, create users, a database, and initialize it with\n# schema\n# If a new empty volume gets mounted to /var/lib/postgresql/ upon\n# container start, Docker will copy the files from the container to the volume\nRUN \\\n    unset PGHOST PGPORT && \\\n    /opt/temporal-postgresql/bin/initialize_schema.sh && \\\n    true\n\n# Remove the init script, Temporal server and configuration so that someone\n# doesn't accidentally run it in production\nUSER root\nRUN \\\n    rm -rf \\\n        /opt/temporal-postgresql/bin/initialize_schema.sh \\\n        /usr/bin/tctl \\\n        /usr/bin/temporal-server \\\n        /opt/temporal-server/ \\\n    && \\\n    true\nUSER postgres\n\nENV \\\n    PATH=\"/opt/temporal-postgresql/bin:${PATH}\" \\\n    #\n    # Make sure that we can connect via \"psql\" without sudoing into \"postgres\" user\n    PGUSER=temporal \\\n    PGPASSWORD=temporal \\\n    PGDATABASE=temporal\n\n# PostgreSQL data\nVOLUME /var/lib/postgresql/\n\n# Use our own wrapper script which runs schema upgrades first\nCMD [\"/opt/temporal-postgresql/bin/postgresql.sh\"]\n"
}