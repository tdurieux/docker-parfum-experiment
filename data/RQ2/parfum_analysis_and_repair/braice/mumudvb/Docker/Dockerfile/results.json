{
  "startTime": 1674251084767,
  "endTime": 1674251085918,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 8,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile in multiple variants\n# - as-is, with all the #something; comments: very basic compilation without features\n# - removing #something; enable a variant/feature\n\n# see build and test instructions below\n\n###\n# REQUIRED: INSTALL COMPILER, DOWNLOAD AND INSTALL BITS AND PIECES\n###\n# start from a fedora 28 image\nFROM    fedora:28 AS compiler_build\nRUN     echo \"############################# COMPILER IMAGE #################################\"\n\n# install base and requirements\n#RUN     dnf upgrade -y && dnf clean all\nRUN     dnf install -y git gcc gcc-c++ make automake autoconf gettext-devel\n\n#######\n#  OPTIONAL: CAM SUPPORT\n#######\n#cam;RUN     dnf install -y wget mercurial patch glibc-static\n#cam;\n#cam;# do not use pre-built dvb-apps and libdvbcsa from distro-mirror, but build from sources. This is required for cam support on fedora.\n#cam;RUN     cd /usr/local/src && \\\n#cam;        hg clone http://linuxtv.org/hg/dvb-apps && \\\n#cam;        cd dvb-apps && \\\n#cam;        # patching for >=4.14 Kernel (https://aur.archlinux.org/packages/linuxtv-dvb-apps)\n#cam;        wget -q -O - https://git.busybox.net/buildroot/plain/package/dvb-apps/0003-handle-static-shared-only-build.patch | patch -p1 && \\\n#cam;        wget -q -O - https://git.busybox.net/buildroot/plain/package/dvb-apps/0005-utils-fix-build-with-kernel-headers-4.14.patch | patch -p1 && \\\n#cam;        wget -q -O - https://gitweb.gentoo.org/repo/gentoo.git/plain/media-tv/linuxtv-dvb-apps/files/linuxtv-dvb-apps-1.1.1.20100223-perl526.patch | patch -p1 && \\\n#cam;        make && make install && \\\n#cam;        ldconfig   # b/c libdvben50221.so\n\n#######\n# OPTIONAL: SCAM SUPPORT\n#######\n#scam;RUN     yum install -y openssl-devel dialog svn pcsc-lite pcsc-lite-devel libusb libusb-devel findutils file libtool\n#scam;\n#scam;RUN     cd /usr/local/src && \\\n#scam;        git clone https://code.videolan.org/videolan/libdvbcsa.git && \\\n#scam;        cd libdvbcsa && \\\n#scam;        autoreconf -i -f && \\\n#scam;        ./configure --prefix=/usr && make && make install && \\\n#scam;\t\t  ldconfig   # b/c libdvbcsa.so\n#scam;        #dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm && \\\n#scam;        #dnf install -y libdvbcsa-devel\n#scam;\n#scam;RUN     cd /usr/local/src && \\\n#scam;        svn checkout http://www.streamboard.tv/svn/oscam/trunk oscam-svn && \\\n#scam;        cd oscam-svn && \\\n#scam;        make USE_PCSC=1 USE_LIBUSB=1\n#scam;        \n#scam;RUN     cd /usr/local/src && \\\n#scam;        git clone https://github.com/gfto/tsdecrypt.git && \\\n#scam;        cd tsdecrypt && \\\n#scam;        git submodule init && \\\n#scam;        git submodule update && \\\n#scam;        make && make install   \n\n#######\t\n# REQUIRED: ACTUAL APPLICATION ITSELF\n#######\n# note: the ./configure will detect cam/scam support automagically if everything provided\nRUN cd /usr/local/src && \\\n        ldconfig && \\\n        git clone https://github.com/braice/MuMuDVB.git && \\\n        cd MuMuDVB && \\\n        autoreconf -i -f && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-android && \\\n        make && make install\n\n#######\n# OPTIONAL: TOOLBOXING\n#######\n#tool;RUN     cd /usr/local/src && \\\n#tool;        git clone git://git.videolan.org/bitstream.git && \\\n#tool;        cd bitstream && \\\n#tool;        make all && make install\n#tool;\n#tool;RUN     cd /usr/local/src && \\\n#tool;        dnf install -y libev-devel && \\\n#tool;        git clone https://code.videolan.org/videolan/dvblast.git && \\\n#tool;        cd dvblast && \\\n#tool;        make all && make install\n#tool;        \n#tool;RUN     cd /usr/local/src && \\\n#tool;        yum install -y wget bzip2 && \\\n#tool;        wget http://wirbel.htpc-forum.de/w_scan/w_scan-20170107.tar.bz2 && \\\n#tool;        tar -jxf w_scan-20170107.tar.bz2 && \\\n#tool;        cd w_scan-20170107/ && \\\n#tool;        ./configure && make && make install\n#tool;         \n#tool;RUN     cd /usr/local/src && \\\n#tool;        git clone https://github.com/stefantalpalaru/w_scan2.git && \\\n#tool;        cd w_scan2 && \\\n#tool;        autoreconf -i -f && \\\n#tool;        ./configure && make && make install\n#tool;        \n#tool;RUN     cd /usr/local/src && \\\n#tool;\t\t  yum install -y wget && \\\n#tool;        wget http://udpxy.com/download/udpxy/udpxy-src.tar.gz && \\\n#tool;        tar -zxf udpxy-src.tar.gz && \\\n#tool;        cd udpxy-*/ && \\\n#tool;        make && make install\n#tool;         \n#tool;RUN     cd /usr/local/src && \\\n#tool;        yum install -y xz wget && \\\n#tool;        wget ftp://ftp.videolan.org/pub/videolan/miniSAPserver/0.3.8/minisapserver-0.3.8.tar.xz && \\\n#tool;        tar -Jxf minisapserver-0.3.8.tar.xz && \\\n#tool;        cd minisapserver-*/ && \\\n#tool;        ./configure && make && make install\n#tool;\n#tool;RUN     cd /usr/local/src && \\\n#tool;        yum install -y wget && \\\n#tool;        wget https://dl.bintray.com/tvheadend/fedora/bintray-tvheadend-fedora-4.2-stable.repo\n\n###\n# OPTIONAL: START OVER AND ONLY RE-INSTALL\n###\nFROM    fedora:28\nRUN     echo \"############################# RUNTIME IMAGE #################################\"\n\n# copy the whole /usr/local from the previous compiler-image (note the --from)\nCOPY    --from=compiler_build /usr/local /usr/local\n\n# install runtime libraries\n#scam;RUN     dnf install -y openssl-devel pcsc-lite libusb\n#tool;RUN     dnf install -y v4l-utils libev\n#tool;RUN     mv /usr/local/src/bintray-tvheadend-fedora-4.2-stable.repo /etc/yum.repos.d\n#tool;RUN     dnf search tvheadend # experimental\n\n# unfortunately, some make's need gcc anyway :(\nRUN     dnf install -y make gcc gcc-c++ cpp glibc-devel glibc-headers kernel-headers\n\n# re-install all the stuff from before\nRUN     test -e /usr/local/src/dvb-apps && cd /usr/local/src/dvb-apps && make install && ldconfig || exit 0\nRUN     test -e /usr/local/src/libdvbcsa && cd /usr/local/src/libdvbcsa && make install && ldconfig || exit 0\nRUN     cd /usr/local/src/MuMuDVB && make install && mumudvb -v\nRUN     test -e /usr/local/src/tsdecrypt && cd /usr/local/src/tsdecrypt && make install || exit 0\nRUN     test -e /usr/local/src/bitstream && cd /usr/local/src/bitstream && make install || exit 0\nRUN     test -e /usr/local/src/dvblast && cd /usr/local/src/dvblast && make install || exit 0\nRUN     test -e /usr/local/src/w_scan-20170107 && cd /usr/local/src/w_scan-20170107 && make install || exit 0\nRUN     test -e /usr/local/src/w_scan2 && cd /usr/local/src/w_scan2 && make install || exit 0\nRUN     test -e /usr/local/src/udpxy-*/ && cd /usr/local/src/udpxy-*/ && make install || exit 0\nRUN     test -e /usr/local/src/minisapserver-*/ && cd /usr/local/src/minisapserver-*/ && make install || exit 0\n\n# remove gcc again\nRUN     dnf remove -y make gcc gcc-c++ cpp glibc-devel glibc-headers kernel-headers\n\nRUN     echo \"############################# FINAL STEPS #################################\"\n\n# add a runtime user\nRUN     useradd -c \"simple user\" -g users -G audio,video,cdrom,dialout,lp,tty,games user\n\n# include this very file into the image\nCOPY    Dockerfile /\n\n# use this user as default user\nUSER    user\n\n# assume persistent storage\nVOLUME  /conf\n\n# assume exposed ports\nEXPOSE  4212:4212\n\n# assume standard runtime executable to be bash\nCMD     [\"/bin/bash\"]\n\n###\n# RECOMMENDED: HOW TO BUILD AND TEST\n###\n\n# build plain mumudvb\n# $ docker build -t mumudvb:cam    . -f -\n# remove #cam; patterns from Dockerfile, build mumudvb with cam/scam support\n# $ sed -r 's_^#(cam|scam);__g' Dockerfile      | docker build -t mumudvb:cam    . -f -\n# remove #tool; patterns from Dockerfile, build everything (Swiss-Army-Knife)\n# $ sed -r 's_^#(cam|scam|tool);__g' Dockerfile | docker build -t mumudvb:sak    . -f -\n\n# simpe compare and test\n# $ docker run -it --rm my_mumudvb_simple /bin/bash\n# $ docker run -it --rm my_mumudvb_full /usr/local/bin/w_scan\n# $ docker run -it --rm my_mumudvb_cam /usr/local/bin/mumudvb\n# $ docker run -it --rm my_mumudvb_tool /usr/local/bin/mumudvb\n\n# run a scan. note the mapped device tree /dev/dvb\n# $ docker run -it --rm --device /dev/dvb/ my_mumudvb_full w_scan -f s -s S13E0 -D1c\n\n# run a mumudvb instance. Note the mapped device, filesystem and tcp-port\n# $ docker run -it --rm --device /dev/dvb/ --volume ${PWD}/conf:/conf -p 4212:4212 my_mumudvb_cam mumudvb -d -c /conf/test.conf\n"
}