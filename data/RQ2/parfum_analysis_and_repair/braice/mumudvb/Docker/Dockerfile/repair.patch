diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/braice/mumudvb/Docker/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/braice/mumudvb/Docker/Dockerfile/repaired.Dockerfile
index 2e37bb3..f504cb4 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/braice/mumudvb/Docker/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/braice/mumudvb/Docker/Dockerfile/repaired.Dockerfile
@@ -10,13 +10,13 @@
 # start from a fedora 28 image
 FROM    fedora:28 AS compiler_build
 RUN     echo "############################# COMPILER IMAGE #################################"
-  
+
 # install base and requirements
 #RUN     dnf upgrade -y && dnf clean all
 RUN     dnf install -y git gcc gcc-c++ make automake autoconf gettext-devel
 
 #######
-#  OPTIONAL: CAM SUPPORT 
+#  OPTIONAL: CAM SUPPORT
 #######
 #cam;RUN     dnf install -y wget mercurial patch glibc-static
 #cam;
@@ -32,7 +32,7 @@ RUN     dnf install -y git gcc gcc-c++ make automake autoconf gettext-devel
 #cam;        ldconfig   # b/c libdvben50221.so
 
 #######
-# OPTIONAL: SCAM SUPPORT 
+# OPTIONAL: SCAM SUPPORT
 #######
 #scam;RUN     yum install -y openssl-devel dialog svn pcsc-lite pcsc-lite-devel libusb libusb-devel findutils file libtool
 #scam;
@@ -49,29 +49,29 @@ RUN     dnf install -y git gcc gcc-c++ make automake autoconf gettext-devel
 #scam;        svn checkout http://www.streamboard.tv/svn/oscam/trunk oscam-svn && \
 #scam;        cd oscam-svn && \
 #scam;        make USE_PCSC=1 USE_LIBUSB=1
-#scam;         
+#scam;        
 #scam;RUN     cd /usr/local/src && \
 #scam;        git clone https://github.com/gfto/tsdecrypt.git && \
 #scam;        cd tsdecrypt && \
 #scam;        git submodule init && \
 #scam;        git submodule update && \
-#scam;        make && make install    
-     
-#######	 
+#scam;        make && make install   
+
+#######	
 # REQUIRED: ACTUAL APPLICATION ITSELF
 #######
 # note: the ./configure will detect cam/scam support automagically if everything provided
-RUN     cd /usr/local/src && \
+RUN cd /usr/local/src && \
         ldconfig && \
         git clone https://github.com/braice/MuMuDVB.git && \
         cd MuMuDVB && \
         autoreconf -i -f && \
-        ./configure --enable-android && \
+        ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-android && \
         make && make install
 
 #######
 # OPTIONAL: TOOLBOXING
-####### 
+#######
 #tool;RUN     cd /usr/local/src && \
 #tool;        git clone git://git.videolan.org/bitstream.git && \
 #tool;        cd bitstream && \
@@ -82,27 +82,27 @@ RUN     cd /usr/local/src && \
 #tool;        git clone https://code.videolan.org/videolan/dvblast.git && \
 #tool;        cd dvblast && \
 #tool;        make all && make install
-#tool;         
+#tool;        
 #tool;RUN     cd /usr/local/src && \
 #tool;        yum install -y wget bzip2 && \
 #tool;        wget http://wirbel.htpc-forum.de/w_scan/w_scan-20170107.tar.bz2 && \
 #tool;        tar -jxf w_scan-20170107.tar.bz2 && \
 #tool;        cd w_scan-20170107/ && \
 #tool;        ./configure && make && make install
-#tool;          
+#tool;         
 #tool;RUN     cd /usr/local/src && \
 #tool;        git clone https://github.com/stefantalpalaru/w_scan2.git && \
 #tool;        cd w_scan2 && \
 #tool;        autoreconf -i -f && \
 #tool;        ./configure && make && make install
-#tool;         
+#tool;        
 #tool;RUN     cd /usr/local/src && \
 #tool;		  yum install -y wget && \
 #tool;        wget http://udpxy.com/download/udpxy/udpxy-src.tar.gz && \
 #tool;        tar -zxf udpxy-src.tar.gz && \
 #tool;        cd udpxy-*/ && \
-#tool;        make && make install 
-#tool;          
+#tool;        make && make install
+#tool;         
 #tool;RUN     cd /usr/local/src && \
 #tool;        yum install -y xz wget && \
 #tool;        wget ftp://ftp.videolan.org/pub/videolan/miniSAPserver/0.3.8/minisapserver-0.3.8.tar.xz && \
@@ -119,10 +119,10 @@ RUN     cd /usr/local/src && \
 ###
 FROM    fedora:28
 RUN     echo "############################# RUNTIME IMAGE #################################"
- 
+
 # copy the whole /usr/local from the previous compiler-image (note the --from)
 COPY    --from=compiler_build /usr/local /usr/local
- 
+
 # install runtime libraries
 #scam;RUN     dnf install -y openssl-devel pcsc-lite libusb
 #tool;RUN     dnf install -y v4l-utils libev
@@ -146,27 +146,27 @@ RUN     test -e /usr/local/src/minisapserver-*/ && cd /usr/local/src/minisapserv
 
 # remove gcc again
 RUN     dnf remove -y make gcc gcc-c++ cpp glibc-devel glibc-headers kernel-headers
- 
+
 RUN     echo "############################# FINAL STEPS #################################"
 
 # add a runtime user
 RUN     useradd -c "simple user" -g users -G audio,video,cdrom,dialout,lp,tty,games user
- 
+
 # include this very file into the image
 COPY    Dockerfile /
- 
+
 # use this user as default user
 USER    user
- 
+
 # assume persistent storage
 VOLUME  /conf
- 
+
 # assume exposed ports
 EXPOSE  4212:4212
- 
+
 # assume standard runtime executable to be bash
 CMD     ["/bin/bash"]
- 
+
 ###
 # RECOMMENDED: HOW TO BUILD AND TEST
 ###
@@ -183,9 +183,9 @@ CMD     ["/bin/bash"]
 # $ docker run -it --rm my_mumudvb_full /usr/local/bin/w_scan
 # $ docker run -it --rm my_mumudvb_cam /usr/local/bin/mumudvb
 # $ docker run -it --rm my_mumudvb_tool /usr/local/bin/mumudvb
- 
+
 # run a scan. note the mapped device tree /dev/dvb
 # $ docker run -it --rm --device /dev/dvb/ my_mumudvb_full w_scan -f s -s S13E0 -D1c
- 
+
 # run a mumudvb instance. Note the mapped device, filesystem and tcp-port
 # $ docker run -it --rm --device /dev/dvb/ --volume ${PWD}/conf:/conf -p 4212:4212 my_mumudvb_cam mumudvb -d -c /conf/test.conf