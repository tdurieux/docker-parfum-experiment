{
  "startTime": 1674252852504,
  "endTime": 1674252853044,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 2,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 2,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PLATFORM=\"amd64\"\n\n# The AdoptOpenJDK image fails to run on M1 Macs because it is incompatible with ARM architecture. This\n# workaround uses an aarch64 (arm64) image instead when an optional platform argument is set to arm64.\n# Docker's BuildKit skips unused stages so the image for the platform that isn't used will not be built.\n\nFROM adoptopenjdk/openjdk11:jdk-11.0.14.1_1-alpine-slim as amd64\nFROM bellsoft/liberica-openjdk-alpine:11.0.11-9-aarch64 as arm64\n\nFROM ${PLATFORM}\n\nENV SBT_VERSION \"1.6.2\"\nENV INSTALL_DIR /usr/local\nENV SBT_HOME /usr/local/sbt\nENV PATH \"${PATH}:${SBT_HOME}/bin\"\nENV SBT_URL \"https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.tgz\"\n\nENV PROJECT_HOME /usr/src\nENV PROJECT_NAME server\nENV PROJECT_LOC \"${PROJECT_HOME}/${PROJECT_NAME}\"\n\nRUN set -o pipefail && \\\n  apk update && \\\n  apk add --no-cache --upgrade apk-tools && \\\n  apk upgrade --available && \\\n  apk add --no-cache --update bash wget npm git openssh && \\\n  npm install -g npm@8.5.1 && \\\n  mkdir -p \"${SBT_HOME}\" && \\\n  wget -qO - \"${SBT_URL}\" | tar xz -C \"${INSTALL_DIR}\" && \\\n  echo -ne \"- with sbt ${SBT_VERSION}\\n\" >> /root/.built && npm cache clean --force;\n\nCOPY \"${PROJECT_NAME}\" \"${PROJECT_LOC}\"\nCOPY entrypoint.sh /entrypoint.sh\n\n# We need to save the build assets to a seperate directory (pushRemoteCache)\nRUN cd \"${PROJECT_LOC}\" && \\\n  npm install && \\\n  sbt update && \\\n  sbt compile pushRemoteCache -Dconfig.file=conf/application.dev.conf && npm cache clean --force;\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nEXPOSE 9000\nWORKDIR \"${PROJECT_HOME}/${PROJECT_NAME}\"\n"
}