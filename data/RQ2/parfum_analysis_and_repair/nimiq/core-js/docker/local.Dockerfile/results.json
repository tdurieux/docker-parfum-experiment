{
  "startTime": 1674215871731,
  "endTime": 1674215872430,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 30,
        "columnEnd": 46
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 17,
        "columnEnd": 33
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 23,
        "columnEnd": 39
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 38
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 51,
        "columnEnd": 67
      }
    }
  ],
  "repairedDockerfile": "# One can override this using --build-arg when building the docker image from this file.\nARG DATA_PATH=/nimiq\nARG PACKAGING=1\n\n#---------------------------- BUILD NIMIQ - BASE -------------------------------\nFROM node:14-buster as base\n\n# Install build dependencies\nRUN apt-get update \\\n    && apt-get --no-install-recommends -y install build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create build directory\nWORKDIR /build\n\n# Try to copy the repository from the current build context into the\n# container. Assuming that this file is in its usual location within the\n# core repository, the build context can be simply set to the current\n# working directory (\".\").\nCOPY . .\n\n#---------------------------- BUILD NIMIQ - BUILD ------------------------------\nFROM base as builder\n\n# Install, Build & Test\nARG PACKAGING\nRUN --mount=type=cache,sharing=locked,target=/usr/local/share/.cache/yarn \\\n    yarn --frozen-lockfile && yarn cache clean;\nRUN yarn lint && yarn cache clean;\nRUN yarn lint-types && yarn cache clean;\nRUN yarn test-node && yarn cache clean;\n\n#---------------------------- BUILD NIMIQ - DEPS -------------------------------\nFROM base as installer\n\n# Install and build production dependencies\nARG PACKAGING\nRUN --mount=type=cache,sharing=locked,target=/usr/local/share/.cache/yarn \\\n    yarn install --frozen-lockfile --production && yarn cache clean;\n\n#---------------------------- BUILD NIMIQ - NODE -------------------------------\nFROM node:14-buster-slim\n\n# Install tini - a tiny init for containers\nRUN apt-get update \\\n    && apt-get --no-install-recommends -y install tini \\\n    && rm -rf /var/lib/apt/lists/*\n\n# We're going to execute nimiq in the context of its own user, what else?\nENV USER=nimiq\nRUN groupadd -r -g 999 ${USER} \\\n    && useradd -r -g ${USER} -u 999 -s /sbin/nologin -c \"User with restricted privileges for Nimiq daemon\" ${USER}\n\n# Create data directory for the nimiq process\nARG DATA_PATH\nRUN mkdir -p ${DATA_PATH} && chown ${USER}:root ${DATA_PATH}\nVOLUME ${DATA_PATH}\nWORKDIR ${DATA_PATH}\n\n# Copy production dependencies from installer and built files from builder\nCOPY --from=installer /build/package.json /build/yarn.lock  /usr/share/nimiq/\nCOPY --from=installer /build/node_modules                   /usr/share/nimiq/node_modules\nCOPY --from=builder   /build/*.md                           /usr/share/nimiq/\nCOPY --from=builder   /build/build                          /usr/share/nimiq/build\nCOPY --from=builder   /build/clients                        /usr/share/nimiq/clients\nCOPY --from=builder   /build/dist                           /usr/share/nimiq/dist\nCOPY --from=builder   /build/doc                            /usr/share/nimiq/doc\n\n# Execute client as non-root user\nUSER ${USER}\n\n# Documentation\nEXPOSE 8443 8648 8649\n\n# Just execute the nimiq process. One can customize the created container easily\n# to one's needs by (at least) the following options:\n# - supply your own arguments to the entrypoint while creating the container, e.g.\n#    docker run nimiq/nodejs-client --miner\n# - just bind mount your own nimiq.conf to the container at /etc/nimiq/nimiq.conf\n#   then you can just create the container like (assuming the config is in the\n#   current working directory)\n#     docker run -v $(pwd)/nimiq.conf:/etc/nimiq/nimiq.conf nimiq/nodejs-client --config=/etc/nimiq.conf\n# (- of course, you can combine and modify these options suitable to your needs)\nENTRYPOINT [ \"/usr/bin/tini\", \"--\", \"/usr/share/nimiq/clients/nodejs/nimiq\" ]\n"
}