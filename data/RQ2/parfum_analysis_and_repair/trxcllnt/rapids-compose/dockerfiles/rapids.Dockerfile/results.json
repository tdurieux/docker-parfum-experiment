{
  "startTime": 1674250676768,
  "endTime": 1674250678229,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 114
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_CONTAINER=nvidia/cuda\nARG CUDA_VERSION=11.5.0\nARG RAPIDS_NAMESPACE=anon\nARG LINUX_VERSION=ubuntu20.04\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nFROM ${BASE_CONTAINER}:${CUDA_VERSION}-devel-${LINUX_VERSION}\n\nARG USE_FISH_SHELL\nARG CUDA_SHORT_VERSION\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo 'Acquire::HTTP::Proxy \"http://172.17.0.1:3142\";' >> /etc/apt/apt.conf.d/01proxy \\\n && echo 'Acquire::HTTPS::Proxy \"false\";' >> /etc/apt/apt.conf.d/01proxy \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    pkg-config apt-utils apt-transport-https software-properties-common ca-certificates \\\n && add-apt-repository -y ppa:git-core/ppa \\\n # Needed to install compatible gcc toolchains\n && add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n # CUDA toolkit version usable to install `cuda-nsight-compute` and `cuda-nsight-systems` packages\n && NSIGHT_CUDA_VERSION=$(nvcc --version | head -n4 | tail -n1 | cut -d' ' -f5 | cut -d',' -f1 | sed \"s/\\./-/g\") \\\n && bash -c '\\\nif [[ \"$USE_FISH_SHELL\" == \"YES\" ]]; then \\\n    add-apt-repository -y ppa:fish-shell/release-3; \\\nfi' \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    jq ed git vim nano sudo curl wget entr less \\\n    # CMake dependencies\n    curl libssl-dev libcurl4-openssl-dev zlib1g-dev \\\n    # Need tzdata for the pyarrow<->ORC tests\n    tzdata \\\n    graphviz \\\n    gcc-9 g++-9 \\\n    gcc-10 g++-10 \\\n    gcc-11 g++-11 \\\n    ninja-build \\\n    build-essential \\\n    python3 python3-pip \\\n    # for building cudf-java\n    maven openjdk-8-jdk openjdk-8-jdk-headless openjdk-8-jre openjdk-8-jre-headless \\\n    # Install nsight-compute and nsight-systems\n    nsight-compute-2022.2.0 \\\n    nsight-systems-2022.1.3 \\\n    # Not sure what this is but it seems important\n    cuda-nsight-compute-${NSIGHT_CUDA_VERSION} \\\n    # This provides the `nsight-sys` GUI\n    cuda-nsight-systems-${NSIGHT_CUDA_VERSION} \\\n    # Needed by `nsight-sys` GUI\n    qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools \\\n    libglvnd-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev \\\n    libglib2.0-0 \\\n    libsqlite3-0 \\\n    xcb \\\n    xkb-data \\\n    openssh-client \\\n    dbus \\\n    fontconfig \\\n    gnupg \\\n    libfreetype6 \\\n    libx11-xcb1 \\\n    libxcb-glx0 \\\n    libxcb-xkb1 \\\n    libxcomposite1 \\\n    libxi6 \\\n    libxml2 \\\n    libxrender1 \\\n    libnuma1 \\\n    libnuma-dev \\\n && bash -c '\\\nif [[ \"$USE_FISH_SHELL\" == \"YES\" ]]; then \\\n    apt install --no-install-recommends -y fish; \\\nfi' \\\n && apt autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nARG GCC_VERSION=9\nENV GCC_VERSION=${GCC_VERSION}\nENV CXX_VERSION=${GCC_VERSION}\n\n# Remove any existing gcc and g++ alternatives\nRUN update-alternatives --remove-all cc  >/dev/null 2>&1 || true \\\n && update-alternatives --remove-all c++ >/dev/null 2>&1 || true \\\n && update-alternatives --remove-all gcc >/dev/null 2>&1 || true \\\n && update-alternatives --remove-all g++ >/dev/null 2>&1 || true \\\n && update-alternatives --remove-all gcov >/dev/null 2>&1 || true \\\n # Install alternatives for gcc/g++/cc/c++/gcov\n && for x in 9 10 11; do \\\n    update-alternatives \\\n    --install /usr/bin/gcc gcc /usr/bin/gcc-${x} ${x}0 \\\n    --slave /usr/bin/cc cc /usr/bin/gcc-${x} \\\n    --slave /usr/bin/g++ g++ /usr/bin/g++-${x} \\\n    --slave /usr/bin/c++ c++ /usr/bin/g++-${x} \\\n    --slave /usr/bin/gcov gcov /usr/bin/gcov-${x}; \\\n done \\\n # Set gcc-${GCC_VERSION} as the default gcc\n && update-alternatives --set gcc /usr/bin/gcc-${GCC_VERSION}\n\nARG UID=1000\nARG GID=1000\nENV _UID=${UID}\nENV _GID=${GID}\nARG GOSU_VERSION=1.14\nARG TINI_VERSION=v0.19.0\nARG CMAKE_VERSION=3.23.1\nENV CMAKE_VERSION=${CMAKE_VERSION}\n\nARG PYTHON_VERSION=3.9\nENV PYTHON_VERSION=\"$PYTHON_VERSION\"\nENV CUDA_SHORT_VERSION=\"$CUDA_SHORT_VERSION\"\nENV CC=\"/usr/bin/gcc\"\nENV CXX=\"/usr/bin/g++\"\n\nARG PARALLEL_LEVEL=4\nENV PARALLEL_LEVEL=${PARALLEL_LEVEL}\n\n# Install CMake\nRUN mkdir -p /tmp/cmake \\\n && curl -fsSL --compressed -o \"/tmp/cmake-$CMAKE_VERSION-linux-$(uname -m).sh\" \\\n    \"https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-linux-$(uname -m).sh\" \\\n && sh \"/tmp/cmake-$CMAKE_VERSION-linux-$(uname -m).sh\" --skip-license --exclude-subdir --prefix=/tmp/cmake \\\n && PATH=\"$PATH:/tmp/cmake/bin\" \\\n # Install ccache\n && git clone https://github.com/ccache/ccache.git /tmp/ccache && cd /tmp/ccache \\\n && git checkout -b rapids-compose-tmp e071bcfd37dfb02b4f1fa4b45fff8feb10d1cbd2 \\\n && mkdir -p /tmp/ccache/build && cd /tmp/ccache/build \\\n && cmake \\\n    -DENABLE_TESTING=OFF \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DUSE_LIBB2_FROM_INTERNET=ON \\\n    -DUSE_LIBZSTD_FROM_INTERNET=ON .. \\\n && make ccache -j${PARALLEL_LEVEL} && make install -j$PARALLEL_LEVEL && cd / && rm -rf /tmp/ccache \\\n # Uninstall CMake\n && rm -rf /tmp/* \\\n # Install tini \\\n && curl -f -s -L https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini -o /usr/bin/tini && chmod +x /usr/bin/tini \\\n # Add gosu so we can run our apps as a non-root user\n # https://denibertovic.com/posts/handling-permissions-with-docker-volumes/\n && curl -f -s -L https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64 -o /usr/local/sbin/gosu && chmod +x /usr/local/sbin/gosu\n\nARG RAPIDS_HOME\nARG COMPOSE_HOME\nENV RAPIDS_HOME=\"$RAPIDS_HOME\"\nENV COMPOSE_HOME=\"$COMPOSE_HOME\"\nENV CONDA_HOME=\"$COMPOSE_HOME/etc/conda/cuda_$CUDA_SHORT_VERSION\"\nENV RMM_HOME=\"$RAPIDS_HOME/rmm\"\nENV CUDF_HOME=\"$RAPIDS_HOME/cudf\"\nENV CUML_HOME=\"$RAPIDS_HOME/cuml\"\nENV RAFT_HOME=\"$RAPIDS_HOME/raft\"\nENV CUGRAPH_HOME=\"$RAPIDS_HOME/cugraph\"\nENV CUSPATIAL_HOME=\"$RAPIDS_HOME/cuspatial\"\nENV NOTEBOOKS_CONTRIB_HOME=\"$RAPIDS_HOME/notebooks-contrib\"\n\nRUN mkdir -p /var/log \"$RAPIDS_HOME\" \"$CONDA_HOME\" \\\n             \"$RAPIDS_HOME\" \"$RAPIDS_HOME/.conda\" \"$RAPIDS_HOME/notebooks\" \\\n # Symlink to root so we have an easy entrypoint from external scripts\n && ln -s \"$RAPIDS_HOME\" /rapids \\\n # Create a rapids user with the same GID/UID as your outside OS user,\n # so you own files created by the container when using volume mounts.\n && groupadd -g ${GID} rapids && useradd -u ${UID} -g rapids \\\n    # 1. Set up a rapids home directory\n    # 2. Add this user to the tty group\n    # 3. Assign bash as the login shell\n    -d \"$RAPIDS_HOME\" -G tty -G sudo -s /bin/bash rapids \\\n && echo rapids:rapids | chpasswd \\\n && chmod 0777 /tmp \\\n && chown -R ${_UID}:${_GID} \"$RAPIDS_HOME\" \"$CONDA_HOME\" \\\n && chmod -R 0755 /var/log \"$RAPIDS_HOME\" \"$CONDA_HOME\" \\\n && bash -c \"echo -e '#!/bin/bash -e\\n\\\nexec \\\"\\$COMPOSE_HOME/etc/rapids/start.sh\\\" \\\"\\$@\\\"\\n\\\n'\" > /entrypoint.sh \\\n && touch \"$RAPIDS_HOME/.bashrc\" && touch \"$RAPIDS_HOME/.bash_history\" \\\n && chown ${_UID}:${_GID} /entrypoint.sh \"$RAPIDS_HOME/.bashrc\" \"$RAPIDS_HOME/.bash_history\" \\\n && chmod +x /entrypoint.sh \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV NVCC=\"/usr/local/bin/nvcc\"\n# avoid \"OSError: library nvvm not found\" error\nENV CUDA_HOME=\"/usr/local/cuda\"\n\nRUN pip3 install --no-cache-dir conda-merge==0.1.5\n\nENV PATH=\"$CONDA_HOME/bin:\\\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:\\\n$CUDA_HOME/bin\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$CUDA_HOME/lib64:/usr/local/lib\"\n\n# Expose VSCode debugger port\nEXPOSE 5678\n\nARG BUILD_TESTS=\"OFF\"\nENV BUILD_TESTS=\"$BUILD_TESTS\"\n\nARG BUILD_BENCHMARKS=\"OFF\"\nENV BUILD_BENCHMARKS=\"$BUILD_BENCHMARKS\"\n\nARG CMAKE_BUILD_TYPE=\"Release\"\nENV CMAKE_BUILD_TYPE=\"$CMAKE_BUILD_TYPE\"\n\nARG FRESH_CONDA_ENV=0\nENV FRESH_CONDA_ENV=$FRESH_CONDA_ENV\n\nWORKDIR $RAPIDS_HOME\n\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/entrypoint.sh\"]\n\nCMD [\"bash\"]\n"
}