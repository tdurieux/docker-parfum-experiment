{
  "startTime": 1674251775864,
  "endTime": 1674251778227,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 27,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 161
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 28,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 22,
        "columnEnd": 88
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 28,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 27,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 33,
        "columnEnd": 66
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 25,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 7,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 29,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 7,
        "columnEnd": 147
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# qBittorrent, OpenVPN and WireGuard, qbittorrentvpn\nFROM debian:bullseye-slim\n\nWORKDIR /opt\n\nRUN usermod -u 99 nobody\n\n# Make directories\nRUN mkdir -p /downloads /config/qBittorrent /etc/openvpn /etc/qbittorrent\n\n# Install boost\nRUN apt update \\\n    && apt upgrade -y  \\\n    && apt install -y --no-install-recommends \\\n    curl \\\n    ca-certificates \\\n    g++ \\\n    libxml2-utils \\\n    && BOOST_VERSION_DOT=$( curl -f -sX GET \"https://www.boost.org/feed/news.rss\" | xmllint --xpath '//rss/channel/item/title/text()' - | awk -F 'Version' '{print $2 FS}' - | sed -e 's/Version//g;s/\\ //g' | xargs | awk 'NR==1{print $1}' -) \\\n    && BOOST_VERSION=$(echo ${BOOST_VERSION_DOT} | head -n 1 | sed -e 's/\\./_/g') \\\n    && curl -f -o /opt/boost_${BOOST_VERSION}.tar.gz -L https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.gz \\\n    && tar -xzf /opt/boost_${BOOST_VERSION}.tar.gz -C /opt \\\n    && cd /opt/boost_${BOOST_VERSION} \\\n    && ./bootstrap.sh --prefix=/usr \\\n    && ./b2 --prefix=/usr install \\\n    && cd /opt \\\n    && rm -rf /opt/* \\\n    && apt -y purge \\\n    curl \\\n    ca-certificates \\\n    g++ \\\n    libxml2-utils \\\n    && apt-get clean \\\n    && apt --purge autoremove -y \\\n    && rm -rf \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/* && rm /opt/boost_${BOOST_VERSION}.tar.gz\n\n# Install Ninja\nRUN apt update \\\n    && apt upgrade -y \\\n    && apt install -y --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    unzip \\\n    && NINJA_ASSETS=$( curl -f -sX GET \"https://api.github.com/repos/ninja-build/ninja/releases\" | jq '.[] | select(.prerelease==false) | .assets_url' | head -n 1 | tr -d '\"') \\\n    && NINJA_DOWNLOAD_URL=$( curl -f -sX GET ${NINJA_ASSETS} | jq '.[] | select(.name | match(\"ninja-linux\";\"i\")) .browser_download_url' | tr -d '\"') \\\n    && curl -f -o /opt/ninja-linux.zip -L ${NINJA_DOWNLOAD_URL} \\\n    && unzip /opt/ninja-linux.zip -d /opt \\\n    && mv /opt/ninja /usr/local/bin/ninja \\\n    && chmod +x /usr/local/bin/ninja \\\n    && rm -rf /opt/* \\\n    && apt purge -y \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    unzip \\\n    && apt-get clean \\\n    && apt --purge autoremove -y \\\n    && rm -rf \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/*\n\n# Install cmake\nRUN apt update \\\n    && apt upgrade -y \\\n    && apt install -y  --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    && CMAKE_ASSETS=$( curl -f -sX GET \"https://api.github.com/repos/Kitware/CMake/releases\" | jq '.[] | select(.prerelease==false) | .assets_url' | head -n 1 | tr -d '\"') \\\n    && CMAKE_DOWNLOAD_URL=$( curl -f -sX GET ${CMAKE_ASSETS} | jq '.[] | select(.name | match(\"Linux-x86_64.sh\";\"i\")) .browser_download_url' | tr -d '\"') \\\n    && curl -f -o /opt/cmake.sh -L ${CMAKE_DOWNLOAD_URL} \\\n    && chmod +x /opt/cmake.sh \\\n    && /bin/bash /opt/cmake.sh --skip-license --prefix=/usr \\\n    && rm -rf /opt/* \\\n    && apt purge -y \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    && apt-get clean \\\n    && apt --purge autoremove -y \\\n    && rm -rf \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/*\n\n# Compile and install libtorrent-rasterbar\nRUN apt update \\\n    && apt upgrade -y \\\n    && apt install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    libssl-dev \\\n    && LIBTORRENT_ASSETS=$( curl -f -sX GET \"https://api.github.com/repos/arvidn/libtorrent/releases\" | jq '.[] | select(.prerelease==false) | select(.target_commitish==\"RC_1_2\") | .assets_url' | head -n 1 | tr -d '\"') \\\n    && LIBTORRENT_DOWNLOAD_URL=$( curl -f -sX GET ${LIBTORRENT_ASSETS} | jq '.[0] .browser_download_url' | tr -d '\"') \\\n    && LIBTORRENT_NAME=$( curl -f -sX GET ${LIBTORRENT_ASSETS} | jq '.[0] .name' | tr -d '\"') \\\n    && curl -f -o /opt/${LIBTORRENT_NAME} -L ${LIBTORRENT_DOWNLOAD_URL} \\\n    && tar -xzf /opt/${LIBTORRENT_NAME} \\\n    && rm /opt/${LIBTORRENT_NAME} \\\n    && cd /opt/libtorrent-rasterbar* \\\n    && cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_CXX_STANDARD=17 \\\n    && cmake --build build --parallel $(nproc) \\\n    && cmake --install build \\\n    && cd /opt \\\n    && rm -rf /opt/* \\\n    && apt purge -y \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    libssl-dev \\\n    && apt-get clean \\\n    && apt --purge autoremove -y \\\n    && rm -rf \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/*\n\n# Compile and install qBittorrent\nRUN apt update \\\n    && apt upgrade -y \\\n    && apt install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    git \\\n    jq \\\n    libssl-dev \\\n    pkg-config \\\n    qtbase5-dev \\\n    qttools5-dev \\\n    zlib1g-dev \\\n    && QBITTORRENT_RELEASE=$( curl -f -sX GET \"https://api.github.com/repos/qBittorrent/qBittorrent/tags\" | jq '.[] | select(.name | index (\"beta\") | not) | select(.name | index (\"rc\") | not) | .name' | head -n 1 | tr -d '\"') \\\n    && curl -f -o /opt/qBittorrent-${QBITTORRENT_RELEASE}.tar.gz -L \"https://github.com/qbittorrent/qBittorrent/archive/${QBITTORRENT_RELEASE}.tar.gz\" \\\n    && tar -xzf /opt/qBittorrent-${QBITTORRENT_RELEASE}.tar.gz \\\n    && rm /opt/qBittorrent-${QBITTORRENT_RELEASE}.tar.gz \\\n    && cd /opt/qBittorrent-${QBITTORRENT_RELEASE} \\\n    && cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DGUI=OFF -DCMAKE_CXX_STANDARD=17 \\\n    && cmake --build build --parallel $(nproc) \\\n    && cmake --install build \\\n    && cd /opt \\\n    && rm -rf /opt/* \\\n    && apt purge -y \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    git \\\n    jq \\\n    libssl-dev \\\n    pkg-config \\\n    qtbase5-dev \\\n    qttools5-dev \\\n    zlib1g-dev \\\n    && apt-get clean \\\n    && apt --purge autoremove -y \\\n    && rm -rf \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/*\n\n# Install WireGuard and some other dependencies some of the scripts in the container rely on.\nRUN echo \"deb http://deb.debian.org/debian/ unstable main\" > /etc/apt/sources.list.d/unstable-wireguard.list \\\n    && printf 'Package: *\\nPin: release a=unstable\\nPin-Priority: 150\\n' > /etc/apt/preferences.d/limit-unstable \\\n    && apt update \\\n    && apt install -y --no-install-recommends \\\n    ca-certificates \\\n    dos2unix \\\n    inetutils-ping \\\n    ipcalc \\\n    iptables \\\n    kmod \\\n    libqt5network5 \\\n    libqt5xml5 \\\n    libqt5sql5 \\\n    libssl1.1 \\\n    moreutils \\\n    net-tools \\\n    openresolv \\\n    openvpn \\\n    procps \\\n    wireguard-tools \\\n    && apt-get clean \\\n    && apt --purge autoremove -y \\\n    && rm -rf \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/*\n\n# Install (un)compressing tools like unrar, 7z, unzip and zip\nRUN echo \"deb http://deb.debian.org/debian/ bullseye non-free\" > /etc/apt/sources.list.d/non-free-unrar.list \\\n    && printf 'Package: *\\nPin: release a=non-free\\nPin-Priority: 150\\n' > /etc/apt/preferences.d/limit-non-free \\\n    && apt update \\\n    && apt -y upgrade \\\n    && apt -y install --no-install-recommends \\\n    unrar \\\n    p7zip-full \\\n    unzip \\\n    zip \\\n    && apt-get clean \\\n    && apt --purge autoremove -y \\\n    && rm -rf \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/*\n\n# Remove src_valid_mark from wg-quick\nRUN sed -i /net\\.ipv4\\.conf\\.all\\.src_valid_mark/d `which wg-quick`\n\nVOLUME /config /downloads\n\nADD openvpn/ /etc/openvpn/\nADD qbittorrent/ /etc/qbittorrent/\n\nRUN chmod +x /etc/qbittorrent/*.sh /etc/qbittorrent/*.init /etc/openvpn/*.sh\n\nEXPOSE 8080\nEXPOSE 8999\nEXPOSE 8999/udp\nCMD [\"/bin/bash\", \"/etc/openvpn/start.sh\"]\n"
}