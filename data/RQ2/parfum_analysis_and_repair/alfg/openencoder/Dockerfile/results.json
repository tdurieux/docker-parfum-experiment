{
  "startTime": 1674255288164,
  "endTime": 1674255288852,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 14,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.14-alpine AS builder\n\n# Create the user and group files that will be used in the running container to\n# run the process as an unprivileged user.\nRUN mkdir /user && \\\n    echo 'nobody:x:65534:65534:nobody:/:' > /user/passwd && \\\n    echo 'nobody:x:65534:' > /user/group\n\n# Outside GOPATH since we're using modules.\nWORKDIR /src\n\n# Required for fetching dependencies.\nRUN apk add --update --no-cache ca-certificates git nodejs nodejs-npm\n\n# Fetch dependencies to cache.\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Copy project source files.\nCOPY . .\n\n# Build static web project.\nRUN cd web && npm install && npm run build && npm cache clean --force;\n\n# Build.\nRUN CGO_ENABLED=0 GOOS=linux go build -installsuffix 'static' -v -o /app .\n\n# Final release image.\nFROM alfg/ffmpeg:latest\n\n# Set version from CI build.\nARG BUILD_VERSION=${BUILD_VERSION}\nENV VERSION=$BUILD_VERSION\n\n# Import the user and group files from the first stage.\nCOPY --from=builder /user/group /user/passwd /etc/\n\n# Import the Certificate-Authority certificates for enabling HTTPS.\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\n# Import the project web & executable.\nCOPY --from=builder /src/web/dist /web/dist\nCOPY --from=builder /app /app\nCOPY --from=builder /src/config/default.yml /config/default.yml\n\nEXPOSE 8080\n\n# Perform any further action as an unpriviledged user.\nUSER nobody:nobody\n\n# Run binary.\nENTRYPOINT [\"/app\"]\n"
}