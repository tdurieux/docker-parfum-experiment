{
  "startTime": 1674219463452,
  "endTime": 1674219464549,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 13,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.11 AS alpine\n\nRUN apk update && \\\n    apk --no-cache add openjdk11 openjdk8 --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community\n\nFROM registry.cn-hangzhou.aliyuncs.com/alinux/alinux3:3.210714.1\n\nLABEL maintainer=\"Chunyang Hui <sanqian.hcy@antgroup.com>\"\n\n#The default shell for the RUN instruction is [\"/bin/sh\", \"-c\"], which sometimes cause unexpected error\n#for example \"source a_file\". Use bash as default shell instead.\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN yum install -y --nogpgcheck \\\n        astyle \\\n        autoconf \\\n        automake \\\n        bison \\\n        bzip2 \\\n        boost-devel \\\n        ca-certificates \\\n        clang \\\n        cmake \\\n        curl \\\n        curl-devel \\\n        createrepo \\\n        expect \\\n        expat \\\n        expat-devel \\\n        gettext \\\n        file \\\n        fuse-devel \\\n        fuse-libs \\\n        gawk \\\n        gcc \\\n        gcc-c++ \\\n        glibc-headers \\\n        gdb \\\n        git-core \\\n        gmp-devel \\\n        golang \\\n        jq \\\n        libmpc-devel \\\n        libxml2-devel \\\n        libtool \\\n        pkgconfig \\\n        python2 \\\n        kmod \\\n        make \\\n        mod_ssl \\\n        mpfr-devel \\\n        ocaml \\\n        ocaml-ocamlbuild \\\n        openssl \\\n        openssl-devel \\\n        patch \\\n        python3 \\\n        sudo \\\n        uuid-devel \\\n        vim \\\n        wget \\\n        yum-utils \\\n        rpm-build \\\n        git \\\n        protobuf \\\n        protobuf-c \\\n        protobuf-compiler \\\n        protobuf-c-compiler \\\n        protobuf-c-devel \\\n        protobuf-devel \\\n        rsync && \\\n    yum groupinstall -y 'Development Tools' && \\\n    yum clean all && \\\n    alternatives --set python /usr/bin/python3 && rm -rf /var/cache/yum\n\n# Aliyunlinux3 use GCC 10 as default toolchain\n\n# Install PSW and DCAP RPM packages\nWORKDIR /tmp\nRUN wget https://mirrors.openanolis.cn/inclavare-containers/alinux3/sgx-2.14/sgx_rpm_local_repo.tar.gz && \\\n    tar -xzf sgx_rpm_local_repo.tar.gz && \\\n    rm -f sgx_rpm_local_repo.tar.gz && \\\n    cd /tmp/sgx_rpm_local_repo && \\\n    rpm -ivh --nodeps libsgx-ae-pce*.rpm \\\n    libsgx-headers*.rpm \\\n    libsgx-ae-qe3*.rpm \\\n    libsgx-ae-qve*.rpm \\\n    libsgx-enclave-common*.rpm \\\n    libsgx-quote-ex*.rpm \\\n    libsgx-urts*.rpm \\\n    libsgx-dcap-ql*.rpm \\\n    libsgx-qe3-logic*.rpm \\\n    libsgx-pce-logic*.rpm \\\n    libsgx-dcap-quote-verify*.rpm \\\n    libsgx-dcap-ql*.rpm \\\n    libsgx-dcap-ql-dev*.rpm \\\n    libsgx-dcap-default-qpl*.rpm \\\n    libsgx-dcap-default-qpl-dev*.rpm \\\n    libsgx-dcap-quote-verify-dev*.rpm \\\n    libsgx-uae-service*.rpm \\\n    libsgx-epid*.rpm \\\n    libsgx-launch*.rpm \\\n    libsgx-ae-le-*.rpm \\\n    libsgx-aesm-launch-plugin-*.rpm \\\n    sgx-aesm-service*.rpm && \\\n    rm -rf /tmp/sgx_rpm_local_repo\n\n# Install SGX SDK\nWORKDIR /tmp\nRUN git clone -b sgx_2.14_for_occlum https://github.com/occlum/linux-sgx && \\\n    cd linux-sgx && \\\n    make preparation && \\\n    ./compile_and_install.sh no_mitigation USE_OPT_LIBS=3 && \\\n    echo 'source /opt/intel/sgxsdk/environment' >> /root/.bashrc && \\\n    rm -rf /tmp/linux-sgx\n\n# Install cpuid tool for tests\nWORKDIR /tmp\nRUN wget https://www.etallen.com/cpuid/cpuid-20200211.x86_64.tar.gz && \\\n    tar -xf ./cpuid-20200211.x86_64.tar.gz && \\\n    cp ./cpuid-20200211/cpuid /usr/bin/ && \\\n    rm -rf /tmp/cpuid-20200211* && rm ./cpuid-20200211.x86_64.tar.gz\n\n\n# Download the Occlum source\nARG OCCLUM_BRANCH\nWORKDIR /root\nRUN git clone -b $OCCLUM_BRANCH https://github.com/occlum/occlum && \\\n    cp -r /root/occlum/tools/toolchains/* /tmp/ && mkdir -p /opt/occlum/ && \\\n    cp /root/occlum/tools/docker/start_aesm.sh /opt/occlum/\n\n# Install Occlum toolchain\nWORKDIR /tmp\nRUN cd musl-gcc && ./build.sh && ./install_zlib.sh && rm -rf /tmp/musl-gcc\nENV PATH=\"/opt/occlum/build/bin:/usr/local/occlum/bin:$PATH\"\n\n# Install glibc\nWORKDIR /tmp\nRUN cd glibc && ./build.sh && rm -rf /tmp/glibc\n\n# Install Occlum Golang toolchain\nWORKDIR /tmp\nRUN cd golang && ./build.sh && rm -rf /tmp/golang\nENV PATH=\"/opt/occlum/toolchains/golang/bin:$PATH\"\n\n# Install Rust\nENV PATH=\"/root/.cargo/bin:$PATH\"\nENV OCCLUM_RUST_VERSION=nightly-2020-10-25\nRUN curl https://sh.rustup.rs -sSf | \\\n        sh -s -- --default-toolchain ${OCCLUM_RUST_VERSION} -y && \\\n    rm -rf /root/.cargo/registry && rm -rf /root/.cargo/git && \\\n    cargo -V\n\n# Install Occlum Rust toolchain\nWORKDIR /tmp\nRUN cd rust && ./build.sh && rm -rf /tmp/rust\nENV PATH=\"/opt/occlum/toolchains/rust/bin:$PATH\"\n\n# Install Occlum bash\nWORKDIR /tmp\nRUN cd bash && ./build.sh && rm -rf /tmp/bash\n\n# Install Occlum busybox\nWORKDIR /tmp\nRUN cd busybox && ./build.sh && rm -rf /tmp/busybox\n\n# Install Occlum Java toolchain (JDK 11)\nARG JDK11_PATH=/opt/occlum/toolchains/jvm/java-11-openjdk\nCOPY --from=alpine /usr/lib/jvm/java-11-openjdk $JDK11_PATH\nRUN rm $JDK11_PATH/lib/security/cacerts\nCOPY --from=alpine /etc/ssl/certs/java/cacerts $JDK11_PATH/lib/security/cacerts\nWORKDIR /tmp\nRUN cd java && ./install_dragonwell.sh && rm -rf /tmp/java\nENV PATH=\"/opt/occlum/toolchains/jvm/bin:$PATH\"\n\n# Install OpenJDK 8\nARG JDK8_PATH=/opt/occlum/toolchains/jvm/java-1.8-openjdk\nCOPY --from=alpine /usr/lib/jvm/java-1.8-openjdk $JDK8_PATH\nRUN rm $JDK8_PATH/jre/lib/security/cacerts\nCOPY --from=alpine /etc/ssl/certs/java/cacerts $JDK8_PATH/jre/lib/security/cacerts\n\nENV LD_LIBRARY_PATH=\"/opt/intel/sgxpsw/aesm:/usr/lib64/:/usr/local/lib:/opt/intel/sgxsdk/sdk_libs:/usr/lib:$LD_LIBRARY_PATH\"\n# Build and install Occlum\nWORKDIR /root\nRUN cd occlum && \\\n    source /opt/intel/sgxsdk/environment && \\\n    make submodule && \\\n    OCCLUM_RELEASE_BUILD=1 make install && \\\n    cp -r demos /root/demos && \\\n    rm -rf /root/occlum\n\n# Start AESM service automatically\n#\n# To do so, we add the script to ~/.bashrc. We cannot use systemd to run AESM\n# as a \"real\" service since the pid 1 is not systemd in Docker. So we start\n# up AESM service when an user login with an interative shell.\nRUN mkdir -p /var/run/aesmd && echo '/opt/occlum/start_aesm.sh' >> /root/.bashrc\n\nWORKDIR /root\n"
}