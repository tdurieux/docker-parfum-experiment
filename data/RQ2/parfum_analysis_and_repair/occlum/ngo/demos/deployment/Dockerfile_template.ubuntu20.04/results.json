{
  "startTime": 1674220404148,
  "endTime": 1674220405355,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# base stage:\n# Install dependencies for deployment to get minimum size for deployer.\n# For deployment environment, only occlum-runtime and sgx-psw are needed.\nFROM ubuntu:20.04 as base\nLABEL maintainer=\"Chunyang Hui <sanqian.hcy@antgroup.com>\"\n\nENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1\nRUN apt-get update && DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y --no-install-recommends gnupg wget ca-certificates jq && \\\n    echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu focal main' | tee /etc/apt/sources.list.d/intel-sgx.list && \\\n    wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add - && \\\n    echo 'deb [arch=amd64] https://occlum.io/occlum-package-repos/debian focal main' | tee /etc/apt/sources.list.d/occlum.list && \\\n    wget -qO - https://occlum.io/occlum-package-repos/debian/public.key | apt-key add - && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y occlum libsgx-uae-service libsgx-dcap-ql && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\nENV PATH=\"/opt/occlum/build/bin:/usr/local/occlum/bin:$PATH\"\n\n\n# packager stage:\n# Users can build their own applications and put to occlum instance.\n# And then use \"occlum package\" to get a minimum subset of files to run in deployment environment.\n# In this demo, the occlum instance is built in debug mode.\n# So \"--debug\" flag is required for the \"occlum package\".\nFROM base as packager\nWORKDIR /root\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends make gdb git libfuse-dev libtool tzdata && \\\n    git clone https://github.com/occlum/occlum.git && \\\n    cp -r /root/occlum/demos /root/demos && \\\n    apt-get install --no-install-recommends -y occlum && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    rm -rf /root/occlum && \\\n    cd /root && \\\n    occlum new occlum-instance && \\\n    cd /root/demos/hello_c && \\\n    make && cp hello_world /root/occlum-instance/image/bin && \\\n    cd /root/occlum-instance && occlum build && \\\n    occlum package --debug\n\n\n# deployer stage:\n# Unpack the package from packager\nFROM base as deployer\nWORKDIR /root\nCOPY --from=packager /root/occlum-instance/occlum-instance.tar.gz .\nRUN tar -xvzf occlum-instance.tar.gz && \\\n    mkdir -p /var/run/aesmd && \\\n    echo \"LD_LIBRARY_PATH=/opt/intel/sgx-aesm-service/aesm nohup /opt/intel/sgx-aesm-service/aesm/aesm_service --no-daemon >/dev/null 2>&1 &\" > /root/.bashrc && rm occlum-instance.tar.gz\n\nWORKDIR /root\n"
}