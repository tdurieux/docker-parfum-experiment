{
  "startTime": 1674250018042,
  "endTime": 1674250019858,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.11 AS alpine\n\nLABEL maintainer=\"Qing Li <geding.lq@antgroup.com>\"\n\nRUN apk update && \\\n    apk --no-cache add openjdk11 openjdk8 --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community\n\nFROM ubuntu:18.04\n\nLABEL maintainer=\"Qing Li <geding.lq@antgroup.com>\"\n\n#The default shell for the RUN instruction is [\"/bin/sh\", \"-c\"], which sometimes cause unexpected error\n#for example \"source a_file\". Use bash as default shell instead.\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN apt-get update && DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y --no-install-recommends \\\n        alien \\\n        astyle \\\n        autoconf \\\n        automake \\\n        bison \\\n        build-essential \\\n        ca-certificates \\\n        cmake \\\n        curl \\\n        debhelper \\\n        expect \\\n        g++ \\\n        gawk \\\n        gdb \\\n        git-core \\\n        golang-go \\\n        jq \\\n        kmod \\\n        lcov \\\n        libboost-system-dev \\\n        libboost-thread-dev \\\n        libclang-dev \\\n        libcurl4-openssl-dev \\\n        libfuse-dev \\\n        libjsoncpp-dev \\\n        liblog4cpp5-dev \\\n        libprotobuf-c0-dev \\\n        libprotobuf-dev \\\n        libssl-dev \\\n        libtool \\\n        libxml2-dev \\\n        nano \\\n        ocaml \\\n        ocamlbuild \\\n        pkg-config \\\n        protobuf-compiler \\\n        python \\\n        python-pip \\\n        sudo \\\n        unzip \\\n        uuid-dev \\\n        vim \\\n        wget \\\n        zip \\\n        gnupg \\\n        aptitude \\\n        rsync \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN echo \"ca_directory=/etc/ssl/certs\" >> /etc/wgetrc && \\\n    echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | tee /etc/apt/sources.list.d/intel-sgx.list &&\\\n    wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key --no-check-certificate | apt-key add -\n\n# Install cpuid tool for tests\nWORKDIR /tmp\nRUN wget https://www.etallen.com/cpuid/cpuid-20200211.x86_64.tar.gz && \\\n    tar -xf ./cpuid-20200211.x86_64.tar.gz && \\\n    cp ./cpuid-20200211/cpuid /usr/bin/ && \\\n    rm -rf /tmp/cpuid-20200211* && rm ./cpuid-20200211.x86_64.tar.gz\n\n# Install Rust\nENV PATH=\"/root/.cargo/bin:$PATH\"\nENV OCCLUM_RUST_VERSION=nightly-2021-09-13\nRUN curl https://sh.rustup.rs -sSf | \\\n        sh -s -- --default-toolchain ${OCCLUM_RUST_VERSION} -y && \\\n    rm -rf /root/.cargo/registry && rm -rf /root/.cargo/git && \\\n    cargo -V\n\n# Install SGX PSW\nARG PSW_VERSION=2.15.101.1\nARG DCAP_VERSION=1.12.101.1\nRUN apt-get update && aptitude install -y \\\n        libsgx-launch-dev=$PSW_VERSION-bionic1 \\\n        libsgx-epid-dev=$PSW_VERSION-bionic1 \\\n        libsgx-quote-ex-dev=$PSW_VERSION-bionic1 \\\n        libsgx-urts=$PSW_VERSION-bionic1 \\\n        libsgx-enclave-common=$PSW_VERSION-bionic1 \\\n        libsgx-uae-service=$PSW_VERSION-bionic1 \\\n        libsgx-ae-epid=$PSW_VERSION-bionic1 \\\n        libsgx-ae-le=$PSW_VERSION-bionic1 \\\n        libsgx-ae-pce=$PSW_VERSION-bionic1 \\\n        libsgx-aesm-launch-plugin=$PSW_VERSION-bionic1 \\\n        sgx-aesm-service=$PSW_VERSION-bionic1 \\\n        libsgx-aesm-launch-plugin=$PSW_VERSION-bionic1 \\\n        libsgx-aesm-pce-plugin=$PSW_VERSION-bionic1 \\\n        libsgx-aesm-ecdsa-plugin=$PSW_VERSION-bionic1 \\\n        libsgx-aesm-epid-plugin=$PSW_VERSION-bionic1 \\\n        libsgx-aesm-quote-ex-plugin=$PSW_VERSION-bionic1 \\\n        libsgx-dcap-quote-verify=$DCAP_VERSION-bionic1 \\\n        libsgx-dcap-quote-verify-dev=$DCAP_VERSION-bionic1 \\\n        libsgx-dcap-ql=$DCAP_VERSION-bionic1 \\\n        libsgx-dcap-ql-dev=$DCAP_VERSION-bionic1 \\\n        libsgx-epid=$PSW_VERSION-bionic1 \\\n        libsgx-quote-ex=$PSW_VERSION-bionic1 \\\n        libsgx-pce-logic=$DCAP_VERSION-bionic1 \\\n        libsgx-qe3-logic=$DCAP_VERSION-bionic1 \\\n        libsgx-launch=$PSW_VERSION-bionic1 \\\n        libsgx-dcap-default-qpl=$DCAP_VERSION-bionic1 \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libsgx_enclave_common.so.1 /usr/lib/x86_64-linux-gnu/libsgx_enclave_common.so\n\n# Install SGX SDK\nWORKDIR /tmp\nRUN git clone -b sgx_2.15.1_for_occlum https://github.com/occlum/linux-sgx && \\\n    mkdir /etc/init && \\\n    cd linux-sgx && \\\n    make preparation && \\\n    ./compile_and_install.sh no_mitigation USE_OPT_LIBS=3 && \\\n    echo 'source /opt/intel/sgxsdk/environment' >> /root/.bashrc && \\\n    rm -rf /tmp/linux-sgx\n\n# Download the Occlum source\nARG OCCLUM_BRANCH\nWORKDIR /root\nRUN git clone -b $OCCLUM_BRANCH https://github.com/occlum/occlum && \\\n    cp -r /root/occlum/tools/toolchains/* /tmp/ && mkdir -p /opt/occlum/ && \\\n    cp /root/occlum/tools/docker/start_aesm.sh /opt/occlum/\n\n# Install Occlum toolchain\nWORKDIR /tmp\nRUN cd musl-gcc && ./build.sh && ./install_zlib.sh && rm -rf /tmp/musl-gcc\nENV PATH=\"/opt/occlum/build/bin:/usr/local/occlum/bin:$PATH\"\n\n# Install glibc\nWORKDIR /tmp\nRUN cd glibc && ./build.sh && rm -rf /tmp/glibc\n\n# Install Occlum Golang toolchain\nWORKDIR /tmp\nRUN cd golang && ./build.sh && rm -rf /tmp/golang\nENV PATH=\"/opt/occlum/toolchains/golang/bin:$PATH\"\n\n# Install Occlum Rust toolchain\nWORKDIR /tmp\nRUN cd rust && ./build.sh && rm -rf /tmp/rust\nENV PATH=\"/opt/occlum/toolchains/rust/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/intel/sgxsdk/sdk_libs\"\n\n# Install Occlum bash\nWORKDIR /tmp\nRUN cd bash && ./build.sh && rm -rf /tmp/bash\n\n# Install Occlum busybox\nWORKDIR /tmp\nRUN cd busybox && ./build.sh && rm -rf /tmp/busybox\n\n# Install Occlum Java toolchain (JDK 11)\nARG JDK11_PATH=/opt/occlum/toolchains/jvm/java-11-openjdk\nCOPY --from=alpine /usr/lib/jvm/java-11-openjdk $JDK11_PATH\nRUN rm $JDK11_PATH/lib/security/cacerts\nCOPY --from=alpine /etc/ssl/certs/java/cacerts $JDK11_PATH/lib/security/cacerts\nWORKDIR /tmp\nRUN cd java && ./install_dragonwell.sh && rm -rf /tmp/java\nENV PATH=\"/opt/occlum/toolchains/jvm/bin:$PATH\"\n\n# Install OpenJDK 8\nARG JDK8_PATH=/opt/occlum/toolchains/jvm/java-1.8-openjdk\nCOPY --from=alpine /usr/lib/jvm/java-1.8-openjdk $JDK8_PATH\nRUN rm $JDK8_PATH/jre/lib/security/cacerts\nCOPY --from=alpine /etc/ssl/certs/java/cacerts $JDK8_PATH/jre/lib/security/cacerts\n\nWORKDIR /root\nRUN cd occlum && \\\n    source /opt/intel/sgxsdk/environment && \\\n    make submodule && \\\n    OCCLUM_RELEASE_BUILD=1 make && \\\n    make install && \\\n    cp -r demos /root/demos && \\\n    rm -rf /root/occlum\n\n# Start AESM service automatically\n#\n# To do so, we add the script to ~/.bashrc. We cannot use systemd to run AESM\n# as a \"real\" service since the pid 1 is not systemd in Docker. So we start\n# up AESM service when an user login with an interative shell.\nRUN mkdir -p /var/run/aesmd && echo '/opt/occlum/start_aesm.sh' >> /root/.bashrc\n\nWORKDIR /root\n"
}