{
  "startTime": 1674217799806,
  "endTime": 1674217801034,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "######\n## Stage 1: Clone the Git repository\n######\nFROM alpine/git as clone\nWORKDIR /app\nRUN git clone https://github.com/threagile/threagile.git\n\n\n\n\n######\n## Stage 2: Build application with Go's build tools\n######\nFROM golang as build\nENV GO111MODULE=on\n# https://stackoverflow.com/questions/36279253/go-compiled-binary-wont-run-in-an-alpine-docker-container-on-ubuntu-host\n#ENV CGO_ENABLED=0 # cannot be set as otherwise plugins don't run\nWORKDIR /app\nCOPY --from=clone /app/threagile /app\nRUN go version\nRUN\tgo test ./...\nRUN GOOS=linux go build -a -trimpath -ldflags=\"-s -w -X main.buildTimestamp=$(date '+%Y%m%d%H%M%S')\" -gcflags=\"all=-trimpath=/src\" -asmflags=\"all=-trimpath=/src\" -buildmode=plugin -o raa.so raa/raa/raa.go\nRUN GOOS=linux go build -a -trimpath -ldflags=\"-s -w -X main.buildTimestamp=$(date '+%Y%m%d%H%M%S')\" -gcflags=\"all=-trimpath=/src\" -asmflags=\"all=-trimpath=/src\" -buildmode=plugin -o dummy.so raa/dummy/dummy.go\nRUN GOOS=linux go build -a -trimpath -ldflags=\"-s -w -X main.buildTimestamp=$(date '+%Y%m%d%H%M%S')\" -gcflags=\"all=-trimpath=/src\" -asmflags=\"all=-trimpath=/src\" -buildmode=plugin -o demo-rule.so risks/custom/demo/demo-rule.go\nRUN GOOS=linux go build -a -trimpath -ldflags=\"-s -w -X main.buildTimestamp=$(date '+%Y%m%d%H%M%S')\" -gcflags=\"all=-trimpath=/src\" -asmflags=\"all=-trimpath=/src\" -o threagile\n# add the -race parameter to go build call in order to instrument with race condition detector: https://blog.golang.org/race-detector\n\n\n\n\n######\n## Stage 3: Make final small image\n######\nFROM alpine\n\n# label used in other scripts to filter\nLABEL type=\"threagile\"\n\n# add certificates\nRUN apk add --no-cache ca-certificates\n# add graphviz, fonts\nRUN apk add --update --no-cache graphviz ttf-freefont\n# https://stackoverflow.com/questions/66963068/docker-alpine-executable-binary-not-found-even-if-in-path\nRUN apk add --no-cache libc6-compat\n# https://stackoverflow.com/questions/34729748/installed-go-binary-not-found-in-path-on-alpine-linux-docker\n# RUN mkdir -p /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2\n# clean apk cache\nRUN rm -rf /var/cache/apk/*\n\nWORKDIR /app\n\nCOPY --from=build /app/threagile /app/threagile\nCOPY --from=build /app/raa.so /app/raa.so\nCOPY --from=build /app/dummy.so /app/dummy.so\nCOPY --from=build /app/demo-rule.so /app/demo-rule.so\nCOPY --from=build /app/LICENSE.txt /app/LICENSE.txt\nCOPY --from=build /app/report/template/background.pdf /app/background.pdf\nCOPY --from=build /app/support/openapi.yaml /app/openapi.yaml\nCOPY --from=build /app/support/schema.json /app/schema.json\nCOPY --from=build /app/support/live-templates.txt /app/live-templates.txt\nCOPY --from=build /app/support/render-data-asset-diagram.sh /app/render-data-asset-diagram.sh\nCOPY --from=build /app/support/render-data-flow-diagram.sh /app/render-data-flow-diagram.sh\nCOPY --from=build /app/server /app/server\nCOPY --from=build /app/demo/example/threagile.yaml /app/threagile-example-model.yaml\nCOPY --from=build /app/demo/stub/threagile.yaml /app/threagile-stub-model.yaml\n\nRUN mkdir /data\n\nRUN chown -R 1000:1000 /app /data\nUSER 1000:1000\n\nENV PATH=/app:$PATH\nENV GIN_MODE=release\n\nENTRYPOINT [\"/app/threagile\"]\nCMD [\"-help\"]"
}