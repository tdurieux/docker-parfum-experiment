{
  "startTime": 1674219293043,
  "endTime": 1674219294489,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 5,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 197
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 197
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 197
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 221
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04\n#FROM artifactory.itg.ti.com/docker-public/library/ubuntu:18.04\n#RUN echo \"Acquire::http::proxy \\\"http://webproxy.ext.ti.com:80\\\";\" > /etc/apt/apt.conf\n#ENV ftp_proxy http://webproxy.ext.ti.com:80\n#ENV http_proxy http://webproxy.ext.ti.com:80\n#ENV https_proxy http://webproxy.ext.ti.com:80\n#ENV no_proxy ti.com\n\n# baseline\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y python3 python3-pip python3-setuptools && rm -rf /var/lib/apt/lists/*;\n\n# ubuntu package dependencies\n# libsm6 libxext6 libxrender1 : needed by opencv\n# cmake protobuf-compiler libprotoc-dev : needed by onnx\n# graphviz : needed by tvm\n# swig : needed by model selection tool\n# curl vim git wget gdb : needeed by baseline dev\nRUN apt install --no-install-recommends -y libsm6 libxext6 libxrender1 cmake libprotobuf-dev protobuf-compiler libprotoc-dev graphviz swig curl vim git wget gdb nano zip gcc-5 g++-5 pkg-config libgtk-3-dev libyaml-cpp-dev && rm -rf /var/lib/apt/lists/*;\n\n# Copies your code file from your action repository to the filesystem path `/` of the container\nCOPY entrypoint.sh /entrypoint.sh\nCOPY requirements_pc.txt /requirements_pc.txt\nRUN pip3 install --no-cache-dir -r /requirements_pc.txt\n\nRUN  echo \"#!/bin/bash\" > /dev_entrypoint.sh\nRUN  echo \"echo Starting Dev Container\" >> /dev_entrypoint.sh\nRUN  chmod +x /dev_entrypoint.sh\nARG MODE=test\n\nRUN bash -c 'if [ $MODE = \"dev\" ]; then cp /dev_entrypoint.sh /curr_entrypoint.sh; else cp  /entrypoint.sh /curr_entrypoint.sh; fi'\n\n# Code file to execute when the docker container starts up (`entrypoint.sh`)\nENTRYPOINT [\"/curr_entrypoint.sh\"]\n"
}