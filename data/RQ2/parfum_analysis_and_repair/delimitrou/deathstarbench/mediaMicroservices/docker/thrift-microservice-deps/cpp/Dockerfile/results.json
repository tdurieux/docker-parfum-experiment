{
  "startTime": 1674248394736,
  "endTime": 1674248396326,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 5,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nARG LIB_MONGOC_VERSION=1.14.0\nARG LIB_THRIFT_VERSION=0.12.0\nARG LIB_JSON_VERSION=3.6.1\nARG LIB_JAEGER_VERSION=0.4.2\nARG LIB_YAML_VERSION=0.6.2\nARG LIB_OPENTRACING_VERSION=1.5.1\nARG LIB_CPP_JWT_VERSION=1.1.1\nARG LIB_CPP_REDIS_VERSION=4.3.1\n\nARG BUILD_DEPS=\"ca-certificates g++ cmake wget git libmemcached-dev automake bison flex libboost-all-dev libevent-dev libssl-dev libtool make pkg-config\"\n\nRUN apt-get update \\\n  && apt-get install -y ${BUILD_DEPS} --no-install-recommends \\\n  # Install mongo-c-driver\n  && cd /tmp \\\n  && wget https://github.com/mongodb/mongo-c-driver/releases/download/${LIB_MONGOC_VERSION}/mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \\\n  && tar -zxf mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \\\n  && cd mongo-c-driver-${LIB_MONGOC_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 .. \\\n  && make \\\n  && make install \\\n  && cd /tmp \\\n  # Install lib-thrift\n  && wget -O thrift-${LIB_THRIFT_VERSION}.tar.gz https://github.com/apache/thrift/archive/v${LIB_THRIFT_VERSION}.tar.gz \\\n  && tar -zxf thrift-${LIB_THRIFT_VERSION}.tar.gz \\\n  && cd thrift-${LIB_THRIFT_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DBUILD_TESTING=0 .. \\\n  && make \\\n  && make install \\\n  && cd /tmp \\\n  # Install /nlohmann/json\n  && wget -O json-${LIB_JSON_VERSION}.tar.gz https://github.com/nlohmann/json/archive/v${LIB_JSON_VERSION}.tar.gz \\\n  && tar -zxf json-${LIB_JSON_VERSION}.tar.gz \\\n  && cd json-${LIB_JSON_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DBUILD_TESTING=0 .. \\\n  && make \\\n  && make install \\\n  && cd /tmp \\\n  # Install yaml-cpp\n  && wget -O yaml-cpp-${LIB_YAML_VERSION}.tar.gz https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-${LIB_YAML_VERSION}.tar.gz \\\n  && tar -zxf yaml-cpp-${LIB_YAML_VERSION}.tar.gz \\\n  && cd yaml-cpp-yaml-cpp-${LIB_YAML_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_CXX_FLAGS=\"-fPIC\" -DYAML_CPP_BUILD_TESTS=0 .. \\\n  && make \\\n  && make install \\\n  && cd /tmp \\\n  # Install opentracing-cpp\n  && wget -O opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz https://github.com/opentracing/opentracing-cpp/archive/v${LIB_OPENTRACING_VERSION}.tar.gz \\\n  && tar -zxf opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz \\\n  && cd opentracing-cpp-${LIB_OPENTRACING_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_CXX_FLAGS=\"-fPIC\" -DBUILD_TESTING=0 .. \\\n  && make \\\n  && make install \\\n  && cd /tmp \\\n  # Install jaeger-client-cpp\n  && wget -O jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz https://github.com/jaegertracing/jaeger-client-cpp/archive/v${LIB_JAEGER_VERSION}.tar.gz \\\n  && tar -zxf jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz \\\n  && cd jaeger-client-cpp-${LIB_JAEGER_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_CXX_FLAGS=\"-fPIC\" -DHUNTER_ENABLED=0 -DBUILD_TESTING=0 -DJAEGERTRACING_WITH_YAML_CPP=1 -DJAEGERTRACING_BUILD_EXAMPLES=0 .. \\\n  && make \\\n  && make install \\\n  && cd /tmp \\\n  && wget -O cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz https://github.com/arun11299/cpp-jwt/archive/v${LIB_CPP_JWT_VERSION}.tar.gz \\\n  && tar -zxf cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz \\\n  && cd cpp-jwt-${LIB_CPP_JWT_VERSION} \\\n  && cp -R include/jwt /usr/local/include \\\n  # use the dependency in /usr/local/include instead of in jwt/json\n  && rm -rf /usr/local/include/jwt/json \\\n  && sed -i 's/\\#include \\\"jwt\\/json\\/json.hpp\\\"/\\#include \\<nlohmann\\/json\\.hpp\\>/g' /usr/local/include/jwt/jwt.hpp \\\n  # Install cpp_redis\n  && cd /tmp \\\n  && git clone https://github.com/cpp-redis/cpp_redis.git \\\n  && cd cpp_redis && git checkout ${LIB_CPP_REDIS_VERSION} \\\n  && git submodule init && git submodule update \\\n  && mkdir cmake-build && cd cmake-build \\\n  && cmake .. -DCMAKE_BUILD_TYPE=Release \\\n  && make \\\n  && make install \\\n  && cd /tmp \\\n  && rm -rf \\\n    mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \\\n    mongo-c-driver-${LIB_MONGOC_VERSION} \\\n    thrift-${LIB_THRIFT_VERSION}.tar.gz \\\n    thrift-${LIB_THRIFT_VERSION} \\\n    json-${LIB_JSON_VERSION}.tar.gz \\\n    json-${LIB_JSON_VERSION} \\\n    jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz \\\n    jaeger-client-cpp-${LIB_JAEGER_VERSION} \\\n    yaml-cpp-${LIB_YAML_VERSION}.tar.gz \\\n    yaml-cpp-yaml-cpp-${LIB_YAML_VERSION} \\\n    opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz \\\n    opentracing-cpp-${LIB_OPENTRACING_VERSION} \\\n    cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz \\\n    cpp-jwt-${LIB_CPP_JWT_VERSION} \\\n    cpp_redis && rm -rf /var/lib/apt/lists/*;\n\nENV LD_LIBRARY_PATH /usr/local/lib:${LD_LIBRARY_PATH}\nRUN ldconfig"
}