{
  "startTime": 1674252081073,
  "endTime": 1674252082884,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 5,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 5,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nARG LIB_MONGOC_VERSION=1.15.0\nARG LIB_THRIFT_VERSION=0.12.0\nARG LIB_JSON_VERSION=3.6.1\nARG LIB_JAEGER_VERSION=0.4.2\nARG LIB_YAML_VERSION=0.6.2\nARG LIB_OPENTRACING_VERSION=1.5.1\nARG LIB_CPP_JWT_VERSION=1.1.1\nARG LIB_CPP_REDIS_VERSION=4.3.1\nARG LIB_AMQP_CPP_VERSION=4.1.4\nARG LIB_SIMPLEAMQPCLIENT_VERSION=2.4.0\nARG LIB_HIREDIS_VERSION=1.0.0\nARG LIB_REDIS_PLUS_PLUS_VERSION=1.2.3\n\nARG BUILD_DEPS=\"ca-certificates g++ cmake wget git libmemcached-dev automake bison flex libboost-all-dev libevent-dev libssl-dev libtool make pkg-config librabbitmq-dev python3-dev python3-pip python3-setuptools python3-wheel\"\n\nRUN apt-get update \\\n  && apt-get install -y ${BUILD_DEPS} --no-install-recommends \\\n  # Install mongo-c-driver\n  && cd /tmp \\\n  && wget https://github.com/mongodb/mongo-c-driver/releases/download/${LIB_MONGOC_VERSION}/mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \\\n  && tar -zxf mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \\\n  && cd mongo-c-driver-${LIB_MONGOC_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 .. \\\n  && make -j$(nproc) \\\n  && make install \\\n  && cd /tmp \\\n  # Install lib-thrift\n  && wget -O thrift-${LIB_THRIFT_VERSION}.tar.gz https://github.com/apache/thrift/archive/v${LIB_THRIFT_VERSION}.tar.gz \\\n  && tar -zxf thrift-${LIB_THRIFT_VERSION}.tar.gz \\\n  && cd thrift-${LIB_THRIFT_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=0 .. \\\n  && make -j$(nproc) \\\n  && make install \\\n  && cd /tmp \\\n  # Install /nlohmann/json\n  && wget -O json-${LIB_JSON_VERSION}.tar.gz https://github.com/nlohmann/json/archive/v${LIB_JSON_VERSION}.tar.gz \\\n  && tar -zxf json-${LIB_JSON_VERSION}.tar.gz \\\n  && cd json-${LIB_JSON_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=0 .. \\\n  && make -j$(nproc) \\\n  && make install \\\n  && cd /tmp \\\n  # Install yaml-cpp\n  && wget -O yaml-cpp-${LIB_YAML_VERSION}.tar.gz https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-${LIB_YAML_VERSION}.tar.gz \\\n  && tar -zxf yaml-cpp-${LIB_YAML_VERSION}.tar.gz \\\n  && cd yaml-cpp-yaml-cpp-${LIB_YAML_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-fPIC\" -DYAML_CPP_BUILD_TESTS=0 .. \\\n  && make -j$(nproc) \\\n  && make install \\\n  && cd /tmp \\\n  # Install opentracing-cpp\n  && wget -O opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz https://github.com/opentracing/opentracing-cpp/archive/v${LIB_OPENTRACING_VERSION}.tar.gz \\\n  && tar -zxf opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz \\\n  && cd opentracing-cpp-${LIB_OPENTRACING_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-fPIC\" -DBUILD_TESTING=0 .. \\\n  && make -j$(nproc) \\\n  && make install \\\n  && cd /tmp \\\n  # Install jaeger-client-cpp\n  && wget -O jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz https://github.com/jaegertracing/jaeger-client-cpp/archive/v${LIB_JAEGER_VERSION}.tar.gz \\\n  && tar -zxf jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz \\\n  && cd jaeger-client-cpp-${LIB_JAEGER_VERSION} \\\n  && mkdir -p cmake-build \\\n  && cd cmake-build \\\n  && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-fPIC\" -DHUNTER_ENABLED=0 -DBUILD_TESTING=0 -DJAEGERTRACING_WITH_YAML_CPP=1 -DJAEGERTRACING_BUILD_EXAMPLES=0 .. \\\n  && make -j$(nproc) \\\n  && make install \\\n  && cd /tmp \\\n  # Install jwt\n  && wget -O cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz https://github.com/arun11299/cpp-jwt/archive/v${LIB_CPP_JWT_VERSION}.tar.gz \\\n  && tar -zxf cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz \\\n  && cd cpp-jwt-${LIB_CPP_JWT_VERSION} \\\n  && cp -R include/jwt /usr/local/include \\\n  # use the dependency in /usr/local/include instead of in jwt/json\n  && rm -rf /usr/local/include/jwt/json \\\n  && sed -i 's/\\#include \\\"jwt\\/json\\/json.hpp\\\"/\\#include \\<nlohmann\\/json\\.hpp\\>/g' /usr/local/include/jwt/jwt.hpp \\\n  # Install cpp_redis\n  && cd /tmp \\\n  && git clone https://github.com/cpp-redis/cpp_redis.git \\\n  && cd cpp_redis && git checkout ${LIB_CPP_REDIS_VERSION} \\\n  && git submodule init && git submodule update \\\n  && mkdir cmake-build && cd cmake-build \\\n  && cmake .. -DCMAKE_BUILD_TYPE=Release \\\n  && make -j$(nproc) \\\n  && make install \\\n  # Install AMQP-CPP\n  && cd /tmp \\\n  && git clone https://github.com/CopernicaMarketingSoftware/AMQP-CPP.git \\\n  && cd AMQP-CPP && git checkout v${LIB_AMQP_CPP_VERSION} \\\n  && mkdir cmake-build && cd cmake-build \\\n  && cmake .. -DCMAKE_BUILD_TYPE=Release -DAMQP-CPP_BUILD_SHARED=on -DAMQP-CPP_LINUX_TCP=on \\\n  && make -j$(nproc) && make install \\\n  # Install SimpleAmqpClient\n  && cd /tmp \\\n  && git clone https://github.com/alanxz/SimpleAmqpClient.git \\\n  && cd SimpleAmqpClient \\\n  && git checkout v${LIB_SIMPLEAMQPCLIENT_VERSION} \\\n  && mkdir cmake-build && cd cmake-build \\\n  && cmake .. -DCMAKE_BUILD_TYPE=Release \\\n  && make -j$(nproc) \\\n  && make install \\\n  # Install Hiredis\n  && cd /tmp \\\n  && git clone https://github.com/redis/hiredis.git \\\n  && cd hiredis \\\n  && git checkout v${LIB_HIREDIS_VERSION} \\\n  && make -j$(nproc) USE_SSL=1 \\\n  && make USE_SSL=1 install \\\n  # Install Redis plus plus\n  && cd /tmp \\\n  && git clone https://github.com/sewenew/redis-plus-plus.git \\\n  && cd redis-plus-plus \\\n  && git checkout ${LIB_REDIS_PLUS_PLUS_VERSION} \\\n  && sed -i '/Transaction transaction/i\\\\    ShardsPool* get_shards_pool(){\\n        return &_pool;\\n    }\\n' \\\n     src/sw/redis++/redis_cluster.h \\\n  && cmake -DREDIS_PLUS_PLUS_USE_TLS=ON . \\\n  && make -j$(nproc) \\\n  && make install \\\n  # Install pyyaml \\\n  && pip3 install --no-cache-dir PyYAML \\\n  # Clean up\n  && cd /tmp \\\n  && rm -rf \\\n    mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \\\n    mongo-c-driver-${LIB_MONGOC_VERSION} \\\n    thrift-${LIB_THRIFT_VERSION}.tar.gz \\\n    thrift-${LIB_THRIFT_VERSION} \\\n    json-${LIB_JSON_VERSION}.tar.gz \\\n    json-${LIB_JSON_VERSION} \\\n    jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz \\\n    jaeger-client-cpp-${LIB_JAEGER_VERSION} \\\n    yaml-cpp-${LIB_YAML_VERSION}.tar.gz \\\n    yaml-cpp-yaml-cpp-${LIB_YAML_VERSION} \\\n    opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz \\\n    opentracing-cpp-${LIB_OPENTRACING_VERSION} \\\n    cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz \\\n    cpp-jwt-${LIB_CPP_JWT_VERSION} \\\n    cpp_redis \\\n    AMQP-CPP \\\n    SimpleAmqpClient && rm -rf /var/lib/apt/lists/*;\n\nENV LD_LIBRARY_PATH /usr/local/lib:${LD_LIBRARY_PATH}\nRUN ldconfig\n"
}