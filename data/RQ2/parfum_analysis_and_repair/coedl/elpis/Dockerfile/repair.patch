diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/coedl/elpis/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/coedl/elpis/Dockerfile/repaired.Dockerfile
index 1e88c1f..52a630c 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/coedl/elpis/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/coedl/elpis/Dockerfile/repaired.Dockerfile
@@ -11,7 +11,7 @@ ENV NUM_CPUS=6
 
 ENV TZ=UTC
 
-RUN export DEBIAN_FRONTEND="noninteractive" && apt-get update && apt-get install -y --fix-missing \
+RUN export DEBIAN_FRONTEND="noninteractive" && apt-get update && apt-get install --no-install-recommends -y --fix-missing \
     autoconf \
     automake \
     bzip2 \
@@ -41,7 +41,7 @@ RUN export DEBIAN_FRONTEND="noninteractive" && apt-get update && apt-get install
     vim \
     wget \
     zlib1g-dev \
-    zsh
+    zsh && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /tmp
 
@@ -67,13 +67,13 @@ RUN echo "===> Install pyenv Python 3.8" && \
 
 RUN echo "===> Install Python 2.7 for Kaldi" && \
     add-apt-repository universe && \
-    apt-get update && apt-get install -y  \
+    apt-get update && apt-get install --no-install-recommends -y \
     python2.7 \
     python-yaml \
     python-simplejson \
-    python-gi
+    python-gi && rm -rf /var/lib/apt/lists/*;
 
-RUN curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py && \
+RUN curl -f https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py && \
     python2.7 get-pip.py
 
 RUN pip2.7 install ws4py==0.3.2 && \
@@ -82,11 +82,11 @@ RUN pip2.7 install ws4py==0.3.2 && \
 RUN ln -s /usr/bin/python2.7 /usr/bin/python ; ln -s -f bash /bin/sh
 
 RUN echo "===> Install Kaldi dependencies" && \
-    apt-get update && apt-get install -y \
+    apt-get update && apt-get install --no-install-recommends -y \
     sox \
     graphviz \
-    ghostscript\
-    ffmpeg
+    ghostscript \
+    ffmpeg && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /
 
@@ -94,7 +94,7 @@ RUN echo "===> Install Kaldi (pinned at version 5.3)"  && \
     git clone -b 5.3 https://github.com/kaldi-asr/kaldi
 COPY deps/pa_stable_v19_20111121.tgz /kaldi/tools/pa_stable_v19_20111121.tgz
 RUN cd /kaldi/tools && make -j$NUM_CPUS && ./install_portaudio.sh
-RUN cd /kaldi/src && ./configure --mathlib=ATLAS --shared && \
+RUN cd /kaldi/src && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --mathlib=ATLAS --shared && \
     sed -i '/-g # -O0 -DKALDI_PARANOID/c\-O3 -DNDEBUG' kaldi.mk && \
     make depend -j$NUM_CPUS && make -j$NUM_CPUS
 RUN cd /kaldi/src/online2 && make depend -j$NUM_CPUS && make -j$NUM_CPUS
@@ -104,14 +104,14 @@ COPY deps/srilm-1.7.2.tar.gz /kaldi/tools/srilm.tgz
 
 WORKDIR /kaldi/tools
 
-RUN apt-get install gawk && \
+RUN apt-get install -y --no-install-recommends gawk && \
     chmod +x extras/* && \
     ./extras/install_liblbfgs.sh && \
     ./extras/install_srilm.sh && \
     chmod +x env.sh && \
-    source ./env.sh
+    source ./env.sh && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get install -y libssl-dev libsqlite3-dev libbz2-dev
+RUN apt-get install --no-install-recommends -y libssl-dev libsqlite3-dev libbz2-dev && rm -rf /var/lib/apt/lists/*;
 
 
 ########################## DEV HELPERS INSTALLATION ####################
@@ -129,10 +129,10 @@ RUN wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && \
     mv jq-linux64 /usr/local/bin/jq
 
 # Add node 15, yarn and xml-js
-RUN curl -sL https://deb.nodesource.com/setup_15.x | bash - && apt-get update && apt-get install -y nodejs build-essential && \
+RUN curl -f -sL https://deb.nodesource.com/setup_15.x | bash - && apt-get update && apt-get install --no-install-recommends -y nodejs build-essential && \
     npm install -g npm \
     hash -d npm \
-    npm install -g xml-js yarn
+    npm install -g xml-js yarn && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;
 
 # Clean up package manager
 RUN apt-get clean autoclean
@@ -140,7 +140,7 @@ RUN apt-get clean autoclean
 WORKDIR /root
 
 # ZSH
-RUN apt-get install zsh
+RUN apt-get install -y --no-install-recommends zsh && rm -rf /var/lib/apt/lists/*;
 RUN chsh -s /usr/bin/zsh root
 RUN sh -c "$(wget -O- https://raw.githubusercontent.com/deluan/zsh-in-docker/master/zsh-in-docker.sh)" -- -t robbyrussell -p history-substring-search -p git
 
@@ -151,7 +151,7 @@ WORKDIR /
 RUN pyenv global 3.8.2
 RUN python -m venv venv
 RUN source venv/bin/activate
-RUN pip install --upgrade pip
+RUN pip install --no-cache-dir --upgrade pip
 
 
 ########################## HF Transformers INSTALLATION #########################
@@ -160,11 +160,11 @@ RUN pip install --upgrade pip
 # Override the dep info from requirements.txt so that we can specifiy CUDA version
 # Pin transformers to 4.6.0 because the model class has args code which breaks on later versions
 # Pin protobuf to fix `PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION` error
-RUN pip install protobuf==3.20.*
-RUN pip install transformers==4.6.0 datasets jiwer==2.2.0 lang-trans==0.6.0 librosa==0.8.0
+RUN pip install --no-cache-dir protobuf==3.20.*
+RUN pip install --no-cache-dir transformers==4.6.0 datasets jiwer==2.2.0 lang-trans==0.6.0 librosa==0.8.0
 # Set torch version for CUDA 11
-RUN pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html
-RUN pip install tensorboard==2.7.0
+RUN pip install --no-cache-dir torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html
+RUN pip install --no-cache-dir tensorboard==2.7.0
 
 # Cache the pretrained models
 COPY download_wav2vec2.py /root/download_wav2vec2.py
@@ -183,15 +183,15 @@ RUN echo "===> Install Elpis"
 RUN git clone --single-branch --depth=1 https://github.com/CoEDL/elpis.git
 
 WORKDIR /elpis
-RUN pip install --upgrade pip
-RUN pip install poetry && \
+RUN pip install --no-cache-dir --upgrade pip
+RUN pip install --no-cache-dir poetry && \
     poetry config virtualenvs.create false && \
     poetry install
 
 # Elpis GUI
 WORKDIR /elpis/elpis/gui/
 RUN yarn install && \
-    yarn run build
+    yarn run build && yarn cache clean;
 
 # Sample data for command line interaction with Elpis
 WORKDIR /