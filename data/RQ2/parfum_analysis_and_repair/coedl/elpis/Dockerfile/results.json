{
  "startTime": 1674219455359,
  "endTime": 1674219457093,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 132,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 193,
        "lineEnd": 193,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 21,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 43,
        "columnStart": 65,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 73,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 81,
        "columnEnd": 122
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 43,
        "columnStart": 65,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 69,
        "lineEnd": 73,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 81,
        "columnEnd": 122
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 193,
        "lineEnd": 193,
        "columnStart": 22,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedDockerfile": "#######################################################################\n# Dockerfile to build Kaldi (speech recognition engine container      #\n# image - based on Ubuntu + SRILM                                     #\n#######################################################################\n\nFROM ubuntu:20.04\n\n########################## BEGIN INSTALLATION #########################\n\nENV NUM_CPUS=6\n\nENV TZ=UTC\n\nRUN export DEBIAN_FRONTEND=\"noninteractive\" && apt-get update && apt-get install --no-install-recommends -y --fix-missing \\\n    autoconf \\\n    automake \\\n    bzip2 \\\n    curl \\\n    g++ \\\n    gcc \\\n    gfortran \\\n    git \\\n    glpk-utils \\\n    gsl-bin libgsl-dev \\\n    libatlas-base-dev \\\n    libglib2.0-dev \\\n    libjson-c-dev \\\n    libtool-bin \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    libbz2-dev \\\n    liblzma-dev \\\n    lsof \\\n    lzma \\\n    make \\\n    nvtop \\\n    software-properties-common \\\n    subversion \\\n    tree \\\n    unzip \\\n    vim \\\n    wget \\\n    zlib1g-dev \\\n    zsh && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /tmp\n\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    PATH=\"/opt/pyenv/shims:/opt/pyenv/bin:$PATH\" \\\n    PYENV_ROOT=\"/opt/pyenv\" \\\n    PYENV_SHELL=\"zsh\"\n\nRUN echo \"===> Install pyenv Python 3.8\" && \\\n    git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT && \\\n    echo 'export PYENV_ROOT=\"/opt/pyenv\"' >> ~/.zshrc && \\\n    echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc && \\\n    echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc && \\\n    eval \"$(pyenv init -)\" && \\\n    cat ~/.zshrc && \\\n    /bin/bash -c \"source ~/.zshrc\" && \\\n    pyenv install 3.8.2 && \\\n    rm -rf /tmp/*\n\n\n########################## KALDI INSTALLATION #########################\n\nRUN echo \"===> Install Python 2.7 for Kaldi\" && \\\n    add-apt-repository universe && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n    python2.7 \\\n    python-yaml \\\n    python-simplejson \\\n    python-gi && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py && \\\n    python2.7 get-pip.py\n\nRUN pip2.7 install ws4py==0.3.2 && \\\n    pip2.7 install tornado\n\nRUN ln -s /usr/bin/python2.7 /usr/bin/python ; ln -s -f bash /bin/sh\n\nRUN echo \"===> Install Kaldi dependencies\" && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n    sox \\\n    graphviz \\\n    ghostscript \\\n    ffmpeg && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /\n\nRUN echo \"===> Install Kaldi (pinned at version 5.3)\"  && \\\n    git clone -b 5.3 https://github.com/kaldi-asr/kaldi\nCOPY deps/pa_stable_v19_20111121.tgz /kaldi/tools/pa_stable_v19_20111121.tgz\nRUN cd /kaldi/tools && make -j$NUM_CPUS && ./install_portaudio.sh\nRUN cd /kaldi/src && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --mathlib=ATLAS --shared && \\\n    sed -i '/-g # -O0 -DKALDI_PARANOID/c\\-O3 -DNDEBUG' kaldi.mk && \\\n    make depend -j$NUM_CPUS && make -j$NUM_CPUS\nRUN cd /kaldi/src/online2 && make depend -j$NUM_CPUS && make -j$NUM_CPUS\nRUN cd /kaldi/src/online2bin && make depend -j$NUM_CPUS && make -j$NUM_CPUS\n\nCOPY deps/srilm-1.7.2.tar.gz /kaldi/tools/srilm.tgz\n\nWORKDIR /kaldi/tools\n\nRUN apt-get install -y --no-install-recommends gawk && \\\n    chmod +x extras/* && \\\n    ./extras/install_liblbfgs.sh && \\\n    ./extras/install_srilm.sh && \\\n    chmod +x env.sh && \\\n    source ./env.sh && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends -y libssl-dev libsqlite3-dev libbz2-dev && rm -rf /var/lib/apt/lists/*;\n\n\n########################## DEV HELPERS INSTALLATION ####################\n\nWORKDIR /tmp\n\nRUN echo \"===> Install dev helpers\"\n\n# Example data\nRUN git clone --depth=1 https://github.com/CoEDL/toy-corpora.git\n\n# Add jq\nRUN wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && \\\n    chmod +x jq-linux64 && \\\n    mv jq-linux64 /usr/local/bin/jq\n\n# Add node 15, yarn and xml-js\nRUN curl -f -sL https://deb.nodesource.com/setup_15.x | bash - && apt-get update && apt-get install --no-install-recommends -y nodejs build-essential && \\\n    npm install -g npm \\\n    hash -d npm \\\n    npm install -g xml-js yarn && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Clean up package manager\nRUN apt-get clean autoclean\n\nWORKDIR /root\n\n# ZSH\nRUN apt-get install -y --no-install-recommends zsh && rm -rf /var/lib/apt/lists/*;\nRUN chsh -s /usr/bin/zsh root\nRUN sh -c \"$(wget -O- https://raw.githubusercontent.com/deluan/zsh-in-docker/master/zsh-in-docker.sh)\" -- -t robbyrussell -p history-substring-search -p git\n\n\n########################## VENV ########################\n\nWORKDIR /\nRUN pyenv global 3.8.2\nRUN python -m venv venv\nRUN source venv/bin/activate\nRUN pip install --no-cache-dir --upgrade pip\n\n\n########################## HF Transformers INSTALLATION #########################\n\n# Install deps using pip rather than poetry mainly because poetry doesn't have -f support for the +cu111 version details\n# Override the dep info from requirements.txt so that we can specifiy CUDA version\n# Pin transformers to 4.6.0 because the model class has args code which breaks on later versions\n# Pin protobuf to fix `PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION` error\nRUN pip install --no-cache-dir protobuf==3.20.*\nRUN pip install --no-cache-dir transformers==4.6.0 datasets jiwer==2.2.0 lang-trans==0.6.0 librosa==0.8.0\n# Set torch version for CUDA 11\nRUN pip install --no-cache-dir torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html\nRUN pip install --no-cache-dir tensorboard==2.7.0\n\n# Cache the pretrained models\nCOPY download_wav2vec2.py /root/download_wav2vec2.py\nRUN python /root/download_wav2vec2.py\n\n\n########################## ELPIS INSTALLATION ########################\n\n# Add random number generator to skip Docker building from cache\nADD http://www.random.org/strings/?num=10&len=8&digits=on&upperalpha=on&loweralpha=on&unique=on&format=plain&rnd=new /uuid\n\nWORKDIR /\n\nRUN echo \"===> Install Elpis\"\n# Remove `--single-branch` and replace with `--branch <your_branch_name>` below for development\nRUN git clone --single-branch --depth=1 https://github.com/CoEDL/elpis.git\n\nWORKDIR /elpis\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir poetry && \\\n    poetry config virtualenvs.create false && \\\n    poetry install\n\n# Elpis GUI\nWORKDIR /elpis/elpis/gui/\nRUN yarn install && \\\n    yarn run build && yarn cache clean;\n\n# Sample data for command line interaction with Elpis\nWORKDIR /\nRUN git clone --depth=1 https://github.com/CoEDL/toy-corpora.git\nRUN git clone --depth=1 https://github.com/CoEDL/timit-elan.git\nWORKDIR /datasets\nRUN ln -s /toy-corpora/abui /datasets/abui\nRUN ln -s /toy-corpora/na /datasets/na\nRUN ln -s /timit-elan /datasets/timit\n\n########################## RUN THE APP ##########################\n\n# ENV vars for interactive running\nRUN echo \"export FLASK_ENV=development\" >> ~/.zshrc\nRUN echo \"export FLASK_APP=elpis\" >> ~/.zshrc\nRUN echo \"export LC_ALL=C.UTF-8\" >> ~/.zshrc\nRUN echo \"export LANG=C.UTF-8\" >> ~/.zshrc\nWORKDIR /elpis\nRUN echo \"export POETRY_PATH=$(poetry env info -p)\" >> ~/.zshrc\nRUN echo \"export PATH=$PATH:${POETRY_PATH}/bin:/kaldi/src/bin/\" >> ~/.zshrc\nRUN echo \"alias run=\\\"poetry run flask run --host=0.0.0.0 --port=5001\\\"\" >> ~/.zshrc\nRUN cat ~/.zshrc >> ~/.bashrc\n\n# ENV vars for non-interactive running\nENV FLASK_ENV='development'\nENV FLASK_APP='elpis'\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\n\nWORKDIR /elpis\n\nENTRYPOINT [\"poetry\", \"run\", \"flask\", \"run\", \"--host\", \"0.0.0.0\", \"--port\", \"5001\"]\n\n# 5001 is for the Flask server\nEXPOSE 5001\n# 3000 is for the Webpack dev server\nEXPOSE 3000\n"
}