{
  "startTime": 1674248364651,
  "endTime": 1674248365413,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 75
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 75
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ARCH=amd64\nARG NODE_VERSION=14\nARG OS=buster-slim\n\n#### Stage BASE ########################################################################################################\nFROM ${ARCH}/node:${NODE_VERSION}-${OS} AS base\n\n# Copy scripts\nCOPY scripts/*.sh /tmp/\n\n# Install tools, create Node-RED app and data dir, add user and set rights\nRUN set -ex && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n        bash \\\n        tzdata \\\n        curl \\\n        nano \\\n        wget \\\n        git \\\n        openssl \\\n        openssh-client \\\n        ca-certificates && \\\n    mkdir -p /usr/src/node-red /data && \\\n    deluser --remove-home node && \\\n    # adduser --home /usr/src/node-red --disabled-password --no-create-home node-red --uid 1000 && \\\n    useradd --home-dir /usr/src/node-red --uid 1000 node-red && \\\n    chown -R node-red:root /data && chmod -R g+rwX /data && \\\n    chown -R node-red:root /usr/src/node-red && chmod -R g+rwX /usr/src/node-red && rm -rf /usr/src/node-red && rm -rf /var/lib/apt/lists/*;\n    # chown -R node-red:node-red /data && \\\n    # chown -R node-red:node-red /usr/src/node-red\n\n# Set work directory\nWORKDIR /usr/src/node-red\n\n# Setup SSH known_hosts file\nCOPY known_hosts.sh .\nRUN ./known_hosts.sh /etc/ssh/ssh_known_hosts && rm /usr/src/node-red/known_hosts.sh\n\n# package.json contains Node-RED NPM module and node dependencies\nCOPY package.json .\nCOPY flows.json /data\n\n#### Stage BUILD #######################################################################################################\nFROM base AS build\n\n# Install Build tools\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential python && \\\n    npm install --unsafe-perm --no-update-notifier --no-fund --only=production && \\\n    npm uninstall node-red-node-gpio && \\\n    cp -R node_modules prod_node_modules && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n#### Stage RELEASE #####################################################################################################\nFROM base AS RELEASE\nARG BUILD_DATE\nARG BUILD_VERSION\nARG BUILD_REF\nARG NODE_RED_VERSION\nARG ARCH\nARG TAG_SUFFIX=default\n\nLABEL org.label-schema.build-date=${BUILD_DATE} \\\n    org.label-schema.docker.dockerfile=\".docker/Dockerfile.debian\" \\\n    org.label-schema.license=\"Apache-2.0\" \\\n    org.label-schema.name=\"Node-RED\" \\\n    org.label-schema.version=${BUILD_VERSION} \\\n    org.label-schema.description=\"Low-code programming for event-driven applications.\" \\\n    org.label-schema.url=\"https://nodered.org\" \\\n    org.label-schema.vcs-ref=${BUILD_REF} \\\n    org.label-schema.vcs-type=\"Git\" \\\n    org.label-schema.vcs-url=\"https://github.com/node-red/node-red-docker\" \\\n    org.label-schema.arch=${ARCH} \\\n    authors=\"Dave Conway-Jones, Nick O'Leary, James Thomas, Raymond Mouthaan\"\n\nCOPY --from=build /usr/src/node-red/prod_node_modules ./node_modules\n\n# Chown, install devtools & Clean up\nRUN chown -R node-red:root /usr/src/node-red && \\\n    apt-get update && apt-get install --no-install-recommends -y build-essential python-dev python3 && \\\n    rm -r /tmp/* && rm -rf /var/lib/apt/lists/*;\n\nUSER node-red\n\n# Env variables\nENV NODE_RED_VERSION=$NODE_RED_VERSION \\\n    NODE_PATH=/usr/src/node-red/node_modules:/data/node_modules \\\n    PATH=/usr/src/node-red/node_modules/.bin:${PATH} \\\n    FLOWS=flows.json\n\n# ENV NODE_RED_ENABLE_SAFE_MODE=true    # Uncomment to enable safe start mode (flows not running)\n# ENV NODE_RED_ENABLE_PROJECTS=true     # Uncomment to enable projects option\n\n# Expose the listening port of node-red\nEXPOSE 1880\n\n# Add a healthcheck (default every 30 secs)\n# HEALTHCHECK CMD curl http://localhost:1880/ || exit 1\n\nENTRYPOINT [\"npm\", \"start\", \"--cache\", \"/data/.npm\", \"--\", \"--userDir\", \"/data\"]\n"
}