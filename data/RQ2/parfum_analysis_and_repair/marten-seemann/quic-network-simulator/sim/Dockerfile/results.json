{
  "startTime": 1674252332515,
  "endTime": 1674252333580,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 2,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 2,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 2,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 2,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 AS builder\n\nARG TARGETPLATFORM\nRUN echo \"TARGETPLATFORM : $TARGETPLATFORM\"\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y python3 build-essential cmake wget && rm -rf /var/lib/apt/lists/*;\n\nENV VERS 3.32\nRUN wget https://www.nsnam.org/release/ns-allinone-$VERS.tar.bz2\nRUN tar xjf ns-allinone-$VERS.tar.bz2 && rm ns-allinone-$VERS.tar.bz2\nRUN mv /ns-allinone-$VERS/ns-$VERS /ns3\n\nWORKDIR /ns3\n\nRUN mkdir out/\nRUN ./waf configure --build-profile=release --out=out/\nRUN ./waf build\n\nRUN if [ \"$TARGETPLATFORM\" = \"linux/amd64\" ]; then cd / && \\\n      wget https://dl.google.com/go/go1.15.linux-amd64.tar.gz && \\\n      tar xfz go1.15.linux-amd64.tar.gz && \\\n      rm go1.15.linux-amd64.tar.gz; \\\n    fi\n\nRUN if [ \"$TARGETPLATFORM\" = \"linux/arm64\" ]; then cd / && \\\n      wget https://dl.google.com/go/go1.15.linux-arm64.tar.gz && \\\n      tar xfz go1.15.linux-arm64.tar.gz && \\\n      rm go1.15.linux-arm64.tar.gz; \\\n    fi\n\n# make including of the QuicNetworkSimulatorHelper class possible\nCOPY wscript.patch .\nRUN patch < wscript.patch\n\nRUN rm -r scratch/subdir scratch/scratch-simulator.cc\nCOPY scenarios scratch/\n\n# compile all the scenarios\nRUN ./waf build  && \\\n  cd out/lib && du -sh . && strip -v * && du -sh . && cd ../.. && \\\n  cd out/scratch && rm -r subdir helper scratch-simulator*\n\nENV PATH=\"/go/bin:${PATH}\"\nCOPY wait-for-it-quic /wait-for-it-quic\nRUN cd /wait-for-it-quic && go build .\n\nFROM ubuntu:20.04\n\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y net-tools iptables && \\\n  apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /ns3\nCOPY --from=builder /ns3/out/src/fd-net-device/* /ns3/src/fd-net-device/\nCOPY --from=builder /ns3/out/scratch/*/* /ns3/scratch/\nCOPY --from=builder /ns3/out/lib/ /ns3/lib\nCOPY --from=builder /wait-for-it-quic/wait-for-it-quic /usr/bin\n\n# see https://gitlab.com/nsnam/ns-3-dev/issues/97\nENV PATH=\"/ns3/src/fd-net-device/:${PATH}\"\nENV LD_LIBRARY_PATH=\"/ns3/lib\"\n\nCOPY run.sh .\nRUN chmod +x run.sh\nRUN mkdir /logs\n\nENTRYPOINT [ \"./run.sh\" ]\n"
}