{
  "startTime": 1674256242101,
  "endTime": 1674256243770,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 257,
        "lineEnd": 257,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 264,
        "lineEnd": 264,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 271,
        "lineEnd": 271,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 279,
        "lineEnd": 279,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 286,
        "lineEnd": 286,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 303,
        "lineEnd": 303,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 319,
        "lineEnd": 319,
        "columnStart": 5,
        "columnEnd": 40
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 155,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 5,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 5,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 5,
        "columnEnd": 62
      }
    }
  ],
  "repairedDockerfile": "# Use fixed snapshot of Debian to create a deterministic environment.\n# Snapshot tags can be found at https://hub.docker.com/r/debian/snapshot/tags?name=bullseye\nARG debian_snapshot=sha256:fb7e04be4c79a9eab9c259fd5049f4a1bec321843040184a706bbecdaaacbd32\nFROM debian/snapshot@${debian_snapshot}\n\n# Set the SHELL option -o pipefail before RUN with a pipe in.\n# See https://github.com/hadolint/hadolint/wiki/DL4006\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# Uncomment the RUN below if the default snapshot package manager is slow.\n# Please not that this might cause issues and affects reproducible builds,\n# so only use for development.\n# RUN echo \\\n#  deb [arch=amd64] http://ukdebian.mirror.anlx.net/debian buster main non-free contrib\\\n# > /etc/apt/sources.list\n\n# Getting curl and certificates dependecies.\n# We're rate-limiting HTTP requests to 500 kB/s as otherwise we may get timeout errors\n# when downloading from snapshot.debian.org.\nRUN apt-get --yes update \\\n  && apt-get install --no-install-recommends --yes --option Acquire::http::Dl-Limit=500 \\\n  apt-transport-https \\\n  build-essential \\\n  ca-certificates \\\n  clang-format \\\n  clang-tidy \\\n  curl \\\n  git \\\n  gnupg2 \\\n  gnupg-agent \\\n  libcap-dev \\\n  libfl2 \\\n  libncurses5 \\\n  libssl-dev \\\n  musl-tools \\\n  openjdk-11-jdk \\\n  pkg-config \\\n  procps \\\n  python3 \\\n  python3-six \\\n  python3-distutils \\\n  qemu-system-x86 \\\n  shellcheck \\\n  software-properties-common \\\n  vim \\\n  xml2 \\\n  # `unzip` and `zlib1g-dev` are needed for Bazel.\n  unzip \\\n  zlib1g-dev \\\n  # Cleanup\n  && apt-get clean \\\n  && rm --recursive --force /var/lib/apt/lists/* \\\n  # Print version of various installed tools.\n  && git --version \\\n  && shellcheck --version\n\n# Add LLDB version 14 for debugging support.\nARG llvm_version=14\nRUN echo \"deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-$llvm_version main\" >> /etc/apt/sources.list.d/llvm.list \\\n  && curl -f https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n  && apt-get update --yes \\\n  && apt-get install --no-install-recommends --yes \\\n  lldb-${llvm_version} \\\n  && rm --recursive --force /var/lib/apt/lists/*\n\n# Install a version of docker CLI.\nRUN curl --fail --silent --show-error --location https://download.docker.com/linux/debian/gpg | apt-key add -\nRUN echo \"deb [arch=amd64] https://download.docker.com/linux/debian buster stable\"  > /etc/apt/sources.list.d/backports.list \\\n  && apt-get --yes update \\\n  && apt-get install --no-install-recommends --yes docker-ce-cli \\\n  && apt-get clean \\\n  && rm --recursive --force /var/lib/apt/lists/*\n\n# Install Ent CLI. We mostly then just use it in order to simplify the logic around fetching\n# artifacts by URL and ensuring that their digest is correct, in order to ensure reproducibility.\nARG ent_server_url=https://ent-server-62sa4xcfia-ew.a.run.app\nARG ent_digest=sha256:b2e999bda4c90fc58c924e19787f5f7037f9d48fd83e7deebd06e3e1d5b31e8d\nRUN curl -f --location ${ent_server_url}/raw/${ent_digest} > /usr/local/bin/ent \\\n  && chmod +x /usr/local/bin/ent \\\n  && ent\n\n# Use a fixed version of Bazel.\nARG bazel_version=4.2.0\nARG bazel_digest=sha256:89b14fa0d9ce5637f4e0b66df56a531e1e3c50d88614311334d192531cf1e0fa\nARG bazel_url=https://storage.googleapis.com/bazel-apt/pool/jdk1.8/b/bazel/bazel_${bazel_version}_amd64.deb\nRUN ent get ${bazel_digest} --url=${bazel_url} > bazel.deb \\\n  && apt-get install --no-install-recommends --yes ./bazel.deb \\\n  && rm bazel.deb \\\n  && apt-get clean \\\n  && bazel version && rm -rf /var/lib/apt/lists/*;\n\n# Install the necessary binaries and SDKs, ordering them from the less frequently changed to the\n# more frequently changed.\n# See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache.\n\n# Install Emscripten.\nARG emscripten_version=1.39.17\n# Pick compatible Node version by grepping \"node\" in the emscripten.zip\n# Node is needed to expose npm needed for installing Prettier.\nARG emscripten_node_version_directory=12.9.1_64bit\nARG emscripten_digest=sha256:925dd5ca7dd783d0b367386e81847eaf680d54ae86017c4b5846dea951e17dc9\n\nARG emscripten_dir=/usr/local/emsdk\nARG emscripten_temp=/tmp/emscripten.zip\nRUN mkdir --parents ${emscripten_dir} \\\n  && ent get ${emscripten_digest} --url=https://github.com/emscripten-core/emsdk/archive/${emscripten_version}.tar.gz > ${emscripten_temp} \\\n  && tar --extract --gzip --file=${emscripten_temp} --directory=${emscripten_dir} --strip-components=1 \\\n  && rm ${emscripten_temp} \\\n  && ${emscripten_dir}/emsdk install ${emscripten_version} \\\n  && ${emscripten_dir}/emsdk activate --embedded ${emscripten_version}\nENV EMSDK \"${emscripten_dir}\"\nENV EM_CONFIG \"${emscripten_dir}/.emscripten\"\nENV EM_CACHE \"${emscripten_dir}/.emscripten_cache\"\nENV PATH \"${emscripten_dir}:${emscripten_dir}/node/${emscripten_node_version_directory}/bin:${PATH}\"\n# We need to allow a non-root Docker container to write into the directory\nRUN chmod --recursive go+wx \"${emscripten_dir}\"\n# Emscripten brings Node with it, we need to allow non-root access to temp and\n# config folders\nRUN mkdir -p \"/.npm\" && chmod a+rwx \"/.npm\" & mkdir -p \"/.config\" && chmod a+rwx \"/.config\"\n\n# Install Go.\nARG golang_version=1.17.7\nARG golang_digest=sha256:02b111284bedbfa35a7e5b74a06082d18632eff824fd144312f6063943d49259\nARG golang_temp=/tmp/golang.tar.gz\nENV GOROOT /usr/local/go\nENV GOPATH ${HOME}/go\nENV PATH \"${GOROOT}/bin:${PATH}\"\nENV PATH \"${GOPATH}/bin:${PATH}\"\n# Enable Go module behaviour even in the presence of GOPATH; this way we can specify precise\n# versions via `go install`.\n# See https://dev.to/maelvls/why-is-go111module-everywhere-and-everything-about-go-modules-24k\nENV GO111MODULE on\nRUN mkdir --parents ${GOROOT} \\\n  && ent get ${golang_digest} --url=https://dl.google.com/go/go${golang_version}.linux-amd64.tar.gz > ${golang_temp} \\\n  && tar --extract --gzip --file=${golang_temp} --directory=${GOROOT} --strip-components=1 \\\n  && rm ${golang_temp} \\\n  && go version\n\n# Install embedmd (Markdown snippet embedder) (via Go).\n# https://github.com/campoy/embedmd\nRUN go get github.com/campoy/embedmd@97c13d6 \\\n  && embedmd -v\n\n# Install liche (Markdown link checker) (via Go).\n# https://github.com/raviqqe/liche\nRUN go get github.com/raviqqe/liche@f9ba5f2 \\\n  && liche --version\n\n# Install prettier and markdownlint (via Node.js).\n# This will use the Node version installed by emscripten.\n# https://prettier.io/\n# https://github.com/igorshubovych/markdownlint-cli\nARG prettier_version=2.5.1\nARG prettier_plugin_toml_version=0.3.1\nARG markdownlint_version=0.30.0\nRUN npm install --global \\\n  prettier@${prettier_version} \\\n  prettier-plugin-toml@${prettier_plugin_toml_version} \\\n  markdownlint-cli@${markdownlint_version} \\\n  && prettier --version \\\n  && markdownlint --version && npm cache clean --force;\n\n# Install hadolint.\n# https://github.com/hadolint/hadolint\nARG hadolint_version=2.8.0\nARG hadolint_digest=sha256:9dfc155139a1e1e9b3b28f3de9907736b9dfe7cead1c3a0ae7ff0158f3191674\nARG hadolint_dir=/usr/local/hadolint/bin\nARG hadolint_bin=${hadolint_dir}/hadolint\nENV PATH \"${hadolint_dir}:${PATH}\"\nRUN mkdir --parents ${hadolint_dir} \\\n  && ent get ${hadolint_digest} --url=https://github.com/hadolint/hadolint/releases/download/v${hadolint_version}/hadolint-Linux-x86_64 > ${hadolint_bin} \\\n  && chmod +x ${hadolint_bin} \\\n  && hadolint --version\n\n# Install buildifier.\n# https://github.com/bazelbuild/buildtools/tree/master/buildifier\nARG bazel_tools_version=5.0.0\nARG buildifier_digest=sha256:18a518a4b9b83bb96a115a681099ae6c115217e925a2dacfb263089e3a791b5d\nARG buildifier_dir=/usr/local/buildifier/bin\nARG buildifier_bin=${buildifier_dir}/buildifier\nENV PATH \"${buildifier_dir}:${PATH}\"\nRUN mkdir --parents ${buildifier_dir} \\\n  && ent get ${buildifier_digest} --url=https://github.com/bazelbuild/buildtools/releases/download/${bazel_tools_version}/buildifier-linux-amd64 > ${buildifier_bin} \\\n  && chmod +x ${buildifier_bin} \\\n  && buildifier --version\n\n# Install Protobuf compiler.\nARG protobuf_version=3.19.4\nARG protobuf_digest=sha256:058d29255a08f8661c8096c92961f3676218704cbd516d3916ec468e139cbd87\nARG protobuf_dir=/usr/local/protobuf\nARG protobuf_temp=/tmp/protobuf.zip\nENV PATH \"${protobuf_dir}/bin:${PATH}\"\nRUN ent get ${protobuf_digest} --url=https://github.com/protocolbuffers/protobuf/releases/download/v${protobuf_version}/protoc-${protobuf_version}-linux-x86_64.zip > ${protobuf_temp} \\\n  && unzip ${protobuf_temp} -d ${protobuf_dir} \\\n  && rm ${protobuf_temp} \\\n  && chmod --recursive a+rwx ${protobuf_dir} \\\n  && protoc --version\n\n# Install rustup.\nARG rustup_dir=/usr/local/cargo\nENV RUSTUP_HOME ${rustup_dir}\nENV CARGO_HOME ${rustup_dir}\nENV PATH \"${rustup_dir}/bin:${PATH}\"\nRUN curl -f --location https://sh.rustup.rs > /tmp/rustup \\\n  && sh /tmp/rustup -y --default-toolchain=none \\\n  && chmod a+rwx ${rustup_dir} \\\n  && rustup --version\n\n# Install Rust toolchain.\n# We currently need the nightly version in order to be able to compile some of the examples.\n# See https://rust-lang.github.io/rustup-components-history/ for how to pick a version that supports\n# the appropriate set of components.\nARG rust_version=nightly-2022-04-22\nRUN rustup toolchain install ${rust_version} \\\n  && rustup default ${rust_version}\n\n# Install WebAssembly target for Rust.\nRUN rustup target add wasm32-unknown-unknown\n\n# Install musl target for Rust (for statically linked binaries).\nRUN rustup target add x86_64-unknown-linux-musl\n\n# Install rustfmt and clippy.\nRUN rustup component add \\\n  clippy \\\n  rust-src \\\n  rustfmt\n\n# No binary available on Github, have to use cargo install.\n# https://github.com/deadlinks/cargo-deadlinks\nARG deadlinks_version=0.8.1\nRUN cargo install --version=${deadlinks_version} cargo-deadlinks\n\n# Install cargo-fuzz.\n# To allow local testing of the fuzzing functionality.\n# https://github.com/rust-fuzz/cargo-fuzz\n# change cargo-fuzz to the following to avoid a recent failure\n# cf. https://github.com/rust-fuzz/cargo-fuzz/pull/277\nRUN cargo install --git https://github.com/rust-fuzz/cargo-fuzz/ --rev 8c964bf183c93cd49ad655eb2f3faecf543d0012\n\n# Install Wizer.\n# To allow running warmup initialisation on example Wasm modules.\n# https://github.com/bytecodealliance/wizer\nARG wizer_version=1.4.0\nRUN cargo install --version=${wizer_version} wizer --all-features\n\n# Install crosvm.\n# We're not interested in most of the features in crosvm (e.g. wayland support), but GDB support would be nice.\nRUN cargo install --git https://chromium.googlesource.com/chromiumos/platform/crosvm/ --rev 31f04e92709980a4ffc56b1631f8b4be437cc2fe crosvm --no-default-features --features gdb\n\n# Where to install rust tooling\nARG install_dir=${rustup_dir}/bin\n\n# Install grcov.\n# https://github.com/mozilla/grcov\nARG grcov_version=v0.5.15\nARG grcov_location=https://github.com/mozilla/grcov/releases/download/${grcov_version}/grcov-linux-x86_64.tar.bz2\nRUN curl -f --location ${grcov_location} | tar --extract --bzip2 --directory=${install_dir}\nRUN chmod +x ${install_dir}/grcov\n\n# Install cargo-crev.\n# https://github.com/crev-dev/cargo-crev\nARG crev_version=v0.23.0\nARG crev_location=https://github.com/crev-dev/cargo-crev/releases/download/${crev_version}/cargo-crev-${crev_version}-x86_64-unknown-linux-musl.tar.gz\nRUN curl -f --location ${crev_location} | tar --extract --gzip --directory=${install_dir} --strip-components=1\nRUN chmod +x ${install_dir}/cargo-crev\n\n# Install cargo-deny\n# https://github.com/EmbarkStudios/cargo-deny\nARG deny_version=0.11.3\nARG deny_location=https://github.com/EmbarkStudios/cargo-deny/releases/download/${deny_version}/cargo-deny-${deny_version}-x86_64-unknown-linux-musl.tar.gz\nRUN curl -f --location ${deny_location} | tar --extract --gzip --directory=${install_dir} --strip-components=1\nRUN chmod +x ${install_dir}/cargo-deny\n\n# Install cargo-udeps\n# https://github.com/est31/cargo-udeps\nARG udeps_version=v0.1.26\nARG udeps_dir=cargo-udeps-${udeps_version}-x86_64-unknown-linux-gnu\nARG udeps_location=https://github.com/est31/cargo-udeps/releases/download/${udeps_version}/cargo-udeps-${udeps_version}-x86_64-unknown-linux-gnu.tar.gz\nRUN curl -f --location ${udeps_location} | tar --extract --gzip --directory=${install_dir} --strip-components=2 ./${udeps_dir}/cargo-udeps\nRUN chmod +x ${install_dir}/cargo-udeps\n\n# Install rust-analyzer\n# https://github.com/rust-analyzer/rust-analyzer\nARG rust_analyzer_version=2022-02-14\nARG rust_analyzer_location=https://github.com/rust-analyzer/rust-analyzer/releases/download/${rust_analyzer_version}/rust-analyzer-x86_64-unknown-linux-gnu.gz\nRUN curl -f --location ${rust_analyzer_location} | gzip --decompress \"$@\" > ${install_dir}/rust-analyzer\nRUN chmod +x ${install_dir}/rust-analyzer\n\n# Unset $CARGO_HOME so that the new user will use the default value for it, which will point it to\n# its own home folder.\nENV CARGO_HOME \"\"\n\n# Build a statically-linked version of OpenSSL with musl\nENV OPENSSL_DIR /musl\nRUN mkdir ${OPENSSL_DIR}\n\nRUN ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm\nRUN ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic\nRUN ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux\n\nARG openssl_dir=/usr/local/openssl\nRUN mkdir --parents ${openssl_dir}\nRUN curl -f --location https://github.com/openssl/openssl/archive/OpenSSL_1_1_1f.tar.gz | tar --extract --gzip --directory=${openssl_dir}/\nWORKDIR ${openssl_dir}/openssl-OpenSSL_1_1_1f\nRUN CC=\"musl-gcc -fPIE -pie\" ./Configure no-shared no-async --prefix=/musl --openssldir=\"${OPENSSL_DIR}/ssl\" linux-x86_64\nRUN make depend && make -j\"$(nproc)\"&& make install_sw install_ssldirs\n\n# Allow the build to find statically built OpenSSL.\nENV PKG_CONFIG_ALLOW_CROSS 1\nENV OPENSSL_STATIC 1\n\n# Install sccache\n# https://github.com/mozilla/sccache\nARG sccache_version=v0.2.15\nARG sccache_dir=/usr/local/sccache\nARG sccache_location=https://github.com/mozilla/sccache/releases/download/${sccache_version}/sccache-${sccache_version}-x86_64-unknown-linux-musl.tar.gz\nENV PATH \"${sccache_dir}:${PATH}\"\nRUN mkdir --parents ${sccache_dir} \\\n  && curl -f --location ${sccache_location} | tar --extract --gzip --directory=${sccache_dir} --strip-components=1 \\\n  && chmod +x ${sccache_dir}/sccache\n\n# Install flatbuffers\n# https://github.com/google/flatbuffers\n# We build the recent flatc version that generates no_std compatible rust code.\n# Once a release with that commit has been issued we can revert to using\n# a released binary.\n# Ref:https://chromium.googlesource.com/external/github.com/google/flatbuffers/+/750dde766990d75f849370582a0f90307c410537\nARG flatc_commit=750dde766990d75f849370582a0f90307c410537\nARG flatbuffer_tmp_dir=/tmp/flatbuffer\n# cmake is required to build flatbuffer\nRUN apt-get --yes update \\\n  && apt-get install --no-install-recommends --yes --option Acquire::http::Dl-Limit=500 \\\n  cmake \\\n  && apt-get clean \\\n  && rm --recursive --force /var/lib/apt/lists/*\nRUN git clone https://github.com/google/flatbuffers.git ${flatbuffer_tmp_dir}\nWORKDIR ${flatbuffer_tmp_dir}\nRUN git checkout ${flatc_commit} \\\n  && cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release \\\n  && make -j \\\n  && cp ./flatc -d /usr/local/bin/ \\\n  && chmod +x /usr/local/bin/flatc \\\n  && rm -rf ${flatbuffer_tmp_dir} \\\n  && flatc --version\n\n# By default, sccache uses `~/.cache/sccache` locally: https://github.com/mozilla/sccache#local.\nENV RUSTC_WRAPPER sccache\n\n# Disable cargo incremental compilation, as it conflicts with sccache: https://github.com/mozilla/sccache#rust\nENV CARGO_INCREMENTAL false\n\n# We use the `docker` user in order to maintain library paths on different\n# machines and to make Wasm modules reproducible.\n#\n# We do not set this as the default user in the Docker image, because we expect its uid not to match\n# uid of the host, therefore we need to first fix the uid before actually using the user. This is\n# done by /scripts/fix_docker_user_and_run .\nRUN useradd --shell=/bin/bash --create-home --user-group docker\n\n# To make the scripts available to call from everywhere.\nENV PATH \"/workspace/scripts:${PATH}\"\n\n# Add sourcing of xtask_bash_completion file to .bashrc\nRUN echo -e \"\\n#activate xtask auto-complete\\nif [ -f /workspace/.xtask_bash_completion ]; then\\n  source /workspace/.xtask_bash_completion \\nfi\" >> /home/docker/.bashrc\n\n# Define alias\nRUN echo -e \"\\nalias ll='ls -l'\\n\" >> /home/docker/.bashrc\n"
}