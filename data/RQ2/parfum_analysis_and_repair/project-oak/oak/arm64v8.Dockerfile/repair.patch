diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/project-oak/oak/arm64v8.Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/project-oak/oak/arm64v8.Dockerfile/repaired.Dockerfile
index b45f995..d69fffa 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/project-oak/oak/arm64v8.Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/project-oak/oak/arm64v8.Dockerfile/repaired.Dockerfile
@@ -48,19 +48,19 @@ RUN apt-get --yes update \
   && apt-get clean \
   && rm --recursive --force /var/lib/apt/lists/*
 ARG bazel_version
-RUN curl --location -k https://github.com/bazelbuild/bazel/releases/download/${bazel_version}/bazel-${bazel_version}-dist.zip  -o bazel-${bazel_version}-dist.zip
+RUN curl -f --location -k https://github.com/bazelbuild/bazel/releases/download/${bazel_version}/bazel-${bazel_version}-dist.zip -o bazel-${bazel_version}-dist.zip
 RUN  unzip bazel-${bazel_version}-dist.zip
-RUN  BUILD_DATE="$(date --utc --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +%Y-%m-%d)" EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk" bash ./compile.sh 
+RUN  BUILD_DATE="$(date --utc --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +%Y-%m-%d)" EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk" bash ./compile.sh
 
 # Rebuild Bazel using bootstrap stage
 FROM bazel-bootstrap AS bazel-build
 RUN apt-get --yes update \
   && apt-get install --no-install-recommends --yes \
-  git 
+  git && rm -rf /var/lib/apt/lists/*;
 WORKDIR /bazel/bazel-build
 ARG bazel_version
 RUN git clone -b ${bazel_version}  https://github.com/bazelbuild/bazel
-WORKDIR /bazel/bazel-build/bazel 
+WORKDIR /bazel/bazel-build/bazel
 COPY --from=bazel-bootstrap /bazel/bazel-dist/output/bazel ./bazel-bootstrap
 RUN SOURCE_DATE_EPOCH=$(git log -1 --format=%ct) ./bazel-bootstrap build //src:bazel-dev --compilation_mode=opt
 
@@ -132,7 +132,7 @@ RUN echo 'deb http://deb.debian.org/debian buster-backports main' > /etc/apt/sou
 
 
 # [aarch64] Pull in the bootstrapped Bazel, unfortunately Bazel's Debian
-# packaging is currently amd64 specific 
+# packaging is currently amd64 specific
 COPY --from=bazel-build /bazel/bazel-build/bazel /usr/bin/bazel
 
 # [aarch64] Pull in the musl compiler
@@ -144,7 +144,7 @@ COPY --from=musl-build /musl/musl-cross-make/output /usr
 
 # [aarch64] Binaryen has components that require building from source as the
 # packaging is amd64 specific.
-# It is disabled for now - A multi-stage approach as per Bazel would seem semsible. 
+# It is disabled for now - A multi-stage approach as per Bazel would seem semsible.
 # Install Emscripten.
 #ARG emscripten_version=1.39.20
 #ARG emscripten_node_version=12.9.1_64bit
@@ -184,8 +184,8 @@ RUN echo  "Getting go for Platform: $TARGETPLATFORM, OS: $TARGETOS, Arch: $TARGE
 # See https://dev.to/maelvls/why-is-go111module-everywhere-and-everything-about-go-modules-24k
 ENV GO111MODULE on
 RUN mkdir --parents ${GOROOT} \
-  && curl --location https://dl.google.com/go/go${golang_version}.linux-${TARGETARCH}.tar.gz > ${golang_temp} \
-  && sha256sum --binary ${golang_temp} && echo "${golang_sha256} *${golang_temp}" | sha256sum --check \
+  && curl -f --location https://dl.google.com/go/go${golang_version}.linux-${TARGETARCH}.tar.gz > ${golang_temp} \
+  && sha256sum --binary ${golang_temp} && echo "${golang_sha256}  *${golang_temp}" | sha256sum --check \
   && tar --extract --gzip --file=${golang_temp} --directory=${GOROOT} --strip-components=1 \
   && rm ${golang_temp} \
   && go version
@@ -212,10 +212,10 @@ RUN npm install --global \
   prettier-plugin-toml@${prettier_plugin_toml_version} \
   markdownlint-cli@${markdownlint_version} \
   && prettier --version \
-  && markdownlint --version
+  && markdownlint --version && npm cache clean --force;
 
 
-# This will require a from source approach as 
+# This will require a from source approach as
 # stack have removed arm64 support due to CI limitations
 # May require some integration with Haskell Community.
 #
@@ -250,7 +250,7 @@ ARG rustup_dir=/usr/local/cargo
 ENV RUSTUP_HOME ${rustup_dir}
 ENV CARGO_HOME ${rustup_dir}
 ENV PATH "${rustup_dir}/bin:${PATH}"
-RUN curl --location https://sh.rustup.rs > /tmp/rustup \
+RUN curl -f --location https://sh.rustup.rs > /tmp/rustup \
   && sh /tmp/rustup -y --default-toolchain=none \
   && chmod a+rwx ${rustup_dir} \
   && rustup --version
@@ -286,19 +286,19 @@ ARG install_dir=${rustup_dir}/bin
 # https://github.com/mozilla/grcov
 ARG grcov_version=v0.5.15
 ARG grcov_location=https://github.com/mozilla/grcov/releases/download/${grcov_version}/grcov-linux-x86_64.tar.bz2
-RUN curl --location ${grcov_location} | tar --extract --bzip2 --directory=${install_dir}
+RUN curl -f --location ${grcov_location} | tar --extract --bzip2 --directory=${install_dir}
 RUN chmod +x ${install_dir}/grcov
 
 # Install cargo-crev.
 # https://github.com/crev-dev/cargo-crev
 ARG crev_version=v0.16.1
 ARG crev_location=https://github.com/crev-dev/cargo-crev/releases/download/${crev_version}/cargo-crev-${crev_version}-x86_64-unknown-linux-musl.tar.gz
-RUN curl --location ${crev_location} | tar --extract --gzip --directory=${install_dir} --strip-components=1
+RUN curl -f --location ${crev_location} | tar --extract --gzip --directory=${install_dir} --strip-components=1
 RUN chmod +x ${install_dir}/cargo-crev
 
 # Install cargo-deny
 # https://github.com/EmbarkStudios/cargo-deny
 ARG deny_version=0.7.0
 ARG deny_location=https://github.com/EmbarkStudios/cargo-deny/releases/download/${deny_version}/cargo-deny-${deny_version}-x86_64-unknown-linux-musl.tar.gz
-RUN curl --location ${deny_location} | tar --extract --gzip --directory=${install_dir} --strip-components=1
+RUN curl -f --location ${deny_location} | tar --extract --gzip --directory=${install_dir} --strip-components=1
 RUN chmod +x ${install_dir}/cargo-deny