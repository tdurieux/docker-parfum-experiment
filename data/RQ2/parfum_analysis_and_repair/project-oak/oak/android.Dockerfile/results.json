{
  "startTime": 1674216773887,
  "endTime": 1674216774618,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 135
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 39,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 64
      }
    }
  ],
  "repairedDockerfile": "# Download Debian-9 (Stretch) with openjdk-8 that is required for Android.\nARG debian_snapshot=stretch-20200327\nFROM debian/snapshot:${debian_snapshot}\n\nRUN apt-get --yes update && \\\n    apt-get install --no-install-recommends --yes \\\n    bash-completion \\\n    bison \\\n    build-essential \\\n    curl \\\n    flex \\\n    git \\\n    libisl-dev \\\n    libmpc-dev \\\n    libmpfr-dev \\\n    libncurses5 \\\n    ocaml-nox \\\n    openjdk-8-jdk \\\n    python-dev \\\n    python2.7-dev \\\n    python3-dev \\\n    rsync \\\n    texinfo \\\n    vim \\\n    wget \\\n    xml2 \\\n    # `unzip` and `zlib1g-dev` are needed for Bazel.\n    unzip \\\n    zlib1g-dev \\\n    && apt-get clean \\\n    && rm --recursive --force /var/lib/apt/lists/* \\\n    # Print version of various installed tools.\n    && git --version\n\n# Use a fixed version of Bazel.\nARG bazel_version=3.0.0\nARG bazel_sha256=dfa79c10bbfa39cd778e1813a273fd3236beb495497baa046f26d393c58bdc35\nARG bazel_url=https://storage.googleapis.com/bazel-apt/pool/jdk1.8/b/bazel/bazel_${bazel_version}_amd64.deb\nRUN curl -f --location \"${bazel_url}\" > bazel.deb \\\n    && sha256sum --binary bazel.deb && echo \"${bazel_sha256}  *bazel.deb\" | sha256sum --check \\\n    && apt-get install --no-install-recommends --yes ./bazel.deb \\\n    && rm bazel.deb \\\n    && apt-get clean \\\n    && bazel version && rm -rf /var/lib/apt/lists/*;\n\n# Install Android SDK.\n# https://developer.android.com/studio/#downloads\nARG android_sdk_version=4333796\nENV ANDROID_HOME /opt/android-sdk\nRUN mkdir --parents ${ANDROID_HOME} \\\n    && curl -f --location https://dl.google.com/android/repository/sdk-tools-linux-\"${android_sdk_version}\".zip > android_sdk.zip \\\n    && unzip android_sdk.zip -d ${ANDROID_HOME} \\\n    && rm android_sdk.zip\n\n# Install Android Platform Tools.\n# https://developer.android.com/studio/releases/platform-tools\n# https://developer.android.com/studio/releases/platforms\n# https://developer.android.com/studio/releases/build-tools\n# '28.0.3' is the maximal version supported by NDK.\nARG platform=28\nARG tools=28.0.3\nRUN ${ANDROID_HOME}/tools/bin/sdkmanager --update \\\n    && yes | ${ANDROID_HOME}/tools/bin/sdkmanager --licenses \\\n    && yes | ${ANDROID_HOME}/tools/bin/sdkmanager \\\n    'tools' 'platform-tools' 'cmake;3.6.4111459' \\\n    \"platforms;android-${platform}\" \"build-tools;${tools}\" \\\n    \"system-images;android-${platform};default;x86_64\"\n\n# Set up Android SDK paths.\nENV PATH \"${PATH}:${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools/bin\"\nENV LD_LIBRARY_PATH \"${LD_LIBRARY_PATH}:${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib\"\n\n# Create an Android emulator.\n# `no` is used to opt-out from custom hardware profile.\nRUN echo no | ${ANDROID_HOME}/tools/bin/avdmanager create avd \\\n    -n \"android-${platform}-x86_64\" \\\n    -k \"system-images;android-${platform};default;x86_64\" \\\n    -b x86_64\n\n# Install Android NDK\n# https://developer.android.com/ndk/downloads\nARG android_ndk_version=r20b\nENV ANDROID_NDK_HOME /opt/android-ndk\nRUN mkdir --parents ${ANDROID_NDK_HOME} \\\n    && curl -f --location https://dl.google.com/android/repository/android-ndk-\"${android_ndk_version}\"-linux-x86_64.zip > android_ndk.zip \\\n    && unzip android_ndk.zip -d ${ANDROID_NDK_HOME} \\\n    && mv ${ANDROID_NDK_HOME}/android-ndk-${android_ndk_version}/* ${ANDROID_NDK_HOME} \\\n    && rm --recursive --force android_ndk.zip\n\n# Bazel requires HOME variable to be set.\n# https://github.com/bazelbuild/bazel/issues/471\nENV HOME /workspace\n\n# We use the `docker` user in order to maintain library paths on different\n# machines and to make Wasm modules reproducible.\nARG USERNAME=docker\n\n# Placeholder args that are expected to be passed in at image build time.\n# See https://code.visualstudio.com/docs/remote/containers-advanced#_creating-a-nonroot-user\nARG USER_UID=1000\nARG USER_GID=${USER_UID}\n\n# Create the specified user and group.\n#\n# Ignore errors if the user or group already exist (it should only happen if the image is being\n# built as root, which happens on GCB).\nRUN (groupadd --gid=${USER_GID} ${USERNAME} || true) \\\n    && (useradd --shell=/bin/bash --uid=${USER_UID} --gid=${USER_GID} --create-home ${USERNAME} || true)\n\n# Set the default user as the newly created one, so that any operations performed from within the\n# Docker container will appear as if performed by the outside user, instead of root.\nUSER ${USER_UID}\n"
}