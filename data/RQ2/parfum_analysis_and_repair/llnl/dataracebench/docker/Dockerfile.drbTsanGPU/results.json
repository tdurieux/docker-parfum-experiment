{
  "startTime": 1674251972210,
  "endTime": 1674251972984,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nLABEL maintainer \"NVIDIA CORPORATION <cudatools@nvidia.com>\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\ngnupg2 curl ca-certificates && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \\\n    echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /\" > /etc/apt/sources.list.d/cuda.list && \\\n    echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list && \\\n    apt-get purge --autoremove -y curl && \\\nrm -rf /var/lib/apt/lists/*\n\nENV CUDA_VERSION 10.2.89\n\nENV CUDA_PKG_VERSION 10-2=$CUDA_VERSION-1\n\n# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-cudart-$CUDA_PKG_VERSION \\\ncuda-compat-10-2 && \\\nln -s cuda-10.2 /usr/local/cuda && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Required for nvidia-docker v1\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nENV NVIDIA_REQUIRE_CUDA \"cuda>=10.1 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411\"\n\n#add user\n\nRUN groupadd -g 9999 drb && \\\n    useradd -r -u 9999 -g drb -m -d /home/drb drb\n\n#install packages\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        apt-utils \\\n        bc \\\n        build-essential \\\n        cmake \\\n        curl \\\n        dialog \\\n        g++ \\\n        gcc \\\n        gdb \\\n        git \\\n        python3-dev \\\n        software-properties-common \\\n        time \\\n        vim \\\n        wget && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    rm -rf /var/cache/*\n\n#build llvm\n\nENV TSAN_BUILD /opt/TsanBuild\n\n#ENV CC $(which gcc)\n#ENV CXX $(which g++)\n\nRUN mkdir -p $TSAN_BUILD && \\\n    cd $TSAN_BUILD && \\\n    wget https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1/llvm-project-10.0.1.tar.xz &&\\\n    tar xf llvm-project-10.0.1.tar.xz &&\\\n    mkdir build-llvm &&\\\n    cd build-llvm &&\\\n    cmake -DCMAKE_BUILD_TYPE=Release  \\\n    -DCMAKE_INSTALL_PREFIX=$PWD/install/ \\\n    -DLLVM_ENABLE_PROJECTS=\"clang;compiler-rt;libunwind;openmp\"  \\\n    -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_35  \\\n    -DLIBOMPTARGET_ENABLE_DEBUG=on  \\\n    -DLIBOMPTARGET_NVPTX_ENABLE_BCLIB=true  \\\n    -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=35,60,70  \\\n    ../llvm-project-10.0.1/llvm/ &&\\\n    make -j16 && \\\n    make install -j16 && rm llvm-project-10.0.1.tar.xz\n\n#set environment\n\nENV PATH ${TSAN_BUILD}/build-llvm/install/bin:${PATH}\nENV LD_LIBRARY_PATH ${TSAN_BUILD}/build-llvm/install/lib:${LD_LIBRARY_PATH}\n\nUSER drb\nWORKDIR /home/drb\n\nRUN git clone https://github.com/LLNL/dataracebench.git\n"
}