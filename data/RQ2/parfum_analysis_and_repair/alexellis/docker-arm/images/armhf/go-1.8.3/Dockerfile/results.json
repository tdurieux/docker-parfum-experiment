{
  "startTime": 1674256042670,
  "endTime": 1674256043452,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 1,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM arm32v6/alpine:3.6\n\nRUN apk add --no-cache ca-certificates\n\nENV GOLANG_VERSION 1.8.4\n\n# https://golang.org/issue/14851 (Go 1.8 & 1.7)\n# https://golang.org/issue/17847 (Go 1.7)\nCOPY *.patch /go-alpine-patches/\n\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps \\\n\t\tbash \\\n\t\tgcc \\\n\t\tmusl-dev \\\n\t\topenssl \\\n\t\tgo \\\n\t; \\\n\texport \\\n# set GOROOT_BOOTSTRAP such that we can actually build Go\n\t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \\\n# ... and set \"cross-building\" related vars to the installed system's values so that we create a build targeting the proper arch\n# (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)\n\t\tGOOS=\"$(go env GOOS)\" \\\n\t\tGOARCH=\"$(go env GOARCH)\" \\\n\t\tGO386=\"$(go env GO386)\" \\\n\t\tGOARM=\"$(go env GOARM)\" \\\n\t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \\\n\t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \\\n\t; \\\n\n\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \\\n\techo 'abf1b2e5ae2a4845f3d2eac00c7382ff209e2c132dc35b7ce753da9b4f52e59f  *go.tgz' | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tcd /usr/local/go/src; \\\n\tfor p in /go-alpine-patches/*.patch; do \\\n\t\t[ -f \"$p\" ] || continue; \\\n\t\tpatch -p2 -i \"$p\"; \\\n\tdone; \\\n\t./make.bash; \\\n\n\trm -rf /go-alpine-patches; \\\n\tapk del .build-deps; \\\n\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n\nCOPY go-wrapper /usr/local/bin/\n\n"
}