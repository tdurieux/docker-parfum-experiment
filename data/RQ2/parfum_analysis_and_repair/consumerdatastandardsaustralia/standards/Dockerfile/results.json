{
  "startTime": 1674250357161,
  "endTime": 1674250358770,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedDockerfile": "FROM nginx\n\nENV RUBY_MAJOR 2.6\nENV RUBY_VERSION 2.6.3\nENV RUBY_DOWNLOAD_SHA256 11a83f85c03d3f0fc9b8a9b6cad1b2674f26c5aaa43ba858d4b0fcc2b54171e1\nENV BUILDDEPS bison dpkg-dev libgdbm-dev wget autoconf automake bzip2 dpkg-dev file g++ gcc imagemagick libbz2-dev libc6-dev libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgdbm-dev libgeoip-dev libglib2.0-dev libjpeg-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev libncurses5-dev libncursesw5-dev libpng-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt-dev libyaml-dev make nodejs patch unzip xz-utils zlib1g-dev ca-certificates apt-utils\n\n\n#########\n# Stu (11/02/19): Merged buildpack-deps and ruby runtime dockerfile\n########\n\n# skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n\t&& { \\\n\t\techo 'install: --no-document'; \\\n\t\techo 'update: --no-document'; \\\n\t} >> /usr/local/etc/gemrc\n\nRUN set -ex \\\n\t\\\n\t&& apt-get update \\\n\t&& apt-get install -y --no-install-recommends $BUILDDEPS \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n\t&& echo \"$RUBY_DOWNLOAD_SHA256  *ruby.tar.xz\" | sha256sum -c - \\\n\n\t&& mkdir -p /usr/src/ruby \\\n\t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n\t&& rm ruby.tar.xz \\\n\n\t&& cd /usr/src/ruby \\\n\n# hack in \"ENABLE_PATH_CHECK\" disabling to suppress:\n#   warning: Insecure world writable dir\n\t&& { \\\n\t\techo '#define ENABLE_PATH_CHECK 0'; \\\n\t\techo; \\\n\t\tcat file.c; \\\n\t} > file.c.new \\\n\t&& mv file.c.new file.c \\\n\n\t&& autoconf \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--disable-install-doc \\\n\t\t--enable-shared \\\n\t&& make -j \"$(nproc)\" \\\n\t&& make install \\\n        && ruby --version && gem --version && bundle --version && rm -rf /usr/src/ruby\n\n# install things globally, for great justice\n# and don't create \".bundle\" in all our apps\nENV GEM_HOME /usr/local/bundle\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n\tBUNDLE_SILENCE_ROOT_WARNING=1 \\\n\tBUNDLE_APP_CONFIG=\"$GEM_HOME\"\n# path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH $GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\n# adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" && chmod 777 \"$GEM_HOME\"\n# (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n\n##############\n# Now we do standards specific build\n##############\n\n# Now get into baseline directory\nWORKDIR /opt/standards\n\n# Transfer the sphinx over\nCOPY slate /opt/standards\n\n# Upgrade bundler\nRUN gem install bundler\n\n# Figure out requirements\nRUN bundle install\n\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\nRUN apt-get update\n# Workaround for install bug\nRUN mkdir -p /usr/share/man/man1\nRUN apt-get install -y --no-install-recommends default-jre-headless npm && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir ~/swagger-codegen ~/openapi-codegen\n\nRUN wget --no-check-certificate https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.7/swagger-codegen-cli-2.4.7.jar -O ~/swagger-codegen/swagger-codegen-cli.jar\nRUN wget --no-check-certificate https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/3.3.4/openapi-generator-cli-3.3.4.jar -O ~/openapi-codegen/openapi-generator-cli.jar\n\nCOPY swagger-gen/ swagger-gen/\nCOPY slate/ slate/\nCOPY docs/ docs/\nCOPY build.sh /opt/standards\n\nRUN npm install --prefix ./swagger-gen/widdershins-cdr && npm cache clean --force;\n\nRUN ./build.sh\n\n# Build standards static output\n# RUN bundle exec middleman build --clean\n\n# Transfer files over (delete first)\nRUN rm -fr /usr/share/nginx/html\n\n# Now copy\nRUN cp -R docs/ /usr/share/nginx/html\n"
}