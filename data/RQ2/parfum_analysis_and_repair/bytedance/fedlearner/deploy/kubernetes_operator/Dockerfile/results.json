{
  "startTime": 1674248136917,
  "endTime": 1674248137439,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Accept the Go version for the image to be set as a build argument.\n# Default to Go 1.14\nARG GO_VERSION=1.14\n\n# First stage: build the executable.\nFROM golang:${GO_VERSION}-alpine AS builder\nARG WHAT=cmd/operator/main.go\n\n# Create the user and group files that will be used in the running container to\n# run the process as an unprivileged user.\nRUN mkdir /user && \\\n    echo 'nobody:x:65534:65534:nobody:/:' > /user/passwd && \\\n    echo 'nobody:x:65534:' > /user/group\n\nENV GOOS linux\nENV GOARCH amd64\nENV CGO_ENABLED 0\nENV WHAT=${WHAT}\n\nENV GO111MODULE=on\n\n# Set the working directory outside $GOPATH to enable the support for modules.\nWORKDIR /src\n\n# Fetch dependencies first; they are less susceptible to change on every build\n# and will therefore be cached for speeding up the next build\nCOPY ./go.mod ./go.sum ./\nRUN go mod download\n\n# Import the code from the context.\nCOPY ./ ./\n\nRUN go build -o /app -trimpath \"${WHAT}\"\n\n# Final stage: the running container.\nFROM alpine AS final\n\n# Import the user and group files from the first stage.\nCOPY --from=builder /user/group /user/passwd /etc/\n\n# Import the Certificate-Authority certificates for enabling HTTPS.\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\n# Import the compiled executable from the first stage.\nCOPY --from=builder /app /app\n\nENV TZ=\"Asia/Shanghai\"\n\nRUN apk --update --no-cache add tzdata && cp /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Perform any further action as an unprivileged user.\nUSER nobody:nobody\n\n# Run the compiled binary.\nENTRYPOINT [\"/app\"]\n"
}