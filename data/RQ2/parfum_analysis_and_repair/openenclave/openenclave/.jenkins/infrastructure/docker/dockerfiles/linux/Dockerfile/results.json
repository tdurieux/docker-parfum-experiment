{
  "startTime": 1674216608013,
  "endTime": 1674216609206,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) Open Enclave SDK contributors.\n# Licensed under the MIT License.\n\n#\n# IMPORTANT- Please update the version number in the next sentence\n# when you create a new docker image.\n#\n# This Dockerfile script builds an image for tag oetools-18.04/20.04\n\n# To use this Dockerfile, you will need to install docker-ce.\n#\n# Once installed, build a docker image from .jenkins folder and\n# it will use this Dockerfile by default:\n#     openenclave$ sudo docker build --no-cache=true --build-arg ubuntu_version=<ubuntu_version> -t oetools-<ubuntu_version>:<version> -f .jenkins/Dockerfile.full .\n#\n# For example, for version 1.x with Ubuntu 18.04 :\n#     openenclave$ sudo docker build \\\n#         --no-cache=true \\\n#         --build-arg ubuntu_version=18.04 \\\n#         --build-arg devkits_uri=https://oejenkins.blob.core.windows.net/oejenkins/OE-CI-devkits-d1634ce8.tar.gz \\\n#         -t oetools-18.04:1.x \\\n#         -f .jenkins/infrastructure/docker/dockerfiles/linux/Dockerfile \\\n#         .\n#\n# Note that DNS forwarding in a VM can interfere with Docker\n# getting updates from Ubuntu apt-get repositories as part of the\n# Dockerfile script. To work around this, try disabling dnsmasq:\n#     $ sudo nano /etc/NetworkManager/NetworkManager.conf\n#     $ sudo service network-manager restart\n#     $ sudo service docker restart\n#\n# To view the image after it is created or tagged:\n#     $ sudo docker image ls\n#\n# Jenkins pulls the images it uses from the private oejenkinscidockerregistry\n# repository on Azure. To upload the image to that repository:\n#     $ sudo docker login oejenkinscidockerregistry.azurecr.io\n#     $ sudo docker tag oetools-<ubuntu_version>:<version> oejenkinscidockerregistry.azurecr.io/oetools-<ubuntu_version>:<version>\n#     $ sudo docker push oejenkinscidockerregistry.azurecr.io/oetools-<ubuntu_version>:<version>\n#     $ sudo docker logout\n#\n# This image includes out-of-proc attestation using Intel SGX by default.\n# To allow this, the Intel SGX AESM Service will need to be made available by creating the container with the following parameter:\n#   --volume /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket\n#\n\nARG ubuntu_version=18.04\n\nFROM ubuntu:${ubuntu_version}\n\nARG UNAME=jenkins\nARG GNAME=jenkins\n# This UID/GID needs to match Jenkins agent UID/GID\nARG UID=1000\nARG GID=1000\nARG devkits_uri\n\n# Workaround for https://githubmemory.com/repo/pypa/pip/issues/10219\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n\n# Install essential packages\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends upgrade && \\\n    apt-get -y --no-install-recommends install make build-essential git jq vim curl wget netcat apt-transport-https unzip && \\\n    apt-get clean && \\\n    rm -rf rm /var/lib/apt/lists/*\n\n# Setup devkit\nRUN curl -f ${devkits_uri} | tar xvz --no-same-permissions --no-same-owner\nRUN echo ${devkits_uri##*/} > /devkits/TARBALL\n\n# Add Microsoft repo\nRUN echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ bionic main\" | tee /etc/apt/sources.list.d/azure-cli.list && \\\n    wget https://packages.microsoft.com/keys/microsoft.asc && \\\n    apt-key add microsoft.asc\n\n# Install Azure CLI\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install azure-cli && \\\n    apt-get clean && \\\n    rm -rf rm /var/lib/apt/lists/*\n\n# Install packer\nRUN wget https://releases.hashicorp.com/packer/1.5.5/packer_1.5.5_linux_amd64.zip && \\\n    unzip packer_1.5.5_linux_amd64.zip -d /usr/sbin && \\\n    rm packer_1.5.5_linux_amd64.zip\n\n# Run Ansible\nCOPY ./scripts/ansible /ansible\nCOPY ./scripts/lvi-mitigation /lvi-mitigation\nRUN /ansible/install-ansible.sh && \\\n    ansible localhost --playbook-dir=/ansible -m import_role -a \"name=linux/docker tasks_from=ci-setup.yml\" -vvv && \\\n    /ansible/remove-ansible.sh && \\\n    apt-get remove -y python3-pip && \\\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /ansible /lvi-mitigation /root/.cache /root/.ansible /var/lib/apt/lists/*\n\n# Configure Git in target image to enable merge/rebase actions.\nRUN git config --global user.email \"oeciteam@microsoft.com\"\nRUN git config --global user.name \"OE CI Team\"\n\n# Create user\nRUN groupadd --gid ${GID} ${GNAME}\nRUN useradd --create-home --uid ${UID} --gid ${GID} --shell /bin/bash ${UNAME}\nRUN echo \"${UNAME} ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n# Set up out-of-proc attestation\nENV SGX_AESM_ADDR=1\n"
}