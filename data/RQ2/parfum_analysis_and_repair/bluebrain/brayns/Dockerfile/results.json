{
  "startTime": 1674250270033,
  "endTime": 1674250271402,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 6,
        "columnEnd": 17
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 6,
        "columnEnd": 70
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 6,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 6,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker container for running Brayns as a service\n# Check https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#user for best practices.\n\n# This Dockerfile leverages multi-stage builds, available since Docker 17.05\n# See: https://docs.docker.com/engine/userguide/eng-image/multistage-build/#use-multi-stage-builds\n\n# Image where Brayns is built\nFROM debian:buster-slim as builder\nLABEL maintainer=\"bbp-svc-viz@groupes.epfl.ch\"\nARG DIST_PATH=/app/dist\n\n# Install packages\nRUN apt-get update \\\n   && apt-get -y --no-install-recommends install \\\n   build-essential \\\n   cmake \\\n   git \\\n   ninja-build \\\n   libarchive-dev \\\n   libassimp-dev \\\n   libhdf5-serial-dev \\\n   libtbb-dev \\\n   pkg-config \\\n   wget \\\n   ca-certificates \\\n   libssl-dev \\\n   && apt-get clean \\\n   && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Get ISPC\n# https://ispc.github.io/downloads.html\n\nARG ISPC_VERSION=1.10.0b\nARG ISPC_DIR=ispc-v${ISPC_VERSION}-linux\nARG ISPC_PATH=/app/ispc-v1.10.0-linux\n\nRUN mkdir -p ${ISPC_PATH} \\\n   && wget https://github.com/ispc/ispc/releases/download/v1.10.0/${ISPC_DIR}.tar.gz \\\n   && tar zxvf ${ISPC_DIR}.tar.gz -C ${ISPC_PATH} --strip-components=1 \\\n   && rm -rf ${ISPC_PATH}/${ISPC_DIR}/examples && rm ${ISPC_DIR}.tar.gz\n\n# Add ispc bin to the PATH\nENV PATH $PATH:${ISPC_PATH}\n\n# Install embree\n# https://github.com/embree/embree/releases\nARG EMBREE_VERSION=3.5.2\nARG EMBREE_FILE=embree-${EMBREE_VERSION}.x86_64.linux.tar.gz\nRUN mkdir -p ${DIST_PATH} \\\n   && wget https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/${EMBREE_FILE} \\\n   && tar zxvf ${EMBREE_FILE} -C ${DIST_PATH} --strip-components=1 \\\n   && rm -rf ${DIST_PATH}/bin ${DIST_PATH}/doc\n\n# Install OSPRay\n# https://github.com/ospray/ospray/releases\nARG OSPRAY_TAG=v1.8.5\nARG OSPRAY_SRC=/app/ospray\n\nRUN mkdir -p ${OSPRAY_SRC} \\\n   && git clone https://github.com/ospray/ospray.git ${OSPRAY_SRC} \\\n   && cd ${OSPRAY_SRC} \\\n   && git checkout ${OSPRAY_TAG} \\\n   && mkdir -p build \\\n   && cd build \\\n   && CMAKE_PREFIX_PATH=${DIST_PATH} cmake .. -GNinja \\\n   -DOSPRAY_ENABLE_TUTORIALS=OFF \\\n   -DOSPRAY_ENABLE_APPS=OFF \\\n   -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n   && ninja install\n\n# Install libwebsockets (2.0 from Debian is not reliable)\n# https://github.com/warmcat/libwebsockets/releases\nARG LWS_VERSION=2.3.0\nARG LWS_SRC=/app/libwebsockets\nARG LWS_FILE=v${LWS_VERSION}.tar.gz\n\nRUN mkdir -p ${LWS_SRC} \\\n   && wget https://github.com/warmcat/libwebsockets/archive/${LWS_FILE} \\\n   && tar zxvf ${LWS_FILE} -C ${LWS_SRC} --strip-components=1 \\\n   && cd ${LWS_SRC} \\\n   && mkdir -p build \\\n   && cd build \\\n   && cmake .. -GNinja \\\n   -DCMAKE_BUILD_TYPE=Release \\\n   -DLWS_STATIC_PIC=ON \\\n   -DLWS_WITH_SSL=OFF \\\n   -DLWS_WITH_ZLIB=OFF \\\n   -DLWS_WITH_ZIP_FOPS=OFF \\\n   -DLWS_WITHOUT_EXTENSIONS=ON \\\n   -DLWS_WITHOUT_TESTAPPS=ON \\\n   -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n   && ninja install\n\nARG BOOST_SRC=/app/boost\n\nRUN mkdir ${BOOST_SRC} \\\n   && cd ${BOOST_SRC}  \\\n   && wget https://boostorg.jfrog.io/artifactory/main/release/1.70.0/source/boost_1_70_0.tar.gz \\\n   && tar -xzf boost_1_70_0.tar.gz  \\\n   && cd ./boost_1_70_0  \\\n   &&  ./bootstrap.sh \\\n   && ./b2 install -j 10 && rm boost_1_70_0.tar.gz\n\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.18.5/cmake-3.18.5.tar.gz \\\n   && tar xf cmake-3.18.5.tar.gz \\\n   && cd cmake-3.18.5 \\\n   && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n   && make -j 10 install && rm cmake-3.18.5.tar.gz\n\n# Set working dir and copy Brayns assets\nARG BRAYNS_SRC=/app/brayns\nWORKDIR /app\nADD . ${BRAYNS_SRC}\n\n\n# Install Brayns\n# https://github.com/BlueBrain/Brayns\n\n# TODO: \"|| exit 0\"  hack to be removed as soon as MVDTool export issue is fixed.\nRUN cd ${BRAYNS_SRC} \\\n   && mkdir -p build \\\n   && cd build \\\n   && CMAKE_PREFIX_PATH=${DIST_PATH}:${DIST_PATH}/lib/cmake/libwebsockets \\\n   cmake ..  \\\n   -DBRAYNS_CIRCUITEXPLORER_ENABLED=ON \\\n   -DBRAYNS_CIRCUITINFO_ENABLED=ON \\\n   -DCMAKE_BUILD_TYPE=Release \\\n   -DCMAKE_INSTALL_PREFIX=${DIST_PATH}\n\nRUN cd ${BRAYNS_SRC}/build && make -j4 install \\\n   && rm -rf ${DIST_PATH}/include ${DIST_PATH}/cmake ${DIST_PATH}/share\n\n# Final image, containing only Brayns and libraries required to run it\nFROM debian:buster-slim\nARG DIST_PATH=/app/dist\n\nRUN apt-get update \\\n   && apt-get -y --no-install-recommends install \\\n   libarchive13 \\\n   libassimp4 \\\n   libgomp1 \\\n   libhdf5-103 \\\n   && apt-get clean \\\n   && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# The COPY command below will:\n# 1. create a container based on the `builder` image (but do not start it)\n#    Equivalent to the `docker create` command\n# 2. create a new image layer containing the\n#    /app/dist directory of this new container\n#    Equivalent to the `docker copy` command.\nARG BOOST_LIB=/usr/local/lib\n\nCOPY --from=builder ${DIST_PATH} ${DIST_PATH}\nCOPY --from=builder ${BOOST_LIB} ${BOOST_LIB}\n\n# Add binaries from dist to the PATH\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:${DIST_PATH}/lib:${BOOST_LIB}\nENV PATH ${DIST_PATH}/bin:$PATH\n\n# Expose a port from the container\n# For more ports, use the `--expose` flag when running the container,\n# see https://docs.docker.com/engine/reference/run/#expose-incoming-ports for docs.\nEXPOSE 8200\n\n# When running `docker run -ti --rm -p 8200:8200 brayns`,\n# this will be the cmd that will be executed (+ the CLI options from CMD).\n# To ssh into the container (or override the default entry) use:\n# `docker run -ti --rm --entrypoint bash -p 8200:8200 brayns`\n# See https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime\n# for more docs\nENTRYPOINT [\"braynsService\"]\nCMD [\"--uri\", \"0.0.0.0:8200\", \"--plugin\", \"braynsCircuitExplorer\", \"--plugin\", \"braynsCircuitInfo\", \"--sandbox-path\", \"/\"]\n"
}