{
  "startTime": 1674215401223,
  "endTime": 1674215401895,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 109,
        "lineEnd": 111,
        "columnStart": 0,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 65,
        "lineEnd": 73,
        "columnStart": 0,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 109,
        "lineEnd": 111,
        "columnStart": 0,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 109,
        "lineEnd": 111,
        "columnStart": 1,
        "columnEnd": 40
      }
    }
  ],
  "repairedDockerfile": "# Blue Brain Search is a text mining toolbox focused on scientific use cases.\n#\n# Copyright (C) 2020  Blue Brain Project, EPFL.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program. If not, see <https://www.gnu.org/licenses/>.\n\n# This image has the CUDA toolkit pre-installed and so the GPUs\n# work out of the box. Just include the \"--gpus all\" flag in\n# docker run.\n#\n# Note that this is a big development image. If you don't need\n# the development packages consider changing the image tag to\n# \"10.2-base\" or \"10.2-runtime\". See the information on docker\n# hub for more details: https://hub.docker.com/r/nvidia/cuda\n#\n# If the GPU support is not necessary, then another image,\n# for example \"python:3.7\" can be used.\nFROM nvidia/cuda:10.2-runtime\n\n# ARGs are only visible at build time and can be provided in\n# the docker-compose.yml file in the \"args:\" section or with the\n# --build-arg parameter of docker build\nARG BBS_http_proxy\nARG BBS_https_proxy\nARG BBS_HTTP_PROXY\nARG BBS_HTTPS_PROXY\n\n# ENVs are visible both at image build time and container run time.\n# We want the http proxys to be visible in both cases and therefore\n# set them equal to the values of the ARGs.\nENV http_proxy=$BBS_http_proxy\nENV https_proxy=$BBS_https_proxy\nENV HTTP_PROXY=$BBS_HTTP_PROXY\nENV HTTPS_PROXY=$BBS_HTTPS_PROXY\n\n# Debian's default LANG=C breaks python3.\n# See commends in the official python docker file:\n# https://github.com/docker-library/python/blob/master/3.7/buster/Dockerfile\nENV LANG=C.UTF-8\n\n# Install system packages\n#\n# The environment variable $DEBIAN_FRONTENT is necessary to\n# prevent apt-get from prompting for the timezone and keyboard\n# layout configuration.\n#\n# There are two dev-packages that are installed:\n# - libmysqlclient-dev\n# - python3.7-dev\n# This is intentional because otherwise \"pip install SQLAlchemy[mysql]\" breaks.\nRUN \\\n apt-get update &&\\\napt-get upgrade -y --no-install-recommends &&\\\napt-get update && \\\nTZ=\"Europe/Zurich\" \\\nDEBIAN_FRONTEND=\"noninteractive\" \\\napt-get install -y --no-install-recommends \\\n    libbluetooth3 libbz2-1.0 libc6 libexpat1 \\\n    libffi6 libgdbm5 liblzma5 libncursesw5 libreadline7 \\\n    libsqlite3-0 libssl1.1 tk xz-utils zlib1g \\\n    gcc g++ build-essential make \\\n    curl git htop less man vim wget \\\n    libfontconfig1 libmysqlclient-dev && rm -rf /var/lib/apt/lists/*;\n# Install Python 3.7 & pip 3.7\n#\n# The base image (\"nvidia/cuda\") does not have Python pre-installed. The\n# following command can be omitted on images that already have Python, for\n# example \"python:3.7\".\n#\n# The package \"python3.7-pip\" doesn't exist. The package \"python3-pip\" needs\n# to be installed instead. After its installation:\n#   - \"pip\" isn't an existing command,\n#   - \"pip3\" refers to pip for Python 3.6,\n#   - \"pip3.7\" isn't an existing command,\n#   - \"python3.7 -m pip\" works.\n#\n# The command \"apt install python3-pip\" does the following:\n# - Install the pip module into the python version agnostic directory /usr/lib/python3/dist-packages\n# - Install /usr/bin/python3.6\n# - Link /usr/bin/python3 to /usr/bin/python3.6\n# - Install the script /usr/bin/pip3 that has the /usr/bin/python3 shebang\n#   and so load the pip module from python 3.6's site-packages\n#\n# How to make pip refer to the python 3.7 site-packages?\n# Run \"python3.7 -m pip install pip\". This will\n# - Use the pip module from the python version agnostic directory /usr/lib/python3/dist-packages\n#   to install a pip module into the version specific directory /usr/local/lib/python3.7/dist-packages\n#   (You can verify using \"python3.7 -m site\" that the version specific one has precedence)\n# - Install the scripts\n#   - /usr/local/bin/pip\n#   - /usr/local/bin/pip3\n#   - /usr/local/bin/pip3.7\n#   which are all copies of each other and have the correct python 3.7 shebang\n#\n# The command \"update-alternatives\" makes the command \"python\" refer to\n# \"python3.7\". Otherwise, \"python\" refers to \"python2\".\n#\nRUN \\\n DEBIAN_FRONTEND=\"noninteractive\" \\\napt-get install -y --no-install-recommends \\\npython3.7-dev python3.7-venv python3-pip && \\\npython3.7 -m pip install --upgrade pip setuptools wheel && \\\nupdate-alternatives --install /usr/local/bin/python python /usr/bin/python3.7 0 && rm -rf /var/lib/apt/lists/*;\n\n# Install BBS requirements\nCOPY requirements.txt /tmp\nCOPY requirements-data_and_models.txt /tmp\nRUN \\\npip install --no-cache-dir -r /tmp/requirements.txt -r /tmp/requirements-data_and_models.txt &&\\\nrm /tmp/requirements.txt /tmp/requirements-data_and_models.txt\n\n# Add and configure users\nSHELL [\"/bin/bash\", \"-c\"]\nARG BBS_USERS\nCOPY docker/utils.sh /tmp\nRUN \\\n. /tmp/utils.sh && \\\ngroupadd -g 999 docker && \\\ncreate_users \"${BBS_USERS},guest/1000\" \"docker\" && \\\nconfigure_user\n\n# Entry point\nEXPOSE 8888\nRUN mkdir /workdir && chmod a+rwX /workdir\nWORKDIR /workdir\nUSER guest\nENTRYPOINT [\"env\"]\nCMD [\"bash\", \"-l\"]\n"
}