{
  "startTime": 1674217538409,
  "endTime": 1674217539624,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 6,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker container for running the BioExplorer as a plugin within Brayns as a service\n# Check https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#user for best practices.\n# Based on the Dockerfile of Brayns created by the viz team (basically a copy)\n\n# This Dockerfile leverages multi-stage builds, available since Docker 17.05\n# See: https://docs.docker.com/engine/userguide/eng-image/multistage-build/#use-multi-stage-builds\n\n# Image where Brayns+BioExplorer plugin is built\nFROM debian:buster-slim as builder\nLABEL maintainer=\"cyrille.favreau@epfl.ch\"\nARG DIST_PATH=/app/dist\n\n# Install packages\nRUN apt-get update \\\n   && apt-get -y --no-install-recommends install \\\n   build-essential \\\n   cmake \\\n   git \\\n   ninja-build \\\n   libarchive-dev \\\n   libassimp-dev \\\n   libboost-date-time-dev \\\n   libboost-filesystem-dev \\\n   libboost-iostreams-dev \\\n   libboost-program-options-dev \\\n   libboost-regex-dev \\\n   libboost-serialization-dev \\\n   libboost-system-dev \\\n   libboost-test-dev \\\n   libfreeimage-dev \\\n   libhdf5-serial-dev \\\n   libtbb-dev \\\n   libturbojpeg0-dev \\\n   libuv1-dev \\\n   libpqxx-dev \\\n   pkg-config \\\n   wget \\\n   ca-certificates \\\n   libcgal-dev \\\n   libtiff-dev \\\n   && apt-get clean \\\n   && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# --------------------------------------------------------------------------------\n# Get ISPC\n# https://github.com/ispc/ispc/releases/download/v1.10.0/ispc-v1.10.0b-linux.tar.gz\n# --------------------------------------------------------------------------------\nARG ISPC_VERSION=1.10.0\nARG ISPC_DIR=ispc-v${ISPC_VERSION}b-linux\nARG ISPC_PATH=/app/$ISPC_DIR\n\nRUN mkdir -p ${ISPC_PATH} \\\n   && wget --no-verbose https://github.com/ispc/ispc/releases/download/v${ISPC_VERSION}/${ISPC_DIR}.tar.gz \\\n   && tar zxvf ${ISPC_DIR}.tar.gz -C ${ISPC_PATH} --strip-components=1 \\\n   && rm -rf ${ISPC_PATH}/${ISPC_DIR}/examples && rm ${ISPC_DIR}.tar.gz\n\n# Add ispc bin to the PATH\nENV PATH $PATH:${ISPC_PATH}/bin\n\n# --------------------------------------------------------------------------------\n# Install embree\n# https://github.com/embree/embree/releases\n# --------------------------------------------------------------------------------\nARG EMBREE_VERSION=3.5.2\nARG EMBREE_FILE=embree-${EMBREE_VERSION}.x86_64.linux.tar.gz\nRUN mkdir -p ${DIST_PATH} \\\n   && wget --no-verbose https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/${EMBREE_FILE} \\\n   && tar zxvf ${EMBREE_FILE} -C ${DIST_PATH} --strip-components=1 \\\n   && rm -rf ${DIST_PATH}/bin ${DIST_PATH}/doc\n\n# --------------------------------------------------------------------------------\n# Install OSPRay\n# https://github.com/ospray/ospray/releases\n# --------------------------------------------------------------------------------\nARG OSPRAY_TAG=v1.8.5\nARG OSPRAY_SRC=/app/ospray\n\nRUN mkdir -p ${OSPRAY_SRC} \\\n   && git clone https://github.com/ospray/ospray.git ${OSPRAY_SRC} \\\n   && cd ${OSPRAY_SRC} \\\n   && git checkout ${OSPRAY_TAG} \\\n   && mkdir -p build \\\n   && cd build \\\n   && CMAKE_PREFIX_PATH=${DIST_PATH} cmake .. -GNinja \\\n   -DOSPRAY_ENABLE_TUTORIALS=OFF \\\n   -DOSPRAY_ENABLE_APPS=OFF \\\n   -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n   && ninja install\n\n# --------------------------------------------------------------------------------\n# Install libwebsockets (2.0 from Debian is not reliable)\n# https://github.com/warmcat/libwebsockets/releases\n# --------------------------------------------------------------------------------\nARG LWS_VERSION=2.3.0\nARG LWS_SRC=/app/libwebsockets\nARG LWS_FILE=v${LWS_VERSION}.tar.gz\n\nRUN mkdir -p ${LWS_SRC} \\\n   && wget --no-verbose https://github.com/warmcat/libwebsockets/archive/${LWS_FILE} \\\n   && tar zxvf ${LWS_FILE} -C ${LWS_SRC} --strip-components=1 \\\n   && cd ${LWS_SRC} \\\n   && mkdir -p build \\\n   && cd build \\\n   && cmake .. -GNinja \\\n   -DCMAKE_BUILD_TYPE=Release \\\n   -DLWS_STATIC_PIC=ON \\\n   -DLWS_WITH_SSL=OFF \\\n   -DLWS_WITH_ZLIB=OFF \\\n   -DLWS_WITH_ZIP_FOPS=OFF \\\n   -DLWS_WITHOUT_EXTENSIONS=ON \\\n   -DLWS_WITHOUT_TESTAPPS=ON \\\n   -DLWS_WITH_LIBUV=ON \\\n   -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n   && ninja install\n\n# --------------------------------------------------------------------------------\n# Install Brayns\n# https://github.com/BlueBrain/BioExplorer\n# --------------------------------------------------------------------------------\nARG BRAYNS_SRC=/app/brayns\n\n# TODO: \"|| exit 0\"  hack to be removed as soon as MVDTool export issue is fixed.\nRUN mkdir -p ${BRAYNS_SRC} \\\n   && git clone https://github.com/BlueBrain/BioExplorer.git ${BRAYNS_SRC} \\\n   && cd ${BRAYNS_SRC} \\\n   && git checkout Brayns \\\n   && git submodule update --init --recursive \\\n   && mkdir -p build \\\n   && cd build \\\n   && CMAKE_PREFIX_PATH=${DIST_PATH}:${DIST_PATH}/lib/cmake/libwebsockets \\\n   cmake .. -Wno-dev \\\n   -DBRAYNS_BENCHMARK_ENABLED=OFF \\\n   -DBRAYNS_DEFLECT_ENABLED=OFF \\\n   -DBRAYNS_MULTIVIEW_ENABLED=OFF \\\n   -DBRAYNS_OPENDECK_ENABLED=OFF \\\n   -DBRAYNS_OPTIX_ENABLED=OFF \\\n   -DBRAYNS_UNIT_TESTING_ENABLED=OFF \\\n   -DBRAYNS_ASSIMP_ENABLED=ON \\\n   -DBRAYNS_OSPRAY_ENABLED=ON \\\n   -DBRAYNS_NETWORKING_ENABLED=ON \\\n   -DCLONE_SUBPROJECTS=ON \\\n   -DCMAKE_BUILD_TYPE=Release \\\n   -DCMAKE_INSTALL_PREFIX=${DIST_PATH} || exit 0\n\nRUN cd ${BRAYNS_SRC}/build && make -j install\n\n# --------------------------------------------------------------------------------\n# Add BioExplorer and additional plugins\n# --------------------------------------------------------------------------------\n\nARG BIOEXPLORER_SRC=/app/bioexplorer\nADD . ${BIOEXPLORER_SRC}\n\nWORKDIR /app\n\nRUN cd ${BIOEXPLORER_SRC} \\\n   && rm -rf ${BIOEXPLORER_SRC}/bioexplorer_build \\\n   && mkdir -p ${BIOEXPLORER_SRC}/bioexplorer_build \\\n   && cd ${BIOEXPLORER_SRC}/bioexplorer_build \\\n   && PATH=${ISPC_PATH}/bin:${PATH} CMAKE_PREFIX_PATH=${DIST_PATH} LDFLAGS=\"-lCGAL\" cmake .. \\\n   -DBIOEXPLORER_UNIT_TESTING_ENABLED=OFF -DCGAL_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE=TRUE \\\n   -DCMAKE_INSTALL_PREFIX=${DIST_PATH} -DCMAKE_BUILD_TYPE=Release \\\n   && make -j install\n\n# Final image, containing only Brayns and BioExplorer and libraries required to run it\nFROM debian:buster-slim\nARG DIST_PATH=/app/dist\n\nRUN apt-get update \\\n   && apt-get -y --no-install-recommends install \\\n   libarchive13 \\\n   libassimp4 \\\n   libboost-filesystem1.67.0 \\\n   libboost-program-options1.67.0 \\\n   libboost-regex1.67.0 \\\n   libboost-serialization1.67.0 \\\n   libboost-system1.67.0 \\\n   libboost-iostreams1.67.0 \\\n   libfreeimage3 \\\n   libgomp1 \\\n   libhdf5-103 \\\n   libturbojpeg0 \\\n   libuv1 \\\n   libcgal13 \\\n   libpqxx-6.2 \\\n   && apt-get clean \\\n   && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# The COPY command below will:\n# 1. create a container based on the `builder` image (but do not start it)\n#    Equivalent to the `docker create` command\n# 2. create a new image layer containing the\n#    /app/dist directory of this new container\n#    Equivalent to the `docker copy` command.\nCOPY --from=builder ${DIST_PATH} ${DIST_PATH}\n\n# Add binaries from dist to the PATH\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:${DIST_PATH}/lib\nENV PATH ${DIST_PATH}/bin:$PATH\n\n# Expose a port from the container\n# For more ports, use the `--expose` flag when running the container,\n# see https://docs.docker.com/engine/reference/run/#expose-incoming-ports for docs.\nEXPOSE 8200\n\n# When running `docker run -ti --rm -p 8200:8200 bioexplorer`,\n# this will be the cmd that will be executed (+ the CLI options from CMD).\n# To ssh into the container (or override the default entry) use:\n# `docker run -ti --rm --entrypoint bash -p 8200:8200 bioexplorer`\n# See https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime\n# for more docs\nENTRYPOINT [\"braynsService\"]\nCMD [\"--http-server\", \":8200\", \"--plugin\", \"MediaMaker\", \"--plugin\", \"Metabolism\", \"--plugin\", \"BioExplorer\"]"
}