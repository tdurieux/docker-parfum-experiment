{
  "startTime": 1674248743270,
  "endTime": 1674248743803,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build UI Dependencies\n\nFROM node:11.1.0 as npm_builder\n# Set the entrypoint as bin bash incase we want to inspect the container\nENTRYPOINT [\"/bin/bash\"]\n# Manually copy the package.json\nCOPY ./webui/package.json /usr/src/app/package.json\nCOPY ./webui/package-lock.json /usr/src/app/package-lock.json\n# Set the work directory to where we copied our source files\nWORKDIR /usr/src/app\n# Install all of our dependencies\nRUN npm install && npm cache clean --force;\n\nFROM npm_builder as ui_builder\n# Copy the app excluding everything in the .dockerignore\nCOPY webui /usr/src/app\n# Put node_modules into the path, this will purely be used for accessing the angular cli\nENV PATH /usr/src/app/node_modules/.bin:$PATH\n# Set the work directory to where we copied our source files\nWORKDIR /usr/src/app\n# Build our distributable\nRUN npm run build:prod\n\n# Build MinSQL\n\nFROM minio/minsql:deps as rust_builder\n\nWORKDIR /usr/src/minsql\nCOPY . .\n\nRUN cargo install --path .\n\n# build final container\n\nFROM alpine:3.9\n\nWORKDIR /\n\nCOPY --from=rust_builder /root/.cargo/bin/minsql /usr/bin/minsql\nCOPY --from=ui_builder /usr/src/app/dist/minsql-ui /static/ui\n\nCMD [\"minsql\"]\n"
}