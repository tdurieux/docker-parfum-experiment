{
  "startTime": 1674251369580,
  "endTime": 1674251370597,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 8,
        "columnEnd": 154
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 151
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 37,
        "columnStart": 39,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 37,
        "columnStart": 39,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n# The Rust toolchain to use when building our image.  Set by `hooks/build`.\nARG TOOLCHAIN=stable\n\n# The OpenSSL version to use. We parameterize this because many Rust\n# projects will fail to build with 1.1.\nARG OPENSSL_VERSION=1.0.2r\n\nENV HOME /root\nENV RUST_BACKTRACE 1\nENV BOOST_VERSION_MINOR 67\nENV BOOST_ROOT $HOME/boost-1.$BOOST_VERSION_MINOR\nENV HYPERSCAN_VERSION 5.0.0\nENV HYPERSCAN_ROOT $HOME/hyperscan-$HYPERSCAN_VERSION\nENV LLVM_VERSION 6.0\nENV LLVM_ROOT $HOME/llvm-$LLVM_VERSION\nENV LLVM_CONFIG_PATH $LLVM_ROOT/bin/llvm-config\n\nRUN apt update -y && apt upgrade -y && apt install --no-install-recommends -y \\\n        build-essential \\\n        wget \\\n        cmake \\\n        curl \\\n        file \\\n        git \\\n        musl-dev \\\n        musl-tools \\\n        libpq-dev \\\n        libsqlite-dev \\\n        libssl-dev \\\n        linux-libc-dev \\\n        pkgconf \\\n        xutils-dev \\\n        gcc-multilib-arm-linux-gnueabihf \\\n        cmake-data g++ pkgconf ragel \\\n        libpcap-dev sqlite3 libsqlite3-dev \\\n        python-dev && \\\n        MDBOOK_VERSION=0.2.1 && \\\n        curl -f -LO \"https://github.com/rust-lang-nursery/mdBook/releases/download/v$MDBOOK_VERSION/mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz\" && \\\n        tar xf mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz && \\\n        mv mdbook /usr/local/bin/ && \\\n        rm -f mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n# Static linking for C++ code\nRUN ln -s \"/usr/bin/g++\" \"/usr/bin/musl-g++\"\n\nRUN mkdir -p /root/libs /root/src\n\n# Set up our path with all our binary directories, including those for the\n# musl-gcc toolchain and for our Rust toolchain.\nENV PATH=$HOME/.cargo/bin:/usr/local/musl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\n# Install our Rust toolchain and the `musl` target.  We patch the\n# command-line we pass to the installer so that it won't attempt to\n# interact with the user or fool around with TTYs.  We also set the default\n# `--target` to musl so that our users don't need to keep overriding it\n# manually.\nRUN curl https://sh.rustup.rs -sSf | \\\n    sh -s -- -y --default-toolchain $TOOLCHAIN && \\\n    rustup target add x86_64-unknown-linux-musl && \\\n    rustup target add armv7-unknown-linux-musleabihf\n\nADD cargo-config.toml /root/.cargo/config\n\n# Set up a `git credentials` helper for using GH_USER and GH_TOKEN to access\n# private repositories if desired.\nADD git-credential-ghtoken /usr/local/bin\nRUN git config --global credential.https://github.com.helper ghtoken\n\n# Build a static library version of OpenSSL using musl-libc.  This is needed by\n# the popular Rust `hyper` crate.\n#\n# We point /usr/local/musl/include/linux at some Linux kernel headers (not\n# necessarily the right ones) in an effort to compile OpenSSL 1.1's \"engine\"\n# component. It's possible that this will cause bizarre and terrible things to\n# happen. There may be \"sanitized\" header\nRUN echo \"Building OpenSSL\" && \\\n    ls /usr/include/linux && \\\n    mkdir -p /usr/local/musl/include && \\\n    ln -s /usr/include/linux /usr/local/musl/include/linux && \\\n    ln -s /usr/include/x86_64-linux-gnu/asm /usr/local/musl/include/asm && \\\n    ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic && \\\n    cd /tmp && \\\n    curl -f -LO \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\" && \\\n    tar xvzf \"openssl-$OPENSSL_VERSION.tar.gz\" && cd \"openssl-$OPENSSL_VERSION\" && \\\n    env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl -DOPENSSL_NO_SECURE_MEMORY linux-x86_64 && \\\n    env C_INCLUDE_PATH=/usr/local/musl/include/ make depend && \\\n    env C_INCLUDE_PATH=/usr/local/musl/include/ make && \\\n    make install && \\\n    rm /usr/local/musl/include/linux /usr/local/musl/include/asm /usr/local/musl/include/asm-generic && \\\n    rm -r /tmp/* && rm \"openssl-$OPENSSL_VERSION.tar.gz\"\n\nRUN echo \"Building zlib\" && \\\n    cd /tmp && \\\n    ZLIB_VERSION=1.2.11 && \\\n    curl -f -LO \"http://zlib.net/zlib-$ZLIB_VERSION.tar.gz\" && \\\n    tar xzf \"zlib-$ZLIB_VERSION.tar.gz\" && cd \"zlib-$ZLIB_VERSION\" && \\\n    CC=musl-gcc ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --static --prefix=/usr/local/musl && \\\n    make && make install && \\\n    rm -r /tmp/* && rm \"zlib-$ZLIB_VERSION.tar.gz\"\n\nRUN echo \"Building libpq\" && \\\n    cd /tmp && \\\n    POSTGRESQL_VERSION=11.2 && \\\n    curl -f -LO \"https://ftp.postgresql.org/pub/source/v$POSTGRESQL_VERSION/postgresql-$POSTGRESQL_VERSION.tar.gz\" && \\\n    tar xzf \"postgresql-$POSTGRESQL_VERSION.tar.gz\" && cd \"postgresql-$POSTGRESQL_VERSION\" && \\\n    CC=musl-gcc CPPFLAGS=-I/usr/local/musl/include LDFLAGS=-L/usr/local/musl/lib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-openssl --without-readline --prefix=/usr/local/musl && \\\n    cd src/interfaces/libpq && make all-static-lib && make install-lib-static && \\\n    cd ../../bin/pg_config && make && make install && \\\n    rm -r /tmp/* && rm \"postgresql-$POSTGRESQL_VERSION.tar.gz\"\n\nENV OPENSSL_DIR=/usr/local/musl/ \\\n    OPENSSL_INCLUDE_DIR=/usr/local/musl/include/ \\\n    DEP_OPENSSL_INCLUDE=/usr/local/musl/include/ \\\n    OPENSSL_LIB_DIR=/usr/local/musl/lib/ \\\n    OPENSSL_STATIC=1 \\\n    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=1 \\\n    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=/usr/bin/pg_config \\\n    PKG_CONFIG_ALLOW_CROSS=true \\\n    PKG_CONFIG_ALL_STATIC=true \\\n    LIBZ_SYS_STATIC=1 \\\n    TARGET=musl\n\n# (Please feel free to submit pull requests for musl-libc builds of other C\n# libraries needed by the most popular and common Rust crates, to avoid\n# everybody needing to build them manually.)\n\n# Install some useful Rust tools from source. This will use the static linking\n# toolchain, but that should be OK.\nRUN cargo install -f cargo-audit && \\\n    rm -rf /root/.cargo/registry/\n\nCOPY . .\n\nRUN .travis/setup-travis.sh\nRUN .travis/build-hyperscan.sh\n"
}