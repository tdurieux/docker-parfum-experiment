{
  "startTime": 1674256221376,
  "endTime": 1674256223503,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 34,
        "columnStart": 23,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker.io/library/redis:7.0.0 as redis\n\n# There are libraries we will want to copy from here in the final stage of the\n# build, but the COPY directive does not have a way to determine system\n# architecture, so we create a symlink here to facilitate copying.\nRUN ln -s /usr/lib/$(uname -m)-linux-gnu /usr/lib/linux-gnu\n\nFROM docker.io/library/node:12.18.4-buster as node\n\nFROM docker.io/library/golang:1.18 as golang\n\nFROM docker.io/library/registry:2.8 as registry\n\nFROM docker.io/bitnami/kubectl:1.23.6 as kubectl\n\nFROM ubuntu:22.04\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends --fix-missing -y \\\n        ca-certificates \\\n        curl \\\n        openssh-server \\\n        nginx \\\n        fcgiwrap \\\n        git \\\n        git-lfs \\\n        gpg \\\n        jq \\\n        make \\\n        wget \\\n        gcc \\\n        g++ \\\n        sudo \\\n        tini \\\n        zip && \\\n        apt-get clean && \\\n        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY --from=golang /usr/local/go /usr/local/go\n\nCOPY --from=kubectl /opt/bitnami/kubectl/bin/kubectl /usr/local/bin/kubectl\n\nENV PATH /dist:/go/bin:/usr/local/go/bin:/go/src/github.com/argoproj/argo-cd/dist:$PATH\nENV GOROOT /usr/local/go\nENV GOPATH /go\n\n# Install build and test dependencies\nCOPY hack/install.sh hack/tool-versions.sh go.* ./\nCOPY hack/installers installers\n\nRUN ./install.sh helm-linux && \\\n    ./install.sh kustomize && \\\n    ./install.sh codegen-tools && \\\n    ./install.sh codegen-go-tools && \\\n    ./install.sh lint-tools && \\\n    go install github.com/mattn/goreman@latest && \\\n    go install github.com/kisielk/godepgraph@latest && \\\n    go install github.com/jstemmer/go-junit-report@latest && \\\n    rm -rf /tmp/dl && \\\n    rm -rf /tmp/helm && \\\n    rm -rf /tmp/ks_*\n\n# These are required for running end-to-end tests\nCOPY ./test/fixture/testrepos/id_rsa.pub /root/.ssh/authorized_keys\nCOPY ./test/fixture/testrepos/nginx.conf /etc/nginx/nginx.conf\nCOPY ./test/fixture/testrepos/sudoers.conf /etc/sudoers\nCOPY ./test/fixture/testrepos/ssh_host_*_key* /etc/ssh/\n\n# Copy redis binaries to the image\nCOPY --from=redis /usr/local/bin/* /usr/local/bin/\n\n# Copy redis dependencies/shared libraries\n# Ubuntu 22.04+ has moved to OpenSSL3 and no longer provides these libraries\nCOPY --from=redis /usr/lib/linux-gnu/libssl.so.1.1 /usr/lib/linux-gnu/\nCOPY --from=redis /usr/lib/linux-gnu/libcrypto.so.1.1 /usr/lib/linux-gnu/\nRUN mv /usr/lib/linux-gnu/libssl.so.1.1 /usr/lib/$(uname -m)-linux-gnu/ && \\\n    mv /usr/lib/linux-gnu/libcrypto.so.1.1 /usr/lib/$(uname -m)-linux-gnu/ && \\\n    rm -rf /usr/lib/linux-gnu/\n\n# Copy registry binaries to the image\nCOPY --from=registry /bin/registry /usr/local/bin/\nCOPY --from=registry /etc/docker/registry/config.yml /etc/docker/registry/config.yml\n\n# Copy node binaries\nCOPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules\nCOPY --from=node /usr/local/bin/node /usr/local/bin\nCOPY --from=node /opt/yarn-v1.22.4 /opt/yarn-v1.22.4\n\n# Entrypoint is required for container's user management\nCOPY ./test/container/entrypoint.sh /usr/local/bin\n\nARG UID\n\n# Prepare user configuration & build environments\nRUN useradd -l -u ${UID} -d /home/user -s /bin/bash user && \\\n    echo \"user ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/user && \\\n    mkdir -p /home/user/.kube && chmod 777 /home/user/.kube && \\\n    chown -R user /home/user && \\\n    chgrp -R user /home/user && \\\n    HOME=/home/user git config --global user.name \"ArgoCD Test User\" && \\\n    HOME=/home/user git config --global user.email \"noreply@example.com\" && \\\n    mkdir -p /go/pkg && chmod 777 /go/pkg && \\\n    mkdir -p /var/run/sshd && \\\n    mkdir -p /root/.ssh && \\\n    mkdir -p /go && \\\n    chmod -R 777 /go && \\\n    chown root /etc/ssh/ssh_host_*_key* && \\\n    chmod 0600 /etc/ssh/ssh_host_*_key && \\\n    mkdir -p /tmp/go-build-cache && chmod -R 777 /tmp/go-build-cache && \\\n    mkdir -p /home/user/.cache && chmod 777 /home/user/.cache && \\\n    chmod -R 777 /usr/local/go && \\\n    ln -s /usr/local/bin/node /usr/local/bin/nodejs && \\\n    ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm && \\\n    ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx && \\\n    ln -s /opt/yarn-v1.22.4/bin/yarn /usr/local/bin/yarn && \\\n    ln -s /opt/yarn-v1.22.4/bin/yarnpkg /usr/local/bin/yarnpkg && \\\n    mkdir -p /var/lib/registry && chmod -R 777 /var/lib/registry\n\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n"
}