{
  "startTime": 1674256215220,
  "endTime": 1674256216022,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=docker.io/library/ubuntu:22.04\n####################################################################################################\n# Builder image\n# Initial stage which pulls prepares build dependencies and CLI tooling we need for our final image\n# Also used as the image in CI jobs so needs all dependencies\n####################################################################################################\nFROM docker.io/library/golang:1.18 AS builder\n\nRUN echo 'deb http://deb.debian.org/debian buster-backports main' >> /etc/apt/sources.list\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    openssh-server \\\n    nginx \\\n    unzip \\\n    fcgiwrap \\\n    git \\\n    git-lfs \\\n    make \\\n    wget \\\n    gcc \\\n    sudo \\\n    zip && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nWORKDIR /tmp\n\nCOPY hack/install.sh hack/tool-versions.sh ./\nCOPY hack/installers installers\n\nRUN ./install.sh helm-linux && \\\n    INSTALL_PATH=/usr/local/bin ./install.sh kustomize\n\n####################################################################################################\n# Argo CD Base - used as the base for both the release and dev argocd images\n####################################################################################################\nFROM $BASE_IMAGE AS argocd-base\n\nUSER root\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN groupadd -g 999 argocd && \\\n    useradd -r -u 999 -g argocd argocd && \\\n    mkdir -p /home/argocd && \\\n    chown argocd:0 /home/argocd && \\\n    chmod g=u /home/argocd && \\\n    apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n    git git-lfs tini gpg tzdata && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY hack/gpg-wrapper.sh /usr/local/bin/gpg-wrapper.sh\nCOPY hack/git-verify-wrapper.sh /usr/local/bin/git-verify-wrapper.sh\nCOPY --from=builder /usr/local/bin/helm /usr/local/bin/helm\nCOPY --from=builder /usr/local/bin/kustomize /usr/local/bin/kustomize\nCOPY entrypoint.sh /usr/local/bin/entrypoint.sh\n# keep uid_entrypoint.sh for backward compatibility\nRUN ln -s /usr/local/bin/entrypoint.sh /usr/local/bin/uid_entrypoint.sh\n\n# support for mounting configuration from a configmap\nWORKDIR /app/config/ssh\nRUN touch ssh_known_hosts && \\\n    ln -s /app/config/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts\n\nWORKDIR /app/config\nRUN mkdir -p tls && \\\n    mkdir -p gpg/source && \\\n    mkdir -p gpg/keys && \\\n    chown argocd gpg/keys && \\\n    chmod 0700 gpg/keys\n\nENV USER=argocd\n\nUSER 999\nWORKDIR /home/argocd\n\n####################################################################################################\n# Argo CD UI stage\n####################################################################################################\nFROM --platform=$BUILDPLATFORM docker.io/library/node:12.18.4 AS argocd-ui\n\nWORKDIR /src\nCOPY [\"ui/package.json\", \"ui/yarn.lock\", \"./\"]\n\nRUN yarn install --network-timeout 200000 && \\\n    yarn cache clean\n\nCOPY [\"ui/\", \".\"]\n\nARG ARGO_VERSION=latest\nENV ARGO_VERSION=$ARGO_VERSION\nRUN HOST_ARCH='amd64' NODE_ENV='production' NODE_ONLINE_ENV='online' NODE_OPTIONS=--max_old_space_size=8192 yarn build\n\n####################################################################################################\n# Argo CD Build stage which performs the actual build of Argo CD binaries\n####################################################################################################\nFROM --platform=$BUILDPLATFORM  docker.io/library/golang:1.18 AS argocd-build\n\nWORKDIR /go/src/github.com/argoproj/argo-cd\n\nCOPY go.* ./\nRUN go mod download\n\n# Perform the build\nCOPY . .\nCOPY --from=argocd-ui /src/dist/app /go/src/github.com/argoproj/argo-cd/ui/dist/app\nARG TARGETOS\nARG TARGETARCH\nRUN GOOS=$TARGETOS GOARCH=$TARGETARCH make argocd-all\n\n####################################################################################################\n# Final image\n####################################################################################################\nFROM argocd-base\nCOPY --from=argocd-build /go/src/github.com/argoproj/argo-cd/dist/argocd* /usr/local/bin/\n\nUSER root\nRUN ln -s /usr/local/bin/argocd /usr/local/bin/argocd-server && \\\n    ln -s /usr/local/bin/argocd /usr/local/bin/argocd-repo-server && \\\n    ln -s /usr/local/bin/argocd /usr/local/bin/argocd-cmp-server && \\\n    ln -s /usr/local/bin/argocd /usr/local/bin/argocd-application-controller && \\\n    ln -s /usr/local/bin/argocd /usr/local/bin/argocd-dex && \\\n    ln -s /usr/local/bin/argocd /usr/local/bin/argocd-notifications && \\\n    ln -s /usr/local/bin/argocd /usr/local/bin/argocd-applicationset-controller && \\\n    ln -s /usr/local/bin/argocd /usr/local/bin/argocd-k8s-auth\n\nUSER 999\n"
}