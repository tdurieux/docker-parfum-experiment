{
  "startTime": 1674220165645,
  "endTime": 1674220166723,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:latest\n\nRUN apk add --no-cache --update npm\n\n# Define app directory\nENV APPDIR=/app\nENV NODE_ENV=production\n\n# Create app directory\nWORKDIR /app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY cucm-sql-async cucm-sql-async\nCOPY drp-mesh drp-mesh\nCOPY drp-swaggerui drp-swaggerui\nCOPY drp-service-cache drp-service-cache\nCOPY drp-service-logger drp-service-logger\nCOPY drp-service-docmgr drp-service-docmgr\nCOPY drp-service-rsage drp-service-rsage\nCOPY drp-service-bluecat drp-service-bluecat\nCOPY drp-service-netscaler drp-service-netscaler\nCOPY drp-service-ldap drp-service-ldap\nCOPY drp-service-test drp-service-test\nCOPY webroot webroot\nCOPY jsondocs jsondocs\nCOPY package.json .\nCOPY server.js .\nCOPY drpRegistry.js .\nCOPY drpBroker.js .\nCOPY drpConsumer.js .\nCOPY drpLogger.js .\nCOPY drpProvider-Cache.js .\nCOPY drpProvider-DocMgr.js .\nCOPY drpProvider-Hive.js .\nCOPY drpProvider-Test.js .\nCOPY drpProvider-Test-NoListener.js .\nCOPY drpProvider-BlueCat.js .\nCOPY drpProvider-NetScaler.js .\nCOPY drpProvider-Test-Authenticator.js .\nCOPY drpProvider-LDAP-Authenticator.js .\n\nRUN npm install --production && npm cache clean --force;\n# If you are building your code for production\n# RUN npm ci --only=production\n\nLABEL cisco.info.name=\"drp-nodejs-small\" \\\n      cisco.info.description=\"DRP Node.js Server\" \\\n      cisco.info.version=\"latest\" \\\n      cisco.info.author-link=\"https://adhdtech.com\" \\\n      cisco.info.author-name=\"Pete Brown\" \\\n      cisco.type=docker \\\n      cisco.cpuarch=x86_64 \\\n      cisco.resources.profile=custom \\\n      cisco.resources.cpu=400 \\\n      cisco.resources.memory=128 \\\n      cisco.resources.disk=128 \\\n      cisco.resources.network.0.interface-name=eth0 \\\n      cisco.resources.network.0.ports.tcp=[8080]\n\nEXPOSE 8080\nCMD [ \"node\", \"server.js\" ]\n"
}