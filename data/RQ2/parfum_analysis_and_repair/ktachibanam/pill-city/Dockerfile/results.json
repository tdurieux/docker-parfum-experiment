{
  "startTime": 1674250673554,
  "endTime": 1674250674908,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ref https://ep2020.europython.eu/media/conference/slides/CeKGczx-best-practices-for-production-ready-docker-packaging.pdf\n# ref https://pythonspeed.com/articles/multi-stage-docker-python/\n\n# builder outputs a virtualenv with installed dependencies\nFROM python:3.9-slim-buster AS builder\n\n# makes sure system is up-to-date\nRUN apt-get update && apt-get install -y --no-install-recommends build-essential git && rm -rf /var/lib/apt/lists/*;\n\n# use regular user\nRUN useradd --create-home app\nUSER app\nWORKDIR /home/app\n\n# creates a venv and install dependencies\nRUN python -m venv venv\nENV PATH=\"./venv/bin:$PATH\"\nCOPY requirements.txt .\nCOPY requirements.prod.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nRUN pip install --no-cache-dir -r requirements.prod.txt\n\n# runner intakes the builder's virtualenv, does various things and define an entrypoint\nFROM python:3.9-slim-buster AS runner\nARG GIT_COMMIT\nRUN test -n \"$GIT_COMMIT\"\nENV GIT_COMMIT=$GIT_COMMIT\n\n# use regular user\nRUN useradd --create-home app\nUSER app\nWORKDIR /home/app\n\n# intakes the virtualenv from builder\nCOPY --from=builder /home/app/venv ./venv\n\n# copy in only neccessary files\nCOPY pillcity/ /home/app/pillcity\nCOPY app.py .\nCOPY release.py .\nCOPY entrypoint-worker.sh .\nCOPY entrypoint-release.sh .\nCOPY entrypoint-beat.sh .\nCOPY swagger.yaml .\n\n# pre-compile bytecode and enable PYTHONFAULTHANDLER (catches error in c)\nENV PATH=\"./venv/bin:$PATH\"\nENV PYTHONFAULTHANDLER=1\nENV PORT=5000\nEXPOSE 5000\nENTRYPOINT [\"gunicorn\", \"app:app\", \"--log-file\", \"-\"]\n"
}