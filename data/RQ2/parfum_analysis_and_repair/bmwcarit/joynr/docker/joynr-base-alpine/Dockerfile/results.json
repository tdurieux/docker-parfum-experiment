{
  "startTime": 1674248773977,
  "endTime": 1674248776251,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 448,
        "lineEnd": 448,
        "columnStart": 7,
        "columnEnd": 102
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 267,
        "lineEnd": 267,
        "columnStart": 7,
        "columnEnd": 88
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 273,
        "lineEnd": 273,
        "columnStart": 7,
        "columnEnd": 84
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 254,
        "lineEnd": 254,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 389,
        "lineEnd": 389,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 41,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 8
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 53,
        "lineEnd": 127,
        "columnStart": 7,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:latest\n\nLABEL com.jfrog.artifactory.retention.maxCount=\"25\"\n\n# set this date to cause all images to be updated\nENV REFRESHED_AT 2022-04-25-09-00\n\n###################################################\n# create data directories and volumes\n###################################################\nWORKDIR /\nRUN mkdir /data\n\nVOLUME /data/install\nVOLUME /data/src\nVOLUME /data/build\n\nENV BUILD_DIR /data/build\nENV SRC_DIR /data/src\nENV INSTALL_DIR /data/install\nENV CURL_HOME /etc\n\n###################################################\n# setup build environment\n###################################################\nRUN mkdir -p /home/joynr/build\nRUN mkdir -p /data/scripts\nRUN mkdir -p /usr/local/include\n\n###################################################\n# copy scripts and set start command\n###################################################\nCOPY scripts/docker /data/scripts\n\n###################################################\n# bash is required for our scripts unless they are\n# rewritten to be compatible to busybox stripped\n# down shell.\n# We need to install bash ahead here.\n###################################################\nRUN apk update \\\n    && apk add --no-cache \\\n    bash\n\n###################################################\n# Setup proxy settings\n###################################################\nRUN /data/scripts/setup-proxy.sh\n\n###################################################\n# install base packages\n###################################################\nRUN apk update \\\n    && apk add --no-cache \\\n    alpine-conf \\\n    autoconf \\\n    automake \\\n    binutils \\\n    binutils-gold \\\n    boost \\\n    boost-dev \\\n    ccache \\\n    clang \\\n    clang-extra-tools \\\n    cmake \\\n    coreutils \\\n    curl \\\n    doxygen \\\n    file \\\n    findutils \\\n    gcc \\\n    g++ \\\n    gcompat \\\n    gdb \\\n    git \\\n    grep \\\n    iproute2 \\\n    iputils \\\n    less \\\n    libcurl \\\n    libtool \\\n    libuuid \\\n    libwebsockets-dev \\\n    libx11-dev \\\n    libxcb-dev \\\n    libxi-dev \\\n    libxml2-dev \\\n    libxrender-dev \\\n    libxslt-dev \\\n    lsof \\\n    make \\\n    maven \\\n    musl-locales \\\n    ncurses-dev \\\n    net-tools \\\n    nodejs \\\n    npm \\\n    openjdk11 \\\n    openssl \\\n    openssl-dev \\\n    patch \\\n    postgresql \\\n    procps \\\n    psmisc \\\n    python3 \\\n    python3-dev \\\n    py3-pip \\\n    samurai \\\n    strace \\\n    tar \\\n    tini \\\n    util-linux \\\n    unzip \\\n    valgrind \\\n    vim \\\n    wget \\\n    which \\\n    xcb-util \\\n    xcb-util-keysyms-dev \\\n    xcb-util-xrm-dev \\\n    xcb-util-image-dev \\\n    xcb-util-renderutil-dev \\\n    xcb-util-cursor-dev \\\n    xcb-util-wm-dev \\\n    xcb-util-dev \\\n    xz \\\n    zlib \\\n    zlib-dev\n\n###################################################\n# set timezone\n###################################################\nRUN setup-timezone -z Europe/Berlin\n\n###################################################\n# setup extra certs\n###################################################\nRUN /data/scripts/setup-extra-certs.sh\n\n###################################################\n# add git config\n###################################################\nRUN git config --global user.email \"dummy@dummy.com\" \\\n    && git config --global user.name \"Dummy\"\n\n###################################################\n# Generate certificates\n###################################################\nCOPY openssl.conf /tmp/openssl.cnf\nRUN mkdir -p /data/ssl-data \\\n    && /data/scripts/gen-certificates.sh --configfile /tmp/openssl.cnf --destdir /data/ssl-data\n\n###################################################\n# Configure postgresql\n###################################################\nRUN . /etc/profile \\\n    && echo \"gcd\" > /opt/gcd_password \\\n    && chown postgres /opt/gcd_password\n\nRUN . /etc/profile \\\n    && mkdir /run/postgresql \\\n    && chown postgres:postgres /run/postgresql \\\n    && su - postgres /data/scripts/configure-db.sh\n\n###################################################\n# Install payara\n###################################################\nENV PATH ${PATH}:/opt/payara5/glassfish/bin\n\nRUN wget --quiet -O /opt/payara-5.2021.7.zip https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/5.2021.7/payara-5.2021.7.zip && \\\n    unzip -qq /opt/payara-5.2021.7.zip -d /opt && \\\n    rm /opt/payara-5.2021.7.zip\n\nRUN asadmin --user admin start-domain && \\\n    asadmin --user admin create-managed-scheduled-executor-service --corepoolsize=100 concurrent/joynrMessagingScheduledExecutor && \\\n    asadmin --user admin set-log-levels io.joynr.messaging=FINE && \\\n    asadmin --user admin set-log-levels io.joynr.dispatching=FINE && \\\n    asadmin --user admin set-log-levels io.joynr.discovery=FINEST && \\\n    asadmin --user admin set-log-levels io.joynr.capabilities=FINEST && \\\n    asadmin --user admin set-log-levels io.joynr.arbitration=FINEST && \\\n    asadmin --user admin set-log-levels io.joynr.proxy=FINE && \\\n    asadmin --user admin set-log-levels io.joynr.jeeintegration=FINEST && \\\n    asadmin --user admin set-log-attributes com.sun.enterprise.server.logging.GFFileHandler.multiLineMode=false && \\\n    asadmin --user admin stop-domain --kill=true\n\nRUN chmod -R 777 /opt/payara5\n\n###################################################################################\n# build and install mosquitto 1.6.12 mqtt broker\n# with additional fixes and joynr API extension\n# do not build documentation\n# use default settings\n# Extra Git commits from upstream (to be removed when updating to 1.6.13 or later):\n# 298d8494 Fix send quota being incorrecly reset on reconnect.\n# 3806296c Ld symbol of the mosquitto_property_copy_all has global bind now.\n# 7804c3f0 Note that 1024 \"limit\" is from operating systems, not Mosquitto.\n# 938e17a3 Fix incorrect authentication-method property type in mosquitto_sub man.\n# 0bdf630c (tag: v1.6.12) Merge branch 'fixes'\n###################################################################################\nCOPY 0001-Introduce-mosquitto_connect_bind_async_v5-API.patch /tmp/0001-Introduce-mosquitto_connect_bind_async_v5-API.patch\nCOPY 0002-Added-reconnect_session_expiry_interval-to-struct-mo.patch /tmp/0002-Added-reconnect_session_expiry_interval-to-struct-mo.patch\nCOPY 0003-Introduced-option-MOSQ_OPT_RECONNECT_SESSION_EXPIRY_.patch /tmp/0003-Introduced-option-MOSQ_OPT_RECONNECT_SESSION_EXPIRY_.patch\nCOPY 0004-mosquitto_reconnect-supports-MQTTv5-session-expiry.patch /tmp/0004-mosquitto_reconnect-supports-MQTTv5-session-expiry.patch\nRUN . /etc/profile \\\n    && cd /opt \\\n    && git clone https://github.com/eclipse/mosquitto \\\n    && cd mosquitto \\\n    && git checkout 298d8494 \\\n    && git am -k /tmp/0001-Introduce-mosquitto_connect_bind_async_v5-API.patch \\\n    && git am -k /tmp/0002-Added-reconnect_session_expiry_interval-to-struct-mo.patch \\\n    && git am -k /tmp/0003-Introduced-option-MOSQ_OPT_RECONNECT_SESSION_EXPIRY_.patch \\\n    && git am -k /tmp/0004-mosquitto_reconnect-supports-MQTTv5-session-expiry.patch \\\n    && make WITH_WEBSOCKETS=yes DOCDIRS= prefix=/usr install -j4\n\n###################################################\n# copy mosquitto.conf\n###################################################\nCOPY mosquitto.conf /etc/mosquitto/mosquitto.conf\n\n###################################################\n# install android sdk\n###################################################\n\nENV ANDROID_SDK_FILENAME commandlinetools-linux-7583922_latest.zip\nENV ANDROID_SDK_URL https://dl.google.com/android/repository/${ANDROID_SDK_FILENAME}\nENV ANDROID_API_LEVEL android-28\nENV ANDROID_BUILD_TOOLS_VERSION 29.0.3\nENV ANDROID_HOME /opt/android-sdk-linux\nENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools\nRUN cd /opt \\\n    && mkdir -p ${ANDROID_HOME} \\\n    && cd ${ANDROID_HOME} \\\n    && wget -q ${ANDROID_SDK_URL} \\\n    && unzip ${ANDROID_SDK_FILENAME} \\\n    && rm ${ANDROID_SDK_FILENAME} \\\n    && mv cmdline-tools tmp-cmdline-tools \\\n    && mkdir -p ${ANDROID_HOME}/cmdline-tools/latest \\\n    && mv tmp-cmdline-tools/* ${ANDROID_HOME}/cmdline-tools/latest \\\n    && rm -fr tmp-cmdline-tools\n\nRUN chown -R root:root ${ANDROID_HOME} \\\n    && chmod -R 755 ${ANDROID_HOME}\nRUN /data/scripts/setup-android.sh\n\n###################################################\n# provide environment for joynr C++\n###################################################\n\nENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\n\n###################################################\n# install gcovr\n###################################################\nRUN . /etc/profile \\\n    && pip install --no-cache-dir gcovr\n\nRUN chmod -R a+rw /opt \\\n    && chown -R 1000 /usr/local\n\n###################################################\n# install clang-format-3.5\n# This can be taken from Alpine 3.1 where\n# llvm 3.5.0 was current\n###################################################\nRUN . /etc/profile \\\n    && mkdir -p /tmp/clang-format \\\n    && cd /tmp/clang-format \\\n    && wget https://dl-cdn.alpinelinux.org/alpine/v3.1/main/x86_64/llvm-libs-3.5.0-r0.apk \\\n    && tar xvf llvm-libs-3.5.0-r0.apk \\\n    && cp usr/lib/libLLVM-3.5.so /usr/lib \\\n    && chown root /usr/lib/libLLVM-3.5.so \\\n    && chgrp root /usr/lib/libLLVM-3.5.so \\\n    && chmod  755 /usr/lib/libLLVM-3.5.so \\\n    && wget https://dl-cdn.alpinelinux.org/alpine/v3.1/main/x86_64/clang-3.5.0-r0.apk \\\n    && tar xvf clang-3.5.0-r0.apk \\\n    && cp usr/bin/clang-format /usr/bin/clang-format-3.5 \\\n    && chown root /usr/bin/clang-format-3.5 \\\n    && chgrp root /usr/bin/clang-format-3.5 \\\n    && chmod  755 /usr/bin/clang-format-3.5 \\\n    && mv /usr/bin/clang-format /usr/bin/clang-format-12.0.1 \\\n    && ln -s /usr/bin/clang-format-3.5 /usr/bin/clang-format \\\n    && cd /tmp \\\n    && rm -fr /tmp/clang-format\n\n###################################################\n# install spdlog\n###################################################\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/gabime/spdlog.git \\\n    && cd spdlog \\\n    && git checkout v1.4.2 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DSPDLOG_BUILD_BENCH=OFF .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf spdlog\n\n###################################################\n# install websocket++\n###################################################\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/zaphoyd/websocketpp.git \\\n    && cd websocketpp \\\n    && git checkout 0.8.2 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf websocketpp\n\n###################################################\n# install DLT\n###################################################\n\n# create fake directory for DLT so it can be installed\n# Alpine musl seems to work differently\nRUN mkdir -p /etc/ld.so.conf.d\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/GENIVI/dlt-daemon \\\n    && cd dlt-daemon \\\n    && git checkout v2.18.8 \\\n    && sed -i 's/libdir=${exec_prefix}\\/lib/libdir=@CMAKE_INSTALL_FULL_LIBDIR@/' automotive-dlt.pc.in \\\n    && sed -i 's/includedir=${exec_prefix}\\/include/includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@/' automotive-dlt.pc.in \\\n    && sed -i 's/-Werror/-Wno-error/' src/console/logstorage/CMakeLists.txt \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. -DWITH_DLT_DBUS=OFF -DWITH_DLT_TESTS=OFF -DWITH_DLT_EXAMPLES=OFF \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf dlt-daemon \\\n    && echo '/usr/local/lib64' > /etc/ld.so.conf.d/dlt.conf\n\n###################################################\n# install flatbuffers\n###################################################\nRUN export FLATBUFFERS_VERSION=v1.10.0 \\\n        && . /etc/profile \\\n        && cd /tmp \\\n        && git clone https://github.com/google/flatbuffers.git \\\n        && cd flatbuffers \\\n        && git checkout $FLATBUFFERS_VERSION \\\n        && mkdir build \\\n        && cd build \\\n        && cmake .. -DFLATBUFFERS_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release \\\n        && make install -j\"$(nproc)\" \\\n        && rm -rf /tmp/flatbuffers\n\n###################################################\n# install smrf\n###################################################\nRUN export SMRF_VERSION=0.3.4 \\\n    && . /etc/profile \\\n    && cd /opt \\\n    && git clone https://github.com/bmwcarit/smrf.git \\\n    && cd smrf \\\n    && git checkout $SMRF_VERSION \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_TESTS=Off .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf smrf\n\n###################################################\n# install MoCOCrW\n###################################################\nRUN export MoCOCrW_VERSION=c5609ccc1f3da552b4354b747bdc445e4ecfc7de \\\n    && . /etc/profile \\\n    && cd /opt \\\n    && git clone https://github.com/bmwcarit/MoCOCrW.git \\\n    && cd MoCOCrW \\\n    && git checkout $MoCOCrW_VERSION \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_TESTING=Off .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf MoCOCrW\n\n###################################################\n# install gcovr for code coverage reports\n###################################################\nRUN . /etc/profile \\\n    && pip install --no-cache-dir gcovr\n\n###################################################\n# install lcov\n###################################################\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/linux-test-project/lcov.git \\\n    && cd lcov \\\n    && make install PREFIX=/usr \\\n    && cd /opt \\\n    && rm -rf lcov\n\n###################################################\n# install rapidjson\n###################################################\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/miloyip/rapidjson.git rapidjson \\\n    && cd rapidjson \\\n    && git checkout v1.1.0 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DRAPIDJSON_BUILD_DOC=OFF \\\n    -DRAPIDJSON_BUILD_EXAMPLES=OFF \\\n    -DRAPIDJSON_BUILD_TESTS=OFF \\\n    -DRAPIDJSON_BUILD_THIRDPARTY_GTEST=OFF .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf rapidjson\n\n###################################################\n# install muesli\n###################################################\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/bmwcarit/muesli.git \\\n    && cd muesli \\\n    && git checkout 1.0.2 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_MUESLI_TESTS=Off -DUSE_PLATFORM_RAPIDJSON=On .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf muesli\n\n###################################################\n# setup build environment\n###################################################\nRUN date -R > /data/timestamp\nRUN chmod -R a+rwx /usr/local\nRUN ldconfig /usr/lib /usr/local/lib\n\n###################################################\n# set login user joynr\n###################################################\nENV GOSU_VERSION=1.3\nRUN cd /tmp \\\n    && . /etc/profile \\\n    && curl -f -o gosu -sSL \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n    && mv gosu /usr/local/bin/gosu \\\n    && chown root /usr/local/bin/gosu \\\n    && chmod 4755 /usr/local/bin/gosu\n\nENTRYPOINT [\"/sbin/tini\", \"-g\", \"--\", \"/data/scripts/boot2user.sh\"]\n"
}