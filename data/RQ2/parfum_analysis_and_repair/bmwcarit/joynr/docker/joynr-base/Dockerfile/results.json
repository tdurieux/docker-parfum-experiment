{
  "startTime": 1674216206212,
  "endTime": 1674216209291,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 251,
        "lineEnd": 251,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 497,
        "lineEnd": 497,
        "columnStart": 7,
        "columnEnd": 102
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 306,
        "lineEnd": 306,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 296,
        "lineEnd": 296,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 441,
        "lineEnd": 441,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 428,
        "lineEnd": 428,
        "columnStart": 11,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM fedora:36\n\nLABEL com.jfrog.artifactory.retention.maxCount=\"25\"\n\n# set this date to cause all images to be updated\nENV REFRESHED_AT 2022-05-02-15-00\n\n###################################################\n# create data directories and volumes\n###################################################\nWORKDIR /\nRUN mkdir /data\n\nVOLUME /data/install\nVOLUME /data/src\nVOLUME /data/build\n\nENV BUILD_DIR /data/build\nENV SRC_DIR /data/src\nENV INSTALL_DIR /data/install\nENV CURL_HOME /etc\n\n###################################################\n# setup build environment\n###################################################\nRUN mkdir -p /home/joynr/\nRUN mkdir /home/joynr/build\n\n###################################################\n# copy scripts and set start command\n###################################################\nCOPY scripts/docker /data/scripts\nRUN chmod 777 -R /data/scripts/\n\n###################################################\n# Setup dnf.conf\n###################################################\nRUN /data/scripts/setup-proxy.sh\n\n###################################################\n# set timezone\n###################################################\nRUN rm /etc/localtime \\\n    && ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime\n\n###################################################\n# install base packages\n###################################################\nRUN dnf update -y \\\n    && dnf install -y \\\n    autoconf \\\n    automake \\\n    ccache \\\n    cmake \\\n    corkscrew \\\n    expat-devel \\\n    file \\\n    gcc-c++ \\\n    gdb \\\n    git \\\n    glibc.i686 \\\n    glibc-devel.i686 \\\n    icecream \\\n    iputils \\\n    libasan \\\n    libasan-static \\\n    libcurl \\\n    libcurl-devel \\\n    libstdc++.i686 \\\n    libtool \\\n    libtsan \\\n    libtsan-static \\\n    libubsan \\\n    libubsan-static \\\n    libuuid-devel \\\n    libX11-devel \\\n    libxcb \\\n    libxcb-devel \\\n    libXi-devel \\\n    libXrender-devel \\\n    mesa-libGLU.i686 \\\n    ncurses-devel.i686 \\\n    net-tools \\\n    openssl \\\n    openssl1.1 \\\n    openssl1.1-devel \\\n    patch \\\n    perl-version \\\n    python \\\n    strace \\\n    tar \\\n    unzip \\\n    wget \\\n    which \\\n    xcb-util \\\n    xcb-util-*-devel \\\n    xcb-util-devel \\\n    zlib-devel \\\n    zlib-devel.i686 \\\n    zlib.i686 \\\n# when changing this, also adjust the joynr-java-8 docker image\n# so that the proper package is uninstalled\n    java-11-openjdk \\\n    java-11-openjdk-devel \\\n    xz \\\n    maven \\\n    hostname.x86_64 \\\n    clang \\\n    libcxx-devel \\\n    && dnf groupinstall -y 'Development Tools' \\\n    && dnf clean all\n\n###################################################\n# configure Java 11 as default\n# otherwise we would have to remove several\n# packages depending on java8 in order to be able\n# to remove java8 packages\n###################################################\nRUN alternatives --set java /usr/lib/jvm/java-11-openjdk*.x86_64/bin/java \\\n    && alternatives --set javac /usr/lib/jvm/java-11-openjdk*.x86_64/bin/javac \\\n    && alternatives --set jre_openjdk /usr/lib/jvm/java-11-openjdk*.x86_64 \\\n    && alternatives --set java_sdk_openjdk /usr/lib/jvm/java-11-openjdk*.x86_64\n\n###################################################\n# setup extra certs\n###################################################\nRUN /data/scripts/setup-extra-certs.sh\n\n###################################################\n# add git config\n###################################################\nRUN git config --global user.email \"dummy@dummy.com\" \\\n    && git config --global user.name \"Dummy\"\n\n###################################################\n# Generate certificates\n###################################################\nCOPY openssl.conf /tmp/openssl.cnf\nRUN mkdir -p /data/ssl-data \\\n    && /data/scripts/gen-certificates.sh --configfile /tmp/openssl.cnf --destdir /data/ssl-data\n\n###################################################\n# Install postgresql\n###################################################\nRUN . /etc/profile \\\n    && dnf install -y postgresql-server postgresql-contrib \\\n    && echo \"gcd\" > /opt/gcd_password \\\n    && chown postgres /opt/gcd_password \\\n    && su - postgres /data/scripts/configure-db.sh\n\n###################################################\n# Install payara\n###################################################\nENV PATH ${PATH}:/opt/payara5/glassfish/bin\n\nRUN wget --quiet -O /opt/payara-5.2021.7.zip https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/5.2021.7/payara-5.2021.7.zip && \\\n    unzip -qq /opt/payara-5.2021.7.zip -d /opt && \\\n    rm /opt/payara-5.2021.7.zip\n\nRUN asadmin --user admin start-domain && \\\n    asadmin --user admin create-managed-scheduled-executor-service --corepoolsize=100 concurrent/joynrMessagingScheduledExecutor && \\\n    asadmin --user admin set-log-levels io.joynr.messaging=FINE && \\\n    asadmin --user admin set-log-levels io.joynr.dispatching=FINE && \\\n    asadmin --user admin set-log-levels io.joynr.discovery=FINEST && \\\n    asadmin --user admin set-log-levels io.joynr.capabilities=FINEST && \\\n    asadmin --user admin set-log-levels io.joynr.arbitration=FINEST && \\\n    asadmin --user admin set-log-levels io.joynr.proxy=FINE && \\\n    asadmin --user admin set-log-levels io.joynr.jeeintegration=FINEST && \\\n    asadmin --user admin set-log-attributes com.sun.enterprise.server.logging.GFFileHandler.multiLineMode=false && \\\n    asadmin --user admin stop-domain --kill=true\n\nRUN chmod -R 777 /opt/payara5\n\n###################################################################################\n# build and install mosquitto 1.6.12 mqtt broker\n# with additional fixes and joynr API extension\n# do not build documentation\n# use default settings\n# Extra Git commits from upstream (to be removed when updating to 1.6.13 or later):\n# 298d8494 Fix send quota being incorrecly reset on reconnect.\n# 3806296c Ld symbol of the mosquitto_property_copy_all has global bind now.\n# 7804c3f0 Note that 1024 \"limit\" is from operating systems, not Mosquitto.\n# 938e17a3 Fix incorrect authentication-method property type in mosquitto_sub man.\n# 0bdf630c (tag: v1.6.12) Merge branch 'fixes'\n###################################################################################\nCOPY 0001-Introduce-mosquitto_connect_bind_async_v5-API.patch /tmp/0001-Introduce-mosquitto_connect_bind_async_v5-API.patch\nCOPY 0002-Added-reconnect_session_expiry_interval-to-struct-mo.patch /tmp/0002-Added-reconnect_session_expiry_interval-to-struct-mo.patch\nCOPY 0003-Introduced-option-MOSQ_OPT_RECONNECT_SESSION_EXPIRY_.patch /tmp/0003-Introduced-option-MOSQ_OPT_RECONNECT_SESSION_EXPIRY_.patch\nCOPY 0004-mosquitto_reconnect-supports-MQTTv5-session-expiry.patch /tmp/0004-mosquitto_reconnect-supports-MQTTv5-session-expiry.patch\nRUN . /etc/profile \\\n    && cd /opt \\\n    && git clone https://github.com/eclipse/mosquitto \\\n    && cd mosquitto \\\n    && git checkout 298d8494 \\\n    && git am -k /tmp/0001-Introduce-mosquitto_connect_bind_async_v5-API.patch \\\n    && git am -k /tmp/0002-Added-reconnect_session_expiry_interval-to-struct-mo.patch \\\n    && git am -k /tmp/0003-Introduced-option-MOSQ_OPT_RECONNECT_SESSION_EXPIRY_.patch \\\n    && git am -k /tmp/0004-mosquitto_reconnect-supports-MQTTv5-session-expiry.patch \\\n    && make WITH_WEBSOCKETS=no DOCDIRS= prefix=/usr install -j4\n\n###################################################\n# copy mosquitto.conf\n###################################################\nCOPY mosquitto.conf /etc/mosquitto/mosquitto.conf\n\n###################################################\n# install android sdk\n###################################################\nRUN dnf update -y \\\n    && dnf install -y \\\n    glibc-devel.i686 \\\n    mesa-libGLU.i686 \\\n    ncurses-devel.i686 \\\n    zlib-devel.i686 \\\n    && dnf clean all\n\nENV ANDROID_SDK_FILENAME commandlinetools-linux-7583922_latest.zip\nENV ANDROID_SDK_URL https://dl.google.com/android/repository/${ANDROID_SDK_FILENAME}\nENV ANDROID_API_LEVEL android-28\nENV ANDROID_BUILD_TOOLS_VERSION 29.0.3\nENV ANDROID_HOME /opt/android-sdk-linux\nENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools\nRUN cd /opt \\\n    && mkdir -p ${ANDROID_HOME} \\\n    && cd ${ANDROID_HOME} \\\n    && wget -q ${ANDROID_SDK_URL} \\\n    && unzip ${ANDROID_SDK_FILENAME} \\\n    && rm ${ANDROID_SDK_FILENAME} \\\n    && mv cmdline-tools tmp-cmdline-tools \\\n    && mkdir -p ${ANDROID_HOME}/cmdline-tools/latest \\\n    && mv tmp-cmdline-tools/* ${ANDROID_HOME}/cmdline-tools/latest \\\n    && rm -fr tmp-cmdline-tools\n\nRUN chown -R root:root ${ANDROID_HOME} \\\n    && chmod -R 755 ${ANDROID_HOME}\n# set this date to cause android to be updated\nENV REFRESHED_ANDROID_AT 2020-07-08\nRUN /data/scripts/setup-android.sh\n\n###################################################\n# install node.js\n###################################################\n# nvm environment variables\nENV NVM_DIR /usr/local/nvm\n\nENV NODE_V8 8.16.2\nENV NODE_V12 12.22.2\n\n# install nvm\nRUN . /etc/profile \\\n    && mkdir -p $NVM_DIR \\\n    && curl -f --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.1/install.sh | bash\n\n# install node and npm\n# having the nvm directory writable makes it possible to use nvm to change node versions manually\n# nvm uses curl internally with '-q' option suppressing evaluation of '.curlrc' hence\n# if a proxy is set it is required to wrap curl to explicitly set a config file because\n# nvm does not provide an option for this.\nRUN . /etc/profile \\\n    && if [ -n \"$PROXY_HOST\" ]; then alias curl=\"/usr/bin/curl -K /etc/.curlrc\"; fi \\\n    && source $NVM_DIR/nvm.sh \\\n    && nvm install $NODE_V12 \\\n    && nvm install $NODE_V8 \\\n    && nvm alias default $NODE_V8 \\\n    && nvm use default \\\n    && chmod -R a+rwx $NVM_DIR\n\n# add node and npm to path\n# (node will be available then without sourcing $NVM_DIR/nvm.sh)\nENV PATH $NVM_DIR/versions/node/v$NODE_V8/bin:$PATH\n\n###################################################\n# provide environment for joynr C++\n###################################################\n\nENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\n\n###################################################\n# enable gold linker\n###################################################\nRUN  update-alternatives  --set ld /usr/bin/ld.gold\n\n###################################################\n# install dnf packages for joynr C++\n###################################################\nRUN dnf update -y \\\n    && . /etc/profile \\\n    && dnf install -y \\\n    rpm-build \\\n    python-pip \\\n    lcov \\\n    boost \\\n    boost-devel \\\n    ninja-build \\\n    psmisc \\\n    && dnf clean all \\\n    && pip install --no-cache-dir gcovr\n\nRUN chmod -R a+rw /opt \\\n    && chown -R 1000 /usr/local\n\n###################################################\n# install clang 3.5 for formatting\n###################################################\nRUN cd /tmp/ \\\n    && . /etc/profile \\\n    && wget https://llvm.org/releases/3.5.0/clang+llvm-3.5.0-x86_64-fedora20.tar.xz \\\n    && tar -xf clang+llvm-3.5.0-x86_64-fedora20.tar.xz \\\n    clang+llvm-3.5.0-x86_64-fedora20/bin/clang-format \\\n    --strip-components=2 \\\n    && mv clang-format /usr/local/bin/ \\\n    && rm -f clang+llvm-3.5.0-x86_64-fedora20.tar.xz\n\n###################################################\n# install spdlog\n###################################################\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/gabime/spdlog.git \\\n    && cd spdlog \\\n    && git checkout v1.4.2 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DSPDLOG_BUILD_BENCH=OFF -DSPDLOG_BUILD_TESTS=OFF .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf spdlog\n\n###################################################\n# install websocket++\n###################################################\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/zaphoyd/websocketpp.git \\\n    && cd websocketpp \\\n    && git checkout 0.8.2 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf websocketpp\n\n###################################################\n# install DLT\n###################################################\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/GENIVI/dlt-daemon \\\n    && cd dlt-daemon \\\n    && git checkout v2.18.8 \\\n    && sed -i 's/libdir=${exec_prefix}\\/lib/libdir=@CMAKE_INSTALL_FULL_LIBDIR@/' automotive-dlt.pc.in \\\n    && sed -i 's/includedir=${exec_prefix}\\/include/includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@/' automotive-dlt.pc.in \\\n    && sed -i 's/-Werror/-Wno-error/' src/console/logstorage/CMakeLists.txt \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. -DWITH_DLT_DBUS=OFF -DWITH_DLT_TESTS=OFF -DWITH_DLT_EXAMPLES=OFF \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf dlt-daemon \\\n    && echo '/usr/local/lib64' > /etc/ld.so.conf.d/dlt.conf\n\n# DLT installs itself in /usr/local/lib64\nENV PKG_CONFIG_PATH $PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig\n\n###################################################\n# install flatbuffers\n###################################################\n\nRUN export FLATBUFFERS_VERSION=v1.12.1 \\\n        && . /etc/profile \\\n        && cd /tmp \\\n        && git clone https://github.com/google/flatbuffers.git \\\n        && cd flatbuffers \\\n        && git checkout $FLATBUFFERS_VERSION \\\n        && mkdir build \\\n        && cd build \\\n        && cmake .. -DFLATBUFFERS_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release \\\n        && make install -j\"$(nproc)\" \\\n        && rm -rf /tmp/flatbuffers\n\n###################################################\n# install smrf\n###################################################\n\nRUN export SMRF_VERSION=0.3.4 \\\n    && . /etc/profile \\\n    && cd /opt \\\n    && git clone https://github.com/bmwcarit/smrf.git \\\n    && cd smrf \\\n    && git checkout $SMRF_VERSION \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_TESTS=Off .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf smrf\n\n###################################################\n# install MoCOCrW\n###################################################\n\nRUN export MoCOCrW_VERSION=c5609ccc1f3da552b4354b747bdc445e4ecfc7de \\\n    && . /etc/profile \\\n    && cd /opt \\\n    && git clone https://github.com/bmwcarit/MoCOCrW.git \\\n    && cd MoCOCrW \\\n    && git checkout $MoCOCrW_VERSION \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_TESTING=Off .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf MoCOCrW\n\n###################################################\n# install valgrind\n###################################################\n\nRUN export VALGRIND_VERSION=3.19.0 \\\n        && . /etc/profile \\\n        && cd /tmp \\\n        && wget https://sourceware.org/pub/valgrind/valgrind-$VALGRIND_VERSION.tar.bz2 \\\n        && tar xf valgrind-$VALGRIND_VERSION.tar.bz2 \\\n        && cd valgrind-$VALGRIND_VERSION \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && make install -j\"$(nproc)\" \\\n        && rm -rf /tmp/valgrind-$VALGRIND_VERSION /tmp/valgrind-$VALGRIND_VERSION.tar.bz2\n\n###################################################\n# install gcovr for code coverage reports\n###################################################\nRUN . /etc/profile \\\n    && dnf update -y \\\n    && dnf install -y \\\n    lcov \\\n    python-pip \\\n    && dnf clean all \\\n    && pip install --no-cache-dir gcovr\n\n###################################################\n# install rapidjson\n###################################################\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/miloyip/rapidjson.git rapidjson \\\n    && cd rapidjson \\\n    && git checkout v1.1.0 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DRAPIDJSON_BUILD_DOC=OFF \\\n    -DRAPIDJSON_BUILD_EXAMPLES=OFF \\\n    -DRAPIDJSON_BUILD_TESTS=OFF \\\n    -DRAPIDJSON_BUILD_THIRDPARTY_GTEST=OFF .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf rapidjson\n\n###################################################\n# install muesli\n###################################################\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/bmwcarit/muesli.git \\\n    && cd muesli \\\n    && git checkout 1.0.2 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_MUESLI_TESTS=Off -DUSE_PLATFORM_RAPIDJSON=On .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf muesli\n\n###################################################\n# setup build environment\n###################################################\nRUN chmod -R a+rwx /usr/local\nRUN echo \"/usr/local/lib64\" > /etc/ld.so.conf.d/usr-local-lib64.conf && ldconfig\n\n###################################################\n# add Tini - \"A tiny but valid init for containers\"\n###################################################\nENV TINI_VERSION v0.13.1\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\n###################################################\n# set login user joynr\n###################################################\nENV GOSU_VERSION=1.3\nRUN cd /tmp \\\n    && . /etc/profile \\\n    && curl -f -o gosu -sSL \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n    && mv gosu /usr/local/bin/gosu \\\n    && chown root /usr/local/bin/gosu \\\n    && chmod 4755 /usr/local/bin/gosu\n\nENTRYPOINT [\"/tini\", \"-g\", \"--\", \"/data/scripts/boot2user.sh\"]\n"
}