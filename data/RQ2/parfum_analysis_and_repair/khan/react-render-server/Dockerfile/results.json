{
  "startTime": 1674246783343,
  "endTime": 1674246784371,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Create conf files for nginx and pm2. This is done using a multi-stage build so\n# that we don't need to have any dependencies used to generate the conf files\n# (in this case python) in the container.\nFROM python:3 as config\nWORKDIR /usr/src/app\nCOPY . .\n\n# Generate config files passing the number of node servers we want to run on\n# each instance.\nRUN python generate_config_files.py 4\n\n# Dockerfile extending the generic Node image with application files for a\n# single application.\nFROM gcr.io/google_appengine/nodejs\n# Check to see if the the version included in the base runtime satisfies\n# '^8.3.0', if not then do an npm install of the latest available\n# version that satisfies it.\nRUN /usr/local/bin/install_node '^8.3.0'\nCOPY . /app/\n# You have to specify \"--unsafe-perm\" with npm install\n# when running as root.  Failing to do this can cause\n# install to appear to succeed even if a preinstall\n# script fails, and may have other adverse consequences\n# as well.\n# This command will also cat the npm-debug.log file after the\n# build, if it exists.\nRUN npm install --unsafe-perm || \\\n  ((if [ -f npm-debug.log ]; then \\\n      cat npm-debug.log; \\\n    fi) && false) && npm cache clean --force;\n\n# Install pm2\nRUN npm install --unsafe-perm pm2@latest -g && npm cache clean --force;\n\n# Set up the nginx reverse proxy. We need a more recent version of nginx than is\n# available from the regular sources.\nCOPY nginx.list /etc/apt/sources.list.d/nginx.list\nRUN curl -f https://nginx.org/keys/nginx_signing.key | apt-key add -\nRUN apt-get update && \\\n    apt-get install -y -q --no-install-recommends nginx && \\\n    apt-get clean && \\\n    rm -r /var/lib/apt/lists/*\n\n# Copy conf files from build stage\nCOPY --from=config /usr/src/app/nginx.conf /etc/nginx/nginx.conf\nCOPY --from=config /usr/src/app/processes.json /app/\n\n# Start ngnix, node\nCMD [\"pm2-docker\", \"processes.json\"]\n"
}