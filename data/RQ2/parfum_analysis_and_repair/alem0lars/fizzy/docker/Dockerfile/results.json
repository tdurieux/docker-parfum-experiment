{
  "startTime": 1674215275335,
  "endTime": 1674215276503,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 216,
        "lineEnd": 217,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 5,
        "columnEnd": 49
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 5,
        "columnEnd": 54
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 108,
        "lineEnd": 115,
        "columnStart": 5,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.6\n\nMAINTAINER Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)\n\n# ────────────────────────────────────────────── Setup basic system packages ──┐\n\nRUN apk update \\\n && apk upgrade\n\n# Install libraries.\nRUN apk add --update --no-cache \\\n    linux-headers build-base openssl-dev libc-dev libxml2-dev libxslt-dev \\\n    libffi-dev readline-dev jemalloc-dev \\\n    g++ musl-dev make\n\n# Install programs.\nRUN apk add --update --no-cache \\\n    git bash curl wget zsh\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ─────────────────────────────────────── Setup common environment variables ──┐\n\nENV HOME /root\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ─────────────────────────────────────────────────────────── Setup ruby (1) ──┐\n\nARG RUBY_MAJOR=2\nARG RUBY_MINOR=4\nARG RUBY_PATCH=0\nARG RUBY_OTHER=\nARG RUBY_SHA256=152fd0bd15a90b4a18213448f485d4b53e9f7662e1508190aa5b702446b29e3d\nARG RUBYGEMS_FULL_VERSION=2.6.12\n\nENV RUBY_VERSION ${RUBY_MAJOR}.${RUBY_MINOR}\nENV RUBY_FULL_VERSION ${RUBY_VERSION}.${RUBY_PATCH}${RUBY_OTHER}\n\n# skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n  && { \\\n    echo 'install: --no-document'; \\\n    echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc\n\n# some of ruby's build scripts are written in ruby\n#   we purge system ruby later to make sure our final image uses what we just built\n# readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\nRUN apk add --no-cache --virtual .ruby-builddeps \\\n    autoconf \\\n    bison \\\n    bzip2 \\\n    bzip2-dev \\\n    ca-certificates \\\n    coreutils \\\n    dpkg-dev dpkg \\\n    gcc \\\n    gdbm-dev \\\n    glib-dev \\\n    libc-dev \\\n    libffi-dev \\\n    libxml2-dev \\\n    libxslt-dev \\\n    linux-headers \\\n    make \\\n    ncurses-dev \\\n    openssl \\\n    openssl-dev \\\n    procps \\\n    readline-dev \\\n    ruby \\\n    tar \\\n    yaml-dev \\\n    zlib-dev \\\n    xz\nRUN set -ex \\\n  && wget -O ruby.tar.gz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_VERSION}/ruby-$RUBY_FULL_VERSION.tar.gz\" \\\n  && echo \"$RUBY_SHA256  *ruby.tar.gz\" | sha256sum -c - \\\n  && mkdir -p /usr/src/ruby \\\n  && tar -xf ruby.tar.gz -C /usr/src/ruby --strip-components=1 \\\n  && rm ruby.tar.gz \\\n  && cd /usr/src/ruby \\\n  # XXX hack in \"ENABLE_PATH_CHECK\" disabling to suppress:\n  #   warning: Insecure world writable dir\n  && { \\\n    echo '#define ENABLE_PATH_CHECK 0'; \\\n    echo; \\\n    cat file.c; \\\n  } > file.c.new \\\n  && mv file.c.new file.c \\\n  && autoconf \\\n  && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  # the configure script does not detect isnan/isinf as macros\n  && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n  && ./configure \\\n    --build=\"$gnuArch\" \\\n    --disable-install-doc \\\n    --enable-shared \\\n  && make -j \"$(nproc)\" \\\n  && make install \\\n  && runDeps=\"$( \\\n    scanelf --needed --nobanner --recursive /usr/local \\\n      | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n      | sort -u \\\n      | xargs -r apk info --installed \\\n      | sort -u \\\n  )\" \\\n  && apk add --no-cache --virtual .ruby-rundeps $runDeps \\\n    bzip2 \\\n    ca-certificates \\\n    libffi-dev \\\n    openssl-dev \\\n    yaml-dev \\\n    procps \\\n    zlib-dev \\\n  && apk del .ruby-builddeps \\\n  && cd / \\\n  && rm -r /usr/src/ruby \\\n  && gem update --system \"$RUBYGEMS_FULL_VERSION\" && rm -rf /root/.gem;\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ─────────────────────────────────────────────────────────── Setup ruby (2) ──┐\n\n# Install bundler.\nRUN gem install bundler\n\n# Install things globally and don't create `.bundle` in all our apps.\nENV GEM_HOME /usr/local/bundle\nENV BUNDLE_PATH=\"${GEM_HOME}\"                                                  \\\n    BUNDLE_BIN=\"${GEM_HOME}/bin\"                                               \\\n    BUNDLE_SILENCE_ROOT_WARNING=1                                              \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH $BUNDLE_BIN:$PATH\nRUN mkdir -p  \"${GEM_HOME}\" \"${BUNDLE_BIN}\"                                    \\\n && chmod 777 \"${GEM_HOME}\" \"${BUNDLE_BIN}\"\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ──────────────────────────────────────────────────────────────── Setup ssh ──┐\n\n# Install ssh daemon.\nRUN apk add --update --no-cache                                                \\\n    openssh\n\n# Generate fresh keys.\nRUN ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa                       \\\n && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa\n\n# Prepare ssh run directory.\nRUN mkdir -p /var/run/sshd\n\n# Configure ssh.\nRUN echo \"StrictHostKeyChecking=no\" >> /etc/ssh/ssh_config\nRUN sed -i 's|[#]*PasswordAuthentication yes|PasswordAuthentication no|g'      \\\n    /etc/ssh/sshd_config\n\n# Expose ssh port.\nEXPOSE 22\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ──────────────────────────────────────────────────────────────── Setup git ──┐\n\nENV GIT_PWD=\"git\"\nENV GIT_USER=\"git\"\nENV GIT_GROUP=\"git\"\nENV GIT_REPOS_DIR=\"/git\"\n\n# Install git packages.\nRUN apk add --update --no-cache                                                \\\n    git-daemon                                                                 \\\n    git\n\n# Setup a git user and ssh.\nRUN addgroup \"${GIT_GROUP}\"                                                    \\\n && echo -e \"${GIT_PWD}\\n${GIT_PWD}\\n\"                                         \\\n  | adduser -G \"${GIT_GROUP}\" -h \"${GIT_REPOS_DIR}\" -s /usr/bin/git-shell \"${GIT_USER}\"\n\n# Remove the annoying `/etc/motd`.\nRUN rm -rf /etc/update-motd.d /etc/motd /etc/motd.dynamic\nRUN ln -fs /dev/null /run/motd.dynamic\n\n# Configure local git client.\n# TODO: Replace with fizzy config (when `--no-ask` is implemented).\nRUN git config --global push.default simple                                    \\\n && git config --global user.name  root                                        \\\n && git config --global user.email root@localhost.localdomain\n\n# SSH keys for user `root`\nADD docker/ssh_key.pub \"/root/.ssh/authorized_keys\"\nADD docker/ssh_key.pub \"/root/.ssh/id_rsa.pub\"\nADD docker/ssh_key     \"/root/.ssh/id_rsa\"\nRUN chmod 700 \"/root/.ssh\"\nRUN chmod 600 /root/.ssh/*\n\n# SSH keys for user `git`\nADD docker/ssh_key.pub \"${GIT_REPOS_DIR}/.ssh/authorized_keys\"\nADD docker/ssh_key.pub \"${GIT_REPOS_DIR}/.ssh/id_rsa.pub\"\nADD docker/ssh_key     \"${GIT_REPOS_DIR}/.ssh/id_rsa\"\nRUN chmod 700 \"${GIT_REPOS_DIR}/.ssh\"\nRUN chmod 600 ${GIT_REPOS_DIR}/.ssh/*\nRUN chown -R \"${GIT_USER}:${GIT_GROUP}\" \"${GIT_REPOS_DIR}/.ssh\"\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ────────────────────────────────────────────────────────────── Setup fizzy ──┐\n\n# Install fizzy dependencies.\nRUN gem install thor\nRUN apk add --update --no-cache                                                \\\n    sudo\n\n# Install fizzy.\n# TODO: change back to branch `master`.\nRUN curl -f -sL \\\n    https://raw.githubusercontent.com/alem0lars/fizzy/develop/build/fizzy \\\n  | tee /usr/local/bin/fizzy > /dev/null \\\n && chmod +x /usr/local/bin/fizzy\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ─────────────────────────────────────────────────────────── Setup ruby (3) ──┐\n\nRUN fizzy cfg s -C ruby -U https:alem0lars/configs-ruby\nRUN fizzy qi -V docker-test-box -C ruby -I ruby\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ──────────────────────────────────────────────────────────── Setup rsyslog ──┐\n\nRUN apk add --update --no-cache rsyslog\n\nADD docker/rsyslog.conf /etc/rsyslog.d/90-fizzy.conf\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ──────────────────────────────────────────────────────── Setup supervisord ──┐\n\nRUN apk add --update --no-cache supervisor\n\nADD docker/supervisord.ini /etc/supervisor.d/supervisord.ini\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\n# ──────────────────────────────────────────────────────────────── Setup app ──┐\n\nENV APP_DIR=\"${HOME}/fizzy\"\n\n# ──────────────────────────── (trick to allow caching) Install dependencies ──┤\n\nWORKDIR /tmp\nADD ./Gemfile      Gemfile\nADD ./Gemfile.lock Gemfile.lock\nRUN bundle install --without website\nRUN rm ./Gemfile                                                               \\\n && rm ./Gemfile.lock\n\n# ────────────────────────────────────────────────────────────── Add the app ──┤\n\nADD . \"${APP_DIR}\"\nWORKDIR \"${APP_DIR}\"\nRUN bundle install --without website\nRUN bundle exec rake build\n\n# ─────────────────────────────────────────────────────────────────────────────┘\n\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord.conf\"]\n"
}