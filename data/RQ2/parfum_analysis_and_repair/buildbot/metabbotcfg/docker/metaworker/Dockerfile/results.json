{
  "startTime": 1674217400901,
  "endTime": 1674217402356,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# please follow docker best practices\n# https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\n# Dockerfile customizations for building buildbot's CI test suite.\n#\n# Provided here as a real life example on how to make a customized\n# worker Dockerfile for your project\n\nFROM        buildbot/buildbot-worker:master\nMAINTAINER  Buildbot Maintainers\n\n# Switch to root to be able to install stuff\nUSER root\n\n# This will make apt-get install without question\nARG         DEBIAN_FRONTEND=noninteractive\n\n# Switch to root to be able to install stuff\nUSER root\n\n# on debian postgresql sets default encoding to the one of the distro, so we need to force it for utf8\nRUN apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/* && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG=en_US.utf8\n\n# install the DB drivers we need to test against databases, as well as git and nodejs\nRUN apt-get update && \\\n    curl -f -sL https://deb.nodesource.com/setup_lts.x | bash - && \\\n    apt-get install --no-install-recommends -y software-properties-common && \\\n    # add python3.x repositories\n    add-apt-repository -y ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        libmysqlclient-dev \\\n        libjpeg-dev \\\n        libpq-dev \\\n        # selenium is a java thing\n        default-jre \\\n        # chromium needs xvfb even with --headless\n        xvfb \\\n        git \\\n        gconf2 \\\n        python3.5-venv \\\n        python3.6-venv \\\n        python3.7-venv \\\n        python3.8-venv \\\n        python3.9-venv \\\n        enchant \\\n        libenchant-dev \\\n        libcairo2-dev \\\n        locales \\\n        aspell \\\n        aspell-en \\\n        ispell \\\n        iamerican \\\n        fontconfig \\\n        nodejs \\\n        postgresql-12 \\\n        sudo \\\n        python3.5-dev \\\n        python3.6-dev \\\n        python3.7-dev \\\n        python3.8-dev \\\n        python3.9-dev \\\n        python-dev \\\n        mysql-server-8.0 && \\\n\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \\\n    npm install -g yarn && \\\n    yarn global add protractor coffee-script && webdriver-manager update --chrome --no-gecko && \\\n    curl -f -o /tmp/chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \\\n    (dpkg -i /tmp/chrome.deb || apt-get --fix-broken -y install) && \\\n    rm -rf /var/lib/apt/lists/* /tmp/chrome.deb && npm cache clean --force; && yarn cache clean;\n\nCOPY pg_hba.conf /etc/postgresql/12/main/pg_hba.conf\nCOPY prepare_postgres /prepare_postgres\nCOPY prepare_mysql /prepare_mysql\nRUN sed -i \"s/data_directory = '.*'/data_directory = '\\/scratch\\/postgres'/g\" /etc/postgresql/12/main/postgresql.conf\nRUN sed -i \"s/.*datadir\\\\s*=.*/datadir='\\/scratch\\/mysql'/g\" /etc/mysql/mysql.conf.d/mysqld.cnf\nCOPY sudoers /etc/sudoers\n\n# Switch to regular user for security reasons\nUSER buildbot\n\n# generate cache for the buildbot dependencies\nRUN \\\n    mkdir -p /tmp/bb && \\\n    curl -f -sL https://github.com/buildbot/buildbot/archive/master.tar.gz | \\\n    tar  --strip-components=1 -C /tmp/bb -xz && \\\n    python3.7 -m venv /tmp/bb/sandbox && \\\n    . /tmp/bb/sandbox/bin/activate && \\\n    pip install --no-cache-dir -U pip && \\\n    pip install --no-cache-dir -e '/tmp/bb/master[test,docs,tls]' && \\\n    make -C /tmp/bb frontend_deps && \\\n    rm -rf /tmp/bb\n"
}