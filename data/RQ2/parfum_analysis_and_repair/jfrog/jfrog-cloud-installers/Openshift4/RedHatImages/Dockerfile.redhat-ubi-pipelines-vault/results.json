{
  "startTime": 1674251220805,
  "endTime": 1674251222179,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 115
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.access.redhat.com/ubi8\n\n# This is the release of Vault to pull in.\nARG VAULT_BASE_VERSION\n\nLABEL name=\"JFrog Pipelines Vault\" \\\n      description=\"JFrog Pipelines Vault image based on the Red Hat Universal Base Image.\" \\\n      vendor=\"JFrog\" \\\n      summary=\"JFrog Pipelines Vault (Red Hat UBI)\" \\\n      com.jfrog.license_terms=\"https://jfrog.com/platform/enterprise-plus-eula/\"\n\nENV JF_VAULT_USER=vault \\\n    JF_VAULT_USER_GROUP=vault \\\n    VAULT_USER_ID=1000721117 \\\n    VAULT_VERSION=${VAULT_BASE_VERSION}\n\n# Create a vault user and group first so the IDs get set the same way,\n# even as the rest of this may change over time.\nRUN useradd -M -s /usr/sbin/nologin --uid ${VAULT_USER_ID} --user-group ${JF_VAULT_USER_GROUP}\nRUN mkdir -p /home/${JF_VAULT_USER} && \\\n    chown -R ${VAULT_USER_ID}:${VAULT_USER_ID} /home/${JF_VAULT_USER}\n\nRUN yum install -y --disableplugin=subscription-manager wget curl unzip ca-certificates gnupg openssl libcap tzdata && rm -rf /var/cache/yum\n\n# Set up certificates, our base tools, and Vault.\nRUN set -eux; \\\n    apkArch=\"$(uname -a)\"; \\\n    case \"$apkArch\" in \\\n        armhf) ARCH='arm' ;; \\\n        aarch64) ARCH='arm64' ;; \\\n        x86_64) x86_64 ;; \\\n        x86) ARCH='386' ;; \\\n        *) echo >&2 \"Supported architecture: $apkArch\" ;; \\\n    esac && \\\n    VAULT_GPGKEY=91A6E7F85D05C65630BEF18951852D87348FFC4C; \\\n    found=''; \\\n    for server in \\\n        hkp://p80.pool.sks-keyservers.net:80 \\\n        hkp://keyserver.ubuntu.com:80 \\\n        hkp://pgp.mit.edu:80 \\\n    ; do \\\n        echo \"Fetching GPG key $VAULT_GPGKEY from $server\"; \\\n        gpg --batch --keyserver \"$server\" --recv-keys \"$VAULT_GPGKEY\" && found=yes && break; \\\n    done; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $VAULT_GPGKEY\" && exit 1; \\\n    mkdir -p /tmp/build && \\\n    cd /tmp/build && \\\n    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip && \\\n    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS && \\\n    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS.sig && \\\n    gpg --batch --verify vault_${VAULT_VERSION}_SHA256SUMS.sig vault_${VAULT_VERSION}_SHA256SUMS && \\\n    grep vault_${VAULT_VERSION}_linux_amd64.zip vault_${VAULT_VERSION}_SHA256SUMS | sha256sum -c && \\\n    unzip -d /bin vault_${VAULT_VERSION}_linux_amd64.zip && \\\n    cd /tmp && \\\n    rm -rf /tmp/build && \\\n    gpgconf --kill dirmngr && \\\n    gpgconf --kill gpg-agent && \\\n    rm -rf /root/.gnupg\n\n# /vault/logs is made available to use as a location to store audit logs, if\n# desired; /vault/file is made available to use as a location with the file\n# storage backend, if desired; the server will be started with /vault/config as\n# the configuration directory so you can add additional config files in that\n# location.\nRUN mkdir -p /vault/logs && \\\n    mkdir -p /vault/file && \\\n    mkdir -p /vault/config && \\\n    chown -R vault:vault /vault\n\n# Expose the logs directory as a volume since there's potentially long-running\n# state in there\nVOLUME /vault/logs\n\n# Expose the file directory as a volume since there's potentially long-running\n# state in there\nVOLUME /vault/file\n\n# 8200/tcp is the primary interface that applications use to interact with\n# Vault.\nEXPOSE 8200\n\n# The entry point script uses dumb-init as the top-level process to reap any\n# zombie processes created by Vault sub-processes.\n#\n# For production derivatives of this container, you shoud add the IPC_LOCK\n# capability so that Vault can mlock memory.\nCOPY vault-docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\n\n# Add EULA information to meet the Red Hat container image certification requirements\nCOPY entplus_EULA.txt /licenses/\n\n# SETUP VAULT TO USE MLOCK\nRUN setcap cap_ipc_lock=+ep $(readlink -f $(which vault))\n\nUSER ${JF_VAULT_USER}\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# By default you'll get a single-node development server that stores everything\n# in RAM and bootstraps itself. Don't use this configuration for production.\nCMD [\"server\", \"-dev\"]"
}