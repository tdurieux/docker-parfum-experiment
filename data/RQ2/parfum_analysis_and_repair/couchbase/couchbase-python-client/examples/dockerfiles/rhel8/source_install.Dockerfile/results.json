{
  "startTime": 1674250630055,
  "endTime": 1674250630994,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is an *unsupported* and *unofficial* Dockerfile.  The purpose of this Dockerfile is to demonstrate the steps\n# required to have a working build system to build/install the Couchbase Python 4.x SDK.  No optimization has been\n# done.\n#\n# Build System checklist:\n#   - Compiler that supports C++ 17\n#   - CMake >= 3.18\n#   - OpenSSL >= 1.1.1\n#   - Python >= 3.7\n#\n# The 4.0.2 release of the Couchbase Python SDK provides manylinux wheels.  A Python package wheel provides a pre-built\n# binary that enables significantly faster install and users do not need to worry about setting up the appropriate\n# build system (i.e. no need to install/update compiler and/or CMake).\n#\n# **NOTE:** All versions of the 4.x Python SDK, require OpenSSL >= 1.1.1 and Python >= 3.7\n#\n# Example usage:\n#   build:\n#       docker build -t <name of image> -f <path including Dockerfile> <path to Dockerfile directory>\n#   run:\n#       docker run --rm --name <name of running container> -it <name of image> /bin/bash\n#\n\nFROM --platform=linux/amd64 registry.access.redhat.com/ubi8/ubi:latest\n\n# Update to match RH subscription\nARG RH_USER=username\nARG RH_PW='password'\n\n# Update the following ARGs to desired specification\n\n# CMake must be >= 3.18\nARG CMAKE_VERSION=3.19.8\n# Python must be >= 3.7\nARG PYTHON_VERSION=3.8.10\n# NOTE:  the Python version chosen will impact what python executable to use when pip\n#           installing packages (see commands at bottom)\nARG PYTHON_EXE=python3.8\n# OpenSSL must be >= 1.1.1\nARG OPENSSL_VERSION=1.1.1l\nARG COUCHBASE_PYTHON_SDK=4.0.2\n\nRUN subscription-manager register --username=$RH_USER --password=$RH_PW --auto-attach\n\n# basic setup\nRUN yum install -y python3-devel python3-pip python3-setuptools gcc gcc-c++ openssl openssl-devel make cmake && rm -rf /var/cache/yum\n\n# OPTIONAL: useful tools\nRUN yum install -y wget vim zip unzip && rm -rf /var/cache/yum\n# OPTIONAL: more useful tools\n# RUN yum install -y lsof lshw sysstat net-tools tar\n\n# OPTIONAL: install/update CMake\n#   - RHEL8 *should* offer a compatible version of CMake (>= v3.18)\n\n# RUN cd /tmp && \\\n#     curl -L -o cmake-$CMAKE_VERSION.tar.gz https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.tar.gz && \\\n#     tar xf cmake-$CMAKE_VERSION.tar.gz && \\\n#     cd cmake-$CMAKE_VERSION && \\\n#     ./bootstrap && \\\n#     make -j4 && \\\n#     make install\n\n# OPTIONAL:  update OpenSSL\n#   - RHEL8 *should* come with a compatible version of OpenSSL (>= v1.1.1)\n\n# RUN yum install -y pcre-devel zlib-devel gd-devel perl-ExtUtils-Embed libxslt-devel perl-Test-Simple\n# RUN cd /usr/src && \\\n#     curl -L -o openssl-$OPENSSL_VERSION.tar.gz https://www.openssl.org/source/old/1.1.1/openssl-$OPENSSL_VERSION.tar.gz && \\\n#     tar -xvf openssl-$OPENSSL_VERSION.tar.gz && \\\n#     mv openssl-$OPENSSL_VERSION openssl && \\\n#     cd openssl && \\\n#     ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl --libdir=/lib64 shared zlib-dynamic && \\\n#     make -j4 && \\\n#     make install && \\\n#     mv /usr/bin/openssl /usr/bin/openssl-backup && \\\n#     ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl\n\n# install new Python version\nRUN yum install -y libffi-devel && rm -rf /var/cache/yum\nRUN cd /tmp && \\\n    curl -f -L -o Python-$PYTHON_VERSION.tgz https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz && \\\n    tar -xf Python-$PYTHON_VERSION.tgz && \\\n    cd Python-$PYTHON_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations && \\\n    make altinstall && rm Python-$PYTHON_VERSION.tgz\n\n# Install Couchbase Python SDK 4.x\n# To do a source install:\n#   - make sure the build system has been setup appropriately\n#   - use the --no-binary option to force an install from source\n#   - need to dynamically link against stdc++ static libs on RHEL8, so set COUCHBASE_CXX_CLIENT_STATIC_STDLIB to OFF\nRUN COUCHBASE_CXX_CLIENT_STATIC_STDLIB=OFF $PYTHON_EXE -m pip install couchbase==$COUCHBASE_PYTHON_SDK --no-binary couchbase\n\nRUN subscription-manager unregister\n"
}