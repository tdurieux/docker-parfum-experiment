{
  "startTime": 1674248014751,
  "endTime": 1674248015494,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 2,
        "columnEnd": 123
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 2,
        "columnEnd": 48
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.8.6-alpine as base\n\n####\n\nFROM base as builder\n\nRUN apk update && \\\n  apk add --no-cache --virtual build-deps make git g++ python3-dev musl-dev jpeg-dev zlib-dev libevent-dev file-dev libffi-dev openssl && \\\n  apk add --no-cache postgresql-dev libxml2-dev libxslt-dev\n# PDF Generation: weasyprint (libffi-dev jpeg-dev already included above)\nRUN apk add --no-cache --virtual gdk-pixbuf-dev\n\nENV POETRY_HOME=/opt/poetry \\\n    POETRY_VIRTUALENVS_IN_PROJECT=true \\\n    POETRY_NO_INTERACTION=1\n\nENV PATH=\"$POETRY_HOME/bin:$PATH\"\n\nRUN set -eo pipefail; wget -O - https://install.python-poetry.org | python -\n\nWORKDIR /opt/pysetup\n\nCOPY pyproject.toml ./\nCOPY poetry.lock ./\n\nRUN poetry install --no-root --no-dev\n\n####\n\nFROM base\n\nCOPY --from=builder /opt/pysetup/.venv /opt/pysetup/.venv\n\nENV PATH=\"/opt/pysetup/.venv/bin:$PATH\"\n\nRUN apk --no-cache add postgresql-libs ca-certificates libxslt jpeg zlib file libxml2\n# PDF Generation: weasyprint\nRUN apk --no-cache add cairo-dev pango-dev ttf-opensans\nRUN fc-cache -f\n\nWORKDIR /data/app\nADD . .\nRUN [\"sh\", \"scripts/l10n.sh\", \"generate\"]\n\nEXPOSE 8080\nENTRYPOINT [\"sh\", \"scripts/container_start.sh\"]\n"
}