{
  "startTime": 1674253583838,
  "endTime": 1674253584938,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 118
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 142
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04 as builder\n\n# Setup environment variables\nENV VERSION=5.12.0.4 \\\n    PACKAGES_VERSION=5.12.6 \\\n    PKG_VERSION=1 \\\n    CONTACT=\"Unsupported Community Build\" \\\n    GIT_VERSION=\"not known\" \\\n    DISTRO=ubuntu2004 \\\n    DEBIAN_FRONTEND=noninteractive\n\n# Install build dependencies (https://docs.opennebula.io/5.12/integration/references/build_deps.html)\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y \\\n      ubuntu-dev-tools \\\n      bash-completion \\\n      bison \\\n      debhelper \\\n      default-jdk \\\n      flex \\\n      javahelper \\\n      libmysql++-dev \\\n      libsqlite3-dev \\\n      libssl-dev \\\n      libsystemd-dev \\\n      libws-commons-util-java \\\n      libxml2-dev \\\n      libxslt1-dev \\\n      libcurl4-openssl-dev \\\n      libcurl4 \\\n      libvncserver-dev \\\n      postgresql-server-dev-all \\\n      python3-setuptools \\\n      ruby \\\n      scons \\\n      npm \\\n      ronn \\\n      rename \\\n      jq && rm -rf /var/lib/apt/lists/*;\n\n# Download sources\nRUN wget -q -O - https://github.com/OpenNebula/one/archive/release-$VERSION.tar.gz | tar xzf - \\\n && mv /one-release-$VERSION /opennebula-$VERSION \\\n && wget -q -O - https://github.com/kvaps/packages/archive/release-$PACKAGES_VERSION.tar.gz | tar xzf - \\\n && mv /packages-release-$PACKAGES_VERSION /packages-$VERSION\n\nWORKDIR /opennebula-$VERSION\n\n# Apply patches\nCOPY patches /patches\nRUN wget -q -O - https://github.com/OpenNebula/one/pull/4585.diff | patch -p1 \\\n && wget -q -O - https://github.com/OpenNebula/one/commit/c97f54281dc89a4164df9de98a8d9aa18bfd885d.diff | patch -p1 \\\n && wget -q -O - https://github.com/OpenNebula/one/commit/c5dcfd5a974e538b5254c0bfe50eec6da42618ba.diff | patch -p1 \\\n && wget -q -O - https://github.com/OpenNebula/one/commit/b9623af7696f6844acd585ca083c2e91604fd231.diff | patch -p1 \\\n && cat /patches/915277d928c6242bba7501a3b47cd8f7b30051a3.diff | patch -p1 \\\n && wget -q -O - https://github.com/OpenNebula/one/commit/2a413d30957bfc5e4b1bf68cb7b38cfe0e660b48.diff | patch -p1 \\\n && cat /patches/16758d6ce06ebabd7ad7f79d82460e5430639b32.diff | patch -p1\n\n# Build docs\nRUN cd share/man \\\n && ./build.sh\n\n# Build Sunstone\nRUN cd src/sunstone/public \\\n && ./build.sh -d \\\n && export PATH=$PATH:$PWD/node_modules/.bin \\\n && ./build.sh \\\n && rm -rf node_modules/\n\n# Build Java OCA\n#RUN cd src/oca/java \\\n# && ./build.sh -d\n\n# Prepare sources\nRUN tar -czf /opennebula_$VERSION.orig.tar.gz . \\\n && cp -r /packages-$VERSION/templates/$DISTRO/ debian \\\n && wget -q https://downloads.opennebula.io/extra/xmlrpc-c.tar.gz \\\n && wget -q https://downloads.opennebula.io/packages/opennebula-$VERSION/java-oca-$VERSION.tar.gz \\\n && sed -i '/new_xmlrpc=yes/a\\    context=yes \\\\' /packages-$VERSION/sources/build_opennebula.sh \\\n && tar -czf build_opennebula.tar.gz -C /packages-$VERSION/sources build_opennebula.sh xml_parse_huge.patch && rm /opennebula_$VERSION.orig.tar.gz\n\n# Download Ruby gems\nRUN bash -x /packages-$VERSION/rubygems/download.sh /opennebula_$VERSION.orig.tar.gz Ubuntu2004 opennebula-rubygems-$VERSION.tar\n\n# Build Ruby gems\nRUN \"/packages-$VERSION/rubygems/build.sh\" \\\n    \"/opennebula_$VERSION.orig.tar.gz\" \\\n    \"/\" \\\n    \"$(echo ${DISTRO} | sed 's/\\b./\\u\\0/g')\" \\\n    \"${VERSION}-${PKG_VERSION}\" \\\n    \"${CONTACT}\"\n\n# Generate requirements for all Ruby gem packages and process control template\nRUN for F in /opennebula-rubygem-*.deb; do \\\n        _NAME=$(dpkg-deb -f \"${F}\" Package); \\\n        _VERS=$(dpkg-deb -f \"${F}\" Version); \\\n        RUBYGEMS_REQ=\"${RUBYGEMS_REQ}${_NAME} (= ${_VERS}), \"; \\\n    done \\\n && m4 -D_VERSION_=\"${VERSION}\" \\\n    -D_PKG_VERSION_=\"${PKG_VERSION}\" \\\n    -D_CONTACT_=\"${CONTACT}\" \\\n    -D_DATE_=\"${DATE}\" \\\n    -D_RUBYGEMS_REQ_=\"${RUBYGEMS_REQ}\" \\\n    -D_WITH_RUBYGEMS_ \\\n    debian/control.m4 > debian/control\n\n# Generate changelog\nRUN printf '%s\\n\\n' \\\n  \"opennebula (${VERSION}-${PKG_VERSION}) unstable; urgency=low\" \\\n  \"  * Build for ${VERSION}-${PKG_VERSION} (Git revision ${GIT_VERSION})\" \\\n  \" -- ${CONTACT}  $(date -R)\" \\\n  > debian/changelog\n\n# Generate gitversion\nRUN echo \"${GIT_VERSION}\" > debian/gitversion\n\n# Build source package\nRUN dpkg-source --include-binaries -b .\n\n# Install dependencies\nRUN apt-get install --no-install-recommends -y $(dpkg-checkbuilddeps 2>&1 | sed -e 's/.*Unmet build dependencies: //' -e 's/[\\(][^)]*[\\)]//g') && rm -rf /var/lib/apt/lists/*;\n\n# Build binary package\nRUN dpkg-buildpackage -us -uc\n\n# Preserve only packages\nFROM ubuntu:20.04\nCOPY --from=builder /*.tar.xz /*.deb /packages/\n"
}