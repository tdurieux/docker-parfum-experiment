{
  "startTime": 1674255038037,
  "endTime": 1674255039145,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 38,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 82
      }
    }
  ],
  "repairedDockerfile": "# Copyright (c) 2018, 2021 Oracle and/or its affiliates. All rights reserved.\n# Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n\nFROM ubuntu:bionic as build\n\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install --no-install-recommends -y maven python3 python3-venv && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Create a first layer to cache the \"Maven World\" in the local repository.\n# Incremental docker builds will always resume after that, unless you update the pom\nWORKDIR /mvn\nCOPY pom.xml /mvn/\nCOPY opengrok-indexer/pom.xml /mvn/opengrok-indexer/\nCOPY opengrok-web/pom.xml /mvn/opengrok-web/\nCOPY plugins/pom.xml /mvn/plugins/\nCOPY suggester/pom.xml /mvn/suggester/\n\n# distribution and tools do not have dependencies to cache\nRUN sed -i 's:<module>distribution</module>::g' /mvn/pom.xml && \\\n    sed -i 's:<module>tools</module>::g' /mvn/pom.xml && \\\n    mkdir -p /mvn/opengrok-indexer/target/jflex-sources && \\\n    mkdir -p /mvn/opengrok-web/src/main/webapp/js && \\\n    mkdir -p /mvn/opengrok-web/src/main/webapp/WEB-INF/ && \\\n    touch /mvn/opengrok-web/src/main/webapp/WEB-INF/web.xml\n\n# dummy build to cache the dependencies\nRUN mvn -DskipTests -Dcheckstyle.skip -Dmaven.antrun.skip package\n\n# build the project\nCOPY ./ /opengrok-source\nWORKDIR /opengrok-source\n\nRUN mvn -DskipTests=true -Dmaven.javadoc.skip=true -B -V package\n# hadolint ignore=SC2012,DL4006\nRUN cp `ls -t distribution/target/*.tar.gz | head -1` /opengrok.tar.gz\n\n# Store the version in a file so that the tools can report it.\nRUN mvn help:evaluate -Dexpression=project.version -q -DforceStdout > /mvn/VERSION\n\nFROM tomcat:10-jdk11\nLABEL maintainer=\"https://github.com/oracle/opengrok\"\n\n# install dependencies and Python tools\n# hadolint ignore=DL3008,DL3009\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y git subversion mercurial unzip inotify-tools python3 python3-pip \\\n    python3-venv python3-setuptools && rm -rf /var/lib/apt/lists/*;\n\n# compile and install universal-ctags\n# hadolint ignore=DL3003,DL3008\nRUN apt-get install --no-install-recommends -y pkg-config automake build-essential && \\\n    git clone https://github.com/universal-ctags/ctags /root/ctags && \\\n    cd /root/ctags && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && \\\n    apt-get remove -y automake build-essential && \\\n    apt-get -y autoremove && apt-get -y autoclean && \\\n    cd /root && rm -rf /root/ctags && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# prepare OpenGrok binaries and directories\n# hadolint ignore=DL3010\nCOPY --from=build opengrok.tar.gz /opengrok.tar.gz\n# hadolint ignore=DL3013\nRUN mkdir -p /opengrok /opengrok/etc /opengrok/data /opengrok/src && \\\n    tar -zxvf /opengrok.tar.gz -C /opengrok --strip-components 1 && \\\n    rm -f /opengrok.tar.gz && \\\n    python3 -m pip install --no-cache-dir /opengrok/tools/opengrok-tools* && \\\n    python3 -m pip install --no-cache-dir Flask Flask-HTTPAuth waitress # for /reindex REST endpoint handled by start.py\n\nCOPY --from=build /mvn/VERSION /opengrok/VERSION\n\n# environment variables\nENV SRC_ROOT /opengrok/src\nENV DATA_ROOT /opengrok/data\nENV URL_ROOT /\nENV CATALINA_HOME /usr/local/tomcat\nENV CATALINA_BASE /usr/local/tomcat\nENV CATALINA_TMPDIR /usr/local/tomcat/temp\nENV PATH $CATALINA_HOME/bin:$PATH\nENV CLASSPATH /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\n\n# disable all file logging\nCOPY docker/logging.properties /usr/local/tomcat/conf/logging.properties\nRUN sed -i -e 's/Valve/Disabled/' /usr/local/tomcat/conf/server.xml\n\n# add our scripts\nCOPY docker /scripts\nRUN chmod -R +x /scripts\n\n# run\nWORKDIR $CATALINA_HOME\nEXPOSE 8080\nCMD [\"/scripts/start.py\"]\n"
}