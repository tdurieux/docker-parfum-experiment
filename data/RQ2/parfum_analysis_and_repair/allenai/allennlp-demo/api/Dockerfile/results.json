{
  "startTime": 1674251746286,
  "endTime": 1674251747842,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is the common Dockerfile that is used to build all demos unless the demo\n# overrides this with its own Dockerfile in its directory.\nFROM python:3.8\n\n# Ensure allennlp_demo module can be found by Python.\nENV PYTHONPATH /app/\n\n# Ensure log messages written immediately instead of being buffered, which is\n# useful if the app crashes so the logs won't get swallowed.\nENV PYTHONUNBUFFERED 1\n\n# Disable parallelism in tokenizers because it doesn't help, and sometimes hurts.\nENV TOKENIZERS_PARALLELISM 0\n\nWORKDIR /app/\n\nCOPY requirements.txt requirements.txt\nENV ALLENNLP_VERSION_OVERRIDE allennlp\nRUN pip install --no-cache-dir -r requirements.txt\n\nRUN spacy download en_core_web_sm\n\nCOPY allennlp_demo/__init__.py allennlp_demo/__init__.py\nCOPY allennlp_demo/common allennlp_demo/common\n\n# Name / sub-directory name of the demo.\nARG MODULE\n\n# Copy model-specific stuff.\nCOPY allennlp_demo/${MODULE} allennlp_demo/${MODULE}\n\n# You might be wondering why we can't just do\n#\n#> ENTRYPOINT [ \"python\" ]\n#> CMD [ \"allennlp_demo/${MODULE}/api.py\" ]\n#\n# The reason is that Python will interpret the string in CMD literally as just\n# \"allennlp_demo/${MODULE}/api.py\" without substituting environment variables.\n# Environment variable evaluation is a something that a shell handles, so we need\n# to wrap the `python` command in a shell (`/bin/bash` in this case).\nENV MODULE ${MODULE}\nENTRYPOINT [ \"/bin/bash\" ]\nCMD [ \"-c\", \"python allennlp_demo/${MODULE}/api.py\" ]\n"
}