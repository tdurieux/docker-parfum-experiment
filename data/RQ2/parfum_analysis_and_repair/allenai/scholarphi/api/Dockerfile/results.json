{
  "startTime": 1674255445775,
  "endTime": 1674255446473,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12.20.0-alpine3.12 AS build\n\nWORKDIR /app\n\n# Install all depenedencies. Doing this separately speeds up the build as it\n# avoids reinstalling the dependencies everytime the source code changes.\nCOPY package*.json ./\nRUN npm install && npm cache clean --force;\n\n# Copy over the source code\nCOPY . .\n\n# Compile from TypeScript to JavaScript\nARG NODE_ENV\nENV NODE_ENV ${NODE_ENV:-production}\nRUN npm run build\n\n# We use what's called a \"multi stage\" build to reduce the size of the final\n# image. This allows us to ditch the dependencies and other build time stuff\n# that aren't needed at runtime.\nFROM node:12.20.0-alpine3.12 AS runtime\n\nWORKDIR /app\n\n# Install runtime dependencies only.\nCOPY --from=build /app/package*.json ./\nRUN npm install --production && npm cache clean --force;\n\n# Copy over the build artifacts from the prior stage.\nCOPY --from=build /app/build ./build\n\nENV NODE_ENV ${NODE_ENV:-production}\n\n# Kick things off. We use `npm` instead of `node` directly so that signals\n# are handled properly.\nENTRYPOINT [ \"npm\" ]\nCMD [ \"run\", \"start:prod\" ]\n"
}