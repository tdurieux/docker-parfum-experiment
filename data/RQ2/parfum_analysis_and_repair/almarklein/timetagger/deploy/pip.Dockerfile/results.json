{
  "startTime": 1674217400777,
  "endTime": 1674217402297,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build/run TimeTagger in a container, by installing\n# timegagger using pip (from PyPi or GitHub) at build time.\n#\n# Below are the MyPaas parameters that I use for deploying test builds.\n# You can ignore/remove these if you do not use MyPaas. You're probably\n# more interested in the docker-compose.yml :)\n#\n# mypaas.service = timetagger.test1\n# mypaas.url = https://test1.timetagger.app\n# mypaas.volume = /root/_timetagger:/root/_timetagger\n# mypaas.maxmem = 256m\n# mypaas.env = TIMETAGGER_CREDENTIALS\n\nFROM python:3.10-slim-buster\n\n# Install dependencies (including optional ones that make uvicorn faster)\nRUN pip --no-cache-dir install pip --upgrade && pip --no-cache-dir install \\\n    uvicorn uvloop httptools \\\n    fastuaparser itemdb>=1.1.1 asgineer requests \\\n    jinja2 markdown pscript \\\n    pyjwt cryptography\n\n# This causes the cache to skip, so that we get the latest TimeTagger version.\n# If this occasionally does not work (e.g. ramdom.org is out), simply comment.\nADD \"https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h\" skipcache\n\n# Install the latest release, or the bleeding edge from GitHub\nRUN pip install --no-cache-dir -U timetagger\n# RUN pip install -U https://github.com/almarklein/timetagger/archive/main.zip\n\nWORKDIR /root\n\nCMD [\"python\", \"-m\", \"timetagger\"]\n"
}