{
  "startTime": 1674220947075,
  "endTime": 1674220948326,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 12,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 12,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 12,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 12,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 12,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 12,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 12,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 12,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 12,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 12,
        "columnEnd": 66
      }
    }
  ],
  "repairedDockerfile": "# Rust build environment Dockerfile.\n# NOTE: When making changes, also bumb the version number in\n# the CircleCI config, or existing builds will break.\n#\n# See also the Rust playground Dockerfile:\n# https://github.com/integer32llc/rust-playground/blob/master/compiler/base/Dockerfile\nFROM circleci/rust:1-node\n\n# The latest nightly\n# TODO: Update manually.\nENV NIGHTLY=\"nightly-2020-07-26\"\n\nRUN true \\\n    # For coverage reports \\\n    && sudo apt-get install -y --no-install-recommends lcov \\\n    # Update rust stable and use\n    && rustup update stable \\\n    && rustup default stable \\\n    # Install Nightly with rustfmt, wasm and Cortex-M3 support\n    && rustup toolchain install $NIGHTLY \\\n    && rustup target add wasm32-unknown-unknown --toolchain $NIGHTLY \\\n    && rustup target add thumbv7m-none-eabi --toolchain $NIGHTLY \\\n    && rustup component add rustfmt --toolchain $NIGHTLY \\\n    # Install tools\n    && rustup component add clippy \\\n    && cargo install sccache --no-default-features \\\n    && cargo install --git https://github.com/alexcrichton/wasm-gc \\\n    && cargo install twiggy \\\n    && cargo install cargo-cache \\\n    && cargo install grcov \\\n    && cargo install cargo-hack \\\n    # More analysis tools\n    && cargo install cargo-outdated \\\n    && cargo install cargo-audit \\\n    && cargo install cargo-geiger \\\n    && sudo apt-get install -y --no-install-recommends python3-pip \\\n    && python3 -m pip install remarshal --user \\\n    # Compress cargo caches\n    && cargo cache --autoclean-expensive && rm -rf /var/lib/apt/lists/*;\n\n# Flags used to build coverage. To benefit from precompiling, we need to use\n# identical flags in CI, which is why they are exported in an ENV.\n# See https://users.rust-lang.org/t/howto-generating-a-branch-coverage-report/8524\n# NOTE: We could add `-Coverflow-checks=off` but we want overflow checks in unit tests.\nENV COVFLAGS=\"-Dwarnings -Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Copt-level=1\"\n\n# Compile project to load up global cargo caches.\n# We also leave the `.git` and `target` folder around as this\n# will speedup CI builds. The `checkout` routine will make sure\n# we have a fresh source checkout in CI.\nCOPY --chown=circleci:circleci . /home/circleci/project\n\nRUN true \\\n    # Fetch project dependencies\n    && cd $HOME/project \\\n    && cargo fetch \\\n    # Compress cargo caches\n    && cargo cache --autoclean-expensive\n\n# Warnings are not accepted in CI build\nENV RUSTFLAGS=\"-Dwarnings\"\n\n# Prebuild all to fill caches\nRUN true \\\n    && cd $HOME/project \\\n    && CARGO_INCREMENTAL=0 RUSTFLAGS=\"$COVFLAGS\" cargo +$NIGHTLY t --no-run \\\n    && cargo lint \\\n    && cargo +$NIGHTLY nostd_all \\\n    && cargo perf_all --no-run\n"
}