{
  "startTime": 1674255447320,
  "endTime": 1674255448975,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 11,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 208,
        "lineEnd": 208,
        "columnStart": 23,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 8,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 8,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 8,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 8,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 69,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 8,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 8,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 8,
        "columnEnd": 102
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 8,
        "columnEnd": 82
      }
    }
  ],
  "repairedDockerfile": "# To build with OpenMC and by default this Dockerfile builds the master branch of OpenMC.\n# docker build -t openmc .\n\n# To build with OpenMC develop branch\n# docker build -t openmc_develop --build-arg openmc_branch=develop .\n\n# To build with OpenMC and DAGMC enabled\n# docker build -t openmc_dagmc --build-arg build_dagmc=on --build-arg compile_cores=4 .\n\n# To build with OpenMC and Libmesh enabled\n# docker build -t openmc_libmesh --build-arg build_libmesh=on --build-arg compile_cores=4 .\n\n# To build with both DAGMC and Libmesh enabled\n# docker build -t openmc_dagmc_libmesh --build-arg build_dagmc=on --build-arg build_libmesh=on --build-arg compile_cores=4 .\n\n# sudo docker run image_name:tag_name or ID with no tag sudo docker run ID number\n\nFROM debian:bullseye-slim AS dependencies\n\n# By default this Dockerfile builds OpenMC without DAGMC and LIBMESH support\nARG build_dagmc=off\nARG build_libmesh=off\n\n# By default one core is used to compile\nARG compile_cores=1\n\n# Set default value of HOME to /root\nENV HOME=/root\n\n# OpenMC variables\nARG openmc_branch=master\nENV OPENMC_REPO='https://github.com/openmc-dev/openmc'\n\n# Embree variables\nENV EMBREE_TAG='v3.12.2'\nENV EMBREE_REPO='https://github.com/embree/embree'\nENV EMBREE_INSTALL_DIR=$HOME/EMBREE/\n\n# MOAB variables\nENV MOAB_TAG='5.3.0'\nENV MOAB_REPO='https://bitbucket.org/fathomteam/moab/'\n\n# Double-Down variables\nENV DD_TAG='v1.0.0'\nENV DD_REPO='https://github.com/pshriwise/double-down'\nENV DD_INSTALL_DIR=$HOME/Double_down\n\n# DAGMC variables\nENV DAGMC_BRANCH='v3.2.1'\nENV DAGMC_REPO='https://github.com/svalinn/DAGMC'\nENV DAGMC_INSTALL_DIR=$HOME/DAGMC/\n\n# LIBMESH variables\nENV LIBMESH_TAG='v1.6.0'\nENV LIBMESH_REPO='https://github.com/libMesh/libmesh'\nENV LIBMESH_INSTALL_DIR=$HOME/LIBMESH\n\n# NJOY variables\nENV NJOY_REPO='https://github.com/njoy/NJOY2016'\n\n# Setup environment variables for Docker image\nENV LD_LIBRARY_PATH=${DAGMC_INSTALL_DIR}/lib:$LD_LIBRARY_PATH \\\n    OPENMC_CROSS_SECTIONS=/root/nndc_hdf5/cross_sections.xml \\\n    OPENMC_ENDF_DATA=/root/endf-b-vii.1 \\\n    DEBIAN_FRONTEND=noninteractive\n\n# Install and update dependencies from Debian package manager\nRUN apt-get update -y && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n        python3-pip python-is-python3 wget git build-essential cmake \\\n        mpich libmpich-dev libhdf5-serial-dev libhdf5-mpich-dev \\\n        libpng-dev && \\\n    apt-get autoremove && rm -rf /var/lib/apt/lists/*;\n\n# Update system-provided pip\nRUN pip install --no-cache-dir --upgrade pip\n\n# Clone and install NJOY2016\nRUN cd $HOME \\\n    && git clone --single-branch --depth 1 ${NJOY_REPO} \\\n    && cd NJOY2016 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -Dstatic=on .. \\\n    && make 2>/dev/null -j${compile_cores} install \\\n    && rm -rf $HOME/NJOY2016\n\n\nRUN if [ \"$build_dagmc\" = \"on\" ]; then \\\n        apt-get -y --no-install-recommends install libeigen3-dev libnetcdf-dev libtbb-dev libglfw3-dev \\\n        && pip install --no-cache-dir --upgrade numpy cython \\\n        # Clone and install EMBREE\n        && mkdir -p $HOME/EMBREE && cd $HOME/EMBREE \\\n        && git clone --single-branch -b ${EMBREE_TAG} --depth 1 ${EMBREE_REPO} \\\n        && mkdir build && cd build \\\n        && cmake ../embree \\\n                    -DCMAKE_INSTALL_PREFIX=${EMBREE_INSTALL_DIR} \\\n                    -DEMBREE_MAX_ISA=NONE \\\n                    -DEMBREE_ISA_SSE42=ON \\\n                    -DEMBREE_ISPC_SUPPORT=OFF \\\n        && make 2>/dev/null -j${compile_cores} install \\\n        && rm -rf ${EMBREE_INSTALL_DIR}/build ${EMBREE_INSTALL_DIR}/embree; rm -rf /var/lib/apt/lists/*; \\\n\n        mkdir -p $HOME/MOAB && cd $HOME/MOAB \\\n        && git clone  --single-branch -b ${MOAB_TAG} --depth 1 ${MOAB_REPO} \\\n        && mkdir build && cd build \\\n        && cmake ../moab -DENABLE_HDF5=ON \\\n                      -DENABLE_NETCDF=ON \\\n                      -DBUILD_SHARED_LIBS=OFF \\\n                      -DENABLE_FORTRAN=OFF \\\n                      -DENABLE_BLASLAPACK=OFF \\\n        && make 2>/dev/null -j${compile_cores} install \\\n        && cmake ../moab \\\n                    -DENABLE_PYMOAB=ON \\\n                    -DBUILD_SHARED_LIBS=ON \\\n        && make 2>/dev/null -j${compile_cores} install \\\n        && cd pymoab && bash install.sh \\\n        && python setup.py install \\\n        && python -c \"import pymoab\" \\\n        && rm -rf $HOME/MOAB ; \\\n\n        mkdir -p $HOME/Double_down && cd $HOME/Double_down \\\n        && git clone --single-branch -b ${DD_TAG} --depth 1 ${DD_REPO} \\\n        && mkdir build && cd build \\\n        && cmake ../double-down -DCMAKE_INSTALL_PREFIX=${DD_INSTALL_DIR} \\\n                             -DMOAB_DIR=/usr/local \\\n                             -DEMBREE_DIR=${EMBREE_INSTALL_DIR} \\\n        && make 2>/dev/null -j${compile_cores} install \\\n        && rm -rf ${DD_INSTALL_DIR}/build ${DD_INSTALL_DIR}/double-down ; \\\n\n        mkdir -p $HOME/DAGMC && cd $HOME/DAGMC \\\n        && git clone --single-branch -b ${DAGMC_BRANCH} --depth 1 ${DAGMC_REPO} \\\n        && mkdir build && cd build \\\n        && cmake ../DAGMC -DBUILD_TALLY=ON \\\n                       -DCMAKE_INSTALL_PREFIX=${DAGMC_INSTALL_DIR} \\\n                       -DMOAB_DIR=/usr/local \\\n                       -DDOUBLE_DOWN=ON \\\n                       -DDOUBLE_DOWN_DIR=${DD_INSTALL_DIR} \\\n                       -DCMAKE_PREFIX_PATH=${DD_INSTALL_DIR}/lib \\\n                       -DBUILD_STATIC_LIBS=OFF \\\n        && make 2>/dev/null -j${compile_cores} install \\\n        && rm -rf ${DAGMC_INSTALL_DIR}/DAGMC ${DAGMC_INSTALL_DIR}/build ; \\\n    fi\n\n\nRUN if [ \"$build_libmesh\" = \"on\" ]; then \\\n        apt-get -y --no-install-recommends install m4 libnetcdf-dev libpnetcdf-dev \\\n        # Install LIBMESH\n        && mkdir -p $HOME/LIBMESH && cd $HOME/LIBMESH \\\n        && git clone --shallow-submodules --recurse-submodules --single-branch -b ${LIBMESH_TAG} --depth 1 ${LIBMESH_REPO} \\\n        && mkdir build && cd build \\\n        && ../libmesh/configure \\\n                    --prefix=${LIBMESH_INSTALL_DIR} CXX=mpicxx CC=mpicc FC=mpifort F77=mpif77 \\\n                    --enable-exodus \\\n                    --enable-mpi \\\n                    --enable-silent-rules \\\n                    --enable-unique-id \\\n                    --disable-eigen \\\n                    --disable-fortran \\\n                    --disable-lapack \\\n                    --disable-examples \\\n                    --disable-warnings \\\n                    --disable-maintainer-mode \\\n                    --disable-metaphysicl \\\n                    --with-methods=\"opt\" \\\n                    --without-gdb-command \\\n                    --with-cxx-std-min=2014 \\\n        && make 2>/dev/null -j${compile_cores} install \\\n        && rm -rf ${LIBMESH_INSTALL_DIR}/build ${LIBMESH_INSTALL_DIR}/libmesh; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\nFROM dependencies AS build\n\n# clone and install openmc\nRUN mkdir -p ${HOME}/OpenMC && cd ${HOME}/OpenMC \\\n    && git clone --shallow-submodules --recurse-submodules --single-branch -b ${openmc_branch} --depth=1 ${OPENMC_REPO} \\\n    && mkdir build && cd build ; \\\n    if [ ${build_dagmc} = \"on\" ] && [ ${build_libmesh} = \"on\" ]; then \\\n        cmake ../openmc \\\n            -DOPENMC_USE_MPI=on \\\n            -DHDF5_PREFER_PARALLEL=on \\\n            -DOPENMC_USE_DAGMC=on \\\n            -DOPENMC_USE_LIBMESH=on \\\n            -DCMAKE_PREFIX_PATH=\"${DAGMC_INSTALL_DIR};${LIBMESH_INSTALL_DIR}\" ; \\\n    fi ; \\\n    if [ ${build_dagmc} = \"on\" ] && [ ${build_libmesh} = \"off\" ]; then \\\n        cmake ../openmc \\\n            -DOPENMC_USE_MPI=on \\\n            -DHDF5_PREFER_PARALLEL=on \\\n            -DOPENMC_USE_DAGMC=ON \\\n            -DCMAKE_PREFIX_PATH=${DAGMC_INSTALL_DIR} ; \\\n    fi ; \\\n    if [ ${build_dagmc} = \"off\" ] && [ ${build_libmesh} = \"on\" ]; then \\\n        cmake ../openmc \\\n            -DOPENMC_USE_MPI=on \\\n            -DHDF5_PREFER_PARALLEL=on \\\n            -DOPENMC_USE_LIBMESH=on \\\n            -DCMAKE_PREFIX_PATH=${LIBMESH_INSTALL_DIR} ; \\\n    fi ; \\\n    if [ ${build_dagmc} = \"off\" ] && [ ${build_libmesh} = \"off\" ]; then \\\n        cmake ../openmc \\\n            -DOPENMC_USE_MPI=on \\\n            -DHDF5_PREFER_PARALLEL=on ; \\\n    fi ; \\\n    make 2>/dev/null -j${compile_cores} install \\\n    && cd ../openmc && pip install --no-cache-dir .[test,depletion-mpi] \\\n    && python -c \"import openmc\"\n\nFROM build AS release\n\n# Download cross sections (NNDC and WMP) and ENDF data needed by test suite\nRUN ${HOME}/OpenMC/openmc/tools/ci/download-xs.sh\n"
}