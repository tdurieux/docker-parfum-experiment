{
  "startTime": 1674254707249,
  "endTime": 1674254708313,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###\n# Ambientum\n#\n# Repository:    ambientum/mkcert\n# Version:       v1.4.x\n# Strategy:      MKCert binary for Docker\n# Base distro:   Alpine 3.10\n#\n\n# build binary.\nFROM golang:1.14-alpine AS build-mkcert\n\n# disable 111.\nENV GO111MODULE=off\n\n# explicit version (for cache-friendly upgrades).\nENV MKCERT_VERSION='1.4.3'\n\nRUN arch\n\n# build it.\nRUN apk add --no-cache --update git bash && \\\n    cd /go && \\\n    go get -u github.com/FiloSottile/mkcert && \\\n    cd src/github.com/FiloSottile/mkcert* && \\\n    git checkout tags/\"v${MKCERT_VERSION}\" -b \"tag-v${MKCERT_VERSION}\" && \\\n    go build -o /bin/mkcert && \\\n    chmod +x /bin/mkcert\n\n# dependency-less image.\nFROM alpine:3.10\n\n# Repository/Image Maintainer\nLABEL maintainer=\"Diego Hernandes <iamhernandev@gmail.com>\"\n\n# explicit version (for cache-friendly upgrades).\nENV MKCERT_VERSION='v1.4.3'\n\n# make sure terminal is properly configured.\nENV TERM=xterm-256color \\\n    COLORTERM=truecolor\n\n# Add the ENTRYPOINT script\nADD start.sh /scripts/start.sh\nADD bashrc /home/ambientum/.bashrc\nADD bashrc /home/bashrc\n\n# copy mkcert binary\nCOPY --from=build-mkcert /bin/mkcert /bin/mkcert\n# make sure it's executable.\nRUN chmod +x /bin/mkcert\n\n# Install PHP From DotDeb, Common Extensions, Composer and then cleanup\nRUN echo \"---> Enabling alpine repositories\" && \\\n    echo \"http://dl-cdn.alpinelinux.org/alpine/v3.10/main\" > /etc/apk/repositories && \\\n    echo \"http://dl-cdn.alpinelinux.org/alpine/v3.10/community\" >> /etc/apk/repositories && \\\n    echo \"---> Installing utils\" && \\\n    apk add --no-cache --update bash sudo && \\\n    echo \"---> Configuring ambientum user\" && \\\n    adduser -D -u 1000 ambientum && \\\n    mkdir -p /var/www/app && \\\n    chown -R ambientum:ambientum /var/www && \\\n    echo \"ambientum  ALL = ( ALL ) NOPASSWD: ALL\" >> /etc/sudoers && \\\n    echo \"---> Fixing permissions\" && \\\n    chown -R ambientum:ambientum /home/ambientum && \\\n    chown -R ambientum:ambientum /scripts && \\\n    chown -R ambientum:ambientum /home/bashrc && \\\n    chmod +x /scripts/start.sh && \\\n    echo \"---> Cleaning temporary files\" && \\\n    rm -rf /tmp/*\n\n# Define the running user\nUSER ambientum\n\n# Application directory\nWORKDIR \"/var/www/app\"\n\n# Environment variables\nENV PATH=/home/ambientum/.composer/vendor/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\n# Define the entry point that tries to enable newrelic\nENTRYPOINT [\"/scripts/start.sh\"]\n\n# As non daemon and single base image, it may be used as cli container\nCMD [\"/bin/mkcert\"]\n"
}