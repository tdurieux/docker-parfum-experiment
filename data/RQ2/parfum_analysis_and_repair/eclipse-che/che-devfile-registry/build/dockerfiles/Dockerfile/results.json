{
  "startTime": 1674220596348,
  "endTime": 1674220597912,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 57,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright (c) 2018-2021 Red Hat, Inc.\n# This program and the accompanying materials are made\n# available under the terms of the Eclipse Public License 2.0\n# which is available at https://www.eclipse.org/legal/epl-2.0/\n#\n# SPDX-License-Identifier: EPL-2.0\n#\nFROM docker.io/node:16.13.0-alpine3.14 AS builder\n\nARG VERSION\n\nRUN apk add --no-cache py-pip jq bash wget git skopeo && pip install --no-cache-dir yq\n\nCOPY ./build/scripts /build/\nCOPY ./devfiles /build/devfiles\nWORKDIR /build/\n\nRUN ./check_mandatory_fields.sh devfiles\n\nRUN ./index.sh > /build/devfiles/index.json\nRUN ./list_referenced_images.sh devfiles > /build/devfiles/external_images.txt\nRUN ./generate_devworkspace_templates.sh $VERSION\nRUN chmod -R g+rwX /build/devfiles\nRUN chmod -R g+rwX /build/resources\n\nFROM docker.io/httpd:2.4.43-alpine AS registry\nRUN apk add --no-cache bash && \\\n    # Allow htaccess\n    sed -i 's|    AllowOverride None|    AllowOverride All|' /usr/local/apache2/conf/httpd.conf && \\\n    sed -i 's|Listen 80|Listen 8080|' /usr/local/apache2/conf/httpd.conf && \\\n    mkdir -m 777 /usr/local/apache2/htdocs/devfiles && \\\n    mkdir -p /var/www && ln -s /usr/local/apache2/htdocs /var/www/html && \\\n    chmod -R g+rwX /usr/local/apache2 && \\\n    echo \"ServerName localhost\" >> /usr/local/apache2/conf/httpd.conf && \\\n    apk add --no-cache coreutils\nCOPY .htaccess README.md /usr/local/apache2/htdocs/\nCOPY --from=builder /build/devfiles /usr/local/apache2/htdocs/devfiles\nCOPY --from=builder /build/resources /usr/local/apache2/htdocs/resources\nCOPY ./images /usr/local/apache2/htdocs/images\nCOPY ./build/dockerfiles/entrypoint.sh /usr/bin/\nENTRYPOINT [\"/usr/bin/entrypoint.sh\"]\nCMD [\"httpd-foreground\"]\n\n# Offline registry: download project zips and place them in /build/resources\nFROM builder AS offline-builder\nRUN ./cache_projects.sh devfiles resources && \\\n    ./cache_images.sh devfiles resources && \\\n    chmod -R g+rwX /build\n\n# Offline registry: copy updated devfile.yamls and cached projects\nFROM registry AS offline-registry\nCOPY --from=offline-builder /build/devfiles /usr/local/apache2/htdocs/devfiles\nCOPY --from=offline-builder /build/resources /usr/local/apache2/htdocs/resources\n"
}