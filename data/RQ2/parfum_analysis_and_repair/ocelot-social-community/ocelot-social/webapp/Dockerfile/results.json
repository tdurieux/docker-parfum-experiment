{
  "startTime": 1674251037089,
  "endTime": 1674251037760,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##################################################################################\n# BASE (Is pushed to DockerHub for rebranding) ###################################\n##################################################################################\nFROM node:12.19.0-alpine3.10 as base\n\n# ENVs\n## DOCKER_WORKDIR would be a classical ARG, but that is not multi layer persistent - shame\nENV DOCKER_WORKDIR=\"/app\"\n## We Cannot do `$(date -u +'%Y-%m-%dT%H:%M:%SZ')` here so we use unix timestamp=0\nARG BBUILD_DATE=\"1970-01-01T00:00:00.00Z\"\nENV BUILD_DATE=$BBUILD_DATE\n## We cannot do $(yarn run version)-${BUILD_NUMBER} here so we default to 0.0.0-0\nARG BBUILD_VERSION=\"0.0.0-0\"\nENV BUILD_VERSION=$BBUILD_VERSION\n## We cannot do `$(git rev-parse --short HEAD)` here so we default to 0000000\nARG BBUILD_COMMIT=\"0000000\"\nENV BUILD_COMMIT=$BBUILD_COMMIT\n## SET NODE_ENV\nENV NODE_ENV=\"production\"\n## App relevant Envs\nENV PORT=\"3000\"\n\n# Labels\nLABEL org.label-schema.build-date=\"${BUILD_DATE}\"\nLABEL org.label-schema.name=\"ocelot.social:backend\"\nLABEL org.label-schema.description=\"Web Frontend of the Social Network Software ocelot.social\"\nLABEL org.label-schema.usage=\"https://github.com/Ocelot-Social-Community/Ocelot-Social/blob/master/README.md\"\nLABEL org.label-schema.url=\"https://ocelot.social\"\nLABEL org.label-schema.vcs-url=\"https://github.com/Ocelot-Social-Community/Ocelot-Social/tree/master/backend\"\nLABEL org.label-schema.vcs-ref=\"${BUILD_COMMIT}\"\nLABEL org.label-schema.vendor=\"ocelot.social Community\"\nLABEL org.label-schema.version=\"${BUILD_VERSION}\"\nLABEL org.label-schema.schema-version=\"1.0\"\nLABEL maintainer=\"devops@ocelot.social\"\n\n# Install Additional Software\n## install: git\nRUN apk --no-cache add git\n\n# Settings\n## Expose Container Port\nEXPOSE ${PORT}\n\n## Workdir\nRUN mkdir -p ${DOCKER_WORKDIR}\nWORKDIR ${DOCKER_WORKDIR}\n\n##################################################################################\n# DEVELOPMENT (Connected to the local environment, to reload on demand) ##########\n##################################################################################\nFROM base as development\n\n# We don't need to copy or build anything since we gonna bind to the\n# local filesystem which will need a rebuild anyway\n\n# Run command\n# (for development we need to execute yarn install since the\n#  node_modules are on another volume and need updating)\nCMD /bin/sh -c \"yarn install && yarn run dev\"\n\n##################################################################################\n# CODE (Does contain all code files and is pushed to DockerHub for rebranding) ###\n##################################################################################\nFROM base as code\n\n# copy everything, but do not build.\nCOPY . .\n\n##################################################################################\n# BUILD (Does contain all files and the compilate and is therefore bloated) ######\n##################################################################################\nFROM code as build\n\n# yarn install\nRUN yarn install --production=false --frozen-lockfile --non-interactive && yarn cache clean;\n# yarn build\nRUN yarn run build\n\n##################################################################################\n# TEST ###########################################################################\n##################################################################################\nFROM build as test\n\n# Run command\nCMD /bin/sh -c \"yarn run dev\"\n\n##################################################################################\n# PRODUCTION (Does contain only \"binary\"- and static-files to reduce image size) #\n##################################################################################\nFROM base as production\n\n# TODO - do all copying with one COPY command to have one layer\n# Copy \"binary\"-files from build image\nCOPY --from=build ${DOCKER_WORKDIR}/.nuxt ./.nuxt\nCOPY --from=build ${DOCKER_WORKDIR}/node_modules ./node_modules\nCOPY --from=build ${DOCKER_WORKDIR}/nuxt.config.js ./nuxt.config.js\n# Copy package.json for script definitions (lock file should not be needed)\nCOPY --from=build ${DOCKER_WORKDIR}/package.json ./package.json\n\n# Run command\nCMD /bin/sh -c \"yarn run start\"\n"
}