{
  "startTime": 1674255289134,
  "endTime": 1674255290906,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 245,
        "lineEnd": 245,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#FROM ubuntu:bionic\nFROM ubuntu:20.04\n\nARG PYTHON_VERSION=3.7\n\nLABEL maintainer=\"jiri.borovec@fel.cvut.cz\"\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# for installing tzdata see: https://stackoverflow.com/a/58264927/4521646\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update -qq --fix-missing && \\\n    apt-get install -y --no-install-recommends software-properties-common && \\\n    add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update -qq --fix-missing && \\\n    apt-get install -y --no-install-recommends \\\n        python${PYTHON_VERSION} \\\n        python${PYTHON_VERSION}-dev \\\n        $( [ ${PYTHON_VERSION%%.*} -ge 3 ] && echo \"python${PYTHON_VERSION%%.*}-distutils\" ) \\\n        python${PYTHON_VERSION%%.*}-tk \\\n        build-essential \\\n        cmake \\\n        wget \\\n        unzip \\\n        git \\\n        ca-certificates \\\n    && \\\n\n# Install python dependencies\n    wget https://bootstrap.pypa.io/get-pip.py --progress=bar:force:noscroll --no-check-certificate && \\\n    python${PYTHON_VERSION} get-pip.py && \\\n    rm get-pip.py && \\\n\n# Set the default python and install PIP packages\n    update-alternatives --install /usr/bin/python${PYTHON_VERSION%%.*} python${PYTHON_VERSION%%.*} /usr/bin/python${PYTHON_VERSION} 1 && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VERSION} 1 && \\\n\n# Disable cache\n    pip config set global.cache-dir false && \\\n    pip install --no-cache-dir \"pip>20.1\" -U && \\\n\n# Cleaning\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV BIRL_APPs_PATH=\"/BIRL/Applications\"\n\nRUN mkdir -p $BIRL_APPs_PATH\n\nRUN \\\n    cd $BIRL_APPs_PATH && \\\n# add Fiji - needed for RVSS, bUnwarpJ\n    # wget https://downloads.imagej.net/fiji/latest/fiji-linux64.zip --progress=bar:force:noscroll && \\\n    wget https://downloads.imagej.net/fiji/archive/20200708-1553/fiji-linux64.zip --progress=bar:force:noscroll && \\\n    unzip -q fiji-linux64.zip && \\\n    rm fiji-linux64.zip && \\\n    # https://imagej.nih.gov/ij/docs/guide/146-18.html\n    Fiji.app/ImageJ-linux64 -eval \"return getVersion();\"\n\nENV ANTs_VERSION=\"2.3.4\"\n\nRUN \\\n    apt-get update -qq && \\\n    apt-get install -y --no-install-recommends \\\n        zlib1g-dev \\\n    && \\\n    cd $BIRL_APPs_PATH && \\\n# Compile ANTs\n    wget https://github.com/ANTsX/ANTs/archive/v$ANTs_VERSION.zip --progress=bar:force:noscroll && \\\n    unzip -q v$ANTs_VERSION.zip && \\\n    rm v$ANTs_VERSION.zip && \\\n    mv ANTs-$ANTs_VERSION ANTs && \\\n    mkdir antsbin && \\\n    cd antsbin && \\\n    cmake ../ANTs \\\n        -D BUILD_ALL_ANTS_APPS=OFF \\\n        -D CMAKE_BUILD_TYPE=Release \\\n        -D BUILD_SHARED_LIBS=OFF \\\n        -D BUILD_TESTING=OFF \\\n        -D RUN_SHORT_TESTS=OFF \\\n        -D RUN_LONG_TESTS=OFF \\\n    && \\\n    make -j$(nproc) ANTS && \\\n# remove source folder\n    rm -rf $BIRL_APPs_PATH/ANTs && \\\n# clean some remaining in antsbin\n    mkdir $BIRL_APPs_PATH/ANTs-regist && \\\n    cd $BIRL_APPs_PATH/antsbin/ANTS-build/Examples/ && \\\n    # mv simpleSynRegistration $BIRL_APPs_PATH/ANTs-regist/ && \\\n    mv antsRegistration $BIRL_APPs_PATH/ANTs-regist/ && \\\n    mv antsApplyTransforms $BIRL_APPs_PATH/ANTs-regist/ && \\\n    mv antsApplyTransformsToPoints $BIRL_APPs_PATH/ANTs-regist/ && \\\n    rm -rf $BIRL_APPs_PATH/antsbin && \\\n# clean up after build\n    apt-get remove -y \\\n        zlib1g-dev \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n# try to run ANTs\n    $BIRL_APPs_PATH/ANTs-regist/antsRegistration --help\n\nENV ANTSPY_VERSION=\"0.2.5\"\n\nRUN \\\n    apt-get update -qq && \\\n    apt-get install -y --no-install-recommends \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        gfortran \\\n    && \\\n# install ANTsPy\n    # requirements: https://github.com/ANTsX/ANTsPy/blob/v${ANTSPY_VERSION}/requirements.txt\n    pip install --no-cache-dir https://github.com/ANTsX/ANTsPy/archive/v${ANTSPY_VERSION}.zip && \\\n# clean up after build\n    apt-get remove -y \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        gfortran \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n# test run\n    python -c \"import ants ; print(ants.__version__)\"\n\nENV ELASTIX_VERSION=\"5.0.0\"\n\nRUN \\\n# add Elastix\n    cd $BIRL_APPs_PATH && \\\n    wget https://github.com/SuperElastix/elastix/releases/download/${ELASTIX_VERSION}/elastix-${ELASTIX_VERSION}-Linux.tar.bz2 --progress=bar:force:noscroll && \\\n    mkdir elastix && \\\n    tar xjf elastix-${ELASTIX_VERSION}-Linux.tar.bz2 --directory=elastix && \\\n    rm elastix-${ELASTIX_VERSION}-Linux.tar.bz2 && \\\n    export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$BIRL_APPs_PATH/elastix/lib/\" && \\\n# Try run elastix\n    $BIRL_APPs_PATH/elastix/bin/elastix --help\n\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$BIRL_APPs_PATH/elastix/lib/\"\n\nRUN \\\n    apt-get update -qq && \\\n    apt-get install -y --no-install-recommends \\\n        libtbb-dev \\\n        libboost-all-dev \\\n    && \\\n    cd $BIRL_APPs_PATH && \\\n# compile the DROP2\n    git clone https://github.com/biomedia-mira/drop2.git && \\\n    cd drop2 && \\\n    # bash build.sh && \\\n\n# This is little editted internal script build.sh\n    TEMP_PATH_DROP=$(pwd) && \\\n    # prepare 3-party libs\n    export THIRD_PARTY_DIR=$TEMP_PATH_DROP/3rdParty && \\\n    mkdir $THIRD_PARTY_DIR && \\\n    DROP_EIGEN_VERSION=\"3.3.7\" && \\\n    DROP_ITK_VERSION=\"5.0.0\" && \\\n\n    # get Eigen\n    cd $THIRD_PARTY_DIR && \\\n    wget https://gitlab.com/libeigen/eigen/-/archive/${DROP_EIGEN_VERSION}/eigen-${DROP_EIGEN_VERSION}.tar.gz --progress=bar:force:noscroll && \\\n    mkdir eigen && \\\n    tar xf eigen-${DROP_EIGEN_VERSION}.tar.gz -C eigen --strip-components=1 && \\\n\n    # download and install ITK\n    cd $THIRD_PARTY_DIR && \\\n    wget https://sourceforge.net/projects/itk/files/itk/${DROP_ITK_VERSION%.*}/InsightToolkit-${DROP_ITK_VERSION}.tar.gz --progress=bar:force:noscroll && \\\n    tar xf InsightToolkit-${DROP_ITK_VERSION}.tar.gz && \\\n    cd InsightToolkit-${DROP_ITK_VERSION} && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -D BUILD_EXAMPLES:BOOL=OFF \\\n        -D BUILD_TESTING:BOOL=OFF \\\n        -D CMAKE_INSTALL_PREFIX=$THIRD_PARTY_DIR/itk \\\n       .. \\\n    && \\\n    make -j$(nproc) && \\\n    make install && \\\n\n    # building the\n    cd $TEMP_PATH_DROP && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. && \\\n    make -j$(nproc) && \\\n    unset THIRD_PARTY_DIR && \\\n\n# Cleaning the build folder\n    mkdir $BIRL_APPs_PATH/DROP2 && \\\n    mv $BIRL_APPs_PATH/drop2/build/drop/apps/dropreg/* $BIRL_APPs_PATH/DROP2 && \\\n    rm -rf $TEMP_PATH_DROP && \\\n# clean up after build\n    apt-get remove -y \\\n        libtbb-dev \\\n        libboost-all-dev \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n# try to run DROP2\n    $BIRL_APPs_PATH/DROP2/dropreg --help && rm eigen-${DROP_EIGEN_VERSION}.tar.gz\n\nRUN \\\n    apt-get update -qq && \\\n    apt-get install -y --no-install-recommends \\\n        r-base-core \\\n        r-base-dev \\\n        #libfftw3-dev \\\n        libtiff5-dev \\\n        libcurl4-gnutls-dev \\\n        libxml2-dev \\\n        libssl-dev \\\n        libgit2-dev \\\n    && \\\n# install RNiftyReg\n    R -e 'install.packages(c(\"png\", \"jpeg\", \"OpenImageR\", \"devtools\"))' && \\\n    R -e 'devtools::install_github(\"jonclayden/RNiftyReg\")' && \\\n# clean up abter build\n    apt-get remove -y \\\n        r-base-dev \\\n        #libfftw3-dev \\\n        libtiff5-dev \\\n        libcurl4-gnutls-dev \\\n        libxml2-dev \\\n        libssl-dev \\\n        libgit2-dev \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n# try to run RNiftyReg\n    R -e 'library(RNiftyReg)'\n\nCOPY ./ /BIRL/\n\nRUN \\\n    apt-get update -qq && \\\n    apt-get install -y --no-install-recommends \\\n        openslide-tools \\\n    && \\\n# Install BIRL\n    # v46 crashes openslide-python install\n    pip install --no-cache-dir \"setuptools<46\" -U && \\\n    pip install ./BIRL --no-cache-dir && \\\n    python -c \"import birl ; print(birl.__version__)\" && \\\n# Cleaning\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN \\\n    apt-get update -qq && \\\n    apt-get install -y --no-install-recommends \\\n        tree \\\n    && \\\n    ls -l $BIRL_APPs_PATH && \\\n    cd BIRL && \\\n    mkdir results && \\\n\n# Run all experimenst with minimal dataset\n\n    python bm_experiments/bm_bUnwarpJ.py \\\n        -t ./data-images/pairs-imgs-lnds_histol.csv \\\n        -d ./data-images \\\n        -o ./results \\\n        -Fiji $BIRL_APPs_PATH/Fiji.app/ImageJ-linux64 \\\n        -cfg ./configs/ImageJ_bUnwarpJ_histol.yaml \\\n        --unique \\\n    && \\\n\n    python bm_experiments/bm_RVSS.py \\\n        -t ./data-images/pairs-imgs-lnds_histol.csv \\\n        -d ./data-images \\\n        -o ./results \\\n        -Fiji $BIRL_APPs_PATH/Fiji.app/ImageJ-linux64 \\\n        -cfg ./configs/ImageJ_RVSS_histol.yaml \\\n        --unique \\\n    && \\\n\n    python bm_experiments/bm_ANTs.py \\\n        -t ./data-images/pairs-imgs-lnds_histol.csv \\\n        -d ./data-images \\\n        -o ./results \\\n        --path_ANTs $BIRL_APPs_PATH/ANTs-regist \\\n        --path_config ./configs/ANTs_SyN.txt \\\n        --unique \\\n    && \\\n\n    python bm_experiments/bm_ANTsPy.py \\\n        -t ./data-images/pairs-imgs-lnds_histol.csv \\\n        -d ./data-images \\\n        -o ./results \\\n        -py python3 \\\n        -script ./scripts/Python/run_ANTsPy.py \\\n        --unique \\\n    && \\\n\n    python bm_experiments/bm_elastix.py \\\n        -t ./data-images/pairs-imgs-lnds_histol.csv \\\n        -d ./data-images \\\n        -o ./results \\\n        -elastix $BIRL_APPs_PATH/elastix/bin \\\n        -cfg ./configs/elastix_affine.txt \\\n        --unique \\\n    && \\\n\n    python bm_experiments/bm_DROP2.py \\\n        -t ./data-images/pairs-imgs-lnds_histol.csv \\\n        -d ./data-images \\\n        -o ./results \\\n        -DROP $BIRL_APPs_PATH/DROP2/dropreg \\\n        --path_config ./configs/DROP2.txt \\\n        --unique \\\n    && \\\n\n    python bm_experiments/bm_rNiftyReg.py \\\n        -t ./data-images/pairs-imgs-lnds_histol.csv \\\n        -d ./data-images \\\n        -o ./results \\\n        -R Rscript \\\n        -script ./scripts/Rscript/RNiftyReg_linear.r \\\n        --unique \\\n    && \\\n\n# see and clean resuls\n    tree -l ./results && \\\n    rm -rf ./results && \\\n    apt-get remove -y \\\n        tree \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n"
}