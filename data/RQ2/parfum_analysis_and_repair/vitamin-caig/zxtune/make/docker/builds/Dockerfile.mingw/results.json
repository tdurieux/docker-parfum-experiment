{
  "startTime": 1674251146032,
  "endTime": 1674251147468,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 29,
        "lineEnd": 38,
        "columnStart": 5,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM archlinux/base:latest\nARG cores=12\nRUN yes | pacman -Syu sudo awk fakeroot file make git zip python xz \\\n      binutils gcc mingw-w64-gcc diffutils patch wget cmake pkg-config which && \\\n    pacman-key --init && pacman-key --populate archlinux && \\\n    useradd -m -s /bin/bash -U -G wheel -d /build build && \\\n    echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && \\\n    echo -e 'MAKEFLAGS=\"-j${cores}\"\\nSRCDEST=/build/sources\\n' >> /etc/makepkg.conf && \\\n    rm -Rf /var/cache/pacman\n\nUSER build\nWORKDIR /build\n\nENV prebuilt=/build/prebuilt execprefix=x86_64-w64-mingw32-\n\nENV boost=1.77.0\nRUN bash -c \"wget -q https://boostorg.jfrog.io/artifactory/main/release/${boost}/source/boost_\\${boost//./_}.tar.bz2 -O - | tar -xj\" && \\\n    cd boost_* && ./bootstrap.sh && \\\n    echo \"using gcc : windows : ${execprefix}g++ ;\" > tools/build/src/user-config.jam && \\\n    ./b2 toolset=gcc-windows link=static threading=multi target-os=windows variant=release --layout=system \\\n      address-model=64 cxxflags=-mno-ms-bitfields cxxflags=-mmmx cxxflags=-msse cxxflags=-msse2 cxxflags=-ffunction-sections cxxflags=-fdata-sections \\\n      --with-filesystem --with-locale --with-program_options --with-system -j${cores} \\\n      --includedir=${prebuilt}/boost-${boost}/include --libdir=${prebuilt}/boost-${boost}-mingw-x86_64/lib install && \\\n    cd .. && rm -Rf boost_*\n\nENV qt=5.15.2\nRUN bash -c \"wget -q http://download.qt.io/archive/qt/${qt%.*}/${qt}/single/qt-everywhere-src-${qt}.tar.xz -O - | tar -xJ\" && \\\n    cd qt-everywhere* && \\\n     sed -i '/type_traits/a #  include <limits>' qtbase/src/corelib/global/qglobal.h && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -v -xplatform win32-g++ -device-option CROSS_COMPILE=${execprefix} -prefix ${prebuilt}/qt-${qt}-mingw-x86_64 -release -opensource -static -confirm-license -no-rpath \\\n      -no-opengl -no-openvg -no-sql-sqlite \\\n      -no-ico -no-gif -no-libjpeg -no-openssl -no-cups -no-pch -no-glib \\\n      -no-feature-testlib \\\n      -qt-pcre -qt-zlib -qt-libpng \\\n      -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtlocation \\\n      -skip qtlottie -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquick3d -skip qtquickcontrols -skip qtquickcontrols2 -skip qtquicktimeline -skip qtremoteobjects \\\n      -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtsvg -skip qttranslations -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel \\\n      -skip qtwebengine -skip qtwebglplugin -skip qtwebsockets -skip qtwebview -skip qtxmlpatterns \\\n      -make libs && \\\n     make -j${cores} install && \\\n     cd .. && rm -Rf qt-everywhere*\n\nRUN mkdir zxtune && sudo chmod o+w zxtune && cd zxtune && \\\n    git init && \\\n    git remote add --tags origin https://bitbucket.org/zxtune/zxtune.git && \\\n    echo -e \"platform=mingw\\narch=x86_64\\ntools.python=python3\\nmingw.execprefix=${execprefix}\\n\" \\\n      \"prebuilt.dir=${prebuilt}\\nboost.version=${boost}\\nqt.version=${qt}\\n\"\\\n      \"host=linux\\nembed_file_cmd=cat \\$(embedded_files) >> \\$@\\nmakepkg_cmd=(cd \\$(1) && zip -9rD \\$(CURDIR)/\\$(2) .)\\npkg_suffix=zip\\n\" \\\n      \"qt.plugins=QWindowsIntegrationPlugin QWindowsVistaStylePlugin\\n\" \\\n      \"libraries.qt.system.mingw=qwindows qwindowsvistastyle qtfreetype qtlibpng qtpcre2 qtharfbuzz userenv netapi32 version winmm\" \\\n        \"oleaut32 wtsapi32 dwmapi uxtheme\\n\" \\\n      \"libraries.qt.mingw=FontDatabaseSupport EventDispatcherSupport ThemeSupport WindowsUIAutomationSupport\\n\" > variables.mak\n\nWORKDIR /build/zxtune\nCOPY entrypoint.sh .\nENTRYPOINT [\"./entrypoint.sh\"]\nCMD [\"package\", \"-C\", \"apps/bundle\"]\n"
}