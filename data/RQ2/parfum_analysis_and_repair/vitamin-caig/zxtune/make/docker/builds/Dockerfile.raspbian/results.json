{
  "startTime": 1674220282272,
  "endTime": 1674220284203,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 57,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 104
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch-slim\nARG cores=12\n#Do not remove /var/lib/apt/lists due to later download\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends wget ca-certificates gnupg2 && \\\n    (wget https://archive.raspbian.org/raspbian.public.key -O - | apt-key add - ) && \\\n    echo \"deb [arch=amd64] http://deb.debian.org/debian stretch main\\ndeb [arch=armhf] http://mirrordirector.raspbian.org/raspbian/ stretch main rpi\" > /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends xz-utils bzip2 git make zip g++ python3-minimal sudo nano && \\\n    useradd -m -s /bin/bash -U -G users,sudo -d /build build && \\\n    echo '%sudo ALL = (root) NOPASSWD: ALL' >> /etc/sudoers && rm -rf /var/lib/apt/lists/*;\n\nUSER build\nWORKDIR /build\n\nENV prebuilt=/build/prebuilt toolchains=/build/toolchains\n\n# Toolchain from https://github.com/abhiTronix/raspberry-pi-cross-compilers\nENV gcc=10.2.0\nRUN mkdir -p ${toolchains} && cd ${toolchains} && \\\n    (wget -q https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/Raspberry%20Pi%20GCC%20Cross-Compiler%20Toolchains/Stretch/GCC%20${gcc}/Raspberry%20Pi%201%2C%20Zero/cross-gcc-${gcc}-pi_0-1.tar.gz -O - | tar -xz) && \\\n    mv cross-pi-gcc* armhf-linux\n\nENV boost=1.77.0\nRUN bash -c \"wget -q https://boostorg.jfrog.io/artifactory/main/release/${boost}/source/boost_\\${boost//./_}.tar.bz2 -O - | tar -xj\" && \\\n    cd boost_* && ./bootstrap.sh && \\\n    echo \"using gcc : ${gcc} : ${toolchains}/armhf-linux/bin/arm-linux-gnueabihf-g++  ;\" > tools/build/src/user-config.jam && \\\n    ./b2 toolset=gcc-${gcc} link=static threading=multi target-os=linux variant=release --layout=system \\\n      cflags=\"-march=armv6 -mfpu=vfp -mfloat-abi=hard -ffunction-sections -fdata-sections\" \\\n      --with-filesystem --with-locale --with-program_options --with-system -j${cores} \\\n      --includedir=${prebuilt}/boost-${boost}/include --libdir=${prebuilt}/boost-${boost}-linux-armhf/lib install && \\\n    cd .. && rm -Rf boost_*\n\n# Cross-root\nENV crossroot=${prebuilt}/root-linux-armhf\nRUN mkdir -p ${crossroot} && cd ${crossroot} && \\\n    bash -c \"apt-get download {libxcb{1,-icccm4,-image0,-keysyms1,-randr0,-render0,-render-util0,-shape0,-shm0,-util0,-xfixes0,-xinerama0}{,-dev},libxcb-{sync,xkb}{1,-dev},\\\nlibx11-dev,lib{fontconfig1,freetype6}{,-dev},libxkbcommon{0,-dev},libxkbcommon-x11-{0,dev},lib{bsd0,c6,expat1,xau6,xdmcp6},\\\nlibpng{16-16,-dev},\\\nzlib1g{,-dev},\\\nlib{asound2,pulse}-dev}:armhf\" && \\\n    (for pkg in *.deb ; do dpkg -x ${pkg} . ; done) && \\\n    rm *.deb\n    #echo \"cd ${prebuilt}/root-linux-armhf && apt-get download \\$1:armhf && dpkg -x \\$1_*.deb . && echo \\$1 >> packages.lst\" > add_lib.sh\n\nENV qt=5.15.2\nRUN bash -c \"wget -q http://download.qt.io/archive/qt/${qt%.*}/${qt}/single/qt-everywhere-src-${qt}.tar.xz -O - | tar -xJ\" && \\\n    cd qt-everywhere* && \\\n    (cd qtbase/mkspecs/devices/linux-rasp-pi-g++ && \\\n      echo \"include(../common/linux_device_pre.conf)\\n\"\\\n        \"QMAKE_CFLAGS = -march=armv6 -mfpu=vfp\\n\"\\\n        \"DISTRO_OPTS += hard-float\\n\"\\\n        \"EXTRA_INCLUDEPATH += \\$\\${CROSS_ROOT}/usr/include\\n\"\\\n        \"EXTRA_LIBDIR += \\$\\${CROSS_ROOT}/usr/lib/arm-linux-gnueabihf\\n\"\\\n        \"QMAKE_LFLAGS=-Wl,-rpath-link,\\$\\${CROSS_ROOT}/usr/lib/arm-linux-gnueabihf -Wl,-rpath-link,\\$\\${CROSS_ROOT}/lib/arm-linux-gnueabihf\\n\"\\\n        \"include(../common/linux_arm_device_post.conf)\\n\"\\\n        \"load(qt_config)\\n\" > qmake.conf) && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -v -device linux-rasp-pi-g++ -prefix ${prebuilt}/qt-${qt}-linux-armhf -device-option CROSS_COMPILE=${toolchains}/armhf-linux/bin/arm-linux-gnueabihf- -device-option CROSS_ROOT=${prebuilt}/root-linux-armhf \\\n      -release -opensource -static -confirm-license \\\n      -no-opengl -no-openvg -no-sql-sqlite -no-rpath \\\n      -no-ico -no-gif -no-libjpeg -no-openssl -no-cups -no-pch -no-glib \\\n      -no-directfb -no-evdev -no-tslib -no-linuxfb -no-kms -qpa xcb \\\n      -no-feature-testlib \\\n      -qt-pcre -system-zlib -system-libpng -fontconfig \\\n      -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtlocation \\\n      -skip qtlottie -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquick3d -skip qtquickcontrols -skip qtquickcontrols2 -skip qtquicktimeline -skip qtremoteobjects \\\n      -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtsvg -skip qttranslations -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel \\\n      -skip qtwebengine -skip qtwebglplugin -skip qtwebsockets -skip qtwebview -skip qtwinextras -skip qtxmlpatterns \\\n      -make libs && \\\n    make -j${cores} install && \\\n    cd .. && rm -Rf qt-everywhere*\n\n#Sources. Add special library dir for libz\nRUN mkdir -p /build/zxtune && cd /build/zxtune && \\\n    git init && \\\n    git remote add --tags origin https://bitbucket.org/zxtune/zxtune.git && \\\n    echo \"platform=linux\\narch=armhf\\npackaging?=any\\ntools.python=python3\\n\"\\\n         \"prebuilt.dir=${prebuilt}\\ntoolchains.root=${toolchains}\\nboost.version=${boost}\\nqt.version=${qt}\\n\"\\\n         \"system.zlib=1\\nlibraries.dirs.linux+=\\$(linux.armhf.crossroot)/usr/lib/arm-linux-gnueabihf\\n\"\\\n         \"qt.plugins=QXcbIntegrationPlugin\\nlibraries.qt.system.linux=qxcb qtpcre2 png16 qtharfbuzz fontconfig freetype\"\\\n           \"xcb xcb-icccm xcb-image xcb-keysyms xcb-randr xcb-render xcb-render-util xcb-shape xcb-shm xcb-sync xcb-xfixes xcb-xinerama xcb-xkb xkbcommon xkbcommon-x11\\n\"\\\n         \"libraries.qt.linux=XcbQpa XkbCommonSupport ThemeSupport DBus EdidSupport FontDatabaseSupport ServiceSupport\" > variables.mak\n\nWORKDIR /build/zxtune\nCOPY entrypoint.sh .\nENTRYPOINT [\"./entrypoint.sh\"]\nCMD [\"package\", \"-C\", \"apps/bundle\"]\n"
}