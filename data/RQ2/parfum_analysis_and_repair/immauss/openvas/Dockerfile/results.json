{
  "startTime": 1674254995540,
  "endTime": 1674254996236,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 91
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Stage 0:\n# Start with ovasbase with running dependancies installed.\nFROM immauss/ovasbase:mc-pg13\n\n# Ensure apt doesn't ask any questions\nENV DEBIAN_FRONTEND=noninteractive\nENV LANG=C.UTF-8\n\n# Build/install gvm (by default, everything installs in /usr/local)\nRUN mkdir /build.d\nCOPY build.rc /\nCOPY package-list-build /\nCOPY build.d/build-prereqs.sh /build.d/\nRUN bash /build.d/build-prereqs.sh\nCOPY build.d/update-certs.sh /build.d/\nRUN bash /build.d/update-certs.sh\nCOPY build.d/gvm-libs.sh /build.d/\nRUN bash /build.d/gvm-libs.sh\nCOPY build.d/openvas-smb.sh /build.d/\nRUN bash /build.d/openvas-smb.sh\nCOPY build.d/gvmd.sh /build.d/\nRUN bash /build.d/gvmd.sh\nCOPY build.d/openvas-scanner.sh /build.d/\nRUN bash /build.d/openvas-scanner.sh\nCOPY build.d/gsa.sh /build.d/\nRUN bash /build.d/gsa.sh\n#COPY build.d/ospd.sh /build.d/\n#RUN bash /build.d/ospd.sh\nCOPY build.d/ospd-openvas.sh /build.d/\nRUN bash /build.d/ospd-openvas.sh\nCOPY build.d/gvm-tool.sh /build.d/\nRUN bash /build.d/gvm-tool.sh\nCOPY build.d/links.sh /build.d/\nRUN bash /build.d/links.sh\n\n# Stage 1: Start again with the ovasebase. Dependancies already installed\nFROM immauss/ovasbase:mc-pg13\nLABEL maintainer=\"scott@immauss.com\" \\\n      version=\"21.04.09\" \\\n      url=\"https://hub.docker.com/immauss/openvas\" \\\n      source=\"https://github.com/immauss/openvas\"\n\n\n#EXPOSE 9392\nENV LANG=C.UTF-8\n# Copy the install from stage 0\nCOPY --from=0 etc/gvm/pwpolicy.conf /usr/local/etc/gvm/pwpolicy.conf\nCOPY --from=0 etc/logrotate.d/gvmd /etc/logrotate.d/gvmd\nCOPY --from=0 lib/systemd/system /lib/systemd/system\nCOPY --from=0 usr/local/bin /usr/local/bin\nCOPY --from=0 usr/local/include /usr/local/include\nCOPY --from=0 usr/local/lib /usr/local/lib\nCOPY --from=0 usr/local/sbin /usr/local/sbin\nCOPY --from=0 usr/local/share /usr/local/share\nCOPY confs/gvmd_log.conf /usr/local/etc/gvm/\nCOPY confs/openvas_log.conf /usr/local/etc/openvas/\nCOPY build.d/links.sh /\nRUN bash /links.sh\n# Split these off in a new layer makes refresh builds faster.\nCOPY update.ts /\nCOPY build.rc /gvm-versions\nRUN curl -f -L --url https://www.immauss.com/openvas/base.sql.xz -o /usr/lib/base.sql.xz && \\\n    curl -f -L --url https://www.immauss.com/openvas/var-lib.tar.xz -o /usr/lib/var-lib.tar.xz\n# Make sure we didn't just pull zero length files\nRUN bash -c \" if [ $(ls -l /usr/lib/base.sql.xz | awk '{print $5}') -lt 1200 ]; then exit 1; fi \" && \\\n    bash -c \" if [ $(ls -l /usr/lib/var-lib.tar.xz | awk '{print $5}') -lt 1200 ]; then exit 1; fi \"\n#RUN mkdir /scripts\nCOPY scripts/* /scripts/\n# Healthcheck needs be an on image script that will know what service is running and check it.\n# Current image function stored in /usr/local/etc/running-as\nHEALTHCHECK --interval=60s --start-period=300s --timeout=3s \\\n  CMD /scripts/healthcheck.sh || exit 1\nENTRYPOINT [ \"/scripts/start.sh\" ]\n"
}