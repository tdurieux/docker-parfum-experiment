{
  "startTime": 1674216076664,
  "endTime": 1674216078260,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 128
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 142
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 99,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ================================================================\n# REFERENCES:\n# - https://github.com/bitnami/bitnami-docker-postgresql/blob/967cb8448edd4e5571a36cc65e45d96f630d6968/11/debian-11/Dockerfile\n# - https://github.com/docker-library/postgres/blob/ba4abaac0739e6393a0ff3ecec2fa7b5ecb001a0/11/alpine/Dockerfile\n# ================================================================\n\n# ================================\n# build `nss_wrapper` from source\n# ================================\nFROM alpine:3.16 as nss-wrapper-builder\n\n# args -- software versions\nARG NSS_WRAPPER_VERSION=1.1.11\n\n# install -- nss_wrapper build dependanices\nRUN apk --no-cache add \\\n    bash \\\n    cmake \\\n    curl \\\n    g++ \\\n    gcc \\\n    gnupg \\\n    libc-dev \\\n    make \\\n    musl-nscd-dev\n\n# build and install postgres\nRUN curl -f -sSL \"https://ftp.samba.org/pub/cwrap/nss_wrapper-${NSS_WRAPPER_VERSION}.tar.gz\" -o /tmp/nss_wrapper.tar.gz \\\n && curl -f -sSL \"https://ftp.samba.org/pub/cwrap/nss_wrapper-${NSS_WRAPPER_VERSION}.tar.gz.asc\" -o /tmp/nss_wrapper.tar.gz.asc \\\n && gpg --batch -q --keyserver keyserver.ubuntu.com --receive-keys 7EE0FC4DCC014E3D \\\n && gpg --batch -q --verify /tmp/nss_wrapper.tar.gz.asc /tmp/nss_wrapper.tar.gz \\\n && rm /tmp/nss_wrapper.tar.gz.asc \\\n && mkdir /tmp/nss_wrapper \\\n && tar -xf /tmp/nss_wrapper.tar.gz -C /tmp/nss_wrapper --strip-components=1 \\\n && rm /tmp/nss_wrapper.tar.gz \\\n && cd /tmp/nss_wrapper \\\n && mkdir obj \\\n && cd obj \\\n && cmake -DCMAKE_INSTALL_PREFIX=/opt/bitnami/common .. \\\n && make \\\n && make install\n\n# ================================\n# build `postgresql` from source\n# ================================\nFROM alpine:3.16 as postgres-builder\n\n# args -- software versions\nARG PG_VERSION=11.16\n# pgaudit versions 1.3.X are for postgres 11 (https://github.com/pgaudit/pgaudit#postgresql-version-compatibility)\nARG PGAUDIT_VERSION=1.3.4\n\n# use \"en_US.UTF-8\" locale so postgres will be UTF-8 enabled by default\n# NOTE: alpine doesn't require explicit locale-file generation\nENV LANG=en_US.UTF-8\n\n# install -- postgres build dependanices\nRUN apk --no-cache add \\\n    bash \\\n    bison \\\n    clang \\\n    coreutils \\\n    curl \\\n    dpkg-dev dpkg \\\n    flex \\\n    g++ \\\n    gcc \\\n    gettext \\\n    icu-dev \\\n    krb5-dev \\\n    libc-dev \\\n    libedit-dev \\\n    libxml2-dev \\\n    libxslt-dev \\\n    linux-headers \\\n    llvm-dev \\\n    make \\\n    musl-libintl \\\n    openldap-dev \\\n    openssl-dev \\\n    perl-dev \\\n    perl-ipc-run \\\n    perl-utils \\\n    python3-dev \\\n    tcl-dev \\\n    util-linux-dev \\\n    zlib-dev\n\n# build and install postgres\nRUN curl -f -sSL \"https://ftp.postgresql.org/pub/source/v${PG_VERSION}/postgresql-${PG_VERSION}.tar.bz2\" -o /tmp/postgresql.tar.bz2 \\\n && curl -f -sSL \"https://ftp.postgresql.org/pub/source/v${PG_VERSION}/postgresql-${PG_VERSION}.tar.bz2.sha256\" -o /tmp/postgresql.tar.bz2.sha256 \\\n && echo \"$(cat /tmp/postgresql.tar.bz2.sha256 | awk '{ print $1; }')  /tmp/postgresql.tar.bz2\" | sha256sum --check \\\n && rm /tmp/postgresql.tar.bz2.sha256 \\\n && mkdir /tmp/postgresql \\\n && tar -xf /tmp/postgresql.tar.bz2 -C /tmp/postgresql --strip-components=1 \\\n && rm /tmp/postgresql.tar.bz2 \\\n && cd /tmp/postgresql \\\n # alpine seems to require all unix sockets be under `/var/run`, we set `DEFAULT_PGSOCKET_DIR` to work around this\n && sed -i -e 's|DEFAULT_PGSOCKET_DIR  \"/tmp\"|DEFAULT_PGSOCKET_DIR  \"/var/run/postgresql\"|g' src/include/pg_config_manual.h \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/opt/bitnami/postgresql \\\n    --enable-nls \\\n    --enable-integer-datetimes \\\n    --enable-thread-safety \\\n    --enable-tap-tests \\\n    --disable-rpath \\\n    --with-uuid=e2fs \\\n    --with-gnu-ld \\\n    --with-pgport=5432 \\\n    --with-system-tzdata=/usr/share/zoneinfo \\\n    --with-includes=/usr/local/include \\\n    --with-libraries=/usr/local/lib \\\n    --with-gssapi \\\n    --with-ldap \\\n    --with-tcl \\\n    --with-perl \\\n    --with-python \\\n    --with-openssl \\\n    --with-libxml \\\n    --with-libxslt \\\n    --with-icu \\\n    --with-llvm \\\n && make -j \"$(nproc)\" world-bin \\\n && make install-world-bin\n\n# build and install pgAudit extension\nRUN curl -f -sSL \"https://github.com/pgaudit/pgaudit/archive/refs/tags/${PGAUDIT_VERSION}.tar.gz\" -o /tmp/pgaudit.tar.gz \\\n && mkdir /tmp/pgaudit \\\n && tar -xf /tmp/pgaudit.tar.gz -C /tmp/pgaudit --strip-components=1 \\\n && rm /tmp/pgaudit.tar.gz \\\n && cd /tmp/pgaudit \\\n && make install USE_PGXS=1 PG_CONFIG=/opt/bitnami/postgresql/bin/pg_config\n\n# ================================\n# a bitnami-like postgres image\n# ================================\nFROM alpine:3.16\n\n# args -- uid/gid\nARG POSTGRES_USER=postgres\nARG POSTGRES_GROUP=postgres\nARG POSTGRES_UID=1001\nARG POSTGRES_GID=1001\nARG POSTGRES_HOME=/home/${POSTGRES_USER}\n\n# use \"en_US.UTF-8\" locale so postgres will be UTF-8 enabled by default\n# NOTE: alpine doesn't require explicit locale-file generation\nENV LANG=en_US.UTF-8\n\n# install -- nss_wrapper\nCOPY --from=nss-wrapper-builder --chown=${POSTGRES_UID}:${POSTGRES_GID} /opt/bitnami/common /opt/bitnami/common\n\n# install -- postgres\nCOPY --from=postgres-builder --chown=${POSTGRES_UID}:${POSTGRES_GID} /opt/bitnami/postgresql /opt/bitnami/postgresql\n\n# install -- postgres runtime dependencies\n# NOTE: we remove pl/perl, pl/python and pl/tcl dependencies to save image size,\n#       to use the pl extensions, those have to be installed in a derived image\nRUN runtime_deps=\"$( \\\n      scanelf \\\n        --needed \\\n        --nobanner \\\n        --format '%n#p' \\\n        --recursive /opt/bitnami/postgresql \\\n      | tr ',' '\\n' \\\n      | sort -u \\\n      | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n      | grep -v -e perl -e python -e tcl \\\n    )\" \\\n && apk --no-cache add \\\n    ${runtime_deps} \\\n    bash \\\n    icu-data-full \\\n    musl-locales \\\n    musl-locales-lang \\\n    net-tools \\\n    su-exec \\\n    tzdata \\\n    zstd \\\n # alias `su-exec` as `gosu` because they are fully compatible\n && ln -s /sbin/su-exec /sbin/gosu \\\n # this file sets `LANG` and `LC_COLLATE`, but we want our ENV instruction to set the postgres locale\n && rm /etc/profile.d/locale.sh \\\n # we use `/var/run/postgresql` for postgres unix sockets (set by `DEFAULT_PGSOCKET_DIR` in build)\n && mkdir -p /var/run/postgresql \\\n && chown -R ${POSTGRES_UID}:${POSTGRES_GID} /var/run/postgresql\n\n# include bitnami-postgres scripts and configs\nENV BITNAMI_APP_NAME=\"postgresql\" \\\n    PATH=\"/opt/bitnami/common/bin:/opt/bitnami/postgresql/bin:$PATH\"\nCOPY prebuildfs /\nCOPY rootfs /\n\n# run bitnami-postgres postinstall setup and ensure permissions\nRUN /opt/bitnami/scripts/postgresql/postunpack.sh \\\n && mkdir -p /bitnami/postgresql \\\n && chown -R ${POSTGRES_UID}:${POSTGRES_GID} /bitnami/postgresql /opt/bitnami\n\n# create non-root 'postgres' user/group\nRUN addgroup -g ${POSTGRES_GID} \"${POSTGRES_GROUP}\" \\\n && adduser -D -h \"${POSTGRES_HOME}\" -u ${POSTGRES_UID} -G \"${POSTGRES_GROUP}\" \"${POSTGRES_USER}\" \\\n && mkdir -p \"${POSTGRES_HOME}\" \\\n && chown -R ${POSTGRES_UID}:${POSTGRES_GID} \"${POSTGRES_HOME}\"\n\nUSER ${POSTGRES_UID}\nWORKDIR /opt/bitnami\n\nVOLUME [ \"/bitnami/postgresql\", \"/docker-entrypoint-initdb.d\", \"/docker-entrypoint-preinitdb.d\" ]\n\nENTRYPOINT [ \"/opt/bitnami/scripts/postgresql/entrypoint.sh\" ]\nCMD [ \"/opt/bitnami/scripts/postgresql/run.sh\" ]"
}