{
  "startTime": 1674250473173,
  "endTime": 1674250474100,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This docker file contains different build targets of the application\n# Each target is represented by a stage\n\n## BUILD STAGE ##\n# Create a static binary (with musl) for one of the binary targets.\n\nFROM rust:1.53.0-buster as build-stage\nARG BIN_NAME\n\n# install environment\n\nRUN apt-get update && apt-get install --no-install-recommends musl-tools zip -y && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /buildspace\n\nRUN rustup target add x86_64-unknown-linux-musl && rustup component add rustfmt\n\nCOPY ./code .\n\n# use BuildKit experimental cache mount to speed up builds\nRUN --mount=type=cache,target=./target \\\n  --mount=type=cache,target=/usr/local/cargo/git \\\n  --mount=type=cache,target=/usr/local/cargo/registry \\\n  cargo build --bin ${BIN_NAME} --release --target=x86_64-unknown-linux-musl && \\\n  cp ./target/x86_64-unknown-linux-musl/release/${BIN_NAME} ./exec-static\n\n## LAMBDA PACKAGE STAGE ##\n# Create a zip archive to be deployed to AWS Lambda\n\nFROM build-stage as package-stage\nARG BIN_NAME\n# the exec name inside a lambda archive should be `bootstrap`\nRUN cp ./exec-static ./bootstrap\nRUN zip ${BIN_NAME}.zip bootstrap\n\n## RUNTIME STAGE ##\n# A runtime container\n\nFROM scratch as runtime-stage\nARG PORT\nEXPOSE ${PORT}\nCOPY --from=build-stage /buildspace/exec-static /app\nCOPY --from=build-stage /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\nENTRYPOINT [\"./app\"]\n\n## EXPORT STAGE ##\n# Isolate the archive so it can be exported with `docker build -o`\n\nFROM scratch as export-stage\nARG BIN_NAME\nCOPY --from=package-stage /buildspace/${BIN_NAME}.zip /"
}