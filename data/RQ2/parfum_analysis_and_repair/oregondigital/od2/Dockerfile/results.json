{
  "startTime": 1674254736512,
  "endTime": 1674254737997,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 2,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.7-alpine3.15 as bundler\n\n# Necessary for bundler to operate properly\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\nRUN gem install bundler\n\nFROM bundler as dependencies\n\n# The alpine way\nRUN apk --no-cache update && apk --no-cache upgrade && \\\n  apk add --no-cache alpine-sdk nodejs unzip ghostscript vim yarn \\\n  git sqlite sqlite-dev postgresql-dev libjpeg-turbo-dev libpng-dev \\\n  libtool libgomp libressl libressl-dev java-common libc6-compat  \\\n  curl build-base tzdata zip autoconf automake libtool texinfo \\\n  bash bash-completion java-common openjdk11-jre-headless graphicsmagick \\\n  poppler-utils ffmpeg tesseract-ocr openjpeg-dev openjpeg-tools openjpeg less\\\n  libffi xz gcompat tini\n\n# Set the timezone to America/Los_Angeles (Pacific) then get rid of tzdata\nRUN cp -f /usr/share/zoneinfo/America/Los_Angeles /etc/localtime && \\\n  echo 'America/Los_Angeles' > /etc/timezone && apk del tzdata --purge\n\n# Install ImageMagick with jp2/tiff support\nRUN mkdir -p /tmp/im && \\\n  curl -f -sL https://www.imagemagick.org/archive/releases/ImageMagick-7.1.0-27.tar.xz \\\n  | tar -xJvf - -C /tmp/im && cd /tmp/im/ImageMagick-7.1.0-27 && \\\n    ./configure \\\n      --build=$CBUILD \\\n      --host=$CHOST \\\n      --prefix=/usr \\\n      --sysconfdir=/etc \\\n      --mandir=/usr/share/man \\\n      --infodir=/usr/share/info \\\n      --localstatedir=/var \\\n      --enable-shared \\\n      --disable-static \\\n      --with-modules \\\n      --with-threads \\\n      --with-jp2=yes \\\n      --with-tiff=yes \\\n      --with-gs-font-dir=/usr/share/fonts/Type1 \\\n      --with-quantum-depth=16 && \\\n    make -j`nproc` && \\\n    make install && \\\n    rm -rf /tmp/im\n\n# install FITS for file characterization\nRUN mkdir -p /opt/fits && \\\n  curl -fSL -o /opt/fits-1.5.5.zip https://github.com/harvard-lts/fits/releases/download/1.5.5/fits-1.5.5.zip && \\\n  cd /opt/fits && unzip /opt/fits-1.5.5.zip  && chmod +X /opt/fits/fits.sh && \\\n  rm -f /opt/fits-1.5.5.zip\n\nARG UID=8083\nARG GID=8083\n\n# Create an app user so our program doesn't run as root.\nRUN addgroup -g \"$GID\" app && adduser -h /data -u \"$UID\" -G app -D -H app\n\nFROM dependencies as gems\n\n# Make sure the new user has complete control over all code, including\n# bundler's installed assets\nRUN mkdir -p /usr/local/bundle\nRUN chown -R app:app /usr/local/bundle\n\n# Pre-install gems so we aren't reinstalling all the gems when literally any\n# filesystem change happens\nRUN mkdir -p /data/build\nRUN chown -R app:app /data && rm -rf /data/.cache\nWORKDIR /data\nCOPY --chown=app:app Gemfile /data\nCOPY --chown=app:app Gemfile.lock /data\nCOPY --chown=app:app build/install_gems.sh /data/build\nUSER app\nRUN /data/build/install_gems.sh\n\nFROM gems as code\n\n# Add the rest of the code\nCOPY --chown=app:app . /data\n\nARG RAILS_ENV=${RAILS_ENV}\nENV RAILS_ENV=${RAILS_ENV}\nARG FEDORA_URL=${FEDORA_URL}\nENV FEDORA_URL=${FEDORA_URL}\n\nFROM code\n\n# Uninstall tools for compiling native code\nUSER root\nRUN apk --no-cache update && apk del autoconf automake gcc g++ --purge && \\\n  rm -f /data/docker-compose.override.yml-example /data/README.md \\\n    /data/.env.example\nUSER app\n\nENV DEPLOYED_VERSION=${DEPLOYED_VERSION}\n\nRUN if [ \"${RAILS_ENV}\" = \"production\" ]; then \\\n    echo \"Precompiling assets with $RAILS_ENV environment\"; \\\n    rm -rf /data/.cache; \\\n    RAILS_ENV=$RAILS_ENV SECRET_KEY_BASE=temporary bundle exec rails assets:precompile; \\\n    cp public/assets/404-*.html public/404.html; \\\n    cp public/assets/500-*.html public/500.html; \\\n  fi\n"
}