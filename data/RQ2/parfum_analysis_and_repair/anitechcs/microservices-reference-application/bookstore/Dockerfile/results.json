{
  "startTime": 1674254010535,
  "endTime": 1674254011185,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##############################################\n## Docker file to build Angular application ##\n##  and package/run within ngnix container  ##\n##############################################\n\n## Use nginx alpine base image\nFROM nginx:1.19.6-alpine\n\n## Copy app specific nginx config\nCOPY nginx/default.conf /etc/nginx/conf.d/\n\n## Remove default nginx website\nRUN rm -rf /usr/share/nginx/html/*\n\n## Install nodejs package from alpine repo\nRUN apk add --update --no-cache nodejs nodejs-npm --repository=\"http://dl-cdn.alpinelinux.org/alpine/edge/community\"\n\n## Copy application package.json file\nCOPY package.json package-lock.json ./\n\n## npm performance nits\nRUN npm set progress=false &&\\\n    npm config set depth 0 &&\\\n    npm cache clean --force\n\n## Storing node modules on a separate layer will prevent unnecessary npm installs for each build\nRUN npm install &&\\\n    mkdir app && \\\n    cp -rf node_modules app && npm cache clean --force;\n\n## Set app as working directory\nWORKDIR /app\n\n## Copy all source code from your host machine into container\nCOPY . .\n\n## Build the angular app in production mode and store the artifacts in dist folder\nRUN $(npm bin)/ng build --prod --build-optimizer\n\n## Copy over the artifacts in dist folder to default nginx public folder\nRUN cp -rf dist/bookstore/* /usr/share/nginx/html\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n# Expose ports.\nEXPOSE 80 443"
}