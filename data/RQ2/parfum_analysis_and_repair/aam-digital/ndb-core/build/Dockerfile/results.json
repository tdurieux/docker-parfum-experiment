{
  "startTime": 1674221248924,
  "endTime": 1674221249657,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This docker image can be used to run the application locally.\n# To use it only Docker needs to be installed locally\n# Run the following commands from the root folder to build, run and kill the application\n# >> docker build -f build/Dockerfile -t aam/digital:latest .\n# >> docker run -p=80:80 aam/digital:latest\n# >> docker kill aam-digital\nFROM node:16.14.2-alpine3.15 as builder\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --no-progress\n\nRUN $(npm bin)/ng version\n\nCOPY . .\n\nARG APP_VERSION=\"UNKNOWN\"\nRUN sed -i \"s/appVersion: \\\".*\\\"/appVersion: \\\"$APP_VERSION\\\"/g\" src/environments/environment*.ts\n\nRUN npm run build-localized\n\n# Merge the service workers for the different locales\nRUN node build/merge-service-workers.js\n\n# When set to true, tests are run and coverage will be uploaded to CodeClimate\nARG UPLOAD_COVERAGE=false\nRUN if [ \"$UPLOAD_COVERAGE\" = true ] ; then \\\n    apk --no-cache add curl && \\\n    curl -f -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter && \\\n    chmod +x ./cc-test-reporter && \\\n    ./cc-test-reporter before-build; fi\n\n# When set to true, chromium is installed an tests are executed\nARG RUN_TESTS=false\nARG CHROME_BIN=/usr/bin/chromium-browser\n# Install chromium for karma, lint code and run tests\nRUN if [ \"$RUN_TESTS\" = true ] || [ \"$UPLOAD_COVERAGE\" = true ] ; then \\\n    apk --no-cache add chromium &&\\\n    npm run lint &&\\\n    npm run test-ci ; fi\n\n# The following arguments need to be provided for the code climate test reporter to work correctly\n# The commit sha\nARG GIT_COMMIT_SHA\n# The branch\nARG GIT_BRANCH\n# The time of the commit, can be extracted with `git log -1 --pretty=format:%ct`\nARG GIT_COMMITTED_AT\n# The ID for the test reporter, can be found on CodeCoverage\nARG CC_TEST_REPORTER_ID\nRUN if [ \"$UPLOAD_COVERAGE\" = true ] ; then ./cc-test-reporter after-build --debug ; fi\n\n# Information required to upload the sourcemap to sentry\n# If not set, nothing is uploaded\nARG SENTRY_AUTH_TOKEN\nARG SENTRY_ORG\nARG SENTRY_PROJECT\nRUN if [ \"$SENTRY_AUTH_TOKEN\" != \"\" ] ; then \\\n    npm install -g @sentry/cli &&\\\n    sentry-cli --auth-token=$SENTRY_AUTH_TOKEN releases --org=$SENTRY_ORG --project=$SENTRY_PROJECT files ndb-core@$APP_VERSION upload-sourcemaps dist  && \\\n    rm dist/*/*.map ; npm cache clean --force; fi\n\n### PROD image\n\nFROM nginx:1.22.0-alpine\nCOPY ./build/default.conf /etc/nginx/templates/default.conf\nCOPY --from=builder /app/dist/ /usr/share/nginx/html\n# The port on which the app will run in the Docker container\nENV PORT=80\n# The url to the webdav server\nENV WEBDAV_URL=\"http://localhost\"\n# The url to the CouchDB database\nENV COUCHDB_URL=\"http://localhost\"\n# The language which should be loaded on default options are \"en-US\" and \"de\"\nENV DEFAULT_LANGUAGE=\"en-US\"\n# variables are inserted into the nginx config\nCMD envsubst '$$PORT $$WEBDAV_URL $$COUCHDB_URL $$DEFAULT_LANGUAGE' < /etc/nginx/templates/default.conf > /etc/nginx/conf.d/default.conf &&\\\n    nginx -g 'daemon off;'\n"
}