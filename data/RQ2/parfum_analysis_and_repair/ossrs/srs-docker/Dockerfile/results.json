{
  "startTime": 1674219978800,
  "endTime": 1674219980109,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 6,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 25,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 48,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 26,
        "columnEnd": 54
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 43,
        "columnEnd": 101
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 25,
        "columnEnd": 69
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 56,
        "columnStart": 28,
        "columnEnd": 53
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 12,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 81,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ARCH\n\n#------------------------------------------------------------------------------------\n#--------------------------build-----------------------------------------------------\n#------------------------------------------------------------------------------------\nFROM ${ARCH}centos:7 as build\n\nARG BUILDPLATFORM\nARG TARGETPLATFORM\nARG JOBS=2\nRUN echo \"BUILDPLATFORM: $BUILDPLATFORM, TARGETPLATFORM: $TARGETPLATFORM, JOBS: $JOBS\"\n\nRUN yum install -y gcc gcc-c++ make patch sudo unzip perl zlib automake libtool \\\n    zlib-devel bzip2 bzip2-devel libxml2-devel \\\n    tcl cmake && rm -rf /var/cache/yum\n\n# Libs path for app which depends on ssl, such as libsrt.\nENV PKG_CONFIG_PATH $PKG_CONFIG_PATH:/usr/local/ssl/lib/pkgconfig\n\n# Libs path for FFmpeg(depends on serval libs), or it fail with:\n#       ERROR: speex not found using pkg-config\nENV PKG_CONFIG_PATH $PKG_CONFIG_PATH:/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig\n\n# Openssl 1.1.* for SRS.\nADD openssl-1.1.1j.tar.bz2 /tmp\nRUN cd /tmp/openssl-1.1.1j && \\\n   ./config -no-shared -no-threads --prefix=/usr/local/ssl && make -j${JOBS} && make install_sw\n\n# Openssl 1.0.* for SRS.\n#ADD openssl-OpenSSL_1_0_2u.tar.gz /tmp\n#RUN cd /tmp/openssl-OpenSSL_1_0_2u && \\\n#    ./config -no-shared -no-threads --prefix=/usr/local/ssl && make -j${JOBS} && make install_sw\n\n# For FFMPEG\nADD nasm-2.14.tar.bz2 /tmp\nRUN cd /tmp/nasm-2.14 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j${JOBS} && make install\n# For aac\nADD fdk-aac-2.0.2.tar.gz /tmp\nRUN cd /tmp/fdk-aac-2.0.2 && bash autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared && make -j${JOBS} && make install\n# For mp3, see https://sourceforge.net/projects/lame/\nADD lame-3.100.tar.gz /tmp\nRUN cd /tmp/lame-3.100 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared && make -j${JOBS} && make install\n# For libx264\nADD x264-snapshot-20181116-2245.tar.bz2 /tmp\nRUN cd /tmp/x264-snapshot-20181116-2245 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-cli --disable-shared --enable-static && make -j${JOBS} && make install\n# The libsrt for SRS, which depends on openssl.\nADD srt-1.4.1.tar.gz /tmp\nRUN cd /tmp/srt-1.4.1 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared --enable-static && make -j${JOBS} && make install\n\n# Build FFmpeg, static link libraries.\nADD ffmpeg-4.2.1.tar.bz2 /tmp\nRUN cd /tmp/ffmpeg-4.2.1 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-pthreads --extra-libs=-lpthread \\\n        --enable-gpl --enable-nonfree \\\n        --enable-postproc --enable-bzlib --enable-zlib \\\n        --enable-libx264 --enable-libmp3lame --enable-libfdk-aac \\\n        --enable-libxml2 --enable-demuxer=dash \\\n        --enable-libsrt --pkg-config-flags='--static' && \\\n\tmake -j${JOBS} && make install && echo \"FFMPEG build and install successfully\"\n\n#------------------------------------------------------------------------------------\n#--------------------------dist------------------------------------------------------\n#------------------------------------------------------------------------------------\nFROM ${ARCH}centos:7 as dist\n\nARG BUILDPLATFORM\nARG TARGETPLATFORM\nARG JOBS=2\nARG NO_GO\nRUN echo \"BUILDPLATFORM: $BUILDPLATFORM, TARGETPLATFORM: $TARGETPLATFORM, JOBS: $JOBS, NO_GO: $NO_GO\"\n\nWORKDIR /tmp/srs\n\n# FFmpeg.\nCOPY --from=build /usr/local/bin/ffmpeg /usr/local/bin/ffmpeg\nCOPY --from=build /usr/local/bin/ffprobe /usr/local/bin/ffprobe\nCOPY --from=build /usr/local/ssl /usr/local/ssl\n# For libsrt\nCOPY --from=build /usr/local/include/srt /usr/local/include/srt\nCOPY --from=build /usr/local/lib64 /usr/local/lib64\n\n# Note that git is very important for codecov to discover the .codecov.yml\nRUN yum install -y gcc gcc-c++ make net-tools gdb lsof tree dstat redhat-lsb unzip zip git \\\n    nasm yasm perf strace sysstat ethtool libtool \\\n    tcl cmake && rm -rf /var/cache/yum\n\n# For GCP/pprof/gperf, see https://winlin.blog.csdn.net/article/details/53503869\nRUN yum install -y graphviz && rm -rf /var/cache/yum\n\n# Install cherrypy for HTTP hooks.\nADD CherryPy-3.2.4.tar.gz2 /tmp\nRUN cd /tmp/CherryPy-3.2.4 && python setup.py install\n\nENV PATH $PATH:/usr/local/go/bin\nRUN if [[ -z $NO_GO ]]; then \\\n      cd /usr/local && \\\n      curl -f -L -O https://go.dev/dl/go1.16.12.linux-amd64.tar.gz && \\\n      tar xf go1.16.12.linux-amd64.tar.gz && \\\n      rm -f go1.16.12.linux-amd64.tar.gz; \\\n    fi\n\n# For utest, the gtest.\nADD googletest-release-1.6.0.tar.gz /usr/local\nRUN ln -sf /usr/local/googletest-release-1.6.0 /usr/local/gtest\n\n"
}