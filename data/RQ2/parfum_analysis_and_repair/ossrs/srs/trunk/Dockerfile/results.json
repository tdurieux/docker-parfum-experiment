{
  "startTime": 1674221058368,
  "endTime": 1674221059459,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ARCH\nARG IMAGE=ossrs/srs:ubuntu20\nFROM ${ARCH}${IMAGE} AS build\n\nARG BUILDPLATFORM\nARG TARGETPLATFORM\nARG JOBS=2\nARG SRS_AUTO_PACKAGER\nRUN echo \"BUILDPLATFORM: $BUILDPLATFORM, TARGETPLATFORM: $TARGETPLATFORM, JOBS: $JOBS, PACKAGER: ${#SRS_AUTO_PACKAGER}\"\n\n# https://serverfault.com/questions/949991/how-to-install-tzdata-on-a-ubuntu-docker-image\nENV DEBIAN_FRONTEND noninteractive\n\n# To use if in RUN, see https://github.com/moby/moby/issues/7281#issuecomment-389440503\n# Note that only exists issue like \"/bin/sh: 1: [[: not found\" for Ubuntu20, no such problem in CentOS7.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Install depends tools.\nRUN apt-get update && apt-get install --no-install-recommends -y gcc make g++ patch unzip perl git && rm -rf /var/lib/apt/lists/*;\n\n# Copy source code to docker.\nCOPY . /srs\nWORKDIR /srs/trunk\n\n# Use srs-cache from base image.\nRUN if [[ -d /usr/local/srs-cache/srs/trunk/objs ]]; then \\\n      echo \"Build from cache of base image\" && mkdir -p objs && \\\n      cp -R /usr/local/srs-cache/srs/trunk/objs/Platform-* objs/ && \\\n      du -sh objs/*; \\\n    fi\n\n# Build and install SRS.\n# Note that SRT is enabled by default, so we configure without --srt=on.\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --jobs=${JOBS} && make -j${JOBS} && make install\n\n# All config files for SRS.\nRUN cp -R conf /usr/local/srs/conf && \\\n    cp research/api-server/static-dir/index.html /usr/local/srs/objs/nginx/html/ && \\\n    cp research/api-server/static-dir/favicon.ico /usr/local/srs/objs/nginx/html/ && \\\n    cp research/players/crossdomain.xml /usr/local/srs/objs/nginx/html/ && \\\n    cp -R research/console /usr/local/srs/objs/nginx/html/ && \\\n    cp -R research/players /usr/local/srs/objs/nginx/html/ && \\\n    cp -R 3rdparty/signaling/www/demos /usr/local/srs/objs/nginx/html/\n\n############################################################\n# dist\n############################################################\nFROM ${ARCH}ubuntu:focal AS dist\n\nARG BUILDPLATFORM\nARG TARGETPLATFORM\nRUN echo \"BUILDPLATFORM: $BUILDPLATFORM, TARGETPLATFORM: $TARGETPLATFORM\"\n\n# Expose ports for streaming @see https://github.com/ossrs/srs#ports\nEXPOSE 1935 1985 8080 8000/udp 10080/udp\n\n# FFMPEG 4.1\nCOPY --from=build /usr/local/bin/ffmpeg /usr/local/srs/objs/ffmpeg/bin/ffmpeg\n# SRS binary, config files and srs-console.\nCOPY --from=build /usr/local/srs /usr/local/srs\n\n# Default workdir and command.\nWORKDIR /usr/local/srs\nCMD [\"./objs/srs\", \"-c\", \"conf/docker.conf\"]\n"
}