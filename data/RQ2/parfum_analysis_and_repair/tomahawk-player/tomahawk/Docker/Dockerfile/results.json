{
  "startTime": 1674254986524,
  "endTime": 1674254988497,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 33,
        "columnStart": 25,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 33,
        "columnStart": 25,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 12,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:19.04 as base\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    ninja-build \\\n    openssh-client \\\n    curl \\\n    gnupg2 \\\n    gosu \\\n    wget \\\n    locales \\\n    git \\\n    subversion \\\n    make \\\n    pkg-config \\\n    unzip \\\n    xz-utils \\\n    software-properties-common \\\n    sudo \\\n    apt-utils \\\n    && rm -rf /var/lib/apt/lists/*\n\n# LLVM/Clang\nENV CLANG_VERSION=9\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n    && apt-add-repository \"deb http://apt.llvm.org/disco/ llvm-toolchain-disco-$CLANG_VERSION main\" \\\n    && apt-get update && apt-get install --no-install-recommends -y \\\n    clang-$CLANG_VERSION \\\n    clang-tidy-$CLANG_VERSION \\\n    clang-format-$CLANG_VERSION \\\n    llvm-$CLANG_VERSION-dev \\\n    libclang-$CLANG_VERSION-dev \\\n    && update-alternatives \\\n    --install /usr/bin/clang clang /usr/bin/clang-$CLANG_VERSION 100 \\\n    --slave /usr/bin/clang++ clang++ /usr/bin/clang++-$CLANG_VERSION \\\n    --slave /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-$CLANG_VERSION \\\n    --slave /usr/bin/clang-format clang-format /usr/bin/clang-format-$CLANG_VERSION && rm -rf /var/lib/apt/lists/*;\n\n# GCC\nENV GCC_VERSION=9\nRUN sudo apt-get update \\\n    && sudo apt-get install -y --no-install-recommends \\\n    g++-$GCC_VERSION \\\n    gcc-$GCC_VERSION \\\n    && sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9 && rm -rf /var/lib/apt/lists/*;\n\n# Tomahawk deps\nRUN sudo apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    cmake \\\n    libattica-dev \\\n    libboost-dev    \\\n    libboost-filesystem-dev \\\n    libboost-iostreams-dev \\\n    libboost-thread-dev \\\n    libfftw3-dev \\\n    libgnutls28-dev \\\n    libgsasl7-dev \\\n    liblastfm-dev \\\n    liblastfm5-dev \\\n    liblucene++-dev \\\n    libphonon-dev \\\n    libphononexperimental-dev \\\n    libqca-qt5-2-dev \\\n    libqca2-dev \\\n    libqca2-plugins \\\n    libqjson-dev \\\n    libqt5svg5-dev \\\n    libqt5webkit5-dev \\\n    libqt5webkit5\\\n    libsamplerate0-dev \\\n    libsparsehash-dev \\\n    libssl-dev \\\n    libtelepathy-qt5-dev \\\n    libvlc-dev \\\n    libvlccore-dev \\\n    libx11-dev \\\n    libz-dev \\\n    qt5-default \\\n    qtbase5-dev \\\n    qttools5-dev \\\n    qttools5-dev-tools \\\n    zlib1g-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN git clone  --depth 1 https://github.com/zaphoyd/websocketpp.git --branch master --single-branch websocketpp \\\n    && mkdir websocketpp/build && cd websocketpp/build \\\n    && cmake .. \\\n    && sudo cmake --build . -j 16 --target install \\\n    && cd ../.. \\\n    && rm -r websocketpp\n\nRUN git clone --depth 1 https://github.com/frankosterfeld/qtkeychain.git --branch master --single-branch qtkeychain \\\n    && mkdir qtkeychain/build && cd qtkeychain/build \\\n    && cmake .. \\\n    && sudo cmake --build . -j 16 --target install \\\n    && cd ../.. \\\n    && rm -r qtkeychain\n\nRUN git clone --depth 1 https://github.com/taglib/taglib.git --branch master --single-branch taglib \\\n    && mkdir taglib/build && cd taglib/build \\\n    && cmake -DCMAKE_INSTALL_PREFIX=/usr \\\n      -DCMAKE_BUILD_TYPE=Release  \\\n      -DBUILD_SHARED_LIBS=ON .. \\\n    && sudo cmake --build . -j 16 --target install \\\n    && cd ../.. \\\n    && rm -r taglib\n\nRUN git clone --depth 1 https://anongit.kde.org/extra-cmake-modules.git --branch master --single-branch ecm \\\n    && mkdir ecm/build && cd ecm/build \\\n    && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n    && sudo cmake --build . -j 16 --target install \\\n    && cd ../.. \\\n    && rm -r ecm\n\nRUN git clone --depth 1 https://github.com/KDE/attica.git --branch master --single-branch attica \\\n    && mkdir attica/build && cd attica/build \\\n    && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n    && sudo cmake --build . -j 16 --target install \\\n    && cd ../.. \\\n    && rm -r attica\n\nRUN git clone --depth 1 https://github.com/stachenov/quazip.git --branch master --single-branch quazip \\\n    && mkdir quazip/build && cd quazip/build \\\n    && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n    && sudo cmake --build . -j 16 --target install \\\n    && cd ../.. \\\n    && rm -r quazip\n\nRUN git clone --depth 1 https://github.com/euroelessar/jreen.git --branch master --single-branch jreen \\\n    && mkdir jreen/build && cd jreen/build \\\n    && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n    && sudo cmake --build . -j 16 --target install \\\n    && cd ../.. \\\n    && rm -r jreen\n\n# Language\nENV LANG=en_US.UTF-8\nRUN echo \"$LANG UTF-8\" > /etc/locale.gen && locale-gen $LANG && update-locale LANG=$LANG\n\n#entrypoint, if it is last here makes it easy to build new image without rebuilding all layers\nCOPY entrypoint.sh /usr/local/bin/entrypoint.sh\nCOPY build-and-test.sh /usr/local/bin/build-and-test.sh\nRUN chmod +x /usr/local/bin/build-and-test.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\nWORKDIR /tmp/workspace\n"
}