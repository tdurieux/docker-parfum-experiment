{
  "startTime": 1674246563052,
  "endTime": 1674246567154,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 14,
        "columnEnd": 41
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 14,
        "columnEnd": 42
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 112,
        "lineEnd": 114,
        "columnStart": 25,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 176,
        "lineEnd": 183,
        "columnStart": 25,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 212,
        "lineEnd": 219,
        "columnStart": 25,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 241,
        "lineEnd": 249,
        "columnStart": 25,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 271,
        "lineEnd": 279,
        "columnStart": 25,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 301,
        "lineEnd": 301,
        "columnStart": 25,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 303,
        "lineEnd": 362,
        "columnStart": 25,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 378,
        "lineEnd": 378,
        "columnStart": 25,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 380,
        "lineEnd": 431,
        "columnStart": 25,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 450,
        "lineEnd": 501,
        "columnStart": 25,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 520,
        "lineEnd": 578,
        "columnStart": 43,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 112,
        "lineEnd": 114,
        "columnStart": 25,
        "columnEnd": 12
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 22,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 1
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2019 Garmin Ltd. or its subsidiaries\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG PYREX_BASE=ubuntu-20.04-oe\n\n#\n# Base image for prebuilt static binaries\n#\nFROM alpine:3.9 AS prebuilt-base\nENV PYREX_BASE none\n\nRUN apk add --no-cache --update \\\n    acl-dev \\\n    alpine-sdk \\\n    autoconf \\\n    automake \\\n    bash \\\n    bzip2-dev \\\n    cmake \\\n    expat-dev \\\n    file \\\n    libarchive-dev \\\n    libcap-ng-dev \\\n    libtool \\\n    lz4-dev \\\n    lzo-dev \\\n    musl-utils \\\n    openssl-dev \\\n    wget \\\n    xz \\\n    xz-dev \\\n    zlib-dev \\\n    zstd-dev \\\n    zstd-static \\\n;\n\nRUN mkdir -p /dist\nRUN mkdir -p /usr/src && rm -rf /usr/src\nCOPY patches/0001-Use-pkg-config-to-find-packages.patch /usr/src/\n\n#\n# Prebuilt static icecream\n#\nFROM prebuilt-base AS prebuilt-icecream\nENV PYREX_BASE none\n\nENV ICECREAM_SHA1=6eec038c11a821b1d2848e8197cbc5b6bca6b3a0\nRUN mkdir -p /usr/src/icecream && \\\n    cd /usr/src/icecream && \\\n    wget -O icecream.tar.gz https://github.com/icecc/icecream/archive/${ICECREAM_SHA1}.tar.gz && \\\n    tar -xvzf icecream.tar.gz && \\\n    cd icecream-${ICECREAM_SHA1} && \\\n    patch -p1 < /usr/src/0001-Use-pkg-config-to-find-packages.patch && \\\n    mkdir build && \\\n    cd build && \\\n    ../autogen.sh && \\\n    ../configure --prefix=/usr/local/ \\\n        --enable-gcc-color-diagnostics \\\n        --enable-gcc-show-caret \\\n        --enable-gcc-fdirectives-only \\\n        --enable-clang-rewrite-includes \\\n        --without-man \\\n        --enable-static \\\n        --disable-shared \\\n        LDFLAGS=\"-static\" \\\n        PKG_CONFIG=\"pkg-config --static\" && \\\n    make -j$(nproc) LDFLAGS=\"--static\" && \\\n    make install-strip DESTDIR=/dist/icecream && rm -rf /usr/src/icecream\n\n#\n# Prebuilt static setpriv\n#\nFROM prebuilt-base AS prebuilt-setpriv\nENV PYREX_BASE none\nRUN mkdir -p /usr/src/util-linux && \\\n    cd /usr/src/util-linux && \\\n    wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.36/util-linux-2.36.1.tar.xz && \\\n    tar -xvf util-linux-2.36.1.tar.xz && \\\n    cd util-linux-2.36.1 && \\\n    wget https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/patch/?id=8bf68f78d8a3c470e5a326989aa3e78385e1e79b -O setpriv_all_cap.patch && \\\n    patch -p1 < setpriv_all_cap.patch && \\\n    mkdir build && \\\n    cd build && \\\n    ../configure \\\n        --disable-all-programs \\\n        --enable-setpriv \\\n        --disable-doc \\\n        LDFLAGS=\"-static\" \\\n        --disable-nls \\\n        --without-bashcompletion \\\n        --prefix=/usr/local && \\\n    make -j$(nproc) LDFLAGS=\"--static\" && \\\n    make install-strip DESTDIR=/dist/setpriv && rm -rf /usr/src/util-linux\n\n#\n# Prebuilt util-linux and libcap-ng for Ubuntu 14.04\n#\nFROM ubuntu:trusty AS prebuilt-util-linux-14.04\nENV PYREX_BASE none\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    ulimit -n 1024 && \\\n    apt-get -y update && apt-get -y --no-install-recommends install \\\n        build-essential \\\n        wget && rm -rf /var/lib/apt/lists/*;\n\n# Work around Let's Encrypt certificate expiration September 2021\nRUN sed -i 's/mozilla\\/DST_Root_CA_X3.crt/!mozilla\\/DST_Root_CA_X3.crt/g' /etc/ca-certificates.conf && \\\n    update-ca-certificates\n\nRUN set -x && mkdir -p /usr/src/libcap-ng && \\\n    cd /usr/src/libcap-ng && \\\n    wget https://people.redhat.com/sgrubb/libcap-ng/libcap-ng-0.8.2.tar.gz && \\\n    tar -xvf libcap-ng-0.8.2.tar.gz && \\\n    cd libcap-ng-0.8.2 && \\\n    mkdir build && \\\n    cd build && \\\n    ../configure --prefix=/usr/local && \\\n    make -j$(nproc) LDFLAGS=\"-lpthread\" && \\\n    make install-strip && rm -rf /usr/src/libcap-ng\n\nRUN set -x && mkdir -p /usr/src/util-linux && \\\n    cd /usr/src/util-linux && \\\n    wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.36/util-linux-2.36.1.tar.xz && \\\n    tar -xvf util-linux-2.36.1.tar.xz && \\\n    cd util-linux-2.36.1 && \\\n    wget https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/patch/?id=8bf68f78d8a3c470e5a326989aa3e78385e1e79b -O setpriv_all_cap.patch && \\\n    patch -p1 < setpriv_all_cap.patch && \\\n    mkdir build && \\\n    cd build && \\\n    ../configure \\\n        --disable-doc \\\n        --disable-nls \\\n        --enable-setpriv \\\n        --without-bashcompletion \\\n        --prefix=/usr/local && \\\n    make -j$(nproc) && \\\n    make install-strip && rm -rf /usr/src/util-linux\n\n#\n# Prebuilt static tini\n#\nFROM prebuilt-base as prebuilt-tini\nENV PYREX_BASE none\nENV TINI_SHA1=c3b92ce685d0387c5d508f1856aa6d4cae25db8d\nRUN mkdir -p /usr/src/tini && \\\n    cd /usr/src/tini && \\\n    wget -O tini.tar.gz https://github.com/JPEWdev/tini/archive/${TINI_SHA1}.tar.gz && \\\n    tar -xvzf tini.tar.gz && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local ../tini-${TINI_SHA1} && \\\n    make && \\\n    make install DESTDIR=/dist/tini && \\\n    mv /dist/tini/usr/local/bin/tini-static /dist/tini/usr/local/bin/tini && rm -rf /usr/src/tini\n\n#\n# Ubuntu 14.04 base\n#\nFROM ubuntu:trusty as ubuntu-14.04-base\nENV PYREX_BASE none\nLABEL maintainer=\"Joshua Watt <Joshua.Watt@garmin.com>\"\n\n# Install software required to run init scripts.\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    ulimit -n 1024 && \\\n    apt-get -y update && apt-get -y --no-install-recommends install \\\n        locales \\\n        lsb-release \\\n        ncurses-term \\\n        python \\\n        python3 \\\n        sudo \\\n        curl \\\n    && \\\n# Clean up apt-cache\n    rm -rf /var/lib/apt/lists/* && \\\n# generate utf8 locale\n    locale-gen en_US.UTF-8 && \\\n    (locale -a | tee /dev/stderr | grep -qx en_US.utf8)\n\n# Work around Let's Encrypt certificate expiration September 2021\nRUN sed -i 's/mozilla\\/DST_Root_CA_X3.crt/!mozilla\\/DST_Root_CA_X3.crt/g' /etc/ca-certificates.conf && \\\n    update-ca-certificates\n\n# Copy prebuilt items\nCOPY --from=prebuilt-util-linux-14.04 /usr/local/ /usr/local/\nCOPY --from=prebuilt-tini /dist/tini /\n\n# Rebuild library cache after copying prebuilt utl-linux\nRUN ldconfig -v\n\n#\n# Ubuntu 16.04 Base\n#\nFROM ubuntu:xenial as ubuntu-16.04-base\nENV PYREX_BASE none\nLABEL maintainer=\"Joshua Watt <Joshua.Watt@garmin.com>\"\n\n# Install software required to run init scripts.\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    ulimit -n 1024 && \\\n    apt-get -y update && apt-get -y --no-install-recommends install \\\n        locales \\\n        lsb-release \\\n        ncurses-term \\\n        python \\\n        python3 \\\n        sudo \\\n        curl \\\n    && \\\n# Clean up apt-cache\n    rm -rf /var/lib/apt/lists/* && \\\n# generate utf8 locale\n    locale-gen en_US.UTF-8 && \\\n    (locale -a | tee /dev/stderr | grep -qx en_US.utf8)\n\n# Copy prebuilt items\nCOPY --from=prebuilt-setpriv /dist/setpriv /\nCOPY --from=prebuilt-tini /dist/tini /\n\n#\n# Ubuntu 18.04 Base\n#\nFROM ubuntu:bionic as ubuntu-18.04-base\nENV PYREX_BASE none\nLABEL maintainer=\"Joshua Watt <Joshua.Watt@garmin.com>\"\n\n# Install software required to run init scripts.\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    ulimit -n 1024 && \\\n    apt-get -y update && apt-get -y --no-install-recommends install \\\n        locales \\\n        lsb-release \\\n        ncurses-term \\\n        python \\\n        python3 \\\n        setpriv \\\n        sudo \\\n        curl \\\n    && \\\n# Clean up apt-cache\n    rm -rf /var/lib/apt/lists/* && \\\n# generate utf8 locale\n    locale-gen en_US.UTF-8 && \\\n    (locale -a | tee /dev/stderr | grep -qx en_US.utf8)\n\n# Copy prebuilt items\nCOPY --from=prebuilt-setpriv /dist/setpriv /\nCOPY --from=prebuilt-tini /dist/tini /\n\n#\n# Ubuntu 20.04 Base\n#\nFROM ubuntu:focal as ubuntu-20.04-base\nENV PYREX_BASE none\nLABEL maintainer=\"Joshua Watt <Joshua.Watt@garmin.com>\"\n\n# Install software required to run init scripts.\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    ulimit -n 1024 && \\\n    apt-get -y update && apt-get -y --no-install-recommends install \\\n        locales \\\n        lsb-release \\\n        ncurses-term \\\n        python \\\n        python3 \\\n        util-linux \\\n        sudo \\\n        curl \\\n    && \\\n# Clean up apt-cache\n    rm -rf /var/lib/apt/lists/* && \\\n# generate utf8 locale\n    locale-gen en_US.UTF-8 && \\\n    (locale -a | tee /dev/stderr | grep -qx en_US.utf8)\n\n# Copy prebuilt items\nCOPY --from=prebuilt-setpriv /dist/setpriv /\nCOPY --from=prebuilt-tini /dist/tini /\n\n#\n# Ubuntu 14.04 Yocto Base\n#\nFROM ubuntu-14.04-base as ubuntu-14.04-oe\nENV PYREX_BASE none\nLABEL maintainer=\"Joshua Watt <Joshua.Watt@garmin.com>\"\n\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    ulimit -n 1024 && \\\n# Add a non-ancient version of git\n    apt-get -y update && apt-get -y --no-install-recommends install software-properties-common && \\\n    add-apt-repository -y ppa:git-core/ppa && \\\n    apt-get -y update && apt-get -y --no-install-recommends install \\\n# Poky 2.0 build dependencies\n    gawk \\\n    wget \\\n    git-core \\\n    diffstat \\\n    unzip \\\n    texinfo \\\n    gcc-multilib \\\n    build-essential \\\n    chrpath \\\n    socat \\\n    libsdl1.2-dev \\\n    xterm \\\n# Poky 2.1 build dependencies\n    gawk \\\n    wget \\\n    git-core \\\n    diffstat \\\n    unzip \\\n    texinfo \\\n    gcc-multilib \\\n    build-essential \\\n    chrpath \\\n    socat \\\n# Poky 2.2 build dependencies\n    gawk \\\n    wget \\\n    git-core \\\n    diffstat \\\n    unzip \\\n    texinfo \\\n    gcc-multilib \\\n    build-essential \\\n    chrpath \\\n    socat \\\n# Not listed, but required dependencies (from ASSUME_PROVIDED)\n    bzip2 \\\n    libbz2-dev \\\n    sed \\\n    findutils \\\n# Dependencies for \"bitbake -c menuconfig\"\n    libncurses5-dev \\\n    libtinfo-dev \\\n# Required for some poorly written 3rd party recipes :(\n    python-crypto \\\n    python-six \\\n    python3-six \\\n# An updated version of Git (from the PPA source above)\n# that supports doing Yocto externalsrc recipes against free-\n# standing working copies that use Git worktrees.\n    git >=1:2.17.* \\\n# Corollary to the core Yocto gcc-multilib package. Allows various\n# prebuilt native tools to work\n    g++-multilib \\\n# Screen to enable devshell\n    screen \\\n# Base OS stuff that reasonable workstations have, but which the registry image\n# doesn't\n    tzdata \\\n&& rm -rf /var/lib/apt/lists/*\n\n# Copy prebuilt items\nCOPY --from=prebuilt-icecream /dist/icecream /\n\n#\n# Ubuntu 16.04 Yocto Base\n#\nFROM ubuntu-16.04-base as ubuntu-16.04-oe\nENV PYREX_BASE none\nLABEL maintainer=\"Joshua Watt <Joshua.Watt@garmin.com>\"\n\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    ulimit -n 1024 && \\\n# Add a non-ancient version of git\n    apt-get -y update && apt-get -y --no-install-recommends install software-properties-common && \\\n    add-apt-repository -y ppa:git-core/ppa && \\\n    apt-get -y update && apt-get -y --no-install-recommends install \\\n# Poky 2.7 build dependencies\n    gawk \\\n    wget \\\n    git-core \\\n    diffstat \\\n    unzip \\\n    texinfo \\\n    gcc-multilib \\\n    build-essential \\\n    chrpath \\\n    socat \\\n    cpio \\\n    python \\\n    python3 \\\n    python3-pip \\\n    python3-pexpect \\\n    xz-utils \\\n    debianutils \\\n    iputils-ping \\\n    python3-git \\\n    python3-jinja2 \\\n    libegl1-mesa \\\n    libsdl1.2-dev \\\n    xterm \\\n# Dependencies for \"bitbake -c menuconfig\"\n    libncurses5-dev \\\n    libtinfo-dev \\\n# Not listed, but required dependencies (from ASSUME_PROVIDED)\n    bzip2 \\\n    libbz2-dev \\\n    sed \\\n    findutils \\\n# Dependencies for \"bitbake -c menuconfig\"\n    libncurses5-dev \\\n    libtinfo-dev \\\n# Required for some poorly written 3rd party recipes :(\n    python-crypto \\\n    python-six \\\n    python3-six \\\n# An updated version of Git (from the PPA source above)\n# that supports doing Yocto externalsrc recipes against free-\n# standing working copies that use Git worktrees.\n    git >=1:2.17.* \\\n# Corollary to the core Yocto gcc-multilib package. Allows various\n# prebuilt native tools to work\n    g++-multilib \\\n# Screen to enable devshell\n    screen \\\n# Base OS stuff that reasonable workstations have, but which the registry image\n# doesn't\n    tzdata \\\n&& rm -rf /var/lib/apt/lists/*\n\n# Python modules used by resulttool\nRUN python3 -m pip install jinja2 iterfzf\n\n# Copy prebuilt items\nCOPY --from=prebuilt-icecream /dist/icecream /\n\n#\n# Ubuntu 18.04 Base\n#\nFROM ubuntu-18.04-base as ubuntu-18.04-oe\nENV PYREX_BASE none\nLABEL maintainer=\"Joshua Watt <Joshua.Watt@garmin.com>\"\n\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    sudo dpkg --add-architecture i386 && \\\n    ulimit -n 1024 && \\\n    apt-get -y update && apt-get -y --no-install-recommends install \\\n# Poky 2.7 build dependencies\n    gawk \\\n    wget \\\n    git-core \\\n    diffstat \\\n    unzip \\\n    texinfo \\\n    gcc-multilib \\\n    build-essential \\\n    chrpath \\\n    socat \\\n    cpio \\\n    python \\\n    python3 \\\n    python3-pip \\\n    python3-pexpect \\\n    xz-utils \\\n    debianutils \\\n    iputils-ping \\\n    python3-git \\\n    python3-jinja2 \\\n    libegl1-mesa \\\n    libsdl1.2-dev \\\n    xterm \\\n    coreutils \\\n# Testing dependencies\n    iproute2 \\\n    sysstat \\\n# Dependencies for \"bitbake -c menuconfig\"\n    libncurses5-dev \\\n    libtinfo-dev \\\n# Not listed, but required dependencies (from ASSUME_PROVIDED)\n    bzip2 \\\n    libbz2-dev \\\n    sed \\\n    findutils \\\n# Required for some poorly written 3rd party recipes :(\n    python-crypto \\\n    python-six \\\n    python3-six \\\n# Corollary to the core Yocto gcc-multilib package. Allows various\n# prebuilt native tools to work\n    g++-multilib \\\n# Screen to enable devshell\n    screen \\\n# Base OS stuff that reasonable workstations have, but which the registry image\n# doesn't\n    tzdata \\\n# Testing requirements\n    wine64 \\\n    wine32 \\\n&& rm -rf /var/lib/apt/lists/*\n\n# Python modules used by resulttool\nRUN python3 -m pip install iterfzf testtools python-subunit\n\n# Copy prebuilt items\nCOPY --from=prebuilt-icecream /dist/icecream /\n\n#\n# Ubuntu 20.04 Base\n#\nFROM ubuntu-20.04-base as ubuntu-20.04-oe\nENV PYREX_BASE none\nLABEL maintainer=\"Joshua Watt <Joshua.Watt@garmin.com>\"\n\nRUN set -x && export DEBIAN_FRONTEND=noninteractive && \\\n    sudo dpkg --add-architecture i386 && \\\n    ulimit -n 1024 && \\\n    apt -y update && apt upgrade apt -y && apt -y --no-install-recommends install \\\n# Poky 3.3 build dependencies\n    gawk \\\n    wget \\\n    git \\\n    diffstat \\\n    unzip \\\n    texinfo \\\n    gcc-multilib \\\n    build-essential \\\n    chrpath \\\n    socat \\\n    cpio \\\n    python \\\n    python3 \\\n    python3-pip \\\n    python3-pexpect \\\n    xz-utils \\\n    debianutils \\\n    iputils-ping \\\n    python3-git \\\n    python3-jinja2 \\\n    libegl1-mesa \\\n    libsdl1.2-dev \\\n    pylint3 \\\n    xterm \\\n    coreutils \\\n    python3-subunit \\\n    mesa-common-dev \\\n    zstd \\\n    liblz4-tool \\\n# Testing dependencies\n    iproute2 \\\n    sysstat \\\n# Dependencies for \"bitbake -c menuconfig\"\n    libncurses5-dev \\\n    libtinfo-dev \\\n# Not listed, but required dependencies (from ASSUME_PROVIDED)\n    bzip2 \\\n    libbz2-dev \\\n    sed \\\n    findutils \\\n# Required for some poorly written 3rd party recipes :(\n    python-crypto \\\n    python-six \\\n    python3-six \\\n# Corollary to the core Yocto gcc-multilib package. Allows various\n# prebuilt native tools to work\n    g++-multilib \\\n# Screen to enable devshell\n    screen \\\n# Base OS stuff that reasonable workstations have, but which the registry image\n# doesn't\n    tzdata \\\n# Dependencies for other layers\n    xxd \\\n# Testing requirements\n    wine64 \\\n    wine32 \\\n&& rm -rf /var/lib/apt/lists/*\n\nRUN python3 -m pip install iterfzf testtools python-subunit\n\n# Copy prebuilt items\nCOPY --from=prebuilt-icecream /dist/icecream /\n\n#\n# Ubuntu 18.04 OE Test Image\n#\nFROM ubuntu-18.04-oe as ubuntu-18.04-oetest\nENV PYREX_BASE none\n\n#\n# Ubuntu 20.04 OE Test Image\n#\nFROM ubuntu-20.04-oe as ubuntu-20.04-oetest\nENV PYREX_BASE none\n\n#\n# Ubuntu 14.04 Base, customized with Garmin internal LAN configuration.\n#\nFROM ubuntu-14.04-oe AS ubuntu-14.04-oegarmin\nENV PYREX_BASE none\n\n#\n# Ubuntu 16.04 Base, customized with Garmin internal LAN configuration.\n#\nFROM ubuntu-16.04-oe AS ubuntu-16.04-oegarmin\nENV PYREX_BASE none\n\n#\n# Ubuntu 18.04 Base, customized with Garmin internal LAN configuration.\n#\nFROM ubuntu-18.04-oe AS ubuntu-18.04-oegarmin\nENV PYREX_BASE none\n\n#\n# Ubuntu 20.04 Base, customized with Garmin internal LAN configuration.\n#\nFROM ubuntu-20.04-oe AS ubuntu-20.04-oegarmin\nENV PYREX_BASE none\n\n#\n# Base image target.\n#\n# This stage sets up the minimal image startup and entry points. It also\n# ensures that the en_US.UTF-8 locale is installed and set correctly.\n#\nFROM ${PYREX_BASE} as pyrex-base\nENV PYREX_BASE none\n\n# Set Locales\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# Add startup scripts\nCOPY ./run.sh /usr/libexec/pyrex/run\nCOPY ./capture.sh /usr/libexec/pyrex/capture\nCOPY ./entry.py /usr/libexec/pyrex/entry.py\nCOPY ./cleanup.py /usr/libexec/pyrex/cleanup.py\nRUN chmod +x /usr/libexec/pyrex/cleanup.py \\\n    /usr/libexec/pyrex/entry.py \\\n    /usr/libexec/pyrex/run \\\n    /usr/libexec/pyrex/capture\n\n# Add startup script directory & test script.\nCOPY ./test_startup.sh /usr/libexec/pyrex/startup.d/\n\n# Precompile python files for improved startup time\nRUN python3 -m py_compile /usr/libexec/pyrex/*.py\n\n# Use tini as the init process and instruct it to invoke the cleanup script\n# once the primary command dies\nENTRYPOINT [\"/usr/local/bin/tini\", \"-P\", \"/usr/libexec/pyrex/cleanup.py\", \"{}\", \";\", \"--\", \"/usr/libexec/pyrex/entry.py\"]\n\n# The startup script is expected to chain along to some other\n# command. By default, we'll use an interactive shell.\nCMD [\"/usr/libexec/pyrex/run\", \"/bin/bash\"]\n\n#\n# Yocto compatible target image.\n#\n# The final image is the yocto compatible target image. This image has the\n# Icecream destributed target setup correctly and install all of the desired\n# yocto dependencies.\n#\nFROM pyrex-base as pyrex-oe\nENV PYREX_BASE none\n\n# Setup Icecream distributed compiling client. The client tries several IPC\n# mechanisms to find the daemon, including connecting to a localhost TCP\n# socket. Since the local Icecream daemon (iceccd) is not started when the\n# container starts, the client will not find it and instead connect to the host\n# Icecream daemon (as long as the container is run with --net=host).\nRUN mkdir -p /usr/share/icecc/toolchain && \\\n    cd /usr/share/icecc/toolchain/ && \\\n    TC_NAME=$(mktemp) && \\\n    /usr/local/libexec/icecc/icecc-create-env --gcc $(which gcc) $(which g++) 5> $TC_NAME && \\\n    mv $(cat $TC_NAME) native-gcc.tar.gz && \\\n    rm $TC_NAME\n\nENV ICECC_VERSION=/usr/share/icecc/toolchain/native-gcc.tar.gz\n\n#\n# OE build image. Includes many additional packages for testing\n#\nFROM pyrex-oe as pyrex-oetest\nENV PYREX_BASE none\n\n#\n# Garmin developer image. Same as regular Yocto-compatible target image except\n# it has additional Garmin-internal TLS root certificates installed into the\n# trust store to facilitate using internal Garmin hosts whose certificate chain\n# does not extend up to publicly registered CA's.\nFROM pyrex-oe as pyrex-oegarmin\nENV PYREX_BASE none\n\nRUN mkdir -p /usr/share/ca-certificates/garmin\n\n# Root certificate that issued the cert for firewall TLS inspection.\n# Certificate originally obtained from https://pki.garmin.com/crl/Garmin%20Root%20CA%20-%202018.cer\nCOPY garmin/Garmin_Root_CA_-_2018.cer /tmp/\nRUN openssl x509 -inform DER -in /tmp/Garmin_Root_CA_-_2018.cer -out /usr/share/ca-certificates/garmin/Garmin_Root_CA_-_2018.crt\nRUN echo garmin/Garmin_Root_CA_-_2018.crt >> /etc/ca-certificates.conf\nRUN rm /tmp/Garmin_Root_CA_-_2018.cer\n\n# Rebuild the CA database\nRUN update-ca-certificates\n"
}