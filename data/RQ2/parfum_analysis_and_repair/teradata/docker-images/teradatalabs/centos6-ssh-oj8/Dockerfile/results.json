{
  "startTime": 1674251231872,
  "endTime": 1674251232561,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 28,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2016 Teradata\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM jdeathe/centos-ssh:centos-6-1.8.1\nMAINTAINER Teradata Docker Team <docker@teradata.com>\n\nENV DOCKERIZE_VERSION v0.3.0\n\nARG JDK_URL\nARG JDK_RPM\nARG JDK_PATH\n\n# Install Oracle Java and presto-admin dependences (already has python 2.6)\nRUN \\\n\n    rm -rf /etc/yum.repos.d/epel* && \\\n\n    yum install -y \\\n      wget \\\n      bzip2 \\\n      gcc \\\n      python-devel \\\n      tar \\\n      expect \\\n      python-devel \\\n      openssl-devel \\\n      libffi-devel && \\\n    # install and trim Oracle JDK\n    wget -nv --header \"Cookie: oraclelicense=accept-securebackup-cookie\" $JDK_URL && \\\n    rpm -ivh $JDK_RPM && rm $JDK_RPM && \\\n    rm -rf $JDK_PATH/*src.zip \\\n           $JDK_PATH/lib/missioncontrol \\\n           $JDK_PATH/lib/visualvm \\\n           $JDK_PATH/lib/*javafx* \\\n           $JDK_PATH/jre/lib/plugin.jar \\\n           $JDK_PATH/jre/lib/ext/jfxrt.jar \\\n           $JDK_PATH/jre/bin/javaws \\\n           $JDK_PATH/jre/lib/javaws.jar \\\n           $JDK_PATH/jre/lib/desktop \\\n           $JDK_PATH/jre/plugin \\\n           $JDK_PATH/jre/lib/deploy* \\\n           $JDK_PATH/jre/lib/*javafx* \\\n           $JDK_PATH/jre/lib/*jfx* \\\n           $JDK_PATH/jre/lib/amd64/libdecora_sse.so \\\n           $JDK_PATH/jre/lib/amd64/libprism_*.so \\\n           $JDK_PATH/jre/lib/amd64/libfxplugins.so \\\n           $JDK_PATH/jre/lib/amd64/libglass.so \\\n           $JDK_PATH/jre/lib/amd64/libgstreamer-lite.so \\\n           $JDK_PATH/jre/lib/amd64/libjavafx*.so \\\n           $JDK_PATH/jre/lib/amd64/libjfx*.so && \\\n    # install dockerize\n    wget -nv https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n        && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n        && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    # install pip\n    easy_install pip && \\\n    # cleanup\n    yum -y clean all && rm -rf /tmp/* /var/tmp/* && rm -rf /var/cache/yum\n\n# Copy Vagrant insecure SSH keys for passwordless SSH between\n# containers and to localhost\nCOPY vagrant_insecure_rsa /etc/services-config/ssh/id_rsa\n\n# Modify the ssh-bootstrap script to copy id_rsa to ~/.ssh (the script already makes ~/.ssh\n# and copies authorized_keys)\nRUN printf \"cp -f /etc/services-config/ssh/id_rsa \\${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n \\\n            chown -R \\${OPTS_SSH_USER}:${OPTS_SSH_USER} \\${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n \\\n            chmod 600 \\${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n \\\n            cp -r \\${OPTS_SSH_USER_HOME}/.ssh /root/.ssh\\n\\n \\\n            useradd -ms /bin/bash testuser\\n \\\n            echo \"testuser:testpass\" | chpasswd\" \\\n            > /usr/sbin/bootstrap-extra\n\nRUN awk -v file=\"/usr/sbin/bootstrap-extra\" -v lineno=$(($(wc -l < /usr/sbin/sshd-bootstrap) - 4)) ' \\\n    NR==lineno {system(\"echo \"\"; cat \" file); print; next} \\\n    1' /usr/sbin/sshd-bootstrap > /usr/sbin/sshd-bootstrap2 && \\\n    mv /usr/sbin/sshd-bootstrap2 /usr/sbin/sshd-bootstrap && \\\n    chmod +x /usr/sbin/sshd-bootstrap\n\n#\n# The sshd-bootstrap process engages in some tomfoolery with the\n# /etc/ssh/sshd_config file during the bootstrap process. Namely, it forcibly\n# symlinks /etc/services-config/ssh/sshd_config over it under conditions that\n# prevail in our images. This means the canonical source of the sshd\n# configuration is the file in /etc/services-config, and we need to modify it,\n# rather than the customary file in /etc/ssh.\n#\nRUN sed -i \\\n    -e 's/^PermitRootLogin no/PermitRootLogin without-password/g' \\\n    -e 's/^PasswordAuthentication no/PasswordAuthentication yes/g' \\\n    /etc/services-config/ssh/sshd_config\n\n# Set default password for testing\nRUN printf \"\\nSSH_USER_PASSWORD=password\" >> /etc/services-config/ssh/sshd-bootstrap.conf\n\nEXPOSE 22 8080\n\nENV JAVA_HOME $JDK_PATH/jre/\n\n# Clean up\nRUN yum -y clean all && rm -rf /tmp/* /var/tmp/*\n"
}