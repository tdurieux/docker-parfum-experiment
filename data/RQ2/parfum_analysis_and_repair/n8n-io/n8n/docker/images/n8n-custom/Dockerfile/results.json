{
  "startTime": 1674220039079,
  "endTime": 1674220040349,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 1,
        "columnEnd": 56
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# 1. Create an image to build n8n\nFROM node:16-alpine as builder\n\n# Update everything and install needed dependencies\nUSER root\n\n# Install all needed dependencies\nRUN apk --update --no-cache add --virtual build-dependencies python3 build-base ca-certificates && \\\n\tnpm_config_user=root npm install -g lerna run-script-os && npm cache clean --force;\n\nWORKDIR /data\n\nCOPY lerna.json .\nCOPY package.json .\nCOPY packages/cli/ ./packages/cli/\nCOPY packages/core/ ./packages/core/\nCOPY packages/design-system/ ./packages/design-system/\nCOPY packages/editor-ui/ ./packages/editor-ui/\nCOPY packages/nodes-base/ ./packages/nodes-base/\nCOPY packages/workflow/ ./packages/workflow/\nRUN rm -rf node_modules packages/*/node_modules packages/*/dist\n\nRUN npm config set legacy-peer-deps true\nRUN npm install --production --loglevel notice && npm cache clean --force;\nRUN lerna bootstrap --hoist -- --production\nRUN npm run build\n\n\n# 2. Start with a new clean image with just the code that is needed to run n8n\nFROM node:16-alpine\n\nUSER root\n\nRUN apk add --no-cache --update graphicsmagick tzdata tini su-exec git\n\nWORKDIR /data\n\n# Install all needed dependencies\nRUN npm_config_user=root npm install -g full-icu && npm cache clean --force;\n\n# Install fonts\nRUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \\\n\tupdate-ms-fonts && \\\n\tfc-cache -f && \\\n\tapk del fonts && \\\n\tfind  /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \\;\n\nENV NODE_ICU_DATA /usr/local/lib/node_modules/full-icu\n\nCOPY --from=builder /data ./\n\nCOPY docker/images/n8n-custom/docker-entrypoint.sh /docker-entrypoint.sh\nENTRYPOINT [\"tini\", \"--\", \"/docker-entrypoint.sh\"]\n\nEXPOSE 5678/tcp\n"
}