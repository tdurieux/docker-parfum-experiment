{
  "startTime": 1674251937794,
  "endTime": 1674251939767,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 66,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 66,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 66,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 66,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 66,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 155
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 165
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 161,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nFROM ubuntu:impish-20211102\n\nENV TZ=\"UTC\" \\\n    DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies of Java client builds.\nRUN apt update && \\\n    apt install --no-install-recommends -y \\\n      build-essential \\\n      default-jdk \\\n      git \\\n      maven && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install kafka streams examples.  This is a very slow step (tens of minutes), doing\n# many maven dependency downloads without any parallelism.  To avoid re-running it\n# on unrelated changes in other steps, this step is as early on the Dockerfile as possible.\nRUN git -C /opt clone --branch ducktape2 https://github.com/redpanda-data/kafka-streams-examples.git && \\\n    cd /opt/kafka-streams-examples && mvn -DskipTests=true clean package\n\n# Install our in-tree Java test clientst\nRUN mkdir -p /opt/redpanda-tests\nCOPY --chown=0:0 tests/java /opt/redpanda-tests/java\nRUN mvn clean package --batch-mode --file /opt/redpanda-tests/java/kafka-verifier --define buildDir=/opt/kafka-verifier/\nRUN mvn clean package --batch-mode --file /opt/redpanda-tests/java/compacted-log-verifier --define buildDir=/opt/compacted-log-verifier\nRUN mvn clean package --batch-mode --file /opt/redpanda-tests/java/tx-verifier --define buildDir=/opt/tx-verifier\nRUN mvn clean package --batch-mode --file /opt/redpanda-tests/java/e2e-verifiers --define buildDir=/opt/e2e-verifiers\n\n# - install distro-packaged depedencies\n# - allow user env variables in ssh sessions\n# - install dependencies of 'rpk debug' system scan\nRUN apt update && \\\n    apt install --no-install-recommends -y \\\n      bind9-utils \\\n      bind9-dnsutils \\\n      bsdmainutils \\\n      curl \\\n      dmidecode \\\n      cmake \\\n      iproute2 \\\n      iptables \\\n      libatomic1 \\\n      libyajl-dev \\\n      libsasl2-dev \\\n      libssl-dev \\\n      net-tools \\\n      lsof \\\n      pciutils \\\n      nodejs \\\n      npm \\\n      openssh-server \\\n      netcat \\\n      sudo \\\n      python3-pip && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    echo 'PermitUserEnvironment yes' >> /etc/ssh/sshd_config && \\\n    echo 'UsePAM yes' >> /etc/ssh/sshd_config && \\\n    echo 'root soft nofile 65535' >> /etc/security/limits.conf && \\\n    echo 'root hard nofile 65535' >> /etc/security/limits.conf\n\n# install go\nRUN mkdir -p /usr/local/go/ && \\\n    bash -c 'if [[ $(uname -m) = \"aarch64\" ]]; then ARCHID=\"arm64\"; else export ARCHID=\"amd64\"; fi && \\\n    curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 https://golang.org/dl/go1.17.linux-${ARCHID}.tar.gz | tar -xz -C /usr/local/go/ --strip 1'\nENV PATH=\"${PATH}:/usr/local/go/bin\"\n\n# install kafka binary dependencies, librdkafka dev, kcat and kaf tools\nENV KAFKA_MIRROR=\"https://s3-us-west-2.amazonaws.com/kafka-packages\"\nRUN mkdir -p \"/opt/kafka-2.3.1\" && chmod a+rw /opt/kafka-2.3.1 && curl -f -s \"$KAFKA_MIRROR/kafka_2.12-2.3.1.tgz\" | tar xz --strip-components=1 -C \"/opt/kafka-2.3.1\" && \\\n    mkdir -p \"/opt/kafka-2.4.1\" && chmod a+rw /opt/kafka-2.4.1 && curl -f -s \"$KAFKA_MIRROR/kafka_2.12-2.4.1.tgz\" | tar xz --strip-components=1 -C \"/opt/kafka-2.4.1\" && \\\n    mkdir -p \"/opt/kafka-2.5.0\" && chmod a+rw /opt/kafka-2.5.0 && curl -f -s \"$KAFKA_MIRROR/kafka_2.12-2.5.0.tgz\" | tar xz --strip-components=1 -C \"/opt/kafka-2.5.0\" && \\\n    mkdir -p \"/opt/kafka-2.7.0\" && chmod a+rw /opt/kafka-2.7.0 && curl -f -s \"$KAFKA_MIRROR/kafka_2.12-2.7.0.tgz\" | tar xz --strip-components=1 -C \"/opt/kafka-2.7.0\" && \\\n    mkdir -p \"/opt/kafka-3.0.0\" && chmod a+rw /opt/kafka-3.0.0 && curl -f -s \"$KAFKA_MIRROR/kafka_2.12-3.0.0.tgz\" | tar xz --strip-components=1 -C \"/opt/kafka-3.0.0\" && \\\n    ln -s /opt/kafka-3.0.0 /opt/kafka-dev && \\\n    mkdir /opt/librdkafka && \\\n    curl -f -SL \"https://github.com/edenhill/librdkafka/archive/v1.8.0.tar.gz\" | tar -xz --strip-components=1 -C /opt/librdkafka && \\\n    cd /opt/librdkafka && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd /opt/librdkafka/tests && \\\n    make build -j$(nproc) && \\\n    go get github.com/birdayz/kaf/cmd/kaf && \\\n    mv /root/go/bin/kaf /usr/local/bin/ && \\\n    mkdir /tmp/kcat && \\\n    curl -f -SL \"https://github.com/edenhill/kcat/archive/1.7.0.tar.gz\" | tar -xz --strip-components=1 -C /tmp/kcat && \\\n    cd /tmp/kcat && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(nproc) && \\\n    make install && \\\n    ldconfig\n\n# Install golang dependencies for kafka clients such as sarama\nRUN git -C /opt clone -b v1.32.0 --single-branch https://github.com/Shopify/sarama.git && \\\n    cd /opt/sarama/examples/interceptors && go mod tidy && go build && \\\n    cd /opt/sarama/examples/http_server && go mod tidy && go build && \\\n    cd /opt/sarama/examples/consumergroup && go mod tidy && go build && \\\n    cd /opt/sarama/examples/sasl_scram_client && go mod tidy && go build\n\n# Install our in-tree go tests\nCOPY --chown=0:0 tests/go /opt/redpanda-tests/go\nRUN cd /opt/redpanda-tests/go/sarama/produce_test && go mod tidy && go build\n\n# Install franz-go\nRUN git -C /opt clone -b v1.5.0 --single-branch https://github.com/twmb/franz-go.git && \\\n    cd /opt/franz-go && \\\n    cd /opt/franz-go/examples/bench && go mod tidy && go build\n\nRUN go install github.com/twmb/kcl@v0.8.0 && \\\n    mv /root/go/bin/kcl /usr/local/bin/\n\n# Install the kgo-verifier tool\nRUN git -C /opt clone https://github.com/redpanda-data/kgo-verifier.git && \\\n    cd /opt/kgo-verifier && git reset --hard dd7dce41012af14e62c1db23a0aa88ec6f39a5f1 && \\\n    go mod tidy && go build\n\n# Expose port 8080 for any http examples within clients\nEXPOSE 8080\n\n# copy ssh keys\nCOPY --chown=0:0 tests/docker/ssh /root/.ssh\n\n# install python dependencies and rptest package.\n# rptest package installed in editable mode so it can be overridden.\n# passes --force so system pip packages can be updated\nCOPY --chown=0:0 tests/setup.py /root/tests/\nRUN python3 -m pip install --upgrade --force pip && \\\n    python3 -m pip install --force --no-cache-dir -e /root/tests/\n\n# Install the OMB tool\nRUN git -C /opt clone https://github.com/redpanda-data/openmessaging-benchmark.git && \\\n    cd /opt/openmessaging-benchmark && git reset --hard 3f664931cb3f879ce11bf823d5bfdf91b07d989e && mvn package\n\n# Compile and install rust-based workload generator.\n# Install & remove compiler in the same step, to avoid bulking\n# out the resulting container image.\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \\\n    export PATH=\"/root/.cargo/bin:${PATH}\" && \\\n    git clone https://github.com/redpanda-data/client-swarm.git && \\\n    cd client-swarm && \\\n    git reset --hard 28790f8 && \\\n    cargo build --release && \\\n    cp target/release/client-swarm /usr/local/bin && \\\n    cd .. && rm -rf client-swarm && rm -rf /root/.cargo\n\n# Seastar addrress to line utility\nRUN apt update && \\\n    apt install --no-install-recommends -y \\\n      file && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /opt/scripts && \\\n    curl -f https://raw.githubusercontent.com/redpanda-data/seastar/2a9504b3238cba4150be59353bf8d0b3a01fe39c/scripts/addr2line.py -o /opt/scripts/addr2line.py && \\\n    curl -f https://raw.githubusercontent.com/redpanda-data/seastar/2a9504b3238cba4150be59353bf8d0b3a01fe39c/scripts/seastar-addr2line -o /opt/scripts/seastar-addr2line && \\\n    chmod +x /opt/scripts/seastar-addr2line\n\nCMD service ssh start && tail -f /dev/null\n"
}