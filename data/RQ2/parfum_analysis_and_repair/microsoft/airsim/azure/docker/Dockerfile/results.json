{
  "startTime": 1674252330324,
  "endTime": 1674252331013,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cudagl:9.0-devel\n\nRUN apt-get update\nRUN apt-get install \\\n\tsudo \\\n\tlibglu1-mesa-dev \\\n\txdg-user-dirs \\\n\tpulseaudio \\\n\tsudo \\\n\tx11-xserver-utils \\\n\tunzip \\\n\twget \\\n\tsoftware-properties-common \\\n\t-y --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-add-repository ppa:deadsnakes/ppa\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y \\\n\tpython3.6 \\\n\tpython3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN python3.6 -m pip install --upgrade pip\n\nRUN python3.6 -m pip install setuptools wheel\n\nRUN adduser --force-badname --disabled-password --gecos '' --shell /bin/bash airsim_user && \\ \n\techo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \\ \n\tadduser airsim_user sudo && \\ \n\tadduser airsim_user audio && \\ \n\tadduser airsim_user video\n\nUSER airsim_user\nWORKDIR /home/airsim_user\n\n# Change the following values to use a different AirSim binary\n# Also change the AIRSIM_EXECUTABLE variable in docker-entrypoint.sh\nENV AIRSIM_BINARY_ZIP_URL=https://github.com/microsoft/AirSim/releases/download/v1.3.1-linux/Blocks.zip\nENV AIRSIM_BINARY_ZIP_FILENAME=Blocks.zip\n\nENV SDL_VIDEODRIVER_VALUE=offscreen\nENV SDL_HINT_CUDA_DEVICE=0\n\n# Download and unzip the AirSim binary\nRUN wget -c $AIRSIM_BINARY_ZIP_URL\nRUN unzip $AIRSIM_BINARY_ZIP_FILENAME\nRUN rm $AIRSIM_BINARY_ZIP_FILENAME\n\n# Add the Python app to the image\nADD ./app /home/airsim_user/app\n\nWORKDIR /home/airsim_user\nRUN mkdir -p /home/airsim_user/Documents/AirSim\nADD ./app/settings.json /home/airsim_user/Documents/AirSim\nADD ./docker/docker-entrypoint.sh /home/airsim_user/docker-entrypoint.sh\n\nRUN sudo chown -R airsim_user /home/airsim_user\n\nWORKDIR /home/airsim_user/app\n\n# Install Python requirements\nRUN python3.6 -m pip install -r requirements.txt\n\nENTRYPOINT /home/airsim_user/docker-entrypoint.sh"
}