{
  "startTime": 1674248583255,
  "endTime": 1674248584250,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 164
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 7,
        "columnEnd": 146
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 21,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GO_VERSION=1.18\n\nFROM golang:${GO_VERSION}-stretch\n\n# Avoid warnings by switching to noninteractive\nENV DEBIAN_FRONTEND=noninteractive\n\nARG TERRAFORM_VERSION=1.1.8\nARG TFLINT_VERSION=0.35.0\nARG TERRAFORM_PROVIDER_AZUREDEVOPS_NAME=terraform-provider-azuredevops\n\nRUN apt-get update \\\n    && apt-get -y install --no-install-recommends apt-utils 2>&1 \\\n    # Verify git, process tools, lsb-release (common in install instructions for CLIs), unzip installed \\\n    && apt-get -y --no-install-recommends install git procps lsb-release unzip \\\n    # Install Editor\n    && apt-get install --no-install-recommends vim -y \\\n    # Install missing icu-devtools to be able to use liveshare. More info: https://stackoverflow.com/questions/58736399/how-to-get-vscode-liveshare-extension-working-when-running-inside-vscode-remote\n    && apt update && apt install --no-install-recommends icu-devtools -y \\\n    # Install Terraform, tflint\n    && mkdir -p /tmp/docker-downloads \\\n    && curl -f -sSL -o /tmp/docker-downloads/terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \\\n    && unzip /tmp/docker-downloads/terraform.zip \\\n    && mv terraform /usr/local/bin \\\n    && curl -f -sSL -o /tmp/docker-downloads/tflint.zip https://github.com/wata727/tflint/releases/download/v${TFLINT_VERSION}/tflint_linux_amd64.zip \\\n    && unzip /tmp/docker-downloads/tflint.zip \\\n    && mv tflint /usr/local/bin \\\n    && cd ~ \\\n    && rm -rf /tmp/docker-downloads \\\n    # Install goreleaser\n    && go install github.com/goreleaser/goreleaser@latest \\\n    #\n    # Clean up\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Enable go modules\nENV GO111MODULE=on\n\n# Install Go tools\nRUN \\\n    # --> Delve for debugging\n    go install github.com/go-delve/delve/cmd/dlv@v1.7.3 \\\n    # --> Go language server\n    && go install golang.org/x/tools/gopls@latest \\\n    # --> GolangCI-lint\n    && curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sed 's/tar -/tar --no-same-owner -/g' | sh -s -- -b $(go env GOPATH)/bin \\\n    #\n    # Clean up\n    && rm -rf /go/src/ && rm -rf /go/pkg\n\n# Customize bash\nRUN \\\n    # Git command prompt\n    git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1 \\\n    && echo \"if [ -f \\\"$HOME/.bash-git-prompt/gitprompt.sh\\\" ]; then GIT_PROMPT_ONLY_IN_REPO=1 && source $HOME/.bash-git-prompt/gitprompt.sh; fi\" >> \"/root/.bashrc\" \\\n    # Add alias\n    && echo \"alias tf=terraform\" >> \"/root/.bashrc\"\n\n# Switch back to dialog for any ad-hoc use of apt-get\nENV DEBIAN_FRONTEND=dialog\n"
}