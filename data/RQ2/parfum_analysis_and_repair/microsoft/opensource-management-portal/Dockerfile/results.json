{
  "startTime": 1674253164484,
  "endTime": 1674253165166,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 33,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG IMAGE_NAME=node:16-alpine\n\nFROM $IMAGE_NAME AS build\n\nARG NPM_TOKEN\n\n# Make Git available for NPM and rsync in the build image\nRUN apk add --update git && rm -rf /var/cache/apk/*\n\nWORKDIR /build\nCOPY package.json .\nCOPY package-lock.json .\n\n# Only if needed, copy .npmrc files into the container\n# COPY Dockerfile.npmrc /build/.npmrc\n\n# If you are doing local development and OK with your private tokens in the contains (CAREFUL):\n# DO NOT RECOMMEND:\n# COPY .npmrc /build/.npmrc\n\n# RUN npm install --production --verbose && mv node_modules production_node_modules\nRUN npm install --production && mv node_modules production_node_modules && npm cache clean --force;\n\nCOPY . .\n\n# Only if needed, copy .npmrc files into the container, again...\n# COPY Dockerfile.npmrc /build/.npmrc\n\n# Dev dependencies\n# RUN npm install --verbose && rm -rf .npmrc\nRUN npm install && rm -rf .npmrc && npm cache clean --force;\n\n# TypeScript build\nRUN npm run-script build\n\n# The open source project build needs: build the site assets sub-project\nRUN cd default-assets-package && npm install && npm run build && npm cache clean --force;\n\nFROM $IMAGE_NAME AS run\n\nENV IS_DOCKER=1 \\\n    NPM_CONFIG_LOGLEVEL=warn \\\n    DEBUG=startup \\\n    PORT=3000\n\nEXPOSE 3000\n\nWORKDIR /usr/src/repos\n\nRUN addgroup oss && adduser -D -G oss oss && chown -R oss:oss .\n\n# Production Node.js modules\nCOPY --from=build --chown=oss:oss /build/production_node_modules ./node_modules\n\n# People not using painless config may need\nCOPY --from=build --chown=oss:oss /build/data ./data\n\n# Copy built assets, app, config map\nCOPY --from=build --chown=oss:oss /build/dist ./\n\n# The open source project build needs: default assets should be placed\nCOPY --from=build --chown=oss:oss /build/default-assets-package ../default-assets-package\n\nCOPY --from=build --chown=oss:oss /build/config ./config\nCOPY --from=build --chown=oss:oss /build/views ./views\nCOPY --from=build --chown=oss:oss /build/package.json ./package.json\nCOPY --from=build --chown=oss:oss /build/jobs/reports/views ./jobs/reports/views\n\n# Reports are not actively working in the project, but keeping these files ready\nCOPY --from=build --chown=oss:oss /build/jobs/reports/exemptRepositories.json \\\n     /build/jobs/reports/organizationDefinitions.json \\\n     /build/jobs/reports/repositoryDefinitions.json \\\n     /build/jobs/reports/teamDefinitions.json \\\n     ./jobs/reports/\n\n# Host the app\nUSER oss\nENTRYPOINT [\"npm\", \"run-script\", \"start-in-container\"]\n"
}