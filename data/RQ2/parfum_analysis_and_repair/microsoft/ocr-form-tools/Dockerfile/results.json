{
  "startTime": 1674217704423,
  "endTime": 1674217705276,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 20,
        "columnEnd": 36
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "# Stage 1\nFROM node:12 AS build\n\n# Create app directory\nWORKDIR /usr/src/app\n\nENV PATH /usr/src/app/node_modules/.bin:$PATH\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\nCOPY yarn.lock ./\nRUN yarn install && yarn cache clean;\n\nCOPY . .\n\n# Build the app for production\nRUN yarn build && yarn cache clean;\n\n# Stage 2\n# Use Nginx to serve files\nFROM nginx:1.18.0-alpine\nWORKDIR /usr/src/app\n\nCOPY --from=build /usr/src/app/run.sh .\nCOPY --from=build /usr/src/app/build /usr/share/nginx/html\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY --from=build /usr/src/app/nginx.conf /etc/nginx/conf.d/nginx.conf\nEXPOSE 80\nENTRYPOINT [ \"./run.sh\" ]"
}