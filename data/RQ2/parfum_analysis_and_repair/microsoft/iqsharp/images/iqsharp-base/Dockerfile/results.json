{
  "startTime": 1674249024965,
  "endTime": 1674249025992,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 66,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The same image used by mybinder.org\nFROM python:3.7-slim-buster\n\n# install the notebook package\n# force pyzmq==19.0.2 due to incompatibility of IQ# with pyzmq>=20.0.0\n#       jinja2==3.0.3 due to incompatibility with nbconvert\n#       nbclient==0.6.3 and ipython=7.33.0 to avoid race conditions (see #520)\nRUN pip install --no-cache-dir --no-cache --upgrade pip && \\\n    pip install --no-cache-dir --no-cache notebook pyzmq==19.0.2 jinja2==3.0.3 nbclient==0.6.3 ipython==7.33.0\n\n# Install APT prerequisites.\nRUN apt-get update && \\\n    apt-get -y upgrade \\\n                       # Make sure SSL packages are up to date.\n                       libsasl2-2 && \\\n    apt-get -y --no-install-recommends install \\\n                       # Dependencies for the .NET Core SDK.\n                       wget \\\n                       pgp \\\n                       vim \\\n                       apt-transport-https \\\n                       # Dependencies for the Quantum Development Kit.\n                       # Note that we install them here to minimize the number\n                       # of layers.\n                       libomp5-7 \\\n                       # Dependency for QIR\n                       libc6 \\\n                       # Not strictly needed, but Git is useful for several\n                       # interactive scenarios, so we finish by adding it as\n                       # well. Thankfully, Git is a small dependency (~3 MiB)\n                       # given what we have already installed.\n                       git \\\n                       # Used to retrieve node version information.\n                       curl && \\\n    # Upgrade optional dependencies brought in by the previous step.\n    apt-get -y upgrade libidn2-0 && \\\n    # We clean the apt cache at the end of each apt command so that the caches\n    # don't get stored in each layer.\n    apt-get clean && rm -rf /var/lib/apt/lists/ && rm -rf /var/lib/apt/lists/*;\n\n# Trim down the size of the container by disabling the offline package\n# cache. See also: https://github.com/dotnet/dotnet-docker/issues/237\nENV NUGET_XMLDOC_MODE=skip \\\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true\n\n# Now that we have all the dependencies in place, we install the .NET Core SDK itself.\n# Notice that we're installing the SDK for both .NET Core 3.1 as well as .NET 6.0 for compatibility.\nRUN wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --batch --dearmor > microsoft.asc.gpg && \\\n    mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/ && \\\n    wget -q https://packages.microsoft.com/config/debian/9/prod.list && \\\n    mv prod.list /etc/apt/sources.list.d/microsoft-prod.list && \\\n    chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg && \\\n    chown root:root /etc/apt/sources.list.d/microsoft-prod.list && \\\n    apt-get -y update && \\\n    apt-get -y --no-install-recommends install dotnet-sdk-3.1=3.1.416-1 dotnet-sdk-6.0 && \\\n    apt-get -y --no-install-recommends install procps && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/ && rm -rf /var/lib/apt/lists/*;\n\n# Install prerequisites needed for integration with Live Share and VS Online.\n# TODO: Consider splitting this out into a new \"extended\" IQ# image.\nRUN wget -O /tmp/vsls-reqs https://aka.ms/vsls-linux-prereq-script && \\\n    chmod +x /tmp/vsls-reqs && /tmp/vsls-reqs && \\\n    rm /tmp/vsls-reqs && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/\n\n# create user with a home directory\n# Required for mybinder.org\nARG NB_USER=jovyan\nARG NB_UID=1000\nENV USER=${NB_USER} \\\n    UID=${NB_UID} \\\n    HOME=/home/${NB_USER} \\\n    IQSHARP_HOSTING_ENV=iqsharp-base \\\n    # Some ways of invoking this image will look at the $SHELL environment\n    # variable instead of chsh, so we set the new user's shell here as well.\n    SHELL=/bin/bash\n\nRUN adduser --disabled-password \\\n    --gecos \"Default user\" \\\n    --uid ${UID} \\\n    ${USER} && \\\n    # Set the new user's shell to be bash when logging in interactively.\n    chsh -s /bin/bash ${USER}\nWORKDIR ${HOME}\n\n# Provide local copies of all relevant packages.\nENV LOCAL_PACKAGES=${HOME}/.packages\nARG EXTRA_NUGET_SOURCES=\n# Add the local NuGet packages folder as a source.\nRUN mkdir -p ${HOME}/.nuget/NuGet && \\\n    echo \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\\\n          <configuration>\\n\\\n              <packageSources>\\n\\\n                  <add key=\\\"nuget\\\" value=\\\"https://api.nuget.org/v3/index.json\\\" />\\n\\\n                  <add key=\\\"context\\\" value=\\\"${LOCAL_PACKAGES}/nugets\\\" />\\n\\\n                  ${EXTRA_NUGET_SOURCES}\\n\\\n              </packageSources>\\n\\\n          </configuration>\\n\\\n    \" > ${HOME}/.nuget/NuGet/NuGet.Config && \\\n    echo \"Using NuGet.Config:\" && \\\n    cat ${HOME}/.nuget/NuGet/NuGet.Config\n# Add Python and NuGet packages from the build context\nADD nugets/*.nupkg ${LOCAL_PACKAGES}/nugets/\n# When adding wheels, use *-any.whl to make sure that platform-specific wheels\n# are not incorrectly added to the Docker image.\nADD wheels/*-any.whl ${LOCAL_PACKAGES}/wheels/\n# Give the notebook user ownership over the packages and config copied from\n# the context.\nRUN chown ${USER} -R ${LOCAL_PACKAGES}/ && \\\n    chown ${USER} -R ${LOCAL_PACKAGES}/ ${HOME}/.nuget\n\n# Install all wheels from the build context.\nRUN pip install --no-cache-dir $(ls ${LOCAL_PACKAGES}/wheels/*.whl)\n\n# Get the Azure CLI tool\nENV AZURE_CLI_VERSION \"2.14.2\"\n\nRUN curl -f -sL https://aka.ms/InstallAzureCLIDeb | bash\n\n# Get the az quantum extension\nRUN az extension add --source https://msquantumpublic.blob.core.windows.net/az-quantum-cli/quantum-latest-py3-none-any.whl --yes\n\n# Assign the .azure folder back to the notebook user so that they\n# can run az commands.\nRUN chown -R ${USER}:${USER} /home/${USER}/.azure\n\n# Switch to the notebook user to finish the installation.\nUSER ${USER}\n# Make sure that .NET Core is on the notebook users' path.\nENV PATH=$PATH:${HOME}/dotnet:${HOME}/.dotnet/tools \\\n    DOTNET_ROOT=${HOME}/dotnet\n# Install IQ# and the project templates, using the NuGet packages from the\n# build context.\nARG IQSHARP_VERSION\nRUN dotnet new -i \"Microsoft.Quantum.ProjectTemplates::0.25.218240\" && \\\n    dotnet tool install \\\n           --global \\\n           Microsoft.Quantum.IQSharp \\\n           --version ${IQSHARP_VERSION}\nRUN dotnet iqsharp install --user --path-to-tool=\"$(which dotnet-iqsharp)\"\n# Ensure that the necessary NuGet packages are cached.\nARG EXTRA_NUGET_PACKAGES=\nRUN echo \"Adding standard packages...\" && \\\n    dotnet new classlib -n \"foo\" -lang Q# && \\\n    echo \"Adding extra packages: ${EXTRA_NUGET_PACKAGES}...\" && \\\n    for p in ${EXTRA_NUGET_PACKAGES}; do \\\n        dotnet add foo package $p --version ${IQSHARP_VERSION} && \\\n        echo \"Added package: $p\"; \\\n    done && \\\n    rm -Rdf foo\n"
}