{
  "startTime": 1674255923916,
  "endTime": 1674255924610,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n# Licensed under the MIT License.\n\n# DisableDockerDetector \"No feasible secure solution for OSS repos yet\"\n\nFROM node:14.19.1-stretch-slim AS base\n\n# node-gyp dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    python3 \\\n    make \\\n    git \\\n    curl \\\n    g++ \\\n    openssl \\\n    libssl-dev \\\n    ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n# Add Tini\nENV TINI_VERSION v0.18.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\n# Copy over and build the server\nWORKDIR /usr/src/server\n\n# Copy over the package and package-lock and install prior to the other code to optimize Docker's file system cache on rebuilds\nCOPY package*.json ./\nCOPY lerna.json .\nCOPY lerna-package-lock.json .\n\nCOPY packages/gitresources/package*.json packages/gitresources/\nCOPY packages/kafka-orderer/package*.json packages/kafka-orderer/\nCOPY packages/lambdas-driver/package*.json packages/lambdas-driver/\nCOPY packages/lambdas/package*.json packages/lambdas/\nCOPY packages/local-server/package*.json packages/local-server/\nCOPY packages/memory-orderer/package*.json packages/memory-orderer/\nCOPY packages/routerlicious/package*.json packages/routerlicious/\nCOPY packages/routerlicious-base/package*.json packages/routerlicious-base/\nCOPY packages/services/package*.json packages/services/\nCOPY packages/services-client/package*.json packages/services-client/\nCOPY packages/services-core/package*.json packages/services-core/\nCOPY packages/services-ordering-kafkanode/package*.json packages/services-ordering-kafkanode/\nCOPY packages/services-ordering-rdkafka/package*.json packages/services-ordering-rdkafka/\nCOPY packages/services-ordering-zookeeper/package*.json packages/services-ordering-zookeeper/\nCOPY packages/services-shared/package*.json packages/services-shared/\nCOPY packages/services-telemetry/package*.json packages/services-telemetry/\nCOPY packages/services-utils/package*.json packages/services-utils/\nCOPY packages/test-utils/package*.json packages/test-utils/\nCOPY packages/protocol-base/package*.json packages/protocol-base/\n\n\n# Need to set the --unsafe-perm flag since we are doing the install as root. Consider adding an 'app' accout so we\n# can do the install as node but then switch to 'app' to run. As app we won't be able to write to installed files\n# and be able to change them.\nRUN npm install --unsafe-perm && npm cache clean --force;\n\n# And now copy over our actual code and build\nCOPY . .\n\n# Switch to the server folder and build\nWORKDIR /usr/src/server\nRUN npm run ci:build\n\n# Build that alfred uses\nFROM base AS runner\n\n# Expose the port the app runs under\nEXPOSE 3000\n\n# Don't run as root user\nUSER node\n\n# Node wasn't designed to be run as PID 1. Tini is a tiny init wrapper. You can also set --init on docker later than\n# 1.13 but Kubernetes is at 1.12 so we prefer tini for now.\nENTRYPOINT [\"/tini\", \"--\"]\n\n# And set the default command to start the server\nCMD [\"npm\", \"run\", \"alfred\"]\n"
}