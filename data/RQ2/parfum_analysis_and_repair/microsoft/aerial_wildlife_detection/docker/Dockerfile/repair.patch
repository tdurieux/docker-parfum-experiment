diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/microsoft/aerial_wildlife_detection/docker/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/microsoft/aerial_wildlife_detection/docker/Dockerfile/repaired.Dockerfile
index 60e0ef3..cf78e4d 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/microsoft/aerial_wildlife_detection/docker/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/microsoft/aerial_wildlife_detection/docker/Dockerfile/repaired.Dockerfile
@@ -23,28 +23,28 @@ ARG USER_UID=1000
 ARG USER_GID=$USER_UID
 
 # Setup basic packages, environment and user
-RUN apt-get update && apt-get -y install software-properties-common
+RUN apt-get update && apt-get -y --no-install-recommends install software-properties-common && rm -rf /var/lib/apt/lists/*;
 RUN apt-get update \
     && apt-get -y install --no-install-recommends apt-utils dialog 2>&1 \
     #
-    # Verify git, process tools, lsb-release (common in install instructions for CLIs) installed
-    && apt-get -y install git openssh-client iproute2 procps iproute2 lsb-release \
+    # Verify git, process tools, lsb-release (common in install instructions for CLIs) installed \
+    && apt-get -y --no-install-recommends install git openssh-client iproute2 procps iproute2 lsb-release \
     #
     # TBC if all of this is required (from AIDE scripts)
-    && apt-get -y install libpq-dev python-dev wget systemd \
+    && apt-get -y --no-install-recommends install libpq-dev python-dev wget systemd \
     #
     # Install pylint
     && /opt/conda/bin/pip install pylint \
     #
     # Libraries for OpenCV
-    && apt-get -y install ffmpeg libsm6 libxext6 python3-opencv \
+    && apt-get -y --no-install-recommends install ffmpeg libsm6 libxext6 python3-opencv \
     #
     # Create a non-root user to use if preferred - see https://aka.ms/vscode-remote/containers/non-root-user.
     && groupadd --gid $USER_GID $USERNAME \
     && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
     # [Optional] Add sudo support for the non-root user
-    && apt-get install -y sudo \
-    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\
+    && apt-get install --no-install-recommends -y sudo \
+    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
     && chmod 0440 /etc/sudoers.d/$USERNAME \
     #
     # Clean up
@@ -61,7 +61,7 @@ WORKDIR /home/$USERNAME/app
 COPY docker/requirements.txt docker/requirements.txt
 # COPY docker/lib/librabbitmq-2.0.0-cp37-cp37m-linux_x86_64.whl lib/librabbitmq-2.0.0-cp37-cp37m-linux_x86_64.whl
 
-RUN pip install -U -r docker/requirements.txt
+RUN pip install --no-cache-dir -U -r docker/requirements.txt
 # RUN pip install lib/librabbitmq-2.0.0-cp37-cp37m-linux_x86_64.whl
 
 # Detectron2: we can now install it directly through the requirements.txt file
@@ -79,26 +79,26 @@ RUN ln -fs /usr/share/zoneinfo/$LOC_REGION/$LOC_TIMEZONE /etc/localtime \
     # install packages
     && echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list \
     && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - \
-    && apt-get update && sudo apt-get install -y postgresql-$version \
+    && apt-get update && sudo apt-get install --no-install-recommends -y postgresql-$version \
     # # update the postgres configuration with the correct port (NOTE: IT NEEDS TO MATCH THE settings.ini configuration !!!)
     # && sudo sed -i "s/\s*port\s*=\s[0-9]*/port = 17685/g" /etc/postgresql/$version/main/postgresql.conf \
     # modify authentication
     # NOTE: you might want to manually adapt these commands for increased security; the following makes postgres listen to all global connections
     && sudo sed -i "s/\s*#\s*listen_addresses\s=\s'localhost'/listen_addresses = '\*'/g" /etc/postgresql/$version/main/postgresql.conf \
-    && echo "host    all             all             0.0.0.0/0               md5" | sudo tee -a /etc/postgresql/$version/main/pg_hba.conf > /dev/null
+    && echo "host    all             all             0.0.0.0/0               md5" | sudo tee -a /etc/postgresql/$version/main/pg_hba.conf > /dev/null && rm -rf /var/lib/apt/lists/*;
     #&& sudo systemctl enable postgresql
 
 # ============================ DB SERVER ONLY ENDS ======================================
 
 # ============================ AI BACKEND BEGINS ========================================
 # define RabbitMQ access credentials. NOTE: replace defaults with your own values
-RUN sudo apt-get update && sudo apt-get install -y rabbitmq-server \
+RUN sudo apt-get update && sudo apt-get install --no-install-recommends -y rabbitmq-server \
 # optional: if the port for RabbitMQ is anything else than 5672, execute the following line:
-    && port=5672   # replace with your port \
-    && sudo sed -i "s/^\s*#\s*NODE_PORT\s*=.*/NODE_PORT=$port/g" /etc/rabbitmq/rabbitmq-env.conf 
-    #&& sudo systemctl enable rabbitmq-server.service 
+    && port=5672 \
+    && sudo sed -i "s/^\s*#\s*NODE_PORT\s*=.*/NODE_PORT=$port/g" /etc/rabbitmq/rabbitmq-env.conf && rm -rf /var/lib/apt/lists/*;
+    #&& sudo systemctl enable rabbitmq-server.service
 
-RUN sudo apt-get update && sudo apt-get -y install redis-server \
+RUN sudo apt-get update && sudo apt-get -y --no-install-recommends install redis-server \
     # make sure Redis stores its messages in an accessible folder (we're using /var/lib/redis/aide.rdb here)
     && sudo sed -i "s/^\s*dir\s*.*/dir \/var\/lib\/redis/g" /etc/redis/redis.conf \
     && sudo sed -i "s/^\s*dbfilename\s*.*/dbfilename aide.rdb/g" /etc/redis/redis.conf \
@@ -115,7 +115,7 @@ RUN sudo apt-get update && sudo apt-get -y install redis-server \
     && port=6379 \
     && sudo sed -i "s/^\s*port\s*.*/port $port/g" /etc/redis/redis.conf \
     # ensure only ipv4 is bound (to work properly on Docker without changing it's configuration)
-    && sudo sed -i "s/^\s*bind\s*.*/bind 127.0.0.1/g" /etc/redis/redis.conf 
+    && sudo sed -i "s/^\s*bind\s*.*/bind 127.0.0.1/g" /etc/redis/redis.conf && rm -rf /var/lib/apt/lists/*;
     #&& sudo systemctl enable redis-server.service
 # ============================ AI BACKEND ENDS ==========================================