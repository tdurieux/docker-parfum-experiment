{
  "startTime": 1674253888716,
  "endTime": 1674253890086,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 30,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 32,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 32,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 30,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 32,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 32,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# AIDE main Dockerfile.\n#\n# 2020-22 Jaroslaw Szczegielniak, Benjamin Kellenberger\n#\n\nFROM pytorch/pytorch:1.9.0-cuda11.1-cudnn8-devel\n\n# Avoid warnings by switching to noninteractive\nENV DEBIAN_FRONTEND=noninteractive\n\n# temporary fix for NVIDIA rotating public keys at the moment:\n# https://forums.developer.nvidia.com/t/invalid-public-key-for-cuda-apt-repository/212901/6\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n\n# This Dockerfile adds a non-root user with sudo access. Use the \"remoteUser\"\n# property in devcontainer.json to use it. On Linux, the container user's GID/UIDs\n# will be updated to match your local UID/GID (when using the dockerFile property).\n# See https://aka.ms/vscode-remote/containers/non-root-user for details.\nARG USERNAME=aide\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Setup basic packages, environment and user\nRUN apt-get update && apt-get -y --no-install-recommends install software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update \\\n    && apt-get -y install --no-install-recommends apt-utils dialog 2>&1 \\\n    #\n    # Verify git, process tools, lsb-release (common in install instructions for CLIs) installed \\\n    && apt-get -y --no-install-recommends install git openssh-client iproute2 procps iproute2 lsb-release \\\n    #\n    # TBC if all of this is required (from AIDE scripts)\n    && apt-get -y --no-install-recommends install libpq-dev python-dev wget systemd \\\n    #\n    # Install pylint\n    && /opt/conda/bin/pip install pylint \\\n    #\n    # Libraries for OpenCV\n    && apt-get -y --no-install-recommends install ffmpeg libsm6 libxext6 python3-opencv \\\n    #\n    # Create a non-root user to use if preferred - see https://aka.ms/vscode-remote/containers/non-root-user.\n    && groupadd --gid $USER_GID $USERNAME \\\n    && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n    # [Optional] Add sudo support for the non-root user\n    && apt-get install --no-install-recommends -y sudo \\\n    && echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME \\\n    #\n    # Clean up\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# AIDE installation starts here\n# specify the root folder where you wish to install AIDE\nWORKDIR /home/$USERNAME/app\n\n# create environment (requires conda or miniconda) - on the second thought, I don't need environment for docker image\n# RUN conda create -y -n aide python=3.7\nCOPY docker/requirements.txt docker/requirements.txt\n# COPY docker/lib/librabbitmq-2.0.0-cp37-cp37m-linux_x86_64.whl lib/librabbitmq-2.0.0-cp37-cp37m-linux_x86_64.whl\n\nRUN pip install --no-cache-dir -U -r docker/requirements.txt\n# RUN pip install lib/librabbitmq-2.0.0-cp37-cp37m-linux_x86_64.whl\n\n# Detectron2: we can now install it directly through the requirements.txt file\n##TODO: temporary fix until detectron2's requirements are resolved\n#RUN pip install -U git+https://github.com/facebookresearch/fvcore.git\n#RUN pip install git+https://github.com/facebookresearch/detectron2.git\n\n# ============================ DB SERVER ONLY BEGINS ======================================\n# Setup PostgreSQL database\nENV LOC_REGION=Europe\nENV LOC_TIMEZONE=London\nRUN ln -fs /usr/share/zoneinfo/$LOC_REGION/$LOC_TIMEZONE /etc/localtime \\\n    # specify postgres version you wish to use (must be >= 9.5)\n    && version=10 \\\n    # install packages\n    && echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" | sudo tee /etc/apt/sources.list.d/pgdg.list \\\n    && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - \\\n    && apt-get update && sudo apt-get install --no-install-recommends -y postgresql-$version \\\n    # # update the postgres configuration with the correct port (NOTE: IT NEEDS TO MATCH THE settings.ini configuration !!!)\n    # && sudo sed -i \"s/\\s*port\\s*=\\s[0-9]*/port = 17685/g\" /etc/postgresql/$version/main/postgresql.conf \\\n    # modify authentication\n    # NOTE: you might want to manually adapt these commands for increased security; the following makes postgres listen to all global connections\n    && sudo sed -i \"s/\\s*#\\s*listen_addresses\\s=\\s'localhost'/listen_addresses = '\\*'/g\" /etc/postgresql/$version/main/postgresql.conf \\\n    && echo \"host    all             all             0.0.0.0/0               md5\" | sudo tee -a /etc/postgresql/$version/main/pg_hba.conf > /dev/null && rm -rf /var/lib/apt/lists/*;\n    #&& sudo systemctl enable postgresql\n\n# ============================ DB SERVER ONLY ENDS ======================================\n\n# ============================ AI BACKEND BEGINS ========================================\n# define RabbitMQ access credentials. NOTE: replace defaults with your own values\nRUN sudo apt-get update && sudo apt-get install --no-install-recommends -y rabbitmq-server \\\n# optional: if the port for RabbitMQ is anything else than 5672, execute the following line:\n    && port=5672 \\\n    && sudo sed -i \"s/^\\s*#\\s*NODE_PORT\\s*=.*/NODE_PORT=$port/g\" /etc/rabbitmq/rabbitmq-env.conf && rm -rf /var/lib/apt/lists/*;\n    #&& sudo systemctl enable rabbitmq-server.service\n\nRUN sudo apt-get update && sudo apt-get -y --no-install-recommends install redis-server \\\n    # make sure Redis stores its messages in an accessible folder (we're using /var/lib/redis/aide.rdb here)\n    && sudo sed -i \"s/^\\s*dir\\s*.*/dir \\/var\\/lib\\/redis/g\" /etc/redis/redis.conf \\\n    && sudo sed -i \"s/^\\s*dbfilename\\s*.*/dbfilename aide.rdb/g\" /etc/redis/redis.conf \\\n    # also tell systemd\n    && sudo mkdir -p /etc/systemd/system/redis.service.d \\\n    && echo -e \"[Service]\\nReadWriteDirectories=-/var/lib/redis\" | sudo tee -a /etc/systemd/system/redis.service.d/override.conf > /dev/null \\\n    && sudo mkdir -p /var/lib/redis \\\n    && sudo chown -R redis:redis /var/lib/redis \\\n    # disable persistence. In general, we don't need Redis to save snapshots as it is only used as a result\n    # (and therefore message) backend.\n    && sudo sed -i \"s/^\\s*save/# save /g\" /etc/redis/redis.conf \\\n    # optional: if the port is anything else than 6379, execute the following line:\n    # replace with your port\n    && port=6379 \\\n    && sudo sed -i \"s/^\\s*port\\s*.*/port $port/g\" /etc/redis/redis.conf \\\n    # ensure only ipv4 is bound (to work properly on Docker without changing it's configuration)\n    && sudo sed -i \"s/^\\s*bind\\s*.*/bind 127.0.0.1/g\" /etc/redis/redis.conf && rm -rf /var/lib/apt/lists/*;\n    #&& sudo systemctl enable redis-server.service\n# ============================ AI BACKEND ENDS ==========================================\n\n# download AIDE source code (from local repository)\nCOPY . .\nRUN chmod a+rx docker/container_init.sh && chmod a+rx AIDE.sh\n\n# Set to proper settings file\nENV PYTHONPATH=/home/${USERNAME}/app\nENV AIDE_CONFIG_PATH=/home/${USERNAME}/app/docker/settings.ini\nENV AIDE_MODULES=LabelUI,AIController,AIWorker,FileServer\n\nCMD bash /home/aide/app/docker/container_init.sh \\\n    && bash AIDE.sh start\n\n# Temporary command to prevent container from stopping if no command is privided\n# CMD tail -f /dev/null\n"
}