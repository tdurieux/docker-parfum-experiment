{
  "startTime": 1674218666800,
  "endTime": 1674218668223,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 140
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 117
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 117
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedDockerfile": "#-------------------------------------------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See https://go.microsoft.com/fwlink/?linkid=2090316 for license information.\n#-------------------------------------------------------------------------------------------------------------\n\nFROM golang:1.12-buster\n\nARG KubectlVersion=v1.16.2\nARG HelmVersion=v3.0.3\n\n# Avoid warnings by switching to noninteractive\nENV DEBIAN_FRONTEND=noninteractive\n\n# Configure apt, install packages and tools\nRUN apt-get update \\\n    && apt-get -y install --no-install-recommends apt-utils 2>&1 \\\n    # Verify git, process tools, lsb-release (common in install instructions for CLIs) installed \\\n    && apt-get -y --no-install-recommends install git procps lsb-release \\\n    # Install python\n    && apt-get -y install --no-install-recommends git openssl build-essential ca-certificates nano curl python python3-dev python3-pip python3-venv python3-setuptools python3-wheel \\\n    # Install pylint\n    && pip3 --disable-pip-version-check --no-cache-dir install pylint \\\n    # Install Editor\n    && apt-get install --no-install-recommends vim -y \\\n    # Clean up\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update \\\n    # Install Docker CE CLI \\\n    && apt-get install --no-install-recommends -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release \\\n    && curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | apt-key add - 2>/dev/null \\\n    && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable\" \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y docker-ce-cli \\\n    # Install kubectl\n    && curl -f -sSL -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$KubectlVersion/bin/linux/amd64/kubectl \\\n    && chmod +x /usr/local/bin/kubectl \\\n    # Install Helm\n    && curl -f https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | DESIRED_VERSION=$HelmVersion bash \\\n    && helm repo add stable https://kubernetes-charts.storage.googleapis.com/ && rm -rf /var/lib/apt/lists/*;\n\n\n# Enable go modules\nENV GO111MODULE=on\n\n# Install Go tools\nRUN \\\n    # --> Delve for debugging\n    go get github.com/go-delve/delve/cmd/dlv@v1.3.2 \\\n    # --> Go language server\n    && go get golang.org/x/tools/gopls@v0.2.1 \\\n    # --> Go symbols and outline for go to symbol support and test support \n    && go get github.com/acroca/go-symbols@v0.1.1 && go get github.com/ramya-rao-a/go-outline@7182a932836a71948db4a81991a494751eccfe77 \\\n    # --> GolangCI-lint\n    && curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sed 's/tar -/tar --no-same-owner -/g' | sh -s -- -b $(go env GOPATH)/bin \\\n    # --> Install Ginkgo\n    && go get github.com/onsi/ginkgo/ginkgo@v1.12.0 \\\n    # --> Install junit converter\n    && go get github.com/jstemmer/go-junit-report@v0.9.1 \\\n    && rm -rf /go/src/ && rm -rf /go/pkg\n\n# Enable bash completion\nRUN apt-get update && apt install --no-install-recommends -y bash-completion && echo \"source /etc/bash_completion\" >> \"/root/.bashrc\" && rm -rf /var/lib/apt/lists/*;\n\n# Verify git, process tools installed\nRUN apt-get -y --no-install-recommends install git procps wget nano zsh inotify-tools jq && rm -rf /var/lib/apt/lists/*;\nRUN wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh || true\n\n# Install golangci-linter\nRUN curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.21.0\n\nENV PATH=\"/usr/local/kubebuilder/bin:${PATH}\"\n\n# Set the default shell to bash instead of sh\nENV DATABRICKS_HOST \"\"\nENV DATABRICKS_TOKEN \"\"\n\nCOPY ./Makefile ./\nRUN make install-kind\nRUN make install-kubebuilder\nRUN make install-kustomize\nRUN make install-test-dependency\n# tidy up go packages\nRUN rm -rf /go/src/ && rm -rf /go/pkg\n\nENV SHELL /bin/bash\n\n# Save command line history\nRUN echo \"export HISTFILE=/root/commandhistory/.bash_history\" >> \"/root/.bashrc\" \\\n    && echo \"export PROMPT_COMMAND='history -a'\" >> \"/root/.bashrc\" \\\n    && mkdir -p /root/commandhistory \\\n    && touch /root/commandhistory/.bash_history\n\n# Add useful aliases\nRUN echo \"alias k=kubectl\" >> \"/root/.bashrc\"\n# Add autocomplete to kubectl\nRUN echo \"source <(kubectl completion bash)\" >> \"/root/.bashrc\"\nRUN echo \"source <(kubectl completion bash | sed 's/kubectl/k/g')\" >> \"/root/.bashrc\"\n# Add kubectx\nRUN git clone https://github.com/ahmetb/kubectx.git /root/.kubectx \\\n    && COMPDIR=$(pkg-config --variable=completionsdir bash-completion) \\\n    && ln -sf /root/.kubectx/completion/kubens.bash $COMPDIR/kubens \\\n    && ln -sf /root/.kubectx/completion/kubectx.bash $COMPDIR/kubectx\n\n# Git command prompt\nRUN git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1 \\\n    && echo \"if [ -f \\\"$HOME/.bash-git-prompt/gitprompt.sh\\\" ]; then GIT_PROMPT_ONLY_IN_REPO=1 && source $HOME/.bash-git-prompt/gitprompt.sh; fi\" >> \"/root/.bashrc\"\n\nENV PATH=\"/root/.kubectx:${PATH}\"\n\nCOPY ./locust/requirements.* ./\nCOPY ./.devcontainer/scripts/python_venv.sh ./\n\nRUN   bash -f ./python_venv.sh\n"
}