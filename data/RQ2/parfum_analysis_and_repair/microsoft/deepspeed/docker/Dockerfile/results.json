{
  "startTime": 1674253466076,
  "endTime": 1674253467508,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 8,
        "columnEnd": 52
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 8,
        "columnEnd": 150
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 8,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 123,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 8,
        "columnEnd": 66
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 8,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 8,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 8,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 8,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 8,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 116,
        "lineEnd": 122,
        "columnStart": 8,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-devel-ubuntu18.04\n\n##############################################################################\n# Temporary Installation Directory\n##############################################################################\nENV STAGE_DIR=/tmp\nRUN mkdir -p ${STAGE_DIR}\n\n##############################################################################\n# Installation/Basic Utilities\n##############################################################################\nRUN apt-get update && \\\n        apt-get install -y --no-install-recommends \\\n        software-properties-common build-essential autotools-dev \\\n        nfs-common pdsh \\\n        cmake g++ gcc \\\n        curl wget vim tmux emacs less unzip \\\n        htop iftop iotop ca-certificates openssh-client openssh-server \\\n        rsync iputils-ping net-tools sudo \\\n        llvm-9-dev && rm -rf /var/lib/apt/lists/*;\n\n##############################################################################\n# Installation Latest Git\n##############################################################################\nRUN add-apt-repository ppa:git-core/ppa -y && \\\n        apt-get update && \\\n        apt-get install --no-install-recommends -y git && \\\n        git --version && rm -rf /var/lib/apt/lists/*;\n\n##############################################################################\n# Client Liveness & Uncomment Port 22 for SSH Daemon\n##############################################################################\n# Keep SSH client alive from server side\nRUN echo \"ClientAliveInterval 30\" >> /etc/ssh/sshd_config\nRUN cp /etc/ssh/sshd_config ${STAGE_DIR}/sshd_config && \\\n        sed \"0,/^#Port 22/s//Port 22/\" ${STAGE_DIR}/sshd_config > /etc/ssh/sshd_config\n\n##############################################################################\n# Mellanox OFED\n##############################################################################\nENV MLNX_OFED_VERSION=4.6-1.0.1.1\nRUN apt-get install --no-install-recommends -y libnuma-dev && rm -rf /var/lib/apt/lists/*;\nRUN cd ${STAGE_DIR} && \\\n        wget -q -O - https://www.mellanox.com/downloads/ofed/MLNX_OFED-${MLNX_OFED_VERSION}/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu18.04-x86_64.tgz | tar xzf - && \\\n        cd MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu18.04-x86_64 && \\\n        ./mlnxofedinstall --user-space-only --without-fw-update --all -q && \\\n        cd ${STAGE_DIR} && \\\n        rm -rf ${STAGE_DIR}/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu18.04-x86_64*\n\n##############################################################################\n# nv_peer_mem\n##############################################################################\nENV NV_PEER_MEM_VERSION=1.1\nENV NV_PEER_MEM_TAG=1.1-0\nRUN mkdir -p ${STAGE_DIR} && \\\n        git clone https://github.com/Mellanox/nv_peer_memory.git --branch ${NV_PEER_MEM_TAG} ${STAGE_DIR}/nv_peer_memory && \\\n        cd ${STAGE_DIR}/nv_peer_memory && \\\n        ./build_module.sh && \\\n        cd ${STAGE_DIR} && \\\n        tar xzf ${STAGE_DIR}/nvidia-peer-memory_${NV_PEER_MEM_VERSION}.orig.tar.gz && \\\n        cd ${STAGE_DIR}/nvidia-peer-memory-${NV_PEER_MEM_VERSION} && \\\n        apt-get update && \\\n        apt-get install --no-install-recommends -y dkms && \\\n        dpkg-buildpackage -us -uc && \\\n        dpkg -i ${STAGE_DIR}/nvidia-peer-memory_${NV_PEER_MEM_TAG}_all.deb && rm ${STAGE_DIR}/nvidia-peer-memory_${NV_PEER_MEM_VERSION}.orig.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n##############################################################################\n# OPENMPI\n##############################################################################\nENV OPENMPI_BASEVERSION=4.0\nENV OPENMPI_VERSION=${OPENMPI_BASEVERSION}.1\nRUN cd ${STAGE_DIR} && \\\n        wget -q -O - https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASEVERSION}/openmpi-${OPENMPI_VERSION}.tar.gz | tar xzf - && \\\n        cd openmpi-${OPENMPI_VERSION} && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/openmpi-${OPENMPI_VERSION} && \\\n        make -j\"$(nproc)\" install && \\\n        ln -s /usr/local/openmpi-${OPENMPI_VERSION} /usr/local/mpi && \\\n        # Sanity check:\n        test -f /usr/local/mpi/bin/mpic++ && \\\n        cd ${STAGE_DIR} && \\\n        rm -r ${STAGE_DIR}/openmpi-${OPENMPI_VERSION}\nENV PATH=/usr/local/mpi/bin:${PATH} \\\n        LD_LIBRARY_PATH=/usr/local/lib:/usr/local/mpi/lib:/usr/local/mpi/lib64:${LD_LIBRARY_PATH}\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/mpi/bin/mpirun /usr/local/mpi/bin/mpirun.real && \\\n        echo '#!/bin/bash' > /usr/local/mpi/bin/mpirun && \\\n        echo 'mpirun.real --allow-run-as-root --prefix /usr/local/mpi \"$@\"' >> /usr/local/mpi/bin/mpirun && \\\n        chmod a+x /usr/local/mpi/bin/mpirun\n\n##############################################################################\n# Python\n##############################################################################\nENV DEBIAN_FRONTEND=noninteractive\nENV PYTHON_VERSION=3\nRUN apt-get install --no-install-recommends -y python3 python3-dev && \\\n        rm -f /usr/bin/python && \\\n        ln -s /usr/bin/python3 /usr/bin/python && \\\n        curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n        python get-pip.py && \\\n        rm get-pip.py && \\\n        pip install --no-cache-dir --upgrade pip && \\\n        # Print python an pip version\n        python -V && pip -V && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir pyyaml\nRUN pip install --no-cache-dir ipython\n\n##############################################################################\n# TensorFlow\n##############################################################################\nENV TENSORFLOW_VERSION=1.15.2\nRUN pip install --no-cache-dir tensorflow-gpu==${TENSORFLOW_VERSION}\n\n##############################################################################\n# Some Packages\n##############################################################################\nRUN apt-get update && \\\n        apt-get install -y --no-install-recommends \\\n        libsndfile-dev \\\n        libcupti-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        screen \\\n        libaio-dev && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir psutil \\\n        yappi \\\n        cffi \\\n        ipdb \\\n        pandas \\\n        matplotlib \\\n        py3nvml \\\n        pyarrow \\\n        graphviz \\\n        astor \\\n        boto3 \\\n        tqdm \\\n        sentencepiece \\\n        msgpack \\\n        requests \\\n        pandas \\\n        sphinx \\\n        sphinx_rtd_theme \\\n        scipy \\\n        numpy \\\n        sklearn \\\n        scikit-learn \\\n        nvidia-ml-py3 \\\n        mpi4py \\\n        cupy-cuda100\n\n##############################################################################\n## SSH daemon port inside container cannot conflict with host OS port\n###############################################################################\nENV SSH_PORT=2222\nRUN cat /etc/ssh/sshd_config > ${STAGE_DIR}/sshd_config && \\\n        sed \"0,/^#Port 22/s//Port ${SSH_PORT}/\" ${STAGE_DIR}/sshd_config > /etc/ssh/sshd_config\n\n##############################################################################\n# PyTorch\n##############################################################################\nENV PYTORCH_VERSION=1.2.0\nENV TORCHVISION_VERSION=0.4.0\nENV TENSORBOARDX_VERSION=1.8\nRUN pip install --no-cache-dir torch==${PYTORCH_VERSION}\nRUN pip install --no-cache-dir torchvision==${TORCHVISION_VERSION}\nRUN pip install --no-cache-dir tensorboardX==${TENSORBOARDX_VERSION}\n\n##############################################################################\n# PyYAML build issue\n# https://stackoverflow.com/a/53926898\n##############################################################################\nRUN rm -rf /usr/lib/python3/dist-packages/yaml && \\\n        rm -rf /usr/lib/python3/dist-packages/PyYAML-*\n\n##############################################################################\n## Add deepspeed user\n###############################################################################\n# Add a deepspeed user with user id 8877\n#RUN useradd --create-home --uid 8877 deepspeed\nRUN useradd --create-home --uid 1000 --shell /bin/bash deepspeed\nRUN usermod -aG sudo deepspeed\nRUN echo \"deepspeed ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n# # Change to non-root privilege\nUSER deepspeed\n\n##############################################################################\n# DeepSpeed\n##############################################################################\nRUN git clone https://github.com/microsoft/DeepSpeed.git ${STAGE_DIR}/DeepSpeed\nRUN cd ${STAGE_DIR}/DeepSpeed && \\\n        git checkout . && \\\n        git checkout master && \\\n        ./install.sh --pip_sudo\nRUN rm -rf ${STAGE_DIR}/DeepSpeed\nRUN python -c \"import deepspeed; print(deepspeed.__version__)\"\n"
}