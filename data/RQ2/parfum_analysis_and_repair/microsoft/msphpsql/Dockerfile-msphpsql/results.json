{
  "startTime": 1674250904742,
  "endTime": 1674250906781,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 23,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 23,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 28,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 28,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Download base image ubuntu 18.04\n\nFROM ubuntu:18.04\n\n# Update Ubuntu Software repository\nRUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository ppa:ondrej/php -y && \\\n    apt-get -y --no-install-recommends install \\\n    apt-transport-https \\\n    apt-utils \\\n    autoconf \\\n    curl \\\n    libcurl4 \\\n    g++ \\\n    gcc \\\n    git \\\n    lcov \\\n    libxml2-dev \\\n    locales \\\n    make \\\n    php7.3 \\\n    php7.3-dev \\\n    php7.3-intl \\\n    python-pip \\\n    re2c \\\n    unixodbc-dev \\\n    unzip && apt-get clean && \\\n    curl -f https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \\\n    curl -f https://packages.microsoft.com/config/ubuntu/18.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \\\n    apt-get -y update && \\\n    export ACCEPT_EULA=Y && apt-get -y --no-install-recommends install msodbcsql17 mssql-tools && \\\n    update-alternatives --set php /usr/bin/php7.3 && rm -rf /var/lib/apt/lists/*;\n\nARG PHPSQLDIR=/REPO/msphpsql-dev\nENV TEST_PHP_SQL_SERVER sql\nENV TEST_PHP_SQL_UID sa\nENV TEST_PHP_SQL_PWD Password123\n\n# update PATH after ODBC driver and tools are installed\nENV PATH=\"/opt/mssql-tools/bin:${PATH}\"\t\n\n# add locales for testing\nRUN sed -i 's/# en_US ISO-8859-1/en_US ISO-8859-1/g' /etc/locale.gen\nRUN sed -i 's/# fr_FR@euro ISO-8859-15/fr_FR@euro ISO-8859-15/g' /etc/locale.gen\nRUN sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen\nRUN sed -i 's/# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen\nRUN sed -i 's/# zh_CN GB2312/zh_CN GB2312/g' /etc/locale.gen\nRUN sed -i 's/# zh_CN.GB18030 GB18030/zh_CN.GB18030 GB18030/g' /etc/locale.gen\nRUN locale-gen\n\n# set locale to utf-8\n# RUN locale-gen en_US.UTF-8\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'\n\n# install coveralls (upgrade both pip and requests first)\nRUN python -m pip install --upgrade pip\nRUN python -m pip install --upgrade requests\nRUN python -m pip install cpp-coveralls\n\n# Either Install git / download zip (One can see other strategies : https://ryanfb.github.io/etc/2015/07/29/git_strategies_for_docker.html )\n#One option is to get source from zip file of repository.\n#another option is to copy source to build directory on image\nRUN mkdir -p $PHPSQLDIR\nCOPY . $PHPSQLDIR\nWORKDIR $PHPSQLDIR/source/\n\nRUN chmod +x ./packagize.sh\nRUN /bin/bash -c \"./packagize.sh\"\n\nRUN echo \"; priority=20\\nextension=sqlsrv.so\\n\" > /etc/php/7.3/mods-available/sqlsrv.ini\nRUN echo \"; priority=30\\nextension=pdo_sqlsrv.so\\n\" > /etc/php/7.3/mods-available/pdo_sqlsrv.ini\n\n# create a writable ini file for testing locales\nRUN echo '' > `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/99-overrides.ini\nRUN chmod 666 `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/99-overrides.ini\n\nWORKDIR $PHPSQLDIR/source/sqlsrv\nRUN /usr/bin/phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS=\"-lgcov\" CXXFLAGS=\"-O0 --coverage\" && make && make install\n\nWORKDIR $PHPSQLDIR/source/pdo_sqlsrv\nRUN /usr/bin/phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS=\"-lgcov\" CXXFLAGS=\"-O0 --coverage\" && make && make install\n\nRUN phpenmod sqlsrv pdo_sqlsrv\nRUN php --ri sqlsrv && php --ri pdo_sqlsrv\n\n# set name of sql server host to use\nWORKDIR $PHPSQLDIR/test/functional/pdo_sqlsrv\nRUN sed -i -e 's/TARGET_SERVER/sql/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_DATABASE/msphpsql_pdosqlsrv/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_USERNAME/'\"$TEST_PHP_SQL_UID\"'/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_PASSWORD/'\"$TEST_PHP_SQL_PWD\"'/g' MsSetup.inc\n\nWORKDIR $PHPSQLDIR/test/functional/sqlsrv\nRUN sed -i -e 's/TARGET_SERVER/sql/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_DATABASE/msphpsql_sqlsrv/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_USERNAME/'\"$TEST_PHP_SQL_UID\"'/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_PASSWORD/'\"$TEST_PHP_SQL_PWD\"'/g' MsSetup.inc\n\nWORKDIR $PHPSQLDIR\nRUN chmod +x ./entrypoint.sh\nCMD /bin/bash ./entrypoint.sh\n\nENV REPORT_EXIT_STATUS 1\nENV TEST_PHP_EXECUTABLE /usr/bin/php\n"
}