diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/microsoft/onnxruntime/orttraining/tools/amdgpu/Dockerfile.rocm3.7 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/microsoft/onnxruntime/orttraining/tools/amdgpu/Dockerfile.rocm3.7/repaired.Dockerfile
index b41e0bd..79bb9c1 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/microsoft/onnxruntime/orttraining/tools/amdgpu/Dockerfile.rocm3.7
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/microsoft/onnxruntime/orttraining/tools/amdgpu/Dockerfile.rocm3.7/repaired.Dockerfile
@@ -1,21 +1,19 @@
-# docker build --network=host --file Dockerfile.rocm3.7 --tag ort:rocm3.7-ort-dev .
-
 FROM rocm/tensorflow:rocm3.7-tf2.1-dev
 
-RUN curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
+RUN curl -f https://bazel.build/bazel-release.pub.gpg | apt-key add -
 RUN cat /dev/null > /etc/apt/sources.list.d/rocm.list
 RUN echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/3.7/ xenial main' | tee /etc/apt/sources.list.d/rocm.list
 
 RUN apt-get -y update
-RUN apt-get -y install apt-utils
-RUN apt-get -y install build-essential autotools-dev \
+RUN apt-get -y --no-install-recommends install apt-utils && rm -rf /var/lib/apt/lists/*;
+RUN apt-get -y --no-install-recommends install build-essential autotools-dev \
     make git curl vim wget rsync jq openssh-server openssh-client sudo \
     iputils-ping net-tools ethtool libcap2 \
     automake autoconf libtool flex doxygen \
     perl lsb-release iproute2 pciutils graphviz \
     bc tar git bash pbzip2 pv bzip2 cabextract \
     g++ gcc \
-    && apt-get autoremove
+    && apt-get autoremove && rm -rf /var/lib/apt/lists/*;
 
 # sh
 RUN rm /bin/sh && ln -s /bin/bash /bin/sh
@@ -71,7 +69,7 @@ RUN mkdir -p $GITHUB_DIR
 
 # UCX
 WORKDIR $GITHUB_DIR
-RUN apt-get -y update && apt-get -y --no-install-recommends install libnuma-dev
+RUN apt-get -y update && apt-get -y --no-install-recommends install libnuma-dev && rm -rf /var/lib/apt/lists/*;
 ARG UCX_VERSION=1.9.0-rc3
 ENV UCX_DIR=$WORKSPACE_DIR/ucx-$UCX_VERSION
 RUN git clone https://github.com/openucx/ucx.git \
@@ -115,7 +113,7 @@ RUN mv $OPENMPI_DIR/bin/mpirun $OPENMPI_DIR/bin/mpirun.real && \
     chmod a+x $OPENMPI_DIR/bin/mpirun
 
 # install mpi4py (be sure to link existing /opt/openmpi-xxx)
-RUN CC=mpicc MPICC=mpicc pip install mpi4py --no-binary mpi4py
+RUN CC=mpicc MPICC=mpicc pip --no-cache-dir install mpi4py --no-binary mpi4py
 
 ARG CACHE_DATA=2020-12-06
 
@@ -136,7 +134,7 @@ RUN git clone --recursive https://github.com/microsoft/onnxruntime.git \
     --nccl_home /opt/rocm \
 	--enable_training \
   && test -f $ORT_DIR/build/Release/onnxruntime_training_bert \
-  && pip install $ORT_DIR/build/Release/dist/*.whl \
+  && pip install --no-cache-dir $ORT_DIR/build/Release/dist/*.whl \
   && ldconfig
 
 # ONNX Runtime Training Examples
@@ -164,7 +162,7 @@ RUN git clone https://github.com/xianyi/OpenBLAS.git \
   && make install PREFIX=$OpenBLAS_DIR
 
 # PyTorch
-RUN pip install pyyaml
+RUN pip install --no-cache-dir pyyaml
 RUN for fn in $(find /opt/rocm/ -name \*.cmake ); do sed --in-place='~' 's/find_dependency(hip)/find_dependency(HIP)/' $fn ; done
 WORKDIR $GITHUB_DIR
 # ARG PYTORCH_VERSION=1.6.0
@@ -190,7 +188,7 @@ ADD script ${WORKSPACE_DIR}/script
 RUN chmod a+x ${WORKSPACE_DIR}/script/run_bert.sh
 
 # add locale en_US.UTF-8
-RUN apt-get install -y locales
+RUN apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;
 RUN locale-gen en_US.UTF-8
 
 # Workaround an issue in AMD compiler which generates poor GPU ISA