{
  "startTime": 1674255889307,
  "endTime": 1674255890208,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Stage 1 (production base)\n# This gets our prod dependencies installed and out of the way\nFROM node:10-alpine as base\n\nEXPOSE 3000\n\nENV NODE_ENV=production\n\nWORKDIR /opt\n\nCOPY package*.json ./\n\n# we use npm ci here so only the package-lock.json file is used\nRUN npm config list \\\n    && npm ci \\\n    && npm cache clean --force\n\n\n## Stage 2 (development)\n# we don't COPY in this stage because for dev you'll bind-mount anyway\n# this saves time when building locally for dev via docker-compose\nFROM base as dev\n\nENV NODE_ENV=development\n\nENV PATH=/opt/node_modules/.bin:$PATH\n\nWORKDIR /opt\n\nRUN npm install --only=development && npm cache clean --force;\n\nWORKDIR /opt/app\n\nCMD [\"nodemon\", \"./bin/www\", \"--inspect=0.0.0.0:9229\"]\n\n\n## Stage 3 (copy in source)\n# This gets our source code into builder for use in next two stages\n# It gets its own stage so we don't have to copy twice\n# this stage starts from the first one and skips the last two\nFROM base as source\n\nWORKDIR /opt/app\n\nCOPY . .\n\n\n## Stage 4 (testing)\n# use this in automated CI\n# it has prod and dev npm dependencies\n# In 18.09 or older builder, this will always run\n# In BuildKit, this will be skipped by default\nFROM source as test\n\nENV NODE_ENV=development\nENV PATH=/opt/node_modules/.bin:$PATH\n\n# this copies all dependencies (prod+dev)\nCOPY --from=dev /opt/node_modules /opt/node_modules\n\n# run linters as part of build\n# be sure they are installed with devDependencies\nRUN eslint .\n\n# run unit tests as part of build\nRUN npm test\n\n# run integration testing with docker-compose later\nCMD [\"npm\", \"run\", \"int-test\"]\n\n\n## Stage 5 (default, production)\n# this will run by default if you don't include a target\n# it has prod-only dependencies\n# In BuildKit, this is skipped for dev and test stages\nFROM source as prod\n\nCMD [\"node\", \"./bin/www\"]\n"
}