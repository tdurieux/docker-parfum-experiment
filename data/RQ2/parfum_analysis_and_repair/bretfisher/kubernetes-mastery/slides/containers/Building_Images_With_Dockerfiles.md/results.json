{
  "startTime": 1674250895662,
  "endTime": 1674250896531,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "class: title\n\n# Building Docker images with a Dockerfile\n\n![Construction site with containers](images/title-building-docker-images-with-a-dockerfile.jpg)\n\n---\n\n## Objectives\n\nWe will build a container image automatically, with a `Dockerfile`.\n\nAt the end of this lesson, you will be able to:\n\n* Write a `Dockerfile`.\n\n* Build an image from a `Dockerfile`.\n\n---\n\n## `Dockerfile` overview\n\n* A `Dockerfile` is a build recipe for a Docker image.\n\n* It contains a series of instructions telling Docker how an image is constructed.\n\n* The `docker build` command builds an image from a `Dockerfile`.\n\n---\n\n## Writing our first `Dockerfile`\n\nOur Dockerfile must be in a **new, empty directory**.\n\n1. Create a directory to hold our `Dockerfile`.\n\n```bash\n$ mkdir myimage\n```\n\n2. Create a `Dockerfile` inside this directory.\n\n```bash\n$ cd myimage\n$ vim Dockerfile\n```\n\nOf course, you can use any other editor of your choice.\n\n---\n\n## Type this into our Dockerfile...\n\n```dockerfile\nFROM ubuntu\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends figlet && rm -rf /var/lib/apt/lists/*;\n```\n\n* `FROM` indicates the base image for our build.\n\n* Each `RUN` line will be executed by Docker during the build.\n\n* Our `RUN` commands **must be non-interactive.**\n  <br/>(No input can be provided to Docker during the build.)\n\n* In many cases, we will add the `-y` flag to `apt-get`.\n\n---\n\n## Build it!\n\nSave our file, then execute:\n\n```bash\n$ docker build -t figlet .\n```\n\n* `-t` indicates the tag to apply to the image.\n\n* `.` indicates the location of the *build context*.\n\nWe will talk more about the build context later.\n\nTo keep things simple for now: this is the directory where our Dockerfile is located.\n\n---\n\n## What happens when we build the image?\n\nThe output of `docker build` looks like this:\n\n.small[\n```bash\ndocker build -t figlet .\nSending build context to Docker daemon  2.048kB\nStep 1/3 : FROM ubuntu\n ---> f975c5035748\nStep 2/3 : RUN apt-get update\n ---> Running in e01b294dbffd\n(...output of the RUN command...)\nRemoving intermediate container e01b294dbffd\n ---> eb8d9b561b37\nStep 3/3 : RUN apt-get install figlet\n ---> Running in c29230d70f9b\n(...output of the RUN command...)\nRemoving intermediate container c29230d70f9b\n ---> 0dfd7a253f21\nSuccessfully built 0dfd7a253f21\nSuccessfully tagged figlet:latest\n```\n]\n\n* The output of the `RUN` commands has been omitted.\n* Let's explain what this output means.\n\n---\n\n## Sending the build context to Docker\n\n```bash\nSending build context to Docker daemon 2.048 kB\n```\n\n* The build context is the `.` directory given to `docker build`.\n\n* It is sent (as an archive) by the Docker client to the Docker daemon.\n\n* This allows to use a remote machine to build using local files.\n\n* Be careful (or patient) if that directory is big and your link is slow.\n\n* You can speed up the process with a [`.dockerignore`](https://docs.docker.com/engine/reference/builder/#dockerignore-file) file\n\n  * It tells docker to ignore specific files in the directory\n\n  * Only ignore files that you won't need in the build context!\n\n---\n\n## Executing each step\n\n```bash\nStep 2/3 : RUN apt-get update\n ---> Running in e01b294dbffd\n(...output of the RUN command...)\nRemoving intermediate container e01b294dbffd\n ---> eb8d9b561b37\n```\n\n* A container (`e01b294dbffd`) is created from the base image.\n\n* The `RUN` command is executed in this container.\n\n* The container is committed into an image (`eb8d9b561b37`).\n\n* The build container (`e01b294dbffd`) is removed.\n\n* The output of this step will be the base image for the next one.\n\n---\n\n## The caching system\n\nIf you run the same build again, it will be instantaneous. Why?\n\n* After each build step, Docker takes a snapshot of the resulting image.\n\n* Before executing a step, Docker checks if it has already built the same sequence.\n\n* Docker uses the exact strings defined in your Dockerfile, so:\n\n  * `RUN apt-get install figlet cowsay `\n    <br/> is different from\n    <br/> `RUN apt-get install cowsay figlet`\n\n  * `RUN apt-get update` is not re-executed when the mirrors are updated\n\nYou can force a rebuild with `docker build --no-cache ...`.\n\n---\n\n## Running the image\n\nThe resulting image is not different from the one produced manually.\n\n```bash\n$ docker run -ti figlet\nroot@91f3c974c9a1:/# figlet hello\n _          _ _      \n| |__   ___| | | ___ \n| '_ \\ / _ \\ | |/ _ \\ \n| | | |  __/ | | (_) |\n|_| |_|\\___|_|_|\\___/\n```\n\n\nYay! .emoji[ðŸŽ‰]\n\n---\n\n## Using image and viewing history\n\nThe `history` command lists all the layers composing an image.\n\nFor each layer, it shows its creation time, size, and creation command.\n\nWhen an image was built with a Dockerfile, each layer corresponds to\na line of the Dockerfile.\n\n```bash\n$ docker history figlet\nIMAGE         CREATED            CREATED BY                     SIZE\nf9e8f1642759  About an hour ago  /bin/sh -c apt-get install fi  1.627 MB\n7257c37726a1  About an hour ago  /bin/sh -c apt-get update      21.58 MB\n07c86167cdc4  4 days ago         /bin/sh -c #(nop) CMD [\"/bin   0 B\n<missing>     4 days ago         /bin/sh -c sed -i 's/^#\\s*\\(   1.895 kB\n<missing>     4 days ago         /bin/sh -c echo '#!/bin/sh'    194.5 kB\n<missing>     4 days ago         /bin/sh -c #(nop) ADD file:b   187.8 MB\n```\n\n---\n\nclass: extra-details\n\n## Why `sh -c`?\n\n* On UNIX, to start a new program, we need two system calls:\n\n  - `fork()`, to create a new child process;\n\n  - `execve()`, to replace the new child process with the program to run.\n\n* Conceptually, `execve()` works like this:\n\n  `execve(program, [list, of, arguments])`\n\n* When we run a command, e.g. `ls -l /tmp`, something needs to parse the command.\n\n  (i.e. split the program and its arguments into a list.)\n\n* The shell is usually doing that.\n\n  (It also takes care of expanding environment variables and special things like `~`.)\n\n---\n\nclass: extra-details\n\n## Why `sh -c`?\n\n* When we do `RUN ls -l /tmp`, the Docker builder needs to parse the command.\n\n* Instead of implementing its own parser, it outsources the job to the shell.\n\n* That's why we see `sh -c ls -l /tmp` in that case.\n\n* But we can also do the parsing jobs ourselves.\n\n* This means passing `RUN` a list of arguments.\n\n* This is called the *exec syntax*.\n\n---\n\n## Shell syntax vs exec syntax\n\nDockerfile commands that execute something can have two forms:\n\n* plain string, or *shell syntax*:\n  <br/>`RUN apt-get install figlet`\n\n* JSON list, or *exec syntax*:\n  <br/>`RUN [\"apt-get\", \"install\", \"figlet\"]`\n\nWe are going to change our Dockerfile to see how it affects the resulting image.\n\n---\n\n## Using exec syntax in our Dockerfile\n\nLet's change our Dockerfile as follows!\n\n```dockerfile\nFROM ubuntu\nRUN apt-get update\nRUN [\"apt-get\", \"install\", \"figlet\"]\n```\n\nThen build the new Dockerfile.\n\n```bash\n$ docker build -t figlet .\n```\n\n---\n\n## History with exec syntax\n\nCompare the new history:\n\n```bash\n$ docker history figlet\nIMAGE         CREATED            CREATED BY                     SIZE\n27954bb5faaf  10 seconds ago     apt-get install figlet         1.627 MB\n7257c37726a1  About an hour ago  /bin/sh -c apt-get update      21.58 MB\n07c86167cdc4  4 days ago         /bin/sh -c #(nop) CMD [\"/bin   0 B\n<missing>     4 days ago         /bin/sh -c sed -i 's/^#\\s*\\(   1.895 kB\n<missing>     4 days ago         /bin/sh -c echo '#!/bin/sh'    194.5 kB\n<missing>     4 days ago         /bin/sh -c #(nop) ADD file:b   187.8 MB\n```\n\n* Exec syntax specifies an *exact* command to execute.\n\n* Shell syntax specifies a command to be wrapped within `/bin/sh -c \"...\"`.\n\n---\n\n## When to use exec syntax and shell syntax\n\n* shell syntax:\n\n  * is easier to write\n  * interpolates environment variables and other shell expressions\n  * creates an extra process (`/bin/sh -c ...`) to parse the string\n  * requires `/bin/sh` to exist in the container\n\n* exec syntax:\n\n  * is harder to write (and read!)\n  * passes all arguments without extra processing\n  * doesn't create an extra process\n  * doesn't require `/bin/sh` to exist in the container\n\n---\n\n## Pro-tip: the `exec` shell built-in\n\nPOSIX shells have a built-in command named `exec`.\n\n`exec` should be followed by a program and its arguments.\n\nFrom a user perspective:\n\n- it looks like the shell exits right away after the command execution,\n\n- in fact, the shell exits just *before* command execution;\n\n- or rather, the shell gets *replaced* by the command.\n\n---\n\n## Example using `exec`\n\n```dockerfile\nCMD exec figlet -f script hello\n```\n\nIn this example, `sh -c` will still be used, but\n`figlet` will be PID 1 in the container.\n\nThe shell gets replaced by `figlet` when `figlet` starts execution.\n\nThis allows to run processes as PID 1 without using JSON.\n"
}