{
  "startTime": 1674251370182,
  "endTime": 1674251371084,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# if you're doing anything beyond your local machine, please pin this to a specific version at https://hub.docker.com/_/node/\n# FROM node:14-alpine also works here for a smaller image\nFROM node:14-slim\n\n# set our node environment, either development or production\n# defaults to production, compose overrides this to development on build and run\nARG NODE_ENV=production\nENV NODE_ENV $NODE_ENV\n\n# default to port 3000 for node, and 9229 and 9230 (tests) for debug\nARG PORT=3000\nENV PORT $PORT\nEXPOSE $PORT 9229 9230\n\n# you'll likely want the latest npm, regardless of node version, for speed and fixes\n# but pin this version for the best stability\nRUN npm i npm@latest -g && npm cache clean --force;\n\n# install dependencies first, in a different location for easier app bind mounting for local development\n# due to default /opt permissions we have to create the dir with root and change perms\nRUN mkdir /opt/node_app && chown node:node /opt/node_app\nWORKDIR /opt/node_app\n# the official node image provides an unprivileged user as a security best practice\n# but we have to manually enable it. We put it here so npm installs dependencies as the same\n# user who runs the app.\n# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#non-root-user\nUSER node\nCOPY --chown=node:node package.json package-lock.json* ./\nRUN npm install --no-optional && npm cache clean --force\nENV PATH /opt/node_app/node_modules/.bin:$PATH\n\n# check every 30s to ensure this service returns HTTP 200\nHEALTHCHECK --interval=30s CMD node healthcheck.js\n\n# copy in our source code last, as it changes the most\n# copy in as node user, so permissions match what we need\nWORKDIR /opt/node_app/app\nCOPY --chown=node:node . .\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n\n# if you want to use npm start instead, then use `docker run --init in production`\n# so that signals are passed properly. Note the code in index.js is needed to catch Docker signals\n# using node here is still more graceful stopping then npm with --init afaik\n# I still can't come up with a good production way to run with npm and graceful shutdown\nCMD [ \"node\", \"./bin/www\" ]\n"
}