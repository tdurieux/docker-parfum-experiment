{
  "startTime": 1674217664449,
  "endTime": 1674217665501,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 161
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 18,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 7,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 111
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 111
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:jessie\n\nRUN apt-get update && apt-get install --no-install-recommends -y unzip automake build-essential curl file pkg-config git python libtool && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt/android\n## INSTALL ANDROID SDK\nRUN curl -f -s -O http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz \\\n    && tar --no-same-owner -xzf android-sdk_r24.4.1-linux.tgz \\\n    && rm -f android-sdk_r24.4.1-linux.tgz\n\n## INSTALL ANDROID NDK\nENV ANDROID_NDK_REVISION 14\nRUN curl -f -s -O https://dl.google.com/android/repository/android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip \\\n    && unzip android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip \\\n    && rm -f android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip\n\nENV WORKDIR /opt/android\nENV ANDROID_SDK_ROOT ${WORKDIR}/android-sdk-linux\nENV ANDROID_NDK_ROOT ${WORKDIR}/android-ndk-r${ANDROID_NDK_REVISION}\n\n## INSTALL BOOST\nENV BOOST_VERSION 1_62_0\nENV BOOST_VERSION_DOT 1.62.0\nRUN curl -f -s -L -o  boost_${BOOST_VERSION}.tar.bz2 https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION_DOT}/boost_${BOOST_VERSION}.tar.bz2/download \\\n    && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n    && rm -f /usr/boost_${BOOST_VERSION}.tar.bz2 \\\n    && cd boost_${BOOST_VERSION} \\\n    && ./bootstrap.sh\n\nENV TOOLCHAIN_DIR ${WORKDIR}/toolchain-arm\nRUN ${ANDROID_NDK_ROOT}/build/tools/make_standalone_toolchain.py \\\n         --arch arm64 \\\n         --api 21 \\\n         --install-dir $TOOLCHAIN_DIR \\\n         --stl=libc++\nENV PATH $TOOLCHAIN_DIR/aarch64-linux-android/bin:$TOOLCHAIN_DIR/bin:$PATH\n\n## Build BOOST\nRUN cd boost_${BOOST_VERSION} \\\n    && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --build-dir=android64 --stagedir=android64 toolset=clang threading=multi threadapi=pthread target-os=android stage\n\n#INSTALL cmake (avoid 3.7 : https://github.com/android-ndk/ndk/issues/254)\nENV CMAKE_VERSION 3.6.3\nRUN cd /usr \\\n    && curl -f -s -O https://cmake.org/files/v3.6/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz \\\n    && tar -xzf /usr/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz \\\n    && rm -f /usr/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz\nENV PATH /usr/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:$PATH\n\n#Note : we build openssl because the default lacks DSA1\n\n# download, configure and make Zlib\nENV ZLIB_VERSION 1.2.11\nRUN curl -f -s -O http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz \\\n    && tar -xzf zlib-${ZLIB_VERSION}.tar.gz \\\n    && rm zlib-${ZLIB_VERSION}.tar.gz \\\n    && mv zlib-${ZLIB_VERSION} zlib \\\n    && cd zlib && CC=clang CXX=clang++ ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --static \\\n    && make\n# open ssl\nENV OPENSSL_VERSION 1.0.2j\nRUN curl -f -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n    && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n    && rm openssl-${OPENSSL_VERSION}.tar.gz \\\n    && cd openssl-${OPENSSL_VERSION} \\\n    && sed -i -e \"s/mandroid/target\\ aarch64\\-none\\-linux\\-android/\" Configure \\\n    && CC=clang CXX=clang++ \\\n           ./Configure android \\\n           no-asm \\\n           no-shared --static \\\n           --with-zlib-include=${WORKDIR}/zlib/include --with-zlib-lib=${WORKDIR}/zlib/lib \\\n    && make build_crypto build_ssl \\\n    && cd .. && mv openssl-${OPENSSL_VERSION}  openssl\n\nRUN git clone https://github.com/zeromq/zeromq4-1.git \\\n    && git clone https://github.com/zeromq/cppzmq.git \\\n    && cd zeromq4-1 \\\n    && ./autogen.sh \\\n    && CC=clang CXX=clang++ ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=aarch64-linux-android \\\n    && make\n\nRUN ln -s /opt/android/openssl/libcrypto.a /opt/android/openssl/libssl.a ${TOOLCHAIN_DIR}/aarch64-linux-android/lib\n\nRUN git clone https://github.com/monero-project/monero.git \\\n    && cd monero \\\n    && mkdir -p build/release \\\n    && cd build/release \\\n    && CC=clang CXX=clang++ \\\n         BOOST_ROOT=${WORKDIR}/boost_${BOOST_VERSION} BOOST_LIBRARYDIR=${WORKDIR}/boost_${BOOST_VERSION}/android64/lib/ \\\n         OPENSSL_ROOT_DIR=${WORKDIR}/openssl/ \\\n         CMAKE_INCLUDE_PATH=${WORKDIR}/cppzmq/ \\\n         CMAKE_LIBRARY_PATH=${WORKDIR}/zeromq4-1/.libs \\\n         CXXFLAGS=\"-I ${WORKDIR}/zeromq4-1/include/\" \\\n         cmake -D BUILD_TESTS=OFF -D ARCH=\"armv8-a\" -D STATIC=ON -D BUILD_64=ON -D CMAKE_BUILD_TYPE=release -D ANDROID=true -D INSTALL_VENDORED_LIBUNBOUND=ON -D BUILD_TAG=\"android\" ../.. \\\n    && make -j3\n"
}