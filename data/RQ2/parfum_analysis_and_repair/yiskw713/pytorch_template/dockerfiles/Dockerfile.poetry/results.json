{
  "startTime": 1674255524472,
  "endTime": 1674255525547,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_ENV=python:3.9.9-slim\n\n# build stage\nFROM $PYTHON_ENV as build\n\nCOPY ./pyproject.toml /app/pyproject.toml\nRUN apt update && \\\n    apt install --no-install-recommends -y \\\n    ffmpeg libsm6 libxext6 ninja-build libglib2.0-0 libsm6 libxrender-dev gcc && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /app\n# install python dependencies\nRUN python -m pip install --upgrade pip && \\\n    python -m pip install poetry && \\\n    poetry config virtualenvs.in-project true && \\\n    poetry install --no-dev && \\\n    rm -rf ~/.cache\n\n# install python dependencies with poethepoet\n# some packages cannot installed with poetry (e.g. pytorch)\nRUN poetry add poethepoet && \\\n    poetry run poe install_torch && \\\n    poetry run poe install_sklearn && \\\n    poetry remove poethepoet && \\\n    rm -rf ~/.cache\n\n# development stage\nFROM $BPYTHON_$PYTHON_ENV as development\n\nCOPY --from=build /app/pyproject.toml /app/pyproject.toml\nCOPY --from=build /app/poetry.lock /app/poetry.lock\nCOPY --from=build /app/.venv /app/.venv\nENV PATH=/app/.venv/bin:$PATH\n\nCOPY --from=build /usr/bin/* /usr/bin/\nRUN apt update && \\\n    apt install --no-install-recommends -y git vim && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /app\nRUN python -m pip install --upgrade pip && \\\n    python -m pip install poetry && \\\n    poetry config virtualenvs.in-project true && \\\n    poetry install && \\\n    rm -rf ~/.cache\n\n# production stage\nFROM $BPYTHON_$PYTHON_ENV as production\n\nRUN apt update && \\\n    apt clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=build /app/.venv /app/.venv\nENV PATH=/app/.venv/bin:$PATH\n\nCMD [\"/bin/bash\"]\n"
}