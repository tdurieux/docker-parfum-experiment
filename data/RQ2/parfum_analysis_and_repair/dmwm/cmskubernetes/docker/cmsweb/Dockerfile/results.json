{
  "startTime": 1674221235143,
  "endTime": 1674221236397,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 179
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 78,
        "columnEnd": 154
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 235,
        "columnEnd": 301
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.cern.ch/cmsweb/exporters:20210726-nonstatic as exporters-builder\nRUN mkdir -p /data\n\n\nFROM cern/cc7-base:20220601-1\n\nMAINTAINER Valentin Kuznetsov vkuznet@gmail.com\n\nENV WDIR=/data/cmsweb\nRUN mkdir -p $WDIR\nADD http://repository.egi.eu/sw/production/cas/1/current/repo-files/EGI-trustanchors.repo /etc/yum.repos.d/egi.repo\nADD http://linuxsoft.cern.ch/wlcg/wlcg-centos7.repo /etc/yum.repos.d/wlcg-centos7.repo\nADD hadoop.repo /etc/yum.repos.d/hadoop.repo\nADD epel.repo /etc/yum.repos.d/epel.repo\nADD slc7-cernonly.repo /etc/yum.repos.d/slc7-cernonly.repo\nADD RPM-GPG-KEY-wlcg /etc/pki/rpm-gpg/RPM-GPG-KEY-wlcg\nADD logstash.repo /etc/yum.repos.d/logstash.repo\n\n# add logstash GPG key\nRUN rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch && yum update -y && yum clean all\n\n# add necessary RPMs for cmsweb deployment\nRUN yum install -y cern-get-certificate fetch-crl \\\n    git-core zip unzip which file bzip2 e2fsprogs e2fsprogs-libs compat-libstdc++-33 \\\n    CERN-CA-certs ca-certificates dummy-ca-certs ca-policy-lcg ca-policy-egi-core \\\n    ca_EG-GRID ca_CERN-GridCA ca_CERN-LCG-IOTA-CA ca_CERN-Root-2 \\\n    wlcg-voms-cms krb5-workstation krb5-libs pam_krb5 myproxy voms-clients-cpp voms-clients-java \\\n    sudo openssl openssl-devel openssl-libs openssh openssh-clients python-backports-ssl_match_hostname \\\n    cmake voms voms-devel globus-gsi-credential-devel globus-gsi-cert-utils-devel \\\n    globus-common-devel globus-gsi-sysconfig globus-gsi-sysconfig-devel globus-gsi-callback-devel \\\n    globus-gsi-openssl-error globus-gsi-proxy-ssl globus-openssl-module \\\n    shibboleth log4shib xmltooling-schemas opensaml-schemas \\\n    perl-Thread-Queue zsh tk freetype perl-ExtUtils-Embed fontconfig \\\n    perl-Test-Harness perl-Data-Dumper perl-Digest-MD5 perl-Switch perl-Env \\\n    libX11-devel libX11 libXmu libSM libICE libXcursor libXext libXrandr libXft \\\n    mesa-libGLU mesa-libGL libXi libXinerama libXft-devel libXrender libXpm \\\n    libXpm-devel libXext-devel mesa-libGLU-devel \\\n    libaio libaio-devel net-tools lsof bind-utils initscripts patch \\\n    voms-devel globus-gsi-credential-devel globus-gsi-cert-utils-devel \\\n    globus-common-devel globus-gsi-sysconfig-devel globus-gsi-callback-devel \\\n    oracle-instantclient-tnsnames.ora filebeat \\\n    HEP_OSlibs python-pip hadoop-bin hadoop-tools \\\n    spark spark-bin cern-hadoop-client cern-hadoop-xrootd-connector \\\n    && yum clean all && rm -rf /var/cache/yum\n\n#RUN pip install --upgrade pip setuptools\nRUN cp /usr/hdp/spark/kubernetes/dockerfiles/spark/entrypoint.sh /usr/bin/entrypoint.sh && touch /etc/hadoop/conf/topology.table.file && ln -s /bin/bash /usr/bin/bashs\n\n# cd to workdir\nWORKDIR $WDIR\n\n# Install latest kubectl\nRUN curl -f -k -O -L https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && mv kubectl /usr/bin && chmod +x /usr/bin/kubectl && curl -f -k -L -O https://dl.google.com/go/go1.12.1.linux-amd64.tar.gz && tar xfz go1.12.1.linux-amd64.tar.gz && rm go1.12.1.linux-amd64.tar.gz\nENV GOROOT=$WDIR/go\nENV PATH=\"${GOROOT}/bin:${WDIR}:${PATH}\"\n\n# get go dependencies which we'll use on all cmsweb nodes\nENV PATH=\"${GOROOT}/bin:${WDIR}:${PATH}\"\nRUN mkdir -p $WDIR/bin\n\nWORKDIR ${WDIR}\n\n\n# setup final environment\nENV PATH=\"${WDIR}/bin:${PATH}\"\n\n# copy all exporters from exporters image\n\nCOPY --from=exporters-builder /data/cmsweb-ping ${WDIR}/bin/\nCOPY --from=exporters-builder /data/das2go_exporter ${WDIR}/bin/\nCOPY --from=exporters-builder /data/mongodb_exporter ${WDIR}/bin/\nCOPY --from=exporters-builder /data/cpy_exporter ${WDIR}/bin/\nCOPY --from=exporters-builder /data/http_exporter ${WDIR}/bin/\nCOPY --from=exporters-builder /data/node_exporter ${WDIR}/bin/\nCOPY --from=exporters-builder /data/process_exporter ${WDIR}/bin/\nCOPY --from=exporters-builder /data/reqmgr_exporter ${WDIR}/bin/\nCOPY --from=exporters-builder /data/wmcore_exporter ${WDIR}/bin/\nCOPY --from=exporters-builder /data/process_monitor.sh ${WDIR}/bin/\n\n\nWORKDIR ${WDIR}\nADD print_hmac $WDIR/bin/print_hmac\nADD proxy.sh $WDIR/bin/proxy.sh\nADD hadoop-env.sh $WDIR/bin/hadoop-env.sh\nADD cmsweb-logs.sh $WDIR/bin/cmsweb-logs.sh\nADD eos-logs.sh $WDIR/bin/eos-logs.sh\n\n# add fetch-crl to fetch all sertificates\nRUN echo \"32 */6 * * * root ! /usr/sbin/fetch-crl -q -r 360\" > /etc/cron.d/fetch-crl-docker\n# example how to run cmsweb-logs rsync\n# RUN echo \"*/10 * * * * /data/cmsweb/bin/cmsweb-logs.sh /etc/secrets/id_dsa_public /data/srv/logs cmsweb@vocms055:/build/k8s-logs\" > /etc/cron.d/cmsweb-logs\n\n# start the setup\nWORKDIR ${WDIR}\n"
}