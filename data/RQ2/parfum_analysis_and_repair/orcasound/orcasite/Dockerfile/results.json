{
  "startTime": 1674252936098,
  "endTime": 1674252936649,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 2,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ELIXIR_VERSION=1.9.1\nARG NODE_VERSION=12.9.1\n\n# Pre-select the node image we want to use later on\n# (while we can still use build args)\nFROM node:${NODE_VERSION}-alpine as node\n\n# Grab the elixir image that we need to add node to\nFROM bitwalker/alpine-elixir:${ELIXIR_VERSION} as alpine-elixir-phoenix\n\n# This entire dockerfile is based on https://github.com/bitwalker/alpine-elixir-phoenix/blob/e4b3948886d6218acb3250246820137465b30735/Dockerfile\n# It does basically the exact same thing, just with a custom version of node\n\n# Important!  Update this no-op ENV variable when this Dockerfile\n# is updated with the current date. It will force refresh of all\n# of the base images and things like `apt-get update` won't be using\n# old cached versions when the Dockerfile is built.\nENV REFRESHED_AT=2019-08-30 \\\n  # Set this so that CTRL+G works properly\n  TERM=xterm\n\n# Prepare to install node\nRUN \\\n  mkdir -p /opt/app && \\\n  chmod -R 777 /opt/app && \\\n  apk --no-cache --update add \\\n  git make g++ wget curl inotify-tools && \\\n  # temporary rsync install for grabbing node in the next step\n  apk --no-cache --update add --virtual .build-deps rsync && \\\n  update-ca-certificates --fresh\n\n# \"borrow\" the node install from the official node alpine image so that we don't\n# have to do all the messy compilation (due to being on musl)\n# Inpired by https://github.com/beardedeagle/alpine-phoenix-builder/blob/16695c570ce55a86f01b7e45cabbd23848cf48e3/Dockerfile#L34\n# Using --from with images directly doesn't work, that's why we use an alias\n# https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae\nCOPY --from=node /usr/local /opt/node\n\n# Use rsync to merge in the node files into /usr/local without overwritting\n# everything already in there, then clean up and remove rsync\nRUN rsync -a /opt/node/ /usr/local \\\n  && apk --no-cache del .build-deps \\\n  && rm -rf /opt/node\n\n# Add local node module binaries to PATH\nENV PATH=./node_modules/.bin:$PATH \\\n  MIX_HOME=/opt/mix \\\n  HEX_HOME=/opt/hex \\\n  HOME=/opt/app\n\n# Install Hex+Rebar\nRUN mix local.hex --force && \\\n  mix local.rebar --force\n\nWORKDIR /opt/app\n\n# Use multistage builds to avoid loading unnecessary stuff into final image\n# Based on https://github.com/bitwalker/alpine-elixir-phoenix/blob/0f64751da96db874a120c9a9e083d70f53cb3603/README.md\nFROM alpine-elixir-phoenix as phx-builder\n\n# Set env\nENV MIX_ENV=dev\n\n# Install temporary build deps\nRUN apk --no-cache --update add \\\n  automake autoconf libtool nasm\n\n# Cache elixir deps\nADD mix.exs mix.lock ./\nRUN mix do deps.get, deps.compile\n\n# Same with npm deps\nADD assets/package.json assets/package-lock.json assets/\nRUN cd assets && \\\n  npm install --no-optional && \\\n  npm rebuild node-sass && npm cache clean --force;\n\n# Now that everything is built/installed, reset back to the image we want to\n# be running things in\nFROM alpine-elixir-phoenix\n\n# Set exposed ports and env\nEXPOSE 4000\nEXPOSE 8080\nENV PORT=4000 MIX_ENV=dev\n\n# Copy deps over\nCOPY --from=phx-builder /opt/app/assets/node_modules /opt/app/assets/node_modules\n# Make node_modules a volume so that it doesn't get replaced with host bind mount\nVOLUME /opt/app/assets/node_modules\nCOPY --from=phx-builder /opt/app/_build /opt/app/_build\nCOPY --from=phx-builder /opt/app/deps /opt/app/deps\n# COPY --from=phx-builder /opt/app/.mix /opt/app/.mix\nCOPY --from=phx-builder /opt/app/mix.* /opt/app/\n#\nADD . .\n\nCMD [\"mix\", \"phx.server\"]\n"
}