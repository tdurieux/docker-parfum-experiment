{
  "startTime": 1674249504753,
  "endTime": 1674249506116,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "ARG BASE_IMAGE=utrarobosoccer/noetic\n\nFROM $BASE_IMAGE as dependencies\nRUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\nWORKDIR /root/src\nRUN apt-get update && rosdep update --rosdistro noetic\nADD . .\nRUN rosdep install --from-paths . --ignore-src -r -s  | grep 'apt-get install' | awk '{print $3}' | sort  >  /tmp/catkin_install_list\nWORKDIR /root/dependencies\n\nFROM $BASE_IMAGE as builder\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Install dependencies\nRUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -q -y software-properties-common && \\\n    add-apt-repository ppa:apt-fast/stable -y && \\\n    echo debconf apt-fast/maxdownloads string 16 | debconf-set-selections && \\\n    echo debconf apt-fast/dlflag boolean true | debconf-set-selections && \\\n    echo debconf apt-fast/aptmanager string apt-get | debconf-set-selections && \\\n    apt-get install --no-install-recommends -q -y apt-fast && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-fast install -y --no-install-recommends \\\n    screen \\\n    vim \\\n    python3-pip \\\n    python3-catkin-tools \\\n    python3-protobuf \\\n    protobuf-compiler \\\n    libprotobuf-dev \\\n    libjpeg9-dev \\\n    wget \\\n    ccache \\\n    dirmngr \\\n    gnupg2 \\\n    lsb-release \\\n    net-tools \\\n    iputils-ping \\\n    apt-utils \\\n    software-properties-common \\\n    sudo \\\n    unzip \\\n    ros-noetic-robot-state-publisher \\\n    curl \\\n    libxkbcommon-x11-0 \\\n    libxcb-icccm4 \\\n    libxcb-xkb1 \\\n    libxcb-icccm4 \\\n    libxcb-image0 \\\n    libxcb-render-util0 \\\n    libxcb-randr0 \\\n    libxcb-keysyms1 \\\n    libxcb-xinerama0 \\\n    qt5-default \\\n    qtbase5-dev \\\n    python3-pyqt5\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install keyboard-configuration && rm -rf /var/lib/apt/lists/*; # This needs to be its own individual step\n\n# CUDA Installation\n# Architecture: Use sbsa for arm build\n# CUDA Installation Ref: https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=20.04&target_type=deb_network\n# CUDNN (Ref: https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#installlinux)\nARG ARCHITECTURE=x86_64\nARG OS=ubuntu2004\nRUN wget --progress=dot:mega https://developer.download.nvidia.com/compute/cuda/repos/$OS/$ARCHITECTURE/cuda-$OS.pin && \\\n    mv cuda-$OS.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \\\n    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/${OS}/$ARCHITECTURE/3bf863cc.pub && \\\n    add-apt-repository \"deb https://developer.download.nvidia.com/compute/cuda/repos/${OS}/$ARCHITECTURE/ /\" && \\\n    apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-fast -yq --no-install-recommends install cuda libcudnn8 libcudnn8-dev libnccl2 libnccl-dev\n\nRUN pip install --no-cache-dir --upgrade pip Cython pybullet\n\nRUN curl -f -sSL https://get.docker.com/ | sh\n\nCOPY requirements.txt /tmp/requirements.txt\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt --extra-index-url https://download.pytorch.org/whl/cu117\n\nRUN if [[ \"$BASE_IMAGE\" == \"arm64v8/ros:noetic-robot\" ]] ; then \\\n    apt-get install --no-install-recommends -y libomp5 && \\\n    pip install --no-cache-dir gdown && \\\n    gdown https://drive.google.com/uc?id=1AQQuBS9skNk1mgZXMp0FmTIwjuxc81WY && \\\n    pip install --no-cache-dir torch-1.11.0a0+gitbc2c6ed-cp38-cp38-linux_aarch64.whl && \\\n    rm -rf torch-1.11.0a0+gitbc2c6ed-cp38-cp38-linux_aarch64.whl; rm -rf /var/lib/apt/lists/*; fi\n\nCOPY --from=dependencies /tmp/catkin_install_list /tmp/catkin_install_list\nRUN (apt-get update || echo \"Apt Error\") && apt-fast install -y --no-install-recommends $(cat /tmp/catkin_install_list)\n\n\n\n# Create User\nARG USER=\"robosoccer\"\nRUN groupadd -g 1000 $USER && \\\n    useradd -u 1000 -g 1000 -mrs /bin/bash -b /home -p $(openssl passwd -1 $USER) $USER && \\\n    usermod -aG sudo $USER && \\\n    echo \"$USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers && \\\n    usermod --append --groups 29,20,104,46,5,44 $USER\n\nWORKDIR /home/$USER/catkin_ws\nRUN chown -R $USER /home/$USER/catkin_ws\nUSER $USER\n\n# Predownload neural networks\nRUN mkdir -p /home/$USER/.cache/torch/hub/ &&  \\\n    cd /home/$USER/.cache/torch/hub/ && \\\n    wget https://github.com/ultralytics/yolov5/archive/master.zip && \\\n    unzip /home/$USER/.cache/torch/hub/master.zip && \\\n    mv yolov5-master ultralytics_yolov5_master && \\\n    rm -rf master.zip\n\n# Build C++ ROS Packages such as AMCL first\nCOPY --from=dependencies --chown=$USER /root/src/amcl src/soccerbot/amcl\nRUN source /opt/ros/noetic/setup.bash && catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release\nRUN source /opt/ros/noetic/setup.bash && catkin build --no-status amcl\nRUN rm -rf src/soccerbot\n\n# Build Python ROS Packages\nCOPY --from=dependencies --chown=$USER /root/src src/soccerbot\nRUN source /opt/ros/noetic/setup.bash && catkin config --cmake-args -DCMAKE_BUILD_TYPE=Debug\nRUN source /opt/ros/noetic/setup.bash && catkin build --no-status soccerbot\nRUN echo \"source /home/$USER/catkin_ws/devel/setup.bash\" >> ~/.bashrc\n\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/targets/aarch64-linux/lib/\n"
}