{
  "startTime": 1674217198687,
  "endTime": 1674217199673,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 73,
        "columnEnd": 103
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 73,
        "columnEnd": 109
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 79,
        "columnEnd": 95
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 107,
        "columnEnd": 123
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 113,
        "columnEnd": 129
      }
    }
  ],
  "repairedDockerfile": "# Build the UI\nFROM node:lts-alpine3.15 AS client-builder\nWORKDIR /app/client\n\nCOPY client/package.json /app/client/package.json\nCOPY client/yarn.lock /app/client/yarn.lock\n\nARG TARGETARCH\nRUN yarn config set cache-folder /usr/local/share/.cache/yarn-${TARGETARCH} && yarn cache clean;\nRUN --mount=type=cache,target=/usr/local/share/.cache/yarn-${TARGETARCH} yarn --network-timeout 1000000 && yarn cache clean;\n\nCOPY client /app/client\nRUN --mount=type=cache,target=/usr/local/share/.cache/yarn-${TARGETARCH} yarn build --network-timeout 1000000 && yarn cache clean;\n\n\n# Build the service\nFROM golang:1.17-alpine AS service-builder\nENV CGO_ENABLED=0\nRUN apk add --no-cache --update make\nWORKDIR /plugin\nCOPY . .\nRUN make bin\n\n# Bring it all together\nFROM alpine:3.15\nLABEL org.opencontainers.image.title=\"Aqua Trivy\" \\\r\n    org.opencontainers.image.description=\"Run unlimited vulnerability scans against remote or locally stored images. Understand any security issues that may be present in images before you pull and use them.\" \\\r\n    org.opencontainers.image.vendor=\"Aqua Security Software\" \\\r\n    com.docker.desktop.extension.api.version=\">= 0.2.0\" \\\r\n    com.docker.desktop.extension.icon=\"https://raw.githubusercontent.com/aquasecurity/trivy-docker-extension/main/trivy.svg\" \\\r\n    com.docker.extension.publisher-url=\"https://trivy.dev\" \\\r\n    com.docker.extension.screenshots=\"[{\\\"alt\\\": \\\"Trivy Dark Screenshot\\\", \\\"url\\\": \\\"https://raw.githubusercontent.com/aquasecurity/trivy-docker-extension/main/.github/images/screenshot.png\\\"},{\\\"alt\\\": \\\"Trivy light screenshot\\\", \\\"url\\\": \\\"https://raw.githubusercontent.com/aquasecurity/trivy-docker-extension/main/.github/images/screenshot_light.png\\\"}]\" \\\r\n    com.docker.extension.detailed-description=\"<h1>Free and Unlimited Vulnerability Scanning</h1><h3>Take control of your application security with Trivy</h3>Trivy is the worldâ€™s most popular open source vulnerability and misconfiguration scanner. It is reliable, fast, extremely easy to use, and it works wherever you need it. <ul><li>Scan locally stored images by choosing from the list</li><li>Scan remote images simply by entering the name in the search box</li><li>Filter by the severity of the vulnerability or optionally only show issues with fixes</li></ul>\" \\\r\n    com.docker.extension.additional-urls=\"[{\\\"title\\\":\\\"Trivy Website\\\",\\\"url\\\":\\\"https://trivy.dev/\\\"},{\\\"title\\\":\\\"Issues\\\",\\\"url\\\":\\\"https://github.com/aquasecurity/trivy/issues\\\"},{\\\"title\\\":\\\"Slack\\\",\\\"url\\\":\\\"https://slack.aquasec.com/\\\"}]\"\n\nCOPY --from=client-builder /app/client/dist ui\nCOPY --from=service-builder /plugin/bin/creds-service /\nCOPY trivy.svg .\nCOPY metadata.json .\nCOPY service/docker-compose.yaml .\n\nCMD /creds-service"
}