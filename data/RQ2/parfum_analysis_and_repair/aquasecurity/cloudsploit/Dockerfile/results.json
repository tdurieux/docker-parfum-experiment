{
  "startTime": 1674251055909,
  "endTime": 1674251056987,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 3,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:lts-alpine3.12\n\n# Define a build argment that can be supplied when building the container\n# You can then do the following:\n#\n# docker build --build-arg PACKAGENAME=@myscope/cloudsploit\n#\n# This allows a fork to build their own container from this common Dockerfile.\n# You could also use this to specify a particular version number.\nARG PACKAGENAME=cloudsploit\n\nCOPY . /var/scan/cloudsploit/\n\n# Install cloudsploit/scan into the container using npm from NPM\nRUN cd /var/scan \\\n&& npm init --yes \\\n&& npm install ${PACKAGENAME} && npm cache clean --force;\n\n# Setup the container's path so that you can run cloudsploit directly\n# in case someone wants to customize it when running the container.\nENV PATH \"$PATH:/var/scan/node_modules/.bin\"\n\n# By default, run the scan. CMD allows consumers of the container to supply\n# command line arguments to the run command to control how this executes.\n# Thus, you can use the parameters that you would normally give to index.js\n# when running in a container.\nENTRYPOINT [\"cloudsploit-scan\"]\nCMD []\n"
}