{
  "startTime": 1674249098604,
  "endTime": 1674249099603,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use an official Python runtime as a parent image\nFROM python:3.8-slim-buster\n\n# add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd -r app && useradd -r -m -g app app\n\nENV PATH /usr/src/app/bin:/root/.poetry/bin:$PATH\n\nENV PYTHONUNBUFFERED 1\n\nENV PIP_NO_CACHE_DIR off\nENV PIP_DISABLE_PIP_VERSION_CHECK on\n\nENV POETRY_VERSION 1.1.4\n\nENV NODE_ENV production\n\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\nRUN set -ex \\\n  && apt-get update && apt-get install -y --no-install-recommends \\\n  build-essential \\\n  ca-certificates \\\n  curl \\\n  gcc \\\n  git \\\n  gosu \\\n  libffi-dev \\\n  libpq-dev \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN curl -f -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python \\\n  && poetry config virtualenvs.create false\n\nCOPY pyproject.toml poetry.lock /usr/src/app/\n# HACK(dcramer): we need the atlas module to be installable at this stage\nRUN mkdir atlas && touch atlas/__init__.py\nRUN poetry install --no-dev\n\nCOPY . /usr/src/app/\n# ensure we've got full module install now\nRUN poetry install --no-dev\n\nENV PATH /usr/src/app/bin:$PATH\n\nEXPOSE 8080\n\nENTRYPOINT [\"docker-entrypoint\"]\n\nCMD [\"atlas\", \"web\"]\n"
}