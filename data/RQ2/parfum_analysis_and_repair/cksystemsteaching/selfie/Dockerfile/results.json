{
  "startTime": 1674248129638,
  "endTime": 1674248131098,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 158,
        "lineEnd": 160,
        "columnStart": 5,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#############################\n#    Selfie Docker Image    #\n# selfie.cs.uni-salzburg.at #\n#############################\n\n###################################\n# PK (Proxy kernel) builder image #\n###################################\nFROM ubuntu:latest AS pkbuilder\n\n# specify work directory and RISC-V install directory\nENV TOP=/opt RISCV=/opt/riscv PATH=$PATH:/opt/riscv/bin\nWORKDIR $TOP\n\n# install tools to build pk\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n       ca-certificates \\\n       make git \\\n       gcc-riscv64-linux-gnu libc-dev-riscv64-cross \\\n  && rm -rf /var/lib/apt/lists/*\n\n# get sources from HEAD\nRUN git clone https://github.com/riscv/riscv-pk\n\n# set build flags compatible with Ubuntu's riscv64-* build flags,\n# otherwise compilation fails with linker errors related to stack protection\n# also, use multiple cores to speed up compilation\nENV CFLAGS=\"-fstack-protector -fstack-protector-explicit -U_FORTIFY_SOURCE\" \\\n  CPPFLAGS=\"-fstack-protector -fstack-protector-explicit -U_FORTIFY_SOURCE\" \\\n  MAKEFLAGS=-j4\n\n# build proxy kernel\n# note that at the end, we move the compiled binaries from riscv64-linux-gnu to riscv64-unknown-elf,\n# because when running the proxy kernel with 'spike pk', it looks at that path by default\nRUN mkdir -p $RISCV \\\n  && mkdir -p riscv-pk/build \\\n  && cd riscv-pk/build \\\n  && ../configure --prefix=$RISCV --host=riscv64-linux-gnu \\\n  && make \\\n  && make install \\\n  && mv $RISCV/riscv64-linux-gnu $RISCV/riscv64-unknown-elf\n\n#######################################\n# Spike (ISA simulator) builder image #\n#######################################\nFROM ubuntu:latest AS spikebuilder\n\n# specify work directory and RISC-V install directory\nENV TOP=/opt RISCV=/opt/riscv PATH=$PATH:/opt/riscv/bin\nWORKDIR $TOP\n\n# install tools to build RISC-V spike\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n       ca-certificates \\\n       make git \\\n       g++ device-tree-compiler \\\n  && rm -rf /var/lib/apt/lists/*\n\n# get sources from HEAD\nRUN git clone https://github.com/riscv/riscv-isa-sim.git\n\n# use multiple cores to speed up compilation\nENV MAKEFLAGS=-j4\n\n# build spike ISA simulator\nRUN mkdir -p $RISCV \\\n  && mkdir -p riscv-isa-sim/build \\\n  && cd riscv-isa-sim/build \\\n  && ../configure --prefix=$RISCV \\\n  && make \\\n  && make install\n\n######################\n# QEMU builder image #\n######################\nFROM ubuntu:latest AS qemubuilder\n\n# specify work directory and RISC-V install directory\nENV TOP=/opt RISCV=/opt/riscv PATH=$PATH:/opt/riscv/bin\nWORKDIR $TOP\n\n# install statically linked QEMU (so it's easier to move it to another image)\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n       qemu-user-static qemu-system-misc \\\n  && rm -rf /var/lib/apt/lists/*\n\n# copy QEMU RISC-V statically linked binary to common output folder\nRUN mkdir -p $RISCV/bin \\\n  && cp /usr/bin/qemu-riscv64-static $RISCV/bin \\\n  && cp /usr/bin/qemu-system-riscv64 $RISCV/bin \\\n  && cp /usr/bin/qemu-riscv32-static $RISCV/bin \\\n  && cp /usr/bin/qemu-system-riscv32 $RISCV/bin\n\n########################################\n# Boolector (SMT solver) builder image #\n########################################\nFROM ubuntu:latest AS boolectorbuilder\n\n# specify work directory and RISC-V install directory\nENV TOP=/opt RISCV=/opt/riscv PATH=$PATH:/opt/riscv/bin\nWORKDIR $TOP\n\n# Setting non-interactive mode\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# install tools to build boolector\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n       ca-certificates \\\n       make git \\\n       g++ \\\n       curl cmake \\\n  && rm -rf /var/lib/apt/lists/*\n\n# get sources from HEAD\nRUN git clone https://github.com/Boolector/boolector\n\n# use multiple cores to speed up compilation\nENV MAKEFLAGS=-j4\n\n# build boolector and dependencies\nRUN mkdir -p $RISCV \\\n  && cd boolector \\\n  && ./contrib/setup-lingeling.sh \\\n  && ./contrib/setup-btor2tools.sh \\\n  && ./configure.sh --prefix $RISCV \\\n  && cd build \\\n  && make \\\n  && make install\n\n#########################\n# OpenOCD builder image #\n#########################\nFROM ubuntu:latest AS openocdbuilder\n\nENV TOP=/opt RISCV=/opt/riscv PATH=$PATH:/opt/riscv/bin\nWORKDIR $TOP\n\n# install tools to build OpenOCD\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n       ca-certificates \\\n       make git \\\n       gcc libtool libusb-dev \\\n       automake pkg-config \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN git clone https://github.com/riscv/riscv-openocd.git\n\n# use multiple cores to speed up compilation\nENV MAKEFLAGS=-j4\n\nRUN mkdir -p $RISCV \\\n  && cd riscv-openocd \\\n  && ./bootstrap \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n       --prefix=$RISCV \\\n       --program-prefix=riscv64- \\\n  && make \\\n  && make install\n\n##################################\n# Selfie interactive final image #\n##################################\nFROM ubuntu:latest AS selfiebuilder\n\n# specify work directory and RISC-V install directory\nENV TOP=/opt RISCV=/opt/riscv PATH=$PATH:/opt/riscv/bin\nWORKDIR $TOP\n\n# Setting non-interactive mode\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# install tools for selfie\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n       ca-certificates \\\n       make git \\\n       gcc gdb libc6-dev-i386-amd64-cross lib32gcc-11-dev \\\n       python3.10 \\\n       device-tree-compiler gcc-riscv64-linux-gnu \\\n  && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 \\\n  && apt-get install -y --no-install-recommends \\\n       binutils-riscv64-linux-gnu libc-dev-riscv64-cross \\\n       libusb-dev libhidapi-dev \\\n       xxd gettext curl \\\n  && rm -rf /var/lib/apt/lists/*\n\n# copy spike, pk, qemu and boolector from builder images\nCOPY --from=pkbuilder $RISCV/ $RISCV/\nCOPY --from=spikebuilder $RISCV/ $RISCV/\nCOPY --from=qemubuilder $RISCV/ $RISCV/\nCOPY --from=boolectorbuilder $RISCV/ $RISCV/\nCOPY --from=openocdbuilder $RISCV/ $RISCV/\n\n# add selfie sources to the image\nCOPY . /opt/selfie/\n\n# specify user work directory\nWORKDIR /opt/selfie\n\n# build selfie\nRUN make selfie\n\n# build machine files\nRUN make --directory machine/\n\n# default command\nCMD /bin/bash"
}