{
  "startTime": 1674252928056,
  "endTime": 1674252928693,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 24,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NOTE: this dockerfile compiles but doesn't work yet\n# TODO: start from an nvidia docker instead\n\nFROM ubuntu:18.04\n\nLABEL maintainer \"Datoviz Development Team\"\n\n\n# Install the build and lib dependencies, install vulkan and a recent version of CMake\nRUN \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y build-essential git wget ninja-build xcb libx11-xcb-dev libxcb-glx0 \\\n    libglfw3-dev libpng-dev libavcodec-dev libavformat-dev \\\n    libavfilter-dev libavutil-dev libswresample-dev libfreetype6-dev libassimp-dev \\\n    && wget -q --show-progress --progress=bar:force:noscroll \\\n    https://github.com/Kitware/CMake/releases/download/v3.18.3/cmake-3.18.3-Linux-x86_64.sh \\\n    -O /tmp/cmake-3.18.3-Linux-x86_64.sh \\\n    && yes | bash /tmp/cmake-3.18.3-Linux-x86_64.sh \\\n    && ln -s /cmake-3.18.3-Linux-x86_64/bin/cmake /usr/bin/cmake \\\n    && rm -rf /tmp/cmake* && rm -rf /var/lib/apt/lists/*;\n\n\n# install nvidia driver\nENV NVIDIA_DRIVER_VERSION=450.66\nRUN wget -q --show-progress --progress=bar:force:noscroll \\\n    https://us.download.nvidia.com/XFree86/Linux-x86_64/$NVIDIA_DRIVER_VERSION/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION.run \\\n    -O /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION.run \\\n    && cd /tmp \\\n    && sh NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION.run --extract-only \\\n    && cp /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION/libnvidia-cbl.so.$NVIDIA_DRIVER_VERSION /usr/lib/x86_64-linux-gnu/ \\\n    && cp /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION/libnvidia-glvkspirv.so.$NVIDIA_DRIVER_VERSION /usr/lib/x86_64-linux-gnu/ \\\n    && cp /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION/libnvidia-rtcore.so.$NVIDIA_DRIVER_VERSION /usr/lib/x86_64-linux-gnu/ \\\n    && rm -rf /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION.run\n\n\n# install vulkan sdk\nENV VULKAN_SDK_VERSION=1.2.148.1\nRUN echo \"downloading Vulkan SDK $VULKAN_SDK_VERSION\" \\\n    && wget -q --show-progress --progress=bar:force:noscroll \\\n    \"https://sdk.lunarg.com/sdk/download/$VULKAN_SDK_VERSION/linux/vulkansdk-linux-x86_64-$VULKAN_SDK_VERSION.tar.gz?Human=true\" \\\n    -O /tmp/vulkansdk-linux-x86_64-$VULKAN_SDK_VERSION.tar.gz \\\n    && echo \"installing Vulkan SDK $VULKAN_SDK_VERSION\" \\\n    && mkdir -p /opt/vulkan \\\n    && tar -xf /tmp/vulkansdk-linux-x86_64-$VULKAN_SDK_VERSION.tar.gz -C /opt/vulkan \\\n    &&  rm /tmp/vulkansdk-linux-x86_64-$VULKAN_SDK_VERSION.tar.gz\nENV VULKAN_SDK=/opt/vulkan/${VULKAN_SDK_VERSION}/x86_64\nENV PATH=\"$VULKAN_SDK/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"$VULKAN_SDK/lib:${LD_LIBRARY_PATH:-}\" \\\n    VK_LAYER_PATH=\"$VULKAN_SDK/etc/vulkan/explicit_layer.d\"\n# COPY ./nvidia_icd.json /usr/share/vulkan/icd.d/nvidia_icd.json\n# wget https://sdk.lunarg.com/sdk/download/latest/linux/vulkan-sdk.tar.gz && \\\n# mkdir vulkan && tar -xf vulkan-sdk.tar.gz -C vulkan --strip-components 1 && \\\n\n\n# Add the code (TODO: replace with git clone later)\n# NOTE: to avoid conflicts with cmake cache, clone another copy of the repo locally in ./experimental/\nADD ./experimental/datoviz /datoviz\nWORKDIR /datoviz\nRUN ./manage.sh build\n\n\nENV container docker\nENV NVIDIA_VISIBLE_DEVICES ${NVIDIA_VISIBLE_DEVICES:-all}\nENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}display,graphics,utility\nENV LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8 \\\n    LANGUAGE=C.UTF-8\n\n# ARG USER=datoviz\n# ARG UID=1000\n# ENV HOME /home/$USER\n# RUN adduser $USER --uid $UID --disabled-password --gecos \"\" \\\n#     && usermod -aG audio,video $USER \\\n#     && echo \"$USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n# USER $USER\n# WORKDIR $HOME\n\n# RUN ./manage.sh run app_blank\n"
}