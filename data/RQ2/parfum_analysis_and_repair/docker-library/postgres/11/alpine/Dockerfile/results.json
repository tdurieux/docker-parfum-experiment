{
  "startTime": 1674251860686,
  "endTime": 1674251861661,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 1,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.16\n\n# 70 is the standard uid/gid for \"postgres\" in Alpine\n# https://git.alpinelinux.org/aports/tree/main/postgresql/postgresql.pre-install?h=3.12-stable\nRUN set -eux; \\\n\taddgroup -g 70 -S postgres; \\\n\tadduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres; \\\n\tmkdir -p /var/lib/postgresql; \\\n\tchown -R postgres:postgres /var/lib/postgresql\n\n# su-exec (gosu-compatible) is installed further down\n\n# make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n# alpine doesn't require explicit locale-file generation\nENV LANG en_US.utf8\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nENV PG_MAJOR 11\nENV PG_VERSION 11.16\nENV PG_SHA256 2dd9e111f0a5949ee7cacc065cea0fb21092929bae310ce05bf01b4ffc5103a5\n\nRUN set -eux; \\\n\n\twget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\"; \\\n\techo \"$PG_SHA256  *postgresql.tar.bz2\" | sha256sum -c -; \\\n\tmkdir -p /usr/src/postgresql; \\\n\ttar \\\n\t\t--extract \\\n\t\t--file postgresql.tar.bz2 \\\n\t\t--directory /usr/src/postgresql \\\n\t\t--strip-components 1 \\\n\t; \\\n\trm postgresql.tar.bz2; \\\n\n\tapk add --no-cache --virtual .build-deps \\\n\t\tbison \\\n\t\tcoreutils \\\n\t\tdpkg-dev dpkg \\\n\t\tflex \\\n\t\tgcc \\\n\t\tkrb5-dev \\\n\t\tlibc-dev \\\n\t\tlibedit-dev \\\n\t\tlibxml2-dev \\\n\t\tlibxslt-dev \\\n\t\tlinux-headers \\\n\t\tllvm-dev clang g++ \\\n\t\tmake \\\n\t\topenldap-dev \\\n\t\topenssl-dev \\\n\t\tperl-dev \\\n\t\tperl-ipc-run \\\n\t\tperl-utils \\\n\t\tpython3-dev \\\n\t\ttcl-dev \\\n\t\tutil-linux-dev \\\n\t\tzlib-dev \\\n# https://www.postgresql.org/docs/10/static/release-10.html#id-1.11.6.9.5.13\n\t\ticu-dev \\\n\t; \\\n\n\tcd /usr/src/postgresql; \\\n# update \"DEFAULT_PGSOCKET_DIR\" to \"/var/run/postgresql\" (matching Debian)\n# see https://anonscm.debian.org/git/pkg-postgresql/postgresql.git/tree/debian/patches/51-default-sockets-in-var.patch?id=8b539fcb3e093a521c095e70bdfa76887217b89f\n\tawk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; \\\n\tgrep '/var/run/postgresql' src/include/pg_config_manual.h.new; \\\n\tmv src/include/pg_config_manual.h.new src/include/pg_config_manual.h; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n# explicitly update autoconf config.guess and config.sub so they support more arches/libcs\n\twget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'; \\\n\twget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'; \\\n# configure options taken from:\n# https://anonscm.debian.org/cgit/pkg-postgresql/postgresql.git/tree/debian/rules?h=9.5\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n# \"/usr/src/postgresql/src/backend/access/common/tupconvert.c:105: undefined reference to `libintl_gettext'\"\n#\t\t--enable-nls \\\n\t\t--enable-integer-datetimes \\\n\t\t--enable-thread-safety \\\n\t\t--enable-tap-tests \\\n# skip debugging info -- we want tiny size instead\n#\t\t--enable-debug \\\n\t\t--disable-rpath \\\n\t\t--with-uuid=e2fs \\\n\t\t--with-gnu-ld \\\n\t\t--with-pgport=5432 \\\n\t\t--with-system-tzdata=/usr/share/zoneinfo \\\n\t\t--prefix=/usr/local \\\n\t\t--with-includes=/usr/local/include \\\n\t\t--with-libraries=/usr/local/lib \\\n\t\t--with-krb5 \\\n\t\t--with-gssapi \\\n\t\t--with-ldap \\\n\t\t--with-tcl \\\n\t\t--with-perl \\\n\t\t--with-python \\\n#\t\t--with-pam \\\n\t\t--with-openssl \\\n\t\t--with-libxml \\\n\t\t--with-libxslt \\\n\t\t--with-icu \\\n\t\t--with-llvm \\\n\t; \\\n\tmake -j \"$(nproc)\" world; \\\n\tmake install-world; \\\n\tmake -C contrib install; \\\n\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n# Remove plperl, plpython and pltcl dependencies by default to save image size\n# To use the pl extensions, those have to be installed in a derived image\n\t\t\t| grep -v -e perl -e python -e tcl \\\n\t)\"; \\\n\tapk add --no-cache --virtual .postgresql-rundeps \\\n\t\t$runDeps \\\n\t\tbash \\\n\t\tsu-exec \\\n\t\ttzdata \\\n\t\tzstd \\\n# https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.16.0#ICU_data_split\n\t\ticu-data-full \\\n\t; \\\n\tapk del --no-network .build-deps; \\\n\tcd /; \\\n\trm -rf \\\n\t\t/usr/src/postgresql \\\n\t\t/usr/local/share/doc \\\n\t\t/usr/local/share/man \\\n\t; \\\n\n\tpostgres --version\n\n# make the sample config easier to munge (and \"correct by default\")\nRUN set -eux; \\\n\tcp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig; \\\n\tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample; \\\n\tgrep -F \"listen_addresses = '*'\" /usr/local/share/postgresql/postgresql.conf.sample\n\nRUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql\n\nENV PGDATA /var/lib/postgresql/data\n# this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n# calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n# in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n# flush tables to disk, which is the best compromise available to avoid data\n# corruption.\n#\n# Users who know their applications do not keep open long-lived idle connections\n# may way to use a value of SIGTERM instead, which corresponds to \"Smart\n# Shutdown mode\" in which any existing sessions are allowed to finish and the\n# server stops when all sessions are terminated.\n#\n# See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n# about available PostgreSQL server shutdown signals.\n#\n# See also https://www.postgresql.org/docs/12/server-start.html for further\n# justification of this as the default value, namely that the example (and\n# shipped) systemd service files use the \"Fast Shutdown mode\" for service\n# termination.\n#\nSTOPSIGNAL SIGINT\n#\n# An additional setting that is recommended for all users regardless of this\n# value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n# equivalent) for controlling how long to wait between sending the defined\n# STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n# The default in most runtimes (such as Docker) is 10 seconds, and the\n# documentation at https://www.postgresql.org/docs/12/server-start.html notes\n# that even 90 seconds may not be long enough in many instances.\n\nEXPOSE 5432\nCMD [\"postgres\"]\n"
}