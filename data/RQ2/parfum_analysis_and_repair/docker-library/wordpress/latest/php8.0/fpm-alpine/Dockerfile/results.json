{
  "startTime": 1674251682405,
  "endTime": 1674251683171,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 1,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM php:8.0-fpm-alpine\n\n# persistent dependencies\nRUN set -eux; \\\n\tapk add --no-cache \\\n# in theory, docker-entrypoint.sh is POSIX-compliant, but priority is a working, consistent image\n\t\tbash \\\n# Ghostscript is required for rendering PDF previews\n\t\tghostscript \\\n# Alpine package for \"imagemagick\" contains ~120 .so files, see: https://github.com/docker-library/wordpress/pull/497\n\t\timagemagick \\\n\t;\n\n# install the PHP extensions we need (https://make.wordpress.org/hosting/handbook/handbook/server-environment/#php-extensions)\nRUN set -ex; \\\n\n\tapk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\tfreetype-dev \\\n\t\ticu-dev \\\n\t\timagemagick-dev \\\n\t\tlibjpeg-turbo-dev \\\n\t\tlibpng-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzip-dev \\\n\t; \\\n\n\tdocker-php-ext-configure gd \\\n\t\t--with-freetype \\\n\t\t--with-jpeg \\\n\t\t--with-webp \\\n\t; \\\n\tdocker-php-ext-install -j \"$(nproc)\" \\\n\t\tbcmath \\\n\t\texif \\\n\t\tgd \\\n\t\tintl \\\n\t\tmysqli \\\n\t\tzip \\\n\t; \\\n# WARNING: imagick is likely not supported on Alpine: https://github.com/Imagick/imagick/issues/328\n# https://pecl.php.net/package/imagick\n\tpecl install imagick-3.6.0; \\\n\tdocker-php-ext-enable imagick; \\\n\trm -r /tmp/pear; \\\n\n# some misbehaving extensions end up outputting to stdout ðŸ™ˆ (https://github.com/docker-library/wordpress/issues/669#issuecomment-993945967)\n\tout=\"$(php -r 'exit(0);')\"; \\\n\t[ -z \"$out\" ]; \\\n\terr=\"$(php -r 'exit(0);' 3>&1 1>&2 2>&3)\"; \\\n\t[ -z \"$err\" ]; \\\n\n\textDir=\"$(php -r 'echo ini_get(\"extension_dir\");')\"; \\\n\t[ -d \"$extDir\" ]; \\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive \"$extDir\" \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --no-network --virtual .wordpress-phpexts-rundeps $runDeps; \\\n\tapk del --no-network .build-deps; \\\n\n\t! { ldd \"$extDir\"/*.so | grep 'not found'; }; \\\n# check for output like \"PHP Warning:  PHP Startup: Unable to load dynamic library 'foo' (tried: ...)\n\terr=\"$(php --version 3>&1 1>&2 2>&3)\"; \\\n\t[ -z \"$err\" ]\n\n# set recommended PHP.ini settings\n# see https://secure.php.net/manual/en/opcache.installation.php\nRUN set -eux; \\\n\tdocker-php-ext-enable opcache; \\\n\t{ \\\n\t\techo 'opcache.memory_consumption=128'; \\\n\t\techo 'opcache.interned_strings_buffer=8'; \\\n\t\techo 'opcache.max_accelerated_files=4000'; \\\n\t\techo 'opcache.revalidate_freq=2'; \\\n\t\techo 'opcache.fast_shutdown=1'; \\\n\t} > /usr/local/etc/php/conf.d/opcache-recommended.ini\n# https://wordpress.org/support/article/editing-wp-config-php/#configure-error-logging\nRUN { \\\n# https://www.php.net/manual/en/errorfunc.constants.php\n# https://github.com/docker-library/wordpress/issues/420#issuecomment-517839670\n\t\techo 'error_reporting = E_ERROR | E_WARNING | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING | E_RECOVERABLE_ERROR'; \\\n\t\techo 'display_errors = Off'; \\\n\t\techo 'display_startup_errors = Off'; \\\n\t\techo 'log_errors = On'; \\\n\t\techo 'error_log = /dev/stderr'; \\\n\t\techo 'log_errors_max_len = 1024'; \\\n\t\techo 'ignore_repeated_errors = On'; \\\n\t\techo 'ignore_repeated_source = Off'; \\\n\t\techo 'html_errors = Off'; \\\n\t} > /usr/local/etc/php/conf.d/error-logging.ini\n\nRUN set -eux; \\\n\tversion='6.0.1'; \\\n\tsha1='a1c02b6b754d74c08a70d5a8b604bdb72f1b276a'; \\\n\t\\\n\tcurl -o wordpress.tar.gz -fL \"https://wordpress.org/wordpress-$version.tar.gz\"; \\\n\techo \"$sha1 *wordpress.tar.gz\" | sha1sum -c -; \\\n\t\\\n# upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress\n\ttar -xzf wordpress.tar.gz -C /usr/src/; \\\n\trm wordpress.tar.gz; \\\n\t\\\n# https://wordpress.org/support/article/htaccess/\n\t[ ! -e /usr/src/wordpress/.htaccess ]; \\\n\t{ \\\n\t\techo '# BEGIN WordPress'; \\\n\t\techo ''; \\\n\t\techo 'RewriteEngine On'; \\\n\t\techo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]'; \\\n\t\techo 'RewriteBase /'; \\\n\t\techo 'RewriteRule ^index\\.php$ - [L]'; \\\n\t\techo 'RewriteCond %{REQUEST_FILENAME} !-f'; \\\n\t\techo 'RewriteCond %{REQUEST_FILENAME} !-d'; \\\n\t\techo 'RewriteRule . /index.php [L]'; \\\n\t\techo ''; \\\n\t\techo '# END WordPress'; \\\n\t} > /usr/src/wordpress/.htaccess; \\\n\t\\\n\tchown -R www-data:www-data /usr/src/wordpress; \\\n# pre-create wp-content (and single-level children) for folks who want to bind-mount themes, etc so permissions are pre-created properly instead of root:root\n# wp-content/cache: https://github.com/docker-library/wordpress/issues/534#issuecomment-705733507\n\tmkdir wp-content; \\\n\tfor dir in /usr/src/wordpress/wp-content/*/ cache; do \\\n\t\tdir=\"$(basename \"${dir%/}\")\"; \\\n\t\tmkdir \"wp-content/$dir\"; \\\n\tdone; \\\n\tchown -R www-data:www-data wp-content; \\\n\tchmod -R 777 wp-content\n\nVOLUME /var/www/html\n\nCOPY --chown=www-data:www-data wp-config-docker.php /usr/src/wordpress/\nCOPY docker-entrypoint.sh /usr/local/bin/\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"php-fpm\"]\n"
}