{
  "startTime": 1674219085655,
  "endTime": 1674219086776,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 21,
        "columnEnd": 30
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 21,
        "columnEnd": 30
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 98,
        "lineEnd": 100,
        "columnStart": 1,
        "columnEnd": 2
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 1,
        "columnEnd": 66
      }
    }
  ],
  "repairedDockerfile": "FROM debian:stretch\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql && useradd -r -g mysql mysql\n\n# https://bugs.debian.org/830696 (apt uses gpgv by default in newer releases, rather than gpg)\nRUN set -ex; \\\n\tapt-get update; \\\n\tif ! which gpg; then \\\n\t\tapt-get install -y --no-install-recommends gnupg; \\\n\tfi; \\\n# Ubuntu includes \"gnupg\" (not \"gnupg2\", but still 2.x), but not dirmngr, and gnupg 2.x requires dirmngr\n# so, if we're not running gnupg 1.x, explicitly install dirmngr too\n\tif ! gpg --batch --version | grep -q '^gpg (GnuPG) 1\\.'; ;then \\\n\t\t apt-get install -y --no-install-recommends dirmngr; \\\n\tfi; \\\n\trm -rf /var/lib/apt/lists/*\n\n# add gosu for easy step-down from root\nENV GOSU_VERSION 1.10\nRUN set -ex; \\\n\n\tfetchDeps=' \\\n\t\tca-certificates \\\n\t\twget \\\n\t'; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends $fetchDeps; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\n# verify the signature\n\texport GNUPGHOME=\"$(mktemp -d)\"; rm -rf -d \\\n\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \\\n\trm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\n\tchmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n\tgosu nobody true; \\\n\n\tapt-get purge -y --auto-remove $fetchDeps\n\nRUN mkdir /docker-entrypoint-initdb.d\n\n# install \"apt-transport-https\" for Percona's repo (switched to https-only)\n# install \"pwgen\" for randomizing passwords\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tapt-transport-https ca-certificates \\\n\t\tpwgen \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GPG_KEYS \\\n# pub   1024D/CD2EFD2A 2009-12-15\n#       Key fingerprint = 430B DF5C 56E7 C94E 848E  E60C 1C4C BDCD CD2E FD2A\n# uid                  Percona MySQL Development Team <mysql-dev@percona.com>\n# sub   2048g/2D607DAF 2009-12-15\n\t430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A \\\n# pub   4096R/8507EFA5 2016-06-30\n#       Key fingerprint = 4D1B B29D 63D9 8E42 2B21  13B1 9334 A25F 8507 EFA5\n# uid                  Percona MySQL Development Team (Packaging key) <mysql-dev@percona.com>\n# sub   4096R/4CAC6D72 2016-06-30\n\t4D1BB29D63D98E422B2113B19334A25F8507EFA5\nRUN set -ex; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; rm -rf -d \\\n\tfor key in $GPG_KEYS; do \\\n\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\tdone; \\\n\tgpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg; \\\n\tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \\\n\trm -r \"$GNUPGHOME\"; \\\n\tapt-key list\n\nRUN echo 'deb https://repo.percona.com/apt stretch main' > /etc/apt/sources.list.d/percona.list\n\n# bashbrew-architectures: amd64\nENV PERCONA_MAJOR 5.5\nENV PERCONA_VERSION 5.5.62-rel38.14-1.stretch\n\n# the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n# also, we set debconf keys to make APT a little quieter\nRUN set -ex; \\\n\t{ \\\n\t\tfor key in \\\n\t\t\tpercona-server-server/root_password \\\n\t\t\tpercona-server-server/root_password_again \\\n\t\t\t\"percona-server-server-$PERCONA_MAJOR/root-pass\" \\\n\t\t\t\"percona-server-server-$PERCONA_MAJOR/re-root-pass\" \\\n\t\t; do \\\n\t\t\techo \"percona-server-server-$PERCONA_MAJOR\" \"$key\" password 'unused'; \\\n\t\tdone; \\\n\t} | debconf-set-selections; \\\n\tapt-get update; \\\n\tapt-get install --no-install-recommends -y \\\n\t\tpercona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n# comment out any \"user\" entires in the MySQL config (\"docker-entrypoint.sh\" or \"--user\" will handle user switching)\n\tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf; \\\n# purge and re-create /var/lib/mysql with appropriate ownership\n\trm -rf /var/lib/mysql; \\\n\tmkdir -p /var/lib/mysql /var/run/mysqld; \\\n\tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \\\n# ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime\n\tchmod 777 /var/run/mysqld; \\\n# comment out a few problematic configuration values\n\tfind /etc/mysql/ -name '*.cnf' -print0 \\\n\t\t| xargs -0 grep -lZE '^(bind-address|log)' \\\n\t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \\\n# don't reverse lookup hostnames, they are usually another container\n\techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf\n\nVOLUME [\"/var/lib/mysql\", \"/var/log/mysql\"]\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 3306\nCMD [\"mysqld\"]\n"
}