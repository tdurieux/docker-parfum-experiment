{
  "startTime": 1674253835417,
  "endTime": 1674253836647,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 2,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM debian:buster-slim\n\n# prevent Debian's PHP packages from being installed\n# https://github.com/docker-library/php/pull/542\nRUN set -eux; \\\n\t{ \\\n\t\techo 'Package: php*'; \\\n\t\techo 'Pin: release *'; \\\n\t\techo 'Pin-Priority: -1'; \\\n\t} > /etc/apt/preferences.d/no-debian-php\n\n# dependencies required for running \"phpize\"\n# (see persistent deps below)\nENV PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tdpkg-dev \\\n\t\tfile \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tpkg-config \\\n\t\tre2c\n\n# persistent / runtime deps\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\t$PHPIZE_DEPS \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\txz-utils \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN set -eux; \\\n\tmkdir -p \"$PHP_INI_DIR/conf.d\"; \\\n# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)\n\t[ ! -d /var/www/html ]; \\\n\tmkdir -p /var/www/html; \\\n\tchown www-data:www-data /var/www/html; \\\n\tchmod 777 /var/www/html\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# https://github.com/docker-library/php/issues/272\n# -D_LARGEFILE_SOURCE and -D_FILE_OFFSET_BITS=64 (https://www.php.net/manual/en/intro.filesystem.php)\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -pie\"\n\nENV GPG_KEYS 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 39B641343D8C104B2B146DC3F9C39DC0B9698544 F1F692238FBC1666E5A5CCD4199F9DFEF6FFBAFD\n\nENV PHP_VERSION 8.1.8\nENV PHP_URL=\"https://www.php.net/distributions/php-8.1.8.tar.xz\" PHP_ASC_URL=\"https://www.php.net/distributions/php-8.1.8.tar.xz.asc\"\nENV PHP_SHA256=\"04c065515bc347bc68e0bb1ac7182669a98a731e4a17727e5731650ad3d8de4c\"\n\nRUN set -eux; \\\n\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends gnupg dirmngr; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tmkdir -p /usr/src; rm -rf /usr/src \\\n\tcd /usr/src; \\\n\n\tcurl -fsSL -o php.tar.xz \"$PHP_URL\"; \\\n\n\tif [ -n \"$PHP_SHA256\" ]; then \\\n\t\techo \"$PHP_SHA256  *php.tar.xz\" | sha256sum -c -; \\\n\tfi; \\\n\n\tif [ -n \"$PHP_ASC_URL\" ]; then \\\n\t\tcurl -fsSL -o php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n\t\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\t\tfor key in $GPG_KEYS; do \\\n\t\t\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\"; \\\n\t\tdone; \\\n\t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n\t\tgpgconf --kill all; \\\n\t\trm -rf \"$GNUPGHOME\"; \\\n\tfi; \\\n\n\tapt-mark auto '.*' > /dev/null; \\\n\tapt-mark manual $savedAptMark > /dev/null; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false\n\nCOPY docker-php-source /usr/local/bin/\n\nRUN set -eux; \\\n\t\\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tlibargon2-dev \\\n\t\tlibcurl4-openssl-dev \\\n\t\tlibonig-dev \\\n\t\tlibreadline-dev \\\n\t\tlibsodium-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tlibxml2-dev \\\n\t\tzlib1g-dev \\\n\t; \\\n\t\\\n\texport \\\n\t\tCFLAGS=\"$PHP_CFLAGS\" \\\n\t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\tLDFLAGS=\"$PHP_LDFLAGS\" \\\n\t; \\\n\tdocker-php-source extract; \\\n\tcd /usr/src/php; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \\\n# https://bugs.php.net/bug.php?id=74125\n\tif [ ! -d /usr/include/curl ]; then \\\n\t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \\\n\tfi; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\t\t\\\n# make sure invalid --configure-flags are fatal errors instead of just warnings\n\t\t--enable-option-checking=fatal \\\n\t\t\\\n# https://github.com/docker-library/php/issues/439\n\t\t--with-mhash \\\n\t\t\\\n# https://github.com/docker-library/php/issues/822\n\t\t--with-pic \\\n\t\t\\\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n\t\t--enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n\t\t--enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n\t\t--enable-mysqlnd \\\n# https://wiki.php.net/rfc/argon2_password_hash\n\t\t--with-password-argon2 \\\n# https://wiki.php.net/rfc/libsodium\n\t\t--with-sodium=shared \\\n# always build against system sqlite3 (https://github.com/php/php-src/commit/6083a387a81dbbd66d6316a3a12a63f06d5f7109)\n\t\t--with-pdo-sqlite=/usr \\\n\t\t--with-sqlite3=/usr \\\n\t\t\\\n\t\t--with-curl \\\n\t\t--with-iconv \\\n\t\t--with-openssl \\\n\t\t--with-readline \\\n\t\t--with-zlib \\\n\t\t\\\n# https://github.com/bwoebi/phpdbg-docs/issues/1#issuecomment-163872806 (\"phpdbg is primarily a CLI debugger, and is not suitable for debugging an fpm stack.\")\n\t\t--disable-phpdbg \\\n\t\t\\\n# in PHP 7.4+, the pecl/pear installers are officially deprecated (requiring an explicit \"--with-pear\")\n\t\t--with-pear \\\n\t\t\\\n# bundled pcre does not support JIT on s390x\n# https://manpages.debian.org/bullseye/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT\n\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n\t\t--with-libdir=\"lib/$debMultiarch\" \\\n\t\t\\\n\t\t--disable-cgi \\\n\t\t\\\n\t\t--enable-fpm \\\n\t\t--with-fpm-user=www-data \\\n\t\t--with-fpm-group=www-data \\\n\t; \\\n\tmake -j \"$(nproc)\"; \\\n\tfind -type f -name '*.a' -delete; \\\n\tmake install; \\\n\tfind \\\n\t\t/usr/local \\\n\t\t-type f \\\n\t\t-perm '/0111' \\\n\t\t-exec sh -euxc ' \\\n\t\t\tstrip --strip-all \"$@\" || : \\\n\t\t' -- '{}' + \\\n\t; \\\n\tmake clean; \\\n\t\\\n# https://github.com/docker-library/php/issues/692 (copy default example \"php.ini\" files somewhere easily discoverable)\n\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \\\n\t\\\n\tcd /; \\\n\tdocker-php-source delete; \\\n\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\tfind /usr/local -type f -executable -exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { print $(NF-1) }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n# update pecl channel definitions https://github.com/docker-library/php/issues/443\n\tpecl update-channels; \\\n\trm -rf /tmp/pear ~/.pearrc; \\\n\t\\\n# smoke test\n\tphp --version\n\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n\n# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\n\nENTRYPOINT [\"docker-php-entrypoint\"]\nWORKDIR /var/www/html\n\nRUN set -eux; \\\n\tcd /usr/local/etc; \\\n\tif [ -d php-fpm.d ]; then \\\n\t\t# for some reason, upstream's php-fpm.conf.default has \"include=NONE/etc/php-fpm.d/*.conf\"\n\t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \\\n\t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \\\n\telse \\\n\t\t# PHP 5.x doesn't use \"include=\" by default, so we'll create our own simple config that mimics PHP 7+ for consistency\n\t\tmkdir php-fpm.d; \\\n\t\tcp php-fpm.conf.default php-fpm.d/www.conf; \\\n\t\t{ \\\n\t\t\techo '[global]'; \\\n\t\t\techo 'include=etc/php-fpm.d/*.conf'; \\\n\t\t} | tee php-fpm.conf; \\\n\tfi; \\\n\t{ \\\n\t\techo '[global]'; \\\n\t\techo 'error_log = /proc/self/fd/2'; \\\n\t\techo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo '; if we send this to /proc/self/fd/1, it never appears'; \\\n\t\techo 'access.log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo 'clear_env = no'; \\\n\t\techo; \\\n\t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \\\n\t\techo 'catch_workers_output = yes'; \\\n\t\techo 'decorate_workers_output = no'; \\\n\t} | tee php-fpm.d/docker.conf; \\\n\t{ \\\n\t\techo '[global]'; \\\n\t\techo 'daemonize = no'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo 'listen = 9000'; \\\n\t} | tee php-fpm.d/zz-docker.conf\n\n# Override stop signal to stop process gracefully\n# https://github.com/php/php-src/blob/17baa87faddc2550def3ae7314236826bc1b1398/sapi/fpm/php-fpm.8.in#L163\nSTOPSIGNAL SIGQUIT\n\nEXPOSE 9000\nCMD [\"php-fpm\"]\n"
}