{
  "startTime": 1674248957862,
  "endTime": 1674248958977,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 1,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.15\n\nRUN apk add --no-cache ca-certificates\n\n# set up nsswitch.conf for Go's \"netgo\" implementation\n# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275\n# - docker run --rm debian grep '^hosts:' /etc/nsswitch.conf\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n\nENV PATH /usr/local/go/bin:$PATH\n\nENV GOLANG_VERSION 1.17.12\n\nRUN set -eux; \\\n\tapk add --no-cache --virtual .fetch-deps gnupg; \\\n\tarch=\"$(apk --print-arch)\"; \\\n\turl=; \\\n\tcase \"$arch\" in \\\n\t\t'x86_64') \\\n\t\t\texport GOARCH='amd64' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t'armhf') \\\n\t\t\texport GOARCH='arm' GOARM='6' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t'armv7') \\\n\t\t\texport GOARCH='arm' GOARM='7' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t'aarch64') \\\n\t\t\texport GOARCH='arm64' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t'x86') \\\n\t\t\texport GO386='softfloat' GOARCH='386' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t'ppc64le') \\\n\t\t\texport GOARCH='ppc64le' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t's390x') \\\n\t\t\texport GOARCH='s390x' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t*) echo >&2 \"error: unsupported architecture '$arch' (likely packaging update needed)\"; exit 1 ;; \\\n\tesac; \\\n\tbuild=; \\\n\tif [ -z \"$url\" ]; then \\\n# https://github.com/golang/go/issues/38536#issuecomment-616897960\n\t\tbuild=1; \\\n\t\turl='https://dl.google.com/go/go1.17.12.src.tar.gz'; \\\n\t\tsha256='0d51b5b3f280c0f01f534598c0219db5878f337da6137a9ee698777413607209'; \\\n# the precompiled binaries published by Go upstream are not compatible with Alpine, so we always build from source here ðŸ˜…\n\tfi; \\\n\n\twget -O go.tgz.asc \"$url.asc\"; \\\n\twget -O go.tgz \"$url\"; \\\n\techo \"$sha256  *go.tgz\" | sha256sum -c -; \\\n\n# https://github.com/golang/go/issues/14739#issuecomment-324767697\n\tGNUPGHOME=\"$(mktemp -d)\"; export GNUPGHOME; \\\n# https://www.google.com/linuxrepositories/\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796'; \\\n# let's also fetch the specific subkey of that key explicitly that we expect \"go.tgz.asc\" to be signed by, just to make sure we definitely have it\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys '2F52 8D36 D67B 69ED F998  D857 78BD 6547 3CB3 BD13'; \\\n\tgpg --batch --verify go.tgz.asc go.tgz; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" go.tgz.asc; \\\n\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tif [ -n \"$build\" ]; then \\\n\t\tapk add --no-cache --virtual .build-deps \\\n\t\t\tbash \\\n\t\t\tgcc \\\n\t\t\tgo \\\n\t\t\tmusl-dev \\\n\t\t; \\\n\t\t\\\n\t\texport GOCACHE='/tmp/gocache'; \\\n\t\t\\\n\t\t( \\\n\t\t\tcd /usr/local/go/src; \\\n# set GOROOT_BOOTSTRAP + GOHOST* such that we can build Go successfully\n\t\t\texport GOROOT_BOOTSTRAP=\"$(go env GOROOT)\" GOHOSTOS=\"$GOOS\" GOHOSTARCH=\"$GOARCH\"; \\\n\t\t\t./make.bash; \\\n\t\t); \\\n\t\t\\\n\t\tapk del --no-network .build-deps; \\\n\t\t\\\n# remove a few intermediate / bootstrapping files the official binary release tarballs do not contain\n\t\trm -rf \\\n\t\t\t/usr/local/go/pkg/*/cmd \\\n\t\t\t/usr/local/go/pkg/bootstrap \\\n\t\t\t/usr/local/go/pkg/obj \\\n\t\t\t/usr/local/go/pkg/tool/*/api \\\n\t\t\t/usr/local/go/pkg/tool/*/go_bootstrap \\\n\t\t\t/usr/local/go/src/cmd/dist/dist \\\n\t\t\t\"$GOCACHE\" \\\n\t\t; \\\n\tfi; \\\n\n\tapk del --no-network .fetch-deps; \\\n\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:$PATH\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n"
}