{
  "startTime": 1674253272048,
  "endTime": 1674253273124,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 1,
        "columnEnd": 42
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 1,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.16\n\nRUN apk add --no-cache \\\n\t\tca-certificates \\\n# Workaround for golang not producing a static ctr binary on Go 1.15 and up https://github.com/containerd/containerd/issues/5824\n\t\tlibc6-compat \\\n# DOCKER_HOST=ssh://... -- https://github.com/docker/cli/pull/1014\n\t\topenssh-client\n\n# set up nsswitch.conf for Go's \"netgo\" implementation (which Docker explicitly uses)\n# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149\n# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275\n# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n\nENV DOCKER_VERSION 20.10.17\n# TODO ENV DOCKER_SHA256\n# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!\n# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)\n\nRUN set -eux; \\\n\t\\\n\tapkArch=\"$(apk --print-arch)\"; \\\n\tcase \"$apkArch\" in \\\n\t\t'x86_64') \\\n\t\t\turl='https://download.docker.com/linux/static/stable/x86_64/docker-20.10.17.tgz'; \\\n\t\t\t;; \\\n\t\t'armhf') \\\n\t\t\turl='https://download.docker.com/linux/static/stable/armel/docker-20.10.17.tgz'; \\\n\t\t\t;; \\\n\t\t'armv7') \\\n\t\t\turl='https://download.docker.com/linux/static/stable/armhf/docker-20.10.17.tgz'; \\\n\t\t\t;; \\\n\t\t'aarch64') \\\n\t\t\turl='https://download.docker.com/linux/static/stable/aarch64/docker-20.10.17.tgz'; \\\n\t\t\t;; \\\n\t\t*) echo >&2 \"error: unsupported architecture ($apkArch)\"; exit 1 ;; \\\n\tesac; \\\n\t\\\n\twget -O docker.tgz \"$url\"; \\\n\t\\\n\ttar --extract \\\n\t\t--file docker.tgz \\\n\t\t--strip-components 1 \\\n\t\t--directory /usr/local/bin/ \\\n\t; \\\n\trm docker.tgz; \\\n\t\\\n\tdockerd --version; \\\n\tdocker --version\n\nENV DOCKER_BUILDX_VERSION 0.8.2\nRUN set -eux; \\\n\tapkArch=\"$(apk --print-arch)\"; \\\n\tcase \"$apkArch\" in \\\n\t\t'x86_64') \\\n\t\t\turl='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64'; \\\n\t\t\tsha256='c64de4f3c30f7a73ff9db637660c7aa0f00234368105b0a09fa8e24eebe910c3'; \\\n\t\t\t;; \\\n\t\t'armhf') \\\n\t\t\turl='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-arm-v6'; \\\n\t\t\tsha256='d0e5d19cd67ea7a351e3bfe1de96f3d583a5b80f1bbadd61f7adcd61b147e5f5'; \\\n\t\t\t;; \\\n\t\t'armv7') \\\n\t\t\turl='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-arm-v7'; \\\n\t\t\tsha256='b5bb1e28e9413a75b2600955c486870aafd234f69953601eecc3664bd3af7463'; \\\n\t\t\t;; \\\n\t\t'aarch64') \\\n\t\t\turl='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-arm64'; \\\n\t\t\tsha256='304d3d9822c75f98ad9cf57f0c234bcf326bbb96d791d551728cadd72a7a377f'; \\\n\t\t\t;; \\\n\t\t'ppc64le') \\\n\t\t\turl='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-ppc64le'; \\\n\t\t\tsha256='32b317d86c700d920468f162f93ae2282777da556ee49b4329f6c72ee2b11b85'; \\\n\t\t\t;; \\\n\t\t'riscv64') \\\n\t\t\turl='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-riscv64'; \\\n\t\t\tsha256='76d5fcf92ffa31b3e470d8ec1ab11f7b6997729e5c94d543fec765ad79ad0630'; \\\n\t\t\t;; \\\n\t\t's390x') \\\n\t\t\turl='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-s390x'; \\\n\t\t\tsha256='ec4bb6f271f38dca5a377a70be24ee2108a85f6e6ba511ad3b805c4f1602a0d2'; \\\n\t\t\t;; \\\n\t\t*) echo >&2 \"warning: unsupported buildx architecture ($apkArch); skipping\"; exit 0 ;; \\\n\tesac; \\\n\tplugin='/usr/libexec/docker/cli-plugins/docker-buildx'; \\\n\tmkdir -p \"$(dirname \"$plugin\")\"; \\\n\twget -O \"$plugin\" \"$url\"; \\\n\techo \"$sha256  *$plugin\" | sha256sum -c -; \\\n\tchmod +x \"$plugin\"; \\\n\tdocker buildx version\n\nENV DOCKER_COMPOSE_VERSION 2.6.1\nRUN set -eux; \\\n\tapkArch=\"$(apk --print-arch)\"; \\\n\tcase \"$apkArch\" in \\\n\t\t'x86_64') \\\n\t\t\turl='https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-x86_64'; \\\n\t\t\tsha256='ed79398562f3a80a5d8c068fde14b0b12101e80b494aabb2b3533eaa10599e0f'; \\\n\t\t\t;; \\\n\t\t'armhf') \\\n\t\t\turl='https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-armv6'; \\\n\t\t\tsha256='2b5efc48e8359047cc280712f52e97be23fcb571b47b1e67ba6f56e971ac30f5'; \\\n\t\t\t;; \\\n\t\t'armv7') \\\n\t\t\turl='https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-armv7'; \\\n\t\t\tsha256='727f67b78d6b1fbfed5de4d66869a691551f7341ad71504476d8a902e37588bb'; \\\n\t\t\t;; \\\n\t\t'aarch64') \\\n\t\t\turl='https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-aarch64'; \\\n\t\t\tsha256='2890aade218c145827521efb247b5765ac10ac5c46f21dddb2220c03c98d7f83'; \\\n\t\t\t;; \\\n\t\t'ppc64le') \\\n\t\t\turl='https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-ppc64le'; \\\n\t\t\tsha256='93560efd323f39fe86244b80cbe1ffeb2c16b169c72a3ae25535def98c04e744'; \\\n\t\t\t;; \\\n\t\t's390x') \\\n\t\t\turl='https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-s390x'; \\\n\t\t\tsha256='2a56c35df12d7a7ce9a9ae83426df36a612b0035ee36053912594d6f5a6ff356'; \\\n\t\t\t;; \\\n\t\t*) echo >&2 \"warning: unsupported compose architecture ($apkArch); skipping\"; exit 0 ;; \\\n\tesac; \\\n\tplugin='/usr/libexec/docker/cli-plugins/docker-compose'; \\\n\tmkdir -p \"$(dirname \"$plugin\")\"; \\\n\twget -O \"$plugin\" \"$url\"; \\\n\techo \"$sha256  *$plugin\" | sha256sum -c -; \\\n\tchmod +x \"$plugin\"; \\\n\tln -sv \"$plugin\" /usr/local/bin/; \\\n\tdocker-compose --version; \\\n\tdocker compose version\n\nCOPY modprobe.sh /usr/local/bin/modprobe\nCOPY docker-entrypoint.sh /usr/local/bin/\n\n# https://github.com/docker-library/docker/pull/166\n#   dockerd-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-generating TLS certificates\n#   docker-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-setting DOCKER_TLS_VERIFY and DOCKER_CERT_PATH\n# (For this to work, at least the \"client\" subdirectory of this path needs to be shared between the client and server containers via a volume, \"docker cp\", or other means of data sharing.)\nENV DOCKER_TLS_CERTDIR=/certs\n# also, ensure the directory pre-exists and has wide enough permissions for \"dockerd-entrypoint.sh\" to create subdirectories, even when run in \"rootless\" mode\nRUN mkdir /certs /certs/client && chmod 1777 /certs /certs/client\n# (doing both /certs and /certs/client so that if Docker does a \"copy-up\" into a volume defined on /certs/client, it will \"do the right thing\" by default in a way that still works for rootless users)\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"sh\"]\n"
}