{
  "startTime": 1674251542946,
  "endTime": 1674251544764,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 5,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 71,
        "columnStart": 6,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 76,
        "columnStart": 6,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 20,
        "columnStart": 5,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 65,
        "columnStart": 5,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 71,
        "columnStart": 6,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 76,
        "columnStart": 6,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 71,
        "columnStart": 6,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 76,
        "columnStart": 6,
        "columnEnd": 18
      }
    }
  ],
  "repairedDockerfile": "###############################################################################\n#-----------------------------    BUILD STAGE   ------------------------------#\n###############################################################################\n\nFROM python:3.9.7-slim-buster as builder\n\nARG CC_REPO=https://github.com/Ericsson/CodeChecker.git\nENV CC_REPO ${CC_REPO}\n\nARG CC_VERSION=master\nENV CC_VERSION ${CC_VERSION}\n\nCOPY hooks/ /hooks\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN set -x && apt-get update -qq \\\n  && apt-get install -qqy --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    git \\\n    make \\\n    && curl -f -sL https://deb.nodesource.com/setup_16.x | bash - \\\n    && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Download CodeChecker release.\nRUN git clone ${CC_REPO} /codechecker\nWORKDIR /codechecker\nRUN git checkout ${CC_VERSION}\n\n# Run script before the package generation.\nRUN chmod a+x /hooks/before_build.sh && sync && /hooks/before_build.sh\n\n# Build CodeChecker web.\nRUN make -C /codechecker/web package\n\n# Run script after the package generation is finished.\nRUN chmod a+x /hooks/after_build.sh && sync && /hooks/after_build.sh\n\n###############################################################################\n#--------------------------    PRODUCTION STAGE   ----------------------------#\n###############################################################################\n\nFROM python:3.9.7-slim-buster\n\nARG CC_GID=950\nARG CC_UID=950\n\nENV CC_GID ${CC_GID}\nENV CC_UID ${CC_UID}\n\nARG INSTALL_AUTH=yes\nARG INSTALL_PG8000=no\nARG INSTALL_PSYCOPG2=yes\n\nENV TINI_VERSION v0.18.0\nENV WAIT_FOR_VERSION v2.1.2\n\nRUN set -x && apt-get update -qq \\\n  # Prevent fail when install postgresql-client.\n  && mkdir -p /usr/share/man/man1 \\\n  && mkdir -p /usr/share/man/man7 \\\n\n  && apt-get install -qqy --no-install-recommends ca-certificates \\\n    postgresql-client \\\n    # To switch user and exec command.\n    gosu && rm -rf /var/lib/apt/lists/*;\n\nRUN if [ \"$INSTALL_AUTH\" = \"yes\" ] ; then \\\n      apt-get install -qqy --no-install-recommends \\\n        libldap2-dev \\\n        libsasl2-dev \\\n        libssl-dev; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\nRUN if [ \"$INSTALL_PSYCOPG2\" = \"yes\" ] ; then \\\n      apt-get install -qqy --no-install-recommends \\\n        libpq-dev; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\nCOPY --from=builder /codechecker/web/build/CodeChecker /codechecker\n\n# Copy python requirements.\nCOPY --from=builder /codechecker/web/requirements_py /requirements_py\nCOPY --from=builder /codechecker/web/requirements.txt /requirements_py\n\n# Copy local API packages (Python, Node).\nCOPY --from=builder /codechecker/web/api /api\n\n# Install python requirements.\nRUN apt-get update -qq  && \\\n  apt-get install -qqy --no-install-recommends \\\n    python3-dev \\\n    # gcc is needed to build psutil.\n    gcc \\\n    # netcat is needed for 'wait-for' script.\n    netcat \\\n  \\\n  # Install necessary runtime environment files. \\\n  && pip3 install --no-cache-dir -r /requirements_py/requirements.txt \\\n  && if [ \"$INSTALL_AUTH\" = \"yes\" ] ; then \\\n       pip3 install --no-cache-dir -r /requirements_py/auth/requirements.txt; \\\n     fi \\\n  && if [ \"$INSTALL_PG8000\" = \"yes\" ] ; then \\\n       pip3 install --no-cache-dir -r /requirements_py/db_pg8000/requirements.txt; \\\n     fi \\\n  && if [ \"$INSTALL_PSYCOPG2\" = \"yes\" ] ; then \\\n       pip3 install --no-cache-dir -r /requirements_py/db_psycopg2/requirements.txt; \\\n     fi \\\n\n  # Remove unnecessary packages.\n  && pip3 uninstall -y wheel \\\n  && apt-get purge -y --auto-remove \\\n    gcc \\\n    python-dev \\\n\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/ \\\n  && set +x && rm -rf /var/lib/apt/lists/*;\n\n# Create user and group for CodeChecker.\nRUN groupadd -r codechecker -g ${CC_GID} \\\n  && useradd -r --no-log-init -M -u ${CC_UID} -g codechecker codechecker\n\n# Change permission of the CodeChecker package.\nRUN chown codechecker:codechecker /codechecker\n\nENV PATH=\"/codechecker/bin:$PATH\"\n\nCOPY ./entrypoint.sh /usr/local/bin/\nRUN chmod a+x /usr/local/bin/entrypoint.sh \\\n  && chown codechecker:codechecker /usr/local/bin/entrypoint.sh\n\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod 755 /tini\n\nADD https://raw.githubusercontent.com/eficode/wait-for/${WAIT_FOR_VERSION}/wait-for /usr/local/bin/wait-for\nRUN chmod 755 /usr/local/bin/wait-for\n\nEXPOSE 8001\n\nENTRYPOINT [\"/tini\", \"--\", \"/usr/local/bin/entrypoint.sh\"]\n\nCMD [\"CodeChecker\", \"server\", \"--workspace\", \"/workspace\", \"--not-host-only\"]\n"
}