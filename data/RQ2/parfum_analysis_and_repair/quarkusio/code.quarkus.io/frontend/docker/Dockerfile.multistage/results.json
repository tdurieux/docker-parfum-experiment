{
  "startTime": 1674218278894,
  "endTime": 1674218281066,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 30,
        "columnEnd": 46
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "## Stage 1 : build with maven builder image\nFROM registry.access.redhat.com/ubi8/nodejs-14 AS build\nRUN npm install --global yarn && npm cache clean --force;\nCOPY package.json yarn.lock ./\nRUN yarn --frozen-lockfile && yarn cache clean;\nCOPY public ./public\nCOPY src ./src\nRUN yarn build && yarn cache clean;\n\n## Stage 2 : create the docker final image\nFROM registry.access.redhat.com/ubi8/nginx-118\nENV LANG=en_US.utf8\n\nCOPY nginx/nginx.conf \"${NGINX_CONF_PATH}\"\nCOPY --from=build /opt/app-root/src/build/ /var/www\n\nEXPOSE 8080/tcp\n\nCMD nginx -g \"daemon off;\"\n\n"
}