{
  "startTime": 1674252891961,
  "endTime": 1674252892995,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 1,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Android section of this Dockerfile from https:/s/medium.com/@elye.project/intro-to-docker-building-android-app-cb7fb1b97602\n\nFROM openjdk:8\n\n\nENV SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip\" \\\n    ANDROID_HOME=\"/usr/local/android-sdk\" \\\n    ANDROID_VERSION=29 \\\n    ANDROID_BUILD_TOOLS_VERSION=29.0.3\n\n## Creating an empty file suppresses a warning in the following command\nRUN mkdir -p /root/.android/ && touch /root/.android/repositories.cfg\n\n## Download Android SDK\nRUN mkdir \"$ANDROID_HOME\" .android \\\n    && cd \"$ANDROID_HOME\" \\\n    && curl -f -o sdk.zip $SDK_URL \\\n    && unzip sdk.zip \\\n    && rm sdk.zip \\\n    && yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses\n\n## Install Android Build Tool and Libraries\nRUN $ANDROID_HOME/tools/bin/sdkmanager --update\nRUN $ANDROID_HOME/tools/bin/sdkmanager \"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\" \\\n    \"platforms;android-${ANDROID_VERSION}\" \\\n    \"platform-tools\"\n\n# Install NDK\nRUN $ANDROID_HOME/tools/bin/sdkmanager \"ndk-bundle\"\n\n# Go section of this Dockerfile from Docker golang: https://github.com/docker-library/golang/blob/master/1.10/alpine3.8/Dockerfile\n# Adapted from alpine apk to debian apt\n\n## set up nsswitch.conf for Go's \"netgo\" implementation\n## - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275\n## - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf\nRUN echo 'hosts: files dns' > /etc/nsswitch.conf\n\nENV GOLANG_VERSION 1.13.7\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\t bash \\\n\t\tbuild-essential \\\n\t\topenssl \\\n\t\tlibssl-dev \\\n\t\tgolang \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\texport \\\n## set GOROOT_BOOTSTRAP such that we can actually build Go\n\t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \\\n## ... and set \"cross-building\" related vars to the installed system's values so that we create a build targeting the proper arch\n## (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)\n\t\tGOOS=\"$(go env GOOS)\" \\\n\t\tGOARCH=\"$(go env GOARCH)\" \\\n\t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \\\n\t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \\\n\t; \\\n## also explicitly set GO386 and GOARM if appropriate\n## https://github.com/docker-library/golang/issues/184\n\taptArch=\"$(dpkg-architecture  -q DEB_BUILD_GNU_CPU)\"; \\\n\tcase \"$aptArch\" in \\\n\t\tarm) export GOARM='6' ;; \\\n\t\tx86_64) export GO386='387' ;; \\\n\tesac; \\\n\n\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \\\n\techo 'e4ad42cc5f5c19521fbbbde3680995f2546110b5c6aa2b48c3754ff7af9b41f4  *go.tgz' | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tcd /usr/local/go/src; \\\n\t./make.bash; \\\n\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\n# persist new go in PATH\nENV PATH /usr/local/go/bin:$PATH\n\n# Setup /workspace\nRUN mkdir /workspace\nRUN mkdir /go\n# link $GOPATH to persistent /go\nRUN ln -sf /go /workspace/go\n# Set up GOPATH in /workspace\nENV GOPATH /workspace/go\nENV PATH $GOPATH/bin:$PATH\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \"$GOPATH/pkg\" && chmod -R 777 \"$GOPATH\"\n\n# install gomobile\nRUN go get golang.org/x/mobile/cmd/gomobile\nRUN go get golang.org/x/tools/go/packages\n\nRUN gomobile init"
}