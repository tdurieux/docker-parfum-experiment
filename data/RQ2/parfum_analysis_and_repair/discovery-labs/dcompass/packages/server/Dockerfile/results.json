{
  "startTime": 1674250704610,
  "endTime": 1674250705425,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 24,
        "columnEnd": 71
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## base\nFROM node:14 AS base\nENV NODE_ENV=production\nWORKDIR /var/www/api\nEXPOSE 5000\nCOPY package.json ./package.json\nRUN yarn config list && yarn cache clean;\n# Makes sure we're doing a clean install of our dependencies and if dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock.\nRUN yarn cache clean && yarn install --frozen-lockfile --ignore-scripts && yarn cache clean;\n# We might use this if our app doesn't emit the correct exit signals\n# ENV TINI_VERSION v0.18.0\n# ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/local/bin/tini\n# RUN chmod +x /usr/local/bin/tini\n# ENTRYPOINT [\"/usr/local/bin/tini\", \"--\"]\n## dev\nFROM base AS dev\nENV NODE_ENV=development\nCOPY . .\nRUN yarn install --ignore-scripts --production=false && yarn cache clean;\nCMD [ \"yarn\", \"start:dev\" ]\n\n## build\nFROM dev as build\nRUN yarn build\n## pre-production\nFROM build as pre-prod\nRUN rm -rf ./__tests__ && rm -rf ./test && rm -rf ./node_modules && rm -rf ./src && rm -rf ./documentation && rm -rf ./coverage\n\n## test\nFROM dev AS test\nENV NODE_ENV=test\nRUN yarn lint:src\nCMD [ \"yarn\", \"test:e2e\" ]\n\n## audit\nFROM test AS audit\nRUN yarn audit\n\nFROM base AS prod\nCOPY --from=pre-prod /var/www/api /var/www/api\n# HEALTHCHECK CMD curl http://127.0.0.1/ || exit 1\nCMD [\"node\", \"./dist/main.js\"]\n## review\n# this will run by default if you don't include a target\n# it has prod-only dependencies\n# In BuildKit, this is skipped for stages coming before\nFROM prod AS review\nENV NODE_ENV=review\n\nFROM prod AS staging\nENV NODE_ENV=staging\n\nUSER node"
}