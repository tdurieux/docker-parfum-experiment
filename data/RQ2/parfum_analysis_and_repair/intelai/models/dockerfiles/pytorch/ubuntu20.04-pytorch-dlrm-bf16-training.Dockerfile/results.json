{
  "startTime": 1674254280618,
  "endTime": 1674254281389,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 95
      }
    }
  ],
  "repairedDockerfile": "# Copyright (c) 2020 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG UBUNTU_VERSION\n\nFROM ubuntu:${UBUNTU_VERSION}\n\nARG CONDA_INSTALL_PATH=/opt/conda\n\nARG MINICONDA_VERSION=4.7.12\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends --fix-missing -y \\\n        wget \\\n        ca-certificates && \\\n    wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -O miniconda.sh && \\\n    bash miniconda.sh -b -p ${CONDA_INSTALL_PATH} && \\\n    rm miniconda.sh && \\\n    ln -s ${CONDA_INSTALL_PATH}/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". ${CONDA_INSTALL_PATH}/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc && rm -rf /var/lib/apt/lists/*;\n\nENV PATH=\"${CONDA_INSTALL_PATH}/bin:${PATH}\"\n\nARG PY_VERSION\nARG INTEL_PY_BUILD\n\nRUN conda config --add channels intel && \\\n    conda install  -y -q intelpython${PY_VERSION}_core==${INTEL_PY_BUILD} python=${PY_VERSION}\n\nRUN conda install -y -c intel/label/oneapibeta pytorch\n\nRUN conda install -y -c intel/label/oneapibeta intel-extension-for-pytorch\n\nRUN conda install -y -c intel/label/oneapibeta torch_ccl\nARG PYTHON_VERSION=3.7\nENV LD_LIBRARY_PATH=\"/opt/conda/lib/python${PYTHON_VERSION}/site-packages/ccl/lib/:${LD_LIBRARY_PATH}\"\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --fix-missing -y git && \\\n    python -m pip install onnx && \\\n    python -m pip install -e git+https://github.com/mlperf/logging@0.7.0-rc2#egg=logging && \\\n    conda install -y -c intel scikit-learn && \\\n    conda install -c conda-forge gperftools && \\\n    conda clean -a && rm -rf /var/lib/apt/lists/*;\n\nARG PACKAGE_DIR=model_packages\n\nARG PACKAGE_NAME\n\nARG MODEL_WORKSPACE\n\n# ${MODEL_WORKSPACE} and below needs to be owned by root:root rather than the current UID:GID\n# this allows the default user (root) to work in k8s single-node, multi-node\nRUN umask 002 && mkdir -p ${MODEL_WORKSPACE} && chgrp root ${MODEL_WORKSPACE} && chmod g+s+w,o+s+r ${MODEL_WORKSPACE}\n\nADD --chown=0:0 ${PACKAGE_DIR}/${PACKAGE_NAME}.tar.gz ${MODEL_WORKSPACE}\n\nRUN chown -R root ${MODEL_WORKSPACE}/${PACKAGE_NAME} && chgrp -R root ${MODEL_WORKSPACE}/${PACKAGE_NAME} && chmod -R g+s+w ${MODEL_WORKSPACE}/${PACKAGE_NAME} && find ${MODEL_WORKSPACE}/${PACKAGE_NAME} -type d | xargs chmod o+r+x\n\nWORKDIR ${MODEL_WORKSPACE}/${PACKAGE_NAME}\n\nENV USER_ID=0\n\nENV USER_NAME=root\n\nENV GROUP_ID=0\n\nENV GROUP_NAME=root\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends --fix-missing -y gosu && rm -rf /var/lib/apt/lists/*;\n\nRUN echo '#!/bin/bash\\n\\\nUSER_ID=$USER_ID\\n\\\nUSER_NAME=$USER_NAME\\n\\\nGROUP_ID=$GROUP_ID\\n\\\nGROUP_NAME=$GROUP_NAME\\n\\\nif [[ $GROUP_NAME != root ]]; then\\n\\\n  groupadd -r -g $GROUP_ID $GROUP_NAME\\n\\\nfi\\n\\\nif [[ $USER_NAME != root ]]; then\\n\\\n  useradd --no-log-init -r -u $USER_ID -g $GROUP_NAME -s /bin/bash -M $USER_NAME\\n\\\nfi\\n\\\nexec /usr/sbin/gosu $USER_NAME:$GROUP_NAME \"$@\"\\n '\\\n>> /tmp/entrypoint.sh\n\nRUN chmod u+x,g+x /tmp/entrypoint.sh\n\nENTRYPOINT [\"/tmp/entrypoint.sh\"]\n"
}