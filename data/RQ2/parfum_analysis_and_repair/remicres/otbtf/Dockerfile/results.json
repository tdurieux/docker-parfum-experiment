{
  "startTime": 1674248844573,
  "endTime": 1674248845671,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##### Configurable Dockerfile with multi-stage build - Author: Vincent Delbar\n## Mandatory\nARG BASE_IMG\n\n# ----------------------------------------------------------------------------\n# Init base stage - will be cloned as intermediate build env\nFROM $BASE_IMG AS otbtf-base\nWORKDIR /tmp\n\n### System packages\nCOPY tools/docker/build-deps-*.txt ./\nARG DEBIAN_FRONTEND=noninteractive\n# CLI\nRUN apt-get update -y && apt-get upgrade -y \\\n && cat build-deps-cli.txt | xargs apt-get install --no-install-recommends -y \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*\n# Optional GUI\nARG GUI=false\nRUN if $GUI; then \\\n      apt-get update -y \\\n      && cat build-deps-gui.txt | xargs apt-get install --no-install-recommends -y \\\n      && apt-get clean && rm -rf /var/lib/apt/lists/* ; fi\n\n### Python3 links and pip packages\nRUN ln -s /usr/bin/python3 /usr/local/bin/python && ln -s /usr/bin/pip3 /usr/local/bin/pip\n# NumPy version is conflicting with system's gdal dep and may require venv\nARG NUMPY_SPEC=\"==1.22.*\"\nARG PROTO_SPEC=\"==3.20.*\"\nRUN pip install --no-cache-dir -U pip wheel mock six future tqdm deprecated \"numpy$NUMPY_SPEC\" \"protobuf$PROTO_SPEC\" \\\n && pip install --no-cache-dir --no-deps keras_applications keras_preprocessing\n\n# ----------------------------------------------------------------------------\n# Tmp builder stage - dangling cache should persist until \"docker builder prune\"\nFROM otbtf-base AS builder\n# A smaller value may be required to avoid OOM errors when building OTB GUI\nARG CPU_RATIO=1\n\nRUN mkdir -p /src/tf /opt/otbtf/bin /opt/otbtf/include /opt/otbtf/lib\nWORKDIR /src/tf\n\nRUN git config --global advice.detachedHead false\n\n### TF\nARG TF=v2.8.0\n# Install bazelisk (will read .bazelversion and download the right bazel binary - latest by default)\nRUN wget -qO /opt/otbtf/bin/bazelisk https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64 \\\n && chmod +x /opt/otbtf/bin/bazelisk \\\n && ln -s /opt/otbtf/bin/bazelisk /opt/otbtf/bin/bazel\n\nARG BZL_TARGETS=\"//tensorflow:libtensorflow_cc.so //tensorflow/tools/pip_package:build_pip_package\"\n# \"--config=opt\" will enable 'march=native' (otherwise read comments about CPU compatibility and edit CC_OPT_FLAGS in build-env-tf.sh)\nARG BZL_CONFIGS=\"--config=nogcp --config=noaws --config=nohdfs --config=opt\"\n# \"--compilation_mode opt\" is already enabled by default (see tf repo .bazelrc and configure.py)\nARG BZL_OPTIONS=\"--verbose_failures --remote_cache=http://localhost:9090\"\n\n# Build\nARG ZIP_TF_BIN=false\nCOPY tools/docker/build-env-tf.sh ./\nRUN git clone --single-branch -b $TF https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && export PATH=$PATH:/opt/otbtf/bin \\\n && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/otbtf/lib \\\n && bash -c '\\\n      source ../build-env-tf.sh \\\n      && ./configure \\\n      && export TMP=/tmp/bazel \\\n      && BZL_CMD=\"build $BZL_TARGETS $BZL_CONFIGS $BZL_OPTIONS\" \\\n      && bazel $BZL_CMD --jobs=\"HOST_CPUS*$CPU_RATIO\" ' \\\n# Installation - split here if you want to check files  ^\n#RUN cd tensorflow \\\n && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n && pip3 install --no-cache-dir --prefix=/opt/otbtf /tmp/tensorflow_pkg/tensorflow*.whl \\\n && ln -s /opt/otbtf/lib/python3.* /opt/otbtf/lib/python3 \\\n && cp -P bazel-bin/tensorflow/libtensorflow_cc.so* /opt/otbtf/lib/ \\\n && ln -s $(find /opt/otbtf -type d -wholename \"*/site-packages/tensorflow/include\") /opt/otbtf/include/tf \\\n # The only missing header in the wheel\n && cp tensorflow/cc/saved_model/tag_constants.h /opt/otbtf/include/tf/tensorflow/cc/saved_model/ \\\n && cp tensorflow/cc/saved_model/signature_constants.h /opt/otbtf/include/tf/tensorflow/cc/saved_model/ \\\n # Symlink external libs (required for MKL - libiomp5)\n && for f in $(find -L /opt/otbtf/include/tf -wholename \"*/external/*/*.so\"); do ln -s $f /opt/otbtf/lib/; done \\\n # Compress and save TF binaries\n && ( ! $ZIP_TF_BIN || zip -9 -j --symlinks /opt/otbtf/tf-$TF.zip tensorflow/cc/saved_model/tag_constants.h tensorflow/cc/saved_model/signature_constants.h bazel-bin/tensorflow/libtensorflow_cc.so* /tmp/tensorflow_pkg/tensorflow*.whl ) \\\n # Cleaning\n && rm -rf bazel-* /src/tf /root/.cache/ /tmp/*\n\n### OTB\nARG GUI=false\nARG OTB=7.4.0\nARG OTBTESTS=false\n\nRUN mkdir /src/otb\nWORKDIR /src/otb\n\n# SuperBuild OTB\nCOPY tools/docker/build-flags-otb.txt ./\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends --reinstall ca-certificates -y \\\n && update-ca-certificates \\\n && git clone --single-branch -b $OTB https://gitlab.orfeo-toolbox.org/orfeotoolbox/otb.git \\\n && mkdir -p build \\\n && cd build \\\n && if $OTBTESTS; then \\\n      echo \"-DBUILD_TESTING=ON\" >> ../build-flags-otb.txt; fi \\\n # Set GL/Qt build flags\n && if $GUI; then \\\n      sed -i -r \"s/-DOTB_USE_(QT|OPENGL|GL[UFE][WT])=OFF/-DOTB_USE_\\1=ON/\" ../build-flags-otb.txt; fi \\\n # Possible ENH: superbuild-all-dependencies switch, with separated build-deps-minimal.txt and build-deps-otbcli.txt)\n #&& if $OTB_SUPERBUILD_ALL; then sed -i -r \"s/-DUSE_SYSTEM_([A-Z0-9]*)=ON/-DUSE_SYSTEM_\\1=OFF/ \" ../build-flags-otb.txt; fi \\\n && OTB_FLAGS=$(cat \"../build-flags-otb.txt\") \\\n && cmake ../otb/SuperBuild -DCMAKE_INSTALL_PREFIX=/opt/otbtf $OTB_FLAGS \\\n && make -j $(python -c \"import os; print(round( os.cpu_count() * $CPU_RATIO ))\") && rm -rf /var/lib/apt/lists/*;\n\n### OTBTF - copy (without .git/) or clone repository\nCOPY . /src/otbtf\n#RUN git clone https://github.com/remicres/otbtf.git /src/otbtf\nRUN ln -s /src/otbtf /src/otb/otb/Modules/Remote/otbtf\n\n# Rebuild OTB with module\nARG KEEP_SRC_OTB=false\nRUN cd /src/otb/build/OTB/build \\\n && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/otbtf/lib \\\n && export PATH=$PATH:/opt/otbtf/bin \\\n && cmake /src/otb/otb \\\n      -DCMAKE_INSTALL_PREFIX=/opt/otbtf \\\n      -DOTB_WRAP_PYTHON=ON -DPYTHON_EXECUTABLE=/usr/bin/python3 \\\n      -DOTB_USE_TENSORFLOW=ON -DModule_OTBTensorflow=ON \\\n      -Dtensorflow_include_dir=/opt/otbtf/include/tf \\\n      # Forcing TF>=2, this Dockerfile hasn't been tested with v1 + missing link for libtensorflow_framework.so in the wheel\n      -DTENSORFLOW_CC_LIB=/opt/otbtf/lib/libtensorflow_cc.so.2 \\\n      -DTENSORFLOW_FRAMEWORK_LIB=/opt/otbtf/lib/python3/site-packages/tensorflow/libtensorflow_framework.so.2 \\\n && make install -j $(python -c \"import os; print(round( os.cpu_count() * $CPU_RATIO ))\") \\\n # Cleaning\n && ( $GUI || rm -rf /opt/otbtf/bin/otbgui* ) \\\n && ( $KEEP_SRC_OTB || rm -rf /src/otb ) \\\n && rm -rf /root/.cache /tmp/*\n\n# Symlink executable python files in PATH\nRUN for f in /src/otbtf/python/*.py; do if [ -x $f ]; then ln -s $f /opt/otbtf/bin/; fi; done\n\n# ----------------------------------------------------------------------------\n# Final stage\nFROM otbtf-base\nLABEL maintainer=\"Remi Cresson <remi.cresson[at]inrae[dot]fr>\"\n\n# Copy files from intermediate stage\nCOPY --from=builder /opt/otbtf /opt/otbtf\nCOPY --from=builder /src /src\n\n# System-wide ENV\nENV PATH=\"/opt/otbtf/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/otbtf/lib:$LD_LIBRARY_PATH\"\nENV PYTHONPATH=\"/opt/otbtf/lib/python3/site-packages:/opt/otbtf/lib/otb/python:/src/otbtf\"\nENV OTB_APPLICATION_PATH=\"/opt/otbtf/lib/otb/applications\"\n\n# Default user, directory and command (bash is the entrypoint when using 'docker create')\nRUN useradd -s /bin/bash -m otbuser\nWORKDIR /home/otbuser\n\n# Admin rights without password\nARG SUDO=true\nRUN if $SUDO; then \\\n      usermod -a -G sudo otbuser \\\n      && echo \"otbuser ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers; fi\n\n# Set /src/otbtf ownership to otbuser (but you still need 'sudo -i' in order to rebuild TF or OTB)\nRUN chown -R otbuser:otbuser /src/otbtf\n\n# This won't prevent ownership problems with volumes if you're not UID 1000\nUSER otbuser\n# User-only ENV\n\n# Test python imports\nRUN python -c \"import tensorflow\"\nRUN python -c \"import otbtf, tricks\"\nRUN python -c \"import otbApplication as otb; otb.Registry.CreateApplication('ImageClassifierFromDeepFeatures')\"\n"
}