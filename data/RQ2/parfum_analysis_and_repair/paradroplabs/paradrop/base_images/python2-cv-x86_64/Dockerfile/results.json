{
  "startTime": 1674254928503,
  "endTime": 1674254929127,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:2.7\n\nADD init-app.sh /usr/local/bin/\nADD backports.list /etc/apt/sources.list.d/\n\n# Install some useful libraries for computer vision applications.\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        cmake \\\n        iptables \\\n        libboost-python-dev \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        sudo && rm -rf /var/lib/apt/lists/*;\n\n#RUN git clone https://github.com/davisking/dlib /opt/dlib && \\\n#        cd /opt/dlib && \\\n#        sed \"s/SSE4/SSE2/g\" -i tools/python/CMakeLists.txt && \\\n#        mkdir build && \\\n#        cd build && \\\n#        cmake .. && \\\n#        cmake -- build . && \\\n#        make install && \\\n#        cd .. && \\\n#        python setup.py install --yes USE_SSE2_INSTRUCTIONS\n\n# Build dlib with SSE2 instructions. The packaged version uses SSE4\n# instructions, which our APU devices do not support.\n#\n# References:\n# https://github.com/ageitgey/face_recognition/issues/11\n# https://github.com/ageitgey/face_recognition/blob/master/Dockerfile\nRUN git clone -b 'v19.7' --single-branch https://github.com/davisking/dlib.git /opt/dlib/ && \\\n        cd /opt/dlib && \\\n        sed \"s/SSE4/SSE2/g\" -i tools/python/CMakeLists.txt && \\\n#        mkdir build && \\\n#        cd build && \\\n#        cmake .. && \\\n#        cmake -- build . && \\\n#        make install && \\\n#        cd .. && \\\n        python setup.py install --yes && \\\n        rm -rf /opt/dlib\n\nRUN pip install --no-cache-dir \\\n        face-recognition~=1.0.0 \\\n        numpy~=1.13.1 \\\n        opencv-python~=3.3.0.10 \\\n        Pillow~=4.2.1 \\\n        scipy~=0.19.1 && \\\n    mkdir -p /usr/share/openface-models/\n\nRUN git clone https://github.com/torch/distro.git /opt/torch --recursive && \\\n    cd /opt/torch && \\\n    bash install-deps && \\\n    ./install.sh && \\\n    /opt/torch/install/bin/luarocks install torch && \\\n    /opt/torch/install/bin/luarocks install nn && \\\n    /opt/torch/install/bin/luarocks install dpnn\n\nRUN git clone https://github.com/cmusatyalab/openface.git /opt/openface && \\\n    cd /opt/openface && \\\n    ./models/get-models.sh && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    python setup.py install\n\n# Download openface neural network model.\n#ADD https://storage.cmusatyalab.org/openface-models/nn4.small2.v1.t7 /usr/share/openface-models/\n\n# Set up an unprivileged user so that we can drop out of root.\n# Make /home/paradrop so that pip can drop some files in there.\n# Make /opt/paradrop/app for installing the app files.\n# Add cap_net_bind_service to python so that it can bind to ports 1-1024.\nRUN useradd --system --uid 999 paradrop && \\\n    mkdir -p /home/paradrop && \\\n    chown paradrop /home/paradrop && \\\n    mkdir -p /opt/paradrop/app && \\\n    chown paradrop /opt/paradrop/app && \\\n    chmod a+s /opt/paradrop/app && \\\n    setcap 'cap_net_bind_service=+ep' /usr/local/bin/python2.7\n\n# Defang setuid/setgid binaries.\nRUN find / -perm +6000 -type f -exec chmod a-s {} \\; || true\n\nWORKDIR /opt/paradrop/app\nENV PATH $PATH:/opt/torch/install/bin\n\n# Copy paradrop.yaml and requirements.txt, the latter only if it exists.  Then\n# call init-app.sh to install dependencies. These layers will be cached as long\n# as the requirements do not change.\nONBUILD COPY paradrop.yaml requirements.tx[t] /opt/paradrop/app/\nONBUILD RUN init-app.sh\n\n# Now copy the rest of the files.\nONBUILD COPY . /opt/paradrop/app/\nONBUILD RUN chown paradrop:paradrop -R /opt/paradrop/app\n\nONBUILD USER paradrop\n"
}