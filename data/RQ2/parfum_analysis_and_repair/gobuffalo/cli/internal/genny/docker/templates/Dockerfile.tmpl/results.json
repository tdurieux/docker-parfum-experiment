{
  "startTime": 1674255853220,
  "endTime": 1674255854436,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://docs.docker.com/engine/userguide/eng-image/multistage-build/\nFROM gobuffalo/buffalo:{{.opts.Version}} as builder\n\nENV GOPROXY http://proxy.golang.org\n\nRUN mkdir -p /src/{{.opts.App.PackagePkg}}\nWORKDIR /src/{{.opts.App.PackagePkg}}\n\n{{if .opts.App.WithWebpack -}}\n# this will cache the npm install step, unless package.json changes\nADD package.json .\n{{if .opts.App.WithYarn -}}\nADD yarn.lock .yarnrc.yml ./\nRUN mkdir .yarn\nCOPY .yarn .yarn\nRUN yarn install && yarn cache clean;\n{{else -}}\nRUN npm install --no-progress && npm cache clean --force;\n{{end -}}\n{{end -}}\n\n# Copy the Go Modules manifests\nCOPY go.mod go.mod\nCOPY go.sum go.sum\n# cache deps before building and copying source so that we don't need to re-download as much\n# and so that source changes don't invalidate our downloaded layer\nRUN go mod download\n\nADD . .\nRUN buffalo build --static -o /bin/app\n\nFROM alpine\nRUN apk add --no-cache bash\nRUN apk add --no-cache ca-certificates\n\nWORKDIR /bin/\n\nCOPY --from=builder /bin/app .\n\n# Uncomment to run the binary in \"production\" mode:\n# ENV GO_ENV=production\n\n# Bind the app to 0.0.0.0 so it can be seen from outside the container\nENV ADDR=0.0.0.0\n\nEXPOSE 3000\n\n# Uncomment to run the migrations before running the binary:\n# CMD /bin/app migrate; /bin/app\nCMD exec /bin/app\n"
}