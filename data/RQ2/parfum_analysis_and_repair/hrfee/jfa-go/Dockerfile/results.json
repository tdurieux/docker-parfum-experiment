{
  "startTime": 1674252224744,
  "endTime": 1674252225293,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 8,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM --platform=$BUILDPLATFORM golang:latest AS support\n\nCOPY . /opt/build\n\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends build-essential python3-pip curl software-properties-common sed -y \\\n    && ( curl -f -sL https://deb.nodesource.com/setup_current.x | bash -) \\\n    && apt-get install -y --no-install-recommends nodejs \\\n    && (cd /opt/build; make configuration npm email typescript variants-html bundle-css inline-css swagger copy INTERNAL=off GOESBUILD=on) \\\n    && sed -i 's#id=\"password_resets-watch_directory\" placeholder=\"/config/jellyfin\"#id=\"password_resets-watch_directory\" value=\"/jf\" disabled#g' /opt/build/build/data/html/setup.html && rm -rf /var/lib/apt/lists/*;\n\n\nFROM --platform=$BUILDPLATFORM golang:latest AS build\nARG TARGETARCH\nENV GOARCH=$TARGETARCH\n\nCOPY --from=support /opt/build /opt/build\n\nRUN (cd /opt/build; make compile INTERNAL=off UPDATER=docker)\n\nFROM golang:latest\n\nCOPY --from=build /opt/build/build /opt/jfa-go\n\nEXPOSE 8056\nEXPOSE 8057\n\nCMD [ \"/opt/jfa-go/jfa-go\", \"-data\", \"/data\" ]\n\n\n"
}