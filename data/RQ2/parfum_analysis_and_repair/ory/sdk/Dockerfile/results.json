{
  "startTime": 1674251214312,
  "endTime": 1674251216216,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 2,
        "columnEnd": 60
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 2,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 19,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 19,
        "columnEnd": 79
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 63,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 1,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 63,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 234
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 80,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 89
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 63,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 234
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 23,
        "columnEnd": 135
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 23,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 6,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 1,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 66,
        "columnEnd": 115
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 234
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 80,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedDockerfile": "FROM openjdk:15-buster\n\nRUN apt-get update && apt-get install -y --no-install-recommends ca-certificates ssh bash && rm -rf /var/lib/apt/lists/*;\n\nENV GOLANG_VERSION 1.17\n\nRUN set -eux; \\\n\tapt-get install -y --no-install-recommends bash build-essential openssl golang-go curl wget; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\texport \\\n\t# set GOROOT_BOOTSTRAP such that we can actually build Go\n\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \\\n\t# ... and set \"cross-building\" related vars to the installed system's values so that we create a build targeting the proper arch\n\t# (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)\n\tGOOS=\"$(go env GOOS)\" \\\n\tGOARCH=\"$(go env GOARCH)\" \\\n\tGOHOSTOS=\"$(go env GOHOSTOS)\" \\\n\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \\\n\t; \\\n\t# also explicitly set GO386 and GOARM if appropriate\n\t# https://github.com/docker-library/golang/issues/184\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"$dpkgArch\" in \\\n\tarmhf) export GOARM='6' ;; \\\n\tarmv7) export GOARM='7' ;; \\\n\tx86) export GO386='387' ;; \\\n\tesac; \\\n\t\\\n\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\t\\\n\tcd /usr/local/go/src; \\\n\t./make.bash; \\\n\t\\\n\trm -rf \\\n\t# https://github.com/golang/go/blob/0b30cf534a03618162d3015c8705dd2231e34703/src/cmd/dist/buildtool.go#L121-L125\n\t/usr/local/go/pkg/bootstrap \\\n\t# https://golang.org/cl/82095\n\t# https://github.com/golang/build/blob/e3fe1605c30f6a3fd136b561569933312ede8782/cmd/release/releaselet.go#L56\n\t/usr/local/go/pkg/obj \\\n\t; \\\n\t\\\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\nENV GO111MODULE=on\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\n\nRUN curl -f -sL https://deb.nodesource.com/setup_15.x | bash - && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n# the following is a workaround for openjdk-11-jre-headless erroring due to not having a man path in slim-debian\nRUN apt-get update -y\nRUN apt-get install -y --no-install-recommends python3 python3-dev python3-pip ruby jq gnupg git gettext libffi6 libffi-dev libssl-dev php composer php-curl php7.3-tokenizer php-dom php-xml php-simplexml php-xmlwriter maven pkg-config && rm -rf /var/lib/apt/lists/*;\n# RUN apk add -U --no-cache ca-certificates bash nodejs npm python3 python3-dev py-pip ruby jq build-base gnupg git openssh curl gettext libffi libffi-dev openssl-dev php composer php-curl php7-tokenizer wget php-dom php-xml php-simplexml php-xmlwriter maven\n\n# https://stackoverflow.com/questions/35736598/cannot-pip-install-cryptography-in-docker-alpine-linux-3-3-with-openssl-1-0-2g\n#RUN apk add --no-cache \\\n#        libressl-dev \\\n#        musl-dev \\\n#        libffi-dev && \\\n#    python3 -m pip install --no-cache-dir cryptography==2.1.4 && \\\n#    apk del \\\n#        libressl-dev \\\n#        musl-dev \\\n#        libffi-dev\n\n# RUN wget http://central.maven.org/maven2/org/openapitools/openapi-generator-cli/4.2.2/openapi-generator-cli-4.2.2.jar -O openapi-generator-cli.jar\n\nRUN npm install -g npm@7.21.0 && npm cache clean --force;\nRUN npm i -g @openapitools/openapi-generator-cli && npm cache clean --force;\nRUN openapi-generator-cli version-manager set 5.2.1\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install --user --upgrade setuptools wheel twine\n\n# dotnet\nENV PATH \"$PATH:/root/.dotnet\"\n\nRUN apt-get install -y --no-install-recommends \\\n\tliblttng-ust-dev \\\n\tlibicu-dev \\\n\tzlib1g \\\n\t&& wget -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\\n\t&& chmod +x dotnet-install.sh \\\n\t&& ./dotnet-install.sh --channel 5.0 \\\n\t&& rm dotnet-install.sh && rm -rf /var/lib/apt/lists/*;\n\n# dart\nRUN \\\n  apt-get -q update && apt-get install --no-install-recommends -y -q gnupg2 curl git ca-certificates apt-transport-https openssh-client && \\\n  curl -f https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n  curl -f https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list && \\\n  apt-get update && \\\n  apt-get install -y --no-install-recommends dart=2.13.4-1 && rm -rf /var/lib/apt/lists/*;\n\n# elixir\nRUN \\\n  wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb && \\\n  dpkg -i erlang-solutions_2.0_all.deb && \\\n  apt-get -q update && apt-get install --no-install-recommends -y -q esl-erlang elixir && \\\n  rm erlang-solutions_2.0_all.deb && \\\n  mix local.hex --force && rm -rf /var/lib/apt/lists/*;\n\n# rust\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n\nRUN rm -rf /var/lib/apt/lists/*\nRUN download_url=$( curl -f -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | \\\n      jq -r '.assets[] | select(.name | contains(\"'\"$(uname | tr '[:upper:]' '[:lower:]')\"'_amd64\")) | .browser_download_url') \\\n    && curl -f -o /usr/local/bin/swagger -L'#' \"$download_url\" \\\n    && chmod +x /usr/local/bin/swagger\n\nRUN td=$(mktemp) \\\n    tdd=$(mktemp -d) \\\n    download_url=$( curl -f -s https://api.github.com/repos/cli/cli/releases/latest | \\\n      jq -r '.assets[] | select(.name | contains(\"'\"$(uname | tr '[:upper:]' '[:lower:]')\"'_386.tar.gz\")) | .browser_download_url') \\\n    && curl -f -o $td -L'#' \"$download_url\" \\\n    && tar -xzf $td --strip 1 -C $tdd \\\n    && mv $tdd/bin/gh /usr/local/bin/gh \\\n    && chmod +x /usr/local/bin/gh \\\n    && rm -rf $td $tdd\n\nRUN gem install bundler && \\\n      apt-get update && \\\n      apt-get install -y --no-install-recommends ruby-dev && rm -rf /var/lib/apt/lists/*;\n\nADD go.mod go.mod\nADD go.sum go.sum\nRUN go build -o /usr/local/bin/ory github.com/ory/cli\n\nRUN swagger version\nRUN ory version\n\nENTRYPOINT /bin/bash\n"
}