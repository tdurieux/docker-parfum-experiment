{
  "startTime": 1674249543277,
  "endTime": 1674249544185,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 116
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM --platform=$BUILDPLATFORM postgres:13.3-alpine AS builder\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN echo \"Running on $BUILDPLATFORM, building EHRbase for $TARGETPLATFORM\" > /log\n\n# SHOW POSTGRES SERVER AND CLIENT VERSION\nRUN postgres -V && \\\n    psql -V\n\n# SET POSTGRES DATA DIRECTORY TO CUSTOM FOLDER\n# CREATE CUSTOM DATA DIRECTORY AND CHANGE OWNERSHIP TO POSTGRES USER\n# INITIALIZE DB IN CUSTOM DATA DIRECTORY\n# NOTE: default data directory is /var/lib/postgresql/data and the\n#       approach of this multi stage dockerfile build does not work with it!\nENV PGDATA=\"/var/lib/postgresql/pgdata\"\nRUN mkdir -p ${PGDATA}; \\\n    chown postgres: ${PGDATA}; \\\n    chmod 0700 ${PGDATA}; \\\n    su - postgres -c \"initdb -D ${PGDATA}\"\n\n# COPY DB SETUP SCRIPT\n# START DB AND LET THE SCRIPT DO ALL REQUIRED CONFIGURATION\nCOPY base/db-setup/createdb.sql /postgres/createdb.sql\nRUN su - postgres -c \"pg_ctl -D ${PGDATA} -w start\" && \\\n    su - postgres -c \"psql < /postgres/createdb.sql\" && \\\n    su - postgres -c \"pg_ctl -D ${PGDATA} -w stop\"\n\n# INSTALL JAVA 11 JDK\nRUN apk --no-cache add openjdk11 --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community && \\\n    java --version\n\n# INSTALL MAVEN\nENV MAVEN_VERSION 3.6.3\nENV MAVEN_HOME /usr/lib/mvn\nENV PATH $MAVEN_HOME/bin:$PATH\nRUN wget https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz && \\\n    tar -zxvf apache-maven-$MAVEN_VERSION-bin.tar.gz && \\\n    rm apache-maven-$MAVEN_VERSION-bin.tar.gz && \\\n    mv apache-maven-$MAVEN_VERSION /usr/lib/mvn && \\\n    mvn --version\n\n# CACHE EHRBASE DEPENDENCIES\nRUN ls -la\nCOPY ./pom.xml ./pom.xml\nCOPY ./api/pom.xml ./api/pom.xml\nCOPY ./application/pom.xml ./application/pom.xml\nCOPY ./base/pom.xml ./base/pom.xml\nCOPY ./jooq-pq/pom.xml ./jooq-pq/pom.xml\nCOPY ./rest-ehr-scape/pom.xml ./rest-ehr-scape/pom.xml\nCOPY ./rest-openehr/pom.xml ./rest-openehr/pom.xml\nCOPY ./service/pom.xml ./service/pom.xml\nCOPY ./test-coverage/pom.xml ./test-coverage/pom.xml\nCOPY ./plugin/pom.xml ./plugin/pom.xml\nCOPY ./bom/pom.xml ./bom/pom.xml\nRUN mvn dependency:go-offline -B\n\n# COPY SOURCEFILES\nCOPY ./api/src ./api/src\nCOPY ./application/src ./application/src\nCOPY ./base/src ./base/src\nCOPY ./jooq-pq/src ./jooq-pq/src\nCOPY ./rest-ehr-scape/src ./rest-ehr-scape/src\nCOPY ./rest-openehr/src ./rest-openehr/src\nCOPY ./service/src ./service/src\nCOPY ./plugin/src ./plugin/src\nRUN mvn compile dependency:go-offline \\\n    -Dflyway.skip=true \\\n    -Djooq.codegen.skip=true \\\n    -Dmaven.main.skip\n\n# START DB AND COMPILE EHRBASE\nRUN su - postgres -c \"pg_ctl -D ${PGDATA} -w start\" && \\\n    mvn compile -Dmaven.test.skip && \\\n    su - postgres -c \"pg_ctl -D ${PGDATA} -w stop\"\n\n# START DB AND PACKAGE EHRBASE .JAR\nRUN ls -la; \\\n    su - postgres -c \"pg_ctl -D ${PGDATA} -w start\" && \\\n    mvn package -Dmaven.javadoc.skip=true -Djacoco.skip=true -Dmaven.test.skip && \\\n    su - postgres -c \"pg_ctl -D ${PGDATA} -w stop\"\n\n# WRITE EHRBASE VERSION TO A FILE\n# MOVE EHRBASE.jar TO /tmp FOLDER\nRUN ls -la; \\\n    EHRBASE_VERSION=$(mvn -q -Dexec.executable=\"echo\" \\\n                             -Dexec.args='${project.version}' \\\n                             --non-recursive exec:exec) && \\\n    echo ${EHRBASE_VERSION} > /tmp/ehrbase_version && \\\n    cp application/target/application-${EHRBASE_VERSION}.jar /tmp/ehrbase.jar\n\n\n\n\n\n# FINAL EHRBASE IMAGE WITH JRE AND JAR ONLY\nFROM --platform=$BUILDPLATFORM openjdk:11-jre-slim AS final\nCOPY --from=builder /tmp/ehrbase.jar .\nCOPY --from=builder /tmp/ehrbase_version .\nCOPY .docker_scripts/docker-entrypoint.sh .\nRUN chmod +x ./docker-entrypoint.sh; \\\n    echo \"EHRBASE_VERSION: $(cat ehrbase_version)\"\n\n# SET DEFAULT ENVS (CAN BE OVERRITEN FROM CLI VIA --build-arg FLAG)\nARG DB_URL=jdbc:postgresql://ehrdb:5432/ehrbase\nARG DB_USER=\"ehrbase\"\nARG DB_PASS=\"ehrbase\"\nARG SERVER_NODENAME=local.ehrbase.org\n\n# THESE ENVIRONMENT VARIABLES ARE ALSO APPLIED TO STARTUP OF THE CONTAINER\n# AND CAN BE OVERWRITTEN WITH THE '-e' FLAG ON 'docker run' COMMAND\nENV EHRBASE_VERSION=${EHRBASE_VERSION}\nENV DB_USER=${DB_USER}\nENV DB_PASS=${DB_PASS}\nENV DB_URL=${DB_URL}\nENV SERVER_NODENAME=${SERVER_NODENAME}\n\n# SECURITY ENVs\nENV SECURITY_AUTHTYPE=\"NONE\"\nENV SECURITY_AUTHUSER=\"ehrbase-user\"\nENV SECURITY_AUTHPASSWORD=\"SuperSecretPassword\"\nENV SECURITY_AUTHADMINUSER=\"ehrbase-admin\"\nENV SECURITY_AUTHADMINPASSWORD=\"EvenMoreSecretPassword\"\nENV SECURITY_OAUTH2USERROLE=\"USER\"\nENV SECURITY_OAUTH2ADMINROLE=\"ADMIN\"\nENV SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI=\"\"\n\n# STATUS METRIC ENDPOINT ENVs\nENV MANAGEMENT_ENDPOINTS_WEB_EXPOSURE=\"env,health,info,metrics,prometheus\"\nENV MANAGEMENT_ENDPOINTS_WEB_BASEPATH=\"/management\"\nENV MANAGEMENT_ENDPOINT_ENV_ENABLED=\"false\"\nENV MANAGEMENT_ENDPOINT_HEALTH_ENABLED=\"false\"\nENV MANAGEMENT_ENDPOINT_HEALTH_DATASOURCE_ENABLED=\"false\"\nENV MANAGEMENT_ENDPOINT_INFO_ENABLED=\"false\"\nENV MANAGEMENT_ENDPOINT_METRICS_ENABLED=\"false\"\nENV MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED=\"false\"\nENV MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=\"true\"\nENV CACHE_ENABLED=\"true\"\n\nEXPOSE 8080\nCMD ./docker-entrypoint.sh\n"
}