{
  "startTime": 1674250674532,
  "endTime": 1674250675568,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# to Build the Docker image from root folder execute\n# docker build -t mrin9/rapidoc:v9.2.0 -t mrin9/rapidoc:latest -f ./docker/Dockerfile .\n\n# Run the Docker image (view a spec thats hosted on a web-server)\n# docker run -it --rm -p 80:80 -e SPEC_URL=\"http://petstore.swagger.io/v2/swagger.json\" mrin9/rapidoc\n\n# Run the Docker image (view a spec thats on the local disk)\n# Mount the local spec onto nginx server (available in the docker container)\n#   docker run -it --rm -p 80:80 \\\n#    -v $(pwd)/my-openapi.yaml:/usr/share/nginx/html/my-openapi.yaml \\\n#    -e SPEC_URL = \"my-openapi.yaml\" mrin9/rapidoc\n\n\n# To Run the Docker image  with custom RapiDoc options such as dark theme\n# Example 1 (dark mode)\n#   docker run -it --rm -p 80:80 \\\n#    -e SPEC_URL=\"http://petstore.swagger.io/v2/swagger.json\"\n#    -e RAPIDOC_OPTIONS=\"theme='dark'\" mrin9/rapidoc\n\n# Example 2 (provide your own api server)\n#   docker run -it --rm -p 80:80 \\\n#    -e SPEC_URL=\"http://petstore.swagger.io/v2/swagger.json\" \\\n#    -e RAPIDOC_OPTIONS=\"theme='dark' server-url='http://localhost:8080/api'\" mrin9/rapidoc\n\n# build stage\nFROM node:lts-alpine as build-stage\nWORKDIR /app\nCOPY package*.json ./\nCOPY docker/* ./docker/*\nRUN npm install && npm cache clean --force;\nCOPY . .\nRUN npm run build\n\n# production stage\nFROM nginx:stable-alpine as production-stage\n\nENV PAGE_TITLE=\"RapiDoc\"\nENV PAGE_FAVICON=\"favicon.png\"\nENV SPEC_URL=\"http://petstore.swagger.io/v2/swagger.json\"\nENV PORT=80\n\n# copy files to the nginx folder\nCOPY --from=build-stage /app/dist /usr/share/nginx/html\nCOPY docker/index.tpl.html /usr/share/nginx/html/index.html\nCOPY logo.png /usr/share/nginx/html/favicon.png\nCOPY docker/nginx.conf /etc/nginx/\nCOPY docker/docker-run.sh /usr/local/bin\n\nEXPOSE 80\n\nCMD [\"sh\", \"/usr/local/bin/docker-run.sh\"]\n"
}