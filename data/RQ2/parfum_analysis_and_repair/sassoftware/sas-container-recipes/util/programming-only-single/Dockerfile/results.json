{
  "startTime": 1674252711420,
  "endTime": 1674252713676,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 8,
        "columnEnd": 88
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 8,
        "columnEnd": 88
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 5,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 8,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 8,
        "columnEnd": 48
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 8,
        "columnEnd": 105
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 8,
        "columnEnd": 77
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 8,
        "columnEnd": 77
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 8,
        "columnEnd": 80
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 12,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 8,
        "columnEnd": 77
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 8,
        "columnEnd": 80
      }
    }
  ],
  "repairedDockerfile": "#\n# Copyright 2018 SAS Institute Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n#\n# BUILD:\n#   docker build --file Dockerfile --build-arg BASE=centos:7 --build-arg PLATFORM=redhat . --tag viya-single-container\n#   docker build --file Dockerfile --build-arg BASE=opensuse/leap:42 --build-arg PLATFORM=suse . --tag viya-single-container\n#\n# RUN:\n#   docker run --detach --rm --publish-all --name viya-single-container --hostname viya-single-container viya-single-container\n#\n\nARG BASE=centos:7\nFROM $BASE\n\nARG PLATFORM=redhat\nENV PLATFORM=$PLATFORM\nARG ANSIBLE_VERSION=2.7\nARG TINI_RPM_NAME=tini_0.18.0.rpm\nARG TINI_URL=https://github.com/krallin/tini/releases/download/v0.18.0\nARG SAS_RPM_REPO_URL=https://ses.sas.download/ses/\n\nUSER root\nWORKDIR /tmp/sas\nCOPY SAS_Viya_deployment_data.zip ./\n\nEXPOSE 80 \\\n       443 \\\n       5570\n\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/opt/sas/viya/home/bin/entrypoint\"]\n\n#\n# Install some of the expected packages in their own layer\n#\n\nRUN set -e; \\\n    echo; echo \"####### Go ahead and add the packages that the Ansible playbook will look for\"; echo; \\\n    if [ \"$PLATFORM\" = \"redhat\" ]; then \\\n        rpm --rebuilddb; \\\n        yum install --assumeyes java-1.8.0-openjdk libselinux-python which; \\\n        yum clean all; \\\n        rm --verbose --recursive --force /root/.cache /var/cache/yum; \\\n        rm --verbose /etc/security/limits.d/20-nproc.conf; \\\n    elif [ \"$PLATFORM\" = \"suse\" ]; then \\\n        zypper --non-interactive install -y java-1_8_0-openjdk tar curl hostname iproute2 which gzip; \\\n        zypper clean --all; \\\n        rm --verbose --recursive --force /var/cache/zypp; \\\n        sed -i 's/^*/#*/g' /etc/security/limits.conf; \\\n    fi;\n\n#\n# Install tini to manage the processes\n#\n\nRUN set -e; \\\n    if [ \"$PLATFORM\" = \"redhat\" ]; then \\\n        rpm --rebuilddb; \\\n        curl -f --silent --output ${TINI_RPM_NAME} --location ${TINI_URL}/${TINI_RPM_NAME}; \\\n        yum install --assumeyes ${TINI_RPM_NAME}; \\\n        rm --verbose ${TINI_RPM_NAME}; \\\n        yum clean all; \\\n        rm --verbose --recursive --force /root/.cache /var/cache/yum; \\\n    elif [ \"$PLATFORM\" = \"suse\" ]; then \\\n        zypper install -y curl ; \\\n\n        curl -f --silent --output ${TINI_RPM_NAME} --location ${TINI_URL}/${TINI_RPM_NAME}; \\\n        rpm -i ${TINI_RPM_NAME}; \\\n        rm --verbose ${TINI_RPM_NAME}; \\\n        zypper clean ; \\\n        rm --verbose --recursive --force /var/cache/zypp; \\\n    else \\\n        echo; echo \"####### [ERROR] : Unknown platform of \\\"$PLATFORM\\\" passed in\"; echo; \\\n        exit 1; \\\n    fi\n\n#\n# Install Ansible and other required packages in their own layer\n#\n\n# To get the playbook to run it requires\n# + iproute\n# + openssh-clients\n# + sudo\n# + initscripts\n\nRUN set -e; \\\n    echo; echo \"####### Run the Ansible playbook to create the main layer\"; echo; \\\n    if [ \"$PLATFORM\" = \"redhat\" ]; then \\\n        rpm --rebuilddb; \\\n        echo; echo \"####### Add the packages to support running the Ansible playbook\"; echo; \\\n        yum install --assumeyes  https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm ; rm -rf /var/cache/yum \\\n        yum install --assumeyes python-setuptools python-devel openssl-devel; \\\n        yum install --assumeyes python-pip gcc wget tree automake python-six; \\\n     pip install --no-cache-dir --upgrade pip==19.3 setuptools==44.0; \\\n        pip install --no-cache-dir ansible==${ANSIBLE_VERSION}; \\\n        yum install --assumeyes python iproute openssh-clients initscripts sudo; \\\n    elif [ \"$PLATFORM\" = \"suse\" ]; then \\\n        zypper --non-interactive install -y python-setuptools python-pyOpenSSL python-devel; \\\n\n        zypper --non-interactive install -y openssh sudo; \\\n        easy_install pip; \\\n        zypper remove -y python-cryptography ; \\\n        pip install --no-cache-dir ansible==${ANSIBLE_VERSION}; \\\n    fi;\n\n#\n# Get the SAS orchestrationCLI to generate the playbook then modify it so it will run\n#\nCOPY sas-orchestration ./sas-orchestration\nRUN set -e; \\\n    if [ ! -d sas_viya_playbook ]; then \\\n        if [ \"$PLATFORM\" = \"redhat\" ] || [ \"$PLATFORM\" = \"suse\" ]; then \\\n            ./sas-orchestration build --input SAS_Viya_deployment_data.zip --deployment-type programming --repository-warehouse $SAS_RPM_REPO_URL --platform $PLATFORM; \\\n            tar xvf SAS_Viya_playbook.tgz; rm SAS_Viya_playbook.tgz \\\n        else \\\n            echo; echo \"####### For the platform $PLATFORM we cannot generate the playbook as part of the Docker build\"; \\\n            echo \"####### Generate the playbook externally and then place the sas_viya_playbook in the current directory\"; echo; \\\n            exit 2; \\\n        fi; \\\n    else \\\n        echo; echo \"####### Using playbook provided by user\"; \\\n    fi; \\\n    if [ -f vars.yml ]; then \\\n        echo; echo \"####### Copying over user provided vars.yml file\"; \\\n        cp --verbose vars.yml sas_viya_playbook/; \\\n    fi; \\\n    echo; echo \"####### Viya installer checks for /root/.ssh/known_hosts\"; echo; \\\n    mkdir --verbose ~/.ssh ; \\\n    touch ~/.ssh/known_hosts ; \\\n    chmod --verbose 644 ~/.ssh/known_hosts ; \\\n    echo; echo \"####### Create the sas group and the cas user\"; echo; \\\n    groupadd -g 1001 sas; \\\n    useradd -c \"CAS User\" -g 1001 -m -u 1002 cas; \\\n    pushd sas_viya_playbook ; \\\n    echo; echo \"####### Modify the input to ignore verification failures\"; echo; \\\n    sed -i 's|VERIFY_DEPLOYMENT: true|VERIFY_DEPLOYMENT: false|' vars.yml ; \\\n    echo; echo \"####### Get the right inventory file\"; echo; \\\n    cp --verbose samples/inventory_local.ini . ; \\\n    echo; echo \"####### For now defaulting to a installable Java version\"; echo; \\\n    sed -i 's/java-1.8.0-openjdk-1.8.0.151/java-1.8.0-openjdk/' roles/sas-requirements-java/defaults/main.yml; \\\n    echo; echo \"####### Disable starting httpd\"; echo; \\\n    if [ \"$PLATFORM\" = \"redhat\" ] ; then \\\n        sed -i \"/ notify/,+9d\" roles/httpd-x64_redhat_linux_6-yum/tasks/configure-and-start.yml; \\\n    elif [ \"$PLATFORM\" = \"suse\" ]; then \\\n        # there's no dbus, don't use systemctl. \\\n        sed -i \"/Start apache2 service/,+15d\" roles/apache2-x64_suse_linux_12-yum/tasks/configure-and-start.yml; \\\n        sed -i \"/Generate unit files/,+2d\" internal/install-packages-x64_suse_linux_12-yum.yml; \\\n        echo -e '#!/bin/sh\\n/etc/init.d/$1 $2' > /usr/local/sbin/service; \\\n        chmod 755 /usr/local/sbin/service; \\\n        sed -i \"/Start the spawner service/,+6d\" roles/spawner-config/tasks/start.yml; \\\n        sed -i \"/started {{ SERVICE_NAME }} Service/,+6d\" roles/sas-studio-config/tasks/start.yml; \\\n        if [ -d roles/connect-config ]; then \\\n            sed -i \"/started {{ SERVICE_NAME }} Service/,+5d\" roles/connect-config/tasks/start.yml; \\\n        fi; \\\n    fi; \\\n    popd\n\n#\n# Run the playbook and adjust the result\n#\n\n# Make sure to get the vars_usermods file over.\nCOPY vars_usermods.yml ./sas_viya_playbook/vars_usermods.yml\n\nRUN set -e; \\\n    pushd sas_viya_playbook ; \\\n    echo; echo \"####### Run the playbook\"; echo; \\\n    ansible-playbook -i inventory_local.ini site.yml -e '@vars_usermods.yml' -vvv ; \\\n    echo; echo \"####### Stop the running services\"; echo; \\\n    /etc/init.d/sas-viya-all-services stop; \\\n    popd; \\\n    echo; echo \"####### Reset host variables to localhost\"; echo; \\\n    sed -i 's|^options cashost=\".*\" casport|options cashost=\"localhost\" casport|' /opt/sas/viya/config/etc/batchserver/default/autoexec_deployment.sas; \\\n    sed -i 's|^env.CAS_VIRTUAL_HOST = '.*'|env.CAS_VIRTUAL_HOST = 'localhost'|' /opt/sas/viya/config/etc/cas/default/casconfig_deployment.lua; \\\n    sed -i 's|^SASCONTROLLERHOST=.*|SASCONTROLLERHOST=localhost|' /opt/sas/viya/config/etc/sysconfig/cas/default/sas-cas-deployment; \\\n    sed -i 's|^SAS_CURRENT_HOST=.*|SAS_CURRENT_HOST=localhost|' /opt/sas/viya/config/etc/sysconfig/cas/default/sas-cas-deployment; \\\n    sed -i 's|^options cashost=\".*\" casport|options cashost=\"localhost\" casport|' /opt/sas/viya/config/etc/workspaceserver/default/autoexec_deployment.sas; \\\n    if [ \"$PLATFORM\" = \"redhat\" ] ; then \\\n        sed -i 's|http://.*:|http://localhost:|' /etc/httpd/conf.d/proxy.conf; \\\n        echo \"ServerName localhost\" >> /etc/httpd/conf/httpd.conf; \\\n    elif [ \"$PLATFORM\" = \"suse\" ]; then \\\n        sed -i 's|http://.*:|http://localhost:|' /etc/apache2/conf.d/proxy.conf; \\\n        echo \"ServerName localhost\" >> /etc/apache2/httpd.conf; \\\n    fi; \\\n    echo; echo \"####### Remove permstore\"; echo; \\\n    rm --verbose --recursive --force /opt/sas/viya/config/etc/cas/default/permstore/*; \\\n    echo; echo \"####### Remove created logs\"; echo; \\\n    rm --verbose --recursive --force /opt/sas/viya/config/var/log/all-services/default/*; \\\n    rm --verbose --recursive --force /opt/sas/viya/config/var/log/cas/default/*; \\\n    rm --verbose --recursive --force /opt/sas/viya/config/var/log/sasstudio/default/*; \\\n    rm --verbose --recursive --force /opt/sas/viya/config/var/log/spawner/default/*; \\\n    echo; \\\n    if [ \"$PLATFORM\" = \"redhat\" ] || [ \"$PLATFORM\" = \"suse\" ]; then \\\n        echo; echo \"####### Remove Text Analytic languages; we will add them back in their own layer\"; echo; \\\n        for txtmin in $(rpm -qa | grep sas-txtmin); do \\\n            if [[ \"${txtmin}\" != \"sas-txtmineng\"* ]] && [[ \"${txtmin}\" != *\"yum\"* ]]; then \\\n                echo \"####### Uninstalling ${txtmin}\"; \\\n                rpm --verbose -e ${txtmin}; \\\n            fi; \\\n        done; \\\n    fi; \\\n    if [ \"$PLATFORM\" = \"redhat\" ] ; then \\\n        #yum groupremove --assumeyes \"sas-ygtxtmin*\"; \\\n        echo; echo \"####### Remove some of the bigger packages that have bloated the layer\"; echo; \\\n        for bigpackage in \"sas-mapsgfka1\" \"sas-mapsgfkb1\" \"sas-nvidiacuda1\" \"sas-nvidiacuda\" \"sas-mapsvahdat\" \"sas-reportvahdat\"; do \\\n            if rpm -q --quiet ${bigpackage}; then \\\n                yum erase --assumeyes ${bigpackage}; \\\n            fi; \\\n        done; \\\n        echo; echo \"####### Remove the repos\"; echo; \\\n        yum erase --assumeyes \"sas-meta-repo*\"; \\\n        if [ -e \"/etc/yum.repos.d/sas.repo\" ]; then \\\n            rm --verbose /etc/yum.repos.d/sas.repo; \\\n        fi; \\\n        echo; echo \"####### Clean up yum\"; echo; \\\n        yum clean all; \\\n        rm --verbose --recursive --force /root/.cache /var/cache/yum; \\\n    elif [ \"$PLATFORM\" = \"suse\" ]; then \\\n        echo; echo \"####### Remove some of the bigger packages that have bloated the layer\"; echo; \\\n        for bigpackage in \"sas-mapsgfka1\" \"sas-mapsgfkb1\" \"sas-nvidiacuda1\" \"sas-nvidiacuda\" \"sas-mapsvahdat\" \"sas-reportvahdat\"; do \\\n            if rpm -q --quiet ${bigpackage}; then \\\n                zypper remove -y ${bigpackage}; \\\n            fi; \\\n        done; \\\n        # Because we didn't start spawner, log dir wasn't made \\\n        mkdir -p /opt/sas/viya/config/var/log/spawner/default ; \\\n        chown sas:sas /opt/sas/viya/config/var/log/spawner/default; \\\n        echo; echo \"####### Clean up zypper\"; echo; \\\n        zypper clean --all; \\\n        rm --verbose --recursive --force /etc/zypp/repos.d/sas-repo*suse*.repo; \\\n        rm --verbose --recursive --force /var/cache/zypp; \\\n    fi; \\\n    echo; echo \"####### Remove the entitlement certificate\"; echo; \\\n    rm --verbose --recursive --force /etc/pki/sas; \\\n    echo; echo \"####### Remove the content in the WORKDIR\"; echo; \\\n    rm --verbose --recursive --force sas-orchestration sas-orchestration-linux.tgz;\n\n#\n# Add text analytic languages back in\n#\n\nRUN set -e; \\\n    echo; echo \"####### Create the Text Analytics languages layer\"; echo; \\\n    pushd sas_viya_playbook ; \\\n    echo; echo \"####### Run the playbook\"; echo; \\\n    ansible-playbook -i inventory_local.ini install-only.yml -vvv ; \\\n    echo; echo \"####### Stop the running services\"; echo; \\\n    /etc/init.d/sas-viya-all-services stop; \\\n    popd; \\\n    if [ \"$PLATFORM\" = \"redhat\" ]; then \\\n        echo; echo \"####### Make sure the Text Analytics Languages are installed\"; echo; \\\n        if [ -e \"/etc/yum.repos.d/sas.repo\" ]; then \\\n            yum install --assumeyes \"sas-txtmin*\"; \\\n        else \\\n            yum install --assumeyes --disablerepo sas-meta-repo \"sas-txtmin*\"; \\\n        fi; \\\n        echo; echo \"####### Remove the repos\"; echo; \\\n        yum erase --assumeyes \"sas-meta-repo*\"; \\\n        if [ -e \"/etc/yum.repos.d/sas.repo\" ]; then \\\n            rm --verbose /etc/yum.repos.d/sas.repo; \\\n        fi; \\\n        echo; echo \"####### Clean up yum\"; echo; \\\n        yum clean all; \\\n        rm --verbose --recursive --force /root/.cache /var/cache/yum; \\\n    elif [ \"$PLATFORM\" = \"suse\" ]; then \\\n        echo; echo \"####### Clean up zypper\"; echo; \\\n        zypper clean --all; \\\n        rm --verbose --recursive --force /etc/zypp/repos.d/sas-repo*suse*.repo; \\\n        rm --verbose --recursive --force /var/cache/zypp; \\\n    fi; \\\n    echo; echo \"####### Remove the entitlement certificate\"; echo; \\\n    rm --verbose --recursive --force /etc/pki/sas; \\\n    echo; echo \"####### Remove the content in the WORKDIR\"; echo; \\\n    rm --verbose --recursive --force sas-orchestration sas-orchestration-linux.tgz;\n\n#\n# Add those packages that are hefty in size back into their own layer\n#\n\nRUN set -e; \\\n    echo; echo \"####### Create the layer for some of the bigger packages\"; echo; \\\n    pushd sas_viya_playbook; \\\n    echo; echo \"####### Run the playbook\"; echo; \\\n    ansible-playbook -i inventory_local.ini install-only.yml -vvv; \\\n    echo; echo \"####### Stop the running services\"; echo; \\\n    /etc/init.d/sas-viya-all-services stop; \\\n    popd; \\\n    if [ \"$PLATFORM\" = \"redhat\" ]; then \\\n        echo; echo \"####### Make sure the bigger packages are back in\"; echo; \\\n        for bigpackage in \"sas-mapsgfka1\" \"sas-mapsgfkb1\" \"sas-nvidiacuda1\" \"sas-nvidiacuda\" \"sas-mapsvahdat\" \"sas-reportvahdat\"; do \\\n            if yum info --quiet ${bigpackage} 2>/dev/null; then \\\n                yum install --assumeyes ${bigpackage}; \\\n            fi; \\\n        done; \\\n        echo; echo \"####### Remove the repos\"; echo; \\\n        yum erase --assumeyes \"sas-meta-repo*\"; \\\n        if [ -e \"/etc/yum.repos.d/sas.repo\" ]; then \\\n            rm --verbose /etc/yum.repos.d/sas.repo; \\\n        fi; \\\n        echo; echo \"####### Clean up yum\"; echo; \\\n        yum clean all; \\\n        rm --verbose --recursive --force /root/.cache /var/cache/yum; \\\n    elif [ \"$PLATFORM\" = \"suse\" ]; then \\\n        echo; echo \"####### Make sure the bigger packages are back in\"; echo; \\\n        for bigpackage in \"sas-mapsgfka1\" \"sas-mapsgfkb1\" \"sas-nvidiacuda1\" \"sas-nvidiacuda\" \"sas-mapsvahdat\" \"sas-reportvahdat\"; do \\\n            #zypper info returns same code when found v not found, could use search but then sas-nvidiacuda could match sas-nvidiacuda1. Let it error (but continue) on things it cannot find for now. \\\n            #could grep for the string in stdout but it could be localized depending on base image locale \\\n            zypper --non-interactive install -y ${bigpackage} ||: ; \\\n        done; \\\n        echo; echo \"####### Clean up zypper\"; echo; \\\n        zypper clean --all; \\\n        rm --verbose --recursive --force /etc/zypp/repos.d/sas-repo*suse*.repo; \\\n        rm --verbose --recursive --force /var/cache/zypp; \\\n    fi; \\\n    echo; echo \"####### Remove the entitlement certificate\"; echo; \\\n    rm --verbose --recursive --force /etc/pki/sas; \\\n    echo; echo \"####### Remove the content in the WORKDIR\"; echo; \\\n    rm --verbose --recursive --force SAS_Viya_deployment_data.zip SAS_Viya_playbook.tgz sas_viya_playbook;\n\nCOPY replace_httpd_default_cert.sh /opt/sas/viya/home/bin/replace_httpd_default_cert.sh\nRUN chmod +x /opt/sas/viya/home/bin/replace_httpd_default_cert.sh\n\nCOPY entrypoint /opt/sas/viya/home/bin/entrypoint\nRUN chmod +x /opt/sas/viya/home/bin/entrypoint\n\n"
}