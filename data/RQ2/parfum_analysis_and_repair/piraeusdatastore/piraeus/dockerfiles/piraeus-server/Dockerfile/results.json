{
  "startTime": 1674248614603,
  "endTime": 1674248615439,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 68,
        "columnEnd": 125
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 2,
        "columnEnd": 111
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 44,
        "columnStart": 2,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 2,
        "columnEnd": 139
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 2,
        "columnEnd": 111
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 44,
        "columnStart": 2,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 2,
        "columnEnd": 139
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "ARG DISTRO=bullseye\nFROM debian:$DISTRO\n\nMAINTAINER Roland Kammerer <roland.kammerer@linbit.com>\n\nARG LINSTOR_VERSION\nARG DISTRO\n\nRUN { echo 'APT::Install-Recommends \"false\";' ; echo 'APT::Install-Suggests \"false\";' ; } > /etc/apt/apt.conf.d/99_piraeus\nRUN apt-get update && apt-get install --no-install-recommends -y wget ca-certificates && apt-get clean && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y gnupg2 && \\\n\t\twget -O- https://packages.linbit.com/package-signing-pubkey.asc | gpg --batch --dearmor > /etc/apt/trusted.gpg.d/linbit-keyring.gpg && \\\n\t# Enable contrib repos for zfsutils \\\n\t sed -r -i 's/^deb(.*)$/deb\\1 contrib/' /etc/apt/sources.list && \\\n\t\techo \"deb http://packages.linbit.com/public\" $DISTRO \"misc\" > /etc/apt/sources.list.d/linbit.list && \\\n\t\techo \"deb http://packages.linbit.com/public/staging\" $DISTRO \"misc\" >> /etc/apt/sources.list.d/linbit.list && \\\n\t\tapt-get update && \\\n\t# Install useful utilities and general dependencies\n\t\tapt-get install --no-install-recommends -y udev drbd-utils jq net-tools iputils-ping iproute2 dnsutils netcat sysstat curl util-linux && \\\n\t# Install dependencies for optional features \\\n\t\tapt-get install --no-install-recommends -y \\\n\t# cryptsetup: luks layer\n\t\t\tcryptsetup \\\n\t# e2fsprogs: LINSTOR can create file systems \\\n\t\t\te2fsprogs \\\n\t# lsscsi: exos layer \\\n\t\t\tlsscsi \\\n    # lvm2: manage lvm storage pools \\\n      lvm2 \\\n\t# multipath-tools: exos layer \\\n\t\t\tmultipath-tools \\\n\t# nvme-cli: nvme layer\n\t\t\tnvme-cli \\\n\t# procps: used by LINSTOR to find orphaned send/receive processes \\\n\t\t\tprocps \\\n\t# socat: used with thin-send-recv to send snapshots to another LINSTOR cluster\n\t\t\tsocat \\\n\t# thin-send-recv: used to send/receive snapshots of LVM thin volumes \\\n\t\t\tthin-send-recv \\\n\t# xfsprogs: LINSTOR can create file systems; xfs deps \\\n\t\t\txfsprogs \\\n\t# zstd: used with thin-send-recv to send snapshots to another LINSTOR cluster \\\n\t\t\tzstd \\\n\t# zfsutils-linux: for zfs storage pools \\\n\t\t\tzfsutils-linux \\\n\t\t&& \\\n\t# remove udev, no need for it in the container \\\n\t apt-get remove -y udev && \\\n\t\tapt-get install --no-install-recommends -y linstor-controller=$LINSTOR_VERSION linstor-satellite=$LINSTOR_VERSION linstor-common=$LINSTOR_VERSION linstor-client && \\\n\t\tapt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Log directory need to be group writable. OpenShift assigns random UID and GID, without extra RBAC changes we can only influence the GID.\nRUN mkdir /var/log/linstor-controller && \\\n\t chown 0:1000 /var/log/linstor-controller && \\\n\t chmod -R 0775 /var/log/linstor-controller && \\\n\t # Ensure we log to files in containers, otherwise SOS reports won't show any logs at all\n\t sed -i 's#<!-- <appender-ref ref=\"FILE\" /> -->#<appender-ref ref=\"FILE\" />#' /usr/share/linstor-server/lib/conf/logback.xml\n\n\nRUN lvmconfig --type current --mergedconfig --config 'activation { udev_rules = 0 } devices { global_filter = [ \"r|^/dev/drbd|\" ] obtain_device_list_from_udev = 0}' > /etc/lvm/lvm.conf.new && mv /etc/lvm/lvm.conf.new /etc/lvm/lvm.conf\n\n# controller\nEXPOSE 3376/tcp 3377/tcp 3370/tcp 3371/tcp\n\n# satellite\nEXPOSE 3366/tcp 3367/tcp\n\nCOPY entry.sh /usr/bin/piraeus-entry.sh\n\nARG K8S_AWAIT_ELECTION_VERSION\n# TARGETARCH is a docker special variable: https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\nARG TARGETARCH\n\nRUN wget https://github.com/LINBIT/k8s-await-election/releases/download/${K8S_AWAIT_ELECTION_VERSION}/k8s-await-election-${K8S_AWAIT_ELECTION_VERSION}-linux-${TARGETARCH}.tar.gz -O - | tar -xvz -C /usr/bin/\n\nCMD [\"startSatellite\"]\nENTRYPOINT [\"/usr/bin/k8s-await-election\", \"/usr/bin/piraeus-entry.sh\"]\n"
}