{
  "startTime": 1674250815346,
  "endTime": 1674250817206,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 41,
        "columnStart": 3,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 152,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2022 Mycroft AI Inc.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# -----------------------------------------------------------------------------\n# Dockerfile for Mimic 3 (https://github.com/MycroftAI/mimic3)\n#\n# Creates self-contained binaries using PyInstaller\n# (https://pyinstaller.readthedocs.io/en/stable/).\n#\n# Packages into a Debian (.deb) package.\n#\n# Requires Docker buildx: https://docs.docker.com/buildx/working-with-buildx/\n# -----------------------------------------------------------------------------\n\nFROM debian:bullseye as build\nARG TARGETARCH\nARG TARGETVARIANT\n\nENV LANG C.UTF-8\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo \"Dir::Cache var/cache/apt/${TARGETARCH}${TARGETVARIANT};\" > /etc/apt/apt.conf.d/01cache\n\nRUN --mount=type=cache,id=apt-build,target=/var/cache/apt \\\n   mkdir -p /var/cache/apt/${TARGETARCH}${TARGETVARIANT}/archives/partial && \\\n   apt-get update && \\\n   apt-get install --yes --no-install-recommends \\\n       python3 python3-pip python3-venv \\\n       build-essential python3-dev \\\n       libespeak-ng1 dpkg-dev rsync gettext-base && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /build/mimic3\n\nCOPY wheels/ ./wheels/\n\nCOPY opentts_abc/ ./opentts_abc/\nCOPY mimic3_http/ ./mimic3_http/\nCOPY mimic3_tts/ ./mimic3_tts/\nCOPY LICENSE MANIFEST.in README.md setup.py requirements.txt ./\nCOPY install.sh ./\n\n# Install mimic3\nRUN --mount=type=cache,id=pip-venv,target=/root/.cache/pip \\\n    ./install.sh\n\n# Install PyInstaller\nRUN --mount=type=cache,id=pip-venv,target=/root/.cache/pip \\\n    .venv/bin/pip3 install -f wheels 'pyinstaller>=4,<5'\n\nCOPY pyinstaller/mimic3.py ./pyinstaller/\n\n# Create binary\nRUN .venv/bin/pyinstaller \\\n    --noconfirm \\\n    --name mimic3 \\\n    --hidden-import 'pycrfsuite._dumpparser' \\\n    --hidden-import 'pycrfsuite._logparser' \\\n    --collect-binaries 'onnxruntime' \\\n    --collect-data 'gruut' \\\n    --hidden-import \"gruut_lang_de\" \\\n    --collect-data \"gruut_lang_de\" \\\n    --hidden-import \"gruut_lang_en\" \\\n    --collect-data \"gruut_lang_en\" \\\n    --hidden-import \"gruut_lang_es\" \\\n    --collect-data \"gruut_lang_es\" \\\n    --hidden-import \"gruut_lang_fr\" \\\n    --collect-data \"gruut_lang_fr\" \\\n    --hidden-import \"gruut_lang_it\" \\\n    --collect-data \"gruut_lang_it\" \\\n    --hidden-import \"gruut_lang_nl\" \\\n    --collect-data \"gruut_lang_nl\" \\\n    --hidden-import \"gruut_lang_ru\" \\\n    --collect-data \"gruut_lang_ru\" \\\n    --hidden-import \"gruut_lang_sw\" \\\n    --collect-data \"gruut_lang_sw\" \\\n    --hidden-import \"gruut_lang_fa\" \\\n    --collect-data \"gruut_lang_fa\" \\\n    --collect-data 'espeak_phonemizer' \\\n    --collect-data 'phonemes2ids' \\\n    --hidden-import 'swagger_ui' \\\n    --hidden-import 'epitran' \\\n    --hidden-import 'hazm' \\\n    --collect-data 'hazm' \\\n    --collect-data 'panphon' \\\n    --collect-data 'mimic3_tts' \\\n    --collect-data 'mimic3_http' \\\n    --add-data $(find /usr/lib -name libespeak-ng.so.1 | head -n1):. \\\n    pyinstaller/mimic3.py\n\n# Have to manually copy these over for some reason\nRUN find .venv -name 'wapiti' -type d -exec cp -R {} dist/mimic3/ \\;\nRUN find .venv -name 'libwapiti.*.so' -type f -exec cp {} dist/mimic3/ \\;\n\n# Clean up unused lexicons\nRUN find dist/mimic3/ -wholename '*/gruut_lang_*/espeak' -type d | \\\n    while read -r espeak_dir; do \\\n        rm -rf \"${espeak_dir}\"; \\\n    done\n\n# Copy convenience scripts\nCOPY pyinstaller/mimic3-server \\\n    pyinstaller/mimic3-download \\\n    dist/mimic3/\n\n# Create Debian package\nENV package_dir=/package/mycroft-mimic3-tts\n\nCOPY debian/ debian/\nCOPY voices/ voices/\n\nRUN mkdir -p \"${package_dir}/DEBIAN\" && \\\n    export VERSION=\"$(cat mimic3_tts/VERSION)\" && \\\n    envsubst \\\n    < \"debian/control.in.${TARGETARCH}${TARGETVARIANT}\" \\\n    > \"${package_dir}/DEBIAN/control\" && \\\n    mkdir -p \"${package_dir}/usr/lib/mycroft/mimic3\" && \\\n    rsync -av \"dist/mimic3/\" \"${package_dir}/usr/lib/mycroft/mimic3/\" && \\\n    mkdir -p \"${package_dir}/usr/bin/\" && \\\n    rsync -av \"debian/bin/\" \"${package_dir}/usr/bin/\" && \\\n    export dest_voice_dir=\"${package_dir}/usr/share/mycroft/mimic3/voices/en_UK/apope_low\" && \\\n    mkdir -p \"${dest_voice_dir}\" && \\\n    rsync -av \"voices/en_UK/apope_low/\" \"${dest_voice_dir}/\" && \\\n    cd /package && \\\n    dpkg --build 'mycroft-mimic3-tts' && \\\n    dpkg-name ./*.deb\n\n# -----------------------------------------------------------------------------\n\nFROM debian:bullseye as test\nARG TARGETARCH\nARG TARGETVARIANT\n\nENV LANG C.UTF-8\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo \"Dir::Cache var/cache/apt/${TARGETARCH}${TARGETVARIANT};\" > /etc/apt/apt.conf.d/01cache\n\nRUN --mount=type=cache,id=apt-run,target=/var/cache/apt \\\n    mkdir -p /var/cache/apt/${TARGETARCH}${TARGETVARIANT}/archives/partial && \\\n    apt-get update && \\\n    apt-get install --yes --no-install-recommends \\\n        dpkg-dev python3 && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /test\n\nCOPY --from=build /package/*.deb ./\nCOPY mimic3_tts/VERSION ./\n\n# Install mimic3 for current architecture\nRUN --mount=type=cache,id=apt-run,target=/var/cache/apt \\\n    export mimic3_version=\"$(cat VERSION)\" && \\\n    dpkg-architecture | \\\n    grep 'DEB_HOST_ARCH=' | \\\n    sed -e 's/.\\+=//' | \\\n    xargs printf \"./mycroft-mimic3-tts_${mimic3_version}_%s.deb\" | \\\n    xargs apt install --yes\n\n# Run test\nCOPY tests/* tests/\n\n# Generate sample and check\nRUN export expected_sample=\"tests/apope_sample_${TARGETARCH}${TARGETVARIANT}.wav\" && \\\n    mimic3 \\\n    --deterministic \\\n    --voice 'en_UK/apope_low' \\\n    < tests/apope_sample.txt \\\n    > tests/actual_sample.wav && \\\n    tests/samples_match.py tests/actual_sample.wav \"${expected_sample}\"\n\n# -----------------------------------------------------------------------------\n\nFROM scratch\nARG TARGETARCH\nARG TARGETVARIANT\n\nCOPY --from=build /package/*.deb /\n\n# Ensure test runs\nCOPY --from=test /test/tests/actual_sample.wav \"/apope_sample_${TARGETARCH}${TARGETVARIANT}.wav\"\n"
}