{
  "startTime": 1674253067717,
  "endTime": 1674253068554,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2022 Mycroft AI Inc.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# -----------------------------------------------------------------------------\n# Dockerfile for Mimic 3 (https://github.com/MycroftAI/mimic3)\n#\n# Builds and tests TTS plugin with Mycroft.\n#\n# Requires Docker buildx: https://docs.docker.com/buildx/working-with-buildx/\n# -----------------------------------------------------------------------------\nFROM debian:bullseye as build\nARG TARGETARCH\nARG TARGETVARIANT\n\nENV LANG C.UTF-8\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo \"Dir::Cache var/cache/apt/${TARGETARCH}${TARGETVARIANT};\" > /etc/apt/apt.conf.d/01cache\n\nRUN --mount=type=cache,id=apt-build,target=/var/cache/apt \\\n    mkdir -p /var/cache/apt/${TARGETARCH}${TARGETVARIANT}/archives/partial && \\\n    apt-get update && \\\n    apt-get install --yes --no-install-recommends \\\n        python3 python3-venv python3-pip && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /build/mimic3\n\nCOPY wheels/ ./wheels/\n\nCOPY opentts_abc/ ./opentts_abc/\nCOPY mimic3_http/ ./mimic3_http/\nCOPY mimic3_tts/ ./mimic3_tts/\nCOPY LICENSE MANIFEST.in README.md setup.py requirements.txt ./\nCOPY build-dist.sh ./\n\n# Create sdists\nRUN ./build-dist.sh\n\n# Build plugin sdist\nCOPY plugin-tts-mimic3/ ./plugin-tts-mimic3/\nRUN cd plugin-tts-mimic3 && \\\n    python3 setup.py sdist && \\\n    cp dist/*.tar.gz ../dist/\n\n# -----------------------------------------------------------------------------\n\n# FROM debian:bullseye as test\n# ARG TARGETARCH\n# ARG TARGETVARIANT\n\n# ENV LANG C.UTF-8\n# ENV DEBIAN_FRONTEND=noninteractive\n\n# RUN echo \"Dir::Cache var/cache/apt/${TARGETARCH}${TARGETVARIANT};\" > /etc/apt/apt.conf.d/01cache\n\n# COPY debian/control.in.* ./debian/\n\n# # Use dependencies from Debian package control file\n# RUN --mount=type=cache,id=apt-run,target=/var/cache/apt \\\n#     mkdir -p /var/cache/apt/${TARGETARCH}${TARGETVARIANT}/archives/partial && \\\n#     apt-get update && \\\n#     grep 'Depends:' \"debian/control.in.${TARGETARCH}${TARGETVARIANT}\" | cut -d' ' -f2- | sed -e 's/,/\\n/g' | \\\n#     xargs apt-get install --yes --no-install-recommends \\\n#         python3 python3-venv python3-pip \\\n#         build-essential python3-dev \\\n#         git inotify-tools sox procps\n\n# WORKDIR /test\n\n# # Install Mycroft\n# RUN git clone --single-branch --branch dev https://github.com/MycroftAI/mycroft-core.git\n\n# RUN --mount=type=cache,id=apt-run,target=/var/cache/apt \\\n#     --mount=type=cache,id=pip-requirements,target=/root/.cache/pip \\\n#     cd mycroft-core && \\\n#     CI=true bash dev_setup.sh --allow-root -sm\n\n# COPY wheels/ ./wheels/\n\n# COPY --from=build /build/mimic3/dist/*.tar.gz ./dist/\n\n# # Install TTS plugin\n# RUN --mount=type=cache,id=pip-requirements,target=/root/.cache/pip \\\n#     mycroft-core/bin/mycroft-pip install --upgrade pip && \\\n#     mycroft-core/bin/mycroft-pip install \\\n#         -f wheels/ \\\n#         -f https://synesthesiam.github.io/prebuilt-apps/ \\\n#         -f dist/ \\\n#         mycroft-plugin-tts-mimic3\n\n# # Download default voice\n# COPY voices/ /root/.local/share/mycroft/mimic3/voices/\n# RUN mycroft-core/.venv/bin/mimic3-download --debug 'en_UK/apope_low'\n\n# # Enable plugin\n# RUN mkdir -p /root/.config/mycroft && \\\n#     echo '{ \"tts\": { \"module\": \"mimic3_tts_plug\" , \"mimic3_tts_plug\": { \"length_scale\": 1.0, \"noise_scale\": 0.0, \"noise_w\": 0.0, \"use_deterministic_compute\": true  } } }' \\\n#     > /root/.config/mycroft/mycroft.conf\n\n# # Run test\n# COPY tests/* tests/\n\n# ENV USER root\n# ENV MIMIC_DIR /tmp/mycroft/cache/tts/Mimic3TTSPlugin\n\n# # Start relevant services:\n# # 1. Start message bus, wait for ready message in log (10 min timeout)\n# # 2. Start audio service, wait for ready message in log (10 min timeout)\n# # 3. Run mycroft-speak with sample text\n# # 4. Watch cache directory for a file creation (10 min timeout)\n# # 5. Copy first WAV file to known location\n# RUN export timeout_sec='600' && \\\n#     mycroft-core/bin/mycroft-start bus && \\\n#     timeout \"${timeout_sec}\" tail -n+0 -f /var/log/mycroft/bus.log | grep -iq 'message bus service started' && \\\n#     echo 'Message bus started' && \\\n#     mycroft-core/bin/mycroft-start audio && \\\n#     timeout \"${timeout_sec}\" tail -n+0 -f /var/log/mycroft/audio.log | grep -iq 'audio service is ready' && \\\n#     echo 'Audio service started' && \\\n#     xargs -a tests/apope_sample.txt mycroft-core/bin/mycroft-speak && \\\n#     echo 'Speak request sent' && \\\n#     mkdir -p \"${MIMIC_DIR}\" && \\\n#     for i in $(seq 1 \"${timeout_sec}\"); do \\\n#         wav_path=\"$(find \"${MIMIC_DIR}\" -name '*.wav' | head -n1)\"; \\\n#         if [ -n \"${wav_path}\" ]; then \\\n#             mv \"${wav_path}\" tests/actual_sample.wav; \\\n#             break; \\\n#         fi; \\\n#         sleep 1; \\\n#         echo \"${i}/${timeout_sec}: Looking for WAV file in ${MIMIC_DIR}\"; \\\n#     done\n\n# # Check sample\n# RUN export expected_sample=\"tests/apope_sample_${TARGETARCH}${TARGETVARIANT}.wav\" && \\\n#     tests/samples_match.py tests/actual_sample.wav \"${expected_sample}\"\n\n# RUN --mount=type=cache,id=pip-requirements,target=/root/.cache/pip \\\n#     mkdir -p pip && \\\n#     cp -R /root/.cache/pip/* pip/\n\n# -----------------------------------------------------------------------------\n\nFROM scratch\nARG TARGETARCH\nARG TARGETVARIANT\n\n# Ensure test runs\n# COPY --from=test /test/tests/actual_sample.wav \"/apope_sample_${TARGETARCH}${TARGETVARIANT}.wav\"\n# COPY --from=test /var/log/mycroft/audio.log ./\n\nCOPY --from=build /build/mimic3/plugin-tts-mimic3/dist/*.tar.gz ./\n\n# COPY --from=test /test/pip/ ./pip/\n"
}