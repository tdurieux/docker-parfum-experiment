{
  "startTime": 1674250917135,
  "endTime": 1674250917920,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multi-stage Dockerfile for running Selene APIs or their test suites.\n#\n# ASSUMPTION:\n#   This Dockerfile assumes its resulting containers will run on a Docker network.  A Postgres container named\n#   \"selene-db\" and a Redis container named \"selene-cache\" also need to be running on this network.  To create the\n#   network and the Postgres/Redis containers, use the following commands:\n#       docker network create --driver bridge <network name>\n#       docker run -d --net <network name> --name selene-cache redis:6\n#       docker run -d -e POSTGRES_PASSWORD=selene --net <network name> --name selene-db postgres:10\n#   The DB_HOST environment variable is set to the name of the Postgres container and the REDIS_HOST environment\n#   variable is set to the name of he Redis container.  When running images created from this Dockerfile, include the\n#   \"--net <network name>\" argument.\n\n# Build steps that apply to all of the selene applications.\nFROM python:3.7-slim as base-build\nRUN apt-get update && apt-get -y --no-install-recommends install gcc git && rm -rf /var/lib/apt/lists/*;\nRUN python3 -m pip install pipenv\nRUN mkdir -p /root/allure /opt/selene/selene-backend /root/code-quality /var/log/mycroft\nWORKDIR /opt/selene/selene-backend\nENV DB_HOST selene-db\nENV DB_NAME mycroft\nENV DB_PASSWORD adam\nENV DB_USER selene\nENV JWT_ACCESS_SECRET access-secret\nENV JWT_REFRESH_SECRET refresh-secret\nENV REDIS_HOST selene-cache\nENV REDIS_PORT 6379\nENV SALT testsalt\nENV SELENE_ENVIRONMENT dev\n\n# Put the copy of the shared library code in its own section to avoid reinstalling base software every time\nFROM base-build as selene-base\nCOPY shared shared\n\n# Code quality scripts and user agreements are stored in the MycroftAI/devops repository.  This repository is private.\n# builds for publicly available images should not use this build stage.\n#\n# The GitHub API key is sensitive information and can change depending on who is running the application.\n# It is used here to clone the private MycroftAI/devops repository.\nFROM selene-base as devops-build\nARG github_api_key\nENV GITHUB_API_KEY=$github_api_key\nRUN mkdir -p /opt/mycroft\nWORKDIR /opt/mycroft\nRUN git clone https://$github_api_key@github.com/MycroftAI/devops.git\nWORKDIR /opt/mycroft/devops/jenkins\nRUN pipenv install\n\n# Run a linter and code formatter against the API specified in the build argument\nFROM devops-build as api-code-check\nARG api_name\nWORKDIR /opt/selene/selene-backend\nCOPY api/${api_name} api/${api_name}\nWORKDIR /opt/selene/selene-backend/api/${api_name}\nRUN pipenv install --dev\nENV PYTHONPATH=$PYTHONPATH:/opt/selene/selene-backend/api/${api_name}\nWORKDIR /opt/mycroft/devops/jenkins\nENTRYPOINT [\"pipenv\", \"run\", \"python\", \"-m\", \"pipeline.code_check\", \"--repository\", \"selene-backend\", \"--base-dir\", \"/opt/selene\"]\n\n# Bootstrap the Selene database as it will be needed to run any Selene applications.\nFROM devops-build as db-bootstrap\nENV POSTGRES_PASSWORD selene\nWORKDIR /opt/selene/selene-backend\nCOPY db db\nWORKDIR /opt/selene/selene-backend/db\nRUN pipenv install\nENTRYPOINT [\"pipenv\", \"run\", \"python\", \"scripts/bootstrap_mycroft_db.py\"]\n\n# Run the tests defined in the Account API\nFROM selene-base as account-api-test\nARG stripe_api_key\nENV PANTACOR_API_TOKEN pantacor-token\nENV PANTACOR_API_BASE_URL pantacor.test.url\nENV PYTHONPATH=$PYTHONPATH:/opt/selene/selene-backend/api/account\nENV STRIPE_PRIVATE_KEY $stripe_api_key\nCOPY api/account api/account\nWORKDIR /opt/selene/selene-backend/api/account\nRUN pipenv install --dev\nWORKDIR /opt/selene/selene-backend/api/account/tests\nENTRYPOINT [\"pipenv\", \"run\", \"behave\", \"-f\", \"allure_behave.formatter:AllureFormatter\", \"-o\", \"/root/allure/allure-result\"]\n\n# Run the tests defined in the Single Sign On API\nFROM selene-base as sso-api-test\nARG github_client_id\nARG github_client_secret\nENV PYTHONPATH=$PYTHONPATH:/opt/selene/selene-backend/api/sso\nENV JWT_RESET_SECRET reset-secret\n# The GitHub client ID and secret are sensitive information and can change depending on who is running the application.\n# They are used here to facilitate user authentication using a GitHub account.\nENV GITHUB_CLIENT_ID $github_client_id\nENV GITHUB_CLIENT_SECRET $github_client_secret\nCOPY api/sso api/sso\nWORKDIR /opt/selene/selene-backend/api/sso\nRUN pipenv install --dev\nWORKDIR /opt/selene/selene-backend/api/sso/tests\nENTRYPOINT [\"pipenv\", \"run\", \"behave\", \"-f\", \"allure_behave.formatter:AllureFormatter\", \"-o\", \"/root/allure/allure-result\"]\n\n# Run the tests defined in the Public Device API\nFROM selene-base as public-api-test\nRUN mkdir -p /opt/selene/data\nARG google_stt_key\nARG wolfram_alpha_key\nENV PANTACOR_API_TOKEN pantacor-token\nENV PANTACOR_API_BASE_URL pantacor.test.url\nENV PYTHONPATH=$PYTHONPATH:/opt/selene/selene-backend/api/public\nENV GOOGLE_STT_KEY $google_stt_key\nENV SENDGRID_API_KEY test_sendgrid_key\nENV WOLFRAM_ALPHA_KEY $wolfram_alpha_key\nENV WOLFRAM_ALPHA_URL https://api.wolframalpha.com\nCOPY api/public api/public\nWORKDIR /opt/selene/selene-backend/api/public\nRUN pipenv install --dev\nWORKDIR /opt/selene/selene-backend/api/public/tests\nENTRYPOINT [\"pipenv\", \"run\", \"behave\", \"-f\", \"allure_behave.formatter:AllureFormatter\", \"-o\", \"/root/allure/allure-result\"]\n"
}