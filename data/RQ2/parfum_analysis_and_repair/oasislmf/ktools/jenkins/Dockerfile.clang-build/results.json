{
  "startTime": 1674248496090,
  "endTime": 1674248497988,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\n\n # Create variable to hold timezone for configuring tzdata\n ENV TZ=Europe/London\n RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    pkg-config \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /var\n\n# Build Apache Parquet C++ from source and install\nRUN git clone https://github.com/apache/arrow.git -b release-7.0.0\nRUN mkdir -p /var/arrow/cpp/build-release\nWORKDIR /var/arrow/cpp/build-release\nRUN cmake -DARROW_PARQUET=ON -DARROW_BUILD_STATIC=ON -DARROW_OPTIONAL_INSTALL=ON ..\nRUN make\nRUN make install\n\n# Install Base packages\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    autoconf \\\n    automake \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    cmake \\\n    dirmngr \\\n    dpkg-dev \\\n    file \\\n    git \\\n    gnupg2 \\\n    lbzip2 \\\n    libc++-dev \\\n    libc-dev \\\n    libgcc-10-dev \\\n    libstdc++-10-dev \\\n    libtinfo5 \\\n    libtool \\\n    lsb-release \\\n    make \\\n    patch \\\n    pkg-config \\\n    wget \\\n    xz-utils \\\n    zlib1g-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# install clang-9\nENV GPG_KEYS 09C4E7007CB2EFFB A2C794A986419D8A B4468DF4E95C63DC D23DD2C20DD88BA2 8F0871F202119294 0FC3042E345AD05D\nENV LLVM_RELEASE 9\nENV LLVM_VERSION 9.0.0\n\nRUN gpg --batch --keyserver keyserver.ubuntu.com --recv-keys $GPG_KEYS\nCOPY ./jenkins/install-clang.sh .\nRUN ./install-clang.sh\n\nCOPY ./jenkins/entrypoint_clang-autotools.sh /usr/local/bin/build-autotools.sh\nCOPY ./jenkins/entrypoint_clang-cmake.sh /usr/local/bin/build-cmake.sh\n\nWORKDIR /var/ktools\nENTRYPOINT build-autotools.sh\n"
}