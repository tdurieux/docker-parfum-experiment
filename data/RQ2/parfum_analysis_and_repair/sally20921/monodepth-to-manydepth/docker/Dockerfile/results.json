{
  "startTime": 1674251286927,
  "endTime": 1674251287901,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 22,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 81
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2020 Toyota Research Institute.  All rights reserved.\n\nFROM nvidia/cuda:10.2-devel-ubuntu18.04\n\nENV PROJECT=all4depth\nENV PYTORCH_VERSION=1.8.1\nENV TORCHVISION_VERSION=0.9.1\nENV CUDNN_VERSION=7.6.5.32-1+cuda10.2\nENV NCCL_VERSION=2.7.8-1+cuda10.2\nENV HOROVOD_VERSION=65de4c961d1e5ad2828f2f6c4329072834f27661\nENV TRT_VERSION=6.0.1.5\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\n\nARG python=3.6\nENV PYTHON_VERSION=${python}\nENV DEBIAN_FRONTEND=noninteractive\n\n# Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n\nRUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    g++-4.8 \\\n    git \\\n    curl \\\n    docker.io \\\n    vim \\\n    wget \\\n    ca-certificates \\\n    libcudnn7=${CUDNN_VERSION} \\\n    libnccl2=${NCCL_VERSION} \\\n    libnccl-dev=${NCCL_VERSION} \\\n    libjpeg-dev \\\n    libpng-dev \\\n    python${PYTHON_VERSION} \\\n    python${PYTHON_VERSION}-dev \\\n    python3-tk \\\n    librdmacm1 \\\n    libibverbs1 \\\n    ibverbs-providers \\\n    libgtk2.0-dev \\\n    unzip \\\n    bzip2 \\\n    htop \\\n    gnuplot \\\n    ffmpeg && rm -rf /var/lib/apt/lists/*;\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \\\n    tar zxf openmpi-4.0.0.tar.gz && \\\n    cd openmpi-4.0.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-4.0.0.tar.gz\n\n# Install OpenSSH for MPI to communicate between containers\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && \\\n    mkdir -p /var/run/sshd && rm -rf /var/lib/apt/lists/*;\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Instal Python and pip\nRUN if [[ \"${PYTHON_VERSION}\" == \"3.6\" ]]; then \\\n    apt-get install --no-install-recommends -y python${PYTHON_VERSION}-distutils; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\nRUN ln -sf /usr/bin/python${PYTHON_VERSION} /usr/bin/python\n\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n# Install Pydata and other deps\nRUN pip install --no-cache-dir future typing numpy pandas matplotlib jupyter h5py \\\n    awscli boto3 tqdm termcolor path.py pillow-simd opencv-python-headless \\\n    mpi4py onnx onnxruntime pycuda yacs cython==0.29.10\n\n# Install PyTorch\nRUN pip install --no-cache-dir torch==${PYTORCH_VERSION} \\\n    torchvision==${TORCHVISION_VERSION} && ldconfig\n\n# Install apex\nRUN mkdir /workspace\nWORKDIR /workspace\nRUN git clone https://github.com/NVIDIA/apex.git\nWORKDIR /workspace/apex\nRUN pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" .\nENV PYTHONPATH=\"/workspace/apex:$PYTHONPATH\"\nWORKDIR /workspace\n\n# install horovod (for distributed training)\nRUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \\\n    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_GPU_BROADCAST=NCCL HOROVOD_WITH_PYTORCH=1 \\\n    pip install --no-cache-dir git+https://github.com/horovod/horovod.git@${HOROVOD_VERSION} && \\\n    ldconfig\n\n# Settings for S3\nRUN aws configure set default.s3.max_concurrent_requests 100 && \\\n    aws configure set default.s3.max_queue_size 10000\n\n# Install Minkowski Engine\nENV TORCH_CUDA_ARCH_LIST=Volta;Turing;Kepler+Tesla\nRUN pip install --no-cache-dir ninja\nRUN apt-get update && apt-get install --no-install-recommends -y libopenblas-dev && rm -rf /var/lib/apt/lists/*;\nWORKDIR /workspace\nRUN git clone https://github.com/NVIDIA/MinkowskiEngine.git\nRUN cd /workspace/MinkowskiEngine && \\\n    python setup.py install --force_cuda\n\n# Add Tini (cf. https://github.com/jupyter/docker-stacks)\nENV TINI_VERSION v0.19.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"-g\", \"--\"]\n\n# Install DGP (dataset utils)\nWORKDIR /workspace\nRUN git clone https://github.com/TRI-ML/dgp.git\nENV PYTHONPATH=\"/workspace/dgp:$PYTHONPATH\"\n\n# Override DGP wandb with required version\nRUN pip install --no-cache-dir wandb==0.8.21 pyquaternion\n\n# Expose Port for jupyter (8888)\nEXPOSE 8888\n\n# create project workspace dir\nRUN mkdir -p /workspace/experiments\nRUN mkdir -p /workspace/${PROJECT}\nWORKDIR /workspace/${PROJECT}\n\n# Copy project source last (to avoid cache busting)\nWORKDIR /workspace/${PROJECT}\nCOPY . /workspace/${PROJECT}\nENV PYTHONPATH=\"/workspace/${PROJECT}:$PYTHONPATH\""
}