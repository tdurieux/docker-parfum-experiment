{
  "startTime": 1674219168070,
  "endTime": 1674219169747,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 221,
        "lineEnd": 221,
        "columnStart": 5,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 127,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2017 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ------------------------------------------------------------------------------\n\n# Description:\n#   Builds the environment with all prerequistes needed to build Private Data Objects.\n#\n#  Configuration (build) paramaters\n#  - ubuntu version to use: \t  UBUNTU_VERSION (default: 18.04)\n#  - ubuntu name to use: \t  UBUNTU_NAME (default: bionic)\n#  - sgx sdk/psw version: \t  SGX (default: 2.15.1)\n#  - openssl version: \t\t  OPENSSL (default: 1.1.1g)\n#  - sgxssl version: \t\t  SGXSSL  (default: 2.10_1.1.1g)\n#  - additional apt packages:\t  ADD_APT_PKGS (default: )\n\n# Build:\n#   $ docker build docker -f docker/Dockerfile.pdo-dev -t pdo-dev\n#   - if you want to build with different version than 18.04/bionic, say 20.04/focal,\n#     add --build-arg UBUNTU_VERSION=18.04  --build-arg UBUNTU_NAME=focal\n#   - if behind a proxy, make sure you've configured ~/.docker/config.json with your proxy setting\n#     and the docker daemon itself also has the proxy properly configured, for systemd based hosts\n#     like ubuntu see https://docs.docker.com/config/daemon/systemd/#httphttps-proxy\n#\n# Run:\n#   $ cd <directory where you checked out private-data-objects>\n#   $ docker run -it pdo-dev\n#   - to run with SGX HW, add options '--device=/dev/isgx -v /var/run/aesmd:/var/run/aesmd ')\n#     then you can build system as \"usual\", e.g., to build it as\n#        . /project/pdo/src/build/common-config.sh\n#        make -C /project/pdo/src/build/\n#     etc etc\n#     Note: your host SGX PSW runtime should be at a similar level than the one in the container\n#     or the PSW/aesmd might cause enclave launch problems\n#   - if behind a proxy, make sure you've configured ~/.docker/config.json with your proxy setting\n#   - if you want to debug with gdb and alike, you also might want to add options\n#     '--security-opt seccomp=unconfined --security-opt apparmor=unconfined --cap-add=SYS_PTRACE '\n#   - for develooping based on source in host you might map source into container with an option\n#     like -v $(pwd):/project/pdo/src/private-data-objects/\n\nARG UBUNTU_VERSION=18.04\nARG UBUNTU_NAME=bionic\n# NOTE:\n# - unfortunately, we do need both name (for repo) and version (for sgx directories), only docker image supports both ..\n#   18.04 <-> bionic, 20.04 <-> focal\n# - right now, full sgx support exists only for bionic;\n#   xenial (16.04) has support only PSW but not SDK;\n#   support for focal is still in the making but hopefully will exist soon...\n\nFROM ubuntu:${UBUNTU_VERSION}\n\n# Dockerfile limitations force a repetition of global args\nARG UBUNTU_VERSION\nARG UBUNTU_NAME\n\nARG SGX=2.15.1\nARG OPENSSL=1.1.1g\nARG SGXSSL=2.10_1.1.1g\n\nARG ADD_APT_PKGS=\n\n# Add necessary packages\n# TODO(xenial): we need to manually install protobuf 3 as xenial has v2\n# Note: ocamlbuild is required by PREREQ but does not exist for xenial. However, the relevant componets are part of 'ocaml' package, later ubuntu split up that package ...\nRUN apt-get update \\\n && DEBIAN_FRONTEND=\"noninteractive\" \\\n\n  apt-get # above makes sure any install of 'tzdata' or alike (as e.g., pulled in via ubuntu 20.04) does not hang ... --no-install-recommends \\\n  install -y -q \\\n    autoconf \\\n    automake \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    curl \\\n    dh-autoreconf \\\n    git \\\n    gnupg \\\n    libcurl4-openssl-dev \\\n    liblmdb-dev \\\n    libprotobuf-dev \\\n    libsecp256k1-dev \\\n    libssl-dev \\\n    libtool \\\n    make \\\n    ocaml \\\n    ocamlbuild \\\n    pkg-config \\\n    protobuf-compiler \\\n    python \\\n    python3-dev \\\n    python3-venv \\\n    python3-virtualenv \\\n    software-properties-common \\\n    swig \\\n    tar \\\n    unzip \\\n    virtualenv \\\n    wget \\\n    xxd \\\n    net-tools \\\n    dnsutils \\\n    $ADD_APT_PKGS \\\n && apt-get -y -q upgrade \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n# environment variables\n# we keep all definitions in '/etc/profile.d/pdo.sh'. Alas, this is called only for login shells\n# so add it at least to /etc/bash.bashrc. Nothing equivalent seems to exist for dash/sh, which is used\n# during build, so in that case we will have to explicitly '. /etc/profile.d/pdo.sh'.\n# NOTE: There seems to be _nothing_ which is guaranteed to be always called, e.g., /etc/environment\n#   also does not work as it is not always called\n && sed -i '1s;^;. /etc/profile.d/pdo.sh\\n;' /etc/bash.bashrc\n\n# Install SGX PSW packages\nRUN echo \"deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu ${UBUNTU_NAME} main\" >> /etc/apt/sources.list \\\n && wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add - \\\n && apt-get update \\\n && apt-get install -y \\\n    # We do not need daemons like AESMD as we run them on host (side-steps also\n    # issues with config of /etc/aesmd.conf like proxy ..). Without this option\n    # aesmd and lots of other plugsin are automatically pulled in.\n    # See SGX Installation notes and, in particular, linux/installer/docker/Dockerfile\n    # in linux-sgx git repo of sdk/psw source.\n    --no-install-recommends \\\n    # - dependencies\n      build-essential python \\\n    # - sgx packages\n    #   - runtime\n      libsgx-urts \\\n    # (also pulls in libsgx-enclave-common)\n    #   - basic architectural services, e.g., launch & attestation\n      # sgx-aesm-service (see above why commented out)\n      libsgx-uae-service && rm -rf /var/lib/apt/lists/*;\n      # Note:\n      # - above is \"old\" style from epid days. Since sdk 2.7 libsgx-uae-service is\n      #   split into subpackages\n      #   - launch service\n      #     libsgx-launch\n      #   - algorithm agnostic attestation service\n      #     libsgx-quote-ex\n      #   - EPID-based attestation service\n      #     libsgx-epid\n      #   - DCAP-based attesation service\n      #     libsgx-dcap* ...\n      #   correspondingly, also libsgx_uae_service.so and <sgx_uae_service.h>\n      #   is split into corresponding smaller libraries and header-files to make\n      #   integration with DCAP easier and minimize pulling in unnecessary dependencies\n\n# Install SGX SDK\nRUN mkdir -p /opt/intel\nWORKDIR /opt/intel\nRUN SGX_SDK_BIN_REPO=https://download.01.org/intel-sgx/sgx-linux/${SGX}/distro/ubuntu${UBUNTU_VERSION}-server \\\n  && SGX_SDK_BIN_FILE=$(cd /tmp; wget --spider --recursive --level=1 --no-parent ${SGX_SDK_BIN_REPO} 2>&1 | perl  -ne 'if (m|'${SGX_SDK_BIN_REPO}'/(sgx_linux_x64_sdk.*)|) { print \"$1\\n\"; }') \\\n  && wget -q ${SGX_SDK_BIN_REPO}/${SGX_SDK_BIN_FILE} \\\n  && chmod +x ${SGX_SDK_BIN_FILE} \\\n  && echo -e \"no\\n/opt/intel\" | ./${SGX_SDK_BIN_FILE} \\\n  && rm ${SGX_SDK_BIN_FILE} \\\n  && echo \". /opt/intel/sgxsdk/environment\" >> /etc/profile.d/pdo.sh\n\n# LVI mitigations, needed to compile sgxssl, requires a\n#   recent version of binutils (>= 2.32). Ubuntu 18.04 only\n#   has 2.30 but Intel ships binary distro for 2.32.51.20190719\nRUN [ \"$UBUNTU_VERSION\" = \"18.04\" ] \\\n  && SGX_SDK_BINUTILS_REPO=https://download.01.org/intel-sgx/sgx-linux/${SGX} \\\n  && SGX_SDK_BINUTILS_FILE=$(cd /tmp; wget --spider --recursive --level=1 --no-parent ${SGX_SDK_BINUTILS_REPO} 2>&1 | perl  -ne 'if (m|'${SGX_SDK_BINUTILS_REPO}'/(as.ld.objdump.*)|) { print \"$1\\n\"; }') \\\n  && wget -q ${SGX_SDK_BINUTILS_REPO}/${SGX_SDK_BINUTILS_FILE} \\\n  && mkdir sgxsdk.extras \\\n  && cd sgxsdk.extras \\\n  && tar -zxf ../${SGX_SDK_BINUTILS_FILE} \\\n  && rm ../${SGX_SDK_BINUTILS_FILE} \\\n  && echo \"export PATH=/opt/intel/sgxsdk.extras/external/toolset/ubuntu${UBUNTU_VERSION}:${PATH}\" >> /etc/profile.d/pdo.sh\n# Note: above install file contains binutitls for all supported distros.\n#   So to same some space (~100m) & make smaller images one could delete\n#   all subdirectores other than ${UBUNTU_VERSION} ...\nENV PATH=\"/opt/intel/sgxsdk.extras/external/toolset/ubuntu${UBUNTU_VERSION}:${PATH}\"\n\n# SGXSSL\nRUN git clone 'https://github.com/intel/intel-sgx-ssl.git' \\\n  && cd intel-sgx-ssl \\\n  && . /opt/intel/sgxsdk/environment \\\n  && git checkout lin_${SGXSSL} \\\n  && cd openssl_source \\\n  && wget -q https://www.openssl.org/source/openssl-${OPENSSL}.tar.gz \\\n  && cd ../Linux \\\n  && make SGX_MODE=SIM DESTDIR=/opt/intel/sgxssl all test \\\n  && make install \\\n  && make clean \\\n  && echo \"export SGX_SSL=/opt/intel/sgxssl\" >> /etc/profile.d/pdo.sh\n\n# Install contract interpreter related stuff\n\n# - tinyscheme\n#   Install Tinyscheme\nRUN mkdir -p /opt/tinyscheme\nWORKDIR /opt/tinyscheme\nRUN wget -q https://downloads.sourceforge.net/project/tinyscheme/tinyscheme/tinyscheme-1.41/tinyscheme-1.41.zip \\\n && unzip tinyscheme-1.41.zip \\\n && rm tinyscheme-1.41.zip  \\\n && cd tinyscheme-1.41  \\\n && make FEATURES='-DUSE_DL=1 -DUSE_PLIST=1' \\\n && echo \"export TINY_SCHEME_SRC=$(pwd)\" >> /etc/profile.d/pdo.sh\n\n#   - get wasi sdk\nRUN wget -q -P /tmp https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk_12.0_amd64.deb \\\n && dpkg --install /tmp/wasi-sdk_12.0_amd64.deb\n\n# Install ccf client. Unfortunately entire ccf base needs to be installed. there is no\n# installer for client alone\nRUN mkdir -p /opt/ccfbase \\\n  && cd /opt/ccfbase \\\n  && wget -q https://github.com/microsoft/CCF/releases/download/ccf-0.11.7/ccf.tar.gz \\\n  && tar -xvf ccf.tar.gz && rm ccf.tar.gz\n\n\n# environment setup as required by PDO\n# Note\n# - though this works though only for docker run, if you derive images from\n#   this one you might have to specify explicitly variables like PDO_HOME,\n#   PDO_ENCLAVE & SGX_MODE!\n# - make sure /etc/environment is always included for bash\nRUN \\\n    mkdir -p /project/pdo \\\n && echo \"export PDO_INSTALL_ROOT=/project/pdo/build\" >> /etc/profile.d/pdo.sh \\\n && echo \"export PDO_HOME=/project/pdo/build/opt/pdo\" >> /etc/profile.d/pdo.sh \\\n && echo \"export CCF_BASE=/opt/ccfbase/ccf-0.11.7\" >> /etc/profile.d/pdo.sh \\\n && echo \"export PDO_ENCLAVE_CODE_SIGN_PEM=/project/pdo/enclave.pem\" >> /etc/profile.d/pdo.sh \\\n && openssl genrsa -3 3072 > /project/pdo/enclave.pem \\\n && echo \"if ([ -c /dev/isgx ] && [ -S /var/run/aesmd/aesm.socket ]); then export SGX_MODE=HW; else export SGX_MODE=SIM; fi;\" >> /root/.bashrc\n\nWORKDIR /project/pdo/\n\nENTRYPOINT [\"/bin/bash\"]\n"
}