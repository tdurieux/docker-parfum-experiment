{
  "startTime": 1674250615263,
  "endTime": 1674250616228,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 12,
        "columnEnd": 21
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 30,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2020 Gitpod GmbH. All rights reserved.\n# Licensed under the GNU Affero General Public License (AGPL).\n# See License-AGPL.txt in the project root for license information.\n\nFROM gitpod/workspace-full-vnc:latest\n\nENV TRIGGER_REBUILD 12\n\nUSER root\n\n# Install Java 17\nRUN bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh && sdk install java 17.0.2-tem\"\n\n### QEMU (x86) and workspace kernel development tools\nRUN install-packages qemu qemu-system-x86 linux-image-$(uname -r) libguestfs-tools sshpass\n\n### Clang and LLVM\nRUN install-packages clang-7 llvm-7\n\n### cloud_sql_proxy ###\n#ARG CLOUD_SQL_PROXY=/usr/local/bin/cloud_sql_proxy\n#RUN curl -fsSL https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 > $CLOUD_SQL_PROXY \\\n#    && chmod +x $CLOUD_SQL_PROXY\n\n### Azure CLI ###\nRUN curl -f -sL https://aka.ms/InstallAzureCLIDeb\n\n### Helm3 ###\nRUN mkdir -p /tmp/helm/ \\\n    && curl -fsSL https://get.helm.sh/helm-v3.6.0-linux-amd64.tar.gz | tar -xzvC /tmp/helm/ --strip-components=1 \\\n    && cp /tmp/helm/helm /usr/local/bin/helm \\\n    && cp /tmp/helm/helm /usr/local/bin/helm3 \\\n    && rm -rf /tmp/helm/ \\\n    && helm completion bash > /usr/share/bash-completion/completions/helm\n\n### kubernetes ###\n#RUN mkdir -p /usr/local/kubernetes/ && \\\n#   curl -fsSL https://github.com/kubernetes/kubernetes/releases/download/v1.17.16/kubernetes.tar.gz \\\n#    | tar -xzvC /usr/local/kubernetes/ --strip-components=1 \\\n#    && KUBERNETES_SKIP_CONFIRM=true /usr/local/kubernetes/cluster/get-kube-binaries.sh \\\n#    && chown gitpod:gitpod -R /usr/local/kubernetes\n#\n#ENV PATH=$PATH:/usr/local/kubernetes/cluster/:/usr/local/kubernetes/client/bin/\n\n### kubectl ###\nRUN curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n    # really 'xenial'\n    && add-apt-repository -yu \"deb https://apt.kubernetes.io/ kubernetes-xenial main\" \\\n    && install-packages kubectl=1.20.0-00 \\\n    && kubectl completion bash > /usr/share/bash-completion/completions/kubectl\n\nRUN curl -fsSL -o /usr/bin/kubectx https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx && chmod +x /usr/bin/kubectx \\\n    && curl -fsSL -o /usr/bin/kubens  https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens  && chmod +x /usr/bin/kubens\n\nRUN curl -fsSL https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.2/kubebuilder_2.3.2_linux_amd64.tar.gz | tar -xz -C /tmp/ \\\n    && sudo mkdir -p /usr/local/kubebuilder \\\n    && sudo mv /tmp/kubebuilder_2.3.2_linux_amd64/* /usr/local/kubebuilder \\\n    && rm -rf /tmp/*\n\n### MySQL client ###\n#RUN install-packages mysql-client\n\n# golangci-lint\n#RUN cd /usr/local && curl -fsSL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s v1.39.0\n\n# leeway\n#ENV LEEWAY_NESTED_WORKSPACE=true\n#RUN cd /usr/bin && curl -fsSL https://github.com/TypeFox/leeway/releases/download/v0.2.2/leeway_0.2.2_Linux_x86_64.tar.gz | tar xz\n\n# dazzle\n#RUN cd /usr/bin && curl -fsSL https://github.com/32leaves/dazzle/releases/download/v0.0.3/dazzle_0.0.3_Linux_x86_64.tar.gz | tar xz\n\n# werft CLI\n#ENV WERFT_K8S_NAMESPACE=werft\n#ENV WERFT_DIAL_MODE=kubernetes\n#RUN cd /usr/bin && curl -fsSL https://github.com/csweichel/werft/releases/download/v0.0.5rc/werft-client-linux-amd64.tar.gz | tar xz && mv werft-client-linux-amd64 werft\n\n# yq - jq for YAML files\n# Note: we rely on version 3.x.x in various places, 4.x breaks this!\nRUN cd /usr/bin && curl -fsSL https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 > yq && chmod +x yq\n\n# release helper\nRUN cd /usr/bin && curl -fsSL https://github.com/c4milo/github-release/releases/download/v1.1.0/github-release_v1.1.0_linux_amd64.tar.gz | tar xz\n\n### Protobuf\nRUN set -ex \\\n    && tmpdir=$(mktemp -d) \\\n    && curl -fsSL -o $tmpdir/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.15.5/protoc-3.15.5-linux-x86_64.zip \\\n    && mkdir -p /usr/lib/protoc && cd /usr/lib/protoc && unzip $tmpdir/protoc.zip \\\n    && chmod -R o+r+x /usr/lib/protoc/include \\\n    && chmod -R +x /usr/lib/protoc/bin \\\n    && ln -s /usr/lib/protoc/bin/* /usr/bin \\\n    && rm -rf $tmpdir\n\n### Telepresence ###\n#RUN curl -fsSL https://packagecloud.io/datawireio/telepresence/gpgkey | apt-key add - \\\n#    # 'cosmic' not supported\n#    && add-apt-repository -yu \"deb https://packagecloud.io/datawireio/telepresence/ubuntu/ bionic main\" \\\n#    # 0.95 (current at the time of this commit) is broken\n#    && install-packages \\\n#    iproute2 \\\n#    iptables \\\n#    net-tools \\\n#    socat \\\n#    telepresence=0.109\n\n### Toxiproxy CLI\n#RUN curl -fsSL -o /usr/bin/toxiproxy https://github.com/Shopify/toxiproxy/releases/download/v2.1.4/toxiproxy-cli-linux-amd64 \\\n#    && chmod +x /usr/bin/toxiproxy\n\n### libseccomp > 2.5.0\nRUN install-packages gperf \\\n    && cd $(mktemp -d) \\\n    && curl -fsSL https://github.com/seccomp/libseccomp/releases/download/v2.5.1/libseccomp-2.5.1.tar.gz | tar xz \\\n    && cd libseccomp-2.5.1 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm -rf -d\n\nUSER gitpod\n\n# Fix node version we develop against\nARG GITPOD_NODE_VERSION=16.13.1\nRUN bash -c \". .nvm/nvm.sh \\\n    && nvm install $GITPOD_NODE_VERSION \\\n    && npm install -g typescript yarn\"\nENV PATH=/home/gitpod/.nvm/versions/node/v${GITPOD_NODE_VERSION}/bin:$PATH\n\n# Go\nENV GOFLAGS=\"-mod=readonly\"\n\n## Register leeway autocompletion in bashrc\n#RUN bash -c \"echo . \\<\\(leeway bash-completion\\) >> ~/.bashrc\"\n\n# Install tools for gsutil\nRUN sudo install-packages \\\n    gcc \\\n    python-dev \\\n    python-setuptools\n\nRUN bash -c \"pip uninstall crcmod; pip install --no-cache-dir -U crcmod\"\n\n# Set k8s user config for dev cluster\nRUN echo \". /workspace/business-partner-agent/scripts/setup-kubeconfig.sh\" >> ~/.bashrc\n\n#ENV LEEWAY_WORKSPACE_ROOT=/workspace/gitpod\n#ENV LEEWAY_REMOTE_CACHE_BUCKET=gitpod-core-leeway-cache-branch\n\n# Install Terraform\n#ARG RELEASE_URL=\"https://releases.hashicorp.com/terraform/0.15.4/terraform_0.15.4_linux_amd64.zip\"\n#RUN mkdir -p ~/.terraform \\\n#    && cd ~/.terraform \\\n#    && curl -fsSL -o terraform_linux_amd64.zip ${RELEASE_URL} \\\n#    && unzip *.zip \\\n#    && rm -f *.zip \\\n#    && printf \"terraform -install-autocomplete\\n\" >>~/.bashrc\n\n# Install GraphViz to help debug terraform scripts\n#RUN sudo install-packages graphviz\n\n#ENV PATH=$PATH:$HOME/.aws-iam:$HOME/.terraform\n\n# brew : helm-docs, pre-commit, chart-testing\nRUN brew install norwoodj/tap/helm-docs pre-commit chart-testing"
}