{
  "startTime": 1674215975228,
  "endTime": 1674215975841,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rust:1.45.2-slim-stretch AS builder\n\nRUN apt-get update && apt-get install --no-install-recommends musl-tools -y && rm -rf /var/lib/apt/lists/*;\n\n# adding the musl library target so that we can build\n# the components for busybox/alpine environments\n#\nRUN rustup target add x86_64-unknown-linux-musl\n\n# We add the rustfmt component. Ideally this should be having the same\n# toolchain than the target we are building, but given that we are building\n# on linux (debian), we can use the toolchain mentioned below also because\n# custom toolchains are not supported.\n#\nRUN rustup component add rustfmt --toolchain 1.45.2-x86_64-unknown-linux-gnu\nRUN mkdir -p /opt/relay\nCOPY . /opt/relay\n\n# We install missing dependencies within the\n# the same layer where we do the compilation\n# to then remove it from the image in the\n# same docker command.\nRUN cd /opt/relay && RUSTFLAGS=-Clinker=musl-gcc cargo build --release --target x86_64-unknown-linux-musl\n\n\n\nFROM busybox AS client\n\nLABEL COMPONENT=\"relay client\"\nLABEL SOLUTION=dlt-interop\n\nRUN addgroup -g 1000 relay\nRUN adduser -D -s /bin/sh -u 1000 -G relay relay\n\nRUN mkdir -p /opt/relay/config\n\nCOPY --from=builder /opt/relay/target/x86_64-unknown-linux-musl/release/client /opt/relay/\nCOPY --from=builder /opt/relay/target/x86_64-unknown-linux-musl/release/client-tls /opt/relay/\n\nCOPY fingerprint.json /opt/relay/\n\nCOPY docker/init.sh /opt/relay/\nCOPY docker/entrypoint-client.sh /opt/relay/\n\nRUN chmod +x /opt/relay/client /opt/relay/client-tls /opt/relay/entrypoint-client.sh\nRUN chown -R relay:relay /opt/relay\n\nUSER relay\n\nWORKDIR /opt/relay\nENTRYPOINT [ \"./entrypoint-client.sh\" ]\n\n# These labels will be changing at every build\n# therefore we leave them at the end in order\n# to minimise the amount of layers that are\n# built every time.\nARG COMMIT\nARG BRANCH\nARG VERSION\nARG PROTOS_VERSION\nLABEL COMMIT=${COMMIT} BRANCH=${BRANCH} VERSION=${VERSION} ROTOS_VERSION=${PROTOS_VERSION}\n\n\n\n"
}