{
  "startTime": 1674248050259,
  "endTime": 1674248051162,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.15 as ecr-login-installation\n# Install the Amazon ECR Docker Credential Helper\n# Use Docker multi-stage builds to get rid of intermediate layers related to installation\n\nENV GOPATH /root/go\nENV SINGULARITY_VERSION=3.7.4\n\nRUN mkdir -p /usr/local/var/singularity/mnt && \\\n    mkdir -p $GOPATH/src/github.com/sylabs && \\\n    cd $GOPATH/src/github.com/sylabs && \\\n    wget https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-${SINGULARITY_VERSION}.tar.gz && \\\n    tar -xzvf singularity-${SINGULARITY_VERSION}.tar.gz && \\\n    cd singularity && \\\n    ./mconfig -p /usr/local && \\\n    make -C builddir && \\\n    make -C builddir install; rm singularity-${SINGULARITY_VERSION}.tar.gz\n\nRUN go get -u github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login\nWORKDIR /root/go/src/github.com/awslabs/amazon-ecr-credential-helper\nRUN make\n\nFROM ubuntu:16.04\nMAINTAINER CodaLab Worksheets <codalab.worksheets@gmail.com>\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && \\\n  apt-get install -y --no-install-recommends software-properties-common curl && \\\n  apt-get update && \\\n  apt-get install -y --no-install-recommends \\\n    build-essential \\\n    libssl-dev \\\n    uuid-dev \\\n    libgpgme11-dev \\\n    squashfs-tools \\\n    libseccomp-dev \\\n    pkg-config \\\n    zip \\ \n    git \\\n    wget \\\n    unzip && \\\n    rm -rf /var/lib/apt/lists/*;\n\n# Miniconda 4.5.11 installs Python 3.7 by default.\nRUN curl -f -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh && \\\n     chmod +x ~/miniconda.sh && \\\n     ~/miniconda.sh -b -p /opt/conda && \\\n     rm ~/miniconda.sh\nENV PATH /opt/conda/bin:$PATH\nRUN conda --version\n\nCOPY --from=ecr-login-installation /root/go/src/github.com/awslabs/amazon-ecr-credential-helper/bin/local /usr/local/bin\nCOPY --from=ecr-login-installation /usr/local/bin/singularity /usr/local/bin\n# the singularity container runtime needs to be able to lookup the uid of the default user\n#RUN useradd -ms /bin/bash $default_user\n\nRUN mkdir $HOME/.docker\nRUN echo \"{\\\"credsStore\\\": \\\"ecr-login\\\"}\" >> ~/.docker/config.json\n\nWORKDIR /opt\nRUN mkdir ${WORKDIR}/codalab\nRUN mkdir ${WORKDIR}/scripts\n\n# Install dependencies\nCOPY requirements.txt requirements.txt\nRUN python3 -m pip install --user --upgrade pip==20.3.4; \\\n    python3 -m pip install setuptools --upgrade; \\\n    python3 -m pip install --no-cache-dir -r requirements.txt;\n\n# Install code\nCOPY codalab/lib codalab/lib\nCOPY codalab/worker codalab/worker\nCOPY codalab/common.py codalab/common.py\nCOPY scripts/detect-ec2-spot-preemption.sh scripts/detect-ec2-spot-preemption.sh\nCOPY setup.py setup.py\n\nRUN python3 -m pip install --no-cache-dir -e .\n\n# Allow non-root to read everything\nRUN chmod -R og=u-w .\n# When running the worker container as a non-root user on the host,\n# we need to create a user `codalab` in the Docker container that corresponds to the specified uid / gid.\n# See https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf\n# the container, but we need to map to a default username. The underlying user is the same, just with\n# different names.\nRUN useradd codalab\n"
}