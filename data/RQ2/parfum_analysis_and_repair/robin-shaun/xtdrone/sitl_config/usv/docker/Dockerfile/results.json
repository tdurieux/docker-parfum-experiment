{
  "startTime": 1674217112175,
  "endTime": 1674217113365,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ubuntu 18.04 with nvidia-docker2 beta opengl support.\nARG BASEIMG=ubuntu:bionic\nFROM $BASEIMG\n\n# Set ROS distribution\nARG DIST=melodic\n\n# Set Gazebo verison\nARG GAZ=gazebo9\n\n# Tools useful during development.\nRUN apt update \\\n && apt install --no-install-recommends -y \\\n        build-essential \\\n        cppcheck \\\n        curl \\\n        cmake \\\n        lsb-release \\\n        gdb \\\n        git \\\n        mercurial \\\n        python3-dbg \\\n        python3-pip \\\n        python3-venv \\\n        ruby \\\n        software-properties-common \\\n        sudo \\\n        vim \\\n        wget \\\n        libeigen3-dev \\\n        pkg-config \\\n        protobuf-compiler \\\n && apt clean && rm -rf /var/lib/apt/lists/*;\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    tzdata \\\n && ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime \\\n && dpkg-reconfigure --frontend noninteractive tzdata \\\n && apt clean && rm -rf /var/lib/apt/lists/*;\n\n# Get ROS melodic and Gazebo 9.\nCOPY docker/keys/gazebo.key /tmp/gazebo.key\nCOPY docker/keys/ros.key /tmp/ros.key\nRUN /bin/sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n && apt-key add /tmp/ros.key \\\n && /bin/sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main\" > /etc/apt/sources.list.d/gazebo-stable.list' \\\n && apt-key add /tmp/gazebo.key \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    python-rosdep \\\n    qtbase5-dev \\\n    libgles2-mesa-dev \\\n    ${GAZ} \\\n    lib${GAZ}-dev \\\n    ros-${DIST}-ros-base \\\n    ros-${DIST}-xacro \\\n    ros-${DIST}-gazebo-ros \\\n    ros-${DIST}-gazebo-plugins \\\n    ros-${DIST}-hector-gazebo-plugins \\\n    ros-${DIST}-joint-state-publisher \\\n    ros-${DIST}-joy \\\n    ros-${DIST}-joy-teleop \\\n    ros-${DIST}-key-teleop \\\n    ros-${DIST}-robot-localization \\\n    ros-${DIST}-robot-state-publisher \\\n    ros-${DIST}-rviz \\\n    ros-${DIST}-teleop-tools \\\n    ros-${DIST}-teleop-twist-keyboard \\\n    ros-${DIST}-velodyne-simulator \\\n    ros-${DIST}-rqt \\\n    ros-${DIST}-rqt-common-plugins \\\n && rosdep init \\\n && apt clean && rm -rf /var/lib/apt/lists/*;\n\nRUN rosdep update\n\n# Set USER and GROUP\nARG USER=developer\nARG GROUP=developer\n\n# Add a user with the same user_id as the user outside the container\n# Requires a docker build argument `user_id`.\n\nRUN curl -f -SsL https://github.com/boxboat/fixuid/releases/download/v0.4/fixuid-0.4-linux-amd64.tar.gz | tar -C /usr/local/bin -xzf - && \\\n    chown root:root /usr/local/bin/fixuid && \\\n    chmod 4755 /usr/local/bin/fixuid && \\\n    mkdir -p /etc/fixuid && \\\n    printf \"user: $USER\\ngroup: $GROUP\\n\" > /etc/fixuid/config.yml\n\nRUN addgroup --gid 1000 $USER && \\\n    adduser --uid 1000 --ingroup $USER --home /home/$USER --shell /bin/sh --disabled-password --gecos \"\" $USER\n\nRUN adduser $USER sudo \\\n && echo \"$USER ALL=NOPASSWD: ALL\" >> /etc/sudoers.d/$USER\n\n# Commands below run as the developer user.\nUSER $USER:$GROUP\n\n# When running a container start in the developer's home folder.\nWORKDIR /home/$USER\n\n# Create workspace\nRUN mkdir -p vrx_ws/src/vrx\n\n# Copy the VRX repository from the local file system\n# We can't use the USER:GROUP variables until Docker adds support to --chown\nCOPY --chown=developer:developer . vrx_ws/src/vrx/\n\n# Compile the VRX project.\nRUN /bin/bash -c \". /opt/ros/${DIST}/setup.bash && cd vrx_ws && catkin_make\"\n\n# Source all the needed environment files.\nRUN /bin/sh -c 'echo \". /opt/ros/${DIST}/setup.bash\" >> ~/.bashrc' \\\n && /bin/sh -c 'echo \". /usr/share/gazebo/setup.sh\" >> ~/.bashrc' \\\n && /bin/sh -c 'echo \". ~/vrx_ws/devel/setup.sh\" >> ~/.bashrc'\n\nENTRYPOINT [\"fixuid\"]\n\nCMD [\"/bin/bash\"]\n# Customize your image here.\n\n\n# ...\n"
}