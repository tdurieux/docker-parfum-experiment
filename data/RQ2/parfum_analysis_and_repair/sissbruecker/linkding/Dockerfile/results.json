{
  "startTime": 1674217599889,
  "endTime": 1674217601253,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 26,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:current-alpine AS node-build\nWORKDIR /etc/linkding\n# install build dependencies\nCOPY package.json package-lock.json ./\nRUN npm install -g npm && \\\n    npm install && npm cache clean --force;\n# compile JS components\nCOPY . .\nRUN npm run build\n\n\nFROM python:3.9.6-slim-buster AS python-base\nRUN apt-get update && apt-get -y --no-install-recommends install build-essential && rm -rf /var/lib/apt/lists/*;\nWORKDIR /etc/linkding\n\n\nFROM python-base AS python-build\n# install build dependencies\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -U pip && pip install --no-cache-dir -Ur requirements.txt\n# run Django part of the build\nCOPY --from=node-build /etc/linkding .\nRUN python manage.py compilescss && \\\n    python manage.py collectstatic --ignore=*.scss && \\\n    python manage.py compilescss --delete-files\n\n\nFROM python-base AS prod-deps\nCOPY requirements.prod.txt ./requirements.txt\nRUN mkdir /opt/venv && \\\n    python -m venv --upgrade-deps --copies /opt/venv && \\\n    /opt/venv/bin/pip install --upgrade pip wheel && \\\n    /opt/venv/bin/pip install -Ur requirements.txt\n\n\nFROM python:3.9.6-slim-buster as final\nRUN apt-get update && apt-get -y --no-install-recommends install mime-support && rm -rf /var/lib/apt/lists/*;\nWORKDIR /etc/linkding\n# copy prod dependencies\nCOPY --from=prod-deps /opt/venv /opt/venv\n# copy output from build stage\nCOPY --from=python-build /etc/linkding/static static/\n# copy application code\nCOPY . .\n# Expose uwsgi server at port 9090\nEXPOSE 9090\n# Activate virtual env\nENV VIRTUAL_ENV /opt/venv\nENV PATH /opt/venv/bin:$PATH\n# Allow running containers as an an arbitrary user in the root group, to support deployment scenarios like OpenShift, Podman\nRUN [\"chmod\", \"g+w\", \".\"]\n# Run bootstrap logic\nRUN [\"chmod\", \"+x\", \"./bootstrap.sh\"]\nCMD [\"./bootstrap.sh\"]\n"
}