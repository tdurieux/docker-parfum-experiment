{
  "startTime": 1674254105700,
  "endTime": 1674254107008,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 14,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 14,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 14,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.4-fpm-buster\n\nRUN curl -f -sL https://deb.nodesource.com/setup_14.x | bash -\n\n#RUN echo 'Acquire::ForceIPv4 \"true\";' > /etc/apt/apt.conf.d/99force-ipv4\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    default-mysql-client \\\n    git \\\n    gettext \\\n    libfreetype6-dev \\\n    libjpeg62-turbo-dev \\\n    libmongoc-1.0-0 libmongoc-dev \\\n    libpng-dev \\\n    libonig-dev libzip-dev \\\n    redis-tools \\\n    locales \\\n    nano \\\n    nodejs \\\n    libxml2-dev \\\n    sqlite3 libsqlite3-dev \\\n    wget \\\n    ca-certificates \\\n    zip && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* && \\\n    npm install -g yarn && npm cache clean --force;\n\nRUN docker-php-ext-install gd pdo_mysql mbstring zip exif pcntl fileinfo soap gettext pdo_sqlite\n\nWORKDIR /tmp\n\n# Install PHP Redis\nRUN curl -f -o phpredis-5.1.1.tgz https://pecl.php.net/get/redis-5.1.1.tgz && \\\n    tar xfz phpredis-5.1.1.tgz && cd redis-5.1.1 && \\\n    phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm phpredis-5.1.1.tgz\n\n# Install MongoDB PHP Driver\nRUN curl -f -o mongodb-1.7.2.tgz https://pecl.php.net/get/mongodb-1.7.2.tgz && \\\n    tar xfz mongodb-1.7.2.tgz && cd mongodb-1.7.2 && \\\n    phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm mongodb-1.7.2.tgz\n\n# Install XDebug\nRUN curl -f -o xdebug-2.9.1.tgz https://pecl.php.net/get/xdebug-2.9.1.tgz && \\\n    tar xfz xdebug-2.9.1.tgz && cd xdebug-2.9.1 && \\\n    phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm xdebug-2.9.1.tgz\n\nRUN docker-php-ext-enable redis mongodb xdebug\n\nRUN echo 'memory_limit=2048M' >> /usr/local/etc/php/php.ini && \\\n    echo 'xdebug.remote_port=9000' >> /usr/local/etc/php/php.ini && \\\n    echo 'xdebug.remote_enable=1' >> /usr/local/etc/php/php.ini && \\\n    echo 'xdebug.remote_connect_back=0' >> /usr/local/etc/php/php.ini && \\\n    echo 'xdebug.var_display_max_depth=' >> /usr/local/etc/php/php.ini && \\\n    echo 'xdebug.remote_host=${HOST_IP}' >> /usr/local/etc/php/php.ini && \\\n    curl -f -o /usr/lib/ssl/curl-cacert.pem https://curl.se/ca/cacert.pem && \\\n    echo 'curl.cainfo = \"/usr/lib/ssl/curl-cacert.pem\"' >> /usr/local/etc/php/php.ini\n\nRUN echo \"php_flag[display_errors] = On\">>/usr/local/etc/php-fpm.conf && \\\n    echo \"php_admin_flag[log_errors] = On\">>/usr/local/etc/php-fpm.conf && \\\n    echo \"php_admin_value[display_errors] = 'stderr'\">>/usr/local/etc/php-fpm.conf\n\nRUN echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen && \\\necho \"en_GB.UTF-8 UTF-8\" >> /etc/locale.gen && \\\necho \"fr_FR.UTF-8 UTF-8\" >> /etc/locale.gen && \\\necho \"it_IT.UTF-8 UTF-8\" >> /etc/locale.gen && \\\necho \"nl_NL.UTF-8 UTF-8\" >> /etc/locale.gen && \\\necho \"de_DE.UTF-8 UTF-8\" >> /etc/locale.gen && \\\necho \"es_ES.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen\n\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\nRUN usermod -u 1000 www-data && \\\n    groupmod -g 1000 www-data && \\\n    chown -R www-data:www-data /var/www\n\nUSER www-data\n\nENV XDG_CONFIG_HOME \"/var/www\"\nENV COMPOSER_HOME \"/var/www/.composer\"\n\nRUN composer global require bamarni/composer-bin-plugin && \\\n    composer global bin phpcs require squizlabs/php_codesniffer && \\\n    composer global bin php-cs-fixer require friendsofphp/php-cs-fixer && \\\n    composer global bin phpmd require phpmd/phpmd && \\\n    composer global bin phpmnd require povils/phpmnd && \\\n    composer global bin dephpend require dephpend/dephpend:dev-main && \\\n    composer global bin phploc require phploc/phploc && \\\n    composer global bin phpcpd require sebastian/phpcpd && \\\n    composer global bin churn require bmitch/churn-php && \\\n    composer global bin php-code-fixer require wapmorgan/php-code-fixer:dev-master && \\\n    composer global bin phpmetrics require phpmetrics/phpmetrics && \\\n    composer global bin security-checker require sensiolabs/security-checker\n\n\nENV PATH=\"/var/www/.composer/vendor/bin:${PATH}\"\n\nWORKDIR /var/www/html\n"
}