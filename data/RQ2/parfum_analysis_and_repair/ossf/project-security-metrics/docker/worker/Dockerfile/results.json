{
  "startTime": 1674220310180,
  "endTime": 1674220311845,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 153,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nLABEL schema-version=\"1.0\"\nLABEL name=\"Metric Project - Analysis Container\"\nLABEL maintainer=\"Open Source Security Foundation - github.com/ossf\"\nLABEL vendor=\"Linux Foundation\"\nLABEL build-date=\"2020-09-13T00:00:00.00Z\"\nLABEL version=\"0.0.2\"\n\n# Overridable Arguments\nARG DOTNET_VERSION=\"3.1\"\nARG APPLICATION_INSPECTOR_VERSION=\"1.2.62\"\nARG OSSGADGET_VERSION=\"0.1.239\"\nARG CODEQL_VERSION=\"v2.2.5\"\nARG GO_VERSION=\"1.15\"\n\nARG DEBIAN_FRONTEND=noninteractive\nENV TZ=America/Los_Angeles\n\n# set work directory\nWORKDIR /usr/src/app\n\n# set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Core utilities\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n            build-essential \\\n            fakeroot \\\n            devscripts \\\n            curl \\\n            git \\\n            make \\\n            wget \\\n            mc \\\n            unzip \\\n            nano \\\n            vim \\\n            dos2unix \\\n            sed \\\n            gcc \\\n            libpq-dev \\\n            make \\\n            apt-transport-https \\\n            python3.8 \\\n            python3-pip \\\n            python3-setuptools \\\n            python3-dev \\\n            python3-wheel \\\n            python-is-python3 \\\n            jq \\\n            gnupg \\\n            g++ \\\n            make \\\n            gcc \\\n            apt-utils \\\n            file \\\n            gettext \\\n            sqlite3 \\\n            software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n##################################\n####### Install Core Tools #######\n##################################\n\n# Install .NET Core\nRUN cd /tmp && \\\n    wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \\\n    dpkg -i packages-microsoft-prod.deb && \\\n    add-apt-repository universe && \\\n    apt-get update && \\\n    rm packages-microsoft-prod.deb && \\\n    apt-get install --no-install-recommends -y dotnet-sdk-${DOTNET_VERSION} && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Download Go\nRUN cd /opt && \\\n    wget https://golang.org/dl/go$GO_VERSION.linux-amd64.tar.gz && \\\n    tar -C /usr/local -xzf go$GO_VERSION.linux-amd64.tar.gz && \\\n    rm go$GO_VERSION.linux-amd64.tar.gz\n\n# Install DevSkim\nRUN dotnet tool install --global Microsoft.CST.DevSkim.CLI\n\n# Install Node.js\nRUN curl -f -sL https://deb.nodesource.com/setup_14.x | bash -\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Install NodeJsScan\nRUN pip3 install --no-cache-dir --disable-pip-version-check nodejsscan\n\n# Install CppCheck\nRUN apt-get install --no-install-recommends -y cppcheck && rm -rf /var/lib/apt/lists/*;\n\n# Download CodeQL and queries\nRUN cd /opt && \\\n    wget https://github.com/github/codeql-cli-binaries/releases/download/$CODEQL_VERSION/codeql-linux64.zip && \\\n    unzip codeql-linux64.zip && \\\n    rm codeql-linux64.zip && \\\n    git clone https://github.com/github/codeql codeql-queries && \\\n    git clone https://github.com/github/codeql-go codeql-queries-go\n\n# Install Lizard (code complexity analyzer)\nRUN pip3 install --no-cache-dir --disable-pip-version-check lizard\n\n# Install SCC (line of code calcaulator)\nRUN cd /opt && \\\n    wget https://github.com/boyter/scc/releases/download/v2.12.0/scc-2.12.0-i386-unknown-linux.zip && \\\n    unzip scc-2.12.0-i386-unknown-linux.zip && \\\n    mv scc /usr/local/bin && \\\n    rm scc-2.12.0-i386-unknown-linux.zip\n\n# Install Brakeman\nRUN apt-get install --no-install-recommends -y ruby && rm -rf /var/lib/apt/lists/*;\nRUN cd /opt && \\\n    git clone --depth 1 git://github.com/presidentbeef/brakeman.git && \\\n    cd brakeman && \\\n\tgem build brakeman.gemspec && \\\n\tgem install brakeman-*.gem\n\n# Install Graudit\nRUN cd /opt && \\\n    git clone --depth 1 https://github.com/wireghoul/graudit\n\n# Install OSS Gadget\nRUN cd /opt && \\\n    wget -q https://github.com/microsoft/OSSGadget/releases/download/v${OSSGADGET_VERSION}/OSSGadget_linux_${OSSGADGET_VERSION}.zip -O OSSGadget.zip && \\\n    unzip OSSGadget.zip && \\\n    rm OSSGadget.zip && \\\n    mv OSSGadget_linux_${OSSGADGET_VERSION} OSSGadget && \\\n    cd OSSGadget && \\\n    find . -name 'oss-*' -exec file {} \\; | grep ELF | cut -d: -f1 | xargs -n1 -I{} chmod a+x {}\n\n# ApplicationInspector\nRUN cd /opt && \\\n    wget -q https://github.com/microsoft/ApplicationInspector/releases/download/v${APPLICATION_INSPECTOR_VERSION}/ApplicationInspector_linux_${APPLICATION_INSPECTOR_VERSION}.zip -O ApplicationInspector.zip && \\\n    unzip ApplicationInspector.zip && \\\n    rm ApplicationInspector.zip && \\\n    mv ApplicationInspector_linux_${APPLICATION_INSPECTOR_VERSION} ApplicationInspector && \\\n    cd ApplicationInspector && \\\n    chmod a+x ./ApplicationInspector.CLI\n\n#####################################\n####### Install Scanner Tools #######\n#####################################\n\n# Install Scanner Dependencies\nRUN pip3 install --no-cache-dir azure-storage-queue \\\n        requests \\\n        PyGithub \\\n        requests-cache \\\n        packageurl-python \\\n        django\n\n########################\n####### Finalize #######\n########################\n\n# Set up the path\nRUN echo \"export PATH=/opt/codeql:/opt/brakeman:/opt/OSSGadget:/opt/ApplicationInspector:$PATH\" >> /root/.bashrc\nENV PATH=\"/opt/codeql:/opt/brakeman:/opt/OSSGadget:/opt/ApplicationInspector:${PATH}\"\n\n# copy project\nCOPY docker/worker/orchestrator.py .\nCOPY docker/worker/config.json .\nCOPY jobs/docker-scanner/processors ./processors\nCOPY docker/worker/entrypoint.sh .\nRUN dos2unix ./entrypoint.sh\n\n# run entrypoint.sh\nENTRYPOINT [\"/usr/src/app/entrypoint.sh\"]\n"
}