{
  "startTime": 1674248844398,
  "endTime": 1674248845520,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\nMAINTAINER Sergi Valverde <svalverde@eia.udg.edu>\n\n# Install git, wget, python-dev, pip, BLAS + LAPACK and other dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  gfortran \\\n  git \\\n  wget \\\n  liblapack-dev \\\n  libopenblas-dev \\\n  python-dev \\\n  python-tk \\\n  git \\\n  curl \\\n  emacs24 && rm -rf /var/lib/apt/lists/*;\n\nUSER root\nENV CUDA_ROOT /usr/local/cuda/bin\n\n\n# Install miniconda to /miniconda\nRUN curl -f -LO http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh\nRUN bash Miniconda-latest-Linux-x86_64.sh -p /miniconda -b\nRUN rm /Miniconda-latest-Linux-x86_64.sh\nENV PATH=/miniconda/bin:${PATH}\nRUN conda update -y conda\n\n# install CNN related packages\nADD requirements.txt /requirements.txt\nRUN conda install numpy scipy mkl\nRUN pip install --no-cache-dir pip --upgrade\nRUN pip install --no-cache-dir tensorflow-gpu==1.6.0\nRUN pip install --no-cache-dir -r /requirements.txt\n\n# create a docker user\nRUN useradd -ms /bin/bash docker\nENV HOME /home/docker\n\n# copy necessary files to container\nRUN mkdir $HOME/src\nRUN mkdir /data\nENV PATH=/$HOME/src:${PATH}\nADD __init__.py $HOME/src/\nADD .keras $HOME/.keras\nADD app.py $HOME/src/\nADD cnn_scripts.py $HOME/src/\n# ADD config $HOME/src/config\n# ADD nets $HOME/src/nets\nADD libs $HOME/src/libs\nADD utils $HOME/src/utils\nADD logonic.png $HOME/src/\nADD nic_train_network_batch.py $HOME/src/\nADD nic_infer_segmentation_batch.py $HOME/src/\n\n# add permissions (odd)\n# RUN chown docker -R nets\n# RUN chown docker -R config\n\nUSER docker\nWORKDIR $HOME/src\n"
}