{
  "startTime": 1674249634902,
  "endTime": 1674249635891,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 144
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 14,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 144
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 14,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 165
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 14,
        "columnEnd": 116
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# An image to build and package the BitmaskVPN (RiseupVPN and other branded builds)\n# (c) LEAP Encryption Access Project 2018-2021\n\nFROM ubuntu:20.04 as builder\n\nMAINTAINER LEAP Encryption Access Project <info@leap.se>\nARG GO_VERSION=1.16\nLABEL Description=\"An image to build Bitmask Lite\" Vendor=\"LEAP\" Version=\"1.2\"\nENV OSXSDK_SHA256=\"631b4144c6bf75bf7a4d480d685a9b5bda10ee8d03dbf0db829391e2ef858789\" \\\n    PATH=\"$PATH:/osxcross/target/bin:/usr/lib/go-${GO_VERSION}/bin\"\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get upgrade --yes && \\\n    apt-get install --yes --no-install-recommends \\\n            build-essential \\\n            make cmake \\\n            git curl wget \\\n            libappindicator3-dev libgtk-3-dev \\\n            webkit2gtk-4.0 \\\n            mingw-w64 upx-ucl python snapd \\\n            unzip sudo locales \\\n            devscripts fakeroot debhelper \\\n            clang llvm-dev libxml2-dev uuid-dev \\\n            libssl-dev bash patch tar \\\n            xz-utils bzip2 gzip sed cpio libbz2-dev \\\n            software-properties-common dh-golang \\\n            jq \\\n            squashfs-tools \\\n            qtbase5-dev qttools5-dev-tools qt5-qmake g++ qtdeclarative5-dev qt5-default \\\n            golang-${GO_VERSION}-go golang-go golang-golang-x-tools-dev && \\\n    rm -r /var/lib/apt/lists/*\n\n# osx cross compiling\nRUN git clone https://github.com/tpoechtrager/osxcross && \\\n    cd osxcross/tarballs && \\\n    wget https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz && \\\n    echo \"${OSXSDK_SHA256}  *MacOSX10.10.sdk.tar.xz\" | sha256sum -c - && \\\n    cd .. && UNATTENDED=1 ./build.sh && \\\n    ln -s /osxcross/target/SDK/MacOSX10.10.sdk/usr/include/objc/NSObjCRuntime.h /osxcross/target/SDK/MacOSX10.10.sdk/usr/include/objc/NSObjcRuntime.h\n\n# bomutils (for osx packaging)\nRUN git clone https://github.com/hogliux/bomutils && \\\n    cd bomutils && make && sudo make install\n\n# xar (for osx packaging)\nRUN git clone https://github.com/VantaInc/xar && \\\n    cd xar/xar && \\\n    ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && sudo make install\n\n# Grab the core18 and core20 snap (which snapcraft uses as a base) from the stable channel\n# and unpack it in the proper place, to speed up snapcraft builds in the containers.\nRUN curl -f -L $( curl -f -H 'X-Ubuntu-Series: 16' 'https://api.snapcraft.io/api/v1/snaps/details/core18' | jq '.download_url' -r) --output core18.snap\nRUN mkdir -p /snap/core18\nRUN unsquashfs -d /snap/core18/current core18.snap\nRUN curl -f -L $( curl -f -H 'X-Ubuntu-Series: 16' 'https://api.snapcraft.io/api/v1/snaps/details/core20' | jq '.download_url' -r) --output core20.snap\nRUN mkdir -p /snap/core20\nRUN unsquashfs -d /snap/core20/current core20.snap\n\n# Grab the snapcraft snap from the stable channel and unpack it in the proper\n# place.\nRUN curl -f -L $( curl -f -H 'X-Ubuntu-Series: 16' 'https://api.snapcraft.io/api/v1/snaps/details/snapcraft?channel=stable' | jq '.download_url' -r) --output snapcraft.snap\nRUN mkdir -p /snap/snapcraft\nRUN unsquashfs -d /snap/snapcraft/current snapcraft.snap\n\n\n# Create a snapcraft runner (TODO: move version detection to the core of\n# snapcraft).\nRUN mkdir -p /snap/bin\nRUN echo \"#!/bin/sh\" > /snap/bin/snapcraft\nRUN snap_version=\"$(awk '/^version:/{print $2}' /snap/snapcraft/current/meta/snap.yaml)\" && echo \"export SNAP_VERSION=\\\"$snap_version\\\"\" >> /snap/bin/snapcraft\nRUN echo 'exec \"$SNAP/usr/bin/python3\" \"$SNAP/bin/snapcraft\" \"$@\"' >> /snap/bin/snapcraft\nRUN chmod +x /snap/bin/snapcraft\nRUN ln -s /snap/bin/snapcraft /bin/\n\n# cache go modules\nRUN rm -rf /gomods && mkdir -p /gomods/packages\nWORKDIR /gomods\nCOPY mods/go.* /gomods/\nCOPY mods/packages/ /gomods/packages/\nRUN go mod download\n\nCOPY builder.sh /\n\n# Generate locale.\nRUN locale-gen en_US.UTF-8\n\n# Set the proper environment.\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV SNAP=\"/snap/snapcraft/current\"\nENV SNAP_NAME=\"snapcraft\"\nENV SNAP_ARCH=\"amd64\"\n"
}