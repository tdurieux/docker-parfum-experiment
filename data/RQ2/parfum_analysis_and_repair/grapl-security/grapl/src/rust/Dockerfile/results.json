{
  "startTime": 1674253695210,
  "endTime": 1674253696076,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 176,
        "lineEnd": 177,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We use the above syntax for here documents:\n# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md#user-content-here-documents\n\nARG RUST_VERSION\n\nFROM rust:${RUST_VERSION}-slim-bullseye AS base\n\nARG RUST_BUILD=dev-local-grapl\n\nSHELL [\"/bin/bash\", \"-o\", \"errexit\", \"-o\", \"nounset\", \"-o\", \"pipefail\", \"-c\"]\n\n# curl, jq, and unzip are used by various commands in this Dockerfile.\n# build-essential, cmake, libssl-dev, perl, pkg-config, and tcl are needed\n# for building rust-rdkafka.\n#\n# Ignore this lint about deleteing the apt-get lists (we're caching!)\n# hadolint ignore=DL3009,SC1089\nRUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked,id=rust-base-apt \\\n    apt-get update \\\n    && apt-get install --yes --no-install-recommends \\\n        curl=7.74.0-1.3+deb11u1 \\\n        jq=1.6-2.1 \\\n        unzip=6.0-26 \\\n    && apt-get install --yes --no-install-recommends \\\n        build-essential=12.9 \\\n        cmake=3.18.4-2+deb11u1 \\\n        libssl-dev=1.1.1n-0+deb11u3 \\\n        perl=5.32.1-4+deb11u2 \\\n        pkg-config=0.29.2-1 \\\n        tcl=8.6.11+1 && rm -rf /var/lib/apt/lists/*;\n\n# Grab a Nomad binary, which we use for parsing HCL2-with-variables into JSON:\n# - in plugin-registry integration tests\n# - in plugin-registry image\nWORKDIR /nomad\nRUN <<EOF\nNOMAD_VERSION=\"1.2.4\"\nZIP_NAME=\"nomad_${NOMAD_VERSION}_linux_amd64.zip\"\ncurl --remote-name --proto '=https' --tlsv1.2 -sSf \\\n  \"https://releases.hashicorp.com/nomad/${NOMAD_VERSION}/${ZIP_NAME}\"\nunzip \"${ZIP_NAME}\"\nrm \"${ZIP_NAME}\"\nEOF\n\n# Install rust toolchain before copying sources to avoid unecessarily\n# resinstalling on source file changes.\nWORKDIR /grapl\nCOPY rust/rust-toolchain.toml rust/rust-toolchain.toml\nWORKDIR /grapl/rust\n# 'rustup show' will install components in the rust-toolchain.toml file\nRUN rustup show\n\n# copy sources\nWORKDIR /grapl\nCOPY proto proto\nCOPY rust rust\n\nWORKDIR /grapl/rust\n\n\nENV CARGO_TARGET_DIR=\"/grapl/rust/target\"\n\n# These variables are just to DRY up some repeated cache target\n# locations. They are of our own creation, and do not hold any special\n# meaning to `cargo`, `rustup`, or anything else.\nENV REGISTRY_CACHE_TARGET=\"${CARGO_HOME}/registry\"\nENV RUSTUP_CACHE_TARGET=\"${RUSTUP_HOME}\"\n\n# build\n################################################################################\nFROM base AS build\n\n# Hadolint appears to be confused about some of these mount targets\n# hadolint ignore=SC1091\nRUN --mount=type=cache,target=\"${CARGO_TARGET_DIR}\",sharing=locked \\\n    --mount=type=cache,target=\"${REGISTRY_CACHE_TARGET}\",sharing=locked \\\n    --mount=type=cache,target=\"${RUSTUP_CACHE_TARGET}\",sharing=locked <<EOF\n    case \"${RUST_BUILD}\" in\n      debug)\n        cargo build;;\n      dev-local-grapl)\n        cargo build --profile dev-local-grapl;;\n      release)\n        cargo build --release ;;\n      test)\n        cargo test ;;\n      *)\n        echo \"ERROR:  Unknown RUST_BUILD option: ${RUST_BUILD}\";\n        exit 1 ;;\n    esac\nEOF\n\n# Copy the build outputs to location that's not a cache mount.\n# TODO: switch to using --out-dir when stable: https://github.com/rust-lang/cargo/issues/6790\nRUN --mount=type=cache,target=\"${CARGO_TARGET_DIR}\",sharing=locked \\\n    mkdir -p /outputs && \\\n    find \"${CARGO_TARGET_DIR}/${RUST_BUILD}\" -maxdepth 1 -type f -executable -exec cp {} /outputs \\;\n\n\n# tarpaulin\n# This target is not merged with the `build` target because the actions to run\n# after cargo are different when building for tests and building the services,\n# and we'd rather not save all of the Rust `target/` directory to Docker image\n# if we don't have to.\n################################################################################\nFROM base AS tarpaulin\n\n# These packages are required to compile cargo-tarpaulin itself.\nRUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked,id=rust-tarpaulin-apt \\\n    apt-get update \\\n    && apt-get install --yes --no-install-recommends \\\n        libssl-dev=1.1.1n-0+deb11u3 \\\n        pkg-config=0.29.2-1 && rm -rf /var/lib/apt/lists/*;\n\n# For test coverage reports\n# Tarpaulin will recompile the sources from scratch and effectively taint build\n# outputs, such that subsequent cargo build runs will need to start from\n# scratch as well. For this reason we avoid mounting the cached target\n# directory.\nRUN --mount=type=cache,target=\"${REGISTRY_CACHE_TARGET}\",sharing=locked \\\n    --mount=type=cache,target=\"${RUSTUP_CACHE_TARGET}\",sharing=locked \\\n    cargo install cargo-tarpaulin\n\n\n# build-test-integration\n################################################################################\nFROM base AS build-test-integration\n\n# For running integration tests we're going to copy the test binaries to a new\n# container base and run the directly, as opposed to running them via `cargo\n# test`. Cargo will recompile tests if it thinks the test binaries in target/\n# are out of date. Because we're using a mount cache when building the sources\n# this directly won't be available in resulting container images. In the past\n# we've `cp -a` the target directory to preserve it, but this can make for an\n# increasingly large container image size, especially when the mount cache is\n# has not been cleaned in a while. To find the test binaries paths we parse\n# the manifest.json from the cargo build.\n# https://github.com/rust-lang/cargo/issues/1924\n# https://github.com/rust-lang/cargo/issues/3670\n\nENV RUST_INTEGRATION_TEST_FEATURES=\"generator-dispatcher/integration_tests,graph-merger/integration_tests,node-identifier/integration_tests,pipeline-ingress/integration_tests,plugin-registry/integration_tests,sysmon-generator/integration_tests,organization-management/integration_tests\"\nENV TEST_DIR=/grapl/tests\n\n# This will build the integration test binaries and parse the manifest to find\n# their paths for copying later.\n#\n# Hadolint is confused again, at the time of this writing, SHELL *does*\n# have -o pipefail set on line 9.\n# hadolint ignore=DL4006\nRUN mkdir --parents \"${TEST_DIR}\"\n# hadolint ignore=DL4006\nRUN --mount=type=cache,target=\"${CARGO_TARGET_DIR}\",sharing=locked \\\n    --mount=type=cache,target=\"${REGISTRY_CACHE_TARGET}\",sharing=locked \\\n    --mount=type=cache,target=\"${RUSTUP_CACHE_TARGET}\",sharing=locked \\\n    cargo test \\\n        --features \"${RUST_INTEGRATION_TEST_FEATURES}\" \\\n        --no-run \\\n        --message-format=json \\\n        --test \"*\" | \\\n        jq -r \"select((.profile.test == true) and (.features[] | contains(\\\"integration_tests\\\"))) | .filenames[]\" | \\\n        xargs \\\n          --replace=\"{}\" \\\n          cp \"{}\" \"${TEST_DIR}/\"\n\n\n# integration tests distribution\n################################################################################\n# We're unable to use one of the 'distroless' container images as a base here\n# because our integration tests require zlib shared library, but we don't have\n# a way of including that in the base image. With a debian image we can apt\n# install as needed, but the debian image we're using has zlib already.\nFROM debian:bullseye-slim AS integration-tests\n\nRUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked,id=rust-tests-apt \\\n    apt-get update \\\n    && apt-get install --yes --no-install-recommends \\\n        ca-certificates=20210119 && rm -rf /var/lib/apt/lists/*;\n\n# Put the Nomad binary on PATH\n# so that it's available to integration test consumers of NomadCli\nCOPY --from=build /nomad/nomad /bin\n\n# Grab the example generator so we can deploy it in test_deploy_plugin\nRUN mkdir -p /test-fixtures\nCOPY --from=build /outputs/example-generator /test-fixtures\nCOPY --from=build /outputs/sysmon-generator /test-fixtures\n\nCOPY --from=build-test-integration /grapl/tests /tests\n# Named context support https://github.com/hadolint/hadolint/issues/830\n# hadolint ignore=DL3022\nCOPY --from=test-ctx ./run/rust-integration-tests.sh /\nENTRYPOINT [ \"/rust-integration-tests.sh\" ]\n\n\n# images for running services\n################################################################################\n# More information about the base image used here can be found at:\n# https://github.com/GoogleContainerTools/distroless/blob/main/cc/README.md.\n# For debugging see: https://github.com/GoogleContainerTools/distroless#debug-images\n\n# NOTE: we're using the debug containers at the moment so we have a\n# shell; this lets us inject our Pulumi outputs in Local Grapl. If\n# not for that, we could use the standard non-debug images.\nFROM gcr.io/distroless/cc:debug AS rust-dist\n\nUSER nonroot\n\n##### export-rust-build-artifacts-to-dist\n# There are a number of artifacts we want to bring back to the host OS.\n# This image will eventually dump its root contents into the host's `dist/`\n# courtesy of its `docker-bake.hcl` specification.\nFROM scratch AS export-rust-build-artifacts-to-dist\n\nCOPY --from=build /outputs/plugin-bootstrap-init /plugin-bootstrap-init/\nCOPY --from=build /outputs/example-generator /\n# Just to clarify: we're copying these .service files from the repository,\n# through Docker, and then back out to the dist directory in the repository.\nCOPY rust/plugin-bootstrap/grapl-plugin-bootstrap-init.service /plugin-bootstrap-init/\nCOPY rust/plugin-bootstrap/grapl-plugin.service /plugin-bootstrap-init/\n\n##### graph-merger\nFROM rust-dist AS graph-merger-deploy\n\nCOPY --from=build /outputs/graph-merger /\nENTRYPOINT [\"/graph-merger\"]\n\n##### plugin-work-queue\nFROM rust-dist AS plugin-work-queue-deploy\n\nCOPY --from=build /outputs/plugin-work-queue /\nENTRYPOINT [\"/plugin-work-queue\"]\n\n##### plugin-registry\nFROM rust-dist AS plugin-registry-deploy\n\nCOPY --from=build /outputs/plugin-registry /\n# Put the Nomad binary on PATH for NomadCli class\nCOPY --from=build /nomad/nomad /bin\nENTRYPOINT [\"/plugin-registry\"]\n\n##### plugin-bootstrap\nFROM rust-dist AS plugin-bootstrap-deploy\n\nCOPY --from=build /outputs/plugin-bootstrap /\nENTRYPOINT [\"/plugin-bootstrap\"]\n\n##### node-identifier\nFROM rust-dist AS node-identifier-deploy\n\nCOPY --from=build /outputs/node-identifier /\nENTRYPOINT [\"/node-identifier\"]\n\n##### sysmon-generator\nFROM rust-dist AS sysmon-generator-deploy\n\nCOPY --from=build /outputs/sysmon-generator-kafka-legacy /\nENTRYPOINT [\"/sysmon-generator-kafka-legacy\"]\n\n##### generator-executor\nFROM rust-dist AS generator-executor-deploy\n\nCOPY --from=build /outputs/generator-executor /\nENTRYPOINT [\"/generator-executor\"]\n\n##### web-ui\nFROM rust-dist AS grapl-web-ui-deploy\n\nCOPY --from=build /outputs/grapl-web-ui /\n# Named context support https://github.com/hadolint/hadolint/issues/830\n# hadolint ignore=DL3022\nCOPY --from=dist-ctx frontend /frontend\nENTRYPOINT [\"/grapl-web-ui\"]\n\n##### organization-management\nFROM rust-dist AS organization-management-deploy\n\nCOPY --from=build /outputs/organization-management /\nENTRYPOINT [\"/organization-management\"]\n\n##### pipeline-ingress\nFROM rust-dist AS pipeline-ingress-deploy\n\nCOPY --from=build /outputs/pipeline-ingress /\nENTRYPOINT [\"/pipeline-ingress\"]\n\n##### uid-allocator\nFROM rust-dist AS uid-allocator-deploy\n\nCOPY --from=build /outputs/uid-allocator /\nENTRYPOINT [\"/uid-allocator\"]\n\n##### generator-dispatcher\nFROM rust-dist AS generator-dispatcher-deploy\n\nCOPY --from=build /outputs/generator-dispatcher /\nENTRYPOINT [\"/generator-dispatcher\"]\n\n##### event-source\nFROM rust-dist as event-source-deploy\nCOPY --from=build /outputs/event-source /\nENTRYPOINT [\"/event-source\"]\n"
}