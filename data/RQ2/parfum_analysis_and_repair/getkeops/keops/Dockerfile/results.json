{
  "startTime": 1674249201252,
  "endTime": 1674249202221,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build this file with e.g.\n#\n# docker build \\\n# --target full \\\n# --build-arg KEOPS_VERSION=2.1 \\\n# --build-arg GEOMLOSS_VERSION=0.2.5 \\\n# --build-arg CUDA_VERSION=11.3 \\\n# --build-arg CUDA_CHANNEL=nvidia/label/cuda-11.3.1\n# --build-arg PYTORCH_VERSION=1.11.0 \\\n# --build-arg TORCHVISION_VERSION=0.13.0 \\\n# --build-arg TORCHAUDIO_VERSION=0.12.0 \\\n# --build-arg PYTORCH_SCATTER_VERSION=2.0.9 \\\n# --tag getkeops/keops:2.1-geomloss0.2.5-cuda11.3-pytorch1.11-full \\\n# --no-cache .\n\n# KeOps version - the most important parameter:\nARG KEOPS_VERSION=2.1\n# We also include all the libraries hosted on www.kernel-operations.io,\n# such as GeomLoss. This is convenient, and has negligible impact\n# on the size of the final image. Cuda and PyTorch weigh ~5Gb anyway,\n# so there is little point trying to maintain separate images that\n# differ by a handful of Python files.\nARG GEOMLOSS_VERSION=0.2.5\n\n\n# Base OS:\nARG BASE_IMAGE=ubuntu:22.04\n# Useful to test support across Python versions:\nARG PYTHON_VERSION=3.8\n\n# Cuda version for the Pytorch install:\nARG CUDA_VERSION=11.3\n# Cuda version for the \"full\" install with development headers, nvcc, etc.:\nARG CUDA_CHANNEL=nvidia/label/cuda-11.3.1\n\n# Check https://pytorch.org/ and https://pytorch.org/get-started/previous-versions/\n# for compatible version numbers:\nARG PYTORCH_VERSION=1.11.0\nARG TORCHVISION_VERSION=0.12.0\nARG TORCHAUDIO_VERSION=0.11.0\n\n# PyTorch scatter (used by the \"survival\" environment)\n# is a dependency that may lag behind PyTorch releases by a few days.\n# Please check https://github.com/rusty1s/pytorch_scatter for compatibility info.\nARG PYTORCH_SCATTER_VERSION=2.0.9\n\n# KeOps relies on PyTest for unit tests, and Black for code formatting:\nARG PYTEST_VERSION=7.1.2\nARG BLACK_VERSION=22.6.0\n\n\n# First step:\nFROM ${BASE_IMAGE} AS dev-base\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        curl \\\n        git \\\n        tmux \\\n        zip \\\n        wget \\\n        libjpeg-dev \\\n        libpng-dev \\\n        libxml2-dev \\\n        openssh-client \\\n        libssl-dev \\\n        libcurl4-openssl-dev && \\\n    rm -rf /var/lib/apt/lists/*\nENV PATH=/opt/conda/bin:$PATH\n\n\n# Install R and a collection of useful packages.\n# This section is very stable, so we include it in the first\n# layers of our docker image.\nFROM dev-base AS r-env\n# N.B.: The explicit non-interactive tag is needed to skip\n#       the time zone prompt from the tzdata package.\n# N.B.: We install as many packages as possible from the Ubuntu repository\n#       to save on compilation times.\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    r-base \\\n    r-base-dev \\\n    r-cran-survival \\\n    r-cran-rmarkdown \\\n    r-cran-reticulate \\\n    r-cran-formatr \\\n    r-cran-tidyverse \\\n    r-cran-plyr \\\n    r-cran-matrix \\\n    r-cran-testthat && \\\n    Rscript -e 'install.packages(c(\"WCE\", \"languageserver\", \"profvis\", \"tictoc\"))' && rm -rf /var/lib/apt/lists/*;\n# Encoding for R:\nENV LC_ALL=C.UTF-8\n\n\nFROM r-env AS conda\nARG PYTHON_VERSION\nRUN curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda install -y python=${PYTHON_VERSION} \\\n        conda-build \\\n        pyyaml \\\n        numpy \\\n        ipython \\\n        matplotlib \\\n        ipykernel && \\\n    /opt/conda/bin/conda clean -ya\n\n\n# Full CUDA installation, with the headers, from the official Nvidia repository:\nFROM conda AS cuda\nARG CUDA_CHANNEL\nRUN /opt/conda/bin/conda install -y -c \"${CUDA_CHANNEL}\" cuda && \\\n    /opt/conda/bin/conda clean -ya\n\n\n# Full PyTorch installation:\nFROM cuda AS pytorch\nARG PYTHON_VERSION\nARG CUDA_VERSION\nARG PYTORCH_VERSION\nARG TORCHVISION_VERSION\nARG TORCHAUDIO_VERSION\nENV CONDA_OVERRIDE_CUDA=${CUDA_VERSION}\nRUN /opt/conda/bin/conda install -y -c pytorch \\\n        pytorch==${PYTORCH_VERSION} \\\n        torchvision==${TORCHVISION_VERSION} \\\n        torchaudio==${TORCHAUDIO_VERSION} \\\n        python=${PYTHON_VERSION} \\\n        cudatoolkit=${CUDA_VERSION} && \\\n    /opt/conda/bin/conda clean -ya\n\n\n# KeOps, GeomLoss, black and pytest:\nFROM pytorch AS keops\nARG KEOPS_VERSION\nARG GEOMLOSS_VERSION\nARG PYTEST_VERSION\nARG BLACK_VERSION\nRUN /opt/conda/bin/pip install \\\n    pykeops==${KEOPS_VERSION} \\\n    geomloss==${GEOMLOSS_VERSION} \\\n    pytest==${PYTEST_VERSION} \\\n    black==${BLACK_VERSION}\n\n# Work around a compatibility bug for KeOps, caused by the fact that conda\n# currently ships a version of libstdc++ that is slightly older than\n# that of Ubuntu 22.04:\nRUN rm /opt/conda/lib/libstdc++.so.6 && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /opt/conda/lib/libstdc++.so.6\n\n# Tell KeOps that the CUDA headers can be found in /opt/conda/include/...\nENV CUDA_PATH=/opt/conda/\n# If survival-GPU, geomloss or keops are mounted in the opt folder, they will override the pip version:\nENV PYTHONPATH=/opt/survival-GPU/:/opt/geomloss/:/opt/keops/pykeops/:/opt/keops/keopscore/:$PYTHONPATH\n\n\n# Dependencies for the KeOps and GeomLoss documentations:\nFROM keops AS keops-doc\nCOPY doc-requirements.txt doc-requirements.txt\nRUN /opt/conda/bin/pip install -r doc-requirements.txt\n\n\n# Super-full environment with optional dependencies:\nFROM keops-doc as keops-full\n# PyTorch-scatter is a complex dependency:\n# it relies on binaries that often lag behind new PyTorch releases\n# by a few days/weeks.\nARG PYTORCH_SCATTER_VERSION\nRUN /opt/conda/bin/conda install -y -c pyg \\\n    pytorch-scatter==${PYTORCH_SCATTER_VERSION} && \\\n    /opt/conda/bin/conda clean -ya\n"
}