{
  "startTime": 1674219367559,
  "endTime": 1674219371800,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 6,
        "columnEnd": 80
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nARG DEBIAN_FRONTEND=noninteractive\nENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn\n# Update Ubuntu Software repository\nRUN apt update && \\\n    apt-get install --no-install-recommends -y \\\n      git autoconf automake libtool make libreadline-dev texinfo \\\n      pkg-config libpam0g-dev libjson-c-dev bison flex python3-pip \\\n      libc-ares-dev python3-dev python3-sphinx \\\n      install-info build-essential libsnmp-dev perl \\\n      libcap-dev python2 libelf-dev \\\n      sudo gdb curl iputils-ping time \\\n      lua5.3 liblua5.3-dev \\\n      net-tools iproute2 && \\\n      curl -f https://bootstrap.pypa.io/pip/2.7/get-pip.py --output /tmp/get-pip.py && \\\n      python2 /tmp/get-pip.py && \\\n      rm -f  /tmp/get-pip.py && \\\n      python3 -m pip install wheel && \\\n      python3 -m pip install pytest && \\\n      python3 -m pip install pytest-xdist && \\\n      python3 -m pip install \"scapy>=2.4.2\" && \\\n      python3 -m pip install xmltodict && \\\n      python2 -m pip install 'exabgp<4.0.0' && rm -rf /var/lib/apt/lists/*;\n\nRUN groupadd -r -g 92 frr && \\\n      groupadd -r -g 85 frrvty && \\\n      adduser --system --ingroup frr --home /home/frr \\\n              --gecos \"FRR suite\" --shell /bin/bash frr && \\\n      usermod -a -G frrvty frr && \\\n      useradd -d /var/run/exabgp/ -s /bin/false exabgp && \\\n      echo 'frr ALL = NOPASSWD: ALL' | tee /etc/sudoers.d/frr && \\\n      mkdir -p /home/frr && chown frr.frr /home/frr\n\n#for libyang 2\nRUN apt-get install --no-install-recommends -y cmake libpcre2-dev && rm -rf /var/lib/apt/lists/*;\n\nUSER frr:frr\n\n# build and install libyang2\nRUN cd && pwd && ls -al && \\\n    git clone https://github.com/CESNET/libyang.git && \\\n    cd libyang && \\\n    git checkout v2.0.0 && \\\n    mkdir build; cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr \\\n          -DCMAKE_BUILD_TYPE:String=\"Release\" .. && \\\n    make -j $(nproc) && \\\n    sudo make install\n\nCOPY --chown=frr:frr . /home/frr/frr/\n\nRUN cd && ls -al && ls -al frr\n\nRUN cd ~/frr && \\\n    ./bootstrap.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n       --prefix=/usr \\\n       --localstatedir=/var/run/frr \\\n       --sbindir=/usr/lib/frr \\\n       --sysconfdir=/etc/frr \\\n       --enable-vtysh \\\n       --enable-pimd \\\n       --enable-sharpd \\\n       --enable-multipath=64 \\\n       --enable-user=frr \\\n       --enable-group=frr \\\n       --enable-vty-group=frrvty \\\n       --enable-snmp=agentx \\\n       --enable-scripting \\\n       --with-pkg-extra-version=-my-manual-build && \\\n    make -j $(nproc) && \\\n    sudo make install\n\nRUN cd ~/frr && make check || true\n\nCOPY docker/ubuntu20-ci/docker-start /usr/sbin/docker-start\nCMD [\"/usr/sbin/docker-start\"]\n"
}