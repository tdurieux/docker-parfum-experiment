{
  "startTime": 1674219023889,
  "endTime": 1674219024982,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nLABEL maintainer=\"Cong Xu <cong.xu@intel.com>\"\n\n# This parameter MUST be set by parameterized_docker_build.sh\nARG TF_WHL_URL\n\n# Optional parameters\nARG TF_BUILD_VERSION=r1.11\nARG PYTHON=\"python\"\nARG PYTHON_DEV=\"python-dev\"\nARG PIP=\"pip\"\n\n# Pick up some TF dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python \\\n        ${PYTHON_DEV} \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        wget \\\n        libnuma-dev \\\n        openssh-client \\\n        openssh-server \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\nRUN ${PIP} --no-cache-dir install \\\n        Pillow \\\n        h5py \\\n        ipykernel \\\n        jupyter \\\n        keras_applications \\\n        keras_preprocessing \\\n        matplotlib \\\n        numpy \\\n        pandas \\\n        scipy \\\n        sklearn \\\n        && \\\n    python -m ipykernel.kernelspec\n\nCOPY ${TF_WHL_URL} /\nRUN ${PIP} install --no-cache-dir --force-reinstall /${TF_WHL_URL} && \\\n    rm -rf /${TF_WHL_URL}\n\nRUN if [ \"${PYTHON}\" = \"python3\" ]; then \\\n  ln -s -f /usr/bin/python3 /usr/bin/python; \\\n  fi\n\n# Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Copy sample notebooks.\nCOPY notebooks /notebooks\n\n# Jupyter has issues with being run directly:\n#   https://github.com/ipython/ipython/issues/7062\n# We just add a little wrapper script.\nCOPY run_jupyter.sh /\n\nWORKDIR /root\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://www.open-mpi.org/software/ompi/v3.0/downloads/openmpi-3.0.0.tar.gz && \\\n    tar zxf openmpi-3.0.0.tar.gz && \\\n    cd openmpi-3.0.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-3.0.0.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/local/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun && \\\n    chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\nRUN echo \"btl_tcp_if_exclude = lo,docker0\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Install Horovod\nRUN ${PIP} install --no-cache-dir horovod\n\n# Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# TensorBoard\nEXPOSE 6006\n# IPython\nEXPOSE 8888\n\nWORKDIR \"/notebooks\"\n\nCMD [\"/run_jupyter.sh\", \"--allow-root\"]\n"
}