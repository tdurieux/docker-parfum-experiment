{
  "startTime": 1674247109344,
  "endTime": 1674247112890,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## SPDX-License-Identifier: MIT OR Apache-2.0\n##\n## Copyright (c) 2017-2022 Andre Richter <andre.o.richter@gmail.com>\n## Copyright (c) 2019-2022 Nao Taco <naotaco@gmail.com>\nFROM ubuntu:20.04\n\nARG VCS_REF\nARG GCC_AARCH64=https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-aarch64-aarch64-none-elf.tar.xz\nARG GCC_X86_64=https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz\n\nLABEL org.label-schema.vcs-ref=$VCS_REF \\\n    org.label-schema.vcs-url=\"https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials\"\n\nLABEL maintainer=\"The resources team <resources@teams.rust-embedded.org>, Andre Richter <andre.o.richter@gmail.com>\"\n\n# Ruby gems\nCOPY Gemfile .\n\nRUN set -ex; \\\n    tempPkgs='                                    \\\n        automake                                  \\\n        bison                                     \\\n        build-essential                           \\\n        flex                                      \\\n        git                                       \\\n        libtool                                   \\\n        ninja-build                               \\\n        pkg-config                                \\\n        wget                                      \\\n    '; \\\n    apt-get update; \\\n    apt-get install -q -y --no-install-recommends \\\n        $tempPkgs                                 \\\n        # persistent packages\n        ca-certificates                           \\\n        gdb-multiarch                             \\\n        libpixman-1-dev                           \\\n        libglib2.0-dev                            \\\n        libusb-1.0.0-dev                          \\\n        locales                                   \\\n        python3                                   \\\n        ruby                                      \\\n        ruby-dev                                  \\\n    ; \\\n    # GCC AArch64 tools\n    if [ \"$(uname -m)\" = \"aarch64\" ]; then wget ${GCC_AARCH64}; else wget ${GCC_X86_64}; fi; \\\n    tar -xf gcc-arm-10*; \\\n    cp                                                                                       \\\n        gcc-arm-10*/bin/aarch64-none-elf-objdump                                             \\\n        gcc-arm-10*/bin/aarch64-none-elf-readelf                                             \\\n        gcc-arm-10*/bin/aarch64-none-elf-nm                                                  \\\n        /usr/local/bin/; \\\n    rm -rf gcc-arm-10*; \\\n    # Ruby dependencies\n    gem install bundler; \\\n    bundle config set --local without 'development'; \\\n    bundle install --retry 3; \\\n    # QEMU\n    git clone https://gitlab.com/qemu-project/qemu.git; \\\n    cd qemu; \\\n    git checkout tags/v6.1.0; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --target-list=aarch64-softmmu --enable-modules \\\n        --enable-tcg-interpreter --enable-debug-tcg \\\n        --python=/usr/bin/python3; \\\n    make -j10; \\\n    make install; \\\n    cd ..; \\\n    rm -rf qemu; \\\n    # Openocd\n    git clone --depth 1 https://git.code.sf.net/p/openocd/code openocd; \\\n    cd openocd; \\\n    ./bootstrap; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-ftdi; \\\n    make -j10; \\\n    make install; \\\n    # GDB\n    wget -P ~ git.io/.gdbinit; \\\n    # Cleanup\n    apt-get purge -y --auto-remove $tempPkgs; \\\n    apt-get autoremove -q -y; \\\n    apt-get clean -q -y; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Locales\nRUN locale-gen en_US.UTF-8\n\nENV LANG=en_US.UTF-8   \\\n    LANGUAGE=en_US:en  \\\n    LC_ALL=en_US.UTF-8 \\\n    RUBYOPT=-W0\n\n# Openocd\nCOPY rpi3.cfg /openocd/\nCOPY rpi4.cfg /openocd/\n\n# GDB\nCOPY auto /root/.gdbinit.d/auto\n"
}