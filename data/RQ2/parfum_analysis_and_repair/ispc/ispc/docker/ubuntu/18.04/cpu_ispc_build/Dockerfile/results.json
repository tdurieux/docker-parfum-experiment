{
  "startTime": 1674248606143,
  "endTime": 1674248606913,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 25,
        "columnEnd": 109
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 25,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 25,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG LLVM_VERSION=13.0\n\nFROM ubuntu:18.04 AS llvm_build_step1\nMAINTAINER Dmitry Babokin <dmitry.y.babokin@intel.com>\nSHELL [\"/bin/bash\", \"-c\"]\n\nARG REPO=ispc/ispc\nARG SHA=main\nARG LLVM_VERSION\nARG EXTRA_BUILD_ARG\n\n# !!! Make sure that your docker config provides enough memory to the container,\n# otherwise LLVM build may fail, as it will use all the cores available to container.\n\nRUN uname -a\n\n# Packages required to build ISPC and Clang.\nRUN apt-get -y update && apt-get install --no-install-recommends -y wget build-essential gcc g++ git python3 ncurses-dev libtinfo-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Download and install required version of cmake (3.14 for x86, 3.20 for aarch64, as earlier versions are not available as binary distribution) for ISPC build\nRUN if [[ `uname -m` =~ \"x86\" ]]; then export CMAKE_URL=\"https://cmake.org/files/v3.14/cmake-3.14.0-Linux-x86_64.sh\"; else export CMAKE_URL=\"https://github.com/Kitware/CMake/releases/download/v3.20.3/cmake-3.20.3-linux-aarch64.sh\"; fi && \\\n    wget -q --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 5 $CMAKE_URL && mkdir /opt/cmake && sh cmake-*.sh --prefix=/opt/cmake --skip-license && \\\n    ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && rm -rf cmake-*.sh\n\n# If you are behind a proxy, you need to configure git.\nRUN if [ -v \"$http_proxy\" ]; then git config --global --add http.proxy \"$http_proxy\"; fi\n\nWORKDIR /usr/local/src\n\n# Fork ispc on github and clone *your* fork.\nRUN git clone https://github.com/$REPO.git ispc\nRUN cd ispc && git checkout $SHA && cd ..\n\n# This is home for Clang builds\nRUN mkdir /usr/local/src/llvm\n\nENV ISPC_HOME=/usr/local/src/ispc\nENV LLVM_HOME=/usr/local/src/llvm\n\n# If you are going to run test for future platforms, go to\n# http://www.intel.com/software/sde and download the latest version,\n# extract it, add to path and set SDE_HOME.\n\nWORKDIR /usr/local/src/ispc\n\n# Build Clang with all required patches.\n# Pass required LLVM_VERSION with --build-arg LLVM_VERSION=<version>.\n# Note self-build options, it's required to build clang and ispc with the same compiler,\n# i.e. if clang was built by gcc, you may need to use gcc to build ispc (i.e. run \"make gcc\"),\n# or better do clang selfbuild and use it for ispc build as well (i.e. just \"make\").\n# \"rm\" are just to keep docker image small.\nRUN python3 ./alloy.py -b --version=$LLVM_VERSION --selfbuild-phase1 --verbose $EXTRA_BUILD_ARG && \\\n    rm -rf $LLVM_HOME/build-\"$LLVM_VERSION\"_temp\n\nFROM llvm_build_step1 AS llvm_build_step2\nARG LLVM_VERSION\nARG EXTRA_BUILD_ARG\n\nRUN python3 ./alloy.py -b --version=$LLVM_VERSION --selfbuild-phase2 --verbose $EXTRA_BUILD_ARG && \\\n    rm -rf $LLVM_HOME/build-$LLVM_VERSION $LLVM_HOME/llvm-$LLVM_VERSION $LLVM_HOME/bin-\"$LLVM_VERSION\"_temp\nENV PATH=$LLVM_HOME/bin-$LLVM_VERSION/bin:$PATH\n\nFROM llvm_build_step2 AS ispc_build\nARG LLVM_VERSION\n\n# ISPC builds in C++17 mode and will fail without modern libstdc++\n# Also install regular ISPC dependencies\nRUN if [[ `uname -m` =~ \"x86\" ]]; then export CROSS_LIBS=\"libc6-dev-i386\"; else export CROSS_LIBS=\"libc6-dev-armhf-cross\"; fi && \\\n    apt-get -y update && apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository ppa:ubuntu-toolchain-r/test -y && apt-get -y update && \\\n    apt-get -y update && apt-get install --no-install-recommends -y libstdc++-9-dev && \\\n    apt-get install --no-install-recommends -y m4 bison flex zlib1g-dev $CROSS_LIBS && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Configure ISPC build\nRUN mkdir build_$LLVM_VERSION\nWORKDIR build_$LLVM_VERSION\nRUN cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/src/ispc/bin-$LLVM_VERSION -DCMAKE_CXX_FLAGS=-Werror\n\n# Build ISPC\nRUN make ispc -j8 && make check-all && make install\nWORKDIR ../\nRUN rm -rf build_$LLVM_VERSION\n\n#export path for ispc\nENV PATH=/usr/local/src/ispc/bin-$LLVM_VERSION/bin:$PATH\n"
}