{
  "startTime": 1674253962808,
  "endTime": 1674253964332,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 102,
        "columnEnd": 113
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 19,
        "columnEnd": 66
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 152
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\nMAINTAINER Dmitry Babokin <dmitry.y.babokin@intel.com>\nSHELL [\"/bin/bash\", \"-c\"]\n\nARG REPO=ispc/ispc\nARG SHA=main\nARG LLVM_VERSION=13.0\nARG L0L_VER=1.7.15\nARG VC_INTRINSICS_COMMIT_SHA=\"561f4ff575a198b36a72fcb790e1997d7d6d6c91\"\nARG SPIRV_TRANSLATOR_COMMIT_SHA=\"d7a030447802718de76355c248b6bb292669683b\"\n\n# !!! Make sure that your docker config provides enough memory to the container,\n# otherwise LLVM build may fail, as it will use all the cores available to container.\n\n# Packages required to build ISPC and Clang.\nRUN yum -y update; yum -y install centos-release-scl epel-release; rm -rf /var/cache/yum yum clean all\nRUN yum install -y vim wget yum-utils gcc gcc-c++ git python3 m4 bison flex patch make ncurses-devel glibc-devel.x86_64 glibc-devel.i686 xz devtoolset-7 && \\\n    yum install -y libtool autopoint gettext-devel texinfo help2man && \\\n    yum clean -y all && rm -rf /var/cache/yum\n\n# These packages are required if you need to link IPSC with -static.\nRUN yum install -y ncurses-static libstdc++-static && \\\n    yum clean -y all && rm -rf /var/cache/yum\n\n# Download and install required version of cmake (3.14) for ISPC build\nRUN wget -q --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 5 https://cmake.org/files/v3.14/cmake-3.14.0-Linux-x86_64.sh && mkdir /opt/cmake && sh cmake-3.14.0-Linux-x86_64.sh --prefix=/opt/cmake --skip-license && \\\n    ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && rm cmake-3.14.0-Linux-x86_64.sh\n\n# If you are behind a proxy, you need to configure git.\nRUN if [ -v \"$http_proxy\" ]; then git config --global --add http.proxy \"$http_proxy\"; fi\n\nWORKDIR /usr/local/src\n\n# Fork ispc on github and clone *your* fork.\nRUN git clone https://github.com/$REPO.git ispc\nRUN cd ispc && git checkout $SHA && cd ..\n\n# This is home for Clang builds\nRUN mkdir /usr/local/src/llvm\n\nENV ISPC_HOME=/usr/local/src/ispc\nENV LLVM_HOME=/usr/local/src/llvm\nENV XE_DEPS=/usr/local/deps\n\n# If you are going to run test for future platforms, go to\n# http://www.intel.com/software/sde and download the latest version,\n# extract it, add to path and set SDE_HOME.\n\nWORKDIR /usr/local/src/ispc\n\n# Build Clang with all required patches.\n# Pass required LLVM_VERSION with --build-arg LLVM_VERSION=<version>.\n# Note self-build options, it's required to build clang and ispc with the same compiler,\n# i.e. if clang was built by gcc, you may need to use gcc to build ispc (i.e. run \"make gcc\"),\n# or better do clang selfbuild and use it for ispc build as well (i.e. just \"make\").\n# \"rm\" are just to keep docker image small.\nRUN source /opt/rh/devtoolset-7/enable && \\\n    ./alloy.py -b --version=$LLVM_VERSION --selfbuild --llvm-disable-assertions && \\\n    rm -rf $LLVM_HOME/build-$LLVM_VERSION $LLVM_HOME/llvm-$LLVM_VERSION $LLVM_HOME/bin-\"$LLVM_VERSION\"_temp $LLVM_HOME/build-\"$LLVM_VERSION\"_temp\n\nENV PATH=$LLVM_HOME/bin-$LLVM_VERSION/bin:$PATH\n\n# Install newer zlib\nWORKDIR /usr/local/src\nRUN git clone https://github.com/madler/zlib.git && cd zlib && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make -j8 && make install\n\n# Install news flex (2.6.4)\nWORKDIR /usr/local/src\nRUN git clone https://github.com/westes/flex.git && cd flex && git checkout v2.6.4 && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j8 && make install\n\n# vc-intrinsics\nWORKDIR /usr/local/src\nRUN git clone https://github.com/intel/vc-intrinsics.git\nWORKDIR /usr/local/src/vc-intrinsics\nRUN git checkout $VC_INTRINSICS_COMMIT_SHA\nRUN mkdir -p build\nWORKDIR /usr/local/src/vc-intrinsics/build\nRUN cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DLLVM_DIR=$LLVM_HOME/bin-$LLVM_VERSION/lib/cmake/llvm -DCMAKE_INSTALL_PREFIX=$XE_DEPS ../ && make install -j`nproc`\n\n# SPIRV Translator\nWORKDIR /usr/local/src\nRUN git clone https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git\nWORKDIR /usr/local/src/SPIRV-LLVM-Translator\nRUN git checkout $SPIRV_TRANSLATOR_COMMIT_SHA\nRUN mkdir -p build\nWORKDIR /usr/local/src/SPIRV-LLVM-Translator/build\nRUN cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DLLVM_DIR=$LLVM_HOME/bin-$LLVM_VERSION/lib/cmake/llvm/ -DCMAKE_INSTALL_PREFIX=$XE_DEPS ../ && make install -j`nproc`\n\n# L0\nWORKDIR /usr/local/src\nRUN git clone https://github.com/oneapi-src/level-zero.git\nWORKDIR /usr/local/src/level-zero\nRUN git checkout v$L0L_VER\nRUN mkdir -p build\nWORKDIR /usr/local/src/level-zero/build\nRUN cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_INSTALL_PREFIX=/usr/local ../ && make install -j`nproc`\n\n# Build ISPC\nENV LD_LIBRARY_PATH=$LLVM_HOME/bin-$LLVM_VERSION/lib:$LD_LIBRARY_PATH\nRUN mkdir build\nWORKDIR /usr/local/src/ispc/build\nRUN cmake .. -DISPC_PREPARE_PACKAGE=ON -DISPC_CROSS=ON -DXE_ENABLED=ON -DXE_DEPS_DIR=$XE_DEPS && make -j8 package\n"
}