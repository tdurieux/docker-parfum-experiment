{
  "startTime": 1674250523705,
  "endTime": 1674250524232,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 19,
        "columnEnd": 66
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 174
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\nMAINTAINER Dmitry Babokin <dmitry.y.babokin@intel.com>\n\n# !!! Make sure that your docker config provides enough memory to the container,\n# otherwise LLVM build may fail, as it will use all the cores available to container.\n\n# Packages required to build ISPC and Clang.\nRUN yum -y update; yum -y install centos-release-scl epel-release; rm -rf /var/cache/yum yum clean all\nRUN yum install -y vim wget yum-utils gcc gcc-c++ git subversion python3 m4 bison flex patch make ncurses-devel zlib-devel glibc-devel.x86_64 glibc-devel.i686 xz devtoolset-7 && \\\n    yum clean -y all && rm -rf /var/cache/yum\n\n# These packages are required if you need to link IPSC with -static.\nRUN yum install -y ncurses-static libstdc++-static zlib-static && \\\n    yum clean -y all && rm -rf /var/cache/yum\n\n# Download and install required version of cmake (3.12) for ISPC build\nRUN wget https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.sh && mkdir /opt/cmake && sh cmake-3.12.0-Linux-x86_64.sh --prefix=/opt/cmake --skip-license && \\\n    ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && rm cmake-3.12.0-Linux-x86_64.sh\n\n# If you are behind a proxy, you need to configure git.\n#RUN git config --global --add http.proxy http://proxy.yourcompany.com:888\n\nWORKDIR /usr/local/src\n\nRUN git clone https://github.com/ispc/ispc.git && cd ispc && git checkout v1.12.0 && sed s/xvzf/xvf/ alloy.py -i && sed s/pthread\\ dl/pthread/ CMakeLists.txt -i && sed s/${PROJECT_NAME}\\ z/${PROJECT_NAME}\\ -Wl,-Bstatic\\ z/ CMakeLists.txt -i\nRUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-8.0.1/llvm-8.0.1.src.tar.xz\nRUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-8.0.1/cfe-8.0.1.src.tar.xz\n\n# This is home for Clang builds\nRUN mkdir /usr/local/src/llvm\n\nENV ISPC_HOME=/usr/local/src/ispc\nENV LLVM_HOME=/usr/local/src/llvm\n\n# If you are going to run test for future platforms, go to\n# http://www.intel.com/software/sde and download the latest version,\n# extract it, add to path and set SDE_HOME.\n\nWORKDIR /usr/local/src/ispc\n\n# Build Clang with all required patches.\n# Pass required LLVM_VERSION with --build-arg LLVM_VERSION=<version>.\n# By default 8.0 is used.\n# Note self-build options, it's required to build clang and ispc with the same compiler,\n# i.e. if clang was built by gcc, you may need to use gcc to build ispc (i.e. run \"make gcc\"),\n# or better do clang selfbuild and use it for ispc build as well (i.e. just \"make\").\n# \"rm\" are just to keep docker image small.\nARG LLVM_VERSION=8.0\nRUN source /opt/rh/devtoolset-7/enable && \\\n    ./alloy.py -b --version=$LLVM_VERSION --selfbuild --tarball=\"/usr/local/src/llvm-8.0.1.src.tar.xz /usr/local/src/cfe-8.0.1.src.tar.xz\" && \\\n    rm -rf $LLVM_HOME/build-$LLVM_VERSION $LLVM_HOME/llvm-$LLVM_VERSION $LLVM_HOME/bin-$LLVM_VERSION_temp $LLVM_HOME/build-$LLVM_VERSION_temp\n\nENV PATH=$LLVM_HOME/bin-$LLVM_VERSION/bin:$PATH\n\n# Build ISPC\nRUN mkdir build\nWORKDIR /usr/local/src/ispc/build\nRUN cmake .. -DCMAKE_EXE_LINKER_FLAGS=\"-z noexecstack -z relro -z now -Wl,--gc-sections -static-libgcc -static-libstdc++\" && make -j8\n"
}