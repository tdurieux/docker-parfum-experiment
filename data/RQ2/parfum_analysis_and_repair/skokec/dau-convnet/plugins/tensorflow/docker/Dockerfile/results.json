{
  "startTime": 1674251896901,
  "endTime": 1674251897626,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedDockerfile": "ARG BASE_CUDA_VERSION=nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\nFROM $BASE_CUDA_VERSION\n\nLABEL maintainer \"domen.tabernik@fri.uni-lj.si\"\n\nARG DAU_CMAKE_FLAGS=\"\"\n\n# TF/PY version argument must be after FROM statement\nARG TF_VER=1.13.1\nARG PY_VER=3.5\nARG PY_VER_MAJOR=3\n\nENV PYTHON \"python$PY_VER\"\nENV PYTHON_MAJOR \"python$PY_VER_MAJOR\"\n\nENV LD_LIBRARY_PATH \"/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\nENV DAU_CONVNET_HOME /opt/dau-convnet\n\nWORKDIR $DAU_CONVNET_HOME\n\nRUN echo \"Using TensorFlow==$TF_VER\"\nRUN echo \"Using python binary path=$PYTHON\"\n\n# Install general packages for building\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common \\\n\t\t\t\t\t\t\t\t\tsudo \\\n\t\t\t\t\t\t\t\t\tbuild-essential \\\n\tcmake \\\n        build-essential \\\n        curl \\\n        git \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n\tlibopenblas-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install specific python and tensorflow versions \nRUN apt-get install --no-install-recommends -y $PYTHON \\\n                       $PYTHON-dev \\\n                       $PYTHON_MAJOR-pip && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN $PYTHON -m pip --no-cache-dir install numpy pathlib\nRUN $PYTHON -m pip install tensorflow==$TF_VER\n\n# NOTE: since docker build does not provide nvidia drivers we cannot run \"import tensorflow\"\n# using tensorflow-gpu so we only use CPU tensorflow during build-time and then install\n# tensorflow-gpu after DAU-ConvNet is compiled\n\n# Download and build DAU-ConvNet plugin\nRUN git clone https://github.com/skokec/DAU-ConvNet . &&  \\\n    git submodule update --init --recursive\n\nRUN mkdir build && cd build && \\\n    cmake -DBLAS=Open -DBUILD_TENSORFLOW_PLUGIN=on -DPYTHON_EXECUTABLE=\"/usr/bin/$PYTHON\" $DAU_CMAKE_FLAGS .. && \\\n    make -j install\n\n# We need to install back GPU support for tensorflow\nRUN $PYTHON -m pip install tensorflow-gpu==$TF_VER\n\n\n# Install two scripts that will verify integrity of build with tests\nCOPY verify_dau_import.py /opt/verify_dau_import.py\nCOPY test_dau.sh /opt/test_dau.sh\n\n"
}