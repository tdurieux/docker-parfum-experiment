{
  "startTime": 1674249978851,
  "endTime": 1674249979656,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14.15.1-alpine\n\nLABEL maintainer=moonrailgun\nLABEL description=\"TRPG Engine Docker Image\"\n\nWORKDIR /usr/src/app\n\n# # 更新到最新版本的yarn\n# RUN npm install -g yarn@latest\n\nRUN echo \"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.4/main/\" > /etc/apk/repositories\nRUN echo \"http://mirrors.aliyun.com/alpine/v3.8/main/\" >> /etc/apk/repositories\nRUN echo \"http://mirrors.aliyun.com/alpine/v3.8/community/\" >> /etc/apk/repositories\n\n# 安装Bash\nRUN apk update \\\n    && apk upgrade \\\n    && apk add --no-cache bash \\\n      bash-doc \\\n      bash-completion \\\n    && rm -rf /var/cache/apk/* \\\n    && /bin/bash\n\n# 安装Python\nRUN apk add --no-cache python2\n\n# 安装git\nRUN apk add --no-cache git\n\n# 安装gcc\nRUN apk add --no-cache make\nRUN apk add --no-cache gcc musl-dev g++ zlib-dev\n\n\n# node_module cache\nCOPY packages/foreach.sh ./packages/\nCOPY packages/Actor/package.json packages/Actor/yarn.lock ./packages/Actor/\nCOPY packages/Bot/package.json packages/Bot/yarn.lock ./packages/Bot/\nCOPY packages/Chat/package.json packages/Chat/yarn.lock ./packages/Chat/\nCOPY packages/ChatEmotion/package.json packages/ChatEmotion/yarn.lock ./packages/ChatEmotion/\nCOPY packages/Core/package.json packages/Core/yarn.lock ./packages/Core/\nCOPY packages/Dashboard/package.json packages/Dashboard/yarn.lock ./packages/Dashboard/\nCOPY packages/Deploy/package.json packages/Deploy/yarn.lock ./packages/Deploy/\nCOPY packages/Dice/package.json packages/Dice/yarn.lock ./packages/Dice/\nCOPY packages/File/package.json packages/File/yarn.lock ./packages/File/\nCOPY packages/Group/package.json packages/Group/yarn.lock ./packages/Group/\nCOPY packages/Help/package.json packages/Help/yarn.lock ./packages/Help/\nCOPY packages/Info/package.json packages/Info/yarn.lock ./packages/Info/\nCOPY packages/Mail/package.json packages/Mail/yarn.lock ./packages/Mail/\nCOPY packages/Note/package.json packages/Note/yarn.lock ./packages/Note/\nCOPY packages/Notify/package.json packages/Notify/yarn.lock ./packages/Notify/\n# COPY packages/OAuth/package.json packages/OAuth/yarn.lock ./packages/OAuth/\nCOPY packages/Player/package.json packages/Player/yarn.lock ./packages/Player/\nCOPY packages/QQConnect/package.json packages/QQConnect/yarn.lock ./packages/QQConnect/\nCOPY packages/Report/package.json packages/Report/yarn.lock ./packages/Report/\nCOPY packages/TRPG/package.json packages/TRPG/yarn.lock ./packages/TRPG/\nRUN bash packages/foreach.sh 'yarn install'\n\n# 先安装子模块的依赖再安装外部依赖。因为每次升级外部package.json必然会丢失缓存\nCOPY package.json yarn.lock ./\nRUN yarn install && yarn cache clean;\n\nCOPY . .\n# 再更新一遍防止上面没有缓存的包\nRUN yarn install && yarn run packages:install && yarn cache clean;\n\nEXPOSE 23256\n\nENV NODE_ENV production\nCMD yarn run pro\n# CMD echo '测试'\n"
}