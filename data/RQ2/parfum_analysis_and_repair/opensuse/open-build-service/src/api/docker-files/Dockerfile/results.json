{
  "startTime": 1674249952880,
  "endTime": 1674249953522,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is just a thin layer on top of the frontend container\n# that makes sure different users can run it without the\n# contained rails app generating files in the git checkout with\n# some strange user...\n\nFROM registry.opensuse.org/obs/server/unstable/containers/containers/openbuildservice/frontend-features:latest\nARG CONTAINER_USERID\n\n# for lint task\nRUN npm install -g jshint && npm cache clean --force;\n# Same brakeman version is pinned in our CI configuration to have reproducible builds (the license forbids us from shipping the gem in our appliance)\nRUN gem install --no-format-executable brakeman --version 5.1.1\n\n# Configure our user\nRUN usermod -u $CONTAINER_USERID frontend\n\n# We copy the Gemfiles into this intermediate build stage so it's checksum\n# changes and all the subsequent stages (a.k.a. the bundle install call below)\n# have to be rebuild. Otherwise, after the first build of this image,\n# docker would use it's cache for this and the following stages.\nADD Gemfile /obs/src/api/Gemfile\nADD Gemfile.lock /obs/src/api/Gemfile.lock\nRUN chown -R frontend /obs/src/api\n\n# Now do the rest as the user with the same ID as the user who\n# builds this container\nUSER frontend\nWORKDIR /obs/src/api\n\n# Configure our bundle\nRUN bundle config build.ffi --enable-system-libffi; \\\n    bundle config build.nokogiri --use-system-libraries; \\\n    bundle config build.sassc --disable-march-tune-native; \\\n    bundle config build.nio4r --with-cflags='-Wno-return-type'\n\n# Refresh our bundle\nRUN bundle install --jobs=3 --retry=3\n\n# Run our command\nCMD [\"foreman\", \"start\", \"-f\", \"Procfile\"]\n"
}