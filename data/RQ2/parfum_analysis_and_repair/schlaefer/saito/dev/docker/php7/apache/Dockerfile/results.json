{
  "startTime": 1674248732353,
  "endTime": 1674248733172,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker file for Saito 5\n\n# Apache Webserver with PHP\nFROM php:7.2-apache\n\n #install all the system dependencies and enable PHP modules\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      gettext \\\n      libgd-dev \\\n\n      libicu-dev \\\n      libpq-dev \\\n      libmcrypt-dev \\\n      mariadb-client \\\n      git \\\n      zlib1g-dev \\\n      libzip-dev \\\n      unzip \\\n\n      chromium && rm -rf /var/lib/apt/lists/*;\n\nRUN docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd \\\n    && docker-php-ext-install \\\n      gd \\\n      exif \\\n      intl \\\n      mbstring \\\n      pcntl \\\n      pdo_mysql \\\n#      pdo_pgsql \\\n#      pgsql \\\n      zip \\\n      opcache\n\n# Install apcu\nRUN pecl install apcu-5.1.18\nRUN docker-php-ext-enable apcu\nRUN echo \"apc.enable_cli=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-apcu.ini\n\n# Install xdebug\nRUN pecl install xdebug-2.7.1\nRUN docker-php-ext-enable xdebug\nRUN echo \"xdebug.remote_enable=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n      && echo \"xdebug.default_enable=1\"  >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n      && echo \"xdebug.remote_connect_back=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n      && echo \"xdebug.remote_autostart=0\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n      && echo \"xdebug.profiler_enable_trigger=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n      && echo \"xdebug.profiler_output_dir=/var/www/html/tmp\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n\n# Configure and install GD\nRUN docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-install -j$(nproc) gd\n\n#install composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer\n\n#install phing to global because of conflicts with other modules in app\nRUN composer global require phing/phing\nRUN echo \"export PATH=~/.composer/vendor/bin:$PATH\" >> ~/.bashrc\n\n#set our application folder as an environment variable\nENV APP_HOME /var/www/html\n\n#change uid and gid of apache to docker user uid/gid\nRUN usermod -u 1000 www-data && groupmod -g 1000 www-data\n\n#change the web_root to cakephp /var/www/html/webroot folder\n# RUN sed -i -e \"s/html/html\\/app\\/webroot/g\" /etc/apache2/sites-enabled/000-default.conf\n\n#change the web_root to cakephp /var/www/html/webroot folder\nRUN echo \"memory_limit=256M\" >> /usr/local/etc/php/conf.d/memory_limit.ini\nRUN echo \"upload_max_filesize=20M\" >> /usr/local/etc/php/conf.d/memory_limit.ini\n\n# enable apache module rewrite\nRUN a2enmod rewrite\n\n# Install Nodejs\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get update && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\nRUN npm install -g yarn grunt-cli && npm cache clean --force;\n\n#copy source files and run composer\nCOPY . $APP_HOME\n\n#change ownership of our applications\nRUN chown -R www-data:www-data $APP_HOME\n"
}