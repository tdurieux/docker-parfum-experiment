{
  "startTime": 1674249980194,
  "endTime": 1674249981246,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 39,
        "columnStart": 22,
        "columnEnd": 5
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 54,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 74,
        "columnStart": 22,
        "columnEnd": 5
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 22,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# using ubuntu 20 docker image\nFROM ubuntu:focal\n\nARG DEBIAN_FRONTEND=noninteractive\nARG HEY_URL=https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64\nARG WASI_SDK_URL=https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk_12.0_amd64.deb\nARG SHFMT_URL=https://github.com/mvdan/sh/releases/download/v3.2.4/shfmt_v3.2.4_linux_amd64\nARG SHELLCHECK_URL=https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz\n\n# Use bash, not sh\nSHELL [\"/bin/bash\", \"-c\"]\n\n# We run the dev container interactively, so unminimize and install missing packages\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tapt-utils \\\n\tman-db \\\n\t&& yes | unminimize && rm -rf /var/lib/apt/lists/*;\n\n# General GCC C/C++ Build toolchain\n# pkg-config, libtool - used by PocketSphinx\n# cmake - used by cmsis\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tautomake \\\n\tbuild-essential \\\n\tbinutils-dev \\\n\tcmake \\\n\tgit \\\n\tlibtinfo5 \\\n\tlibtool \\\n\tpkg-config && rm -rf /var/lib/apt/lists/*;\n\n# Needed to install from http endpoints via curl or wget\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tcurl \\\n\tca-certificates \\\n\tlibssl-dev \\\n\tlsb-release \\\n\tgpg-agent \\\n\tsoftware-properties-common \\\n\twget && rm -rf /var/lib/apt/lists/*;\n\n# Test Script Stuff\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tbc \\\n\tfonts-dejavu \\\n\tfonts-cascadia-code \\\n\tfonts-roboto \\\n\tgnuplot \\\n\thttpie \\\n\timagemagick \\\n\tjq \\\n\tlibz3-4 \\\n\tnetpbm \\\n\tpango1.0-tools \\\n\twamerican && rm -rf /var/lib/apt/lists/*;\n\n# Hey is a load generator we have to recklessly download from the 'net, as it is only published to brew\n# Binaries are only provided for AMD64 though, so ARM will have to build from source\n# See https://github.com/rakyll/hey\nRUN wget $HEY_URL -O hey && chmod +x hey && mv hey /usr/bin/hey\n\n# shfmt is a formatter for shell scripts\nRUN wget $SHFMT_URL -O shfmt && chmod +x shfmt && mv shfmt /usr/local/bin/shfmt\nRUN wget $SHELLCHECK_URL -O shellcheck && chmod +x shellcheck && mv shellcheck /usr/local/bin/shellcheck\n\n# Interactive Tools\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tbsdmainutils \\\n\tgdb \\\n\tless \\\n\topenssh-client \\\n\tstrace \\\n\tvalgrind \\\n\tvim \\\n\twabt && rm -rf /var/lib/apt/lists/*;\n\nENV LLVM_VERSION=12\nADD install_llvm.sh /sledge/install_llvm.sh\nRUN ./sledge/install_llvm.sh $LLVM_VERSION\n\n# WASI-SDK\nRUN curl -f -sS -L -O $WASI_SDK_URL && dpkg -i wasi-sdk_12.0_amd64.deb && rm -f wasi-sdk_12.0_amd64.deb\nENV WASI_SDK_PATH=/opt/wasi-sdk\n\n# Create non-root user and add to sudoers\nARG USERNAME=dev\nARG USER_UID=1000\nARG USER_GID=$USER_UID\nRUN groupadd --gid $USER_GID $USERNAME\nRUN useradd --uid $USER_UID --gid $USER_GID -m $USERNAME\nRUN apt-get update && apt-get install --no-install-recommends -y sudo && rm -rf /var/lib/apt/lists/*;\nRUN echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\nRUN chmod 0440 /etc/sudoers.d/$USERNAME\n\n# Make non-root user default user and use for rest of Dockerfile\nUSER $USER_UID\n\n# Make sure the mount point and installation target and any files therein are owned by the non-root user\nRUN sudo chown $USER_GID:$USER_GID /sledge\nADD fix_root.sh /sledge/fix_root.sh\nRUN cd sledge && ./fix_root.sh\n\n################################\n# Final Setup as non-root user #\n################################\n\n# Rust\n# Rustup does not cleanly support system installs, so install as non-root user\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable --component rustfmt --target wasm32-wasi -y\nENV PATH=/home/dev/.cargo/bin:$PATH\nRUN cargo install --debug cargo-audit cargo-watch rsign2\n\n# We need to set the locale for pango-view\nENV LANG C.UTF-8\nENV LANGUAGE C.UTF-8\nENV LC_ALL C.UTF-8\n\n# Update PATH and LD_LIBRARY_PATH\nENV PATH=/sledge/runtime/bin:$PATH\nENV PATH=/sledge/awsm/target/release:$PATH\nENV LD_LIBRARY_PATH=/sledge/runtime/bin:$LD_LIBRARY_PATH\n"
}