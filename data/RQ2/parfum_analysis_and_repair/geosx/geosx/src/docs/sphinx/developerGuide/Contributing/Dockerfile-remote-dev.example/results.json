{
  "startTime": 1674250399342,
  "endTime": 1674250400335,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedDockerfile": "# Define you base image for build arguments\nARG IMG\nARG VERSION\nARG ORG\nFROM ${ORG}/${IMG}:${VERSION}\n\n# Uninstall some packages, install others.\n# I use those for clion, but VS code would have different requirements.\n# Use yum's equivalent commands for centos/red-hat images.\n# Feel free to adapt.\nRUN apt-get update\nRUN apt-get remove --purge -y texlive graphviz\nRUN apt-get install --no-install-recommends -y openssh-server gdb rsync gdbserver ninja-build && rm -rf /var/lib/apt/lists/*;\n\n# You will need cmake to build GEOSX.\nARG CMAKE_VERSION=3.16.8\nRUN apt-get install -y --no-install-recommends curl ca-certificates && \\\n    curl -fsSL https://cmake.org/files/v${CMAKE_VERSION%.[0-9]*}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz | tar --directory=/usr/local --strip-components=1 -xzf - && \\\n    apt-get purge --auto-remove -y curl ca-certificates && rm -rf /var/lib/apt/lists/*;\nRUN apt-get autoremove -y\n\n# You'll most likely need ssh/sshd too (e.g. CLion and VSCode allow remote dev through ssh).\n# This is the part where I configure sshd.\n\n# I'm developing in a version of docker that requires root.\n# So by default I use root. Feel free to adapt.\nRUN echo \"PermitRootLogin prohibit-password\" >> /etc/ssh/sshd_config\nRUN echo \"PermitUserEnvironment yes\" >> /etc/ssh/sshd_config\nRUN mkdir -p -m 700 /root/.ssh\n# Put your own public key here!\nRUN echo \"ssh-rsa [#a public ssh key]\" > /root/.ssh/authorized_keys\n\n# Some important variables are provided through the environment.\n# You need to explicitly tell sshd to forward them.\n# Using these variables and not paths will let you adapt to different installation locations in different containers.\n# Feel free to adapt to your own convenience.\nRUN touch /root/.ssh/environment &&\\\n    echo \"CC=${CC}\" >> /root/.ssh/environment &&\\\n    echo \"CXX=${CXX}\" >> /root/.ssh/environment &&\\\n    echo \"MPICC=${MPICC}\" >> /root/.ssh/environment &&\\\n    echo \"MPICXX=${MPICXX}\" >> /root/.ssh/environment &&\\\n    echo \"MPIEXEC=${MPIEXEC}\" >> /root/.ssh/environment &&\\\n    echo \"OMPI_CC=${CC}\" >> /root/.ssh/environment &&\\\n    echo \"OMPI_CXX=${CXX}\" >> /root/.ssh/environment &&\\\n    echo \"GEOSX_TPL_DIR=${GEOSX_TPL_DIR}\" >> /root/.ssh/environment\n\n# This is the default ssh port that we do not need to modify.\nEXPOSE 22\n# sshd's option -D prevents it from detaching and becoming a daemon.\n# Otherwise, sshd would not block the process and `docker run` would quit.\nRUN mkdir -p /run/sshd\nENTRYPOINT [\"/usr/sbin/sshd\", \"-D\"]\n"
}