{
  "startTime": 1674248541149,
  "endTime": 1674248543380,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 221,
        "lineEnd": 221,
        "columnStart": 4,
        "columnEnd": 134
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 242,
        "lineEnd": 242,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 12,
        "columnEnd": 21
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 30,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 238,
        "lineEnd": 238,
        "columnStart": 4,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2020 Gitpod GmbH. All rights reserved.\n# Licensed under the GNU Affero General Public License (AGPL).\n# See License-AGPL.txt in the project root for license information.\n\nFROM gitpod/workspace-full:latest\n\nENV TRIGGER_REBUILD 19\n\nUSER root\n\n### cloud_sql_proxy ###\nARG CLOUD_SQL_PROXY=/usr/local/bin/cloud_sql_proxy\nRUN curl -fsSL https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 > $CLOUD_SQL_PROXY \\\n    && chmod +x $CLOUD_SQL_PROXY\n\n### Helm3 ###\nRUN mkdir -p /tmp/helm/ \\\n    && curl -fsSL https://get.helm.sh/helm-v3.8.1-linux-amd64.tar.gz | tar -xzvC /tmp/helm/ --strip-components=1 \\\n    && cp /tmp/helm/helm /usr/local/bin/helm \\\n    && ln -s /usr/local/bin/helm /usr/local/bin/helm3 \\\n    && rm -rf /tmp/helm/ \\\n    && helm completion bash > /usr/share/bash-completion/completions/helm\n\n### kubernetes ###\nRUN mkdir -p /usr/local/kubernetes/ && \\\n    curl -fsSL https://github.com/kubernetes/kubernetes/releases/download/v1.24.1/kubernetes.tar.gz \\\n    | tar -xzvC /usr/local/kubernetes/ --strip-components=1 \\\n    && KUBERNETES_SKIP_CONFIRM=true /usr/local/kubernetes/cluster/get-kube-binaries.sh \\\n    && chown gitpod:gitpod -R /usr/local/kubernetes\n\nENV PATH=$PATH:/usr/local/kubernetes/cluster/:/usr/local/kubernetes/client/bin/\n\n### kubectl ###\nRUN curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n    # really 'xenial'\n    && add-apt-repository -yu \"deb https://apt.kubernetes.io/ kubernetes-xenial main\" \\\n    && install-packages kubectl=1.24.1-00 \\\n    && kubectl completion bash > /usr/share/bash-completion/completions/kubectl\n\nRUN curl -fsSL -o /usr/bin/kubectx https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx && chmod +x /usr/bin/kubectx \\\n    && curl -fsSL -o /usr/bin/kubens  https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens  && chmod +x /usr/bin/kubens\n\nRUN curl -fsSL https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.2/kubebuilder_2.3.2_linux_amd64.tar.gz | tar -xz -C /tmp/ \\\n    && sudo mkdir -p /usr/local/kubebuilder \\\n    && sudo mv /tmp/kubebuilder_2.3.2_linux_amd64/* /usr/local/kubebuilder \\\n    && rm -rf /tmp/*\n\nRUN curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | sudo apt-key add -\n\n### MySQL client ###\nRUN install-packages mysql-client\n\n### CertManager's cmctl\nRUN cd /usr/bin && curl -fsSL https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cmctl-linux-amd64.tar.gz | tar xzv --no-anchored cmctl\n\n# gokart\nRUN cd /usr/bin && curl -fsSL https://github.com/praetorian-inc/gokart/releases/download/v0.4.0/gokart_0.4.0_linux_x86_64.tar.gz | tar xzv --no-anchored gokart\n\n# leeway\nENV LEEWAY_MAX_PROVENANCE_BUNDLE_SIZE=8388608\nRUN cd /usr/bin && curl -fsSL https://github.com/gitpod-io/leeway/releases/download/v0.2.17/leeway_0.2.17_Linux_x86_64.tar.gz | tar xz\n\n# dazzle\nRUN cd /usr/bin && curl -fsSL https://github.com/gitpod-io/dazzle/releases/download/v0.1.11/dazzle_0.1.11_Linux_x86_64.tar.gz | tar xz\n\n# werft CLI\nENV WERFT_CREDENTIAL_HELPER=/workspace/gitpod/dev/preview/werft-credential-helper.sh\nENV WERFT_HOST=werft-grpc.gitpod-dev.com:443\nENV WERFT_TLS_MODE=system\nRUN cd /usr/bin && curl -fsSL https://github.com/csweichel/werft/releases/download/v0.3.3/werft-client-linux-amd64.tar.gz | tar xz && mv werft-client-linux-amd64 werft\n\n# yq - jq for YAML files\n# Note: we rely on version 3.x.x in various places, 4.x breaks this!\nRUN cd /usr/bin && curl -fsSL https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 > yq && chmod +x yq\n# yq4 as separate binary\nRUN cd /usr/bin && curl -fsSL https://github.com/mikefarah/yq/releases/download/v4.23.1/yq_linux_amd64 > yq4 && chmod +x yq4\n\n# release helper\nRUN cd /usr/bin && curl -fsSL https://github.com/c4milo/github-release/releases/download/v1.1.0/github-release_v1.1.0_linux_amd64.tar.gz | tar xz\n\n### Protobuf\nRUN set -ex \\\n    && tmpdir=$(mktemp -d) \\\n    && curl -fsSL -o $tmpdir/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.20.1/protoc-3.20.1-linux-x86_64.zip \\\n    && mkdir -p /usr/lib/protoc && cd /usr/lib/protoc && unzip $tmpdir/protoc.zip \\\n    && chmod -R o+r+x /usr/lib/protoc/include \\\n    && chmod -R +x /usr/lib/protoc/bin \\\n    && ln -s /usr/lib/protoc/bin/* /usr/bin \\\n    && rm -rf $tmpdir\n\n### Telepresence ###\nRUN curl -fsSL https://packagecloud.io/datawireio/telepresence/gpgkey | apt-key add - \\\n    # 'cosmic' not supported\n    && add-apt-repository -yu \"deb https://packagecloud.io/datawireio/telepresence/ubuntu/ bionic main\" \\\n    # 0.95 (current at the time of this commit) is broken\n    && install-packages \\\n    iproute2 \\\n    iptables \\\n    net-tools \\\n    socat \\\n    telepresence=0.109\n\n### Toxiproxy CLI\nRUN curl -fsSL -o /usr/bin/toxiproxy https://github.com/Shopify/toxiproxy/releases/download/v2.4.0/toxiproxy-cli-linux-amd64 \\\n    && chmod +x /usr/bin/toxiproxy\n\n### libseccomp > 2.5.2\nRUN install-packages gperf \\\n    && cd $(mktemp -d) \\\n    && curl -fsSL https://github.com/seccomp/libseccomp/releases/download/v2.5.4/libseccomp-2.5.4.tar.gz | tar xz \\\n    && cd libseccomp-2.5.4 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm -rf -d\n\n### Cypress deps\nRUN install-packages \\\n    libgtk2.0-0 \\\n    libgtk-3-0 \\\n    libgbm-dev \\\n    libnotify-dev \\\n    libgconf-2-4 \\\n    libnss3 \\\n    libxss1 \\\n    libasound2 \\\n    libxtst6 \\\n    xauth\n# Install netcat to use it as proxy for SSH access to Harvester VMs\nRUN install-packages netcat\n\nUSER gitpod\n\n# Fix node version we develop against\nARG GITPOD_NODE_VERSION=16.16.0\nRUN bash -c \". .nvm/nvm.sh \\\n    && nvm install $GITPOD_NODE_VERSION \\\n    && npm install -g typescript yarn\"\nENV PATH=/home/gitpod/.nvm/versions/node/v${GITPOD_NODE_VERSION}/bin:$PATH\n\n# Go\nENV GOFLAGS=\"-mod=readonly\"\n\n## Register leeway autocompletion in bashrc\nRUN bash -c \"echo . \\<\\(leeway bash-completion\\) >> ~/.bashrc\"\n\n### Google Cloud ###\n# not installed via repository as then 'docker-credential-gcr' is not available\nARG GCS_DIR=/opt/google-cloud-sdk\nENV PATH=$GCS_DIR/bin:$PATH\nRUN sudo chown gitpod: /opt \\\n    && mkdir $GCS_DIR \\\n    && curl -fsSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-388.0.0-linux-x86_64.tar.gz \\\n    | tar -xzvC /opt \\\n    && /opt/google-cloud-sdk/install.sh --quiet --usage-reporting=false --bash-completion=true \\\n    --additional-components gke-gcloud-auth-plugin docker-credential-gcr alpha beta \\\n    # needed for access to our private registries\n    && docker-credential-gcr configure-docker\n\nENV USE_GKE_GCLOUD_AUTH_PLUGIN=True\n\n# Install tools for gsutil\nRUN sudo install-packages \\\n    gcc \\\n    python-dev \\\n    python-setuptools\n\nRUN sudo python3 -m pip uninstall crcmod; sudo python3 -m pip install --no-cache-dir -U crcmod\n\n### gitpod-core specific gcloud/kubectl config\n# Copy GCloud default config that points to gitpod-dev\nARG GCLOUD_CONFIG_DIR=/home/gitpod/.config/gcloud\nCOPY --chown=gitpod gcloud-default-config $GCLOUD_CONFIG_DIR/configurations/config_default\n\n# Set kubeconfig file for dev cluster, using GCloud Application Default Credentials (ADC) as auth provider\nARG KUBE_CONFIG_PATH=/home/gitpod/.kube/config\nCOPY --chown=gitpod kubeconfig.yaml $KUBE_CONFIG_PATH\n\n# Set Application Default Credentials (ADC) based on user-provided env var\nRUN echo \". /workspace/gitpod/scripts/setup-google-adc.sh\" >> ~/.bashrc\n\nENV DB_HOST=localhost\n\nENV LEEWAY_WORKSPACE_ROOT=/workspace/gitpod\nENV LEEWAY_REMOTE_CACHE_BUCKET=gitpod-core-leeway-cache-branch\n\n### AWS Cli ###\nRUN sudo python3 -m pip install --no-cache-dir awscli\n\n# Install aws-iam-authenticator\nRUN sudo curl -fsSL -o aws-iam-authenticator \"https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator\" \\\n    && sudo chmod +x ./aws-iam-authenticator \\\n    && sudo mkdir -p $HOME/.aws-iam \\\n    && sudo mv ./aws-iam-authenticator $HOME/.aws-iam/aws-iam-authenticator \\\n    && sudo chown -R gitpod:gitpod $HOME/.aws-iam\n\n# Install Terraform\nARG RELEASE_URL=\"https://releases.hashicorp.com/terraform/1.1.7/terraform_1.1.7_linux_amd64.zip\"\nRUN mkdir -p ~/.terraform \\\n    && cd ~/.terraform \\\n    && curl -fsSL -o terraform_linux_amd64.zip ${RELEASE_URL} \\\n    && unzip *.zip \\\n    && rm -f *.zip \\\n    && printf \"terraform -install-autocomplete 2> /dev/null\\n\" >>~/.bashrc\n\n# Install GraphViz to help debug terraform scripts\nRUN sudo install-packages graphviz\n\nENV PATH=$PATH:$HOME/.aws-iam:$HOME/.terraform\n\n# Install codecov uploader\n# https://about.codecov.io/blog/introducing-codecovs-new-uploader\nRUN sudo curl -fsSL https://uploader.codecov.io/latest/codecov-linux -o /usr/local/bin/codecov \\\n    && sudo chmod +x /usr/local/bin/codecov\n\n# Install pre-commit https://pre-commit.com/#install\nRUN sudo install-packages shellcheck \\\n    && sudo python3 -m pip install pre-commit\n\n# gh (Github CLI) binary:\nRUN cd /usr/bin && curl -fsSL https://github.com/cli/cli/releases/download/v2.11.3/gh_2.11.3_linux_amd64.tar.gz \\\n    | sudo tar xzv --strip-components=2 gh_2.11.3_linux_amd64/bin/gh\n\n# Install observability-related binaries\nARG PROM_VERSION=\"2.36.0\"\nRUN curl -f -LO https://github.com/prometheus/prometheus/releases/download/v${PROM_VERSION}/prometheus-${PROM_VERSION}.linux-amd64.tar.gz && \\\n    tar -xzvf prometheus-${PROM_VERSION}.linux-amd64.tar.gz && \\\n    sudo mv prometheus-${PROM_VERSION}.linux-amd64/promtool /usr/local/bin/promtool && \\\n    rm -rf prometheus-${PROM_VERSION}.linux-amd64/ && rm prometheus-${PROM_VERSION}.linux-amd64.tar.gz\n\nARG JSONNET_BUNDLER_VERSION=\"0.4.0\"\nRUN curl -fsSL -o jb https://github.com/jsonnet-bundler/jsonnet-bundler/releases/download/v${JSONNET_BUNDLER_VERSION}/jb-linux-amd64 && \\\n    chmod +x jb && sudo mv jb /usr/local/bin\n\nARG JSONNET_VERSION=\"0.17.0\"\nRUN curl -fsSLO https://github.com/google/go-jsonnet/releases/download/v${JSONNET_VERSION}/go-jsonnet_${JSONNET_VERSION}_Linux_x86_64.tar.gz && \\\n    tar -xzvf go-jsonnet_${JSONNET_VERSION}_Linux_x86_64.tar.gz && \\\n    sudo mv jsonnet /usr/local/bin/jsonnet && \\\n    sudo mv jsonnetfmt /usr/local/bin/jsonnetfmt && rm go-jsonnet_${JSONNET_VERSION}_Linux_x86_64.tar.gz\n\nARG GOJSONTOYAML_VERSION=\"0.1.0\"\nRUN curl -fsSLO https://github.com/brancz/gojsontoyaml/releases/download/v${GOJSONTOYAML_VERSION}/gojsontoyaml_${GOJSONTOYAML_VERSION}_linux_amd64.tar.gz && \\\n    tar -xzvf gojsontoyaml_${GOJSONTOYAML_VERSION}_linux_amd64.tar.gz && \\\n    sudo mv gojsontoyaml /usr/local/bin/gojsontoyaml && rm gojsontoyaml_${GOJSONTOYAML_VERSION}_linux_amd64.tar.gz\n\n# Install Replicated and KOTS\nRUN curl -f https://raw.githubusercontent.com/replicatedhq/replicated/v0.38.0/install.sh | sudo bash && \\\n    curl -f https://kots.io/install/1.65.0 | bash\n\n# Copy our own tools\nENV NEW_KUBECDL=1\nCOPY dev-kubecdl--app/kubecdl dev-gpctl--app/gpctl dev-preview-previewctl--cli/previewctl /usr/bin/\n\n# Configure our tools' autocompletion\nRUN bash -c \"echo . \\<\\(gpctl completion bash\\) >> ~/.bashrc\" && \\\n    bash -c \"echo . \\<\\(previewctl completion bash\\) >> ~/.bashrc\"\n"
}