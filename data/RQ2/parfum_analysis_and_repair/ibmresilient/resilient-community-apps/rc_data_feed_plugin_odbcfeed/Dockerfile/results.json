{
  "startTime": 1674217076644,
  "endTime": 1674217077520,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# docker build -t resilient/{ext} .\n# Base image using Red Hat's universal base image (rhel 8) for python\n#FROM registry.access.redhat.com/ubi8/python-36:latest\n# rc-data-feeder will build plugins from a base image\nFROM quay.io/ibmresilient/rc_data_feed:2.2.1\n\nARG APPLICATION=rc_data_feed_plugin_odbcfeed\nARG RES_CIRCUITS_VERSION=\"40.0\"\n\n# update to latest packages, user 0 for root privilege\nUSER 0\n# Update to latest pip\nRUN pip install --no-cache-dir --upgrade pip\n\n# install resilient-circuits\nRUN pip install --no-cache-dir resilient-circuits >=${RES_CIRCUITS_VERSION}\n\n## ---- section for changes ----\n# uncomment and replicate if additional os libraries are needed\nRUN yum -y update && yum clean all\n\n# link libnsl2 to libnsl\nRUN ln -s /usr/lib64/libnsl.so.2.0.0 /usr/lib64/libnsl.so.1\n\n# install MS SQL driver\nRUN yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && rm -rf /var/cache/yum\nRUN yum -y install freetds && rm -rf /var/cache/yum\n\n# copy the driver configurations to the container\nCOPY ./.drivers/drivers.ini /etc/odbc-drivers.ini\nCOPY ./.drivers/drivers/ /tmp/lib/\n\n# install Oracle DB driver\nRUN yum -y install /tmp/lib/oracle-instantclient19.6-basic-19.6.0.0.0-1.x86_64.rpm && rm -rf /var/cache/yum\nRUN yum -y install /tmp/lib/oracle-instantclient-odbc-linuxx64.rpm && rm -rf /var/cache/yum\n#RUN rpm -i /tmp/lib/libnsl-2.28-72.el8_1.1.x86_64.rpm\nENV TNS_ADMIN /var/rescircuits\n\n# add yum repo with unixODBC and install\nRUN yum -y install unixODBC-devel && rm -rf /var/cache/yum\nRUN curl -f https://packages.microsoft.com/config/rhel/8/prod.repo > /etc/yum.repos.d/mssql-release.repo\n\n# configure unixODBC with the driver information in the .ini file\nRUN odbcinst -i -d -f /etc/odbc-drivers.ini\n\n# install psqlodbc driver\nRUN tar -zxvf /tmp/lib/psqlodbc-12.01.0000.tar.gz && rm /tmp/lib/psqlodbc-12.01.0000.tar.gz\nRUN ./psqlodbc-12.01.0000/configure\nRUN make\nRUN make install\n\n# install mariadb (mysql) driver\nRUN git clone https://github.com/MariaDB/mariadb-connector-odbc.git\nWORKDIR mariadb-connector-odbc\nRUN cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONC_WITH_UNIT_TESTS=Off -DCONC_WITH_MSI=OFF -DCMAKE_INSTALL_PREFIX=/usr/local .\nRUN cmake --build . --config RelWithDebInfo\nRUN make install\nWORKDIR /opt/app-root/src\n\n\n# install the base package\nCOPY ./dist /tmp/packages\nRUN pip install --no-cache-dir /tmp/packages/${APPLICATION}-*.tar.gz\n\n# uncomment and replicate if additional pypi packages are needed\n#RUN pip install <package>\n\n# uncomment and replicate if additional local packages are needed\n#COPY /path/to/extra_package /tmp/packages/.\n#RUN pip install /tmp/packages/<extra_package>*.tar.gz\n\n# uncomment to expose port only if a custom threat feed\n# EXPOSE 9000\n## ---- end section for changes ----\n\n# set up configuration and log locations using /etc and /var/log, the conventional locations for config and logs\n# RUN mkdir /etc/rescircuits\nENV APP_CONFIG_FILE /etc/rescircuits/app.config\n\n# create directory for logs and set to be root group to allow access by non root processes\n# See https://docs.openshift.com/container-platform/4.2/openshift_images/create-images.html#images-create-guide-openshift_create-images\n# RUN mkdir /var/log/rescircuits && \\\n#    chgrp -R 0 /var/log/rescircuits && \\\n#    chmod -R g=u /var/log/rescircuits\nENV APP_LOG_DIR /var/log/rescircuits\n\n# setup entrypoint for read-only enterprise data used by integration, if needed\n#RUN mkdir /var/rescircuits\n\n# entrypoint for resilient-circuits.  Use /opt, the conventional location for optional software on Linux\n# RUN mkdir /opt/rescircuits\nCOPY entrypoint.sh /opt/rescircuits/entrypoint.sh\n\n# remove temporary files\nRUN rm -rf /tmp/packages /tmp/lib\n\n# arbitrary user, support running as non-root.  Required on OpenShift.\n# Generally a good practice.\nUSER 1001\nENTRYPOINT [ \"sh\", \"/opt/rescircuits/entrypoint.sh\" ]\n"
}