{
  "startTime": 1674252023916,
  "endTime": 1674252024804,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:14.04\nMAINTAINER \"Konrad Kleine\"\n\nUSER root\n\n############################################################\n# Setup environment variables\n############################################################\n\nENV SOURCE_DIR /source\nENV START_SCRIPT /root/start-develop.sh\n\n############################################################\n# Speedup DPKG and don't use cache for packages\n############################################################\n\n# Taken from here: https://gist.github.com/kwk/55bb5b6a4b7457bef38d\n#\n# this forces dpkg not to call sync() after package extraction and speeds up\n# install\nRUN echo \"force-unsafe-io\" > /etc/dpkg/dpkg.cfg.d/02apt-speedup\n# we don't need and apt cache in a container\nRUN echo \"Acquire::http {No-Cache=True;};\" > /etc/apt/apt.conf.d/no-cache\n\nRUN apt-get -y update && \\\n    export DEBIAN_FRONTEND=noninteractive\n\n############################################################\n# Install development requirements\n############################################################\n\nRUN apt-get -y install \\\n      git \\\n      nodejs \\\n      nodejs-legacy \\\n      npm \\\n      --no-install-recommends && rm -rf /var/lib/apt/lists/*;\nRUN git config --global url.\"https://\".insteadOf git://\n# Avoid this: \"Problem with the SSL CA cert (path? access rights?)\"\nRUN git config --global http.sslVerify false\n\n############################################################\n# Create start script\n############################################################\n\n# Let people know how this was built\nADD Dockerfile /root/Dockerfile\n\n# Exposed ports (only the grunt port 9000)\nEXPOSE 9000\n\nVOLUME [\"/source\"]\n\nCMD $START_SCRIPT\n"
}