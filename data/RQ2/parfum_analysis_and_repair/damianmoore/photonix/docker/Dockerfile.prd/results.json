{
  "startTime": 1674255733107,
  "endTime": 1674255734115,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ARCH=\nFROM ${ARCH}python:3.8.12-slim-bullseye as builder\n\n# Install system dependencies - note that some of these are only used on non-amd64 where Python packages have to be compiled from source\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        build-essential \\\n        cmake \\\n        curl \\\n        gfortran \\\n        gnupg \\\n        libatlas-base-dev \\\n        libblas-dev \\\n        libblas3 \\\n        libfreetype6 \\\n        libfreetype6-dev \\\n        libjpeg-dev \\\n        liblapack-dev \\\n        liblapack3 \\\n        libpq-dev \\\n        libssl-dev \\\n        libtiff5-dev \\\n    && \\\n        apt-get clean && \\\n            rm -rf /var/lib/apt/lists/* \\\n                   /tmp/* \\\n                   /var/tmp/*\n\n# Install Node & Yarn\nRUN curl -f -sL https://deb.nodesource.com/setup_14.x | bash - && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y nodejs && \\\n         apt-get clean && \\\n            rm -rf /var/lib/apt/lists/* \\\n                   /tmp/* \\\n                   /var/tmp/*\nRUN npm install --global --unsafe-perm yarn && npm cache clean --force;\n\n# Install Python dependencies\nWORKDIR /srv\nCOPY docker/pip.conf /etc/pip.conf\nCOPY docker/.pypirc /root/.pypirc\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir pypi-uploader==1.1.0\n\nCOPY requirements.txt /srv/requirements.txt\nCOPY docker/install_and_upload_python_packages.py /root/install_and_upload_python_packages.py\nENV PYTHONUNBUFFERED=1\nARG PYPI_UPLOAD_USERNAME\nARG PYPI_UPLOAD_PASSWORD\nRUN if [ \"${PYPI_UPLOAD_USERNAME}\" = \"\" ] ; \\\n     then python /root/install_and_upload_python_packages.py ; \\\n     else python /root/install_and_upload_python_packages.py -u ${PYPI_UPLOAD_USERNAME} -p ${PYPI_UPLOAD_PASSWORD} ; \\\n    fi\n\n# Install NPM dependencies\nCOPY ui/package.json /srv/ui/package.json\nCOPY ui/yarn.lock /srv/ui/yarn.lock\nWORKDIR /srv/ui\nENV NODE_ENV=production\nRUN yarn install --no-cache --network-timeout 1000000 && yarn cache clean;\n\n# Copy over the frontend code\nCOPY ui/public /srv/ui/public\nCOPY ui/src /srv/ui/src\n\n# Build frontend app\n# Node option here solves heap out-of-memory issue when building Webpack bundle on machines that only have 1GB RAM\nRUN NODE_OPTIONS=--max-old-space-size=768 yarn build\n\n# Remove large unused files in Python site-packages\nRUN find /usr/local/lib/python3.8 -type d -name  \"__pycache__\" -exec rm -r {} + && \\\n    find /usr/local/lib/python3.8/site-packages -type d -name  \"tests\" -exec rm -r {} +\nRUN rm -rf \\\n    /usr/local/lib/python3.8/site-packages/tensorflow/include \\\n    /usr/local/lib/python3.8/site-packages/scipy \\\n    /usr/local/lib/python3.8/site-packages/django/contrib/gis \\\n    /usr/local/lib/python3.8/site-packages/django/contrib/humanize \\\n    /usr/local/lib/python3.8/site-packages/django/contrib/admindocs \\\n    /usr/local/lib/python3.8/site-packages/django/contrib/redirects \\\n    /usr/local/lib/python3.8/site-packages/django/contrib/flatpages \\\n    /usr/local/lib/python3.8/site-packages/django/contrib/sitemaps \\\n    /usr/local/lib/python3.8/site-packages/django/contrib/syndication \\\n    /usr/local/lib/python3.8/site-packages/matplotlib/backends \\\n    /usr/local/lib/python3.8/site-packages/matplotlib/tests \\\n    /usr/local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts \\\n    /usr/local/lib/python3.8/site-packages/matplotlib/mpl-data/sample_data \\\n    /usr/local/lib/python3.8/site-packages/matplotlib/mpl-data/images \\\n    /usr/local/lib/python3.8/site-packages/matplotlib/mpl-data/stylelib \\\n    /usr/local/lib/python3.8/site-packages/tensorboard \\\n    /usr/local/lib/python3.8/site-packages/tensorboard_plugin_wit\n\n\nFROM ${ARCH}python:3.8.12-slim-bullseye\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        cron \\\n        dcraw \\\n        file \\\n        libatlas3-base \\\n        libfreetype6 \\\n        libfreetype6-dev \\\n        libgl1 \\\n        libglib2.0-dev \\\n        libhdf5-dev \\\n        libheif-examples \\\n        libimage-exiftool-perl \\\n        libpq-dev \\\n        libtiff5-dev \\\n        netcat \\\n        nginx-light \\\n        supervisor \\\n        xz-utils \\\n    && \\\n        apt-get clean && \\\n            rm -rf /var/lib/apt/lists/* \\\n                   /tmp/* \\\n                   /var/tmp/*\n\n# Copy over installed Python packages and built JS bundle\nCOPY --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages\nCOPY --from=builder /usr/local/bin /usr/local/bin\nCOPY --from=builder /srv/ui/build /srv/ui/build\n\nWORKDIR /srv\n\n# Copy over the code\nCOPY photonix /srv/photonix\nCOPY manage.py /srv/manage.py\nCOPY test.py /srv/test.py\nCOPY tests /srv/tests\nCOPY ui/public /srv/ui/public\n\n# Copy system config and init scripts\nCOPY system /srv/system\nCOPY system/supervisord.conf /etc/supervisord.conf\n\n# Copy crontab\nCOPY system/cron.d /etc/cron.d/\nRUN chmod 0644 /etc/cron.d/*\n\nENV PYTHONPATH /srv\nENV TF_CPP_MIN_LOG_LEVEL 3\n\nRUN DJANGO_SECRET_KEY=test python photonix/manage.py collectstatic --noinput --link\n\nCMD ./system/run.sh\n\nEXPOSE 80\n"
}