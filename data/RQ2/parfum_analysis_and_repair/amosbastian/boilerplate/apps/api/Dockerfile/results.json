{
  "startTime": 1674248382348,
  "endTime": 1674248383379,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:lts-alpine\nWORKDIR /app\nCOPY ./dist/apps/api/package.json ./\n# Copy over Prisma schema\nCOPY ./apps/api/src/prisma ./prisma\n# Remove output from Prisma schema since env variable does not work\n# ENV TYPEGRAPHQL_PRISMA_OUTPUT=\"./node_modules/@generated/type-graphql\"\nRUN sed -i -e \"s|output[[:space:]]*=[[:space:]]*\\\"../../../../node_modules/@generated/type-graphql\\\"||g\" ./prisma/schema.prisma\n# Install dependencies, but skip devDependencies\n# By running npm install in its own layer, it will be cached\n# So next time if we only change something in the app and not in package.json, docker will only\n# create a new layer with the few new kb that is the app, saving a lot of registry storage\nRUN npm install --production && npm cache clean --force;\n# When generating the package.json using generatePackageJson\n# It does not copy dependencies that are not specified in imports\n# This is why we need to add them here\nRUN npm install tslib apollo-server-core @sentry/node dotenv typegraphql-prisma --production && npm cache clean --force;\n# Generate TypeGraphQL\nRUN npx prisma generate\n# The port that we want to use in the container\nENV PORT=3333\n# Expose the port so that we can reach the app\nEXPOSE ${PORT}\n# Copy the built app into /app in the container\nCOPY ./dist/apps/api .\n# Start the app\nCMD [\"node\", \"main.js\"]\n"
}