{
  "startTime": 1674252948230,
  "endTime": 1674252949287,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/opengl:1.2-glvnd-devel-ubuntu20.04\nLABEL org.opencontainers.image.title=\"ROFT Docker Image\"\nLABEL org.opencontainers.image.description=\"Infrastructure for reproducing ROFT experiments\"\nLABEL org.opencontainers.image.source=\"https://raw.githubusercontent.com/hsp-iit/roft/master/dockerfiles/Dockerfile\"\nLABEL org.opencontainers.image.authors=\"Nicola A. Piga <nicola.piga@iit.it>\"\n\n# Use /bin/bash instead of /bin/sh\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Non-interactive installation mode\nENV DEBIAN_FRONTEND=noninteractive\n\n# Set the locale\nRUN apt update && \\\n    apt install --no-install-recommends -y -qq locales && \\\n    locale-gen en_US en_US.UTF-8 && \\\n    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\nENV LANG=en_US.UTF-8\n\n# Install essentials\nRUN apt update && \\\n    apt install --no-install-recommends -y -qq apt-utils build-essential ca-certificates cmake cmake-curses-gui curl emacs-nox git glmark2 gnupg2 htop iputils-ping jq lsb-release mesa-utils nano psmisc python3-virtualenv sudo unzip vim wget zip && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install GitHub cli\nRUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \\\n    echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \\\n    apt update && \\\n    apt install --no-install-recommends -y -qq gh && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install additional dependencies\nRUN apt update && \\\n    apt install --no-install-recommends -y -qq evince eog libassimp-dev libconfig++-dev libglfw3-dev libglew-dev libglm-dev libeigen3-dev libopencv-dev libpython3-dev libtclap-dev pybind11-dev texlive-base texlive-latex-base && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Build bayes-filters-lib\nRUN git clone https://github.com/xenvre/bayes-filters-lib && \\\n    cd bayes-filters-lib && git checkout of-aided-tracking && mkdir build && cd build && \\\n    cmake .. && \\\n    make install\n\n# Build superimpose-mesh-lib\nRUN git clone https://github.com/robotology/ycm && \\\n    cd ycm && mkdir build && cd build && \\\n    cmake .. && \\\n    make install\nRUN git clone https://github.com/xenvre/superimpose-mesh-lib && \\\n    cd superimpose-mesh-lib && git checkout of-aided-tracking && mkdir build && cd build && \\\n    cmake .. && \\\n    make install\n\n# Build RobotsIO\nRUN git clone https://github.com/xenvre/robots-io && \\\n    cd robots-io && mkdir build && cd build && \\\n    cmake .. && \\\n    make install\n\n# Create user with passwordless sudo\nRUN useradd -l -G sudo -md /home/user -s /bin/bash -p user user && \\\n    sed -i.bkp -e 's/%sudo\\s\\+ALL=(ALL\\(:ALL\\)\\?)\\s\\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers\n\n# Switch to user\nUSER user\n\n# Configure emacs\nRUN echo \"(setq-default indent-tabs-mode nil)\" >> /home/user/.emacs.el && \\\n    echo \"(setq-default tab-width 4)\" >> /home/user/.emacs.el && \\\n    echo \"(setq make-backup-files nil)\" >> /home/user/.emacs.el && \\\n    echo \"(setq auto-save-default nil)\" >> /home/user/.emacs.el && \\\n    echo \"(setq c-default-style \\\"linux\\\"\" >> /home/user/.emacs.el && \\\n    echo \"      c-basic-offset 4)\" >> /home/user/.emacs.el && \\\n    echo \"(global-subword-mode 1)\" >> /home/user/.emacs.el && \\\n    echo \"(add-hook 'before-save-hook 'delete-trailing-whitespace)\" >> /home/user/.emacs.el && \\\n    echo \"(custom-set-variables '(custom-enabled-themes '(tango-dark)))\" >> /home/user/.emacs.el && \\\n    echo \"(custom-set-faces)\" >> /home/user/.emacs.elx\n\n# Build ROFT\nWORKDIR /home/user\nRUN git clone https://github.com/hsp-iit/roft && \\\n    cd roft && mkdir build && cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/home/user/roft/install -DBUILD_RENDERER=ON .. && \\\n    make install\n\n# Configure the virtual environment\nWORKDIR /home/user/roft\nRUN virtualenv roft_env -p `which python3` && \\\n    . roft_env/bin/activate && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    pip install --no-cache-dir -e .\n\n# Download third-party assets and tools\nWORKDIR /home/user/roft\nRUN . roft_env/bin/activate && \\\n    # bash tools/third_party/download_google_drive_file.sh https://drive.google.com/file/d/1gmcDD-5bkJfcMKLZb3zGgH_HUFbulQWu/view && \\\n    # unzip YCB_Video_Models.zip -d YCB_Video_Models/ && \\\n    # rm YCB_Video_Models.zip && \\\n    git clone https://github.com/NVIDIA/Dataset_Utilities tools/third_party/Dataset_Utilities && \\\n    cd tools/third_party/Dataset_Utilities && \\\n    git checkout 532b8c76e3d7946748a10af3398438b35383f157 && \\\n    pip install --no-cache-dir -e . && \\\n    nvdu_ycb --setup\n\n# Setup PATH and LD_LIBRARY_PATH\nENV PATH \"$PATH:/home/user/roft/install/bin\"\nENV LD_LIBRARY_PATH \"$LD_LIBRARY_PATH:/home/user/roft/install/lib\"\n\n# Launch bash from /home/user\nWORKDIR /home/user\nCMD [\"bash\"]\n"
}