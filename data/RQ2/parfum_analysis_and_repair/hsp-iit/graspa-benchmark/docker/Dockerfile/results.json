{
  "startTime": 1674251629727,
  "endTime": 1674251631074,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:bionic\nLABEL maintainer=\"fabrizio.bottarel@iit.it\"\n\n# Set up env variables\n\nENV HOME=/root \\\n    DEBIAN_FRONTEND=noninteractive \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    DISPLAY=:0.0 \\\n    DISPLAY_WIDTH=1920 \\\n    DISPLAY_HEIGHT=1080 \\\n    RUN_XTERM=yes \\\n    RUN_FLUXBOX=yes \\\n    BUILD_TYPE=Release \\\n    SHELL=/bin/bash\n\n# Install git, supervisor, VNC, & X11 packages\n\nRUN set -ex; \\\n    apt update; \\\n    apt install --no-install-recommends -y \\\n      bash \\\n      fluxbox \\\n      git \\\n      net-tools \\\n      novnc \\\n      supervisor \\\n      x11vnc \\\n      xterm \\\n      xvfb && rm -rf /var/lib/apt/lists/*;\n\n# Install build tools and accessories\n\nRUN apt install --no-install-recommends -y apt-utils \\\n                   software-properties-common \\\n                   tmux \\\n                   nano \\\n                   build-essential \\\n                   cmake \\\n                   cmake-curses-gui && rm -rf /var/lib/apt/lists/*;\n\n# Install pyhton and pip3\n\nRUN apt install --no-install-recommends -y python3 \\\n                   python3-dev \\\n                   python3-pip \\\n                   python3-setuptools && \\\n    pip3 install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/*;\n\n# Use the /workspace directory as entry point\n\nRUN mkdir workspace\nWORKDIR /workspace\n\n# Install Simox dependencies (Qt4)\n\nRUN apt install --no-install-recommends -y libboost-all-dev \\\n                   libeigen3-dev libsoqt4-dev \\\n                   libcoin80-dev \\\n                   libqt4-dev \\\n                   libnlopt-dev \\\n                   librapidxml-dev && rm -rf /var/lib/apt/lists/*;\n\n# Get and build Simox v2.3.74\n\nRUN git clone https://gitlab.com/Simox/simox.git\nRUN cd simox/build && \\\n    git checkout v2.3.74 && \\\n    cmake .. \\\n    -DCMAKE_BUILD_TYPE=$BUILD_TYPE \\\n    -DSimox_USE_QT4=ON \\\n    -DSimox_BUILD_SimDynamics=OFF \\\n    -DSimDynamics_USE_BULLET=OFF \\\n    -DSimDynamics_USE_BULLET_USE_GLU=OFF &&\\\n    make -j4 install\nRUN rm -Rf simox\n\n# Create environmental variable for simox install dir\n\nENV Simox_DIR=/usr/local\n\n# Clone the GRASPA benchmark repository\nRUN git clone https://github.com/hsp-iit/GRASPA-benchmark\nRUN mkdir GRASPA-benchmark/build && cd GRASPA-benchmark/build && \\\n    cmake .. && make install\n\n# Install the Python packages\nRUN pip3 install --no-cache-dir -r GRASPA-benchmark/requirements.txt\n\n# Clone the experiment data repository\nRUN git clone https://github.com/hsp-iit/GRASPA-test.git\n\n# Set up .bashrc for root user (now in entrypoint)\n# RUN echo \"alias python='/usr/bin/python3.6'\" >> ~/.bashrc\n# RUN echo \"PS1='\\[\\e]0;\\u \\w\\a\\]\\[\\033[01;32m\\]\\u\\[\\033[00m\\] \\[\\033[01;34m\\]\\w\\[\\033[00m\\] \\$ '\" >> ~/.bashrc\n# RUN echo \"export GRASPA_DIR=/workspace/GRASPA-benchmark\" >> ~/.bashrc\n# RUN echo \"export GRASPA_TEST_DIR=/workspace/GRASPA-test/experiment_data/right_arm\" >> ~/.bashrc\n# RUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib\" >> ~/.bashrc\n\n# Set up configs and entrypoint\nCOPY supervisord.conf entrypoint.sh /app/\nCOPY conf.d /app/conf.d/\n\nCMD [\"/app/entrypoint.sh\"]\nEXPOSE 8080\n"
}