{
  "startTime": 1674251272088,
  "endTime": 1674251273079,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n# Get dependencies\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    python-setuptools \\\n    python3-venv \\\n    gcc \\\n    python3-dev \\\n    python3-setuptools \\\n    libdpkg-perl \\\n    mariadb-server \\\n    mariadb-client \\\n    make \\\n    wget \\\n    unzip \\\n    git \\\n    nodejs \\\n    npm \\\n    r-base \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\nWORKDIR /apps\n# Get the frontend source, clearcut, and bowtie2\nRUN git clone https://github.com/arosenfeld/immunedb-frontend\nRUN wget https://immunedb-deps.s3-website-us-east-1.amazonaws.com/clearcut.tgz && \\\n    tar xzf clearcut.tgz && rm clearcut.tgz\nRUN wget https://github.com/BenLangmead/bowtie2/releases/download/v2.3.4.1/bowtie2-2.3.4.1-linux-x86_64.zip && \\\n    unzip bowtie2-2.3.4.1-linux-x86_64.zip && \\\n    mv bowtie2-2.3.4.1-linux-x86_64 bowtie2\n# Build the frontend, clearcut, bowtie2, and baseline\nWORKDIR /apps/clearcut\nRUN make\nWORKDIR /apps/immunedb-frontend\nRUN npm install && npm cache clean --force;\nENV BASENAME __BASENAME__\nENV API_ENDPOINT __ENDPOINT__\nENV NODE_ENV production\nRUN npm run build\nWORKDIR /apps/baseline\nRUN wget https://immunedb.com/patched_baseline.tgz && \\\n    tar xzf patched_baseline.tgz && rm patched_baseline.tgz\nRUN Rscript -e 'install.packages(c(\"seqinr\", \"parallel\"))'\n# Copy ImmuneDB files and install\nCOPY requirements.txt setup.py README.md /apps/immunedb/\nCOPY lib/ /apps/immunedb/lib\nCOPY bin/ /apps/immunedb/bin\nCOPY immunedb/ /apps/immunedb/immunedb\nWORKDIR /apps/immunedb\nRUN grep -e \"numpy\\|scipy\" requirements.txt | xargs -L 1 pip3 install\nRUN python3 setup.py install\n# Copy germlines and scripts\nCOPY docker/germlines/ /root/germlines\nCOPY docker/run.sh /root\nCOPY docker/proxy.py /apps/immunedb\nCOPY docker/mariadb/my.cnf /etc/mysql\nCOPY docker/setup_users.sql /tmp\nCOPY docker/example /example\n# pRESTO\nRUN pip3 install --no-cache-dir presto\n# IgBLAST\nENV IGDATA /apps/igblast\nWORKDIR /apps/igblast\nCOPY docker/run_igblast.sh /usr/sbin\nCOPY docker/make_db.sh /usr/sbin\nRUN wget -q \\\n    ftp://ftp.ncbi.nih.gov/blast/executables/igblast/release/LATEST/ncbi-igblast-\\*-x64-linux.tar.gz && \\\n    tar xzf ncbi*.gz && \\\n    rm *.gz && \\\n    mv ncbi* src && \\\n    mv src/* . && \\\n    rm -r src\nENV PATH \"${PATH}:/apps/bowtie2:/apps/clearcut:/apps/igblast/bin\"\nRUN make_db.sh database/human /root/germlines/igblast/human/*.fasta && \\\n    make_db.sh database/mouse /root/germlines/igblast/mouse/*.fasta && \\\n    mv database/human/*gapped* /root/germlines/igblast/human && \\\n    mv database/mouse/*gapped* /root/germlines/igblast/mouse\n# Expose API and frontend ports\nEXPOSE 5000 8080\n# Setup MySQL volume\nRUN mkdir -p /share\nVOLUME /share\n# Add the example data\nWORKDIR /root\nCMD bash -C 'run.sh';'bash'\n"
}