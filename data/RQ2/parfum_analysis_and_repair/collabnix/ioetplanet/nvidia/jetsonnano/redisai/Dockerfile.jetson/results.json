{
  "startTime": 1674255437555,
  "endTime": 1674255438429,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "FROM nvcr.io/nvidia/l4t-base:r32.5.0\n\n# This is due on the following error on ARMv8:\n# /usr/lib/aarch64-linux-gnu/libgomp.so.1: cannot allocate memory in static TLS block\n# Something is exausting TLS, causing libgomp to fail. Preloading it as a workaround helps.\n# ENV LD_PRELOAD /usr/lib/aarch64-linux-gnu/libgomp.so.1\n\nENV DEBIAN_FRONTEND=noninteractive\nENV LD_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu:$LD_LIBRARY_PATH\nENV LD_PRELOAD /usr/lib/aarch64-linux-gnu/libgomp.so.1\n\nRUN apt-get -qq update && apt-get upgrade -y\nRUN apt-get install --no-install-recommends -qqy curl patch && rm -rf /var/lib/apt/lists/*;\nRUN curl -f https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py && python3 /tmp/get-pip.py\n\nRUN pip install --no-cache-dir redis==3.2.1\n\nWORKDIR /usr/src/app\n\nADD read_camera_jetson.py ./\nADD *.jpg ./\nADD build_opencv.patch ./\n\n# build opencv from the source for Jetson Nano aarch64\nRUN wget https://raw.githubusercontent.com/mdegans/nano_build_opencv/301e95dd6c361ed29dc523a46483f05bafd7f70b/build_opencv.sh\nRUN patch build_opencv.sh build_opencv.patch\nRUN chmod +x build_opencv.sh\nRUN ./build_opencv.sh\n\nCMD [ \"python3\", \"./read_camera_jetson.py\", \"-u\", \"redis://redis:6379\"]\n"
}