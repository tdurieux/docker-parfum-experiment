{
  "startTime": 1674250191025,
  "endTime": 1674250191719,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "## What is a Dockerfile?\nA Dockerfile is a text file which contains a series of commands or instructions. These instructions are executed in the order in which they are written.\nExecution of these instructions takes place on a base image. Hence, on building the Dockerfile, the successive actions form a new image from the base parent image.\n\nAll work below is done on Play-With-Docker platform.\n\nTo begin, we will create a new directory.\n\n```\n[node1] (local) root@192.168.0.38 ~\n$ mkdir /test\n\n[node1] (local) root@192.168.0.38 ~\n$ cd /test\n\n[node1] (local) root@192.168.0.38 /test\n$ pwd\n/test\n```\n\nNow, open a file named 'Dockerfile' with a text editor\n\n```\n[node1] (local) root@192.168.0.38 /test\n$ vi Dockerfile\n```\n## Writing a Dockerfile\n#### Setting a Base Image using FROM keyword\n\n```\nFROM ubuntu\n```\n\nThus, our image would start building taking base as Ubuntu.\n\n#### Defining the Author (Optional) using MAINTAINER keyword\n\n```\nMAINTAINER Prashansa Kulshrestha\n```\n\n#### Running a commands on the base image to form new layers using RUN keyword\n\n```\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends python && rm -rf /var/lib/apt/lists/*;\n```\nSince, the base image was Ubuntu, we can run Ubuntu commands here. These commands above install python over Ubuntu.\n\n#### Adding a simple Hello World printing python file to the container's file system using ADD command\n\n```\nADD hello.py /home/hello.py\nADD a.py /home/a.py\n```\n\nWe will place our hello.py and a.py files in the newly created directory itself (/test). ADD command would copy it from /test (current working directory) of host system\nto container's filesystem at /home. The destination directories in the container would be create incase they don't exist.\n\nCode for hello.py:\n```\nprint (\"Hello World\")\n```\n\nCode for a.py:\n```\nprint (\"Overriden Hello\")\n```\n\n#### Specifying default execution environment for the container using CMD and ENTRYPOINT\nThese keywords let us define the default execution environment for a container when it just initiates from an image or just starts.\nIf a command is specified with CMD keyword, it is the first command which a container executes as soon as it instantiates from an image. However, command and arguments provided with CMD can be overridden if user specifies his own commands while running the container using 'docker run' command.'\n\nENTRYPOINT helps to create a executable container and the commands and arguments provided with this keyword are not overridden.\n\nWe can also provide the default application environment using ENTRYPOINT and default arguments to be passed to it via CMD keyword. This can be done as follows:\n```\nCMD [\"/home/hello.py\"]\nENTRYPOINT [\"python\"]\n```\nSo, default application mode of container would be python and if no other filename is provided as argument to it then it will execute hello.py placed in its /home directory.\n\nBenefit of this is that user can choose some other file to run with the same application at runtime, that is, while launching the container.\n\nSo, our overall Dockerfile currently looks like this:\n\n```\nFROM ubuntu\nMAINTAINER Prashansa Kulshrestha\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y python && rm -rf /var/lib/apt/lists/*;\nADD hello.py /home/hello.py\nADD a.py /home/a.py\nCMD [\"/home/hello.py\"]\nENTRYPOINT [\"python\"]\n```\n\n## Building a Dockerfile\n\nTo create an image from the Dockerfile, we need to build it. This is done as follows:\n\n```\n[node1] (local) root@192.168.0.38 /test\n$ docker build -t pythonimage .\n```\n\nThe option -t lets us tag our image with a name we desire. So, here we have named our image as 'pythonimage'.\nThe '.' in the end specifies current working directory i.e. /test. We initiated our build process from here. Docker would find the file named 'Dockerfile' in the current directory to process the build.\n\n## Running a container from the newly built image\n\n```\n[node1] (local) root@192.168.0.38 /test\n$ docker run --name test1 pythonimage\nHello World\n[node1] (local) root@192.168.0.38 /test\n$\n```\n\nSo, here /home/hello.py file placed in the container executed and displayed the output 'Hello World', since it was specified as default with CMD keyword.\n\n```\n[node1] (local) root@192.168.0.38 /test\n$ docker run --name test2 pythonimage /home/a.py\nOverriden Hello\n[node1] (local) root@192.168.0.38 /test\n$\n```\nHere, user specified another file to be run with python (default application for this container). So, the file specified with CMD got overridden and we obtained the output from /home/a.py.\n\n\n\n\n\n\n\n"
}