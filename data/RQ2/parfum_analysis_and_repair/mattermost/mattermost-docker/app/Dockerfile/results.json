{
  "startTime": 1674219471497,
  "endTime": 1674219472221,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 35,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 38,
        "columnEnd": 148
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 112
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.10\n\n# Some ENV variables\nENV PATH=\"/mattermost/bin:${PATH}\"\nENV MM_INSTALL_TYPE=docker\n\n# Build argument to set Mattermost edition\nARG edition=enterprise\nARG PUID=2000\nARG PGID=2000\nARG MM_BINARY=\nARG MM_VERSION=5.36.0\n\n\n# Install some needed packages\nRUN apk add --no-cache \\\n\tca-certificates \\\n\tcurl \\\n\tjq \\\n\tlibc6-compat \\\n\tlibffi-dev \\\n\tlibcap \\\n\tlinux-headers \\\n\tmailcap \\\n\tnetcat-openbsd \\\n\txmlsec-dev \\\n\ttzdata \\\n\t&& rm -rf /tmp/*\n\n# Get Mattermost\nRUN mkdir -p /mattermost/data /mattermost/plugins /mattermost/client/plugins \\\n\t&& if [ ! -z \"$MM_BINARY\" ]; then \\\n\tcurl -f $MM_BINARY | tar -xvz; \\\n\t\telif [ \"$edition\" = \"team\" ] ; then \\\n\t\tcurl -f https://releases.mattermost.com/$MM_VERSION/mattermost-team-$MM_VERSION-linux-amd64.tar.gz?src=docker-app | tar -xvz; \\\n\t\telse curl -f https://releases.mattermost.com/$MM_VERSION/mattermost-$MM_VERSION-linux-amd64.tar.gz?src=docker-app | tar -xvz; fi \\\n\t&& cp /mattermost/config/config.json /config.json.save \\\n\t&& rm -rf /mattermost/config/config.json \\\n\t&& addgroup -g ${PGID} mattermost \\\n\t&& adduser -D -u ${PUID} -G mattermost -h /mattermost -D mattermost \\\n\t&& chown -R mattermost:mattermost /mattermost /config.json.save /mattermost/plugins /mattermost/client/plugins \\\n\t&& setcap cap_net_bind_service=+ep /mattermost/bin/mattermost\n\nUSER mattermost\n\n#Healthcheck to make sure container is ready\nHEALTHCHECK CMD curl --fail http://localhost:8000 || exit 1\n\n# Configure entrypoint and command\nCOPY entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\nWORKDIR /mattermost\nCMD [\"mattermost\"]\n\n# Expose port 8000 of the container\nEXPOSE 8000\n\n# Declare volumes for mount point directories\nVOLUME [\"/mattermost/data\", \"/mattermost/logs\", \"/mattermost/config\", \"/mattermost/plugins\", \"/mattermost/client/plugins\"]\n"
}