{
  "startTime": 1674255889324,
  "endTime": 1674255890035,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 5,
        "lineEnd": 6,
        "columnStart": 2,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The base image to install OS dependencies\nFROM golang:1.15.2-alpine AS base\n\nRUN apk update && \\\n  apk upgrade && \\\n  apk add --no-cache autoconf automake bash ca-certificates git gcc g++ libc6-compat libjpeg-turbo-dev \\\n  libpng-dev make nodejs nodejs-npm python upx vips && \\\n  rm -rf /var/cache/*\n\n# The intermediate image to build the binary\nFROM base AS builder\n\nWORKDIR /home/{{.projectName}}\nCOPY . .\n\nRUN go mod download\nRUN npm install && npm cache clean --force;\nRUN CGO_ENABLED=1 go run . build --static --platform=linux/amd64\n\n# The final image to run on production\nFROM alpine:3.12.0\n\nENV APP_HOME=/home/{{.projectName}}\nENV GROUP_NAME={{.projectName}}\nENV USER_NAME={{.projectName}}\nHEALTHCHECK CMD curl -f http://localhost:3000/health_check || exit 1\nWORKDIR ${APP_HOME}\n\nCOPY --from=builder /home/{{.projectName}}/{{.projectName}} ${APP_HOME}\n\nRUN apk update && apk upgrade && \\\n  apk add --no-cache chromium && \\\n  rm -rf /var/cache/apk/* /var/lib/apt/lists/* /var/cache/apk/* /usr/share/man /tmp/*\nRUN addgroup -S ${GROUP_NAME} && adduser -S ${GROUP_NAME} -G ${USER_NAME} && \\\n  chown -R ${GROUP_NAME}:${USER_NAME} ${APP_HOME}\n\nUSER ${USER_NAME}\nCMD [\"./{{.projectName}}\", \"serve\"]\n"
}