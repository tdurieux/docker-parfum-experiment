{
  "startTime": 1674216786031,
  "endTime": 1674216788314,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# A dockerfile for developing in the occlum-enable environment\n\nFROM ubuntu:18.04\nLABEL maintainer=\"div-labs@layerx.co.jp\"\n\nRUN apt update && DEBIAN_FRONTEND=\"noninteractive\" apt install -y --no-install-recommends \\\n        alien \\\n        astyle \\\n        autoconf \\\n        automake \\\n        bison \\\n        build-essential \\\n        ca-certificates \\\n        cmake \\\n        curl \\\n        debhelper \\\n        expect \\\n        g++ \\\n        gawk \\\n        gdb \\\n        git-core \\\n        golang-go \\\n        jq \\\n        kmod \\\n        lcov \\\n        libboost-system-dev \\\n        libboost-thread-dev \\\n        libcurl4-openssl-dev \\\n        libfuse-dev \\\n        libjsoncpp-dev \\\n        liblog4cpp5-dev \\\n        libprotobuf-c0-dev \\\n        libprotobuf-dev \\\n        libssl-dev \\\n        libtool \\\n        libxml2-dev \\\n        nano \\\n        ocaml \\\n        ocamlbuild \\\n        pkg-config \\\n        protobuf-compiler \\\n        python \\\n        python-pip \\\n        sudo \\\n        unzip \\\n        uuid-dev \\\n        vim \\\n        wget \\\n        zip \\\n        gnupg \\\n        aptitude \\\n        && \\\n    apt clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN echo \"ca_directory=/etc/ssl/certs\" >> /etc/wgetrc && \\\n    echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | tee /etc/apt/sources.list.d/intel-sgx.list &&\\\n    wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key --no-check-certificate | apt-key add -\n\n# Install cpuid tool for tests\nWORKDIR /tmp\nRUN wget https://www.etallen.com/cpuid/cpuid-20200211.x86_64.tar.gz && \\\n    tar -xf ./cpuid-20200211.x86_64.tar.gz && \\\n    cp ./cpuid-20200211/cpuid /usr/bin/ && \\\n    rm -rf /tmp/cpuid-20200211* && rm ./cpuid-20200211.x86_64.tar.gz\n\n# Install SGX PSW\nRUN apt update && aptitude install -y \\\n        libsgx-launch-dev=2.13.100.4-bionic1 \\\n        libsgx-epid-dev=2.13.100.4-bionic1 \\\n        libsgx-quote-ex-dev=2.13.100.4-bionic1 \\\n        libsgx-urts=2.13.100.4-bionic1 \\\n        libsgx-enclave-common=2.13.100.4-bionic1 \\\n        libsgx-uae-service=2.13.100.4-bionic1 \\\n        libsgx-ae-epid=2.13.100.4-bionic1 \\\n        libsgx-ae-le=2.13.100.4-bionic1 \\\n        libsgx-ae-pce=2.13.100.4-bionic1 \\\n        libsgx-aesm-launch-plugin=2.13.100.4-bionic1 \\\n        sgx-aesm-service=2.13.100.4-bionic1 \\\n        libsgx-aesm-launch-plugin=2.13.100.4-bionic1 \\\n        libsgx-aesm-pce-plugin=2.13.100.4-bionic1 \\\n        libsgx-aesm-ecdsa-plugin=2.13.100.4-bionic1 \\\n        libsgx-aesm-epid-plugin=2.13.100.4-bionic1 \\\n        libsgx-aesm-quote-ex-plugin=2.13.100.4-bionic1 \\\n        libsgx-dcap-quote-verify=1.10.100.4-bionic1 \\\n        libsgx-dcap-quote-verify-dev=1.10.100.4-bionic1 \\\n        libsgx-dcap-ql=1.10.100.4-bionic1 \\\n        libsgx-dcap-ql-dev=1.10.100.4-bionic1 \\\n        libsgx-epid=2.13.100.4-bionic1 \\\n        libsgx-quote-ex=2.13.100.4-bionic1 \\\n        libsgx-pce-logic=1.10.100.4-bionic1 \\\n        libsgx-qe3-logic=1.10.100.4-bionic1 \\\n        libsgx-launch=2.13.100.4-bionic1 \\\n        libsgx-dcap-default-qpl=1.10.100.4-bionic1 \\\n        && \\\n    apt clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libsgx_enclave_common.so.1 /usr/lib/x86_64-linux-gnu/libsgx_enclave_common.so\n\n# Install SGX SDK\nWORKDIR /tmp\nRUN git clone --depth 1 -b sgx_2.13_for_occlum https://github.com/occlum/linux-sgx && \\\n    mkdir /etc/init && \\\n    cd linux-sgx && \\\n    make preparation && \\\n    ./compile_and_install.sh no_mitigation USE_OPT_LIBS=2 && \\\n    echo 'source /opt/intel/sgxsdk/environment' >> /root/.bashrc && \\\n    rm -rf /tmp/linux-sgx\n\n# Install Rust\nENV PATH=\"/root/.cargo/bin:$PATH\"\nENV OCCLUM_RUST_VERSION=nightly-2020-09-08\nRUN curl https://sh.rustup.rs -sSf | \\\n        sh -s -- --default-toolchain ${OCCLUM_RUST_VERSION} -y && \\\n    rm -rf /root/.cargo/registry && rm -rf /root/.cargo/git && \\\n    cargo -V\n\n# Install Occlum toolchain (Rust)\nWORKDIR /root\nRUN git clone --depth 1 -b 0.22.0 https://github.com/occlum/occlum && \\\n    cd occlum/tools/toolchains && \\\n    ./musl-gcc/build.sh && \\\n    ./musl-gcc/install_zlib.sh && \\\n    ./glibc/build.sh && \\\n    ./rust/build.sh && \\\n    export PATH=\"/opt/occlum/build/bin:/usr/local/occlum/bin:/opt/occlum/toolchains/rust/bin:$PATH\" && \\\n    cd /root/occlum && \\\n    make submodule && \\\n    OCCLUM_RELEASE_BUILD=1 make && \\\n    make install && \\\n    rm -rf /root/occlum\n\nENV PATH=\"/opt/occlum/build/bin:/usr/local/occlum/bin:/opt/occlum/toolchains/rust/bin:$PATH\"\n\n# Download and Build OpenSSL 1.1.1 for musl\nWORKDIR /root/deps/musl\nRUN wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1f.tar.gz && \\\n    tar zxvf OpenSSL_1_1_1f.tar.gz && \\\n    cd openssl-OpenSSL_1_1_1f && \\\n    CC=\"occlum-gcc -fPIE -pie\" ./Configure no-shared no-async --prefix=/root/deps/musl --openssldir=/root/deps/musl/ssl --with-rand-seed=rdcpu linux-x86_64 && \\\n    make depend && \\\n    make -j$(nproc) && \\\n    make install && rm OpenSSL_1_1_1f.tar.gz\nENV PKG_CONFIG_ALLOW_CROSS=1\nENV OPENSSL_STATIC=true\nENV OPENSSL_DIR=/root/deps/musl\n\nWORKDIR /root\n"
}