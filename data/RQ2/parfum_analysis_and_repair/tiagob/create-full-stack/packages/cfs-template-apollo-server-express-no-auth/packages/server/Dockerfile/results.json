{
  "startTime": 1674249750814,
  "endTime": 1674249751314,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Run with a build context at the root of the project\n# docker build -f packages/server/Dockerfile .\n# Use a multi-stage build to reduce the final image size\n# ~1GB -> ~400MB\n# https://docs.docker.com/develop/develop-images/multistage-build/\nFROM node:12-alpine as build\n\nWORKDIR /usr/src/app\n\nCOPY package.json .\nCOPY yarn.lock .\nCOPY tsconfig.json .\nCOPY ./packages/server ./packages/server\n\nRUN yarn install --pure-lockfile --non-interactive && yarn cache clean;\n\nRUN yarn --cwd packages/server build\n\nFROM node:12-alpine\n\nWORKDIR /usr/src/app\n\nCOPY package.json .\nCOPY yarn.lock .\nCOPY tsconfig.json .\nCOPY packages/server/package.json packages/server/\nCOPY packages/server/ormconfig.js packages/server/\nCOPY packages/server/.env* packages/server/\n\nCOPY --from=build /usr/src/app/packages/server/build /usr/src/app/packages/server/build\n\nENV NODE_ENV production\n\nRUN yarn install --pure-lockfile --non-interactive --production && yarn cache clean;\n\nWORKDIR /usr/src/app/packages/server\n\nEXPOSE 8080\nCMD [\"yarn\", \"start-production\"]\n"
}