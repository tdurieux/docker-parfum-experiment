diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/pkmx/rust/src/ci/docker/disabled/aarch64-gnu/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/pkmx/rust/src/ci/docker/disabled/aarch64-gnu/Dockerfile/repaired.Dockerfile
index fedb409..409f9ac 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/pkmx/rust/src/ci/docker/disabled/aarch64-gnu/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/pkmx/rust/src/ci/docker/disabled/aarch64-gnu/Dockerfile/repaired.Dockerfile
@@ -16,7 +16,7 @@ RUN apt-get update -y && apt-get install -y --no-install-recommends \
       make \
       python2.7 \
       qemu-system-aarch64 \
-      xz-utils
+      xz-utils && rm -rf /var/lib/apt/lists/*;
 
 ENV ARCH=arm64 \
     CROSS_COMPILE=aarch64-linux-gnu-
@@ -32,19 +32,19 @@ WORKDIR /build
 # the kernel. This file was generated by running `make defconfig`
 # followed by `make menuconfig` and then enabling the IPv6 protocol page.
 COPY aarch64-gnu/config /build/.config
-RUN curl https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \
+RUN curl -f https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \
       tar xJf - && \
       cd /build/linux-4.4.42 && \
       cp /build/.config . && \
       make -j$(nproc) all && \
       cp arch/arm64/boot/Image /tmp && \
-      cd /build &&  \
+      cd /build && \
       rm -rf linux-4.4.42
 
 # Compile an instance of busybox as this provides a lightweight system and init
 # binary which we will boot into. Only trick here is configuring busybox to
 # build static binaries.
-RUN curl https://www.busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar xjf - && \
+RUN curl -f https://www.busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar xjf - && \
       cd busybox-1.21.1 && \
       make defconfig && \
       sed -i 's/.*CONFIG_STATIC.*/CONFIG_STATIC=y/' .config && \
@@ -57,7 +57,7 @@ RUN curl https://www.busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar xjf - &&
 # Download the ubuntu rootfs, which we'll use as a chroot for all our tests.
 WORKDIR /tmp
 RUN mkdir rootfs/ubuntu
-RUN curl http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-base-16.04-core-arm64.tar.gz | \
+RUN curl -f https://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-base-16.04-core-arm64.tar.gz | \
       tar xzf - -C rootfs/ubuntu && \
       cd rootfs && mkdir proc sys dev etc etc/init.d