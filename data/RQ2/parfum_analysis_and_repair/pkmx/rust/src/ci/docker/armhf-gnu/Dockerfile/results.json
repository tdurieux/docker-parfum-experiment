{
  "startTime": 1674253813930,
  "endTime": 1674253814979,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 18,
        "columnStart": 25,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN apt-get update -y && apt-get install -y --no-install-recommends \\\n      bc \\\n      bzip2 \\\n      ca-certificates \\\n      cmake \\\n      cpio \\\n      curl \\\n      file \\\n      g++ \\\n      gcc-arm-linux-gnueabihf \\\n      git \\\n      libc6-dev \\\n      libc6-dev-armhf-cross \\\n      make \\\n      python2.7 \\\n      qemu-system-arm \\\n      xz-utils && rm -rf /var/lib/apt/lists/*;\n\nENV ARCH=arm \\\n    CROSS_COMPILE=arm-linux-gnueabihf-\n\nWORKDIR /build\n\n# Compile the kernel that we're going to run and be emulating with. This is\n# basically just done to be compatible with the QEMU target that we're going\n# to be using when running tests. If any other kernel works or if any\n# other QEMU target works with some other stock kernel, we can use that too!\n#\n# The `vexpress_config` config file was a previously generated config file for\n# the kernel. This file was generated by running `make vexpress_defconfig`\n# followed by `make menuconfig` and then enabling the IPv6 protocol page.\nCOPY armhf-gnu/vexpress_config /build/.config\nRUN curl -f https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \\\n      tar xJf - && \\\n      cd /build/linux-4.4.42 && \\\n      cp /build/.config . && \\\n      make -j$(nproc) all && \\\n      cp arch/arm/boot/zImage /tmp && \\\n      cd /build && \\\n      rm -rf linux-4.4.42\n\n# Compile an instance of busybox as this provides a lightweight system and init\n# binary which we will boot into. Only trick here is configuring busybox to\n# build static binaries.\nRUN curl -f https://www.busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar xjf - && \\\n      cd busybox-1.21.1 && \\\n      make defconfig && \\\n      sed -i 's/.*CONFIG_STATIC.*/CONFIG_STATIC=y/' .config && \\\n      make -j$(nproc) && \\\n      make install && \\\n      mv _install /tmp/rootfs && \\\n      cd /build && \\\n      rm -rf busybox-1.12.1\n\n# Download the ubuntu rootfs, which we'll use as a chroot for all our tests.\nWORKDIR /tmp\nRUN mkdir rootfs/ubuntu\nRUN curl -f https://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-base-16.04-core-armhf.tar.gz | \\\n      tar xzf - -C rootfs/ubuntu && \\\n      cd rootfs && mkdir proc sys dev etc etc/init.d\n\n# Copy over our init script, which starts up our test server and also a few\n# other misc tasks.\nCOPY scripts/qemu-bare-bones-rcS rootfs/etc/init.d/rcS\nRUN chmod +x rootfs/etc/init.d/rcS\n\n# Helper to quickly fill the entropy pool in the kernel.\nCOPY scripts/qemu-bare-bones-addentropy.c /tmp/addentropy.c\nRUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n\n# TODO: What is this?!\nRUN curl -f -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/current/images/device-tree/vexpress-v2p-ca15-tc1.dtb\n\nCOPY scripts/sccache.sh /scripts/\nRUN sh /scripts/sccache.sh\n\nENV RUST_CONFIGURE_ARGS \\\n      --target=arm-unknown-linux-gnueabihf \\\n      --qemu-armhf-rootfs=/tmp/rootfs\nENV SCRIPT python2.7 ../x.py test --target arm-unknown-linux-gnueabihf\n\nENV NO_CHANGE_USER=1\n"
}