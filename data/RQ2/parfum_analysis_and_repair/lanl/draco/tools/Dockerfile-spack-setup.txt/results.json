{
  "startTime": 1674253004302,
  "endTime": 1674253005178,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 6,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -*-Dockerfile-*-\nFROM kinetictheory/draco-ci-2020nov:codecov\n\n# Use ubuntu if building from scratch\n# FROM ubuntu:20.04\n\n# This image:\n# 1. cd /D c:\\work\\docker (copy Dockerfile and packages.yaml to this location).\n# 2. docker login -u kinetictheory (and password) # ref https://docs.docker.com/get-started/part2/\n# 3. docker build -f Dockerfile-spack-setup.txt --rm --pull --tag draco-ci-2020nov:spack-setup .\n# 4. docker image ls -a ==> find container name (or docker ps)\n# 5. docker run -it -v /c/work:/work <image hash> /bin/bash -l\n# 6. docker commit -m \"added sphinx and mscgen\"  nice_chatterjee kinetictheory/draco-ci-2020nov:spack-setup # queues for upload\n# 7. docker push kinetictheory/draco-ci-2020nov:spack-setup\n# 8. docker system prune -a (remove old dangling data)\n\n# See draco/.travis-run-tests.sh for some instructions.\n\n## Environment needed by 'docker build' ----------------------------------------\n\n## for apt to be noninteractive\n## https://stackoverflow.com/questions/8671308/non-interactive-method-for-dpkg-reconfigure-tzdata\n## https://spack.readthedocs.io/en/latest/workflows.html?highlight=docker\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\nENV SPACK_ROOT=/vendors/spack\nENV DRACO_TPL=\"cmake numdiff random123 mscgen lcov doxygen eospac@6.4.0\"\nENV DRACO_GCC_TPL=\"gsl openmpi openblas metis parmetis libquo caliper\"\nENV DRACO_LLVM_TPL=\"gsl openmpi openblas metis parmetis libquo caliper\"\nENV FORCE_UNSAFE_CONFIGURE=1\nENV DISTRO=focal\nENV CLANG_FORMAT_VER=10.0\nENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1\n\n## SPACK -----------------------------------------------------------------------------\n\n# install/setup spack. Only download spack if it doesn't already exist.\nRUN mkdir -p $SPACK_ROOT/etc/spack/linux\nRUN if ! test -d $SPACK_ROOT/opt/spack ; then \\\n      curl -f -s -L https://api.github.com/repos/spack/spack/tarball | tar xzC $SPACK_ROOT --strip 1; \\\n    fi\n\n# metis/parmetis downloads are broken right now, use a mirror.\n#COPY mirrors.yaml $SPACK_ROOT/etc/spack\nCOPY modules.yaml $SPACK_ROOT/etc/spack\n#RUN mkdir -p $SPACK_ROOT/spack.mirror/metis\n#RUN mkdir -p $SPACK_ROOT/spack.mirror/parmetis\n#COPY metis-5.1.0.tar.gz $SPACK_ROOT/spack.mirror/metis\n#COPY parmetis-4.0.3.tar.gz $SPACK_ROOT/spack.mirror/parmetis\n\nRUN if ! test -f /etc/profile.d/spack.sh; then \\\n      echo \"source $SPACK_ROOT/share/spack/setup-env.sh\" > /etc/profile.d/spack.sh; \\\n    fi\nRUN . \"$SPACK_ROOT/share/spack/setup-env.sh\" && spack compiler add\nRUN . \"$SPACK_ROOT/share/spack/setup-env.sh\" && spack external find\n\nRUN . \"$SPACK_ROOT/share/spack/setup-env.sh\" && \\\n    if test $(spack find lmod | grep -c lmod) -lt 2 ; then \\\n      spack install lmod; \\\n      echo \"source `spack location -i lmod`/lmod/lmod/init/bash\" >> /etc/profile.d/spack.sh; \\\n      core_loc=$(/usr/bin/ls -d $SPACK_ROOT/share/spack/lmod/*/Core); \\\n      echo \"module use ${core_loc}\" >> /etc/profile.d/spack.sh; \\\n      spack clean -a; \\\n    fi\n\n# image run hook: the -l will make sure /etc/profile.d/*.sh environments are loaded\nCMD /bin/bash -l\n"
}