{
  "startTime": 1674246796631,
  "endTime": 1674246802149,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 316,
        "lineEnd": 327,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 329,
        "lineEnd": 330,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 332,
        "lineEnd": 333,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 212,
        "lineEnd": 212,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 227,
        "lineEnd": 227,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 313,
        "lineEnd": 313,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 632,
        "lineEnd": 632,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 476,
        "lineEnd": 476,
        "columnStart": 4,
        "columnEnd": 148
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 491,
        "lineEnd": 491,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 87,
        "lineEnd": 95,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 300,
        "lineEnd": 301,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 356,
        "lineEnd": 366,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 369,
        "lineEnd": 371,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 402,
        "lineEnd": 410,
        "columnStart": 22,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 440,
        "lineEnd": 465,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 476,
        "lineEnd": 476,
        "columnStart": 4,
        "columnEnd": 148
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 491,
        "lineEnd": 491,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 609,
        "lineEnd": 612,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 645,
        "lineEnd": 649,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 683,
        "lineEnd": 685,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 740,
        "lineEnd": 758,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 762,
        "lineEnd": 769,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 783,
        "lineEnd": 786,
        "columnStart": 22,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 809,
        "lineEnd": 817,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 476,
        "lineEnd": 476,
        "columnStart": 4,
        "columnEnd": 148
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 491,
        "lineEnd": 491,
        "columnStart": 4,
        "columnEnd": 75
      }
    }
  ],
  "repairedDockerfile": "# Copyright Istio Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This is used to build Istio's primary build container, which contains all the tools\n# necessary to perform and all build activities in all Istio repos.\n#\n# The container is built using different contexts, one per execution environment (plain binaries, Ruby, nodejs), and\n# then combined into the final image.\n#\n# We pin versions of stuff we install. Modify the various XXX_VERSION variables within the individual build contexts\n# in order to control these versions.\n\n################\n# Binary tools\n################\nARG GOLANG_IMAGE=golang:1.18.4\n# hadolint ignore=DL3006\nFROM ${GOLANG_IMAGE} as binary_tools_context\n# TARGETARCH is an automatic platform ARG enabled by Docker BuildKit.\nARG TARGETARCH\n\n# Istio tools SHA that we use for this image\nARG ISTIO_TOOLS_SHA\n\n# Pinned versions of stuff we pull in\nENV BOM_VERSION=v0.2.2\nENV GCR_AUTH_VERSION=2.0.4\nENV GO_BINDATA_VERSION=v3.1.2\nENV GO_JUNIT_REPORT_VERSION=df0ed838addb0fa189c4d76ad4657f6007a5811c\nENV GOCOVMERGE_VERSION=b5bfa59ec0adc420475f97f89b58045c721d761c\nENV GOIMPORTS_VERSION=v0.1.0\nENV BENCHSTAT_VERSION=9c9101da8316\nENV GH_VERSION=2.14.1\nENV GOLANG_PROTOBUF_VERSION=v1.28.0\nENV GOLANG_GRPC_PROTOBUF_VERSION=v1.2.0\n# When updating the golangci version, you may want to update the common-files config/.golangci* files as well.\nENV GOLANGCI_LINT_VERSION=v1.46.1\nENV HADOLINT_VERSION=v2.10.0\nENV HELM3_VERSION=v3.9.0\nENV HUGO_VERSION=0.97.3\nENV JB_VERSION=v0.3.1\nENV JSONNET_VERSION=v0.15.0\nENV JUNIT_MERGER_VERSION=adf1545b49509db1f83c49d1de90bbcb235642a8\nENV K8S_CODE_GENERATOR_VERSION=1.24.1\nENV K8S_TEST_INFRA_VERSION=2acdc6800510dd422bfd2a5d8c02aedc19d15f8d\nENV KIND_VERSION=v0.14.0\nENV KUBECTL_VERSION=1.24.2\nENV PROTOC_GEN_GRPC_GATEWAY_VERSION=v1.8.6\nENV PROTOC_GEN_SWAGGER_VERSION=v1.8.6\nENV PROTOC_GEN_VALIDATE_VERSION=v0.6.7\nENV PROTOC_VERSION=21.2\nENV PROTOLOCK_VERSION=v0.14.0\nENV PROTOTOOL_VERSION=v1.10.0\nENV SHELLCHECK_VERSION=v0.8.0\nENV SU_EXEC_VERSION=0.2\nENV UPX_VERSION=3.96\nENV YQ_VERSION=4.25.3\nENV KPT_VERSION=v0.39.3\nENV BUF_VERSION=v1.5.0\nENV GCLOUD_VERSION=377.0.0\nENV KUBETEST2_VERSION=b019714a389563c9a788f119f801520d059b6533\nENV COSIGN_VERSION=v1.9.0\nENV CRANE_VERSION=v0.10.0\n\nENV GO111MODULE=on\nENV GOPROXY=https://proxy.golang.org\n\nWORKDIR /tmp\nENV GOPATH=/tmp/go\n\nENV OUTDIR=/out\nRUN mkdir -p ${OUTDIR}/usr/bin\nRUN mkdir -p ${OUTDIR}/usr/local\n\n# Update distro and install dependencies\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    unzip \\\n    xz-utils && rm -rf /var/lib/apt/lists/*;\n\n# Install protoc\nRUN set -eux; \\\n    \\\n    case $(uname -m) in \\\n        x86_64) export PROTOC_ZIP=protoc-${PROTOC_VERSION}-linux-x86_64.zip;; \\\n        aarch64) export PROTOC_ZIP=protoc-${PROTOC_VERSION}-linux-aarch_64.zip;; \\\n        *) echo \"unsupported architecture\"; exit 1 ;; \\\n    esac; \\\n    \\\n    wget -nv -O \"/tmp/${PROTOC_ZIP}\" \"https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/${PROTOC_ZIP}\"; \\\n    unzip \"/tmp/${PROTOC_ZIP}\"; \\\n    mv /tmp/bin/protoc ${OUTDIR}/usr/bin; \\\n    chmod +x ${OUTDIR}/usr/bin/protoc\n\n# Install gh\nADD https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_linux_${TARGETARCH}.deb /tmp/\nRUN dpkg -i /tmp/gh_${GH_VERSION}_linux_${TARGETARCH}.deb\nRUN mv /usr/bin/gh ${OUTDIR}/usr/bin\n\n# Build and install a bunch of Go tools\nRUN go install -ldflags=\"-s -w\" google.golang.org/protobuf/cmd/protoc-gen-go@${GOLANG_PROTOBUF_VERSION}\nRUN go install -ldflags=\"-s -w\" google.golang.org/grpc/cmd/protoc-gen-go-grpc@${GOLANG_GRPC_PROTOBUF_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/uber/prototool/cmd/prototool@${PROTOTOOL_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/nilslice/protolock/cmd/protolock@${PROTOLOCK_VERSION}\nRUN go install -ldflags=\"-s -w\" golang.org/x/tools/cmd/goimports@${GOIMPORTS_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/golangci/golangci-lint/cmd/golangci-lint@${GOLANGCI_LINT_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/go-bindata/go-bindata/go-bindata@${GO_BINDATA_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/envoyproxy/protoc-gen-validate@${PROTOC_GEN_VALIDATE_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@${PROTOC_GEN_GRPC_GATEWAY_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/google/go-jsonnet/cmd/jsonnet@${JSONNET_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@${JB_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@${PROTOC_GEN_SWAGGER_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/istio/go-junit-report@${GO_JUNIT_REPORT_VERSION}\nRUN go install -ldflags=\"-s -w\" sigs.k8s.io/bom/cmd/bom@${BOM_VERSION}\nRUN go install -ldflags=\"-s -w\" sigs.k8s.io/kind@${KIND_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/wadey/gocovmerge@${GOCOVMERGE_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/imsky/junit-merger/src/junit-merger@${JUNIT_MERGER_VERSION}\nRUN go install -ldflags=\"-s -w\" golang.org/x/perf/cmd/benchstat@${BENCHSTAT_VERSION}\nRUN go install -ldflags=\"-s -w\" github.com/google/go-containerregistry/cmd/crane@${CRANE_VERSION}\n\n# Install latest version of Istio-owned tools in this release\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/protoc-gen-docs@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/annotations_prep@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/cue-gen@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/envvarlinter@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/testlinter@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/protoc-gen-golang-deepcopy@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/protoc-gen-golang-jsonshim@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/kubetype-gen@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/license-lint@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" istio.io/tools/cmd/gen-release-notes@${ISTIO_TOOLS_SHA}\nRUN go install -ldflags=\"-s -w\" k8s.io/code-generator/cmd/applyconfiguration-gen@kubernetes-${K8S_CODE_GENERATOR_VERSION}\nRUN go install -ldflags=\"-s -w\" k8s.io/code-generator/cmd/defaulter-gen@kubernetes-${K8S_CODE_GENERATOR_VERSION}\nRUN go install -ldflags=\"-s -w\" k8s.io/code-generator/cmd/client-gen@kubernetes-${K8S_CODE_GENERATOR_VERSION}\nRUN go install -ldflags=\"-s -w\" k8s.io/code-generator/cmd/lister-gen@kubernetes-${K8S_CODE_GENERATOR_VERSION}\nRUN go install -ldflags=\"-s -w\" k8s.io/code-generator/cmd/informer-gen@kubernetes-${K8S_CODE_GENERATOR_VERSION}\nRUN go install -ldflags=\"-s -w\" k8s.io/code-generator/cmd/deepcopy-gen@kubernetes-${K8S_CODE_GENERATOR_VERSION}\nRUN go install -ldflags=\"-s -w\" k8s.io/code-generator/cmd/go-to-protobuf@kubernetes-${K8S_CODE_GENERATOR_VERSION}\n\n# Install istio/test-infra tools\nRUN go install sigs.k8s.io/kubetest2@${KUBETEST2_VERSION}\nRUN go install sigs.k8s.io/kubetest2/kubetest2-gke@${KUBETEST2_VERSION}\nRUN go install sigs.k8s.io/kubetest2/kubetest2-tester-exec@${KUBETEST2_VERSION}\n\n# Go doesn't like the `replace` directives; need to do manual cloning now.\n# Should be fixed by https://github.com/kubernetes/test-infra/issues/20421\n# hadolint ignore=DL3003\nRUN git clone https://github.com/kubernetes/test-infra --branch master --single-branch && \\\n  cd test-infra && \\\n  git checkout \"${K8S_TEST_INFRA_VERSION}\" && \\\n  go install ./robots/pr-creator && \\\n  go install ./prow/cmd/peribolos && \\\n  go install ./pkg/benchmarkjunit && \\\n  cd .. && rm -rf test-infra\n\n\n# Compress the Go tools and put them in their final location\nADD https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-${TARGETARCH}_linux.tar.xz /tmp\nRUN tar -xJf upx-${UPX_VERSION}-${TARGETARCH}_linux.tar.xz -C /tmp && rm upx-${UPX_VERSION}-${TARGETARCH}_linux.tar.xz\nRUN mv /tmp/upx-${UPX_VERSION}-${TARGETARCH}_linux/upx /usr/bin\nRUN upx --lzma /tmp/go/bin/*\nRUN mv /tmp/go/bin/* ${OUTDIR}/usr/bin\n\n# Add gen-release-notes templates to filesystem\nRUN mkdir -p ${OUTDIR}/usr/share/gen-release-notes\nADD https://raw.githubusercontent.com/istio/tools/master/cmd/gen-release-notes/templates/minorReleaseNotes.md ${OUTDIR}/usr/share/gen-release-notes\nADD https://raw.githubusercontent.com/istio/tools/master/cmd/gen-release-notes/templates/releaseNotes.md ${OUTDIR}/usr/share/gen-release-notes\nADD https://raw.githubusercontent.com/istio/tools/master/cmd/gen-release-notes/templates/upgradeNotes.md ${OUTDIR}/usr/share/gen-release-notes\nRUN chmod -R 555 ${OUTDIR}/usr/share/gen-release-notes\n\n# ShellCheck linter\nRUN wget -nv -O \"/tmp/shellcheck-${SHELLCHECK_VERSION}.linux.$(uname -m).tar.xz\" \"https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION}/shellcheck-${SHELLCHECK_VERSION}.linux.$(uname -m).tar.xz\"\nRUN tar -xJf \"/tmp/shellcheck-${SHELLCHECK_VERSION}.linux.$(uname -m).tar.xz\" -C /tmp && rm \"/tmp/shellcheck-${SHELLCHECK_VERSION}.linux.$( uname -m).tar.xz\"\nRUN mv /tmp/shellcheck-${SHELLCHECK_VERSION}/shellcheck ${OUTDIR}/usr/bin\n\n# Hadolint linter\nADD https://github.com/hadolint/hadolint/releases/download/${HADOLINT_VERSION}/hadolint-Linux-x86_64 ${OUTDIR}/usr/bin/hadolint\nRUN chmod 555 ${OUTDIR}/usr/bin/hadolint\n\n# Hugo static site generator\nRUN set -eux; \\\n    \\\n    case $(uname -m) in \\\n        x86_64) export HUGO_TAR=hugo_${HUGO_VERSION}_Linux-64bit.tar.gz;; \\\n        aarch64) export HUGO_TAR=hugo_${HUGO_VERSION}_Linux-ARM64.tar.gz;; \\\n        *) echo \"unsupported architecture\"; exit 1 ;; \\\n    esac; \\\n    \\\n    wget -nv -O /tmp/${HUGO_TAR} https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/${HUGO_TAR}; \\\n    tar -xzvf /tmp/${HUGO_TAR} -C /tmp; \\\n    mv /tmp/hugo ${OUTDIR}/usr/bin\n\n# Helm version 3\nADD https://get.helm.sh/helm-${HELM3_VERSION}-linux-${TARGETARCH}.tar.gz /tmp\nRUN mkdir /tmp/helm3\nRUN tar -xf /tmp/helm-${HELM3_VERSION}-linux-${TARGETARCH}.tar.gz -C /tmp/helm3 && rm /tmp/helm-${HELM3_VERSION}-linux-${TARGETARCH}.tar.gz\nRUN mv /tmp/helm3/linux-${TARGETARCH}/helm ${OUTDIR}/usr/bin/helm3\nRUN ln ${OUTDIR}/usr/bin/helm3 ${OUTDIR}/usr/bin/helm\n\n# yq doesn't support go modules, so install the binary instead\nADD https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_${TARGETARCH} /tmp\nRUN mv /tmp/yq_linux_${TARGETARCH} ${OUTDIR}/usr/bin/yq\nRUN chmod 555 ${OUTDIR}/usr/bin/yq\n\n# Kubectl\nADD https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/${TARGETARCH}/kubectl ${OUTDIR}/usr/bin/kubectl\nRUN chmod 555 ${OUTDIR}/usr/bin/kubectl\n\n# GCR docker credential helper\nADD https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${GCR_AUTH_VERSION}/docker-credential-gcr_linux_${TARGETARCH}-${GCR_AUTH_VERSION}.tar.gz /tmp\nRUN tar -xzf /tmp/docker-credential-gcr_linux_${TARGETARCH}-${GCR_AUTH_VERSION}.tar.gz -C /tmp && rm /tmp/docker-credential-gcr_linux_${TARGETARCH}-${GCR_AUTH_VERSION}.tar.gz\nRUN mv /tmp/docker-credential-gcr ${OUTDIR}/usr/bin\n\nRUN wget -nv -O \"${OUTDIR}/usr/bin/buf\" \"https://github.com/bufbuild/buf/releases/download/${BUF_VERSION}/buf-Linux-$(uname -m)\" && \\\n    chmod 555 \"${OUTDIR}/usr/bin/buf\"\n\n# Install su-exec which is a tool that operates like sudo without the overhead\nADD https://github.com/ncopa/su-exec/archive/v${SU_EXEC_VERSION}.tar.gz /tmp\nRUN tar -xzvf v${SU_EXEC_VERSION}.tar.gz && rm v${SU_EXEC_VERSION}.tar.gz\nWORKDIR /tmp/su-exec-${SU_EXEC_VERSION}\nRUN make\nRUN cp -a su-exec ${OUTDIR}/usr/bin\n\nADD https://github.com/GoogleContainerTools/kpt/releases/download/${KPT_VERSION}/kpt_linux_${TARGETARCH} ${OUTDIR}/usr/bin/kpt\nRUN chmod 555 ${OUTDIR}/usr/bin/kpt\n\n# Install gcloud command line tool\n# Install gcloud beta component\nRUN set -eux; \\\n    \\\n    case $(uname -m) in \\\n        x86_64)  export GCLOUD_TAR_FILE=\"google-cloud-sdk-${GCLOUD_VERSION}-linux-x86_64.tar.gz\" ;; \\\n        aarch64) export GCLOUD_TAR_FILE=\"google-cloud-sdk-${GCLOUD_VERSION}-linux-arm.tar.gz\" ;; \\\n        *) echo \"unsupported architecture\"; exit 1 ;; \\\n    esac; \\\n    \\\n    wget -nv \"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/${GCLOUD_TAR_FILE}\"; \\\n    tar -xzvf .\"/${GCLOUD_TAR_FILE}\" -C \"${OUTDIR}/usr/local\" && rm \"${GCLOUD_TAR_FILE}\"; \\\n    ${OUTDIR}/usr/local/google-cloud-sdk/bin/gcloud components install beta --quiet; \\\n    ${OUTDIR}/usr/local/google-cloud-sdk/bin/gcloud components install alpha --quiet; \\\n    rm -rf ${OUTDIR}/usr/local/google-cloud-sdk/.install/.backup \\\n    rm -rf ${OUTDIR}/usr/local/google-cloud-sdk/bin/anthoscli\n\n# Install cosign (for signing build artifacts) and verify signature\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN set -eux; \\\n    ${OUTDIR}/usr/local/google-cloud-sdk/bin/gsutil -q cp gs://cosign-releases/${COSIGN_VERSION}/cosign-linux-${TARGETARCH} /tmp/cosign \\\n    && ${OUTDIR}/usr/local/google-cloud-sdk/bin/gsutil -q cat gs://cosign-releases/${COSIGN_VERSION}/cosign-linux-${TARGETARCH}.sig | base64 -d > /tmp/cosign.sig \\\n    && wget -nv -O /tmp/cosign-pubkey https://raw.githubusercontent.com/sigstore/cosign/main/release/release-cosign.pub \\\n    && openssl dgst -sha256 -verify /tmp/cosign-pubkey -signature /tmp/cosign.sig /tmp/cosign \\\n    && chmod +x /tmp/cosign \\\n    && mv /tmp/cosign ${OUTDIR}/usr/bin/ || exit 1\n\n# Cleanup stuff we don't need in the final image\nRUN rm -fr /usr/local/go/doc\nRUN rm -fr /usr/local/go/test\nRUN rm -fr /usr/local/go/api\nRUN rm -fr /usr/local/go/bin/godoc\nRUN rm -fr /usr/local/go/bin/gofmt\n\n#############\n# Node.js\n#############\nFROM ubuntu:jammy as nodejs_tools_context\n\nWORKDIR /node\n\n# Pinned versions of stuff we pull in\nENV BABEL_CLI_VERSION=v7.17.10\nENV BABEL_CORE_VERSION=v7.18.2\nENV BABEL_POLYFILL_VERSION=v7.12.1\nENV BABEL_PRESET_ENV=v7.18.2\nENV BABEL_PRESET_MINIFY_VERSION=v0.5.2\nENV LINKINATOR_VERSION=v2.0.5\nENV MARKDOWN_SPELLCHECK_VERSION=v1.3.1\nENV NODEJS_VERSION=18.2.0\nENV SASS_LINT_VERSION=v1.13.1\nENV SASS_VERSION=v1.52.1\nENV SVGO_VERSION=v1.3.2\nENV SVGSTORE_CLI_VERSION=v1.3.2\nENV TSLINT_VERSION=v6.1.3\nENV TYPESCRIPT_VERSION=v4.7.2\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    wget ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nRUN set -eux; \\\n    case $(uname -m) in \\\n        x86_64) export NODEJS_TAR=node-v${NODEJS_VERSION}-linux-x64.tar.gz;; \\\n        aarch64) export NODEJS_TAR=node-v${NODEJS_VERSION}-linux-arm64.tar.gz;; \\\n        *) echo \"unsupported architecture\"; exit 1 ;; \\\n    esac; \\\n    wget -nv -O /tmp/${NODEJS_TAR} https://nodejs.org/download/release/v${NODEJS_VERSION}/${NODEJS_TAR}; \\\n    tar -xzf /tmp/${NODEJS_TAR} --strip-components=1 -C /usr/local\n\nADD https://nodejs.org/download/release/v${NODEJS_VERSION}/node-v${NODEJS_VERSION}-headers.tar.gz /tmp\nRUN tar -xzf /tmp/node-v${NODEJS_VERSION}-headers.tar.gz --strip-components=1 -C /usr/local && rm /tmp/node-v${NODEJS_VERSION}-headers.tar.gz\n\nRUN npm init -y\nRUN npm install --omit=dev --global \\\n    sass@\"${SASS_VERSION}\" \\\n    sass-lint@\"${SASS_LINT_VERSION}\" \\\n    typescript@\"${TYPESCRIPT_VERSION}\" \\\n    tslint@\"${TSLINT_VERSION}\" \\\n    markdown-spellcheck@\"${MARKDOWN_SPELLCHECK_VERSION}\" \\\n    svgstore-cli@\"${SVGSTORE_CLI_VERSION}\" \\\n    svgo@\"${SVGO_VERSION}\" \\\n    @babel/core@\"${BABEL_CORE_VERSION}\" \\\n    @babel/cli@\"${BABEL_CLI_VERSION}\" \\\n    @babel/preset-env@\"${BABEL_PRESET_ENV_VERSION}\" \\\n    linkinator@\"${LINKINATOR_VERSION}\" && npm cache clean --force;\n\nRUN npm install --omit=dev --save-dev \\\n    babel-preset-minify@${BABEL_PRESET_MINIFY_VERSION} && npm cache clean --force;\n\nRUN npm install --save-dev \\\n    @babel/polyfill@${BABEL_POLYFILL_VERSION} && npm cache clean --force;\n\n# Clean up stuff we don't need in the final image\nRUN rm -rf /usr/local/sbin\nRUN rm -rf /usr/local/share\n\n#############\n# Ruby\n#############\n\nFROM ubuntu:jammy as ruby_tools_context\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Pinned versions of stuff we pull in\nENV AWESOMEBOT_VERSION=1.20.0\n# Sometime between 1.14.1 and 1.14.2 to pull in some fixes for deb\nENV FPM_VERSION=eb5370d16e361db3f1425f8c898bafe7f3c66869\nENV HTMLPROOFER_VERSION=3.19.0\nENV LICENSEE_VERSION=9.15.1\nENV MDL_VERSION=0.11.0\n\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    gnupg2 \\\n    software-properties-common \\\n    build-essential \\\n    zlib1g-dev \\\n    cmake \\\n    pkg-config \\\n    libssl-dev \\\n    git && rm -rf /var/lib/apt/lists/*;\n\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ruby3.0 \\\n    ruby3.0-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install istio.io verification tools\nRUN gem install --no-wrappers --no-document mdl -v ${MDL_VERSION}\nRUN gem install --no-wrappers --no-document html-proofer -v ${HTMLPROOFER_VERSION}\nRUN gem install --no-wrappers --no-document awesome_bot -v ${AWESOMEBOT_VERSION}\nRUN gem install --no-wrappers --no-document licensee -v ${LICENSEE_VERSION}\n# hadolint ignore=DL3003,DL3028\nRUN git clone https://github.com/jordansissel/fpm && \\\n    cd fpm && \\\n    git reset --hard ${FPM_VERSION} && \\\n    make install\n\n##############\n# Python\n##############\n\nFROM ubuntu:jammy as python_context\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Pinned versions of stuff we pull in\nENV AUTOPEP8_VERSION=1.4.4\nENV YAMLLINT_VERSION=1.24.2\nENV PIP_INSTALL_VERSION=21.0.1\nENV REQUESTS_VERSION=2.22.0\nENV PYTHON_PROTOBUF_VERSION=3.11.2\nENV PYYAML_VERSION=5.3.1\nENV JWCRYPTO_VERSION=0.7\n\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    libc-dev \\\n    pkg-config \\\n    python3 \\\n    python3-distutils \\\n    python3-pip \\\n    python3-setuptools && rm -rf /var/lib/apt/lists/*;\n\n# Install Python stuff\nRUN python3 -m pip install --no-cache-dir --upgrade pip==${PIP_INSTALL_VERSION}\nRUN python3 -m pip install --no-cache-dir --no-binary :all: autopep8==${AUTOPEP8_VERSION}\nRUN python3 -m pip install --no-cache-dir yamllint==${YAMLLINT_VERSION}\nRUN python3 -m pip install --no-cache-dir requests==${REQUESTS_VERSION}\nRUN python3 -m pip install --no-cache-dir protobuf==${PYTHON_PROTOBUF_VERSION}\nRUN python3 -m pip install --no-cache-dir PyYAML==${PYYAML_VERSION}\nRUN python3 -m pip install --no-cache-dir jwcrypto==${JWCRYPTO_VERSION}\n\n#############\n# Base OS\n#############\n\nFROM ubuntu:jammy as base_os_context\n\nENV DEBIAN_FRONTEND=noninteractive\n\nENV DOCKER_VERSION=5:20.10.14~3-0~ubuntu-jammy\nENV CONTAINERD_VERSION=1.5.11-1\nENV TRIVY_VERSION=0.28.1\n\nENV OUTDIR=/out\n\n# required for binary tools: ca-certificates, gcc, libc-dev, git, iptables, libltdl7, less\n# required for general build: make, wget, curl, ssh, rpm\n# required for ruby: libcurl4-openssl-dev\n# required for python: python3, pkg-config\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common \\\n    ca-certificates \\\n    gcc \\\n    git \\\n    ssh \\\n    iptables \\\n    libltdl7 \\\n    libc-dev \\\n    libcurl4-openssl-dev \\\n    less \\\n    make \\\n    pkg-config \\\n    python3 \\\n    python3-setuptools \\\n    daemon \\\n    wget \\\n    rpm \\\n    jq \\\n    gettext-base \\\n    locales-all \\\n    file && rm -rf /var/lib/apt/lists/*;\n\n# Fix Docker issue\nRUN update-alternatives --set iptables /usr/sbin/iptables-legacy && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy\n\n# Docker including docker-ce, docker-ce-cli, and containerd.io\nADD https://download.docker.com/linux/ubuntu/gpg /tmp/docker-key\nRUN apt-key add /tmp/docker-key\nARG TARGETARCH\nRUN add-apt-repository \"deb [arch=${TARGETARCH}] https://download.docker.com/linux/ubuntu $(lsb_release -sc) stable\"\nRUN apt-get update\nRUN apt-get -y install --no-install-recommends docker-ce=\"${DOCKER_VERSION}\" docker-ce-cli=\"${DOCKER_VERSION}\" containerd.io=\"${CONTAINERD_VERSION}\" && rm -rf /var/lib/apt/lists/*;\n\n# Trivy container scanner\nRUN set -eux; \\\n\n    case $(uname -m) in \\\n        x86_64) \\\n            export TRVIY_DEB_NAME=\"trivy_${TRIVY_VERSION}_Linux-64bit.deb\"; \\\n            ;; \\\n        aarch64) \\\n            export TRVIY_DEB_NAME=\"trivy_${TRIVY_VERSION}_Linux-ARM64.deb\"; \\\n            ;; \\\n        *) echo \"unsupported architecture\"; exit 1 ;; \\\n    esac; \\\n    wget -nv -O \"/tmp/${TRVIY_DEB_NAME}\" \"https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/${TRVIY_DEB_NAME}\"; \\\n    apt-get -y install --no-install-recommends -f \"/tmp/${TRVIY_DEB_NAME}\"; rm -rf /var/lib/apt/lists/*; \\\n    rm \"/tmp/${TRVIY_DEB_NAME}\";\n\n# Clean up stuff we don't need in the final image\nRUN rm -rf /var/lib/apt/lists/*\nRUN rm -fr /usr/share/python\nRUN rm -fr /usr/share/bash-completion\nRUN rm -fr /usr/share/bug\nRUN rm -fr /usr/share/doc\nRUN rm -fr /usr/share/dh-python\nRUN rm -fr /usr/share/locale\nRUN rm -fr /usr/share/man\nRUN rm -fr /tmp/*\n\n# Run dockerd in CI\nCOPY prow-entrypoint.sh /usr/local/bin/entrypoint\nRUN chmod +x /usr/local/bin/entrypoint\n\n# Run config setup in local environments\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint\n\n##############\n# Final image\n##############\n\n# Prepare final output image\nFROM scratch as build_tools\n\n# Version from build arguments\nARG VERSION\n\n# Labels used by Docker\nLABEL \"io.istio.repo\"=\"https://github.com/istio/tools\"\nLABEL \"io.istio.version\"=\"${VERSION}\"\n\n# General\nENV HOME=/home\nENV LANG=C.UTF-8\n\n# Go support\nENV GO111MODULE=on\nENV GOPROXY=https://proxy.golang.org\nENV GOSUMDB=sum.golang.org\nENV GOROOT=/usr/local/go\nENV GOPATH=/go\nENV GOCACHE=/gocache\nENV GOBIN=/gobin\nENV PATH=/usr/local/go/bin:/gobin:/usr/local/google-cloud-sdk/bin:$PATH\n\n# Ruby support\nENV RUBYOPT=\"-KU -E utf-8:utf-8\"\n\n# Create the file system\nCOPY --from=base_os_context / /\nCOPY --from=binary_tools_context /out/ /\nCOPY --from=binary_tools_context /usr/local/go /usr/local/go\n\nCOPY --from=nodejs_tools_context /usr/local/bin /usr/local/bin\nCOPY --from=nodejs_tools_context /usr/local/lib/node_modules /usr/local/lib/node_modules\nCOPY --from=nodejs_tools_context /node/node_modules /node_modules\n\nCOPY --from=ruby_tools_context /usr/bin /usr/bin\nCOPY --from=ruby_tools_context /usr/lib /usr/lib\nCOPY --from=ruby_tools_context /etc/alternatives /etc/alternatives\nCOPY --from=ruby_tools_context /var/lib/gems /var/lib/gems\nCOPY --from=ruby_tools_context /usr/local/bin /usr/local/bin\n\nCOPY --from=python_context /usr/local/bin /usr/local/bin\nCOPY --from=python_context /usr/local/lib /usr/local/lib\n\n# su-exec is used in place of complex sudo setup operations\nRUN chmod u+sx /usr/bin/su-exec\n\nCOPY bashrc /home/.bashrc\n\n# mountpoints are mandatory for any host mounts.\n# mountpoints in /config are special.\nRUN mkdir -p /go && \\\n    mkdir -p /gocache && \\\n    mkdir -p /gobin && \\\n    mkdir -p /config/.docker && \\\n    mkdir -p /config/.config/gcloud && \\\n    mkdir -p /config/.kube && \\\n    mkdir -p /config-copy && \\\n    mkdir -p /home/.cache && \\\n    mkdir -p /home/.helm && \\\n    mkdir -p /home/.gsutil\n\n# TODO must sort out how to use uid mapping in docker so these don't need to be 777\n# They are created as root 755.  As a result they are not writeable, which fails in\n# the developer environment as a volume or bind mount inherits the permissions of\n# the directory mounted rather then overriding with the permission of the volume file.\nRUN chmod 777 /go && \\\n    chmod 777 /gocache && \\\n    chmod 777 /gobin && \\\n    chmod 777 /config && \\\n    chmod 777 /config/.docker && \\\n    chmod 777 /config/.config/gcloud && \\\n    chmod 777 /config/.kube && \\\n    chmod 777 /home/.cache && \\\n    chmod 777 /home/.helm && \\\n    chmod 777 /home/.gsutil\n\nWORKDIR /\n\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint\"]\n\n\n##############\n# Clang+LLVM\n##############\n\nFROM ubuntu:xenial AS clang_context_amd64\nFROM ubuntu:bionic AS clang_context_arm64\n# hadolint ignore=DL3006\nFROM clang_context_${TARGETARCH} AS clang_context\n\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    xz-utils \\\n    wget \\\n    ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n# 12.0.1 is the version support ubuntu:xenial & aarch64\nENV LLVM_VERSION=12.0.1\nENV LLVM_BASE_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}\nENV LLVM_DIRECTORY=/usr/lib/llvm\n\nRUN set -eux; \\\n\n    case $(uname -m) in \\\n        x86_64) \\\n               export LLVM_ARCHIVE=clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu- \\\n               export LLVM_ARTIFACT=clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-16.04;; \\\n        aarch64)  \\\n               export LLVM_ARCHIVE=clang+llvm-${LLVM_VERSION}-aarch64-linux-gnu \\\n               export LLVM_ARTIFACT=clang+llvm-${LLVM_VERSION}-aarch64-linux-gnu;; \\\n        *) echo \"unsupported architecture\"; exit 1 ;; \\\n    esac; \\\n\n    wget -nv ${LLVM_BASE_URL}/${LLVM_ARTIFACT}.tar.xz; \\\n    tar -xJf ${LLVM_ARTIFACT}.tar.xz -C /tmp; rm ${LLVM_ARTIFACT}.tar.xz \\\n    mkdir -p ${LLVM_DIRECTORY}; \\\n    mv /tmp/${LLVM_ARCHIVE}/* ${LLVM_DIRECTORY}/\n\n###########\n# GN\n###########\n\nFROM debian:buster AS gn_context\n\nRUN set -eux; \\\n\n    apt-get update; \\\n    apt-get install -qqy --no-install-recommends \\\n        ca-certificates git \\\n        clang python ninja-build \\\n        libclang-dev libc++-dev \\\n        ; rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /tmp\nRUN git clone https://gn.googlesource.com/gn;\n\nWORKDIR /tmp/gn\n\nRUN set -eux; \\\n    \\\n    git checkout 501b49a3; \\\n    python build/gen.py; \\\n    ninja -v -C out; \\\n    out/gn_unittests; \\\n    mkdir -p /gn; \\\n    cp /tmp/gn/out/gn /gn/gn; \\\n    /gn/gn --version;\n\n###########\n# Bazel\n###########\n\nFROM ubuntu:xenial AS bazel_context_amd64\nFROM ubuntu:bionic AS bazel_context_arm64\n# hadolint ignore=DL3006\nFROM bazel_context_${TARGETARCH} AS bazel_context\n\nARG TARGETARCH\n\nENV BAZELISK_VERSION=\"v1.9.0\"\nENV BAZELISK_BASE_URL=\"https://github.com/bazelbuild/bazelisk/releases/download\"\nENV BAZELISK_BIN=\"bazelisk-linux-${TARGETARCH}\"\nENV BAZELISK_URL=\"${BAZELISK_BASE_URL}/${BAZELISK_VERSION}/${BAZELISK_BIN}\"\n\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    wget \\\n    ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -nv ${BAZELISK_URL}\nRUN chmod +x ${BAZELISK_BIN}\nRUN mv ${BAZELISK_BIN} /usr/local/bin/bazel\n\n########################\n# Final image for proxy\n########################\n\nFROM ubuntu:xenial AS build_env_proxy_amd64\nENV UBUNTU_RELEASE_CODE_NAME=xenial\nFROM ubuntu:bionic AS build_env_proxy_arm64\nENV UBUNTU_RELEASE_CODE_NAME=bionic\n# hadolint ignore=DL3006\nFROM build_env_proxy_${TARGETARCH} AS build_env_proxy\n\nWORKDIR /\n\n# Version from build arguments\nARG VERSION\n\n# Labels used by Docker\nLABEL \"io.istio.repo\"=\"https://github.com/istio/tools\"\nLABEL \"io.istio.version\"=\"${VERSION}\"\n\n# Docker\nENV DOCKER_VERSION=5:20.10.7~3-0~ubuntu-${UBUNTU_RELEASE_CODE_NAME}\nENV CONTAINERD_VERSION=1.4.6-1\n\n# General\nENV HOME=/home\nENV LANG=C.UTF-8\n\n# Go support\nENV GO111MODULE=on\nENV GOPROXY=https://proxy.golang.org\nENV GOSUMDB=sum.golang.org\nENV GOROOT=/usr/local/go\nENV GOPATH=/go\nENV GOCACHE=/gocache\nENV GOBIN=/gobin\nENV PATH=/usr/local/go/bin:/gobin:/usr/local/google-cloud-sdk/bin:$PATH\n\n# LLVM support\nENV LLVM_DIRECTORY=/usr/lib/llvm\nENV PATH=${LLVM_DIRECTORY}/bin:$PATH\n\n# Avoid interactive input when installing tshark\nENV DEBIAN_FRONTEND=noninteractive\n\n# required for binary tools: ca-certificates, gcc, libc-dev, git, iptables, libltdl7\n# required for general build: make, wget, curl, ssh\n# required for python: python3, pkg-config\n# hadolint ignore=DL3008, DL3009\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common \\\n    ca-certificates \\\n    gcc \\\n    ssh \\\n    libltdl7 \\\n    libc-dev \\\n    make \\\n    pkg-config \\\n    python3 \\\n    python3-setuptools \\\n    daemon \\\n    wget \\\n    jq \\\n    tshark && rm -rf /var/lib/apt/lists/*;\n\n# Build git from source. Golang now requires a recent git version\n# hadolint ignore=DL3003,DL3009,DL4001\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    libssl-dev \\\n    libcurl4-gnutls-dev \\\n    libexpat1-dev \\\n    zlib1g-dev \\\n    gettext \\\n    unzip && \\\n    wget -q https://github.com/git/git/archive/v2.25.1.zip -O git.zip && \\\n    unzip git.zip && \\\n    cd git-* && \\\n    make prefix=/usr/local all && \\\n    make prefix=/usr/local install && \\\n    cd .. && rm -r git-* && rm -rf /var/lib/apt/lists/*;\n\n# Docker including docker-ce, docker-ce-cli, and containerd.io\nADD https://download.docker.com/linux/ubuntu/gpg /tmp/docker-key\nRUN apt-key add /tmp/docker-key\nARG TARGETARCH\nRUN add-apt-repository \"deb [arch=${TARGETARCH}] https://download.docker.com/linux/ubuntu ${UBUNTU_RELEASE_CODE_NAME} stable\"\n# hadolint ignore=DL3009\nRUN apt-get update && apt-get -y install --no-install-recommends \\\n    docker-ce=\"${DOCKER_VERSION}\" \\\n    docker-ce-cli=\"${DOCKER_VERSION}\" \\\n    containerd.io=\"${CONTAINERD_VERSION}\" && rm -rf /var/lib/apt/lists/*;\n\n# Run dockerd in CI\nCOPY prow-entrypoint.sh /usr/local/bin/entrypoint\nRUN chmod +x /usr/local/bin/entrypoint\n\n# CMake\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n# ubuntu 18.04 without arm64 version see https://apt.kitware.com/\n# hadolint ignore=DL4001\nRUN set -eux; \\\n    \\\n    case $(uname -m) in \\\n        x86_64) \\\n            curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - ; \\\n            apt-add-repository \"deb https://apt.kitware.com/ubuntu/ ${UBUNTU_RELEASE_CODE_NAME} main\"; \\\n            ;; \\\n        *) echo \"skip\" ;; \\\n    esac;\n\n# binary dependencies to build envoy at v1.12.0\n# https://github.com/envoyproxy/envoy/blob/v1.12.0/bazel/README.md\n# hadolint ignore=DL3008,DL3009\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    autoconf \\\n    automake \\\n    cmake \\\n    libtool \\\n    ninja-build \\\n    python \\\n    unzip \\\n    virtualenv && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=binary_tools_context /out/ /\nCOPY --from=binary_tools_context /usr/local/go /usr/local/go\nCOPY --from=gn_context /gn/gn /usr/local/bin/gn\nCOPY --from=bazel_context /usr/local/bin /usr/local/bin\nCOPY --from=clang_context ${LLVM_DIRECTORY}/lib ${LLVM_DIRECTORY}/lib\nCOPY --from=clang_context ${LLVM_DIRECTORY}/bin ${LLVM_DIRECTORY}/bin\nCOPY --from=clang_context ${LLVM_DIRECTORY}/include ${LLVM_DIRECTORY}/include\n\nRUN echo \"${LLVM_DIRECTORY}/lib\" | tee /etc/ld.so.conf.d/llvm.conf\nRUN ldconfig\n\nCOPY proxy-tsan-instrumented-libcxx.sh proxy-tsan-instrumented-libcxx.sh\nRUN ./proxy-tsan-instrumented-libcxx.sh\n\nCOPY install-python-3.8.sh install-python-3.8.sh\nRUN ./install-python-3.8.sh\n\n# su-exec is used in place of complex sudo setup operations\nRUN chmod u+sx /usr/bin/su-exec\n\nCOPY bashrc /home/.bashrc\n\n# mountpoints are mandatory for any host mounts.\n# mountpoints in /config are special.\nRUN mkdir -p /go && \\\n    mkdir -p /gocache && \\\n    mkdir -p /gobin && \\\n    mkdir -p /config/.docker && \\\n    mkdir -p /config/.config/gcloud && \\\n    mkdir -p /config/.kube && \\\n    mkdir -p /config-copy && \\\n    mkdir -p /home/.cache && \\\n    mkdir -p /home/.helm && \\\n    mkdir -p /home/.gsutil\n\n# TODO must sort out how to use uid mapping in docker so these don't need to be 777\n# They are created as root 755.  As a result they are not writeable, which fails in\n# the developer environment as a volume or bind mount inherits the permissions of\n# the directory mounted rather then overriding with the permission of the volume file.\nRUN chmod 777 /go && \\\n    chmod 777 /gocache && \\\n    chmod 777 /gobin && \\\n    chmod 777 /config && \\\n    chmod 777 /config/.docker && \\\n    chmod 777 /config/.config/gcloud && \\\n    chmod 777 /config/.kube && \\\n    chmod 777 /home/.cache && \\\n    chmod 777 /home/.helm && \\\n    chmod 777 /home/.gsutil\n\n# Clean up stuff we don't need in the final image\nRUN rm -rf /var/lib/apt/lists/*\nRUN rm -fr /usr/share/python\nRUN rm -fr /usr/share/bash-completion\nRUN rm -fr /usr/share/bug\nRUN rm -fr /usr/share/doc\nRUN rm -fr /usr/share/dh-python\nRUN rm -fr /usr/share/locale\nRUN rm -fr /usr/share/man\nRUN rm -fr /tmp/*\n\n# Run config setup in local environments\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint\n\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint\"]\n"
}