diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/istio/tools/docker/build-tools/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/istio/tools/docker/build-tools/Dockerfile/repaired.Dockerfile
index 72ad8c0..1de7e13 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/istio/tools/docker/build-tools/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/istio/tools/docker/build-tools/Dockerfile/repaired.Dockerfile
@@ -93,7 +93,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     gnupg2 \
     software-properties-common \
     unzip \
-    xz-utils
+    xz-utils && rm -rf /var/lib/apt/lists/*;
 
 # Install protoc
 RUN set -eux; \
@@ -173,7 +173,7 @@ RUN git clone https://github.com/kubernetes/test-infra --branch master --single-
 
 # Compress the Go tools and put them in their final location
 ADD https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-${TARGETARCH}_linux.tar.xz /tmp
-RUN tar -xJf upx-${UPX_VERSION}-${TARGETARCH}_linux.tar.xz -C /tmp
+RUN tar -xJf upx-${UPX_VERSION}-${TARGETARCH}_linux.tar.xz -C /tmp && rm upx-${UPX_VERSION}-${TARGETARCH}_linux.tar.xz
 RUN mv /tmp/upx-${UPX_VERSION}-${TARGETARCH}_linux/upx /usr/bin
 RUN upx --lzma /tmp/go/bin/*
 RUN mv /tmp/go/bin/* ${OUTDIR}/usr/bin
@@ -187,7 +187,7 @@ RUN chmod -R 555 ${OUTDIR}/usr/share/gen-release-notes
 
 # ShellCheck linter
 RUN wget -nv -O "/tmp/shellcheck-${SHELLCHECK_VERSION}.linux.$(uname -m).tar.xz" "https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION}/shellcheck-${SHELLCHECK_VERSION}.linux.$(uname -m).tar.xz"
-RUN tar -xJf "/tmp/shellcheck-${SHELLCHECK_VERSION}.linux.$(uname -m).tar.xz" -C /tmp
+RUN tar -xJf "/tmp/shellcheck-${SHELLCHECK_VERSION}.linux.$(uname -m).tar.xz" -C /tmp && rm "/tmp/shellcheck-${SHELLCHECK_VERSION}.linux.$( uname -m).tar.xz"
 RUN mv /tmp/shellcheck-${SHELLCHECK_VERSION}/shellcheck ${OUTDIR}/usr/bin
 
 # Hadolint linter
@@ -210,7 +210,7 @@ RUN set -eux; \
 # Helm version 3
 ADD https://get.helm.sh/helm-${HELM3_VERSION}-linux-${TARGETARCH}.tar.gz /tmp
 RUN mkdir /tmp/helm3
-RUN tar -xf /tmp/helm-${HELM3_VERSION}-linux-${TARGETARCH}.tar.gz -C /tmp/helm3
+RUN tar -xf /tmp/helm-${HELM3_VERSION}-linux-${TARGETARCH}.tar.gz -C /tmp/helm3 && rm /tmp/helm-${HELM3_VERSION}-linux-${TARGETARCH}.tar.gz
 RUN mv /tmp/helm3/linux-${TARGETARCH}/helm ${OUTDIR}/usr/bin/helm3
 RUN ln ${OUTDIR}/usr/bin/helm3 ${OUTDIR}/usr/bin/helm
 
@@ -225,7 +225,7 @@ RUN chmod 555 ${OUTDIR}/usr/bin/kubectl
 
 # GCR docker credential helper
 ADD https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${GCR_AUTH_VERSION}/docker-credential-gcr_linux_${TARGETARCH}-${GCR_AUTH_VERSION}.tar.gz /tmp
-RUN tar -xzf /tmp/docker-credential-gcr_linux_${TARGETARCH}-${GCR_AUTH_VERSION}.tar.gz -C /tmp
+RUN tar -xzf /tmp/docker-credential-gcr_linux_${TARGETARCH}-${GCR_AUTH_VERSION}.tar.gz -C /tmp && rm /tmp/docker-credential-gcr_linux_${TARGETARCH}-${GCR_AUTH_VERSION}.tar.gz
 RUN mv /tmp/docker-credential-gcr ${OUTDIR}/usr/bin
 
 RUN wget -nv -O "${OUTDIR}/usr/bin/buf" "https://github.com/bufbuild/buf/releases/download/${BUF_VERSION}/buf-Linux-$(uname -m)" && \
@@ -233,7 +233,7 @@ RUN wget -nv -O "${OUTDIR}/usr/bin/buf" "https://github.com/bufbuild/buf/release
 
 # Install su-exec which is a tool that operates like sudo without the overhead
 ADD https://github.com/ncopa/su-exec/archive/v${SU_EXEC_VERSION}.tar.gz /tmp
-RUN tar -xzvf v${SU_EXEC_VERSION}.tar.gz
+RUN tar -xzvf v${SU_EXEC_VERSION}.tar.gz && rm v${SU_EXEC_VERSION}.tar.gz
 WORKDIR /tmp/su-exec-${SU_EXEC_VERSION}
 RUN make
 RUN cp -a su-exec ${OUTDIR}/usr/bin
@@ -299,7 +299,7 @@ ENV TSLINT_VERSION=v6.1.3
 ENV TYPESCRIPT_VERSION=v4.7.2
 
 RUN apt-get update && apt-get install -y --no-install-recommends \
-    wget ca-certificates
+    wget ca-certificates && rm -rf /var/lib/apt/lists/*;
 
 RUN set -eux; \
     case $(uname -m) in \
@@ -311,7 +311,7 @@ RUN set -eux; \
     tar -xzf /tmp/${NODEJS_TAR} --strip-components=1 -C /usr/local
 
 ADD https://nodejs.org/download/release/v${NODEJS_VERSION}/node-v${NODEJS_VERSION}-headers.tar.gz /tmp
-RUN tar -xzf /tmp/node-v${NODEJS_VERSION}-headers.tar.gz --strip-components=1 -C /usr/local
+RUN tar -xzf /tmp/node-v${NODEJS_VERSION}-headers.tar.gz --strip-components=1 -C /usr/local && rm /tmp/node-v${NODEJS_VERSION}-headers.tar.gz
 
 RUN npm init -y
 RUN npm install --omit=dev --global \
@@ -325,13 +325,13 @@ RUN npm install --omit=dev --global \
     @babel/core@"${BABEL_CORE_VERSION}" \
     @babel/cli@"${BABEL_CLI_VERSION}" \
     @babel/preset-env@"${BABEL_PRESET_ENV_VERSION}" \
-    linkinator@"${LINKINATOR_VERSION}"
+    linkinator@"${LINKINATOR_VERSION}" && npm cache clean --force;
 
 RUN npm install --omit=dev --save-dev \
-    babel-preset-minify@${BABEL_PRESET_MINIFY_VERSION}
+    babel-preset-minify@${BABEL_PRESET_MINIFY_VERSION} && npm cache clean --force;
 
 RUN npm install --save-dev \
-    @babel/polyfill@${BABEL_POLYFILL_VERSION}
+    @babel/polyfill@${BABEL_POLYFILL_VERSION} && npm cache clean --force;
 
 # Clean up stuff we don't need in the final image
 RUN rm -rf /usr/local/sbin
@@ -364,12 +364,12 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     cmake \
     pkg-config \
     libssl-dev \
-    git
+    git && rm -rf /var/lib/apt/lists/*;
 
 # hadolint ignore=DL3008
 RUN apt-get update && apt-get install -y --no-install-recommends \
     ruby3.0 \
-    ruby3.0-dev
+    ruby3.0-dev && rm -rf /var/lib/apt/lists/*;
 
 # Install istio.io verification tools
 RUN gem install --no-wrappers --no-document mdl -v ${MDL_VERSION}
@@ -408,7 +408,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     python3 \
     python3-distutils \
     python3-pip \
-    python3-setuptools
+    python3-setuptools && rm -rf /var/lib/apt/lists/*;
 
 # Install Python stuff
 RUN python3 -m pip install --no-cache-dir --upgrade pip==${PIP_INSTALL_VERSION}
@@ -463,7 +463,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     jq \
     gettext-base \
     locales-all \
-    file
+    file && rm -rf /var/lib/apt/lists/*;
 
 # Fix Docker issue
 RUN update-alternatives --set iptables /usr/sbin/iptables-legacy && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
@@ -474,11 +474,11 @@ RUN apt-key add /tmp/docker-key
 ARG TARGETARCH
 RUN add-apt-repository "deb [arch=${TARGETARCH}] https://download.docker.com/linux/ubuntu $(lsb_release -sc) stable"
 RUN apt-get update
-RUN apt-get -y install --no-install-recommends docker-ce="${DOCKER_VERSION}" docker-ce-cli="${DOCKER_VERSION}" containerd.io="${CONTAINERD_VERSION}"
+RUN apt-get -y install --no-install-recommends docker-ce="${DOCKER_VERSION}" docker-ce-cli="${DOCKER_VERSION}" containerd.io="${CONTAINERD_VERSION}" && rm -rf /var/lib/apt/lists/*;
 
 # Trivy container scanner
 RUN set -eux; \
-    \
+
     case $(uname -m) in \
         x86_64) \
             export TRVIY_DEB_NAME="trivy_${TRIVY_VERSION}_Linux-64bit.deb"; \
@@ -489,7 +489,7 @@ RUN set -eux; \
         *) echo "unsupported architecture"; exit 1 ;; \
     esac; \
     wget -nv -O "/tmp/${TRVIY_DEB_NAME}" "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/${TRVIY_DEB_NAME}"; \
-    apt-get -y install --no-install-recommends -f "/tmp/${TRVIY_DEB_NAME}"; \
+    apt-get -y install --no-install-recommends -f "/tmp/${TRVIY_DEB_NAME}"; rm -rf /var/lib/apt/lists/*; \
     rm "/tmp/${TRVIY_DEB_NAME}";
 
 # Clean up stuff we don't need in the final image
@@ -610,7 +610,7 @@ FROM clang_context_${TARGETARCH} AS clang_context
 RUN apt-get update && apt-get install -y --no-install-recommends \
     xz-utils \
     wget \
-    ca-certificates
+    ca-certificates && rm -rf /var/lib/apt/lists/*;
 
 # 12.0.1 is the version support ubuntu:xenial & aarch64
 ENV LLVM_VERSION=12.0.1
@@ -618,7 +618,7 @@ ENV LLVM_BASE_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg
 ENV LLVM_DIRECTORY=/usr/lib/llvm
 
 RUN set -eux; \
-    \
+
     case $(uname -m) in \
         x86_64) \
                export LLVM_ARCHIVE=clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu- \
@@ -628,9 +628,9 @@ RUN set -eux; \
                export LLVM_ARTIFACT=clang+llvm-${LLVM_VERSION}-aarch64-linux-gnu;; \
         *) echo "unsupported architecture"; exit 1 ;; \
     esac; \
-    \
+
     wget -nv ${LLVM_BASE_URL}/${LLVM_ARTIFACT}.tar.xz; \
-    tar -xJf ${LLVM_ARTIFACT}.tar.xz -C /tmp; \
+    tar -xJf ${LLVM_ARTIFACT}.tar.xz -C /tmp; rm ${LLVM_ARTIFACT}.tar.xz \
     mkdir -p ${LLVM_DIRECTORY}; \
     mv /tmp/${LLVM_ARCHIVE}/* ${LLVM_DIRECTORY}/
 
@@ -641,13 +641,13 @@ RUN set -eux; \
 FROM debian:buster AS gn_context
 
 RUN set -eux; \
-    \
+
     apt-get update; \
     apt-get install -qqy --no-install-recommends \
         ca-certificates git \
         clang python ninja-build \
         libclang-dev libc++-dev \
-        ;
+        ; rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /tmp
 RUN git clone https://gn.googlesource.com/gn;
@@ -683,7 +683,7 @@ ENV BAZELISK_URL="${BAZELISK_BASE_URL}/${BAZELISK_VERSION}/${BAZELISK_BIN}"
 # hadolint ignore=DL3008
 RUN apt-get update && apt-get install -y --no-install-recommends \
     wget \
-    ca-certificates
+    ca-certificates && rm -rf /var/lib/apt/lists/*;
 
 RUN wget -nv ${BAZELISK_URL}
 RUN chmod +x ${BAZELISK_BIN}
@@ -756,7 +756,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     daemon \
     wget \
     jq \
-    tshark
+    tshark && rm -rf /var/lib/apt/lists/*;
 
 # Build git from source. Golang now requires a recent git version
 # hadolint ignore=DL3003,DL3009,DL4001
@@ -773,7 +773,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     cd git-* && \
     make prefix=/usr/local all && \
     make prefix=/usr/local install && \
-    cd .. && rm -r git-*
+    cd .. && rm -r git-* && rm -rf /var/lib/apt/lists/*;
 
 # Docker including docker-ce, docker-ce-cli, and containerd.io
 ADD https://download.docker.com/linux/ubuntu/gpg /tmp/docker-key
@@ -784,7 +784,7 @@ RUN add-apt-repository "deb [arch=${TARGETARCH}] https://download.docker.com/lin
 RUN apt-get update && apt-get -y install --no-install-recommends \
     docker-ce="${DOCKER_VERSION}" \
     docker-ce-cli="${DOCKER_VERSION}" \
-    containerd.io="${CONTAINERD_VERSION}"
+    containerd.io="${CONTAINERD_VERSION}" && rm -rf /var/lib/apt/lists/*;
 
 # Run dockerd in CI
 COPY prow-entrypoint.sh /usr/local/bin/entrypoint
@@ -815,7 +815,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     ninja-build \
     python \
     unzip \
-    virtualenv
+    virtualenv && rm -rf /var/lib/apt/lists/*;
 
 COPY --from=binary_tools_context /out/ /
 COPY --from=binary_tools_context /usr/local/go /usr/local/go