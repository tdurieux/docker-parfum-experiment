{
  "startTime": 1674252350616,
  "endTime": 1674252351871,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 25,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##### Build stage\nFROM python:3.9.9-slim-buster as base\n\nENV TIMEOUT=900\n\nCOPY ./runtime/requirements.txt /requirements.txt\nCOPY ./runtime/requirements-dev.txt /requirements-dev.txt\n\nRUN apt-get -y update && apt-get -y --no-install-recommends install libpq-dev gcc && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nRUN python3 -m pip install --no-cache-dir --upgrade pip==21.3.1 pip-tools==6.4.0 wheel==0.37.0\nRUN pip-sync --pip-args='--no-cache-dir' /requirements.txt\n\n##### Intermediate stage with actual application content\nFROM base AS application_base\nCOPY ./runtime /app\nCOPY ./VERSION /app/VERSION\nRUN chmod +x /app/start.sh\n\nRUN mkdir -p /mnt/obj_repo\nRUN chmod -R a+rw /mnt/obj_repo\n\n##### Production stage\n# making prod stage available early allows to build it without building test stage\n# since test stage is only necessary on build system\nFROM application_base AS prod\nRUN useradd -m hd_app\nUSER hd_app\nWORKDIR /app\nENV PORT 8090\nEXPOSE 8090\nCMD [\"/app/start.sh\"]\n\n##### Test stage\nFROM application_base AS test\nWORKDIR /app\nRUN pip-sync --pip-args='--no-cache-dir' /requirements.txt /requirements-dev.txt\nRUN python3 -m pytest --cov=hetdesrun --cov-report xml --junitxml test_results.xml tests\nRUN bash /app/scripts/gen_pylint_report.sh\n\n# prod should still be the default build, this is why we close with FROM prod\n# Note that in order to really skip building the test stage you need to explicitly specify\n# the prod stage via\n#     docker build --target prod -f Dockerfile-runtime . -t hetdesrun_webservice\nFROM prod\n"
}