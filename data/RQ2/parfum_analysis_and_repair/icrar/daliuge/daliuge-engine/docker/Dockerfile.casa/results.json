{
  "startTime": 1674252112361,
  "endTime": 1674252113545,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 28,
        "columnEnd": 129
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 28,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 23,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 9,
        "columnStart": 18,
        "columnEnd": 111
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 23,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 80
      }
    }
  ],
  "repairedDockerfile": "# This Dockerfile builds the daliuge-engine with casacore, the cbf-emulator and the plasma store inside.\n# TODO: This packaging of everything into the same image is not ideal and should be re-visited.\n#\n# The resulting image should allow to run leap-plasma as well.\n\n# We need the base image we built with the other Dockerfile\nFROM icrar/daliuge-common:master-casa\n\nRUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends tzdata \\\n    gnupg2 software-properties-common wget git git-lfs gcc g++ make tmux python3-pip cmake libboost1.71-all-dev && rm -rf /var/lib/apt/lists/*;\n\n# install casacore\nRUN mkdir -p /code && cd /code &&\\\n    add-apt-repository -s ppa:kernsuite/kern-7 &&\\\n    apt-add-repository multiverse &&\\\n    apt-add-repository restricted &&\\\n    apt update && \\\n    apt install --no-install-recommends -y casacore-dev && rm -rf /var/lib/apt/lists/*;\n\n# install python3-casacore\n# NOTE: pip3 python-casacore and apt python3-casacore bundles it's own libcasa_tables-xyz.so different to kernsuite. Installing with\n# the no-binary option will link to kernsuite shared libraries.\nRUN apt install --no-install-recommends -y python3-dev wcslib-dev libcfitsio-dev && \\\n    pip3 install --no-cache-dir --no-binary python-casacore python-casacore && rm -rf /var/lib/apt/lists/*;\n\n# build and install arrow-plasma\n# NOTE: nvidia-docker requires using newer cuda packages than ones included with arrow-plasma that do not overwrite the the docker cuda drivers\nRUN mkdir -p /code && cd /code &&\\\n    git clone --recursive -b apache-arrow-4.0.0 https://github.com/apache/arrow.git &&\\\n    cd arrow/cpp &&\\\n    cmake -B build . -DCMAKE_BUILD_TYPE=Release -DARROW_PLASMA=ON -DARROW_TESTING=OFF &&\\\n    cmake --build build/ --target all -j2 &&\\\n    cmake --build build/ --target install &&\\\n    ldconfig &&\\\n    cd ../..\n\n# build and install plasmastman\nRUN mkdir -p /code && cd /code &&\\\n    git clone --recursive https://gitlab.com/ska-telescope/plasma-storage-manager.git &&\\\n    cd plasma-storage-manager &&\\\n    cmake -B build . -DCMAKE_BUILD_TYPE=Release -DPlasma_DIR=/usr/local/lib/cmake/arrow -DArrow_DIR=/usr/local/lib/cmake/arrow -DBUILD_TESTING=OFF &&\\\n    cmake --build build/ --target all -j2 &&\\\n    cmake --build build/ --target install &&\\\n    ldconfig &&\\\n    cd ..\n\n# install pyarrow\nRUN pip3 install --no-cache-dir pyarrow==3.0.0\n\n# build and install cbf-sdp-emulator TODO: use master branch\nRUN mkdir -p /code && cd /code &&\\\n    git clone --recursive https://gitlab.com/ska-telescope/cbf-sdp-emulator.git &&\\\n    cd cbf-sdp-emulator &&\\\n    . ~/dlg/bin/activate && pip3 install --no-cache-dir --extra-index-url=https://artefact.skao.int/repository/pypi-internal/simple -e .[plasma]\n\nCOPY / /daliuge\nRUN . ~/dlg/bin/activate && pip install --no-cache-dir wheel && cd /daliuge && \\\n    pip install --no-cache-dir .\n\nRUN apt-get update && apt-get install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;\n\n# # Second stage build taking what's required from first stage\n# FROM icrar/dlg_ray.common:test\n\n# # copy sources and virtualenv\n# COPY --from=0 /daliuge/. /daliuge/.\n# COPY --from=0 /root/dlg /root/dlg\nRUN  mkdir -p /tmp/dlg/var/dlg_home\n\nEXPOSE 9000\nEXPOSE 8000\nEXPOSE 8001\nEXPOSE 8002\nEXPOSE 5555\nEXPOSE 6666\n\n# enable the virtualenv path from daliuge-common\nENV VIRTUAL_ENV=/root/dlg\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\nENV DLG_ROOT=\"/tmp/dlg/var/dlg_home\"\n\nCMD [\"dlg\", \"daemon\", \"-vv\"]"
}