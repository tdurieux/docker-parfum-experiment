{
  "startTime": 1674251924101,
  "endTime": 1674251925051,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 1,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n# https://docs.docker.com/compose/compose-file/#target\n\n\n# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG NODE_VERSION=13\nARG NGINX_VERSION=1.17\n\n\n# \"development\" stage\nFROM node:${NODE_VERSION}-alpine AS api_platform_admin_development\n\nWORKDIR /usr/src/admin\n\n# prevent the reinstallation of node modules at every changes in the source code\nCOPY package.json yarn.lock ./\nRUN set -eux; \\\n\tapk add --no-cache --virtual .gyp \\\n\t\tg++ \\\n\t\tmake \\\n\t\tpython \\\n\t; \\\n\tyarn install; yarn cache clean; \\\n\tapk del .gyp\n\nCOPY . ./\n\nVOLUME /usr/src/admin/node_modules\n\nENV HTTPS true\n\nCMD [\"yarn\", \"start\"]\n\n\n# \"build\" stage\n# depends on the \"development\" stage above\nFROM api_platform_admin_development AS api_platform_admin_build\n\nARG REACT_APP_API_ENTRYPOINT\n\nRUN set -eux; \\\n\tyarn build\n\n\n# \"nginx\" stage\n# depends on the \"build\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS api_platform_admin_nginx\n\nCOPY docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf\n\nWORKDIR /usr/src/admin/build\n\nCOPY --from=api_platform_admin_build /usr/src/admin/build ./\n"
}