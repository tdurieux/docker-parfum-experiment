{
  "startTime": 1674252951824,
  "endTime": 1674252953189,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 5,
        "lineEnd": 9,
        "columnStart": 33,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multi-stage build\n# Stage 0\n# Compile xsendfile apache module\nFROM alpine:3.15 as sendfile\nADD docker/mod_xsendfile.c /mod_xsendfile.c\nRUN apk update && apk upgrade && apk add --no-cache \\\n    gcc \\\n    musl-dev \\\n    apache2-dev \\\n    apache2\n\nRUN cd / && \\\n    apxs -cia mod_xsendfile.c\n\n# Stage 1\n# Run composer\nFROM composer:1.6 as composer\nCOPY ./composer.json /app\nCOPY ./composer.lock /app\n\nRUN composer install --no-interaction --no-dev --optimize-autoloader\n\n# Tidy up\n# remove non-required vendor files\nWORKDIR /app/vendor\nRUN find -type d -name '.git' -exec rm -r {} + && \\\n    find -path ./twig/twig/lib/Twig -prune -type d -name 'Test' -exec rm -r {} + && \\\n    find -type d -name 'tests' -depth -exec rm -r {} + && \\\n    find -type d -name 'benchmarks' -depth -exec rm -r {} + && \\\n    find -type d -name 'smoketests' -depth -exec rm -r {} + && \\\n    find -type d -name 'demo' -depth -exec rm -r {} + && \\\n    find -type d -name 'doc' -depth -exec rm -r {} + && \\\n    find -type d -name 'docs' -depth -exec rm -r {} + && \\\n    find -type d -name 'examples' -depth -exec rm -r {} + && \\\n    find -type f -name 'phpunit.xml' -exec rm -r {} + && \\\n    find -type f -name '*.md' -exec rm -r {} +\n\n\n# Stage 2\n# Run webpack\nFROM node:12 AS webpack\nWORKDIR /app\n\n# Install webpack\nRUN npm install webpack -g && npm cache clean --force;\n\n# Copy package.json and the webpack config file\nCOPY webpack.config.js .\nCOPY package.json .\nCOPY package-lock.json .\n\n# Install npm packages\nRUN npm install --only=prod && npm cache clean --force;\n\n# Copy ui folder\nCOPY ./ui ./ui\n\n# Copy modules source folder\nCOPY ./modules/src ./modules/src\n\n# Build webpack\nRUN npm run publish\n\n# Stage 3\n# Build the CMS container\nFROM alpine:3.15\nMAINTAINER Xibo Signage <support@xibosignage.com>\n\n# Install apache, PHP, and supplimentary programs.\nRUN apk update && apk upgrade && apk add tar \\\n    bash \\\n    curl \\\n    php7 \\\n    php7-apache2 \\\n    php7-zmq \\\n    php7-json \\\n    php7-gd \\\n    php7-dom \\\n    php7-pdo \\\n    php7-zip \\\n    php7-pdo_mysql \\\n    php7-gettext \\\n    php7-soap \\\n    php7-iconv \\\n    php7-curl \\\n    php7-session \\\n    php7-sockets \\\n    php7-ctype \\\n    php7-fileinfo \\\n    php7-xml \\\n    php7-simplexml \\\n    php7-xmlwriter \\\n    php7-tokenizer \\\n    php7-mbstring \\\n    php7-memcached \\\n    php7-pecl-mongodb \\\n    php7-zlib \\\n    mysql-client \\\n    msmtp \\\n    python2 \\\n    apache2 \\\n    ca-certificates \\\n    tzdata \\\n    openssl \\\n    && rm -rf /var/cache/apk/*\n\n# Add all necessary config files in one layer\nADD docker/ /\n\n# Add xsendfile Module\nCOPY --from=sendfile /usr/lib/apache2/mod_xsendfile.so /usr/lib/apache2/mod_xsendfile.so\n\n# Update the PHP.ini file\nRUN sed -i \"s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/\" /etc/php7/php.ini && \\\n    sed -i \"s/session.gc_probability = .*$/session.gc_probability = 1/\" /etc/php7/php.ini && \\\n    sed -i \"s/session.gc_divisor = .*$/session.gc_divisor = 100/\" /etc/php7/php.ini && \\\n    sed -i \"s/allow_url_fopen = .*$/allow_url_fopen = Off/\" /etc/php7/php.ini && \\\n    sed -i \"s/expose_php = .*$/expose_php = Off/\" /etc/php7/php.ini\n\n# Capture the git commit for this build if we provide one\nARG GIT_COMMIT=prod\n\n# Setup persistent environment variables\nENV CMS_DEV_MODE=false \\\n    INSTALL_TYPE=docker \\\n    XMR_HOST=xmr \\\n    CMS_SERVER_NAME=localhost \\\n    MYSQL_HOST=mysql \\\n    MYSQL_USER=cms \\\n    MYSQL_PASSWORD=none \\\n    MYSQL_PORT=3306 \\\n    MYSQL_DATABASE=cms \\\n    MYSQL_BACKUP_ENABLED=true \\\n    MYSQL_ATTR_SSL_CA=none \\\n    MYSQL_ATTR_SSL_VERIFY_SERVER_CERT=true \\\n    CMS_SMTP_SERVER=smtp.gmail.com:587 \\\n    CMS_SMTP_USERNAME=none \\\n    CMS_SMTP_PASSWORD=none \\\n    CMS_SMTP_USE_TLS=YES \\\n    CMS_SMTP_USE_STARTTLS=YES \\\n    CMS_SMTP_REWRITE_DOMAIN=gmail.com \\\n    CMS_SMTP_HOSTNAME=none \\\n    CMS_SMTP_FROM_LINE_OVERRIDE=YES \\\n    CMS_SMTP_FROM=none \\\n    CMS_ALIAS=none \\\n    CMS_PHP_SESSION_GC_MAXLIFETIME=1440 \\\n    CMS_PHP_POST_MAX_SIZE=2G \\\n    CMS_PHP_UPLOAD_MAX_FILESIZE=2G \\\n    CMS_PHP_MAX_EXECUTION_TIME=300 \\\n    CMS_PHP_MEMORY_LIMIT=256M \\\n    CMS_PHP_COOKIE_SECURE=Off \\\n    CMS_PHP_COOKIE_HTTP_ONLY=On \\\n    CMS_PHP_COOKIE_SAMESITE=Lax \\\n    CMS_APACHE_START_SERVERS=2 \\\n    CMS_APACHE_MIN_SPARE_SERVERS=5 \\\n    CMS_APACHE_MAX_SPARE_SERVERS=10 \\\n    CMS_APACHE_MAX_REQUEST_WORKERS=60 \\\n    CMS_APACHE_MAX_CONNECTIONS_PER_CHILD=300 \\\n    CMS_APACHE_TIMEOUT=30 \\\n    CMS_APACHE_OPTIONS_INDEXES=false \\\n    CMS_QUICK_CHART_URL=http://cms-quickchart:3400 \\\n    CMS_USE_MEMCACHED=false \\\n    MEMCACHED_HOST=memcached \\\n    MEMCACHED_PORT=11211 \\\n    CMS_USAGE_REPORT=true \\\n    XTR_ENABLED=true \\\n    GIT_COMMIT=$GIT_COMMIT\n\n# Expose port 80\nEXPOSE 80\n\n# Map the source files into /var/www/cms\nRUN mkdir -p /var/www/cms\n\n# Composer generated vendor files\nCOPY --from=composer /app /var/www/cms\n\n# Copy dist built webpack app folder to web\nCOPY --from=webpack /app/web/dist /var/www/cms/web/dist\n\n# Copy modules built webpack app folder to cms modules\nCOPY --from=webpack /app/modules /var/www/cms/modules\n\n# All other files (.dockerignore excludes many things, but we tidy up the rest below)\nCOPY --chown=apache:apache . /var/www/cms\n\n# Tidy up\nRUN rm /var/www/cms/composer.* && \\\n    rm -r /var/www/cms/docker && \\\n    rm -r /var/www/cms/tests && \\\n    rm /var/www/cms/.dockerignore && \\\n    rm /var/www/cms/phpunit.xml && \\\n    rm /var/www/cms/package.json && \\\n    rm /var/www/cms/package-lock.json && \\\n    rm /var/www/cms/cypress.config.js && \\\n    rm -r /var/www/cms/cypress && \\\n    rm -r /var/www/cms/ui && \\\n    rm /var/www/cms/webpack.config.js\n\n# Map a volumes to this folder.\n# Our CMS files, library, cache and backups will be in here.\nRUN mkdir -p /var/www/cms/library/temp &&  \\\n    mkdir -p /var/www/backup && \\\n    mkdir -p /var/www/cms/cache && \\\n    mkdir -p /var/www/cms/web/userscripts && \\\n    chown -R apache:apache /var/www/cms && \\\n    chmod +x /entrypoint.sh /usr/local/bin/httpd-foreground /usr/local/bin/wait-for-command.sh \\\n    /etc/periodic/15min/cms-db-backup && \\\n    mkdir -p /run/apache2 && \\\n    rm /etc/apache2/conf.d/info.conf && \\\n    rm /etc/apache2/conf.d/userdir.conf && \\\n    ln -sf /usr/bin/msmtp /usr/sbin/sendmail && \\\n    chmod 777 /tmp\n\n# Expose volume mount points\nVOLUME /var/www/cms/library\nVOLUME /var/www/cms/custom\nVOLUME /var/www/cms/web/theme/custom\nVOLUME /var/www/backup\nVOLUME /var/www/cms/web/userscripts\nVOLUME /var/www/cms/ca-certs\n\nCMD [\"/entrypoint.sh\"]\n"
}