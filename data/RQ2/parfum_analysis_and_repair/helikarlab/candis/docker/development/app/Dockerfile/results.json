{
  "startTime": 1674250776638,
  "endTime": 1674250777569,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 68
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use ubuntu as base image\nFROM node:stretch-slim\n\n# Add labels for metadata\nLABEL maintainer=\"achillesrasquinha@gmail.com\"\n\nENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=true\n\n# Work in the app directory of the container\nWORKDIR /app\n\nRUN apt-get update \\\n    \\\n    && echo \"Installing dependencies...\" \\\n    && apt-get install -y --no-install-recommends \\\n    bash \\\n    procps \\\n    dirmngr \\\n    apt-transport-https \\\n    software-properties-common \\\n    python3-dev \\\n    python3-pip \\\n    python3-tk \\\n    graphviz-dev && rm -rf /var/lib/apt/lists/*;\n\n# Installing R...\nRUN mkdir -p ~/.gnupg \\\n    && echo \"disable-ipv6\" >> ~/.gnupg/dirmngr.conf \\\n    && apt-key adv --keyserver keys.gnupg.net --recv-key 'E19F5F87128899B192B1A2C2AD5F960A256A04AF' \\\n    && add-apt-repository 'deb https://cloud.r-project.org/bin/linux/debian stretch-cran35/' \\\n    && apt-get update --fix-missing \\\n    && apt-get install --no-install-recommends -y r-base \\\n\n    # Installing Java...\n    && mkdir -p /usr/share/man/man1 \\\n    && apt-get install -y --no-install-recommends openjdk-8-jdk \\\n    # Removing intermediate dependencies...\n    && apt-get remove -y --purge \\\n    dirmngr \\\n    software-properties-common \\\n\n    # Removing cache...\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy the R directory into the container\nCOPY ./R /app/R\n\n# Run setup.R script to install required R packages\nRUN cd /app/R \\\n    && Rscript setup.R \\\n    && cd ..\n\n# Copy the pip requirements file into the container\nCOPY ./requirements-dev.txt  /app/requirements-dev.txt \n\n# Set default timeout parameter to 100 seconds\nENV PIP_DEFAULT_TIMEOUT=100\n\n# Install pip packages\nRUN python3 -m pip install --upgrade pip \\\n    && pip3 install --no-cache-dir setuptools wheel \\\n    && pip3 install --no-cache-dir numpy pyyaml \\\n    && pip3 install --no-cache-dir --no-binary javabridge -r ./requirements-dev.txt\n\n# Copy the package.json and yarn.lock into the container\nCOPY ./package.json /app/package.json\nCOPY ./yarn.lock    /app/yarn.lock\n\n# Install required npm packages\nRUN yarn install --pure-lockfile && yarn cache clean;\n\n# Copy the files from the working directory into the container\nCOPY . /app\n\n# Install the candis app and bundle all react files into a single bundle\nRUN pip3 install --no-cache-dir -e /app \\\n    && yarn build\n\n# Copy processes directory into the container\nCOPY ./docker/development/app/_processes /_processes\n\n# Copy scripts containing processes to run inside the container\nRUN chmod +x /_processes/* \\\n    && mv /_processes/* /usr/local/bin \\\n    && rmdir /_processes\n\n# Copy the start script into the container\nCOPY ./docker/development/app/start /start\n\n# Filter text using following regex and give the file executable permissions\nRUN sed -i -e 's/\\r$//' /start \\\n    && chmod +x /start\n\n# Expose port 5000 and 8888\nEXPOSE 5000 8888\n\n# Launch Candis server and webpack\nCMD [\"/start\"]\n"
}