{
  "startTime": 1674252500578,
  "endTime": 1674252501502,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 60,
        "columnStart": 7,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file was generated using a Jinja2 template.\n# Please make your changes in `Dockerfile.j2` and then `make` the individual Dockerfiles.\n\n# Using multistage build:\n# \thttps://docs.docker.com/develop/develop-images/multistage-build/\n# \thttps://whitfin.io/speeding-up-rust-docker-builds/\n####################### VAULT BUILD IMAGE  #######################\n# The web-vault digest specifies a particular web-vault build on Docker Hub.\n# Using the digest instead of the tag name provides better security,\n# as the digest of an image is immutable, whereas a tag name can later\n# be changed to point to a malicious image.\n#\n# To verify the current digest for a given tag name:\n# - From https://hub.docker.com/r/vaultwarden/web-vault/tags,\n#   click the tag name to view the digest of the image it currently points to.\n# - From the command line:\n#     $ docker pull vaultwarden/web-vault:v2022.6.0\n#     $ docker image inspect --format \"{{.RepoDigests}}\" vaultwarden/web-vault:v2022.6.0\n#     [vaultwarden/web-vault@sha256:caa9fc0a514110f1c815179658d2e3c4e924c187fd2886a99d1dd8129c404472]\n#\n# - Conversely, to get the tag name from the digest:\n#     $ docker image inspect --format \"{{.RepoTags}}\" vaultwarden/web-vault@sha256:caa9fc0a514110f1c815179658d2e3c4e924c187fd2886a99d1dd8129c404472\n#     [vaultwarden/web-vault:v2022.6.0]\n#\nFROM vaultwarden/web-vault@sha256:caa9fc0a514110f1c815179658d2e3c4e924c187fd2886a99d1dd8129c404472 as vault\n\n########################## BUILD IMAGE  ##########################\nFROM rust:1.61-bullseye as build\n\n\n\n# Build time options to avoid dpkg warnings and help with reproducible builds.\nENV DEBIAN_FRONTEND=noninteractive \\\n    LANG=C.UTF-8 \\\n    TZ=UTC \\\n    TERM=xterm-256color \\\n    CARGO_HOME=\"/root/.cargo\" \\\n    USER=\"root\"\n\n\n# Create CARGO_HOME folder and don't download rust docs\nRUN mkdir -pv \"${CARGO_HOME}\" \\\n    && rustup set profile minimal\n\n#\n# Install required build libs for armel architecture.\n# hadolint ignore=DL3059\nRUN dpkg --add-architecture armel \\\n    && apt-get update \\\n    && apt-get install -y \\\n        --no-install-recommends \\\n        libssl-dev:armel \\\n        libc6-dev:armel \\\n        libpq5:armel \\\n        libpq-dev:armel \\\n        libmariadb3:armel \\\n        libmariadb-dev:armel \\\n        libmariadb-dev-compat:armel \\\n        gcc-arm-linux-gnueabi \\\n    #\n    # Make sure cargo has the right target config\n    && echo '[target.arm-unknown-linux-gnueabi]' >> \"${CARGO_HOME}/config\" \\\n    && echo 'linker = \"arm-linux-gnueabi-gcc\"' >> \"${CARGO_HOME}/config\" \\\n    && echo 'rustflags = [\"-L/usr/lib/arm-linux-gnueabi\"]' >> \"${CARGO_HOME}/config\" && rm -rf /var/lib/apt/lists/*;\n\n# Set arm specific environment values\nENV CC_arm_unknown_linux_gnueabi=\"/usr/bin/arm-linux-gnueabi-gcc\" \\\n    CROSS_COMPILE=\"1\" \\\n    OPENSSL_INCLUDE_DIR=\"/usr/include/arm-linux-gnueabi\" \\\n    OPENSSL_LIB_DIR=\"/usr/lib/arm-linux-gnueabi\"\n\n\n# Creates a dummy project used to grab dependencies\nRUN USER=root cargo new --bin /app\nWORKDIR /app\n\n# Copies over *only* your manifests and build files\nCOPY ./Cargo.* ./\nCOPY ./rust-toolchain ./rust-toolchain\nCOPY ./build.rs ./build.rs\n\nRUN rustup target add arm-unknown-linux-gnueabi\n\n# Configure the DB ARG as late as possible to not invalidate the cached layers above\nARG DB=sqlite,mysql,postgresql\n\n# Builds your dependencies and removes the\n# dummy project, except the target folder\n# This folder contains the compiled dependencies\nRUN cargo build --features ${DB} --release --target=arm-unknown-linux-gnueabi \\\n    && find . -not -path \"./target*\" -delete\n\n# Copies the complete project\n# To avoid copying unneeded files, use .dockerignore\nCOPY . .\n\n# Make sure that we actually build the project\nRUN touch src/main.rs\n\n# Builds again, this time it'll just be\n# your actual source files being built\n# hadolint ignore=DL3059\nRUN cargo build --features ${DB} --release --target=arm-unknown-linux-gnueabi\n\n# Create a special empty file which we check within the application.\n# If this file exists, then we exit Vaultwarden to prevent data loss when someone forgets to use volumes.\n# If you really really want to use volatile storage you can set the env `I_REALLY_WANT_VOLATILE_STORAGE=true`\n# This file should disappear if a volume is mounted on-top of this using a docker volume.\n# We run this in the build image and copy it over, because the runtime image could be missing some executables.\n# hadolint ignore=DL3059\nRUN touch /vaultwarden_docker_persistent_volume_check\n\n######################## RUNTIME IMAGE  ########################\n# Create a new stage with a minimal image\n# because we already have a binary built\nFROM balenalib/rpi-debian:bullseye\n\nENV ROCKET_PROFILE=\"release\" \\\n    ROCKET_ADDRESS=0.0.0.0 \\\n    ROCKET_PORT=80\n\n# hadolint ignore=DL3059\nRUN [ \"cross-build-start\" ]\n\n# Create data folder and Install needed libraries\nRUN mkdir /data \\\n    && apt-get update && apt-get install -y \\\n    --no-install-recommends \\\n    openssl \\\n    ca-certificates \\\n    curl \\\n    dumb-init \\\n    libmariadb-dev-compat \\\n    libpq5 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# In the Balena Bullseye images for armv6/rpi-debian there is a missing symlink.\n# This symlink was there in the buster images, and for some reason this is needed.\n# hadolint ignore=DL3059\nRUN ln -v -s /lib/ld-linux-armhf.so.3 /lib/ld-linux.so.3\n\n# hadolint ignore=DL3059\nRUN [ \"cross-build-end\" ]\n\nVOLUME /data\nEXPOSE 80\nEXPOSE 3012\n\n# Copies the files from the context (Rocket.toml file and web-vault)\n# and the binary from the \"build\" stage to the current stage\nWORKDIR /\nCOPY --from=vault /web-vault ./web-vault\nCOPY --from=build /vaultwarden_docker_persistent_volume_check /data/vaultwarden_docker_persistent_volume_check\nCOPY --from=build /app/target/arm-unknown-linux-gnueabi/release/vaultwarden .\n\nCOPY docker/healthcheck.sh /healthcheck.sh\nCOPY docker/start.sh /start.sh\n\nHEALTHCHECK --interval=60s --timeout=10s CMD [\"/healthcheck.sh\"]\n\n# Configures the startup!\n# We should be able to remove the dumb-init now with Rocket 0.5\n# But the balenalib images have some issues with there entry.sh\n# See: https://github.com/balena-io-library/base-images/issues/735\n# Lets keep using dumb-init for now, since that is working fine.\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/start.sh\"]\n"
}