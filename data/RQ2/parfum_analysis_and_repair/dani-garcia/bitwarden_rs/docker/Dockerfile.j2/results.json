{
  "startTime": 1674216668760,
  "endTime": 1674216670394,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 120,
        "columnStart": 7,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file was generated using a Jinja2 template.\n# Please make your changes in `Dockerfile.j2` and then `make` the individual Dockerfiles.\n\n{% set build_stage_base_image = \"rust:1.61-bullseye\" %}\n{% if \"alpine\" in target_file %}\n{%   if \"amd64\" in target_file %}\n{%     set build_stage_base_image = \"blackdex/rust-musl:x86_64-musl-stable-1.61.0\" %}\n{%     set runtime_stage_base_image = \"alpine:3.15\" %}\n{%     set package_arch_target = \"x86_64-unknown-linux-musl\" %}\n{%   elif \"armv7\" in target_file %}\n{%     set build_stage_base_image = \"blackdex/rust-musl:armv7-musleabihf-stable-1.61.0\" %}\n{%     set runtime_stage_base_image = \"balenalib/armv7hf-alpine:3.15\" %}\n{%     set package_arch_target = \"armv7-unknown-linux-musleabihf\" %}\n{%   elif \"armv6\" in target_file %}\n{%     set build_stage_base_image = \"blackdex/rust-musl:arm-musleabi-stable-1.61.0\" %}\n{%     set runtime_stage_base_image = \"balenalib/rpi-alpine:3.15\" %}\n{%     set package_arch_target = \"arm-unknown-linux-musleabi\" %}\n{%   elif \"arm64\" in target_file %}\n{%     set build_stage_base_image = \"blackdex/rust-musl:aarch64-musl-stable-1.61.0\" %}\n{%     set runtime_stage_base_image = \"balenalib/aarch64-alpine:3.15\" %}\n{%     set package_arch_target = \"aarch64-unknown-linux-musl\" %}\n{%   endif %}\n{% elif \"amd64\" in target_file %}\n{%   set runtime_stage_base_image = \"debian:bullseye-slim\" %}\n{% elif \"arm64\" in target_file %}\n{%   set runtime_stage_base_image = \"balenalib/aarch64-debian:bullseye\" %}\n{%   set package_arch_name = \"arm64\" %}\n{%   set package_arch_target = \"aarch64-unknown-linux-gnu\" %}\n{%   set package_cross_compiler = \"aarch64-linux-gnu\" %}\n{% elif \"armv6\" in target_file %}\n{%   set runtime_stage_base_image = \"balenalib/rpi-debian:bullseye\" %}\n{%   set package_arch_name = \"armel\" %}\n{%   set package_arch_target = \"arm-unknown-linux-gnueabi\" %}\n{%   set package_cross_compiler = \"arm-linux-gnueabi\" %}\n{% elif \"armv7\" in target_file %}\n{%   set runtime_stage_base_image = \"balenalib/armv7hf-debian:bullseye\" %}\n{%   set package_arch_name = \"armhf\" %}\n{%   set package_arch_target = \"armv7-unknown-linux-gnueabihf\" %}\n{%   set package_cross_compiler = \"arm-linux-gnueabihf\" %}\n{% endif %}\n{% if package_arch_name is defined %}\n{%   set package_arch_prefix = \":\" + package_arch_name %}\n{% else %}\n{%   set package_arch_prefix = \"\" %}\n{% endif %}\n{% if package_arch_target is defined %}\n{%   set package_arch_target_param = \" --target=\" + package_arch_target %}\n{% else %}\n{%   set package_arch_target_param = \"\" %}\n{% endif %}\n{% if \"buildx\" in target_file %}\n{%   set mount_rust_cache = \"--mount=type=cache,target=/root/.cargo/git --mount=type=cache,target=/root/.cargo/registry \" %}\n{% else %}\n{%   set mount_rust_cache = \"\" %}\n{% endif %}\n# Using multistage build:\n# \thttps://docs.docker.com/develop/develop-images/multistage-build/\n# \thttps://whitfin.io/speeding-up-rust-docker-builds/\n####################### VAULT BUILD IMAGE  #######################\n{% set vault_version = \"v2022.6.0\" %}\n{% set vault_image_digest = \"sha256:caa9fc0a514110f1c815179658d2e3c4e924c187fd2886a99d1dd8129c404472\" %}\n# The web-vault digest specifies a particular web-vault build on Docker Hub.\n# Using the digest instead of the tag name provides better security,\n# as the digest of an image is immutable, whereas a tag name can later\n# be changed to point to a malicious image.\n#\n# To verify the current digest for a given tag name:\n# - From https://hub.docker.com/r/vaultwarden/web-vault/tags,\n#   click the tag name to view the digest of the image it currently points to.\n# - From the command line:\n#     $ docker pull vaultwarden/web-vault:{{ vault_version }}\n#     $ docker image inspect --format \"{{ '{{' }}.RepoDigests}}\" vaultwarden/web-vault:{{ vault_version }}\n#     [vaultwarden/web-vault@{{ vault_image_digest }}]\n#\n# - Conversely, to get the tag name from the digest:\n#     $ docker image inspect --format \"{{ '{{' }}.RepoTags}}\" vaultwarden/web-vault@{{ vault_image_digest }}\n#     [vaultwarden/web-vault:{{ vault_version }}]\n#\nFROM vaultwarden/web-vault@{{ vault_image_digest }} as vault\n\n########################## BUILD IMAGE  ##########################\nFROM {{ build_stage_base_image }} as build\n\n\n\n# Build time options to avoid dpkg warnings and help with reproducible builds.\nENV DEBIAN_FRONTEND=noninteractive \\\n    LANG=C.UTF-8 \\\n    TZ=UTC \\\n    TERM=xterm-256color \\\n    CARGO_HOME=\"/root/.cargo\" \\\n    USER=\"root\"\n\n\n# Create CARGO_HOME folder and don't download rust docs\nRUN {{ mount_rust_cache -}} mkdir -pv \"${CARGO_HOME}\" \\\n    && rustup set profile minimal\n\n{% if \"alpine\" in target_file %}\n{%   if \"armv6\" in target_file %}\n# To be able to build the armv6 image with mimalloc we need to specifically specify the libatomic.a file location\nENV RUSTFLAGS='-Clink-arg=/usr/local/musl/{{ package_arch_target }}/lib/libatomic.a'\n{%   endif %}\n{% elif \"arm\" in target_file %}\n#\n# Install required build libs for {{ package_arch_name }} architecture.\n# hadolint ignore=DL3059\nRUN dpkg --add-architecture {{ package_arch_name }} \\\n    && apt-get update \\\n    && apt-get install -y \\\n        --no-install-recommends \\\n        libssl-dev{{ package_arch_prefix }} \\\n        libc6-dev{{ package_arch_prefix }} \\\n        libpq5{{ package_arch_prefix }} \\\n        libpq-dev{{ package_arch_prefix }} \\\n        libmariadb3{{ package_arch_prefix }} \\\n        libmariadb-dev{{ package_arch_prefix }} \\\n        libmariadb-dev-compat{{ package_arch_prefix }} \\\n        gcc-{{ package_cross_compiler }} \\\n    #\n    # Make sure cargo has the right target config\n    && echo '[target.{{ package_arch_target }}]' >> \"${CARGO_HOME}/config\" \\\n    && echo 'linker = \"{{ package_cross_compiler }}-gcc\"' >> \"${CARGO_HOME}/config\" \\\n    && echo 'rustflags = [\"-L/usr/lib/{{ package_cross_compiler }}\"]' >> \"${CARGO_HOME}/config\" && rm -rf /var/lib/apt/lists/*;\n\n# Set arm specific environment values\nENV CC_{{ package_arch_target | replace(\"-\", \"_\") }}=\"/usr/bin/{{ package_cross_compiler }}-gcc\" \\\n    CROSS_COMPILE=\"1\" \\\n    OPENSSL_INCLUDE_DIR=\"/usr/include/{{ package_cross_compiler }}\" \\\n    OPENSSL_LIB_DIR=\"/usr/lib/{{ package_cross_compiler }}\"\n\n{% elif \"amd64\" in target_file %}\n# Install DB packages\nRUN apt-get update \\\n    && apt-get install -y \\\n        --no-install-recommends \\\n        libmariadb-dev{{ package_arch_prefix }} \\\n        libpq-dev{{ package_arch_prefix }} \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n{% endif %}\n\n# Creates a dummy project used to grab dependencies\nRUN USER=root cargo new --bin /app\nWORKDIR /app\n\n# Copies over *only* your manifests and build files\nCOPY ./Cargo.* ./\nCOPY ./rust-toolchain ./rust-toolchain\nCOPY ./build.rs ./build.rs\n\n{% if package_arch_target is defined %}\nRUN {{ mount_rust_cache -}} rustup target add {{ package_arch_target }}\n{% endif %}\n\n# Configure the DB ARG as late as possible to not invalidate the cached layers above\n{% if \"alpine\" in target_file %}\n# Enable MiMalloc to improve performance on Alpine builds\nARG DB=sqlite,mysql,postgresql,enable_mimalloc\n{% else %}\nARG DB=sqlite,mysql,postgresql\n{% endif %}\n\n# Builds your dependencies and removes the\n# dummy project, except the target folder\n# This folder contains the compiled dependencies\nRUN {{ mount_rust_cache -}} cargo build --features ${DB} --release{{ package_arch_target_param }} \\\n    && find . -not -path \"./target*\" -delete\n\n# Copies the complete project\n# To avoid copying unneeded files, use .dockerignore\nCOPY . .\n\n# Make sure that we actually build the project\nRUN touch src/main.rs\n\n# Builds again, this time it'll just be\n# your actual source files being built\n# hadolint ignore=DL3059\nRUN {{ mount_rust_cache -}} cargo build --features ${DB} --release{{ package_arch_target_param }}\n\n# Create a special empty file which we check within the application.\n# If this file exists, then we exit Vaultwarden to prevent data loss when someone forgets to use volumes.\n# If you really really want to use volatile storage you can set the env `I_REALLY_WANT_VOLATILE_STORAGE=true`\n# This file should disappear if a volume is mounted on-top of this using a docker volume.\n# We run this in the build image and copy it over, because the runtime image could be missing some executables.\n# hadolint ignore=DL3059\nRUN touch /vaultwarden_docker_persistent_volume_check\n\n######################## RUNTIME IMAGE  ########################\n# Create a new stage with a minimal image\n# because we already have a binary built\nFROM {{ runtime_stage_base_image }}\n\nENV ROCKET_PROFILE=\"release\" \\\n    ROCKET_ADDRESS=0.0.0.0 \\\n    ROCKET_PORT=80\n{%- if \"alpine\" in runtime_stage_base_image %} \\\n    SSL_CERT_DIR=/etc/ssl/certs\n{% endif %}\n\n\n{% if \"amd64\" not in target_file %}\n# hadolint ignore=DL3059\nRUN [ \"cross-build-start\" ]\n{% endif %}\n\n# Create data folder and Install needed libraries\nRUN mkdir /data \\\n{% if \"alpine\" in runtime_stage_base_image %}\n    && apk add --no-cache \\\n        openssl \\\n        tzdata \\\n        curl \\\n        dumb-init \\\n        ca-certificates\n{% else %}\n    && apt-get update && apt-get install -y \\\n    --no-install-recommends \\\n    openssl \\\n    ca-certificates \\\n    curl \\\n    dumb-init \\\n    libmariadb-dev-compat \\\n    libpq5 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n{% endif %}\n\n{% if \"armv6\" in target_file and \"alpine\" not in target_file %}\n# In the Balena Bullseye images for armv6/rpi-debian there is a missing symlink.\n# This symlink was there in the buster images, and for some reason this is needed.\n# hadolint ignore=DL3059\nRUN ln -v -s /lib/ld-linux-armhf.so.3 /lib/ld-linux.so.3\n\n{% endif -%}\n\n{% if \"amd64\" not in target_file %}\n# hadolint ignore=DL3059\nRUN [ \"cross-build-end\" ]\n{% endif %}\n\nVOLUME /data\nEXPOSE 80\nEXPOSE 3012\n\n# Copies the files from the context (Rocket.toml file and web-vault)\n# and the binary from the \"build\" stage to the current stage\nWORKDIR /\nCOPY --from=vault /web-vault ./web-vault\nCOPY --from=build /vaultwarden_docker_persistent_volume_check /data/vaultwarden_docker_persistent_volume_check\n{% if package_arch_target is defined %}\nCOPY --from=build /app/target/{{ package_arch_target }}/release/vaultwarden .\n{% else %}\nCOPY --from=build /app/target/release/vaultwarden .\n{% endif %}\n\nCOPY docker/healthcheck.sh /healthcheck.sh\nCOPY docker/start.sh /start.sh\n\nHEALTHCHECK --interval=60s --timeout=10s CMD [\"/healthcheck.sh\"]\n\n# Configures the startup!\n# We should be able to remove the dumb-init now with Rocket 0.5\n# But the balenalib images have some issues with there entry.sh\n# See: https://github.com/balena-io-library/base-images/issues/735\n# Lets keep using dumb-init for now, since that is working fine.\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/start.sh\"]\n"
}