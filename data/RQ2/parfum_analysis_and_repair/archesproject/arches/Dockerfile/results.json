{
  "startTime": 1674252330107,
  "endTime": 1674252331358,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 7,
        "columnEnd": 66
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 105,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 108,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 as base\nUSER root\n\n## Setting default environment variables\nENV WEB_ROOT=/web_root\n# Root project folder\nENV ARCHES_ROOT=${WEB_ROOT}/arches\nENV WHEELS=/wheels\nENV PYTHONUNBUFFERED=1\n\nRUN apt-get update && apt-get install --no-install-recommends -y make software-properties-common && rm -rf /var/lib/apt/lists/*;\n\nFROM base as wheelbuilder\n\nWORKDIR ${WHEELS}\n\n# Install pip requirements files\nCOPY ./arches/install/requirements.txt ${WHEELS}/requirements.txt\nCOPY ./arches/install/requirements_dev.txt ${WHEELS}/requirements_dev.txt\n\n# Install packages required to build the python libs, then remove them\nRUN set -ex \\\n    && BUILD_DEPS=\" \\\n        build-essential \\\n        libxml2-dev \\\n        libproj-dev \\\n        libjson-c-dev \\\n        xsltproc \\\n        docbook-xsl \\\n        docbook-mathml \\\n        libgdal-dev \\\n        libpq-dev \\\n        python3.8 \\\n        python3.8-dev \\\n        curl \\\n        python3.8-distutils \\\n        libldap2-dev libsasl2-dev ldap-utils \\\n        dos2unix \\\n        \" \\\n    && apt-get update -y \\\n    && apt-get install -y --no-install-recommends $BUILD_DEPS \\\n    && curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n    && python3.8 get-pip.py && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements.txt  \\\n    && pip3 wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements_dev.txt  \\\n    && pip3 wheel --no-cache-dir -b /tmp gunicorn \\\n    && pip3 wheel --no-cache-dir -b /tmp django-auth-ldap\n\n# Add Docker-related files\nCOPY docker/entrypoint.sh ${WHEELS}/entrypoint.sh\nRUN chmod -R 700 ${WHEELS} &&\\\n  dos2unix ${WHEELS}/*.sh\n\nFROM base\n\n# Get the pre-built python wheels from the build environment\nRUN mkdir ${WEB_ROOT}\n\nCOPY --from=wheelbuilder ${WHEELS} /wheels\n\n# Install packages required to run Arches\n# Note that the ubuntu/debian package for libgdal1-dev pulls in libgdal1i, which is built\n# with everything enabled, and so, it has a huge amount of dependancies (everything that GDAL\n# support, directly and indirectly pulling in mysql-common, odbc, jp2, perl! ... )\n# a minimised build of GDAL could remove several hundred MB from the container layer.\nRUN set -ex \\\n    && RUN_DEPS=\" \\\n        mime-support \\\n        libgdal-dev \\\n        python3-venv \\\n        postgresql-client-12 \\\n        python3.8 \\\n        python3.8-distutils \\\n        python3.8-venv \\\n    \" \\\n    && apt-get install -y --no-install-recommends curl \\\n    && curl -f -sL https://deb.nodesource.com/setup_10.x | bash - \\\n    && curl -f -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n    && add-apt-repository \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main\" \\\n    && apt-get update -y \\\n    && apt-get install -y --no-install-recommends $RUN_DEPS \\\n    && curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n    && python3.8 get-pip.py \\\n    && apt-get install --no-install-recommends -y nodejs \\\n    && npm install -g yarn && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Install Yarn components\nCOPY ./arches/install/package.json ${ARCHES_ROOT}/arches/install/package.json\nCOPY ./arches/install/.yarnrc ${ARCHES_ROOT}/arches/install/.yarnrc\nCOPY ./arches/install/yarn.lock ${ARCHES_ROOT}/arches/install/yarn.lock\nWORKDIR ${ARCHES_ROOT}/arches/install\nRUN mkdir -p ${ARCHES_ROOT}/arches/app/media/packages\nRUN yarn install && yarn cache clean;\n\n## Install virtualenv\nWORKDIR ${WEB_ROOT}\n\nRUN mv ${WHEELS}/entrypoint.sh entrypoint.sh\n\nRUN python3.8 -m venv ENV \\\n    && . ENV/bin/activate \\\n    && pip install --no-cache-dir requests \\\n    && pip install --no-cache-dir -f ${WHEELS} django-auth-ldap \\\n    && pip install --no-cache-dir -f ${WHEELS} gunicorn \\\n    && pip install --no-cache-dir -r ${WHEELS}/requirements.txt \\\n                   -f ${WHEELS} \\\n    && pip install --no-cache-dir -r ${WHEELS}/requirements_dev.txt \\\n                   -f ${WHEELS} \\\n    && rm -rf ${WHEELS} \\\n    && rm -rf /root/.cache/pip/*\n\n# Install the Arches application\n# FIXME: ADD from github repository instead?\nCOPY . ${ARCHES_ROOT}\n\n# From here, run commands from ARCHES_ROOT\nWORKDIR ${ARCHES_ROOT}\n\nRUN . ../ENV/bin/activate \\\n    && pip install --no-cache-dir -e . --no-binary :all:\n\n# Set default workdir\nWORKDIR ${ARCHES_ROOT}\n\nCOPY docker/gunicorn_config.py ${ARCHES_ROOT}/gunicorn_config.py\nCOPY docker/settings_local.py ${ARCHES_ROOT}/arches/settings_local.py\n\n# Set entrypoint\nENTRYPOINT [\"../entrypoint.sh\"]\nCMD [\"run_arches\"]\n\n# Expose port 8000\nEXPOSE 8000\n\n"
}