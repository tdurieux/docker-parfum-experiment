diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/archesproject/arches/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/archesproject/arches/Dockerfile/repaired.Dockerfile
index 4cb8380..1f60d88 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/archesproject/arches/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/archesproject/arches/Dockerfile/repaired.Dockerfile
@@ -1,4 +1,4 @@
-FROM ubuntu:18.04 as base 
+FROM ubuntu:18.04 as base
 USER root
 
 ## Setting default environment variables
@@ -8,7 +8,7 @@ ENV ARCHES_ROOT=${WEB_ROOT}/arches
 ENV WHEELS=/wheels
 ENV PYTHONUNBUFFERED=1
 
-RUN apt-get update && apt-get install -y make software-properties-common
+RUN apt-get update && apt-get install --no-install-recommends -y make software-properties-common && rm -rf /var/lib/apt/lists/*;
 
 FROM base as wheelbuilder
 
@@ -39,8 +39,8 @@ RUN set -ex \
         " \
     && apt-get update -y \
     && apt-get install -y --no-install-recommends $BUILD_DEPS \
-    && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \
-    && python3.8 get-pip.py
+    && curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py \
+    && python3.8 get-pip.py && rm -rf /var/lib/apt/lists/*;
 
 RUN pip3 wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements.txt  \
     && pip3 wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements_dev.txt  \
@@ -52,7 +52,7 @@ COPY docker/entrypoint.sh ${WHEELS}/entrypoint.sh
 RUN chmod -R 700 ${WHEELS} &&\
   dos2unix ${WHEELS}/*.sh
 
-FROM base 
+FROM base
 
 # Get the pre-built python wheels from the build environment
 RUN mkdir ${WEB_ROOT}
@@ -75,15 +75,15 @@ RUN set -ex \
         python3.8-venv \
     " \
     && apt-get install -y --no-install-recommends curl \
-    && curl -sL https://deb.nodesource.com/setup_10.x | bash - \
-    && curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
+    && curl -f -sL https://deb.nodesource.com/setup_10.x | bash - \
+    && curl -f -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
     && add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" \
     && apt-get update -y \
     && apt-get install -y --no-install-recommends $RUN_DEPS \
-    && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \
+    && curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py \
     && python3.8 get-pip.py \
-    && apt-get install -y nodejs \
-    && npm install -g yarn
+    && apt-get install --no-install-recommends -y nodejs \
+    && npm install -g yarn && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;
 
 # Install Yarn components
 COPY ./arches/install/package.json ${ARCHES_ROOT}/arches/install/package.json
@@ -91,7 +91,7 @@ COPY ./arches/install/.yarnrc ${ARCHES_ROOT}/arches/install/.yarnrc
 COPY ./arches/install/yarn.lock ${ARCHES_ROOT}/arches/install/yarn.lock
 WORKDIR ${ARCHES_ROOT}/arches/install
 RUN mkdir -p ${ARCHES_ROOT}/arches/app/media/packages
-RUN yarn install
+RUN yarn install && yarn cache clean;
 
 ## Install virtualenv
 WORKDIR ${WEB_ROOT}
@@ -100,12 +100,12 @@ RUN mv ${WHEELS}/entrypoint.sh entrypoint.sh
 
 RUN python3.8 -m venv ENV \
     && . ENV/bin/activate \
-    && pip install requests \
-    && pip install -f ${WHEELS} django-auth-ldap \
-    && pip install -f ${WHEELS} gunicorn \
-    && pip install -r ${WHEELS}/requirements.txt \
+    && pip install --no-cache-dir requests \
+    && pip install --no-cache-dir -f ${WHEELS} django-auth-ldap \
+    && pip install --no-cache-dir -f ${WHEELS} gunicorn \
+    && pip install --no-cache-dir -r ${WHEELS}/requirements.txt \
                    -f ${WHEELS} \
-    && pip install -r ${WHEELS}/requirements_dev.txt \
+    && pip install --no-cache-dir -r ${WHEELS}/requirements_dev.txt \
                    -f ${WHEELS} \
     && rm -rf ${WHEELS} \
     && rm -rf /root/.cache/pip/*
@@ -118,7 +118,7 @@ COPY . ${ARCHES_ROOT}
 WORKDIR ${ARCHES_ROOT}
 
 RUN . ../ENV/bin/activate \
-    && pip install -e . --no-binary :all:
+    && pip install --no-cache-dir -e . --no-binary :all:
 
 # Set default workdir
 WORKDIR ${ARCHES_ROOT}