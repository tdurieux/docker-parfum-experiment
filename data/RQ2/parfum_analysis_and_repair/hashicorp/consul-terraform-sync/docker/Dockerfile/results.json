{
  "startTime": 1674246461684,
  "endTime": 1674246462259,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 8,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile creates a production release image for the project. This\n# downloads the release from releases.hashicorp.com and therefore requires that\n# the release is published before building the Docker image.\n#\n# We don't rebuild the software because we want the exact checksums and\n# binary signatures to match the software and our builds aren't fully\n# reproducible currently.\nFROM alpine:3\n\n# NAME and VERSION are the name of the software in releases.hashicorp.com\n# and the version to download. Example: NAME=consul VERSION=1.2.3.\nARG NAME=consul-terraform-sync\nARG VERSION\n\nLABEL maintainer=\"Consul Team <consul@hashicorp.com>\"\nLABEL version=$VERSION\n\n# Set ARGs as ENV so that they can be used in ENTRYPOINT/CMD\nENV NAME=$NAME\nENV VERSION=$VERSION\n\n# This is the location of the releases.\nENV HASHICORP_RELEASES=https://releases.hashicorp.com\n\n# Create a non-root user to run the software.\nRUN addgroup ${NAME} && \\\n    adduser -S -G ${NAME} ${NAME}\n\n# Set up certificates, base tools, and software.\nRUN set -eux && \\\n    apk add --no-cache dumb-init git bash openssh && \\\n    apk add --no-cache ca-certificates curl gnupg libcap openssl su-exec iputils && \\\n    BUILD_GPGKEY=C874011F0AB405110D02105534365D9472D7468F; \\\n    found=''; \\\n    for server in \\\n        hkp://p80.pool.sks-keyservers.net:80 \\\n        hkp://keyserver.ubuntu.com:80 \\\n        hkp://pgp.mit.edu:80; \\\n    do \\\n        echo \"Fetching GPG key $BUILD_GPGKEY from $server\"; \\\n        gpg --batch --keyserver \"$server\" --recv-keys \"$BUILD_GPGKEY\" && found=yes && break; \\\n    done; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $BUILD_GPGKEY\" && exit 1; \\\n    mkdir -p /tmp/build && \\\n    cd /tmp/build && \\\n    apkArch=\"$(apk --print-arch)\" && \\\n    case \"${apkArch}\" in \\\n        aarch64) ARCH='arm64' ;; \\\n        armhf) ARCH='arm' ;; \\\n        x86) ARCH='386' ;; \\\n        x86_64) ARCH='amd64' ;; \\\n        *) echo >&2 \"error: unsupported architecture: ${apkArch} (see ${HASHICORP_RELEASES}/${NAME}/${VERSION}/)\" && exit 1 ;; \\\n    esac && \\\n    wget ${HASHICORP_RELEASES}/${NAME}/${VERSION}/${NAME}_${VERSION}_linux_${ARCH}.zip && \\\n    wget ${HASHICORP_RELEASES}/${NAME}/${VERSION}/${NAME}_${VERSION}_SHA256SUMS && \\\n    wget ${HASHICORP_RELEASES}/${NAME}/${VERSION}/${NAME}_${VERSION}_SHA256SUMS.sig && \\\n    gpg --batch --verify ${NAME}_${VERSION}_SHA256SUMS.sig ${NAME}_${VERSION}_SHA256SUMS && \\\n    grep ${NAME}_${VERSION}_linux_${ARCH}.zip ${NAME}_${VERSION}_SHA256SUMS | sha256sum -c && \\\n    unzip -d /bin ${NAME}_${VERSION}_linux_${ARCH}.zip && \\\n    cd /tmp && \\\n    rm -rf /tmp/build && \\\n    apk del gnupg openssl && \\\n    rm -rf /root/.gnupg\n\n### Added for CTS\nRUN mkdir -p /consul-terraform-sync/config && \\\n    chown -R ${NAME}:${NAME} /consul-terraform-sync\nVOLUME /consul-terraform-sync/config\nCOPY docker-entrypoint.sh /bin/docker-entrypoint.sh\nWORKDIR /consul-terraform-sync\nENTRYPOINT [\"/bin/docker-entrypoint.sh\"]\n###\n\nUSER ${NAME}\nCMD /bin/${NAME}\n"
}