{
  "startTime": 1674252153950,
  "endTime": 1674252154979,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 93
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile creates a production release image for the project. This\n# downloads the release from releases.hashicorp.com and therefore requires that\n# the release is published before building the Docker image.\n#\n# We don't rebuild the software because we want the exact checksums and\n# binary signatures to match the software and our builds aren't fully\n# reproducible currently.\nFROM alpine:3.13\n\n# This is the release of Consul to pull in.\nARG CONSUL_VERSION=1.10.2\n\nLABEL org.opencontainers.image.version=$CONSUL_VERSION \\\n      org.opencontainers.image.authors=\"Consul Team <consul@hashicorp.com>\" \\\n      name=\"consul\" \\\n      maintainer=\"Consul Team <consul@hashicorp.com>\" \\\n      vendor=\"HashiCorp\" \\\n      version=$CONSUL_VERSION \\\n      release=$CONSUL_VERSION \\\n      summary=\"Consul is a datacenter runtime that provides service discovery, configuration, and orchestration.\" \\\n      description=\"Consul is a datacenter runtime that provides service discovery, configuration, and orchestration.\"\n\n# This is the location of the releases.\nENV HASHICORP_RELEASES=https://releases.hashicorp.com\n\n# Create a consul user and group first so the IDs get set the same way, even as\n# the rest of this may change over time.\nRUN addgroup consul && \\\n    adduser -S -G consul consul\n\n# Set up certificates, base tools, and Consul.\n# libc6-compat is needed to symlink the shared libraries for ARM builds\nRUN set -eux && \\\n    apk add --no-cache ca-certificates curl dumb-init gnupg libcap openssl su-exec iputils jq libc6-compat iptables && \\\n    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys C874011F0AB405110D02105534365D9472D7468F && \\\n    mkdir -p /tmp/build && \\\n    cd /tmp/build && \\\n    apkArch=\"$(apk --print-arch)\" && \\\n    case \"${apkArch}\" in \\\n        aarch64) consulArch='arm64' ;; \\\n        armhf) consulArch='armhfv6' ;; \\\n        x86) consulArch='386' ;; \\\n        x86_64) consulArch='amd64' ;; \\\n        *) echo >&2 \"error: unsupported architecture: ${apkArch} (see ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/)\" && exit 1 ;; \\\n    esac && \\\n    wget ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_${consulArch}.zip && \\\n    wget ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS && \\\n    wget ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS.sig && \\\n    gpg --batch --verify consul_${CONSUL_VERSION}_SHA256SUMS.sig consul_${CONSUL_VERSION}_SHA256SUMS && \\\n    grep consul_${CONSUL_VERSION}_linux_${consulArch}.zip consul_${CONSUL_VERSION}_SHA256SUMS | sha256sum -c && \\\n    unzip -d /tmp/build consul_${CONSUL_VERSION}_linux_${consulArch}.zip && \\\n    cp /tmp/build/consul /bin/consul && \\\n    if [ -f /tmp/build/EULA.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/EULA.txt /usr/share/doc/consul/EULA.txt; fi && \\\n    if [ -f /tmp/build/TermsOfEvaluation.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/consul/TermsOfEvaluation.txt; fi && \\\n    cd /tmp && \\\n    rm -rf /tmp/build && \\\n    gpgconf --kill all && \\\n    apk del gnupg openssl && \\\n    rm -rf /root/.gnupg && \\\n# tiny smoke test to ensure the binary we downloaded runs\n    consul version\n\n# The /consul/data dir is used by Consul to store state. The agent will be started\n# with /consul/config as the configuration directory so you can add additional\n# config files in that location.\nRUN mkdir -p /consul/data && \\\n    mkdir -p /consul/config && \\\n    chown -R consul:consul /consul\n\n# Add secint prerequisites\nRUN apk add --update --no-cache go\n\n# Build secint\nCOPY ./tools/ /tools/secint/\nWORKDIR /tools/secint/\nRUN go build\n\n# set up nsswitch.conf for Go's \"netgo\" implementation which is used by Consul,\n# otherwise DNS supercedes the container's hosts file, which we don't want.\nRUN test -e /etc/nsswitch.conf || echo 'hosts: files dns' > /etc/nsswitch.conf\n\n# Expose the consul data directory as a volume since there's mutable state in there.\nVOLUME /consul/data\n\n# Server RPC is used for communication between Consul clients and servers for internal\n# request forwarding.\nEXPOSE 8300\n\n# Serf LAN and WAN (WAN is used only by Consul servers) are used for gossip between\n# Consul agents. LAN is within the datacenter and WAN is between just the Consul\n# servers in all datacenters.\nEXPOSE 8301 8301/udp 8302 8302/udp\n\n# HTTP and DNS (both TCP and UDP) are the primary interfaces that applications\n# use to interact with Consul.\nEXPOSE 8500 8600 8600/udp\n\n# Consul doesn't need root privileges so we run it as the consul user from the\n# entry point script. The entry point script also uses dumb-init as the top-level\n# process to reap any zombie processes created by Consul sub-processes.\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# By default you'll get an insecure single-node development server that stores\n# everything in RAM, exposes a web UI and HTTP endpoints, and bootstraps itself.\n# Don't use this configuration for production.\nCMD [\"agent\", \"-dev\", \"-client\", \"0.0.0.0\"]\n"
}