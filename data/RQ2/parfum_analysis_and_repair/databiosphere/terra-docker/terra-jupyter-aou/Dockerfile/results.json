{
  "startTime": 1674220244649,
  "endTime": 1674220246042,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 2,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 2,
        "columnEnd": 103
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 2,
        "columnEnd": 140
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 2,
        "columnEnd": 147
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 152
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 173,
        "lineEnd": 173,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 2,
        "columnEnd": 102
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 8,
        "columnEnd": 41
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM us.gcr.io/broad-dsp-gcr-public/terra-jupyter-gatk:2.2.7\n\nUSER root\n\n# need to apt-get everything for python since we can only copy pip installed packages\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n  jq \\\n  g++ \\\n  less \\\n  liblz4-dev \\\n  libmagick++-dev \\\n  iproute2 \\\n  # Nirvana/.NET Core dependencies \\\n  ca-certificates \\\n  libc6 \\\n  libgcc1 \\\n  libgssapi-krb5-2 \\\n  libicu60 \\\n  liblttng-ust0 \\\n  libssl1.0.0 \\\n  libstdc++6 \\\n  zlib1g \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/*\n\nENV PIP_USER=false\n\n# pandas-profiling 3.1.0 causes conflicts with pyplot\n# pandas-profiling 3.2.0 is incompatible with markupsafe 2.0.1\n# 3.0.0 (lower is untested) avoids both of these issues.\nRUN pip3 install --no-cache-dir --upgrade \\\n  \"pandas_profiling<=3.0.0\" \\\n  \"markupsafe==2.0.1\"\n\nRUN pip3 install --no-cache-dir \\\n      nbstripout \\\n      papermill \\\n      dsub \\\n      \"git+https://github.com/all-of-us/workbench-snippets.git#egg=terra_widgets&subdirectory=py\"\n\n# 2.0.0 has breaking changes and we're not ready for them yet.\nRUN pip3 install --no-cache-dir \"igv-jupyter>=1.0.0,<2.0.0\"\nRUN jupyter nbextension enable --py igv --sys-prefix\n\n# Spark/Hail setup.\n# Copied from terra-jupyter-hail; keep updated.\nENV PYTHONPATH $PYTHONPATH:/usr/lib/spark/python\n\nENV PYSPARK_PYTHON=python3\nENV HAIL_VERSION=0.2.96\n\nRUN find $JUPYTER_HOME/scripts -name '*.sh' -type f | xargs chmod +x \\\n    && $JUPYTER_HOME/scripts/kernel/kernelspec.sh $JUPYTER_HOME/scripts/kernel /opt/conda/share/jupyter/kernels \\\n    # Note Spark and Hadoop are mounted from the outside Dataproc VM.\n    # Make empty conf dirs for the update-alternatives commands.\n    && mkdir -p /etc/spark/conf.dist && mkdir -p /etc/hadoop/conf.empty && mkdir -p /etc/hive/conf.dist \\\n    && update-alternatives --install /etc/spark/conf spark-conf /etc/spark/conf.dist 100 \\\n    && update-alternatives --install /etc/hadoop/conf hadoop-conf /etc/hadoop/conf.empty 100 \\\n    && update-alternatives --install /etc/hive/conf hive-conf /etc/hive/conf.dist 100 \\\n    && apt-get update \\\n    && apt install -yq --no-install-recommends \\\n        g++ \\\n        liblz4-dev \\\n    && pip3 install --no-cache-dir pypandoc gnomad \\\n    && pip3 install --no-cache-dir --no-dependencies hail==$HAIL_VERSION \\\n    && X=$(mktemp -d) \\\n    && requirements_file=$(mktemp) \\\n    && mkdir -p $X \\\n    && ( cd $X && pip3 download hail==$HAIL_VERSION --no-dependencies && \\\n        unzip hail*.whl && \\\n        grep 'Requires-Dist: ' hail*dist-info/METADATA | sed 's/Requires-Dist: //' | sed 's/ (//' | sed 's/)//' | grep -v 'pyspark' >$requirements_file && \\\n        pip install --no-cache-dir -r $requirements_file) \\\n    && rm -rf $X \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Wondershaper from source, for client-side egress limiting.\nRUN cd /usr/local/share && \\\n  git clone https://github.com/magnific0/wondershaper.git --depth 1 && \\\n  cd wondershaper && \\\n  make install && \\\n  cd $HOME\n\n# Plink install\nENV PLINK_VERSION 20210416\nRUN mkdir -p /tmp/plink && \\\n  cd /tmp/plink && \\\n  curl -f -L -o plink.zip \"https://s3.amazonaws.com/plink1-assets/plink_linux_x86_64_${PLINK_VERSION}.zip\" && \\\n  unzip plink.zip && \\\n  mv plink /bin/plink && \\\n  cd $HOME && \\\n  rm -rf /tmp/plink\n\nRUN mkdir -p /tmp/plink2 && \\\n  cd /tmp/plink2 && \\\n  curl -f -L -o plink2.zip \"https://s3.amazonaws.com/plink2-assets/alpha2/plink2_linux_x86_64.zip\" && \\\n  unzip plink2.zip && \\\n  mv plink2 /bin/plink2 && \\\n  cd $HOME && \\\n  rm -rf /tmp/plink2\n\nRUN mkdir -p /tmp/prsice && \\\n  cd /tmp/prsice && \\\n  curl -f -L -o prsice.zip https://github.com/choishingwan/PRSice/releases/download/2.3.5/PRSice_linux.zip && \\\n  unzip prsice.zip && \\\n  rm prsice.zip && \\\n  cd $HOME && \\\n  mv /tmp/prsice /opt/prsice && \\\n  ln -s \"/opt/prsice/PRsice_linux\" /bin/prsice\n\n# BOLT-LMM install\nENV BOLT_LMM_VERSION v2.3.6\nRUN mkdir -p /tmp/bolt-lmm && \\\n  cd /tmp/bolt-lmm && \\\n  curl -f -L -o bolt-lmm.tar.gz \"https://storage.googleapis.com/broad-alkesgroup-public/BOLT-LMM/downloads/BOLT-LMM_${BOLT_LMM_VERSION}.tar.gz\" && \\\n  tar -xvzf bolt-lmm.tar.gz && \\\n  mv \"BOLT-LMM_${BOLT_LMM_VERSION}\" /opt/bolt-lmm && \\\n  ln -s \"/opt/bolt-lmm/bolt\" /bin/bolt && \\\n  cd $HOME && \\\n  rm -rf /tmp/bolt-lmm && rm bolt-lmm.tar.gz\n\n# REGENIE install\nENV REGENIE_VERSION v2.0.2\nRUN mkdir -p /tmp/regenie && \\\n  cd /tmp/regenie && \\\n  curl -f -L -o regenie.zip \"https://github.com/rgcgithub/regenie/releases/download/${REGENIE_VERSION}/regenie_${REGENIE_VERSION}.gz_x86_64_Linux.zip\" && \\\n  unzip regenie.zip && \\\n  mv regenie_${REGENIE_VERSION}.gz_x86_64_Linux /bin/regenie && \\\n  cd $HOME && \\\n  rm -rf /tmp/regenie\n\n# Install .NET Core + Nirvana\nENV DOTNET_VERSION=2.1.26\nENV NIRVANA_VERSION 3.14.0\nENV NIRVANA_ZIP_URL=\"https://github.com/Illumina/Nirvana/releases/download/v${NIRVANA_VERSION}/Nirvana-${NIRVANA_VERSION}-dotnet-2.1.0.zip\"\n\n# Based on https://github.com/MichaelStromberg-Illumina/DotNetMisc/blob/master/Dockerfiles/Nirvana/Dockerfile#L13\nRUN curl -f -SL --output dotnet.tar.gz \"https://dotnetcli.azureedge.net/dotnet/Runtime/${DOTNET_VERSION}/dotnet-runtime-${DOTNET_VERSION}-linux-x64.tar.gz\" \\\n    && dotnet_sha512='41cc13f14dd7721a079bdd0ab489de40e9d4f32787239a26e7d10fcb0020a8e78d446c3b430b4bf80a557a925b3ca87d7981bfda4bbf9495cc44b1d42d877c40' \\\n    && echo \"${dotnet_sha512} dotnet.tar.gz\" | sha512sum -c - \\\n    && mkdir -p /usr/share/dotnet \\\n    && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n    && rm dotnet.tar.gz \\\n    && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet \\\n    && mkdir -p /opt/nirvana \\\n    && curl -f -SL --output nirvana.zip $NIRVANA_ZIP_URL \\\n    && unzip -d /opt/nirvana nirvana.zip \\\n    && rm nirvana.zip\n\nENV GCTA_VERSION=v1.94.0Beta\nRUN mkdir -p /tmp/gcta && \\\n    cd /tmp/gcta && \\\n    curl -f -L -o gcta.zip \"https://yanglab.westlake.edu.cn/software/gcta/bin/gcta_${GCTA_VERSION}_linux_kernel_4_x86_64.zip\" && \\\n    unzip gcta.zip && \\\n    mv \"gcta_${GCTA_VERSION}_linux_kernel_4_x86_64/gcta_${GCTA_VERSION}_linux_kernel_4_x86_64_static\" /bin/gcta && \\\n    cd $HOME && \\\n    rm -rf /tmp/gcta\n\n# Install bcftools\nRUN mkdir -p /tmp/bcftools && \\\n    cd /tmp/bcftools && \\\n    curl -f -L -o bcftools.tar.bz2 https://github.com/samtools/bcftools/releases/download/1.12/bcftools-1.12.tar.bz2 && \\\n    bzip2 -d bcftools.tar.bz2 && \\\n    tar xvf bcftools.tar && \\\n    cd bcftools-1.12 && \\\n    make && \\\n    make install && \\\n    cd $HOME && \\\n    rm -rf /tmp/bcftools && rm bcftools.tar\n\n# Install vcftools\nRUN mkdir -p /tmp/vcftools && \\\n    cd /tmp/vcftools && \\\n    curl -f -L -o vcftools.tar.gz https://github.com/vcftools/vcftools/releases/download/v0.1.16/vcftools-0.1.16.tar.gz && \\\n    tar xvzf vcftools.tar.gz && \\\n    cd vcftools-0.1.16 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    make install && \\\n    cd $HOME && \\\n    rm -rf /tmp/vcftools && rm vcftools.tar.gz\n\nRUN R -e 'BiocManager::install(c(\"GENESIS\"))'\n\n# TODO(IA-3261): Remove this hack, and just conda install normally. R SAIGE\n# unfortunately is difficult to install outside of conda. Conda is also not\n# fully supported on the terra-docker base image. Here we workaround this by\n# installing (as root) via conda, and including the R lib path. Order is\n# important here, as packages.install() will target the first path in this list,\n# and the jupyter user will have readonly access to the conda path.\nENV R_LIBS /usr/local/lib/R/site-library:/opt/conda/lib/R/library\nRUN conda install -c bioconda r-saige\n\nENV PIP_USER=true\nUSER $USER\n"
}