{
  "startTime": 1674253754779,
  "endTime": 1674253756212,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 178
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# adapted from https://hub.docker.com/r/jupyter/base-notebook/ AKA https://github.com/jupyter/docker-stacks/tree/master/base-notebook\n\nFROM gcr.io/deeplearning-platform-release/tf-gpu.2-7\n\nUSER root\n\n#######################\n# Prerequisites\n#######################\nENV DEBIAN_FRONTEND noninteractive\n\nRUN sudo -i \\\n    echo \"deb http://security.ubuntu.com/ubuntu/ bionic main\" >> /etc/apt/sources.list \\\n    sudo apt update libexempi3\n\nRUN sudo -i \\\n    echo \"deb http://us.archive.ubuntu.com/ubuntu/ bionic universe\" >> /etc/apt/sources.list \\\n    sudo apt update libv8-3.14-dev\n\n# nvidia is updating and rotating the signing keys used by the apt, dnf/yum, and zypper package managers beginning April 27, 2022\n# see article: https://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/\n# first we remove the bad keys from base image (https://github.com/NVIDIA/nvidia-docker/issues/1631#issuecomment-1112828208)\nRUN rm /etc/apt/sources.list.d/cuda.list \\\n    && rm /etc/apt/sources.list.d/nvidia-ml.list \\\n    && sudo apt-key del 7fa2af80 \\\n    && curl -f -L -O https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb \\\n    && sudo dpkg -i cuda-keyring_1.0-1_all.deb\n\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n    # gnupg requirement\n    dirmngr \\\n    gnupg \\\n    # curl requirement\n    ca-certificates \\\n    # useful utilities for debugging within the docker\n    nano \\\n    procps \\\n    lsb-release \\\n    # python requirements\n    checkinstall \\\n    build-essential \\\n    zlib1g-dev \\\n    # pip requirements\n    libssl-dev \\\n    libbz2-dev \\\n    libreadline-dev \\\n    libsqlite3-dev \\\n    llvm \\\n    libncurses5-dev \\\n    libncursesw5-dev \\\n    tk-dev \\\n    libffi-dev \\\n    liblzma-dev \\\n    python-openssl \\\n    libexempi3 \\\n    libv8-3.14-dev \\\n    # install script requirements\n    sudo \\\n    locales \\\n    # for ssh-agent and ssh-add\n    keychain \\\n    # openjdk 11\n    default-jre \\\n    default-jdk \\\n # Uncomment en_US.UTF-8 for inclusion in generation\n && sed -i 's/^# *\\(en_US.UTF-8\\)/\\1/' /etc/locale.gen \\\n # Generate locale\n && locale-gen \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nENV LC_ALL en_US.UTF-8\n\n#######################\n# Python / Jupyter\n#######################\n\nENV USER jupyter\nRUN usermod -g users jupyter\nENV HOME /home/$USER\n\n# The welder uid is consistent with the Welder docker definition here:\n#  https://github.com/DataBiosphere/welder/blob/master/project/Settings.scala\n# Adding welder-user to the Jupyter container isn't strictly required, but it makes welder-added\n# files display nicer when viewed in a terminal.\nENV WELDER_USER welder-user\nENV WELDER_UID 1001\nRUN useradd -m -s /bin/bash -N -u $WELDER_UID $WELDER_USER\n\n# ensure this matches c.NotebookApp.port in jupyter_notebook_config.py\nENV JUPYTER_PORT 8000\nENV JUPYTER_HOME /etc/jupyter\n\nRUN pip3 -V \\\n # When we upgraded from jupyter 5.7.8 to 6.1.1, we broke terminal button on terra-ui.\n # Hence, make sure to manually test out \"launch terminal\" button (the button in the green bar next to start and stop buttons)\n # to make sure we don't accidentally break it every time we upgrade notebook version until we figure out an automation test for this \\\n && pip3 install --no-cache-dir python-datauri \\\n && pip3 install --no-cache-dir jupyter_contrib_nbextensions \\\n && pip3 install --no-cache-dir jupyter_nbextensions_configurator \\\n && pip3 install --no-cache-dir markupsafe==2.0.1 \\\n # Avoid broken lower versions: https://github.com/jupyter/nbconvert/pull/1624\n && pip3 install --no-cache-dir \"nbconvert>=6.4.5\" \\\n # for jupyter_delocalize.py and jupyter_notebook_config.py\n && pip3 install --no-cache-dir requests \\\n && pip3 install --no-cache-dir firecloud \\\n && pip3 install --no-cache-dir terra-notebook-utils \\\n && pip3 install --no-cache-dir crcmod \\\n # For gcloud alpha storage support.\n && pip3 install --no-cache-dir google-crc32c --target /usr/lib/google-cloud-sdk/lib/third_party\n\n# install Cromshell 2.0\nRUN git clone https://github.com/broadinstitute/cromshell.git \\\n && cd cromshell \\\n && git checkout cromshell_2.0 \\\n && pip install --no-cache-dir .\n\n# verify cromshell 2.0 is installed\nRUN cromshell-alpha version\n\n# tmp hack min-5\n# I'm not installing jupyterlab and I can't update init-actions.sh to not access it\nRUN mkdir -p /usr/local/share/jupyter/lab\n\n# make pip install to a user directory, instead of a system directory which requires root.\n# this is useful so `pip install` commands can be run in the context of a notebook.\nENV PIP_USER=true\n# When using PIP_USER=true packages are installed into Python site.USER_BASE, which is '/home/jupyter' for this system.\n# Append '/home/jupyter/.local/bin' to PATH\n# pip docs: https://pip.pypa.io/en/stable/reference/pip_install/#cmdoption-user\nENV PATH=\"${PATH}:${HOME}/.local/bin:${HOME}/packages/bin\"\n\n#######################\n# Utilities\n#######################\n\nCOPY scripts $JUPYTER_HOME/scripts\nCOPY custom $JUPYTER_HOME/custom\nCOPY jupyter_notebook_config.py $JUPYTER_HOME\n\n# copy workspace_cromwell.py script and make it runnable by all users\nRUN curl -f -o /usr/local/bin/workspace_cromwell.py https://raw.githubusercontent.com/broadinstitute/cromwhelm/1ceedf89587cffd355f37401b179001f029f77ed/scripts/workspace_cromwell.py \\\n && chmod +x /usr/local/bin/workspace_cromwell.py\n\nRUN chown -R $USER:users $JUPYTER_HOME \\\n# Disable nb_conda for now. Consider re-enable in the future\n && jupyter nbextension disable nb_conda --py --sys-prefix \\\n && find $JUPYTER_HOME/scripts -name '*.sh' -type f | xargs chmod +x \\\n#  You can get kernel directory by running `jupyter kernelspec list`\n && $JUPYTER_HOME/scripts/kernel/kernelspec.sh $JUPYTER_HOME/scripts/kernel /opt/conda/share/jupyter/kernels\n\nUSER $USER\nEXPOSE $JUPYTER_PORT\nWORKDIR $HOME\n\n# Note: this entrypoint is provided for running Jupyter independently of Leonardo.\n# When Leonardo deploys this image onto a cluster, the entrypoint is overwritten to enable\n# additional setup inside the container before execution.  Jupyter execution occurs when the\n# init-actions.sh script uses 'docker exec' to call run-jupyter.sh.\nENTRYPOINT [\"/opt/conda/bin/jupyter\", \"notebook\"]\n"
}