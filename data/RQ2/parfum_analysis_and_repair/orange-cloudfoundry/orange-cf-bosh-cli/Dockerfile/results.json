{
  "startTime": 1674246027572,
  "endTime": 1674246031352,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 60,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 120,
        "columnEnd": 148
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 36,
        "columnEnd": 163
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 35,
        "columnEnd": 169
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 36,
        "columnEnd": 153
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 47,
        "columnEnd": 209
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 34,
        "columnEnd": 153
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 45,
        "columnEnd": 189
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 39,
        "columnEnd": 178
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 36,
        "columnEnd": 154
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 35,
        "columnEnd": 154
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 172,
        "columnEnd": 230
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 43,
        "columnEnd": 164
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 36,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 37,
        "columnEnd": 165
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 36,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 34,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 36,
        "columnEnd": 149
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 37,
        "columnEnd": 179
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 36,
        "columnEnd": 149
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 36,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 39,
        "columnEnd": 176
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 41,
        "columnEnd": 200
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 35,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 37,
        "columnEnd": 120
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 43,
        "columnEnd": 135
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 43,
        "columnEnd": 180
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 34,
        "columnEnd": 142
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 37,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 38,
        "columnEnd": 168
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 38,
        "columnEnd": 166
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 37,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 41,
        "columnEnd": 181
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 35,
        "columnEnd": 177
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 38,
        "columnEnd": 174
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 41,
        "columnEnd": 180
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 35,
        "columnEnd": 144
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 42,
        "columnEnd": 56
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 102,
        "columnEnd": 116
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 AS orange_cli\nUSER root\nARG DEBIAN_FRONTEND=noninteractive\n\n#--- clis versions\nENV ARGO_CLI_VERSION=\"3.3.8\" \\\n    BBR_VERSION=\"1.9.20\" \\\n    BOSH_CLI_VERSION=\"7.0.1\" \\\n    BOSH_CLI_COMPLETION_VERSION=\"1.2.0\" \\\n    BOSH_GEN_VERSION=\"0.101.1\" \\\n    CF_CLI_VERSION=\"8.4.0\" \\\n    CF_UAAC_VERSION=\"4.5.0\" \\\n    CREDHUB_VERSION=\"2.9.3\" \\\n    FLUX_VERSION=\"0.29.5\" \\\n    FLY_VERSION=\"7.6.0\" \\\n    GOVC_VERSION=\"0.29.0\" \\\n    GO3FR_VERSION=\"0.5.0\" \\\n    HELM_VERSION=\"3.8.2\" \\\n    JQ_VERSION=\"1.6\" \\\n    KAPP_VERSION=\"0.49.0\" \\\n    KCTRL_VERSION=\"0.38.4\" \\\n    KLBD_VERSION=\"0.34.0\" \\\n    KREW_VERSION=\"0.4.3\" \\\n    KUBECTL_VERSION=\"1.22.10\" \\\n    KUSTOMIZE_VERSION=\"4.5.5\" \\\n    K9S_VERSION=\"0.25.21\" \\\n    MONGO_SHELL_VERSION=\"4.0.25\" \\\n    MYSQL_SHELL_VERSION=\"8.0.25-1\" \\\n    REDIS_CLI_VERSION=\"6.2.4\" \\\n    RUBY_BUNDLER_VERSION=\"1.17.3\" \\\n    RUBY_DRY_INFLECTOR_VERSION=\"0.2.1\" \\\n    RUBY_VERSION=\"2.6.5\" \\\n    SHIELD_VERSION=\"8.7.4\" \\\n    SPRUCE_VERSION=\"1.29.0\" \\\n    SVCAT_VERSION=\"0.3.1\" \\\n    TERRAFORM_PLUGIN_CF_VERSION=\"0.11.2\" \\\n    TERRAFORM_VERSION=\"0.11.14\" \\\n    TFO_CLI_VERSION=\"1.1.3\" \\\n    VENDIR_VERSION=\"0.28.1\" \\\n    YAML_PATH_VERSION=\"0.4\" \\\n    YTT_VERSION=\"0.41.1\"\n\n#--- Packages list, ruby env for COA and cf plugins\nENV INIT_PACKAGES=\"apt-transport-https ca-certificates curl openssh-server openssl sudo unzip wget\" \\\n    TOOLS_PACKAGES=\"apg bash-completion colordiff git-core gnupg less locales nano python3-tabulate python3-openstackclient s3cmd silversearcher-ag supervisor tmux byobu yarnpkg vim\" \\\n    NET_PACKAGES=\"dnsutils iproute2 iputils-ping iputils-tracepath traceroute tcptraceroute ldap-utils mtr-tiny netbase netcat net-tools tcpdump whois iperf3\" \\\n    DEV_PACKAGES=\"python-dev build-essential libc6-dev libffi-dev libssl-dev libxml2-dev libxslt1-dev libpq-dev libsqlite3-dev libmysqlclient-dev zlib1g-dev libcurl4-openssl-dev\" \\\n    RUBY_PACKAGES=\"gawk g++ gcc autoconf automake bison libgdbm-dev libncurses5-dev libtool libyaml-dev pkg-config sqlite3 libgmp-dev libreadline6-dev\" \\\n    PATH=\"/usr/local/rvm/gems/ruby-${RUBY_VERSION}/bin:/usr/local/rvm/gems/ruby-${RUBY_VERSION}@global/bin:/usr/local/rvm/rubies/ruby-${RUBY_VERSION}/bin:${PATH}\" \\\n    GEM_HOME=\"/usr/local/rvm/gems/ruby-${RUBY_VERSION}\" \\\n    GEM_PATH=\"/usr/local/rvm/gems/ruby-${RUBY_VERSION}:/usr/local/rvm/gems/ruby-${RUBY_VERSION}@global\" \\\n    CF_PLUGINS=\"CLI-Recorder,doctor,manifest-generator,Statistics,Targets,Usage Report\" \\\n    KUBECTL_PLUGINS=\"get-all,ctx,ns\"\n\nADD bosh-cli/* /tmp/bosh-cli/\n\nRUN printf '\\n=====================================================\\n Install system packages\\n=====================================================\\n' && \\\n    apt-get update && apt-get install -y --no-install-recommends apt-utils dialog && \\\n    apt-get install -y --no-install-recommends ${INIT_PACKAGES} ${TOOLS_PACKAGES} ${NET_PACKAGES} ${DEV_PACKAGES} ${RUBY_PACKAGES} && \\\n    cp /usr/bin/chardetect3 /usr/local/bin/chardetect && \\\n    printf '\\n=====================================================\\n Install ruby tools\\n=====================================================\\n' && \\\n    curl -f -sSL https://rvm.io/mpapis.asc | gpg --batch --import - && curl -f -sSL https://rvm.io/pkuczynski.asc | gpg --batch --import - && curl -f -sSL https://get.rvm.io | bash -s stable && \\\n    /bin/bash -l -c \"source /etc/profile.d/rvm.sh ; rvm install ${RUBY_VERSION}\" && \\\n    /bin/bash -l -c \"gem install bundler -v ${RUBY_BUNDLER_VERSION} --no-document\" && \\\n    /bin/bash -l -c \"gem install dry-inflector -v ${RUBY_DRY_INFLECTOR_VERSION} --no-document\" && \\\n    /bin/bash -l -c \"gem install bosh-gen -v ${BOSH_GEN_VERSION} --no-document\" && \\\n    /bin/bash -l -c \"gem install cf-uaac -v ${CF_UAAC_VERSION} --no-document\" && \\\n    /bin/bash -l -c \"gem install mdless --no-document\" && \\\n    /bin/bash -l -c \"rvm cleanup all\" && \\\n    printf '\\n=====================================================\\n Setup bosh account, ssh and supervisor\\n=====================================================\\n' && \\\n    echo \"root:$(date +%s | sha256sum | base64 | head -c 32 ; echo)\" | chpasswd && \\\n    useradd -m -g users -G sudo,rvm -s /bin/bash bosh && echo \"bosh ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/bosh && \\\n    echo \"bosh:$(date +%s | sha256sum | base64 | head -c 32 ; echo)\" | chpasswd && \\\n    mkdir -p /var/run/sshd /var/log/supervisor /data/shared && \\\n    sed -i 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd && \\\n    sed -i 's/^PermitRootLogin .*/PermitRootLogin no/g' /etc/ssh/sshd_config && \\\n    sed -i 's/^ChallengeResponseAuthentication .*/ChallengeResponseAuthentication no/g' /etc/ssh/sshd_config && \\\n    sed -i 's/^PubkeyAuthentication .*/PubkeyAuthentication yes/g' /etc/ssh/sshd_config && \\\n    sed -i 's/^.*PasswordAuthentication yes.*/PasswordAuthentication no/g' /etc/ssh/sshd_config && \\\n    sed -i 's/.*\\[supervisord\\].*/&\\nnodaemon=true\\nloglevel=debug/' /etc/supervisor/supervisord.conf && \\\n    printf '\\n=====================================================\\n Install ops tools\\n=====================================================\\n' && \\\n    printf '\\n=> Add ARGO-CLI\\n' && curl -f -sSLo /tmp/argo.gz \"https://github.com/argoproj/argo-workflows/releases/download/v${ARGO_CLI_VERSION}/argo-linux-amd64.gz\" && gunzip /tmp/argo.gz && mv /tmp/argo /usr/local/bin/argo && chmod 755 /usr/local/bin/argo && \\\n    printf '\\n=> Add BBR-CLI\\n' && curl -f -sSL \"https://github.com/cloudfoundry-incubator/bosh-backup-and-restore/releases/download/v${BBR_VERSION}/bbr-${BBR_VERSION}.tar\" | tar -x -C /tmp && mv /tmp/releases/bbr /usr/local/bin/bbr && \\\n    printf '\\n=> Add BOSH-CLI\\n' && curl -f -sSLo /usr/local/bin/bosh \"https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-${BOSH_CLI_VERSION}-linux-amd64\" && \\\n    printf '\\n=> Add BOSH-CLI completion\\n' && curl -f -sSLo /home/bosh/bosh-complete-linux \"https://github.com/thomasmmitchell/bosh-complete/releases/download/v${BOSH_CLI_COMPLETION_VERSION}/bosh-complete-linux\" && chmod 755 /home/bosh/bosh-complete-linux && \\\n    printf '\\n=> Add CF-CLI\\n' && curl -f -sSL \"https://packages.cloudfoundry.org/stable?release=linux64-binary&version=${CF_CLI_VERSION}&source=github-rel\" | tar -xz -C /tmp && mv /tmp/cf8 /usr/local/bin/cf && \\\n    printf '\\n=> Add CF-CLI completion\\n' && curl -f -sSLo /usr/share/bash-completion/completions/cf \"https://raw.githubusercontent.com/cloudfoundry/cli-ci/master/ci/installers/completion/cf7\" && \\\n    printf '\\n=> Add CF-PLUGINS\\n' && su -l bosh -s /bin/bash -c \"export IFS=, ; for plugin in \\$(echo \\\"${CF_PLUGINS}\\\") ; do cf install-plugin \\\"\\${plugin}\\\" -r CF-Community -f ; done\" && \\\n    printf '\\n=> Add CMDB-CLI-FUNCTIONS\\n' && git clone --depth 1 https://github.com/orange-cloudfoundry/cf-cli-cmdb-scripts.git /tmp/cf-cli-cmdb-scripts && mv /tmp/cf-cli-cmdb-scripts/cf-cli-cmdb-functions.bash /usr/local/bin/cf-cli-cmdb-functions.bash && \\\n    printf '\\n=> Add CREDHUB-CLI\\n' && curl -f -sSL \"https://github.com/cloudfoundry-incubator/credhub-cli/releases/download/${CREDHUB_VERSION}/credhub-linux-${CREDHUB_VERSION}.tgz\" | tar -xz -C /usr/local/bin && \\\n    printf '\\n=> Add FLUX-CLI\\n' && curl -f -sSL \"https://github.com/fluxcd/flux2/releases/download/v${FLUX_VERSION}/flux_${FLUX_VERSION}_linux_amd64.tar.gz\" | tar -xz -C /usr/local/bin && \\\n    printf '\\n=> Add FLY-CLI\\n' && curl -f -sSL \"https://github.com/concourse/concourse/releases/download/v${FLY_VERSION}/fly-${FLY_VERSION}-linux-amd64.tgz\" | tar -xz -C /usr/local/bin && \\\n    printf '\\n=> Add GCLOUD-CLI\\n' && echo \"deb https://packages.cloud.google.com/apt cloud-sdk main\" > /etc/apt/sources.list.d/google-cloud-sdk.list && chmod 1777 /tmp && curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && apt-get update && apt-get install -y --no-install-recommends google-cloud-cli && \\\n    printf '\\n=> Add GIT-FILTER-REPO\\n' && curl -f -sSLo /usr/local/bin/git-filter-repo \"https://raw.githubusercontent.com/newren/git-filter-repo/main/git-filter-repo\" && \\\n    printf '\\n=> Add GOVC-CLI\\n' && curl -f -sSL \"https://github.com/vmware/govmomi/releases/download/v${GOVC_VERSION}/govc_Linux_x86_64.tar.gz\" | tar -xz -C /tmp && mv /tmp/govc /usr/local/bin/govc && \\\n    printf '\\n=> Add GO3FR-CLI\\n' && curl -f -sSL \"https://github.com/rlmcpherson/s3gof3r/releases/download/v${GO3FR_VERSION}/gof3r_${GO3FR_VERSION}_linux_amd64.tar.gz\" | tar -xz -C /tmp && mv /tmp/gof3r_${GO3FR_VERSION}_linux_amd64/gof3r /usr/local/bin/go3fr && \\\n    printf '\\n=> Add HELM-CLI\\n' && curl -f -sSL \"https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz\" | tar -xz -C /tmp && mv /tmp/linux-amd64/helm /usr/local/bin/helm && chmod 755 /usr/local/bin/helm && \\\n    printf '\\n=> Add HELM-CLI completion\\n' && /usr/local/bin/helm completion bash > /etc/bash_completion.d/helm && \\\n    printf '\\n=> Add JQ-CLI\\n' && curl -f -sSLo /usr/local/bin/jq \"https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64\" && \\\n    printf '\\n=> Add KAPP-CLI\\n' && curl -f -sSLo /usr/local/bin/kapp \"https://github.com/k14s/kapp/releases/download/v${KAPP_VERSION}/kapp-linux-amd64\" && \\\n    printf '\\n=> Add KCTRL-CLI\\n' && curl -f -sSLo /usr/local/bin/kctrl \"https://github.com/vmware-tanzu/carvel-kapp-controller/releases/download/v${KCTRL_VERSION}/kctrl-linux-amd64\" && \\\n    printf '\\n=> Add KLBD-CLI\\n' && curl -f -sSLo /usr/local/bin/klbd \"https://github.com/k14s/kbld/releases/download/v${KLBD_VERSION}/kbld-linux-amd64\" && \\\n    printf '\\n=> Add KREW-CLI\\n' && curl -f -sSL \"https://github.com/kubernetes-sigs/krew/releases/download/v${KREW_VERSION}/krew-linux_amd64.tar.gz\" | tar -xz -C /tmp && chmod 1777 /tmp && \\\n    printf '\\n=> Add KUBECTL-CLI\\n' && curl -f -sSLo /usr/local/bin/kubectl \"https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl\" && chmod 755 /usr/local/bin/kubectl && \\\n    printf '\\n=> Add KUBECTL-CLI completion\\n' && /usr/local/bin/kubectl completion bash > /etc/bash_completion.d/kubectl && kubectl completion bash | sed -e \"s+kubectl+k+g\" > /etc/bash_completion.d/k && \\\n    printf '\\n=> Add KUBECTL_PLUGINS\\n' && su -l bosh -s /bin/bash -c \"export KREW_ROOT=/home/bosh/.krew ; export PATH=/home/bosh/.krew/bin:${PATH} ; /tmp/krew-linux_amd64 install krew ; export IFS=, ; for plugin in \\$(echo \\\"${KUBECTL_PLUGINS}\\\") ; do kubectl krew install \\${plugin} ; done\" && \\\n    printf '\\n=> Add KUSTOMIZE-CLI\\n' && curl -f -sSL \"https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz\" | tar -xz -C /tmp && mv /tmp/kustomize /usr/local/bin/kustomize && \\\n    printf '\\n=> Add KUSTOMIZE-CLI completion\\n' && /usr/local/bin/kustomize completion bash > /etc/bash_completion.d/kustomize && \\\n    printf '\\n=> Add K9S-CLI\\n' && curl -f -sSL \"https://github.com/derailed/k9s/releases/download/v${K9S_VERSION}/k9s_Linux_x86_64.tar.gz\" | tar -xz -C /tmp && mv /tmp/k9s /usr/local/bin/k9s && \\\n    printf '\\n=> Add MINIO-CLI\\n' && curl -f -sSLo /usr/local/bin/mc \"https://dl.minio.io/client/mc/release/linux-amd64/mc\" && \\\n    printf '\\n=> Add MONGO-SHELL-CLI\\n' && curl -f -sSL \"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-${MONGO_SHELL_VERSION}.tgz\" | tar -xz -C /tmp && cd /tmp/mongodb-linux-x86_64-${MONGO_SHELL_VERSION}/bin && mv mongo mongostat mongotop /usr/local/bin && \\\n    printf '\\n=> Add MYSQL-SHELL-CLI\\n' && curl -f -sSLo /tmp/mysql-shell.deb \"https://dev.mysql.com/get/Downloads/MySQL-Shell/mysql-shell_${MYSQL_SHELL_VERSION}ubuntu20.04_amd64.deb\" && dpkg -i /tmp/mysql-shell.deb && \\\n    printf '\\n=> Add OC-CLI\\n' && curl -f -sSL \"https://downloads-openshift-console.apps.rh-gcp-csf.a3rr.p2.openshiftapps.com/amd64/linux/oc.tar\" | tar -x -C /tmp && mv /tmp/oc /usr/local/bin/oc && \\\n    printf '\\n=> Add OC-CLI completion\\n' && /usr/local/bin/oc completion bash > /etc/bash_completion.d/oc && \\\n    printf '\\n=> Add REDIS-CLI\\n' && curl -f -sSL \"https://download.redis.io/releases/redis-${REDIS_CLI_VERSION}.tar.gz\" | tar -xz -C /tmp && cd /tmp/redis-${REDIS_CLI_VERSION} && make > /dev/null 2>&1 && mv /tmp/redis-${REDIS_CLI_VERSION}/src/redis-cli /usr/local/bin/redis && chmod 755 /usr/local/bin/redis && \\\n    printf '\\n=> Add SHIELD-CLI\\n' && curl -f -sSLo /usr/local/bin/shield \"https://github.com/shieldproject/shield/releases/download/v${SHIELD_VERSION}/shield-linux-amd64\" && \\\n    printf '\\n=> Add SPRUCE-CLI\\n' && curl -f -sSLo /usr/local/bin/spruce \"https://github.com/geofffranks/spruce/releases/download/v${SPRUCE_VERSION}/spruce-linux-amd64\" && \\\n    printf '\\n=> Add SVCAT-CLI\\n' && curl -f -sSLo /usr/local/bin/svcat \"https://download.svcat.sh/cli/v${SVCAT_VERSION}/linux/amd64/svcat\" && \\\n    printf '\\n=> Add TERRAFORM-CLI\\n' && curl -f -sSLo /tmp/terraform.zip \"https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\" && unzip -q /tmp/terraform.zip -d /usr/local/bin && \\\n    printf '\\n=> Add TERRAFORM-CF-PROVIDER\\n' && export PROVIDER_CLOUDFOUNDRY_VERSION=\"v${TERRAFORM_PLUGIN_CF_VERSION}\" && /bin/bash -c \"$(wget https://raw.github.com/orange-cloudfoundry/terraform-provider-cloudfoundry/master/bin/install.sh -O -)\" && \\\n    printf '\\n=> Add TFO-CLI\\n' && curl -f -sSL \"https://github.com/isaaguilar/terraform-operator-cli/releases/download/v${TFO_CLI_VERSION}/tfo-v${TFO_CLI_VERSION}-linux-amd64.tgz\" | tar -xz -C /usr/local/bin && \\\n    printf '\\n=> Add VENDIR-CLI\\n' && curl -f -sSLo /usr/local/bin/vendir \"https://github.com/vmware-tanzu/carvel-vendir/releases/download/v${VENDIR_VERSION}/vendir-linux-amd64\" && \\\n    printf '\\n=> Add YAML-PATH-CLI\\n' && curl -f -sSL \"https://github.com/psycofdj/yaml-path/releases/download/v${YAML_PATH_VERSION}/yaml-path-${YAML_PATH_VERSION}.linux-amd64.tar.gz\" | tar -xz -C /tmp && mv /tmp/yaml-path-${YAML_PATH_VERSION}.linux-amd64/yaml-path /usr/local/bin && \\\n    printf '\\n=> Add YTT-CLI\\n' && curl -f -sSLo /usr/local/bin/ytt \"https://github.com/k14s/ytt/releases/download/v${YTT_VERSION}/ytt-linux-amd64\" && \\\n    printf '\\n=====================================================\\n Set system banner\\n=====================================================\\n' && \\\n    GIT_VERSION=$(git --version | awk '{print $3}') && \\\n    OC_VERSION=$(oc version | awk '{print $3}') && \\\n    printf '\\nYour are logged into an ubuntu docker tools container :\\n' > /etc/motd && \\\n    printf 'Generic tools:\\n' >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"bosh (${BOSH_CLI_VERSION})\" \"Bosh cli (https://bosh.io/docs/cli-v2.html)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"cf (${CF_CLI_VERSION})\" \"Cloud Foundry cli (https://github.com/cloudfoundry/cli/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"credhub (${CREDHUB_VERSION})\" \"Credhub cli (https://github.com/cloudfoundry-incubator/credhub-cli/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"fly (${FLY_VERSION})\" \"Concourse cli (https://github.com/concourse/fly/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"git (${GIT_VERSION})\" \"Git cli\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"jq (${JQ_VERSION})\" \"JSON processing Tool (https://stedolan.github.io/jq/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"spruce (${SPRUCE_VERSION})\" \"YAML templating tool (https://github.com/geofffranks/spruce/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"terraform (${TERRAFORM_VERSION})\" \"Manage infrastructure creation by configuration (https://www.terraform.io/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"uaac (${CF_UAAC_VERSION})\" \"Cloud Foundry UAA cli (https://github.com/cloudfoundry/cf-uaac/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"vendir (${VENDIR_VERSION})\" \"Define and fetch components to target directory (https://github.com/vmware-tanzu/carvel-vendir/)\" >> /etc/motd && \\\n    printf 'Admin tools:\\n' >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"bbr (${BBR_VERSION})\" \"Bosh Backup and Restore cli (http://docs.cloudfoundry.org/bbr/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"gcloud\" \"GCP cli (https://cloud.google.com/sdk/gcloud)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"govc (${GOVC_VERSION})\" \"vSphere cli (https://github.com/vmware/govmomi/tree/master/govc/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"go3fr (${GO3FR_VERSION})\" \"client for parallelized and pipelined S3 streaming (https://github.com/rlmcpherson/s3gof3r/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"mongo (${MONGO_SHELL_VERSION})\" \"MongoDB shell cli (https://docs.mongodb.com/manual/mongo/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"mysqlsh (${MYSQL_SHELL_VERSION})\" \"MySQL shell cli (https://dev.mysql.com/doc/mysql-shell-excerpt/5.7/en/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"redis (${REDIS_CLI_VERSION})\" \"Redis cli (https://redis.io/topics/rediscli)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"shield (${SHIELD_VERSION})\" \"Shield cli (https://docs.pivotal.io/partners/starkandwayne-shield/)\" >> /etc/motd && \\\n    printf 'Kubernetes tools:\\n' >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"argo (${ARGO_CLI_VERSION})\" \"Kubernetes Workflow Engine (https://argoproj.github.io/argo-workflows/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"flux (${FLUX_VERSION})\" \"Kubernetes Gitops cli (https://fluxcd.io/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"helm (${HELM_VERSION})\" \"Kubernetes Package Manager (https://docs.helm.sh/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"kapp (${KAPP_VERSION})\" \"Kubernetes YAML tool (https://carvel.dev/kapp/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"kctrl (${KCTRL_VERSION})\" \"Kubernetes kapp-controller tool (https://carvel.dev/kapp-controller/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"klbd (${KLBD_VERSION})\" \"Kubernetes image build orchestrator tool (https://github.com/k14s/kbld/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"kubectl (${KUBECTL_VERSION})\" \"Kubernetes cli (https://kubernetes.io/docs/reference/generated/kubectl/overview/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"kustomize (${KUSTOMIZE_VERSION})\" \"Kubernetes template customize YAML files tool (https://github.com/kubernetes-sigs/kustomize/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"k9s (${K9S_VERSION})\" \"Kubernetes admin tool (https://github.com/derailed/k9s/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"oc (${OC_VERSION})\" \"Openshift cli (https://docs.openshift.com/dedicated/welcome/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"svcat (${SVCAT_VERSION})\" \"Kubernetes Service Catalog cli (https://github.com/kubernetes-sigs/service-catalog/)\" >> /etc/motd && \\\n    printf \"  %-20s %s\\n\" \"ytt (${YTT_VERSION})\" \"YAML Templating Tool (https://carvel.dev/ytt/)\" >> /etc/motd && \\\n    printf '\\nNotes :\\n' >> /etc/motd && \\\n    printf '  \"tools\" command gives available tools.\\n' >> /etc/motd && \\\n    printf '  All path except \"/data/shared\" are not persistant (do not save data on it).\\n\\n' >> /etc/motd && \\\n    chmod 644 /etc/motd && \\\n    printf '\\n=====================================================\\n Configure system and cleanup docker image\\n=====================================================\\n' && \\\n    apt-get upgrade -y && apt-get autoremove -y && apt-get clean && apt-get purge && \\\n    locale-gen en_US.UTF-8 && \\\n    mkdir -p /home/bosh/.ssh && chmod 700 /home/bosh /home/bosh/.ssh && \\\n    mv /tmp/bosh-cli/*.sh /usr/local/bin/ && mv /tmp/bosh-cli/sshd.conf /etc/supervisor/conf.d/ && mv /tmp/bosh-cli/profile /home/bosh/.profile && chmod 664 /home/bosh/.profile && \\\n    chmod 1777 /tmp && chmod 755 /usr/local/bin/* /etc/profile.d/* && \\\n    find /usr/local/bin -print0 | xargs -0 chown root:root && find /home/bosh /data -print0 | xargs -0 chown bosh:users && \\\n    rm -fr /tmp/* /var/lib/apt/lists/* /var/tmp/* && find /var/log -type f -delete && \\\n    touch /var/log/lastlog && chgrp utmp /var/log/lastlog && chmod 664 /var/log/lastlog\n\n#--- Launch supervisord daemon\nCMD /usr/local/bin/supervisord.sh\nEXPOSE 22\n\n#--- Test clis/tools availability\nFROM orange_cli AS tests\nRUN /usr/local/bin/check-available-clis.sh\n\n#--- Export bosh-cli image\nFROM orange_cli"
}