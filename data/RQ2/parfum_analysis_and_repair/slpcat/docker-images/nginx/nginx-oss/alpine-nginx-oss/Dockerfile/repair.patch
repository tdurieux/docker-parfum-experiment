diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/slpcat/docker-images/nginx/nginx-oss/alpine-nginx-oss/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/slpcat/docker-images/nginx/nginx-oss/alpine-nginx-oss/Dockerfile/repaired.Dockerfile
index 21fdf29..afacf2a 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/slpcat/docker-images/nginx/nginx-oss/alpine-nginx-oss/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/slpcat/docker-images/nginx/nginx-oss/alpine-nginx-oss/Dockerfile/repaired.Dockerfile
@@ -36,7 +36,7 @@ ENV GO111MODULE=on \
 #    && ln -sf /usr/bin/cc /usr/local/bin/gcc
 
 RUN \
-     apk add ruby ruby-dev \
+     apk add --no-cache ruby ruby-dev \
      #&& gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ \
      && gem install fpm
 
@@ -64,10 +64,10 @@ ARG CFLAGS="-O2"
 
 RUN \
     mkdir -p /usr/src \
-    && cd /usr/src
+    && cd /usr/src && rm -rf /usr/src
 
 #jemalloc is a general purpose malloc(3) implementation that emphasizes
-#fragmentation avoidance and scalable concurrency support.  
+#fragmentation avoidance and scalable concurrency support. 
 #COPY jemalloc-$JEMALLOC_VERSION.tar.bz2 /
 
 #RUN \
@@ -84,40 +84,40 @@ RUN \
 COPY pcre-$PCRE_VERSION.tar.gz /usr/src
 
 RUN \
- #wget https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz
- #wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.44.tar.gz \
+
+
  tar -zvxC /usr/src -f /usr/src/pcre-$PCRE_VERSION.tar.gz \
  && cd /usr/src/pcre-$PCRE_VERSION \
- && ./configure --prefix=/usr/local \
-                --enable-pcre16                   \
-                --enable-pcre32                   \
-                --enable-unicode-properties       \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local \
+                --enable-pcre16 \
+                --enable-pcre32 \
+                --enable-unicode-properties \
                 --enable-jit \
  && make \
- && make install DESTDIR=$PKG_ROOT
+ && make install DESTDIR=$PKG_ROOT && rm /usr/src/pcre-$PCRE_VERSION.tar.gz
 
 #zlib – Supports header compression. Required by the NGINX Gzip module.
 COPY zlib-$ZLIB_VERSION.tar.gz /usr/src
 
 RUN \
- #wget http://zlib.net/zlib-1.2.11.tar.gz
+
  tar -zxC /usr/src -f /usr/src/zlib-$ZLIB_VERSION.tar.gz \
  && cd /usr/src/zlib-$ZLIB_VERSION \
- && ./configure --prefix=/usr/local \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local \
  && make \
- && make install DESTDIR=$PKG_ROOT
+ && make install DESTDIR=$PKG_ROOT && rm /usr/src/zlib-$ZLIB_VERSION.tar.gz
 
 #OpenSSL – Supports the HTTPS protocol. Required by the NGINX SSL module and others.
-COPY openssl-$OPENSSL_VERSION.tar.gz /usr/src 
+COPY openssl-$OPENSSL_VERSION.tar.gz /usr/src
 
 RUN \
- #wget http://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz \
- #wget https://ftp.openssl.org/source/old/1.1.1/openssl-$OPENSSL_VERSION.tar.gz \
+
+
  tar -zxC /usr/src -f /usr/src/openssl-$OPENSSL_VERSION.tar.gz \
  && cd /usr/src/openssl-$OPENSSL_VERSION \
  && ./config --prefix=/usr/local \
  && make \
- && make install DESTDIR=$PKG_ROOT
+ && make install DESTDIR=$PKG_ROOT && rm /usr/src/openssl-$OPENSSL_VERSION.tar.gz
 
 #curl
 ARG CURL_VERSION=7.69.1
@@ -128,10 +128,10 @@ RUN \
     cd /usr/src \
     && tar -zxC /usr/src -f /curl-$CURL_VERSION.tar.gz \
     && cd /usr/src/curl-$CURL_VERSION \
-    && ./configure --prefix=/usr/local \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local \
     && make \
     && make install \
-    && make install DESTDIR=$PKG_ROOT
+    && make install DESTDIR=$PKG_ROOT && rm /curl-$CURL_VERSION.tar.gz
 
 #Enable requests served by nginx for distributed tracing via The OpenTracing Project.
 #https://github.com/opentracing-contrib/nginx-opentracing#building-from-source
@@ -212,7 +212,7 @@ ENV NGINX_OPENTRACING_VERSION=v0.9.0
 	# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
 
 
-#SkyWalking Nginx Agent provides the native tracing capability for Nginx powered by Nginx LUA module. 
+#SkyWalking Nginx Agent provides the native tracing capability for Nginx powered by Nginx LUA module.
 #https://github.com/apache/skywalking-nginx-lua
 
 #compile nginx
@@ -278,25 +278,25 @@ ARG CONFIG="\
         --with-cc-opt="-I$HUNTER_INSTALL_DIR/include" \
         --with-ld-opt="-L$HUNTER_INSTALL_DIR/lib" \
         #--with-ld-opt="-ljemalloc" \
-        " 
+        "
 RUN \
-    #wget "http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz" -O nginx.tar.gz \
-    wget "http://mirrors.sohu.com/nginx/nginx-${NGINX_VERSION}.tar.gz" -O nginx.tar.gz \
+
+    wget "https://mirrors.sohu.com/nginx/nginx-${NGINX_VERSION}.tar.gz" -O nginx.tar.gz \
     && tar -zxC /usr/src -f nginx.tar.gz \
     && rm nginx.tar.gz \
     && cd /usr/src \
     && git clone https://github.com/vozlt/nginx-module-vts.git \
     #&& git clone https://github.com/Refinitiv/nginx-sticky-module-ng.git \
     && cd /usr/src/nginx-$NGINX_VERSION \
-    && ./configure $CONFIG --with-debug \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" $CONFIG --with-debug \
     && make \
     && mv objs/nginx objs/nginx-debug \
-    && ./configure $CONFIG \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" $CONFIG \
     && make \
     #&& make install \
     && make install DESTDIR=$PKG_ROOT
 
-#install nginx 
+#install nginx
 COPY nginx.* /
 
 RUN \
@@ -317,7 +317,7 @@ RUN \
     #&& ln -sf /dev/stdout /var/log/nginx/access.log \
     #&& ln -sf /dev/stderr /var/log/nginx/error.log
     && apk add --no-cache --virtual .nginx-rundeps $runDeps \
-    && apk del .build-deps 
+    && apk del .build-deps
 
 # Jaeger
 RUN wget https://github.com/jaegertracing/jaeger-client-cpp/releases/download/v0.4.2/libjaegertracing_plugin.linux_amd64.so -O $PKG_ROOT/usr/local/lib/libjaegertracing_plugin.so
@@ -348,7 +348,7 @@ RUN \
 
 FROM slpcat/centos:7
 COPY --from=builder /root/nginx-oss-1.17.9-2.el7.x86_64.rpm /root
-RUN yum install -y /root/nginx-oss-1.17.9-2.el7.x86_64.rpm 
+RUN yum install -y /root/nginx-oss-1.17.9-2.el7.x86_64.rpm && rm -rf /var/cache/yum
 
 #COPY nginx.conf /etc/nginx/nginx.conf