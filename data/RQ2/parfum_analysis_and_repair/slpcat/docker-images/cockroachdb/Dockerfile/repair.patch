diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/slpcat/docker-images/cockroachdb/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/slpcat/docker-images/cockroachdb/Dockerfile/repaired.Dockerfile
index 87ad46d..133dce7 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/slpcat/docker-images/cockroachdb/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/slpcat/docker-images/cockroachdb/Dockerfile/repaired.Dockerfile
@@ -42,12 +42,12 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     patch \
     texinfo \
     xz-utils \
- && apt-get clean
+ && apt-get clean && rm -rf /var/lib/apt/lists/*;
 
 RUN mkdir crosstool-ng \
- && curl -fsSL http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \
+ && curl -fsSL https://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \
  && cd crosstool-ng \
- && ./configure --prefix /usr/local/ct-ng \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix /usr/local/ct-ng \
  && make -j$(nproc) \
  && make install \
  && cp ct-ng.comp /etc/bash_completion.d/ \
@@ -92,7 +92,7 @@ COPY ncurses.patch ./
 #
 COPY ncurses.conf ./
 RUN mkdir ncurses \
- && curl -fsSL http://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz | tar --strip-components=1 -C ncurses -xz \
+ && curl -fsSL https://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz | tar --strip-components=1 -C ncurses -xz \
  && cd ncurses \
  && patch -p0 <../ncurses.patch \
  && export cf_cv_type_of_bool='unsigned char' \
@@ -132,13 +132,13 @@ RUN apt-get purge -y gcc g++ && apt-get autoremove -y
 RUN apt-get update && apt-get install -y --no-install-recommends \
     clang \
     cmake \
-    python
+    python && rm -rf /var/lib/apt/lists/*;
 
 # Build an msan-enabled build of libc++, following instructions from
 # https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo
-RUN mkdir llvm                    && curl -sfSL http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz      | tar --strip-components=1 -C llvm -xJ \
- && mkdir llvm/projects/libcxx    && curl -sfSL http://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz    | tar --strip-components=1 -C llvm/projects/libcxx -xJ \
- && mkdir llvm/projects/libcxxabi && curl -sfSL http://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \
+RUN mkdir llvm && curl -sfSL https://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \
+ && mkdir llvm/projects/libcxx && curl -sfSL https://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \
+ && mkdir llvm/projects/libcxxabi && curl -sfSL https://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \
  && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \
  && mkdir libcxx_msan && (cd libcxx_msan && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory && make cxx -j$(nproc)) \
  && rm -rf llvm
@@ -162,7 +162,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     automake \
     autopoint \
     gettext \
-    rsync
+    rsync && rm -rf /var/lib/apt/lists/*;
 
 # Compile GNU sed from source to pick up an unreleased change that buffers
 # output. This speeds up compiles on Docker for Mac by *minutes*.
@@ -170,7 +170,7 @@ RUN git clone git://git.sv.gnu.org/sed \
  && cd sed \
  && git checkout 8e52c0aff039f0a88127ca131b060050c107b0e2 \
  && ./bootstrap \
- && ./configure \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
  && make \
  && make install \
  && cd .. \
@@ -184,11 +184,11 @@ RUN git clone git://git.sv.gnu.org/sed \
 # bumping the minimum allowed version of Go in /build/go-version-chech.sh.
 RUN apt-get install -y --no-install-recommends golang \
  && curl -fsSL https://storage.googleapis.com/golang/go1.10.3.src.tar.gz -o golang.tar.gz \
- && echo '567b1cc66c9704d1c019c50bef946272e911ec6baf244310f87f4e678be155f2 golang.tar.gz' | sha256sum -c - \
+ && echo '567b1cc66c9704d1c019c50bef946272e911ec6baf244310f87f4e678be155f2  golang.tar.gz' | sha256sum -c - \
  && tar -C /usr/local -xzf golang.tar.gz \
  && rm golang.tar.gz \
  && cd /usr/local/go/src \
- && GOROOT_BOOTSTRAP=$(go env GOROOT) CC=clang CXX=clang++ ./make.bash
+ && GOROOT_BOOTSTRAP=$(go env GOROOT) CC=clang CXX=clang++ ./make.bash && rm -rf /var/lib/apt/lists/*;
 
 ENV GOPATH /go
 ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
@@ -232,7 +232,7 @@ RUN apt-get install -y --no-install-recommends \
     openssh-client \
     yarn \
     google-chrome-stable \
-    unzip
+    unzip && rm -rf /var/lib/apt/lists/*;
 
 # awscli - roachtests
 # NB: we don't use apt-get because we need an up to date version of awscli