{
  "startTime": 1674255095183,
  "endTime": 1674255096384,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 102
      }
    }
  ],
  "repairedDockerfile": "FROM webdevops/php-nginx:ubuntu-18.04 AS builder\nMAINTAINER 若虚 <slpcat@qq.com>\n\n# Container variables\nENV \\\n    TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n\nRUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list && \\\n    sed -i 's/security.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list\n\n# Set timezone and locales\nRUN \\\n    echo \"${TIMEZONE}\" > /etc/timezone \\\n    && echo \"$LANG UTF-8\" > /etc/locale.gen \\\n    && apt-get update -q \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq apt-utils dialog vim-tiny curl locales \\\n    && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n    && update-locale LANG=$LANG \\\n    && locale-gen $LANG \\\n    && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales && rm -rf /var/lib/apt/lists/*;\n\n# Install required packages\nRUN \\\n    apt-get dist-upgrade -y \\\n    && apt-get install --no-install-recommends -y php-dev libjsoncpp-dev cmake && rm -rf /var/lib/apt/lists/*;\n\n#make pinpoint_php.so\n\nRUN \\\n    git clone https://github.com/naver/pinpoint-c-agent.git \\\n    && cd pinpoint-c-agent/ \\\n    && phpize \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j2 \\\n    && make test TESTS=src/PHP/tests/\n#result: /pinpoint-c-agent/modules/pinpoint_php.so\n\nFROM webdevops/php-nginx:ubuntu-18.04\nMAINTAINER 若虚 <slpcat@qq.com>\n\n# Container variables\nENV \\\n    TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n\nRUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list && \\\n    sed -i 's/security.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list\n\nCOPY nginx-official-repo.gpg /etc/apt/trusted.gpg.d/\n\n# Set timezone and locales\nRUN \\\n    echo \"${TIMEZONE}\" > /etc/timezone \\\n    && echo \"$LANG UTF-8\" > /etc/locale.gen \\\n    && apt-get update -q \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq apt-utils dialog vim-tiny curl locales \\\n    && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n    && update-locale LANG=$LANG \\\n    && locale-gen $LANG \\\n    && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales && rm -rf /var/lib/apt/lists/*;\n\n# Install required packages\nRUN \\\n    apt-get dist-upgrade -y \\\n    && apt-get install --no-install-recommends -y python3 python3-pip curl ca-certificates lsb-release \\\n    && composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ \\\n    && composer selfupdate && rm -rf /var/lib/apt/lists/*;\n\n#install nginx\n#RUN \\\n    #echo \"deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx\"     | tee /etc/apt/sources.list.d/nginx.list \\\n    #&& echo -e \"Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\"  | tee /etc/apt/preferences.d/99nginx \\\n    #&& curl -o /tmp/nginx_signing.key https://nginx.org/keys/nginx_signing.key \\\n    #&& gpg --dry-run --quiet --import --import-options show-only /tmp/nginx_signing.key \\\n    #&& mv /tmp/nginx_signing.key /etc/apt/trusted.gpg.d/nginx_signing.asc \\\n    #&& rm -f /etc/nginx/nginx.conf \\\n    #&& apt-get update -y \\\n    #&& apt-get install -y nginx\n\nENV WEB_DOCUMENT_ROOT=/app \\\n    WEB_DOCUMENT_INDEX=index.php \\\n    WEB_ALIAS_DOMAIN=*.vm \\\n    WEB_PHP_TIMEOUT=600 \\\n    WEB_PHP_SOCKET=127.0.0.1:9000\n\nCOPY conf/ /opt/docker/\nCOPY php.ini /etc/php/7.2/fpm/php.ini\n\nENV AGENT_ID=\"k8s-php\" \\\n    AGENT_TYPE=\"PHP\" \\\n    APP_NAME=\"php-demo\" \\\n    COLLECTOR_CONFIG=/opt/pinpoint-collector-agent/conf/collector.conf \\\n    # pinpoint collector span ip\n    PP_COLLECTOR_AGENT_SPAN_IP=pinpoint-collector \\\n    # pinpoint collector span port\n    PP_COLLECTOR_AGENT_SPAN_PORT=9993 \\\n    # pinpoint collector agent IP\n    PP_COLLECTOR_AGENT_AGENT_IP=pinpoint-collector \\\n    # pinpoint collector agent port\n    PP_COLLECTOR_AGENT_AGENT_PORT=9991 \\\n    # pinpoint collector stat ip\n    PP_COLLECTOR_AGENT_STAT_IP=pinpoint-collector \\\n    # pinpoint collector stat port\n    PP_COLLECTOR_AGENT_STAT_PORT=9992 \\\n    # mark all agent a docker\n    PP_COLLECTOR_AGENT_ISDOCKER=true \\\n    PP_LOG_DIR=/tmp/ \\\n    PP_Log_Level=ERROR\n\n#install pinpoint-collector-agent\nCOPY --from=builder /pinpoint-c-agent/collector-agent /opt/pinpoint-collector-agent\nCOPY init_python_env.sh /opt/pinpoint-collector-agent/init_python_env.sh\nRUN \\\n    cd /opt/pinpoint-collector-agent \\\n    && pip3 install --no-cache-dir -r requirements.txt \\\n    && bash -x init_python_env.sh\n\n#install pinpoint php module\nCOPY --from=builder /pinpoint-c-agent/modules/pinpoint_php.so /usr/lib/php/20170718/pinpoint_php.so\n#COPY 10-pinpoint.sh /opt/docker/provision/entrypoint.d/\nCOPY pinpoint.ini /etc/php/7.2/mods-available/pinpoint.ini\n\nRUN \\\n    ln -s /etc/php/7.2/mods-available/pinpoint.ini /etc/php/7.2/fpm/conf.d/pinpoint.ini \\\n    && ln -s /etc/php/7.2/mods-available/pinpoint.ini /etc/php/7.2/cli/conf.d/pinpoint.ini\n\n#RUN cp /pinpoint-c-agent/quickstart/config/pinpoint_agent.conf.example  /etc/pinpoint_agent.conf\n\n#install pinpoint plugins\n#RUN mkdir -p /app/pinpoint_plugins && cp /pinpoint-c-agent/quickstart/php/web/plugins/* /app/pinpoint_plugins\n#patch\n#RUN wget https://raw.githubusercontent.com/naver/pinpoint-c-agent/master/quickstart/php/web/plugins/curl_plugin.php \\\n#    && mv curl_plugin.php /app/pinpoint_plugins/\n#copy sample website source code\n#RUN cp /pinpoint-c-agent/quickstart/php/web/*.php /app\nRUN \\\n    wget -O wordpress.tar.gz  https://cn.wordpress.org/latest-zh_CN.tar.gz \\\n    && tar -zxf wordpress.tar.gz -C /tmp \\\n    && mv /tmp/wordpress/* /app/ && rm wordpress.tar.gz\n\nRUN set -x \\\n    && docker-run-bootstrap \\\n    && docker-image-cleanup\n\nEXPOSE 80\n"
}