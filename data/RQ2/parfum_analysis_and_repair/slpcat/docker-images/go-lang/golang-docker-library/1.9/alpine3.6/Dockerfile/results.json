{
  "startTime": 1674253441348,
  "endTime": 1674253442801,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 1,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.6\n\nRUN apk add --no-cache ca-certificates\n\nENV GOLANG_VERSION 1.9.6\n\n# make-sure-R0-is-zero-before-main-on-ppc64le.patch: https://github.com/golang/go/commit/9aea0e89b6df032c29d0add8d69ba2c95f1106d9 (Go 1.9)\nCOPY *.patch /go-alpine-patches/\n\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps \\\n\t\tbash \\\n\t\tgcc \\\n\t\tmusl-dev \\\n\t\topenssl \\\n\t\tgo \\\n\t; \\\n\texport \\\n# set GOROOT_BOOTSTRAP such that we can actually build Go\n\t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \\\n# ... and set \"cross-building\" related vars to the installed system's values so that we create a build targeting the proper arch\n# (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)\n\t\tGOOS=\"$(go env GOOS)\" \\\n\t\tGOARCH=\"$(go env GOARCH)\" \\\n\t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \\\n\t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \\\n\t; \\\n# also explicitly set GO386 and GOARM if appropriate\n# https://github.com/docker-library/golang/issues/184\n\tapkArch=\"$(apk --print-arch)\"; \\\n\tcase \"$apkArch\" in \\\n\t\tarmhf) export GOARM='6' ;; \\\n\t\tx86) export GO386='387' ;; \\\n\tesac; \\\n\n\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \\\n\techo '36f4059be658f7f07091e27fe04bb9e97a0c4836eb446e4c5bac3c90ff9e5828  *go.tgz' | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tcd /usr/local/go/src; \\\n\tfor p in /go-alpine-patches/*.patch; do \\\n\t\t[ -f \"$p\" ] || continue; \\\n\t\tpatch -p2 -i \"$p\"; \\\n\tdone; \\\n\t./make.bash; \\\n\n\trm -rf /go-alpine-patches; \\\n\tapk del .build-deps; \\\n\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n\nCOPY go-wrapper /usr/local/bin/\n"
}