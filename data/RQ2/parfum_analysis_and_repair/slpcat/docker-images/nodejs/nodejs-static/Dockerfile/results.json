{
  "startTime": 1674218254938,
  "endTime": 1674218255903,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 96
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12\n\nMAINTAINER 若虚 <slpcat@qq.com>\n\n# Container variables\nENV \\\n    TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n\nRUN \\\n    sed -i 's/deb.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list\n\n# Set timezone and locales\nRUN \\\n    echo \"${TIMEZONE}\" > /etc/timezone \\\n    && echo \"$LANG UTF-8\" > /etc/locale.gen \\\n    && apt-get update -q \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq apt-utils dialog vim-tiny curl locales \\\n    && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n    && update-locale LANG=$LANG \\\n    && locale-gen $LANG \\\n    && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales && rm -rf /var/lib/apt/lists/*;\n\n# Install required packages\nRUN \\\n    apt-get dist-upgrade -y\n\nENV NPM_CONFIG_PREFIX=/home/node/.npm-global\n\n# optionally if you want to run npm global bin without specifying path\nENV PATH=$PATH:/home/node/.npm-global/bin\n\n# Create app directory\nWORKDIR /usr/src/app\n\nRUN chown -R node:node /usr/src/app\n\nUSER node\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY src/ ./\n\nRUN npm install && npm cache clean --force;\n# If you are building your code for production\n# RUN npm ci --only=production\n\n# Bundle app source\n#COPY src/ .\n\nEXPOSE 8080\nCMD [ \"node\", \"server.js\" ]\n\nFROM nginx\n\nCOPY --from=builder /usr/src/app /app\n\n"
}