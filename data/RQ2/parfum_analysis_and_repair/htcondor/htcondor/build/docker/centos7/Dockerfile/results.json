{
  "startTime": 1674251415113,
  "endTime": 1674251415788,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 608
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 635
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "########################\n# Docker file to setup a proper build environment for HTCondor\n# Centos\n# Todd Tannenbaum Oct 2019\n\nFROM centos:centos7\n\n# Create a build user, and allow that user to sudo\nRUN adduser build && mkdir /condor && usermod -aG wheel build && echo \"%wheel  ALL=(ALL)   NOPASSWD:ALL\" >> /etc/sudoers\n\nRUN yum install -y epel-release \\\n && yum install -y cmake3 ninja-build where which sudo less wget tmux git vim emacs nano gdb \\\n && yum clean all && rm -rf /var/cache/yum\n\n# Install the minimal things to make a tar build without lots of externals like GSI, man pages, MUNGE\nRUN yum install -y systemtap-sdt-devel patch c-ares-devel autoconf automake libtool perl-Time-HiRes perl-Archive-Tar perl-XML-Parser perl-Digest-MD5 gcc-c++ make flex byacc pcre-devel openssl-devel krb5-devel libvirt-devel bind-utils m4 libX11-devel libXScrnSaver-devel curl-devel expat-devel openldap-devel python-devel redhat-rpm-config  sqlite-devel glibc-static libuuid-devel bison bison-devel libtool-ltdl-devel pam-devel nss-devel libxml2-devel libstdc++-devel libstdc++-static python36-devel boost169-devel boost169-static boost169-python2 boost169-python3 python-sphinx python-sphinx_rtd_theme pandoc \\\n && yum clean all && rm -rf /var/cache/yum\n\n# Install all the rest of the dependecies for a UW style RPM build, e.g. GSI, CREAM, etc.\n# Note: a lot of this stuff is still listed as required in the RPM\n# spec file, but really is not longer needed.  Like all the LaTeX stuff.  Sigh.\nRUN yum install -y rpm-build cmake perl-Data-Dumper glibc-devel libcurl-devel globus-gssapi-gsi-devel globus-rsl-devel globus-io-devel globus-xio-devel globus-gssapi-error-devel globus-gss-assist-devel globus-gsi-proxy-core-devel globus-gsi-credential-devel globus-gsi-callback-devel globus-gsi-sysconfig-devel globus-gsi-cert-utils-devel globus-openssl-module-devel globus-gsi-openssl-error-devel globus-gsi-proxy-ssl-devel globus-callout-devel globus-common-devel globus-ftp-client-devel globus-ftp-control-devel munge-devel voms-devel libcgroup-devel systemd-devel systemd-units boost-devel boost-python graphviz scitokens-cpp-devel \\\n && yum clean all && rm -rf /var/cache/yum\n\n# Install some pip package dependencies for the manual and man pages in docs/\nRUN pip3 --no-cache install pathlib sphinx-autodoc-typehints==1.11.0 nbsphinx==0.8.6 ipython==6.5.0 sphinx-rtd-theme==0.5.2 Sphinx==4.0.2 htcondor>=9.0\n\nUSER build\n\n# Set up entrypoint script; see that script for more on what it does\nCOPY --chown=build:build entrypoint.sh /home/build/.entrypoint.sh\nRUN chmod +x /home/build/.entrypoint.sh\nENTRYPOINT [\"/home/build/.entrypoint.sh\"]\n\n# Default to running a bash login shell; we do this (the -l) so\n# ~/.bash_profile gets sourced, which modifies the PATH for the\n# build user so all the pip3 packages we installed above are found.\nCMD [\"bash\", \"-l\"]\n\nWORKDIR \"/home/build/\"\n\nENV \\\n    # The dir that we expect the HTCondor source repository to be in\n    HTCONDOR_REPO_DIR=\"/home/build/htcondor\" \\\n    # A reasonable build dir path\n    HTCONDOR_BUILD_DIR=\"/home/build/build\" \\\n    # A reasonable release dir path\n    HTCONDOR_RELEASE_DIR=\"/home/build/release_dir\" \\\n    # By default, we will check that we have a HTCondor source repo, and clone it if not present\n    HTCONDOR_CHECK_FOR_REPO=true \\\n    # The remote git repo to get HTCondor source from if it's not present\n    HTCONDOR_GIT_URL=\"https://github.com/htcondor/htcondor.git\" \\\n    # Which branch to checkout if we do have to get source remotely\n    HTCONDOR_BRANCH=\"master\" \\\n    # Use a fancier ninja build progress meter by default\n    NINJA_STATUS=\"%es [%u -> %r -> %f/%t] \"\n"
}