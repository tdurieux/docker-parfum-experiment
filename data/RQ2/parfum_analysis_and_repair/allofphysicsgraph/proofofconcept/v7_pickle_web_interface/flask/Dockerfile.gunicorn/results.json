{
  "startTime": 1674253500016,
  "endTime": 1674253502415,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Physics Derivation Graph\n# Ben Payne, 2021\n# https://creativecommons.org/licenses/by/4.0/\n# Attribution 4.0 International (CC BY 4.0)\n\n# https://docs.docker.com/engine/reference/builder/#from\n# https://github.com/phusion/baseimage-docker\nFROM phusion/baseimage:0.11\n# Ubuntu is too big\n#FROM ubuntu:latest\n\n# PYTHONDONTWRITEBYTECODE: Prevents Python from writing pyc files to disk (equivalent to python -B option)\nENV PYTHONDONTWRITEBYTECODE 1\n\n# https://docs.docker.com/engine/reference/builder/#run\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n# text editing\n               vim \\\n               python3 \\\n               python3-pip \\\n               python3-dev \\\n#               python2.7 \\\n#               python-pip \\\n# documentation generation\n               python3-sphinx \\\n               build-essential \\\n# generate pictures of graphs using dot\n               graphviz \\\n# generate pictures of expressions using latex\n               dvipng \\\n#               git-core \\\n# npm for mathjax\n               npm \\\n#               2to3 \\\n#               automake \\\n#               autoreconf \\\n# compile .tex to .dvi\n               texlive \\\n    && rm -rf /var/lib/apt/lists/*\n\n# https://docs.docker.com/engine/reference/builder/#copy\n# requirements.txt contains a list of the Python packages needed for the PDG\nCOPY requirements.txt /tmp\n\n# https://www.npmjs.com/package/mathjax\nRUN npm install mathjax@3 && npm cache clean --force;\n#RUN npm install mathjax\n\n# convert DVI to SVG\n# not necessary, and written in Python2. Conversion to Python3 using 2to3 failed :(\n#RUN git clone https://github.com/WojciechMula/pydvi2svg.git\n#RUN ln -sf /app/pydvi2svg/dvi2svg.py /usr/local/bin/\n#RUN cat pydvi2svg/dvi2png.py | sed 's/#!\\/usr\\/bin\\/python/\\/usr\\/bin\\/python3/' > pydvi2svg/dvi2png.py\n#RUN cat pydvi2svg/conv/binfile.py | sed 's/binfile(file/binfile(filename/' > pydvi2svg/conv/binfile.py\n#RUN git clone https://github.com/fontforge/fontforge.git\n#RUN git clone https://github.com/fontforge/libspiro.git\n#RUN git clone https://github.com/fontforge/libuninameslist.git\n\n# https://stackoverflow.com/a/63457606/1164295\nRUN pip3 install --no-cache-dir --upgrade pip\n\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt\n\nRUN useradd --create-home appuser\nWORKDIR       /home/appuser/app\nRUN mkdir -p  /home/appuser/app/uploads\nRUN mkdir -p  /home/appuser/app/tmp\nUSER appuser\n\nCOPY templates     /home/appuser/app/templates\nCOPY static        /home/appuser/app/static\nCOPY common_lib.py \\\n     compute.py \\\n     config.py \\\n     controller.py \\\n     latex_to_sympy.py \\\n     logs_to_stats.py \\\n     json_schema.py \\\n     Makefile \\\n     pdg_api.py \\\n     schema.sql \\\n     sql_db.py \\\n     user.py \\\n     validate_dimensions_sympy.py \\\n     validate_steps_sympy.py \\\n     wsgi.py \\\n     /home/appuser/app/\n\nUSER root\nRUN mv /node_modules/mathjax/es5 /home/appuser/app/static/mathjax\nRUN chown -R appuser /home/appuser/app && chgrp -R appuser /home/appuser/app\n\n# TODO - https://github.com/allofphysicsgraph/proofofconcept/issues/82\n#RUN tlmgr init-usertree\n#RUN apt-get install -y texlive-base\n#RUN apt-get install -y wget xzdec\n#RUN /usr/bin/tlmgr install braket\nUSER appuser\nRUN echo \"alias python=python3\" > /home/appuser/.bashrc\nRUN bash -l /home/appuser/.bashrc\n\n# An ENTRYPOINT allows you to configure a container that will run as an executable.\n#ENTRYPOINT [\"python3\"]\n\n# There can only be one CMD instruction in a Dockerfile\n# The CMD instruction should be used to run the software contained by your image, along with any arguments.\n#CMD [\"/home/appuser/app/controller.py\"]\n\n"
}