{
  "startTime": 1674252923541,
  "endTime": 1674252924912,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 174
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 73,
        "columnEnd": 149
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 72,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 9,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 9,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 9,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 55,
        "lineEnd": 58,
        "columnStart": 1,
        "columnEnd": 2
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CODE_VERSION\nFROM clipper/lib_base:${CODE_VERSION}\n\nLABEL maintainer=\"Dan Crankshaw <dscrankshaw@gmail.com>\"\n\n# install docker and other apt-installable dependencies\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends \\\n      wget apt-transport-https ca-certificates curl software-properties-common \\\n      clang-format redis-server gnupg2 \\\n      && curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - \\\n      && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" \\\n      && apt-get update \\\n      && apt-get install --no-install-recommends -y docker-ce \\\n      && apt-get remove -y python \\\n      && apt-get install --no-install-recommends -y python3 python3-dev python3-pip libsodium18 \\\n      && rm -rf /var/lib/apt/lists/*\n\n# Alias python to python3\nRUN echo '#!/bin/bash\\npython3 \"$@\"' > /usr/bin/python && \\\n    chmod +x /usr/bin/python\n\n# Install Java using https://github.com/docker-library/openjdk/blob/1506887e16eba85b37dcf0a5ff8c9c2abe3fa9b7/8-jdk/slim/Dockerfile\n# as a template\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tbzip2 \\\n\t\tunzip \\\n\t\txz-utils \\\n\t&& rm -rf /var/lib/apt/lists/*\n# Default to UTF-8 file.encoding\nENV LANG C.UTF-8\n# add a simple script that can auto-detect the appropriate JAVA_HOME value\n# based on whether the JDK or only the JRE is installed\nRUN { \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'set -e'; \\\n\t\techo; \\\n\t\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n\t} > /usr/local/bin/docker-java-home \\\n\t&& chmod +x /usr/local/bin/docker-java-home\n# do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)\" /docker-java-home\nENV JAVA_HOME /docker-java-home\nENV JAVA_VERSION 8u171\nENV JAVA_DEBIAN_VERSION 8u171-b11-1~deb9u1\n# see https://bugs.debian.org/775775\n# and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION 20170531+nmu1\nRUN set -ex; \\\n\n# deal with slim variants not having man page directories (which causes \"update-alternatives\" to fail)\n\tif [ ! -d /usr/share/man/man1 ]; then \\\n\t\tmkdir -p /usr/share/man/man1; \\\n\tfi; \\\n\n\tapt-get update; \\\n\tapt-get install --no-install-recommends -y \\\n\t\topenjdk-8-jdk-headless=\"$JAVA_DEBIAN_VERSION\" \\\n\t\tca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n# verify that \"docker-java-home\" returns what we expect\n\t[ \"$(readlink -f \"$JAVA_HOME\")\" = \"$(docker-java-home)\" ]; \\\n\n# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java\n\tupdate-alternatives --get-selections | awk -v home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }'; \\\n# ... and verify that it actually worked for one of the alternatives we care about\n\tupdate-alternatives --query java | grep -q 'Status: manual'\n\n# see CA_CERTIFICATES_JAVA_VERSION notes above\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\n\nRUN pip3 install --no-cache-dir cloudpickle==0.5.* pyzmq==17.0.* requests==2.18.* scikit-learn==0.19.* \\\n  numpy==1.14.* pyyaml==3.12.* docker==3.1.* kubernetes==5.0.* tensorflow==1.6.* mxnet==1.1.* pyspark==2.3.* \\\n  xgboost==0.7.*\n\n# install PyTorch\nRUN pip3 install --no-cache-dir http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl \\\n      && pip3 install --no-cache-dir torchvision\n\n# Install maven\nARG MAVEN_VERSION=3.5.0\nARG SHA=beb91419245395bd69a4a6edad5ca3ec1a8b64e41457672dc687c173a495f034\nARG BASE_URL=https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries\n\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n  && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n  && echo \"${SHA}  /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n  && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n  && rm -f /tmp/apache-maven.tar.gz \\\n  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn \\\n  && git clone https://github.com/zeromq/jzmq.git /root/jzmq \\\n  && cd /root/jzmq/jzmq-jni \\\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make \\\n  && make install\n\nENV MAVEN_HOME /usr/share/maven\nENV MAVEN_CONFIG /root/.m2\nENV JZMQ_HOME /usr/local/lib/\n\n# Install kubectl\nRUN curl -f -LO https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \\\n      && chmod +x kubectl \\\n      && mv kubectl /usr/local/bin/\n\n# Install R\nRUN apt-get update && apt-get install -y --no-install-recommends r-base libxml2-dev gfortran \\\n  && rm -rf /var/lib/apt/lists/*\n\nCOPY containers/R/tests/install_test_dependencies.R /install_test_dependencies.R\n\nRUN Rscript /install_test_dependencies.R\n\nENTRYPOINT [\"bash\"]\n\n# vim: set filetype=dockerfile:\n"
}