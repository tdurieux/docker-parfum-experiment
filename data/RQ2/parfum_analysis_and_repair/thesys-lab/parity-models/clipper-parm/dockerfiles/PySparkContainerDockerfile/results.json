{
  "startTime": 1674249950404,
  "endTime": 1674249951223,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 57,
        "columnStart": 1,
        "columnEnd": 2
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CODE_VERSION\nARG RPC_VERSION\nFROM clipper/${RPC_VERSION}-rpc:${CODE_VERSION}\n\nLABEL maintainer=\"Dan Crankshaw <dscrankshaw@gmail.com>\"\n\n# Install Java using https://github.com/docker-library/openjdk/blob/1506887e16eba85b37dcf0a5ff8c9c2abe3fa9b7/8-jdk/slim/Dockerfile\n# as a template\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tbzip2 \\\n\t\tunzip \\\n\t\txz-utils \\\n\t&& rm -rf /var/lib/apt/lists/*\n# Default to UTF-8 file.encoding\nENV LANG C.UTF-8\n# add a simple script that can auto-detect the appropriate JAVA_HOME value\n# based on whether the JDK or only the JRE is installed\nRUN { \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'set -e'; \\\n\t\techo; \\\n\t\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n\t} > /usr/local/bin/docker-java-home \\\n\t&& chmod +x /usr/local/bin/docker-java-home\nENV JAVA_HOME /docker-java-home\nENV JAVA_MAJOR_VERSION openjdk-8-jdk-headless\nENV JAVA_VERSION 8u171\nENV JAVA_DEBIAN_VERSION 8u171-b11-1~deb9u1\n# see https://bugs.debian.org/775775\n# and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION 20170531+nmu1\n\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)\" /docker-java-home\n\nRUN set -ex; \\\n\n# deal with slim variants not having man page directories (which causes \"update-alternatives\" to fail)\n\tif [ ! -d /usr/share/man/man1 ]; then \\\n\t\tmkdir -p /usr/share/man/man1; \\\n\tfi; \\\n\n# The Py35 RPC Docker image uses jessie, so we have to use different package versions\n# JAVA_DEBIAN_VERSION found at https://packages.debian.org/jessie-backports/openjdk-8-jdk\n# CA_CERTIFICATES_JAVA_VERSION found at https://packages.debian.org/jessie-backports/ca-certificates-java\n\tdebian_version=$(cat /etc/debian_version); \\\n\tif echo \"$debian_version\" | grep \"8.*\"; then \\\n\t\t\techo \"deb http://http.debian.net/debian jessie-backports main\" >> /etc/apt/sources.list.d/jessie-backports.list; \\\n\t\t\texport CA_CERTIFICATES_JAVA_VERSION=\"20161107~bpo8+1\"; \\\n\t\t\texport JAVA_MAJOR_VERSION=\"openjdk-8-jdk\"; \\\n\t\t\texport JAVA_VERSION=\"8u171\"; \\\n\t\t\texport JAVA_DEBIAN_VERSION=\"8u171-b11-1~bpo8+1\"; \\\n\tfi; \\\n\n\tapt-get update; \\\n\tapt-get install --no-install-recommends -y \\\n\t\t\"$JAVA_MAJOR_VERSION\"=\"$JAVA_DEBIAN_VERSION\" \\\n\t\tca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n# verify that \"docker-java-home\" returns what we expect\n\t[ \"$(readlink -f \"$JAVA_HOME\")\" = \"$(docker-java-home)\" ]; \\\n\n# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java\n\tupdate-alternatives --get-selections | awk -v home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }'; \\\n# ... and verify that it actually worked for one of the alternatives we care about\n\tupdate-alternatives --query java | grep -q 'Status: manual'\n\n\n# see CA_CERTIFICATES_JAVA_VERSION notes above\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\n\n# If you're reading this and have any feedback on how this image could be\n# improved, please open an issue or a pull request so we can discuss it!\n#\n#   https://github.com/docker-library/openjdk/issues\nRUN pip install --no-cache-dir pyspark==2.3.*\n\nCOPY containers/python/pyspark_container.py containers/python/container_entry.sh /container/\n\nCMD [\"/container/container_entry.sh\", \"pyspark-container\", \"/container/pyspark_container.py\"]\n\n# vim: set filetype=dockerfile:\n"
}