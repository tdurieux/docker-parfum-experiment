{
  "startTime": 1674249609640,
  "endTime": 1674249611283,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:latest\n\nEXPOSE 8080:8080\n\n# Install dependencies\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y tzdata && rm -rf /var/lib/apt/lists/*;\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y git gcc-multilib openjdk-8-jdk openjdk-8-jre-headless maven \\\ngnuplot ghostscript graphviz imagemagick python3-matplotlib && rm -rf /var/lib/apt/lists/*;\n\n\n# Copy the local (outside Docker) source into the working directory,\nRUN mkdir /cello\nWORKDIR /cello\n\nCOPY demo ./demo\nCOPY resources ./resources\nCOPY src ./src\nCOPY tools ./tools\nCOPY pom.xml .\n\nRUN cd ./resources/library && bash install_local_jars.sh\n\nRUN mvn -e clean compile\n\nENTRYPOINT [\"mvn\", \"spring-boot:run\"]\n\n\n"
}