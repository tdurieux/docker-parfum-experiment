{
  "startTime": 1674250849308,
  "endTime": 1674250850492,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 37,
        "columnEnd": 61
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 4,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### This file is generated from\n### tools/ansible/roles/dockerfile/templates/Dockerfile.j2\n###\n### DO NOT EDIT\n###\n\n# Build container\nFROM quay.io/centos/centos:stream9 as builder\n\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n\nUSER root\n\n# Install build dependencies\nRUN dnf -y update && dnf install -y 'dnf-command(config-manager)' && \\\n    dnf config-manager --set-enabled crb && \\\n    dnf -y install \\\n    gcc \\\n    gcc-c++ \\\n    git-core \\\n    gettext \\\n    glibc-langpack-en \\\n    libffi-devel \\\n    libtool-ltdl-devel \\\n    make \\\n{% if not headless|bool %}\n    nodejs \\\n{% endif %}\n    nss \\\n    openldap-devel \\\n    patch \\\n    postgresql \\\n    postgresql-devel \\\n    python3-devel \\\n    python3-pip \\\n    python3-psycopg2 \\\n    python3-setuptools \\\n    swig \\\n    unzip \\\n    xmlsec1-devel \\\n    xmlsec1-openssl-devel\n\nRUN pip3 install --no-cache-dir virtualenv setuptools_scm build\n\n\n# Install & build requirements\nADD Makefile /tmp/Makefile\nRUN mkdir /tmp/requirements\nADD requirements/requirements.txt \\\n    requirements/requirements_tower_uninstall.txt \\\n    requirements/requirements_git.txt \\\n    /tmp/requirements/\n\nRUN cd /tmp && make requirements_awx\n\nARG VERSION\nARG SETUPTOOLS_SCM_PRETEND_VERSION\nARG HEADLESS\n\n{% if (build_dev|bool) or (kube_dev|bool) %}\nADD requirements/requirements_dev.txt /tmp/requirements\nRUN cd /tmp && make requirements_awx_dev\n{% else %}\n# Use the distro provided npm to bootstrap our required version of node\n\n{% if not headless|bool %}\nRUN npm install -g n && n 16.13.1 && npm cache clean --force;\n{% endif %}\n\n# Copy source into builder, build sdist, install it into awx venv\nCOPY . /tmp/src/\nWORKDIR /tmp/src/\nRUN make sdist && /var/lib/awx/venv/awx/bin/pip install dist/awx.tar.gz\n\n{% if not headless|bool %}\nADD tools/ansible/roles/dockerfile/files/settings.py /etc/tower/settings.py\nRUN SKIP_PG_VERSION_CHECK=yes /var/lib/awx/venv/awx/bin/awx-manage collectstatic --noinput --clear\n{% endif %}\n\n{% endif %}\n\n# Final container(s)\nFROM quay.io/centos/centos:stream9\n\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nUSER root\n\n# Install runtime requirements\nRUN dnf -y update && dnf install -y 'dnf-command(config-manager)' && \\\n    dnf config-manager --set-enabled crb && \\\n    dnf -y install acl \\\n    git-core \\\n    git-lfs \\\n    glibc-langpack-en \\\n    krb5-workstation \\\n    nginx \\\n    postgresql \\\n    python3-devel \\\n    python3-libselinux \\\n    python3-pip \\\n    python3-psycopg2 \\\n    python3-setuptools \\\n    rsync \\\n    \"rsyslog >= 8.1911.0\" \\\n    subversion \\\n    sudo \\\n    vim-minimal \\\n    which \\\n    unzip \\\n    xmlsec1-openssl && \\\n    dnf -y clean all\n\nRUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && \\\n    chmod 700 get_helm.sh && \\\n    ./get_helm.sh\n\nRUN pip3 install --no-cache-dir virtualenv supervisor dumb-init\n\nRUN rm -rf /root/.cache && rm -rf /tmp/*\n\n{% if (build_dev|bool) or (kube_dev|bool) %}\n# Install development/test requirements\nRUN dnf -y install \\\n    crun \\\n    gdb \\\n    gtk3 \\\n    gettext \\\n    hostname \\\n    procps \\\n    alsa-lib \\\n    libX11-xcb \\\n    libXScrnSaver \\\n    iproute \\\n    strace \\\n    vim \\\n    nmap-ncat \\\n    libpq-devel \\\n    nodejs \\\n    nss \\\n    make \\\n    patch \\\n    socat \\\n    tmux \\\n    wget \\\n    diffutils \\\n    unzip && \\\n    npm install -g n && n 16.13.1 && npm install -g npm@8.5.0 && dnf remove -y nodejs && npm cache clean --force;\n\nRUN pip3 install --no-cache-dir black git+https://github.com/coderanger/supervisor-stdout\n\n# This package randomly fails to download.\n# It is nice to have in the dev env, but not necessary.\n# Add it back to the list above if the repo ever straighten up.\nRUN dnf --enablerepo=baseos-debug -y install python3-debuginfo || :\n\nRUN dnf install -y epel-next-release && dnf install -y inotify-tools && dnf remove -y epel-next-release\n{% endif %}\n\n# Copy app from builder\nCOPY --from=builder /var/lib/awx /var/lib/awx\n\nRUN ln -s /var/lib/awx/venv/awx/bin/awx-manage /usr/bin/awx-manage\n\n{%if build_dev|bool %}\nCOPY --from={{ receptor_image }} /usr/bin/receptor /usr/bin/receptor\n\nRUN openssl req -nodes -newkey rsa:2048 -keyout /etc/nginx/nginx.key -out /etc/nginx/nginx.csr \\\n        -subj \"/C=US/ST=North Carolina/L=Durham/O=Ansible/OU=AWX Development/CN=awx.localhost\" && \\\n    openssl x509 -req -days 365 -in /etc/nginx/nginx.csr -signkey /etc/nginx/nginx.key -out /etc/nginx/nginx.crt && \\\n    chmod 640 /etc/nginx/nginx.{csr,key,crt}\n{% endif %}\n\n{% if build_dev|bool %}\nRUN dnf install -y podman && rpm --restore shadow-utils 2>/dev/null\n\n# chmod containers.conf and adjust storage.conf to enable Fuse storage.\nRUN sed -i -e 's|^#mount_program|mount_program|g' -e '/additionalimage.*/a \"/var/lib/shared\",' -e 's|^mountopt[[:space:]]*=.*$|mountopt = \"nodev,fsync=0\"|g' /etc/containers/storage.conf\n\nENV _CONTAINERS_USERNS_CONFIGURED=\"\"\n\n# Ensure we must use fully qualified image names\n# This prevents podman prompt that hangs when trying to pull unqualified images\nRUN mkdir -p /etc/containers/registries.conf.d/ && echo \"unqualified-search-registries = []\" >> /etc/containers/registries.conf.d/force-fully-qualified-images.conf && chmod 644 /etc/containers/registries.conf.d/force-fully-qualified-images.conf\n{% endif %}\n\n# Create default awx rsyslog config\nADD tools/ansible/roles/dockerfile/files/rsyslog.conf /var/lib/awx/rsyslog/rsyslog.conf\nADD tools/ansible/roles/dockerfile/files/wait-for-migrations /usr/local/bin/wait-for-migrations\nADD tools/ansible/roles/dockerfile/files/stop-supervisor /usr/local/bin/stop-supervisor\n\n## File mappings\n{% if build_dev|bool %}\nADD tools/docker-compose/launch_awx.sh /usr/bin/launch_awx.sh\nADD tools/docker-compose/nginx.conf /etc/nginx/nginx.conf\nADD tools/docker-compose/nginx.vh.default.conf /etc/nginx/conf.d/nginx.vh.default.conf\nADD tools/docker-compose/start_tests.sh /start_tests.sh\nADD tools/docker-compose/bootstrap_development.sh /usr/bin/bootstrap_development.sh\nADD tools/docker-compose/entrypoint.sh /entrypoint.sh\nADD tools/scripts/config-watcher /usr/bin/config-watcher\nADD https://raw.githubusercontent.com/containers/libpod/master/contrib/podmanimage/stable/containers.conf /etc/containers/containers.conf\nADD https://raw.githubusercontent.com/containers/libpod/master/contrib/podmanimage/stable/podman-containers.conf /var/lib/awx/.config/containers/containers.conf\n{% else %}\nADD tools/ansible/roles/dockerfile/files/launch_awx.sh /usr/bin/launch_awx.sh\nADD tools/ansible/roles/dockerfile/files/launch_awx_task.sh /usr/bin/launch_awx_task.sh\nADD tools/ansible/roles/dockerfile/files/settings.py /etc/tower/settings.py\nADD tools/ansible/roles/dockerfile/files/uwsgi.ini /etc/tower/uwsgi.ini\nADD {{ template_dest }}/supervisor.conf /etc/supervisord.conf\nADD {{ template_dest }}/supervisor_task.conf /etc/supervisord_task.conf\n{% endif %}\n{% if (build_dev|bool) or (kube_dev|bool) %}\nADD tools/docker-compose/awx.egg-link /tmp/awx.egg-link\nADD tools/docker-compose/awx-manage /usr/local/bin/awx-manage\nADD tools/scripts/awx-python /usr/bin/awx-python\n{% endif %}\n\n# Pre-create things we need to access\nRUN for dir in \\\n      /var/lib/awx \\\n      /var/lib/awx/rsyslog \\\n      /var/lib/awx/rsyslog/conf.d \\\n      /var/lib/awx/.local/share/containers/storage \\\n      /var/run/awx-rsyslog \\\n      /var/log/tower \\\n      /var/log/nginx \\\n      /var/lib/postgresql \\\n      /var/run/supervisor \\\n      /var/run/awx-receptor \\\n      /var/lib/nginx ; \\\n    do mkdir -m 0775 -p $dir ; chmod g+rwx $dir ; chgrp root $dir ; done && \\\n    for file in \\\n      /etc/subuid \\\n      /etc/subgid \\\n      /etc/group \\\n      /etc/passwd \\\n      /var/lib/awx/rsyslog/rsyslog.conf ; \\\n    do touch $file ; chmod g+rw $file ; chgrp root $file ; done\n\n{% if (build_dev|bool) or (kube_dev|bool) %}\nRUN for dir in \\\n      /etc/containers \\\n      /var/lib/awx/.config/containers \\\n      /var/lib/awx/.config/cni \\\n      /var/lib/awx/venv \\\n      /var/lib/awx/venv/awx/bin \\\n      /var/lib/awx/venv/awx/lib/python3.9 \\\n      /var/lib/awx/venv/awx/lib/python3.9/site-packages \\\n      /var/lib/awx/projects \\\n      /var/lib/awx/rsyslog \\\n      /var/run/awx-rsyslog \\\n      /.ansible \\\n      /var/lib/shared/overlay-images \\\n      /var/lib/shared/overlay-layers \\\n      /var/lib/shared/vfs-images \\\n      /var/lib/shared/vfs-layers \\\n      /var/lib/awx/vendor ; \\\n    do mkdir -m 0775 -p $dir ; chmod g+rwx $dir ; chgrp root $dir ; done && \\\n    for file in \\\n      /etc/containers/containers.conf \\\n      /var/lib/awx/.config/containers/containers.conf \\\n      /var/lib/shared/overlay-images/images.lock \\\n      /var/lib/shared/overlay-layers/layers.lock \\\n      /var/lib/shared/vfs-images/images.lock \\\n      /var/lib/shared/vfs-layers/layers.lock \\\n      /var/run/nginx.pid \\\n      /var/lib/awx/venv/awx/lib/python3.9/site-packages/awx.egg-link ; \\\n    do touch $file ; chmod g+rw $file ; done\n{% endif %}\n\n{% if not build_dev|bool %}\nRUN ln -sf /dev/stdout /var/log/nginx/access.log && \\\n    ln -sf /dev/stderr /var/log/nginx/error.log\n{% endif %}\n\nENV HOME=\"/var/lib/awx\"\nENV PATH=\"/usr/pgsql-12/bin:${PATH}\"\n\n{% if build_dev|bool %}\nENV PATH=\"/var/lib/awx/venv/awx/bin/:${PATH}\"\n\nEXPOSE 8043 8013 8080 22\n\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n{% else %}\nUSER 1000\nEXPOSE 8052\n\nENTRYPOINT [\"dumb-init\", \"--\"]\nCMD /usr/bin/launch_awx.sh\nVOLUME /var/lib/nginx\nVOLUME /var/lib/awx/.local/share/containers\n{% endif %}\n"
}