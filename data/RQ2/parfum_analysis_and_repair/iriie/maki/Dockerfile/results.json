{
  "startTime": 1674248171884,
  "endTime": 1674248173106,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build configuration\nARG project_name=maki\n# Fill in name of crate^ here\n\n# Set up rust build environment\nFROM rust:latest as builder\nARG project_name\n\n# install lib/s needed by Songbird\nRUN apt-get update && apt-get install --no-install-recommends -y libopus-dev && rm -rf /var/lib/apt/lists/*;\n\n# Create layer for the dependencies, so we don't have to rebuild them later\nWORKDIR /usr/src\nRUN USER=root cargo new $project_name\nWORKDIR /usr/src/$project_name\nCOPY Cargo.toml Cargo.lock ./\nRUN cargo build --release\nRUN rm src/*.rs\n\n# Build the actual source\nCOPY src ./src\nCOPY graphql ./graphql\nCOPY sqlx-data.json ./sqlx-data.json\nRUN touch ./src/main.rs && cargo build --release\n\n# Create a \"minimal\" docker file, using buster as we need it for voice\nFROM debian:buster-slim\nARG project_name\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y ca-certificates libopus-dev ffmpeg sudo python3-pip \\\n    && rm -rf /var/lib/apt/lists/*\nRUN pip3 install --no-cache-dir youtube_dl\nCOPY --from=builder /usr/src/$project_name/target/release/$project_name ./app\nUSER 1000\nCMD [\"./app\"]\n"
}