{
  "startTime": 1674253053224,
  "endTime": 1674253053852,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We use debian 9 to allow our binary distribution to run on a lower version of libc.\n# This increases our compatiblity.\n# However, we need openssl 1.1.1 (for the -pbkdf2 argument support), which is\n# only on debian 10. So we'll compile openssl.\nFROM debian:9\n\nWORKDIR /src/fastfreeze\n\n# Few essential things before we can get going\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential pkg-config sudo curl git python3 && rm -rf /var/lib/apt/lists/*;\n\nRUN set -ex; \\\n  curl -fsSL https://www.openssl.org/source/openssl-1.1.1j.tar.gz | \\\n    tar xzf - -C /tmp; \\\n  cd /tmp/openssl-1.1.1j; \\\n  ./config; \\\n  make -j4; \\\n  make install -j4\n\n# Build dependencies (CRIU, rust toolchain, libvirtcpuid, etc.)\nCOPY deps deps\n# We clean first because we might have a copy of the host compiled binaries\n# No -j2 because compiling two rust programs will make the memory usage blow up\nRUN make -C deps clean && make -C deps\nENV CARGO=/root/.cargo/bin/cargo\n\n# Build FastFreeze Rust dependencies\n# This enables fast image rebuild when making code modification\nCOPY Cargo.lock .\nCOPY Cargo.toml .\nRUN set -ex; \\\n  mkdir src; \\\n  echo \"\" > src/lib.rs; \\\n  echo \"fn main() {}\" > src/main.rs; \\\n  $CARGO test --release; \\\n  $CARGO build --release;\n\n# Build FastFreeze\nCOPY src src\nRUN touch src/lib.rs src/main.rs\nRUN $CARGO test --release\nRUN $CARGO build --release\n\n# Package FastFreeze.\n# Note: We only copy the files we need to get better build caches with docker\nCOPY Makefile .\nCOPY scripts/fastfreeze scripts/\nRUN make\n"
}