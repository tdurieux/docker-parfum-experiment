{
  "startTime": 1674217022401,
  "endTime": 1674217023230,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for development purposes.\n# Read docs/development.md for more information\n\n# vi: ft=dockerfile\n\n###############################################################################\n# Base build image\nFROM golang:1.16-alpine AS build_base\nRUN apk add --no-cache bash ca-certificates git gcc g++ libc-dev\nWORKDIR /go/src/github.com/semi-technologies/weaviate\nENV GO111MODULE=on\n# Populate the module cache based on the go.{mod,sum} files.\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\n\n###############################################################################\n# This image builds the weavaite server\nFROM build_base AS server_builder\nARG TARGETARCH\nCOPY . .\nRUN GOOS=linux GOARCH=$TARGETARCH go build  -ldflags '-w -extldflags \"-static\"' -o /weaviate-server ./cmd/weaviate-server\n\n###############################################################################\n# This creates an image that can be used to fake an api for telemetry acceptance test purposes\nFROM build_base AS telemetry_mock_api\nCOPY . .\nENTRYPOINT [\"./tools/dev/telemetry_mock_api.sh\"]\n\n###############################################################################\n# Weaviate (no differentiation between dev/test/prod - 12 factor!)\nFROM alpine AS weaviate\nENTRYPOINT [\"/bin/weaviate\"]\nCOPY --from=server_builder /weaviate-server /bin/weaviate\nCOPY --from=build_base /etc/ssl/certs /etc/ssl/certs\nRUN mkdir ./modules\nCMD [ \"--host\", \"0.0.0.0\", \"--port\", \"8080\", \"--scheme\", \"http\"]\n"
}