{
  "startTime": 1674253963016,
  "endTime": 1674253963584,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Build Production Artifacts\n# ==========================================\n#\n# this first step takes in the source files and build the artifacts\n# (basicall all that need to be transpiled).\n#\n# We do install the NPM dependencies twice so to copy over to the\n# production image only what is strictly needed to execute our app.\n#\n# NPM Install is the first step so to exploit Docker's cache mechanism\n# and speed up the building process. We will re-install from NPM only\n# if we touch the `package.json` file. Which doesn't happen so often.\n#\n\nFROM node:10.14-alpine AS builder\n\n# NPM Install for building\nWORKDIR /usr/src/app-build\nADD package.json /usr/src/app-build/package.json\nRUN npm install && npm cache clean --force;\n\n# NPM Install for production\nWORKDIR /usr/src/app-run\nADD package.json /usr/src/app-run/package.json\nRUN npm install --only=production && npm cache clean --force;\n\n# Copy source files:\nWORKDIR /usr/src/app-build\nADD index.js /usr/src/app-build\nADD .babelrc /usr/src/app-build\nADD webpack.config.extend.js /usr/src/app-build\nADD webpackDevServer.config.extend.js /usr/src/app-build\n\n# Build backend\nWORKDIR /usr/src/app-build\nADD ssr /usr/src/app-build/ssr\nRUN npm run build:ssr\n\n# Build frontend\nWORKDIR /usr/src/app-build\nADD src /usr/src/app-build/src\nRUN npm run build:src\nADD public /usr/src/app-build/public\nRUN ./node_modules/.bin/react-scripts build\n\n\n\n\n#\n# Runner Image\n# ==========================================\n#\n# in this step we start over with a fresh image and copy only what is\n# strictly necessary in order to run a production build.\n#\n# the idea is to keep this image as small as possible.\n#\n\nFROM node:10.14-alpine AS runner\n\n# Copy assets for build:\nWORKDIR /usr/src/app\nCOPY --from=builder /usr/src/app-run/node_modules ./node_modules\nCOPY --from=builder /usr/src/app-build/build ./build\nCOPY --from=builder /usr/src/app-build/build-src ./build-src\nCOPY --from=builder /usr/src/app-build/build-ssr ./build-ssr\nADD package.json /usr/src/app\nADD index.js /usr/src/app\n\n# Default environment configuration:\nEXPOSE 8080\nENV NODE_ENV=production\nENV REACT_SSR=true\n\nCMD node index.js\n"
}