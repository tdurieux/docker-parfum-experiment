{
  "startTime": 1674249757848,
  "endTime": 1674249758906,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedDockerfile": "############################################################\n# Dockerfile that creates a container for running Gate One.\n# Inside the container Gate One will run as the 'gateone'\n# user and will listen on port 8000.  docker run example:\n#\n#   docker run -t --name=gateone -p 443:8000 gateone\n#\n# That would run Gate One; accessible via port 443 from\n# outside the container.  It will also run in the foreground\n# with pretty-printed log output (so you can see what's\n# going on).  To run Gate One in the background:\n#\n#   docker run -d --name=gateone -p 443:8000 gateone\n#\n# You could then stop or start the container like so:\n#\n#   docker stop gateone\n#   docker start gateone\n#\n# The script that starts Gate One inside of the container\n# performs a 'git pull' and will automatically install the\n# latest code whenever it runs.  To disable this feature\n# simply pass --noupdate when running the container:\n#\n#   docker run -d --name=gateone -p 443:8000 gateone --noupdate\n#\n# Note that merely stopping & starting the container doesn't\n# pull in updates.  That will only happen if you 'docker rm'\n# the container and start it back up again.\n#\n############################################################\n\nFROM ubuntu\nMAINTAINER Dan McDougall <daniel.mcdougall@liftoffsoftware.com>\n\nENV GATEONE_REPO_URL https://github.com/liftoff/GateOne.git\n\n# Ensure everything is up-to-date\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update --fix-missing && apt-get -y upgrade\n\n# Install dependencies\nRUN apt-get -y --no-install-recommends \\\n    install python-pip \\\n    python-imaging \\\n    python-setuptools \\\n    python-mutagen \\\n    python-pam \\\n    python-dev \\\n    git \\\n    telnet \\\n    openssh-client && \\\n    apt-get -y clean && \\\n    apt-get -q -y autoremove && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir --upgrade futures tornado cssmin slimit psutil\n\n# Create the necessary directories, clone the repo, and install everything\nRUN mkdir -p /gateone/logs && \\\n    mkdir -p /gateone/users && \\\n    mkdir -p /etc/gateone/conf.d && \\\n    mkdir -p /etc/gateone/ssl && \\\n    cd /gateone && \\\n    git clone $GATEONE_REPO_URL && \\\n    cd GateOne && \\\n    python setup.py install && \\\n    cp docker/update_and_run_gateone.py /usr/local/bin/update_and_run_gateone && \\\n    cp docker/60docker.conf /etc/gateone/conf.d/60docker.conf\n\n# This ensures our configuration files/dirs are created:\nRUN /usr/local/bin/gateone --configure \\\n    --log_file_prefix=\"/gateone/logs/gateone.log\"\n\n# Remove the auto-generated key/certificate so that a new one gets created the\n# first time the container is started:\nRUN rm -f /etc/gateone/ssl/key.pem && \\\n    rm -f /etc/gateone/ssl/certificate.pem\n# (We don't want everyone using the same SSL key/certificate)\n\nEXPOSE 8000\n\nCMD [\"/usr/local/bin/update_and_run_gateone\", \"--log_file_prefix=/gateone/logs/gateone.log\"]\n"
}