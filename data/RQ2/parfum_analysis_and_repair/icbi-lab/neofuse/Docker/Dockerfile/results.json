{
  "startTime": 1674250197894,
  "endTime": 1674250199681,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 122,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 210,
        "lineEnd": 210,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 1,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 49,
        "columnStart": 25,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 49,
        "columnStart": 25,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 1,
        "columnEnd": 99
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# work from ubuntu 18.04 base image\nFROM ubuntu:18.04\n\n# set the environment variables\nENV optitype_version 1.3.2\nENV samtools_version 1.9\nENV bedtools_version 2.27.1\nENV PATH /usr/local/bin/:${PATH}\n\n# run update and install necessary utils\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n\tbuild-essential \\\n\tcurl \\\n\tunzip \\\n\tpython-minimal \\\n\tbzip2 \\\n\tzlib1g-dev \\\n\tlibncurses5-dev \\\n\tlibncursesw5-dev \\\n\tlibnss-sss \\\n\tlibbz2-dev \\\n\tliblzma-dev \\\n\tlibhdf5-dev \\\n\tglpk-utils \\\n\tpython-pip \\\n\tlibpng-dev \\\n\tlibfreetype6-dev \\\n\tlibfreetype6 \\\n\tpkg-config \\\n\tvim \\\n\tless \\\n\tcoinor-cbc \\\n\twget \\\n\tgcc \\\n\tg++ \\\n\tmake \\\n\tzlib1g-dev \\\n\tunzip \\\n\tgit \\\n\tcmake \\\n\tautoconf \\\n\tpigz \\\n\tpython3-pip \\\n\tcoreutils \\\n\tgit-lfs \\\n\ttcsh \\\n\tgawk \\\n\tlocales \\\n\tvim \\\n\tprocps && rm -rf /var/lib/apt/lists/*;\n\n# Fix locale issues\nRUN export LC_ALL=en_US.UTF-8 && \\\n\texport LANG=en_US.UTF-8 && \\\n\tlocale-gen en_US.UTF-8\n\n# Set working directory\nWORKDIR /usr/local/bin/\n\n#Install STAR\nARG STAR_VERSION=2.7.1a\nRUN set -ex && \\\n\twget --no-check-certificate https://github.com/alexdobin/STAR/archive/${STAR_VERSION}.zip && \\\n\tunzip ${STAR_VERSION}.zip && \\\n\tcd STAR-${STAR_VERSION}/source && \\\n\tmake STARstatic && \\\n\tcp STAR /usr/local/bin && \\\n\tcd /usr/local/bin && \\\n\t'rm' -rf STAR-${STAR_VERSION} && \\\n\trm -rf ${STAR_VERSION}.zip\n\n# Install YARA\nRUN git clone https://github.com/seqan/seqan.git && \\\n\tmkdir yara-build\nWORKDIR /usr/local/bin/yara-build/\nRUN cmake ../seqan -DSEQAN_BUILD_SYSTEM=APP:yara && \\\n\tmake all && \\\n\tln -s /usr/local/bin/yara-build/bin/yara* /usr/local/bin/\nWORKDIR /usr/local/bin/\n\n# Install samtools\nADD https://github.com/samtools/samtools/releases/download/${samtools_version}/samtools-${samtools_version}.tar.bz2 /usr/local/bin/\n\nRUN tar -xjf /usr/local/bin/samtools-${samtools_version}.tar.bz2 -C /usr/local/bin/ && \\\n\tcd /usr/local/bin/samtools-${samtools_version}/ && make && \\\n\tcd /usr/local/bin/samtools-${samtools_version}/ && make install && rm /usr/local/bin/samtools-${samtools_version}.tar.bz2\n\n# Install required python modules\nRUN python -m pip install --upgrade pip && \\\n\tpython3 -m pip install --upgrade pip && \\\n\tpython -m pip install 'NumPy==1.16.6' && \\\n\tpython -m pip install 'numexpr==2.7.0' && \\\n\tpython -m pip install 'six==1.16.0' && \\\n\tpython -m pip install 'tables==3.5.2' && \\\n\tpython -m pip install 'Pyomo' && \\\n\tpython -m pip install 'Pandas' && \\\n\tpython -m pip install 'Pysam' && \\\n\tpython -m pip install 'Matplotlib' && \\\n\tpython -m pip install 'Future' && \\\n\tpython3 -m pip install 'keras==2.3' && \\\n\tpython3 -m pip install 'setuptools==47.3.1' && \\\n\tpython3 -m pip install 'Pandas' && \\\n\tpython3 -m pip install 'six' && \\\n\tpython3 -m pip install 'pandas>=0.20.3' && \\\n\tpython3 -m pip install 'tensorflow>=2.2.0,<2.3.0' && \\\n\tpython3 -m pip install 'appdirs' && \\\n\tpython3 -m pip install 'scikit-learn' && \\\n\tpython3 -m pip install 'mhcgnomes' && \\\n\tpython3 -m pip install 'pyyaml' && \\\n\tpython3 -m pip install 'tqdm' && \\\n\tpython3 -m pip install 'np_utils'\n\n# Install python modules\n# RUN pip install 'NumPy==1.15.4' && \\\n# \tpip install 'Pyomo==4.2.10784' && \\\n# \tpip install 'Pandas==0.16.2' && \\\n# \tpip install 'Pysam==0.8.3' && \\\n# \tpip install 'Matplotlib==1.4.3' && \\\n# \tpip install 'Future==0.15.2' && \\\n# \tpip install 'tables==3.2.2'\n\n# Install OptiType\nRUN curl -f -SL https://github.com/FRED-2/OptiType/archive/v${optitype_version}.zip \\\n  >  v${optitype_version}.zip && \\\n\tunzip v${optitype_version}.zip\n\n## set up default configuration\nRUN mv /usr/local/bin/OptiType-${optitype_version}/config.ini.example /usr/local/bin/OptiType-${optitype_version}/config.ini && \\\n\tsed -i 's/\\/path\\/to\\//\\/usr\\/local\\/bin\\//' /usr/local/bin/OptiType-${optitype_version}/config.ini && \\\n\tsed -i 's/threads=16/threads=8/g' /usr/local/bin/OptiType-${optitype_version}/config.ini && \\\n\tsed -i 's/glpk/cbc/' /usr/local/bin/OptiType-${optitype_version}/config.ini\n\n## Create YARA indices from OptiType HLA reference\nRUN mkdir /usr/local/bin/yara_idx/ && \\\n\tyara_indexer /usr/local/bin/OptiType-1.3.2/data/hla_reference_rna.fasta -o /usr/local/bin/yara_idx/hla_reference_rna\n\n# Install R and packages\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n\tapt-get update -y && \\\n\tapt-get install -y --no-install-recommends r-base ca-certificates libcurl4-openssl-dev libxml2-dev && \\\n\tRscript -e 'install.packages(\"circlize\", repos=\"http://cran.r-project.org\"); source(\"https://bioconductor.org/biocLite.R\"); biocLite(c(\"GenomicRanges\", \"GenomicAlignments\"))' && rm -rf /var/lib/apt/lists/*;\n\n# Install arriba 2.1.0 verion\nRUN mkdir -p /usr/local/bin/arriba_v2\nWORKDIR /usr/local/bin/arriba_v2\nRUN git clone https://github.com/suhrig/arriba.git\nWORKDIR /usr/local/bin/arriba_v2/arriba\nRUN git checkout develop \\\n\t&& make \\\n\t&& ln -s /usr/local/bin/arriba_v2/arriba/arriba /usr/local/bin/arriba\nWORKDIR /usr/local/bin/\n\n# # Install arriba\n# RUN wget -q -O - \"https://github.com/suhrig/arriba/releases/download/v1.1.0/arriba_v1.1.0.tar.gz\" | tar -xzf -\n\n# ## make wrapper script for download_references.sh\n# RUN echo '#!/bin/bash\\n\\\n# cd /references\\n\\\n# /arriba*/download_references.sh $1 $2 && \\\\\\n\\\n# cp /arriba*/database/*${1%+*}* /references' > /usr/local/bin/download_references.sh && \\\n# \tchmod a+x /usr/local/bin/download_references.sh\n\n# ## make wrapper script for run_arriba.sh\n# RUN echo '#!/bin/bash\\n\\\n# cd /output\\n\\\n# /arriba*/run_arriba.sh /references/STAR_index_* /references/*.gtf /references/*.fa /references/blacklist_*.tsv.gz /read1.fastq.gz /read2.fastq.gz ${1-8}' > /usr/local/bin/arriba.sh && \\\n# chmod a+x /usr/local/bin/arriba.sh && \\\n# \tln -s /usr/local/bin/arriba_v1.1.0/arriba /usr/local/bin/arriba\n\n# ## make wrapper script for draw_fusions.R\n# RUN echo '#!/bin/bash\\n\\\n# Rscript /arriba*/draw_fusions.R --annotation=$(ls /references/*.gtf) --fusions=/fusions.tsv --output=/output/fusions.pdf --proteinDomains=$(ls /references/protein_domains_*.gff3) --alignments=/Aligned.sortedByCoord.out.bam --cytobands=$(ls /references/cytobands_*.tsv)' > /usr/local/bin/draw_fusions.sh && \\\n# \tchmod a+x /usr/local/bin/draw_fusions.sh\n\n# Install featureCounts\nARG PACKAGE_VERSION=1.6.1\nRUN wget -q https://downloads.sourceforge.net/project/subread/subread-${PACKAGE_VERSION}/subread-${PACKAGE_VERSION}-source.tar.gz && \\\n\ttar -xzf subread-${PACKAGE_VERSION}-source.tar.gz && \\\n\tcd subread-${PACKAGE_VERSION}-source/src && \\\n\tmake -f Makefile.Linux && \\\n\tcd ../bin && \\\n\tmv utilities/* . && \\\n\trmdir utilities && \\\n\tln -s /usr/local/bin/subread-1.6.1-source/bin/featureCounts /usr/local/bin/featureCounts && rm subread-${PACKAGE_VERSION}-source.tar.gz\n\n# Copy reference files and scripts\nRUN mkdir -p /usr/local/bin/genomes/ && \\\n\tmkdir -p /usr/local/bin/source/ && \\\n\tmkdir -p /usr/local/bin/tmp/\nCOPY ./source/blacklist_hg38_GRCh38_2018-11-04.tsv.gz /usr/local/bin/genomes/\nCOPY ./source/ /usr/local/bin/source/\nWORKDIR /usr/local/bin/source/\nRUN chmod +x NeoFuse_single.sh && \\\n\tchmod +x NeoFuse_multi.sh && \\\n\tchmod +x NeoFuse.sh && \\\n\tchmod +x NeoFuse_download.sh && \\\n\tln -s /usr/local/bin/source/NeoFuse_single.sh /usr/local/bin/NeoFuse_single && \\\n\tln -s /usr/local/bin/source/NeoFuse_multi.sh /usr/local/bin/NeoFuse_multi && \\\n\tln -s /usr/local/bin/source/NeoFuse.sh /usr/local/bin/NeoFuse && \\\n\tln -s /usr/local/bin/source/NeoFuse_download.sh /usr/local/bin/NeoFuse-download\n\n# Clean up\nRUN apt-get autoclean -y && apt-get clean -y && \\\n\trm /usr/local/bin/samtools-1.9.tar.bz2 && \\\n\trm /usr/local/bin/subread-1.6.1-source.tar.gz && \\\n\trm /usr/local/bin/v1.3.2.zip\n\nWORKDIR /usr/local/bin/\n\n# Install MHCFlurry\nRUN pip install --no-cache-dir mhcflurry\n\nENV MHCFLURRY_DEFAULT_CLASS1_MODELS /home/neofuse/.local/share/mhcflurry/4/2.0.0\n# ENV MHCFLURRY_DEFAULT_CLASS1_MODELS /home/neofuse/.local/share/mhcflurry/4/1.6.0\n# ENV MHCFLURRY_DOWNLOADS_DIR /home/neofuse/.local/share/mhcflurry/4/1.4.0\n\n# Add user to install MHCflurry models in \"~/\" dir\nRUN useradd -ms /bin/bash neofuse\nUSER neofuse\n\n# Download MHCflurry class I pan models\nRUN mhcflurry-downloads fetch models_class1_pan\n\nWORKDIR /home/\n"
}