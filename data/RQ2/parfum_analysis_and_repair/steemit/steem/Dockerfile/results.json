{
  "startTime": 1674217004664,
  "endTime": 1674217006472,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 8,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM phusion/baseimage:0.11\n\n#ARG STEEMD_BLOCKCHAIN=https://example.com/steemd-blockchain.tbz2\n\nARG STEEM_STATIC_BUILD=ON\nENV STEEM_STATIC_BUILD ${STEEM_STATIC_BUILD}\nARG BUILD_STEP\nENV BUILD_STEP ${BUILD_STEP}\nARG CI_BUILD\nENV CI_BUILD ${CI_BUILD}\n\nENV LANG=en_US.UTF-8\n\nRUN \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        autoconf \\\n        automake \\\n        autotools-dev \\\n        bsdmainutils \\\n        build-essential \\\n        cmake \\\n        doxygen \\\n        gdb \\\n        git \\\n        libboost-all-dev \\\n        libyajl-dev \\\n        libreadline-dev \\\n        libssl-dev \\\n        libtool \\\n        liblz4-tool \\\n        ncurses-dev \\\n        pkg-config \\\n        python3 \\\n        python3-dev \\\n        python3-jinja2 \\\n        python3-pip \\\n        nginx \\\n        fcgiwrap \\\n        awscli \\\n        jq \\\n        wget \\\n        virtualenv \\\n        gdb \\\n        libgflags-dev \\\n        libsnappy-dev \\\n        zlib1g-dev \\\n        libbz2-dev \\\n        liblz4-dev \\\n        libzstd-dev \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    pip3 install --no-cache-dir gcovr\n\nADD . /usr/local/src/steem\n\nRUN \\\n    if [ \"$CI_BUILD\" ] ; then \\\n        pip3 install --no-cache-dir awscli --user && \\\n        aws s3 cp s3://steemit-dev-ci/steemd-CTestCostData.txt /usr/local/src/steem/CTestCostData.txt; \\\n    fi\n\nRUN \\\n    if [ \"$BUILD_STEP\" = \"1\" ] || [ ! \"$BUILD_STEP\" ] ; then \\\n    cd /usr/local/src/steem && \\\n    git submodule update --init --recursive && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_STEEM_TESTNET=ON \\\n        -DLOW_MEMORY_NODE=OFF \\\n        -DCLEAR_VOTES=ON \\\n        -DSKIP_BY_TX_ID=ON \\\n        .. && \\\n    make -j$(nproc) chain_test test_fixed_string plugin_test && \\\n    if [ \"$CI_BUILD\" ] ; then \\\n        mkdir -p build/tests/Testing/Temporary && \\\n        cp /usr/local/src/steem/CTestCostData.txt build/tests/Testing/Temporary ; \\\n    fi && \\\n    cd tests && \\\n    ctest -j$(nproc) --output-on-failure && \\\n    ./chain_test -t basic_tests/curation_weight_test && \\\n    cd .. && \\\n    ./programs/util/test_fixed_string && \\\n    cd /usr/local/src/steem && \\\n    doxygen && \\\n    PYTHONPATH=programs/build_helpers \\\n    python3 -m steem_build_helpers.check_reflect && \\\n    programs/build_helpers/get_config_check.sh && \\\n    rm -rf /usr/local/src/steem/build ; \\\n    fi\n\nRUN \\\n    if [ \"$BUILD_STEP\" = \"2\" ] || [ ! \"$BUILD_STEP\" ] ; then \\\n    cd /usr/local/src/steem && \\\n    git submodule update --init --recursive && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-testnet \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_STEEM_TESTNET=ON \\\n        -DLOW_MEMORY_NODE=OFF \\\n        -DCLEAR_VOTES=ON \\\n        -DSKIP_BY_TX_ID=ON \\\n        -DENABLE_MIRA=ON \\\n        -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} \\\n        .. && \\\n    make -j$(nproc) chain_test mira_test test_fixed_string plugin_test && \\\n    make install && \\\n    if [ \"$CI_BUILD\" ] ; then \\\n        mkdir -p build/tests/Testing/Temporary && \\\n        cp /usr/local/src/steem/CTestCostData.txt build/tests/Testing/Temporary ; \\\n    fi && \\\n    cd tests && \\\n    ctest -j$(nproc) --output-on-failure && \\\n    cd .. && \\\n    ./libraries/mira/test/mira_test && \\\n    ./programs/util/test_fixed_string && \\\n    cd /usr/local/src/steem && \\\n    doxygen && \\\n    PYTHONPATH=programs/build_helpers \\\n    python3 -m steem_build_helpers.check_reflect && \\\n    programs/build_helpers/get_config_check.sh && \\\n    if [ \"$CI_BUILD\" ] ; then \\\n        aws s3 cp s3://steemit-dev-ci/steemd-CTestCostData.txt s3://steemit-dev-ci/steemd-CTestCostData.txt.bk && \\\n        aws s3 cp build/tests/Testing/Temporary/CTestCostData.txt s3://steemit-dev-ci/steemd-CTestCostData.txt; \\\n    fi && \\\n    rm -rf /usr/local/src/steem/build ; \\\n    fi\n\nRUN \\\n    if [ \"$BUILD_STEP\" = \"1\" ] || [ ! \"$BUILD_STEP\" ] ; then \\\n    cd /usr/local/src/steem && \\\n    git submodule update --init --recursive && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Debug \\\n        -DENABLE_COVERAGE_TESTING=ON \\\n        -DBUILD_STEEM_TESTNET=ON \\\n        -DLOW_MEMORY_NODE=OFF \\\n        -DCLEAR_VOTES=ON \\\n        -DSKIP_BY_TX_ID=ON \\\n        -DENABLE_MIRA=ON \\\n        -DCHAINBASE_CHECK_LOCKING=OFF \\\n        .. && \\\n    make -j$(nproc) chain_test plugin_test && \\\n    if [ \"$CI_BUILD\" ] ; then \\\n        mkdir -p build/tests/Testing/Temporary && \\\n        cp /usr/local/src/steem/CTestCostData.txt build/tests/Testing/Temporary ; \\\n    fi && \\\n    cd tests && \\\n    ctest -j$(nproc) --output-on-failure && \\\n    cd .. && \\\n    mkdir -p /var/cobertura && \\\n    gcovr --object-directory=\"../\" --root=../ --xml-pretty --gcov-exclude=\".*tests.*\" --gcov-exclude=\".*fc.*\" --gcov-exclude=\".*app*\" --gcov-exclude=\".*net*\" --gcov-exclude=\".*plugins*\" --gcov-exclude=\".*schema*\" --gcov-exclude=\".*time*\" --gcov-exclude=\".*utilities*\" --gcov-exclude=\".*wallet*\" --gcov-exclude=\".*programs*\" --gcov-exclude=\".*vendor*\" --output=\"/var/cobertura/coverage.xml\" && \\\n    cd /usr/local/src/steem && \\\n    rm -rf /usr/local/src/steem/build ; \\\n    fi\n\nRUN \\\n    if [ \"$BUILD_STEP\" = \"2\" ] || [ ! \"$BUILD_STEP\" ] ; then \\\n    cd /usr/local/src/steem && \\\n    git submodule update --init --recursive && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-default \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DLOW_MEMORY_NODE=ON \\\n        -DCLEAR_VOTES=ON \\\n        -DSKIP_BY_TX_ID=OFF \\\n        -DBUILD_STEEM_TESTNET=OFF \\\n        -DENABLE_MIRA=ON \\\n        -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} \\\n        .. \\\n    && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd .. && \\\n    ( /usr/local/steemd-default/bin/steemd --version \\\n      | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*' \\\n      && echo '_' \\\n      && git rev-parse --short HEAD ) \\\n      | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g' \\\n      > /etc/steemdversion && \\\n    cat /etc/steemdversion && \\\n    rm -rfv build && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-full \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DLOW_MEMORY_NODE=OFF \\\n        -DCLEAR_VOTES=OFF \\\n        -DSKIP_BY_TX_ID=ON \\\n        -DBUILD_STEEM_TESTNET=OFF \\\n        -DENABLE_MIRA=ON \\\n        -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} \\\n        .. \\\n    && \\\n    make -j$(nproc) && \\\n    make install && \\\n    rm -rf /usr/local/src/steem ; \\\n    fi\n\nRUN \\\n    apt-get remove -y \\\n        automake \\\n        autotools-dev \\\n        bsdmainutils \\\n        build-essential \\\n        cmake \\\n        doxygen \\\n        dpkg-dev \\\n        libboost-all-dev \\\n        libc6-dev \\\n        libexpat1-dev \\\n        libgcc-7-dev \\\n        libhwloc-dev \\\n        libibverbs-dev \\\n        libicu-dev \\\n        libltdl-dev \\\n        libncurses5-dev \\\n        libnuma-dev \\\n        libopenmpi-dev \\\n        libpython-dev \\\n        libpython2.7-dev \\\n        libreadline-dev \\\n        libreadline6-dev \\\n        libssl-dev \\\n        libstdc++-7-dev \\\n        libtinfo-dev \\\n        libtool \\\n        linux-libc-dev \\\n        m4 \\\n        make \\\n        manpages \\\n        manpages-dev \\\n        mpi-default-dev \\\n        python-dev \\\n        python2.7-dev \\\n        python3-dev \\\n    && \\\n    apt-get autoremove -y && \\\n    rm -rf \\\n        /var/lib/apt/lists/* \\\n        /tmp/* \\\n        /var/tmp/* \\\n        /var/cache/* \\\n        /usr/include \\\n        /usr/local/include\n\nRUN useradd -s /bin/bash -m -d /var/lib/steemd steemd\n\nRUN mkdir /var/cache/steemd && \\\n    chown steemd:steemd -R /var/cache/steemd\n\n# add blockchain cache to image\n#ADD $STEEMD_BLOCKCHAIN /var/cache/steemd/blocks.tbz2\n\nENV HOME /var/lib/steemd\nRUN chown steemd:steemd -R /var/lib/steemd\n\nVOLUME [\"/var/lib/steemd\"]\n\n# rpc service:\nEXPOSE 8090\n# p2p service:\nEXPOSE 2001\n\n# add seednodes from documentation to image\nADD doc/seednodes.txt /etc/steemd/seednodes.txt\n\n# the following adds lots of logging info to stdout\nADD contrib/config-for-docker.ini /etc/steemd/config.ini\nADD contrib/fullnode.config.ini /etc/steemd/fullnode.config.ini\nADD contrib/fullnode.opswhitelist.config.ini /etc/steemd/fullnode.opswhitelist.config.ini\nADD contrib/config-for-broadcaster.ini /etc/steemd/config-for-broadcaster.ini\nADD contrib/config-for-ahnode.ini /etc/steemd/config-for-ahnode.ini\n\n# add normal startup script that starts via sv\nADD contrib/steemd.run /usr/local/bin/steem-sv-run.sh\nRUN chmod +x /usr/local/bin/steem-sv-run.sh\n\n# add nginx templates\nADD contrib/steemd.nginx.conf /etc/nginx/steemd.nginx.conf\nADD contrib/healthcheck.conf.template /etc/nginx/healthcheck.conf.template\n\n# add PaaS startup script and service script\nADD contrib/startpaassteemd.sh /usr/local/bin/startpaassteemd.sh\nADD contrib/pulltestnetscripts.sh /usr/local/bin/pulltestnetscripts.sh\nADD contrib/paas-sv-run.sh /usr/local/bin/paas-sv-run.sh\nADD contrib/sync-sv-run.sh /usr/local/bin/sync-sv-run.sh\nADD contrib/healthcheck.sh /usr/local/bin/healthcheck.sh\nRUN chmod +x /usr/local/bin/startpaassteemd.sh\nRUN chmod +x /usr/local/bin/pulltestnetscripts.sh\nRUN chmod +x /usr/local/bin/paas-sv-run.sh\nRUN chmod +x /usr/local/bin/sync-sv-run.sh\nRUN chmod +x /usr/local/bin/healthcheck.sh\n\n# new entrypoint for all instances\n# this enables exitting of the container when the writer node dies\n# for PaaS mode (elasticbeanstalk, etc)\n# AWS EB Docker requires a non-daemonized entrypoint\nADD contrib/steemdentrypoint.sh /usr/local/bin/steemdentrypoint.sh\nRUN chmod +x /usr/local/bin/steemdentrypoint.sh\nCMD /usr/local/bin/steemdentrypoint.sh\n"
}