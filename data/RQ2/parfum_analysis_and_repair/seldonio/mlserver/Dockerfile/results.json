{
  "startTime": 1674216120636,
  "endTime": 1674216122223,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 8,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 12,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.8-slim AS wheel-builder\nSHELL [\"/bin/bash\", \"-c\"]\n\nCOPY ./hack/build-wheels.sh ./hack/build-wheels.sh\nCOPY ./mlserver ./mlserver\nCOPY ./runtimes ./runtimes\nCOPY \\\n    setup.py \\\n    README.md \\\n    .\n\n# This will build the wheels and place will place them in the\n# /opt/mlserver/dist folder\nRUN ./hack/build-wheels.sh /opt/mlserver/dist\n\nFROM python:3.8-slim\nSHELL [\"/bin/bash\", \"-c\"]\n\nARG RUNTIMES=\"all\"\n\nENV MLSERVER_MODELS_DIR=/mnt/models \\\n    MLSERVER_ENV_TARBALL=/mnt/models/environment.tar.gz \\\n    PATH=/opt/mlserver/.local/bin:$PATH\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install \\\n        libgomp1 libgl1-mesa-dev libglib2.0-0 build-essential && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir /opt/mlserver\nWORKDIR /opt/mlserver\n\n# Create user and fix permissions\n# NOTE: We need to make /opt/mlserver world-writable so that the image is\n# compatible with random UIDs.\nRUN useradd -u 1000 -s /bin/bash mlserver -d /opt/mlserver && \\\n    chown -R 1000:0 /opt/mlserver && \\\n    chmod -R 776 /opt/mlserver\n\nCOPY --from=wheel-builder /opt/mlserver/dist ./dist\n# note: if runtime is \"all\" we install mlserver-<version>-py3-none-any.whl\n# we have to use this syntax to return the correct file: $(ls ./dist/mlserver-*.whl)\nRUN pip install --no-cache-dir --upgrade pip wheel setuptools && \\\n    pip install --no-cache-dir $(ls ./dist/mlserver-*.whl)[all]; \\\n    if [[ $RUNTIMES == \"all\" ]]; then \\\n        pip install --no-cache-dir ./dist/mlserver_*.whl; \\\n    else \\\n        for _runtime in $RUNTIMES; do \\\n        \n            _wheelName=$(echo $_runtime | tr '-' '_'); \\\n            pip install --no-cache-dir \"./dist/$_wheelName-\"*.whl; \\\n           done \\\n\n    fi\n\nCOPY requirements/docker.txt requirements/docker.txt\nRUN pip install --no-cache-dir -r requirements/docker.txt\n\nCOPY ./licenses/license.txt .\nCOPY \\\n    ./hack/build-env.sh \\\n    ./hack/generate_dotenv.py \\\n    ./hack/activate-env.sh \\\n    ./hack/\n\nUSER 1000\n\n# We need to build and activate the \"hot-loaded\" environment before MLServer\n# starts\nCMD source ./hack/activate-env.sh $MLSERVER_ENV_TARBALL . && \\\n    mlserver start $MLSERVER_MODELS_DIR\n"
}