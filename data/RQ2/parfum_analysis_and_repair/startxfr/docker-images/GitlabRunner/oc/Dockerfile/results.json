{
  "startTime": 1674249143401,
  "endTime": 1674249144263,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 133
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM quay.io/startx/runner-bash:latest\n\nENV SX_VERSION=\"latest\" \\\n    SX_TYPE=\"runner\" \\\n    SX_SERVICE=\"oc\" \\\n    SX_ID=\"startx/runner-oc\" \\\n    SX_NAME=\"Startx OCP/K8S client gitlab runner image (fedora rawhide)\" \\\n    SX_SUMMARY=\"Startx ocp/k8s gitlab runner based on fedora rawhide\" \\\n    SX_MAINTAINER_MAIL=\"dev@startx.fr\" \\\n    SX_OC_VERSION=\"4.10.12\" \\\n    SX_ISTIO_VERSION=\"1.14.1\"  \\\n    SX_HELM_VERSION=\"3.9.0\"  \\\n    SX_ARGOCD_VERSION=\"2.4.0\"\n\nLABEL name=\"$SX_ID\" \\\n    summary=\"$SX_SUMMARY\" \\\n    description=\"$SX_SUMMARY. Use for building application based on oc or kubectl using gitlab CI runners.\" \\\n    version=\"$SX_VERSION\" \\\n    release=\"$SX_VERSION\" \\\n    maintainer=\"Startx <$SX_MAINTAINER_MAIL>\" \\\n    io.k8s.description=\"$SX_SUMMARY\" \\\n    io.k8s.display-name=\"$SX_ID\" \\\n    io.openshift.tags=\"startx,os,runner,openshift,kubernetes\" \\\n    io.openshift.min-memory=\"128Mi\" \\\n    io.openshift.min-cpu=\"100m\" \\\n    fr.startx.component=\"$SX_ID:$SX_VERSION\" \\\n    io.artifacthub.package.maintainers='[{\"name\":\"STARTX\",\"email\":\"$SX_MAINTAINER_MAIL\"}]' \\\n    io.artifacthub.package.keywords='startx,os,runner,openshift,kubernetes' \\\n    io.artifacthub.package.readme-url=\"https://gitlab.com/startx1/containers/-/raw/master/GitlabRunner/oc/README.md\" \\\n    io.artifacthub.package.logo-url='https://gitlab.com/startx1/containers/-/raw/master/docs/img/runner-oc.svg' \\\n    io.artifacthub.package.alternative-locations='quay.io/startx/runner-oc,docker.io/startx/runner-oc'\\\n    io.artifacthub.package.license='Apache-2.0' \\\n    org.opencontainers.image.created='2022-06-27T00:00:00Z' \\\n    org.opencontainers.image.version=\"$SX_VERSION\" \\\n    org.opencontainers.image.description=\"$SX_SUMMARY. Use for building application based on oc or kubectl using gitlab CI runners.\" \\\n    org.opencontainers.image.documentation=\"https://docker-images.readthedocs.io/en/latest/GitlabRunner/oc/\" \\\n    org.opencontainers.image.source=\"https://gitlab.com/startx1/containers/-/tree/master/GitlabRunner/oc\" \\\n    org.opencontainers.image.vendor=\"STARTX\"\n\nUSER root\nCOPY sx /tmp/\nRUN dnf install -yq --nogpgcheck \\\n        jq \\\n        python3-pip \\\n        python3-pyOpenSSL \\\n        openssl \\\n        jq && \\\n    dnf clean all && \\\n    pip install --no-cache-dir yq && \\\n    cd /tmp && \\\n    wget -q https://mirror.openshift.com/pub/openshift-v4/clients/ocp/$SX_OC_VERSION/openshift-client-linux-$SX_OC_VERSION.tar.gz && \\\n    tar xzvf openshift-client-linux-$SX_OC_VERSION.tar.gz && \\\n    mv oc kubectl /usr/bin/ && \\\n    rm -f openshift-client-linux-$SX_OC_VERSION.tar.gz && \\\n    wget -q https://mirror.openshift.com/pub/openshift-v4/clients/ocp/$SX_OC_VERSION/openshift-install-linux-$SX_OC_VERSION.tar.gz && \\\n    tar xzvf openshift-install-linux-$SX_OC_VERSION.tar.gz && \\\n    mv openshift-install /usr/bin/ && \\\n    rm -f openshift-install-linux-$SX_OC_VERSION.tar.gz && \\\n    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/v${SX_HELM_VERSION}/scripts/get-helm-3 && \\\n    chmod 700 get_helm.sh && \\\n    ./get_helm.sh && \\\n    rm get_helm.sh && \\\n    curl -f -L https://istio.io/downloadIstio | ISTIO_VERSION=${SX_ISTIO_VERSION} TARGET_ARCH=x86_64 sh - && \\\n    mv istio-${SX_ISTIO_VERSION}/bin/istioctl /usr/local/bin/istioctl && \\\n    rm -rf istio-${SX_ISTIO_VERSION} && \\\n    curl -f -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v${SX_ARGOCD_VERSION}/argocd-linux-amd64 && \\\n    chmod +x /usr/local/bin/argocd && \\\n    cd -\n\nUSER 1001\n\nCMD [ \"/bin/sx\" , \"usage\" ]\n"
}