{
  "startTime": 1674220509594,
  "endTime": 1674220511172,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# build command:\n#\n#   docker build . -f docker/Dockerfile.ubuntu -t registry-vpc.cn-hongkong.aliyuncs.com/libvineyard/vineyardd:ubuntu\n\nWORKDIR /workspace\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN export DEBIAN_FRONTEND=\"noninteractive\" && \\\n    apt-get update -y && \\\n    apt-get install --no-install-recommends -y \\\n        automake \\\n        autoconf \\\n        ca-certificates \\\n        cmake \\\n        gcc \\\n        g++ \\\n        git \\\n        libboost-atomic-dev \\\n        libboost-chrono-dev \\\n        libboost-filesystem-dev \\\n        libboost-locale-dev \\\n        libboost-random-dev \\\n        libboost-regex-dev \\\n        libboost-system-dev \\\n        libboost-thread-dev \\\n        libcurl4-openssl-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libgrpc-dev \\\n        libgrpc++-dev \\\n        libprotobuf-dev \\\n        libpython3-dev \\\n        libssl-dev \\\n        libtinfo5 \\\n        libunwind-dev \\\n        libz-dev \\\n        lsb-release \\\n        protobuf-compiler-grpc \\\n        python3-pip \\\n        unzip \\\n        wget && \\\n    cd /tmp && \\\n    wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \\\n    apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \\\n    apt update && \\\n    apt install --no-install-recommends -y libarrow-dev=1.0.1-1 libarrow-python-dev=1.0.1-1 && \\\n    rm -rf /tmp/apache-arrow-archive-keyring-latest-$(lsb_release --codename --short).deb && \\\n    apt-get clean autoclean && rm -rf /var/lib/apt/lists/*;\n\n# patchelf and auditwheel for wheel packaging\nRUN cd /tmp && \\\n    git clone --depth=1 https://github.com/NixOS/patchelf.git && \\\n    pushd patchelf && \\\n    ./bootstrap.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install -j && \\\n    popd && \\\n    rm -rf patchelf/ && \\\n    pip3 install --no-cache-dir auditwheel && \\\n    sed -i 's/p.error/logger.warning/g' /usr/local/lib/python3.8/dist-packages/auditwheel/main_repair.py\n\n# install kubectl\nRUN cd /tmp && \\\n    wget https://dl.k8s.io/release/v1.19.0/bin/linux/amd64/kubectl && \\\n    chmod +x kubectl && \\\n    mv kubectl /usr/bin/kubectl\n\n# install wait-for-it\nRUN cd /tmp && \\\n    wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh && \\\n    chmod +x wait-for-it.sh && \\\n    mv wait-for-it.sh /usr/bin/wait-for-it.sh\n\nCOPY thirdparty/ thirdparty/\n\n# install cpprestsdk and etcd-cpp-apiv3\nRUN pushd thirdparty/cpprestsdk && \\\n    mkdir build && \\\n    pushd build && \\\n    cmake .. \\\n        -DBUILD_TESTS=OFF \\\n        -DBUILD_SAMPLES=OFF \\\n        -DCPPREST_EXCLUDE_WEBSOCKETS=ON && \\\n    make install -j`nproc` && \\\n    popd && \\\n    rm -rf build && \\\n    popd && \\\n    pushd thirdparty/etcd-cpp-apiv3 && \\\n    mkdir build && \\\n    pushd build && \\\n    cmake .. \\\n        -DBUILD_ETCD_TESTS=OFF && \\\n    make install -j`nproc` && \\\n    popd && \\\n    rm -rf build && \\\n    popd\n\n# copy to workspace\nCOPY cmake/ cmake/\nCOPY README.rst README.rst\nCOPY setup.cfg.in setup.cfg.in\nCOPY setup.py setup.py\nCOPY vineyard-config-version.in.cmake vineyard-config-version.in.cmake\nCOPY vineyard-config.in.cmake vineyard-config.in.cmake\n\nCOPY CMakeLists.txt CMakeLists.txt\nCOPY modules/ modules/\nCOPY python/ python/\nCOPY src/ src/\n\n# build & install\nRUN mkdir build && \\\n    cd build && \\\n    cmake .. \\\n        -DCMAKE_BUILD_TYPE=Debug \\\n        -DUSE_EXTERNAL_ETCD_LIBS=ON \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DBUILD_VINEYARD_COVERAGE=OFF \\\n        -DBUILD_VINEYARD_PYTHON_BINDINGS=ON \\\n        -DBUILD_VINEYARD_SERVER=ON \\\n        -DBUILD_VINEYARD_CLIENT=ON \\\n        -DBUILD_VINEYARD_PYTHON_BINDINGS=OFF \\\n        -DBUILD_VINEYARD_PYPI_PACKAGES=ON \\\n        -DBUILD_VINEYARD_BASIC=OFF \\\n        -DBUILD_VINEYARD_GRAPH=OFF \\\n        -DBUILD_VINEYARD_IO=OFF \\\n        -DBUILD_VINEYARD_MIGRATION=ON \\\n        -DBUILD_VINEYARD_TESTS=OFF \\\n        -DBUILD_VINEYARD_TESTS_ALL=OFF \\\n        -DBUILD_VINEYARD_PROFILING=OFF && \\\n    make -j`nproc` && \\\n    make vineyard_client_python -j`nproc` && \\\n    make install && \\\n    cd .. && \\\n    python3 setup.py bdist_wheel && \\\n    cd dist && \\\n    auditwheel repair --plat=manylinux2014_x86_64 ./*.whl && \\\n    pip3 install --no-cache-dir wheelhouse/*.whl && \\\n    rm -rf /workspace\n"
}