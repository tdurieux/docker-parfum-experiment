{
  "startTime": 1674218977869,
  "endTime": 1674218979189,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.4-apache\n\n# install the PHP extensions we need\nRUN apt-get update \\\n    && apt-get -y upgrade \\\n\t&& apt-get install -y --no-install-recommends vim libpng-dev libjpeg-dev mariadb-client unzip git libcurl4-openssl-dev libmcrypt-dev \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& docker-php-ext-configure gd --with-jpeg \\\n\t&& docker-php-ext-install gd mysqli opcache \\\n\t&& a2enmod rewrite expires\n\nRUN pecl install mcrypt-1.0.4\n\n# install phpredis extension\n# From http://stackoverflow.com/questions/31369867/how-to-install-php-redis-extension-using-the-official-php-docker-image-approach\nRUN pecl install -o -f redis \\\n\t&&  rm -rf /tmp/pear \\\n\t&&  echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini\n\n# set recommended PHP.ini settings\n# see https://secure.php.net/manual/en/opcache.installation.php\nRUN { \\\n\t\techo 'opcache.memory_consumption=128'; \\\n\t\techo 'opcache.interned_strings_buffer=8'; \\\n\t\techo 'opcache.max_accelerated_files=4000'; \\\n\t\techo 'opcache.revalidate_freq=60'; \\\n\t\techo 'opcache.fast_shutdown=1'; \\\n\t\techo 'opcache.enable_cli=1'; \\\n\t} > /usr/local/etc/php/conf.d/opcache-recommended.ini\n\nCOPY etc/apache-vhost.conf /etc/apache2/sites-enabled/000-default.conf\nCOPY etc/php.ini /usr/local/etc/php/php.ini\n\nRUN mkdir -p /app\nCOPY composer.json /app/\nWORKDIR /app\n\nRUN curl -f -k -o /tmp/composer.phar https://getcomposer.org/download/1.3.0/composer.phar \\\n  && mv /tmp/composer.phar /usr/local/bin/composer && chmod a+x /usr/local/bin/composer\nRUN php -dmemory_limit=128M /usr/local/bin/composer install\n\n#RUN curl -o /tmp/markdown.zip https://littoral.michelf.ca/code/php-markdown/php-markdown-extra-1.2.8.zip \\\n#  \t&& unzip /tmp/markdown.zip -d  /app/wordpress/wp-content/plugins \\\n#  \t&& mv  /app/wordpress/wp-content/plugins/PHP\\ Markdown\\ Extra\\ 1.2.8/markdown.php  /app/wordpress/wp-content/plugins/ \\\n#  \t&& rm -rf  /app/wordpress/wp-content/plugins/PHP\\ Markdown\\ Extra\\ 1.2.8/ \\\n# && rm -rf /tmp/markdown.zip\n\nRUN curl -f -o /tmp/wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nRUN cd /tmp && chmod +x wp-cli.phar \\\n  && mv wp-cli.phar /usr/local/bin/wp \\\n  && php -dmemory_limit=128M /usr/local/bin/wp package install wp-media/wp-rocket-cli:trunk --allow-root\n\n# COPY etc/.htaccess_extra .htaccess_extra\n# RUN cat .htaccess_extra >> .htaccess && rm .htaccess_extra && cat .htaccess\n# RUN cat /entrypoint.sh\n\nWORKDIR /app/wordpress\n\n#### --- Configure entrypoint ---\nCOPY bin/entrypoint.sh /entrypoint.sh\nCOPY bin /app/bin/\nCOPY updates /app/updates/\nCOPY www/ /app/wordpress\n\nRUN chmod -R +x /app/bin\nRUN chmod 755 /app/wordpress/wp-content\n\nRUN mkdir /app/wordpress/wp-content/uploads\n# RUN mkdir /app/wordpress/wp-content/cache\n\nRUN chmod 777 /app/wordpress/wp-content/uploads\nRUN chmod 777 /app/wordpress/wp-content/cache\n\nRUN chmod -R a+rX /app/wordpress\nRUN chown -R www-data:www-data /app/wordpress\n\n# VOLUME /app/wordpress/wp-content/cache\nEXPOSE 80\n\n# grr, ENTRYPOINT resets CMD now\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"apache2-foreground\"]\n#CMD apache2 -D FOREGROUND"
}