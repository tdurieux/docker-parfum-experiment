{
  "startTime": 1674214916471,
  "endTime": 1674214917439,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM hypriot/rpi-ruby:2.2.2\nMAINTAINER martinc@ucar.edu\n\n# Install apt based dependencies required to run Rails as\n# well as RubyGems. As the Ruby image itself is based on a\n# Debian image, we use apt-get to install those.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  build-essential \\\n  nodejs \\\n  mysql-client \\\n  dos2unix \\\n  git \\\n  ntp \\\n  mysql-client \\\n  libmysqlclient-dev \\\n  libcurl4-openssl-dev \\\n  nginx && rm -rf /var/lib/apt/lists/*;\n\n# Configure the main working directory. This is the base\n# directory used in any further RUN, COPY, and ENTRYPOINT\n# commands.\nRUN mkdir -p /chords\nWORKDIR /chords\n\n# Copy the Gemfile as well as the Gemfile.lock and install\n# the RubyGems. This is a separate step so the dependencies\n# will be cached unless changes to one of those two files\n# are made.\nCOPY Gemfile Gemfile.lock ./\nRUN gem install bundler && bundle install --jobs 4 --retry 5\n\n# Copy the main application.\nCOPY . ./\n\n# Bake the assets (for production mode) into the image\nRUN mkdir -p /chords/log && RAILS_ENV=production SECRET_KEY_BASE=`bundle exec rake secret` bundle exec rake assets:precompile\n\n# Customize the nginx configuration\nCOPY ./nginx_default.conf /etc/nginx/sites-available/default\n\n# Create the CHORDS environment value setting script chords_env.sh.\n# Use this bit of magic to invalidate the cache so that the command is run.\nADD http://www.random.org/strings/?num=10&len=8&digits=on&upperalpha=on&loweralpha=on&unique=on&format=plain&rnd=new cache_invalidator\nRUN /bin/bash -f create_chords_env_script.sh > chords_env.sh && chmod a+x chords_env.sh\n\n# Remove artifacts that are not needed. The docker image will only shrink\n# however if the docker build command is run with the --squash option\nRUN rm -rf .git log/* tmp/*\n\n# Expose port 80 to the Docker host, so we can access it\n# from the outside.\nEXPOSE 80\n\n# Configure an entry point, so we don't need to specify\n# \"bundle exec\" for each of our commands.\nENTRYPOINT [\"bundle\", \"exec\"]\n\n# Start CHORDS\nCMD [\"/bin/bash\", \"-f\", \"chords_start.sh\"]\n"
}