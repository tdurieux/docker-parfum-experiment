{
  "startTime": 1674249261840,
  "endTime": 1674249262854,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 2,
        "columnEnd": 20
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 68,
        "columnStart": 2,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM library/ubuntu:16.04\nMAINTAINER Chris Harris <chris.harris@kitware.com>\n\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n  git \\\n  wget \\\n  cmake \\\n  python \\\n  python-pip \\\n  python3 \\\n  python3-pip \\\n  python3-dev \\\n  g++ \\\n  libtbb-dev \\\n  libgl1-mesa-dev \\\n  libglu1-mesa-dev \\\n  libxt-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir -U pip && \\\n  pip3 install --no-cache-dir numpy\n\n# Build and install ninja.\nARG NINJA_VERSION=v1.7.2\nRUN git clone -b $NINJA_VERSION https://github.com/martine/ninja.git && \\\n  cd ninja && \\\n  ./configure.py --bootstrap && \\\n  mv ninja /usr/bin/ && \\\n  cd .. && \\\n  rm -rf ninja\n\n# Build and install googletest\nARG GTEST_VERSION=release-1.8.0\nRUN git clone -b $GTEST_VERSION https://github.com/google/googletest.git && \\\n  mkdir googletest-build && \\\n  cd googletest-build && \\\n  cmake -DCMAKE_INSTALL_PREFIX:PATH=/opt/googletest ../googletest && \\\n  cmake --build . --target install && \\\n  rm -rf googletest\n\n# Build and install Qt\nARG QT_VERSION=5.8.0\nARG QT_BASE_DOWNLOAD_URL=http://download.qt.io/official_releases/qt/5.8/5.8.0/single/\nENV QT_DIR qt-everywhere-opensource-src-$QT_VERSION\nENV QT_TARBALL $QT_DIR.tar.gz\nENV QT_DOWNLOAD_URL $QT_BASE_DOWNLOAD_URL/$QT_TARBALL\nRUN wget $QT_DOWNLOAD_URL && \\\n  md5=$(md5sum ./$QT_TARBALL | awk '{ print $1 }') && \\\n  [ $md5 = \"a9f2494f75f966e2f22358ec367d8f41\" ] && \\\n  tar -xzvf $QT_TARBALL && \\\n  rm $QT_TARBALL && \\\n  cd $QT_DIR && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -opensource \\\n    -release \\\n    -confirm-license \\\n    -nomake examples \\\n    -skip qtconnectivity \\\n    -skip qtlocation \\\n    -skip qtmultimedia \\\n    -skip qtsensors \\\n    -skip qtserialport \\\n    -skip qtsvg \\\n    -skip qtwayland \\\n    -skip qtwebchannel \\\n    -skip qtwebengine \\\n    -skip qtwebsockets \\\n    -no-dbus \\\n    -no-openssl \\\n    -qt-libjpeg \\\n    -qt-pcre && \\\n  make -j$(grep -c processor /proc/cpuinfo) && \\\n  make install && \\\n  cd .. && \\\n  rm -rf $QT_DIR\n\n# Build and install ITK\nARG ITK_VERSION=v5.0.0\nRUN git clone -b $ITK_VERSION git://itk.org/ITK.git && \\\n  mkdir itk-build && \\\n  cd itk-build && \\\n  cmake -G Ninja -DCMAKE_BUILD_TYPE:STRING=Release \\\n    -DITK_LEGACY_REMOVE:BOOL=ON \\\n    -DITK_LEGACY_SILENT:BOOL=ON \\\n    -DModule_ITKBridgeNumPy:BOOL=ON \\\n    -DBUILD_TESTING:BOOL=OFF \\\n    -DITK_WRAP_unsigned_short:BOOL=ON \\\n    -DITK_BUILD_DEFAULT_MODULES:BOOL=OFF \\\n    -DITKGroup_Core:BOOL=ON \\\n    -DITKGroup_Filtering:BOOL=ON \\\n    -DITKGroup_Segmentation:BOOL=ON \\\n    -DITKGroup_Registration:BOOL=ON \\\n    -DITKGroup_Nonunit:BOOL=ON \\\n    -DITK_WRAP_PYTHON:BOOL=ON \\\n    -DBUILD_EXAMPLES:BOOL=OFF \\\n    -DBUILD_SHARED_LIBS:BOOL=ON \\\n    -DCMAKE_INSTALL_PREFIX:PATH=/opt/itk \\\n    -DPYTHON_EXECUTABLE:PATH=/usr/bin/python3 \\\n    ../ITK && \\\n  cmake --build . --target install && \\\n  cd .. && \\\n  rm -rf ITK && \\\n  rm -rf itk-build\n\n# Build and install ParaView\nARG PARAVIEW_VERSION=f700a4d7f32ccb7e31f1da6e6fd1c6188dac2feb\nRUN git clone --recursive git://github.com/kitware/paraview.git && \\\n  cd paraview && \\\n  git checkout $PARAVIEW_VERSION && \\\n  git submodule update && \\\n  cd .. && \\\n  mkdir paraview-build && \\\n  cd paraview-build && \\\n  cmake -G Ninja -DCMAKE_BUILD_TYPE:STRING=Release \\\n    -DBUILD_TESTING:BOOL=OFF \\\n    -DPARAVIEW_ENABLE_PYTHON:BOOL=ON \\\n    -DPARAVIEW_QT_VERSION:STRING=5 \\\n    -DPARAVIEW_ENABLE_WEB:BOOL=OFF \\\n    -DPARAVIEW_ENABLE_EMBEDDED_DOCUMENTATION:BOOL=OFF\\\n    -DPARAVIEW_USE_QTHELP:BOOL=OFF \\\n    -DVTK_RENDERING_BACKEND:STRING=OpenGL2 \\\n    -DVTK_SMP_IMPLEMENTATION_TYPE:STRING=TBB \\\n    -DVTK_PYTHON_FULL_THREADSAFE:BOOL=ON \\\n    -DVTK_NO_PYTHON_THREADS:BOOL=OFF \\\n    -DQt5_DIR:PATH=/usr/local/Qt-5.8.0/lib/cmake/Qt5 \\\n    -DVTK_PYTHON_VERSION:STRING=3 \\\n    ../paraview && \\\n  cmake --build . && \\\n  cd .. && \\\n  rm -rf paraview/.git && \\\n  find paraview-build -name '*.o' -delete && \\\n  find paraview-build -name '*.cxx' -delete\n\n# Provide paths to downstream builds\nONBUILD ENV QT5_DIR /usr/local/Qt-5.8.0/lib/cmake/Qt5\nONBUILD ENV PARAVIEW_DIR /paraview-build\nONBUILD ENV ITK_DIR /opt/itk/lib/cmake/ITK-5.0\nONBUILD ENV GTEST_LIBRARY /opt/googletest/lib/libgtest.a\nONBUILD ENV GTEST_MAIN_LIBRARY /opt/googletest/lib/libgtest_main.a\nONBUILD ENV GTEST_INCLUDE_DIR /opt/googletest/include\n\nARG BUILD_DATE\nARG IMAGE=tomviz-dependencies\nARG VCS_REF\nARG VCS_URL\nLABEL org.label-schema.build-date=BUILD_DATE \\\n      org.label-schema.name=$IMAGE \\\n      org.label-schema.description=\"Base image containing tomviz dependencies\" \\\n      org.label-schema.url=\"https://github.com/OpenChemistry/tomviz\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.schema-version=\"1.0\"\n"
}