{
  "startTime": 1674255375825,
  "endTime": 1674255376676,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 38,
        "columnStart": 16,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 68,
        "columnStart": 16,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Builds a minimal image with the binary only. It is multi-arch capable,\n# cross-building to aarch64 and x86_64. When cross-compiling, Docker sets two\n# implicit BUILDARG: BUILDPLATFORM being the host platform and TARGETPLATFORM\n# being the platform being built.\n#\n# Docker platform definitions look like this: linux/arm64 and linux/amd64, so\n# there is a small script that translates those platforms to LLVM triples,\n# respectively x86-64-unknown-linux-gnu and aarch64-unknown-linux-gnu\n\n# The Debian version and version name must be in sync\nARG DEBIAN_VERSION=11\nARG DEBIAN_VERSION_NAME=bullseye\nARG RUSTC_VERSION=1.61.0\nARG NODEJS_VERSION=16\nARG OPA_VERSION=0.40.0\n\n## Build stage that builds the static files/frontend ##\nFROM --platform=${BUILDPLATFORM} docker.io/library/node:${NODEJS_VERSION}-${DEBIAN_VERSION_NAME}-slim AS static-files\n\nWORKDIR /app/crates/static-files\nCOPY ./crates/static-files/package.json ./crates/static-files/package-lock.json /app/crates/static-files/\nRUN npm ci\nCOPY . /app/\nRUN npm run build\n# Change the timestamp of built files for better caching\nRUN find public -type f -exec touch -t 197001010000.00 {} +\n\n## Build stage that builds the OPA policies ##\nFROM --platform=${BUILDPLATFORM} docker.io/library/debian:${DEBIAN_VERSION_NAME}-slim AS policy\n\n# Install make\nRUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\nRUN \\\n  --mount=type=cache,sharing=locked,target=/var/cache/apt \\\n  --mount=type=cache,sharing=locked,target=/var/lib/apt \\\n  apt update && apt install -y --no-install-recommends \\\n  make && rm -rf /var/lib/apt/lists/*;\n\nARG BUILDOS\nARG BUILDARCH\nARG OPA_VERSION\n\n# Download Open Policy Agent\nADD --chmod=755 https://github.com/open-policy-agent/opa/releases/download/v${OPA_VERSION}/opa_${BUILDOS}_${BUILDARCH}_static /usr/local/bin/opa\n\nWORKDIR /app/crates/policy/policies\nCOPY ./crates/policy/policies/ /app/crates/policy/policies\nRUN make -B\n\n# Change the timestamp of built files for better caching\nRUN touch -t 197001010000.00 {} policy.wasm\n\n## Base image with cargo-chef and the right cross-compilation toolchain ##\n# cargo-chef helps with caching dependencies between builds\n# The image Debian base name (bullseye) must be in sync with the runtime variant (debian11)\nFROM --platform=${BUILDPLATFORM} docker.io/library/rust:${RUSTC_VERSION}-slim-${DEBIAN_VERSION_NAME} AS chef\n\n# Install x86_64 and aarch64 cross-compiling stack\nRUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\nRUN \\\n  --mount=type=cache,sharing=locked,target=/var/cache/apt \\\n  --mount=type=cache,sharing=locked,target=/var/lib/apt \\\n  apt update && apt install -y --no-install-recommends \\\n  g++-aarch64-linux-gnu \\\n  g++-x86-64-linux-gnu \\\n  libc6-dev-arm64-cross \\\n  libc6-dev-amd64-cross && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /app\nRUN \\\n  --mount=type=cache,sharing=private,target=/usr/local/cargo/registry \\\n  cargo install --locked cargo-chef\n\nENV \\\n  CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc \\\n  CC_x86_64_unknown_linux_gnu=x86_64-linux-gnu-gcc \\\n  CXX_x86_64_unknown_linux_gnu=x86_64-linux-gnu-g++ \\\n  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc \\\n  CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc \\\n  CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++\n\nARG RUSTC_VERSION\n\n# Install all cross-compilation targets\nRUN rustup target add --toolchain \"${RUSTC_VERSION}\" \\\n  x86_64-unknown-linux-gnu \\\n  aarch64-unknown-linux-gnu\n\n# Helper script that transforms docker platforms to LLVM triples\nCOPY ./misc/docker-arch-to-rust-target.sh /\n\n## Run the planner from cargo-chef ##\nFROM --platform=${BUILDPLATFORM} chef AS planner\nCOPY ./Cargo.toml ./Cargo.lock /app/\nCOPY ./crates /app/crates\nRUN \\\n  --mount=type=cache,sharing=private,target=/usr/local/cargo/registry \\\n  cargo chef prepare --recipe-path recipe.json\n\n## Actual build stage ##\nFROM --platform=${BUILDPLATFORM} chef AS builder\n\nARG TARGETPLATFORM\n\n# Build dependencies\nCOPY --from=planner /app/recipe.json recipe.json\nRUN \\\n  --mount=type=cache,sharing=private,target=/usr/local/cargo/registry \\\n  cargo chef cook \\\n  --release \\\n  --recipe-path recipe.json \\\n  --target $(/docker-arch-to-rust-target.sh \"${TARGETPLATFORM}\") \\\n  --package mas-cli\n\n# Build the rest\nCOPY ./Cargo.toml ./Cargo.lock /app/\nCOPY ./crates /app/crates\nCOPY --from=static-files /app/crates/static-files/public /app/crates/static-files/public\nCOPY --from=policy /app/crates/policy/policies/policy.wasm /app/crates/policy/policies/policy.wasm\nENV SQLX_OFFLINE=true\nRUN \\\n  --mount=type=cache,sharing=private,target=/usr/local/cargo/registry \\\n  cargo build \\\n  --release \\\n  --bin mas-cli \\\n  --target $(/docker-arch-to-rust-target.sh \"${TARGETPLATFORM}\")\n\n# Move the binary to avoid having to guess its name in the next stage\nRUN mv target/$(/docker-arch-to-rust-target.sh \"${TARGETPLATFORM}\")/release/mas-cli /usr/local/bin/mas-cli\n\n## Runtime stage, debug variant ##\nFROM --platform=${TARGETPLATFORM} gcr.io/distroless/cc-debian${DEBIAN_VERSION}:debug-nonroot AS debug\nCOPY --from=builder /usr/local/bin/mas-cli /usr/local/bin/mas-cli\nWORKDIR /\nENTRYPOINT [\"/mas-cli\"]\n\n## Runtime stage ##\nFROM --platform=${TARGETPLATFORM} gcr.io/distroless/cc-debian${DEBIAN_VERSION}:nonroot\nCOPY --from=builder /usr/local/bin/mas-cli /usr/local/bin/mas-cli\nWORKDIR /\nENTRYPOINT [\"/usr/local/bin/mas-cli\"]\n"
}