{
  "startTime": 1674255024659,
  "endTime": 1674255025604,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 2,
        "columnEnd": 134
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 2,
        "columnEnd": 98
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 23,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 93,
        "columnStart": 23,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 127,
        "lineEnd": 136,
        "columnStart": 24,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build the matrixdotorg/synapse docker images.\n#\n# Note that it uses features which are only available in BuildKit - see\n# https://docs.docker.com/go/buildkit/ for more information.\n#\n# To build the image, run `docker build` command from the root of the\n# synapse repository:\n#\n#    DOCKER_BUILDKIT=1 docker build -f docker/Dockerfile .\n#\n# There is an optional PYTHON_VERSION build argument which sets the\n# version of python to build against: for example:\n#\n#    DOCKER_BUILDKIT=1 docker build -f docker/Dockerfile --build-arg PYTHON_VERSION=3.10 .\n#\n\n# Irritatingly, there is no blessed guide on how to distribute an application with its\n# poetry-managed environment in a docker image. We have opted for\n# `poetry export | pip install -r /dev/stdin`, but there are known bugs in\n# in `poetry export` whose fixes (scheduled for poetry 1.2) have yet to be released.\n# In case we get bitten by those bugs in the future, the recommendations here might\n# be useful:\n#     https://github.com/python-poetry/poetry/discussions/1879#discussioncomment-216865\n#     https://stackoverflow.com/questions/53835198/integrating-python-poetry-with-docker?answertab=scoredesc\n\n\n\nARG PYTHON_VERSION=3.9\n\n###\n### Stage 0: generate requirements.txt\n###\nFROM docker.io/python:${PYTHON_VERSION}-slim as requirements\n\n# RUN --mount is specific to buildkit and is documented at\n# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md#build-mounts-run---mount.\n# Here we use it to set up a cache for apt (and below for pip), to improve\n# rebuild speeds on slow connections.\nRUN \\\n   --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n   --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n apt-get update -qq && apt-get install --no-install-recommends -yqq git \\\n    && rm -rf /var/lib/apt/lists/*\n\n# We install poetry in its own build stage to avoid its dependencies conflicting with\n# synapse's dependencies.\n# We use a specific commit from poetry's master branch instead of our usual 1.1.12,\n# to incorporate fixes to some bugs in `poetry export`. This commit corresponds to\n#    https://github.com/python-poetry/poetry/pull/5156 and\n#    https://github.com/python-poetry/poetry/issues/5141 ;\n# without it, we generate a requirements.txt with incorrect environment markers,\n# which causes necessary packages to be omitted when we `pip install`.\n#\n# NB: In poetry 1.2 `poetry export` will be moved into a plugin; we'll need to also\n# pip install poetry-plugin-export (https://github.com/python-poetry/poetry-plugin-export).\nRUN --mount=type=cache,target=/root/.cache/pip \\\n  pip install --no-cache-dir --user \"poetry-core==1.1.0a7\" \"git+https://github.com/python-poetry/poetry.git@fb13b3a676f476177f7937ffa480ee5cff9a90a5\"\n\nWORKDIR /synapse\n\n# Copy just what we need to run `poetry export`...\nCOPY pyproject.toml poetry.lock /synapse/\n\n\n# If specified, we won't verify the hashes of dependencies.\n# This is only needed if the hashes of dependencies cannot be checked for some\n# reason, such as when a git repository is used directly as a dependency.\nARG TEST_ONLY_SKIP_DEP_HASH_VERIFICATION\n\nRUN /root/.local/bin/poetry export --extras all -o /synapse/requirements.txt ${TEST_ONLY_SKIP_DEP_HASH_VERIFICATION:+--without-hashes}\n\n###\n### Stage 1: builder\n###\nFROM docker.io/python:${PYTHON_VERSION}-slim as builder\n\n# install the OS build deps\nRUN \\\n   --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n   --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n apt-get update -qq && apt-get install --no-install-recommends -yqq \\\n    build-essential \\\n    libffi-dev \\\n    libjpeg-dev \\\n    libpq-dev \\\n    libssl-dev \\\n    libwebp-dev \\\n    libxml++2.6-dev \\\n    libxslt1-dev \\\n    openssl \\\n    rustc \\\n    zlib1g-dev \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n\n# To speed up rebuilds, install all of the dependencies before we copy over\n# the whole synapse project, so that this layer in the Docker cache can be\n# used while you develop on the source\n#\n# This is aiming at installing the `[tool.poetry.depdendencies]` from pyproject.toml.\nCOPY --from=requirements /synapse/requirements.txt /synapse/\nRUN --mount=type=cache,target=/root/.cache/pip \\\n  pip install --no-cache-dir --prefix=\"/install\" --no-deps --no-warn-script-location -r /synapse/requirements.txt\n\n# Copy over the rest of the synapse source code.\nCOPY synapse /synapse/synapse/\n# ... and what we need to `pip install`.\nCOPY pyproject.toml README.rst /synapse/\n\n# Install the synapse package itself.\nRUN pip install --no-cache-dir --prefix=\"/install\" --no-deps --no-warn-script-location /synapse\n\n###\n### Stage 2: runtime\n###\n\nFROM docker.io/python:${PYTHON_VERSION}-slim\n\nLABEL org.opencontainers.image.url='https://matrix.org/docs/projects/server/synapse'\nLABEL org.opencontainers.image.documentation='https://github.com/matrix-org/synapse/blob/master/docker/README.md'\nLABEL org.opencontainers.image.source='https://github.com/matrix-org/synapse.git'\nLABEL org.opencontainers.image.licenses='Apache-2.0'\n\nRUN \\\n   --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n   --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n  apt-get update -qq && apt-get install --no-install-recommends -yqq \\\n    curl \\\n    gosu \\\n    libjpeg62-turbo \\\n    libpq5 \\\n    libwebp6 \\\n    xmlsec1 \\\n    libjemalloc2 \\\n    libssl-dev \\\n    openssl \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /install /usr/local\nCOPY ./docker/start.py /start.py\nCOPY ./docker/conf /conf\n\nEXPOSE 8008/tcp 8009/tcp 8448/tcp\n\nENTRYPOINT [\"/start.py\"]\n\nHEALTHCHECK --start-period=5s --interval=15s --timeout=5s \\\n    CMD curl -fSs http://localhost:8008/health || exit 1\n"
}