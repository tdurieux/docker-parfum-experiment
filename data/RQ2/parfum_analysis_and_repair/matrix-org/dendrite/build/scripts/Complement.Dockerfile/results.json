{
  "startTime": 1674253355131,
  "endTime": 1674253355976,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 1,
        "lineEnd": 1,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 1,
        "lineEnd": 1,
        "columnStart": 22,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.18-stretch as build\nRUN apt-get update && apt-get install --no-install-recommends -y sqlite3 && rm -rf /var/lib/apt/lists/*;\nWORKDIR /build\n\n# we will dump the binaries and config file to this location to ensure any local untracked files\n# that come from the COPY . . file don't contaminate the build\nRUN mkdir /dendrite\n\n# Utilise Docker caching when downloading dependencies, this stops us needlessly\n# downloading dependencies every time.\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\n\nCOPY . .\nRUN go build -o /dendrite ./cmd/dendrite-monolith-server\nRUN go build -o /dendrite ./cmd/generate-keys\nRUN go build -o /dendrite ./cmd/generate-config\n\nWORKDIR /dendrite\nRUN ./generate-keys --private-key matrix_key.pem\n\nENV SERVER_NAME=localhost\nENV API=0\nEXPOSE 8008 8448\n\n# At runtime, generate TLS cert based on the CA now mounted at /ca\n# At runtime, replace the SERVER_NAME with what we are told\nCMD ./generate-keys --server $SERVER_NAME --tls-cert server.crt --tls-key server.key --tls-authority-cert /complement/ca/ca.crt --tls-authority-key /complement/ca/ca.key && \\\n    ./generate-config -server $SERVER_NAME --ci > dendrite.yaml && \\\n    cp /complement/ca/ca.crt /usr/local/share/ca-certificates/ && update-ca-certificates && \\\n    ./dendrite-monolith-server --really-enable-open-registration --tls-cert server.crt --tls-key server.key --config dendrite.yaml -api=${API:-0}\n"
}