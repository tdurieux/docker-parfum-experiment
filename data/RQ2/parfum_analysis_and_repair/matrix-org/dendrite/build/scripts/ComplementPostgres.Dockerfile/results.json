{
  "startTime": 1674246606887,
  "endTime": 1674246608089,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 1,
        "lineEnd": 1,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 1,
        "lineEnd": 1,
        "columnStart": 22,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.18-stretch as build\nRUN apt-get update && apt-get install --no-install-recommends -y postgresql && rm -rf /var/lib/apt/lists/*;\nWORKDIR /build\n\n# No password when connecting over localhost\nRUN sed -i \"s%127.0.0.1/32            md5%127.0.0.1/32            trust%g\" /etc/postgresql/9.6/main/pg_hba.conf && \\\n    # Bump up max conns for moar concurrency\n    sed -i 's/max_connections = 100/max_connections = 2000/g' /etc/postgresql/9.6/main/postgresql.conf\n\n# This entry script starts postgres, waits for it to be up then starts dendrite\nRUN echo '\\\n    #!/bin/bash -eu \\n\\\n    pg_lsclusters \\n\\\n    pg_ctlcluster 9.6 main start \\n\\\n    \\n\\\n    until pg_isready \\n\\\n    do \\n\\\n    echo \"Waiting for postgres\"; \\n\\\n    sleep 1; \\n\\\n    done \\n\\\n    ' > run_postgres.sh && chmod +x run_postgres.sh\n\n# we will dump the binaries and config file to this location to ensure any local untracked files\n# that come from the COPY . . file don't contaminate the build\nRUN mkdir /dendrite\n\n# Utilise Docker caching when downloading dependencies, this stops us needlessly\n# downloading dependencies every time.\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\n\nCOPY . .\nRUN go build -o /dendrite ./cmd/dendrite-monolith-server\nRUN go build -o /dendrite ./cmd/generate-keys\nRUN go build -o /dendrite ./cmd/generate-config\n\nWORKDIR /dendrite\nRUN ./generate-keys --private-key matrix_key.pem\n\nENV SERVER_NAME=localhost\nENV API=0\nEXPOSE 8008 8448\n\n\n# At runtime, generate TLS cert based on the CA now mounted at /ca\n# At runtime, replace the SERVER_NAME with what we are told\nCMD /build/run_postgres.sh && ./generate-keys --server $SERVER_NAME --tls-cert server.crt --tls-key server.key --tls-authority-cert /complement/ca/ca.crt --tls-authority-key /complement/ca/ca.key && \\\n    ./generate-config -server $SERVER_NAME --ci > dendrite.yaml && \\\n    # Replace the connection string with a single postgres DB, using user/db = 'postgres' and no password, bump max_conns\n    sed -i \"s%connection_string:.*$%connection_string: postgresql://postgres@localhost/postgres?sslmode=disable%g\" dendrite.yaml && \\\n    sed -i 's/max_open_conns:.*$/max_open_conns: 100/g' dendrite.yaml && \\\n    cp /complement/ca/ca.crt /usr/local/share/ca-certificates/ && update-ca-certificates && \\\n    ./dendrite-monolith-server --really-enable-open-registration --tls-cert server.crt --tls-key server.key --config dendrite.yaml -api=${API:-0}"
}