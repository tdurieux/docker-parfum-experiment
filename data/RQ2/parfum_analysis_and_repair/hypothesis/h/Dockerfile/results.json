{
  "startTime": 1674250149180,
  "endTime": 1674250149894,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Stage 1: Build static frontend assets.\nFROM node:18-alpine as build\n\nENV NODE_ENV production\n\n# Install dependencies.\nWORKDIR /tmp/frontend-build\nCOPY package.json yarn.lock ./\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\n# Build h js/css.\nCOPY .babelrc gulpfile.mjs rollup.config.mjs ./\nCOPY h/static ./h/static\nRUN yarn build\n\n# Stage 2: Build the rest of the app using the build output from Stage 1.\nFROM python:3.8.12-alpine3.13\nLABEL maintainer=\"Hypothes.is Project and contributors\"\n\n# Install system build and runtime dependencies.\nRUN apk add --no-cache \\\n    libffi \\\n    libpq \\\n    nginx \\\n    git\n\n# Create the hypothesis user, group, home directory and package directory.\nRUN addgroup -S hypothesis && adduser -S -G hypothesis -h /var/lib/hypothesis hypothesis\nWORKDIR /var/lib/hypothesis\n\n# Ensure nginx state and log directories writeable by unprivileged user.\nRUN chown -R hypothesis:hypothesis /var/log/nginx /var/lib/nginx\n\n# Copy nginx config\nCOPY conf/nginx.conf /etc/nginx/nginx.conf\n\n# Copy minimal data to allow installation of dependencies.\nCOPY requirements/requirements.txt ./\n\n# Install build deps, build, and then clean up.\nRUN apk add --no-cache --virtual build-deps \\\n    build-base \\\n    libffi-dev \\\n    postgresql-dev \\\n  && pip install --no-cache-dir -U pip \\\n  && pip install --no-cache-dir -r requirements.txt \\\n  && apk del build-deps\n\n# Copy frontend assets.\nCOPY --from=build /tmp/frontend-build/build build\n\n# Copy the rest of the application files.\nCOPY . .\n\n# If we're building from a git clone, ensure that .git is writeable\nRUN [ -d .git ] && chown -R hypothesis:hypothesis .git || :\n\n# Expose the default port.\nEXPOSE 5000\n\n# Set the application environment\nENV PATH /var/lib/hypothesis/bin:$PATH\nENV PYTHONIOENCODING utf_8\nENV PYTHONPATH /var/lib/hypothesis:$PYTHONPATH\n\n# Start the web server by default\nUSER hypothesis\nCMD [\"init-env\", \"supervisord\", \"-c\" , \"conf/supervisord.conf\"]\n"
}