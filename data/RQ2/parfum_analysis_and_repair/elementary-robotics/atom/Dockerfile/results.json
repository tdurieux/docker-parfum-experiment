{
  "startTime": 1674249707331,
  "endTime": 1674249709567,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 569,
        "lineEnd": 569,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 570,
        "lineEnd": 570,
        "columnStart": 29,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 417,
        "lineEnd": 417,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 3,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 3,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 209,
        "lineEnd": 209,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 233,
        "lineEnd": 242,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 520,
        "lineEnd": 520,
        "columnStart": 22,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 567,
        "lineEnd": 567,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 568,
        "lineEnd": 568,
        "columnStart": 27,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 570,
        "lineEnd": 570,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 209,
        "lineEnd": 209,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 560,
        "lineEnd": 560,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 567,
        "lineEnd": 567,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 568,
        "lineEnd": 568,
        "columnStart": 27,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 570,
        "lineEnd": 570,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 69,
        "columnStart": 6,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 209,
        "lineEnd": 209,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 233,
        "lineEnd": 242,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 301,
        "lineEnd": 314,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 450,
        "lineEnd": 454,
        "columnStart": 6,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 520,
        "lineEnd": 520,
        "columnStart": 22,
        "columnEnd": 82
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 545,
        "lineEnd": 549,
        "columnStart": 6,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 560,
        "lineEnd": 560,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 567,
        "lineEnd": 567,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 568,
        "lineEnd": 568,
        "columnStart": 27,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 570,
        "lineEnd": 570,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 209,
        "lineEnd": 209,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 560,
        "lineEnd": 560,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 567,
        "lineEnd": 567,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 569,
        "lineEnd": 569,
        "columnStart": 1,
        "columnEnd": 55
      }
    }
  ],
  "repairedDockerfile": "################################################################################\n#\n# Atom: A docker-containerized Microservice SDK built around redis, Python\n#  and C++. Targets built for openCV + CUDA for Intel and ARM-based systems\n#  with the attempt to work identically on both platforms.\n#\n################################################################################\n\n#\n# ALL ARGS TO BE USED IN **ANY** FROM MUST OCCUR BEFORE THE **FIRST** FROM\n# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\n#\nARG STOCK_IMAGE=ubuntu:bionic-20210827\nARG ATOM_BASE=atom-base\nARG DEBIAN_FRONTEND=noninteractive\n\n################################################################################\n#\n# no-deps: Stock image with list of pre-existing libraries\n#\n################################################################################\nFROM $STOCK_IMAGE as no-deps\n\nADD ./utilities/docker/get_existing_libs.sh /tmp/get_existing_libs.sh\nRUN /tmp/get_existing_libs.sh /tmp/existing_libs.txt\n\n################################################################################\n#\n# atom-base: Core atom requirements + libraries. No high-level source code,\n#     but the third-party dependencies and libraries which are unlikely to\n#     change often\n#\n################################################################################\nFROM $STOCK_IMAGE as atom-base\n\n# Which version of Python we should build/install\nARG PYTHON_VERSION=3.8.10\n\n#\n# System-level installs\n#\n\n# Remove nvidia repositories from APT since they are unstable and unneeded\nRUN rm -f /etc/apt/sources.list.d/nvidia-ml.list /etc/apt/sources.list.d/cuda.list\n\nRUN apt-get update \\\n   && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n   apt-utils \\\n   git \\\n   autoconf \\\n   libtool \\\n   cmake \\\n   build-essential \\\n   gfortran \\\n   libgfortran4 \\\n   zlib1g-dev \\\n   libssl-dev \\\n   libbz2-dev \\\n   libffi-dev \\\n   liblzma-dev \\\n   libncursesw5-dev \\\n   libgdbm-dev \\\n   libsqlite3-dev \\\n   libc6-dev \\\n   tk-dev \\\n   wget \\\n   flex \\\n   bison \\\n   curl \\\n   pkg-config && rm -rf /var/lib/apt/lists/*;\n\n# We need to copy libgfortran and all of its dependencies from /usr/lib/gcc/arch-linux-gnu to\n# /usr/local/lib so that they get packaged up with the system install\nRUN cp `dirname \\`find /usr/lib -iname libgfortran.so.4 -not -path /usr/lib/gcc\\``/libgfortran* /usr/local/lib\n\n# Use the copy_lib_requirements.sh to copy all required libs that go with libgfortran*\n#  see utilities/docker/copy_lib_requirements.sh\nCOPY --from=no-deps /tmp/existing_libs.txt /tmp/existing_libs.txt\nADD ./utilities/docker/copy_lib_requirements.sh /tmp/copy_lib_requirements.sh\nRUN /tmp/copy_lib_requirements.sh libgfortran /tmp/existing_libs.txt\n\n# Set up the ability to run things with libraries in /usr/local/lib\nENV LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}\n\n# Install Python PYTHON_VERSION from source and set as the default Python version\nRUN set +x; mkdir /tmp/python && \\\n   cd /tmp/python && \\\n   wget --no-check-certificate https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && \\\n   tar -xzvf Python-${PYTHON_VERSION}.tgz && \\\n   cd Python-${PYTHON_VERSION} && \\\n   ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations --enable-shared && \\\n   make -j8 install && \\\n   ln -sf /usr/local/bin/python3.8 /usr/bin/python3 && \\\n   rm -rf /tmp/python && rm Python-${PYTHON_VERSION}.tgz\n\n# Switch over to the venv\nRUN python3 -m venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# Install setuptools\nRUN pip3 install --no-cache-dir --upgrade pip setuptools\nRUN pip3 install --no-cache-dir wheel\n\n#\n# C/C++ deps\n#\n\n# Install Boost\nADD ./third-party/boost /atom/third-party/boost\nRUN cd /atom/third-party/boost && \\\n   ./bootstrap.sh --with-libraries=date_time && ./b2 && \\\n   ./b2 install\n\n# Install PyBind\nADD ./third-party/pybind11 /atom/third-party/pybind11\nRUN /usr/local/bin/python3.8 -m pip install pytest && \\\n   cd /atom/third-party/pybind11 && \\\n   mkdir build && \\\n   cd build && \\\n   cmake .. && \\\n   cmake --build . --config Release --target check && \\\n   make install\n\n\n# Build Shared Memory Library\nADD ./utilities/shared_mem/lib /tmp/shared_mem/lib\nRUN cd /tmp/shared_mem/lib && make && make install\n\n# Build third-party C dependencies\nADD ./languages/c/third-party /atom/languages/c/third-party\nRUN cd /atom/languages/c/third-party && make\n\n#\n# Python deps\n#\n\n# Install custom third-party deps. We need to build\n# some of these separately as opposed to installing\n# from pip\n#\n# Install list:\n#   1. Cython (needs to be x-compiled for aarch64)\n#   2. OpenBLAS (needs to be x-compiled for aarch64/ARM CPU)\n#   3. numpy (needs to be x-compiled for aarch64)\n#   4. pyarrow (needs to be x-compiled for aarch64)\n\n# Cython\nADD ./languages/python/third-party/cython /atom/languages/python/third-party/cython\nWORKDIR /atom/languages/python/third-party/cython\nRUN python3 setup.py build -j8 install\n\n# OpenBLAS\nADD ./third-party/OpenBLAS /atom/third-party/OpenBLAS\nARG BLAS_TARGET_CPU=\"\"\nRUN cd /atom/third-party/OpenBLAS \\\n   && make DYNAMIC_ARCH=1 TARGET=${BLAS_TARGET_CPU} -j8 \\\n   && make PREFIX=/usr/local install\n\n# Numpy\nADD ./languages/python/third-party/numpy /atom/languages/python/third-party/numpy\nADD ./languages/python/third-party/numpy.site.cfg /atom/languages/python/third-party/numpy/site.cfg\nWORKDIR /atom/languages/python/third-party/numpy\nRUN python3 setup.py build -j8 install\n\n# Pyarrow\nADD ./third-party/apache-arrow /atom/third-party/apache-arrow\nWORKDIR /atom/third-party/apache-arrow/python\nRUN mkdir -p /atom/third-party/apache-arrow/cpp/build \\\n   && cd /atom/third-party/apache-arrow/cpp/build \\\n   && cmake -DCMAKE_BUILD_TYPE=release \\\n   -DOPENSSL_ROOT_DIR=/usr/local/ssl \\\n   -DCMAKE_INSTALL_LIBDIR=lib \\\n   -DCMAKE_INSTALL_PREFIX=/usr/local \\\n   -DARROW_PARQUET=OFF \\\n   -DARROW_PYTHON=ON \\\n   -DARROW_PLASMA=ON \\\n   -DARROW_BUILD_TESTS=OFF \\\n   -DPYTHON_EXECUTABLE=/opt/venv/bin/python3 \\\n   .. \\\n   && make -j8 \\\n   && make install\nARG PYARROW_EXTRA_CMAKE_ARGS=\"\"\nRUN cd /atom/third-party/apache-arrow/python \\\n   && ARROW_HOME=/usr/local SETUPTOOLS_SCM_PRETEND_VERSION=\"0.17.0\" python3 setup.py build_ext -j 8 --build-type=release --extra-cmake-args=${PYARROW_EXTRA_CMAKE_ARGS} install\n\n#\n# Redis itself\n#\n\n# Build redis\nADD ./third-party/redis /atom/third-party/redis\nRUN cd /atom/third-party/redis && make -j8 && make PREFIX=/usr/local install\n\n#\n# Redis time series module.\n#\nRUN apt-get update && apt-get install --no-install-recommends -y ca-certificates && rm -rf /var/lib/apt/lists/*;\nADD ./third-party/RedisTimeSeries /atom/third-party/RedisTimeSeries\nWORKDIR /atom/third-party/RedisTimeSeries\n\n# Need to make a separate virtualenv for the build since it installs a bunch of\n# python cruft we don't need in our production env. Make the env, use it for the\n# build, and then re-source the original environment.\nRUN python3 -m venv env && . env/bin/activate\n\n# Instead of using system-setup.py from RedisTimeSeries, manually install the\n# dependencies to avoid a dependency conflict. See the following thread for more\n# details:\n# https://github.com/elementary-robotics/atom/pull/528#issuecomment-1045047476\nRUN apt-get install --no-install-recommends -y jq lcov && \\\n    python3 /atom/third-party/RedisTimeSeries/deps/readies/bin/getrmpytools && \\\n    make build MK.pyver=3 && rm -rf /var/lib/apt/lists/*;\n\n# Remove unwanted build dependencies and the venv\nRUN pip3 uninstall -y rltest ramp-packer redis-py-cluster redis && \\\n    . /opt/venv/bin/activate && \\\n    rm -rf env\n\n#\n# Finish up\n#\n\n# Change working directory back to atom location\nWORKDIR /atom\n\n################################################################################\n#\n# atom-base-cv-build: atom + CV tools\n#\n################################################################################\nFROM atom-base as atom-base-cv-build\n\n# Install pre-requisites\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n   zlib1g-dev \\\n   libjpeg-turbo8-dev \\\n   libpng-dev \\\n   libtiff-dev \\\n   libopenexr-dev \\\n   libavcodec-dev \\\n   libavformat-dev \\\n   libswscale-dev \\\n   libwebp-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install openCV + python3 bindings\nENV CFLAGS=\"-I /usr/local/include -I /usr/local/include/python3.8 -L /usr/local/lib ${CFLAGS}\"\nENV CXXFLAGS=\"-I /usr/local/include -I /usr/local/include/python3.8 -L /usr/local/lib ${CXXFLAGS}\"\nCOPY ./third-party/opencv /atom/third-party/opencv\nWORKDIR /atom/third-party/opencv\nRUN mkdir -p build && cd build && \\\n   cmake \\\n   --verbose \\\n   -DCMAKE_BUILD_TYPE=Release \\\n   -DCMAKE_INSTALL_PREFIX=/usr/local \\\n   -DPYTHON3_EXECUTABLE=/opt/venv/bin/python3 \\\n   -DPYTHON_INCLUDE_DIR=/usr/include/python3.8 \\\n   -DPYTHON_INCLUDE_DIR2=/usr/include/$(arch)-linux-gnu/python3.8 \\\n   -DPYTHON_LIBRARY=/usr/lib/$(arch)-linux-gnu/libpython3.8.so \\\n   -DPYTHON3_NUMPY_INCLUDE_DIRS=/opt/venv/lib/python3.8/site-packages/numpy/core/include \\\n   -DOPENCV_PYTHON3_INSTALL_PATH=/opt/venv/lib/python3.8/site-packages \\\n   ../ && \\\n   make -j8 && \\\n   make install\n\n# Install Pillow (PIL) as that's also used frequently with opencv\nCOPY ./languages/python/third-party/Pillow /atom/languages/python/third-party/Pillow\nWORKDIR /atom/languages/python/third-party/Pillow\nRUN MAX_CONCURRENCY=8 python3 setup.py install\n\n# Use the copy_lib_requirements.sh to copy all required libs that go with libopencv*\n#  see utilities/docker/copy_lib_requirements.sh\nCOPY --from=no-deps /tmp/existing_libs.txt /tmp/existing_libs.txt\nADD ./utilities/docker/copy_lib_requirements.sh /tmp/copy_lib_requirements.sh\nRUN /tmp/copy_lib_requirements.sh libopencv /tmp/existing_libs.txt\n\n################################################################################\n#\n# atom-base-cv: Stripped down version of atom-base-cv-build with only built libs\n#\n# Clean up and only ship the following folders:\n#   1. /usr/local/lib\n#   2. /usr/local/include\n#   3. /opt/venv\n#\n################################################################################\nFROM atom-base as atom-base-cv\n\nCOPY --from=atom-base-cv-build /usr/local/lib /usr/local/lib\nCOPY --from=atom-base-cv-build /usr/local/include /usr/local/include\nCOPY --from=atom-base-cv-build /opt/venv /opt/venv\n\n################################################################################\n#\n# atom-base-vnc: atom + CV tools + VNC\n#\n################################################################################\nFROM atom-base-cv as atom-base-vnc\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n   libgl1-mesa-dri \\\n   menu \\\n   net-tools \\\n   openbox \\\n   supervisor \\\n   tint2 \\\n   x11-xserver-utils \\\n   x11vnc \\\n   xinit \\\n   xserver-xorg-video-dummy \\\n   xserver-xorg-input-void \\\n   websockify \\\n   sudo \\\n   && rm -f /usr/share/applications/x11vnc.desktop && rm -rf /var/lib/apt/lists/*;\n\n# Add in noVNC to /opt/noVNC\nADD third-party/noVNC /opt/noVNC\n\nRUN cd /opt/noVNC \\\n   && ln -s vnc_auto.html index.html \\\n   && pip3 install --no-cache-dir setuptools \\\n   && pip3 install --no-cache-dir supervisor-stdout \\\n   && apt-get -y autoremove \\\n   && apt-get -y clean \\\n   && rm -rf /var/lib/apt/lists/*\n\n# noVNC (http server) is on 6080, and the VNC server is on 5900\nEXPOSE 6080 5900\nCOPY third-party/docker-opengl/etc/skel/.xinitrc /etc/skel/.xinitrc\n\nRUN useradd -m -s /bin/bash user\nUSER user\nRUN cp /etc/skel/.xinitrc /home/user/\nUSER root\nRUN echo \"user ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/user\n\nCOPY third-party/docker-opengl/etc /etc\nCOPY third-party/docker-opengl/usr /usr\n\nENV DISPLAY :0\n\n################################################################################\n#\n# atom-base-cuda: atom + CV tools + CUDA tools\n#\n################################################################################\nFROM atom-base-cv as atom-base-cuda\n\nWORKDIR /atom/languages/python\nADD ./languages/python/requirements-cuda.txt .\nADD ./languages/python/install_cuda_requirements.sh .\nADD ./languages/python/third-party/wheels ./third-party/wheels\nRUN ./install_cuda_requirements.sh\n\n################################################################################\n#\n# atom-source: Add in atom logic code atop base dependencies. All flavors of\n#     atom lead here, where we go from the specified base into compiling\n#     the atom source code atop it\n#\n################################################################################\nFROM ${ATOM_BASE} as atom-source\n\n#\n# C client\n#\n\n# Build the C library\nADD ./languages/c /atom/languages/c\nRUN cd /atom/languages/c \\\n   && make clean && make -j8 && make install\n\n#\n# C++ client\n#\n\n# Build and install the c++ library\nADD ./languages/cpp /atom/languages/cpp\nRUN cd /atom/languages/cpp \\\n   && make clean && make -j8 && make install\n\n#\n# Python client\n#\n\n# Install redis-py\nADD ./languages/python/third-party/redis-py /atom/languages/python/third-party/redis-py\nWORKDIR /atom/languages/python/third-party/redis-py\nRUN python3 setup.py install\n\n# Install rest of python requirements\nADD ./languages/python/requirements.txt /atom/languages/python/requirements.txt\nRUN pip3 install --no-cache-dir -r /atom/languages/python/requirements.txt\n\n# Install the python wrapper itself\nADD ./lua-scripts /atom/lua-scripts\nADD ./languages/python /atom/languages/python\nRUN cd /atom/languages/python \\\n   && python3 setup_local.py install\n\n#\n# Command-line utility\n#\n\nADD ./utilities/atom-cli/requirements.txt /atom/utilities/atom-cli/requirements.txt\nRUN pip3 install --no-cache-dir -r /atom/utilities/atom-cli/requirements.txt\nADD ./utilities/atom-cli /atom/utilities/atom-cli\nRUN cp /atom/utilities/atom-cli/atom-cli.py /usr/local/bin/atom-cli \\\n   && chmod +x /usr/local/bin/atom-cli\n\n\n#\n# Requirements for metrics/monitoring\n#\nADD metrics/monitoring /usr/local/bin/monitoring\nRUN pip3 install --no-cache-dir -r /usr/local/bin/monitoring/requirements.txt\n\n#\n# Finish up\n#\n\n# Change working directory back to atom location\nWORKDIR /atom\n\n################################################################################\n#\n# atom: Production atom image. Strips out source. Only includes libraries,\n#     headers and Python venv.\n#\n################################################################################\nFROM $STOCK_IMAGE as atom\n\n# Configuration environment variables\nENV ATOM_NUCLEUS_HOST \"\"\nENV ATOM_METRICS_HOST \"\"\nENV ATOM_NUCLEUS_PORT \"6379\"\nENV ATOM_METRICS_PORT \"6380\"\nENV ATOM_NUCLEUS_SOCKET \"/shared/redis.sock\"\nENV ATOM_METRICS_SOCKET \"/shared/metrics.sock\"\nENV ATOM_LOG_DIR \"/var/log/atom/\"\nENV ATOM_LOG_FILE_SIZE 2000\nENV PYTHONUNBUFFERED=TRUE\n\n# Remove nvidia repositories from APT since they are unstable and unneeded\nRUN rm -f /etc/apt/sources.list.d/nvidia-ml.list /etc/apt/sources.list.d/cuda.list\n\n# Install python\nRUN apt-get update -y && apt-get -y upgrade \\\n   && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n   apt-utils \\\n   curl \\\n   libatomic1 \\\n   ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n# Copy contents of python virtualenv and activate\nCOPY --from=atom-source /opt/venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# Need to add this to the Python path for shared memory\nENV PYTHONPATH=/usr/local/lib:${PYTHONPATH}\n\n# Copy /usr/local\nCOPY --from=atom-source /usr/local/lib /usr/local/lib\nCOPY --from=atom-source /usr/local/include /usr/local/include\nCOPY --from=atom-source /usr/local/bin /usr/local/bin\nENV LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}\n\n# Set Python3.8 as the default if it's not already\nRUN ln -sf /usr/local/bin/python3.8 /usr/bin/python3\n\n# Set the Redis CLI binary\nENV REDIS_CLI_BIN /usr/local/bin/redis-cli\n\n# Add .circleci for docs build\nADD ./.circleci /atom/.circleci\n\n# Change working directory back to atom location\nWORKDIR /atom\n\n# Add in the utlities scripts\nADD utilities/scripts/* /usr/local/bin\n\n# Make the log directory so that it exists in the Docker container\nRUN mkdir -p ${ATOM_LOG_DIR}\n\n# Run the wait_for_nucleus script by default\nCMD [ \"/usr/local/bin/wait_for_nucleus.sh\", \"echo 'No startup command -- exiting!'\" ]\n\n################################################################################\n#\n# nucleus: Redis-server + atom-cli and a few other utilities to run everything\n#\n################################################################################\n\nFROM atom as nucleus\n\n# Default nucleus maximum memory is 8GB\nENV ATOM_NUCLEUS_MAXMEMORY 8gb\n# Default metrics maximum memory is 500mb\nENV ATOM_METRICS_MAXMEMORY 500mb\n# Default metrics monitoring to TRUE\nENV NUCLEUS_METRICS_MONITOR TRUE\n# Default compaction to sum + avg over 1-minute intervals\nENV ATOM_METRICS_DEFAULT_COMPACTION_POLICY \"avg:1M:1d;sum:1M:1d;max:1M:1d\"\n# Keep raw data for 1h (in milliseconds)\nENV ATOM_METRICS_DEFAULT_RETENTION_POLICY 3600000\n# Default duplicate sample policy should be sum\nENV ATOM_METRICS_DEFAULT_DUPLICATE_POLICY MAX\n\n# Add in monitoring\nCOPY --from=atom-source /usr/local/bin/monitoring /usr/local/bin/monitoring\n\n# Add in redis-server\nCOPY --from=atom-source /usr/local/bin/redis-server /usr/local/bin/redis-server\n# Add in redis-time-series\nCOPY --from=atom-source /atom/third-party/RedisTimeSeries/bin/redistimeseries.so /etc/redis/redistimeseries.so\n\n# Add in supervisor and config files\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y supervisor && rm -rf /var/lib/apt/lists/*;\nADD ./config/nucleus/supervisor /etc/supervisor\nADD ./config/nucleus/redis /etc/redis\nRUN mkdir /metrics\n\n# Add in launch script\nADD config/nucleus/launch.sh launch.sh\nADD config/nucleus/launch_metrics_monitor.sh launch_metrics_monitor.sh\n\nCMD [ \"/bin/bash\", \"launch.sh\" ]\n\n################################################################################\n#\n# test: Start with atom stage and then add in test dependencies\n#\n################################################################################\n\nFROM atom as test\n\n#\n# Install test dependencies\n#\n\n# Install dependencies\nRUN apt-get update && apt-get -y upgrade \\\n   && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n   libgtest-dev \\\n   cmake \\\n   build-essential \\\n   python3-pip && rm -rf /var/lib/apt/lists/*;\n\n# Build and install googletest\nRUN cd /usr/src/gtest \\\n   && cmake CMakeLists.txt \\\n   && make -j8 \\\n   && set -x \\\n   && { cp lib/*.a /usr/lib || cp *.a /usr/lib; } \\\n   && set +x\n\n# Install valgrind\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends valgrind && rm -rf /var/lib/apt/lists/*;\n\n# Install pytest\nADD ./languages/python/requirements-test.txt .\nRUN pip3 install --no-cache-dir -r requirements-test.txt\n\n# Install pyright\nRUN apt install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;\nRUN if ! lsb_release; then \\\n apt-get install --no-install-recommends -y lsb-release && sed -i 's/python3/python3.6/g' /usr/bin/lsb_release; rm -rf /var/lib/apt/lists/*; fi\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash -\nRUN apt install --no-install-recommends -y nodejs && npm install -g pyright@1.1.188 && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Copy in pyright config for running pyright on atom source code\nADD ./languages/python/pyrightconfig-ci.json /atom/languages/python/pyrightconfig-ci.json\n\n# Copy source code\nCOPY ./languages/c/ /atom/languages/c\nCOPY ./languages/cpp/ /atom/languages/cpp\nCOPY ./languages/python/tests /atom/languages/python/tests\nCOPY ./languages/python/atom /atom/languages/python/atom\nCOPY ./utilities/shared_mem/gtest /atom/utilities/shared_mem/gtest\n"
}