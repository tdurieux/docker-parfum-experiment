diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/elementary-robotics/atom/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/elementary-robotics/atom/Dockerfile/repaired.Dockerfile
index 738f33d..1bb0cfc 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/elementary-robotics/atom/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/elementary-robotics/atom/Dockerfile/repaired.Dockerfile
@@ -67,7 +67,7 @@ RUN apt-get update \
    flex \
    bison \
    curl \
-   pkg-config
+   pkg-config && rm -rf /var/lib/apt/lists/*;
 
 # We need to copy libgfortran and all of its dependencies from /usr/lib/gcc/arch-linux-gnu to
 # /usr/local/lib so that they get packaged up with the system install
@@ -88,10 +88,10 @@ RUN set +x; mkdir /tmp/python && \
    wget --no-check-certificate https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && \
    tar -xzvf Python-${PYTHON_VERSION}.tgz && \
    cd Python-${PYTHON_VERSION} && \
-   ./configure --enable-optimizations --enable-shared && \
+   ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-optimizations --enable-shared && \
    make -j8 install && \
    ln -sf /usr/local/bin/python3.8 /usr/bin/python3 && \
-   rm -rf /tmp/python
+   rm -rf /tmp/python && rm Python-${PYTHON_VERSION}.tgz
 
 # Switch over to the venv
 RUN python3 -m venv /opt/venv
@@ -99,7 +99,7 @@ ENV PATH="/opt/venv/bin:$PATH"
 
 # Install setuptools
 RUN pip3 install --no-cache-dir --upgrade pip setuptools
-RUN pip3 install wheel
+RUN pip3 install --no-cache-dir wheel
 
 #
 # C/C++ deps
@@ -194,7 +194,7 @@ RUN cd /atom/third-party/redis && make -j8 && make PREFIX=/usr/local install
 #
 # Redis time series module.
 #
-RUN apt-get update && apt-get install -y ca-certificates
+RUN apt-get update && apt-get install --no-install-recommends -y ca-certificates && rm -rf /var/lib/apt/lists/*;
 ADD ./third-party/RedisTimeSeries /atom/third-party/RedisTimeSeries
 WORKDIR /atom/third-party/RedisTimeSeries
 
@@ -207,9 +207,9 @@ RUN python3 -m venv env && . env/bin/activate
 # dependencies to avoid a dependency conflict. See the following thread for more
 # details:
 # https://github.com/elementary-robotics/atom/pull/528#issuecomment-1045047476
-RUN apt-get install -y jq lcov && \
+RUN apt-get install --no-install-recommends -y jq lcov && \
     python3 /atom/third-party/RedisTimeSeries/deps/readies/bin/getrmpytools && \
-    make build MK.pyver=3
+    make build MK.pyver=3 && rm -rf /var/lib/apt/lists/*;
 
 # Remove unwanted build dependencies and the venv
 RUN pip3 uninstall -y rltest ramp-packer redis-py-cluster redis && \
@@ -231,7 +231,7 @@ WORKDIR /atom
 FROM atom-base as atom-base-cv-build
 
 # Install pre-requisites
-RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
+RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \
    zlib1g-dev \
    libjpeg-turbo8-dev \
    libpng-dev \
@@ -240,7 +240,7 @@ RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
-   libwebp-dev
+   libwebp-dev && rm -rf /var/lib/apt/lists/*;
 
 # Install openCV + python3 bindings
 ENV CFLAGS="-I /usr/local/include -I /usr/local/include/python3.8 -L /usr/local/lib ${CFLAGS}"
@@ -313,7 +313,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
    xserver-xorg-input-void \
    websockify \
    sudo \
-   && rm -f /usr/share/applications/x11vnc.desktop
+   && rm -f /usr/share/applications/x11vnc.desktop && rm -rf /var/lib/apt/lists/*;
 
 # Add in noVNC to /opt/noVNC
 ADD third-party/noVNC /opt/noVNC
@@ -415,7 +415,7 @@ RUN cp /atom/utilities/atom-cli/atom-cli.py /usr/local/bin/atom-cli \
 # Requirements for metrics/monitoring
 #
 ADD metrics/monitoring /usr/local/bin/monitoring
-RUN pip3 install -r /usr/local/bin/monitoring/requirements.txt
+RUN pip3 install --no-cache-dir -r /usr/local/bin/monitoring/requirements.txt
 
 #
 # Finish up
@@ -452,7 +452,7 @@ RUN apt-get update -y && apt-get -y upgrade \
    apt-utils \
    curl \
    libatomic1 \
-   ca-certificates
+   ca-certificates && rm -rf /var/lib/apt/lists/*;
 
 # Copy contents of python virtualenv and activate
 COPY --from=atom-source /opt/venv /opt/venv
@@ -518,7 +518,7 @@ COPY --from=atom-source /usr/local/bin/redis-server /usr/local/bin/redis-server
 COPY --from=atom-source /atom/third-party/RedisTimeSeries/bin/redistimeseries.so /etc/redis/redistimeseries.so
 
 # Add in supervisor and config files
-RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y supervisor
+RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y supervisor && rm -rf /var/lib/apt/lists/*;
 ADD ./config/nucleus/supervisor /etc/supervisor
 ADD ./config/nucleus/redis /etc/redis
 RUN mkdir /metrics
@@ -547,7 +547,7 @@ RUN apt-get update && apt-get -y upgrade \
    libgtest-dev \
    cmake \
    build-essential \
-   python3-pip
+   python3-pip && rm -rf /var/lib/apt/lists/*;
 
 # Build and install googletest
 RUN cd /usr/src/gtest \
@@ -558,17 +558,18 @@ RUN cd /usr/src/gtest \
    && set +x
 
 # Install valgrind
-RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends valgrind
+RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends valgrind && rm -rf /var/lib/apt/lists/*;
 
 # Install pytest
 ADD ./languages/python/requirements-test.txt .
 RUN pip3 install --no-cache-dir -r requirements-test.txt
 
 # Install pyright
-RUN apt install -y curl
-RUN if ! lsb_release; then apt-get install -y lsb-release && sed -i 's/python3/python3.6/g' /usr/bin/lsb_release; fi
-RUN curl -sL https://deb.nodesource.com/setup_12.x | bash -
-RUN apt install -y nodejs && npm install -g pyright@1.1.188
+RUN apt install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;
+RUN if ! lsb_release; then \
+ apt-get install --no-install-recommends -y lsb-release && sed -i 's/python3/python3.6/g' /usr/bin/lsb_release; rm -rf /var/lib/apt/lists/*; fi
+RUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash -
+RUN apt install --no-install-recommends -y nodejs && npm install -g pyright@1.1.188 && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;
 
 # Copy in pyright config for running pyright on atom source code
 ADD ./languages/python/pyrightconfig-ci.json /atom/languages/python/pyrightconfig-ci.json