{
  "startTime": 1674251086021,
  "endTime": 1674251086775,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 26,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 20,
        "columnStart": 26,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# You can set the Swift version to what you need for your app. Versions can be found here: https://hub.docker.com/_/swift\nFROM swift:4.2 as builder\n\n# For local build, add `--build-arg env=docker`\n# In your application, you can use `Environment.custom(name: \"docker\")` to check if you're in this env\nARG env\n\nRUN apt-get -qq update && apt-get -q --no-install-recommends -y install \\\n  tzdata \\\n  && rm -r /var/lib/apt/lists/*\nWORKDIR /app\nCOPY . .\nRUN mkdir -p /build/lib && cp -R /usr/lib/swift/linux/*.so /build/lib\nRUN swift build -c release && mv `swift build -c release --show-bin-path` /build/bin\n\n# Production image\nFROM ubuntu:16.04\nARG env\nRUN apt-get -qq update && apt-get install --no-install-recommends -y \\\n  libicu55 libxml2 libbsd0 libcurl3 libatomic1 \\\n  tzdata \\\n  && rm -r /var/lib/apt/lists/*\nWORKDIR /app\nCOPY --from=builder /build/bin/Run .\nCOPY --from=builder /build/lib/* /usr/lib/\n# Uncomment the next line if you need to load resources from the `Public` directory\n#COPY --from=builder /app/Public ./Public\n# Uncomment the next line if you are using Leaf\n#COPY --from=builder /app/Resources ./Resources\nENV ENVIRONMENT=$env\n\nENTRYPOINT ./Run serve --env $ENVIRONMENT --hostname 0.0.0.0 --port 80\n"
}