{
  "startTime": 1674249490657,
  "endTime": 1674249491763,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Bare minimum Dockerfile configuration. First, make sure you're cd'ed into the Quantropy directory\n#    To build the Docker image: 'docker build -t matilda .' (do not forget the dot at the end)\n#    To run the Docker image: 'docker run -d -p 5000:5000 matilda'\n\nFROM python:3.8-slim\n\nMAINTAINER Alain Daccache \"alaindacc@gmail.com\"\n\n# && \\ isnâ€™t Docker specific, but tells Linux to run the next command as part of the existing line\n# (instead of using multiple RUN directives, you can use just one)\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y python-pip python-dev && rm -rf /var/lib/apt/lists/*;\n\n# Copy files from the first parameter (the source .) to the destination parameter (in this case, /app)\n# We copy just the requirements.txt first, in a seperate build step (before adding the entire application into the image)\n# to leverage Docker cache (i.e. avoid invalidating the Docker build cache every time you're copying the entire application into the image)\nCOPY ./requirements.txt /app/requirements.txt\n\n# Sets the working directory (all following instructions operate within this directory) of the Docker container\nWORKDIR /app\n\n# pip installs from requirements.txt as normal.\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\n# ENTRYPOINT configures the container to run as an executable; only the last ENTRYPOINT instruction executes\nENTRYPOINT [ \"python\" ]\nCMD [ \"matilda/__init__.py\" ]\n"
}