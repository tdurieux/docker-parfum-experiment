{
  "startTime": 1674250123296,
  "endTime": 1674250124471,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 41,
        "columnEnd": 348
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 9,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 9,
        "columnEnd": 105
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 9,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 9,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 9,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 9,
        "columnEnd": 105
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 9,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 9,
        "columnEnd": 92
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 9,
        "columnEnd": 106
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 9,
        "columnEnd": 105
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 9,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 9,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 9,
        "columnEnd": 130
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 9,
        "columnEnd": 129
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 9,
        "columnEnd": 75
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 9,
        "columnEnd": 116
      }
    }
  ],
  "repairedDockerfile": "###\n# STM32F4-Discovery Build and Test Environment Dockerfile\n#\n# VERSION         1.1.0\n# DOCKER_VERSION  1.1.2\n# AUTHOR          Iztok Starc <i****.s****@gmail.com>\n# DESCRIPTION     This Dockerfile is used to build and test Environment for the STM32F4-Discovery board.\n#                 The Dockerfile is based on the ubuntu 14.04 LTS image from the official repository.\n#\n#                 More info:\n#                   - http://istarc.wordpress.com/\n#                   - https://github.com/istarc/stm32\n#                   - https://registry.hub.docker.com/u/istarc/stm32/\n\n###\n# Usage\n#\n#\n#\n# I provide already built image based on this Dockerfile and you may pull it from the repository (1).\n# Alternatively, you may use this Dockerfile to build the image yourself (2).\n#\n#\n#\n# 1. Pull the image from the repository\n#\n# 1.1 Prerequisites:\n#\n#    docker --version\n#    Docker version 1.1.0 # Issues with version < 1.1.0\n#    # Install Docker by following instructions at https://docs.docker.com/\n#\n# 1.2 Basic Usage:\n#\n#    sudo docker pull istarc/stm32\n#    CONTAINER_ID=$(sudo docker run -P -d --privileged=true istarc/stm32)\n#    # Other run options:\n#    # CONTAINER_ID=$(sudo docker run -P -d istarc/stm32) # /wo deploy capability\n#    # sudo docker run -P -i -t istarc/stm32 /bin/bash # Interactive mode\n#    sudo docker stop $CONTAINER_ID\n#    # Stop and remove all containers\n#    # sudo docker stop $(sudo docker ps -a -q)\n#    # sudo docker rm $(sudo docker ps -a -q)\n#    # Remove all untagged images\n#    # sudo docker rmi $(sudo docker images | grep \"^<none>\" | awk '{print $3}')\n#\n# 1.3 Build Existing Projects:\n#\n#    ssh -p $(sudo docker port $CONTAINER_ID 22 | cut -d ':' -f2) admin@localhost\n#    Enter password: admin\n#    cd ~/stm32/\n#    make clean\n#    make -j4\n#\n# 1.4 Deploy Existing Project:\n#\n#    ssh -p $(sudo docker port $CONTAINER_ID 22 | cut -d ':' -f2) admin@localhost\n#    Enter password: admin\n#    cd ~/stm32/examples/Template.mbed\n#    make clean\n#    make -j4\n#    sudo make deploy\n#\n# 1.5 Test Build Existing Projects via Buildbot:\n#\n#    firefox http://localhost:$(sudo docker port $CONTAINER_ID 8010 | cut -d ':' -f2)\n#    Login U: admin P: admin (Upper right corner)\n#    Click: Waterfall -> test-build-local -> [Use default options] -> Force Build\n#    # Test builds examples in /home/admin/stm32/examples\n#    Click: Waterfall -> test-build-repo -> [Use default options] -> Force Build\n#    # Test builds examples from the https://github.com/istarc/stm32.git repository\n#    Check: Waterfall -> F5 to Refresh\n#\n# 1.6 More info:\n#  - http://istarc.wordpress.com\n#  - https://github.com/istarc/stm32\n#\n#\n#\n# 2. Build the image\n#\n# This is alternative to \"1. Pull the image from the repository\".\n#\n# 2.1 Prerequisites:\n#\n#    docker --version\n#    Docker version 1.1.0 # Issues with version < 1.1.0\n#    # Install Docker by following instructions at https://docs.docker.com/\n#\n# 2.2 Install software dependencies\n#\n#    cd ~\n#    sudo docker pull ubuntu\n#    wget https://raw.githubusercontent.com/istarc/stm32/master/Dockerfile\n#\n# 2.3 Build the image\n#\n#    sudo docker build -t istarc/stm32 - < Dockerfile\n#   \n# 2.4 Usage: see 1.2 - 1.6\n\n\n\n###\n# Docker script\n#\n# 1. Initial docker image\nfrom ubuntu:14.04\n\n# 2. Install dependancies\n# 2.1 Install platform dependancies\nrun export DEBIAN_FRONTEND=noninteractive\nrun sudo mv /etc/apt/sources.list /etc/apt/sources.list.old\nrun sudo echo 'deb mirror://mirrors.ubuntu.com/mirrors.txt trusty main restricted universe multiverse' >> /etc/apt/sources.list\nrun sudo echo 'deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-updates main restricted universe multiverse' >> /etc/apt/sources.list\nrun sudo echo 'deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-backports main restricted universe multiverse' >> /etc/apt/sources.list\nrun sudo echo 'deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-security main restricted universe multiverse' >> /etc/apt/sources.list\nrun sudo apt-get update -q\nrun sudo apt-get install --no-install-recommends -y supervisor sudo ssh openssh-server software-properties-common vim wget openssl && rm -rf /var/lib/apt/lists/*;\n# The above is required to execute add-apt-repository\nrun sudo add-apt-repository -y ppa:terry.guo/gcc-arm-embedded\nrun sudo apt-get update -q\n# 2.2 Install project dependancies\n# 2.2.1 GCC ARM\nrun sudo apt-cache policy gcc-arm-none-eabi\nrun sudo apt-get install --no-install-recommends -y build-essential git openocd gcc-arm-none-eabi qemu-system-arm symlinks expect && rm -rf /var/lib/apt/lists/*;\n# 2.2.2 Buildbot\nrun sudo apt-get install --no-install-recommends -y buildbot buildbot-slave && rm -rf /var/lib/apt/lists/*;\n# 2.2.3 OpenOCD build dependancies\nrun sudo apt-get install --no-install-recommends -y libtool libftdi-dev libusb-1.0-0-dev automake pkg-config texinfo && rm -rf /var/lib/apt/lists/*;\n# 2.2.4 Clone and init stm32 repository\nrun mkdir -p /home/admin\nrun cd /home/admin; git clone https://github.com/istarc/stm32.git # --depth 1\nrun cd /home/admin/stm32; git submodule update --init # --depth 1\n\n# 3. Add user admin with password \"admin\"\nrun useradd -s /bin/bash -m -d /home/admin -p $(openssl passwd -1 admin)  admin\nrun sed -Ei 's/adm:x:4:/admin:x:4:admin/' /etc/group\nrun sed -Ei 's/(\\%admin ALL=\\(ALL\\) )ALL/\\1 NOPASSWD:ALL/' /etc/sudoers\n\n# 4. Setup ssh server\nrun mkdir -p /var/run/sshd\nrun /bin/echo -e \"[program:sshd]\\ncommand=/usr/sbin/sshd -D\\n\" > /etc/supervisor/conf.d/sshd.conf\nexpose 22\n\n# 5. Setup buildbot master and workers\nrun mkdir -p /home/admin/stm32bb\nrun buildbot create-master /home/admin/stm32bb/master\nrun cp /home/admin/stm32/test/buildbot/master/master.cfg /home/admin/stm32bb/master/master.cfg\nrun buildslave create-slave /home/admin/stm32bb/slave localhost:9989 arm-none-eabi pass-MonkipofPaj1\nrun /bin/echo -e \"[program:buildmaster]\\ncommand=twistd --nodaemon --no_save -y buildbot.tac\\ndirectory=/home/admin/stm32bb/master\\nuser=admin\\n\" > /etc/supervisor/conf.d/buildbot.conf\nrun /bin/echo -e \"[program:buildworker]\\ncommand=twistd --nodaemon --no_save -y buildbot.tac\\ndirectory=/home/admin/stm32bb/slave\\nuser=admin\\n\" >> /etc/supervisor/conf.d/buildbot.conf\nexpose 8010\n\n# 6. Build & Install OpenOCD from repository\n# run cd /home/admin; git clone git://openocd.git.sourceforge.net/gitroot/openocd/openocd # Not Reliable\nrun cd /home/admin; git clone --depth 1 https://github.com/ntfreak/openocd.git\nrun cd /home/admin/openocd; ./bootstrap; ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-maintainer-mode --disable-option-checking --disable-werror --prefix=/opt/openocd --enable-dummy --enable-usb_blaster_libftdi --enable-ep93xx --enable-at91rm9200 --enable-presto_libftdi --enable-usbprog --enable-jlink --enable-vsllink --enable-rlink --enable-stlink --enable-arm-jtag-ew; make; make install\n\n# 7. Post-install\n# 7.1 Setup folder & file privileges\nrun chown -R admin:admin /home/admin\nrun chmod o+rx /home\n# 7.2 Commands to be executed when docker container starts\ncmd [\"/usr/bin/supervisord\", \"-n\"]\n\n"
}