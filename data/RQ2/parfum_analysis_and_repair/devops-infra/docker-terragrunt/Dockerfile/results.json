{
  "startTime": 1674249572863,
  "endTime": 1674249574544,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 71,
        "columnStart": 2,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 16,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 86,
        "columnStart": 2,
        "columnEnd": 133
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 16,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 2,
        "columnEnd": 45
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 19,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 21,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 21,
        "columnEnd": 88
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 112
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 164
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:jammy-20220531\n\n# Which flavour of image to build\nARG SLIM=no\nARG AZURE=no\nARG AWS=no\nARG GCP=no\n\n# Multi-architecture from buildx\nARG TARGETPLATFORM=linux/amd64\n\n# Versions of dependecies, GCP has no default handler\nARG AWS_VERSION=latest\nARG GCP_VERSION\nARG TF_VERSION=latest\nARG TG_VERSION=latest\n\n# List of Python packages\nCOPY pip/common/requirements.txt /tmp/pip_common_requirements.txt\nCOPY pip/aws/requirements.txt /tmp/pip_aws_requirements.txt\nCOPY pip/azure/requirements.txt /tmp/pip_azure_requirements.txt\n\n# Install apt prerequisits\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\n# hadolint ignore=DL3008\nRUN apt-get update -y ;\\\n  apt-get install --no-install-recommends -y \\\n    ca-certificates \\\n    curl \\\n    git \\\n    jq \\\n    unzip ;\\\n  if [ \"${SLIM}\" = \"no\" ]; then \\\n    apt-get install --no-install-recommends -y \\\n      bc \\\n      docker \\\n      graphviz \\\n      hub \\\n      make \\\n      ncurses-base \\\n      openssh-client \\\n      openssl \\\n      python3 \\\n      python3-pip \\\n      zip ;\\\n  fi ;\\\n  if [ \"${AZURE}\" = \"yes\" ]; then \\\n    apt-get install --no-install-recommends -y \\\n      gcc \\\n      libsodium-dev \\\n      python3-dev ;\\\n  fi ;\\\n  apt-get clean ;\\\n  rm -rf /var/lib/apt/lists/*\n\n# Python packages\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\n# hadolint ignore=DL3013\nRUN if [ \"${SLIM}\" = \"no\" ]; then \\\n    pip3 install --no-cache-dir -r /tmp/pip_common_requirements.txt ;\\\n  fi\n\n# Get Terraform by a specific version or search for the latest one\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\nRUN if [ \"${TARGETPLATFORM}\" = \"linux/amd64\" ]; then ARCHITECTURE=amd64; elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \\\n  if [ \"${TF_VERSION}\" = \"latest\" ]; then \\\n    VERSION=\"$( curl -f -LsS https://releases.hashicorp.com/terraform/ | grep -Eo '/[.0-9]+/' | grep -Eo '[.0-9]+' | sort -V | tail -1)\" ; \\\n  else \\\n    VERSION=\"${TF_VERSION}\" ;\\\n  fi; \\\n  curl -f -LsS \\\n    https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_linux_${ARCHITECTURE}.zip -o ./terraform.zip; \\\n  unzip ./terraform.zip ; \\\n  rm -f ./terraform.zip ; \\\n  chmod +x ./terraform ; \\\n  mv ./terraform /usr/bin/terraform\n\n# Get Terragrunt by a specific version or search for the latest one\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\nRUN if [ \"${TARGETPLATFORM}\" = \"linux/amd64\" ]; then ARCHITECTURE=amd64; elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \\\n  if [ \"${TG_VERSION}\" = \"latest\" ]; then \\\n    VERSION=\"$( curl -f -LsS https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r .name)\" ; \\\n  else \\\n    VERSION=\"v${TG_VERSION}\" ;\\\n  fi; \\\n  curl -f -LsS \\\n    https://github.com/gruntwork-io/terragrunt/releases/download/${VERSION}/terragrunt_linux_${ARCHITECTURE} -o /usr/bin/terragrunt; \\\n  chmod +x /usr/bin/terragrunt\n\n# Get latest TFLint\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\nRUN if [ \"${TARGETPLATFORM}\" = \"linux/amd64\" ]; then ARCHITECTURE=amd64; elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \\\n  DOWNLOAD_URL=\"$( curl -f -LsS https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E \"https://.+?_linux_${ARCHITECTURE}.zip\")\" ; \\\n  curl -f -LsS \"${DOWNLOAD_URL}\" -o tflint.zip; \\\n  unzip tflint.zip ; \\\n  rm -f tflint.zip ; \\\n  chmod +x tflint ; \\\n  mv tflint /usr/bin/tflint\n\n# Get latest hcledit\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\nRUN if [ \"${SLIM}\" = \"no\" ]; then \\\n    if [ \"${TARGETPLATFORM}\" = \"linux/amd64\" ]; then ARCHITECTURE=amd64; elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \\\n    DOWNLOAD_URL=\"$( curl -f -LsS https://api.github.com/repos/minamijoyo/hcledit/releases/latest | grep -o -E \"https://.+?_linux_${ARCHITECTURE}.tar.gz\")\" ; \\\n    curl -f -LsS \"${DOWNLOAD_URL}\" -o hcledit.tar.gz; \\\n    tar -xf hcledit.tar.gz ; \\\n    rm -f hcledit.tar.gz ; \\\n    chmod +x hcledit ; \\\n    chown \"$(id -u):$(id -g)\" hcledit ; \\\n    mv hcledit /usr/bin/hcledit ;elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi \\\n\n\n\n\n\n\n\n  fi\n\n# Get latest sops\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\nRUN if [ \"${SLIM}\" = \"no\" ]; then \\\n    if [ \"${TARGETPLATFORM}\" = \"linux/amd64\" ]; then ARCHITECTURE=amd64; elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \\\n    DOWNLOAD_URL=\"$( curl -f -LsS https://api.github.com/repos/mozilla/sops/releases/latest | grep -o -E \"https://.+?\\.linux.${ARCHITECTURE}\")\" ; \\\n    curl -f -LsS \"${DOWNLOAD_URL}\" -o /usr/bin/sops; \\\n    chmod +x /usr/bin/sops ;elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi \\\n\n\n\n  fi\n\n# Cloud CLIs\n# AWS\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\n# hadolint ignore=DL3013\nRUN if [ \"${AWS}\" = \"yes\" ]; then \\\n    xargs -n 1 -a /tmp/pip_aws_requirements.txt pip3 install --no-cache-dir ; \\\n    if [ \"${TARGETPLATFORM}\" = \"linux/amd64\" ]; then ARCHITECTURE=x86_64; elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=aarch64; else ARCHITECTURE=x86_64; fi ; \\\n    if [ \"${AWS_VERSION}\" = \"latest\" ]; then VERSION=\"\"; else VERSION=\"-${AWS_VERSION}\"; fi ; \\\n    curl -f -LsS \"https://awscli.amazonaws.com/awscli-exe-linux-${ARCHITECTURE}${VERSION}.zip\" -o /tmp/awscli.zip; \\\n    mkdir -p /usr/local/awscli ; \\\n    unzip -q /tmp/awscli.zip -d /usr/local/awscli ; \\\n    /usr/local/awscli/aws/install ;elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=aarch64; else ARCHITECTURE=x86_64; fi \\\n\n\n\n\n\n  fi\n\n# GCP\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\n# hadolint ignore=SC1091\nRUN if [ \"${GCP}\" = \"yes\" ]; then \\\n    if [ \"${TARGETPLATFORM}\" = \"linux/amd64\" ]; then ARCHITECTURE=x86_64; elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm; else ARCHITECTURE=x86_64; fi ; \\\n    curl -f -LsS \"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCP_VERSION}-linux-${ARCHITECTURE}.tar.gz\" -o google-cloud-sdk.tar.gz; \\\n    tar -xf google-cloud-sdk.tar.gz ; \\\n    rm -f google-cloud-sdk.tar.gz ; \\\n    ./google-cloud-sdk/install.sh \\\n      --usage-reporting false \\\n      --command-completion true \\\n      --path-update true \\\n      --quiet ; \\\n    /google-cloud-sdk/bin/gcloud config set component_manager/disable_update_check true ; \\\n    /google-cloud-sdk/bin/gcloud config set metrics/environment github_docker_image ;elif [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then ARCHITECTURE=arm; else ARCHITECTURE=x86_64; fi \\\n\n\n\n\n\n\n\n\n\n\n  fi\n\n# Azure\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\n# hadolint ignore=DL3013\nRUN if [ \"${AZURE}\" = \"yes\" ]; then \\\n    pip3 install --no-cache-dir --upgrade pip ;\\\n    SODIUM_INSTALL=system pip3 install --no-cache-dir -r /tmp/pip_azure_requirements.txt ;\\\n  fi\n\n# Scripts, configs and cleanup\nCOPY fmt/format-hcl fmt/fmt.sh fmt/terragrunt-fmt.sh show-versions.sh /usr/bin/\nSHELL [\"/bin/bash\", \"-euxo\", \"pipefail\", \"-c\"]\nRUN chmod +x \\\n    /usr/bin/format-hcl \\\n    /usr/bin/fmt.sh \\\n    /usr/bin/terragrunt-fmt.sh \\\n    /usr/bin/show-versions.sh ;\\\n  # Cleanup\n  rm -rf /var/cache/* ;\\\n  rm -rf /root/.cache/* ;\\\n  rm -rf /tmp/*\n\n# Labels for http://label-schema.org/rc1/#build-time-labels\n# And for https://github.com/opencontainers/image-spec/blob/master/annotations.md\n# And for https://help.github.com/en/actions/building-actions/metadata-syntax-for-github-actions\nARG NAME=\"IaaC dockerized framework for Terraform/Terragrunt\"\nARG DESCRIPTION=\"Docker image with Terraform v${TF_VERSION}, Terragrunt v${TG_VERSION} and all needed components to easily manage cloud infrastructure.\"\nARG REPO_URL=\"https://github.com/devops-infra/docker-terragrunt\"\nARG AUTHOR=\"Krzysztof Szyper <biotyk@mail.com>\"\nARG HOMEPAGE=\"https://christophshyper.github.io/\"\nARG BUILD_DATE=2020-04-01T00:00:00Z\nARG VCS_REF=abcdef1\nARG VERSION=\"tf-${TF_VERSION}-tg-${TG_VERSION}\"\nLABEL \\\n  org.label-schema.build-date=\"${BUILD_DATE}\" \\\n  org.label-schema.name=\"${NAME}\" \\\n  org.label-schema.description=\"${DESCRIPTION}\" \\\n  org.label-schema.usage=\"README.md\" \\\n  org.label-schema.url=\"${HOMEPAGE}\" \\\n  org.label-schema.vcs-url=\"${REPO_URL}\" \\\n  org.label-schema.vcs-ref=\"${VCS_REF}\" \\\n  org.label-schema.vendor=\"${AUTHOR}\" \\\n  org.label-schema.version=\"${VERSION}\" \\\n  org.label-schema.schema-version=\"1.0\"\t\\\n  org.opencontainers.image.created=\"${BUILD_DATE}\" \\\n  org.opencontainers.image.authors=\"${AUTHOR}\" \\\n  org.opencontainers.image.url=\"${HOMEPAGE}\" \\\n  org.opencontainers.image.documentation=\"${REPO_URL}/blob/master/README.md\" \\\n  org.opencontainers.image.source=\"${REPO_URL}\" \\\n  org.opencontainers.image.version=\"${VERSION}\" \\\n  org.opencontainers.image.revision=\"${VCS_REF}\" \\\n  org.opencontainers.image.vendor=\"${AUTHOR}\" \\\n  org.opencontainers.image.licenses=\"MIT\" \\\n  org.opencontainers.image.title=\"${NAME}\" \\\n  org.opencontainers.image.description=\"${DESCRIPTION}\" \\\n  maintainer=\"${AUTHOR}\" \\\n  repository=\"${REPO_URL}\"\n\nWORKDIR /data\nCMD [\"show-versions.sh\"]\n"
}