diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/devops-infra/docker-terragrunt/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/devops-infra/docker-terragrunt/Dockerfile/repaired.Dockerfile
index 91a710a..cd95dcc 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/devops-infra/docker-terragrunt/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/devops-infra/docker-terragrunt/Dockerfile/repaired.Dockerfile
@@ -62,61 +62,71 @@ RUN if [ "${SLIM}" = "no" ]; then \
 
 # Get Terraform by a specific version or search for the latest one
 SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]
-RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ;\
+RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \
   if [ "${TF_VERSION}" = "latest" ]; then \
-    VERSION="$( curl -LsS https://releases.hashicorp.com/terraform/ | grep -Eo '/[.0-9]+/' | grep -Eo '[.0-9]+' | sort -V | tail -1 )" ;\
+    VERSION="$( curl -f -LsS https://releases.hashicorp.com/terraform/ | grep -Eo '/[.0-9]+/' | grep -Eo '[.0-9]+' | sort -V | tail -1)" ; \
   else \
     VERSION="${TF_VERSION}" ;\
-  fi ;\
-  curl -LsS \
-    https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_linux_${ARCHITECTURE}.zip -o ./terraform.zip ;\
-  unzip ./terraform.zip ;\
-  rm -f ./terraform.zip ;\
-  chmod +x ./terraform ;\
+  fi; \
+  curl -f -LsS \
+    https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_linux_${ARCHITECTURE}.zip -o ./terraform.zip; \
+  unzip ./terraform.zip ; \
+  rm -f ./terraform.zip ; \
+  chmod +x ./terraform ; \
   mv ./terraform /usr/bin/terraform
 
 # Get Terragrunt by a specific version or search for the latest one
 SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]
-RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ;\
+RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \
   if [ "${TG_VERSION}" = "latest" ]; then \
-    VERSION="$( curl -LsS https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r .name )" ;\
+    VERSION="$( curl -f -LsS https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r .name)" ; \
   else \
     VERSION="v${TG_VERSION}" ;\
-  fi ;\
-  curl -LsS \
-    https://github.com/gruntwork-io/terragrunt/releases/download/${VERSION}/terragrunt_linux_${ARCHITECTURE} -o /usr/bin/terragrunt ;\
+  fi; \
+  curl -f -LsS \
+    https://github.com/gruntwork-io/terragrunt/releases/download/${VERSION}/terragrunt_linux_${ARCHITECTURE} -o /usr/bin/terragrunt; \
   chmod +x /usr/bin/terragrunt
 
 # Get latest TFLint
 SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]
-RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ;\
-  DOWNLOAD_URL="$( curl -LsS https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_${ARCHITECTURE}.zip" )" ;\
-  curl -LsS "${DOWNLOAD_URL}" -o tflint.zip ;\
-  unzip tflint.zip ;\
-  rm -f tflint.zip ;\
-  chmod +x tflint ;\
+RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \
+  DOWNLOAD_URL="$( curl -f -LsS https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_${ARCHITECTURE}.zip")" ; \
+  curl -f -LsS "${DOWNLOAD_URL}" -o tflint.zip; \
+  unzip tflint.zip ; \
+  rm -f tflint.zip ; \
+  chmod +x tflint ; \
   mv tflint /usr/bin/tflint
 
 # Get latest hcledit
 SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]
 RUN if [ "${SLIM}" = "no" ]; then \
-    if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ;\
-    DOWNLOAD_URL="$( curl -LsS https://api.github.com/repos/minamijoyo/hcledit/releases/latest | grep -o -E "https://.+?_linux_${ARCHITECTURE}.tar.gz" )" ;\
-    curl -LsS "${DOWNLOAD_URL}" -o hcledit.tar.gz ;\
-    tar -xf hcledit.tar.gz ;\
-    rm -f hcledit.tar.gz ;\
-    chmod +x hcledit ;\
-    chown "$(id -u):$(id -g)" hcledit ;\
-    mv hcledit /usr/bin/hcledit ;\
+    if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \
+    DOWNLOAD_URL="$( curl -f -LsS https://api.github.com/repos/minamijoyo/hcledit/releases/latest | grep -o -E "https://.+?_linux_${ARCHITECTURE}.tar.gz")" ; \
+    curl -f -LsS "${DOWNLOAD_URL}" -o hcledit.tar.gz; \
+    tar -xf hcledit.tar.gz ; \
+    rm -f hcledit.tar.gz ; \
+    chmod +x hcledit ; \
+    chown "$(id -u):$(id -g)" hcledit ; \
+    mv hcledit /usr/bin/hcledit ;elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi \
+
+
+
+
+
+
+
   fi
 
 # Get latest sops
 SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]
 RUN if [ "${SLIM}" = "no" ]; then \
-    if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ;\
-    DOWNLOAD_URL="$( curl -LsS https://api.github.com/repos/mozilla/sops/releases/latest | grep -o -E "https://.+?\.linux.${ARCHITECTURE}" )" ;\
-    curl -LsS "${DOWNLOAD_URL}" -o /usr/bin/sops ;\
-    chmod +x /usr/bin/sops ;\
+    if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=amd64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi ; \
+    DOWNLOAD_URL="$( curl -f -LsS https://api.github.com/repos/mozilla/sops/releases/latest | grep -o -E "https://.+?\.linux.${ARCHITECTURE}")" ; \
+    curl -f -LsS "${DOWNLOAD_URL}" -o /usr/bin/sops; \
+    chmod +x /usr/bin/sops ;elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm64; else ARCHITECTURE=amd64; fi \
+
+
+
   fi
 
 # Cloud CLIs
@@ -124,30 +134,45 @@ RUN if [ "${SLIM}" = "no" ]; then \
 SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]
 # hadolint ignore=DL3013
 RUN if [ "${AWS}" = "yes" ]; then \
-    xargs -n 1 -a /tmp/pip_aws_requirements.txt pip3 install --no-cache-dir ;\
-    if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=x86_64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=aarch64; else ARCHITECTURE=x86_64; fi ;\
-    if [ "${AWS_VERSION}" = "latest" ]; then VERSION=""; else VERSION="-${AWS_VERSION}"; fi ;\
-    curl -LsS "https://awscli.amazonaws.com/awscli-exe-linux-${ARCHITECTURE}${VERSION}.zip" -o /tmp/awscli.zip ;\
-    mkdir -p /usr/local/awscli ;\
-    unzip -q /tmp/awscli.zip -d /usr/local/awscli ;\
-    /usr/local/awscli/aws/install ;\
+    xargs -n 1 -a /tmp/pip_aws_requirements.txt pip3 install --no-cache-dir ; \
+    if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=x86_64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=aarch64; else ARCHITECTURE=x86_64; fi ; \
+    if [ "${AWS_VERSION}" = "latest" ]; then VERSION=""; else VERSION="-${AWS_VERSION}"; fi ; \
+    curl -f -LsS "https://awscli.amazonaws.com/awscli-exe-linux-${ARCHITECTURE}${VERSION}.zip" -o /tmp/awscli.zip; \
+    mkdir -p /usr/local/awscli ; \
+    unzip -q /tmp/awscli.zip -d /usr/local/awscli ; \
+    /usr/local/awscli/aws/install ;elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=aarch64; else ARCHITECTURE=x86_64; fi \
+
+
+
+
+
   fi
 
 # GCP
 SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]
 # hadolint ignore=SC1091
 RUN if [ "${GCP}" = "yes" ]; then \
-    if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=x86_64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm; else ARCHITECTURE=x86_64; fi ;\
-    curl -LsS "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCP_VERSION}-linux-${ARCHITECTURE}.tar.gz" -o google-cloud-sdk.tar.gz ;\
-    tar -xf google-cloud-sdk.tar.gz ;\
-    rm -f google-cloud-sdk.tar.gz ;\
+    if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then ARCHITECTURE=x86_64; elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm; else ARCHITECTURE=x86_64; fi ; \
+    curl -f -LsS "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCP_VERSION}-linux-${ARCHITECTURE}.tar.gz" -o google-cloud-sdk.tar.gz; \
+    tar -xf google-cloud-sdk.tar.gz ; \
+    rm -f google-cloud-sdk.tar.gz ; \
     ./google-cloud-sdk/install.sh \
       --usage-reporting false \
       --command-completion true \
       --path-update true \
-      --quiet ;\
-    /google-cloud-sdk/bin/gcloud config set component_manager/disable_update_check true ;\
-    /google-cloud-sdk/bin/gcloud config set metrics/environment github_docker_image ;\
+      --quiet ; \
+    /google-cloud-sdk/bin/gcloud config set component_manager/disable_update_check true ; \
+    /google-cloud-sdk/bin/gcloud config set metrics/environment github_docker_image ;elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then ARCHITECTURE=arm; else ARCHITECTURE=x86_64; fi \
+
+
+
+
+
+
+
+
+
+
   fi
 
 # Azure