{
  "startTime": 1674214979914,
  "endTime": 1674214981304,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 234,
        "lineEnd": 234,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 54,
        "columnStart": 22,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 119,
        "lineEnd": 121,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 54,
        "columnStart": 22,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 22,
        "columnEnd": 83
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 119,
        "lineEnd": 121,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 186,
        "lineEnd": 215,
        "columnStart": 22,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file describes the standard way to build Docker, using docker\n#\n# Usage:\n#\n# # Use make to build a development environment image and run it in a container.\n# # This is slow the first time.\n# make BIND_DIR=. shell\n#\n# The following commands are executed inside the running container.\n\n# # Make a dockerd binary.\n# # hack/make.sh binary\n#\n# # Install dockerd to /usr/local/bin\n# # make install\n#\n# # Run unit tests\n# # hack/test/unit\n#\n# # Run tests e.g. integration, py\n# # hack/make.sh binary test-integration test-docker-py\n#\n# # Publish a release:\n# docker run --privileged \\\n#  -e AWS_S3_BUCKET=baz \\\n#  -e AWS_ACCESS_KEY=foo \\\n#  -e AWS_SECRET_KEY=bar \\\n#  -e GPG_PASSPHRASE=gloubiboulga \\\n#  docker hack/release.sh\n#\n# Note: AppArmor used to mess with privileged mode, but this is no longer\n# the case. Therefore, you don't have to disable it anymore.\n#\n\nFROM golang:1.10.1 AS base\n# FIXME(vdemeester) this is kept for other script depending on it to not fail right away\n# Remove this once the other scripts uses something else to detect the version\nENV GO_VERSION 1.10.1\n# allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\n\nFROM base AS criu\n# Install CRIU for checkpoint/restore support\nENV CRIU_VERSION 3.6\n# Install dependancy packages specific to criu\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\tlibnet-dev \\\n\tlibprotobuf-c0-dev \\\n\tlibprotobuf-dev \\\n\tlibnl-3-dev \\\n\tlibcap-dev \\\n\tprotobuf-compiler \\\n\tprotobuf-c-compiler \\\n\tpython-protobuf \\\n\t&& mkdir -p /usr/src/criu \\\n\t&& curl -f -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 \\\n\t&& cd /usr/src/criu \\\n\t&& make \\\n\t&& make PREFIX=/build/ install-criu && rm -rf /usr/src/criu && rm -rf /var/lib/apt/lists/*;\n\nFROM base AS registry\n# Install two versions of the registry. The first is an older version that\n# only supports schema1 manifests. The second is a newer version that supports\n# both. This allows integration-cli tests to cover push/pull with both schema1\n# and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd\nENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n\t&& (cd \"$GOPATH/src/github.com/docker/distribution\" && git checkout -q \"$REGISTRY_COMMIT\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \\\n\t\tgo build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry \\\n\t&& case $(dpkg --print-architecture) in \\\n\t\tamd64|ppc64*|s390x) \\\n\t\t(cd \"$GOPATH/src/github.com/docker/distribution\" && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\"); \\\n\t\tGOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\"; \\\n\t\t\tgo build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; \\\n\t\t;; \\\n\t   esac \\\n\t&& rm -rf \"$GOPATH\"\n\n\n\nFROM base AS docker-py\n# Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f\nRUN git clone https://github.com/docker/docker-py.git /build \\\n\t&& cd /build \\\n\t&& git checkout -q $DOCKER_PY_COMMIT\n\n\n\nFROM base AS swagger\n# Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/go-swagger/go-swagger.git \"$GOPATH/src/github.com/go-swagger/go-swagger\" \\\n\t&& (cd \"$GOPATH/src/github.com/go-swagger/go-swagger\" && git checkout -q \"$GO_SWAGGER_COMMIT\") \\\n\t&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger \\\n\t&& rm -rf \"$GOPATH\"\n\n\nFROM base AS frozen-images\nRUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n# Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /\nRUN /download-frozen-image-v2.sh /build \\\n\tbuildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 \\\n\tbusybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 \\\n\tbusybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 \\\n\tdebian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 \\\n\thello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c\n# See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n\n# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd\nFROM base AS runtime-dev\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\tlibapparmor-dev \\\n\tlibseccomp-dev && rm -rf /var/lib/apt/lists/*;\n\n\nFROM base AS tomlv\nENV INSTALL_BINARY_NAME=tomlv\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n\nFROM base AS vndr\nENV INSTALL_BINARY_NAME=vndr\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n\nFROM base AS containerd\nRUN apt-get update && apt-get install --no-install-recommends -y btrfs-tools && rm -rf /var/lib/apt/lists/*;\nENV INSTALL_BINARY_NAME=containerd\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n\nFROM base AS proxy\nENV INSTALL_BINARY_NAME=proxy\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n\nFROM base AS gometalinter\nENV INSTALL_BINARY_NAME=gometalinter\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n\nFROM base AS dockercli\nENV INSTALL_BINARY_NAME=dockercli\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n\nFROM runtime-dev AS runc\nENV INSTALL_BINARY_NAME=runc\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n\nFROM base AS tini\nRUN apt-get update && apt-get install --no-install-recommends -y cmake vim-common && rm -rf /var/lib/apt/lists/*;\nCOPY hack/dockerfile/install/install.sh ./install.sh\nENV INSTALL_BINARY_NAME=tini\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n\n\n\n# TODO: Some of this is only really needed for testing, it would be nice to split this up\nFROM runtime-dev AS dev\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\n# Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH\nRUN echo \"source /usr/share/bash-completion/bash_completion\" >> /etc/bash.bashrc\nRUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker\nRUN ldconfig\n# This should only install packages that are specifically needed for the dev environment and nothing else\n# Do you really need to add another package here? Can it be done in a different build stage?\nRUN apt-get update && apt-get install -y \\\n\tapparmor \\\n\taufs-tools \\\n\tbash-completion \\\n\tbtrfs-tools \\\n\tiptables \\\n\tjq \\\n\tlibdevmapper-dev \\\n\tlibudev-dev \\\n\tlibsystemd-dev \\\n\tbinutils-mingw-w64 \\\n\tg++-mingw-w64-x86-64 \\\n\tnet-tools \\\n\tpigz \\\n\tpython-backports.ssl-match-hostname \\\n\tpython-dev \\\n\tpython-mock \\\n\tpython-pip \\\n\tpython-requests \\\n\tpython-setuptools \\\n\tpython-websocket \\\n\tpython-wheel \\\n\tthin-provisioning-tools \\\n\tvim \\\n\tvim-common \\\n\txfsprogs \\\n\tzip \\\n\tbzip2 \\\n\txz-utils \\\n\t--no-install-recommends && rm -rf /var/lib/apt/lists/*;\nCOPY --from=swagger /build/swagger* /usr/local/bin/\nCOPY --from=frozen-images /build/ /docker-frozen-images\nCOPY --from=gometalinter /build/ /usr/local/bin/\nCOPY --from=tomlv /build/ /usr/local/bin/\nCOPY --from=vndr /build/ /usr/local/bin/\nCOPY --from=tini /build/ /usr/local/bin/\nCOPY --from=runc /build/ /usr/local/bin/\nCOPY --from=containerd /build/ /usr/local/bin/\nCOPY --from=proxy /build/ /usr/local/bin/\nCOPY --from=dockercli /build/ /usr/local/cli\nCOPY --from=registry /build/registry* /usr/local/bin/\nCOPY --from=criu /build/ /usr/local/\nCOPY --from=docker-py /build/ /docker-py\n# TODO: This is for the docker-py tests, which shouldn't really be needed for\n# this image, but currently CI is expecting to run this image. This should be\n# split out into a separate image, including all the `python-*` deps installed\n# above.\nRUN cd /docker-py \\\n\t&& pip install --no-cache-dir docker-pycreds==0.2.1 \\\n\t&& pip install --no-cache-dir yamllint==1.5.0 \\\n\t&& pip install --no-cache-dir -r test-requirements.txt\n\nENV PATH=/usr/local/cli:$PATH\nENV DOCKER_BUILDTAGS apparmor seccomp selinux\n# Options for hack/validate/gometalinter\nENV GOMETALINTER_OPTS=\"--deadline=2m\"\nWORKDIR /go/src/github.com/docker/docker\nVOLUME /var/lib/docker\n# Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n# Upload docker source\nCOPY . /go/src/github.com/docker/docker\n"
}