{
  "startTime": 1674254728202,
  "endTime": 1674254729509,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 5,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://github.com/uyamazak/hc-pdf-server\nFROM node:15-buster-slim as package_install\nLABEL maintainer=\"uyamazak<yu.yamazaki85@gmail.com>\"\nCOPY package.json yarn.lock /app/\nWORKDIR /app\n# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \\\n  PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable\nRUN [\"yarn\", \"install\", \"--frozen-lockfile\"]\n\n\nFROM node:15-buster-slim\n# Fastify in docker needs 0.0.0.0\n# https://github.com/fastify/fastify/issues/935\nENV HCPDF_SERVER_ADDRESS=0.0.0.0\n\n# Install fonts from debian packages https://packages.debian.org/stable/fonts/\nARG ADDITONAL_FONTS=\"\"\n\n# https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#running-puppeteer-in-docker\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y wget gnupg \\\n  && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n  && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\\n  && apt-get update && apt-get upgrade -y \\\n  && apt-get install -y google-chrome-stable ${ADDITONAL_FONTS} fonts-freefont-ttf libxss1 \\\n  --no-install-recommends \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Install fonts from files\nCOPY fonts/* /usr/share/fonts/\nRUN fc-cache -fv\n\n# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \\\n  PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable\n\nEXPOSE 8080\n\n# Install puppeteer so it's available in the container.\nRUN groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \\\n  && mkdir -p /home/pptruser/Downloads \\\n  && mkdir -p /app \\\n  && chown -R pptruser:pptruser /home/pptruser \\\n  && chown -R pptruser:pptruser /app\n\nWORKDIR /app\nCOPY --chown=pptruser:pptruser --from=package_install /app/node_modules /app/node_modules\nCOPY --chown=pptruser:pptruser src/ /app/src\nCOPY --chown=pptruser:pptruser test/ /app/test\nCOPY --chown=pptruser:pptruser package.json \\\n  tsconfig.json \\\n  tsconfig.build.json \\\n  tsconfig.eslint.json \\\n  .prettierrc.js \\\n  /app/\nRUN yarn build\n\n# Run everything after as non-privileged user.\nUSER pptruser\n\nCMD [\"yarn\", \"start\"]\n"
}