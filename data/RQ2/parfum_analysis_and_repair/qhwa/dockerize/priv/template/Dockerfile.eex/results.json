{
  "startTime": 1674250018466,
  "endTime": 1674250019136,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 18,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 50,
        "columnStart": 2,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 18,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 50,
        "columnStart": 2,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile was generated by [dockerize](https://hex.pm/packages/dockerize)\n# at <%= DateTime.utc_now() |> to_string() %>\n<%= if gen_command do %>\n# with `<%= gen_command %>`\n<% end %>\n\n# It leverages multi-stage-building of docker to build as fast as possible.\n# How stages work together: https://user-images.githubusercontent.com/43009/84713978-e59a2700-af9e-11ea-9bbd-9dcf28d23da7.png\n\n# You are free to edit this dockerfile.\n\n# -----------------------------------\n# Base Image #1: Elixir Builder\n# - This is used for building later\n#   docker image, with a development\n#   toolset.\n# -----------------------------------\nFROM hexpm/elixir:<%= elixir_version %> AS elixir-builder\n\nRUN apt update && apt install --no-install-recommends -y git build-essential && rm -rf /var/lib/apt/lists/*;\n\n# Uncomment if you're using a hex mirror:\n# ENV HEX_MIRROR=https://my_hex_mirror\n\nRUN mix local.hex --force\nRUN mix local.rebar --force\n\nRUN mkdir -p /root/.config/rebar3 && \\\n  echo '{plugins, [rebar3_hex]}.' > /root/.config/rebar3/rebar.config\n\nRUN /root/.mix/rebar3 plugins upgrade rebar3_hex\n\n# -----------------------------------\n# Base Image #2: Elixir Runner\n# - Elixir Application Runner\n#   This is used as a simple operating\n#   system image to host your\n#   application\n# -----------------------------------\nFROM debian:buster as elixir-runner\n\n# You can add any libraries required by your application\n# here:\n\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y \\\n\n  libssl-dev \\\n  locales && rm -rf /var/lib/apt/lists/*;\n\nRUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \\\n    locale-gen\nENV LANG en_US.UTF-8 \nENV LANGUAGE en_US:en \nENV LC_ALL en_US.UTF-8\n\n# -----------------------------------\n# - stage: install\n# - job: dependencies\n# -----------------------------------\nFROM elixir-builder AS deps\n\nENV MIX_ENV=prod\n\n# Uncomment if you're using a hex mirror:\n# ENV HEX_MIRROR=https://my_hex_mirror\n\nWORKDIR /src\n\nCOPY config /src/config\nCOPY mix.exs mix.lock /src/\n\n# If inside an umbrella project, you also need to add all `mix.exs`\n# e.g\n# COPY apps/my_app_1/mix.exs /src/apps/my_app_1/mix.exs\n# COPY apps/my_app_2/mix.exs /src/apps/my_app_2/mix.exs\n\n# If you're using your own organization on hex.pm, uncomment the\n# following lines:\n# ARG HEX_AUTH_KEY\n# RUN mix hex.organization auth my_org --key ${HEX_AUTH_KEY}\n\nRUN mix deps.get --only $MIX_ENV\n\n# -----------------------------------\n# - stage: build\n# - job: compile_deps\n# -----------------------------------\nFROM deps AS compile_deps\nWORKDIR /src\n\nENV MIX_ENV=prod\nRUN mix deps.compile\n\n# -----------------------------------\n# - stage: build\n# - job: compile_app\n# -----------------------------------\nFROM compile_deps AS compile_app\nWORKDIR /src\n\nENV MIX_ENV=prod\n\nCOPY lib/ ./lib\n\n<%= if phoenix_assets do %>\nCOPY priv/ ./priv\n<% else %>\n# You may add other directories crucial for compiling, for example:\n# COPY priv/ ./priv\n<% end %>\n\nRUN mix compile\n\n<%= if phoenix_assets do %>\n# ## -- BEGIN assets building with Node.js, NPM and webpack\n# # -----------------------------------\n# # - stage: build with NPM\n# # - job: assets\n# # - uncomment if you're using Nodejs,\n# #   NPM and webpack\n# # -----------------------------------\n# FROM node:10-buster-slim as assets\n# WORKDIR /src/assets\n# ENV NODE_ENV=prod\n# ENV NPM_REGISTRY=https://registry.npmjs.com/\n# COPY assets/package.json assets/package-lock.json ./\n# COPY --from=deps /src/deps/phoenix ../deps/phoenix\n# COPY --from=deps /src/deps/phoenix_html ../deps/phoenix_html\n# RUN npm \\\n#   --registry ${NPM_REGISTRY} \\\n#   --prefer-offline \\\n#   --no-audit \\\n#   ci\n# COPY assets/ ./\n# RUN npm run deploy\n#\n# # -----------------------------------\n# # - stage: build\n# # - job: digest\n# # -----------------------------------\n# FROM compile_deps AS digest\n# WORKDIR /src\n# ENV MIX_ENV=prod\n# COPY --from=assets /src/priv ./priv\n# RUN mix phx.digest\n# ## -- END building assets with Node.js, NPM, and Webpack\n\n# -----------------------------------\n# - stage: build with esbuild\n# - job: assets\n# -----------------------------------\n## -- BEGIN building assets with esbuild\nFROM compile_deps AS digest\nWORKDIR /src\nCOPY assets/ ./assets\nENV MIX_ENV=prod\nRUN mix assets.deploy\n## -- END building assets with esbuild\n<% end %>\n\n# -----------------------------------\n# - stage: release\n# - job: mix_release\n# -----------------------------------\nFROM compile_app AS mix_release\n\nWORKDIR /src\n\nENV MIX_ENV=prod\n\n<%= if phoenix_assets do %>\nCOPY --from=digest /src/priv/static ./priv/static\n<% end %>\n\n# uncomment if you have customized release config:\n# COPY rel ./rel\n\nRUN mix release --path /app --quiet\n\n# -----------------------------------\n# - stage: release\n# - job: release_image\n# -----------------------------------\nFROM elixir-runner AS release_image\n\n# If you need to inject the app revision into the container,\n# uncomment below:\n# ARG APP_REVISION=latest\n# ENV APP_REVISION=${APP_REVISION}\n\nENV MIX_ENV=prod\n\nUSER nobody\n\nCOPY --from=mix_release --chown=nobody:nogroup /app /app\n\nWORKDIR /app\nENTRYPOINT [\"/app/bin/<%= app %>\"]\nCMD [\"start\"]\n"
}