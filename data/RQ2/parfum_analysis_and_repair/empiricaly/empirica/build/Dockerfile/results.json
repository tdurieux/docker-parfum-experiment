{
  "startTime": 1674219412539,
  "endTime": 1674219413631,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ghcr.io/gythialy/golang-cross:v1.18.3\n\nARG BUILD_DATE\nARG BUILD_SHA\nARG BUILD_NUM\nARG VERSION\n\n# Install Node.js and NPM\n##########################\n\n# bash will load volta() function via .bashrc\n# using $VOLTA_HOME/load.sh\nSHELL [\"/bin/bash\", \"-c\"]\n\n# since we're starting non-interactive shell,\n# we wil need to tell bash to load .bashrc manually\nENV BASH_ENV ~/.bashrc\n# needed by volta() function\nENV VOLTA_HOME /root/.volta\n# make sure packages managed by volta will be in PATH\nENV PATH $VOLTA_HOME/bin:$PATH\n\n# install volta\nRUN curl -f https://get.volta.sh | bash\nRUN volta install node\n\nRUN go install github.com/go-bindata/go-bindata/go-bindata@latest\n\nRUN mkdir -p /build\nWORKDIR /build\n\nCOPY ./lib/admin-ui ./lib/admin-ui\n\nWORKDIR /build/lib/admin-ui\nRUN npm install && npm run build && npm cache clean --force;\n\nWORKDIR /build\n\nCOPY . .\n\nWORKDIR /build/internal/templates\nRUN go-bindata -ignore=\"node_modules|trigger|yarn-error.log|.DS_Store\" -pkg templates -prefix source source/...\n\nWORKDIR /build\n\nRUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -tags \"static_build\" -ldflags \"-extldflags=-static -s -w -X 'github.com/empiricaly/empirica/internal/build.Commit=$BUILD_SHA' -X 'github.com/empiricaly/empirica/internal/build.Version=$VERSION' -X 'github.com/empiricaly/empirica/internal/build.BuildNum=$BUILD_NUM' -X 'github.com/empiricaly/empirica/internal/build.Time=$BUILD_DATE'\" -o /out/empirica-linux-amd64 ./cmds/empirica\nRUN CC=o64-clang CXX=o64-clang++ CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -ldflags \"-s -w -X 'github.com/empiricaly/empirica/internal/build.Commit=$BUILD_SHA' -X 'github.com/empiricaly/empirica/internal/build.Version=$VERSION' -X 'github.com/empiricaly/empirica/internal/build.BuildNum=$BUILD_NUM' -X 'github.com/empiricaly/empirica/internal/build.Time=$BUILD_DATE'\" -o /out/empirica-darwin-amd64 ./cmds/empirica\nRUN CC=aarch64-apple-darwin20.2-clang CXX=aarch64-apple-darwin20.2-clang++ CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -ldflags \"-s -w -X 'github.com/empiricaly/empirica/internal/build.Commit=$BUILD_SHA' -X 'github.com/empiricaly/empirica/internal/build.Version=$VERSION' -X 'github.com/empiricaly/empirica/internal/build.BuildNum=$BUILD_NUM' -X 'github.com/empiricaly/empirica/internal/build.Time=$BUILD_DATE'\" -o /out/empirica-darwin-arm64 ./cmds/empirica\n# RUN CC=CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -tags \"static_build\" -ldflags \"-extldflags=-static -buildmode=exe -s -w -X 'github.com/empiricaly/empirica/internal/build.Commit=$BUILD_SHA' -X 'github.com/empiricaly/empirica/internal/build.Version=$VERSION' -X 'github.com/empiricaly/empirica/internal/build.BuildNum=$BUILD_NUM' -X 'github.com/empiricaly/empirica/internal/build.Time=$BUILD_DATE'\" -o /out/empirica-windows-amd64.exe ./cmds/empirica\n\nENTRYPOINT []\n"
}