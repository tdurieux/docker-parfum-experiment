{
  "startTime": 1674250173239,
  "endTime": 1674250173975,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Production Dockerfile for Django app\n\nFROM {{ python_image(cookiecutter.python_version, DEBIAN) }} as base\n\n# Use non-interactive frontend for debconf\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\nENV DJANGO_PRODUCTION_MODE 1\nENV DJANGO_SETTINGS_MODULE settings.cloud\nENV DJANGO_DEBUG 0\nENV PYTHONPYCACHEPREFIX /.pycache\n\n# Let all *.pyc files stay within the container, for Python >= 3.8\nRUN mkdir -p $PYTHONPYCACHEPREFIX\n\n# Create a directory for the logs\nRUN mkdir -p /var/log/{{cookiecutter.repo_name}}\n\nCOPY ./wait-for-it.sh /usr/bin/\n\n# Install system requirements\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends build-essential gettext libpq-dev zlib1g-dev libjpeg62-turbo-dev wget && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV POETRY_HOME \"$HOME/.poetry\"\nENV POETRY_NO_INTERACTION 1\nENV POETRY_VIRTUALENVS_CREATE 0\nENV PATH=\"$POETRY_HOME/bin:$PATH\"\n\nRUN wget https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py && \\\n    python3 get-poetry.py\n\nCOPY pyproject.toml /\nCOPY poetry.lock /\n\n# Install all non-dev dependencies from poetry.lock\nRUN poetry install --no-dev\n\n# Copy code\nCOPY ./{{cookiecutter.repo_name}} /app\n\n# Set the default directory where CMD will execute\nWORKDIR /app\n\n# Compile translations to .mo files\nRUN DJANGO_DOCKER_BUILD=True python manage.py compilemessages\n\n{%- if cookiecutter.frontend_style == WEBAPP %}\n\n# Based on Node {{ cookiecutter.node_version }} Debian\nFROM node:{{ cookiecutter.node_version }}-buster-slim as node_builder\n\n# Set the default directory where CMD will execute\nWORKDIR /app\n\n# Install system requirements\n# Use non-interactive frontend for debconf\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Install system requirements\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends git python build-essential && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy some utility files\nCOPY ./webapp/.babelrc .\nCOPY ./webapp/.eslintrc.js .\nCOPY ./webapp/.eslintignore .\n\n# Install node requirements\nCOPY ./webapp/package.json .\nCOPY ./webapp/yarn.lock .\n\n# Install node dependencies\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\n# Copy app assets\nCOPY ./webapp/webapp /app/webapp\nCOPY ./webapp/static /app/static\n\n# Build node stuff\nRUN yarn build\n\n# Resume Django build\nFROM base\n\n# Copy static files\nCOPY ./webapp/static /app/static\n\n# Copy all from node image\nCOPY --from=node_builder /app/webapp/build /app/webapp/build\nCOPY --from=node_builder /app/webapp/webpack-stats.json /app/webapp/webpack-stats.json\n{%- endif %}\n\n# Run Gunicorn by default\nCMD bash\n"
}