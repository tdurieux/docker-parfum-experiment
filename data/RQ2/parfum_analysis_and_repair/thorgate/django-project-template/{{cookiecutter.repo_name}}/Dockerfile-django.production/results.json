{
  "startTime": 1674250523522,
  "endTime": 1674250524253,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 5,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Production Dockerfile for Django app\n\nFROM {{ python_image(cookiecutter.python_version, ALPINE) }} as base\n\nENV DJANGO_PRODUCTION_MODE 1\nENV DJANGO_SETTINGS_MODULE settings.cloud\nENV DJANGO_DEBUG 0\nENV PYTHONPYCACHEPREFIX /.pycache\n\n# Let all *.pyc files stay within the container, for Python >= 3.8\nRUN mkdir -p $PYTHONPYCACHEPREFIX\n\n# Create a directory for the logs\nRUN mkdir -p /var/log/{{cookiecutter.repo_name}}\n\nCOPY ./wait-for-it.sh /usr/bin/\n\n# Install bash, libpq, libjpeg-turbo and gettext\n# Bash is required to support `wait-for-it.sh` script, should not add too much to docker image\nRUN apk add --no-cache bash gettext libpq libjpeg-turbo\n\n# Install build dependencies and mark them as virtual packages so they could be removed together\nRUN apk add --no-cache --virtual .build-deps \\\n    ca-certificates alpine-sdk postgresql-dev python3-dev linux-headers musl-dev \\\n    libffi-dev libxml2-dev libxslt-dev jpeg-dev zlib-dev rust cargo\n\nENV POETRY_HOME \"$HOME/.poetry\"\nENV POETRY_NO_INTERACTION 1\nENV POETRY_VIRTUALENVS_CREATE 0\nENV PATH=\"$POETRY_HOME/bin:$PATH\"\n\nRUN wget https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py && \\\n    python3 get-poetry.py\n\nCOPY pyproject.toml /\nCOPY poetry.lock /\n\n# Install all non-dev dependencies from poetry.lock\nRUN poetry install --no-dev\n\n# Find all file objects containing name `test` or compiled python files and remove them\n# Find all runtime dependencies that are marked as needed by scanelf\n# scanelf is utility to show ELF data for binary objects\n# For more info: https://wiki.gentoo.org/wiki/Hardened/PaX_Utilities#The_scanelf_application\n# Finally re-install missing run-dependencies\nRUN find /usr/local \\\n        \\( -type d -a -name test -o -name tests \\) \\\n        -o \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n        -exec rm -rf '{}' + \\\n  && runDeps=\"$( \\\n        scanelf --needed --nobanner --recursive /usr/local \\\n                | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n                | sort -u \\\n                | xargs -r apk info --installed \\\n                | sort -u \\\n    )\" \\\n  && apk add --no-cache --virtual .rundeps $runDeps\n\n# Remove build dependencies\nRUN apk del .build-deps\n\n# Copy code\nCOPY ./{{cookiecutter.repo_name}} /app\n\n# Set the default directory where CMD will execute\nWORKDIR /app\n\n# Compile translations to .mo files\nRUN DJANGO_DOCKER_BUILD=True python manage.py compilemessages\n\n# - {% if cookiecutter.frontend_style == WEBAPP %}\n\n# Based on Node {{ cookiecutter.node_version }} Alpine image\nFROM node:{{ cookiecutter.node_version }}-alpine as node_builder\n\n# Set the default directory where CMD will execute\nWORKDIR /app\n\n# Install node build dependencies\n# Not removing them as not to break fabfile logic for exporting assets\n# These can be removed with: \"RUN apk del .build-deps\"\nRUN apk add --no-cache --virtual .build-deps build-base python\n\n# Copy some utility files\nCOPY ./webapp/.babelrc .\nCOPY ./webapp/.eslintrc.js .\nCOPY ./webapp/.eslintignore .\n\n# Install node requirements\nCOPY ./webapp/package.json .\nCOPY ./webapp/yarn.lock .\n\n# Install node dependencies\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\n# Copy app assets\nCOPY ./webapp/webapp /app/webapp\nCOPY ./webapp/static /app/static\n\n# Build node stuff\nRUN yarn build\n\n# Resume Django build\nFROM base\n\n# Copy static files\nCOPY ./webapp/static /app/static\n\n# Copy all from node image\nCOPY --from=node_builder /app/webapp/build /app/webapp/build\nCOPY --from=node_builder /app/webapp/webpack-stats.json /app/webapp/webpack-stats.json\n# - {% endif %}\n\nCMD bash\n"
}