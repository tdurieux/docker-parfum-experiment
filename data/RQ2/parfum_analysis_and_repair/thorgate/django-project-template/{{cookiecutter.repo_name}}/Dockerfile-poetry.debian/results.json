{
  "startTime": 1674219425226,
  "endTime": 1674219428010,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for Poetry wrapper\n# The first build steps of this file are identical to those in the Django Dockerfile to make the build a bit faster.\n\nFROM {{ python_image(cookiecutter.python_version, DEBIAN) }}\n\nENV PYTHONPYCACHEPREFIX /.pycache\n\n# Let all *.pyc files stay within the container, for Python >= 3.8\nRUN mkdir -p $PYTHONPYCACHEPREFIX\n\n# Use non-interactive frontend for debconf\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Install system requirements\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends build-essential gettext libpq-dev zlib1g-dev libjpeg62-turbo-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy Python requirements dir and Install requirements\nRUN pip install --no-cache-dir -U pip 'setuptools<58' wheel poetry\n\nARG DPT_VENV_CACHING\n\n# if --build-arg DPT_VENV_CACHING=1, set POETRY_VIRTUALENVS_CREATE to '1' or set to null otherwise.\nENV POETRY_VIRTUALENVS_CREATE=${DPT_VENV_CACHING:+1}\n# if POETRY_VIRTUALENVS_CREATE is null, set it to '0' (or leave as is otherwise).\nENV POETRY_VIRTUALENVS_CREATE=${POETRY_VIRTUALENVS_CREATE:-0}\n\n# -- begin image-specific commands\n\n# This script provides poetry.lock checking\nCOPY scripts/poetry-check-lock.sh /\n\n# This provides a helper to generate the ENV_FOLDER value for Dockerfile-django (for venv caching)\nCOPY ./scripts/generate_path.py /generate-path.py\n\nVOLUME /src\nWORKDIR /src\n"
}