{
  "startTime": 1674249794245,
  "endTime": 1674249795305,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Development Dockerfile for Django app. Keep the first commands in sync with Dockerfile-poetry\n\nFROM {{ python_image(cookiecutter.python_version, DEBIAN) }}\n\nENV PYTHONPYCACHEPREFIX /.pycache\n\n# Let all *.pyc files stay within the container, for Python >= 3.8\nRUN mkdir -p $PYTHONPYCACHEPREFIX\n\n# Use non-interactive frontend for debconf\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Install system requirements\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends build-essential gettext libpq-dev zlib1g-dev libjpeg62-turbo-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy Python requirements dir and Install requirements\nRUN pip install --no-cache-dir -U pip 'setuptools<58' wheel poetry\n\nARG DPT_VENV_CACHING\n\n# if --build-arg DPT_VENV_CACHING=1, set POETRY_VIRTUALENVS_CREATE to '1' or set to null otherwise.\nENV POETRY_VIRTUALENVS_CREATE=${DPT_VENV_CACHING:+1}\n# if POETRY_VIRTUALENVS_CREATE is null, set it to '0' (or leave as is otherwise).\nENV POETRY_VIRTUALENVS_CREATE=${POETRY_VIRTUALENVS_CREATE:-0}\n\n# -- begin image-specific commands\n\nCOPY ./wait-for-it.sh /usr/bin/\n\nCOPY ./scripts/django-dev-entrypoint.sh /usr/bin/entrypoint.sh\n\nCOPY pyproject.toml /\nCOPY poetry.lock /\n\n# Install all dependencies from poetry.lock (dev included by default)\n#\n# Note: Install is skipped when DPT_VENV_CACHING=1\nENV DPT_VENV_CACHING=${DPT_VENV_CACHING:-''}\nRUN test \"${DPT_VENV_CACHING}\" = \"1\" && \\\n    echo \"skipped install during build\" || \\\n    poetry install\n\n# Set up PATH to include virtualenv path when DPT_VENV_CACHING is set\n#\n# When the project name or base python changes then ENV_FOLDER needs to be updated\n#  accordingly. New path can be generated with the command `make dev-venv-path`.\n#\n# See context here https://github.com/python-poetry/poetry/issues/1579#issuecomment-586020242\nENV ENV_FOLDER={{ cookiecutter.repo_name | as_hostname }}-9TtSrW0h-py{{ cookiecutter.python_version }}\nENV ENV_DIR=\"/root/.cache/pypoetry/virtualenvs/${ENV_FOLDER}\"\nENV VIRTUAL_ENV=${DPT_VENV_CACHING:+${ENV_DIR}}\nENV PATH=\"${VIRTUAL_ENV:-'/fake'}/bin:${PATH}\"\n\n# Set the default directory where CMD will execute\nWORKDIR /app\n\nCMD bash\n"
}