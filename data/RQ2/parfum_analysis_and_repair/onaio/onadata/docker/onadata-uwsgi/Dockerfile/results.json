{
  "startTime": 1674220091602,
  "endTime": 1674220092264,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 58,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9 as intermediate\n\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONUNBUFFERED 1\n\nARG optional_packages\n\n# Download public key for github.com\nRUN mkdir -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts\n\n# Install optional requirements\n# Read more on the ssh argument here: https://docs.docker.com/develop/develop-images/build_enhancements/#using-ssh-to-access-private-data-in-builds\n# hadolint ignore=DL3013\nRUN --mount=type=ssh if [ -n \"$optional_packages\" ]; then \\\n pip install --no-cache-dir ${optional_packages}; fi\n\nFROM ubuntu:20.04\nCOPY --from=intermediate /usr/local/lib/python3.9/site-packages/ /usr/local/lib/python3.9/dist-packages/\n\nARG release_version=v2.4.1\n\n# Silence configuration prompts\nENV DEBIAN_FRONTEND noninteractive\n\nENV PYTHONUNBUFFERED 1\n\nENV DJANGO_SETTINGS_MODULE onadata.settings.docker\n\n# Install service dependencies\nRUN apt-get update -q &&\\\n    apt-get install -y --no-install-recommends software-properties-common \\\n        binutils \\\n        libproj-dev \\\n        gdal-bin \\\n        memcached \\\n        libmemcached-dev \\\n        build-essential \\\n        supervisor \\\n        python3.9 \\\n        python3-dev \\\n        python3-pip \\\n        python3-setuptools \\\n        git \\\n        libssl-dev \\\n        libpq-dev \\\n        gfortran \\\n        libatlas-base-dev \\\n        libjpeg-dev \\\n        libxml2-dev \\\n        libxslt1-dev \\\n        libpython3.9-dev \\\n        zlib1g-dev \\\n        ghostscript \\\n        python3-celery \\\n        python3-sphinx \\\n        pkg-config \\\n        gcc \\\n        automake \\\n        libtool \\\n        openjdk-11-jre-headless \\\n        libpcre3 \\\n        libpcre3-dev \\\n        locales \\\n        netcat && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Generate and set en_US.UTF-8 locale\nRUN locale-gen en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nENV LC_CTYPE en_US.UTF-8\nRUN dpkg-reconfigure locales\n\n# Create OnaData user and add to tty group\nRUN useradd -G tty -m onadata\n\n# Clone Repository and Change owner\nRUN mkdir -p /srv/onadata && \\\n    git clone -b ${release_version} https://github.com/onaio/onadata.git /srv/onadata && \\\n    chown -R onadata:onadata /srv/onadata\n\nCOPY uwsgi.ini /uwsgi.ini\n# Install service requirements\nWORKDIR /srv/onadata\n# hadolint ignore=DL3013\nRUN python3.9 -m pip install --no-cache-dir -U pip && \\\n    python3.9 -m pip install --no-cache-dir -r requirements/base.pip && \\\n    python3.9 -m pip install --no-cache-dir -r requirements/s3.pip && \\\n    python3.9 -m pip install --no-cache-dir -r requirements/ses.pip && \\\n    python3.9 -m pip install --no-cache-dir -r requirements/azure.pip && \\\n    python3.9 -m pip install --no-cache-dir pyyaml uwsgitop django-prometheus==v2.2.0\n\n# Compile API Docs\nRUN make -C docs html\n\nEXPOSE 8000\n\nCMD [\"/usr/local/bin/uwsgi\", \"--ini\", \"/uwsgi.ini\"]\n\nUSER onadata\n"
}