{
  "startTime": 1674249490752,
  "endTime": 1674249492005,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 206,
        "lineEnd": 206,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 211,
        "lineEnd": 211,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 221,
        "lineEnd": 221,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 226,
        "lineEnd": 226,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 238,
        "lineEnd": 238,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_VER\nARG PYUWSGI_VER\n\n################################ Overview\n# This builds the following hierarchy of images:\n#\n# python:${PYTHON_VER}-slim\n#            |\n#            V\n#         (base)\n#            |----------------------------------------------------------\n#            V                                                          |\n#     (dependencies)                                                    |\n#            |                                                          V\n#            |----------------> (build-nautobot) . . . . . . . . . >  final\n#            V                        /\\               .\n# (dependencies-dev-python)            .               .\n#            |                         .               .\n#            |-----------------> (build-docs)          .\n#            V                                         .\n# (dependencies-dev-platform-ARCH)                     .\n#            |                                         .\n#            V                                         .\n#    (dependencies-dev) < . . . . . . . . . . . . . . .\n#       |          |\n#       V          V\n#      dev     final-dev\n#\n#  The design philosphy for this image hierarchy is:\n# \n#  - pyproject.toml is the source of truth for dependencies\n#  - Non-intermediate image targets (final, final-dev, dev) will not contain files they don't need\n#      - EX: No dev dependencies in final image\n#  - When changing source code only (no dependency changes):\n#      - Dependencies will NOT need to be reinstalled (cached, time intensive)\n#      - Docs will NOT need to be rebuilt\n#      - Wheel will need to be rebuilt\n#      - Each non-intermediate final image will need to be rebuilt\n#  - When changing docs only (no dependency changes):\n#      - Dependencies will NOT need to be reinstalled (cached, time intensive)\n#      - Docs will need to be rebuilt\n#      - Wheel will need to be rebuilt (due to packaging docs in wheel, container)\n#      - Each non-intermediate final image will need to be rebuilt\n#  - When changing dependencies (regardless of code changes):\n#      - Dependencies will need to be reinstalled (cache will be invalid)\n#      - Docs will need to be rebuilt\n#      - Wheel will need to be rebuilt\n#      - Each non-intermediate final image will need to be rebuilt\n#  - Minimize repeating the same steps twice\n#\n# base (intermediate build target; basis for all other images herein)\n#   adds OS-level dependencies for *running* Nautobot\n#   installs Pip and wheel\n#   creates required directories and adds Docker healthcheck and entrypoint script\n#\n# dependencies (intermediate build target)\n#   adds OS-level dependencies for *installing* Nautobot, its dependencies, and its development dependencies\n#   installs Poetry\n#   copies Nautobot source files and packaging definition into the image\n#   uses Pip/Poetry to install Nautobot's Python dependencies (but *not* development dependencies or Nautobot itself)\n#\n# dependencies-dev-python (intermediate build target)\n#   uses Poetry to additionally install Nautobot's *development* dependencies\n#\n# build-docs (intermediate build target)\n#   uses mkdocs to build docs static files for wheel and Docker image build\n#\n# build-nautobot (intermediate build target)\n#   uses Poetry to build a Nautobot wheel (but not yet install it)\n#\n# dependencies-dev-platform-ARCH (intermediate build target)\n#   installs Hadolint, Node.JS which have platform specific commands\n#\n# dependencies-dev (intermediate build target)\n#   copies built Nautobot wheel and files from build-nautobot\n#   installs Markdownlint\n#   adds files and configuration for Nautobot development server to run\n#\n# dev (development environment for Nautobot core)\n#   uses Poetry to install Nautobot as editable\n#     (at runtime the requirement is to mount the live Nautobot source code to /source/; it won't run without that)\n#\n# final-dev (development environment for Nautobot plugins)\n#   uses Pip to install Nautobot as a wheel\n#\n# final (production-ready environment):\n#   removes Poetry\n#   copies all installed Python dependencies from \"dependencies\"\n#   copies Nautobot wheel from \"dependencies\" and installs it\n#   creates a self-signed SSL certificate\n#   adds \"nautobot\" system user\n#   sets up the system to run Nautobot in production with uwsgi\n\n################################ Stage: base (intermediate build target; basis for all other images herein)\n\nFROM python:${PYTHON_VER}-slim as base\n\nENV PYTHONUNBUFFERED=1 \\\n    NAUTOBOT_ROOT=/opt/nautobot \\\n    prometheus_multiproc_dir=/prom_cache\n\n# Install all OS package upgrades and dependencies needed to run Nautobot in production\n# hadolint ignore=DL3005,DL3008,DL3013\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y git mime-support curl libxml2 libmariadb3 openssl && \\\n    apt-get autoremove -y && \\\n    apt-get clean all && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    pip --no-cache-dir install --upgrade pip wheel\n\nHEALTHCHECK --interval=5s --timeout=5s --start-period=5s --retries=1 CMD curl --fail http://localhost:8080/health/ || exit 1\n\n# Generate required dirs for later consumption\nRUN mkdir /opt/nautobot /prom_cache\n\n# Common entrypoint for all environments\nCOPY docker/docker-entrypoint.sh /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\n################################ Stage: dependencies (intermediate build target)\n\nFROM base as dependencies\nARG PYUWSGI_VER\nARG POETRY_PARALLEL\n\n# Install development/install-time OS dependencies\n# hadolint ignore=DL3008\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y build-essential libssl-dev libxmlsec1-dev libxmlsec1-openssl pkg-config libldap-dev libsasl2-dev libmariadb-dev && \\\n    apt-get autoremove -y && \\\n    apt-get clean all && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install Poetry manually via its installer script;\n# if we instead used \"pip install poetry\" it would install its own dependencies globally which may conflict with ours.\n# https://python-poetry.org/docs/master/#installing-with-the-official-installer\n# This also makes it so that Poetry will *not* be included in the \"final\" image since it's not installed to /usr/local/\nRUN curl -f -sSL https://install.python-poetry.org -o /tmp/install-poetry.py && \\\n    python /tmp/install-poetry.py && \\\n    rm -f /tmp/install-poetry.py\n\n# Add poetry install location to the $PATH\nENV PATH=\"${PATH}:/root/.local/bin\"\n\n# Poetry shouldn't create a venv as we want global install\n# Poetry 1.1.0 added parallel installation as an option;\n# unfortunately it seems to have some issues with installing/updating \"requests\" and \"certifi\"\n# while simultaneously atttempting to *use* those packages to install other packages.\n# This is disabled by default (safer), but can be re-enabled by setting POETRY_PARALLEL=true\nRUN poetry config virtualenvs.create false && \\\n    poetry config installer.parallel ${POETRY_PARALLEL:-false}\n\nCOPY pyproject.toml poetry.lock README.md /source/\n\n# The example_plugin is only a dev dependency, but Poetry fails to install non-dev dependencies if its source is missing\nCOPY examples /source/examples\n\nWORKDIR /source\n\n# Install (non-development) Python dependencies of Nautobot\n# pyuwsgi wheel doesn't support ssl so we build it from source\n# https://github.com/nautobot/nautobot/issues/193\nRUN pip install --no-cache-dir --no-binary=pyuwsgi pyuwsgi==${PYUWSGI_VER} && \\\n    poetry install --no-root --no-dev --no-ansi --extras all\n\n################################ Stage: dependencies-dev-python (intermediate build target)\n# We need dev dependencies for building the docs but don't want them in the final build image\n# We install more dependencies here and can copy where needed\n# Improves caching as well when these dependencies don't change\n\nFROM dependencies as dependencies-dev-python\n\n# Development-specific dependencies of Nautobot\nRUN poetry install --no-root --no-ansi --extras all\n\n################################ Stage: build-docs (intermediate build target)\n# Docs get built as their own stage because again we need dev dependencies as a base but\n# want to collect the output of `mkdocs` for the `build-nautobot` stage\n\nFROM dependencies-dev-python as build-docs\n\n# Copy docs dependencies to build the rendered docs\nCOPY mkdocs.yml /source/\nCOPY docs /source/docs\n\n# Build the rendered docs, this ensures that the docs are in the final image.\nRUN mkdocs build --no-directory-urls\n\n################################ Stage: build-nautobot (intermediate build target)\n\nFROM dependencies as build-nautobot\n# Copy in the Nautobot source code to build the wheel from\nCOPY nautobot /source/nautobot\n\n# Copy in the built docs to bundle with the wheel\nCOPY --from=build-docs /source/nautobot/project-static/docs /source/nautobot/project-static/docs\n\n# Build the wheel\nRUN poetry build\n\n################################ Stage: dependencies-dev-platform-ARCH (intermediate build target)\n\nFROM dependencies-dev-python as dependencies-dev-platform-amd64\n\n# Install hadolint for linting Dockerfiles\nRUN curl -f -Lo /usr/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64 && \\\n    chmod +x /usr/bin/hadolint\n\n# Install NodeJS for installing markdownlint-cli\n\nRUN curl -f -Lo /tmp/node.tar.xz https://nodejs.org/dist/v17.9.0/node-v17.9.0-linux-x64.tar.xz && \\\n    mkdir -p /usr/local/lib/nodejs && \\\n    tar -xf /tmp/node.tar.xz -C /usr/local/lib/nodejs && \\\n    rm -rf /tmp/node.tar.xz\n\nENV PATH=\"${PATH}:/usr/local/lib/nodejs/node-v17.9.0-linux-x64/bin\"\n\nFROM dependencies-dev-python as dependencies-dev-platform-arm64\n\n# Install hadolint for linting Dockerfiles\nRUN curl -f -Lo /usr/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-arm64 && \\\n    chmod +x /usr/bin/hadolint\n\n# Install NodeJS for installing markdownlint-cli\n\nRUN curl -f -Lo /tmp/node.tar.xz https://nodejs.org/dist/v17.9.0/node-v17.9.0-linux-arm64.tar.xz && \\\n    mkdir -p /usr/local/lib/nodejs && \\\n    tar -xf /tmp/node.tar.xz -C /usr/local/lib/nodejs && \\\n    rm -rf /tmp/node.tar.xz\n\nENV PATH=\"${PATH}:/usr/local/lib/nodejs/node-v17.9.0-linux-arm64/bin\"\n\n################################ Stage: dependencies-dev (intermediate build target)\n\n# hadolint ignore=DL3006\nFROM dependencies-dev-platform-$TARGETARCH as dependencies-dev\n\nRUN npm install --global markdownlint-cli@0.31.1 && npm cache clean --force;\n\n# Nautobot wheel build is no longer a direct previous layer\n# /source from build-nautobot will include docs from build-docs as well\nCOPY --from=build-nautobot /source /source\n\n# TODO Use nautobot init to generate the same config for all use cases\nCOPY development/nautobot_config.py /opt/nautobot/nautobot_config.py\n\n# Run Nautobot development server by default\nEXPOSE 8080\nCMD [\"nautobot-server\", \"runserver\", \"0.0.0.0:8080\", \"--insecure\"]\n\n################################ Stage: dev (development environment for Nautobot core)\n\nFROM dependencies-dev as dev\n\nRUN poetry install --no-ansi && \\\n    rm -rf /source\n\n################################ Stage: final-dev (development environment for Nautobot plugins)\n\nFROM dependencies-dev as final-dev\n\nRUN pip install --no-deps --no-cache-dir /source/dist/*.whl && \\\n    rm -rf /source\n\n################################ Stage: final (production-ready image)\n\nFROM base as final\nARG PYTHON_VER\n\n# Copy from \"dependencies\" the required python libraries and binaries\n# Copy from \"build-nautobot\" the built Nautobot wheel\nCOPY --from=dependencies /usr/local/lib/python${PYTHON_VER}/site-packages /usr/local/lib/python${PYTHON_VER}/site-packages\nCOPY --from=dependencies /usr/local/bin /usr/local/bin\nCOPY --from=build-nautobot /source/dist/*.whl /tmp\n\n# Install the Nautobot wheel\nRUN pip install --no-deps --no-cache-dir /tmp/*.whl && \\\n    rm -rf /tmp/*.whl\n\n# Generate self-signed SSL certs\nRUN openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj \\\n    '/C=US/ST=NY/L=NYC/O=Nautobot/CN=nautobot.local' \\\n    -keyout /opt/nautobot/nautobot.key -out /opt/nautobot/nautobot.crt\n\n# Configure uWSGI\nCOPY docker/uwsgi.ini /opt/nautobot\nCOPY docker/nautobot_config.append.py /opt/nautobot\n\n# Make sure we don't run as a root user and make sure everything under /opt/nautobot and /prom_cache is owned by nautobot\nRUN useradd --system --shell /bin/bash --create-home --home-dir /opt/nautobot nautobot && \\\n    chown -R nautobot:nautobot /opt/nautobot /prom_cache\n\n# Set up Nautobot to run in production\nUSER nautobot\n\nWORKDIR /opt/nautobot\n\nRUN nautobot-server init && \\\n    cat /opt/nautobot/nautobot_config.append.py >> /opt/nautobot/nautobot_config.py && \\\n    rm -f /opt/nautobot/nautobot_config.append.py\n\n# Run Nautobot server under uwsgi by default\nEXPOSE 8080 8443\nCMD [\"nautobot-server\", \"start\", \"--ini\", \"/opt/nautobot/uwsgi.ini\"]\n"
}