{
  "startTime": 1674256062081,
  "endTime": 1674256062835,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 81
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG NAUTOBOT_VER=\"1.0.1\"\nARG PYTHON_VER=3.8\nFROM ghcr.io/nautobot/nautobot-dev:${NAUTOBOT_VER}-py${PYTHON_VER}\n\n\nENV prometheus_multiproc_dir=/prom_cache\n\nARG NAUTOBOT_ROOT=/opt/nautobot\n\nENV NAUTOBOT_ROOT ${NAUTOBOT_ROOT}\n\nRUN apt-get update && apt-get install --no-install-recommends -y gcc libmariadb-dev-compat libmariadb-dev && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR $NAUTOBOT_ROOT\n\n# Configure poetry\nRUN poetry config virtualenvs.create false \\\n    && poetry config installer.parallel false\n\n# -------------------------------------------------------------------------------------\n# Install Nautobot Plugin\n# -------------------------------------------------------------------------------------\n\nWORKDIR /source\n\n# Copy in only pyproject.toml/poetry.lock to help with caching this layer if no updates to dependencies\nCOPY poetry.lock pyproject.toml /source/\n\n# --no-root declares not to install the project package since we're wanting to take advantage of caching dependency installation\n# and the project is copied in and installed after this step\nRUN poetry install --no-interaction --no-ansi --no-root -E metrics\n\n# Copy in the rest of the source code and install local Nautobot plugin\nCOPY . /source\nRUN poetry install --no-interaction --no-ansi -E metrics\n\nCOPY development/nautobot_config.py /opt/nautobot/nautobot_config.py\n"
}