{
  "startTime": 1674254292435,
  "endTime": 1674254293609,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nMAINTAINER Kitware, Inc. <kitware@kitware.com>\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -qy \\\n        software-properties-common \\\n        python-software-properties \\\n && apt-get update \\\n && add-apt-repository ppa:ubuntugis/ppa \\\n && apt-get install --no-install-recommends -qy curl \\\n && curl -f -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get update \\\n && apt-get install --no-install-recommends -qy \\\n        build-essential \\\n        docker.io \\\n        git \\\n        libcairo-dev \\\n        libcurl4-openssl-dev \\\n        libffi-dev \\\n        libjpeg-dev \\\n        libjpeg8-dev \\\n        libldap2-dev \\\n        libpython-dev \\\n        libsasl2-dev \\\n        libssl-dev \\\n        libxml2-dev \\\n        libxslt1-dev \\\n        nodejs \\\n        openssl \\\n        python \\\n        python-pip \\\n        python-tk \\\n        wget \\\n        zlib1g-dev \\\n && apt-get build-dep -qy                                  \\\n        gdal \\\n && pip install --no-cache-dir -U 'pip<10' \\\n && pip install --no-cache-dir setuptools \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nARG MAKE_PARALLELISM\n\nRUN mkdir /tmp/gdal \\\n && curl -f -s -o - https://download.osgeo.org/gdal/2.2.3/gdal-2.2.3.tar.gz \\\n | tar -xzf - -C /tmp/gdal --strip-components 1 \\\n && cd /tmp/gdal \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr \\\n && make $MAKE_PARALLELISM \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/gdal\n\nENV CPLUS_INCLUDE_PATH=/usr/include/gdal\nENV C_INCLUDE_PATH=/usr/include/gdal\nENV C_FORCE_ROOT=1\n\nRUN pip install --no-cache-dir GDAL==$(gdal-config --version)\n\nCOPY submodules/girder_worker /worker\n\n# Here we have to pin girder-worker-utils because it installs\n# setuptools_scm which isn't compatible with installing packages\n# from a bare directory (not in a git repo).\nRUN pip install --no-cache-dir -e /worker girder-worker-utils==0.7.1 \\\n && pip install --no-cache-dir -e /worker[girder_io,docker]\n\nRUN sh -c 'SET=\"girder-worker-config set\"                        \\\n && $SET celery        broker             \"amqp://guest@broker\"  \\\n && $SET girder_worker plugins_enabled     docker,girder_io      \\\n && $SET docker        gc                  False                 \\\n && $SET docker        exclude_images      mongo,girder,rabbitmq \\\n && $SET minerva       girder_host_name    web                   \\\n && $SET minerva       girder_host_port    8080                  \\\n && $SET minerva       girder_host_scheme  http'\n\nRUN mkdir -p /girder-components/plugins\n\nADD submodules/girder /girder\n\nRUN cd /girder \\\n && pip install --no-cache-dir -e /girder[plugins] \\\n && pip install --no-cache-dir -r /girder/requirements-dev.txt \\\n && pip install --no-cache-dir -e /girder/clients/python \\\n && pip install --no-cache-dir ansible \\\n && ansible-galaxy install -p /etc/ansible/roles girder.girder\n\nRUN cd /girder                             \\\n && npm install -g grunt-cli \\\n && npm install --production --unsafe-perm && npm cache clean --force;\n\nADD submodules/gaia /girder/gaia\nADD submodules/minerva /girder-components/plugins/minerva\n\nADD submodules/database_assetstore \\\n    /girder-components/plugins/database_assetstore\n\nADD submodules/large_image \\\n    /girder-components/plugins/large_image\n\nRUN girder-install plugin -f /girder-components/plugins/database_assetstore\nRUN girder-install plugin -f /girder-components/plugins/large_image\nRUN girder-install plugin -f /girder-components/plugins/minerva\n\nRUN pip install --no-cache-dir -e /girder/gaia \\\n && pip install --no-cache-dir -r /girder/gaia/requirements.txt \\\n && pip install --no-cache-dir -e /girder-components/plugins/minerva\n\nRUN cd /girder-components/plugins/large_image          \\\n && python setup.py install || python setup.py install \\\n && pip install --no-cache-dir -e /girder-components/plugins/large_image[mapnik]\n\nRUN girder-install web --dev --plugins \\\nautojoin,\\\ndatabase_assetstore,\\\nlarge_image,\\\nminerva\n\nRUN mkdir /docker-entrypoint\n\nCOPY devops/docker/assets/web-entrypoint.bash \\\n     /docker-entrypoint/web.bash\n\nCOPY devops/docker/assets/provision-entrypoint.bash \\\n     /docker-entrypoint/provision.bash\n\nCOPY devops/docker/assets/provision-entrypoint-parser.bash \\\n     /docker-entrypoint/provision-parse.bash\n\nCOPY devops/docker/assets/worker-entrypoint.bash \\\n     /docker-entrypoint/worker.bash\n\nCOPY devops/docker/assets/worker-entrypoint-parser.bash \\\n     /docker-entrypoint/worker-parse.bash\n\nCOPY devops/docker/assets/provision.yml /provision.yml\nCOPY devops/docker/assets/provision-inventory /etc/ansible/hosts\nENV ANSIBLE_LIBRARY=/etc/ansible/roles/girder.girder/library\n\nEXPOSE 8080\n\nENTRYPOINT [\"bash\", \"/docker-entrypoint/web.bash\"]\nCMD []\n"
}