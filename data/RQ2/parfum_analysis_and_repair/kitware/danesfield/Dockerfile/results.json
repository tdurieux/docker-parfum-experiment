{
  "startTime": 1674253835787,
  "endTime": 1674253836984,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 2,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for CORE3D Danesfield environment.\n#\n# Optional requirements:\n#   nvidia-docker2 (https://github.com/NVIDIA/nvidia-docker)\n#\n# Build:\n#   docker build -t core3d/danesfield .\n#\n# Run:\n#   docker run \\\n#     -i -t --rm \\\n#     -v /path/to/data:/mnt/data \\\n#     core3d/danesfield \\\n#     <command>\n# where <command> is like:\n#   danesfield/tools/generate-dsm.py ...\n#\n# To run with CUDA support, ensure that nvidia-docker2 is installed on the host,\n# then add the following argument to the command line:\n#\n#   --runtime=nvidia\n#\n# Example:\n#   docker run \\\n#     -i -t --rm \\\n#     --runtime=nvidia \\\n#     core3d/danesfield \\\n#     danesfield/tools/material_classifier.py --cuda ...\n\nFROM nvidia/cuda:10.0-devel-ubuntu18.04\n\nLABEL maintainer=\"Kitware Inc. <kitware@kitware.com>\"\n\n# Install prerequisites\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y software-properties-common && \\\n  add-apt-repository -y ppa:ubuntu-toolchain-r/test && \\\n  add-apt-repository -y ppa:ubuntugis/ppa && \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n  sudo \\\n  make \\\n  git \\\n  bzip2 \\\n  cmake \\\n  ca-certificates \\\n  curl \\\n  libgl1-mesa-glx \\\n  libglu1-mesa \\\n  libxt6 \\\n  nodejs \\\n  npm \\\n  xvfb \\\n  unzip \\\n  wget && \\\n  apt-get clean -y && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Download and install miniconda3\n# Based on https://github.com/ContinuumIO/docker-images/blob/fd4cd9b/miniconda3/Dockerfile\n# The step to update 'conda' is necessary to avoid the following error when\n# downloading packages (see https://github.com/conda/conda/issues/6811):\n#\n#     IsADirectoryError(21, 'Is a directory')\n#\nENV CONDA_EXECUTABLE /opt/conda/bin/conda\nRUN curl -f --silent -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    ${CONDA_EXECUTABLE} clean -tipsy && \\\n    rm ~/miniconda.sh\n\n# Copy environment definition first so that Conda environment isn't recreated\n# unnecessarily when other source files change.\nCOPY ./deployment/conda/conda_env.yml \\\n     ./danesfield/deployment/conda/conda_env.yml\n\n# Create CORE3D Conda environment\nRUN ${CONDA_EXECUTABLE} env create -f ./danesfield/deployment/conda/conda_env.yml -n core3d && \\\n    ${CONDA_EXECUTABLE} clean -tipsy\n\n# Copy patches for Colmap and VisSat\nCOPY patches /patches\n\n# Install ColmapForVisSat from Github\nRUN git clone --recursive https://github.com/Kai-46/ColmapForVisSat.git && \\\n  cd ColmapForVisSat && \\\n  git checkout 9d96671 && \\\n  git apply ../patches/colmap_deps.patch && \\\n  chmod +x /ColmapForVisSat/ubuntu1804_install_dependencies.sh && \\\n  chmod +x /ColmapForVisSat/ubuntu1804_install_colmap.sh && \\\n  apt-get update && \\\n  /ColmapForVisSat/ubuntu1804_install_dependencies.sh && \\ \n  cd /ColmapForVisSat && \\\n  ./ubuntu1804_install_colmap.sh\n\n# Install VisSat package from Github\nRUN [\"/bin/bash\", \"-c\", \"git clone https://github.com/Kai-46/VisSatSatelliteStereo.git && \\\n  cd VisSatSatelliteStereo && \\\n  git checkout e5ca3a0 && \\\n  git apply ../patches/vissat.patch && \\\n  source /opt/conda/etc/profile.d/conda.sh && \\\n  conda create -n vissat python=3.6 pip=20.0.* && \\\n  conda activate vissat && \\\n  pip install -r /VisSatSatelliteStereo/requirements.txt && \\\n  pip uninstall -y numpy && \\\n  conda install -y numpy libgdal gdal\"]\n\n# Install LAStools package from Github\nRUN git clone https://github.com/LAStools/LAStools.git && \\\n  cd LAStools && \\\n  make\n\n# Install Danesfield package into CORE3D Conda environment\nCOPY . ./danesfield\nRUN rm -rf ./danesfield/deployment\nRUN [\"/bin/bash\", \"-c\", \"source /opt/conda/etc/profile.d/conda.sh && \\\n  conda activate core3d && \\\n  pip install -e ./danesfield\"]\n\nRUN wget https://www.ipol.im/pub/art/2017/179/BilateralFilter.zip && \\\n  unzip /BilateralFilter.zip && \\\n  rm /BilateralFilter.zip && \\\n  cd BilateralFilter && \\\n  mkdir build && \\\n  cd build && \\\n  cmake -DCMAKE_BUILD_TYPE=Release .. && \\\n  make\n\n# Install latest stable version of node and npm\nRUN [\"/bin/bash\", \"-c\", \"/usr/bin/npm cache clean -f && \\\n     /usr/bin/npm install -g n  && \\\n     n stable\"]\n\n# Install 3d-tiles-tools for converting glb to b3dm\nRUN [\"/bin/bash\", \"-c\", \"git clone https://github.com/CesiumGS/3d-tiles-validator.git && \\\n     cd 3d-tiles-validator/tools && \\\n     /usr/local/bin/npm install\"]\n\n# Install meshoptimizer for optimizing the gltf and converting to glb\nRUN [\"/bin/bash\", \"-c\", \"git clone https://github.com/zeux/meshoptimizer.git src && \\\n     mkdir meshoptimizer && \\\n     cd meshoptimizer && \\\n     mv ../src . && \\\n     cd src && \\\n     git checkout v0.16 && \\\n     cd .. && \\\n     mkdir build && \\\n     cd build && \\\n     cmake -DMESHOPT_BUILD_GLTFPACK:BOOL=ON ../src && \\\n     make -j\"]\n\n# Set entrypoint to script that sets up and activates CORE3D environment\nENTRYPOINT [\"/bin/bash\", \"./danesfield/docker-entrypoint.sh\"]\n\n# Set default command when executing the container\nCMD [\"/bin/bash\"]\n"
}