{
  "startTime": 1674251856854,
  "endTime": 1674251858181,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Builds a Docker image that has libxayagame (and all its dependencies)\n# installed into /usr/local.  This can then be used as basis for images\n# that build (and run) e.g. GSPs.\n\n# Start by setting up a base image with all packages that we need\n# both for the build but also in the final image.  These are the dependencies\n# that are required as dev packages also for using libxayagame.\nFROM alpine AS base\nRUN apk add --no-cache \\\n  curl-dev \\\n  lmdb-dev \\\n  libmicrohttpd-dev \\\n  protobuf-dev \\\n  python3 \\\n  zlib-dev \\\n  czmq-dev\n\n# Create the image that we use to build everything, and install additional\n# packages that are needed only for the build itself.\nFROM base AS build\nRUN apk add --no-cache \\\n  autoconf \\\n  autoconf-archive \\\n  automake \\\n  build-base \\\n  cmake \\\n  git \\\n  gflags-dev \\\n  libtool \\\n  pkgconfig\n\n# Build and install libargtable2 from source, which is not available\n# as Alpine package.\nARG ARGTABLE_VERSION=\"2-13\"\nWORKDIR /usr/src\nRUN wget https://prdownloads.sourceforge.net/argtable/argtable2-13.tar.gz\nRUN tar zxvf argtable${ARGTABLE_VERSION}.tar.gz && rm argtable${ARGTABLE_VERSION}.tar.gz\nWORKDIR /usr/src/argtable${ARGTABLE_VERSION}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install-strip\n\n# Build and install jsoncpp from source.  We need at least version >= 1.7.5,\n# which includes an important fix for JSON parsing in some GSPs.\nARG JSONCPP_VERSION=\"1.9.5\"\nWORKDIR /usr/src/jsoncpp/build\nRUN git clone -b ${JSONCPP_VERSION} \\\n  https://github.com/open-source-parsers/jsoncpp ../source\nRUN cmake ../source \\\n  -DJSONCPP_WITH_PKGCONFIG_SUPPORT=ON \\\n  -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF\nRUN make && make install/strip\n\n# We need to install libjson-rpc-cpp from source.\nWORKDIR /usr/src/libjson-rpc-cpp\nRUN git clone https://github.com/cinemast/libjson-rpc-cpp .\nRUN cmake . \\\n  -DREDIS_SERVER=NO -DREDIS_CLIENT=NO \\\n  -DCOMPILE_TESTS=NO -DCOMPILE_EXAMPLES=NO \\\n  -DWITH_COVERAGE=NO\nRUN make && make install/strip\n\n# Install glog from source.\nWORKDIR /usr/src/glog\nRUN git clone https://github.com/google/glog .\nRUN cmake . \\\n  -DBUILD_SHARED_LIBS=ON\nRUN make && make install/strip\n\n# We also need to install googletest from source.\nWORKDIR /usr/src/googletest\nRUN git clone https://github.com/google/googletest .\nRUN cmake . && make && make install/strip\n\n# The ZMQ C++ bindings need to be installed from source.\nARG CPPZMQ_VERSION=\"4.8.1\"\nWORKDIR /usr/src/cppzmq\nRUN git clone -b v${CPPZMQ_VERSION} https://github.com/zeromq/cppzmq .\nRUN cp zmq.hpp /usr/local/include\n\n# Build and install sqlite3 from source with the session extension\n# enabled as needed.\nARG SQLITE_VERSION=\"3360000\"\nWORKDIR /usr/src\nRUN wget https://www.sqlite.org/2021/sqlite-autoconf-${SQLITE_VERSION}.tar.gz\nRUN tar zxvf sqlite-autoconf-${SQLITE_VERSION}.tar.gz && rm sqlite-autoconf-${SQLITE_VERSION}.tar.gz\nWORKDIR /usr/src/sqlite-autoconf-${SQLITE_VERSION}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CFLAGS=\"-DSQLITE_ENABLE_SESSION -DSQLITE_ENABLE_PREUPDATE_HOOK\"\nRUN make && make install-strip\n\n# Build and install libsecp256k1.\nARG SECP256K1_VERSION=\"master\"\nWORKDIR /usr/src/libsecp256k1\nRUN git clone -b ${SECP256K1_VERSION} \\\n  https://github.com/bitcoin-core/secp256k1 .\nRUN ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-tests --disable-benchmark \\\n                   --enable-module-recovery \\\n    && make && make install-strip\n\n# Build and install eth-utils.\nARG ETHUTILS_VERSION=\"master\"\nWORKDIR /usr/src/ethutils\nRUN git clone -b ${ETHUTILS_VERSION} \\\n  https://github.com/xaya/eth-utils .\nRUN ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install-strip\n\n# Also add a utility script for copying dynamic libraries needed for\n# a given binary.  This can be used by GSP images based on this one\n# to make them as minimal as possible.\nWORKDIR /usr/src/scripts\nRUN git clone https://github.com/hemanth/futhark .\nRUN cp sh/cpld.bash /usr/local/bin/cpld\nRUN chmod a+x /usr/local/bin/cpld\n\n# Make sure all installed dependencies are visible.\nENV PKG_CONFIG_PATH \"/usr/local/lib64/pkgconfig\"\nENV LD_LIBRARY_PATH \"/usr/local/lib:/usr/local/lib64\"\n\n# Build and install libxayagame itself.  Make sure to clean out any\n# potential garbage copied over in the build context.\nWORKDIR /usr/src/libxayagame\nCOPY . .\nRUN make distclean || true\nRUN ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install-strip\n\n# For the final image, just copy over all built / installed stuff and\n# add in the non-dev libraries needed (where we installed the dev version\n# on the builder image only).  We also add bash for the cpld script.\nFROM base\nCOPY --from=build /usr/local /usr/local/\nENV PKG_CONFIG_PATH \"/usr/local/lib64/pkgconfig\"\nENV LD_LIBRARY_PATH \"/usr/local/lib:/usr/local/lib64\"\nRUN apk add --no-cache \\\n  bash \\\n  gflags\nLABEL description=\"Development image with libxayagame and dependencies\"\n"
}