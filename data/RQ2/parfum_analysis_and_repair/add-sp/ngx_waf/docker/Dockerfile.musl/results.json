{
  "startTime": 1674252547174,
  "endTime": 1674252547889,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 8,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 8,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 52,
        "lineEnd": 57,
        "columnStart": 8,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 23,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG NGX_VER=stable\nFROM nginx:${NGX_VER}-alpine as base\nARG CHANGE_SOURCE=false\nARG NGX_VER=stable\nARG LIB_SODIUM_VER=1.0.18-RELEASE\n\nWORKDIR /usr/local/src\nCOPY . ./ngx_waf\n\nSHELL [\"/bin/sh\", \"-o\", \"pipefail\", \"-c\"]\nRUN set -xe \\\n    &&  if [ ${CHANGE_SOURCE} = true ]; then \\\n            sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories ; \\\n            fi \\\n    &&  apk update \\\n    &&  apk add --no-cache uthash-dev \\\n            git \\\n            gcc \\\n            libc-dev \\\n            make \\\n            openssl-dev \\\n            pcre-dev \\\n            zlib-dev \\\n            linux-headers \\\n            curl \\\n            gnupg \\\n            libxslt-dev \\\n            gd-dev \\\n            python3 \\\n            py3-pip \\\n            flex \\\n            bison \\\n    &&  if [ ${CHANGE_SOURCE} = true ]; then \\\n            pip3 config set global.index-url https://mirrors.cloud.tencent.com/pypi/simple ; \\\n        fi \\\n    && pip3 install --no-cache-dir lastversion\nRUN set -xe \\\n    &&  (cd ngx_waf && git clone https://github.com/libinjection/libinjection.git inc/libinjection) \\\n    &&  (cd ngx_waf && make parser) \\\n    &&  git clone https://github.com/troydhanson/uthash.git \\\n    &&  export LIB_UTHASH=/usr/local/src/uthash \\\n    &&  git clone https://github.com/jedisct1/libsodium.git --branch ${LIB_SODIUM_VER} libsodium-src \\\n    &&  cd libsodium-src \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/src/libsodium --with-pic \\\n    && make -j$(nproc) && make check -j$(nproc) && make install \\\n    && export LIB_SODIUM=/usr/local/src/libsodium \\\n    && cd .. \\\n    # &&  lastversion --download=\"openssl.tar.gz\" --at=github openssl \\\n    # &&  mkdir openssl && tar -zxf \"openssl.tar.gz\" -C openssl --strip-components=1 \\\n    && lastversion --download=\"nginx.tar.gz\" --major ${NGX_VER} https://nginx.org \\\n    && mkdir nginx && tar -zxf \"nginx.tar.gz\" -C nginx --strip-components=1 \\\n    && cd nginx \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --with-debug \\\n        # --with-openssl=/usr/local/src/openssl \\\n        --add-dynamic-module=/usr/local/src/ngx_waf \\\n        --with-compat \\\n        --with-cc-opt='-fstack-protector-strong' \\\n    && make modules -j$(nproc) && rm \"nginx.tar.gz\"\n\n\nFROM busybox:stable-musl\nCOPY --from=base /usr/local/src/nginx/objs/ngx_http_waf_module.so /modules/ngx_http_waf_module.so\nCOPY ./assets /assets\n"
}