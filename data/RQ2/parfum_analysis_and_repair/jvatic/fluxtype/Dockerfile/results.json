{
  "startTime": 1674249001376,
  "endTime": 1674249002430,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 51,
        "columnStart": 32,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build JavaScript app\n\n# Use the official lightweight Node.js 12 image.\n# https://hub.docker.com/_/node\nFROM node:12-slim as jsbuilder\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy application dependency manifests to the container image.\n# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).\n# Copying this first prevents re-running npm install on every code change.\nCOPY package*.json ./\n\n# Install production dependencies.\nRUN npm install --only=production && npm cache clean --force;\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Run webpack build (creates `dist` dir)\nRUN npm run build\n\n# Build and run Go server\n\n# Use the offical golang image to create a binary.\n# This is based on Debian and sets the GOPATH to /go.\n# https://hub.docker.com/_/golang\nFROM golang:1.15-buster as gobuilder\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Retrieve application dependencies.\n# This allows the container build to reuse cached dependencies.\n# Expecting to copy go.mod and if present go.sum.\nCOPY go.* ./\nRUN go mod download\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the binary.\nRUN go build -mod=readonly -v -o server\n\n# Use the official Debian slim image for a lean production container.\n# https://hub.docker.com/_/debian\n# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds\nFROM debian:buster-slim\nWORKDIR /app\nRUN set -x && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy the binary to the production image from the Go builder stage.\nCOPY --from=gobuilder /app/server /app/server\n# Copy assets to the production image from the JavaScript builder state.\nCOPY --from=jsbuilder /app/dist /app/dist\n\n# Run the web service on container startup.\nCMD [\"/app/server\"]\n"
}