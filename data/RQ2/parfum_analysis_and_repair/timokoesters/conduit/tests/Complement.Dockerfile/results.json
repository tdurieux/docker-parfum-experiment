{
  "startTime": 1674249436666,
  "endTime": 1674249437672,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# For use in our CI only. This requires a build artifact created by a previous run pipline stage to be placed in cached_target/release/conduit\nFROM valkum/docker-rust-ci:latest as builder\nWORKDIR /workdir\n\nARG RUSTC_WRAPPER\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nARG SCCACHE_BUCKET\nARG SCCACHE_ENDPOINT\nARG SCCACHE_S3_USE_SSL\n\nCOPY . .\nRUN mkdir -p target/release\nRUN test -e cached_target/release/conduit && cp cached_target/release/conduit target/release/conduit || cargo build --release\n\n\nFROM valkum/docker-rust-ci:latest\nWORKDIR /workdir\n\nRUN curl -f -OL \"https://github.com/caddyserver/caddy/releases/download/v2.2.1/caddy_2.2.1_linux_amd64.tar.gz\"\nRUN tar xzf caddy_2.2.1_linux_amd64.tar.gz && rm caddy_2.2.1_linux_amd64.tar.gz\n\nCOPY cached_target/release/conduit /workdir/conduit\nRUN chmod +x /workdir/conduit\nRUN chmod +x /workdir/caddy\n\nCOPY conduit-example.toml conduit.toml\n\nENV SERVER_NAME=localhost\nENV ROCKET_LOG=normal\nENV CONDUIT_CONFIG=/workdir/conduit.toml\n\nRUN sed -i \"s/port = 6167/port = 8008/g\" conduit.toml\nRUN echo \"allow_federation = true\" >> conduit.toml\nRUN echo \"allow_encryption = true\" >> conduit.toml\nRUN echo \"allow_registration = true\" >> conduit.toml\nRUN echo \"log = \\\"info,rocket=info,_=off,sled=off\\\"\" >> conduit.toml\nRUN sed -i \"s/address = \\\"127.0.0.1\\\"/address = \\\"0.0.0.0\\\"/g\" conduit.toml\n\n# Enabled Caddy auto cert generation for complement provided CA.\nRUN echo '{\"logging\":{\"logs\":{\"default\":{\"level\":\"WARN\"}}}, \"apps\":{\"http\":{\"https_port\":8448,\"servers\":{\"srv0\":{\"listen\":[\":8448\"],\"routes\":[{\"match\":[{\"host\":[\"your.server.name\"]}],\"handle\":[{\"handler\":\"subroute\",\"routes\":[{\"handle\":[{\"handler\":\"reverse_proxy\",\"upstreams\":[{\"dial\":\"127.0.0.1:8008\"}]}]}]}],\"terminal\":true}],\"tls_connection_policies\": [{\"match\": {\"sni\": [\"your.server.name\"]}}]}}},\"pki\": {\"certificate_authorities\": {\"local\": {\"name\": \"Complement CA\",\"root\": {\"certificate\": \"/ca/ca.crt\",\"private_key\": \"/ca/ca.key\"},\"intermediate\": {\"certificate\": \"/ca/ca.crt\",\"private_key\": \"/ca/ca.key\"}}}},\"tls\":{\"automation\":{\"policies\":[{\"subjects\":[\"your.server.name\"],\"issuer\":{\"module\":\"internal\"},\"on_demand\":true},{\"issuer\":{\"module\":\"internal\", \"ca\": \"local\"}}]}}}}' > caddy.json\n\nEXPOSE 8008 8448\n\nCMD ([ -z \"${COMPLEMENT_CA}\" ] && echo \"Error: Need Complement PKI support\" && true) || \\\n    sed -i \"s/#server_name = \\\"your.server.name\\\"/server_name = \\\"${SERVER_NAME}\\\"/g\" conduit.toml && \\\n    sed -i \"s/your.server.name/${SERVER_NAME}/g\" caddy.json && \\\n    /workdir/caddy start --config caddy.json > /dev/null && \\\n    /workdir/conduit\n"
}