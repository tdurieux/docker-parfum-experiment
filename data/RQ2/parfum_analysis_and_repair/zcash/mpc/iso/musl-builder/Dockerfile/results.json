{
  "startTime": 1674254369103,
  "endTime": 1674254370048,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use Debian 16.04 as the base for our Rust musl toolchain, because of\n# https://github.com/rust-lang/rust/issues/34978 (as of Rust 1.11).\nFROM ubuntu:16.04\n\n# Make sure we have basic dev tools for building C libraries.  Our goal\n# here is to support the musl-libc builds and Cargo builds needed for a\n# large selection of the most popular crates.\n#\n# We also set up a `rust` user by default, in whose account we'll install\n# the Rust toolchain.  This user has sudo privileges if you need to install\n# any more software.\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        build-essential \\\n        cmake \\\n        curl \\\n        file \\\n        git \\\n        sudo \\\n        xutils-dev \\\n        && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* && \\\n    useradd rust --user-group --create-home --shell /bin/bash --groups sudo\n\n# Allow sudo without a password.\nADD sudoers /etc/sudoers.d/nopasswd\n\n# Run all further code as user `rust`, and create our working directories\n# as the appropriate user.\nUSER rust\nRUN mkdir -p /home/rust/libs /home/rust/src\n\n# Set up our path with all our binary directories, including those for the\n# musl-gcc toolchain and for our Rust toolchain.\nENV PATH=/home/rust/.cargo/bin:/usr/local/musl/bin:/usr/local/bin:/usr/bin:/bin\n\n# Install our Rust toolchain and the `musl` target.  We patch the\n# command-line we pass to the installer so that it won't attempt to\n# interact with the user or fool around with TTYs.  We also set the default\n# `--target` to musl so that our users don't need to keep overriding it\n# manually.\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y && \\\n    rustup default 1.12.1 && \\\n    rustup target add x86_64-unknown-linux-musl\nADD cargo-config.toml /home/rust/.cargo/config\n\n# We'll build our libraries in subdirectories of /home/rust/libs.  Please\n# clean up when you're done.\nWORKDIR /home/rust/libs\n\nADD musl /home/rust/libs/musl\n\n# Build the musl-libc toolchain, which installs itself in /usr/local/musl.\nRUN sudo chown -R rust:rust /home/rust/libs && \\\n    cd musl && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && sudo make install && \\\n    cd .. && rm -rf musl\n\n# Expect our source code to live in /home/rust/src.  We'll run the build as\n# user `rust`, which will be uid 1000, gid 1000 outside the container.\nWORKDIR /home/rust/src\n"
}