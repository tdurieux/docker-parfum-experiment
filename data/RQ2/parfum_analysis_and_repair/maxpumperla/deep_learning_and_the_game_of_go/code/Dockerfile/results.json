{
  "startTime": 1674255433879,
  "endTime": 1674255434992,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 5,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Adapted from: https://github.com/gw0/docker-keras-jupyter/blob/master/Dockerfile\n# docker-debian-cuda - Debian 9 with CUDA Toolkit\n\nFROM gw000/keras:2.1.1-gpu\nMAINTAINER gw0 [http://gw.tnode.com/] <gw.2017@ena.one>\n\n# install py3-tf-cpu/gpu (Python 3, TensorFlow, CPU/GPU)\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y \\\n    # install python 3\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-virtualenv \\\n    python3-wheel \\\n    pkg-config \\\n    # requirements for numpy\n    libopenblas-base \\\n    python3-numpy \\\n    python3-scipy \\\n    # requirements for keras\n    python3-h5py \\\n    python3-yaml \\\n    python3-pydot \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nARG TENSORFLOW_VERSION=1.4.0\nARG TENSORFLOW_DEVICE=gpu\nARG TENSORFLOW_APPEND=_gpu\nRUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl\n\n\n# install Keras for Python 3\nARG KERAS_VERSION=2.1.1\nENV KERAS_BACKEND=tensorflow\nRUN pip3 --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n# install additional debian packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y \\\n    # system tools\n    less \\\n    procps \\\n    vim-tiny \\\n    # build dependencies\n    build-essential \\\n    libffi-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n RUN python3 -c \"import tensorflow; print(tensorflow.__version__)\" \\\n && dpkg-query -l > /dpkg-query-l.txt \\\n && pip3 freeze > /pip3-freeze.txt\n\n # Copy application to container\n RUN mkdir -p app\n WORKDIR /app\n COPY . /app\n\n # Install requirements\n RUN pip install --no-cache-dir -r requirements.txt\n\n # Expose default port and start app\n EXPOSE 5000\n ENTRYPOINT [\"python\", \"web_demo.py\", \"--bind-address\", \"0.0.0.0\", \"--pg-agent\", \"/app/agents/9x9_from_nothing/round_007.hdf5\", \"--predict-agent\", \"/app/agents/betago.hdf5\"]\n"
}