{
  "startTime": 1674218213822,
  "endTime": 1674218215107,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 8,
        "columnEnd": 63
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 66,
        "columnEnd": 83
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 24,
        "columnEnd": 40
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 24,
        "columnEnd": 40
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 27,
        "columnEnd": 44
      }
    }
  ],
  "repairedDockerfile": "FROM node:16-bullseye-slim as dep-builder\n\n# bash has already been the default shell\n#RUN ln -sf /bin/bash /bin/sh\n\n# these deps are no longer needed since we use yarn instead of npm to install dependencies\n# the installation of dumb-init has been moved to the app stage to improve concurrency and speed up builds on arm/arm64\n#RUN \\\n#    set -ex && \\\n#    apt-get update && \\\n#    apt-get install -yq --no-install-recommends \\\n#        libgconf-2-4 apt-transport-https git dumb-init python3 build-essential \\\n#    && \\\n#    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# place ARG statement before RUN statement which need it to avoid cache miss\nARG USE_CHINA_NPM_REGISTRY=0\nRUN \\\n    set -ex && \\\n    apt-get update && \\\n    apt-get install -yq --no-install-recommends \\\n        build-essential python3 \\\n    ; rm -rf /var/lib/apt/lists/*; \\\n    if [ \"$USE_CHINA_NPM_REGISTRY\" = 1 ]; then \\\n        echo 'use npm mirror' && \\\n        npm config set registry https://registry.npmmirror.com && \\\n        yarn config set registry https://registry.npmmirror.com ; yarn cache clean; \\\n    fi;\n\nCOPY ./yarn.lock /app/\nCOPY ./package.json /app/\n\n# lazy install Chromium to avoid cache miss, only install production dependencies to minimize the image size\nRUN \\\n    set -ex && \\\n    export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true && \\\n    yarn install --production --frozen-lockfile --network-timeout 1000000 && \\\n    yarn cache clean && yarn cache clean;\n\n# ---------------------------------------------------------------------------------------------------------------------\n\nFROM debian:bullseye-slim as dep-version-parser\n# This stage is necessary to limit the cache miss scope.\n# With this stage, any modification to package.json won't break the build cache of the next two stages as long as the\n# version unchanged.\n# node:16-bullseye-slim is based on debian:bullseye-slim so this stage would not cause any additional download.\n\nWORKDIR /ver\nCOPY ./package.json /app/\nRUN \\\n    set -ex && \\\n    grep -Po '(?<=\"puppeteer\": \")[^\\s\"]*(?=\")' /app/package.json | tee /ver/.puppeteer_version && \\\n    grep -Po '(?<=\"@vercel/nft\": \")[^\\s\"]*(?=\")' /app/package.json | tee /ver/.nft_version && \\\n    grep -Po '(?<=\"fs-extra\": \")[^\\s\"]*(?=\")' /app/package.json | tee /ver/.fs_extra_version\n\n# ---------------------------------------------------------------------------------------------------------------------\n\nFROM node:16-bullseye-slim as docker-minifier\n# The stage is used to further reduce the image size by removing unused files.\n\nWORKDIR /minifier\nCOPY --from=dep-version-parser /ver/* /minifier/\n\nARG USE_CHINA_NPM_REGISTRY=0\nRUN \\\n    set -ex && \\\n    if [ \"$USE_CHINA_NPM_REGISTRY\" = 1 ]; then \\\n        npm config set registry https://registry.npmmirror.com && \\\n        yarn config set registry https://registry.npmmirror.com ; \\\n    fi; \\\n    yarn add @vercel/nft@$(cat .nft_version) fs-extra@$(cat .fs_extra_version) && \\\n    yarn cache clean && yarn cache clean;\n\nCOPY . /app\nCOPY --from=dep-builder /app /app\n\nRUN \\\n    set -ex && \\\n    cp /app/scripts/docker/minify-docker.js /minifier/ && \\\n    export PROJECT_ROOT=/app && \\\n    node /minifier/minify-docker.js && \\\n    rm -rf /app/node_modules /app/scripts && \\\n    mv /app/app-minimal/node_modules /app/ && \\\n    rm -rf /app/app-minimal && \\\n    ls -la /app && \\\n    du -hd1 /app\n\n# ---------------------------------------------------------------------------------------------------------------------\n\nFROM node:16-bullseye-slim as chromium-downloader\n# This stage is necessary to improve build concurrency and minimize the image size.\n# Yeah, downloading Chromium never needs those dependencies below.\n\nWORKDIR /app\nCOPY --from=dep-version-parser /ver/.puppeteer_version /app/.puppeteer_version\n\nARG TARGETPLATFORM\nARG USE_CHINA_NPM_REGISTRY=0\nARG PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1\n# The official recommended way to use Puppeteer on x86(_64) is to use the bundled Chromium from Puppeteer:\n# https://github.com/puppeteer/puppeteer#q-why-doesnt-puppeteer-vxxx-work-with-chromium-vyyy\nRUN \\\n    set -ex ; \\\n    if [ \"$PUPPETEER_SKIP_CHROMIUM_DOWNLOAD\" = 0 ] && [ \"$TARGETPLATFORM\" = 'linux/amd64' ]; then \\\n        if [ \"$USE_CHINA_NPM_REGISTRY\" = 1 ]; then \\\n            npm config set registry https://registry.npmmirror.com && \\\n            yarn config set registry https://registry.npmmirror.com ; \\\n        fi; \\\n        echo 'Downloading Chromium...' && \\\n        unset PUPPETEER_SKIP_CHROMIUM_DOWNLOAD && \\\n        yarn add puppeteer@$(cat /app/.puppeteer_version) && \\\n        yarn cache clean ; yarn cache clean; \\\n    else \\\n        mkdir -p /app/node_modules/puppeteer ; \\\n    fi;\n\n# ---------------------------------------------------------------------------------------------------------------------\n\nFROM node:16-bullseye-slim as app\n\nLABEL org.opencontainers.image.authors=\"https://github.com/DIYgod/RSSHub\"\n\nENV NODE_ENV production\nENV TZ Asia/Shanghai\n\nWORKDIR /app\n\n# install deps first to avoid cache miss or disturbing buildkit to build concurrently\nARG TARGETPLATFORM\nARG PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1\n# https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#chrome-headless-doesnt-launch-on-unix\n# https://github.com/puppeteer/puppeteer/issues/7822\n# https://www.debian.org/releases/bullseye/amd64/release-notes/ch-information.en.html#noteworthy-obsolete-packages\n# The official recommended way to use Puppeteer on arm/arm64 is to install Chromium from the distribution repositories:\n# https://github.com/puppeteer/puppeteer/blob/94cb08c85955c0688d12b6ed10e61a4581a01280/src/node/BrowserFetcher.ts#L116-L119\nRUN \\\n    set -ex && \\\n    apt-get update && \\\n    apt-get install -yq --no-install-recommends \\\n        dumb-init \\\n    ; \\\n    if [ \"$PUPPETEER_SKIP_CHROMIUM_DOWNLOAD\" = 0 ]; then \\\n        if [ \"$TARGETPLATFORM\" = 'linux/amd64' ]; then \\\n            apt-get install -yq --no-install-recommends \\\n                ca-certificates fonts-liberation wget xdg-utils \\\n                libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libdbus-1-3 libdrm2 \\\n                libexpat1 libgbm1 libglib2.0-0 libnspr4 libnss3 libpango-1.0-0 libx11-6 libxcb1 libxcomposite1 \\\n                libxdamage1 libxext6 libxfixes3 libxkbcommon0 libxrandr2 \\\n            ; \\\n        else \\\n            apt-get install -yq --no-install-recommends \\\n                chromium \\\n            && \\\n            echo 'CHROMIUM_EXECUTABLE_PATH=chromium' | tee /app/.env ; \\\n        fi; \\\n    fi; \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=chromium-downloader /app/node_modules/puppeteer /app/node_modules/puppeteer\n\n# if grep matches nothing then it will exit with 1, thus, we cannot `set -e` here\nRUN \\\n    set -x && \\\n    if [ \"$PUPPETEER_SKIP_CHROMIUM_DOWNLOAD\" = 0 ] && [ \"$TARGETPLATFORM\" = 'linux/amd64' ]; then \\\n        echo 'Verifying Chromium installation...' && \\\n        ldd $(find /app/node_modules/puppeteer/ -name chrome) | grep \"not found\" ; \\\n        if [ \"$?\" = 0 ]; then \\\n            echo \"!!! Chromium has unmet shared libs !!!\" && \\\n            exit 1 ; \\\n        else \\\n            echo \"Awesome! All shared libs are met!\" ; \\\n        fi; \\\n    fi;\n\nCOPY --from=docker-minifier /app /app\n\nEXPOSE 1200\nENTRYPOINT [\"dumb-init\", \"--\"]\n\nCMD [\"npm\", \"run\", \"start\"]\n\n# ---------------------------------------------------------------------------------------------------------------------\n\n# In case Chromium has unmet shared libs, here is some magic to find and install the packages they belong to:\n# In most case you can just stop at `grep ^lib` and add those packages to the above stage.\n#\n# set -ex && \\\n# apt-get update && \\\n# apt install -yq --no-install-recommends \\\n#     apt-file \\\n# && \\\n# apt-file update && \\\n# ldd $(find /app/node_modules/puppeteer/ -name chrome) | grep -Po \"\\S+(?= => not found)\" | \\\n# sed 's/\\./\\\\./g' | awk '{print $1\"$\"}' | apt-file search -xlf - | grep ^lib | \\\n# xargs -d '\\n' -- \\\n#     apt-get install -yq --no-install-recommends \\\n# && \\\n# apt purge -yq --auto-remove \\\n#     apt-file \\\n# rm -rf /tmp/.chromium_path /var/lib/apt/lists/*\n\n# !!! If you manually build Docker image but with buildx/BuildKit disabled, set TARGETPLATFORM yourself !!!\n"
}