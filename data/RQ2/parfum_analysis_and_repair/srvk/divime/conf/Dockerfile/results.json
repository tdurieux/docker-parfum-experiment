{
  "startTime": 1674255829906,
  "endTime": 1674255830716,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 15,
        "columnEnd": 153
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 5,
        "columnEnd": 72
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 9,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 9,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 63,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 17,
        "columnStart": 23,
        "columnEnd": 109
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 17,
        "columnStart": 23,
        "columnEnd": 109
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 79
      }
    }
  ],
  "repairedDockerfile": "#Download base image ubuntu 16.04\nFROM ubuntu:16.04\n\n# Volume configuration: available during `docker build` time, read only\n# (use docker build -v ? )\n#VOLUME [\"/vagrant\"]\n\n# hassle #1: default user name in Docker is 'root'\n# -m forces to make home directory\nRUN useradd -m vagrant\n\n# hassle #2: default Dockerfile shell is sh\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Update Software repository # Install packages from ubuntu repository\nRUN apt-get update && apt-get install --no-install-recommends -y git make automake libtool autoconf patch subversion fuse \\\n       libatlas-base-dev libatlas-dev liblapack-dev sox libav-tools g++ \\\n       zlib1g-dev libsox-fmt-all apache2 sshfs gcc-multilib libncurses5-dev unzip wget bzip2 libboost-all-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends -y icedtea-netx-common icedtea-netx && rm -rf /var/lib/apt/lists/*;\nRUN     rm -rf /var/lib/apt/lists/*\n\n    # Kaldi and others want bash - otherwise the build process fails\nRUN [ $(readlink /bin/sh) == \"dash\" ] &&  ln -s -f bash /bin/sh\n\n    # Install Anaconda and Theano\nRUN    echo \"Downloading Anaconda-2.3.0...\"\nUSER vagrant\nWORKDIR /home/vagrant\nRUN    wget -q https://3230d63b5fc54e62148e-c95ac804525aac4b6dba79b00b39d1d3.ssl.cf1.rackcdn.com/Anaconda-2.3.0-Linux-x86_64.sh\nRUN    bash /home/vagrant/Anaconda-2.3.0-Linux-x86_64.sh -b\nRUN    rm Anaconda-2.3.0-Linux-x86_64.sh\nRUN if ! grep -q -i anaconda .bashrc; then \\\n      echo \"export PATH=/home/vagrant/anaconda/bin:\\$PATH\" >> /home/vagrant/.bashrc; \\\n    fi\n\n    # install Matlab runtime environment\nUSER root\nRUN cd /tmp && wget -q https://ssd.mathworks.com/supportfiles/downloads/R2017b/deployment_files/R2017b/installers/glnxa64/MCR_R2017b_glnxa64_installer.zip && unzip -q MCR_R2017b_glnxa64_installer.zip && ./install -mode silent -agreeToLicense yes\n    # add Matlab stuff to path\nRUN    echo 'LD_LIBRARY_PATH=\"/usr/local/MATLAB/MATLAB_Runtime/v93/runtime/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v93/bin/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v93/sys/os/glnxa64:$LD_LIBRARY_PATH\"' >> /home/vagrant/.bashrc\nRUN    rm /tmp/MCR_R2017b_glnxa64_installer.zip\n\n    # Install OpenSMILE\nRUN echo \"Installing OpenSMILE\"\nUSER vagrant\nWORKDIR /home/vagrant\nRUN wget -q https://audeering.com/download/1131/ -O OpenSMILE-2.1.tar.gz && tar zxvf OpenSMILE-2.1.tar.gz --no-same-owner && rm OpenSMILE-2.1.tar.gz\n\n    # optionally Install HTK (without it, some other tools will not work)\n    # the idea is to make users independently download HTK installer since\n    # we cannot redistribute\nWORKDIR /home/vagrant\nUSER root\nRUN wget https://speech-kitchen.org/vms/Data/HTK.tar.gz && tar zxf HTK.tar.gz --no-same-owner && rm HTK.tar.gz\nWORKDIR /home/vagrant/htk\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-x --disable-hslab\n# Fix bad Makefile\nRUN\t sed -i \"s/        /\\t/g\" HLMTools/Makefile && make all\nRUN      make install\n\n    # Get OpenSAT and all the tools\n    # Install DiarTK, LDC SAD, LDC scoring, Rajat's LENA stuff\n\n    #git clone http://github.com/srvk/ldc_sad_hmm\n\nUSER vagrant\nWORKDIR /home/vagrant\nRUN git clone http://github.com/srvk/OpenSAT && cp -f OpenSAT/theanorc /home/vagrant/.theanorc && \\\n    git clone http://github.com/srvk/ib_diarization_toolkit && \\\n    git clone https://github.com/rajatkuls/lena-clean && \\\n    git clone https://github.com/srvk/Yunitator && \\\n    git clone https://github.com/srvk/To-Combo-SAD && \\\n    git clone https://github.com/srvk/tools.git && \\\n    git clone https://github.com/aclew/varia.git\n\n    # Get tools: PDNN, coconut, ldc_sad_hmm\nUSER vagrant\nWORKDIR /home/vagrant\nRUN    mkdir G && \\\n    cd G && \\\n    git clone http://github.com/yajiemiao/pdnn && \\\n    git clone http://github.com/srvk/coconut\n\n    # get theanorc!\n    # need to figure out how to access this at 'docker build' time. Do it at 'docker run' time instead???\n#RUN    cp /vagrant/.theanorc /home/vagrant/\n\n    # install theano\n    # install pympi (for eaf -> rttm conversion) and tgt (for textgrid -> rttm conversion)\n    # and intervaltree (needed for rttm2scp.py)\n    # assume 'conda' is installed now (get path)\n    # now dependencies for Yunitator\n\nRUN    export PATH=/home/vagrant/anaconda/bin:$PATH && \\\n    /home/vagrant/anaconda/bin/conda install -y theano=0.8.2 && \\\n    /home/vagrant/anaconda/bin/pip install pympi-ling tgt intervaltree && \\\n    /home/vagrant/anaconda/bin/conda install numpy scipy mkl dill tabulate joblib && \\\n    /home/vagrant/anaconda/bin/conda install cudatoolkit && \\\n    /home/vagrant/anaconda/bin/conda install pytorch-cpu -c pytorch\n\nUSER root\n    # Some cleanup\n    # If default user is given by USER, passwordless sudo not work???\nRUN  touch /home/vagrant/.Xauthority &&  chown -R vagrant:vagrant /home/vagrant && apt-get autoremove -y\n\n# Open up HTTP / HTTPS ports\n#EXPOSE 80 443\n\nCMD [\"/bin/bash\"]\n"
}