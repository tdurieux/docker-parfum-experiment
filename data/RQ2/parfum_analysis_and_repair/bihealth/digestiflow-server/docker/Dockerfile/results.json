{
  "startTime": 1674256057222,
  "endTime": 1674256057802,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.8-buster\n\nMAINTAINER Manuel Holtgrewe <manuel.holtgrewe@bih-charite.de>\nLABEL org.opencontainers.image.source https://github.com/bihealth/digestiflow-server\n\nARG app_git_url=https://github.com/bihealth/digestiflow-server.git\nARG app_git_tag\nARG app_git_depth=1\n\nENV DEBIAN_FRONTEND noninteractive\nENV CUSTOM_STATIC_DIR /usr/src/app/local-static\n\n## Add the wait script to the image\nADD https://github.com/ufoscout/docker-compose-wait/releases/download/2.7.3/wait /usr/local/bin/wait\nRUN chmod +x /usr/local/bin/wait\n\n# Copy source code into Docker image.\nRUN mkdir -p /usr/src && rm -rf /usr/src\nRUN git clone --depth $app_git_depth --branch $app_git_tag $app_git_url /usr/src/app\nRUN ls -lh\n\n# Install system dependencies.\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        apt-utils \\\n        gcc \\\n        ldap-utils \\\n        libldap2-dev \\\n        libsasl2-dev \\\n        make \\\n        postgresql-client \\\n        wget && rm -rf /var/lib/apt/lists/*;\n\n# Install Python dependencies.\nRUN cd /usr/src/app && \\\n    pip install --no-cache-dir -r requirements/production.txt && \\\n    pip install --no-cache-dir -r requirements/ldap.txt\n\n# Build sphinx manual.\nRUN cd /usr/src/app/docs_manual && \\\n    make clean html\n\n# Download files from CDN.\nRUN mkdir -p /usr/src/app/local-static/local/css && \\\n    mkdir -p /usr/src/app/local-static/local/js && \\\n    cd /usr/src/app/local-static/local/css && \\\n    wget \\\n        https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css \\\n        https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.18/css/bootstrap-select.min.css \\\n        https://cdn.datatables.net/1.10.24/css/dataTables.jqueryui.min.css \\\n        https://cdn.jsdelivr.net/npm/bootstrap4-tagsinput@4.1.3/tagsinput.css && \\\n    \\\n    cd /usr/src/app/local-static/local/js && \\\n    wget \\\n        https://code.jquery.com/jquery-3.5.1.min.js \\\n        https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js \\\n        https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.4/js/tether.min.js \\\n        https://cdnjs.cloudflare.com/ajax/libs/shepherd/1.8.1/js/shepherd.min.js \\\n        https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js \\\n        https://browser.sentry-cdn.com/6.2.5/bundle.tracing.min.js \\\n        https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js \\\n        https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.18/js/bootstrap-select.min.js \\\n        https://cdn.jsdelivr.net/npm/bootstrap4-tagsinput@4.1.3/tagsinput.js \\\n        https://cdnjs.cloudflare.com/ajax/libs/jsrender/1.0.11/jsrender.min.js \\\n        https://cdn.plot.ly/plotly-1.54.5.min.js \\\n        https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js \\\n        https://cdnjs.cloudflare.com/ajax/libs/google-palette/1.1.0/palette.min.js \\\n        https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js && rm -rf /usr/src/app/local-static/local/css\n\n# Get icons\nRUN cd /usr/src/app && \\\n    DJANGO_SECRET_KEY=for-build-only \\\n    DJANGO_SETTINGS_MODULE=config.settings.production \\\n    DATABASE_URL=postgres://sodar:sodar@fake/sodar \\\n    python manage.py geticons\n\n# Prepare static files\nRUN cd /usr/src/app && \\\n    DJANGO_SECRET_KEY=for-build-only \\\n    DJANGO_SETTINGS_MODULE=config.settings.production \\\n    DATABASE_URL=postgres://digestiflow:digestiflow@fake/digestiflow \\\n    python manage.py collectstatic --no-input\n\n# Define the entry point.\nCOPY docker-entrypoint.sh /usr/local/bin\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh && \\\n    ln -s /usr/local/bin/docker-entrypoint.sh / # backwards compat\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"wsgi\"]\nEXPOSE 8080/tcp\n"
}