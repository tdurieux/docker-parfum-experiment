{
  "startTime": 1674251096657,
  "endTime": 1674251097939,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 10,
        "columnEnd": 80
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 7,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\n\n##################################################\n# Essential packages and libraries               #\n##################################################\n\n# get essential packages\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    software-properties-common \\\n    apt-transport-https \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    openssl \\\n    rsync \\\n    wget \\\n    gfortran \\\n    git \\\n    libgmp-dev \\\n    libhdf5-dev \\\n    clang \\\n    libclang-dev \\\n    libpython3.8-dev \\\n    libmkl-full-dev \\\n    libboost-dev \\\n    sudo \\\n    openssh-client \\\n    gpg-agent \\\n    python3-pip \\\n    python3-setuptools \\\n    libfftw3-dev \\\n    binutils \\\n    libnfft3-dev \\\n    zlib1g-dev \\\n    less \\\n    nano \\\n    vim \\\n    # Jupyter lab packages\n    texlive \\\n    dvipng \\\n    texlive-latex-extra \\\n    texlive-fonts-recommended \\\n    nodejs \\\n    npm \\\n    && \\\n    apt-get autoremove --purge -y && \\\n    apt-get autoclean -y && \\\n    rm -rf /var/cache/apt/* /var/lib/apt/lists/*\n\n# Necessary to install cmake through pip. There is a bug in the apt version (status 2020/09/11)\nRUN pip3 install --no-cache-dir cmake==3.14.3\nENV PATH=/usr/local/bin:${PATH}\nENV PYTHONPATH=/triqs/lib/python3.8/site-packages:${PYTHONPATH}\n\n# MPICH 3.3.2\nRUN cd && wget -q https://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz \\\n    && tar xf mpich-3.3.2.tar.gz \\\n    && cd mpich-3.3.2 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-fast=all,O3 --prefix=/usr \\\n    && make -j$(nproc) \\\n    && make install \\\n    && ldconfig \\\n    && cd .. \\\n    && rm -rf mpich-3.3.2 \\\n    && rm mpich-3.3.2.tar.gz\n\n##################################################\n# Python modules                                 #\n##################################################\n\n# Install python packages\nRUN pip3 install --no-cache-dir \\\n    cython \\\n    numpy \\\n    scipy \\\n    matplotlib \\\n    decorator \\\n    jupyter \\\n    ipywidgets \\\n    pytest \\\n    pandas \\\n    shapely \\\n    monty \\\n    mpi4py \\\n    pymatgen \\\n    Jinja2 \\\n    Mako \\\n    tornado \\\n    zmq \\\n    notebook \\\n    tk \\\n    # Jupyter lab packages\n    jupyterlab \\\n    descartes \\\n    ipympl \\\n    RISE\n\n# jupyter lab extension\nRUN jupyter-labextension install @jupyter-widgets/jupyterlab-manager jupyter-matplotlib @jupyterlab/toc\nRUN jupyter-lab build\n\n##################################################\n# TRIQS and its packages                         #\n##################################################\n\n# set some compiler flags\nENV CFLAGS=\"-m64 -O3 -Wl,--no-as-needed\"\nENV CXXFLAGS=\"-m64 -O3 -Wl,--no-as-needed\"\nENV LDFLAGS=\"-ldl -lm\"\nENV FFLAGS=\"-m64 -O3\"\n\n# triqs\nRUN cd / && mkdir -p triqs && mkdir -p source\n\nRUN cd /source && git clone -b 3.0.0 --depth 1 https://github.com/TRIQS/triqs triqs.src \\\n    && mkdir -p triqs.build && cd triqs.build \\\n    && cmake ../triqs.src -DCMAKE_INSTALL_PREFIX=/triqs \\\n       -DBLAS_LIBRARIES=/lib/x86_64-linux-gnu/libmkl_rt.so \\\n       -DLIBCLANG_LOCATION=/usr/lib/llvm-10/lib/libclang.so \\\n    && make -j$(nproc) && make -j$(nproc) test && make install\n\nENV CPATH=/triqs/include:${CPATH}\nENV PATH=/triqs/bin:${PATH}\nENV LIBRARY_PATH=/triqs/lib:${LIBRARY_PATH}\nENV LD_LIBRARY_PATH=/triqs/lib:${LD_LIBRARY_PATH}\nENV PYTHONPATH=/triqs/lib/python3.8/site-packages:${PYTHONPATH}\nENV CMAKE_PREFIX_PATH=/triqs/share/cmake:${CMAKE_PREFIX_PATH}\nENV TRIQS_ROOT=/triqs\n\n# dft_tools\nRUN cd /source && git clone -b 3.0.0 --depth 1 https://github.com/TRIQS/dft_tools.git dft_tools.src \\\n    && mkdir -p dft_tools.build && cd dft_tools.build \\\n    && cmake ../dft_tools.src -DCMAKE_INSTALL_PREFIX=/triqs \\\n    && make && make -j$(nproc) test && make install\n\n# cthyb\nRUN cd /source && git clone -b 3.0.0 --depth 1 https://github.com/TRIQS/cthyb.git cthyb.src \\\n    && mkdir -p cthyb.build && cd cthyb.build \\\n    && cmake ../cthyb.src -DCMAKE_INSTALL_PREFIX=/triqs \\\n    && make -j$(nproc) && make -j$(nproc) test && make install\n\n# maxent\nRUN cd /source && git clone -b 1.0.0 --depth 1 https://github.com/TRIQS/maxent.git maxent.src \\\n    && mkdir -p maxent.build && cd maxent.build \\\n    && cmake ../maxent.src -DCMAKE_INSTALL_PREFIX=/triqs \\\n    && make -j$(nproc) && make -j$(nproc) test && make install\n\n##################################################\n# Wannier90 and VASP                             #\n##################################################\n\n# W90\n# Uncomment the lines in this and the following VASP block to have W90 as a library in VASP, allowing for the tag LWANNIER90=.TRUE.\nRUN cd / && git clone -b v2.1 https://github.com/wannier-developers/wannier90.git wannier90 \\\n    && cd /wannier90 \\\n    # Using gfortran compiler - same as mpif90, mpif90 just links to it anyways\n    && cp ./config/make.inc.gfort ./make.inc \\\n    # Make gfort use the intel libraries\n    && sed -i 's@^LIBS.*@LIBS = -L${MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl@' ./make.inc \\\n    && make default lib\n\n# VASP for CSC calculations\nADD csc_vasp.tar.gz /vasp/\n# Set flags for W90 in the makefile.include\nRUN cd /vasp/ && echo 'LLIBS += /wannier90/libwannier.a' >> makefile.include \\\n    && ex -s -c '9i|CPP_OPTIONS += -DVASP2WANNIER90v2' -c x makefile.include\n# Install vasp\nRUN cd /vasp/ \\\n    && make std \\\n    && rm -rf src/ build/ arch/\n\nENV PATH=/vasp/bin:${PATH}\n\n##################################################\n# Cleanup                                        #\n##################################################\n\n# remove source\nRUN cd / && rm -rf source\n\n# create a useful work dir\nRUN cd / && mkdir work && cd work\n\n# make sure openmp does not start\nENV OMP_NUM_THREADS=1\n\n# expose port for jupyter\nEXPOSE 8378\n\nCOPY entrypoint.sh /usr/local/bin/entrypoint.sh\nCOPY jupyter_start.sh /usr/local/bin/jupyter.sh\n\nRUN [\"chmod\", \"+x\", \"/usr/local/bin/entrypoint.sh\"]\nRUN [\"chmod\", \"+x\", \"/usr/local/bin/jupyter.sh\"]\n\n# change user and group id to match host machine if options are passed accordingly\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n"
}