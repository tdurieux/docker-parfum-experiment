{
  "startTime": 1674220027874,
  "endTime": 1674220028676,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# First build the container:\n# docker build -t harvey:Dockerfile .\n# (or:\n#   docker build --progress=plain -t harvey:Dockerfile .\n#  if you want to see the output from commands (useful for debugging build))\n#\n# Now run container to build.\n# If you want to build from the repo (i.e. for CI), run:\n#   docker run --rm -it --cap-add SYS_ADMIN --privileged harvey:Dockerfile\n# If you want to build from a local folder (e.g. the current directoy), run:\n#   docker run --rm -it --mount type=bind,source=\"$(pwd)\"/..,target=/usr/local/harvey_local,readonly --cap-add SYS_ADMIN --privileged harvey:Dockerfile\n\n# TODO mahjonng doesn't build becuase of problems with cpp - fix cpp!\n\nFROM ubuntu:21.10\n\nRUN apt-get -y update && apt-get install --no-install-recommends -y build-essential git sudo && rm -rf /var/lib/apt/lists/*;\nRUN apt-get -y upgrade\n\n\nENV HARVEY=/usr/local/harvey\nENV HARVEY_LINUX_BIN=/usr/local/harvey_linux/bin\nRUN mkdir -p $HARVEY_LINUX_BIN\n\n\n########################################################################\n# Only use layer cache if the git repo hasn't changed.  This ensures we\n# always have the latest code, but make use of the cache where possible.\nARG NINEFANS_OWNER=9fans\nARG NINEFANS_REPO=plan9port\nARG NINEFANS_BRANCH=master\nADD https://api.github.com/repos/$NINEFANS_OWNER/$NINEFANS_REPO/git/refs/heads/$NINEFANS_BRANCH version.json\nRUN cd /usr/local \\\n    && git clone -b $NINEFANS_BRANCH https://github.com/$NINEFANS_OWNER/$NINEFANS_REPO.git \\\n    && cd plan9port \\\n    && ./INSTALL\n\nENV PLAN9=/usr/local/plan9port\nENV PATH=\"${PATH}:${PLAN9}/bin\"\n\n# To make rc scripts run\nRUN cp ${PLAN9}/bin/rc /bin/rc\n\n\n########################################################################\n# Build ar from 9-cc\n# Do this early since it's less likely to change than the harvey repo,\n# allowing us to use the cached layers.\nARG NINECC_OWNER=0intro\nARG NINECC_REPO=9-cc\nARG NINECC_BRANCH=master\nADD https://api.github.com/repos/$NINECC_OWNER/$NINECC_REPO/git/refs/heads/$NINECC_BRANCH version.json\nRUN cd /usr/local \\\n    && git clone -b $NINECC_BRANCH https://github.com/$NINECC_OWNER/$NINECC_REPO.git\nENV NINECC=/usr/local/9-cc\nWORKDIR $NINECC\n\nCOPY 9-cc.patch $NINECC/9-cc.patch\nRUN git apply $NINECC/9-cc.patch\n\nRUN if [ `uname -p` = \"aarch64\" ]; then \\\n    mkdir -p Linux/arm/bin; \\\n    mkdir -p Linux/arm/include; \\\n    mkdir -p Linux/arm/lib; \\\n  else \\\n    mkdir -p Linux/amd64/bin; \\\n    mkdir -p Linux/amd64/include; \\\n    mkdir -p Linux/amd64/lib; \\\n  fi\n\n# Hack up 9-cc to build ar for amd64 (or arm)\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && . ./env\n\nRUN if [ `uname -p` = \"aarch64\" ]; then \\\n    cp Linux/amd64/include/lib9.h Linux/arm/include/lib9.h; \\\n    cp Linux/amd64/include/fpuctl.h Linux/arm/include/fpuctl.h; \\\n    sed -i 's/arm-gcc/gcc/' mkfiles/mkfile-Linux-arm; \\\n  fi\n\nRUN mk\nRUN cp ${NINECC}/src/cmd/iar/o.out $HARVEY_LINUX_BIN/ar\n\n#TEMP!\nCOPY BUILD_IN_DOCKER /usr/local/\n\nENTRYPOINT [\"bash\", \"/usr/local/BUILD_IN_DOCKER\"]\n"
}