{
  "startTime": 1674216303361,
  "endTime": 1674216303913,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 27,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 27,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# In development, but this already works (results in a simple agora-server and agora-bridge setup running in the same container).\n#\n# To build (you should be able to replace podman with docker):\n#\n# $ podman build -t agora .\n#\n# Then to drop into a shell, for example:\n# $ podman run -it --entrypoint /bin/bash agora\n#\n# Or to make an Agora available in port 80 (if you are running as root or have allowed port 80 for users with sysctl):\n# podman run -p 80:5017 -dt --name agora agora\n\nFROM debian\n\nMAINTAINER Flancian \"0@flancia.org\"\n\nUSER root\n\nRUN apt-get update && apt-get install --no-install-recommends -y git python3 python3-pip python3-venv && rm -rf /var/lib/apt/lists/*;\nRUN groupadd -r agora -g 1000 && useradd -u 1000 -r -g agora -s /bin/bash -c \"Agora\" agora\nWORKDIR /home/agora\nCOPY . agora\nRUN chown -R agora:agora /home/agora\n\nUSER agora\n\nRUN git clone https://github.com/flancian/agora-server.git\nRUN git clone https://github.com/flancian/agora-bridge.git\n\nWORKDIR /home/agora/agora-server\nRUN python3 -m venv venv\nRUN . venv/bin/activate && pip3 install --no-cache-dir -r requirements.txt\nEXPOSE 5017\n\nWORKDIR /home/agora/agora-bridge\nRUN python3 -m venv venv\nRUN . venv/bin/activate && pip3 install --no-cache-dir -r requirements.txt\nEXPOSE 5018\n\nWORKDIR /home/agora/agora\n\n# This should probably be ./run-prod.sh plus nginx.\n# But perhaps we want to move on to [[docker compose]] for that?\n# [[agora bridge]] and [[agora server]] could also be separate containers with [[agora]] being a shared volume?\nCMD ./run-dev.sh\n"
}