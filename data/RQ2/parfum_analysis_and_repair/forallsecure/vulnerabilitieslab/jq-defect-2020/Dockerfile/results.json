{
  "startTime": 1674248808530,
  "endTime": 1674248809344,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    gcc git autoconf libtool make clang libc6-dbg \\\n    ninja-build liblzma-dev libz-dev pkg-config cmake binutils wget tar \\\n    nasm curl \\\n    libtool-bin gettext \\\n    gdb valgrind vim && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /src\n\n# Build libprotobuf\nWORKDIR /src\nRUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.9.1/protobuf-all-3.9.1.tar.gz\nRUN tar -xf protobuf-all-3.9.1.tar.gz && rm protobuf-all-3.9.1.tar.gz\nWORKDIR /src/protobuf-3.9.1\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j8 && \\\n    make install\nRUN ldconfig\n\n# Build libprotobuf-mutator\nWORKDIR /src\nRUN git clone https://github.com/google/libprotobuf-mutator\nWORKDIR /src/libprotobuf-mutator\nRUN mkdir build && \\\n    cd build && \\\n    cmake .. -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Debug && \\\n    ninja && \\\n    ninja install\n\n# checkout and build the desired version of jq\nWORKDIR /src\nARG VERSION=\"5b9e63e4af339bc5867603f14441b4b4cbb9e175\"\nRUN git clone --no-checkout https://github.com/stedolan/jq\nWORKDIR /src/jq\nRUN git checkout -q $VERSION\nRUN git submodule update --init && \\\n    autoreconf -fi && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CC=clang CFLAGS=\"-fsanitize=fuzzer-no-link -fsanitize=address\" \\\n       --host=x86_64-linux-gnu --with-oniguruma=builtin --disable-docs && \\\n    make -j8 && \\\n    make install && \\\n    ldconfig\n\n# Build harnesses\nWORKDIR /src/harness\nCOPY ./src/ /src/harness\nRUN ./build.sh\nCOPY ./mayhem/jq_parse_fuzzer/corpus /src/harness/corpus/\nCOPY ./poc /src/harness/poc/\n\nRUN update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-6.0 100\n\n# Convenience helper to run the fuzzer\nCMD /src/harness/fuzzer_jq_pair -detect_leaks=0 -close_fd_mask=3 corpus\n"
}