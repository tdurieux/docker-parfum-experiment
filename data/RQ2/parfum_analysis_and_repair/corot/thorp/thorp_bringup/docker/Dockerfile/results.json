{
  "startTime": 1674220759019,
  "endTime": 1674220760651,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 126
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 126
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ROS_DISTRO=melodic\n\nFROM ros:$ROS_DISTRO\n\n# Update ROS keys (see https://discourse.ros.org/t/new-gpg-keys-deployed-for-packages-ros-org/9454)\nRUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\nRUN apt-key del 421C365BD9FF1F717815A3895523BAEEB01FA116 && apt update\n\n# nvidia-docker hooks\n# LABEL com.nvidia.volumes.needed=\"nvidia_driver\"\n# ENV PATH /usr/local/nvidia/bin:${PATH}\n# ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# install ROS base and minimal build dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y ros-$ROS_DISTRO-ros-base python-pip python-catkin-tools build-essential wget nano git && rm -rf /var/lib/apt/lists/*;\n\n# add packages.osrfoundation.org APT to install the latest gazebo9\nRUN sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-stable.list' && \\\n    wget https://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add - && apt update\n\n# reduce log verbosity (RAIL segmentation is called continuously for some apps)\nRUN echo 'log4j.logger.ros.rail_mesh_icp=WARN' >> /opt/ros/$ROS_DISTRO/share/ros/config/rosconsole.config && \\\n    echo 'log4j.logger.ros.rail_segmentation=ERROR' >> /opt/ros/$ROS_DISTRO/share/ros/config/rosconsole.config\n\n# create catkin workspace\nRUN mkdir -p /catkin_ws/src\nWORKDIR /catkin_ws/src\nCOPY thorp.rosinstall .\nRUN wstool init -j10 . thorp.rosinstall\n\n# cleanup git history to reduce image size  (got from https://gist.github.com/facelordgists/80e868ff5e315878ecd6)\nRUN find . \\( -name \".git\" -o -name \".gitignore\" -o -name \".gitmodules\" -o -name \".gitattributes\" \\) -exec rm -rf -- {} +\n\n# delete non-relevant pkgs from cloned repositories\nRUN rm -rf navigation/amcl \\\n           navigation/fake_localization \\\n           navigation/map_server \\\n           navigation/move_slow_and_clear \\\n           navigation/navfn \\\n           navigation/voxel_grid \\\n           navigation/base_local_planner \\\n           navigation/clear_costmap_recovery \\\n           navigation/dwa_local_planner \\\n           navigation/global_planner \\\n           navigation/move_base \\\n           navigation/nav_core \\\n           navigation/navigation \\\n           navigation/rotate_recovery \\\n           navigation_experimental/assisted_teleop \\\n           navigation_experimental/goal_passer \\\n           navigation_experimental/navigation_experimental \\\n           navigation_experimental/pose_base_controller \\\n           navigation_experimental/sbpl_recovery \\\n           navigation_experimental/sbpl_lattice_planner \\\n           navigation_experimental/twist_recovery \\\n           navigation_layers/navigation_layers \\\n           navigation_layers/social_navigation_layers \\\n           gazebo-pkgs/gazebo_state_plugins \\\n           gazebo-pkgs/gazebo_test_tools \\\n           gazebo_ros_pkgs/docs \\\n           gazebo_ros_pkgs/gazebo_dev \\\n           gazebo_ros_pkgs/gazebo_msgs \\\n           gazebo_ros_pkgs/gazebo_ros \\\n           gazebo_ros_pkgs/gazebo_ros_control \\\n           gazebo_ros_pkgs/gazebo_ros_pkgs \\\n           kobuki/kobuki \\\n           kobuki/kobuki_controller_tutorial \\\n           kobuki/kobuki_random_walker \\\n           kobuki/kobuki_testsuite \\\n           kobuki/kobuki_capabilities \\\n           kobuki/kobuki_rapps \\\n           kobuki_desktop/kobuki_desktop \\\n           kobuki_desktop/kobuki_gazebo \\\n           kobuki_desktop/kobuki_qtestsuite \\\n           kobuki_desktop/kobuki_rviz_launchers \\\n           turtlebot/turtlebot \\\n           turtlebot/turtlebot_capabilities \\\n           turtlebot_apps/turtlebot_apps \\\n           turtlebot_apps/turtlebot_actions \\\n           turtlebot_apps/turtlebot_calibration \\\n           turtlebot_apps/turtlebot_follower \\\n           turtlebot_apps/turtlebot_rapps \\\n           turtlebot_interactions/turtlebot_interactions \\\n           turtlebot_interactions/turtlebot_interactive_markers \\\n           turtlebot_interactions/turtlebot_rviz_launchers \\\n           turtlebot_arm/turtlebot_arm \\\n          # turtlebot_arm/turtlebot_arm_block_manipulation   TODO: remove once I stop using on thorp_smach \\\n           turtlebot_arm/turtlebot_arm_kinect_calibration \\\n           turtlebot_arm/turtlebot_arm_moveit_demos \\\n           turtlebot_arm/turtlebot_arm_object_manipulation \\\n           yujin_ocs/yujin_ocs \\\n           yujin_ocs/yocs_ar_pair_tracking \\\n           yujin_ocs/yocs_diff_drive_pose_controller \\\n           yujin_ocs/yocs_localization_manager \\\n           yujin_ocs/yocs_navi_toolkit \\\n           yujin_ocs/yocs_waypoints_navi \\\n           yujin_ocs/yocs_ar_marker_tracking \\\n           yujin_ocs/yocs_joyop \\\n           yujin_ocs/yocs_rapps \\\n           yujin_ocs/yocs_virtual_sensor \\\n           yujin_ocs/yujin_ocs \\\n           yujin_ocs/yocs_ar_pair_approach \\\n           yujin_ocs/yocs_keyop \\\n           yujin_ocs/yocs_navigator \\\n           yujin_ocs/yocs_waypoint_provider\n\n# install all dependencies; skip all keys that rosdep cannot find (and are not required)\nRUN rosdep update --rosdistro=$ROS_DISTRO && \\\n    rosdep install -y -r --rosdistro=$ROS_DISTRO --from-paths . --ignore-src \\\n                   --skip-keys='create_node create_dashboard create_description \\\n                                rocon_app_manager kobuki_rapps kobuki_capabilities turtlebot_capabilities \\\n                                stdr_gui stdr_robot stdr_server astra_launch realsense_camera zeroconf_avahi'\nRUN apt clean\n\n# bidict 0.18.3 is the last version compatible with Python 2.7\nRUN pip install --no-cache-dir --upgrade bidict==0.18.3 ratelimit matplotlib tensorflow\n\n# build catkin workspace and remove build to reduce image size\nWORKDIR /catkin_ws\nRUN source /opt/ros/$ROS_DISTRO/setup.bash && catkin build --cmake-args -DCMAKE_BUILD_TYPE=Release\nRUN rm -r build\n\n# setup runtime environment\nRUN echo \"source /catkin_ws/devel/setup.bash\" >> ~/.bashrc\nENV ROSCONSOLE_FORMAT='[${node} ${severity} ${time}]: ${message}'\n\n# fix Gazebo error in REST request (https://answers.gazebosim.org//question/22263/error-in-rest-request-for-accessing-apiignitionorg)\nCOPY patch_ignition.yaml /root/.ignition/fuel/config.yaml\n\n# path to gazebo models\nENV GAZEBO_MODEL_PATH=/catkin_ws/src/thorp/thorp_simulation/worlds/gazebo/models\n\n# ENV APP_NAME=$APP_NAME\n# ENV ARGUMENTS=$ARGUMENTS\n# RUN echo \"RUNNING roslaunch thorp_simulation $APP_NAME.launch $ARGUMENTS\"\n\n\n# CMD source devel/setup.bas && gazebo\n#CMD source devel/setup.bas && roslaunch thorp_simulation $APP_NAME.launch $ARGUMENTS\n\n# run with -e APP_NAME=object_gatherer -e ARGUMENTS=\"viz_smach:=false object_types:='pentagon' start_delay:=20\"\n"
}