{
  "startTime": 1674255232657,
  "endTime": 1674255233171,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 137
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 117
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 117
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM smartcontract/builder:1.0.39\n\n# Add the PostgreSQL PGP key & repository\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\nRUN wget --quiet -O - https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - 2>/dev/null\n\n# Install deps\nRUN apt-get update && apt-get install --no-install-recommends -y postgresql postgresql-contrib direnv build-essential cmake libudev-dev unzip && rm -rf /var/lib/apt/lists/*;\n\n# Install additional tooling\nRUN mkdir -p ~/.local/bin/\nENV PATH=\"/root/.local/bin:${PATH}\"\nRUN go get github.com/go-delve/delve/cmd/dlv\nRUN go get github.com/google/gofuzz\nRUN yarn global add ganache-cli\nRUN pip3 install --no-cache-dir web3 slither-analyzer crytic-compile\nRUN curl -f -L https://github.com/crytic/echidna/releases/download/v1.5.1/echidna-test-v1.5.1-Ubuntu-18.04.tar.gz | tar -xz -C ~/.local/bin\nRUN curl -f -L https://github.com/openethereum/openethereum/releases/download/v3.2.4/openethereum-linux-v3.2.4.zip --output openethereum.zip\nRUN unzip openethereum.zip -d ~/.local/bin/ && rm openethereum.zip\nRUN chmod +x ~/.local/bin/*\n\n# Setup direnv\nRUN echo 'eval \"$(direnv hook bash)\"' > /root/.bashrc\n\n# Setup postgres\nUSER postgres\nRUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/10/main/pg_hba.conf\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/10/main/postgresql.conf\nRUN /etc/init.d/postgresql start &&\\\n  createdb chainlink_test &&\\\n  createdb node_dev &&\\\n  createdb explorer_dev &&\\\n  createdb explorer_test &&\\\n  createuser --superuser --no-password root &&\\\n  psql -c \"ALTER USER postgres PASSWORD 'node';\"\n\nUSER root\n\n# add init file - this file starts postgres and keeps container alive after started\nRUN touch ~/init\nRUN chmod +x ~/init\nRUN echo \"#!/usr/local/bin/dumb-init /bin/sh\" >> ~/init\nRUN echo \"/etc/init.d/postgresql start\" >> ~/init\nRUN echo \"while true; do sleep 1; done\" >> ~/init\n\nARG SRCROOT=/root/chainlink\nWORKDIR ${SRCROOT}\n\nEXPOSE 5432\nEXPOSE 6688\nEXPOSE 6689\nEXPOSE 3000\nEXPOSE 3001\nEXPOSE 8545\nEXPOSE 8546\n\n# Default env setup for testing\nENV CHAINLINK_DB_NAME chainlink_test\nENV CHAINLINK_PGPASSWORD=node\nENV DATABASE_URL=postgresql://postgres:$CHAINLINK_PGPASSWORD@localhost:5432/$CHAINLINK_DB_NAME?sslmode=disable\nENV TYPEORM_USERNAME=postgres\nENV TYPEORM_PASSWORD=node\nENV ETH_CHAIN_ID=1337\nENV CHAINLINK_DEV=true\nENV CHAINLINK_TLS_PORT=0\nENV SECURE_COOKIES=false\n\nENTRYPOINT [ \"/root/init\" ]\n"
}