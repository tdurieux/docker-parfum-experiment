{
  "startTime": 1674221183795,
  "endTime": 1674221184931,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 21,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 7,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-slim-buster\n\nRUN apt-get update -y \\\n    && apt-get upgrade -y \\\n    && apt-get install build-essential libflac-dev libseccomp-dev libpq-dev libpcre3-dev postgresql-client wget zip -y --no-install-recommends \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN wget https://github.com/bemoody/wfdb/archive/10.7.0.tar.gz -O wfdb.tar.gz \\\n    && tar -xf wfdb.tar.gz \\\n    && ( cd wfdb-* && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-netfiles && make -C lib install && make -C data install) \\\n    && ldconfig \\\n    && rm -rf wfdb* && rm wfdb.tar.gz\n\nRUN wget https://github.com/bemoody/lightwave/archive/0.71.tar.gz -O lightwave.tar.gz \\\n    && tar -xf lightwave.tar.gz \\\n    && (cd lightwave-* && make sandboxed-lightwave && mkdir -p /usr/local/bin && install -m 4755 sandboxed-lightwave /usr/local/bin) \\\n    && rm -rf lightwave* && rm lightwave.tar.gz\n\nRUN pip install --no-cache-dir poetry \\\n    && rm -rf /root/.cache/pip\n\nWORKDIR /code\nCOPY pyproject.toml poetry.lock ./\n\nRUN poetry config virtualenvs.create false \\\n    && poetry install --no-root \\\n    && rm -rf /root/.cache/pypoetry /root/.cache/pip\n\nCOPY docker/uwsgi-json-logging-plugin docker/uwsgi-json-logging-plugin\nRUN cd docker/uwsgi-json-logging-plugin \\\n    && ./build_plugin.sh\n\nCOPY . .\nRUN chmod +x /code/docker/wait-for-it.sh /code/docker/dev-entrypoint.sh\n"
}