{
  "startTime": 1674221025895,
  "endTime": 1674221027318,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 32,
        "lineEnd": 91,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 103,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 16
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 112,
        "lineEnd": 116,
        "columnStart": 7,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG IMAGE_CENTOS_8\n# hadolint ignore=DL3006\nFROM ${IMAGE_CENTOS_8}\n\nSHELL [\"/bin/bash\", \"-c\"]\nENV LC_ALL=C.UTF-8 LANG=C.UTF-8 PATH=\"/opt/bin:${PATH}\"\n\n# Centos-8 is EOL, therfor we switch to the vault repos\nRUN sed -i 's/^mirrorlist/#mirrorlist/' /etc/yum.repos.d/* \\\n    && sed -i 's/^#baseurl\\(.*\\)mirror\\(.*\\)/baseurl\\1vault\\2/' /etc/yum.repos.d/*\n\nRUN yum -y --enablerepo=powertools --allowerasing install \\\n    epel-release \\\n    && yum -y --enablerepo=powertools --allowerasing install \\\n    curl \\\n    enchant \\\n    gcc \\\n    gcc-c++ \\\n    git \\\n    krb5-devel \\\n    make \\\n    openldap-devel \\\n    postfix \\\n    graphviz-gd \\\n    rrdtool-devel \\\n    strace \\\n    sudo \\\n    vim \\\n    which \\\n    && yum clean all\n\nRUN yum -y makecache \\\n    && yum -y --enablerepo=powertools install \\\n    bind-utils \\\n    curl \\\n    curl-devel \\\n    expat-devel \\\n    flex \\\n    flex-devel \\\n    freeradius-devel \\\n    gcc \\\n    gcc-c++ \\\n    gd-devel \\\n    gettext \\\n    gtk-doc \\\n    httpd-devel \\\n    isl-devel \\\n    kernel-headers \\\n    libXpm-devel \\\n    libevent-devel \\\n    libffi-devel \\\n    libgsf-devel \\\n    libiscsi-devel \\\n    libjpeg-devel \\\n    libmpc-devel \\\n    libpcap-devel \\\n    libstdc++-devel \\\n    libstdc++-static \\\n    libtool \\\n    libtool-ltdl \\\n    libtool-ltdl-devel \\\n    libuuid-devel \\\n    libxml2-devel \\\n    xmlsec1-devel \\\n    mariadb-devel \\\n    mpfr-devel \\\n    ncurses-devel \\\n    openssh-clients \\\n    openssl-devel \\\n    pango-devel \\\n    patch \\\n    pcre-devel \\\n    perl \\\n    perl-ExtUtils-Embed \\\n    perl-IO-Zlib \\\n    perl-Locale-Maketext-Simple \\\n    perl-Time-HiRes \\\n    perl-devel \\\n    php \\\n    postgresql-devel \\\n    readline-devel \\\n    rpcbind \\\n    rpm-build \\\n    rsync \\\n    samba-client \\\n    sqlite-devel \\\n    texinfo \\\n    tk-devel \\\n    wget \\\n    which \\\n    xmlsec1-devel \\\n    xmlsec1-openssl-devel \\\n    && yum clean all && rm -rf /var/cache/yum\n# --nogpgcheck: Workaround for failing installation, not locally reproducable\nRUN yum -y makecache \\\n    && yum -y --enablerepo=powertools reinstall \\\n    kernel-headers \\\n    --nogpgcheck \\\n    && yum clean all\n\n# epel release is needed for joe\n# --nogpgcheck: Workaround for failing installation, not locally reproducable\nRUN yum -y makecache \\\n    && yum -y install \\\n    epel-release \\\n    --nogpgcheck \\\n    && yum clean all && rm -rf /var/cache/yum\n\n# New packages that are not needed for the build toolchain above should be added here.\n# We avoid rebuild of the whole previous steps this way\n# --nogpgcheck: Workaround for failing installation, not locally reproducable\nRUN yum -y makecache \\\n    && yum -y --enablerepo=powertools install \\\n    joe \\\n    iputils \\\n    vim \\\n    --nogpgcheck \\\n    && yum clean all && rm -rf /var/cache/yum\n\n# Avoid the annobin chaos on CentOS 8, part 2:\n# See also: omd/omd.spec.in\nRUN if test -f /usr/lib/rpm/redhat/redhat-annobin-cc1; then \\\n        rm -f /usr/lib/rpm/redhat/redhat-annobin-cc1 \\\n        && touch /usr/lib/rpm/redhat/redhat-annobin-cc1; \\\n    fi\n\n# Install our standard tool chain for building\n# - gnu-toolchain is needed for compiling all the C++ stuff\n# - cmake is needed for e.g. building re2\n# - openssl is needed by Python 3.7+\n# - python is needed by our build / test chain\nARG NEXUS_ARCHIVES_URL\nARG NEXUS_USERNAME\nARG NEXUS_PASSWORD\nARG DISTRO\nARG BRANCH_VERSION\nENV NEXUS_ARCHIVES_URL=\"$NEXUS_ARCHIVES_URL\" NEXUS_USERNAME=\"$NEXUS_USERNAME\" NEXUS_PASSWORD=\"$NEXUS_PASSWORD\" DISTRO=\"$DISTRO\" BRANCH_VERSION=\"$BRANCH_VERSION\"\n\nCOPY scripts/* /opt/\nRUN /opt/install-gnu-toolchain.sh\nRUN /opt/install-valgrind.sh\nRUN /opt/install-cmake.sh\nRUN /opt/install-protobuf-cpp.sh\nRUN /opt/install-openssl.sh\nRUN /opt/install-python.sh\nRUN /opt/install-pipenv.sh\nRUN /opt/install-freetds.sh\nRUN /opt/install-rust-cargo.sh\nRUN /opt/install-cmk-dependencies.sh\nRUN /opt/install-patchelf.sh\n\n# The /etc/fstab does not exist in the base image we use. A missing fstab prevents OMD from\n# using a tmpfs for /omd/sites/[site]/tmp, which we want to have during our tests. We can\n# simply solve this by pre-creating the empty file here.\nRUN touch /etc/fstab\n\n# Ensure all our build containers have the jenkins user (with same uid/gid). The non privileged\n# jobs will be executed as this user in the container\nRUN groupadd -g 1000 jenkins \\\n    && useradd -m -u 1001 -g 1000 -s /bin/bash jenkins\n\nARG VERS_TAG\nRUN echo $VERS_TAG > /version.txt\n\nLABEL \\\n    com.tribe29.image_type=\"build-image\"\n"
}