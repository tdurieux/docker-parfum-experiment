{
  "startTime": 1674215252329,
  "endTime": 1674215253710,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 95,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 173,
        "lineEnd": 173,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:edge\n\nMAINTAINER Andre Rocha <andre@konkerlabs.com>\n\n# General structure: start installing components that\n# do not have dependencies and en up installing the web\n# app. This will optimize building time, since the\n# first layers, with independent components are very\n# rarrely update and the layers will already be cached\n\n\n\n######################## INSTALL BASIC COMPONENTS #######################################\n## install java\nRUN echo http://dl-4.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories && \\\n    apk add --no-cache openjdk8-jre\n\n# install python\nRUN apk add --no-cache --update python py2-pip && \\\n    pip install --no-cache-dir pymongo\n\n\n#Jetty\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN addgroup -S jetty && adduser -D -S -H -G jetty jetty && rm -rf /etc/group- /etc/passwd- /etc/shadow-\n\nENV JETTY_HOME /usr/local/jetty\nENV PATH $JETTY_HOME/bin:$PATH\nRUN mkdir -p \"$JETTY_HOME\"\nWORKDIR $JETTY_HOME\n\nENV JETTY_BASE /var/lib/jetty\nRUN mkdir -p \"$JETTY_BASE\"\n\nENV JETTY_VERSION 9.3.12.v20160915\nENV JETTY_TGZ_URL https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/$JETTY_VERSION/jetty-distribution-$JETTY_VERSION.tar.gz\n\n# GPG Keys are personal keys of Jetty committers (see https://dev.eclipse.org/mhonarc/lists/jetty-users/msg05220.html)\nENV JETTY_GPG_KEYS \\\n\tB59B67FD7904984367F931800818D9D68FB67BAC \\\n\t5DE533CB43DAF8BC3E372283E7AE839CD7C58886\n\nRUN set -xe \\\n\t# Install required packages for build time. Will be removed when build finishes.\n\t&& apk add --no-cache --virtual .build-deps gnupg coreutils curl \\\n -f \\\n\t&& curl -f -SL \"$JETTY_TGZ_URL\" -o et y.tar.gz \\\n\t&& curl -SL \"$JETTY_TGZ_U \\\n\t&& tar -xvzf jetty.tar.gz \\\n\t&& mv jetty-distribution-$JETTY_VERSION/* . \\\n\t&& sed -i '/jetty-logging/d \\\n\t&& rm -fr demo-base \\\n\t&& rm jetty.tar.gz* \\\n\t&& rm -fr jetty-distribution-$JETTY_VERSION/ \\\n\n\t# et the list of modules in the default start.ini and build new base with those module \\\n\t&& cd $JETTY_BASE \\\n\t&& modules=\"$(grep -- ^--module= \"$JETTY_HOME/sta\n\t&& java -jar \"$JETTY_H \\\n\n\t# emove installed packages an\n\nWORKDIR $JETTY_BASE\n\nENV TMPDIR /tmp/jetty\nRUN set -xe \\\n\t&& mkdir -p \"$TMPDIR\" \\\n\t&& chown -R jetty:jetty \"$TMPDIR\" \"$JETTY_BASE\"\n\n\n# Install MongoDB.\nRUN \\\necho http://dl-4.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories && \\\napk add --no-cache mongodb && \\\nrm /usr/bin/mongosniff /usr/bin/mongoperf\n\n# Install mosquitto\n\nRUN apk add --no-cache --update mosquitto libcrypto1.0 libssl1.0 && \\\n    mkdir /work && chown nobody /work\n\n\n# Install nginx\nENV NGINX_VERSION nginx-1.7.11\n\nRUN addgroup -S nginx && adduser -D -S -H -G nginx nginx && rm -rf /etc/group- /etc/passwd- /etc/shadow- && \\\n    apk --update add openssl-dev pcre-dev zlib-dev wget build-base && \\\n    mkdir -p /tmp/src && \\\n    cd /tmp/src && \\\n    wget https://nginx.org/download/${NGINX_VERSION}.tar.gz && \\\n    tar -zxvf ${NGINX_VERSION}.tar.gz && \\\n    cd /tmp/src/${NGINX_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --with-http_ssl_module \\\n        --with-http_gzip_static_module \\\n        --prefix=/etc/nginx \\\n        --http-log-path=/var/log/nginx/access.log \\\n        --error-log-path=/var/log/nginx/error.log \\\n        --sbin-path=/usr/local/sbin/nginx && \\\n    make && \\\n    make install && \\\n    apk del build-base && \\\n    rm -rf /tmp/src && \\\n    rm -rf /var/cache/apk/* && rm ${NGINX_VERSION}.tar.gz\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\n\nRUN chmod 755 /usr/local/sbin/nginx\n\n\n# Install redis\n\n# grab su-exec for easy step-down from root\nRUN apk add --no-cache 'su-exec>=0.2'\n\nENV REDIS_VERSION 3.2.6\nENV REDIS_DOWNLOAD_URL http://download.redis.io/releases/redis-3.2.6.tar.gz\nENV REDIS_DOWNLOAD_SHA1 0c7bc5c751bdbc6fabed178db9cdbdd948915d1b\n\n# for redis-sentinel see: http://redis.io/topics/sentinel\nRUN set -ex \\\n\t\\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlinux-headers \\\n\t\tmake \\\n\t\tmusl-dev \\\n\t\ttar \\\n\t\\\n\t&& wget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\" \\\n\t&& echo \"$REDIS_DOWNLOAD_SHA1 *redis.tar.gz\" | sha1sum -c - \\\n\t&& mkdir -p /usr/src/redis \\\n\t&& tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n\t&& rm redis.tar.gz \\\n\t\\\n# Disable Redis protected mode [1] as it is unnecessary in context\n# of Docker. Ports are not automatically exposed when running inside\n# Docker, but rather explicitely by specifying -p / -P.\n# [1] https://github.com/antirez/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da\n\t&& grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h \\\n\t&& sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h \\\n\t&& grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h \\\n# for future reference, we modify this directly in the source instead of just supplying a default configuration flag because apparently \"if you specify any argument to redis-server, [it assumes] you are going to specify everything\"\n# see also https://github.com/docker-library/redis/issues/4#issuecomment-50780840\n# (more exactly, this makes sure the default behavior of \"save on SIGTERM\" stays functional by default)\n\t\\\n\t&& make -C /usr/src/redis \\\n\t&& make -C /usr/src/redis install \\\n\t\\\n\t&& rm -r /usr/src/redis \\\n\t\\\n\t&& apk del .build-deps\n\n\n\n################### CONFIGURE COMPONENTS ###########################\n## Configure nginx\n\nCOPY build/nginx.conf /etc/nginx/nginx.conf\nCOPY build/nginx.conf /etc/nginx/conf/nginx.conf\nCOPY build/mime.types /etc/nginx/mime.types\nCOPY build/conf.d /etc/nginx/conf.d\nCOPY build/error_page/* /usr/share/nginx/html/\n\n\n## Configure mosquitto\nRUN mkdir /var/log/mosquitto && chmod -R 777 /var/log/mosquitto && \\\n    mkdir /var/lib/mosquitto && chmod -R 777 /var/lib/mosquitto && \\\n    apk add --no-cache --update mongo-c-driver\nCOPY build/plugin/konker-mosquitto-auth-plugin-ld.conf /etc/ld.so.conf.d/konker-mosquitto-auth-plugin-ld.conf\nCOPY build/plugin/lib/*.so /usr/local/lib/konker-mosquitto-auth-plugin/\nCOPY build/mosquitto.conf /etc/mosquitto/mosquitto.conf\nCOPY build/konker-mosquitto-auth-plugin.conf /etc/mosquitto/konker-mosquitto-auth-plugin.conf\nCOPY build/konker-mqtt.conf /etc/mosquitto/conf.d/konker-mqtt.conf\nRUN  ln -s /usr/lib/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.10 && \\\n     ln -s /usr/lib/libssl.so.1.0.0 /usr/lib/libssl.so.10\n\n\n#DSL for Instance Administration\nCOPY build/__init__.py /usr/bin\nCOPY build/populate_users.py /usr/bin\nCOPY build/dsl.py /usr/bin\nCOPY build/users/ /usr/bin/users\nCOPY build/dao/ /usr/bin/dao\nCOPY build/setup.py /usr/bin\nCOPY build/generate_mosquitto_credentials.sh /usr/bin\n\nRUN chmod 777 /usr/bin/setup.py\nRUN chmod 777 /usr/bin/generate_mosquitto_credentials.sh\nRUN python /usr/bin/setup.py install\nRUN rm /usr/bin/setup.py\nRUN ln -s /usr/bin/dsl.py /usr/bin/konker\nRUN ln -s /usr/bin/populate_users.py /usr/bin/populate_users\n\n\n## Configure and deploy web app\nCOPY build/registry.war /var/lib/jetty/webapps/\nCOPY build/application.conf /var/lib/jetty/resources/\nCOPY build/logback.xml /var/lib/jetty/webapps/resources/\nCOPY build/logback.xml /var/lib/jetty/resources/\nCOPY build/mail /var/lib/jetty/webapps/resources/mail/\nCOPY build/mail /var/lib/jetty/resources/mail/\n\n\n## Set entrypoint\nCOPY docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh\n\n#RUN mkdir /data && chown redis:redis /data\n\n#start\nEXPOSE 8080 80 443 6379 27017 28017 1883\n\nVOLUME /data/db\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"java\",\"-jar\",\"/usr/local/jetty/start.jar\"]\n"
}