{
  "startTime": 1674218697233,
  "endTime": 1674218698690,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 93,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM adoptopenjdk/openjdk13:alpine-jre\n\n\nMAINTAINER Andre Rocha <andre@konkerlabs.com>\n\n#ENV TZ=America/Sao_Paulo\n#RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n#RUN echo America/Sao_Paulo | tee /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata\n#ENV TERM=xterm \\\n#ENV TZ=America/Sao_Paulo\n#RUN apk --update add tzdata && cp /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n#apk del tzdata\n\n#Jetty\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN addgroup -S jetty && adduser -D -S -H -G jetty jetty && rm -rf /etc/group- /etc/passwd- /etc/shadow-\nRUN addgroup -S nginx && adduser -D -S -H -G nginx nginx && rm -rf /etc/group- /etc/passwd- /etc/shadow-\n\nENV JETTY_HOME /usr/local/jetty\nENV PATH $JETTY_HOME/bin:$PATH\nRUN mkdir -p \"$JETTY_HOME\"\nWORKDIR $JETTY_HOME\n\nENV JETTY_BASE /var/lib/jetty\nRUN mkdir -p \"$JETTY_BASE\"\n\nENV JETTY_VERSION 9.3.12.v20160915\nENV JETTY_TGZ_URL https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/$JETTY_VERSION/jetty-distribution-$JETTY_VERSION.tar.gz\n\n# GPG Keys are personal keys of Jetty committers (see https://dev.eclipse.org/mhonarc/lists/jetty-users/msg05220.html)\nENV JETTY_GPG_KEYS \\\n\t# 1024D/8FB67BAC 2006-12-10 Joakim Erdfelt <joakime@apache.org>\n\tB59B67FD7904984367F931800818D9D68FB67BAC \\\n\t# 1024D/D7C58886 2010-03-09 Jesse McConnell (signing key) <jesse.mcconnell@gmail.com>\n\t5DE533CB43DAF8BC3E372283E7AE839CD7C58886\n\nRUN set -xe \\\n\t# Install required packages for build time. Will be removed when build finishes.\n\t&& apk add --no-cache --virtual .build-deps gnupg coreutils curl \\\n -f \\\n\t&& curl -f -SL \"$JETTY_TGZ_URL\" -o et y.tar.gz \\\n\t&& curl -SL \"$JETTY_TGZ_URL.asc\" -o jetty.tar.gz.asc \\\n\n\t# avoid: keyserver receive failed: Add\n\t# && export GNUPGHOME=\"$(mktemp -d)\" \\\n\t# && for key in $JETTY_GPG_KEYS; do \\\n\t#\t  gpg --keyserver pool.s\n\t# & gpg --batch --verify \\\n\t# & rm -r \"$GNUPGHOME\" \\\n\n\t&& tar -xvzf jetty.tar.gz \\\n\t&& mv jetty-distrib \\\n\t&& sed -i '/jetty-logging/d' etc/jetty.conf \\\n\t&& rm -fr demo-base javadoc \\\n\t&& rm jetty.tar.g \\\n\t&& rm -fr jetty-distribution-$JETTY_VERSION/ \\\n\n\t# Get the list of modules in the default start.in\n\t&& cd $JETTY_BASE \\\n\t&& modules=\"$(grep -- \\\n\t&& java -jar \"$JETTY_HOME/star\n\nWORKDIR $JETTY_BASE\n\nENV TMPDIR /tmp/jetty\nRUN set -xe \\\n\t&& mkdir -p \"$TMPDIR\" \\\n\t&& chown -R jetty:jetty \"$TMPDIR\" \"$JETTY_BASE\"\n\nCOPY docker-resources/docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh\n\nCOPY docker-resources/dist/registry.war /var/lib/jetty/webapps/\nCOPY docker-resources/dist/application.conf.example /var/lib/jetty/resources/application.conf\nCOPY docker-resources/dist/logback.xml /var/lib/jetty/webapps/resources/\nCOPY docker-resources/dist/logback.xml /var/lib/jetty/resources/\nCOPY docker-resources/dist/mail /var/lib/jetty/webapps/resources/mail/\nCOPY docker-resources/dist/mail /var/lib/jetty/resources/mail/\n\n#nginx\nENV NGINX_VERSION nginx-1.15.8\n\nRUN apk --update add openssl-dev pcre-dev zlib-dev wget build-base && \\\n    mkdir -p /tmp/src && \\\n    cd /tmp/src && \\\n    wget https://nginx.org/download/${NGINX_VERSION}.tar.gz && \\\n    tar -zxvf ${NGINX_VERSION}.tar.gz && \\\n    cd /tmp/src/${NGINX_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --with-http_ssl_module \\\n        --with-http_gzip_static_module \\\n        --prefix=/etc/nginx \\\n        --http-log-path=/var/log/nginx/access.log \\\n        --error-log-path=/var/log/nginx/error.log \\\n        --sbin-path=/usr/local/sbin/nginx && \\\n    make && \\\n    make install && \\\n    apk del build-base && \\\n    rm -rf /tmp/src && \\\n    rm -rf /var/cache/apk/* && rm ${NGINX_VERSION}.tar.gz\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\n\n#VOLUME [\"/var/log/nginx\"]\n#WORKDIR /etc/nginx\nRUN chmod 755 /usr/local/sbin/nginx & \\\n\tmkdir -p /var/log/konker-platform\nRUN chmod 777 /var/log/konker-platform\n\nCOPY docker-resources/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY docker-resources/nginx/nginx.conf /etc/nginx/conf/nginx.conf\nCOPY docker-resources/nginx/mime.types /etc/nginx/mime.types\n#COPY build/sites /var/www/\nCOPY docker-resources/nginx/conf.d /etc/nginx/conf.d\n\n#start\nEXPOSE 80\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
}