{
  "startTime": 1674251777159,
  "endTime": 1674251778160,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 114
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 5,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 237,
        "lineEnd": 237,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 238,
        "lineEnd": 238,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 18,
        "columnEnd": 105
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 211
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 18,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###### Minimal image with base system requirements for most stages\nFROM docker.io/ubuntu:20.04 as minimal\nLABEL maintainer=\"Overhang.io <contact@overhang.io>\"\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt update && \\\n    apt install --no-install-recommends -y build-essential curl git language-pack-en && rm -rf /var/lib/apt/lists/*;\nENV LC_ALL en_US.UTF-8\n{{ patch(\"openedx-dockerfile-minimal\") }}\n\n###### Install python with pyenv in /opt/pyenv and create virtualenv in /openedx/venv\nFROM minimal as python\n# https://github.com/pyenv/pyenv/wiki/Common-build-problems#prerequisites\nRUN apt update && \\\n    apt install --no-install-recommends -y libssl-dev zlib1g-dev libbz2-dev \\\n    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\n    xz-utils tk-dev libffi-dev liblzma-dev python-openssl git && rm -rf /var/lib/apt/lists/*;\nARG PYTHON_VERSION=3.8.12\nENV PYENV_ROOT /opt/pyenv\nRUN git clone https://github.com/pyenv/pyenv $PYENV_ROOT --branch v2.2.2 --depth 1\nRUN $PYENV_ROOT/bin/pyenv install $PYTHON_VERSION\nRUN $PYENV_ROOT/versions/$PYTHON_VERSION/bin/python -m venv /openedx/venv\n\n###### Install Dockerize to wait for mysql DB availability\nFROM minimal as dockerize\n# https://github.com/powerman/dockerize/releases\nARG DOCKERIZE_VERSION=v0.16.0\nRUN dockerize_url=\"https://github.com/powerman/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-$(uname -m | sed 's@aarch@arm@')\" \\\n    && echo \"Downloading dockerize from $dockerize_url\" \\\n    && curl --fail --location --output /usr/local/bin/dockerize $dockerize_url \\\n    && chmod a+x /usr/local/bin/dockerize\n\n###### Checkout edx-platform code\nFROM minimal as code\nARG EDX_PLATFORM_REPOSITORY={{ EDX_PLATFORM_REPOSITORY }}\nARG EDX_PLATFORM_VERSION={{ EDX_PLATFORM_VERSION }}\nRUN mkdir -p /openedx/edx-platform && \\\n    git clone $EDX_PLATFORM_REPOSITORY --branch $EDX_PLATFORM_VERSION --depth 1 /openedx/edx-platform\nWORKDIR /openedx/edx-platform\n\n# Identify tutor user to apply patches using git\nRUN git config --global user.email \"tutor@overhang.io\" \\\n  && git config --global user.name \"Tutor\"\n\n{%- if patch(\"openedx-dockerfile-git-patches-default\") %}\n# Custom edx-platform patches\n{{ patch(\"openedx-dockerfile-git-patches-default\") }}\n{%- else %}\n# Patch edx-platform\n# Fix broken \"Pages\" view in Studio\n# https://github.com/openedx/edx-platform/pull/30550\nRUN curl -fsSL https://github.com/open-craft/edx-platform/commit/3d54f284f82b61e693ad652d8d6e46a226fcb36d.patch | git am\n# fix: add () to print statement so problem with hint template works in newer versions\n# https://github.com/openedx/edx-platform/pull/30585\nRUN curl -fsSL https://github.com/openedx/edx-platform/commit/468036b3085adbe77a2dbb4a1c3bd88ab831f7b0.patch | git am\n# Fix LTI 1.3 Names & Roles and Grades conflict with DarkLangMiddleware\n# https://github.com/openedx/edx-platform/pull/30716\nRUN curl -fsSL https://github.com/openedx/edx-platform/commit/531bc54833dc97244b408f9f443d2b036f474f0d.patch | git am\n{%- endif %}\n\n{# Example: RUN curl -fsSL https://github.com/openedx/edx-platform/commit/<GITSHA1> | git am #}\n{{ patch(\"openedx-dockerfile-post-git-checkout\") }}\n\n###### Download extra locales to /openedx/locale/contrib/locale\nFROM minimal as locales\n# TODO Due to a bug in the transifex generation process, we cannot pull the translation\n# strings from nutmeg.1. We'll be able to pull them once they have been pushed to\n# Transifex.\n# ARG OPENEDX_I18N_VERSION={{ OPENEDX_COMMON_VERSION }}\nARG OPENEDX_I18N_VERSION=open-release/nutmeg.master\nRUN cd /tmp \\\n    && curl -f -L -o openedx-i18n.tar.gz https://github.com/openedx/openedx-i18n/archive/$OPENEDX_I18N_VERSION.tar.gz \\\n    && tar xzf /tmp/openedx-i18n.tar.gz \\\n    && mkdir -p /openedx/locale/contrib \\\n    && mv openedx-i18n-*/edx-platform/locale /openedx/locale/contrib \\\n    && rm -rf openedx-i18n* && rm /tmp/openedx-i18n.tar.gz\n\n###### Install python requirements in virtualenv\nFROM python as python-requirements\nENV PATH /openedx/venv/bin:${PATH}\nENV VIRTUAL_ENV /openedx/venv/\n\nRUN apt update && apt install --no-install-recommends -y software-properties-common libmysqlclient-dev libxmlsec1-dev libgeos-dev && rm -rf /var/lib/apt/lists/*;\n\n# Note that this means that we need to reinstall all requirements whenever there is a\n# change in edx-platform, which sucks. But there is no obvious alternative, as we need\n# to install some packages from edx-platform.\nCOPY --from=code /openedx/edx-platform /openedx/edx-platform\nWORKDIR /openedx/edx-platform\n\n# Install the right version of pip/setuptools\n# https://pypi.org/project/setuptools/\n# https://pypi.org/project/pip/\n# https://pypi.org/project/wheel/\nRUN pip install --no-cache-dir setuptools==62.1.0 pip==22.0.4 wheel==0.37.1\n\n# Install base requirements\nRUN pip install --no-cache-dir -r ./requirements/edx/base.txt\n\n# Install django-redis for using redis as a django cache\n# https://pypi.org/project/django-redis/\nRUN pip install --no-cache-dir django-redis==5.2.0\n\n# Install uwsgi\n# https://pypi.org/project/uWSGI/\nRUN pip install --no-cache-dir uwsgi==2.0.20\n\n{{ patch(\"openedx-dockerfile-post-python-requirements\") }}\n\n# Install private requirements: this is useful for installing custom xblocks.\nCOPY ./requirements/ /openedx/requirements\nRUN cd /openedx/requirements/ \\\n  && touch ./private.txt \\\n  && pip install --no-cache-dir -r ./private.txt\n\n{% for extra_requirements in OPENEDX_EXTRA_PIP_REQUIREMENTS %}RUN pip install '{{ extra_requirements }}'\n{% endfor %}\n\n###### Install nodejs with nodeenv in /openedx/nodeenv\nFROM python as nodejs-requirements\nENV PATH /openedx/nodeenv/bin:/openedx/venv/bin:${PATH}\n\n# Install nodeenv with the version provided by edx-platform\nRUN pip install --no-cache-dir nodeenv==1.6.0\nRUN nodeenv /openedx/nodeenv --node=12.13.0 --prebuilt\n\n# Install nodejs requirements\nARG NPM_REGISTRY={{ NPM_REGISTRY }}\nCOPY --from=code /openedx/edx-platform/package.json /openedx/edx-platform/package.json\nCOPY --from=code /openedx/edx-platform/package-lock.json /openedx/edx-platform/package-lock.json\nWORKDIR /openedx/edx-platform\nRUN npm clean-install --verbose --registry=$NPM_REGISTRY\n\n###### Production image with system and python requirements\nFROM minimal as production\n\n# Install system requirements\nRUN apt update && \\\n    apt install --no-install-recommends -y gettext gfortran graphviz graphviz-dev libffi-dev libfreetype6-dev libgeos-dev libjpeg8-dev liblapack-dev libmysqlclient-dev libpng-dev libsqlite3-dev libxmlsec1-dev lynx ntp pkg-config rdfind && \\\n    rm -rf /var/lib/apt/lists/*\n\n# From then on, run as unprivileged \"app\" user\n# Note that this must always be different from root (APP_USER_ID=0)\nARG APP_USER_ID=1000\nRUN if [ \"$APP_USER_ID\" = 0 ]; then echo \"app user may not be root\" && false; fi\nRUN useradd --home-dir /openedx --create-home --shell /bin/bash --uid ${APP_USER_ID} app\nUSER ${APP_USER_ID}\n\nCOPY --from=dockerize /usr/local/bin/dockerize /usr/local/bin/dockerize\nCOPY --chown=app:app --from=code /openedx/edx-platform /openedx/edx-platform\nCOPY --chown=app:app --from=locales /openedx/locale /openedx/locale\nCOPY --chown=app:app --from=python /opt/pyenv /opt/pyenv\nCOPY --chown=app:app --from=python-requirements /openedx/venv /openedx/venv\nCOPY --chown=app:app --from=python-requirements /openedx/requirements /openedx/requirements\nCOPY --chown=app:app --from=nodejs-requirements /openedx/nodeenv /openedx/nodeenv\nCOPY --chown=app:app --from=nodejs-requirements /openedx/edx-platform/node_modules /openedx/edx-platform/node_modules\n\nENV PATH /openedx/venv/bin:./node_modules/.bin:/openedx/nodeenv/bin:${PATH}\nENV VIRTUAL_ENV /openedx/venv/\nWORKDIR /openedx/edx-platform\n\n# Re-install local requirements, otherwise egg-info folders are missing\nRUN pip install --no-cache-dir -r requirements/edx/local.in\n\n# Create folder that will store lms/cms.env.yml files, as well as\n# the tutor-specific settings files.\nRUN mkdir -p /openedx/config ./lms/envs/tutor ./cms/envs/tutor\nCOPY --chown=app:app revisions.yml /openedx/config/\nENV LMS_CFG /openedx/config/lms.env.yml\nENV CMS_CFG /openedx/config/cms.env.yml\nENV REVISION_CFG /openedx/config/revisions.yml\nCOPY --chown=app:app settings/lms/*.py ./lms/envs/tutor/\nCOPY --chown=app:app settings/cms/*.py ./cms/envs/tutor/\n\n# Copy user-specific locales to /openedx/locale/user/locale and compile them\nRUN mkdir /openedx/locale/user\nCOPY --chown=app:app ./locale/ /openedx/locale/user/locale/\nRUN cd /openedx/locale/user && \\\n    django-admin compilemessages -v1\n\n# Compile i18n strings: in some cases, js locales are not properly compiled out of the box\n# and we need to do a pass ourselves. Also, we need to compile the djangojs.js files for\n# the downloaded locales.\nRUN ./manage.py lms --settings=tutor.i18n compilejsi18n\nRUN ./manage.py cms --settings=tutor.i18n compilejsi18n\n\n# Copy scripts\nCOPY --chown=app:app ./bin /openedx/bin\nRUN chmod a+x /openedx/bin/*\nENV PATH /openedx/bin:${PATH}\n\n{{ patch(\"openedx-dockerfile-pre-assets\") }}\n\n# Collect production assets. By default, only assets from the default theme\n# will be processed. This makes the docker image lighter and faster to build.\n# Only the custom themes added to /openedx/themes will be compiled.\n# Here, we don't run \"paver update_assets\" which is slow, compiles all themes\n# and requires a complex settings file. Instead, we decompose the commands\n# and run each one individually to collect the production static assets to\n# /openedx/staticfiles.\nENV NO_PYTHON_UNINSTALL 1\nENV NO_PREREQ_INSTALL 1\n# We need to rely on a separate openedx-assets command to accelerate asset processing.\n# For instance, we don't want to run all steps of asset collection every time the theme\n# is modified.\nRUN openedx-assets xmodule \\\n    && openedx-assets npm \\\n    && openedx-assets webpack --env=prod \\\n    && openedx-assets common\nCOPY --chown=app:app ./themes/ /openedx/themes/\nRUN openedx-assets themes \\\n    && openedx-assets collect --settings=tutor.assets \\\n    # De-duplicate static assets with symlinks\n    && rdfind -makesymlinks true -followsymlinks true /openedx/staticfiles/\n\n# Create a data directory, which might be used (or not)\nRUN mkdir /openedx/data\n\n# service variant is \"lms\" or \"cms\"\nENV SERVICE_VARIANT lms\nENV DJANGO_SETTINGS_MODULE lms.envs.tutor.production\n\n{{ patch(\"openedx-dockerfile\") }}\n\nEXPOSE 8000\n\n###### Intermediate image with dev/test dependencies\nFROM production as development\n\n# Install useful system requirements (as root)\nUSER root\nRUN apt update && \\\n    apt install --no-install-recommends -y vim iputils-ping dnsutils telnet \\\n    && rm -rf /var/lib/apt/lists/*\nUSER app\n\n# Install dev python requirements\nRUN pip install --no-cache-dir -r requirements/edx/development.txt\nRUN pip install --no-cache-dir ipdb==0.13.4 ipython==7.27.0\n\n# Add ipdb as default PYTHONBREAKPOINT\nENV PYTHONBREAKPOINT=ipdb.set_trace\n\n# Recompile static assets: in development mode all static assets are stored in edx-platform,\n# and the location of these files is stored in webpack-stats.json. If we don't recompile\n# static assets, then production assets will be served instead.\nRUN rm -r /openedx/staticfiles && \\\n    mkdir /openedx/staticfiles && \\\n    openedx-assets webpack --env=dev\n\n{{ patch(\"openedx-dev-dockerfile-post-python-requirements\") }}\n\n# Default django settings\nENV DJANGO_SETTINGS_MODULE lms.envs.tutor.development\n\nCMD ./manage.py $SERVICE_VARIANT runserver 0.0.0.0:8000\n\n###### Final image with production cmd\nFROM production as final\n\n# Run server\nCMD uwsgi \\\n    --static-map /static=/openedx/staticfiles/ \\\n    --static-map /media=/openedx/media/ \\\n    --http 0.0.0.0:8000 \\\n    --thunder-lock \\\n    --single-interpreter \\\n    --enable-threads \\\n    --processes=${UWSGI_WORKERS:-2} \\\n    --buffer-size=8192 \\\n    --wsgi-file $SERVICE_VARIANT/wsgi.py\n\n{{ patch(\"openedx-dockerfile-final\") }}\n\n"
}