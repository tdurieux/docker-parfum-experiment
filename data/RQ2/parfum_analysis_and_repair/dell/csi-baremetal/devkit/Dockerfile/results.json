{
  "startTime": 1674252117523,
  "endTime": 1674252118308,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 11,
        "columnEnd": 148
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 14,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 14,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 14,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 14,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 14,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# build kind binary\nARG KIND_BUILDER\nFROM $KIND_BUILDER as builder\n\nCOPY          kind/ /kind/\n\nRUN apt update \\\n&& apt install -y --no-install-recommends patch \\\n&& chmod +x /kind/kind-build.sh \\\n&& /kind/kind-build.sh /kind && rm -rf /var/lib/apt/lists/*;\n\n\nFROM opensuse/leap:latest\n\nARG           arg_docker_ver\nARG           arg_go_ver\nARG           arg_golandci_ver\nARG           arg_kubectl_ver\nARG           arg_helm_ver\nARG           arg_protobuf_ver\nARG           arg_protoc_gen_go_ver\nARG           arg_python_ver\n\nENV           GOPATH=\"/usr/share/go\"\nENV           GOROOT=\"/usr/local/go\"\nENV           GOCACHE=\"$GOPATH/.cache/go-build\"\nENV           GOENV=\"$GOPATH/.cache/go/env\"\nENV           PROTOPATH=\"/usr/local/proto\"\nENV           PATH=\"$PATH:$GOPATH/bin:$GOROOT/bin:$PROTOPATH/bin\"\n\n\nRUN           zypper --no-gpg-checks --non-interactive refresh \\\n&&            zypper --no-gpg-checks --non-interactive install --auto-agree-with-licenses --no-recommends \\\n              curl \\\n              docker-${arg_docker_ver} \\\n              gcc \\\n              git \\\n              jq \\\n              libXi6 \\\n              libXtst6 \\\n              make \\\n              ShellCheck \\\n              sudo \\\n              vim \\\n              wget \\\n              xorg-x11 \\\n              xorg-x11-fonts \\\n              unzip \\\n              MozillaFirefox \\\n              libasound2 \\\n              libgbm1 \\\n              libxshmfence1 \\\n              python3-devel-${arg_python_ver} \\\n              bash-completion\n# install go\nRUN           wget https://go.dev/dl/go${arg_go_ver}.linux-amd64.tar.gz \\\n&&            tar -C /usr/local -xzf go${arg_go_ver}.linux-amd64.tar.gz \\\n&&            rm go${arg_go_ver}.linux-amd64.tar.gz\n# install bin golangci\nRUN           curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin v${arg_golandci_ver}\n# install proto\nRUN curl -f -L -O https://github.com/protocolbuffers/protobuf/releases/download/v${arg_protobuf_ver}/protoc-${arg_protobuf_ver}-linux-x86_64.zip \\\n&& unzip protoc-${arg_protobuf_ver}-linux-x86_64.zip -d $PROTOPATH \\\n&& rm protoc-${arg_protobuf_ver}-linux-x86_64.zip \\\n# TODO update to google.golang.org/protobuf - https://github.com/dell/csi-baremetal/issues/613\n&& go install github.com/golang/protobuf/protoc-gen-go@${arg_protoc_gen_go_ver}\n# bind start_ide.sh\nRUN           ln --symbolic /usr/bin/start_ide.sh    /usr/bin/idea \\\n&&            ln --symbolic /usr/bin/start_ide.sh    /usr/bin/goland\n# install kubectl\nRUN curl -f -LO https://dl.k8s.io/release/v${arg_kubectl_ver}/bin/linux/amd64/kubectl \\\n&& install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl \\\n&& rm kubectl\n# install helm3\nRUN curl -f -LO https://get.helm.sh/helm-v${arg_helm_ver}-linux-amd64.tar.gz \\\n&& tar -xzf helm-v${arg_helm_ver}-linux-amd64.tar.gz \\\n&& chmod +x linux-amd64/helm \\\n&& mv linux-amd64/helm /usr/local/bin/helm \\\n&& rm helm-v${arg_helm_ver}-linux-amd64.tar.gz \\\n&& rm -rf linux-amd64\n\n# copy kind from builder\nCOPY          --from=builder /kind/kind /usr/local/bin\nRUN           chmod +x /usr/local/bin/kind\n\n# set access rules\nRUN           chmod -R a+rwx $GOPATH \\\n&&            chmod -R a+rwx $PROTOPATH\n\n\n# add scripts required to properly setup running container\nADD           devkit \\\n              start_ide.sh \\\n              devkit-entrypoint.sh    /usr/bin/\n\n# set entrypoint and default arguments\nENTRYPOINT    [ \"devkit-entrypoint.sh\" ]\n"
}