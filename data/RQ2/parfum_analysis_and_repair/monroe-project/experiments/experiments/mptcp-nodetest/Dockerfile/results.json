{
  "startTime": 1674249280714,
  "endTime": 1674249281639,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 74,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# There are three ways to install a custom kernel:\n# 1. Copy the -deb files from a image with a precompiled kernel\n#      * MPTCP example can be found in subfolder build\n# 2. (as we do here) Do the compilation at build time (will be time consuming for big projects like a kernel)\n#      * Example Dockerfile_allione\n# 3. Build the kernel outside and copy the files into the image\n\n###################### Build stage ######################################\n# Here we build the kernel\nFROM debian:stretch AS build\n\nMAINTAINER jonas.karlsson@kau.se\n\nENV APT_OPTS -y --allow-downgrades --allow-remove-essential --allow-change-held-packages --allow-unauthenticated\n\n#Add the src files to the repo list\nRUN cat /etc/apt/sources.list > stmp \\\n    && sed 's/deb /deb-src /g' stmp >> /etc/apt/sources.list \\\n    && rm stmp\n\n############## Main Installation  ####################\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update \\\n    && apt-get upgrade ${APT_OPTS} \\\n    && apt-get install -y --no-install-recommends ${APT_OPTS} \\\n    build-essential \\\n    fakeroot \\\n    git \\\n    linux-image-amd64 \\\n    lsb-release \\\n    && apt-get ${APT_OPTS} build-dep linux && rm -rf /var/lib/apt/lists/*;\n\n#Clone mptcp git\nRUN mkdir -p /usr/src/ && rm -rf /usr/src/\nRUN git clone --depth=1 git://github.com/multipath-tcp/mptcp.git /usr/src/kernel-source\n\nWORKDIR /usr/src/kernel-source\n# Can only be one but that is also the case since we only install one kernel\nRUN cp /boot/config-* .config\n\n#Enable mptcp\nCOPY files/config_mptcp.sh /usr/src/kernel-source/\nRUN bash config_mptcp.sh\n\nRUN yes '' | make oldconfig\nRUN scripts/config --disable DEBUG_INFO\n\nRUN make clean\nRUN make -j `getconf _NPROCESSORS_ONLN` deb-pkg LOCALVERSION=-mptcp\n\nRUN rm -f /usr/src/*dbg*\n\n###################### End Build stage ##################################\n\n###################### Final stage ######################################\n# Here we make our \"normal\" image\nFROM monroe/base:virt\n\nMAINTAINER jonas.karlsson@kau.se\n\nENV APT_OPTS -y --allow-downgrades --allow-remove-essential --allow-change-held-packages --allow-unauthenticated\n\n############## Main Installation  ####################\n#Copy only the relevant parts from the build stage\nCOPY --from=build /usr/src/*.deb /\n\n# This is the experiment that should run once the vm is started\nCOPY files/user-experiment.sh /opt/monroe/\nRUN chmod ugo+x /opt/monroe/user-experiment.sh\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends ${APT_OPTS} \\\n    curl \\\n    && dpkg -i *.deb \\\n    && apt-get clean ${APT_OPTS} \\\n    && apt-get autoremove ${APT_OPTS} \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc /usr/share/man /usr/share/locale /var/cache/debconf/*-old *.deb\n\n\n############## Tweaks  ####################\nRUN echo \"root:toor\"| chpasswd\n"
}