{
  "startTime": 1674217690537,
  "endTime": 1674217692197,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 30,
        "columnEnd": 46
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 20,
        "columnEnd": 36
      }
    }
  ],
  "repairedDockerfile": "ARG IMAGE=2.7.6-alpine3.14\nARG AMBIENTE=production\n\nFROM ruby:${IMAGE} as build\n\nWORKDIR /eventaservo\n\nRUN apk update \\\n  && apk upgrade \\\n  && apk add --update --no-cache \\\n      alpine-sdk \\\n      shared-mime-info \\\n      imagemagick6-dev \\\n      postgresql-dev \\\n      nodejs \\\n      npm \\\n      yarn \\\n      sqlite-dev \\\n      tzdata \\\n  && rm -rf /var/cache/apk/*\n\n# Instala o Bundler e as Gems\nRUN gem install bundler:2.1.4\nRUN bundle config set without development test\nRUN bundle config set deployment true\nRUN bundle config set frozen true\nCOPY Gemfile Gemfile.lock ./\nRUN bundle install --jobs=3 --retry=3\n\n# YARN\nRUN npm install -g yarn && npm cache clean --force;\nRUN yarn set version 3.2.1 && yarn cache clean;\nCOPY .yarnrc.yml ./\nCOPY package.json yarn.lock ./\nRUN yarn install && yarn cache clean;\n\n# Define as variaveis de ambiente\nENV RAILS_ENV=${AMBIENTE}\nENV RAILS_LOG_TO_STDOUT=true\nENV RAILS_SERVE_STATIC_FILES=true\nENV GOOGLE_MAPS_KEY=${GOOGLE_MAPS_KEY}\nENV IPINFO_KEY=${IPINFO_KEY}\n\nCOPY . .\n\n# Kreas API dokumentadon ĉe /public/docs/api/v2/\nRUN npm i -g redoc-cli && npm cache clean --force;\nRUN mkdir -p public/docs/api/v2/\nRUN redoc-cli build openapi/v2.yaml -o public/docs/api/v2/index.html\n\nRUN bundle exec rails assets:precompile\n\n# Apaga todos os arquivos desnecessários\n\nRUN rm -rf node_modules \\\n  && rm -rf tmp/* \\\n  && rm -rf vendor/bundle/ruby/${RUBY_MAJOR}.0/cache/* \\\n  && find vendor/bundle/ruby/${RUBY_MAJOR}.0/gems/ -name \"*.c\" -delete \\\n  && find vendor/bundle/ruby/${RUBY_MAJOR}.0/gems/ -name \"*.o\" -delete\n\nFROM ruby:${IMAGE}\n\nRUN apk update \\\n  && apk upgrade \\\n  && apk add --update --no-cache \\\n      alpine-sdk \\\n      shared-mime-info \\\n      imagemagick \\\n      imagemagick6-dev \\\n      postgresql-dev \\\n      poppler-utils \\\n      tzdata \\\n  && rm -rf /var/cache/apk/*\n\nWORKDIR /eventaservo\n\nENV RAILS_ENV=${AMBIENTE}\nENV RAILS_LOG_TO_STDOUT=true\nENV RAILS_SERVE_STATIC_FILES=true\n\nRUN bundle config set without development test\nRUN bundle config set deployment true\nRUN bundle config set frozen true\nRUN bundle config path vendor/bundle\n\nCOPY --from=build /eventaservo /eventaservo\n\nEXPOSE 3000\n\nCMD [\"bundle\", \"exec\", \"rails\", \"server\", \"-b\", \"ssl://0.0.0.0:3000?key=certs/localhost.key&cert=certs/localhost.crt\"]\n"
}