{
  "startTime": 1674248259105,
  "endTime": 1674248259727,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2021 Google, LLC.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Use the official Python image.\n# https://hub.docker.com/_/python\nFROM python:3.10-slim\n\n# Allow statements and log messages to immediately appear in the Cloud Run logs\nENV PYTHONUNBUFFERED True\n\n# Hide auth warnings on Cloud Run\nENV HIDE_AUTH_WARNINGS True\n\n# Copy application dependency manifests to the container image.\n# Copying this separately prevents re-running pip install on every code change.\nCOPY requirements.txt ./\n\n# See ops/web-build.cloudbuild.yaml.  client-libs/ is copied into the website directory.\n# Here we copy it from the Docker context into the container.\nCOPY client-libs client-libs/\n\n# Install production dependencies.\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy local code to the container image.\nENV APP_HOME /app\nWORKDIR $APP_HOME\nCOPY . ./\n\n# Run the web service on container startup.\n# Use gunicorn webserver with one worker process and 8 threads.\n# For environments with multiple CPU cores, increase the number of workers\n# to be equal to the cores available. To increase CPU cores in Cloud Run, see\n# https://cloud.google.com/run/docs/configuring/cpu\nCMD exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 app:app\n"
}