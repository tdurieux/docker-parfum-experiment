{
  "startTime": 1674253999870,
  "endTime": 1674254000529,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 28,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# [START cloudrun_helloworld_dockerfile]\n# [START dockerfile]\n# We chose Alpine to build the image because it has good support for creating\n# statically-linked, small programs.\nFROM alpine:3.16 AS base\n\n# Create separate targets for each phase, this allows us to cache intermediate\n# stages when using Google Cloud Build, and makes the final deployment stage\n# small as it contains only what is needed.\nFROM base AS devtools\n\n# Install the typical development tools for C++, and\n# the base OS headers and libraries.\nRUN apk update && \\\n    apk add --no-cache \\\n        build-base \\\n        cmake \\\n        curl \\\n        git \\\n        gcc \\\n        g++ \\\n        libc-dev \\\n        linux-headers \\\n        ninja \\\n        pkgconfig \\\n        tar \\\n        unzip \\\n        zip\n\n# Use `vcpkg`, a package manager for C++, to install\nWORKDIR /usr/local/vcpkg\nENV VCPKG_FORCE_SYSTEM_BINARIES=1\nRUN curl -f -sSL \"https://github.com/Microsoft/vcpkg/archive/2022.06.15.tar.gz\" | \\\n    tar --strip-components=1 -zxf - \\\n    && ./bootstrap-vcpkg.sh -disableMetrics\n\n# Copy the source code to /v/source and compile it.\nFROM devtools AS build\nCOPY . /v/source\nWORKDIR /v/source\n\n# Run the CMake configuration step, setting the options to create\n# a statically linked C++ program\nRUN cmake -S/v/source -B/v/binary -GNinja \\\n    -DCMAKE_TOOLCHAIN_FILE=/usr/local/vcpkg/scripts/buildsystems/vcpkg.cmake \\\n    -DCMAKE_BUILD_TYPE=Release\n\n# Compile the binary and strip it to reduce its size.\nRUN cmake --build /v/binary\nRUN strip /v/binary/cloud_run_hello\n\n# Create the final deployment image, using `scratch` (the empty Docker image)\n# as the starting point. Effectively we create an image that only contains\n# our program.\nFROM scratch AS cloud-run-hello\nWORKDIR /r\n\n# Copy the program from the previously created stage and the shared libraries it\n# depends on.\nCOPY --from=build /v/binary/cloud_run_hello /r\nCOPY --from=build /lib/ld-musl-x86_64.so.1 /lib/ld-musl-x86_64.so.1\nCOPY --from=build /usr/lib/libstdc++.so.6 /usr/lib/libstdc++.so.6\nCOPY --from=build /usr/lib/libgcc_s.so.1 /usr/lib/libgcc_s.so.1\n\n# Make the program the entry point.\nENTRYPOINT [ \"/r/cloud_run_hello\" ]\n# [END dockerfile]\n# [END cloudrun_helloworld_dockerfile]\n"
}