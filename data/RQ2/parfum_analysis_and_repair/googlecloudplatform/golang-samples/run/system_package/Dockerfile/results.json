{
  "startTime": 1674255871111,
  "endTime": 1674255872134,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 40,
        "columnStart": 25,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 40,
        "columnStart": 25,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Use the offical Golang image to create a build artifact.\n# https://hub.docker.com/_/golang\nFROM golang:1.17-buster as builder\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Retrieve application dependencies.\n# This allows the container build to reuse cached dependencies.\n# Expecting to copy go.mod and if present go.sum.\nCOPY go.* ./\nRUN go mod download\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the binary.\nRUN go build -v -o server\n# Use a Docker multi-stage build to create a lean production image.\n# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds\n# https://hub.docker.com/_/ubuntu\nFROM ubuntu\n\n# [START cloudrun_system_package_ubuntu]\n# [START run_system_package_ubuntu]\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n  graphviz \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*;\n# [END run_system_package_ubuntu]\n# [END cloudrun_system_package_ubuntu]\n\n# Copy the binary to the production image from the builder stage.\nCOPY --from=builder /app/server /server\n\n# Run the web service on container startup.\nCMD [\"/server\"]\n"
}