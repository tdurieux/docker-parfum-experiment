{
  "startTime": 1674253201668,
  "endTime": 1674253203178,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 173,
        "lineEnd": 173,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\nFROM ubuntu:latest\n\nUSER root\n# Install all OS dependencies for notebook server that starts but lacks all\n# features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n    apt-transport-https \\\n    build-essential \\\n    bzip2 \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    fonts-liberation \\\n    g++ \\\n    git \\\n    inkscape \\\n    jed \\\n    libav-tools \\\n    libcupti-dev \\\n    libsm6 \\\n    libxext-dev \\\n    libxrender1 \\\n    lmodern \\\n    locales \\\n    lsb-release \\\n    openssh-client \\\n    pandoc \\\n    pkg-config \\\n    python \\\n    python-dev \\\n    sudo \\\n    unzip \\\n    vim \\\n    wget \\\n    zip \\\n    zlib1g-dev \\\n    && apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n    locale-gen\n\n# Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini && \\\n    echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0  *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\n# Configure environment\nENV CONDA_DIR /opt/conda\nENV PATH $CONDA_DIR/bin:$PATH\nENV SHELL /bin/bash\nENV NB_USER jovyan\nENV NB_UID 1000\nENV HOME /home/$NB_USER\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n# Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    mkdir -p $CONDA_DIR && \\\n    chown $NB_USER $CONDA_DIR\n\nUSER $NB_USER\n\n# Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n\n# Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION 4.3.21\nRUN cd /tmp && \\\n    mkdir -p $CONDA_DIR && \\\n    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - && \\\n    /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \\\n    rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    $CONDA_DIR/bin/conda config --system --prepend channels conda-forge && \\\n    $CONDA_DIR/bin/conda config --system --set auto_update_conda false && \\\n    $CONDA_DIR/bin/conda config --system --set show_channel_urls true && \\\n    $CONDA_DIR/bin/conda update --all && \\\n    conda clean -tipsy\n\n# Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes \\\n    'notebook=5.0.*' \\\n    'jupyterhub=0.8.1' \\\n    'jupyterlab=0.24.*' \\\n    && conda clean -tipsy\n\nUSER root\n\nEXPOSE 8888\nWORKDIR $HOME\n\n# Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n\n# Add local files as late as possible to avoid cache busting\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n\n# Install CUDA Profile Tools\nRUN pip --no-cache-dir install \\\n        Pillow \\\n\th5py \\\n\tipykernel \\\n\tmatplotlib \\\n\tnumpy \\\n\tpandas \\\n\tscipy \\\n\tsklearn \\\n\tkubernetes \\\n\tgrpcio \\\n\t&& \\\n\tpython -m ipykernel.kernelspec\n\n# Install Python 3 packages\n# Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n# use notebook-friendly backends in these images\nRUN conda install --quiet --yes \\\n    'nomkl' \\\n    'ipywidgets=6.0*' \\\n    'pandas=0.19*' \\\n    'numexpr=2.6*' \\\n    'matplotlib=2.0*' \\\n    'scipy=0.19*' \\\n    'seaborn=0.7*' \\\n    'scikit-learn=0.18*' \\\n    'scikit-image=0.12*' \\\n    'sympy=1.0*' \\\n    'cython=0.25*' \\\n    'patsy=0.4*' \\\n    'statsmodels=0.8*' \\\n    'cloudpickle=0.2*' \\\n    'dill=0.2*' \\\n    'numba=0.31*' \\\n    'bokeh=0.12*' \\\n    'sqlalchemy=1.1*' \\\n    'hdf5=1.8.17' \\\n    'h5py=2.6*' \\\n    'vincent=0.4.*' \\\n    'beautifulsoup4=4.5.*' \\\n    'xlrd'  && \\\n    conda remove --quiet --yes --force qt pyqt && \\\n    conda clean -tipsy\n\n# Install Python 3 Tensorflow without GPU support\nRUN pip install --quiet --no-cache-dir tf-nightly\n\nENV CLOUD_SDK_VERSION 168.0.0\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" && \\\n    echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list && \\\n    curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y google-cloud-sdk=${CLOUD_SDK_VERSION}-0 kubectl && \\\n    gcloud config set core/disable_usage_reporting true && \\\n    gcloud config set component_manager/disable_update_check true && \\\n    gcloud config set metrics/environment github_docker_image && rm -rf /var/lib/apt/lists/*;\n\n# Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\n\nRUN chown -R $NB_USER /home/$NB_USER/\n\nRUN curl -f -L -o bazel.sh https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-installer-linux-x86_64.sh && chmod a+x ./bazel.sh && ./bazel.sh && rm ./bazel.sh\nUSER $NB_USER\nRUN git clone https://github.com/tensorflow/models.git /home/$NB_USER/tensorflow-models && git clone https://github.com/tensorflow/benchmarks.git /home/$NB_USER/tensorflow-benchmarks\nRUN conda create -n ipykernel_py2 python=2 ipykernel && python -m ipykernel install --user\n# Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME /home/$NB_USER/.cache/\nRUN pip install --no-cache-dir jupyter-tensorboard\n\nENV PATH=/home/jovyan/bin:$PATH\n"
}