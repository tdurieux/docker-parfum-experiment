{
  "startTime": 1674254607422,
  "endTime": 1674254608972,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 5,
        "columnEnd": 115
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 128,
        "lineEnd": 134,
        "columnStart": 5,
        "columnEnd": 21
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 60,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 20,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# We want to use LTS ubuntu from our mirror because dockerhub has a\n# rate limit.\n# FROM mirror.gcr.io/library/ubuntu:18.04\n# However, now the above image is not working, we're using our own cache\nFROM gcr.io/cloud-devrel-kokoro-resources/ubuntu:20.04\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Ensure local Python is preferred over distribution Python.\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# At the moment, setting \"LANG=C\" on a Linux system fundamentally breaks\n# Python 3.\nENV LANG C.UTF-8\n\n# Install dependencies.\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n  apt-transport-https \\\n  build-essential \\\n  ca-certificates \\\n  curl \\\n  dirmngr \\\n  git \\\n  gcc \\\n  gpg-agent \\\n  graphviz \\\n  libbz2-dev \\\n  libdb5.3-dev \\\n  libexpat1-dev \\\n  libffi-dev \\\n  liblzma-dev \\\n  libmagickwand-dev \\\n  libmemcached-dev \\\n  libpython3-dev \\\n  libreadline-dev \\\n  libsnappy-dev \\\n  libssl-dev \\\n  libsqlite3-dev \\\n  portaudio19-dev \\\n  pkg-config \\\n  redis-server \\\n  software-properties-common \\\n  ssh \\\n  sudo \\\n  systemd \\\n  tcl \\\n  tcl-dev \\\n  tk \\\n  tk-dev \\\n  uuid-dev \\\n  wget \\\n  zlib1g-dev \\\n  && apt-get clean autoclean \\\n  && apt-get autoremove -y \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && rm -f /var/cache/apt/archives/*.deb\n\n# Install docker\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nRUN add-apt-repository \\\n  \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) \\\n  stable\"\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n  docker-ce \\\n  && apt-get clean autoclean \\\n  && apt-get autoremove -y \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && rm -f /var/cache/apt/archives/*.deb\n\n# Install Bazel for compiling Tink in Cloud SQL Client Side Encryption Samples\n# TODO: Delete this section once google/tink#483 is resolved\nRUN apt install --no-install-recommends -y curl gpgconf gpg \\\n  && curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --batch --dearmor > bazel.gpg \\\n  && mv bazel.gpg /etc/apt/trusted.gpg.d/ \\\n  && echo \"deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list \\\n  && apt update && apt install --no-install-recommends -y bazel \\\n  && apt-get clean autoclean \\\n  && apt-get autoremove -y \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && rm -f /var/cache/apt/archives/*.deb\n\n# Install Microsoft ODBC 17 Driver and unixodbc for testing SQL Server samples\nRUN curl -f https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n  && curl -f https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n  && apt-get update \\\n  && ACCEPT_EULA=Y apt-get install -y --no-install-recommends \\\n  msodbcsql17 \\\n  unixodbc-dev \\\n  && apt-get clean autoclean \\\n  && apt-get autoremove -y \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && rm -f /var/cache/apt/archives/*.deb\n\nCOPY fetch_gpg_keys.sh /tmp\n# Install the desired versions of Python.\nRUN set -ex \\\n  && export GNUPGHOME=\"$(mktemp -d)\" \\\n  && echo \"disable-ipv6\" >> \"${GNUPGHOME}/dirmngr.conf\" \\\n  && /tmp/fetch_gpg_keys.sh \\\n  && for PYTHON_VERSION in 2.7.18 3.7.12 3.8.13 3.9.13 3.10.5; do \\\n  wget --no-check-certificate -O python-${PYTHON_VERSION}.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n  && wget --no-check-certificate -O python-${PYTHON_VERSION}.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n  && gpg --batch --verify python-${PYTHON_VERSION}.tar.xz.asc python-${PYTHON_VERSION}.tar.xz \\\n  && rm -r python-${PYTHON_VERSION}.tar.xz.asc \\\n  && mkdir -p /usr/src/python-${PYTHON_VERSION} \\\n  && tar -xJC /usr/src/python-${PYTHON_VERSION} --strip-components=1 -f python-${PYTHON_VERSION}.tar.xz \\\n  && rm python-${PYTHON_VERSION}.tar.xz \\\n  && cd /usr/src/python-${PYTHON_VERSION} \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --enable-shared \\\n  # This works only on Python 2.7 and throws a warning on every other\n  # version, but seems otherwise harmless.\n  --enable-unicode=ucs4 \\\n  --with-system-ffi \\\n  --without-ensurepip \\\n  && make -j$(nproc) \\\n  && make install \\\n  && ldconfig \\\n  ; done \\\n  && rm -rf \"${GNUPGHOME}\" \\\n  && rm -rf /usr/src/python* \\\n  && rm -rf ~/.cache/\n\n\n# Install pip on Python 3.10 only.\n# If the environment variable is called \"PIP_VERSION\", pip explodes with\n# \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 21.3.1\nRUN wget --no-check-certificate -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n  && python3.10 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n  # we use \"--force-reinstall\" for the case where the version of pip we're trying to install is the same as the version bundled with Python\n  # (\"Requirement already up-to-date: pip==8.1.2 in /usr/local/lib/python3.10/site-packages\")\n  # https://github.com/docker-library/python/pull/143#issuecomment-241032683\n  && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n  # then we use \"pip list\" to ensure we don't have more than one pip version installed\n  # https://github.com/docker-library/python/pull/100\n  && [ \"$(pip list |tac|tac| awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }')\" = \"$PYTHON_PIP_VERSION\" ]\n\n# Ensure Pip for all python3 versions\nRUN python3.9 /tmp/get-pip.py\nRUN python3.8 /tmp/get-pip.py\nRUN python3.7 /tmp/get-pip.py\nRUN rm /tmp/get-pip.py\n\n# Test Pip\nRUN python3 -m pip\nRUN python3.7 -m pip\nRUN python3.8 -m pip\nRUN python3.9 -m pip\nRUN python3.10 -m pip\n\n# Install \"virtualenv\", since the vast majority of users of this image\n# will want it.\nRUN pip install --no-cache-dir virtualenv\n\n# Setup Cloud SDK\nENV CLOUD_SDK_VERSION 389.0.0\n# Use system python for cloud sdk.\nENV CLOUDSDK_PYTHON python3.10\nRUN wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$CLOUD_SDK_VERSION-linux-x86_64.tar.gz\nRUN tar xzf google-cloud-sdk-$CLOUD_SDK_VERSION-linux-x86_64.tar.gz && rm google-cloud-sdk-$CLOUD_SDK_VERSION-linux-x86_64.tar.gz\nRUN /google-cloud-sdk/install.sh\nENV PATH /google-cloud-sdk/bin:$PATH\n\n# Enable redis-server on boot.\nRUN sudo systemctl enable redis-server.service\n\n# Create a user and allow sudo\n\n# kbuilder uid on the default Kokoro image\nARG UID=1000\nARG USERNAME=kbuilder\n\n# Add a new user to the container image.\n# This is needed for ssh and sudo access.\n\n# Add a new user with the caller's uid and the username.\nRUN useradd -d /h -u ${UID} ${USERNAME}\n\n# Allow nopasswd sudo\nRUN echo \"${USERNAME} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n\nCMD [\"python3\"]\n"
}