{
  "startTime": 1674248042426,
  "endTime": 1674248042942,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "<% if (config.hasBuildCommand) { %>\nFROM <%- baseImage %> as build_step\nCOPY . /app/\n<% if (config.canInstallDeps) { %>\n  <% if (config.useYarn) { %>\nRUN NODE_ENV=development yarn install || \\\n  ((if [ -f yarn-error.log ]; then \\\n      cat yarn-error.log; \\\n    fi) && false) && yarn cache clean;\n  <% } else { %>\n# You have to specify \"--unsafe-perm\" with npm install\n# when running as root.  Failing to do this can cause\n# install to appear to succeed even if a preinstall\n# script fails, and may have other adverse consequences\n# as well.\n# This command will also cat the npm-debug.log file after the\n# build, if it exists.\nRUN NODE_ENV=development npm install --unsafe-perm || \\\n  ((if [ -f npm-debug.log ]; then \\\n      cat npm-debug.log; \\\n    fi) && false) && npm cache clean --force;\n  <% } %>\n<% } %>\nRUN npm run gcp-build\n  <% if (config.canInstallDeps) { %>\nRUN rm -Rf node_modules\n  <% } %>\n\nFROM build_step\nCOPY --from=build_step /app .\n<% } else { %>\n# Dockerfile extending the generic Node image with application files for a\n# single application.\nFROM <%- baseImage %>\nCOPY . /app/\n<% } %>\n\n<% if (config.nodeVersion) { %>\n# Check to see if the the version included in the base runtime satisfies\n# '<%- config.nodeVersion %>' and, if not, install a version of Node.js that does satisfy it.\nRUN /usr/local/bin/install_node '<%- config.nodeVersion %>'\n<% } %>\n\n<% if (config.npmVersion && !config.useYarn) { %>\n# Install the version of npm as requested by the engines.npm field in\n# package.json.\n#\n# The package manager yarn is used to perform the installation because\n# there is a known issue with installing npm globally during a Docker build.\n# See npm issue #9863 at https://github.com/npm/npm/issues/9863 for more\n# information.\nRUN yarn global add npm@'<%- config.npmVersion %>'\n<% } %>\n\n<% if (config.yarnVersion && config.useYarn) { %>\n# Install the version of yarn as requested by the engines.yarn field in\n# package.json.\nRUN yarn global add yarn@'<%- config.yarnVersion %>'\n<% } %>\n\n<% if (config.canInstallDeps) { %>\n  <% if (config.useYarn) { %>\nRUN yarn install --production || \\\n  ((if [ -f yarn-error.log ]; then \\\n      cat yarn-error.log; \\\n    fi) && false) && yarn cache clean;\n  <% } else { %>\n# You have to specify \"--unsafe-perm\" with npm install\n# when running as root.  Failing to do this can cause\n# install to appear to succeed even if a preinstall\n# script fails, and may have other adverse consequences\n# as well.\n# This command will also cat the npm-debug.log file after the\n# build, if it exists.\nRUN npm install --unsafe-perm || \\\n  ((if [ -f npm-debug.log ]; then \\\n      cat npm-debug.log; \\\n    fi) && false) && npm cache clean --force;\n  <% } %>\n<% } %>\n\nCMD <%- tool %> start\n"
}