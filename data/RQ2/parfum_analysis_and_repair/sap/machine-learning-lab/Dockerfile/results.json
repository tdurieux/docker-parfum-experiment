{
  "startTime": 1674218377687,
  "endTime": 1674218379446,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 5,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 5,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# Install nginx (see http://nginx.org/en/linux_packages.html#Ubuntu)\nRUN \\\n    apt-get update \\\n    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates lsb-release \\\n    && echo \"deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx\" | tee /etc/apt/sources.list.d/nginx.list \\\n    && curl -fsSL https://nginx.org/keys/nginx_signing.key | apt-key add - \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends nginx \\\n    && apt-get install --no-install-recommends -y nginx-module-njs && rm -rf /var/lib/apt/lists/*;\n\n# Install python3 and pip\nRUN \\\n    apt-get update \\\n    && apt-get install --no-install-recommends -y python3.8 python3-pip \\\n    && ln -s /usr/bin/python3.8 /usr/bin/python && rm -rf /var/lib/apt/lists/*;\n\n# Install lib required for psycopg2\nRUN \\\n  apt-get update \\\n  && apt-get install --no-install-recommends -y libpq-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install gunicorn and uvicorn to run FastAPI optimized\nRUN pip install --no-cache-dir \"uvicorn[standard]\" gunicorn fastapi faker\n\nRUN mkdir /resources\n\n## Compile the OpenSSH module manually\n## Download from here: https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/\nRUN mkdir /var/run/sshd && \\\n    mkdir /root/.ssh && \\\n    mkdir /var/lib/sshd && \\\n    chmod -R 700 /var/lib/sshd/ && \\\n    chown -R root:sys /var/lib/sshd/ && \\\n    useradd -r -U -d /var/lib/sshd/ -c \"sshd privsep\" -s /bin/false sshd && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y libssl-dev zlib1g-dev wget && \\\n    cd /resources && \\\n    wget \"https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-8.3p1.tar.gz\" && \\\n    tar xfz openssh-8.3p1.tar.gz && \\\n    cd /resources/openssh-8.3p1/ && \\\n    # modify the code where the 'PermitOpen' host is checked so that it supports regexes\n    sed -i \"s@strcmp(allowed_open->host_to_connect, requestedhost) != 0@strcmp(allowed_open->host_to_connect, requestedhost) != 0 \\&\\& match_hostname(requestedhost, allowed_open->host_to_connect) == 0@g\" ./channels.c && \\\n    # Surpress output - if there is a problem remove to see logs > /dev/null\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" > /dev/null && \\\n    make > /dev/null && \\\n    make install > /dev/null && \\\n    # filelock is needed for our custom AuthorizedKeysCommand script in the OpenSSH server\n    pip install --no-cache-dir filelock && \\\n    # Python docker / kubernetes client is needed for caching the authorized keys in Docker or Kubernetes mode\n    apt-get install --no-install-recommends -y python3-setuptools && \\\n    pip install --no-cache-dir kubernetes && \\\n    pip install --no-cache-dir docker && rm openssh-8.3p1.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n## Create user for ssh\n# https://gist.github.com/smoser/3e9430c51e23e0c0d16c359a2ca668ae\n# https://www.tecmint.com/restrict-ssh-user-to-directory-using-chrooted-jail/\n# http://www.ab-weblog.com/en/creating-a-restricted-ssh-user-for-ssh-tunneling-only/\nRUN useradd -d /home/limited-user -m -s /bin/true --gid nogroup --skel /dev/null --create-home limited-user && \\\n    #chmod 755 /home/limited-user && \\\n    #chmod g+rwx /home/limited-user && \\\n    echo 'PATH=\"\"' >> /home/limited-user/.profile && \\\n    echo 'limited-user:limited' |chpasswd && \\\n    chmod 555 /home/limited-user/ && \\\n    cd /home/limited-user/ && \\\n    # .bash_logout .bashrc\n    chmod 444 .profile && \\\n    chown root:root /home/limited-user/\n\n## Install sslh server to multiplex http/s and ssh traffic\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y sslh && rm -rf /var/lib/apt/lists/*;\n\nCOPY docker/ssh/* /etc/ssh/\n\nENV PYTHONPATH=/resources/app \\\n    MODULE_NAME=contaxy.api \\\n    IS_CONTAXY_CONTAINER=true \\\n    SYSTEM_NAMESPACE=pylab \\\n    _SSL_RESOURCES_PATH=/resources/ssl \\\n    JWT_TOKEN_SECRET=please-change-this-secret \\\n    WEB_CONCURRENCY=\"1\" \\\n    SSH_TARGET_LABELS=\"ctxy.deploymentType=service\" \\\n    SSH_TARGET_PUBLICKEY_API_PORT=\"8080\" \\\n    SSH_PERMIT_TARGET_HOST=\"*\" \\\n    SSH_TARGET_KEY_PATH=\"~/.ssh/id_ed25519.pub\"\n\nRUN mkdir ${_SSL_RESOURCES_PATH}\n\n# Install Contaxy\nRUN pip install --no-cache-dir \"contaxy[server]==0.0.19\"\n# Uncomment lines below if you want to install your local contaxy code (useful when developing contaxy features)\n# By only copying the setup.py first, only the dependencies are installed which leads to faster docker builds on code changes\n# COPY ./contaxy/backend/setup.py /resources/app/contaxy/\n# RUN pip install /resources/app/contaxy[server]\n# COPY ./contaxy/backend /resources/app/contaxy\n# RUN pip install /resources/app/contaxy[server]\n\nCOPY ./docker/server/start.sh /resources/start.sh\nRUN chmod +x /resources/start.sh\n\nCOPY ./docker/entrypoint.sh /resources/entrypoint.sh\nRUN chmod +x /resources/entrypoint.sh\n\n\nCOPY ./docker/default_env.txt /resources/default_env.txt\nCOPY ./docker/create_env-config-js.sh /resources/create_env-config-js.sh\nRUN chmod +x /resources/create_env-config-js.sh\n\nCOPY ./docker/server/gunicorn_conf.py /gunicorn_conf.py\n\nCOPY docker/nginx /etc/nginx\nCOPY docker/setup-certs.sh /resources/setup-certs.sh\nRUN chmod +x /resources/setup-certs.sh\nCOPY webapp/build /resources/webapp\n\nLABEL org.opencontainers.image.source https://github.com/SAP/machine-learning-lab\n\nENTRYPOINT [\"/bin/bash\"]\nCMD [\"/resources/entrypoint.sh\"]\n"
}