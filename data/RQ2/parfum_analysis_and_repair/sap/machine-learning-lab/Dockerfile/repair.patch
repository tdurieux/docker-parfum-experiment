diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/sap/machine-learning-lab/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/sap/machine-learning-lab/Dockerfile/repaired.Dockerfile
index 92785c9..2e8adf8 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/sap/machine-learning-lab/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/sap/machine-learning-lab/Dockerfile/repaired.Dockerfile
@@ -3,23 +3,23 @@ FROM ubuntu:20.04
 # Install nginx (see http://nginx.org/en/linux_packages.html#Ubuntu)
 RUN \
     apt-get update \
-    && apt-get install -y curl gnupg2 ca-certificates lsb-release \
+    && apt-get install --no-install-recommends -y curl gnupg2 ca-certificates lsb-release \
     && echo "deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx" | tee /etc/apt/sources.list.d/nginx.list \
     && curl -fsSL https://nginx.org/keys/nginx_signing.key | apt-key add - \
     && apt-get update \
-    && apt-get install nginx \
-    && apt-get install -y nginx-module-njs
+    && apt-get install -y --no-install-recommends nginx \
+    && apt-get install --no-install-recommends -y nginx-module-njs && rm -rf /var/lib/apt/lists/*;
 
 # Install python3 and pip
 RUN \
     apt-get update \
-    && apt-get install -y python3.8 python3-pip \
-    && ln -s /usr/bin/python3.8 /usr/bin/python
+    && apt-get install --no-install-recommends -y python3.8 python3-pip \
+    && ln -s /usr/bin/python3.8 /usr/bin/python && rm -rf /var/lib/apt/lists/*;
 
 # Install lib required for psycopg2
 RUN \
   apt-get update \
-  && apt-get install -y libpq-dev
+  && apt-get install --no-install-recommends -y libpq-dev && rm -rf /var/lib/apt/lists/*;
 
 # Install gunicorn and uvicorn to run FastAPI optimized
 RUN pip install --no-cache-dir "uvicorn[standard]" gunicorn fastapi faker
@@ -35,7 +35,7 @@ RUN mkdir /var/run/sshd && \
     chown -R root:sys /var/lib/sshd/ && \
     useradd -r -U -d /var/lib/sshd/ -c "sshd privsep" -s /bin/false sshd && \
     apt-get update && \
-    apt-get install -y libssl-dev zlib1g-dev wget && \
+    apt-get install --no-install-recommends -y libssl-dev zlib1g-dev wget && \
     cd /resources && \
     wget "https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-8.3p1.tar.gz" && \
     tar xfz openssh-8.3p1.tar.gz && \
@@ -43,15 +43,15 @@ RUN mkdir /var/run/sshd && \
     # modify the code where the 'PermitOpen' host is checked so that it supports regexes
     sed -i "s@strcmp(allowed_open->host_to_connect, requestedhost) != 0@strcmp(allowed_open->host_to_connect, requestedhost) != 0 \&\& match_hostname(requestedhost, allowed_open->host_to_connect) == 0@g" ./channels.c && \
     # Surpress output - if there is a problem remove to see logs > /dev/null
-    ./configure > /dev/null  && \
-    make > /dev/null  && \
-    make install > /dev/null  && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" > /dev/null && \
+    make > /dev/null && \
+    make install > /dev/null && \
     # filelock is needed for our custom AuthorizedKeysCommand script in the OpenSSH server
     pip install --no-cache-dir filelock && \
     # Python docker / kubernetes client is needed for caching the authorized keys in Docker or Kubernetes mode
-    apt-get install -y python3-setuptools && \
+    apt-get install --no-install-recommends -y python3-setuptools && \
     pip install --no-cache-dir kubernetes && \
-    pip install --no-cache-dir docker
+    pip install --no-cache-dir docker && rm openssh-8.3p1.tar.gz && rm -rf /var/lib/apt/lists/*;
 
 ## Create user for ssh
 # https://gist.github.com/smoser/3e9430c51e23e0c0d16c359a2ca668ae
@@ -70,7 +70,7 @@ RUN useradd -d /home/limited-user -m -s /bin/true --gid nogroup --skel /dev/null
 
 ## Install sslh server to multiplex http/s and ssh traffic
 RUN apt-get update && \
-    DEBIAN_FRONTEND=noninteractive apt-get install -y sslh
+    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y sslh && rm -rf /var/lib/apt/lists/*;
 
 COPY docker/ssh/* /etc/ssh/
 
@@ -89,7 +89,7 @@ ENV PYTHONPATH=/resources/app \
 RUN mkdir ${_SSL_RESOURCES_PATH}
 
 # Install Contaxy
-RUN pip install "contaxy[server]==0.0.19"
+RUN pip install --no-cache-dir "contaxy[server]==0.0.19"
 # Uncomment lines below if you want to install your local contaxy code (useful when developing contaxy features)
 # By only copying the setup.py first, only the dependencies are installed which leads to faster docker builds on code changes
 # COPY ./contaxy/backend/setup.py /resources/app/contaxy/