{
  "startTime": 1674253005718,
  "endTime": 1674253006614,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 22,
        "columnEnd": 105
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 22,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n# Build Image\nFROM elixir:1.12-slim as build\nLABEL maintainer \"Christophe De Troyer <christophe@call-cc.be>\"\n\n# Install compile-time dependencies\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y git nodejs npm yarn python3 && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /app\nWORKDIR /app\n\n# Install Hex and Rebar\nRUN mix do local.hex --force, local.rebar --force\n\n# set build ENV\nENV MIX_ENV=prod\n\n# install mix dependencies\nCOPY mix.exs mix.lock ./\nCOPY config config\nRUN mix deps.get --only $MIX_ENV\nRUN mix deps.compile\n\n# Build web assets.\nCOPY assets assets\nRUN npm install --prefix ./assets && npm run deploy --prefix ./assets && npm cache clean --force;\nRUN mix phx.digest\n\n# Compile entire project.\nCOPY priv priv\nCOPY lib lib\nCOPY rel rel\nRUN mix compile\n\n# Build the entire release.\nRUN mix release\n\n################################################################################\n# Release Image\n\nFROM debian:stable-slim AS app\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y openssl postgresql-client locales && rm -rf /var/lib/apt/lists/*;\n\n# Set the locale\n# Set the locale\nRUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \\\n    locale-gen\nENV LANG en_US.UTF-8 \nENV LANGUAGE en_US:en \nENV LC_ALL en_US.UTF-8    \n\nENV MIX_ENV=prod\n\n# Make the working directory for the application.\nRUN mkdir /app\nWORKDIR /app\n\n# Copy release from build container to this container.\nCOPY --from=build /app/_build/prod/rel/ .\nCOPY entrypoint.sh .\nRUN chown -R nobody: /app\nUSER nobody\n\nENV HOME=/app\nCMD [\"bash\", \"/app/entrypoint.sh\"]\n# CMD [\"sleep\", \"1h\"]"
}