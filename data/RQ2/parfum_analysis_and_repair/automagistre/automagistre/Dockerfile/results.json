{
  "startTime": 1674217164160,
  "endTime": 1674217166170,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 7,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 328,
        "lineEnd": 328,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 333,
        "lineEnd": 333,
        "columnStart": 7,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 338,
        "lineEnd": 338,
        "columnStart": 7,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 342,
        "lineEnd": 342,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 17,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 17,
        "columnEnd": 58
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 27,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 20
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 33,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 20
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 43,
        "lineEnd": 44,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 50,
        "lineEnd": 51,
        "columnStart": 7,
        "columnEnd": 22
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 71,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 15
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 86,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 22
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 141,
        "lineEnd": 158,
        "columnStart": 7,
        "columnEnd": 14
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 236,
        "lineEnd": 253,
        "columnStart": 7,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 327,
        "lineEnd": 327,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 331,
        "lineEnd": 331,
        "columnStart": 7,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 335,
        "lineEnd": 335,
        "columnStart": 7,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 326,
        "lineEnd": 326,
        "columnStart": 7,
        "columnEnd": 158
      }
    }
  ],
  "repairedDockerfile": "#\n# Composer\n#\nFROM composer:2.3.3 as composer\n\n#\n# PHP\n#\nFROM php:8.1.4-fpm-alpine3.15 as php-raw\n\nLABEL MAINTAINER=\"Konstantin Grachev <me@grachevko.ru>\"\n\nENV APP_DIR=/usr/local/app\nENV PATH=${APP_DIR}/bin:${APP_DIR}/vendor/bin:${PATH}\n\nWORKDIR ${APP_DIR}\n\n#\n# > PHP EXTENSIONS\n#\nENV PHP_EXT_DIR /usr/local/lib/php/extensions/no-debug-non-zts-20210902\nRUN set -ex \\\n    && if [ `pear config-get ext_dir` != ${PHP_EXT_DIR} ]; then echo PHP_EXT_DIR must be `pear config-get ext_dir` && exit 1; fi\n\nFROM php-raw AS php-build\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache --update-cache \\\n        $PHPIZE_DEPS\n\nFROM php-build AS php-ext-gd\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache \\\n        libpng-dev \\\n        libjpeg-turbo-dev \\\n        freetype-dev \\\n    && docker-php-ext-configure gd --with-freetype --with-jpeg \\\n    && docker-php-ext-install gd\n\nFROM php-build AS php-ext-zip\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache \\\n        libzip-dev \\\n    && docker-php-ext-install zip\n\nFROM php-build AS php-ext-pdo\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache \\\n        postgresql-dev \\\n    && docker-php-ext-install pdo_pgsql\n\nFROM php-build AS php-ext-iconv\nRUN set -ex \\\n    && docker-php-ext-install iconv\n\nFROM php-build AS php-ext-pcntl\nRUN set -ex \\\n    && docker-php-ext-install pcntl\n\nFROM php-build AS php-ext-sockets\n# Can be removed after released https://github.com/php/php-src/issues/7986\nENV CFLAGS=\"$CFLAGS -D_GNU_SOURCE\"\nRUN set -ex \\\n    && docker-php-ext-install sockets\n\nFROM php-build AS php-ext-intl\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache \\\n        icu-dev \\\n\t&& docker-php-ext-install intl\n\nFROM php-build AS php-ext-apcu\nRUN set -ex \\\n    && pecl install apcu\n\nFROM php-build AS php-ext-xdebug\nRUN set -ex \\\n    && pecl install xdebug\n\nFROM php-build AS php-ext-uuid\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache \\\n        util-linux-dev \\\n    && pecl install uuid\n\nFROM php-build AS php-ext-pcov\nRUN set -ex \\\n    && pecl install pcov\n\nFROM php-build AS php-ext-redis\nRUN set -ex \\\n    && pecl install redis\n\nFROM php-build AS php-ext-bcmath\nRUN set -ex \\\n    && docker-php-ext-install bcmath\n\nFROM php-build AS php-ext-buffer\nENV EXT_BUFFER_VERSION 0.1.0\nRUN set -ex \\\n    && curl -f -L https://github.com/phpinnacle/ext-buffer/archive/${EXT_BUFFER_VERSION}.tar.gz | tar xz \\\n    && cd ext-buffer-${EXT_BUFFER_VERSION} \\\n    && phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install\n\nFROM php-build AS php-ext-snappy\nENV EXT_SNAPPY_VERSION 0.2.1\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache snappy-dev \\\n    && curl -f -L https://github.com/kjdev/php-ext-snappy/archive/${EXT_SNAPPY_VERSION}.tar.gz | tar xz \\\n    && cd php-ext-snappy-${EXT_SNAPPY_VERSION} \\\n    && ls -al \\\n    && phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-snappy-includedir=/usr && make && make install\n#\n# < PHP EXTENSIONS\n#\n\nFROM php-raw AS php-base\nCOPY --from=php-ext-gd ${PHP_EXT_DIR}/gd.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-zip ${PHP_EXT_DIR}/zip.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-pdo ${PHP_EXT_DIR}/pdo_pgsql.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-pcntl ${PHP_EXT_DIR}/pcntl.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-sockets ${PHP_EXT_DIR}/sockets.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-intl ${PHP_EXT_DIR}/intl.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-intl /usr/local /usr/local\nCOPY --from=php-ext-apcu ${PHP_EXT_DIR}/apcu.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-xdebug ${PHP_EXT_DIR}/xdebug.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-uuid ${PHP_EXT_DIR}/uuid.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-pcov ${PHP_EXT_DIR}/pcov.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-bcmath ${PHP_EXT_DIR}/bcmath.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-buffer ${PHP_EXT_DIR}/buffer.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-snappy ${PHP_EXT_DIR}/snappy.so ${PHP_EXT_DIR}/\nCOPY --from=php-ext-redis ${PHP_EXT_DIR}/redis.so ${PHP_EXT_DIR}/\n\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache \\\n        # composer\n        git \\\n        # healcheck\n        fcgi \\\n        # ext-zip\n        libzip \\\n        # ext-gd\n        libpng \\\n        libjpeg-turbo \\\n        freetype \\\n        # ext-pdo_pgsql\n        libpq \\\n        # ext-uuid\n        libuuid \\\n        # ext-intl\n        icu \\\n        snappy \\\n    && docker-php-ext-enable \\\n        apcu \\\n        buffer \\\n        gd \\\n        intl \\\n        opcache \\\n        pcntl \\\n        pcov \\\n        bcmath \\\n        pdo_pgsql \\\n        snappy \\\n        sockets \\\n        uuid \\\n        redis \\\n        zip\n\nENV COMPOSER_ALLOW_SUPERUSER 1\nENV COMPOSER_MEMORY_LIMIT -1\nCOPY --from=composer /usr/bin/composer /usr/bin/composer\n\nCOPY etc/php.ini ${PHP_INI_DIR}/php.ini\nCOPY etc/php-fpm.conf /usr/local/etc/php-fpm.conf\nCOPY etc/php-fpm.www.conf /usr/local/etc/php-fpm.d/www.conf\n\nENV PHP_MEMORY_LIMIT 1G\nENV PHP_ZEND_ASSERTIONS 1\nENV PCOV_ENABLED 1\n\nFROM php-base as php\n\nENV APP_ENV prod\nENV APP_DEBUG 0\nENV PHP_OPCACHE_ENABLE 1\nENV PHP_ZEND_ASSERTIONS -1\nENV PCOV_ENABLED 0\nENV COMPOSER_CACHE_DIR /var/cache/composer\n\nCOPY composer.json composer.lock symfony.lock ./\nRUN --mount=type=cache,target=/var/cache/composer \\\n    set -ex \\\n    && composer install --no-interaction --no-progress --no-dev --no-plugins --profile --no-autoloader\n\nCOPY bin bin\nCOPY config config\nCOPY easyadmin easyadmin\nCOPY fork fork\nCOPY public public\nCOPY src src\nCOPY templates templates\nCOPY translations translations\n\nRUN --mount=type=cache,target=/var/cache/composer \\\n    set -ex \\\n    && composer dump-autoload --no-dev --no-plugins --profile --classmap-authoritative \\\n    && console cache:warmup \\\n    && console assets:install public \\\n    && chown -R www-data:www-data ${APP_DIR}/var\n\n#ENV PHP_OPCACHE_PRELOAD ${APP_DIR}/var/cache/prod/App_KernelProdContainer.preload.php\n\nHEALTHCHECK --interval=10s --timeout=5s --start-period=5s \\\n        CMD REDIRECT_STATUS=true SCRIPT_NAME=/ping SCRIPT_FILENAME=/ping REQUEST_METHOD=GET cgi-fcgi -bind -connect 127.0.0.1:9000\n\n#\n# nginx\n#\nFROM nginx:1.21.6-alpine as nginx-base\n\nWORKDIR /usr/local/app/public\n\nENV PHP_FPM_HOST php-fpm\n\nRUN --mount=type=cache,target=/var/cache/apk \\\n    set -ex \\\n    && apk add --no-cache gzip brotli \\\n    && tempDir=\"$(mktemp -d)\" \\\n    && chown nobody:nobody $tempDir \\\n    && apk add --no-cache --virtual .build-deps \\\n        gcc \\\n        libc-dev \\\n        make \\\n        openssl-dev \\\n        pcre-dev \\\n        zlib-dev \\\n        linux-headers \\\n        libxslt-dev \\\n        gd-dev \\\n        geoip-dev \\\n        perl-dev \\\n        libedit-dev \\\n        mercurial \\\n        bash \\\n        alpine-sdk \\\n        findutils \\\n        brotli-dev \\\n    && su nobody -s /bin/sh -c \" \\\n        export HOME=${tempDir} \\\n        && cd ${tempDir} \\\n        && curl -L https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar xz \\\n        && curl -L https://github.com/google/ngx_brotli/archive/v1.0.0rc.tar.gz | tar xz \\\n        && curl -L https://github.com/openresty/headers-more-nginx-module/archive/v0.33.tar.gz | tar xz \\\n        && cd nginx-${NGINX_VERSION} \\\n        && ./configure `2>&1 nginx -V | grep _module | awk -F ':' ' { print $2 }'` --with-compat \\\n            --add-dynamic-module=${tempDir}/ngx_brotli-1.0.0rc \\\n            --add-dynamic-module=${tempDir}/headers-more-nginx-module-0.33 \\\n        && make modules \\\n        \" \\\n    && cp ${tempDir}/nginx-${NGINX_VERSION}/objs/ngx_http_brotli_filter_module.so /etc/nginx/modules/ \\\n    && cp ${tempDir}/nginx-${NGINX_VERSION}/objs/ngx_http_brotli_static_module.so /etc/nginx/modules/ \\\n    && cp ${tempDir}/nginx-${NGINX_VERSION}/objs/ngx_http_headers_more_filter_module.so /etc/nginx/modules/ \\\n    && rm -rf ${tempDir} \\\n    && apk del .build-deps\n\nFROM nginx-base AS nginx\n\nENV NGINX_ENTRYPOINT_QUIET_LOGS 1\nENV PHP_FPM_HOST 127.0.0.1\n\nCOPY --from=php /usr/local/app/public/favicon.ico favicon.ico\nCOPY --from=php /usr/local/app/public/assets assets\nCOPY --from=php /usr/local/app/public/bundles bundles\nCOPY --from=php /usr/local/app/public/robots.txt .\n\nCOPY etc/nginx.conf /etc/nginx/nginx.conf\nCOPY etc/nginx.default.conf /etc/nginx/templates/default.conf.template\nCOPY etc/nginx.cors.conf /etc/nginx/cors.conf\nCOPY etc/nginx.cors-setup.conf /etc/nginx/cors.setup.conf\n\nRUN find . \\\n    -type f \\\n    \\( \\\n        -name \"*.css\" \\\n        -or -name \"*.eot\" \\\n        -or -name \"*.html\" \\\n        -or -name \"*.js\" \\\n        -or -name \"*.json\" \\\n        -or -name \"*.otf\" \\\n        -or -name \"*.svg\" \\\n        -or -name \"*.ttf\" \\\n        -or -name \"*.woff\" \\\n     \\) \\\n    -exec gzip -9 --name --suffix=.gz --keep {} \\; \\\n    -exec brotli --best --suffix=.br --keep {} \\; \\\n    -exec echo Compressed: {} \\;\n\nHEALTHCHECK --interval=5s --timeout=3s --start-period=5s CMD curl --fail http://127.0.0.1/healthcheck || exit 1\n\n#\n# Migrations\n#\nFROM busybox:stable as migrations\n\nWORKDIR /data\n\nCOPY migrations migrations\nCOPY metadata metadata\nCOPY config.yaml config.yaml\n\n#\n# PostgrSQL\n#\nFROM postgres:14.2-bullseye as postgres\n\nWORKDIR /tmp\n\nRUN --mount=type=cache,target=/var/cache/apt set -ex \\\n    && apt-get update  \\\n    && apt-get install -y --no-install-recommends build-essential cmake curl git postgresql-server-dev-$PG_MAJOR libkrb5-dev libicu-dev ca-certificates netcat \\\n\n    && curl -f -L https://github.com/timescale/timescaledb/archive/refs/tags/2.5.2.tar.gz | tar xz \\\n    && cd timescaledb-2.5.2 \\\n    && ./bootstrap \\\n    && cd build && make && make install \\\n\n    && curl -f -L https://github.com/theory/pgtap/archive/refs/tags/v1.2.0.tar.gz | tar xz \\\n    && cd pgtap-1.2.0 \\\n    && cpan TAP::Parser::SourceHandler::pgTAP \\\n    && make && make install \\\n\n    && curl -f -L https://github.com/okbob/plpgsql_check/archive/refs/tags/v2.1.2.tar.gz | tar xz \\\n    && cd plpgsql_check-2.1.2 \\\n    && make clean && make install \\\n\n    && curl -f -L https://github.com/citusdata/pg_cron/archive/refs/tags/v1.4.1.tar.gz | tar xz \\\n    && cd pg_cron-1.4.1 \\\n    && make && make install \\\n\n    && echo \"shared_preload_libraries = 'pg_cron, plpgsql, plpgsql_check, timescaledb'\" >> /usr/share/postgresql/postgresql.conf.sample \\\n    && apt-get purge -y build-essential cmake curl git postgresql-server-dev-$PG_MAJOR libkrb5-dev libicu-dev \\\n    && apt-get autoremove -y \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR $PG_DATA\n"
}