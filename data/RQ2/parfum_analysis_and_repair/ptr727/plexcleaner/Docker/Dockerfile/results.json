{
  "startTime": 1674253416817,
  "endTime": 1674253417778,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 9,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 9,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 9,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 9,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 7,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Test in docker shell:\n# docker run -it --rm --pull always --name Testing ubuntu:latest /bin/bash\n# export DEBIAN_FRONTEND=noninteractive\n\n\n# Test in develop shell:\n# docker run -it --rm --pull always --name Testing --volume /data/media:/media:rw ptr727/plexcleaner:develop /bin/bash\n\n\n# Test Docker build:\n# dotnet publish ./PlexCleaner/PlexCleaner.csproj --runtime linux-x64 --self-contained false --output ./Docker/PlexCleaner\n# docker build ./Docker\n\n# Ignore docker layer cache:\n# docker build --no-cache ./Docker\n\n# Set arguments:\n# docker build --build-arg DBGTOOL_INSTALL=True ./Docker\n\n# Pass container output instead of buildkit suppressing it:\n# docker build --progress=plain --build-arg DBGTOOL_INSTALL=True ./Docker\n\n# Build from Ubuntu LTS as base image\nFROM ubuntu:latest\n\n# Set the version at build time\nARG LABEL_VERSION=\"1.0.0.0\"\n\nLABEL name=\"PlexCleaner\" \\\n    version=${LABEL_VERSION} \\\n    description=\"Utility to optimize media files for Direct Play in Plex, Emby, Jellyfin\" \\\n    maintainer=\"Pieter Viljoen <ptr727@users.noreply.github.com>\"\n\n# Default timezone is UTC\nENV TZ=Etc/UTC\n\n# Prevent EULA and confirmation prompts in installers\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install prerequisites\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install --no-install-recommends -y \\\n        apt-transport-https \\\n        apt-utils \\\n        locales \\\n        locales-all \\\n        lsb-core \\\n        p7zip-full \\\n        software-properties-common \\\n        wget \\\n    && locale-gen --no-purge en_US en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\n\n# Set locale to UTF-8 after running locale-gen\nENV LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US:en \\\n    LC_ALL=en_US.UTF-8\n\n# TODO: Build could be optimized by combining RUN layers, but that makes troubleshooting more difficult\n\n\n# Install .NET 6 Runtime\n# https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu\n# TODO: Substitute ubuntu with $(lsb_release -si | tr '[:upper:]' '[:lower:]')\n\n# Follow pattern used in .NET Dockerfile\n# https://github.com/dotnet/dotnet-docker/blob/main/src/sdk/6.0/focal/amd64/Dockerfile\nENV DOTNET_RUNNING_IN_CONTAINER=true \\\n    DOTNET_USE_POLLING_FILE_WATCHER=true \\\n    NUGET_XMLDOC_MODE=skip\n\n# Conditionally install SDK and Debug tools, else just runtime\n# Test for empty or not empty string using -z or -n\nARG DBGTOOL_INSTALL=\"\"\n\nRUN wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -sr)/packages-microsoft-prod.deb \\\n    && dpkg -i packages-microsoft-prod.deb \\\n    && apt-get update \\\n    && if [ -n \"$DBGTOOL_INSTALL\" ] ; then \\\n         apt-get install --no-install-recommends -y dotnet-sdk-6.0 \\\n         && wget https://aka.ms/getvsdbgsh \\\n         && sh getvsdbgsh -v latest -l /vsdbg \\\n         && rm getvsdbgsh; rm -rf /var/lib/apt/lists/*; \\\n       else \\\n         apt-get install --no-install-recommends -y dotnet-runtime-6.0; rm -rf /var/lib/apt/lists/*; \\\n       fi \\\n    && rm packages-microsoft-prod.deb \\\n    && dotnet --info\n\n\n# Install MediaInfo\n# https://mediaarea.net/en/MediaInfo/Download/Ubuntu\n# https://mediaarea.net/en/Repos\nRUN wget https://mediaarea.net/repo/deb/repo-mediaarea_1.0-20_all.deb \\\n    && dpkg -i repo-mediaarea_1.0-20_all.deb \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y mediainfo \\\n    && rm repo-mediaarea_1.0-20_all.deb \\\n    && mediainfo --version && rm -rf /var/lib/apt/lists/*;\n\n\n# Install MKVToolNix\n# https://mkvtoolnix.download/downloads.html#ubuntu\nRUN wget -O /usr/share/keyrings/gpg-pub-moritzbunkus.gpg https://mkvtoolnix.download/gpg-pub-moritzbunkus.gpg \\\n    && sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/gpg-pub-moritzbunkus.gpg] https://mkvtoolnix.download/ubuntu/ $(lsb_release -sc) main\" >> /etc/apt/sources.list.d/mkvtoolnix.list' \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y mkvtoolnix \\\n    && mkvmerge --version && rm -rf /var/lib/apt/lists/*;\n\n\n# Install FfMpeg\n# https://launchpad.net/~savoury1/+archive/ubuntu/ffmpeg5\nRUN add-apt-repository -y ppa:savoury1/graphics \\\n    && add-apt-repository -y ppa:savoury1/multimedia \\\n    && add-apt-repository -y ppa:savoury1/ffmpeg4 \\\n    && add-apt-repository -y ppa:savoury1/ffmpeg5 \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y ffmpeg \\\n    && ffmpeg -version && rm -rf /var/lib/apt/lists/*;\n\n\n# Install HandBrake\n# Depends on FfMpeg, install FfMpeg first\n# https://launchpad.net/~savoury1/+archive/ubuntu/handbrake\nRUN add-apt-repository -y ppa:savoury1/handbrake \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y handbrake-cli \\\n    && HandBrakeCLI --version && rm -rf /var/lib/apt/lists/*;\n\n\n# Cleanup\nRUN apt-get autoremove -y \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# Copy PlexCleaner\n# Build externally\n# dotnet publish ./PlexCleaner/PlexCleaner.csproj --runtime linux-x64 --self-contained false --output ./Docker/PlexCleaner\nCOPY PlexCleaner /PlexCleaner\nRUN /PlexCleaner/PlexCleaner --version\n"
}