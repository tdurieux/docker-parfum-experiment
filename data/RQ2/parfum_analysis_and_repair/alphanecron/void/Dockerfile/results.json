{
  "startTime": 1674250160565,
  "endTime": 1674250160971,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14-alpine3.14 AS builder\nWORKDIR /build\n\nENV NEXT_TELEMETRY_DISABLED=1\n\nCOPY src ./src\nCOPY scripts ./scripts\nCOPY prisma ./prisma\nCOPY twilight ./twilight\n\nCOPY package.json yarn.lock next.config.js next-env.d.ts void-env.d.ts tsconfig.json .eslintrc.js server.ts ./\n\nRUN yarn install && yarn cache clean;\n\nENV DATABASE_URL=postgres://postgres:postgres@postgres/postgres\n\nRUN echo -e \"[core]\\nsecret = 'dockersecret'\\n[uploader]\\nraw_route = '/r'\\ndirectory = './uploads'\\n[shortener]\\nroute = '/go'\" > config.toml\n\nRUN yarn build\n\nFROM node:14-alpine3.14 AS runner\nWORKDIR /void\n\nCOPY --from=builder /build/node_modules ./node_modules\n\nCOPY --from=builder /build/src ./src\nCOPY --from=builder /build/server.ts ./server.ts\nCOPY --from=builder /build/scripts ./scripts\nCOPY --from=builder /build/prisma ./prisma\nCOPY --from=builder /build/.next ./.next\nCOPY --from=builder /build/.eslintrc.js ./.eslintrc.js\nCOPY --from=builder /build/tsconfig.json ./tsconfig.json\nCOPY --from=builder /build/package.json ./package.json\nCOPY --from=builder\t/build/twilight\t./twilight\n\nCMD [\"yarn\", \"start\"]"
}