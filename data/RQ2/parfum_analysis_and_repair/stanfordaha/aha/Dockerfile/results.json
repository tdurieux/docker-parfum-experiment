{
  "startTime": 1674250779994,
  "endTime": 1674250781265,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 47,
        "columnEnd": 68
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 72,
        "columnEnd": 115
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 119,
        "columnEnd": 135
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker.io/ubuntu:20.04\nLABEL description=\"garnet\"\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        build-essential software-properties-common && \\\n    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \\\n    add-apt-repository -y ppa:zeehio/libxp && \\\n    dpkg --add-architecture i386 && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        wget \\\n        git make gcc-9 g++-9 \\\n        python3 python3-dev python3-pip python3-venv \\\n        # Garnet\n        default-jre \\\n        # Halide-to-Hardware\n        imagemagick csh \\\n        libz-dev libpng-dev libjpeg-dev \\\n        libtinfo-dev libncurses-dev \\\n        # clockwork\n        curl \\\n        # hwtypes\n        libgmp-dev libmpfr-dev libmpc-dev \\\n        # cgra_pnr\n        libigraph-dev \\\n        # clang\n        xz-utils \\\n        # EDA Tools\n        ksh tcsh tcl \\\n        dc libelf1 binutils \\\n        libxp6 libxi6 libxrandr2 libtiff5 libmng2 \\\n        libjpeg62 libxft2 libxmu6 libglu1-mesa libxss1 \\\n        libxcb-render0 libglib2.0-0 \\\n        libc6-i386 \\\n        libncurses5 libxml2-dev \\\n        time \\\n        && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libtiff.so.5 /usr/lib/x86_64-linux-gnu/libtiff.so.3 && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libmng.so.2 /usr/lib/x86_64-linux-gnu/libmng.so.1 && \\\n    ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime && \\\n    dpkg-reconfigure --frontend noninteractive tzdata && \\\n    echo \"dash dash/sh boolean false\" | debconf-set-selections && \\\n    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3 100 && \\\n    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 100 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 \\\n                        --slave   /usr/bin/g++ g++ /usr/bin/g++-9 && \\\n    pip install --no-cache-dir cmake && \\\n    wget -nv -O ~/clang7.tar.xz https://releases.llvm.org/7.0.1/clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-18.04.tar.xz && \\\n    tar -xvf ~/clang7.tar.xz --strip-components=1 -C /usr/ && \\\n    rm -rf ~/clang7.tar.xz\n\n# Switch shell to bash\nSHELL [\"/bin/bash\", \"--login\", \"-c\"]\n\n# CoreIR\nCOPY ./coreir /aha/coreir\nWORKDIR /aha/coreir/build\nRUN cmake .. && make && make install\n\n# Lake\nCOPY ./BufferMapping /aha/BufferMapping\nWORKDIR /aha/BufferMapping/cfunc\nRUN export COREIR_DIR=/aha/coreir && make lib\n\n# mflowgen\nENV GARNET_HOME=/aha/garnet\nENV MFLOWGEN=/aha/mflowgen\n\n# clockwork\nCOPY clockwork /aha/clockwork\nWORKDIR /aha/clockwork\nENV COREIR_PATH=/aha/coreir\nENV LAKE_PATH=/aha/lake\nRUN ./misc/install_deps_ahaflow.sh && \\\n    source user_settings/aha_settings.sh && \\\n    make all -j4 && \\\n    rm -rf ntl*\n\n# Halide-to-Hardware\nCOPY ./Halide-to-Hardware /aha/Halide-to-Hardware\nWORKDIR /aha/Halide-to-Hardware\nRUN export COREIR_DIR=/aha/coreir && make -j2 && make distrib && \\\n    rm -rf lib/*\n\n# Install AHA Tools\nCOPY . /aha\nWORKDIR /aha\nRUN python -m venv . && source bin/activate && pip install --no-cache-dir wheel six && pip install --no-cache-dir systemrdl-compiler peakrdl-html && pip install --no-cache-dir -e . && aha deps install\n\nWORKDIR /aha\n\nENV OA_UNSUPPORTED_PLAT=linux_rhel60\nENV USER=docker\n\nRUN echo \"source /aha/bin/activate\" >> /root/.bashrc && \\\n    echo \"source /cad/modules/tcl/init/sh\" >> /root/.bashrc\n"
}