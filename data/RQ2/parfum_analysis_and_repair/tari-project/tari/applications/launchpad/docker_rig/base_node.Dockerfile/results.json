{
  "startTime": 1674251167742,
  "endTime": 1674251168332,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 17,
        "columnStart": 18,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 17,
        "columnStart": 18,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rust:1.60-buster as builder\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt update && apt -y --no-install-recommends install \\\n  apt-transport-https \\\n  bash \\\n  ca-certificates \\\n  curl \\\n  gpg \\\n  iputils-ping \\\n  less \\\n  libreadline-dev \\\n  libsqlite3-0 \\\n  openssl \\\n  telnet \\\n  cargo \\\n  clang \\\n  cmake && rm -rf /var/lib/apt/lists/*;\n\nRUN apt update && apt upgrade -y  && apt clean\n\n\nWORKDIR /tari\n\n# Adding only necessary things up front and copying the entrypoint script last\n# to take advantage of layer caching in docker\nADD Cargo.lock applications/deps_only/Cargo.lock\nADD rust-toolchain.toml .\n\nARG ARCH=native\nARG FEATURES=avx2\nENV RUSTFLAGS=\"-C target_cpu=$ARCH\"\nENV ROARING_ARCH=$ARCH\nENV CARGO_HTTP_MULTIPLEXING=false\n\n# Caches downloads across docker builds\nADD applications/deps_only applications/deps_only\nWORKDIR applications/deps_only\nRUN cargo build --bin deps_only --release\n\nWORKDIR /tari\n\nADD Cargo.toml .\nADD Cargo.lock .\nADD applications applications\nADD base_layer base_layer\nADD clients clients\nADD common common\nADD common_sqlite common_sqlite\nADD comms comms\nADD infrastructure infrastructure\nADD dan_layer dan_layer\nADD meta meta\n\nRUN cargo build --bin tari_base_node --release --features $FEATURES --locked\n\n# Create a base minimal image for the executables\nFROM bitnami/minideb:bullseye as base\nARG VERSION=1.0.1\n# Disable Prompt During Packages Installation\nARG DEBIAN_FRONTEND=noninteractive\nRUN install_packages \\\n  apt-transport-https \\\n  bash \\\n  ca-certificates \\\n  curl \\\n  gpg \\\n  iputils-ping \\\n  less \\\n  libreadline8 \\\n  libreadline-dev \\\n  libsqlite3-0 \\\n  openssl \\\n  telnet\n\nRUN groupadd -g 1000 tari && useradd -s /bin/bash -u 1000 -g 1000 tari\n\nRUN mkdir -p \"/var/tari/base_node/dibbler\" \\\n    && mkdir -p \"/var/tari/base_node/igor\" \\\n    && mkdir -p \"/var/tari/base_node/mainnet\" \\\n    && chown -R tari.tari \"/var/tari/base_node\"\n\nRUN mkdir /blockchain && chown tari.tari /blockchain && chmod 777 /blockchain\nUSER tari\nENV dockerfile_version=$VERSION\nENV APP_NAME=base_node APP_EXEC=tari_base_node\n\nCOPY --from=builder /tari/target/release/$APP_EXEC /usr/bin/\nCOPY /applications/launchpad/docker_rig/start_tari_app.sh /usr/bin/start_tari_app.sh\n\n\nENTRYPOINT [ \"start_tari_app.sh\", \"-c\", \"/var/tari/config/config.toml\", \"-b\", \"/var/tari/base_node\" ]\n"
}