{
  "startTime": 1674255131423,
  "endTime": 1674255132188,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 228
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 228
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 228
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Glenside Dockerfile\n#\n# the build_arg tvm_build_threads controls how many threads are used to build TVM.\n\nFROM ubuntu:18.04\n\n# Install needed packages\n# Needed so that tzdata install will be non-interactive\n# https://stackoverflow.com/questions/44331836/apt-get-install-tzdata-noninteractive\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt update && apt install --no-install-recommends -y git libgtest-dev libssl-dev cmake wget unzip libtinfo-dev libz-dev libcurl4-openssl-dev libopenblas-dev g++ sudo python3-dev libclang-dev curl lsb-release wget software-properties-common pkg-config python3-pip && rm -rf /var/lib/apt/lists/*;\n\n# Install Rust\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y\nENV PATH=\"/root/.cargo/bin:$PATH\"\n# PR #125 enables us to use stable (by removing usage of Bencher)\n# RUN rustup default nightly\n\n# Install LLVM\nRUN wget https://apt.llvm.org/llvm.sh\nRUN chmod +x llvm.sh\nRUN sudo ./llvm.sh 10\n\n# Needed by TVM Rust build process\nENV LLVM_CONFIG_PATH=/usr/lib/llvm-10/bin/llvm-config\n\n# Build TVM with Rust bindings\nRUN cd /root && git clone https://github.com/apache/tvm tvm --recursive\nWORKDIR /root/tvm\nRUN git fetch\nRUN git checkout 7688db7ac5c4e1a043bf0dddeed75780ec49e70a\nRUN git submodule sync && git submodule update\nRUN echo 'set(USE_LLVM $ENV{LLVM_CONFIG_PATH})' >> config.cmake\nRUN echo 'set(USE_RPC ON)' >> config.cmake\nRUN echo 'set(USE_SORT ON)' >> config.cmake\nRUN echo 'set(USE_GRAPH_RUNTIME ON)' >> config.cmake\nRUN echo 'set(USE_BLAS openblas)' >> config.cmake\nRUN echo 'set(CMAKE_CXX_STANDARD 14)' >> config.cmake\nRUN echo 'set(CMAKE_CXX_STANDARD_REQUIRED ON)' >> config.cmake\nRUN echo 'set(CMAKE_CXX_EXTENSIONS OFF)' >> config.cmake\n#RUN echo 'set(CMAKE_BUILD_TYPE Debug)' >> config.cmake\nARG tvm_build_threads=2\nRUN bash -c \\\n     \"mkdir -p build && \\\n     cd build && \\\n     cmake .. && \\\n     make -j${tvm_build_threads}\"\n\n# Help the system find the libtvm library and TVM Python library\nENV TVM_HOME=/root/tvm\nENV PYTHONPATH=\"$TVM_HOME/python:$TVM_HOME/topi/python:${PYTHONPATH}\"\nENV LD_LIBRARY_PATH=\"$TVM_HOME/build/\"\n\n# Set up Python\nRUN pip3 install --no-cache-dir --upgrade pip\nCOPY ./requirements.txt ./requirements.txt\nRUN pip3 install --no-cache-dir -r requirements.txt\n\n# Build Glenside.\nWORKDIR /root/glenside\nCOPY . .\nRUN cargo build --no-default-features --features \"tvm\"\n"
}