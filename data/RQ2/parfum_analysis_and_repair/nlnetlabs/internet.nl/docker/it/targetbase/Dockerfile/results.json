{
  "startTime": 1674253735749,
  "endTime": 1674253737100,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 85,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM devbase\nENV DEBIAN_FRONTEND noninteractive\n\n# Tip: We inherit latest (openssl in $PATH) and legacy OpenSSL\n# (/opt/openssl-old) installations from devbase\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        apache2 \\\n        libdb-dev \\\n        libapr1-dev \\\n        libaprutil1-dev \\\n        libpcre3-dev \\\n        m4 \\\n        nginx \\\n        socat \\\n        zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# Enable modules in the stock Apache\nRUN a2enmod env\nRUN a2enmod headers\nRUN a2enmod rewrite\n\n# Build Apache 2.4.39 with modified OpenSSL 1.0.2 with weak security features\n# First build OpenSSL\nWORKDIR /tmp/build/nassl\nRUN mkdir -p bin/openssl-legacy/freebsd64 \\\n             openssl-1.0.2e && \\\n    curl -fsSLo- 'https://github.com/internetstandards/nassl/tarball/internetnl' | tar zx --strip-components 1 && \\\n    curl -fsSLo- 'https://zlib.net/zlib-1.2.11.tar.gz' | tar zx && \\\n    curl -fsSLo- 'https://github.com/PeterMosmans/openssl/tarball/1.0.2-chacha' | tar zx --strip-components 1 -C openssl-1.0.2e\nCOPY custom-httpd/build_from_scratch.py .\nRUN python build_from_scratch.py\n# Create symlinks needed by the Apache build process for -lsso, -lcrypto and\n# -lz to resolve correctly.\nWORKDIR /tmp/build/nassl/bin/openssl-legacy\nRUN ln -s linux64 lib\n# Then build Apache using our new OpenSSL\nENV APACHE_SERVERROOT_OPENSSL_LEGACY /opt/apache-2.4-openssl-legacy\nWORKDIR /tmp/build/apache-2.4-openssl-legacy\nRUN curl -fsSLo- 'https://archive.apache.org/dist/httpd/httpd-2.4.39.tar.bz2' | tar jx --strip-components 1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${APACHE_SERVERROOT_OPENSSL_LEGACY} \\\n                --with-ssl=/tmp/build/nassl/bin/openssl-legacy \\\n                --enable-rewrite\n# Build from sources up until the point that the Make fails, then hand fix the\n# failing make step by adding missing -L and -l arguments then finally resume\n# the build process... there must be a better way, but attempts to resolve the\n# issue via configure did not succeed.\nRUN make || true\nWORKDIR /tmp/build/apache-2.4-openssl-legacy/support\nRUN /usr/share/apr-1.0/build/libtool --silent --mode=link x86_64-linux-gnu-gcc -pthread -o ab \\\n    ab.lo /usr/lib/x86_64-linux-gnu/libaprutil-1.la /usr/lib/x86_64-linux-gnu/libapr-1.la -lm \\\n    -L/tmp/build/nassl/bin/openssl-legacy/lib -lssl -lcrypto -ldl\nWORKDIR /tmp/build/apache-2.4-openssl-legacy\nRUN make && make install\n\n# Build Apache 2.4.39 with OpenSSL 1.1.1 with support for ZLib compression\n# First build OpenSSL\nWORKDIR /tmp/build/openssl-modern\nRUN curl -fsSLo- 'https://www.openssl.org/source/openssl-1.1.1c.tar.gz' | tar zx --strip-components 1 && \\\n    ./config --prefix=/opt/openssl-modern zlib && \\\n    make && make install_sw\n# Then build Apache using our new OpenSSL\nENV APACHE_SERVERROOT_OPENSSL_MODERN /opt/apache-2.4-openssl-modern\nWORKDIR /tmp/build/apache-2.4-openssl-modern\nRUN curl -fsSLo- 'https://archive.apache.org/dist/httpd/httpd-2.4.39.tar.bz2' | tar jx --strip-components 1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${APACHE_SERVERROOT_OPENSSL_MODERN} \\\n                --with-ssl=/opt/openssl-modern \\\n                --enable-rewrite && \\\n    make && make install\n\n# Build ancient OpenSSL 0.9.8k for a server that doesn't support secure\n# renegotiation (RFC-5746). Building that requires \"./config no-asm\" to work\n# around https://stackoverflow.com/a/14574746 and \"make install_sw\" to work\n# around https://askubuntu.com/a/742712. We also need an old Apache version as\n# modern versions reject client initiated renegotiation irrespective of how\n# OpenSSL is configured. See:\n# https://github.com/apache/httpd/commit/06f68fdc54c72573d4b520219b87a05abb098380\nWORKDIR /tmp/build/openssl-ancient\nRUN curl -fsSLo- 'https://www.openssl.org/source/old/0.9.x/openssl-0.9.8k.tar.gz' | tar zx --strip-components 1 && \\\n    CFLAGS=-fPIC ./config --prefix=/opt/openssl-ancient shared no-asm && \\\n    make && make install_sw\n# Then build Apache using our new OpenSSL\nENV APACHE_SERVERROOT_OPENSSL_ANCIENT /opt/apache-2.0-openssl-ancient\nWORKDIR /tmp/build/apache-2.0-openssl-ancient\nRUN curl -fsSLo- 'https://archive.apache.org/dist/httpd/httpd-2.0.63.tar.bz2' | tar jx --strip-components 1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${APACHE_SERVERROOT_OPENSSL_ANCIENT} \\\n                --with-ssl=/opt/openssl-ancient \\\n                --enable-headers \\\n                --enable-rewrite \\\n                --enable-ssl\nRUN make && make install\n\n# Build the Postfix SMTP server using legacy OpenSSL\nRUN useradd postfix && groupadd postdrop\nWORKDIR /tmp/build/postfix\nRUN curl -fsSLo- 'https://ftp.cs.uu.nl/mirror/postfix/postfix-release/official/postfix-3.4.5.tar.gz' | tar zx --strip-components 1\nENV POSTFIX_PREFIX_OPENSSL_LEGACY /opt/postfix-old\nRUN make clean && \\\n    make makefiles \\\n      command_directory=${POSTFIX_PREFIX_OPENSSL_LEGACY}/bin \\\n      config_directory=${POSTFIX_PREFIX_OPENSSL_LEGACY}/etc \\\n      daemon_directory=${POSTFIX_PREFIX_OPENSSL_LEGACY}/bin \\\n      openssl_path=/opt/openssl-old/bin/openssl \\\n      shlib_directory=${POSTFIX_PREFIX_OPENSSL_LEGACY}/lib \\\n      CCARGS=\"-DUSE_TLS -I/opt/openssl-old/include\" \\\n      AUXLIBS=\"-L/opt/openssl-old/lib -lssl -lcrypto\" && \\\n    make && \\\n    sh postfix-install -non-interactive\n\n# Build the Postfix SMTP server using modern OpenSSL\nENV POSTFIX_PREFIX_OPENSSL_MODERN /opt/postfix-modern\nRUN make clean && \\\n    make makefiles \\\n      command_directory=${POSTFIX_PREFIX_OPENSSL_MODERN}/bin \\\n      config_directory=${POSTFIX_PREFIX_OPENSSL_MODERN}/etc \\\n      daemon_directory=${POSTFIX_PREFIX_OPENSSL_MODERN}/bin \\\n      openssl_path=/opt/openssl-modern/bin/openssl \\\n      shlib_directory=${POSTFIX_PREFIX_OPENSSL_MODERN}/lib \\\n      CCARGS=\"-DUSE_TLS -I/opt/openssl-modern/include\" \\\n      AUXLIBS=\"-L/opt/openssl-modern/lib -lssl -lcrypto\" && \\\n    make && \\\n    sh postfix-install -non-interactive\n\n# Apply our custom Postfix configuration that is common to all target servers\nCOPY postfix/postfix-debug.cidrs /etc/\nCOPY postfix/main.cf ${POSTFIX_PREFIX_OPENSSL_LEGACY}/etc/main.cf\nCOPY postfix/main.cf ${POSTFIX_PREFIX_OPENSSL_MODERN}/etc/main.cf\nRUN POSTFIX_PREFIX=${POSTFIX_PREFIX_OPENSSL_LEGACY} /opt/jinjify.sh ${POSTFIX_PREFIX_OPENSSL_LEGACY}/etc/main.cf\nRUN POSTFIX_PREFIX=${POSTFIX_PREFIX_OPENSSL_MODERN} /opt/jinjify.sh ${POSTFIX_PREFIX_OPENSSL_MODERN}/etc/main.cf\n\n# Install the certificate authority and linked OCSP server files:\nCOPY *.sh /opt/\nCOPY ca-ocsp /opt/ca-ocsp/\n\n# Generate a self-signed certificate so that we can test that Internet.NL\n# detects and complains about it. Deliberately use a short RSA key length\n# so that Internet.NL also complains about that.\nRUN openssl req -new -newkey rsa:1024 -days 365 -nodes -x509 \\\n        -subj \"/C=NL/ST=Noord Holland/L=Amsterdam/O=NLnet Labs/CN=default.test.nlnetlabs.tk\" \\\n        -keyout /etc/ssl/private/default.test.nlnetlabs.tk.key -out /etc/ssl/certs/default.test.nlnetlabs.tk.crt\n\nCOPY certs/*.crt /etc/ssl/certs/\nCOPY certs/*.key /etc/ssl/private/\nCOPY dh_param_infiles/*.txt /etc/ssl/certs/dh_params/\nCOPY certs/some.other.domain.der /etc/ssl/certs/ocsp_responses/\nCOPY custom-httpd/custom-httpd24.conf ${APACHE_SERVERROOT_OPENSSL_LEGACY}/custom-httpd.conf\nCOPY custom-httpd/custom-httpd24.conf ${APACHE_SERVERROOT_OPENSSL_MODERN}/custom-httpd.conf\nCOPY custom-httpd/custom-httpd22.conf ${APACHE_SERVERROOT_OPENSSL_ANCIENT}/custom-httpd.conf\nCOPY sites-available/* /etc/apache2/sites-available/\nCOPY html /var/www/html/\nRUN SERVER_ROOT=${APACHE_SERVERROOT_OPENSSL_LEGACY} /opt/jinjify.sh ${APACHE_SERVERROOT_OPENSSL_LEGACY}/custom-httpd.conf\nRUN SERVER_ROOT=${APACHE_SERVERROOT_OPENSSL_MODERN} /opt/jinjify.sh ${APACHE_SERVERROOT_OPENSSL_MODERN}/custom-httpd.conf\nRUN SERVER_ROOT=${APACHE_SERVERROOT_OPENSSL_ANCIENT} /opt/jinjify.sh ${APACHE_SERVERROOT_OPENSSL_ANCIENT}/custom-httpd.conf\n\nCOPY postfix/configs-available/* /etc/postfix/configs-available/\n\nWORKDIR /root\nENTRYPOINT [\"/opt/run-apache-server.sh\"]\n"
}