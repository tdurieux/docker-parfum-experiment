{
  "startTime": 1674251851688,
  "endTime": 1674251852542,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -- stage 1: build static rtrtr with musl libc for alpine\nFROM alpine:3.15 as build\n\nRUN apk add --no-cache rust cargo\n\nWORKDIR /tmp/rtrtr\nCOPY . .\n\nRUN cargo build \\\n    --target x86_64-alpine-linux-musl \\\n    --release \\\n    --locked\n\n# -- stage 2: create alpine-based container with the static rtrtr\n#             executable\nFROM alpine:3.15\nCOPY --from=build /tmp/rtrtr/target/x86_64-alpine-linux-musl/release/rtrtr /usr/local/bin/\n\n# Build variables for uid and guid of user to run container\nARG RUN_USER=rtrtr\nARG RUN_USER_UID=1012\nARG RUN_USER_GID=1012\n\n# Install rsync as rtrtr depends on it\nRUN apk add --no-cache rsync libgcc\n\n# Use Tini to ensure that Routinator responds to CTRL-C when run in the\n# foreground without the Docker argument \"--init\" (which is actually another\n# way of activating Tini, but cannot be enabled from inside the Docker image).\nRUN apk add --no-cache tini\n# Tini is now available at /sbin/tini\n\nRUN addgroup -g ${RUN_USER_GID} ${RUN_USER} && \\\n    adduser -D -u ${RUN_USER_UID} -G ${RUN_USER} ${RUN_USER}\n\nUSER $RUN_USER_UID\n\n# Expose the default metrics port\nEXPOSE 8080/tcp\n\n# Expose the default data serving port\nEXPOSE 9001/tcp\n\nENTRYPOINT [\"/sbin/tini\", \"--\", \"rtrtr\"]\n"
}