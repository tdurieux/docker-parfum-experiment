{
  "startTime": 1674215323501,
  "endTime": 1674215324014,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 28,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 38,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 22,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedDockerfile": "# Adapted from DLR-RM/stable-baselines3\n\nARG PARENT_IMAGE\nFROM $PARENT_IMAGE\nARG PYTORCH_DEPS=cpuonly\nARG POETRY_VERSION=1.0.0\nARG ADD_SB=False\nARG PYTHON_VERSION=3.8\n\n# Install packages without prompting the user to answer any questions\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends apt-utils \\\n  build-essential \\\n  cmake \\\n  git \\\n  curl \\\n  ca-certificates \\\n  libjpeg-dev \\\n  libpng-dev \\\n  libglib2.0-0 \\\n  apt-transport-https \\\n  gnupg-agent \\\n  python3-pip \\\n  gnupg \\\n  software-properties-common &&\\\n  rm -rf /var/lib/apt/lists/*\n\n# Install Anaconda and dependencies for using the specified python version\nRUN curl -f -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n     chmod +x ~/miniconda.sh && \\\n     ~/miniconda.sh -b -p /opt/conda && \\\n     rm ~/miniconda.sh && \\\n     /opt/conda/bin/conda install -y python=$PYTHON_VERSION && \\\n     if [ ${ADD_SB} ] ; then /opt/conda/bin/conda install -y pytorch $PYTORCH_DEPS -c pytorch; fi && \\\n     /opt/conda/bin/conda clean -ya\nENV PATH /opt/conda/bin:$PATH\n\nSHELL [\"conda\", \"run\", \"-n\", \"base\", \"/bin/bash\", \"-c\"]\n\n# System deps:\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir \"poetry==$POETRY_VERSION\"\n\n# When installing stable-baselines3, we want to use the appropriate pytorch version (cpu or gpu)\n# if [ ${ADD_SB} ] ; then /opt/conda/bin/conda install -y pytorch $PYTORCH_DEPS -c pytorch; fi && \\\n\n# Copy only requirements to cache them in docker layer\nWORKDIR /code\nCOPY poetry.lock pyproject.toml /code/\n\n# Install eagerx without creation of poetry environment since the docker is already isolated\nRUN poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi\n\n# Creating folders, and files for a project:\nCOPY . /code\n\n# Install ROS\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\nRUN echo \"deb http://packages.ros.org/ros-testing/ubuntu focal main\" > /etc/apt/sources.list.d/ros-latest.list\nRUN apt-get update && apt-get install -y --no-install-recommends ros-noetic-ros-base ros-noetic-cv-bridge && rm -rf /var/lib/apt/lists/*;\nRUN echo \"source /opt/ros/noetic/setup.bash\" >> /root/.bashrc\nRUN echo \"export ROSLAUNCH_SSH_UNKNOWN=1\" >> /root/.bashrc\n\n# Install eagerx-tutorials if ADD_SB, this will also install stable-baselines3\nRUN if [ ${ADD_SB} ] ; then \\\n pip install --no-cache-dir eagerx-tutorials; fi\n\n# Use headless opencv\nRUN pip uninstall -y opencv-python && pip install --no-cache-dir opencv-python-headless && rm -rf $HOME/.cache/pip\n"
}