{
  "startTime": 1674255816864,
  "endTime": 1674255817496,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:2.7-slim\n\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\n# Install packages needed to run your application (not build deps):\n#   mime-support -- for mime types when serving static files\n#   postgresql-client -- for running database commands\n# We need to recreate the /usr/share/man/man{1..8} directories first because\n# they were clobbered by a parent image.\nRUN set -ex \\\n    && RUN_DEPS=\" \\\n        locales \\\n        libpcre3 \\\n        mime-support \\\n        default-mysql-client \\\n        libmariadb3 \\\n        libmagic1 \\\n        tar \\\n        gzip \\\n        bzip2 \\\n        p7zip-full \\\n        xz-utils \\\n        gettext \\\n    \" \\\n    && seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{} \\\n    && apt-get update && apt-get install -y --no-install-recommends $RUN_DEPS \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy in your requirements file\nADD requirements.txt /requirements.txt\n# ADD requirements_prod.txt /requirements_prod.txt\n\n# OR, if youâ€™re using a directory for your requirements, copy everything (comment out the above and uncomment this if so):\n# ADD requirements /requirements\n\n# Install build deps, then run `pip install`, then remove unneeded build deps all in a single step.\n# Correct the path to your production requirements file, if needed.\nRUN set -ex \\\n    && BUILD_DEPS=\" \\\n        build-essential \\\n        libpcre3-dev \\\n        libpq-dev \\\n        default-libmysqlclient-dev \\\n        default-mysql-client \\\n    \" \\\n    && apt-get update && apt-get install -y --no-install-recommends $BUILD_DEPS \\\n    && pip install --no-cache-dir -U virtualenv \\\n    && python2.7 -m virtualenv /venv \\\n    && /venv/bin/pip install -U pip \\\n    && /venv/bin/pip install --no-cache-dir -r /requirements.txt \\\n    && /venv/bin/pip install --no-cache-dir dj_database_url \\\n    && /venv/bin/pip install --no-cache-dir uwsgi \\\n#    && /venv/bin/pip install --no-cache-dir -r /requirements_prod.txt \\\n\n    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $BUILD_DEPS \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /var/log/anytask\nRUN chmod a+w /var/log/anytask\n\n# Copy your application code to the container (make sure you create a .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /code/\nADD . /code/\n#ADD dependencies /\n#ADD docker_entrypoint.sh /code/\nWORKDIR /code/anytask\n\n# uWSGI will listen on this port\nEXPOSE 8000\nEXPOSE 3031\n\n# Add any static environment variables needed by Django or your settings file here:\nENV DJANGO_SETTINGS_MODULE=settings_docker\n\n# Call collectstatic (customize the following line with the minimal environment variables needed for manage.py to run):\n#RUN /venv/bin/python manage.py collectstatic --noinput\nRUN DATABASE_URL='mysql://user:pass@db/app_db' /venv/bin/python manage.py collectstatic --settings=settings_docker --noinput --no-post-process\nRUN DATABASE_URL='mysql://user:pass@db/app_db' /venv/bin/python manage.py compilemessages --settings=settings_docker\n\n# Tell uWSGI where to find your wsgi file (change this):\nENV UWSGI_WSGI_FILE=wsgi.py\n\n# Base uWSGI configuration (you shouldn't need to change these):\nENV UWSGI_VIRTUALENV=/venv UWSGI_HTTP=:8000 UWSGI_SOCKET=:3031 UWSGI_MASTER=1 UWSGI_HTTP_AUTO_CHUNKED=1 UWSGI_HTTP_KEEPALIVE=1 UWSGI_UID=1000 UWSGI_GID=2000 UWSGI_LAZY_APPS=1 UWSGI_WSGI_ENV_BEHAVIOR=holy\n\n# Number of uWSGI workers and threads per worker (customize as needed):\nENV UWSGI_WORKERS=2 UWSGI_THREADS=4\n\n# uWSGI static file serving configuration (customize or comment out if not needed):\nENV UWSGI_STATIC_EXPIRES_URI=\".*\\.(css|js|png|jpg|jpeg|gif|ico|woff|ttf|otf|svg|scss|map|txt) 315360000\"\n\n# Deny invalid hosts before they get to Django (uncomment and change to your hostname(s)):\n# ENV UWSGI_ROUTE_HOST=\"^(?!localhost:8000$) break:400\"\n\nRUN rm -rf /var/log/anytask/*\n\n# Uncomment after creating your docker-entrypoint.sh\nENTRYPOINT [\"/code/docker_entrypoint.sh\"]\n\n# Start uWSGI\nCMD [\"/venv/bin/uwsgi\", \"--show-config\", \"--static-map\", \"/static/=/var/lib/anytask/static\", \"--static-map\", \"/media/=/var/lib/anytask/media\", \"--mime-file\", \"mime.types\", \"--mime-file\", \"/etc/mime.types\"]\n"
}