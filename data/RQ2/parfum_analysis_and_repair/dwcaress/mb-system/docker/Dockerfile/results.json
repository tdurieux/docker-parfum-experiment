{
  "startTime": 1674253950246,
  "endTime": 1674253951391,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nRUN yum -y groupinstall \"Development Tools\" && \\\n    yum install -y epel-release && \\\n    yum install -y \\\n            fftw \\\n            fftw-devel \\\n            netcdf \\\n            netcdf-devel \\\n            openmotif \\\n            openmotif-devel \\\n            openssh-server \\\n            perl \\\n            python3 \\\n            cmake3 \\\n            clang \\\n            git \\\n            freeglut \\\n            freeglut-devel \\\n            glxinfo \\\n            mesa-dri-drivers \\\n            gedit \\\n            evince && rm -rf /var/cache/yum\n\n# note, problems with latest 6.0.0 release at this point,\n# see https://github.com/dwcaress/MB-System/issues/807#issuecomment-632938328\n# So, trying master just as an interim\nARG GMT_SOURCE_TAG=master\n\n# Tried 8.2.1, but got compile error, use this stable build\nARG PROJ_SOURCE_TAG=7.2.1\n\n# TODO in general, confirm appropriate install mechanisms for PROJ and GMT on centos\n# (per .travis.yml, seems like the above tags are only defined for ubuntu.\n\nCOPY docker/centos/scripts/install-gmt.sh .\nRUN GMT_SOURCE_TAG=${GMT_SOURCE_TAG} ./install-gmt.sh\n\nCOPY docker/centos/scripts/install-proj.sh .\nRUN PROJ_SOURCE_TAG=${PROJ_SOURCE_TAG} ./install-proj.sh\n\n# Cleanup\nRUN rm -rf install-gmt.sh install-proj.sh && yum -y clean all\n\n\n# TODO remove the following, only added to facilitate debugging\n# during initial tests of the container\nENV LIBGL_DEBUG=verbose\n# `glxinfo >/dev/null` will for example help spot any errors\n\n\n# This location, to be mounted from some file on the host, will\n# help keep the bash history upon re-starts of the container:\nENV HISTFILE=/opt/mbsystem.bash_history\n# NOTE: not using the default HISTFILE to facilitate running\n# the container as a different user from the one by default.\n\nRUN mkdir -p /opt/MB-System \\\n             /opt/MBSWorkDir \\\n && touch $HISTFILE\n\n# NOTE now with issues not resolving GDAL/OGR stuff.\n# Added the --with-gdal-config below as th sumary indicated\n# no \"GDAL found\" (even though was there) ...  no luck.\nCOPY . /opt/MB-System/\nRUN cd /opt/MB-System/ \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-gdal-config=/usr/local/bin \\\n                --with-proj-lib=/usr/local/lib \\\n                --with-proj-include=/usr/local/include \\\n && make \\\n && make check \\\n && make install\n\nRUN  ls /usr/local/include\n\nWORKDIR  /opt/MBSWorkDir\n\n# due to programs failing to load libgmt\nENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/usr/local/lib64\n\n# Permit executing MB-System commands via ssh from another container\nRUN echo \"export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}\" >> /root/.bashrc\n# For execution of MB-System gmt modules, e.g.: gmt mbgrd2obj\nRUN echo \"GMT_CUSTOM_LIBS = /usr/local/lib/mbsystem.so\" >> /root/gmt.conf\n# Generate host keys\nRUN /usr/bin/ssh-keygen -A\n\n# No explicit cmd or entry_point. Launcher script will typically run `bash`\n# but also allow to run any other program in the container.\n"
}