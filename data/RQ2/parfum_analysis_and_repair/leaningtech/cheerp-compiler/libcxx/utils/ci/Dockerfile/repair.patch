diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/leaningtech/cheerp-compiler/libcxx/utils/ci/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/leaningtech/cheerp-compiler/libcxx/utils/ci/Dockerfile/repaired.Dockerfile
index da6dc0f..a837091 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/leaningtech/cheerp-compiler/libcxx/utils/ci/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/leaningtech/cheerp-compiler/libcxx/utils/ci/Dockerfile/repaired.Dockerfile
@@ -39,14 +39,14 @@ ENV DEBIAN_FRONTEND=noninteractive
 # Docker image forever.
 RUN echo 6
 
-RUN apt-get update && apt-get install -y bash curl
+RUN apt-get update && apt-get install --no-install-recommends -y bash curl && rm -rf /var/lib/apt/lists/*;
 
 # Install various tools used by the build or the test suite
-RUN apt-get update && apt-get install -y ninja-build python3 python3-sphinx python3-distutils python3-psutil git gdb
+RUN apt-get update && apt-get install --no-install-recommends -y ninja-build python3 python3-sphinx python3-distutils python3-psutil git gdb && rm -rf /var/lib/apt/lists/*;
 
 # Locales for gdb and localization tests
-RUN apt-get update && apt-get install -y language-pack-en language-pack-fr \
-                                         language-pack-ru language-pack-zh-hans
+RUN apt-get update && apt-get install --no-install-recommends -y language-pack-en language-pack-fr \
+                                         language-pack-ru language-pack-zh-hans && rm -rf /var/lib/apt/lists/*;
 # These two are not enabled by default so generate them
 RUN printf "fr_CA ISO-8859-1\ncs_CZ ISO-8859-2" >> /etc/locale.gen
 RUN mkdir /usr/local/share/i1en/
@@ -56,7 +56,7 @@ RUN locale-gen
 # Install Clang <latest>, <latest-1> and ToT, which are the ones we support.
 # We also install <latest-2> to allow smooth CI transitions around release points.
 ENV LLVM_LATEST_VERSION=14
-RUN apt-get update && apt-get install -y lsb-release wget software-properties-common
+RUN apt-get update && apt-get install --no-install-recommends -y lsb-release wget software-properties-common && rm -rf /var/lib/apt/lists/*;
 RUN wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh
 RUN bash /tmp/llvm.sh $(($LLVM_LATEST_VERSION - 2)) # for CI transitions
 RUN bash /tmp/llvm.sh $(($LLVM_LATEST_VERSION - 1)) # previous release
@@ -70,18 +70,18 @@ RUN ln -fs /usr/bin/clang++-$LLVM_LATEST_VERSION /usr/bin/c++ && [ -e $(readlink
 RUN ln -fs /usr/bin/clang-$LLVM_LATEST_VERSION /usr/bin/cc && [ -e $(readlink /usr/bin/cc) ]
 
 # Install clang-format
-RUN apt-get install -y clang-format-$LLVM_LATEST_VERSION
+RUN apt-get install --no-install-recommends -y clang-format-$LLVM_LATEST_VERSION && rm -rf /var/lib/apt/lists/*;
 RUN ln -s /usr/bin/clang-format-$LLVM_LATEST_VERSION /usr/bin/clang-format && [ -e $(readlink /usr/bin/clang-format) ]
 RUN ln -s /usr/bin/git-clang-format-$LLVM_LATEST_VERSION /usr/bin/git-clang-format && [ -e $(readlink /usr/bin/git-clang-format) ]
 
 # Install clang-tidy
-RUN apt-get install -y clang-tidy-$LLVM_LATEST_VERSION
+RUN apt-get install --no-install-recommends -y clang-tidy-$LLVM_LATEST_VERSION && rm -rf /var/lib/apt/lists/*;
 RUN ln -s /usr/bin/clang-tidy-$LLVM_LATEST_VERSION /usr/bin/clang-tidy && [ -e $(readlink /usr/bin/clang-tidy) ]
 
 # Install the most recent GCC
 ENV GCC_LATEST_VERSION=11
 RUN add-apt-repository ppa:ubuntu-toolchain-r/test
-RUN apt-get update && apt install -y gcc-$GCC_LATEST_VERSION g++-$GCC_LATEST_VERSION
+RUN apt-get update && apt install --no-install-recommends -y gcc-$GCC_LATEST_VERSION g++-$GCC_LATEST_VERSION && rm -rf /var/lib/apt/lists/*;
 
 # Install a recent CMake
 RUN wget https://github.com/Kitware/CMake/releases/download/v3.21.1/cmake-3.21.1-linux-x86_64.sh -O /tmp/install-cmake.sh
@@ -90,7 +90,7 @@ RUN rm /tmp/install-cmake.sh
 
 # Change the user to a non-root user, since some of the libc++ tests
 # (e.g. filesystem) require running as non-root. Also setup passwordless sudo.
-RUN apt-get update && apt-get install -y sudo
+RUN apt-get update && apt-get install --no-install-recommends -y sudo && rm -rf /var/lib/apt/lists/*;
 RUN echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
 RUN useradd --create-home libcxx-builder
 USER libcxx-builder
@@ -98,7 +98,7 @@ WORKDIR /home/libcxx-builder
 
 # Install the Buildkite agent and dependencies. This must be done as non-root
 # for the Buildkite agent to be installed in a path where we can find it.
-RUN bash -c "$(curl -sL https://raw.githubusercontent.com/buildkite/agent/main/install.sh)"
+RUN bash -c "$( curl -f -sL https://raw.githubusercontent.com/buildkite/agent/main/install.sh)" -f
 ENV PATH="${PATH}:/home/libcxx-builder/.buildkite-agent/bin"
 RUN echo "tags=\"queue=libcxx-builders,arch=$(uname -m),os=linux\"" >> "/home/libcxx-builder/.buildkite-agent/buildkite-agent.cfg"