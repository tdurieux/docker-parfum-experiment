{
  "startTime": 1674250599971,
  "endTime": 1674250601531,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 112
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 62,
        "columnEnd": 124
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\nFROM ubuntu:20.04\n# configure dpkg && timezone\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\nENV TZ=Europe/London\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n# add docker and java (amazon corretto) repos\nRUN apt-get update && apt-get -y upgrade && \\\n    apt-get -y --no-install-recommends install curl wget gpg zip unzip software-properties-common apt-utils unzip vim silversearcher-ag && rm -rf /var/lib/apt/lists/*;\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --batch --dearmor > /usr/share/keyrings/docker-archive-keyring.gpg && \\\n    wget -O- https://apt.corretto.aws/corretto.key | apt-key add -\nRUN ARCH=$(dpkg --print-architecture) ;\\\n    echo \"deb [arch=$ARCH signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu bionic stable\" > /etc/apt/sources.list.d/docker.list &&\\\n    add-apt-repository 'deb https://apt.corretto.aws stable main'\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" |  tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \\\n    curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n# install software\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install \\\n    sudo socat telnet \\\n    inetutils-ping \\\n    lsb-release \\\n    ca-certificates \\\n    apt-transport-https \\\n    build-essential gettext-base \\\n    git gnupg curl wget jq \\\n    zlib1g-dev libbz2-dev libncurses5-dev \\\n    libgdbm-dev libnss3-dev libssl-dev \\\n    libreadline-dev libffi-dev libsqlite3-dev \\\n    java-11-amazon-corretto-jdk \\\n    docker-ce-cli \\\n    google-cloud-cli && rm -rf /var/lib/apt/lists/*;\n# add delta to show diffs\nRUN FILE=\"git-delta_0.11.2_$(dpkg --print-architecture).deb\" ;\\\n    wget \"https://github.com/dandavison/delta/releases/download/0.11.2/$FILE\" -O \"/tmp/$FILE\" ;\\\n    dpkg -i \"/tmp/$FILE\" ; rm \"/tmp/$FILE\"\n# Download Kubectl\nRUN VER=\"v1.23.0\" ;\\\n    ARCH=\"$(dpkg --print-architecture)\" ;\\\n    URL=\"https://dl.k8s.io/release/$VER/bin/linux/$ARCH/kubectl\" ;\\\n    wget $URL -O /usr/bin/kubectl && chmod +x /usr/bin/kubectl\n# Download Kustomize\nRUN VER=\"v4.5.4\" ; \\\n    ARCH=\"$(dpkg --print-architecture)\" ; \\\n    URL=\"https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F$VER/kustomize_${VER}_linux_${ARCH}.tar.gz\" ; \\\n    curl -f -sL \"$URL\" | tar xzvf - -C /usr/bin\n# Download kind and setup a wrapper\nRUN VER=\"v0.14.0\" ;\\\n    ARCH=\"$(dpkg --print-architecture)\" ;\\\n    URL=\"https://github.com/kubernetes-sigs/kind/releases/download/$VER/kind-linux-$ARCH\" ;\\\n    wget $URL -O /usr/bin/kind.bin ;\\\n    /usr/bin/echo -e '#!/bin/bash\\nsudo env DOCKER_HOST=unix:///var/run/docker-host.sock /usr/bin/kind.bin \"$@\"' >/usr/bin/kind ;\\\n    chmod +x /usr/bin/kind.bin /usr/bin/kind\n# Download terraform\nRUN ARCH=\"$(dpkg --print-architecture)\" ; \\\n    VER=1.1.0 ; \\\n    URL=\"https://releases.hashicorp.com/terraform/$VER/terraform_${VER}_linux_${ARCH}.zip\" ; \\\n    curl -f -sL $URL -o /tmp/terraform.zip; \\\n    unzip /tmp/terraform.zip -d /usr/bin ; \\\n    rm /tmp/terraform.zip\n# Add the aws cli and eksctl\nRUN mkdir /tmp/awscli ; \\\n    curl -f -sL \"https://awscli.amazonaws.com/awscli-exe-linux-$(arch).zip\" -o \"/tmp/awscli/awscliv2.zip\"; \\\n    cd /tmp/awscli ; unzip awscliv2.zip ; \\\n    ./aws/install ; \\\n    rm -Rvf /tmp/awscli\n# Install eksctl\nRUN curl -f -sL \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_$(dpkg --print-architecture).tar.gz\" | \\\n    tar xzf - -C /usr/bin\n# Install azure cli - commented out: buggy on arm\n# RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash\n# Download openshift installer\nRUN VER=4.10.4 ; \\\n    BASE=https://mirror.openshift.com/pub/openshift-v4/clients/ocp ; \\\n    ARCH=$(dpkg --print-architecture) ; \\\n    URL=\"$BASE/$VER/openshift-install-linux-$VER.tar.gz\" ; \\\n    curl -f -sL \"$URL\" | tar xzvf - -C /usr/bin/\n# install juju\nRUN mkdir /tmp/juju ; cd /tmp/juju ; \\\n    curl -f -sL https://launchpad.net/juju/2.9/2.9.0/+download/juju-2.9.0-linux-$(dpkg --print-architecture).tar.xz | tar xJvf -; \\\n    install -o root -g root -m 0755 juju /usr/bin/juju ; \\\n    rm -Rvf /tmp/juju\n# Install doctl\nRUN DO_VERSION=1.71.0 ; \\\n    DO_BASE=https://github.com/digitalocean/doctl/releases/download ; \\\n    ARCH=$(dpkg --print-architecture) ; \\\n    DO_URL=\"$DO_BASE/v$DO_VERSION/doctl-$DO_VERSION-linux-$ARCH.tar.gz\" ; \\\n    curl -f -sL \"$DO_URL\" | tar xzvf - -C /usr/bin/\n# k3sup\nRUN VER=0.11.3 ; \\\n    BASE=https://github.com/alexellis/k3sup/releases/download ; \\\n    ARCH=-$(dpkg --print-architecture) ; \\\n    if [[ $ARCH == \"amd64\" ]] ; then ARCH=\"\" ; fi ; \\\n    URL=\"$BASE/$VER/k3sup${ARCH}\" ; \\\n    curl -f -sL \"$URL\" >/usr/bin/k3sup; chmod +x /usr/bin/k3sup\n# Download WSK\nRUN VER=1.2.0 ; \\\n    BASE=https://github.com/apache/openwhisk-cli/releases/download ; \\\n    ARCH=$(dpkg --print-architecture) ; \\\n    URL=\"$BASE/$VER/OpenWhisk_CLI-$VER-linux-$ARCH.tgz\" ; \\\n    curl -f -sL \"$URL\" | tar xzvf - -C /usr/bin/\n# install kn\nRUN VER=\"v1.4.1\" ; \\\n    ARCH=\"$(dpkg --print-architecture)\" ; \\\n    URL=\"https://github.com/knative/client/releases/download/knative-$VER/kn-linux-$ARCH\" ; \\\n    curl -f -sL \"$URL\" | sudo tee /usr/bin/kn >/dev/null && sudo chmod +x /usr/bin/kn\n# Install nuv\nRUN VER=v0.2.1 ; \\\n    BASE=https://github.com/nuvolaris/nuvolaris-cli/releases/download ; \\\n    ARCH=$(dpkg --print-architecture) ; \\\n    URL=\"$BASE/$VER/nuv-$VER-linux-$ARCH.tar.gz\" ; \\\n    curl -f -sL \"$URL\" | tar xzvf - -C /usr/bin/\n# add and configure user\nRUN useradd -m nuvolaris -s /bin/bash &&\\\n    echo \"nuvolaris ALL=(ALL:ALL) NOPASSWD: ALL\" >>/etc/sudoers\nUSER nuvolaris\nWORKDIR /home/nuvolaris\n# add standard configuations\nADD setup.source /home/nuvolaris/.setup.source\nADD aliases /home/nuvolaris/.aliases\nADD gitconfig /home/nuvolaris/.gitconfig\nADD init.sh /usr/sbin/init.sh\nRUN cat .setup.source .aliases >.bashrc ;\\\n    /bin/bash -c 'source /home/nuvolaris/.bashrc'\n# proxy to docker and keep alive\nENTRYPOINT [\"/bin/bash\", \"/usr/sbin/init.sh\"]\n"
}