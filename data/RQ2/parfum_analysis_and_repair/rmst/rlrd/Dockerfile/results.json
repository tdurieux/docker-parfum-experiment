{
  "startTime": 1674245354794,
  "endTime": 1674245355824,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 128
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 32,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 76,
        "lineEnd": 90,
        "columnStart": 7,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# (experimental ssh forwarding: https://medium.com/@tonistiigi/build-secrets-and-ssh-forwarding-in-docker-18-09-ae8161d066)\n\n# Build with DOCKER_BUILDKIT=1 docker build .\n\n\n# Cuda image. Can by any image with CUDA. If \"base-x11\" we will build with X11 support.\nARG CUDA_BASE=\"nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\"\n\n# OpenAI-Gym image. Can by any image with Pytorch, Gym, etc. Special values: gym, gym-mujoco, gym-avenue\nARG GYM_BASE=\"gym\"\n\n\n\nFROM nvidia/opengl:1.0-glvnd-devel-ubuntu18.04 as cuda-x11\n\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libglm-dev libx11-dev libegl1-mesa-dev \\\n    libpng-dev xorg-dev cmake libjpeg-dev \\\n    build-essential pkg-config git curl wget automake libtool ca-certificates \\\n    x11-apps imagemagick && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone https://github.com/glfw/glfw.git && cd glfw && mkdir build && cd build && cmake .. && make &&  make install\n\n\n\nFROM ${CUDA_BASE} as pytorch\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl \\\n    wget \\\n    ca-certificates \\\n    sudo \\\n    git \\\n    bzip2 \\\n    libx11-6 \\\n    build-essential \\\n    screen \\\n    htop \\\n    tmux \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nENV PWD=/app\nWORKDIR $PWD\n\nRUN curl -f -so miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh \\\n  && bash miniconda.sh -b -p miniconda \\\n  && rm miniconda.sh\n\nENV PATH=\"$PWD/miniconda/bin:$PATH\"\n\nRUN pip install --no-cache-dir --upgrade pip\n\nRUN pip install --no-cache-dir torch==1.4.0 torchvision==0.5.0\n\n\n\nFROM pytorch as gym\n\n# OpenAI Gym commit hash. Shouldn't be empty.\nARG GYM_REV=\"c33cfd8b2cc8cac6c346bc2182cd568ef33b8821\"\nARG GYM_FEATURES=''\nRUN git clone https://github.com/openai/gym \\\n && cd gym \\\n && git reset --hard $GYM_REV \\\n && pip --no-cache-dir install .\"${GYM_FEATURES}\" \\\n && cd .. && rm -r gym\n\n\n\nFROM pytorch as gym-mujoco\n\n# mujoco-py requirements https://github.com/openai/mujoco-py/blob/master/Dockerfile\nRUN apt-get update -q \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    curl \\\n    git \\\n    libgl1-mesa-dev \\\n    libgl1-mesa-glx \\\n    libglew-dev \\\n    libosmesa6-dev \\\n    software-properties-common \\\n    net-tools \\\n    unzip \\\n    vim \\\n    virtualenv \\\n    wget \\\n    xpra \\\n    xserver-xorg-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN curl -f -o /usr/local/bin/patchelf https://s3-us-west-2.amazonaws.com/openai-sci-artifacts/manual-builds/patchelf_0.9_amd64.elf \\\n    && chmod +x /usr/local/bin/patchelf\n\nRUN mkdir -p .mujoco \\\n    && wget https://www.roboti.us/download/mujoco200_linux.zip -O mujoco.zip \\\n    && unzip mujoco.zip -d .mujoco \\\n    && mv .mujoco/mujoco200_linux .mujoco/mujoco200 \\\n    && rm mujoco.zip\n\n# will compile even without a valid mjkey\nARG MJ_KEY=\"\"\nRUN echo \"$MJ_KEY\" > .mujoco/mjkey.txt\n\nENV LD_LIBRARY_PATH \"$PWD/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH \"/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nENV MUJOCO_PY_MJKEY_PATH \"$PWD/.mujoco/mjkey.txt\"\nENV MUJOCO_PY_MUJOCO_PATH \"$PWD/.mujoco/mujoco200\"\n\n# OpenAI Gym commit hash. Shouldn't be empty.\nARG GYM_REV=\"c33cfd8b2cc8cac6c346bc2182cd568ef33b8821\"\nARG GYM_FEATURES='[mujoco]'\nRUN git clone https://github.com/openai/gym \\\n && cd gym \\\n && git reset --hard $GYM_REV \\\n && pip --no-cache-dir install .\"${GYM_FEATURES}\" \\\n && cd .. && rm -r gym\n\n# we need to change the permissions of mujoco_py/generated because mujoco-py will fail if it can't modifiy this directory\nRUN printf \"\\\ntry: import mujoco_py, os \\n\\\nexcept: exit() \\n\\\np = os.path.join(os.path.dirname(mujoco_py.__file__), 'generated') \\n\\\nprint(p) \\n\\\nos.remove(os.path.join(p, 'mujocopy-buildlock')) \\n\\\nos.chmod(p, 0o777) \\n\" | python\n\n\n\nFROM gym as gym-avenue\n\n# download Avenue assets\nENV AVENUE_ASSETS $PWD/avenue_assets\nRUN mkdir avenue_assets \\\n  && chmod 777 -R avenue_assets \\\n  && pip --no-cache-dir install gdown \\\n  && apt-get update && apt-get install -y --no-install-recommends unzip && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n#RUN mkdir avenue_assets/avenue_follow_car-linux \\\n#  && gdown -O avenue.zip --id 1eRKQaRxp2dJL9krKviqyecNv5ikFnMrC \\\n#  && unzip avenue.zip -d avenue_assets/avenue_follow_car-linux \\\n#  && rm avenue.zip \\\n#  && chmod 777 -R avenue_assets\n\nARG AVENUE_REV=master\nRUN git clone https://github.com/elementai/avenue avenue \\\n  && cd avenue \\\n  && git reset --hard ${AVENUE_REV?} \\\n  && pip --no-cache-dir install -e .\n\n# download Avenue assets\n#RUN mkdir avenue_assets\n#ENV AVENUE_ASSETS avenue_assets\n#RUN python -c 'import avenue; avenue.download(\"AvenueCar\")'\n#RUN chmod 777 -R avenue_assets\n\n\n\nFROM ${GYM_BASE}\n\n# installing dependencies first to allow them to be cached\nCOPY setup.py ./\nRUN python setup.py egg_info && pip install --no-cache-dir -r *.egg-info/requires.txt && rm -r setup.py *.egg-info\n\nCOPY . agents\n\nRUN pip --no-cache-dir install -e agents\n\n# optional wandb installation (we do this last because old versions break quickly so we don't want them to get cached)\nRUN pip --no-cache-dir install wandb --upgrade\n\n"
}