{
  "startTime": 1674253623587,
  "endTime": 1674253624323,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 117
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 15,
        "columnEnd": 195
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.8.1-slim\n\n\nENV PYTHONUNBUFFERED=1 \\\n    # prevents python creating .pyc files\n    PYTHONDONTWRITEBYTECODE=1 \\\n    \\\n    # pip\n    PIP_NO_CACHE_DIR=off \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    PIP_DEFAULT_TIMEOUT=100 \\\n    \\\n    # poetry\n    # https://python-poetry.org/docs/configuration/#using-environment-variables\n    POETRY_VERSION=1.0.3 \\\n    # make poetry install to this location\n    POETRY_HOME=\"/opt/poetry\" \\\n    # make poetry create the virtual environment in the project's root\n    # it gets named `.venv`\n    POETRY_VIRTUALENVS_IN_PROJECT=true \\\n    # do not ask any interactive question\n    POETRY_NO_INTERACTION=1 \\\n    \\\n    # paths\n    # this is where our requirements + virtual environment will live\n    PYSETUP_PATH=\"/opt/pysetup\" \\\n    VENV_PATH=\"/opt/pysetup/.venv\"\n\n\n# prepend poetry and venv to path\nENV PATH=\"$POETRY_HOME/bin:$VENV_PATH/bin:$PATH\"\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        # deps for installing poetry\n        curl \\\n        wget \\\n        # deps for building python deps\n        build-essential && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n\nRUN cd /opt && wget -c --header \"Cookie:oraclelicense=accept-securebackup-cookie\" https://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz\nRUN tar -xzf /opt/jdk-8u131-linux-x64.tar.gz -C /opt && ln -s /opt/jdk1.8.0_131 /opt/jdk && rm /opt/jdk-8u131-linux-x64.tar.gz\n\nENV JAVA_HOME /opt/jdk\nENV PATH ${PATH}:${JAVA_HOME}/bin\n\nRUN mkdir -p /opt/spark \\\n    && cd /opt/spark \\\n    && curl -f https://mirrors.hostingromania.ro/apache.org/spark/spark-3.0.3/spark-3.0.3-bin-hadoop2.7.tgz -o spark.tgz \\\n    && tar xf spark.tgz && rm spark.tgz\n\nWORKDIR /app\nCOPY checkengine ./checkengine\nCOPY ./tests ./tests\nCOPY ./pyproject.toml poetry.lock ./\nCOPY ./conftest.py ./\nCOPY ./README.md ./\n\nRUN poetry install\n\nENV SPARK_HOME=/opt/spark/spark-3.0.3-bin-hadoop2.7\n\nCMD poetry run pytest -s --cov=checkengine --cov-branch --cov-fail-under=80 tests/"
}