{
  "startTime": 1674254169918,
  "endTime": 1674254170374,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 2,
        "columnEnd": 88
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Start FROM Nvidia PyTorch image https://ngc.nvidia.com/catalog/containers/nvidia:pytorch\nFROM nvcr.io/nvidia/pytorch:21.10-py3\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y ffmpeg && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /root/.config/Ultralytics/\n# prevent YOLOv5 from downloading unnecessary assets\nRUN ln /usr/share/fonts/truetype/dejavu/DejaVuSans.ttf /root/.config/Ultralytics/Arial.ttf\n\nRUN pip install --no-cache-dir imageio imageio-ffmpeg tqdm seaborn && \\\n  rm -rf /root/.cache/pip\n\nARG GIT_SHA=c72270c076e1f087d3eb0b1ef3fb7ab55fe794ba\nRUN mkdir -p /root/.cache/torch/hub/ && \\\n  curl -f -L https://github.com/ultralytics/yolov5/archive/${GIT_SHA}.zip > /tmp/yolov5.zip && \\\n  unzip -D -q /tmp/yolov5.zip -d /root/.cache/torch/hub/ && \\\n  mv /root/.cache/torch/hub/yolov5-${GIT_SHA} /root/.cache/torch/hub/ultralytics_yolov5_master\n\n# work around https://github.com/pytorch/pytorch/issues/67598\nRUN sed -i \"s/if torch.cuda.amp.common.amp_definitely_not_available() and self.device == 'cuda':/if enabled and torch.cuda.amp.common.amp_definitely_not_available() and self.device == 'cuda':/\" /opt/conda/lib/python3.8/site-packages/torch/autocast_mode.py\n\nCOPY detector.py /workspace/\n\nENTRYPOINT [\"/workspace/detector.py\"]\nCMD [\"/videos/detect_latest.pt\", \"/videos/source/\"]\n\n\n# example usage from project main dir:\n# DOCKER_BUILDKIT=1 docker build -f \"tools/detection/Dockerfile.pytorch\" \"tools/detection/\" --network host -t \"veloroute.hamburg/docker:detector\"\n# docker run --rm --gpus all --tty --name veloroute2detect --mount \"type=bind,source=$(pwd)/videos/,target=/videos/\" \"veloroute.hamburg/docker:detector\"\n"
}