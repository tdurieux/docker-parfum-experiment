{
  "startTime": 1674253524474,
  "endTime": 1674253525485,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 63,
        "columnEnd": 109
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG RUST_VERSION=1.60.0\n\nFROM rust:$RUST_VERSION as builder\n\nENV CARGO_NET_GIT_FETCH_WITH_CLI=true\n\n# Compile dependencies only for build caching\nADD Cargo.toml /cargo-xwin/Cargo.toml\nADD Cargo.lock /cargo-xwin/Cargo.lock\nRUN mkdir /cargo-xwin/src && \\\n    touch  /cargo-xwin/src/lib.rs && \\\n    cargo build --manifest-path /cargo-xwin/Cargo.toml --release\n\n# Build cargo-xwin\nADD . /cargo-xwin/\n# Manually update the timestamps as ADD keeps the local timestamps and cargo would then believe the cache is fresh\nRUN touch /cargo-xwin/src/lib.rs /cargo-xwin/src/bin/cargo-xwin.rs\nRUN cargo build --manifest-path /cargo-xwin/Cargo.toml --release\n\nFROM rust:$RUST_VERSION\n\nRUN set -eux; \\\n    curl --fail https://dl.winehq.org/wine-builds/winehq.key | gpg --batch --dearmor > /usr/share/keyrings/winehq.gpg; \\\n    echo \"deb [signed-by=/usr/share/keyrings/winehq.gpg] https://dl.winehq.org/wine-builds/debian/ bullseye main\" > /etc/apt/sources.list.d/winehq.list; \\\n    # The way the debian package works requires that we add x86 support, even\n    # though we are only going be running x86_64 executables. We could also\n    # build from source, but that is out of scope.\n    dpkg --add-architecture i386; \\\n    apt-get update && apt-get install --no-install-recommends -y clang winehq-staging; \\\n    apt-get remove -y --auto-remove; \\\n    rm -rf /var/lib/apt/lists/*;\n\n# Install Rust targets\nRUN rustup target add x86_64-pc-windows-msvc aarch64-pc-windows-msvc && \\\n    rustup component add llvm-tools-preview\n\nCOPY --from=builder /cargo-xwin/target/release/cargo-xwin /usr/local/cargo/bin/\n"
}