{
  "startTime": 1674255628761,
  "endTime": 1674255629230,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM edoburu/django-base-images:py36-stretch-build-onbuild AS build-image\n\n# Node builder\nFROM node:9-stretch as frontend-build\nRUN mkdir -p /app/src\nWORKDIR /app/src\nCOPY src/package.json src/package-lock.json* /app/src/\nRUN npm install && npm cache clean --force;\nCOPY src/gulpfile.js /app/src/\nCOPY src/frontend/ /app/src/frontend/\nRUN npm run gulp\n\n# Start runtime container\nFROM edoburu/django-base-images:py36-stretch-runtime-onbuild\nENV DJANGO_SETTINGS_MODULE={{ project_name }}.settings.docker \\\n    UWSGI_MODULE={{ project_name }}.wsgi.docker:application\n\nHEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost:8080/api/health/ || exit 1\n\nCOPY --from=frontend-build /app/src/frontend/static /app/src/frontend/static\n\n# Collect static files as root, with gzipped files for uwsgi to serve\n# Add CACHE folder for django-compressor to write into\nRUN manage.py compilemessages && \\\n    manage.py collectstatic --noinput\n    #whitenoise does this;\n    #gzip --keep --best --force --recursive /app/web/static/ && \\\n\nCOPY deployment/docker/uwsgi-local.ini /usr/local/etc/uwsgi-local.ini\n\n# Tag the docker image\nARG GIT_VERSION\nLABEL git-version=$GIT_VERSION\nRUN echo $GIT_VERSION > .docker-git-version\n\n# Reduce default permissions\nUSER app\n"
}