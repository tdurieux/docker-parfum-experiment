{
  "startTime": 1674254308954,
  "endTime": 1674254309964,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 79,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 22,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 55,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 79,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 22,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG UBUNTU_VERSION=18.04\n\nARG ARCH=\nARG CUDA=11.2\nFROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}.1-base-ubuntu${UBUNTU_VERSION} as base\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\nARG ARCH\nARG CUDA\nARG CUDNN=8.1.0.77-1\nARG CUDNN_MAJOR_VERSION=8\nARG LIB_DIR_PREFIX=x86_64\nARG LIBNVINFER=7.2.2-1\nARG LIBNVINFER_MAJOR_VERSION=7\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\n# Pick up some TF dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        libcublas-${CUDA/./-} \\\n        cuda-nvrtc-${CUDA/./-} \\\n        libcufft-${CUDA/./-} \\\n        libcurand-${CUDA/./-} \\\n        libcusolver-${CUDA/./-} \\\n        libcusparse-${CUDA/./-} \\\n        curl \\\n        libcudnn8=${CUDNN}+cuda${CUDA} \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        software-properties-common \\\n        unzip && rm -rf /var/lib/apt/lists/*;\n\n# Install TensorRT if not building for PowerPC\n# NOTE: libnvinfer uses cuda11.1 versions\nRUN [[ \"${ARCH}\" = \"ppc64le\" ]] || { apt-get update && \\\n        apt-get install -y --no-install-recommends libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda11.1 \\\n        libnvinfer-plugin${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda11.1 \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/*; }\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n\n# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure\n# dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    python3 \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN python3 -m pip --no-cache-dir install --upgrade \\\n    \"pip<20.3\" \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which python3) /usr/local/bin/python\n\n# Options:\n#   tensorflow\n#   tensorflow-gpu\n#   tf-nightly\n#   tf-nightly-gpu\nARG TF_PACKAGE=tensorflow\nRUN apt-get update && apt-get install --no-install-recommends -y curl libhdf5-dev wget && rm -rf /var/lib/apt/lists/*;\nRUN python3 -m pip install --no-cache-dir --global-option=build_ext \\\n            --global-option=-I/usr/include/hdf5/serial/ \\\n            --global-option=-L/usr/lib/powerpc64le-linux-gnu/hdf5/serial \\\n            h5py\n\n# CACHE_STOP is used to rerun future commands, otherwise downloading the .whl will be cached and will not pull the most recent version\nARG CACHE_STOP=1\nRUN if [ ${TF_PACKAGE} = tensorflow-gpu ]; then \\\n        BASE=https://powerci.osuosl.org/job/TensorFlow_PPC64LE_GPU_Release_Build/lastSuccessfulBuild/; \\\n    elif [ ${TF_PACKAGE} = tf-nightly-gpu ]; then \\\n        BASE=https://powerci.osuosl.org/job/TensorFlow_PPC64LE_GPU_Nightly_Artifact/lastSuccessfulBuild/; \\\n    elif [ ${TF_PACKAGE} = tensorflow ]; then \\\n        BASE=https://powerci.osuosl.org/job/TensorFlow_PPC64LE_CPU_Release_Build/lastSuccessfulBuild/; \\\n    elif [ ${TF_PACKAGE} = tf-nightly ]; then \\\n        BASE=https://powerci.osuosl.org/job/TensorFlow_PPC64LE_CPU_Nightly_Artifact/lastSuccessfulBuild/; \\\n    fi; \\\n    MAJOR=`python3 -c 'import sys; print(sys.version_info[0])'`; \\\n    MINOR=`python3 -c 'import sys; print(sys.version_info[1])'`; \\\n    PACKAGE=$(wget -qO- ${BASE}\"api/xml?xpath=//fileName&wrapper=artifacts\" | grep -o \"[^<>]*cp${MAJOR}${MINOR}[^<>]*.whl\"); \\\n    wget ${BASE}\"artifact/tensorflow_pkg/\"${PACKAGE}; \\\n    python3 -m pip install --no-cache-dir ${PACKAGE}\n\nCOPY bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\n"
}