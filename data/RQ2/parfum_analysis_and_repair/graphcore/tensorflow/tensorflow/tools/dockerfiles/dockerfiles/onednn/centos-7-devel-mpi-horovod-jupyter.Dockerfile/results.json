{
  "startTime": 1674249430261,
  "endTime": 1674249431061,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 31,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 65,
        "lineEnd": 68,
        "columnStart": 21,
        "columnEnd": 9
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 92,
        "lineEnd": 97,
        "columnStart": 21,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG CENTOS_VERSION=8\n\nFROM centos:${CENTOS_VERSION} AS base\n\n# Enable both PowerTools and EPEL otherwise some packages like hdf5-devel fail to install\nRUN yum clean all && \\\n    yum update -y && \\\n    yum install -y epel-release && rm -rf /var/cache/yum\n\nRUN yum update -y && \\\n    yum install -y \\\n        curl \\\n        freetype-devel \\\n        gcc \\\n        gcc-c++ \\\n        git \\\n        hdf5-devel \\\n        java-1.8.0-openjdk \\\n        java-1.8.0-openjdk-devel \\\n        java-1.8.0-openjdk-headless \\\n        libcurl-devel \\\n        make \\\n        pkg-config \\\n        rsync \\\n        sudo \\\n        unzip \\\n        zeromq-devel \\\n        zip \\\n        zlib-devel && \\\n        yum clean all && rm -rf /var/cache/yum\n\nENV CI_BUILD_PYTHON python\n\n# CACHE_STOP is used to rerun future commands, otherwise cloning tensorflow will be cached and will not pull the most recent version\nARG CACHE_STOP=1\n# Check out TensorFlow source code if --build-arg CHECKOUT_TF_SRC=1\nARG CHECKOUT_TF_SRC=0\nARG TF_BRANCH=master\nRUN test \"${CHECKOUT_TF_SRC}\" -eq 1 && git clone https://github.com/tensorflow/tensorflow.git --branch \"${TF_BRANCH}\" --single-branch /tensorflow_src || true\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\nARG PYTHON=python3\n\nRUN yum update -y && yum install -y \\\n    ${PYTHON} \\\n    ${PYTHON}-pip \\\n    which && \\\n    yum clean all && rm -rf /var/cache/yum\n\n\nRUN ${PYTHON} -m pip --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -sf $(which ${PYTHON}) /usr/local/bin/python && \\\n    ln -sf $(which ${PYTHON}) /usr/local/bin/python3 && \\\n    ln -sf $(which ${PYTHON}) /usr/bin/python\n\n# On CentOS 7, yum needs to run with Python2.7\nRUN sed -i 's#/usr/bin/python#/usr/bin/python2#g' /usr/bin/yum /usr/libexec/urlgrabber-ext-down\n\n# Install bazel\nARG BAZEL_VERSION=3.7.2\nRUN mkdir /bazel && \\\n    curl -fSsL -o /bazel/installer.sh \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh\" && \\\n    curl -fSsL -o /bazel/LICENSE.txt \"https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE\" && \\\n    bash /bazel/installer.sh && \\\n    rm -f /bazel/installer.sh\n\nRUN yum update -y && yum install -y \\\n    openmpi \\\n    openmpi-devel \\\n    openssh \\\n    openssh-server \\\n    which && \\\n    yum clean all && rm -rf /var/cache/yum\n\nENV PATH=\"/usr/lib64/openmpi/bin:${PATH}\"\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv -f $(which mpirun) /usr/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/bin/mpirun && \\\n    chmod a+x /usr/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\nRUN echo \"btl_tcp_if_exclude = lo,docker0\" >> /etc/openmpi-x86_64/openmpi-mca-params.conf\n\n# Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/sshd_config | grep -v StrictHostKeyChecking > /etc/ssh/sshd_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/sshd_config.new && \\\n    mv -f /etc/ssh/sshd_config.new /etc/ssh/sshd_config\n\n# Check out horovod source code if --build-arg CHECKOUT_HOROVOD_SRC=1\nARG CHECKOUT_HOROVOD_SRC=0\nARG HOROVOD_BRANCH=master\nRUN test \"${CHECKOUT_HOROVOD_SRC}\" -eq 1 && git clone --branch \"${HOROVOD_BRANCH}\" --single-branch --recursive https://github.com/uber/horovod.git /horovod_src || true\n\nCOPY bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\n\nRUN ${PYTHON} -m pip install --no-cache-dir jupyter matplotlib\n# Pin ipykernel and nbformat; see https://github.com/ipython/ipykernel/issues/422\nRUN ${PYTHON} -m pip install --no-cache-dir jupyter_http_over_ws ipykernel==5.1.1 nbformat==4.4.0\nRUN jupyter serverextension enable --py jupyter_http_over_ws\n\nRUN mkdir -p /tf/ && chmod -R a+rwx /tf/\nRUN mkdir /.local && chmod a+rwx /.local\nWORKDIR /tf\nEXPOSE 8888\n\nRUN ${PYTHON} -m ipykernel.kernelspec\n\nCMD [\"bash\", \"-c\", \"source /etc/bash.bashrc && jupyter notebook --notebook-dir=/tf --ip 0.0.0.0 --no-browser --allow-root\"]\n"
}