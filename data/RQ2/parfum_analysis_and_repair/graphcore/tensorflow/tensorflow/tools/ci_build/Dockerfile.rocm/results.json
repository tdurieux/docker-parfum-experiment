{
  "startTime": 1674254151315,
  "endTime": 1674254152022,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 18,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 59,
        "columnStart": 52,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 65,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 18,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile provides a starting point for a ROCm installation of\n# MIOpen and tensorflow.\nFROM ubuntu:bionic\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\n\nARG ROCM_DEB_REPO=http://repo.radeon.com/rocm/apt/4.1/\nARG ROCM_BUILD_NAME=xenial\nARG ROCM_BUILD_NUM=main\nARG ROCM_PATH=/opt/rocm-4.1.0\n\nENV DEBIAN_FRONTEND noninteractive\nENV TF_NEED_ROCM 1\nENV HOME /root/\nRUN apt update && apt install --no-install-recommends -y wget software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Add rocm repository\nRUN apt-get clean all\nRUN bin/bash -c 'if [[ $ROCM_DEB_REPO == http://repo.radeon.com/rocm/*  ]] ; then \\\n      wget -qO - $ROCM_DEB_REPO/rocm.gpg.key | apt-key add -; \\\n      echo \"deb [arch=amd64] $ROCM_DEB_REPO $ROCM_BUILD_NAME $ROCM_BUILD_NUM\" > /etc/apt/sources.list.d/rocm.list; \\\n    else \\\n      echo \"deb [arch=amd64 trusted=yes] $ROCM_DEB_REPO $ROCM_BUILD_NAME $ROCM_BUILD_NUM\" > /etc/apt/sources.list.d/rocm.list ; \\\n    fi'\n\n# Install misc pkgs\nRUN apt-get update --allow-insecure-repositories && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n  build-essential \\\n  bsdmainutils \\\n  clang-6.0 \\\n  clang-format-6.0 \\\n  clang-tidy-6.0 \\\n  cmake \\\n  cmake-qt-gui \\\n  ssh \\\n  curl \\\n  apt-utils \\\n  pkg-config \\\n  g++-multilib \\\n  git \\\n  libunwind-dev \\\n  libfftw3-dev \\\n  libelf-dev \\\n  libncurses5-dev \\\n  libpthread-stubs0-dev \\\n  vim \\\n  gfortran \\\n  libboost-program-options-dev \\\n  libssl-dev \\\n  libboost-dev \\\n  libboost-system-dev \\\n  libboost-filesystem-dev \\\n  rpm \\\n  libnuma-dev \\\n  pciutils \\\n  virtualenv \\\n  python-pip \\\n  python3-pip \\\n  libxml2 \\\n  libxml2-dev \\\n  wget && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y --allow-unauthenticated \\\n    rocm-dev rocm-libs hipcub rocm-utils rocm-cmake \\\n    rocfft miopen-hip miopengemm rocblas hipblas rocrand rccl && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set up paths\nENV HCC_HOME=$ROCM_PATH/hcc\nENV HIP_PATH=$ROCM_PATH/hip\nENV OPENCL_ROOT=$ROCM_PATH/opencl\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n\n# Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\\ngfx908\" >> ${ROCM_PATH}/bin/target.lst'\n\n# Need to explicitly create the $ROCM_PATH/.info/version file to workaround what seems to be a bazel bug\n# The env vars being set via --action_env in .bazelrc and .tf_configure.bazelrc files are sometimes\n# not getting set in the build command being spawned by bazel (in theory this should not happen)\n# As a consequence ROCM_PATH is sometimes not set for the hipcc commands.\n# When hipcc incokes hcc, it specifies $ROCM_PATH/.../include dirs via the `-isystem` options\n# If ROCM_PATH is not set, it defaults to /opt/rocm, and as a consequence a dependency is generated on the\n# header files included within `/opt/rocm`, which then leads to bazel dependency errors\n# Explicitly creating the $ROCM_PATH/.info/version allows ROCM path to be set correrctly, even when ROCM_PATH\n# is not explicitly set, and thus avoids the eventual bazel dependency error.\n# The bazel bug needs to be root-caused and addressed, but that is out of our control and may take a long time\n# to come to fruition, so implementing the workaround to make do till then\n# Filed https://github.com/bazelbuild/bazel/issues/11163 for tracking this\nRUN touch ${ROCM_PATH}/.info/version\n\n# Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n\n# Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n\n# Configure the build for our ROCm configuration.\nENV TF_NEED_ROCM 1\n\n# This is a temporary workaround to fix Out-Of-Memory errors we are running into with XLA perf tests\n# By default, HIP runtime \"hides\" 256MB from the TF Runtime, but with recent changes (update to ROCm2.3, dynamic loading of roc* libs, et al)\n# it seems that we need to up the threshold slightly to 320MB\nENV HIP_HIDDEN_FREE_MEM=320\n"
}