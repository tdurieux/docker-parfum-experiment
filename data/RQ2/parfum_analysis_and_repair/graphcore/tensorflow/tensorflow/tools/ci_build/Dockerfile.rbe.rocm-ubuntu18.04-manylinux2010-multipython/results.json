{
  "startTime": 1674221116411,
  "endTime": 1674221117470,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 5,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 5,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 57,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for ROCm RBE builds.\n#\n# To push a new version, run:\n# $ docker build -f Dockerfile.local-toolchain-ubuntu18.04-manylinux2010 \\\n#  --tag \"local-toolchain-ubuntu18.04-manylinux2010\" .\n# $ docker build -f Dockerfile.rbe.rocm-ubuntu18.04-manylinux2010-multipython \\\n#  --tag \"gcr.io/tensorflow-testing/nosla-rocm-ubuntu18.04-manylinux2010-multipython\" .\n# $ docker push gcr.io/tensorflow-testing/nosla-rocm-ubuntu18.04-manylinux2010-multipython\n\nFROM ubuntu:18.04\nCOPY --from=local-toolchain-ubuntu18.04-manylinux2010 /dt7 /dt7\nCOPY --from=local-toolchain-ubuntu18.04-manylinux2010 /dt8 /dt8\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install ROCm packages\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl libnuma-dev gnupg sudo libelf1 build-essential \\\n  && curl -f -sL https://repo.radeon.com/rocm/apt/4.0/rocm.gpg.key | apt-key add - \\\n  && printf \"deb [arch=amd64] http://repo.radeon.com/rocm/apt/4.0/ xenial main\" | tee /etc/apt/sources.list.d/rocm.list \\\n  && apt-get update && apt-get install -y --no-install-recommends \\\n    rocm-dev rocm-libs hipcub rocm-utils rocm-cmake \\\n    rocfft miopen-hip miopengemm rocblas hipblas rocrand rccl \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Set ROCm environment variables and paths.\nARG ROCM_PATH=/opt/rocm\nENV HCC_HOME=$ROCM_PATH/hcc\nENV HIP_PATH=$ROCM_PATH/hip\nENV OPENCL_ROOT=$ROCM_PATH/opencl\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n\n# Set target file to help determine which device(s) to build for\nRUN bash -c \"ls -al /opt/roc*\"\nRUN bash -c \"echo -e 'gfx803\\ngfx900\\ngfx906\\ngfx908' > $ROCM_PATH/bin/target.lst\"\n\n# Copy and run the install scripts.\nCOPY install/install_bootstrap_deb_packages.sh /install/\nRUN /install/install_bootstrap_deb_packages.sh\n\nCOPY install/install_deb_packages.sh /install/\nRUN /install/install_deb_packages.sh\n\n# Install additional packages needed for this image:\n# - bsdmainutils (hexdump) for MLIR generated GPU kernels\n# - dependencies to build Python from source\n# - patchelf, as it is required by auditwheel\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    bsdmainutils \\\n    libbz2-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    libncurses5-dev \\\n    libnss3-dev \\\n    libreadline-dev \\\n    patchelf \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY install/install_bazel.sh /install/\nRUN /install/install_bazel.sh\n\nCOPY install/build_and_install_python.sh /install/\nRUN /install/build_and_install_python.sh \"3.6.9\"\nRUN /install/build_and_install_python.sh \"3.7.7\"\nRUN /install/build_and_install_python.sh \"3.8.2\"\n\nCOPY install/install_pip_packages_by_version.sh /install/\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.6\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.7\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.8\"\n\nENV CLANG_VERSION=\"r42cab985fd95ba4f3f290e7bb26b93805edb447d\"\nCOPY install/install_latest_clang.sh /install/\nRUN /install/install_latest_clang.sh\n"
}