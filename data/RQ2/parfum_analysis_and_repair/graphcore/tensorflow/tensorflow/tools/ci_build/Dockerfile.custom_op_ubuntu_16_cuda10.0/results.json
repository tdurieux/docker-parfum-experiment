{
  "startTime": 1674251811662,
  "endTime": 1674251812503,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 39,
        "columnStart": 22,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 57,
        "columnStart": 22,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for Ubuntu 16.04 manylinux2010 custom ops with GPU.\n\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 as devtoolset\n\nLABEL maintainer=\"Amit Patankar <amitpatankar@google.com>\"\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      cpio \\\n      file \\\n      flex \\\n      g++ \\\n      make \\\n      rpm2cpio \\\n      unar \\\n      wget \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD devtoolset/fixlinks.sh fixlinks.sh\nADD devtoolset/build_devtoolset.sh build_devtoolset.sh\nADD devtoolset/rpm-patch.sh rpm-patch.sh\n\n# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-7 in /dt7.\nRUN /build_devtoolset.sh devtoolset-7 /dt7\n# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-8 in /dt8.\nRUN /build_devtoolset.sh devtoolset-8 /dt8\n\n# TODO(klimek): Split up into two different docker images.\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\n\nLABEL maintainer=\"Amit Patankar <amitpatankar@google.com>\"\n\nCOPY --from=devtoolset /dt7 /dt7\nCOPY --from=devtoolset /dt8 /dt8\n\n# Install TensorRT.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libnvinfer-dev=5.1.5-1+cuda10.0 \\\n    libnvinfer5=5.1.5-1+cuda10.0 \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN /install/install_deb_packages.sh\nRUN /install/install_clang.sh\nRUN /install/install_bazel.sh\nRUN /install/install_buildifier.sh\n\nENV TF_NEED_CUDA=1\n\n# Install python 3.6.\nRUN add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n    python3.6 python3.6-dev python3-pip python3.6-venv && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    python3.6 -m pip install pip --upgrade && \\\n    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 0\n\n# Install python 3.7\nRUN /install/install_python37.sh\n\n# Install pip3.6\nRUN wget https://bootstrap.pypa.io/get-pip.py && python3.6 get-pip.py && rm get-pip.py\n\nRUN /install/install_pip_packages.sh\nRUN /install/install_auditwheel.sh\n\n# Make python3.6 the default python version\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3.6 0\n\n# Install given tensorflow or tf-nightly version, if not specified, install the # latest official release\nARG TF_PACKAGE=tensorflow\nARG TF_PACKAGE_VERSION=\nRUN pip3 install --no-cache-dir ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}\n"
}