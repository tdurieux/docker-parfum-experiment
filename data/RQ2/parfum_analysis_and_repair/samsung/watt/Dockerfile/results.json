{
  "startTime": 1674220822572,
  "endTime": 1674220823597,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# build docker image by\n# $ sudo docker build -t simple .\n\n# To try something more ambitious, you can run an Ubuntu container with:\n# $ sudo docker run -it simple bash\n\n# Download base image ubuntu 16.04 since most developers are using it.\nFROM ubuntu:18.04\n\n################################ AS ROOT ################################\n\n# nacl_sdk requires libc for i386. Uncomment this for nacl_sdk support.\n# RUN dpkg --add-architecture i386\n\n# Install WATT's dependencies to avoid doing this by launch script\n# since it is expected to be run as regular user and sudo is not recommended\n# by docker documentation.\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n        lsb-release \\\n        libgconf-2-4 \\\n        android-tools-adb \\\n        git \\\n        python-pip \\\n        # Uncomment them for emscripten support.\n        # build-essential \\\n        # cmake \\\n        # Uncomment them for nacl_sdk support.\n        # ca-certificates \\\n        # libc6:i386 \\\n        pciutils \\\n        wget \\\n        zip && \\\n    apt-get -o Dpkg::Options::=\"--force-overwrite\" --no-install-recommends install -y \\\n        openjdk-8-jdk && \\\n    wget -qO- https://deb.nodesource.com/setup_10.x | bash - && \\\n    apt-get install --no-install-recommends -y nodejs && \\\n    apt-get -y clean && \\\n    apt-get -y autoclean && \\\n    apt-get -y autoremove && rm -rf /var/lib/apt/lists/*;\n\n# Install python additional modules.\nRUN pip install --no-cache-dir \\\n        psutil \\\n        requests\n\n# Create new user to invoke launch script with user privileges.\n# Running it as root causes issue for npm postinstall in Design Editor.\nRUN groupadd -r watt_group && useradd --no-log-init -m -g watt_group watt_user\nUSER watt_user\n\n################################ AS USER ################################\n\nWORKDIR /home/watt_user/\n\n# FIXME: Update Tizen Studio and make it work on headless environment.\n\n# Download and install (latest) Tizen Studio 3.2 into default ~/tizen-studio (for user certificate creation)\n# RUN wget -qO- http://download.tizen.org/sdk/Installer/tizen-studio_3.2/web-cli_Tizen_Studio_3.2_ubuntu-64.bin > web-cli_Tizen_Studio_3.2_ubuntu-64.bin && \\\n#     chmod +x web-cli_Tizen_Studio_3.2_ubuntu-64.bin && \\\n#     mkdir /home/watt_user/tizen-studio && \\\n#     ./web-cli_Tizen_Studio_3.2_ubuntu-64.bin --accept-license /home/watt_user/tizen-studio && \\\n#     rm web-cli_Tizen_Studio_3.2_ubuntu-64.bin\n#\n# # Download and install Tizen Studio 2.5 into ~/tizen-studio-2.5 (for profile creation and packaging)\n# # Latest version is unable to pack to wgt once user cert is specified\n# # More details at http://suprem.sec.samsung.net/jira/browse/TIZENWF-2298\n# # or https://developer.tizen.org/ko/forums/sdk-ide/pwd-fle-format-profile.xml-certificates?langredirect=1\n# RUN wget -qO- http://download.tizen.org/sdk/Installer/tizen-studio_2.5/web-cli_Tizen_Studio_2.5_ubuntu-64.bin > web-cli_Tizen_Studio_2.5_ubuntu-64.bin && \\\n#     chmod +x web-cli_Tizen_Studio_2.5_ubuntu-64.bin && \\\n#     mkdir /home/watt_user/tizen-studio-2.5 && \\\n#     ./web-cli_Tizen_Studio_2.5_ubuntu-64.bin --accept-license /home/watt_user/tizen-studio-2.5 && \\\n#     rm web-cli_Tizen_Studio_2.5_ubuntu-64.bin\n\n# Consider cloning WATT from scratch once new (docker) user will be created to access github.\nCOPY --chown=watt_user:watt_group . /home/watt_user/WATT\n\nWORKDIR /home/watt_user/WATT\n\n# Invalidate submodules path. Otherwise submodules like tern (submodule of brackets-src) would\n# refer to local PC path (not docker one), launch will init them.\nRUN git submodule deinit -f .\n\nEXPOSE 3000\n\n# Stop bower from asking for statistics when installing.\nENV CI=true\n\nENV NODE_ENV=docker\n\n# Prepare WATT (download node modules, emsdk, build DE ).\n# This affects docker image size, can be used to speed up container start.\n# RUN ./launch --dry\n#     npm cache clean --force && \\\n#     rm -rf tools/wabt/out/\n\n# Launch WATT by CMD command so you can replace it by any command to test image.\n# Features behind flags like pwe, smart things are not added.\nCMD [ \"./launch\", \"--verbose\", \"--bypass_emscripten\", \"--bypass_nacl_sdk\" ]\n"
}