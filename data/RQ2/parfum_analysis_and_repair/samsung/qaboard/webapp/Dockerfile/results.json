{
  "startTime": 1674256081084,
  "endTime": 1674256081976,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 22,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:lts\nWORKDIR /webapp\n\nRUN apt update -qq && apt-get install -y --no-install-recommends rsync && rm -rf /var/lib/apt/lists/*;\n\nENV PATH /app/node_modules/.bin:$PATH\n\nCOPY package.json package-lock.json ./\n\n# In the past we had ulimit issues and \"ulimit -n 2000 &&\"\nRUN npm ci\nCOPY . ./\nARG REACT_APP_QABOARD_DOCS_ROOT=\"https://samsung.github.io/qaboard/\"\nENV REACT_APP_QABOARD_DOCS_ROOT=$REACT_APP_QABOARD_DOCS_ROOT\nRUN npm run-script build\n\n# When upgrading, we want to enable clients to continue using a previous bundle\n# without the application crashing and asking for a refresh\n# The strategy is to server the application from a named volume at\nVOLUME /builds\n# When we start the app, we  copy the bundle over there and ensure new clients\n# get the new version.\nCMD [\"rsync\", \"-r\", \"build/\", \"/builds\"]\n"
}