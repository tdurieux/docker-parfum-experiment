{
  "startTime": 1674251438675,
  "endTime": 1674251439821,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 45,
        "columnEnd": 82
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 86,
        "columnEnd": 123
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 127,
        "columnEnd": 164
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:lts-alpine\nWORKDIR /website\n\nRUN apk update && apk add --no-cache \\\n    # needed for node-gyp.. some do it with npm install in one layer\n    # https://github.com/mhart/alpine-node/issues/27\n    # https://github.com/nodejs/docker-node/issues/384\n    # https://github.com/nodejs/docker-node/issues/282\n    g++ make python3 \\\n    rsync \\\n    && rm -rf /var/cache/apk/*\n\nENV PATH /app/node_modules/.bin:$PATH\n# RUN yarn config set strict-ssl false\n\n# RUN npm install -g yarn\n\n# In the past we had ulimit issues and \"ulimit -n 2000 &&\"\nCOPY package.json yarn.lock ./\n# we try multiple times to work around network issues...\nRUN yarn install --network-timeout 100000 || yarn install --network-timeout 100000 || yarn install --network-timeout 100000 || yarn install --network-timeout 100000 && yarn cache clean;\nCOPY . ./\n\n# On the website we have algolia for the search, but the baseURL (/qaboard) is different than\n# when running from the application (/docs). So we don't use algolia for the app...\n# RUN yarn run swizzle docusaurus-lunr-search SearchBar\nENV QABOARD_DOCS_FOR_WEBAPP true\nARG QABOARD_URL\nENV QABOARD_URL=$QABOARD_URL\nRUN yarn build\n\n# When upgrading, we want to enable clients to continue using a previous bundle\n# without the application crashing and asking for a refresh\n# The strategy is to server the application from a named volume at\nVOLUME /builds\n# When we start the app, we  copy the bundle over there and ensure new clients\n# get the new version.\nCMD [\"rsync\", \"-r\", \"build/\", \"/builds\"]\n"
}