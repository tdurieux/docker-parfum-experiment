diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/wmgeolab/gbrelease/.github/workflows/workflowImages/ubuntu-small-gdal-plus/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/wmgeolab/gbrelease/.github/workflows/workflowImages/ubuntu-small-gdal-plus/Dockerfile/repaired.Dockerfile
index cfbf95c..ef7c907 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/wmgeolab/gbrelease/.github/workflows/workflowImages/ubuntu-small-gdal-plus/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/wmgeolab/gbrelease/.github/workflows/workflowImages/ubuntu-small-gdal-plus/Dockerfile/repaired.Dockerfile
@@ -20,7 +20,7 @@ RUN apt-get update -y \
             software-properties-common build-essential ca-certificates \
             git make cmake wget unzip libtool automake \
             zlib1g-dev libsqlite3-dev pkg-config sqlite3 libcurl4-gnutls-dev \
-            libtiff5-dev
+            libtiff5-dev && rm -rf /var/lib/apt/lists/*;
 
 # Setup build env for GDAL
 RUN apt-get update -y \
@@ -31,7 +31,7 @@ RUN apt-get update -y \
        libwebp-dev \
        libzstd-dev bash zip curl \
        libpq-dev libssl-dev libopenjp2-7-dev \
-       autoconf automake sqlite3 bash-completion
+       autoconf automake sqlite3 bash-completion && rm -rf /var/lib/apt/lists/*;
 
 # Build openjpeg
 ARG OPENJPEG_VERSION=
@@ -55,12 +55,12 @@ ARG PROJ_INSTALL_PREFIX
 ARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED
 RUN \
     mkdir -p /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \
-    && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \
+    && curl -f -LOs https://download.osgeo.org/proj/proj-datumgrid-latest.zip \
     && unzip -q -j -u -o proj-datumgrid-latest.zip  -d /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \
     && rm -f *.zip
 
 RUN apt-get update -y \
-    && apt-get install -y --fix-missing --no-install-recommends rsync ccache
+    && apt-get install -y --fix-missing --no-install-recommends rsync ccache && rm -rf /var/lib/apt/lists/*;
 ARG RSYNC_REMOTE
 
 # Build PROJ
@@ -80,7 +80,8 @@ RUN mkdir proj \
         ccache -M 100M; \
     fi \
     && CFLAGS='-DPROJ_RENAME_SYMBOLS -O2' CXXFLAGS='-DPROJ_RENAME_SYMBOLS -DPROJ_INTERNAL_CPP_NAMESPACE -O2' \
-        ./configure --prefix=${PROJ_INSTALL_PREFIX} --disable-static \
+        ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
+        --prefix=${PROJ_INSTALL_PREFIX} --disable-static \
     && make -j$(nproc) \
     && make install DESTDIR="/build" \
     && if test "${RSYNC_REMOTE}" != ""; then \
@@ -99,7 +100,7 @@ RUN mkdir proj \
     && mv /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \
     && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO_FIRST} \
     && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so \
-    && rm /build${PROJ_INSTALL_PREFIX}/lib/libproj.*  \
+    && rm /build${PROJ_INSTALL_PREFIX}/lib/libproj.* \
     && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO_FIRST} \
     && strip -s /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \
     && for i in /build${PROJ_INSTALL_PREFIX}/bin/*; do strip -s $i 2>/dev/null || /bin/true; done
@@ -109,7 +110,7 @@ ARG GDAL_VERSION=master
 ARG GDAL_RELEASE_DATE
 ARG GDAL_BUILD_IS_RELEASE
 RUN if test "${GDAL_VERSION}" = "master"; then \
-        export GDAL_VERSION=$(curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H "Accept: application/vnd.github.VERSION.sha"); \
+        export GDAL_VERSION=$( curl -f -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H "Accept: application/vnd.github.VERSION.sha"); \
         export GDAL_RELEASE_DATE=$(date "+%Y%m%d"); \
     fi \
     && if test "x${GDAL_BUILD_IS_RELEASE}" = "x"; then \
@@ -132,7 +133,7 @@ RUN if test "${GDAL_VERSION}" = "master"; then \
         export CXX=$PWD/ccache_g++.sh; \
         ccache -M 1G; \
     fi \
-    && ./configure --prefix=/usr --without-libtool \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr --without-libtool \
     --with-hide-internal-symbols \
     --with-jpeg12 \
     --with-python \
@@ -172,22 +173,22 @@ RUN date
 
 # PROJ dependencies
 RUN apt-get update; \
-    DEBIAN_FRONTEND=noninteractive apt-get install -y  --no-install-recommends \
+    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
         libsqlite3-0 libtiff5 libcurl4 \
-        curl unzip ca-certificates
+        curl unzip ca-certificates && rm -rf /var/lib/apt/lists/*;
 
 # GDAL dependencies
 RUN apt-get update -y; \
-    DEBIAN_FRONTEND=noninteractive apt-get install -y  --no-install-recommends \
+    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
         python3-numpy libpython3.8 \
         libjpeg-turbo8 libgeos-3.8.0 libgeos-c1v5 \
         libexpat1 \
         libxerces-c3.2 \
         libwebp6 \
-        libzstd1 bash libpq5 libssl1.1 libopenjp2-7
+        libzstd1 bash libpq5 libssl1.1 libopenjp2-7 && rm -rf /var/lib/apt/lists/*;
 
 RUN apt-get update; \
-    DEBIAN_FRONTEND=noninteractive apt-get install -y python-is-python3
+    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y python-is-python3 && rm -rf /var/lib/apt/lists/*;
 
 # Order layers starting with less frequently varying ones
 # Only used for custom libopenjp2
@@ -210,16 +211,16 @@ RUN ldconfig
 
 #Adding some custom pieces on top for gB
 RUN apt-get update -y; \
-    DEBIAN_FRONTEND=noninteractive apt-get install -y \
-        software-properties-common 
+    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \
+        software-properties-common && rm -rf /var/lib/apt/lists/*;
 RUN add-apt-repository ppa:git-core/ppa
 RUN apt-get update
-RUN apt-get install -y git
-
-RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
-           
-RUN apt-get install -y git-lfs python3-pip npm        
-RUN npm install -g mapshaper
-RUN pip3 install geopandas
-RUN pip3 install matplotlib
-RUN pip3 install PyGithub
\ No newline at end of file
+RUN apt-get install --no-install-recommends -y git && rm -rf /var/lib/apt/lists/*;
+
+RUN curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
+
+RUN apt-get install --no-install-recommends -y git-lfs python3-pip npm && rm -rf /var/lib/apt/lists/*;
+RUN npm install -g mapshaper && npm cache clean --force;
+RUN pip3 install --no-cache-dir geopandas
+RUN pip3 install --no-cache-dir matplotlib
+RUN pip3 install --no-cache-dir PyGithub
\ No newline at end of file