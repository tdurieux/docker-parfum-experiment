{
  "startTime": 1674218654427,
  "endTime": 1674218655189,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile for Scipy development\n# Meson build system - https://scipy.github.io/devdocs/dev/contributor/meson.html#full-details-and-explanation\n# https://scipy.github.io/devdocs/dev/contributor/conda_guide.html#conda-guide\n#\n# Usage:\n# -------\n#\n# To make a local build of the container, from the root directory:\n# docker build  --rm -f \"./tools/docker_dev/meson.Dockerfile\" -t <build-tag> \".\" \n#\n# To use the container use the following command. It assumes that you are in\n# the root folder of the scipy git repository, making it available as\n# /home/scipy in the container. Whatever changes you make to that directory\n# are visible in the host and container.\n# The docker image is retrieved from the scipy dockerhub repository\n#\n# docker run --rm -it -v $(pwd):/home/scipy scipy:<image-tag>\n#\n# By default the container will activate the conda environment scipy-dev\n# which contains all the dependencies needed for SciPy development\n#\n# To build Scipy run: python dev.py build -j2\n# For the all-in-one (configure,build,test SciPy and docs) use: python dev.py test\n#\n# To run the tests use: python dev.py --no-build test\n#\n# This image is based on: Ubuntu 20.04 (focal)\n# https://hub.docker.com/_/ubuntu/?tab=tags&name=focal\n# OS/ARCH: linux/amd64\nARG ROOT_CONTAINER=gitpod/workspace-base:latest\nARG BASE_CONTAINER=${ROOT_CONTAINER}\n\n# hadolint ignore=DL3006\nFROM ${BASE_CONTAINER}\n\n# -----------------------------------------------------------------------------\n# ---- Miniforge installer ----\n# Default values can be overridden at build time\n# (ARGS are in lower case to distinguish them from ENV)\n# Check https://github.com/conda-forge/miniforge/releases\n# Conda version\nARG conda_version=\"4.9.2\"\n# Miniforge installer patch version\nARG miniforge_patch_number=\"5\"\n# Miniforge installer architecture\nARG miniforge_arch=\"x86_64\"\n# Python implementation to use\n# can be either Miniforge3 to use Python or Miniforge-pypy3 to use PyPy\nARG miniforge_python=\"Miniforge3\"\n\n# Miniforge archive to install\nARG miniforge_version=\"${conda_version}-${miniforge_patch_number}\"\n# Miniforge installer\nARG miniforge_installer=\"${miniforge_python}-${miniforge_version}-Linux-${miniforge_arch}.sh\"\n# Miniforge checksum\nARG miniforge_checksum=\"49dddb3998550e40adc904dae55b0a2aeeb0bd9fc4306869cc4a600ec4b8b47c\"\n\n# -----------------------------------------------------------------------------\n# ---- Python version to install ----\n# Currently Python 3.8\nARG PYTHON_VERSION=default\n\n# ---- Configure environment ----\nENV CONDA_DIR=/opt/conda \\\n    SHELL=/bin/bash  \\\n    GP_USER=gitpod \\\n    GP_GROUP=gitpod \\\n    GP_UID=33333\n\nENV CONDA_VERSION=\"${conda_version}\" \\\n    MINIFORGE_VERSION=\"${miniforge_version}\" \\\n    CONDA_ENV=scipy-dev \\\n    PATH=${CONDA_DIR}/bin:$PATH\n\n# -----------------------------------------------------------------------------\n# ---- OS dependencies ----\nENV DEBIAN_FRONTEND noninteractive\n\nUSER root\n\n# Change default shell - this avoids issues with Conda later\nSHELL [\"/bin/bash\", \"--login\", \"-o\", \"pipefail\", \"-c\"]\n\n# hadolint ignore=DL3008\nRUN apt-get update && \\ \n    apt-get install -yq --no-install-recommends \\\n    ca-certificates \\\n    ccache \\\n    dirmngr \\\n    gnupg \\\n    gpg-agent \\\n    libatlas-base-dev \\\n    vim \\\n    wget && \\\n    # this needs to be done after installing dirmngr\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0 && \\ \n    apt-add-repository https://cli.github.com/packages && \\ \n    apt-get install -yq --no-install-recommends \\\n    gh && \\ \n    locale-gen en_US.UTF-8 && \\\n    apt-get clean && \\\n    rm -rf /var/cache/apt/* &&\\\n    rm -rf /var/lib/apt/lists/* &&\\\n    rm -rf /tmp/*\n\n# -----------------------------------------------------------------------------\n# ---- Copy needed files ----\n# Copy multiple scripts - fix directory permissions and\n# basic workspace configurations\nCOPY ./tools/docker_dev/workspace_config /usr/local/bin/workspace_config\nCOPY ./tools/docker_dev/fix_permissions /usr/local/bin/fix_permissions\n\nRUN chmod a+rx /usr/local/bin/workspace_config && \\\n    chmod a+rx /usr/local/bin/fix_permissions\n\n# -----------------------------------------------------------------------------\nRUN mkdir -p \"${CONDA_DIR}\" && \\\n    # transfer conda path ownership and ensure it is user writable\n    chown -R ${GP_USER}:${GP_GROUP} ${CONDA_DIR} && \\\n    fix_permissions ${CONDA_DIR} && \\\n    workspace_config\n\nUSER ${GP_USER}\n\nWORKDIR /tmp\n\n# -----------------------------------------------------------------------------\n# ---- Installing conda  ----\nRUN wget --quiet \"https://github.com/conda-forge/miniforge/releases/download/${miniforge_version}/${miniforge_installer}\" && \\\n    echo \"${miniforge_checksum}  *${miniforge_installer}\" | sha256sum --check && \\\n    /bin/bash \"${miniforge_installer}\" -f -b -p $CONDA_DIR && \\\n    rm \"${miniforge_installer}\" && \\\n    # Conda configuration see https://conda.io/projects/conda/en/latest/configuration.html\n    echo \"conda ${CONDA_VERSION}\" >> $CONDA_DIR/conda-meta/pinned && \\\n    conda config --system --set auto_update_conda false && \\\n    conda config --system --set show_channel_urls true && \\\n    # This allows to change the Python version installed by passing the arg `PYTHON_VERSION` at build time\n    # then version is added to conda-meta/pinned \n    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \\\n    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \\\n    conda install --quiet --yes \\\n    \"conda=${CONDA_VERSION}\" \\\n    'pip' && \\\n    conda update --all --quiet --yes && \\\n    conda clean --all -f -y && \\\n    fix_permissions ${CONDA_DIR}\n\n\n# -----------------------------------------------------------------------------\n# ---- Create conda environment ----\n# Install SciPy dependencies - since using miniforge no need to add\n# conda-forge channel\nCOPY environment.yml /tmp/environment.yml\n\nRUN conda env create -f /tmp/environment.yml && \\\n    conda activate ${CONDA_ENV} && \\\n    # needed for docs rendering later on\n    python -m pip install --no-cache-dir sphinx-autobuild && \\\n    conda install ccache -y && \\\n    # need to use sudo to remove tmp files\n    sudo rm -rf /tmp/* && \\\n    conda clean --all -f -y && \\\n    # for good measure after installing things\n    fix_permissions ${CONDA_DIR}\n\n# -----------------------------------------------------------------------------\nUSER ${GP_USER}\n\nWORKDIR $HOME/scipy\n"
}