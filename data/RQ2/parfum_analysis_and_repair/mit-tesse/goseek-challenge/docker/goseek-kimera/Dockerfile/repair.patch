diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mit-tesse/goseek-challenge/docker/goseek-kimera/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mit-tesse/goseek-challenge/docker/goseek-kimera/Dockerfile/repaired.Dockerfile
index df509e5..5b81842 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mit-tesse/goseek-challenge/docker/goseek-kimera/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mit-tesse/goseek-challenge/docker/goseek-kimera/Dockerfile/repaired.Dockerfile
@@ -2,7 +2,7 @@ FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04
 # using devel to support installing pycuda
 # if you are behind a proxy: https://docs.docker.com/network/proxy/
 
-RUN apt-get clean && apt-get update && apt-get install -y locales
+RUN apt-get clean && apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;
 RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
     locale-gen
 ENV LC_ALL en_US.UTF-8
@@ -15,14 +15,14 @@ ENV DEBIAN_FRONTEND noninteractive
 SHELL ["/bin/bash", "-c"]
 
 RUN apt-get update && \
-    apt-get install -y curl bzip2 wget vim ffmpeg git tmux unzip
+    apt-get install --no-install-recommends -y curl bzip2 wget vim ffmpeg git tmux unzip && rm -rf /var/lib/apt/lists/*;
 
 # tesse: opencv dependency workaround from https://github.com/NVIDIA/nvidia-docker/issues/864
-RUN apt-get update && apt-get install -y libsm6 libxext6 libxrender-dev
+RUN apt-get update && apt-get install --no-install-recommends -y libsm6 libxext6 libxrender-dev && rm -rf /var/lib/apt/lists/*;
 
 # kimera:
 RUN apt-get update && \
-    apt-get install -y --no-install-recommends apt-utils
+    apt-get install -y --no-install-recommends apt-utils && rm -rf /var/lib/apt/lists/*;
 
 ################################
 ###          ROS             ###
@@ -33,36 +33,36 @@ ENV ROS_DISTRO melodic
 
 # Add the ROS keys and package
 RUN apt-get update && \
-    apt-get install -y \
+    apt-get install --no-install-recommends -y \
     lsb-release \
-    gnupg
+    gnupg && rm -rf /var/lib/apt/lists/*;
 RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
 RUN mkdir ~/.gnupg
 RUN echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf
 
-RUN curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | apt-key add -
+RUN curl -f -sSL 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | apt-key add -
 
 # Install ROS
 RUN apt-get update && \
-    apt-get install -y ros-melodic-desktop-full
+    apt-get install --no-install-recommends -y ros-melodic-desktop-full && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get install -y \
+RUN apt-get install --no-install-recommends -y \
     python \
     python-pip \
-    python-dev
+    python-dev && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get install python-rosdep
+RUN apt-get install -y --no-install-recommends python-rosdep && rm -rf /var/lib/apt/lists/*;
 
 # Set up ROS
 RUN rosdep init
 RUN rosdep update
 
 RUN source /opt/ros/melodic/setup.bash && \
-    apt install -y \
+    apt install --no-install-recommends -y \
     python-rosinstall \
     python-rosinstall-generator \
     python-wstool build-essential \
-    python-catkin-tools
+    python-catkin-tools && rm -rf /var/lib/apt/lists/*;
 
 # Setup catkin workspace
 RUN source /opt/ros/melodic/setup.bash && \
@@ -85,7 +85,7 @@ RUN source /opt/ros/melodic/setup.bash && \
 WORKDIR /catkin_ws/src
 
 # tesse-ros-bridge dependency
-RUN pip install scipy
+RUN pip install --no-cache-dir scipy
 
 RUN git clone https://github.com/MIT-TESSE/tesse-interface.git -b 0.1.3-SNAPSHOT && \
     cd tesse-interface && \
@@ -116,14 +116,14 @@ RUN catkin build tesse_ros_bridge tesse_segmentation_ros tesse_gym_bridge
 ###    KIMERA-Semantics      ###
 ################################
 
-# pinned commits: 
+# pinned commits:
 # https://github.com/MIT-SPARK/Kimera-VIO-ROS @  f6181a1370677ffe8c24253554efebaf787f428e
 # https://github.com/MIT-SPARK/Kimera-VIO @ 42ad9ca557656ef3463b8cc3b841fe5a4a36398c
 # https://github.com/MIT-SPARK/Kimera-Semantics @ 0ae759f24cce9e9ffc28d0495327a3d2b37d2c99
 
 # Kimera dependencies
-RUN apt-get update &&  \
-    apt-get install -y \
+RUN apt-get update && \
+    apt-get install --no-install-recommends -y \
     libgoogle-glog-dev \
     doxygen \
     cmake build-essential pkg-config autoconf \
@@ -132,7 +132,7 @@ RUN apt-get update &&  \
     libvtk6-dev libgtk-3-dev \
     libatlas-base-dev gfortran \
     libparmetis-dev \
-    libtbb-dev
+    libtbb-dev && rm -rf /var/lib/apt/lists/*;
 
 # suppress build warnings
 ENV PYTHONIOENCODING=UTF-8
@@ -152,7 +152,7 @@ RUN git clone https://github.com/MIT-SPARK/Kimera-Semantics.git && \
       cd .. && \
       wstool merge -y Kimera-Semantics/kimera/install/kimera_semantics_https.rosinstall && \
       wstool update
-      
+
 # checkout pinned commit of Kimera-VIO-ROS and Kimera-VIO
 RUN   cd Kimera-VIO-ROS && \
       git checkout db6afe795f3bf6b88842d2c45cb2306926505051 && \
@@ -203,8 +203,8 @@ ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/tensorrt/lib
 RUN source /opt/ros/melodic/setup.bash &&  \
     source /catkin_ws/devel/setup.bash && \
     cd /tensorrt/python/ && \
-    pip install tensorrt-6.0.1.5-cp27-none-linux_x86_64.whl && \
-    pip install pycuda
+    pip install --no-cache-dir tensorrt-6.0.1.5-cp27-none-linux_x86_64.whl && \
+    pip install --no-cache-dir pycuda
 
 
 #########################################################################################