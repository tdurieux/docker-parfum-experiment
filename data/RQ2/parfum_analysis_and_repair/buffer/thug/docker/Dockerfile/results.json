{
  "startTime": 1674246871825,
  "endTime": 1674246875818,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 2,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# This Docker image encapsulates Thug, a low-interaction honeyclient,\n# which was created by Angelo Dell'Aera  and is available at\n# https://github.com/buffer/thug.\n#\n# To run this image after installing Docker, use a command like this:\n#\n# sudo docker run --rm -it buffer/thug bash\n#\n# then run \"thug\" with the desired parameters (such as -F to enable\n# file logging).\n#\n# To share the \"logs\" directory between your host and the container,\n# create a \"logs\" directory on your host and make it world-accessible\n# (e.g., \"chmod a+xwr ~/logs\"). Then run the tool like this:\n#\n# sudo docker run --rm -it -v ~/logs:/tmp/thug/logs buffer/thug bash\n#\n# To support distributed operations and MongoDB output, install the folloging\n# packages into the image using \"apt-get\": mongodb, mongodb-dev, python-pymongo\n#\n# This file was originally based on ideas from Spenser Reinhardt's Dockerfile\n# (https://registry.hub.docker.com/u/sreinhardt/honeynet/dockerfile),\n# on instructions outlined by M. Fields (@shakey_1) and\n# on the installation script created by Payload Security\n# (https://github.com/PayloadSecurity/VxCommunity/blob/master/bash/thuginstallation.sh)\n#\n\nFROM ubuntu:22.04\nMAINTAINER Angelo Dell'Aera\n\nUSER root\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\r\n  apt-get install -y --no-install-recommends \\\r\n    build-essential \\\r\n    sudo \\\r\n    python3 \\\r\n    python3-dev \\\r\n    python3-setuptools \\\r\n    python3-wheel \\\r\n    python-is-python3 \\\r\n    libboost-dev \\\r\n    libboost-iostreams-dev \\\r\n    libboost-python-dev \\\r\n    libboost-system-dev \\\r\n    python3-pip \\\r\n    libxml2-dev \\\r\n    libxslt-dev \\\r\n    tesseract-ocr \\\r\n    git \\\r\n    wget \\\r\n    unzip \\\r\n    libtool \\\r\n    graphviz-dev \\\r\n    automake \\\r\n    libffi-dev \\\r\n    graphviz \\\r\n    libfuzzy-dev \\\r\n    libfuzzy2 \\\r\n    libjpeg-dev \\\r\n    libffi-dev \\\r\n    pkg-config \\\r\n    clang \\\r\n    autoconf && \\\r\n  rm -rf /var/lib/apt/lists/*\n\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir --upgrade setuptools\nRUN pip3 install --no-cache-dir --upgrade pytesseract\nRUN pip3 install --no-cache-dir --upgrade pygraphviz\nWORKDIR /home\n\nRUN wget https://github.com/cloudflare/stpyv8/releases/download/v10.3.174.14/stpyv8-ubuntu-22.04-python-3.10.zip\nRUN unzip stpyv8-ubuntu-22.04-python-3.10.zip\nRUN pip3 install --no-cache-dir stpyv8-ubuntu-22.04-3.10/stpyv8-10.3.174.14-cp310-cp310-linux_x86_64.whl\nRUN mkdir -p /usr/share/stpyv8\nRUN sudo mv stpyv8-ubuntu-22.04-3.10/icudtl.dat /usr/share/stpyv8\n\nRUN git clone https://github.com/buffer/libemu.git && \\\r\n  cd libemu && \\\r\n  autoreconf -v -i && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make install && \\\n  cd .. && \\\n  rm -rf libemu\n\nRUN ldconfig\nRUN pip3 install --no-cache-dir thug\n\nRUN git clone https://github.com/buffer/thug.git && \\\r\n  mkdir /etc/thug && \\\r\n  mkdir /etc/thug/rules && \\\r\n  mkdir /etc/thug/personalities && \\\r\n  mkdir /etc/thug/scripts && \\\r\n  mkdir /etc/thug/plugins && \\\r\n  mkdir /etc/thug/hooks && \\\r\n  cp -R thug/conf/rules/* /etc/thug/rules/ && \\\r\n  cp -R thug/conf/personalities/* /etc/thug/personalities && \\\r\n  cp thug/thug/DOM/thug.js /etc/thug/scripts && \\\r\n  cp thug/thug/DOM/storage.js /etc/thug/scripts && \\\r\n  cp thug/thug/DOM/date.js /etc/thug/scripts && \\\r\n  cp thug/thug/DOM/eval.js /etc/thug/scripts && \\\r\n  cp thug/thug/DOM/write.js /etc/thug/scripts && \\\r\n  cp thug/conf/thug.conf /etc/thug && \\\r\n  rm -rf thug\n\nRUN groupadd -r thug && \\\r\n  useradd -r -g thug -d /home/thug -s /sbin/nologin -c \"Thug User\" thug && \\\r\n  mkdir -p /home/thug /tmp/thug/logs && \\\r\n  chown -R thug:thug /home/thug /tmp/thug/logs\n\nUSER thug\nENV HOME /home/thug\nENV USER thug\nWORKDIR /home/thug\nVOLUME [\"/tmp/thug/logs\"]\nCMD [\"thug\"]\n"
}