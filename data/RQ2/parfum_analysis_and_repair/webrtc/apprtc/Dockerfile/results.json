{
  "startTime": 1674253580294,
  "endTime": 1674253581378,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 135
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 7,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#######DEMO APP, DO NOT USE THIS FOR ANYTHING BUT TESTING PURPOSES, ITS NOT MEANT FOR PRODUCTION######\n\nFROM golang:1.17.5-alpine3.15\n\n# Install and download deps.\nRUN apk add --no-cache git curl python2 build-base openssl-dev openssl\nRUN git clone https://github.com/webrtc/apprtc.git\n\n# AppRTC GAE setup\n\n# Required to run GAE dev_appserver.py.\nRUN curl -f https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-367.0.0-linux-x86_64.tar.gz --output gcloud.tar.gz \\\n    && tar -xf gcloud.tar.gz \\\n    && google-cloud-sdk/bin/gcloud components install app-engine-python-extras app-engine-python cloud-datastore-emulator --quiet \\\n    && rm -f gcloud.tar.gz\n\n# Mimick build step by manually copying everything into the appropriate folder and run build script.\nRUN python apprtc/build/build_app_engine_package.py apprtc/src/ apprtc/out/ \\\n    && curl -f https://webrtc.github.io/adapter/adapter-latest.js --output apprtc/src/web_app/js/adapter.js \\\n    && cp apprtc/src/web_app/js/*.js apprtc/out/js/\n\n# Wrap AppRTC GAE app in a bash script due to needing to run two apps within one container.\nRUN echo -e \"#!/bin/sh\\n\" > /go/start.sh \\\n    && echo -e \"`pwd`/google-cloud-sdk/bin/dev_appserver.py --host 0.0.0.0 `pwd`/apprtc/out/app.yaml &\\n\" >> /go/start.sh\n\n# Collider setup\n# Go environment setup.\nRUN export GOPATH=$HOME/goWorkspace/ \\\n    && go env -w GO111MODULE=off\n\nRUN ln -s `pwd`/apprtc/src/collider/collidermain $GOPATH/src \\\n    && ln -s `pwd`/apprtc/src/collider/collidertest $GOPATH/src \\\n    && ln -s `pwd`/apprtc/src/collider/collider $GOPATH/src \\\n    && cd $GOPATH/src \\\n    && go get collidermain \\\n    && go install collidermain\n\n# Add Collider executable to the start.sh bash script.\nRUN echo -e \"$GOPATH/bin/collidermain -port=8089 -tls=true -room-server=http://localhost &\\n\" >> /go/start.sh\n\nENV STUNNEL_VERSION 5.60\n\nWORKDIR /usr/src\nRUN curl -f https://www.stunnel.org/archive/5.x/stunnel-${STUNNEL_VERSION}.tar.gz --output stunnel.tar.gz \\\n    && tar -xf /usr/src/stunnel.tar.gz && rm /usr/src/stunnel.tar.gz\nWORKDIR /usr/src/stunnel-${STUNNEL_VERSION}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && make && make install\n\nRUN mkdir /cert\nRUN openssl req -x509 -out /cert/cert.crt -keyout /cert/key.pem \\\n  -newkey rsa:2048 -nodes -sha256 \\\n  -subj '/CN=localhost' -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\") \\\n  && cat /cert/key.pem > /cert/cert.pem \\\n  && cat /cert/cert.crt >> /cert/cert.pem \\\n  && chmod 600 /cert/cert.pem /cert/key.pem /cert/cert.crt\n\nRUN echo -e \"foreground=yes\\n\" > /usr/etc/stunnel/stunnel.conf \\\n    && echo -e \"[AppRTC GAE]\\n\" >> /usr/etc/stunnel/stunnel.conf \\ \n    && echo -e \"accept=0.0.0.0:443\\n\" >> /usr/etc/stunnel/stunnel.conf \\\n    && echo -e \"connect=0.0.0.0:8080\\n\" >> /usr/etc/stunnel/stunnel.conf \\\n    && echo -e \"cert=/cert/cert.pem\\n\" >> /usr/etc/stunnel/stunnel.conf\n\nRUN echo -e  \"/usr/bin/stunnel &\\n\" >> /go/start.sh \\\n    && echo -e \"wait -n\\n\" >> /go/start.sh \\\n    && echo -e \"exit $?\\n\" >> /go/start.sh \\\n    && chmod +x /go/start.sh\n\n# Start the bash wrapper that keeps both collider and the AppRTC GAE app running.\nCMD /go/start.sh\n\n## Instructions (Tested on Debian 11 only):\n# - Download the Dockerfile from the AppRTC repo and put it in a folder, e.g. 'apprtc'\n# - Build the Dockerfile into an image: 'sudo docker build apprtc/'\n#   Note the image ID from the build command, e.g. something like 'Successfully built 503621f4f7bd'.\n# - Run: 'sudo docker run -p 443:443 -p 8089:8089 --rm -ti 503621f4f7bd'\n#   The container will now run in interactive mode and output logging. If you do not want this, omit the '-ti' argument.\n#   The '-p' options are port mappings to the GAE app and Collider instances, the host ones can be changed.\n#\n# - On the same machine that this docker image is running on you can now join apprtc calls using\n#   https://localhost/?wshpp=localhost:8089&wstls=true,  once you join the URL will have\n#   appended the room name which you can share, e.g. 'http://localhost:8080/r/315402015?wshpp=localhost:8089&wstls=true'.\n#   If you want to connect to this instance from another machine, use the IP address of the machine running this docker container\n#   instead of localhost.\n#  \n#   Keep in mind that you need to pass in those 'wshpp' and 'wstls' URL parameters everytime you join with as they override\n#   the websocket server address.\n#\n# The steps assume sudo is required for docker, that can be avoided but is out of scope.\n\n## TODO\n# Verify if this docker container run on more OS's?\n\n"
}