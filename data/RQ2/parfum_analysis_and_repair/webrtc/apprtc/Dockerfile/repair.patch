diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/webrtc/apprtc/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/webrtc/apprtc/Dockerfile/repaired.Dockerfile
index d400ce8..1e4b4e2 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/webrtc/apprtc/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/webrtc/apprtc/Dockerfile/repaired.Dockerfile
@@ -3,20 +3,20 @@
 FROM golang:1.17.5-alpine3.15
 
 # Install and download deps.
-RUN apk add --no-cache git curl python2 build-base openssl-dev openssl 
+RUN apk add --no-cache git curl python2 build-base openssl-dev openssl
 RUN git clone https://github.com/webrtc/apprtc.git
 
 # AppRTC GAE setup
 
 # Required to run GAE dev_appserver.py.
-RUN curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-367.0.0-linux-x86_64.tar.gz --output gcloud.tar.gz \
+RUN curl -f https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-367.0.0-linux-x86_64.tar.gz --output gcloud.tar.gz \
     && tar -xf gcloud.tar.gz \
     && google-cloud-sdk/bin/gcloud components install app-engine-python-extras app-engine-python cloud-datastore-emulator --quiet \
     && rm -f gcloud.tar.gz
 
 # Mimick build step by manually copying everything into the appropriate folder and run build script.
 RUN python apprtc/build/build_app_engine_package.py apprtc/src/ apprtc/out/ \
-    && curl https://webrtc.github.io/adapter/adapter-latest.js --output apprtc/src/web_app/js/adapter.js \
+    && curl -f https://webrtc.github.io/adapter/adapter-latest.js --output apprtc/src/web_app/js/adapter.js \
     && cp apprtc/src/web_app/js/*.js apprtc/out/js/
 
 # Wrap AppRTC GAE app in a bash script due to needing to run two apps within one container.
@@ -41,10 +41,10 @@ RUN echo -e "$GOPATH/bin/collidermain -port=8089 -tls=true -room-server=http://l
 ENV STUNNEL_VERSION 5.60
 
 WORKDIR /usr/src
-RUN curl  https://www.stunnel.org/archive/5.x/stunnel-${STUNNEL_VERSION}.tar.gz --output stunnel.tar.gz\
-    && tar -xf /usr/src/stunnel.tar.gz
+RUN curl -f https://www.stunnel.org/archive/5.x/stunnel-${STUNNEL_VERSION}.tar.gz --output stunnel.tar.gz \
+    && tar -xf /usr/src/stunnel.tar.gz && rm /usr/src/stunnel.tar.gz
 WORKDIR /usr/src/stunnel-${STUNNEL_VERSION}
-RUN ./configure --prefix=/usr && make && make install
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr && make && make install
 
 RUN mkdir /cert
 RUN openssl req -x509 -out /cert/cert.crt -keyout /cert/key.pem \
@@ -59,14 +59,14 @@ RUN echo -e "foreground=yes\n" > /usr/etc/stunnel/stunnel.conf \
     && echo -e "[AppRTC GAE]\n" >> /usr/etc/stunnel/stunnel.conf \ 
     && echo -e "accept=0.0.0.0:443\n" >> /usr/etc/stunnel/stunnel.conf \
     && echo -e "connect=0.0.0.0:8080\n" >> /usr/etc/stunnel/stunnel.conf \
-    && echo -e "cert=/cert/cert.pem\n" >> /usr/etc/stunnel/stunnel.conf 
+    && echo -e "cert=/cert/cert.pem\n" >> /usr/etc/stunnel/stunnel.conf
 
 RUN echo -e  "/usr/bin/stunnel &\n" >> /go/start.sh \
     && echo -e "wait -n\n" >> /go/start.sh \
     && echo -e "exit $?\n" >> /go/start.sh \
     && chmod +x /go/start.sh
 
-# Start the bash wrapper that keeps both collider and the AppRTC GAE app running. 
+# Start the bash wrapper that keeps both collider and the AppRTC GAE app running.
 CMD /go/start.sh
 
 ## Instructions (Tested on Debian 11 only):
@@ -77,13 +77,13 @@ CMD /go/start.sh
 #   The container will now run in interactive mode and output logging. If you do not want this, omit the '-ti' argument.
 #   The '-p' options are port mappings to the GAE app and Collider instances, the host ones can be changed.
 #
-# - On the same machine that this docker image is running on you can now join apprtc calls using 
-#   https://localhost/?wshpp=localhost:8089&wstls=true,  once you join the URL will have 
-#   appended the room name which you can share, e.g. 'http://localhost:8080/r/315402015?wshpp=localhost:8089&wstls=true'. 
-#   If you want to connect to this instance from another machine, use the IP address of the machine running this docker container 
+# - On the same machine that this docker image is running on you can now join apprtc calls using
+#   https://localhost/?wshpp=localhost:8089&wstls=true,  once you join the URL will have
+#   appended the room name which you can share, e.g. 'http://localhost:8080/r/315402015?wshpp=localhost:8089&wstls=true'.
+#   If you want to connect to this instance from another machine, use the IP address of the machine running this docker container
 #   instead of localhost.
-#   
-#   Keep in mind that you need to pass in those 'wshpp' and 'wstls' URL parameters everytime you join with as they override 
+#  
+#   Keep in mind that you need to pass in those 'wshpp' and 'wstls' URL parameters everytime you join with as they override
 #   the websocket server address.
 #
 # The steps assume sudo is required for docker, that can be avoided but is out of scope.