{
  "startTime": 1674254490566,
  "endTime": 1674254491657,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 39,
        "columnEnd": 81
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 85,
        "columnEnd": 132
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.1.1-devel-ubuntu20.04\n\nENV DEBIAN_FRONTEND=noninteractive\n\n#### System package (uses default Python 3 version in Ubuntu 20.04)\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y \\\n        git python3 python3-dev libpython3-dev python3-pip sudo pdsh \\\n        htop llvm-9-dev tmux zstd software-properties-common build-essential autotools-dev \\\n        nfs-common pdsh cmake g++ gcc curl wget vim less unzip htop iftop iotop ca-certificates ssh \\\n        rsync iputils-ping net-tools libcupti-dev libmlx4-1 infiniband-diags ibutils ibverbs-utils \\\n        rdmacm-utils perftest rdma-core nano && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \\\n    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir gpustat && rm -rf /var/lib/apt/lists/*;\n\n### SSH\n# Set password\nRUN echo 'password' >> password.txt && \\\n    mkdir /var/run/sshd && \\\n    echo \"root:`cat password.txt`\" | chpasswd && \\\n    # Allow root login with password\n    sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \\\n    # Prevent user being kicked off after login\n    sed -i 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd && \\\n    echo 'AuthorizedKeysFile     .ssh/authorized_keys' >> /etc/ssh/sshd_config && \\\n    echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config && \\\n    # FIX SUDO BUG: https://github.com/sudo-project/sudo/issues/42\n    echo \"Set disable_coredump false\" >> /etc/sudo.conf && \\\n    # Clean up\n    rm password.txt\n\n# Expose SSH port\nEXPOSE 22\n\n#### OPENMPI\nENV OPENMPI_BASEVERSION=4.1\nENV OPENMPI_VERSION=${OPENMPI_BASEVERSION}.0\nRUN mkdir -p /build && \\\n    cd /build && \\\n    wget -q -O - https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASEVERSION}/openmpi-${OPENMPI_VERSION}.tar.gz | tar xzf - && \\\n    cd openmpi-${OPENMPI_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/openmpi-${OPENMPI_VERSION} && \\\n    make -j\"$(nproc)\" install && \\\n    ln -s /usr/local/openmpi-${OPENMPI_VERSION} /usr/local/mpi && \\\n    # Sanity check:\n    test -f /usr/local/mpi/bin/mpic++ && \\\n    cd ~ && \\\n    rm -rf /build\n\n# Needs to be in docker PATH if compiling other items & bashrc PATH (later)\nENV PATH=/usr/local/mpi/bin:${PATH} \\\n    LD_LIBRARY_PATH=/usr/local/lib:/usr/local/mpi/lib:/usr/local/mpi/lib64:${LD_LIBRARY_PATH}\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/mpi/bin/mpirun /usr/local/mpi/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/local/mpi/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root --prefix /usr/local/mpi \"$@\"' >> /usr/local/mpi/bin/mpirun && \\\n    chmod a+x /usr/local/mpi/bin/mpirun\n\n#### User account\nRUN useradd --create-home --uid 1000 --shell /bin/bash mchorse && \\\n    usermod -aG sudo mchorse && \\\n    echo \"mchorse ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n## SSH config and bashrc\nRUN mkdir -p /home/mchorse/.ssh /job && \\\n    echo 'Host *' > /home/mchorse/.ssh/config && \\\n    echo '    StrictHostKeyChecking no' >> /home/mchorse/.ssh/config && \\\n    echo 'export PDSH_RCMD_TYPE=ssh' >> /home/mchorse/.bashrc && \\\n    echo 'export PATH=/home/mchorse/.local/bin:$PATH' >> /home/mchorse/.bashrc && \\\n    echo 'export PATH=/usr/local/mpi/bin:$PATH' >> /home/mchorse/.bashrc && \\\n    echo 'export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/mpi/lib:/usr/local/mpi/lib64:$LD_LIBRARY_PATH' >> /home/mchorse/.bashrc\n\n#### Python packages\nRUN pip install --no-cache-dir torch==1.8.1+cu111 -f https://download.pytorch.org/whl/torch_stable.html && pip cache purge\nCOPY requirements/requirements.txt .\nCOPY requirements/requirements-onebitadam.txt .\nCOPY requirements/requirements-sparseattention.txt .\nRUN pip install --no-cache-dir -r requirements.txt && pip install --no-cache-dir -r requirements-onebitadam.txt && pip install --no-cache-dir -r requirements-sparseattention.txt && pip cache purge\n\n## Install APEX\nRUN pip install -v --disable-pip-version-check --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" git+https://github.com/NVIDIA/apex.git@a651e2c24ecf97cbf367fd3f330df36760e1c597\n\n# Clear staging\nRUN mkdir -p /tmp && chmod 0777 /tmp\n\n#### SWITCH TO mchorse USER\nUSER mchorse\nWORKDIR /home/mchorse\n"
}