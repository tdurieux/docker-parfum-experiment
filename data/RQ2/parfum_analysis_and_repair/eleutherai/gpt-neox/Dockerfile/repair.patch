diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/eleutherai/gpt-neox/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/eleutherai/gpt-neox/Dockerfile/repaired.Dockerfile
index 6cdc80f..0c1ef12 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/eleutherai/gpt-neox/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/eleutherai/gpt-neox/Dockerfile/repaired.Dockerfile
@@ -4,7 +4,7 @@ ENV DEBIAN_FRONTEND=noninteractive
 
 #### System package (uses default Python 3 version in Ubuntu 20.04)
 RUN apt-get update -y && \
-    apt-get install -y \
+    apt-get install --no-install-recommends -y \
         git python3 python3-dev libpython3-dev python3-pip sudo pdsh \
         htop llvm-9-dev tmux zstd software-properties-common build-essential autotools-dev \
         nfs-common pdsh cmake g++ gcc curl wget vim less unzip htop iftop iotop ca-certificates ssh \
@@ -12,8 +12,8 @@ RUN apt-get update -y && \
         rdmacm-utils perftest rdma-core nano && \
     update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \
     update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 && \
-    pip install --upgrade pip && \
-    pip install gpustat
+    pip install --no-cache-dir --upgrade pip && \
+    pip install --no-cache-dir gpustat && rm -rf /var/lib/apt/lists/*;
 
 ### SSH
 # Set password
@@ -41,7 +41,7 @@ RUN mkdir -p /build && \
     cd /build && \
     wget -q -O - https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASEVERSION}/openmpi-${OPENMPI_VERSION}.tar.gz | tar xzf - && \
     cd openmpi-${OPENMPI_VERSION} && \
-    ./configure --prefix=/usr/local/openmpi-${OPENMPI_VERSION} && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local/openmpi-${OPENMPI_VERSION} && \
     make -j"$(nproc)" install && \
     ln -s /usr/local/openmpi-${OPENMPI_VERSION} /usr/local/mpi && \
     # Sanity check:
@@ -74,11 +74,11 @@ RUN mkdir -p /home/mchorse/.ssh /job && \
     echo 'export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/mpi/lib:/usr/local/mpi/lib64:$LD_LIBRARY_PATH' >> /home/mchorse/.bashrc
 
 #### Python packages
-RUN pip install torch==1.8.1+cu111 -f https://download.pytorch.org/whl/torch_stable.html && pip cache purge
+RUN pip install --no-cache-dir torch==1.8.1+cu111 -f https://download.pytorch.org/whl/torch_stable.html && pip cache purge
 COPY requirements/requirements.txt .
 COPY requirements/requirements-onebitadam.txt .
 COPY requirements/requirements-sparseattention.txt .
-RUN pip install -r requirements.txt && pip install -r requirements-onebitadam.txt && pip install -r requirements-sparseattention.txt && pip cache purge
+RUN pip install --no-cache-dir -r requirements.txt && pip install --no-cache-dir -r requirements-onebitadam.txt && pip install --no-cache-dir -r requirements-sparseattention.txt && pip cache purge
 
 ## Install APEX
 RUN pip install -v --disable-pip-version-check --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" git+https://github.com/NVIDIA/apex.git@a651e2c24ecf97cbf367fd3f330df36760e1c597