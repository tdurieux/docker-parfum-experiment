{
  "startTime": 1674220126830,
  "endTime": 1674220128078,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 48,
        "columnEnd": 64
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 48,
        "columnEnd": 64
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 32,
        "columnEnd": 48
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 32,
        "columnEnd": 48
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 28,
        "columnEnd": 44
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 52,
        "columnEnd": 68
      }
    }
  ],
  "repairedDockerfile": "ARG NODE_VER=18-alpine\n\n# Copy in package files and any needed apt packages?\nFROM node:${NODE_VER} AS packages\n\nWORKDIR /oada\n\n# Need to list out every package.json we need from monorepo for caching stuff...\nCOPY ./yarn.lock ./.yarnrc.yml /oada/\nCOPY ./.yarn /oada/.yarn\n# TODO: How to COPY all package.json files with glob?\nCOPY ./package.json /oada/package.json\nCOPY ./libs/lib-arangodb/package.json /oada/libs/lib-arangodb/package.json\nCOPY ./libs/lib-config/package.json /oada/libs/lib-config/package.json\nCOPY ./libs/lib-kafka/package.json /oada/libs/lib-kafka/package.json\nCOPY ./libs/pino-debug/package.json /oada/libs/pino-debug/package.json\nCOPY ./services/auth/package.json /oada/services/auth/package.json\nCOPY ./services/http-handler/package.json /oada/services/http-handler/package.json\nCOPY ./services/permissions-handler/package.json /oada/services/permissions-handler/package.json\nCOPY ./services/rev-graph-update/package.json /oada/services/rev-graph-update/package.json\nCOPY ./services/shares/package.json /oada/services/shares/package.json\nCOPY ./services/startup/package.json /oada/services/startup/package.json\nCOPY ./services/sync-handler/package.json /oada/services/sync-handler/package.json\nCOPY ./services/users/package.json /oada/services/users/package.json\nCOPY ./services/webhooks/package.json /oada/services/webhooks/package.json\nCOPY ./services/well-known/package.json /oada/services/well-known/package.json\nCOPY ./services/write-handler/package.json /oada/services/write-handler/package.json\nRUN yarn workspaces focus --all --production && yarn cache clean;\n\n# Install just production deps\nFROM packages AS yarn\n\n# Copy in actual code\nCOPY . /oada/\n\n# Run again to be safe?\nRUN yarn workspaces focus --all --production && yarn cache clean;\n\n# Install all deps and run build step\n# Allows for workspaces to have build step (e.g., for TypeScript)\nFROM packages AS dev\n\n# Install _all_ dependencies for build\nRUN yarn install --immutable && yarn cache clean;\n\n# Copy in actual code\nCOPY . /oada/\n\n# Run again to be safe?\nRUN yarn install --immutable && yarn cache clean;\n\nRUN yarn sdks vscode vim && yarn cache clean;\n\nFROM dev AS build\n\n# Build and then remove yarn stuff\nRUN yarn build --verbose && rm -rfv .yarn .pnp.* && yarn cache clean;\n\nFROM node:${NODE_VER} AS code\n\n# Copy in service code and production dependencies\nCOPY --from=yarn /oada/ /oada/\n# Copy in built code\nCOPY --from=build /oada/ /oada/\n\n# Assemble \"production\" image\nFROM node:$NODE_VER AS production\n\nWORKDIR /oada\n\n# Install needed packages\nRUN apk add --no-cache \\\n  dumb-init\n\n# Copy in entrypoint script\nCOPY ./utils/entrypoint.sh /entrypoint.sh\nRUN chmod u+x /entrypoint.sh\nRUN chown node:node /entrypoint.sh\n\n# Get wait-for script\nARG WAIT_FOR_VER=v2.2.3\nRUN wget https://raw.githubusercontent.com/eficode/wait-for/${WAIT_FOR_VER}/wait-for -O /wait-for\nRUN chmod u+x /wait-for\nRUN chown node:node /wait-for\n\n# Copy in config file?\nCOPY ./oada.config.mjs /oada.config.mjs\n\n# Launch entrypoint with dumb-init\n# Remap SIGTERM to SIGINT https://github.com/Yelp/dumb-init#signal-rewriting\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--rewrite\", \"15:2\", \"--\", \"/entrypoint.sh\"]\n# Run start script of package\nCMD [\"start\"]\n\n# Add volume for Binary data and chown to node?\nRUN mkdir -p /oada/binary && chown node:node /oada/binary\n#VOLUME /oada/binary\n\n# Copy in the code\nCOPY --from=code /oada/ /oada/\n\nARG OADA_SERVICE\nENV OADA_SERVICE=${OADA_SERVICE}\nENV INSPECT=\n\nWORKDIR /oada/services/${OADA_SERVICE}\n\n# Do not run services as root\nUSER node\nENV PORT=8080\n\nFROM production as debug\n\nUSER root\n\nCOPY --from=dev /oada/ /oada/\n\n# Default to a production target\nFROM production"
}