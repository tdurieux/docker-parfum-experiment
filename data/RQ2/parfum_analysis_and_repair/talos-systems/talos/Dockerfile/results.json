{
  "startTime": 1674248734718,
  "endTime": 1674248737531,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 732,
        "lineEnd": 732,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 733,
        "lineEnd": 733,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 734,
        "lineEnd": 734,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 735,
        "lineEnd": 735,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Meta args applied to stage base names.\n\nARG TOOLS\nARG IMPORTVET\nARG PKGS\nARG EXTRAS\nARG INSTALLER_ARCH\n\n# Resolve package images using ${PKGS} to be used later in COPY --from=.\n\nFROM ghcr.io/siderolabs/fhs:${PKGS} AS pkg-fhs\nFROM ghcr.io/siderolabs/ca-certificates:${PKGS} AS pkg-ca-certificates\n\nFROM --platform=amd64 ghcr.io/siderolabs/cryptsetup:${PKGS} AS pkg-cryptsetup-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/cryptsetup:${PKGS} AS pkg-cryptsetup-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/containerd:${PKGS} AS pkg-containerd-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/containerd:${PKGS} AS pkg-containerd-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/dosfstools:${PKGS} AS pkg-dosfstools-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/dosfstools:${PKGS} AS pkg-dosfstools-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/eudev:${PKGS} AS pkg-eudev-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/eudev:${PKGS} AS pkg-eudev-arm64\n\nFROM ghcr.io/siderolabs/grub:${PKGS} AS pkg-grub\nFROM --platform=amd64 ghcr.io/siderolabs/grub:${PKGS} AS pkg-grub-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/grub:${PKGS} AS pkg-grub-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/iptables:${PKGS} AS pkg-iptables-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/iptables:${PKGS} AS pkg-iptables-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/libinih:${PKGS} AS pkg-libinih-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/libinih:${PKGS} AS pkg-libinih-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/libjson-c:${PKGS} AS pkg-libjson-c-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/libjson-c:${PKGS} AS pkg-libjson-c-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/libpopt:${PKGS} AS pkg-libpopt-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/libpopt:${PKGS} AS pkg-libpopt-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/liburcu:${PKGS} AS pkg-liburcu-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/liburcu:${PKGS} AS pkg-liburcu-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/openssl:${PKGS} AS pkg-openssl-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/openssl:${PKGS} AS pkg-openssl-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/libseccomp:${PKGS} AS pkg-libseccomp-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/libseccomp:${PKGS} AS pkg-libseccomp-arm64\n\n# linux-firmware is not arch-specific\nFROM --platform=amd64 ghcr.io/siderolabs/linux-firmware:${PKGS} AS pkg-linux-firmware\n\nFROM --platform=amd64 ghcr.io/siderolabs/lvm2:${PKGS} AS pkg-lvm2-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/lvm2:${PKGS} AS pkg-lvm2-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/libaio:${PKGS} AS pkg-libaio-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/libaio:${PKGS} AS pkg-libaio-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/musl:${PKGS} AS pkg-musl-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/musl:${PKGS} AS pkg-musl-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/runc:${PKGS} AS pkg-runc-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/runc:${PKGS} AS pkg-runc-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/xfsprogs:${PKGS} AS pkg-xfsprogs-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/xfsprogs:${PKGS} AS pkg-xfsprogs-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/util-linux:${PKGS} AS pkg-util-linux-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/util-linux:${PKGS} AS pkg-util-linux-arm64\n\nFROM --platform=amd64 ghcr.io/siderolabs/kmod:${PKGS} AS pkg-kmod-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/kmod:${PKGS} AS pkg-kmod-arm64\n\nFROM ghcr.io/siderolabs/kernel:${PKGS} AS pkg-kernel\nFROM --platform=amd64 ghcr.io/siderolabs/kernel:${PKGS} AS pkg-kernel-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/kernel:${PKGS} AS pkg-kernel-arm64\n\nFROM --platform=arm64 ghcr.io/siderolabs/u-boot:${PKGS} AS pkg-u-boot-arm64\nFROM --platform=arm64 ghcr.io/siderolabs/raspberrypi-firmware:${PKGS} AS pkg-raspberrypi-firmware-arm64\n\n# Resolve package images using ${EXTRAS} to be used later in COPY --from=.\n\nFROM ghcr.io/siderolabs/talosctl-cni-bundle-install:${EXTRAS} AS extras-talosctl-cni-bundle-install\n\n# The tools target provides base toolchain for the build.\n\nFROM $IMPORTVET as importvet\n\nFROM --platform=${BUILDPLATFORM} $TOOLS AS tools\nENV PATH /toolchain/bin:/toolchain/go/bin\nRUN [\"/toolchain/bin/mkdir\", \"/bin\", \"/tmp\"]\nRUN [\"/toolchain/bin/ln\", \"-svf\", \"/toolchain/bin/bash\", \"/bin/sh\"]\nRUN [\"/toolchain/bin/ln\", \"-svf\", \"/toolchain/etc/ssl\", \"/etc/ssl\"]\nARG GOLANGCILINT_VERSION\nRUN curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/${GOLANGCILINT_VERSION}/install.sh | bash -s -- -b /toolchain/bin ${GOLANGCILINT_VERSION}\nARG GOIMPORTS_VERSION\nRUN --mount=type=cache,target=/.cache go install golang.org/x/tools/cmd/goimports@${GOIMPORTS_VERSION} \\\n    && mv /go/bin/goimports /toolchain/go/bin/goimports\nARG GOFUMPT_VERSION\nRUN --mount=type=cache,target=/.cache go install mvdan.cc/gofumpt@${GOFUMPT_VERSION} \\\n    && mv /go/bin/gofumpt /toolchain/go/bin/gofumpt\nARG DEEPCOPY_VERSION\nRUN --mount=type=cache,target=/.cache go install github.com/siderolabs/deep-copy@${DEEPCOPY_VERSION} \\\n    && mv /go/bin/deep-copy /toolchain/go/bin/deep-copy\nARG STRINGER_VERSION\nRUN --mount=type=cache,target=/.cache go install golang.org/x/tools/cmd/stringer@${STRINGER_VERSION} \\\n    && mv /go/bin/stringer /toolchain/go/bin/stringer\nARG ENUMER_VERSION\nRUN --mount=type=cache,target=/.cache go install github.com/alvaroloes/enumer@${ENUMER_VERSION} \\\n    && mv /go/bin/enumer /toolchain/go/bin/enumer\nARG DEEPCOPY_GEN_VERSION\nRUN --mount=type=cache,target=/.cache go install k8s.io/code-generator/cmd/deepcopy-gen@${DEEPCOPY_GEN_VERSION} \\\n    && mv /go/bin/deepcopy-gen /toolchain/go/bin/deepcopy-gen\nARG VTPROTOBUF_VERSION\nRUN --mount=type=cache,target=/.cache go install github.com/planetscale/vtprotobuf/cmd/protoc-gen-go-vtproto@${VTPROTOBUF_VERSION} \\\n    && mv /go/bin/protoc-gen-go-vtproto /toolchain/go/bin/protoc-gen-go-vtproto\nRUN curl -sfL https://github.com/uber/prototool/releases/download/v1.10.0/prototool-Linux-x86_64.tar.gz | tar -xz --strip-components=2 -C /toolchain/bin prototool/bin/prototool\nCOPY ./hack/docgen /go/src/github.com/talos-systems/talos-hack-docgen\nRUN --mount=type=cache,target=/.cache cd /go/src/github.com/talos-systems/talos-hack-docgen \\\n    && go build -o docgen . \\\n    && mv docgen /toolchain/go/bin/\nCOPY --from=importvet /importvet /toolchain/go/bin/importvet\n\n# The build target creates a container that will be used to build Talos source\n# code.\n\nFROM --platform=${BUILDPLATFORM} tools AS build\nSHELL [\"/toolchain/bin/bash\", \"-c\"]\nENV PATH /toolchain/bin:/toolchain/go/bin\nENV GO111MODULE on\nENV GOPROXY https://proxy.golang.org\nARG CGO_ENABLED\nENV CGO_ENABLED ${CGO_ENABLED}\nENV GOCACHE /.cache/go-build\nENV GOMODCACHE /.cache/mod\nENV PROTOTOOL_CACHE_PATH /.cache/prototool\nARG SOURCE_DATE_EPOCH\nENV SOURCE_DATE_EPOCH ${SOURCE_DATE_EPOCH}\nWORKDIR /src\n\n# The build-go target creates a container to build Go code with Go modules downloaded and verified.\n\nFROM build AS build-go\nCOPY ./go.mod ./go.sum ./\nCOPY ./pkg/machinery/go.mod ./pkg/machinery/go.sum ./pkg/machinery/\nWORKDIR /src/pkg/machinery\nRUN --mount=type=cache,target=/.cache go mod download\nWORKDIR /src\nRUN --mount=type=cache,target=/.cache go mod download\nRUN --mount=type=cache,target=/.cache go mod verify\n\n# The generate target generates code from protobuf service definitions and machinery config.\n\n# generate API descriptors\nFROM build AS api-descriptors-build\nWORKDIR /src/api\nCOPY api .\nRUN --mount=type=cache,target=/.cache prototool format --overwrite --protoc-bin-path=/toolchain/bin/protoc --protoc-wkt-path=/toolchain/include\nRUN --mount=type=cache,target=/.cache prototool break descriptor-set --output-path=api.descriptors --protoc-bin-path=/toolchain/bin/protoc --protoc-wkt-path=/toolchain/include\n\nFROM --platform=${BUILDPLATFORM} scratch AS api-descriptors\nCOPY --from=api-descriptors-build /src/api/api.descriptors /api/api.descriptors\n\n# format protobuf service definitions\nFROM build AS proto-format-build\nWORKDIR /src/api\nCOPY api .\nRUN --mount=type=cache,target=/.cache prototool format --overwrite --protoc-bin-path=/toolchain/bin/protoc --protoc-wkt-path=/toolchain/include\n\nFROM --platform=${BUILDPLATFORM} scratch AS fmt-protobuf\nCOPY --from=proto-format-build /src/api/ /api/\n\n# compile protobuf service definitions\nFROM build AS generate-build\nCOPY --from=proto-format-build /src/api /api/\n# Common needs to be at or near the top to satisfy the subsequent imports\nCOPY ./api/vendor/ /api/vendor/\nCOPY ./api/common/common.proto /api/common/common.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size common/common.proto\nCOPY ./api/security/security.proto /api/security/security.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size security/security.proto\nCOPY ./api/storage/storage.proto /api/storage/storage.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size storage/storage.proto\nCOPY ./api/machine/machine.proto /api/machine/machine.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size machine/machine.proto\nCOPY ./api/time/time.proto /api/time/time.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size time/time.proto\nCOPY ./api/cluster/cluster.proto /api/cluster/cluster.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size cluster/cluster.proto\nCOPY ./api/resource/resource.proto /api/resource/resource.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size resource/resource.proto\nCOPY ./api/resource/secrets/secrets.proto /api/resource/secrets/secrets.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size resource/secrets/secrets.proto\nCOPY ./api/inspect/inspect.proto /api/inspect/inspect.proto\nRUN protoc -I/api -I/api/vendor/ --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size inspect/inspect.proto\n# Goimports and gofumpt generated files to adjust import order\nRUN goimports -w -local github.com/talos-systems/talos /api/\nRUN gofumpt -w /api/\n\n# run docgen for machinery config\nFROM build-go AS go-generate\nCOPY ./pkg ./pkg\nCOPY ./hack/boilerplate.txt ./hack/boilerplate.txt\nRUN --mount=type=cache,target=/.cache go generate ./pkg/...\nRUN goimports -w -local github.com/talos-systems/talos ./pkg/\nRUN gofumpt -w ./pkg/\nWORKDIR /src/pkg/machinery\nRUN --mount=type=cache,target=/.cache go generate ./...\nRUN goimports -w -local github.com/talos-systems/talos ./\nRUN gofumpt -w ./\n\nFROM build AS embed-generate\nARG NAME\nARG SHA\nARG USERNAME\nARG REGISTRY\nARG TAG\nARG ARTIFACTS\nARG PKGS\nARG EXTRAS\nRUN mkdir -p pkg/machinery/gendata/data && \\\n    echo -n ${NAME} > pkg/machinery/gendata/data/name && \\\n    echo -n ${SHA} > pkg/machinery/gendata/data/sha && \\\n    echo -n ${USERNAME} > pkg/machinery/gendata/data/username && \\\n    echo -n ${REGISTRY} > pkg/machinery/gendata/data/registry && \\\n    echo -n ${EXTRAS} > pkg/machinery/gendata/data/extras && \\\n    echo -n ${PKGS} > pkg/machinery/gendata/data/pkgs && \\\n    echo -n ${TAG} > pkg/machinery/gendata/data/tag && \\\n    echo -n ${ARTIFACTS} > pkg/machinery/gendata/data/artifacts\n\nFROM scratch AS embed\nCOPY --from=embed-generate /src/pkg/machinery/gendata/data /pkg/machinery/gendata/data\n\nFROM embed-generate AS embed-abbrev-generate\nARG ABBREV_TAG\nRUN echo -n \"undefined\" > pkg/machinery/gendata/data/sha && \\\n    echo -n ${ABBREV_TAG} > pkg/machinery/gendata/data/tag\n\nFROM scratch AS embed-abbrev\nCOPY --from=embed-abbrev-generate /src/pkg/machinery/gendata/data /pkg/machinery/gendata/data\n\nFROM --platform=${BUILDPLATFORM} scratch AS generate\nCOPY --from=proto-format-build /src/api /api/\nCOPY --from=generate-build /api/common/*.pb.go /pkg/machinery/api/common/\nCOPY --from=generate-build /api/security/*.pb.go /pkg/machinery/api/security/\nCOPY --from=generate-build /api/machine/*.pb.go /pkg/machinery/api/machine/\nCOPY --from=generate-build /api/time/*.pb.go /pkg/machinery/api/time/\nCOPY --from=generate-build /api/cluster/*.pb.go /pkg/machinery/api/cluster/\nCOPY --from=generate-build /api/storage/*.pb.go /pkg/machinery/api/storage/\nCOPY --from=generate-build /api/resource/*.pb.go /pkg/machinery/api/resource/\nCOPY --from=generate-build /api/resource/secrets/*.pb.go /pkg/machinery/api/resource/secrets/\nCOPY --from=generate-build /api/inspect/*.pb.go /pkg/machinery/api/inspect/\nCOPY --from=go-generate /src/pkg/machinery/resources/kubespan/ /pkg/machinery/resources/kubespan/\nCOPY --from=go-generate /src/pkg/machinery/resources/network/ /pkg/machinery/resources/network/\nCOPY --from=go-generate /src/pkg/machinery/config/types/v1alpha1/ /pkg/machinery/config/types/v1alpha1/\nCOPY --from=go-generate /src/pkg/machinery/nethelpers/ /pkg/machinery/nethelpers/\nCOPY --from=go-generate /src/pkg/machinery/extensions/ /pkg/machinery/extensions/\nCOPY --from=embed-abbrev / /\n\n# The base target provides a container that can be used to build all Talos\n# assets.\n\nFROM build-go AS base\nCOPY ./cmd ./cmd\nCOPY ./pkg ./pkg\nCOPY ./internal ./internal\nCOPY --from=generate /pkg/machinery/ ./pkg/machinery/\nCOPY --from=embed / ./\nRUN --mount=type=cache,target=/.cache go list all >/dev/null\nWORKDIR /src/pkg/machinery\nRUN --mount=type=cache,target=/.cache go mod download\nRUN --mount=type=cache,target=/.cache go list all >/dev/null\nWORKDIR /src\n\n# The init target builds the init binary.\n\nFROM base AS init-build-amd64\nWORKDIR /src/internal/app/init\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nARG GOAMD64\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=amd64 GOAMD64=${GOAMD64} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /init\nRUN chmod +x /init\n\nFROM base AS init-build-arm64\nWORKDIR /src/internal/app/init\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=arm64 go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /init\nRUN chmod +x /init\n\nFROM init-build-${TARGETARCH} AS init-build\n\nFROM scratch AS init\nCOPY --from=init-build /init /init\n\n# The machined target builds the machined binary.\n\nFROM base AS machined-build-amd64\nWORKDIR /src/internal/app/machined\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nARG GOAMD64\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=amd64 GOAMD64=${GOAMD64} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /machined\nRUN chmod +x /machined\n\nFROM base AS machined-build-arm64\nWORKDIR /src/internal/app/machined\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=arm64 go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /machined\nRUN chmod +x /machined\n\nFROM machined-build-${TARGETARCH} AS machined-build\n\nFROM scratch AS machined\nCOPY --from=machined-build /machined /machined\n\n# The talosctl targets build the talosctl binaries.\n\nFROM base AS talosctl-linux-amd64-build\nWORKDIR /src/cmd/talosctl\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nARG GOAMD64\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=amd64 GOAMD64=${GOAMD64} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /talosctl-linux-amd64\nRUN chmod +x /talosctl-linux-amd64\n\nFROM base AS talosctl-linux-arm64-build\nWORKDIR /src/cmd/talosctl\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=arm64 go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /talosctl-linux-arm64\nRUN chmod +x /talosctl-linux-arm64\n\nFROM base AS talosctl-linux-armv7-build\nWORKDIR /src/cmd/talosctl\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=arm GOARM=7 go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /talosctl-linux-armv7\nRUN chmod +x /talosctl-linux-armv7\n\nFROM scratch AS talosctl-linux\nCOPY --from=talosctl-linux-amd64-build /talosctl-linux-amd64 /talosctl-linux-amd64\nCOPY --from=talosctl-linux-arm64-build /talosctl-linux-arm64 /talosctl-linux-arm64\nCOPY --from=talosctl-linux-armv7-build /talosctl-linux-armv7 /talosctl-linux-armv7\n\nFROM scratch as talosctl\nARG TARGETARCH\nCOPY --from=talosctl-linux /talosctl-linux-${TARGETARCH} /talosctl\nARG TAG\nENV VERSION ${TAG}\nLABEL \"alpha.talos.dev/version\"=\"${VERSION}\"\nLABEL org.opencontainers.image.source https://github.com/siderolabs/talos\nENTRYPOINT [\"/talosctl\"]\n\nFROM base AS talosctl-darwin-amd64-build\nWORKDIR /src/cmd/talosctl\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nARG GOAMD64\nRUN --mount=type=cache,target=/.cache GOOS=darwin GOARCH=amd64 GOAMD64=${GOAMD64} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /talosctl-darwin-amd64\nRUN chmod +x /talosctl-darwin-amd64\n\nFROM base AS talosctl-darwin-arm64-build\nWORKDIR /src/cmd/talosctl\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=darwin GOARCH=arm64 go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /talosctl-darwin-arm64\nRUN chmod +x /talosctl-darwin-arm64\n\nFROM scratch AS talosctl-darwin\nCOPY --from=talosctl-darwin-amd64-build /talosctl-darwin-amd64 /talosctl-darwin-amd64\nCOPY --from=talosctl-darwin-arm64-build /talosctl-darwin-arm64 /talosctl-darwin-arm64\n\nFROM base AS talosctl-windows-amd64-build\nWORKDIR /src/cmd/talosctl\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nARG GOAMD64\nRUN --mount=type=cache,target=/.cache GOOS=windows GOARCH=amd64 GOAMD64=${GOAMD64} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /talosctl-windows-amd64.exe\n\nFROM scratch AS talosctl-windows\nCOPY --from=talosctl-windows-amd64-build /talosctl-windows-amd64.exe /talosctl-windows-amd64.exe\n\n# The kernel target is the linux kernel.\n\nFROM scratch AS kernel\nARG TARGETARCH\nCOPY --from=pkg-kernel /boot/vmlinuz /vmlinuz-${TARGETARCH}\n\n# The rootfs target provides the Talos rootfs.\n\nFROM build AS rootfs-base-amd64\nCOPY --from=pkg-fhs / /rootfs\nCOPY --from=pkg-ca-certificates / /rootfs\nCOPY --from=pkg-cryptsetup-amd64 / /rootfs\nCOPY --from=pkg-containerd-amd64 / /rootfs\nCOPY --from=pkg-dosfstools-amd64 / /rootfs\nCOPY --from=pkg-eudev-amd64 / /rootfs\nCOPY --from=pkg-iptables-amd64 / /rootfs\nCOPY --from=pkg-libinih-amd64 / /rootfs\nCOPY --from=pkg-libjson-c-amd64 / /rootfs\nCOPY --from=pkg-libpopt-amd64 / /rootfs\nCOPY --from=pkg-liburcu-amd64 / /rootfs\nCOPY --from=pkg-openssl-amd64 / /rootfs\nCOPY --from=pkg-libseccomp-amd64 / /rootfs\nCOPY --from=pkg-lvm2-amd64 / /rootfs\nCOPY --from=pkg-libaio-amd64 / /rootfs\nCOPY --from=pkg-musl-amd64 / /rootfs\nCOPY --from=pkg-runc-amd64 / /rootfs\nCOPY --from=pkg-xfsprogs-amd64 / /rootfs\nCOPY --from=pkg-util-linux-amd64 /lib/libblkid.* /rootfs/lib/\nCOPY --from=pkg-util-linux-amd64 /lib/libuuid.* /rootfs/lib/\nCOPY --from=pkg-util-linux-amd64 /lib/libmount.* /rootfs/lib/\nCOPY --from=pkg-kmod-amd64 /usr/lib/libkmod.* /rootfs/lib/\nCOPY --from=pkg-kernel-amd64 /lib/modules /rootfs/lib/modules\nCOPY --from=machined-build-amd64 /machined /rootfs/sbin/init\n# the orderly_poweroff call by the kernel will call '/sbin/poweroff'\nRUN ln /rootfs/sbin/init /rootfs/sbin/poweroff\nRUN chmod +x /rootfs/sbin/poweroff\n# NB: We run the cleanup step before creating extra directories, files, and\n# symlinks to avoid accidentally cleaning them up.\nCOPY ./hack/cleanup.sh /toolchain/bin/cleanup.sh\nRUN cleanup.sh /rootfs\nRUN mkdir -pv /rootfs/{boot,etc/cri/conf.d/hosts,lib/firmware,usr/local/share,usr/share/zoneinfo/Etc,mnt,system,opt}\nCOPY --chmod=0644 hack/zoneinfo/Etc/UTC /rootfs/usr/share/zoneinfo/Etc/UTC\nRUN ln -s /usr/share/zoneinfo/Etc/UTC /rootfs/etc/localtime\nRUN mkdir -pv /rootfs/{etc/kubernetes/manifests,etc/cni/net.d,usr/libexec/kubernetes}\nRUN mkdir -pv /rootfs/opt/{containerd/bin,containerd/lib}\nCOPY --chmod=0644 hack/containerd.toml /rootfs/etc/containerd/config.toml\nCOPY --chmod=0644 hack/cri-containerd.toml /rootfs/etc/cri/containerd.toml\nCOPY --chmod=0644 hack/cri-plugin.part /rootfs/etc/cri/conf.d/00-base.part\nRUN touch /rootfs/etc/{extensions.yaml,resolv.conf,hosts,os-release,machine-id,cri/conf.d/cri.toml,cri/conf.d/01-registries.part}\nRUN ln -s ca-certificates /rootfs/etc/ssl/certs/ca-certificates.crt\nRUN ln -s /etc/ssl /rootfs/etc/pki\nRUN ln -s /etc/ssl /rootfs/usr/share/ca-certificates\nRUN ln -s /etc/ssl /rootfs/usr/local/share/ca-certificates\nRUN ln -s /etc/ssl /rootfs/etc/ca-certificates\n\nFROM build AS rootfs-base-arm64\nCOPY --from=pkg-fhs / /rootfs\nCOPY --from=pkg-ca-certificates / /rootfs\nCOPY --from=pkg-cryptsetup-arm64 / /rootfs\nCOPY --from=pkg-containerd-arm64 / /rootfs\nCOPY --from=pkg-dosfstools-arm64 / /rootfs\nCOPY --from=pkg-eudev-arm64 / /rootfs\nCOPY --from=pkg-iptables-arm64 / /rootfs\nCOPY --from=pkg-libinih-arm64 / /rootfs\nCOPY --from=pkg-libjson-c-arm64 / /rootfs\nCOPY --from=pkg-libpopt-arm64 / /rootfs\nCOPY --from=pkg-liburcu-arm64 / /rootfs\nCOPY --from=pkg-openssl-arm64 / /rootfs\nCOPY --from=pkg-libseccomp-arm64 / /rootfs\nCOPY --from=pkg-lvm2-arm64 / /rootfs\nCOPY --from=pkg-libaio-arm64 / /rootfs\nCOPY --from=pkg-musl-arm64 / /rootfs\nCOPY --from=pkg-runc-arm64 / /rootfs\nCOPY --from=pkg-xfsprogs-arm64 / /rootfs\nCOPY --from=pkg-util-linux-arm64 /lib/libblkid.* /rootfs/lib/\nCOPY --from=pkg-util-linux-arm64 /lib/libuuid.* /rootfs/lib/\nCOPY --from=pkg-util-linux-arm64 /lib/libmount.* /rootfs/lib/\nCOPY --from=pkg-kmod-arm64 /usr/lib/libkmod.* /rootfs/lib/\nCOPY --from=pkg-kernel-arm64 /lib/modules /rootfs/lib/modules\nCOPY --from=machined-build-arm64 /machined /rootfs/sbin/init\n# the orderly_poweroff call by the kernel will call '/sbin/poweroff'\nRUN ln /rootfs/sbin/init /rootfs/sbin/poweroff\nRUN chmod +x /rootfs/sbin/poweroff\n# NB: We run the cleanup step before creating extra directories, files, and\n# symlinks to avoid accidentally cleaning them up.\nCOPY ./hack/cleanup.sh /toolchain/bin/cleanup.sh\nRUN cleanup.sh /rootfs\nRUN mkdir -pv /rootfs/{boot,etc/cri/conf.d/hosts,lib/firmware,usr/local/share,usr/share/zoneinfo/Etc,mnt,system,opt}\nCOPY --chmod=0644 hack/zoneinfo/Etc/UTC /rootfs/usr/share/zoneinfo/Etc/UTC\nRUN ln -s /usr/share/zoneinfo/Etc/UTC /rootfs/etc/localtime\nRUN mkdir -pv /rootfs/{etc/kubernetes/manifests,etc/cni/net.d,usr/libexec/kubernetes}\nRUN mkdir -pv /rootfs/opt/{containerd/bin,containerd/lib}\nCOPY --chmod=0644 hack/containerd.toml /rootfs/etc/containerd/config.toml\nCOPY --chmod=0644 hack/cri-containerd.toml /rootfs/etc/cri/containerd.toml\nCOPY --chmod=0644 hack/cri-plugin.part /rootfs/etc/cri/conf.d/00-base.part\nRUN touch /rootfs/etc/{extensions.yaml,resolv.conf,hosts,os-release,machine-id,cri/conf.d/cri.toml,cri/conf.d/01-registries.part}\nRUN ln -s /etc/ssl /rootfs/etc/pki\nRUN ln -s ca-certificates /rootfs/etc/ssl/certs/ca-certificates.crt\nRUN ln -s /etc/ssl /rootfs/usr/share/ca-certificates\nRUN ln -s /etc/ssl /rootfs/usr/local/share/ca-certificates\nRUN ln -s /etc/ssl /rootfs/etc/ca-certificates\n\nFROM rootfs-base-${TARGETARCH} AS rootfs-base\n\nFROM rootfs-base-arm64 AS rootfs-squashfs-arm64\nRUN find /rootfs -print0 \\\n    | xargs -0r touch --no-dereference --date=\"@${SOURCE_DATE_EPOCH}\"\nRUN mksquashfs /rootfs /rootfs.sqsh -all-root -noappend -comp xz -Xdict-size 100% -no-progress\n\nFROM rootfs-base-amd64 AS rootfs-squashfs-amd64\nRUN find /rootfs -print0 \\\n    | xargs -0r touch --no-dereference --date=\"@${SOURCE_DATE_EPOCH}\"\nRUN mksquashfs /rootfs /rootfs.sqsh -all-root -noappend -comp xz -Xdict-size 100% -no-progress\n\nFROM scratch AS squashfs-arm64\nCOPY --from=rootfs-squashfs-arm64 /rootfs.sqsh /\n\nFROM scratch AS squashfs-amd64\nCOPY --from=rootfs-squashfs-amd64 /rootfs.sqsh /\n\nFROM scratch AS rootfs\nCOPY --from=rootfs-base /rootfs /\n\n# The initramfs target provides the Talos initramfs image.\n\nFROM build AS initramfs-archive-arm64\nWORKDIR /initramfs\nCOPY --from=squashfs-arm64 /rootfs.sqsh .\nCOPY --from=init-build-arm64 /init .\n# copying over firmware binary blobs to initramfs\nCOPY --from=pkg-linux-firmware /lib/firmware/rtl_nic ./lib/firmware/rtl_nic\nCOPY --from=pkg-linux-firmware /lib/firmware/nvidia/tegra210 ./lib/firmware/nvidia/tegra210\nRUN find . -print0 \\\n    | xargs -0r touch --no-dereference --date=\"@${SOURCE_DATE_EPOCH}\"\nRUN set -o pipefail \\\n    && find . 2>/dev/null \\\n    | LC_ALL=c sort \\\n    | cpio --reproducible -H newc -o \\\n    | xz -v -C crc32 -0 -e -T 0 -z \\\n    > /initramfs.xz\n\nFROM build AS initramfs-archive-amd64\nWORKDIR /initramfs\nCOPY --from=squashfs-amd64 /rootfs.sqsh .\nCOPY --from=init-build-amd64 /init .\n# copying over firmware binary blobs to initramfs\nCOPY --from=pkg-linux-firmware /lib/firmware/bnx2 ./lib/firmware/bnx2\nCOPY --from=pkg-linux-firmware /lib/firmware/bnx2x ./lib/firmware/bnx2x\nRUN find . -print0 \\\n    | xargs -0r touch --no-dereference --date=\"@${SOURCE_DATE_EPOCH}\"\nRUN set -o pipefail \\\n    && find . 2>/dev/null \\\n    | LC_ALL=c sort \\\n    | cpio --reproducible -H newc -o \\\n    | xz -v -C crc32 -0 -e -T 0 -z \\\n    > /initramfs.xz\n\nFROM initramfs-archive-${TARGETARCH} AS initramfs-archive\n\nFROM scratch AS initramfs\nARG TARGETARCH\nCOPY --from=initramfs-archive /initramfs.xz /initramfs-${TARGETARCH}.xz\n\n# The talos target generates a docker image that can be used to run Talos\n# in containers.\n\nFROM scratch AS talos\nCOPY --from=rootfs / /\nLABEL org.opencontainers.image.source https://github.com/siderolabs/talos\nENTRYPOINT [\"/sbin/init\"]\n\n# The installer target generates an image that can be used to install Talos to\n# various environments.\n\nFROM base AS installer-build\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nWORKDIR /src/cmd/installer\nARG TARGETARCH\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=${TARGETARCH} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /installer\nRUN chmod +x /installer\n\nFROM alpine:3.16.0 AS unicode-pf2\nRUN apk add --no-cache --update --no-scripts grub\n\nFROM scratch AS install-artifacts-amd64\nCOPY --from=pkg-grub-amd64 /usr/lib/grub /usr/lib/grub\nCOPY --from=pkg-kernel-amd64 /boot/vmlinuz /usr/install/amd64/vmlinuz\nCOPY --from=pkg-kernel-amd64 /dtb /usr/install/amd64/dtb\nCOPY --from=initramfs-archive-amd64 /initramfs.xz /usr/install/amd64/initramfs.xz\n\nFROM scratch AS install-artifacts-arm64\nCOPY --from=pkg-grub-arm64 /usr/lib/grub /usr/lib/grub\nCOPY --from=pkg-kernel-arm64 /boot/vmlinuz /usr/install/arm64/vmlinuz\nCOPY --from=pkg-kernel-arm64 /dtb /usr/install/arm64/dtb\nCOPY --from=initramfs-archive-arm64 /initramfs.xz /usr/install/arm64/initramfs.xz\nCOPY --from=pkg-u-boot-arm64 / /usr/install/arm64/u-boot\nCOPY --from=pkg-raspberrypi-firmware-arm64 / /usr/install/arm64/raspberrypi-firmware\n\nFROM scratch AS install-artifacts-all\nCOPY --from=install-artifacts-amd64 / /\nCOPY --from=install-artifacts-arm64 / /\n\nFROM install-artifacts-${TARGETARCH} AS install-artifacts-targetarch\n\nFROM install-artifacts-${INSTALLER_ARCH} AS install-artifacts\nCOPY --from=pkg-grub / /\nCOPY --from=unicode-pf2 /usr/share/grub/unicode.pf2 /usr/share/grub/unicode.pf2\n\nFROM alpine:3.16.0 AS installer\nRUN apk add --no-cache --update --no-scripts \\\n    bash \\\n    cpio \\\n    efibootmgr \\\n    mtools \\\n    qemu-img \\\n    squashfs-tools \\\n    util-linux \\\n    xfsprogs \\\n    xorriso \\\n    xz\nARG TARGETARCH\nENV TARGETARCH ${TARGETARCH}\nCOPY --from=install-artifacts / /\nCOPY --from=installer-build /installer /bin/installer\nRUN ln -s /bin/installer /bin/talosctl\nARG TAG\nENV VERSION ${TAG}\nLABEL \"alpha.talos.dev/version\"=\"${VERSION}\"\nLABEL org.opencontainers.image.source https://github.com/siderolabs/talos\nENTRYPOINT [\"/bin/installer\"]\nONBUILD RUN apk add --no-cache --update \\\n    cpio \\\n    squashfs-tools \\\n    xz\nONBUILD WORKDIR /initramfs\nONBUILD ARG RM\nONBUILD RUN xz -d /usr/install/${TARGETARCH}/initramfs.xz \\\n    && cpio -idvm < /usr/install/${TARGETARCH}/initramfs \\\n    && unsquashfs -f -d /rootfs rootfs.sqsh \\\n    && for f in ${RM}; do rm -rfv /rootfs$f; done \\\n    && rm /usr/install/${TARGETARCH}/initramfs \\\n    && rm rootfs.sqsh\nONBUILD COPY --from=customization / /rootfs\nONBUILD RUN find /rootfs \\\n    && mksquashfs /rootfs rootfs.sqsh -all-root -noappend -comp xz -Xdict-size 100% -no-progress \\\n    && set -o pipefail && find . 2>/dev/null | cpio -H newc -o | xz -v -C crc32 -0 -e -T 0 -z >/usr/install/${TARGETARCH}/initramfs.xz \\\n    && rm -rf /rootfs \\\n    && rm -rf /initramfs\nONBUILD WORKDIR /\n\nFROM installer AS imager\n\n# The test target performs tests on the source code.\n\nFROM base AS unit-tests-runner\nRUN unlink /etc/ssl\nCOPY --from=rootfs / /\nARG TESTPKGS\nENV PLATFORM container\nARG GO_LDFLAGS\nRUN --security=insecure --mount=type=cache,id=testspace,target=/tmp --mount=type=cache,target=/.cache go test -v \\\n    -ldflags \"${GO_LDFLAGS}\" \\\n    -covermode=atomic -coverprofile=coverage.txt -coverpkg=${TESTPKGS} -count 1 -p 4 ${TESTPKGS}\nFROM scratch AS unit-tests\nCOPY --from=unit-tests-runner /src/coverage.txt /coverage.txt\n\n# The unit-tests-race target performs tests with race detector.\n\nFROM base AS unit-tests-race\nRUN unlink /etc/ssl\nCOPY --from=rootfs / /\nARG TESTPKGS\nENV PLATFORM container\nENV CGO_ENABLED 1\nARG GO_LDFLAGS\nRUN --security=insecure --mount=type=cache,id=testspace,target=/tmp --mount=type=cache,target=/.cache go test -v \\\n    -ldflags \"${GO_LDFLAGS}\" \\\n    -race -count 1 -p 4 ${TESTPKGS}\n\n# The integration-test targets builds integration test binary.\n\nFROM base AS integration-test-linux-build\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nARG GOAMD64\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=amd64 GOAMD64=${GOAMD64} go test -v -c ${GO_BUILDFLAGS} \\\n    -ldflags \"${GO_LDFLAGS}\" \\\n    -tags integration,integration_api,integration_cli,integration_k8s \\\n    ./internal/integration\n\nFROM scratch AS integration-test-linux\nCOPY --from=integration-test-linux-build /src/integration.test /integration-test-linux-amd64\n\nFROM base AS integration-test-darwin-build\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nARG GOAMD64\nRUN --mount=type=cache,target=/.cache GOOS=darwin GOARCH=amd64 GOAMD64=${GOAMD64} go test -v -c ${GO_BUILDFLAGS} \\\n    -ldflags \"${GO_LDFLAGS}\" \\\n    -tags integration,integration_api,integration_cli,integration_k8s \\\n    ./internal/integration\n\nFROM scratch AS integration-test-darwin\nCOPY --from=integration-test-darwin-build /src/integration.test /integration-test-darwin-amd64\n\n# The integration-test-provision target builds integration test binary with provisioning tests.\n\nFROM base AS integration-test-provision-linux-build\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nARG GOAMD64\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=amd64 GOAMD64=${GOAMD64} go test -v -c ${GO_BUILDFLAGS} \\\n    -ldflags \"${GO_LDFLAGS}\" \\\n    -tags integration,integration_provision \\\n    ./internal/integration\n\nFROM scratch AS integration-test-provision-linux\nCOPY --from=integration-test-provision-linux-build /src/integration.test /integration-test-provision-linux-amd64\n\n# The lint target performs linting on the source code.\n\nFROM base AS lint-go\nCOPY .golangci.yml .\nENV GOGC 50\nENV GOLANGCI_LINT_CACHE /.cache/lint\nRUN --mount=type=cache,target=/.cache golangci-lint run --config .golangci.yml\nWORKDIR /src/pkg/machinery\nRUN --mount=type=cache,target=/.cache golangci-lint run --config ../../.golangci.yml\nWORKDIR /src\nRUN --mount=type=cache,target=/.cache importvet github.com/talos-systems/talos/...\n\n# The protolint target performs linting on protobuf files.\n\nFROM base AS lint-protobuf\nWORKDIR /src/api\nCOPY api .\nRUN --mount=type=cache,target=/.cache prototool lint --protoc-bin-path=/toolchain/bin/protoc --protoc-wkt-path=/toolchain/include\nRUN --mount=type=cache,target=/.cache prototool break check --descriptor-set-path=api.descriptors --protoc-bin-path=/toolchain/bin/protoc --protoc-wkt-path=/toolchain/include\n\n# The markdownlint target performs linting on Markdown files.\n\nFROM node:18.5.0-alpine AS lint-markdown\nRUN apk add --no-cache findutils\nRUN npm i -g markdownlint-cli@0.23.2 && npm cache clean --force;\nRUN npm i -g textlint@11.7.6 && npm cache clean --force;\nRUN npm i -g textlint-filter-rule-comments@1.2.2 && npm cache clean --force;\nRUN npm i -g textlint-rule-one-sentence-per-line@1.0.2 && npm cache clean --force;\nWORKDIR /src\nCOPY . .\nRUN markdownlint \\\n    --ignore '**/LICENCE.md' \\\n    --ignore '**/CHANGELOG.md' \\\n    --ignore '**/CODE_OF_CONDUCT.md' \\\n    --ignore '**/node_modules/**' \\\n    --ignore '**/hack/chglog/**' \\\n    --ignore 'website/content/*/reference/*' \\\n    --ignore 'website/themes/**' \\\n    .\nRUN find . \\\n    -name '*.md' \\\n    -not -path './LICENCE.md' \\\n    -not -path './CHANGELOG.md' \\\n    -not -path './CODE_OF_CONDUCT.md' \\\n    -not -path '*/node_modules/*' \\\n    -not -path './hack/chglog/**' \\\n    -not -path './website/content/*/reference/*' \\\n    -not -path './website/themes/**' \\\n    -print0 \\\n    | xargs -0 textlint\n\n# The docs target generates documentation.\n\nFROM base AS docs-build\nWORKDIR /src\nCOPY --from=talosctl-linux /talosctl-linux-amd64 /bin/talosctl\nRUN env HOME=/home/user TAG=latest /bin/talosctl docs --config /tmp \\\n    && env HOME=/home/user TAG=latest /bin/talosctl docs --cli /tmp\n\nFROM pseudomuto/protoc-gen-doc as proto-docs-build\nCOPY --from=generate-build /api /protos\nCOPY ./hack/protoc-gen-doc/markdown.tmpl /tmp/markdown.tmpl\nRUN protoc \\\n    -I/protos \\\n    -I/protos/common \\\n    -I/protos/inspect \\\n    -I/protos/machine \\\n    -I/protos/resource \\\n    -I/protos/security \\\n    -I/protos/storage \\\n    -I/protos/time \\\n    -I/protos/vendor \\\n    --doc_opt=/tmp/markdown.tmpl,api.md \\\n    --doc_out=/tmp \\\n    /protos/common/*.proto \\\n    /protos/inspect/*.proto \\\n    /protos/machine/*.proto \\\n    /protos/resource/*.proto \\\n    /protos/security/*.proto \\\n    /protos/storage/*.proto \\\n    /protos/time/*.proto\n\nFROM scratch AS docs\nCOPY --from=docs-build /tmp/configuration.md /website/content/v1.2/reference/\nCOPY --from=docs-build /tmp/cli.md /website/content/v1.2/reference/\nCOPY --from=proto-docs-build /tmp/api.md /website/content/v1.2/reference/\n\n# The talosctl-cni-bundle builds the CNI bundle for talosctl.\n\nFROM scratch AS talosctl-cni-bundle\nARG TARGETARCH\nCOPY --from=extras-talosctl-cni-bundle-install /opt/cni/bin/ /talosctl-cni-bundle-${TARGETARCH}/\n\n# The go-mod-outdated target lists all outdated modules.\n\nFROM base AS go-mod-outdated\nRUN --mount=type=cache,target=/.cache go install github.com/psampaz/go-mod-outdated@latest \\\n    && mv /go/bin/go-mod-outdated /toolchain/go/bin/go-mod-outdated\nCOPY ./hack/cloud-image-uploader ./hack/cloud-image-uploader\n# fail always to get the output back\nRUN --mount=type=cache,target=/.cache cd pkg/machinery && \\\n    echo -e \"\\n>>>> pkg/machinery:\" && \\\n    (go list -u -m -json all | go-mod-outdated -update -direct) && \\\n    cd ../.. && \\\n    echo -e \"\\n>>>> .:\" && \\\n    (go list -u -m -json all | go-mod-outdated -update -direct) && \\\n    cd hack/cloud-image-uploader && \\\n    echo -e \"\\n>>>> hack/cloud-image-uploader:\" && \\\n    (go list -u -m -json all | go-mod-outdated -update -direct) && \\\n    exit 1\n"
}