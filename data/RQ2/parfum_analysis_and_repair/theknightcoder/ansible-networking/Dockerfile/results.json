{
  "startTime": 1674253441266,
  "endTime": 1674253442102,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#This is the ultimate Ansible Image for Network Automation on Cisco IOS\n#This Dockerfile has all essential tools for Automation such as NAPALM and NTC-Ansible\n#It is built to be used through iteractive bash mode\n#Example of docker command to run:\n#docker run -v /vagrant:/ansible --rm -p 2222:22 -p 9191:9191 --name ansible -it theknightcoder/ansible-networking bash\n\nFROM ubuntu:16.04\n\nRUN echo \"===> Adding Ansible's PPA...\"  && \\\n    echo \"deb http://ppa.launchpad.net/ansible/ansible/ubuntu xenial main\" | tee /etc/apt/sources.list.d/ansible.list           && \\\n    echo \"deb-src http://ppa.launchpad.net/ansible/ansible/ubuntu xenial main\" | tee -a /etc/apt/sources.list.d/ansible.list    && \\\n    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7BB9C367    && \\\n    DEBIAN_FRONTEND=noninteractive  apt-get update  && \\\n    \\\n    \\\n    echo \"===> Installing Ansible...\"  && \\\n    apt-get update -y                  && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y ansible && \\\n\n\n    echo \"===> Installing NAPALM and NTC-Ansible...\" && \\\n    apt-get install --no-install-recommends -y libssl-dev libjpeg8-dev \\\n    libffi-dev python-dev python-cffi libxslt1-dev \\\n    libssl-dev python-pip zlib1g-dev libxml2-dev \\\n    libxslt-dev && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir setuptools --upgrade && \\\n    pip install --no-cache-dir netmiko napalm ntc-ansible && \\\n\n\n    echo \"===> Installing handy tools (optional)...\" && \\\n    pip install --no-cache-dir --upgrade pywinrm && \\\n    apt-get install --no-install-recommends -y sshpass openssh-client && \\\n    apt-get install --no-install-recommends git iputils-ping -y && \\\n    pip install --no-cache-dir openpyxl fasteners epdb && \\\n    #\n    #iputils-ping - allows you to ping\n    #openpyxl - create/read excel files in python \n    #fasteners - lock file so it can only be written to one at a time (Ansible runs in parallel)\n    #epdb - Help debug Ansible modules\n    \\\n    \\\n    echo \"===> Installing ara Ansible record report (optional)...\" && \\\n    pip install --no-cache-dir ara && \\\n    #run ara server (preferrable to use seperate container)\n    #ara-manage runserver -h 0.0.0.0 -p 9191\n    \\\n    \\\n    echo \"===> Removing Ansible PPA...\" && \\\n    rm -rf /var/lib/apt/lists/*  /etc/apt/sources.list.d/ansible.list && \\\n\n\n    echo \"===> Adding hosts for convenience...\" && \\\n    echo 'localhost' > /etc/ansible/hosts\n\n\n\nENV ara_location \"/usr/local/lib/python2.7/dist-packages/ara\"\nENV ANSIBLE_CALLBACK_PLUGINS \"${ara_location}/plugins/callbacks\"\nENV ANSIBLE_ACTION_PLUGINS \"${ara_location}/plugins/actions\"\nENV ARA_DATABASE \"sqlite:////ansible/db/ara.sqlite\"\n\n\n# ==> Copying Ansible playbook....\nWORKDIR /ansible\nCMD [\"bash\"]"
}