{
  "startTime": 1674215336346,
  "endTime": 1674215338177,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 133,
        "lineEnd": 145,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 110
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 7,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM --platform=$BUILDPLATFORM kpango/dev-base:latest AS env-base\n\nARG TARGETOS\nARG TARGETARCH\n\nENV OS=${TARGETOS}\nENV ARCH=${TARGETARCH}\nENV XARCH x86_64\nENV GITHUBCOM github.com\nENV GITHUB https://${GITHUBCOM}\nENV API_GITHUB https://api.${GITHUBCOM}/repos\nENV RAWGITHUB https://raw.githubusercontent.com\nENV GOOGLE https://storage.googleapis.com\nENV RELEASE_DL releases/download\nENV RELEASE_LATEST releases/latest\nENV LOCAL /usr/local\nENV BIN_PATH ${LOCAL}/bin\n\nLABEL maintainer=\"kpango <kpango@vdaas.org>\"\n\nARG USER_ID=1000\nARG GROUP_ID=1000\nARG GROUP_IDS=${GROUP_ID}\nARG WHOAMI=kpango\n\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/lib:/usr/local/lib:/lib:/lib64:/var/lib:/google-cloud-sdk/lib:/usr/local/go/lib:/usr/lib/dart/lib:/usr/lib/node_modules/lib\nENV BASE_DIR /home\nENV USER ${WHOAMI}\nENV HOME ${BASE_DIR}/${USER}\nENV SHELL /usr/bin/zsh\nENV GROUP sudo,root,users,docker,wheel\nENV UID ${USER_ID}\n\nRUN groupadd --non-unique --gid ${GROUP_ID} docker \\\n    && groupadd --non-unique --gid ${GROUP_ID} wheel \\\n    && groupmod --non-unique --gid ${GROUP_ID} users \\\n    && useradd --uid ${USER_ID} \\\n        --gid ${GROUP_ID} \\\n        --non-unique --create-home \\\n        --shell ${SHELL} \\\n        --base-dir ${BASE_DIR} \\\n        --home ${HOME} \\\n        --groups ${GROUP} ${USER} \\\n    && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \\\n    && echo \"${USER} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n    && sed -i -e 's/# %users\\tALL=(ALL)\\tNOPASSWD: ALL/%users\\tALL=(ALL)\\tNOPASSWD: ALL/' /etc/sudoers \\\n    && sed -i -e 's/%users\\tALL=(ALL)\\tALL/# %users\\tALL=(ALL)\\tALL/' /etc/sudoers \\\n    && chown -R 0:0 /etc/sudoers.d \\\n    && chown -R 0:0 /etc/sudoers \\\n    && chmod -R 0440 /etc/sudoers.d \\\n    && chmod -R 0440 /etc/sudoers \\\n    && visudo -c\n\nWORKDIR /tmp\nRUN echo '/lib\\n\\\n/lib64\\n\\\n/var/lib\\n\\\n/usr/lib\\n\\\n/usr/local/lib\\n\\\n/usr/local/go/lib\\n\\\n/usr/local/clang/lib\\n\\\n/usr/lib/dart/lib\\n\\\n/usr/lib/node_modules/lib\\n\\\n/google-cloud-sdk/lib' > /etc/ld.so.conf.d/usr-local-lib.conf \\\n    && echo $(ldconfig) \\\n    && apt update -y \\\n    && apt upgrade -y \\\n    && apt install -y --no-install-recommends --fix-missing \\\n    # ugrep \\\n    automake \\\n    bash \\\n    ccls \\\n    clang-format \\\n    clangd \\\n    diffutils \\\n    exuberant-ctags \\\n    gawk \\\n    gettext \\\n    graphviz \\\n    jq \\\n    less \\\n    libhdf5-serial-dev \\\n    libncurses5-dev \\\n    libomp-dev \\\n    libtool \\\n    libtool-bin \\\n    luajit \\\n    mariadb-client \\\n    mtr \\\n    ncurses-term \\\n    nodejs \\\n    npm \\\n    openssh-client \\\n    pass \\\n    perl \\\n    pkg-config \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    ruby-dev \\\n    sass \\\n    sed \\\n    tar \\\n    tig \\\n    tmux \\\n    xclip \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && git clone --depth 1 https://github.com/neovim/neovim \\\n    && cd neovim \\\n    && rm -rf build \\\n    && make CMAKE_EXTRA_FLAGS=\"-DCMAKE_INSTALL_PREFIX:PATH=/usr\" CMAKE_BUILD_TYPE=Release \\\n    && make install \\\n    && cd /tmp && rm -rf /tmp/neovim \\\n    && pip3 install --no-cache-dir --upgrade pip neovim ranger-fm thefuck httpie python-language-server vim-vint grpcio-tools \\\n    && gem install neovim -N \\\n    && git clone --depth 1 https://github.com/soimort/translate-shell \\\n    && cd /tmp/translate-shell/ \\\n    && make TARGET=zsh -j -C /tmp/translate-shell \\\n    && make install -C /tmp/translate-shell \\\n    && cd /tmp \\\n    && rm -rf /tmp/translate-shell/ \\\n    && apt -y autoremove \\\n    && chown -R ${USER}:users ${HOME} \\\n    && chown -R ${USER}:users ${HOME}/.* \\\n    && chmod -R 755 ${HOME} \\\n    && chmod -R 755 ${HOME}/.* \\\n    && npm install -g n && npm cache clean --force;\n\nRUN n latest \\\n    && npm config set user ${USER} \\\n    && bash -c \"chown -R ${USER} $(npm config get prefix)/{lib/node_modules,bin,share}\" \\\n    && bash -c \"chmod -R 755 $(npm config get prefix)/{lib/node_modules,bin,share}\" \\\n    && npm config set user ${USER} \\\n    && npm install -g \\\n        diagnostic-languageserver \\\n        dockerfile-language-server-nodejs \\\n        bash-language-server \\\n        markdownlint-cli \\\n        neovim \\\n        npm \\\n        prettier \\\n        resume-cli \\\n        terminalizer \\\n        typescript \\\n        typescript-language-server \\\n        yarn \\\n    && bash -c \"chown -R ${USER} $(npm config get prefix)/{lib/node_modules,bin,share}\" \\\n    && bash -c \"chmod -R 755 $(npm config get prefix)/{lib/node_modules,bin,share}\" \\\n    && apt purge -y nodejs npm \\\n    && apt -y autoremove && npm cache clean --force;\n\n\nFROM env-base AS protoc\nWORKDIR /tmp\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && REPO_NAME=\"protobuf\" \\\n    && BIN_NAME=\"protoc\" \\\n    && REPO=\"protocolbuffers/${REPO_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && if [ \"${ARCH}\" = \"amd64\" ] ; then  ARCH=${XARCH} ; fi \\\n    && ZIP_NAME=\"${BIN_NAME}-${VERSION}-${OS}-${ARCH}\" \\\n    && curl -fsSL \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${ZIP_NAME}.zip\" -o \"/tmp/${BIN_NAME}.zip\" \\\n    && unzip -o \"/tmp/${BIN_NAME}.zip\" -d /usr/local \"bin/${BIN_NAME}\" \\\n    && unzip -o \"/tmp/${BIN_NAME}.zip\" -d /usr/local 'include/*' \\\n    && rm -f /tmp/protoc.zip \\\n    && rm -rf /tmp/*\n\nFROM env-base AS ngt\nWORKDIR /tmp\nENV NGT_VERSION 1.14.6\nENV CFLAGS \"-mno-avx512f -mno-avx512dq -mno-avx512cd -mno-avx512bw -mno-avx512vl\"\nENV CXXFLAGS ${CFLAGS}\n# ENV LDFLAGS=\"-L/usr/local/opt/llvm/lib\"\n# ENV CPPFLAGS=\"-I/usr/local/opt/llvm/include\"\nRUN curl -f -LO \"https://github.com/yahoojapan/NGT/archive/v${NGT_VERSION}.tar.gz\" \\\n    && tar zxf \"v${NGT_VERSION}.tar.gz\" -C /tmp \\\n    && cd \"/tmp/NGT-${NGT_VERSION}\" \\\n    && cmake -DNGT_LARGE_DATASET=ON . \\\n    && make -j -C \"/tmp/NGT-${NGT_VERSION}\" \\\n    && make install -C \"/tmp/NGT-${NGT_VERSION}\" \\\n    && cd /tmp \\\n    && rm -rf /tmp/* && rm \"v${NGT_VERSION}.tar.gz\"\n\nFROM env-base AS tensorflow\nWORKDIR /tmp\nENV TENSORFLOW_C_VERSION 2.9.0\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && REPO_NAME=\"tensorflow\" \\\n    && BIN_NAME=\"lib${REPO_NAME}\" \\\n    && REPO=\"${REPO_NAME}/${BIN_NAME}\" \\\n    && if [ \"${ARCH}\" = \"amd64\" ] ; then  ARCH=${XARCH} ; fi \\\n    && URL=\"${GOOGLE}/${REPO}/${BIN_NAME}-cpu-${OS}-${ARCH}-${TENSORFLOW_C_VERSION}.tar.gz\" \\\n    && echo \"${URL}\" \\\n    && curl -fsSLo \"/tmp/${BIN_NAME}.tar.gz\" \"${URL}\" \\\n    && tar -C /usr/local -xzf \"/tmp/${BIN_NAME}.tar.gz\" \\\n    && rm -rf /tmp/* && rm \"/tmp/${BIN_NAME}.tar.gz\"\n\nFROM env-base AS env\n\nLABEL maintainer=\"kpango <kpango@vdaas.org>\"\n\nCOPY --from=ngt ${BIN_PATH}/ng* ${BIN_PATH}/\nCOPY --from=ngt ${LOCAL}/include/NGT ${LOCAL}/include/NGT\nCOPY --from=ngt ${LOCAL}/lib/libngt.* ${LOCAL}/lib/\nCOPY --from=tensorflow ${LOCAL}/include/tensorflow ${LOCAL}/include/tensorflow\nCOPY --from=tensorflow ${LOCAL}/lib/libtensorflow* ${LOCAL}/lib/\nCOPY --from=protoc ${BIN_PATH}/protoc ${BIN_PATH}/protoc\nCOPY --from=protoc ${LOCAL}/include/google/protobuf ${LOCAL}/include/google/protobuf\n\nRUN ldconfig \\\n    && rm -rf /tmp/* /var/cache\n\nWORKDIR ${HOME}\n"
}