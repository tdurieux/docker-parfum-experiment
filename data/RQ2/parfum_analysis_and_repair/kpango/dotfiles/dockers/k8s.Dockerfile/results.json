{
  "startTime": 1674217829508,
  "endTime": 1674217834925,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 18,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 217,
        "lineEnd": 217,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 225,
        "lineEnd": 225,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 245,
        "lineEnd": 245,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 256,
        "lineEnd": 256,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 267,
        "lineEnd": 267,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 279,
        "lineEnd": 279,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 291,
        "lineEnd": 291,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 301,
        "lineEnd": 301,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 312,
        "lineEnd": 312,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 322,
        "lineEnd": 322,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 352,
        "lineEnd": 352,
        "columnStart": 18,
        "columnEnd": 71
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 193,
        "lineEnd": 193,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 242,
        "lineEnd": 242,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 253,
        "lineEnd": 253,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 264,
        "lineEnd": 264,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 276,
        "lineEnd": 276,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 288,
        "lineEnd": 288,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 298,
        "lineEnd": 298,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 309,
        "lineEnd": 309,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 320,
        "lineEnd": 320,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 327,
        "lineEnd": 327,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 334,
        "lineEnd": 334,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 341,
        "lineEnd": 341,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 349,
        "lineEnd": 349,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 364,
        "lineEnd": 364,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 379,
        "lineEnd": 379,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 389,
        "lineEnd": 389,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 399,
        "lineEnd": 399,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 409,
        "lineEnd": 409,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 419,
        "lineEnd": 419,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 429,
        "lineEnd": 429,
        "columnStart": 18,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 210,
        "lineEnd": 210,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 228,
        "lineEnd": 228,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 248,
        "lineEnd": 248,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 259,
        "lineEnd": 259,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 271,
        "lineEnd": 271,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 282,
        "lineEnd": 282,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 294,
        "lineEnd": 294,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 304,
        "lineEnd": 304,
        "columnStart": 7,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM --platform=$BUILDPLATFORM kpango/dev-base:latest AS kube-base\n\nARG TARGETOS\nARG TARGETARCH\n\nENV OS=${TARGETOS}\nENV ARCH=${TARGETARCH}\nENV XARCH x86_64\nENV GITHUBCOM github.com\nENV GITHUB https://${GITHUBCOM}\nENV API_GITHUB https://api.github.com/repos\nENV RAWGITHUB https://raw.githubusercontent.com\nENV GOOGLE https://storage.googleapis.com\nENV RELEASE_DL releases/download\nENV RELEASE_LATEST releases/latest\nENV LOCAL /usr/local\nENV BIN_PATH ${LOCAL}/bin\n\nRUN mkdir -p \"${BIN_PATH}\"\n\nFROM kube-base AS kubectl\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectl\" \\\n    && VERSION=\"$( curl -f -s ${GOOGLE}/kubernetes-release/release/stable.txt)\" \\\n    && URL=\"${GOOGLE}/kubernetes-release/release/${VERSION}/bin/${OS}/${ARCH}/${BIN_NAME}\" \\\n    && echo ${URL} \\\n    && curl -fsSLo \"${BIN_PATH}/${BIN_NAME}\" \"${URL}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" \\\n    && \"${BIN_PATH}/${BIN_NAME}\" version --client && rm -rf -d\n\nFROM kube-base AS helm\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && curl -f \"${RAWGITHUB}/helm/helm/master/scripts/get-helm-3\" | bash \\\n    && BIN_NAME=\"helm\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS kubefwd\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubefwd\" \\\n    && REPO=\"txn2/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && if [ \"${ARCH}\" = \"amd64\" ] ; then  ARCH=${XARCH} ; fi \\\n    && TAR_NAME=\"${BIN_NAME}_$(echo ${OS} | sed 's/.*/\\u&/')_${ARCH}\" \\\n    && URL=\"${GITHUB}/${REPO}/${RELEASE_DL}/${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && echo ${URL} \\\n    && curl -fsSLO \"${URL}\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kubectx\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectx\" \\\n    && REPO=\"ahmetb/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && if [ \"${ARCH}\" = \"amd64\" ] ; then  ARCH=${XARCH} ; fi \\\n    && TAR_NAME=\"${BIN_NAME}_v${VERSION}_${OS}_${ARCH}\" \\\n    && URL=\"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && echo ${URL} \\\n    && curl -fsSLO \"${URL}\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kubens\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectx\" \\\n    && REPO=\"ahmetb/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && BIN_NAME=\"kubens\" \\\n    && if [ \"${ARCH}\" = \"amd64\" ] ; then  ARCH=${XARCH} ; fi \\\n    && TAR_NAME=\"${BIN_NAME}_v${VERSION}_${OS}_${ARCH}\" \\\n    && URL=\"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && echo ${URL} \\\n    && curl -fsSLO \"${URL}\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS krew\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"krew\" \\\n    && REPO=\"kubernetes-sigs/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}-${OS}_${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${BIN_NAME}.yaml\" \\\n    && \"${PWD}/${TAR_NAME}\" install --manifest=\"${BIN_NAME}.yaml\" --archive=\"${TAR_NAME}.tar.gz\" \\\n    && BIN_NAME=\"kubectl-krew\" \\\n    && \"/root/.krew/bin/${BIN_NAME}\" update \\\n    && mv \"/root/.krew/bin/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS check-ownerreferences\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectl-check-ownerreferences\" \\\n    && REPO=\"kubernetes-sigs/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}-${OS}-${ARCH}\" \\\n    && URL=\"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && echo ${URL} \\\n    && curl -fsSLO \"${URL}\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kubebox\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubebox\" \\\n    && REPO=\"astefanutti/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && curl -fsSLo \"${BIN_PATH}/${BIN_NAME}\" \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${BIN_NAME}-${OS}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS stern\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"stern\" \\\n    && REPO=\"${BIN_NAME}/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}_${VERSION}_${OS}_${ARCH}\" \\\n    && URL=\"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && curl -fsSLO \"${URL}\" \\\n    && echo ${URL} \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kubebuilder\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubebuilder\" \\\n    && REPO=\"kubernetes-sigs/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TARGET_NAME=\"${BIN_NAME}_${OS}_${ARCH}\" \\\n    && URL=\"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TARGET_NAME}\" \\\n    && echo ${URL} \\\n    && curl -fsSLO \"${URL}\" \\\n    && mv \"${TARGET_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS kubectl-fzf\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectl-fzf\" \\\n    && REPO=\"bonnefoa/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}_${OS}_${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && BIN_NAME=\"cache_builder\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS k9s\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"k9s\" \\\n    && REPO=\"derailed/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && if [ \"${ARCH}\" = \"amd64\" ] ; then  ARCH=${XARCH} ; fi \\\n    && TAR_NAME=\"${BIN_NAME}_$(echo ${OS} | sed 's/.*/\\u&/')_${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kube-profefe-base\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kube-profefe\" \\\n    && REPO=\"profefe/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && if [ \"${ARCH}\" = \"amd64\" ] ; then  ARCH=${XARCH} ; fi \\\n    && TAR_NAME=\"${BIN_NAME}_v${VERSION}_$(echo ${OS} | sed 's/.*/\\u&/')_${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && BIN_NAME=\"kprofefe\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && BIN_NAME=\"kubectl-profefe\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-profefe-base AS kprofefe\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kprofefe\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-profefe-base AS kubectl-profefe\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectl-profefe\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS conftest\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"conftest\" \\\n    && REPO=\"open-policy-agent/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}_${VERSION}_$(echo ${OS} | sed 's/.*/\\u&/')_${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kubectl-tree\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectl-tree\" \\\n    && REPO=\"ahmetb/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}_v${VERSION}_${OS}_${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS linkerd\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"linkerd\" \\\n    && curl -f -sL https://run.linkerd.io/install | sh \\\n    && mv ${HOME}/.linkerd2/bin/${BIN_NAME}-* \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS octant\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"octant\" \\\n    && REPO=\"vmware-tanzu/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}_${VERSION}_$(echo ${OS} | sed 's/.*/\\u&/')-64bit\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${TAR_NAME}/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS skaffold\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"skaffold\" \\\n    && REPO=\"GoogleContainerTools/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && curl -fsSLo \"${BIN_PATH}/${BIN_NAME}\" \"${GOOGLE}/${BIN_NAME}/releases/v${VERSION}/${BIN_NAME}-${OS}-${ARCH}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS kubeval\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubeval\" \\\n    && REPO=\"instrumenta/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}-${OS}-${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kube-linter\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kube-linter\" \\\n    && REPO=\"stackrox/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}-${OS}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS helm-docs\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"helm-docs\" \\\n    && REPO=\"norwoodj/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && if [ \"${ARCH}\" = \"amd64\" ] ; then  ARCH=${XARCH} ; fi \\\n    && TAR_NAME=\"${BIN_NAME}_${VERSION}_$(echo ${OS} | sed 's/.*/\\u&/')_${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kubectl-gadget\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"inspektor-gadget\" \\\n    && REPO=\"kinvolk/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"kubectl-gadget-${OS}-${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && BIN_NAME=\"kubectl-gadget\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kdash\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kdash\" \\\n    && REPO=\"${BIN_NAME}-rs/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}-${OS}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kubectl-rolesum\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectl-rolesum\" \\\n    && REPO=\"Ladicle/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && TAR_NAME=\"${BIN_NAME}_${OS}-${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${TAR_NAME}.tar.gz\" \\\n    && tar -zxvf \"${TAR_NAME}.tar.gz\" \\\n    && mv \"${TAR_NAME}/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d && rm \"${TAR_NAME}.tar.gz\"\n\nFROM kube-base AS kubeletctl\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubeletctl\" \\\n    && REPO=\"cyberark/${BIN_NAME}\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && FILE_NAME=\"${BIN_NAME}_${OS}_${ARCH}\" \\\n    && curl -fsSLO \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${FILE_NAME}\" \\\n    && mv \"${FILE_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS istio\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"istioctl\" \\\n    && curl -f -L https://istio.io/downloadIstio | sh - \\\n    && mv \"$(ls | grep istio)/bin/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS kpt\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kpt\" \\\n    && curl -fsSLo \"${BIN_PATH}/${BIN_NAME}\" \"${GOOGLE}/${BIN_NAME}-dev/latest/${OS}_${ARCH}/${BIN_NAME}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS k3d\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"k3d\" \\\n    && REPO=\"rancher/${BIN_NAME}\" \\\n    && wget -q -O - \"${RAWGITHUB}/${REPO}/main/install.sh\" | bash \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS kustomize\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kustomize\" \\\n    && REPO=\"kubernetes-sigs/${BIN_NAME}\" \\\n    && wget -q -O - \"${RAWGITHUB}/${REPO}/master/hack/install_${BIN_NAME}.sh\" | bash \\\n    && mv \"${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-base AS wasme\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && NAME=\"wasme\" \\\n    && REPO=\"solo-io/wasm\" \\\n    && VERSION=\"$( curl -f --silent ${API_GITHUB}/${REPO}/${RELEASE_LATEST} | grep -Po '\"tag_name\": \"\\K.*?(?=\")' | sed 's/v//g')\" \\\n    && BIN_NAME=\"${NAME}-${OS}-${ARCH}\" \\\n    && curl -fsSLo \"${BIN_PATH}/${NAME}\" \"${GITHUB}/${REPO}/${RELEASE_DL}/v${VERSION}/${BIN_NAME}\" \\\n    && chmod a+x \"${BIN_PATH}/${NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${NAME}\" && rm -rf -d\n\nFROM kube-base AS telepresence\nRUN curl -fL https://app.getambassador.io/download/tel2/linux/amd64/latest/telepresence -o \"${BIN_PATH}/telepresence\" \\\n    && chmod a+x \"${BIN_PATH}/telepresence\" \\\n    && upx -9 \"${BIN_PATH}/telepresence\"\n\nFROM kube-base AS pixie\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"pixie\" \\\n    && curl -fsSLo \"${BIN_PATH}/${BIN_NAME}\" \"${GOOGLE}/${BIN_NAME}-prod-artifacts/cli/latest/cli_${OS}_${ARCH}\" \\\n    && chmod a+x \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kpango/go:latest AS golang\nFROM kube-base AS kube-golang-base\nCOPY --from=golang /opt/go /usr/local/go\nCOPY --from=golang /go /go\nENV GOPATH /go\nENV GOROOT /usr/local/go\nENV PATH $PATH:$GOPATH/bin:$GOROOT/bin\n\nFROM kube-golang-base AS helmfile\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"helmfile\" \\\n    && REPO=\"roboll/${BIN_NAME}\" \\\n    &&GO111MODULE=on go install  \\\n      --ldflags \"-s -w\" --trimpath \\\n      \"${GITHUBCOM}/${REPO}@latest\" \\\n    && mv \"${GOPATH}/bin/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-golang-base AS kubecolor\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubecolor\" \\\n    && REPO=\"dty1er/${BIN_NAME}\" \\\n    &&GO111MODULE=on go install  \\\n      --ldflags \"-s -w\" --trimpath \\\n      \"${GITHUBCOM}/${REPO}/cmd/${BIN_NAME}@latest\" \\\n    && mv \"${GOPATH}/bin/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-golang-base AS popeye\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"popeye\" \\\n    && REPO=\"derailed/${BIN_NAME}\" \\\n    &&GO111MODULE=on go install  \\\n      --ldflags \"-s -w\" --trimpath \\\n      \"${GITHUBCOM}/${REPO}@latest\" \\\n    && mv \"${GOPATH}/bin/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-golang-base AS kubectl-trace\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kubectl-trace\" \\\n    && REPO=\"iovisor/${BIN_NAME}\" \\\n    &&GO111MODULE=on go install  \\\n      --ldflags \"-s -w\" --trimpath \\\n      \"${GITHUBCOM}/${REPO}/cmd/${BIN_NAME}@master\" \\\n    && mv \"${GOPATH}/bin/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-golang-base AS k8sviz\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"k8sviz\" \\\n    && REPO=\"mkimuram/${BIN_NAME}\" \\\n    &&GO111MODULE=on go install  \\\n      --ldflags \"-s -w\" --trimpath \\\n      \"${GITHUBCOM}/${REPO}/cmd/${BIN_NAME}@master\" \\\n    && mv \"${GOPATH}/bin/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM kube-golang-base AS kind\nRUN set -x; cd \"$(mktemp -d)\" \\\n    && BIN_NAME=\"kind\" \\\n    && REPO=\"sigs.k8s.io/${BIN_NAME}\" \\\n    &&GO111MODULE=on go install  \\\n      --ldflags \"-s -w\" --trimpath \\\n      \"${REPO}/cmd/${BIN_NAME}@master\" \\\n    && mv \"${GOPATH}/bin/${BIN_NAME}\" \"${BIN_PATH}/${BIN_NAME}\" \\\n    && upx -9 \"${BIN_PATH}/${BIN_NAME}\" && rm -rf -d\n\nFROM scratch AS kube\nLABEL maintainer=\"kpango <kpango@vdaas.org>\"\n\nENV BIN_PATH /usr/local/bin\nENV LIB_PATH /usr/local/libexec\nENV K8S_PATH /usr/k8s/bin\nENV K8S_LIB_PATH /usr/k8s/lib\n\nCOPY --from=check-ownerreferences ${BIN_PATH}/kubectl-check-ownerreferences ${K8S_PATH}/kubectl-check-ownerreferences\nCOPY --from=helm ${BIN_PATH}/helm ${K8S_PATH}/helm\nCOPY --from=helm-docs ${BIN_PATH}/helm-docs ${K8S_PATH}/helm-docs\nCOPY --from=helmfile ${BIN_PATH}/helmfile ${K8S_PATH}/helmfile\nCOPY --from=istio ${BIN_PATH}/istioctl ${K8S_PATH}/istioctl\nCOPY --from=k3d ${BIN_PATH}/k3d ${K8S_PATH}/k3d\nCOPY --from=k8sviz ${BIN_PATH}/k8sviz ${K8S_PATH}/k8sviz\nCOPY --from=k9s ${BIN_PATH}/k9s ${K8S_PATH}/k9s\nCOPY --from=kind ${BIN_PATH}/kind ${K8S_PATH}/kind\nCOPY --from=kprofefe ${BIN_PATH}/kprofefe ${K8S_PATH}/kprofefe\nCOPY --from=kpt ${BIN_PATH}/kpt ${K8S_PATH}/kpt\nCOPY --from=kdash ${BIN_PATH}/kdash ${K8S_PATH}/kdash\nCOPY --from=krew ${BIN_PATH}/kubectl-krew ${K8S_PATH}/kubectl-krew\nCOPY --from=krew /root/.krew/index $/root/.krew/index\nCOPY --from=kube-linter ${BIN_PATH}/kube-linter ${K8S_PATH}/kube-linter\nCOPY --from=kube-linter ${BIN_PATH}/kube-linter ${K8S_PATH}/kubectl-lint\nCOPY --from=kubebox ${BIN_PATH}/kubebox ${K8S_PATH}/kubebox\nCOPY --from=kubebuilder ${BIN_PATH}/kubebuilder ${K8S_PATH}/kubebuilder\nCOPY --from=kubecolor ${BIN_PATH}/kubecolor ${K8S_PATH}/kubecolor\nCOPY --from=kubectl ${BIN_PATH}/kubectl ${K8S_PATH}/kubectl\nCOPY --from=kubectl-fzf ${BIN_PATH}/cache_builder ${K8S_PATH}/cache_builder\nCOPY --from=kubectl-gadget ${BIN_PATH}/kubectl-gadget ${K8S_PATH}/kubectl-gadget\nCOPY --from=kubectl-profefe ${BIN_PATH}/kubectl-profefe ${K8S_PATH}/kubectl-profefe\nCOPY --from=kubectl-rolesum ${BIN_PATH}/kubectl-rolesum ${K8S_PATH}/kubectl-rolesum\nCOPY --from=kubectl-trace ${BIN_PATH}/kubectl-trace ${K8S_PATH}/kubectl-trace\nCOPY --from=kubectl-tree ${BIN_PATH}/kubectl-tree ${K8S_PATH}/kubectl-tree\nCOPY --from=kubectx ${BIN_PATH}/kubectx ${K8S_PATH}/kubectx\nCOPY --from=kubefwd ${BIN_PATH}/kubefwd ${K8S_PATH}/kubectl-fwd\nCOPY --from=kubefwd ${BIN_PATH}/kubefwd ${K8S_PATH}/kubefwd\nCOPY --from=kubeletctl ${BIN_PATH}/kubeletctl ${K8S_PATH}/kubeletctl\nCOPY --from=kubens ${BIN_PATH}/kubens ${K8S_PATH}/kubens\nCOPY --from=kubeval ${BIN_PATH}/kubeval ${K8S_PATH}/kubeval\nCOPY --from=kustomize ${BIN_PATH}/kustomize ${K8S_PATH}/kustomize\nCOPY --from=linkerd ${BIN_PATH}/linkerd ${K8S_PATH}/linkerd\nCOPY --from=octant ${BIN_PATH}/octant ${K8S_PATH}/octant\nCOPY --from=pixie ${BIN_PATH}/pixie ${K8S_PATH}/pixie\nCOPY --from=popeye ${BIN_PATH}/popeye ${K8S_PATH}/popeye\nCOPY --from=skaffold ${BIN_PATH}/skaffold ${K8S_PATH}/skaffold\nCOPY --from=stern ${BIN_PATH}/stern ${K8S_PATH}/stern\nCOPY --from=telepresence ${BIN_PATH}/telepresence ${K8S_PATH}/telepresence\nCOPY --from=wasme ${BIN_PATH}/wasme ${K8S_PATH}/wasme\n"
}