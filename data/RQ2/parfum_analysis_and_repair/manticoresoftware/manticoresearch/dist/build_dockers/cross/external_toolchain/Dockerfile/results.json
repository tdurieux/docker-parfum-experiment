{
  "startTime": 1674253821060,
  "endTime": 1674253821791,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 21,
        "columnStart": 3,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\nENV DEBIAN_FRONTEND noninteractive\n\nARG llvm=13\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    make \\\n    ninja-build \\\n    git \\\n    bison \\\n    flex \\\n    wget \\\n    software-properties-common \\\n    rpm \\\n    elfutils \\\n    nsis \\\n    zip \\\n&& wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n&& add-apt-repository \"deb http://apt.llvm.org/focal/ llvm-toolchain-focal-$llvm main\" \\\n&& apt-get install --no-install-recommends -y \\\n    clang-$llvm \\\n    clang-tools-$llvm \\\n    lld-$llvm \\\n&& rm -rf /var/lib/apt/lists/* \\\n&& ln -s /usr/lib/llvm-$llvm/bin/llvm-objcopy /usr/local/bin/objcopy \\\n&& mkdir /zipdll && cd /zipdll \\\n&& wget https://nsis.sourceforge.io/mediawiki/images/d/d9/ZipDLL.zip \\\n&& unzip ZipDLL.zip \\\n&& mv ZipDLL.dll /usr/share/nsis/Plugins/x86-ansi/ \\\n&& rm -rf /zipdll\n\n# notice symlink of objcopy. That is need as system objcopy can't deal with alien arch\n\n# 2-nd layer, cmake\nARG cmakever=\"3.23.2\"\nRUN cd / \\\n&& wget https://github.com/Kitware/CMake/releases/download/v${cmakever}/cmake-${cmakever}-linux-$(uname -m).tar.gz \\\n&& tar -zxf cmake-${cmakever}-linux-$(uname -m).tar.gz \\\n&& rm cmake-${cmakever}-linux-$(uname -m).tar.gz \\\n&& export arch=$(uname -m)\nENV PATH $PATH:/cmake-${cmakever}-linux-x86_64/bin:/cmake-${cmakever}-linux-aarch64/bin\n\n# 3-rd layer. Everything to build, except actual sysroot archives\nRUN git config --global --add safe.directory '*'\nENV CMAKE_GENERATOR=Ninja\nENV CMAKE_TOOLCHAIN_FILE=/sysroot/root/toolchain.cmake\nADD entry_point.sh /sysroot/root/\nENTRYPOINT [\"bash\", \"/sysroot/root/entry_point.sh\"]\nCMD []\n\n## on amd:\n# docker build -t external_toolchain:clang13_cmake3232 -t registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232amd .\n# docker push registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232amd\n\n# on arm\n# docker build -t external_toolchain:clang13_cmake3232 -t registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232arm .\n# docker push registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232arm\n\n# on any (amd or arm)\n# docker rmi registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232\n# docker manifest rm registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232\n# docker manifest create registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232 --amend registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232amd --amend registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232arm\n# docker manifest push registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232\n"
}