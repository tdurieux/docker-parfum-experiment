{
  "startTime": 1674254975098,
  "endTime": 1674254976409,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 72,
        "columnEnd": 92
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 19,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 113,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The JupyterLab dependency installation commands in this Dockerfile are taken from\n# the official upstream repos and modified as needed to work with CentOS and Condor.\n# To see the original Dockerfiles and scripts, please refer to the official JupyterLab\n# repos at https://hub.docker.com/u/jupyter/\n\nFROM centos:7\nLABEL maintainer=\"SLATE Team\"\nARG NB_USER=\"jovyan\"\nARG NB_UID=\"1000\"\nARG NB_GID=\"100\"\n\n# Fix DL4006\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nUSER root\n\nRUN yum -y install epel-release && rm -rf /var/cache/yum\nRUN yum -y update\nRUN yum groupinstall \"Development Tools\" -y\nRUN yum install -y \\\n    wget \\\n    bzip2 \\\n    ca-certificates \\\n    sudo \\\n    gcc \\\n    python3-devel && rm -rf /var/cache/yum\nRUN yum clean all\n\n# Configure environment\nENV CONDA_DIR=/opt/conda \\\n    SHELL=/bin/bash \\\n    NB_USER=$NB_USER \\\n    NB_UID=$NB_UID \\\n    NB_GID=$NB_GID \\\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US.UTF-8\nENV PATH=$CONDA_DIR/bin:$PATH \\\n    HOME=/home/$NB_USER\n\n# Copy a script that we will use to correct permissions after running certain commands\nCOPY fix-permissions /usr/local/bin/fix-permissions\nRUN chmod a+rx /usr/local/bin/fix-permissions\n\n# Create NB_USER wtih name jovyan user with UID=1000 and in the 'users' group\n# and make sure these dirs are writable by the `users` group.\nRUN echo \"auth requisite pam_deny.so\" >> /etc/pam.d/su && \\\n    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \\\n    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \\\n    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    mkdir -p $CONDA_DIR && \\\n    chown $NB_USER:$NB_GID $CONDA_DIR && \\\n    chmod g+w /etc/passwd && \\\n    fix-permissions $HOME && \\\n    fix-permissions $CONDA_DIR\n\nUSER $NB_UID\nWORKDIR $HOME\nARG PYTHON_VERSION=default\n\n# Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work && \\\n    fix-permissions /home/$NB_USER\n\n# Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=4.8.2 \\\n    MINICONDA_MD5=87e77f097f6ebb5127c77662dfc3165e \\\n    CONDA_VERSION=4.8.2\n\nWORKDIR /tmp\nRUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    echo \"${MINICONDA_MD5} *Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - && \\\n    /bin/bash Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \\\n    rm Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    echo \"conda ${CONDA_VERSION}\" >> $CONDA_DIR/conda-meta/pinned && \\\n    conda config --system --prepend channels conda-forge && \\\n    conda config --system --set auto_update_conda false && \\\n    conda config --system --set show_channel_urls true && \\\n    conda config --system --set channel_priority strict && \\\n    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \\\n    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \\\n    conda install --quiet --yes conda && \\\n    conda install --quiet --yes pip && \\\n    conda update --all --quiet --yes && \\\n    conda clean --all -f -y && \\\n    rm -rf /home/$NB_USER/.cache/yarn && \\\n    fix-permissions $CONDA_DIR && \\\n    fix-permissions /home/$NB_USER\n\nRUN conda install --quiet --yes \\\n    'notebook=6.0.3' \\\n    'jupyterhub=1.1.0' \\\n    'jupyterlab=2.1.3' && \\\n    conda clean --all -f -y && \\\n    npm cache clean --force && \\\n    jupyter notebook --generate-config && \\\n    rm -rf $CONDA_DIR/share/jupyter/lab/staging && \\\n    rm -rf /home/$NB_USER/.cache/yarn && \\\n    fix-permissions $CONDA_DIR && \\\n    fix-permissions /home/$NB_USER\n\nEXPOSE 8888\n\nCOPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\n\n# Fix permissions on /etc/jupyter as root\nUSER root\nRUN fix-permissions /etc/jupyter/\n\nWORKDIR $HOME\n\n# Install all OS dependencies for fully functional notebook server\nRUN yum install -y \\\n    emacs-nox git \\\n    inkscape \\\n    nano \\\n    texlive-xetex \\\n    unzip \\\n    fio \\\n    && yum clean all && rm -rf /var/cache/yum\n\n# ffmpeg for matplotlib anim & dvipng for latex labels\nRUN yum update -y && \\\n    yum -y install python-matplotlib && yum clean all && rm -rf /var/cache/yum\n\n\nUSER $NB_UID\n\n# Install Python 3 packages\nRUN conda install --quiet --yes \\\n    'beautifulsoup4=4.9.*' \\\n    'conda-forge::blas=*=openblas' \\\n    'bokeh=2.0.*' \\\n    'bottleneck=1.3.*' \\\n    'cloudpickle=1.4.*' \\\n    'cython=0.29.*' \\\n    'dask=2.15.*' \\\n    'dill=0.3.*' \\\n    'h5py=2.10.*' \\\n    'hdf5=1.10.*' \\\n    'ipywidgets=7.5.*' \\\n    'ipympl=0.5.*'\\\n    'matplotlib-base=3.2.*' \\\n    # numba update to 0.49 fails resolving deps.\n    'numba=0.48.*' \\\n    'numexpr=2.7.*' \\\n    'pandas=1.0.*' \\\n    'patsy=0.5.*' \\\n    'protobuf=3.11.*' \\\n    'pytables=3.6.*' \\\n    'scikit-image=0.16.*' \\\n    'scikit-learn=0.22.*' \\\n    'scipy=1.4.*' \\\n    'seaborn=0.10.*' \\\n    'sqlalchemy=1.3.*' \\\n    'statsmodels=0.11.*' \\\n    'sympy=1.5.*' \\\n    'vincent=0.4.*' \\\n    'widgetsnbextension=3.5.*'\\\n    'xlrd=1.2.*' \\\n    && \\\n    conda clean --all -f -y && \\\n    # Activate ipywidgets extension in the environment that runs the notebook server\n    jupyter nbextension enable --py widgetsnbextension --sys-prefix && \\\n    # Also activate ipywidgets extension for JupyterLab\n    # Check this URL for most recent compatibilities\n    # https://github.com/jupyter-widgets/ipywidgets/tree/master/packages/jupyterlab-manager\n    jupyter labextension install @jupyter-widgets/jupyterlab-manager@^2.0.0 --no-build && \\\n    jupyter labextension install @bokeh/jupyter_bokeh@^2.0.0 --no-build && \\\n    jupyter labextension install jupyter-matplotlib@^0.7.2 --no-build && \\\n    jupyter lab build -y && \\\n    jupyter lab clean -y\nRUN npm cache clean --force && \\\n    rm -rf \"/home/${NB_USER}/.cache/yarn\" && \\\n    rm -rf \"/home/${NB_USER}/.node-gyp\"\n\n\nUSER $NB_UID\n# Install facets which does not have a pip or conda package at the moment\nWORKDIR /tmp\nRUN git clone https://github.com/PAIR-code/facets.git && \\\n    jupyter nbextension install facets/facets-dist/ --sys-prefix && \\\n    rm -rf /tmp/facets && \\\n    ls -al \"/home/${NB_USER}\"\n\nUSER $NB_UID\n# Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/${NB_USER}/.cache/\"\n\nRUN MPLBACKEND=Agg python -c \"import matplotlib.pyplot\" && \\\n     ls -al \"/home/${NB_USER}\"\nUSER root\nRUN  fix-permissions \"${CONDA_DIR}\" && \\\n     fix-permissions \"/home/${NB_USER}\"\n\n\nRUN cd /root && \\\n    wget https://research.cs.wisc.edu/htcondor/yum/RPM-GPG-KEY-HTCondor && \\\n    rpm --import RPM-GPG-KEY-HTCondor\nRUN cd /etc/yum.repos.d && \\\n    #wget https://research.cs.wisc.edu/htcondor/yum/repo.d/htcondor-stable-rhel7.repo\n    wget https://research.cs.wisc.edu/htcondor/yum/repo.d/htcondor-development-rhel7.repo\n\nWORKDIR $HOME\nRUN yum install condor supervisor openssh-server -y && yum clean all && pip install --no-cache-dir htcondor && \\\n    mkdir -p /var/log/supervisor && \\\n    mkdir -p /var/run/sshd /var/log/supervisor && \\\n    rm -rf /tmp/* && rm -rf /var/cache/yum\n\nADD container-files /\n#RUN mkdir -p /var/run/sshd /var/log/supervisor\n# Make sure we have some needed dirs\nRUN mkdir -p /etc/condor/passwords.d && \\\n    mkdir -p /etc/condor/tokens.d && \\\n    chown condor: /etc/condor/passwords.d && \\\n    chown condor: /etc/condor/tokens.d  && \\\n    chmod -R 755 /etc/condor && \\ \n    echo 'export PS1=\"\\[\\033[0;32m\\]\\u@\\H:\\[\\033[0;32m\\]\\w\\$\\[\\033[00m\\] \"' >> \"/home/${NB_USER}/.bash_profile\" && \\\n    chmod 755 /usr/local/sbin/supervisord_startup.sh\n\nCMD [\"/usr/local/sbin/supervisord_startup.sh\"]\n\n"
}