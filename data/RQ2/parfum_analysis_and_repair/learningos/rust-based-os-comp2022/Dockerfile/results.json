{
  "startTime": 1674247923106,
  "endTime": 1674247924428,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedDockerfile": "# This Dockerfile is adapted from https://github.com/LearningOS/rCore-Tutorial-v3/blob/main/Dockerfile\n# with the following major updates:\n# - ubuntu 18.04 -> 20.04\n# - qemu 5.0.0 -> 7.0.0\n# - Extensive comments linking to relevant documentation\nFROM ubuntu:20.04\n\nARG QEMU_VERSION=7.0.0\nARG HOME=/root\n\n# 0. Install general tools\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        curl \\\n        git \\\n        python3 \\\n        wget && rm -rf /var/lib/apt/lists/*;\n\n# 1. Set up QEMU RISC-V\n# - https://learningos.github.io/rust-based-os-comp2022/0setup-devel-env.html#qemu\n# - https://www.qemu.org/download/\n# - https://wiki.qemu.org/Documentation/Platforms/RISCV\n# - https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html\n\n# 1.1. Download source\nWORKDIR ${HOME}\nRUN wget https://download.qemu.org/qemu-${QEMU_VERSION}.tar.xz && \\\n    tar xvJf qemu-${QEMU_VERSION}.tar.xz && rm qemu-${QEMU_VERSION}.tar.xz\n\n# 1.2. Install dependencies\n# - https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html#prerequisites\nRUN apt-get install --no-install-recommends -y \\\n        autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \\\n        gawk build-essential bison flex texinfo gperf libtool patchutils bc \\\n        zlib1g-dev libexpat-dev git \\\n        ninja-build pkg-config libglib2.0-dev libpixman-1-dev && rm -rf /var/lib/apt/lists/*;\n\n# 1.3. Build and install from source\nWORKDIR ${HOME}/qemu-${QEMU_VERSION}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --target-list=riscv64-softmmu,riscv64-linux-user && \\\n    make -j$(nproc) && \\\n    make install\n\n# 1.4. Clean up\nWORKDIR ${HOME}\nRUN rm -rf qemu-${QEMU_VERSION} qemu-${QEMU_VERSION}.tar.xz\n\n# 1.5. Sanity checking\nRUN qemu-system-riscv64 --version && \\\n    qemu-riscv64 --version\n\n# 2. Set up Rust\n# - https://learningos.github.io/rust-based-os-comp2022/0setup-devel-env.html#qemu\n# - https://www.rust-lang.org/tools/install\n# - https://github.com/rust-lang/docker-rust/blob/master/Dockerfile-debian.template\n\n# 2.1. Install\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH \\\n    RUST_VERSION=nightly\nRUN set -eux; \\\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION; \\\n    rm rustup-init; \\\n    chmod -R a+w $RUSTUP_HOME $CARGO_HOME;\n\n# 2.2. Sanity checking\nRUN rustup --version && \\\n    cargo --version && \\\n    rustc --version\n\n# 3. Build env for labs\n# See os1/Makefile `env:` for example.\n# This avoids having to wait for these steps each time using a new container.\nRUN rustup target add riscv64gc-unknown-none-elf && \\\n    cargo install cargo-binutils --vers ~0.2 && \\\n    rustup component add rust-src && \\\n    rustup component add llvm-tools-preview\n\n# Ready to go\nWORKDIR ${HOME}\n"
}