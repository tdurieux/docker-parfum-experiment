diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/learningos/rust-based-os-comp2022/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/learningos/rust-based-os-comp2022/Dockerfile/repaired.Dockerfile
index 32c12fe..e8d7d2c 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/learningos/rust-based-os-comp2022/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/learningos/rust-based-os-comp2022/Dockerfile/repaired.Dockerfile
@@ -1,4 +1,3 @@
-# syntax=docker/dockerfile:1
 # This Dockerfile is adapted from https://github.com/LearningOS/rCore-Tutorial-v3/blob/main/Dockerfile
 # with the following major updates:
 # - ubuntu 18.04 -> 20.04
@@ -12,11 +11,11 @@ ARG HOME=/root
 # 0. Install general tools
 ARG DEBIAN_FRONTEND=noninteractive
 RUN apt-get update && \
-    apt-get install -y \
+    apt-get install --no-install-recommends -y \
         curl \
         git \
         python3 \
-        wget
+        wget && rm -rf /var/lib/apt/lists/*;
 
 # 1. Set up QEMU RISC-V
 # - https://learningos.github.io/rust-based-os-comp2022/0setup-devel-env.html#qemu
@@ -27,19 +26,19 @@ RUN apt-get update && \
 # 1.1. Download source
 WORKDIR ${HOME}
 RUN wget https://download.qemu.org/qemu-${QEMU_VERSION}.tar.xz && \
-    tar xvJf qemu-${QEMU_VERSION}.tar.xz
+    tar xvJf qemu-${QEMU_VERSION}.tar.xz && rm qemu-${QEMU_VERSION}.tar.xz
 
 # 1.2. Install dependencies
 # - https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html#prerequisites
-RUN apt-get install -y \
+RUN apt-get install --no-install-recommends -y \
         autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \
         gawk build-essential bison flex texinfo gperf libtool patchutils bc \
         zlib1g-dev libexpat-dev git \
-        ninja-build pkg-config libglib2.0-dev libpixman-1-dev
+        ninja-build pkg-config libglib2.0-dev libpixman-1-dev && rm -rf /var/lib/apt/lists/*;
 
 # 1.3. Build and install from source
 WORKDIR ${HOME}/qemu-${QEMU_VERSION}
-RUN ./configure --target-list=riscv64-softmmu,riscv64-linux-user && \
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --target-list=riscv64-softmmu,riscv64-linux-user && \
     make -j$(nproc) && \
     make install