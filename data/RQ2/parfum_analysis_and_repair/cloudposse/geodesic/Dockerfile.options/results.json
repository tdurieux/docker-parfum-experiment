{
  "startTime": 1674248697809,
  "endTime": 1674248698488,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 142
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 2,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Banner is what is displayed at startup and on every command line\n# in order to distinguish this image from other similar images\nENV BANNER \"geodesic\"\n\nENV MOTD_URL=http://geodesic.sh/motd\n\n# Shell customization\n# options for `less`. `R` allows ANSI color codes to be displayed while stripping out\n# other control codes that can cause `less` to mess up the screen formatting\nENV LESS=R\n\n# Our older Geodesic configurations relied on `direnv`, which we no longer recommend,\n# preferring YAML configuration files instead.\nENV DIRENV_ENABLED=true\n# When using DIRENV with Terraform, you can enable special prompt support\nENV GEODESIC_TERRAFORM_WORKSPACE_PROMPT_ENABLED=true\nENV GEODESIC_TF_PROMPT_ACTIVE=true\n\n# Our older Geodesic configuration uses multiple Makefiles, like Makefile.tasks\n# and depends on this setting, however this setting is set by default by `direnv`\n# due to rootfs/conf/.envrc, but `direnv` is now disabled by default, too.\n# If you are using (and therefore enable) `direnv`, consider the advantage\n# of using `direnv` to set MAKE_INCLUDES, which is that it will only set\n# it for trusted directories under `/conf` and therefore it will not affect\n# `make` outside of this directory tree.\nENV MAKE_INCLUDES=\"Makefile Makefile.*\"\n\n\n####################################################################################\n# kops support\n# If you are using Cloud Posse's kops reference architecture, you con configure it\n# in your Dockerfile like this (edit as desired)\n\nENV KOPS_CLUSTER_NAME=example.foo.bar\n\nENV KOPS_MANIFEST=/conf/kops/manifest.yaml\nENV KOPS_TEMPLATE=/templates/kops/default.yaml\nENV KOPS_STATE_STORE s3://undefined\nENV KOPS_STATE_STORE_REGION us-east-1\nENV KOPS_FEATURE_FLAGS=+DrainAndValidateRollingUpdate\n\nENV KOPS_BASTION_PUBLIC_NAME=\"bastion\"\n\nENV KUBECONFIG=/dev/shm/kubecfg\nENV KUBECONFIG_TEMPLATE=/templates/kops/kubecfg.yaml\n\nRUN /usr/bin/kops completion bash > /etc/bash_completion.d/kops.sh\n\n# Instance sizes for kops bastion, master nodes, and worker nodes\nENV BASTION_MACHINE_TYPE \"t3.small\"\nENV MASTER_MACHINE_TYPE \"t3.medium\"\nENV NODE_MACHINE_TYPE \"t3.medium\"\n\n# Min/Max number of nodes (aka workers) per region\nENV NODE_MAX_SIZE 2\nENV NODE_MIN_SIZE 2\n\n# end of kops support section\n####################################################################################\n\n#### ALPINE ONLY ####\n# Alpine does not include the very common `glibc` GNU C Standard Library, which\n# causes compatibility problems. Among other things, AWS CLI v2 does not work\n# out of the box with Alpine. The following recipe installs `glibc` , and has to be run\n# before installing other packages, particularly `libc6-compat`, and then,\n# because it conflicts, you have to tweak a bit and then install `libc6-compat`.\n# So put this in Dockerfile.alpine after setting up the package repositories\n# but before installing any packages https://github.com/cloudposse/geodesic/blob/91336bf56fb7ff0d9812e01ceacc40ca59a17cce/os/alpine/Dockerfile.alpine#L81\n# (Not verified)\n\n# Install glibc and glibc-bin and the C.UTF-8 locale\nENV LANG=C.UTF-8\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.33-r0\nRUN apk update && apk add -u curl && \\\n  ALPINE_GLIBC_PACKAGE_VERSION=\"${ALPINE_GLIBC_PACKAGE_VERSION}\" && \\\n  curl -sSLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${ALPINE_GLIBC_PACKAGE_VERSION}/glibc-${ALPINE_GLIBC_PACKAGE_VERSION}.apk &&\n  apk add --allow-untrusted glibc-${ALPINE_GLIBC_PACKAGE_VERSION}.apk && rm glibc-${ALPINE_GLIBC_PACKAGE_VERSION}.apk && \\\n  curl -sSLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${ALPINE_GLIBC_PACKAGE_VERSION}/glibc-bin-${ALPINE_GLIBC_PACKAGE_VERSION}.apk &&\n  apk add --allow-untrusted glibc-bin-${ALPINE_GLIBC_PACKAGE_VERSION}.apk && rm glibc-bin-${ALPINE_GLIBC_PACKAGE_VERSION}.apk && \\\n  curl -sSLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${ALPINE_GLIBC_PACKAGE_VERSION}/glibc-i18n-${ALPINE_GLIBC_PACKAGE_VERSION}.apk &&\n  apk add --allow-untrusted glibc-i18n-${ALPINE_GLIBC_PACKAGE_VERSION}.apk && rm glibc-i18n-${ALPINE_GLIBC_PACKAGE_VERSION}.apk && \\\n  /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true && \\\n  printf \"export LANG=%s\\n\" \"$LANG\" > /etc/profile.d/locale.sh && \\\n  apk del glibc-i18n && \\\n  rm -f /usr/glibc-compat/lib/ld-linux-x86-64.so.2 && \\\n  /usr/glibc-compat/sbin/ldconfig\n\n\n# Remove conflicting link, install libc6-compat, restore link to glibc\nRUN mv /lib64/ld-linux-x86-64.so.2 /lib64/glibc-ld-linux-x86-64.so.2 && \\\n  apk add --no-cache --force-overwrite libc6-compat && \\\n  rm -f /lib64/ld-linux-x86-64.so.2 && \\\n  mv /lib64/glibc-ld-linux-x86-64.so.2 /lib64/ld-linux-x86-64.so.2 && \\\n  /usr/glibc-compat/sbin/ldconfig\n\n\n# Now you can install packages\n# https://github.com/cloudposse/geodesic/blob/91336bf56fb7ff0d9812e01ceacc40ca59a17cce/os/alpine/Dockerfile.alpine#L81-L88\n\n\n# Now you can move AWS CLI v1 aside, keep it as an alternative, and install AWS CLI v2\n\n# Move AWS CLI v1 to aws1 and set up alternatives\nRUN mv /usr/bin/aws /usr/local/bin/aws1 && \\\n    update-alternatives --install /usr/local/bin/aws aws /usr/local/bin/aws1 1\n\n\n# Install AWS CLI 2\n# Get version from https://github.com/aws/aws-cli/blob/v2/CHANGELOG.rst\n# We cannot automatically track the release versions, so we just install the latest\n# ARG AWS_CLI_VERSION=2.1.34\nRUN AWSTMPDIR=$(mktemp -d -t aws-inst-XXXXXXXXXX) && \\\n    curl -f -sSsSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VERSION:+-${AWS_CLI_VERSION}}.zip\" -o \"$AWSTMPDIR/awscliv2.zip\" && \\\n    cd $AWSTMPDIR && \\\n    unzip -qq awscliv2.zip && \\\n    ./aws/install -i /usr/share/aws/v2 -b /usr/share/aws/v2/bin && \\\n    update-alternatives --install /usr/local/bin/aws aws /usr/share/aws/v2/bin/aws 2 && \\\n    rm -rf $AWSTMPDIR\n\n\n"
}