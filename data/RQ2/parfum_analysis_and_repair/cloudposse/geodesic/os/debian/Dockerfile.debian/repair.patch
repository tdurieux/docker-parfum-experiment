diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/cloudposse/geodesic/os/debian/Dockerfile.debian b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/cloudposse/geodesic/os/debian/Dockerfile.debian/repaired.Dockerfile
index 58bdd50..bc47ea6 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/cloudposse/geodesic/os/debian/Dockerfile.debian
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/cloudposse/geodesic/os/debian/Dockerfile.debian/repaired.Dockerfile
@@ -44,25 +44,25 @@ ENV LC_ALL=C.UTF-8
 RUN rm -rf /usr/local && mkdir /usr/local
 
 # Preload apt-utils
-RUN apt-get update && apt-get install -y apt-utils
+RUN apt-get update && apt-get install --no-install-recommends -y apt-utils && rm -rf /var/lib/apt/lists/*;
 
 # Install the packages that are needed to build python3
-RUN apt-get update && apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev \
-    libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev curl libbz2-dev
+RUN apt-get update && apt-get install --no-install-recommends -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev \
+    libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev curl libbz2-dev && rm -rf /var/lib/apt/lists/*;
 
 # Download the Python source code
 RUN curl -1sLfO https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz && \
-    tar -xf Python-${PYTHON_VERSION}.tar.xz
+    tar -xf Python-${PYTHON_VERSION}.tar.xz && rm Python-${PYTHON_VERSION}.tar.xz
 
 # Build Python to be installed in /usr/local/bin
 WORKDIR Python-${PYTHON_VERSION}
-RUN ./configure --enable-optimizations --prefix=/usr/local && make -j $(nproc) && make install
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-optimizations --prefix=/usr/local && make -j $(nproc) && make install
 
 # Build the Python packages, configured to use /usr/local/bin/python3, and install them under /dist
 COPY requirements.txt /requirements.txt
 
 RUN python3 -m pip install --upgrade --progress-bar off pip setuptools wheel && \
-    pip install --progress-bar off -r /requirements.txt --ignore-installed --prefix=/usr/local --no-build-isolation
+    pip install --no-cache-dir --progress-bar off -r /requirements.txt --ignore-installed --prefix=/usr/local --no-build-isolation
 
 # Remove Python cache files
 RUN find / -name __pycache__ -exec rm -rf {} \; -prune
@@ -120,17 +120,17 @@ COPY packages.txt os/debian/packages-debian.txt /etc/apt/
 ## Here is where we would copy in the repo checksum in an attempt to ensure updates bust the Docker build cache
 
 # Add CloudPosse package repo
-RUN apt-get update && apt-get install -y apt-utils curl
+RUN apt-get update && apt-get install --no-install-recommends -y apt-utils curl && rm -rf /var/lib/apt/lists/*;
 RUN curl -1sLf 'https://dl.cloudsmith.io/public/cloudposse/packages/cfg/setup/bash.deb.sh' | bash
 
 # Install Google package repo
 RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
 RUN curl -1sLf 'https://packages.cloud.google.com/apt/doc/apt-key.gpg' | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=true apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
 
-RUN apt-get update && apt-get install -y \
+RUN apt-get update && apt-get install --no-install-recommends -y \
     $(grep -h -v '^#' /etc/apt/packages.txt /etc/apt/packages-debian.txt | sed -E 's/@(cloudposse|community|testing)//g' ) && \
     mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf && \
-    touch /conf/.gitconfig
+    touch /conf/.gitconfig && rm -rf /var/lib/apt/lists/*;
 
 #
 # Install Google Cloud SDK
@@ -139,7 +139,7 @@ RUN apt-get update && apt-get install -y \
 ARG GOOGLE_CLOUD_SDK_VERSION
 ENV CLOUDSDK_CONFIG=/localhost/.config/gcloud/
 
-RUN apt-get update && apt-get install -y google-cloud-sdk=$GOOGLE_CLOUD_SDK_VERSION
+RUN apt-get update && apt-get install --no-install-recommends -y google-cloud-sdk=$GOOGLE_CLOUD_SDK_VERSION && rm -rf /var/lib/apt/lists/*;
 
 # gcloud config writes successful status updates to stderr, but we want to preserve
 # stderr for real errors in need of action.
@@ -285,7 +285,7 @@ RUN mv /usr/local/bin/aws /usr/local/bin/aws1 && \
 # but it is updated several times a week, so we choose to just get the latest.
 # ARG AWS_CLI_VERSION=2.2.8
 RUN AWSTMPDIR=$(mktemp -d -t aws-inst-XXXXXXXXXX) && \
-    curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VERSION:+-${AWS_CLI_VERSION}}.zip" -o "$AWSTMPDIR/awscliv2.zip" && \
+    curl -f -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VERSION:+-${AWS_CLI_VERSION}}.zip" -o "$AWSTMPDIR/awscliv2.zip" && \
     cd $AWSTMPDIR && \
     unzip -qq awscliv2.zip && \
     ./aws/install -i /usr/share/aws/v2 -b /usr/share/aws/v2/bin && \
@@ -306,7 +306,7 @@ ENV AWS_PAGER="less -FRX"
 
 # Install AWS Session Manager Plugin
 ARG SESSION_MANAGER_PLUGIN_VERSION
-RUN curl -L "https://s3.amazonaws.com/session-manager-downloads/plugin/${SESSION_MANAGER_PLUGIN_VERSION}/ubuntu_64bit/session-manager-plugin.deb" \
+RUN curl -f -L "https://s3.amazonaws.com/session-manager-downloads/plugin/${SESSION_MANAGER_PLUGIN_VERSION}/ubuntu_64bit/session-manager-plugin.deb" \
     -o "/tmp/session-manager-plugin.deb" && \
     sudo dpkg -i /tmp/session-manager-plugin.deb && \
     rm /tmp/session-manager-plugin.deb