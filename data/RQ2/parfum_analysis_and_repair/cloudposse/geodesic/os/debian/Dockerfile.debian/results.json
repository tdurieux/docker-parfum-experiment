{
  "startTime": 1674250118521,
  "endTime": 1674250119851,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 287,
        "lineEnd": 287,
        "columnStart": 4,
        "columnEnd": 140
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 308,
        "lineEnd": 309,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 129,
        "lineEnd": 130,
        "columnStart": 22,
        "columnEnd": 122
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 22,
        "columnEnd": 83
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 129,
        "lineEnd": 130,
        "columnStart": 22,
        "columnEnd": 122
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 22,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://www.debian.org/releases/\nARG DEBIAN_VERSION=11.3-slim\n# https://cloud.google.com/sdk/docs/release-notes\nARG GOOGLE_CLOUD_SDK_VERSION=385.0.0-0\n# https://github.com/ahmetb/kubectx/releases\nARG KUBECTX_COMPLETION_VERSION=0.9.4\n# https://github.com/jonmosco/kube-ps1/releases\nARG KUBE_PS1_VERSION=0.7.0\n# https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html#plugin-version-history\nARG SESSION_MANAGER_PLUGIN_VERSION=latest\n\n# Helm plugins:\n# https://github.com/databus23/helm-diff/releases\nARG HELM_DIFF_VERSION=3.4.2\n# https://github.com/aslafy-z/helm-git/releases\n# We had issues with helm-diff 3.1.3 + helm-git 0.9.0,\n# previous workaround was to pin helm-git to version 0.8.1.\n# We expect this has been fixed now with helm-diff 3.3.2 + helm-git 0.11.1\nARG HELM_GIT_VERSION=0.11.1\n\n\nFROM debian:$DEBIAN_VERSION as python\n# Find the current version of Python at https://www.python.org/downloads/source/\nARG PYTHON_VERSION=3.9.12\n\n# Debian comes with minimal Locale support. See https://github.com/docker-library/docs/pull/703/files\n# Recommended: LC_ALL=C.UTF-8\nENV LC_ALL=C.UTF-8\n\n# Once again, Debian is weird. Package-installed Python is system-only, and does not\n# play well with pip. See  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=765022#30\n#\n# So we cannot install the packages: RUN apt-get update && apt-get install -y python3 python3-pip python3-dev\n# and instead we have to build Python ourselves and install it in /usr/local/bin (by Debian design).\n\n# Also bad is the fact that python, being an interpreted language, installs a lot of shell scripts\n# that specifically reference the location of the python interpreter or other things, those\n# locations being baked in at install time. So it does not work to install python in `/dist`\n# and then later copy `/dist` to `/usr/local`: The installed scripts would have `!#/dist/bin/python`\n# baked in and fail. So we take the somewhat unorthodox approach of deleting /usr/local entirely,\n# then installing python in /usr/local, and then copying /usr/local over.\n#\n\nRUN rm -rf /usr/local && mkdir /usr/local\n\n# Preload apt-utils\nRUN apt-get update && apt-get install --no-install-recommends -y apt-utils && rm -rf /var/lib/apt/lists/*;\n\n# Install the packages that are needed to build python3\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev \\\n    libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev curl libbz2-dev && rm -rf /var/lib/apt/lists/*;\n\n# Download the Python source code\nRUN curl -1sLfO https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz && \\\n    tar -xf Python-${PYTHON_VERSION}.tar.xz && rm Python-${PYTHON_VERSION}.tar.xz\n\n# Build Python to be installed in /usr/local/bin\nWORKDIR Python-${PYTHON_VERSION}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations --prefix=/usr/local && make -j $(nproc) && make install\n\n# Build the Python packages, configured to use /usr/local/bin/python3, and install them under /dist\nCOPY requirements.txt /requirements.txt\n\nRUN python3 -m pip install --upgrade --progress-bar off pip setuptools wheel && \\\n    pip install --no-cache-dir --progress-bar off -r /requirements.txt --ignore-installed --prefix=/usr/local --no-build-isolation\n\n# Remove Python cache files\nRUN find / -name __pycache__ -exec rm -rf {} \\; -prune\n\n#\n# Geodesic base image\n#\nFROM debian:$DEBIAN_VERSION\n\nARG VERSION\nENV GEODESIC_VERSION=$VERSION\nENV GEODESIC_OS=debian\n\n# Set a default terminal to \"dumb\" (headless) to make `tput` happy when running scripts.\n# When we launch Geodesic for interactive use, we forward the host value of `TERM`\nENV TERM=dumb\n# Debian comes with minimal Locale support. See https://github.com/docker-library/docs/pull/703/files\n# Recommended: LC_ALL=C.UTF-8\nENV LC_ALL=C.UTF-8\n\n# Set XDG environment variables per https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n# This is not a \"multi-user\" system, so we'll use special directories under\n# - /etc as the global configuration dir instead of default $HOME/.config\n# - /usr/share as the global data dir instead of default $HOME/.local/share\n# - /tmp as the global cache dir instead of default  $HOME/.cache\n# This allows daemon/server users like Atlantis to use the same\n# configuration as the root user, which is usually what we want.\n# If the daemon wants isolation, it can unset the variables\n# or set them to something else.\n# We leave the runtime dir unset/default since that is specifically\n# required to be owned by the current user.\n# Read more: <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\nENV XDG_DATA_HOME=/usr/share/xdg_data_home\nENV XDG_CONFIG_HOME=/etc/xdg_config_home\nENV XDG_CACHE_HOME=/var/cache/xdg_cache_home\nRUN for dir in $XDG_DATA_HOME $XDG_CONFIG_HOME $XDG_CACHE_HOME; do \\\n\tmkdir -p $dir; chmod 777 $dir; done\n\nENV BANNER \"geodesic\"\n\nENV MOTD_URL=http://geodesic.sh/motd\nENV HOME=/conf\n# Leaving KOPS_CLUSTER_NAME unset can cause problems when kops gets the cluster\n# name from somewhere else and it is wrong, so we set it to make it obvious.\nENV KOPS_CLUSTER_NAME=example.foo.bar\n\n# Install all packages as root\nUSER root\n\n# Keep dpkg quiet about running non-interactively\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\nCOPY packages.txt os/debian/packages-debian.txt /etc/apt/\n\n## Here is where we would copy in the repo checksum in an attempt to ensure updates bust the Docker build cache\n\n# Add CloudPosse package repo\nRUN apt-get update && apt-get install --no-install-recommends -y apt-utils curl && rm -rf /var/lib/apt/lists/*;\nRUN curl -1sLf 'https://dl.cloudsmith.io/public/cloudposse/packages/cfg/setup/bash.deb.sh' | bash\n\n# Install Google package repo\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\nRUN curl -1sLf 'https://packages.cloud.google.com/apt/doc/apt-key.gpg' | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=true apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    $(grep -h -v '^#' /etc/apt/packages.txt /etc/apt/packages-debian.txt | sed -E 's/@(cloudposse|community|testing)//g' ) && \\\n    mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf && \\\n    touch /conf/.gitconfig && rm -rf /var/lib/apt/lists/*;\n\n#\n# Install Google Cloud SDK\n# This is separate so that updating it does not invalidate the Docker cache layer with all the packages installed above\n# https://cloud.google.com/sdk/docs/release-notes\nARG GOOGLE_CLOUD_SDK_VERSION\nENV CLOUDSDK_CONFIG=/localhost/.config/gcloud/\n\nRUN apt-get update && apt-get install --no-install-recommends -y google-cloud-sdk=$GOOGLE_CLOUD_SDK_VERSION && rm -rf /var/lib/apt/lists/*;\n\n# gcloud config writes successful status updates to stderr, but we want to preserve\n# stderr for real errors in need of action.\nRUN { gcloud config set core/disable_usage_reporting true --installation && \\\n      gcloud config set component_manager/disable_update_check true --installation && \\\n      gcloud config set metrics/environment github_docker_image --installation; } 2>&1\n\n# Here is where we would confirm that the package repo checksum is what we expect (not mismatched due to Docker layer cache)\n\n# Using the en_US.UTF-8 local breaks our login setup because it changes the sort order,\n# and therefore the order of execution, of our profile files. We use locale C.UTF-8 instead,\n# which is widely supported (more widely than en_US.UTF-8). However, if\n# we had a compelling reason to need en_US.UTF-8, we could install the\n# \"locales\" package and run the following command:\n# RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\n\nRUN echo \"net.ipv6.conf.all.disable_ipv6=0\" > /etc/sysctl.d/00-ipv6.conf\n\n# Disable vim from reading a swapfile (incompatible with goofys)\nRUN echo 'set noswapfile' >> /etc/vim/vimrc\n\nWORKDIR /tmp\n\n# Copy python dependencies\nCOPY --from=python /usr/local/ /usr/local/\n\n# Explicitly set  KUBECONFIG to enable kube_ps1 prompt\nENV KUBECONFIG=/conf/.kube/config\n# Install an empty kubeconfig to suppress some warnings\nCOPY rootfs/conf/.kube/config /conf/.kube/config\n# Set mode on kubeconfig to suppress some warnings while installing tools\nRUN chmod 600 $KUBECONFIG\n\n#\n# Install kubectl\n#\n# Set KUBERNETES_VERSION and KOPS_BASE_IMAGE in /conf/kops/kops.envrc\n#\nRUN kubectl completion bash > /etc/bash_completion.d/kubectl.sh\n\n# https://github.com/ahmetb/kubectx/releases\nARG KUBECTX_COMPLETION_VERSION\nADD https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubens.bash /etc/bash_completion.d/kubens.sh\nADD https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubectx.bash /etc/bash_completion.d/kubectx.sh\n\n#\n# Install fancy Kube PS1 Prompt\n# https://github.com/jonmosco/kube-ps1/releases\nARG KUBE_PS1_VERSION\nADD https://raw.githubusercontent.com/jonmosco/kube-ps1/v${KUBE_PS1_VERSION}/kube-ps1.sh /etc/profile.d/prompt:kube-ps1.sh\n\nRUN chmod 755 /etc/bash_completion.d/kubens.sh /etc/bash_completion.d/kubectx.sh /etc/profile.d/prompt:kube-ps1.sh\n\n#\n# Install helm\n#\n\n############# End of Helm 2 support ################################\n# We no longer install helm2. If you want to install it yourself, copy and uncomment the following:\n#\n#    # helm version 2 config\n#    ENV HELM_HOME /var/lib/helm\n#    ENV HELM_VALUES_PATH=${SECRETS_PATH}/helm/values\n#\n#    RUN helm2 completion bash > /etc/bash_completion.d/helm2.sh \\\n#        && mkdir -p ${HELM_HOME} \\\n#        && helm2 init --client-only \\\n#        && mkdir -p ${HELM_HOME}/plugins\n#\n#    # Enable Atlantis to use helm 2\n#    RUN chmod -R a+rwX ${HELM_HOME}\n#\n#   ARG HELM_HELM_2TO3_VERSION=0.10.0\n#   RUN helm3 plugin install https://github.com/helm/helm-2to3 --version ${HELM_HELM_2TO3_VERSION}\n#\n############# End of Helm 2 support ################################\n\n#\n# Install minimal helm plugins\nARG HELM_DIFF_VERSION\nARG HELM_GIT_VERSION\n\nRUN helm3 plugin install https://github.com/databus23/helm-diff.git --version v${HELM_DIFF_VERSION} \\\n    && helm3 plugin install https://github.com/aslafy-z/helm-git.git --version ${HELM_GIT_VERSION} \\\n    && rm -rf $XDG_CACHE_HOME/helm\n\n# helm version 3 uses XDG variables set above.\n# XDG directory permissions updated at end of installs.\n# See https://helm.sh/docs/faq/#xdg-base-directory-support\n\n#\n# Configure host AWS configuration to be available from inside Docker image\n#\n# AWS_DATA_PATH is a PATH-like variable for configuring the AWS botocore library to\n# load additional modules. Do not set it. ENV AWS_DATA_PATH=/localhost/.aws\nARG GEODESIC_AWS_HOME=/localhost/.aws\nENV AWS_CONFIG_FILE=${GEODESIC_AWS_HOME}/config\nENV AWS_SHARED_CREDENTIALS_FILE=${GEODESIC_AWS_HOME}/credentials\n# Region abbreviation types are \"fixed\" (always 3 chars), \"short\" (4-5 chars), or \"long\" (the full AWS string)\n# See https://github.com/cloudposse/terraform-aws-utils#introduction\nENV AWS_REGION_ABBREVIATION_TYPE=short\n\n# Shell customization\n# options for `less`. `R` allows ANSI color codes to be displayed while stripping out\n# other control codes that can cause `less` to mess up the screen formatting\nENV LESS=R\n# MANOPT=--no-hyphenation disables hyphenation for man pages, which is generally preferable\n# for the man pages in Geodesic to preserve the ability to copy and paste code.\nENV MANOPT=--no-hyphenation\n# Support for using an SSH key file on the host. No longer favored now that\n# Docker supports forwarding SSH_AUTH_SOCK, but retained for backward compatibility.\n# See rootfs/etc/profile.d/ssh-agent.sh\nENV SSH_AGENT_CONFIG=/var/tmp/.ssh-agent\n\n# Our older Geodesic configurations relied on `direnv`, which we no longer recommend,\n# preferring YAML configuration files instead.\nENV DIRENV_ENABLED=false\n# Our older Geodesic configuration uses multiple Makefiles, like Makefile.tasks\n# and depends on setting\n# ENV MAKE_INCLUDES=\"Makefile Makefile.*\"\n# but that setting causes problems in other situations, so we no longer set it by default.\n# We encourage you to use https://github.com/cloudposse/atmos instead of `make` for running commands.\n# If you are using (and therefore enable) `direnv`, consider the advantage\n# of using `direnv` to set MAKE_INCLUDES, which is that it will only set\n# it for trusted directories under `/conf` and therefore it will not affect\n# `make` outside of this directory tree.\n\n# Reduce `make` verbosity\nENV MAKEFLAGS=\"--no-print-directory\"\n\n# Install \"root\" filesystem\nCOPY rootfs/ /\nCOPY os/debian/rootfs/ /\n\n# Move AWS CLI v1 aside and install AWS CLI v2 as default, leaving both available as alternatives.\n# We do this at the end because we need cache busting from above to get us the latest AWS CLI v2\n\nRUN mv /usr/local/bin/aws /usr/local/bin/aws1 && \\\n    update-alternatives --install /usr/local/bin/aws aws /usr/local/bin/aws1 1\n\n# Install AWS CLI 2\n# Get AWS CLI V2 version from https://github.com/aws/aws-cli/blob/v2/CHANGELOG.rst if you want\n# but it is updated several times a week, so we choose to just get the latest.\n# ARG AWS_CLI_VERSION=2.2.8\nRUN AWSTMPDIR=$(mktemp -d -t aws-inst-XXXXXXXXXX) && \\\n    curl -f -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VERSION:+-${AWS_CLI_VERSION}}.zip\" -o \"$AWSTMPDIR/awscliv2.zip\" && \\\n    cd $AWSTMPDIR && \\\n    unzip -qq awscliv2.zip && \\\n    ./aws/install -i /usr/share/aws/v2 -b /usr/share/aws/v2/bin && \\\n    update-alternatives --install /usr/local/bin/aws aws /usr/share/aws/v2/bin/aws 2 && \\\n    update-alternatives --set aws /usr/share/aws/v2/bin/aws && ln -s /usr/share/aws/v2/bin/aws /usr/local/bin/aws2 && \\\n    rm -rf $AWSTMPDIR\n\n# We recommend AWS_PAGER=\"less -FRX\" but you can override it in your Dockerfile\n# or in your Geodesic preferences (see `man customization`).\n# FRX acts like it does not invoke the pager unless the output would be\n# more than can fit on one scree, while preserving text color/bold.\n# FRX is actually the AWS default, except we overrode the default above by setting ENV LESS.\n# options to `less`:\n#  F = Quit if output fits on one screen, so short output remains visible after the command finishes\n#  R = Output \"raw\" control characters, so that text treatment like \"bold\" text is retained as \"bold\" text rather than quoted escapes\n#  X = Disable termcap init/de-init sequences, keeps the pager from clearing the screen when it finishes\nENV AWS_PAGER=\"less -FRX\"\n\n# Install AWS Session Manager Plugin\nARG SESSION_MANAGER_PLUGIN_VERSION\nRUN curl -f -L \"https://s3.amazonaws.com/session-manager-downloads/plugin/${SESSION_MANAGER_PLUGIN_VERSION}/ubuntu_64bit/session-manager-plugin.deb\" \\\n    -o \"/tmp/session-manager-plugin.deb\" && \\\n    sudo dpkg -i /tmp/session-manager-plugin.deb && \\\n    rm /tmp/session-manager-plugin.deb\n\n# Install documentation\nCOPY docs/ /usr/share/docs/\n\n# Build man pages\nRUN /usr/local/bin/docs update\n\n# Make sure that \"user specific\" directories we are sharing\n# are in fact available to all users\nRUN for dir in $XDG_DATA_HOME $XDG_CONFIG_HOME $XDG_CACHE_HOME; do \\\n\tchmod -R a+rwX $dir; done\n\nWORKDIR /conf\n\nENTRYPOINT [\"/bin/bash\"]\nCMD [\"-c\", \"boot\"]\n\nARG DEV_VERSION\nENV GEODESIC_DEV_VERSION=$DEV_VERSION\nENV GEODESIC_VERSION=\"${GEODESIC_VERSION}${GEODESIC_DEV_VERSION:+ (${GEODESIC_DEV_VERSION})}\"\n"
}