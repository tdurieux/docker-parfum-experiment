{
  "startTime": 1674250836160,
  "endTime": 1674250837617,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NAV development container\n#\n# This container aims at providing all the build- and runtime dependencies of\n# NAV itself in a single container, and allowing for running them all directly\n# off the code in your source code checkout. It is intended to be used as part\n# of the docker-compose.yml file, where the PostgreSQL and Graphite services\n# are defined in separate containers.\n#\n# Run the container with your checked out NAV source code directory mounted on\n# the '/source' volume to build and run all the necessary components inside\n# the container. Changes to you SASS source files will be automatically\n# detected and compiled, and any changes to files in the python directory will\n# be immediately live in the web interface.\n#\n# The NAV web interface is exposed through the Django development server on\n# port 80.\n#\n# REQUIREMENT: For the users inside the container to be able to access the\n# source code mounted at /source, the directory and its files on the host must\n# be world-readable!\n#\n#\nFROM debian:bullseye\n\n#### Prepare the OS base setup ###\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN echo 'deb-src http://deb.debian.org/debian bullseye main' >> /etc/apt/sources.list.d/srcpkg.list && \\\n    echo 'deb-src http://security.debian.org/debian-security bullseye-security main' >> /etc/apt/sources.list.d/srcpkg.list\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install \\\n            locales \\\n            python3-dbg gdb \\\n            sudo python3-dev python3-pip python3-virtualenv build-essential supervisor \\\n\t    debian-keyring debian-archive-keyring ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nARG TIMEZONE=Europe/Oslo\nARG LOCALE=en_US.UTF-8\nARG ENCODING=UTF-8\nRUN echo \"${LOCALE} ${ENCODING}\" > /etc/locale.gen && locale-gen ${LOCALE} && update-locale LANG=${LOCALE} LC_ALL=${LOCALE}\nENV LANG ${LOCALE}\nENV LC_ALL ${LOCALE}\nRUN echo \"${TIMEZONE}\" > /etc/timezone && cp /usr/share/zoneinfo/${TIMEZONE} /etc/localtime\n\n#### Install various build and runtime requirements as Debian packages ####\n\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install \\\n       git-core \\\n       libsnmp40 \\\n       cron \\\n       sudo \\\n       inotify-tools \\\n       postgresql-client \\\n       vim \\\n       less \\\n       nbtscan \\\n       # Python package build deps: \\\n       libpq-dev \\\n       libjpeg-dev \\\n       libz-dev \\\n       libldap2-dev \\\n       libsasl2-dev \\\n       # Useful tools for network debugging and SNMP querying: \\\n       dnsutils \\\n       iproute2 \\\n       iputils-ping \\\n       snmp && rm -rf /var/lib/apt/lists/*;\n\nRUN adduser --system --group --no-create-home --home=/source --shell=/bin/bash nav\n\nRUN pip3 install --no-cache-dir --upgrade 'setuptools<60' wheel && \\\n    pip3 install --no-cache-dir --upgrade 'pip<22' pip-tools\n\n#################################################################################\n### COPYing the requirements file to pip-install Python requirements may bust ###\n### Docker's cache at this point, so everything expensive you want to keep in ###\n### the cache should go before this.                                          ###\n#################################################################################\n\nCOPY tools/docker/supervisord.conf /etc/supervisor/conf.d/nav.conf\n\nCOPY requirements/ /requirements\nCOPY requirements.txt /\nCOPY tests/requirements.txt /test-requirements.txt\n# Since we used pip3 to install pip globally, pip should now be for Python 3\nRUN pip-compile --output-file /requirements.txt.lock /requirements.txt /test-requirements.txt\nRUN pip install --no-cache-dir -r /requirements.txt.lock\n\nARG CUSTOM_PIP=ipython\nRUN pip install --no-cache-dir ${CUSTOM_PIP}\n\nCOPY tools/docker/full-nav-restore.sh /usr/local/sbin/full-nav-restore.sh\n\nVOLUME [\"/source\"]\nENV    DJANGO_SETTINGS_MODULE nav.django.settings\nEXPOSE 80\n\nENTRYPOINT [\"/source/tools/docker/entrypoint.sh\"]\nCMD        [\"/source/tools/docker/run.sh\"]\n"
}