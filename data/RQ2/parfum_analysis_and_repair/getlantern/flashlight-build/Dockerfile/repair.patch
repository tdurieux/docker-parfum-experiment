diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/getlantern/flashlight-build/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/getlantern/flashlight-build/Dockerfile/repaired.Dockerfile
index 0ff8fce..5af5bde 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/getlantern/flashlight-build/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/getlantern/flashlight-build/Dockerfile/repaired.Dockerfile
@@ -21,13 +21,13 @@ ENV GO_PACKAGE_URL https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar
 RUN yum -y update && yum clean all
 
 # Requisites for building Go.
-RUN yum install -y git tar gzip curl hostname pcre-devel mercurial && yum clean all
+RUN yum install -y git tar gzip curl hostname pcre-devel mercurial && yum clean all && rm -rf /var/cache/yum
 
 # Compilers and tools for CGO.
-RUN yum install -y gcc gcc-c++ libgcc.i686 gcc-c++.i686 pkg-config && yum clean all
+RUN yum install -y gcc gcc-c++ libgcc.i686 gcc-c++.i686 pkg-config && yum clean all && rm -rf /var/cache/yum
 
 # Getting Go.
-RUN (curl -sSL $GO_PACKAGE_URL | tar -xvz -C /tmp) && \
+RUN ( curl -f -sSL $GO_PACKAGE_URL | tar -xvz -C /tmp) && \
   mv /tmp/go $GOROOT_BOOTSTRAP
 
 # Getting Go source.
@@ -40,11 +40,11 @@ RUN mkdir -p $GOROOT && \
 RUN cd $GOROOT/src && CGO_ENABLED=1 ./all.bash
 
 # Requisites for bootstrapping.
-RUN yum install -y glibc-devel glibc-static && yum clean all
-RUN yum install -y glibc-devel.i686 glib2-static.i686 glibc-2.20-8.fc21.i686 libgcc.i686 && yum clean all
+RUN yum install -y glibc-devel glibc-static && yum clean all && rm -rf /var/cache/yum
+RUN yum install -y glibc-devel.i686 glib2-static.i686 glibc-2.20-8.fc21.i686 libgcc.i686 && yum clean all && rm -rf /var/cache/yum
 
 # Requisites for windows.
-RUN yum install -y mingw32-gcc.x86_64 && yum clean all
+RUN yum install -y mingw32-gcc.x86_64 && yum clean all && rm -rf /var/cache/yum
 
 # Boostrapping Go for different platforms.
 RUN cd $GOROOT/src && CGO_ENABLED=1 GOOS=linux GOARCH=amd64 ./make.bash --no-clean
@@ -54,20 +54,20 @@ RUN cd $GOROOT/src && CXX_FOR_TARGET=i686-w64-mingw32-g++ CC_FOR_TARGET=i686-w64
 RUN cd $GOROOT/src && GOARCH=386 ./make.bash --no-clean
 
 # Requisites for building Lantern on Linux.
-RUN yum install -y gtk3-devel libappindicator-gtk3 libappindicator-gtk3-devel && yum clean all
-RUN yum install -y pango.i686 pango-devel.i686 gtk3-devel.i686 gdk-pixbuf2-devel.i686 cairo-gobject-devel.i686 atk-devel.i686 libappindicator-gtk3-devel.i686 libdbusmenu-devel.i686 dbus-devel.i686 pkgconfig.i686 && yum clean all
+RUN yum install -y gtk3-devel libappindicator-gtk3 libappindicator-gtk3-devel && yum clean all && rm -rf /var/cache/yum
+RUN yum install -y pango.i686 pango-devel.i686 gtk3-devel.i686 gdk-pixbuf2-devel.i686 cairo-gobject-devel.i686 atk-devel.i686 libappindicator-gtk3-devel.i686 libdbusmenu-devel.i686 dbus-devel.i686 pkgconfig.i686 && yum clean all && rm -rf /var/cache/yum
 
 # Requisites for packing Lantern for Debian.
 # The fpm packer. (https://rubygems.org/gems/fpm)
-RUN yum install -y ruby ruby-devel make && yum clean all
+RUN yum install -y ruby ruby-devel make && yum clean all && rm -rf /var/cache/yum
 RUN gem install fpm
 
 # Requisites for packing Lantern for Windows.
-RUN yum install -y osslsigncode mingw32-nsis && yum clean all
+RUN yum install -y osslsigncode mingw32-nsis && yum clean all && rm -rf /var/cache/yum
 
 # Requisites for genassets.
-RUN yum install -y nodejs npm && yum clean all
-RUN npm install -g gulp
+RUN yum install -y nodejs npm && yum clean all && rm -rf /var/cache/yum
+RUN npm install -g gulp && npm cache clean --force;
 
 # Expect the $WORKDIR volume to be mounted.
 ENV SECRETS /secrets