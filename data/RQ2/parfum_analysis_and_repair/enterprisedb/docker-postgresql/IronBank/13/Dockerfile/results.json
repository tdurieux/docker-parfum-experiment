{
  "startTime": 1674248706766,
  "endTime": 1674248708584,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_REGISTRY=registry1.dso.mil\nARG BASE_IMAGE=redhat/ubi/ubi8\nARG BASE_TAG=8.4\nFROM ${BASE_REGISTRY}/${BASE_IMAGE}:${BASE_TAG}\n\n# Generate locale C.UTF-8 for postgres and general locale data\nENV LANG C.UTF-8\n\nCOPY scripts/* /usr/local/bin/\nRUN chmod 755 /usr/local/bin/*\n\nARG PG_USER_ID=\"26\"\nARG PG_USER_NAME=\"postgres\"\n\nARG PG_GROUP_ID=\"26\"\nARG PG_GROUP_NAME=\"postgres\"\n\nARG PG_VERSION=13\n\nCOPY ./RPM-GPG-KEY-PGDG-13 \\\n\t./postgresql13-13.7-1PGDG.rhel8.x86_64.rpm \\\n\t./postgresql13-contrib-13.7-1PGDG.rhel8.x86_64.rpm \\\n\t./postgresql13-server-13.7-1PGDG.rhel8.x86_64.rpm \\\n\t./postgresql13-libs-13.7-1PGDG.rhel8.x86_64.rpm \\\n\t./pgaudit15_13-1.5.2-1.rhel8.x86_64.rpm \\\n\t./requirements.txt \\\n\t./*.whl \\\n\t./*.tar.gz \\\n\t/tmp/\n\n# Install from local copies of RPMs\nRUN dnf update -y --nodocs && \\\n    dnf clean all && \\\n\trpm --import /tmp/RPM-GPG-KEY-PGDG-13 && \\\n\tdnf -y reinstall \\\n\ttar \\\n\tglibc-common  && \\\n\tdnf -y install --nodocs \\\n\tbind-utils \\\n\tcargo \\\n\tgcc \\ \n\tgettext \\\n\tglibc-langpack-en \\\n\tglibc-locale-source \\\n\thostname \\\n\tlibffi-devel \\\n\tlibpq-devel \\\n\tnss_wrapper \\\n\topenssl-devel \\\n\tpython38-cffi \\\n\tpython38-cryptography \\\n\tpython38-devel\\ \n\tpython38-pip \\\n\tpython38-pip-wheel \\\n\tpython38-psycopg2 \\\n\tpython38-setuptools \\\n\tredhat-lsb-core \\\n\tredhat-rpm-config \\\n\trsync \\\n\t/tmp/postgresql13-13.7-1PGDG.rhel8.x86_64.rpm \\\n\t/tmp/postgresql13-contrib-13.7-1PGDG.rhel8.x86_64.rpm \\\n\t/tmp/postgresql13-server-13.7-1PGDG.rhel8.x86_64.rpm \\\n\t/tmp/postgresql13-libs-13.7-1PGDG.rhel8.x86_64.rpm \\\n\t/tmp/pgaudit15_13-1.5.2-1.rhel8.x86_64.rpm \\\n\t&& rm -rf /var/cache/dnf\n\n# Install barman-cloud\nENV CRYPTOGRAPHY_DONT_BUILD_RUST 1\nENV CARGO_NET_OFFLINE true\nRUN python3 -m pip install --no-index --find-links=/tmp --upgrade /tmp/pip-21.3.1-py3-none-any.whl\nRUN pip3 install --no-cache-dir --no-index --find-links=/tmp -r /tmp/requirements.txt\nRUN rm -rf /tmp/*.{rpm,whl} && \\\n\tdnf -y remove python38-devel openssl-devel gcc cargo libffi-devel redhat-rpm-config\n\n# make the sample config easier to munge (and \"correct by default\")\nRUN set -eux; \\\n\tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/pgsql-13/share/postgresql.conf.sample; \\\n\tgrep -F \"listen_addresses = '*'\" /usr/pgsql-13/share/postgresql.conf.sample\n\n# prepare the environment and make sure postgres user has the correct UID\nRUN set -xeu ; \\\n\tlocaledef -f UTF-8 -i en_US en_US.UTF-8 ; \\\n\ttest \"$(id postgres)\" = \"uid=26(postgres) gid=26(postgres) groups=26(postgres)\" ; \\\n\tmkdir -p /var/run/postgresql ; \\\n\tchown postgres:postgres /var/run/postgresql ; \\\n\tchmod 0755 /var/run/postgresql\n\nENV PATH $PATH:/usr/pgsql-13/bin\n\nRUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql\n\nENV PGDATA /var/lib/postgresql/data/pgdata\n# this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\n\nRUN mkdir /docker-entrypoint-initdb.d && \\\n    chown postgres:postgres /docker-entrypoint-initdb.d && \\\n    chmod 755 /docker-entrypoint-initdb.d && \\\n    mkdir -p \"$PGDATA\" && \\\n    chown -R postgres:postgres \"$PGDATA\" && \\\n    chmod 775 \"$PGDATA\" && \\\n    sed -ri s/\"#?(listen_addresses)\\s*=\\s*\\S+.*\"/\"listen_addresses = '*'\"/ /usr/pgsql-13/share/postgresql.conf.sample && \\\n    grep -F \"listen_addresses = '*'\" /usr/pgsql-13/share/postgresql.conf.sample\n\n# DoD 2.3 - remove setuid/setgid from any binary that not strictly requires it, and before doing that list them on the stdout\nRUN find / -not -path \"/proc/*\" -perm /6000 -type f -exec ls -ld {} \\; -exec chmod a-s {} \\; || true\n\nHEALTHCHECK --interval=5s --timeout=3s CMD /usr/pgsql-13/bin/pg_isready -U postgres\nUSER ${PG_USER_ID}\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n\n# We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n# calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n# in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n# flush tables to disk, which is the best compromise available to avoid data\n# corruption.\n#\n# Users who know their applications do not keep open long-lived idle connections\n# may way to use a value of SIGTERM instead, which corresponds to \"Smart\n# Shutdown mode\" in which any existing sessions are allowed to finish and the\n# server stops when all sessions are terminated.\n#\n# See https://www.postgresql.org/docs/13/server-shutdown.html for more details\n# about available PostgreSQL server shutdown signals.\n#\n# See also https://www.postgresql.org/docs/13/server-start.html for further\n# justification of this as the default value, namely that the example (and\n# shipped) systemd service files use the \"Fast Shutdown mode\" for service\n# termination.\n#\nSTOPSIGNAL SIGINT\n#\n# An additional setting that is recommended for all users regardless of this\n# value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n# equivalent) for controlling how long to wait between sending the defined\n# STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n# The default in most runtimes (such as Docker) is 10 seconds, and the\n# documentation at https://www.postgresql.org/docs/13/server-start.html notes\n# that even 90 seconds may not be long enough in many instances.\n\nEXPOSE 5432\nCMD [\"postgres\"]\n"
}