{
  "startTime": 1674248058096,
  "endTime": 1674248059227,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 1,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 1,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster-20220711-slim\n\n# Do not split the description, otherwise we will see a blank space in the labels\nLABEL name=\"PostgreSQL Container Images\" \\\n      vendor=\"EnterpriseDB\" \\\n      url=\"https://www.enterprisedb.com/\" \\\n      version=\"11.16-1.pgdg100+1\" \\\n      release=\"5\" \\\n      summary=\"PostgreSQL Container images.\" \\\n      description=\"This Docker image contains PostgreSQL and Barman Cloud based on Debian buster-slim.\"\n\nCOPY root/ /\n\nRUN set -ex; \\\n\tif ! command -v gpg > /dev/null; then \\\n\t\tapt-get update; \\\n\t\tapt-get install -y --no-install-recommends \\\n\t\t\tgnupg \\\n\t\t\tdirmngr \\\n\t\t; \\\n\t\trm -rf /var/lib/apt/lists/*; \\\n\tfi\n\n# explicitly set user/group IDs\nRUN set -eux; \\\n\tgroupadd -r postgres --gid=999; \\\n# https://salsa.debian.org/postgresql/postgresql-common/blob/997d842ee744687d99a2b2d95c1083a2615c79e8/debian/postgresql-common.postinst#L32-35\n\tuseradd -r -g postgres --uid=26 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \\\n# also create the postgres user's home directory with appropriate permissions\n# see https://github.com/docker-library/postgres/issues/274\n\tmkdir -p /var/lib/postgresql; \\\n\tchown -R postgres:postgres /var/lib/postgresql\n\n# grab gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.12\nRUN set -eux; \\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends ca-certificates wget; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\tchmod +x /usr/local/bin/gosu; \\\n\tgosu --version; \\\n\tgosu nobody true\n\n# make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN set -eux; \\\n\tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \\\n# if this file exists, we're likely in \"debian:xxx-slim\", and locales are thus being excluded so we need to remove that exclusion (since we need locales)\n\t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \\\n\t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \\\n\t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \\\n\tfi; \\\n\tapt-get update; apt-get install -y --no-install-recommends locales; rm -rf /var/lib/apt/lists/*; \\\n\tlocaledef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG en_US.utf8\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n# install \"nss_wrapper\" in case we need to fake \"/etc/passwd\" and \"/etc/group\" (especially for OpenShift)\n# https://github.com/docker-library/postgres/issues/359\n# https://cwrap.org/nss_wrapper.html\n\t\tlibnss-wrapper \\\n# install \"xz-utils\" for .sql.xz docker-entrypoint-initdb.d files\n\t\txz-utils \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nRUN set -ex; \\\n# pub   4096R/ACCC4CF8 2011-10-13 [expires: 2019-07-02]\n#       Key fingerprint = B97B 0AFC AA1A 47F0 44F2  44A0 7FCC 7D46 ACCC 4CF8\n# uid                  PostgreSQL Debian Repository\n\tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\"; \\\n\tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \\\n\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\tapt-key list\n\nENV PG_MAJOR 11\nENV PG_VERSION 11.16-1.pgdg100+1\n\nRUN set -ex; \\\n\techo \"deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends postgresql-common; \\\n\tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \\\n\tapt-get install -y --no-install-recommends \\\n\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \\\n\t\t\"postgresql-$PG_MAJOR-pgaudit\" \\\n\t; \\\n\t\\\n\trm -fr /tmp/* ; \\\n\trm -rf /var/lib/apt/lists/*;\n\n# Install barman-cloud\nRUN set -xe; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tpython3-pip \\\n\t\tpython3-psycopg2 \\\n\t\tpython3-setuptools \\\n\t; \\\n\tpip3 install --no-cache-dir --upgrade pip; \\\n# TODO: Remove --no-deps once https://github.com/pypa/pip/issues/9644 is solved\n\tpip3 install --no-cache-dir --no-deps -r requirements.txt; \\\n\trm -rf /var/lib/apt/lists/*;\n\n# make the sample config easier to munge (and \"correct by default\")\nRUN set -eux; \\\n\tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \\\n\tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \\\n\tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \\\n\tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \\\n\tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample\n\nRUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql\n\nENV PATH $PATH:/usr/lib/postgresql/$PG_MAJOR/bin\nENV PGDATA /var/lib/postgresql/data\n# this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\n\nRUN ln -s usr/local/bin/docker-entrypoint.sh / # backwards compat\n\n# DoD 2.3 - remove setuid/setgid from any binary that not strictly requires it, and before doing that list them on the stdout\nRUN find / -not -path \"/proc/*\" -perm /6000 -type f -exec ls -ld {} \\; -exec chmod a-s {} \\; || true\n\nUSER 26\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n# calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n# in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n# flush tables to disk, which is the best compromise available to avoid data\n# corruption.\n#\n# Users who know their applications do not keep open long-lived idle connections\n# may way to use a value of SIGTERM instead, which corresponds to \"Smart\n# Shutdown mode\" in which any existing sessions are allowed to finish and the\n# server stops when all sessions are terminated.\n#\n# See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n# about available PostgreSQL server shutdown signals.\n#\n# See also https://www.postgresql.org/docs/12/server-start.html for further\n# justification of this as the default value, namely that the example (and\n# shipped) systemd service files use the \"Fast Shutdown mode\" for service\n# termination.\n#\nSTOPSIGNAL SIGINT\n#\n# An additional setting that is recommended for all users regardless of this\n# value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n# equivalent) for controlling how long to wait between sending the defined\n# STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n# The default in most runtimes (such as Docker) is 10 seconds, and the\n# documentation at https://www.postgresql.org/docs/12/server-start.html notes\n# that even 90 seconds may not be long enough in many instances.\n\nEXPOSE 5432\nCMD [\"postgres\"]\n"
}