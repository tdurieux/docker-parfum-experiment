{
  "startTime": 1674255955922,
  "endTime": 1674255957114,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 1,
        "columnEnd": 105
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 2,
        "columnEnd": 120
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 1,
        "columnEnd": 48
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 2,
        "columnEnd": 89
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 71,
        "lineEnd": 72,
        "columnStart": 2,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM quay.io/enterprisedb/edb-ubi:8.6-855\n\n# Do not split the description, otherwise we will see a blank space in the labels\nLABEL name=\"PostgreSQL Container Images\" \\\n      vendor=\"EnterpriseDB\" \\\n      url=\"https://www.enterprisedb.com/\" \\\n      version=\"13.7-1PGDG.rhel8\" \\\n      release=\"4\" \\\n      summary=\"PostgreSQL Container images.\" \\\n      description=\"This Docker image contains PostgreSQL and Barman Cloud based on RedHat Universal Base Images (UBI) 8.\"\n\nCOPY root/ /\n\nARG TARGETARCH\nRUN --mount=type=secret,id=cs_script,target=/run/secrets/cs_script.sh \\\n\tset -xe ; \\\n\tbash /run/secrets/cs_script.sh ; \\\n\tyum -y reinstall glibc-common ; \\\n\tyum -y install hostname rsync tar gettext bind-utils nss_wrapper glibc-locale-source glibc-langpack-en ; rm -rf /var/cache/yum \\\n\tif [ \"$TARGETARCH\" == 'amd64' ]; then \\\n\t\tyum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm ; \\\n\tfi ; \\\n\tyum -y --setopt=tsflags=nodocs install \\\n\t\tpostgresql13-13.7-1PGDG.rhel8 \\\n\t\tpostgresql13-contrib-13.7-1PGDG.rhel8 \\\n\t\tpostgresql13-server-13.7-1PGDG.rhel8 \\\n\t\tpostgresql13-libs-13.7-1PGDG.rhel8 \\\n\t\tpgaudit15_13 \\\n\t; \\\n\trm -fr /etc/yum.repos.d/enterprisedb-edb.repo ; \\\n\trm -fr /tmp/* ; \\\n\tyum -y clean all --enablerepo='*'\n\n# Install barman-cloud\nRUN set -xe ; \\\n\tyum -y install python38-pip python38-psycopg2 ; rm -rf /var/cache/yum \\\n\tpip3.8 install --upgrade pip ; \\\n\tpip3.8 install -r requirements.txt ; \\\n\tyum -y clean all --enablerepo='*'\n\n# make the sample config easier to munge (and \"correct by default\")\nRUN set -eux; \\\n\tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/pgsql-13/share/postgresql.conf.sample; \\\n\tgrep -F \"listen_addresses = '*'\" /usr/pgsql-13/share/postgresql.conf.sample\n\n# prepare the environment and make sure postgres user has the correct UID\nRUN set -xeu ; \\\n\tlocaledef -f UTF-8 -i en_US en_US.UTF-8 ; \\\n\ttest \"$(id postgres)\" = \"uid=26(postgres) gid=26(postgres) groups=26(postgres)\" ; \\\n\tmkdir -p /var/run/postgresql ; \\\n\tchown postgres:postgres /var/run/postgresql ; \\\n\tchmod 0755 /var/run/postgresql\n\nENV PATH $PATH:/usr/pgsql-13/bin\n\nRUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql\n\nENV PGDATA /var/lib/postgresql/data/pgdata\n# this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\n\nRUN mkdir /docker-entrypoint-initdb.d\n\n# Postgis\n\nRUN --mount=type=secret,id=subscription,target=/run/secrets/subscription.sh \\\n  set -xe ; \\\n  bash /run/secrets/subscription.sh ; \\\n  yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm ; rm -rf /var/cache/yum \\\n  yum -y install --enablerepo=ubi-8-codeready-builder,codeready-builder-for-rhel-8-x86_64-rpms \\\n  postgis32_13 ; \\\n  yum -y remove epel-release ; \\\n  subscription-manager remove --all ; \\\n  subscription-manager unregister ; \\\n  subscription-manager clean ; \\\n  yum -y clean all --enablerepo='*' ; \\\n  rm /var/log/rhsm/rhsm.log\n\nCOPY ./initdb-postgis.sh /docker-entrypoint-initdb.d/10_postgis.sh\nCOPY ./update-postgis.sh /usr/local/bin\n\n# DoD 2.3 - remove setuid/setgid from any binary that not strictly requires it, and before doing that list them on the stdout\nRUN find / -not -path \"/proc/*\" -perm /6000 -type f -exec ls -ld {} \\; -exec chmod a-s {} \\; || true\n\nUSER 26\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n# calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n# in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n# flush tables to disk, which is the best compromise available to avoid data\n# corruption.\n#\n# Users who know their applications do not keep open long-lived idle connections\n# may way to use a value of SIGTERM instead, which corresponds to \"Smart\n# Shutdown mode\" in which any existing sessions are allowed to finish and the\n# server stops when all sessions are terminated.\n#\n# See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n# about available PostgreSQL server shutdown signals.\n#\n# See also https://www.postgresql.org/docs/12/server-start.html for further\n# justification of this as the default value, namely that the example (and\n# shipped) systemd service files use the \"Fast Shutdown mode\" for service\n# termination.\n#\nSTOPSIGNAL SIGINT\n#\n# An additional setting that is recommended for all users regardless of this\n# value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n# equivalent) for controlling how long to wait between sending the defined\n# STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n# The default in most runtimes (such as Docker) is 10 seconds, and the\n# documentation at https://www.postgresql.org/docs/12/server-start.html notes\n# that even 90 seconds may not be long enough in many instances.\n\nEXPOSE 5432\nCMD [\"postgres\"]\n"
}