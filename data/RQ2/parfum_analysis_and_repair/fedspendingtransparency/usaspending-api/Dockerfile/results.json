{
  "startTime": 1674251885073,
  "endTime": 1674251885968,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 120
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for the USAspending Backend API\n# When built with docker-compose --profile usaspending build,\n# it will be built and tagged with the name in the image: key of the docker-compose services that use this default Dockerfile\n\n# Since requirements are copied into the image at build-time, this MUST be rebuilt if Python requirements change\n\n# See docker-compose.yml file and README.md for docker-compose information\n\nFROM centos:7\n\nWORKDIR /dockermount\n\nRUN yum -y update && yum clean all\n# sqlite-devel added as prerequisite for coverage python lib, used by pytest-cov plugin\nRUN yum -y install wget gcc openssl-devel bzip2-devel libffi libffi-devel zlib-devel sqlite-devel && rm -rf /var/cache/yum\nRUN yum -y groupinstall \"Development Tools\"\n\n##### Install PostgreSQL 10 client (psql)\nRUN yum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm && rm -rf /var/cache/yum\nRUN yum -y install postgresql10 && rm -rf /var/cache/yum\n\n##### Building python 3.7\nWORKDIR /usr/src\nRUN wget --quiet https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\nRUN tar xzf Python-3.7.3.tgz && rm Python-3.7.3.tgz\nWORKDIR /usr/src/Python-3.7.3\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations\nRUN make altinstall\nRUN ln -sf /usr/local/bin/python3.7 /usr/bin/python3\nRUN echo \"$(python3 --version)\"\n\n##### Copy python packaged\nWORKDIR /dockermount\nCOPY requirements/ /dockermount/requirements/\nRUN python3 -m pip install -r requirements/requirements.txt\n\n##### Copy the rest of the project files into the container\nCOPY . /dockermount\n\n##### Ensure Python STDOUT gets sent to container logs\nENV PYTHONUNBUFFERED=1\n"
}