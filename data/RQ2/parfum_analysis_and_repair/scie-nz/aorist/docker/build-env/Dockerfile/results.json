{
  "startTime": 1674221232646,
  "endTime": 1674221233656,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 5,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 49,
        "columnStart": 5,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 5,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 49,
        "columnStart": 5,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Builds an image containing prerequisites for building aorist in CI.\n#\n# How to build this:\n# 1. Get latest version of docker, ensure it's started with 'systemctl start docker'\n# 2. Install qemu binfmt support: ubuntu:qemu-system-misc, arch:(aur)qemu-user-static-bin\n# 3. Run: ./build.sh\n\nFROM debian:bullseye\n\n# Install curl for use below\nRUN apt-get update -y \\\n  && apt-get install --no-install-recommends -y curl \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists /var/cache/apt/archives && rm -rf /var/lib/apt/lists/*;\n\n# DIY the rust install since it's pretty fast and it allows picking specific rust versions.\n# Edited from https://github.com/rust-lang/docker-rust/blob/master/Dockerfile-slim.template\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH \\\n    RUST_VERSION=1.59.0\nRUN set -eux; \\\n    dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"${dpkgArch##*-}\" in \\\n        amd64) rustArch='x86_64-unknown-linux-gnu' ;; \\\n        armhf) rustArch='armv7-unknown-linux-gnueabihf' ;; \\\n        arm64) rustArch='aarch64-unknown-linux-gnu' ;; \\\n        i386) rustArch='i686-unknown-linux-gnu' ;; \\\n        *) echo >&2 \"unsupported architecture: ${dpkgArch}\"; exit 1 ;; \\\n    esac; \\\n    curl -f -o rustup-init \"https://static.rust-lang.org/rustup/archive/1.24.3/${rustArch}/rustup-init\"; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \\\n    rm rustup-init; \\\n    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \\\n    rustup --version; \\\n    cargo --version; \\\n    rustc --version;\n\n# Install other aorist build prereqs:\n# - git: for pulling the repo itself in a self-contained environment\n# - libclang-dev, r-base, r-base-dev: for R code generation (libclang for bindgen)\n# - python3-*, black: for Python linking and code generation\n# - libssl-dev: for sccache below which wants openssl-sys\nRUN apt-get update -y \\\n  && apt-get install --no-install-recommends -y \\\n    git \\\n    libclang-dev r-base r-base-dev \\\n    python3-dev python3-astor python3-yaml black \\\n    libssl-dev \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists /var/cache/apt/archives && rm -rf /var/lib/apt/lists/*;\n\n# Install sccache for easy build artifact caching in CI\nRUN cargo install sccache \\\n  && rm -rf ~/.cargo\n"
}