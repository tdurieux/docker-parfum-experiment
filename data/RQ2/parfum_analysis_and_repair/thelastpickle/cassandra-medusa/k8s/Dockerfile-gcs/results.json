{
  "startTime": 1674251617858,
  "endTime": 1674251618434,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 37,
        "columnStart": 37,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 as base\n\nRUN mkdir /install\nWORKDIR /install\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common curl gnupg && rm -rf /var/lib/apt/lists/*;\n\nRUN add-apt-repository ppa:kalon33/gamesgiroll -y\n\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=\"noninteractive\" apt-get --no-install-recommends install -y \\\n        debhelper \\\n        dh-python \\\n        python3-all \\\n        python3-all-dev \\\n        python3-dev \\\n        python-dev \\\n        python-pip \\\n        python3-pip \\\n        python3-setuptools \\\n        python3-venv \\\n        build-essential \\\n        devscripts \\\n        dh-virtualenv \\\n        equivs \\\n        wget \\\n        apt-transport-https \\\n        ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nENV PATH=/root/.local/bin:$PATH\n\nCOPY . /build/\n\n# General requirements\nRUN python3 -m pip install -U pip && pip3 install --no-cache-dir --ignore-installed --user \\\n    -r /build/requirements.txt \\\n    -r /build/requirements-grp\n\n# Build medusa itself so we can add the executables in the final image\nRUN pip3 install --no-cache-dir --ignore-installed --user /build\n\n# Could be python:slim, but we have a .sh entrypoint\nFROM ubuntu:18.04\n\n## add user\nRUN groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 --create-home cassandra\n\nCOPY --from=base /install /usr/local\n\n# wget could happen in the build-phase\nRUN apt-get update && apt-get install --no-install-recommends -y python3 python3-setuptools wget \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN GRPC_HEALTH_PROBE_VERSION=v0.3.2 && \\\n    wget -qO/bin/grpc_health_probe https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/${GRPC_HEALTH_PROBE_VERSION}/grpc_health_probe-linux-amd64 && \\\n    chmod +x /bin/grpc_health_probe\n\nUSER cassandra\nWORKDIR /home/cassandra\n\n# GCP sdk\nCOPY --chown=cassandra:cassandra k8s/clean-cloud-sdk.sh /home/cassandra/clean-cloud-sdk.sh\nRUN wget -q https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz \\\n    && tar -zxvf google-cloud-sdk.tar.gz \\\n    && google-cloud-sdk/install.sh --quiet \\\n    && chmod +x clean-cloud-sdk.sh && ./clean-cloud-sdk.sh && rm google-cloud-sdk.tar.gz\nENV DEBUG_VERSION 1\nENV DEBUG_SLEEP 0\nENV PATH=/home/cassandra/.local/bin:/home/cassandra/google-cloud-sdk/bin:$PATH\n\nCOPY --from=base --chown=cassandra:cassandra /root/.local /home/cassandra/.local\n\nCOPY --chown=cassandra:cassandra medusa /home/cassandra/medusa\nCOPY --chown=cassandra:cassandra k8s/docker-entrypoint.sh /home/cassandra\n\n# Avoid Click locale errors when running medusa directly\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\n\nWORKDIR /home/cassandra\n\nENTRYPOINT [\"/home/cassandra/docker-entrypoint.sh\"]\n"
}