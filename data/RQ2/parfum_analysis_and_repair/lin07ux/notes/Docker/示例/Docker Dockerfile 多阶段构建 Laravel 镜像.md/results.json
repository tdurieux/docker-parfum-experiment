{
  "startTime": 1674217397723,
  "endTime": 1674217398730,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 9,
        "columnEnd": 63
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 9,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "> 转摘：[实战多阶段构建 Laravel 镜像](https://yeasy.gitbook.io/docker_practice/image/multistage-builds/laravel)。\n> Laravel 基于 8.x 版本。\n\n## 一、准备\n\n新建一个 Laravel 项目或在已有的 Laravel 项目根目录下新建`.dockerignore`、`laravel.conf`文件。\n\n### 1.1 设置构建忽略文件\n\n`.dockerignore`文件用来指定在构建阶段不打包发送到 Docker 服务器端的文件/文件夹列表，内容如下：\n\n```\n.idea/\n.git/\n\nvendor/\n\nnode_modules/\n\npublic/js/\npublic/css/\npublic/mix-manifest.json\n\nyarn-error.log\n\nbootstrap/cache/*\nstorage/\n\n# 自行添加其他需要排除的文件，例如 .env.* 文件\n```\n\n### 1.2 设置 Laravel 的 Nginx 配置\n\n在`laravel.conf`文件中写入 nginx 配置。这里需要注意的是：PHP 文件的解析转发到了`laravel:9000`路径，这里的名称`laravel`在后续的启动中是需要用到的。\n\n```conf\nserver {\n  listen 80 default_server;\n  root /app/laravel/public;\n  index index.php index.html;\n\n  location / {\n      try_files $uri $uri/ /index.php?$query_string;\n  }\n\n  location ~ .*\\.php(\\/.*)*$ {\n    fastcgi_pass   laravel:9000;\n    include        fastcgi.conf;\n\n    # fastcgi_connect_timeout 300;\n    # fastcgi_send_timeout 300;\n    # fastcgi_read_timeout 300;\n  }\n}\n```\n\n## 二、编写 Dockerfile\n\n下面根据构建的步骤，分别展现前端资源编译、PHP 依赖安装、整合资源文件、构建 Nginx 服务四个阶段的 Dockerfile 配置，并最终构建镜像、启动运行。\n\n### 2.1 前端资源编译\n\nLaravel 的前端资源需要使用 Node 来进行编译得到最终的 js、css 等文件：\n\n```yaml\nFROM node:alpine as frontend\n\nCOPY package.json webpack.mix.js /app/\nCOPY resources/ /app/resources/\n\n# 构建前端资源\nRUN set -x ; cd /app \\\n      && npm install --registry=https://registry.npm.taobao.org \\\n      && touch artisan \\\n      && mkdir -p public \\\n      && npm run production && npm cache clean --force;\n```\n\n### 2.2 安装 PHP 依赖\n\nLaravel 使用 Composer 管理依赖，可以在这一阶段把所需要的依赖单独下载下来：\n\n```yaml\nFROM composer as composer\n\nCOPY database/ /app/database/\nCOPY composer.json composer.lock /app/\n\nRUN set -x ; cd /app \\\n    && composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ \\\n    && composer install \\\n    --ignore-platform-reqs \\\n    --no-interaction \\\n    --no-plugins \\\n    --no-scripts \\\n    --prefer-dist\n```\n\n### 2.3 整合资源\n\n这一阶段将前面两步中产生的前端资源和 PHP 依赖与项目代码合并到一起：\n\n```yaml\nFROM php:7.4-fpm-alpine as laravel\n\nARG LARAVEL_PATH=/app/laravel\n\nCOPY --from=composer /app/vendor/ ${LARAVEL_PATH}/vendor/\nCOPY . ${LARAVEL_PATH}\nCOPY --from=frontend /app/public/js/ ${LARAVEL_PATH}/public/js/\nCOPY --from=frontend /app/public/css/ ${LARAVEL_PATH}/public/css/\nCOPY --from=frontend /app/public/mix-manifest.json ${LARAVEL_PATH}/public/mix-manifest.json\n\nRUN set -x ; cd ${LARAVEL_PATH} \\\n      && mkdir -p storage \\\n      && mkdir -p storage/framework/cache \\\n      && mkdir -p storage/framework/sessions \\\n      && mkdir -p storage/framework/testing \\\n      && mkdir -p storage/framework/views \\\n      && mkdir -p storage/logs \\\n      && chmod -R 777 storage \\\n      && php artisan package:discover\n```\n\n### 2.4 设置 Nginx 镜像\n\n这一阶段就需要配置 Laravel 项目对应的 Nginx 配置，并将前端资源文件暴露给 Nginx 服务器：\n\n```yaml\nFROM nginx:alpine as nginx\n\nARG LARAVEL_PATH=/app/laravel\n\n# 设置 Nginx 站点配置文件\nCOPY laravel.conf /etc/nginx/conf.d/\n# 设置前端资源文件路径\nCOPY --from=laravel ${LARAVEL_PATH}/public ${LARAVEL_PATH}/public\n```\n\n### 2.5 构建镜像和运行\n\n使用`docker build`命令分别构建得到 Laravel 和 Nginx 的镜像：\n\n```shell\ndocker build -t my/laravel --target=laravel .\ndocker build -t my/nginx --target=nginx .\n```\n\n为了能让 my/laravel 和 my/nginx 启动的容器连通，需要先创建 Docker 网络，并在启动的时候指定网络名称：\n\n```shell\n# 创建网络\ndocker network create laravel\n# 先启动 Laravel 容器\ndocker run -dit --name=laravel --network=laravel my/laravel\n# 再启动 Nginx 容器\ndocker run -dit --name=nginx --network=laravel -p 8080:80 my/nginx\n```\n\n> 这里创建的 Docker 网络的名称和前面准备工作中`laravel.conf`文件中设置的`fastcgi_pass laravel:9000;`的名称是一致的。\n\n此时，在本机中访问`127.0.0.1:8080`就可以看到 Laravel 项目首页了。\n\n> Laravel 项目如果依赖其他的外部服务，如 Redis、MySQL 等，需要自行启动这些服务之后再测试。\n\n### 三、附录\n\n完整的 Dockerfile 文件如下：\n\n```yaml\n# 构建前端资源\nFROM node:alpine as frontend\n\nCOPY package.json webpack.mix.js /app/\nCOPY resources/ /app/resources/\n\nRUN set -x ; cd /app \\\n      && npm install --registry=https://registry.npm.taobao.org \\\n      && touch artisan \\\n      && mkdir -p public \\\n      && npm run production && npm cache clean --force;\n\n# 安装 PHP 依赖\nFROM composer as composer\n\nCOPY database/ /app/database/\nCOPY composer.json /app/\n\nRUN set -x ; cd /app \\\n      && composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ \\\n      && composer install \\\n           --ignore-platform-reqs \\\n           --no-interaction \\\n           --no-plugins \\\n           --no-scripts \\\n           --prefer-dist\n\n# 整合项目资源\nFROM php:7.4-fpm-alpine as laravel\n\nARG LARAVEL_PATH=/app/laravel\n\nCOPY --from=composer /app/vendor/ ${LARAVEL_PATH}/vendor/\nCOPY . ${LARAVEL_PATH}\nCOPY --from=frontend /app/public/js/ ${LARAVEL_PATH}/public/js/\nCOPY --from=frontend /app/public/css/ ${LARAVEL_PATH}/public/css/\nCOPY --from=frontend /app/public/mix-manifest.json ${LARAVEL_PATH}/public/mix-manifest.json\n\nRUN set -x ; cd ${LARAVEL_PATH} \\\n      && mkdir -p storage \\\n      && mkdir -p storage/framework/cache \\\n      && mkdir -p storage/framework/sessions \\\n      && mkdir -p storage/framework/testing \\\n      && mkdir -p storage/framework/views \\\n      && mkdir -p storage/logs \\\n      && chmod -R 777 storage \\\n      && php artisan package:discover\n\n# 构建 Nginx 镜像\nFROM nginx:alpine as nginx\n\nARG LARAVEL_PATH=/app/laravel\n\nCOPY laravel.conf /etc/nginx/conf.d/\nCOPY --from=laravel ${LARAVEL_PATH}/public ${LARAVEL_PATH}/public\n```\n\n"
}