{
  "startTime": 1674248276172,
  "endTime": 1674248277561,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 25,
        "columnStart": 3,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE=\"ubuntu:18.04\"\n\nFROM ${BASE}\nENV DEBIAN_FRONTEND=noninteractive \\\n    BUILD_HOME=/var/lib/build\n\n# Install build dependencies\nRUN set -xe \\\n&& apt-get update \\\n&& apt-get install -y --no-install-recommends \\\n build-essential \\\n cmake \\\n libeigen3-dev \\\n libjsoncpp-dev \\\n libtins-dev \\\n libpcap-dev \\\n python3-dev \\\n python3-pip \\\n python3-venv \\\n pybind11-dev \\\n# Install any additional available cpython versions for testing\n 'python3.[6-9]-dev' \\\n libglfw3-dev \\\n libglew-dev \\\n python3-breathe \\\n doxygen \\\n&& rm -rf /var/lib/apt/lists && rm -rf /var/lib/apt/lists/*;\n\n# Set up non-root build user and environment\nARG BUILD_UID=1000\nARG BUILD_GID=${BUILD_UID}\n\nRUN set -xe \\\n&& groupadd -g ${BUILD_GID} build \\\n&& useradd -u ${BUILD_UID} -d ${BUILD_HOME} -rm -s /bin/bash -g build build\n\nUSER build:build\nENV PATH=\"${PATH}:${BUILD_HOME}/.local/bin\" \\\n    OUSTER_SDK_PATH=\"/opt/ouster_example\"\nWORKDIR ${BUILD_HOME}\n\nRUN set -xe \\\n&& python3 -m pip install --no-cache-dir --user -U pip tox\n\n# Populate source dir\nCOPY . ${OUSTER_SDK_PATH}\n\n# Entrypoint for running tox:\n#\n# Usage: docker run --rm -it [-e VAR=VAL ..] ouster-sdk-tox [TOX ARGS ..]\n#\n# Without any arguments: run unit tests with all available Python versions. See\n# the tox.ini for other commands.\n#\n# The following environment variables can be set, which may be useful when\n# running with additional host bind mounts:\n# ARTIFACT_DIR: where to put test output. Defaults to ${BUILD_HOME}/artifacts\n# WHEELS_DIR: where to look for wheels for running tests against wheels\n# OUSTER_SDK_PTH: path of SDK source\n#\nENTRYPOINT [\"sh\", \"-c\", \"set -e \\\n&& rm -rf ./src && cp -a ${OUSTER_SDK_PATH} ./src \\\n&& export ARTIFACT_DIR=${ARTIFACT_DIR:-$BUILD_HOME/artifacts} \\\n&& . /etc/os-release && export ID VERSION_ID \\\n&& exec python3 -m tox -c ./src/python --workdir ${HOME}/tox \\\"$@\\\" \\\n\", \"tox-entrypoint\"]\n"
}