{
  "startTime": 1674256041220,
  "endTime": 1674256041715,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 42,
        "columnStart": 32,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# [START cloudrun_grpc_dockerfile]\n# [START run_grpc_dockerfile]\n\n# Use the offical golang image to create a binary.\n# This is based on Debian and sets the GOPATH to /go.\n# https://hub.docker.com/_/golang\nFROM golang:1.16-buster as builder\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Retrieve application dependencies.\n# This allows the container build to reuse cached dependencies.\n# Expecting to copy go.mod and if present go.sum.\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Copy local code to the container image.\nCOPY . .\n\n# Build the binary.\nRUN go build -mod=readonly -v -o /bin/server cmd/gcs-proxy/main.go\n\n# Use the official Debian slim image for a lean production container.\n# https://hub.docker.com/_/debian\n# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds\nFROM debian:buster-slim\nRUN set -x && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy the binary to the production image from the builder stage.\nCOPY --from=builder /bin/server /server\n\n# Run the web service on container startup.\nCMD [\"/server\"]\n\n# [END run_grpc_dockerfile]\n# [END cloudrun_grpc_dockerfile]"
}