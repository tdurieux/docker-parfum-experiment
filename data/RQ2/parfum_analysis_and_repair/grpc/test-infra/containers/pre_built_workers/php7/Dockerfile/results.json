{
  "startTime": 1674217035330,
  "endTime": 1674217036823,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 49,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 73,
        "lineEnd": 79,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 49,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 49,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 49,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 49,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 73,
        "lineEnd": 79,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 49,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 49,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 49,
        "columnEnd": 98
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2020 gRPC authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM php:7.2.34-buster\n\n# TODO: when running on kokoro, the \"Install\" build steps will not be cached\n# since we'll always be on a fresh VM. Re-running this command each\n# time leads to increased latency and flakiness.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  git \\\n  zlib1g-dev \\\n  build-essential \\\n  lcov \\\n  make \\\n  gnupg2 && \\\n  apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Install rvm\nRUN gpg2 --recv-keys 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\nRUN \\curl -sSL https://get.rvm.io | bash -s stable\n\n# Install Ruby 2.5\nRUN apt-get --allow-releaseinfo-change update && apt-get install --no-install-recommends -y procps && apt-get clean && rm -rf /var/lib/apt/lists/*;\nRUN /bin/bash -l -c \"rvm install ruby-2.5\"\nRUN /bin/bash -l -c \"rvm use --default ruby-2.5\"\nRUN /bin/bash -l -c \"echo 'gem: --no-document' > ~/.gemrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-document -v 1.9\"\n\n# Install composer\nRUN \\curl -sS https://getcomposer.org/installer | php\nRUN mv composer.phar /usr/local/bin/composer\n\nRUN mkdir -p /pre\nWORKDIR /pre\n\nARG REPOSITORY=grpc/grpc\nARG GITREF=master\n# when BREAK_CACHE arg is set to a random value (e.g. by \"--build-arg BREAK_CACHE=$(uuidgen)\"),\n# it makes sure the docker cache breaks at this command, and all the following\n# commands in this Dockerfile will be forced to re-run on each build.\n# This is important to ensure we always clone the repository even if \"GITREF\" stays unchanged\n# (important e.g. when GITREF=master, when the clone command could get cached and\n# we'd end up with a stale repository).\nARG BREAK_CACHE\n\nRUN git clone https://github.com/$REPOSITORY.git .\nRUN git checkout $GITREF\nRUN git submodule update --init\n\n# Save commit sha for debug use\nRUN echo 'COMMIT SHA' > GRPC_GIT_COMMIT.txt\nRUN git rev-parse $GITREF >> GRPC_GIT_COMMIT.txt\n\nRUN mkdir /build_scripts\nADD build_qps_worker.sh /build_scripts\nRUN /build_scripts/build_qps_worker.sh\n\nFROM php:7.2.34-buster\n\n# TODO: when running on kokoro, the \"Install\" build steps will not be cached\n# since we'll always be on a fresh VM. Re-running this command each\n# time leads to increased latency and flakiness.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  zlib1g-dev \\\n  build-essential \\\n  lcov \\\n  make \\\n  gnupg2 \\\n  procps && \\\n  apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Install rvm\nRUN gpg2 --recv-keys 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\nRUN \\curl -sSL https://get.rvm.io | bash -s stable\n\n# Install Ruby 2.5\nRUN apt-get --allow-releaseinfo-change update && apt-get install --no-install-recommends -y procps && apt-get clean && rm -rf /var/lib/apt/lists/*;\nRUN /bin/bash -l -c \"rvm install ruby-2.5\"\nRUN /bin/bash -l -c \"rvm use --default ruby-2.5\"\nRUN /bin/bash -l -c \"echo 'gem: --no-document' > ~/.gemrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-document -v 1.9\"\n\nRUN mkdir -p /execute\nWORKDIR /execute\nCOPY --from=0 /pre/src /execute/src\nCOPY --from=0 /pre/etc /execute/etc\nCOPY --from=0 /pre/saved/bundle/ /execute/saved/bundle/\nCOPY --from=0 /pre/GRPC_GIT_COMMIT.txt /execute/GRPC_GIT_COMMIT.txt\n\nRUN mkdir /run_scripts\nADD run_worker.sh /run_scripts\nADD run_protobuf_c_worker.sh /run_scripts\nRUN chmod -R 777 /run_scripts\n\nCMD [\"bash\"]\n"
}