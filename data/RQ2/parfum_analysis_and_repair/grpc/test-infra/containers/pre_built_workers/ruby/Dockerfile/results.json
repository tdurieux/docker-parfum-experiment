{
  "startTime": 1674248038557,
  "endTime": 1674248039880,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 gRPC authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ruby:2.5\n\n# TODO: when running on kokoro, this build step will not be cached\n# since we'll always be on a fresh VM. Re-running this command each\n# time leads to increased latency and flakiness.\nRUN apt-get update && apt-get install --no-install-recommends -y cmake && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p /pre\nWORKDIR /pre\n\nARG REPOSITORY=grpc/grpc\nARG GITREF=master\n# when BREAK_CACHE arg is set to a random value (e.g. by \"--build-arg BREAK_CACHE=$(uuidgen)\"),\n# it makes sure the docker cache breaks at this command, and all the following\n# commands in this Dockerfile will be forced to re-run on each build.\n# This is important to ensure we always clone the repository even if \"GITREF\" stays unchanged\n# (important e.g. when GITREF=master, when the clone command could get cached and\n# we'd end up with a stale repository).\nARG BREAK_CACHE\n\nRUN git clone https://github.com/$REPOSITORY.git .\nRUN git checkout $GITREF\nRUN git submodule update --init\n\n# Save commit sha for debug use\nRUN echo 'COMMIT SHA' > GRPC_GIT_COMMIT.txt\nRUN git rev-parse $GITREF >> GRPC_GIT_COMMIT.txt\n\nENV GEM_HOME=/pre/vendor/bundle/\n\nRUN mkdir /build_scripts\nADD build_qps_worker.sh /build_scripts\nRUN bash /build_scripts/build_qps_worker.sh\n\n# Copy node modules to a new image\nFROM ruby:2.5\n\nRUN mkdir -p /execute\nWORKDIR /execute\nCOPY --from=0 /pre/src /execute/src\nCOPY --from=0 /pre/vendor/bundle /execute/vendor/bundle\nCOPY --from=0 /pre/etc /execute/etc\nCOPY --from=0 /pre/GRPC_GIT_COMMIT.txt /execute/GRPC_GIT_COMMIT.txt\n\nENV GEM_HOME=/execute/vendor/bundle/\n\nCMD [\"bash\"]\n"
}