{
  "startTime": 1674246032595,
  "endTime": 1674246034215,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 135
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 29,
        "columnStart": 31,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 29,
        "columnStart": 31,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nENV LC_ALL C\nENV USER {{ server_user }}\nENV JOBS {{ server_jobs | default(ansible_processor_vcpus) }}\nENV SHELL /bin/bash\nENV HOME /home/{{ server_user }}\nENV PATH /usr/lib/ccache:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nENV NODE_COMMON_PIPE /home/{{ server_user }}/test.pipe\nENV NODE_TEST_DIR /home/{{ server_user }}/tmp\nENV OSTYPE linux-gnu\nENV OSVARIANT docker\nENV DESTCPU {{ arch }}\nENV ARCH {{ arch }}\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends apt-utils -y && \\\n    apt-get dist-upgrade -y && apt-get install --no-install-recommends -y \\\n      ccache \\\n      g++-8 \\\n      gcc-8 \\\n      git \\\n      openjdk-8-jre-headless \\\n      pkg-config \\\n      curl \\\n      python3-pip \\\n      python-is-python3 \\\n      libfontconfig1 \\\n      libtool \\\n      automake && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir tap2junit\n\nRUN addgroup --gid {{ server_user_gid.stdout_lines[0] }} {{ server_user }}\n\nRUN adduser --gid {{ server_user_gid.stdout_lines[0] }} --uid {{ server_user_uid.stdout_lines[0] }} --disabled-password --gecos {{ server_user }} {{ server_user }}\n\nENV ICU64DIR=/opt/icu-64.1 \\\n    ICU65DIR=/opt/icu-65.1 \\\n    ICU67DIR=/opt/icu-67.1 \\\n    ICU68DIR=/opt/icu-68.2 \\\n    ICU69DIR=/opt/icu-69.1 \\\n    ICU71DIR=/opt/icu-71.1\n\nRUN for ICU_ENV in $(env | grep ICU..DIR); do \\\n    ICU_PREFIX=$(echo $ICU_ENV | cut -d '=' -f 2) && \\\n    ICU_VERSION=$(echo $ICU_PREFIX | cut -d '-' -f 2) && \\\n    ICU_MAJOR=$(echo $ICU_VERSION | cut -d '.' -f 1) && \\\n    ICU_MINOR=$(echo $ICU_VERSION | cut -d '.' -f 2) && \\\n    mkdir -p /tmp/icu-$ICU_VERSION && \\\n    cd /tmp/icu-$ICU_VERSION && \\\n    curl -f -sL \"https://github.com/unicode-org/icu/releases/download/release-$ICU_MAJOR-$ICU_MINOR/icu4c-${ICU_MAJOR}_$ICU_MINOR-src.tgz\" | tar zxv --strip=1 && \\\n    cd source && \\\n    ./runConfigureICU Linux --prefix=$ICU_PREFIX && \\\n    make -j $JOBS && \\\n    make install && \\\n    rm -rf /tmp/icu-$ICU_VERSION; \\\n    done\n\nENV OPENSSL111VER 1.1.1n\nENV OPENSSL111DIR /opt/openssl-$OPENSSL111VER\n\nRUN mkdir -p /tmp/openssl_$OPENSSL111VER && \\\n    cd /tmp/openssl_$OPENSSL111VER && \\\n    curl -f -sL https://www.openssl.org/source/openssl-$OPENSSL111VER.tar.gz | tar zxv --strip=1 && \\\n    ./config --prefix=$OPENSSL111DIR && \\\n    make -j 6 && \\\n    make install && \\\n    rm -rf /tmp/openssl_$OPENSSL111VER\n\nENV OPENSSL3VER 3.0.2+quic\nENV OPENSSL3DIR /opt/openssl-$OPENSSL3VER\n# TODO(richardlau) remove OPENSSL300DIR when the CI has been updated to use OPENSSL3DIR\nENV OPENSSL300DIR $OPENSSL3DIR\n\nRUN mkdir -p /tmp/openssl-$OPENSSL3VER && \\\n    cd /tmp/openssl-$OPENSSL3VER && \\\n    git clone https://github.com/quictls/openssl.git -b openssl-$OPENSSL3VER --depth 1 && \\\n    cd openssl && \\\n    ./config --prefix=$OPENSSL3DIR && \\\n    make -j 6 && \\\n    make install && \\\n    rm -rf /tmp/openssl-$OPENSSL3VER\n\nENV ZLIBVER 1.2.12\nENV ZLIB12DIR /opt/zlib_$ZLIBVER\n\nRUN mkdir -p /tmp/zlib_$ZLIBVER && \\\n    cd /tmp/zlib_$ZLIBVER && \\\n    curl -f -sL https://zlib.net/zlib-$ZLIBVER.tar.gz | tar zxv --strip=1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$ZLIB12DIR && \\\n    make -j 6 && \\\n    make install && \\\n    rm -rf /tmp/zlib_$ZLIBVER\n\nVOLUME /home/{{ server_user }}/ /home/{{ server_user }}/.ccache\n\nUSER iojs:iojs\n\nENV CCACHE_TEMPDIR /home/iojs/.ccache/{{ item.name }}\n\nCMD cd /home/iojs \\\n  && curl https://ci.nodejs.org/jnlpJars/slave.jar -O \\\n  && java -Xmx{{ server_ram|default('128m') }} \\\n          -jar /home/{{ server_user }}/slave.jar \\\n          -jnlpUrl {{ jenkins_url }}/computer/{{ item.name }}/slave-agent.jnlp \\\n          -secret {{ item.secret }}\n"
}