{
  "startTime": 1674253106439,
  "endTime": 1674253107300,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM public.ecr.aws/ubuntu/ubuntu:18.04\n\nLABEL maintainer=\"guas@amazon.com\"\n\n# Specify accept-bind-to-port LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT\n# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n# Specify multi-models LABEL to indicate container is capable of loading and serving multiple models concurrently\n# https://docs.aws.amazon.com/sagemaker/latest/dg/build-multi-model-build-container.html\nLABEL com.amazonaws.sagemaker.capabilities.multi-models=true\n\nARG MMS_VERSION=1.1.8\nARG PYTHON=python3\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3\nARG PYTHON_VERSION=3.6.8\nENV DEBIAN_FRONTEND=noninteractive\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    TEMP=/home/model-server/tmp\n\nRUN apt-get update \\\n && apt-get -y install --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    git \\\n    libopencv-dev \\\n    openjdk-8-jdk-headless \\\n    vim \\\n    wget \\\n    zlib1g-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xvf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && make \\\n && make install \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libreadline-gplv2-dev \\\n    libncursesw5-dev \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    tk-dev \\\n    libgdbm-dev \\\n    libc6-dev \\\n    libbz2-dev \\\n    pciutils \\\n    gnupg \\\n    jq \\\n    wget \\\n && echo \"deb https://apt.repos.neuron.amazonaws.com bionic main\" | tee /etc/apt/sources.list.d/neuron.list \\\n && wget -qO - https://apt.repos.neuron.amazonaws.com/GPG-PUB-KEY-AMAZON-AWS-NEURON.PUB | apt-key add - \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends aws-neuron-tools \\\n && make \\\n && make install \\\n && rm -rf ../Python-$PYTHON_VERSION* \\\n && ln -s /usr/local/bin/pip3 /usr/bin/pip \\\n && rm -rf /var/lib/apt/lists/* && rm Python-$PYTHON_VERSION.tgz\n\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\nWORKDIR /\n\nRUN ${PIP} install --no-cache-dir \\\n    boto3 \\\n    gluonnlp==0.10.0 \\\n    multi-model-server==$MMS_VERSION \\\n    keras-mxnet==2.2.4.1 \\\n    numpy==1.17.4 \\\n    onnx==1.4.1 \\\n    \"sagemaker-mxnet-inference<2\"\n\nRUN ${PIP} install --extra-index-url=https://pip.repos.neuron.amazonaws.com --no-cache-dir mxnet-neuron==1.5.1.1.8.0.0\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nRUN useradd -m model-server \\\n && mkdir -p /home/model-server/tmp \\\n && chown -R model-server /home/model-server\n\nENV PATH=\"/opt/aws/neuron/bin:${PATH}\"\n\nCOPY container/inf1_mx_entry.py /usr/local/bin/dockerd-entrypoint.py\nCOPY container/config-inf1.properties /home/model-server\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py\n\nEXPOSE 8080 8081\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"mxnet-model-server\", \"--start\", \"--mms-config\", \"/home/model-server/config.properties\"]\n"
}