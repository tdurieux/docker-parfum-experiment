{
  "startTime": 1674220040963,
  "endTime": 1674220042151,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 54,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 5,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 5,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nLABEL maintainer=\"Amazon AI\"\n# Specify LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT\n# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\nLABEL com.amazonaws.sagemaker.capabilities.multi-models=true\n\n# Add arguments to achieve the version, python and url\nARG PYTHON=python3.7\nARG PIP=\"python3.7 -m pip\"\nARG TFS_SHORT_VERSION=2.6.3\nARG TF_S3_URL=https://tensorflow-aws.s3-us-west-2.amazonaws.com\n\n# See http://bugs.python.org/issue19846\nENV LANG=C.UTF-8\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV SAGEMAKER_TFS_VERSION=\"${TFS_SHORT_VERSION}\"\nENV PATH=\"$PATH:/sagemaker\"\nENV LD_LIBRARY_PATH='/usr/local/lib:$LD_LIBRARY_PATH'\nENV MODEL_BASE_PATH=/models\n# The only required piece is the model name in order to differentiate endpoints\nENV MODEL_NAME=model\n# To prevent user interaction when installing time zone data package\nENV DEBIAN_FRONTEND=noninteractive\n\n# nginx + njs\nRUN apt-get update \\\n && apt-get -y install --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n    ca-certificates \\\n    git \\\n    wget \\\n    vim \\\n && curl -f -s https://nginx.org/keys/nginx_signing.key | apt-key add - \\\n && echo 'deb http://nginx.org/packages/ubuntu/ bionic nginx' >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get -y install --no-install-recommends \\\n    nginx \\\n    nginx-module-njs \\\n  && apt-get install --no-install-recommends software-properties-common -y \\\n  && add-apt-repository ppa:deadsnakes/ppa \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends python3.7 -y \\\n  && apt-get install --no-install-recommends python3-distutils -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN echo \"deb https://apt.repos.neuron.amazonaws.com bionic main\" | tee /etc/apt/sources.list.d/neuron.list && \\\n    wget -qO - https://apt.repos.neuron.amazonaws.com/GPG-PUB-KEY-AMAZON-AWS-NEURON.PUB | apt-key add - && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends \"tensorflow-model-server-neuron=2.6.3.2.3.0.0\" \\\n            aws-neuron-tools && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN apt list -a tensorflow-model-server-neuron\n\nRUN wget https://bootstrap.pypa.io/get-pip.py\nRUN python3.7 get-pip.py \n\n# cython, falcon, gunicorn, grpc\nRUN python3.7 -m pip install --no-cache-dir \\\n    awscli \\\n    boto3 \\\n    pyYAML==5.3.1 \\\n    cython==0.29.12 \\\n    falcon==2.0.0 \\\n    gunicorn==19.9.0 \\\n    gevent==1.4.0 \\\n    requests==2.22.0 \\\n    grpcio==1.24.1 \\\n    protobuf==3.10.0 \\\n# using --no-dependencies to avoid installing tensorflow binary\n && python3.7 -m pip install --no-dependencies --no-cache-dir \\\n    tensorflow-serving-api==2.5.3\n\nRUN python3.7 -m pip install --extra-index-url=https://pip.repos.neuron.amazonaws.com --no-cache-dir \"tensorflow-neuron==2.6.3.2.3.0.0\"\n\nCOPY sagemaker /sagemaker\n\nWORKDIR /\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -sf $(which ${PYTHON}) $(which python3) \\\n && ln -s /usr/local/bin/pip3 /usr/bin/pip\n\nRUN curl -f ${TF_S3_URL}/MKL-Libraries/libiomp5.so -o /usr/local/lib/libiomp5.so \\\n && curl -f ${TF_S3_URL}/MKL-Libraries/libmklml_intel.so -o /usr/local/lib/libmklml_intel.so\n\n# Expose ports\n# gRPC and REST\nEXPOSE 8500 8501\n\n# Set where models should be stored in the container\nRUN mkdir -p ${MODEL_BASE_PATH}\n\n# Create a script that runs the model server so we can use environment variables\n# while also passing in arguments from the docker command line\nRUN echo '#!/bin/bash \\n\\n' > /usr/bin/tf_neuron_serving_entrypoint.sh \\\n && echo '/usr/local/bin/tensorflow_model_server_neuron --port=8500 --rest_api_port=8501 --model_name=${MODEL_NAME} --model_base_path=${MODEL_BASE_PATH}/${MODEL_NAME} \"$@\"' >> /usr/bin/tf_neuron_serving_entrypoint.sh \\\n && chmod +x /usr/bin/tf_neuron_serving_entrypoint.sh\n\nENV PATH=\"/opt/aws/neuron/bin:${PATH}\"\n\nADD https://raw.githubusercontent.com/aws/aws-deep-learning-containers-utils/master/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow/license.txt -o /license.txt\n\nCMD [\"/usr/bin/tf_neuron_serving_entrypoint.sh\"]\n"
}