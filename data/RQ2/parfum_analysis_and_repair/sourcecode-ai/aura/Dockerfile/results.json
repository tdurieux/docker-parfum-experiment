{
  "startTime": 1674255345068,
  "endTime": 1674255345944,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 52,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 101,
        "columnEnd": 131
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 101,
        "columnEnd": 132
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 101,
        "columnEnd": 136
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG pythonver=3.10\nARG alpinever=3.15\n\nFROM python:${pythonver}-alpine${alpinever} AS aura-base\n\nENV PATH=\"/root/.local/bin:${PATH}\"\nENV CRYPTOGRAPHY_DONT_BUILD_RUST=1\n\n# This is a specific order of installing the dependencies first so we can use caching mechanism to quickly rebuild the image in case only aura source code changed\nRUN addgroup analysis && adduser -S -G analysis analysis && mkdir /analyzer\n\nADD files/install_poetry.sh /analyzer\n\nRUN apk add --no-cache \\\n    python2 \\\n    curl \\\n    automake \\\n    file-dev \\\n    openssl-dev \\\n    autoconf \\\n    libtool \\\n    build-base \\\n    libffi-dev \\\n    rust \\\n    cargo \\\n    git && \\\n    /analyzer/install_poetry.sh\n\nWORKDIR /analyzer\n\nFROM aura-base AS aura-lite\n\nWORKDIR /analyzer\n\n# Aura specific installation steps\nADD custom_analyzer.py \\\n    entrypoint.sh \\\n    LICENSE.txt \\\n    README.rst \\\n    pyproject.toml \\\n    poetry.lock \\\n    /analyzer/\n\nADD aura /analyzer/aura\nADD tests /analyzer/tests\n\n\nENV AURA_NO_CACHE=true\n\n# Install Aura\nRUN --mount=type=cache,mode=0755,target=/root/.cache poetry build &&\\\n    cd dist && export WHEEL_NAME=$(ls|grep .whl) && pip install --no-cache-dir $WHEEL_NAME && \\\n    python -c \"import aura;\" && \\\n    find /analyzer -name '*.pyc' -delete -print && \\\n    chmod +x /analyzer/entrypoint.sh && \\\n    chmod 777 -R /analyzer && \\\n    cd /analyzer && \\\n    aura update\n\nENTRYPOINT [\"/analyzer/entrypoint.sh\"]\nCMD [\"--help\"]\n\n\nFROM aura-lite AS aura-lite-tests\n\n#RUN poetry install\nRUN --mount=type=cache,mode=0755,target=/root/.cache cd dist && export WHEEL_NAME=$(ls|grep .whl) && pip install --no-cache-dir $WHEEL_NAME\\[dev\\]\n\nRUN pytest tests/\n\nENTRYPOINT [\"/analyzer/entrypoint.sh\"]\nCMD [\"run_tests\"]\n\nFROM aura-lite AS aura-full\n\nRUN apk add --no-cache \\\n    libxml2-dev \\\n    libxslt-dev \\\n    postgresql-dev\n\n#RUN poetry install --no-dev -E full\nRUN --mount=type=cache,mode=0755,target=/root/.cache cd dist && export WHEEL_NAME=$(ls|grep .whl) && pip install --no-cache-dir $WHEEL_NAME\\[full\\]\n\nADD docs /analyzer/docs\n\n\nENTRYPOINT [\"/analyzer/entrypoint.sh\"]\nCMD [\"--help\"]\n\n\nFROM aura-full AS aura-full-tests\n\n#RUN poetry install -E full\nRUN --mount=type=cache,mode=0755,target=/root/.cache cd dist && export WHEEL_NAME=$(ls|grep .whl) && pip install --no-cache-dir $WHEEL_NAME\\[dev,full\\]\n\nRUN pytest tests/\n\nENTRYPOINT [\"/analyzer/entrypoint.sh\"]\nCMD [\"run_tests\"]\n"
}