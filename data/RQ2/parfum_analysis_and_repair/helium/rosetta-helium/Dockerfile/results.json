{
  "startTime": 1674214938817,
  "endTime": 1674214940245,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 9,
        "columnEnd": 66
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 9,
        "columnEnd": 20
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 15,
        "columnEnd": 79
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 68,
        "columnStart": 8,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 132,
        "lineEnd": 133,
        "columnStart": 9,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 153,
        "lineEnd": 154,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG NETWORK=mainnet\n\nFROM ubuntu:20.04 as node-builder\n\nARG BUILD_VERSION=\"23.3.4.7\"\nARG BUILD_SHA256=\"37e39a43c495861ce69de06e1a013a7eac81d15dc6eebd2d2022fd68791f4b2d\"\nENV OTP_VERSION=$BUILD_VERSION \\\n    REBAR3_VERSION=\"3.16.1\"\n\nLABEL org.opencontainers.image.version=$OTP_VERSION\n\n# We'll install the build dependencies, and purge them on the last step to make\n# sure our final image contains only what we've just built:\nRUN set -xe \\\n\t&& OTP_DOWNLOAD_URL=\"https://github.com/erlang/otp/releases/download/OTP-${BUILD_VERSION}/otp_src_${BUILD_VERSION}.tar.gz\" \\\n\t&& OTP_DOWNLOAD_SHA256=\"${BUILD_SHA256}\" \\\n\t&& fetchDeps=' \\\n\t\tcurl \\\n\t\tca-certificates' \\\n\t&& apt-get update \\\n\t&& apt-get install -y --no-install-recommends $fetchDeps \\\n\t&& curl -fSL -o otp-src.tar.gz \"$OTP_DOWNLOAD_URL\" \\\n\t&& echo \"$OTP_DOWNLOAD_SHA256  otp-src.tar.gz\" | sha256sum -c - \\\n\t&& runtimeDeps=' \\\n\t\tlibssl1.1 \\\n\t' \\\n\t&& buildDeps=' \\\n\t\tautoconf \\\n\t\tdpkg-dev \\\n\t\tgcc \\\n\t\tg++ \\\n\t\tmake \\\n\t\tlibncurses-dev \\\n\t\tlibssl-dev \\\n\t' \\\n\t&& apt-get install -y --no-install-recommends $runtimeDeps \\\n\t&& apt-get install -y --no-install-recommends $buildDeps \\\n\t&& export ERL_TOP=\"/usr/src/otp_src_${OTP_VERSION%%@*}\" \\\n\t&& mkdir -vp $ERL_TOP \\\n\t&& tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 \\\n\t&& rm otp-src.tar.gz \\\n\t&& ( cd $ERL_TOP \\\n\t  && ./otp_build autoconf \\\n\t  && gnuArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\" \\\n\t  && ./configure --build=\"$gnuArch\" \\\n\t  && make -j$(nproc) \\\n\t  && make install ) \\\n\t&& find /usr/local -name examples | xargs rm -rf \\\n\t&& REBAR3_DOWNLOAD_URL=\"https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz\" \\\n\t&& REBAR3_DOWNLOAD_SHA256=\"a14711b09f6e1fc1b080b79d78c304afebcbb7fafed9d0972eb739f0ed89121b\" \\\n\t&& mkdir -p /usr/src/rebar3-src \\\n\t&& curl -fSL -o rebar3-src.tar.gz \"$REBAR3_DOWNLOAD_URL\" \\\n\t&& echo \"$REBAR3_DOWNLOAD_SHA256  rebar3-src.tar.gz\" | sha256sum -c - \\\n\t&& tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 \\\n\t&& rm rebar3-src.tar.gz \\\n\t&& cd /usr/src/rebar3-src \\\n\t&& HOME=$PWD ./bootstrap \\\n\t&& install -v ./rebar3 /usr/local/bin/ \\\n\t&& rm -rf /usr/src/rebar3-src \\\n\t&& apt-get purge -y --auto-remove $buildDeps $fetchDeps \\\n\t&& rm -rf $ERL_TOP /var/lib/apt/lists/*\n\nRUN set -xe \\\n\t    && apt update \\\n\t    && apt-get install -y --no-install-recommends \\\n     \t        libssl-dev make automake autoconf libncurses5-dev gcc \\\n\t        libdbus-1-dev libbz2-dev bison flex libgmp-dev liblz4-dev \\\n\t        libsodium-dev sed wget curl build-essential libtool git \\\n\t\tca-certificates \\\n\t    && mkdir -p /opt/cmake \\\n\t    && wget -O /opt/cmake/cmake.tgz \\\n\t        https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-linux-x86_64.tar.gz \\\n            && tar -zxf /opt/cmake/cmake.tgz -C /opt/cmake --strip-components=1 && rm /opt/cmake/cmake.tgz && rm -rf /var/lib/apt/lists/*;\n\n# Install Rust toolchain\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n\nENV CC=gcc CXX=g++ CFLAGS=\"-U__sun__\" \\\n    ERLANG_ROCKSDB_OPTS=\"-DWITH_BUNDLE_SNAPPY=ON -DWITH_BUNDLE_LZ4=ON\" \\\n    ERL_COMPILER_OPTIONS=\"[deterministic]\" \\\n    PATH=\"/root/.cargo/bin:/opt/cmake/bin:$PATH\" \\\n    RUSTFLAGS=\"-C target-feature=-crt-static\"\n\nWORKDIR /usr/src/\n\n# Add our code\nRUN git clone https://github.com/helium/blockchain-node.git\n\n\nFROM node-builder AS node-mainnet\n\nARG BUILD_TARGET=docker_rosetta\n\nWORKDIR /usr/src/blockchain-node\n\nRUN ./rebar3 as ${BUILD_TARGET} tar -n blockchain_node\n\nRUN mkdir -p /opt/blockchain_node \\\n\t&& tar -zxvf _build/${BUILD_TARGET}/rel/*/*.tar.gz -C /opt/blockchain_node && rm _build/${BUILD_TARGET}/rel/*/*.tar.gz\n\n\nFROM node-builder AS node-testnet\n\nARG BUILD_TARGET=docker_rosetta_testnet\n\nWORKDIR /usr/src/blockchain-node\n\nRUN ./rebar3 as ${BUILD_TARGET} tar -n blockchain_node\n\nRUN mkdir -p /opt/blockchain_node \\\n\t&& tar -zxvf _build/${BUILD_TARGET}/rel/*/*.tar.gz -C /opt/blockchain_node && rm _build/${BUILD_TARGET}/rel/*/*.tar.gz\n\n\nFROM ubuntu:20.04 AS rosetta-builder\n\nRUN set -xe \\\n\t&& ulimit -n 100000 \\\n        && apt update \\\n \t&& apt install -y --no-install-recommends libdbus-1-3 libgmp10 libsodium23 \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt/blockchain_node\n\nENV COOKIE=blockchain_node \\\n    # Write files generated during startup to /tmp\n    RELX_OUT_FILE_PATH=/tmp \\\n    # add to path, for easy exec interaction\n    PATH=/sbin:/bin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH:/opt/blockchain_node/bin\n\nWORKDIR /src\n\nRUN apt update \\\n      && apt install -y --no-install-recommends \\\n         curl ca-certificates git \\\n      && curl -f -L https://golang.org/dl/go1.17.1.linux-amd64.tar.gz | tar xzf - && rm -rf /var/lib/apt/lists/*;\n\nENV PATH=\"/src/go/bin:$PATH\" \\\n    CGO_ENABLED=0\n\nCOPY . rosetta-helium\n\nRUN cd rosetta-helium && go build -o rosetta-helium\n\n\nFROM node-${NETWORK} as rosetta-helium-final\n\nARG NETWORK\nARG DEBIAN_FRONTEND=noninteractive\n\nEXPOSE 8080\nEXPOSE 44158\n\nRUN apt update \\\n    && apt install -y --no-install-recommends \\\n         ca-certificates git npm && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /app\n\nCOPY --from=rosetta-builder /src/rosetta-helium/rosetta-helium rosetta-helium\nCOPY --from=rosetta-builder /src/rosetta-helium/ghost-transactions ghost-transactions\nCOPY --from=rosetta-builder /src/rosetta-helium/docker/${NETWORK}.sh start.sh\nCOPY --from=rosetta-builder /src/rosetta-helium/helium-constructor helium-constructor\n\nRUN cd helium-constructor \\\n      && npm install \\\n      && npm run build \\\n      && chmod +x /app/start.sh && npm cache clean --force;\n\nENTRYPOINT [\"/app/start.sh\"]\n"
}