{
  "startTime": 1674216687771,
  "endTime": 1674216689396,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 110,
        "columnStart": 7,
        "columnEnd": 112
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for Review Bot.\n#\n# Copyright (C) 2022 Beanbag, Inc.\n\n\n##############################################################################\n# Stage 1 of the build.\n#\n# We'll set up some common environment variables we'll want in subsequent\n# stages.\n#\n# We're using Ubuntu (LTS release), due to the longer support life.\n##############################################################################\nFROM ubuntu:20.04 AS base\n\n# Version of Python to use.\nARG PYTHON_VERSION=3.8\nENV PYTHON_VERSION=$PYTHON_VERSION\n\n# Set up Rust environment variables.\nENV RUSTUP_HOME=/opt/rust/rustup\nENV CARGO_HOME=/opt/rust/cargo\n\n# Set up Ruby environment variables.\nENV GEM_HOME=/opt/ruby/gems\n\n# Set up Node.JS environment variables.\nENV NPM_CONFIG_PREFIX=/opt/nodejs/node_modules\n\n# Set up a virtualenv for Review Board.\nENV VIRTUAL_ENV=/opt/venv\n\n# Set up the environment for Python and scripts.\nENV LANG=C.UTF-8\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\n\n# Common environment variables.\nENV PATH=\"$CARGO_HOME/bin:$NPM_CONFIG_PREFIX/bin:$GEM_HOME/bin:$VIRTUAL_ENV/bin:$PATH\"\n\n\n##############################################################################\n# Stage 2 of the build.\n#\n# We'll set up development support and compile any modules we need in a\n# virtualenv. That will be copied in stage 2 to the destination image, without\n# carrying all the development bloat.\n#\n##############################################################################\nFROM base AS builder\nMAINTAINER Beanbag, Inc. <support@beanbaginc.com>\n\n# The version of Review Bot this will install.\nARG REVIEWBOT_VERSION=3.1.0\n\n# Version of PMD to install.\nARG PMD_VERSION=6.32.0\n\n# Install all the base system-level packages needed by Review Bot.\n#\n# We will be installing some packages (including most Python packages) via\n# pip instead of apt-get.\nRUN    set -ex \\\n    && apt-get update -y \\\n    && DEBIAN_FRONTEND=\"noninteractive\" apt-get install \\\n           -y --no-install-recommends \\\n           build-essential \\\n           ca-certificates \\\n           curl \\\n           nodejs \\\n           npm \\\n\t\t   patch \\\n           ruby \\\n           software-properties-common \\\n           unzip \\\n           virtualenv \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Add apt repositories for tools we need.\n#\n# NOTE: Update the \"deb\" line when modifying the base Ubuntu version!\nRUN add-apt-repository ppa:longsleep/golang-backports\n\nRUN virtualenv -p python$PYTHON_VERSION $VIRTUAL_ENV\n\n# Install Review Bot and its Python dependencies.\n#\n# If any packages are provided in ./packages/ when building this, we'll\n# prioritize those.\nCOPY ./packages /tmp/packages\nRUN set -ex \\\n    && pip3 install --no-cache-dir -U pip \\\n    && pip3 install \\\n           --no-cache-dir \\\n           --pre \\\n           --find-links /tmp/packages \\\n           reviewbot-worker~=${REVIEWBOT_VERSION} \\\n\t&& pip3 install \\\n           --no-cache-dir \\\n           'reviewbot-worker[all]' \\\n    && rm -rf /tmp/packages\n\n# Install Rust and packages.\nRUN    { curl https://sh.rustup.rs -sSf | sh -s -- -y --profile=minimal; } \\\n    && rustup component add rustfmt\n\n# Install PMD.\nRUN set -ex \\\n    && curl -f -sSL -o /tmp/pmd.zip \\\n           https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-bin-${PMD_VERSION}.zip \\\n    && unzip -d /opt /tmp/pmd.zip \\\n    && rm /tmp/pmd.zip \\\n    && mv /opt/pmd-bin-${PMD_VERSION} /opt/pmd\n\n# Install Ruby packages.\nRUN gem install --no-document rubocop\n\n# Install Node.JS packages.\nRUN npm install -g jshint && npm cache clean --force;\n\nCOPY scripts/* /opt/scripts/\n\n\n##############################################################################\n# Stage 2 of the build.\n#\n# We'll create a new, final image that contains the virtualenv and only the\n# runtime dependencies necessary to run Review Board.\n##############################################################################\nFROM base\n\n# Review Bot user ID\n#\n# Review Bot will run as this user, and writable directories (/repos/) will be\n# owned by this user.\nARG REVIEWBOT_USER_ID=1001\n\n# Review Bot group ID\n#\n# Writable directories (/repos) will be owned by this group.\nARG REVIEWBOT_GROUP_ID=1001\n\n# Version of PMD to install.\nARG PMD_VERSION=6.32.0\n\n# Public port that gunicorn will listen to.\nEXPOSE 8080\n\n# The broker URL to connect to.\n#\n# This is required.\nENV BROKER_URL=amqp://reviewbot:reviewbot123@rabbitmq/reviewbot\n\n# Log level for Review Bot.\nENV LOG_LEVEL=INFO\n\n# Number of workers to run concurrently.\n#\n# If blank, this will be based on the number of CPUs on the system.\nENV NUM_WORKERS=\n\n# Location of the repository checkouts directory.\n#\n# Mount this somewhere to share any repository checkouts across containers.\nVOLUME /repos\n\n# Create a user for the web server and set up symlinks for the repositories\n# directory.\nRUN    groupadd -r reviewbot -g $REVIEWBOT_GROUP_ID \\\n    && adduser --system --uid $REVIEWBOT_USER_ID \\\n               --disabled-password --disabled-login \\\n               --ingroup reviewbot reviewbot \\\n    && mkdir -p /usr/local/share/reviewbot \\\n    && ln -s /usr/local/share/reviewbot/repositories /repos\n\nCOPY --from=builder /etc/apt /etc/apt\n\nRUN    apt-get update -y \\\n    && DEBIAN_FRONTEND=\"noninteractive\" apt-get install \\\n           -y --no-install-recommends \\\n           ca-certificates \\\n           checkstyle \\\n           clang \\\n           clang-tools \\\n           cppcheck \\\n           curl \\\n           git \\\n           golang-go \\\n           gosu \\\n           nodejs \\\n           openjdk-14-jre-headless \\\n           patch \\\n           python$PYTHON_VERSION \\\n           python$PYTHON_VERSION-distutils \\\n           ruby \\\n           shellcheck \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && ln -sf /usr/bin/python$PYTHON_VERSION /usr/bin/python3\n\n# FBinfer is 300MB!\n#    && mkdir -p /opt/fbinfer \\\n#    && { curl -sSL https://github.com/facebook/infer/releases/download/v${FBINFER_VERSION}/infer-linux64-v${FBINFER_VERSION}.tar.xz\" \\\n#       | tar -xJ -C /opt\n\n# Set up the configuration file.\nCOPY files/reviewbot-config.py /etc/xdg/reviewbot/config.py\n\nCOPY --from=builder /opt /opt\n\n# Periodically check that the worker is up and responding.\nHEALTHCHECK CMD /opt/scripts/docker-healthcheck.sh\n\n# Run the Review Bot worker.\nENTRYPOINT [\"/opt/scripts/docker-entrypoint.sh\"]\nCMD [\"/opt/scripts/run-reviewbot.sh\"]\n"
}