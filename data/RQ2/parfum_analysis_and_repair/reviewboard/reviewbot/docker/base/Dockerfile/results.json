{
  "startTime": 1674249095037,
  "endTime": 1674249095865,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for Review Bot.\n#\n# Copyright (C) 2022 Beanbag, Inc.\n\n\n##############################################################################\n# Stage 1 of the build.\n#\n# We'll set up some common environment variables we'll want in subsequent\n# stages.\n#\n# We're using Ubuntu (LTS release), due to the longer support life.\n##############################################################################\nFROM ubuntu:22.04 AS base\n\n# Set up the environment for Python, NPM, Ruby, and scripts.\nENV LANG=C.UTF-8\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\nENV VIRTUAL_ENV=/opt/venv\nENV PATH=\"$NPM_CONFIG_PREFIX/bin:$PATH\"\nENV GEM_HOME=/opt/ruby/gems\nENV NPM_CONFIG_PREFIX=/opt/nodejs/node_modules\nENV RUSTUP_HOME=/opt/rust/rustup\nENV CARGO_HOME=/opt/rust/cargo\nENV PATH=\"$VIRTUAL_ENV/bin:$NPM_CONFIG_PREFIX/bin:$GEM_HOME/bin:$CARGO_HOME/bin:$PATH\"\n\n\n##############################################################################\n# Stage 2 of the build.\n#\n# We'll set up development support and compile any modules we need in a\n# virtualenv. That will be copied in stage 2 to the destination image, without\n# carrying all the development bloat.\n#\n##############################################################################\nFROM base AS builder\nMAINTAINER Beanbag, Inc. <support@beanbaginc.com>\n\n# The version of Review Bot this will install.\nARG REVIEWBOT_VERSION=3.0a0\n\n# Install all the base system-level packages needed by Review Bot.\n#\n# We will be installing some packages (including most Python packages) via\n# pip instead of apt-get.\nRUN    set -ex \\\n    && apt-get update -y \\\n    && apt-get upgrade -y \\\n    && DEBIAN_FRONTEND=\"noninteractive\" apt-get install \\\n           -y --no-install-recommends \\\n           ca-certificates \\\n           curl \\\n           software-properties-common \\\n           virtualenv \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN virtualenv -p python3 $VIRTUAL_ENV\n\n# Install Review Bot and its Python dependencies.\n#\n# If any packages are provided in ./packages/ when building this, we'll\n# prioritize those.\nCOPY ./packages /tmp/packages\nRUN set -ex \\\n    && pip3 install --no-cache-dir -U pip \\\n    && pip3 install \\\n           --no-cache-dir \\\n           --pre \\\n           --find-links /tmp/packages \\\n           reviewbot-worker~=${REVIEWBOT_VERSION} \\\n    && rm -rf /tmp/packages\n\nCOPY scripts/* /opt/scripts/\nCOPY files/reviewbot-config.py /etc/xdg/reviewbot/config.py\n\n\n##############################################################################\n# Stage 2 of the build.\n#\n# We'll create a new, final image that contains the virtualenv and only the\n# runtime dependencies necessary to run Review Bot.\n##############################################################################\nFROM base AS standalone\n\n# Review Bot user ID\n#\n# Review Bot will run as this user, and writable directories (/repos/) will be\n# owned by this user.\nARG REVIEWBOT_USER_ID=1001\n\n# Review Bot group ID\n#\n# Writable directories (/repos) will be owned by this group.\nARG REVIEWBOT_GROUP_ID=1001\n\n# The broker URL to connect to.\n#\n# This is required.\nENV BROKER_URL=amqp://reviewbot:reviewbot123@rabbitmq/reviewbot\n\n# Log level for Review Bot.\nENV LOG_LEVEL=INFO\n\n# Number of workers to run concurrently.\n#\n# If blank, this will be based on the number of CPUs on the system.\nENV NUM_WORKERS=\n\n# Location of the configuration file.\n#\n# Mount this somewhere and configure a config.py.\nVOLUME /config\n\n# Location of the repository checkouts directory.\n#\n# Mount this somewhere to share any repository checkouts across containers.\nVOLUME /repos\n\n\n# Create a user for the web server and set up symlinks for the repositories\n# directory.\nRUN    groupadd -r reviewbot -g $REVIEWBOT_GROUP_ID \\\n    && adduser --system --uid $REVIEWBOT_USER_ID \\\n               --disabled-password --disabled-login \\\n               --ingroup reviewbot reviewbot \\\n    && mkdir -p /usr/local/share/reviewbot \\\n    && ln -s /repos /usr/local/share/reviewbot/repositories\n\nRUN    apt-get update -y \\\n    && DEBIAN_FRONTEND=\"noninteractive\" apt-get install \\\n           -y --no-install-recommends \\\n           ca-certificates \\\n           curl \\\n           git \\\n           gosu \\\n           patch \\\n           python3 \\\n           python3-distutils \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy results from the previous builder.\nCOPY --from=builder /etc/apt /etc/apt\nCOPY --from=builder /etc/xdg/reviewbot /etc/xdg/reviewbot\nCOPY --from=builder /opt /opt\n\n# Install the space-delimited list of tools needed in the derived image.\n#\n# There's some light customization allowed here. Users have control over\n# a couple of the versions. Most things will just use the latest available\n# versions from the appropriate package repositories, though.\n#\n# Long-term, it would be nice to allow for specifying explicit versions in\n# the TOOLS list, where possible.\nONBUILD ARG FBINFER_VERSION=1.1.0\nONBUILD ARG PMD_VERSION=6.43.0\nONBUILD ARG TOOLS\nONBUILD RUN /opt/scripts/install-tools.sh ${TOOLS}\n\n# Periodically check that the worker is up and responding.\nHEALTHCHECK CMD /opt/scripts/docker-healthcheck.sh\n\n# Run the Review Bot worker.\nENTRYPOINT [\"/opt/scripts/docker-entrypoint.sh\"]\nCMD [\"/opt/scripts/run-reviewbot.sh\"]\n"
}