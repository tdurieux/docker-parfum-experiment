{
  "startTime": 1674215989724,
  "endTime": 1674215991033,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 9,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 9,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for Review Board.\n#\n# Copyright (C) 2020 Beanbag, Inc.\n#\n# Documentation on this Docker image is available at\n# http://localhost:8081/docs/manual/latest/admin/installation/docker/\n\n\n##############################################################################\n# Stage 1 of the build.\n#\n# We'll set up development support and compile any modules we need in a\n# virtualenv. That will be copied in stage 2 to the destination image, without\n# carrying all the development bloat.\n#\n# We're using Ubuntu (LTS release) rather than Alpine, due to better\n# compatibility with compiled Python modules and a long support life.\n#\n# Alpine doesn't use glibc, and cannot benefit from pre-compiled wheels.\n# See https://pythonspeed.com/articles/alpine-docker-python/\n##############################################################################\nFROM ubuntu:20.04 AS builder\nMAINTAINER Beanbag, Inc. <support@beanbaginc.com>\n\n# The version of Review Board this will install.\nARG REVIEWBOARD_VERSION\n\n# Power Pack version to install.\n#\n# This can be in X.Y or X.Y.Z form.\nARG POWERPACK_VERSION=5.0\n\n# Review Bot extension version to install.\n#\n# This can be in X.Y or X.Y.Z form.\nARG REVIEWBOT_VERSION=3.0\n\n# Extra extension packages needed by the server.\n#\n# This is used only when building from *this* Dockerfile. Consumers should\n# create a new Dockerfile that inherits from this one and installs packages\n# themselves.\nARG EXTRA_PACKAGES=\n\n# Install all the base system-level packages needed by Review Board.\n#\n# We will be installing some packages (including most Python packages) via\n# pip instead of apt-get.\nRUN    set -ex \\\n    && apt-get update -y \\\n    && apt-get install -y --no-install-recommends \\\n           build-essential \\\n           ca-certificates \\\n           curl \\\n           gnupg \\\n           libapr1-dev \\\n           libaprutil1-dev \\\n           libffi-dev \\\n           libssl-dev \\\n           libjpeg-dev \\\n           libmysqlclient-dev \\\n           libsasl2-dev \\\n           libsvn-dev \\\n           mysql-client \\\n           openssl \\\n           postgresql-client \\\n           python3.8-dev \\\n           subversion \\\n           virtualenv \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Add the Perforce apt repository.\n#\n# NOTE: Update the \"deb\" line when modifying the base Ubuntu version!\nRUN { \\\n    curl -f https://package.perforce.com/perforce.pubkey | apt-key add -; \\\n} \\\n    && echo \"deb http://package.perforce.com/apt/ubuntu bionic release\" \\\n       > /etc/apt/sources.list.d/perforce.list\n\n# Set up the environment for Python and scripts.\nENV LANG=C.UTF-8\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\n\n# Set up a virtualenv for Review Board.\nENV VIRTUAL_ENV=/venv\nRUN virtualenv -p python3.8 $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Install Review Board and its Python dependencies.\n#\n# If any packages are provided in ./packages/ when building this, we'll\n# prioritize those.\nCOPY ./packages /tmp/packages\nRUN set -ex \\\n    && pip3 install --no-cache-dir -U pip \\\n    && pip3 install \\\n           --no-cache-dir \\\n           gunicorn \\\n           gunicorn[gevent] \\\n           gunicorn[gthread] \\\n    && pip3 install \\\n           --no-cache-dir \\\n           --pre \\\n           --find-links /tmp/packages \\\n           ReviewBoard~=${REVIEWBOARD_VERSION} \\\n           ReviewBoardPowerPack~=${POWERPACK_VERSION} \\\n           reviewbot_extension~=${REVIEWBOT_VERSION} \\\n           ${EXTRA_PACKAGES} \\\n\t&& pip3 install \\\n           --no-cache-dir \\\n           'ReviewBoard[ldap]' \\\n           'ReviewBoard[mercurial]' \\\n           'ReviewBoard[mysql]' \\\n           'ReviewBoard[p4]' \\\n           'ReviewBoard[postgres]' \\\n           'ReviewBoard[s3]' \\\n           'ReviewBoard[swift]' \\\n    && { \\\n     curl -f https://pysvn.reviewboard.org | python3.8 -; \\\n   } \\\n    && rm -rf /tmp/packages\n\n\n##############################################################################\n# Stage 2 of the build.\n#\n# We'll create a new, final image that contains the virtualenv and only the\n# runtime dependencies necessary to run Review Board.\n##############################################################################\nFROM ubuntu:20.04\n\n# Review Board user ID\n#\n# The web server will run as this user, and writable directories (such as\n# htdocs/media/uploaded/ and data/) will be owned by this user.\nARG REVIEWBOARD_USER_ID=1001\n\n# Review Board group ID\n#\n# Writable directories (such as htdocs/media/uploaded/ and data/) will be owned\n# by this group.\nARG REVIEWBOARD_GROUP_ID=1001\n\n# Whether to install Power Pack by default.\n#\n# Set to \"no\" to disable.\nENV ENABLE_POWERPACK=yes\n\n# Public-facing domain name for the server.\nENV DOMAIN=\n\n# Name of your company, for support purposes.\nENV COMPANY=\n\n# Memcached hostname:port.\nENV MEMCACHED_SERVER=memcached:11211\n\n# Database type.\n#\n# One of \"mysql\" or \"postgresql\"\nENV DATABASE_TYPE=postgresql\n\n# Existing name of the database on the server.\nENV DATABASE_NAME=reviewboard\n\n# Database server.\nENV DATABASE_SERVER=db\n\n# Username for accessing the database.\n#\n# This should be a user specific to Review Board, and not an administrator.\nENV DATABASE_USERNAME=reviewboard\n\n# Password for accessing the database.\nENV DATABASE_PASSWORD=\n\n# Whether to wait for the database to be up before starting services.\nENV WAIT_FOR_DB=yes\n\n# The number of Gunicorn workers.\n#\n# This, along with NUM_THREADS, should be tuned for the server it's run on.\n# It should be at least 2.\nENV NUM_WORKERS=4\n\n# The number of Gunicorn threads.\n#\n# This, along with NUM_THREADS, should be tuned for the server it's run on.\nENV NUM_THREADS=20\n\n# The number of seconds before a connection is dropped due to inactivity.\n#\n# This can be set higher if communication with internal servers or\n# repositories regularly takes longer than 2 minutes.\nENV REQUEST_TIMEOUT=120\n\nENV GUNICORN_FLAGS=\n\n# Public port that gunicorn will listen to.\nEXPOSE 8080\n\n# Location of the site directory.\n#\n# Mount this somewhere to persist the site directory across containers.\nVOLUME /site\n\n# Set up the environment for Python and scripts.\n#\n# These are used by the processes being run, and are not intended to be\n# customized.\nENV LANG=C.UTF-8\nENV VIRTUAL_ENV=/venv\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\nENV REVIEWBOARD_SITEDIR /site\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\n\n# Create a user for the web server.\nRUN    groupadd -r reviewboard -g $REVIEWBOARD_GROUP_ID \\\n    && adduser --system --uid $REVIEWBOARD_USER_ID \\\n               --disabled-password --disabled-login \\\n               --ingroup reviewboard reviewboard\n\nCOPY --from=builder /etc/apt /etc/apt\n\nRUN    apt-get update -y \\\n    && apt-get install -y --no-install-recommends \\\n           ca-certificates \\\n           cron \\\n           curl \\\n           cvs \\\n           git \\\n           gosu \\\n           helix-cli \\\n           libmysqlclient21 \\\n           patch \\\n           mysql-client \\\n           postgresql-client \\\n           python3.8 \\\n           python3.8-distutils \\\n           stunnel \\\n           subversion \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && ln -sf /usr/bin/python3.8 /usr/bin/python3\n\nCOPY scripts/* /\nCOPY --from=builder $VIRTUAL_ENV $VIRTUAL_ENV\n\n# Periodically check that we can hit our API endpoint, to ensure Review Board\n# is running.\nHEALTHCHECK CMD curl -f http://127.0.0.1:8080/api/info/ || exit 1\n\n# Run the site install/upgrade operation and the web server.\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/serve.sh\"]\n"
}