{
  "startTime": 1674218858497,
  "endTime": 1674218859251,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n# Set environment variables - keep these alpha-sorted\n\n# Set up core apt requirements.\n# Do not add build requirements here.\nRUN apt-get -qq update && \\\n    apt-get -qq install -y --no-install-recommends \\\n    software-properties-common \\\n    jq \\\n    curl \\\n    apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\n# Install build dependency packages.\n# Keep these alpha-sorted.\nRUN apt-get -qq update && \\\n    apt-get -qq install -y  --no-install-recommends \\\n    bison \\\n    bash-completion \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    g++ \\\n    git \\\n    openjdk-8-jdk \\\n    shellcheck \\\n    ssh \\\n    unzip \\\n    zip \\\n    zlib1g-dev \\\n    python3-pip \\\n    python3-setuptools && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir wheel\nRUN pip3 install --no-cache-dir pipenv\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\nRUN pipenv --version\n\n# Download and install gosu, so we can drop privs after the container starts.\nRUN curl -f -LSs -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture)\" \\\n    && chmod +x /usr/local/bin/gosu\n\n# Add github public SSH RSA to prevent fingerprint confirmation\nRUN mkdir -p /etc/ssh && echo \"github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\" > /etc/ssh/ssh_known_hosts\n\n# Copy the entrypoint into the image and set it as the target.\nCOPY bin/ /usr/local/bin\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n"
}