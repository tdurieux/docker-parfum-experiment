{
  "startTime": 1674250186299,
  "endTime": 1674250186864,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Allow patch updates\n# https://hub.docker.com/_/nginx/\nFROM nginx:1.21.1-alpine\n\nRUN apk add --no-cache vim openrc\n\n# Add CDN assets to the container\n#\n# Avoid wildcard as that would flatten the directory structure.\n#\n# This is an early step in the Dockerfile, so that local docker builds\n# can reuse this layer and perform a fast rebuild when you only tweaked\n# later stuff (nginx config, args, etc.)\nCOPY cdn/ /var/www/cdn/\n\n# Set a constant file modification timestamp for all CDN assets\n#\n# Git does not store modified file timestamps, which means the on-disk mtime\n# for most files is set to the time of the Git clone. This is a problem\n# since the container-based server will be re-created after each commit,\n# and we do not want the public \"Last-Modified\" and \"E-Tag\" header information\n# to roll over after every rebuild.\n#\n# While Apache has an option to configure how E-Tag is computed (e.g. based on\n# content only), Nginx is always based on file mtime and file size.\n#\n# As a workaround, set a fixed timestamp for all CDN files. This is okay as\n# we don't actually utilized Last-Modified or E-Tag for propagating changes,\n# we only use them as a way to re-assure browsers that files haven't changed\n# and thus reduce bandwidth from needless re-transfers. Given our maximum\n# Cache-Control \"max-age\", it is already the case that a changed file will not\n# be seen by the CDN unless we purge it via the CDN API, and not seen by previous\n# browser clients until they clear their own caches.\n#\nRUN find /var/www/cdn/ -type f -print0 | TZ=UTC xargs -0 -P 4 -n 50 touch --date='1991-10-18 12:00:00' {} +\n\n# Define the environment variable that will be used in the origin pull magic header\n# Set this via `docker run`\nENV CDN_ACCESS_KEY=''\n\n# Copy in the necessary config files\nCOPY cfg/vimrc /etc/vim/vimrc\nCOPY cfg/default.conf /etc/nginx/templates/default.conf.template\n\nEXPOSE 80\n\n"
}