{
  "startTime": 1674248183084,
  "endTime": 1674248184453,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 127,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Mostly self contained setup to build a stage2 ghc for musl\nfrom debian:8.0\n\n# Install stock bindist for cross compile\nenv ghc 7.10.3\nenv arch x86_64\nenv llvm 3.7.1\nenv cabal 1.22.9.0\n\n# all needed packages for compiling\nrun apt-get clean && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      binutils-gold \\\n      musl-tools \\\n      build-essential \\\n      wget \\\n      curl \\\n      libncurses-dev \\\n      autoconf \\\n      elfutils \\\n      libgmp-dev \\\n      zlib1g-dev \\\n      git \\\n      libtool \\\n      pkg-config \\\n      libffi-dev \\\n      cmake \\\n      g++ \\\n      python \\\n      pixz \\\n      openssl \\\n      bison \\\n      flex \\\n      git && rm -rf /var/lib/apt/lists/*;\n\nadd http://llvm.org/releases/$llvm/llvm-$llvm.src.tar.xz /tmp/\nadd http://llvm.org/releases/$llvm/polly-$llvm.src.tar.xz /tmp/\n\n# Install a non ancient version of llvm on debian, I'm purposefully ignoring\n# debian repos in favor of compiling to not have to deal with\n# \"what debian upstream has a current version of llvm\" nonsense, takes more\n# time to do that than just build the right llvm from source.\nworkdir /tmp\ncopy bootstrap/llvm-$llvm.sh /tmp/llvm.sh\nrun openssl sha1 llvm-$llvm.src.tar.xz | grep \"SHA1(llvm-3.7.1.src.tar.xz)= 5dbdcafac105273dcbff94c68837a66c6dd78cef\" && \\\n    openssl sha1 polly-$llvm.src.tar.xz | grep \"SHA1(polly-3.7.1.src.tar.xz)= 0e3a461907cde7505fbdb44bf61ff318aa9254f7\" && \\\n    tar xJpf /tmp/llvm-$llvm.src.tar.xz && \\\n    tar xJpf /tmp/polly-$llvm.src.tar.xz && \\\n    /tmp/llvm.sh && \\\n    rm -fr /tmp/llvm-$llvm.src && rm /tmp/llvm-$llvm.src.tar.xz\n\nadd https://downloads.haskell.org/~ghc/$ghc/ghc-$ghc-$arch-deb8-linux.tar.xz /tmp/\n\n# Install debian ghc binary from upstream.\nworkdir /tmp\nrun openssl sha1 ghc-$ghc-$arch-deb8-linux.tar.xz | grep \"SHA1(ghc-7.10.3-x86_64-deb8-linux.tar.xz)= bab16f95ef4fe6b7cc2fb6b36a02dceeeb53faa4\" && \\\n    tar xJpf /tmp/ghc-$ghc-$arch-deb8-linux.tar.xz && rm /tmp/ghc-$ghc-$arch-deb8-linux.tar.xz\nworkdir /tmp/ghc-$ghc\nrun ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && \\\n    make -j1 install && \\\n    rm -fr /tmp/ghc-$ghc\n\nadd https://www.haskell.org/cabal/release/cabal-install-$cabal/cabal-install-$cabal.tar.gz /tmp/\n\n# Install cabal so we can install alex/happy to pull off of git\n# bootstrap cabal and install alex/happy the same way apks are built\n# only globally\nworkdir /tmp\nrun openssl sha1 cabal-install-$cabal.tar.gz | grep \"SHA1(cabal-install-1.22.9.0.tar.gz)= f1375c928794f45f253b8ec92c2af4732fec597b\" && \\\n    tar xzpf /tmp/cabal-install-$cabal.tar.gz && rm /tmp/cabal-install-$cabal.tar.gz\nworkdir /tmp/cabal-install-$cabal\nrun ./bootstrap.sh --global --no-doc && \\\n    cabal update && \\\n    cabal install --global alex happy && \\\n    rm -fr /tmp/cabal-install-$cabal\n\n# First up, install/compile the cross compiler with musl libc\n# armv7 hard float cross compiler, we basically rebuild ghc again here with\n# the cross compiler, and the llvm we built for x86_64 as well\nworkdir /tmp\nrun git clone --depth 1 https://github.com/GregorR/musl-cross.git musl-cross\nworkdir /tmp/musl-cross\nrun echo GCC_BUILTIN_PREREQS=yes >> config.sh && \\\n    echo ARCH=arm >> config.sh && \\\n    echo TRIPLE=arm-linux-musleabihf >> config.sh && \\\n    echo GCC_BOOTSTRAP_CONFFLAGS=\\\"--with-arch=armv6 --with-float=hard --with-fpu=vfp\\\" >> config.sh && \\\n    echo GCC_CONFFLAGS=\\\"--with-arch=armv6 --with-float=hard --with-fpu=vfp\\\" >> config.sh && \\\n    echo GCC_STAGE1_NOOPT=1 >> config.sh && \\\n    echo CC_BASE_PREFIX=/usr >> config.sh && \\\n    echo MAKEFLAGS=-j$(grep -c processor /proc/cpuinfo) >> config.sh && \\\n    echo \"BINUTILS_CONFFLAGS='CXXFLAGS=-fpermissive --enable-gold --enable-plugins --disable-werror'\" >> config.sh && \\\n    echo \"CFLAGS='-g -O2 -fPIC -DPIC'\" >> config.sh && \\\n    echo \"CPPFLAGS='-fPIC -DPIC'\" >> config.sh && \\\n    echo \"LDFLAGS='-fPIC -DPIC'\" >> config.sh\ncopy bootstrap/gmpurl.patch gmpurl.patch\nrun patch -p1 < gmpurl.patch && \\\n    ./build.sh && \\\n    rm -fr /tmp/musl-cross\n\nadd http://downloads.haskell.org/~ghc/8.0.1/ghc-8.0.1-src.tar.xz /tmp/\n\nenv tardir /tmp/root\nenv destdir /tmp/root/armhf\nenv crosscc arm-linux-musleabihf-gcc\nenv target arm-linux-musleabihf\nenv triple arm-unknown-linux-musleabihf\nenv ghc 8.0.1 \n\n# add cross toolchain to PATH\nenv PATH /usr/$target/bin:$PATH\n\nworkdir /tmp\nrun openssl sha1 ghc-$ghc-src.tar.xz | grep \"SHA1(ghc-8.0.1-src.tar.xz)= 585a2d34a17ce2452273147f2e3cef1a2efe1aa5\" && \\\n    tar xJpf /tmp/ghc-$ghc-src.tar.xz && rm /tmp/ghc-$ghc-src.tar.xz\nworkdir /tmp/ghc-$ghc\nenv PATH $PATH:/usr/$triple/bin \ncopy bootstrap/$arch/bootstrap.patch bootstrap.patch \nrun patch -p1 < bootstrap.patch \nrun cp mk/build.mk.sample mk/build.mk && \\  \n    ./boot && \\  \n    echo \"BuildFlavour         = quick-llvm\" >> mk/build.mk && \\  \n    echo \"INTEGER_LIBRARY      = integer-simple\" >> mk/build.mk && \\  \n    echo \"HADDOCK_DOCS         = NO\" >> mk/build.mk && \\  \n    echo \"BUILD_SPHINX_HTML    = NO\" >> mk/build.mk && \\  \n    echo \"BUILD_SPHINX_PS      = NO\" >> mk/build.mk && \\  \n    echo \"BUILD_SPHINX_PDF     = NO\" >> mk/build.mk && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --target=$target \\\n  --prefix=/usr\nrun make -j$(grep -c processor /proc/cpuinfo) || make -j1 \nrun make -j1 install STRIP_CMD=$target-strip DESTDIR=$destdir\n\n# unlit and hp2ps both build using the stage0, not having luck\n# getting the build patched right so for now lets just\n# remove and rebuild these c helper programs\nrun rm $(find $destdir -name \"*-hp2ps\")\n\n# remove target prefix from stage2 binaries\n# HACK, just build unlit with the cross compiler and move it to /usr/bin in the install dir\nworkdir /tmp/ghc-$ghc/utils/unlit\nrun $crosscc unlit.c -o $(find $destdir -name unlit)\n\n# remove target prefix from stage2 binaries\nworkdir $destdir/usr/bin\nrun (for i in $triple-* ; do ln -s $i ${i#$triple-} || /bin/true ; done )\ncopy bootstrap/armhf/settings /tmp/settings\nrun mv /tmp/settings $(find $destdir -name settings -type f)\nrun rm -fr $destdir/usr/share/doc\n\nworkdir $tardir\n# Compress to xz via pixz because xz is normally too\n# old for -TN multithreads\nrun tar -I'pixz -9' -cf /tmp/ghc-$ghc-$triple.tar.xz . && rm /tmp/ghc-$ghc-$triple.tar.xz\n"
}