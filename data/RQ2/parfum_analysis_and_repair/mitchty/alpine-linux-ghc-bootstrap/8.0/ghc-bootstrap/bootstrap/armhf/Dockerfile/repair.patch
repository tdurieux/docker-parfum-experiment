diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mitchty/alpine-linux-ghc-bootstrap/8.0/ghc-bootstrap/bootstrap/armhf/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mitchty/alpine-linux-ghc-bootstrap/8.0/ghc-bootstrap/bootstrap/armhf/Dockerfile/repaired.Dockerfile
index 2ef2572..0758959 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mitchty/alpine-linux-ghc-bootstrap/8.0/ghc-bootstrap/bootstrap/armhf/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mitchty/alpine-linux-ghc-bootstrap/8.0/ghc-bootstrap/bootstrap/armhf/Dockerfile/repaired.Dockerfile
@@ -10,7 +10,7 @@ env cabal 1.22.9.0
 # all needed packages for compiling
 run apt-get clean && \
     apt-get update && \
-    apt-get install -y \
+    apt-get install --no-install-recommends -y \
       binutils-gold \
       musl-tools \
       build-essential \
@@ -32,7 +32,7 @@ run apt-get clean && \
       openssl \
       bison \
       flex \
-      git
+      git && rm -rf /var/lib/apt/lists/*;
 
 add http://llvm.org/releases/$llvm/llvm-$llvm.src.tar.xz /tmp/
 add http://llvm.org/releases/$llvm/polly-$llvm.src.tar.xz /tmp/
@@ -48,16 +48,16 @@ run openssl sha1 llvm-$llvm.src.tar.xz | grep "SHA1(llvm-3.7.1.src.tar.xz)= 5dbd
     tar xJpf /tmp/llvm-$llvm.src.tar.xz && \
     tar xJpf /tmp/polly-$llvm.src.tar.xz && \
     /tmp/llvm.sh && \
-    rm -fr /tmp/llvm-$llvm.src
+    rm -fr /tmp/llvm-$llvm.src && rm /tmp/llvm-$llvm.src.tar.xz
 
 add https://downloads.haskell.org/~ghc/$ghc/ghc-$ghc-$arch-deb8-linux.tar.xz /tmp/
 
 # Install debian ghc binary from upstream.
 workdir /tmp
 run openssl sha1 ghc-$ghc-$arch-deb8-linux.tar.xz | grep "SHA1(ghc-7.10.3-x86_64-deb8-linux.tar.xz)= bab16f95ef4fe6b7cc2fb6b36a02dceeeb53faa4" && \
-    tar xJpf /tmp/ghc-$ghc-$arch-deb8-linux.tar.xz
+    tar xJpf /tmp/ghc-$ghc-$arch-deb8-linux.tar.xz && rm /tmp/ghc-$ghc-$arch-deb8-linux.tar.xz
 workdir /tmp/ghc-$ghc
-run ./configure --prefix=/usr && \
+run ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr && \
     make -j1 install && \
     rm -fr /tmp/ghc-$ghc
 
@@ -68,7 +68,7 @@ add https://www.haskell.org/cabal/release/cabal-install-$cabal/cabal-install-$ca
 # only globally
 workdir /tmp
 run openssl sha1 cabal-install-$cabal.tar.gz | grep "SHA1(cabal-install-1.22.9.0.tar.gz)= f1375c928794f45f253b8ec92c2af4732fec597b" && \
-    tar xzpf /tmp/cabal-install-$cabal.tar.gz
+    tar xzpf /tmp/cabal-install-$cabal.tar.gz && rm /tmp/cabal-install-$cabal.tar.gz
 workdir /tmp/cabal-install-$cabal
 run ./bootstrap.sh --global --no-doc && \
     cabal update && \
@@ -105,18 +105,18 @@ env destdir /tmp/root/armhf
 env crosscc arm-linux-musleabihf-gcc
 env target arm-linux-musleabihf
 env triple arm-unknown-linux-musleabihf
-env ghc 8.0.1  
+env ghc 8.0.1 
 
 # add cross toolchain to PATH
 env PATH /usr/$target/bin:$PATH
 
 workdir /tmp
 run openssl sha1 ghc-$ghc-src.tar.xz | grep "SHA1(ghc-8.0.1-src.tar.xz)= 585a2d34a17ce2452273147f2e3cef1a2efe1aa5" && \
-    tar xJpf /tmp/ghc-$ghc-src.tar.xz
+    tar xJpf /tmp/ghc-$ghc-src.tar.xz && rm /tmp/ghc-$ghc-src.tar.xz
 workdir /tmp/ghc-$ghc
-env PATH $PATH:/usr/$triple/bin  
-copy bootstrap/$arch/bootstrap.patch bootstrap.patch  
-run patch -p1 < bootstrap.patch  
+env PATH $PATH:/usr/$triple/bin 
+copy bootstrap/$arch/bootstrap.patch bootstrap.patch 
+run patch -p1 < bootstrap.patch 
 run cp mk/build.mk.sample mk/build.mk && \  
     ./boot && \  
     echo "BuildFlavour         = quick-llvm" >> mk/build.mk && \  
@@ -124,13 +124,13 @@ run cp mk/build.mk.sample mk/build.mk && \
     echo "HADDOCK_DOCS         = NO" >> mk/build.mk && \  
     echo "BUILD_SPHINX_HTML    = NO" >> mk/build.mk && \  
     echo "BUILD_SPHINX_PS      = NO" >> mk/build.mk && \  
-    echo "BUILD_SPHINX_PDF     = NO" >> mk/build.mk && \  
-    ./configure \  
-  --target=$target \  
-  --prefix=/usr  
-run make -j$(grep -c processor /proc/cpuinfo) || make -j1  
+    echo "BUILD_SPHINX_PDF     = NO" >> mk/build.mk && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
+  --target=$target \
+  --prefix=/usr
+run make -j$(grep -c processor /proc/cpuinfo) || make -j1 
 run make -j1 install STRIP_CMD=$target-strip DESTDIR=$destdir
-  
+
 # unlit and hp2ps both build using the stage0, not having luck
 # getting the build patched right so for now lets just
 # remove and rebuild these c helper programs
@@ -151,4 +151,4 @@ run rm -fr $destdir/usr/share/doc
 workdir $tardir
 # Compress to xz via pixz because xz is normally too
 # old for -TN multithreads
-run tar -I'pixz -9' -cf /tmp/ghc-$ghc-$triple.tar.xz .
+run tar -I'pixz -9' -cf /tmp/ghc-$ghc-$triple.tar.xz . && rm /tmp/ghc-$ghc-$triple.tar.xz