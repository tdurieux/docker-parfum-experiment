{
  "startTime": 1674251755263,
  "endTime": 1674251756536,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 29,
        "columnEnd": 88
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 115,
        "columnEnd": 139
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 143,
        "columnEnd": 168
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 20,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 29,
        "columnEnd": 53
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 2,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# This is the base dockerfile to be used with the BUILDKIT to build the\n# image that the .devcontainer docker image is based on\n#\nFROM registry.access.redhat.com/ubi8/openjdk-11:latest\n\nUSER root\n\n# add a reference to fedora repo to install packages not part of the\n# ubi8 repos\nCOPY assets/fedora.repo /etc/yum.repos.d/fedora.repo\n\nRUN microdnf install dnf \\\n# install a smattering of useful packages (some of which are used later in dockerfile such as wget, zsh, and git)\n    && dnf install -y skopeo wget jq iputils vi procps git \\\n# Install packages from fedora (outside unsubscribed ubi8)\n    && dnf -y install --enablerepo fedora zsh tree \\\n# Install necessary tools to run antora    \n    && dnf -y install npm && npm i -g @antora/cli@2.3 @antora/site-generator-default@2.3 && npm rm --global npx && npm install --global npx && npm install --global gulp \\\n# Install yum so that docker can be installed in the container\n    && dnf -y install yum && yum install -y yum-utils \\\n# install docker repo\n    && yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \\\n# install docker client\n    && yum install -y docker-ce-cli  \\\n# make sure jboss user has rights to run docker\n    && usermod -aG docker jboss  \\\n# cleanup packages and yum\n    && yum remove -y yum-utils && yum clean all && dnf clean all && rm -r /var/cache/dnf && npm cache clean --force; && rm -rf /var/cache/yum\n\n# install specific version of yq (2.4.1)\nRUN wget https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64 -O /usr/bin/yq && \\\n    chmod +x /usr/bin/yq\n\n# install stern\nRUN cd /usr/local/bin && \\\n    wget https://github.com/wercker/stern/releases/download/1.11.0/stern_linux_amd64 -O /usr/local/bin/stern && \\\n    chmod 755 /usr/local/bin/stern && \\\n# install hey\n    wget https://mwh-demo-assets.s3-ap-southeast-2.amazonaws.com/hey_linux_amd64 -O /usr/local/bin/hey && \\\n    chmod 755 /usr/local/bin/hey\n\n# overwrite existing oc with the absolute newest version of the openshift client\nRUN curl -f -L https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz | \\\n    tar -xvzf - -C /usr/local/bin/ oc && chmod 755 /usr/local/bin/oc && ln -s /usr/local/bin/oc /usr/local/bin/kubectl\n\nUSER jboss\n\n# install and configure ohmyzsh for jboss user\nRUN wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh\n\n# needed for krew commands\nENV PATH=\"$HOME/.krew/bin:$PATH\"\n\n# install kube ctx and kube ns via krew\nRUN ( set -x; cd \"$(mktemp -d)\" && \\\n  OS=\"$(uname | tr '[:upper:]' '[:lower:]')\" && \\\n  ARCH=\"$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\\(arm\\)\\(64\\)\\?.*/\\1\\2/' -e 's/aarch64$/arm64/')\" && \\\n  curl -fsSLO \"https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz\" && \\\n  tar zxvf krew.tar.gz && \\\n  KREW=./krew-\"${OS}_${ARCH}\" && \\\n  \"$KREW\" install krew ) &&\\\n  kubectl krew install ctx && kubectl krew install ns && rm -rf -d && rm krew.tar.gz\n\n# Subdirectory where local-config files should reside (matched to gitignore to ensure no secrets are checked in)\nENV CONFIG_SUBDIR \"local-config\"\nENV DEMO_HOME \"/workspaces/kubernetes-tutorial/\"\n# Use VSCode with kubectl edit commands\nENV KUBE_EDITOR=\"code -w\"\n\n# this is done in the base image already (to support the demo shell images too), but for those that make\n# local changes to .zshrc they should not have to rebuild the base\nCOPY assets/.zshrc.example $HOME/.zshrc"
}