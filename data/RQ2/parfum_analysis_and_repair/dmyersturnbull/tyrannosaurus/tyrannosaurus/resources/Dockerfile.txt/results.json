{
  "startTime": 1674252911358,
  "endTime": 1674252912241,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://stackoverflow.com/questions/53835198/integrating-python-poetry-with-docker/54763270#54763270\n\nFROM python:3.9\n\n\n# --------------------------------------\n# ------------- Set labels -------------\n\n# See https://github.com/opencontainers/image-spec/blob/master/annotations.md\nLABEL name=\"$${project}\"\nLABEL version=\"$${version}\"\nLABEL vendor=\"$${user}\"\nLABEL org.opencontainers.image.title=\"$${project}\"\nLABEL org.opencontainers.image.version=\"$${version}\"\nLABEL org.opencontainers.image.url=\"https://github.com/$${user}/$${project}\"\nLABEL org.opencontainers.image.documentation=\"https://github.com/$${user}/$${project}\"\n\n\n# --------------------------------------\n# ---------- Copy and install ----------\n\n# Configure env variables for build/install\n# ENV no longer adds a layer in new Docker versions,\n# so we don't need to chain these in a single line\nENV PYTHONFAULTHANDLER=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONHASHSEED=random\nENV PIP_NO_CACHE_DIR=off\nENV PIP_DISABLE_PIP_VERSION_CHECK=on\nENV PIP_DEFAULT_TIMEOUT=120\nENV POETRY_VERSION=1.1.4\n\n# Install system deps\nRUN pip install --no-cache-dir \"poetry==$POETRY_VERSION\"\n\n# Copy only requirements to cache them in docker layer\nWORKDIR /code\nCOPY poetry.lock pyproject.toml /code/\n\n# Install with poetry\n# pip install would probably work, too, but we'd have to make sure it's a recent enough pip\n# Don't bother creating a virtual env -- significant performance increase\nRUN poetry config virtualenvs.create false \\\n  && poetry install --no-interaction --no-ansi\n\n# Copy everything (code) to our workdir\n# Our .dockerignore file should be good enough that we don't have extra stuff\nCOPY . /code\n\n\n# --------------------------------------\n# --------------- Run! -----------------\n\n# Now do something!\nCMD $${pkg} --help\n\n# Perhaps run a command:\n# CMD $${pkg} --my --options --etc\n# or expose a port:\n# EXPOSE 443/tcp\n"
}