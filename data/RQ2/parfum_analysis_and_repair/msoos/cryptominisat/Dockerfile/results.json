{
  "startTime": 1674249294564,
  "endTime": 1674249295860,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04 as builder\n\nLABEL maintainer=\"Mate Soos\"\nLABEL version=\"5.0\"\nLABEL Description=\"An advanced SAT solver\"\n\n# get curl, etc\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && rm -rf /var/lib/apt/lists/*\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test && rm -rf /var/lib/apt/lists/*\nRUN apt-get update && apt-get install --no-install-recommends -y libboost-program-options-dev gcc g++ make cmake zlib1g-dev wget && rm -rf /var/lib/apt/lists/*\n\n# get M4RI\nRUN wget https://bitbucket.org/malb/m4ri/downloads/m4ri-20140914.tar.gz \\\n    && tar -xvf m4ri-20140914.tar.gz && rm m4ri-20140914.tar.gz\nWORKDIR m4ri-20140914\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && make clean\n\n# set up build env\nRUN groupadd -r solver -g 433\nRUN useradd -u 431 -r -g solver -d /home/solver -s /sbin/nologin -c \"Docker image user\" solver\nRUN mkdir -p /home/solver/cms\nRUN chown -R solver:solver /home/solver\n\n# build CMS\nUSER root\nCOPY . /home/solver/cms\nWORKDIR /home/solver/cms\nRUN mkdir build\nWORKDIR /home/solver/cms/build\nRUN cmake -DSTATICCOMPILE=ON .. \\\n    && make -j6 \\\n    && make install \\\n    && rm -rf *\n\n# set up for running\nFROM alpine:latest\nCOPY --from=builder /usr/local/bin/cryptominisat5 /usr/local/bin/\nENTRYPOINT [\"/usr/local/bin/cryptominisat5\"]\n\n# --------------------\n# HOW TO USE\n# --------------------\n# on file through STDIN:\n#    zcat mizh-md5-47-3.cnf.gz | docker run --rm -i -a stdin -a stdout cms\n\n# on a file:\n#    docker run --rm -v `pwd`/myfile.cnf.gz:/in cms in\n\n# echo through STDIN:\n#    echo \"1 2 0\" | docker run --rm -i -a stdin -a stdout cms\n\n# hand-written CNF:\n#    docker run --rm -ti -a stdin -a stdout cms\n\n"
}