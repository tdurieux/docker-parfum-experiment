{
  "startTime": 1674252395851,
  "endTime": 1674252396831,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2017 Bret Fisher\n# use this empty Dockerfile to build your assignment\n\n# This dir contains a Node.js app, you need to get it running in a container\n# No modifications to the app should be necessary, only edit this Dockerfile\n\n# Overview of this assignment\n# use the instructions below to create a working Dockerfile\n# feel free to add command inline below or use a new file, up to you (but must be named Dockerfile)\n# once Dockerfile builds correctly, start container locally to make sure it works\n# access the web application from your browser at http://<docker-host-ip>\n# then ensure image is named properly for your Docker Hub account with a new repo name\n# push to Docker Hub, then go to https://hub.docker.com and verify\n# then remove local image from cache\n# then start a new container from your Hub image, and watch how it auto downloads and runs\n# test again that it works\n# access again the web application from your browser at http://<docker-host-ip>\n# in the end you should be using FROM, RUN, WORKDIR, COPY, EXPOSE, and CMD instructions\n\n# Instructions from the app developer\n# - you should use the 'node' official image, with the alpine 6.x branch\nFROM node:6-alpine\n# - this app listens on port 3000, but the container should launch on port 80\n#  so it will respond to http://<Docker-Host-IP>:80 on your computer\nEXPOSE 3000\n# - then it should use alpine package manager to install tini: 'apk add --update tini'\nRUN apk add --no-cache --update tini\n# - then it should create directory /usr/src/app for app files with 'mkdir -p /usr/src/app'\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\n# - Node uses a \"package manager\", so it needs to copy in package.json file\nWORKDIR /usr/src/app\nCOPY package.json package.json\n# - then it needs to run 'npm install' to install dependencies from that file\n# - to keep it clean and small, run 'npm cache clean --force' after above\nRUN npm install && npm cache clean --force\n# - then it needs to copy in all files from current directory\nCOPY . .\n# - then it needs to start container with command '/sbin/tini -- node ./bin/www'\n# On line documentation :\n# https://docs.docker.com/engine/reference/builder/#cmd\nCMD [\"tini\", \"--\", \"node\", \"./bin/www\"]\n\n\n\n"
}