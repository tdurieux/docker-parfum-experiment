{
  "startTime": 1674252708714,
  "endTime": 1674252709691,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG TRT_IMAGE_VERSION=20.09\nFROM nvcr.io/nvidia/tensorrt:${TRT_IMAGE_VERSION}-py3\n\nARG TRT_IMAGE_VERSION\nARG OPENCV_VERSION=4.1.1\nARG APP_DIR=/usr/src/app\nARG SCRIPT_DIR=/opt/tensorrt/python\nARG DEBIAN_FRONTEND=noninteractive\n\nENV HOME=${APP_DIR}\nENV TZ=America/Los_Angeles\n\nENV OPENBLAS_MAIN_FREE=1\nENV OPENBLAS_NUM_THREADS=1\nENV NO_AT_BRIDGE=1\n\n# Install OpenCV and FastMOT dependencies\nRUN apt-get -y update && \\\n    apt-get install -y --no-install-recommends \\\n    wget unzip tzdata \\\n    build-essential cmake pkg-config \\\n    libgtk-3-dev libcanberra-gtk3-module \\\n    libjpeg-dev libpng-dev libtiff-dev \\\n    libavcodec-dev libavformat-dev libswscale-dev \\\n    libv4l-dev libxvidcore-dev libx264-dev \\\n    gfortran libatlas-base-dev \\\n    python3-dev \\\n    gstreamer1.0-tools \\\n    libgstreamer1.0-dev \\\n    libgstreamer-plugins-base1.0-dev \\\n    gstreamer1.0-libav \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-plugins-ugly \\\n    libtbb2 libtbb-dev libdc1394-22-dev && \\\n    pip install -U --no-cache-dir setuptools pip && \\\n    pip install --no-cache-dir numpy==1.18.0 && rm -rf /var/lib/apt/lists/*;\n\n# Build OpenCV\nWORKDIR ${HOME}\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && rm ${OPENCV_VERSION}.zip && \\\n    mv opencv-${OPENCV_VERSION} OpenCV && \\\n    wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && rm ${OPENCV_VERSION}.zip && \\\n    mv opencv_contrib-${OPENCV_VERSION} OpenCV/opencv_contrib\n\n# If you have issues with GStreamer, set -DWITH_GSTREAMER=OFF and -DWITH_FFMPEG=ON\nWORKDIR ${HOME}/OpenCV/build\nRUN cmake \\\n    -DCMAKE_BUILD_TYPE=RELEASE \\\n    -DCMAKE_INSTALL_PREFIX=/usr/local \\\n    -DOPENCV_EXTRA_MODULES_PATH=${HOME}/OpenCV/opencv_contrib/modules \\\n    -DINSTALL_PYTHON_EXAMPLES=ON \\\n    -DINSTALL_C_EXAMPLES=OFF \\\n    -DBUILD_opencv_python2=OFF \\\n    -DBUILD_TESTS=OFF \\\n    -DBUILD_PERF_TESTS=OFF \\\n    -DBUILD_EXAMPLES=ON \\\n    -DBUILD_PROTOBUF=OFF \\\n    -DENABLE_FAST_MATH=ON \\\n    -DWITH_TBB=ON \\\n    -DWITH_LIBV4L=ON \\\n    -DWITH_CUDA=OFF \\\n    -DWITH_GSTREAMER=ON \\\n    -DWITH_GSTREAMER_0_10=OFF \\\n    -DWITH_FFMPEG=OFF .. && \\\n    make -j$(nproc) && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf ${HOME}/OpenCV && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get autoremove\n\n# Install Python dependencies\nWORKDIR ${APP_DIR}/FastMOT\nCOPY requirements.txt .\n\n# Specify your GPU compute with --build-arg for CuPy (e.g. \"arch=compute_75,code=sm_75\")\nARG CUPY_NVCC_GENERATE_CODE\n\n# TensorFlow < 2 is not supported in ubuntu 20.04\nRUN if [[ -z ${CUPY_NVCC_GENERATE_CODE} ]]; then \\\n        echo \"CUPY_NVCC_GENERATE_CODE not set, building CuPy for all architectures (slower)\"; \\\n    fi && \\\n    if dpkg --compare-versions ${TRT_IMAGE_VERSION} ge 20.12; then \\\n        CUPY_NUM_BUILD_JOBS=$(nproc) pip install --no-cache-dir -r <(grep -ivE \"tensorflow\" requirements.txt); \\\n    else \\\n        dpkg -i ${SCRIPT_DIR}/*-tf_*.deb && \\\n        CUPY_NUM_BUILD_JOBS=$(nproc) pip install --no-cache-dir -r requirements.txt; \\\n    fi\n\n# ------------------------------------  Extras Below  ------------------------------------\n\n# Stop the container (changes are kept)\n# docker stop $(docker ps -ql)\n\n# Start the container\n# docker start -ai $(docker ps -ql)\n\n# Delete the container\n# docker rm $(docker ps -ql)\n\n# Save changes before deleting the container\n# docker commit $(docker ps -ql) fastmot:latest\n"
}