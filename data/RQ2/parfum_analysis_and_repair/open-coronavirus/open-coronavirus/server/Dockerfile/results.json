{
  "startTime": 1674249832141,
  "endTime": 1674249833396,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 15,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Set to a non-root built-in user `node`\nFROM node:10.15.3\nMAINTAINER Antonio PÃ¡rraga <antonio@parraga.es>\n\n# use changes to package.json to force Docker not to use the cache\n# when we change our application's nodejs dependencies:\nADD ./package.json /tmp/package.json\nADD .npmrc /tmp/.npmrc\nRUN cd /tmp && yarn install --no-optional && yarn cache clean;\nRUN mkdir -p /opt/server && mkdir -p /opt/common && cp -a /tmp/node_modules /opt/server/\n\n# install pm2\nRUN npm install pm2 -g && npm cache clean --force;\n\n# From here we load our application's code in, therefore the previous docker\n# \"layer\" thats been cached will be used if possible\nWORKDIR /opt/server\nADD . /opt/server\nADD src/common /opt/common\n\nRUN npm run clean\nRUN npm run build\n\n#Copy .env files to deliverable dir\nADD .env* /opt/server/\n\n# Bind to all network interfaces so that it can be mapped to the host OS\nENV HOST=0.0.0.0 PORT=9050\n\nEXPOSE ${PORT}\nCMD [ \"npm\", \"run\", \"start:prod\" ]\n"
}