{
  "startTime": 1674215166899,
  "endTime": 1674215168278,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 77
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 77
      }
    }
  ],
  "repairedDockerfile": "# **************************************************************************** #\n#                                                                              #\n#                                                         :::      ::::::::    #\n#    Dockerfile                                         :+:      :+:    :+:    #\n#                                                     +:+ +:+         +:+      #\n#    By: nmei <marvin@42.fr>                        +#+  +:+       +#+         #\n#                                                 +#+#+#+#+#+   +#+            #\n#    Created: 2018/03/01 00:47:22 by nmei              #+#    #+#              #\n#    Updated: 2018/03/01 00:47:24 by nmei             ###   ########.fr        #\n#                                                                              #\n# **************************************************************************** #\n#\n# ============================= ft_sommelier ===================================\n#\n# This Dockerfile setup assumes you are going to be using the same physical\n# mac for a project. In theory, it should not matter which physical mac you end\n# up using, but I take no responsibility if you change where you sit, and stuff\n# suddenly doesn't work >_>.\n#\n# ========= Initial Setup Commands (should only be run once, probably!) ========\n#\n# Run these following commands:\n# 1) docker-machine create --driver virtualbox sommelier\n#\n# If docker-machine doesn't run, you'll need to: brew install docker-machine\n# Wait for 1) to finish running completely before running 2)!!\n# 2) eval $(docker-machine env sommelier)\n#\n# `cd` into the whichever directory contains this Dockerfile then run 3)\n# If docker doesn't run, you'll need to: brew install docker\n# 3) docker build -t ft_sommelier .\n# 4) docker volume create notebooks\n#\n# ================== Starting up a ft_sommelier container ======================\n#\n# Remember the 8888/?token=... part that will show up when you run 5)!!\n# 5) docker run -it -p 8888:8888 -v notebooks:/notebooks ft_sommelier\n#\n# You can get your <docker-host-ip> with: docker-machine ip sommelier\n# In your browser address:\n# 6) <docker-host-ip>:8888/?token=...%\n#\n# ==================== What to do if I restart or log out? =====================\n#\n# If you log out or restart your computer you'll need to restart the\n# docker machine when you log back into your mac. Run the following:\n#\n# 7) docker-machine start sommelier\n# 8) eval $(docker-machine env sommelier)\n# Then you can proceed to re-run steps 5) and 6) again\n#\n# ================= Finished the project and want to cleanup? ==================\n#\n# After you are done with the project it might be a good idea to clean up all\n# images and the virtual machine since they take up a LOT of space...\n# (Do it for Tony!!!)\n#\n# WARNING: THE FOLLOWING COMMANDS WILL DELETE ALL NOTEBOOKS AND DATA!!\n#\n# 9) docker stop $(docker ps -a -q)\n# 10) docker rmi $(docker images -a -q)\n# 11) docker volume prune\n# 12) docker-machine rm sommelier\n\nFROM debian\n\n# Installing prerequisites for miniconda\nRUN apt-get -y update --fix-missing && apt-get -y upgrade\nRUN apt-get install --no-install-recommends -y wget bzip2 ca-certificates git build-essential \\\npython-dev libglib2.0-0 libxext6 libsm6 libxrender1 pandoc libav-tools ffmpeg && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Installing miniconda\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh\nRUN wget https://repo.continuum.io/miniconda/Miniconda3-4.3.27-Linux-x86_64.sh \\\n-O ~/miniconda.sh\nRUN /bin/bash ~/miniconda.sh -b -p /opt/conda\nRUN rm ~/miniconda.sh\nRUN mkdir -p /notebooks\nENV PATH $PATH:/opt/conda/bin\n\n# Installing scientific python stack\nRUN conda install gcc_linux-64 cython numpy pandas matplotlib jupyter\n\n# Container config\nWORKDIR /notebooks\nEXPOSE 8888\nCMD [\"jupyter\", \"notebook\", \"--ip=0.0.0.0\", \"--allow-root\", \"--no-browser\"]\n"
}