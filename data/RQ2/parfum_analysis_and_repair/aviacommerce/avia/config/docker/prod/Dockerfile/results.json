{
  "startTime": 1674255064620,
  "endTime": 1674255065182,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 5,
        "columnEnd": 54
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 5,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 5,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 5,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 5,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 5,
        "columnEnd": 91
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 5,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 5,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 5,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We are using wkhtmltopdf to generate PDF files. Unfortunately according to\n# madnight, compiling wkhtmltopdf from scratch will take hours even with the\n# largest ec2 instance. So here we take the precompiled binary from the other\n# image available on Dockerfile - we will get to this in final stage.\n#\n\n# Builder stage\nFROM elixir:1.7.3-slim as builder\n\nARG PHOENIX_SECRET_KEY_BASE\nARG SESSION_COOKIE_NAME\nARG SESSION_COOKIE_SIGNING_SALT\nARG SESSION_COOKIE_ENCRYPTION_SALT\nARG DATABASE_URL\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nARG BUCKET_NAME\nARG AWS_DEFAULT_REGION\nARG FRONTEND_CHECKOUT_URL\nARG HOSTED_PAYMENT_URL\nARG SENDGRID_API_KEY\nARG SENDGRID_SENDER_EMAIL\nARG FRONTEND_URL\nARG BACKEND_URL\nARG ELASTIC_HOST\n\n# Install essential packages for application build\nRUN apt-get clean \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y apt-utils apt-transport-https curl git make inotify-tools gnupg g++ \\\n  && curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n  && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n  && curl -f -sL https://deb.nodesource.com/setup_8.x | bash \\\n  && apt-get install --no-install-recommends -y nodejs yarn && rm -rf /var/lib/apt/lists/*;\n\nENV MIX_ENV=prod \\\n    PHOENIX_SECRET_KEY_BASE=$PHOENIX_SECRET_KEY_BASE \\\n    SESSION_COOKIE_NAME=$SESSION_COOKIE_NAME \\\n    SESSION_COOKIE_SIGNING_SALT=$SESSION_COOKIE_SIGNING_SALT \\\n    SESSION_COOKIE_ENCRYPTION_SALT=$SESSION_COOKIE_ENCRYPTION_SALT \\\n    DATABASE_URL=$DATABASE_URL \\\n    AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \\\n    AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \\\n    BUCKET_NAME=$BUCKET_NAME \\\n    AWS_REGION=$AWS_DEFAULT_REGION \\\n    FRONTEND_CHECKOUT_URL=$FRONTEND_CHECKOUT_URL \\\n    HOSTED_PAYMENT_URL=$HOSTED_PAYMENT_URL \\\n    SENDGRID_API_KEY=$SENDGRID_API_KEY \\\n    SENDGRID_SENDER_EMAIL=$SENDGRID_SENDER_EMAIL \\\n    FRONTEND_URL=$FRONTEND_URL \\\n    BACKEND_URL=$BACKEND_URL \\\n    ELASTIC_HOST=$ELASTIC_HOST\n\nWORKDIR /snitch\n\n# Umbrella\nCOPY mix.exs mix.lock ./\nCOPY config config\n\n# Apps\nCOPY apps apps\nRUN mix do local.hex --force, local.rebar --force\nRUN mix do deps.get, deps.compile\n\n# Create assets build for admin app\nRUN cd apps/admin_app/assets \\\n  && yarn install \\\n  && yarn deploy \\\n  && cd .. \\\n  && mix phx.digest && yarn cache clean;\n\nWORKDIR /snitch\nCOPY rel rel\n\nRUN mix release --env=prod --verbose\n\n### Release\nFROM staticfloat/nginx-certbot\n\nRUN apt-get clean \\\n  && apt-get update \\\n  && apt-get -y --no-install-recommends install curl tar file xz-utils build-essential cron \\\n  && apt-get -y --no-install-recommends install python-certbot-nginx \\\n  && apt-get -y --no-install-recommends install imagemagick wkhtmltopdf xvfb \\\n  # Resolves issue `QXcbConnection: Could not connect to display`\n  # https://github.com/JazzCore/python-pdfkit/wiki/Using-wkhtmltopdf-without-X-server#debianubuntu\n  && printf '#!/bin/bash\\nxvfb-run -a --server-args=\"-screen 0, 1024x768x24\" /usr/bin/wkhtmltopdf -q $*' > /usr/bin/wkhtmltopdf.sh \\\n  && chmod a+x /usr/bin/wkhtmltopdf.sh \\\n  && ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf \\\n  && apt-get install -y --no-install-recommends locales \\\n  # Supress earlang vm waning form locale issue\n  && export LANG=en_US.UTF-8 \\\n  && echo $LANG UTF-8 > /etc/locale.gen \\\n  && locale-gen \\\n  && update-locale LANG=$LANG \\\n  # Remove unwanted package after use\n  && apt-get purge -y curl file xz-utils build-essential locales \\\n  && apt-get -y autoremove \\\n  && apt-get -y clean && rm -rf /var/lib/apt/lists/*;\n\nENV MIX_ENV=prod \\\n    SHELL=/bin/bash \\\n    PHOENIX_SECRET_KEY_BASE=$PHOENIX_SECRET_KEY_BASE \\\n    SESSION_COOKIE_NAME=$SESSION_COOKIE_NAME \\\n    SESSION_COOKIE_SIGNING_SALT=$SESSION_COOKIE_SIGNING_SALT \\\n    SESSION_COOKIE_ENCRYPTION_SALT=$SESSION_COOKIE_ENCRYPTION_SALT \\\n    DATABASE_URL=$DATABASE_URL \\\n    AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \\\n    AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \\\n    BUCKET_NAME=$BUCKET_NAME \\\n    AWS_REGION=$AWS_DEFAULT_REGION \\\n    FRONTEND_CHECKOUT_URL=$FRONTEND_CHECKOUT_URL \\\n    HOSTED_PAYMENT_URL=$HOSTED_PAYMENT_URL \\\n    SENDGRID_API_KEY=$SENDGRID_API_KEY \\\n    SENDGRID_SENDER_EMAIL=$SENDGRID_SENDER_EMAIL \\\n    FRONTEND_URL=$FRONTEND_URL \\\n    BACKEND_URL=$BACKEND_URL\n\n# nginx conf\nCOPY config/deploy/conf.d /etc/nginx/conf.d\nCOPY config/deploy/letsencrypt /etc/letsencrypt\n\nWORKDIR /snitch\n\nCOPY --from=builder snitch/_build/prod/rel/snitch/releases/0.0.1/snitch.tar.gz .\nRUN tar zxf snitch.tar.gz && rm snitch.tar.gz\n\n# RUN certbot -n --authenticator standalone --installer nginx -d api.aviacommerce.org -d admin.aviacommerce.org --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --agree-tos --email \"hello@aviabird.com\"\n\nRUN echo \"nginx && /snitch/bin/snitch foreground\" >> run.sh\n\nCMD [\"sh\", \"/snitch/run.sh\"]\n"
}