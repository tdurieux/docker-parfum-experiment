{
  "startTime": 1674251997733,
  "endTime": 1674251998696,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#---------------------------------------\n# Control-M Remote Host docker container\n#---------------------------------------\n\nFROM mhart/alpine-node:latest\nMAINTAINER Nathan Amichay <nathan_amichay@bmc.com>\n\nARG CTMHOST\nARG USER\nARG PASSWORD\n\n#install wget openssl ca-certificates\nRUN apk update \\\n    && apk add --no-cache ca-certificates wget \\\n    && update-ca-certificates\n\n# install nodejs npm\nRUN apk update \\\n    && apk add --no-cache --update nodejs nodejs-npm \\\n    && npm -g install npm@latest \\\n    && node -v \\\n    && npm -v && npm cache clean --force;\n\n# install ctm-automation-api kit\nWORKDIR /root\nRUN mkdir ctm-automation-api \\\n\t&& cd ctm-automation-api \\\n\t&& wget --no-check-certificate https://$CTMHOST:8443/automation-api/ctm-cli.tgz \\\n\t&& npm install -g ctm-cli.tgz \\\n\t&& ctm -v && npm cache clean --force;\n\n# add controlm endpoint\nRUN ctm env add endpoint https://$CTMHOST:8443/automation-api $USER $PASSWORD \\\n\t&& ctm env set endpoint\n\n# copy run and resiter controlm agent script to container\nCOPY run_register_controlm.sh /run_register_controlm.sh\nCOPY decommission_controlm.sh /decommission_controlm.sh\nRUN chmod +x /run_register_controlm.sh \\\n\t&& chmod +x /decommission_controlm.sh\n\n# install and configure sshd\n# based on https://github.com/ourtownrentals/docker-sshd\nRUN apk update \\\n && apk add bash git openssh rsync \\\n && mkdir -p ~root/.ssh \\\n && chmod 700 ~root/.ssh/ \\\n && echo -e \"Port 22\\n\" >> /etc/ssh/sshd_config \\\n && echo -e \"PasswordAuthentication no\\n\" >> /etc/ssh/sshd_config \\\n && echo -e \"ChallengeResponseAuthentication no\\n\" >> /etc/ssh/sshd_config \\\n && cp -a /etc/ssh /etc/ssh.cache \\\n && rm -rf /var/cache/apk/*\n\nEXPOSE 22\n\nCOPY entry.sh /entry.sh\nRUN chmod +x /entry.sh\n\nENTRYPOINT [\"/entry.sh\"]\n\nCMD [\"/usr/sbin/sshd\", \"-D\", \"-f\", \"/etc/ssh/sshd_config\"]\n"
}