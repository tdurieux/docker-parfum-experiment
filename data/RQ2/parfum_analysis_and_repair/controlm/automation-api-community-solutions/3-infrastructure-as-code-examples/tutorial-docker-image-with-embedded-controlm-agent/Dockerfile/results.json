{
  "startTime": 1674252613793,
  "endTime": 1674252614540,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#-----------------------------------------------------------------------\n# Control-M/Agent in a docker container in user-defined network\n# The docker host is an AWS Linux machine\n#-----------------------------------------------------------------------\n\nFROM centos:7\nMAINTAINER Joe Goldberg <joe_goldberg@bmc.com>\n\nARG CTMHOST\nARG CTMENV\n\n# install basic packages\nRUN yum -y update \\\r\n\t&& yum -y install wget \\\r\n\t&& yum -y install unzip \\\r\n\t&& yum -y install sudo \\\r\n\t&& yum -y install net-tools \\\n\t&& yum -y install psmisc && rm -rf /var/cache/yum\n\n# install nodejs\nRUN curl -f --silent --location https://rpm.nodesource.com/setup_6.x | bash - \\\n\t&& yum -y install nodejs \\\n\t&& node -v \\\n\t&& npm -v && rm -rf /var/cache/yum\n\n# install java 8\nRUN yum -y install java-1.8.0-openjdk \\\n\t&& java -version && rm -rf /var/cache/yum\n\n# install ctm-automation-api kit\nWORKDIR /root\nRUN mkdir ctm-automation-api \\\r\n\t&& cd ctm-automation-api \\\r\n\t&& wget --no-check-certificate https://$CTMHOST:8443/automation-api/ctm-cli.tgz \\\r\n\t&& npm install -g ctm-cli.tgz \\\n\t&& ctm -v && npm cache clean --force;\n\n# add ec2-user user and root to soduers list\nRUN useradd -d /home/ec2-user -p ec2-user -m ec2-user \\\r\n\t&& echo 'root ALL=(ALL) ALL' >> /etc/sudoers \\\r\n\t&& echo 'ec2-user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n\n# Extract Control-M Environment definition for the specified CTMENV\n# and add to current user\nUSER ec2-user\nWORKDIR /home/ec2-user\n\n# Copy secrets from Docker build context - If running in a Swarm, use Docker secrets management or any desired vault\n# and create a default environment with the secret info\nRUN mkdir /tmp/.ctm\nCOPY $CTMENV/*.secret /home/ec2-user/\nRUN ctm env add myctm `cat endpoint.secret` `cat username.secret` `cat password.secret`\nRUN ctm env set myctm\n\n# provision controlm agent image\nRUN cd \\\r\n\t&& ctm provision image Agent.Linux\n\n# enable controlm agent utilities\nRUN echo \"source /home/ec2-user/.bash_profile\" >> /home/ec2-user/.bashrc\n\n# copy run and register Control-M agent script to container\nCOPY run_register_controlm.sh /tmp\nCOPY decommission_controlm.sh /tmp\nRUN cp /tmp/run_register_controlm.sh /home/ec2-user \\\r\n\t&& cp /tmp/decommission_controlm.sh /home/ec2-user \\\r\n\t&& chmod +x run_register_controlm.sh \\\r\n\t&& chmod +x decommission_controlm.sh\n\n# copy sample job flow to container\nCOPY MultiContainerSampleFlow.json /home/ec2-user/\n\nEXPOSE 7000-8000\nEXPOSE 22\n\nCMD [\"/home/ec2-user/run_register_controlm.sh\"]\n"
}