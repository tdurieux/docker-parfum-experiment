{
  "startTime": 1674252717684,
  "endTime": 1674252719088,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 57,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 31,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 31,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 31,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 53,
        "columnStart": 26,
        "columnEnd": 75
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 31,
        "columnEnd": 112
      }
    }
  ],
  "repairedDockerfile": "ARG UBUNTU_VERSION\n\nFROM ubuntu:$UBUNTU_VERSION AS base\n\nARG RUBY_VERSION\nARG PG_MAJOR\nARG NODE_MAJOR\nARG BUNDLER_VERSION\nARG YARN_VERSION\nARG PYTHON_VERSION\nARG USER\n\n# install packages\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n    build-essential \\\n    software-properties-common \\\n    postgresql-client-$PG_MAJOR \\\n    tzdata \\\n    libpq-dev \\\n    libv8-dev \\\n    ruby-svn \\\n    ghostscript \\\n    imagemagick \\\n    libmagickwand-dev \\\n    cmake \\\n    libaprutil1-dev \\\n    libssl-dev \\\n    swig \\\n    graphviz \\\n    git \\\n    python3-venv \\\n    python3-dev \\\n    pandoc \\\n    libgl1 && rm -rf /var/lib/apt/lists/*;\n\n# Install node\nADD https://deb.nodesource.com/setup_$NODE_MAJOR.x /tmp/setup_node.sh\nRUN bash /tmp/setup_node.sh && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq nodejs && rm /tmp/setup_node.sh && rm -rf /var/lib/apt/lists/*;\n\n# Install yarn (see https://yarnpkg.com/getting-started/install)\nRUN corepack enable && yarn set version $YARN_VERSION && yarn config set --home enableTelemetry 0 && yarn cache clean;\n\n# Add ppa so that we can select different ruby versions and install ruby\nRUN apt-add-repository -y ppa:brightbox/ruby-ng && \\\n    apt-get update -qq && \\\n    apt-get install --no-install-recommends -yq ruby$RUBY_VERSION ruby${RUBY_VERSION}-dev rubygems-integration && \\\n    apt-add-repository -y --remove ppa:brightbox/ruby-ng && rm -rf /var/lib/apt/lists/*;\n\n# Add ppa so that we can get the right python version and install python\nRUN apt-add-repository -y ppa:deadsnakes/ppa && \\\n    apt-get update -qq && apt-get install -yq --no-install-recommends python${PYTHON_VERSION} \\\n                                                python${PYTHON_VERSION}-venv \\\n                                                python${PYTHON_VERSION}-dev && \\\n    apt-add-repository -y --remove ppa:deadsnakes/ppa && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    truncate -s 0 /var/log/*log\n\n# Enable reading of PDF files with imagemagick\nRUN sed -ri 's/(rights=\")none(\"\\s+pattern=\"PDF\")/\\1read\\2/' /etc/ImageMagick-6/policy.xml\n\nRUN useradd -m -s /bin/bash $USER\n\nRUN ln -fs $(which python${PYTHON_VERSION}) /usr/bin/python3\n\nENV GEM_HOME=\"/bundle\"\nENV PATH=\"$GEM_HOME/bin:$GEM_HOME/gems/bin:$PATH\"\n\nWORKDIR /app\n\nFROM base AS dev\n\nARG USER\nARG BUNDLER_VERSION\nARG RUBY_VERSION\n\n# pre-create mount-points for volumes and set ownership of these mountpoints\nRUN mkdir -p /bundle \\\n             /app/data/dev/repos \\\n             /app/tmp \\\n             /app/node_modules \\\n             /app/public/packs \\\n             /app/public/packs-test \\\n             /app/log \\\n             /app/venv && \\\n             chown -R $USER /bundle /app\n\nUSER $USER\n\n# install bundler\nRUN gem$RUBY_VERSION install bundler -v $BUNDLER_VERSION\n\nFROM base AS prod\n\nARG USER\nARG BUNDLER_VERSION\nARG RUBY_VERSION\n\nRUN mkdir -p /bundle /app /app/public && chown -R $USER /bundle /app\n\nUSER $USER\n\nCOPY --chown=${USER}:${USER} . /app\nCOPY --chown=${USER}:${USER} .dockerfiles/database.yml.postgresql /app/config/database.yml\n\n# install python packages\nRUN python${PYTHON_VERSION} -m venv /app/venv && \\\n    /app/venv/bin/pip install nbconvert==6.1.0\n\nENV RAILS_ENV=production\nENV NODE_ENV=production\n\n# install bundler\nRUN gem$RUBY_VERSION install bundler -v $BUNDLER_VERSION\n\nRUN SECRET_KEY_BASE=1 bundle install --deployment --path $GEM_HOME --without development test offline mysql sqlite\n\nRUN SECRET_KEY_BASE=1 NO_SCHEMA_VALIDATE=true PGDATABASE=dummy bundle exec rails i18n:js:export && \\\n    SECRET_KEY_BASE=1 NO_SCHEMA_VALIDATE=true PGDATABASE=dummy bundle exec rails assets:precompile\n"
}