diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/werf/werf/stapel/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/werf/werf/stapel/Dockerfile/repaired.Dockerfile
index f81ff19..5790323 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/werf/werf/stapel/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/werf/werf/stapel/Dockerfile/repaired.Dockerfile
@@ -9,10 +9,10 @@ SHELL ["/bin/bash", "-lc"]
 
 ENV DEBIAN_FRONTEND=noninteractive
 
-RUN apt update && apt install -y \
+RUN apt update && apt install --no-install-recommends -y \
 build-essential wget curl gawk flex bison bzip2 liblzma5 texinfo file \
 gettext python python3 curl git fakeroot gettext gpg ruby ruby-bundler \
-ruby-dev make file m4 xz-utils texlive vim rsync
+ruby-dev make file m4 xz-utils texlive vim rsync && rm -rf /var/lib/apt/lists/*;
 
 RUN git config --global user.name flant && git config --global user.email 256@flant.com
 
@@ -45,7 +45,7 @@ cd build && \
 --with-lib-path=$TOOLS/lib \
 --target=$LFS_TGT \
 --disable-nls \
---disable-werror
+--disable-werror && rm binutils-*.tar.*
 WORKDIR $LFS/sources/binutils/build
 RUN make
 RUN mkdir -pv $TOOLS/lib && ln -sv lib $TOOLS/lib64 && make install
@@ -86,14 +86,14 @@ cd build && \
 --disable-libssp \
 --disable-libvtv \
 --disable-libstdcxx \
---enable-languages=c,c++
+--enable-languages=c,c++ && rm gcc-*.tar.*
 WORKDIR $LFS/sources/gcc/build
 RUN make
 RUN make install
 
 RUN cd $LFS/sources/ && \
 mkdir linux && \
-tar xf linux*.tar.* -C linux --strip-components 1
+tar xf linux*.tar.* -C linux --strip-components 1 && rm linux*.tar.*
 WORKDIR $LFS/sources/linux
 RUN echo "Linux API Headers" && make mrproper && \
 make INSTALL_HDR_PATH=dest headers_install && \
@@ -112,7 +112,7 @@ cd build && \
 --with-headers=$TOOLS/include \
 libc_cv_forced_unwind=yes \
 libc_cv_c_cleanup=yes \
-libc_cv_slibdir=$TOOLS/lib
+libc_cv_slibdir=$TOOLS/lib && rm glibc*.tar.*
 WORKDIR $LFS/sources/glibc/build
 RUN make
 RUN make install
@@ -140,7 +140,7 @@ cd build && \
 --disable-nls \
 --disable-libstdcxx-pch \
 --disable-libstdcxx-threads \
---with-gxx-include-dir=$TOOLS/$LFS_TGT/include/c++/11.2.0
+--with-gxx-include-dir=$TOOLS/$LFS_TGT/include/c++/11.2.0 && rm gcc-*.tar.*
 WORKDIR $LFS/sources/gcc/build
 RUN make
 RUN make install
@@ -162,7 +162,7 @@ RANLIB=$LFS_TGT-ranlib \
 --enable-shared \
 --disable-werror \
 --enable-64-bit-bfd \
---with-lib-path=$TOOLS/lib
+--with-lib-path=$TOOLS/lib && rm binutils-*.tar.*
 
 RUN echo "GCC pass 2" && cd $LFS/sources/ && \
 rm -rf gcc && \
@@ -204,7 +204,7 @@ CC_FOR_TARGET=$LFS_TGT-gcc \
 --with-sysroot=$LFS \
 --with-native-system-header-dir=$TOOLS/include \
 --oldincludedir=$TOOLS/include \
---enable-languages=c,c++
+--enable-languages=c,c++ && rm gcc-*.tar.*
 WORKDIR $LFS/sources/gcc/build
 RUN make
 RUN make DESTDIR=$LFS install
@@ -214,17 +214,17 @@ RUN for tool in $(ls /.werf/stapel/bin/ | grep $LFS_TGT) ; do ln -fs /.werf/stap
 # libffi
 RUN echo "libffi" && cd $LFS/sources && \
 mkdir libffi && \
-tar xf libffi-*.tar.* -C libffi --strip-components 1
+tar xf libffi-*.tar.* -C libffi --strip-components 1 && rm libffi-*.tar.*
 WORKDIR $LFS/sources/libffi
-RUN ./configure --prefix=$TOOLS --disable-static --with-gcc-arch=native
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS --disable-static --with-gcc-arch=native
 RUN make
 RUN make install
 
 ENV PATH=/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin
-RUN apt install -y libssl-dev autoconf automake libffi-dev libgdbm-dev libncurses5-dev libsqlite3-dev libtool libyaml-dev pkg-config sqlite3 zlib1g-dev libreadline-dev libssl-dev
-RUN curl -sSL https://rvm.io/mpapis.asc | gpg --import -
-RUN curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -
-RUN curl -sSL https://get.rvm.io -o /tmp/rvm.sh && cat /tmp/rvm.sh | bash -s stable
+RUN apt install --no-install-recommends -y libssl-dev autoconf automake libffi-dev libgdbm-dev libncurses5-dev libsqlite3-dev libtool libyaml-dev pkg-config sqlite3 zlib1g-dev libreadline-dev libssl-dev && rm -rf /var/lib/apt/lists/*;
+RUN curl -f -sSL https://rvm.io/mpapis.asc | gpg --batch --import -
+RUN curl -f -sSL https://rvm.io/pkuczynski.asc | gpg --batch --import -
+RUN curl -f -sSL https://get.rvm.io -o /tmp/rvm.sh && cat /tmp/rvm.sh | bash -s stable
 RUN source /etc/profile.d/rvm.sh && rvm install 2.7
 
 ADD stapel/omnibus /omnibus
@@ -257,64 +257,64 @@ RUN bash -c "pushd $LFS/sources && md5sum -c $LFS/sources/wget-list-after-omnibu
 # libgpg-error
 RUN echo "libgpg-error" && cd $LFS/sources && \
 mkdir libgpg-error && \
-tar xf libgpg-error*.tar.* -C libgpg-error --strip-components 1
+tar xf libgpg-error*.tar.* -C libgpg-error --strip-components 1 && rm libgpg-error*.tar.*
 WORKDIR $LFS/sources/libgpg-error
 RUN sed -i 's/namespace/pkg_&/' src/Makefile.{am,in} src/mkstrtable.awk
-RUN ./configure --prefix=$TOOLS
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS
 RUN make
 RUN make install
 
 # libgcrypt
 RUN echo "libgcrypt" && cd $LFS/sources && \
 mkdir libgcrypt && \
-tar xf libgcrypt*.tar.* -C libgcrypt --strip-components 1
+tar xf libgcrypt*.tar.* -C libgcrypt --strip-components 1 && rm libgcrypt*.tar.*
 WORKDIR $LFS/sources/libgcrypt
-RUN ./configure --prefix=$TOOLS
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS
 RUN make
 RUN make install
 
 # libassuan
 RUN echo "libassuan" && cd $LFS/sources && \
 mkdir libassuan && \
-tar xf libassuan*.tar.* -C libassuan --strip-components 1
+tar xf libassuan*.tar.* -C libassuan --strip-components 1 && rm libassuan*.tar.*
 WORKDIR $LFS/sources/libassuan
-RUN ./configure --prefix=$TOOLS
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS
 RUN make
 RUN make install
 
 # libksba
 RUN echo "libksba" && cd $LFS/sources && \
 mkdir libksba && \
-tar xf libksba*.tar.* -C libksba --strip-components 1
+tar xf libksba*.tar.* -C libksba --strip-components 1 && rm libksba*.tar.*
 WORKDIR $LFS/sources/libksba
-RUN ./configure --prefix=$TOOLS
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS
 RUN make
 RUN make install
 
 # npth
 RUN echo "npth" && cd $LFS/sources && \
 mkdir npth && \
-tar xf npth*.tar.* -C npth --strip-components 1
+tar xf npth*.tar.* -C npth --strip-components 1 && rm npth*.tar.*
 WORKDIR $LFS/sources/npth
-RUN ./configure --prefix=$TOOLS
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS
 RUN make
 RUN make install
 
 # gmp
 RUN echo "gmp" && cd $LFS/sources && \
 mkdir gmp && \
-tar xf gmp*.tar.* -C gmp --strip-components 1
+tar xf gmp*.tar.* -C gmp --strip-components 1 && rm gmp*.tar.*
 WORKDIR $LFS/sources/gmp
-RUN ./configure --prefix=$TOOLS --disable-static
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS --disable-static
 RUN make
 RUN make install
 
 # nettle
 RUN echo "nettle" && cd $LFS/sources && \
 mkdir nettle && \
-tar xf nettle*.tar.* -C nettle --strip-components 1
+tar xf nettle*.tar.* -C nettle --strip-components 1 && rm nettle*.tar.*
 WORKDIR $LFS/sources/nettle
-RUN ./configure --prefix=$TOOLS --disable-static
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS --disable-static
 RUN make
 RUN make install && chmod -v 755 $TOOLS/lib/libnettle.so
 
@@ -328,37 +328,37 @@ RUN make install && chmod -v 755 $TOOLS/lib/libnettle.so
 # gnutls
 RUN echo "gnutls" && cd $LFS/sources && \
 mkdir gnutls && \
-tar xf gnutls*.tar.* -C gnutls --strip-components 1
+tar xf gnutls*.tar.* -C gnutls --strip-components 1 && rm gnutls*.tar.*
 WORKDIR $LFS/sources/gnutls
-RUN ./configure --prefix=$TOOLS --disable-guile --without-p11-kit --with-included-libtasn1 --with-included-unistring
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS --disable-guile --without-p11-kit --with-included-libtasn1 --with-included-unistring
 RUN make
 RUN make install
 
 # gnupg
 RUN echo "gnupg" && cd $LFS/sources && \
 mkdir gnupg && \
-tar xf gnupg*.tar.* -C gnupg --strip-components 1
+tar xf gnupg*.tar.* -C gnupg --strip-components 1 && rm gnupg*.tar.*
 WORKDIR $LFS/sources/gnupg
-RUN ./configure --prefix=$TOOLS --enable-symcryptrun --localstatedir=/.werf/stapel/var --sysconfdir=/etc --disable-sqlite
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS --enable-symcryptrun --localstatedir=/.werf/stapel/var --sysconfdir=/etc --disable-sqlite
 RUN make
 RUN make install
 
 # util-linux
 RUN echo "util-linux" && cd $LFS/sources && \
 mkdir util-linux && \
-tar xf util-linux-*.tar.* -C util-linux --strip-components 1
+tar xf util-linux-*.tar.* -C util-linux --strip-components 1 && rm util-linux-*.tar.*
 WORKDIR $LFS/sources/util-linux
-RUN ./configure --prefix=$TOOLS --without-python --disable-makeinstall-chown --without-systemdsystemunitdir PKG_CONFIG=""
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS --without-python --disable-makeinstall-chown --without-systemdsystemunitdir PKG_CONFIG=""
 RUN make
 RUN make install
 
 # glib
 RUN PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin apt update
-RUN PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin apt install -y python3-pip xsltproc
-RUN PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin pip3 install meson ninja
+RUN PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin apt --no-install-recommends install -y python3-pip xsltproc && rm -rf /var/lib/apt/lists/*;
+RUN PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin pip3 --no-cache-dir install meson ninja
 RUN echo "glib" && cd $LFS/sources && \
 mkdir glib && \
-tar xf glib-*.tar* -C glib --strip-components 1
+tar xf glib-*.tar* -C glib --strip-components 1 && rm glib-*.tar*
 WORKDIR $LFS/sources/glib
 RUN LDFLAGS="-static-libgcc -Wl,-rpath-link,$TOOLS/lib,-rpath-link,$TOOLS/x86_64-lfs-linux-gnu/lib,-rpath-link,$TOOLS/embedded/lib,--library-path,$TOOLS/lib,--library-path,$TOOLS/x86_64-lfs-linux-gnu/lib,--library-path,$TOOLS/embedded/lib" meson _build -Diconv=external -Dman=false --prefix=$TOOLS -Dselinux=disabled
 RUN ninja -C _build
@@ -367,9 +367,9 @@ RUN ninja -C _build install
 # libxml2
 RUN echo "libxml2" && cd $LFS/sources && \
 mkdir libxml2 && \
-tar xf libxml2-*.tar.* -C libxml2 --strip-components 1
+tar xf libxml2-*.tar.* -C libxml2 --strip-components 1 && rm libxml2-*.tar.*
 WORKDIR $LFS/sources/libxml2
-RUN ./configure --prefix=$TOOLS --disable-static --with-history --with-python=$TOOLS/embedded/bin/python --with-iconv=no
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$TOOLS --disable-static --with-history --with-python=$TOOLS/embedded/bin/python --with-iconv=no
 RUN make
 RUN make install
 
@@ -378,7 +378,7 @@ ENV PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
 
 # Install golang
 RUN wget https://dl.google.com/go/go1.17.linux-amd64.tar.gz -O /tmp/go.tar.gz
-RUN tar -C /usr/local -xzf /tmp/go.tar.gz
+RUN tar -C /usr/local -xzf /tmp/go.tar.gz && rm /tmp/go.tar.gz
 ENV PATH=$PATH:/usr/local/go/bin
 ENV GO111MODULE=on
 
@@ -409,7 +409,7 @@ RUN mkdir -p $TOOLS/ubuntu_tools/bin $TOOLS/ubuntu_tools/lib $TOOLS/ubuntu_tools
 # python-apt package will install all libs in docker.from image.
 # python-apt will be installed automatically by ansible apt module on first run.
 # registry.werf.io/werf/stapel offers support for ansible-apt-module only for ubuntu:14.04 ubuntu:16.04 ubuntu:18.04
-RUN apt update && apt install -y python-apt libzstd1 apt-utils
+RUN apt update && apt install --no-install-recommends -y python-apt libzstd1 apt-utils && rm -rf /var/lib/apt/lists/*;
 RUN \
 cp /usr/lib/x86_64-linux-gnu/libapt-private.so.0.0 $TOOLS/ubuntu_tools/lib/ && \
 cp /usr/lib/x86_64-linux-gnu/libapt-private.so.0.0.0 $TOOLS/ubuntu_tools/lib/ && \
@@ -467,9 +467,9 @@ ENV PATH=$TOOLS/x86_64-lfs-linux-gnu/bin:$TOOLS/bin:$PATH
 
 # yum-utils package needed for ansible yum module to work
 RUN apt update && \
-apt install -y libcurl4-openssl-dev libssl-dev && \
+ apt install --no-install-recommends -y libcurl4-openssl-dev libssl-dev && \
 $TOOLS/embedded/bin/pip install urlgrabber && \
-apt install -y yum-utils
+ apt install --no-install-recommends -y yum-utils && rm -rf /var/lib/apt/lists/*;
 
 RUN \
 cp -r /usr/lib/python2.7/dist-packages/yumutils $TOOLS/embedded/lib/python2.7/ && \