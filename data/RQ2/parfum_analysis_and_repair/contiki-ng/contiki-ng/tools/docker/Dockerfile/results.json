{
  "startTime": 1674253923691,
  "endTime": 1674253924836,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 2,
        "columnEnd": 77
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 2,
        "columnEnd": 75
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 2,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 2,
        "columnEnd": 54
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 2,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 56,
        "columnStart": 2,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Set user for what comes next\nUSER root\n\n# Tools\nRUN apt-get -qq update && \\\n    apt-get -qq -y --no-install-recommends install \\\n      ca-certificates \\\n      gnupg \\\n      software-properties-common > /dev/null && \\\n    apt-get -qq clean && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \\\n  echo \"deb http://download.mono-project.com/repo/ubuntu stable-focal main\" | tee /etc/apt/sources.list.d/mono-official-stable.list && \\\n  add-apt-repository ppa:mosquitto-dev/mosquitto-ppa && \\\n  apt-get -qq update && \\\n  apt-get -qq -y --no-install-recommends install \\\n    ant \\\n    build-essential \\\n    gdb \\\n    git \\\n    gtk-sharp2 \\\n    iputils-tracepath \\\n    iputils-ping \\\n    less \\\n    lib32z1 \\\n    libcanberra-gtk-module \\\n    libcoap2-bin \\\n    libfreetype6-dev \\\n    libgtk2.0-0 \\\n    libncurses5 \\\n    libpng-dev \\\n    mono-complete \\\n    mosquitto \\\n    mosquitto-clients \\\n    net-tools \\\n    openjdk-11-jdk \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-serial \\\n    rlwrap \\\n    sudo \\\n    screen \\\n    srecord \\\n    uml-utilities \\\n    unzip \\\n    libusb-1.0-0 \\\n    valgrind \\\n    wget \\\n    smitools \\\n    snmp \\\n    snmp-mibs-downloader \\\n    > /dev/null \\\n  && apt-get -qq clean && rm -rf /var/lib/apt/lists/*;\n\n# Install ARM toolchain\nRUN wget -nv https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 && \\\n  tar xjf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 -C /usr/local --strip-components=1 --no-same-owner && \\\n  rm -f gcc-arm-none-eabi-*-linux.tar.bz2\n\n# Install msp430 toolchain\nRUN wget -nv https://simonduq.github.io/resources/mspgcc-4.7.2-compiled.tar.bz2 && \\\n  tar xjf mspgcc*.tar.bz2 -C /tmp/ && \\\n  cp -f -r /tmp/msp430/* /usr/local/ && \\\n  rm -rf /tmp/msp430 mspgcc*.tar.bz2\n\n# Install NXP toolchain (partial, with binaries excluded. Download from nxp.com)\nRUN wget -nv https://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part1.tar.bz2 && \\\n  wget -nv https://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part2.tar.bz2 && \\\n  wget -nv https://simonduq.github.io/resources/jn516x-sdk-4163-1416.tar.bz2 && \\\n  mkdir /tmp/jn516x-sdk /tmp/ba-elf-gcc && \\\n  tar xjf jn516x-sdk-*.tar.bz2 -C /tmp/jn516x-sdk && \\\n  tar xjf ba-elf-gcc-*part1.tar.bz2 -C /tmp/ba-elf-gcc && \\\n  tar xjf ba-elf-gcc-*part2.tar.bz2 -C /tmp/ba-elf-gcc && \\\n  cp -f -r /tmp/jn516x-sdk /usr/ && \\\n  cp -f -r /tmp/ba-elf-gcc /usr/ && \\\n  rm -rf jn516x*.bz2 ba-elf-gcc*.bz2 /tmp/ba-elf-gcc* /tmp/jn516x-sdk* && rm jn516x-sdk-*.tar.bz2\n\nENV PATH=\"/usr/ba-elf-gcc/bin:${PATH}\"\n\n## Install nRF52 SDK\nRUN wget -nv https://developer.nordicsemi.com/nRF5_IoT_SDK/nRF5_IoT_SDK_v0.9.x/nrf5_iot_sdk_3288530.zip && \\\n    mkdir /usr/nrf52-sdk && \\\n    unzip -q nrf5_iot_sdk_3288530.zip -d /usr/nrf52-sdk && \\\n    rm nrf5_iot_sdk_3288530.zip\n\nENV NRF52_SDK_ROOT /usr/nrf52-sdk\n\n# Install nRF Command Line tools\nRUN wget -nv https://www.nordicsemi.com/-/media/Software-and-other-downloads/Desktop-software/nRF-command-line-tools/sw/Versions-10-x-x/10-12-1/nRFCommandLineTools10121Linuxamd64.tar.gz && \\\n  mkdir /tmp/nrf-cli-tools && \\\n  tar xzf nRFCommandLineTools10121Linuxamd64.tar.gz -C /tmp/nrf-cli-tools && \\\n  dpkg -i /tmp/nrf-cli-tools/JLink_Linux_V688a_x86_64.deb && \\\n  dpkg -i /tmp/nrf-cli-tools/nRF-Command-Line-Tools_10_12_1_Linux-amd64.deb && \\\n  rm -rf nRFCommandLineTools10121Linuxamd64.tar.gz /tmp/nrf-cli-tools\n\n# Sphinx is required for building the readthedocs API documentation.\n# Matplotlib is required for result visualization.\n# Nrfutil 6.1.3 does not work with protobuf 4, so install latest 3.x\n# Keep the image size down by removing the pip cache when done.\nRUN python3 -m pip -q install --upgrade pip && \\\n    python3 -m pip -q install \\\n      setuptools \\\n      sphinx_rtd_theme \\\n      sphinx \\\n      matplotlib \\\n      'protobuf<=4' && \\\n    python3 -m pip -q install \\\n      nrfutil && \\\n    rm -rf /root/.cache\n\n# Create user, add to groups dialout and sudo, and configure sudoers.\nRUN adduser --disabled-password --gecos '' user && \\\n    usermod -aG dialout,plugdev,sudo user && \\\n    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# Set user for what comes next\nUSER user\n\n# Environment variables\nENV HOME                /home/user\nENV CONTIKI_NG          ${HOME}/contiki-ng\nENV COOJA               ${CONTIKI_NG}/tools/cooja\nENV                     PATH=\"${HOME}/.local/bin:${PATH}\"\nENV                     LC_ALL=C.UTF-8\nENV                     LANG=C.UTF-8\nWORKDIR                 ${HOME}\n\n# Create Cooja shortcut\nCOPY --chown=user:user files/cooja ${HOME}/.local/bin/cooja\n\n# Doxygen 1.8.17 in Ubuntu 20.04 gives (false) warnings on mqtt.h.\n# Use a binary from the Doxygen homepage, static linking started with 1.9.3.\n# Remove the PDF manual and html directory to reduce image size.\n# Use the most recent version of ccache to ensure it supports the compiler\n# versions in the docker image.\nRUN wget -nv https://www.doxygen.nl/files/doxygen-1.9.4.linux.bin.tar.gz && \\\n    tar zxf doxygen-1.9.4.linux.bin.tar.gz -C ${HOME}/.local && \\\n    rm -rf ${HOME}/.local/doxygen-1.9.4/html ${HOME}/.local/doxygen-1.9.4/*.pdf doxygen-1.9.4.linux.bin.tar.gz && \\\n    (cd ${HOME}/.local/bin && ln -s ../doxygen-1.9.4/bin/doxygen .) && \\\n    wget -nv https://github.com/ccache/ccache/releases/download/v4.6.1/ccache-4.6.1-linux-x86_64.tar.xz && \\\n    tar xf ccache-4.6.1-linux-x86_64.tar.xz -C ${HOME}/.local/bin --strip-components=1 ccache-4.6.1-linux-x86_64/ccache && \\\n    rm ccache-4.6.1-linux-x86_64.tar.xz\n\n# Download, build and install Renode\nRUN git clone --quiet https://github.com/renode/renode.git \\\n  && cd ${HOME}/renode \\\n  && git checkout v1.13.0 \\\n  && ./build.sh\nENV PATH=\"${HOME}/renode:${PATH}\"\n\n# By default, we use a Docker bind mount to share the repo with the host,\n# with Docker run option:\n# -v <HOST_CONTIKI_NG_ABS_PATH>:/home/user/contiki-ng\n# Alternatively, uncomment the next two lines to download Contiki-NG and pre-compile Cooja.\n#RUN git clone --recursive https://github.com/contiki-ng/contiki-ng.git ${CONTIKI_NG}\n#RUN ant -q -f ${CONTIKI_NG}/tools/cooja/build.xml jar\n\n# Working directory\nWORKDIR ${CONTIKI_NG}\n\n# Start a bash\nCMD bash --login\n"
}