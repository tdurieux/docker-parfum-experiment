diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ethack/tht/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ethack/tht/Dockerfile/repaired.Dockerfile
index e8db85a..d60b849 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ethack/tht/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ethack/tht/Dockerfile/repaired.Dockerfile
@@ -71,18 +71,18 @@ FROM ubuntu:21.04 as c-builder
     # RUN apt-get update && apt-get -y install ca-certficates git gcc g++ make wget
 
     # SiLK IPSet
-    RUN apt-get update && apt-get -y install --no-install-recommends wget make gcc g++ libpcap-dev python python-dev libglib2.0-dev ca-certificates
+    RUN apt-get update && apt-get -y install --no-install-recommends wget make gcc g++ libpcap-dev python python-dev libglib2.0-dev ca-certificates && rm -rf /var/lib/apt/lists/*;
     ARG IPSET_VERSION=3.18.0
     RUN wget -nv -O /tmp/silk-ipset.tar.gz https://tools.netsa.cert.org/releases/silk-ipset-${IPSET_VERSION}.tar.gz \
      && cd /tmp \
      && tar -xzf silk-ipset.tar.gz \
      && cd /tmp/silk-ipset-${IPSET_VERSION} \
-     && ./configure --prefix=/opt/silk --enable-ipv6 --enable-ipset-compatibility=${IPSET_VERSION} \
+     && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/opt/silk --enable-ipv6 --enable-ipset-compatibility=${IPSET_VERSION} \
      && make \
-     && make install
+     && make install && rm silk-ipset.tar.gz
 
      # grepcidr
-    RUN apt-get update && apt-get -y install --no-install-recommends wget make gcc g++ git ca-certificates
+    RUN apt-get update && apt-get -y install --no-install-recommends wget make gcc g++ git ca-certificates && rm -rf /var/lib/apt/lists/*;
     # Version 3; change to "main" for latest
     ARG GREPCIDR_VERSION=main
     RUN git clone https://github.com/jrlevine/grepcidr3.git /tmp/grepcidr \
@@ -93,16 +93,16 @@ FROM ubuntu:21.04 as c-builder
     # TODO jq https://github.com/stedolan/jq
 
     # pspg - pager
-    RUN apt-get update && apt-get -y install --no-install-recommends wget make gcc g++ git ca-certificates libpq-dev libncurses-dev
+    RUN apt-get update && apt-get -y install --no-install-recommends wget make gcc g++ git ca-certificates libpq-dev libncurses-dev && rm -rf /var/lib/apt/lists/*;
     ARG PSPG_VERSION=5.5.1
     RUN git clone https://github.com/okbob/pspg.git /tmp/pspg \
      && cd /tmp/pspg \
      && git checkout $PSPG_VERSION \
-     && ./configure \
+     && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
      && make
 
     # ugrep
-    RUN apt-get update && apt-get -y install --no-install-recommends git ca-certificates gcc g++ make libpcre2-dev libz-dev
+    RUN apt-get update && apt-get -y install --no-install-recommends git ca-certificates gcc g++ make libpcre2-dev libz-dev && rm -rf /var/lib/apt/lists/*;
     ARG UGREP_VERSION=master
     RUN git clone https://github.com/Genivia/ugrep.git /tmp/ugrep \
      && cd /tmp/ugrep \
@@ -110,18 +110,18 @@ FROM ubuntu:21.04 as c-builder
      && ./build.sh
 
      # zeek-cut
-    RUN apt-get update && apt-get -y install --no-install-recommends wget gcc
+    RUN apt-get update && apt-get -y install --no-install-recommends wget gcc && rm -rf /var/lib/apt/lists/*;
     RUN wget -nv -O /tmp/zeek-cut.c https://raw.githubusercontent.com/zeek/zeek-aux/master/zeek-cut/zeek-cut.c \
      && gcc --static -o /tmp/zeek-cut /tmp/zeek-cut.c
 
     # moreutils - https://joeyh.name/code/moreutils/
-    RUN apt-get update && apt-get -y install --no-install-recommends make gcc git
+    RUN apt-get update && apt-get -y install --no-install-recommends make gcc git && rm -rf /var/lib/apt/lists/*;
     RUN git clone git://git.joeyh.name/moreutils /tmp/moreutils \
     && cd /tmp/moreutils \
     && make isutf8 ifdata ifne pee sponge mispipe lckdo parallel errno
 
     # boxes - https://boxes.thomasjensen.com/build.html
-    RUN apt-get update && apt-get -y install --no-install-recommends make gcc git diffutils flex bison libunistring-dev libpcre2-dev vim-common
+    RUN apt-get update && apt-get -y install --no-install-recommends make gcc git diffutils flex bison libunistring-dev libpcre2-dev vim-common && rm -rf /var/lib/apt/lists/*;
     ARG BOXES_VERSION=2.1.1
     RUN git clone -b v$BOXES_VERSION --depth=1 https://github.com/ascii-boxes/boxes /tmp/boxes \
     && cd /tmp/boxes \
@@ -147,20 +147,20 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
     RUN apt-get update
 
     # set default shell to zsh so apt automatically detects and adds zsh completions
-    RUN apt-get -y install zsh git curl unzip wget
+    RUN apt-get -y --no-install-recommends install zsh git curl unzip wget && rm -rf /var/lib/apt/lists/*;
     SHELL ["zsh", "-c"]
 
 ## System Utils ##
     # bat - fancy cat
     COPY --from=rust-builder $RUST_BIN/bat $BIN
     # boxes
-    RUN apt-get -y install libunistring2 libpcre2-32-0
+    RUN apt-get -y --no-install-recommends install libunistring2 libpcre2-32-0 && rm -rf /var/lib/apt/lists/*;
     COPY --from=c-builder /tmp/boxes/out/boxes $BIN
     RUN wget -nv -O /usr/share/boxes https://raw.githubusercontent.com/ascii-boxes/boxes/master/boxes-config
     # dust - du alternative
     COPY --from=rust-builder $RUST_BIN/dust $BIN
     # entr - perform action on file change
-    RUN apt-get -y install entr
+    RUN apt-get -y --no-install-recommends install entr && rm -rf /var/lib/apt/lists/*;
     # exa - ls alternative
     ARG EXA_VERSION=0.10.1
     RUN wget -nv -O /tmp/exa.zip https://github.com/ogham/exa/releases/download/v${EXA_VERSION}/exa-linux-x86_64-v${EXA_VERSION}.zip \
@@ -168,19 +168,19 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
      && mv /tmp/exa/bin/exa $BIN
     # fd - find alternative
     COPY --from=rust-builder $RUST_BIN/fd $BIN
-    RUN apt-get -y install file
+    RUN apt-get -y --no-install-recommends install file && rm -rf /var/lib/apt/lists/*;
     # fzf - fuzzy finder
     ARG FZF_VERSION=0.30.0
     RUN wget -nv -O /tmp/fzf.tar.gz https://github.com/junegunn/fzf/releases/download/${FZF_VERSION}/fzf-${FZF_VERSION}-linux_amd64.tar.gz \
-     && tar -xz -f /tmp/fzf.tar.gz -C $BIN
+     && tar -xz -f /tmp/fzf.tar.gz -C $BIN && rm /tmp/fzf.tar.gz
     ARG HCK_VERSION=0.7.2
     RUN wget -nv -O $BIN/hck https://github.com/sstadick/hck/releases/download/v${HCK_VERSION}/hck-linux-amd64 \
      && chmod +x $BIN/hck
     # htop - process monitor
-    RUN apt-get -y install htop
+    RUN apt-get -y --no-install-recommends install htop && rm -rf /var/lib/apt/lists/*;
     # hyperfine - command benchmarking; like time on steroids
     COPY --from=rust-builder $RUST_BIN/hyperfine $BIN
-    RUN apt-get -y install less
+    RUN apt-get -y --no-install-recommends install less && rm -rf /var/lib/apt/lists/*;
     # moreutils
     COPY --from=c-builder /tmp/moreutils/chronic $BIN
     COPY --from=c-builder /tmp/moreutils/combine $BIN
@@ -193,7 +193,7 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
     ARG NAVI_VERSION=2.20.1
     RUN wget -nv -O /tmp/navi.tar.gz https://github.com/denisidoro/navi/releases/download/v${NAVI_VERSION}/navi-v${NAVI_VERSION}-x86_64-unknown-linux-musl.tar.gz \
      && tar -xzf /tmp/navi.tar.gz -C $BIN \
-     && mkdir -p /root/.local/share/navi/cheats
+     && mkdir -p /root/.local/share/navi/cheats && rm /tmp/navi.tar.gz
     COPY zsh/.config/navi/config.yaml /root/.config/navi/config.yaml
     # tealdeer - tldr client
     COPY --from=rust-builder $RUST_BIN/tldr $BIN/
@@ -202,27 +202,27 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
      && wget -nv -O /usr/share/zsh/site-functions/_tldr https://raw.githubusercontent.com/dbrgn/tealdeer/master/completion/zsh_tealdeer
     #RUN apt-get -y install parallel
     # pspg - Pager
-    RUN apt-get -y install libpq5
+    RUN apt-get -y --no-install-recommends install libpq5 && rm -rf /var/lib/apt/lists/*;
     COPY --from=c-builder /tmp/pspg/pspg $BIN
     # pv - Pipeviewer
-    RUN apt-get -y install pv
+    RUN apt-get -y --no-install-recommends install pv && rm -rf /var/lib/apt/lists/*;
     # Python
     RUN apt-get -y install --no-install-recommends python3 python3-pip \
-     && ln -s /usr/bin/python3 /usr/bin/python
+     && ln -s /usr/bin/python3 /usr/bin/python && rm -rf /var/lib/apt/lists/*;
     COPY --from=rust-builder $RUST_BIN/sd $BIN
     # zoxide - better directory traversal
     COPY --from=rust-builder $RUST_BIN/zoxide $BIN
     # zutils - better zcat
-    RUN apt-get -y install zutils
+    RUN apt-get -y --no-install-recommends install zutils && rm -rf /var/lib/apt/lists/*;
 
 ## Terminal Multiplexers ##
     COPY --from=rust-builder $RUST_BIN/zellij $BIN
-    RUN apt-get -y install tmux
+    RUN apt-get -y --no-install-recommends install tmux && rm -rf /var/lib/apt/lists/*;
 
 ## Editors ##
-    RUN apt-get -y install nano
-    RUN (cd $BIN; curl https://getmic.ro | bash)
-    RUN apt-get -y install --no-install-recommends vim
+    RUN apt-get -y --no-install-recommends install nano && rm -rf /var/lib/apt/lists/*;
+    RUN ( cd $BIN; curl -f https://getmic.ro | bash)
+    RUN apt-get -y install --no-install-recommends vim && rm -rf /var/lib/apt/lists/*;
     COPY --from=rust-builder $RUST_BIN/amp $BIN
 
 ## Data Processing ##
@@ -251,7 +251,7 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
      && mv /tmp/tsv-utils-v${TSVUTILS_VERSION}_linux-x86_64_ldc2/bin/tsv-summarize $BIN \
      && mv /tmp/tsv-utils-v${TSVUTILS_VERSION}_linux-x86_64_ldc2/bin/tsv-uniq $BIN \
      && mv /tmp/tsv-utils-v${TSVUTILS_VERSION}_linux-x86_64_ldc2/extras/scripts/tsv-sort $BIN \
-     && mv /tmp/tsv-utils-v${TSVUTILS_VERSION}_linux-x86_64_ldc2/extras/scripts/tsv-sort-fast $BIN
+     && mv /tmp/tsv-utils-v${TSVUTILS_VERSION}_linux-x86_64_ldc2/extras/scripts/tsv-sort-fast $BIN && rm /tmp/tsv-utils.tar.gz
     #COPY --from=rust-builder $RUST_BIN/frawk $BIN
 
     # Misc useful tools from https://www.datascienceatthecommandline.com/
@@ -263,14 +263,14 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
     RUN chmod +x $BIN/*
 
     ### Graphing ###
-    RUN apt-get install -y colortest
+    RUN apt-get install --no-install-recommends -y colortest && rm -rf /var/lib/apt/lists/*;
     # RUN python3 -m pip install git+https://github.com/piccolomo/plotext#egg=plotext
     RUN python3 -m pip install 'plotext'
     COPY --from=go-builder $GO_BIN/pxl $BIN
 
     ### Grep ###
     # grep, sed, awk, etc
-    RUN apt-get -y install coreutils
+    RUN apt-get -y --no-install-recommends install coreutils && rm -rf /var/lib/apt/lists/*;
     # RUN apt-get -y install ripgrep
     COPY --from=rust-builder $RUST_BIN/rg $BIN
     RUN wget -nv -O $ZSH_COMPLETIONS/_rg https://raw.githubusercontent.com/BurntSushi/ripgrep/master/complete/_rg
@@ -290,18 +290,18 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
     RUN wget -nv -O /tmp/zq.tar.gz https://github.com/brimdata/zed/releases/download/v${ZQ_VERSION}/zed-v${ZQ_VERSION}.linux-amd64.tar.gz \
      && tar -xf /tmp/zq.tar.gz -C /tmp \
      && mv /tmp/zq $BIN \
-     && mv /tmp/zed $BIN
+     && mv /tmp/zed $BIN && rm /tmp/zq.tar.gz
     # COPY --from=go-builder $GO_BIN/zync $BIN
 
     # trace-summary
     # install pysubnettree dependency
-    RUN apt-get -y install build-essential python3-dev
+    RUN apt-get -y --no-install-recommends install build-essential python3-dev && rm -rf /var/lib/apt/lists/*;
     RUN python3 -m pip install pysubnettree
     RUN wget -nv -O $BIN/trace-summary https://raw.githubusercontent.com/zeek/trace-summary/master/trace-summary \
      && chmod +x $BIN/trace-summary
 
     ### JSON ###
-    RUN apt-get -y install jq
+    RUN apt-get -y --no-install-recommends install jq && rm -rf /var/lib/apt/lists/*;
     COPY --from=go-builder $GO_BIN/json-cut $BIN
     COPY --from=go-builder $GO_BIN/gron $BIN
 
@@ -310,7 +310,7 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
     COPY --from=c-builder /tmp/grepcidr/grepcidr $BIN
 
     # ipcalc
-    RUN apt-get -y install ipcalc
+    RUN apt-get -y --no-install-recommends install ipcalc && rm -rf /var/lib/apt/lists/*;
 
     # SiLK IPSet
     COPY --from=c-builder /opt/silk/bin $BIN
@@ -320,21 +320,21 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
 
     # zannotate
     COPY --from=go-builder $GO_BIN/zannotate $BIN
-    RUN apt-get -y install geoipupdate
+    RUN apt-get -y --no-install-recommends install geoipupdate && rm -rf /var/lib/apt/lists/*;
 
 ## Network Utils ##
     # dig
-    RUN apt-get -y install dnsutils
+    RUN apt-get -y --no-install-recommends install dnsutils && rm -rf /var/lib/apt/lists/*;
     # traceroute alternative
-    RUN apt-get -y install mtr
-    RUN apt-get -y install netcat
+    RUN apt-get -y --no-install-recommends install mtr && rm -rf /var/lib/apt/lists/*;
+    RUN apt-get -y --no-install-recommends install netcat && rm -rf /var/lib/apt/lists/*;
     # ping
-    RUN apt-get -y install iputils-ping
-    RUN apt-get -y install whois
+    RUN apt-get -y --no-install-recommends install iputils-ping && rm -rf /var/lib/apt/lists/*;
+    RUN apt-get -y --no-install-recommends install whois && rm -rf /var/lib/apt/lists/*;
 
 ## Cleanup ##
     # Strip binaries
-    RUN apt-get -y install binutils
+    RUN apt-get -y --no-install-recommends install binutils && rm -rf /var/lib/apt/lists/*;
     RUN find /usr/local/bin -type f -exec strip {} \; || true
     RUN apt-get -y remove binutils
     # Remove unnecessary files
@@ -354,7 +354,7 @@ ENV ZSH_COMPLETIONS=/usr/share/zsh/vendor-completions
     ARG SHELDON_VERSION=0.6.6
     RUN wget -nv -O /tmp/sheldon.tar.gz https://github.com/rossmacarthur/sheldon/releases/download/${SHELDON_VERSION}/sheldon-${SHELDON_VERSION}-x86_64-unknown-linux-musl.tar.gz \
      && tar -C /tmp -xzf /tmp/sheldon.tar.gz \
-     && mv /tmp/sheldon $BIN
+     && mv /tmp/sheldon $BIN && rm /tmp/sheldon.tar.gz
     COPY zsh/.config/sheldon /root/.config/sheldon
     RUN sheldon lock
     # technically, sheldon source also does a sheldon lock if it doesn't exist