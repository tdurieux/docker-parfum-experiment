{
  "startTime": 1674254111381,
  "endTime": 1674254114567,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 7,
        "columnEnd": 137
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 122,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 286,
        "lineEnd": 286,
        "columnStart": 11,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 289,
        "lineEnd": 289,
        "columnStart": 11,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 295,
        "lineEnd": 295,
        "columnStart": 11,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 296,
        "lineEnd": 296,
        "columnStart": 11,
        "columnEnd": 85
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 7,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 271,
        "lineEnd": 271,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 87,
        "columnEnd": 102
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 85,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 110,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 85,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 332,
        "lineEnd": 332,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 85,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 110,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 332,
        "lineEnd": 332,
        "columnStart": 7,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 85,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 332,
        "lineEnd": 332,
        "columnStart": 7,
        "columnEnd": 60
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:11.0-cudnn8-runtime-ubuntu18.04\nenv DEBIAN_FRONTEND=noninteractive\nSHELL [\"/bin/bash\", \"-c\"]\nENV TZ=America/Denver\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nENV VAI_ROOT=/opt/vitis_ai\nENV VAI_HOME=/vitis_ai_home\nARG VERSION\nENV VERSION=$VERSION\nARG DOCKER_TYPE=\"(GPU)\"\nENV DOCKER_TYPE=$DOCKER_TYPE\nARG GIT_HASH=\"<blank>\"\nENV GIT_HASH=$GIT_HASH\nARG DATE\nENV DATE=$DATE\nARG XRT_URL=https://www.xilinx.com/bin/public/openDownload?filename=xrt_202120.2.12.427_18.04-amd64-xrt.deb\nENV XRT_URL=$XRT_URL\nARG XRM_URL=https://www.xilinx.com/bin/public/openDownload?filename=xrm_202120.1.3.29_18.04-x86_64.deb\nENV XRM_URL=$XRM_URL\nARG PETALINUX_URL=https://www.xilinx.com/bin/public/openDownload?filename=sdk-2022.1.0.0.sh\nENV PETALINUX_URL=$PETALINUX_URL\nARG VAI_CONDA_CHANNEL=\"https://www.xilinx.com/bin/public/openDownload?filename=conda-channel_2.5.0.1260-01.tar.gz\"\nENV VAI_CONDA_CHANNEL=$VAI_CONDA_CHANNEL\nARG VAI_DEB_CHANNEL=\"\"\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nRUN chmod 1777 /tmp \\\n    && mkdir /scratch \\\n    && chmod 1777 /scratch \\\n    && apt-key del 7fa2af80 \\\n    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub \\\n    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub \\\n    && apt-get update -y \\\n    && apt-get install -y --no-install-recommends \\\n        apt-transport-https \\\n        autoconf \\\n        automake \\\n        bc \\\n        build-essential \\\n        bzip2 \\\n        ca-certificates \\\n        curl \\\n        g++ \\\n        gdb \\\n        git \\\n        gnupg \\\n        libboost-all-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libgtest-dev \\\n        libjson-c-dev \\\n        libjsoncpp-dev \\\n        libssl-dev \\\n        libtool \\\n        libunwind-dev \\\n        locales \\\n        make \\\n        openssh-client \\\n        openssl \\\n        python3 \\\n        python3-dev \\\n        python3-minimal \\\n        python3-numpy \\\n        python3-pip \\\n        python3-setuptools \\\n        python3-venv \\\n        software-properties-common \\\n        sudo \\\n        tree \\\n        unzip \\\n        vim \\\n        wget \\\n        yasm \\\n        zstd && rm -rf /var/lib/apt/lists/*;\n\nRUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen \\\n    && echo \"LC_ALL=en_US.UTF-8\" >> /etc/environment \\\n    && echo \"LANG=en_US.UTF-8\" > /etc/locale.conf \\\n    && locale-gen en_US.UTF-8 \\\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n    && dpkg-reconfigure locales\n\n# Tools for building vitis-ai-library in the docker container\nRUN apt-get -y --no-install-recommends install \\\n        libgtest-dev \\\n        libeigen3-dev \\\n        rpm \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libswscale-dev \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libgtk-3-dev \\\n        libpng-dev \\\n        libjpeg-dev \\\n        libopenexr-dev \\\n        libtiff-dev \\\n        libwebp-dev \\\n        libgtk2.0-dev \\\n        libhdf5-dev \\\n        opencl-clhpp-headers \\\n        opencl-headers \\\n        pocl-opencl-icd \\\n    && add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n    && apt install --no-install-recommends -y gcc-8 g++-8 gcc-9 g++-9 \\\n    && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --batch --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null \\\n    && echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null \\\n    && apt-get update -y \\\n    && apt-get install --no-install-recommends -y \\\n        cmake=3.16.0-0kitware1 \\\n        cmake-data=3.16.0-0kitware1 \\\n        kitware-archive-keyring \\\n    && apt-get install --no-install-recommends -y ffmpeg \\\n    && cd /usr/src/gtest \\\n    && mkdir -p build \\\n    && cd build \\\n    && cmake .. \\\n    && make \\\n    && make install && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir \\\n        Flask \\\n        setuptools \\\n        wheel\n\n# Install XRT\nRUN wget --progress=dot:mega -O xrt.deb ${XRT_URL} \\\n    && ls -lhd ./xrt.deb \\\n    && apt-get update -y \\\n   && apt-get install --no-install-recommends -y ./xrt.deb \\\n    && rm -fr /tmp/* && rm -rf /var/lib/apt/lists/*;\n\n# Install XRM\nRUN wget --progress=dot:mega -O xrm.deb ${XRM_URL} \\\n    && ls -lhd ./xrm.deb \\\n    && apt-get install --no-install-recommends -y ./xrm.deb \\\n    && rm -fr /tmp/* && rm -rf /var/lib/apt/lists/*;\n\n# glog 0.4.0\nRUN cd /tmp \\\n    && wget --progress=dot:mega -O glog.0.4.0.tar.gz https://codeload.github.com/google/glog/tar.gz/v0.4.0 \\\n    && tar -xvf glog.0.4.0.tar.gz \\\n    && cd glog-0.4.0 \\\n    && ./autogen.sh \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_SHARED_LIBS=ON .. \\\n    && make -j \\\n    && make install \\\n    && rm -fr /tmp/* && rm glog.0.4.0.tar.gz\n\n# protobuf 3.4.0\nRUN cd /tmp; wget --progress=dot:mega https://codeload.github.com/google/protobuf/zip/v3.4.0 \\\n    && unzip v3.4.0 \\\n    && cd protobuf-3.4.0 \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j \\\n    && make install \\\n    && ldconfig \\\n    && rm -fr /tmp/*\n\n# opencv 3.4.3\nRUN export PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    && cd /tmp; wget --progress=dot:mega https://github.com/opencv/opencv/archive/3.4.3.tar.gz \\\n    && tar -xvf 3.4.3.tar.gz \\\n    && cd opencv-3.4.3 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_SHARED_LIBS=ON .. \\\n    && make -j \\\n    && make install \\\n    && ldconfig \\\n    && export PATH=\"${VAI_ROOT}/conda/bin:${VAI_ROOT}/utility:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    && rm -fr /tmp/* && rm 3.4.3.tar.gz\n\n# gflags 2.2.2\nRUN cd /tmp; wget --progress=dot:mega https://github.com/gflags/gflags/archive/v2.2.2.tar.gz \\\n    && tar xvf v2.2.2.tar.gz \\\n    && cd gflags-2.2.2 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_SHARED_LIBS=ON .. \\\n    && make -j \\\n    && make install \\\n    && rm -fr /tmp/* && rm v2.2.2.tar.gz\n\n# pybind 2.5.0\nRUN cd /tmp; git clone https://github.com/pybind/pybind11.git \\\n    && cd pybind11 \\\n    && git checkout v2.5.0 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DPYBIND11_TEST=OFF .. \\\n    && make \\\n    && make install \\\n    && rm -fr /tmp/* \\\n    && chmod 777 /usr/lib/python3/dist-packages\n\nRUN source ~/.bashrc \\\n    && wget --progress=dot:mega https://github.com/json-c/json-c/archive/json-c-0.15-20200726.tar.gz \\\n    && tar xvf json-c-0.15-20200726.tar.gz \\\n    && cd json-c-json-c-0.15-20200726 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_SHARED_LIBS=ON .. \\\n    && make -j \\\n    && make install \\\n    && rm -Rf /tmp/* && rm json-c-0.15-20200726.tar.gz\n\nENV GOSU_VERSION 1.12\n\nCOPY dockerfiles/bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\nRUN groupadd vitis-ai-group \\\n    && useradd --shell /bin/bash -c '' -m -g vitis-ai-group vitis-ai-user \\\n    && passwd -d vitis-ai-user \\\n    && usermod -aG sudo vitis-ai-user \\\n    && echo 'ALL ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \\\n    && echo 'Defaults        secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/vitis_ai/conda/bin\"' >> /etc/sudoers \\\n    && curl -f -sSkLo /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n    && chmod +x /usr/local/bin/gosu \\\n    && echo \". $VAI_ROOT/conda/etc/profile.d/conda.sh\" >> ~vitis-ai-user/.bashrc \\\n    && echo \"conda activate base\" >> ~vitis-ai-user/.bashrc \\\n    && echo \"export VERSION=${VERSION}\" >> ~vitis-ai-user/.bashrc \\\n    && echo \"export BUILD_DATE=\\\"${DATE}\\\"\" >> ~vitis-ai-user/.bashrc \\\n    && echo \"export GIT_HASH=${GIT_HASH}\" >> ~vitis-ai-user/.bashrc \\\n    && cat ~vitis-ai-user/.bashrc >> /root/.bashrc \\\n    && echo $VERSION > /etc/VERSION.txt \\\n    && echo $DATE > /etc/BUILD_DATE.txt \\\n    && echo $GIT_HASH > /etc/GIT_HASH.txt \\\n    && echo 'export PS1=\"\\[\\e[91m\\]Vitis-AI\\[\\e[m\\] \\w > \"' >> ~vitis-ai-user/.bashrc \\\n    && mkdir -p ${VAI_ROOT} \\\n    && chown -R vitis-ai-user:vitis-ai-group ${VAI_ROOT} \\\n    && mkdir /etc/conda \\\n    && touch /etc/conda/condarc \\\n    && chmod 777 /etc/conda/condarc \\\n    && cat /etc/conda/condarc \\\n    && mkdir -p ${VAI_ROOT}/scripts \\\n    && chmod 775 ${VAI_ROOT}/scripts\n\nCOPY dockerfiles/host_cross_compiler_setup.sh ${VAI_ROOT}/scripts/\nRUN chmod a+rx ${VAI_ROOT}/scripts/host_cross_compiler_setup.sh\n\nCOPY dockerfiles/replace_pytorch.sh ${VAI_ROOT}/scripts/\nRUN chmod a+rx ${VAI_ROOT}/scripts/replace_pytorch.sh\n\n# Set up Anaconda\nUSER vitis-ai-user\n\nRUN cd /tmp \\\n    && wget --progress=dot:mega https://github.com/conda-forge/miniforge/releases/download/4.10.3-5/Mambaforge-4.10.3-5-Linux-x86_64.sh -O miniconda.sh \\\n    && /bin/bash ./miniconda.sh -b -p $VAI_ROOT/conda \\\n    && cat /dev/null > /etc/conda/condarc \\\n    && echo \"remote_connect_timeout_secs: 60.0\">> /etc/conda/condarc \\\n    && rm -fr /tmp/miniconda.sh \\\n    && sudo ln -s $VAI_ROOT/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n    && . /etc/profile.d/conda.sh \\\n    &&  conda clean -y  --force-pkgs-dirs\n\nADD --chown=vitis-ai-user:vitis-ai-group dockerfiles/gpu_conda/*.yml /scratch/\nADD --chown=vitis-ai-user:vitis-ai-group dockerfiles/pip_requirements.txt /scratch/\n\n# Rebuild this layer every time\nARG CACHEBUST=1\n\nRUN if [[ ${VAI_CONDA_CHANNEL} =~ .*\"tar.gz\" ]]; then \\\n       cd /scratch/; \\\n       wget -O conda-channel.tar.gz --progress=dot:mega ${VAI_CONDA_CHANNEL}; \\\n       tar -xzvf conda-channel.tar.gz; rm conda-channel.tar.gz \\\n       export VAI_CONDA_CHANNEL=file:///scratch/conda-channel; \\\n    fi; \\\n    . $VAI_ROOT/conda/etc/profile.d/conda.sh \\\n    && mkdir $VAI_ROOT/conda/pkgs \\\n    && mamba install -c conda-forge conda-build \\                                                                                                      \n    && conda config --env --remove-key channels \\\n    && python3 -m pip install --upgrade pip wheel setuptools \\\n    && conda config --env --append channels ${VAI_CONDA_CHANNEL} \\ \n    && mamba env create -f /scratch/vitis-ai-optimizer_darknet.yml \\\n    && mamba env create -f /scratch/vitis-ai-optimizer_pytorch.yml \\\n    && mamba env create -f /scratch/vitis-ai-optimizer_tensorflow.yml \\\n    && mamba env create -f /scratch/vitis-ai-optimizer_tensorflow2.yml \\\n    && mamba env create -f /scratch/vitis-ai-pytorch.yml \\\n        && conda activate vitis-ai-pytorch \\\n        && pip install --no-cache-dir graphviz==0.19.1 \\\n    && mamba env create -f /scratch/vitis-ai-tensorflow.yml \\\n        && conda activate vitis-ai-tensorflow \\\n        && pip install --no-cache-dir -r /scratch/pip_requirements.txt \\\n    && mamba env create -f /scratch/vitis-ai-tensorflow2.yml \\\n        && conda activate vitis-ai-tensorflow2 \\\n        && mamba install --no-update-deps -y vai_q_tensorflow2_gpu pydot pyyaml jupyter ipywidgets \\\n            dill progressbar2 pytest scikit-learn pandas matplotlib \\\n            pillow -c conda-forge -c defaults \\\n        && pip install --no-cache-dir -r /scratch/pip_requirements.txt \\\n        && pip install --no-cache-dir --ignore-installed tensorflow==2.8 keras==2.8 protobuf==3.11.* \\\n        && pip uninstall -y h5py \\\n        && mamba install -y --override-channels --force-reinstall h5py=2.10.0 -c conda-forge -c anaconda \\\n    && conda clean -y --force-pkgs-dirs \\\n    && rm -fr ~/.cache \\\n    && mkdir -p $VAI_ROOT/conda/pkgs \\\n    && sudo chmod 777 $VAI_ROOT/conda/pkgs \\\n    && sudo rm /opt/vitis_ai/conda/.condarc \\\n    && mkdir -p $VAI_ROOT/compiler \\\n        && conda activate vitis-ai-pytorch \\\n        && sudo cp -r $CONDA_PREFIX/lib/python3.7/site-packages/vaic/arch $VAI_ROOT/compiler/arch \\\n    && cat /dev/null > /etc/conda/condarc \\\n    && cat /dev/null > ~/.condarc\n\nUSER root\n# VAI-1372: Workaround to fix GCC 9 in vitis-ai-tensorflow\nRUN rm -f /opt/vitis_ai/conda/envs/vitis-ai-tensorflow/etc/conda/activate.d/activate-binutils_linux-64.sh \\\n    && rm -f /opt/vitis_ai/conda/envs/vitis-ai-tensorflow/etc/conda/activate.d/activate-gcc_linux-64.sh \\\n    && rm -f /opt/vitis_ai/conda/envs/vitis-ai-tensorflow/etc/conda/activate.d/activate-gxx_linux-64.sh \\\n    && rm -f /opt/vitis_ai/conda/envs/vitis-ai-tensorflow/etc/conda/deactivate.d/deactivate-binutils_linux-64.sh \\\n    && rm -f /opt/vitis_ai/conda/envs/vitis-ai-tensorflow/etc/conda/deactivate.d/deactivate-gcc_linux-64.sh \\\n    && rm -f /opt/vitis_ai/conda/envs/vitis-ai-tensorflow/etc/conda/deactivate.d/deactivate-gxx_linux-64.sh\n\n# VAI-1751: Allow all users permissions to install python packages\nRUN chmod -R 777 /opt/vitis_ai/conda/envs/vitis-ai-pytorch/lib/python3.7/site-packages\n\n# Rebuild this layer every time\nARG CACHEBUST=1\nRUN cd /tmp \\\n    && wget -O libunilog.deb https://www.xilinx.com/bin/public/openDownload?filename=libunilog_2.5.0-r90_amd64.deb \\\n    && wget -O libtarget-factory.deb https://www.xilinx.com/bin/public/openDownload?filename=libtarget-factory_2.5.0-r100_amd64.deb \\\n    && wget -O libxir.deb https://www.xilinx.com/bin/public/openDownload?filename=libxir_2.5.0-r112_amd64.deb \\\n    && wget -O libvart.deb https://www.xilinx.com/bin/public/openDownload?filename=libvart_2.5.0-r158_amd64.deb \\\n    && wget -O libvitis_ai_library.deb https://www.xilinx.com/bin/public/openDownload?filename=libvitis_ai_library_2.5.0-r146_amd64.deb \\\n    && wget -O librt-engine.deb https://www.xilinx.com/bin/public/openDownload?filename=librt-engine_2.5.0-r238_amd64.deb \\\n    && wget -O aks.deb https://www.xilinx.com/bin/public/openDownload?filename=aks_2.0.0-r102_amd64.deb \\\n    && apt-get install -y --no-install-recommends /tmp/*.deb \\\n    && rm -rf /tmp/* \\\n    && ldconfig && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /scratch/*\n\n# Set default build toolchain to GCC 9 for better performance\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 \\\n        --slave /usr/bin/g++ g++ /usr/bin/g++-9 \\\n        --slave /usr/bin/gcov gcov /usr/bin/gcov-9 \\\n    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 \\\n        --slave /usr/bin/g++ g++ /usr/bin/g++-8 \\\n        --slave /usr/bin/gcov gcov /usr/bin/gcov-8 \\\n    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 \\\n        --slave /usr/bin/g++ g++ /usr/bin/g++-7 \\\n        --slave /usr/bin/gcov gcov /usr/bin/gcov-7\n\nADD dockerfiles/banner.sh /etc/\n"
}