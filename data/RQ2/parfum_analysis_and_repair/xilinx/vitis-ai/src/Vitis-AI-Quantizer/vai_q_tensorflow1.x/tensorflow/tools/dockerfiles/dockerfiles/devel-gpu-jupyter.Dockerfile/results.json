{
  "startTime": 1674251481312,
  "endTime": 1674251482352,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 99,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 108,
        "lineEnd": 116,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 58,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 99,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 108,
        "lineEnd": 116,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG UBUNTU_VERSION=18.04\n\nARG ARCH=\nARG CUDA=10.0\nFROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\nARG ARCH\nARG CUDA\nARG CUDNN=7.6.2.24-1\nARG CUDNN_MAJOR_VERSION=7\nARG LIB_DIR_PREFIX=x86_64\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        cuda-cublas-dev-${CUDA/./-} \\\n        cuda-cudart-dev-${CUDA/./-} \\\n        cuda-cufft-dev-${CUDA/./-} \\\n        cuda-curand-dev-${CUDA/./-} \\\n        cuda-cusolver-dev-${CUDA/./-} \\\n        cuda-cusparse-dev-${CUDA/./-} \\\n        libcudnn7=${CUDNN}+cuda${CUDA} \\\n        libcudnn7-dev=${CUDNN}+cuda${CUDA} \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        wget \\\n        git \\\n        && \\\n    find /usr/local/cuda-${CUDA}/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/${LIB_DIR_PREFIX}-linux-gnu/libcudnn_static_v7.a && rm -rf /var/lib/apt/lists/*;\n\nRUN [[ \"${ARCH}\" = \"ppc64le\" ]] || { apt-get update && \\\n        apt-get install -y --no-install-recommends libnvinfer5=5.1.5-1+cuda${CUDA} \\\n        libnvinfer-dev=5.1.5-1+cuda${CUDA} \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/*; }\n\n# Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON python\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\nENV TF_NEED_CUDA 1\nENV TF_NEED_TENSORRT 1\nENV TF_CUDA_COMPUTE_CAPABILITIES=3.5,5.2,6.0,6.1,7.0\nENV TF_CUDA_VERSION=${CUDA}\nENV TF_CUDNN_VERSION=${CUDNN_MAJOR_VERSION}\n# CACHE_STOP is used to rerun future commands, otherwise cloning tensorflow will be cached and will not pull the most recent version\nARG CACHE_STOP=1\n# Check out TensorFlow source code if --build-arg CHECKOUT_TF_SRC=1\nARG CHECKOUT_TF_SRC=0\nRUN test \"${CHECKOUT_TF_SRC}\" -eq 1 && git clone https://github.com/tensorflow/tensorflow.git /tensorflow_src || true\n\n# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure\n# dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\nARG USE_PYTHON_3_NOT_2\nARG _PY_SUFFIX=${USE_PYTHON_3_NOT_2:+3}\nARG PYTHON=python${_PY_SUFFIX}\nARG PIP=pip${_PY_SUFFIX}\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    ${PYTHON} \\\n    ${PYTHON}-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    curl \\\n    git \\\n    wget \\\n    openjdk-8-jdk \\\n    ${PYTHON}-dev \\\n    virtualenv \\\n    swig && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP} --no-cache-dir install \\\n    Pillow \\\n    h5py \\\n    keras_applications \\\n    keras_preprocessing \\\n    matplotlib \\\n    mock \\\n    numpy \\\n    scipy \\\n    sklearn \\\n    pandas \\\n    future \\\n    portpicker \\\n    && test \"${USE_PYTHON_3_NOT_2}\" -eq 1 && true || ${PIP} --no-cache-dir install \\\n    enum34\n\n# Install bazel\nARG BAZEL_VERSION=0.26.1\nRUN mkdir /bazel && \\\n    wget -O /bazel/installer.sh \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh\" && \\\n    wget -O /bazel/LICENSE.txt \"https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE\" && \\\n    chmod +x /bazel/installer.sh && \\\n    /bazel/installer.sh && \\\n    rm -f /bazel/installer.sh\n\nCOPY bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\n\nRUN ${PIP} install jupyter matplotlib\nRUN ${PIP} install jupyter_http_over_ws\nRUN jupyter serverextension enable --py jupyter_http_over_ws\n\nRUN mkdir -p /tf/tensorflow-tutorials && chmod -R a+rwx /tf/\nRUN mkdir /.local && chmod a+rwx /.local\nRUN apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/*;\nWORKDIR /tf/tensorflow-tutorials\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_text_classification.ipynb\nCOPY readme-for-jupyter.md README.md\nRUN apt-get autoremove -y && apt-get remove -y wget\nWORKDIR /tf\nEXPOSE 8888\n\nRUN ${PYTHON} -m ipykernel.kernelspec\n\nCMD [\"bash\", \"-c\", \"source /etc/bash.bashrc && jupyter notebook --notebook-dir=/tf --ip 0.0.0.0 --no-browser --allow-root\"]\n"
}