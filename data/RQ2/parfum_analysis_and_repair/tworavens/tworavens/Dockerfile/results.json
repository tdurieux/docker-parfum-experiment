{
  "startTime": 1674254123412,
  "endTime": 1674254124189,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Note: This only runs the Django app, not the flask services\nFROM python:3.6.8\nMAINTAINER TwoRavens http://2ra.vn/\n\nLABEL organization=\"Two Ravens\" \\\n      2ra.vn.version=\"0.8\" \\\n      2ra.vn.release-date=\"2020-12-17\" \\\n      description=\"Image for the Two Ravens python service which serves the UI.\"\n\n# -------------------------------------\n# Install sqlite + debugging tools\n# -------------------------------------\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    apt-utils\\\n    iputils-ping \\\n    telnet \\\n    sqlite3 \\\n    vim \\\n    swig \\\n    build-essential && rm -rf /var/lib/apt/lists/*;\n\n# -------------------------------------\n# Install Redis client\n# -------------------------------------\nRUN cd /tmp && \\\n    wget https://download.redis.io/redis-stable.tar.gz && \\\n    tar xvzf redis-stable.tar.gz && \\\n    cd redis-stable && \\\n    make && \\\n    cp src/redis-cli /usr/local/bin/ && \\\n    chmod 755 /usr/local/bin/redis-cli && rm redis-stable.tar.gz\n\n# -------------------------------------\n# Pip update\n# -------------------------------------\nRUN pip install --no-cache-dir --upgrade pip\n\n# -------------------------------------\n# Set the workdir\n# -------------------------------------\nWORKDIR /var/webapps/TwoRavens\n\n# -------------------------------------\n# Copy over the requirements and run them\n# -------------------------------------\nCOPY ./requirements/ ./requirements\n\nRUN pip3 install --no-cache-dir -r requirements/prod.txt\n\n# -------------------------------------\n# Copy over the rest of the repository\n# -------------------------------------\nCOPY . .\n\n# -------------------------------------\n# Set some environment variables\n#   (This can be overridden in docker compose/kubernetes)\n#\n# - DJANGO_SETTINGS_MODULE: Django settings\n# - R_DEV_SERVER_BASE - rook-service docker container\n# - TA2_STATIC_TEST_MODE: True: use canned responses instead of a TA2 server\n# - TA2_TEST_SERVER_URL - TA2 test server\n# - CODE_REPOSITORY - repository where code will be copied\n# - ALLOW_SOCIAL_AUTH - Allow login with python social auth--needs oauth2\n#                       credentials on the deployment server\n# -------------------------------------\nENV DJANGO_SETTINGS_MODULE=tworavensproject.settings.dev_container2 \\\n    R_DEV_SERVER_BASE=http://rook-service:8000/ \\\n    TA2_STATIC_TEST_MODE=False \\\n    TA2_TEST_SERVER_URL=localhost:45042 \\\n    CODE_REPOSITORY=/var/webapps/TwoRavens \\\n    LC_ALL=C.UTF-8 \\\n    ALLOW_SOCIAL_AUTH=False\n\n#    export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n#     AUTOML_FAST_DEBUG=yes\n\n# -------------------------------------\n# Create a volume for sharing between containers\n# -------------------------------------\nVOLUME /ravens_volume\n\n# -------------------------------------\n# Run setup scripts\n#   - init_db - creates sqlite db for test run with\n#\n#   - create_django_superuser - Admin user created for testing\n#\n#   - create_test_user - Non-admin user created for testing\n#\n#   - load_docker_ui_config - sets JS variables for UI d3m_mode to true\n#\n#   - collect_static - django collect static files\n#\n#   - make_d3m_configs_from_files - makes test config files accessible via env variables\n#                             (not used for eval)\n#   - make_d3m_config - WARNING: for testing. Loads D3M info based on the test data\n#\n# -------------------------------------\n#RUN fab init_db && \\\n#    fab create_django_superuser && \\\n#    fab create_test_user  && \\\n#    fab load_docker_ui_config && \\\n#    fab collect_static\n\n#    fab make_d3m_configs_from_files && \\\n\n# -------------------------------------\n# Expose port for web communication\n# - web: 8080\n# -------------------------------------\nEXPOSE 8080\n\n# -------------------------------------\n# Copy the scripts: gce_start, d3m_start\n# -------------------------------------\n# COPY startup_script/ta3_search /usr/bin/ta3_search\n# COPY startup_script/gce_start.sh /usr/bin/gce_start.sh\nCOPY startup_script/d3m_start.sh /usr/bin/d3m_start.sh\nCOPY startup_script/d3m_start_multiuser.sh /usr/bin/d3m_start_multiuser.sh\nCOPY startup_script/d3m_start_gates_01.sh /usr/bin/d3m_start_gates_01.sh\n\nRUN chmod u+x /usr/bin/d3m_start.sh /usr/bin/d3m_start_multiuser.sh /usr/bin/d3m_start_gates_01.sh\n\n# -------------------------------------\n# Idle the container on startup so it\n# can receive subsequent commands\n# -------------------------------------\nENTRYPOINT tail -f /dev/null\n\n\n#CMD /usr/bin/ta3_search\n\n#RUN cd /var/webapps/TwoRavens && \\\n#    printf \"\\nStarting web server..\" && \\\n#    python manage.py runserver 0.0.0.0:8080 > /dev/null 2> /tmp/ta3-main-log.txt &\n\n# -------------------------------------\n# Run the python server (django dev or gunicorn)\n# -------------------------------------\n#CMD echo 'Run this container using ta3_search.' && \\\n#    echo 'Example: docker run --rm -ti -p8080:8080 --name=gomain ravens-main:stable ta3_search [path to D3M config]'\n\n#CMD echo 'Starting TwoRavens python server.' && \\\n#    cp -r ravens_volume/. /ravens_volume/ && \\\n#    python manage.py runserver 0.0.0.0:8080\n\n# Run with gunicorn\n#CMD gunicorn --workers=2 tworavensproject.wsgi_dev_container -b 0.0.0.0:8080\n"
}