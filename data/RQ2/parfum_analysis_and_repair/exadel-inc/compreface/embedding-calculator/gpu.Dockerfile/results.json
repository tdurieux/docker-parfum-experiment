{
  "startTime": 1674256133463,
  "endTime": 1674256134388,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 63,
        "columnEnd": 124
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 63,
        "columnEnd": 124
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG UBUNTU_VERSION=18.04\n\nARG ARCH=\nARG CUDA=10.0\nFROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\nARG ARCH\nARG CUDA\nARG CUDNN=7.6.4.38-1\nARG CUDNN_MAJOR_VERSION=7\nARG LIB_DIR_PREFIX=x86_64\nARG LIBNVINFER=6.0.1-1\nARG LIBNVINFER_MAJOR_VERSION=6\nENV CUDA=$CUDA\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\n# Pick up some TF dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        # There appears to be a regression in libcublas10=10.2.2.89-1 which\n        # prevents cublas from initializing in TF. See\n        # https://github.com/tensorflow/tensorflow/issues/9489#issuecomment-562394257\n        libcublas10=10.2.1.243-1 \\\n        cuda-nvrtc-${CUDA/./-} \\\n        cuda-cufft-${CUDA/./-} \\\n        cuda-curand-${CUDA/./-} \\\n        cuda-cusolver-${CUDA/./-} \\\n        cuda-cusparse-${CUDA/./-} \\\n        curl \\\n        libcudnn7=${CUDNN}+cuda${CUDA} \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        software-properties-common \\\n        unzip && rm -rf /var/lib/apt/lists/*;\n\n# Install TensorRT if not building for PowerPC\nRUN [[ \"${ARCH}\" = \"ppc64le\" ]] || { apt-get update && \\\n        apt-get install -y --no-install-recommends libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA} \\\n        libnvinfer-plugin${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA} \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/*; }\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n\n# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure\n# dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\nARG PYTHON=python3.7\nRUN add-apt-repository ppa:deadsnakes/ppa && apt-get update && apt-get install --no-install-recommends -y ${PYTHON} libpython3.7-dev libgl1-mesa-glx && rm -rf /var/lib/apt/lists/*;\nRUN curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py && ${PYTHON} get-pip.py\nRUN ${PYTHON} -m pip --no-cache-dir install --upgrade pip setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which $PYTHON) /usr/local/bin/python\n\n\n# Variables for Tensorflow\nENV TF_FORCE_GPU_ALLOW_GROWTH=true\n\n# Variables for MXNET\nENV MXNET_CPU_WORKER_NTHREADS=24\nENV MXNET_ENGINE_TYPE=ThreadedEnginePerDevice MXNET_CUDNN_AUTOTUNE_DEFAULT=0\n\n# No access to GPU devices in the build stage, so skip tests\nENV SKIP_TESTS=1\n# The number of processes depends on GPU memory.\n# Keep in mind that one uwsgi process with InsightFace consumes about 2.5GB memory\nENV UWSGI_PROCESSES=1"
}