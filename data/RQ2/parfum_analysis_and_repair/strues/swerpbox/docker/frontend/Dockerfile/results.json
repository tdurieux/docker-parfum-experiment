{
  "startTime": 1674249291055,
  "endTime": 1674249292016,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM swerpbox/alpine-base\n\nARG NGINX_VERSION=1.11.9\n\nARG BROTLI_COMMIT=1b364aeb42a0919e7c08646aa4f2f50e28d69fa5\nARG NGX_BROTLI_COMMIT=12529813a9f8475718370a19007c7905601a62ad\n\nLABEL org.label-schema.vendor=\"SwerpBox: Frontend\" \\\n      org.label-schema.build-date=\"2017-01-27T00:12:00+00:00\" \\\n      org.label-schema.name=\"Frontend (nginx) running on Alpine 3.5\" \\\n      org.label-schema.vcs-type=\"git\" \\\n      org.label-schema.vcs-url=\"https://github.com/strues/swerpbox\" \\\n      maintainer=\"Steven Truesdell <steven@strues.io>\"\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/logs/frontend/nginx-error.log \\\n\t\t--http-log-path=/logs/frontend/nginx-access.log \\\n\t\t--pid-path=/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=swerp \\\n\t\t--group=swerp \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module=dynamic \\\n\t\t--with-http_image_filter_module=dynamic \\\n\t\t--with-http_geoip_module=dynamic \\\n\t\t--with-http_perl_module=dynamic \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-http_slice_module \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\t--with-ipv6 \\\n\t\t--add-module=/usr/src/ngx_brotli \\\n                --with-cc-opt=-Wno-error \\\n\t\" \\\n\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg \\\n\t\tlibxslt-dev \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t\tperl-dev \\\n\t&& apk add --no-cache --virtual .brotli-build-deps \\\n\t\tautoconf \\\n\t\tlibtool \\\n\t\tautomake \\\n\t\tgit \\\n\t\tg++ \\\n\t\tcmake \\\n\t&& mkdir -p /usr/src \\\n\t&& mkdir -p /logs/frontend \\\n\t&& cd /usr/src \\\n\t&& git clone https://github.com/google/brotli.git \\\n\t&& cd brotli \\\n\t&& git checkout -b $BROTLI_COMMIT $BROTLI_COMMIT \\\n\t&& cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=/usr/lib -DBUILD_SHARED_LIBS=ON \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& cd .. \\\n\t&& rm -rf brotli \\\n\t&& git clone https://github.com/google/ngx_brotli.git \\\n\t&& cd ngx_brotli \\\n\t&& git checkout -b $NGX_BROTLI_COMMIT $NGX_BROTLI_COMMIT \\\n\t&& cd .. \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEYS\" \\\n\t&& gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t&& mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& rm -rf /etc/nginx/conf.d/* \\\n\t&& mkdir /etc/nginx/vhost.d/ \\\n\t&& mkdir -p /var/www/public \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t&& install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& strip /usr/lib/nginx/modules/*.so \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\t&& rm -rf /usr/src/ngx_brotli \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .brotli-build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /logs/frontend/nginx-access.log \\\n\t&& ln -sf /dev/stderr /logs/frontend/nginx-error.log \\\n    && chmod -R 0777 /logs/frontend && \\\n\tmkdir -p /var/cache/nginx/client_temp && chmod 0777 /var/cache/nginx/client_temp\n\nRUN apk add --no-cache apache2-utils\n\nEXPOSE 80 443\n\nCOPY rootfs/ /\n\nVOLUME [\"/config\", \"/data\", \"/logs\"]\n"
}