{
  "startTime": 1674216735942,
  "endTime": 1674216737468,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (C) The Arvados Authors. All rights reserved.\n#\n# SPDX-License-Identifier: AGPL-3.0\n\nARG HOSTTYPE\nARG BRANCH\nARG GOVERSION\n\nFROM ubuntu:focal as build_x86_64\n# Install go\nONBUILD ARG GOVERSION\nONBUILD ADD generated/go${GOVERSION}.linux-amd64.tar.gz /usr/local/\nONBUILD RUN ln -s /usr/local/go/bin/go /usr/local/bin/\n# Install nodejs and npm\nONBUILD ADD generated/node-v10.23.1-linux-x64.tar.xz /usr/local/\nONBUILD RUN ln -s /usr/local/node-v10.23.1-linux-x64/bin/* /usr/local/bin/\n# On x86, we want some cross-compilation support for arm64\n# Add gcc-aarch64-linux-gnu to compile go binaries for arm64\nONBUILD RUN /usr/bin/apt-get update && /usr/bin/apt-get install -q -y gcc-aarch64-linux-gnu\n# We also need libpam compiled for arm64, and that requires some sources.list mangling\nONBUILD RUN /bin/sed -i 's/deb http/deb [ arch=amd64 ] http/' /etc/apt/sources.list\nONBUILD ADD ports.list /etc/apt/sources.list.d/\nONBUILD RUN /usr/bin/dpkg --add-architecture arm64\nONBUILD RUN /usr/bin/apt-get update && /usr/bin/apt-get install -o APT::Immediate-Configure=0 -q -y libpam0g-dev:arm64\n# Note that cross compilation support for ubuntu2004 is disabled in\n# run-library.sh because of\n# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=983477. Hopefully\n# ubuntu2204 will have the fix introduced in debian11.\n\nFROM ubuntu:focal as build_aarch64\n# Install go\nONBUILD ARG GOVERSION\nONBUILD ADD generated/go${GOVERSION}.linux-arm64.tar.gz /usr/local/\nONBUILD RUN ln -s /usr/local/go/bin/go /usr/local/bin/\n# Install nodejs and npm\nONBUILD ADD generated/node-v10.23.1-linux-arm64.tar.xz /usr/local/\nONBUILD RUN ln -s /usr/local/node-v10.23.1-linux-arm64/bin/* /usr/local/bin/\n\nFROM build_${HOSTTYPE}\n\nMAINTAINER Arvados Package Maintainers <packaging@arvados.org>\n\nENV DEBIAN_FRONTEND noninteractive\n\nSHELL [\"/bin/bash\", \"-c\"]\n# Install dependencies.\nRUN /usr/bin/apt-get update && /usr/bin/apt-get install -q -y python3 python3-pip libcurl4-gnutls-dev libgnutls28-dev curl git libattr1-dev libfuse-dev libpq-dev unzip tzdata python3-venv python3-dev libpam-dev shared-mime-info equivs\n\n# Install virtualenv\nRUN /usr/bin/pip3 install 'virtualenv<20'\n\n# Install RVM\nADD generated/mpapis.asc /tmp/\nADD generated/pkuczynski.asc /tmp/\nRUN gpg --batch --import --no-tty /tmp/mpapis.asc && \\\n    gpg --batch --import --no-tty /tmp/pkuczynski.asc && \\\n    curl -f -L https://get.rvm.io | bash -s stable && \\\n    /usr/local/rvm/bin/rvm install 2.7 -j $(grep -c processor /proc/cpuinfo) && \\\n    /usr/local/rvm/bin/rvm alias create default ruby-2.7 && \\\n    echo \"gem: --no-document\" >> ~/.gemrc && \\\n    /usr/local/rvm/bin/rvm-exec default gem install bundler --version 2.2.19 && \\\n    /usr/local/rvm/bin/rvm-exec default gem install fpm --version 1.10.2\n\nRUN /usr/local/rvm/bin/rvm-exec default bundle config --global jobs $(let a=$(grep -c processor /proc/cpuinfo )-1; echo $a)\n# Cf. https://build.betterup.com/one-weird-trick-that-will-speed-up-your-bundle-install/\nENV MAKE \"make --jobs $(grep -c processor /proc/cpuinfo)\"\n\n# Preseed the go module cache and the ruby gems, using the currently checked\n# out branch of the source tree. This avoids potential compatibility issues\n# between the version of Ruby and certain gems.\nRUN git clone --depth 1 git://git.arvados.org/arvados.git /tmp/arvados && \\\n    cd /tmp/arvados && \\\n    if [[ -n \"${BRANCH}\" ]]; then git checkout ${BRANCH}; fi && \\\n    cd /tmp/arvados/services/api && \\\n    /usr/local/rvm/bin/rvm-exec default bundle install && \\\n    cd /tmp/arvados/apps/workbench && \\\n    /usr/local/rvm/bin/rvm-exec default bundle install && \\\n    cd /tmp/arvados && \\\n    go mod download\n\n\nENV WORKSPACE /arvados\nCMD [\"/usr/local/rvm/bin/rvm-exec\", \"default\", \"bash\", \"/jenkins/run-build-packages.sh\", \"--target\", \"ubuntu2004\"]\n"
}