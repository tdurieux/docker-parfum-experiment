{
  "startTime": 1674255740934,
  "endTime": 1674255742233,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG IMAGE_NAME=\"rewardenv/php\"\nARG IMAGE_BASE=\"debian\"\nARG PHP_VERSION\nARG PHP_VARIANT=\"fpm-loaders\"\nFROM ${IMAGE_NAME}:${PHP_VERSION}-${PHP_VARIANT}-${IMAGE_BASE}\n\nARG PHP_VERSION\n\n# Clear undesired settings from base fpm images\nENV COMPOSER_ALLOW_SUPERUSER=\"\"\nENV COMPOSER_HOME=\"\"\n\nENV MAILHOG_HOST    mailhog\nENV MAILHOG_PORT    1025\nENV NODE_VERSION    10\n\nCOPY rootfs/. /\n\nRUN set -eux \\\n    && apt-get update && apt-get install -y --no-install-recommends \\\n    autoconf \\\n    automake \\\n    bash-completion \\\n    cron \\\n    default-mysql-client \\\n    dnsutils \\\n    less \\\n    jq \\\n    nano \\\n    python3-pip \\\n    pwgen \\\n    rsync \\\n    socat \\\n    sudo \\\n    vim \\\n    wget \\\n    && rm -rf /var/lib/apt/lists/* /var/log/apt \\\n    # Install mhsendmail to support routing email through mailhog \\\n    && BUILD_ARCH=\"$(dpkg --print-architecture)\" \\\n    && if [ \"${BUILD_ARCH}\" = \"arm64\" ]; \\\n        then MHSENDMAIL_ARCH=\"arm\"; \\\n        else MHSENDMAIL_ARCH=\"amd64\" ; \\\n    fi \\\n    && curl -fsSLo /usr/local/bin/mhsendmail \\\n      \"https://github.com/mailhog/mhsendmail/releases/latest/download/mhsendmail_linux_${MHSENDMAIL_ARCH}\" \\\n    && chmod +x /usr/local/bin/mhsendmail \\\n    && ln -sf /usr/local/bin/mhsendmail /usr/sbin/sendmail \\\n    # Install awscli to support data backfill workflows using S3 storage \\\n    && pip3 install --no-cache-dir --upgrade pip \\\n    && pip3 install awscli --no-cache-dir \\\n    # Install node\n    && npm install -g n \\\n    && n install ${NODE_VERSION} \\\n    && rm -rf /usr/local/n/versions/node \\\n    # Configure Bash\n    && { \\\n      echo; \\\n      echo 'if [ -d /etc/profile.d ]; then'; \\\n      echo '  for i in /etc/profile.d/*.sh; do'; \\\n      echo '    if [ -r $i ]; then'; \\\n      echo '      . $i'; \\\n      echo '    fi'; \\\n      echo '  done'; \\\n      echo '  unset i'; \\\n      echo 'fi'; \\\n      } | tee -a /etc/bash.bashrc \\\n    # Configure www-data user as primary php-fpm user for better local dev experience\n    && useradd www-data || true \\\n    && usermod -d /home/www-data -u 1000 --shell /bin/bash www-data \\\n    && groupmod -g 1000 www-data \\\n    && mkhomedir_helper www-data \\\n    && chmod 0755 ~www-data \\\n    && mkdir -p /var/www/html \\\n    && PHP_FPM_USER=$(grep -i '^user = ' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf | awk '{print $3}') \\\n    && PHP_FPM_GROUP=$(grep -i '^group = ' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf | awk '{print $3}') \\\n    && find /var/log /var/lib/php -uid $(id -u ${PHP_FPM_USER}) -exec chown -v www-data {} + \\\n    && find /var/log /var/lib/php -gid $(id -g ${PHP_FPM_GROUP}) -exec chgrp -v www-data {} + \\\n    && perl -pi -e 's/^(user|group) = php-fpm$/$1 = www-data/g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf \\\n    && chown www-data:www-data /var/www/html \\\n    && chown -R www-data: /etc/php /var/lib/php \\\n    && usermod -aG sudo www-data \\\n    && echo \"%sudo ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/sudo \\\n    && chmod +x /docker-entrypoint.sh && npm cache clean --force;\n\nWORKDIR /var/www/html\nUSER www-data\n"
}