{
  "startTime": 1674254703084,
  "endTime": 1674254704423,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 8,
        "columnEnd": 81
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 8,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile enables an iterative development workflow where you can make\n# a change and test it out quickly. The majority of commands in this file will\n# be cached, making the feedback loop typically quite short. The workflow is\n# as follows:\n#   1. Set up pre-conditions for the system in puppet code using `deploy.pp`.\n#   2. Make a change to the module.\n#   3. Run `docker build -f docker/Dockerfile .` or\n#      `./docker/bin/upgrade.sh rocky` from the project directory. If you would\n#      like to test specific version upgrades, you can add run this like so:\n#        `docker build -f docker/rocky/Dockerfile . \\\n#           -t pa-dev:rocky --build-arg before=1.10.14`\n#   4. Upgrade the container by running the image:\n#        `docker run -it pa-dev:rocky`\n#      Specify your upgrade TO version as an argument to the `docker run`\n#      command.\n#   5. Review the output. Repeat steps 2-5 as needed.\n#\n# At the end of execution, you will see a line like:\n#\n# Notice: /Stage[main]/Puppet_agent::Install/Package[puppet-agent]/ensure: ensure changed '1.10.14-1.el8' to '6.2.0'\n#\n# This specifies the versions that were used for upgrade.\n#\n# Arguments:\n# - before: The version to do upgrade FROM. Default: \"1.10.14\"\n\nFROM rockylinux/rockylinux:8\n\n# Use this to force a cache reset (e.g. for output purposes)\n#COPY $0 /tmp/Dockerfile\n\n# Install some other dependencies for ease of life.\nRUN  dnf update -y \\\n  && dnf install -y wget git \\\n  && dnf clean all\n\nARG before=1.10.14\nLABEL before=${before}\n\n# Install proper FROM repo: puppet 6 or puppet 7.\nRUN if [[ ${before} == 6.* ]]; then \\\n        echo Installing puppet6 repo; \\\n        wget -O puppet6.rpm https://yum.puppet.com/puppet6-release-el-8.noarch.rpm && \\\n        rpm -i puppet6.rpm; \\\n    elif [[ ${before} == 7.* ]]; then \\\n        echo Installing puppet7 repo; \\\n        wget -O puppet7.rpm https://yum.puppet.com/puppet7-release-el-8.noarch.rpm && \\\n        rpm -i puppet7.rpm; \\\n    else echo no; \\\n    fi\n\n# Print out which versions of the puppet-agent package are available (for reference).\n#RUN dnf list puppet-agent --showduplicates\n\n# Install FROM version of puppet-agent.\nRUN dnf -y update && \\\n    dnf install -y puppet-agent-${before}-1.el8\n\n# This is also duplicated in the docker/bin/helpers/run-upgrade.sh.\nENV module_path=/tmp/modules\nWORKDIR \"${module_path}/puppet_agent\"\nCOPY metadata.json ./\n\n# Dependency installation: Forge or source? The former is what the user will\n# have downloaded, but the latter allows testing of version bumps.\n# Install module dependencies from the Forge using Puppet Module Tool (PMT).\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-stdlib\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-inifile\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-apt\n\n# Installing dependencies from source. These versions should be within the range\n# of `dependencies` in metadata.json. `translate` is a dependency for inifile.\n#RUN git clone https://github.com/puppetlabs/puppetlabs-stdlib ../stdlib --branch 5.2.0\n#RUN git clone https://github.com/puppetlabs/puppetlabs-inifile ../inifile --branch 2.5.0\n#RUN git clone https://github.com/puppetlabs/puppetlabs-translate ../translate --branch 1.2.0\n#RUN git clone https://github.com/puppetlabs/puppetlabs-apt ../apt --branch 6.3.0\n\n# Check that all dependencies are installed.\nRUN /opt/puppetlabs/puppet/bin/puppet module --modulepath $module_path list --tree\nCOPY docker/deploy.pp /tmp/deploy.pp\nRUN [\"sh\", \"-c\", \"/opt/puppetlabs/puppet/bin/puppet apply --modulepath $module_path /tmp/deploy.pp\"]\n\n# Now move the project directory's files into the image. That way, if these\n# files change, caching will skip everything before this.\nCOPY docker/bin/helpers/run-upgrade.sh /tmp/bin/run-upgrade.sh\nCOPY files/ ./files/\nCOPY locales/ ./locales/\nCOPY spec/ ./spec/\nCOPY task_spec/  ./task_spec/\nCOPY tasks/ ./tasks/\nCOPY templates/ ./templates\nCOPY types/ ./types/\nCOPY Gemfile Gemfile.lock Rakefile ./\nCOPY lib/ ./lib/\nCOPY manifests/ ./manifests/\n\nCOPY docker/upgrade.pp /tmp/upgrade.pp\n\n# Print out which versions of the puppet-agent package are available (for reference).\n#RUN yum list puppet-agent --showduplicates\n\n# Perform the upgrade.\nENTRYPOINT [\"/tmp/bin/run-upgrade.sh\"]\n"
}