{
  "startTime": 1674251361370,
  "endTime": 1674251362792,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 103,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedDockerfile": "##################\n### Build CKAN ###\n##################\nFROM ubuntu:focal-20210827 as ckanbuild\n\n# Used by Github Actions to tag the image with\nENV IMAGE_TAG=2.9.5-focal\n\n# Set CKAN version to build\nENV GIT_URL=https://github.com/ckan/ckan.git\nENV GIT_BRANCH=ckan-2.9.5\n\n# Set timezone\nENV TZ=UTC\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Set Locale\nENV LC_ALL=en_US.UTF-8\n\n# Set src dirs\nENV SRC_DIR=/srv/app/src\nENV PIP_SRC=${SRC_DIR}\n\nWORKDIR ${SRC_DIR}\n\n# Set the locale         \nRUN apt-get update\nRUN apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;\nRUN sed -i \"/$LC_ALL/s/^# //g\" /etc/locale.gen\nRUN dpkg-reconfigure --frontend=noninteractive locales\nRUN update-locale LANG=${LC_ALL}\n\n# Instal apt-utils\nRUN apt-get install --no-install-recommends -y \\\n        apt-utils && rm -rf /var/lib/apt/lists/*;\n\n# Packages to build CKAN requirements and plugins\nRUN apt-get install --no-install-recommends -y \\\n        git \\\n        curl \\\n        ca-certificates \\\n        python3 \\\n        libpq-dev \\\n        linux-headers-generic \\\n\t\t\t\t\tgcc-10 \\\n\t\t\t\t\tmake \\\n\t\t\t\t\tg++-10 \\\n\t\t\t\t\tautoconf \\\n\t\t\t\t\tautomake \\\n\t\t\t\t\tlibtool \\\n        patch \\\n        libpcre3-dev \\\n        libpcre3 \\\n        python3-dev \\\n        libffi-dev \\\n        libxml2-dev \\\n        libxslt-dev && rm -rf /var/lib/apt/lists/*;\n\n# Use gcc 10\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10 --slave /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/x86_64-linux-gnu-gcc-10\n\n# Link python to python3\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\n# Create the src directory\nRUN mkdir -p ${SRC_DIR}\n\n# Install pip\nRUN curl -f -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python ${SRC_DIR}/get-pip.py\n\n# Downgrade setuptools so that CKAN requirements can be built\nRUN pip install --no-cache-dir setuptools==44.1.0\n\n# Fetch and build CKAN and requirements\nRUN pip install --no-cache-dir -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan\n# Copy patches and apply patches script\nCOPY ./patches ${SRC_DIR}/patches\nCOPY ./scripts/apply_ckan_patches.sh ${SRC_DIR}/apply_ckan_patches.sh\n# Apply patches\nRUN ${SRC_DIR}/apply_ckan_patches.sh\nRUN rm -rf /srv/app/src/ckan/.git\nRUN pip wheel --wheel-dir=/wheels -r ckan/requirements.txt\nRUN pip wheel --wheel-dir=/wheels uWSGI==2.0.20 gevent==21.1.2 greenlet==1.1.0\n\n\n###########################\n### Default-Extensions ####\n###########################\nFROM ubuntu:focal-20210827 as extbuild\n\n# Set src dirs\nENV SRC_DIR=/srv/app/src\nENV PIP_SRC=${SRC_DIR}\n\n# List of default extensions\nENV DEFAULT_EXTENSIONS envvars\n\n# Locations and tags, please use specific tags or revisions\nENV ENVVARS_GIT_URL=https://github.com/okfn/ckanext-envvars\nENV ENVVARS_GIT_BRANCH=0.0.1\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        git \\\n        curl \\\n        ca-certificates \\\n        python3 \\\n        python3-dev && rm -rf /var/lib/apt/lists/*;\n\n# Link python to python3\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\n# Create the src directory\nRUN mkdir -p ${SRC_DIR}\n\n# Install pip\nRUN curl -f -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python ${SRC_DIR}/get-pip.py\n\n# Downgrade setuptools so that CKAN requirements can be built\nRUN pip install --no-cache-dir setuptools==44.1.0\n\n# Fetch and build the default CKAN extensions\nRUN pip wheel --wheel-dir=/wheels git+${ENVVARS_GIT_URL}@${ENVVARS_GIT_BRANCH}#egg=ckanext-envvars\n\n############\n### MAIN ###\n############\nFROM ubuntu:focal-20210827\n\nLABEL maintainer=\"Keitaro Inc <info@keitaro.com>\"\nLABEL org.opencontainers.image.source https://github.com/keitaroinc/docker-ckan\n\n# Set timezone\nENV TZ=UTC\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Set Locale\nENV LC_ALL=en_US.UTF-8\n\n# Set the locale         \nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y locales && \\\n    sed -i \"/$LC_ALL/s/^# //g\" /etc/locale.gen && \\\n    dpkg-reconfigure --frontend=noninteractive locales && \\\n    update-locale LANG=${LC_ALL} && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV APP_DIR=/srv/app\nENV SRC_DIR=/srv/app/src\nENV CKAN_DIR=${SRC_DIR}/ckan\nENV DATA_DIR=/srv/app/data\nENV PIP_SRC=${SRC_DIR}\nENV CKAN_SITE_URL=http://localhost:5000\nENV CKAN__PLUGINS envvars image_view text_view recline_view datastore datapusher\n\n# Install necessary packages to run CKAN\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        gettext \\\n\tcurl \\\n        ca-certificates \\\n        libpq5 \\\n        git \\\n\tpostgresql-client \\\n        python3 \\\n\tpython3-distutils \\\n\tlibpython3.8 \\\n        libmagic1 \\\n        libpcre3 \\\n        libxslt1.1 \\\n        libxml2 \\\n        tzdata \\\n        apache2-utils && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    # Create SRC_DIR\n    mkdir -p ${SRC_DIR} && \\\n    # Link python to python3\n    ln -s /usr/bin/python3 /usr/bin/python\n\n# Install pip\nRUN curl -f -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python ${SRC_DIR}/get-pip.py\n\n# Downgrade setuptools so that CKAN requirements can be built\nRUN pip install --no-cache-dir setuptools==44.1.0\n\n# Get artifacts from build stages\nCOPY --from=ckanbuild /wheels /srv/app/wheels\nCOPY --from=extbuild /wheels /srv/app/ext_wheels\nCOPY --from=ckanbuild /srv/app/src/ckan ${CKAN_DIR}\n\n# Additional install steps for build stages artifacts\nRUN pip install --no-cache-dir --no-index --find-links=/srv/app/wheels uWSGI==2.0.20 gevent==21.1.2\n\n# Create a local user and group to run the app\nRUN groupadd -g 92 ckan && \\\n    useradd -rm -d /srv/app -s /bin/bash -g ckan -u 92 ckan\n\nWORKDIR ${CKAN_DIR}\n\n# Install CKAN\nRUN pip install --no-cache-dir -e /srv/app/src/ckan && \\\n    cp who.ini ${APP_DIR} && \\\n    pip install --no-cache-dir --no-index --find-links=/srv/app/wheels -r requirements.txt && \\\n    # Install default CKAN extensions\n    pip install --no-cache-dir --no-index --find-links=/srv/app/ext_wheels ckanext-envvars && \\\n    # Create and update CKAN config\n    # Generate CKAN config\n    ckan generate config ${APP_DIR}/production.ini && \\\n    # Configure plugins\n    ckan config-tool ${APP_DIR}/production.ini \"ckan.plugins = ${CKAN__PLUGINS}\" && \\\n    # Create the data directory\n    mkdir ${DATA_DIR} && \\\n    # Webassets can't be loaded from env variables at runtime, it needs to be in the config so that it is created\n    ckan config-tool ${APP_DIR}/production.ini \"ckan.webassets.path = ${DATA_DIR}/webassets\" && \\\n    # Set the default level for extensions to INFO\n    ckan config-tool ${APP_DIR}/production.ini -s logger_ckanext -e level=INFO && \\\n    # Change ownership to app user\n    chown -R ckan:ckan /srv/app\n\n# Remove wheels\nRUN rm -rf /srv/app/wheels /srv/app/ext_wheels\n\n# Copy necessary scripts\nCOPY setup/app ${APP_DIR}\n\nWORKDIR ${APP_DIR}\n\n# Create entrypoint directory for children image scripts\nONBUILD RUN mkdir docker-entrypoint.d\n\n# Create afterinit directory for children image scripts\nONBUILD RUN mkdir docker-afterinit.d\n\nEXPOSE 5000\n\nHEALTHCHECK --interval=10s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit 1\n\nUSER ckan\n\nCMD [\"/srv/app/start_ckan.sh\"]\n"
}