{
  "startTime": 1674250305034,
  "endTime": 1674250306287,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 75
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##################\n### Build CKAN ###\n##################\nFROM alpine:3.13.7 as ckanbuild\n\n# Used by Github Actions to tag the image with\nENV IMAGE_TAG=2.9.5\n\n# Set CKAN version to build\nENV GIT_URL=https://github.com/ckan/ckan.git\nENV GIT_BRANCH=ckan-2.9.5\n\n# Set src dirs\nENV SRC_DIR=/srv/app/src\nENV PIP_SRC=${SRC_DIR}\n\nWORKDIR ${SRC_DIR}\n\n# Packages to build CKAN requirements and plugins\nRUN apk add --no-cache \\\n        python3 \\\n        python3-dev \\\n        git \\\n        curl \\\n        postgresql-dev \\\n        linux-headers \\\n        gcc \\\n        make \\\n        g++ \\\n        autoconf \\\n        automake \\\n        libtool \\\n        patch \\\n        musl-dev \\\n        pcre-dev \\\n        pcre \\\n        libffi-dev \\\n        libxml2-dev \\\n        libxslt-dev\n\n# Link python to python3\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\n# Create the src directory\nRUN mkdir -p ${SRC_DIR}\n\n# Install pip\nRUN curl -f -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python ${SRC_DIR}/get-pip.py\n\n# Downgrade setuptools so that CKAN requirements can be built\nRUN pip install --no-cache-dir setuptools==44.1.0\n\n# Fetch and build CKAN and requirements\nRUN pip install --no-cache-dir -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan\n# Copy patches and apply patches script\nCOPY ./patches ${SRC_DIR}/patches\nCOPY ./scripts/apply_ckan_patches.sh ${SRC_DIR}/apply_ckan_patches.sh\n# Apply patches\nRUN ${SRC_DIR}/apply_ckan_patches.sh\nRUN rm -rf /srv/app/src/ckan/.git\nRUN pip wheel --wheel-dir=/wheels -r ckan/requirements.txt\nRUN pip wheel --wheel-dir=/wheels uWSGI==2.0.20 gevent==21.1.2 greenlet==1.1.0\n\n\n###########################\n### Default-Extensions ####\n###########################\nFROM alpine:3.13.7 as extbuild\n\n# Set src dirs\nENV SRC_DIR=/srv/app/src\nENV PIP_SRC=${SRC_DIR}\n\n# List of default extensions\nENV DEFAULT_EXTENSIONS envvars\n\n# Locations and tags, please use specific tags or revisions\nENV ENVVARS_GIT_URL=https://github.com/okfn/ckanext-envvars\nENV ENVVARS_GIT_BRANCH=0.0.1\n\nRUN apk add --no-cache \\\n        python3 \\\n        python3-dev \\\n        git \\\n        curl\n\n# Link python to python3\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\n# Create the src directory\nRUN mkdir -p ${SRC_DIR}\n\n# Install pip\nRUN curl -f -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python ${SRC_DIR}/get-pip.py\n\n# Fetch and build the default CKAN extensions\nRUN pip wheel --wheel-dir=/wheels git+${ENVVARS_GIT_URL}@${ENVVARS_GIT_BRANCH}#egg=ckanext-envvars\n\n############\n### MAIN ###\n############\nFROM alpine:3.13.7\n\nLABEL maintainer=\"Keitaro Inc <info@keitaro.com>\"\nLABEL org.opencontainers.image.source https://github.com/keitaroinc/docker-ckan\n\nENV APP_DIR=/srv/app\nENV SRC_DIR=/srv/app/src\nENV CKAN_DIR=${SRC_DIR}/ckan\nENV DATA_DIR=/srv/app/data\nENV PIP_SRC=${SRC_DIR}\nENV CKAN_SITE_URL=http://localhost:5000\nENV CKAN__PLUGINS envvars image_view text_view recline_view datastore datapusher\n\n# Install necessary packages to run CKAN\nRUN apk add --no-cache \\\n        python3 \\\n        bash \\\n        git \\\n        gettext \\\n        curl \\\n        postgresql-client \\\n        libmagic \\\n        pcre \\\n        libxslt \\\n        libxml2 \\\n        tzdata \\\n        apache2-utils && \\\n    # Create SRC_DIR\n    mkdir -p ${SRC_DIR} && \\\n    # Link python to python3\n    ln -s /usr/bin/python3 /usr/bin/python\n\n# Install pip\nRUN curl -f -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python ${SRC_DIR}/get-pip.py\n\n# Get artifacts from build stages\nCOPY --from=ckanbuild /wheels /srv/app/wheels\nCOPY --from=extbuild /wheels /srv/app/ext_wheels\nCOPY --from=ckanbuild /srv/app/src/ckan ${CKAN_DIR}\n\n# Additional install steps for build stages artifacts\nRUN pip install --no-cache-dir --no-index --find-links=/srv/app/wheels uWSGI==2.0.20 gevent==21.1.2\n\n# Create a local user and group to run the app\nRUN addgroup -g 92 -S ckan && \\\n    adduser -u 92 -h /srv/app -H -D -S -G ckan ckan\n\nWORKDIR ${CKAN_DIR}\n\n# Install CKAN\nRUN pip install --no-cache-dir -e /srv/app/src/ckan && \\\n    cp who.ini ${APP_DIR} && \\\n    pip install --no-cache-dir --no-index --find-links=/srv/app/wheels -r requirements.txt && \\\n    # Install default CKAN extensions\n    pip install --no-cache-dir --no-index --find-links=/srv/app/ext_wheels ckanext-envvars && \\\n    # Create and update CKAN config\n    # Set timezone\n    echo \"UTC\" >  /etc/timezone && \\\n    # Generate CKAN config\n    ckan generate config ${APP_DIR}/production.ini && \\\n    # Configure plugins\n    ckan config-tool ${APP_DIR}/production.ini \"ckan.plugins = ${CKAN__PLUGINS}\" && \\\n    # Create the data directory\n    mkdir ${DATA_DIR} && \\\n    # Webassets can't be loaded from env variables at runtime, it needs to be in the config so that it is created\n    ckan config-tool ${APP_DIR}/production.ini \"ckan.webassets.path = ${DATA_DIR}/webassets\" && \\\n    # Set the default level for extensions to INFO\n    ckan config-tool ${APP_DIR}/production.ini -s logger_ckanext -e level=INFO && \\\n    # Change ownership to app user\n    chown -R ckan:ckan /srv/app\n\n# Remove wheels\nRUN rm -rf /srv/app/wheels /srv/app/ext_wheels\n\n# Copy necessary scripts\nCOPY setup/app ${APP_DIR}\n\nWORKDIR ${APP_DIR}\n\n# Create entrypoint directory for children image scripts\nONBUILD RUN mkdir docker-entrypoint.d\n\n# Create afterinit directory for children image scripts\nONBUILD RUN mkdir docker-afterinit.d\n\nEXPOSE 5000\n\nHEALTHCHECK --interval=10s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit 1\n\nUSER ckan\n\nCMD [\"/srv/app/start_ckan.sh\"]\n"
}