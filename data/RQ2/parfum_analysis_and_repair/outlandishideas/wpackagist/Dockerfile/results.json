{
  "startTime": 1674252571731,
  "endTime": 1674252572242,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 26,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:8.1-apache\n\nARG env\nRUN test -n \"$env\"\n\n# Install the AWS CLI - needed to load in secrets safely from S3. See https://aws.amazon.com/blogs/security/how-to-manage-secrets-for-amazon-ec2-container-service-based-applications-by-using-amazon-s3-and-docker/\nRUN apt-get update -qq && apt-get install --no-install-recommends -y awscli && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apk/*\n\n# Install svn client, a requirement for the current native exec approach; git for\n# Composer pulls; libpq-dev for Postgres; libicu-dev for intl; libonig-dev for mbstring.\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -y git libicu-dev libonig-dev libpq-dev subversion && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apk/*\n\n# intl recommended by something in the Doctrine/Symfony stack for improved performance.\nRUN docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \\\n && docker-php-ext-install intl mbstring pdo_pgsql\n\nRUN docker-php-ext-enable opcache\n\nRUN pecl install redis && rm -rf /tmp/pear && docker-php-ext-enable redis\n\n# Get latest Composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\n# Set up virtual host.\nCOPY config/apache/symfony.conf /etc/apache2/sites-available/\nRUN a2enmod rewrite \\\n && a2enmod remoteip \\\n && a2dissite 000-default \\\n && a2ensite symfony \\\n && echo ServerName localhost >> /etc/apache2/apache2.conf\n\nCOPY . /var/www/html\n\n# Configure PHP to e.g. not hit 128M memory limit.\nCOPY ./config/php/php.ini /usr/local/etc/php/\n\n# Ensure Apache can run as www-data and still write to these when the Docker build creates them as root.\nRUN mkdir /tmp/twig\nRUN chmod -R 777 /tmp/twig\n\nRUN APP_ENV=${env} composer install --no-interaction --quiet --optimize-autoloader --no-dev\n"
}