{
  "startTime": 1674249314207,
  "endTime": 1674249315208,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM hexpm/elixir:1.13.3-erlang-24.3.2-alpine-3.15.0 AS elixir-builder\n\n# elixir expects utf8.\nENV LANG=C.UTF-8 \\\n  MIX_ENV=prod\n\nWORKDIR /root\nADD . .\n\n# Install git so we can install dependencies from GitHub\nRUN apk add --no-cache --update git\n\n# Install Hex+Rebar+deps\nRUN mix local.hex --force && \\\n  mix local.rebar --force && \\\n  mix do deps.get --only prod\n\nFROM node:14-alpine3.15 as assets-builder\n\nWORKDIR /root\nADD . .\n\n# Copy in elixir deps required to build node modules for phoenix\nCOPY --from=elixir-builder /root/deps ./deps\n\nRUN npm --prefix assets ci\nRUN npm --prefix assets run deploy\n\nFROM elixir-builder as app-builder\n\nENV LANG=\"C.UTF-8\" MIX_ENV=prod\n\nRUN apk add --no-cache --update curl\n\nWORKDIR /root\n\nRUN curl -f https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem \\\n    -o aws-cert-bundle.pem\nRUN echo \"acaf8712f8d71c05f85503c6b90fd0127e95ff0091bf094a22a650119684a08e  aws-cert-bundle.pem\" | sha256sum -c -\n\n# Add frontend assets compiled in node container, required by phx.digest\nCOPY --from=assets-builder /root/priv/static ./priv/static\n\nRUN mix do compile --force, phx.digest, release\n\nFROM alpine:3.15.4\n\nRUN apk upgrade --no-cache --update\n\nRUN apk add --no-cache --update libssl1.1 libstdc++ \\\n    libgcc ncurses-libs bash curl dumb-init\n\n# Create non-root user\nRUN addgroup -S skate && adduser -S -G skate skate\nWORKDIR /home/skate\nUSER skate\n\n# Set environment\nENV MIX_ENV=prod TERM=xterm LANG=\"C.UTF-8\" PORT=4000 REPLACE_OS_VARS=true\n\n# Add frontend assets with manifests from app-builder container\nCOPY --from=app-builder --chown=skate:skate /root/priv/static ./priv/static\n\n# Add application artifact compiled in app-builder container\nCOPY --from=app-builder --chown=skate:skate /root/_build/prod/rel/skate .\n\nCOPY --from=app-builder --chown=skate:skate /root/aws-cert-bundle.pem ./priv/aws-cert-bundle.pem\n\nEXPOSE 4000\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n\n# Run the application\nCMD [\"bin/skate\", \"start\"]\n"
}