diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/openptrack/open_ptrack_v2/docker/open_ptrack-dep/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/openptrack/open_ptrack_v2/docker/open_ptrack-dep/Dockerfile/repaired.Dockerfile
index 758f6a5..352a571 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/openptrack/open_ptrack_v2/docker/open_ptrack-dep/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/openptrack/open_ptrack_v2/docker/open_ptrack-dep/Dockerfile/repaired.Dockerfile
@@ -11,37 +11,37 @@ RUN apt-get update \
 RUN apt-get update \ 
     && apt-get install -y --no-install-recommends         ocl-icd-libopencl1         clinfo \ 
     &&     rm -rf /var/lib/apt/lists/*
-    
+
 RUN mkdir -p /etc/OpenCL/vendors \ 
     && echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd
 
 ENV NVIDIA_VISIBLE_DEVICES=all
 
-RUN  echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections     \ 
+RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections     \ 
     && echo keyboard-configuration keyboard-configuration/layout select 'English (US)' | debconf-set-selections     \ 
     && echo keyboard-configuration keyboard-configuration/layoutcode select 'us' | debconf-set-selections     \ 
-    && apt-get update     \ 
-    && apt-get install -y --no-install-recommends software-properties-common wget udev apt-utils sudo 
-
-RUN  add-apt-repository -y ppa:danielrichter2007/grub-customizer     \ 
-    && wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | apt-key add -     \ 
-    && apt-get install -y apt-transport-https     \ 
-    && echo "deb https://download.sublimetext.com/ apt/stable/" | tee /etc/apt/sources.list.d/sublime-text.list     \ 
-    && apt-add-repository -y ppa:obsproject/obs-studio     \ 
-    && apt-add-repository -y ppa:graphics-drivers/ppa     \ 
-    && add-apt-repository -y ppa:yannubuntu/boot-repair     \ 
-    && apt-get update     \ 
-    && apt-get install -y sublime-text grub-customizer exfat-fuse exfat-utils vim terminator gitg cmake-curses-gui gparted meld cowsay fortune gimp synaptic libgoogle-glog-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev ncdu filezilla p7zip-full openssh-client openssh-server boot-repair
-
-RUN  sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'     \ 
+    && apt-get update \
+    && apt-get install -y --no-install-recommends software-properties-common wget udev apt-utils sudo && rm -rf /var/lib/apt/lists/*;
+
+RUN add-apt-repository -y ppa:danielrichter2007/grub-customizer     \ 
+    && wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | apt-key add - \
+    && apt-get install --no-install-recommends -y apt-transport-https \
+    && echo "deb https://download.sublimetext.com/ apt/stable/" | tee /etc/apt/sources.list.d/sublime-text.list \
+    && apt-add-repository -y ppa:obsproject/obs-studio \
+    && apt-add-repository -y ppa:graphics-drivers/ppa \
+    && add-apt-repository -y ppa:yannubuntu/boot-repair \
+    && apt-get update \
+    && apt-get install --no-install-recommends -y sublime-text grub-customizer exfat-fuse exfat-utils vim terminator gitg cmake-curses-gui gparted meld cowsay fortune gimp synaptic libgoogle-glog-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev ncdu filezilla p7zip-full openssh-client openssh-server boot-repair && rm -rf /var/lib/apt/lists/*;
+
+RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'     \ 
     && apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654     \ 
-    && apt-get update     \ 
-    && apt-get install ros-kinetic-desktop-full python-rosinstall -y     \ 
-    && rosdep init     \ 
-    && rosdep update         
+    && apt-get update \
+    && apt-get install --no-install-recommends ros-kinetic-desktop-full python-rosinstall -y \
+    && rosdep init \
+    && rosdep update && rm -rf /var/lib/apt/lists/*;
 
 RUN  /bin/bash -c "echo 'source /opt/ros/kinetic/setup.bash' >> /root/.bashrc \ 
-    && source /root/.bashrc"      
+    && source /root/.bashrc"     
 
 RUN add-apt-repository -y ppa:levi-armstrong/ppa     \ 
     && apt-get update
@@ -50,42 +50,42 @@ RUN  /bin/bash -c "source /opt/ros/kinetic/setup.bash     \
     && cd     \ 
     && mkdir -p workspace/ros/src     \ 
     && cd workspace/ros     \ 
-    && catkin_make"     
-
-RUN  /bin/bash -c "echo 'source /root/workspace/ros/devel/setup.bash' >> /root/.bashrc"          
-
-RUN  cd ~/workspace/ros     \ 
-    && apt-get install -y ocl-icd-opencl-dev     \ 
-    && wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run -O cuda.run     \ 
-    && chmod +x cuda.run     \ 
-    && ./cuda.run -silent --toolkit --samples --samplespath="/root/workspace/"     \ 
-    && wget "https://www.dropbox.com/s/cx95583vbf1ifzm/cudnn-8.0-linux-x64-v5.1.tgz?dl%3D0&sa=D&ust=1507541105896000&usg=AFQjCNEU511fT00n547PxPt_P6cfSLPVWw"     \ 
-    && tar -zxvf cudnn*     \
-    && cp cuda/include/* /usr/local/cuda/include     \ 
-    && cp cuda/lib64/* /usr/local/cuda/lib64/     \ 
-    && echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64' >> ~/.bashrc     \ 
-    && echo 'export PATH=$PATH:/usr/local/cuda/bin' >> ~/.bashrc          
-    
-RUN  apt-get install cmake libgoogle-glog-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev -y --force-yes     \ 
-    && mkdir /tmp/ceres_install     \ 
-    && cd /tmp/ceres_install     \ 
-    && git clone https://ceres-solver.googlesource.com/ceres-solver     \ 
-    && cd ceres-solver     \ 
-    && git fetch --tags     \ 
-    && git checkout tags/1.9.0     \ 
-    && cd ..     \ 
-    && mkdir ceres-bin     \ 
-    && cd ceres-bin     \ 
-    && cmake ../ceres-solver     \ 
-    && make -j8     \ 
-    && make test     \ 
-    && make install     \ 
-    && rm -R /tmp/ceres_install     \ 
-    && cd ~/workspace/ros/src     \ 
-    && git clone https://github.com/iaslab-unipd/calibration_toolkit     \ 
-    && cd calibration_toolkit     \ 
-    && git fetch origin --tags     \ 
-    && git checkout tags/v0.2         
+    && catkin_make"    
+
+RUN  /bin/bash -c "echo 'source /root/workspace/ros/devel/setup.bash' >> /root/.bashrc"         
+
+RUN cd ~/workspace/ros \
+    && apt-get install --no-install-recommends -y ocl-icd-opencl-dev \
+    && wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run -O cuda.run \
+    && chmod +x cuda.run \
+    && ./cuda.run -silent --toolkit --samples --samplespath="/root/workspace/" \
+    && wget "https://www.dropbox.com/s/cx95583vbf1ifzm/cudnn-8.0-linux-x64-v5.1.tgz?dl%3D0&sa=D&ust=1507541105896000&usg=AFQjCNEU511fT00n547PxPt_P6cfSLPVWw" \
+    && tar -zxvf cudnn* \
+    && cp cuda/include/* /usr/local/cuda/include \
+    && cp cuda/lib64/* /usr/local/cuda/lib64/ \
+    && echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64' >> ~/.bashrc \
+    && echo 'export PATH=$PATH:/usr/local/cuda/bin' >> ~/.bashrc && rm -rf /var/lib/apt/lists/*;
+
+RUN apt-get install --no-install-recommends cmake libgoogle-glog-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev -y --force-yes \
+    && mkdir /tmp/ceres_install \
+    && cd /tmp/ceres_install \
+    && git clone https://ceres-solver.googlesource.com/ceres-solver \
+    && cd ceres-solver \
+    && git fetch --tags \
+    && git checkout tags/1.9.0 \
+    && cd .. \
+    && mkdir ceres-bin \
+    && cd ceres-bin \
+    && cmake ../ceres-solver \
+    && make -j8 \
+    && make test \
+    && make install \
+    && rm -R /tmp/ceres_install \
+    && cd ~/workspace/ros/src \
+    && git clone https://github.com/iaslab-unipd/calibration_toolkit \
+    && cd calibration_toolkit \
+    && git fetch origin --tags \
+    && git checkout tags/v0.2 && rm -rf /var/lib/apt/lists/*;
 
 RUN cd     \ 
     && cd workspace     \ 
@@ -102,7 +102,7 @@ RUN cd     \
     && printf 'PATH=$PATH:/usr/local/opencv3/bin\nexport PATH\n' >> /root/.bashrc      \ 
     && printf 'LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/opencv3/lib\nexport LD_LIBRARY_PATH\n' >> /root/.bashrc       \ 
     && /bin/bash -c "source /root/.bashrc"     \ 
-    && ln -s /usr/local/opencv3/share/OpenCV/3rdparty/lib/libippicv.a /usr/local/lib/libippicv.a  
+    && ln -s /usr/local/opencv3/share/OpenCV/3rdparty/lib/libippicv.a /usr/local/lib/libippicv.a 
 
 RUN  /bin/bash -c "source /root/.bashrc    \ 
     && cd ~/workspace/ros/src      \ 
@@ -112,29 +112,29 @@ RUN  /bin/bash -c "source /root/.bashrc    \
     && apt-get --assume-yes install libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler libboost-all-dev libgflags-dev libgoogle-glog-dev liblmdb-dev     \ 
     && make all -j8"
 
-RUN  cd     \ 
+RUN cd     \ 
     && cd workspace     \ 
     && git clone https://github.com/OpenPTrack/libfreenect2.git     \ 
     && cd libfreenect2     \ 
     && git checkout 1606     \ 
-    && cd depends/     \ 
-    && apt-get install -y git cmake cmake-curses-gui libxmu-dev libxi-dev libgl1-mesa-dev xorg-dev libglu1-mesa-dev libtool automake libudev-dev libgtk2.0-dev pkg-config libjpeg-turbo8-dev libturbojpeg libglewmx-dev     \ 
-    && ln -f -s /usr/lib/x86_64-linux-gnu/libturbojpeg.so.0.1.0 /usr/lib/x86_64-linux-gnu/libturbojpeg.so     \ 
+    && cd depends/ \
+    && apt-get install --no-install-recommends -y git cmake cmake-curses-gui libxmu-dev libxi-dev libgl1-mesa-dev xorg-dev libglu1-mesa-dev libtool automake libudev-dev libgtk2.0-dev pkg-config libjpeg-turbo8-dev libturbojpeg libglewmx-dev \
+    && ln -f -s /usr/lib/x86_64-linux-gnu/libturbojpeg.so.0.1.0 /usr/lib/x86_64-linux-gnu/libturbojpeg.so \
     && cd .. \
-    && mkdir build \ 
-    && cd build     \ 
+    && mkdir build \
+    && cd build \
     && /bin/bash -c "source /opt/ros/kinetic/setup.bash    \ 
     && export NVCUDASAMPLES_ROOT='/root/workspace/NVIDIA_CUDA-8.0_Samples' \
     && cmake .. -DENABLE_CXX11=ON -DCUDA_PROPAGATE_HOST_FLAGS=off   \ 
     && make     \
-    && make install"     \
-    && echo '# ATTR{product}=="Kinect2" SUBSYSTEM=="usb", ATTR{idVendor}=="045e", ATTR{idProduct}=="02c4", MODE="0666" SUBSYSTEM=="usb", ATTR{idVendor}=="045e", ATTR{idProduct}=="02d8", MODE="0666" SUBSYSTEM=="usb", ATTR{idVendor}=="045e", ATTR{idProduct}=="02d9", MODE="0666"' > ~/90-kinect2.rules     \ 
-    && cp ~/90-kinect2.rules /etc/udev/rules.d/
+    && make install" \
+    && echo '# ATTR{product}=="Kinect2" SUBSYSTEM=="usb", ATTR{idVendor}=="045e", ATTR{idProduct}=="02c4", MODE="0666" SUBSYSTEM=="usb", ATTR{idVendor}=="045e", ATTR{idProduct}=="02d8", MODE="0666" SUBSYSTEM=="usb", ATTR{idVendor}=="045e", ATTR{idProduct}=="02d9", MODE="0666"' > ~/90-kinect2.rules \
+    && cp ~/90-kinect2.rules /etc/udev/rules.d/ && rm -rf /var/lib/apt/lists/*;
 
 RUN  cd ~/workspace/ros/src     \ 
     && git clone https://github.com/OpenPTrack/iai_kinect2.git     \ 
     && cd iai_kinect2     \ 
-    && git checkout 1607       
+    && git checkout 1607      
 
 
 RUN  /bin/bash -c "git clone https://github.com/torch/distro.git ~/torch --recursive \ 
@@ -163,8 +163,8 @@ RUN /bin/bash -c "cd /tmp \
     && sudo cp dlib.so /usr/local/lib/python2.7/dist-packages"
 
 RUN apt-get update \
-    && apt-get install -y python-qt4 python-pip \
-    && pip install requests
+    && apt-get install --no-install-recommends -y python-qt4 python-pip \
+    && pip install --no-cache-dir requests && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get install ntp -y  \ 
+RUN apt-get install --no-install-recommends ntp -y \
     && rm -rf /var/lib/apt/lists/*