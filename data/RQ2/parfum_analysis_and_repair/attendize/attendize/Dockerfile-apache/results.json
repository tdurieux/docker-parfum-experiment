{
  "startTime": 1674253421206,
  "endTime": 1674253421798,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Run Attendize on an apache server\n# Multi stage docker file for the Attendize application layer images\n\n# Base image with apache, php, composer and mysql built on ubuntu\nFROM leen15/apache-php-mysql as base\n\n# update composer to v2\nRUN composer self-update\n\n# install dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n       libpq-dev \\\n       libpng-dev \\\n       libjpeg62-dev \\\n       libfreetype6-dev \\\n       libxrender1 \\\n       libfontconfig \\\n       libxext-dev \\\n       libglib2.0-0 \\\n       php-mysql \\\n       php-pgsql \\\n       php-gd \\\n       php-zip \\\n       zip \\\n       unzip git nano \\\n       wait-for-it && rm -rf /var/lib/apt/lists/*;\n\n# Set up code\nWORKDIR /var/www\nCOPY . .\n\n# run composer, chmod files, setup laravel key\nRUN ./scripts/setup\n\n# The worker container runs the laravel queue in the background\nFROM base as worker\n\nCMD [\"php\", \"artisan\", \"queue:work\", \"--daemon\"]\n\n# The web container runs the HTTP server and connects to all other services in the application stack\nFROM base as web\n\n# TODO: Add self signed SSL certificate\n\n# Port to expose\nEXPOSE 80\n\n# Starting apache server\nCMD [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]\n\n# NOTE: if you are deploying to production with this image, you should extend this Dockerfile with another stage that\n# performs clean up (i.e. removing composer) and installs your own dependencies (i.e. your own ssl certificate).\n"
}