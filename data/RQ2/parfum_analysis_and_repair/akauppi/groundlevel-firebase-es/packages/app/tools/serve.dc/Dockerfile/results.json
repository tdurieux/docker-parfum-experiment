{
  "startTime": 1674251735467,
  "endTime": 1674251736090,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile for local HTTP serving\n#\n# Expects:\n#   - a folder with web content, mapped to '/work/public'\n#   - 'PORT' env.var. (optional; default 8080)\n#\n# Notes:\n#   All we want is a minimal Node.js container (no native compilation tools required). However, such are not widely\n#   available, yet (May-2022). Once they are, we could switch to them (maybe ~40MB footprint).\n#\n#   i.e. this means a Node.js image without the native compilation tools (g++, make, Python).\n#\n#   Also, the base image could provide a user; we don't need root access.\n\n# References:\n#   - Best practices for writing Dockerfiles\n#       -> https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\n#\n\n# Node images -> https://hub.docker.com/_/node\n#   node:18-alpine  171MB\n#   node:16-alpine  110MB\n#\nFROM node:16-alpine\n\nARG HTTP_SERVER_VER=14.1.0\n  # Releases -> https://github.com/http-party/http-server/releases\n\nWORKDIR /work\n\n# Suppress npm update announcements\nRUN npm config set update-notifier false\n\n# Install\n#\nRUN npm install -g http-server@$HTTP_SERVER_VER && npm cache clean --force;\n\n# Override\nCMD \\\n  http-server --help\n"
}