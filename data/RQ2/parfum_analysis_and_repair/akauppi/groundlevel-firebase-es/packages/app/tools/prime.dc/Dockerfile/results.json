{
  "startTime": 1674216920332,
  "endTime": 1674216920761,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 2,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile for Firebase prime.dc\n#\n# Calling environment:\n#   - local development\n#\n# Environment:\n#   - root user\n#   - '/work' as CWD\n#\n# Expects:\n#   - host having Firebase Firestore and auth ports open\n#     - '${FIRESTORE_PORT}' and '${AUTH_PORT}' pointing to them\n#   - /work/users.js\n#   - /work/docs.js\n#\n# Notes:\n#   All we want is a minimal Node.js container (no native compilation tools required). However, such are not widely\n#   available, yet (May-2022). Once they are, we could switch to them (maybe ~40MB footprint).\n#\n#   Also, the base image could provide a user; we don't need root access.\n\n# References:\n#   - Best practices for writing Dockerfiles\n#       -> https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\n#\n\n# Node images -> https://hub.docker.com/_/node\n#   node:18-alpine  171MB\n#\nFROM node:18-alpine\n\nWORKDIR /work\n\n# Suppress npm update announcements\nRUN npm config set update-notifier false\n\nCOPY src src\nCOPY package.json .\n\nRUN echo package-lock=false > .npmrc\n\n# Seems both 'npm install' (for getting the dependencies) and 'npm install -g' (for having 'firebase-prime' as a CLI)\n# are needed.\n#\nRUN npm install && \\\n  npm install -g && npm cache clean --force;\n\nENV NODE_PATH=/usr/local/lib/node_modules\n\n# Override\nCMD \\\n  firebase-prime --help\n"
}