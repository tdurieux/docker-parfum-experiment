{
  "startTime": 1674220165702,
  "endTime": 1674220166985,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 154
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 154
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 AS base\nLABEL maintainer=\"Alexandre Drouin (adrouin@elementai.com), Alexandre Lacoste (allac@elementai.com)\"\n\nARG GOOGLE_FONTS_COMMIT=ed61614fb47affd2a4ef286e0b313c5c47226c69\n\n# Install Python 3\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y python3-pip python3-dev && \\\n    cd /usr/local/bin && \\\n    ln -s /usr/bin/python3 python && \\\n    pip3 install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/*;\n\n# Install system dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y curl fonts-cantarell fontconfig git icu-devtools ipython3 jq libcairo2-dev libhdf5-dev pkg-config ttf-ubuntu-font-family unzip wget && rm -rf /var/lib/apt/lists/*;\n\n# Install all python requirements\nCOPY docker/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Download landscape images\nRUN mkdir -p /images && cd /images && \\\n    wget https://github.com/ElementAI/synbols-resources/raw/master/datasets/landscapes.zip && \\\n    unzip landscapes.zip && \\\n    rm landscapes.zip && \\\n    echo \"Installed $(ls -l | grep -i jpg | wc -l) natural images.\"\n\n# Install all Google fonts and extract their metadata\nRUN wget -O google_fonts.zip https://github.com/google/fonts/archive/${GOOGLE_FONTS_COMMIT}.zip && \\\n    unzip google_fonts.zip && \\\n    mkdir -p /usr/share/fonts/truetype/google-fonts && \\\n    find fonts-${GOOGLE_FONTS_COMMIT} -type f -name \"*.ttf\" | xargs -I{} sh -c \"install -Dm644 {} /usr/share/fonts/truetype/google-fonts\" && \\\n    find /usr/share/fonts/truetype/google-fonts -type f -name \"Cantarell-*.ttf\" -delete && \\\n    find /usr/share/fonts/truetype/google-fonts -type f -name \"Ubuntu-*.ttf\" -delete && \\\n    apt-get --purge remove fonts-roboto && \\\n    fc-cache -f > /dev/null && \\\n    find fonts-${GOOGLE_FONTS_COMMIT} -name \"METADATA.pb\" | xargs -I{} bash -c \"dirname {} | cut -d'/' -f3 | xargs printf; printf \",\"; grep -i 'subset' {} | cut -d':' -f2 | paste -sd \",\" - | sed 's/\\\"//g'\" > /usr/share/fonts/truetype/google-fonts/google_fonts_metadata && \\\n    sh -c \"echo \\\"license,font\\\"; find fonts-$GOOGLE_FONTS_COMMIT -name \\\"METADATA.pb\\\" | xargs -I{} bash -c \\\"dirname {} | cut -d'/' -f2,3 | sed -r 's/[/]+/,/g'\\\"\" > font_licenses.csv && \\\n    rm -r fonts-${GOOGLE_FONTS_COMMIT} google_fonts.zip\n\n# Install fonts from 1001freefonts.com\n# Some fonts fail to install because they contain ' (quotes) in their name. Skipping these for now.\nRUN mkdir \"1001-fonts\" && \\\n    cd \"1001-fonts\" && \\\n    wget https://github.com/ElementAI/synbols-resources/raw/master/fonts/1001fonts.zip && \\\n    unzip 1001fonts.zip && \\\n    mkdir -p /usr/share/fonts/truetype/1001-fonts && \\\n    find . -type f -name \"*.ttf\" | sed \"s/'//g\" | xargs -I{} sh -c \"install -Dm644 '{}' /usr/share/fonts/truetype/1001-fonts || true\" && \\\n    fc-cache -f > /dev/null && \\\n    cd .. && rm -r 1001-fonts\n\n# Install extra asian fonts\nRUN mkdir \"asian_fonts\" && \\\n    cd \"asian_fonts\" && \\\n    wget https://github.com/ElementAI/synbols-resources/raw/master/fonts/asian_fonts.zip && \\\n    unzip asian_fonts.zip && \\\n    mkdir -p /usr/share/fonts/truetype/asian_fonts && \\\n    find . -type f -name \"*.ttf\" | sed \"s/'//g\" | xargs -I{} sh -c \"install -Dm644 '{}' /usr/share/fonts/truetype/asian_fonts || true\" && \\\n    fc-cache -f > /dev/null && \\\n    cd .. && rm -r asian_fonts\n\n# ------------------------------------------------------------------------\n# Synbols-dependent precomputation\n# ------------------------------------------------------------------------\nRUN mkdir bootstrap\nCOPY ./synbols ./bootstrap/synbols\n\n# Package locales\nCOPY developer_tools ./bootstrap\nRUN cd bootstrap && \\\n    python package_locales.py && \\\n    mkdir /locales && \\\n    cp locale_* /locales\n\n# Bootstrap Cairo caches\nCOPY docker/dummy_dataset.py ./bootstrap\nRUN cd bootstrap && python dummy_dataset.py\n\n# Bootstrap Matplotlib caches\nRUN python -c \"import matplotlib.pyplot as plt\"\n\n# Clean up\nRUN rm -r /bootstrap\n# ------------------------------------------------------------------------\n\n\n\n# ------------------------------------------------------------------------\n# Notebook examples\n# ------------------------------------------------------------------------\nRUN pip install --no-cache-dir jupyter matplotlib\nRUN pip install --no-cache-dir --upgrade ipython Pygments >=2.6.1\nRUN mkdir /.local && chmod -R 777 /.local\n\n# Copy examples to image\nCOPY ./examples/ /examples\n# ------------------------------------------------------------------------\n\n\nFROM base AS test\nRUN pip install --no-cache-dir pytest flake8\n\nFROM base AS sphinx\nADD ./docs/requirements.txt docs/requirements.txt\nRUN pip install --no-cache-dir -r docs/requirements.txt\n\n"
}