{
  "startTime": 1674218123129,
  "endTime": 1674218124915,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 5,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nARG clang=/clang-4.0.0\nARG afl=/afl\n\n# Basic dependencies\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install --no-install-recommends -y make autoconf automake libtool shtool wget curl \\\n                       xz-utils gcc g++ cmake \\\n                       ninja-build zlib1g make python \\\n                       build-essential git ca-certificates \\\n                       tar gzip vim libelf-dev libelf1 libiberty-dev \\\n                       libboost-all-dev python3-pip python3-venv \\\n                       libpcap-dev libbz2-dev liblzo2-dev liblzma-dev liblz4-dev libz-dev \\\n                       libxml2-dev libssl-dev libacl1-dev libattr1-dev zip \\\n                       unzip libtool-bin bison && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir wheel greenstalk\n\n# Setup directories\nRUN mkdir -p $afl\nRUN mkdir -p /results\n\n#########################################\n## Setup compilers and build-tools\n#########################################\n\n# Setup AFL and afl-clang-fast\nCOPY clang-built.tar.gz /clang-built.tar.gz\nRUN tar -xvf /clang-built.tar.gz --strip-components=1 -C / \\\n    && rm /clang-built.tar.gz\n\nCOPY afl-2.52b-patched.tar.gz /\nRUN tar -xvf /afl-2.52b-patched.tar.gz \\\n    && mv afl-2.52b/* $afl/ \\\n    && cd $afl \\\n    && rm Makefile \\\n    && wget https://raw.githubusercontent.com/mirrorer/afl/master/Makefile \\\n    && make clean \\\n    && make clean -C llvm_mode \\\n    && make install \\\n    && make -C llvm_mode \\\n    && cd ./qemu_mode && ./build_qemu_support.sh && cd ../ \\\n    && make install &&  rm /afl-2.52b-patched.tar.gz\n\n# Install dyninst\nRUN git clone https://github.com/dyninst/dyninst.git && \\\n    cd dyninst && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. && \\\n    make && \\\n    make install\n\nRUN cp -r dyninst/build/elfutils/* /usr/local/ && \\\n    cp -r dyninst/build/tbb/* /usr/local/\n\nCOPY afl-dyninst.patch /afl-dyninst.patch\n\n# Make and install afl-dyninst\nRUN git clone https://github.com/talos-vulndev/afl-dyninst.git && \\\n    cd afl-dyninst && \\\n    git apply /afl-dyninst.patch && \\\n    make && make install && cd .. \\\n\t&& echo \"/usr/local/lib\" > /etc/ld.so.conf.d/dyninst.conf && ldconfig \\\n\t&& echo \"export DYNINSTAPI_RT_LIB=/usr/local/lib/libdyninstAPI_RT.so\" >> .bashrc \\\n    && sed -i 's/export AFL_EXIT_WHEN_DONE=1/#&/g' /usr/local/bin/afl-fuzz-dyninst.sh\n\nENV DYNINSTAPI_RT_LIB=/usr/local/lib/libdyninstAPI_RT.so\n\n###############################################################\n## Done setting up compilers. Now, setup evaluation targets\n###############################################################\n\nCOPY build.py /build/build.py\nCOPY requirements.txt /build/requirements.txt\nCOPY build.yaml /build/build.yaml\nRUN pip3 install --no-cache-dir -r /build/requirements.txt\n\n######################################################################\n## Setup retrowrite\n######################################################################\n\nCOPY retrowrite.bundle /\nRUN git clone retrowrite.bundle && cd /retrowrite && ./setup.sh\nENV PYTHONPATH=:/retrowrite/\n\nRUN apt-get install --no-install-recommends -y texinfo flex && rm -rf /var/lib/apt/lists/*;\nRUN mkdir -p /fuzz/\nCOPY LAVA-M/ /src\n\nENV FORCE_UNSAFE_CONFIGURE=1\n\nRUN cd /build/ && \\\n    python3 build.py build.yaml && \\\n    ./build-all.sh && \\\n    cp fuzz.yaml /fuzz/fuzz.yaml\n\n######################################################################\n## Copy fuzzer stuff\n######################################################################\n\nCOPY file-fuzz.zip png-fuzz.zip tcpdump-fuzz.zip tiff-fuzz.zip libarchive-fuzz.zip bzip2-fuzz.zip binutils-fuzz.zip /seeds/\nCOPY fuzz.py /fuzz/fuzz.py\nCOPY fuzz-config.yaml /fuzz/fuzz_config.yaml\nCOPY base64-fuzz.zip md5sum-fuzz.zip uniq-fuzz.zip who-fuzz.zip /seeds/\n\nRUN apt-get install --no-install-recommends -y screen && rm -rf /var/lib/apt/lists/*;\n\nRUN echo \"echo core >/proc/sys/kernel/core_pattern; cd /sys/devices/system/cpu && echo performance | tee cpu*/cpufreq/scaling_governor\" >> .bashrc\n\nWORKDIR /fuzz/\n"
}