{
  "startTime": 1674250552261,
  "endTime": 1674250553315,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 63,
        "columnEnd": 75
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 192,
        "columnEnd": 213
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM dock0/arch\n\nRUN curl -f \"https://www.archlinux.org/mirrorlist/?country=CA&country=US&protocol=http&ip_version=4&use_mirror_status=on\" | sed 's/#//' > /etc/pacman.d/mirrorlist\n\nRUN pacman -Sy --needed --noconfirm\nRUN pacman -S --needed --noconfirm archlinux-keyring\nRUN pacman -Su --needed --noconfirm\nRUN pacman -S --needed --noconfirm base-devel\nRUN pacman -S --needed --noconfirm git\nRUN pacman -S --needed --noconfirm ocaml\nRUN pacman -S --needed --noconfirm clang\nRUN pacman -S --needed --noconfirm colordiff\nRUN pacman -S --needed --noconfirm net-tools\nRUN pacman -S --needed --noconfirm wget\n\nRUN pacman -S --noconfirm ocaml-findlib\n# IF FINDLIB IS OUT OF DATE, HERE IS A WAY TO CREATE IT FROM THE SOURCE\n# RUN useradd -ms /bin/bash stuff\n# RUN (mkdir -p /tmp/ocaml-findlib; chown -R stuff /tmp/ocaml-findlib; cd /tmp/ocaml-findlib; curl -o PKGBUILD https://projects.archlinux.org/svntogit/community.git/plain/trunk/PKGBUILD?h=packages/ocaml-findlib; su stuff -c 'makepkg --noconfirm')\n\nRUN cd /tmp && wget https://github.com/ocaml-batteries-team/batteries-included/archive/v2.3.0.tar.gz && echo \"649eb2dca1f51bf9125ea87465e24e0ddcea9138  v2.3.0.tar.gz\" | sha1sum -c --status && tar xfz v2.3.0.tar.gz && cd batteries-included-2.3.0 && make && make install && rm v2.3.0.tar.gz\n\nRUN cd /tmp; git clone https://github.com/kerneis/cil; cd cil; ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; make clean; make; make install\nADD ./compiler /tmp/compiler\nRUN cd /tmp/compiler; make clean; make; make install\nWORKDIR /root\nENTRYPOINT [\"/bin/bash\"]\n"
}