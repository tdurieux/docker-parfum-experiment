{
  "startTime": 1674252780702,
  "endTime": 1674252781977,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 286,
        "lineEnd": 293,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 311,
        "lineEnd": 314,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##############################################\n#   ___  ____    ____       _                #\n#  / _ \\/ ___|  / ___|  ___| |_ _   _ _ __   #\n# | | | \\___ \\  \\___ \\ / _ \\ __| | | | '_ \\  #\n# | |_| |___) |  ___) |  __/ |_| |_| | |_) | #\n#  \\___/|____/  |____/ \\___|\\__|\\__,_| .__/  #\n#                                    |_|     #\n##############################################\n### The following two commands are paired\n### The date in the Server command must either match, or be more recent than,\n### the date in the FROM command\n### Date format is ISO year/month/day\nFROM archlinux:base-20210829.0.32635\n\n# ↓↓↓ UPDATE MIRRORS HERE ↓↓↓\nRUN echo -e \"Server=http://host.docker.internal:7878/\\$repo/os/\\$arch\\nServer=https://archive.archlinux.org/repos/2021/08/29/\\$repo/os/\\$arch\" | tee /etc/pacman.d/mirrorlist\n# If you ever update the mirror date, search the repository for UPDATE MIRRORS HERE to find all the places where the URL\n# needs to be altered.\n\n# Arch recommends running this as the first command of the docker image\n# Use \"yyuu\" to allow for downgrades\n# There wont be any downgrades provided the date in Server line above is the same\n# or newer than the arch image date\nRUN pacman -Syyuu --noconfirm --needed --overwrite \\*\n\n# Add a script that installs packages\nCOPY usr/local/bin/install-package /usr/local/bin/install-package\nCOPY etc/pacman/pacman.latest.conf /etc/pacman.latest.conf\n\n# Install base packages needed for building general toolchain\n# If you have a tool that's needed for a specific module install it before that module\nRUN install-package \\\n    wget \\\n    sudo \\\n    python \\\n    python-pip \\\n    base-devel \\\n    ninja \\\n    cmake \\\n    meson \\\n    nodejs-lts-fermium \\\n    npm \\\n    yarn \\\n    git \\\n    ncurses\n\n# Get python to look in /usr/local for packages\nRUN echo $(python -c \"import site; print(site.getsitepackages()[0].replace('/usr', '/usr/local'))\") \\\n    > $(python -c \"import site; print(site.getsitepackages()[0])\")/local.pth\nCOPY etc/xdg/pip/pip.conf /etc/xdg/pip/pip.conf\n\n# Make sure /usr/local is checked for libraries and binaries\nCOPY etc/ld.so.conf.d/usrlocal.conf /etc/ld.so.conf.d/usrlocal.conf\nRUN ldconfig\n\n# Make a symlink from /usr/local/lib to /usr/local/lib64 so library install location is irrelevant\nRUN cd /usr/local && ln -sf lib lib64\n\n# Generate toolchain files for the generic platform\nCOPY usr/local/toolchain/generate_toolchains.py /usr/local/generate_toolchains.py\nCOPY usr/local/toolchain/generate_generic_toolchain.py /usr/local/generate_toolchain.py\nRUN python /usr/local/generate_toolchain.py --prefix /usr\n\n# Copy over a tool to install simple standard conforming libraries from source\nCOPY usr/local/bin/download-and-extract /usr/local/bin/download-and-extract\nCOPY usr/local/bin/install-from-source /usr/local/bin/install-from-source\nRUN ln -s /usr/local/bin/install-from-source /usr/local/bin/install-header-from-source \\\n    && ln -s /usr/local/bin/install-from-source /usr/local/bin/install-cmake-from-source \\\n    && ln -s /usr/local/bin/install-from-source /usr/local/bin/install-autotools-from-source \\\n    && ln -s /usr/local/bin/install-from-source /usr/local/bin/install-bjam-from-source \\\n    && ln -s /usr/local/bin/install-from-source /usr/local/bin/install-make-from-source \\\n    && ln -s /usr/local/bin/install-from-source /usr/local/bin/install-meson-from-source \\\n    && ln -s /usr/local/bin/install-from-source /usr/local/bin/install-python-from-source \\\n    && ln -s /usr/local/bin/install-from-source /usr/local/bin/install-from-source-with-patches\n\n# Generate toolchain files for generic\nCOPY usr/local/toolchain/generate_generic_toolchain.py /usr/local/generate_toolchain.py\nRUN python /usr/local/generate_toolchain.py --prefix /usr\n\n#############################################\n### ADD NEW SYTEM PROGRAMS/LIBRARIES HERE ###\n#############################################\n\n################################################\n#  _____           _      _           _        #\n# |_   _|__   ___ | | ___| |__   __ _(_)_ __   #\n#   | |/ _ \\ / _ \\| |/ __| '_ \\ / _` | | '_ \\  #\n#   | | (_) | (_) | | (__| | | | (_| | | | | | #\n#   |_|\\___/ \\___/|_|\\___|_| |_|\\__,_|_|_| |_| #\n################################################\nARG platform=generic\n\n# Generate toolchain files for the current platform\nCOPY usr/local/toolchain/generate_${platform}_toolchain.py /usr/local/generate_toolchain.py\nRUN python /usr/local/generate_toolchain.py --prefix /usr/local\n\n# zlib\nRUN install-from-source https://www.zlib.net/zlib-1.2.12.tar.gz\n\n# LLVM and Clang\nRUN BUILD_FILE_DIR='llvm' install-cmake-from-source https://github.com/llvm/llvm-project/archive/llvmorg-12.0.1.tar.gz \\\n    -DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra;lld\" \\\n    -DLLVM_ENABLE_SPHINX=OFF \\\n    -DLLVM_BUILD_LLVM_DYLIB=ON \\\n    -DLLVM_LINK_LLVM_DYLIB=ON\n\n# SPIRV LLVM Translator\nRUN install-cmake-from-source https://github.com/KhronosGroup/SPIRV-LLVM-Translator/archive/v12.0.0.tar.gz \\\n    -DLLVM_INCLUDE_TESTS=OFF\n\n# opencl-clang\nCOPY usr/local/package/opencl-clang.sh /usr/local/package/opencl-clang.sh\nRUN /usr/local/package/opencl-clang.sh https://github.com/intel/opencl-clang/archive/v12.0.0.tar.gz\n\n# intel graphics compiler\nCOPY usr/local/package/intel-graphics-compiler.sh /usr/local/package/intel-graphics-compiler.sh\nRUN /usr/local/package/intel-graphics-compiler.sh https://github.com/intel/intel-graphics-compiler/archive/igc-1.0.8173.tar.gz \\\n    -DIGC_OPTION__ARCHITECTURE_TARGET='Linux64' \\\n    -DIGC_OPTION__LLVM_PREFERRED_VERSION='12.0.1' \\\n    -DVC_INTRINSICS_SRC=\"../../vc-intrinsics\" \\\n    -DIGC_OPTION__LLVM_MODE=Prebuilds \\\n    -DCMAKE_CXX_FLAGS=\"-Wno-deprecated-declarations\" \\\n    -DINSTALL_SPIRVDLL=0 \\\n    -DINSTALL_GENX_IR=ON\n\n# intel compute runtime dependencies\n# gmmlib\nRUN install-cmake-from-source https://github.com/intel/gmmlib/archive/intel-gmmlib-21.2.2.tar.gz \\\n    -DRUN_TEST_SUITE=OFF\n# libpciaccess and libdrm help communicate with graphics hardware\nRUN install-from-source https://xorg.freedesktop.org/releases/individual/lib/libpciaccess-0.16.tar.bz2\nRUN install-meson-from-source https://dri.freedesktop.org/libdrm/libdrm-2.4.104.tar.xz \\\n    -Dudev=false \\\n    -Dvalgrind=false\n\n# libva\n# Needs -Dwith_x11: see https://github.com/intel/media-driver/issues/899\n# -Dwith_x11 requires x11 to be installed\nRUN install-package xorg-server\nRUN install-from-source https://github.com/intel/libva/releases/download/2.12.0/libva-2.12.0.tar.bz2 \\\n    -DENABLE_VA_MESSAGING=ON \\\n    -Dwith_x11=yes\n\n# intel media driver\nRUN install-cmake-from-source https://github.com/intel/media-driver/archive/intel-media-21.3.2.tar.gz \\\n    -DINSTALL_DRIVER_SYSCONF=OFF \\\n    -DLIBVA_DRIVERS_PATH=\"/usr/local/lib/dri\" \\\n    -DMEDIA_RUN_TEST_SUITE=OFF \\\n    -DBUILD_KERNELS=ON \\\n    -DENABLE_KERNELS=ON \\\n    -DENABLE_NONFREE_KERNELS=ON \\\n    -DMEDIA_BUILD_FATAL_WARNINGS=OFF\n\n# Install intel compute runtime (OpenCL implementation)\nCOPY --chown=root:root etc/OpenCL/vendors/intel.icd /etc/OpenCL/vendors/intel.icd\nCOPY usr/local/package/intel-compute-runtime.sh /usr/local/package/intel-compute-runtime.sh\nRUN /usr/local/package/intel-compute-runtime.sh https://github.com/intel/compute-runtime/archive/21.31.20514.tar.gz \\\n    https://patch-diff.githubusercontent.com/raw/intel/compute-runtime/pull/550.patch -- \\\n    -DSKIP_UNIT_TESTS=ON \\\n    -DIGC_DIR=/usr/local\n\n# Install OpenCL C and C++ headers\nCOPY usr/local/package/opencl-headers.sh /usr/local/package/opencl-headers.sh\nRUN /usr/local/package/opencl-headers.sh https://github.com/KhronosGroup/OpenCL-Headers/archive/v2020.12.18.tar.gz\nRUN install-from-source https://github.com/KhronosGroup/OpenCL-CLHPP/archive/refs/tags/v2.0.16.tar.gz \\\n    -DOPENCL_INCLUDE_DIR=/usr/local/include/CL \\\n    -DOPENCL_LIB_DIR=/usr/local/lib \\\n    -DBUILD_DOCS=OFF \\\n    -DBUILD_EXAMPLES=OFF \\\n    -DBUILD_TESTS=OFF\n\n# OpenCL loader library\nRUN install-package ruby\nRUN install-from-source https://github.com/OCL-dev/ocl-icd/archive/v2.2.14.tar.gz\n\n# OpenBLAS\nRUN install-package gcc-fortran\nCOPY usr/local/package/openblas/${platform}.sh /usr/local/package/openblas.sh\nRUN /usr/local/package/openblas.sh https://github.com/xianyi/OpenBLAS/archive/v0.3.13.tar.gz\n\n# Eigen3\nCOPY usr/local/package/eigen3/deprecated-copy.patch /usr/local/package/deprecated-copy.patch\nCOPY usr/local/package/eigen3/cxx17-overalign.patch /usr/local/package/cxx17-overalign.patch\nRUN install-from-source-with-patches https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.bz2 \\\n    /usr/local/package/deprecated-copy.patch \\\n    /usr/local/package/cxx17-overalign.patch --\n\n# tcmalloc\nRUN install-from-source \\\n    https://github.com/gperftools/gperftools/releases/download/gperftools-2.7/gperftools-2.7.tar.gz \\\n    --with-tcmalloc-pagesize=64 \\\n    --enable-minimal\n\n# Protobuf\nRUN install-package protobuf\nRUN install-autotools-from-source https://github.com/protocolbuffers/protobuf/releases/download/v3.17.3/protobuf-cpp-3.17.3.tar.gz \\\n    --with-zlib=/usr/local \\\n    --with-protoc=/usr/sbin/protoc\n\n# Libjpeg\nRUN install-package yasm\nRUN install-from-source https://github.com/libjpeg-turbo/libjpeg-turbo/archive/2.0.4.tar.gz \\\n    -DWITH_SIMD=ON \\\n    -DFORCE_INLINE=ON \\\n    -DINLINE_WORKS=1 \\\n    -DRIGHT_SHIFT_IS_UNSIGNED_COMPILED=ON \\\n    -DRIGHT_SHIFT_IS_UNSIGNED_EXITCODE=1 \\\n    -DRIGHT_SHIFT_IS_UNSIGNED=\"\" \\\n    -D__CHAR_UNSIGNED___COMPILED=ON \\\n    -D__CHAR_UNSIGNED___EXITCODE=1 \\\n    -D__CHAR_UNSIGNED__=\"\" \\\n    -DFLOATTEST=\"sse\"\n\n# yaml-cpp\nRUN install-from-source https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.3.tar.gz \\\n    -DYAML_CPP_BUILD_TESTS=OFF \\\n    -DBUILD_SHARED_LIBS=OFF\n\n# fmt formatting library\nRUN  install-from-source https://github.com/fmtlib/fmt/archive/6.1.2.tar.gz \\\n    -DFMT_DOC=OFF \\\n    -DFMT_TEST=OFF\n\n# Catch unit testing library\nRUN install-header-from-source https://github.com/catchorg/Catch2/releases/download/v2.11.1/catch.hpp\n\n# libusb - a dependency of aravis\nRUN install-from-source https://github.com/libusb/libusb/archive/v1.0.24.tar.gz\n# Aravis\nRUN install-from-source http://xmlsoft.org/sources/libxml2-2.9.10.tar.gz --with-zlib=/usr/local --without-python\nRUN install-from-source https://github.com/libffi/libffi/releases/download/v3.3/libffi-3.3.tar.gz\nRUN install-from-source https://gitlab.gnome.org/GNOME/glib/-/archive/2.63.3/glib-2.63.3.tar.bz2 \\\n    -Ddefault_library=both \\\n    -Dinternal_pcre=true \\\n    && cp /usr/local/lib/glib-2.0/include/glibconfig.h /usr/local/include/glibconfig.h\nRUN install-meson-from-source https://github.com/AravisProject/aravis/archive/ARAVIS_0_7_3.tar.gz \\\n    -Ddefault_library=both \\\n    -Dviewer=false \\\n    -Dgst-plugin=false \\\n    -Dusb=true \\\n    -Ddocumentation=false \\\n    -Dintrospection=false\n\n# LibUV\nRUN install-cmake-from-source https://github.com/libuv/libuv/archive/v1.42.0.tar.gz \\\n    -Dlibuv_buildtests=OFF \\\n    -DBUILD_TESTING=OFF\n\n# NUClear!\nRUN install-from-source https://github.com/Fastcode/NUClear/archive/f4a60c7269e277a504635a603c2890fb1a70289d.tar.gz \\\n    -DBUILD_TESTS=OFF\n\n\n# Backtrace\nRUN install-from-source https://github.com/ianlancetaylor/libbacktrace/archive/master.tar.gz \\\n    --without-system-libunwind \\\n    --enable-shared \\\n    --enable-static\n\n# Alsa and espeak\nRUN install-from-source ftp://ftp.alsa-project.org/pub/lib/alsa-lib-1.2.1.2.tar.bz2 \\\n    --without-debug\nRUN install-from-source https://github.com/espeak-ng/pcaudiolib/archive/1.1.tar.gz\nCOPY usr/local/package/espeak.sh /usr/local/package/espeak.sh\nRUN /usr/local/package/espeak.sh https://github.com/espeak-ng/espeak-ng/releases/download/1.50/espeak-ng-1.50.tgz\n\n# mio memory mapping library\nRUN install-from-source https://github.com/mandreyel/mio/archive/3f86a95c0784d73ce6815237ec33ed25f233b643.tar.gz\n\n# zstr header to have file streams that do zlib compression\nRUN mkdir -p /usr/local/include/zstr \\\n    && wget https://raw.githubusercontent.com/mateidavid/zstr/946ab409380e90e4a46c88c2da4f645a7ffaa51d/src/zstr.hpp -O /usr/local/include/zstr.hpp \\\n    && wget https://raw.githubusercontent.com/mateidavid/zstr/946ab409380e90e4a46c88c2da4f645a7ffaa51d/src/strict_fstream.hpp -O /usr/local/include/strict_fstream.hpp \\\n    && wget https://raw.githubusercontent.com/mateidavid/zstr/946ab409380e90e4a46c88c2da4f645a7ffaa51d/src/zstr_make_unique_polyfill.h -O /usr/local/include/zstr_make_unique_polyfill.h\n\n# Visual Mesh\nRUN install-from-source https://github.com/ysims/VisualMesh/archive/1c8d08b8d93a438acce2dce0bcfe7e1f58509e1a.tar.gz \\\n    -DBUILD_TENSORFLOW_OP=OFF \\\n    -DBUILD_EXAMPLES=OFF \\\n    -DBUILD_OPENCL_ENGINE=ON\n\n#######################################\n### ADD NEW PROGRAMS/LIBRARIES HERE ###\n#######################################\n\n# Install python libraries\nRUN pip install --no-cache-dir \\\n    xxhash \\\n    pylint \\\n    termcolor \\\n    stringcase \\\n    Pillow \\\n    protobuf==3.17.3 \\\n    tqdm\n\n# Install tools needed for building individual modules as well as development tools\nRUN install-package \\\n    arm-none-eabi-gcc \\\n    arm-none-eabi-newlib \\\n    openssh \\\n    rsync \\\n    gdb \\\n    valgrind \\\n    colordiff \\\n    parallel \\\n    vim \\\n    nano \\\n    clinfo \\\n    doxygen\n\n# Install formatters as last step so if they change the image is easy to update\nRUN pip install --no-cache-dir --upgrade \\\n    cmake-format==0.6.13 \\\n    isort==5.7.0 \\\n    black==22.3.0\n\n# Enable all the driver capabilities so we can use OpenCL in the container\nENV NVIDIA_DRIVER_CAPABILITIES=all\n\n# Copy the nvidia OpenCL vendorfile into the container so we can also use OpenCL on nvidia GPUs\nCOPY --chown=root:root etc/OpenCL/vendors/nvidia.icd /etc/OpenCL/vendors/nvidia.icd\n\n##############################\n### SETUP THE USER ACCOUNT ###\n##############################\n\n# Setup the sudo so it can be run without a password\nCOPY etc/sudoers.d/user /etc/sudoers.d/user\nRUN chmod 440 /etc/sudoers.d/user\n\n# Create the user, and setup sudo so no password is required\nARG user_uid=1000\nARG user_gid=$user_uid\nRUN groupadd --gid $user_gid nubots \\\n    && useradd --uid $user_uid --gid $user_gid -m nubots\nUSER nubots\n\n# Copy ssh keys over to the system\nRUN install -d -m 0755 -o nubots -g nubots /home/nubots/.ssh\nCOPY --chown=nubots:nubots home/nubots/.ssh/id_rsa /home/nubots/.ssh/id_rsa\nCOPY --chown=nubots:nubots home/nubots/.ssh/id_rsa.pub /home/nubots/.ssh/id_rsa.pub\nCOPY --chown=nubots:nubots home/nubots/.ssh/config /home/nubots/.ssh/config\nCOPY --chown=nubots:nubots home/nubots/.gdbinit /home/nubots/.gdbinit\nRUN chmod 600 /home/nubots/.ssh/id_rsa /home/nubots/.ssh/config\n\n# Setup the locations where we will mount our folders\nRUN install -d -m 0755 /home/nubots/NUbots\nRUN install -d -m 0777 /home/nubots/build\nWORKDIR /home/nubots/NUbots\n"
}