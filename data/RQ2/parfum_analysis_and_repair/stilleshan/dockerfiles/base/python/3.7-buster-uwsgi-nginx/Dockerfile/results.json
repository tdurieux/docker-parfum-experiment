{
  "startTime": 1674220194456,
  "endTime": 1674220195183,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-buster\n\nLABEL maintainer=\"Sebastian Ramirez <tiangolo@gmail.com>\"\nENV VERSION python3.7\nCOPY install-nginx-debian.sh /\n\nRUN bash /install-nginx-debian.sh\n\nEXPOSE 80\n\n# Expose 443, in case of LTS / HTTPS\nEXPOSE 443\n\n# Install uWSGI\nRUN pip install --no-cache-dir uwsgi\n\n# Remove default configuration from Nginx\nRUN rm /etc/nginx/conf.d/default.conf\n# Copy the base uWSGI ini file to enable default dynamic uwsgi process number\nCOPY uwsgi.ini /etc/uwsgi/\n\n# Install Supervisord\nRUN apt-get update && apt-get install --no-install-recommends -y supervisor \\\n&& rm -rf /var/lib/apt/lists/*\n# Custom Supervisord config\nCOPY supervisord-debian.conf /etc/supervisor/conf.d/supervisord.conf\n\n# Which uWSGI .ini file should be used, to make it customizable\nENV UWSGI_INI /app/uwsgi.ini\n\n# By default, run 2 processes\nENV UWSGI_CHEAPER 2\n\n# By default, when on demand, run up to 16 processes\nENV UWSGI_PROCESSES 16\n\n# By default, allow unlimited file sizes, modify it to limit the file sizes\n# To have a maximum of 1 MB (Nginx's default) change the line to:\n# ENV NGINX_MAX_UPLOAD 1m\nENV NGINX_MAX_UPLOAD 0\n\n# By default, Nginx will run a single worker process, setting it to auto\n# will create a worker for each CPU core\nENV NGINX_WORKER_PROCESSES 1\n\n# By default, Nginx listens on port 80.\n# To modify this, change LISTEN_PORT environment variable.\n# (in a Dockerfile or with an option for `docker run`)\nENV LISTEN_PORT 80\n\n# Copy start.sh script that will check for a /app/prestart.sh script and run it before starting the app\nCOPY start.sh /start.sh\nRUN chmod +x /start.sh\n\n# Copy the entrypoint that will generate Nginx additional configs\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\n# Add demo app\nCOPY ./app /app\nWORKDIR /app\n\n# Run the start script, it will check for an /app/prestart.sh script (e.g. for migrations)\n# And then will start Supervisor, which in turn will start Nginx and uWSGI\nCMD [\"/start.sh\"]\n"
}