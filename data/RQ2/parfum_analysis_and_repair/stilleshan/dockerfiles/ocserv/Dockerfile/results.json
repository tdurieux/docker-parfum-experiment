{
  "startTime": 1674248677388,
  "endTime": 1674248678349,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 152
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 160
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.13.5\nLABEL maintainer=\"Amin Vakil <info@aminvakil.com>\"\n\nENV VERSION 1.1.6\n\nRUN apk add --no-cache bash\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nRUN buildDeps=( \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgnutls-dev \\\n\t\tgpgme \\\n\t\tlibev-dev \\\n\t\tlibnl3-dev \\\n\t\tlibseccomp-dev \\\n\t\tlinux-headers \\\n\t\tlinux-pam-dev \\\n\t\tlz4-dev \\\n\t\tmake \\\n\t\treadline-dev \\\n\t\ttar \\\n\t\txz \\\n\t); \\\n\tset -x \\\n\t&& apk add --update --virtual .build-deps \"${buildDeps[@]}\" \\\n\t&& curl -f -SL --connect-timeout 8 --max-time 120 --retry 128 --retry-delay 5 \"ftp://ftp.infradead.org/pub/ocserv/ocserv-$VERSION.tar.xz\" -o ocserv.tar.xz \\\n\t&& curl -f -SL --connect-timeout 8 --max-time 120 --retry 128 --retry-delay 5 \"ftp://ftp.infradead.org/pub/ocserv/ocserv-$VERSION.tar.xz.sig\" -o ocserv.tar.xz.sig \\\n\t&& gpg --batch --keyserver keys.gnupg.net --recv-key 96865171 \\\n\t&& gpg --batch --verify ocserv.tar.xz.sig \\\n\t&& mkdir -p /usr/src/ocserv \\\n\t&& tar -xf ocserv.tar.xz -C /usr/src/ocserv --strip-components=1 \\\n\t&& rm ocserv.tar.xz* \\\n\t&& cd /usr/src/ocserv \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& make \\\n\t&& make install \\\n\t&& mkdir -p /etc/ocserv \\\n\t&& cp /usr/src/ocserv/doc/sample.config /etc/ocserv/ocserv.conf \\\n\t&& cd / \\\n\t&& rm -fr /usr/src/ocserv \\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner /usr/local/sbin/ocserv \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t\t)\" \\\n\t&& readarray runDepsArr <<< \"$runDeps\" \\\n\t&& apk add --virtual .run-deps \"${runDepsArr[@]}\" gnutls-utils iptables libnl3 readline libseccomp-dev lz4-dev \\\n\t&& apk del .build-deps \\\n\t&& rm -rf /var/cache/apk/* \\\n\n# Setup config\nCOPY routes.txt /tmp/ \\\nRUN set -x \\\n\t&& sed -i 's/\\.\\/sample\\.passwd/\\/etc\\/ocserv\\/ocpasswd/' /etc/ocserv/ocserv.conf \\\n\t&& sed -i 's/\\(max-same-clients = \\)2/\\110/' /etc/ocserv/ocserv.conf \\\n\t&& sed -i 's/\\.\\.\\/tests/\\/etc\\/ocserv/' /etc/ocserv/ocserv.conf \\\n\t&& sed -i 's/#\\(compression.*\\)/\\1/' /etc/ocserv/ocserv.conf \\\n\t&& sed -i '/^ipv4-network = /{s/192.168.1.0/192.168.99.0/}' /etc/ocserv/ocserv.conf \\\n\t&& sed -i 's/192.168.1.2/8.8.8.8/' /etc/ocserv/ocserv.conf \\\n\t&& sed -i 's/^route/#route/' /etc/ocserv/ocserv.conf \\\n\t&& sed -i 's/^no-route/#no-route/' /etc/ocserv/ocserv.conf \\\n\t&& sed -i '/\\[vhost:www.example.com\\]/,$d' /etc/ocserv/ocserv.conf \\\n\t&& sed -i '/^cookie-timeout = /{s/300/3600/}' /etc/ocserv/ocserv.conf \\\n\t&& sed -i 's/^isolate-workers/#isolate-workers/' /etc/ocserv/ocserv.conf \\\n\t&& cat /tmp/routes.txt >> /etc/ocserv/ocserv.conf \\\n\t&& rm -rf /tmp/routes.txt \\\n\nWORKDIR /etc/ocserv \\\n\nCOPY docker-entrypoint.sh /entrypoint.sh \\\nENTRYPOINT [\"/entrypoint.sh\"] \\\n\nEXPOSE 443 \\\nCMD [\"ocserv\", \"-c\", \"/etc/ocserv/ocserv.conf\", \"-f\"]"
}