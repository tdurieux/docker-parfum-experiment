{
  "startTime": 1674255723832,
  "endTime": 1674255724861,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 76,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 106,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nMAINTAINER Gabriel Garza <garzagabriel@gmail.com>\n\nARG TENSORFLOW_VERSION=1.6.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.1.5\n\n#RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#\tcat /proc/driver/nvidia/version && \\\n#\techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#\tnvcc -V && \\\n#\techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n\n# Install some dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tbc \\\n\t\tbuild-essential \\\n\t\tcmake \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibopenjpeg2 \\\n\t\tlibpng12-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tpkg-config \\\n\t\tpython-dev \\\n\t\tsoftware-properties-common \\\n\t\tunzip \\\n\t\tvim \\\n\t\twget \\\n\t\tzlib1g-dev \\\n\t\tqt5-default \\\n\t\tlibvtk6-dev \\\n\t\tzlib1g-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibwebp-dev \\\n\t\tlibpng-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibjasper-dev \\\n\t\tlibopenexr-dev \\\n\t\tlibgdal-dev \\\n\t\tlibdc1394-22-dev \\\n\t\tlibavcodec-dev \\\n\t\tlibavformat-dev \\\n\t\tlibswscale-dev \\\n\t\tlibtheora-dev \\\n\t\tlibvorbis-dev \\\n\t\tlibxvidcore-dev \\\n\t\tlibx264-dev \\\n\t\tyasm \\\n\t\tlibopencore-amrnb-dev \\\n\t\tlibopencore-amrwb-dev \\\n\t\tlibv4l-dev \\\n\t\tlibxine2-dev \\\n\t\tlibtbb-dev \\\n\t\tlibeigen3-dev \\\n\t\tpython-dev \\\n\t\tpython-tk \\\n\t\tpython-numpy \\\n\t\tpython3-dev \\\n\t\tpython3-tk \\\n\t\tpython3-numpy \\\n\t\tant \\\n\t\tdefault-jdk \\\n\t\tdoxygen \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/* && \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n\tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Install pip\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n\tpython get-pip.py && \\\n\trm get-pip.py\n\n# Add SNI support to Python\nRUN pip --no-cache-dir install \\\n\t\tpyopenssl \\\n\t\tndg-httpsclient \\\n\t\tpyasn1\n\n# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tpython-numpy \\\n\t\tpython-scipy \\\n\t\tpython-nose \\\n\t\tpython-h5py \\\n\t\tpython-skimage \\\n\t\tpython-matplotlib \\\n\t\tpython-pandas \\\n\t\tpython-sklearn \\\n\t\tpython-sympy \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/*\n\n# Install other useful Python packages using pip\nRUN pip --no-cache-dir install numpy scipy sklearn scikit-image pandas matplotlib Cython requests pandas\n\n# Install TensorFlow\nRUN pip --no-cache-dir install \\\n\thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\n\n# Install Keras\nRUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n\n# Install OpenCV\nRUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \\\n\tcd /root/opencv && \\\n\tmkdir build && \\\n\tcd build && \\\n\tcmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. && \\\n\tmake -j\"$(nproc)\"  && \\\n\tmake install && \\\n\tldconfig && \\\n\techo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n\n# PyCocoTools\n#\n# Using a fork of the original that has a fix for Python 3.\n# I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)\n# but it doesn't seem to be active anymore.\nRUN pip install --no-cache-dir git+https://github.com/waleedka/coco.git#subdirectory=PythonAPI\n\n# Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006 8888\n\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n\n#\n# # Essentials: developer tools, build tools, OpenBLAS\n# RUN apt-get update && apt-get install -y --no-install-recommends \\\n#     apt-utils git curl vim unzip openssh-client wget \\\n#     build-essential cmake \\\n#     libopenblas-dev\n#\n# #\n# # Python 3.5\n# #\n# # For convenience, alias (but don't sym-link) python & pip to python3 & pip3 as recommended in:\n# # http://askubuntu.com/questions/351318/changing-symlink-python-to-python3-causes-problems\n# RUN apt-get install -y --no-install-recommends python3.5 python3.5-dev python3-pip python3-tk && \\\n#     pip3 install --no-cache-dir --upgrade pip setuptools && \\\n#     echo \"alias python='python3'\" >> /root/.bash_aliases && \\\n#     echo \"alias pip='pip3'\" >> /root/.bash_aliases\n# # Pillow and it's dependencies\n# RUN apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev && \\\n#     pip3 --no-cache-dir install Pillow\n# # Science libraries and other common packages\n# RUN pip3 --no-cache-dir install \\\n#     numpy scipy sklearn scikit-image pandas matplotlib Cython requests pandas\n#\n# #\n# # Jupyter Notebook\n# #\n# # Allow access from outside the container, and skip trying to open a browser.\n# # NOTE: disable authentication token for convenience. DON'T DO THIS ON A PUBLIC SERVER.\n# RUN pip3 --no-cache-dir install jupyter && \\\n#     mkdir /root/.jupyter && \\\n#     echo \"c.NotebookApp.ip = '*'\" \\\n#          \"\\nc.NotebookApp.open_browser = False\" \\\n#          \"\\nc.NotebookApp.token = ''\" \\\n#          > /root/.jupyter/jupyter_notebook_config.py\n# EXPOSE 8888\n#\n# #\n# # Tensorflow 1.6.0 - GPU\n# #\n# # Install TensorFlow\n# RUN pip --no-cache-dir install \\\n# \thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\n#\n# # Expose port for TensorBoard\n# EXPOSE 6006\n#\n# #\n# # OpenCV 3.4.1\n# #\n# # Dependencies\n# RUN apt-get install -y --no-install-recommends \\\n#     libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev \\\n#     libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libgtk2.0-dev \\\n#     liblapacke-dev checkinstall\n# # Get source from github\n# RUN git clone -b 3.4.1 --depth 1 https://github.com/opencv/opencv.git /usr/local/src/opencv\n# # Compile\n# RUN cd /usr/local/src/opencv && mkdir build && cd build && \\\n#     cmake -D CMAKE_INSTALL_PREFIX=/usr/local \\\n#           -D BUILD_TESTS=OFF \\\n#           -D BUILD_PERF_TESTS=OFF \\\n#           -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \\\n#           .. && \\\n#     make -j\"$(nproc)\" && \\\n#     make install\n#\n# #\n# # Keras 2.1.5\n# #\n# RUN pip3 install --no-cache-dir --upgrade h5py pydot_ng keras\n#\n# #\n# # PyTorch 0.3.1\n# #\n# RUN pip3 install http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl && \\\n#     pip3 install torchvision\n#\n# #\n# # PyCocoTools\n# #\n# # Using a fork of the original that has a fix for Python 3.\n# # I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)\n# # but it doesn't seem to be active anymore.\n# RUN pip3 install --no-cache-dir git+https://github.com/waleedka/coco.git#subdirectory=PythonAPI\n#\n# WORKDIR \"/root\"\n# CMD [\"/bin/bash\"]\n"
}