diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/smartbch/smartbch/Dockerfile.optimized b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/smartbch/smartbch/Dockerfile.optimized/repaired.Dockerfile
index 3885a8f..2ab7ab8 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/smartbch/smartbch/Dockerfile.optimized
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/smartbch/smartbch/Dockerfile.optimized/repaired.Dockerfile
@@ -18,7 +18,7 @@ ENV TARGETARCH=${TARGETARCH:-amd64}
 
 # Install apt based dependencies
 RUN apt-get -y update && apt-get -y upgrade
-RUN DEBIAN_FRONTEND="noninteractive" apt-get -y install cmake gcc g++ git libgflags-dev make wget
+RUN DEBIAN_FRONTEND="noninteractive" apt-get --no-install-recommends -y install cmake gcc g++ git libgflags-dev make wget && rm -rf /var/lib/apt/lists/*;
 
 # Make wget produce less visual noise in output
 RUN printf "quiet=on\nshow-progress=on\nprogress=bar:force:noscroll" > ~/.wgetrc
@@ -32,24 +32,24 @@ ENV GOROOT=/usr/local/go
 ENV GOPATH=/go
 ENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH
 RUN wget -O go.tgz https://dl.google.com/go/go${GOLANG_VERSION}.linux-${TARGETARCH}.tar.gz
-RUN tar -zxf go.tgz -C /usr/local
+RUN tar -zxf go.tgz -C /usr/local && rm go.tgz
 RUN mkdir -p $GOPATH/bin
 
 # Patch Go for larger cgo stack size
 RUN wget -O cgo.tgz https://github.com/smartbch/patch-cgo-for-golang/archive/refs/tags/v${PATCH_CGO_VERSION}.tar.gz
-RUN tar -zxf cgo.tgz -C $GOROOT/src/runtime/cgo/ --strip-components=1 --wildcards "*.c"
+RUN tar -zxf cgo.tgz -C $GOROOT/src/runtime/cgo/ --strip-components=1 --wildcards "*.c" && rm cgo.tgz
 RUN go version
 
 # Build libsnappy
 RUN wget -O snappy.tgz https://github.com/google/snappy/archive/refs/tags/${SNAPPY_VERSION}.tar.gz
-RUN mkdir -p snappy/build && tar -zxf snappy.tgz -C snappy --strip-components=1
+RUN mkdir -p snappy/build && tar -zxf snappy.tgz -C snappy --strip-components=1 && rm snappy.tgz
 RUN cd snappy/build && \
     cmake -DSNAPPY_BUILD_TESTS=0 -DCMAKE_BUILD_TYPE=Release ../ && \
     make -j4 install
 
 # Build rocksdb
 RUN wget -O rocksdb.tgz https://github.com/facebook/rocksdb/archive/refs/tags/v${ROCKSDB_VERSION}.tar.gz
-RUN mkdir rocksdb && tar -zxf rocksdb.tgz -C rocksdb --strip-components=1
+RUN mkdir rocksdb && tar -zxf rocksdb.tgz -C rocksdb --strip-components=1 && rm rocksdb.tgz
 RUN cd rocksdb && \
     wget -O - https://raw.githubusercontent.com/smartbch/artifacts/main/patches/rocksdb.gcc11.patch | git apply -v && \
     CXXFLAGS=-Wno-range-loop-construct PORTABLE=1 make -j4 static_lib && \
@@ -70,7 +70,7 @@ RUN cd smartbch && go build -tags ${SMARTBCH_BUILD_TAGS} github.com/smartbch/sma
 WORKDIR /root/
 RUN /build/smartbch/smartbchd init mynode --chain-id ${CHAIN_ID}
 RUN wget https://github.com/smartbch/artifacts/releases/download/${CONFIG_VERSION}/dot.smartbchd.tgz
-RUN tar -zxf dot.smartbchd.tgz -C .smartbchd/ --strip-components=1
+RUN tar -zxf dot.smartbchd.tgz -C .smartbchd/ --strip-components=1 && rm dot.smartbchd.tgz
 
 FROM ubuntu:20.04