diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/smartbch/smartbch/Dockerfile.mainnet b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/smartbch/smartbch/Dockerfile.mainnet/repaired.Dockerfile
index 850f98a..53f8b00 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/smartbch/smartbch/Dockerfile.mainnet
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/smartbch/smartbch/Dockerfile.mainnet/repaired.Dockerfile
@@ -17,8 +17,8 @@ ENV GV=${GCC_VERSION}
 # Install apt based dependencies
 ENV DEBIAN_FRONTEND="noninteractive"
 RUN apt-get -y update && apt-get -y upgrade
-RUN apt-get -y install software-properties-common && add-apt-repository -y ppa:ubuntu-toolchain-r/test
-RUN apt-get -y install cmake gcc-${GV} g++-${GV} g++ gcc git libgflags-dev make vim wget
+RUN apt-get -y --no-install-recommends install software-properties-common && add-apt-repository -y ppa:ubuntu-toolchain-r/test && rm -rf /var/lib/apt/lists/*;
+RUN apt-get -y --no-install-recommends install cmake gcc-${GV} g++-${GV} g++ gcc git libgflags-dev make vim wget && rm -rf /var/lib/apt/lists/*;
 
 # Setup build directory
 RUN mkdir /build
@@ -26,7 +26,7 @@ WORKDIR /build
 
 # Install Go
 RUN wget https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
-RUN tar zxvf go${GOLANG_VERSION}.linux-amd64.tar.gz
+RUN tar zxvf go${GOLANG_VERSION}.linux-amd64.tar.gz && rm go${GOLANG_VERSION}.linux-amd64.tar.gz
 RUN mv go /usr/local
 RUN mkdir -p /go/bin
 
@@ -36,19 +36,19 @@ ENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH
 
 # Patch Go for larger cgo stack size
 RUN wget https://github.com/smartbch/patch-cgo-for-golang/archive/refs/tags/v${PATCH_CGO_VERSION}.tar.gz
-RUN tar zxvf v${PATCH_CGO_VERSION}.tar.gz
+RUN tar zxvf v${PATCH_CGO_VERSION}.tar.gz && rm v${PATCH_CGO_VERSION}.tar.gz
 RUN rm v${PATCH_CGO_VERSION}.tar.gz
 RUN cd patch-cgo-for-golang-${PATCH_CGO_VERSION} && cp *.c $GOROOT/src/runtime/cgo/
 
 # Build libsnappy
 RUN wget https://github.com/google/snappy/archive/refs/tags/${SNAPPY_VERSION}.tar.gz
-RUN tar zxvf ${SNAPPY_VERSION}.tar.gz
+RUN tar zxvf ${SNAPPY_VERSION}.tar.gz && rm ${SNAPPY_VERSION}.tar.gz
 RUN cd snappy-${SNAPPY_VERSION} && mkdir build && cd build && \
     CXX=g++-${GV} cmake ../ && make CC=gcc-${GV} CXX=g++-${GV} && make install
 
 # Build rocksdb
 RUN wget https://github.com/facebook/rocksdb/archive/refs/tags/v${ROCKSDB_VERSION}.tar.gz
-RUN tar zxvf v${ROCKSDB_VERSION}.tar.gz
+RUN tar zxvf v${ROCKSDB_VERSION}.tar.gz && rm v${ROCKSDB_VERSION}.tar.gz
 RUN cd rocksdb-${ROCKSDB_VERSION} && \
     wget -O - https://raw.githubusercontent.com/smartbch/artifacts/main/patches/rocksdb.gcc11.patch | git apply -v && \
     CXXFLAGS=-Wno-range-loop-construct make -j4 CC=gcc-${GV} CXX=g++-${GV} static_lib
@@ -78,7 +78,7 @@ RUN cp /smart_bch/smartbch/smartbchd /build/smartbchd
 WORKDIR /root
 RUN /build/smartbchd init mynode --chain-id 0x2710
 RUN wget https://github.com/smartbch/artifacts/releases/download/${CONFIG_VERSION}/dot.smartbchd.tgz
-RUN tar zxvf dot.smartbchd.tgz
+RUN tar zxvf dot.smartbchd.tgz && rm dot.smartbchd.tgz
 RUN cp -rf dot.smartbchd/* .smartbchd/
 
 # Go back to main workdir.