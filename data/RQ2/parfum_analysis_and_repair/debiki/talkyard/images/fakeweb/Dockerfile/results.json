{
  "startTime": 1674255340380,
  "endTime": 1674255341317,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 10,
        "columnStart": 2,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 10,
        "columnStart": 2,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM denoland/deno:1.20.1\n\n# Nice to haves:\nRUN \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y \\\n      tree \\\n      curl \\\n      net-tools \\\n\n      procps && rm -rf /var/lib/apt/lists/*;\n\n\n# Copied from:  https://github.com/denoland/deno_docker#as-a-dockerfile\n# License: MIT, see ./LICENSE.\n\n# The port that your application listens to.\nEXPOSE 8090\n\nWORKDIR /app\n\n# Prefer not to run as root.\n#USER deno\n# — fixing via entrypoint instead. But let's start as root, so can give\n# write access to /deno-dir, so deno can cache stuff.\n# But `exec su -c .... duno` runs as root anyway, why?  See [deno_user]\n# in ./docker-entrypoint.sh .\n# Good work-around / solution: Vendor deps, mount read-only. Problem gone,\n# & more reproducible builds etc.  [vendor_fakeweb_deno_deps]\n\n# Ty does this in docker-entrypoint.sh instead — so it'll be enough to just\n# recreate the container, to pick up any changes. Rather than having to\n# rebuild the image:\n# ------\n# Let's do here in the Dockerfile anyway — so there'll be an image available,\n# no mounts needed, when running Prod tests. [fakeweb_mount_nothing]\n# ------\n# Cache the dependencies as a layer (the following two steps are re-run only when deps.ts is modified).\n# Ideally cache deps.ts will download and compile _all_ external files used in main.ts.\nCOPY app/deps.ts .\nRUN deno cache deps.ts\n\n# These steps will be re-run upon each file change in your working directory:\nADD app .\n# Compile the main app so that it doesn't need to be compiled each startup/entry.\nRUN deno cache main.ts\n# ------\n\n\n# Comment in, if commenting out the above:\n#COPY docker-entrypoint.sh .\n#ENTRYPOINT [\"/tini\", \"--\", \"docker-entrypoint.sh\"]\n\nCMD [\"run\", \"--allow-net\", \"main.ts\"]\n"
}