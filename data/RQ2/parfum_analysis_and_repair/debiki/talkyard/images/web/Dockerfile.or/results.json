{
  "startTime": 1674253975398,
  "endTime": 1674253976444,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 211,
        "lineEnd": 213,
        "columnStart": 5,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# See: https://openresty.org/en/installation.html\n# Also see:\n# https://github.com/openresty/docker-openresty/blob/master/alpine/Dockerfile\n# saved in ./docs/\n# And a Debian 10 apt-get based Dockerfile (that works/worked with Ty)\n# here: ./old/Dockerfile.buster-apt-get-old\n\n# COULD_OPTIMIZE smaller image: Copy just what's needed from openresty_build\n# (and would need to 'apk add' some things too, to the final image).\nFROM alpine:3.13 AS openresty_build\n# No:\n# FROM alpine:3.14 AS openresty_build\n# results in an error \"make: uname: Operation not permitted\"\n# when building Lua and Make does:   HOST_SYS:= $(shell uname -s)\n\n\n# '--virtual .build_deps' lets one uninstall all these build dependencies,\n# like so:  'apk del .build_deps' (done at the end of this file)\n#\nRUN apk add --no-cache --virtual .build_deps \\\n        build-base \\\n        coreutils \\\n        # Library for the dynamic creation of images by programmers\n        # Needed for http_image_filter_module?\n        #gd-dev \\\n        # Looks up countries by IP addresses.\n        # See: \thttp://www.maxmind.com/app/ip-location\n        geoip-dev \\\n        linux-headers \\\n        make \\\n        perl-dev \\\n        readline-dev \\\n        openssl-dev \\\n        pcre-dev \\\n        zlib-dev \\\n        # Installs /usr/bin/envsubst\n        gettext\n\n\nRUN apk add --no-cache \\\n        curl \\\n        #gd \\\n        geoip \\\n        libgcc \\\n        #libxslt \\\n        # OpenSSL needed for generating LetsEncrypt private key.\n        openssl \\\n        # opm (OpenResty package manager) uses Perl.\n        perl \\\n        zlib\n\n\n# Add 'bash' so we can 'docker exec' into the container, + some tools\n# (wget & less already works).  And gdb, for backtracing core dumps. [NGXCORED]\nRUN apk add --no-cache bash tree net-tools gdb \\\n  # Telnet, nice for troubleshooting.\n  busybox-extras\n\n\nCOPY openresty/source /tmp/openresty-source\n\n\n# OpenResty's default --prefix is: '/usr/local/openresty'.\n\nARG CONFIG=\"\\\n  --conf-path=/etc/nginx/nginx.conf \\\n  \\\n  --sbin-path=/usr/sbin/nginx \\\n  --modules-path=/usr/lib/nginx/modules \\\n  \\\n  --error-log-path=/var/log/nginx/error.log \\\n  --http-log-path=/var/log/nginx/access.log \\\n  \\\n  --pid-path=/var/run/nginx.pid \\\n  --lock-path=/var/run/nginx.lock \\\n  \\\n  --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n  --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n  # Not using these:\n  #--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n  #--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n  #--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n  \\\n  --user=nginx \\\n  --group=nginx \\\n  \\\n  \\\n  # Enable modules:\n  #\n  # Modules list:\n  # https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#modules_default\n  #\n  # Modules source code:\n  # https://trac.nginx.org/nginx/browser/nginx/src/http/modules/\n  \\\n  # --with-http_addition_module \\\n  --with-http_auth_request_module \\\n  # --with-http_dav_module \\\n  # --with-http_geoip_module=dynamic \\\n  # --with-http_gunzip_module \\\n  --with-http_gzip_static_module \\\n  # --with-http_image_filter_module=dynamic \\\n  --with-http_mp4_module \\\n  # --with-http_random_index_module \\\n  --with-http_realip_module \\\n  # Can check authenticity of requested links, access control, limit link lifetime.\n  # --with-http_secure_link_module \\\n  # --with-http_slice_module \\\n  --with-http_ssl_module \\\n  # Basic Nginx status info.\n  --with-http_stub_status_module \\\n  # --with-http_sub_module \\\n  \\\n  # HTTP2 doesn't work with Lua scripts that call ngx.location.capture/_multi(..),\n  # there'd be runtime errors. See [63DRN3M75] in ./old/.\n  # Or maybe works now with OpenResty?\n  --with-http_v2_module \\\n  \\\n  # --with-ipv6 \\\n  # --with-mail \\\n  # --with-mail_ssl_module \\\n  \\\n  \\\n  # JIT compilation of regular expressions.\n  #\n  # Apparently the jit flag gets auto enabled, in this file:\n  # ./openresty/source/bundle/nginx-1.19.3/auto/lib/pcre/conf\n  # — 'nginx -V' showed it, although at the time not incl here.\n  # And:\n  # > even if you don't pass [ --with-pcre-jit ], the NGINX\n  # > configure scripts are smart enough to detect and enable it automatically\n  # https://github.com/openresty/openresty/issues/62#issuecomment-514360656\n  # But explicit is better, so we enable the flag below.\n  #\n  # For how to download from ftp.pcre.org and build a specific version,\n  # see: ./docs/Dockerfile.openresty-alpine-official\n  # Currently, 2020-12, `apk info pcre-dev` shows that pcre-dev-8.44-r0\n  # is being used.\n  --with-pcre-jit \\\n  \\\n  # Apparently this is a pcre build flag, not an Nginx flag: --enable-jit\n  \\\n  # Apparently only needed if building pcre from sources:\n  # --with-pcre(=/path/to/pcre/lib)\n  # (but we instead do:  apk add pcre-dev)\n  \\\n  \\\n  # Enables TCP and UDP proxy functionality.\n  --with-stream \\\n  --with-stream_ssl_module \\\n  # preread = For SNI I think.\n  # --with-stream_ssl_preread_module \\\n  # --with-stream_realip_module \\\n  # --with-stream_geoip_module=dynamic \\\n  \\\n  # asynchronous file I/O (AIO) on FreeBSD and Linux\n  --with-file-aio \\\n  \\\n  # Thread pools.\n  --with-threads \\\n  \\\n  \\\n  # Disable modules: (Nginx and Lua)\n  \\\n  # Is needed for 'charset utf-8;', see nginx.conf.\n  #--without-http_charset_module \\\n  \\\n  # No auto index. If ever enabling, add 'autoindex off' here: [5KUP293]\n  --without-http_autoindex_module \\\n  \\\n  # No server-side-includes.\n  --without-http_ssi_module \\\n  \\\n  # No FastCGI or CGI.\n  --without-http_fastcgi_module \\\n  --without-http_scgi_module \\\n  \\\n  # No Python (instead, the JVM and http_proxy_module).\n  # 'WSGI' means Web Server Gateway Interface, and is a calling\n  # convention for forwarding requests to an app server named 'uwsgi'\n  # for Python apps?\n  --without-http_uwsgi_module \\\n  \\\n  # No Memcached (instead, Redis).\n  --without-http_memcached_module \\\n  --without-lua_resty_memcached \\\n  \\\n  # No Mysql (instead, Postgres).\n  --without-lua_resty_mysql \\\n  \"\n\nRUN \\\n  addgroup -S nginx \\\n  && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n  \\\n  && cd /tmp/openresty-source \\\n  \\\n  # Debug build.\n  # See: ./old/Dockerfile.nginx-old\n  #&& ./configure $CONFIG \\\n  #    # Enables debug log messages: (otherwise they won't get logged at all, never?)\n  #    --with-debug \\\n  #    # So can backtrace core dumps: [NGXCORED]\n  #    --with-cc-opt='-O0 -ggdb3 -fvar-tracking-assignments' \\\n  #&& make -j$(getconf _NPROCESSORS_ONLN) \\\n  # But is this the correct path, now with OpenResty?\n  # && mv objs/nginx objs/nginx-debug \\\n  # && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n  # && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n  \\\n  # Prod build. \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n        # Incl debug symbols in prod builds (but not -O0).  [NGXCORED]\n        --with-cc-opt='-ggdb' \\\n  && make -j$(getconf _NPROCESSORS_ONLN) \\\n  && make install \\\n\n  # apparently this stuff is installed by default, but we don't use it\n  # — although the FastCGI etc modules were excluded.\n  && rm -f /etc/nginx/fastcgi* \\\n           /etc/nginx/koi-* \\\n           /etc/nginx/scgi_params* \\\n           /etc/nginx/uwsgi_params* \\\n           /etc/nginx/win-utf \\\n\n  && mkdir /etc/nginx/sites-available \\\n           /etc/nginx/sites-enabled \\\n  # && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n  # && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n  # && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n  # && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n  # && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\n  # Don't, then wouldn't be able to backtrace core dumps.  [NGXCORED]\n  #&& strip /usr/sbin/nginx* \\\n\n  # All modules above commented out. And want to keep debug symbols, anyway.\n  # Copy, so won't get deleted when cleaning up build_deps.\n  # (Was installed via package gettext.)\n  && mv /usr/bin/envsubst /tmp/ \\\n\n  # Runtime dependencies\n  && runDeps=\"$( \\\n    scanelf --needed --nobanner --format '%n#p' \\\n            /usr/sbin/nginx \\\n            /usr/lib/nginx/modules/*.so \\\n            /tmp/envsubst \\\n      | tr ',' '\\n' \\\n      | sort -u \\\n      | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n  )\" \\\n  && apk add --no-cache --virtual .nginx_rundeps $runDeps \\\n\n  && apk del .build_deps \\\n\n  # Move back\n  && mv /tmp/envsubst /usr/local/bin/ \\\n\n  # Or not needed? .pid and .lock directly in /var/run/.\n  && mkdir -p /var/run/openresty \\\n\n  # Bring in tzdata so users could set the timezones through the environment\n  # variables\n  && apk add --no-cache tzdata \\\n\n  # Forward request and error logs to docker log collector.\n  # Typically something is Docker-mounted at /var/log/(nginx/), but if not,\n  # maybe better create that directory:\n  && mkdir -p /var/log/nginx \\\n  && ln -sf /dev/stdout /var/log/nginx/access.log \\\n  && ln -sf /dev/stderr /var/log/nginx/error.log \\\n  && echo\n\n\n\n# Add additional binaries into PATH: luajit, openresty resty, opm\n#\nENV PATH=$PATH:/usr/local/openresty/luajit/bin:/usr/local/openresty/bin\n\n# But, empty: /usr/local/openresty/nginx/sbin/  (nginx in /usr/sbin/ instead)\n\n\n\n# Fonts\n# ===================================\n#\n# Barely ever changes. (Is about 1.6 M and takes some seconds to copy,\n# so nice to copy before other smaller things further below.)\n#\n# (Can generate a list of font files to copy like so:\n#   cd images/web/  # this dir\n#   ls -1 node_modules/fontsource-open-sans/files/open-sans-????*-{300,400,600}*.woff*\n# Is there no way to change the dir in the host file system?)\n\n# Copy .css font bundle(s).\nCOPY fonts /opt/talkyard/fonts\n\n# Copy .woff and woff2.\n# This shell like expansion won't work:  ...{300,400,600}...\n# Instead:\nCOPY \\\n    # This: '????*' excludes the \"-all-\" bundles (all real language names\n    # are >= 4 letters but \"all\" is just 3).\n    # Sync font sizes with gulpfile.js css file list. [sync_fonts]\n    node_modules/fontsource-open-sans/files/open-sans-????*-300-*.woff* \\\n    node_modules/fontsource-open-sans/files/open-sans-????*-400-*.woff* \\\n    node_modules/fontsource-open-sans/files/open-sans-????*-600-*.woff* \\\n    # Sync 'open-sans-vN' with Makefile and gulpfile.js. [sync_fonts]\n    /opt/talkyard/fonts/open-sans-v2/files/\n\n\n\n# Install Lua packages\n# ===================================\n\n\n# Auto HTTPS\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Could use opm, Openresty Package Manager:\n#   RUN opm install fffonion/lua-resty-acme\n# I did that, and then copied the files that then got installed (I found out which,\n# by running  tree  before and after, and then  diffing) to:\n# ./openresty-pkgs/usr-local-openresty-site — and now we can just COPY them to inside\n# the image, no need to run 'opm install ...' or do any outgoing netw requests.\n# However, can do that anyway from time to time, to upgrade lua-resty-acme and\n# dependencies.\n\n# (Or can use --cwd:  (but why? 'opm install ...' is equally simple, isn't it)\n# `while read dep; do opm --cwd get \"$dep\"; done < requirements.opm`\n# https://github.com/un-def/tinystash#lua-packages )\n\nCOPY openresty-pkgs/usr-local-openresty-site  /usr/local/openresty/site\n\n# (Maybe need to use a specific OpenSSL version?\n# > OpenResty's OpenSSL library version must be compatible with your\n# > opm and LuaRocks packages' version.\n# https://github.com/openresty/docker-openresty#tips--pitfalls\n# But apparently we use an ok version already?\n#   $ d/c exec web bash\n#   # apk update\n#   # apk info openssl-dev\n#   ...\n#   openssl-dev-1.1.1i-r0 webpage:\n#   https://www.openssl.org/\n#   openssl-dev-1.1.1i-r0 installed size:\n#   1634304\n#\n# 1.1.1i is the latest version as of 2020-12, https://www.openssl.org:\n# > 08-Dec-2020\n# > OpenSSL 1.1.1i is now available\n#\n# The Alpine build file here:  https://github.com/openresty/docker-openresty\n# patches to 1.1.1f, and between f and i, you can see here:\n# https://www.openssl.org/news/openssl-1.1.1-notes.html  that there's just\n# small fixes / changes, looks backw compat. )\n\n\n# Other Lua pkgs\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# If trying to ./copy/a/directory, Docker instead copies its contents,\n# that is:  ./copy/a/directory/*,  so to copy many directories, need to COPY\n# them one at a time:\nCOPY lua-packages/lua-resty-http  /opt/lua-packages/lua-resty-http\nCOPY lua-packages/inspect.lua     /opt/lua-packages/inspect.lua\n\n\n\n\n# Nginx config\n# ===================================\n\n\n# Remove default files, they're very confusing, if logging in to Nginx\n# and looking in /etc/nginx/:\nRUN cd /etc/nginx && \\\n  rm -fr \\\n      # Keep mime.types though.\n      # (Our actual Nginx config will be in nginx.conf.template, which we\n      # process with envsubst at startup, and save as nginx.conf.)\n      mime.types.default \\\n      nginx.conf \\\n      nginx.conf.default \\\n      \\\n   # Nice:\n   && echo 'alias ll=\"ls -l\"' >> ~/.bashrc \\\n   && echo 'alias ..=\"cd ..\"' >> ~/.bashrc \\\n   && echo 'alias ...=\"cd ../..\"' >> ~/.bashrc \\\n   && echo 'alias ....=\"cd ../../..\"' >> ~/.bashrc \\\n   && echo 'alias .....=\"cd ../../../..\"' >> ~/.bashrc \\\n   && echo\n\n\n\nCOPY ssl-cert-snakeoil.key /etc/nginx/\nCOPY ssl-cert-snakeoil.pem /etc/nginx/\n\nCOPY html                 /opt/nginx/html/\n\n# For development. Another directory gets mounted in prod, see <talkyard-prod-one>/docker-compose.yml.\nCOPY sites-enabled-manual /etc/nginx/sites-enabled-manual/\n\n# old, remove once I've edited edm & edc\nCOPY server-listen.conf   /etc/nginx/listen.conf\n\n# old, remove, doesn't specify backlog sice — and may do only once, so rather useless.\nCOPY server-listen.conf   /etc/nginx/\n\n# old, remove once I've edited edm & edc\nCOPY server-ssl.conf      /etc/nginx/ssl-hardening.conf\n\nCOPY server-ssl.conf      /etc/nginx/\nCOPY http-limits.conf     /etc/nginx/http-limits.conf.template\n\n# old, remove, now done in  <talkyard-prod-one>/conf/sites-enabled-manual/talkyard-servers.conf  instead. [ty_v1]\nCOPY http-redirect-to-https.conf /etc/nginx/\n\nCOPY server-limits.conf   /etc/nginx/server-limits.conf.template\n\n# old, remove once I've edited edm & edc   [vy_v1] + search for \"old\" everywhere here\nCOPY server-locations.conf /etc/nginx/vhost.conf.template\n\n# old, too, remove, when?\nCOPY server-locations.conf /etc/nginx/server.conf.template\n\nCOPY server-locations.conf /etc/nginx/server-locations.conf.template\nCOPY nginx.conf           /etc/nginx/nginx.conf.template\n\n\n\n# Env vars\n# ===================================\n\n\nCOPY run-envsubst-gen-keys.sh /etc/nginx/run-envsubst-gen-keys.sh\nRUN  chmod ugo+x              /etc/nginx/run-envsubst-gen-keys.sh\n\n# Sync w vars in  run-envsubst-gen-keys.sh  and  docker-compose-no-limits.yml  [0KW2UY3].\n# CLEAN_UP change prefix to TY_  [ty_v1]\n#\n# ED_NGX_LIMIT_CONN_PER_IP=60 is a lot? But maybe some people connect from\n# an office building, same IP addr?\n#\n# Set the default allowed request body size to something fairly large — 25m (megabytes)\n# — so self hosted people can upload Mac Retina screenshots (they're maybe 10 MB) and\n# small videos, without having to ask for help at Talkyard.io.\nENV \\\n    ED_NGX_LIMIT_CONN_PER_IP=60 \\\n    ED_NGX_LIMIT_CONN_PER_SERVER=10000 \\\n    ED_NGX_LIMIT_REQ_PER_IP=30 \\\n    ED_NGX_LIMIT_REQ_PER_IP_BURST=200 \\\n    ED_NGX_LIMIT_REQ_PER_SERVER=200 \\\n    ED_NGX_LIMIT_REQ_PER_SERVER_BURST=2000 \\\n    TY_NGX_LIMIT_REQ_BODY_SIZE=25m \\\n    ED_NGX_LIMIT_RATE=50k \\\n    ED_NGX_LIMIT_RATE_AFTER=5m \\\n    # Wait with setting this to a year (31536000), until things more tested.\n\t\t# ('s-maxage = ...' and 'public' are for shared proxies and CDNs)\n    TY_MAX_AGE_YEAR=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_MONTH=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_WEEK=\"max-age=604800, s-maxage=604800, public\" \\\n    TY_MAX_AGE_DAY=\"max-age=86400, s-maxage=86400, public\" \\\n    TY_MAX_AGE_HOUR=\"max-age=3600, s-maxage=3600, public\" \\\n    TY_MAX_AGE_15MIN=\"max-age=900, s-maxage=900, public\"\n\n\n\n# Scripts and styles\n# ===================================\n#\n# Frequently edited, so do last.\n\nCOPY ty-media /opt/talkyard/ty-media\nCOPY ed-lua   /opt/talkyard/lua/\nCOPY assets   /opt/talkyard/assets\n\n\n\nEXPOSE 80 443\n\n# Core dumps\n# Works without:  chown root:root /tmp/cores  &&  ulimit -c unlimited\n# Place this:  kill(getpid(), SIGSEGV);   (from: https://stackoverflow.com/a/1657244/694469 )\n# to crash and generate a core dump at some specific location.\n# (This also core dumps, but cannot backtrace the dump: `raise(SIGABRT)`)\n# Inspect e.g. like so:  # gdb /usr/sbin/nginx-debug /tmp/cores/core.nginx-debug.17\n# then type `bt` or `bt f` (backtrace full).\n#\n# Make the container privileged, in docker-compose.yml for this to work. [NGXCORED] [NGXSEGFBUG]\n#CMD chmod 1777 /tmp/cores \\\n#  && sysctl -w fs.suid_dumpable=2 \\\n#  && sysctl -p \\\n#  && echo \"/tmp/cores/core.%e.%p\" > /proc/sys/kernel/core_pattern \\\n#  && /etc/nginx/run-envsubst-gen-keys.sh \\\n#  && nginx-debug\n\n\nCMD /etc/nginx/run-envsubst-gen-keys.sh && nginx\n"
}