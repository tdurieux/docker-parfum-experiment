{
  "startTime": 1674216888875,
  "endTime": 1674216890067,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 25,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 17,
        "columnStart": 5,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 25,
        "columnStart": 5,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedDockerfile": "# Based on this example:\n# https://github.com/openresty/docker-openresty/blob/master/stretch/Dockerfile.opm_example\n\n# For now:\nFROM openresty/openresty:1.15.8.3-2-buster\n# Later: Build Nginx ourselves, so can disable unneeded modules.\n# But for now, use OpenResty's Docker image that installs OpenResty\n# via Apt.\n# Here's how to verify the OpenResty tar.gz:\n# https://www.digitalocean.com/community/tutorials/how-to-use-the-openresty-web-framework-for-nginx-on-ubuntu-16-04\n# + how to build.\n# But what about OPM?\n# https://github.com/openresty/opm#readme\n# or maybe just clone Lua module git repos manually?\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n          openresty-opm \\\n  # Automatic HTTPS via LetsEncrypt. Not yet in use. \\\n  && opm install fffonion/lua-resty-acme && rm -rf /var/lib/apt/lists/*;\n\n# Nice to have:\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n          less \\\n          tree \\\n          telnet && rm -rf /var/lib/apt/lists/*;\n\nRUN mv /etc/openresty/mime.types /etc/nginx/  \\\n  # Remove unneeded OpenResty files — it'd be just confusing to have\n  # FastCGI config files lingering here and old unused charsets config files.\n  && rm /etc/openresty/*  \\\n  && rm -fr /etc/nginx/conf.d  \\\n  # Link to Ty's config files — OpenResty loads /etc/openresty/nginx.conf.\n  # Later: Move Ty's files to /etc/openresty/ instead?\n  && echo \"include /etc/nginx/nginx.conf;\" > /etc/openresty/nginx.conf  \\\n  # Talkyard runs Nginx sub processes as user 'nginx'.\n  # Nginx's Alpine image does:\n  #    adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx\n  # — why a cache home dir?\n  && adduser \\\n      # No aging info, and system range user id, no home dir.\n      --system \\\n      # Together with --system, creates and adds the user to a group with\n      # the same name as the user.\n      --group \\\n      # --uid 1234  \\\n      --no-create-home \\\n      # --home ...  \\\n      --shell /bin/false \\\n      # --disabled-password  \\\n      --disabled-login \\\n      --gecos \"\"  \\\n      nginx\n\n\nCOPY ssl-cert-snakeoil.key /etc/nginx/\nCOPY ssl-cert-snakeoil.pem /etc/nginx/\n\nCOPY html                 /opt/nginx/html/\n\n# For development. Another directory gets mounted in prod, see <talkyard-prod-one>/docker-compose.yml.\nCOPY sites-enabled-manual /etc/nginx/sites-enabled-manual/\n\n# old, remove once I've edited edm & edc\nCOPY server-listen.conf   /etc/nginx/listen.conf\n\n# old, remove, doesn't specify backlog sice — and may do only once, so rather useless.\nCOPY server-listen.conf   /etc/nginx/\n\n# old, remove once I've edited edm & edc\nCOPY server-ssl.conf      /etc/nginx/ssl-hardening.conf\n\nCOPY server-ssl.conf      /etc/nginx/\nCOPY http-limits.conf     /etc/nginx/http-limits.conf.template\n\n# old, remove, now done in  <talkyard-prod-one>/conf/sites-enabled-manual/talkyard-servers.conf  instead.\nCOPY http-redirect-to-https.conf /etc/nginx/\n\nCOPY server-limits.conf   /etc/nginx/server-limits.conf.template\n\n# old, remove once I've edited edm & edc\nCOPY server-locations.conf /etc/nginx/vhost.conf.template\n\n# old, too, remove, when?\nCOPY server-locations.conf /etc/nginx/server.conf.template\n\nCOPY server-locations.conf /etc/nginx/server-locations.conf.template\nCOPY nginx.conf           /etc/nginx/nginx.conf.template\n\nCOPY run-envsubst.sh  /etc/nginx/run-envsubst.sh\nRUN  chmod ugo+x      /etc/nginx/run-envsubst.sh\n# Sync this with the variable list in run-envsubst.sh: [0KW2UY3]  CLEANUP change prefix to TY_\n# Currently, each tab has its own websocket/long-polling connection — and if 40 connections per ip,\n# I sometimes happen to open really many tabs, and requests start failing. Set to >= 60, for now.\n# Later, just one single live-update connection per browser [onesocket].\n#\n# Set the default allowed request body size to something fairly large — 25m (megabytes)\n# — so self hosted people can upload Mac Retina screenshots (they're maybe 10 MB) and\n# small videos, without having to ask for help at Talkyard.io.\nENV \\\n    ED_NGX_LIMIT_CONN_PER_IP=60 \\\n    ED_NGX_LIMIT_CONN_PER_SERVER=10000 \\\n    ED_NGX_LIMIT_REQ_PER_IP=30 \\\n    ED_NGX_LIMIT_REQ_PER_IP_BURST=200 \\\n    ED_NGX_LIMIT_REQ_PER_SERVER=200 \\\n    ED_NGX_LIMIT_REQ_PER_SERVER_BURST=2000 \\\n    TY_NGX_LIMIT_REQ_BODY_SIZE=25m \\\n    ED_NGX_LIMIT_RATE=50k \\\n    ED_NGX_LIMIT_RATE_AFTER=5m \\\n    # Wait with setting this to a year (31536000), until things more tested.\n\t\t# ('s-maxage = ...' and 'public' are for shared proxies and CDNs)\n    TY_MAX_AGE_YEAR=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_MONTH=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_WEEK=\"max-age=604800, s-maxage=604800, public\" \\\n    TY_MAX_AGE_DAY=\"max-age=86400, s-maxage=86400, public\"\n\n# Frequently edited, so do last.\nCOPY ty-media /opt/talkyard/ty-media\nCOPY ed-lua   /opt/talkyard/lua/\nCOPY assets   /opt/talkyard/assets\n\nEXPOSE 80 443\n\n# Core dumps\n# Works without:  chown root:root /tmp/cores  &&  ulimit -c unlimited\n# Place this:  kill(getpid(), SIGSEGV);   (from: https://stackoverflow.com/a/1657244/694469 )\n# to crash and generate a core dump at some specific location.\n# (This also core dumps, but cannot backtrace the dump: `raise(SIGABRT)`)\n# Inspect e.g. like so:  # gdb /usr/sbin/nginx-debug /tmp/cores/core.nginx-debug.17\n# then type `bt` or `bt f` (backtrace full).\n#\n# Make the container privileged, in docker-compose.yml for this to work. [NGXCORED] [NGXSEGFBUG]\n#CMD chmod 1777 /tmp/cores \\\n#  && sysctl -w fs.suid_dumpable=2 \\\n#  && sysctl -p \\\n#  && echo \"/tmp/cores/core.%e.%p\" > /proc/sys/kernel/core_pattern \\\n#  && /etc/nginx/run-envsubst.sh \\\n#  && nginx-debug\n\n# This: `daemon off` is done in nginx.conf.\nCMD /etc/nginx/run-envsubst.sh && /usr/bin/openresty\n\n"
}