{
  "startTime": 1674215196792,
  "endTime": 1674215198075,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 171,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 182,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 21,
        "columnEnd": 30
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 171,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 182,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 2,
        "columnEnd": 90
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 1,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "# Parts Copyright (c) 2016 - 2018 Kaj Magnus Lindberg\n# License: 2-clause BSD (Kaj Magnus's changes in this file only).\n#\n# Parts Copyright (C) 2011-2016 Nginx, Inc.\n# License: (2-clause BSD)\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n# SUCH DAMAGE.\n\n# Based on:\n# https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/Dockerfile\n\n# In the distant future: Maybe switch to https://github.com/envoyproxy/envoy ?  & Zipkin tracing\n\nFROM alpine:3.9\n\n# [WS] upgr to 1.16.1\nENV NGINX_VERSION 1.15.12\n\n# Do this first, because we need 'make' early, and also it's boring to wait for Nginx\n# to download.\nRUN \\\n\taddgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t# '--virtual .build-deps' lets one uninstall all these build dependencies,\n\t# like so:  'apk del .build-deps' (done at the end of this file)\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg1 \\\n\t\t# libxslt-dev \\\n\t\t# some graphics lib, needed for ? http_image_filter_module ?\n\t\t# gd-dev \\\n\t\t# geoip-dev \\\n\t\t# Don't include this in the 'apk add' step above, because then libgcc would get\n\t\t# uninstalled a bit below by 'apk del .build-deps'.\n\t\t&& apk add --no-cache \\\n\t\t\t# /opt/luajit/lib/libluajit-5.1.so.2 needs shared lib libgcc_s.so.1\n\t\t\tlibgcc \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc\n\nENV GPG_KEYS B0F4253373F8F6F510D42178520A9993A1C052F8\nENV CONFIG \"\\\n\t--prefix=/etc/nginx \\\n\t--sbin-path=/usr/sbin/nginx \\\n\t--modules-path=/usr/lib/nginx/modules \\\n\t--conf-path=/etc/nginx/nginx.conf \\\n\t--error-log-path=/var/log/nginx/error.log \\\n\t--http-log-path=/var/log/nginx/access.log \\\n\t--pid-path=/var/run/nginx.pid \\\n\t--lock-path=/var/run/nginx.lock \\\n\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t--user=nginx \\\n\t--group=nginx \\\n\t--with-http_ssl_module \\\n\t--with-http_realip_module \\\n\t# adds text before and after a response\n\t# --with-http_addition_module \\\n\t# modifies a response by replacing one specified string by another\n\t# --with-http_sub_module \\\n\t# file management automation via the WebDAV.\n\t# --with-http_dav_module \\\n\t# streaming Flash\n\t# --with-http_flv_module \\\n\t--with-http_mp4_module \\\n\t# decompresses gzip, if client doesn't support it\n\t# --with-http_gunzip_module \\\n\t# sends precompressed files with the '.gz' suffix\n\t--with-http_gzip_static_module \\\n\t#--with-http_random_index_module \\\n\t# what?\n\t# --with-http_secure_link_module \\\n\t--with-http_stub_status_module \\\n\t# client authorization based on the result of a subrequest\n\t--with-http_auth_request_module \\\n\t# --with-http_xslt_module=dynamic \\\n\t# --with-http_image_filter_module=dynamic \\\n\t# --with-http_geoip_module=dynamic \\\n\t--with-threads \\\n\t--with-stream \\\n\t--with-stream_ssl_module \\\n\t# preread = For SNI I think.\n\t# --with-stream_ssl_preread_module \\\n\t# --with-stream_realip_module \\\n\t# --with-stream_geoip_module=dynamic \\\n\t# splits a request into subrequests, each returning a certain range of response -> effective caching of big responses\n\t# --with-http_slice_module \\\n\t# --with-mail \\\n\t# --with-mail_ssl_module \\\n\t# --with-compat \\\n\t# asynchronous file I/O (AIO) on FreeBSD and Linux\n\t--with-file-aio \\\n\t\\\n\t# HTTP2 doesn't work with Lua scripts that call ngx.location.capture/_multi(..),\n\t# there'd be runtime errors. See [63DRN3M75] in ./old/.\n\t--with-http_v2_module \\\n\t\\\n\t# Disable stuff, and add Lua:\n\t# won't ever need to show any auto index? If adding it back, add 'autoindex off' here: [5KUP293]\n\t--without-http_autoindex_module \\\n\t# skip server-side-includes module\n\t--without-http_ssi_module \\\n\t# LuaJIT wants this;\n\t--with-ld-opt=\"-Wl,-rpath,/opt/luajit/lib\" \\\n\t# LuaJIT needs the devel kit.\n\t--add-module=/tmp/nginx-modules/ngx_devel_kit \\\n\t--add-module=/tmp/nginx-modules/lua-nginx-module \\\n\t\"\n\n# Copy Lua modules.\nCOPY modules /tmp/nginx-modules/\n\n# Build LuaJIT\nRUN cd /tmp/nginx-modules/luajit && \\\n    make PREFIX=/opt/luajit && \\\n    make install PREFIX=/opt/luajit\n\n# Tell nginx's build system where to find LuaJIT 2.1:\nENV LUAJIT_LIB /opt/luajit/lib\nENV LUAJIT_INC /opt/luajit/include/luajit-2.1\n\nRUN \\\n\texport GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; do \\\n\t\t\t\n\t\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone \\\n\t; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t# generate a debug build, will be at /usr/sbin/nginx-debug \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t\t\t\t\t# Enables debug log messages: (otherwise they won't get logged at all, never?)\n\t\t\t\t\t--with-debug \\\n\t\t\t\t\t# So can backtrace core dumps: [NGXCORED]\n\t\t\t\t\t--with-cc-opt='-O0 -ggdb3 -fvar-tracking-assignments' \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t# && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t# && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t# && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t# && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t\t\t\t\t# Let's incl debug symbols in prod builds too (but not -O0).  [NGXCORED]\n\t\t\t\t\t--with-cc-opt='-ggdb' \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t# Skip creating & copying to /etc/nginx/conf.d/ and /usr/share/nginx/html/.\n\t# && mkdir /etc/nginx/conf.d/ \\\n\t# && mkdir -p /usr/share/nginx/html/ \\\n\t# && install -m644 html/index.html /usr/share/nginx/html/ \\\n\t# && install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t# apparently this stuff is installed by default, but we don't use it.\n\t&& rm -f /etc/nginx/fastcgi* \\\n             /etc/nginx/koi-* \\\n             /etc/nginx/scgi_params* \\\n             /etc/nginx/uwsgi_params* \\\n             /etc/nginx/win-utf \\\n\t&& mkdir /etc/nginx/sites-available \\\n\t         /etc/nginx/sites-enabled \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t# && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t# && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t# && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t# && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n\t# && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\n\t# Don't, then wouldn't be able to backtrace core dumps.  [NGXCORED]\n\t#&& strip /usr/sbin/nginx* \\\n\n\t# All modules above commented out. And want to keep debug symbols, anyway.\n\t# && strip /usr/lib/nginx/modules/*.so \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# Bring in tzdata so users could set the timezones through the environment\n\t# variables\n\t&& apk add --no-cache tzdata \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\n\n\nRUN rm -fr /tmp/nginx-modules/\n\n\n# Add 'bash' so we can 'docker exec' into the container, + some tools. (wget & less already works)\n# And gdb, for backtracing core dumps. [NGXCORED]\nRUN apk add --no-cache bash tree curl net-tools gdb \\\n  # Telnet, nice for troubleshooting.\n  busybox-extras\n\n# Remove default files, they're very confusing, if logging in to Nginx and looking at /etc/nginx/:\nRUN rm -fr \\\n  # Keep mime.types though.\n  mime.types.default \\\n  nginx.conf \\\n  nginx.conf.default\n\n\nCOPY lua-packages /opt/lua-packages/\n\n\nCOPY ssl-cert-snakeoil.key /etc/nginx/\nCOPY ssl-cert-snakeoil.pem /etc/nginx/\n\nCOPY html                 /opt/nginx/html/\n\n# For development. Another directory gets mounted in prod, see <talkyard-prod-one>/docker-compose.yml.\nCOPY sites-enabled-manual /etc/nginx/sites-enabled-manual/\n\n# old, remove once I've edited edm & edc\nCOPY server-listen.conf   /etc/nginx/listen.conf\n\n# old, remove, doesn't specify backlog sice — and may do only once, so rather useless.\nCOPY server-listen.conf   /etc/nginx/\n\n# old, remove once I've edited edm & edc\nCOPY server-ssl.conf      /etc/nginx/ssl-hardening.conf\n\nCOPY server-ssl.conf      /etc/nginx/\nCOPY http-limits.conf     /etc/nginx/http-limits.conf.template\n\n# old, remove, now done in  <talkyard-prod-one>/conf/sites-enabled-manual/talkyard-servers.conf  instead.\nCOPY http-redirect-to-https.conf /etc/nginx/\n\nCOPY server-limits.conf   /etc/nginx/server-limits.conf.template\n\n# old, remove once I've edited edm & edc\nCOPY server-locations.conf /etc/nginx/vhost.conf.template\n\n# old, too, remove, when?\nCOPY server-locations.conf /etc/nginx/server.conf.template\n\nCOPY server-locations.conf /etc/nginx/server-locations.conf.template\nCOPY nginx.conf           /etc/nginx/nginx.conf.template\n\nCOPY run-envsubst.sh  /etc/nginx/run-envsubst.sh\nRUN  chmod ugo+x      /etc/nginx/run-envsubst.sh\n# Sync this with the variable list in run-envsubst.sh: [0KW2UY3]  CLEANUP change prefix to TY_\n# Currently, each tab has its own websocket/long-polling connection — and if 40 connections per ip,\n# I sometimes happen to open really many tabs, and requests start failing. Set to >= 60, for now.\n# Later, just one single live-update connection per browser [onesocket].\n#\n# Set the default allowed request body size to something fairly large — 25m (megabytes)\n# — so self hosted people can upload Mac Retina screenshots (they're maybe 10 MB) and\n# small videos, without having to ask for help at Talkyard.io.\nENV \\\n    ED_NGX_LIMIT_CONN_PER_IP=60 \\\n    ED_NGX_LIMIT_CONN_PER_SERVER=10000 \\\n    ED_NGX_LIMIT_REQ_PER_IP=30 \\\n    ED_NGX_LIMIT_REQ_PER_IP_BURST=200 \\\n    ED_NGX_LIMIT_REQ_PER_SERVER=200 \\\n    ED_NGX_LIMIT_REQ_PER_SERVER_BURST=2000 \\\n    TY_NGX_LIMIT_REQ_BODY_SIZE=25m \\\n    ED_NGX_LIMIT_RATE=50k \\\n    ED_NGX_LIMIT_RATE_AFTER=5m \\\n    # Wait with setting this to a year (31536000), until things more tested.\n\t\t# ('s-maxage = ...' and 'public' are for shared proxies and CDNs)\n    TY_MAX_AGE_YEAR=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_MONTH=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_WEEK=\"max-age=604800, s-maxage=604800, public\" \\\n    TY_MAX_AGE_DAY=\"max-age=86400, s-maxage=86400, public\"\n\n# Frequently edited, so do last.\nCOPY ty-media /opt/talkyard/ty-media\nCOPY ed-lua   /opt/talkyard/lua/\nCOPY assets   /opt/talkyard/assets\n\nEXPOSE 80 443\n\n# Core dumps\n# Works without:  chown root:root /tmp/cores  &&  ulimit -c unlimited\n# Place this:  kill(getpid(), SIGSEGV);   (from: https://stackoverflow.com/a/1657244/694469 )\n# to crash and generate a core dump at some specific location.\n# (This also core dumps, but cannot backtrace the dump: `raise(SIGABRT)`)\n# Inspect e.g. like so:  # gdb /usr/sbin/nginx-debug /tmp/cores/core.nginx-debug.17\n# then type `bt` or `bt f` (backtrace full).\n#\n# Make the container privileged, in docker-compose.yml for this to work. [NGXCORED] [NGXSEGFBUG]\n#CMD chmod 1777 /tmp/cores \\\n#  && sysctl -w fs.suid_dumpable=2 \\\n#  && sysctl -p \\\n#  && echo \"/tmp/cores/core.%e.%p\" > /proc/sys/kernel/core_pattern \\\n#  && /etc/nginx/run-envsubst.sh \\\n#  && nginx-debug\n\nCMD /etc/nginx/run-envsubst.sh && nginx\n"
}