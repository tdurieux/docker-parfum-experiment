{
  "startTime": 1674216918724,
  "endTime": 1674216920064,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 49,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 33,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 67,
        "columnEnd": 102
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 67,
        "columnEnd": 102
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 67,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 67,
        "columnEnd": 126
      }
    }
  ],
  "repairedDockerfile": "#\n# The Docker building is done in two stages:\n# 1. download and extract asset in /src\n# 2. compile the solver in the given BUILDER_BASE and install it in /dist\n#\n# The extraction tries to detect automatically the archive format\n# The compilation tries to detect automatically the building method and\n# installation method:\n# For the compilation, it tries in this order:\n#  - <set>/fixtures/SOLVER.build.sh\n#  - <set>/build.sh\n#  - starexec_build\n#  - build.sh\n#  - Makefile\n#  - ./configure && make\n#\n# For the installatin in /dist, it tries in this order:\n#  - <set>/fixtures/SOLVER.install.sh\n#  - <set>/install.sh\n#  - if 'binary' directory exists move its content to /dist\n#  - if 'bin' directory exists move its content to /dist\n#  - move all executable files at the root of source directory to /dist\n#\n\nARG BUILDER_BASE\nARG PLATFORM\n\n#\n# This first part takes care about downloading the archive\n# and unpack it in /src.\n# It uses a different base from the builder to ease downloading and extraction.\n#\nFROM debian:stretch-slim as unpack\n\nRUN apt-get update --fix-missing && \\\n    apt-get install -y --no-install-recommends \\\n        ca-certificates\\\n        curl\\\n        unzip\\\n        xz-utils && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /assets\n\nARG download_url\nRUN curl -fOL \"${download_url}\"\n\nWORKDIR /src\n\n# allow for custom unpacking scripts\nCOPY setup.json unpack*.sh /\n\nRUN ASSET=\"$(ls /assets/*)\" && set -ex && \\\n    if test -f /unpack.sh; then bash /unpack.sh \"${ASSET}\"; \\\n    else ext=\"${ASSET##*.}\" && b=\"${ASSET%.*}\" && \\\n        ext=\"${ext%\\?*}\" && \\\n        if [ \"${b##*.}\" = \"tar\" ]; then ext=\"tar.${ext}\" && b=\"${b%.*}\"; fi; \\\n        case \"${ext}\" in \\\n        tgz|tar.gz) tar xvzf \"${ASSET}\";; \\\n        tar.xz) tar xJf \"${ASSET}\";; \\\n        zip) unzip \"${ASSET}\";; \\\n         *) echo \"Unknown archive type!\" && exit 1;; esac; fi\n\n\n#\n# This part takes care about compiling the solver\n# and installing binaries in /dist\n#\nFROM ${BUILDER_BASE}\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\n\nRUN apt-get update --fix-missing && \\\n    apt-get -y --no-install-recommends install zip gcc g++ cmake make patch curl zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nARG BUILD_DEPENDS\nRUN if test \"${BUILD_DEPENDS}\"; then \\\n    apt-get install -y --no-install-recommends ${BUILD_DEPENDS} || apt-get install --no-install-recommends -y ${BUILD_DEPENDS}; rm -rf /var/lib/apt/lists/*; fi\n\nCOPY --from=unpack /src /src\n\nWORKDIR /src\n\nARG SOLVER\n\nCOPY setup.json build*.sh fixtures/$SOLVER.*build.sh /\n\nRUN set -ex && if test -f /$SOLVER.pre_build.sh; then bash /$SOLVER.pre_build.sh; fi\n\nRUN set -ex && cd \"./`find -maxdepth 1 -mindepth 1 -type d|sort|grep -v __MACOSX|tail -n1`\" && \\\n    if test -f /$SOLVER.build.sh;then bash /$SOLVER.build.sh; \\\n    elif test -f /src/build.sh;then cd /src && bash ./build.sh; \\\n    elif test -f /build.sh;then bash /build.sh; \\\n    elif test -f /src/configure; then \\\n    cd /src && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make; \\\n    elif test -f starexec_build;then bash starexec_build; \\\n    elif test -f build.sh;then bash build.sh; \\\n    elif test -x configure; then \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && rm -f configure mkconfig; \\\n    elif test -f Makefile -o -f makefile; then make;\\\n    elif test -x compile; then sh compile;\\\n    else echo \"did not found any building tool\"; exit 1; fi\n\nRUN set -ex && if test -f /$SOLVER.post_build.sh; then bash /$SOLVER.post_build.sh; fi\n\nCOPY setup.json install*.sh fixtures/$SOLVER.*install.sh /\n\nRUN set -ex && mkdir /dist && cd \"./`find -maxdepth 1 -mindepth 1 -type d|sort|grep -v __MACOSX|tail -n1`\" && \\\n    if test -f /$SOLVER.install.sh; then bash /$SOLVER.install.sh; \\\n    elif test -f /install.sh; then bash /install.sh; \\\n    elif test -d binary; then mv -v binary/* /dist/; \\\n    elif test -d bin; then mv -v bin/* /dist/; \\\n    elif test -d build; then mv build/* /dist/; \\\n    else find -type f -maxdepth 1 -name '*.ini' -exec mv -v {} /dist/{} \\;; \\\n        if find -perm /100 -type f -maxdepth 1 -exec mv -v {} /dist/{} \\;; then : ; \\\n        else find -perm +100 -type f -maxdepth 1 -exec mv -v {} /dist/{} \\;; fi; fi\n\n"
}