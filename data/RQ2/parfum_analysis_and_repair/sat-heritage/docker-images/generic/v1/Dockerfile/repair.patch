diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/sat-heritage/docker-images/generic/v1/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/sat-heritage/docker-images/generic/v1/Dockerfile/repaired.Dockerfile
index 667704f..f4b9197 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/sat-heritage/docker-images/generic/v1/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/sat-heritage/docker-images/generic/v1/Dockerfile/repaired.Dockerfile
@@ -37,7 +37,7 @@ RUN apt-get update --fix-missing && \
         ca-certificates\
         curl\
         unzip\
-        xz-utils
+        xz-utils && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /assets
 
@@ -68,12 +68,12 @@ RUN ASSET="$(ls /assets/*)" && set -ex && \
 FROM ${BUILDER_BASE}
 ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
 
-RUN apt-get update --fix-missing &&\
-    apt-get -y install zip gcc g++ cmake make patch curl zlib1g-dev
+RUN apt-get update --fix-missing && \
+    apt-get -y --no-install-recommends install zip gcc g++ cmake make patch curl zlib1g-dev && rm -rf /var/lib/apt/lists/*;
 
 ARG BUILD_DEPENDS
 RUN if test "${BUILD_DEPENDS}"; then \
-    apt-get install -y --no-install-recommends ${BUILD_DEPENDS} || apt-get install -y ${BUILD_DEPENDS}; fi
+    apt-get install -y --no-install-recommends ${BUILD_DEPENDS} || apt-get install --no-install-recommends -y ${BUILD_DEPENDS}; rm -rf /var/lib/apt/lists/*; fi
 
 COPY --from=unpack /src /src
 
@@ -86,13 +86,15 @@ COPY setup.json build*.sh fixtures/$SOLVER.*build.sh /
 RUN set -ex && if test -f /$SOLVER.pre_build.sh; then bash /$SOLVER.pre_build.sh; fi
 
 RUN set -ex && cd "./`find -maxdepth 1 -mindepth 1 -type d|sort|grep -v __MACOSX|tail -n1`" && \
-    if test -f /$SOLVER.build.sh; then bash /$SOLVER.build.sh; \
-    elif test -f /src/build.sh; then cd /src && bash ./build.sh; \
-    elif test -f /build.sh; then bash /build.sh; \
-    elif test -f /src/configure; then cd /src && ./configure && make ; \
-    elif test -f starexec_build; then bash starexec_build;\
-    elif test -f build.sh; then bash build.sh;\
-    elif test -x configure; then ./configure && make && rm -f configure mkconfig;\
+    if test -f /$SOLVER.build.sh;then bash /$SOLVER.build.sh; \
+    elif test -f /src/build.sh;then cd /src && bash ./build.sh; \
+    elif test -f /build.sh;then bash /build.sh; \
+    elif test -f /src/configure; then \
+    cd /src && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && make; \
+    elif test -f starexec_build;then bash starexec_build; \
+    elif test -f build.sh;then bash build.sh; \
+    elif test -x configure; then \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && make && rm -f configure mkconfig; \
     elif test -f Makefile -o -f makefile; then make;\
     elif test -x compile; then sh compile;\
     else echo "did not found any building tool"; exit 1; fi