{
  "startTime": 1674252207400,
  "endTime": 1674252208132,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "---\ntitle: 利用Dockerfile创建一些基础镜像\ntitleTag: 原创\ndate: 2018-11-09 22:10:14\npermalink: /pages/2030.html\ncategories:\n  - 运维观止\n  - Docker\ntags:\n  - docker\n  - dockerfile\n\ndescription:\n---\n\n在学习 docker 的过程中，我们会经常与镜像打交道，同时也要经常与网络打交道，下载远程镜像的快慢几乎都是靠人品来支撑，这样以来，学习的效率会大大降低，而且远程的一些镜像，很多时候未必适合自己使用的需求，因此，制作一些基础镜像用于日常使用，就显得非常必要了。\n\n\n\n本文当中所需要用到的一些 Dockerfile，我已经上传在个人的 GitHub，可以下载参考，以助于理解。\n\n\n\n::: cardList 1\n```yaml\n- name: docker_learn\n  desc: dockerfile学习\n  avatar: https://avatars2.githubusercontent.com/u/416130?s=460&u=8753e86600e300a9811cdc539aa158deec2e2724&v=4 # 可选\n  link: https://github.com/eryajf/docker_learn # 可选\n  bgColor: '#FBDE4B' # 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号\n  textColor: '#fff' # 可选，默认var(--textColor)\n```\n:::\n\n\n\n\n## 1，构建 CentOS7.4。\n\n\n\n需要用到四个文件。\n\n\n\n```sh\n[root@localhost centos7]$ls\naliyun-epel.repo  aliyun-mirror.repo  Dockerfile  supervisord.conf\n```\n\n\n\n### 1，Dockerfile。\n\n\n\n```sh\n#\n# Dockerizing CentOS7: Dockerfile for building CentOS images\n#\n#需要一个基础镜像，这里从国内的daocloud下载，速度比较快。\nFROM       daocloud.io/library/centos:centos7.4.1708\n\n#维护者\nMAINTAINER eryajf <Linuxlql@163.com>\n\n#设置一个时区的环境变量\nENV TZ \"Asia/Shanghai\"\n\n#虚拟终端\nENV TERM xterm\n\n#dockerfile中有2条命令可以复制文件，1.COPY 2.ADD， ADD比COPY多2个功能，可以写成连接 直接COPY到container，如果是压缩文件，add能自动解压\nADD aliyun-mirror.repo /etc/yum.repos.d/CentOS-Base.repo\nADD aliyun-epel.repo /etc/yum.repos.d/epel.repo\n\nRUN yum install -y curl wget tar bzip2 unzip vim-enhanced passwd sudo yum-utils hostname net-tools rsync man && \\\n    yum install -y gcc gcc-c++ git make automake cmake patch logrotate python-devel libpng-devel libjpeg-devel && \\\n    yum install -y --enablerepo=epel pwgen python-pip python-setuptools.noarch lrzsz ntp docker-client && \\\n    yum clean all && rm -rf /var/cache/yum\n\n#配置supervisor 进程管理工具，运行单个进程可以不使用\nRUN easy_install supervisor && \\\n    mkdir -m 755 -p /etc/supervisor && \\\n    mkdir -m 755 /etc/supervisor/conf.d\nADD supervisord.conf /etc/supervisor/supervisord.conf\n\nEXPOSE 22\n\nENTRYPOINT [\"/usr/bin/supervisord\", \"-n\", \"-c\", \"/etc/supervisor/supervisord.conf\"]\n```\n\n\n\n### 2，两个 yum 源。\n\n\n\n`其一：`\n\n\n\n```sh\n[root@localhost centos7]$cat aliyun-epel.repo\n[epel]\nname=Extra Packages for Enterprise Linux 7 - $basearch\nbaseurl=http://mirrors.aliyun.com/epel/7/$basearch\n#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=$basearch\nfailovermethod=priority\nenabled=1\ngpgcheck=0\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7\n\n[epel-debuginfo]\nname=Extra Packages for Enterprise Linux 7 - $basearch - Debug\nbaseurl=http://mirrors.aliyun.com/epel/7/$basearch/debug\n#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&arch=$basearch\nfailovermethod=priority\nenabled=0\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7\ngpgcheck=0\n\n[epel-source]\nname=Extra Packages for Enterprise Linux 7 - $basearch - Source\nbaseurl=http://mirrors.aliyun.com/epel/7/SRPMS\n#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&arch=$basearch\nfailovermethod=priority\nenabled=0\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7\ngpgcheck=0\n```\n\n\n\n`其二：`\n\n\n\n```sh\n[root@localhost centos7]$cat aliyun-mirror.repo\n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the\n# remarked out baseurl= line instead.\n#\n#\n\n[base]\nname=CentOS-$releasever - Base - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n\n#released updates\n[updates]\nname=CentOS-$releasever - Updates - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n\n#additional packages that may be useful\n[extras]\nname=CentOS-$releasever - Extras - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=extras\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n\n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-$releasever - Plus - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=centosplus\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n\n#contrib - packages by Centos Users\n[contrib]\nname=CentOS-$releasever - Contrib - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=contrib\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n```\n\n\n\n### 3，supervisor 配置文件。\n\n\n\n```sh\n[root@localhost centos7]$cat supervisord.conf\n[unix_http_server]\nfile=/tmp/supervisor.sock   ; the path to the socket file\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\nlogfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB\nlogfile_backups=10           ; # of main logfile backups; 0 means none, default 10\nloglevel=info                ; log level; default info; others: debug,warn,trace\npidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid\nnodaemon=false               ; start in foreground if true; default false\nminfds=1024                  ; min. avail startup file descriptors; default 1024\nminprocs=200                 ; min. avail process descriptors;default 200\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket\n\n[include]\nfiles = /etc/supervisor/conf.d/*.ini\n```\n\n\n\n过多关于 supervisor 配置的问题，这里就不多做解释了，不过如果想要熟悉使用它，还是需要对它进行了解一番的，欲想了解，可以看我的另一篇文章：[使用 supervisor 管理 Linux 系统应用进程](https://wiki.eryajf.net/pages/1903.html)。\n\n\n\n开始构建。\n\n\n\n```sh\ndocker build -t idocker.io/eryajf/centos:7.4 .\n```\n\n\n\n注意最后边那个点。\n\n\n\n构建的时候，就将名称定义为自己私服地址。\n\n\n\n构建完成查看一下：\n\n\n\n```sh\n[root@localhost ~]$docker images\nREPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE\nidocker.io/eryajf/centos   7.4                 13fb619afd8c        21 hours ago        519 MB\n```\n\n\n\n之后可以 push 到自己的私服当中。\n\n\n\n```sh\ndocker push idocker.io/eryajf/centos:7.4\n```\n\n\n\n`启动：`\n\n\n\n```sh\ndocker run -d --name centos idocker.io/eryajf/centos:7.4\n```\n\n\n\n## 2，构建 jdk 基础镜像。\n\n\n\n这个镜像事实上在 dockerhub 上有官方发布的，只不过其底层镜像都是基于 deebin 的，并不适合日常使用，因此这里就自己来制作一下。\n\n\n\n需要两个文件。\n\n\n\n```sh\n[root@localhost jdk8]$ls\nDockerfile  jdk.tar.gz\n```\n\n\n\n### 1，Dockerfile。\n\n\n\n```sh\nFROM       idocker.io/eryajf/centos:7.4\nMAINTAINER eryajf <Linuxlql@163.com>\n\n# Install jdk\nADD  jdk.tar.gz   /usr/local/\n\nENV JAVA_HOME /usr/local/jdk1.8.0_144\nENV PATH $PATH:$JAVA_HOME/bin\n```\n\n\n\n剩下那个是 jdk 的包，可以在[官网进行下载](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)。\n\n\n\n`构建。`\n\n\n\n```sh\ndocker build -t idocker.io/eryajf/jdk:1.8 .\n```\n\n\n\n启动验证。\n\n\n\n```sh\n[root@localhost ~]$docker run -d --name jdk idocker.io/eryajf/jdk:1.8\n17c9180d892f2406bb256113ec241843ac1e18f7e20aeb52de67ad8eaef2c724\n[root@localhost ~]$docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n17c9180d892f        36a4fcd3d962        \"/usr/bin/supervis...\"   2 seconds ago       Up 1 second         22/tcp              jdk\n[root@localhost ~]$docker exec -it jdk bash\n[root@17c9180d892f /]# java -version\njava version \"1.8.0_144\"\nJava(TM) SE Runtime Environment (build 1.8.0_144-b01)\nJava HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)\n```\n\n\n\n## 3，构建 tomcat 镜像。\n\n\n\n需要用到如下三个文件。\n\n\n\n```sh\n[root@localhost tomcat]$ls\nDockerfile  tomcat.ini  tomcat.tar.gz\n```\n\n\n\n### 1，Dockerfile。\n\n\n\n```sh\n[root@localhost tomcat]$cat Dockerfile\nFROM       idocker.io/eryajf/jdk:1.8\nMAINTAINER eryajf <Linuxlql@163.com>\n\n\n# Install jdk\nADD  tomcat.tar.gz   /usr/local/\nADD  tomcat.ini /etc/supervisor/conf.d\n```\n\n\n\n### 2，tomcat.ini。\n\n\n\n```sh\n[root@localhost tomcat]$cat tomcat.ini\n[program:tomcat]\nenvironment=JAVA_HOME=\"/usr/local/jdk1.8.0_144\",JAVA_BIN=\"/usr/local/jdk1.8.0_144/bin\"\ncommand=/usr/local/tomcat/bin/catalina.sh run\nautostart=true\nautorestart=true\nstartsecs=60\npriority=1\nstopasgroup=true\nkillasgroup=true\nstderr_logfile=/usr/local/tomcat/logs/catalina.out\n```\n\n\n\n构建镜像。\n\n\n\n```sh\ndocker build -t idocker.io/eryajf/tomcat:8.5 .\n```\n\n\n\n启动。\n\n\n\n```sh\ndocker run -d -p 8080:8080 --name tomcat idocker.io/eryajf/tomcat:8.5\n```\n\n\n\n## 4，构建 Jenkins 镜像。\n\n\n\n之前使用过从 dockerhub 上下载的 Jenkins 官方发布的镜像，然而那些镜像的底层也都不是 centos 系统的，因此打算自己制作一个 Jenkins 镜像，以便于使用。\n\n\n\n所需原料如下：\n\n\n\n```sh\n[root@localhost jenkins]$ls\nDockerfile  maven.tar.gz  ROOT.war\n```\n\n\n\n其中 maven 是配置好了的，ROOT.war 是 Jenkins 的包。\n\n\n\n### 1，Dockerfile。\n\n\n\n```sh\n[root@localhost jenkins]$cat Dockerfile\nFROM       idocker.io/eryajf/tomcat:8.5\nMAINTAINER eryajf <Linuxlql@163.com>\n\nADD  maven.tar.gz /usr/local/\nCOPY ROOT.war /usr/local/tomcat/webapps/\n\nENV JAVA_HOME /usr/local/jdk1.8.0_144\nENV MAVEN_HOME=/usr/local/maven\nENV JENKINS_HOME=/home/.jenkins_home\nENV PATH $PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin\n```\n\n\n\n构建。\n\n\n\n```sh\ndocker build -t idocker.io/eryajf/jenkins:2.138 .\n```\n\n\n\n启动验证。\n\n\n\n```sh\ndocker run -d -p 8080:8080 --name jenkins idocker.io/eryajf/jenkins:2.138\n```\n\n\n\n这种启动方式只能够正常的将 Jenkins 启动起来，但是如果想要继续利用 Jenkins 进行持续集成，那么就需要将宿主机当中的 docker 命令挂载到容器当中，这时可以使用如下命令：\n\n\n\n```sh\ndocker run -d -p 8080:8080 --name jenkins -v /home/.jenkins_home:/home/.jenkins_home -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock -v /etc/sysconfig/docker:/etc/sysconfig/docker  idocker.io/eryajf/jenkins:2.138\n```\n\n\n\n启动之后就可以在在这个基础上使用 Jenkins 了，而且无论什么时候，就算这个容器挂掉了，只要挂载的数据目录还在，那么随时都可以通过如上这条指令将原有的 Jenkins 容器恢复出来。\n"
}