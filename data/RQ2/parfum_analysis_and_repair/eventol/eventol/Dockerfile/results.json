{
  "startTime": 1674254984608,
  "endTime": 1674254985700,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#########################################\n# frontend image\n#########################################\nFROM node:16-alpine3.13 as frontend\n\n## Install system dependencies\nRUN apk --update add --no-cache \\\n    git gcc make autoconf automake musl-dev zlib zlib-dev python2 g++ \\\n  && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set working directory\nWORKDIR /app\nRUN chown -R node:node /app\n\n# Set user\nUSER node\n\n# Install yarn dependencies\nCOPY --chown=node:node ./eventol/front/package.json ./eventol/front/yarn.lock ./\nRUN yarn install && yarn cache clean;\n\n# Copy code\nCOPY --chown=node:node ./eventol/front/ .\n\n# Build\nRUN yarn build\n\nEXPOSE 3000\n\nCMD [\"tail\", \"-f\", \"/dev/null\"]\n\n#########################################\n# build image\n#########################################\nFROM python:3.9.6-alpine3.13 as development\n\n# Set environment variables\nENV APP_ROOT /usr/src/app/\nENV IS_ALPINE true\nENV DJANGO_CONFIGURATION=Prod\n\n# Install system dependencies\nRUN apk --update add --no-cache \\\n  bash git gcc cairo-dev postgresql-dev libxslt-dev postgresql-dev gcc cargo \\\n  gettext musl-dev py3-setuptools jpeg-dev make python3-dev sox flite libffi-dev openssl-dev \\\n  && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n## Install python dependencies\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir cffi cairocffi psycopg2\nRUN apk --update add --no-cache cairo-dev \\\n  && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Create folders for deploy\nRUN mkdir -p ${APP_ROOT}\nRUN mkdir -p /var/log/eventol\nWORKDIR ${APP_ROOT}\n\n# Create user\nRUN adduser -D -h ${APP_ROOT} -s /bin/bash app\nRUN chown app:app /var/log/eventol\n\n# Install python requirements\nCOPY --chown=app:app ./requirements.txt ./requirements-dev.txt ${APP_ROOT}\nRUN pip3 install --no-cache-dir -r requirements-dev.txt\n\n# Set user\nUSER app\n\n# Copy python code\nCOPY --chown=app:app ./Makefile ${APP_ROOT}/Makefile\nCOPY --chown=app:app ./eventol ${APP_ROOT}/eventol\nRUN mkdir -p ${APP_ROOT}/eventol/manager/static\nRUN mkdir -p ${APP_ROOT}/eventol/front/eventol/static\n\n# Copy git files\nCOPY --chown=app:app ./.git ${APP_ROOT}/.git\n\n# Copy frontend files\nCOPY --chown=app:app --from=frontend /app/webpack-stats-prod.json ${APP_ROOT}/eventol/front/webpack-stats-prod.json\nCOPY --chown=app:app --from=frontend /app/eventol/static ${APP_ROOT}/eventol/front/eventol/static\n\n# Copy script for docker-compose wait and start-eventol\nCOPY --chown=app:app ./deploy/docker/scripts/wait-for-it.sh ${APP_ROOT}/wait-for-it.sh\nCOPY --chown=app:app ./deploy/docker/scripts/start_eventol.sh ${APP_ROOT}/start_eventol.sh\n\n# Collect statics\nRUN mkdir -p ${APP_ROOT}/eventol/static\nRUN cd ${APP_ROOT}/eventol && python manage.py collectstatic --noinput\n\n# Create media folder\nRUN mkdir -p ${APP_ROOT}/eventol/media\n\n# Create log file\nRUN touch /var/log/eventol/eventol.log\n\n# Compile .po files\nRUN sed -i 's@#~ @@g' ${APP_ROOT}/eventol/conf/locale/*/LC_MESSAGES/djangojs.po\nRUN cd ${APP_ROOT}/eventol && python manage.py compilemessages\n\nEXPOSE 8000\n\nVOLUME ${APP_ROOT}/eventol/media\nVOLUME ${APP_ROOT}/eventol/static\n\nCMD [\"tail\", \"-f\", \"/dev/null\"]\n"
}