{
  "startTime": 1674254579118,
  "endTime": 1674254579935,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic as base\n\n# Tweak shell.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Installation helper.\nRUN printf '#!/bin/sh\\n\\\nexport DEBIAN_FRONTEND=noninteractive; \\\nset -x; \\\napt-get update -qq && \\\nif [ \"x$1\" = \"x--repo\" ]; \\\nthen \\\n  \"$0\" software-properties-common && \\\n  apt-add-repository -y \"$2\" && \\\n  apt-get -qq update && \\\n  apt-get -qq remove --auto-remove software-properties-common && \\\n  shift 2; \\\nfi && \\\nif [ -z \"$1\" ]; \\\nthen \\\n  apt-get -qq dist-upgrade --no-install-recommends --verbose-versions; \\\nelse \\\n  apt-get -qq install --no-install-recommends --verbose-versions \"$@\"; \\\nfi; \\\ncode=$?; \\\napt-get -qq clean; \\\nexit $code\\n\\\n' >install.sh && chmod +x install.sh\n\n# Update.\nRUN ./install.sh\n\n# Install some essentials...\nRUN ./install.sh \\\n      apt-utils \\\n      make \\\n      patch \\\n      wget \\\n      xz-utils \\\n      ;\n\n# Install a more recent toolchain.\nARG GCC_VERSION_MAJOR=\"9\"\nRUN ./install.sh --repo ppa:ubuntu-toolchain-r/test {gcc,g++}-$GCC_VERSION_MAJOR\nRUN for tool in g++ gcc gcov-dump gcov-tool gcov; \\\n    do \\\n      ln -s \"../../bin/$tool-$GCC_VERSION_MAJOR\" \"/usr/local/bin/$tool\"; \\\n      $tool --version; \\\n    done\n\n# Install OpenSSL dependencies.\nRUN ./install.sh \\\n      libkrb5-3 \\\n      libsctp1 \\\n      zlib1g \\\n      ;\n\n# Install Python dependencies.\nRUN ./install.sh \\\n      libbz2-1.0 \\\n      libdb5.3 \\\n      libffi6 \\\n      libgdbm5 \\\n      libgssapi-krb5-2 \\\n      liblzma5 \\\n      libncurses5 \\\n      libreadline7 \\\n      libsqlite3-0 \\\n      libuuid1 \\\n      zlib1g \\\n      ;\n\nARG JOBS=4\n\nFROM base AS python_install\n\n# Install OpenSSL build dependencies.\nRUN ./install.sh \\\n      perl \\\n      libkrb5-dev \\\n      libsctp-dev \\\n      zlib1g-dev \\\n      ;\n\n# Install a more recent version of OpenSSL.\nARG OPENSSL_VERSION=\"1.1.1k\"\nRUN wget --quiet \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"\nRUN tar xaf \"openssl-$OPENSSL_VERSION.tar.gz\" && rm \"openssl-$OPENSSL_VERSION.tar.gz\"\nWORKDIR \"openssl-$OPENSSL_VERSION\"\nRUN ./Configure \\\n      --openssldir=/etc/ssl \\\n      shared no-ssl3-method enable-ec_nistp_64_gcc_128 linux-x86_64 \\\n      \"-Wa,--noexecstack -Wall\" \\\n      && perl configdata.pm -d\nRUN make -j\"$JOBS\"\nARG RUN_OPENSSL_TESTS=\"no\"\nRUN if [ \"x$RUN_OPENSSL_TESTS\" = 'xyes' ]; then make test; fi\nRUN make install_sw\nRUN find /usr/local/lib -name '*.a' -o -name '*.so' -print0 | xargs -0 strip\nRUN strip /usr/local/bin/openssl\nWORKDIR ..\nRUN rm -rf \"openssl-$OPENSSL_VERSION\"*\nRUN ldconfig\n# Work around the braindead SSL detection code in Python...\nRUN mkdir /usr/local/ssl && \\\n      ln -s ../include /usr/local/ssl/include && \\\n      ln -s ../lib64 /usr/local/ssl/lib\n\n# Install Python from Github Actions @setup-python.\nARG GITHUB_ACTIONS_PYTHON=\"3.9.7-116077/python-3.9.7-linux-18.04-x64.tar.gz\"\nRUN wget --quiet \"https://github.com/actions/python-versions/releases/download/$GITHUB_ACTIONS_PYTHON\"\nRUN tar xaf \"${GITHUB_ACTIONS_PYTHON##*/}\" -C /usr/local\nRUN rm \"${GITHUB_ACTIONS_PYTHON##*/}\"\nRUN rm /usr/local/Python-*.tgz\nRUN ln -s python3 /usr/local/bin/python\nRUN ln -s pip3 /usr/local/bin/pip\nrun strip /usr/local/lib/libpython*.so\nrun find /usr/local/lib/python3* -name '*.so' -print0 | xargs -0 strip\nRUN ldconfig\n# But does it work?\nARG RUN_PYTHON_TESTS=\"no\"\nRUN if [ \"x$RUN_PYTHON_TESTS\" = 'xyes' ]; then \\\n      python -m test \\\n      --multiprocess \"$JOBS\" \\\n      -uall,-audio,-cpu,-gui,-largefile,-network,-urlfetch \\\n      -x test_tk \\\n      -x test_gdb \\\n      -x test_clinic \\\n      ; fi\n\nFROM base\nCOPY --from=python_install /usr/local /usr/local/\nRUN ldconfig\n\n# Install AppImage tools dependencies.\nRUN ./install.sh \\\n      file \\\n      libp11-kit0 \\\n      ;\n\n# Install log_dbus dependencies.\n# Note: we install the `libdbus-1-dev` because the `libdbus-1.so`\n# symlink is not part of the base `libdbus-1-3` packageâ€¦\nRUN ./install.sh \\\n      libdbus-1-dev \\\n      ;\n\n# Install PyQt5 (minimal) dependencies.\nRUN ./install.sh \\\n      libasound2 \\\n      libegl1-mesa \\\n      libfontconfig1 \\\n      libfreetype6 \\\n      libgl1-mesa-glx \\\n      libnss3 \\\n      libxcomposite1 \\\n      libxcursor1 \\\n      libxi6 \\\n      libxrandr2 \\\n      libxtst6 \\\n      ;\n\n# vim: sw=2\n"
}