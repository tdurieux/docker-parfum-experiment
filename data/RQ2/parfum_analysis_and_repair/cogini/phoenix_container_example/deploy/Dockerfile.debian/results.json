{
  "startTime": 1674215462541,
  "endTime": 1674215463837,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 375,
        "lineEnd": 375,
        "columnStart": 8,
        "columnEnd": 109
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 110,
        "lineEnd": 127,
        "columnStart": 8,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 361,
        "lineEnd": 373,
        "columnStart": 8,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 482,
        "lineEnd": 496,
        "columnStart": 8,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 626,
        "lineEnd": 630,
        "columnStart": 8,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 456,
        "lineEnd": 470,
        "columnStart": 8,
        "columnEnd": 21
      }
    }
  ],
  "repairedDockerfile": "#\n# Build app\n#\n# It takes advantage of caching and parallel build support in BuildKit.\n#\n# The \"syntax\" line must be the first thing in the file, as it enables the\n# new syntax for caching, etc. see\n# https://docs.docker.com/develop/develop-images/build_enhancements/\n# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md\n\nARG ELIXIR_VERSION=1.13.3\n# ARG OTP_VERSION=23.3.4\nARG OTP_VERSION=24.3.1\n# ARG NODE_VERSION=14.4\nARG NODE_VERSION=16.14.1\n# ARG NODE_VERSION=lts\n\nARG AWS_CLI_VERSION=2.0.61\n\n# ARG ELIXIR_DEBIAN_VERSION=buster-20210208\nARG ELIXIR_DEBIAN_VERSION=bullseye-20210902-slim\n\n# https://docker.debian.net/\n# https://hub.docker.com/_/debian\n# ARG DEBIAN_VERSION=buster-slim\nARG DEBIAN_VERSION=bullseye-slim\n\n# Docker registry for internal images, e.g. 123.dkr.ecr.ap-northeast-1.amazonaws.com/\n# If blank, docker.io will be used. If specified, should have a trailing slash.\nARG REGISTRY=\"\"\n# Registry for public base images, e.g. debian or alpine.\n# Public images may be mirrored into the private registry, with e.g. Skopeo\nARG PUBLIC_REGISTRY=$REGISTRY\n\nARG BUILD_IMAGE_NAME=${PUBLIC_REGISTRY}hexpm/elixir\nARG BUILD_IMAGE_TAG=${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${ELIXIR_DEBIAN_VERSION}\n\nARG DEPLOY_IMAGE_NAME=${PUBLIC_REGISTRY}debian\nARG DEPLOY_IMAGE_TAG=$DEBIAN_VERSION\n\nARG INSTALL_IMAGE_NAME=$DEPLOY_IMAGE_NAME\nARG INSTALL_IMAGE_TAG=$DEPLOY_IMAGE_TAG\n\n# App name, used to name directories\nARG APP_NAME=app\n\n# Dir where app is installed\nARG APP_DIR=/app\n\n# OS user for app to run under\n# nonroot:x:65532:65532:nonroot:/home/nonroot:/usr/sbin/nologin\n# nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nARG APP_USER=nonroot\n# OS group that app runs under\nARG APP_GROUP=$APP_USER\n# OS numeric user and group id\nARG APP_USER_ID=65532\nARG APP_GROUP_ID=$APP_USER_ID\n\nARG LANG=C.UTF-8\n\n# ARG http_proxy\n# ARG https_proxy=$http_proxy\n\n# Build cache dirs\n# ARG MIX_HOME=/opt/mix\n# ARG HEX_HOME=/opt/hex\n# ARG XDG_CACHE_HOME=/opt/cache\n\n# Elixir release env to build\nARG MIX_ENV=prod\n\n# Name of Elixir release\nARG RELEASE=prod\n# This should match mix.exs, e.g.\n# defp releases do\n#   [\n#     prod: [\n#       include_executables_for: [:unix],\n#     ],\n#   ]\n# end\n\n# App listen port\nARG APP_PORT=4000\n\n# Create build base image with OS dependencies\nFROM ${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG} AS build-os-deps\n    # ARG http_proxy\n    # ARG https_proxy\n\n    ARG NODE_VERSION\n\n    # Configure apt caching for use with BuildKit.\n    # The default Debian Docker image has special apt config to clear caches, but if\n    # we are using --mount=type=cache, then we want it.\n    # https://github.com/debuerreotype/debuerreotype/blob/master/scripts/debuerreotype-minimizing-config\n    RUN set -exu && \\\n        rm -f /etc/apt/apt.conf.d/docker-clean && \\\n        echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache && \\\n        echo 'Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/99use-gzip-compression\n\n    # Install tools and libraries to build binary libraries\n    # Not necessary for a minimal Phoenix app, but likely needed\n    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \\\n        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \\\n        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \\\n        set -ex && \\\n        apt-get update -qq && \\\n        DEBIAN_FRONTEND=noninteractive \\\n        apt-get -y install -y -qq --no-install-recommends \\\n            # Enable installation of packages over https\n            apt-transport-https \\\n            build-essential \\\n            # Enable app to make outbound SSL calls.\n            ca-certificates \\\n            curl \\\n            git \\\n            gnupg \\\n            gnupg-agent \\\n            jq \\\n            # software-properties-common \\\n            lsb-release \\\n            # Support ssl in container, as opposed to load balancer\n            openssl \\\n\n            # Install default nodejs\n            nodejs \\\n\n            # Install default Postgres\n            # libpq-dev \\\n            # postgresql-client \\\n            && \\\n\n        # Install node using n\n        # curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n && \\\n        # chmod +x /usr/local/bin/n && \\\n        # # Install lts version\n        # # n lts && \\\n        # # Install specific version\n        # n \"$NODE_VERSION\" && \\\n        # rm /usr/local/bin/n && \\\n\n        # Install latest Postgres from postgres.org repo\n        # curl -sL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/trusted.gpg.d/postgresql-ACCC4CF8.asc && \\\n        # echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main\" | tee /etc/apt/sources.list.d/pgdg.list && \\\n        # echo \"Package: *\\nPin: release o=apt.postgresql.org\\nPin-Priority: 500\\n\" | tee /etc/apt/preferences.d/pgdg.pref && \\\n        # apt-get update -qq && \\\n        # apt-get -y install -y -qq --no-install-recommends libpq-dev postgresql-client &&\n\n        # Install Microsoft ODBC Driver for SQL Server\n        # curl -sL https://packages.microsoft.com/keys/microsoft.asc -o /etc/apt/trusted.gpg.d/microsoft.asc && \\\n        # curl -s https://packages.microsoft.com/config/debian/11/prod.list -o /etc/apt/sources.list.d/mssql-release.list && \\\n        # export ACCEPT_EULA=Y && \\\n        # apt-get -qq update -qq && \\\n        # apt-get -y install -y -qq --no-install-recommends msodbcsql17 && \\\n\n        # Install specific version of mysql from MySQL repo\n        # mysql-5.7 is not available for Debian Bullseye (11), only Buster (10)\n        # The key id comes from this page: https://dev.mysql.com/doc/refman/5.7/en/checking-gpg-signature.html\n        # # apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3A79BD29\n        # #   gpg: key 3A79BD29: public key \"MySQL Release Engineering <mysql-build@oss.oracle.com>\" imported\n        # export APT_KEY='859BE8D7C586F538430B19C2467B942D3A79BD29' && \\\n        # export GPGHOME=\"$(mktemp -d)\" && \\\n        # gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$APT_KEY\" && \\\n        # mkdir -p /etc/apt/keyrings && \\\n        # gpg --batch --export \"$APT_KEY\" > /etc/apt/keyrings/mysql.gpg && \\\n        # gpgconf --kill all && \\\n        # rm -rf \"$GPGHOME\" && \\\n        # rm -rf \"${HOME}/.gnupg\" && \\\n        # echo \"deb [ signed-by=/etc/apt/keyrings/mysql.gpg ] http://repo.mysql.com/apt/debian/ $(lsb_release -sc) mysql-5.7\" | tee /etc/apt/sources.list.d/mysql.list && \\\n        # echo \"Package: *\\nPin: release o=repo.mysql.com\\nPin-Priority: 500\\n\" | tee /etc/apt/preferences.d/mysql.pref && \\\n        # apt-get update -qq && \\\n        # DEBIAN_FRONTEND=noninteractive \\\n        # apt-get -y install -y -qq --no-install-recommends libmysqlclient-dev mysql-client && \\\n\n        # https://www.networkworld.com/article/3453032/cleaning-up-with-apt-get.html\n        # https://manpages.ubuntu.com/manpages/jammy/man8/apt-get.8.html\n\n        # Remove packages installed temporarily. Removes everything related to\n        # packages, including the configuration files, and packages\n        # automatically installed because a package required them but, with the\n        # other packages removed, are no longer needed.\n        # apt-get purge -y --auto-remove curl && \\\n\n        # https://www.networkworld.com/article/3453032/cleaning-up-with-apt-get.html\n        # https://manpages.ubuntu.com/manpages/jammy/man8/apt-get.8.html\n\n        # Delete local repository of retrieved package files in /var/cache/apt/archives\n        # This is handled automatically by /etc/apt/apt.conf.d/docker-clean\n        # Use this if not running --mount=type=cache.\n        # apt-get clean && \\\n        && rm -rf /var/lib/apt/lists/*;\n\n# Get Elixir deps\nFROM build-os-deps AS build-deps-get\n    # ARG http_proxy\n    # ARG https_proxy\n    ARG LANG\n    ARG MIX_ENV\n    ARG APP_DIR\n\n    WORKDIR $APP_DIR\n\n    # Get Elixir app deps\n    COPY config ./config\n    COPY mix.exs .\n    COPY mix.lock .\n\n    # Install build tools and get app deps\n    # RUN --mount=type=cache,id=hex,target=/opt/hex,sharing=locked \\\n    #     # --mount=type=cache,id=rebar,target=~/.cache/rebar3,sharing=locked \\\n    RUN mix do local.rebar --force, local.hex --force\n    RUN mix deps.get\n\n    # RUN --mount=type=cache,id=hex,target=/opt/hex,sharing=locked \\\n    #    # --mount=type=cache,target=~/.cache/rebar3,sharing=locked \\\n    RUN mix esbuild.install\n\n# Create base image for tests\nFROM build-deps-get AS test-image\n    ARG LANG\n    ARG APP_DIR\n\n    ENV LANG=$LANG \\\n        HOME=$APP_DIR \\\n        MIX_ENV=test\n\n    # ARG MIX_HOME\n    # ARG HEX_HOME\n    # ARG XDG_CACHE_HOME\n    # ENV MIX_HOME=$MIX_HOME \\\n    #     HEX_HOME=$HEX_HOME \\\n    #     XDG_CACHE_HOME=$XDG_CACHE_HOME\n\n    WORKDIR $APP_DIR\n\n    # Compile deps separately from app, improving Docker caching\n    # RUN --mount=type=cache,id=hex,target=/opt/hex,sharing=locked \\\n    #     # --mount=type=cache,id=rebar,target=~/.cache/rebar3,sharing=locked \\\n    RUN mix do local.rebar --force, local.hex --force\n    RUN mix deps.compile\n\n    # COPY --if-exists coveralls.json .formatter.exs .credo.exs dialyzer-ignore ./\n    COPY .formatter.exs ./\n\n    # Non-umbrella\n    COPY lib ./lib\n    COPY priv ./priv\n    COPY test ./test\n    COPY bin ./bin\n\n    # Umbrella\n    # COPY apps ./apps\n    # COPY priv ./priv\n\n    # RUN --mount=type=cache,id=hex,target=/opt/hex,sharing=locked \\\n    #    # --mount=type=cache,id=rebar,target=~/.cache/rebar3,sharing=locked \\\n    RUN mix compile --warnings-as-errors\n\n    # For umbrella, using `mix cmd` ensures each app is compiled in\n    # isolation https://github.com/elixir-lang/elixir/issues/9407\n    # RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \\\n    #     --mount=type=cache,target=~/.cache/rebar3,sharing=locked \\\n    #     mix cmd mix compile --warnings-as-errors\n\n# Create Elixir release\nFROM build-deps-get AS deploy-release\n    ARG APP_DIR\n    ARG RELEASE\n\n    ENV MIX_ENV=prod\n\n    WORKDIR $APP_DIR\n\n    # Doing \"mix do compile, phx.digest, release\" in a single stage is worse,\n    # because a single line of code changed causes a complete recompile.\n    # With the stages separated most of the compilation is cached.\n\n    # Compile deps separately from application for better caching\n    # RUN --mount=type=cache,id=hex,target=/opt/hex,sharing=locked \\\n    #    # --mount=type=cache,id=rebar,target=~/.cache/rebar3,sharing=locked \\\n    RUN mix deps.compile\n\n    # Compile assets the old way\n    # WORKDIR /app/assets\n    #\n    # COPY assets/package.json assets/package-lock.json ./\n    #\n    # # Cache npm cache directory as type=cache\n    # RUN --mount=type=cache,target=~/.npm,sharing=locked \\\n    #     npm --prefer-offline --no-audit --progress=false --loglevel=error ci\n    #\n    # COPY assets ./\n    #\n    # RUN --mount=type=cache,target=~/.npm,sharing=locked \\\n    #     npm run deploy\n    #\n    # Generate assets the really old way\n    # RUN --mount=type=cache,target=~/.npm,sharing=locked \\\n    #   npm install && \\\n    #   node node_modules/webpack/bin/webpack.js --mode production\n\n    # Build JS and CS with esbuild\n    COPY assets ./assets\n    COPY priv ./priv\n\n    # mix.exs: \"assets.deploy\": [\"esbuild default --minify\", \"phx.digest\"]\n    # https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Digest.html\n    # RUN --mount=type=cache,id=hex,target=/opt/hex,sharing=locked \\\n    #    # --mount=type=cache,id=rebar,target=~/.cache/rebar3,sharing=locked \\\n    RUN mix assets.deploy\n\n    # Non-umbrella\n    COPY lib ./lib\n\n    # Umbrella\n    # COPY apps ./apps\n\n    # RUN --mount=type=cache,id=hex,target=/opt/hex,sharing=locked \\\n    #    # --mount=type=cache,id=rebar,target=~/.cache/rebar3,sharing=locked \\\n    RUN mix compile --warnings-as-errors\n\n    # Build release\n    COPY rel ./rel\n    # RUN --mount=type=cache,id=hex,target=/opt/hex,sharing=locked \\\n    #    # --mount=type=cache,id=rebar,target=~/.cache/rebar3,sharing=locked \\\n    RUN mix release \"$RELEASE\"\n\n# Create staging image for binaries which are copied into final deploy image\nFROM ${INSTALL_IMAGE_NAME}:${INSTALL_IMAGE_TAG} AS deploy-install\n    # ARG AWS_CLI_VERSION\n\n    # Configure apt caching for use with BuildKit.\n    # The default Debian Docker image has special config to clear caches.\n    # If we are using --mount=type=cache, then we want it to preserve cached files.\n    RUN set -exu && \\\n        rm -f /etc/apt/apt.conf.d/docker-clean && \\\n        echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache && \\\n        echo 'Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/99use-gzip-compression\n\n    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \\\n        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \\\n        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \\\n        set -exu && \\\n        apt-get update -qq && \\\n        DEBIAN_FRONTEND=noninteractive \\\n        apt-get -y install -y -qq --no-install-recommends \\\n            # apt-transport-https \\\n            ca-certificates \\\n            curl \\\n            gnupg-agent \\\n            # software-properties-common \\\n            gnupg \\\n            unzip \\\n            lsb-release \\\n            locales \\\n\n            # Needed \\\n            li \\\n                -f & \\\n           \n        curl -sL https://a ua \\\n        printf \"deb https://aquasecurity.github.io/trivy-repo/d b \\\n        apt-get update -qq && \\\n        apt-get -y install -y -qq --no-install-recommends trivy && \\\n\n        # curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin && \\\n\n        # Generate locales specified in /etc/locale.gen\n        locale-gen && \\\n\n        # Remove packages installed temporarily. Removes everything related to\n        # packages, including the configuration files, and packages\n        # automatically installed because a package required them but, with the\n        # other packages removed, are no longer needed.\n        # apt-get purge -y --auto-remove curl && \\\n\n        # https://www.networkworld.com/article/3453032/cleaning-up-with-apt-get.html\n        # https://manpages.ubuntu.com/manpages/jammy/man8/apt-get.8.html\n\n        # Delete local repository of retrieved package files in /var/cache/apt/archives\n        # This is handled automatically by /etc/apt/apt.conf.d/docker-clean\n        # Use this if not running --mount=type=cache.\n        # apt-get clean && \\\n\n        # Delete info on installed packages. This saves some space, but it can\n        # be useful to have them as  r \\\n        # rm -rf /var/lib/dpkg && \\ && rm -rf /var/lib/apt/lists/*;\n\n    # If LANG=C.UTF-8 is not enough, build full featured locale\n    # RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\n    # ENV LANG en_US.utf8\n\n    # Install AWS CLI v2 from binary package\n    # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\n    # https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html\n    # RUN set -ex && \\\n    #     curl -sSfL \"https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m)-${AWS_CLI_VERSION}.zip\" -o \"awscliv2.zip\" && \\\n    #     unzip -q awscliv2.zip && \\\n    #     ./aws/install && \\\n    #     rm -rf ./aws && \\\n    #     rm awscliv2.zip\n\n# Create base image for deploy, with everything but the code release\nFROM ${DEPLOY_IMAGE_NAME}:${DEPLOY_IMAGE_TAG} AS deploy-base\n    ARG LANG\n    ARG APP_USER\n    ARG APP_GROUP\n    ARG APP_USER_ID\n    ARG APP_GROUP_ID\n\n    ARG MIX_ENV=prod\n    ARG RELEASE\n\n    # COPY --from=deploy-install /usr/lib/locale/C.UTF-8 /usr/lib/locale/C.UTF-8\n\n    ENV LANG=$LANG\n\n    # Create OS user and group to run app under\n    RUN if ! grep -q \"$APP_USER\" /etc/passwd; \\\n        then groupadd -g \"$APP_GROUP_ID\" \"$APP_GROUP\" && \\\n        useradd -l -u \"$APP_USER_ID\" -g \"$APP_GROUP\" -s /usr/sbin/nologin \"$APP_USER\" && \\\n        rm /var/log/lastlog && rm /var/log/faillog; fi\n\n    # Create app dirs\n    RUN mkdir -p \"/run/${APP_NAME}\" && \\\n        # Make dirs writable by app\n        chown -R \"${APP_USER}:${APP_GROUP}\" \\\n            # Needed for RELEASE_TMP\n            \"/run/${APP_NAME}\"\n\n    # Configure apt caching for use with BuildKit.\n    # The default Debian Docker image has special config to clear caches.\n    # If we are using --mount=type=cache, then we want it to preserve cached files.\n    RUN set -exu && \\\n        rm -f /etc/apt/apt.conf.d/docker-clean && \\\n        echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache && \\\n        echo 'Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/99use-gzip-compression\n\n    # If LANG=C.UTF-8 is not enough, build full featured locale\n    # RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \\\n    #     --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \\\n    #     set -exu && \\\n    #       apt-get update -qq && \\\n    #       DEBIAN_FRONTEND=noninteractive \\\n    #       apt-get -y install -y -qq --no-install-recommends locales && \\\n    #       localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n    #\n    # ENV LANG en_US.utf8\n\n    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \\\n        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \\\n        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \\\n        set -exu && \\\n        apt-get update -qq && \\\n        DEBIAN_FRONTEND=noninteractive \\\n        apt-get -y install -y -qq --no-install-recommends \\\n            # Enable installation of packages over https\n            # apt-transport-https \\\n            # Enable the app to make outbound SSL calls.\n            ca-certificates \\\n\n            # Allow app to listen on HTTPS. May not be needed if handled\n            # outside the application, e.g. in load balancer.\n            openssl \\\n\n            # tini is a minimal init which will reap zombie processes\n            # https://github.com/krallin/tini\n            # tini \\\n            # bind-utils \\\n\n            # Needed by Erlang VM\n            libtinfo6 \\\n\n            && \\\n\n        # Remove packages installed temporarily. Removes everything related to\n        # packages, including the configuration files, and packages\n        # automatically installed because a package required them but, with the\n        # other packages removed, are no longer needed.\n        # apt-get purge -y --auto-remove curl && \\\n\n        # https://www.networkworld.com/article/3453032/cleaning-up-with-apt-get.html\n        # https://manpages.ubuntu.com/manpages/jammy/man8/apt-get.8.html\n\n        # Delete local repository of retrieved package files in /var/cache/apt/archives\n        # This is handled automatically by /etc/apt/apt.conf.d/docker-clean\n        # Use this if not running --mount=type=cache.\n        # apt-get clean && \\\n\n        # Delete info on installed packages. This saves some space, but it can\n        # be useful to have them as  r \\\n        # rm -rf /var/lib/dpkg && \\ && rm -rf /var/lib/apt/lists/*;\n\n# Create deploy image with vulnerability scanners\n# TODO: this is Earthly\nFROM deploy-base AS deploy-scan\n    COPY --from=deploy-install /usr/local/bin/trivy /usr/local/bin/trivy\n    COPY --from=deploy-install /usr/local/share/trivy/templates /usr/local/share/trivy/templates\n    # COPY --from=deploy-install /usr/local/bin/grype /usr/local/bin/grype\n\n# Create final app image which gets deployed\nFROM deploy-base AS deploy\n    ARG APP_DIR\n    ARG APP_NAME\n    ARG APP_USER\n    ARG APP_GROUP\n\n    ARG MIX_ENV=prod\n    ARG RELEASE\n\n    ARG APP_PORT\n\n    # Set environment vars used by the app\n    # SECRET_KEY_BASE and DATABASE_URL env vars should be set when running the application\n    # maybe set COOKIE and other things\n    ENV HOME=$APP_DIR \\\n        PORT=$APP_PORT \\\n        PHX_SERVER=true \\\n        RELEASE=$RELEASE \\\n        RELEASE_TMP=\"/run/${APP_NAME}\"\n\n    # USER $APP_USER\n\n    # Setting WORKDIR after USER makes directory be owned by the user.\n    # Setting it before makes it owned by root, which is more secure.\n    # The app needs to be able to write to a tmp directory on startup, which by\n    # default is under the release. This can be changed by setting RELEASE_TMP to\n    # /tmp or, more securely, /run/foo\n    WORKDIR $APP_DIR\n\n    # When using a startup script, copy to /app/bin\n    # COPY bin ./bin\n\n    USER $APP_USER\n\n    # Chown files while copying. Running \"RUN chown -R app:app /app\"\n    # adds an extra layer which is about 10Mb, a huge difference if the\n    # app image is around 20Mb.\n\n    # TODO: For more security, change specific files to have group read/execute\n    # permissions while leaving them owned by root\n\n    # When using a startup script, unpack release under \"/app/current\" dir\n    # WORKDIR $APP_DIR/current\n\n    COPY --from=deploy-release --chown=\"$APP_USER:$APP_GROUP\" \"/app/_build/${MIX_ENV}/rel/${RELEASE}\" ./\n\n    EXPOSE $APP_PORT\n\n    # \"bin\" is the directory under the unpacked release, and \"prod\" is the name\n    # of the release\n    ENTRYPOINT [\"bin/prod\"]\n\n    # Run under init to avoid zombie processes\n    # https://github.com/krallin/tini\n    # ENTRYPOINT [\"/sbin/tini\", \"--\", \"bin/prod\"]\n\n    # Run app in foreground\n    CMD [\"start\"]\n\n    # Run via startup script\n    # CMD [\"/app/bin/start-docker\"]\n\n# Dev image which mounts code from local filesystem\n# FROM ${REGISTRY}${ELIXIR_IMAGE_NAME}:${ELIXIR_IMAGE_TAG} AS dev\nFROM build-os-deps AS dev\n    # ARG http_proxy\n    # ARG https_proxy=$http_proxy\n    ARG LANG\n    ARG APP_NAME\n    ARG APP_DIR\n    ARG APP_USER\n    ARG APP_GROUP\n\n    ARG APP_PORT\n    ARG MIX_ENV\n\n    # Set environment vars used by the app\n    ENV LANG=$LANG \\\n        HOME=$APP_DIR \\\n        PORT=$APP_PORT\n\n    RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \\\n        --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \\\n        --mount=type=cache,id=debconf,target=/var/cache/debconf,sharing=locked \\\n        set -exu && \\\n        apt-get update -qq && \\\n        DEBIAN_FRONTEND=noninteractive \\\n        apt-get -y install -y -qq --no-install-recommends \\\n            inotify-tools \\\n            ssh \\\n            sudo \\\n            && \\\n\n        # https://www.networkworld.com/article/3453032/cleaning-up-with-apt-get.html\n        # https://manpages.ubuntu.com/manpages/jammy/man8/apt-get.8.html\n\n        # Remove packages installed temporarily. Removes everything related to\n        # packages, including the configuration files, and packages\n        # automatically installed because a package required them but, with the\n        # other packages removed, are no longer needed.\n        # apt-get purge -y --auto-remove curl && \\\n\n        # Delete local repository of retrieved package files in /var/cache/apt/archives\n        # This is handled automatically by /etc/apt/apt.conf.d/docker-clean\n        # Use this if not running --mount=type=cache.\n        # apt-get clean && \\\n\n        # Delete info on installed packages. This saves some space, but it can\n        # be useful to have them as a record of what was installed, e.g. for auditing.\n        # rm -rf /var/lib/dpkg && \\\n\n        # Delete debconf data files to save some space\n        # rm -rf /var/cache/debconf & \\\n        && rm -rf /var/lib/apt/lists/*;\n\n    USER $APP_USER\n\n    WORKDIR $APP_DIR\n\n    # Instead of copying sources, could use bind mount, e.g.\n    # RUN --mount=target=.\n    # see https://adoptingerlang.org/docs/production/docker/#efficient-caching\n\n    RUN --mount=type=cache,target=~/.hex/packages/hexpm,sharing=locked \\\n        --mount=type=cache,target=~/.cache/rebar3,sharing=locked \\\n        mix do local.rebar --force, local.hex --force\n\n    EXPOSE $APP_PORT\n\n    CMD [ \"sleep\", \"infinity\" ]\n\n# Copy build artifacts to host\nFROM scratch as artifacts\n    ARG MIX_ENV\n    ARG RELEASE\n\n    COPY --from=deploy-release \"/app/_build/${MIX_ENV}/rel/${RELEASE}\" /release\n    COPY --from=deploy-release /app/priv/static /static\n\n# Default target\nFROM deploy\n"
}