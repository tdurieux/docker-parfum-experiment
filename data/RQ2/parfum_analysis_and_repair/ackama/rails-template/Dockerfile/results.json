{
  "startTime": 1674219486669,
  "endTime": 1674219487460,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 38,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "# Pull from the latest Ruby version\n# We don't use slim or alpine variants as we invariably need build tooling, which\n# the base image includes for us.\nFROM ruby\n\n# Avoid issues with file encoding in Ruby by setting these two environment variables\n# This tells the underlying OS to expect UTF-8 encoding (e.g. UTF-8 encoding in the US language)\nENV LANG=C \\\n    LC_ALL=C.UTF-8 \\\n    PORT=3000\n\n\n# Curl is installed to make it possible to set up PPAs below - it is\n# removed further down.\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;\n\n# Install Node.js PPA for asset management\n# As of writing, Node 10 is the most recent LTS.\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash\n\n# Install Google Chrome PPA. Chrome is required for headless system tests.\nRUN curl -f -q https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\nRUN sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list'\n\n# Install system dependencies, and remove curl now that we have PPAs set up\n# We also clean out system files we don't need to reduce image size:\n#   * /usr/share/man - manual pages\n#   * /usr/share/locales - we don't need to support multiple languages at the OS level\n#   * /var/cache/apt/arhives - we don't need to hold onto deb packages once they're installed\nRUN apt-get update -qq &&\\\n    apt-get upgrade -y &&\\\n    apt-get install -y google-chrome-stable libpq-dev nodejs --no-install-recommends &&\\\n    apt-get purge -y curl &&\\\n    apt-get autoremove -y &&\\\n    apt-get clean -y &&\\\n    rm -rf /var/lib/apt/lists/* \\\n           /usr/share/man \\\n           /usr/share/locales \\\n           /var/cache/apt/archives\n\n# Use NPM to install Yarn.\nRUN npm install -g yarn && npm cache clean --force;\n\n# Install gem and NPM dependencies. These are baked into the image so the image can run\n# standalone provided valid configuration. When running in docker-compose, these\n# dependencies are stored in a volume so the image does not need rebuilding when the\n# dependencies are changed.\nRUN mkdir -p /usr/src/app/node_modules && rm -rf /usr/src/app/node_modules\n\n# Create a non-privileged deploy user, and add all application code as this user.\nRUN adduser --disabled-password --gecos \"\" deploy && chown -R deploy:deploy /usr/src/app\nVOLUME /usr/src/app/node_modules\nVOLUME /usr/local/bundle\nUSER deploy\n\n# Add just the dependency manifests before installing.\n# This reduces the chance that bundler or NPM will get a cold cache because some kind of application file changed.\nADD Gemfile* package.json yarn.lock /usr/src/app/\nWORKDIR /usr/src/app\nRUN bundle check || bundle install && \\\n    yarn install --frozen-lockfile && yarn cache clean;\n\n# Add all application code to /usr/src/app and set this as the working directory\n# of the container\nADD . /usr/src/app\n\nEXPOSE $PORT\n\n# Default command is to start a Puma server\nCMD bundle exec rails server --binding=0.0.0.0\n"
}