diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ackama/rails-template/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ackama/rails-template/Dockerfile/repaired.Dockerfile
index a450787..c8a2124 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ackama/rails-template/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ackama/rails-template/Dockerfile/repaired.Dockerfile
@@ -12,15 +12,15 @@ ENV LANG=C \
 
 # Curl is installed to make it possible to set up PPAs below - it is
 # removed further down.
-RUN apt-get update -qq &&\
-    apt-get install -y curl
+RUN apt-get update -qq && \
+    apt-get install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;
 
 # Install Node.js PPA for asset management
 # As of writing, Node 10 is the most recent LTS.
-RUN curl -sL https://deb.nodesource.com/setup_10.x | bash
+RUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash
 
 # Install Google Chrome PPA. Chrome is required for headless system tests.
-RUN curl -q https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
+RUN curl -f -q https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
 RUN sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
 
 # Install system dependencies, and remove curl now that we have PPAs set up
@@ -40,13 +40,13 @@ RUN apt-get update -qq &&\
            /var/cache/apt/archives
 
 # Use NPM to install Yarn.
-RUN npm install -g yarn
+RUN npm install -g yarn && npm cache clean --force;
 
 # Install gem and NPM dependencies. These are baked into the image so the image can run
 # standalone provided valid configuration. When running in docker-compose, these
 # dependencies are stored in a volume so the image does not need rebuilding when the
 # dependencies are changed.
-RUN mkdir -p /usr/src/app/node_modules
+RUN mkdir -p /usr/src/app/node_modules && rm -rf /usr/src/app/node_modules
 
 # Create a non-privileged deploy user, and add all application code as this user.
 RUN adduser --disabled-password --gecos "" deploy && chown -R deploy:deploy /usr/src/app
@@ -58,8 +58,8 @@ USER deploy
 # This reduces the chance that bundler or NPM will get a cold cache because some kind of application file changed.
 ADD Gemfile* package.json yarn.lock /usr/src/app/
 WORKDIR /usr/src/app
-RUN bundle check || bundle install &&\
-    yarn install --frozen-lockfile
+RUN bundle check || bundle install && \
+    yarn install --frozen-lockfile && yarn cache clean;
 
 # Add all application code to /usr/src/app and set this as the working directory
 # of the container