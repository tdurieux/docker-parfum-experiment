{
  "startTime": 1674252708142,
  "endTime": 1674252709852,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 135
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 172
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedDockerfile": "# This standalone container contains all of Resoto plus dependencies.\n# Including ArangoDB and Prometheus.\nARG UI_IMAGE_TAG=latest\nFROM ghcr.io/someengineering/resoto-ui:${UI_IMAGE_TAG} as resoto-ui-env\n\nFROM phusion/baseimage:focal-1.0.0 as build-env\nENV DEBIAN_FRONTEND=noninteractive\nARG TESTS\nARG SOURCE_COMMIT\nARG PYTHON_VERSION=3.10.4\nARG PYPY_VERSION=7.3.9\nARG ARANGODB_VERSION=3.8.4\nARG PROMETHEUS_VERSION=2.35.0\n\nENV PATH=/usr/local/db/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nCOPY --from=resoto-ui-env /usr/local/resoto/ui /usr/local/resoto/ui\n# Install Build dependencies\nRUN apt-get update\nRUN apt-get -y dist-upgrade\nRUN apt-get -y --no-install-recommends install apt-utils && rm -rf /var/lib/apt/lists/*;\nRUN apt-get -y --no-install-recommends install \\\n        build-essential \\\n        git \\\n        curl \\\n        unzip \\\n        zlib1g-dev \\\n        libncurses5-dev \\\n        libgdbm-dev \\\n        libgdbm-compat-dev \\\n        libnss3-dev \\\n        libreadline-dev \\\n        libsqlite3-dev \\\n        tk-dev \\\n        lzma \\\n        lzma-dev \\\n        liblzma-dev \\\n        uuid-dev \\\n        libbz2-dev \\\n        rustc \\\n        shellcheck \\\n        findutils \\\n        libtool \\\n        automake \\\n        autoconf \\\n        libffi-dev \\\n        libssl-dev \\\n        cargo \\\n        linux-headers-generic && rm -rf /var/lib/apt/lists/*;\n\n# Download and install ArangoDB (graphdb)\nWORKDIR /usr/local/db\nRUN curl -f -L -o /tmp/arangodb.tar.gz https://download.arangodb.com/arangodb38/Community/Linux/arangodb3-linux-${ARANGODB_VERSION}.tar.gz\nRUN tar xzvf /tmp/arangodb.tar.gz --strip-components=1 -C /usr/local/db && rm /tmp/arangodb.tar.gz\n\n# Download and install Prometheus (tsdb)\nWORKDIR /usr/local/tsdb\nRUN curl -f -L -o /tmp/prometheus.tar.gz https://github.com/prometheus/prometheus/releases/download/v${PROMETHEUS_VERSION}/prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\nRUN tar xzvf /tmp/prometheus.tar.gz --strip-components=1 -C /usr/local/tsdb && rm /tmp/prometheus.tar.gz\nCOPY docker/prometheus.yml /usr/local/tsdb/prometheus.yml\n\n# Download and install CPython\nWORKDIR /build/python\nRUN curl -f -L -o /tmp/python.tar.gz https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz\nRUN tar xzvf /tmp/python.tar.gz --strip-components=1 -C /build/python && rm /tmp/python.tar.gz\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations --prefix /usr/local/python\nRUN make -j 12\nRUN make install\nRUN /usr/local/python/bin/python3 -m ensurepip\n\n# Download and install PyPy\nWORKDIR /build\nRUN mkdir -p /build/pypy\nRUN curl -f -L -o /tmp/pypy.tar.bz2 https://downloads.python.org/pypy/pypy3.9-v${PYPY_VERSION}-linux64.tar.bz2\nRUN tar xjvf /tmp/pypy.tar.bz2 --strip-components=1 -C /build/pypy && rm /tmp/pypy.tar.bz2\nRUN mv /build/pypy /usr/local/pypy\nRUN /usr/local/pypy/bin/pypy3 -m ensurepip\n\nWORKDIR /usr/local\nRUN /usr/local/python/bin/python3 -m venv resoto-venv-python3\nRUN /usr/local/pypy/bin/pypy3 -m venv resoto-venv-pypy3\n\n# Prepare PyPy whl build env\nRUN mkdir -p /build-python\nRUN mkdir -p /build-pypy\n\n# Download and install Python test tools\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip install -U pip wheel tox flake8\nRUN . /usr/local/resoto-venv-pypy3/bin/activate && pypy3 -m pip install -U pip wheel\n\n# Build resotolib\nCOPY resotolib /usr/src/resotolib\nWORKDIR /usr/src/resotolib\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\nRUN . /usr/local/resoto-venv-pypy3/bin/activate && pypy3 -m pip wheel -w /build-pypy -f /build-pypy .\n\n# Build resotocore\nCOPY resotocore /usr/src/resotocore\nWORKDIR /usr/src/resotocore\n#RUN if [ \"X${TESTS:-false}\" = Xtrue ]; then nohup bash -c \"/usr/local/db/bin/arangod --database.directory /tmp --server.endpoint tcp://127.0.0.1:8529 --database.password root &\"; sleep 5; tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\nRUN . /usr/local/resoto-venv-pypy3/bin/activate && pypy3 -m pip wheel -w /build-pypy -f /build-pypy .\n\n# Build resotoworker\nCOPY resotoworker /usr/src/resotoworker\nWORKDIR /usr/src/resotoworker\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\n\n# Build resotometrics\nCOPY resotometrics /usr/src/resotometrics\nWORKDIR /usr/src/resotometrics\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\n\n# Build resotoshell\nCOPY resotoshell /usr/src/resotoshell\nWORKDIR /usr/src/resotoshell\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\n\n# Build resoto plugins\nCOPY plugins /usr/src/plugins\nWORKDIR /usr/src\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && find plugins/ -name tox.ini | while read toxini; do cd $(dirname \"$toxini\") && tox && cd - || exit 1; done; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && find plugins/ -maxdepth 1 -mindepth 1 -type d -print0 | xargs -0 python -m pip wheel -w /build-python -f /build-python\n\n# Workaround until cattrs 22.2.0 is released\nRUN rm -f /build-python/cattrs-22.2.0.dev0-py3-none-any.whl /build-pypy/cattrs-22.2.0.dev0-py3-none-any.whl\n\n# Install all wheels\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip install -f /build-python /build-python/*.whl\nRUN . /usr/local/resoto-venv-pypy3/bin/activate && pypy3 -m pip install -f /build-pypy /build-pypy/*.whl\n\n# Copy image config and startup files\nWORKDIR /usr/src/resoto\nCOPY docker/service.in /usr/local/etc/service.in\nCOPY docker/defaults /usr/local/etc/resoto/defaults\nCOPY docker/common /usr/local/etc/resoto/common\nCOPY docker/argsdispatcher /usr/local/bin/argsdispatcher\nCOPY docker/bootstrap /usr/local/sbin/bootstrap\nCOPY docker/bootstrap-graphdb /usr/local/sbin/bootstrap-graphdb\nCOPY docker/startup /usr/local/bin/startup\nCOPY docker/resh-shim /usr/local/bin/resh-shim\nRUN chmod 755 /usr/local/bin/startup \\\n    /usr/local/bin/resh-shim \\\n    /usr/local/sbin/bootstrap \\\n    /usr/local/sbin/bootstrap-graphdb\nRUN if [ \"${TESTS:-false}\" = true ]; then \\\n        shellcheck -a -x -s bash -e SC2034 \\\n            /usr/local/sbin/bootstrap \\\n            /usr/local/bin/startup \\\n        ; \\\n    fi\nCOPY docker/dnsmasq.conf /usr/local/etc/dnsmasq.conf\nCOPY docker/syslog-ng.conf /usr/local/etc/syslog-ng.conf\nRUN echo \"${SOURCE_COMMIT:-unknown}\" > /usr/local/etc/git-commit.HEAD\n\n\n# Setup main image\nFROM phusion/baseimage:focal-1.0.0\nENV DEBIAN_FRONTEND=noninteractive\nENV LANG=\"en_US.UTF-8\"\nENV TERM=\"xterm-256color\"\nENV EDITOR=\"nano\"\nCOPY --from=build-env /usr/local /usr/local\nENV PATH=/usr/local/python/bin:/usr/local/pypy/bin:/usr/local/db/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nWORKDIR /\nRUN groupadd -g \"${PGID:-0}\" -o resoto \\\n    && useradd -g \"${PGID:-0}\" -u \"${PUID:-0}\" -o --create-home resoto \\\n    && apt-get update \\\n    && apt-get -y --no-install-recommends install apt-utils \\\n    && apt-get -y dist-upgrade \\\n    && apt-get -y --no-install-recommends install \\\n        iproute2 \\\n        dnsmasq \\\n        libffi7 \\\n        openssl \\\n        procps \\\n        dateutils \\\n        curl \\\n        jq \\\n        cron \\\n        ca-certificates \\\n        openssh-client \\\n        locales \\\n        unzip \\\n        nano \\\n        nvi \\\n    && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n    && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n    && rm -f /bin/sh \\\n    && ln -s /bin/bash /bin/sh \\\n    && locale-gen \\\n    && ln -s /usr/local/bin/resh-shim /usr/bin/resh \\\n    && mv -f /usr/local/etc/syslog-ng.conf /etc/syslog-ng/syslog-ng.conf \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nEXPOSE 8900 8529 9955 9956\nVOLUME [\"/data\"]\nENTRYPOINT [\"/usr/local/sbin/bootstrap\"]\n"
}