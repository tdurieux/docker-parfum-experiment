{
  "startTime": 1674246935660,
  "endTime": 1674246938024,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n# This Dockerfile was generated from the template at distribution/src/docker/Dockerfile\n#\n# Beginning of multi stage Dockerfile\n################################################################################\n<% /*\n  This file is passed through Groovy's SimpleTemplateEngine, so dollars and backslashes\n  have to be escaped in order for them to appear in the final Dockerfile. You\n  can also comment out blocks, like this one. See:\n\n  https://docs.groovy-lang.org/latest/html/api/groovy/text/SimpleTemplateEngine.html\n\n  We use control-flow tags in this file to conditionally render the content. The\n  layout/presentation here has been adjusted so that it looks reasonable when rendered,\n  at the slight expense of how it looks here.\n*/ %>\n################################################################################\n# Build stage 0 `builder`:\n# Extract OpenSearch artifact\n################################################################################\n\nFROM ${base_image} AS builder\n# `tini` is a tiny but valid init for containers. This is used to cleanly\n# control how OpenSearch and any child processes are shut down.\n#\n# The tini GitHub page gives instructions for verifying the binary using\n# gpg, but the keyservers are slow to return the key and this can fail the\n# build. Instead, we check the binary against the published checksum.\nRUN set -eux ; \\\\\n    tini_bin=\"\" ; \\\\\n    case \"\\$(arch)\" in \\\\\n        aarch64) tini_bin='tini-arm64' ;; \\\\\n        x86_64)  tini_bin='tini-amd64' ;; \\\\\n        *) echo >&2 ; echo >&2 \"Unsupported architecture \\$(arch)\" ; echo >&2 ; exit 1 ;; \\\\\n    esac ; \\\\\n    curl --retry 8 -S -L -O https://github.com/krallin/tini/releases/download/v0.19.0/\\${tini_bin} ; \\\\\n    curl --retry 8 -S -L -O https://github.com/krallin/tini/releases/download/v0.19.0/\\${tini_bin}.sha256sum ; \\\\\n    sha256sum -c \\${tini_bin}.sha256sum ; \\\\\n    rm \\${tini_bin}.sha256sum ; \\\\\n    mv \\${tini_bin} /tini ; \\\\\n    chmod +x /tini\n\nRUN mkdir /usr/share/opensearch\nWORKDIR /usr/share/opensearch\n\n${source_opensearch}\n\nRUN tar zxf /opt/opensearch.tar.gz --strip-components=1 && rm /opt/opensearch.tar.gz\nRUN sed -i -e 's/OPENSEARCH_DISTRIBUTION_TYPE=tar/OPENSEARCH_DISTRIBUTION_TYPE=docker/' /usr/share/opensearch/bin/opensearch-env\nRUN mkdir -p config config/jvm.options.d data logs\nRUN chmod 0775 config config/jvm.options.d data logs\nCOPY config/opensearch.yml config/log4j2.properties config/\nRUN chmod 0660 config/opensearch.yml config/log4j2.properties\n\n################################################################################\n# Build stage 1 (the actual OpenSearch image):\n#\n# Copy opensearch from stage 0\n# Add entrypoint\n################################################################################\n\nFROM ${base_image}\n\nENV OPENSEARCH_CONTAINER true\n\nRUN  sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-* && \\\\\n     sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.epel.cloud|g' /etc/yum.repos.d/CentOS-Linux-* && \\\\\n     for iter in {1..10}; do \\\\\n      ${package_manager} update --setopt=tsflags=nodocs -y && \\\\\n      ${package_manager} install --setopt=tsflags=nodocs -y \\\\\n        nc shadow-utils zip unzip && \\\\\n      ${package_manager} clean all && exit_code=0 && break || exit_code=\\$? && echo \"${package_manager} error: retry \\$iter in 10s\" && \\\\\n      sleep 10; \\\\\n    done; \\\\\n    (exit \\$exit_code)\n\nRUN groupadd -g 1000 opensearch && \\\\\n    adduser -u 1000 -g 1000 -G 0 -d /usr/share/opensearch opensearch && \\\\\n    chmod 0775 /usr/share/opensearch && \\\\\n    chown -R 1000:0 /usr/share/opensearch\n\nWORKDIR /usr/share/opensearch\nCOPY --from=builder --chown=1000:0 /usr/share/opensearch /usr/share/opensearch\nCOPY --from=builder --chown=0:0 /tini /tini\n\n# Replace OpenJDK's built-in CA certificate keystore with the one from the OS\n# vendor. The latter is superior in several ways.\n# REF: https://github.com/elastic/elasticsearch-docker/issues/171\nRUN ln -sf /etc/pki/ca-trust/extracted/java/cacerts /usr/share/opensearch/jdk/lib/security/cacerts\n\nENV PATH /usr/share/opensearch/bin:\\$PATH\n\nCOPY bin/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\n\n# The JDK's directories' permissions don't allow `java` to be executed under a different\n# group to the default. Fix this.\nRUN find /usr/share/opensearch/jdk -type d -exec chmod 0755 '{}' \\\\; && \\\\\n    chmod g=u /etc/passwd && \\\\\n    chmod 0775 /usr/local/bin/docker-entrypoint.sh\n\n# Ensure that there are no files with setuid or setgid, in order to mitigate \"stackclash\" attacks.\nRUN find / -xdev -perm -4000 -exec chmod ug-s {} +\n\nEXPOSE 9200 9300\n\nLABEL org.label-schema.build-date=\"${build_date}\" \\\\\n  org.label-schema.license=\"${license}\" \\\\\n  org.label-schema.name=\"OpenSearch\" \\\\\n  org.label-schema.schema-version=\"1.0\" \\\\\n  org.label-schema.url=\"https://www.opensearch.org\" \\\\\n  org.label-schema.usage=\"https://www.opensearch.org/guide/en/opensearch/reference/index.html\" \\\\\n  org.label-schema.vcs-ref=\"${git_revision}\" \\\\\n  org.label-schema.vcs-url=\"https://github.com/opensearch-project/OpenSearch\" \\\\\n  org.label-schema.vendor=\"OpenSearch\" \\\\\n  org.label-schema.version=\"${version}\" \\\\\n  org.opencontainers.image.created=\"${build_date}\" \\\\\n  org.opencontainers.image.documentation=\"https://www.opensearch.org/guide/en/opensearch/reference/index.html\" \\\\\n  org.opencontainers.image.licenses=\"${license}\" \\\\\n  org.opencontainers.image.revision=\"${git_revision}\" \\\\\n  org.opencontainers.image.source=\"https://github.com/opensearch-project/OpenSearch\" \\\\\n  org.opencontainers.image.title=\"OpenSearch\" \\\\\n  org.opencontainers.image.url=\"https://www.opensearch.org\" \\\\\n  org.opencontainers.image.vendor=\"OpenSearch\" \\\\\n  org.opencontainers.image.version=\"${version}\"\n\nENTRYPOINT [\"/tini\", \"--\", \"/usr/local/bin/docker-entrypoint.sh\"]\n# Dummy overridable parameter parsed by entrypoint\nCMD [\"opensearchwrapper\"]\n\n################################################################################\n# End of multi-stage Dockerfile\n################################################################################\n"
}