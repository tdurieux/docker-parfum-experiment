{
  "startTime": 1674251355428,
  "endTime": 1674251356210,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILDARCH=amd64\nARG TARGETARCH=amd64\n\n### Front-end common\nFROM node:16 AS front-end-common\n\nWORKDIR /app/ui-build\nCOPY ui-common/package.json .\nCOPY ui-common/package-lock.json .\nRUN npm i && npm cache clean --force;\nCOPY ui-common .\nRUN npm pack\n\n### Front-end\nFROM node:16 AS front-end\n\nWORKDIR /app/ui-build\n\nCOPY ui/package.json ui/package-lock.json ./\nCOPY --from=front-end-common [\"/app/ui-build/up9-mizu-common-0.0.0.tgz\", \".\"]\nRUN npm i && npm cache clean --force;\nCOPY ui .\nRUN npm run build\n\n### Base builder image for native builds architecture\nFROM golang:1.17-alpine AS builder-native-base\nENV CGO_ENABLED=1 GOOS=linux\nRUN apk add --no-cache \\\n    libpcap-dev \\\n    g++ \\\n    perl-utils \\\n    curl \\\n    build-base \\\n    binutils-gold \\\n    bash \\\n    clang \\\n    llvm \\\n    libbpf-dev \\\n    linux-headers\nCOPY devops/install-capstone.sh .\nRUN ./install-capstone.sh\n\n\n### Intermediate builder image for x86-64 to x86-64 native builds\nFROM builder-native-base AS builder-from-amd64-to-amd64\nENV GOARCH=amd64\nENV BPF_TARGET=amd64 BPF_CFLAGS=\"-O2 -g -D__TARGET_ARCH_x86\"\n\n\n### Intermediate builder image for AArch64 to AArch64 native builds\nFROM builder-native-base AS builder-from-arm64v8-to-arm64v8\nENV GOARCH=arm64\nENV BPF_TARGET=arm64 BPF_CFLAGS=\"-O2 -g -D__TARGET_ARCH_arm64\"\n\n\n### Builder image for x86-64 to AArch64 cross-compilation\nFROM up9inc/linux-arm64-musl-go-libpcap-capstone-bpf:capstone-5.0-rc2 AS builder-from-amd64-to-arm64v8\nENV CGO_ENABLED=1 GOOS=linux\nENV GOARCH=arm64 CGO_CFLAGS=\"-I/work/libpcap -I/work/capstone/include\"\nENV BPF_TARGET=arm64 BPF_CFLAGS=\"-O2 -g -D__TARGET_ARCH_arm64 -I/usr/xcc/aarch64-linux-musl-cross/aarch64-linux-musl/include/\"\n\n\n### Builder image for AArch64 to x86-64 cross-compilation\nFROM up9inc/linux-x86_64-musl-go-libpcap-capstone-bpf:capstone-5.0-rc2 AS builder-from-arm64v8-to-amd64\nENV CGO_ENABLED=1 GOOS=linux\nENV GOARCH=amd64 CGO_CFLAGS=\"-I/libpcap -I/capstone/include\"\nENV BPF_TARGET=amd64 BPF_CFLAGS=\"-O2 -g -D__TARGET_ARCH_x86  -I/usr/local/musl/x86_64-unknown-linux-musl/include/\"\n\n\n### Final builder image where the build happens\n# Possible build strategies:\n# BUILDARCH=amd64 TARGETARCH=amd64\n# BUILDARCH=arm64v8 TARGETARCH=arm64v8\n# BUILDARCH=amd64 TARGETARCH=arm64v8\n# BUILDARCH=arm64v8 TARGETARCH=amd64\nARG BUILDARCH=amd64\nARG TARGETARCH=amd64\nFROM builder-from-${BUILDARCH}-to-${TARGETARCH} AS builder\n\n# Move to agent working directory (/agent-build)\nWORKDIR /app/agent-build\n\nCOPY agent/go.mod agent/go.sum ./\nCOPY shared/go.mod shared/go.mod ../shared/\nCOPY logger/go.mod logger/go.mod ../logger/\nCOPY tap/go.mod tap/go.mod ../tap/\nCOPY tap/api/go.mod ../tap/api/\nCOPY tap/dbgctl/go.mod ../tap/dbgctl/\nCOPY tap/extensions/amqp/go.mod ../tap/extensions/amqp/\nCOPY tap/extensions/http/go.mod ../tap/extensions/http/\nCOPY tap/extensions/kafka/go.mod ../tap/extensions/kafka/\nCOPY tap/extensions/redis/go.mod ../tap/extensions/redis/\nRUN go mod download\n\n# Copy and build agent code\nCOPY shared ../shared\nCOPY logger ../logger\nCOPY tap ../tap\nCOPY agent .\n\nARG COMMIT_HASH\nARG GIT_BRANCH\nARG BUILD_TIMESTAMP\nARG VER=0.0\n\nWORKDIR /app/tap/tlstapper\n\nRUN rm tlstapper_bpf*\nRUN GOARCH=${BUILDARCH} go generate tls_tapper.go\n\nWORKDIR /app/agent-build\n\nRUN go build -ldflags=\"-extldflags=-static -s -w \\\n    -X 'github.com/up9inc/mizu/agent/pkg/version.GitCommitHash=${COMMIT_HASH}' \\\n    -X 'github.com/up9inc/mizu/agent/pkg/version.Branch=${GIT_BRANCH}' \\\n    -X 'github.com/up9inc/mizu/agent/pkg/version.BuildTimestamp=${BUILD_TIMESTAMP}' \\\n    -X 'github.com/up9inc/mizu/agent/pkg/version.Ver=${VER}'\" -o mizuagent .\n\n# Download Basenine executable, verify the sha1sum\nADD https://github.com/up9inc/basenine/releases/download/v0.8.3/basenine_linux_${GOARCH} ./basenine_linux_${GOARCH}\nADD https://github.com/up9inc/basenine/releases/download/v0.8.3/basenine_linux_${GOARCH}.sha256 ./basenine_linux_${GOARCH}.sha256\n\nRUN shasum -a 256 -c basenine_linux_\"${GOARCH}\".sha256 && \\\n    chmod +x ./basenine_linux_\"${GOARCH}\" && \\\n    mv ./basenine_linux_\"${GOARCH}\" ./basenine\n\n### The shipped image\nARG TARGETARCH=amd64\nFROM ${TARGETARCH}/busybox:latest\n# gin-gonic runs in debug mode without this\nENV GIN_MODE=release\n\nWORKDIR /app/data/\nWORKDIR /app\n\n# Copy binary and config files from /build to root folder of scratch container.\nCOPY --from=builder [\"/app/agent-build/mizuagent\", \".\"]\nCOPY --from=builder [\"/app/agent-build/basenine\", \"/usr/local/bin/basenine\"]\nCOPY --from=front-end [\"/app/ui-build/build\", \"site\"]\n\n# this script runs both apiserver and passivetapper and exits either if one of them exits, preventing a scenario where the container runs without one process\nENTRYPOINT [\"/app/mizuagent\"]\n"
}