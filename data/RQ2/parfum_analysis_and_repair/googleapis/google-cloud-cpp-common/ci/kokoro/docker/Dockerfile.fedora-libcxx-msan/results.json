{
  "startTime": 1674251849114,
  "endTime": 1674251850445,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG DISTRO_VERSION=30\nFROM fedora:${DISTRO_VERSION}\n\n# Install the minimal packages needed to compile libcxx, install Bazel, and\n# then compile our code.\nRUN dnf makecache && \\\n    dnf install -y clang clang-tools-extra cmake gcc-c++ git llvm-devel \\\n        make ninja-build python3-lit tar unzip which wget xz\n\nWORKDIR /var/tmp/build\nRUN wget -q https://releases.llvm.org/8.0.0/libcxx-8.0.0.src.tar.xz\nRUN tar -xf libcxx-8.0.0.src.tar.xz && rm libcxx-8.0.0.src.tar.xz\nRUN wget -q https://releases.llvm.org/8.0.0/libcxxabi-8.0.0.src.tar.xz\nRUN tar -xf libcxxabi-8.0.0.src.tar.xz && rm libcxxabi-8.0.0.src.tar.xz\n\n# To build libc++abi we need to bootstrap libc++ without libc++abi first:\nRUN cmake -Hlibcxx-8.0.0.src -B.boot-libcxx -GNinja -Wno-dev \\\n    -DLLVM_USE_SANITIZER=Memory -DLLVM_EXTERNAL_LIT=/usr/bin/lit \\\n    -DLLVM_CONFIG_PATH=/usr/bin/llvm-config \\\n    -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release  \\\n    -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang\nRUN cmake --build .boot-libcxx --target cxx\nRUN cmake --build .boot-libcxx --target install-cxx\n\n# Compile libc++abi using the bootstrap version\nRUN cmake -Hlibcxxabi-8.0.0.src -B.build-libcxxabi -GNinja -Wno-dev \\\n    -DLIBCXXABI_LIBCXX_PATH=/var/tmp/build/libcxx-8.0.0.src \\\n    -DLLVM_USE_SANITIZER=Memory -DLLVM_EXTERNAL_LIT=/usr/bin/lit \\\n    -DLLVM_CONFIG_PATH=/usr/bin/llvm-config \\\n    -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release  \\\n    -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang\nRUN cmake --build .build-libcxxabi --target check-cxxabi\nRUN cmake --build .build-libcxxabi --target install-cxxabi\n\n# After libc++abi is installed, compile test and install the libc++ library\n# again.\nRUN cmake -Hlibcxx-8.0.0.src -B.build-libcxx -GNinja -Wno-dev \\\n    -DLIBCXX_CXX_ABI=libcxxabi \\\n    -DLIBCXX_CXX_ABI_INCLUDE_PATHS=/var/tmp/build/libcxxabi-8.0.0.src/include \\\n    -DLLVM_USE_SANITIZER=Memory -DLLVM_EXTERNAL_LIT=/usr/bin/lit \\\n    -DLLVM_CONFIG_PATH=/usr/bin/llvm-config \\\n    -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release  \\\n    -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang\n# The tests for libcxx do not pass, mostly around the filesystem library, which\n# we do not care about.\nRUN cmake --build .build-libcxx --target cxx\nRUN cmake --build .build-libcxx --target install-cxx\n\nWORKDIR /var/tmp/ci\nCOPY . /var/tmp/ci\nRUN /var/tmp/ci/install-bazel.sh\n"
}