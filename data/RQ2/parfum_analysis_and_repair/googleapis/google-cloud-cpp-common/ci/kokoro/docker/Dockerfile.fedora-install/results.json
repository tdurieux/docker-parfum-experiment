{
  "startTime": 1674255190012,
  "endTime": 1674255191337,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2017 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG DISTRO_VERSION=31\nFROM fedora:${DISTRO_VERSION}\nARG NCPU=4\n\n# Fedora includes packages for gRPC, libcurl, and OpenSSL that are recent enough\n# for `google-cloud-cpp`. Install these packages and additional development\n# tools to compile the dependencies:\nRUN dnf makecache && \\\n    dnf install -y abi-compliance-checker abi-dumper \\\n        clang clang-tools-extra cmake diffutils doxygen findutils gcc-c++ git \\\n        grpc-devel grpc-plugins libcxx-devel libcxxabi-devel libcurl-devel \\\n        make openssl-devel pkgconfig protobuf-compiler python3 python3-pip \\\n        ShellCheck tar unzip w3m wget which zlib-devel\n\n# Install the the buildifier tool, which does not compile with the default\n# golang compiler for Ubuntu 16.04 and Ubuntu 18.04.\nRUN wget -q -O /usr/bin/buildifier https://github.com/bazelbuild/buildtools/releases/download/0.29.0/buildifier\nRUN chmod 755 /usr/bin/buildifier\n\n# Install cmake_format to automatically format the CMake list files.\n#     https://github.com/cheshirekow/cmake_format\n# Pin this to an specific version because the formatting changes when the\n# \"latest\" version is updated, and we do not want the builds to break just\n# because some third party changed something.\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir cmake_format==0.6.8\n\n# Install googletest, remove the downloaded files and the temporary artifacts\n# after a successful build to keep the image smaller (and with fewer layers)\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/googletest/archive/release-1.10.0.tar.gz && \\\n    tar -xf release-1.10.0.tar.gz && \\\n    cd /var/tmp/build/googletest-release-1.10.0 && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -H. -Bcmake-out/googletest && \\\n    cmake --build cmake-out/googletest --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build && rm release-1.10.0.tar.gz\n\n# Install googletest, remove the downloaded files and the temporary artifacts\n# after a successful build to keep the image smaller (and with fewer layers)\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/googleapis/cpp-cmakefiles/archive/v0.9.0.tar.gz && \\\n    tar -xf v0.9.0.tar.gz && \\\n    cd /var/tmp/build/cpp-cmakefiles-0.9.0 && \\\n    cmake \\\n      -DBUILD_SHARED_LIBS=YES \\\n      -H. -Bcmake-out && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build && rm v0.9.0.tar.gz\n\n# Install Bazel because some of the builds need it.\nWORKDIR /var/tmp/ci\nCOPY . /var/tmp/ci\nRUN /var/tmp/ci/install-bazel.sh\n"
}