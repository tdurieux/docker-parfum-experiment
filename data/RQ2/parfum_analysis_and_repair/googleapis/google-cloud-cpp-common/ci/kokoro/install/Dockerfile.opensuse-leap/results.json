{
  "startTime": 1674248051032,
  "endTime": 1674248053117,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 19,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#\n# WARNING: This is an automatically generated file. Consider changing the\n#     sources instead. You can find the source templates and scripts at:\n#     https://github.com/googleapis/google-cloud-cpp-common/tree/master/ci/templates\n#\n\nARG DISTRO_VERSION=latest\nFROM opensuse/leap:${DISTRO_VERSION} AS devtools\nARG NCPU=4\n\n## [START INSTALL.md]\n\n# Install the minimal development tools, libcurl and OpenSSL. The gRPC Makefile\n# uses `which` to determine whether the compiler is available. Install this\n# command for the extremely rare case where it may be missing from your\n# workstation or build server.\n\n# ```bash\nRUN zypper refresh && \\\n    zypper install --allow-downgrade -y automake cmake gcc gcc-c++ git gzip \\\n        libcurl-devel libopenssl-devel libtool make tar wget which\n# ```\n\n# The following steps will install libraries and tools in `/usr/local`. openSUSE\n# does not search for shared libraries in these directories by default, there\n# are multiple ways to solve this problem, the following steps are one solution:\n\n# ```bash\nRUN (echo \"/usr/local/lib\" ; echo \"/usr/local/lib64\") | \\\n    tee /etc/ld.so.conf.d/usrlocal.conf\nENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig\nENV PATH=/usr/local/bin:${PATH}\n# ```\n\n# #### Protobuf\n\n# We need to install a version of Protobuf that is recent enough to support the\n# Google Cloud Platform proto files:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/protobuf/archive/v3.11.3.tar.gz && \\\n    tar -xf v3.11.3.tar.gz && \\\n    cd protobuf-3.11.3/cmake && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -H. -Bcmake-out && \\\n    cmake --build cmake-out -- -j ${NCPU:-4} && \\\n    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \\\n    ldconfig && rm v3.11.3.tar.gz\n# ```\n\n# #### c-ares\n\n# Recent versions of gRPC require c-ares >= 1.11, while openSUSE/Leap\n# distributes c-ares-1.9. Manually install a newer version:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz && \\\n    tar -xf cares-1_14_0.tar.gz && \\\n    cd c-ares-cares-1_14_0 && \\\n    ./buildconf && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j ${NCPU:-4} && \\\n    make install && \\\n    ldconfig && rm cares-1_14_0.tar.gz\n# ```\n\n# #### gRPC\n\n# We also need a version of gRPC that is recent enough to support the Google\n# Cloud Platform proto files. We manually install it using:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/grpc/grpc/archive/78ace4cd5dfcc1f2eced44d22d752f103f377e7b.tar.gz && \\\n    tar -xf 78ace4cd5dfcc1f2eced44d22d752f103f377e7b.tar.gz && \\\n    cd grpc-78ace4cd5dfcc1f2eced44d22d752f103f377e7b && \\\n    make -j ${NCPU:-4} && \\\n    make install && \\\n    ldconfig && rm 78ace4cd5dfcc1f2eced44d22d752f103f377e7b.tar.gz\n# ```\n\n# #### googleapis\n\n# We need a recent version of the Google Cloud Platform proto C++ libraries:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/googleapis/cpp-cmakefiles/archive/v0.9.0.tar.gz && \\\n    tar -xf v0.9.0.tar.gz && \\\n    cd cpp-cmakefiles-0.9.0 && \\\n    cmake -DBUILD_SHARED_LIBS=YES -H. -Bcmake-out && \\\n    cmake --build cmake-out -- -j ${NCPU:-4} && \\\n    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \\\n    ldconfig && rm v0.9.0.tar.gz\n# ```\n\n# #### googletest\n\n# We need a recent version of GoogleTest to compile the unit and integration\n# tests.\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/googletest/archive/release-1.10.0.tar.gz && \\\n    tar -xf release-1.10.0.tar.gz && \\\n    cd googletest-release-1.10.0 && \\\n    cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -H. -Bcmake-out && \\\n    cmake --build cmake-out -- -j ${NCPU:-4} && \\\n    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \\\n    ldconfig && rm release-1.10.0.tar.gz\n# ```\n\nFROM devtools AS install\nARG NCPU=4\n\n# #### Compile and install the main project\n\n# We can now compile, test, and install `google-cloud-cpp-common`.\n\n# ```bash\nWORKDIR /home/build/project\nCOPY . /home/build/project\nRUN cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j \"${NCPU:-4}\"\nWORKDIR /home/build/project/cmake-out\nRUN ctest -LE integration-tests --output-on-failure\nRUN cmake --build . --target install\n# ```\n\n## [END INSTALL.md]\n\n# Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nCOPY ci/test-install /home/build/test-install-plain-make\nCOPY google/cloud/samples/common_install_test.cc /home/build/test-install-plain-make\nRUN make\n\nWORKDIR /home/build/test-install-cmake\nCOPY ci/test-install /home/build/test-install-cmake\nCOPY google/cloud/samples/common_install_test.cc /home/build/test-install-cmake\n# Always unset PKG_CONFIG_PATH before building with CMake, this is to ensure\n# that CMake does not depend on pkg-config to discover the project.\nRUN env -u PKG_CONFIG_PATH cmake -H. -B/i\nRUN cmake --build /i -- -j \"${NCPU:-4}\"\n"
}