{
  "startTime": 1674255222776,
  "endTime": 1674255223890,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM debian:bullseye\nARG NCPU=4\n\n## [BEGIN packaging.md]\n\n# Install the minimal development tools, libcurl, and OpenSSL:\n\n# ```bash\nRUN apt-get update && \\\n    apt-get --no-install-recommends install -y apt-transport-https apt-utils \\\n        automake build-essential ca-certificates ccache cmake curl git \\\n        gcc g++ libc-ares-dev libc-ares2 libcurl4-openssl-dev libre2-dev \\\n        libssl-dev m4 make ninja-build pkg-config tar wget zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n# ```\n\n# #### Abseil\n\n# Debian 11 ships with Abseil==20200923.3.  Unfortunately, the current gRPC\n# version needs Abseil >= 20210324.\n\n# :warning: By default, Abseil's ABI changes depending on whether it is used\n# with C++ >= 17 enabled or not. Installing Abseil with the default\n# configuration is error-prone, unless you can guarantee that all the code using\n# Abseil (gRPC, google-cloud-cpp, your own code, etc.) is compiled with the same\n# C++ version. We recommend that you switch the default configuration to pin\n# Abseil's ABI to the version used at compile time. In this case, the compiler\n# defaults to C++14. Therefore, we change `absl/base/options.h` to **always**\n# use `absl::any`, `absl::string_view`, and `absl::variant`. See\n# [abseil/abseil-cpp#696] for more information.\n\n# ```bash\nWORKDIR /var/tmp/build/abseil-cpp\nRUN curl -f -sSL https://github.com/abseil/abseil-cpp/archive/20211102.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    sed -i 's/^#define ABSL_OPTION_USE_\\(.*\\) 2/#define ABSL_OPTION_USE_\\1 0/' \"absl/base/options.h\" && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_TESTING=OFF \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -S . -B cmake-out && \\\n    cmake --build cmake-out -- -j ${NCPU:-4} && \\\n    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \\\n    ldconfig\n# ```\n\n# #### crc32c\n\n# The project depends on the Crc32c library, we need to compile this from\n# source:\n\n# ```bash\nWORKDIR /var/tmp/build/crc32c\nRUN curl -f -sSL https://github.com/google/crc32c/archive/1.1.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -DCRC32C_BUILD_TESTS=OFF \\\n        -DCRC32C_BUILD_BENCHMARKS=OFF \\\n        -DCRC32C_USE_GLOG=OFF \\\n        -S . -B cmake-out && \\\n    cmake --build cmake-out -- -j ${NCPU:-4} && \\\n    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \\\n    ldconfig\n# ```\n\n# #### nlohmann_json library\n\n# Debian 11 also ships with nlohmann-json==3.9.1, which is recent enough for our needs:\n\n# ```bash\nRUN apt-get update && \\\n    apt-get --no-install-recommends install -y nlohmann-json3-dev && rm -rf /var/lib/apt/lists/*;\n# ```\n\n# #### Protobuf\n\n# Unless you are only using the Google Cloud Storage library the project\n# needs Protobuf and gRPC. Unfortunately the version of Protobuf that ships\n# with Debian 11 is not recent enough to support the protos published by\n# Google Cloud. We need to build from source:\n\n# ```bash\nWORKDIR /var/tmp/build/protobuf\nRUN curl -f -sSL https://github.com/protocolbuffers/protobuf/archive/v21.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -Dprotobuf_ABSL_PROVIDER=package \\\n        -S . -B cmake-out && \\\n    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \\\n    ldconfig\n# ```\n\n# #### gRPC\n\n# Finally, we build gRPC from source:\n\n# ```bash\nWORKDIR /var/tmp/build/grpc\nRUN curl -f -sSL https://github.com/grpc/grpc/archive/v1.47.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -DgRPC_INSTALL=ON \\\n        -DgRPC_BUILD_TESTS=OFF \\\n        -DgRPC_ABSL_PROVIDER=package \\\n        -DgRPC_CARES_PROVIDER=package \\\n        -DgRPC_PROTOBUF_PROVIDER=package \\\n        -DgRPC_RE2_PROVIDER=package \\\n        -DgRPC_SSL_PROVIDER=package \\\n        -DgRPC_ZLIB_PROVIDER=package \\\n        -S . -B cmake-out && \\\n    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \\\n    ldconfig\n# ```\n\n## [DONE packaging.md]\n\n# Some of the above libraries may have installed in /usr/local, so make sure\n# those library directories will be found.\nRUN ldconfig /usr/local/lib*\n"
}