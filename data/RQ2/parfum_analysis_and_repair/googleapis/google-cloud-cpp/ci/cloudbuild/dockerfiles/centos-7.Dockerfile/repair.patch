diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/googleapis/google-cloud-cpp/ci/cloudbuild/dockerfiles/centos-7.Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/googleapis/google-cloud-cpp/ci/cloudbuild/dockerfiles/centos-7.Dockerfile/repaired.Dockerfile
index 898b410..45cd05a 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/googleapis/google-cloud-cpp/ci/cloudbuild/dockerfiles/centos-7.Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/googleapis/google-cloud-cpp/ci/cloudbuild/dockerfiles/centos-7.Dockerfile/repaired.Dockerfile
@@ -20,12 +20,12 @@ FROM centos:7
 # [Software Collections](https://www.softwarecollections.org/).
 
 RUN rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
-RUN yum install -y centos-release-scl yum-utils
+RUN yum install -y centos-release-scl yum-utils && rm -rf /var/cache/yum
 RUN yum-config-manager --enable rhel-server-rhscl-7-rpms
 RUN yum makecache && \
     yum install -y automake ccache cmake3 curl-devel devtoolset-7 gcc gcc-c++ \
         git libtool make ninja-build openssl-devel patch re2-devel tar wget \
-        which zlib-devel
+        which zlib-devel && rm -rf /var/cache/yum
 RUN ln -sf /usr/bin/cmake3 /usr/bin/cmake && ln -sf /usr/bin/ctest3 /usr/bin/ctest
 
 # In order to use the `devtoolset-7` Software Collection we're supposed to run
@@ -45,9 +45,9 @@ ENV LD_LIBRARY_PATH /opt/rh/devtoolset-7/root/usr/lib64:/opt/rh/devtoolset-7/roo
 # invocations take extremely long to complete.
 
 WORKDIR /var/tmp/build/pkg-config-cpp
-RUN curl -sSL https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz | \
+RUN curl -f -sSL https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz | \
     tar -xzf - --strip-components=1 && \
-    ./configure --with-internal-glib && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --with-internal-glib && \
     make -j "$(nproc)" && \
     make install && \
     ldconfig && cd /var/tmp && rm -fr build
@@ -63,7 +63,7 @@ ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib
 ENV PATH=/usr/local/bin:${PATH}
 
 WORKDIR /var/tmp/build/abseil-cpp
-RUN curl -sSL https://github.com/abseil/abseil-cpp/archive/20211102.0.tar.gz | \
+RUN curl -f -sSL https://github.com/abseil/abseil-cpp/archive/20211102.0.tar.gz | \
     tar -xzf - --strip-components=1 && \
     sed -i 's/^#define ABSL_OPTION_USE_\(.*\) 2/#define ABSL_OPTION_USE_\1 0/' "absl/base/options.h" && \
     cmake \
@@ -76,7 +76,7 @@ RUN curl -sSL https://github.com/abseil/abseil-cpp/archive/20211102.0.tar.gz | \
     ldconfig && cd /var/tmp && rm -fr build
 
 WORKDIR /var/tmp/build/protobuf
-RUN curl -sSL https://github.com/protocolbuffers/protobuf/archive/v21.2.tar.gz | \
+RUN curl -f -sSL https://github.com/protocolbuffers/protobuf/archive/v21.2.tar.gz | \
     tar -xzf - --strip-components=1 && \
     cmake \
         -DCMAKE_BUILD_TYPE=Release \
@@ -89,14 +89,14 @@ RUN curl -sSL https://github.com/protocolbuffers/protobuf/archive/v21.2.tar.gz |
     ldconfig && cd /var/tmp && rm -fr build
 
 WORKDIR /var/tmp/build/c-ares
-RUN curl -sSL https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz | \
+RUN curl -f -sSL https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz | \
     tar -xzf - --strip-components=1 && \
-    ./buildconf && ./configure && make -j "$(nproc)" && \
+    ./buildconf && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && make -j "$(nproc)" && \
     make install && \
     ldconfig && cd /var/tmp && rm -fr build
 
 WORKDIR /var/tmp/build/grpc
-RUN curl -sSL https://github.com/grpc/grpc/archive/v1.47.0.tar.gz | \
+RUN curl -f -sSL https://github.com/grpc/grpc/archive/v1.47.0.tar.gz | \
     tar -xzf - --strip-components=1 && \
     cmake \
         -DCMAKE_BUILD_TYPE=Release \
@@ -115,7 +115,7 @@ RUN curl -sSL https://github.com/grpc/grpc/archive/v1.47.0.tar.gz | \
     ldconfig && cd /var/tmp && rm -fr build
 
 WORKDIR /var/tmp/build/crc32c
-RUN curl -sSL https://github.com/google/crc32c/archive/1.1.2.tar.gz | \
+RUN curl -f -sSL https://github.com/google/crc32c/archive/1.1.2.tar.gz | \
     tar -xzf - --strip-components=1 && \
     cmake \
         -DCMAKE_BUILD_TYPE=Release \
@@ -125,11 +125,11 @@ RUN curl -sSL https://github.com/google/crc32c/archive/1.1.2.tar.gz | \
         -DCRC32C_USE_GLOG=OFF \
         -GNinja -S . -B cmake-out && \
     cmake --build cmake-out && \
-    cmake --build cmake-out --target install  && \
+    cmake --build cmake-out --target install && \
     ldconfig && cd /var/tmp && rm -fr build
 
 WORKDIR /var/tmp/build/json
-RUN curl -sSL https://github.com/nlohmann/json/archive/v3.10.5.tar.gz | \
+RUN curl -f -sSL https://github.com/nlohmann/json/archive/v3.10.5.tar.gz | \
     tar -xzf - --strip-components=1 && \
     cmake \
       -DCMAKE_BUILD_TYPE=Release \
@@ -143,7 +143,7 @@ RUN curl -sSL https://github.com/nlohmann/json/archive/v3.10.5.tar.gz | \
 # Install googletest, remove the downloaded files and the temporary artifacts
 # after a successful build to keep the image smaller (and with fewer layers)
 WORKDIR /var/tmp/build
-RUN curl -sSL https://github.com/google/googletest/archive/release-1.11.0.tar.gz | \
+RUN curl -f -sSL https://github.com/google/googletest/archive/release-1.11.0.tar.gz | \
     tar -xzf - --strip-components=1 && \
     cmake \
       -DCMAKE_BUILD_TYPE="Release" \
@@ -154,7 +154,7 @@ RUN curl -sSL https://github.com/google/googletest/archive/release-1.11.0.tar.gz
 
 # Download and compile Google microbenchmark support library:
 WORKDIR /var/tmp/build
-RUN curl -sSL https://github.com/google/benchmark/archive/v1.6.1.tar.gz | \
+RUN curl -f -sSL https://github.com/google/benchmark/archive/v1.6.1.tar.gz | \
     tar -xzf - --strip-components=1 && \
     cmake \
         -DCMAKE_BUILD_TYPE="Release" \