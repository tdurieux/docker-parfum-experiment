{
  "startTime": 1674251817607,
  "endTime": 1674251818566,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM fedora:36\nARG NCPU=4\n\n# Fedora includes packages for gRPC, libcurl, and OpenSSL that are recent enough\n# for `google-cloud-cpp`. Install these packages and additional development\n# tools to compile the dependencies:\nRUN dnf makecache && \\\n    dnf install -y abi-compliance-checker autoconf automake \\\n        ccache clang clang-analyzer clang-tools-extra \\\n        cmake diffutils doxygen findutils gcc-c++ git \\\n        lcov libcxx-devel libcxxabi-devel \\\n        libasan libubsan libtsan libcurl-devel make ninja-build \\\n        openssl-devel patch python python3.8 \\\n        python-pip tar unzip w3m wget which zip zlib-devel\n\n# Sets root's password to the empty string to enable users to get a root shell\n# inside the container with `su -` and no password. Sudo would not work because\n# we run these containers as the invoking user's uid, which does not exist in\n# the container's /etc/passwd file.\nRUN echo 'root:' | chpasswd\n\n# Install the Python modules needed to run the storage emulator\nRUN dnf makecache && dnf install -y python3-devel\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir setuptools wheel\n\n# Fedora's version of `pkg-config` (https://github.com/pkgconf/pkgconf) is slow\n# when handling `.pc` files with lots of `Requires:` deps, which happens with\n# Abseil, so we use the normal `pkg-config` binary, which seems to not suffer\n# from this bottleneck. For more details see\n# https://github.com/googleapis/google-cloud-cpp/issues/7052\nWORKDIR /var/tmp/build/pkg-config-cpp\nRUN curl -f -sSL https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-internal-glib && \\\n    make -j ${NCPU:-4} && \\\n    make install && \\\n    ldconfig\nENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib64/pkgconfig\n\n# Install Abseil, remove the downloaded files and the temporary artifacts\n# after a successful build to keep the image smaller (and with fewer layers)\nWORKDIR /var/tmp/build\nRUN curl -f -sSL https://github.com/abseil/abseil-cpp/archive/20211102.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    sed -i 's/^#define ABSL_OPTION_USE_\\(.*\\) 2/#define ABSL_OPTION_USE_\\1 0/' \"absl/base/options.h\" && \\\n    cmake \\\n      -DCMAKE_CXX_STANDARD=14 \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_TESTING=OFF \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -H. -Bcmake-out/abseil && \\\n    cmake --build cmake-out/abseil --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\n# Install googletest, remove the downloaded files and the temporary artifacts\n# after a successful build to keep the image smaller (and with fewer layers)\nWORKDIR /var/tmp/build\nRUN curl -f -sSL https://github.com/google/googletest/archive/release-1.11.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n      -DCMAKE_CXX_STANDARD=14 \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -H. -Bcmake-out/googletest && \\\n    cmake --build cmake-out/googletest --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\n# Download and compile Google microbenchmark support library:\nWORKDIR /var/tmp/build\nRUN curl -f -sSL https://github.com/google/benchmark/archive/v1.6.1.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_CXX_STANDARD=14 \\\n        -DCMAKE_BUILD_TYPE=\"Release\" \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -DBENCHMARK_ENABLE_TESTING=OFF \\\n        -H. -Bcmake-out/benchmark && \\\n    cmake --build cmake-out/benchmark --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build\nRUN curl -f -sSL https://github.com/google/crc32c/archive/1.1.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n      -DCMAKE_CXX_STANDARD=14 \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCRC32C_BUILD_TESTS=OFF \\\n      -DCRC32C_BUILD_BENCHMARKS=OFF \\\n      -DCRC32C_USE_GLOG=OFF \\\n      -H. -Bcmake-out/crc32c && \\\n    cmake --build cmake-out/crc32c --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build\nRUN curl -f -sSL https://github.com/nlohmann/json/archive/v3.10.5.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n      -DCMAKE_CXX_STANDARD=14 \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DBUILD_TESTING=OFF \\\n      -DJSON_BuildTests=OFF \\\n      -H. -Bcmake-out/nlohmann/json && \\\n    cmake --build cmake-out/nlohmann/json --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/protobuf\nRUN curl -f -sSL https://github.com/protocolbuffers/protobuf/archive/v21.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_CXX_STANDARD=14 \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -Dprotobuf_ABSL_PROVIDER=package \\\n        -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/grpc\nRUN dnf makecache && dnf install -y c-ares-devel re2-devel\nRUN curl -f -sSL https://github.com/grpc/grpc/archive/v1.47.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_CXX_STANDARD=14 \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DgRPC_INSTALL=ON \\\n        -DgRPC_BUILD_TESTS=OFF \\\n        -DgRPC_ABSL_PROVIDER=package \\\n        -DgRPC_CARES_PROVIDER=package \\\n        -DgRPC_PROTOBUF_PROVIDER=package \\\n        -DgRPC_RE2_PROVIDER=package \\\n        -DgRPC_SSL_PROVIDER=package \\\n        -DgRPC_ZLIB_PROVIDER=package \\\n        -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\n# Install the Cloud SDK and some of the emulators. We use the emulators to run\n# integration tests for the client libraries.\nCOPY . /var/tmp/ci\nWORKDIR /var/tmp/downloads\nENV CLOUDSDK_PYTHON=python3.8\nRUN /var/tmp/ci/install-cloud-sdk.sh\nENV CLOUD_SDK_LOCATION=/usr/local/google-cloud-sdk\nENV PATH=${CLOUD_SDK_LOCATION}/bin:${PATH}\n# The Cloud Pub/Sub emulator needs Java, and so does `bazel coverage` :shrug:\n# Bazel needs the '-devel' version with javac.\nRUN dnf makecache && dnf install -y java-latest-openjdk-devel\n\n# Some of the above libraries may have installed in /usr/local, so make sure\n# those library directories will be found.\nRUN ldconfig /usr/local/lib*\n\nRUN curl -f -o /usr/bin/bazelisk -sSL \"https://github.com/bazelbuild/bazelisk/releases/download/v1.12.0/bazelisk-linux-amd64\" && \\\n    chmod +x /usr/bin/bazelisk && \\\n    ln -s /usr/bin/bazelisk /usr/bin/bazel\n"
}