{
  "startTime": 1674252683732,
  "endTime": 1674252685033,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 19,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 52,
        "columnEnd": 80
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 19,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 52,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:bionic\nARG NCPU=4\n\nRUN apt-get update && \\\n    apt-get --no-install-recommends install -y \\\n        automake \\\n        build-essential \\\n        ccache \\\n        clang \\\n        clang-9 \\\n        cmake \\\n        ctags \\\n        curl \\\n        gawk \\\n        git \\\n        gcc \\\n        g++ \\\n        cmake \\\n        libcurl4-openssl-dev \\\n        libssl-dev \\\n        libtool \\\n        llvm-9 \\\n        lsb-release \\\n        make \\\n        ninja-build \\\n        patch \\\n        pkg-config \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        tar \\\n        unzip \\\n        zip \\\n        wget \\\n        zlib1g-dev \\\n        apt-utils \\\n        ca-certificates \\\n        apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\n# Install all the direct (and indirect) dependencies for google-cloud-cpp.\n# Use a different directory for each build, and remove the downloaded\n# files and any temporary artifacts after a successful build to keep the\n# image smaller (and with fewer layers)\n\nWORKDIR /var/tmp/build/abseil-cpp\nRUN curl -f -sSL https://github.com/abseil/abseil-cpp/archive/20211102.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    sed -i 's/^#define ABSL_OPTION_USE_\\(.*\\) 2/#define ABSL_OPTION_USE_\\1 0/' \"absl/base/options.h\" && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_TESTING=OFF \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCMAKE_CXX_STANDARD=11 \\\n      -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/googletest\nRUN curl -f -sSL https://github.com/google/googletest/archive/release-1.11.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCMAKE_CXX_STANDARD=11 \\\n      -H. -Bcmake-out/googletest && \\\n    cmake --build cmake-out/googletest --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/benchmark\nRUN curl -f -sSL https://github.com/google/benchmark/archive/v1.6.1.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=\"Release\" \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -DBENCHMARK_ENABLE_TESTING=OFF \\\n        -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/crc32c\nRUN curl -f -sSL https://github.com/google/crc32c/archive/1.1.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCRC32C_BUILD_TESTS=OFF \\\n      -DCRC32C_BUILD_BENCHMARKS=OFF \\\n      -DCRC32C_USE_GLOG=OFF \\\n      -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/nlohmann-json\nRUN curl -f -sSL https://github.com/nlohmann/json/archive/v3.10.5.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DBUILD_TESTING=OFF \\\n      -DJSON_BuildTests=OFF \\\n      -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/protobuf\nRUN curl -f -sSL https://github.com/protocolbuffers/protobuf/archive/v21.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -Dprotobuf_ABSL_PROVIDER=package \\\n        -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/c-ares\nRUN curl -f -sSL https://github.com/c-ares/c-ares/archive/refs/tags/cares-1_17_1.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/re2\nRUN curl -f -sSL https://github.com/google/re2/archive/2022-06-01.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DRE2_BUILD_TESTING=OFF \\\n        -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\nWORKDIR /var/tmp/build/grpc\nRUN curl -f -sSL https://github.com/grpc/grpc/archive/v1.47.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DgRPC_INSTALL=ON \\\n        -DgRPC_BUILD_TESTS=OFF \\\n        -DgRPC_ABSL_PROVIDER=package \\\n        -DgRPC_CARES_PROVIDER=package \\\n        -DgRPC_PROTOBUF_PROVIDER=package \\\n        -DgRPC_RE2_PROVIDER=package \\\n        -DgRPC_SSL_PROVIDER=package \\\n        -DgRPC_ZLIB_PROVIDER=package \\\n        -H. -Bcmake-out -GNinja && \\\n    cmake --build cmake-out --target install -- -j ${NCPU} && \\\n    ldconfig && \\\n    cd /var/tmp && rm -fr build\n\n# Install Python packages used in the integration tests.\nRUN update-alternatives --install /usr/bin/python python $(which python3) 10\nRUN pip3 install --no-cache-dir setuptools wheel\n\n# Install the Cloud SDK and some of the emulators. We use the emulators to run\n# integration tests for the client libraries.\nCOPY . /var/tmp/ci\nWORKDIR /var/tmp/downloads\nRUN /var/tmp/ci/install-cloud-sdk.sh\nENV CLOUD_SDK_LOCATION=/usr/local/google-cloud-sdk\nENV PATH=${CLOUD_SDK_LOCATION}/bin:${PATH}\n# The Cloud Pub/Sub emulator needs Java :shrug:\nRUN apt update && ( apt install --no-install-recommends -y openjdk-11-jre || apt install --no-install-recommends -y openjdk-9-jre) && rm -rf /var/lib/apt/lists/*;\n"
}