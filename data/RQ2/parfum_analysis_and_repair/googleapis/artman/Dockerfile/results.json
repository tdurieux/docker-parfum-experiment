{
  "startTime": 1674255148991,
  "endTime": 1674255150603,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 5,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 5,
        "columnEnd": 74
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 4,
        "columnEnd": 128
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 54,
        "columnEnd": 78
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 84,
        "columnEnd": 132
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 6,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# Release parameters\nENV GOOGLEAPIS_HASH e26e1839a45445d13cd45b1be3b1523defb72fee\nENV GAPIC_GENERATOR_HASH v2.4.4\n# Define version number below. The ARTMAN_VERSION line is parsed by\n# .circleci/config.yml and setup.py, please keep the format.\nENV ARTMAN_VERSION 2.4.4\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Set the locale\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL C\n\n# OpenJDK repository\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends software-properties-common \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && add-apt-repository ppa:openjdk-r/ppa\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    curl \\\n    git \\\n    # debugging\n    vim \\\n    # openssh-client is needed for CircleCI git checkout\n    openssh-client \\\n    # runtime packages\n    unzip \\\n    php \\\n    python3-pip \\\n    # Java\n    openjdk-8-jdk-headless \\\n    # Ruby\n    ruby \\\n    ruby-dev \\\n    # Required to build grpc_php_plugin\n    autoconf \\\n    autogen \\\n    libtool \\\n    autotools-dev \\\n    automake \\\n    make \\\n    g++ \\\n    # Used to create Python doc\n    pandoc \\\n    # .NET dependencies\n    libc6 \\\n    libcurl3 \\\n    libgcc1 \\\n    libgssapi-krb5-2 \\\n    liblttng-ust0 \\\n    libssl1.0.0 \\\n    libstdc++6 \\\n    libunwind8 \\\n    libuuid1 \\\n    zlib1g \\\n    xz-utils \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Download and unpack Node.js v10\nRUN mkdir -p /opt \\\n  && curl -f -L https://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.xz -o /opt/node-v10.16.0-linux-x64.tar.xz \\\n  && tar -C /opt -xJf /opt/node-v10.16.0-linux-x64.tar.xz \\\n  && rm -f /opt/node-v10.16.0-linux-x64.tar.xz\nENV PATH /opt/node-v10.16.0-linux-x64/bin:$PATH\n\n# Install google-gax for Node.js\nRUN npm install -g google-gax@^1.2.1 && npm cache clean --force;\n# Run the compileProtos script for the first time to download runtime dependencies; ignore exit code\nRUN compileProtos || true\n\n# Install all required protoc versions, and install protobuf Python package.\nADD install_protoc.sh /\nRUN bash install_protoc.sh\n\n# Install grpc_csharp_plugin\nRUN curl -f -L https://www.nuget.org/api/v2/package/Grpc.Tools/1.17.1 -o temp.zip \\\n  && unzip -p temp.zip tools/linux_x64/grpc_csharp_plugin > /usr/local/bin/grpc_csharp_plugin \\\n  && chmod +x /usr/local/bin/grpc_csharp_plugin \\\n  && rm temp.zip\n\n# Setup JAVA_HOME, this is useful for docker commandline\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/\nRUN export JAVA_HOME\n\n# Install Go.\nRUN mkdir -p /golang \\\n  && cd /golang \\\n  && curl -f -L https://golang.org/dl/go1.14.6.linux-amd64.tar.gz > go.tar.gz \\\n  && ( echo '5c566ddc2e0bcfc25c26a5dc44a440fcc0177f7350c1f01952b34d5989a0d287  go.tar.gz' | sha256sum -c) \\\n  && tar xzf go.tar.gz \\\n  && rm go.tar.gz \\\n  && cd /\nENV PATH $PATH:/golang/go/bin\n\n# Download the go protobuf support.\nENV GOPATH /go\nENV PATH $GOPATH/bin:$PATH\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \"$GOPATH/pkg\" \\\n  && chmod -R 777 \"$GOPATH\" \\\n  && go get -u github.com/golang/protobuf/protoc-gen-go \\\n  && go clean -cache -testcache -modcache\n\n# Setup tools for codegen of Ruby\nRUN gem install rake --no-ri --no-rdoc \\\n  && gem install rubocop --version '= 0.39.0' --no-ri --no-rdoc \\\n  && gem install bundler --version '= 1.12.1' --no-ri --no-rdoc \\\n  && gem install rake --version '= 10.5.0' --no-ri --no-rdoc \\\n  && gem install grpc-tools --version '= 1.30.2' --no-ri --no-rdoc\n\n# Install grpc_php_plugin\nRUN git clone -b v1.17.1 --recurse-submodules --depth=1 https://github.com/grpc/grpc.git /temp/grpc \\\n  && cd /temp/grpc \\\n  && make -j $(nproc) grpc_php_plugin \\\n  && mv ./bins/opt/grpc_php_plugin /usr/local/bin/ \\\n  && cd / \\\n  && rm -r /temp/grpc\n\n# Install PHP formatting tools\nRUN curl -f -L https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.9.1/php-cs-fixer.phar -o /usr/local/bin/php-cs-fixer \\\n  && chmod a+x /usr/local/bin/php-cs-fixer \\\n  && cd /\nRUN curl -f -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf \\\n  && chmod a+x /usr/local/bin/phpcbf \\\n  && cd /\n\n# Used to add docstrings to the Python protoc output.\nRUN pip3 install --no-cache-dir git+https://github.com/googleapis/protoc-docs-plugin.git@proto3-optional#egg=protoc-docs-plugin\n\n# Install .NET Core SDK\nENV DOTNET_SDK_VERSION 1.0.4\nENV DOTNET_SDK_DOWNLOAD_URL https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-dev-ubuntu.16.04-x64.$DOTNET_SDK_VERSION.tar.gz\n\nRUN curl -f -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\n    && mkdir -p /usr/share/dotnet \\\n    && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n    && rm dotnet.tar.gz \\\n    && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n\n# Install googleapis.\nRUN git clone --single-branch https://github.com/googleapis/googleapis \\\n  && cd googleapis \\\n  && git checkout $GOOGLEAPIS_HASH \\\n  && cd .. \\\n  && rm -rf /googleapis/.git/\n\n# Install toolkit.\nRUN git clone --single-branch https://github.com/googleapis/gapic-generator toolkit \\\n  && cd toolkit/ \\\n  && git checkout $GAPIC_GENERATOR_HASH \\\n  && ./gradlew fatJar createToolPaths \\\n  && cd .. \\\n  && rm -rf /toolkit/.git/\nENV TOOLKIT_HOME /toolkit\n\n# Setup git config used by github commit pushing.\nRUN git config --global user.email googleapis-publisher@google.com \\\n  && git config --global user.name \"Google API Publisher\"\n\n# Setup artman user config\n# Note: This is somewhat brittle as it relies on a specific path\n# outside of or inside Docker.\n#\n# This should probably be fixed to have the smoke test itself provide\n# the configuration.\n# TODO (lukesneeringer): Fix this.\nRUN mkdir -p /root/\nADD artman-user-config-in-docker.yaml /root/.artman/config.yaml\n\n# Fix the setuptools version incompatibility with google-auth v1.7.0\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir --upgrade setuptools\n\n# Install artman.\nADD . /artman\nARG install_artman_from_source=false\n# installing master version of plugin\nRUN pip3 install --no-cache-dir git+https://github.com/googleapis/protoc-java-resource-names-plugin.git#egg=protoc-java-resource-names-plugin\nRUN if [ \"$install_artman_from_source\" = true ]; then \\\n pip3 install --no-cache-dir -e /artman; else pip3 install --no-cache-dir googleapis-artman==$ARTMAN_VERSION; rm -r /artman;fi\n"
}