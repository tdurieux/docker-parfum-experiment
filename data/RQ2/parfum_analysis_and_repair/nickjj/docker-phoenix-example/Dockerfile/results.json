{
  "startTime": 1674219439594,
  "endTime": 1674219440412,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 20,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 40,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "FROM node:16.15.1-bullseye-slim AS assets\n\nLABEL maintainer=\"Nick Janetakis <nick.janetakis@gmail.com>\"\n\nWORKDIR /app/assets\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends build-essential \\\n  && rm -rf /var/lib/apt/lists/* /usr/share/doc /usr/share/man \\\n  && apt-get clean \\\n  && mkdir -p /node_modules && chown node:node -R /node_modules /app\n\nUSER node\n\nCOPY --chown=node:node assets/package.json assets/*yarn* ./\n\nRUN yarn install && yarn cache clean && yarn cache clean;\n\nARG NODE_ENV=\"production\"\nENV NODE_ENV=\"${NODE_ENV}\" \\\n    PATH=\"${PATH}:/node_modules/.bin\" \\\n    USER=\"node\"\n\nCOPY --chown=node:node . ..\n\nRUN if [ \"${NODE_ENV}\" != \"development\" ]; then \\\n  ../run yarn:build:js && ../run yarn:build:css; else mkdir -p /app/priv/static; fi\n\n###############################################################################\n\nFROM elixir:1.13.4-slim AS dev\nLABEL maintainer=\"Nick Janetakis <nick.janetakis@gmail.com>\"\n\nWORKDIR /app\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends build-essential curl inotify-tools \\\n  && rm -rf /var/lib/apt/lists/* /usr/share/doc /usr/share/man \\\n  && apt-get clean \\\n  && useradd --create-home elixir \\\n  && mkdir -p /mix && chown elixir:elixir -R /mix /app\n\nUSER elixir\n\nRUN mix local.hex --force && mix local.rebar --force\n\nARG MIX_ENV=\"prod\"\nENV MIX_ENV=\"${MIX_ENV}\" \\\n    USER=\"elixir\"\n\nCOPY --chown=elixir:elixir mix.* ./\nRUN if [ \"${MIX_ENV}\" = \"dev\" ]; then \\\n  mix deps.get; else mix deps.get --only \"${MIX_ENV}\"; fi\n\nCOPY --chown=elixir:elixir config/config.exs config/\"${MIX_ENV}\".exs config/\nRUN mix deps.compile\n\nCOPY --chown=elixir:elixir --from=assets /app/priv/static /public\nCOPY --chown=elixir:elixir . .\n\nRUN if [ \"${MIX_ENV}\" != \"dev\" ]; then \\\n  ln -s /public /app/priv/static \\\n    && mix phx.digest && mix release && rm -rf /app/priv/static; fi\n\nENTRYPOINT [\"/app/bin/docker-entrypoint-web\"]\n\nEXPOSE 8000\n\nCMD [\"iex\", \"-S\", \"mix\", \"phx.server\"]\n\n###############################################################################\n\nFROM elixir:1.13.4-slim AS prod\nLABEL maintainer=\"Nick Janetakis <nick.janetakis@gmail.com>\"\n\nWORKDIR /app\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends curl \\\n  && rm -rf /var/lib/apt/lists/* /usr/share/doc /usr/share/man \\\n  && apt-get clean \\\n  && useradd --create-home elixir \\\n  && chown elixir:elixir -R /app\n\nUSER elixir\n\nENV USER=elixir\n\nCOPY --chown=elixir:elixir --from=dev /public /public\nCOPY --chown=elixir:elixir --from=dev /mix/_build/prod/rel/hello ./\nCOPY --chown=elixir:elixir bin/docker-entrypoint-web bin/\n\nENTRYPOINT [\"/app/bin/docker-entrypoint-web\"]\n\nEXPOSE 8000\n\nCMD [\"bin/hello\", \"start\"]\n"
}