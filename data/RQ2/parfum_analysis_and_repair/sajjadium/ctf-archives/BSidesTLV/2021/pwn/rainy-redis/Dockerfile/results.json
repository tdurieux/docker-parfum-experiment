{
  "startTime": 1674253083068,
  "endTime": 1674253084017,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 1,
        "columnEnd": 59
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 1,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.14\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN addgroup -S -g 1000 redis && adduser -S -G redis -u 999 redis\n# alpine already has a gid 999, so we'll use the next id\n\nRUN apk add --no-cache \\\n# grab su-exec for easy step-down from root\n\t\t'su-exec>=0.2' \\\n# add tzdata for https://github.com/docker-library/redis/issues/138\n\t\ttzdata\n\n# improvements\nCOPY patch_files/ /tmp/\n\nENV REDIS_VERSION 6.0.14\nENV REDIS_DOWNLOAD_URL http://download.redis.io/releases/redis-6.0.14.tar.gz\nENV REDIS_DOWNLOAD_SHA c3e60c928b183ca9fe8e878936a6f8ba99e0441b9b6e04d2412a750ea576c649\n\nRUN set -eux; \\\n\n\tapk add --no-cache --virtual .build-deps \\\n\t\tcoreutils \\\n\t\tdpkg-dev dpkg \\\n\t\tgcc \\\n\t\tlinux-headers \\\n\t\tmake \\\n\t\tmusl-dev \\\n\t\topenssl-dev \\\n\t\tpatch \\\n# install real \"wget\" to avoid:\n#   + wget -O redis.tar.gz http://download.redis.io/releases/redis-6.0.6.tar.gz\n#   Connecting to download.redis.io (45.60.121.1:80)\n#   wget: bad header line:     XxhODalH: btu; path=/; Max-Age=900\n\t\twget \\\n\t; \\\n\n\twget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \\\n\techo \"$REDIS_DOWNLOAD_SHA  *redis.tar.gz\" | sha256sum -c -; \\\n\tmkdir -p /usr/src/redis; \\\n\ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \\\n\trm redis.tar.gz; \\\n\n# disable Redis protected mode [1] as it is unnecessary in context of Docker\n# (ports are not automatically exposed when running inside Docker, but rather explicitly by specifying -p / -P)\n# [1]: https://github.com/redis/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da\n\tgrep -E '^ *createBoolConfig[(]\"protected-mode\",.*, *1 *,.*[)],$' /usr/src/redis/src/config.c; \\\n\tsed -ri 's!^( *createBoolConfig[(]\"protected-mode\",.*, *)1( *,.*[)],)$!\\10\\2!' /usr/src/redis/src/config.c; \\\n\tgrep -E '^ *createBoolConfig[(]\"protected-mode\",.*, *0 *,.*[)],$' /usr/src/redis/src/config.c; \\\n# for future reference, we modify this directly in the source instead of just supplying a default configuration flag because apparently \"if you specify any argument to redis-server, [it assumes] you are going to specify everything\"\n# see also https://github.com/docker-library/redis/issues/4#issuecomment-50780840\n# (more exactly, this makes sure the default behavior of \"save on SIGTERM\" stays functional by default)\n\n# https://github.com/jemalloc/jemalloc/issues/467 -- we need to patch the \"./configure\" for the bundled jemalloc to match how Debian compiles, for compatibility\n# (also, we do cross-builds, so we need to embed the appropriate \"--build=xxx\" values to that \"./configure\" invocation)\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\textraJemallocConfigureFlags=\"--build=$gnuArch\"; \\\n# https://salsa.debian.org/debian/jemalloc/-/blob/c0a88c37a551be7d12e4863435365c9a6a51525f/debian/rules#L8-23\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"${dpkgArch##*-}\" in \\\n\t\tamd64 | i386 | x32) extraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-page=12\" ;; \\\n\t\t*) extraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-page=16\" ;; \\\n\tesac; \\\n\textraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-hugepage=21\"; \\\n\tgrep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile; \\\n\tsed -ri 's!cd jemalloc && ./configure !&'\"$extraJemallocConfigureFlags\"' !' /usr/src/redis/deps/Makefile; \\\n\tgrep -F \"cd jemalloc && ./configure $extraJemallocConfigureFlags \" /usr/src/redis/deps/Makefile; \\\n\n\tmv /tmp/*.diff /usr/src/redis; \\\n\tpatch -p0 -i /usr/src/redis/p1_lua.diff -d /usr/src; \\\n\tpatch -p0 -i /usr/src/redis/p2_scripting_init.diff -d /usr/src; \\\n\n\texport BUILD_TLS=yes; \\\n\tmake -C /usr/src/redis -j \"$(nproc)\" all CXX=-g3 CFLAGS=\"-g3\" CXXFLAGS=\"-g3\"; \\\n\tmake -C /usr/src/redis install; \\\n\n# TODO https://github.com/redis/redis/pull/3494 (deduplicate \"redis-server\" copies)\n\tserverMd5=\"$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)\"; export serverMd5; \\\n\tfind /usr/local/bin/redis* -maxdepth 0 \\\n\t\t-type f -not -name redis-server \\\n\t\t-exec sh -eux -c ' \\\n\t\t\tmd5=\"$(md5sum \"$1\" | cut -d\" \" -f1)\"; \\\n\t\t\ttest \"$md5\" = \"$serverMd5\"; \\\n\t\t' -- '{}' ';' \\\n\t\t-exec ln -svfT 'redis-server' '{}' ';' \\\n\t; \\\n\n\trm -r /usr/src/redis; \\\n\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --no-network --virtual .redis-rundeps $runDeps; \\\n\tapk del --no-network .build-deps; \\\n\n\tredis-cli --version; \\\n\tredis-server --version\n\nRUN mkdir /data && chown redis:redis /data\nVOLUME /data\nWORKDIR /data\n\nRUN mkdir -p \"/usr/local/redis/\"\nCOPY redis.conf /usr/local/redis/\nCOPY docker-entrypoint.sh /usr/local/bin/\n\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nUSER redis\nEXPOSE 6379\nCMD [\"redis-server\", \"/usr/local/redis/redis.conf\"]"
}