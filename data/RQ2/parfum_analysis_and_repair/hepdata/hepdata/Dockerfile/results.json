{
  "startTime": 1674217289605,
  "endTime": 1674217290275,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 1,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9\n\nWORKDIR /usr/src/app\n\nENV PYTHONBUFFERED=0 \\\n    SSL_CERT_FILE=\"/etc/ssl/certs/ca-certificates.crt\" \\\n    REQUESTS_CA_BUNDLE=\"/etc/ssl/certs/ca-certificates.crt\"\n\nCOPY certs/CERN_Root_Certification_Authority_2.pem /usr/local/share/ca-certificates/CERN_Root_Certification_Authority_2.crt\nCOPY certs/CERN_Grid_Certification_Authority.crt /usr/local/share/ca-certificates/CERN_Grid_Certification_Authority.crt\n\nRUN update-ca-certificates \\\n && pip config set global.cert \"${REQUESTS_CA_BUNDLE}\"\n\nENTRYPOINT [ \"python3\" ]\nCMD [ \"--version\" ]\n\nARG APP_ENVIRONMENT\n\nRUN curl -f -sL https://deb.nodesource.com/setup_14.x | bash -\nRUN apt-get update && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /code\n\nCOPY . .\n\nRUN pip install --no-cache-dir --upgrade pip && \\\n pip install --no-cache-dir --upgrade setuptools && \\\n pip install --no-cache-dir --upgrade wheel && \\\n pip install --no-cache-dir -e . -r requirements.txt\n\nRUN bash -c \"set -x; [[ ${APP_ENVIRONMENT:-prod} = local-web ]] && \\\n  pip install -e .[all] || echo 'Not installing test or doc requirements on prod or worker build'\"\n\nRUN hepdata collect -v  && \\\n  hepdata webpack create && \\\n  # --unsafe needed because we are running as root\n  hepdata webpack install --unsafe && \\\n  hepdata webpack build\n\n\nRUN bash -c \"echo $APP_ENVIRONMENT\"\n\nRUN bash -c \"set -x; [[ ${APP_ENVIRONMENT:-prod} = local-web ]] && (cd /usr/local/var && wget https://saucelabs.com/downloads/sc-4.7.1-linux.tar.gz && \\\n  tar -xvf sc-4.7.1-linux.tar.gz) || echo 'Not installing SC on prod or worker build'\"\n\nWORKDIR /code\n\nENTRYPOINT []\n"
}