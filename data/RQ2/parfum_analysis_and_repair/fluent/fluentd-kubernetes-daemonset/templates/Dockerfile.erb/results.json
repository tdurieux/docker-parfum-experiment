{
  "startTime": 1674215077394,
  "endTime": 1674215078273,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 152
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 156,
        "columnEnd": 236
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 239,
        "columnEnd": 286
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "<% fluentd_ver = version.split(\"-\").first %>\n<% target = (dockerfile.split(\"/\").last.split(\"-\").last) %>\n<% requires_git = %w(graylog).include? target %>\n<% is_arm64 = (dockerfile.split(\"/\")[1] == \"arm64\") %>\n# AUTOMATICALLY GENERATED\n# DO NOT EDIT THIS FILE DIRECTLY, USE /templates/Dockerfile.erb\n\n<% if is_arm64 %>\n# For multiarch build on Docker hub automated build.\nFROM golang:alpine AS builder\nWORKDIR /go\nENV QEMU_DOWNLOAD_SHA256 5db25cccb40ac7b1ca857653b883376b931d91b06ff34ffe70dcf6180bd07bb8\nRUN apk add curl --no-cache\nRUN curl -f -sL -o qemu-6.0.0.balena1-aarch64.tar.gz https://github.com/balena-io/qemu/releases/download/v6.0.0%2Bbalena1/qemu-6.0.0.balena1-aarch64.tar.gz && echo \"$QEMU_DOWNLOAD_SHA256  *qemu-6.0.0.balena1-aarch64.tar.gz\" | sha256sum -c - | tar zxvf qemu-6.0.0.balena1-aarch64.tar.gz -C . && mv qemu-6.0.0+balena1-aarch64/qemu-aarch64-static . && rm qemu-6.0.0.balena1-aarch64.tar.gz\n\nFROM fluent/fluentd:<%= fluentd_ver %>-debian-arm64-1.0\nCOPY --from=builder /go/qemu-aarch64-static /usr/bin/\n<% else %>\nFROM fluent/fluentd:<%= fluentd_ver %>-debian-1.0\n<% end %>\n\nLABEL maintainer=\"Eduardo Silva <eduardo@treasure-data.com>\"\nUSER root\nWORKDIR /home/fluent\nENV PATH /fluentd/vendor/bundle/ruby/<%= ruby_version %>.0/bin:$PATH\nENV GEM_PATH /fluentd/vendor/bundle/ruby/<%= ruby_version %>.0\nENV GEM_HOME /fluentd/vendor/bundle/ruby/<%= ruby_version %>.0\n# skip runtime bundler installation\nENV FLUENTD_DISABLE_BUNDLER_INJECTION 1\n\nCOPY Gemfile* /fluentd/\nRUN buildDeps=\"sudo make gcc g++ libc-dev libffi-dev<% if target == \"graylog\" %> build-essential patch zlib1g-dev liblzma-dev<% elsif target == \"kafka\" || target == \"kafka2\" %> build-essential autoconf automake libtool pkg-config<% elsif target == \"s3\" %> curl<% end %><% if requires_git %> git<% end %>\" \\\n  runtimeDeps=\"<% if target == \"kafka\" || target == \"kafka2\" %>krb5-kdc libsasl2-modules-gssapi-mit libsasl2-dev<% elsif target == \"azureblob\" %>pkg-config libxslt-dev libxml2-dev<% end %>\" \\\n     <% if target == \"kafka\" || target == \"kafka2\" %> && export DEBIAN_FRONTEND=noninteractive <% end %> && apt-get update \\\n     && apt-get upgrade -y \\\n     && apt-get install \\\n     -y --no-install-recommends \\\n     $buildDeps $runtimeDeps net-tools \\\n    && gem install bundler --version 2.2.24 \\\n    && bundle config silence_root_warning true<% if target == \"azureblob\" %> && bundle config build.nokogiri --use-system-libraries<% end %> \\\n    && bundle install --gemfile=/fluentd/Gemfile --path=/fluentd/vendor/bundle \\\n<% if target == \"s3\" %>\n    && curl -sL -o columnify_0.1.0_Linux_x86_64.tar.gz https://github.com/reproio/columnify/releases/download/v0.1.0/columnify_0.1.0_Linux_x86_64.tar.gz \\\n    && tar xf columnify_0.1.0_Linux_x86_64.tar.gz \\\n    && rm LICENSE README.md columnify_0.1.0_Linux_x86_64.tar.gz \\\n    && mv columnify /usr/local/bin/ \\\n<% end %>\n    && SUDO_FORCE_REMOVE=yes \\\n    apt-get purge -y --auto-remove \\\n                  -o APT::AutoRemove::RecommendsImportant=false \\\n                  $buildDeps \\\n && rm -rf /var/lib/apt/lists/* \\\n    && gem sources --clear-all \\\n    && rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem<% if target == \"kafka\" || target == \"kafka2\" %> \\\n    && ldd $(gem contents rdkafka | grep librdkafka.so) | grep libsasl2.so.2\n    <% end %>\n\n# Copy configuration files\nCOPY ./conf/fluent.conf /fluentd/etc/\nCOPY ./conf/systemd.conf /fluentd/etc/\nCOPY ./conf/kubernetes.conf /fluentd/etc/\nCOPY ./conf/prometheus.conf /fluentd/etc/\nCOPY ./conf/tail_container_parse.conf /fluentd/etc/\nCOPY ./conf/kubernetes/*.conf /fluentd/etc/kubernetes/\nRUN touch /fluentd/etc/disable.conf\n\n# Copy plugins\nCOPY plugins /fluentd/plugins/\nCOPY entrypoint.sh /fluentd/entrypoint.sh\n\n# Environment variables\nENV FLUENTD_OPT=\"\"\nENV FLUENTD_CONF=\"fluent.conf\"\n\n# Overwrite ENTRYPOINT to run fluentd as root for /var/log / /var/lib\nENTRYPOINT [\"tini\", \"--\", \"/fluentd/entrypoint.sh\"]\n"
}