{
  "startTime": 1674219580138,
  "endTime": 1674219581849,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 9,
        "columnEnd": 24
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 9,
        "columnEnd": 24
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 9,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 88,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 100,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 114,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 88,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 100,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 114,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Special Dockerfile to build all Ubuntu targets, the only difference is\n# the packages in the base image.\n# Set this to the base image to use in each case, so if we want to build for ubuntu/20.04\n# we would set BASE_BUILDER=ubuntu-20.04-base.\nARG BASE_BUILDER\n# Lookup the name to use below but should follow the '<distro>-base' convention with slashes replaced.\n# Use buildkit to skip unused base images: DOCKER_BUILDKIT=1\n\n# Multiarch support\nFROM multiarch/qemu-user-static:x86_64-aarch64 as multiarch-aarch64\n\n# ubuntu/16.04 base image\nFROM ubuntu:16.04 as ubuntu-16.04-base\nENV DEBIAN_FRONTEND noninteractive\n\n# Using pipe below\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential libsystemd-dev cmake \\\n    make bash wget unzip nano vim valgrind dh-make flex bison \\\n    libpq-dev postgresql-server-dev-all software-properties-common \\\n    software-properties-common libyaml-dev \\\n    apt-transport-https ca-certificates && \\\n    wget -q -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \\\n         gpg --batch --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \\\n         apt-add-repository 'deb https://apt.kitware.com/ubuntu/ xenial main' && \\\n    apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release cmake && rm -rf /var/lib/apt/lists/*;\n\n# ubuntu/18.04 base image\nFROM ubuntu:18.04 as ubuntu-18.04-base\nENV DEBIAN_FRONTEND noninteractive\n\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential libsystemd-dev \\\n    cmake make bash wget unzip nano vim valgrind dh-make flex bison \\\n    libpq-dev postgresql-server-dev-all \\\n    libsasl2-2 libsasl2-dev openssl libssl-dev libssl1.1 \\\n    software-properties-common libyaml-dev \\\n    apt-transport-https ca-certificates && \\\n    wget -q -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \\\n         gpg --batch --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \\\n         apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \\\n    apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release cmake && rm -rf /var/lib/apt/lists/*;\n\n# ubuntu/18.04.arm64v8 base image\nFROM arm64v8/ubuntu:18.04 as ubuntu-18.04.arm64v8-base\nENV DEBIAN_FRONTEND noninteractive\n\nCOPY --from=multiarch-aarch64 /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static\n\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential libsystemd-dev \\\n    cmake make bash wget unzip nano vim valgrind dh-make flex bison \\\n    libpq-dev postgresql-server-dev-all \\\n    libsasl2-2 libsasl2-dev openssl libssl-dev libssl1.1 \\\n    software-properties-common libyaml-dev \\\n    apt-transport-https ca-certificates && \\\n    wget -q -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \\\n         gpg --batch --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \\\n         apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \\\n    apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release cmake && rm -rf /var/lib/apt/lists/*;\n\n# ubuntu/20.04 base image\nFROM ubuntu:20.04 as ubuntu-20.04-base\nENV DEBIAN_FRONTEND noninteractive\n\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential libsystemd-dev \\\n    cmake make bash wget unzip nano vim valgrind dh-make flex bison \\\n    libpq-dev postgresql-server-dev-all \\\n    libsasl2-2 libsasl2-dev openssl libssl-dev libssl1.1 libyaml-dev && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release && rm -rf /var/lib/apt/lists/*;\n\n# ubuntu/20.04.arm64v8 base image\nFROM arm64v8/ubuntu:20.04 as ubuntu-20.04.arm64v8-base\nENV DEBIAN_FRONTEND noninteractive\n\nCOPY --from=multiarch-aarch64 /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static\n\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential libsystemd-dev \\\n    cmake make bash wget unzip nano vim valgrind dh-make flex bison \\\n    libpq-dev postgresql-server-dev-all \\\n    libsasl2-2 libsasl2-dev openssl libssl-dev libssl1.1 libyaml-dev && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release && rm -rf /var/lib/apt/lists/*;\n\n# ubuntu/22.04 base image\nFROM ubuntu:22.04 as ubuntu-22.04-base\nENV DEBIAN_FRONTEND noninteractive\n\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential libsystemd-dev \\\n    cmake make bash wget unzip nano vim valgrind dh-make flex bison \\\n    libpq-dev postgresql-server-dev-all libpq5 \\\n    libsasl2-2 libsasl2-dev openssl libssl-dev libssl3 libyaml-dev && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release && rm -rf /var/lib/apt/lists/*;\n\n# ubuntu/22.04.arm64v8 base image\nFROM arm64v8/ubuntu:22.04 as ubuntu-22.04.arm64v8-base\nENV DEBIAN_FRONTEND noninteractive\n\nCOPY --from=multiarch-aarch64 /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static\n\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential libsystemd-dev \\\n    cmake make bash wget unzip nano vim valgrind dh-make flex bison \\\n    libpq-dev postgresql-server-dev-all libpq5 \\\n    libsasl2-2 libsasl2-dev openssl libssl-dev libssl3 libyaml-dev && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release && rm -rf /var/lib/apt/lists/*;\n\n# Common build for all distributions now\n# hadolint ignore=DL3006\nFROM $BASE_BUILDER as builder\n\nARG FLB_NIGHTLY_BUILD\nENV FLB_NIGHTLY_BUILD=$FLB_NIGHTLY_BUILD\n\n# Docker context must be the base of the repo\nWORKDIR /tmp/fluent-bit/\nCOPY . ./\n\nWORKDIR /tmp/fluent-bit/build/\n# CMake configuration variables\nARG CFLAGS=\"-std=gnu99\"\nARG CMAKE_INSTALL_PREFIX=/opt/td-agent-bit/\nARG CMAKE_INSTALL_SYSCONFDIR=/etc/\nARG FLB_TD=On\nARG FLB_RELEASE=On\nARG FLB_TRACE=On\nARG FLB_SQLDB=On\nARG FLB_HTTP_SERVER=On\nARG FLB_OUT_KAFKA=On\nARG FLB_OUT_PGSQL=On\nARG FLB_JEMALLOC=On\n\nENV CFLAGS=$CFLAGS\nRUN cmake -DCMAKE_INSTALL_PREFIX=\"$CMAKE_INSTALL_PREFIX\" \\\n          -DCMAKE_INSTALL_SYSCONFDIR=\"$CMAKE_INSTALL_SYSCONFDIR\" \\\n          -DFLB_RELEASE=\"$FLB_RELEASE\" \\\n          -DFLB_TRACE=\"$FLB_TRACE\" \\\n          -DFLB_TD=\"$FLB_TD\" \\\n          -DFLB_SQLDB=\"$FLB_SQLDB\" \\\n          -DFLB_HTTP_SERVER=\"$FLB_HTTP_SERVER\" \\\n          -DFLB_OUT_KAFKA=\"$FLB_OUT_KAFKA\" \\\n          -DFLB_OUT_PGSQL=\"$FLB_OUT_PGSQL\" \\\n          -DFLB_NIGHTLY_BUILD=\"$FLB_NIGHTLY_BUILD\" \\\n          -DFLB_JEMALLOC=\"${FLB_JEMALLOC}\" \\\n          ../\n\nVOLUME [ \"/output\" ]\nCMD [ \"/bin/bash\", \"-c\", \"make -j 4 && cpack -G DEB && cp *.deb /output/\" ]\n"
}