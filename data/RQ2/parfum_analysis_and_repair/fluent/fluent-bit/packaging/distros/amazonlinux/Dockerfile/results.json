{
  "startTime": 1674252041333,
  "endTime": 1674252041987,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 16,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 30,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Special Dockerfile to build all Ubuntu targets, the only difference is\n# the packages in the base image.\n# Set this to the base image to use in each case, so if we want to build for amazonlinux/2.arm64v8\n# we would set BASE_BUILDER=amazonlinux-2.arm64v8-base.\nARG BASE_BUILDER\n# Lookup the name to use below but should follow the '<distro>-base' convention with slashes replaced.\n# Use buildkit to skip unused base images: DOCKER_BUILDKIT=1\n\n# Multiarch support\nFROM multiarch/qemu-user-static:x86_64-aarch64 as multiarch-aarch64\n\n# amazonlinux/2 base image\nFROM amazonlinux:2 as amazonlinux-2-base\n\n# hadolint ignore=DL3033\nRUN yum -y update && \\\n    yum install -y rpm-build curl ca-certificates gcc gcc-c++ cmake make bash \\\n                   wget unzip systemd-devel wget flex bison \\\n                   cyrus-sasl-lib cyrus-sasl-devel openssl openss-libs openssl-devel \\\n                   postgresql-devel postgresql-libs \\\n                   cmake3 libyaml-devel && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# amazonlinux/2.arm64v8 base image\nFROM arm64v8/amazonlinux:2 as amazonlinux-2.arm64v8-base\n\nCOPY --from=multiarch-aarch64 /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static\n\n# hadolint ignore=DL3033\nRUN yum -y update && \\\n    yum install -y rpm-build curl ca-certificates gcc gcc-c++ cmake make bash \\\n                   wget unzip systemd-devel wget flex bison \\\n                   cyrus-sasl-lib cyrus-sasl-devel openssl openss-libs openssl-devel \\\n                   postgresql-devel postgresql-libs \\\n                   cmake3 libyaml-devel && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# Common build for all distributions now\n# hadolint ignore=DL3006\nFROM $BASE_BUILDER as builder\n\nARG FLB_NIGHTLY_BUILD\nENV FLB_NIGHTLY_BUILD=$FLB_NIGHTLY_BUILD\n\n# Docker context must be the base of the repo\nWORKDIR /tmp/fluent-bit/\nCOPY . ./\n\nWORKDIR /tmp/fluent-bit/build/\n# CMake configuration variables\n# Unused\nARG CFLAGS\nARG CMAKE_INSTALL_PREFIX=/opt/td-agent-bit/\nARG CMAKE_INSTALL_SYSCONFDIR=/etc/\nARG FLB_TD=On\nARG FLB_RELEASE=On\nARG FLB_TRACE=On\nARG FLB_SQLDB=On\nARG FLB_HTTP_SERVER=On\nARG FLB_OUT_KAFKA=On\nARG FLB_OUT_PGSQL=On\nARG FLB_JEMALLOC=On\n\nRUN cmake3 -DCMAKE_INSTALL_PREFIX=\"$CMAKE_INSTALL_PREFIX\" \\\n           -DCMAKE_INSTALL_SYSCONFDIR=\"$CMAKE_INSTALL_SYSCONFDIR\" \\\n           -DFLB_RELEASE=\"$FLB_RELEASE\" \\\n           -DFLB_TRACE=\"$FLB_TRACE\" \\\n           -DFLB_TD=\"$FLB_TD\" \\\n           -DFLB_SQLDB=\"$FLB_SQLDB\" \\\n           -DFLB_HTTP_SERVER=\"$FLB_HTTP_SERVER\" \\\n           -DFLB_OUT_KAFKA=\"$FLB_OUT_KAFKA\" \\\n           -DFLB_OUT_PGSQL=\"$FLB_OUT_PGSQL\" \\\n           -DFLB_NIGHTLY_BUILD=\"$FLB_NIGHTLY_BUILD\" \\\n           -DFLB_JEMALLOC=\"${FLB_JEMALLOC}\" \\\n           ../\n\nVOLUME [ \"/output\" ]\nCMD [ \"/bin/bash\", \"-c\", \"make -j 4 && cpack3 -G RPM && cp *.rpm /output/\" ]\n"
}