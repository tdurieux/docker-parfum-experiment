{
  "startTime": 1674217333558,
  "endTime": 1674217334367,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Special Dockerfile to build all Ubuntu targets, the only difference is\n# the packages in the base image.\n# Set this to the base image to use in each case, so if we want to build for ubuntu/20.04\n# we would set BASE_BUILDER=ubuntu-20.04-base.\nARG BASE_BUILDER\n# Lookup the name to use below but should follow the '<distro>-base' convention with slashes replaced.\n# Use buildkit to skip unused base images: DOCKER_BUILDKIT=1\n\n# raspbian/buster base image\n# Use deprecated image as it pins dependencies to working ones.\n# Current balenalib/rpi-raspbian:buster triggers cmake failures for GNU C compiler detection\nFROM resin/rpi-raspbian:buster as raspbian-buster-base\nENV DEBIAN_FRONTEND noninteractive\n\n# Builder image so dependencies can be latest, recommended and no need to wipe\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential \\\n                           cmake make bash sudo wget unzip dh-make \\\n                           libsystemd-dev zlib1g-dev flex bison \\\n                           libssl1.1 libssl-dev libpq-dev postgresql-server-dev-all \\\n                           libsasl2-2 libsasl2-dev libyaml-dev && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release && rm -rf /var/lib/apt/lists/*;\n\n# raspbian/bullseye base image\nFROM balenalib/rpi-raspbian:bullseye as raspbian-bullseye-base\nENV DEBIAN_FRONTEND noninteractive\n\n# hadolint ignore=DL3008,DL3015\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y -qq curl ca-certificates build-essential \\\n                           cmake make bash sudo wget unzip dh-make \\\n                           libsystemd-dev zlib1g-dev flex bison \\\n                           libssl1.1 libssl-dev libpq-dev postgresql-server-dev-all \\\n                           libsasl2-2 libsasl2-dev libyaml-dev && \\\n    apt-get install --no-install-recommends -y -qq --reinstall lsb-base lsb-release && rm -rf /var/lib/apt/lists/*;\n\n# Common build for all distributions now\n# hadolint ignore=DL3006\nFROM $BASE_BUILDER as builder\n\nARG FLB_NIGHTLY_BUILD\nENV FLB_NIGHTLY_BUILD=$FLB_NIGHTLY_BUILD\n\n# Docker context must be the base of the repo\nWORKDIR /tmp/fluent-bit/\nCOPY . ./\n\nWORKDIR /tmp/fluent-bit/build/\n# CMake configuration variables\nARG CFLAGS=\"-std=gnu99\"\nARG CMAKE_INSTALL_PREFIX=/opt/td-agent-bit/\nARG CMAKE_INSTALL_SYSCONFDIR=/etc/\nARG FLB_TD=On\nARG FLB_RELEASE=On\nARG FLB_TRACE=On\nARG FLB_SQLDB=On\nARG FLB_HTTP_SERVER=On\nARG FLB_OUT_KAFKA=On\nARG FLB_OUT_PGSQL=On\nARG FLB_JEMALLOC=On\n\nENV CFLAGS=$CFLAGS\nRUN cmake -DCMAKE_INSTALL_PREFIX=\"$CMAKE_INSTALL_PREFIX\" \\\n          -DCMAKE_INSTALL_SYSCONFDIR=\"$CMAKE_INSTALL_SYSCONFDIR\" \\\n          -DFLB_RELEASE=\"$FLB_RELEASE\" \\\n          -DFLB_TRACE=\"$FLB_TRACE\" \\\n          -DFLB_TD=\"$FLB_TD\" \\\n          -DFLB_SQLDB=\"$FLB_SQLDB\" \\\n          -DFLB_HTTP_SERVER=\"$FLB_HTTP_SERVER\" \\\n          -DFLB_OUT_KAFKA=\"$FLB_OUT_KAFKA\" \\\n          -DFLB_OUT_PGSQL=\"$FLB_OUT_PGSQL\" \\\n          -DFLB_NIGHTLY_BUILD=\"$FLB_NIGHTLY_BUILD\" \\\n          -DFLB_JEMALLOC=\"${FLB_JEMALLOC}\" \\\n          ../\n\nVOLUME [ \"/output\" ]\nCMD [ \"/bin/bash\", \"-c\", \"make -j 4 && cpack -G DEB && cp *.deb /output/\" ]\n"
}