{
  "startTime": 1674254514812,
  "endTime": 1674254515774,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 0,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG UBUNTU_RELEASE=20.04\nARG RUSTUP_TOOLCHAIN=1.46.0\nARG GOLANG_RELEASE=1.15.2\nARG PODMAN_TAG=v2.1.0-rc2\n\nARG DEFAULT_PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\nFROM ubuntu:${UBUNTU_RELEASE} AS builder\nARG DEFAULT_PATH\nENV PATH ${DEFAULT_PATH}\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\n# Install distro packages\n\nWORKDIR /root\nRUN apt-get update && apt-get install --no-install-recommends -y dos2unix && rm -rf /var/lib/apt/lists/*;\n\nCOPY docker/install/nodejs-current.sh ./\nRUN dos2unix -q nodejs-current.sh; bash ./nodejs-current.sh\n\nCOPY docker/install/gvisor.sh ./\nRUN dos2unix -q gvisor.sh; sh ./gvisor.sh\n\nCOPY docker/install/yarn.sh ./\nRUN dos2unix -q yarn.sh; sh ./yarn.sh\n\nCOPY docker/install/build-deps.sh ./\nRUN dos2unix -q build-deps.sh; sh ./build-deps.sh\n\n# Make non-root users, switch to builder\n\nRUN adduser builder --disabled-login </dev/null >/dev/null 2>/dev/null\nRUN adduser rectangle-device --disabled-login </dev/null >/dev/null 2>/dev/null\nUSER builder:builder\nWORKDIR /home/builder\n\n# Install official go binary package\n\nFROM builder as golang\nARG DEFAULT_PATH\nARG GOLANG_RELEASE\nENV GOROOT /home/builder/dist/go\nENV GOPATH /home/builder/go\nENV PATH /home/builder/dist/go/bin:/home/builder/go/bin:${DEFAULT_PATH}\nRUN \\\n mkdir dist && \\\ncd dist && \\\n curl -f https://dl.google.com/go/go${GOLANG_RELEASE}.linux-amd64.tar.gz | \\\ntar zxf -\n\n# Build podman from git, with patches\n\nFROM golang as podman\nARG PODMAN_TAG\n\nRUN git clone https://github.com/containers/podman/ -b ${PODMAN_TAG} /home/builder/go/src/github.com/containers/podman\nCOPY docker/nested-podman/podman-always-rootless.patch /home/builder/go/src/github.com/containers/podman\nCOPY docker/nested-podman/podman-no-namespace-clone.patch /home/builder/go/src/github.com/containers/podman\nRUN \\\ncd /home/builder/go/src/github.com/containers/podman && \\\npatch -p1 < podman-always-rootless.patch && \\\npatch -p1 < podman-no-namespace-clone.patch && \\\nexport GOPATH=/home/builder/go && \\\nmake BUILDTAGS=\"selinux seccomp -systemd\"\nUSER root\nRUN \\\ncd /home/builder/go/src/github.com/containers/podman && \\\nmake install PREFIX=/usr\nUSER builder:builder\n\n# Install official rust binary package\n\nFROM builder as rust\nARG DEFAULT_PATH\nARG RUSTUP_TOOLCHAIN\nCOPY --chown=builder docker/install/rustup-init.sh ./\nENV RUSTUP_TOOLCHAIN ${RUSTUP_TOOLCHAIN}\nRUN dos2unix -q rustup-init.sh; ./rustup-init.sh -y 2>&1\nENV PATH /home/builder/.cargo/bin:${DEFAULT_PATH}\n\n# Compile rust dependencies using a skeleton crate, for faster docker rebuilds.\n# The list of packages built in this stage is generated by parsing the Cargo.lock\n# and filtering out any duplicate versions or problematic packages. This step\n# can be removed entirely if it breaks, it's just here to try and make the next\n# couple of stages must faster.\n\nFROM rust as skeleton\nCOPY --chown=builder docker/skeleton/ ./\nRUN cargo build --release 2>&1\nCOPY --chown=builder Cargo.lock ./\nRUN target/release/rectangle-device | \\\negrep -v '^(rectangle-device|cargo|wasi|redox|wepoll|hermit|ws|win|aesni)' \\\n>> Cargo.toml && cat Cargo.toml\nRUN cargo build --release 2>&1\n\n# Compile player workspace separately, also for faster docker rebuilds\n\nCOPY --chown=builder player player\nCOPY --chown=builder docker/skeleton/Cargo.toml ./\nRUN \\\necho '[workspace]' >> Cargo.toml && \\\necho 'members = [ \"player\" ]' >> Cargo.toml && \\\ncd player && cargo build --release -vv 2>&1\n\n# Replace the skeleton with the real app and build it\n\nFROM skeleton as app\nCOPY --chown=builder Cargo.toml Cargo.toml\nCOPY --chown=builder sandbox sandbox\nCOPY --chown=builder blocks blocks\nCOPY --chown=builder network network\nCOPY --chown=builder media media\nCOPY --chown=builder src src\nRUN cargo build --release --bins 2>&1\n\n# Post-build install and configure, as root again\n\nUSER root\nRUN install target/release/rectangle-device /usr/bin/rectangle-device\n\nCOPY --from=podman /usr/bin/podman /usr/bin/podman\n\nCOPY docker/nested-podman/containers.conf /etc/containers/containers.conf\nCOPY docker/nested-podman/storage.conf /etc/containers/storage.conf\nCOPY docker/nested-podman/policy.json /etc/containers/policy.json\nCOPY docker/nested-podman/registries.conf /etc/containers/registries.conf\n\n# Pull initial set of transcode images as the app user\n\n#xxx, testing podman as root inside the container\nRUN podman pull docker.io/jrottenberg/ffmpeg:4.3.1-scratch38 2>&1\nRUN podman run docker.io/jrottenberg/ffmpeg:4.3.1-scratch38 2>&1\n\nUSER rectangle-device\nWORKDIR /home/rectangle-device\nRUN podman pull docker.io/jrottenberg/ffmpeg:4.3.1-scratch38 2>&1\n\n# Packaging the parts of this image we intend to keep\n\nUSER root\nWORKDIR /\nRUN tar chf - \\\n#\n# App\nusr/bin/rectangle-device \\\nhome/rectangle-device \\\n#\n# System binaries, as needed\nbin/ls \\\nbin/ldd \\\nbin/openssl \\\nusr/bin/newuidmap \\\n#\n# Podman container engine\nusr/bin/podman \\\nusr/libexec/podman \\\nusr/bin/nsenter \\\nusr/bin/runsc \\\netc/containers \\\nvar/run/containers \\\nvar/lib/containers \\\n#\n# System data files\nusr/share/zoneinfo \\\nusr/share/ca-certificates \\\netc/ssl \\\netc/passwd \\\netc/group \\\netc/shadow \\\netc/subuid \\\netc/subgid \\\n#\n# Dynamic libraries, as needed\nlib64 \\\nusr/lib64 \\\nlib/x86_64-linux-gnu/libc.so.6 \\\nlib/x86_64-linux-gnu/libm.so.6 \\\nlib/x86_64-linux-gnu/libtinfo.so.6 \\\nlib/x86_64-linux-gnu/libssl.so.1.1 \\\nlib/x86_64-linux-gnu/libcrypto.so.1.1 \\\nlib/x86_64-linux-gnu/libz.so.1 \\\nlib/x86_64-linux-gnu/libdl.so.2 \\\nlib/x86_64-linux-gnu/libpthread.so.0 \\\nlib/x86_64-linux-gnu/libgpgme.so.11 \\\nlib/x86_64-linux-gnu/libgcc_s.so.1 \\\nlib/x86_64-linux-gnu/libseccomp.so.2 \\\nlib/x86_64-linux-gnu/librt.so.1 \\\nlib/x86_64-linux-gnu/libassuan.so.0 \\\nlib/x86_64-linux-gnu/libgpg-error.so.0 \\\nlib/x86_64-linux-gnu/libyajl.so.2 \\\nlib/x86_64-linux-gnu/libsystemd.so.0 \\\nlib/x86_64-linux-gnu/liblzma.so.5 \\\nlib/x86_64-linux-gnu/liblz4.so.1 \\\nlib/x86_64-linux-gnu/libselinux.so.1 \\\nlib/x86_64-linux-gnu/libpcre2-8.so.0 \\\nlib/x86_64-linux-gnu/libgcrypt.so.20 \\\nlib/x86_64-linux-gnu/libglib-2.0.so.0 \\\nlib/x86_64-linux-gnu/libpcre.so.3 \\\n#\n| ( \\\n  mkdir image && \\\n  cd image && \\\n  tar pxf - && \\\n  mkdir proc sys dev tmp var/tmp && \\\n  chmod 01777 tmp var/tmp \\\n)\n\nFROM scratch\nARG DEFAULT_PATH\nCOPY --from=app /image/ /\nWORKDIR /\nENV PATH ${DEFAULT_PATH}\nUSER rectangle-device\nENTRYPOINT [ \"/usr/bin/rectangle-device\" ]\nCMD [ \"--help\" ]\n\n# Incoming libp2p connections\nEXPOSE 4004/tcp\n"
}