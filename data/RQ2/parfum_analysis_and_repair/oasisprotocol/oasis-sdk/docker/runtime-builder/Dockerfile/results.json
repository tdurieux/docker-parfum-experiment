{
  "startTime": 1674218081046,
  "endTime": 1674218082413,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 11,
        "lineEnd": 12,
        "columnStart": 49,
        "columnEnd": 94
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 12,
        "columnStart": 49,
        "columnEnd": 94
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 12,
        "columnStart": 49,
        "columnEnd": 94
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# Package versions.\nARG GO_VERSION=1.17.3\nARG RUST_NIGHTLY_VERSION\nARG OASIS_CORE_COMMIT\nARG FORTANIX_TOOLS_VERSION=0.4.0\nARG SGXS_TOOLS_VERSION=0.8.2\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update -qq && apt-get upgrade -qq && apt-get install -y --no-install-recommends -qq \\\n    git gcc curl jq pkg-config libssl-dev protobuf-compiler libclang-dev clang-11 gcc-multilib && \\\n    apt-get autoclean && apt-get autoremove && rm -rf /var/cache/apt/archives/* && \\\n    mkdir -p /src /cargo/.rustup && rm -rf /var/lib/apt/lists/*;\n\nENV HOME=\"/root\"\nENV GOPATH=\"/go\"\nENV CARGO_HOME=\"/cargo\"\nENV RUSTUP_HOME=\"/cargo/.rustup\"\nENV PATH=\"${CARGO_HOME}/bin:${GOPATH}/bin:/usr/local/go/bin:${PATH}\"\n\n# Install Rust.\nRUN curl \"https://sh.rustup.rs\" -sfo rustup.sh && \\\n    sh rustup.sh -y --default-toolchain nightly-${RUST_NIGHTLY_VERSION} && \\\n    rustup target add x86_64-fortanix-unknown-sgx && \\\n    cargo install --version ${FORTANIX_TOOLS_VERSION} fortanix-sgx-tools && \\\n    cargo install --version ${SGXS_TOOLS_VERSION} sgxs-tools && \\\n    rm -rf /cargo/registry /rustup.sh\n\n# Install Go and utilities.\nRUN curl -f -OL https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz && \\\n    tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz && \\\n    rm go${GO_VERSION}.linux-amd64.tar.gz && \\\n    mkdir -p /go/bin\n\n# Install extra tools from oasis-core.\nRUN cd /usr/local/src && \\\n    curl -f -OL https://github.com/oasisprotocol/oasis-core/archive/${OASIS_CORE_COMMIT}.tar.gz && \\\n    tar -xzf ${OASIS_CORE_COMMIT}.tar.gz && cd oasis-core-* && \\\n    cargo install --locked --force --path tools && \\\n    cd .. && rm -rf ${OASIS_CORE_COMMIT}.tar.gz oasis-core-* && rm -rf /cargo/registry\n\nVOLUME /src\n"
}