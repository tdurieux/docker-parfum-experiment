{
  "startTime": 1674251161765,
  "endTime": 1674251162867,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 17,
        "columnEnd": 45
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ALPINE_VERSION=alpine\n\nFROM node:${ALPINE_VERSION}\n\n# Set the working directory for all subsequent RUN / COPY commands.\n# The frontity-cli will be created by docker automatically.\nWORKDIR /home/frontity-cli\n\n# Add the unix `tree` tool. We use it for snapshot testing its output.\nRUN apk add --no-cache tree\n\n# Assuming that the CLI has been compiled from the TS source files, we can\n# copy it from the host to the docker image.\nCOPY dist /home/frontity-cli/dist/\n\n# `--ignore-scripts` because otherwise npm install will run the `prepublish`\n# npm script which in turn tries to run `npm build` and `npm build` will try to\n# compile the TS source to JS which is unnecessary and results in error because\n# our `tsconfig.build.json` extends the tsconfig.json at the root of the repo.\nRUN cd ./dist && npm install --ignore-scripts && npm cache clean --force;"
}