{
  "startTime": 1674217284997,
  "endTime": 1674217285920,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "{%note%}\nFROM golang:1.15 AS builder\n\nRUN if [ $(uname -m) = \"x86_64\" ]; then mailhog_arch=\"amd64\"; else mailhog_arch=\"arm64\"; fi \\\n    && wget -O mhsendmail.tar.gz https://github.com/mailhog/mhsendmail/archive/refs/tags/v0.2.0.tar.gz \\\n    && tar -xf mhsendmail.tar.gz \\\n    && mkdir -p ./src/github.com/mailhog/ \\\n    && mv ./mhsendmail-0.2.0 ./src/github.com/mailhog/mhsendmail \\\n    && cd ./src/github.com/mailhog/mhsendmail/ \\\n    && go get . \\\n    && GOOS=linux GOARCH=${mailhog_arch} go build -o mhsendmail . && rm mhsendmail.tar.gz\n\nFROM php:{%version%}-cli\n\nARG COMPOSER_VERSION={%composer_version%}\nARG MAGENTO_ROOT=/app\nARG COMPOSER_ALLOW_SUPERUSER=1\nARG COMPOSER_HOME=/composer\nARG CRONTAB=\"\"\n\nENV COMPOSER_MEMORY_LIMIT -1\nENV COMPOSER_ALLOW_SUPERUSER ${COMPOSER_ALLOW_SUPERUSER}\nENV COMPOSER_HOME ${COMPOSER_HOME}\nENV PHP_MEMORY_LIMIT -1\nENV PHP_VALIDATE_TIMESTAMPS 1\nENV DEBUG false\nENV MAGENTO_RUN_MODE production\nENV SENDMAIL_PATH /dev/null\nENV PHPRC ${MAGENTO_ROOT}/php.ini\n\n{%env_php_extensions%}\n\n# Configure Node.js version\nRUN curl -f -sL https://deb.nodesource.com/setup_lts.x | bash\n\n# Install dependencies\nRUN apt-get update \\\n  && apt-get upgrade -y \\\n  && apt-get install -y --no-install-recommends \\\n  {%packages%} \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Install PyYAML\nRUN pip3 install --no-cache-dir --upgrade setuptools \\\n    && pip3 install --no-cache-dir pyyaml\n\n# Install Grunt\nRUN npm install -g grunt-cli && npm cache clean --force;\n\n# Install MailHog\nCOPY --from=builder /go/src/github.com/mailhog/mhsendmail/mhsendmail /usr/local/bin/\nRUN sudo chmod +x /usr/local/bin/mhsendmail\n\n# Configure the gd library\n{%docker-php-ext-configure%}\n\n# Install required PHP extensions\n{%docker-php-ext-install%}\n\n{%php-pecl-extensions%}\n\n{%installation_scripts%}\n\nADD etc/php-cli.ini /usr/local/etc/php/conf.d/zz-magento.ini\nADD etc/php-xdebug.ini /usr/local/etc/php/conf.d/zz-xdebug-settings.ini\nADD etc/php-pcov.ini /usr/local/etc/php/conf.d/zz-pcov-settings.ini\nADD etc/mail.ini /usr/local/etc/php/conf.d/zz-mail.ini\nADD etc/php-gnupg.ini /usr/local/etc/php/conf.d/gnupg.ini\n\n# Get composer installed to /usr/local/bin/composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --version=${COMPOSER_VERSION} --filename=composer\n\nADD bin/* /usr/local/bin/\n\nRUN groupadd -g 1000 www && useradd -g 1000 -u 1000 -d ${MAGENTO_ROOT} -s /bin/bash www\n\nADD docker-entrypoint.sh /docker-entrypoint.sh\n\nRUN [\"chmod\", \"+x\", \\\n    \"/docker-entrypoint.sh\", \\\n    \"/usr/local/bin/magento-installer\", \\\n    \"/usr/local/bin/magento-command\", \\\n    \"/usr/local/bin/mftf-command\", \\\n    \"/usr/local/bin/ece-command\", \\\n    \"/usr/local/bin/cloud-build\", \\\n    \"/usr/local/bin/cloud-deploy\", \\\n    \"/usr/local/bin/cloud-post-deploy\", \\\n    \"/usr/local/bin/run-cron\", \\\n    \"/usr/local/bin/run-hooks\" \\\n]\n\n{%volumes_cmd%}\n\n{%volumes_def%}\n\nRUN chown -R www:www /usr/local /var/www /var/log /usr/local/etc/php/conf.d /etc/cron.d ${MAGENTO_ROOT} ${COMPOSER_HOME}\nRUN if [ ! -z \"${CRONTAB}\" ]; then echo \"${CRONTAB}\" > /etc/cron.d/magento && touch /var/log/cron.log ; fi\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nWORKDIR ${MAGENTO_ROOT}\n\nUSER root\n\nCMD [\"bash\"]\n"
}