{
  "startTime": 1674255711319,
  "endTime": 1674255712033,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 2,
        "columnEnd": 59
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 2,
        "columnEnd": 47
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 2,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-slim-stretch\n\n# Setup environment\nENV INSTALL_PATH /zenysis\nENV R77_SRC_ROOT ${INSTALL_PATH}\nENV ZENYSIS_SRC_ROOT ${INSTALL_PATH}\nENV NODE_ENV 'production'\nENV ZEN_ENV 'br'\nENV ZEN_PROD 1\nENV ZEN_DOCKER 1\nENV DATABASE_URL 'postgresql://test_admin:zenpass@zen_postgres/zenysis'\nENV PYTHONPATH \"${ZENYSIS_SRC_ROOT}:${PYTHONPATH}\"\n\n# Install dependencies needed by python and node requirements\nRUN apt-get update && \\\n  apt-get install -y --no-install-recommends \\\n    curl \\\n    git-core \\\n    apt-transport-https \\\n    gnupg \\\n    gfortran \\\n    libpq-dev \\\n    libffi-dev \\\n    unattended-upgrades \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN \\\n  echo \"deb https://deb.nodesource.com/node_11.x stretch main\" > /etc/apt/sources.list.d/nodesource.list && \\\n  curl -f https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \\\n  echo \"deb https://dl.yarnpkg.com/debian/ stable main\" > /etc/apt/sources.list.d/yarn.list && \\\n  curl -f https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -yqq nodejs yarn && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p ${INSTALL_PATH}\nRUN mkdir -p /data/output\nWORKDIR ${INSTALL_PATH}\n\n# Install python dependencies\nCOPY requirements.txt requirements.txt\nCOPY requirements-web.txt requirements-web.txt\nRUN pip3 install --no-cache-dir -r requirements.txt\nRUN pip3 install --no-cache-dir -r requirements-web.txt\n\n# Lint is baked into the yarn install process\nCOPY lint lint\n\n# Handle web/client dependencies first.\n# Install node dependencies\n# By putting this first, Docker will use the node_modules cache unless we make\n# edits to package.json.\nCOPY yarn.lock yarn.lock\nCOPY package.json package.json\nRUN yarn install --pure-lockfile --frozen-lockfile --production=false --no-cache && yarn cache clean;\n\n# Copy client code needed for webpack builds separately from python code. This\n# will reduce docker build times if only python code has changed.\nRUN mkdir -p web/public\nCOPY web/webpack.prod.config.js web/\nCOPY web/public web/public\nCOPY web/client web/client\nCOPY .flowconfig .flowconfig\n#RUN yarn flow-check\nRUN yarn run build && rm -rf node_modules\n\n# Copy over code\nCOPY config config\nCOPY data data\nCOPY db db\nCOPY log log\nCOPY models models\nCOPY util util\nCOPY web/*.py web/\nCOPY web/server web/server\n\n# Copy over misc that does not get yarn built.\nCOPY docker docker\nCOPY scripts scripts\n#COPY test test\n#COPY bin bin\n\n# Log dir\nRUN mkdir -p /logs\n\n# Upgrade database and run\nEXPOSE 5000\nCMD docker/entrypoint_web.sh 2>&1 | tee /logs/web_server.log\n"
}