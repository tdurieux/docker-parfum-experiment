{
  "startTime": 1674220354475,
  "endTime": 1674220355390,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.8\n\nLABEL maintainer=\"Justin Clift <justin@postgresql.org>\"\n\n# Install Git, Go, Memcached, and PostgreSQL\nRUN  \\\n    apk update && \\\n    apk upgrade && \\\n    apk add --no-cache ca-certificates 'curl>7.61.0' git go libc-dev memcached postgresql sqlite-dev\n\n# Create the DBHub.io OS user\nRUN addgroup dbhub && \\\n    adduser -D -S -s /bin/ash -G dbhub dbhub\n\n### Memcached\n\n# Generate script for starting Memcached\nRUN echo \"/usr/bin/memcached -u memcached -d\" >> /usr/local/bin/start.sh && \\\n    chmod +x /usr/local/bin/start.sh\n\n### PostgreSQL\n\n# Create PostgreSQL directories\nENV PGDATA /data/postgresql\nRUN su - postgres -c \"echo export PGDATA=${PGDATA} >> .profile\"\nRUN mkdir -p \"$PGDATA\" && \\\n    chown -R postgres:postgres \"$PGDATA\" && \\\n    chmod 777 \"$PGDATA\" # this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir /run/postgresql && \\\n    chown postgres:postgres /run/postgresql\n\n# Add script pieces for initialising & starting PostgreSQL\nRUN echo \"mkdir -p ${PGDATA}\" >> /usr/local/bin/init.sh && \\\n    echo \"chown -R postgres:postgres ${PGDATA}\" >> /usr/local/bin/init.sh && \\\n    echo \"chmod 777 ${PGDATA}\" >> /usr/local/bin/init.sh && \\\n    echo \"su - postgres -c 'pg_ctl -D ${PGDATA} initdb'\" >> /usr/local/bin/init.sh && \\\n    echo \"su - postgres -c 'pg_ctl -D ${PGDATA} start'\" >> /usr/local/bin/init.sh && \\\n    echo \"su - postgres -c 'createuser -d dbhub'\" >> /usr/local/bin/init.sh && \\\n    echo \"su - postgres -c 'createdb -O dbhub dbhub'\" >> /usr/local/bin/init.sh && \\\n    echo \"su - dbhub -c 'psql dbhub < /go/src/github.com/sqlitebrowser/dbhub.io/database/dbhub.sql'\" >> /usr/local/bin/init.sh && \\\n    echo \"su - postgres -c 'pg_ctl -D ${PGDATA} stop'\" >> /usr/local/bin/init.sh && \\\n    echo \"su - postgres -c 'pg_ctl -D ${PGDATA} start'\" >> /usr/local/bin/start.sh && \\\n    chmod +x /usr/local/bin/init.sh\n\n### Minio\n\n# Create the Minio OS user\nRUN addgroup minio && \\\n    adduser -D -S -s /bin/ash -G minio minio\n\n# Install Minio\nENV MINIO_UPDATE off\nENV MINIO_ACCESS_KEY minio\nENV MINIO_SECRET_KEY minio123\nENV MINIO_DATA /data/minio\nRUN mkdir -p /go/src/github.com/minio && \\\n    curl -f -L -o /usr/local/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/minio && \\\n    chmod +x /usr/local/bin/minio\n\n# Add script pieces for initialising & starting Minio\nRUN echo \"mkdir -p ${MINIO_DATA}\" >> /usr/local/bin/init.sh && \\\n    echo \"chown minio:minio ${MINIO_DATA}\" >> /usr/local/bin/init.sh && \\\n    su - minio -c \"echo export MINIO_UPDATE=${MINIO_UPDATE} >> .profile\" && \\\n    su - minio -c \"echo export MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} >> .profile\" && \\\n    su - minio -c \"echo export MINIO_SECRET_KEY=${MINIO_SECRET_KEY} >> .profile\" && \\\n    su - dbhub -c \"echo export MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} >> .profile\" && \\\n    su - dbhub -c \"echo export MINIO_SECRET_KEY=${MINIO_SECRET_KEY} >> .profile\" && \\\n    echo \"su - minio -c '/usr/local/bin/minio server ${MINIO_DATA} &'\" >> /usr/local/bin/start.sh\n\n### DBHub.io\n\n# Install dep\nENV GOPATH /go\nRUN mkdir -p /go/bin && \\\n    curl -f -L https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n\n# Create directores for the DBHub daemons\nRUN mkdir -p /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue && \\\n    chown -R dbhub:dbhub /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue && \\\n    chmod 700 /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue\n\n# Build the DBHub.io daemons\nRUN mkdir -p /go/src/github.com/sqlitebrowser && \\\n    cd /go/src/github.com/sqlitebrowser && \\\n    git clone https://github.com/sqlitebrowser/dbhub.io && \\\n    cd /go/src/github.com/sqlitebrowser/dbhub.io &&  \\\n    /go/bin/dep ensure && \\\n    go build -gcflags \"all=-N -l\" -o /usr/local/bin/dbhub-webui github.com/sqlitebrowser/dbhub.io/webui && \\\n    go build -gcflags \"all=-N -l\" -o /usr/local/bin/dbhub-db4s github.com/sqlitebrowser/dbhub.io/db4s\n\n### Other pieces\n\n# Delve (for debugging)\nRUN apk add --no-cache libc6-compat\nRUN go get github.com/derekparker/delve/cmd/dlv\n\n# Config file\nENV CONFIG_FILE /go/src/github.com/sqlitebrowser/dbhub.io/docker/config.toml\n\n# Add script pieces for starting DBHub.io services\nRUN echo \"echo 127.0.0.1 docker-dev.dbhub.io docker-dev >> /etc/hosts\" >> /usr/local/bin/start.sh && \\\n    echo \"su - dbhub -c 'CONFIG_FILE=${CONFIG_FILE} /usr/local/bin/dbhub-webui &'\" >> /usr/local/bin/start.sh && \\\n    echo \"su - dbhub -c 'CONFIG_FILE=${CONFIG_FILE} /usr/local/bin/dbhub-db4s &'\" >> /usr/local/bin/start.sh\n\n# Make Delve (40000), Minio webUI (9000), DBHub.io webUI (8443), and the DB4S end point (5550)\n# ports available outside this container\nEXPOSE 8443 5550 9000 40000\n\nVOLUME /data\n"
}