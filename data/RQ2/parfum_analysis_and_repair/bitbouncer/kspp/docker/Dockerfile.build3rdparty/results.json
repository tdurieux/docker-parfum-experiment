{
  "startTime": 1674250136821,
  "endTime": 1674250140140,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 346,
        "lineEnd": 346,
        "columnStart": 0,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 175,
        "lineEnd": 179,
        "columnStart": 0,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 259,
        "lineEnd": 263,
        "columnStart": 0,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 340,
        "lineEnd": 344,
        "columnStart": 0,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 356,
        "lineEnd": 360,
        "columnStart": 0,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 370,
        "lineEnd": 374,
        "columnStart": 0,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 192
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 23,
        "columnEnd": 113
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 23,
        "columnEnd": 150
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 23,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 23,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 192
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 23,
        "columnEnd": 113
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 23,
        "columnEnd": 150
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 23,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 23,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 169
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:22.04\n\nWORKDIR /src\n\nMAINTAINER sk svante.karlsson@csi.se\n\n\nENV TZ=GMT\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common sudo build-essential cmake wget pax-utils automake autogen shtool libtool unzip pkg-config sed bison flex git curl apt-utils && rm -rf /var/lib/apt/lists/*;\n\n#add repos and key servers for gcc and clang\nRUN curl -f -sSL https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-add-repository \"deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main\"\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\n\nRUN apt-get update && apt-get install --no-install-recommends -y clang-13 && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends -y libboost-all-dev libsnappy-dev libfmt-dev libpcre2-dev libhttp-parser-dev libpq-dev freetds-dev libgtest-dev libgflags-dev && rm -rf /var/lib/apt/lists/*;\n\n#avro deps\nRUN apt-get update && apt-get install --no-install-recommends -y libsnappy-dev && rm -rf /var/lib/apt/lists/*;\n\n#aws deps\nRUN apt-get update && apt-get install --no-install-recommends -y libssl-dev libcurl4-openssl-dev google-mock libgtest-dev libc-ares-dev && rm -rf /var/lib/apt/lists/*;\n\n#deps for arrow\nRUN apt-get update && apt-get install --no-install-recommends -y liblz4-dev libutf8proc-dev libre2-dev libz-dev liblzma-dev libzstd-dev libbz2-dev libgtest-dev libgflags-dev && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y llvm-13 clang-13 && rm -rf /var/lib/apt/lists/*;\n\n#deps for tensorflow\nRUN apt-get update && apt-get install --no-install-recommends -y libeigen3-dev && rm -rf /var/lib/apt/lists/*;\n\n#deps for kspp\nRUN apt-get update && apt-get install --no-install-recommends -y libpq-dev freetds-dev && rm -rf /var/lib/apt/lists/*;\n\nENV CPP_STANDARD=\"17\"\nENV AVRO_VER=\"release-1.11.0\"\nENV AWS_SDK_VER=\"1.9.242\"\nENV GRPC_VER=\"v1.42.0\"\n\n#deps for arrow\nENV DOUBLE_CONVERSION_VER=\"v3.1.5\"\nENV BROTLI_VER=\"v1.0.9\"\nENV FLATBUFFERS_VER=\"v1.11.0\"\nENV THRIFT_VER=\"0.12.0\"\nENV RAPIDJSON_VER=\"v1.1.0\"\n\nENV GLOG_VER=\"v0.6.0\"\n\nENV ARROW_VER=\"apache-arrow-8.0.0\"\n#\n#for mqtt\nENV NLOHMANN_JSON_VER=\"v3.10.5\"\nENV PAHO_MQTT_C_VER=\"1.3.10\"\nENV PAHO_MQTT_CPP_VER=\"1.2.0\"\nENV ROCKDB_VER=\"v7.2.0\"\nENV LIBRDKAFKA_VER=\"v1.9.0-RC7\"\nENV PROMETHEUS_CPP_VER=\"v1.0.0\"\nENV HOWARD_HINNANT_VER=\"v3.0.0\"\nENV CATCH2_VER=\"v2.13.2\"\nENV RESTINIO_VER=\"v.0.6.10\"\n\n\n\nRUN mkdir tmp && cd tmp\n\nRUN wget -O avro.tar.gz \"https://github.com/apache/avro/archive/$AVRO_VER.tar.gz\" && \\\nmkdir -p avro && \\\ntar \\\n  --extract \\\n  --file avro.tar.gz \\\n  --directory avro \\\n  --strip-components 1 && \\\nsed -i.bak1 's/-std=c++11/-std=c++17/g' avro/lang/c++/CMakeLists.txt && \\\ncat avro/lang/c++/CMakeLists.txt && \\\ncd avro/lang/c++/  && \\\nmkdir build && \\\ncd build && \\\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_CXX_STANDARD=$CPP_STANDARD .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../../../.. && \\\nrm avro.tar.gz && \\\nrm -rf arvo\n\nRUN git clone --recursiv --depth 1 --branch $GRPC_VER https://github.com/grpc/grpc.git && \\\ncd grpc && \\\nrm -r third_party/boringssl-with-bazel && \\\nmkdir build && cd build && \\\ncmake -DgRPC_SSL_PROVIDER=package .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../..\n\nRUN git clone --recurse-submodules --depth 1 --branch $AWS_SDK_VER https://github.com/aws/aws-sdk-cpp && \\\ncd aws-sdk-cpp && \\\nmkdir build-shared && cd build-shared && \\\ncmake -DCMAKE_BUILD_TYPE=Release  -D CMAKE_CXX_FLAGS=\"-Wno-error=deprecated-declarations\" -DBUILD_SHARED_LIBS=ON -DBUILD_DEPS=ON DBUILD_ONLY=\"config;s3;transfer;sts;cognito-identity;identity-management\" -DENABLE_TESTING=OFF -DCPP_STANDARD=$CPP_STANDARD .. && \\\n#make -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nmake -j 2 && \\\nmake install && \\\ncd ../..\n\n\nRUN wget -O double-conversion.tar.gz \"https://github.com/google/double-conversion/archive/$DOUBLE_CONVERSION_VER.tar.gz\" && \\\nmkdir -p double-conversion && \\\ntar \\\n  --extract \\\n  --file double-conversion.tar.gz \\\n  --directory double-conversion \\\n  --strip-components 1 && \\\ncd double-conversion && \\\nmkdir build && \\\ncd build && \\\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_CXX_STANDARD=$CPP_STANDARD .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../.. && \\\nrm double-conversion.tar.gz\n\nRUN wget -O brotli.tar.gz \"https://github.com/google/brotli/archive/$BROTLI_VER.tar.gz\" && \\\nmkdir -p brotli && \\\ntar \\\n  --extract \\\n  --file brotli.tar.gz \\\n  --directory brotli \\\n  --strip-components 1 && \\\ncd brotli && \\\nmkdir build && \\\ncd build && \\\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_CXX_STANDARD=$CPP_STANDARD .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../.. && \\\nrm brotli.tar.gz\n\n\nRUN wget -O flatbuffers.tar.gz \"https://github.com/google/flatbuffers/archive/$FLATBUFFERS_VER.tar.gz\" && \\\nmkdir -p flatbuffers && \\\ntar \\\n  --extract \\\n  --file flatbuffers.tar.gz \\\n  --directory flatbuffers \\\n  --strip-components 1 && \\\ncd flatbuffers && \\\nmkdir build && \\\ncd build && \\\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DFLATBUFFERS_BUILD_TESTS=OFF -DCMAKE_CXX_STANDARD=$CPP_STANDARD .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../.. && \\\nrm flatbuffers.tar.gz\n\nRUN wget -O thrift.tar.gz \"https://github.com/apache/thrift/archive/$THRIFT_VER.tar.gz\" && \\\nmkdir -p thrift && \\\ntar \\\n  --extract \\\n  --file thrift.tar.gz \\\n  --directory thrift \\\n  --strip-components 1 && \\\ncd thrift && \\\nmkdir -p build && cd build && \\\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_CXX_STANDARD=$CPP_STANDARD .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../.. && \\\nrm thrift.tar.gz\n\n\nRUN wget -O nlomann.tar.gz \"https://github.com/nlohmann/json/archive/$NLOHMANN_JSON_VER.tar.gz\" && \\\nmkdir -p nlomann && \\\ntar \\\n  --extract \\\n  --file nlomann.tar.gz \\\n  --directory nlomann \\\n  --strip-components 1 && \\\ncd nlomann && \\\nmkdir build && cd build && \\\ncmake .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../.. && rm nlomann.tar.gz\n\nRUN wget -O rapidjson.tar.gz \"https://github.com/miloyip/rapidjson/archive/$RAPIDJSON_VER.tar.gz\" && \\\nmkdir -p rapidjson && \\\ntar \\\n   --extract \\\n   --file rapidjson.tar.gz \\\n   --directory rapidjson \\\n   --strip-components 1 && \\\ncd rapidjson && \\\nmkdir build && \\\ncd build && \\\ncmake -DRAPIDJSON_BUILD_EXAMPLES=OFF -DRAPIDJSON_BUILD_DOC=OFF -DRAPIDJSON_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_CXX_STANDARD=$CPP_STANDARD .. && \\\nsudo make install && \\\nsudo rm -rf /usr/local/share/doc/RapidJSON && \\\ncd ../.. && \\\nrm rapidjson.tar.gz && \\\nrm -rf rapidjson\n\nRUN git clone --recursiv --depth 1 --branch $GLOG_VER https://github.com/google/glog.git && \\\ncd glog && \\\nmkdir build && cd build && \\\ncmake .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nmake install && \\\ncd ../..\n\n\nRUN wget -O arrow.tar.gz \"https://github.com/apache/arrow/archive/$ARROW_VER.tar.gz\" && \\\nmkdir -p arrow && \\\ntar \\\n  --extract \\\n  --file arrow.tar.gz \\\n  --directory arrow \\\n  --strip-components 1 && \\\ncd arrow/cpp && \\\nmkdir build && \\\ncd build && \\\ncmake \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DARROW_DEPENDENCY_SOURCE=SYSTEM \\\n  -DCMAKE_CXX_STANDARD=$CPP_STANDARD \\\n  -DARROW_BUILD_UTILITIES=ON \\\n  -DARROW_CUDA=OFF \\\n  -DARROW_GANDIVA=ON \\\n  -DARROW_WITH_BZ2=ON \\\n  -DARROW_WITH_ZLIB=ON \\\n  -DARROW_WITH_ZSTD=ON \\\n  -DARROW_WITH_LZ4=ON \\\n  -DARROW_WITH_SNAPPY=ON \\\n  -DARROW_WITH_BROTLI=ON \\\n  -DARROW_COMPUTE=ON \\\n  -DARROW_JEMALLOC=ON \\\n  -DARROW_CSV=ON \\\n  -DARROW_DATASET=ON \\\n  -DARROW_FILESYSTEM=ON \\\n  -DARROW_JSON=ON \\\n  -DARROW_PARQUET=ON \\\n  -DARROW_PLASMA=ON \\\n  -DARROW_PYTHON=OFF \\\n  -DARROW_S3=ON \\\n  -DARROW_USE_GLOG=ON \\\n  -DPARQUET_BUILD_EXECUTABLES=ON \\\n  -DPARQUET_BUILD_EXAMPLES=ON \\\n   .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../../.. && \\\nrm arrow.tar.gz\n\n\n\nRUN wget -O rocksdb.tar.gz \"https://github.com/facebook/rocksdb/archive/$ROCKDB_VER.tar.gz\" && \\\nmkdir -p rocksdb && \\\ntar \\\n    --extract \\\n    --file rocksdb.tar.gz \\\n    --directory rocksdb \\\n    --strip-components 1 && \\\ncd rocksdb && \\\nexport USE_RTTI=1 && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" shared_lib && \\\nsudo make install-shared && \\\ncd .. && rm rocksdb.tar.gz\n\nRUN wget -O prometheus-cpp.tar.gz \"https://github.com/jupp0r/prometheus-cpp/archive/$PROMETHEUS_CPP_VER.tar.gz\" && \\\nmkdir -p prometheus-cpp && \\\ntar \\\n  --extract \\\n  --file prometheus-cpp.tar.gz \\\n  --directory prometheus-cpp \\\n  --strip-components 1 && \\\ncd prometheus-cpp && \\\nmkdir build && cd build && \\\ncmake  -DCMAKE_BUILD_TYPE=Release -DENABLE_PULL=OFF -DUSE_THIRDPARTY_LIBRARIES=OFF -DENABLE_TESTING=OFF -DBUILD_SHARED_LIBS=ON -DOVERRIDE_CXX_STANDARD_FLAGS=OFF -DCMAKE_CXX_STANDARD=$CPP_STANDARD .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../.. && \\\nrm prometheus-cpp.tar.gz && \\\nrm -rf prometheus-cpp\n\nRUN wget -O hh.tar.gz \"https://github.com/HowardHinnant/date/archive/$HOWARD_HINNANT_VER.tar.gz\" && \\\nmkdir -p hh && \\\ntar \\\n  --extract \\\n  --file hh.tar.gz \\\n  --directory hh \\\n  --strip-components 1 && \\\ncd hh && \\\nmkdir build && cd build && \\\ncmake -DUSE_SYSTEM_TZ_DB=ON -DBUILD_TZ_LIB=ON .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nmake install && \\\ncd ../.. && \\\nrm hh.tar.gz && \\\nrm -rf hh\n\nRUN wget -O catch2.tar.gz \"https://github.com/catchorg/Catch2/archive/$CATCH2_VER.tar.gz\" && \\\nmkdir -p catch2 && \\\ntar \\\n   --extract \\\n   --file catch2.tar.gz \\\n   --directory catch2 \\\n   --strip-components 1 && \\\ncd catch2 && \\\nmkdir build && cd build && \\\ncmake -DCATCH_BUILD_TESTING=OFF -DCATCH_INSTALL_DOCS=OFF .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nmake install && \\\ncd ../.. && \\\nrm catch2.tar.gz && \\\nrm -rf catch2\n\nRUN wget -O restinio.tar.gz \"https://github.com/Stiffstream/restinio/archive/$RESTINIO_VER.tar.gz\" && \\\nmkdir -p restinio && \\\ntar \\\n   --extract \\\n   --file restinio.tar.gz \\\n   --directory restinio \\\n   --strip-components 1 && \\\ncd restinio && \\\ncd dev && \\\nsed -i.bak1 '/find_package(unofficial-http-parser/d' CMakeLists.txt && \\\nmkdir build && cd build && \\\ncmake -DRESTINIO_TEST=OFF -DRESTINIO_SAMPLE=OFF -DRESTINIO_INSTALL_SAMPLES=OFF -DRESTINIO_BENCH=OFF -DRESTINIO_INSTALL_BENCHES=OFF -DRESTINIO_FIND_DEPS=ON -DRESTINIO_ALLOW_SOBJECTIZER=OFF .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nmake install && \\\ncd ../../.. && \\\nrm restinio.tar.gz && \\\nrm -rf restinio\n\n\n\nRUN wget -O librdkafka.tar.gz \"https://github.com/edenhill/librdkafka/archive/$LIBRDKAFKA_VER.tar.gz\" && \\\nmkdir -p librdkafka && \\\ntar \\\n  --extract \\\n  --file librdkafka.tar.gz \\\n  --directory librdkafka \\\n  --strip-components 1 && \\\ncd librdkafka && \\\n ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && \\\n#./configure --disable-ssl --prefix=/usr/local && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd .. && rm librdkafka.tar.gz\n\n\n\nRUN wget -O paho.mqtt.c.tar.gz \"https://github.com/eclipse/paho.mqtt.c/archive/v$PAHO_MQTT_C_VER.tar.gz\" && \\\nmkdir -p paho.mqtt.c && \\\ntar \\\n  --extract \\\n  --file paho.mqtt.c.tar.gz \\\n  --directory paho.mqtt.c \\\n  --strip-components 1 && \\\ncd paho.mqtt.c && \\\nmkdir build && cd build  && \\\ncmake -DPAHO_WITH_SSL=ON -DPAHO_ENABLE_TESTING=OFF .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../.. && rm paho.mqtt.c.tar.gz\n\nRUN wget -O paho.mqtt.cpp.tar.gz \"https://github.com/eclipse/paho.mqtt.cpp/archive/v$PAHO_MQTT_CPP_VER.tar.gz\" && \\\nmkdir -p paho.mqtt.cpp && \\\ntar \\\n  --extract \\\n  --file paho.mqtt.cpp.tar.gz \\\n  --directory paho.mqtt.cpp \\\n  --strip-components 1 && \\\ncd paho.mqtt.cpp && \\\nmkdir build && cd build && \\\ncmake -DPAHO_WITH_SSL=ON .. && \\\nmake -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\nsudo make install && \\\ncd ../.. && rm paho.mqtt.cpp.tar.gz\n\n\n"
}