{
  "startTime": 1674251158116,
  "endTime": 1674251159090,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 1,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 1,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 1,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 1,
        "columnEnd": 50
      }
    }
  ],
  "repairedDockerfile": "# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0\n\n# == Distribution preparation ==\nARG DIST\nFROM $DIST\nENV DEBIAN_FRONTEND noninteractive\n\n# Use BASH(1) as shell, affects the RUN commands below\nRUN ln -sf bash /bin/sh && ls -al /bin/sh\n\n# Provide /bin/retry to overcome short network outages\nRUN echo -e '#!/bin/bash\\n\"$@\" || { sleep 5 ; \"$@\" ; } || { sleep 15 ; \"$@\" ; }' > /bin/retry && chmod +x /bin/retry\n\n# Upgrade packages\nRUN retry apt-get update && retry apt-get -y upgrade\n\n# Build stripped down fluidsynth version without drivers\nRUN retry apt-get install -y build-essential curl cmake libglib2.0-dev && \\\n  mkdir -p /tmp/fluid/build && cd /tmp/fluid/ && \\\n  curl -sfSOL https://github.com/FluidSynth/fluidsynth/archive/v2.2.1.tar.gz && \\\n  tar xf v2.2.1.tar.gz && rm v2.2.1.tar.gz && cd build && \\\n  cmake ../fluidsynth-2.2.1 \\\n\t-DCMAKE_INSTALL_PREFIX=/usr/ \\\n\t-DLIB_SUFFIX=\"/`dpkg-architecture -qDEB_HOST_MULTIARCH`\" \\\n\t-Denable-libsndfile=1 \\\n\t-Denable-dbus=0 \\\n\t-Denable-ipv6=0 \\\n\t-Denable-jack=0 \\\n\t-Denable-midishare=0 \\\n\t-Denable-network=0 \\\n\t-Denable-oss=0 \\\n\t-Denable-pulseaudio=0 \\\n\t-Denable-readline=0 \\\n\t-Denable-alsa=0 \\\n\t-Denable-lash=0 && \\\n  make && make install\n\n# Provide Anklang dependencies, add libXss.so, libgtk-3-0 for electron\nRUN retry apt-get install -y \\\n    build-essential pkg-config git curl ccache curl unzip gawk g++ \\\n    clang clang-tidy clang-tools castxml cppcheck libboost-system-dev \\\n    imagemagick libxml2-utils libxml2-dev python3 python3-lxml \\\n    python3-pandocfilters pandoc graphviz texlive-binaries \\\n    libasound2-dev libflac-dev libvorbis-dev libmad0-dev libjack-dev libzstd-dev \\\n    gettext libgconf-2-4 libgtk2.0-dev squashfs-tools \\\n    libgtk-3-0 libxss1 libgbm1 libnss3\n\n# Provide a recent nodejs\nRUN curl -f -sL https://deb.nodesource.com/setup_16.x | bash - && \\\n\tapt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Install TeX (+615MB) if needed\nARG TEX\nRUN test \"$TEX\" != y || retry apt-get install -y \\\n    texlive-xetex fonts-sil-charis texlive-fonts-extra\n\n# Cleanup\nRUN apt-get clean\n\n# Provide out-of-tree build directory (docker volume mount point)\nRUN mkdir /ootbuild/\nENV OOTBUILD /ootbuild/\n\n# make sure getpwuid() works, prepare writable ~/\nARG USERGROUP\nRUN mkdir -m 0755 -p /dbuild/ && cp /root/.bashrc /dbuild/ && \\\n  groupadd --gid ${USERGROUP#*:} dbuild && useradd --uid ${USERGROUP%:*} --gid ${USERGROUP#*:} --home-dir /dbuild dbuild\nCOPY .dbuild/ /dbuild/\nRUN chown -R ${USERGROUP} /dbuild\n"
}