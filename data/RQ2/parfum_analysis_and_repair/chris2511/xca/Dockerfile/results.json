{
  "startTime": 1674253248792,
  "endTime": 1674253249958,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 39,
        "columnEnd": 58
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG REGISTRY_PREFIX=''\nARG CODENAME=bionic\n\nFROM ${REGISTRY_PREFIX}ubuntu:${CODENAME} as builder\n\nRUN set -x \\\n\t&& apt update \\\n\t&& apt upgrade -y \\\n\t&& apt install --yes --no-install-recommends \\\n\t\tbuild-essential \\\n\t\tautotools-dev \\\n\t\tautomake \\\n\t\tpkg-config \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\tqt5-default \\\n\t\tqtbase5-dev \\\n\t\tqtbase5-dev-tools \\\n\t\tqttools5-dev \\\n\t\tqttools5-dev-tools \\\n\t\tx11-apps \\\n\t\tpython3-pip && rm -rf /var/lib/apt/lists/*;\n\nARG INSTALL_SPHINX=\nRUN test \"$INSTALL_SPHINX\" != \"yes\" || pip3 install --no-cache-dir sphinx\n\nARG PARALLELMFLAGS=-j2\n\nARG BUILD_DIR=/tmp/build\n\nARG DUMB_INIT_VERSION=1.2.2\nRUN set -x \\\n\t&& mkdir -p ${BUILD_DIR} \\\n\t&& cd ${BUILD_DIR} \\\n\t&& curl -fSL -s -o dumb-init-${DUMB_INIT_VERSION}.tar.gz https://github.com/Yelp/dumb-init/archive/v${DUMB_INIT_VERSION}.tar.gz \\\n\t&& tar -xf dumb-init-${DUMB_INIT_VERSION}.tar.gz \\\n\t&& cd dumb-init-${DUMB_INIT_VERSION} \\\n\t&& make \"$PARALLELMFLAGS\" \\\n\t&& chmod +x dumb-init \\\n\t&& mv dumb-init /usr/local/bin/dumb-init \\\n\t&& dumb-init --version \\\n\t&& cd \\\n\t&& rm -rf ${BUILD_DIR} && rm dumb-init-${DUMB_INIT_VERSION}.tar.gz\n\nARG OPENSSL_UPSTREAM=old/1.1.1/openssl-1.1.1d.tar.gz\nARG OPENSSL_SHA1=056057782325134b76d1931c48f2c7e6595d7ef4\nARG OPENSSL_BUILD_PARALLEL=YES\nARG OPENSSL_FLAGS=\nRUN set -x \\\n\t&& mkdir -p ${BUILD_DIR} \\\n\t&& cd ${BUILD_DIR} \\\n\t&& curl -fSL -s -o openssl.tar.gz https://www.openssl.org/source/${OPENSSL_UPSTREAM} \\\n\t&& echo \"${OPENSSL_SHA1} openssl.tar.gz\" | sha1sum -c - \\\n\t&& tar -xf openssl.tar.gz \\\n\t&& cd openssl-* \\\n\t&& ./config shared --prefix=/usr/local --openssldir=/usr/local ${OPENSSL_FLAGS} \\\n\t&& if [ \"${OPENSSL_BUILD_PARALLEL}\" == \"YES\" ] ; then make \"$PARALLELMFLAGS\" ; else make ; fi \\\n\t&& make install \\\n\t&& cd \\\n\t&& rm -rf ${BUILD_DIR} && rm openssl.tar.gz\n\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/lib\"\n\nCOPY . ${BUILD_DIR}\nRUN set -x \\\n\t&& cd ${BUILD_DIR} \\\n\t&& ./bootstrap \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& make \"$PARALLELMFLAGS\" \\\n\t&& make install \\\n\t&& cd \\\n\t&& rm -rf ${BUILD_DIR}\n\nARG USER_ID=1000\nRUN set -x \\\n\t&& useradd -u \"$USER_ID\" -ms /bin/bash user\n\nENTRYPOINT [\"dumb-init\", \"--\", \"xca\"]\n\n"
}