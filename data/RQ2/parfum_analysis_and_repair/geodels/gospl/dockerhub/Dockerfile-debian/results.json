{
  "startTime": 1674249211634,
  "endTime": 1674249212755,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:latest\nMAINTAINER Tristan Salles\n\n# install things\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        bash-completion \\\n        build-essential \\\n        git \\\n        python3-minimal \\\n        python3-dev \\\n        python3-pip \\\n        libxml2-dev \\\n        xorg-dev \\\n        ssh \\\n        curl \\\n        libfreetype6-dev \\\n        libpng-dev \\\n        libxft-dev \\\n        xvfb \\\n        python3-tk \\\n        mesa-utils \\\n        rsync \\\n        vim \\\n        less \\\n        xauth \\\n        swig \\\n        gdb-minimal \\\n        python3-dbg \\\n        cmake \\\n        python3-setuptools \\\n        wget \\\n        gfortran  && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG MPICH_VERSION=\"3.4.3\"\nARG MPICH_CONFIGURE_OPTIONS=\"--enable-fast=all,O3 --prefix=/opt/mpich --with-device=ch3\"\nARG MPICH_MAKE_OPTIONS=\"-j4\"\nWORKDIR /tmp/mpich-build\nRUN wget https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz && \\\n    tar xvzf mpich-${MPICH_VERSION}.tar.gz && \\\n    cd mpich-${MPICH_VERSION} && \\\n    FFLAGS=-fallow-argument-mismatch ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" ${MPICH_CONFIGURE_OPTIONS} && \\\n    make ${MPICH_MAKE_OPTIONS} && \\\n    make install && \\\n    ldconfig && \\\n    cd /tmp && \\\n    rm -fr * && rm mpich-${MPICH_VERSION}.tar.gz\n\nENV MPI_DIR=/opt/mpich\nENV PATH=${MPI_DIR}/bin:$PATH\n\nENV LANG=C.UTF-8\n# Install setuptools and wheel first, needed by plotly\nRUN pip3 install --no-cache-dir -U setuptools && \\\n    pip3 install --no-cache-dir -U wheel && \\\n    pip3 install --no-cache-dir packaging \\\n        appdirs \\\n        numpy \\\n        jupyter \\\n        plotly \\\n        matplotlib \\\n        pillow \\\n        pyvirtualdisplay \\\n        ipython \\\n        ipyparallel \\\n        pint \\\n        sphinx \\\n        sphinx_rtd_theme \\\n        sphinxcontrib-napoleon \\\n        mock \\\n        scipy \\\n        tabulate && \\\n    env MPICC=${MPI_DIR}/mpicc MPICXX=${MPI_DIR}/mpicxx MPIFC=${MPI_DIR}/mpifort python3 -m pip install --no-cache-dir mpi4py\n\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1\n\nWORKDIR /tmp/petsc-build\nARG PETSC_VERSION=\"3.16.1\"\nRUN wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz && \\\n    tar zxf petsc-lite-${PETSC_VERSION}.tar.gz && cd petsc-${PETSC_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-debugging=0 --prefix=/opt/petsc \\\n                --COPTFLAGS=\"-g -O3\" --CXXOPTFLAGS=\"-g -O3\" --FOPTFLAGS=\"-g -O3\" \\\n                --with-zlib=1 \\\n                --download-fblaslapack=1 \\\n                --download-ctetgen=1 \\\n                --download-triangle=1 \\\n                --download-hdf5=1 \\\n                --download-mumps=1 \\\n                --download-parmetis=1 \\\n                --download-eigen=1 \\\n                --download-metis=1 \\\n                --download-hypre=1 \\\n                --download-scalapack=1 \\\n                --download-pragmatic=1 \\\n                --useThreads=1 \\\n                --with-shared-libraries \\\n                --with-cxx-dialect=C++11 && \\\n    make PETSC_DIR=/tmp/petsc-build/petsc-${PETSC_VERSION} PETSC_ARCH=arch-linux-c-opt all && \\\n    make PETSC_DIR=/tmp/petsc-build/petsc-${PETSC_VERSION} PETSC_ARCH=arch-linux-c-opt install && \\\n    make PETSC_DIR=/opt/petsc PETSC_ARCH=\"\" check && \\\n    cd /tmp && \\\n    rm -fr * && rm petsc-lite-${PETSC_VERSION}.tar.gz\n\nENV PETSC_DIR=/opt/petsc\nENV PATH=${PETSC_DIR}/bin:$PATH\n\nENV PYTHONPATH $PYTHONPATH:/usr/lib\n#RUN CC=h5pcc HDF5_MPI=\"ON\" HDF5_DIR=${PETSC_DIR} python3 -m pip install --no-cache-dir --no-binary=h5py h5py && \\\nRUN python3 -m pip install --no-cache-dir h5py\n#==2.10.0\n\nRUN python3 -m pip install --no-cache-dir petsc4py==3.16.1\n\n# install extras in a new layer\nRUN python3 -m pip install --no-cache-dir \\\n        ipython \\\n        jupyter\n\n# Install Tini.. this is required because CMD (below) doesn't play nice with notebooks for some reason: https://github.com/ipython/ipython/issues/7062, https://github.com/jupyter/notebook/issues/334\nRUN curl -f -L https://github.com/krallin/tini/releases/download/v0.10.0/tini > tini && \\\n    echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0  *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\n# expose notebook port\nEXPOSE 8888\n\nRUN python3 -m pip install --no-cache-dir setuptools wheel && \\\n    python3 -m pip install --no-cache-dir \\\n    pathlib \\\n    meshio>=4.2.2 \\\n    shapely \\\n    meshplex>=0.13.3 \\\n    ruamel.yaml>=0.16.12 \\\n    numpy>=1.19.2 \\\n    scipy>=1.5.2 \\\n    Cython>=0.29.21 \\\n    h5py>=2.10.0 \\\n    pandas>=1.1.2  \\\n    meshplex>=0.15.14 \\\n    scikit-fuzzy>=0.4.2 \\\n    pre-commit>=2.7.1 \\\n    vtk\n\n# create a volume\nRUN mkdir /live && \\\n    mkdir /live/lib\n\nVOLUME /live/share\nWORKDIR /live\n\nEXPOSE 8888\nENV TINI_VERSION v0.18.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/local/bin/tini\nRUN chmod +x /usr/local/bin/tini\nENTRYPOINT [\"/usr/local/bin/tini\", \"--\"]\n\nEXPOSE 9999\n# script for xvfb-run.  all docker commands will effectively run under this via the entrypoint\nRUN printf \"#\\041/bin/sh \\n rm -f /tmp/.X99-lock && xvfb-run -s '-screen 0 1600x1200x16' \\$@\" >> /usr/local/bin/xvfbrun.sh && \\\nchmod +x /usr/local/bin/xvfbrun.sh\n\n# Add Tini\nEXPOSE 8888\nENV TINI_VERSION v0.18.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/local/bin/tini\nRUN chmod +x /usr/local/bin/tini\nENTRYPOINT [\"/usr/local/bin/tini\", \"--\"]\n\nEXPOSE 9999\n\n# install JIGSAW\nRUN git clone https://github.com/dengwirda/jigsaw-python.git  && \\\ncd jigsaw-python && \\\npython3 setup.py build_external && \\\npython3 setup.py install\n\n# note we use xvfb which to mimic the X display\nENTRYPOINT [\"/usr/local/bin/xvfbrun.sh\"]\n\n# launch notebook\n#CMD [\"jupyter\", \"notebook\", \" --no-browser\", \"--allow-root\", \"--ip=0.0.0.0\", \"--NotebookApp.iopub_data_rate_limit=1.0e10\"]\n\nADD run-jupyter.sh /usr/local/bin/run-jupyter.sh\nRUN chmod +x /usr/local/bin/run-jupyter.sh\nCMD /usr/local/bin/run-jupyter.sh\n"
}