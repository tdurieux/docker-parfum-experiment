{
  "startTime": 1674220120974,
  "endTime": 1674220122881,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:latest\nMAINTAINER Tristan Salles\n\n# install things\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        bash-completion \\\n        build-essential \\\n        git \\\n        python3-minimal \\\n        python3-dev \\\n        python3-pip \\\n        libxml2-dev \\\n        xorg-dev \\\n        ssh \\\n        curl \\\n        libfreetype6-dev \\\n        libpng-dev \\\n        libxft-dev \\\n        xvfb \\\n        python3-tk \\\n        mesa-utils \\\n        rsync \\\n        vim \\\n        less \\\n        xauth \\\n        swig \\\n        gdb-minimal \\\n        python3-dbg \\\n        cmake \\\n        python3-setuptools \\\n        wget \\\n        gfortran  && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV LANG=C.UTF-8\n# Install setuptools and wheel first, needed by plotly\nRUN pip3 install --no-cache-dir -U setuptools && \\\n    pip3 install --no-cache-dir -U wheel && \\\n    pip3 install --no-cache-dir packaging \\\n        appdirs \\\n        numpy \\\n        jupyter \\\n        plotly \\\n        matplotlib \\\n        pillow \\\n        scipy\n\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1\n\n# install extras in a new layer\nRUN python3 -m pip install --no-cache-dir \\\n        ipython \\\n        jupyter\n\n# Install Tini.. this is required because CMD (below) doesn't play nice with notebooks for some reason: https://github.com/ipython/ipython/issues/7062, https://github.com/jupyter/notebook/issues/334\nRUN curl -f -L https://github.com/krallin/tini/releases/download/v0.10.0/tini > tini && \\\n    echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0  *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\n# expose notebook port\nEXPOSE 8888\n\n# create a volume\nRUN mkdir /live && \\\n    mkdir /live/lib\n\nVOLUME /live/share\nWORKDIR /live\n\n\nEXPOSE 9999\n# script for xvfb-run.  all docker commands will effectively run under this via the entrypoint\nRUN printf \"#\\041/bin/sh \\n rm -f /tmp/.X99-lock && xvfb-run -s '-screen 0 1600x1200x16' \\$@\" >> /usr/local/bin/xvfbrun.sh && \\\nchmod +x /usr/local/bin/xvfbrun.sh\n\n# Add Tini\nEXPOSE 8888\nENV TINI_VERSION v0.18.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/local/bin/tini\nRUN chmod +x /usr/local/bin/tini\nENTRYPOINT [\"/usr/local/bin/tini\", \"--\"]\n\n# note we use xvfb which to mimic the X display\nENTRYPOINT [\"/usr/local/bin/xvfbrun.sh\"]\n\nADD run-jupyter.sh /usr/local/bin/run-jupyter.sh\nRUN chmod +x /usr/local/bin/run-jupyter.sh\nCMD /usr/local/bin/run-jupyter.sh\n"
}