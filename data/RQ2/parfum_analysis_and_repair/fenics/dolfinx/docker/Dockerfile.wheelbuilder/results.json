{
  "startTime": 1674220673884,
  "endTime": 1674220675263,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 160
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for building image suitable for creating binary Python wheels on\n# Linux x86-64 platforms.  This image should be built manually/locally and\n# pushed to docker.io/fenicsproject/wheelbuilder_x86_64:latest. It is then\n# used in the DOLFINx GitHub workflow wheels.yml.\n#\n# docker build -t docker.io/fenicsproject/wheelbuilder_x86_64:latest -f Dockerfile.wheelbuilder .\n# docker push docker.io/fenicsproject.org/wheelbuilder_x86_64:latest\nFROM quay.io/pypa/manylinux2014_x86_64:2021-11-15-a808c18\n\nARG BUILD_NP=16\n\nARG MPICH_VERSION=3.4.2\nARG PETSC_VERSION=3.16.0\nARG BOOST_VERSION=1.77.0\nARG BOOST_VERSION_UNDERSCORES=1_77_0\nARG HDF5_SERIES=1.12\nARG HDF5_PATCH=1\n\nWORKDIR /tmp\n\nRUN yum -y update && \\\n    yum -y install cmake flex bison openblas-devel ninja-build && \\\n    yum -y clean all && \\\n    rm -rf /var/cache && rm -rf /var/cache/yum\n\nRUN curl -f -L -O http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz && \\\n    tar -xf mpich-${MPICH_VERSION}.tar.gz && \\\n    cd mpich-${MPICH_VERSION} && \\\n    FFLAGS=-fallow-argument-mismatch ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-device=ch4:ofi --enable-shared --prefix=/usr/local && \\\n    make -j${BUILD_NP} install && \\\n    rm -rf /tmp/* && rm mpich-${MPICH_VERSION}.tar.gz\n\nRUN curl -f -L -O http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz && \\\n    mkdir petsc && \\\n    tar -xf petsc-lite-${PETSC_VERSION}.tar.gz -C petsc --strip-components=1 && \\\n    cd petsc && \\\n    python3.8 ./configure \\\n      --with-shared-libraries \\\n      --with-fortran-bindings=no \\\n      --with-scalar-type=real \\\n      --with-64-bit-indices=no \\\n      --download-ptscotch \\\n      --download-hypre \\\n      --download-metis \\\n      --download-mumps \\\n      --download-scalapack \\\n      --download-superlu \\\n      --download-superlu_dist \\\n      --prefix=/usr/local \\\n      --with-make-np=${BUILD_NP} && \\\n    make all && \\\n    make install && \\\n    rm -rf /tmp/* && rm petsc-lite-${PETSC_VERSION}.tar.gz\n\nRUN curl -f -L -O https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION_UNDERSCORES}.tar.gz && \\\n    tar -xf boost_${BOOST_VERSION_UNDERSCORES}.tar.gz && \\\n    cd boost_${BOOST_VERSION_UNDERSCORES} && \\\n    ./bootstrap.sh --prefix=/usr/local && \\\n    ./b2 -j ${BUILD_NP} --with-timer --with-filesystem --with-program_options cxxflags=\"-fPIC -std=c++11\" install && \\\n    rm -rf /tmp/* && rm boost_${BOOST_VERSION_UNDERSCORES}.tar.gz\n\nRUN curl -f -L -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_SERIES}/hdf5-${HDF5_SERIES}.${HDF5_PATCH}/src/hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz && \\\n    tar -xf hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz && \\\n    cd hdf5-${HDF5_SERIES}.${HDF5_PATCH} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-parallel --enable-shared --enable-static=no && \\\n    make -j${BUILD_NP} install && \\\n    rm -rf /tmp/* && rm hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz\n"
}