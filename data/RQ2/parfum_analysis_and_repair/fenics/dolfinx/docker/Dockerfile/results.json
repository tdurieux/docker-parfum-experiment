{
  "startTime": 1674252564410,
  "endTime": 1674252566535,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 139
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 244,
        "lineEnd": 244,
        "columnStart": 29,
        "columnEnd": 103
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 349,
        "lineEnd": 349,
        "columnStart": 29,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 115,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 132,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 142,
        "lineEnd": 151,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 242,
        "lineEnd": 242,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 480,
        "lineEnd": 480,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile describing development builds of FEniCSx\n#\n# Authors:\n# Jack S. Hale <jack.hale@uni.lu>\n# Lizao Li <lzlarryli@gmail.com>\n# Garth N. Wells <gnw20@cam.ac.uk>\n# Jan Blechta <blechta@karlin.mff.cuni.cz>\n#\n# To run a nightly build:\n#\n#    docker run -ti dolfinx/dolfinx:latest\n#\n# To run a Jupyter lab session:\n#\n#    docker run --init -p 8888:8888 dolfinx/lab:latest\n#\n# To run and share the current host directory with the container:\n#\n#    docker run --init -p 8888:8888 -v \"$(pwd)\":/root/shared dolfinx/lab:latest\n#\n# To build from source, first checkout the DOLFINx, FFCx, Basix and UFL\n# repositories into the working directory, e.g.:\n#\n# $ ls $(pwd)\n# dolfinx  ffcx  basix  ufl\n#\n# Then run the commands:\n#\n#    docker pull dolfinx/dolfinx-onbuild:latest\n#    echo \"FROM dolfinx/dolfinx-onbuild:latest\" | docker build -f- .\n#\n# You can build an optimised version of the complete FEniCS environment for\n# your platform using the commands:\n#\n#    echo '{ \"cffi_extra_compile_args\" : [\"-O2\", \"-march=native\" ] }' > dolfinx/docker/dolfinx_jit_parameters.json\n#    docker build --target dolfinx --file dolfinx/docker/Dockerfile --build-arg PETSC_SLEPC_OPTFLAGS=\"-O2 -march=native\" --build-arg DOLFINX_CMAKE_CXX_FLAGS=\"-march=native\" .\n#\n# You can build an optimised version of the FEniCS development environment\n# (without the FEniCS components) for your platform using the command:\n#\n#    docker build --target dev-env --file dolfinx/docker/Dockerfile --build-arg PETSC_SLEPC_OPTFLAGS=\"-O2 -march=native\" .\n#\n\n\nARG ADIOS2_VERSION=2.8.1\nARG GMSH_VERSION=4_10_1\nARG HDF5_SERIES=1.12\nARG HDF5_PATCH=2\nARG KAHIP_VERSION=3.14\nARG NUMPY_VERSION=1.22.4\nARG PYBIND11_VERSION=2.9.2\nARG PETSC_VERSION=3.17.2\nARG SLEPC_VERSION=3.17.1\nARG PYVISTA_VERSION=0.34.2\nARG XTENSOR_VERSION=0.24.2\nARG XTL_VERSION=0.7.4\n\nARG MPICH_VERSION=4.0.2\nARG OPENMPI_SERIES=4.1\nARG OPENMPI_PATCH=4\n# Used to set the correct PYTHONPATH for the real and complex install of DOLFINx\nARG PYTHON_VERSION=3.10\n\n########################################\n\nFROM ubuntu:22.04 as dev-env\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"FEniCS testing and development environment with PETSc real, complex, 32-bit and 64-bit modes\"\n\nARG GMSH_VERSION\nARG HDF5_SERIES\nARG HDF5_PATCH\nARG PYBIND11_VERSION\nARG PETSC_VERSION\nARG SLEPC_VERSION\nARG ADIOS2_VERSION\nARG KAHIP_VERSION\nARG NUMPY_VERSION\nARG XTENSOR_VERSION\nARG XTL_VERSION\nARG MPICH_VERSION\nARG OPENMPI_SERIES\nARG OPENMPI_PATCH\n\n# The following ARGS are used in the dev-env layer.\n# They are safe defaults. They can be overridden by the user.\n# Compiler optimisation flags for SLEPc and PETSc, all languages.\nARG PETSC_SLEPC_OPTFLAGS=\"-O2\"\n# PETSc and SLEPc number of make processes (--with-make-np)\nARG PETSC_SLEPC_MAKE_NP=2\n# Turn on PETSc and SLEPc debugging. \"yes\" or \"no\".\nARG PETSC_SLEPC_DEBUGGING=\"no\"\n\n# MPI variant. \"mpich\" or \"openmpi\".\nARG MPI=\"mpich\"\nARG MPICH_CONFIGURE_OPTIONS=\"FCFLAGS=-fallow-argument-mismatch FFLAGS=-fallow-argument-mismatch --with-device=ch4:ofi\"  # See https://github.com/pmodels/mpich/issues/5811\n\n# Number of build threads to use with make\nARG BUILD_NP=2\n\nWORKDIR /tmp\n\n# Environment variables\nENV OPENBLAS_NUM_THREADS=1 \\\n    OPENBLAS_VERBOSE=0\n\n# Install dependencies available via apt-get.\n# - First set of packages are required to build and run FEniCS.\n# - Second set of packages are recommended and/or required to build\n#   documentation or tests.\n# - Third set of packages are optional, but required to run gmsh\n#   pre-built binaries.\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get -qq update && \\\n    apt-get -yq --with-new-pkgs -o Dpkg::Options::=\"--force-confold\" upgrade && \\\n    apt-get -y --no-install-recommends install \\\n    clang \\\n    cmake \\\n    g++ \\\n    gfortran \\\n    libboost-dev \\\n    libboost-filesystem-dev \\\n    libboost-timer-dev \\\n    liblapack-dev \\\n    libopenblas-dev \\\n    libpugixml-dev \\\n    ninja-build \\\n    pkg-config \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools && \\\n    #\n    apt-get -y --no-install-recommends install \\\n    catch2 \\\n    clang-format \\\n    doxygen \\\n    git \\\n    graphviz \\\n    libeigen3-dev \\\n    valgrind \\\n    wget && \\\n    #\n    apt-get -y --no-install-recommends install \\\n    libglu1 \\\n    libxcursor-dev \\\n    libxft2 \\\n    libxinerama1 \\\n    libfltk1.3-dev \\\n    libfreetype6-dev \\\n    libgl1-mesa-dev \\\n    libocct-foundation-dev \\\n    libocct-data-exchange-dev && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install MPI\nRUN if [ \"$MPI\" = \"mpich\" ]; then \\\n    wget https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz && \\\n    tar xfz mpich-${MPICH_VERSION}.tar.gz && \\\n    cd mpich-${MPICH_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" ${MPICH_CONFIGURE_OPTIONS} && \\\n    make -j${BUILD_NP} install; rm mpich-${MPICH_VERSION}.tar.gz \\\n    else \\\n    wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_SERIES}/openmpi-${OPENMPI_SERIES}.${OPENMPI_PATCH}.tar.gz && \\\n    tar xfz openmpi-${OPENMPI_SERIES}.${OPENMPI_PATCH}.tar.gz  && \\\n    cd openmpi-${OPENMPI_SERIES}.${OPENMPI_PATCH} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j${BUILD_NP} install; rm openmpi-${OPENMPI_SERIES}.${OPENMPI_PATCH}.tar.gz \\\n    fi && \\\n    ldconfig && \\\n    rm -rf /tmp/*\n\n# Install Python packages (via pip)\n# Install numpy via pip. Exclude binaries to avoid conflicts with libblas\n# (See issue #126 and #1305)\n# - First set of packages are required to build and run DOLFINx Python.\n# - Second set of packages are recommended and/or required to build\n#   documentation or run tests.\nRUN pip3 install --no-binary=\"numpy\" --no-cache-dir cffi mpi4py numba numpy==${NUMPY_VERSION} scipy && \\\n    pip3 install --no-cache-dir cppimport flake8 isort jupytext matplotlib mypy myst-parser pybind11==${PYBIND11_VERSION} pytest pytest-xdist sphinx sphinx_rtd_theme\n\n# Install xtl, xtensor\nRUN git clone -b ${XTL_VERSION} --single-branch --depth 1 https://github.com/xtensor-stack/xtl.git && \\\n    cd xtl && \\\n    cmake -G Ninja . && \\\n    ninja install && \\\n    cd ../ && \\\n    git clone -b ${XTENSOR_VERSION} --single-branch --depth 1 https://github.com/xtensor-stack/xtensor.git && \\\n    cd xtensor && \\\n    cmake -G Ninja . && \\\n    ninja install && \\\n    rm -rf /tmp/*\n\n# Install KaHIP\nRUN wget -nc --quiet https://github.com/kahip/kahip/archive/v${KAHIP_VERSION}.tar.gz && \\\n    tar -xf v${KAHIP_VERSION}.tar.gz && \\\n    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DNONATIVEOPTIMIZATIONS=on -B build-dir -S KaHIP-${KAHIP_VERSION} && \\\n    cmake --build build-dir && \\\n    cmake --install build-dir && \\\n    rm -rf /tmp/* && rm v${KAHIP_VERSION}.tar.gz\n\n# Install HDF5\nRUN wget -nc --quiet https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_SERIES}/hdf5-${HDF5_SERIES}.${HDF5_PATCH}/src/hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz && \\\n    tar xfz hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz && \\\n    cd hdf5-${HDF5_SERIES}.${HDF5_PATCH} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-parallel --enable-shared --enable-static=no && \\\n    make -j${BUILD_NP} install && \\\n    rm -rf /tmp/* && rm hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz\n\n# HDF5 CMake build broken, see\n# https://github.com/HDFGroup/hdf5/issues/969,\n# https://github.com/HDFGroup/hdf5/pull/1089\n# RUN wget -nc --quiet https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_SERIES}/hdf5-${HDF5_SERIES}.${HDF5_PATCH}/src/hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz && \\\n#    tar xfz hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz && \\\n#     cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -HDF5_ENABLE_PARALLEL=on -B build-dir -S hdf5-${HDF5_SERIES}.${HDF5_PATCH} && \\\n#     cmake --build build-dir && \\ARG BUILD_NP=2\n\n#     cmake --install build-dir && \\\n#     rm -rf /tmp/*\n\n# Install ADIOS2\nRUN wget -nc --quiet https://github.com/ornladios/ADIOS2/archive/v${ADIOS2_VERSION}.tar.gz -O adios2-v${ADIOS2_VERSION}.tar.gz && \\\n    mkdir -p adios2-v${ADIOS2_VERSION} && \\\n    tar -xf adios2-v${ADIOS2_VERSION}.tar.gz -C adios2-v${ADIOS2_VERSION} --strip-components 1 && \\\n    cmake -G Ninja -DADIOS2_USE_HDF5=on -DADIOS2_USE_Fortran=off -DBUILD_TESTING=off -DADIOS2_BUILD_EXAMPLES=off -DADIOS2_USE_ZeroMQ=off -B build-dir -S ./adios2-v${ADIOS2_VERSION} && \\\n    cmake --build build-dir && \\\n    cmake --install build-dir && \\\n    rm -rf /tmp/* && rm adios2-v${ADIOS2_VERSION}.tar.gz\n\n# Install GMSH\nRUN git clone -b gmsh_${GMSH_VERSION} --single-branch --depth 1 https://gitlab.onelab.info/gmsh/gmsh.git && \\\n    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_BUILD_DYNAMIC=1  -DENABLE_OPENMP=1 -B build-dir -S gmsh && \\\n    cmake --build build-dir && \\\n    cmake --install build-dir && \\\n    rm -rf /tmp/*\n\n# GMSH installs python library in /usr/local/lib, see: https://gitlab.onelab.info/gmsh/gmsh/-/issues/1414\nENV PYTHONPATH=/usr/local/lib:$PYTHONPATH\n\n# Install PETSc and petsc4py with real and complex types\nENV PETSC_DIR=/usr/local/petsc SLEPC_DIR=/usr/local/slepc\nRUN apt-get -qq update && \\\n    apt-get -y --no-install-recommends install bison flex && \\\n    wget -nc --quiet https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz && \\\n    mkdir -p ${PETSC_DIR} && tar -xf petsc-${PETSC_VERSION}.tar.gz -C ${PETSC_DIR} --strip-components 1 && \\\n    cd ${PETSC_DIR} && \\\n    # Real, 32-bit int\n    python3 ./configure \\\n    PETSC_ARCH=linux-gnu-real-32 \\\n    --COPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --CXXOPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --FOPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --with-make-np=${PETSC_SLEPC_MAKE_NP} \\\n    --with-64-bit-indices=no \\\n    --with-debugging=${PETSC_SLEPC_DEBUGGING} \\\n    --with-fortran-bindings=no \\\n    --with-shared-libraries \\\n    --download-hypre \\\n    --download-metis \\\n    --download-mumps \\\n    --download-ptscotch \\\n    --download-scalapack \\\n    --download-spai \\\n    --download-suitesparse \\\n    --download-superlu \\\n    --download-superlu_dist \\\n    --with-scalar-type=real && \\\n    make PETSC_DIR=/usr/local/petsc PETSC_ARCH=linux-gnu-real-32 ${MAKEFLAGS} all && \\\n    # Complex, 32-bit int\n    python3 ./configure \\\n    PETSC_ARCH=linux-gnu-complex-32 \\\n    --COPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --CXXOPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --FOPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --with-make-np=${PETSC_SLEPC_MAKE_NP} \\\n    --with-64-bit-indices=no \\\n    --with-debugging=${PETSC_SLEPC_DEBUGGING} \\\n    --with-fortran-bindings=no \\\n    --with-shared-libraries \\\n    --download-hypre \\\n    --download-metis \\\n    --download-mumps \\\n    --download-ptscotch \\\n    --download-scalapack \\\n    --download-suitesparse \\\n    --download-superlu \\\n    --download-superlu_dist \\\n    --with-scalar-type=complex && \\\n    make PETSC_DIR=/usr/local/petsc PETSC_ARCH=linux-gnu-complex-32 ${MAKEFLAGS} all && \\\n    # Real, 64-bit int\n    python3 ./configure \\\n    PETSC_ARCH=linux-gnu-real-64 \\\n    --COPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --CXXOPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --FOPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --with-make-np=${PETSC_SLEPC_MAKE_NP} \\\n    --with-64-bit-indices=yes \\\n    --with-debugging=${PETSC_SLEPC_DEBUGGING} \\\n    --with-fortran-bindings=no \\\n    --with-shared-libraries \\\n    --download-hypre \\\n    --download-mumps \\\n    --download-ptscotch \\\n    --download-scalapack \\\n    --download-suitesparse \\\n    --download-superlu_dist \\\n    --with-scalar-type=real && \\\n    make PETSC_DIR=/usr/local/petsc PETSC_ARCH=linux-gnu-real-64 ${MAKEFLAGS} all && \\\n    # Complex, 64-bit int\n    python3 ./configure \\\n    PETSC_ARCH=linux-gnu-complex-64 \\\n    --COPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --CXXOPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --FOPTFLAGS=\"${PETSC_SLEPC_OPTFLAGS}\" \\\n    --with-make-np=${PETSC_SLEPC_MAKE_NP} \\\n    --with-64-bit-indices=yes \\\n    --with-debugging=${PETSC_SLEPC_DEBUGGING} \\\n    --with-fortran-bindings=no \\\n    --with-shared-libraries \\\n    --download-hypre \\\n    --download-mumps \\\n    --download-ptscotch \\\n    --download-scalapack \\\n    --download-suitesparse \\\n    --download-superlu_dist \\\n    --with-scalar-type=complex && \\\n    make PETSC_DIR=/usr/local/petsc PETSC_ARCH=linux-gnu-complex-64 ${MAKEFLAGS} all && \\\n    # Install petsc4py\n    cd src/binding/petsc4py && \\\n    PETSC_ARCH=linux-gnu-real-32:linux-gnu-complex-32:linux-gnu-real-64:linux-gnu-complex-64 pip3 install --no-cache-dir . && \\\n    # Cleanup\n    apt-get -y purge bison flex && \\\n    apt-get -y autoremove && \\\n    apt-get clean && \\\n    rm -rf \\\n    ${PETSC_DIR}/**/tests/ \\\n    ${PETSC_DIR}/**/obj/ \\\n    ${PETSC_DIR}/**/externalpackages/  \\\n    ${PETSC_DIR}/CTAGS \\\n    ${PETSC_DIR}/RDict.log \\\n    ${PETSC_DIR}/TAGS \\\n    ${PETSC_DIR}/docs/ \\\n    ${PETSC_DIR}/share/ \\\n    ${PETSC_DIR}/src/ \\\n    ${PETSC_DIR}/systems/ \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && rm petsc-${PETSC_VERSION}.tar.gz\n\n# Install SLEPc\nRUN wget -nc --quiet https://gitlab.com/slepc/slepc/-/archive/v${SLEPC_VERSION}/slepc-v${SLEPC_VERSION}.tar.gz && \\\n    mkdir -p ${SLEPC_DIR} && tar -xf slepc-v${SLEPC_VERSION}.tar.gz -C ${SLEPC_DIR} --strip-components 1 && \\\n    cd ${SLEPC_DIR} && \\\n    export PETSC_ARCH=linux-gnu-real-32 && \\\n    python3 ./configure && \\\n    make && \\\n    export PETSC_ARCH=linux-gnu-complex-32 && \\\n    python3 ./configure && \\\n    make && \\\n    export PETSC_ARCH=linux-gnu-real-64 && \\\n    python3 ./configure && \\\n    make && \\\n    export PETSC_ARCH=linux-gnu-complex-64 && \\\n    python3 ./configure && \\\n    make && \\\n    # Install slepc4py\n    cd src/binding/slepc4py && \\\n    PETSC_ARCH=linux-gnu-real-32:linux-gnu-complex-32:linux-gnu-real-64:linux-gnu-complex-64 pip3 install --no-cache-dir . && \\\n    rm -rf ${SLEPC_DIR}/CTAGS ${SLEPC_DIR}/TAGS ${SLEPC_DIR}/docs ${SLEPC_DIR}/src/ ${SLEPC_DIR}/**/obj/ ${SLEPC_DIR}/**/test/ && \\\n    rm -rf /tmp/* && rm slepc-v${SLEPC_VERSION}.tar.gz\n\nWORKDIR /root\n\n########################################\n\nFROM dev-env as dolfinx-onbuild\nLABEL description=\"DOLFINx in 32-bit real and complex modes (onbuild)\"\n\nARG PYTHON_VERSION\n\nADD dolfinx/docker/dolfinx-real-mode /usr/local/bin/dolfinx-real-mode\nADD dolfinx/docker/dolfinx-complex-mode /usr/local/bin/dolfinx-complex-mode\nRUN chmod +x /usr/local/bin/dolfinx-*-mode\n\nONBUILD WORKDIR /src\n\n# This leaves the sources inside the container. This is a limitation of\n# Docker. There is some trickery in the intermediate and DOLFINx\n# containers that can be used to remove this source if needed, see\n# below.\nONBUILD ADD basix/ /src/basix/\nONBUILD ADD ufl/ /src/ufl/\nONBUILD ADD ffcx/ /src/ffcx/\nONBUILD ADD dolfinx/ /src/dolfinx/\n\n# These files are empty by default, i.e. they do nothing.\n# The user can set them at build time if they wish.\nONBUILD ADD dolfinx/docker/dolfinx_jit_parameters.json /root/.config/dolfinx/dolfinx_jit_parameters.json\nONBUILD ADD dolfinx/docker/ffcx_parameters.json /root/.config/ffcx/ffcx_parameters.json\n\n# The following ARGS are used in the DOLFINx layer.\n# They are safe defaults.\n# CMake build type for DOLFINx C++ build. See CMake documentation.\nONBUILD ARG DOLFINX_CMAKE_BUILD_TYPE=\"RelWithDebInfo\"\n# Extra CMake C++ compiler flags for DOLFINx C++ build.\nONBUILD ARG DOLFINX_CMAKE_CXX_FLAGS\n\n# The dolfinx-onbuild container expects to have folders basix/ ufl/\n# ffcx/ and dolfinx/ mounted/shared at /src.\nONBUILD RUN cd basix && cmake -G Ninja -DCMAKE_BUILD_TYPE=${DOLFINX_CMAKE_BUILD_TYPE} -DCMAKE_CXX_FLAGS=${DOLFINX_CMAKE_CXX_FLAGS} -B build-dir -S ./cpp && \\\n    cmake --build build-dir && \\\n    cmake --install build-dir && \\\n    python3 -m pip install ./python && \\\n    cd ../ufl && pip3 install --no-cache-dir . && \\\n    cd ../ffcx && pip3 install --no-cache-dir . && \\\n    cd ../ && pip3 install --no-cache-dir ipython\n\nONBUILD RUN cd dolfinx && \\\n    mkdir -p build-real && \\\n    cd build-real && \\\n    PETSC_ARCH=linux-gnu-real-32 cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local/dolfinx-real -DCMAKE_BUILD_TYPE=${DOLFINX_CMAKE_BUILD_TYPE} -DCMAKE_CXX_FLAGS=${DOLFINX_CMAKE_CXX_FLAGS} ../cpp && \\\n    ninja install && \\\n    cd ../python && \\\n    CXXFLAGS=${DOLFINX_CMAKE_CXX_FLAGS} PETSC_ARCH=linux-gnu-real-32 pip3 install -v --target /usr/local/dolfinx-real/lib/python${PYTHON_VERSION}/dist-packages --no-dependencies --no-cache-dir . && \\\n    git clean -fdx && \\\n    cd ../ && \\\n    mkdir -p build-complex && \\\n    cd build-complex && \\\n    PETSC_ARCH=linux-gnu-complex-32 cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local/dolfinx-complex -DCMAKE_BUILD_TYPE=${DOLFINX_CMAKE_BUILD_TYPE} -DCMAKE_CXX_FLAGS=${DOLFIN_CMAKE_CXX_FLAGS} ../cpp && \\\n    ninja install && \\\n    . /usr/local/dolfinx-complex/lib/dolfinx/dolfinx.conf && \\\n    cd ../python && \\\n    CXXFLAGS=${DOLFINX_CMAKE_CXX_FLAGS} PETSC_ARCH=linux-gnu-complex-32 pip3 install -v --target /usr/local/dolfinx-complex/lib/python${PYTHON_VERSION}/dist-packages --no-dependencies --no-cache-dir .\n\n# Real by default.\nONBUILD ENV PKG_CONFIG_PATH=/usr/local/dolfinx-real/lib/pkgconfig:$PKG_CONFIG_PATH \\\n    PETSC_ARCH=linux-gnu-real-32 \\\n    PYTHONPATH=/usr/local/dolfinx-real/lib/python${PYTHON_VERSION}/dist-packages:$PYTHONPATH \\\n    LD_LIBRARY_PATH=/usr/local/dolfinx-real/lib:$LD_LIBRARY_PATH\n\nONBUILD WORKDIR /root\n\n########################################\n\nFROM dolfinx-onbuild as intermediate\n\n########################################\n\nFROM dev-env as dolfinx\nLABEL description=\"DOLFINx in 32-bit real and complex modes\"\n\nARG PYTHON_VERSION\n\n# This layer manually copies the build artifacts from intermediate into\n# dev-env to make the final image. This is a workaround for a well known\n# limitation of Docker that you cannot cleanup after an ADD operation.\n# This reduces the container size by around 80MB as the /src folder no\n# longer exists in the final image.\nCOPY --from=intermediate /usr/local /usr/local\nCOPY --from=intermediate /root/.config /root/.config\n\n# Real by default.\n# Note that because we inherit from dev-env we do not inherit these ENV from\n# dolfinx-onbuild so this must be repeated here.\nENV PKG_CONFIG_PATH=/usr/local/dolfinx-real/lib/pkgconfig:$PKG_CONFIG_PATH \\\n    PETSC_ARCH=linux-gnu-real-32 \\\n    PYTHONPATH=/usr/local/dolfinx-real/lib/python${PYTHON_VERSION}/dist-packages:$PYTHONPATH \\\n    LD_LIBRARY_PATH=/usr/local/dolfinx-real/lib:$LD_LIBRARY_PATH\n\n########################################\n\nFROM dolfinx as lab\nLABEL description=\"DOLFINx Jupyter Lab\"\n\nARG PYVISTA_VERSION\n\nWORKDIR /root\n\nRUN pip3 install --upgrade --no-cache-dir jupyter jupyterlab\n\n# pyvista dependencies from apt\nRUN apt-get -qq update && \\\n    apt-get -y --no-install-recommends install libgl1-mesa-dev xvfb && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# pyvista dependencies from pip. Only compatible with x86-64 (amd64).\n# matplotlib improves plotting quality with better color maps and properly rendering colorbars.\nRUN dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"$dpkgArch\" in amd64) \\\n    pip3 install --no-cache-dir pyvista==${PYVISTA_VERSION} ;; \\\n    esac; \\\n    pip3 install --no-cache-dir matplotlib\n\n# Jupyter Notebook kernel specification for complex build DOLFINx\nADD dolfinx/docker/complex-kernel.json /usr/local/share/jupyter/kernels/python3-complex/kernel.json\n\nEXPOSE 8888/tcp\nENV SHELL /bin/bash\nENTRYPOINT [\"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n"
}