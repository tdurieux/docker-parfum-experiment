{
  "startTime": 1674249098878,
  "endTime": 1674249099969,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 160
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 140
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for testing DOLFINx in Red Hat-compatible distributions.  Must be\n# built locally and pushed.\n#\n# docker build -f Dockerfile.redhat -t docker.io/fenicsproject/test-env:latest-redhat .\n# docker push docker.io/fenicsproject/test-env:latest-redhat\nFROM rockylinux/rockylinux:8\n\nARG BUILD_NP=16\n\nARG BOOST_VERSION=1.77.0\nARG BOOST_VERSION_UNDERSCORES=1_77_0\nARG HDF5_SERIES=1.12\nARG HDF5_PATCH=2\nARG PETSC_VERSION=3.17.1\nARG PYBIND11_VERSION=2.9.2\nARG NUMPY_VERSION=1.21.6\nARG MPICH_VERSION=4.0.2\nARG XTENSOR_VERSION=0.24.2\nARG XTL_VERSION=0.7.4\n\nWORKDIR /tmp\n\nRUN dnf -y update && \\\n    dnf install -y dnf-plugins-core && \\\n    dnf config-manager --set-enabled powertools && \\\n    dnf install -y epel-release && \\\n    dnf -y install \\\n      pugixml-devel \\\n      # Required by PETSc build\n      bison \\\n      cmake \\\n      # Required by PETSc build\n      flex \\\n      gcc-toolset-11 \\\n      # Utility\n      git \\\n      # Only in PowerTools repo\n      ninja-build \\\n      openblas-devel \\\n      python39 \\\n      python39-devel \\\n      python39-pip && \\\n    dnf -y clean all && \\\n    rm -rf /var/cache\n\n# Permanently enable GCC 11 toolset\nENV DEVTOOLSET_ROOTPATH=\"/opt/rh/gcc-toolset-11/root\"\nENV PATH=\"${DEVTOOLSET_ROOTPATH}/usr/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"${DEVTOOLSET_ROOTPATH}/usr/lib64:${DEVTOOLSET_ROOTPATH}/usr/lib:${DEVTOOLSET_ROOTPATH}/usr/lib64/dyninst:${DEVTOOLSET_ROOTPATH}/usr/lib/dyninst:/usr/local/lib64:${LD_LIBRARY_PATH}\"\n\n# Build MPICH (see https://github.com/pmodels/mpich/issues/5811)\nRUN curl -f -L -O http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz && \\\n    tar -xf mpich-${MPICH_VERSION}.tar.gz && \\\n    cd mpich-${MPICH_VERSION} && \\\n    FCFLAGS=-fallow-argument-mismatch FFLAGS=-fallow-argument-mismatch ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-device=ch4:ofi --enable-shared --prefix=/usr/local && \\\n    make -j${BUILD_NP} install && \\\n    rm -rf /tmp/* && rm mpich-${MPICH_VERSION}.tar.gz\n\n# First set of dependencies for building and running Python DOLFINx\n# Second set of dependencies for running DOLFINx tests\nRUN python3 -m pip install --no-binary=\"numpy\" --no-cache-dir cffi numba numpy==${NUMPY_VERSION} mpi4py pybind11==${PYBIND11_VERSION} wheel && \\\n    python3 -m pip install --no-cache-dir cppimport pytest pytest-xdist scipy matplotlib\n\n# Build PETSc\nRUN curl -f -L -O http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz && \\\n    mkdir petsc && \\\n    tar -xf petsc-lite-${PETSC_VERSION}.tar.gz -C petsc --strip-components=1 && \\\n    cd petsc && \\\n    python3 ./configure \\\n      --with-shared-libraries \\\n      --with-fortran-bindings=no \\\n      --with-scalar-type=real \\\n      --with-64-bit-indices=yes \\\n      --with-debugging=yes \\\n      --download-ptscotch \\\n      --download-hypre \\\n      --download-metis \\\n      --download-mumps \\\n      --download-scalapack \\\n      --download-superlu_dist \\\n      --prefix=/usr/local \\\n      --with-make-np=${BUILD_NP} && \\\n    make all && \\\n    make install && \\\n    cd src/binding/petsc4py && \\\n    PETSC_DIR=/usr/local python3 -m pip install --no-cache-dir . && \\\n    rm -rf /tmp/* && rm petsc-lite-${PETSC_VERSION}.tar.gz\n\nENV PETSC_DIR=/usr/local\n\n# System Boost too old\nRUN curl -f -L -O https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION_UNDERSCORES}.tar.gz && \\\n    tar -xf boost_${BOOST_VERSION_UNDERSCORES}.tar.gz && \\\n    cd boost_${BOOST_VERSION_UNDERSCORES} && \\\n    ./bootstrap.sh --prefix=/usr/local && \\\n    ./b2 -j ${BUILD_NP} --with-timer --with-filesystem --with-program_options cxxflags=\"-fPIC -std=c++11\" install && \\\n    rm -rf /tmp/* && rm boost_${BOOST_VERSION_UNDERSCORES}.tar.gz\n\n# Build HDF5\nRUN curl -f -L -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_SERIES}/hdf5-${HDF5_SERIES}.${HDF5_PATCH}/src/hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz && \\\n    tar -xf hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz && \\\n    cd hdf5-${HDF5_SERIES}.${HDF5_PATCH} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-parallel --enable-shared --enable-static=no && \\\n    make -j${BUILD_NP} install && \\\n    rm -rf /tmp/* && rm hdf5-${HDF5_SERIES}.${HDF5_PATCH}.tar.gz\n\n# Install xtensor libraries\nRUN git clone -b ${XTL_VERSION} --single-branch https://github.com/xtensor-stack/xtl.git && \\\n    cd xtl && \\\n    mkdir -p build && \\\n    cd build && \\\n    cmake -G Ninja ../ && \\\n    ninja install && \\\n    cd ../../ && \\\n    git clone -b ${XTENSOR_VERSION} --single-branch https://github.com/xtensor-stack/xtensor.git && \\\n    cd xtensor && \\\n    mkdir -p build && \\\n    cd build && \\\n    cmake -G Ninja ../ && \\\n    ninja install && \\\n    rm -rf /tmp/*\n\n# RHEL pkgconfig does not look here by default. Setting this probably better\n# than forcing install into 'system path' or hacking in DOLFINx pkgconfig.py\n# code.\nENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\n"
}