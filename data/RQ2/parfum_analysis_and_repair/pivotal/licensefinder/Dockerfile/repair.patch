diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/pivotal/licensefinder/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/pivotal/licensefinder/Dockerfile/repaired.Dockerfile
index 1d63ee8..efea973 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/pivotal/licensefinder/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/pivotal/licensefinder/Dockerfile/repaired.Dockerfile
@@ -14,7 +14,7 @@ ENV MIX_VERSION 2.0
 ENV COMPOSER_ALLOW_SUPERUSER 1
 
 # programs needed for building
-RUN apt-get update && apt-get install -y \
+RUN apt-get update && apt-get install --no-install-recommends -y \
   build-essential \
   curl \
   sudo \
@@ -23,26 +23,26 @@ RUN apt-get update && apt-get install -y \
   gnupg2 \
   apt-utils \
   software-properties-common \
-  bzr
+  bzr && rm -rf /var/lib/apt/lists/*;
 
-RUN add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git
+RUN add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install --no-install-recommends -y git && rm -rf /var/lib/apt/lists/*;
 
 # nodejs seems to be required for the one of the gems
-RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - && \
-    apt-get -y install nodejs
+RUN curl -f -sL https://deb.nodesource.com/setup_14.x | bash - && \
+    apt-get -y --no-install-recommends install nodejs && rm -rf /var/lib/apt/lists/*;
 
 # install yarn
-RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \
+RUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \
   echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list && \
   apt-get update && \
-  apt-get install yarn
+  apt-get install -y --no-install-recommends yarn && rm -rf /var/lib/apt/lists/*;
 
 # install bower
 RUN npm install -g bower && \
-    echo '{ "allow_root": true }' > /root/.bowerrc
+    echo '{ "allow_root": true }' > /root/.bowerrc && npm cache clean --force;
 
 # install jdk 12
-RUN curl -L -o openjdk12.tar.gz https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_linux-x64_bin.tar.gz && \
+RUN curl -f -L -o openjdk12.tar.gz https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_linux-x64_bin.tar.gz && \
     tar xvf openjdk12.tar.gz && \
     rm openjdk12.tar.gz && \
     sudo mv jdk-12.0.2 /opt/ && \
@@ -52,24 +52,24 @@ ENV PATH=$PATH:$JAVA_HOME/bin
 RUN java -version
 
 # install rebar3
-RUN curl -o rebar3 https://s3.amazonaws.com/rebar3/rebar3 && \
+RUN curl -f -o rebar3 https://s3.amazonaws.com/rebar3/rebar3 && \
     sudo chmod +x rebar3 && \
     sudo mv rebar3 /usr/local/bin/rebar3
 
 # install and update python and python-pip
-RUN apt-get install -y python python-pip python3-pip && \
+RUN apt-get install --no-install-recommends -y python python-pip python3-pip && \
     python3 -m pip install pip==$PIP3_INSTALL_VERSION --upgrade && \
-    python -m pip install pip==$PIP_INSTALL_VERSION --upgrade --force
+    python -m pip install pip==$PIP_INSTALL_VERSION --upgrade --force && rm -rf /var/lib/apt/lists/*;
 
 # install maven
-RUN curl -O https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz && \
+RUN curl -f -O https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz && \
     tar -xf apache-maven-$MAVEN_VERSION-bin.tar.gz; rm -rf apache-maven-$MAVEN_VERSION-bin.tar.gz && \
     mv apache-maven-$MAVEN_VERSION /usr/local/lib/maven && \
     ln -s /usr/local/lib/maven/bin/mvn /usr/local/bin/mvn
 
 # install sbt
 RUN mkdir -p /usr/local/share/sbt-launcher-packaging && \
-    curl --progress \
+    curl -f --progress \
     --retry 3 \
     --retry-delay 15 \
     --location "https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.tgz" \
@@ -79,7 +79,7 @@ RUN mkdir -p /usr/local/share/sbt-launcher-packaging && \
     rm -f "/tmp/sbt-${SBT_VERSION}.tgz"
 
 # install gradle
-RUN curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip && \
+RUN curl -f -L -o gradle.zip https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip && \
     unzip -q gradle.zip && \
     rm gradle.zip && \
     mv gradle-$GRADLE_VERSION /root/gradle
@@ -106,7 +106,7 @@ RUN mkdir /gopath && \
 
 WORKDIR /tmp
 # Fix the locale
-RUN apt-get install -y locales
+RUN apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;
 RUN locale-gen en_US.UTF-8
 ENV LANG=en_US.UTF-8
 ENV LANGUAGE=en_US:en
@@ -117,8 +117,8 @@ RUN curl https://sh.rustup.rs -sSf | bash -ls -- -y --profile minimal
 
 #install rvm
 RUN apt-add-repository -y ppa:rael-gc/rvm && \
-    apt update && apt install -y rvm && \
-    /usr/share/rvm/bin/rvm install --default $RUBY_VERSION
+    apt update && apt install --no-install-recommends -y rvm && \
+    /usr/share/rvm/bin/rvm install --default $RUBY_VERSION && rm -rf /var/lib/apt/lists/*;
 
 # install bundler
 RUN bash -lc "gem update --system && gem install bundler"
@@ -128,7 +128,7 @@ RUN wget https://packages.erlang-solutions.com/erlang-solutions_${MIX_VERSION}_a
     sudo dpkg -i erlang-solutions_${MIX_VERSION}_all.deb && \
     sudo rm -f erlang-solutions_${MIX_VERSION}_all.deb && \
     sudo apt-get update && \
-    sudo apt-get install -y esl-erlang
+    sudo apt-get install --no-install-recommends -y esl-erlang && rm -rf /var/lib/apt/lists/*;
 # Install Elixir
 WORKDIR /tmp/elixir-build
 RUN git clone https://github.com/elixir-lang/elixir.git
@@ -137,30 +137,30 @@ RUN make && make install
 WORKDIR /
 
 # install conan
-RUN apt-get install -y python-dev && \
+RUN apt-get install --no-install-recommends -y python-dev && \
 	pip install --no-cache-dir --ignore-installed six --ignore-installed colorama \
 	    --ignore-installed requests --ignore-installed chardet \
 	    --ignore-installed urllib3 \
 	    --upgrade setuptools && \
     pip install --no-cache-dir -Iv conan==1.43.0 && \
-    conan config install https://github.com/conan-io/conanclientcert.git
+    conan config install https://github.com/conan-io/conanclientcert.git && rm -rf /var/lib/apt/lists/*;
 
 
 # install NuGet (w. mono)
 # https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#macoslinux
 RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF &&\
   echo "deb https://download.mono-project.com/repo/ubuntu stable-bionic main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list &&\
-  apt-get update &&\
-  apt-get install -y mono-complete &&\
-  curl -o "/usr/local/bin/nuget.exe" "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" &&\
-  curl -o "/usr/local/bin/nugetv3.5.0.exe" "https://dist.nuget.org/win-x86-commandline/v3.5.0/nuget.exe"
+  apt-get update && \
+  apt-get install --no-install-recommends -y mono-complete && \
+  curl -f -o "/usr/local/bin/nuget.exe" "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" && \
+  curl -f -o "/usr/local/bin/nugetv3.5.0.exe" "https://dist.nuget.org/win-x86-commandline/v3.5.0/nuget.exe" && rm -rf /var/lib/apt/lists/*;
 
 # install dotnet core
 RUN wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb &&\
   sudo dpkg -i packages-microsoft-prod.deb &&\
   rm packages-microsoft-prod.deb &&\
-  sudo apt-get update &&\
-  sudo apt-get install -y dotnet-runtime-2.1 dotnet-sdk-2.1 dotnet-sdk-2.2 dotnet-sdk-3.0 dotnet-sdk-3.1
+  sudo apt-get update && \
+  sudo apt-get install --no-install-recommends -y dotnet-runtime-2.1 dotnet-sdk-2.1 dotnet-sdk-2.2 dotnet-sdk-3.0 dotnet-sdk-3.1 && rm -rf /var/lib/apt/lists/*;
 
 # install Composer
 # The ARG and ENV are for installing tzdata which is part of this installaion.
@@ -169,15 +169,15 @@ ENV TZ=GMT
 RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 4F4EA0AAE5267A6C &&\
     echo "deb http://ppa.launchpad.net/ondrej/php/ubuntu bionic main" | sudo tee /etc/apt/sources.list.d/php.list &&\
     apt-get update &&\
-    export DEBIAN_FRONTEND=noninteractive &&\
-    apt-get install -y php7.4-cli &&\
-    EXPECTED_COMPOSER_INSTALLER_CHECKSUM="$(curl --silent https://composer.github.io/installer.sig)" &&\
-    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" &&\
-    ACTUAL_COMPOSER_INSTALLER_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")" &&\
-    test "${ACTUAL_COMPOSER_INSTALLER_CHECKSUM}" = "${EXPECTED_COMPOSER_INSTALLER_CHECKSUM}" || (echo "ERROR: Invalid installer checksum" >&2; false) &&\
-    php composer-setup.php &&\
-    php -r "unlink('composer-setup.php');" &&\
-    mv composer.phar /usr/bin/composer
+    export DEBIAN_FRONTEND=noninteractive && \
+    apt-get install --no-install-recommends -y php7.4-cli && \
+    EXPECTED_COMPOSER_INSTALLER_CHECKSUM="$( curl -f --silent https://composer.github.io/installer.sig)" && \
+    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
+    ACTUAL_COMPOSER_INSTALLER_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")" && \
+    test "${ACTUAL_COMPOSER_INSTALLER_CHECKSUM}" = "${EXPECTED_COMPOSER_INSTALLER_CHECKSUM}" || (echo "ERROR: Invalid installer checksum" >&2; false) && \
+    php composer-setup.php && \
+    php -r "unlink('composer-setup.php');" && \
+    mv composer.phar /usr/bin/composer && rm -rf /var/lib/apt/lists/*;
 
 # install miniconda
 # See https://docs.conda.io/en/latest/miniconda_hashes.html
@@ -194,7 +194,7 @@ RUN  \
 # Based on https://github.com/apple/swift-docker/blob/main/5.3/ubuntu/18.04/Dockerfile
 # The GPG download steps has been modified. Keys are now on LF repo and copied instaad of downloaded.
 # Refer to https://swift.org/download/#using-downloads in the Linux section on how to download the keys
-RUN apt-get -q install -y \
+RUN apt-get -q --no-install-recommends install -y \
     libatomic1 \
     libcurl4 \
     libxml2 \
@@ -214,11 +214,11 @@ RUN apt-get -q install -y \
 #install flutter
 ENV FLUTTER_HOME=/root/flutter
 RUN git config --global --add safe.directory /root/flutter
-RUN curl -o flutter_linux_2.8.1-stable.tar.xz https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_2.8.1-stable.tar.xz \
+RUN curl -f -o flutter_linux_2.8.1-stable.tar.xz https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_2.8.1-stable.tar.xz \
     && tar xf flutter_linux_2.8.1-stable.tar.xz \
     && mv flutter ${FLUTTER_HOME} \
     && rm flutter_linux_2.8.1-stable.tar.xz
-        
+
 ENV PATH=$PATH:${FLUTTER_HOME}/bin:${FLUTTER_HOME}/bin/cache/dart-sdk/bin
 RUN flutter doctor -v \
     && flutter update-packages \
@@ -253,11 +253,11 @@ RUN set -e; \
     && SWIFT_SIG_URL="$SWIFT_BIN_URL.sig" \
     # - Grab curl here so we cache better up above
     && export DEBIAN_FRONTEND=noninteractive \
-    && apt-get -q update && apt-get -q install -y curl && rm -rf /var/lib/apt/lists/* \
+    && apt-get -q update && apt-get -q --no-install-recommends install -y curl && rm -rf /var/lib/apt/lists/* \
     # - Download the GPG keys, Swift toolchain, and toolchain signature, and verify.
     && export GNUPGHOME="$(mktemp -d)" \
     && curl -fsSL "$SWIFT_BIN_URL" -o swift.tar.gz "$SWIFT_SIG_URL" -o swift.tar.gz.sig \
-    && gpg --import swift-all-keys.asc \
+    && gpg --batch --import swift-all-keys.asc \
     && gpg --batch --verify swift.tar.gz.sig swift.tar.gz \
     # - Unpack the toolchain, set libs permissions, and clean up.
     && tar -xzf swift.tar.gz --directory / --strip-components=1 \