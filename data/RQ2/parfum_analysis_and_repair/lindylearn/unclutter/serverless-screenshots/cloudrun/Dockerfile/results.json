{
  "startTime": 1674249728445,
  "endTime": 1674249729538,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 2,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14-alpine\n\nRUN apk add --no-cache \\\n    chromium \\\n    nss \\\n    freetype \\\n    harfbuzz \\\n    ca-certificates \\\n    ttf-freefont \\\n    nodejs \\\n    yarn \\\n    xvfb\n\n# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \\\n    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser\n\n# Create and change to the app directory.\nWORKDIR /usr/src/app\n\n# Copy application dependency manifests to the container image.\n# A wildcard is used to ensure both package.json AND package-lock.json are copied.\n# Copying this separately prevents re-running npm install on every code change.\nCOPY package.json yarn.lock ./\n\n# Install production dependencies.\nRUN yarn install --frozen-lockfile --production && yarn cache clean;\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Creating display\nENV DISPLAY :99\n\n# Run the web service on container startup.\nCMD Xvfb :99 -screen 0 1920x1080x16 & npm start\n"
}