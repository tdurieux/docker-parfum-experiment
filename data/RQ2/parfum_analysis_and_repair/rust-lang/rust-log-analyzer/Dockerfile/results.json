{
  "startTime": 1674250013470,
  "endTime": 1674250014267,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile is composed of two steps: the first one builds the release\n# binary, and then the binary is copied inside another, empty image.\n\n#################\n#  Build image  #\n#################\n\nFROM ubuntu:bionic AS build\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    ca-certificates \\\n    curl \\\n    build-essential \\\n    pkg-config \\\n    libssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install the currently pinned toolchain with rustup\nRUN curl -f https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init >/tmp/rustup-init && \\\n    chmod +x /tmp/rustup-init && \\\n    /tmp/rustup-init -y --no-modify-path --default-toolchain stable\nENV PATH=/root/.cargo/bin:$PATH\n\n# Build the dependencies in a separate step to avoid rebuilding all of them\n# every time the source code changes. This takes advantage of Docker's layer\n# caching, and it works by copying the Cargo.{toml,lock} with dummy source code\n# and doing a full build with it.\nWORKDIR /tmp/source\nCOPY Cargo.lock Cargo.toml /tmp/source/\nRUN mkdir -p /tmp/source/src && \\\n    echo \"fn main() {}\" > /tmp/source/src/main.rs\nRUN cargo fetch\nRUN cargo build --release\n\n# Dependencies are now cached, copy the actual source code and do another full\n# build. The touch on all the .rs files is needed, otherwise cargo assumes the\n# source code didn't change thanks to mtime weirdness.\nRUN rm -rf /tmp/source/src\nCOPY src /tmp/source/src\nRUN find -name \"*.rs\" -exec touch {} \\; && cargo build --release\n\n##################\n#  Output image  #\n##################\n\nFROM ubuntu:bionic AS binary\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=build /tmp/source/target/release/rla-offline /usr/local/bin/\nCOPY --from=build /tmp/source/target/release/rla-server /usr/local/bin/\n\nCMD rla-server --bind 0.0.0.0 --port 80 --index-file $INDEX_FILE --webhook-verify --ci $CI_PROVIDER --repo $CI_REPO $EXTRA_ARGS\n"
}