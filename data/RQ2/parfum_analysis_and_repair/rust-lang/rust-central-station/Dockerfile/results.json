{
  "startTime": 1674216924673,
  "endTime": 1674216925707,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nRUN apt-get update -y && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n      g++ \\\n      curl \\\n      ca-certificates \\\n      libc6-dev \\\n      make \\\n      libssl-dev \\\n      pkg-config \\\n      python \\\n      python3-venv \\\n      python3-pip \\\n      python3-setuptools \\\n      git \\\n      nginx \\\n      letsencrypt \\\n      cron \\\n      ssh \\\n      gnupg \\\n      cmake \\\n      logrotate \\\n      file \\\n      ssmtp \\\n      locales \\\n      zlib1g-dev \\\n      ninja-build && rm -rf /var/lib/apt/lists/*;\n\n# Set the system locales\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# Install Rust and Cargo\nRUN curl -f https://sh.rustup.rs | sh -s -- -y\nENV PATH=$PATH:/root/.cargo/bin\n\n# Install homu, our integration daemon\nRUN git clone https://github.com/rust-lang/homu /homu && \\\n    cd /homu && git reset --hard 0527db142c19b12df08d9a3d3e3bd566e36c0c22\nRUN pip3 install --no-cache-dir -e /homu\n\n# Install local programs used:\n#\n# * tq - a command line 'toml query' program, used to extract data from\n#        secrets.toml\n# * rbars - a command line program to run a handlebars file through a toml\n#           configuration, in our case used to expand templates using the values\n#           in secrets.toml\n# * promote-release - cron job to download artifacts from travis/appveyor\n#                     archives and publish them (also generate manifests)\n# * cancelbot - bot that cancels AppVeyor/Travis builds if we don't need them.\n#               This is how we keep a manageable queue on the two services\nCOPY tq /tmp/tq\nRUN cargo install --path /tmp/tq && rm -rf /tmp/tq\nCOPY rbars /tmp/rbars\nRUN cargo install --path /tmp/rbars && rm -rf /tmp/rbars\nCOPY promote-release /tmp/promote-release\nRUN cargo install --path /tmp/promote-release && rm -rf /tmp/promote-release\nCOPY cancelbot /tmp/cancelbot\nRUN cargo install --path /tmp/cancelbot && rm -rf /tmp/cancelbot\n\n# Install commands used by promote-release binary. The awscli package is used to\n# issue cloudfront invalidations.\nRUN pip3 install --no-cache-dir awscli\nRUN aws configure set preview.cloudfront true\n\n# Install our crontab which runs our various services on timers\nADD crontab /etc/cron.d/rcs\nRUN chmod 0644 /etc/cron.d/rcs\n\n# Initialize our known set of ssh hosts so git doesn't prompt us later.\nRUN mkdir /root/.ssh && ssh-keyscan github.com >> /root/.ssh/known_hosts\n\n# Copy the source directory into the image so we can run scripts and template\n# configs from there\nCOPY . /src/\n\nCMD [\"/src/bin/run.sh\"]\n"
}