{
  "startTime": 1674251851729,
  "endTime": 1674251852849,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 7,
        "columnEnd": 107
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG WBIA_UBUNTU_IMAGE=nvidia/cuda:11.3.1-cudnn8-runtime-ubuntu20.04\n\nFROM ${WBIA_UBUNTU_IMAGE} as org.wildme.wbia.base\n\nMAINTAINER Wild Me <dev@wildme.org>\n\nENV LC_ALL C.UTF-8\n\nENV LANG C.UTF-8\n\n# Set up xvfb for running gui doctests\nENV DISPLAY :1\n\nUSER root\n\n# Fix for Arm64 builds on GitHub actions\nRUN set -ex \\\n && ln -s /usr/bin/dpkg-split /usr/sbin/dpkg-split \\\n && ln -s /usr/bin/dpkg-deb /usr/sbin/dpkg-deb \\\n && ln -s /bin/rm /usr/sbin/rm \\\n && ln -s /bin/tar /usr/sbin/tar\n\n# Install package updates and dependencies\nRUN set -ex \\\n && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        software-properties-common \\\n        apt-utils \\\n && add-apt-repository ppa:deadsnakes/ppa \\\n && apt-get upgrade -y \\\n # && apt-get dist-upgrade -y \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        # Install build requirements\n        ca-certificates \\\n        build-essential \\\n        lsb-release \\\n        pkg-config \\\n        # Install Python 3.7\n        python3.7 \\\n        python3.7-dev \\\n        python3.7-gdbm \\\n        python3.7-distutils \\\n        python3-pip \\\n        python3-setuptools \\\n        python3-venv \\\n        # Install OpenCV\n        libopencv-dev \\\n        # Install dependencies for PyFLANN\n        libboost-all-dev \\\n        libopenmpi-dev \\\n        libomp5 \\\n        libomp-dev \\\n        libhdf5-openmpi-dev \\\n        liblz4-dev \\\n        # Install dependencies for PyHesaff\n        libgdal-dev \\\n        # Install dependencies for PyDarknet\n        libtbb-dev \\\n        # Install dependencies for vtool\n        libeigen3-dev \\\n        # Install dependencies for Python packages\n        libgeos-dev \\\n        libgdal-dev \\\n        libproj-dev \\\n        graphviz \\\n        graphviz-dev \\\n        python3-pyqt5 \\\n        # Install dependencies for pgloader\n        libssl-dev \\\n        # Install dependencies for NVTOP\n        libncurses5-dev \\\n        libncursesw5-dev \\\n        # Install handy developer tools\n        coreutils \\\n        curl \\\n        git \\\n        gnupg \\\n        gosu \\\n        htop \\\n        locate \\\n        netcat \\\n        pgloader \\\n        postgresql \\\n        rsync \\\n        tmux \\\n        unzip \\\n        vim \\\n        wget \\\n        xvfb \\\n && apt-get upgrade \\\n && apt-get clean \\\n && apt-get autoclean \\\n && apt-get autoremove -y \\\n && rm -rf /var/cache/apt \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN set -ex \\\n update-alternatives --set hdf5.pc /usr/lib/*-linux-gnu/pkgconfig/hdf5-openmpi.pc\n\nRUN unlink /etc/localtime\n\nRUN ln -s /usr/share/zoneinfo/America/Los_Angeles /etc/localtime\n\n# Install Docker CE\nRUN set -ex \\\n && curl -fsSL https://get.docker.com -o get-docker.sh \\\n && sh get-docker.sh\n\n# Create wbia source location\nRUN mkdir -p /wbia\n\n# Create virtualenv location\nRUN mkdir -p /virtualenv\n\n# Install Python Virtual Environments\nRUN set -ex \\\n && /usr/bin/pip3 install virtualenv\n\n# Create virtualenvs for Python3\nRUN set -ex \\\n && virtualenv --system-site-packages -p $(which python3.7) /virtualenv/env3\n\n# Install PyPI packages\nRUN set -ex \\\n && /virtualenv/env3/bin/pip install --upgrade \\\n        pip \\\n && /virtualenv/env3/bin/pip install --upgrade \\\n        # Install build requirements\n        cmake \\\n        ninja \\\n        scikit-build \\\n        setuptools \\\n        setuptools_scm[toml] \\\n        cython \\\n        # Install handy developer tools\n        ipython\n\nRUN apt-get remove -y \\\n        python3-setuptools\n\n# Install NVTOP\nRUN set -ex \\\n && . /virtualenv/env3/bin/activate \\\n && git clone https://github.com/Syllo/nvtop.git /tmp/nvtop \\\n && cd /tmp/nvtop/ \\\n && mkdir -p /tmp/nvtop/build \\\n && cd /tmp/nvtop/build \\\n && cmake .. \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf /tmp/nvtop\n\n # Install wait-for\nRUN set -ex \\\n    && curl -f -s https://raw.githubusercontent.com/eficode/wait-for/v2.0.0/wait-for > /usr/local/bin/wait-for \\\n    && chmod a+x /usr/local/bin/wait-for \\\n    # test it works\n    && wait-for google.com:80 -- echo \"success\"\n\n# Set CUDA-specific environment paths\nENV PATH \"/usr/local/cuda/bin:${PATH}\"\n\nENV LD_LIBRARY_PATH \"/usr/local/cuda/lib64:/virtualenv/env3/lib:${LD_LIBRARY_PATH}\"\n\nENV CUDA_HOME \"/usr/local/cuda\"\n\nENV CUDA_TOOLKIT_ROOT_DIR \"/usr/local/cuda\"\n\nCMD [\"/bin/bash\", \"-c\", \"Xvfb :1 -screen 0 1024x768x16 &>/tmp/xvfb.log & /bin/bash\"]\n"
}