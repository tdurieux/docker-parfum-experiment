{
  "startTime": 1674249592735,
  "endTime": 1674249593363,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 8,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Alpine Dockerfile for building locally / pushing to Dockerhub\nFROM    alpine:3.14\n\n# install dependencies\nRUN buildDeps=\"bash-completion \\\n                  cmake \\\n                  coreutils \\\n                  gcc \\\n                  g++ \\\n                  gdb \\\n                  git \\\n                  make \\\n                  curl-dev\" && \\\n        apk add --no-cache --update ${buildDeps}\n\n# Pull fmp4ingest-tools repo\nRUN     cd /root && \\\n        git clone --recurse-submodules https://github.com/unifiedstreaming/fmp4-ingest.git  && \\\n        cd fmp4-ingest/ingest-tools && \\\n        cmake CMakeLists.txt && \\\n        make\n\nENV PATH=\"${PATH}:/root/fmp4-ingest/ingest-tools\"\n\n# Invocation examples\n# fmp4ingest: CMAF ingest\n# docker run --rm -it -v $(pwd):/data -w /data/ fmp4ingest:latest fmp4ingest $@\n#\n# fmp4Init: retrieve the init fragment or CMAF Header from a fmp4 file\n# docker run --rm -it -v $(pwd):/data -w /data/ fmp4ingest:latest fmp4Init $@\n#\n# fmp4sparse: retrieve a sparse metadata track from a CMAF file with inband emsg\n# docker run --rm -it -v $(pwd):/data -w /data/ fmp4ingest:latest fmp4sparse $@\n#\n# fmp4dump: print the contents of an fmp4 file to the cout, including scte markers\n# docker run --rm -it -v $(pwd):/data -w /data/ fmp4ingest:latest fmp4dump $@\n#\n# fmp4DashEvent: convert a sparse track to an XML event stream\n# docker run --rm -it -v $(pwd):/data -w /data/ fmp4ingest:latest fmp4DashEvent $@\n#\n# dashEventfmp4: convert a DASH mpd or SMIL with events in it to a sparse metadata track\n# docker run --rm -it -v $(pwd):/data -w /data/ fmp4ingest:latest dashEventfmp4 $@\n"
}