{
  "startTime": 1674248924466,
  "endTime": 1674248926143,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG JDK_VERSION=17.0.1\nARG JDK_IMAGE=openjdk:${JDK_VERSION}-slim\nFROM ${JDK_IMAGE} AS worker\n\nARG DOCKER_BUILD_ARCH=amd64\n\n# Install Docker to launch worker images. Eventually should be replaced with Docker-java.\n# See https://gitter.im/docker-java/docker-java?at=5f3eb87ba8c1780176603f4e for more information on why we are not currently using Docker-java\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n                          apt-transport-https \\\n                          ca-certificates \\\n                          curl \\\n                          gnupg-agent \\\n                          software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\n# arch var used to detect architecture of container. Architecture should be spcified to get proper binaries from repo.\nRUN arch=$(dpkg --print-architecture) && \\\n       add-apt-repository \\\n       \"deb [arch=${arch}] https://download.docker.com/linux/debian \\\n       $(lsb_release -cs) stable\"\nRUN apt-get update && apt-get install --no-install-recommends -y docker-ce-cli jq && rm -rf /var/lib/apt/lists/*;\n\n# Install kubectl for copying files to kube pods. Eventually should be replaced with a kube java client.\n# See https://github.com/airbytehq/airbyte/issues/8643 for more information on why we are using kubectl for copying.\n# The following commands were taken from https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management\nRUN curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\nRUN echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | tee /etc/apt/sources.list.d/kubernetes.list\nRUN apt-get update && apt-get install --no-install-recommends -y kubectl && rm -rf /var/lib/apt/lists/*;\n\nARG VERSION=0.39.35-alpha\n\nENV APPLICATION airbyte-workers\nENV VERSION ${VERSION}\n\nWORKDIR /app\n\n# Move worker app\nADD bin/${APPLICATION}-${VERSION}.tar /app\n\n# wait for upstream dependencies to become available before starting server\nENTRYPOINT [\"/bin/bash\", \"-c\", \"${APPLICATION}-${VERSION}/bin/${APPLICATION}\"]\n"
}