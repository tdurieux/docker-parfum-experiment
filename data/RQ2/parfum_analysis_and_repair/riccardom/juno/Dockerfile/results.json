{
  "startTime": 1674252355952,
  "endTime": 1674252356741,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build the juno image, just run:\n# > docker build -t juno .\n#\n# In order to work properly, this Docker container needs to have a volume that:\n# - as source points to a directory which contains a config.yaml and firebase-config.yaml files\n# - as destination it points to the /home folder\n#\n# Simple usage with a mounted data directory (considering ~/.juno/config as the configuration folder):\n# > docker run -it -v ~/.juno/config:/home juno juno parse config.yaml firebase-config.json\n#\n# If you want to run this container as a daemon, you can do so by executing\n# > docker run -td -v ~/.juno/config:/home --name juno juno\n#\n# Once you have done so, you can enter the container shell by executing\n# > docker exec -it juno bash\n#\n# To exit the bash, just execute\n# > exit\nFROM golang:alpine AS build-env\n\n# Set up dependencies\nENV PACKAGES curl make git libc-dev bash gcc linux-headers eudev-dev py-pip\n\n# Set working directory for the build\nWORKDIR /go/src/github.com/forbole/juno\n\n# Add source files\nCOPY . .\n\n# Install minimum necessary dependencies, build Cosmos SDK, remove packages\nRUN apk update\nRUN apk add --no-cache $PACKAGES && \\\n    make install\n\n# Final image\nFROM alpine:edge\n\n# Install ca-certificates\nRUN apk add --no-cache --update ca-certificates\nWORKDIR /home\n\n# Install bash\nRUN apk add --no-cache bash\n\n# Copy over binaries from the build-env\nCOPY --from=build-env /go/bin/juno /usr/bin/juno\n"
}