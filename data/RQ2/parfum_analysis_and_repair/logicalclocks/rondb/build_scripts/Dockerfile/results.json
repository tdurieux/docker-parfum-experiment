{
  "startTime": 1674255545701,
  "endTime": 1674255547107,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 0,
        "columnEnd": 72
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 0,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 0,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 0,
        "columnEnd": 53
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 0,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 0,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 0,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 0,
        "columnEnd": 53
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 0,
        "columnEnd": 28
      }
    }
  ],
  "repairedDockerfile": "#\n# This Dockerfile is used to build RonDB 21.04.8.\n# We are building the release version using GCC 9.3.1 currently.\n#\n# Create a directory where you want to create the docker image from.\n# Next copy 5 tarballs there\n# 1) rondb-gpl-21.04.8.tar.gz\n# 2) build_scripts.tar.gz\n# 3) sysbench-0.4.12.17.tar.gz\n# 4) dbt2-0.37.50.18.tar.gz\n# 5) dbt3-1.10.tar.gz\n#\n# Next build the Docker image using the command:\n# docker build -t rondb_ol7_build .\n#\n# Now your Docker image is ready to use, start the\n# Docker instance and execute bash into it using the\n# command:\n# docker run -v $HOME/data:/data -v $HOME/build:/build --name build --rm -i -t rondb_ol7_build bash\n#\n# This starts a bash terminal in the Docker container created.\n# When entering the Docker image the first step is to copy the tarballs to the\n# build directory using the command:\n# mv *.tar.gz build/.\n#\n# Now if you want to build a release version you execute the following command\n# first:\n# export BUILD_RELEASE=\"yes\"\n#\n# Next you build the RonDB binary tarball using the command:\n# build_scripts/build_all.sh\n#\n# After some time this build has completed.\n# Now copy the RonDB binary tarball to the /data directory\n# cp /rondb-21.04.8-linux-glibc2.17-x86_64.tar.gz /data/.\n# Exit the Docker container\n# exit\n#\n# cd $HOME/data\n# The binary tarball are owned by root. Change this to your user\n# chown $USER rondb-21.04.8-linux-glibc2.17-x86_64.tar.gz\n# chgrp $USER rondb-21.04.8-linux-glibc2.17-x86_64.tar.gz\n#\n# Now your RonDB binary tarball is created and ready to use\n#\n\nFROM oraclelinux:7-slim\n\nARG cmake_version=3.23.2\nARG boost_version=1.73.0\nARG rondb_version=21.04.8\nARG lib_ssl_version=1.1.1o\nARG userid=1000\nARG groupid=1000\n\nCOPY epel.txt /epel.txt\n\nRUN cd / ; \\\nmkdir /etc/yum/repos.d; \\\ncp epel.txt /etc/yum/repos.d/epel-yum-ol7.repo; \\\nyum repolist; \\\nyum -y update;\n\nRUN yum -y install wget make git which perl-core openldap-devel && rm -rf /var/cache/yum\n\nRUN yum -y install bison krb5-server krb5-workstation krb5-devel && rm -rf /var/cache/yum\n\nRUN yum -y install numactl numactl-libs numactl-devel; rm -rf /var/cache/yum \\\nyum -y install patchelf ncurses-devel java-1.8.0-openjdk-devel automake; \\\nyum -y install zlib-devel; \\\nyum -y install scl-utils; \\\nyum -y install oracle-softwarecollection-release-el7; \\\nyum-config-manager -y --enable \"ol7_optional_latest\"; \\\nyum -y install devtoolset-9;\n\nRUN source scl_source enable devtoolset-9; \\\nwget --progress=bar:force https://www.openssl.org/source/openssl-${lib_ssl_version}.tar.gz; \\\ntar xf openssl-${lib_ssl_version}.tar.gz; \\\ncd openssl-${lib_ssl_version}; \\\n./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib; \\\nmake -j$(nproc); \\\nmake install; \\\necho \"/usr/local/ssl/lib\" >> /etc/ld.so.conf.d/openssl-${lib_ssl_version}.conf; \\\nldconfig -v; \\\ncd ..; \\\nrm -rf openssl-${lib_ssl_version}; \\\necho Installing cmake; \\\nsource scl_source enable devtoolset-9; \\\nwget --progress=bar:force https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}.tar.gz; \\\ntar xzf cmake-${cmake_version}.tar.gz; \\\ncd cmake-${cmake_version}; \\\nexport OPENSSL_ROOT_DIR=/usr/local/ssl/; \\\n./bootstrap --prefix=/usr/local; \\\nmake -j$(nproc); \\\nmake install; \\\ncd ..; \\\nrm -r cmake-${cmake_version}*; \\\ngroupadd mikael --gid ${groupid}; \\\nuseradd -ms /bin/bash mikael --uid ${userid} --gid ${groupid}; \\\necho Installing Boost; \\\nBOOST_V=`echo ${boost_version} | sed s/'\\.'/'_'/g`; \\\nsource scl_source enable devtoolset-9; \\\nwget --progress=bar:force https://boostorg.jfrog.io/artifactory/main/release/${boost_version}/source/boost_${BOOST_V}.tar.gz ; \\\ntar xzf boost_${BOOST_V}.tar.gz; \\\nrm boost_${BOOST_V}.tar.gz;\n\nRUN echo \"source scl_source enable devtoolset-9\" >> /root/.bashrc; \\\nBOOST_V=`echo ${boost_version} | sed s/'\\.'/'_'/g`; \\\necho \"export BOOST_ROOT=/boost_${BOOST_V}\" >> /root/.bashrc; \\\necho \"export BOOST_VERSION=73\" >> /root/.bashrc; \\\necho \"export RONDB_VERSION=${rondb_version}\" >> /root/.bashrc; \\\necho \"export OPENSSL_ROOT=/usr/local/ssl\" >> /root/.bashrc\n\nCOPY build_scripts.tar.gz /build_scripts.tar.gz\n\nVOLUME [\"/data\"]\nVOLUME [\"/build\"]\n\nCOPY rondb-gpl-${rondb_version}.tar.gz /rondb-gpl-${rondb_version}.tar.gz\n\nCOPY sysbench-0.4.12.17.tar.gz /sysbench-0.4.12.17.tar.gz\n\nCOPY dbt2-0.37.50.18.tar.gz /dbt2-0.37.50.18.tar.gz\n\nCOPY dbt3-1.10.tar.gz /dbt3-1.10.tar.gz\n\nRUN cd / ; \\\ntar xfz build_scripts.tar.gz; \\\nrm build_scripts.tar.gz\n\nUSER root\n\nCMD [\"/usr/bin/scl\", \"enable\", \"devtoolset-9\", \"bash\"]\n"
}