{
  "startTime": 1674253607082,
  "endTime": 1674253608042,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 96
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# [Choice] Debian version: buster, stretch\nARG VARIANT=\"bullseye\"\nFROM buildpack-deps:${VARIANT}-curl\n\n# [Option] Install zsh\nARG INSTALL_ZSH=\"true\"\n# [Option] Upgrade OS packages to their latest versions\nARG UPGRADE_PACKAGES=\"true\"\n# [Option] Enable non-root Docker access in container\nARG ENABLE_NONROOT_DOCKER=\"true\"\n# Install needed packages and setup non-root user. Use a separate RUN statement to add your own dependencies.\nARG SOURCE_SOCKET=/var/run/docker-host.sock\nARG TARGET_SOCKET=/var/run/docker.sock\nARG USERNAME=vscode\nARG USER_UID=automatic\nARG USER_GID=$USER_UID\nCOPY library-scripts/*.sh library-scripts/*.env /tmp/library-scripts/\nRUN apt-get update && \\\n    /bin/bash /tmp/library-scripts/common-debian.sh \"${INSTALL_ZSH}\" \"${USERNAME}\" \"${USER_UID}\" \"${USER_GID}\" \"${UPGRADE_PACKAGES}\" \"true\" \"true\" && \\\n    # Use Docker script from script library to set things up\n    /bin/bash /tmp/library-scripts/docker-debian.sh \"${ENABLE_NONROOT_DOCKER}\" \"${SOURCE_SOCKET}\" \"${TARGET_SOCKET}\" \"${USERNAME}\" \"false\" && \\\n    # Clean up\n    apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/library-scripts/\n\nRUN \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get -y --no-install-recommends install \\\n        file ninja-build psmisc \\\n        default-jre-headless rsync wget \\\n        g++ gdb \\\n        libboost-graph-dev libboost-system-dev libpq-dev lua5.2-dev librange-v3-dev && \\\n    apt-get autoremove -y && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    mkdir -p /tmp/cmake && cd /tmp/cmake && \\\n    wget https://github.com/Kitware/CMake/releases/download/v3.21.1/cmake-3.21.1-linux-x86_64.sh -O /tmp/cmake/cmake.sh -q && \\\n    sh cmake.sh --skip-license --prefix=/usr/local && cd && rm -rf /tmp/cmake\n\nRUN \\\n\n    mkdir -p /opt/easyCompiler && \\\n    wget https://illarion.org/media/localserver/compiler.jar -O /opt/easyCompiler/compiler.jar -q && \\\n    # Setup directories for the server.\n    mkdir -p /usr/share/illarion/map && \\\n    mkdir -p /usr/share/illarion/scripts && \\\n    chown -R ${USERNAME}:root /usr/share/illarion/map && \\\n    chown -R ${USERNAME}:root /usr/share/illarion/scripts && \\\n    mkdir /scripts && \\\n    mkdir /maps && \\\n    ln -s /maps /usr/share/illarion/map/import && \\\n    # Setup build directory\n    mkdir -p /tmp/illarion/build && \\\n    chown -R ${USERNAME}:root /tmp/illarion/build && \\\n    # Setup VSCode directory\n    mkdir -p /tmp/vscode && \\\n    chown -R ${USERNAME}:root /tmp/vscode\n\nCOPY library-scripts/pre-reload /usr/share/illarion/\nCOPY library-scripts/linter-*.sh /opt/linter/\n\nRUN \\\n    chown ${USERNAME}:root /usr/share/illarion/pre-reload && \\\n    chmod u+x /usr/share/illarion/pre-reload && \\\n    find /opt/linter -name linter-*.sh | xargs chown ${USERNAME}:root && \\\n    find /opt/linter -name linter-*.sh | xargs chmod u+x\n\nUSER ${USERNAME}\nRUN \\\n    # Configure git\n    git config --global http.sslBackend gnutls\n\nEXPOSE 3012\nVOLUME /scripts\nVOLUME /maps\n"
}