{
  "startTime": 1674251945390,
  "endTime": 1674251946455,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 8,
        "columnStart": 25,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.3.1-cudnn8-devel-ubuntu18.04\n\nARG cmake_v=3.21.3\nARG eigen_v=3.3.7\nARG proto_v=3.11.4\n\nRUN apt-get -y update && apt-get -y install --no-install-recommends \\\n      wget \\\n      zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -q https://github.com/Kitware/CMake/releases/download/v${cmake_v}/cmake-${cmake_v}-linux-x86_64.sh && \\\n    chmod u+x cmake-${cmake_v}-linux-x86_64.sh && \\\n    ./cmake-${cmake_v}-linux-x86_64.sh --skip-license --prefix=/usr/local && \\\n    rm -f cmake-${cmake_v}-linux-x86_64.sh\n\n# Eigen version installed by APT is too old to work properly with CUDA\n# https://devtalk.nvidia.com/default/topic/1026622/nvcc-can-t-compile-code-that-uses-eigen/\nRUN wget -q https://gitlab.com/libeigen/eigen/-/archive/${eigen_v}/eigen-${eigen_v}.tar.gz && \\\n    tar xf eigen-${eigen_v}.tar.gz && \\\n    cd eigen-${eigen_v} && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. && \\\n    make install && rm eigen-${eigen_v}.tar.gz\nENV CPATH=\"/usr/local/include/eigen3:${CPATH}\"\n\nRUN wget -q https://github.com/protocolbuffers/protobuf/releases/download/v${proto_v}/protobuf-all-${proto_v}.tar.gz && \\\n    tar xf protobuf-all-${proto_v}.tar.gz && \\\n    cd protobuf-${proto_v}/ && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(nproc) && \\\n    make install && \\\n    ldconfig && rm protobuf-all-${proto_v}.tar.gz\n"
}