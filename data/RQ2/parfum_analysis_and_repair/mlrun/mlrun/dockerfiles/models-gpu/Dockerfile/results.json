{
  "startTime": 1674249241764,
  "endTime": 1674249242718,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Iguazio\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nARG CUDA_VER=11.2\n\nFROM nvidia/cuda:${CUDA_VER}-cudnn8-devel-ubuntu18.04\n\n# need to be redeclared since used in the from\nARG CUDA_VER\n\nENV PIP_NO_CACHE_DIR=1\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nENV PATH /opt/conda/bin:$PATH\n\n# Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n\nRUN apt-key del 7fa2af80 && \\\n    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub && \\\n    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub\n\nRUN apt-get update && \\\n    apt-mark hold libcublas-dev libcublas10 && \\\n    apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        curl \\\n        git-core \\\n        graphviz \\\n        wget && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/installconda.sh && \\\n    /bin/bash ~/installconda.sh -b -p /opt/conda && \\\n    rm ~/installconda.sh && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc\n\nARG MLRUN_PIP_VERSION=22.0.0\nRUN conda config --add channels conda-forge && \\\n    conda update -n base -c defaults conda && \\\n    conda install -n base \\\n        python=3.7 \\\n        pip~=${MLRUN_PIP_VERSION} \\\n    && conda clean -aqy\n\nRUN conda install -n base cmake cython \\\n    && conda clean -aqy\n\nRUN conda install -n base -c rapidsai -c nvidia -c conda-forge rapids=21.06 python=3.7 cudatoolkit=${CUDA_VER} \\\n    && conda clean -aqy\n\nRUN conda install -n base pytorch::pytorch==1.7.0 pytorch::torchvision==0.8.0 \\\n    && conda clean -aqy\n\nARG TENSORFLOW_VERSION=2.4.1\nRUN python -m pip install tensorflow~=${TENSORFLOW_VERSION}\n\nARG OMPI=4.1.0\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    curl -f -o openmpi-${OMPI}.tar.gz https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OMPI}.tar.gz && \\\n    tar zxf openmpi-${OMPI}.tar.gz && \\\n    cd openmpi-${OMPI} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j`nproc` all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-${OMPI}.tar.gz\n\nENV OMPI_ALLOW_RUN_AS_ROOT=1\nENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1\n\nARG HOROVOD_VERSION=0.22.1\n# TODO: MAKEFLAGS=\"-j1\" work around some transient concurrency problem with installing horovod remove it when\n    #   possible (should be safe to remove if it works ~5 times without it)\nRUN ldconfig /usr/local/cuda-11.0/targets/x86_64-linux/lib/stubs && \\\n    MAKEFLAGS=\"-j1\" HOROVOD_GPU_OPERATIONS=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 \\\n        python -m pip install horovod~=${HOROVOD_VERSION} && \\\n    ldconfig\n\nWORKDIR /mlrun\n\nCOPY ./requirements.txt ./\nCOPY ./extras-requirements.txt ./extras-requirements.txt\nCOPY ./dockerfiles/mlrun/requirements.txt ./mlrun-image-requirements.txt\n\nRUN python -m pip install \\\n    -r requirements.txt \\\n    -r extras-requirements.txt \\\n    -r mlrun-image-requirements.txt\n\n# if we give all the requirements together pip resolver go nuts so separating between the package and the image\n# requirements\nCOPY ./dockerfiles/base/requirements.txt ./base-image-requirements.txt\nRUN python -m pip install \\\n    -r base-image-requirements.txt\n\nCOPY ./dockerfiles/models/requirements.txt ./models-image-requirements.txt\nRUN python -m pip install \\\n    -r models-image-requirements.txt\n\nCOPY ./dockerfiles/models-gpu/requirements.txt ./models-gpu-image-requirements.txt\nRUN python -m pip install \\\n    -r models-gpu-image-requirements.txt\n\nCOPY . .\nRUN python -m pip install .[complete]\n"
}