{
  "startTime": 1674215908687,
  "endTime": 1674215909812,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 12,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 32,
        "columnEnd": 48
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2020 Marius Wilms, Christoph Labacher. All rights reserved.\n# Copyright 2019 Atelier Disko. All rights reserved.\n#\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Build stage to retrieve and build the frontend. Will pull in the frontend from\n# the project root `frontend` folder. This stage hardcodes the build process for\n# the built-in frontend. If you have a custom frontend with a different build\n# process (although this one may work for you, as it's pretty standard), you'll\n# need to create a new Dockerfile basing it off this one.\nFROM alpine:latest as frontend\n\nCOPY frontend /src\n\nRUN apk add --no-cache nodejs\nRUN apk add --no-cache yarn\n\nWORKDIR /src\n\nRUN yarn && yarn cache clean;\nRUN yarn react-scripts build && yarn cache clean;\n\n# Build stage to compile the DSK binary, \"baking in\" the frontend from the\n# previous stage. The frontend will replace the default frontend.\nFROM golang:1.14 as backend\n\nARG VERSION=head\nENV GO111MODULE=on\n\nCOPY . /src\nCOPY --from=frontend /src/build /frontend\n\nWORKDIR /src\n\n# We cannot compile our go program with C support, otherwise results in a \"not\n# found\" error, when running the binary. This also disables DDT change watching\n# and possibly other (future) features. However it is not expected that the former\n# feature is of any use in secenarios we imagine the docker\n# container is being run. Alternatively the tutorial at\n# http://kefblog.com/2017-07-04/Golang-ang-docker can be used to enable CGO\n# support.\nENV CGO_ENABLED=0\n\n# Force make to re-generate the to-be-embedded assets file. After a fresh\n# checkout of the source code all files have the same timestamp and the target\n# will not be made, as it appears to be up to date. But in fact it contains\n# entirely new files, especially when a custom frontend is used.\nRUN touch /frontend/index.html\n\n# Build through Makefile, as it i.e. ensures the frontend embed happens\n# correctly and uses the right defaults for Go modules.\nRUN FRONTEND=/frontend VERSION=$VERSION make dist/dsk-linux-amd64\n\n# Final stage that executes the binary.\nFROM alpine:latest as run\n\nCOPY --from=backend /src/dist/dsk-linux-amd64 /dsk\n\nEXPOSE 8080\n\nCMD /dsk -host 0.0.0.0 -port 8080 /ddt\n\n"
}