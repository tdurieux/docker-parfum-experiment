{
  "startTime": 1674255284076,
  "endTime": 1674255285062,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# s6 overlay builder\nFROM alpine:3.16.0 AS s6-builder\n\nENV PACKAGE=\"just-containers/s6-overlay\"\nENV PACKAGEVERSION=\"3.1.1.2\"\nARG TARGETPLATFORM\n\nRUN echo \"**** install security fixes ****\" && \\\n    apk --no-cache --no-progress add openssl=1.1.1q-r0 && \\\n    echo \"**** install mandatory packages ****\" && \\\n    apk --no-cache --no-progress add tar=1.34-r0 \\\n        xz=5.2.5-r1 && \\\n    echo \"**** create folders ****\" && \\\n    mkdir -p /s6 && \\\n    echo \"**** download ${PACKAGE} ****\" && \\\n    PACKAGEPLATFORM=$(case ${TARGETPLATFORM} in \\\n        \"linux/amd64\")    echo \"x86_64\"   ;; \\\n        \"linux/386\")      echo \"i486\"     ;; \\\n        \"linux/arm64\")    echo \"aarch64\"  ;; \\\n        \"linux/arm/v7\")   echo \"armhf\"    ;; \\\n        \"linux/arm/v6\")   echo \"arm\"      ;; \\\n        *)                echo \"\"         ;; esac) && \\\n    echo \"Package ${PACKAGE} platform ${PACKAGEPLATFORM} version ${PACKAGEVERSION}\" && \\\n    wget -q \"https://github.com/${PACKAGE}/releases/download/v${PACKAGEVERSION}/s6-overlay-noarch.tar.xz\" -qO /tmp/s6-overlay-noarch.tar.xz && \\\n    wget -q \"https://github.com/${PACKAGE}/releases/download/v${PACKAGEVERSION}/s6-overlay-${PACKAGEPLATFORM}.tar.xz\" -qO /tmp/s6-overlay-binaries.tar.xz && \\\n    tar -C /s6/ -Jxpf /tmp/s6-overlay-noarch.tar.xz && \\\n    tar -C /s6/ -Jxpf /tmp/s6-overlay-binaries.tar.xz && rm /tmp/s6-overlay-noarch.tar.xz\n\n# Duplicacy builder\nFROM alpine:3.16.0 AS duplicacy-builder\n\nENV PACKAGE=\"gilbertchen/duplicacy\"\nENV PACKAGEVERSION=\"2.7.2\"\nARG TARGETPLATFORM\n\nRUN echo \"**** install security fixes ****\" && \\\n    apk --no-cache --no-progress add openssl=1.1.1q-r0 && \\\n    echo \"**** download ${PACKAGE} ****\" && \\\n    PACKAGEPLATFORM=$(case ${TARGETPLATFORM} in \\\n        \"linux/amd64\")  echo \"x64\"    ;; \\\n        \"linux/386\")    echo \"i386\"   ;; \\\n        \"linux/arm64\")  echo \"arm64\"  ;; \\\n        \"linux/arm/v7\") echo \"arm\"    ;; \\\n        \"linux/arm/v6\") echo \"arm\"    ;; \\\n        *)              echo \"\"       ;; esac) && \\\n    echo \"Package ${PACKAGE} platform ${PACKAGEPLATFORM} version ${PACKAGEVERSION}\" && \\\n    wget -q \"https://github.com/${PACKAGE}/releases/download/v${PACKAGEVERSION}/duplicacy_linux_${PACKAGEPLATFORM}_${PACKAGEVERSION}\" -qO /tmp/duplicacy\n\n# rootfs builder\nFROM alpine:3.16.0 AS rootfs-builder\n\nRUN echo \"**** install security fixes ****\" && \\\n    apk --no-cache --no-progress add openssl=1.1.1q-r0\n\nCOPY root/ /rootfs/\nCOPY --from=duplicacy-builder /tmp/duplicacy /rootfs/usr/bin/duplicacy\nRUN chmod +x /rootfs/usr/bin/*\nCOPY --from=s6-builder /s6/ /rootfs/\n\n# Main image\nFROM alpine:3.16.0\n\nLABEL maintainer=\"Alexander Zinchenko <alexander@zinchenko.com>\"\n\nENV BACKUP_CRON=\"\" \\\n    SNAPSHOT_ID=\"\" \\\n    STORAGE_URL=\"\" \\\n    PRIORITY_LEVEL=10 \\\n    EMAIL_LOG_LINES_IN_BODY=10 \\\n    S6_CMD_WAIT_FOR_SERVICES_MAXTIME=120000\n\nRUN echo \"**** install security fixes ****\" && \\\n    apk --no-cache --no-progress add containerd=1.6.6-r0 \\\n        openssl=1.1.1q-r0 && \\\n    echo \"**** install mandatory packages ****\" && \\\n    apk --no-cache --no-progress add bash=5.1.16-r2 \\\n        zip=3.0-r9 \\\n        ssmtp=2.64-r16 \\\n        ca-certificates=20211220-r0 \\\n        docker=20.10.16-r0 && \\\n    echo \"**** create folders ****\" && \\\n    mkdir -p /config && \\\n    mkdir -p /data && \\\n    echo \"**** cleanup ****\" && \\\n    rm -rf /tmp/* && \\\n    rm -rf /var/cache/apk/*\n\nCOPY --from=rootfs-builder /rootfs/ /\n\nVOLUME [\"/config\"]\nVOLUME [\"/data\"]\n\nWORKDIR  /config\n\nENTRYPOINT [\"/init\"]\n"
}