{
  "startTime": 1674252686808,
  "endTime": 1674252688047,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PLATFORM=$BUILDPLATFORM\n\nFROM --platform=$PLATFORM ghcr.io/rbtying/yarn-wasm-rust-build-image:master as wasmbase\n\n# Create a workspace recipe.json to pre-fetch and pre-compile dependencies\nFROM wasmbase as planner\nWORKDIR /app\nCOPY . .\nRUN cargo chef prepare --recipe-path recipe.json\n\n# Pre-compile frontend wasm dependencies\nFROM wasmbase as frontend-cacher\nWORKDIR /app\nCOPY --from=planner /app/recipe.json recipe.json\nRUN cargo chef cook --release --recipe-path recipe.json --target=wasm32-unknown-unknown -p shengji-wasm\n\n# Download Yarn dependencies\nFROM wasmbase as frontend-deps-fetch\nCOPY frontend/package.json ./\nCOPY frontend/yarn.lock ./\nRUN yarn install && yarn cache clean;\n\n# Actually build the frontend\nFROM frontend-deps-fetch as frontend-builder\nWORKDIR /app\nCOPY --from=frontend-cacher /app/target /app/target\n# Run the actual build\nCOPY Cargo.toml .\nCOPY Cargo.lock .\nCOPY core ./core\nCOPY backend/backend-types ./backend/backend-types/\nCOPY frontend ./frontend\nCOPY backend/Cargo.toml ./backend/Cargo.toml\nCOPY backend/src/main.rs ./backend/src/\nCOPY storage ./storage\nWORKDIR /app/frontend\nRUN yarn build\n\n# Create a workspace recipe.json to pre-fetch and pre-compile dependencies, but\n# without shengji-wasm because this is the backend\nFROM wasmbase as planner-no-wasm\nWORKDIR /app\nCOPY . .\nRUN rm -r frontend\nRUN cat Cargo.toml | grep -v frontend > Cargo2.toml && mv Cargo2.toml Cargo.toml\nRUN cargo chef prepare --recipe-path recipe.json\n\n# Compile backend for amd64 and arm64, because TARGETPLATFORM can't be used in\n# the build stages\nFROM --platform=$PLATFORM messense/rust-musl-cross:x86_64-musl as amd64\nARG PLATFORM\nRUN case \"$PLATFORM\" in \\\n  \"linux/arm64\") echo \"aarch64-unknown-linux-gnu\" > /host-target ;; \\\n  \"linux/amd64\") echo \"x86_64-unknown-linux-gnu\" > /host-target ;; \\\n  *) exit 1 ;; \\\nesac\nARG TARGETPLATFORM\nRUN case \"$TARGETPLATFORM\" in \\\n  \"linux/arm64\") exit 0 ;; \\\n  \"linux/amd64\") cargo install cargo-chef --target $(cat /host-target) ;; \\\n  *) exit 1 ;; \\\nesac\nWORKDIR /app\nCOPY --from=planner-no-wasm /app/recipe.json recipe.json\nRUN case \"$TARGETPLATFORM\" in \\\n  \"linux/arm64\") mkdir target ;; \\\n  \"linux/amd64\") cargo chef cook --release --recipe-path recipe.json --target x86_64-unknown-linux-musl ;; \\\n  *) exit 1 ;; \\\nesac\nCOPY Cargo.toml .\nCOPY Cargo.lock .\nCOPY core ./core\nCOPY frontend ./frontend\nCOPY backend/ ./backend\nCOPY storage ./storage\nCOPY favicon ./favicon\nCOPY --from=frontend-builder /app/frontend/dist /app/frontend/dist/\nRUN case \"$TARGETPLATFORM\" in \\\n  \"linux/arm64\") mkdir -p target/x86_64-unknown-linux-musl/release && touch target/x86_64-unknown-linux-musl/release/shengji ;; \\\n  \"linux/amd64\") cargo build --release --bin shengji --target x86_64-unknown-linux-musl ;; \\\n  *) exit 1 ;; \\\nesac\n\nFROM --platform=$PLATFORM messense/rust-musl-cross:aarch64-musl as arm64\nARG PLATFORM\nRUN case \"$PLATFORM\" in \\\n  \"linux/arm64\") echo \"aarch64-unknown-linux-gnu\" > /host-target ;; \\\n  \"linux/amd64\") echo \"x86_64-unknown-linux-gnu\" > /host-target ;; \\\n  *) exit 1 ;; \\\nesac\nARG TARGETPLATFORM\nRUN case \"$TARGETPLATFORM\" in \\\n  \"linux/amd64\") exit 0 ;; \\\n  \"linux/arm64\") cargo install cargo-chef --target $(cat /host-target);; \\\n  *) exit 1 ;; \\\nesac\nWORKDIR /app\nCOPY --from=planner-no-wasm /app/recipe.json recipe.json\nRUN case \"$TARGETPLATFORM\" in \\\n  \"linux/amd64\") mkdir target ;; \\\n  \"linux/arm64\") cargo chef cook --release --recipe-path recipe.json --target aarch64-unknown-linux-musl ;; \\\n  *) exit 1 ;; \\\nesac\nCOPY Cargo.toml .\nCOPY Cargo.lock .\nCOPY core ./core\nCOPY frontend ./frontend\nCOPY backend/ ./backend\nCOPY storage ./storage\nCOPY favicon ./favicon\nCOPY --from=frontend-builder /app/frontend/dist /app/frontend/dist/\nRUN case \"$TARGETPLATFORM\" in \\\n  \"linux/arm64\") cargo build --release --bin shengji --target aarch64-unknown-linux-musl ;; \\\n  \"linux/amd64\") mkdir -p target/aarch64-unknown-linux-musl/release && touch target/aarch64-unknown-linux-musl/release/shengji ;; \\\n  *) exit 1 ;; \\\nesac\n\n# Merge them\nFROM alpine as merged\nARG TARGETPLATFORM\nCOPY --from=amd64 /app/target/x86_64-unknown-linux-musl/release/shengji /shengji.x86_64\nCOPY --from=arm64 /app/target/aarch64-unknown-linux-musl/release/shengji /shengji.aarch64\nRUN case \"$TARGETPLATFORM\" in \\\n  \"linux/arm64\") ln /shengji.aarch64 /shengji ;; \\\n  \"linux/amd64\") ln /shengji.x86_64 /shengji ;; \\\n  *) exit 1 ;; \\\nesac\n\n# Executable\nFROM alpine\nCOPY --from=merged /shengji /shengji\n\nENTRYPOINT [\"/shengji\"]\n"
}