{
  "startTime": 1674252685177,
  "endTime": 1674252686449,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanUseForce",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 21,
        "columnEnd": 89
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 21,
        "columnEnd": 107
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 21,
        "columnEnd": 123
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 33,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 170
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:14.04\n\nRUN apt-get update\n\nENV TESTDIR /loadgentests\n\n# Make dir where we will put all our loadgen tools, data and dependencies\nRUN mkdir ${TESTDIR}\n\n# Java8\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DA1A4A13543B466853BAF164EB9B1D8886F44E2A\nRUN touch /etc/apt/sources.list.d/openjdk.list\nRUN echo \"deb http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main \" >>/etc/apt/sources.list.d/openjdk.list\nRUN echo \"deb-src http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main\" >>/etc/apt/sources.list.d/openjdk.list\nRUN apt-get update\nRUN apt-get -y --no-install-recommends install openjdk-8-jdk && rm -rf /var/lib/apt/lists/*;\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\n\n# C compiler, make, libssl, autoconf, etc\nRUN apt-get -y --no-install-recommends install gcc libssl-dev autoconf erlang-dev erlang-nox nodejs npm unzip wget git python-pip python-dev python-zmq bc bsdmainutils jq && rm -rf /var/lib/apt/lists/*;\n\n# Update nodejs\nRUN npm cache clean --force -f\nRUN npm install -g n && npm cache clean --force;\nRUN n stable\n\n# Symlink to nodejs\nRUN ln -s `which nodejs` /usr/bin/node\n\n# install latest Golang to ${TESTDIR}/go1.7, set GOPATH to ${TESTDIR}/go\nRUN mkdir ${TESTDIR}/go1.7 ${TESTDIR}/go\nRUN wget -O - 'https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz' |tar -C ${TESTDIR}/go1.7 -xzf -\nENV GOROOT ${TESTDIR}/go1.7/go\nENV GOPATH ${TESTDIR}/go\nENV PATH ${GOPATH}/bin:${GOROOT}/bin:/usr/local/bin:${PATH}\n\n# Create .gitconfig\nCOPY Gitconfig ${HOME}/.gitconfig\n\n# Get and compile wrk\nRUN cd ${TESTDIR} && git clone 'https://github.com/wg/wrk'\nRUN cd ${TESTDIR}/wrk && make\n# Checkout specific commit that we know runtest.sh is compatible with\n# RUN cd ${TESTDIR}/wrk && git checkout 50305ed1d89408c26067a970dcd5d9dbea19de9d && make\n\n# Get and compile boom (latest snapshot)\nRUN go get -u github.com/rakyll/boom\n# runtest.sh works with this commit: https://github.com/rakyll/boom/commit/e99ce27f0878c1d266c8a3c266029038e78c5380\n\n# Get and compile vegeta (latest snapshot)\nRUN go get -u github.com/tsenart/vegeta\n# runtest.sh works with this commit: https://github.com/tsenart/vegeta/commit/7cff4dc0ed44f0a8b9777caf050950eb67972f43\n\n# Get and compile k6 (latest snapshop)\nRUN go get -u github.com/loadimpact/k6\n\n# Install Apachebench (>=2.3)\n#RUN apt-get -y install apache2-utils\n# How install specific version of ab?\n\n# Get and compile Siege (latest snapshot)\nRUN apt-get -y --no-install-recommends install siege && rm -rf /var/lib/apt/lists/*;\n#RUN cd ${TESTDIR} && git clone 'https://github.com/JoeDog/siege.git'\n#RUN cd ${TESTDIR}/siege && checkout xxxxxxxxxxx && autoconf && ./configure && make install\n\n# Install Tsung (1.6.0)\nRUN cd ${TESTDIR} && wget -O - 'https://tsung.erlang-projects.org/dist/tsung-1.6.0.tar.gz' | tar -xzf -\nRUN cd ${TESTDIR}/tsung-1.6.0 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make install\n\n# Install Locust (>=0.7.5)\nRUN pip install --no-cache-dir locustio\n# RUN cd ${TESTDIR} && git clone 'https://github.com/locustio/locust'\n# RUN cd ${TESTDIR}/locust && checkout 16140b0680cd7ab5d580aa2a1578a6349f988876 && python setup.py\n\n# Gatling 2.2.2\nRUN cd ${TESTDIR} && wget 'https://repo1.maven.org/maven2/io/gatling/highcharts/gatling-charts-highcharts-bundle/2.2.2/gatling-charts-highcharts-bundle-2.2.2-bundle.zip' && \\\n  unzip gatling-charts-highcharts-bundle-2.2.2-bundle.zip && rm gatling-charts-highcharts-bundle-2.2.2-bundle.zip\n\n# Jmeter 3.2\nRUN cd ${TESTDIR} && wget -O - 'https://apache.mirrors.spacedump.net//jmeter/binaries/apache-jmeter-3.2.tgz' | tar -zxf -\n\n# Grinder 3.11\nRUN cd ${TESTDIR} && wget 'https://downloads.sourceforge.net/project/grinder/The%20Grinder%203/3.11/grinder-3.11-binary.zip' && \\\n  unzip grinder-3.11-binary.zip && rm grinder-3.11-binary.zip\n\n# Artillery (>=1.5.0-12)\nRUN npm install -g artillery && npm cache clean --force;\n# git clone 'https://github.com/shoreditch-ops/artillery' && git checkout ... && ...\n\nCOPY runtests.sh ${TESTDIR}\nRUN chmod 755 ${TESTDIR}/runtests.sh\n\nRUN mkdir ${TESTDIR}/configs\n\nCOPY configs/tsung.xml ${TESTDIR}/configs\nCOPY configs/jmeter.xml ${TESTDIR}/configs\nCOPY configs/artillery.json ${TESTDIR}/configs\nCOPY configs/gatling.scala ${TESTDIR}/configs\nCOPY configs/grinder.py ${TESTDIR}/configs\nCOPY configs/grinder.properties ${TESTDIR}/configs\nCOPY configs/locust.py ${TESTDIR}/configs\nCOPY configs/wrk.lua ${TESTDIR}/configs\nCOPY configs/k6.js ${TESTDIR}/configs\n\nCMD ${TESTDIR}/runtests.sh\n\n"
}