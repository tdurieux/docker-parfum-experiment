{
  "startTime": 1674253225752,
  "endTime": 1674253226705,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 22,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16-alpine3.15 as js-builder\n\nENV NODE_OPTIONS=--max_old_space_size=8000\n\nWORKDIR /usr/src/app/\n\nCOPY package.json yarn.lock ./\nCOPY packages packages\nCOPY .yarnrc.yml ./\nCOPY .yarn .yarn\nCOPY plugins-bundled plugins-bundled\n\nRUN yarn install && yarn cache clean;\n\nCOPY tsconfig.json .eslintrc .editorconfig .browserslistrc .prettierrc.js babel.config.json .linguirc ./\nCOPY public public\nCOPY tools tools\nCOPY scripts scripts\nCOPY emails emails\n\nENV NODE_ENV production\nRUN yarn build\n\nFROM golang:1.17.11 AS go-builder\n\nWORKDIR /src/grafana\n\nCOPY go.mod go.sum embed.go ./\nCOPY Makefile build.go package.json ./\nCOPY .bingo .bingo\nCOPY pkg pkg/\nCOPY cue cue/\nCOPY cue.mod cue.mod/\nCOPY packages/grafana-schema packages/grafana-schema/\nCOPY public/app/plugins public/app/plugins/\nCOPY public/api-spec.json public/api-spec.json\n\nRUN go mod verify\nRUN make build-go\n\nFROM ubuntu:20.04\n\nLABEL maintainer=\"Grafana team <hello@grafana.com>\"\nEXPOSE 3000\n\nARG GF_UID=\"472\"\nARG GF_GID=\"472\"\n\nENV PATH=\"/usr/share/grafana/bin:$PATH\" \\\n    GF_PATHS_CONFIG=\"/etc/grafana/grafana.ini\" \\\n    GF_PATHS_DATA=\"/var/lib/grafana\" \\\n    GF_PATHS_HOME=\"/usr/share/grafana\" \\\n    GF_PATHS_LOGS=\"/var/log/grafana\" \\\n    GF_PATHS_PLUGINS=\"/var/lib/grafana/plugins\" \\\n    GF_PATHS_PROVISIONING=\"/etc/grafana/provisioning\"\n\nWORKDIR $GF_PATHS_HOME\n\nCOPY conf conf\n\n# curl should be part of the image\nRUN apt-get update && apt-get install --no-install-recommends -y ca-certificates curl && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p \"$GF_PATHS_HOME/.aws\" && \\\n  addgroup --system --gid $GF_GID grafana && \\\n  adduser --uid $GF_UID --system --ingroup grafana grafana && \\\n  mkdir -p \"$GF_PATHS_PROVISIONING/datasources\" \\\n             \"$GF_PATHS_PROVISIONING/dashboards\" \\\n             \"$GF_PATHS_PROVISIONING/notifiers\" \\\n             \"$GF_PATHS_PROVISIONING/plugins\" \\\n             \"$GF_PATHS_PROVISIONING/access-control\" \\\n             \"$GF_PATHS_LOGS\" \\\n             \"$GF_PATHS_PLUGINS\" \\\n             \"$GF_PATHS_DATA\" && \\\n    cp conf/sample.ini \"$GF_PATHS_CONFIG\" && \\\n    cp conf/ldap.toml /etc/grafana/ldap.toml && \\\n    chown -R grafana:grafana \"$GF_PATHS_DATA\" \"$GF_PATHS_HOME/.aws\" \"$GF_PATHS_LOGS\" \"$GF_PATHS_PLUGINS\" \"$GF_PATHS_PROVISIONING\" && \\\n    chmod -R 777 \"$GF_PATHS_DATA\" \"$GF_PATHS_HOME/.aws\" \"$GF_PATHS_LOGS\" \"$GF_PATHS_PLUGINS\" \"$GF_PATHS_PROVISIONING\"\n\nCOPY --from=go-builder /src/grafana/bin/*/grafana-server /src/grafana/bin/*/grafana-cli bin/\nCOPY --from=js-builder /usr/src/app/public public\nCOPY --from=js-builder /usr/src/app/tools tools\n\nCOPY packaging/docker/run.sh /\n\nUSER grafana\nENTRYPOINT [ \"/run.sh\" ]\n"
}