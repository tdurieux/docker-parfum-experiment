{
  "startTime": 1674220172291,
  "endTime": 1674220173205,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 20,
        "columnEnd": 36
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "FROM node:16-alpine3.15 as js-builder\n\nENV NODE_OPTIONS=--max_old_space_size=8000\n\nWORKDIR /grafana\n\nCOPY package.json yarn.lock .yarnrc.yml ./\nCOPY .yarn .yarn\nCOPY packages packages\nCOPY plugins-bundled plugins-bundled\n\nRUN yarn install && yarn cache clean;\n\nCOPY tsconfig.json .eslintrc .editorconfig .browserslistrc .prettierrc.js babel.config.json .linguirc ./\nCOPY public public\nCOPY tools tools\nCOPY scripts scripts\nCOPY emails emails\n\nENV NODE_ENV production\nRUN yarn build && yarn cache clean;\n\nFROM golang:1.17.11-alpine3.15 as go-builder\n\nRUN apk add --no-cache gcc g++ make\n\nWORKDIR /grafana\n\nCOPY go.mod go.sum embed.go Makefile build.go package.json ./\nCOPY cue cue\nCOPY packages/grafana-schema packages/grafana-schema\nCOPY public/app/plugins public/app/plugins\nCOPY public/api-spec.json public/api-spec.json\nCOPY pkg pkg\nCOPY scripts scripts\nCOPY cue.mod cue.mod\nCOPY .bingo .bingo\n\nRUN go mod verify\nRUN make build-go\n\n# Final stage\nFROM alpine:3.15\n\nLABEL maintainer=\"Grafana team <hello@grafana.com>\"\n\nARG GF_UID=\"472\"\nARG GF_GID=\"0\"\n\nENV PATH=\"/usr/share/grafana/bin:$PATH\" \\\n  GF_PATHS_CONFIG=\"/etc/grafana/grafana.ini\" \\\n  GF_PATHS_DATA=\"/var/lib/grafana\" \\\n  GF_PATHS_HOME=\"/usr/share/grafana\" \\\n  GF_PATHS_LOGS=\"/var/log/grafana\" \\\n  GF_PATHS_PLUGINS=\"/var/lib/grafana/plugins\" \\\n  GF_PATHS_PROVISIONING=\"/etc/grafana/provisioning\"\n\nWORKDIR $GF_PATHS_HOME\n\nRUN apk add --no-cache ca-certificates bash tzdata musl-utils\nRUN apk add --no-cache openssl ncurses-libs ncurses-terminfo-base --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main\nRUN apk upgrade ncurses-libs ncurses-terminfo-base --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main\nRUN apk info -vv | sort\n\nCOPY conf ./conf\n\nRUN if [ ! $(getent group \"$GF_GID\") ]; then \\\n  addgroup -S -g $GF_GID grafana; \\\n  fi\n\nRUN export GF_GID_NAME=$(getent group $GF_GID | cut -d':' -f1) && \\\n  mkdir -p \"$GF_PATHS_HOME/.aws\" && \\\n  adduser -S -u $GF_UID -G \"$GF_GID_NAME\" grafana && \\\n  mkdir -p \"$GF_PATHS_PROVISIONING/datasources\" \\\n  \"$GF_PATHS_PROVISIONING/dashboards\" \\\n  \"$GF_PATHS_PROVISIONING/notifiers\" \\\n  \"$GF_PATHS_PROVISIONING/plugins\" \\\n  \"$GF_PATHS_PROVISIONING/access-control\" \\\n  \"$GF_PATHS_LOGS\" \\\n  \"$GF_PATHS_PLUGINS\" \\\n  \"$GF_PATHS_DATA\" && \\\n  cp \"$GF_PATHS_HOME/conf/sample.ini\" \"$GF_PATHS_CONFIG\" && \\\n  cp \"$GF_PATHS_HOME/conf/ldap.toml\" /etc/grafana/ldap.toml && \\\n  chown -R \"grafana:$GF_GID_NAME\" \"$GF_PATHS_DATA\" \"$GF_PATHS_HOME/.aws\" \"$GF_PATHS_LOGS\" \"$GF_PATHS_PLUGINS\" \"$GF_PATHS_PROVISIONING\" && \\\n  chmod -R 777 \"$GF_PATHS_DATA\" \"$GF_PATHS_HOME/.aws\" \"$GF_PATHS_LOGS\" \"$GF_PATHS_PLUGINS\" \"$GF_PATHS_PROVISIONING\"\n\nCOPY --from=go-builder /grafana/bin/*/grafana-server /grafana/bin/*/grafana-cli ./bin/\nCOPY --from=js-builder /grafana/public ./public\nCOPY --from=js-builder /grafana/tools ./tools\n\nEXPOSE 3000\n\nCOPY ./packaging/docker/run.sh /run.sh\n\nUSER grafana\nENTRYPOINT [ \"/run.sh\" ]\n"
}