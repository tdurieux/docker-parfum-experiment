diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/grafana/grafana/scripts/build/ci-build/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/grafana/grafana/scripts/build/ci-build/Dockerfile/repaired.Dockerfile
index 48d42c3..23acfaf 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/grafana/grafana/scripts/build/ci-build/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/grafana/grafana/scripts/build/ci-build/Dockerfile/repaired.Dockerfile
@@ -35,17 +35,17 @@ WORKDIR /tmp
 # might also wanna put them as their own layer to not have to unpack them every time?
 
 RUN apt-get update && \
-    apt-get install -yq \
+    apt-get install --no-install-recommends -yq \
         clang patch libxml2-dev \
         build-essential \
         ca-certificates \
-        curl            \
-        git             \
-        make            \
-        cmake           \
-        libssl-dev      \
-        xz-utils        \
-        lzma-dev
+        curl \
+        git \
+        make \
+        cmake \
+        libssl-dev \
+        xz-utils \
+        lzma-dev && rm -rf /var/lib/apt/lists/*;
 RUN git clone https://github.com/tpoechtrager/osxcross.git /tmp/osxcross && \
       cd /tmp/osxcross && git reset --hard $OSX_CROSS_REV
 COPY MacOSX10.15.sdk.tar.xz /tmp/osxcross/tarballs/
@@ -53,18 +53,18 @@ RUN ln -s /usr/bin/llvm-dsymutil-6.0 /usr/bin/dsymutil
 RUN UNATTENDED=1 OSX_VERSION_MIN=${OSX_MIN} /tmp/osxcross/build.sh
 RUN rm -rf /tmp/osxcross/target/SDK/*/usr/share && \
     cd /tmp                                              && \
-    tar cfJ osxcross.tar.xz osxcross/target              && \
-    rm -rf /tmp/osxcross
-RUN apt-get install -yq                     \
-        unzip libtool-bin bison flex gawk gcc g++ gperf help2man libncurses5-dev make patch python-dev texinfo xz-utils
+    tar cfJ osxcross.tar.xz osxcross/target && \
+    rm -rf /tmp/osxcross && rm osxcross.tar.xz
+RUN apt-get install --no-install-recommends -yq \
+        unzip libtool-bin bison flex gawk gcc g++ gperf help2man libncurses5-dev make patch python-dev texinfo xz-utils && rm -rf /var/lib/apt/lists/*;
 RUN curl -fLO http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-${CTNG}.tar.xz
 RUN echo $CTNG_CHKSUM crosstool-ng-${CTNG}.tar.xz | sha512sum --check --strict --status
-RUN tar xf crosstool-ng-${CTNG}.tar.xz
-RUN cd /tmp/crosstool-ng-${CTNG}        && \
-    ./configure --enable-local          && \
+RUN tar xf crosstool-ng-${CTNG}.tar.xz && rm crosstool-ng-${CTNG}.tar.xz
+RUN cd /tmp/crosstool-ng-${CTNG} && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-local && \
     make && \
-    ./ct-ng x86_64-centos6-linux-gnu    && \
-    sed -i '/CT_PREFIX_DIR=/d' .config  && \
+    ./ct-ng x86_64-centos6-linux-gnu && \
+    sed -i '/CT_PREFIX_DIR=/d' .config && \
     echo 'CT_PREFIX_DIR="/tmp/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}"' >> .config && \
     echo 'CT_EXPERIMENTAL=y' >> .config && \
     echo 'CT_ALLOW_BUILD_AS_ROOT=y' >> .config && \
@@ -85,7 +85,7 @@ ARG SHELLCHECK_VERSION=0.7.1
 ARG SHELLCHECK_CHKSUM=beca3d7819a6bdcfbd044576df4fc284053b48f468b2f03428fe66f4ceb2c05d9b5411357fa15003cb0311406c255084cf7283a3b8fce644c340c2f6aa910b9f
 RUN curl -fLO http://storage.googleapis.com/grafana-downloads/ci-dependencies/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz
 RUN echo $SHELLCHECK_CHKSUM shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz | sha512sum --check --strict --status
-RUN tar xf shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz && mv shellcheck-v${SHELLCHECK_VERSION}/shellcheck /tmp/
+RUN tar xf shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz && mv shellcheck-v${SHELLCHECK_VERSION}/shellcheck /tmp/ && rm shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz
 
 ARG CUE_VERSION=0.3.0-alpha5
 ARG CUE_CHKSUM=9d3131e470cdb5182afd9966688f1c052d383145cce005a947156b5591da39b7
@@ -95,7 +95,7 @@ RUN tar xf cue_${CUE_VERSION}_Linux_x86_64.tar.gz -C /tmp cue
 
 ARG DOCKERIZE_VERSION=0.6.1
 RUN curl -fLO https://github.com/jwilder/dockerize/releases/download/v${DOCKERIZE_VERSION}/dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz
-RUN tar -xzvf dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz -C /tmp/
+RUN tar -xzvf dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz -C /tmp/ && rm dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz
 RUN rm dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz
 
 # Base image to crossbuild grafana.
@@ -117,37 +117,37 @@ COPY --from=toolchain /tmp/cue /usr/local/bin/
 COPY --from=toolchain /tmp/dockerize /usr/local/bin/
 
 RUN apt-get update && \
-    apt-get install -yq  \
+    apt-get install --no-install-recommends -yq \
         build-essential netcat-traditional clang gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-mingw-w64-x86-64 \
-        python-pip      \
+        python-pip \
         ca-certificates \
-        curl            \
-        gcc             \
-        g++             \
-        git             \
-        make            \
-        rpm             \
-        xz-utils        \
-        expect          \
-        gnupg2          \
-        procps          \
-        ruby            \
-        ruby-dev        \
-        rubygems        \
-        unzip &&        \
+        curl \
+        gcc \
+        g++ \
+        git \
+        make \
+        rpm \
+        xz-utils \
+        expect \
+        gnupg2 \
+        procps \
+        ruby \
+        ruby-dev \
+        rubygems \
+        unzip && \
     gem install -N fpm && \
     ln -s /usr/bin/llvm-dsymutil-6.0 /usr/bin/dsymutil && \
-    curl -fsS https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -  && \
-    curl -O https://deb.nodesource.com/node_16.x/pool/main/n/nodejs/nodejs_${NODEVERSION}_amd64.deb &&\
-    dpkg -i nodejs_${NODEVERSION}_amd64.deb &&\
-    rm nodejs_${NODEVERSION}_amd64.deb &&\
+    curl -fsS https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \
+    curl -f -O https://deb.nodesource.com/node_16.x/pool/main/n/nodejs/nodejs_${NODEVERSION}_amd64.deb && \
+    dpkg -i nodejs_${NODEVERSION}_amd64.deb && \
+    rm nodejs_${NODEVERSION}_amd64.deb && \
     curl -fsS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \
     echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list && \
-    apt-get update && apt-get install -yq yarn=${YARNVERSION} && \
+    apt-get update && apt-get install --no-install-recommends -yq yarn=${YARNVERSION} && \
     curl -fL https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz \
       | tar -xz -C /usr/local && \
     git clone https://github.com/raspberrypi/tools.git /opt/rpi-tools --depth=1 && \
-    pip install codespell
+    pip install --no-cache-dir codespell && rm -rf /var/lib/apt/lists/*;
 
 # We build our own musl cross-compilers via the musl-cross-make project, on the same OS as this image's base image,
 # to ensure compatibility. We also make sure to target musl 1.1.x, since musl 1.2.x introduces 64-bit time types