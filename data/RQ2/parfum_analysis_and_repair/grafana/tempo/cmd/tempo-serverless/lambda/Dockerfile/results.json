{
  "startTime": 1674248695853,
  "endTime": 1674248696466,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 136
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n#  docker run -p 8080:8080 -p 9000:9000 tempo-serverless\n#\n#  to exercise the function after building using the raw lambda interface\n#    curl -d '{}' http://localhost:8080/2015-03-31/functions/function/invocations\n#    passed body should be serializable to: events.ALBTargetGroupRequest\n#    response body will be: events.ALBTargetGroupResponse\n#\n#  to exercise the function as if it were an http endpoint through an alb\n#    curl http://localhost:9000/?start=1000&end=1001&...\n#\n\n#\n# build the lambda and retrive the lambda-local-proxy\n#\nFROM golang:1.18-buster AS build\n\n# copy in the lambda. todo: build in container\nCOPY lambda /\n\n# copy in https://github.com/treasure-data/lambda-local-proxy to include in the docker image.\n#   this project acts as an \"alb\" and translates normal http requests into Lambda invokes\nRUN curl -f -L https://github.com/treasure-data/lambda-local-proxy/releases/download/v0.0.5/lambda-local-proxy_0.0.5_Linux_x86_64.tar.gz | tar xvz -C / \\\n  && chmod +x /lambda-local-proxy\n\n#\n# https://docs.aws.amazon.com/lambda/latest/dg/images-create.html\n#\nFROM public.ecr.aws/lambda/go:1.2022.01.25.13\n\nCOPY --from=build /lambda ${LAMBDA_TASK_ROOT}\nCOPY --from=build /lambda-local-proxy /lambda-local-proxy\n\nRUN chmod +x /lambda-local-proxy\n\nRUN echo -e '\\\n  #!/bin/bash \\n\\\n  AWS_REGION=dummy AWS_ACCESS_KEY_ID=dummy AWS_SECRET_ACCESS_KEY=dummy /lambda-local-proxy -e http://localhost:8080 -p 9000 -f function & \\n\\\n  exec /lambda-entrypoint.sh lambda \\n\\\n  ' > /run.sh\nRUN chmod +x /run.sh\n\n# run lambda-local-proxy and the actual lambda runtime itself.\nENTRYPOINT /run.sh\n"
}