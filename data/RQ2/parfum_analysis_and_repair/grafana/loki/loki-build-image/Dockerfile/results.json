{
  "startTime": 1674220739416,
  "endTime": 1674220740779,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 165
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 73,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is the Dockerfile for the Loki build image that is used by the CI\n# pipelines.\n# If you make changes to this Dockerfile you also need to update the\n# tag of the Docker image in `../.drone/drone.jsonnet` and run `make drone`.\n# See ../docs/sources/maintaining/release-loki-build-image.md\n\nFROM alpine as helm\nARG HELM_VER=\"v3.2.3\"\n\nRUN apk add --no-cache curl && \\\n    curl -f -L -o /tmp/helm-$HELM_VER.tgz https://get.helm.sh/helm-${HELM_VER}-linux-amd64.tar.gz && \\\n    tar -xz -C /tmp -f /tmp/helm-$HELM_VER.tgz && \\\n    mv /tmp/linux-amd64/helm /usr/bin/helm && \\\n    rm -rf /tmp/linux-amd64 /tmp/helm-$HELM_VER.tgz\n\nFROM alpine as lychee\nARG LYCHEE_VER=\"0.7.0\"\nRUN apk add --no-cache curl && \\\n    curl -f -L -o /tmp/lychee-$LYCHEE_VER.tgz https://github.com/lycheeverse/lychee/releases/download/${LYCHEE_VER}/lychee-${LYCHEE_VER}-x86_64-unknown-linux-gnu.tar.gz && \\\n    tar -xz -C /tmp -f /tmp/lychee-$LYCHEE_VER.tgz && \\\n    mv /tmp/lychee /usr/bin/lychee && \\\n    rm -rf /tmp/linux-amd64 /tmp/lychee-$LYCHEE_VER.tgz\n\nFROM alpine as golangci\nRUN apk add --no-cache curl && \\\n    cd / && \\\n    curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.45.2\n\nFROM alpine:3.15.4 as buf\n\nRUN apk add --no-cache curl && \\\n    curl -f -sSL \"https://github.com/bufbuild/buf/releases/download/v1.4.0/buf-$(uname -s)-$(uname -m)\" -o \"/usr/bin/buf\" && \\\n    chmod +x \"/usr/bin/buf\"\n\nFROM alpine:3.15.4 as docker\nRUN apk add --no-cache docker-cli\n\n# TODO this should be fixed to download and extract the specific release binary from github as we do for golangci and helm above\n# however we need a commit which hasn't been released yet: https://github.com/drone/drone-cli/commit/1fad337d74ca0ecf420993d9d2d7229a1c99f054\n# Read the comment below regarding GO111MODULE=on and why it is necessary\nFROM golang:1.17.9 as drone\nRUN curl -f -L https://github.com/drone/drone-cli/releases/download/v1.4.0/drone_linux_amd64.tar.gz | tar zx && \\\n    install -t /usr/local/bin drone\n\n# Install faillint used to lint go imports in CI.\n# This collisions with the version of go tools used in the base image, thus we install it in its own image and copy it over.\n# Error:\n#\tgithub.com/fatih/faillint@v1.5.0 requires golang.org/x/tools@v0.0.0-20200207224406-61798d64f025\n#   (not golang.org/x/tools@v0.0.0-20190918214920-58d531046acd from golang.org/x/tools/cmd/goyacc@58d531046acdc757f177387bc1725bfa79895d69)\nFROM golang:1.17.9 as faillint\nRUN GO111MODULE=on go get github.com/fatih/faillint@v1.5.0\n\nFROM golang:1.17.9 as delve\nRUN GO111MODULE=on go get github.com/go-delve/delve/cmd/dlv@v1.7.3\n\n# Install ghr used to push binaries and template the release\n# This collides with the version of go tools used in the base image, thus we install it in its own image and copy it over.\nFROM golang:1.17.9 as ghr\nRUN GO111MODULE=on go get github.com/tcnksm/ghr\n\n# Install nfpm (https://nfpm.goreleaser.com) for creating .deb and .rpm packages.\nFROM golang:1.17.9 as nfpm\nRUN GO111MODULE=on go get github.com/goreleaser/nfpm/v2/cmd/nfpm@v2.11.3\n\n# Install tools used to compile jsonnet.\nFROM golang:1.17.9 as jsonnet\nRUN GO111MODULE=on go get \\\n    github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0 \\\n    github.com/monitoring-mixins/mixtool/cmd/mixtool@bca3066 \\\n    github.com/google/go-jsonnet/cmd/jsonnet@v0.18.0\n\nFROM golang:1.17.9-buster\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -qy \\\n    musl gnupg ragel \\\n    file zip unzip jq gettext \\\n    protobuf-compiler libprotobuf-dev \\\n    libsystemd-dev jq && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY --from=docker /usr/bin/docker /usr/bin/docker\nCOPY --from=helm /usr/bin/helm /usr/bin/helm\nCOPY --from=lychee /usr/bin/lychee /usr/bin/lychee\nCOPY --from=golangci /bin/golangci-lint /usr/local/bin\nCOPY --from=buf /usr/bin/buf /usr/bin/buf\nCOPY --from=drone /usr/local/bin/drone /usr/bin/drone\nCOPY --from=faillint /go/bin/faillint /usr/bin/faillint\nCOPY --from=delve /go/bin/dlv /usr/bin/dlv\nCOPY --from=ghr /go/bin/ghr /usr/bin/ghr\nCOPY --from=nfpm /go/bin/nfpm /usr/bin/nfpm\nCOPY --from=jsonnet /go/bin/jb /usr/bin/jb\nCOPY --from=jsonnet /go/bin/mixtool /usr/bin/mixtool\nCOPY --from=jsonnet /go/bin/jsonnet /usr/bin/jsonnet\n\n# Install some necessary dependencies.\n# Forcing GO111MODULE=on is required to specify dependencies at specific versions using the go mod notation.\n# If we don't force this, Go is going to default to GOPATH mode as we do not have an active project or go.mod\n# file for it to detect and switch to Go Modules automatically.\n# It's possible this can be revisited in newer versions of Go if the behavior around GOPATH vs GO111MODULES changes\nRUN GO111MODULE=on go get \\\n    github.com/golang/protobuf/protoc-gen-go@v1.3.1 \\\n    github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0 \\\n    github.com/gogo/protobuf/gogoproto@v1.3.0 \\\n    # Due to the lack of a proper release tag, we use the commit hash of\n    # https://github.com/golang/tools/releases v0.1.7\n    golang.org/x/tools/cmd/goyacc@58d531046acdc757f177387bc1725bfa79895d69 \\\n    github.com/mitchellh/gox && \\\n    rm -rf /go/pkg /go/src\nENV GOCACHE=/go/cache\n\nCOPY build.sh /\nRUN chmod +x /build.sh\nENTRYPOINT [\"/build.sh\"]\n"
}