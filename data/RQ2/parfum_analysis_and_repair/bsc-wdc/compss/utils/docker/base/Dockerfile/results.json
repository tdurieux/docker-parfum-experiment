{
  "startTime": 1674219309350,
  "endTime": 1674219310330,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 3,
        "columnEnd": 75
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 62,
        "columnEnd": 125
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 as base_rt\nLABEL maintainer=\"COMPSs Support <support-compss@bsc.es>\" \\\n      vendor=\"Barcelona Supercomputing Center (BSC)\" \\\n      url=\"http://compss.bsc.es\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends openjdk-8-jdk graphviz xdg-utils uuid-runtime && \\\n    apt-get autoclean && \\\n    rm -rf /var/lib/apt/lists/*\n\nFROM base_rt as base_python\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends python3 && \\\n    apt-get autoclean && \\\n    rm -rf /var/lib/apt/lists/*\n\nFROM base_python as base_all\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends libboost-all-dev libxml2 papi-tools openmpi-bin libopenmpi-dev libtool automake build-essential python3-pip openssh-server && \\\n    pip3 install --no-cache-dir wheel dill guppy3==3.1.0 decorator \\\n    # here or in tutorial\n    mpi4py kafka-python && \\\n    apt-get autoclean && \\\n    rm -rf /var/lib/apt/lists/*\nRUN mkdir /run/sshd && \\\n    yes yes | ssh-keygen -f /root/.ssh/id_rsa -t rsa -N '' > /dev/null && \\\n    cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys\n\nFROM base_all as base_tutorial\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends git vim wget ca-certificates maven curl unzip && \\ \n    pip3 install --no-cache-dir graphviz matplotlib numba numpy==1.21.5 scipy scikit-learn python-dateutil==2.8.2 pandas \\\n    jupyter ipykernel && \\\n    python3 -m ipykernel install && \\\n    apt-get autoclean && \\\n    rm -rf /var/lib/apt/lists/*\n\nFROM base_tutorial as base_ci\n\nRUN apt-get update && \\\n\n    #Required for compilation and tests\n    apt-get install -y --no-install-recommends libxml2-dev libpapi-dev python3-setuptools python3-dev gfortran \\\n    sudo jq bc firefox gnupg lsb-release libgraphviz-dev && \\\n    apt-get autoclean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    pip3 --no-cache-dir install pycodestyle selenium redis==3.5.3 redis-py-cluster==2.1.3 enum34 tabulate black memory-profiler && \\\n    pip3 --no-cache-dir install pytest pytest-cov nbval nbconvert coverage pytest-html-profiling pytest-metadata pytest-profiling pytest-subprocess pytest-sugar pydocstyle && \\\n    pip3 --no-cache-dir install black[jupyter] && \\\n    #for fixing a nbcovert jinja2 compatibility problem\n    jinja2==3.0.3 && \\\n    pip3 --no-cache-dir install mypy mypy-extensions types-tabulate types-decorator && \\\n    wget https://services.gradle.org/distributions/gradle-5.4.1-bin.zip && \\\n    unzip -d /opt gradle-5.4.1-bin.zip && \\\n    rm gradle-5.4.1-bin.zip && \\\n    mv /opt/gradle\n    -f --batch \\\n    # Docker-CLI\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \\\n     echo \\\n             \"deb [arch=$(dpkg --print-a ch \\\n   apt-get update && \\\n   apt-get install -y docker-c -c \\\n   apt-get autocle\n   rm - -f f var/lib/apt/lists/* && \\\n   # Geckodriver \\\n   curl -s https://ap .g \\\n   tar -xvf *linux64.tar.gz && \\\n   rm *linux64.tar.gz && \\\n   mv geckodriver /usr/local/bin/ & \\\n   # Create Jenkins User\n   useradd jenkins -m -s /bin/bash && \\\n   # Add the jenkins user to sudoers\n   echo \"jenkins  ALL=(ALL)  NOPA SW \\\n   # Enable ssh to localhost for user jenkins\n   cp -r /root/.ssh /home/jenkins & \\\n   # Make sure jen in \\\n   chown -R jenkins /home/jen in \\\n   groupadd dock\n"
}