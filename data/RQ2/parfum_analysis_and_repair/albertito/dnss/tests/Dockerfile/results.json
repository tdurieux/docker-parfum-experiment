{
  "startTime": 1674219442710,
  "endTime": 1674219443719,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker file for creating a docker container that can run the tests.\n#\n# Create the image:\n#   docker build -t dnss-test -f tests/Dockerfile .\n#\n# Run the tests:\n#   docker run --rm dnss-test\n#\n# Get a shell inside the image (for debugging):\n#   docker run -it --entrypoint=/bin/bash dnss-test\n\nFROM golang:latest\n\nWORKDIR /go/src/blitiri.com.ar/go/dnss\n\n# Make debconf/frontend non-interactive, to avoid distracting output about the\n# lack of $TERM.\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update -q && apt-get install --no-install-recommends -y -q knot-dnsutils systemd && rm -rf /var/lib/apt/lists/*; # Install the required packages for the integration tests.\n\n\n# Copy into the container. Everything below this line will not be cached.\nCOPY . .\n\n# Update dependencies to the latest versions, and fetch them to the cache.\n# Fetch dependencies to the cache, because we might not have external network\n# access once we are running.\n# $GO_GET_ARGS allows to create a variant that updates the dependencies to the\n# latest versions, for testing.\nRUN go get -d -v ${GO_GET_ARGS} ./... && go mod download\n\n# Install dnss, to make sure it is ready to be tested.\nRUN go get -d -v . && go install -v .\n\n# Run all the tests.\nCMD tests/all.sh\n"
}