{
  "startTime": 1674215452711,
  "endTime": 1674215453488,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 16,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 83,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 87,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 87,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 83,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 87,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedDockerfile": "# Copyright lowRISC contributors.\n# Licensed under the Apache License, Version 2.0, see LICENSE for details.\n# SPDX-License-Identifier: Apache-2.0\n\n# Docker container containing various hardware and software development tools\n# for OpenTitan.\n\n# Global configuration options.\nARG VERILATOR_VERSION=4.010\n\n# The RISCV toolchain version should match the release tag used in GitHub.\nARG RISCV_TOOLCHAIN_TAR_VERSION=20190807-1\n\n# Build OpenOCD\n# OpenOCD is a tool to connect with the target chip over JTAG and similar\n# transports.\nFROM ubuntu:16.04 AS openocd\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    autoconf \\\n    git \\\n    libftdi1-dev \\\n    libtool \\\n    libusb-1.0.0-dev \\\n    pkg-config \\\n    texinfo && rm -rf /var/lib/apt/lists/*;\nRUN git clone --depth=1 https://github.com/riscv/riscv-openocd.git /usr/local/src/openocd\nRUN cd /usr/local/src/openocd && ./bootstrap && mkdir build && cd build && \\\n    ../configure --enable-ftdi --enable-verbose-jtag-io --disable-vsllink \\\n    --enable-remote-bitbang --prefix=/tools/openocd && \\\n    make -j$(nproc) && make install\n\n# Build Verilator.\nFROM ubuntu:16.04 as verilator\nARG VERILATOR_VERSION\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    autoconf \\\n    automake \\\n    autotools-dev \\\n    bison \\\n    build-essential \\\n    flex \\\n    git && rm -rf /var/lib/apt/lists/*;\nRUN git clone --depth=1 -b  v${VERILATOR_VERSION} \\\n    http://git.veripool.org/git/verilator /usr/local/src/verilator\nRUN cd /usr/local/src/verilator && \\\n    autoconf && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/tools/verilator/${VERILATOR_VERSION} && \\\n    make -j$(nproc) && make install\n\n\n# Main container image.\nFROM ubuntu:16.04 AS opentitan\nARG VERILATOR_VERSION\nARG RISCV_TOOLCHAIN_TAR_VERSION\n\nLABEL version=\"1.0\"\nLABEL description=\"OpenTitan container for hardware development.\"\nLABEL maintainer=\"miguelosorio@google.com\"\n\n# Copy tools from previous build stages\nWORKDIR /tools\nCOPY --from=openocd /tools/openocd openocd\nCOPY --from=verilator /tools/verilator/${VERILATOR_VERSION} verilator/${VERILATOR_VERSION}\n\n# Required packages\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    curl \\\n    git \\\n    gnupg2 \\\n    libc6-i386 \\\n    libelf-dev \\\n    libftdi-dev \\\n    libftdi1-dev \\\n    libftdi1 \\\n    libssl-dev \\\n    libtool \\\n    libusb-1.0-0-dev \\\n    libxml2-dev \\\n    minicom \\\n    ninja-build \\\n    pkgconf \\\n    screen \\\n    srecord \\\n    zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install Python 3 and support libraries. Cleanup install in place to reduce\n# binary size.\nRUN apt-get install --no-install-recommends -y \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools && \\\n    apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/*\n\n# Copy repository into tmp directory to execute additional install steps.\nCOPY python-requirements.txt /tmp/python-requirements.txt\nRUN pip3 install --no-cache-dir -r /tmp/python-requirements.txt\n\nCOPY util/get-toolchain.py /tmp/get-toolchain.py\nRUN /tmp/get-toolchain.py -r ${RISCV_TOOLCHAIN_TAR_VERSION}\nRUN rm /tmp/python-requirements.txt /tmp/get-toolchain.py\n\n# Use bash as default shell\nRUN ln -sf /bin/bash /bin/sh\n\n# Include tools in PATH.\nENV PATH \"/tools/verilator/${VERILATOR_VERSION}/bin:${PATH}\"\n\n# Configures default container user.\nENV USER ot\n\nENTRYPOINT /bin/bash\n"
}