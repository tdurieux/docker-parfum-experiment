{
  "startTime": 1674220621031,
  "endTime": 1674220622980,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 34,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 43,
        "columnStart": 1,
        "columnEnd": 4
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 55,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "ARG AV_VERSION\nARG CUDA_VERSION\nARG UBUNTU_VERSION\nFROM alicevision/alicevision:${AV_VERSION}-ubuntu${UBUNTU_VERSION}-cuda${CUDA_VERSION}\nLABEL maintainer=\"AliceVision Team alicevision-team@googlegroups.com\"\n\n# Execute with nvidia docker (https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0))\n# docker run -it --runtime=nvidia meshroom\n\nENV MESHROOM_DEV=/opt/Meshroom \\\n    MESHROOM_BUILD=/tmp/Meshroom_build \\\n    QT_DIR=/opt/Qt5.14.1/5.14.1/gcc_64 \\\n    QT_CI_LOGIN=alicevisionjunk@gmail.com \\\n    QT_CI_PASSWORD=azerty1.\n\n# Workaround for qmlAlembic/qtAliceVision builds: fuse lib/lib64 folders\n#RUN ln -s ${AV_INSTALL}/lib ${AV_INSTALL}/lib64\n\n# Install libs needed by Qt\nRUN apt-get update && \\\n\tDEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        flex \\\n        fontconfig \\\n        libfreetype6 \\\n        libglib2.0-0 \\ \n        libice6 \\\n        libx11-6 \\\n        libxcb1 \\\n        libxext6 \\\n        libxi6 \\\n        libxrender1 \\\n        libsm6 \\\n        libxt-dev \\\n        libglu-dev \\\n        libosmesa-dev \\\n        libgl-dev \\\n        libglu-dev \\\n\tlibqt5charts5-dev \\\n        libxcb-keysyms1 \\\n        libxcb-image0 \\\n        libxkbcommon-x11-0 \\\n\tlibz-dev \\\n\tsystemd \\\n\tssh && rm -rf /var/lib/apt/lists/*;\n\n# Disabled as QTOIIO requires ah least 5.13 (5.12 available in Ubuntu 20.04)\n#\tqtdeclarative5-dev \\\n#\tqt3d-assimpsceneimport-plugin \\\n#\tqt3d-defaultgeometryloader-plugin \\\n#\tqt3d-gltfsceneio-plugin \\\n#\tqt3d-scene2d-plugin \\\n#\tqt53dextras5 \\\n#\tqt3d5-dev\n\n\nRUN apt-get install -y --no-install-recommends \\\n\tsoftware-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Install Python3\nRUN apt install --no-install-recommends python3-pip -y && pip3 install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/*;\n\n# Install Qt (to build plugins)\nWORKDIR /tmp/qt\nCOPY dl/qt.run /tmp/qt\nCOPY ./docker/qt-installer-noninteractive.qs ${MESHROOM_DEV}/docker/\nRUN chmod +x qt.run && \\\n    ./qt.run --verbose --platform minimal --script \"${MESHROOM_DEV}/docker/qt-installer-noninteractive.qs\" && \\\n    rm qt.run\n\nCOPY ./*requirements.txt ./setup.py ${MESHROOM_DEV}/\n\n# Install Meshroom requirements and freeze bundle\nWORKDIR \"${MESHROOM_DEV}\"\nRUN pip install --no-cache-dir -r dev_requirements.txt -r\n\n"
}