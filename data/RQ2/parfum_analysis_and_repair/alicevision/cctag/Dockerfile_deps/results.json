{
  "startTime": 1674248130595,
  "endTime": 1674248131517,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 36,
        "columnEnd": 113
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_TAG=10.2\nARG OS_TAG=18.04\nFROM nvidia/cuda:${CUDA_TAG}-devel-ubuntu${OS_TAG}\nLABEL maintainer=\"AliceVision Team alicevision@googlegroups.com\"\n\n# use CUDA_TAG to select the image version to use\n# see https://hub.docker.com/r/nvidia/cuda/\n#\n# For example, to create a ubuntu 16.04 with cuda 8.0 for development, use\n# docker build --build-arg CUDA_TAG=8.0 --tag alicevision/cctag-deps:cuda${CUDA_TAG}-ubuntu${OS_TAG} -f Dockerfile_deps .\n#\n# then execute with nvidia docker (https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0))\n# docker run -it --runtime=nvidia cctag_deps\n\n\n# OS/Version (FILE): cat /etc/issue.net\n# Cuda version (ENV): $CUDA_VERSION\n\n# System update\nRUN apt-get clean && apt-get update && apt-get install -y --no-install-recommends \\\n                build-essential \\\n                wget \\\n                unzip \\\n                yasm \\\n                libtool \\\n                nasm \\\n                automake \\\n                libpng-dev \\\n                libjpeg-dev \\\n                ffmpeg \\\n                libssl-dev \\\n                libavcodec-dev \\\n                libavformat-dev \\\n                libswscale-dev \\\n                libavresample-dev \\\n                libtbb-dev \\\n        && rm -rf /var/lib/apt/lists/*\n\nENV DEPS_INSTALL_PATH=\"/opt\"\n\n# Manually install cmake\nWORKDIR /tmp/cmake\nENV CMAKE_VERSION=3.17\nENV CMAKE_VERSION_FULL=${CMAKE_VERSION}.2\nRUN wget https://cmake.org/files/v3.17/cmake-${CMAKE_VERSION_FULL}.tar.gz && \\\n    tar zxf cmake-${CMAKE_VERSION_FULL}.tar.gz && \\\n    cd cmake-${CMAKE_VERSION_FULL} && \\\n    ./bootstrap --prefix=/usr/local  -- -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_USE_OPENSSL:BOOL=ON && \\\n    make -j$(nproc) install && \\\n    cd /tmp && \\\n    rm -rf cmake && rm cmake-${CMAKE_VERSION_FULL}.tar.gz\n\n\nENV BOOST_VERSION=\"1.70.0\"\nENV BOOST_VERSION_FILENAME=\"1_70_0\"\nWORKDIR /tmp/boost\nRUN wget https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION_FILENAME}.tar.gz && \\\n    tar -xzf boost_${BOOST_VERSION_FILENAME}.tar.gz && \\\n    cd boost_${BOOST_VERSION_FILENAME} && \\\n    ./bootstrap.sh --with-libraries=atomic,container,date_time,exception,filesystem,graph,log,math,program_options,regex,serialization,system,test,thread,stacktrace,timer --prefix=\"${DEPS_INSTALL_PATH}\" && \\\n    ./b2 link=shared install && \\\n    cd /opt && \\\n    rm -rf /tmp/boost && rm boost_${BOOST_VERSION_FILENAME}.tar.gz\n\nWORKDIR /tmp/eigen\nENV EIGEN_VERSION=\"3.3.7\"\nRUN wget https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/${EIGEN_VERSION}.tar.gz && \\\n    mkdir eigen-${EIGEN_VERSION} && tar xf ${EIGEN_VERSION}.tar.gz -C eigen-${EIGEN_VERSION} --strip-components 1 && \\\n    cd eigen-${EIGEN_VERSION} && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DCMAKE_INSTALL_PREFIX:PATH=${DEPS_INSTALL_PATH} && \\\n    make install -j$(nproc) && \\\n    cd /opt && \\\n    rm -rf /tmp/eigen && rm ${EIGEN_VERSION}.tar.gz\n\n# install opencv\nENV OPENCV_VERSION=\"3.4.10\"\nWORKDIR /tmp/opencv\nRUN  wget https://github.com/opencv/opencv/archive/\"${OPENCV_VERSION}\".zip && \\\n     unzip ${OPENCV_VERSION}.zip && \\\n     mkdir -p ./opencv-${OPENCV_VERSION}/build && \\\n     cd ./opencv-${OPENCV_VERSION}/build && \\\n     cmake -DBUILD_TIFF:BOOL=ON \\\n      -DBUILD_opencv_java:BOOL=OFF \\\n      -DWITH_CUDA:BOOL=OFF \\\n      -DENABLE_AVX:BOOL=ON \\\n      -DWITH_OPENGL:BOOL=ON \\\n      -DWITH_IPP:BOOL=ON \\\n      -DWITH_TBB:BOOL=ON \\\n      -DWITH_EIGEN:BOOL=ON \\\n      -DWITH_V4L:BOOL=ON \\\n      -DBUILD_TESTS:BOOL=OFF \\\n      -DBUILD_PERF_TESTS:BOOL=OFF \\\n      -DCMAKE_INSTALL_PREFIX:PATH=${DEPS_INSTALL_PATH} \\\n      -DCMAKE_BUILD_TYPE=RELEASE  .. && \\\n    make -j$(nproc) install && \\\n    cd /opt && \\\n    rm -r /tmp/opencv"
}