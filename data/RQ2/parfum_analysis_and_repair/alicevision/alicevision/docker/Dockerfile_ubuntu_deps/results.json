{
  "startTime": 1674217132368,
  "endTime": 1674217133689,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 69,
        "columnEnd": 121
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 27,
        "columnStart": 1,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 43,
        "columnStart": 1,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_VERSION\nARG UBUNTU_VERSION\nFROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION}\nLABEL maintainer=\"AliceVision Team alicevision-team@googlegroups.com\"\n\n# use CUDA_VERSION to select the image version to use\n# see https://hub.docker.com/r/nvidia/cuda/\n#\n# AV_VERSION=2.2.8.develop\n# CUDA_VERSION=11.0\n# UBUNTU_VERSION=20.04\n# docker build \\\n#    --build-arg CUDA_VERSION=${CUDA_VERSION} \\\n#    --build-arg UBUNTU_VERSION${UBUNTU_VERSION} \\\n#    --tag alicevision/alicevision-deps:${AV_VERSION}-ubuntu${UBUNTU_VERSION}-cuda${CUDA_TAG} \\\n#     -f Dockerfile_ubuntu_deps .\n\n# OS/Version (FILE): cat /etc/issue.net\n# Cuda version (ENV): $CUDA_VERSION\n\n# Install all compilation tools\n# The Kitware repo provides a recent cmake\nRUN . ./etc/os-release && \\\n\tapt-get update && \\\n\tDEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n\t\tca-certificates \\\n\t\twget \\\n\t\tsoftware-properties-common && \\\n\twget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --batch --dearmor - > /etc/apt/trusted.gpg.d/kitware.gpg && \\\n\tapt-add-repository \"deb https://apt.kitware.com/ubuntu/ $UBUNTU_CODENAME main\" && \\\n\tapt-get clean && \\\n\tapt-get update && \\\n\tDEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n\t\tbuild-essential \\\n\t\tgit \\\n\t\tunzip \\\n\t\tyasm \\\n\t\tpkg-config \\\n\t\tlibtool \\\n\t\tlibssl-dev \\\n\t\tnasm \\\n\t\tautomake \\\n\t\tcmake \\\n\t\tgfortran && rm -rf /var/lib/apt/lists/*;\n\nENV AV_DEV=/opt/AliceVision_git \\\n    AV_BUILD=/tmp/AliceVision_build \\\n    AV_INSTALL=/opt/AliceVision_install \\\n    PATH=\"${PATH}:${AV_BUNDLE}\"\n\nCOPY dl/vlfeat_K80L3.SIFT.tree ${AV_INSTALL}/share/aliceVision/\nRUN echo \"export ALICEVISION_VOCTREE=${AV_INSTALL}/share/aliceVision/vlfeat_K80L3.SIFT.tree\" > /etc/profile.d/alicevision.sh\n\nCOPY CMakeLists.txt ${AV_DEV}/\n\nCOPY dl/deps ${AV_BUILD}/external/download/\n\nWORKDIR \"${AV_BUILD}\"\nRUN cmake \"${AV_DEV}\" \\\n     -DCMAKE_BUILD_TYPE=Release \\\n     -DALICEVISION_BUILD_DEPENDENCIES:BOOL=ON \\\n     -DAV_BUILD_ALICEVISION:BOOL=OFF \\\n     -DCMAKE_INSTALL_PREFIX=\"${AV_INSTALL}\"\n\n# Symlink lib64 to lib as qtOIIO expects to find OIIO in lib64\nRUN mkdir -p \"${AV_INSTALL}/lib\" && \\\n        ln -s lib \"${AV_INSTALL}/lib64\"\n\nWORKDIR \"${AV_BUILD}\"\n#RUN make -j\"$(nproc)\" zlib\n#RUN make -j\"$(nproc)\" geogram\n#RUN make -j\"$(nproc)\" tbb\n#RUN make -j\"$(nproc)\" eigen\n#RUN make -j\"$(nproc)\" opengv\n#RUN make -j\"$(nproc)\" lapack\n\nRUN test -e /usr/local/cuda/lib64/libcublas.so || ln -s /usr/lib/x86_64-linux-gnu/libcublas.so /usr/local/cuda/lib64/libcublas.so\n#RUN make -j\"$(nproc)\" suitesparse\n#RUN make -j\"$(nproc)\" ceres\n#RUN make -j\"$(nproc)\" openexr\n#RUN make -j\"$(nproc)\" tiff\n#RUN make -j\"$(nproc)\" png\n#RUN make -j\"$(nproc)\" turbojpeg\n#RUN make -j\"$(nproc)\" libraw\n#RUN make -j\"$(nproc)\" boost\n#RUN make -j\"$(nproc)\" openimageio\n#RUN make -j\"$(nproc)\" alembic\n#RUN make -j\"$(nproc)\" popsift\n#RUN make -j\"$(nproc)\" opencv\n#RUN make -j\"$(nproc)\" cctag\n\nRUN cmake --build . -j \"$(nproc)\" && \\\n    mv \"${AV_INSTALL}/bin\" \"${AV_INSTALL}/bin-deps\" && \\\n    rm -rf \"${AV_BUILD}\"\n\n"
}