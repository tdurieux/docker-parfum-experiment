{
  "startTime": 1674255571896,
  "endTime": 1674255572928,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 25,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:latest\n\nARG TARGETOS\nARG TARGETARCH\nARG TARGETVARIANT\n\nENV REPOSITORY https://github.com/SoftEtherVPN/SoftEtherVPN.git\n\nRUN \\\n  apk --no-cache --no-progress update && \\\n  apk --no-cache --no-progress upgrade && \\\n  # Install supervisor\n  apk --no-cache --no-progress add tini && \\\n  mkdir -p /conf && \\\n  # Install build dependencies\n  apk --no-cache --no-progress --virtual .build-deps add git libgcc libstdc++ gcc musl-dev libc-dev g++ ncurses-dev libsodium-dev \\\n  readline-dev openssl-dev cmake make zlib-dev && \\\n  # Grab and build Softether from GitHub\n  git clone ${REPOSITORY} /tmp/softether && \\\n  cd /tmp/softether && \\\n  # init submodules\n  git submodule init && git submodule update && \\\n  # Build\n  if [ \"${TARGETARCH}\" == \"arm64\" ]; then echo \"Forcing to use neon on arm64 platform manually.\"; sed -ir 's|set(BLAKE2_SRC_PATH $<IF:$<BOOL:${HAS_SSE2}>,${TOP_DIRECTORY}/3rdparty/BLAKE2/sse,${TOP_DIRECTORY}/3rdparty/BLAKE2/ref>)|set(BLAKE2_SRC_PATH ${TOP_DIRECTORY}/3rdparty/BLAKE2/neon)|' ./src/Cedar/CMakeLists.txt; sed -ir 's|set(BLAKE2_SRC $<IF:$<BOOL:${HAS_SSE2}>,${BLAKE2_SRC_PATH}/blake2s.c,${BLAKE2_SRC_PATH}/blake2s-ref.c>)|set(BLAKE2_SRC ${BLAKE2_SRC_PATH}/blake2s-neon.c)|' ./src/Cedar/CMakeLists.txt ; fi && \\\n  export USE_MUSL=YES && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make --silent -C build && make --silent -C build install && \\\n  cp /tmp/softether/build/libcedar.so /tmp/softether/build/libmayaqua.so /usr/lib && \\\n  # Removing build extensions\n  apk del .build-deps && apk del --no-cache --purge && \\\n  rm -rf /tmp/softether && rm -rf /var/cache/apk/* && \\\n  # Deleting unncessary extensions\n  rm -rf /usr/local/bin/vpnbridge \\\n  /usr/local/libexec/softether/vpnbridge && \\\n  # Reintroduce necassary runtime libraries\n  apk add --no-cache --virtual .run-deps \\\n  libcap libcrypto1.1 libssl1.1 ncurses-libs readline su-exec zlib-dev dhclient libsodium-dev && \\\n  # Link Libraries to Binary\n  ln -s /usr/local/bin/vpnserver /usr/bin/softether-vpnsrv && \\\n  ln -s /usr/local/bin/vpncmd /usr/bin/softether-vpncmd && \\\n  ln -s /usr/local/libexec/softether/vpnserver/ /etc/softether && \\\n  # Install dnsmasq and create the tun network adapter.\n  apk add --no-cache dnsmasq iptables && \\\n  echo \"tun\" >> /etc/modules && \\\n  echo \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf && \\\n  mkdir -p /dev/net && \\\n  mknod /dev/net/tun c 10 200 && \\\n  rm -rf /tmp/*\n\n# Advise to open necassary ports\nEXPOSE 1443/tcp 992/tcp 1194/tcp 1194/udp 5555/tcp 500/udp 4500/udp 1701/udp\n\n# Adviste to create necassary volumes\nVOLUME [ \"/conf\" ]\n\n# Move host file system\nCOPY ./.docker/hostfs /\nCOPY ./dist/pipe-${TARGETOS}-${TARGETARCH}${TARGETVARIANT} /usr/bin/pipe\n\nRUN chmod +x /usr/bin/pipe\n\n# Set working directory back\nWORKDIR /\n\nENTRYPOINT [\"tini\", \"pipe\"]\n"
}