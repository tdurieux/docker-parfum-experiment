{
  "startTime": 1674255447823,
  "endTime": 1674255449718,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 68,
        "columnEnd": 124
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 83,
        "columnEnd": 143
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILD_OS=debian\nARG NGINX_PLUS_VERSION=R27\nARG DOWNLOAD_TAG=edge\nARG DEBIAN_VERSION=bullseye-slim\n\n\n############################################# Base images containing libs for Opentracing #############################################\nFROM opentracing/nginx-opentracing:nginx-1.23.0 as opentracing-lib\nFROM opentracing/nginx-opentracing:nginx-1.23.0-alpine as alpine-opentracing-lib\n\n\n############################################# Base image for Debian #############################################\nFROM nginx:1.23.0 AS debian\n\nRUN --mount=type=bind,from=opentracing-lib,target=/tmp/ot/ \\\n\tapt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y libcap2-bin \\\n\t# temp fix for CVE-2022-2068, CVE-2021-4209, CVE-2022-34903, CVE-2022-27404\n\t&& apt-get install --no-install-recommends --no-install-suggests -y libssl1.1 openssl libgnutls30 gpgv libfreetype6 \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& cp -av /tmp/ot/usr/local/lib/libopentracing.so* /tmp/ot/usr/local/lib/libjaegertracing*so* /tmp/ot/usr/local/lib/libzipkin*so* /tmp/ot/usr/local/lib/libdd*so* /tmp/ot/usr/local/lib/libyaml*so* /usr/local/lib/ \\\n\t&& cp -av /tmp/ot/usr/lib/nginx/modules/ngx_http_opentracing_module.so /usr/lib/nginx/modules/ \\\n\t&& ldconfig \\\n\t&& echo $NGINX_VERSION > nginx_version\n\n\n############################################# Base image for Alpine #############################################\n# docker.io/library/nginx is a temporary workaround for Dependabot to see this as different from the one used in Debian\nFROM docker.io/library/nginx:1.23.0-alpine AS alpine\n\nRUN --mount=type=bind,from=alpine-opentracing-lib,target=/tmp/ot/ \\\n\tapk add --no-cache libcap libstdc++ \\\n\t# temp fix for CVE-2022-27405, CVE-2022-1586, CVE-2022-32205, CVE-2022-2097, CVE-2022-32205, CVE-2022-2097\n\t&& apk upgrade --no-cache freetype pcre2 curl libcrypto1.1 libcurl libssl1.1 \\\n\t&& cp -av /tmp/ot/usr/local/lib/libopentracing.so* /tmp/ot/usr/local/lib/libjaegertracing*so* /tmp/ot/usr/local/lib/libzipkin*so* /tmp/ot/usr/local/lib/libdd*so* /tmp/ot/usr/local/lib/libyaml*so* /usr/local/lib/ \\\n\t&& cp -av /tmp/ot/usr/lib/nginx/modules/ngx_http_opentracing_module.so /usr/lib/nginx/modules/ \\\n\t&& ldconfig /usr/local/lib/\n\n\n############################################# Base image for Alpine with NGINX Plus #############################################\nFROM alpine:3.16 as alpine-plus\nARG NGINX_PLUS_VERSION\n\nRUN --mount=type=secret,id=nginx-repo.crt,dst=/etc/apk/cert.pem,mode=0644 \\\n\t--mount=type=secret,id=nginx-repo.key,dst=/etc/apk/cert.key,mode=0644 \\\n\t--mount=type=bind,from=alpine-opentracing-lib,target=/tmp/ot/ \\\n\t# temp fix for CVE-2022-2097\n\tapk upgrade --no-cache libcrypto1.1 libssl1.1 \\\n\t&& wget -nv -O /etc/apk/keys/nginx_signing.rsa.pub https://cs.nginx.com/static/keys/nginx_signing.rsa.pub \\\n\t&& printf \"%s\\n\" \"https://pkgs.nginx.com/plus/${NGINX_PLUS_VERSION}/alpine/v$(grep -E -o '^[0-9]+\\.[0-9]+' /etc/alpine-release)/main\" >> /etc/apk/repositories \\\n\t&& apk add --no-cache libcap nginx-plus nginx-plus-module-njs nginx-plus-module-opentracing libcurl \\\n\t&& cp -av /tmp/ot/usr/local/lib/libjaegertracing*so* /tmp/ot/usr/local/lib/libzipkin*so* /tmp/ot/usr/local/lib/libdd*so* /tmp/ot/usr/local/lib/libyaml*so* /usr/local/lib/ \\\n\t&& ldconfig /usr/local/lib/\n\n\n############################################# Base image for Debian with NGINX Plus #############################################\nFROM debian:${DEBIAN_VERSION} AS debian-plus\nARG IC_VERSION\nARG NGINX_PLUS_VERSION\nARG BUILD_OS\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN --mount=type=secret,id=nginx-repo.crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \\\n\t--mount=type=secret,id=nginx-repo.key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \\\n\t--mount=type=bind,from=opentracing-lib,target=/tmp/ot/ \\\n\tapt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y ca-certificates gnupg curl apt-transport-https libcap2-bin \\\n\t# temp fix for  CVE-2022-2068, CVE-2021-4209\n\t&& apt-get install --no-install-recommends --no-install-suggests -y libssl1.1 openssl libgnutls30 \\\n\t&& curl -fsSL https://cs.nginx.com/static/keys/nginx_signing.key | gpg --batch --dearmor > /etc/apt/trusted.gpg.d/nginx_signing.gpg \\\n\t&& curl -fsSL -o /etc/apt/apt.conf.d/90pkgs-nginx https://cs.nginx.com/static/files/90pkgs-nginx \\\n\t&& DEBIAN_VERSION=$(awk -F '=' '/^VERSION_CODENAME=/ {print $2}' /etc/os-release) \\\n\t&& printf \"%s\\n\" \"Acquire::https::pkgs.nginx.com::User-Agent \\\"k8s-ic-$IC_VERSION${BUILD_OS##debian-plus}-apt\\\";\" >> /etc/apt/apt.conf.d/90pkgs-nginx \\\n\t&& printf \"%s\\n\" \"deb https://pkgs.nginx.com/plus/${NGINX_PLUS_VERSION}/debian ${DEBIAN_VERSION} nginx-plus\" > /etc/apt/sources.list.d/nginx-plus.list \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y nginx-plus nginx-plus-module-njs nginx-plus-module-opentracing libcurl4 \\\n\t&& apt-get purge --auto-remove -y apt-transport-https gnupg curl \\\n\t&& cp -av /tmp/ot/usr/local/lib/libjaegertracing*so* /tmp/ot/usr/local/lib/libzipkin*so* /tmp/ot/usr/local/lib/libdd*so* /tmp/ot/usr/local/lib/libyaml*so* /usr/local/lib/ \\\n\t&& ldconfig \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n\n############################################# Base image for Debian with NGINX Plus and App Protect WAF/DoS #############################################\nFROM debian-plus as debian-plus-nap\nARG NGINX_PLUS_VERSION\nARG NAP_MODULES\n\nRUN --mount=type=secret,id=nginx-repo.crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \\\n\t--mount=type=secret,id=nginx-repo.key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \\\n\tapt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y gnupg curl apt-transport-https \\\n\t&& curl -fsSL https://cs.nginx.com/static/keys/app-protect-security-updates.key | gpg --batch --dearmor > /etc/apt/trusted.gpg.d/nginx_app_signing.gpg \\\n\t&& DEBIAN_VERSION=$(awk -F '=' '/^VERSION_CODENAME=/ {print $2}' /etc/os-release) \\\n\t&& if [ -z \"${NAP_MODULES##*waf*}\" ]; then \\\n\tprintf \"%s\\n\" \"deb https://pkgs.nginx.com/app-protect/${NGINX_PLUS_VERSION}/debian ${DEBIAN_VERSION} nginx-plus\" \\\n\t\"deb https://pkgs.nginx.com/app-protect-security-updates/debian ${DEBIAN_VERSION} nginx-plus\" > /etc/apt/sources.list.d/nginx-app-protect.list \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y app-protect app-protect-attack-signatures app-protect-threat-campaigns \\\n\t&& apt-get purge --auto-remove -y curl; \\\n\tfi \\\n\t&& if [ -z \"${NAP_MODULES##*dos*}\" ]; then \\\n\tprintf \"%s\\n\" \"deb https://pkgs.nginx.com/app-protect-dos/${NGINX_PLUS_VERSION}/debian ${DEBIAN_VERSION} nginx-plus\" > /etc/apt/sources.list.d/nginx-app-protect-dos.list \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y app-protect-dos; \\\n\tfi \\\n\t&& apt-get purge --auto-remove -y apt-transport-https gnupg \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& rm /etc/apt/sources.list.d/nginx-app-protect*.list\n\n# Uncomment the lines below if you want to install a custom CA certificate\n# COPY build/*.crt  /usr/local/share/ca-certificates/\n# RUN update-ca-certificates\n\n\n############################################# Base image for UBI #############################################\nFROM redhat/ubi8 AS ubi-base\nARG IC_VERSION\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nLABEL name=\"NGINX Ingress Controller\" \\\n\tmaintainer=\"kubernetes@nginx.com\" \\\n\tvendor=\"NGINX Inc\" \\\n\tversion=\"${IC_VERSION}\" \\\n\trelease=\"1\" \\\n\tsummary=\"The Ingress Controller is an application that runs in a cluster and configures an HTTP load balancer according to Ingress resources.\" \\\n\tdescription=\"The Ingress Controller is an application that runs in a cluster and configures an HTTP load balancer according to Ingress resources.\" \\\n\tio.k8s.description=\"The NGINX Ingress Controller is an application that runs in a cluster and configures an HTTP load balancer according to Ingress resources.\" \\\n\tio.openshift.tags=\"nginx,ingress-controller,ingress,controller,kubernetes,openshift\"\n\nRUN dnf --nodocs install -y shadow-utils ca-certificates \\\n\t# temp fix for CVE-2022-1271, CVE-2022-22576, CVE-2022-25313, CVE-2022-22576, CVE-2021-40528, CVE-2021-3634, CVE-2022-29824, CVE-2021-4189, CVE-2021-4189, CVE-2022-29824, CVE-2022-1621\n\t&& dnf --nodocs upgrade -y xz-libs curl expat libcurl libgcrypt libssh libssh-config libxml2 platform-python python3-libs python3-libxml2 vim-minimal \\\n\t&& groupadd --system --gid 101 nginx \\\n\t&& useradd --system --gid nginx --no-create-home --home-dir /nonexistent --comment \"nginx user\" --shell /bin/false --uid 101 nginx\n\nCOPY --link --chown=101:0 LICENSE /licenses/\n\n\n############################################# Base image for UBI OSS #############################################\nFROM ubi-base AS ubi\n\nRUN --mount=type=bind,from=debian,source=/nginx_version,target=/tmp/nginx_version \\\n\texport NGINX_VERSION=$(</tmp/nginx_version) \\\n\t&& rpm --import https://nginx.org/keys/nginx_signing.key \\\n\t&& version=$(grep -E -o '[0-9]+\\.[0-9]+' /etc/redhat-release | cut -d\".\" -f1) \\\n\t&& printf \"%s\\n\" \"[nginx]\" \"name=nginx repo\" \\\n\t\"baseurl=https://nginx.org/packages/mainline/centos/${version}/\\$basearch/\" \\\n\t\"gpgcheck=1\" \"enabled=1\" \"module_hotfixes=true\" > /etc/yum.repos.d/nginx.repo \\\n\t&& dnf --nodocs install -y nginx-${NGINX_VERSION} \\\n\t&& rm /etc/yum.repos.d/nginx.repo\n\n\n############################################# Base image for UBI with NGINX Plus #############################################\nFROM ubi-base AS ubi-plus\nARG NGINX_PLUS_VERSION\n\nRUN --mount=type=secret,id=nginx-repo.crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \\\n\t--mount=type=secret,id=nginx-repo.key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \\\n\trpm --import https://cs.nginx.com/static/keys/nginx_signing.key \\\n\t&& curl -fsSL \"https://cs.nginx.com/static/files/nginx-plus-$(grep -E -o '[0-9]+\\.[0-9]+' /etc/redhat-release | cut -d\".\" -f1).repo\" | tr 0 1 > /etc/yum.repos.d/nginx-plus.repo \\\n\t&& sed -i \"0,/centos/s;;${NGINX_PLUS_VERSION}/centos;\" /etc/yum.repos.d/nginx-plus.repo \\\n\t&& dnf --nodocs install -y nginx-plus nginx-plus-module-njs\n\n\n############################################# Base image for UBI with NGINX Plus and App Protect WAF/DoS #############################################\nFROM ubi-plus as ubi-plus-nap\nARG NGINX_PLUS_VERSION\nARG NAP_MODULES\n\nRUN --mount=type=secret,id=nginx-repo.crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \\\n\t--mount=type=secret,id=nginx-repo.key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \\\n\t--mount=type=secret,id=rhel_license,dst=/tmp/rhel_license,mode=0644 \\\n\tsource /tmp/rhel_license \\\n\t&& subscription-manager register --org=${RHEL_ORGANIZATION} --activationkey=${RHEL_ACTIVATION_KEY} || true \\\n\t&& subscription-manager attach \\\n\t&& dnf config-manager --set-enabled codeready-builder-for-rhel-8-x86_64-rpms \\\n\t&& dnf --nodocs install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm \\\n\t&& if [ -z \"${NAP_MODULES##*waf*}\" ]; then \\\n\tcurl -fsSL https://cs.nginx.com/static/files/app-protect-8.repo > /etc/yum.repos.d/app-protect-8.repo; \\\n\tsed -i \"0,/centos/s;;${NGINX_PLUS_VERSION}/centos;\" /etc/yum.repos.d/app-protect-8.repo; \\\n\tdnf --nodocs install -y app-protect app-protect-attack-signatures app-protect-threat-campaigns; \\\n\tfi \\\n\t&& if [ -z \"${NAP_MODULES##*dos*}\" ]; then \\\n\tcurl -fsSL https://cs.nginx.com/static/files/app-protect-dos-8.repo > /etc/yum.repos.d/app-protect-dos-8.repo; \\\n\tsed -i \"0,/centos/s;;${NGINX_PLUS_VERSION}/centos;\" /etc/yum.repos.d/app-protect-dos-8.repo; \\\n\tdnf --nodocs install -y app-protect-dos; \\\n\tfi \\\n\t&& rm /etc/yum.repos.d/app-protect*.repo \\\n\t&& subscription-manager unregister \\\n\t&& dnf clean all && rm -rf /var/cache/dnf\n\n# Uncomment the lines below if you want to install a custom CA certificate\n# COPY build/*.crt  /etc/pki/ca-trust/source/anchors/\n# RUN update-ca-trust extract\n\n\n############################################# Create common files, permissions and setcap #############################################\nFROM ${BUILD_OS} as common\n\nARG BUILD_OS\nARG IC_VERSION\nARG GIT_COMMIT\nARG TARGETPLATFORM\nARG NAP_MODULES=none\n\n# copy oidc files on plus build\nRUN --mount=target=/tmp [ -n \"${BUILD_OS##*plus*}\" ] && exit 0; mkdir -p etc/nginx/oidc/ && cp -a /tmp/internal/configs/oidc/* /etc/nginx/oidc/\n\n# run only on nap waf build\nRUN --mount=target=/tmp [ -n \"${NAP_MODULES##*waf*}\" ] && exit 0; mkdir -p /etc/nginx/waf/nac-policies /etc/nginx/waf/nac-logconfs /etc/nginx/waf/nac-usersigs /var/log/app_protect /opt/app_protect \\\n\t&& chown -R 101:0 /etc/app_protect /usr/share/ts /var/log/app_protect/ /opt/app_protect/ /var/log/nginx/ \\\n\t&& touch /etc/nginx/waf/nac-usersigs/index.conf \\\n\t&& cp -a /tmp/build/log-default.json /etc/nginx\n\n# run only on nap dos build\nRUN --mount=target=/tmp [ -n \"${NAP_MODULES##*dos*}\" ] && exit 0; mkdir -p /root/app_protect_dos /etc/nginx/dos/policies /etc/nginx/dos/logconfs /shared/cores /var/log/adm /var/run/adm \\\n\t&& chmod 777 /shared/cores /var/log/adm /var/run/adm /etc/app_protect_dos\n\nRUN --mount=target=/tmp mkdir -p /var/lib/nginx /etc/nginx/secrets /etc/nginx/stream-conf.d \\\n\t&& setcap 'cap_net_bind_service=+ep' /usr/sbin/nginx 'cap_net_bind_service=+ep' /usr/sbin/nginx-debug \\\n\t&& setcap -v 'cap_net_bind_service=+ep' /usr/sbin/nginx 'cap_net_bind_service=+ep' /usr/sbin/nginx-debug \\\n\t&& [ -z \"${BUILD_OS##*plus*}\" ] && PLUS=-plus; cp -a /tmp/internal/configs/version1/nginx$PLUS.ingress.tmpl /tmp/internal/configs/version1/nginx$PLUS.tmpl \\\n\t/tmp/internal/configs/version2/nginx$PLUS.virtualserver.tmpl /tmp/internal/configs/version2/nginx$PLUS.transportserver.tmpl / \\\n\t&& chown -R 101:0 /etc/nginx /etc/nginx/secrets /var/cache/nginx /var/lib/nginx /*.tmpl \\\n\t&& rm -f /etc/nginx/conf.d/* /etc/apt/apt.conf.d/90pkgs-nginx /etc/apt/sources.list.d/nginx-plus.list\n\n# Uncomment the line below if you would like to add the default.pem to the image\n# and use it as a certificate and key for the default server\n# ADD default.pem /etc/nginx/secrets/default\n\nEXPOSE 80 443\n\nSTOPSIGNAL SIGTERM\nENTRYPOINT [\"/nginx-ingress\"]\n# 101 is nginx\nUSER 101\n\nLABEL org.opencontainers.image.version=\"${IC_VERSION}\"\nLABEL org.opencontainers.image.revision=\"${GIT_COMMIT}\"\nLABEL org.nginx.kic.image.build.target=\"${TARGETPLATFORM}\"\nLABEL org.nginx.kic.image.build.os=\"${BUILD_OS}\"\nLABEL org.nginx.kic.image.build.nginx.version=\"${NGINX_PLUS_VERSION}${NGINX_VERSION}\"\n\n\n############################################# Build nginx-ingress in golang container #############################################\nFROM golang:1.18-alpine AS builder\nARG IC_VERSION\nARG TARGETARCH\n\nWORKDIR /go/src/github.com/nginxinc/kubernetes-ingress/nginx-ingress/cmd/nginx-ingress\nRUN --mount=target=/go/src/github.com/nginxinc/kubernetes-ingress/nginx-ingress/ --mount=type=cache,target=/root/.cache/go-build \\\n\tgo mod download\nRUN --mount=target=/go/src/github.com/nginxinc/kubernetes-ingress/nginx-ingress/ --mount=type=cache,target=/root/.cache/go-build \\\n\tCGO_ENABLED=0 GOOS=linux GOARCH=$TARGETARCH go build -trimpath -ldflags \"-s -w -X main.version=${IC_VERSION}\" -o /nginx-ingress\n\n\n############################################# Create image with nginx-ingress built in container #############################################\nFROM common AS container\n\nLABEL org.nginx.kic.image.build.version=\"container\"\n\nCOPY --link --from=builder --chown=101:0 /nginx-ingress /\n\n\n############################################# Create image with nginx-ingress built locally #############################################\nFROM common AS local\n\nLABEL org.nginx.kic.image.build.version=\"local\"\n\nCOPY --link --chown=101:0 nginx-ingress /\n\n\n############################################# Create image with nginx-ingress built by GoReleaser #############################################\nFROM common AS goreleaser\nARG TARGETARCH\n\nLABEL org.nginx.kic.image.build.version=\"goreleaser\"\n\nCOPY --link --chown=101:0 dist/kubernetes-ingress_linux_$TARGETARCH*/nginx-ingress /\n\n\n############################################# Create image with nginx-ingress built by GoReleaser for AWS Marketplace #############################################\nFROM common AS aws\nARG TARGETARCH\n\nLABEL org.nginx.kic.image.build.version=\"aws\"\n\nCOPY --link --chown=101:0 dist/aws_linux_$TARGETARCH*/nginx-ingress /\n\n\n############################################# Create image with nginx-ingress extracted from image on Docker Hub #############################################\nFROM nginx/nginx-ingress:${DOWNLOAD_TAG} as kic\n\nFROM common as download\n\nLABEL org.nginx.kic.image.build.version=\"binaries\"\n\nCOPY --link --from=kic --chown=101:0 /nginx-ingress /\n"
}