{
  "startTime": 1674249899032,
  "endTime": 1674249899971,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ------------------------------------------------------------------------------\n# Pull base image\nFROM ubuntu:20.04\n\n# ------------------------------------------------------------------------------\n# set locale\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\n# ------------------------------------------------------------------------------\n# Arguments\nARG WORKDIR=/root\n\n# ------------------------------------------------------------------------------\n# Install tools via apt\nENV DEBIAN_FRONTEND=noninteractive\nRUN set -x \\\n    && apt -y update \\\n    && apt -y --no-install-recommends install \\\n    git \\\n    wget \\\n    python3 \\\n    python3-dev \\\n    python3-setuptools \\\n    python3-pip \\\n    build-essential \\\n    astyle \\\n    mercurial \\\n    ninja-build \\\n    libssl-dev \\\n    cargo \\\n    flex \\\n    bison \\\n    doxygen \\\n    aspell \\\n    ccache \\\n    gcovr \\\n    && apt clean && rm -rf /var/lib/apt/lists \\\n    && update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1 \\\n    && : && rm -rf /var/lib/apt/lists/*;\n\nRUN set -x \\\n    && pip3 install --no-cache-dir -U cmake\n\n# Set up Mbed environment\nWORKDIR /tmp/\nCOPY requirements.txt .\nRUN set -x \\\n    && pip3 install --no-cache-dir -r requirements.txt \\\n    && :\n\nCOPY tools/cmake/requirements.txt .\nRUN set -x \\\n    && pip3 install --no-cache-dir -r requirements.txt \\\n    && :\n\n\n# ------------------------------------------------------------------------------\n# Install Python modules (which are not included in requirements.txt)\nRUN set -x \\\n    && pip3 install --no-cache-dir -U \\\n    mbed-cli \\\n    mbed-tools \\\n    && :\n\n# ------------------------------------------------------------------------------\n# Install arm-none-eabi-gcc\nWORKDIR /opt/mbed-os-toolchain\nRUN set -x \\\n    && [ \"$(uname -m)\" = \"aarch64\" ] && \\\n        TARBALL=\"gcc-arm-none-eabi-10.3-2021.07-aarch64-linux.tar.bz2\" || \\\n        TARBALL=\"gcc-arm-none-eabi-10.3-2021.07-x86_64-linux.tar.bz2\" \\\n    && wget -q https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.07/${TARBALL} \\\n    && tar -xjf ${TARBALL} \\\n    && rm ${TARBALL} \\\n    && : # last line\n\n# ------------------------------------------------------------------------------\n# Configure environment variables\nENV MBED_GCC_ARM_PATH=/opt/mbed-os-toolchain/gcc-arm-none-eabi-10.3-2021.07/bin/\nENV PATH=\"${PATH}:${MBED_GCC_ARM_PATH}\"\n\n# ------------------------------------------------------------------------------\n# Display, check and save environment settings\n# NOTE: using bash instead of Ubuntu default bash due to unsupport for pipefail\n# Pipefail is crucial here, if the tools didn't install properly, docker build should not pass because of piping\nRUN /bin/bash -c \\\n   \"set -x -o pipefail \\\n    && arm-none-eabi-gcc --version | grep arm-none-eabi-gcc | tee env_settings \\\n    && cmake --version | grep version | tee -a env_settings \\\n    && python --version 2>&1 | tee -a env_settings \\\n    && (echo -n 'mbed-cli ' && mbed --version) | tee -a env_settings \\\n    && (echo -n 'mbed-greentea ' && mbedgt --version | grep ^[0-9]) | tee -a env_settings \\\n    && (echo -n 'mbed-host-tests ' && mbedhtrun --version) | tee -a env_settings \\\n    && (echo -n 'mbed-tools ' && mbed-tools --version) | tee -a env_settings \\\n    && : # LAST LINE\"\n\nWORKDIR /root\n"
}