{
  "startTime": 1674220769436,
  "endTime": 1674220770627,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 51,
        "columnEnd": 82
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 271
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 271
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedDockerfile": "# most steps taken from: https://stackoverflow.com/questions/60821697/how-to-build-openssl-for-arm-linux\nFROM debian:stretch\n\nENV PATH=/root/.cargo/bin:$PATH\n\nRUN apt-get update && apt-get -y --no-install-recommends install wget curl git make build-essential clang libz-dev libsqlite3-dev openssl libssl-dev pkg-config gzip mingw-w64 g++ libmpc-dev libmpfr-dev libgmp-dev gcc-arm-linux-gnueabihf libc6-dev-armhf-cross g++-arm-linux-gnueabihf libmagic-dev && rm -rf /var/lib/apt/lists/*;\n\n# cross compile OpenSSL\n# latest version can be found here: https://www.openssl.org/source/\nENV OPENSSL_VERSION=openssl-1.0.2u\nENV DOWNLOAD_SITE=https://www.openssl.org/source/old/1.0.2\nRUN wget $DOWNLOAD_SITE/$OPENSSL_VERSION.tar.gz && tar zxf $OPENSSL_VERSION.tar.gz && rm $OPENSSL_VERSION.tar.gz\nRUN cd $OPENSSL_VERSION && ./Configure linux-armv4 --cross-compile-prefix=/usr/bin/arm-linux-gnueabihf- --prefix=/opt/openssl-arm --openssldir=/opt/openssl-arm -static && make install\n# This env var configures rust-openssl to use the cross compiled version\nENV OPENSSL_DIR=/opt/openssl-arm\n\nENV ZLIB_VERSION=1.2.11\nRUN echo \"Building zlib\" && \\\n    cd /tmp && \\\n    curl -fLO \"http://zlib.net/zlib-$ZLIB_VERSION.tar.gz\" && \\\n    tar xzf \"zlib-$ZLIB_VERSION.tar.gz\" && cd \"zlib-$ZLIB_VERSION\" && \\\n    CHOST=arm CC=/usr/bin/arm-linux-gnueabihf-gcc \\\n    AR=/usr/bin/arm-linux-gnueabihf-ar RANLIB=/usr/bin/arm-linux-gnueabihf-ranlib \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n    --static --prefix=/opt/zlib && \\\n    make && make install && \\\n    rm -r /tmp/* && rm \"zlib-$ZLIB_VERSION.tar.gz\"\n\n# Install Rust\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y\nRUN rustup target add armv7-unknown-linux-gnueabihf\nRUN rustup component add clippy\n\nENV CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc\nENV CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_RUNNER=\"/linux-runner armv7\"\nENV CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc\nENV CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++\nENV QEMU_LD_PREFIX=/usr/arm-linux-gnueabihf\nENV LIBZ_SYS_STATIC=1\n\n"
}