{
  "startTime": 1674250831635,
  "endTime": 1674250832402,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 122
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG DOCKER_BASE_IMAGE=debian:8\n# extract kernel and toolkit dev\nFROM ${DOCKER_BASE_IMAGE} AS extract\n\nARG KERNEL_SRC_FILENAME\nADD downloads/${KERNEL_SRC_FILENAME} /\n\n# tool chain image\nFROM ${DOCKER_BASE_IMAGE}\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n#     sed  -i \"s/archive.ubuntu.com/mirrors.aliyun.com/g\" /etc/apt/sources.list && \\\n#     sed  -i \"s/security.ubuntu.com/mirrors.aliyun.com/g\" /etc/apt/sources.list && \\\n#     sed  -i \"s/deb.debian.org/mirrors.aliyun.com/g\" /etc/apt/sources.list && \\\n#     sed  -i \"s/security.debian.org/mirrors.aliyun.com/g\" /etc/apt/sources.list\n\nRUN apt-get update && \\\n    apt-get install --yes --no-install-recommends ca-certificates build-essential git libssl-dev curl cpio bspatch vim gettext bc bison flex dosfstools kmod && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* && \\\n    curl -f --progress-bar --output /usr/bin/jq --location https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x /usr/bin/jq\n\nARG REDPILL_LKM_REPO=https://github.com/RedPill-TTG/redpill-lkm.git\nARG REDPILL_LKM_BRANCH=master\nARG REDPILL_LKM_SRC=/opt/redpill-lkm\n\nARG REDPILL_LOAD_REPO=https://github.com/RedPill-TTG/redpill-load.git\nARG REDPILL_LOAD_BRANCH=master\nARG REDPILL_LOAD_SRC=/opt/redpill-load\n\nRUN git clone ${REDPILL_LKM_REPO}  -b ${REDPILL_LKM_BRANCH}  ${REDPILL_LKM_SRC} && \\\n    git clone ${REDPILL_LOAD_REPO} -b ${REDPILL_LOAD_BRANCH} ${REDPILL_LOAD_SRC}\n\nARG TARGET_NAME\nARG TARGET_PLATFORM\nARG TARGET_VERSION\nARG DSM_VERSION\nARG COMPILE_WITH\nARG TARGET_REVISION\nARG REDPILL_LKM_MAKE_TARGET\n\nLABEL redpill-tool-chain=${TARGET_PLATFORM}-${TARGET_VERSION}-${TARGET_REVISION}\n\nENV ARCH=x86_64 \\\n    LINUX_SRC=/opt/${COMPILE_WITH}-${TARGET_PLATFORM}-${TARGET_VERSION}-${TARGET_REVISION} \\\n    REDPILL_LKM_SRC=${REDPILL_LKM_SRC} \\\n    REDPILL_LOAD_SRC=${REDPILL_LOAD_SRC} \\\n    TARGET_NAME=${TARGET_NAME} \\\n    TARGET_PLATFORM=${TARGET_PLATFORM} \\\n    TARGET_VERSION=${TARGET_VERSION} \\\n    TARGET_REVISION=${TARGET_REVISION} \\\n    REDPILL_LKM_MAKE_TARGET=${REDPILL_LKM_MAKE_TARGET}\n\nARG EXTRACTED_KSRC\nCOPY --from=extract ${EXTRACTED_KSRC} ${LINUX_SRC}\n\nRUN if [ \"apollolake\" = \"$TARGET_PLATFORM\" ] || [ \"broadwellnk\" = \"$TARGET_PLATFORM\"  ] || [ \"geminilake\" = \"$TARGET_PLATFORM\" ] || [ \"v1000\" = \"$TARGET_PLATFORM\" ] || [ \"denverton\" = \"$TARGET_PLATFORM\" ]; then echo '+' > ${LINUX_SRC}/.scmversion; fi && \\\n    if [ \"$COMPILE_WITH\" = \"kernel\" ]; then \\\n        cp ${LINUX_SRC}/synoconfigs/${TARGET_PLATFORM} ${LINUX_SRC}/.config && \\\n        make -C ${LINUX_SRC} oldconfig && \\\n        make -C ${LINUX_SRC} modules_prepare ;\\\n    fi\n\nWORKDIR \"/opt\"\n\nCOPY Makefile /opt/\n\nCOPY entrypoint.sh /entrypoint.sh\nCOPY helper.sh ./\nRUN chmod +x /entrypoint.sh  && chmod +x ./helper.sh\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\n"
}