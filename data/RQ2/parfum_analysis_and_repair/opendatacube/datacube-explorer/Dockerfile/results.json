{
  "startTime": 1674250146010,
  "endTime": 1674250146970,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 8,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM osgeo/gdal:ubuntu-small-3.3.2\n\nENV DEBIAN_FRONTEND=noninteractive \\\n    LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8 \\\n    PYTHONFAULTHANDLER=1\n\n# Apt installation\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      build-essential \\\n      git \\\n      vim \\\n      nano \\\n      tini \\\n      wget \\\n      postgresql-client \\\n      python3-pip \\\n      # For Psycopg2\n      libpq-dev python-dev \\\n    && apt-get autoclean && \\\n    apt-get autoremove && \\\n    rm -rf /var/lib/{apt,dpkg,cache,log} && rm -rf /var/lib/apt/lists/*;\n\n\n# Environment can be whatever is supported by setup.py\n# so, either deployment, test\nARG ENVIRONMENT=deployment\n# ARG ENVIRONMENT=test\n\nRUN echo \"Environment is: $ENVIRONMENT\"\n\nRUN pip install --no-cache-dir pip-tools pre-commit pytest-cov\n\n# Pip installation\nRUN mkdir -p /conf\nCOPY requirements-docker.txt constraints-docker.txt /conf/\nRUN pip install --no-cache-dir -r /conf/requirements-docker.txt -c /conf/constraints-docker.txt\n\n\n# Dev setup: run pre-commit once, so its virtualenv is built and cached.\n#    We do this in a tmp repository, before copying our real code, as we\n#    want this cached by Docker and not rebuilt every time code changes\nCOPY .pre-commit-config.yaml /conf/\n\nRUN if [ \"$ENVIRONMENT\" = \"test\" ] ; then \\\n       mkdir -p ~/pre-commit \\\n       && cp /conf/.pre-commit-config.yaml ~/pre-commit \\\n       && cd ~/pre-commit \\\n       && git init \\\n       && pre-commit run \\\n       && rm -rf ~/pre-commit ; \\\n    fi\n\n\n# Set up a nice workdir and add the live code\nENV APPDIR=/code\nRUN mkdir -p $APPDIR\nWORKDIR $APPDIR\nADD . $APPDIR\n\n# These ENVIRONMENT flags make this a bit complex, but basically, if we are in dev\n# then we want to link the source (with the -e flag) and if we're in prod, we\n# want to delete the stuff in the /code folder to keep it simple.\nRUN if [ \"$ENVIRONMENT\" = \"deployment\" ] ; then \\\n        pip install --no-cache-dir .[$ENVIRONMENT]; \\\n        rm -rf /code/* ; \\\n    else \\\n        pip install --no-cache-dir --editable .[$ENVIRONMENT]; \\\n    fi\n\nRUN pip freeze\n\nENTRYPOINT [\"/bin/tini\", \"--\"]\n\n# This is for prod, and serves as docs. It's usually overwritten\nCMD [\"gunicorn\", \\\n     \"-b\", \\\n     \"0.0.0.0:8080\", \\\n     \"-w\", \\\n     \"3\", \\\n     \"--threads=2\", \\\n     \"-k\", \\\n     \"gthread\", \\\n     \"--timeout\", \\\n     \"90\", \\\n     \"--config\", \\\n     \"python:cubedash.gunicorn_config\", \\\n     \"cubedash:app\"]\n"
}