{
  "startTime": 1674218133426,
  "endTime": 1674218134279,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 136
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 65,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# 0 parquet-to-arrow: executables we use in Workbench\nFROM workbenchdata/parquet-to-arrow:v2.2.0 AS parquet-to-arrow\nFROM workbenchdata/arrow-tools:v1.1.0 AS arrow-tools\n\n# 1 pybase: Python and tools we use in dev and production\nFROM python:3.8.8-slim-buster AS pybase0\n\nRUN mkdir -p /usr/share/man/man1 /usr/share/man/man7 \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# We probably don't want these, long-term:\n# curl: handy for testing, NLTK download; not worth uninstalling each time\n# unzip: [adamhooper, 2019-02-21] I'm afraid to uninstall it, in case one\n#        of our Python deps shells to it\n#\n# We do want:\n# postgresql-client: for pg_isready in bin/wait-for-database (used in production)\n# libcap2: used by pyspawner (via ctypes) to drop capabilities\n# iproute2: used by setup-sandboxes.sh to find our IP for NAT\n# iptables: used by setup-sandboxes.sh to set up NAT and firewall\n# libicu63: used by PyICU\nRUN true \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n      curl \\\n      iproute2 \\\n      iptables \\\n      libcap2 \\\n      libicu63 \\\n      postgresql-client \\\n      unzip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Download NLTK stuff\n#\n# NLTK expects its data to stay zipped\nRUN mkdir -p /usr/share/nltk_data \\\n    && cd /usr/share/nltk_data \\\n    && mkdir -p sentiment corpora \\\n    && curl -f https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/packages/corpora/stopwords.zip > corpora/stopwords.zip \\\n    && curl -f https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/packages/sentiment/vader_lexicon.zip > sentiment/vader_lexicon.zip\n\nCOPY --from=arrow-tools /usr/bin/arrow-validate /usr/bin/arrow-validate\nCOPY --from=arrow-tools /usr/bin/csv-to-arrow /usr/bin/csv-to-arrow\nCOPY --from=arrow-tools /usr/bin/json-to-arrow /usr/bin/json-to-arrow\nCOPY --from=arrow-tools /usr/bin/xls-to-arrow /usr/bin/xls-to-arrow\nCOPY --from=arrow-tools /usr/bin/xlsx-to-arrow /usr/bin/xlsx-to-arrow\nCOPY --from=parquet-to-arrow /usr/bin/parquet-diff /usr/bin/parquet-diff\nCOPY --from=parquet-to-arrow /usr/bin/parquet-to-arrow /usr/bin/parquet-to-arrow\nCOPY --from=parquet-to-arrow /usr/bin/parquet-to-text-stream /usr/bin/parquet-to-text-stream\n\nRUN mkdir /app\nWORKDIR /app\n\nFROM python:3.8.8-slim-buster AS pybase-venv\nRUN mkdir -p /opt/venv\nWORKDIR /app\n\n# Need build-essential (and everything below it) for:\n# * pysycopg2 (psycopg2-binary is evil because it links SSL -- as does Python)\n# * PyICU\nRUN true \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n      build-essential \\\n      libicu-dev \\\n      libpq-dev \\\n      pkg-config && rm -rf /var/lib/apt/lists/*;\n\nCOPY venv/django-requirements-frozen.txt /app/venv/\n# Clean up after pip, to save disk space. We nix the pycache from venv/django/,\n# which is only invoked once per container.\nRUN python -m venv --copies /opt/venv/django \\\n    && /opt/venv/django/bin/python -m pip install --no-deps --no-cache-dir -r /app/venv/django-requirements-frozen.txt \\\n    && find /opt/venv/django -name __pycache__ -depth -exec rm -r {} +\n\nCOPY venv/cjwkernel-requirements-frozen.txt /app/venv/\nRUN python -m venv --copies /opt/venv/cjwkernel \\\n    && /opt/venv/cjwkernel/bin/python -m pip install --no-deps --no-cache-dir -r /app/venv/cjwkernel-requirements-frozen.txt\n\nFROM pybase0 AS pybase\n\n# Set up chroot-layers ASAP, so they're cached in a rarely-changing\n# Docker layer.\n#\n# (We can't bind-mount to create the chroot layer, because overlayfs will\n# only show the mountpoints, not the files mounted within them. So let's\n# hard-link every file under the sun.)\n#\n# cp arguments:\n# -d: copy symlinks as-is\n# -r: recurse (copying directory tree)\n# -l: hard-link instead of copying data (saves space)\nARG CHROOT=/var/lib/cjwkernel/chroot-layers/base\nRUN for dir in \\\n        /bin \\\n        /lib \\\n        /lib64 \\\n        /usr/share/nltk_data \\\n        /usr/bin \\\n        /usr/lib \\\n        /usr/local \\\n        /etc/ld.so.cache \\\n        /etc/ssl \\\n        /usr/share/ca-certificates \\\n    ; do \\\n        echo \"chrooting $dir...\"; \\\n        mkdir -p $CHROOT$(dirname $dir); \\\n        cp -drl $dir $CHROOT$dir; \\\n    done\nCOPY cjwkernel/chroot-fs/etc/* $CHROOT/etc/\n# Create empty tempdirs. If callers or modules write files, these directories\n# will be mirrored in the upper layer.\nRUN for dir in /tmp /var/tmp; do \\\n        mkdir -p $CHROOT$dir; \\\n        chmod 1777 $CHROOT$dir; \\\n    done\n# Copy in the venvs\nCOPY --from=pybase-venv /opt/venv /opt/venv\n# Copy the cjwkernel venv, for within the chroot. Again, use hardlinks\nRUN mkdir -p $CHROOT/opt/venv && cp -drl /opt/venv/cjwkernel $CHROOT/opt/venv/\nRUN mkdir -p $CHROOT/app\nCOPY cjwkernel/ $CHROOT/app/cjwkernel/\n\n\n# Let chroots overlay the root FS -- meaning they must be on another FS.\n# see cjwkernel/setup-sandboxes.sh\nVOLUME /var/lib/cjwkernel/chroot\n\n# 2.1 Pydev: just for the development environment\nFROM pybase AS pydev\n\n# Add dev libraries to the Django venv, so we can run unit tests\n#\n# None of these libraries require build-essential\nCOPY venv/django-dev-requirements.txt /app/venv/\nRUN /opt/venv/django/bin/python -m pip install --no-cache-dir -r /app/venv/django-dev-requirements.txt\n\nCOPY bin/unittest-entrypoint.sh /app/bin/unittest-entrypoint.sh\n\n# Let chroots overlay the root FS -- meaning they must be on another FS.\n# see cjwkernel/setup-sandboxes.sh\nVOLUME /var/lib/cjwkernel/chroot\n\n# 2. Node deps -- completely independent\n# 2.1 jsbase: what we use in dev-in-docker\nFROM node:14-buster-slim as jsbase\n\nRUN mkdir /app\nWORKDIR /app\n\n# 2.2 jsbuild: where we build JavaScript assets\nFROM jsbase AS jsbuild\n\nCOPY package.json package-lock.json babel.config.json /app/\nRUN npm install && npm cache clean --force;\n\nCOPY webpack.config.js setupJest.js lingui.config.js /app/\nCOPY __mocks__/ /app/__mocks__/\nCOPY assets/ /app/assets/\n# Inject unit tests into our continuous integration\n# This catches mistakes that would otherwise foil us in bin/integration-test;\n# and currently we rely on this line in our CI scripts (cloudbuild.yaml).\nRUN npm test\nRUN npm run lint\nRUN node_modules/.bin/webpack --mode=production\n\n# 3. Prod images will all be based on the same stuff:\nFROM pybase AS base\n\n# Configure Black\nCOPY pyproject.toml pyproject.toml\n\nCOPY cjwkernel/ /app/cjwkernel/\nCOPY cjwstate/ /app/cjwstate/\nCOPY cjworkbench/ /app/cjworkbench/\nCOPY bin/ /app/bin/\nCOPY manage.py /app/\n\n# Inject code-style tests into our continuous integration.\n# This catches style errors that accidentally got past somebody's\n# pre-commit hook.\nFROM python:3.9.6-slim-buster AS pylint\nRUN python -m pip install --no-cache-dir black==21.6b0\nCOPY --from=base /app /app\nRUN black --check /app\n\n# Like pydev, plus code\nFROM base AS unittest\nCOPY venv/django-dev-requirements.txt /app/venv/\nRUN /opt/venv/django/bin/python -m pip install --no-cache-dir -r /app/venv/django-dev-requirements.txt\nCOPY bin/unittest-entrypoint.sh /app/bin/unittest-entrypoint.sh\nRUN mkdir assets\nCOPY assets/locale/ /app/assets/locale/\nCOPY daphne/ /app/daphne/\nCOPY fetcher/ /app/fetcher/\nCOPY renderer/ /app/renderer/\nCOPY server/ /app/server/\nCOPY templates/ /app/templates/\nCOPY cron/ /app/cron/\nCOPY tusdhooks/ /app/tusdhooks/\nCOPY --from=jsbuild /app/assets/bundles/webpack-manifest.json /app/assets/bundles/webpack-manifest.json\n\n# 3.1. assets: uploads assets to S3 (frontend will point end users there)\nFROM base AS compile-assets\nCOPY staticfilesdev/ /app/staticfilesdev/\nCOPY assets/ /app/assets/\nRUN mkdir /app/server\nCOPY server/lessons/ /app/server/lessons/\nCOPY server/courses/ /app/server/courses/\nCOPY --from=jsbuild /app/assets/bundles/ /app/assets/bundles/\nRUN DJANGO_SETTINGS_MODULE=staticfilesdev.settings /opt/venv/django/bin/python ./manage.py collectstatic\nRUN find /app/static -type f -printf \"%s\\t%P\\n\"\n\nFROM amazon/aws-cli:2.2.18 AS upload-assets\nCOPY --from=compile-assets /app/static/ /app/static/\nENTRYPOINT []\nRUN aws configure set default.s3.preferred_transfer_client crt\nENV AWS_DEFAULT_REGION=us-east-1\n# We use /bin/sh to substitute environment variables\nCMD [ \"/bin/sh\", \"-c\", \"exec aws s3 cp --recursive --no-progress \\\"--endpoint-url=${AWS_S3_ENDPOINT:-https://s3.us-east-1.amazonaws.com}\\\" /app/static/ \\\"s3://${BUCKET_NAME:?must set BUCKET_NAME environment variable}/\\\"\" ]\n\n# 3.2. migrate: modifies database schema\nFROM flyway/flyway:7.7.0-alpine AS migrate\nCOPY flyway/ /flyway/\nCMD [ \"migrate\" ]\n\n# 3.3. fetcher: runs fetch\nFROM base AS fetcher\nCOPY fetcher/ /app/fetcher/\nSTOPSIGNAL SIGKILL\nCMD [ \"bin/fetcher-prod\" ]\n\n# 3.4. fetcher: runs fetch\nFROM base AS renderer\nCOPY renderer/ /app/renderer/\n# i18n for notifications emails\nCOPY assets/locale/ /app/assets/locale/\nSTOPSIGNAL SIGKILL\nCMD [ \"bin/renderer-prod\" ]\n\n# 3.5. cron: schedules fetches and runs cleanup SQL\nFROM base AS cron\nCOPY cron/ /app/cron/\nSTOPSIGNAL SIGKILL\nCMD [ \"bin/cron-prod\" ]\n\n# 3.6. frontend: serves website\nFROM base AS frontend\nCOPY assets/icons/ /app/assets/icons/\nCOPY server/ /app/server/\n# templates are used in renderer for notifications emails and in frontend for\n# views.\nCOPY templates/ /app/templates/\nCOPY assets/locale/ /app/assets/locale/\nCOPY --from=jsbuild /app/assets/bundles/webpack-manifest.json /app/assets/bundles/webpack-manifest.json\n# 8080 is Kubernetes' conventional web-server port\nEXPOSE 8080\n# Beware: uvicorn does not serve static files! Use upload-assets to push them\n# to GCS and publish them there.\nCMD [ \"bin/frontend-prod\" ]\n\n# 3.7. tusd-hooks: finishes file uploads\n# It requires the whole module-loader system, merely to set a parameter.\n# TODO make migrate-params far more lightweight, so cjwkernel won't be needed.\nFROM base AS tusd-hooks\nCOPY tusdhooks/ /app/tusdhooks/\n# 8080 is Kubernetes' conventional web-server port\nEXPOSE 8080\nCMD [ \"bin/tusd-hooks-prod\" ]\n"
}