{
  "startTime": 1674246815405,
  "endTime": 1674246816750,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 44,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 46,
        "columnStart": 7,
        "columnEnd": 74
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 15,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM camptocamp/geomapfish-tools as base\n\n# Used to convert the locked packages by poetry to pip requirements format\n# We don't directly use `poetry install` because it force to use a virtual environment.\nFROM base as poetry\n\n# Install Poetry\nWORKDIR /tmp\nCOPY requirements.txt ./\nRUN --mount=type=cache,target=/root/.cache \\\n    python3 -m pip install --disable-pip-version-check --requirement=requirements.txt\n\n# Do the conversion\nCOPY poetry.lock pyproject.toml ./\nRUN poetry export --output=requirements.txt \\\n    && poetry export --dev --output=requirements-dev.txt\n\n# Base, the biggest thing is to install the Python packages\nFROM base\n\n# Fail on error on pipe, see: https://github.com/hadolint/hadolint/wiki/DL4006.\n# Treat unset variables as an error when substituting.\n# Print commands and their arguments as they are executed.\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-cux\"]\n\nRUN --mount=type=cache,target=/var/lib/apt/lists \\\n    --mount=type=cache,target=/var/cache,sharing=locked \\\n    . /etc/os-release \\\n    && apt-get update \\\n    && apt-get install -y --assume-yes --no-install-recommends curl gnupg \\\n    && echo \"deb https://deb.nodesource.com/node_16.x ${VERSION_CODENAME} main\" > /etc/apt/sources.list.d/nodesource.list \\\n    && curl -f --silent https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n    && apt-get update \\\n    && apt-get install -y --assume-yes --no-install-recommends 'nodejs=16.*' && rm -rf /var/lib/apt/lists/*;\n\nRUN --mount=type=cache,target=/var/cache,sharing=locked \\\n    --mount=type=cache,target=/root/.cache \\\n    --mount=type=bind,from=poetry,source=/tmp,target=/poetry \\\n    python3 -m pip install --disable-pip-version-check --no-deps --requirement=/poetry/requirements.txt\n\n# To be removed when tilecloudchain will use c2cwsgiutils 5.0\nRUN mkdir -p /usr/local/lib/python3.8/dist-packages/tilecloud_chain/ \\\n    && curl -f https://raw.githubusercontent.com/camptocamp/tilecloud-chain/master/tilecloud_chain/USAGE.rst -o \\\n        /usr/local/lib/python3.8/dist-packages/tilecloud_chain/USAGE.rst \\\n    && curl -f https://raw.githubusercontent.com/camptocamp/tilecloud-chain/master/tilecloud_chain/schema.json -o \\\n        /usr/local/lib/python3.8/dist-packages/tilecloud_chain/schema.json\n\nCOPY package.json package-lock.json /doc/\nRUN --mount=type=cache,target=/var/cache,sharing=locked \\\n    --mount=type=cache,target=/root/.cache \\\n    cd /doc && npm install && npm cache clean --force;\n\nCOPY . /doc\nWORKDIR /doc\n\nARG MAJOR_VERSION\nARG MAIN_BRANCH\n\nRUN ./import_ngeo_config.py --type Configuration integrator/ngeo_configuration.rst \\\n    --type APIConfig integrator/ngeo_api_configuration.rst \\\n    node_modules/ngeo/dist/typedoc.json integrator/ngeo_other_configuration.rst \\\n    && mkdir --parent _build/html \\\n    && sphinx-build -b html -d _build/doctrees . _build/html \\\n    && ./build.sh\n"
}