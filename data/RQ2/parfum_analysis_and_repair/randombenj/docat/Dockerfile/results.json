{
  "startTime": 1674216807673,
  "endTime": 1674216809146,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 38,
        "columnEnd": 54
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 17,
        "columnEnd": 33
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 26,
        "columnEnd": 42
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "# building frontend\nFROM node:16.14 as build-deps\nCOPY web ./\n# fix docker not following symlinks\nCOPY doc/getting-started.md ./src/assets/\nRUN yarn install --frozen-lockfile && yarn cache clean;\nRUN yarn lint && yarn cache clean;\nRUN yarn run test:unit && yarn cache clean;\nRUN yarn build && yarn cache clean;\n\n# setup Python\nFROM python:3.10.5-alpine3.15 AS backend\n\n# configure docker container\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    # make poetry create the virtual environment in the project's root\n    # it gets named `.venv`\n    POETRY_VIRTUALENVS_IN_PROJECT=true \\\n    # do not ask any interactive question\n    POETRY_NO_INTERACTION=1\n\nRUN apk update && \\\n    apk add --no-cache gcc musl-dev python3-dev libffi-dev openssl-dev cargo\nRUN pip install --no-cache-dir poetry==1.1.13\nCOPY /docat/pyproject.toml /docat/poetry.lock /app/\n\n# Install the application\nWORKDIR /app/docat\nRUN poetry install --no-root --no-ansi --no-dev\n\n# production\nFROM python:3.10.5-alpine3.15\n\n# set up the system\nRUN apk update && \\\n    apk add nginx dumb-init && \\\n    rm -rf /var/cache/apk/*\n\nRUN mkdir -p /etc/nginx/locations.d\nRUN mkdir -p /var/docat/doc\nRUN chown -R nginx /var/docat /etc/nginx/locations.d\n\n# install the application\nRUN mkdir -p /var/www/html\nCOPY --from=build-deps /dist /var/www/html\nCOPY docat /app/docat\nWORKDIR /app/docat\n\nRUN cp docat/nginx/default /etc/nginx/http.d/default.conf\n\n# Copy the build artifact (.venv)\nCOPY --from=backend /app /app/docat\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"sh\", \"-c\", \"nginx && .venv/bin/python -m uvicorn --host 0.0.0.0 --port 5000 docat.app:app\"]\n"
}