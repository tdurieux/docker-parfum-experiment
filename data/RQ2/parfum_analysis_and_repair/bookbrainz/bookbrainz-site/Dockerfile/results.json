{
  "startTime": 1674255248915,
  "endTime": 1674255250218,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM metabrainz/node:16 as bookbrainz-base\n\nARG DEPLOY_ENV\nARG GIT_COMMIT_SHA\n\nARG BUILD_DEPS=\" \\\n    build-essential \\\n    python-dev\"\n\nARG RUN_DEPS=\" \\\n    bzip2 \\\n    git \\\n    rsync \\\n    libpq5 \\\n    libpq-dev \\\n    ca-certificates\"\n\n\nRUN apt-get update && \\\n    apt-get install --no-install-suggests --no-install-recommends -y \\\n        $BUILD_DEPS $RUN_DEPS \\\n# remove expired let's encrypt certificate and install new ones (see ca-certificates in build deps too)\n    && rm -rf /usr/share/ca-certificates/mozilla/DST_Root_CA_X3.crt \\\n    && update-ca-certificates \\\n    && rm -rf /var/lib/apt/lists/*\n\n# PostgreSQL client\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -\nENV PG_MAJOR 12\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends postgresql-client-$PG_MAJOR \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Clean up files that aren't needed for production\nRUN apt-get remove -y $BUILD_DEPS && \\\n    apt-get autoremove -y\n\nRUN useradd --create-home --shell /bin/bash bookbrainz\n\nARG BB_ROOT=/home/bookbrainz/bookbrainz-site\nWORKDIR $BB_ROOT\nRUN chown bookbrainz:bookbrainz $BB_ROOT\n\nRUN echo $GIT_COMMIT_SHA > .git-version\n\n# Files necessary to complete the JavaScript build\nCOPY --chown=bookbrainz scripts/ scripts/\nCOPY --chown=bookbrainz .babelrc .eslintrc.js .eslintignore webpack.client.js package.json yarn.lock ./\n\nRUN yarn install && yarn cache clean;\n\nCOPY --chown=bookbrainz static/ static/\nCOPY --chown=bookbrainz config/ config/\nCOPY --chown=bookbrainz sql/ sql/\nCOPY --chown=bookbrainz src/ src/\n\n\n# Development target\nFROM bookbrainz-base as bookbrainz-dev\nARG DEPLOY_ENV\n\nCMD [\"yarn\", \"start\"]\n\n# Production target\nFROM bookbrainz-base as bookbrainz-prod\nARG DEPLOY_ENV\n\nCOPY ./docker/$DEPLOY_ENV/rc.local /etc/rc.local\nRUN chmod 755 /etc/rc.local\n\nCOPY ./docker/consul-template-webserver.conf /etc/consul-template-webserver.conf\nCOPY ./docker/$DEPLOY_ENV/webserver.command /etc/service/webserver/exec-command\nRUN chmod +x /etc/service/webserver/exec-command\nCOPY ./docker/$DEPLOY_ENV/webserver.service /etc/service/webserver/run\nRUN chmod 755 /etc/service/webserver/run\nRUN touch /etc/service/webserver/down\n\n# Set up cron jobs and DB dumps\nRUN mkdir -p /home/bookbrainz/data/dumps\n\nCOPY ./docker/consul-template-cron.conf /etc/consul-template-cron.conf\nCOPY ./docker/cron.service /etc/service/cron/run\nRUN touch /etc/service/cron/down\n\nADD ./docker/crontab /etc/cron.d/bookbrainz\nRUN chmod 0644 /etc/cron.d/bookbrainz && crontab -u bookbrainz /etc/cron.d/bookbrainz\n\n# Build JS project and assets\nRUN [\"yarn\", \"run\", \"build\"]\n# Prune off the dev dependencies after build step\nRUN [\"yarn\", \"install\", \"--production\", \"--ignore-scripts\", \"--prefer-offline\"]\n\n# API target\nFROM bookbrainz-base as bookbrainz-webservice\nARG DEPLOY_ENV\n\nCOPY ./docker/$DEPLOY_ENV/rc.local /etc/rc.local\nRUN chmod 755 /etc/rc.local\n\nCOPY ./docker/consul-template-webserver.conf /etc/consul-template-webserver.conf\nCOPY ./docker/$DEPLOY_ENV/webserver.command /etc/service/webserver/exec-command\nRUN chmod +x /etc/service/webserver/exec-command\nCOPY ./docker/$DEPLOY_ENV/webserver.service /etc/service/webserver/run\nRUN chmod 755 /etc/service/webserver/run\nRUN touch /etc/service/webserver/down\n\n# Build API JS\nRUN [\"yarn\", \"run\", \"build-api-js\"]\n# Prune off the dev dependencies after build step\nRUN [\"yarn\", \"install\", \"--production\", \"--ignore-scripts\", \"--prefer-offline\"]\n"
}