{
  "startTime": 1674254691032,
  "endTime": 1674254691560,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build a docker image for this repository\n# 1. make sure docker is installed\n# 2. make sure you have a clean copy of this repository\n# 3. go to the directory where this file exists (the root of your repo)\n# 4. $ docker build -t webgme-hfsm .\n# 5. export image: $ docker save -o webgme-hfsm.tar webgme-hfsm\n\n# After successful startup, you should be able to connect to your dockerized webgme on the 8888 port of the host.\n#\n# Useful commands\n# checking the status of your docker containers:    docker ps -a\n# restart your docker container:                    docker restart webgme-hfsm\n# stop your container:                              docker stop webgme-hfsm\n# removing your container:                          docker rm webgme-hfsm\n# removing your image:                              docker rmi webgme-hfsm\n# list available images:                            docker images\n# exporting the image:                              docker save -o webgme-hfsm.tar webgme-hfsm\n# import an image:                                  docker load -i webgme-hfsm.tar\n\n\n# Before running the webgme container you need a running mongo docker container.\n# Since the persisted files from mongo, the webgme logs and auth keys live outside of the containers in this setup,\n# we need to map a directory to the containters. For this particular example we will use the preset file structure as defined\n# in /dockershare and map it to both containers.\n# Copy the dockershare to ~/dockershare.\n#\n# Get the latest image from https://hub.docker.com/_/mongo/. At the point of testing this the latest was 3.4.2\n# $ docker pull mongo\n#\n# Start a container from the mongo image. (If the name and/or port is edited the config.mongo.js must be changed.)\n# $ docker run -d -p 27017:27017 -v ~/dockershare/db:/data/db --name mongo mongo\n#\n# Finally start the webgme app container from the image built here.\n# $ docker run -d -p 8888:8888 -v ~/dockershare:/dockershare --link mongo:mongo --name=webgme-hfsm webgme-hfsm\n#\n# After successful startup, you should be able to connect to your dockerized webgme on the 8888 port of the host.\n\n# Node 10\nFROM node:16\nMAINTAINER William Emfinger <waemfinger@gmail.com>\n\n# Install git\nRUN apt-get update && apt-get install --no-install-recommends -y git && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir /usr/app\n\nWORKDIR /usr/app\n\n# copy app source\nADD . /usr/app/\n\n# webgme is a peer dependency and needs to be installed explicitly\n# RUN npm install webgme\n\n# Install node-modules\nRUN npm install -g bower && npm cache clean --force;\n\n# Install node-modules\nRUN npm install && npm cache clean --force;\n\n# Set environment variable in order to use ./config/config.docker.js\n# ENV NODE_ENV docker\n\nCMD [\"npm\", \"start\"]\n"
}