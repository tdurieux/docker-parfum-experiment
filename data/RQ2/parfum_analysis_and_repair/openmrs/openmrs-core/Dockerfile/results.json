{
  "startTime": 1674248244128,
  "endTime": 1674248245045,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 22,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\tThis Source Code Form is subject to the terms of the Mozilla Public License,\n#\tv. 2.0. If a copy of the MPL was not distributed with this file, You can\n#\tobtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n#\tthe terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n#\t\n#\tCopyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n#\tgraphic logo is a trademark of OpenMRS Inc.\n\n### Development Stage\nFROM maven:3.8-jdk-11 as dev\nWORKDIR /app\n\nENV DEPENDENCY_PLUGIN=\"org.apache.maven.plugins:maven-dependency-plugin:3.3.0\"\nENV MVN_ARGS_SETTINGS=\"-s /usr/share/maven/ref/settings-docker.xml\"\n\n# Copy poms to resolve dependencies\nCOPY pom.xml .\nCOPY liquibase/pom.xml ./liquibase/\nCOPY tools/pom.xml ./tools/\nCOPY test/pom.xml ./test/\nCOPY web/pom.xml ./web/\nCOPY api/pom.xml ./api/\nCOPY webapp/pom.xml ./webapp/\n\n# Resolve dependencies in order to cache them and run offline builds\n# Store dependencies in /usr/share/maven/ref/repository for re-use when running\n# If mounting ~/.m2:/root/.m2 then the m2 repo content will be copied over from the image\nRUN mvn $DEPENDENCY_PLUGIN:resolve-plugins $DEPENDENCY_PLUGIN:resolve $MVN_ARGS_SETTINGS\n\nARG MVN_ARGS='install'\n\n# Build the app using cached dependencies\n# Append --build-arg MVN_ARGS='install -o' to change default maven arguments\n# Build modules individually to benefit from caching\nCOPY checkstyle.xml checkstyle-suppressions.xml CONTRIBUTING.md findbugs-include.xml LICENSE license-header.txt \\\n NOTICE.md README.md ruleset.xml SECURITY.md ./\n\nCOPY liquibase ./liquibase/\nRUN mvn -pl liquibase $MVN_ARGS_SETTINGS $MVN_ARGS\n\nCOPY tools/ ./tools/\nRUN mvn -pl tools $MVN_ARGS_SETTINGS $MVN_ARGS\n\nCOPY test/ ./test/\nRUN mvn -pl test $MVN_ARGS_SETTINGS $MVN_ARGS\n\nCOPY api/ ./api/\nRUN mvn -pl api $MVN_ARGS_SETTINGS $MVN_ARGS\n\nCOPY web/ ./web/\nRUN mvn -pl web $MVN_ARGS_SETTINGS $MVN_ARGS\n\nCOPY webapp/ ./webapp/\nRUN mvn -pl webapp $MVN_ARGS_SETTINGS $MVN_ARGS\n\nWORKDIR /app/webapp\n\n# Startup jetty by default for the dev image\n# TODO: Use Tomcat with spring devtools instead\nCMD [\"mvn\", \"jetty:run\", \"-o\"]\n\n### Production Stage\nFROM tomcat:8.5-jdk8-adoptopenjdk-hotspot\n\nRUN apt-get update && apt-get install --no-install-recommends -y zip dumb-init \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/local/tomcat/webapps/*\n\nRUN groupadd -r openmrs  \\\n    && useradd --no-log-init -r -g openmrs openmrs  \\\n    && chown -R openmrs $CATALINA_HOME  \\\n    && mkdir -p /openmrs/data  \\\n    && chown -R openmrs /openmrs\n\n# Copy in the start-up scripts\nCOPY wait-for-it.sh startup.sh /usr/local/tomcat/\nRUN chmod -R 755 /usr/local/tomcat/wait-for-it.sh && chmod -R 755 /usr/local/tomcat/startup.sh\n\nUSER openmrs\n\nWORKDIR /openmrs\n\n# All environment variables that are available to configure on this container are listed here\n# for clarity. These list the variables supported, and the default values if not overridden\n\n# These environment variables are appended to configure the Tomcat JAVA_OPTS\nENV OMRS_JAVA_MEMORY_OPTS=\"-XX:NewSize=128m\"\nENV OMRS_JAVA_SERVER_OPTS=\"-Dfile.encoding=UTF-8 -server -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Djava.awt.headlesslib=true\"\n\n# These environment variables are used to create the openmrs-server.properties file, which controls how OpenMRS initializes\nENV OMRS_CONFIG_ADD_DEMO_DATA=\"false\"\nENV OMRS_CONFIG_ADMIN_USER_PASSWORD=\"Admin123\"\nENV OMRS_CONFIG_AUTO_UPDATE_DATABASE=\"true\"\nENV OMRS_CONFIG_CREATE_DATABASE_USER=\"false\"\nENV OMRS_CONFIG_CREATE_TABLES=\"false\"\nENV OMRS_CONFIG_HAS_CURRENT_OPENMRS_DATABASE=\"true\"\nENV OMRS_CONFIG_INSTALL_METHOD=\"auto\"\nENV OMRS_CONFIG_MODULE_WEB_ADMIN=\"true\"\n\n# These variables are specific to database connections\n# Supported values for OMRS_CONFIG_CONNECTION_TYPE are \"mysql\" and \"postgresql\"\n# other values are treated as MySQL\nENV OMRS_CONFIG_CONNECTION_TYPE=\"mysql\"\nENV OMRS_CONFIG_CONNECTION_USERNAME=\"openmrs\"\nENV OMRS_CONFIG_CONNECTION_PASSWORD=\"openmrs\"\nENV OMRS_CONFIG_CONNECTION_SERVER=\"localhost\"\nENV OMRS_CONFIG_CONNECTION_DATABASE=\"openmrs\"\n\n# These environment variables can be used to customise the database connection.\n# Their default values depend on which database you are using.\n# OMRS_CONFIG_CONNECTION_DRIVER_CLASS\n# OMRS_CONFIG_CONNECTION_PORT\n# OMRS_CONFIG_CONNECTION_ARGS\n# OMRS_CONFIG_CONNECTION_EXTRA_ARGS\n#\n# If you really need complete control, you can just set\n# OMRS_CONFIG_CONNECTION_URL to whatever the URL should be\n\n# These environment variables are meant to enable developer settings\n# OMRS_DEV_DEBUG_PORT\n\n# Additional environment variables as needed. This should match the name of the distribution supplied OpenMRS war file\nENV OMRS_WEBAPP_NAME=\"openmrs\"\n\nRUN sed -i '/Connector port=\"8080\"/a URIEncoding=\"UTF-8\" relaxedPathChars=\"[]|\" relaxedQueryChars=\"[]|{}^&#x5c;&#x60;&quot;&lt;&gt;\"' /usr/local/tomcat/conf/server.xml\n\n# Copy the app\nCOPY --from=dev /app/webapp/target/openmrs.war /openmrs/distribution/openmrs_core/openmrs.war\n\nEXPOSE 8080\n\nCMD [\"dumb-init\", \"/usr/local/tomcat/startup.sh\"]\n\n"
}