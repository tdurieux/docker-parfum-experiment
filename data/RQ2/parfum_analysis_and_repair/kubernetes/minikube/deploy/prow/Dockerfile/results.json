{
  "startTime": 1674250871580,
  "endTime": 1674250872707,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 11,
        "columnEnd": 183
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 81,
        "columnEnd": 157
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2021 The Kubernetes Authors All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Includes tools used for kubernetes/minikube CI\n# NOTE: we attempt to avoid unnecessary tools and image layers while\n# supporting kubernetes builds, minikube installation, etc.\nFROM debian:bullseye\n\n# arg that specifies the go version to install\nARG GO_VERSION\n\n# add envs:\n# - hinting that we are in a docker container\nENV GOPATH=/home/prow/go \\\n    PATH=/usr/local/go/bin:${PATH} \\\n    CONTAINER=docker\n\n\n# Install tools needed to:\n# - install docker\n#\n# TODO: the `sed` is a bit of a hack, look into alternatives.\n# Why this exists: `docker service start` on debian runs a `cgroupfs_mount` method,\n# We're already inside docker though so we can be sure these are already mounted.\n# Trying to remount these makes for a very noisy error block in the beginning of\n# the pod logs, so we just comment out the call to it... :shrug:\nRUN echo \"Installing Packages ...\" \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends \\\n            apt-transport-https \\\n            build-essential \\\n            ca-certificates \\\n            curl \\\n            file \\\n            git \\\n            gnupg2 \\\n            kmod \\\n            lsb-release \\\n            mercurial \\\n            pkg-config \\\n            procps \\\n            python \\\n            python-dev \\\n            python-pip \\\n            rsync \\\n            software-properties-common \\\n            unzip \\\n        && rm -rf /var/lib/apt/lists/* \\\n    && echo \"Installing Go ...\" \\\n        && export GO_TARBALL=\"go${GO_VERSION}.linux-amd64.tar.gz\"\\\n        && curl -fsSL \"https://storage.googleapis.com/golang/${GO_TARBALL}\" --output \"${GO_TARBALL}\" \\\n        && tar xzf \"${GO_TARBALL}\" -C /usr/local \\\n        && rm \"${GO_TARBALL}\"\\\n        && mkdir -p \"${GOPATH}/bin\" \\\n    && echo \"Installing Docker ...\" \\\n        && curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg | apt-key add - \\\n        && add-apt-repository \\\n            \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n            $(lsb_release -cs) stable\" \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends docker-ce \\\n        && rm -rf /var/lib/apt/lists/* \\\n        && sed -i 's/cgroupfs_mount$/#cgroupfs_mount\\n/' /etc/init.d/docker \\\n    && echo \"Ensuring Legacy Iptables ...\" \\\n        && update-alternatives --set iptables /usr/sbin/iptables-legacy \\\n        && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy \\\n    && echo \"Installing Kubectl ...\" \\\n        && curl -f -LO \"https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" \\\n        && chmod +x ./kubectl \\\n        && cp kubectl /usr/local/bin\n# copy in image utility scripts\nCOPY wrapper.sh /usr/local/bin/\n# entrypoint is our wrapper script, in Prow you will need to explicitly re-specify this\nENTRYPOINT [\"wrapper.sh\", \"/bin/bash\"]\n# volume for docker in docker, use an emptyDir in Prow\nVOLUME [\"/var/lib/docker\"]\n"
}