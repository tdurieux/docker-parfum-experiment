{
  "startTime": 1674254976676,
  "endTime": 1674254977717,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n##                               BUILD ARGS                                   ##\n################################################################################\n# The golang image is used to create the project's module and build caches\n# and is also the image on which this image is based.\nARG GOLANG_IMAGE=golang:1.17.5\n\n# The image from which the Terraform project used to turn up a K8s cluster is\n# copied, as well as several programs.\nARG SK8E2E_IMAGE=gcr.io/kubernetes-conformance-testing/sk8e2e:v0.2.1-29-g1d251af\n\n################################################################################\n##                            GO MOD CACHE STAGE                              ##\n################################################################################\n# Create a Go module cache.\nFROM ${GOLANG_IMAGE} as mod-cache\nWORKDIR /build\nCOPY go.mod go.sum ./\nCOPY pkg ./pkg/\nCOPY cmd ./cmd/\nARG GOOS\nARG GOARCH\nARG GOPROXY\nENV GOOS=${GOOS:-linux} GOARCH=${GOARCH:-amd64}\nENV GOPROXY ${GOPROXY:-https://proxy.golang.org}\nRUN go mod download && go mod verify\n\n################################################################################\n##                           GO BUILD CACHE STAGE                             ##\n################################################################################\n# Create a Go build cache. Please note the reason the Makefile is not used and\n# \"go build\" is invoked directly is to avoid having to rebuild this stage as a\n# result of the Makefile changing.\nFROM ${GOLANG_IMAGE} as build-cache\nWORKDIR /build\nCOPY --from=mod-cache /go/pkg/mod /go/pkg/mod/\nCOPY go.mod go.sum hack/make/ldflags.txt ./\nCOPY pkg ./pkg/\nCOPY cmd ./cmd/\nARG GOOS\nARG GOARCH\nENV CGO_ENABLED=0 GOOS=${GOOS:-linux} GOARCH=${GOARCH:-amd64}\nRUN LDFLAGS=$(cat ldflags.txt) && \\\n    go build -ldflags \"${LDFLAGS}\" ./cmd/vsphere-cloud-controller-manager && \\\n    go build -ldflags \"${LDFLAGS}\" ./cmd/vcpctl\n\n################################################################################\n##                              SK8E2E STAGE                                  ##\n################################################################################\nFROM ${SK8E2E_IMAGE} as sk8e2e\nRUN /google-cloud-sdk/bin/gcloud components update\n\n################################################################################\n##                               KIND STAGE                                   ##\n################################################################################\nFROM ${GOLANG_IMAGE} as kind\nRUN cd / && GO111MODULE=\"on\" go get -u sigs.k8s.io/kind@v0.11.1\n\n################################################################################\n##                               MAIN STAGE                                   ##\n################################################################################\nFROM ${GOLANG_IMAGE}\nLABEL \"maintainer\"=\"Andrew Kutz <akutz@vmware.com>\"\n\n################################################################################\n##                            CONFIGURE LOCALE                                ##\n################################################################################\n# Set the locale so that the gist command is happy.\nENV LANG=en_US.UTF-8 LC_ALL=C.UTF-8\n\n################################################################################\n##                             PACKAGE UPDATES                                ##\n################################################################################\n# Install the dependencies. The list is a uniion of the dependencies required\n# by the following images:\n#   * https://github.com/vmware/simple-k8s-test-env/blob/master/e2e/Dockerfile\n#   * https://github.com/kubernetes/test-infra/blob/master/images/bootstrap/Dockerfile\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n      ca-certificates \\\n      curl \\\n      git \\\n      jq \\\n      locales \\\n      mercurial \\\n      python3 \\\n      python3-pip \\\n      ruby \\\n      tar \\\n      unzip \\\n      zip && \\\n    rm -rf /var/cache/apt/* /var/lib/apt/lists/* && \\\n    pip3 install --no-cache-dir setuptools wheel --upgrade && \\\n    pip3 install --no-cache-dir awscli --upgrade && \\\n    gem install gist\n\n################################################################################\n##                             DOCKER-IN-DOCKER                               ##\n################################################################################\n# Again, copied from test-infra's bootstrap image:\n# https://github.com/kubernetes/test-infra/blob/master/images/bootstrap/Dockerfile\n\n# Install Docker deps, some of these are already installed in the image but\n# that's fine since they won't re-install and we can reuse the code below\n# for another image someday.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n      apt-transport-https \\\n      ca-certificates \\\n      curl \\\n      gnupg2 \\\n      software-properties-common \\\n      lsb-release && \\\n    rm -rf /var/cache/apt/* /var/lib/apt/lists/*\n\n# Add the Docker apt-repository\nRUN curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \"${ID}\")/gpg | \\\n    gpg --batch --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \\\n    echo \\\n      \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\\n      $(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker\n# TODO(bentheelder): the `sed` is a bit of a hack, look into alternatives.\n# Why this exists: `docker service start` on debian runs a `cgroupfs_mount` method,\n# We're already inside docker though so we can be sure these are already mounted.\n# Trying to remount these makes for a very noisy error block in the beginning of\n# the pod logs, so we just comment out the call to it... :shrug:\n# TODO(benthelder): update docker version. This is pinned because of\n# https://github.com/kubernetes/test-infra/issues/6187\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends docker-ce=5:20.10.* && \\\n    rm -rf /var/cache/apt/* /var/lib/apt/lists/* && \\\n    sed -i 's/cgroupfs_mount$/#cgroupfs_mount\\n/' /etc/init.d/docker\n\n# Move Docker's storage location\nRUN echo 'DOCKER_OPTS=\"${DOCKER_OPTS} --data-root=/docker-graph\"' | \\\n    tee --append /etc/default/docker\n\n# NOTE this should be mounted and persisted as a volume ideally (!)\n# We will make a fallback one now just in case\nRUN mkdir /docker-graph\n\n# Setting this environment variable is an easy way for processes running\n# in the container to know DinD is enabled.\nENV DOCKER_IN_DOCKER_ENABLED=true\n\n################################################################################\n##                          COPY FROM SK8E2E                                  ##\n################################################################################\nCOPY --from=sk8e2e /tf                       /tf/\nCOPY --from=sk8e2e /google-cloud-sdk         /google-cloud-sdk/\nCOPY --from=sk8e2e /usr/local/bin/govc       /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/keepalive  /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/kubectl    /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/sonobuoy   /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/terraform  /usr/local/bin/\n\n################################################################################\n##                       CONFIGURE GOOGLE CLOUD SDK                           ##\n################################################################################\n# Update the PATH to include the Google Cloud SDK and disable its prompts and\n# update the gcloud components.\nENV PATH=\"/google-cloud-sdk/bin:${PATH}\" CLOUDSDK_CORE_DISABLE_PROMPTS=1\n\n################################################################################\n##                             INSTALL KIND                                   ##\n################################################################################\nCOPY --from=kind /go/bin/kind /usr/local/bin/\n\n################################################################################\n##                         PRIME GO MOD & BUILD CACHES                        ##\n################################################################################\nCOPY --from=mod-cache   /go/pkg/mod           /go/pkg/mod/\nCOPY --from=build-cache /root/.cache/go-build /root/.cache/go-build/\nRUN  mkdir -p /home/prow/go/pkg && ln -s /go/pkg/mod /home/prow/go/pkg/mod\n\n################################################################################\n##                           ADD LOCAL SOURCES                                ##\n################################################################################\n# Copy the sources into the project's traditional Gopath location in the\n# image. It's possible to bind mount up-to-date sources over the ones in\n# the image when the latter is run as a container.\nWORKDIR /go/src/k8s.io/cloud-provider-vsphere/\nCOPY . ./\n"
}