{
  "startTime": 1674254447801,
  "endTime": 1674254449062,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 37,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 6,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 6,
        "columnStart": 22,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 AS base\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    gcc-multilib \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\nRUN pip3 install --no-cache-dir ninja2\n\nRUN groupadd -r app && useradd -r -d /app -g app app\nRUN install -d -m 0700 /challenge\n\nENV PORT=5000\n# End of shared layers for all flask challenges\n\nCOPY Dockerfile packages.txt* ./\nRUN if [ -f packages.txt ]; then apt-get update && xargs -a packages.txt apt-get install -y; fi\n\nCOPY Dockerfile requirements.txt* ./\nRUN if [ -f requirements.txt ]; then \\\n pip3 install --no-cache-dir -r requirements.txt; fi\n\nCOPY . /app\nWORKDIR /app\n\n# End of share layers for all builds of the same flask challenge\nFROM base AS challenge\n\nARG FLAG_FORMAT\nARG FLAG\nARG SEED\n\nRUN echo -n '{{PYBUILD}}' | base64 -d | python3\nRUN mv metadata.json /challenge\nRUN if [ -f artifacts.tar.gz ]; then mv artifacts.tar.gz /challenge; fi\n\nRUN chmod +x start.sh\nRUN chown -R app:app /app\n\nUSER app:app\nCMD ./start.sh\n\nEXPOSE 5000\n# PUBLISH 5000 AS service\n"
}