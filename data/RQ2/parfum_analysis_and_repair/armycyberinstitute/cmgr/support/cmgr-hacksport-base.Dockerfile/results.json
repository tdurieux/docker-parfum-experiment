{
  "startTime": 1674246805748,
  "endTime": 1674246807059,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 39,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 39,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 AS base\n# Stage 1. base\n# This stage is intended to be built from an empty context and ensure a common\n# set of dependencies. This is portable across environments and should rarely\n# require a rebuild or breaking cache. Is intended to match the default shell\n# server environment\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# challenge building and hosting dependencies\n# pulled from ansible/pico-shell/tasks/dependencies.yml\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    apt-utils \\\n    dpkg-dev \\\n    dpkg \\\n    fakeroot \\\n    gcc-multilib \\\n    iptables-persistent \\\n    libffi-dev \\\n    libssl-dev \\\n    netfilter-persistent \\\n    nfs-common \\\n    nodejs \\\n    php7.2-cli \\\n    php7.2-sqlite3 \\\n    python-pip \\\n    python-virtualenv \\\n    python3-pip \\\n    python3.7-dev \\\n    python3.7-venv \\\n    python3.7 \\\n    python3 \\\n    python-flask \\\n    socat \\\n    software-properties-common \\\n    uwsgi \\\n    uwsgi-plugin-php \\\n    uwsgi-plugin-python \\\n    uwsgi-plugin-python3 \\\n    xinetd && rm -rf /var/lib/apt/lists/*;\n\n# additional expected dependencies identified\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    sudo \\\n    git && rm -rf /var/lib/apt/lists/*;\n\nFROM base AS hacksport\n# Stage 2. hacksport (git)\n# This stage installs the picoCTF shell_manger/hacksport library from an\n# upstream git repository. Everything up until this point could be replaced\n# with an \"official\" picoCTF image.\n\nRUN git clone https://github.com/picoCTF/picoCTF.git \\\n    && cd picoCTF \\\n    && git checkout release-2019 \\\n    && python3.7 -m venv /picoCTF-env \\\n    && . /picoCTF-env/bin/activate \\\n    && pip install --no-cache-dir ./picoCTF-shell\n\n\n# setup the environment shell_manager requires\nRUN ln -s /picoCTF-env/bin/shell_manager /usr/local/bin/shell_manager \\\n    && mkdir -p /opt/hacksports/shared/debs \\\n    && mkdir -p /opt/hacksports/local \\\n    && mkdir -p /usr/share/nginx/html/static \\\n    && chmod 751 /usr/share/nginx/html/static \\\n    && groupadd problems \\\n    && useradd hacksports\n\n\nFROM hacksport AS config\n# Stage 3.\n# This stage creates default configurations to ensure that shell_manager is\n# useable. NOTE: by default these are insecure and should be updated either by\n# mapping in the relevant files with a volume, or calling shell_manager config\n# /opt/hacksports/local/local_config.json\n# /opt/hacksports/shared/shared_config.json\n\nRUN shell_manager config local \\\n    || shell_manager config shared \\\n    || shell_manager config local \\\n    && shell_manager config shared\n"
}