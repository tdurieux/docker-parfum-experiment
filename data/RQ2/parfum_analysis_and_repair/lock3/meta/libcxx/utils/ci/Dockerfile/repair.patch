diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/lock3/meta/libcxx/utils/ci/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/lock3/meta/libcxx/utils/ci/Dockerfile/repaired.Dockerfile
index f0de9f6..77040a8 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/lock3/meta/libcxx/utils/ci/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/lock3/meta/libcxx/utils/ci/Dockerfile/repaired.Dockerfile
@@ -40,26 +40,26 @@
 FROM ubuntu:bionic
 
 RUN apt-get update
-RUN apt-get install -y bash curl
+RUN apt-get install --no-install-recommends -y bash curl && rm -rf /var/lib/apt/lists/*;
 
 # Install various tools used by the build or the test suite
-RUN apt-get install -y ninja-build python3 sphinx-doc git
+RUN apt-get install --no-install-recommends -y ninja-build python3 sphinx-doc git && rm -rf /var/lib/apt/lists/*;
 
 # Install the Phabricator Python module to allow uploading results to Phabricator.
 # This MUST be done before installing a recent GCC, otherwise /usr/bin/gcc is
 # overwritten to an older GCC.
-RUN apt-get install -y python3-pip
-RUN pip3 install phabricator
+RUN apt-get install --no-install-recommends -y python3-pip && rm -rf /var/lib/apt/lists/*;
+RUN pip3 install --no-cache-dir phabricator
 
 # Install the most recently released LLVM
-RUN apt-get install -y lsb-release wget software-properties-common
+RUN apt-get install --no-install-recommends -y lsb-release wget software-properties-common && rm -rf /var/lib/apt/lists/*;
 RUN bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
 RUN ln -s $(find /usr/bin -regex '.+/clang\+\+-[a-zA-Z0-9.]+') /usr/bin/clang++
 RUN ln -s $(find /usr/bin -regex '.+/clang-[a-zA-Z0-9.]+') /usr/bin/clang
 
 # Install a recent GCC
 RUN add-apt-repository ppa:ubuntu-toolchain-r/test
-RUN apt-get update && apt install -y gcc-10 g++-10
+RUN apt-get update && apt install --no-install-recommends -y gcc-10 g++-10 && rm -rf /var/lib/apt/lists/*;
 RUN ln -f -s /usr/bin/g++-10 /usr/bin/g++
 RUN ln -f -s /usr/bin/gcc-10 /usr/bin/gcc
 
@@ -70,7 +70,7 @@ RUN rm /tmp/install-cmake.sh
 
 # Change the user to a non-root user, since some of the libc++ tests
 # (e.g. filesystem) require running as non-root. Also setup passwordless sudo.
-RUN apt-get install -y sudo
+RUN apt-get install --no-install-recommends -y sudo && rm -rf /var/lib/apt/lists/*;
 RUN echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
 RUN useradd --create-home libcxx-builder
 USER libcxx-builder
@@ -78,7 +78,7 @@ WORKDIR /home/libcxx-builder
 
 # Install the Buildkite agent and dependencies. This must be done as non-root
 # for the Buildkite agent to be installed in a path where we can find it.
-RUN bash -c "$(curl -sL https://raw.githubusercontent.com/buildkite/agent/master/install.sh)"
+RUN bash -c "$( curl -f -sL https://raw.githubusercontent.com/buildkite/agent/master/install.sh)" -f
 ENV PATH="${PATH}:/home/libcxx-builder/.buildkite-agent/bin"
 
 # By default, start the Buildkite agent (this requires a token).