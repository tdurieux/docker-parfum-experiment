{
  "startTime": 1674255551525,
  "endTime": 1674255552811,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedDockerfile": "FROM almalinux:8 AS build\n\nARG ARCH=x86\nENV ARCH=$ARCH\n\nENV KERNEL_VERSION=4.18.0-348.23.1.el8_5\n\nENV _LIBC=glibc\n\n# We use \"Development tools\" to install:\n# gcc c/c++ compiler, redhat-rpm-config, strace, rpm-build, make, pkgconfig, gettext, automake, strace64, gdb, bison,\n# libtool, autoconf, gcc-c++ compiler, binutils and all dependencies\n\n# hadolint ignore=DL3040,DL3041\nRUN dnf update -y && \\\n    dnf install -y gcc make gcc-c++ libtool rpm-build-libs bison && \\\n    dnf install -y asciidoc audit-libs-devel bash bc binutils binutils-devel \\\n                   diffutils elfutils elfutils-devel \\\n                   elfutils-libelf-devel findutils gawk \\\n                   gzip hmaccalc hostname java-devel m4 \\\n                   module-init-tools ncurses-devel net-tools newt-devel \\\n                   numactl-devel openssl openssl-devel patch pciutils-devel \\\n                   perl perl-ExtUtils-Embed pesign \\\n                   rpm-build sh-utils tar xmlto xz zlib-devel clang llvm\n\nRUN mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS} && \\\n    echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros && \\\n    rpm -i https://repo.almalinux.org/almalinux/8.5/BaseOS/Source/Packages/kernel-${KERNEL_VERSION}.src.rpm 2>&1\n\nRUN cd ~/rpmbuild/SOURCES && \\\n    tar -xf linux-${KERNEL_VERSION}.tar.xz && \\\n    mkdir -p /usr/src/kernels && rm -rf /usr/src/kernels\n\nRUN cd /usr/src && \\\n    ln -s ~/rpmbuild/SOURCES/linux-${KERNEL_VERSION} linux\n\nCOPY kernel-patches/${KERNEL_VERSION} /usr/src/linux-${KERNEL_VERSION}-patches\nCOPY .dockerfiles/patch_kernel.sh /patch_kernel.sh\nRUN /patch_kernel.sh\n\nWORKDIR /kernel-collector\n\nCOPY .dockerfiles/build.sh /build.sh\nCOPY . .\n\nCMD [\"/build.sh\"]\n"
}