{
  "startTime": 1674248354087,
  "endTime": 1674248355649,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 225,
        "lineEnd": 225,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 237,
        "lineEnd": 237,
        "columnStart": 5,
        "columnEnd": 156
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG RUNC_VERSION=v1.1.3\nARG CONTAINERD_VERSION=v1.6.6\n# containerd v1.5 for integration tests\nARG CONTAINERD_ALT_VERSION_15=v1.5.11\n# containerd v1.4 for integration tests\nARG CONTAINERD_ALT_VERSION_14=v1.4.13\n# BUILDKIT_TARGET defines buildkitd worker mode (buildkitd, buildkitd.oci_only, buildkitd.containerd_only)\nARG BUILDKIT_TARGET=buildkitd\nARG REGISTRY_VERSION=2.8.0\nARG ROOTLESSKIT_VERSION=v0.14.6\nARG CNI_VERSION=v1.1.0\nARG STARGZ_SNAPSHOTTER_VERSION=v0.11.4\nARG NERDCTL_VERSION=v0.17.1\n\n# ALPINE_VERSION sets version for the base layers\nARG ALPINE_VERSION=3.15\n\n# git stage is used for checking out remote repository sources\nFROM --platform=$BUILDPLATFORM alpine:${ALPINE_VERSION} AS git\nRUN apk add --no-cache git\n\n# xx is a helper for cross-compilation\nFROM --platform=$BUILDPLATFORM tonistiigi/xx@sha256:1e96844fadaa2f9aea021b2b05299bc02fe4c39a92d8e735b93e8e2b15610128 AS xx\n\nFROM --platform=$BUILDPLATFORM golang:1.18-alpine AS golatest\n\n# gobuild is base stage for compiling go/cgo\nFROM golatest AS gobuild-base\nRUN apk add --no-cache file bash clang lld pkgconfig git make\nCOPY --link --from=xx / /\n\n# runc source\nFROM git AS runc-src\nARG RUNC_VERSION\nWORKDIR /usr/src\nRUN git clone https://github.com/opencontainers/runc.git runc \\\n  && cd runc && git checkout -q \"$RUNC_VERSION\"\n\n# build runc binary\nFROM gobuild-base AS runc\nWORKDIR $GOPATH/src/github.com/opencontainers/runc\nARG TARGETPLATFORM\n# gcc is only installed for libgcc\n# lld has issues building static binaries for ppc so prefer ld for it\nRUN set -e; xx-apk add musl-dev gcc libseccomp-dev libseccomp-static; \\\n  [ \"$(xx-info arch)\" != \"ppc64le\" ] || XX_CC_PREFER_LINKER=ld xx-clang --setup-target-triple\nRUN --mount=from=runc-src,src=/usr/src/runc,target=. --mount=target=/root/.cache,type=cache \\\n  CGO_ENABLED=1 xx-go build -mod=vendor -ldflags '-extldflags -static' -tags 'apparmor seccomp netgo cgo static_build osusergo' -o /usr/bin/runc ./ && \\\n  xx-verify --static /usr/bin/runc\n\nFROM gobuild-base AS buildkit-base\nWORKDIR /src\nENV GOFLAGS=-mod=vendor\n\n# scan the version/revision info\nFROM buildkit-base AS buildkit-version\n# TODO: PKG should be inferred from go modules\nRUN --mount=target=. \\\n  PKG=github.com/moby/buildkit VERSION=$(git describe --match 'v[0-9]*' --dirty='.m' --always --tags) REVISION=$(git rev-parse HEAD)$(if ! git diff --no-ext-diff --quiet --exit-code; then echo .m; fi); \\\n  echo \"-X ${PKG}/version.Version=${VERSION} -X ${PKG}/version.Revision=${REVISION} -X ${PKG}/version.Package=${PKG}\" | tee /tmp/.ldflags; \\\n  echo -n \"${VERSION}\" | tee /tmp/.version;\n\n# build buildctl binary\nFROM buildkit-base AS buildctl\nENV CGO_ENABLED=0\nARG TARGETPLATFORM\nRUN --mount=target=. --mount=target=/root/.cache,type=cache \\\n  --mount=target=/go/pkg/mod,type=cache \\\n  --mount=source=/tmp/.ldflags,target=/tmp/.ldflags,from=buildkit-version \\\n  xx-go build -ldflags \"$(cat /tmp/.ldflags)\" -o /usr/bin/buildctl ./cmd/buildctl && \\\n  xx-verify --static /usr/bin/buildctl\n\n# build buildkitd binary\nFROM buildkit-base AS buildkitd\n# BUILDKITD_TAGS defines additional Go build tags for compiling buildkitd\nARG BUILDKITD_TAGS\nARG TARGETPLATFORM\nRUN --mount=target=. --mount=target=/root/.cache,type=cache \\\n  --mount=target=/go/pkg/mod,type=cache \\\n  --mount=source=/tmp/.ldflags,target=/tmp/.ldflags,from=buildkit-version \\\n  CGO_ENABLED=0 xx-go build -ldflags \"$(cat /tmp/.ldflags) -extldflags '-static'\" -tags \"osusergo netgo static_build seccomp ${BUILDKITD_TAGS}\" -o /usr/bin/buildkitd ./cmd/buildkitd && \\\n  xx-verify --static /usr/bin/buildkitd\n\nFROM scratch AS binaries-linux-helper\nCOPY --link --from=runc /usr/bin/runc /buildkit-runc\n# built from https://github.com/tonistiigi/binfmt/releases/tag/buildkit%2Fv6.2.0-24\nCOPY --link --from=tonistiigi/binfmt:buildkit@sha256:ea7632b4e0b2406db438730c604339b38c23ac51a2f73c89ba50abe5e2146b4b / /\nFROM binaries-linux-helper AS binaries-linux\nCOPY --link --from=buildctl /usr/bin/buildctl /\nCOPY --link --from=buildkitd /usr/bin/buildkitd /\n\nFROM scratch AS binaries-darwin\nCOPY --link --from=buildctl /usr/bin/buildctl /\n\nFROM scratch AS binaries-windows\nCOPY --link --from=buildctl /usr/bin/buildctl /buildctl.exe\n\nFROM binaries-$TARGETOS AS binaries\n\nFROM --platform=$BUILDPLATFORM alpine:${ALPINE_VERSION} AS releaser\nRUN apk add --no-cache tar gzip\nWORKDIR /work\nARG TARGETPLATFORM\nRUN --mount=from=binaries \\\n  --mount=source=/tmp/.version,target=/tmp/.version,from=buildkit-version \\\n  mkdir -p /out && tar czvf \"/out/buildkit-$(cat /tmp/.version).$(echo $TARGETPLATFORM | sed 's/\\//-/g').tar.gz\" --mtime='2015-10-21 00:00Z' --sort=name --transform 's/^./bin/' .\n\nFROM scratch AS release\nCOPY --link --from=releaser /out/ /\n\n# tonistiigi/alpine supports riscv64\nFROM tonistiigi/alpine:${ALPINE_VERSION} AS buildkit-export\nRUN apk add --no-cache fuse3 git openssh pigz xz \\\n  && ln -s fusermount3 /usr/bin/fusermount\nCOPY --link examples/buildctl-daemonless/buildctl-daemonless.sh /usr/bin/\nVOLUME /var/lib/buildkit\n\nFROM git AS containerd-src\nARG CONTAINERD_VERSION\nARG CONTAINERD_ALT_VERSION\nWORKDIR /usr/src\nRUN git clone https://github.com/containerd/containerd.git containerd\n\nFROM gobuild-base AS containerd-base\nWORKDIR /go/src/github.com/containerd/containerd\nARG TARGETPLATFORM\nENV CGO_ENABLED=1 BUILDTAGS=no_btrfs GO111MODULE=off\nRUN xx-apk add musl-dev gcc && xx-go --wrap\n\nFROM containerd-base AS containerd\nARG CONTAINERD_VERSION\nRUN --mount=from=containerd-src,src=/usr/src/containerd,readwrite --mount=target=/root/.cache,type=cache \\\n  git fetch origin \\\n  && git checkout -q \"$CONTAINERD_VERSION\" \\\n  && make bin/containerd \\\n  && make bin/containerd-shim-runc-v2 \\\n  && make bin/ctr \\\n  && mv bin /out\n\n# containerd v1.5 for integration tests\nFROM containerd-base as containerd-alt-15\nARG CONTAINERD_ALT_VERSION_15\nRUN --mount=from=containerd-src,src=/usr/src/containerd,readwrite --mount=target=/root/.cache,type=cache \\\n  git fetch origin \\\n  && git checkout -q \"$CONTAINERD_ALT_VERSION_15\" \\\n  && make bin/containerd \\\n  && make bin/containerd-shim-runc-v2 \\\n  && mv bin /out\n\n# containerd v1.4 for integration tests\nFROM containerd-base as containerd-alt-14\nARG CONTAINERD_ALT_VERSION_14\nRUN --mount=from=containerd-src,src=/usr/src/containerd,readwrite --mount=target=/root/.cache,type=cache \\\n  git fetch origin \\\n  && git checkout -q \"$CONTAINERD_ALT_VERSION_14\" \\\n  && make bin/containerd \\\n  && make bin/containerd-shim-runc-v2 \\\n  && mv bin /out\n\nARG REGISTRY_VERSION\nFROM registry:$REGISTRY_VERSION AS registry\n\nFROM gobuild-base AS rootlesskit\nARG ROOTLESSKIT_VERSION\nRUN git clone https://github.com/rootless-containers/rootlesskit.git /go/src/github.com/rootless-containers/rootlesskit\nWORKDIR /go/src/github.com/rootless-containers/rootlesskit\nARG TARGETPLATFORM\nRUN  --mount=target=/root/.cache,type=cache \\\n  git checkout -q \"$ROOTLESSKIT_VERSION\"  && \\\n  CGO_ENABLED=0 xx-go build -o /rootlesskit ./cmd/rootlesskit && \\\n  xx-verify --static /rootlesskit\n\nFROM gobuild-base AS stargz-snapshotter\nARG STARGZ_SNAPSHOTTER_VERSION\nRUN git clone https://github.com/containerd/stargz-snapshotter.git /go/src/github.com/containerd/stargz-snapshotter\nWORKDIR /go/src/github.com/containerd/stargz-snapshotter\nARG TARGETPLATFORM\nRUN --mount=target=/root/.cache,type=cache \\\n  git checkout -q \"$STARGZ_SNAPSHOTTER_VERSION\" && \\\n  xx-go --wrap && \\\n  mkdir /out && CGO_ENABLED=0 PREFIX=/out/ make && \\\n  xx-verify --static /out/containerd-stargz-grpc && \\\n  xx-verify --static /out/ctr-remote\n\n# Copy together all binaries needed for oci worker mode\nFROM buildkit-export AS buildkit-buildkitd.oci_only\nCOPY --link --from=buildkitd.oci_only /usr/bin/buildkitd.oci_only /usr/bin/\nCOPY --link --from=buildctl /usr/bin/buildctl /usr/bin/\nENTRYPOINT [\"buildkitd.oci_only\"]\n\n# Copy together all binaries for containerd worker mode\nFROM buildkit-export AS buildkit-buildkitd.containerd_only\nCOPY --link --from=buildkitd.containerd_only /usr/bin/buildkitd.containerd_only /usr/bin/\nCOPY --link --from=buildctl /usr/bin/buildctl /usr/bin/\nENTRYPOINT [\"buildkitd.containerd_only\"]\n\n# Copy together all binaries for oci+containerd mode\nFROM buildkit-export AS buildkit-buildkitd-linux\nCOPY --link --from=binaries / /usr/bin/\nENTRYPOINT [\"buildkitd\"]\n\nFROM binaries AS buildkit-buildkitd-darwin\n\nFROM binaries AS buildkit-buildkitd-windows\n# this is not in binaries-windows because it is not intended for release yet, just CI\nCOPY --link --from=buildkitd /usr/bin/buildkitd /buildkitd.exe\n\nFROM buildkit-buildkitd-$TARGETOS AS buildkit-buildkitd\n\nFROM alpine:${ALPINE_VERSION} AS containerd-runtime\nCOPY --link --from=runc /usr/bin/runc /usr/bin/\nCOPY --link --from=containerd /out/containerd* /usr/bin/\nCOPY --link --from=containerd /out/ctr /usr/bin/\nVOLUME /var/lib/containerd\nVOLUME /run/containerd\nENTRYPOINT [\"containerd\"]\n\nFROM --platform=$BUILDPLATFORM alpine:${ALPINE_VERSION} AS cni-plugins\nRUN apk add --no-cache curl\nARG CNI_VERSION\nARG TARGETOS\nARG TARGETARCH\nWORKDIR /opt/cni/bin\nRUN curl -f -Ls https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION/cni-plugins-$TARGETOS-$TARGETARCH-$CNI_VERSION.tgz | tar xzv\n\nFROM buildkit-base AS integration-tests-base\nENV BUILDKIT_INTEGRATION_ROOTLESS_IDPAIR=\"1000:1000\"\nARG NERDCTL_VERSION\nRUN apk add --no-cache shadow shadow-uidmap sudo vim iptables fuse curl \\\n  && useradd --create-home --home-dir /home/user --uid 1000 -s /bin/sh user \\\n  && echo \"XDG_RUNTIME_DIR=/run/user/1000; export XDG_RUNTIME_DIR\" >> /home/user/.profile \\\n  && mkdir -m 0700 -p /run/user/1000 \\\n  && chown -R user /run/user/1000 /home/user \\\n  && ln -s /sbin/iptables-legacy /usr/bin/iptables \\\n  && xx-go --wrap \\\n  && curl -f -Ls https://raw.githubusercontent.com/containerd/nerdctl/$NERDCTL_VERSION/extras/rootless/containerd-rootless.sh > /usr/bin/containerd-rootless.sh \\\n  && chmod 0755 /usr/bin/containerd-rootless.sh\n# musl is needed to directly use the registry binary that is built on alpine\nENV BUILDKIT_INTEGRATION_CONTAINERD_EXTRA=\"containerd-1.4=/opt/containerd-alt-14/bin,containerd-1.5=/opt/containerd-alt-15/bin\"\nENV BUILDKIT_INTEGRATION_SNAPSHOTTER=stargz\nENV CGO_ENABLED=0\nCOPY --link --from=stargz-snapshotter /out/* /usr/bin/\nCOPY --link --from=rootlesskit /rootlesskit /usr/bin/\nCOPY --link --from=containerd-alt-14 /out/containerd* /opt/containerd-alt-14/bin/\nCOPY --link --from=containerd-alt-15 /out/containerd* /opt/containerd-alt-15/bin/\nCOPY --link --from=registry /bin/registry /usr/bin/\nCOPY --link --from=runc /usr/bin/runc /usr/bin/\nCOPY --link --from=containerd /out/containerd* /usr/bin/\nCOPY --link --from=cni-plugins /opt/cni/bin/bridge /opt/cni/bin/host-local /opt/cni/bin/loopback /opt/cni/bin/\nCOPY --link hack/fixtures/cni.json /etc/buildkit/cni.json\nCOPY --link --from=binaries / /usr/bin/\n\n# integration-tests prepares an image suitable for running all tests\nFROM integration-tests-base AS integration-tests\nCOPY . .\nENV BUILDKIT_RUN_NETWORK_INTEGRATION_TESTS=1 BUILDKIT_CNI_INIT_LOCK_PATH=/run/buildkit_cni_bridge.lock\n\nFROM integration-tests AS dev-env\nVOLUME /var/lib/buildkit\n\n# Rootless mode.\nFROM tonistiigi/alpine:${ALPINE_VERSION} AS rootless\nRUN apk add --no-cache fuse3 fuse-overlayfs git openssh pigz shadow-uidmap xz\nRUN adduser -D -u 1000 user \\\n  && mkdir -p /run/user/1000 /home/user/.local/tmp /home/user/.local/share/buildkit \\\n  && chown -R user /run/user/1000 /home/user \\\n  && echo user:100000:65536 | tee /etc/subuid | tee /etc/subgid\nCOPY --link --from=rootlesskit /rootlesskit /usr/bin/\nCOPY --link --from=binaries / /usr/bin/\nCOPY --link examples/buildctl-daemonless/buildctl-daemonless.sh /usr/bin/\n# Kubernetes runAsNonRoot requires USER to be numeric\nUSER 1000:1000\nENV HOME /home/user\nENV USER user\nENV XDG_RUNTIME_DIR=/run/user/1000\nENV TMPDIR=/home/user/.local/tmp\nENV BUILDKIT_HOST=unix:///run/user/1000/buildkit/buildkitd.sock\nVOLUME /home/user/.local/share/buildkit\nENTRYPOINT [\"rootlesskit\", \"buildkitd\"]\n\n# buildkit builds the buildkit container image\nFROM buildkit-${BUILDKIT_TARGET} AS buildkit\n\n\n"
}