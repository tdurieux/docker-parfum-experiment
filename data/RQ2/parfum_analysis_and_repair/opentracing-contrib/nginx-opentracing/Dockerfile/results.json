{
  "startTime": 1674250106221,
  "endTime": 1674250107434,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 226,
        "lineEnd": 226,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILD_OS=debian\nFROM --platform=$BUILDPLATFORM tonistiigi/xx:1.1.1 AS xx\n\n### Build base image for debian\nFROM --platform=$BUILDPLATFORM debian:bullseye as build-base-debian\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends --no-install-suggests -y \\\n    build-essential \\\n    ca-certificates \\\n    clang \\\n    git \\\n    golang \\\n    libcurl4 \\\n    libprotobuf-dev \\\n    libtool \\\n    libyaml-cpp-dev \\\n    libz-dev \\\n    lld \\\n    pkg-config \\\n    protobuf-compiler \\\n    wget && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=xx / /\nARG TARGETPLATFORM\n\nRUN xx-apt install -y xx-cxx-essentials zlib1g-dev libcurl4-openssl-dev libc-ares-dev libre2-dev libssl-dev libc-dev libmsgpack-dev\n\n\n### Build base image for alpine\nFROM --platform=$BUILDPLATFORM alpine:3.16 as build-base-alpine\n\nRUN apk add --no-cache \\\n    alpine-sdk \\\n    bash \\\n    build-base \\\n    clang \\\n    gcompat \\\n    git \\\n    libcurl \\\n    lld \\\n    protobuf-dev \\\n    yaml-cpp-dev \\\n    zlib-dev\n\nCOPY --from=xx / /\nARG TARGETPLATFORM\n\nRUN xx-apk add --no-cache xx-cxx-essentials openssl-dev zlib-dev zlib libgcc curl-dev msgpack-cxx-dev\n\n\n### Build image\nFROM build-base-${BUILD_OS} as build-base\n\nENV CMAKE_VERSION 3.22.2\nRUN wget -q -O cmake-linux.sh \"https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-$(arch).sh\" \\\n    && sh cmake-linux.sh -- --skip-license --prefix=/usr \\\n    && rm cmake-linux.sh\n\n# XX_CC_PREFER_STATIC_LINKER prefers ld to lld in ppc64le and 386.\nENV XX_CC_PREFER_STATIC_LINKER=1\n\n\n## Build gRPC\nFROM build-base as grpc\nARG GRPC_VERSION=v1.40.x\nARG TARGETPLATFORM\n\nRUN xx-info env && git clone --depth 1 -b $GRPC_VERSION https://github.com/grpc/grpc \\\n    && cd grpc\\\n    # Get absl\n    && git submodule update --depth 1 --init -- \"third_party/abseil-cpp\" \\\n    # Get protobuf\n    && git submodule update --depth 1 --init -- \"third_party/protobuf\" \\\n    && mkdir .build && cd .build \\\n    && cmake $(xx-clang --print-cmake-defines) \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_SHARED_LIBS=ON \\\n    -DgRPC_INSTALL=ON \\\n    -DgRPC_BUILD_TESTS=OFF \\\n    -DgRPC_ABSL_PROVIDER=module     \\\n    -DgRPC_CARES_PROVIDER=package    \\\n    -DgRPC_PROTOBUF_PROVIDER=module \\\n    -DgRPC_RE2_PROVIDER=package      \\\n    -DgRPC_SSL_PROVIDER=package      \\\n    -DgRPC_ZLIB_PROVIDER=package \\\n    .. \\\n    && make -j$(nproc) install\n\n\n### Build opentracing-cpp\nFROM build-base as opentracing-cpp\nARG OPENTRACING_CPP_VERSION=v1.6.0\nARG TARGETPLATFORM\n\nRUN xx-info env && git clone --depth 1 -b $OPENTRACING_CPP_VERSION https://github.com/opentracing/opentracing-cpp.git \\\n    && cd opentracing-cpp \\\n    && mkdir .build && cd .build \\\n    && cmake $(xx-clang --print-cmake-defines) \\\n    -DCMAKE_INSTALL_PREFIX=$(xx-info sysroot)usr/local \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_SHARED_LIBS=ON \\\n    -DBUILD_STATIC_LIBS=ON \\\n    -DBUILD_MOCKTRACER=OFF \\\n    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n    -DBUILD_TESTING=OFF .. \\\n    && make -j$(nproc) install \\\n    && if [ \"$(xx-info sysroot)\" != \"/\" ]; then cp -a $(xx-info sysroot)usr/local/lib/libopentracing.so* /usr/local/lib/; fi \\\n    && xx-verify /usr/local/lib/libopentracing.so\n\n\n### Build zipkin-cpp-opentracing\nFROM opentracing-cpp as zipkin-cpp-opentracing\nARG ZIPKIN_CPP_VERSION=master\nARG TARGETPLATFORM\n\nRUN [ \"$(xx-info vendor)\" = \"alpine\" ] && export QEMU_LD_PREFIX=/$(xx-info); \\\n    xx-info env && git clone --depth 1 -b $ZIPKIN_CPP_VERSION https://github.com/rnburn/zipkin-cpp-opentracing.git \\\n    && cd zipkin-cpp-opentracing \\\n    && mkdir .build && cd .build \\\n    && cmake $(xx-clang --print-cmake-defines) \\\n    -DCMAKE_PREFIX_PATH=$(xx-info sysroot)usr/local \\\n    -DBUILD_SHARED_LIBS=OFF \\\n    -DBUILD_STATIC_LIBS=OFF \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_PLUGIN=ON \\\n    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n    -DBUILD_TESTING=OFF .. \\\n    && make -j$(nproc) install \\\n    && xx-verify /usr/local/lib/libzipkin_opentracing_plugin.so\n\n\n### Build Jaeger cpp-client\nFROM opentracing-cpp as jaeger-cpp-client\nARG JAEGER_CPP_VERSION=v0.9.0\nARG YAML_CPP_VERSION=yaml-cpp-0.7.0\nARG TARGETPLATFORM\n\n# Building yaml-cpp manually because of a bug in jaeger-client-cpp that won't install it\nRUN xx-info env && git clone --depth 1 -b $YAML_CPP_VERSION https://github.com/jbeder/yaml-cpp/ && \\\n    cd yaml-cpp && mkdir .build && cd .build && \\\n    cmake $(xx-clang --print-cmake-defines) \\\n    -DBUILD_SHARED_LIBS=ON \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DYAML_CPP_BUILD_TESTS=OFF \\\n    -DYAML_CPP_BUILD_TOOLS=OFF \\\n    -DCMAKE_POSITION_INDEPENDENT_CODE=ON .. \\\n    && make -j$(nproc) install \\\n    && xx-verify /usr/local/lib/libyaml-cpp.so\n\nRUN git clone --depth 1 -b $JAEGER_CPP_VERSION https://github.com/jaegertracing/jaeger-client-cpp \\\n    && cd jaeger-client-cpp \\\n    && sed -i 's/hunter_add_package(yaml-cpp)/#hunter_add_package(yaml-cpp)/' CMakeLists.txt \\\n    && sed -i 's/yaml-cpp::yaml-cpp/yaml-cpp/' CMakeLists.txt \\\n    # Hunter doesn't read CMake variables, so we need to set them manually\n    && printf \"%s\\n\" \"\" \"set(CMAKE_C_COMPILER clang)\"  \"set(CMAKE_CXX_COMPILER clang++)\" \\\n    \"set(CMAKE_ASM_COMPILER clang)\" \"set(PKG_CONFIG_EXECUTABLE  $(xx-clang --print-prog-name=pkg-config))\" \\\n    \"set(CMAKE_C_COMPILER_TARGET $(xx-clang --print-target-triple))\" \"set(CMAKE_CXX_COMPILER_TARGET $(xx-clang++ --print-target-triple))\" \\\n    \"set(CMAKE_ASM_COMPILER_TARGET $(xx-clang --print-target-triple))\" \\\n    \"set(CMAKE_INSTALL_PREFIX $(xx-info sysroot)usr/local)\" >>  cmake/toolchain.cmake \\\n    && mkdir .build \\\n    && cd .build \\\n    && cmake $(xx-clang --print-cmake-defines) \\\n    -DCMAKE_PREFIX_PATH=$(xx-info sysroot) \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DBUILD_SHARED_LIBS=OFF \\\n    -DBUILD_TESTING=OFF \\\n    -DJAEGERTRACING_BUILD_EXAMPLES=OFF \\\n    -DJAEGERTRACING_BUILD_CROSSDOCK=OFF \\\n    -DJAEGERTRACING_COVERAGE=OFF \\\n    -DJAEGERTRACING_PLUGIN=ON \\\n    -DHUNTER_CONFIGURATION_TYPES=Release \\\n    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n    -DJAEGERTRACING_WITH_YAML_CPP=ON .. \\\n    && make -j$(nproc) install \\\n    && export HUNTER_INSTALL_DIR=$(cat _3rdParty/Hunter/install-root-dir) \\\n    && mkdir /hunter \\\n    && cp -r $HUNTER_INSTALL_DIR/lib /hunter/ \\\n    && cp -r $HUNTER_INSTALL_DIR/include /hunter/ \\\n    && mv libjaegertracing_plugin.so /usr/local/lib/libjaegertracing_plugin.so \\\n    && xx-verify /usr/local/lib/libjaegertracing_plugin.so\n\n\n### Build dd-opentracing-cpp\nFROM opentracing-cpp as dd-opentracing-cpp\nARG DATADOG_VERSION=master\nARG TARGETPLATFORM\n\nRUN xx-info env && git clone --depth 1 -b $DATADOG_VERSION https://github.com/DataDog/dd-opentracing-cpp.git \\\n    && cd dd-opentracing-cpp \\\n    && mkdir .build && cd .build \\\n    && cmake $(xx-clang --print-cmake-defines) \\\n    -DCMAKE_PREFIX_PATH=$(xx-info sysroot) \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n    -DBUILD_TESTING=OFF .. \\\n    && make -j$(nproc) install \\\n    && ln -s /usr/local/lib/libdd_opentracing.so /usr/local/lib/libdd_opentracing_plugin.so \\\n    && xx-verify /usr/local/lib/libdd_opentracing_plugin.so\n\n\n### Base build image for debian\nFROM nginx:1.23.0 as build-nginx-debian\n\nRUN echo \"deb-src http://nginx.org/packages/mainline/debian/ bullseye nginx\" >> /etc/apt/sources.list \\\n    && apt-get update \\\n    && apt-get build-dep -y nginx\n\n\n### Base build image for alpine\n# docker.io/library/nginx is a temporary workaround for Dependabot to see this as different from the one used in Debian\nFROM docker.io/library/nginx:1.23.0-alpine AS build-nginx-alpine\nRUN apk add --no-cache \\\n    build-base \\\n    pcre2-dev \\\n    zlib-dev\n\n\n### Build nginx-opentracing modules\nFROM build-nginx-${BUILD_OS} as build-nginx\n\nCOPY --from=jaeger-cpp-client /hunter /hunter\nCOPY . /src\n\nRUN curl -fsSL -O https://github.com/nginx/nginx/archive/release-${NGINX_VERSION}.tar.gz \\\n    && tar zxf release-${NGINX_VERSION}.tar.gz \\\n    && cd nginx-release-${NGINX_VERSION} \\\n    && auto/configure \\\n    --with-compat \\\n    --add-dynamic-module=/src/opentracing \\\n    --with-cc-opt=\"-I/hunter/include\" \\\n    --with-ld-opt=\"-fPIE -fPIC -Wl,-z,relro -Wl,-z,now -L/hunter/lib\" \\\n    --with-debug \\\n    && make -j$(nproc) modules \\\n    && cp objs/ngx_http_opentracing_module.so /usr/lib/nginx/modules/ && rm release-${NGINX_VERSION}.tar.gz\n\n\n### Base image for alpine\n# docker.io/library/nginx is a temporary workaround for Dependabot to see this as different from the one used in Debian\nFROM docker.io/library/nginx:1.23.0-alpine as nginx-alpine\nRUN apk add --no-cache libstdc++\n\n\n### Base image for debian\nFROM nginx:1.23.0 as nginx-debian\n\n\n### Build final image\nFROM nginx-${BUILD_OS} as final\n\nCOPY --from=build-nginx /usr/lib/nginx/modules/ /usr/lib/nginx/modules/\nCOPY --from=dd-opentracing-cpp /usr/local/lib/ /usr/local/lib/\nCOPY --from=jaeger-cpp-client /usr/local/lib/ /usr/local/lib/\nCOPY --from=zipkin-cpp-opentracing /usr/local/lib/ /usr/local/lib/\nCOPY --from=opentracing-cpp /usr/local/lib/ /usr/local/lib/\n# gRPC doesn't seem to be used\n# COPY --from=grpc /usr/local/lib/ /usr/local/lib/\n\nRUN ldconfig /usr/local/lib/\n\nSTOPSIGNAL SIGQUIT\n"
}