{
  "startTime": 1674255226255,
  "endTime": 1674255227454,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster-slim\n\n# Install dependencies needed for building and running OpenCV\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    python3-pip python3-setuptools python3-dev \\\n    # to build and install\n    unzip wget sed \\\n    build-essential cmake pkg-config \\\n    # to work with images (likely not necessary for optical calibration)\n    # libjpeg-dev libtiff-dev libpng-dev \\\n    # to work with video / webcam (likely not necessary for optical calibration)\n    # libavcodec-dev libavformat-dev libswscale-dev \\\n    libv4l-dev \\\n    # for opencv math operations\n    libatlas-base-dev gfortran \\\n    # thread building blocks (not availabe on the arm version of python:3.5.6-slim-stretch)\n    # libtbb2 libtbb-dev \\\n    # for gevent\n    libevent-dev \\\n    # for numpy (installs libf77blas.so.3)\n    libatlas-base-dev \\\n    avrdude libffi-dev libxml2-dev libxslt-dev \\\n    libsm6 libxext6 libxrender-dev git \\\n    # Install requirements that don't play well with armv7+rpi via pip\n    python3-opencv python3-scipy python3-numpy \\\n    # cleanup\n    && apt-get -y autoremove \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Get other python dependencies\nADD requirements.txt /requirements.txt\n# Remove opencv, scipy and numpy from requirements (since they're already installed)\nRUN sed -i '/opencv-python.*/d' /requirements.txt && sed -i '/scipy.*/d' /requirements.txt && sed -i '/numpy.*/d' /requirements.txt\nRUN pip3 install --no-cache-dir -r /requirements.txt\n\n# Download and compile the Arduino firmware\n# Generates the firmware as /firmware/.pioenvs/megaatmega2560/firmware.hex\n# Python3 support was added in July, 2019: https://github.com/Homebrew/homebrew-core/pull/41821\nRUN apt-get update \\\n    && pip3 install --no-cache-dir -U platformio \\\n    && pio platform install --with-package framework-arduino atmelavr \\\n    && pio lib -g install \"Servo\"\n\nARG madgrizzle_firmware_repo=https://github.com/madgrizzle/Firmware.git\nARG madgrizzle_firmware_sha=bf4350ffd9bc154832505fc0125abd2c4c04dba7\nRUN git clone $madgrizzle_firmware_repo firmware/madgrizzle \\\n    && cd firmware/madgrizzle \\\n    && git checkout $madgrizzle_firmware_sha \\\n    && pio run -e megaatmega2560 \\\n    && mkdir build \\\n    && mv .pio/build/megaatmega2560/firmware.hex build/$madgrizzle_firmware_sha-$(sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h).hex\nARG maslowcnc_firmware_repo=https://github.com/MaslowCNC/Firmware.git\nARG maslowcnc_firmware_sha=e1e0d020fff1f4f7c6b403a26a85a16546b7e15b\nRUN git clone $maslowcnc_firmware_repo firmware/maslowcnc \\\n    && cd firmware/maslowcnc \\\n    && git checkout $maslowcnc_firmware_sha \\\n    && pio run -e megaatmega2560 \\\n    && mkdir build \\\n    && mv .pio/build/megaatmega2560/firmware.hex build/$maslowcnc_firmware_sha-$(sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h).hex\nRUN pwd\nARG  holey_firmware_repo=https://github.com/madgrizzle/Firmware.git\nARG  holey_firmware_sha=950fb23396171cbd456c2d4149455cc45f5e6bc3\nRUN git clone $holey_firmware_repo firmware/holey \\\n    && cd firmware/holey \\\n    && git checkout $holey_firmware_sha \\\n    && pio run -e megaatmega2560 \\\n    && mkdir build \\\n    && mv .pio/build/megaatmega2560/firmware.hex build/$holey_firmware_sha-$(sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h).hex\n\nADD . /WebControl\n\n# Pre-compile the pyc files (for faster Docker image startup)\nRUN python3 -m compileall /WebControl\n\nWORKDIR /WebControl\nEXPOSE 5000/tcp\nCMD python3 /WebControl/main.py\n"
}