{
  "startTime": 1674219672054,
  "endTime": 1674219673223,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 5,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 5,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14-slim\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y automake build-essential git && rm -rf /var/lib/apt/lists/*;\n\n# Install Tinyproxy from source\n#ENV TINYPROXY_VERSION=1.11.0\n#RUN git clone -b ${TINYPROXY_VERSION} --depth=1 https://github.com/tinyproxy/tinyproxy.git /tmp/tinyproxy \\\nRUN cd /tmp \\\n  && git clone https://github.com/tinyproxy/tinyproxy.git \\\n  && cd /tmp/tinyproxy \\\n  && git checkout 7168a42 \\\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-transparent --prefix=\"\" \\\n  && make \\\n  && make install \\\n  && mkdir -p /var/log/tinyproxy \\\n#  && chown tinyproxy:tinyproxy /var/log/tinyproxy \\\n  && cd / \\\n  && rm -rf /tmp/tinyproxy\n\n# Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)\n# Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer\n# installs, work.\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y wget gnupg git \\\n    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n    && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\\n    && apt-get update \\\n    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \\\n      --no-install-recommends \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# If running Docker >= 1.13.0 use docker run's --init arg to reap zombie processes, otherwise\n# uncomment the following lines to have `dumb-init` as PID 1\n# ADD https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_x86_64 /usr/local/bin/dumb-init\n# RUN chmod +x /usr/local/bin/dumb-init\n# ENTRYPOINT [\"dumb-init\", \"--\"]\n\n# Uncomment to skip the chromium download when installing puppeteer. If you do,\n# you'll need to launch puppeteer with:\n#     browser.launch({executablePath: 'google-chrome-stable'})\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true\n\n# Copy application dependency manifests to the container image.\n# A wildcard is used to ensure both package.json AND package-lock.json are copied.\n# Copying this separately prevents re-running npm install on every code change.\nCOPY package*.json ./\n\n# Install puppeteer so it's available in the container.\nRUN npm install --only=production \\\n    # Add user so we don't need --no-sandbox.\n    # same layer as npm install to keep re-chowned files from using up several hundred MBs more space\n    && groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \\\n    && mkdir -p /home/pptruser/Downloads \\\n    && chown -R pptruser:pptruser /home/pptruser \\\n    && chown -R pptruser:pptruser /node_modules \\\n    && chown -R pptruser:pptruser /var/log/tinyproxy && npm cache clean --force;\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Run everything after as non-privileged user.\nUSER pptruser\n\n# Run the web service on container startup.\nCMD [ \"./main.sh\" ]"
}