{
  "startTime": 1674249572643,
  "endTime": 1674249573856,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# This is mostly based on the Dockerfiles from themattrix/pyenv and\n# themattrix/tox-base.  It has some added packages, most notably liblzma-dev,\n# to work for more of our conditions, plus some convenience libraries like\n# libldap2-dev, libsasl2-dev, fuse to facilitate girder-based testing.\n\nLABEL maintainer=\"Kitware, Inc. <kitware@kitware.com>\"\n\nENV DEBIAN_FRONTEND=noninteractive \\\n    LANG=en_US.UTF-8 \\\n    PYENV_ROOT=\"/.pyenv\" \\\n    PATH=\"/.pyenv/bin:/.pyenv/shims:$PATH\" \\\n    PYTHON_VERSIONS=\"3.9.13 3.8.13 3.7.13 3.6.15 3.10.5\"\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n      # general utilities \\\n      software-properties-common \\\n      # as specified by \\\n      # https://github.com/pyenv/pyenv/wiki#suggested-build-environment\n      build-essential \\\n      curl \\\n      libbz2-dev \\\n      libffi-dev \\\n      liblzma-dev \\\n      libncursesw5-dev \\\n      libreadline-dev \\\n      libsqlite3-dev \\\n      libssl-dev \\\n      libxml2-dev \\\n      libxmlsec1-dev \\\n      llvm \\\n      make \\\n      tk-dev \\\n      wget \\\n      xz-utils \\\n      zlib1g-dev \\\n      # for curl \\\n      ca-certificates \\\n      # girder convenience\n      fuse \\\n      libldap2-dev \\\n      libsasl2-dev \\\n      # developer convenience \\\n      bzip2 \\\n      dirmngr \\\n      git \\\n      gpg-agent \\\n      less \\\n      locales \\\n      ssh \\\n      vim \\\n      # From upstream \\\n      gosu \\\n      # testing convenience \\\n      fonts-dejavu \\\n      libmagic-dev \\\n      # shrink docker image \\\n      rdfind \\\n      && \\\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \\\n    curl -f -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash && \\\n    find / -xdev -name __pycache__ -type d -exec rm -r {} \\+ && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/*\n\nRUN pyenv update && \\\n    pyenv install --list && \\\n    echo $PYTHON_VERSIONS | xargs -P `nproc` -n 1 pyenv install && \\\n    pyenv global $(pyenv versions --bare) && \\\n    find $PYENV_ROOT/versions -type d '(' -name '__pycache__' -o -name 'test' -o -name 'tests' ')' -exec rm -rfv '{}' + >/dev/null && \\\n    find $PYENV_ROOT/versions -type f '(' -name '*.py[co]' -o -name '*.exe' ')' -exec rm -fv '{}' + >/dev/null && \\\n    echo $PYTHON_VERSIONS | tr \" \" \"\\n\" > $PYENV_ROOT/version && \\\n    find / -xdev -name __pycache__ -type d -exec rm -r {} \\+ && \\\n    rm -rf /tmp/* /var/tmp/* && \\\n    # This makes duplicate python library files hardlinks of each other \\\n    rdfind -minsize 1048576 -makehardlinks true -makeresultsfile false /.pyenv\n\nRUN for ver in $PYTHON_VERSIONS; do \\\n    pyenv local $ver && \\\n    python -m pip install --no-cache-dir -U pip && \\\n    python -m pip install --no-cache-dir tox wheel && \\\n    pyenv local --unset; \\\n    done && \\\n    pyenv rehash && \\\n    find / -xdev -name __pycache__ -type d -exec rm -r {} \\+ && \\\n    rm -rf /tmp/* /var/tmp/*\n\n# Create a user that can be used with gosu or chroot when running tox\nRUN groupadd -r tox --gid=999 && \\\n    useradd -m -r -g tox --uid=999 tox\n\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash - && \\\n    apt-get install --no-install-recommends -y nodejs && \\\n    find / -xdev -name __pycache__ -type d -exec rm -r {} \\+ && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nWORKDIR /app\n"
}