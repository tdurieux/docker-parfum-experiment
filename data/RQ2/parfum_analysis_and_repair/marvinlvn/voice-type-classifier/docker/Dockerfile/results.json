{
  "startTime": 1674250343363,
  "endTime": 1674250344418,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG image=ubuntu:20.04\nFROM ${image}\nSHELL [\"/bin/bash\", \"--login\", \"-c\"]\nARG username=user\nARG uid=1000\nARG gid=100\nARG magma_version=100\nARG python_version=3.7\nARG TORCH_CUDA_ARCH_STRING=\"3.5 5.2 6.0 6.1 7.0+PTX\"\nARG source=\"False\"\nARG vtc_version=\"HEAD\"\nENV USER $username\nENV UID $uid\nENV GID $gid\nENV HOME /home/$USER\nENV BATCH=32\nENV DEVICE=cpu\nENV MAGMA_VERSION=${magma_version}\nENV PYTHON_VERSION=${python_version}\nENV SOURCE=${source}\nENV VTC_VERSION=${vtc_version}\n\nRUN adduser --disabled-password \\\n\t--gecos \"Non-root user\" \\\n\t--uid $UID \\\n\t--gid $GID \\\n\t--home $HOME \\\n\t$USER\n\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y \\\n        git \\\n        sox  \\\n        curl \\\n        ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nRUN if [ ${SOURCE} = \"True\" ]; then \\\n DEBIAN_FRONTEND=noninteractive apt-get update -y \\\n    && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        cmake \\\n        libjpeg-dev \\\n        libpng-dev \\\n        ; rm -rf /var/lib/apt/lists/*; fi\n\nUSER $USER\n\nENV CONDA_DIR $HOME/miniconda3\nWORKDIR /home/user/\nRUN curl -f -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n     chmod +x ~/miniconda.sh && \\\n     ~/miniconda.sh -b -p $CONDA_DIR && \\\n    rm /home/user/miniconda.sh\nRUN $CONDA_DIR/bin/conda install python=${PYTHON_VERSION}\nCOPY script_source_pytorch.sh .\nRUN if [ ${SOURCE} = \"True\" ]; then bash script_source_pytorch.sh 1 ; fi\n\nENV PATH $CONDA_DIR/bin:$PATH\nWORKDIR /home/user/\nRUN if [ ${SOURCE} = \"True\" ]; then bash script_source_pytorch.sh 2 ;  fi\nRUN git clone --recurse-submodules https://github.com/MarvinLvn/voice_type_classifier.git\nWORKDIR /home/user/voice_type_classifier\nRUN if [ \"$VTC_VERSION\" != \"HEAD\" ]; then git checkout  \"$VTC_VERSION\" ; fi\nRUN cat vtc.yml | grep \"    - \" | sed 's/    - //g' > vtc-prepared.yml\nRUN pip install --no-cache-dir -r vtc-prepared.yml\nWORKDIR /home/user/\nCOPY ./script_run_vtc.sh .\nCMD   /bin/bash --login -c \"bash script_run_vtc.sh \\\n        ${DEVICE} \\\n        ${BATCH}\"\n"
}