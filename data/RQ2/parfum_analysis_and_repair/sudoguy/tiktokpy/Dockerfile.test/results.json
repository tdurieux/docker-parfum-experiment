{
  "startTime": 1674252599823,
  "endTime": 1674252600401,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-slim-buster as development_build\n\nARG ENV=\"production\"\n\nENV ENV=${ENV} \\\n    DEBIAN_FRONTEND=noninteractive \\\n    # poetry:\n    POETRY_VERSION='1.1.6' \\\n    POETRY_VIRTUALENVS_CREATE=false \\\n    POETRY_CACHE_DIR='/var/cache/pypoetry' \\\n    # pip:\n    PIP_NO_CACHE_DIR=off \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    PIP_DEFAULT_TIMEOUT=100\n\n# System deps\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n    # build-essential \\\n    curl \\\n    git \\\n    # pyppeteer\n    ca-certificates \\\n    fonts-liberation \\\n    libappindicator3-1 \\\n    libasound2 \\\n    libatk-bridge2.0-0 \\\n    libatk1.0-0 \\\n    libc6 \\\n    libcairo2 \\\n    libcups2 \\\n    libdbus-1-3 \\\n    libexpat1 \\\n    libfontconfig1 \\\n    libgbm1 \\\n    libgcc1 \\\n    libglib2.0-0 \\\n    libgtk-3-0 \\\n    libnspr4 \\\n    libnss3 \\\n    libpango-1.0-0 \\\n    libpangocairo-1.0-0 \\\n    libstdc++6 \\\n    libx11-6 \\\n    libx11-xcb1 \\\n    libxcb1 \\\n    libxcomposite1 \\\n    libxcursor1 \\\n    libxdamage1 \\\n    libxext6 \\\n    libxfixes3 \\\n    libxi6 \\\n    libxrandr2 \\\n    libxrender1 \\\n    libxss1 \\\n    libxtst6 \\\n    lsb-release \\\n    wget \\\n    xdg-utils \\\n    # Cleaning cache:\n    && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* \\\n    # Installing `poetry` package manager:\n    # https://github.com/python-poetry/poetry \\\n    && pip install --no-cache-dir \"poetry==$POETRY_VERSION\"\n\nWORKDIR /app\n# Copy only requirements, to cache them in docker layer\nCOPY ./pyproject.toml ./poetry.lock /app/\n\n# Project initialization:\nRUN echo \"$ENV\" \\\n    && poetry --version \\\n    && poetry install \\\n    $(if [ \"$ENV\" = 'production' ]; then echo '--no-dev'; fi) \\\n    --no-interaction --no-ansi \\\n    # Do not install the root package (the current project)\n    --no-root \\\n    # Cleaning poetry installation's cache for production:\n    && if [ \"$ENV\" = 'production' ]; then rm -rf \"$POETRY_CACHE_DIR\"; fi\n\nRUN pyppeteer-install\n\n# Setting up proper permissions:\nRUN groupadd -r web && useradd -d /app -r -g web web \\\n    && chown web:web -R /app\n\nCOPY . /app/\n\n\nCMD [\"pytest\"]\n"
}