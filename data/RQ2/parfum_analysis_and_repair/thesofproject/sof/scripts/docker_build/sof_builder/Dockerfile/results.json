{
  "startTime": 1674253413048,
  "endTime": 1674253414163,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 16,
        "columnEnd": 42
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 2,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 58,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 58,
        "columnStart": 5,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 The Chromium Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n#\n# Defines a docker image that can build sound open firmware\n#\n# Usage:\n# check out sof\n# build docker image:\n# docker build --build-arg UID=$(id -u) -t sof .\n# docker run -it  -v <insert sof dir here>:/home/sof/workdir --user `id -u` sof\n#\n# For incremental builds:\n# docker run -it  -v <insert sof dir here>:/home/sof/work/sof.git --user `id -u` sof ./incremental.sh\n#\n\nFROM ubuntu:20.04\nARG UID=1000\n\nARG host_http_proxy\nARG host_https_proxy\nENV http_proxy $host_http_proxy\nENV https_proxy $host_https_proxy\n\n# for non-interactive package install\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get -y update && \\\n\t\t\t\t\tapt-get install --no-install-recommends -y \\\n\t\tdialog \\\n\t\tapt-utils \\\n\t\tvim \\\n\t\tjed \\\n\t\tautoconf \\\n\t\tbison \\\n\t\tbuild-essential \\\n\t\tninja-build \\\n\t\tpython3-pyelftools \\\n\t\tflex \\\n\t\tgawk \\\n\t\tgettext \\\n\t\tgit \\\n\t\tgperf \\\n\t\thelp2man \\\n\t\tlibncurses5-dev \\\n\t\tlibssl-dev \\\n\t\tlibtool \\\n\t\tlibtool-bin \\\n\t\tpkg-config \\\n\t\tsoftware-properties-common \\\n\t\tsudo \\\n\t\ttexinfo \\\n\t\ttree \\\n\t\tudev \\\n\t\twget \\\n\t\tunzip \\\n\t\tcmake \\\n\t\tpython3 \\\n\t\tlibglib2.0-dev && rm -rf /var/lib/apt/lists/*;\n\nARG CLONE_DEFAULTS=\"--depth 5\"\n\n# Set up sof user\nRUN useradd --create-home -d /home/sof -u $UID -G sudo sof && \\\n\techo \"sof:test0000\" | chpasswd && adduser sof sudo\nENV HOME /home/sof\n\n# Use ToT alsa utils for the latest topology patches.\n# Note: For alsa-lib, set default library directory to /usr/lib/x86_64-linux-gnu.\n#       By default it goes to /usr/lib64, but Ubuntu 20.04's default shared library\n#       path does not have this. Typical build error is like,\n# alsatplg: error while loading shared libraries: libatopology.so.2: cannot open shared object file: No such file or directory\nRUN mkdir -p \"$HOME\"/work/alsa && cd \"$HOME\"/work/alsa && \\\n\tgit clone $CLONE_DEFAULTS https://github.com/thesofproject/alsa-lib.git && \\\n\tgit clone $CLONE_DEFAULTS https://github.com/thesofproject/alsa-utils.git && \\\n\tcd \"$HOME\"/work/alsa/alsa-lib && ./gitcompile --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu/ &&  make install && \\\n\tcd \"$HOME\"/work/alsa/alsa-utils && ./gitcompile &&  make install && \\\n\tchown -R sof:sof \"$HOME\" && \\\n\techo \"Stage1: alsa-lib, alsa-utils are done!\"\n\nARG GITHUB_SOF=https://github.com/thesofproject\nARG XT_OVERLAY_REPO=$GITHUB_SOF/xtensa-overlay.git\nARG CT_NG_REPO=$GITHUB_SOF/crosstool-ng.git\n# build cross compiler\nUSER sof\nRUN cd \"$HOME\" && \\\n\tgit clone $CLONE_DEFAULTS --branch sof-gcc10.2 $XT_OVERLAY_REPO && \\\n\tgit clone $CLONE_DEFAULTS --branch sof-gcc10x $CT_NG_REPO && \\\n\tcd crosstool-ng && \\\n\t./bootstrap && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=`pwd` && make && make install && \\\n\tfor arch in byt hsw apl cnl imx imx8m imx8ulp rn mt8186 mt8195; do \\\n\t\techo \"$arch: ct-ng build start...\" && \\\n\t\tcp config-${arch}-gcc10.2-gdb9 .config && \\\n\t\t# replace the build dist to save space\n\t\tsed -i 's#${CT_TOP_DIR}\\/builds#\\/home\\/sof\\/work#g' .config && \\\n\t\t# gl_cv_func_getcwd_path_max=yes is used to avoid too-long confdir3/confdir3/...\n\t\tgl_cv_func_getcwd_path_max=yes ./ct-ng build && \\\n\t\t./ct-ng distclean ; \\\n\tdone && \\\n\techo \"Stage2: xtensa-overlay, crosstool-ng are done!\"\n\nENV PATH=\"/home/sof/work/xtensa-byt-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-hsw-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-apl-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-cnl-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-rn-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-imx-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-imx8m-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-imx8ulp-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-mt8186-elf/bin:${PATH}\"\nENV PATH=\"/home/sof/work/xtensa-mt8195-elf/bin:${PATH}\"\n\nARG NEWLIB_REPO=https://github.com/jcmvbkbc/newlib-xtensa.git\nRUN cd \"$HOME\" && \\\n\tgit clone $CLONE_DEFAULTS --branch xtensa $NEWLIB_REPO && \\\n\tcd newlib-xtensa && \\\n\tfor arch in byt hsw apl cnl imx imx8m imx8ulp rn mt8186 mt8195; do \\\n\t\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --target=xtensa-${arch}-elf \\\n\t\t--prefix=/home/sof/work/xtensa-root && \\\n\t\tmake && make install && \\\n\t\trm -rf etc/config.cache; \\\n\tdone && \\\n\techo \"Stage3: newlib-xtensa is done!\"\n\n# log all hashes for each repo to a file\nARG SOF_WORK=\"$HOME\"/work\n# FIXME: this will fail when any whitespace in SOF_WORK. bash array probably good option to consider\nARG REPOS=\"$SOF_WORK/alsa/alsa-lib $SOF_WORK/alsa/alsa-utils $HOME/xtensa-overlay $HOME/crosstool-ng $HOME/newlib-xtensa\"\nARG HASH_LIST=\"$SOF_WORK\"/sof_docker_hash.txt\nRUN echo \"Build date: $(date +%Y%m%d)\" > \"$HASH_LIST\" && set -e && \\\n\tfor repo in $REPOS; do \\\n\t\tcd \"$repo\"; pwd; git log --oneline -5; \\\n\tdone >> \"$HASH_LIST\" && \\\n\tcd \"$HOME\" && rm -rf xtensa-overlay crosstool-ng newlib-xtensa; \\\n\techo \"Stage4: git versions saved and repos deleted.\"\n\n# Create direcroties for the host machines sof directories to be mounted.\nRUN mkdir -p \"$HOME\"/work/sof.git\n\nUSER sof\nWORKDIR /home/sof/work/sof.git/\n"
}