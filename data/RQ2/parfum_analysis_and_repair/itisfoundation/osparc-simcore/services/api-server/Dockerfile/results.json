{
  "startTime": 1674249527602,
  "endTime": 1674249528190,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 2,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_VERSION=\"3.9.12\"\nFROM python:${PYTHON_VERSION}-slim-buster as base\n#\n#  USAGE:\n#     cd sercices/api-server\n#     docker build -f Dockerfile -t api-server:prod --target production ../../\n#     docker run api-server:prod\n#\n#  REQUIRED: context expected at ``osparc-simcore/`` folder because we need access to osparc-simcore/packages\n\nLABEL maintainer=pcrespov\n\nRUN set -eux && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y gosu && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  # verify that the binary works\n  gosu nobody true\n\n# simcore-user uid=8004(scu) gid=8004(scu) groups=8004(scu)\nENV SC_USER_ID=8004 \\\n  SC_USER_NAME=scu \\\n  SC_BUILD_TARGET=base \\\n  SC_BOOT_MODE=default\n\nRUN adduser \\\n  --uid ${SC_USER_ID} \\\n  --disabled-password \\\n  --gecos \"\" \\\n  --shell /bin/sh \\\n  --home /home/${SC_USER_NAME} \\\n  ${SC_USER_NAME}\n\n\n# Sets utf-8 encoding for Python et al\nENV LANG=C.UTF-8\n\n# Turns off writing .pyc files; superfluous on an ephemeral container.\nENV PYTHONDONTWRITEBYTECODE=1 \\\n  VIRTUAL_ENV=/home/scu/.venv\n\n# Ensures that the python and pip executables used in the image will be\n# those from our virtualenv.\nENV PATH=\"${VIRTUAL_ENV}/bin:$PATH\"\n\nEXPOSE 8000\nEXPOSE 3000\n\n# -------------------------- Build stage -------------------\n# Installs build/package management tools and third party dependencies\n#\n# + /build             WORKDIR\n#\nFROM base as build\n\nENV SC_BUILD_TARGET=build\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n  build-essential \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/*\n\n\n# NOTE: python virtualenv is used here such that installed\n# packages may be moved to production image easily by copying the venv\nRUN python -m venv \"${VIRTUAL_ENV}\"\n\nRUN pip install --no-cache-dir --upgrade \\\n  pip~=22.0  \\\n  wheel \\\n  setuptools\n\nWORKDIR /build\n\n# install base 3rd party dependencies\n# NOTE: copies to /build to avoid overwriting later which would invalidate this layer\nCOPY  --chown=scu:scu services/api-server/requirements/_base.txt .\nRUN pip --no-cache-dir install -r _base.txt\n\n\n# --------------------------Prod-depends-only stage -------------------\n# This stage is for production only dependencies that get partially wiped out afterwards (final docker image concerns)\n#\n#  + /build\n#    + services/api-server [scu:scu] WORKDIR\n#\nFROM build as prod-only-deps\n\nENV SC_BUILD_TARGET prod-only-deps\n\nCOPY --chown=scu:scu packages /build/packages\nCOPY --chown=scu:scu services/api-server /build/services/api-server\n\nWORKDIR /build/services/api-server\n\nRUN pip --no-cache-dir install -r requirements/prod.txt &&\\\n  pip --no-cache-dir list -v\n\n\n# --------------------------Production stage -------------------\n# Final cleanup up to reduce image size and startup setup\n# Runs as scu (non-root user)\n#\n#  + /home/scu     $HOME = WORKDIR\n#    + services/api-server [scu:scu]\n#\nFROM base as production\n\nENV SC_BUILD_TARGET=production \\\n  SC_BOOT_MODE=production\n\nENV PYTHONOPTIMIZE=TRUE\n\nWORKDIR /home/scu\n\n# Starting from clean base image, copies pre-installed virtualenv from prod-only-deps\nCOPY --chown=scu:scu --from=prod-only-deps  ${VIRTUAL_ENV} ${VIRTUAL_ENV}\n\n# Copies booting scripts\nCOPY --chown=scu:scu services/api-server/docker services/api-server/docker\nRUN chmod +x services/api-server/docker/*.sh\n\nHEALTHCHECK --interval=30s \\\n  --timeout=20s \\\n  --start-period=30s \\\n  --retries=3 \\\n  CMD [\"python3\", \"services/api-server/docker/healthcheck.py\", \"http://localhost:8000/\"]\n\nENTRYPOINT [ \"/bin/sh\", \"services/api-server/docker/entrypoint.sh\" ]\nCMD [\"/bin/sh\", \"services/api-server/docker/boot.sh\"]\n\n\n# --------------------------Development stage -------------------\n# Source code accessible in host but runs in container\n# Runs as myu with same gid/uid as host\n# Placed at the end to speed-up the build if images targeting production\n#\n#  + /devel         WORKDIR\n#    + services  (mounted volume)\n#\nFROM build as development\n\nENV SC_BUILD_TARGET=development\n\nWORKDIR /devel\n\nRUN chown -R scu:scu \"${VIRTUAL_ENV}\"\n\nENTRYPOINT [\"/bin/sh\", \"services/api-server/docker/entrypoint.sh\"]\nCMD [\"/bin/sh\", \"services/api-server/docker/boot.sh\"]\n"
}