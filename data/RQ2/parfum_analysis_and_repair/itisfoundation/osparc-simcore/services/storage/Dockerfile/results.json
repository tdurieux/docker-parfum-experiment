{
  "startTime": 1674252830779,
  "endTime": 1674252831311,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 2,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_VERSION=\"3.9.12\"\nFROM python:${PYTHON_VERSION}-slim-buster as base\n#\n#  USAGE:\n#     cd sercices/storage\n#     docker build -f Dockerfile -t storage:prod --target production ../../\n#     docker run storage:prod\n#\n#  REQUIRED: context expected at ``osparc-simcore/`` folder because we need access to osparc-simcore/packages\n\nLABEL maintainer=mguidon\n\nRUN set -eux && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y gosu && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  # verify that the binary works\n  gosu nobody true\n\n\n# simcore-user uid=8004(scu) gid=8004(scu) groups=8004(scu)\nENV SC_USER_ID=8004 \\\n  SC_USER_NAME=scu \\\n  SC_BUILD_TARGET=base \\\n  SC_BOOT_MODE=default\n\nRUN adduser \\\n  --uid ${SC_USER_ID} \\\n  --disabled-password \\\n  --gecos \"\" \\\n  --shell /bin/sh \\\n  --home /home/${SC_USER_NAME} \\\n  ${SC_USER_NAME}\n\n\n# Sets utf-8 encoding for Python et al\nENV LANG=C.UTF-8\n\n# Turns off writing .pyc files; superfluous on an ephemeral container.\nENV PYTHONDONTWRITEBYTECODE=1 \\\n  VIRTUAL_ENV=/home/scu/.venv\n\n# Ensures that the python and pip executables used\n# in the image will be those from our virtualenv.\nENV PATH=\"${VIRTUAL_ENV}/bin:$PATH\"\n\n\nENV SC_BUILD_TARGET base\nENV SC_BOOT_MODE default\n\nEXPOSE 8080\n# -------------------------- -------------------------------\n\n\n\n# -------------------------- Build stage -------------------\n# Installs build/package management tools and third party dependencies\n#\n# + /build             WORKDIR\n#\n\nFROM base as build\n\nENV SC_BUILD_TARGET build\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n  build-essential \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/*\n\n\n# NOTE: python virtualenv is used here such that installed\n# packages may be moved to production image easily by copying the venv\nRUN python -m venv \"${VIRTUAL_ENV}\"\n\nRUN pip --no-cache-dir install --upgrade \\\n  pip~=22.0  \\\n  wheel \\\n  setuptools\n\nWORKDIR /build\n\n# install only base 3rd party dependencies\nCOPY  --chown=scu:scu services/storage/requirements/_base.txt requirements_base.txt\nRUN pip --no-cache-dir --quiet install -r requirements_base.txt\n# -------------------------- -------------------------------\n\n\n\n\n# --------------------------Prod-depends-only stage -------------------\n# This stage is for production only dependencies that get partially wiped out afterwards (final docker image concerns)\n#\n#  + /build\n#    + services/storage [scu:scu] WORKDIR\n#\nFROM build as prod-only-deps\n\nENV SC_BUILD_TARGET prod-only-deps\n\n# 2nd party packages\nCOPY --chown=scu:scu packages /build/packages\nCOPY --chown=scu:scu services/storage /build/services/storage\n\nWORKDIR /build/services/storage\n\nRUN pip --no-cache-dir --quiet install -r requirements/prod.txt\n# -------------------------- -------------------------------\n\n\n\n# --------------------------Production stage -------------------\n# Final cleanup up to reduce image size and startup setup\n#\nFROM base as production\n\nENV SC_BUILD_TARGET=production \\\n  SC_BOOT_MODE=production \\\n  SC_HEALTHCHECK_INTERVAL=30 \\\n  SC_HEALTHCHECK_RETRY=3\n\nENV PYTHONOPTIMIZE=TRUE\n\nWORKDIR /home/scu\n\n# bring installed package without build tools\nCOPY --from=prod-only-deps --chown=scu:scu ${VIRTUAL_ENV} ${VIRTUAL_ENV}\n\n# copy docker entrypoint and boot scripts\nCOPY --chown=scu:scu services/storage/docker services/storage/docker\nRUN chmod +x services/storage/docker/*.sh\n\nHEALTHCHECK --interval=30s \\\n  --timeout=120s \\\n  --start-period=30s \\\n  --retries=3 \\\n  CMD [\"python3\", \"/home/scu/services/storage/docker/healthcheck.py\", \"http://localhost:8080/v0/\"]\n\n\nENTRYPOINT [ \"/bin/sh\", \"services/storage/docker/entrypoint.sh\" ]\nCMD [\"/bin/sh\", \"services/storage/docker/boot.sh\"]\n# -------------------------- -------------------------------\n\n\n\n\n# --------------------------Development stage -------------------\n# Source code accessible in host but runs in container\n# Runs as scu with same gid/uid as host\n#\n#  + /devel         WORKDIR\n#    + packages  (mounted volume)\n#    + services  (mounted volume)\n#\nFROM build as development\n\nENV SC_BUILD_TARGET=development \\\n  SC_DEVEL_MOUNT=/devel/services/storage/\n\nWORKDIR /devel\n\nRUN chown -R scu:scu \"${VIRTUAL_ENV}\"\n\n# NOTE: declaring VOLUMEs here makes troubles mounting\n#       the client's output folder to /devel/services/web/client.\n#       The latter ls no files\n\nENTRYPOINT [ \"/bin/sh\", \"services/storage/docker/entrypoint.sh\" ]\nCMD [\"/bin/sh\", \"services/storage/docker/boot.sh\"]\n# -------------------------- -------------------------------\n"
}