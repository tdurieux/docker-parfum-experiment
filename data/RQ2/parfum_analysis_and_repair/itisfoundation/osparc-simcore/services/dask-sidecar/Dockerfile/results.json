{
  "startTime": 1674246788297,
  "endTime": 1674246789330,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 85,
        "columnStart": 2,
        "columnEnd": 12
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 113,
        "lineEnd": 114,
        "columnStart": 2,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_VERSION=\"3.9.12\"\nFROM --platform=${TARGETPLATFORM} python:${PYTHON_VERSION}-slim-buster as base\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN echo \"I am running on $BUILDPLATFORM, building for $TARGETPLATFORM\" > /log\n#\n#  USAGE:\n#     cd sercices/dask-sidecar\n#     docker build -f Dockerfile -t dask-sidecar:prod --target production ../../\n#     docker run dask-sidecar:prod\n#\n#  REQUIRED: context expected at ``osparc-simcore/`` folder because we need access to osparc-simcore/packages\n\nLABEL maintainer=sanderegg\n\nRUN  --mount=type=cache,id=basecache,target=/var/cache/apt,mode=0755,sharing=locked \\\n  --mount=type=cache,id=baseapt,target=/var/lib/apt,mode=0755,sharing=locked \\\n  set -eux \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n  iputils-ping \\\n  curl \\\n  gosu \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* \\\n  # verify that the binary works\n  && gosu nobody true\n\n\n# simcore-user uid=8004(scu) gid=8004(scu) groups=8004(scu)\nENV SC_USER_ID=8004 \\\n  SC_USER_NAME=scu \\\n  SC_BUILD_TARGET=base \\\n  SC_BOOT_MODE=default\n\nRUN adduser \\\n  --uid ${SC_USER_ID} \\\n  --disabled-password \\\n  --gecos \"\" \\\n  --shell /bin/sh \\\n  --home /home/${SC_USER_NAME} \\\n  ${SC_USER_NAME}\n\n\nENV LANG=C.UTF-8 \\\n  PYTHONDONTWRITEBYTECODE=1 \\\n  VIRTUAL_ENV=/home/scu/.venv\n\nENV PATH=\"${VIRTUAL_ENV}/bin:$PATH\"\n\n# for ARM architecture this helps a lot VS building packages\nENV PIP_EXTRA_INDEX_URL=https://www.piwheels.org/simple\n\n\nEXPOSE 8080\nEXPOSE 8786\nEXPOSE 8787\n\n\n# -------------------------- Build stage -------------------\n# Installs build/package management tools and third party dependencies\n#\n# + /build             WORKDIR\n#\nFROM base as build\n\nENV SC_BUILD_TARGET=build\n\nRUN  --mount=type=cache,id=basecache,target=/var/cache/apt,mode=0755,sharing=locked \\\n  --mount=type=cache,id=baseapt,target=/var/lib/apt,mode=0755,sharing=locked \\\n  set -eux \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n  build-essential \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/*\n\n\n# NOTE: python virtualenv is used here such that installed packages may be moved to production image easily by copying the venv\nRUN python -m venv \"${VIRTUAL_ENV}\"\nRUN --mount=type=cache,mode=0777,target=/root/.cache/pip \\\n  pip install --no-cache-dir --upgrade \\\n  pip~=22.0 \\\n  wheel \\\n  setuptools\n\nWORKDIR /build\n\n# install base 3rd party dependencies (NOTE: this speeds up devel mode)\nCOPY  --chown=scu:scu services/dask-sidecar/requirements/_base.txt .\nCOPY  --chown=scu:scu services/dask-sidecar/requirements/_packages.txt .\nRUN --mount=type=cache,mode=0777,target=/root/.cache/pip \\\n  pip install --no-cache-dir \\\n  --requirement _base.txt \\\n  --requirement _packages\n\n# --------------------------Prod-depends-only stage -------------------\n# This stage is for production only dependencies that get partially wiped out afterwards (final docker image concerns)\n#\n#  + /build\n#    + services/dask-sidecar [scu:scu] WORKDIR\n#\nFROM build as prod-only-deps\n\nENV SC_BUILD_TARGET=prod-only-deps\n\nCOPY --chown=scu:scu packages /build/packages\nCOPY --chown=scu:scu services/dask-sidecar /build/services/dask-sidecar\n\nWORKDIR /build/services/dask-sidecar\n\nRUN --mount=type=cache,mode=0777,target=/root/.cache/pip \\\n  pip install --no-cache-dir \\\n  --requirement requirements/prod.txt\n\n# --------------------------Production stage -------------------\n# Final cleanup up to reduce image size and startup setup\n# Runs as scu (non-root user)\n#\n#  + /home/scu     $HOME = WORKDIR\n#    + services/dask-sidecar [scu:scu]\n#\nFROM base as production\n\nENV SC_BUILD_TARGET=production \\\n  SC_BOOT_MODE=production\n\nENV PYTHONOPTIMIZE=TRUE\n\nWORKDIR /home/scu\n\n# bring installed package without build tools\nCOPY --from=prod-only-deps --chown=scu:scu ${VIRTUAL_ENV} ${VIRTUAL_ENV}\n# copy docker entrypoint and boot scripts\nCOPY --chown=scu:scu services/dask-sidecar/docker services/dask-sidecar/docker\n\n\n# WARNING: This image is used for dask-scheduler and dask-worker.\n# In order to have the same healty entrypoint port\n# make sure dask worker is started as ``dask-worker --dashboard-address 8787``.\n# Otherwise the worker will take random ports to serve the /health entrypoint.\nHEALTHCHECK \\\n  --interval=10s \\\n  --timeout=5s \\\n  --start-period=5s \\\n  --retries=5 \\\n  CMD [\"curl\", \"-Lf\", \"http://127.0.0.1:8787/health\"]\n\nENTRYPOINT [ \"/bin/sh\", \"services/dask-sidecar/docker/entrypoint.sh\" ]\nCMD [\"/bin/sh\", \"services/dask-sidecar/docker/boot.sh\"]\n\n\n# --------------------------Development stage -------------------\n# Source code accessible in host but runs in container\n# Runs as scu with same gid/uid as host\n# Placed at the end to speed-up the build if images targeting production\n#\n#  + /devel         WORKDIR\n#    + services  (mounted volume)\n#\nFROM build as development\n\nENV SC_BUILD_TARGET=development\n\nWORKDIR /devel\nRUN chown -R scu:scu \"${VIRTUAL_ENV}\"\n\n# NOTE: devel mode does NOT have HEALTHCHECK\n\nENTRYPOINT [ \"/bin/sh\", \"services/dask-sidecar/docker/entrypoint.sh\" ]\nCMD [\"/bin/sh\", \"services/dask-sidecar/docker/boot.sh\"]\n"
}