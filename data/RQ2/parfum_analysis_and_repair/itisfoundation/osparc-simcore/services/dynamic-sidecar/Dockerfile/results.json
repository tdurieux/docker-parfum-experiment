{
  "startTime": 1674254326229,
  "endTime": 1674254327410,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 17,
        "columnStart": 2,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 67,
        "columnStart": 2,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_VERSION=\"3.9.12\"\nFROM python:${PYTHON_VERSION}-slim-buster as base\n#\n#  USAGE:\n#     cd sercices/dynamic-sidecar\n#     docker build -f Dockerfile -t dynamic-sidecar:prod --target production ../../\n#     docker run dynamic-sidecar:prod\n#\n#  REQUIRED: context expected at ``osparc-simcore/`` folder because we need access to osparc-simcore/packages\n\nLABEL maintainer=\"Andrei Neagu <neagu@itis.swiss>\"\n\nRUN set -eux && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y \\\n  curl \\\n  gosu \\\n  libmagic1 \\\n  && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  # verify that the binary works\n  gosu nobody true\n\n# simcore-user uid=8004(scu) gid=8004(scu) groups=8004(scu)\nENV SC_USER_ID=8004 \\\n  SC_USER_NAME=scu \\\n  SC_BUILD_TARGET=base \\\n  SC_BOOT_MODE=default\n\nRUN adduser \\\n  --uid ${SC_USER_ID} \\\n  --disabled-password \\\n  --gecos \"\" \\\n  --shell /bin/sh \\\n  --home /home/${SC_USER_NAME} \\\n  ${SC_USER_NAME}\n\n# Sets utf-8 encoding for Python et al\nENV LANG=C.UTF-8\n# Turns off writing .pyc files; superfluous on an ephemeral container.\nENV PYTHONDONTWRITEBYTECODE=1 \\\n  VIRTUAL_ENV=/home/scu/.venv\n# Ensures that the python and pip executables used\n# in the image will be those from our virtualenv.\nENV PATH=\"${VIRTUAL_ENV}/bin:$PATH\"\n# directory where dynamic-sidecar stores creates and shares\n# volumes between itself and the spawned containers\nENV DYNAMIC_SIDECAR_DY_VOLUMES_MOUNT_DIR=\"/dy-volumes\"\n\n# rclone installation\nARG R_CLONE_VERSION=\"1.58.0\"\nRUN curl -f --silent --location --remote-name \"https://downloads.rclone.org/v${R_CLONE_VERSION}/rclone-v${R_CLONE_VERSION}-linux-amd64.deb\" && \\\n  dpkg --install \"rclone-v${R_CLONE_VERSION}-linux-amd64.deb\" && \\\n  rm \"rclone-v${R_CLONE_VERSION}-linux-amd64.deb\" && \\\n  rclone --version\n\n# -------------------------- Build stage -------------------\n# Installs build/package management tools and third party dependencies\n#\n# + /build             WORKDIR\n#\nFROM base as build\n\nENV SC_BUILD_TARGET=build\n\nRUN apt-get update && \\\n  apt-get install -y --no-install-recommends \\\n  build-essential && rm -rf /var/lib/apt/lists/*;\n\n# NOTE: python virtualenv is used here such that installed\n# packages may be moved to production image easily by copying the venv\nRUN python -m venv ${VIRTUAL_ENV}\nRUN mkdir -p ${DYNAMIC_SIDECAR_DY_VOLUMES_MOUNT_DIR}\n\nRUN pip install --upgrade --no-cache-dir \\\n  pip~=22.0  \\\n  wheel \\\n  setuptools\n\nWORKDIR /build\n\n# install base 3rd party dependencies\n# NOTE: copies to /build to avoid overwriting later which would invalidate this layer\nCOPY --chown=scu:scu services/dynamic-sidecar/requirements/_base.txt .\nRUN pip --no-cache-dir install -r _base.txt\n\n# copy utility devops scripts\nCOPY --chown=scu:scu services/dynamic-sidecar/scripts/Makefile /home/scu\nCOPY --chown=root:root services/dynamic-sidecar/scripts/Makefile /root\n\n# --------------------------Prod-depends-only stage -------------------\n# This stage is for production only dependencies that get partially wiped out afterwards (final docker image concerns)\n#\n#  + /build\n#    + services/dynamic-sidecar [scu:scu] WORKDIR\n#\nFROM build as prod-only-deps\n\nENV SC_BUILD_TARGET prod-only-deps\n\nCOPY --chown=scu:scu packages /build/packages\nCOPY --chown=scu:scu services/dynamic-sidecar /build/services/dynamic-sidecar\n\nWORKDIR /build/services/dynamic-sidecar\n\nRUN pip --no-cache-dir install -r requirements/prod.txt &&\\\n  pip --no-cache-dir list -v\n\n# --------------------------Production stage -------------------\n# Final cleanup up to reduce image size and startup setup\n# Runs as scu (non-root user)\n#\n#  + /home/scu     $HOME = WORKDIR\n#    + services/dynamic-sidecar [scu:scu]\n#\nFROM base as production\n\nENV SC_BUILD_TARGET=production \\\n  SC_BOOT_MODE=production\n\nENV PYTHONOPTIMIZE=TRUE\n\nWORKDIR /home/scu\n\n# Starting from clean base image, copies pre-installed virtualenv from prod-only-deps\nCOPY --chown=scu:scu --from=prod-only-deps  ${VIRTUAL_ENV} ${VIRTUAL_ENV}\nCOPY --chown=scu:scu --from=prod-only-deps  ${DYNAMIC_SIDECAR_DY_VOLUMES_MOUNT_DIR} ${DYNAMIC_SIDECAR_DY_VOLUMES_MOUNT_DIR}\n\n# Copies booting scripts\nCOPY --chown=scu:scu services/dynamic-sidecar/docker services/dynamic-sidecar/docker\nRUN chmod +x services/dynamic-sidecar/docker/*.sh\n\n# disabled healthcheck as director-v2 is already taking care of it\n# in oder to have similar performance a more aggressive healethcek\n# would be required.\n# removing the healthchek would not cause any issues at this point\nHEALTHCHECK NONE\n\nEXPOSE 8000\n\nENTRYPOINT [ \"/bin/sh\", \"services/dynamic-sidecar/docker/entrypoint.sh\" ]\nCMD [\"/bin/sh\", \"services/dynamic-sidecar/docker/boot.sh\"]\n\n\n# --------------------------Development stage -------------------\n# Source code accessible in host but runs in container\n# Runs as myu with same gid/uid as host\n# Placed at the end to speed-up the build if images targeting production\n#\n#  + /devel         WORKDIR\n#    + services  (mounted volume)\n#\nFROM build as development\n\nENV SC_BUILD_TARGET=development \\\n  SC_BOOT_MODE=development\n\nWORKDIR /devel\n\nRUN chown -R scu:scu ${VIRTUAL_ENV}\nRUN chown -R scu:scu ${DYNAMIC_SIDECAR_DY_VOLUMES_MOUNT_DIR}\n\nEXPOSE 8000\nEXPOSE 3000\n\nENTRYPOINT [\"/bin/sh\", \"services/dynamic-sidecar/docker/entrypoint.sh\"]\nCMD [\"/bin/sh\", \"services/dynamic-sidecar/docker/boot.sh\"]\n"
}