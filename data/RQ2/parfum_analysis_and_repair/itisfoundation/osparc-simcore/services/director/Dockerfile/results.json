{
  "startTime": 1674255181375,
  "endTime": 1674255182142,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 2,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_VERSION=\"3.6.10\"\nFROM python:${PYTHON_VERSION}-slim-buster as base\n#\n#  USAGE:\n#     cd sercices/director\n#     docker build -f Dockerfile -t director:prod --target production ../../\n#     docker run director:prod\n#\n#  REQUIRED: context expected at ``osparc-simcore/`` folder because we need access to osparc-simcore/packages\n\nLABEL maintainer=sanderegg\n\nRUN set -eux && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y gosu && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  # verify that the binary works\n  gosu nobody true\n\n# simcore-user uid=8004(scu) gid=8004(scu) groups=8004(scu)\nENV SC_USER_ID=8004 \\\n      SC_USER_NAME=scu \\\n      SC_BUILD_TARGET=base \\\n      SC_BOOT_MODE=default\n\nRUN adduser \\\n      --uid ${SC_USER_ID} \\\n      --disabled-password \\\n      --gecos \"\" \\\n      --shell /bin/sh \\\n      --home /home/${SC_USER_NAME} \\\n      ${SC_USER_NAME}\n\n\n# Sets utf-8 encoding for Python et al\nENV LANG=C.UTF-8\n# Turns off writing .pyc files; superfluous on an ephemeral container.\nENV PYTHONDONTWRITEBYTECODE=1 \\\n      VIRTUAL_ENV=/home/scu/.venv\n# Ensures that the python and pip executables used\n# in the image will be those from our virtualenv.\nENV PATH=\"${VIRTUAL_ENV}/bin:$PATH\"\n\n# environment variables\nENV REGISTRY_AUTH='' \\\n      REGISTRY_USER='' \\\n      REGISTRY_PW='' \\\n      REGISTRY_URL='' \\\n      REGISTRY_VERSION='v2' \\\n      PUBLISHED_HOST_NAME='' \\\n      SIMCORE_SERVICES_NETWORK_NAME='' \\\n      EXTRA_HOSTS_SUFFIX='undefined'\n\n\nEXPOSE 8080\n\n# -------------------------- Build stage -------------------\n# Installs build/package management tools and third party dependencies\n#\n# + /build             WORKDIR\n#\n\nFROM base as build\n\nENV SC_BUILD_TARGET=build\n\nRUN apt-get update \\\n      &&  apt-get install -y --no-install-recommends \\\n      build-essential \\\n      git \\\n      && apt-get clean \\\n      && rm -rf /var/lib/apt/lists/*\n\n\n# NOTE: python virtualenv is used here such that installed packages may be moved to production image easily by copying the venv\nRUN python -m venv \"${VIRTUAL_ENV}\"\n\nRUN pip --no-cache-dir install --upgrade \\\n      pip~=21.3  \\\n      wheel \\\n      setuptools\n\n# copy director and dependencies\nCOPY  --chown=scu:scu packages /build/packages\nCOPY  --chown=scu:scu services/director /build/services/director\n\n# install base 3rd party dependencies (NOTE: this speeds up devel mode)\nRUN pip --no-cache-dir install -r /build/services/director/requirements/_base.txt\n\n# FIXME:\n# necessary to prevent duplicated files.\n# Will be removed when director is refactored using cookiecutter as this will not be necessary anymore\nCOPY --chown=scu:scu api/specs/common/schemas/node-meta-v0.0.1.json \\\n      /build/services/director/src/simcore_service_director/api/v0/oas-parts/schemas/node-meta-v0.0.1.json\n\n# --------------------------Prod-depends-only stage -------------------\n# This stage is for production only dependencies that get partially wiped out afterwards (final docker image concerns)\n#\n#  + /build\n#    + services/director [scu:scu] WORKDIR\n#\nFROM build as prod-only-deps\n\nWORKDIR /build/services/director\nENV SC_BUILD_TARGET=prod-only-deps\nRUN pip --no-cache-dir install -r requirements/prod.txt\n\n# --------------------------Production stage -------------------\n# Final cleanup up to reduce image size and startup setup\n# Runs as scu (non-root user)\n#\n#  + /home/scu     $HOME = WORKDIR\n#    + services/director [scu:scu]\n#\nFROM base as production\n\nENV SC_BUILD_TARGET=production \\\n      SC_BOOT_MODE=production\nENV PYTHONOPTIMIZE=TRUE\n\nWORKDIR /home/scu\n\n# bring installed package without build tools\nCOPY --from=prod-only-deps --chown=scu:scu ${VIRTUAL_ENV} ${VIRTUAL_ENV}\n\n# copy docker entrypoint and boot scripts\nCOPY --chown=scu:scu services/director/docker services/director/docker\nRUN chmod +x services/director/docker/*.sh\n\nHEALTHCHECK --interval=30s \\\n      --timeout=120s \\\n      --start-period=30s \\\n      --retries=3 \\\n      CMD [\"python3\", \"/home/scu/services/director/docker/healthcheck.py\", \"http://localhost:8080/v0/\"]\nENTRYPOINT [ \"services/director/docker/entrypoint.sh\" ]\nCMD [\"services/director/docker/boot.sh\"]\n\n\n# --------------------------Development stage -------------------\n# Source code accessible in host but runs in container\n# Runs as scu with same gid/uid as host\n# Placed at the end to speed-up the build if images targeting production\n#\n#  + /devel         WORKDIR\n#    + services  (mounted volume)\n#\nFROM build as development\n\nENV SC_BUILD_TARGET=development\nENV NODE_SCHEMA_LOCATION=../../../api/specs/common/schemas/node-meta-v0.0.1.json\nWORKDIR /devel\nRUN chown -R scu:scu \"${VIRTUAL_ENV}\"\nENTRYPOINT [ \"/bin/sh\", \"services/director/docker/entrypoint.sh\" ]\nCMD [\"/bin/sh\", \"services/director/docker/boot.sh\"]\n"
}