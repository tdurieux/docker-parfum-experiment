{
  "startTime": 1674216305169,
  "endTime": 1674216305892,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 68,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG DEVICE=cpu\n# Set to \"dev\" for dev deps\nARG STAGE=\"production\"\n\nFROM pytorch/pytorch:1.8.1-cuda11.1-cudnn8-runtime as build_gpu\n# Copy binaries from other images here\nRUN pip install --no-cache-dir --upgrade pip\n\nFROM python:3.8 as build_cpu\n# NOOP step on CPU\nFROM build_${DEVICE}\n\nENV STAGE=${STAGE} \\\n  PYTHONFAULTHANDLER=1 \\\n  PYTHONUNBUFFERED=1 \\\n  PYTHONHASHSEED=random \\\n  PIP_NO_CACHE_DIR=off \\\n  PIP_DISABLE_PIP_VERSION_CHECK=on \\\n  PIP_DEFAULT_TIMEOUT=100 \\\n  POETRY_VERSION=1.1.7 \\\n  POETRY_HOME=\"/usr/local/poetry\"\n\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y curl gcc make && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -f -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python \\\n    && ln -sf /usr/local/poetry/bin/poetry /usr/local/bin/poetry\n\n# Install dependencies.\nCOPY poetry.lock pyproject.toml /app/\n\nWORKDIR /app\nRUN poetry config virtualenvs.create false && \\\n poetry install --no-interaction --no-ansi --no-root $(/usr/bin/test \"$STAGE\" == production && echo \"--no-dev\")\n\n# Install the project.\nCOPY . /app/\nRUN poetry install --no-interaction --no-ansi $(/usr/bin/test \"$STAGE\" == production && echo \"--no-dev\")\n# If on GPU, we replace onnxruntime by onnxruntime-gpu.\nARG DEVICE=cpu\nRUN if [ \"$DEVICE\" = \"gpu\" ] ; then \\\n pip uninstall -y onnxruntime && pip install --no-cache-dir onnxruntime-gpu; fi\nENV CFG_PATH=\"/config/nlp_sa/conf.json\"\nENV PORT=8091\nCMD [\"sh\",\"-c\",\"umask 0002; python runner.py ${CFG_PATH} --port ${PORT}\"]\n"
}