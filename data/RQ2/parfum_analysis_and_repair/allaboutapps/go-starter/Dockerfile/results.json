{
  "startTime": 1674246561031,
  "endTime": 1674246564360,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 59,
        "columnStart": 7,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### -----------------------\n# --- Stage: development\n# --- Purpose: Local development environment\n# --- https://hub.docker.com/_/golang\n# --- https://github.com/microsoft/vscode-remote-try-go/blob/master/.devcontainer/Dockerfile\n### -----------------------\nFROM golang:1.17.9-buster AS development\n\n# Avoid warnings by switching to noninteractive\nENV DEBIAN_FRONTEND=noninteractive\n\n# Our Makefile / env fully supports parallel job execution\nENV MAKEFLAGS \"-j 8 --no-print-directory\"\n\n# postgresql-support: Add the official postgres repo to install the matching postgresql-client tools of your stack\n# https://wiki.postgresql.org/wiki/Apt\n# run lsb_release -c inside the container to pick the proper repository flavor\n# e.g. stretch=>stretch-pgdg, buster=>buster-pgdg\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main\" \\\n    | tee /etc/apt/sources.list.d/pgdg.list \\\n    && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc \\\n    | apt-key add -\n\n# Install required system dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n    #\n    # Mandadory minimal linux packages\n    # Installed at development stage and app stage\n    # Do not forget to add mandadory linux packages to the final app Dockerfile stage below!\n    #\n    # -- START MANDADORY --\n    ca-certificates \\\n    # --- END MANDADORY ---\n    #\n    # Development specific packages\n    # Only installed at development stage and NOT available in the final Docker stage\n    # based upon\n    # https://github.com/microsoft/vscode-remote-try-go/blob/master/.devcontainer/Dockerfile\n    # https://raw.githubusercontent.com/microsoft/vscode-dev-containers/master/script-library/common-debian.sh\n    #\n    # icu-devtools: https://stackoverflow.com/questions/58736399/how-to-get-vscode-liveshare-extension-working-when-running-inside-vscode-remote\n    # graphviz: https://github.com/google/pprof#building-pprof\n    # -- START DEVELOPMENT --\n    apt-utils \\\n    dialog \\\n    openssh-client \\\n    less \\\n    iproute2 \\\n    procps \\\n    lsb-release \\\n    locales \\\n    sudo \\\n    bash-completion \\\n    bsdmainutils \\\n    graphviz \\\n    xz-utils \\\n    postgresql-client-12 \\\n    icu-devtools \\\n    tmux \\\n    # --- END DEVELOPMENT ---\n    #\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# env/vscode support: LANG must be supported, requires installing the locale package first\n# https://github.com/Microsoft/vscode/issues/58015\n# https://stackoverflow.com/questions/28405902/how-to-set-the-locale-inside-a-debian-ubuntu-docker-container\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n    dpkg-reconfigure --frontend=noninteractive locales && \\\n    update-locale LANG=en_US.UTF-8\n\nENV LANG en_US.UTF-8\n\n# sql pgFormatter: Integrates with vscode-pgFormatter (we pin pgFormatter.pgFormatterPath for the extension to this version)\n# requires perl to be installed\n# https://github.com/bradymholt/vscode-pgFormatter/commits/master\n# https://github.com/darold/pgFormatter/releases\nRUN mkdir -p /tmp/pgFormatter \\\n    && cd /tmp/pgFormatter \\\n    && wget https://github.com/darold/pgFormatter/archive/v5.2.tar.gz \\\n    && tar xzf v5.2.tar.gz \\\n    && cd pgFormatter-5.2 \\\n    && perl Makefile.PL \\\n    && make && make install \\\n    && rm -rf /tmp/pgFormatter && rm v5.2.tar.gz\n\n# go gotestsum: (this package should NOT be installed via go get)\n# https://github.com/gotestyourself/gotestsum/releases\nRUN mkdir -p /tmp/gotestsum \\\n    && cd /tmp/gotestsum \\\n    && wget https://github.com/gotestyourself/gotestsum/releases/download/v1.8.0/gotestsum_1.8.0_linux_amd64.tar.gz \\\n    && tar xzf gotestsum_1.8.0_linux_amd64.tar.gz \\\n    && cp gotestsum /usr/local/bin/gotestsum \\\n    && rm -rf /tmp/gotestsum && rm gotestsum_1.8.0_linux_amd64.tar.gz\n\n# go linting: (this package should NOT be installed via go get)\n# https://github.com/golangci/golangci-lint#binary\n# https://github.com/golangci/golangci-lint/releases\nRUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \\\n    | sh -s -- -b $(go env GOPATH)/bin v1.45.2\n\n# go swagger: (this package should NOT be installed via go get)\n# https://github.com/go-swagger/go-swagger/releases\nRUN curl -f -o /usr/local/bin/swagger -L'#' \\\n    \"https://github.com/go-swagger/go-swagger/releases/download/v0.29.0/swagger_linux_amd64\" \\\n    && chmod +x /usr/local/bin/swagger\n\n# lichen: go license util\n# TODO: Install from static binary as soon as it becomes available.\n# https://github.com/uw-labs/lichen/tags\nRUN go install github.com/uw-labs/lichen@v0.1.5\n\n# cobra-cli: cobra cmd scaffolding generator\n# TODO: Install from static binary as soon as it becomes available.\n# https://github.com/spf13/cobra-cli/releases\nRUN go install github.com/spf13/cobra-cli@v1.3.0\n\n# watchexec\n# https://github.com/watchexec/watchexec/releases\nRUN mkdir -p /tmp/watchexec \\\n    && cd /tmp/watchexec \\\n    && wget https://github.com/watchexec/watchexec/releases/download/cli-v1.18.11/watchexec-1.18.11-x86_64-unknown-linux-musl.tar.xz \\\n    && tar xf watchexec-1.18.11-x86_64-unknown-linux-musl.tar.xz \\\n    && cp watchexec-1.18.11-x86_64-unknown-linux-musl/watchexec /usr/local/bin/watchexec \\\n    && rm -rf /tmp/watchexec && rm watchexec-1.18.11-x86_64-unknown-linux-musl.tar.xz\n\n# yq\n# https://github.com/mikefarah/yq/releases\nRUN mkdir -p /tmp/yq \\\n    && cd /tmp/yq \\\n    && wget https://github.com/mikefarah/yq/releases/download/v4.24.2/yq_linux_amd64.tar.gz \\\n    && tar xzf yq_linux_amd64.tar.gz \\\n    && cp yq_linux_amd64 /usr/local/bin/yq \\\n    && rm -rf /tmp/yq && rm yq_linux_amd64.tar.gz\n\n# gsdev\n# The sole purpose of the \"gsdev\" cli util is to provide a handy short command for the following (all args are passed):\n# go run -tags scripts /app/scripts/main.go \"$@\"\nRUN printf '#!/bin/bash\\nset -Eeo pipefail\\ncd /app && go run -tags scripts ./scripts/main.go \"$@\"' > /usr/bin/gsdev && chmod 755 /usr/bin/gsdev\n\n# linux permissions / vscode support: Add user to avoid linux file permission issues\n# Detail: Inside the container, any mounted files/folders will have the exact same permissions\n# as outside the container - including the owner user ID (UID) and group ID (GID).\n# Because of this, your container user will either need to have the same UID or be in a group with the same GID.\n# The actual name of the user / group does not matter. The first user on a machine typically gets a UID of 1000,\n# so most containers use this as the ID of the user to try to avoid this problem.\n# 2020-04: docker-compose does not support passing id -u / id -g as part of its config, therefore we assume uid 1000\n# https://code.visualstudio.com/docs/remote/containers-advanced#_adding-a-nonroot-user-to-your-dev-container\n# https://code.visualstudio.com/docs/remote/containers-advanced#_creating-a-nonroot-user\nARG USERNAME=development\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\nRUN groupadd --gid $USER_GID $USERNAME \\\n    && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n    && echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME\n\n# vscode support: cached extensions install directory\n# https://code.visualstudio.com/docs/remote/containers-advanced#_avoiding-extension-reinstalls-on-container-rebuild\nRUN mkdir -p /home/$USERNAME/.vscode-server/extensions \\\n    /home/$USERNAME/.vscode-server-insiders/extensions \\\n    && chown -R $USERNAME \\\n    /home/$USERNAME/.vscode-server \\\n    /home/$USERNAME/.vscode-server-insiders\n\n# linux permissions / vscode support: chown $GOPATH so $USERNAME can directly work with it\n# Note that this should be the final step after installing all build deps\nRUN mkdir -p /$GOPATH/pkg && chown -R $USERNAME /$GOPATH\n\n# $GOBIN is where our own compiled binaries will live and other go.mod / VSCode binaries will be installed.\n# It should always come AFTER our other $PATH segments and should be earliest targeted in stage \"builder\",\n# as /app/bin will the shadowed by a volume mount via docker-compose!\n# E.g. \"which golangci-lint\" should report \"/go/bin\" not \"/app/bin\" (where VSCode will place it).\n# https://github.com/go-modules-by-example/index/blob/master/010_tools/README.md#walk-through\nWORKDIR /app\nENV GOBIN /app/bin\nENV PATH $PATH:$GOBIN\n\n### -----------------------\n# --- Stage: builder\n# --- Purpose: Statically built binaries and CI environment\n### -----------------------\n\nFROM development as builder\nWORKDIR /app\nCOPY Makefile /app/Makefile\nCOPY go.mod /app/go.mod\nCOPY go.sum /app/go.sum\nRUN make modules\nCOPY tools.go /app/tools.go\nRUN make tools\nCOPY . /app/\nRUN make go-build\n\n### -----------------------\n# --- Stage: app\n# --- Purpose: Image for actual deployment\n# --- Prefer https://github.com/GoogleContainerTools/distroless over\n# --- debian:buster-slim https://hub.docker.com/_/debian (if you need apt-get).\n### -----------------------\n\n# Distroless images are minimal and lack shell access.\n# https://github.com/GoogleContainerTools/distroless/blob/master/base/README.md\n# The :debug image provides a busybox shell to enter (base-debian10 only, not static).\n# https://github.com/GoogleContainerTools/distroless#debug-images\nFROM gcr.io/distroless/base-debian10:debug as app\n\n# FROM debian:buster-slim as app\n# RUN apt-get update \\\n#     && apt-get install -y \\\n#     #\n#     # Mandadory minimal linux packages\n#     # Installed at development stage and app stage\n#     # Do not forget to add mandadory linux packages to the base development Dockerfile stage above!\n#     #\n#     # -- START MANDADORY --\n#     ca-certificates \\\n#     # --- END MANDADORY ---\n#     #\n#     && apt-get clean \\\n#     && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /app/bin/app /app/\nCOPY --from=builder /app/api/swagger.yml /app/api/\nCOPY --from=builder /app/assets /app/assets/\nCOPY --from=builder /app/migrations /app/migrations/\nCOPY --from=builder /app/web /app/web/\n\nWORKDIR /app\n\n# Must comply to vector form\n# https://github.com/GoogleContainerTools/distroless#entrypoints\n# Sample usage of this image:\n# docker run <image> help\n# docker run <image> db migrate\n# docker run <image> db seed\n# docker run <image> env\n# docker run <image> probe readiness\n# docker run <image> probe liveness\n# docker run <image> server\n# docker run <image> server --migrate\nENTRYPOINT [\"/app/app\"]\nCMD [\"server\", \"--migrate\"]\n"
}