{
  "startTime": 1674249800009,
  "endTime": 1674249800841,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 22,
        "lineEnd": 28,
        "columnStart": 1,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 32,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 28,
        "columnStart": 1,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedDockerfile": "## force cloning a new\n\n## To prepare an image suitable as base for Gitlab CI use\n# export CI_REGISTRY_IMAGE=\"registry.gitlab.com/retroshare/retroshare:base\"\n# docker build -t \"${CI_REGISTRY_IMAGE}\" -f base.Dockerfile .\n\n## To push it to gitlab CI registry you need first to login and the to push\n# docker login registry.gitlab.com\n# docker push \"${CI_REGISTRY_IMAGE}\"\n\n## To run the container\n# docker run -it -p 127.0.0.1:9092:9092 \"${CI_REGISTRY_IMAGE}\" retroshare-service --jsonApiPort 9092 --jsonApiBindAddress 0.0.0.0\n\nFROM ubuntu:21.10\n\nENV DEBIAN_FRONTEND=noninteractive\nENV APT_UNAT=\"--assume-yes --quiet\"\n\nRUN apt-get update $APT_UNAT && \\\n\tapt-get upgrade --show-upgraded $APT_UNAT && \\\n\tapt-get clean $APT_UNAT && \\\n\tapt-get install -y --no-install-recommends $APT_UNAT \\\n\t\tbash build-essential cimg-dev libssl-dev libbz2-dev \\\n\t\tlibminiupnpc-dev \\\n\t\tlibsqlite3-dev libsqlcipher-dev \\\n\t\tpkg-config libz-dev \\\n\t\tlibxapian-dev doxygen rapidjson-dev \\\n\t\tgit cmake curl python3 && rm -rf /var/lib/apt/lists/*;\n\n## Avoid git cloning spuriously failing with\n#  server certificate verification failed. CAfile: none CRLfile: none\nRUN apt-get install -y --no-install-recommends $APT_UNAT --reinstall \\\n\tca-certificates && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone --depth 1 https://github.com/aetilius/pHash.git && \\\n\trm -rf pHash-build && mkdir pHash-build && cd pHash-build && \\\n\tcmake -B. -H../pHash -DCMAKE_INSTALL_PREFIX=/usr && \\\n\tmake -j$(nproc) && make install && cd .. && \\\n\trm -rf pHash-build pHash\n\nARG FRESHCLONE=0\nARG REPO_URL=https://gitlab.com/RetroShare/RetroShare.git\nARG REPO_BRANCH=master\nARG REPO_DEPTH=\"--depth 2000\"\nRUN git clone $REPO_DEPTH $REPO_URL -b $REPO_BRANCH && cd RetroShare && \\\n\tgit fetch --tags && \\\n\tgit submodule update --init --remote --force \\\n\t\tlibbitdht/ libretroshare/ openpgpsdk/ && \\\n\tcd ..\n\nRUN \\\n\tmkdir RetroShare-build && cd RetroShare-build && \\\n\tcmake -B. -S../RetroShare/retroshare-service \\\n\t\t-DRS_FORUM_DEEP_INDEX=ON -DRS_JSON_API=ON && \\\n\tmake -j$(nproc) && make install && \\\n\tcd .. && rm -rf RetroShare-build\n"
}