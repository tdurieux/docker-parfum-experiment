{
  "startTime": 1674253417481,
  "endTime": 1674253419051,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 62,
        "columnEnd": 80
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 32,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n# Environment variables and args\n\nARG NOTEBOOK_USER=root\nARG NOTEBOOK_UID=1000\nENV USER ${NOTEBOOK_USER}\nENV NOTEBOOK_UID ${NOTEBOOK_UID}\nENV HOME /home/${NOTEBOOK_USER}\n\nWORKDIR ${HOME}\n\nUSER root\n# Downloads the package lists from the repositories and \"updates\" them\n# to get information on the newest versions of packages and their dependencies.\nRUN apt-get update\n\n# Install 'curl': Command line tool that allows you to transfer data from or to a remote server.\n# With curl, you can download or upload data using HTTP, HTTPS, SCP, SFTP, and FTP.\nRUN apt-get install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;\n\n\n### Building image START\n\n# workaround bug https://grigorkh.medium.com/fix-tzdata-hangs-docker-image-build-cdb52cc3360d\nENV TZ=Asia/Dubai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nRUN apt update\nRUN apt install --no-install-recommends -y tzdata && rm -rf /var/lib/apt/lists/*;\n\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        wget \\\n        python3.8-dev \\\n        python3-skimage \\\n        python3-opencv \\\n        python3-pip \\\n        #required by pandas\n        libgfortran5 \\\n        libopenblas-dev \\\n        libatlas-base-dev \\\n        libboost-python1.65-dev \\\n        libboost-all-dev \\\n        libgflags-dev \\\n        #Directly incorporate Google glog projects from Github instead of consume it.\n        #See https://github.com/google/glog#incorporating-glog-into-a-cmake-project\n        #Not install google glog into env and incorporate into cmake build directly.\n        libgoogle-glog-dev \\\n        libhdf5-serial-dev \\\n        libleveldb-dev \\\n        liblmdb-dev \\\n        libopencv-dev \\\n        libprotobuf-dev \\\n        libsnappy-dev \\\n        libmatio-dev \\\n        protobuf-compiler && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV CAFFE_ROOT=/opt/caffe\nWORKDIR $CAFFE_ROOT\n\n#update cmake version from default 3.10 to latest\nRUN pip3 install --no-cache-dir --upgrade pip && \\\n    pip3 install --no-cache-dir --upgrade cmake && \\\n    cmake --version\n\n#Hack for libboost-python binding when both python2 and python3 present.   \nRUN cd /usr/lib/x86_64-linux-gnu && \\\n    unlink libboost_python.so && \\\n    unlink libboost_python.a && \\\n    ln -s libboost_python-py36.so libboost_python.so && \\\n    ln -s libboost_python-py36.a libboost_python.a && \\\n    cd -\n\n#Start Building\nRUN git clone https://github.com/foss-for-synopsys-dwc-arc-processors/synopsys-caffe.git . && \\\n    pip3 install --no-cache-dir --upgrade pip && \\\n    cd python && for req in $(cat requirements.txt) pydot; do pip3 install --no-cache-dir $req; done && cd .. && \\\n    mkdir build && cd build && \\\n    cmake -DCPU_ONLY=1 .. && \\\n    make -j\"$(nproc)\" && \\\n    make runtest\n\nENV PYCAFFE_ROOT $CAFFE_ROOT/python\nENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH\nENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n\n### Building image END\n\n\n# install the notebook package\nRUN pip3 install --no-cache-dir notebook jupyterlab\n\n# Copy notebooks\n\nCOPY ./ ${HOME}/Notebooks/\n\nRUN chown -R ${NOTEBOOK_UID} ${HOME}\nUSER ${USER}\n\n\nRUN echo \"$PATH\"\n\n### hack for bug inside Notebooks\nRUN pip3 uninstall -y scipy && pip3 install --no-cache-dir scipy\nRUN pip3 uninstall -y pyyaml &&  python3 -m pip install PyYAML\n\n# Set root to Notebooks\nWORKDIR ${HOME}/Notebooks/\n"
}