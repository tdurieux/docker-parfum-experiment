{
  "startTime": 1674252138545,
  "endTime": 1674252139043,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos/systemd:latest\n\n# Reduce Docker image size per https://blog.replicated.com/refactoring-a-dockerfile-for-image-size/\n# - perl-Digest-SHA: installs shasum\nRUN yum update -y && \\\n    yum upgrade -y && \\\n    yum install -y epel-release && \\\n    yum install -y \\\n        bind-utils \\\n        perl-Digest-SHA \\\n        python-pip \\\n        rsyslog \\\n        sudo \\\n        vim \\\n        wget && \\\n        yum clean all && rm -rf /var/cache/yum\n\n# Install jq. Oddly, there's no RPM for jq, so we install the binary directly. https://serverfault.com/a/768061/199943\nRUN wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && \\\n    chmod +x ./jq && \\\n    cp jq /usr/bin\n\n# Install the AWS CLI per https://docs.aws.amazon.com/cli/latest/userguide/installing.html.\nRUN pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir --upgrade setuptools && \\\n    pip install --no-cache-dir awscli --upgrade\n\n# Install the latest version of Docker, Consumer Edition\nRUN yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo && \\\n    yum -y install docker-ce && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# We run systemd as our container process. Systemd can spawn other forks as necessary to help us simulate a real-world\n# CentOS systemd environment.\nCMD [\"/usr/sbin/init\"]\n\n# NOTE! This Docker container should be run with the following runtime options to ensure that systemd works correctly:\n# Although this bind-mounted volume would appear at first glance not to work on MacOS or Windows, because those OSs are\n# running a VM to execute Docker and only a limited set of paths are mounted directly from the host, Docker is able to\n# use the Linux VM's privileges to execute systemd correctly.\n#\n# docker run -d --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro gruntwork/centos-test\n"
}