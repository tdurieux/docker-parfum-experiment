{
  "startTime": 1674248395742,
  "endTime": 1674248396961,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 8,
        "columnEnd": 90
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# A simple dev environment container for benchbase.\n#\n# - Build:\n#\n#   - Full image:\n#\n#     docker build -t benchbase -f Dockerfile ../..\n#\n#   - Dev only:\n#\n#     # Skip copying and building the source into the devcontainer image since we will map it in later.\n#     docker build -t benchbase-dev -f Dockerfile --target devcontainer ../..\n#\n# - Run:\n#\n#   - Full image:\n#\n#     # Map the config to read in and a place for the results to be written out.\n#     docker run -it --rm --name benchbase -v $PWD/config:/benchbase/config -v $PWD/results:/benchbase/results --env BENCHBASE_PROFILE=postgres benchbase -- <benchbase args>\n#\n#   - Dev image:\n#\n#     # Map the whole source directory into the container.\n#     # Optionally build the source as the container launch executable.\n#     docker run -it --rm --name benchbase-dev -v $PWD:/benchbase benchbase-dev mvn clean package -P postgres\n\nFROM --platform=linux maven:3.8.5-eclipse-temurin-17 AS devcontainer\n\n# Add a containeruser that allows vscode/codespaces to map the local host user\n# (often uid 1000) to some non-root user inside the container.\nARG CONTAINERUSER_UID=1000\nARG CONTAINERUSER_GID=1000\nRUN groupadd --non-unique --gid ${CONTAINERUSER_GID} containergroup \\\n    && useradd --non-unique --create-home --no-user-group --comment 'Container User' \\\n        --uid ${CONTAINERUSER_UID} --gid ${CONTAINERUSER_GID} containeruser\nRUN mkdir -p /benchbase/results && chown -R containeruser:containergroup /benchbase/\nUSER containeruser\nENV MAVEN_CONFIG=/home/containeruser/.m2\nWORKDIR /benchbase\n\n# When running the devcontainer, just launch an interactive shell by default.\nENTRYPOINT [\"/bin/bash\", \"-l\"]\n\n# Copy the full source into the container image.\n# Assumes the context is given as the root of the repo.\n\n# Preload some dependencies.\nCOPY --chown=containeruser:containergroup pom.xml /benchbase/pom.xml\nCOPY --chown=containeruser:containergroup .git/ /benchbase/.git/\nARG MAVEN_OPTS\nRUN mvn -B --file pom.xml initialize \\\n    && rm -rf /benchbase/.git /benchbase/target /benchbase/pom.xml\n\n# Add an additional layer that also includes a built copy of the source.\nFROM devcontainer AS fullimage\n\nUSER containeruser\n\nVOLUME /benchbase/results\n\nCOPY --chown=containeruser:containergroup ./ /benchbase/\n# Uncomment for slightly faster incremental testing (since intermediate layers can be cached)\n# at the expense of additional docker image layers.\nARG TEST_TARGET=\nRUN mvn -B --file pom.xml process-resources compile ${TEST_TARGET}\n# Build all of the profiles into the image.\nARG BENCHBASE_PROFILES=\"cockroachdb mariadb mysql postgres spanner phoenix sqlserver\"\nRUN for profile in ${BENCHBASE_PROFILES}; do \\\n        mvn -B --file pom.xml package -P $profile -D skipTests || exit 1; \\\n        mkdir -p profiles/$profile; \\\n        tar -C profiles/$profile/ --strip-components=1 -xvzf target/benchbase-$profile.tgz || exit 1; \\\n        rm -rf profiles/$profile/data/ && ln -s ../../data profiles/$profile/data; \\\n    done \\\n    && test -d data \\\n    && test \"`readlink -f profiles/$(echo $BENCHBASE_PROFILES | awk '{ print $1 }')/data`\" = \"/benchbase/data\" \\\n    && mvn -B --file pom.xml clean \\\n    && rm -rf ~/.m2/repository/* \\\n    && rm -rf .git/ && rm target/benchbase-$profile.tgz\n\nENV BENCHBASE_PROFILE=postgres\nENTRYPOINT [\"/benchbase/docker/benchbase/entrypoint.sh\"]\nCMD [\"--help\"]\n"
}