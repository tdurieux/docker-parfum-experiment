{
  "startTime": 1674254458579,
  "endTime": 1674254459328,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 127
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 127
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nMAINTAINER Yiling Zhou <zyl@jiagouyun.com>\n\nARG TARGETARCH\n\nARG RESOURCE_BASE_URL=\"https://static.guance.com/dataflux-func/resource\"\nARG NODE_PKG_X64=\"node-v12.16.3-linux-x64.tar.gz\"\nARG NODE_PKG_ARM64=\"node-v12.16.3-linux-arm64.tar.gz\"\nARG ORACLE_CLIENT_PKG_X64=\"oracle-instantclient-basic-linux.x64-19.6.0.0.0dbru.zip\"\nARG ORACLE_CLIENT_PKG_ARM64=\"oracle-instantclient-basic-linux.arm64-19.10.0.0.0dbru.zip\"\n\nENV TARGETARCH ${TARGETARCH}\nENV PATH \"$PATH:/usr/src/resource/node-v12.16.3-linux-x64/bin:/usr/src/resource/node-v12.16.3-linux-arm64/bin\"\n\nUSER root\n\n# Default data folder\nRUN mkdir -p /data/extra-python-packages && \\\n    mkdir -p /data/resources && \\\n    mkdir -p /data/logs && \\\n    mkdir -p /data/sqldump\n\n# Install\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y iputils-ping vim wget curl telnet zip unzip unar \\\n                python3.8-dev python3-pip default-libmysqlclient-dev build-essential mysql-client redis-tools libpq-dev libaio1 && \\\n                update-alternatives --install /usr/bin/python python /usr/bin/python3.8 100 && rm -rf /var/lib/apt/lists/*;\n\n# Download, extract and install resources\nWORKDIR /usr/src/resource\nRUN case ${TARGETARCH} in \\\n        \"amd64\" ) \\\n            wget -q ${RESOURCE_BASE_URL}/${NODE_PKG_X64} && \\\n                tar -xf ${NODE_PKG_X64} && \\\n            wget -q ${RESOURCE_BASE_URL}/${ORACLE_CLIENT_PKG_X64} && \\\n                unzip ${ORACLE_CLIENT_PKG_X64} -d /opt/oracle && \\\n                sh -c \"echo /opt/oracle/instantclient_19_6 > /etc/ld.so.conf.d/oracle-instantclient.conf\" && \\\n                ldconfig && \\\n            rm /usr/src/resource/${NODE_PKG_X64} && \\\n            rm /usr/src/resource/${ORACLE_CLIENT_PKG_X64} \\\n            ;; \\\n\n        \"arm64\" ) \\\n            wget -q ${RESOURCE_BASE_URL}/${NODE_PKG_ARM64} && \\\n                tar -xf ${NODE_PKG_ARM64} && \\\n            wget -q ${RESOURCE_BASE_URL}/${ORACLE_CLIENT_PKG_ARM64} && \\\n                unzip ${ORACLE_CLIENT_PKG_ARM64} -d /opt/oracle && \\\n                sh -c \"echo /opt/oracle/instantclient_19_10 > /etc/ld.so.conf.d/oracle-instantclient.conf\" && \\\n                ldconfig && \\\n            rm /usr/src/resource/${NODE_PKG_ARM64} && \\\n            rm /usr/src/resource/${ORACLE_CLIENT_PKG_ARM64} \\\n            ;; \\\n    esac\n\n# Install requirements (server)\nWORKDIR /usr/src/base\nCOPY package.json package-lock.json requirements.txt requirements-arm64.txt ./\nRUN npm ci --registry=http://registry.npm.taobao.org --disturl=http://npm.taobao.org/dist && \\\n    case ${TARGETARCH} in \\\n        \"amd64\" ) \\\n            pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ -r ./requirements.txt \\\n            ;; \\\n\n        \"arm64\" ) \\\n            pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ -r ./requirements-arm64.txt \\\n            ;; \\\n    esac\n\n# Install requirements (client)\nWORKDIR /usr/src/base/client\nCOPY client/package.json client/package-lock.json ./\nRUN npm ci --registry=http://registry.npm.taobao.org --disturl=http://npm.taobao.org/dist --unsafe-perm\n\n# Some fix\n# COPY misc/openssl.cnf /etc/ssl/openssl.cnf\n\n# Build project\nWORKDIR /usr/src/app\nCOPY . .\nRUN ln -s /usr/src/base/node_modules ./node_modules && \\\n    ln -s /usr/src/base/client/node_modules ./client/node_modules && \\\n    cd /usr/src/app/client && \\\n        npm run build\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# Run Web server\n# EXPOSE 8088\n# CMD ./run-server.sh\n# Run Worker\n# CMD ./run-worker.sh\n# Run Worker beat\n# CMD ./run-beat.sh\n"
}