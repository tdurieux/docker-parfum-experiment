{
  "startTime": 1674251343354,
  "endTime": 1674251343862,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 95
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 95
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY common.sh lib.sh /\nRUN /common.sh\n\nCOPY cmake.sh /\nRUN /cmake.sh\n\nCOPY xargo.sh /\nRUN /xargo.sh\n\nRUN dpkg --add-architecture i386 && apt-get update && \\\n    apt-get install -y --assume-yes --no-install-recommends libz-mingw-w64-dev && rm -rf /var/lib/apt/lists/*;\n\nCOPY wine.sh /\nRUN /wine.sh\n\nRUN apt-get update && apt-get install -y --assume-yes --no-install-recommends g++-mingw-w64-x86-64 && rm -rf /var/lib/apt/lists/*;\n\n# run-detectors are responsible for calling the correct interpreter for exe\n# files. For some reason it does not work inside a docker container (it works\n# fine in the host). So we replace the usual paths of run-detectors to run wine\n# directly. This only affects the guest, we are not messing up with the host.\n#\n# See /usr/share/doc/binfmt-support/detectors\nRUN mkdir -p /usr/lib/binfmt-support/ && \\\n    rm -f /usr/lib/binfmt-support/run-detectors /usr/bin/run-detectors && \\\n    ln -s /usr/bin/wine /usr/lib/binfmt-support/run-detectors && \\\n    ln -s /usr/bin/wine /usr/bin/run-detectors\n\nCOPY windows-entry.sh /\nENTRYPOINT [\"/windows-entry.sh\"]\n\nENV CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc \\\n    CARGO_TARGET_X86_64_PC_WINDOWS_GNU_RUNNER=wine \\\n    CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc-posix \\\n    CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++-posix \\\n    BINDGEN_EXTRA_CLANG_ARGS_x86_64_pc_windows_gnu=\"--sysroot=/usr/x86_64-w64-mingw32\"\n"
}