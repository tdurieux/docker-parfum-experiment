{
  "startTime": 1674219258762,
  "endTime": 1674219260327,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:jessie\n\nENV PYTHONIOENCODING UTF-8\n\n# pypy is installed from a package manager because it takes so long to build.\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential \\\n    libcurl4-openssl-dev \\\n    libffi-dev \\\n    tk-dev \\\n    xz-utils \\\n    curl \\\n    lsb-release \\\n    git \\\n    libmemcached-dev \\\n    make \\\n    liblzma-dev \\\n    libreadline-dev \\\n    libbz2-dev \\\n    llvm \\\n    libncurses5-dev \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    wget \\\n    pypy \\\n    python-openssl \\\n    libncursesw5-dev \\\n    zlib1g-dev \\\n    pkg-config && rm -rf /var/lib/apt/lists/*;\n\n# update libssl to 1.0.2 from backports to support Python 3.7\nRUN echo \"deb http://deb.debian.org/debian jessie-backports main\" | tee /etc/apt/sources.list.d/jessie-backports.list\nRUN apt-get update && apt-get install --no-install-recommends -y -t jessie-backports libssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# check for mandatory build arguments\nARG CELERY_USER=developer\nRUN : \"${CELERY_USER:?CELERY_USER build argument needs to be set and non-empty.}\"\n\n# set some args for create user dir\nENV HOME /home/$CELERY_USER\nENV PATH=\"$HOME/.pyenv/bin:$PATH\"\n\n# set tools download dir\nENV PROVISIONING /provisioning\n\n# copy and run setup scripts\nWORKDIR $provisioning\n\n# install libcouchbase tool\nCOPY DOcker/scripts/install-couchbase.sh .\nRUN SH install-couchbase.sh\n\n# create linux user is developer\nCOPY DOcker/scripts/create-linux-user.sh .\nRUN SH create-linux-user.sh\n\n# install pyenv tool\n# swap to the celery user so packages and celery are not installed as root\nUSER $CELERY_USER\nCOPY docker/scripts/install-pyenv.sh .\nRUN sh install-pyenv.sh\n\n# install celery lib\nWORKDIR $HOME\nCOPY --chown=1000:1000 requirements $HOME/requirements\nCOPY --chown=1000:1000 docker/entrypoint /entrypoint\nRUN chmod gu+x /entrypoint\n\n# define the local pyenvs\nRUN pyenv local python3.6 python3.5 python3.4 python2.7 python3.7\n\nRUN pyenv exec python2.7 -m pip install --upgrade pip setuptools && \\\n    pyenv exec python3.4 -m pip install --upgrade pip setuptools && \\\n    pyenv exec python3.5 -m pip install --upgrade pip setuptools && \\\n    pyenv exec python3.6 -m pip install --upgrade pip setuptools && \\\n    pyenv exec python3.7 -m pip install --upgrade pip setuptools\n\n# setup one celery environment for basic development use\nRUN pyenv exec python3.7 -m pip install \\\n        -r requirements/default.txt \\\n        -r requirements/test.txt \\\n        -r requirements/test-ci-default.txt \\\n        -r requirements/docs.txt \\\n        -r requirements/test-integration.txt \\\n        -r requirements/pkgutils.txt && \\\n    pyenv exec python3.6 -m pip install \\\n        -r requirements/default.txt \\\n        -r requirements/test.txt \\\n        -r requirements/test-ci-default.txt \\\n        -r requirements/docs.txt \\\n        -r requirements/test-integration.txt \\\n        -r requirements/pkgutils.txt && \\\n    pyenv exec python3.5 -m pip install \\\n        -r requirements/default.txt \\\n        -r requirements/test.txt \\\n        -r requirements/test-ci-default.txt \\\n        -r requirements/docs.txt \\\n        -r requirements/test-integration.txt \\\n        -r requirements/pkgutils.txt && \\\n    pyenv exec python3.4 -m pip install \\\n        -r requirements/default.txt \\\n        -r requirements/test.txt \\\n        -r requirements/test-ci-default.txt \\\n        -r requirements/docs.txt \\\n        -r requirements/test-integration.txt \\\n        -r requirements/pkgutils.txt && \\\n    pyenv exec python2.7 -m pip install \\\n        -r requirements/default.txt \\\n        -r requirements/test.txt \\\n        -r requirements/test-ci-default.txt \\\n        -r requirements/docs.txt \\\n        -r requirements/test-integration.txt \\\n        -r requirements/pkgutils.txt\n\nCOPY --chown=1000:1000 . $HOME/celery\n\nWORKDIR $HOME/celery\n\n# Setup the entrypoint, this ensures pyenv is initialized when a container is started\n# and that any compiled files from earlier steps or from moutns are removed to avoid\n# py.test failing with an ImportMismatchError\nENTRYPOINT [\"/entrypoint.sh\"]\n"
}