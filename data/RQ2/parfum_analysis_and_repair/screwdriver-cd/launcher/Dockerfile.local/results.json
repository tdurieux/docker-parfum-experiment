{
  "startTime": 1674246500975,
  "endTime": 1674246502487,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 6,
        "columnEnd": 104
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 6,
        "columnEnd": 120
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 6,
        "columnEnd": 95
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 6,
        "columnEnd": 101
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 6,
        "columnEnd": 118
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 5,
        "columnEnd": 33
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 6,
        "columnEnd": 120
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 6,
        "columnEnd": 118
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.12 AS base\nLABEL MAINTAINER=\"Screwdriver Team <screwdriver.cd>\"\n\nARG TARGETOS TARGETARCH\nRUN echo \"Building for ${TARGETOS}_${TARGETARCH}\"\n\nWORKDIR /opt/sd\n\nFROM base AS base-amd64\nRUN set -x \\\n   # Alpine ships with musl instead of glibc (this fixes the symlink)\n   && mkdir /lib64 \\\n   && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 \\\n   # Also, missing https for some magic reason\n   && apk add --no-cache --update ca-certificates \\\n   && apk add --no-cache --virtual .build-dependencies wget gpgme unzip \\\n   # Install Habitat\n   && mkdir -p /hab/bin /opt/sd/bin \\\n   # Download Habitat Binary\n   && wget -O hab.tar.gz 'https://packages.chef.io/files/stable/habitat/0.79.1/hab-x86_64-linux.tar.gz' \\\n   && tar -C . -ozxvf hab.tar.gz \\\n   && mv hab-*/hab /hab/bin/hab \\\n   && chmod +x /hab/bin/hab \\\n   # @TODO Remove this, I don't think it belongs here.  We should use /hab/bin/hab instead.\n   && cp /hab/bin/hab /opt/sd/bin/hab \\\n   # Install Habitat packages\n   && /hab/bin/hab pkg install core/bash core/git core/zip core/unzip core/kmod core/iptables core/docker/19.03.8 core/wget core/sed core/jq-static/1.6 \\\n   # Install curl 7.54.1 since we use that version in artifact-bookend\n   # https://github.com/screwdriver-cd/artifact-bookend/blob/master/commands.txt\n   && /hab/bin/hab pkg install core/curl/7.54.1 \\\n   # Cleanup Habitat Files\n   && rm -rf /hab/cache /opt/sd/hab.tar.gz /opt/sd/hab-* \\\n   # Cleanup docs and man pages (how could this go wrong)\n   && find /hab -name doc -exec rm -r {} + \\\n   && find /hab -name docs -exec rm -r {} + \\\n   && find /hab -name man -exec rm -r {} + \\\n   # bin link bash if not present\n   && if [[ -z $(command -v bash) ]]; then /hab/bin/hab pkg binlink core/bash bash ; fi\n\nFROM base AS base-arm64\nRUN set -x \\\n   # Alpine ships with musl instead of glibc (this fixes the symlink)\n   && mkdir /lib64 \\\n   && ln -s /lib/libc.musl-aarch64.so.1 /lib64/ld-linux-aarch64.so.1 \\\n   && apk add --no-cache --update ca-certificates \\\n   && apk add --no-cache --virtual .build-dependencies gpgme \\\n   # Donwload pkgs needed in container\n   && apk add --no-cache composer wget zip unzip git bash iptables sed docker jq curl kmod\n\n# Install common dependencies by target architcture\nFROM base-${TARGETARCH} AS final\nRUN set -x \\\n   # Download Log Service\n   && wget -q -O - https://github.com/screwdriver-cd/log-service/releases/latest \\\n      | egrep -o \"/screwdriver-cd/log-service/releases/download/v[0-9.]*/log-service_${TARGETOS}_${TARGETARCH}\" \\\n      | wget --base=http://github.com/ -i - -O logservice \\\n   && chmod +x logservice \\\n   # Download Meta CLI\n   && wget -q -O - https://github.com/screwdriver-cd/meta-cli/releases/latest \\\n      | egrep -o \"/screwdriver-cd/meta-cli/releases/download/v[0-9.]*/meta-cli_${TARGETOS}_${TARGETARCH}\" \\\n      | wget --base=http://github.com/ -i - -O meta \\\n   && chmod +x meta \\\n   # Download sd-step\n   && wget -q -O - https://github.com/screwdriver-cd/sd-step/releases/latest \\\n      | egrep -o \"/screwdriver-cd/sd-step/releases/download/v[0-9.]*/sd-step_${TARGETOS}_${TARGETARCH}\" \\\n      | wget --base=http://github.com/ -i - -O sd-step \\\n   && chmod +x sd-step \\\n   # Download sd-cmd\n   && wget -q -O - https://github.com/screwdriver-cd/sd-cmd/releases/latest \\\n      | egrep -o \"/screwdriver-cd/sd-cmd/releases/download/v[0-9.]*/sd-cmd_${TARGETOS}_${TARGETARCH}\" \\\n      | wget --base=http://github.com/ -i - -O sd-cmd \\\n   && chmod +x sd-cmd \\\n   # Download store-cli\n   && wget -q -O - https://github.com/screwdriver-cd/store-cli/releases/latest \\\n      | egrep -o \"/screwdriver-cd/store-cli/releases/download/v[0-9.]*/store-cli_${TARGETOS}_${TARGETARCH}\" \\\n      | wget --base=http://github.com/ -i - -O store-cli \\\n   && chmod +x store-cli \\\n   # Download Tini Static\n   && wget -q -O - https://github.com/krallin/tini/releases/latest \\\n      | egrep -o '/krallin/tini/releases/download/v[0-9.]*/tini-static' \\\n      | head -1 \\\n      | wget --base=http://github.com/ -i - -O tini-static \\\n   && wget -q -O - https://github.com/krallin/tini/releases/latest \\\n      | egrep -o '/krallin/tini/releases/download/v[0-9.]*/tini-static.asc' \\\n      | wget --base=http://github.com/ -i - -O tini-static.asc \\\n   && found=''; \\\n      ( gpg --batch --no-tty --keyserver keyserver.ubuntu.com --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 || \\\n      gpg --batch --no-tty --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 || \\\n      gpg --batch --no-tty --keyserver pgp.mit.edu --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 || \\\n      gpg --batch --no-tty --keyserver keyserver.pgp.com --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 || \\\n      gpg --batch --no-tty --keyserver hkp://ipv4.ha.pool.sks-keyservers.net --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 || \\\n      gpg --batch --no-tty --keyserver ha.pool.sks-keyservers.net --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7) \\\n\n   && found=yes && break; \\\n     test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7\" && exit 1; \\\n     gpg --batch --verify tini-static.asc \\\n   && rm tini-static.asc \\\n   && mv tini-static tini \\\n   && chmod +x tini \\\n   # Download dumb-init\n   && wget -O /usr/local/bin/dumb-init \"https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_${TARGETARCH}\" \\\n   && chmod +x /usr/local/bin/dumb-init \\\n   && cp /usr/local/bin/dumb-init /opt/sd/dumb-init \\\n   # Install Sonar scanner cli\n   && wget -O sonarscanner-cli-linux.zip 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip' \\\n   && wget -O sonarscanner-cli-macosx.zip 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-macosx.zip' \\\n   && unzip -q sonarscanner-cli-linux.zip \\\n   && unzip -q sonarscanner-cli-macosx.zip \\\n   && mv sonar-scanner-*-linux sonarscanner-cli-linux \\\n   && mv sonar-scanner-*-macosx sonarscanner-cli-macosx \\\n   # Install skope\n   && wget -q -O skopeo-linux.tar.gz 'https://github.com/screwdriver-cd/sd-packages/releases/download/v0.0.30/skopeo-linux.tar.gz' \\\n   && tar -C . -ozxvf skopeo-linux.tar.gz \\\n   && chmod +x skopeo \\\n   # Install zstd\n   && wget -q -O zstd-cli-linux.tar.gz 'https://github.com/screwdriver-cd/sd-packages/releases/download/v0.0.30/zstd-cli-linux.tar.gz' \\\n   && wget -q -O zstd-cli-macosx.tar.gz 'https://github.com/screwdriver-cd/sd-packages/releases/download/v0.0.30/zstd-cli-macosx.tar.gz' \\\n   && tar -C . -ozxvf zstd-cli-linux.tar.gz \\\n   && mv zstd zstd-cli-linux \\\n   && tar -C . -ozxvf zstd-cli-macosx.tar.gz \\\n   && mv zstd zstd-cli-macosx \\\n   && chmod +x zstd-cli-linux \\\n   && chmod +x zstd-cli-macosx \\\n   # Cleanup Skopeo and Sonar scanner cli files\n   && rm -rf /opt/sd/skopeo-linux.tar.gz /opt/sd/sonarscanner-cli-linux.zip /opt/sd/sonarscanner-cli-macosx.zip /opt/sd/sonar-scanner-*-linux /opt/sd/sonar-scanner-*-macosx \\\n   # Cleanup Zstd cli files\n   && rm -rf /opt/sd/zstd-cli-linux.tar.gz /opt/sd/zstd-cli-macosx.tar.gz \\\n   # Cleanup packages\n   && apk del --purge .build-dependencies\n\n# Copy optional entrypoint script to the image\nCOPY Docker/launcher_entrypoint.sh /opt/sd/launcher_entrypoint.sh\n\nCOPY launcher /opt/sd/launch\n\n# Copy wrapper script to the image\nCOPY Docker/run.sh /opt/sd/run.sh\nCOPY Docker/local_run.sh /opt/sd/local_run.sh\n\nVOLUME /opt/sd\nVOLUME /hab\n\n# Set Entrypoint\nENTRYPOINT [\"/opt/sd/launcher_entrypoint.sh\"]\n"
}