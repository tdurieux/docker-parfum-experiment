{
  "startTime": 1674220978771,
  "endTime": 1674220980636,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 161,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 144,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 161,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 5,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "FROM neurodebian:xenial-non-free\nMAINTAINER John Pellman <john.pellman@childmind.org>\n\n# create scratch directories for singularity\nRUN mkdir /scratch && mkdir /local-scratch && mkdir -p /code && mkdir -p /cpac_resources\n\n# install wget\nRUN apt-get update && apt-get install --no-install-recommends -y wget curl && rm -rf /var/lib/apt/lists/*;\n\n# Install the validator\nRUN curl -f -sL https://deb.nodesource.com/setup_4.x | bash - && \\\n     apt-get install --no-install-recommends -y nodejs && \\\n     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN npm install -g bids-validator && npm cache clean --force;\n\n# Install Ubuntu dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      build-essential \\\n      cmake \\\n      git \\\n      graphviz \\\n      graphviz-dev \\\n      gsl-bin \\\n      libcanberra-gtk-module \\\n      libexpat1-dev \\\n      libgiftiio-dev \\\n      libglib2.0-dev \\\n      libglu1-mesa \\\n      libglu1-mesa-dev \\\n      libjpeg-progs \\\n      libgl1-mesa-dri \\\n      libglw1-mesa \\\n      libxml2 \\\n      libxml2-dev \\\n      libxext-dev \\\n      libxft2 \\\n      libxft-dev \\\n      libxi-dev \\\n      libxmu-headers \\\n      libxmu-dev \\\n      libxpm-dev \\\n      libxslt1-dev \\\n      m4 \\\n      make \\\n      mesa-common-dev \\\n      mesa-utils \\\n      netpbm \\\n      pkg-config \\\n      tcsh \\\n      unzip \\\n      xvfb \\\n      xauth \\\n      zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install 16.04 dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      dh-autoreconf \\\n      libgsl-dev \\\n      libmotif-dev \\\n      libtool \\\n      libx11-dev \\\n      libxext-dev \\\n      x11proto-xext-dev \\\n      x11proto-print-dev \\\n      xutils-dev && rm -rf /var/lib/apt/lists/*;\n\n# Compiles libxp- this is necessary for some newer versions of Ubuntu\n# where the is no Debian package available.\nRUN git clone git://anongit.freedesktop.org/xorg/lib/libXp /tmp/libXp && \\\n    cd /tmp/libXp && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    make install && \\\n    cd / && \\\n    rm -rf /tmp/libXp\n\n# Installing and setting up c3d\nRUN mkdir -p /opt/c3d && \\\n    curl -f -sSL \"https://downloads.sourceforge.net/project/c3d/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz\" \\\n    | tar -xzC /opt/c3d --strip-components 1\nENV C3DPATH /opt/c3d/\nENV PATH $C3DPATH/bin:$PATH\n\n# install miniconda\nRUN wget -q https://repo.continuum.io/miniconda/Miniconda-3.8.3-Linux-x86_64.sh && \\\n    bash Miniconda-3.8.3-Linux-x86_64.sh -b -p /usr/local/miniconda && \\\n    rm Miniconda-3.8.3-Linux-x86_64.sh\n\n# update path to include conda\nENV PATH=/usr/local/miniconda/bin:$PATH\n\n# install conda dependencies\nRUN conda install -y \\\n      cython \\\n      ipython \\\n      jinja2==2.7.2 \\\n      matplotlib \\\n      networkx==1.11 \\\n      nose \\\n      numpy==1.11 \\\n      pandas \\\n      pip \\\n      pyyaml \\\n      scipy \\\n      traits \\\n      wxpython\n\n# install python dependencies\nRUN pip install --no-cache-dir \\\n      boto3 \\\n      configparser \\\n      fs==0.5.4 \\\n      future==0.15.2 \\\n      lockfile \\\n      memory_profiler \\\n      nibabel \\\n      nipype==0.13.1 \\\n      patsy \\\n      psutil \\\n      prov \\\n      pygraphviz \\\n      simplejson\n\nRUN pip install --no-cache-dir git+https://github.com/ccraddock/INDI-Tools.git\n\n# install AFNI\nCOPY required_afni_pkgs.txt /opt/required_afni_pkgs.txt\nRUN libs_path=/usr/lib/x86_64-linux-gnu && \\\n    if [ -f $libs_path/libgsl.so.19 ]; then \\\n           ln $libs_path/libgsl.so.19 $libs_path/libgsl.so.0; \\\n    fi && \\\n    mkdir -p /opt/afni && \\\n    wget -q https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz && \\\n    tar zxv -C /opt/afni --strip-components=1 -f linux_openmp_64.tgz $(cat /opt/required_afni_pkgs.txt) && \\\n    rm -rf linux_openmp_64.tgz\n\n# set up afni\nENV PATH=/opt/afni:$PATH\n\n# install FSL\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    fsl-core \\\n                    fsl-atlases \\\n                    fsl-mni152-templates && rm -rf /var/lib/apt/lists/*;\n\n# setup fsl environment\nENV FSLDIR=/usr/share/fsl/5.0 \\\n    FSLOUTPUTTYPE=NIFTI_GZ \\\n    FSLMULTIFILEQUIT=TRUE \\\n    POSSUMDIR=/usr/share/fsl/5.0 \\\n    LD_LIBRARY_PATH=/usr/lib/fsl/5.0:$LD_LIBRARY_PATH \\\n    FSLTCLSH=/usr/bin/tclsh \\\n    FSLWISH=/usr/bin/wish \\\n    PATH=/usr/lib/fsl/5.0:$PATH\n\n# install ANTs\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n    ants && rm -rf /var/lib/apt/lists/*;\n\n# install cpac resources\nRUN cd /tmp && \\\n    wget -q https://fcon_1000.projects.nitrc.org/indi/cpac_resources.tar.gz && \\\n    tar xfz cpac_resources.tar.gz && \\\n    cd cpac_image_resources && \\\n    cp -n MNI_3mm/* $FSLDIR/data/standard && \\\n    cp -n MNI_4mm/* $FSLDIR/data/standard && \\\n    cp -n symmetric/* $FSLDIR/data/standard && \\\n    cp -nr tissuepriors/2mm $FSLDIR/data/standard/tissuepriors && \\\n    cp -nr tissuepriors/3mm $FSLDIR/data/standard/tissuepriors && \\\n    cp -n HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz $FSLDIR/data/atlases/HarvardOxford && rm cpac_resources.tar.gz\n\n# install cpac templates\nCOPY cpac_templates.tar.gz /cpac_resources/cpac_templates.tar.gz\nRUN cd cpac_resources && \\\n    tar xzvf /cpac_resources/cpac_templates.tar.gz && \\\n    rm -f /cpac_resources/cpac_templates.tar.gz\n\n# install cpac\nRUN pip install --no-cache-dir git+https://github.com/FCP-INDI/C-PAC.git@v1.1.0\n#RUN pwd && pip install git+https://github.com/ccraddock/C-PAC.git\n\n# make directory for nipype\nRUN mkdir /.nipype && \\\n    chmod 777 /.nipype\n\n# clean up\nRUN apt-get clean && \\\n    apt-get autoremove -y && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# copy container scripts\nCOPY version /code/version\nCOPY bids_utils.py /code/bids_utils.py\nCOPY run.py /code/run.py\n\n# make the run.py executable\nRUN chmod +x /code/run.py\n\n# copy useful pipeline scripts\nCOPY default_pipeline.yaml /cpac_resources/default_pipeline.yaml\nCOPY test_pipeline.yaml /cpac_resources/test_pipeline.yaml\n\nENTRYPOINT [\"/code/run.py\"]\n"
}