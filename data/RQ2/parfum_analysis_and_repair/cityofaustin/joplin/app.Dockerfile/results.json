{
  "startTime": 1674247072194,
  "endTime": 1674247075678,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 20,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 20,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "########################################################\n# joplin-common\n\nFROM cityofaustin/joplin-base:1a73da0 as joplin-common\n\n# Install Python dependencies\nCOPY \"$PWD/Pipfile\" ./Pipfile\nCOPY \"$PWD/Pipfile.lock\" ./Pipfile.lock\n# Create requirements.txt from Pipfile\nRUN pipenv lock --requirements > ./requirements.txt\nRUN pip install --no-cache-dir --disable-pip-version-check --requirement ./requirements.txt\n\n# Set Working Directory\nRUN mkdir /app\nWORKDIR /app\n\n# Copy over project files\nCOPY \"$PWD/joplin\" /app/joplin\nCOPY \"$PWD/media\" /app\nCOPY \"$PWD/scripts\" /app/scripts\nCOPY \"$PWD/docker-entrypoint.sh\" /app/docker-entrypoint.sh\nCOPY \"$PWD/gunicorn.conf.py\" /app/gunicorn.conf.py\n\n########################################################\n# joplin-common => joplin-local\n\nFROM joplin-common as joplin-local\n\nENV DEPLOYMENT_MODE \"LOCAL\"\n\n# Run Migrations\nENTRYPOINT [\"./docker-entrypoint.sh\"]\n\nCMD [\"python\", \"./joplin/manage.py\", \"runserver\", \"0.0.0.0:80\"]\n\n########################################################\n# joplin-common => joplin-deployed\n\nFROM joplin-common as joplin-deployed\n\n# Install nodejs dependencies\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get update; apt-get -y --no-install-recommends install nodejs && rm -rf /var/lib/apt/lists/*;\nRUN npm install --global yarn && npm cache clean --force;\n\n# Build nodejs dependencies for deployed builds\nWORKDIR /app/joplin\nRUN npm rebuild node-sass\nRUN yarn; yarn build\nWORKDIR /app\n\n# Start the Joplin server\n# Entrypoint must be executed manually since heroku has a 60 second time limit for entrypoint scripts\n# we add an extra timeout and debug level to be generous with our server log\nCMD [\"gunicorn\", \"-c\", \"gunicorn.conf.py\", \"joplin.wsgi:application\"]\n\n########################################################\n# joplin-common => joplin-deployed => joplin-review\n\nFROM joplin-deployed as joplin-review\n\nENV DEPLOYMENT_MODE \"REVIEW\"\n\n########################################################\n# joplin-common => joplin-deployed => joplin-staging\n\nFROM joplin-deployed as joplin-staging\n\nENV DEPLOYMENT_MODE \"STAGING\"\nRUN rm -rf /app/joplin/db\n\n########################################################\n# joplin-common => joplin-deployed => joplin-prod\n\nFROM joplin-deployed as joplin-prod\n\nENV DEPLOYMENT_MODE \"PRODUCTION\"\nRUN rm -rf /app/joplin/db\n"
}