{
  "startTime": 1674252161915,
  "endTime": 1674252162926,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.cn-hangzhou.aliyuncs.com/taotao-cloud-project/taotao-cloud-openjdk17:amd64 as builder\n\nWORKDIR /root\n\nADD ./build/libs/taotao-cloud-sys-biz-2022.07.jar ./\n\nRUN java -Djarmode=layertools -jar taotao-cloud-sys-biz-2022.07.jar extract\n\n# FROM registry.cn-hangzhou.aliyuncs.com/taotao-cloud-project/taotao-cloud-skywalking:openjdk-17-8.6.0\n# FROM registry.cn-hangzhou.aliyuncs.com/taotao-cloud-project/taotao-cloud-openjdk17:amd64\nFROM registry.cn-hangzhou.aliyuncs.com/taotao-cloud-project/taotao-cloud-skywalking:8.8.1\n\nARG BACKEND_SERVICE=192.168.10.200:11800\nARG AGENT_AUTHENTICATION=taotao-cloud\nARG DINGDING_TOKEN_ID=xxx\nARG DINGDING_SECRET=xxx\nARG TAOTAO_CLOUD_MAIL_PASSWORD=xxxx\nARG APP_NAME=taotao-cloud-sys\nARG APP_VERSION=2022.07\nARG JAR=${APP_NAME}-${VERSION}\nARG JAR_NAME=${JAR}.jar\nARG APP_PORT=33337\nARG PRROFILES=dev\n\nLABEL application_name=${APP_NAME}\nLABEL application_version=${APP_VERSION}\nLABEL org.opencontainers.image.authors=981376577@qq.com\n\nENV TZ=Asia/Shanghai\nENV DINGDING_TOKEN_ID=${DINGDING_TOKEN_ID}\nENV DINGDING_SECRET=${DINGDING_SECRET}\nENV APP_NAME=${APP_NAME}\nENV VERSION=${APP_VERSION}\nENV JAR_NAME=${APP_NAME}-${VERSION}.jar\nENV BACKEND_SERVICE=${BACKEND_SERVICE}\nENV AGENT_AUTHENTICATION=${AGENT_AUTHENTICATION}\nENV TAOTAO_CLOUD_MAIL_PASSWORD=${TAOTAO_CLOUD_MAIL_PASSWORD}\nENV PRROFILES=${PRROFILES}\n\nENV JAVA_OPTIONS=\"-Xms2048m -Xmx2048m -Xmn1280m \\\n                  -Xss512k \\\n                  -XX:MaxDirectMemorySize=1024m \\\n                  -XX:MetaspaceSize=256m \\\n                  -XX:MaxMetaspaceSize=512m \\\n                  -XX:ReservedCodeCacheSize=256m \\\n                  -XX:+DisableExplicitGC \\\n                  -XX:MaxGCPauseMillis=50 \\\n                  -XX:-UseBiasedLocking \\\n                  -XX:+UseCountedLoopSafepoints \\\n                  -XX:StartFlightRecording=disk=true,maxsize=4096m,maxage=3d \\\n                  -XX:-OmitStackTraceInFastThrow \\\n                  -XX:+UnlockDiagnosticVMOptions \\\n                  -XX:+UnlockExperimentalVMOptions \\\n                  -XX:SurvivorRatio=8 \\\n                  -XX:+UseCompressedOops \\\n                  -XX:+UseCompressedClassPointers \\\n                  -XX:+SegmentedCodeCache \\\n                  -XX:+PrintCommandLineFlags \\\n                  -XX:+ExplicitGCInvokesConcurrent \\\n                  -XX:+HeapDumpOnOutOfMemoryError \\\n                  -XX:+ShowCodeDetailsInExceptionMessages \\\n                  -XX:ParallelGCThreads=4 \\\n                  -Xlog:async \\\n                  -XX:AsyncLogBufferSize=409600 \\\n                  -Xlog:gc*=debug:file=/root/logs/${APP_NAME}/gc.log:utctime,level,tags:filecount=50,filesize=100M \\\n                  -Xlog:jit+compilation=debug:file=/root/logs/${APP_NAME}/jit.compile.log:utctime,level,tags:filecount=10,filesize=100M \\\n                  -Xlog:safepoint=debug:file=/root/logs/${APP_NAME}/safepoint%t.log:utctime,level,tags:filecount=10,filesize=10M \\\n                  -verbose:gc \\\n                  -Dnetworkaddress.cache.ttl=10 \\\n                  -Djava.security.egd=file:/dev/./urandom \\\n                  -Dfile.encoding=utf-8 \\\n                  --add-opens java.base/java.security=ALL-UNNAMED \\\n                  --add-opens java.base/jdk.internal.misc=ALL-UNNAMED \\\n                  --add-opens java.base/java.text=ALL-UNNAMED \\\n                  --add-opens java.base/java.nio=ALL-UNNAMED \\\n                  --add-opens java.base/jdk.internal.access=ALL-UNNAMED \\\n                  --add-opens java.base/java.time=ALL-UNNAMED \\\n                  --add-opens java.base/java.io=ALL-UNNAMED \\\n                  --add-opens java.base/java.net=ALL-UNNAMED \\\n                  --add-opens java.base/java.lang=ALL-UNNAMED \\\n                  --add-opens java.base/java.lang.reflect=ALL-UNNAMED \\\n                  --add-opens java.base/java.util=ALL-UNNAMED \\\n                  --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED \\\n                  --add-opens java.base/sun.reflect.annotation=ALL-UNNAMED \\\n                  --add-opens java.base/java.math=ALL-UNNAMED \\\n                  --add-exports java.desktop/sun.awt=ALL-UNNAMED \\\n                  --add-opens java.desktop/sun.awt=ALL-UNNAMED \\\n                  -Dspring.profiles.active=${PRROFILES} \\\n                  -javaagent:/skywalking/agent/skywalking-agent.jar \\\n                  -Dskywalking.agent.service_name=${APP_NAME} \\\n                  -Dskywalking.agent.authentication=${AGENT_AUTHENTICATION} \\\n                  -Dskywalking.logging.file_name=${APP_NAME}.skywalking.log \\\n                  -Dskywalking.logging.level=INFO \\\n                  -Dskywalking.logging.dir=/root/logs/${APP_NAME} \\\n                  -Dskywalking.collector.backend_service=${BACKEND_SERVICE} \"\n\nUSER root\n\nWORKDIR /root\n\nRUN ln -sf /usr/share/zoneinfo/$TZ /etc/localtime \\\n\t  && echo $TZ > /etc/timezone \\\n    && mkdir -p /root/logs/${APP_NAME} \\\n\t  && touch /root/logs/${APP_NAME}/jit.compile.log /root/logs/${APP_NAME}/gc.log \\\n    && sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories \\\n    && apk add --no-cache curl\n\n# RUN apk update && apk add libreoffice\n# RUN apk add --no-cache msttcorefonts-installer fontconfig\n# RUN update-ms-fonts\n#\n# # Google fonts\n# RUN wget https://github.com/google/fonts/archive/master.tar.gz -O gf.tar.gz --no-check-certificate\n# RUN tar -xf gf.tar.gz\n# RUN mkdir -p /usr/share/fonts/truetype/google-fonts\n# RUN find $PWD/fonts-master/ -name \"*.ttf\" -exec install -m644 {} /usr/share/fonts/truetype/google-fonts/ \\; || return 1\n# RUN rm -f gf.tar.gz\n# RUN fc-cache -f && rm -rf /var/cache/*\n\nVOLUME /root/logs\n\nEXPOSE ${APP_PORT}\n\nCOPY --from=builder /root/dependencies/ ./\nRUN true\nCOPY --from=builder /root/spring-boot-loader/ ./\nRUN true\nCOPY --from=builder /root/snapshot-dependencies/ ./\nRUN true\nCOPY --from=builder /root/application/ ./\nRUN true\n\nHEALTHCHECK --interval=120s --timeout=60s --retries=5 CMD curl -fs http://127.0.0.1:${APP_PORT}/actuator/health || exit 1\n\nENTRYPOINT sleep 10; java ${JAVA_OPTIONS} org.springframework.boot.loader.JarLauncher\n\n                  #堆内存控制\n#ENV JAVA_OPTIONS=\"-Xms2048m -Xmx2048m -Xmn1280m \\\n#                  # 线程栈大小控制 \\\n#                  -Xss512k \\\n#                  # 直接内存（各种 Direct Buffer）大小控制 \\\n#                  -XX:MaxDirectMemorySize=1024m \\\n#                  # 元空间控制 \\\n#                  -XX:MetaspaceSize=256m \\\n#                  # 元空间最大控制 \\\n#                  -XX:MaxMetaspaceSize=512m \\\n#                  # JIT 即时编译后（C1 C2 编译器优化）的代码占用内存 \\\n#                  -XX:ReservedCodeCacheSize=256m \\\n#                  # 关闭显示 GC（System.gc()触发的 FullGC），防止 netty 这种误检测内存泄漏显示调用 \\\n#                  -XX:+DisableExplicitGC \\\n#                  # 目标最大 STW（Stop-the-world） 时间，这个越小，GC 占用 CPU 资源，占用内存资源就越多，微服务吞吐量就越小，但是延迟低。这个需要做成可配置的 \\\n#                  -XX:MaxGCPauseMillis=50 \\\n#                  #禁用偏向锁，偏向锁其实未来会被完全移除（参考：），目前咱们都是高并发的环境，偏向锁基本没啥用并且还有负面影响 \\\n#                  -XX:-UseBiasedLocking \\\n#                  #防止大有界循环带来的迟迟不进入安全点导致 GC STW 时间过长 \\\n#                  -XX:+UseCountedLoopSafepoints \\\n#                  # 这个参数是指Java 应用程序启动 JFR 记录 \\\n#                  -XX:StartFlightRecording=disk=true,maxsize=4096m,maxage=3d \\\n#                  # 这个参数是指定每个线程的本地缓冲区大小（以字节为单位 \\\n#                  -XX:FlightRecorderOptions=defaultrecording=true,disk=true,maxchunksize=128m \\\n#                  # 禁用定时安全点任务，没必要，咱们不是那种热点代码经常改变，资源珍贵的场景，并且如果是 ZGC 本身就会定时进入安全点进行 GC 检查，更没必要了 \\\n#                  -XX:GuaranteedSafepointInterval=0 \\\n#                  # 关闭堆栈省略：这个只会省略 JDK 内部的异常，比如 NullPointerException 应用已经对于大量报错的时候输出大量堆栈导致性能压力的优化 \\\n#                  -XX:-OmitStackTraceInFastThrow \\\n#                  -XX:+UnlockDiagnosticVMOptions \\\n#                  -XX:+UnlockExperimentalVMOptions \\\n#                  -XX:SurvivorRatio=8 \\\n#                  -XX:+UseCompressedOops \\\n#                  -XX:+UseCompressedClassPointers \\\n#                  -XX:+SegmentedCodeCache \\\n#                  -XX:+PrintCommandLineFlags \\\n#                  -XX:+ExplicitGCInvokesConcurrent \\\n#                  -XX:+HeapDumpOnOutOfMemoryError \\\n#                  -XX:+ShowCodeDetailsInExceptionMessages \\\n#                  -XX:ParallelGCThreads=4 \\\n#                  -Xlog:async \\\n#                  -XX:AsyncLogBufferSize=409600 \\\n#                  # gc日志 \\\n#                  -Xlog:gc*=debug:file=/root/logs/${APP_NAME}/gc.log:utctime,level,tags:filecount=50,filesize=100M \\\n#                  # JIT 编译日志 \\\n#                  -Xlog:jit+compilation=debug:file=/root/logs/${APP_NAME}/jit.compile.log:utctime,level,tags:filecount=10,filesize=100M \\\n#                  # Safepoint日志 \\\n#                  -Xlog:safepoint=debug:file=/root/logs/${APP_NAME}/safepoint%t.log:utctime,level,tags:filecount=10,filesize=10M \\\n#                  -verbose:gc \\\n#                  # 将 DNS 缓存降低为 10s 过期，k8s 内部有很多通过域名解析的资源（通过 k8s 的 coreDNS），解析的 ip 可能会过期，漂移成新的 ip，默认的 30s 有点久，改成 10s，但是这会增加 coreDNS 的压力 \\\n#                  -Dnetworkaddress.cache.ttl=10 \\\n#                  # 更换 random 为 urandom 避免高并发加密证书通信的时候的生成随机数带来的阻塞（例如高并发 https 请求，高并发 mysql 连接通信 \\\n#                  -Djava.security.egd=file:/dev/./urandom \\\n#                  # 指定编码为 UTF-8，其实 Java 18 之后默认编码就是 UTF-8 了，这样避免不同操作系统编译带来的差异（Windows 默认是 GB2312，Linux 默认是 UTF-8 \\\n#                  -Dfile.encoding=utf-8 \\\n#                  --add-opens java.base/java.security=ALL-UNNAMED \\\n#                  --add-opens java.base/jdk.internal.misc=ALL-UNNAMED \\\n#                  --add-opens java.base/java.text=ALL-UNNAMED \\\n#                  --add-opens java.base/java.nio=ALL-UNNAMED \\\n#                  --add-opens java.base/jdk.internal.access=ALL-UNNAMED \\\n#                  --add-opens java.base/java.time=ALL-UNNAMED \\\n#                  --add-opens java.base/java.io=ALL-UNNAMED \\\n#                  --add-opens java.base/java.net=ALL-UNNAMED \\\n#                  --add-opens java.base/java.lang=ALL-UNNAMED \\\n#                  --add-opens java.base/java.lang.reflect=ALL-UNNAMED \\\n#                  --add-opens java.base/java.util=ALL-UNNAMED \\\n#                  --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED \\\n#                  --add-opens java.base/sun.reflect.annotation=ALL-UNNAMED \\\n#                  --add-opens java.base/java.math=ALL-UNNAMED \\\n#                  --add-exports java.desktop/sun.awt=ALL-UNNAMED \\\n#                  --add-opens java.desktop/sun.awt=ALL-UNNAMED \\\n#                  -Dspring.profiles.active=${PRROFILES} \\\n#                  -javaagent:/skywalking/agent/skywalking-agent.jar \\\n#                  -Dskywalking.agent.service_name=${APP_NAME} \\\n#                  -Dskywalking.agent.authentication=${AGENT_AUTHENTICATION} \\\n#                  -Dskywalking.logging.file_name=${APP_NAME}.skywalking.log \\\n#                  -Dskywalking.logging.level=INFO \\\n#                  -Dskywalking.logging.dir=/root/logs/${APP_NAME} \\\n#                  -Dskywalking.collector.backend_service=${BACKEND_SERVICE} \"\n"
}