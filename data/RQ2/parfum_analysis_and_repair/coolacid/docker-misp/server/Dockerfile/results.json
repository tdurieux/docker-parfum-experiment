{
  "startTime": 1674216926549,
  "endTime": 1674216927857,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 122,
        "columnEnd": 133
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM composer:2.2 as composer-build\n    ARG MISP_TAG\n    WORKDIR /tmp\n    ADD https://raw.githubusercontent.com/MISP/MISP/${MISP_TAG}/app/composer.json /tmp\n    RUN composer install --ignore-platform-reqs && \\\n     composer require jakub-onderka/openid-connect-php:1.0.0-rc1 --ignore-platform-reqs\n\nFROM debian:bullseye-slim as php-build\n    RUN apt-get update; apt-get install -y --no-install-recommends \\\n        gcc \\\n        make \\\n        libfuzzy-dev \\\n        ca-certificates \\\n        php \\\n        php-dev \\\n        php-pear \\\n        librdkafka-dev \\\n        git \\\n        && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*\n\n        RUN pecl channel-update pecl.php.net\n        RUN cp \"/usr/lib/$(gcc -dumpmachine)\"/libfuzzy.* /usr/lib; pecl install ssdeep && pecl install rdkafka\n        RUN git clone --recursive --depth=1 https://github.com/kjdev/php-ext-brotli.git && cd php-ext-brotli && phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install\n\n\nFROM debian:bullseye-slim as python-build\n    RUN apt-get update; apt-get install -y --no-install-recommends \\\n        gcc \\\n        git \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        python3-setuptools \\\n        python3-wheel \\\n        libfuzzy-dev \\\n        libffi-dev \\\n        ca-certificates \\\n        && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*\n\n    RUN mkdir /wheels\n\n    WORKDIR /tmp\n\n    RUN git clone --depth 1 https://github.com/CybOXProject/mixbox.git; \\\n        cd mixbox || exit; python3 setup.py bdist_wheel -d /wheels; \\\n        sed -i 's/-e //g' requirements.txt; pip3 wheel -r requirements.txt --no-cache-dir -w /wheels/\n\n    # install python-maec\n    RUN git clone --depth 1 https://github.com/MAECProject/python-maec.git; \\\n        cd python-maec || exit; python3 setup.py bdist_wheel -d /wheels\n\n    # install python-cybox\n    RUN git clone --depth 1 https://github.com/CybOXProject/python-cybox.git; \\\n        cd python-cybox || exit; python3 setup.py bdist_wheel -d /wheels; \\\n        sed -i 's/-e //g' requirements.txt; pip3 wheel -r requirements.txt --no-cache-dir -w /wheels/\n\n    # install python stix\n    RUN git clone --depth 1 https://github.com/STIXProject/python-stix.git; \\\n        cd python-stix || exit; python3 setup.py bdist_wheel -d /wheels; \\\n        sed -i 's/-e //g' requirements.txt; pip3 wheel -r requirements.txt --no-cache-dir -w /wheels/\n\n    # install STIX2.0 library to support STIX 2.0 export:\n    # Original Requirements has a bunch of non-required pacakges, force it to only grab wheels for deps from setup.py\n    RUN git clone --depth 1 https://github.com/MISP/cti-python-stix2.git; \\\n        cd cti-python-stix2 || exit; python3 setup.py bdist_wheel -d /wheels; \\\n        echo \"-e .\" > requirements.txt; pip3 wheel -r requirements.txt --no-cache-dir -w /wheels/\n\n    # install PyMISP\n    RUN git clone --depth 1 https://github.com/MISP/PyMISP.git; \\\n        cd PyMISP || exit; python3 setup.py bdist_wheel -d /wheels\n\n    # install pydeep\n    RUN git clone --depth 1 https://github.com/coolacid/pydeep.git; \\\n        cd pydeep || exit; python3 setup.py bdist_wheel -d /wheels\n\n    # Grab other modules we need\n    RUN pip3 wheel --no-cache-dir -w /wheels/ plyara pyzmq redis python-magic lief\n\n    # Remove extra packages due to incompatible requirements.txt files\n    WORKDIR /wheels\n    RUN find . -name \"Sphinx*\" | tee /dev/stderr | grep -v \"Sphinx-1.5.5\" | xargs rm -f\n\n\nFROM debian:bullseye-slim\nENV DEBIAN_FRONTEND noninteractive\nARG MISP_TAG\nARG PHP_VER\n\n# OS Packages\n    RUN apt-get update; apt-get install -y --no-install-recommends \\\n        # Requirements:\n        procps \\\n        sudo \\\n        nginx \\\n        supervisor \\\n        git \\\n        cron \\\n        openssl \\\n        gpg-agent gpg \\\n        ssdeep \\\n        libfuzzy2 \\\n        mariadb-client \\\n        rsync \\\n        # Python Requirements\n        python3 \\\n        python3-setuptools \\\n        python3-pip \\\n        # PHP Requirements\n        php \\\n        php-apcu \\\n        php-curl \\\n        php-xml \\\n        php-intl \\\n        php-bcmath \\\n        php-mbstring \\\n        php-mysql \\\n        php-redis \\\n        php-gd \\\n        php-fpm \\\n        php-zip \\\n        librdkafka1 \\\n        libbrotli1 \\\n        # Unsure we need these\n        zip unzip \\\n        && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*\n\n# MISP code\n    # Download MISP using git in the /var/www/ directory.\n    RUN git clone --branch ${MISP_TAG} --depth 1 https://github.com/MISP/MISP.git /var/www/MISP; \\\n        # We build the MISP modules outside, so we don't need to grab those submodules\n        cd /var/www/MISP/app || exit; git submodule update --init --recursive .;\n\n# Python Modules\n    COPY --from=python-build /wheels /wheels\n    RUN pip3 install --no-cache-dir /wheels/*.whl && rm -rf /wheels\n\n# PHP\n    # Install ssdeep prebuild, latest composer, then install the app's PHP deps\n    COPY --from=php-build /usr/lib/php/${PHP_VER}/ssdeep.so /usr/lib/php/${PHP_VER}/ssdeep.so\n    COPY --from=php-build /usr/lib/php/${PHP_VER}/rdkafka.so /usr/lib/php/${PHP_VER}/rdkafka.so\n    COPY --from=php-build /usr/lib/php/${PHP_VER}/brotli.so /usr/lib/php/${PHP_VER}/brotli.so\n\n    COPY --from=composer-build /tmp/Vendor /var/www/MISP/app/Vendor\n    COPY --from=composer-build /tmp/Plugin /var/www/MISP/app/Plugin\n\n    RUN for dir in /etc/php/*; do echo \"extension=rdkafka.so\" > \"$dir/mods-available/rdkafka.ini\"; done; phpenmod rdkafka\n    RUN for dir in /etc/php/*; do echo \"extension=brotli.so\" > \"$dir/mods-available/brotli.ini\"; done; phpenmod brotli\n\n    RUN for dir in /etc/php/*; do echo \"extension=ssdeep.so\" > \"$dir/mods-available/ssdeep.ini\"; done \\\n            ;phpenmod redis \\\n    # Enable CakeResque with php-gnupgp\n        ;phpenmod gnupg \\\n    # Enable ssdeep we build earlier\n        ;phpenmod ssdeep \\\n    # To use the scheduler worker for scheduled tasks, do the following:\n        ;cp -fa /var/www/MISP/INSTALL/setup/config.php /var/www/MISP/app/Plugin/CakeResque/Config/config.php\n\n# nginx\n    RUN rm /etc/nginx/sites-enabled/*; mkdir /run/php /etc/nginx/certs\n    COPY files/etc/nginx/misp /etc/nginx/sites-available/misp\n    COPY files/etc/nginx/misp-secure /etc/nginx/sites-available/misp-secure\n    COPY files/etc/nginx/misp80 /etc/nginx/sites-available/misp80\n    COPY files/etc/nginx/misp80-noredir /etc/nginx/sites-available/misp80-noredir\n\n# Make a copy of the file store, so we can sync from it\n    RUN cp -R /var/www/MISP/app/files /var/www/MISP/app/files.dist\n\n# Make a copy of the configurations, so we can sync from it\n    RUN cp -R /var/www/MISP/app/Config /var/www/MISP/app/Config.dist\n\n# Entrypoints\n    COPY files/etc/supervisor/supervisor.conf /etc/supervisor/conf.d/supervisord.conf\n    COPY files/entrypoint_fpm.sh /\n    COPY files/entrypoint_nginx.sh /\n    COPY files/entrypoint_cron.sh /\n    COPY files/entrypoint_workers.sh /\n    COPY files/entrypoint.sh /\n    ENTRYPOINT [ \"/entrypoint.sh\" ]\n\n# Change Workdirectory\n    WORKDIR /var/www/MISP\n"
}