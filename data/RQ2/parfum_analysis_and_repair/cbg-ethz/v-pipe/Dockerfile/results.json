{
  "startTime": 1674220480441,
  "endTime": 1674220481625,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 28,
        "columnStart": 22,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ====================================================================================\n# NOTE this docker uses `--network=none` option for RUN directives, you need to either\n#  - activate BuildKit with `export DOCKER_BUILDKIT=1`\n#  - run this using buildx\n# ====================================================================================\n\n# NOTE the following must match the ENTRYPOINT\nARG install_path=/opt/V-dock\nARG vpipe_path=${install_path}/V-pipe\nARG envs_path=${install_path}/conda_envs\nARG test_data=/test-data\nARG virus_download_list\nARG snaketag=stable\n\n###\n### Stage 0: download conda environments\n###\nFROM snakemake/snakemake:${snaketag} AS create-envs\n\nARG install_path\nARG vpipe_path\nARG envs_path\nARG test_data\n\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    jdupes && rm -rf /var/lib/apt/lists/*;\n\n# TODO: only move workflow files\n#COPY . ${vpipe_path}\nWORKDIR ${vpipe_path}/\nCOPY LICENSE.md ./LICENSE.md\nCOPY workflow ./workflow\nCOPY resources ./resources\nCOPY config ./config\nCOPY utils ./utils\nCOPY init_project.sh ./init_project.sh\n\nCOPY tests/data ${test_data}\n\nWORKDIR /work\n\n# configuration: activate all steps\nRUN mkdir config \\\n && printf 'output:\\n  snv: true\\n  local: true\\n  global: true\\n  visualization: true\\n  diversity: true\\n  QA: true\\n  upload: true\\nupload:\\n  orig_cram: true' > config/config.yaml\n\n# TODO harmonize list with CI tests and Docker tests\nRUN for virus in ${virus_download_list:-$(ls ${test_data}/)}; do printf '\\n\\n\\e[36;1mvirus: %s\\e[0m\\n' \"${virus}\" \\\n &&   ln -sf \"${test_data}/${virus}/\" ./samples \\\n &&   if test -e samples/samples.tsv; then cp -f samples/samples.tsv ./config/samples.tsv; fi \\\n &&   PYTHONUNBUFFERED=1 snakemake -s ${vpipe_path}/workflow/Snakefile -j 1 --conda-create-envs-only --use-conda --conda-prefix ${envs_path} --config \"general={virus_base_config: ${virus}}\" \\\n &&   rm -f samples config/samples.tsv \\\n  ; done \\\n && jdupes -Lr ${envs_path}/\n\n\n###\n### Stage 1: base layer with V-pipe and environments\n###\nFROM snakemake/snakemake:${snaketag} AS vpipe-tests-base\nARG install_path\n\n# NOTE rsync only used with local scratch\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    rsync \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# NOTE V-pipe/envs/*.yaml and conda_prefix/* must be in sync so that env checksums match\nCOPY --from=create-envs ${install_path} ${install_path}\n\n\n\n###\n### Test 1: test the base layer with hiv\n###\nFROM vpipe-tests-base AS test_hiv\nARG install_path\nARG vpipe_path\nARG envs_path\nARG test_data\nENV virus=hiv\n\nWORKDIR /work\nRUN mkdir config \\\n && printf 'output:\\n  snv: true\\n  local: true\\n  global: false\\n  visualization: true\\n  diversity: true\\n  QA: true\\n  upload: true\\nupload:\\n  orig_cram: true' > config/config.yaml\nCOPY --from=create-envs ${test_data}/${virus} ./samples\nRUN if test -e samples/samples.tsv; then cp -f samples/samples.tsv ./config/samples.tsv; fi\n# NOTE see top comment if `--network=none` breaks build process\nRUN --network=none \\\n    PYTHONUNBUFFERED=1 snakemake -s ${vpipe_path}/workflow/Snakefile -j 4 --use-conda --conda-prefix ${envs_path} --config \"general={virus_base_config: ${virus}}\" \\\n && echo \"$(date --iso-8601=sec ; grep -E 'failed|for error' .snakemake/log/*.snakemake.log)\" > ${install_path}/${virus}.teststamp\n\n\n\n###\n### Test 2: test the base layer with sars-cov-2\n###\nFROM vpipe-tests-base AS test_sars-cov-2\nARG install_path\nARG vpipe_path\nARG envs_path\nARG test_data\nENV virus=sars-cov-2\n\nWORKDIR /work\nRUN mkdir config \\\n && printf 'output:\\n  snv: true\\n  local: true\\n  global: false\\n  visualization: true\\n  diversity: true\\n  QA: true\\n  upload: true\\nupload:\\n  orig_cram: true' > config/config.yaml\nCOPY --from=create-envs ${test_data}/${virus} ./samples\nRUN if test -e samples/samples.tsv; then cp -f samples/samples.tsv ./config/samples.tsv; fi\n# NOTE see top comment if `--network=none` breaks build process\nRUN --network=none \\\n    PYTHONUNBUFFERED=1 snakemake -s ${vpipe_path}/workflow/Snakefile -j 4 --use-conda --conda-prefix ${envs_path} --config \"general={virus_base_config: ${virus}}\" \\\n && echo \"$(date --iso-8601=sec ; grep -E 'failed|for error' .snakemake/log/*.snakemake.log)\" > ${install_path}/${virus}.teststamp\n\n\n\n###\n### Final base: gather tests\n###\nFROM vpipe-tests-base as vpipe-final-base\nARG install_path\n\n# NOTE individual test can be forced using the following on github actions\nCOPY --from=test_hiv\t${install_path}/hiv.teststamp\t${install_path}\nCOPY --from=test_sars-cov-2\t${install_path}/sars-cov-2.teststamp\t${install_path}\n\n\n\n###\n### Final stage: setup image ready to run\n###\n\n# =============================================\n# NOTE this will *skip* tests on GitHub actions\n#FROM vpipe-test-base\n#ARG install_path\n#ARG vpipe_path\n#ARG envs_path\n# ---------------------------------------------\n# HACK this will *force* tests on GitHub actions\nFROM snakemake/snakemake:${snaketag}\nARG install_path\nARG vpipe_path\nARG envs_path\n\n# hadolint ignore=DL3008\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    rsync \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=vpipe-final-base ${install_path} ${install_path}\n# =============================================\n\nLABEL maintainer=\"V-pipe Dev Team <v-pipe@bsse.ethz.ch>\"\nVOLUME /work\nWORKDIR /work\n\n# NOTE current docker versions do not offer a way to bake the content of an ARG into an ENTRYPOINT\nENTRYPOINT [ \\\n    \"snakemake\", \\\n    \"-s\", \"/opt/V-dock/V-pipe/workflow/Snakefile\", \\\n    \"--use-conda\", \\\n    \"--conda-prefix\", \"/opt/V-dock/conda_envs\" \\\n]\n"
}