{
  "startTime": 1674252929546,
  "endTime": 1674252930754,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 29,
        "columnEnd": 209
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 27,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 29,
        "columnEnd": 138
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 27,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 29,
        "columnEnd": 209
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 27,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 29,
        "columnEnd": 138
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 27,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 AS builder\nLABEL maintainer \"filippo.bergamasco@unive.it\"\n\nRUN groupadd -r -g 999 wass && useradd -r -g wass -u 999 wass\n\nRUN apt-get -y -qq update && apt-get -y --no-install-recommends -qq install zip gzip tar curl build-essential cmake git liblapack-dev libblas-dev libboost-all-dev ffmpeg libavcodec-dev libavformat-dev libswscale-dev libavresample-dev && rm -rf /var/lib/apt/lists/*;\n\n\n\n# grab gosu for easy step-down from root ---------------------------------\n#\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.11\nRUN set -eux; \\\n# save list of currently installed packages for later so we can clean up\n    savedAptMark=\"$(apt-mark showmanual)\"; \\\n    apt-get update; \\\n    apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        dirmngr \\\n        gnupg \\\n        wget \\\n    ; \\\n    rm -rf /var/lib/apt/lists/*; \\\n    \\\n    dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n    wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n    wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n    \\\n# verify the signature\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n    gpgconf --kill all; \\\n    rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n    \\\n# clean up fetch dependencies\n    apt-mark auto '.*' > /dev/null; \\\n    [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n    \\\n    chmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n    gosu --version; \\\n    gosu nobody true\n\n\n# End of gosu stuff ------------------------------------\n\n\n\n# Install node\nRUN curl -f -sL https://deb.nodesource.com/setup_8.x | bash -\nRUN apt-get -yqq update && apt-get install --no-install-recommends -y nodejs npm && rm -rf /var/lib/apt/lists/*;\n\n\n# Build OpenCV version 3.4\n#\nWORKDIR /LIBS\nRUN chown wass:wass /LIBS\nUSER wass\nRUN git clone -b 3.4.0 --single-branch https://github.com/opencv/opencv.git --depth 1\nRUN git clone -b 3.4.0 --single-branch https://github.com/opencv/opencv_contrib.git --depth 1\nWORKDIR /LIBS/opencv\nRUN mkdir build && mkdir dist && cd build && \\\n    cmake ../ -DCMAKE_INSTALL_PREFIX=\"../dist/\" -DCMAKE_BUILD_TYPE=\"Release\" -DOPENCV_EXTRA_MODULES_PATH=/LIBS/opencv_contrib/modules -DBUILD_opencv_xfeatures2d=OFF   -DBUILD_opencv_xobjdetect=OFF -DBUILD_opencv_ximgproc=ON   -DBUILD_opencv_xphoto=OFF -DBUILD_opencv_superres=OFF  -DBUILD_opencv_surface_matching=OFF  -DBUILD_opencv_structured_light=OFF  -DBUILD_opencv_stitching=OFF  -DBUILD_opencv_saliency=OFF  -DBUILD_opencv_phase_unwrapping=OFF  -DBUILD_opencv_bioinspired=OFF  -DBUILD_opencv_aruco=OFF  -DBUILD_opencv_dnn=OFF  -DBUILD_opencv_datasets=OFF  -DBUILD_opencv_python_bindings_generator=OFF  -DBUILD_opencv_fuzzy=OFF -DBUILD_EXAMPLES=OFF -DBUILD_opencv_apps=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF && \\\n    make -j 8 && \\\n    make install\n\n\n\n# Add the WASS source tree\nWORKDIR /wass\nADD . /wass\nUSER root\nRUN chown -R wass:wass /wass/\nUSER wass\n\n\n# Build the backend\nRUN git submodule init && git submodule update\nRUN mkdir /wass/build\nWORKDIR /wass/build\nRUN rm -Rf *\nRUN cmake ../src/ -DCMAKE_BUILD_TYPE=\"Release\" -DOpenCV_DIR=/LIBS/opencv/build -DDISABLE_BOOST_LOG=ON && make && make install\n\n\n# Run npm to install all WASSjs dependencies\nUSER root\nRUN mkdir /home/wass && chown wass:wass /home/wass\nUSER wass\nWORKDIR /wass/WASSjs\nRUN npm install && npm cache clean --force;\n\n\n# Final setup\nADD ./Docker/worksession.json /wass/WASSjs/worksession.json\nADD ./Docker/settings.json /wass/WASSjs/settings.json\nUSER root\nRUN chown wass:wass /wass/WASSjs/worksession.json && chmod a+rw /wass/WASSjs/worksession.json\nRUN chown wass:wass /wass/WASSjs/settings.json && chmod a+rw /wass/WASSjs/settings.json\nUSER wass\nRUN echo 'export PATH=/wass/dist/bin:$PATH' >> /home/wass/.bashrc\n\n\nUSER root\nADD ./WASSjs/docker_entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker_entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker_entrypoint.sh\"]\n\n\nWORKDIR /DATA_IN\nVOLUME [\"/DATA_IN\"]\nWORKDIR /DATA_OUT\nVOLUME [\"/DATA_OUT\"]\nWORKDIR /DATA_CONF\nVOLUME [\"/DATA_CONF\"]\n\nUSER wass\nWORKDIR /wass/WASSjs\nEXPOSE 8080\nCMD [\"/wass/WASSjs/run_as_daemon.sh\"]\n\n\n\n\n\n\n\n# Create the final optimized build\n# -----------------------------------------------\n\nFROM ubuntu:18.04\nLABEL maintainer \"filippo.bergamasco@unive.it\"\n\nARG BUILD_DATE\nARG VCS_REF\n\nLABEL org.label-schema.schema-version=\"1.0\"\nLABEL org.label-schema.description=\"WASS sea-waves 3D reconstruction pipeline\"\nLABEL org.label-schema.url=\"http://dais.unive.it/wass\"\nLABEL org.label-schema.build-date=$BUILD_DATE\nLABEL org.label-schema.vcs-ref=$VCS_REF\n\nRUN groupadd -r -g 999 wass && useradd -r -g wass -u 999 wass\n\nRUN apt-get -y -qq update && apt-get -y --no-install-recommends -qq install zip libboost-system1.65.1 libboost-log1.65.1 libboost-program-options1.65.1 liblapack3 && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=builder /usr/local/bin /usr/local/bin\nCOPY --from=builder /wass/dist/bin /wass/dist/bin\nCOPY --from=builder /LIBS/opencv/dist/lib/libopencv_calib3d.so.3.4 /LIBS/opencv/dist/lib/\nCOPY --from=builder /LIBS/opencv/dist/lib/libopencv_highgui.so.3.4 /LIBS/opencv/dist/lib/\nCOPY --from=builder /LIBS/opencv/dist/lib/libopencv_imgcodecs.so.3.4 /LIBS/opencv/dist/lib/\nCOPY --from=builder /LIBS/opencv/dist/lib/libopencv_imgproc.so.3.4 /LIBS/opencv/dist/lib/\nCOPY --from=builder /LIBS/opencv/dist/lib/libopencv_core.so.3.4 /LIBS/opencv/dist/lib/\nCOPY --from=builder /LIBS/opencv/dist/lib/libopencv_features2d.so.3.4 /LIBS/opencv/dist/lib/\nCOPY --from=builder /LIBS/opencv/dist/lib/libopencv_flann.so.3.4 /LIBS/opencv/dist/lib/\n\nRUN ln -s /LIBS/opencv/dist/lib /wass/dist/lib\n\nCOPY --from=builder /wass/WASSjs /wass/WASSjs\nRUN rm -R /wass/WASSjs/ext\nRUN ls -alh /wass/WASSjs/\n\n\n# Install node\nRUN curl -f -sL https://deb.nodesource.com/setup_8.x | bash -\nRUN apt-get -yqq update && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n\nWORKDIR /DATA_IN\nVOLUME [\"/DATA_IN\"]\nWORKDIR /DATA_OUT\nVOLUME [\"/DATA_OUT\"]\nWORKDIR /DATA_CONF\nVOLUME [\"/DATA_CONF\"]\n\nUSER wass\nWORKDIR /wass/WASSjs\nEXPOSE 8080\n\nENTRYPOINT [\"/usr/local/bin/docker_entrypoint.sh\"]\nCMD [\"/wass/WASSjs/run_as_daemon.sh\"]\n"
}