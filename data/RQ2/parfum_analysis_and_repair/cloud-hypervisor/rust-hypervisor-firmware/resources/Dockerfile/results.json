{
  "startTime": 1674251541315,
  "endTime": 1674251542410,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 as dev\n\nARG TARGETARCH\nARG RUST_TOOLCHAIN=\"nightly-2022-06-10\"\nARG RHF_SRC_DIR=\"/rust-hypervisor-firmware\"\nARG RHF_BUILD_DIR=\"$RHF_SRC_DIR/build\"\nARG CARGO_REGISTRY_DIR=\"$RHF_BUILD_DIR/cargo_registry\"\nARG CARGO_GIT_REGISTRY_DIR=\"$RHF_BUILD_DIR/cargo_git_registry\"\nARG COREBOOT_VERSION=\"4.13\"\n\nENV CARGO_HOME=/usr/local/rust\nENV RUSTUP_HOME=$CARGO_HOME\nENV PATH=\"$PATH:$CARGO_HOME/bin\"\nENV COREBOOT_DIR=/opt/coreboot/src\n\n# Install all CI dependencies\nRUN apt-get update \\\n\t&& apt-get -yq upgrade \\\n\t&& DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq \\\n\tbuild-essential \\\n\tbc \\\n\tdocker.io \\\n\tcurl \\\n\twget \\\n\tsudo \\\n\tmtools \\\n\tmusl-tools \\\n\tlibssl-dev \\\n\tpkg-config \\\n\tflex \\\n\tbison \\\n\tlibelf-dev \\\n\tqemu-utils \\\n\tqemu-system \\\n\tlibglib2.0-dev \\\n\tlibpixman-1-dev \\\n\tlibseccomp-dev \\\n\tlibcap-ng-dev \\\n\tsocat \\\n\tdosfstools \\\n\tcpio \\\n\tpython \\\n\tpython3 \\\n\tpython3-setuptools \\\n\tntfs-3g \\\n\tpython3-distutils \\\n\tuuid-dev \\\n\tm4 \\\n\tzlib1g-dev \\\n\tgnat-9 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Fix the libssl-dev install\nRUN export ARCH=\"$(uname -m)\" \\\n    && cp /usr/include/$ARCH-linux-gnu/openssl/opensslconf.h /usr/include/openssl/\nENV X86_64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu/\nENV X86_64_UNKNOWN_LINUX_MUSL_OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu/\nENV AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu/\nENV AARCH64_UNKNOWN_LINUX_MUSL_OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu/\nENV OPENSSL_INCLUDE_DIR=/usr/include/\n\n# Install the rust toolchain\nRUN export ARCH=\"$(uname -m)\" \\\n    && nohup curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\" \\\n    && rustup component add rustfmt \\\n    && rustup component add clippy \\\n    && rustup component add rust-src \\\n    && rm -rf \"$CARGO_HOME/registry\" \\\n    && ln -s \"$CARGO_REGISTRY_DIR\" \"$CARGO_HOME/registry\" \\\n    && rm -rf \"$CARGO_HOME/git\" \\\n    && ln -s \"$CARGO_GIT_REGISTRY_DIR\" \"$CARGO_HOME/git\"\n\n# Set the rust environment\nRUN echo 'source $CARGO_HOME/env' >> $HOME/.bashrc \\\n    && mkdir $HOME/.cargo \\\n    && ln -s $CARGO_HOME/env $HOME/.cargo/env\n\n# Checkout coreboot repository and setup cross toolchains\nRUN git clone --quiet --branch \"$COREBOOT_VERSION\" --depth 1 https://github.com/coreboot/coreboot.git \"$COREBOOT_DIR\" \\\n    && cd \"$COREBOOT_DIR\" \\\n    && git submodule update --init --checkout \\\n    && make crossgcc-i386 CPUS=`nproc`\n"
}