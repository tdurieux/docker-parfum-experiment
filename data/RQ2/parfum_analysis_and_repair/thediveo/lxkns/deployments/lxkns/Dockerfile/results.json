{
  "startTime": 1674250765937,
  "endTime": 1674250766681,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Requires Docker buildx in order to correctly produce the final image with the\n# extended file attributes for capabilities still intact.\n\nARG ALPINE_VERSION=3.14\nARG ALPINE_PATCH=2\nARG GO_VERSION=1.17.2\n\n# 1st stage: build the lxkns binary, now this requires cgo and we thus need gcc\n# ... and then we also need header files. Oh, well. Caching to the rescue; we\n# start with the gcc and header stuff, which is kind of base builder image stuff\n# anyway.\nFROM golang:${GO_VERSION}-alpine${ALPINE_VERSION} AS builder\nWORKDIR /src\nRUN apk add --no-cache --update-cache gcc musl-dev libcap\n# We now try to cache only the dependencies in a separate layer, so we can speed\n# up things in case the dependencies do not change. This then reduces the amount\n# of fetching and compiling required when compiling the final binary later.\nCOPY go.mod go.sum ./\nRUN go mod download\n# And now, finally, we build the lxkns service itself.\nCOPY api/ ./api/\nCOPY cmd/ ./cmd/\nCOPY containerizer/ ./containerizer/\nCOPY decorator/ ./decorator/\nCOPY discover/ ./discover/\nCOPY internal/ ./internal/\nCOPY log/ ./log/\nCOPY model/ ./model/\nCOPY mounts/ ./mounts/\nCOPY ops/ ./ops/\nCOPY plural/ ./plural/\nCOPY species/ ./species/\nCOPY *.go ./\nRUN go build -v -ldflags \"-s -w\" -o /lxkns ./cmd/lxkns && \\\n    go build -v -ldflags \"-s -w\" -o /mntnssandbox ./cmd/mntnssandbox && \\\n    setcap \"cap_sys_admin,cap_sys_chroot,cap_sys_ptrace,cap_dac_read_search,cap_dac_override+ep\" /lxkns && \\\n    setcap \"cap_sys_admin,cap_sys_chroot,cap_sys_ptrace,cap_dac_read_search,cap_dac_override+ep\" /mntnssandbox\n\n# 2nd stage: builds the lxkns web client react application.\nFROM node:16-alpine AS reactor\nWORKDIR /webapp\nENV PATH /webapp/node_modules/.bin:$PATH\n# Cache the dependency hell, so we don't need to recreate it most of the time\n# when dependencies don't change.\nCOPY web/lxkns/package.json web/lxkns/yarn.lock web/lxkns/tsconfig.json ./\n# While not being a true production install in the original sense, this avoids\n# installing cypress and the react styleguidist which we all don't need in\n# creating the production build.\nRUN yarn install --production --network-timeout 1000000000 && yarn cache clean;\n# Now build the production-optimized web app.\nCOPY web/lxkns/public/ ./public/\nCOPY web/lxkns/src/ ./src/\nARG GIT_VERSION\nRUN yarn imagebuild\n\n# 3rd and final stage: create the final image containing only the lxkns binary\n# and its required shared libraries, as well as the lxkns web app.\nFROM alpine:${ALPINE_VERSION}.${ALPINE_PATCH}\nCOPY --from=builder /lxkns /mntnssandbox /\nCOPY --from=reactor /webapp/build/ /web/lxkns/build/\nENV PATH /\nUSER 65534\nCMD [\"/lxkns\"]\n"
}