{
  "startTime": 1674255731580,
  "endTime": 1674255733440,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 11,
        "columnEnd": 154
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 11,
        "columnEnd": 161
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 11,
        "columnEnd": 154
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 123,
        "lineEnd": 128,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 7,
        "columnEnd": 57
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 7,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.13 as proxy-build-stage\nLABEL maintainer=\"tokers@apache.org\"\n\n# Step 1, we build OpenResty by ourselves, since we have to apply some patches to it.\n\nADD nginx /nginx\n\n# Docker Build Arguments\nARG APISIX_VERSION=\"2.5\"\nARG APISIX_MESH_AGENT_VERSION=\"0.0.1\"\nARG ENABLE_PROXY=false\nARG LUAROCKS_VERSION=\"3.4.0\"\nARG LUAROCKS_SERVER=\"https://luarocks.org\"\nARG RESTY_IMAGE_BASE=\"alpine\"\nARG RESTY_IMAGE_TAG=\"3.12\"\nARG RESTY_VERSION=\"1.19.3.1\"\nARG RESTY_OPENSSL_VERSION=\"1.1.1g\"\nARG RESTY_NGINX_VERSION=\"1.19.3\"\nARG RESTY_OPENSSL_PATCH_VERSION=\"1.1.1f\"\nARG RESTY_OPENSSL_URL_BASE=\"https://www.openssl.org/source\"\nARG RESTY_PCRE_VERSION=\"8.44\"\nARG RESTY_J=\"1\"\nARG RESTY_CONFIG_OPTIONS=\"\\\n    --with-compat \\\n    --with-file-aio \\\n    --with-http_addition_module \\\n    --with-http_auth_request_module \\\n    --with-http_geoip_module=dynamic \\\n    --with-http_gunzip_module \\\n    --with-http_gzip_static_module \\\n    --with-http_random_index_module \\\n    --with-http_realip_module \\\n    --with-http_secure_link_module \\\n    --with-http_ssl_module \\\n    --with-http_stub_status_module \\\n    --with-http_sub_module \\\n    --with-http_v2_module \\\n    --with-http_xslt_module=dynamic \\\n    --with-ipv6 \\\n    --with-md5-asm \\\n    --with-pcre-jit \\\n    --with-sha1-asm \\\n    --with-stream \\\n    --with-stream_ssl_module \\\n    --with-threads \\\n    \"\nARG RESTY_CONFIG_OPTIONS_MORE=\"\"\nARG RESTY_LUAJIT_OPTIONS=\"--with-luajit-xcflags='-DLUAJIT_NUMMODE=2 -DLUAJIT_ENABLE_LUA52COMPAT'\"\n\nARG RESTY_ADD_PACKAGE_BUILDDEPS=\"\"\nARG RESTY_ADD_PACKAGE_RUNDEPS=\"\"\nARG RESTY_EVAL_PRE_CONFIGURE=\"\"\nARG RESTY_EVAL_POST_MAKE=\"\"\n\n# These are not intended to be user-specified\nARG _RESTY_CONFIG_DEPS=\"--with-pcre \\\n    --with-cc-opt='-DNGX_LUA_ABORT_AT_PANIC -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\\n    --with-ld-opt='-L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\\n    \"\n\nLABEL resty_image_base=\"${RESTY_IMAGE_BASE}\"\nLABEL resty_image_tag=\"${RESTY_IMAGE_TAG}\"\nLABEL resty_version=\"${RESTY_VERSION}\"\nLABEL resty_openssl_version=\"${RESTY_OPENSSL_VERSION}\"\nLABEL resty_openssl_patch_version=\"${RESTY_OPENSSL_PATCH_VERSION}\"\nLABEL resty_openssl_url_base=\"${RESTY_OPENSSL_URL_BASE}\"\nLABEL resty_pcre_version=\"${RESTY_PCRE_VERSION}\"\nLABEL resty_config_options=\"${RESTY_CONFIG_OPTIONS}\"\nLABEL resty_config_options_more=\"${RESTY_CONFIG_OPTIONS_MORE}\"\nLABEL resty_config_deps=\"${_RESTY_CONFIG_DEPS}\"\nLABEL resty_add_package_builddeps=\"${RESTY_ADD_PACKAGE_BUILDDEPS}\"\nLABEL resty_add_package_rundeps=\"${RESTY_ADD_PACKAGE_RUNDEPS}\"\nLABEL resty_eval_pre_configure=\"${RESTY_EVAL_PRE_CONFIGURE}\"\nLABEL resty_eval_post_make=\"${RESTY_EVAL_POST_MAKE}\"\n\nRUN apk add --no-cache --virtual .build-deps \\\n        build-base \\\n        coreutils \\\n        curl \\\n        gd-dev \\\n        geoip-dev \\\n        libxslt-dev \\\n        linux-headers \\\n        make \\\n        musl-dev \\\n        perl-dev \\\n        readline-dev \\\n        zlib-dev \\\n        ${RESTY_ADD_PACKAGE_BUILDDEPS} \\\n    && apk add --no-cache \\\n        gd \\\n        geoip \\\n        libgcc \\\n        libxslt \\\n        zlib \\\n        ${RESTY_ADD_PACKAGE_RUNDEPS} \\\n    && cd /tmp \\\n    && if [ -n \"${RESTY_EVAL_PRE_CONFIGURE}\" ]; then eval $(echo ${RESTY_EVAL_PRE_CONFIGURE}); fi \\\n    && cd /tmp \\\n    && curl -fSL \"${RESTY_OPENSSL_URL_BASE}/openssl-${RESTY_OPENSSL_VERSION}.tar.gz\" -o openssl-${RESTY_OPENSSL_VERSION}.tar.gz \\\n    && tar xzf openssl-${RESTY_OPENSSL_VERSION}.tar.gz \\\n    && cd openssl-${RESTY_OPENSSL_VERSION} \\\n    && if [ $(echo ${RESTY_OPENSSL_VERSION} | cut -c 1-5) = \"1.1.1\" ] ; then \\\n        echo 'patching OpenSSL 1.1.1 for OpenResty' \\\n        && curl -f -s https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-${RESTY_OPENSSL_PATCH_VERSION}-sess_set_get_cb_yield.patch | patch -p1; \\\n    fi \\\n    && if [ $(echo ${RESTY_OPENSSL_VERSION} | cut -c 1-5) = \"1.1.0\" ] ; then \\\n        echo 'patching OpenSSL 1.1.0 for OpenResty' \\\n        && curl -f -s https://raw.githubusercontent.com/openresty/openresty/ed328977028c3ec3033bc25873ee360056e247cd/patches/openssl-1.1.0j-parallel_build_fix.patch | patch -p1 \\\n        && curl -f -s https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-${RESTY_OPENSSL_PATCH_VERSION}-sess_set_get_cb_yield.patch | patch -p1; \\\n    fi \\\n    && ./config \\\n      no-threads shared zlib -g \\\n      enable-ssl3 enable-ssl3-method \\\n      --prefix=/usr/local/openresty/openssl \\\n      --libdir=lib \\\n      -Wl,-rpath,/usr/local/openresty/openssl/lib \\\n    && make -j${RESTY_J} \\\n    && make -j${RESTY_J} install_sw \\\n    && cd /tmp \\\n    && curl -fSL https://ftp.pcre.org/pub/pcre/pcre-${RESTY_PCRE_VERSION}.tar.gz -o pcre-${RESTY_PCRE_VERSION}.tar.gz \\\n    && tar xzf pcre-${RESTY_PCRE_VERSION}.tar.gz \\\n    && cd /tmp/pcre-${RESTY_PCRE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr/local/openresty/pcre \\\n        --disable-cpp \\\n        --enable-jit \\\n        --enable-utf \\\n        --enable-unicode-properties \\\n    && make -j${RESTY_J} \\\n    && make -j${RESTY_J} install \\\n    && cd /tmp \\\n    && curl -fSL https://openresty.org/download/openresty-${RESTY_VERSION}.tar.gz -o openresty-${RESTY_VERSION}.tar.gz \\\n    && tar xzf openresty-${RESTY_VERSION}.tar.gz \\\n    && cd /tmp/openresty-${RESTY_VERSION} \\\n    && cd bundle/nginx-${RESTY_NGINX_VERSION} || pwd \\\n    && cat /nginx/patches/nginx-${RESTY_NGINX_VERSION}-connection-original-dst.patch | patch -p 1 \\\n    && cd ../../ \\\n    && eval ./configure -j${RESTY_J} ${_RESTY_CONFIG_DEPS} ${RESTY_CONFIG_OPTIONS} ${RESTY_CONFIG_OPTIONS_MORE} ${RESTY_LUAJIT_OPTIONS} \\\n    && make -j${RESTY_J} \\\n    && make -j${RESTY_J} install \\\n    && cd /tmp \\\n    && if [ -n \"${RESTY_EVAL_POST_MAKE}\" ]; then eval $(echo ${RESTY_EVAL_POST_MAKE}); fi \\\n    && rm -rf \\\n        openssl-${RESTY_OPENSSL_VERSION}.tar.gz openssl-${RESTY_OPENSSL_VERSION} \\\n        pcre-${RESTY_PCRE_VERSION}.tar.gz pcre-${RESTY_PCRE_VERSION} \\\n        openresty-${RESTY_VERSION}.tar.gz openresty-${RESTY_VERSION} \\\n    && mkdir -p /var/run/openresty \\\n    && ln -sf /dev/stdout /usr/local/openresty/nginx/logs/access.log \\\n    && ln -sf /dev/stderr /usr/local/openresty/nginx/logs/error.log\n\n# Add additional binaries into PATH for convenience\nENV PATH=$PATH:/usr/local/openresty/luajit/bin:/usr/local/openresty/nginx/sbin:/usr/local/openresty/bin\n\n# Step 2, building LuaRocks\n# install wget because busybox wget has several proxy bugs\nRUN cd /tmp \\\n    && apk add --no-cache wget \\\n    && wget https://github.com/luarocks/luarocks/archive/v${LUAROCKS_VERSION}.tar.gz \\\n    && tar xf v${LUAROCKS_VERSION}.tar.gz \\\n    && cd luarocks-${LUAROCKS_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-lua=/usr/local/openresty/luajit \\\n    && make build \\\n    && make install && rm v${LUAROCKS_VERSION}.tar.gz\n\n# Step 3, building APISIX.\nLABEL apisix_version=\"${APISIX_VERSION}\"\nRUN set -x \\\n    && (test \"${ENABLE_PROXY}\" != \"true\" || /bin/sed -i 's,http://dl-cdn.alpinelinux.org,https://mirrors.aliyun.com,g' /etc/apk/repositories) \\\n    && apk add --no-cache --virtual .builddeps \\\n    automake \\\n    autoconf \\\n    libtool \\\n    pkgconfig \\\n    cmake \\\n    unzip \\\n    bash \\\n    git \\\n    && mkdir ~/.luarocks \\\n    && luarocks config variables.OPENSSL_LIBDIR /usr/local/openresty/openssl/lib \\\n    && luarocks config variables.OPENSSL_INCDIR /usr/local/openresty/openssl/include \\\n    && luarocks install https://github.com/apache/apisix/raw/master/rockspec/apisix-${APISIX_VERSION}-0.rockspec --tree=/usr/local/apisix/deps --server ${LUAROCKS_SERVER} \\\n    && cp -v /usr/local/apisix/deps/lib/luarocks/rocks-5.1/apisix/${APISIX_VERSION}-0/bin/apisix /usr/bin/ \\\n    && (if [ \"$APISIX_VERSION\" = \"master\" ] || [ \"$APISIX_VERSION\" \\> \"2.2\" ]; then echo 'use shell ';else bin='#! /usr/local/openresty/luajit/bin/luajit\\npackage.path = \"/usr/local/apisix/?.lua;\" .. package.path'; sed -i \"1s@.*@$bin@\" /usr/bin/apisix ; fi;) \\\n    && mv /usr/local/apisix/deps/share/lua/5.1/apisix /usr/local/apisix\n\nFROM golang:alpine3.13 as agent-build-stage\n\n# Step 4, building apisix-mesh-agent\nLABEL apisix_mesh_agent_version=\"${APISIX_MESH_AGENT_VERSION}\"\nRUN apk add --no-cache --virtual .builddeps git make\nENV GO111MODULE=on\nENV GOPROXY=https://goproxy.cn,direct\nWORKDIR /apisix-mesh-agent\nCOPY go.* ./\nRUN go mod download -x\nCOPY Makefile .\nCOPY main.go .\nCOPY cmd cmd\nCOPY pkg pkg\nRUN make build\n\n\nFROM alpine:3.13\n\nRUN apk add --no-cache --virtual .builddeps \\\n    iptables \\\n    bash \\\n    libstdc++ \\\n    curl\n\nCOPY --from=proxy-build-stage /usr/local/openresty /usr/local/openresty\nCOPY --from=proxy-build-stage /usr/bin/apisix /usr/bin/apisix\nCOPY --from=proxy-build-stage /usr/local/apisix /usr/local/apisix\nCOPY --from=agent-build-stage /apisix-mesh-agent/apisix-mesh-agent /usr/bin/apisix-mesh-agent\n\nENV PATH=$PATH:/usr/local/openresty/luajit/bin:/usr/local/openresty/nginx/sbin:/usr/local/openresty/bin\n\nWORKDIR /usr/local/apisix\n\nENTRYPOINT [\"apisix-mesh-agent\"]\n\n# Use SIGQUIT instead of default SIGTERM to cleanly drain requests\n# See https://github.com/openresty/docker-openresty/blob/master/README.md#tips--pitfalls\nSTOPSIGNAL SIGQUIT\n"
}