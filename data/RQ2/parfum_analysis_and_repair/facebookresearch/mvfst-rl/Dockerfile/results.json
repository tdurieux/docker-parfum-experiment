{
  "startTime": 1674250141935,
  "endTime": 1674250143154,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Demonstration of running an experiment using the model inside the Pantheon environment.\n\n# This Dockerfile can be used to run any of the schemes Pantheon has available\n# by specifying the SCHEMENAME argument, inside a Docker container with high\n# privileges. We are using it to demonstrate using a trained mvfst_rl model.\n\n# In particular, this container is not used for training the model.\n\n# 1) If using Docker Desktop on a Mac, it is a good idea to increase its memory limits\n# because the default 2GB is too small to build mvfst.\n\n# 2) Build the docker image using\n#     docker build --tag mvfst_rl --build-arg SCHEMENAME=mvfst_rl - < Dockerfile\n# where Dockerfile is this file.\n\n# 3) Run the image using\n#     CAPS='--cap-add=NET_ADMIN --cap-add=SYS_ADMIN'\n#     sudo docker run --name c_mvfst_rl ${CAPS:?} --rm -t -i mvfst_rl\n#\n# Inside the container, you can run any of the mvfst schemes because they all depend\n# on the same setup. For example you can type\n#     sudo -u runner -H src/experiments/test.py local --schemes mvfst_bbr --flows 1\n# for the bbr scheme. The mvfst_rl scheme (running the trained model) can also be run with\n#     . 1\n\nFROM ubuntu:18.04\n\nRUN echo Europe/London > /etc/timezone && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n        git \\\n        python-pip \\\n        python-yaml \\\n        python-matplotlib \\\n        sudo \\\n        ntp \\\n        ntpdate \\\n        mahimahi \\\n        autogen \\\n        debhelper autotools-dev dh-autoreconf iptables pkg-config iproute2 && \\\n    pip install --no-cache-dir tabulate && \\\n    useradd runner && \\\n    mkdir -m 777 ~runner && \\\n    chown runner: ~runner && rm -rf /var/lib/apt/lists/*;\n\nRUN sudo -u runner -H git clone https://github.com/StanfordSNR/pantheon.git ~runner/pantheon\n\nWORKDIR /home/runner/pantheon\n\nRUN sudo -u runner -H git submodule update --init --recursive\n\nRUN cd ~runner/pantheon/third_party/pantheon-tunnel && ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install\n\nARG SCHEMENAME\n\nRUN src/experiments/setup.py --install-deps --schemes $SCHEMENAME\n\nRUN src/experiments/setup.py --setup --schemes $SCHEMENAME\n\nRUN echo 'mkdir -p /dev/net && mknod /dev/net/tun c 10 200'   > prelim.sh && \\\n    echo 'mount -o remount rw /proc/sys'                     >> prelim.sh && \\\n    echo 'chmod o+w tmp'                                     >> prelim.sh && \\\n    echo 'echo Please run \\\". 0\\\" or \\\". 1\\\" to run a test.' >> prelim.sh && \\\n    echo \"sudo -u runner -H src/experiments/test.py local --schemes $SCHEMENAME --flows 1\" > 1 && \\\n    echo \"sudo -u runner -H src/experiments/test.py local --schemes $SCHEMENAME --flows 0\" > 0\n\nCMD bash --init-file /home/runner/pantheon/prelim.sh\n\n"
}