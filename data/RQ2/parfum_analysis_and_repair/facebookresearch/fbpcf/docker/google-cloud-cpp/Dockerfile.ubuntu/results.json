{
  "startTime": 1674249907164,
  "endTime": 1674249908119,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 32,
        "columnStart": 25,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\nARG os_release=\"latest\"\nFROM ubuntu:${os_release} AS builder\nARG gcp_cpp_release=\"1.32.1\"\n# Required Packages for google-cloud-cpp\n# Instructions modified from https://github.com/googleapis/google-cloud-cpp/blob/main/doc/packaging.md\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get -y update && apt-get install --no-install-recommends -y \\\n    apt-transport-https \\\n    apt-utils \\\n    automake \\\n    build-essential \\\n    ccache \\\n    cmake \\\n    ca-certificates \\\n    curl \\\n    git \\\n    gcc \\\n    g++ \\\n    libc-ares-dev \\\n    libc-ares2 \\\n    libcurl4-openssl-dev \\\n    libre2-dev \\\n    libssl-dev \\\n    m4 \\\n    make \\\n    pkg-config \\\n    tar \\\n    wget \\\n    zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nARG HOME=\"/root\"\n# Download google-cloud-cpp\nRUN mkdir -p ${HOME}/google-cloud-cpp\nRUN wget -q https://github.com/googleapis/google-cloud-cpp/archive/${gcp_cpp_release}.tar.gz && \\\n    tar -xf ${gcp_cpp_release}.tar.gz -C ${HOME}/google-cloud-cpp --strip=1 && rm ${gcp_cpp_release}.tar.gz\n\n# Install Abseil\nRUN mkdir -p ${HOME}/Downloads/abseil-cpp\nWORKDIR ${HOME}/Downloads/abseil-cpp\nRUN curl -f -sSL https://github.com/abseil/abseil-cpp/archive/20210324.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    sed -i 's/^#define ABSL_OPTION_USE_\\(.*\\) 2/#define ABSL_OPTION_USE_\\1 0/' \"absl/base/options.h\" && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_TESTING=OFF \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCMAKE_CXX_STANDARD=11 \\\n      -H. -Bcmake-out && \\\n    cmake --build cmake-out -- -j \"$(nproc)\" && \\\n    cmake --build cmake-out --target install -- -j \"$(nproc)\" && \\\n    ldconfig\n\n# Install Protobuf\nRUN mkdir -p ${HOME}/Downloads/protobuf\nWORKDIR ${HOME}/Downloads/protobuf\nRUN curl -f -sSL https://github.com/protocolbuffers/protobuf/archive/v3.19.0.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -Hcmake -Bcmake-out && \\\n    cmake --build cmake-out -- -j \"$(nproc)\" && \\\n    cmake --build cmake-out --target install -- -j \"$(nproc)\" && \\\n    ldconfig\n\n# Install gRPC\nRUN mkdir -p ${HOME}/Downloads/grpc\nWORKDIR ${HOME}/Downloads/grpc\nRUN curl -f -sSL https://github.com/grpc/grpc/archive/v1.41.1.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DgRPC_INSTALL=ON \\\n        -DgRPC_BUILD_TESTS=OFF \\\n        -DgRPC_ABSL_PROVIDER=package \\\n        -DgRPC_CARES_PROVIDER=package \\\n        -DgRPC_PROTOBUF_PROVIDER=package \\\n        -DgRPC_RE2_PROVIDER=package \\\n        -DgRPC_SSL_PROVIDER=package \\\n        -DgRPC_ZLIB_PROVIDER=package \\\n        -H. -Bcmake-out && \\\n    cmake --build cmake-out -- -j \"$(nproc)\" && \\\n    cmake --build cmake-out --target install -- -j \"$(nproc)\" && \\\n    ldconfig\n\n# Install crc32c\nRUN mkdir -p ${HOME}/Downloads/crc32c\nWORKDIR ${HOME}/Downloads/crc32c\nRUN curl -f -sSL https://github.com/google/crc32c/archive/1.1.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -DCRC32C_BUILD_TESTS=OFF \\\n        -DCRC32C_BUILD_BENCHMARKS=OFF \\\n        -DCRC32C_USE_GLOG=OFF \\\n        -H. -Bcmake-out && \\\n    cmake --build cmake-out -- -j \"$(nproc)\" && \\\n    cmake --build cmake-out --target install -- -j \"$(nproc)\" && \\\n    ldconfig\n\n# Install nlohmann_json\nRUN mkdir -p ${HOME}/Downloads/json\nWORKDIR ${HOME}/Downloads/json\nRUN curl -f -sSL https://github.com/nlohmann/json/archive/v3.10.4.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DBUILD_TESTING=OFF \\\n      -H. -Bcmake-out/nlohmann/json && \\\n    cmake --build cmake-out/nlohmann/json --target install -- -j \"$(nproc)\" && \\\n    ldconfig\n\n# Build google-cloud-cpp\nWORKDIR ${HOME}/google-cloud-cpp\nRUN cmake \\\n        -DBUILD_TESTING=OFF \\\n        -DGOOGLE_CLOUD_CPP_ENABLE_BIGTABLE=OFF \\\n        -DGOOGLE_CLOUD_CPP_ENABLE_BIGQUERY=OFF \\\n        -DGOOGLE_CLOUD_CPP_ENABLE_SPANNER=OFF \\\n        -DGOOGLE_CLOUD_CPP_ENABLE_PUBSUB=OFF \\\n        -DGOOGLE_CLOUD_CPP_ENABLE_IAM=OFF \\\n        -DGOOGLE_CLOUD_CPP_ENABLE_EXAMPLES=OFF \\\n        -H. -Bcmake-out && \\\ncmake --build cmake-out -- -j \"$(nproc)\" && \\\ncmake --build cmake-out --target install\n\nFROM ubuntu:${os_release}\nCOPY --from=builder /usr/local/include/. /usr/local/include/.\nCOPY --from=builder /usr/local/lib/. /usr/local/lib/.\nENTRYPOINT [ \"/bin/bash\" ]\n"
}