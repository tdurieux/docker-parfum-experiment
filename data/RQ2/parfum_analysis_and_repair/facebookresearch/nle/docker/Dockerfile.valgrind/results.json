{
  "startTime": 1674216272334,
  "endTime": 1674216273536,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "# -*- mode: dockerfile -*-\n# Copyright (c) Facebook, Inc. and its affiliates.\n\nFROM ubuntu:20.04\n\nARG PYTHON_VERSION=3.8\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -yq \\\n        bison \\\n        build-essential \\\n        cmake \\\n        curl \\\n        flex \\\n        git \\\n        libbz2-dev \\\n        libncurses5 \\\n        libncurses5-dev \\\n        ninja-build \\\n        wget && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt/conda_setup\n\nRUN curl -f -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n     chmod +x miniconda.sh && \\\n     ./miniconda.sh -b -p /opt/conda && \\\n     /opt/conda/bin/conda install -y python=$PYTHON_VERSION && \\\n     /opt/conda/bin/conda clean -ya\nENV PATH /opt/conda/bin:$PATH\n\nRUN python -m pip install --upgrade pip ipython ipdb\n\nRUN pip install --no-cache-dir pybind11 numpy gym\n\nCOPY . /opt/nle/\n\nWORKDIR /opt/nle\n\nRUN apt-get install --no-install-recommends -yq valgrind && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt/nle\n\nRUN rm -rf build\n\nWORKDIR /opt/nle/build\n\nRUN cmake -G Ninja -DCMAKE_BUILD_TYPE=debug ..\n\nRUN ninja && ninja install\n\nENV LD_LIBRARY_PATH /opt/nle/build\n\nENV NETHACKOPTIONS name:Agent-mon-hum-neu-mal\n\nCMD [\"/bin/sh\", \"-c\", \"valgrind --leak-check=yes --leak-check=full --show-leak-kinds=all --log-file=valgrind.log --keep-debuginfo=yes ./rlmain r && cat valgrind.log\"]\n\n# Docker commands:\n#   docker rm nle -v\n#   docker build -t nle -f docker/Dockerfile.valgrind .\n#   docker run --rm --name nle nle\n# or\n#   docker run -it --entrypoint /bin/bash nle\n"
}