{
  "startTime": 1674220588691,
  "endTime": 1674220590067,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 15,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 78
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 39,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 29,
        "columnEnd": 40
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 39,
        "columnEnd": 66
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 70,
        "columnEnd": 96
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nRUN yum -y update && yum -y upgrade && yum -y install epel-release && rm -rf /var/cache/yum\nRUN yum -y install centos-release-scl && rm -rf /var/cache/yum\n\n# Install build dependenices\nRUN yum -y install git devtoolset-7 llvm-toolset-7 llvm-toolset-7-cmake gtk-doc libtool lcov wget patchelf lsof && rm -rf /var/cache/yum\n\n# Fetch llvm and build libc++\nRUN cd /tmp/ && git clone https://github.com/llvm/llvm-project.git --branch release/9.x --single-branch --depth 1 \\\n    && cd /tmp/llvm-project/ && mkdir build && cd build \\\n    && source scl_source enable llvm-toolset-7 \\\n    && cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS='libcxx;libcxxabi' ../llvm/ \\\n    && make -j5 cxx \\\n    && make install-cxx install-cxxabi\n\n# Build openssl-1.1.1l\nRUN cd /tmp && wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz \\\n    && tar xvfz openssl-1.1.1l.tar.gz \\\n    && cd /tmp/openssl-1.1.1l \\\n    && ./config \\\n    && make -j5 \\\n    && make install && rm openssl-1.1.1l.tar.gz\n\n# Build libsrtp 2.4.2\nRUN cd /tmp && git clone https://github.com/cisco/libsrtp \\\n    && cd /tmp/libsrtp && git checkout v2.4.2 \\\n    && PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-openssl \\\n    && make -j5 \\\n    && make install\n\n# Build libmicrohttpd 0.9.73\nRUN cd /tmp && wget https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.73.tar.gz \\\n    && tar xvfz libmicrohttpd-0.9.73.tar.gz \\\n    && cd /tmp/libmicrohttpd-0.9.73 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-https \\\n    && make -j5 \\\n    && make install && rm libmicrohttpd-0.9.73.tar.gz\n\n# Build opus 1.3.1\nRUN cd /tmp && wget https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz \\\n    && tar xvfz opus-1.3.1.tar.gz \\\n    && rm opus-1.3.1.tar.gz \\\n    && cd /tmp/opus-1.3.1 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j5 \\\n    && make install\n\nRUN cd /tmp && wget https://ftp.gnu.org/gnu/glibc/glibc-2.18.tar.gz && tar zxvf glibc-2.18.tar.gz \\\n    && cd /tmp/glibc-2.18 && mkdir -p build && cd build \\\n    && CC= CXX= LD_LIBRARY_PATH= ../configure --prefix=/opt/glibc-2.18 \\\n    && make -j$(getconf _NPROCESSORS_ONLN) \\\n    && LD_LIBRARY_PATH= make install && rm glibc-2.18.tar.gz\n"
}