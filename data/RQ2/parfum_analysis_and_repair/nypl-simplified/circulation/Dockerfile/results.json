{
  "startTime": 1674220799961,
  "endTime": 1674220801123,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###############################################################################\n# README!\n#\n#     Dockerfile\n#       |__ lcpencrypt\n#       |\n#       |__ cm_local_db\n#       |\n#       |__ circulation_base\n#           |__ cm_webapp_base\n#           |   |__ cm_webapp_local    <-- Local Webapp\n#           |   |__ cm_webapp_active   <-- Deployable Webapp\n#           |\n#           |__ cm_scripts_base\n#           |   |__ cm_scripts_local   <-- Local Script Runner\n#           |   |__ cm_scripts_active  <-- Deployable Script Runner\n#           |\n#           |__ cm_exec_base\n#               |__ cm_exec_local      <-- Local Exec\n#               |__ cm_exec_active     <-- Deployable Exec\n#\n###############################################################################\n\n###############################################################################\n## lcpencrypt - stage to build lcpencrypt, to copy out into other stages\n###############################################################################\n\nFROM golang AS lcpencrypt\nLABEL maintainer=\"Library Simplified <info@librarysimplified.org>\"\nRUN go install -v github.com/readium/readium-lcp-server/lcpencrypt@latest\n\n###############################################################################\n## cm_local_db - standalone stage to build a postgres server for local dev\n###############################################################################\n\nFROM postgres:12.8-alpine AS cm_local_db\n\n# Set the PG superuser credentials. Low-security creds are fine, since this\n# is only for local development, and does not have network accessible ports.\nENV POSTGRES_PASSWORD=\"password\"\nENV POSTGRES_USER=\"postgres\"\n\n# The postgres image has a directory, /docker-entrypoint-initdb.d, where you can\n# put startup scripts that will run when the container is started. However, they\n# will run IF AND ONLY IF the postgres data directory is empty! So once you have\n# established a persistent data store in a volume, these scripts will only run\n# again if you delete the volume, or otherwise get rid of the data directory.\nCOPY ./docker/localdev_postgres_init.sh /docker-entrypoint-initdb.d/localdev_postgres_init.sh\n\n###############################################################################\n## circulation_base - elements common to webapp, scripts, and exec images,\n#                     both for local development and remotely deployed images\n#\n# Notes:\n#\n#   * Logs for various pieces of the Circ. Manager will be in /var/log/simplified\n#\n#   * We create a user, 'simplified', to be the non-root user we step down to\n#\n#   * We install NodeJS from the Nodesource packages, which lets us use Node 10,\n#     and avoids dependency conflicts between node and libxmlsec1 over the SSL\n#     library version that we'll get via system packages.\n#\n###############################################################################\n\nFROM ubuntu:22.04 as circulation_base\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\nARG NODESOURCE_KEYFILE=\"https://deb.nodesource.com/gpgkey/nodesource.gpg.key\"\n\n# Install system level dependencies\nRUN apt-get update \\\n && apt-get install --yes --no-install-recommends \\\n    curl \\\n    ca-certificates \\\n    gnupg \\\n && curl -f -sSL ${NODESOURCE_KEYFILE} | apt-key add - \\\n && echo \"deb https://deb.nodesource.com/node_14.x jammy main\" >> /etc/apt/sources.list.d/nodesource.list \\\n && echo \"deb-src https://deb.nodesource.com/node_14.x jammy main\" >> /etc/apt/sources.list.d/nodesource.list \\\n && apt-get update \\\n && apt-get install --yes --no-install-recommends \\\n    build-essential \\\n    pkg-config \\\n    software-properties-common \\\n    language-pack-en \\\n    git \\\n    python3.10 \\\n    python3-dev \\\n    python3-setuptools \\\n    python3-venv \\\n    python3-pip \\\n    libpcre3 \\\n    libpcre3-dev \\\n    libffi-dev \\\n    libjpeg-dev \\\n    logrotate \\\n    nodejs \\\n    libssl-dev \\\n    libpq-dev \\\n    libxmlsec1-dev \\\n    libxmlsec1-openssl \\\n    libxml2-dev \\\n && locale-gen en_US \\\n && update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 \\\n && apt-get clean --yes \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV LANG=\"en_US.UTF-8\"\nENV LC_CTYPE=\"en_US.UTF-8\"\n\n# Create simplified group and user, and log directory\nRUN groupadd --gid 1000 simplified \\\n && useradd --uid 1000 --gid 1000 --shell /bin/bash --create-home --home-dir /home/simplified simplified \\\n && mkdir -p /var/log/simplified\n\nWORKDIR /home/simplified/circulation\n\n# The virtualenv should be outside the application root, so that we can more\n# easily use a host mount of the codebase without interfering with any virtualenv\n# that may be present on the host.\nENV SIMPLIFIED_VENV /simplified_venv\n\n# Set up for installing Python dependencies, by creating a virtualenv and updating\n# the installation tools. Also, install a pinned version of the NLTK corpus, to avoid\n# having to re-download / re-install that if other Python dependencies change.\nRUN python3 -m venv ${SIMPLIFIED_VENV} \\\n && ${SIMPLIFIED_VENV}/bin/python3 -m pip install -U pip setuptools \\\n && ${SIMPLIFIED_VENV}/bin/python3 -m pip install textblob==0.15.3 \\\n && ${SIMPLIFIED_VENV}/bin/python3 -m textblob.download_corpora \\\n && mv /root/nltk_data /usr/lib\n\n# Copy over the Python requirements files\nCOPY --chown=simplified:simplified ./requirements*.txt ./\n\n# Keep there from being a clash between dm.xmlsec and libssl.\nENV CPPFLAGS=\"-DXMLSEC_NO_XKMS=1\"\n\n# Install the Python dependencies\nRUN ${SIMPLIFIED_VENV}/bin/python3 -m pip install -U wheel pip setuptools \\\n && ${SIMPLIFIED_VENV}/bin/python3 -m pip install -r ./requirements.txt\n\n# Make sure we rotate our logs appropriately\nCOPY docker/logrotate.conf /etc/logrotate.conf\n\nRUN chmod 644 /etc/logrotate.conf \\\n && rm -rf /etc/logrotate.d/dpkg\n\n# Copy over the lcpencrypt executable from its builder stage\nCOPY --from=lcpencrypt /go/bin/lcpencrypt /go/bin/lcpencrypt\n\n# Bring in a helper script that simplifies activating the virtualenv prior\n# to running a command, without activating it for the parent process.\nCOPY ./docker/runinvenv /usr/local/bin/runinvenv\n\n# Copy over the script we'll use in all images as the ENTRYPOINT, which we'll\n# pass stage/image specific CMD values to set image-specific behavior.\nCOPY --chown=simplified:simplified docker/docker-entrypoint.sh /docker-entrypoint.sh\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\n###############################################################################\n## cm_webapp_base - elements common to cm_webapp_local and cm_webapp_active\n#\n# Notes:\n#\n#     * To serve web traffic, we'll install Nginx (which will act as a reverse\n#       proxy), and gunicorn, which will be the WSGI server that runs the webapp\n#\n#     * We install supervisor via the system Python, not the virtualenv. It\n#       doesn't need access to other packages in the virtualenv, and it's a\n#       deployment dependency, not a run time dependency of the app itself,\n#       so better to keep it (and its own dependencies) out of the virtualenv.\n#\n###############################################################################\n\nFROM circulation_base AS cm_webapp_base\n\n# Install and configure Nginx, Gunicorn, and Supervisord\nRUN apt-get update \\\n && apt-get install --yes --no-install-recommends nginx-light \\\n && python3 -m pip install supervisor \\\n && mkdir -p /var/log/supervisord \\\n && chown simplified:simplified /var/log/supervisord \\\n && ${SIMPLIFIED_VENV}/bin/python3 -m pip install gunicorn \\\n && mkdir -p /var/log/gunicorn \\\n && chown simplified:simplified /var/log/gunicorn \\\n && apt-get clean --yes \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY ./docker/nginx.conf /etc/nginx/nginx.conf\nCOPY ./docker/gunicorn.conf.py /etc/gunicorn/gunicorn.conf.py\n\n# Bring over the supervisor config we'll defer execution to in the\n# docker-entrypoint.sh script after any initialization logic is complete\nCOPY ./docker/supervisord-webapp.ini /etc/supervisord.conf\n\n# Create a static version of the front end to serve\nCOPY ./api/admin/package*.json ./\n\nENV SIMPLIFIED_STATIC_DIR /simplified_static\n\nRUN set -ex \\\n && mkdir -p /tmp/npm_build \\\n && cp ./package*.json /tmp/npm_build \\\n && npm install --prefix /tmp/npm_build \\\n && mkdir -p ${SIMPLIFIED_STATIC_DIR} \\\n && cp /tmp/npm_build/node_modules/simplified-circulation-web/dist/* ${SIMPLIFIED_STATIC_DIR} \\\n && chown -R simplified:simplified ${SIMPLIFIED_STATIC_DIR} \\\n && rm -rf /tmp/npm_build && npm cache clean --force;\n\n# Set the value that will be passed as an argument to the entrypoint script\nCMD [\"webapp\"]\n\n###############################################################################\n## cm_webapp_local - local dev version of webapp, relies on host mounted code\n###############################################################################\n\nFROM cm_webapp_base AS cm_webapp_local\nENV FLASK_ENV development\n\n###############################################################################\n## cm_webapp_active - self-contained version of webapp, for remote deploy\n###############################################################################\n\nFROM cm_webapp_base AS cm_webapp_active\nENV FLASK_ENV production\n\nCOPY --chown=simplified:simplified . /home/simplified/circulation/\n\n###############################################################################\n## cm_scripts_base - elements common to cm_scripts_local and cm_scripts_active\n###############################################################################\n\nFROM circulation_base AS cm_scripts_base\n\nENV SIMPLIFIED_STATIC_DIR /simplified_static\n\n# By default cron is not installed in the base Ubuntu image, so we add it here.\n# Also need to add a non-empty static resource directory so the app doesn't raise\n# an exception on start.\nRUN apt-get update \\\n && apt-get install --yes --no-install-recommends cron \\\n && apt-get clean --yes \\\n && mkdir -p ${SIMPLIFIED_STATIC_DIR} \\\n && touch ${SIMPLIFIED_STATIC_DIR}/empty_file \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY ./docker/simplified_crontab /etc/cron.d/circulation\n\nRUN chmod 664 /etc/cron.d/circulation \\\n && crontab /etc/cron.d/circulation \\\n && touch /var/log/cron.log\n\nCMD [\"scripts\", \"|& tee -a /var/log/cron.log 2>$1\"]\n\n###############################################################################\n## cm_scripts_local - local dev version of scripts, relies on host mounted code\n###############################################################################\n\nFROM cm_scripts_base AS cm_scripts_local\nENV FLASK_ENV development\n\n###############################################################################\n## cm_scripts_active - self-contained version of scripts, for remote deploy\n###############################################################################\n\nFROM cm_scripts_base AS cm_scripts_active\nENV FLASK_ENV production\n\nCOPY --chown=simplified:simplified . /home/simplified/circulation/\n\n###############################################################################\n## cm_exec_base - elements common to cm_exec_local and cm_exec_active\n###############################################################################\n\nFROM circulation_base AS cm_exec_base\nCMD [\"exec\"]\n\n###############################################################################\n## cm_exec_local - local dev version of exec, relies on host mounted code\n###############################################################################\n\nFROM cm_exec_base AS cm_exec_local\nENV FLASK_ENV development\n\n###############################################################################\n## cm_exec_active - self-contained version of exec, for remote deploy\n###############################################################################\n\nFROM cm_exec_base AS cm_exec_active\nENV FLASK_ENV production\n\nCOPY --chown=simplified:simplified . /home/simplified/circulation/\n"
}