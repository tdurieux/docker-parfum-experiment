{
  "startTime": 1674255574344,
  "endTime": 1674255575359,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 95
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 7,
        "columnEnd": 93
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 23,
        "columnEnd": 34
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 19,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 7,
        "columnEnd": 61
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 7,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "########################################\n# WRF-Hydro Coupled Training Dockerfile\n# Author: Katelyn FitzGerald\n# Date:   2020-11-03\n########################################\n\n\nFROM ubuntu:focal\n\nUSER root\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update \\\n    && apt-get install -yq --no-install-recommends \\\n    bc\\\n    bzip2 \\\n    ca-certificates \\\n    csh \\\n    curl \\\n    file \\\n    g++ \\\n    gfortran \\\n    git \\\n    less \\\n    libcurl4-gnutls-dev \\\n    libhdf5-dev \\\n    libnetcdf-dev \\\n    libnetcdff-dev \\\n    libopenmpi-dev \\\n    libpng-dev \\\n    libswitch-perl \\\n    libssl-dev \\\n    libxml2-dev \\\n    locales \\\n    m4 \\\n    make \\\n    nano \\\n    netcdf-bin \\\n    openmpi-bin \\\n    openssh-client \\\n    tcsh \\\n    valgrind \\ \n    vim \\\n    wget \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN locale-gen en_US.UTF-8   \n\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n## NetCDF installs\n\n# Install netCDF-C\nENV LIB_DIR=/usr/local\nENV HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/serial\n\nRUN NETCDF_C_VERSION=\"4.4.1.1\" \\\n    && wget ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-${NETCDF_C_VERSION}.tar.gz -P /tmp \\\n    && tar -xf /tmp/netcdf-${NETCDF_C_VERSION}.tar.gz -C /tmp \\\n    && cd /tmp/netcdf-${NETCDF_C_VERSION} \\\n    && CPPFLAGS=-I${HDF5_DIR}/include LDFLAGS=-L${HDF5_DIR}/lib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${LIB_DIR} \\\n    && make \\\n    && make install \\\n    && rm -rf /tmp/netcdf* && rm /tmp/netcdf-${NETCDF_C_VERSION}.tar.gz\n\n\n# Install netCDF-Fortran\nENV LD_LIBRARY_PATH=${LIB_DIR}/lib\nRUN NETCDF_F_VERSION=\"4.4.4\" \\\n    && wget ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-fortran-${NETCDF_F_VERSION}.tar.gz -P /tmp \\\n    && tar -xf /tmp/netcdf-fortran-${NETCDF_F_VERSION}.tar.gz -C /tmp \\\n    && cd /tmp/netcdf-fortran-${NETCDF_F_VERSION} \\\n    && CPPFLAGS=-I${LIB_DIR}/include LDFLAGS=-L${LIB_DIR}/lib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${LIB_DIR} \\\n    && make \\\n    && make install \\\n    && rm -rf /tmp/netcdf* && rm /tmp/netcdf-fortran-${NETCDF_F_VERSION}.tar.gz\n\n# Install jasper to support grib2\nRUN wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/jasper-1.900.1.tar.gz -P /tmp \\\n    && tar -xf /tmp/jasper*tar.gz -C /tmp \\\n    && cd /tmp/jasper* \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${LIB_DIR} \\\n    && make \\\n    && make install \\\n    && rm -rf /tmp/jasper* && rm /tmp/jasper*tar.gz\n\n#################################\n## Create docker user\nRUN useradd -ms /bin/bash docker\nRUN usermod -aG sudo docker\nRUN chmod -R 777 /home/docker/\n#################################\n\n## WRF and WPS installs\n\n#Set WRF and WPS version argument\nARG WRF_VERSION=\"4.2.1\"\nARG WPS_VERSION=\"4.2\"\n\n#Set WRF-Hydro version argument\nARG HYDRO_VERSION=\"5.1.2\"\n\nWORKDIR /home/docker/WRF_WPS\n\nRUN wget https://github.com/wrf-model/WRF/archive/v${WRF_VERSION}.tar.gz \\\n        && tar -zxf v${WRF_VERSION}.tar.gz \\\n        && mv WRF-${WRF_VERSION} WRF \\\n        && rm v${WRF_VERSION}.tar.gz\n\nRUN wget https://github.com/NCAR/wrf_hydro_nwm_public/archive/v${HYDRO_VERSION}.tar.gz \\\n        && tar -zxf v${HYDRO_VERSION}.tar.gz \\\n        && rm -r WRF/hydro \\\n        && cp -r wrf_hydro_nwm_public*/trunk/NDHMS WRF/hydro \\\n        && rm v${HYDRO_VERSION}.tar.gz\n\nRUN wget https://github.com/wrf-model/WPS/archive/v${WPS_VERSION}.tar.gz \\\n\t&& tar -zxf v${WPS_VERSION}.tar.gz \\\n        && mv WPS-${WPS_VERSION} WPS \\\n\t&& rm v${WPS_VERSION}.tar.gz\n\n# Set paths to required libraries\nENV NETCDF=/usr/local\nENV JASPERLIB=/usr/lib\nENV JASPERINC=/usr/include\n\n# Set WRF-Hydro environment variables\nENV WRF_HYDRO=1\nENV HYDRO_D=1\nENV SPATIAL_SOIL=0\nENV WRF_HYDRO_RAPID=0\nENV WRFIO_NCD_LARGE_FILE_SUPPORT=1\nENV WRF_HYDRO_NUDGING=0\n\n# Build WRF first, required for WPS\nWORKDIR /home/docker/WRF_WPS/WRF\nRUN printf '34\\n1\\n' | ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && ./compile em_real\n\n# Build WPS second after WRF is built\nWORKDIR /home/docker/WRF_WPS/WPS\nRUN printf '1\\n' | ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && ./compile\n\nRUN chmod -R 777 /home/docker/WRF_WPS\n\n## Python installs\nRUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && bash Miniconda3-latest-Linux-x86_64.sh -b -p /home/docker/miniconda3 \\\n    && rm Miniconda3-latest-Linux-x86_64.sh\n\n#Set environment variables\nENV PATH=\"/home/docker/miniconda3/bin:${PATH}\"\n\nWORKDIR /home/docker\n\nRUN conda install -c conda-forge \\\n    nodejs \\\n    gdal \\\n    nco \\\n    nccmp \\\n    numpy \\\n    cython \\\n    jupyterlab \\\n    jupyter_contrib_nbextensions \\\n    ipython \\\n    h5py \\\n    mpi4py \\\n    netcdf4 \\\n    esmpy \\\n    matplotlib \\\n    dask \\\n    toolz \\\n    xrviz \\\n    xarray \\\n    gdown\n\nRUN conda install -c pyviz hvplot\n\nRUN jupyter labextension install @jupyterlab/toc @pyviz/jupyterlab_pyviz\n\nRUN pip install --no-cache-dir bash_kernel \\\n        && python -m bash_kernel.install\n\n#################################\nRUN mkdir /home/docker/wrf-hydro-training \\\n        && chmod -R 777 /home/docker/wrf-hydro-training\n\n#################################\n#Get the Jupyter configuration script\nCOPY ./jupyter_notebook_config.py /home/docker/.jupyter/\nRUN chmod -R 777 /home/docker/.jupyter\n\n#################################\n#Get the entrypoint script to download the code, example case, and lessons and start JupyterLab\nCOPY ./entrypoint.sh /.\nRUN chmod 777 /entrypoint.sh\nRUN chmod -R 777 /home/docker/wrf-hydro-training/\nRUN chmod -R 777 /home/docker/WRF_WPS/\n\nUSER docker\nWORKDIR /home/docker\n\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin:/home/docker/miniconda3/bin\nENV SHELL=bash\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"interactive\"]\n"
}