{
  "startTime": 1674219905984,
  "endTime": 1674219907473,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 87
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 61
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 7,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###################################\n# Author: James McCreight <jamesmcc -at- ucar.edu>\n# Author: Joe Mills <jmills -at- ucar.edu>\n# Date:  2018-02-08\n###################################\n\nFROM ubuntu:xenial\nMAINTAINER jamesmcc@ucar.edu\n\n####################################\n########## ROOT USER  ##############\n####################################\nUSER root\n\n\n####################################\n##Additional linux and command-line tools\n#Install add-apt-repository. This needs to be done starting Ubuntu 16.x\nRUN apt-get update \\\n\t&& apt-get install -yq --no-install-recommends \\\n\tsoftware-properties-common \\\n\t&& apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n#Install additional tools\nRUN add-apt-repository ppa:ubuntu-elisp/ppa \\\n    && apt-get update \\\n    && apt-get install -yq --no-install-recommends \\\n    curl \\\n    file \\\n    emacs-snapshot \\\n    emacs-snapshot-el \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n####################################\n## WRF-Hydro dependencies\n## Core wrf-hydro compiler stuff\nRUN apt-get update \\\n    && apt-get install -yq --no-install-recommends \\\n    wget \\\n    bzip2 \\\n    ca-certificates \\\n    vim \\ \n    libhdf5-dev \\\n    gfortran \\\n    g++ \\\n    valgrind \\\n    m4 \\\n    make \\ \n    libswitch-perl \\\n    git \\\n    nano \\\n    tcsh \\\n    bc \\\n    less \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && update-alternatives --config csh\n\n## Download, build, and install MPICH\nRUN MPICH_VERSION=\"3.2\" \\\n    && MPICH_CONFIGURE_OPTIONS=\"\" \\\n    && MPICH_MAKE_OPTIONS='-j 2' \\\n    && mkdir /tmp/mpich-src \\\n    && cd /tmp/mpich-src \\\n    && wget https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz \\\n    && tar xfz mpich-${MPICH_VERSION}.tar.gz \\\n    && cd mpich-${MPICH_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" ${MPICH_CONFIGURE_OPTIONS} \\\n    && make ${MPICH_MAKE_OPTIONS} && make install \\\n    && rm -rf /tmp/mpich-src && rm mpich-${MPICH_VERSION}.tar.gz\n\n#### TEST MPICH INSTALLATION ####\n## Where is this from? Should we run the test?\n#WORKDIR /tmp/mpich-test\n#COPY mpich-test .\n#RUN mkdir /tmp/mpich-test \\\n#    && test.sh \\\n#    && RUN rm -rf /tmp/mpich-test\n\n## install netcdf-C\nENV H5DIR=/usr/lib/x86_64-linux-gnu/hdf5/serial\nENV HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/serial\n\n\nRUN NETCDF_C_VERSION=\"4.4.1.1\" \\\n    && wget ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-${NETCDF_C_VERSION}.tar.gz -P /tmp \\\n    && tar -xf /tmp/netcdf-${NETCDF_C_VERSION}.tar.gz -C /tmp \\\n    && cd /tmp/netcdf-${NETCDF_C_VERSION} \\\n    && CPPFLAGS=-I${H5DIR}/include LDFLAGS=-L${H5DIR}/lib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n    && cd /tmp/netcdf-${NETCDF_C_VERSION} \\\n    && make -j 2 \\\n    && cd /tmp/netcdf-${NETCDF_C_VERSION} \\\n    && make install \\\n    && rm -rf /tmp/netcdf-${NETCDF_C_VERSION} && rm /tmp/netcdf-${NETCDF_C_VERSION}.tar.gz\n\n# install netcdf-Fortran\nENV NFDIR=/usr/local\nENV LD_LIBRARY_PATH=${NCDIR}/lib\nRUN NETCDF_F_VERSION=\"4.4.4\" \\\n    && cd /tmp \\\n    && wget ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-fortran-${NETCDF_F_VERSION}.tar.gz \\\n    && tar -xf netcdf-fortran-${NETCDF_F_VERSION}.tar.gz \\\n    && cd /tmp/netcdf-fortran-${NETCDF_F_VERSION} \\\n    && CPPFLAGS=-I${NCDIR}/include LDFLAGS=-L${NCDIR}/lib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${NFDIR} \\\n    && make -j 2 \\\n    && make install \\\n    && cd / \\\n    && rm -rf /tmp/netcdf-fortran-${NETCDF_F_VERSION} && rm netcdf-fortran-${NETCDF_F_VERSION}.tar.gz\n\nENV NETCDF=/usr/local\nENV NCDIR=/usr/local\nENV NETCDF_LIB=/usr/local/lib\nENV NETCDF_INC=/usr/local/include\n\n## just to be sure\nRUN rm -rf /tmp/*\n\n###################################\n## create docker user\nRUN useradd -ms /bin/bash docker\nRUN usermod -aG sudo docker\nRUN chmod -R 777 /home/docker/\n\n###################################\n# Python\nRUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && bash Miniconda3-latest-Linux-x86_64.sh -b -p /home/docker/miniconda3 \\\n    && rm Miniconda3-latest-Linux-x86_64.sh \\\n    && chown -R docker:docker /home/docker/miniconda3\n\n#Set environment variables\nENV PATH=\"/home/docker/miniconda3/bin:${PATH}\"\nRUN conda update conda\n\n###################################\n## build nco and nccmp here. really not what I was hpoing for.\n#Get NCCMP to compare netcdf files\nRUN add-apt-repository ppa:remik-ziemlinski/nccmp && \\\n        apt-get update && \\\n        apt-get install -yq --no-install-recommends \\\n\tnco \\\n\tnccmp \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& rm -rf /tmp/*\n\n####################################\n######### docker user ###########\n####################################\nUSER docker\nWORKDIR /home/docker\n\n"
}