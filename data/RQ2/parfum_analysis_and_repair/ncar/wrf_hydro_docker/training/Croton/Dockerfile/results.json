{
  "startTime": 1674248969699,
  "endTime": 1674248970681,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 7,
        "columnEnd": 87
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 23,
        "columnEnd": 34
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 19,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 61
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 7,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###################################\n# WRF-Hydro Training Dockerfile\n# Author: Katelyn FitzGerald\n# Date:   2020-10-28\n###################################\n\n\nFROM ubuntu:focal\n\nUSER root\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update \\\n    && apt-get install -yq --no-install-recommends \\\n    bc\\\n    bzip2 \\\n    ca-certificates \\\n    csh \\\n    curl \\\n    file \\\n    g++ \\\n    gfortran \\\n    git \\\n    less \\\n    libcurl4-gnutls-dev \\\n    libhdf5-dev \\\n    libnetcdf-dev \\\n    libnetcdff-dev \\\n    libopenmpi-dev \\\n    libpng-dev \\\n    libswitch-perl \\\n    libssl-dev \\\n    libxml2-dev \\\n    locales \\\n    m4 \\\n    make \\\n    nano \\\n    netcdf-bin \\\n    openmpi-bin \\\n    openssh-client \\\n    r-base-core \\\n    tcsh \\\n    texlive-xetex \\\n    texlive-plain-generic \\\n    texlive-fonts-recommended \\\n    valgrind \\ \n    vim \\\n    wget \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN locale-gen en_US.UTF-8   \n\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n## NetCDF installs\n\n# Install netCDF-C\nENV NCDIR=/usr/local\nENV NFDIR=/usr/local\nENV H5DIR=/usr/lib/x86_64-linux-gnu/hdf5/serial\nENV HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/serial\n\nRUN NETCDF_C_VERSION=\"4.4.1.1\" \\\n    && wget ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-${NETCDF_C_VERSION}.tar.gz -P /tmp \\\n    && tar -xf /tmp/netcdf-${NETCDF_C_VERSION}.tar.gz -C /tmp \\\n    && cd /tmp/netcdf-${NETCDF_C_VERSION} \\\n    && CPPFLAGS=-I${H5DIR}/include LDFLAGS=-L${H5DIR}/lib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n    && cd /tmp/netcdf-${NETCDF_C_VERSION} \\\n    && make \\\n    && cd /tmp/netcdf-${NETCDF_C_VERSION} \\\n    && make install \\\n    && rm -rf /tmp/netcdf-${NETCDF_C_VERSION} && rm /tmp/netcdf-${NETCDF_C_VERSION}.tar.gz\n\n# Install netCDF-Fortran\nENV LD_LIBRARY_PATH=${NCDIR}/lib\nRUN NETCDF_F_VERSION=\"4.4.4\" \\\n    && cd /tmp \\\n    && wget ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-fortran-${NETCDF_F_VERSION}.tar.gz \\\n    && tar -xf netcdf-fortran-${NETCDF_F_VERSION}.tar.gz \\\n    && cd /tmp/netcdf-fortran-${NETCDF_F_VERSION} \\\n    && CPPFLAGS=-I${NCDIR}/include LDFLAGS=-L${NCDIR}/lib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${NFDIR} \\\n    && make \\\n    && make install \\\n    && cd / \\\n    && rm -rf /tmp/netcdf-fortran-${NETCDF_F_VERSION} && rm netcdf-fortran-${NETCDF_F_VERSION}.tar.gz\n\n#################################\n## Create docker user\nRUN useradd -ms /bin/bash docker\nRUN usermod -aG sudo docker\nRUN chmod -R 777 /home/docker/\n#################################\n\n## WRF and WPS installs\n\n#Set WRF and WPS version argument\nARG WRF_VERSION=\"4.2.1\"\nARG WPS_VERSION=\"4.2\"\n\nWORKDIR /home/docker/WRF_WPS\n\nRUN wget https://github.com/wrf-model/WRF/archive/v${WRF_VERSION}.tar.gz \\\n        && tar -zxf v${WRF_VERSION}.tar.gz \\\n        && mv WRF-${WRF_VERSION} WRF \\\n        && rm v${WRF_VERSION}.tar.gz\nRUN wget https://github.com/wrf-model/WPS/archive/v${WPS_VERSION}.tar.gz \\\n\t&& tar -zxf v${WPS_VERSION}.tar.gz \\\n        && mv WPS-${WPS_VERSION} WPS \\\n\t&& rm v${WPS_VERSION}.tar.gz\n\n# Set paths to required libraries\nENV NETCDF=/usr/local\n\n# Build WRF first, required for WPS\nWORKDIR /home/docker/WRF_WPS/WRF\nRUN printf '34\\n1\\n' | ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./compile em_real\n\n# Build WPS second after WRF is built\nWORKDIR /home/docker/WRF_WPS/WPS\nRUN printf '2\\n' | ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./compile\n\nRUN chmod -R 777 /home/docker/WRF_WPS\n\n# Now delete WRF to save space\nRUN rm -rf /home/docker/WRF_WPS/WRF\n\n## Python installs\nRUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && bash Miniconda3-latest-Linux-x86_64.sh -b -p /home/docker/miniconda3 \\\n    && rm Miniconda3-latest-Linux-x86_64.sh\n\n#Set environment variables\nENV PATH=\"/home/docker/miniconda3/bin:${PATH}\"\n\nWORKDIR /home/docker\n\nRUN conda install -c conda-forge \\\n    nodejs \\\n    gdal \\\n    nco \\\n    nccmp \\\n    numpy \\\n    cython \\\n    pyproj \\\n    rasterio \\\n    geopandas \\\n    ipyleaflet \\\n    ipympl \\\n    ipywidgets \\\n    whitebox=1.2.0 \\\n    jupyterlab \\\n    jupyter_contrib_nbextensions \\\n    ipython \\\n    h5py \\\n    mpi4py \\\n    netcdf4 \\\n    esmpy \\\n    matplotlib \\\n    dask \\\n    toolz \\\n    xrviz \\\n    xarray \\\n    gdown\n\nRUN conda install -c pyviz hvplot\n\nRUN jupyter labextension install @jupyterlab/toc @pyviz/jupyterlab_pyviz @jupyter-widgets/jupyterlab-manager jupyter-leaflet\n\nRUN pip install --no-cache-dir bash_kernel \\\n        && python -m bash_kernel.install\n\n## R installs\nRUN wget https://cirrus.ucsd.edu/~pierce/ncdf/ncdf4_1.13.tar.gz \\\n        && R CMD INSTALL ncdf4_1.13.tar.gz \\\n        && rm ncdf4_1.13.tar.gz \\\n        && Rscript -e 'install.packages(c(\"optparse\",\"stringr\",\"plyr\"), repos=\"https://cran.rstudio.com\")'\n\n#################################\n#RUN gdown https://drive.google.com/uc?id=1X71fdaSEJ5GWyNY2MDIy9cC6E7A0kihl \\\n#        && tar -xzvf geog_conus.tar.gz \\\n#        && mkdir /home/docker/WRF_WPS/utilities \\\n#        && mv geog_conus /home/docker/WRF_WPS/utilities \\\n#\t&& rm geog_conus.tar.gz\n\n#################################\nRUN mkdir /home/docker/wrf-hydro-training \\\n        && chmod -R 777 /home/docker/wrf-hydro-training \\\n        && mkdir /home/docker/GIS_Training \\\n        && chmod -R 777 /home/docker/GIS_Training\n\n#################################\n#Get the Jupyter configuration script\nCOPY ./jupyter_notebook_config.py /home/docker/.jupyter/\nRUN chmod -R 777 /home/docker/.jupyter\n\n#################################\n#Get the entrypoint script to download the code, example case, and lessons and start JupyterLab\nCOPY ./entrypoint.sh /.\nRUN chmod 777 /entrypoint.sh\nRUN chmod -R 777 /home/docker/wrf-hydro-training/\nRUN chmod -R 777 /home/docker/GIS_Training/\nRUN chmod -R 777 /home/docker/miniconda3/\nRUN chmod -R 777 /home/docker/WRF_WPS/\n\nUSER docker\nWORKDIR /home/docker\n\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin:/home/docker/miniconda3/bin\nENV SHELL=bash\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"interactive\"]\n"
}