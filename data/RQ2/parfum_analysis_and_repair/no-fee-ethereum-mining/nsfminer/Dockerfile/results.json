{
  "startTime": 1674255966693,
  "endTime": 1674255967250,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 118
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 118
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.3.0-devel-ubuntu18.04 AS build\n\nRUN apt-get update && apt-get install --no-install-recommends -y git perl python3-pip mesa-common-dev libdbus-1-dev software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\nRUN apt-get update && apt-get install --no-install-recommends -y g++-10 && rm -rf /var/lib/apt/lists/*;\nRUN pip3 install --no-cache-dir cmake --upgrade\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10\nRUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10\n\nWORKDIR /app\n\n# Copying only .git files to init submodule to be able to use docker cache more\nCOPY .git .git\nCOPY .gitmodules .gitattributes ./\nRUN git submodule update --init --recursive\n\n# Copying everything\nCOPY . .\nRUN mkdir build\nWORKDIR /app/build\n\nARG DETHASHCUDA=ON\nARG DETHASHCL=ON\n\nRUN cmake .. -DETHASHCUDA=$DETHASHCUDA -DETHASHCL=$DETHASHCL\nRUN cmake --build .\n\n# For run nvidia container toolkit needs to be installed on host\n# How to: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker\n# Run docker: docker build -t nsfminer . && docker run --gpus all -e POOL=\"stratum+tcp://ikru.eth:x@us-east.ethash-hub.miningpoolhub.com:20535\" nsfminer\nFROM nvidia/cuda:11.3.0-base-ubuntu18.04\nENV POOL=\"Pool connection\"\nWORKDIR /app\nCOPY --from=build /app/ ./\n\nCMD nvidia-smi && ./build/nsfminer/nsfminer -U -P \"${POOL}\"\n"
}