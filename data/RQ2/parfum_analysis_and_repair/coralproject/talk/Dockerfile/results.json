{
  "startTime": 1674252750175,
  "endTime": 1674252750824,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14-alpine\n\nENV NODE_OPTIONS=--max-old-space-size=8192\n\n# Install build dependancies.\nRUN apk --no-cache add git python3\n\nRUN npm install -g npm@8.0.0 && npm cache clean --force;\n\n# Create app directory.\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\n# Bundle application source.\nCOPY . /usr/src/app\n\n# Store the current git revision.\nARG REVISION_HASH\nRUN mkdir -p dist/core/common/__generated__ && \\\n  echo \"{\\\"revision\\\": \\\"${REVISION_HASH}\\\"}\" > dist/core/common/__generated__/revision.json\n\n# Run all application code and dependancy setup as a non-root user:\n# SEE: https://github.com/nodejs/docker-node/blob/a2eb9f80b0fd224503ee2678867096c9e19a51c2/docs/BestPractices.md#non-root-user\nRUN chown -R node /usr/src/app\nUSER node\n\n# Node alpine image does not include ssh. This is a workaround for https://github.com/npm/cli/issues/2610.\nRUN git config --global url.\"https://github.com/\".insteadOf ssh://git@github.com/ && \\\n    git config --global url.\"https://\".insteadOf ssh://\n\n# Install build static assets and clear caches.\nRUN npm ci && \\\n  npm run build && \\\n  npm prune --production\n\n# Setup the environment\nENV NODE_ENV production\nENV PORT 5000\nEXPOSE 5000\n\n# Run the node process directly instead of using `npm run start`:\n# SEE: https://github.com/nodejs/docker-node/blob/a2eb9f80b0fd224503ee2678867096c9e19a51c2/docs/BestPractices.md#cmd\nCMD [\"node\", \"dist/index.js\"]\n"
}