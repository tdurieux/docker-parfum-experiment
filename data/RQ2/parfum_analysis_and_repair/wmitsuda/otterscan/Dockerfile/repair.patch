diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/wmitsuda/otterscan/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/wmitsuda/otterscan/Dockerfile/repaired.Dockerfile
index 49b3209..62822d5 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/wmitsuda/otterscan/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/wmitsuda/otterscan/Dockerfile/repaired.Dockerfile
@@ -1,14 +1,14 @@
 FROM node:16.14.0-alpine3.15 AS builder
 WORKDIR /otterscan-build
 COPY ["package.json", "package-lock.json", "/otterscan-build/"]
-RUN npm install
+RUN npm install && npm cache clean --force;
 COPY ["run-nginx.sh", "tsconfig.json", "craco.config.js", "tailwind.config.js", "/otterscan-build/"]
 COPY ["public", "/otterscan-build/public/"]
 COPY ["src", "/otterscan-build/src/"]
 RUN npm run build
 
 FROM alpine:3.15.0 AS logobuilder
-RUN apk add imagemagick parallel
+RUN apk add --no-cache imagemagick parallel
 WORKDIR /assets
 COPY trustwallet/blockchains/ethereum/assets /assets/1/
 COPY trustwallet/blockchains/polygon/assets /assets/137/
@@ -34,7 +34,7 @@ FROM nginx:1.21.3-alpine as nginxbuilder
 
 RUN set -ex \
     && apk update \
-    && apk add linux-headers openssl-dev pcre-dev zlib-dev openssl abuild \
+    && apk add --no-cache linux-headers openssl-dev pcre-dev zlib-dev openssl abuild \
                musl-dev libxslt libxml2-utils make mercurial gcc unzip git \
                xz g++ coreutils \
     # allow abuild as a root user \
@@ -44,23 +44,24 @@ RUN set -ex \
     && cd pkg-oss \
     && mkdir /tmp/packages \
     && for module in "brotli"; do \
+    
         echo "Building $module for nginx-$NGINX_VERSION"; \
         if [ -d /modules/$module ]; then \
             echo "Building $module from user-supplied sources"; \
-            # check if module sources file is there and not empty
+
             if [ ! -s /modules/$module/source ]; then \
                 echo "No source file for $module in modules/$module/source, exiting"; \
                 exit 1; \
             fi; \
-            # some modules require build dependencies
+
             if [ -f /modules/$module/build-deps ]; then \
                 echo "Installing $module build dependencies"; \
-                apk update && apk add $(cat /modules/$module/build-deps | xargs); \
+                apk update && apk add --no-cache $(cat /modules/$module/build-deps | xargs); \
             fi; \
-            # if a module has a build dependency that is not in a distro, provide a
-            # shell script to fetch/build/install those
-            # note that shared libraries produced as a result of this script will
-            # not be copied from the builder image to the main one so build static
+
+
+
+
             if [ -x /modules/$module/prebuild ]; then \
                 echo "Running prebuild script for $module"; \
                 /modules/$module/prebuild; \
@@ -71,7 +72,7 @@ RUN set -ex \
             echo "Building $module from pkg-oss sources"; \
             cd /pkg-oss/alpine; \
             make abuild-module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; \
-            apk add $(. ./abuild-module-$module/APKBUILD; echo $makedepends;); \
+            apk add --no-cache $(. ./abuild-module-$module/APKBUILD; echo $makedepends;); \
             make module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; \
             find ~/packages -type f -name "*.apk" -exec mv -v {} /tmp/packages/ \;; \
             BUILT_MODULES="$BUILT_MODULES $module"; \
@@ -79,7 +80,8 @@ RUN set -ex \
             echo "Don't know how to build $module module, exiting"; \
             exit 1; \
         fi; \
-    done \
+       done \
+
     && echo "BUILT_MODULES=\"$BUILT_MODULES\"" > /tmp/packages/modules.env
 
 FROM nginx:1.21.3-alpine
@@ -90,7 +92,7 @@ RUN set -ex \
            apk add --no-cache --allow-untrusted /tmp/packages/nginx-module-${module}-${NGINX_VERSION}*.apk; \
        done \
     && rm -rf /tmp/packages
-RUN apk update && apk add jq
+RUN apk update && apk add --no-cache jq
 COPY --from=chainsbuilder /chains /usr/share/nginx/html/chains/
 COPY --from=topic0builder /topic0 /usr/share/nginx/html/topic0/
 COPY --from=fourbytesbuilder /signatures /usr/share/nginx/html/signatures/