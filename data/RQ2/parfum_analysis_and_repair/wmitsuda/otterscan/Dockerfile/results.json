{
  "startTime": 1674220823969,
  "endTime": 1674220825735,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 36,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 30,
        "columnEnd": 80
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 12,
        "columnEnd": 78
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 18,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16.14.0-alpine3.15 AS builder\nWORKDIR /otterscan-build\nCOPY [\"package.json\", \"package-lock.json\", \"/otterscan-build/\"]\nRUN npm install && npm cache clean --force;\nCOPY [\"run-nginx.sh\", \"tsconfig.json\", \"craco.config.js\", \"tailwind.config.js\", \"/otterscan-build/\"]\nCOPY [\"public\", \"/otterscan-build/public/\"]\nCOPY [\"src\", \"/otterscan-build/src/\"]\nRUN npm run build\n\nFROM alpine:3.15.0 AS logobuilder\nRUN apk add --no-cache imagemagick parallel\nWORKDIR /assets\nCOPY trustwallet/blockchains/ethereum/assets /assets/1/\nCOPY trustwallet/blockchains/polygon/assets /assets/137/\nCOPY trustwallet/blockchains/smartchain/assets /assets/56/\nRUN find . -name logo.png | parallel magick convert {} -filter Lanczos -resize 32x32 {}; exit 0\n\nFROM alpine:3.15.0 AS fourbytesbuilder\nWORKDIR /signatures\nCOPY 4bytes/signatures /signatures/\nCOPY 4bytes/with_parameter_names /signatures/\n\nFROM alpine:3.15.0 AS topic0builder\nWORKDIR /topic0\nCOPY topic0/with_parameter_names /topic0/\n\nFROM alpine:3.15.0 AS chainsbuilder\nWORKDIR /chains\nCOPY chains/_data/chains /chains/\n\n# Add brotli module to official nginx image\n# Based on: https://github.com/nginxinc/docker-nginx/tree/master/modules\nFROM nginx:1.21.3-alpine as nginxbuilder\n\nRUN set -ex \\\n    && apk update \\\n    && apk add --no-cache linux-headers openssl-dev pcre-dev zlib-dev openssl abuild \\\n               musl-dev libxslt libxml2-utils make mercurial gcc unzip git \\\n               xz g++ coreutils \\\n    # allow abuild as a root user \\\n    && printf \"#!/bin/sh\\\\nSETFATTR=true /usr/bin/abuild -F \\\"\\$@\\\"\\\\n\" > /usr/local/bin/abuild \\\n    && chmod +x /usr/local/bin/abuild \\\n    && hg clone -r ${NGINX_VERSION}-${PKG_RELEASE} https://hg.nginx.org/pkg-oss/ \\\n    && cd pkg-oss \\\n    && mkdir /tmp/packages \\\n    && for module in \"brotli\"; do \\\n    \n        echo \"Building $module for nginx-$NGINX_VERSION\"; \\\n        if [ -d /modules/$module ]; then \\\n            echo \"Building $module from user-supplied sources\"; \\\n\n            if [ ! -s /modules/$module/source ]; then \\\n                echo \"No source file for $module in modules/$module/source, exiting\"; \\\n                exit 1; \\\n            fi; \\\n\n            if [ -f /modules/$module/build-deps ]; then \\\n                echo \"Installing $module build dependencies\"; \\\n                apk update && apk add --no-cache $(cat /modules/$module/build-deps | xargs); \\\n            fi; \\\n\n\n\n\n            if [ -x /modules/$module/prebuild ]; then \\\n                echo \"Running prebuild script for $module\"; \\\n                /modules/$module/prebuild; \\\n            fi; \\\n            /pkg-oss/build_module.sh -v $NGINX_VERSION -f -y -o /tmp/packages -n $module $(cat /modules/$module/source); \\\n            BUILT_MODULES=\"$BUILT_MODULES $(echo $module | tr '[A-Z]' '[a-z]' | tr -d '[/_\\-\\.\\t ]')\"; \\\n        elif make -C /pkg-oss/alpine list | grep -E \"^$module\\s+\\d+\" > /dev/null; then \\\n            echo \"Building $module from pkg-oss sources\"; \\\n            cd /pkg-oss/alpine; \\\n            make abuild-module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; \\\n            apk add --no-cache $(. ./abuild-module-$module/APKBUILD; echo $makedepends;); \\\n            make module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; \\\n            find ~/packages -type f -name \"*.apk\" -exec mv -v {} /tmp/packages/ \\;; \\\n            BUILT_MODULES=\"$BUILT_MODULES $module\"; \\\n        else \\\n            echo \"Don't know how to build $module module, exiting\"; \\\n            exit 1; \\\n        fi; \\\n       done \\\n\n    && echo \"BUILT_MODULES=\\\"$BUILT_MODULES\\\"\" > /tmp/packages/modules.env\n\nFROM nginx:1.21.3-alpine\nCOPY --from=nginxbuilder /tmp/packages /tmp/packages\nRUN set -ex \\\n    && . /tmp/packages/modules.env \\\n    && for module in $BUILT_MODULES; do \\\n           apk add --no-cache --allow-untrusted /tmp/packages/nginx-module-${module}-${NGINX_VERSION}*.apk; \\\n       done \\\n    && rm -rf /tmp/packages\nRUN apk update && apk add --no-cache jq\nCOPY --from=chainsbuilder /chains /usr/share/nginx/html/chains/\nCOPY --from=topic0builder /topic0 /usr/share/nginx/html/topic0/\nCOPY --from=fourbytesbuilder /signatures /usr/share/nginx/html/signatures/\nCOPY --from=logobuilder /assets /usr/share/nginx/html/assets/\nCOPY nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf\nCOPY nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY --from=builder /otterscan-build/build /usr/share/nginx/html/\nCOPY --from=builder /otterscan-build/run-nginx.sh /\nWORKDIR /\n\nCMD [\"/run-nginx.sh\"]\n"
}