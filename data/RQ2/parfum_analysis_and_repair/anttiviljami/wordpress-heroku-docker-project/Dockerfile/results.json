{
  "startTime": 1674251633954,
  "endTime": 1674251634790,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 205
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 201
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 164
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 157
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Inherit from Heroku's stack\nFROM heroku/heroku:16\n\n# Internally, we arbitrarily use port 3000\nENV PORT 3000\n\n# Which versions?\nENV PHP_VERSION 7.3.0\nENV HTTPD_VERSION 2.4.37\nENV NGINX_VERSION 1.8.1\nENV COMPOSER_VERSION 1.2.1\nENV NODE_ENGINE 8.14.0\nENV REDIS_EXT_VERSION 4.2.0\nENV IMAGICK_EXT_VERSION 3.4.3\n\nENV PATH /app/heroku/node/bin:/app/user/node_modules/.bin:$PATH\n\n# Create some needed directories\nRUN mkdir -p /app/.heroku/php /app/heroku/node /app/.profile.d\nWORKDIR /app/user\n\n# so we can run PHP in here\nENV PATH /app/.heroku/php/bin:/app/.heroku/php/sbin:$PATH\n\n# Install Apache\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-heroku-16-stable/apache-$HTTPD_VERSION.tar.gz | tar xz -C /app/.heroku/php\n# Config\nRUN curl -f --silent --location https://raw.githubusercontent.com/heroku/heroku-buildpack-php/5a770b914549cf2a897cbbaf379eb5adf410d464/conf/apache2/httpd.conf.default > /app/.heroku/php/etc/apache2/httpd.conf\n# FPM socket permissions workaround when run as root\nRUN echo \"\\n\\\nGroup root\\n\\\n\" >> /app/.heroku/php/etc/apache2/httpd.conf\n\n# Install Nginx\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-cedar-16-stable/nginx-$NGINX_VERSION.tar.gz | tar xz -C /app/.heroku/php\n# Config\nRUN curl -f --silent --location https://raw.githubusercontent.com/heroku/heroku-buildpack-php/5a770b914549cf2a897cbbaf379eb5adf410d464/conf/nginx/nginx.conf.default > /app/.heroku/php/etc/nginx/nginx.conf\n# FPM socket permissions workaround when run as root\nRUN echo \"\\n\\\nuser nobody root;\\n\\\n\" >> /app/.heroku/php/etc/nginx/nginx.conf\n\n# Install PHP\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-heroku-16-stable/php-$PHP_VERSION.tar.gz | tar xz -C /app/.heroku/php\n# Config\nRUN mkdir -p /app/.heroku/php/etc/php/conf.d\nRUN curl -f --silent --location https://raw.githubusercontent.com/heroku/heroku-buildpack-php/master/support/build/_conf/php/php.ini > /app/.heroku/php/etc/php/php.ini\n\n# Install Redis extension for PHP\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-heroku-16-stable/extensions/no-debug-non-zts-20180731/redis-$REDIS_EXT_VERSION.tar.gz | tar xz -C /app/.heroku/php\n\n# Install ImageMagick extension for PHP\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-heroku-16-stable/extensions/no-debug-non-zts-20180731/imagick-$IMAGICK_EXT_VERSION.tar.gz | tar xz -C /app/.heroku/php\n\n# Enable all optional exts & change upload settings\nRUN echo \"\\n\\\nupload_max_filesize = 100M \\n\\\npost_max_size = 100M \\n\\\nmemory_limit = 200M \\n\\\nmax_execution_time = 60 \\n\\\nmax_input_time = 60 \\n\\\nuser_ini.cache_ttl = 30 \\n\\\nopcache.enable_cli = 1 \\n\\\nopcache.validate_timestamps = 1 \\n\\\nopcache.revalidate_freq = 0 \\n\\\nopcache.fast_shutdown = 0 \\n\\\nextension=bcmath.so \\n\\\nextension=calendar.so \\n\\\nextension=exif.so \\n\\\nextension=ftp.so \\n\\\nextension=gd.so \\n\\\nextension=gettext.so \\n\\\nextension=intl.so \\n\\\nextension=mbstring.so \\n\\\nextension=pcntl.so \\n\\\nextension=redis.so \\n\\\nextension=shmop.so \\n\\\nextension=soap.so \\n\\\nextension=sqlite3.so \\n\\\nextension=pdo_sqlite.so \\n\\\nextension=xmlrpc.so \\n\\\nextension=xsl.so\\n\\\n\" >> /app/.heroku/php/etc/php/php.ini\n\n# Enable timestamps validation for opcache for development\nRUN sed -i /opcache.validate_timestamps/d /app/.heroku/php/etc/php/conf.d/010-ext-zend_opcache.ini\n\n# Install Composer\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-cedar-16-stable/composer-$COMPOSER_VERSION.tar.gz | tar xz -C /app/.heroku/php\nRUN composer self-update\n\n# Install Node.js\nRUN curl -f -s https://s3pository.heroku.com/node/v$NODE_ENGINE/node-v$NODE_ENGINE-linux-x64.tar.gz | tar --strip-components=1 -xz -C /app/heroku/node\n\n# Export the node path in .profile.d\nRUN echo \"export PATH=\\\"/app/heroku/node/bin:/app/user/node_modules/.bin:\\$PATH\\\"\" > /app/.profile.d/nodejs.sh\n\n# Install yarn package manager\nRUN npm install --global yarn && npm cache clean --force;\n\n# Copy composer json and lock files\nCOPY composer.json /app/user/\nCOPY composer.lock /app/user/\n\n# Run pre-install hooks\nRUN composer run-script pre-install-cmd\n\n# Remove composer json and lock file\nRUN rm composer.*\n\n# Export heroku bin\nENV PATH /app/user/bin:$PATH\n\n"
}