{
  "startTime": 1674253569785,
  "endTime": 1674253570768,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 77,
        "columnEnd": 131
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 9,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 9,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 9,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 9,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 9,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 9,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 150
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 9,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 9,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "# Note: in future we should use the timescaledb-ha image. Unfortunately it\n# doesn't have arm64 builds, so we're doing things from scratch.\nFROM ubuntu:22.04\n\nSHELL [\"/bin/bash\", \"-eE\", \"-o\", \"pipefail\", \"-c\"]\n\nRUN apt update && apt install --no-install-recommends -y sudo wget curl gnupg2 lsb-release && rm -rf /var/lib/apt/lists/*;\n\n# Setup a non-root user that we'll use\nRUN adduser --disabled-password --gecos \"\" ubuntu && \\\n usermod -aG sudo ubuntu && \\\n echo \"ubuntu ALL=(ALL:ALL) NOPASSWD: ALL\" > /etc/sudoers.d/ubuntu\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install timescaledb\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -c -s)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -\nRUN echo \"deb [signed-by=/usr/share/keyrings/timescale.keyring] https://packagecloud.io/timescale/timescaledb/ubuntu/ $(lsb_release -c -s) main\" > /etc/apt/sources.list.d/timescaledb.list\nRUN wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --batch --dearmor -o /usr/share/keyrings/timescale.keyring\nRUN apt-get update && apt-get install --no-install-recommends -y timescaledb-2-postgresql-{12,13,14} && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y build-essential clang libssl-dev pkg-config libreadline-dev zlib1g-dev postgresql-server-dev-{12,13,14} && rm -rf /var/lib/apt/lists/*;\n\n# These directories need to be writeable for pgx to install the extension into\nRUN chmod a+w /usr/share/postgresql/*/extension /usr/lib/postgresql/*/lib\n\nUSER ubuntu\n\n# Install rust\nENV RUST_VERSION=1.62.0\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path --profile minimal --component rustfmt --default-toolchain ${RUST_VERSION}\nENV PATH=/home/ubuntu/.cargo/bin:$PATH\n\nRUN cargo install cargo-pgx --git https://github.com/timescale/pgx --branch promscale-staging --rev ee52db6b\n\nRUN cargo pgx init --pg14 /usr/lib/postgresql/14/bin/pg_config --pg13 /usr/lib/postgresql/13/bin/pg_config --pg12 /usr/lib/postgresql/12/bin/pg_config\n\nRUN timescaledb-tune --quiet --yes -conf-path ~/.pgx/data-12/postgresql.conf\nRUN timescaledb-tune --quiet --yes -conf-path ~/.pgx/data-13/postgresql.conf\nRUN timescaledb-tune --quiet --yes -conf-path ~/.pgx/data-14/postgresql.conf\n\n# Make Postgres accessible from host\nRUN sed -i \"s/#listen_addresses = 'localhost'/listen_addresses = '*'/\" ~/.pgx/data-{12,13,14}/postgresql.conf\nRUN sed -i \"s#127.0.0.1/32#0.0.0.0/0#\" ~/.pgx/data-{12,13,14}/pg_hba.conf\n# Disable telemetry\nRUN echo \"timescaledb.telemetry_level=off\" | tee -a ~/.pgx/data-{12,13,14}/postgresql.conf\n\nRUN sudo apt-get install --no-install-recommends -y vim && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p ~/.cargo\n# Make cargo put compile artifacts in non-bind-mounted directory\n# To re-use compiled artifacts, mount a docker volume to /tmp/target\nRUN echo -e '[build]\\ntarget-dir=\"/tmp/target\"' > ~/.cargo/config.toml\n# Sources should be bind-mounted to /code/\nWORKDIR /code/\n\nRUN sudo apt-get install --no-install-recommends -y entr && rm -rf /var/lib/apt/lists/*;\nCOPY devenv.sh /usr/local/bin/\nCMD [\"devenv.sh\"]\n\n\n"
}