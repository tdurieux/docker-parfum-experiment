{
  "startTime": 1674256246954,
  "endTime": 1674256249574,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 4,
        "columnEnd": 172
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 20,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 204,
        "lineEnd": 206,
        "columnStart": 8,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 67,
        "columnEnd": 128
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 69,
        "columnEnd": 131
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 22,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 7,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 42,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 33,
        "columnEnd": 96
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 131,
        "lineEnd": 133,
        "columnStart": 8,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 12,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 42,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 33,
        "columnEnd": 96
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 131,
        "lineEnd": 133,
        "columnStart": 8,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 12,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 22,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 7,
        "columnEnd": 91
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 42,
        "columnEnd": 95
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 33,
        "columnEnd": 96
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 131,
        "lineEnd": 133,
        "columnStart": 8,
        "columnEnd": 93
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 12,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 22,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 42,
        "columnEnd": 119
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 33,
        "columnEnd": 120
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 131,
        "lineEnd": 133,
        "columnStart": 8,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 12,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 130
      }
    }
  ],
  "repairedDockerfile": "## The purpose of this Dockerfile is to build an image that contains:\n## - timescale from (internal) sources\n## - many PostgreSQL extensions\n## - patroni for High Availability\n## - spilo to allow the github.com/zalando/postgres-operator to be compatible\n## - pgBackRest to allow good backups\n\n# By including multiple versions of PostgreSQL we can use the same Docker image,\n# regardless of the major PostgreSQL Version. It also allow us to support (eventually)\n# pg_upgrade from one major version to another,\n# so we need all the postgres & timescale libraries for all versions\nARG PG_VERSIONS=\"14 13\"\nARG PG_MAJOR=13\n\n## We have many base images to choose from, (alpine, bitnami) but as we're adding a lot\n## of tools to the image anyway, the end result is that we would only\n## reduce the final Docker image by single digit MB's, which is insignificant\n## in relation to the total image size.\n## By choosing a very basic base image, we do keep full control over every part\n## of the build steps. This Dockerfile contains every piece of magic we want.\n\n## To allow us to use specific glibc 2.33+ features, we need to find a way\n## to run glibc 2.33. Running multiple glibc versions inside the same\n## container is something we'd like to avoid, we've seen multiple glibc\n## related bugs in our lifetime, adding multiple glibc versions in the mix\n## would make debugging harder.\n\n## Debian (and rust:debian) has served us well in the past, however even Debian's\n## latest release (bullseye, August 2021) cannot give us glibc 2.33.\n## Ubuntu however does give us glibc 2.33 - as Ubuntu is based upon Debian\n## the changes required are not that big for this Docker Image. Most of the\n## tools we use will be the same across the board, as most of our tools our\n## installed using external repositories.\nFROM ubuntu:22.04 AS compiler\n\nENV DEBIAN_FRONTEND=noninteractive\n# We need full control over the running user, including the UID, therefore we\n# create the postgres user as the first thing on our list\nRUN adduser --home /home/postgres --uid 1000 --disabled-password --gecos \"\" postgres\n\nRUN echo 'APT::Install-Recommends \"false\";' >> /etc/apt/apt.conf.d/01norecommend\nRUN echo 'APT::Install-Suggests \"false\";' >> /etc/apt/apt.conf.d/01norecommend\n\n# Make sure we're as up-to-date as possible, and install the highlest level dependencies\nRUN apt-get update && apt-get upgrade -y \\\n    && apt-get install --no-install-recommends -y ca-certificates curl gnupg1 gpg gpg-agent locales lsb-release wget && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p /build/scripts\nRUN chmod 777 /build\nWORKDIR /build/\n\nRUN wget -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --batch --dearmor --output /usr/share/keyrings/postgresql.keyring\nRUN for t in deb deb-src; do \\\n        echo \"$t [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/postgresql.keyring] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -s -c)-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list; \\\n    done\n\nRUN apt-get clean\nRUN apt-get update\n\n# The following tools are required for some of the processes we (TimescaleDB) regularly\n# run inside the containers that use this Docker Image\nRUN apt-get install --no-install-recommends -y less jq strace procps && rm -rf /var/lib/apt/lists/*;\n\n# For debugging it is very useful if the Docker Image contains gdb(server). Even though it is\n# not expected to be running gdb in a live instance often, it simplifies getting backtraces from\n# containers using this image\nRUN apt-get install --no-install-recommends -y gdb gdbserver && rm -rf /var/lib/apt/lists/*;\n\n# The next 2 instructions (ENV + RUN) are directly copied from https://github.com/rust-lang/docker-rust/blob/aa8bed3870cb14ecf49f127bae0a212adebc2384/1.60.0/buster/Dockerfile\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH \\\n    RUST_VERSION=1.60.0\n\nRUN set -eux; \\\n    dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"${dpkgArch##*-}\" in \\\n        amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='3dc5ef50861ee18657f9db2eeb7392f9c2a6c95c90ab41e45ab4ca71476b4338' ;; \\\n        armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='67777ac3bc17277102f2ed73fd5f14c51f4ca5963adadf7f174adf4ebc38747b' ;; \\\n        arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='32a1532f7cef072a667bac53f1a5542c99666c4071af0c9549795bbdb2069ec1' ;; \\\n        i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='e50d1deb99048bc5782a0200aa33e4eea70747d49dffdc9d06812fd22a372515' ;; \\\n        *) echo >&2 \"unsupported architecture: ${dpkgArch}\"; exit 1 ;; \\\n    esac; \\\n    url=\"https://static.rust-lang.org/rustup/archive/1.24.3/${rustArch}/rustup-init\"; \\\n    wget \"$url\"; \\\n    echo \"${rustupSha256}  *rustup-init\" | sha256sum -c -; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \\\n    rm rustup-init; \\\n    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \\\n    rustup --version; \\\n    cargo --version; \\\n    rustc --version;\n\n# These packages allow for a better integration for some containers, for example\n# daemontools provides envdir, which is very convenient for passing backup\n# environment variables around.\nRUN apt-get update && apt-get install --no-install-recommends -y dumb-init daemontools && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y postgresql-common pgbouncer pgbackrest lz4 libpq-dev libpq5 pgtop \\\n    # forbid creation of a main cluster when package is installed\n    && sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf && rm -rf /var/lib/apt/lists/*;\n\n# Setup locales\nRUN find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \\\n    && find /usr/share/i18n/locales/ -type f ! -name en_US ! -name en_GB ! -name i18n* ! -name iso14651_t1 ! -name iso14651_t1_common ! -name 'translit_*' -delete \\\n    && echo 'en_US.UTF-8 UTF-8' > /usr/share/i18n/SUPPORTED \\\n    ## Make sure we have a en_US.UTF-8 locale available\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\n\n# We install some build dependencies and mark the installed packages as auto-installed,\n# this will cause the cleanup to get rid of all of these packages\nENV BUILD_PACKAGES=\"binutils cmake devscripts equivs gcc git gpg gpg-agent libc-dev libc6-dev libkrb5-dev libperl-dev libssl-dev lsb-release make patchutils python2-dev python3-dev wget\"\nRUN apt-get install --no-install-recommends -y ${BUILD_PACKAGES} && rm -rf /var/lib/apt/lists/*;\nRUN apt-mark auto ${BUILD_PACKAGES}\n\nARG PG_VERSIONS\n\n# We install the PostgreSQL build dependencies and mark the installed packages as auto-installed,\nRUN for pg in ${PG_VERSIONS}; do \\\n        mk-build-deps postgresql-${pg} && apt-get install --no-install-recommends -y ./postgresql-${pg}-build-deps*.deb && apt-mark auto postgresql-${pg}-build-deps || exit 1; \\\n    done && rm -rf /var/lib/apt/lists/*;\n\n# For the compiler image, we want all the PostgreSQL versions to be installed,\n# so tools that depend on `pg_config` or other parts to exist can be run\nRUN for pg in ${PG_VERSIONS}; do apt-get install --no-install-recommends -y postgresql-${pg} postgresql-server-dev-${pg} || exit 1; done && rm -rf /var/lib/apt/lists/*;\n\nFROM compiler as builder\n\nRUN for pg in ${PG_VERSIONS}; do \\\n        apt-get install --no-install-recommends -y postgresql-${pg}-dbgsym postgresql-plpython3-${pg} postgresql-plperl-${pg} \\\n            postgresql-${pg}-pgextwlist postgresql-${pg}-hll postgresql-${pg}-pgrouting postgresql-${pg}-repack postgresql-${pg}-hypopg postgresql-${pg}-unit \\\n            postgresql-${pg}-pg-stat-kcache postgresql-${pg}-cron postgresql-${pg}-pldebugger || exit 1; \\\n    done && rm -rf /var/lib/apt/lists/*;\n\n# We put Postgis in first, so these layers can be reused\nARG POSTGIS_VERSIONS=\"3\"\nRUN for postgisv in ${POSTGIS_VERSIONS}; do \\\n        for pg in ${PG_VERSIONS}; do \\\n            apt-get install --no-install-recommends -y postgresql-${pg}-postgis-${postgisv} || exit 1; \\\n        done; \\\n    done && rm -rf /var/lib/apt/lists/*;\n\n# Some Patroni prerequisites\n# This need to be done after the PostgreSQL packages have been installed,\n# to ensure we have the preferred libpq installations etc.\nRUN apt-get install --no-install-recommends -y python3-etcd python3-requests python3-pystache python3-kubernetes python3-pysyncobj && rm -rf /var/lib/apt/lists/*;\nRUN echo 'deb http://cz.archive.ubuntu.com/ubuntu kinetic main universe' >> /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y patroni=2.1.4-\\* && \\\n    head -n -1 /etc/apt/sources.list > /etc/apt/sources.list.tmp; rm -rf /var/lib/apt/lists/*; mv /etc/apt/sources.list.tmp /etc/apt/sources.list; \\\n    apt-get update\n# Patch Patroni code with changes from https://github.com/zalando/patroni/pull/2318.\n# NOTE: This is a temporary solution until changes land upstream.\nARG TIMESCALE_STATIC_PRIMARY\nRUN if [ \"${TIMESCALE_STATIC_PRIMARY}\" != \"\" ]; then \\\n    wget -qO- https://raw.githubusercontent.com/timescale/patroni/v2.2.0-beta.4/patroni/ha.py > /usr/lib/python3/dist-packages/patroni/ha.py && \\\n    wget -qO- https://raw.githubusercontent.com/timescale/patroni/v2.2.0-beta.4/patroni/config.py > /usr/lib/python3/dist-packages/patroni/config.py && \\\n    wget -qO- https://raw.githubusercontent.com/timescale/patroni/v2.2.0-beta.4/patroni/validator.py > /usr/lib/python3/dist-packages/patroni/validator.py; \\\n    fi\n\nRUN for file in $(find /usr/share/postgresql -name 'postgresql.conf.sample'); do \\\n        # We want timescaledb to be loaded in this image by every created cluster\n        sed -r -i \"s/[#]*\\s*(shared_preload_libraries)\\s*=\\s*'(.*)'/\\1 = 'timescaledb,\\2'/;s/,'/'/\" $file \\\n        # We need to listen on all interfaces, otherwise PostgreSQL is not accessible\n        && echo \"listen_addresses = '*'\" >> $file; \\\n    done\n\nARG PG_VERSIONS\n\n# timescaledb-tune, as well as timescaledb-parallel-copy\n# TODO: Replace `focal` with `$(lsb_release -s -c)` once packages are available\n# for Ubuntu 22.04\nRUN wget -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --batch --dearmor --output /usr/share/keyrings/timescaledb.keyring\nRUN echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/timescaledb.keyring] https://packagecloud.io/timescale/timescaledb/ubuntu/ focal main\" > /etc/apt/sources.list.d/timescaledb.list\n\nRUN apt-get update && apt-get install --no-install-recommends -y timescaledb-tools && rm -rf /var/lib/apt/lists/*;\n\n## Entrypoints as they are from the Timescale image and its default alpine upstream repositories.\n## This ensures the default interface (entrypoint) equals the one of the github.com/timescale/timescaledb-docker one,\n## which allows this Docker Image to be a drop-in replacement for those Docker Images.\nARG GITHUB_TIMESCALEDB_DOCKER_REF=main\nARG GITHUB_DOCKERLIB_POSTGRES_REF=main\nRUN cd /build && git clone https://github.com/timescale/timescaledb-docker && cd /build/timescaledb-docker && git checkout ${GITHUB_TIMESCALEDB_DOCKER_REF}\nRUN cp -a /build/timescaledb-docker/docker-entrypoint-initdb.d /docker-entrypoint-initdb.d/\n# Add custom entrypoint to install timescaledb_toolkit\nCOPY scripts/010_install_timescaledb_toolkit.sh /docker-entrypoint-initdb.d/\nRUN curl -f -s -o /usr/local/bin/docker-entrypoint.sh https://raw.githubusercontent.com/docker-library/postgres/${GITHUB_DOCKERLIB_POSTGRES_REF}/13/alpine/docker-entrypoint.sh\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\n# Satisfy assumptions of the entrypoint scripts\nRUN ln -s /usr/bin/timescaledb-tune /usr/local/bin/timescaledb-tune\nRUN ln -s /usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh\n\nENV REPO_SECRET_FILE=/run/secrets/private_repo_token\n\n# hot-forge is a project that allows hot-patching of postgres containers\n# It is currently a private timescale project and is therefore not included/built by default,\n# and never included in the OSS image.\nARG TIMESCALE_HOT_FORGE=\nRUN --mount=type=secret,uid=1000,id=private_repo_token \\\n    if [ -f \"${REPO_SECRET_FILE}\" -a -z \"${OSS_ONLY}\" -a ! -z \"${TIMESCALE_HOT_FORGE}\" ]; then \\\n        GH_REPO=\"https://api.github.com/repos/timescale/hot-forge\"; \\\n        ASSET_ID=\"$( curl -f -sL --header \"Authorization: token $(cat \"${REPO_SECRET_FILE}\")\" \"${GH_REPO}/releases/tags/${TIMESCALE_HOT_FORGE}\" | jq '.assets[0].id')\" ; \\\n        curl -f -sL --header \"Authorization: token $(cat \"${REPO_SECRET_FILE}\")\" \\\n                 --header 'Accept: application/octet-stream' \\\n                 \"${GH_REPO}/releases/assets/${ASSET_ID}\" > /usr/local/bin/hot-forge || exit 1; \\\n        chmod 0755 /usr/local/bin/hot-forge ; \\\n        hot-forge -V || exit 1 ; \\\n    fi\n\n# OOM Guard is a library that enables us to mitigate OOMs by blocking allocations above a limit.\n# It is a private timescale project and is therefore not included/built by default\nARG TIMESCALE_OOM_GUARD=\nRUN --mount=type=secret,uid=1000,id=private_repo_token \\\n    if [ -f \"${REPO_SECRET_FILE}\" -a -z \"${OSS_ONLY}\" -a ! -z \"${TIMESCALE_OOM_GUARD}\" ]; then \\\n        mkdir /usr/local/bin/oom-guard; \\\n        cd /build \\\n        && git clone https://github-actions:$(cat \"${REPO_SECRET_FILE}\")@github.com/timescale/oom_guard \\\n        && cd /build/oom_guard && git reset HEAD --hard && git checkout ${TIMESCALE_OOM_GUARD} \\\n        && make all || exit 1; \\\n       chmod 0755 -R /usr/local/bin/oom-guard ;\\\n    fi\n\n# The following allows *new* files to be created, so that extensions can be added to a running container.\n# Existing files are still owned by root and have their sticky bit (the 1 in the 1775 permission mode) set,\n# and therefore cannot be overwritten or removed by the unprivileged (postgres) user.\n# This ensures the following:\n# - libraries and supporting files that have been installed *before this step* are immutable\n# - libraries and supporting files that have been installed *after this step* are mutable\n# - files owned by postgres can be overwritten in a running container\n# - new files can be added to the directories mentioned here\nRUN for pg in ${PG_VERSIONS}; do \\\n        for dir in \"$(/usr/lib/postgresql/${pg}/bin/pg_config --sharedir)/extension\" \"$(/usr/lib/postgresql/${pg}/bin/pg_config --pkglibdir)\" \"$(/usr/lib/postgresql/${pg}/bin/pg_config --bindir)\"; do \\\n            install --directory \"${dir}\" --group postgres --mode 1775 \\\n            && find \"${dir}\" -type d -exec install --directory {} --group postgres --mode 1775 \\; || exit 1 ; \\\n        done; \\\n    done\n\nUSER postgres\n\nENV MAKEFLAGS=-j8\n\nARG GITHUB_REPO=timescale/timescaledb\nRUN --mount=type=secret,uid=1000,id=private_repo_token \\\n    if [ -f \"{REPO_SECRET_FILE}\" ]; then \\\n        git clone \"https://github-actions:$(cat \"${REPO_SECRET_FILE}\")@github.com/${GITHUB_REPO}\" /build/timescaledb; \\\n    else \\\n        git clone \"https://github.com/${GITHUB_REPO}\" /build/timescaledb; \\\n    fi\n\n# INSTALL_METHOD will show up in the telemetry, which makes it easier to identify these installations\nARG INSTALL_METHOD=docker-ha\nARG GITHUB_TAG\nARG OSS_ONLY\n\nCOPY build_scripts /build/scripts\n\n# If a specific GITHUB_TAG is provided, we will build that tag only. Otherwise\n# we build all the public (recent) releases\nRUN TS_VERSIONS=\"1.7.5 2.1.0 2.1.1 2.2.0 2.2.1 2.3.0 2.3.1 2.4.0 2.4.1 2.4.2 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1\" \\\n    && if [ \"${GITHUB_TAG}\" != \"\" ]; then TS_VERSIONS=\"${GITHUB_TAG}\"; fi \\\n    && cd /build/timescaledb && git pull \\\n    && set -e \\\n    && for pg in ${PG_VERSIONS}; do \\\n        /build/scripts/install_timescaledb.sh ${pg} ${TS_VERSIONS} || exit 1 ; \\\n    done\n\nRUN curl -f -L \"https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz\" \\\n    | tar zxf -\nRUN chmod +x sccache-*/sccache\nRUN mkdir -p /build/bin\nRUN mv sccache-*/sccache /build/bin/sccache\nENV RUSTC_WRAPPER=/build/bin/sccache\nENV SCCACHE_BUCKET=timescaledb-docker-ha-sccache\n\nARG TIMESCALE_PROMSCALE_EXTENSIONS=\nARG TIMESCALE_PROMSCALE_REPO=github.com/timescale/promscale_extension\n# build and install the promscale_extension extension\nRUN --mount=type=secret,uid=1000,id=AWS_ACCESS_KEY_ID --mount=type=secret,uid=1000,id=AWS_SECRET_ACCESS_KEY \\\n    if [ ! -z \"${TIMESCALE_PROMSCALE_EXTENSIONS}\" -a -z \"${OSS_ONLY}\" ]; then \\\n        [ -f \"/run/secrets/AWS_ACCESS_KEY_ID\" ] && export AWS_ACCESS_KEY_ID=\"$(cat /run/secrets/AWS_ACCESS_KEY_ID)\" ; \\\n        [ -f \"/run/secrets/AWS_SECRET_ACCESS_KEY\" ] && export AWS_SECRET_ACCESS_KEY=\"$(cat /run/secrets/AWS_SECRET_ACCESS_KEY)\" ; \\\n        set -e \\\n        && git clone https://${TIMESCALE_PROMSCALE_REPO} /build/promscale_extension \\\n        && cd /build/promscale_extension \\\n        && for pg in ${PG_VERSIONS}; do \\\n            /build/scripts/install_promscale.sh ${pg} ${TIMESCALE_PROMSCALE_EXTENSIONS} || exit 1 ; \\\n        done; \\\n    fi\n\n# Make sure to override this when upgrading to new PGX version\nARG PGX_VERSION=0.2.6\nARG TIMESCALE_CLOUDUTILS=\n# build and install the cloudutils libarary and extension\nRUN --mount=type=secret,uid=1000,id=private_repo_token --mount=type=secret,uid=1000,id=AWS_ACCESS_KEY_ID --mount=type=secret,uid=1000,id=AWS_SECRET_ACCESS_KEY \\\n    if [ -f \"${REPO_SECRET_FILE}\" -a ! -z \"${TIMESCALE_CLOUDUTILS}\" -a -z \"${OSS_ONLY}\" ]; then \\\n        [ -f \"/run/secrets/AWS_ACCESS_KEY_ID\" ] && export AWS_ACCESS_KEY_ID=\"$(cat /run/secrets/AWS_ACCESS_KEY_ID)\" ; \\\n        [ -f \"/run/secrets/AWS_SECRET_ACCESS_KEY\" ] && export AWS_SECRET_ACCESS_KEY=\"$(cat /run/secrets/AWS_SECRET_ACCESS_KEY)\" ; \\\n        set -e \\\n        && cd /build \\\n        && cargo install cargo-pgx --git https://github.com/nikkhils/pgx.git --rev 4cc6a13; \\\n        for pg in ${PG_VERSIONS}; do \\\n            if [ ${pg} -ge \"13\" ]; then \\\n                [ -d \"/build/timescaledb_cloudutils/.git\" ] || git clone https://github-actions:$(cat \"${REPO_SECRET_FILE}\")@github.com/timescale/timescaledb_cloudutils || exit 1 ; \\\n                cd /build/timescaledb_cloudutils && git reset HEAD --hard && git checkout ${TIMESCALE_CLOUDUTILS} ; \\\n                export PG_CONFIG=\"/usr/lib/postgresql/${pg}/bin/pg_config\"; \\\n                export PATH=\"/usr/lib/postgresql/${pg}/bin:${PATH}\"; \\\n                cargo pgx init --pg${pg} /usr/lib/postgresql/${pg}/bin/pg_config; \\\n                git clean -f -x; \\\n                make clean && make install -j1 || exit 1; \\\n            fi; \\\n        done; \\\n    fi\n\n# Protected Roles is a library that restricts the CREATEROLE/CREATEDB privileges of non-superusers.\n# It is a private timescale project and is therefore not included/built by default\nARG TIMESCALE_TSDB_ADMIN=\nRUN --mount=type=secret,uid=1000,id=private_repo_token \\\n    if [ -f \"${REPO_SECRET_FILE}\" -a -z \"${OSS_ONLY}\" -a ! -z \"${TIMESCALE_TSDB_ADMIN}\" ]; then \\\n        cd /build \\\n        && git clone https://github-actions:$(cat \"${REPO_SECRET_FILE}\")@github.com/timescale/protected_roles \\\n        && for pg in ${PG_VERSIONS}; do \\\n            cd /build/protected_roles && git reset HEAD --hard && git checkout ${TIMESCALE_TSDB_ADMIN} \\\n            && make clean && PG_CONFIG=/usr/lib/postgresql/${pg}/bin/pg_config make install || exit 1 ; \\\n        done; \\\n    fi\n\n# pg_stat_monitor is a Query Performance Monitoring tool for PostgreSQL\n# https://github.com/percona/pg_stat_monitor\nARG PG_STAT_MONITOR=\nRUN if [ ! -z \"${PG_STAT_MONITOR}\" ]; then \\\n        cd /build \\\n        && git clone https://github.com/percona/pg_stat_monitor \\\n        && for pg in ${PG_VERSIONS}; do \\\n            export PATH=\"/usr/lib/postgresql/${pg}/bin:${PATH}\" \\\n            && cd /build/pg_stat_monitor && git reset HEAD --hard && git checkout \"${PG_STAT_MONITOR}\" \\\n            && make USE_PGXS=1 \\\n            && make USE_PGXS=1 install || exit 1 ; \\\n        done; \\\n    fi\n\n# pg_auth_mon is an extension to monitor authentication attempts\n# It is also useful to determine whether the DB is actively used\n# https://github.com/RafiaSabih/pg_auth_mon\nARG PG_AUTH_MON=\nRUN if [ ! -z \"${PG_AUTH_MON}\" ]; then \\\n        cd /build \\\n        && git clone https://github.com/RafiaSabih/pg_auth_mon \\\n        && for pg in ${PG_VERSIONS}; do \\\n            cd /build/pg_auth_mon && git reset HEAD --hard && git checkout \"${PG_AUTH_MON}\" \\\n            && make clean && PATH=\"/usr/lib/postgresql/${pg}/bin:${PATH}\" make install || exit 1 ; \\\n        done; \\\n    fi\n\n# logerrors is an extension to count the number of errors logged by postgrs, grouped by the error codes\n# https://github.com/munakoiso/logerrors\nARG PG_LOGERRORS=\nRUN if [ ! -z \"${PG_LOGERRORS}\" ]; then \\\n        cd /build \\\n        && git clone https://github.com/munakoiso/logerrors \\\n        && for pg in ${PG_VERSIONS}; do \\\n            cd /build/logerrors && git reset HEAD --hard && git checkout \"${PG_LOGERRORS}\" \\\n            && make clean && PATH=\"/usr/lib/postgresql/${pg}/bin:${PATH}\" make install || exit 1 ; \\\n        done; \\\n    fi\n\nARG TIMESCALEDB_TOOLKIT_EXTENSIONS=\nARG TIMESCALEDB_TOOLKIT_REPO=github.com/timescale/timescaledb-toolkit\n# build and install the timescaledb-toolkit extension\nRUN if [ ! -z \"${TIMESCALEDB_TOOLKIT_EXTENSIONS}\" -a -z \"${OSS_ONLY}\" ]; then \\\n        set -e \\\n        && git clone \"https://${TIMESCALEDB_TOOLKIT_REPO}\" /build/timescaledb-toolkit \\\n        && cd /build/timescaledb-toolkit \\\n        && for pg in ${PG_VERSIONS}; do \\\n            /build/scripts/install_timescaledb-toolkit.sh ${pg} ${TIMESCALEDB_TOOLKIT_EXTENSIONS} || exit 1 ; \\\n        done; \\\n    fi\n\n# We can remove this at some point, useful for debugging builds for now\nRUN /build/bin/sccache --show-stats\n\nUSER root\n\n# All the tools that were built in the previous steps have their ownership set to postgres\n# to allow mutability. To allow one to build this image with the default privileges (owned by root)\n# one can set the ALLOW_ADDING_EXTENSIONS argument to anything but \"true\".\nARG ALLOW_ADDING_EXTENSIONS=true\nRUN if [ \"${ALLOW_ADDING_EXTENSIONS}\" != \"true\" ]; then \\\n        for pg in ${PG_VERSIONS}; do \\\n            for dir in \"$(/usr/lib/postgresql/${pg}/bin/pg_config --sharedir)/extension\" \"$(/usr/lib/postgresql/${pg}/bin/pg_config --pkglibdir)\" \"$(/usr/lib/postgresql/${pg}/bin/pg_config --bindir)\"; do \\\n                chown root:root \"{dir}\" -R ; \\\n            done ; \\\n        done ; \\\n    fi\n\n## Cleanup\nFROM builder AS trimmed\n\nRUN apt-get purge -y ${BUILD_PACKAGES}\nRUN apt-get autoremove -y \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n            /var/cache/debconf/* \\\n            /usr/share/doc \\\n            /usr/share/man \\\n            /usr/share/locale/?? \\\n            /usr/share/locale/??_?? \\\n            /home/postgres/.pgx \\\n            /build/ \\\n            /usr/local/rustup \\\n            /usr/local/cargo \\\n    && find /var/log -type f -exec truncate --size 0 {} \\;\n\n## Create a smaller Docker image from the builder image\nFROM scratch\nCOPY --from=trimmed / /\n\nARG PG_MAJOR\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"postgres\"]\n\n## TimescaleDB entrypoints and configuration scripts\n## Within a k8s context, we expect the ENTRYPOINT/CMD to always be explicitly specified\nCOPY timescaledb_entrypoint.sh /\n## Backwards compatibility, some older deployments use patroni_entrypoint.sh\nRUN ln -s /timescaledb_entrypoint.sh /patroni_entrypoint.sh\nCOPY pgbackrest_entrypoint.sh /\n## Some patroni callbacks are configured by default by the operator.\nCOPY scripts /scripts/\n\n## The mount being used by the Zalando postgres-operator is /home/postgres/pgdata\n## for Patroni to do it's work it will sometimes move an old/invalid data directory\n## inside the parent directory; therefore we need a subdirectory inside the mount\n\nENV PGROOT=/home/postgres \\\n    PGDATA=/home/postgres/pgdata/data \\\n    PGLOG=/home/postgres/pg_log \\\n    PGSOCKET=/home/postgres/pgdata \\\n    BACKUPROOT=/home/postgres/pgdata/backup \\\n    PGBACKREST_CONFIG=/home/postgres/pgdata/backup/pgbackrest.conf \\\n    PGBACKREST_STANZA=poddb \\\n    PATH=/usr/lib/postgresql/${PG_MAJOR}/bin:${PATH} \\\n    LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8 \\\n    # When having an interactive psql session, it is useful if the PAGER is disable\n    PAGER=\"\"\n\n## The Zalando postgres-operator has strong opinions about the HOME directory of postgres,\n## whereas we do not. Make the operator happy then\nRUN usermod postgres --home ${PGROOT} --move-home\n\n## The /etc/supervisor/conf.d directory is a very Spilo (Zalando postgres-operator) oriented directory.\n## However, to make things work the user postgres currently needs to have write access to this directory\n## The /var/lib/postgresql/data is used as PGDATA by alpine/bitnami, which makes it useful to have it be owned by Postgres\nRUN install -o postgres -g postgres -m 0750 -d \"${PGROOT}\" \"${PGLOG}\" \"${PGDATA}\" \"${BACKUPROOT}\" /etc/supervisor/conf.d /scripts /var/lib/postgresql\n\n## Making sure that pgbackrest is pointing to the right file\nRUN rm /etc/pgbackrest.conf && ln -s \"${PGBACKREST_CONFIG}\" /etc/pgbackrest.conf\n\n## Some configurations allow daily csv files, with foreign data wrappers pointing to the files.\n## to make this work nicely, they need to exist though\nRUN for i in $(seq 0 7); do touch \"${PGLOG}/postgresql-$i.log\" \"${PGLOG}/postgresql-$i.csv\"; done\n\n## Fix permissions\nRUN chown postgres:postgres \"${PGLOG}\" \"${PGROOT}\" \"${PGDATA}\" /var/run/postgresql/ -R\nRUN chown postgres:postgres /var/log/pgbackrest/ /var/lib/pgbackrest /var/spool/pgbackrest -R\n\nWORKDIR /home/postgres\nEXPOSE 5432 8008 8081\nUSER postgres\n"
}