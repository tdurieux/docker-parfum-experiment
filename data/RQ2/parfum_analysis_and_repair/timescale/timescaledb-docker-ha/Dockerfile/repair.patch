diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/timescale/timescaledb-docker-ha/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/timescale/timescaledb-docker-ha/Dockerfile/repaired.Dockerfile
index b208cfd..8edb8aa 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/timescale/timescaledb-docker-ha/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/timescale/timescaledb-docker-ha/Dockerfile/repaired.Dockerfile
@@ -43,13 +43,13 @@ RUN echo 'APT::Install-Suggests "false";' >> /etc/apt/apt.conf.d/01norecommend
 
 # Make sure we're as up-to-date as possible, and install the highlest level dependencies
 RUN apt-get update && apt-get upgrade -y \
-    && apt-get install -y ca-certificates curl gnupg1 gpg gpg-agent locales lsb-release wget
+    && apt-get install --no-install-recommends -y ca-certificates curl gnupg1 gpg gpg-agent locales lsb-release wget && rm -rf /var/lib/apt/lists/*;
 
 RUN mkdir -p /build/scripts
 RUN chmod 777 /build
 WORKDIR /build/
 
-RUN wget -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor --output /usr/share/keyrings/postgresql.keyring
+RUN wget -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --batch --dearmor --output /usr/share/keyrings/postgresql.keyring
 RUN for t in deb deb-src; do \
         echo "$t [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/postgresql.keyring] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -s -c)-pgdg main" >> /etc/apt/sources.list.d/pgdg.list; \
     done
@@ -59,12 +59,12 @@ RUN apt-get update
 
 # The following tools are required for some of the processes we (TimescaleDB) regularly
 # run inside the containers that use this Docker Image
-RUN apt-get install -y less jq strace procps
+RUN apt-get install --no-install-recommends -y less jq strace procps && rm -rf /var/lib/apt/lists/*;
 
 # For debugging it is very useful if the Docker Image contains gdb(server). Even though it is
 # not expected to be running gdb in a live instance often, it simplifies getting backtraces from
 # containers using this image
-RUN apt-get install -y gdb gdbserver
+RUN apt-get install --no-install-recommends -y gdb gdbserver && rm -rf /var/lib/apt/lists/*;
 
 # The next 2 instructions (ENV + RUN) are directly copied from https://github.com/rust-lang/docker-rust/blob/aa8bed3870cb14ecf49f127bae0a212adebc2384/1.60.0/buster/Dockerfile
 ENV RUSTUP_HOME=/usr/local/rustup \
@@ -83,7 +83,7 @@ RUN set -eux; \
     esac; \
     url="https://static.rust-lang.org/rustup/archive/1.24.3/${rustArch}/rustup-init"; \
     wget "$url"; \
-    echo "${rustupSha256} *rustup-init" | sha256sum -c -; \
+    echo "${rustupSha256}  *rustup-init" | sha256sum -c -; \
     chmod +x rustup-init; \
     ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \
     rm rustup-init; \
@@ -95,12 +95,12 @@ RUN set -eux; \
 # These packages allow for a better integration for some containers, for example
 # daemontools provides envdir, which is very convenient for passing backup
 # environment variables around.
-RUN apt-get update && apt-get install -y dumb-init daemontools
+RUN apt-get update && apt-get install --no-install-recommends -y dumb-init daemontools && rm -rf /var/lib/apt/lists/*;
 
 RUN apt-get update \
-    && apt-get install -y postgresql-common pgbouncer pgbackrest lz4 libpq-dev libpq5 pgtop \
+    && apt-get install --no-install-recommends -y postgresql-common pgbouncer pgbackrest lz4 libpq-dev libpq5 pgtop \
     # forbid creation of a main cluster when package is installed
-    && sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf
+    && sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf && rm -rf /var/lib/apt/lists/*;
 
 # Setup locales
 RUN find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \
@@ -112,44 +112,44 @@ RUN find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \
 # We install some build dependencies and mark the installed packages as auto-installed,
 # this will cause the cleanup to get rid of all of these packages
 ENV BUILD_PACKAGES="binutils cmake devscripts equivs gcc git gpg gpg-agent libc-dev libc6-dev libkrb5-dev libperl-dev libssl-dev lsb-release make patchutils python2-dev python3-dev wget"
-RUN apt-get install -y ${BUILD_PACKAGES}
+RUN apt-get install --no-install-recommends -y ${BUILD_PACKAGES} && rm -rf /var/lib/apt/lists/*;
 RUN apt-mark auto ${BUILD_PACKAGES}
 
 ARG PG_VERSIONS
 
 # We install the PostgreSQL build dependencies and mark the installed packages as auto-installed,
 RUN for pg in ${PG_VERSIONS}; do \
-        mk-build-deps postgresql-${pg} && apt-get install -y ./postgresql-${pg}-build-deps*.deb && apt-mark auto postgresql-${pg}-build-deps || exit 1; \
-    done
+        mk-build-deps postgresql-${pg} && apt-get install --no-install-recommends -y ./postgresql-${pg}-build-deps*.deb && apt-mark auto postgresql-${pg}-build-deps || exit 1; \
+    done && rm -rf /var/lib/apt/lists/*;
 
 # For the compiler image, we want all the PostgreSQL versions to be installed,
 # so tools that depend on `pg_config` or other parts to exist can be run
-RUN for pg in ${PG_VERSIONS}; do apt-get install -y postgresql-${pg} postgresql-server-dev-${pg} || exit 1; done
+RUN for pg in ${PG_VERSIONS}; do apt-get install --no-install-recommends -y postgresql-${pg} postgresql-server-dev-${pg} || exit 1; done && rm -rf /var/lib/apt/lists/*;
 
 FROM compiler as builder
 
 RUN for pg in ${PG_VERSIONS}; do \
-        apt-get install -y postgresql-${pg}-dbgsym postgresql-plpython3-${pg} postgresql-plperl-${pg} \
+        apt-get install --no-install-recommends -y postgresql-${pg}-dbgsym postgresql-plpython3-${pg} postgresql-plperl-${pg} \
             postgresql-${pg}-pgextwlist postgresql-${pg}-hll postgresql-${pg}-pgrouting postgresql-${pg}-repack postgresql-${pg}-hypopg postgresql-${pg}-unit \
             postgresql-${pg}-pg-stat-kcache postgresql-${pg}-cron postgresql-${pg}-pldebugger || exit 1; \
-    done
+    done && rm -rf /var/lib/apt/lists/*;
 
 # We put Postgis in first, so these layers can be reused
 ARG POSTGIS_VERSIONS="3"
 RUN for postgisv in ${POSTGIS_VERSIONS}; do \
         for pg in ${PG_VERSIONS}; do \
-            apt-get install -y postgresql-${pg}-postgis-${postgisv} || exit 1; \
+            apt-get install --no-install-recommends -y postgresql-${pg}-postgis-${postgisv} || exit 1; \
         done; \
-    done
+    done && rm -rf /var/lib/apt/lists/*;
 
 # Some Patroni prerequisites
 # This need to be done after the PostgreSQL packages have been installed,
 # to ensure we have the preferred libpq installations etc.
-RUN apt-get install -y python3-etcd python3-requests python3-pystache python3-kubernetes python3-pysyncobj
+RUN apt-get install --no-install-recommends -y python3-etcd python3-requests python3-pystache python3-kubernetes python3-pysyncobj && rm -rf /var/lib/apt/lists/*;
 RUN echo 'deb http://cz.archive.ubuntu.com/ubuntu kinetic main universe' >> /etc/apt/sources.list && \
     apt-get update && \
-    apt-get install -y patroni=2.1.4-\* && \
-    head -n -1 /etc/apt/sources.list > /etc/apt/sources.list.tmp; mv /etc/apt/sources.list.tmp /etc/apt/sources.list; \
+    apt-get install --no-install-recommends -y patroni=2.1.4-\* && \
+    head -n -1 /etc/apt/sources.list > /etc/apt/sources.list.tmp; rm -rf /var/lib/apt/lists/*; mv /etc/apt/sources.list.tmp /etc/apt/sources.list; \
     apt-get update
 # Patch Patroni code with changes from https://github.com/zalando/patroni/pull/2318.
 # NOTE: This is a temporary solution until changes land upstream.
@@ -172,10 +172,10 @@ ARG PG_VERSIONS
 # timescaledb-tune, as well as timescaledb-parallel-copy
 # TODO: Replace `focal` with `$(lsb_release -s -c)` once packages are available
 # for Ubuntu 22.04
-RUN wget -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --dearmor --output /usr/share/keyrings/timescaledb.keyring
+RUN wget -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --batch --dearmor --output /usr/share/keyrings/timescaledb.keyring
 RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/timescaledb.keyring] https://packagecloud.io/timescale/timescaledb/ubuntu/ focal main" > /etc/apt/sources.list.d/timescaledb.list
 
-RUN apt-get update && apt-get install -y timescaledb-tools
+RUN apt-get update && apt-get install --no-install-recommends -y timescaledb-tools && rm -rf /var/lib/apt/lists/*;
 
 ## Entrypoints as they are from the Timescale image and its default alpine upstream repositories.
 ## This ensures the default interface (entrypoint) equals the one of the github.com/timescale/timescaledb-docker one,
@@ -186,7 +186,7 @@ RUN cd /build && git clone https://github.com/timescale/timescaledb-docker && cd
 RUN cp -a /build/timescaledb-docker/docker-entrypoint-initdb.d /docker-entrypoint-initdb.d/
 # Add custom entrypoint to install timescaledb_toolkit
 COPY scripts/010_install_timescaledb_toolkit.sh /docker-entrypoint-initdb.d/
-RUN curl -s -o /usr/local/bin/docker-entrypoint.sh https://raw.githubusercontent.com/docker-library/postgres/${GITHUB_DOCKERLIB_POSTGRES_REF}/13/alpine/docker-entrypoint.sh
+RUN curl -f -s -o /usr/local/bin/docker-entrypoint.sh https://raw.githubusercontent.com/docker-library/postgres/${GITHUB_DOCKERLIB_POSTGRES_REF}/13/alpine/docker-entrypoint.sh
 RUN chmod +x /usr/local/bin/docker-entrypoint.sh
 # Satisfy assumptions of the entrypoint scripts
 RUN ln -s /usr/bin/timescaledb-tune /usr/local/bin/timescaledb-tune
@@ -201,8 +201,8 @@ ARG TIMESCALE_HOT_FORGE=
 RUN --mount=type=secret,uid=1000,id=private_repo_token \
     if [ -f "${REPO_SECRET_FILE}" -a -z "${OSS_ONLY}" -a ! -z "${TIMESCALE_HOT_FORGE}" ]; then \
         GH_REPO="https://api.github.com/repos/timescale/hot-forge"; \
-        ASSET_ID="$(curl -sL --header "Authorization: token $(cat "${REPO_SECRET_FILE}")" "${GH_REPO}/releases/tags/${TIMESCALE_HOT_FORGE}" | jq '.assets[0].id')"; \
-        curl -sL --header "Authorization: token $(cat "${REPO_SECRET_FILE}")" \
+        ASSET_ID="$( curl -f -sL --header "Authorization: token $(cat "${REPO_SECRET_FILE}")" "${GH_REPO}/releases/tags/${TIMESCALE_HOT_FORGE}" | jq '.assets[0].id')" ; \
+        curl -f -sL --header "Authorization: token $(cat "${REPO_SECRET_FILE}")" \
                  --header 'Accept: application/octet-stream' \
                  "${GH_REPO}/releases/assets/${ASSET_ID}" > /usr/local/bin/hot-forge || exit 1; \
         chmod 0755 /usr/local/bin/hot-forge ; \
@@ -266,7 +266,7 @@ RUN TS_VERSIONS="1.7.5 2.1.0 2.1.1 2.2.0 2.2.1 2.3.0 2.3.1 2.4.0 2.4.1 2.4.2 2.5
         /build/scripts/install_timescaledb.sh ${pg} ${TS_VERSIONS} || exit 1 ; \
     done
 
-RUN curl -L "https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz" \
+RUN curl -f -L "https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz" \
     | tar zxf -
 RUN chmod +x sccache-*/sccache
 RUN mkdir -p /build/bin