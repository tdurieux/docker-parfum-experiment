{
  "startTime": 1674219079595,
  "endTime": 1674219080863,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 2,
        "columnEnd": 110
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 2,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM mhart/alpine-node:base\n# FROM mhart/alpine-node:base-0.10\nFROM mhart/alpine-node:8\n\nWORKDIR /src\nADD . .\n\n# If you have native dependencies, you'll need extra tools\n# Install required APKs needed for building, install node modules, fix phantom, then cleanup.\nRUN apk add --update git python build-base curl bash && \\\n  echo \"Fixing PhantomJS\" && \\\n  curl -f -Ls \"https://github.com/dustinblackman/phantomized/releases/download/2.1.1/dockerized-phantomjs.tar.gz\" | tar xz -C / && \\\n  echo \"Installing node modules\" && \\\n  sed -i '/postinstall/d' package.json && \\\n  npm install --production && \\\n  apk del git python build-base curl && \\\n  rm -Rf /etc/ssl/certs/* && \\\n  apk add ca-certificates && \\\n  rm -rf /usr/share/man /tmp/* /var/tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp && npm cache clean --force;\n\n# If you had native dependencies you can now remove build tools\n# RUN apk del make gcc g++ python && \\\n#   rm -rf /tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp\n\nEXPOSE 80\nCMD [\"node\", \"./lib/server.js\"]\n"
}