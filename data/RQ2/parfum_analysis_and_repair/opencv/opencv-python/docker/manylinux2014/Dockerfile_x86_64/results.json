{
  "startTime": 1674249446273,
  "endTime": 1674249448361,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 683
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 248
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 252
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Version: 20220628\n# Image name: quay.io/opencv-ci/opencv-python-manylinux2014-x86-64\n\nFROM quay.io/pypa/manylinux2014_x86_64:latest\n\nARG CCACHE_VERSION=3.7.9\nARG FFMPEG_VERSION=4.4.1\nARG FREETYPE_VERSION=2.12.1\nARG LIBPNG_VERSION=1.6.37\nARG NASM_VERSION=2.15.04\nARG OPENSSL_VERSION=1_1_1o\nARG QT_VERSION=5.15.0\nARG YASM_VERSION=1.3.0\n\nENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH\n\n# epel-release need for aarch64 to get openblas packages\nRUN yum install bzip2-devel curl-devel zlib-devel xcb-util-renderutil-devel xcb-util-devel xcb-util-image-devel xcb-util-keysyms-devel xcb-util-wm-devel mesa-libGL-devel libxkbcommon-devel libxkbcommon-x11-devel libXi-devel lapack-devel epel-release -y && \\\n    yum install openblas-devel -y && \\\n    cp /usr/include/lapacke/lapacke*.h /usr/include/ && \\\n    curl -f https://raw.githubusercontent.com/xianyi/OpenBLAS/v0.3.3/cblas.h -o /usr/include/cblas.h && \\\n    # libpng will be built from source\n    yum remove libpng -y && rm -rf /var/cache/yum\n\nRUN mkdir ~/libpng_sources && \\\n    cd ~/libpng_sources && \\\n    curl -f -O -L https://download.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz && \\\n    tar -xf libpng-${LIBPNG_VERSION}.tar.gz && \\\n    cd libpng-${LIBPNG_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf ~/libpng_sources && rm libpng-${LIBPNG_VERSION}.tar.gz\n\nRUN mkdir ~/freetype_sources && \\\n    cd ~/freetype_sources && \\\n    curl -f -O -L https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.gz && \\\n    tar -xf freetype-${FREETYPE_VERSION}.tar.gz && \\\n    cd freetype-${FREETYPE_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/ffmpeg_build\" --enable-freetype-config && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf ~/freetype_sources && rm freetype-${FREETYPE_VERSION}.tar.gz\n\nRUN curl -f -O -L https://download.qt.io/official_releases/qt/5.15/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \\\n    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz && \\\n    cd qt-everywhere-src-${QT_VERSION} && \\\n    export MAKEFLAGS=-j$(nproc) && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -prefix /opt/Qt${QT_VERSION} -release -opensource -confirm-license -qtnamespace QtOpenCVPython -xcb -xcb-xlib -bundled-xcb-xinput -no-openssl -no-dbus -skip qt3d -skip qtactiveqt -skip qtcanvas3d -skip qtconnectivity -skip qtdatavis3d -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmultimedia -skip qtpurchasing -skip qtqa -skip qtremoteobjects -skip qtrepotools -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qttranslations -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip xmlpatterns -skip declarative -make libs && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf qt-everywhere* && rm qt-everywhere-src-${QT_VERSION}.tar.xz\n\nENV QTDIR /opt/Qt${QT_VERSION}\nENV PATH \"$QTDIR/bin:$PATH\"\n\nRUN mkdir ~/openssl_sources && \\\n    cd ~/openssl_sources && \\\n    curl -f -O -L https://github.com/openssl/openssl/archive/OpenSSL_${OPENSSL_VERSION}.tar.gz && \\\n    tar -xf OpenSSL_${OPENSSL_VERSION}.tar.gz && \\\n    cd openssl-OpenSSL_${OPENSSL_VERSION} && \\\n    ./config --prefix=\"/ffmpeg_build\" --openssldir=\"/ffmpeg_build\" no-pinshared shared zlib && \\\n    make -j$(getconf _NPROCESSORS_ONLN) && \\\n    # skip installing documentation\n    make install_sw && \\\n    cd .. && \\\n    rm -rf ~/openssl_build ~/openssl_sources && rm OpenSSL_${OPENSSL_VERSION}.tar.gz\n\nRUN mkdir ~/nasm_sources && \\\n    cd ~/nasm_sources && \\\n    curl -f -O -L https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/nasm-${NASM_VERSION}.tar.bz2 && \\\n    tar -xf nasm-${NASM_VERSION}.tar.bz2 && cd nasm-${NASM_VERSION} && ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/ffmpeg_build\" --bindir=\"$HOME/bin\" && \\\n    make -j$(getconf _NPROCESSORS_ONLN) && \\\n    make install && \\\n    cd .. && \\\n    rm -rf ~/nasm_sources && rm nasm-${NASM_VERSION}.tar.bz2\n\nRUN mkdir ~/yasm_sources && \\\n    cd ~/yasm_sources && \\\n    curl -f -O -L https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VERSION}.tar.gz && \\\n    tar -xf yasm-${YASM_VERSION}.tar.gz && \\\n    cd yasm-${YASM_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/ffmpeg_build\" --bindir=\"$HOME/bin\" && \\\n    make -j$(getconf _NPROCESSORS_ONLN) && \\\n    make install && \\\n    cd .. && \\\n    rm -rf ~/yasm_sources && rm yasm-${YASM_VERSION}.tar.gz\n\nRUN mkdir ~/libvpx_sources && \\\n    cd ~/libvpx_sources && \\\n    git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git && \\\n    cd libvpx && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/ffmpeg_build\" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm --enable-pic --enable-shared && \\\n    make -j$(getconf _NPROCESSORS_ONLN) && \\\n    make install && \\\n    cd .. && \\\n    rm -rf ~/libvpx_sources\n\nRUN mkdir ~/ffmpeg_sources && \\\n    cd ~/ffmpeg_sources && \\\n    curl -f -O -L https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \\\n    tar -xf ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \\\n    cd ffmpeg-${FFMPEG_VERSION} && \\\n    PATH=~/bin:$PATH && \\\n    PKG_CONFIG_PATH=\"/ffmpeg_build/lib/pkgconfig\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/ffmpeg_build\" --extra-cflags=\"-I/ffmpeg_build/include\" --extra-ldflags=\"-L/ffmpeg_build/lib\" --enable-openssl --enable-libvpx --enable-shared --enable-pic --bindir=\"$HOME/bin\" && \\\n    make -j$(getconf _NPROCESSORS_ONLN) && \\\n    make install && \\\n    echo \"/ffmpeg_build/lib/\" >> /etc/ld.so.conf && \\\n    ldconfig && \\\n    rm -rf ~/ffmpeg_sources && \\\n    yum remove bzip2-devel -y && rm ffmpeg-${FFMPEG_VERSION}.tar.bz2\n\nRUN curl -f -O -L https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}.tar.gz && \\\n    tar -xf ccache-${CCACHE_VERSION}.tar.gz && \\\n    cd ccache-${CCACHE_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(getconf _NPROCESSORS_ONLN) && \\\n    make install && \\\n    cd .. && \\\n    rm -rf ccache-${CCACHE_VERSION}.tar.gz\n\n# GitHub Actions user`s UID is 1001\nRUN useradd ci -m -s /bin/bash -G users --uid=1001 && \\\n    mkdir /io && \\\n    chown -R ci:ci /io && \\\n    # This needs to find ffmpeg packages from ci user\n    chown -R ci:ci /ffmpeg_build && \\\n    # This calls in mutlibuild scripts and cannot be run without permissions\n    chown -R ci:ci /opt/_internal/pipx/venvs/auditwheel\n\nUSER ci\n\n# Git security vulnerability: https://github.blog/2022-04-12-git-security-vulnerability-announced\nRUN git config --global --add safe.directory /io\n\nENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig:/ffmpeg_build/lib/pkgconfig\nENV LDFLAGS -L/ffmpeg_build/lib\nENV PATH \"$HOME/bin:$PATH\"\n"
}