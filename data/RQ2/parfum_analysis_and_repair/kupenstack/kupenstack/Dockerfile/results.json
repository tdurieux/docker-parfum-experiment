{
  "startTime": 1674246574625,
  "endTime": 1674246575129,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build the manager binary\nFROM golang:1.16 as builder\n\nWORKDIR /workspace\n# Copy the Go Modules manifests\nCOPY go.mod go.mod\nCOPY go.sum go.sum\n# cache deps before building and copying source so that we don't need to re-download as much\n# and so that source changes don't invalidate our downloaded layer\nRUN go mod download\n\n# Copy the go source\nCOPY main.go main.go\nCOPY apis/ apis/\nCOPY controllers/ controllers/\nCOPY pkg/ pkg/\nCOPY oskops/ oskops/\n# COPY ook-operator/ ook-operator/\n\n\n# Build\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -a -o manager main.go\n\n# Use distroless as minimal base image to package the manager binary\n# Refer to https://github.com/GoogleContainerTools/distroless for more details\nFROM ubuntu:bionic-20210827\n\nRUN apt-get update && apt-get -y --no-install-recommends install wget && rm -rf /var/lib/apt/lists/*; # install pip3\n# RUN apt-get -y install python3-pip\n\n# install helm\n\nRUN wget  https://get.helm.sh/helm-v3.7.0-linux-amd64.tar.gz\nRUN tar -zxvf helm-v3.7.0-linux-amd64.tar.gz && rm helm-v3.7.0-linux-amd64.tar.gz\nRUN mv linux-amd64/helm /bin/helm\n\n# # install kubectl\n# RUN apt-get -y install curl\n# RUN curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n# RUN install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n# RUN rm kubectl\n\n# # clone openstack-helm\n# RUN apt -y install git\n# WORKDIR /opt\n# RUN git clone https://github.com/openstack/openstack-helm\n# RUN git clone https://github.com/openstack/openstack-helm-infra\n# WORKDIR openstack-helm\n\n# # Setup Clients\n# RUN pip3 install \\\n#   -c${UPPER_CONSTRAINTS_FILE:=https://releases.openstack.org/constraints/upper/${OPENSTACK_RELEASE:-stein}} \\\n#   cmd2 python-openstackclient python-heatclient\n\n# RUN pip3 install yq\n# RUN apt -y install jq\n\n\n# ENV OSH_PATH=/opt/openstack-helm\n# ENV OSH_INFRA_PATH=/opt/openstack-helm-infra\n\n\n\n# WORKDIR /workspace\n# COPY ook-operator/settings/ ook-operator/settings/\n# COPY ook-operator/pkg/actions/ ook-operator/pkg/actions/\n\n# RUN chmod +x ook-operator/pkg/actions/cluster/apply\n# RUN chmod +x ook-operator/pkg/actions/glance/apply\n# RUN chmod +x ook-operator/pkg/actions/helm/initCreds\n# RUN chmod +x ook-operator/pkg/actions/helm/initHelm\n# RUN chmod +x ook-operator/pkg/actions/horizon/apply\n# RUN chmod +x ook-operator/pkg/actions/ingress/apply\n# RUN chmod +x ook-operator/pkg/actions/keystone/apply\n# RUN chmod +x ook-operator/pkg/actions/libvirt/apply\n# RUN chmod +x ook-operator/pkg/actions/mariadb/apply\n# RUN chmod +x ook-operator/pkg/actions/memcached/apply\n# RUN chmod +x ook-operator/pkg/actions/neutron/apply\n# RUN chmod +x ook-operator/pkg/actions/nova/apply\n# RUN chmod +x ook-operator/pkg/actions/placement/apply\n# RUN chmod +x ook-operator/pkg/actions/rabbitmq/apply\n\n\nWORKDIR /\n# COPY ook-operator/settings/ /etc/kupenstack/\nCOPY --from=builder /workspace/manager .\n\nENTRYPOINT [\"/manager\"]\n\n\n"
}