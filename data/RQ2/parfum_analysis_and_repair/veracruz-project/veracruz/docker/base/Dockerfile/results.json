{
  "startTime": 1674250104382,
  "endTime": 1674250105184,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# base docker image for developing and testing Veracruz\n#\n# This builds a common Ubuntu base image with the right pre-installed tools\n# to build custom versions of tools, install rust, and build veracruz itself\n#\n# AUTHORS\n#\n# The Veracruz Development Team.\n#\n# COPYRIGHT\n#\n# See the `LICENSE.markdown` file in the Veracruz root directory for licensing\n# and copyright information.\n#\n# NOTE: We try to follow the guide in https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\n#       Each RUN contains a bundle of steps, which reduces the cache.\n\nFROM ubuntu:22.04\n\nARG ARCH=x86_64\nENV DEBIAN_FRONTEND noninteractive\n\n# Use bash as the default\nSHELL [\"/bin/bash\", \"-c\"]\n\n# SUPPLY_CHAIN_NOTE: apt-get update means we always get latest, but also doesn't fix versions\n\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n        bash-completion \\\n        bc \\\n        bison \\\n        ca-certificates \\\n        cabal-install \\\n        ccache \\\n        clang \\\n        cmake \\\n        coreutils \\\n        cpio \\\n        curl \\\n        device-tree-compiler \\\n        doxygen \\\n        file \\\n        flex \\\n        g++ \\\n        gcc \\\n        gcc-aarch64-linux-gnu \\\n        gdb \\\n        ghc \\\n        git \\\n        gnupg \\\n        haskell-stack \\\n        jq \\\n        less \\\n        libc6-dev-arm64-cross \\\n        libsqlite3-dev \\\n        libssl-dev \\\n        libxml2-utils \\\n        netbase \\\n        ninja-build \\\n        openssh-client \\\n        pkg-config \\\n        protobuf-compiler \\\n        procps \\\n        python3-dev \\\n        python3-pip \\\n        python3-protobuf \\\n        python3-setuptools \\\n        qemu-system-arm \\\n        sqlite3 \\\n        strace \\\n        sudo \\\n        telnet \\\n        u-boot-tools \\\n        unzip \\\n        uuid-dev \\\n        vim \\\n        wabt \\\n        wget \\\n        xxd \\\n        zlib1g-dev \\\n        && \\\n    apt-get autoremove -y && apt-get clean && \\\n    rm -rf /tmp/* /var/tmp/* /var/lib/apt/lists/* && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3 1\n\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH \\\n    RUST_VERSION=1.56.1\n\nRUN set -eux; \\\n    dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"${dpkgArch##*-}\" in \\\n        amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='3dc5ef50861ee18657f9db2eeb7392f9c2a6c95c90ab41e45ab4ca71476b4338' ;; \\\n        arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='32a1532f7cef072a667bac53f1a5542c99666c4071af0c9549795bbdb2069ec1' ;; \\\n        *) echo >&2 \"unsupported architecture: ${dpkgArch}\"; exit 1 ;; \\\n    esac; \\\n    url=\"https://static.rust-lang.org/rustup/archive/1.24.3/${rustArch}/rustup-init\"; \\\n    wget \"$url\"; \\\n    echo \"${rustupSha256}  *rustup-init\" | sha256sum -c -; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \\\n    rm rustup-init; \\\n    rm -rf /usr/local/cargo/registry/*/github.com-*\n"
}