{
  "startTime": 1674253693813,
  "endTime": 1674253695451,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 245,
        "lineEnd": 245,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 5,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 234,
        "lineEnd": 234,
        "columnStart": 12,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 12,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 228,
        "lineEnd": 228,
        "columnStart": 24,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 102,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 5,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 22,
        "columnEnd": 199
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 5,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 22,
        "columnEnd": 199
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 238,
        "lineEnd": 238,
        "columnStart": 5,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###################################################\n# Stage 1 - docker container to build ensembl-vep #\n###################################################\nFROM ubuntu:18.04 as builder\n\n# Update aptitude and install some required packages\n# a lot of them are required for Bio::DB::BigFile\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n    build-essential \\\n    git \\\n    libpng-dev \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    liblzma-dev \\\n    perl \\\n    perl-base \\\n    unzip \\\n    wget && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup VEP environment\nENV OPT /opt/vep\nENV OPT_SRC $OPT/src\nENV HTSLIB_DIR $OPT_SRC/htslib\nENV BRANCH release/105\n\n# Working directory\nWORKDIR $OPT_SRC\n\n# Clone/download repositories/libraries\nRUN if [ \"$BRANCH\" = \"master\" ]; \\\n    then export BRANCH_OPT=\"\"; \\\n    else export BRANCH_OPT=\"-b $BRANCH\"; \\\n    fi && \\\n    # Get ensembl cpanfile in order to get the list of the required Perl libraries\n    wget -q \"https://raw.githubusercontent.com/Ensembl/ensembl/$BRANCH/cpanfile\" -O \"ensembl_cpanfile\" && \\\n    # Clone ensembl-vep git repository\n    git clone $BRANCH_OPT --depth 1 https://github.com/Ensembl/ensembl-vep.git && chmod u+x ensembl-vep/*.pl && \\\n    # Clone ensembl-variation git repository and compile C code\n    git clone $BRANCH_OPT --depth 1 https://github.com/Ensembl/ensembl-variation.git && \\\n    mkdir var_c_code && \\\n    cp ensembl-variation/C_code/*.c ensembl-variation/C_code/Makefile var_c_code/ && \\\n    rm -rf ensembl-variation && \\\n    chmod u+x var_c_code/* && \\\n    # Clone bioperl-ext git repository - used by Haplosaurus\n    git clone --depth 1 https://github.com/bioperl/bioperl-ext.git && \\\n    # Download ensembl-xs - it contains compiled versions of certain key subroutines used in VEP\n    wget https://github.com/Ensembl/ensembl-xs/archive/2.3.2.zip -O ensembl-xs.zip && \\\n    unzip -q ensembl-xs.zip && mv ensembl-xs-2.3.2 ensembl-xs && rm -rf ensembl-xs.zip && \\\n    # Clone/Download other repositories: bioperl-live is needed so the cpanm dependencies installation from the ensembl-vep/cpanfile file takes less disk space\n    ensembl-vep/travisci/get_dependencies.sh && \\\n    # Only keep the bioperl-live \"Bio\" library\n    mv bioperl-live bioperl-live_bak && mkdir bioperl-live && mv bioperl-live_bak/Bio bioperl-live/ && rm -rf bioperl-live_bak && \\\n    ## A lot of cleanup on the imported libraries, in order to reduce the docker image ##\n    rm -rf Bio-HTS/.??* Bio-HTS/Changes Bio-HTS/DISCLAIMER Bio-HTS/MANIFEST* Bio-HTS/README Bio-HTS/scripts Bio-HTS/t Bio-HTS/travisci \\\n           bioperl-ext/.??* bioperl-ext/Bio/SeqIO bioperl-ext/Bio/Tools bioperl-ext/Makefile.PL bioperl-ext/README* bioperl-ext/t bioperl-ext/examples \\\n           ensembl-vep/.??* ensembl-vep/docker \\\n           ensembl-xs/.??* ensembl-xs/TODO ensembl-xs/Changes ensembl-xs/INSTALL ensembl-xs/MANIFEST ensembl-xs/README ensembl-xs/t ensembl-xs/travisci \\\n           htslib/.??* htslib/INSTALL htslib/NEWS htslib/README* htslib/test && \\\n    # Only keep needed kent-335_base libraries for VEP - used by Bio::DB::BigFile (bigWig parsing)\n    mv kent-335_base kent-335_base_bak && mkdir -p kent-335_base/src && \\\n    cp -R kent-335_base_bak/src/lib kent-335_base_bak/src/inc kent-335_base_bak/src/jkOwnLib kent-335_base/src/ && \\\n    cp kent-335_base_bak/src/*.sh kent-335_base/src/ && \\\n    rm -rf kent-335_base_bak\n\n# Setup bioperl-ext\nWORKDIR bioperl-ext/Bio/Ext/Align/\nRUN perl -pi -e\"s|(cd libs.+)CFLAGS=\\\\\\'|\\$1CFLAGS=\\\\\\'-fPIC |\" Makefile.PL\n\n# Install htslib binaries (for 'bgzip' and 'tabix')\n# htslib requires the packages 'zlib1g-dev', 'libbz2-dev' and 'liblzma-dev'\nWORKDIR $HTSLIB_DIR\nRUN make install && rm -f Makefile *.c\n\n# Compile Variation LD C scripts\nWORKDIR $OPT_SRC/var_c_code\nRUN make && rm -f Makefile *.c\n\n\n###################################################\n# Stage 2 - docker container to build ensembl-vep #\n###################################################\nFROM ubuntu:18.04\n\n# Update aptitude and install some required packages\n# a lot of them are required for Bio::DB::BigFile\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n    build-essential \\\n    cpanminus \\\n    curl \\\n    libmysqlclient-dev \\\n    libpng-dev \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    liblzma-dev \\\n    locales \\\n    openssl \\\n    perl \\\n    perl-base \\\n    unzip \\\n    wget \\\n    vim && \\\n    apt-get -y purge manpages-dev && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup VEP environment\nENV OPT /opt/vep\nENV OPT_SRC $OPT/src\nENV PERL5LIB_TMP $PERL5LIB:$OPT_SRC/ensembl-vep:$OPT_SRC/ensembl-vep/modules\nENV PERL5LIB $PERL5LIB_TMP:$OPT_SRC/bioperl-live\nENV KENT_SRC $OPT/src/kent-335_base/src\nENV HTSLIB_DIR $OPT_SRC/htslib\nENV MACHTYPE x86_64\nENV DEPS $OPT_SRC\nENV PATH $OPT_SRC/ensembl-vep:$OPT_SRC/var_c_code:$PATH\nENV LANG_VAR en_US.UTF-8\n\n# Create vep user\nRUN useradd -r -m -U -d \"$OPT\" -s /bin/bash -c \"VEP User\" -p '' vep && usermod -a -G sudo vep && mkdir -p $OPT_SRC\nUSER vep\n\n# Copy downloaded libraries (stage 1) to this image (stage 2)\nCOPY --chown=vep:vep --from=builder $OPT_SRC $OPT_SRC\n#############################################################\n\n# Change user to root for the following complilations/installations\nUSER root\n\n# Install bioperl-ext, faster alignments for haplo (XS-based BioPerl extensions to C libraries)\nWORKDIR $OPT_SRC/bioperl-ext/Bio/Ext/Align/\nRUN perl Makefile.PL && make && make install && rm -f Makefile*\n\n# Install ensembl-xs, faster run using re-implementation in C of some of the Perl subroutines\nWORKDIR $OPT_SRC/ensembl-xs\nRUN perl Makefile.PL && make && make install && rm -f Makefile* cpanfile\n\nWORKDIR $OPT_SRC\n# Install/compile more libraries\nRUN ensembl-vep/travisci/build_c.sh && \\\n    # Remove unused Bio-DB-HTS files\n    rm -rf Bio-HTS/cpanfile Bio-HTS/Build.PL Bio-HTS/Build Bio-HTS/_build Bio-HTS/INSTALL.pl && \\\n    # Install ensembl perl dependencies (cpanm)\n    cpanm --installdeps --with-recommends --notest --cpanfile ensembl_cpanfile . && \\\n    cpanm --installdeps --with-recommends --notest --cpanfile ensembl-vep/cpanfile . && \\\n    # Delete bioperl and cpanfiles after the cpanm installs as bioperl will be reinstalled by the INSTALL.pl script\n    rm -rf bioperl-live ensembl_cpanfile ensembl-vep/cpanfile && \\\n    # Configure \"locale\", see https://github.com/rocker-org/rocker/issues/19\n    echo \"$LANG_VAR UTF-8\" >> /etc/locale.gen && locale-gen en_US.utf8 && \\\n    /usr/sbin/update-locale LANG=$LANG_VAR && \\\n    # Copy htslib executables. It also requires the packages 'zlib1g-dev', 'libbz2-dev' and 'liblzma-dev'\n    cp $HTSLIB_DIR/bgzip $HTSLIB_DIR/tabix $HTSLIB_DIR/htsfile /usr/local/bin/\n\nENV LC_ALL $LANG_VAR\nENV LANG $LANG_VAR\n\n# Switch back to vep user\nUSER vep\nENV PERL5LIB $PERL5LIB_TMP\n\n\nUSER vep\nENV PERL5LIB $PERL5LIB_TMP\n\nWORKDIR /\nADD loftee_1.0.3.tgz $OPT/src/ensembl-vep/modules\nADD UTRannotator.tgz $OPT/src/ensembl-vep/modules\nRUN wget -q \"https://raw.githubusercontent.com/Ensembl/VEP_plugins/release/105/NearestExonJB.pm\" -O $OPT/src/ensembl-vep/modules/NearestExonJB.pm\n\n\n# Final steps\nWORKDIR $OPT_SRC/ensembl-vep\n# Update bash profile\nRUN echo >> $OPT/.profile && \\\n    echo PATH=$PATH:\\$PATH >> $OPT/.profile && \\\n    echo export PATH >> $OPT/.profile && \\\n    # Run INSTALL.pl and remove the ensemb-vep tests and travis\n    ./INSTALL.pl -a a -l -n && rm -rf t travisci .travis.yml\n\n######################################################\n# Stage 3 - adding dependencies for gvanno analysis  #\n######################################################\n\nUSER root\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y python3-pip python3-dev \\\n  && cd /usr/local/bin \\\n  && ln -s /usr/bin/python3 python \\\n  && pip3 install --no-cache-dir --upgrade pip && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && apt-get -y --no-install-recommends install apache2 apt-utils build-essential cpanminus curl git libmysqlclient-dev libpng-dev libssl-dev manpages mysql-client openssl perl perl-base unzip vim wget sudo && rm -rf /var/lib/apt/lists/*;\n# install ensembl dependencies\nRUN cpanm Test::Object PPI::Document Task::Weaken Test::SubCalls Test::Object DBI DBD::mysql Archive::Zip Perl::Critic Set::IntervalTree\nRUN apt-get update && apt-get install -y --no-install-recommends apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\nUSER root\nWORKDIR /\n\nENV PACKAGE_BIO=\"libhts2 bedtools\"\nENV PACKAGE_DEV=\"gfortran gcc-multilib autoconf liblzma-dev libncurses5-dev libblas-dev liblapack-dev libssh2-1-dev libxml2-dev vim libssl-dev libcairo2-dev libbz2-dev libcurl4-openssl-dev\"\n#ENV PYTHON_MODULES=\"numpy==1.19.2 cython==0.29.21 scipy==1.5.3 pandas==1.1.3 cyvcf2==0.20.9 toml==0.10.1\"\nENV PYTHON_MODULES=\"numpy==1.19.2 cython==0.29.21 scipy==1.5.3 pandas==1.1.3 cyvcf2==0.20.9\"\nRUN apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\tnano ed locales vim-tiny fonts-texgyre \\\n    $PACKAGE_DEV $PACKAGE_BIO \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN apt-get autoremove\n\n## Install vcfanno version v0.3.2\nRUN wget https://github.com/brentp/vcfanno/releases/download/v0.3.2/vcfanno_linux64 && \\\n    mv vcfanno_linux64 vcfanno && \\\n    mv vcfanno /usr/local/bin && \\\n    chmod 755 /usr/local/bin/vcfanno\n\n## Install Ensembl's Vcf-validator\nRUN wget https://github.com/EBIvariation/vcf-validator/releases/download/v0.9.3/vcf_validator_linux && \\\nmv vcf_validator_linux /usr/local/bin/vcf_validator && \\\nchmod 755 /usr/local/bin/vcf_validator\n\nUSER root\nWORKDIR /\n\nRUN wget https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2\nRUN bunzip2 -dc samtools-1.10.tar.bz2 | tar xvf -\nRUN cd samtools-1.10 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/bin && make -j && make install\n\nWORKDIR /\n\n## Install tools used for compilation\nRUN sudo -H pip install --upgrade pip\nRUN sudo -H pip install --no-cache-dir -U setuptools\nRUN sudo -H pip install --no-cache-dir $PYTHON_MODULES\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends libpq-dev libxt-dev libudunits2-dev && rm -rf /var/lib/apt/lists/*;\n\nUSER root\nWORKDIR /\n\n## vt - variant tool set - use conda version\n## primary use in GVANNO/PCGR/CPSR: decomposition of multiallelic variants in a VCF file\nRUN wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh \\\n    && chmod 0755 miniconda.sh\nRUN [\"/bin/bash\", \"-c\", \"/miniconda.sh -b -p /conda\"]\nRUN rm miniconda.sh\n\n# update conda & install vt\nRUN /conda/bin/conda update conda\nRUN /conda/bin/conda install -c bioconda vt\n\n## Clean Up\nRUN apt-get clean autoclean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN rm -rf /var/lib/{dpkg,cache,log}\n\nVOLUME /workdir\nWORKDIR /workdir/\nUSER root\nRUN mkdir /data && chmod 777 /data\nWORKDIR /data\nVOLUME /data\n\nUSER root\nWORKDIR /\n#RUN rm -f nlopt-2.4.2.tar.gz\nRUN rm -rf $HOME/src/ensembl-vep/t/\nRUN rm -f $HOME/src/v335_base.tar.gz\nRUN rm -f $HOME/src/release-1-6-924.zip\nRUN rm -rf /samtools-1.10.tar.bz2\nRUN rm -f /conda/bin/python\n\nADD gvanno.tgz /\nENV PATH=$PATH:/conda/bin:/gvanno\nENV PYTHONPATH=:/gvanno/lib:${PYTHONPATH}"
}