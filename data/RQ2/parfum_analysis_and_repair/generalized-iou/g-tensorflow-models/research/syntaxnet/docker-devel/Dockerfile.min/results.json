{
  "startTime": 1674254547500,
  "endTime": 1674254548348,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# You need to build wheels before building this image. Please consult\n# docker-devel/README.txt.\n#\n# It might be more efficient to use a minimal distribution, like Alpine. But\n# the upside of this being popular is that people might already have it.\nFROM ubuntu:16.04\n\nENV SYNTAXNETDIR=/opt/tensorflow PATH=$PATH:/root/bin\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n          file \\\n          git \\\n          graphviz \\\n          libcurl3 \\\n          libfreetype6 \\\n          libgraphviz-dev \\\n          liblapack3 \\\n          libopenblas-base \\\n          libpng16-16 \\\n          libxft2 \\\n          python-dev \\\n          python-mock \\\n          python-pip \\\n          python2.7 \\\n          zlib1g-dev \\\n    && apt-get clean \\\n    && (rm -f /var/cache/apt/archives/*.deb \\\n        /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true) && rm -rf /var/lib/apt/lists/*;\n\n# Install common Python dependencies. Similar to above, remove caches\n# afterwards to help keep Docker images smaller.\nRUN pip install --no-cache-dir --ignore-installed pip \\\n    && python -m pip install numpy \\\n    && rm -rf /root/.cache/pip /tmp/pip*\nRUN python -m pip install \\\n          asciitree \\\n          ipykernel \\\n          jupyter \\\n          matplotlib \\\n          pandas \\\n          protobuf \\\n          scipy \\\n          sklearn \\\n    && python -m ipykernel.kernelspec \\\n    && python -m pip install pygraphviz \\\n          --install-option=\"--include-path=/usr/include/graphviz\" \\\n          --install-option=\"--library-path=/usr/lib/graphviz/\" \\\n    && python -m jupyter_core.command nbextension enable \\\n          --py --sys-prefix widgetsnbextension \\\n    && rm -rf /root/.cache/pip /tmp/pip*\n\nCOPY syntaxnet_with_tensorflow-0.2-cp27-cp27mu-linux_x86_64.whl $SYNTAXNETDIR/\nRUN python -m pip install \\\n        $SYNTAXNETDIR/syntaxnet_with_tensorflow-0.2-cp27-cp27mu-linux_x86_64.whl \\\n    && rm -rf /root/.cache/pip /tmp/pip*\n\n# This makes the IP exposed actually \"*\"; we'll do host restrictions by passing\n# a hostname to the `docker run` command.\nCOPY tensorflow/tensorflow/tools/docker/jupyter_notebook_config.py /root/.jupyter/\nEXPOSE 8888\n\n# This does not need to be compiled, only copied.\nCOPY examples $SYNTAXNETDIR/syntaxnet/examples\n# For some reason, this works if we run it in a bash shell :/ :/ :/\nCMD /bin/bash -c \"python -m jupyter_core.command notebook --debug --notebook-dir=/opt/tensorflow/syntaxnet/examples --allow-root\"\n"
}