{
  "startTime": 1674248896916,
  "endTime": 1674248900901,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 44,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 26,
        "columnStart": 44,
        "columnEnd": 120
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 44,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 26,
        "columnStart": 44,
        "columnEnd": 120
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.2-devel-ubuntu18.04\n# An nvidia image seems to be necessary for torch-points-kernel.\n# Also, a \"devel\" image seems required for the same library\n\n# set the IGN proxy, otherwise apt-get and other applications don't work\n# Should be commented out outside of IGN\nENV http_proxy 'http://192.168.4.9:3128/'\nENV https_proxy 'http://192.168.4.9:3128/'\n\n# set the timezone, otherwise it asks for it... and freezes\nENV TZ=Europe/Paris\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Needed to use apt-get afterwards due to CUDA changes described here since April 27, 2022:\n# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212772\n# Not the recommpended method, but else we need wget installed afterwards.\n# We changed to 10.2-devel-ubuntu18.04 so that might not be needed.\nRUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y wget && rm -rf /var/lib/apt/lists/*;\nRUN apt-key del 7fa2af80\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\n\n# all the apt-get installs\nRUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y \\\n        software-properties-common \\\n        wget \\\n        git \\\n        libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6 && rm -rf /var/lib/apt/lists/*; # package needed for anaconda\n\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh \\\n        && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n        && rm ~/miniconda.sh\n\nENV PATH /opt/conda/bin:$PATH\n\n# Only copy necessary files to set up the environment,\n# to use docker caching if requirements files were not updated.\nWORKDIR /setup_env\nCOPY ./setup_env/ .\n\n# install mamba to setup the env faster\nRUN conda install -y mamba -n base -c conda-forge\n# Build the environment\nRUN mamba env create -f requirements.yml\n\n# Copy the repository content in /myria3d\nWORKDIR /myria3d\nCOPY . .\n\n# Make RUN commands use the new environment:\nSHELL [\"conda\", \"run\", \"-n\", \"myria3d\", \"/bin/bash\", \"-c\"]\n\n# the entrypoint garanty that all command will be runned in the conda environment\nENTRYPOINT [\"conda\",  \\   \n        \"run\", \\\n        \"-n\", \\\n        \"myria3d\"]\n\n# Example usage\nCMD         [\"python\", \\\n        \"-m\", \\\n        \"myria3d.predict\", \\\n        \"--config-path\", \\\n        \"/CICD_github_assets/parametres_etape1/.hydra\", \\ \n        \"--config-name\", \\\n        \"predict_config_V1.6.3.yaml\", \\\n        \"predict.src_las=/CICD_github_assets/parametres_etape1/test/792000_6272000_subset_buildings.las\", \\\n        \"predict.output_dir=/CICD_github_assets/output_etape1\", \\\n        \"predict.ckpt_path=/CICD_github_assets/parametres_etape1/checkpoints/epoch_033.ckpt\", \\\n        \"predict.gpus=0\", \\\n        \"datamodule.batch_size=10\", \\ \n        \"datamodule.subtile_overlap=0\", \\ \n        \"hydra.run.dir=/myria3d\"]\n\n"
}