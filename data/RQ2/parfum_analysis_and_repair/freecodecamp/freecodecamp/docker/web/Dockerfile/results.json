{
  "startTime": 1674216222002,
  "endTime": 1674216224618,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 5,
        "columnEnd": 85
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16-buster AS builder\n# Install doppler CLI\nRUN ( curl -f -Ls --tlsv1.2 --proto \"=https\" --retry 3 https://cli.doppler.com/install.sh) | sh -s -- --verify-signature\n# node images create a non-root user that we can use\nUSER node\nWORKDIR /home/node/build\nCOPY --chown=node:node . .\n# Pass `DOPPLER_TOKEN` at build time to create an encrypted snapshot for high-availability\nARG DOPPLER_TOKEN\nRUN \\\n  doppler secrets download doppler.encrypted.json &&\\\n  # Install and donot ignore the scripts for sharp\n  npm ci --no-progress --ignore-scripts=false &&\\\n  doppler run --fallback=doppler.encrypted.json --command=\"npm run create:config\" &&\\\n  doppler run --fallback=doppler.encrypted.json --command=\"npm run build:curriculum\" &&\\\n  doppler run --fallback=doppler.encrypted.json --command=\"npm run build:client\"\n\n# Use a lightweight image for the serving the files\nFROM node:16-alpine\nRUN npm i -g serve@13 && npm cache clean --force;\n\nUSER node\nWORKDIR /home/node\nCOPY --from=builder /home/node/build/client/public/ client/public\nCOPY --from=builder /home/node/build/docker/web/serve.json client/serve.json\n\nEXPOSE 8000\nCMD [\"serve\", \"--config\", \"client/serve.json\", \"--cors\", \"--no-clipboard\", \"--no-port-switching\", \"-p\", \"8000\", \"client/public\"]\n"
}