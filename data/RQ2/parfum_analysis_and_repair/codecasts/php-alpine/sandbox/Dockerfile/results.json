{
  "startTime": 1674215563077,
  "endTime": 1674215564102,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 30,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Alpicetera - Building sandbox image.\n\n# arg for using a specific Alpine version (before FROM)\nARG ALPINE_VERSION\nARG DOCKER_PLATFORM\n\n# use alpine version from argument as base/from image.\nFROM --platform=$DOCKER_PLATFORM alpine:$ALPINE_VERSION\n\nRUN echo -e \"I am running on $DOCKER_PLATFORM, building for $TARGETPLATFORM\"\n\n# maintainer label.\nMAINTAINER Diego Hernandes <iamhernandev@gmail.com>\n\n# declare required build arguments.\nARG ALPINE_VERSION\nARG APK_PACKAGER\nARG APK_MAINTAINER\n\n# make args available as env vars.\nENV ENV=\"/etc/profile\" \\\n    ALPINE_VERSION=${ALPINE_VERSION} \\\n    APK_PACKAGER=${APK_PACKAGER} \\\n    APK_MAINTAINER=${APK_MAINTAINER} \\\n    APORTS=/home/sandbox/scripts \\\n    TERM=xterm-256color \\\n    COLORTERM=truecolor \\\n    EDITOR=nano\n\n# install some required tools.\nRUN apk add --no-cache --update-cache \\\n    alpine-sdk \\\n    aports-build \\\n    ncurses \\\n    sudo \\\n    bash \\\n    nano\n\n# configure APK repositories.\nRUN echo \"http://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/main\" > /etc/apk/repositories && \\\n    echo \"http://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/community\" >> /etc/apk/repositories\n\n# add opt scripts.\nADD opt /opt\n# add etc configuration.\nADD etc /etc\n\n# ADD THE PUBLIC KEY FOR REPOS.\n# COPY ${APK_PUB_KEY} /etc/apk/keys/php-alpine.rsa.pub\n\n# CONFIGURE BUILD.\nRUN adduser -D -u 1000 sandbox && \\\n    addgroup sandbox abuild && \\\n    mkdir -p /var/cache/distfiles && \\\n    chmod a+w /var/cache/distfiles && \\\n    chmod +x /opt/php-alpine/entrypoint.sh && \\\n    chmod +x /opt/php-alpine/checksum-all.sh && \\\n    mkdir -p /var/cache/apk && \\\n    ln -s /var/cache/apk /etc/apk/cache && \\\n    echo \"sandbox  ALL = ( ALL ) NOPASSWD: ALL\" >> /etc/sudoers && \\\n    echo \"Set disable_coredump false\" >> /etc/sudo.conf && \\\n    sed -i \"/#PACKAGER=.*/c\\PACKAGER=\\\"${APK_PACKAGER}\\\"\" /etc/abuild.conf && \\\n    sed -i \"/#MAINTAINER=.*/c\\MAINTAINER=\\\"${APK_MAINTAINER}\\\"\" /etc/abuild.conf && \\\n    echo 'export PATH=\"/opt/php-alpine/bin:$PATH\"' > /etc/profile.d/php-bin.sh && \\\n    chown -R sandbox:sandbox /home/sandbox && \\\n    chown -R sandbox:sandbox /opt/php-alpine\n\n# required for running \"aports-build\" tool.\nRUN mkdir -p /var/run/mqtt-exec.aports-build && \\\n    chown -R sandbox:abuild /var/run/mqtt-exec.aports-build && \\\n    chmod 755 /var/run/mqtt-exec.aports-build\n\n# switch to sandbox user.\nUSER sandbox\n\n# create some required directories.\nRUN mkdir -p /home/sandbox/scripts && \\\n    mkdir -p /home/sandbox/packages\n\n# update repos.\nUSER root\nRUN apk update\n\n# switch to sandbox user.\nUSER sandbox\n\n# set entrypoint.\nENTRYPOINT [\"/opt/php-alpine/entrypoint.sh\"]\n\n# set container workdir.\nWORKDIR \"/home/sandbox/scripts\"\n\n# use bash as default command.\nCMD [\"/bin/ash\"]\n"
}