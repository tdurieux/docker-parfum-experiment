{
  "startTime": 1674250442018,
  "endTime": 1674250443551,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 5,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 5,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 15,
        "columnStart": 5,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 5,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 45,
        "columnStart": 5,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic\n# Docker build arguments\nARG SOURCE_DIR=/jellyfin\nARG ARTIFACT_DIR=/dist\n# Docker run environment\nENV SOURCE_DIR=/jellyfin\nENV ARTIFACT_DIR=/dist\nENV DEB_BUILD_OPTIONS=noddebs\nENV ARCH=amd64\nENV IS_DOCKER=YES\n\n# Prepare Debian build environment\nRUN apt-get update -yqq \\\n  && apt-get install -yqq --no-install-recommends \\\n    apt-transport-https debhelper gnupg wget ca-certificates devscripts \\\n    mmv build-essential lsb-release && rm -rf /var/lib/apt/lists/*;\n\n# Install dotnet repository\nRUN wget -q https://download.visualstudio.microsoft.com/download/pr/77d472e5-194c-421e-992d-e4ca1d08e6cc/56c61ac303ddf1b12026151f4f000a2b/dotnet-sdk-6.0.301-linux-x64.tar.gz -O dotnet-sdk.tar.gz \\\n  && mkdir -p dotnet-sdk \\\n  && tar -xzf dotnet-sdk.tar.gz -C dotnet-sdk \\\n  && ln -s $( pwd )/dotnet-sdk/dotnet /usr/bin/dotnet && rm dotnet-sdk.tar.gz\n\n# Prepare the cross-toolchain\nRUN rm /etc/apt/sources.list \\\n  && export CODENAME=\"$( lsb_release -c -s )\" \\\n  && echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${CODENAME} main restricted universe multiverse\" >>/etc/apt/sources.list.d/amd64.list \\\n  && echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${CODENAME}-updates main restricted universe multiverse\" >>/etc/apt/sources.list.d/amd64.list \\\n  && echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${CODENAME}-backports main restricted universe multiverse\" >>/etc/apt/sources.list.d/amd64.list \\\n  && echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${CODENAME}-security main restricted universe multiverse\" >>/etc/apt/sources.list.d/amd64.list \\\n  && echo \"deb [arch=armhf] http://ports.ubuntu.com/ ${CODENAME} main restricted universe multiverse\" >>/etc/apt/sources.list.d/armhf.list \\\n  && echo \"deb [arch=armhf] http://ports.ubuntu.com/ ${CODENAME}-updates main restricted universe multiverse\" >>/etc/apt/sources.list.d/armhf.list \\\n  && echo \"deb [arch=armhf] http://ports.ubuntu.com/ ${CODENAME}-backports main restricted universe multiverse\" >>/etc/apt/sources.list.d/armhf.list \\\n  && echo \"deb [arch=armhf] http://ports.ubuntu.com/ ${CODENAME}-security main restricted universe multiverse\" >>/etc/apt/sources.list.d/armhf.list \\\n  && dpkg --add-architecture armhf \\\n  && apt-get update -yqq \\\n  && apt-get install --no-install-recommends -yqq cross-gcc-dev \\\n  && TARGET_LIST=\"armhf\" cross-gcc-gensource 6 \\\n  && cd cross-gcc-packages-amd64/cross-gcc-6-armhf \\\n  && ln -fs /usr/share/zoneinfo/America/Toronto /etc/localtime \\\n  && apt-get install -yqq --no-install-recommends \\\n    gcc-6-source libstdc++6-armhf-cross binutils-arm-linux-gnueabihf \\\n    bison flex libtool gdb sharutils netbase libcloog-isl-dev libmpc-dev \\\n    libmpfr-dev libgmp-dev systemtap-sdt-dev autogen expect chrpath zlib1g-dev \\\n    zip libc6-dev:armhf linux-libc-dev:armhf libgcc1:armhf libcurl4-openssl-dev:armhf \\\n    libfontconfig1-dev:armhf libfreetype6-dev:armhf liblttng-ust0:armhf libstdc++6:armhf libssl-dev:armhf && rm -rf /var/lib/apt/lists/*;\n\n# Link to build script\nRUN ln -sf ${SOURCE_DIR}/deployment/build.debian.armhf /build.sh\n\nVOLUME ${SOURCE_DIR}/\n\nVOLUME ${ARTIFACT_DIR}/\n\nENTRYPOINT [\"/build.sh\"]\n"
}