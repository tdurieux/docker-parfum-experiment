{
  "startTime": 1674255713677,
  "endTime": 1674255715017,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 49,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile.ok for a simple Nginx stream replicator\n\n# Separate build stage to keep build dependencies out of our final image\nARG ALPINE_VERSION=alpine\nFROM ${ALPINE_VERSION}\nENV LANG C.UTF-8\n# Software versions to build\nARG NGINX_VERSION=nginx-1.18.0\nARG NGINX_HTTP_FLV_MODEL_VERSION=1.2.8\nARG PCRE_VERSION=8.44\nARG OPENSSL_VERSION=1.1.1k\nARG ZLIB_VERSION=1.2.11\n\n# Install buildtime dependencies\n# Note: We build against LibreSSL instead of OpenSSL, because LibreSSL is already included in Alpine\nRUN apk --no-cache add build-base tar \\\n            gcc \\\n            libc-dev \\\n            make \\\n            openssl-dev \\\n            pcre-dev \\\n            zlib-dev \\\n            linux-headers \\\n            libxslt-dev \\\n            gd-dev \\\n            geoip-dev \\\n            perl-dev \\\n            libedit-dev \\\n            mercurial \\\n            bash \\\n            alpine-sdk \\\n            findutils\n\n# Download sources\n# Note: We download our own fork of nginx-rtmp-module which contains some additional enhancements over the original version by arut\nRUN mkdir -p /build && \\\n    wget -O - https://nginx.org/download/${NGINX_VERSION}.tar.gz | tar -zxC /build -f - && \\\n    mv /build/${NGINX_VERSION} /build/nginx && \\\n    wget -O - https://github.com/winshining/nginx-http-flv-module/archive/v${NGINX_HTTP_FLV_MODEL_VERSION}.tar.gz | tar -zxC /build -f - && \\\n    mv /build/nginx-http-flv-module-${NGINX_HTTP_FLV_MODEL_VERSION} /build/nginx-http-flv-module&& \\\n    wget -O - https://ftp.pcre.org/pub/pcre/pcre-${PCRE_VERSION}.tar.gz | tar -zxC /build -f - && \\\n    mv /build/pcre-${PCRE_VERSION} /build/pcre && \\\n    wget -O - https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz | tar -zxC /build -f - && \\\n    mv /build/openssl-${OPENSSL_VERSION} /build/openssl && \\\n    wget -O - https://www.zlib.net/zlib-${ZLIB_VERSION}.tar.gz | tar -zxC /build -f - && \\\n    mv /build/zlib-${ZLIB_VERSION} /build/zlib\n\n# Build a minimal version of nginx\nRUN cd /build/nginx && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/etc/nginx \\\n        --sbin-path=/usr/local/sbin/nginx \\\n        --conf-path=/etc/nginx/nginx.conf \\\n        --pid-path=/var/run/nginx.pid \\\n        --lock-path=/var/lock/nginx.lock \\\n        --http-client-body-temp-path=/tmp/nginx/client-body \\\n        --user=nginx --group=nginx \\\n        --with-stream \\\n        --with-stream_ssl_module \\\n        --with-threads \\\n        --with-http_sub_module \\\n        --with-http_gunzip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_stub_status_module \\\n        --with-http_ssl_module \\\n        --with-http_v2_module \\\n        --with-openssl=/build/openssl \\\n        --with-pcre=/build/pcre \\\n        --with-pcre-jit \\\n        --with-zlib=/build/zlib \\\n        --add-module=/build/nginx-http-flv-module && \\\n    make -j $(getconf _NPROCESSORS_ONLN) && \\\n    cp /build/nginx-http-flv-module/stat.xsl /build/nginx/conf/\n\n# Final image stage\nFROM justtin/alpine-ffmpeg\n\nRUN apk --no-cache add nginx-mod-http-image-filter \\\n                libxslt \\\n                libedit \\\n                perl \\\n                geoip \\\n                gd\n\n# Set up group and user\n#RUN set +e && addgroup -S nginx && \\\n#    adduser -s /sbin/nologin -G nginx -S -D -H nginx\n\n# Copy files from build stage\nCOPY --from=0 /build/nginx/conf/ /etc/nginx/\nCOPY --from=0 /build/nginx/html/ /etc/nginx/html/\nCOPY --from=0 /build/nginx/objs/nginx /usr/local/sbin/nginx\n# Set up config file\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n# Set up directories\nRUN set -e && mkdir -p /etc/nginx/logs/ /var/log/nginx /var/www /tmp/nginx/client-body && \\\n    chown -R nginx:nginx /var/log/nginx /var/www && \\\n    chmod -R 775 /var/log/nginx /var/www ;\\\n    ln -sf /dev/stdout /etc/nginx/logs/access.log && \\\n    ln -sf /dev/stderr /etc/nginx/logs/error.log ;\\\n    chmod 444 /etc/nginx/nginx.conf && mkdir -p /media/{hls,dash} ;\\\n    chmod +x /usr/local/sbin/nginx\n# Set up exposed ports\nEXPOSE 1935 \\\n             80 \\\n             443\n\n#挂载音视频媒体文件 hls:/media/hls dash:/media/dash\nVOLUME /media\n#自定义nginx配置\nVOLUME /etc/nginx/\nENTRYPOINT [\"nginx\", \"-g\", \"daemon off;\"]\nCMD []\n"
}