{
  "startTime": 1674250458063,
  "endTime": 1674250459589,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 26,
        "columnEnd": 62
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 25,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Maintainer(s): github.com/wiryfuture\n\n# First we're gonna build glibc and then export it so we can proceed with wine\n#   # This lets us cache this process\nFROM archlinux:latest as glibc-builder\n# Dependencies for building packages with makepkg\nRUN pacman -Sy --noconfirm --needed sudo base-devel\n# Dependencies for wine-lol-glibc\nRUN pacman -Sy --noconfirm --needed git gd lib32-gcc-libs python\n# make makepkg multithreaded\nRUN echo 'MAKEFLAGS=\"-j$(expr $(nproc) \\+ 1)\"' >> /etc/makepkg.conf\n# copy source for glibc\nWORKDIR /wine-lol-glibc\nADD wine-lol-glibc/ /wine-lol-glibc/.\nRUN chmod 777 -R /wine-lol-glibc\n# make our export folder\nRUN mkdir -p /glibc-builds && chmod 777 -R /glibc-builds\n\n#   # Environment preparation is done, build glibc\n# Build glibc\nRUN sudo -u nobody bash -c 'makepkg --syncdeps'\n# Copy to build folder\nRUN cp ./wine-lol-glibc-*.pkg.tar.zst /glibc-builds/.\n\n# Second stage, building wine itself\n#   # Let's us copy glibc package from glibc-builder without rebuilding it, nice.\nFROM archlinux:latest as wine-builder\n# Dependencies for building packages with makepkg, again\nRUN pacman -Sy --noconfirm --needed sudo base-devel\n# We need to enable lib32 and multiarch for the wine dependencies\nRUN echo '[multilib]' >> /etc/pacman.conf\nRUN echo 'Include = /etc/pacman.d/mirrorlist' >> /etc/pacman.conf\n# Dependencies for building wine-lol\nRUN pacman -Sy --noconfirm --needed attr lib32-attr fontconfig lib32-fontconfig lcms2 lib32-lcms2 libxml2 lib32-libxml2 libxcursor lib32-libxcursor libxrandr lib32-libxrandr libxdamage lib32-libxdamage libxi lib32-libxi gettext lib32-gettext freetype2 lib32-freetype2 glu lib32-glu libsm lib32-libsm gcc-libs lib32-gcc-libs libpcap lib32-libpcap desktop-file-utils\nRUN pacman -Sy --noconfirm --needed autoconf ncurses bison perl fontforge flex 'gcc>=4.5.0-2' giflib lib32-giflib libpng lib32-libpng gnutls lib32-gnutls libxinerama lib32-libxinerama libxcomposite lib32-libxcomposite libxmu lib32-libxmu libxxf86vm lib32-libxxf86vm libldap lib32-libldap mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils alsa-lib lib32-alsa-lib libxcomposite lib32-libxcomposite mesa lib32-mesa mesa-libgl lib32-mesa-libgl opencl-icd-loader lib32-opencl-icd-loader libxslt lib32-libxslt libpulse lib32-libpulse libva lib32-libva gtk3 lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader sdl2 lib32-sdl2 vkd3d lib32-vkd3d sane libgphoto2 gsm ffmpeg samba opencl-headers\nRUN pacman -Sy --noconfirm --needed giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo libxcomposite lib32-libxcomposite libxinerama lib32-libxinerama ncurses lib32-ncurses opencl-icd-loader lib32-opencl-icd-loader libxslt lib32-libxslt libva lib32-libva gtk3 lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader sdl2 lib32-sdl2 vkd3d lib32-vkd3d sane libgphoto2 gsm ffmpeg cups samba dosbox\n# Copy the custom glibc package we built earlier and install\nRUN mkdir -p /glibc-builds\nCOPY --from=glibc-builder /glibc-builds/ /glibc-builds/.\nRUN pacman -U --noconfirm /glibc-builds/wine-lol-glibc-*.pkg.tar.zst\n# make makepkg multithreaded (again)\nRUN echo 'MAKEFLAGS=\"-j$(expr $(nproc) \\+ 1)\"' >> /etc/makepkg.conf\n# Copy source for wine\nWORKDIR /wine-lol\nADD wine-lol/ /wine-lol/.\nRUN chmod 777 -R /wine-lol\n# Make our export foldePreparation is done, build wine\nRUN mkdir -p /wine-builds\n\n#   # Environment preparation is done, build wine\n# Build wine\nRUN sudo -u nobody bash -c 'makepkg --syncdeps'\n# Copy wine to the build folder\nRUN cp ./wine-lol-*.pkg.tar.zst /wine-builds/.\n\n# Copy all arch packages to the same folder for brevity\nFROM archlinux:latest as arch-exporter\nRUN mkdir -p /wine-lol && chmod 777 -R wine-lol\nWORKDIR /wine-lol\n# Copy wine package and glibc package to export folder\nCOPY --from=wine-builder /wine-builds/ /wine-lol/.\nCOPY --from=glibc-builder /glibc-builds/ /wine-lol/.\n\n# Extract binaries from arch packages\nFROM archlinux:latest as extract-binaries\nWORKDIR /packages\nRUN mkdir -p /packages/wine /packages/glibc /binaries/wine /binaries/glibc\n# Copy glibc and wine packages from their builders\nCOPY --from=glibc-builder /glibc-builds/ /packages/glibc/.\nCOPY --from=wine-builder /wine-builds/ /packages/wine/.\n# Extract package tarfiles\nRUN cd /packages/glibc && tar -xf wine-lol-glibc-*.pkg.tar.zst && rm wine-lol-glibc-*.pkg.tar.zst\nRUN cd /packages/wine && tar -xf wine-lol-*.pkg.tar.zst && rm wine-lol-*.pkg.tar.zst\n# Copy binaries to their own folder\n#   # Folder structure should look like this\n#   # /binaries > /wine > /opt > /wine-lol > ...\n#   # /binaries > /glibc > /opt > /wine-lol > ...\nRUN cp -r /packages/glibc/opt /binaries/glibc/.\nRUN cp -r /packages/wine/opt /binaries/wine/.\n\n# Create tarballs from binaries\nFROM archlinux:latest as tarball-packager\nWORKDIR /tarballs\nCOPY --from=extract-binaries /binaries/. /binaries/.\n# Copy binaries for glibc\nRUN cp -R /binaries/glibc/opt/wine-lol /opt/wine-lol\n# Create tarball for glibc\nRUN tar cjfP wine-lol-glibc.tar.bz2 /opt/wine-lol\n# Remove glibc binaries from directory\nRUN rm -rf /opt/wine-lol\n# Copy binaries for wine\nRUN cp -R /binaries/wine/opt/wine-lol /opt/wine-lol\nRUN tar cjfP wine-lol.tar.bz2 /opt/wine-lol\n\n# Package binaries into .deb for debian and ubuntu folk\n#   # Why don't we just use the existing debian packager/\n#   #    Because Idk how to integrate it into this Dockerfile well that's why\n#   # Why don't we use fpm for debian and fedora?\n#   #    I have no idea on how long fpm will be maintained for so it's much more preferable to use the native option when possible\nFROM ubuntu:rolling as deb-packager\nWORKDIR /build_dir\nRUN mkdir -p /build_dir/wine-lol-glibc/DEBIAN /build_dir/wine-lol/DEBIAN /binaries /debian-packages\n# Copy binaries\nCOPY --from=extract-binaries /binaries /binaries\nRUN cp -r /binaries/glibc/. /build_dir/wine-lol-glibc/\nRUN cp -r /binaries/wine/. /build_dir/wine-lol/\n# Copy contrib control files\n#   # Would be nice to create these on the fly from the 'official' arch .SRCINFOs\nADD contrib/docker/debian/glibc-control  /build_dir/wine-lol-glibc/DEBIAN/control\nADD contrib/docker/debian/wine-control /build_dir/wine-lol/DEBIAN/control\n# Package binaries\nRUN dpkg-deb --build --root-owner-group /build_dir/wine-lol-glibc\nRUN dpkg-deb --build --root-owner-group /build_dir/wine-lol\n# Move binaries to export folder and we're done!\nRUN cp /build_dir/*.deb /debian-packages/.\n\n#    # Making packages 'natively' with rpmbuild isn't very intuitive.\n#    # I'm going to leave this in for now because I'm planning on getting this to work instead of fpm.\n#    # However, for the time being, fpm will do the building for RPMs/fedora\n\n# Package binaries into .rpm for fedora folk\n#FROM fedora:latest as rpm-packager\n# Install packaging dependencies\n#RUN dnf install gcc gcc-c++ make automake autoconf rpm-build -y\n#WORKDIR /build_dir\n#RUN mkdir -p /build_dir/wine-lol /build_dir/wine-lol-glibc\n# Create dir structs\n#RUN cd /build_dir/wine-lol && mkdir BUILD RPMS SOURCES SPECS SRPMS\n#RUN cd /build_dir/wine-lol-glibc && mkdir BUILD RPMS SOURCES SPECS SRPMS\n# Copy binaries over\n#RUN mkdir -p /binaries/wine /binaries/glibc\n#COPY --from=extract-binaries /binaries/ /binaries/.\n#ADD contrib/docker/fedora/wine-lol-glibc.spec /build_dir/glibc/SPECS/.\n#ADD contrib/docker/fedora/wine-lol.spec /build_dir/wine/SPECS/.\n# Build packages\n#RUN cd /build_dir/wine-lol-glibc && rpmbuild -v -bb\n#RUN ls /build_dir/wine-lol-glibc/RPMS/\n\n# Temporary fpm packager for RPM packages\n#   # Using rpmbuild would be nice.\nFROM fedora:latest as rpm-packager\n# Install packaging dependencies\nRUN dnf install -y ruby-devel gcc gcc-c++ make automake autoconf rpm-build squashfs-tools && gem install fpm\n# Copy binaries over\nWORKDIR /build_dir\nRUN mkdir -p /binaries/wine /binaries/glibc\nCOPY --from=extract-binaries /binaries/ /binaries/.\n# Create glibc dir, copy fpm file and build\nRUN mkdir -p /build_dir/glibc\nADD contrib/docker/fpm/glibc.fpm /build_dir/glibc/.fpm\nRUN cd /build_dir/glibc && fpm -t rpm\n# Rinse and repeat for wine\nRUN mkdir -p /build_dir/wine\nADD contrib/docker/fpm/wine.fpm /build_dir/wine/.fpm\nRUN cd /build_dir/wine && fpm -t rpm\n# Copy files to export folder\nRUN mkdir -p /rpm-packages\nRUN cp -r /build_dir/*/*.rpm /rpm-packages/.\n\n# Export all packages to the exporter? Why? So the CMD line can actually export eveything that's why\nFROM archlinux:latest as package-exporter\nWORKDIR /exports\n# Copy arch package\nCOPY --from=arch-exporter /wine-lol/ /exports/.\n# Copy tarball\nCOPY --from=tarball-packager /tarballs/ /exports/.\n# Copy deb package\nCOPY --from=deb-packager /debian-packages/ /exports/.\n# Copy rpm package\nCOPY --from=rpm-packager /rpm-packages/ /exports/.\n\n# Lastly, the magic command, where we export our built wine package to the mounted directory\nCMD \"cp\" \"-r\" \"/exports/.\" \"/wine-exports/.\"\n"
}