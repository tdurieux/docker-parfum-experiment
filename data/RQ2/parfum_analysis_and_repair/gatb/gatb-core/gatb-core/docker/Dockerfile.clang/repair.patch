diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/gatb/gatb-core/gatb-core/docker/Dockerfile.clang b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/gatb/gatb-core/gatb-core/docker/Dockerfile.clang/repaired.Dockerfile
index a7dfc9c..e4e1a95 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/gatb/gatb-core/gatb-core/docker/Dockerfile.clang
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/gatb/gatb-core/gatb-core/docker/Dockerfile.clang/repaired.Dockerfile
@@ -2,7 +2,7 @@
 #
 # Dockerfile to start a GATB-Core compiling machine using these dependencies:
 #
-#     -->  clang 3.6 
+#     -->  clang 3.6
 #     -->  CMake 3.1.3
 #
 #   See below to change these values.
@@ -11,16 +11,16 @@
 #
 # Use:
 #
-# ### To build the container, use: 
-#  
+# ### To build the container, use:
+# 
 #     docker build -f Dockerfile.clang -t gatb_core_machine_clang .
 #
 # ### To run the container.
 #
-#   Running the container means that you want to compile GATB-Core. For that 
+#   Running the container means that you want to compile GATB-Core. For that
 #   purpose, docker run expects some information, as illustrated in this
 #   command:
-# 
+#
 #   docker run \
 #     -i -t \
 #     -e "GIT_BRANCH=master"                             <-- branch to build
@@ -37,30 +37,30 @@
 #         GATB-Core repository;
 #      2. a directory containing the compiled code.
 #
-#   Using such a design, you can work with an existing clone of GATB-Core 
+#   Using such a design, you can work with an existing clone of GATB-Core
 #   repository and you can easily access the compiled code.
 #
 #   GATB-Core source code directory (hereafter denoted as "gatb-core-source") must
 #   exist on the host system, but it can be empty. In such a case, the container
-#   will do the git clone. Thus, gatb-core-source is passed to docker run as 
+#   will do the git clone. Thus, gatb-core-source is passed to docker run as
 #   follows:
 #
 #      -v /full/path/to/your/gatb-core-source:/tmp/gatb-core-code
 #
-#      (do not modify "/tmp/gatb-core-code": this is the mount path within the 
+#      (do not modify "/tmp/gatb-core-code": this is the mount path within the
 #       container)
 #
 #   GATB-Core compiled code directory (hereafter denoted as "gatb-core-build")
 #   must also exist on the host system. In all case, the container will erase its
-#   content before running the code compiling procedure.  Thus, gatb-core-build 
+#   content before running the code compiling procedure.  Thus, gatb-core-build
 #   is passed to docker run as follows:
 #
 #      -v /full/path/to/your/gatb-core-build:/tmp/gatb-core-build
 #
-#      (do not modify "/tmp/gatb-core-build": this is the mount path within the 
+#      (do not modify "/tmp/gatb-core-build": this is the mount path within the
 #       container)
 #
-#   Finally, the docker run also accepts an optional environment variable: the 
+#   Finally, the docker run also accepts an optional environment variable: the
 #   GATB-Core branch to compile. Simply pass that information using the "-e"
 #   argument of docker run as follows:
 #
@@ -68,7 +68,7 @@
 #
 #      replace "master" by an appropriate value, i.e. a git branch or tag.
 #
-#   If "-e" is not provided to docker run, then the master branch of GATB-Core 
+#   If "-e" is not provided to docker run, then the master branch of GATB-Core
 #   is compiled.
 #
 #   All in all, the GATB-Core compiler machine can be started as follows:
@@ -86,18 +86,18 @@
 #
 # ### Test compile code.
 #
-#   In the above docker run command, you can replace 
+#   In the above docker run command, you can replace
 #
-#     gatb-compile.sh 
+#     gatb-compile.sh
 #
-#   by 
+#   by
 #
-#     gatb-test.sh 
+#     gatb-test.sh
 #
 #   to run unit tests of the freshly compiled GATB-Core library.
-#                            
+#                           
 # ### Additional notes
-# 
+#
 #   Root access inside the container:
 #
 #     - if running: docker exec -it gatb_core_machine_clang bash
@@ -134,7 +134,7 @@ ENV CLANG_VERSION=3.6 \
 RUN apt-get update && apt-get -y dist-upgrade \
     && apt-get install -y --no-install-recommends software-properties-common vim git wget make zlib1g-dev libcppunit-dev \
     && apt-get clean \
-    && git config --global http.sslVerify false
+    && git config --global http.sslVerify false && rm -rf /var/lib/apt/lists/*;
 
 # ###
 #     Compiler installation
@@ -143,15 +143,15 @@ RUN apt-get update && apt-get -y dist-upgrade \
 #     Reference: http://apt.llvm.org/
 #
 RUN add-apt-repository "deb http://apt.llvm.org/jessie/ llvm-toolchain-jessie-${CLANG_VERSION} main" \
-    && wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
+    && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
     && apt-get update \
     && apt-get install -y --no-install-recommends clang-${CLANG_VERSION} lldb-${CLANG_VERSION} \
-    && apt-get clean
+    && apt-get clean && rm -rf /var/lib/apt/lists/*;
 
 # ###
 #     CMAKE installation
 #
-#     we need cmake in aparticular release; we do not use: apt-get 
+#     we need cmake in aparticular release; we do not use: apt-get
 #     install cmake since we have to control which version we use.
 #     Cmake install procedure: https://cmake.org/install/
 #
@@ -162,7 +162,7 @@ RUN cd /opt \
     && export CMAKE_URL="http://cmake.org/files/v${CMAKE_SERIES}/cmake-${CMAKE_VERSION}.tar.gz" \
     && wget --no-check-certificate ${CMAKE_URL} -O - | tar xzf - \
     && cd cmake-${CMAKE_VERSION} \
-    && ./bootstrap && make && make install && cd /opt && rm -rf cmake-${CMAKE_VERSION} 
+    && ./bootstrap && make && make install && cd /opt && rm -rf cmake-${CMAKE_VERSION}
 
 # ###
 #     GATB-Core management scripts