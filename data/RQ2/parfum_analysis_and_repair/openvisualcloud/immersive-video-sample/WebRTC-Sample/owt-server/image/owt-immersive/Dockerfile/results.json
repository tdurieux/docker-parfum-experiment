{
  "startTime": 1674249610412,
  "endTime": 1674249613321,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 261,
        "lineEnd": 261,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 266,
        "lineEnd": 266,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 267,
        "lineEnd": 267,
        "columnStart": 25,
        "columnEnd": 40
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 301,
        "lineEnd": 301,
        "columnStart": 146,
        "columnEnd": 157
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 343,
        "lineEnd": 343,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 5,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 188
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 163
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 221,
        "lineEnd": 221,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 317,
        "lineEnd": 317,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 320,
        "lineEnd": 320,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7.6.1810 AS build\nWORKDIR /home\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# COMMON BUILD TOOLS\nRUN yum install -y -q bzip2 make autoconf libtool git wget ca-certificates pkg-config gcc gcc-c++ bison flex patch epel-release yum-devel libcurl-devel zlib-devel; rm -rf /var/cache/yum\n\n# Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \\\n    cd cmake-${CMAKE_VER} && \\\n    ./bootstrap --prefix=\"/usr/local\" --system-curl && \\\n    make -j8 && \\\n    make install\n\n# Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN wget -O - ${AUTOMAKE_REPO} | tar xJ && \\\n    cd automake-${AUTOMAKE_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --libdir=/usr/local/lib64 --disable-doc && \\\n    make -j8 && \\\n    make install\n\n# Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} && \\\n     tar -xaf nasm* && \\\n     cd nasm-${NASM_VER} && \\\n     ./autogen.sh && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib64 && \\\n     make -j8 && \\\n     make install\n\n# Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz && \\\n     cd yasm-${YASM_VER} && \\\n     sed -i \"s/) ytasm.*/)/\" Makefile.in && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib64 && \\\n     make -j8 && \\\n     make install\n\n# Build libnice\nARG NICE_VER=\"0.1.4\"\nARG NICE_REPO=http://nice.freedesktop.org/releases/libnice-${NICE_VER}.tar.gz\nARG LIBNICE_PATCH_VER=\"4.3.1\"\nARG LIBNICE_PATCH_REPO=https://github.com/open-webrtc-toolkit/owt-server/archive/v${LIBNICE_PATCH_VER}.tar.gz\n\nRUN yum install -y -q glib2-devel && rm -rf /var/cache/yum\n\nRUN wget -O - ${NICE_REPO} | tar xz && \\\n    cd libnice-${NICE_VER} && \\\n    wget -O - ${LIBNICE_PATCH_REPO} | tar xz  && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-agentlock.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-agentlock-plus.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-removecandidate.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-keepalive.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-startcheck.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-closelock.patch && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib64 && \\\n    make -s V= && \\\n    make install\n\n\n# Build open ssl\nARG OPENSSL_VER=\"1.1.1h\"\nARG OPENSSL_REPO=http://www.openssl.org/source/openssl-${OPENSSL_VER}.tar.gz\nARG BUILD_PREFIX=/usr/local/ssl\nARG BUILD_DESTDIR=/home/build\n\nRUN wget -O - ${OPENSSL_REPO} | tar xz && \\\n    cd openssl-${OPENSSL_VER} && \\\n    ./config no-ssl3 --prefix=${BUILD_PREFIX} --openssldir=${BUILD_PREFIX} -Wl,-rpath=${BUILD_PREFIX}/lib -fPIC && \\\n    make depend && \\\n    make -s V=0  && \\\n    make install\n\n# Build libre\nARG LIBRE_VER=\"v0.5.0\"\nARG LIBRE_REPO=https://github.com/creytiv/re.git\n\nRUN git clone ${LIBRE_REPO} && \\\n    cd re && \\\n    git checkout ${LIBRE_VER} && \\\n    make SYSROOT_ALT=\"/usr\" RELEASE=1 && \\\n    make install SYSROOT_ALT=\"/usr\" RELEASE=1 PREFIX=\"/usr\"\n\n# Build usrsctp\n\nARG USRSCTP_VERSION=\"30d7f1bd0b58499e1e1f2415e84d76d951665dc8\"\nARG USRSCTP_FILE=\"${USRSCTP_VERSION}.tar.gz\"\nARG USRSCTP_EXTRACT=\"usrsctp-${USRSCTP_VERSION}\"\nARG USRSCTP_URL=\"https://github.com/sctplab/usrsctp/archive/${USRSCTP_FILE}\"\n\nRUN yum install -y -q which && rm -rf /var/cache/yum\n\nRUN wget -O - ${USRSCTP_URL} | tar xz && \\\n    mv ${USRSCTP_EXTRACT} usrsctp && \\\n    cd usrsctp && \\\n    ./bootstrap && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib64 && \\\n    make && \\\n    make install\n\n# Build libsrtp2\nARG SRTP2_VER=\"2.1.0\"\nARG SRTP2_REPO=https://codeload.github.com/cisco/libsrtp/tar.gz/v${SRTP2_VER}\n\nRUN yum install -y -q curl && rm -rf /var/cache/yum\n\nRUN curl -f -o libsrtp-${SRTP2_VER}.tar.gz ${SRTP2_REPO} && \\\n    tar xzf libsrtp-${SRTP2_VER}.tar.gz && \\\n    cd libsrtp-${SRTP2_VER} && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\" && \\\n    export CFLAGS=\"-fPIC\" && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-openssl --prefix=\"/usr/local\" --with-openssl-dir=\"/usr/local/ssl/\" && \\\n    make -s V=0 && \\\n    make install && rm libsrtp-${SRTP2_VER}.tar.gz\n\n# Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\n\nRUN wget -O - ${FDK_AAC_REPO} | tar xz && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac && \\\n    cd fdk-aac && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib64 --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\n\nARG FFMPEG_PATCHES_RELEASE_VER=0.1\nARG FFMPEG_PATCHES_RELEASE_URL=https://github.com/VCDP/CDN/archive/v${FFMPEG_PATCHES_RELEASE_VER}.tar.gz\nARG FFMPEG_PATCHES_PATH=/home/CDN-${FFMPEG_PATCHES_RELEASE_VER}\nRUN wget -O - ${FFMPEG_PATCHES_RELEASE_URL} | tar xz\n\n\nRUN yum install -y -q libass-devel freetype-devel zlib-devel openssl-devel && rm -rf /var/cache/yum\n\nRUN wget -O - ${FFMPEG_REPO} | tar xz && mv FFmpeg-${FFMPEG_VER} FFmpeg && \\\n    cd FFmpeg ;\n\n# Compile FFmpeg\nRUN cd /home/FFmpeg && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\" && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib64 --enable-shared --disable-static --disable-libvpx --disable-vaapi --enable-libfreetype --enable-libfdk-aac --enable-nonfree && \\\n\n    make -j8 && \\\n    make install && make install DESTDIR=\"/home/build\"\n\n\n# Install node\nARG NODE_VER=v10.21.0\nARG NODE_REPO=https://nodejs.org/dist/${NODE_VER}/node-${NODE_VER}-linux-x64.tar.xz\n\nRUN yum install -y -q ca-certificates wget xz-utils && rm -rf /var/cache/yum\n\nRUN wget ${NODE_REPO} && \\\n    tar xf node-${NODE_VER}-linux-x64.tar.xz && \\\n    cp node-*/* /usr/local -rf && \\\n    rm -rf node-* && rm node-${NODE_VER}-linux-x64.tar.xz\n\n# Fetch SVT-HEVC\nARG SVT_HEVC_VER=v1.4.3\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\n\nRUN yum install -y -q patch centos-release-scl && \\\n    yum install -y -q devtoolset-7 && rm -rf /var/cache/yum\n\n# hadolint ignore=SC1091\nRUN git clone ${SVT_HEVC_REPO} && \\\n    cd SVT-HEVC/Build/linux && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\" && \\\n    git checkout ${SVT_HEVC_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    ( source /opt/rh/devtoolset-7/enable && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install )\n\n\n# Build OWT specific modules\n\nARG OWTSERVER_COMMIT=fd71357d6fdbd57d3c4be2028976bc2b34fff781\nARG OWTSERVER_REPO=https://github.com/open-webrtc-toolkit/owt-server.git\nARG OPENH264_MAJOR=1\nARG OPENH264_MINOR=7\nARG OPENH264_SOVER=4\nARG OPENH264_SOURCENAME=v${OPENH264_MAJOR}.${OPENH264_MINOR}.0.tar.gz\nARG OPENH264_SOURCE=https://github.com/cisco/openh264/archive/v${OPENH264_MAJOR}.${OPENH264_MINOR}.0.tar.gz\nARG OPENH264_BINARYNAME=libopenh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0-linux64.${OPENH264_SOVER}.so\nARG OPENH264_BINARY=https://github.com/cisco/openh264/releases/download/v${OPENH264_MAJOR}.${OPENH264_MINOR}.0/${OPENH264_BINARYNAME}.bz2\nARG LICODE_COMMIT=\"8b4692c88f1fc24dedad66b4f40b1f3d804b50ca\"\nARG LICODE_REPO=https://github.com/lynckia/licode.git\nARG LICODE_PATCH_REPO=https://github.com/open-webrtc-toolkit/owt-server/tree/master/scripts/patches/licode/\nARG SAFESTRINGLIB_COMMIT=\"245c4b8cff1d2e7338b7f3a82828fc8e72b29549\"\nARG SAFESTRINGLIB_REPO=https://github.com/intel/safestringlib.git\nARG SCVP_VER=\"9ce286edf4d5976802bf488b4dd90a16ecc28c36\"\nARG SCVP_REPO=https://github.com/OpenVisualCloud/Immersive-Video-Sample\nARG WEBRTC_REPO=https://github.com/open-webrtc-toolkit/owt-deps-webrtc.git\nARG SERVER_PATH=/home/owt-server\nARG OWT_SDK_REPO=https://github.com/open-webrtc-toolkit/owt-client-javascript.git\nARG OWT_BRANCH=360-video\nARG OWT_BRANCH_JS=master\nARG OWT_BRANCH_JS_COMMIT=\"d727af2927731ff16214d73f57964a992258636d\"\nARG WEBRTC_COMMIT=\"c2aa290cfe4f63d5bfbb6540122a5e6bf2783187\"\n\nARG FDKAAC_LIB=/home/build/usr/local/lib64\nRUN yum install -y -q python-devel glib2-devel boost-devel log4cxx-devel glog-devel gflags-devel && rm -rf /var/cache/yum\nRUN yum install -y -q patch centos-release-scl devtoolset-7 && rm -rf /var/cache/yum\nENV PYTHONIOENCODING=UTF-8\n# Install 360scvp\n# hadolint ignore=SC1091\nRUN cd /home && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    git clone ${SAFESTRINGLIB_REPO} && \\\n    cd safestringlib && git reset --hard ${SAFESTRINGLIB_COMMIT} && \\\n    mkdir build && cd build && cmake .. && \\\n    make -j && \\\n    mkdir -p /usr/local/lib && \\\n    cp libsafestring_shared.so /usr/local/lib && \\\n    mkdir -p /usr/local/lib64 && \\\n    cp libsafestring_shared.so /usr/local/lib64 && \\\n    mkdir -p /home/build/usr/local/lib64 && \\\n    cp libsafestring_shared.so /home/build/usr/local/lib64 && \\\n    mkdir -p /usr/local/include/safestringlib && \\\n    cp -rf ../include/* /usr/local/include/safestringlib/\nRUN cd /home && \\\n    git clone ${SCVP_REPO} && \\\n    cd Immersive-Video-Sample/src/360SCVP && \\\n    git reset --hard ${SCVP_VER} && \\\n    mkdir build && \\\n    cd build && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib64 ../ && \\\n    make -j && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# 1. Clone OWT server source code\n# 2. Clone licode source code and patch\n# 3. Clone webrtc source code and patch\n\n# hadolint ignore=SC1091\nRUN git clone -b ${OWT_BRANCH} ${OWTSERVER_REPO} && \\\n    source /opt/rh/devtoolset-7/enable && \\\n\n    cd ${SERVER_PATH} && git reset --hard ${OWTSERVER_COMMIT} && \\\n    curl -f https://patch-diff.githubusercontent.com/raw/open-webrtc-toolkit/owt-server/pull/708.patch | git apply && \\\n\n    # Install node modules for owt\n    npm config set proxy=${http_proxy} && \\\n    npm config set https-proxy=${http_proxy} && \\\n    npm install -g --loglevel error node-gyp@v6.1.0 grunt-cli underscore jsdoc && \\\n    cd ${SERVER_PATH} && npm install nan && \\\n\n    # Get openh264 for owt\n    cd ${SERVER_PATH}/third_party && \\\n    mkdir openh264 && cd openh264 && \\\n    wget ${OPENH264_SOURCE} && \\\n    wget ${OPENH264_BINARY} && \\\n    tar xzf ${OPENH264_SOURCENAME} openh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0/codec/api && \\\n    ln -s -v openh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0/codec codec && \\\n    bzip2 -d ${OPENH264_BINARYNAME}.bz2 && \\\n    ln -s -v ${OPENH264_BINARYNAME} libopenh264.so.${OPENH264_SOVER} && \\\n    ln -s -v libopenh264.so.${OPENH264_SOVER} libopenh264.so && \\\n    echo 'const char* stub() {return \"this is a stub lib\";}' > pseudo-openh264.cpp && \\\n    gcc pseudo-openh264.cpp -fPIC -shared -o pseudo-openh264.so && \\\n\n    # Get licode for owt\n    cd ${SERVER_PATH}/third_party && git clone ${LICODE_REPO} && \\\n    cd licode && \\\n    git reset --hard ${LICODE_COMMIT} && \\\n    wget -r -nH --cut-dirs=5 --no-parent ${LICODE_PATCH_REPO} && \\\n    git apply ${SERVER_PATH}/scripts/patches/licode/*.patch && \\\n    mkdir -p ${SERVER_PATH}/build/libdeps/build/include && \\\n    cp erizoAPI/lib/json.hpp ${SERVER_PATH}/build/libdeps/build/include && \\\n\n    # Install webrtc for owt\n    cd ${SERVER_PATH}/third_party && mkdir webrtc && cd webrtc && \\\n    export GIT_SSL_NO_VERIFY=1 && \\\n    git clone -b 59-server ${WEBRTC_REPO} src && cd src && \\\n    git reset --hard ${WEBRTC_COMMIT} && \\\n    ./tools-woogeen/install.sh && \\\n    patch -p1 < ${SERVER_PATH}/scripts/patches/0001-Implement-RtcpFOVObserver.patch && \\\n    ./tools-woogeen/build.sh && \\\n\n    # Get js client sdk for owt\n    cd /home && git clone -b ${OWT_BRANCH_JS} ${OWT_SDK_REPO} && cd owt-client-javascript/scripts && git reset --hard ${OWT_BRANCH_JS_COMMIT} && npm install && grunt && \\\n    export LD_LIBRARY_PATH=/usr/local/lib64 && \\\n    #Build and pack owt\n    cd ${SERVER_PATH} && export CPLUS_INCLUDE_PATH=/usr/local/include/svt-hevc && export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig && ./scripts/build.js -t mcu -r -c && \\\n    ./scripts/pack.js -t all --install-module --no-pseudo --sample-path /home/owt-client-javascript/dist/samples/conference && npm cache clean --force;\n\nFROM centos:7.6.1810\nLABEL Description=\"This is the image for owt development on CentOS 7.6\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n\n# Prerequisites\n# Install node\nARG NODE_VER=v10.21.0\nARG NODE_REPO=https://nodejs.org/dist/${NODE_VER}/node-${NODE_VER}-linux-x64.tar.xz\n\nRUN yum install -y -q ca-certificates wget xz-utils && rm -rf /var/cache/yum\n\nRUN wget ${NODE_REPO} && \\\n    tar xf node-${NODE_VER}-linux-x64.tar.xz && \\\n    cp node-*/* /usr/local -rf && \\\n    rm -rf node-* && rm node-${NODE_VER}-linux-x64.tar.xz\n\nCOPY --from=build /home/owt-server/dist /home/owt\nCOPY --from=build /home/build /\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib64:\nRUN echo \"[mongodb-org-3.6]\" >> /etc/yum.repos.d/mongodb-org-3.6.repo && \\\n    echo \"name=MongoDB Repository\" >> /etc/yum.repos.d/mongodb-org-3.6.repo && \\\n    echo \"baseurl=https://repo.mongodb.org/yum/redhat/7/mongodb-org/3.6/x86_64/\" >> /etc/yum.repos.d/mongodb-org-3.6.repo && \\\n    echo \"gpgcheck=1\" >> /etc/yum.repos.d/mongodb-org-3.6.repo && \\\n    echo \"enabled=1\" >> /etc/yum.repos.d/mongodb-org-3.6.repo && \\\n    echo \"gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc\" >> /etc/yum.repos.d/mongodb-org-3.6.repo && \\\n    yum install epel-release boost-system boost-thread log4cxx glib2 freetype-devel -y && \\\n    yum install rabbitmq-server mongodb-org glog-devel gflags-devel -y && \\\n    yum remove -y -q epel-release && \\\n    rm -rf /var/cache/yum/*;\n\nCOPY scripts/init.sh scripts/restApi.sh scripts/restart.sh scripts/sleep.sh scripts/start.sh /home/\nCOPY scripts/scripts/ /home/scripts/\nRUN cd /home/scripts &&\\\n    npm config set proxy=${http_proxy} && \\\n    npm config set https-proxy=${http_proxy} && \\\n    npm install && npm cache clean --force;\n\n"
}