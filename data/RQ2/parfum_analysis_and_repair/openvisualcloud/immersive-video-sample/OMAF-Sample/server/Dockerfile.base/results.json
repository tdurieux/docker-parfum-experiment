{
  "startTime": 1674252297980,
  "endTime": 1674252299928,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 5,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7.6.1810\n\nRUN if [ -n \"${http_proxy}\" ] ; then \\\n    echo \"proxy=${http_proxy}\" >> /etc/yum.conf && \\\n    echo \"http_proxy=${http_proxy}\" >> /etc/wgetrc && \\\n    echo \"https_proxy=${https_proxy}\" >> /etc/wgetrc ; \\\n    fi\n\nWORKDIR /home/immersive\nARG WORKDIR=/home/immersive\n\n# Install denpendency\nRUN yum install -y centos-release-scl-rh && \\\n    yum install -y deltarpm && \\\n    yum install -y wget git bzip2 xz sudo devtoolset-7-gcc* && \\\n    wget https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-14.noarch.rpm && \\\n    rpm -Uvh epel-release*rpm && \\\n    yum install -y openssl centos-release-scl scl-utils gmp gmp-devel && \\\n    yum install -y mpfr mpfr-devel libmpc libmpc-devel patch autoconf && \\\n    yum install -y libtool automake libcurl-devel libxml2-devel && \\\n    yum install -y libevent-devel.x86_64 openssl-devel bc redhat-lsb && \\\n    yum install -y libXrandr libXrandr-devel libXinerama libXinerama-devel && \\\n    yum install -y libXcursor libXcursor-devel libXi libXi-devel glm-devel && \\\n    yum install -y mesa-libGL mesa-libGL-devel mesa-libGLU && \\\n    yum install -y mesa-libGLU-devel mesa-libGLES-devel mesa-libEGL-devel && \\\n    yum install -y SDL2 SDL2-devel libcurl4-openssl-dev libglfw3 && \\\n    yum install -y libXv-devel glfw glfw-devel xz-devel lzma -y && \\\n    yum install -y uuid.x86_64 uuid-devel.x86_64 popt-devel.x86_64 -y && \\\n    yum install -y numactl.x86_64 numactl-devel.x86_64 numactl-libs.x86_64 -y && \\\n    yum clean all && rm -rf /var/cache/yum/ && rm -rf * && \\\n    if [ -n \"${http_proxy}\" ]; then \\\n    git config --global http.proxy ${http_proxy} && \\\n    git config --global https.proxy ${https_proxy} ; \\\n    fi\n\nRUN yum -y install rh-ruby23 rh-ruby23-ruby-devel rh-ruby23-rubygem* && \\\n    source /opt/rh/rh-ruby23/enable && \\\n    yum -y install rpm-build && \\\n    if [ -n \"${http_proxy}\" ]; then \\\n    gem install -p ${http_proxy} fpm ; \\\n    else \\\n    gem install fpm ; \\\n    fi && rm -rf /var/cache/yum\n\n# Install cmake\nARG CMAKE_VER=3.12.4\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \\\n    cd cmake-${CMAKE_VER} && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    ./bootstrap --prefix=\"/usr\" --system-curl && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd ${WORKDIR} && rm -rf ./*\n\n# Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget --no-check-certificate -O - ${YASM_REPO} | tar xz && \\\n     cd yasm-${YASM_VER} && \\\n     sed -i \"s/) ytasm.*/)/\" Makefile.in && \\\n     source /opt/rh/devtoolset-7/enable && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu && \\\n     make -j$(nproc) && \\\n     make install && \\\n     cd ${WORKDIR} && rm -rf ./*\n\n# Build CURL\nARG CURL_VER=7.66.0\nARG CURL_REPO=https://curl.haxx.se/download/curl-${CURL_VER}.tar.xz\nRUN wget --no-check-certificate ${CURL_REPO} && \\\n    xz -d curl-${CURL_VER}.tar.xz && \\\n    tar -xvf curl-${CURL_VER}.tar && \\\n    cd curl-${CURL_VER} && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-darwinssl && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd ${WORKDIR} && rm -rf ./* && rm curl-${CURL_VER}.tar\n\n# Install BOOST\nARG BOOST_REPO=https://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.gz\nRUN wget --no-check-certificate -O - ${BOOST_REPO} | tar xz && \\\n    cd boost_1_63_0 && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    ./bootstrap.sh --without-libraries=python && \\\n    ./b2 -a cxxflags=\"-D_GLIBCXX_USE_CXX11_ABI=0\" -j`nproc` && \\\n    ./b2 cxxflags=\"-D_GLIBCXX_USE_CXX11_ABI=0\" install && \\\n    cd ${WORKDIR} && rm -rf ./boost_1_63_0*\n\n# Install SVT\nRUN git clone https://github.com/OpenVisualCloud/SVT-HEVC.git && \\\n    cd SVT-HEVC && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    git checkout ec0d95c7e0d5be20586e1b87150bdfb9ae97cf4d && \\\n    cd Build/linux/ && \\\n    ./build.sh && \\\n    cd Release && \\\n    make install && \\\n    cd ${WORKDIR} && rm -rf ./SVT-HEVC\n\n# Install glog\nRUN git clone https://github.com/google/glog.git && \\\n    cd glog && \\\n    git checkout v0.5.0 && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    sed -i '23s/OFF/ON/' CMakeLists.txt && \\\n    cmake -H. -Bbuild -G \"Unix Makefiles\" && \\\n    cmake --build build && \\\n    cmake --build build --target install && \\\n    cd ${WORKDIR} && rm -rf ./glog\n\n# Install lttng\nRUN source /opt/rh/devtoolset-7/enable && \\\n    wget --no-check-certificate -c https://lttng.org/files/urcu/userspace-rcu-latest-0.11.tar.bz2 && \\\n    tar -xjf userspace-rcu-latest-0.11.tar.bz2 && \\\n    cd userspace-rcu-0.11.* && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j $(nproc) && \\\n    make install && ldconfig && \\\n    cd ../ && rm -rf userspace-rcu-0.11.* && \\\n    wget --no-check-certificate -c https://lttng.org/files/lttng-ust/lttng-ust-latest-2.11.tar.bz2 && \\\n    tar -xjf lttng-ust-latest-2.11.tar.bz2 && \\\n    cd lttng-ust-2.11.* && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-man-pages && \\\n    make -j $(nproc) && \\\n    make install && ldconfig && \\\n    cd ../ && rm -rf lttng-* userspace* && rm userspace-rcu-latest-0.11.tar.bz2\n\n# Copy source\nCOPY ./src ${WORKDIR}\nCOPY src/ffmpeg/dependency/*.so /usr/local/lib/\nCOPY src/ffmpeg/dependency/*.pc /usr/local/lib/pkgconfig/\nCOPY src/ffmpeg/dependency/*.h /usr/local/include/\nCOPY src/ffmpeg/dependency/WorkerServer /root\n\n# Install Thrift\nARG THRIFT_VER=0.12.0\nARG THRIFT_REPO=http://archive.apache.org/dist/thrift/0.12.0/thrift-${THRIFT_VER}.tar.gz\nRUN wget -O - ${THRIFT_REPO} | tar xz && \\\n    cd thrift-${THRIFT_VER} && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    patch configure ../external/Disable_cxx11_abi_for_thrift.patch && \\\n    sed -i '21 a #  include <unistd.h>' ./lib/cpp/src/thrift/transport/PlatformSocket.h && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-boost=/usr/local --with-boost-libdir=/usr/local/lib --with-libevent=/usr --with-java=0 && \\\n    make -j`nproc` && \\\n    make install && \\\n    cd ${WORKDIR} && rm -rf ./thrift-${THRIFT_VER}*\n\n# Install openHEVC\nRUN git clone https://github.com/OpenHEVC/openHEVC.git && \\\n    cd openHEVC && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    git config --global user.email \"you@example.com\" && \\\n    git config --global user.name \"Your Name\" && \\\n    git checkout ffmpeg_update && \\\n    git am --whitespace=fix ../external/Update-buffer-operation-and-fix-stream-loop-coredump.patch && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --libdir=/usr/lib64 --disable-sdl2 && \\\n    make -j `nproc` && \\\n    make install && \\\n    cd ${WORKDIR} && rm -rf ./openHEVC\n\n# Build Nginx\nARG NGINX_VER=1.13.1\nARG NGINX_REPO=http://nginx.org/download/nginx-${NGINX_VER}.tar.gz\nRUN wget --no-check-certificate -O - ${NGINX_REPO} | tar xz && \\\n    cd nginx-${NGINX_VER} && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-http_ssl_module && \\\n    make -j `nproc` && \\\n    make install && \\\n    cd ${WORKDIR} && rm -rf ./nginx*\nEXPOSE 443\nEXPOSE 8080\n\n# Build safe string lib\nRUN git clone https://github.com/intel/safestringlib.git && \\\n    cd safestringlib && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    cmake . && \\\n    make -j `nproc` -f Makefile && \\\n    cp libsafestring_shared.so /usr/local/lib/ && \\\n    mkdir -p /usr/local/include/safestringlib/ && \\\n    cp ./include/* /usr/local/include/safestringlib/ && \\\n    cd ${WORKDIR} && rm -rf ./safestringlib\n\n# Configure And Run Nginx\nCOPY nginx_conf /usr/local/nginx/conf\n\n# Build Server\nRUN cd external && \\\n    source /opt/rh/devtoolset-7/enable && \\\n    ./install_FFmpeg.sh server && \\\n    ./build.sh server n && \\\n    mv ../build/server/ffmpeg/ffmpeg ../Sample-Videos && \\\n    cd .. && rm -rf `ls | grep -v Sample-Videos`\n\nCOPY run.sh ${WORKDIR}/Sample-Videos/\nCOPY src/ffmpeg/dependency/*.xml ${WORKDIR}/Sample-Videos/\n\n# Unset proxy if necessary\nRUN if [ -n \"${http_proxy}\" ]; then \\\n    sed -i '$d' /etc/yum.conf && \\\n    sed -i '1,$d' /etc/wgetrc && \\\n    git config --global --unset http.proxy && \\\n    git config --global --unset https.proxy ; \\\n    fi\n"
}