diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/openvisualcloud/immersive-video-sample/OMAF-Sample/server/Dockerfile.base b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/openvisualcloud/immersive-video-sample/OMAF-Sample/server/Dockerfile.base/repaired.Dockerfile
index 6af4ea1..812f3d0 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/openvisualcloud/immersive-video-sample/OMAF-Sample/server/Dockerfile.base
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/openvisualcloud/immersive-video-sample/OMAF-Sample/server/Dockerfile.base/repaired.Dockerfile
@@ -40,7 +40,7 @@ RUN yum -y install rh-ruby23 rh-ruby23-ruby-devel rh-ruby23-rubygem* && \
     gem install -p ${http_proxy} fpm ; \
     else \
     gem install fpm ; \
-    fi
+    fi && rm -rf /var/cache/yum
 
 # Install cmake
 ARG CMAKE_VER=3.12.4
@@ -56,11 +56,11 @@ RUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz
 # Build YASM
 ARG YASM_VER=1.3.0
 ARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz
-RUN  wget --no-check-certificate -O - ${YASM_REPO} | tar xz && \
+RUN wget --no-check-certificate -O - ${YASM_REPO} | tar xz && \
      cd yasm-${YASM_VER} && \
      sed -i "s/) ytasm.*/)/" Makefile.in && \
      source /opt/rh/devtoolset-7/enable && \
-     ./configure --prefix="/usr" --libdir=/usr/lib/x86_64-linux-gnu && \
+     ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix="/usr" --libdir=/usr/lib/x86_64-linux-gnu && \
      make -j$(nproc) && \
      make install && \
      cd ${WORKDIR} && rm -rf ./*
@@ -73,10 +73,10 @@ RUN wget --no-check-certificate ${CURL_REPO} && \
     tar -xvf curl-${CURL_VER}.tar && \
     cd curl-${CURL_VER} && \
     source /opt/rh/devtoolset-7/enable && \
-    ./configure --with-darwinssl && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --with-darwinssl && \
     make -j$(nproc) && \
     make install && \
-    cd ${WORKDIR} && rm -rf ./*
+    cd ${WORKDIR} && rm -rf ./* && rm curl-${CURL_VER}.tar
 
 # Install BOOST
 ARG BOOST_REPO=https://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.gz
@@ -115,17 +115,17 @@ RUN source /opt/rh/devtoolset-7/enable && \
     wget --no-check-certificate -c https://lttng.org/files/urcu/userspace-rcu-latest-0.11.tar.bz2 && \
     tar -xjf userspace-rcu-latest-0.11.tar.bz2 && \
     cd userspace-rcu-0.11.* && \
-    ./configure && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && \
     make -j $(nproc) && \
     make install && ldconfig && \
     cd ../ && rm -rf userspace-rcu-0.11.* && \
-    wget --no-check-certificate -c http://lttng.org/files/lttng-ust/lttng-ust-latest-2.11.tar.bz2 && \
+    wget --no-check-certificate -c https://lttng.org/files/lttng-ust/lttng-ust-latest-2.11.tar.bz2 && \
     tar -xjf lttng-ust-latest-2.11.tar.bz2 && \
     cd lttng-ust-2.11.* && \
-    ./configure --disable-man-pages && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --disable-man-pages && \
     make -j $(nproc) && \
     make install && ldconfig && \
-    cd ../ && rm -rf lttng-* userspace*
+    cd ../ && rm -rf lttng-* userspace* && rm userspace-rcu-latest-0.11.tar.bz2
 
 # Copy source
 COPY ./src ${WORKDIR}
@@ -142,7 +142,7 @@ RUN wget -O - ${THRIFT_REPO} | tar xz && \
     source /opt/rh/devtoolset-7/enable && \
     patch configure ../external/Disable_cxx11_abi_for_thrift.patch && \
     sed -i '21 a #  include <unistd.h>' ./lib/cpp/src/thrift/transport/PlatformSocket.h && \
-    ./configure --with-boost=/usr/local --with-boost-libdir=/usr/local/lib --with-libevent=/usr --with-java=0 && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --with-boost=/usr/local --with-boost-libdir=/usr/local/lib --with-libevent=/usr --with-java=0 && \
     make -j`nproc` && \
     make install && \
     cd ${WORKDIR} && rm -rf ./thrift-${THRIFT_VER}*
@@ -155,7 +155,7 @@ RUN git clone https://github.com/OpenHEVC/openHEVC.git && \
     git config --global user.name "Your Name" && \
     git checkout ffmpeg_update && \
     git am --whitespace=fix ../external/Update-buffer-operation-and-fix-stream-loop-coredump.patch && \
-    ./configure --libdir=/usr/lib64 --disable-sdl2 && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --libdir=/usr/lib64 --disable-sdl2 && \
     make -j `nproc` && \
     make install && \
     cd ${WORKDIR} && rm -rf ./openHEVC
@@ -166,7 +166,7 @@ ARG NGINX_REPO=http://nginx.org/download/nginx-${NGINX_VER}.tar.gz
 RUN wget --no-check-certificate -O - ${NGINX_REPO} | tar xz && \
     cd nginx-${NGINX_VER} && \
     source /opt/rh/devtoolset-7/enable && \
-    ./configure --with-http_ssl_module && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --with-http_ssl_module && \
     make -j `nproc` && \
     make install && \
     cd ${WORKDIR} && rm -rf ./nginx*