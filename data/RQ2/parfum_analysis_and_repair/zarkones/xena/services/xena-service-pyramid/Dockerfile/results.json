{
  "startTime": 1674255976120,
  "endTime": 1674255976719,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 18,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build the project.\nFROM node:16-alpine as builder\n# Bodyparser needs git.\nRUN apk add --no-cache git\n# Set working directory.\nWORKDIR /home/node\n# Copy the versioning files.\nCOPY package*.json ./\n# Install project's dependencies.\nRUN yarn install && yarn cache clean;\n# Copy the source-code.\nCOPY . .\n# Create a production build.\nRUN yarn build\n\n# This step will install the node packages.\nFROM node:16-alpine as installer\n# Bodyparser needs git.\nRUN apk add --no-cache git\n# Set working directory.\nWORKDIR /home/node\n# Copy the versioning files.\nCOPY package*.json ./\n# Install production only node packages.\nRUN yarn install --prod=true --frozen-lockfile && yarn cache clean;\n\n# Build the run-time container.\nFROM node:16-alpine\n# Set basic environment variables.\nENV NODE_ENV production\nENV DB_CONNECTION pg\nENV PG_PORT 5432\nENV PG_USER postgres\nENV PG_DB_NAME xena-pyramid\nENV DRIVE_DISK local\nENV ENV_SILENT true\nENV HOST 0.0.0.0\nENV PORT 60667\nENV BUILD_DESTINATION ./xena-pyramid-software-builds/\n\n# Git is needed for downloading the source codes.\n\nRUN apk update && apk add --no-cache git go\n\n# Lower the privledges. (don't use root user)\nUSER node\n\n# Make the app's directory.\nRUN mkdir -p /home/node/app/\n# Set working directory.\nWORKDIR /home/node/app\n# Copy over the app.\nCOPY --from=builder /home/node/build ./build\nCOPY --from=installer /home/node/node_modules ./build/node_modules\n# Copy the versioning files.\nCOPY package*.json ./build\n# Expose the app.\nEXPOSE 60667\n# Start the app.\nCMD [ \"node\", \"./build/server.js\" ]"
}