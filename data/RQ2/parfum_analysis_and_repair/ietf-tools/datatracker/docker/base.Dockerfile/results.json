{
  "startTime": 1674253809769,
  "endTime": 1674253811165,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 62,
        "columnEnd": 125
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 70,
        "columnStart": 36,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 7,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 70,
        "columnStart": 36,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-bullseye\nLABEL maintainer=\"IETF Tools Team <tools-discuss@ietf.org>\"\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Update system packages\nRUN apt-get update \\\r\n    && apt-get -qy upgrade \\\n    && apt-get -y install --no-install-recommends apt-utils dialog 2>&1 && rm -rf /var/lib/apt/lists/*;\n\n# Add Node.js Source\nRUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash -\n\n# Add Docker Source\nRUN curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --batch --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\nRUN echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\\r\n    $(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install the packages we need\nRUN apt-get update --fix-missing && apt-get install --no-install-recommends -qy \\\n\tapache2-utils \\\n\tapt-file \\\n\tbash \\\n\tbuild-essential \\\n\tcurl \\\n    default-jdk \\\n    docker-ce-cli \\\n\tenscript \\\n\tgawk \\\n    g++ \\\n\tgcc \\\n\tghostscript \\\n\tgit \\\n\tgnupg \\\n\tgraphviz \\\n\tjq \\\n\tless \\\n    libcairo2-dev \\\n    libgtk2.0-0 \\\n    libgtk-3-0 \\\n    libnotify-dev \\\n    libgconf-2-4 \\\n    libgbm-dev \\\n    libnss3 \\\n    libxss1 \\\n    libasound2 \\\n    libxtst6 \\\n\tlibmagic-dev \\\n\tlibmariadb-dev \\\n    libmemcached-tools \\\n\tlocales \\\n    make \\\n\tmariadb-client \\\n    memcached \\\n    nano \\\n    netcat \\\n    nodejs \\\n\tpigz \\\n\tpv \\\n\tpython3-ipython \\\n\tripgrep \\\n\trsync \\\n\trsyslog \\\n    ruby \\\n    ruby-rubygems \\\n\tunzip \\\n\twget \\\n    xauth \\\n    xvfb \\\n    yang-tools \\\n    zsh && rm -rf /var/lib/apt/lists/*;\n\n# Install kramdown-rfc2629 (ruby)\nRUN gem install kramdown-rfc2629\n\n# Install chromedriver\nCOPY docker/scripts/app-install-chromedriver.sh /tmp/app-install-chromedriver.sh\nRUN sed -i 's/\\r$//' /tmp/app-install-chromedriver.sh && \\\r\n    chmod +x /tmp/app-install-chromedriver.sh\nRUN /tmp/app-install-chromedriver.sh\n\n# Fix /dev/shm permissions for chromedriver\nRUN chmod 1777 /dev/shm\n\n# Activate Yarn\nRUN corepack enable\n\n# Get rid of installation files we don't need in the image, to reduce size\nRUN apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*\n\n# \"fake\" dbus address to prevent errors\n# https://github.com/SeleniumHQ/docker-selenium/issues/87\nENV DBUS_SESSION_BUS_ADDRESS=/dev/null\n\n# avoid million NPM install messages\nENV npm_config_loglevel warn\n# allow installing when the main user is root\nENV npm_config_unsafe_perm true\n# disable NPM funding messages\nENV npm_config_fund false\n\n# Set locale to en_US.UTF-8\nRUN echo \"LC_ALL=en_US.UTF-8\" >> /etc/environment && \\\r\n    echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen && \\\r\n    echo \"LANG=en_US.UTF-8\" > /etc/locale.conf && \\\r\n    dpkg-reconfigure locales && \\\r\n    locale-gen en_US.UTF-8 && \\\r\n    update-locale LC_ALL en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# Install idnits\nADD https://raw.githubusercontent.com/ietf-tools/idnits-mirror/main/idnits /usr/local/bin/\nRUN chmod +rx /usr/local/bin/idnits\n\n# Turn off rsyslog kernel logging (doesn't work in Docker)\nRUN sed -i '/imklog/s/^/#/' /etc/rsyslog.conf\n\n# Colorize the bash shell\nRUN sed -i 's/#force_color_prompt=/force_color_prompt=/' /root/.bashrc\n\n# Turn off rsyslog kernel logging (doesn't work in Docker)\nRUN sed -i '/imklog/s/^/#/' /etc/rsyslog.conf\n\n# Fetch wait-for utility\nADD https://raw.githubusercontent.com/eficode/wait-for/v2.1.3/wait-for /usr/local/bin/\nRUN chmod +rx /usr/local/bin/wait-for\n\n# Create assets directory\nRUN mkdir -p /assets\n\n# Create workspace\nRUN mkdir -p /workspace\nWORKDIR /workspace\n"
}