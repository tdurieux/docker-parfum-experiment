{
  "startTime": 1674248166974,
  "endTime": 1674248167919,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 68,
        "columnEnd": 93
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16.15.1-alpine as build\n\nWORKDIR /server-build\n\nRUN apk add --no-cache python3 make gcc g++ libc-dev sqlite-dev\n\nCOPY . /server-build\n\nENV CI=true\nRUN NPM_VERSION=$(node -p 'require(\"./package.json\").engines.npm'); npm i -g npm@$NPM_VERSION && npm cache clean --force;\nRUN npm ci --build-from-source --sqlite=/usr/local\n\n# ---- RUNTIME IMAGE ----------------------------------------------------------\nFROM node:16.15.1-alpine\n\nWORKDIR /app\nLABEL maintainer=\"ferdium\"\n\n# TODO: Shouldn't we set 'NODE_ENV=production' when running in production mode?\nENV HOST=0.0.0.0 PORT=3333 DATA_DIR=\"/data\"\n\nRUN apk add --no-cache sqlite-libs curl su-exec\nRUN apk add --no-cache python3 make g++ py3-pip git py3-pip\n# The next command is needed for sqlite3 install command executed by node-gyp\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\n\nCOPY --from=build /server-build /app\nRUN npm i -g @adonisjs/cli && npm cache clean --force;\n\nHEALTHCHECK --start-period=5s --interval=30s --retries=5 --timeout=3s CMD curl -sSf http://localhost:${PORT}/health\n\nCOPY docker/entrypoint.sh /entrypoint.sh\nCOPY docker/.env /app/.env\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
}