{
  "startTime": 1674249489032,
  "endTime": 1674249489622,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 15,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-alpine3.13\n\nENV PYTHONPATH \"${PYTHONPATH}:/opt/python/lib/python3.9/site-packages\"\nENV PYTHONDONTWRITEBYTECODE 1\nENV TASK_ROOT /app\n\nRUN apk add --no-cache bash build-base git libtool cmake autoconf automake gcc musl-dev postgresql-dev g++ libc6-compat libexecinfo-dev make libffi-dev libmagic libcurl curl-dev rust cargo && rm -rf /var/cache/apk/*\n\n# update pip\nRUN python -m pip install wheel\nRUN python -m pip install --upgrade pip\n\nRUN set -ex && mkdir ${TASK_ROOT}\n\nWORKDIR ${TASK_ROOT}\n\nCOPY requirements.txt ${TASK_ROOT}\nRUN set -ex && pip3 install --no-cache-dir -r requirements.txt\nRUN pip3 install --no-cache-dir awslambdaric newrelic-lambda\n\nCOPY . ${TASK_ROOT}\n\nRUN make generate-version-file\n\nENV PORT=6011\n\nARG GIT_SHA\nENV GIT_SHA ${GIT_SHA}\n\n# (Optional) Add Lambda Runtime Interface Emulator and use a script in the ENTRYPOINT for simpler local runs\nADD https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie /usr/bin/aws-lambda-rie\nCOPY bin/entry.sh /\nCOPY bin/sync_lambda_envs.sh /\nRUN chmod 755 /usr/bin/aws-lambda-rie /entry.sh /sync_lambda_envs.sh\n\n# New Relic lambda layer\nRUN unzip newrelic-layer.zip -d /opt && rm newrelic-layer.zip\n\nENTRYPOINT [ \"/entry.sh\" ]\n\n# Launch the New Relic lambda wrapper which will then launch the app\n# handler defined in the NEW_RELIC_LAMBDA_HANDLER environment variable\nCMD [ \"newrelic_lambda_wrapper.handler\" ]"
}