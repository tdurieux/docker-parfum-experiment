{
  "startTime": 1674221247211,
  "endTime": 1674221248743,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 33,
        "columnEnd": 50
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 12,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 33,
        "columnEnd": 49
      }
    }
  ],
  "repairedDockerfile": "FROM node:12.22 as base_stage\n\nARG HTTP_PROXY\nARG HTTPS_PROXY\n\nENV HTTP_PROXY=${HTTP_PROXY}\nENV HTTPS_PROXY=${HTTPS_PROXY}\n\n\n# > > > > > > > > > > > > > > > > > > > > > STAGE 1:\nFROM base_stage as pre-build_stage\n# Create build directory\nRUN mkdir -p /build\nWORKDIR /build\n\n# use project root level dependencies\nCOPY package.json yarn.lock .npmignore ./\n\n# copy & remove what we don't need\nCOPY /src ./src\nRUN rm -rf /build/src/sdk\n\nRUN npm config set strict-ssl false -g\nRUN npm config set maxsockets 5 -g\n\n# Audit all packages for security vulnerabilities - exit early\nRUN yarn audit --level critical; yarn cache clean; \\\n    yarncode=$?; \\\n    if [ \"$yarncode\" -lt 16 ]; then \\\n        exit 0; \\\n    else \\\n        exit $yarncode; \\\n    fi\n\n\n# > > > > > > > > > > > > > > > > > > > > > STAGE 2:\nFROM pre-build_stage as build_stage\n# install all dependicies\nRUN yarn && yarn cache clean;\n\n# Create and install latest SDK - platform\n# npm pack results in an output that ensure latest platform is installed\nRUN yarn add file:$(npm pack) && yarn cache clean;\n\n\n# > > > > > > > > > > > > > > > > > > > > > STAGE 3:\nFROM build_stage as tidy-up_stage\n\nRUN rm -rf *tgz\n\n# Shrink node_modules\nRUN curl -sf https://gobinaries.com/tj/node-prune | sh\n\n# Prune node-modules\nRUN node-prune\n\n\n# > > > > > > > > > > > > > > > > > > > > > STAGE 4:\nFROM mhart/alpine-node:slim-12.22 as runtime_stage\n# TODO can add in non-root setup here when needed\n\n# Create & set app directory\nRUN mkdir -p /app\nWORKDIR /app\n\n# Copy in pre-built node modules from base stage\nCOPY --from=tidy-up_stage /build .\n\nARG INTEGRATION_TESTS=/test/integration-tests\n\nRUN mkdir -p test/javascript\n# Copy in test script to run\nCOPY ${INTEGRATION_TESTS}/sdk-test-suites/javascript/test_runner.js test/javascript\n\nRUN mkdir -p config/tests/javascript/runner/\nCOPY ${INTEGRATION_TESTS}/config/tests/javascript/runner/ config/tests/javascript/runner/\n\nWORKDIR /app/test/javascript\nCMD [\"node\", \"test_runner.js\"]\n"
}