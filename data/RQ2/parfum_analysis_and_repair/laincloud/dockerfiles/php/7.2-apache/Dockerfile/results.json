{
  "startTime": 1674248375340,
  "endTime": 1674248377220,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 2,
        "columnEnd": 50
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 3,
        "columnEnd": 49
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 12,
        "columnEnd": 64
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 12,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# TAGS 7.2.1-apache-stretch 7.2-apache-stretch 7-apache-stretch apache-stretch 7.2.1-apache 7.2-apache 7-apache apache\nFROM laincloud/debian:stretch\n\n# prevent Debian's PHP packages from being installed\n# https://github.com/docker-library/php/pull/542\nRUN set -eux; \\\n\t{ \\\n\t\techo 'Package: php*'; \\\n\t\techo 'Pin: release *'; \\\n\t\techo 'Pin-Priority: -1'; \\\n\t} > /etc/apt/preferences.d/no-debian-php\n\n# persistent / runtime deps\nENV PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tdpkg-dev \\\n\t\tfile \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tpkg-config \\\n\t\tre2c\nRUN apt-get -qq -y update && apt-get -qq -y install \\\n\t\t$PHPIZE_DEPS \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\txz-utils \\\n\t--no-install-recommends && rm -r /var/lib/apt/lists/*\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN mkdir -p $PHP_INI_DIR/conf.d\n\nRUN apt-get -qq -y update \\\n\t&& apt-get -qq -y --no-install-recommends install \\\n\t\tapache2 \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV APACHE_CONFDIR /etc/apache2\nENV APACHE_ENVVARS $APACHE_CONFDIR/envvars\n\nRUN set -ex \\\n\t\\\n# generically convert lines like\n#   export APACHE_RUN_USER=www-data\n# into\n#   : ${APACHE_RUN_USER:=www-data}\n#   export APACHE_RUN_USER\n# so that they can be overridden at runtime (\"-e APACHE_RUN_USER=...\")\n\t&& sed -ri 's/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/' \"$APACHE_ENVVARS\" \\\n\t\\\n# setup directories and permissions\n\t&& . \"$APACHE_ENVVARS\" \\\n\t&& for dir in \\\n\t\t\"$APACHE_LOCK_DIR\" \\\n\t\t\"$APACHE_RUN_DIR\" \\\n\t\t\"$APACHE_LOG_DIR\" \\\n\t\t/var/www/html \\\n\t; do \\\n\t\trm -rvf \"$dir\" \\\n\t\t&& mkdir -p \"$dir\" \\\n\t\t&& chown -R \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$dir\"; \\\n\tdone\n\n# Apache + PHP requires preforking Apache for best results\nRUN a2dismod mpm_event && a2enmod mpm_prefork\n\n# logs should go to stdout / stderr\nRUN set -ex \\\n\t&& . \"$APACHE_ENVVARS\" \\\n\t&& ln -sfT /dev/stderr \"$APACHE_LOG_DIR/error.log\" \\\n\t&& ln -sfT /dev/stdout \"$APACHE_LOG_DIR/access.log\" \\\n\t&& ln -sfT /dev/stdout \"$APACHE_LOG_DIR/other_vhosts_access.log\"\n\n# PHP files should be handled by PHP, and should be preferred over any other file type\nRUN { \\\n\t\techo '<FilesMatch \\.php$>'; \\\n\t\techo '\\tSetHandler application/x-httpd-php'; \\\n\t\techo '</FilesMatch>'; \\\n\t\techo; \\\n\t\techo 'DirectoryIndex disabled'; \\\n\t\techo 'DirectoryIndex index.php index.html'; \\\n\t\techo; \\\n\t\techo '<Directory /var/www/>'; \\\n\t\techo '\\tOptions -Indexes'; \\\n\t\techo '\\tAllowOverride All'; \\\n\t\techo '</Directory>'; \\\n\t} | tee \"$APACHE_CONFDIR/conf-available/docker-php.conf\" \\\n\t&& a2enconf docker-php\n\nENV PHP_EXTRA_BUILD_DEPS apache2-dev\nENV PHP_EXTRA_CONFIGURE_ARGS --with-apxs2\n\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\nENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\n\nENV PHP_VERSION 7.2.1\nENV PHP_URL=\"https://secure.php.net/get/php-7.2.1.tar.xz/from/this/mirror\" PHP_ASC_URL=\"\"\nENV PHP_SHA256=\"6c6cf82fda6660ed963821eb0525214bb3547e8e29f447b9c15b2d8e6efd8822\" PHP_MD5=\"\"\n\nRUN set -xe; \\\n\n\tfetchDeps=' \\\n\t\twget \\\n\t'; \\\n\tif ! command -v gpg > /dev/null; then \\\n\t\tfetchDeps=\"$fetchDeps \\\n\t\t\tdirmngr \\\n\t\t\tgnupg \\\n\t\t\"; \\\n\tfi; \\\n\tapt-get -qq -y update; \\\n\tapt-get -qq -y --no-install-recommends install $fetchDeps; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tmkdir -p /usr/src; rm -rf /usr/src \\\n\tcd /usr/src; \\\n\n\twget -q -O php.tar.xz \"$PHP_URL\"; \\\n\n\tif [ -n \"$PHP_SHA256\" ]; then \\\n\t\techo \"$PHP_SHA256  *php.tar.xz\" | sha256sum -c -; \\\n\tfi; \\\n\tif [ -n \"$PHP_MD5\" ]; then \\\n\t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \\\n\tfi; \\\n\n\tif [ -n \"$PHP_ASC_URL\" ]; then \\\n\t\twget -q -O php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n\t\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\t\tfor key in $GPG_KEYS; do \\\n\t\t\tgpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" || \\\n            gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\" || \\\n            gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\t\tdone; \\\n\t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n\t\trm -rf \"$GNUPGHOME\"; \\\n\tfi; \\\n\n\tapt-get -qq -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false purge $fetchDeps\n\nCOPY docker-php-source /usr/local/bin/\n\nRUN set -eux; \\\n\t\\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get -qq -y update; \\\n\tapt-get -qq -y --no-install-recommends install \\\n\t\tlibargon2-0-dev \\\n\t\tlibcurl4-openssl-dev \\\n\t\tlibedit-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tlibxml2-dev \\\n\t\tzlib1g-dev \\\n\t\t${PHP_EXTRA_BUILD_DEPS:-} \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\texport \\\n\t\tCFLAGS=\"$PHP_CFLAGS\" \\\n\t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\tLDFLAGS=\"$PHP_LDFLAGS\" \\\n\t; \\\n\tdocker-php-source extract; \\\n\tcd /usr/src/php; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \\\n# https://bugs.php.net/bug.php?id=74125\n\tif [ ! -d /usr/include/curl ]; then \\\n\t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \\\n\tfi; \\\n\t./configure \\\n    --quiet \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\t\t\\\n\t\t--disable-cgi \\\n\t\t\\\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n\t\t--enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n\t\t--enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n\t\t--enable-mysqlnd \\\n# https://wiki.php.net/rfc/argon2_password_hash (7.2+)\n\t\t--with-password-argon2 \\\n\t\t\\\n\t\t--with-curl \\\n\t\t--with-libedit \\\n\t\t--with-openssl \\\n\t\t--with-zlib \\\n\t\t\\\n# bundled pcre does not support JIT on s390x\n# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT\n\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n\t\t--with-libdir=\"lib/$debMultiarch\" \\\n\t\t\\\n\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \\\n\t; \\\n\tmake --quiet -j \"$(nproc)\"; \\\n\tmake install; \\\n\tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \\\n\tmake clean; \\\n\tcd /; \\\n\tdocker-php-source delete; \\\n\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\tfind /usr/local -type f -executable -exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { print $(NF-1) }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t; \\\n\tapt-get -qq -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false purge; \\\n\t\\\n\tphp --version; \\\n\t\\\n# https://github.com/docker-library/php/issues/443\n\tpecl update-channels; \\\n\trm -rf /tmp/pear ~/.pearrc\n\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n\nCOPY apache2-foreground /usr/local/bin/\nWORKDIR /var/www/html\n\nEXPOSE 80\nCMD [\"docker-php-entrypoint\",\"apache2-foreground\"]\n"
}