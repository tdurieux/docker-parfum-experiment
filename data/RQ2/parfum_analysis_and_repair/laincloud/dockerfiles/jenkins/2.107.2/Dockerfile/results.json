{
  "startTime": 1674215631203,
  "endTime": 1674215632149,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM laincloud/openjdk:8-jdk\n\nRUN apt-get update && apt-get install --no-install-recommends -y git curl && rm -rf /var/lib/apt/lists/*\n\nARG http_port=8080\nARG agent_port=50000\n\nENV JENKINS_HOME /jenkins\nENV JENKINS_SLAVE_AGENT_PORT ${agent_port}\n\n# Jenkins home directory is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME /jenkins\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n\n# jenkins version being bundled in this docker image\nENV JENKINS_VERSION 2.107.2\n\n# Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n\n# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n# see https://github.com/docker/docker/issues/8331\nRUN sha=$(curl -q -fsSL \"https://repo.jenkins-ci.org/releases/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war.sha256\") \\\n  && curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n  && echo \"${sha}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\n\nENV JENKINS_UC https://updates.jenkins.io\nENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental\n\n# for main web interface:\nEXPOSE ${http_port}\n\n# will be used by attached slave agents:\nEXPOSE ${agent_port}\n\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\n\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCMD [\"/usr/local/bin/jenkins.sh\"]\n\n# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh"
}