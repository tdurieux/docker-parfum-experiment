{
  "startTime": 1674218779192,
  "endTime": 1674218780463,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "## docker build -t derbynet_server -f installer/docker/Dockerfile .\n\nFROM ubuntu\nLABEL org.opencontainers.image.authors=jeffpiazza\nLABEL description=\"DerbyNet is the new standard in race management software for Pinewood Derby events.  \\\nVisit http://jeffpiazza.github.io/derbynet/ for more information about DerbyNet.\"\n\n# I don't know when PHP picked up a dependency on tzdata and requires it be\n# configured, but that seems to be the case now.  Eastern time is convenient for\n# me, but may not be the best choice for everyone.\nENV TZ=America/New_York\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nRUN apt update\nRUN apt install --no-install-recommends -y php-fpm php-curl php-gd php-sqlite3 && rm -rf /var/lib/apt/lists/*;\n# php-odbc installs OK on a separate line, but not when added to the previous line.\n# No idea why\nRUN apt install --no-install-recommends -y php-odbc && rm -rf /var/lib/apt/lists/*;\nRUN apt install --no-install-recommends -y nginx ssl-cert && rm -rf /var/lib/apt/lists/*;\nRUN apt install --no-install-recommends -y supervisor && rm -rf /var/lib/apt/lists/*;\n\n##################################################\n# from debian/build.xml (debian-stage-website target):\n\nARG WWW_ROOT=/var/www/html\n\nWORKDIR $WWW_ROOT\n\nCOPY website/ .\nRUN rm -rf ./local/* ./index*.html\n\nWORKDIR /etc/nginx/derbynet\nCOPY installer/nginx-configs/root/ .\n\n# The set-timeout.sh script may be needed to prevent timeouts under automated testing.\n# Under \"normal\" production use, stock timeouts are probably OK.\nCOPY installer/docker/set-timeout.sh /usr/local/bin\n\n##################################################\n# Post-install actions from Debian derbynet_server installer:\n\nRUN test -d $WWW_ROOT/local && rm -rf $WWW_ROOT/local\n\nRUN mkdir -m 777 /var/lib/derbynet\nRUN echo '<?php $default_file_path = \"/var/lib/derbynet\"; ?>' > /var/lib/derbynet/default-file-path.inc\n\n# How large are the pictures you want to upload?  8M covers an 18-megapixel\n# photo.\nENV MAX_UPLOAD_SIZE=16M\n\nRUN for INI in `find /etc/php -name php.ini` ; do \\\n    sed -i.pre-derbynet \\\n    -e \"s#^upload_max_filesize = [28]M#upload_max_filesize = $MAX_UPLOAD_SIZE#\" \\\n    -e \"s#^post_max_size = [2-8]M#post_max_size = $MAX_UPLOAD_SIZE#\" \\\n    -e \"s#^memory_limit = 128M#memory_limit = 256M#\" \\\n    -e \"s#^session.gc_maxlifetime = 1440#session.gc_maxlifetime = 28800#\" \\\n    $INI ; \\\n    done\n\nRUN sed -i \\\n    -e \"s#php.*-fpm.sock#php/php`ls /etc/php | tail -n 1`-fpm.sock#\" \\\n    -e \"s#CONFIG_DIR .*#CONFIG_DIR /var/lib/derbynet;#\" \\\n    /etc/nginx/derbynet/location.snippet\n\nRUN sed -i -e '/^[ \\t]*location \\/ {/ i\\\n  include derbynet/location.snippet; \\\n\n' /etc/nginx/sites-available/default\n\n# This exposes the self-signed (\"snakeoil\") certificates for the nginx server,\n# so a laptop user can just expose port 443.\n#\n\n# If instead you have a \"legitimate\" certifcate for a custom domain, you\n# probably also already have a web server; in that case, configure your existing\n# web server to proxy TLS derbynet requests through to the docker container's\n# port 80, and don't bother exposting the docker container's 443 port.  E.g.,\n# for nginx, assuming your derbynet_server container is listening on port 9000,\n#\n# location /my-derbynet {\n#    proxy_pass  http://127.0.0.1:9000/;\n# }\n#\nRUN sed -i \\\n    -e 's!# *\\(listen 443 ssl .*\\)!\\1!' \\\n    -e 's!# *\\(listen [::]:443 ssl .*\\)!\\1!' \\\n    -e 's!# *\\(include snippets/snakeoil.conf;\\)!\\1!' \\\n    -e '/index\\.php/! s!\\( *index *\\)!\\1 index.php !' \\\n    /etc/nginx/sites-available/default\n\n##################################################\n\nVOLUME /var/lib/derbynet\n\nEXPOSE 80 443\n\nCOPY installer/docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\nRUN sed -i \\\n   -e \"s#@PHP-FPM@#$(ls /usr/sbin/php-fpm* | tail -n 1)#\" \\\n   /etc/supervisor/conf.d/supervisord.conf\n\nCMD [\"/usr/bin/supervisord\"]\n"
}