{
  "startTime": 1674216057938,
  "endTime": 1674216058776,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multistage build to optimize the final Docker image size\n\n###### Stage 1 - Install deps and compile the NextJS app\nFROM node:lts as build-stage\nLABEL author=\"%%AUTHOR%%\"\n\nCOPY . /app\nWORKDIR /app\n\n# We run npm install here instead of copying\n# in a compiled build from an external source\n# because node_modules often compiles with\n# CPU/OS-specific binaries\n# node_modules is deleted here. We can't exclude\n# it using .dockerignore because we need the\n# docker-compiled version in the docker image\nRUN rm -rf node_modules &&\\\n    npm install &&\\\n    npm run build && \\\n    npm run export && npm cache clean --force;\n\n###### Stage 2 - Run production webserver on nginx\n# We use a non-root version of Nginx for security reasons:\n# https://hub.docker.com/r/nginxinc/nginx-unprivileged\nFROM nginxinc/nginx-unprivileged:alpine\n\nARG PORT=3000\n\n# Add app-specific configs and files\nCOPY config/nginx.conf /etc/nginx/conf.d/default.conf\nCOPY --from=build-stage /app/out /usr/share/nginx/html\n\n# Non-root users are not allowed to listen on priviliged ports so replace default 80 with ${PORT}\nUSER root\nRUN sed -i.bak \"s/listen\\(.*\\)80;/listen ${PORT};/\" /etc/nginx/conf.d/default.conf\nUSER 101\nEXPOSE $PORT\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}