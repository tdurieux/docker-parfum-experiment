{
  "startTime": 1674256056751,
  "endTime": 1674256057943,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 26,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 9,
        "columnEnd": 140
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 9,
        "columnEnd": 140
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 6,
        "columnStart": 9,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM monogramm/docker-erpnext:11-debian\n\n# Install Google Chrome & Chrome WebDriver for UI tests\nRUN set -ex; \\\n    sudo apt-get update -q; \\\n    sudo apt-get install -y --no-install-recommends \\\n        unzip \\\n    ; rm -rf /var/lib/apt/lists/*; \\\n    CHROMEDRIVER_VERSION=$( curl -f -sS chromedriver.storage.googleapis.com/LATEST_RELEASE) ; \\\n    sudo mkdir -p \"/opt/chromedriver-${CHROMEDRIVER_VERSION}\"; \\\n    sudo curl -f -sS -o /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip; \\\n    sudo unzip -qq /tmp/chromedriver_linux64.zip -d \"/opt/chromedriver-${CHROMEDRIVER_VERSION}\"; \\\n    sudo rm /tmp/chromedriver_linux64.zip; \\\n    sudo chmod +x \"/opt/chromedriver-${CHROMEDRIVER_VERSION}/chromedriver\"; \\\n    sudo ln -fs \"/opt/chromedriver-${CHROMEDRIVER_VERSION}/chromedriver\" /usr/local/bin/chromedriver; \\\n    export PATH=\"$PATH;/usr/local/bin/chromedriver\"\n\n# Build environment variables\nENV TESSDATA_PREFIX=/home/$FRAPPE_USER/tessdata\n\n# Install Tesseract dependencies\nRUN set -ex; \\\n    sudo apt-get update -q; \\\n    sudo apt-get install -y --no-install-recommends \\\n        ghostscript \\\n        imagemagick \\\n        libmagickwand-dev \\\n        tesseract-ocr \\\n        libtesseract-dev \\\n        libleptonica-dev \\\n        pkg-config \\\n    ; \\\n    sudo rm -rf /var/lib/apt/lists/*; \\\n    mkdir -p \"$TESSDATA_PREFIX\"; \\\n    sudo chown -R \"${FRAPPE_USER}:${FRAPPE_USER}\" \"${TESSDATA_PREFIX}\" ; \\\n    curl -f -sS -o \"${TESSDATA_PREFIX}/eng.traineddata\" https://raw.github.com/tesseract-ocr/tessdata/master/eng.traineddata; \\\n    curl -f -sS -o \"${TESSDATA_PREFIX}/equ.traineddata\" https://raw.github.com/tesseract-ocr/tessdata/master/equ.traineddata; \\\n    curl -f -sS -o \"${TESSDATA_PREFIX}/osd.traineddata\" https://raw.github.com/tesseract-ocr/tessdata/master/osd.traineddata; \\\n    curl -f -sS -o \"${TESSDATA_PREFIX}/fra.traineddata\" https://raw.github.com/tesseract-ocr/tessdata/master/fra.traineddata; \\\n    curl -f -sS -o \"${TESSDATA_PREFIX}/deu.traineddata\" https://raw.github.com/tesseract-ocr/tessdata/master/deu.traineddata; \\\n    curl -f -sS -o \"${TESSDATA_PREFIX}/spa.traineddata\" https://raw.github.com/tesseract-ocr/tessdata/master/spa.traineddata; \\\n    curl -f -sS -o \"${TESSDATA_PREFIX}/por.traineddata\" https://raw.github.com/tesseract-ocr/tessdata/master/por.traineddata; \\\n    sudo chmod -R 755 \"${TESSDATA_PREFIX}\" ; \\\n    sudo sed -i \\\n        -e 's/rights=\"none\" pattern=\"PDF\"/rights=\"read\" pattern=\"PDF\"/g' \\\n        /etc/ImageMagick*/policy.xml \\\n    ; \\\n    sudo mkdir -p \"/home/${FRAPPE_USER}\"/frappe-bench/logs; \\\n    sudo touch \"/home/${FRAPPE_USER}\"/frappe-bench/logs/bench.log; \\\n    sudo chmod 777 \\\n        \"/home/${FRAPPE_USER}\"/frappe-bench/logs \\\n        \"/home/${FRAPPE_USER}\"/frappe-bench/logs/* \\\n    ;\n\n# Build environment variables\nARG FRAPPE_APP_TO_TEST=${FRAPPE_APP_TO_TEST}\n\n# Copy the whole repository to app folder for manual install\nCOPY --chown=frappe:frappe . \"/home/${FRAPPE_USER}/frappe-bench/apps/${FRAPPE_APP_TO_TEST}\"\n\n# Install current app\nRUN set -ex; \\\n    ./env/bin/pip install -q -U -e \"./apps/${FRAPPE_APP_TO_TEST}\"; \\\n    bench build --app \"${FRAPPE_APP_TO_TEST}\"\n\nVOLUME \"/home/${FRAPPE_USER}/frappe-bench/apps/${FRAPPE_APP_TO_TEST}/public\"\n"
}