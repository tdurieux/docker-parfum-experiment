{
  "startTime": 1674255909937,
  "endTime": 1674255910832,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build environment for OpenSync native target\n# Base: Ubuntu 16.04 64bit (official image)\nFROM ubuntu:16.04\n\n# Run apt-get update at each install step because of docker cache\nARG PKGINSTALL=\"eval apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install\"\n\n# Python\nRUN $PKGINSTALL python python3 python3-pip python3-dev python3-pexpect python3-tabulate \\\n                python3-termcolor python3-paramiko python3-pydot\nRUN pip3 install --no-cache-dir kconfiglib 'MarkupSafe<2.0.0' 'Jinja2<3.0.0'\n\n# Development packages\nRUN $PKGINSTALL build-essential gcc g++ gdb lldb-6.0 clang-6.0 flex bison gettext texinfo patch \\\n                ncurses-dev perl automake autoconf libtool cmake zlib1g-dev liblzo2-dev uuid-dev \\\n                openssl libssl-dev binutils binutils-gold bzip2 make pkg-config libc6-dev subversion \\\n                libmosquitto-dev libev4 libev-dev libjansson4 libjansson-dev libncurses5-dev libpcap-dev \\\n                openvswitch-switch libcurl4-openssl-dev libmxml-dev libmnl-dev libzmq3-dev patchutils \\\n                sharutils wget unzip rsync git-core gawk dos2unix ccache keychain vim file tree\n\n# Install protobuf-3.14.0\nWORKDIR /usr/src\nRUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protobuf-cpp-3.14.0.tar.gz\nRUN md5sum protobuf-cpp*.tar.gz >> remote-protobuf-cpp.md5\nCOPY protobuf-cpp.md5 local.md5\nRUN diff remote-protobuf-cpp.md5 local.md5\nRUN tar xvf protobuf-cpp-3.14.0.tar.gz \\\n    && cd protobuf-3.14.0 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && make V=s -j $(nproc) && make V=s -j $(nproc) install && rm protobuf-cpp-3.14.0.tar.gz\n\n# Install protobuf-c-1.3.3\nWORKDIR /usr/src\nRUN wget https://github.com/protobuf-c/protobuf-c/releases/download/v1.3.3/protobuf-c-1.3.3.tar.gz\nRUN md5sum protobuf-c-*.tar.gz >> remote-protobuf-c.md5\nCOPY protobuf-c.md5 local.md5\nRUN diff remote-protobuf-c.md5 local.md5\nRUN tar xvf protobuf-c-1.3.3.tar.gz \\\n    && cd protobuf-c-1.3.3 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && make V=s -j $(nproc) && make V=s -j $(nproc) install && rm protobuf-c-1.3.3.tar.gz\n\n# Install curl-7.68.0 with http/2 support\nRUN $PKGINSTALL nghttp2 libnghttp2-dev\nRUN wget https://curl.haxx.se/download/curl-7.68.0.tar.gz\nRUN md5sum curl-*.tar.gz >> remote-curl.md5\nCOPY curl.md5 local.md5\nRUN diff remote-curl.md5 local.md5\nRUN tar xzf curl-7.68.0.tar.gz \\\n    && cd curl-7.68.0 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-nghttp2 --prefix=/usr/local --with-ssl \\\n    && make V=s -j $(nproc) \\\n    && make V=s -j $(nproc) install \\\n    && ldconfig && rm curl-7.68.0.tar.gz\n\n# Install netlink library nl-3\nRUN $PKGINSTALL libnl-3-dev libnl-route-3-dev\n\n# OVS directory setup\nRUN mkdir -p /var/run/openvswitch\nRUN chmod 0777 /var/run/openvswitch\n\n# Open interactive bash\nCMD bash -i\n"
}