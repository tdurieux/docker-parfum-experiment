{
  "startTime": 1674253658937,
  "endTime": 1674253660027,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 150
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 154,
        "columnEnd": 202
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 85,
        "columnEnd": 125
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 112,
        "columnEnd": 143
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 4
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 4
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG debian_version=7\nFROM debian:$debian_version\n# needed to do again after FROM due to docker limitation\nARG debian_version\n\nENV SOURCE_DIR /root/source\nENV CMAKE_VERSION_BASE 3.8\nENV CMAKE_VERSION $CMAKE_VERSION_BASE.2\nENV NINJA_VERSION 1.7.2\nENV GO_VERSION 1.9.3\nENV GCC_VERSION 4.9.4\n\n# install dependencies\nRUN echo \"deb http://archive.debian.org/debian/ wheezy contrib main non-free\" > /etc/apt/sources.list && \\\n echo \"deb-src http://archive.debian.org/debian/ wheezy contrib main non-free\" >> /etc/apt/sources.list && \\ \n apt-get -y update && apt-get --force-yes --no-install-recommends -y install \\\n autoconf \\\n automake \\\n bzip2 \\\n cmake \\\n curl \\\n gcc \\\n gcc-multilib \\\n git \\\n gnupg \\\n g++ \\\n libapr1-dev \\\n libssl1.0.0=1.0.1e-2+deb7u20 \\\n libssl-dev \\\n libtool \\\n libc-bin=2.13-38+deb7u10 \\\n libc6=2.13-38+deb7u10 libc6-dev \\\n make \\\n perl-base=5.14.2-21+deb7u3 \\\n tar \\\n unzip \\\n wget \\\n xutils-dev \\\n zip && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir $SOURCE_DIR\nWORKDIR $SOURCE_DIR\n\nRUN curl -f -q -k https://cmake.org/files/v$CMAKE_VERSION_BASE/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz --output cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz && tar zxf cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz && mv cmake-$CMAKE_VERSION-Linux-x86_64 /opt/ && echo 'PATH=/opt/cmake-$CMAKE_VERSION-Linux-x86_64/bin:$PATH' >> ~/.bashrc && rm cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz\n\nRUN wget -q https://github.com/ninja-build/ninja/releases/download/v$NINJA_VERSION/ninja-linux.zip && unzip ninja-linux.zip && mkdir -p /opt/ninja-$NINJA_VERSION/bin && mv ninja /opt/ninja-$NINJA_VERSION/bin && echo 'PATH=/opt/ninja-$NINJA_VERSION/bin:$PATH' >> ~/.bashrc\n\nRUN wget -q https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz && tar zxf go$GO_VERSION.linux-amd64.tar.gz && mv go /opt/ && echo 'PATH=/opt/go/bin:$PATH' >> ~/.bashrc && echo 'export GOROOT=/opt/go/' >> ~/.bashrc && rm go$GO_VERSION.linux-amd64.tar.gz\n\nRUN wget -q https://github.com/netty/netty-tcnative/releases/download/gcc-precompile/gcc-$GCC_VERSION.tar.gz && tar zxf gcc-$GCC_VERSION.tar.gz && mv gcc-$GCC_VERSION /opt/ && echo 'PATH=/opt/gcc-$GCC_VERSION/bin:$PATH' >> ~/.bashrc && echo 'export CC=/opt/gcc-$GCC_VERSION/bin/gcc' >> ~/.bashrc && echo 'export CXX=/opt/gcc-$GCC_VERSION/bin/g++' >> ~/.bashrc && rm gcc-$GCC_VERSION.tar.gz\n\nRUN rm -rf $SOURCE_DIR\n\n# Downloading and installing SDKMAN!\nRUN curl -f -s \"https://get.sdkman.io\" | bash\n\nARG java_version=\"8.0.302-zulu\"\nENV JAVA_VERSION $java_version\n\n# Installing Java removing some unnecessary SDKMAN files\nRUN bash -c \"source $HOME/.sdkman/bin/sdkman-init.sh && \\\n    yes | sdk install java $JAVA_VERSION && \\\n    rm -rf $HOME/.sdkman/archives/* && \\\n    rm -rf $HOME/.sdkman/tmp/*\"\n\nRUN echo 'export JAVA_HOME=\"/root/.sdkman/candidates/java/current\"' >> ~/.bashrc\nRUN echo 'PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc\n\nWORKDIR /opt\nRUN curl -f https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | tar -xz\nRUN echo 'PATH=/opt/apache-maven-3.6.3/bin/:$PATH' >> ~/.bashrc\n\n# Prepare our own build\nENV PATH /opt/apache-maven-3.6.3/bin/:$PATH\nENV JAVA_HOME /jdk/\n"
}