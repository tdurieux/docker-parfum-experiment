{
  "startTime": 1674250555460,
  "endTime": 1674250556586,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for EMUX-Docker\n# by Saumil Shah\n\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at https://mozilla.org/MPL/2.0/.\n\n# EMUX (formerly ARMX) by Saumil Shah\n# https://emux.exploitlab.net/\n\n#FROM alpine:latest\n\n# Temporarily freezing the Alpine version to 3.15.4 until I can figure\n# out the Python2 replacement situation\nFROM alpine:3.15.4\n\n# Install packages\nRUN apk update\nRUN apk add \\\n\tbash sudo pv tar dialog iptables curl wget tmux git \\\n\tvim nano asciinema \\\n\tcoreutils util-linux \\\n\tiputils iproute2 \\\n\tbuild-base \\\n\tpython3 python3-dev py3-pip python2 \\\n\topenssh-client openssl openssl-dev \\\n\tlibffi-dev \\\n\txz-dev \\\n\tcargo \\\n\topenrc \\\n\tgdb-multiarch \\\n\tnfs-utils squashfs-tools cramfs \\\n\tdnsmasq \\\n\ttinyproxy \\\n\tsocat \\\n\tnetcat-openbsd \\\n\tbusybox-extras \\\n\t--no-cache\n\n# Install Python packages\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir wheel\nRUN pip install --no-cache-dir cstruct\nRUN pip install --no-cache-dir ropper\n\n# Uncomment if you want to install pwntools\n# NOTE: *** It will take a very long time to build ***\n#       *** but it works ***\n#\n#RUN pip install pwntools\n\n# Install packages/repos from Github\nWORKDIR /tmp\nRUN git clone --depth 1 https://github.com/sviehb/jefferson.git\nRUN git clone --depth 1 https://github.com/ReFirmLabs/binwalk.git\n\nWORKDIR /tmp/jefferson\nRUN python3 setup.py install\n\nWORKDIR /tmp/binwalk\nRUN python3 setup.py install\n\n# Copy network tunnel startup script, NFS exports, tinyproxy config and tinyproxy startup script\nCOPY files/etc/local.d/* /etc/local.d/\nCOPY files/etc/exports /etc/exports\nCOPY files/etc/tinyproxy/* /etc/tinyproxy/\nCOPY files/sbin/* /sbin/\n\n# Transplanting cramfsck because the one in the package is broken\n# Transplanting unsquashfs (static binary) because the existing one\n#   doesn't have LZMA support. This one is specially compiled with it.\nRUN chmod 755 /etc/local.d/*.start /sbin/cramfsck /sbin/unsquashfs\n\n# Create an r0 user for all userland work\nRUN adduser --disabled-password --gecos \"\" r0\nRUN echo 'r0 ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n\n# Set r0's shell to bash\nRUN sed -i 's!/bin/ash!/bin/bash!g' /etc/passwd\n\n# Set up the home directory of r0 user\nWORKDIR /home/r0\n\n# Add bashrc, ssh configs, etc\nCOPY --chown=r0 files/home/r0/bashrc .bashrc\nCOPY --chown=r0 files/home/r0/bash_profile .bash_profile\nCOPY --chown=r0 files/home/r0/tmux.conf .tmux.conf\nCOPY --chown=r0 files/home/r0/ssh .ssh\nCOPY --chown=r0 files/home/r0/dircolors .dircolors\nCOPY --chown=r0 files/home/r0/gdbinit .gdbinit\nCOPY --chown=r0 files/home/r0/gdbinit-gef.py .gdbinit-gef.py\nCOPY --chown=r0 files/home/r0/gef.rc .gef.rc\n\nCOPY --chown=root files/home/r0/bashrc /root/.bashrc\nCOPY --chown=root files/home/r0/bash_profile /root/.bash_profile\nCOPY --chown=root files/home/r0/tmux.conf /root/.tmux.conf\nCOPY --chown=root files/home/r0/ssh /root/.ssh\nCOPY --chown=root files/home/r0/dircolors /root/.dircolors\n\nRUN chmod 600 /home/r0/.ssh/id_rsa /home/r0/.ssh/config\nRUN chmod 600 /root/.ssh/id_rsa\n\n# Set up the docker entrypoint script\nCOPY ./docker-entrypoint.sh /usr/local/bin\n\nUSER r0\n\nENV TERM xterm-256color\nENV LANG C.UTF-8\nENV CHARSET UTF-8\nENV LC_COLLATE C\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n"
}