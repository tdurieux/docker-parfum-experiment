{
  "startTime": 1674250751282,
  "endTime": 1674250752594,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 9,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# 此 Dockerfile 使用了多阶段构建，同时构建了 PHP 及 NGINX 两个镜像\n#\n# @link https://docs.docker.com/engine/reference/builder/\n# @link https://docs.docker.com/develop/develop-images/multistage-build/\n# @link https://laravel-news.com/multi-stage-docker-builds-for-laravel\n#\n# 只有 git 打了 tag 才能将对应的镜像部署到生产环境\n#\n# 为了方便读者阅读没有引入过多的变量，实际使用时可以将公共的部分用变量代替\n#\n# !! 搜索 /app/laravel-docker 替换为自己的项目目录 !!\n# 此 Dockerfile 专为 CI 环境设计（国外），请通过 --build-arg ARG=value 设置国内镜像\n#\n# $ docker buildx build --target=laravel --load -t khs1994/laravel:7 -f Dockerfile.buildkit --build-arg NODE_REGISTRY=https://registry.npmmirror.com --build-arg CI=false .\n\nARG NODE_VERSION=18.2.0\nARG PHP_VERSION=8.1.1\nARG NGINX_VERSION=1.21.3-alpine\nARG DOCKER_HUB_USERNAME=khs1994\n\n# 1.前端构建\nFROM node:${NODE_VERSION:-18.2.0}-alpine as frontend\n\nARG NODE_REGISTRY=https://registry.npmjs.org\n\n# COPY package.json webpack.mix.js yarn.lock /app/\n# COPY package.json webpack.mix.js package-lock.json /app/\nCOPY --link package.json /app/\n\nRUN --mount=type=cache,target=/app/node_modules,id=laravel-docker_node_modules \\\n    --mount=type=cache,target=/root/.npm,id=npm_caches \\\n      set -x ; \\\n      cd /app \\\n      # && yarn install \\\n      && npm install --registry=${NODE_REGISTRY} && npm cache clean --force;\n\nCOPY --link resources/ /app/resources/\n\nCOPY --link webpack.mix.js tailwind.config.js /app/\n\nRUN --mount=type=cache,target=/app/node_modules,id=laravel-docker_node_modules \\\n      set -x ; \\\n      cd /app \\\n# File.exists('./artisan'); 如果 artisan 文件存在，则说明是 laravel 项目\n      && touch artisan \\\n      && mkdir -p public \\\n      # && yarn production \\\n      && npm run production\n\n# 2.安装 composer 依赖\nFROM ${DOCKER_HUB_USERNAME}/php:8.1.1-composer-alpine as composer\n\n# COPY composer.json composer.lock /app/\nCOPY --link composer.json /app/\nCOPY --link database/ /app/database/\n\nARG CI=true\n\nRUN --mount=type=cache,target=/tmp,id=laravel_caches \\\n      set -x ; \\\n      cd /app \\\n      && composer config -g repos.packagist composer https://mirrors.aliyun.com/composer/ \\\n      && if [ $CI = 'true' ];then composer config -g --unset repos.packagist; fi \\\n      && composer install --no-dev \\\n             --ignore-platform-reqs \\\n             --prefer-dist \\\n             --no-interaction \\\n             --no-scripts \\\n             --no-plugins \\\n             --optimize-autoloader\n\n# 3.将项目打入 PHP 镜像\n# $ docker build -t khs1994/laravel:TAG --target=laravel .\nFROM ${DOCKER_HUB_USERNAME}/php:${PHP_VERSION}-s6-alpine as laravel\n\nCOPY --link . /app/laravel-docker/\nCOPY --from=composer --link /app/vendor/ /app/laravel-docker/vendor/\nCOPY --from=frontend --link /app/public/js/ /app/laravel-docker/public/js/\nCOPY --from=frontend --link /app/public/css/ /app/laravel-docker/public/css/\nCOPY --from=frontend --link /app/public/mix-manifest.json /app/laravel-docker/public/mix-manifest.json\n\nVOLUME /app/laravel-docker/storage/framework/views\n\nENTRYPOINT [ \"sh\", \"/app/laravel-docker/.docker/docker-entrypoint.sh\" ]\n\nCMD [\"php-fpm\", \"-R\", \"-F\"]\n\n# rootless 镜像\nFROM ${DOCKER_HUB_USERNAME}/php:${PHP_VERSION}-s6-alpine as laravel-rootless\n\nARG CI=true\n\n# https://github.com/gliderlabs/docker-alpine/issues/381\nRUN set -x; \\\n    if ! [ \"$CI\" = 'true' ];then \\\n        sed -i \"s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g\" /etc/apk/repositories; \\\n    fi \\\n    && apk add --no-cache dcron libcap \\\n    && chown www-data:www-data /usr/sbin/crond \\\n    && setcap cap_setgid=ep /usr/sbin/crond\n\nRUN --mount=type=bind,target=/tmp/build-context,ro \\\n    --mount=type=cache,from=laravel,source=/app/laravel-docker,target=/tmp/laravel-docker,ro \\\n    set -x \\\n    && cp -a /tmp/build-context/. /app/laravel-docker/ \\\n    && cp -a /tmp/laravel-docker/. /app/laravel-docker/ \\\n    \\\n    && chmod -R +x /app/laravel-docker/.docker-rootless/s6 \\\n    && mkdir -p /app/laravel-docker/storage/app \\\n                /app/laravel-docker/storage/framework/views \\\n    && chown -R www-data:www-data /app/laravel-docker/public \\\n                                  /app/laravel-docker/.docker-rootless/s6 \\\n    && chown www-data:www-data \\\n                               /app/laravel-docker/bootstrap/cache \\\n                               /app/laravel-docker/storage/app \\\n                               /app/laravel-docker/storage/framework/views \\\n    \\\n    && echo 'rootless' > /app/laravel-docker/storage/app/rootless.txt\n\nUSER www-data\n\nENTRYPOINT [ \"sh\", \"/app/laravel-docker/.docker-rootless/docker-entrypoint.sh\" ]\n\n# 4.将 PHP 项目打入 NGINX 镜像\n# Nginx 配置文件统一通过 configs 管理，严禁将配置文件打入镜像\n# $ docker build -t khs1994/laravel:TAG-nginx .\n\nFROM nginx:${NGINX_VERSION} as nginx\n\nCOPY --from=laravel --link /app/laravel-docker/public /app/laravel-docker/public\n\nADD https://raw.githubusercontent.com/khs1994-docker/lnmp-nginx-conf-demo/master/wait-for-php.sh /wait-for-php.sh\n\nRUN set -x ; rm -rf /etc/nginx/conf.d\n\nENTRYPOINT [\"sh\", \"/wait-for-php.sh\"]\n"
}