{
  "startTime": 1674254100671,
  "endTime": 1674254101966,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  g++ \\\n  make \\\n  ninja-build \\\n  file \\\n  curl \\\n  ca-certificates \\\n  python3 \\\n  git \\\n  cmake \\\n  sudo \\\n  gdb \\\n  xz-utils \\\n  bzip2 && rm -rf /var/lib/apt/lists/*;\n\nCOPY scripts/emscripten.sh /scripts/\nRUN bash /scripts/emscripten.sh\n\nCOPY scripts/sccache.sh /scripts/\nRUN sh /scripts/sccache.sh\n\n# emcc seems to need python to specifically be \"python\" and not \"python3\"\nRUN ln `which python3` /usr/bin/python\n\nENV PATH=$PATH:/emsdk-portable\nENV PATH=$PATH:/emsdk-portable/upstream/emscripten/\n\n# Rust's build system requires NodeJS to be in the path, but the directory in\n# which emsdk stores it contains the version number. This caused breakages in\n# the past when emsdk bumped the node version causing the path to point to a\n# missing directory.\n#\n# To avoid the problem this symlinks the latest NodeJs version available to\n# \"latest\", and adds that to the path.\nRUN ln -s /emsdk-portable/node/$(ls /emsdk-portable/node | sort -V | tail -n 1) \\\n          /emsdk-portable/node/latest\nENV PATH=$PATH:/emsdk-portable/node/latest/bin/\n\nENV BINARYEN_ROOT=/emsdk-portable/upstream/\nENV EMSDK=/emsdk-portable\nENV EM_CONFIG=/emsdk-portable/.emscripten\nENV EM_CACHE=/emsdk-portable/upstream/emscripten/cache\n\nENV TARGETS=wasm32-unknown-emscripten\n\n# Use -O1 optimizations in the link step to reduce time spent optimizing.\nENV EMCC_CFLAGS=-O1\n\n# Emscripten installation is user-specific\nENV NO_CHANGE_USER=1\n\n# FIXME: Re-enable these tests once https://github.com/rust-lang/cargo/pull/7476\n# is picked up by CI\nENV SCRIPT python3 ../x.py test --stage 2 --host='' --target $TARGETS \\\n    --exclude library/core \\\n    --exclude library/alloc \\\n    --exclude library/proc_macro \\\n    --exclude library/std \\\n    --exclude library/term \\\n    --exclude library/test\n"
}