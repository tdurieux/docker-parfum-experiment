{
  "startTime": 1674249778720,
  "endTime": 1674249779771,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 0,
        "lineEnd": 0,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 0,
        "lineEnd": 0,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 0,
        "lineEnd": 0,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 0,
        "lineEnd": 0,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedDockerfile": "ARG BUILD_ENV=motoko\n\nFROM node:17-slim as encrypted_notes_base\n\n# Install a basic environment needed for our build tools\n# build-essential only necessary if you need to build the Rust canister.\nRUN \\\n    apt -yq update && \\\n    apt -yqq install --no-install-recommends curl rsync ca-certificates libdigest-sha-perl && rm -rf /var/lib/apt/lists/*;\n\n# Install dfx; the version is picked up from the DFX_VERSION environment variable\n# Lowercase [dfx_version] is an argument of this Dockerfile (with a default value)\n# Uppercase [DFX_VERSION] is an environment variable for expected by the DFX installation script\nARG dfx_version=0.9.3\nENV DFX_VERSION=${dfx_version}\nRUN sh -ci \"$(curl -fsSL https://smartcontracts.org/install.sh)\"\nENV NODE_OPTIONS=--openssl-legacy-provider\nEXPOSE 8080 8000 3000 35729\nWORKDIR /canister\nENTRYPOINT /bin/bash\n\n# Motoko image is the base image plus testing-related packages\nFROM encrypted_notes_base as encrypted_notes_motoko\n\n \\\nRUN apt -yqq install --no-install-recommends xz-utils && rm -rf /var/lib/apt/lists/*; ONBUILD\n\nONBUILD ARG matchers_version=1.2.0\nONBUILD RUN curl -fsSLO \"https://github.com/kritzcreek/motoko-matchers/archive/refs/tags/v${matchers_version}.tar.gz\" && tar -xzf \"v${matchers_version}.tar.gz\" && rm \"v${matchers_version}.tar.gz\"\nONBUILD ENV MATCHERS=\"/canister/motoko-matchers-${matchers_version}/src\"\n\nONBUILD ARG wasmtime_version=0.33.1\nONBUILD RUN curl -fsSLO \"https://github.com/bytecodealliance/wasmtime/releases/download/v${wasmtime_version}/wasmtime-v${wasmtime_version}-x86_64-linux.tar.xz\" && tar -xf \"wasmtime-v${wasmtime_version}-x86_64-linux.tar.xz\" && rm -f /bin/wasmtime && ln -s \"$(pwd)/wasmtime-v${wasmtime_version}-x86_64-linux/wasmtime\" /bin/wasmtime && rm \"wasmtime-v${wasmtime_version}-x86_64-linux.tar.xz\"\n\n# Install Rust and Cargo in /opt\n# Specify the Rust toolchain version\n# This is necessary only if you are going to be running the Rust version of the canister.\n\n# Building the Rust image requires additional steps\nFROM encrypted_notes_base as encrypted_notes_rust\n\n# The ONBUILD instructions ensure that the Rust-specific commands are only executed if this\n \\\nRUN apt -yqq install --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*; ONBUILD\nONBUILD ARG rust_version=1.54.0\nONBUILD ENV RUSTUP_HOME=/opt/rustup \\\n            CARGO_HOME=/opt/cargo \\\n            PATH=/opt/cargo/bin:$PATH\nONBUILD RUN curl --fail https://sh.rustup.rs -sSf \\\n    | sh -s -- -y --default-toolchain ${rust_version}-x86_64-unknown-linux-gnu --no-modify-path && \\\n    rustup default ${rust_version}-x86_64-unknown-linux-gnu && \\\n    rustup target add wasm32-unknown-unknown\n\n# Choose which image version to build: \"motoko\" or \"rust\"?\nFROM encrypted_notes_${BUILD_ENV}"
}