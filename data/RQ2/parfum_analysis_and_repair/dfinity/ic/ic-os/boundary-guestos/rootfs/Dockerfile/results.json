{
  "startTime": 1674249140901,
  "endTime": 1674249143084,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 3,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 3,
        "columnEnd": 134
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 3,
        "columnEnd": 99
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 29,
        "columnStart": 47,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# BoundarGuestOS - Main Docker Image\n#\n# Build steps:\n# - `docker build --pull -t dfinity/boundaryos-main -f Dockerfile .`\n#\n# The base images are defined in docker-base.prod and docker-base.dev. Update\n# the references there when a new base image has been built. Note that this\n# argument MUST be given by the build script, otherwise build will fail.\nARG BASE_IMAGE=\n\n# Service worker verion and sha256\nARG sw_version=1.2.0\nARG sw_sha256=2f84ab0b02e3ac45b2c4de31789ccf7f6389887931970326842bfefb07073b55\n\n# First build stage: download software, build and verify it (such that it\n# does not change under our noses).\nFROM ubuntu:20.04 AS download\n\nENV TZ=UTC\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nRUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install \\\n    ca-certificates \\\n    curl \\\n    pkg-config \\\n    libffi-dev \\\n    libssl-dev \\\n    ssl-cert \\\n    rustc \\\n    cargo \\\n    perl && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /tmp\n\n# Download and verify journalbeat\nRUN \\\n    curl -f -L -O https://artifacts.elastic.co/downloads/beats/journalbeat/journalbeat-oss-7.14.0-linux-x86_64.tar.gz && \\\n    echo \"3c97e8706bd0d2e30678beee7537b6fe6807cf858a0dd2e7cfce5beccb621eb0fefe6871027bc7b55e2ea98d7fe2ca03d4d92a7b264abbb0d6d54ecfa6f6a305  journalbeat-oss-7.14.0-linux-x86_64.tar.gz\" | shasum -c\n\n# Download and verify vector\nRUN \\\n    curl -f -L -O https://packages.timber.io/vector/0.21.0/vector_0.21.0-1_amd64.deb && \\\n    echo \"bd713a9e739cca53f9aa1e49e4abf0f0a3ba68a1c5f5f42106ed9b98282f2f06f009e0779c24368aea9d4e829af7614043ae9625dcc849717931c20a6812ede7  vector_0.21.0-1_amd64.deb\" | shasum -c\n\n# Download and verify node_exporter\nRUN \\\n    curl -f -L -O https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz && \\\n    echo \"68f3802c2dd3980667e4ba65ea2e1fb03f4a4ba026cca375f15a0390ff850949  node_exporter-1.3.1.linux-amd64.tar.gz\" | shasum -c\n\n# Download and verify nginx_exporter\nRUN \\\n    curl -f -L -O https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.10.0/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz && \\\n    echo \"30e664006dbc2d1185d3a5445942cd8158d1bb58  nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\" | shasum -c\n\n# Download libnginx-mod-http-ndk.deb\nRUN \\\n   curl -f -L -O https://github.com/dfinity/nginx-module-cbor-input/releases/download/v0.0.9/libnginx-mod-http-ndk_0.3.1_amd64.deb && \\\n   echo \"6a496d8c7f3357fda9e5adeb7a729e76c453f32c6d67bc0ec563b0f71e2a0aca  libnginx-mod-http-ndk_0.3.1_amd64.deb\" | shasum -c\n\n# Download libnginx-mod-http-cbor-input.deb\nRUN \\\n   curl -f -L -O https://github.com/dfinity/nginx-module-cbor-input/releases/download/v0.0.9/libnginx-mod-http-cbor-input_0.0.9_amd64.deb && \\\n   echo \"8dca8fb93a6645c4aee23f601e9d9f62a00638ff29f95ceafcd10f422a3126f0  libnginx-mod-http-cbor-input_0.0.9_amd64.deb\" | shasum -c\n\n# Download icx-proxy.deb\nRUN \\\n    curl -f -L -O https://github.com/dfinity/icx-proxy/releases/download/rev-dcaa135/icx-proxy.deb && \\\n    echo \"e20c7f6dcbe438ef9ec7dbff7d88d88db4099cb2b8d6dc399f47856baf0e568c  icx-proxy.deb\" | shasum -c\n\n# Download and check service worker\nARG sw_version\nARG sw_sha256\nRUN \\\n   curl -f -L -O https://registry.npmjs.org/@dfinity/service-worker/-/service-worker-${sw_version}.tgz && \\\n   echo \"${sw_sha256}  service-worker-${sw_version}.tgz\" | shasum -c\n\n#\n# Second build stage:\n# - Construct the actual target image (IC-OS root filesystem)\n# - Copy downloaded archives from first build stage into the target image\n#\nFROM $BASE_IMAGE\n\nRUN mkdir -p /boot/config \\\n             /boot/efi \\\n             /boot/grub\nCOPY etc /etc\n\n# Update POSIX permissions in /etc/\nRUN find /etc -type d -exec chmod 0755 {} \\+ && \\\n    find /etc -type f -not -path \"/etc/hostname\" -not -path \"/etc/hosts\" -not -path \"/etc/resolv.conf\" -exec chmod 0644 {} \\+ && \\\n    chmod 0755 /etc/systemd/system-generators/mount-generator && \\\n    chmod 0440 /etc/sudoers && \\\n    chmod 755 /etc/initramfs-tools/scripts/init-bottom/set-machine-id && \\\n    chmod 755 /etc/initramfs-tools/scripts/local && \\\n    chmod 755 /etc/initramfs-tools/scripts/local-premount/setup-verity && \\\n    chmod 755 /etc/initramfs-tools/hooks/setup-verity\n\n# Deactivate motd, it tries creating $HOME/.cache/motd.legal-displayed,\n# but we want to prohibit it from writing to user home dirs\nRUN sed -e '/.*pam_motd.so.*/d' -i /etc/pam.d/login && \\\n    sed -e '/.*pam_motd.so.*/d' -i /etc/pam.d/sshd\n\n# Deactivate lvm backup/archive: It writes backup information to /etc/lvm, but a) this is\n# per system (so backups are not persisted across upgrades) and thus not very\n# useful, and b) we want to turn /etc read-only eventually. So simply suppress\n# generating backups.\nRUN sed -e 's/\\(backup *= *\\)1/\\10/' -e 's/\\(archive *= *\\)1/\\10/' -i /etc/lvm/lvm.conf\n\n# Deactivate systemd userdb. We don't use it.\nRUN sed -e 's/ *systemd//' -i /etc/nsswitch.conf\n\n# Regenerate initramfs (config changed after copying in /etc)\nRUN RESUME=none update-initramfs -c -k all\n\nARG ROOT_PASSWORD=\nRUN \\\n    if [ \"${ROOT_PASSWORD}\" != \"\" ]; then \\\n        echo \"root:$(openssl passwd -6 -salt jE8zzDEHeRg/DuGq ${ROOT_PASSWORD})\" | chpasswd -e ; \\\n    fi\n\n# Prepare for bind mount of authorized_keys\nRUN mkdir -p /root/.ssh && chmod 0700 /root/.ssh\n\n# Delete generated ssh keys, otherwise every host will have the same key pair.\n# They will be generated on first boot.\nRUN rm /etc/ssh/ssh*key*\n# Allow root login only via keys. In prod deployments there are never any\n# keys set up for root, but in dev deployments there may be.\n# Actually, prohibit-password is the default config, so would not be\n# strictly necessary to be explicit here.\nRUN sed -e \"s/.*PermitRootLogin.*/PermitRootLogin prohibit-password/\" -i /etc/ssh/sshd_config\n\n# All of the above sets up the base operating system. Everything below relates\n# to node operation.\n\nRUN \\\n    for SERVICE in /etc/systemd/system/*; do \\\n        if [ -f \"$SERVICE\" -a ! -L \"$SERVICE\" ] ; then systemctl enable \"${SERVICE#/etc/systemd/system/}\" ; fi ; \\\n    done\n\nRUN systemctl enable \\\n    chrony \\\n    nftables \\\n    systemd-networkd \\\n    systemd-networkd-wait-online \\\n    systemd-resolved \\\n    systemd-journal-gatewayd\n\n# Add user/group entries specified here: /usr/lib/sysusers.d/systemd.conf E.g., systemd-timesync/coredump\nRUN faketime \"1970-1-1 0\" systemd-sysusers\n\n# Set /bin/sh to point to /bin/bash instead of the default /bin/dash\nRUN echo \"set dash/sh false\" | debconf-communicate && dpkg-reconfigure -fnoninteractive dash\n\n# Group accounts to which parts of the runtime state are assigned such that\n# user accounts can be granted individual access rights.\n# Note that a group \"backup\" already exists and is used for the purpose of\n# allowing backup read access.\nRUN addgroup --system nonconfidential && \\\n    addgroup --system confidential\n\n# Accounts to allow remote access to state bits\n\n# The \"backup\" user account. We simply use the existing \"backup\" account and\n# reconfigure it for our purposes.\nRUN chsh -s /bin/bash backup && \\\n    mkdir /var/lib/backup && \\\n    chown backup:backup /var/lib/backup && \\\n    usermod -d /var/lib/backup backup && \\\n    adduser backup systemd-journal\n\n# The \"read-only\" user account. May read everything besides crypto.\nRUN adduser --system --disabled-password --home /var/lib/readonly --shell /bin/bash readonly && \\\n    adduser readonly backup && \\\n    adduser readonly nonconfidential && \\\n    adduser readonly systemd-journal\n\n# The omnipotent \"admin\" account. May read everything and crucially can also\n# arbitrarily change system state via sudo.\nRUN adduser --system --disabled-password --home /var/lib/admin --shell /bin/bash admin && \\\n    chown admin:staff /var/lib/admin && \\\n    adduser admin backup && \\\n    adduser admin nonconfidential && \\\n    adduser admin systemd-journal && \\\n    adduser admin sudo\n\n# The \"journalbeat\" account. Used to run journalbeat binary to send logs of the\n# GuestOS.\nRUN addgroup journalbeat && \\\n    adduser --system --disabled-password --shell /usr/sbin/nologin -c \"Journalbeat\" journalbeat && \\\n    adduser journalbeat journalbeat && \\\n    adduser journalbeat systemd-journal\n\n# The \"vector\" account. Used to run vector binary\nRUN addgroup vector && \\\n    adduser --system --disabled-password --shell /usr/sbin/nologin -c \"Vector\" vector && \\\n    adduser vector vector\n\n# The \"node_exporter\" account. Used to run node_exporter binary to export\n# telemetry metrics of the GuestOS.\nRUN addgroup node_exporter && \\\n    adduser --system --disabled-password --shell /usr/sbin/nologin -c \"Node Exporter\" node_exporter && \\\n    adduser node_exporter node_exporter\n\n# The \"socks\" account for socks proxy\n# Also set correct permissions for dante and stunnel.\n# Stunnel4 cannot be started as a systemctl service so starting it as `stunnel4 start`\nRUN addgroup socks && \\\n    adduser --system --disabled-password --shell /usr/sbin/nologin -c \"Socks\" socks && \\\n    adduser socks socks && chmod +s /usr/sbin/danted && \\\n    chmod 0755 /etc/init.d/stunnel4\n\nRUN \\\n    addgroup prober && \\\n    adduser --system --disabled-password --shell /usr/sbin/nologin -c \"Prober\" prober && \\\n    adduser prober prober\n\nRUN \\\n    mkdir -p /var/log/prober && \\\n    chown prober:prober /var/log/prober && \\\n    chmod 755 /var/log/prober\n\n# Install journalbeat\nCOPY --from=download /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz\nRUN cd /tmp/ && \\\n    mkdir -p /etc/journalbeat \\\n             /var/lib/journalbeat \\\n             /var/log/journalbeat && \\\n    tar --strip-components=1 -C /etc/journalbeat/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/fields.yml && \\\n    tar --strip-components=1 -C /etc/journalbeat/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/journalbeat.reference.yml && \\\n    tar --strip-components=1 -C /usr/local/bin/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/journalbeat && \\\n    chown root:root /etc/journalbeat/*.yml \\\n                    /usr/local/bin/journalbeat && \\\n    chown journalbeat:journalbeat /var/lib/journalbeat \\\n                                  /var/log/journalbeat && \\\n    chmod 0755 /etc/journalbeat && \\\n    chmod 0750 /var/lib/journalbeat \\\n               /var/log/journalbeat && \\\n    chmod 0644 /etc/journalbeat/*.yml && \\\n    rm /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz\n\n# Install vector\nCOPY --from=download /tmp/vector_0.21.0-1_amd64.deb /tmp/vector_0.21.0-1_amd64.deb\nRUN dpkg -i --force-confold /tmp/vector_0.21.0-1_amd64.deb && \\\n    rm /tmp/vector_0.21.0-1_amd64.deb\n\n# Install node_exporter\nCOPY --from=download /tmp/node_exporter-1.3.1.linux-amd64.tar.gz /tmp/node_exporter-1.3.1.linux-amd64.tar.gz\nRUN cd /tmp/ && \\\n    mkdir -p /etc/node_exporter && \\\n    tar --strip-components=1 -C /usr/local/bin/ -zvxf node_exporter-1.3.1.linux-amd64.tar.gz node_exporter-1.3.1.linux-amd64/node_exporter && \\\n    chown root:root /etc/node_exporter \\\n                    /usr/local/bin/node_exporter && \\\n    chmod 0755 /etc/node_exporter \\\n               /usr/local/bin/node_exporter && \\\n    chmod 0644 /etc/default/node_exporter \\\n               /etc/node_exporter/web.yml && \\\n    rm /tmp/node_exporter-1.3.1.linux-amd64.tar.gz\n\n# install nginx_exporter\nRUN \\\n    addgroup nginx_exporter && \\\n    adduser --system --disabled-password --shell /usr/sbin/nologin -c \"nginx_exporter\" nginx_exporter && \\\n    adduser nginx_exporter nginx_exporter\n\nCOPY --from=download /tmp/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz /tmp/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\nRUN \\\n    tar \\\n        -C /usr/local/bin \\\n        -zvxf /tmp/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz \\\n        nginx-prometheus-exporter && \\\n    mv \\\n        /usr/local/bin/nginx-prometheus-exporter \\\n        /usr/local/bin/nginx_exporter && \\\n    chown \\\n        nginx_exporter:nginx_exporter \\\n        /usr/local/bin/nginx_exporter && \\\n    rm /tmp/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\n\n# Install IC binaries and other data late -- this means everything above\n# will be cached when only the binaries change.\nCOPY opt /opt\n\nRUN rm -rf /etc/nginx/sites-enabled/nginx.conf\n\n# Install libnginx-mod-http-ndk\nCOPY --from=download /tmp/libnginx-mod-http-ndk_0.3.1_amd64.deb /tmp/\nRUN dpkg -i /tmp/libnginx-mod-http-ndk_0.3.1_amd64.deb &&\\\n    rm /tmp/libnginx-mod-http-ndk_0.3.1_amd64.deb\n\n# Install libnginx-mod-http-cbor-input\nCOPY --from=download /tmp/libnginx-mod-http-cbor-input_0.0.9_amd64.deb /tmp/libnginx-mod-http-cbor-input_0.0.9_amd64.deb\nRUN dpkg -i /tmp/libnginx-mod-http-cbor-input_0.0.9_amd64.deb &&\\\n    rm /tmp/libnginx-mod-http-cbor-input_0.0.9_amd64.deb\n\n# Install icx-proxy\nCOPY --from=download /tmp/icx-proxy.deb /tmp/icx-proxy.deb\nRUN dpkg -i /tmp/icx-proxy.deb &&\\\n    rm /tmp/icx-proxy.deb\n\n# Install ic service worker production version from: https://registry.npmjs.org/@dfinity/service-worker/-/\nARG sw_version\nCOPY --from=download /tmp/service-worker-${sw_version}.tgz /tmp/service-worker-${sw_version}.tgz\nRUN cd /tmp && tar xfvz service-worker-${sw_version}.tgz && \\\n    mkdir -p /var/www/html/ &&\\\n    cp -rf /tmp/package/dist-prod/* /var/www/html/ &&\\\n    rm -rf /tmp/package /tmp/service-worker-${sw_version}.tgz\nRUN chown www-data:www-data /var/www/html && \\\n    chmod 0755 /var/www/html/*\n# Install other files (e.g. the uninstall-script)\nCOPY var/www/html /var/www/html\n\n# Clear all files that may lead to indeterministic build.\nRUN apt-get clean && \\\n    rm -rf \\\n        /var/cache/fontconfig/* /var/cache/ldconfig/aux-cache \\\n        /var/log/alternatives.log /var/log/apt/history.log /var/log/apt/term.log /var/log/dpkg.log \\\n        /var/lib/apt/lists/* /var/lib/dbus/machine-id \\\n        /var/lib/initramfs-tools/5.8.0-50-generic && \\\n    find /usr/local/share/fonts -name .uuid | xargs rm && \\\n    find /usr/share/fonts -name .uuid | xargs rm && \\\n    find /usr/lib -name \"*.pyc\" | xargs rm -rf&& \\\n    find /usr/share -name \"*.pyc\" | xargs rm -rf&& \\\n    truncate --size 0 /etc/machine-id\n\n# Update POSIX permissions in /opt/ic/\nRUN find /opt -type d -exec chmod 0755 {} \\+ && \\\n    find /opt -type f -exec chmod 0644 {} \\+ && \\\n    chmod 0755 /opt/ic/bin/*\n\nCOPY boot /boot\n# Update POSIX permissions in /boot/\nRUN chmod 0644 /boot/extra_boot_args\n\n\n\n# CERTIFICATES\n# Default image has\n# 1. fullchain.pem: self signed certificates from the ssl-cert package.\n# 2. privkey.pem: key for the self signed certificate.\n# 3. chain.pem: Dummy certficate of the issuer for OCSP stapling to work.\n#    This cert is irrelevant because the certificate is self signed.\n#\n# Prod image\n#\n# Has the above 3 certificates in /boot/config/cert. The setup-nginx service\n# copies over the certificates in the correct location to match the nginx conf\n# file\n#\n# The naming convetion is the same a certificates generated by certbot renew\nRUN mkdir -p /etc/nginx/certs\nRUN mkdir -p /etc/nginx/keys\nRUN cp /etc/ssl/certs/ssl-cert-snakeoil.pem /etc/nginx/certs/fullchain.pem\nRUN cp /etc/ssl/private/ssl-cert-snakeoil.key /etc/nginx/keys/privkey.pem\nRUN cp /etc/ssl/certs/ssl-cert-snakeoil.pem /etc/nginx/certs/chain.pem\n\n\n# trusted_cert.pem contains all certificates for the upstream replica. This file\n# is periodically updated by the proxy+watcher service. To bootstrap the process\n# we initially place a dummy trusted cert. This dummy is the copy of the\n# snakeoil cert. This allows the nginx service to start, but upstream routing\n# will only happen once the control plane pulls the initial set of routes\n#\nRUN cp /etc/nginx/certs/fullchain.pem /etc/nginx/ic/trusted_certs.pem\n\n# Take care of nginx files\nRUN chmod 0755 /etc/nginx/*\nRUN chmod 0644 /etc/nginx/ic_public_key.pem\nRUN chmod 0644 /etc/nginx/nginx.conf\nRUN chmod 0644 /etc/nginx/modules-enabled/ngx_http_cbor_input_module.conf\nRUN chmod 0644 /etc/nginx/modules-enabled/ngx_http_js_module.conf\nRUN chmod 0755 /etc/nginx/ic/ic_router_control_plane_watcher.sh\nRUN rm -rf /etc/nginx/conf.d/nginx-global.conf\nRUN rm -rf /etc/nginx/conf.d/default.conf\nRUN rm -rf /etc/nginx/sites-enabled/default\nRUN rm -rf /etc/nginx/conf.d/default\n"
}