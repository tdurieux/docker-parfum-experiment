{
  "startTime": 1674255480332,
  "endTime": 1674255481757,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 3,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 3,
        "columnEnd": 134
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 3,
        "columnEnd": 99
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 42,
        "columnStart": 47,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 47,
        "columnEnd": 95
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 115,
        "lineEnd": 159,
        "columnStart": 47,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Boundary Guestos - Base Image\n#\n# Build steps:\n# - `docker build -t dfinity/boundaryos-base:<tag> -f Dockerfile.base .`\n# - `docker push/pull dfinity/boundaryos-base:<tag>`\n# - `docker build -t dfinity/boundaryos-base-snp:<tag> --build-arg CPU_SUPPORT=\"snp\" -f Dockerfile.base\n# - `docker push/pull dfinity/boundaryos-base-snp:<tag>`\n\n# NOTE! If you edit this file, you will need to perform the following\n# operations to get your changes deployed.\n#\n# 1. Get your MR approved and merged into master\n# 2. On the next hourly master pipeline (Run post-merge tests), click the \"deploy-guest-os-baseimg\" job\n# 3. Note the sha256 and update the sha256 reference in the neighboring Dockerfiles.\n\n# AMD SEV-SNP support version and sha256\nARG snp_tag=sev-snp-release-2022-06-01\nARG snp_sha=d61ed4419c2e98925e28ccc6e55dbb0b2c5d4b1c\nARG snp_kernel_version=5.17.0-rc6-snp-guest-dfa5ba8348e4\nARG snp_kernel_pkg=linux-image-${snp_kernel_version}_${snp_kernel_version}-1_amd64.deb\n\n# Service worker verion and sha256\nARG sw_version=1.2.0\nARG sw_sha256=2f84ab0b02e3ac45b2c4de31789ccf7f6389887931970326842bfefb07073b55\n\n#\n# First build stage: download software, build and verify it (such that it\n# does not change under our noses).\n#\nFROM ubuntu:20.04 AS download\n\nENV TZ=UTC\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nRUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install \\\n    ca-certificates \\\n    curl \\\n    pkg-config \\\n    libffi-dev \\\n    libssl-dev \\\n    ssl-cert \\\n    rustc \\\n    cargo \\\n    perl && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /tmp\n\n# Download SNP support\nARG snp_tag\nARG snp_sha\nARG snp_kernel_pkg\nRUN curl -f -L -O https://github.com/dfinity/AMDSEV/releases/download/${snp_tag}/${snp_kernel_pkg} && \\\n    echo \"${snp_sha}  ${snp_kernel_pkg}\" | shasum -c\n\n# Download and verify journalbeat\nRUN \\\n    curl -f -L -O https://artifacts.elastic.co/downloads/beats/journalbeat/journalbeat-oss-7.14.0-linux-x86_64.tar.gz && \\\n    echo \"3c97e8706bd0d2e30678beee7537b6fe6807cf858a0dd2e7cfce5beccb621eb0fefe6871027bc7b55e2ea98d7fe2ca03d4d92a7b264abbb0d6d54ecfa6f6a305  journalbeat-oss-7.14.0-linux-x86_64.tar.gz\" | shasum -c\n\n# Download and verify vector\nRUN \\\n    curl -f -L -O https://packages.timber.io/vector/0.21.0/vector_0.21.0-1_amd64.deb && \\\n    echo \"bd713a9e739cca53f9aa1e49e4abf0f0a3ba68a1c5f5f42106ed9b98282f2f06f009e0779c24368aea9d4e829af7614043ae9625dcc849717931c20a6812ede7  vector_0.21.0-1_amd64.deb\" | shasum -c\n\n# Download and verify node_exporter\nRUN \\\n    curl -f -L -O https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz && \\\n    echo \"68f3802c2dd3980667e4ba65ea2e1fb03f4a4ba026cca375f15a0390ff850949  node_exporter-1.3.1.linux-amd64.tar.gz\" | shasum -c\n\n# Download and verify nginx_exporter\nRUN \\\n    curl -f -L -O https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.10.0/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz && \\\n    echo \"30e664006dbc2d1185d3a5445942cd8158d1bb58  nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\" | shasum -c\n\n# Download libnginx-mod-http-ndk.deb\nRUN \\\n   curl -f -L -O https://github.com/dfinity/nginx-module-cbor-input/releases/download/v0.0.9/libnginx-mod-http-ndk_0.3.1_amd64.deb && \\\n   echo \"6a496d8c7f3357fda9e5adeb7a729e76c453f32c6d67bc0ec563b0f71e2a0aca  libnginx-mod-http-ndk_0.3.1_amd64.deb\" | shasum -c\n\n# Download libnginx-mod-http-cbor-input.deb\nRUN \\\n   curl -f -L -O https://github.com/dfinity/nginx-module-cbor-input/releases/download/v0.0.9/libnginx-mod-http-cbor-input_0.0.9_amd64.deb && \\\n   echo \"8dca8fb93a6645c4aee23f601e9d9f62a00638ff29f95ceafcd10f422a3126f0  libnginx-mod-http-cbor-input_0.0.9_amd64.deb\" | shasum -c\n\n# Download icx-proxy.deb\nRUN \\\n    curl -f -L -O https://github.com/dfinity/icx-proxy/releases/download/rev-dcaa135/icx-proxy.deb && \\\n    echo \"e20c7f6dcbe438ef9ec7dbff7d88d88db4099cb2b8d6dc399f47856baf0e568c  icx-proxy.deb\" | shasum -c\n\n# Download and check service worker\nARG sw_version\nARG sw_sha256\nRUN \\\n   curl -f -L -O https://registry.npmjs.org/@dfinity/service-worker/-/service-worker-${sw_version}.tgz && \\\n   echo \"${sw_sha256}  service-worker-${sw_version}.tgz\" | shasum -c\n\n#\n# Second build stage:\n# - Download and cache minimal Ubuntu Server 20.04 LTS Docker image\n# - Install and cache upstream packages from built-in Ubuntu repositories\n# - Copy downloaded archives from first build stage into the target image\n#\nFROM ubuntu:20.04\n\nENV TZ=UTC\nENV SOURCE_DATE_EPOCH=0\n\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Preparation and install of packages for nginx\nRUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install gnupg && rm -rf /var/lib/apt/lists/*;\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62\n\nRUN echo \"deb http://nginx.org/packages/mainline/ubuntu/ focal nginx\" >> /etc/apt/sources.list.d/nginx.list &&\\\n    echo \"deb-src http://nginx.org/packages/mainline/ubuntu/ focal nginx\" >> /etc/apt/sources.list.d/nginx.list\n\nRUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install \\\n    attr \\\n    ca-certificates \\\n    checkpolicy \\\n    chrony \\\n    cryptsetup \\\n    curl \\\n    dante-server \\\n    faketime \\\n    fdisk \\\n    haveged \\\n    initramfs-tools \\\n    inotify-tools \\\n    iproute2 \\\n    iputils-ping \\\n    isc-dhcp-client \\\n    less \\\n    libffi-dev \\\n    liblmdb0 \\\n    libssl-dev \\\n    linux-image-virtual-hwe-20.04 \\\n    logrotate \\\n    lshw \\\n    lvm2 \\\n    net-tools \\\n    nftables \\\n    nginx-module-njs=1.21.3+0.7.0-1~focal \\\n    nginx=1.21.3-1~focal \\\n    opensc \\\n    openssh-client openssh-server \\\n    parted \\\n    pciutils \\\n    pcsc-tools pcscd \\\n    policycoreutils \\\n    python \\\n    python3-dev \\\n    rsync \\\n    ssl-cert \\\n    stunnel \\\n    sudo \\\n    systemd systemd-sysv systemd-journal-remote \\\n    udev \\\n    usbutils \\\n    vim \\\n    zstd && rm -rf /var/lib/apt/lists/*;\n\n# For the common image, just use common to use the default kernel of Ubuntu\n# For the SEV-SNP image, use \"snp\"  -- this can\n# be set via docker build args (see above).\nARG CPU_SUPPORT=common\n\n# Copy AMD SEV-SNP kernel support\nARG snp_tag\nARG snp_kernel_pkg\nCOPY --from=download /tmp/${snp_kernel_pkg} /tmp/${snp_kernel_pkg}\n\n# Install AMD SEV-SNP kernel support\nARG CPU_SUPPORT\nARG snp_tag\nARG snp_kernel_version\nARG snp_kernel_pkg\nRUN \\\n    echo \"CPU_SUPPORT: ${CPU_SUPPORT}\" && \\\n    if [ \"${CPU_SUPPORT}\" = \"snp\" ] ; then \\\n\t\tdpkg -i /tmp/${snp_kernel_pkg} && \\\n\t\t# Create initrd for the new kernel\n\t\tupdate-initramfs -b /boot -c -k ${snp_kernel_version} && \\\n\t\t# Create soft link for vmlinuz and initrd.img pointing to the updated images\n\t\tunlink /boot/vmlinuz && \\\n\t\tunlink /boot/initrd.img && \\\n\t\tln -s /boot/vmlinuz-${snp_kernel_version}/boot/vmlinuz && \\\n\t\tln -s /boot/initrd.img-${snp_kernel_version}/boot/initrd.img ; \\\n     fi\n\n# Cleanup\nRUN rm /tmp/${snp_kernel_pkg}\n\n# Install journalbeat\nCOPY --from=download /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz\nRUN cd /tmp/ && \\\n    mkdir -p /etc/journalbeat \\\n             /var/lib/journalbeat \\\n             /var/log/journalbeat && \\\n    tar --strip-components=1 -C /etc/journalbeat/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/fields.yml && \\\n    tar --strip-components=1 -C /etc/journalbeat/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/journalbeat.reference.yml && \\\n    tar --strip-components=1 -C /usr/local/bin/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/journalbeat && \\\n    rm /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz\n\n# Install vector\nCOPY --from=download /tmp/vector_0.21.0-1_amd64.deb /tmp/vector_0.21.0-1_amd64.deb\nRUN dpkg -i --force-confold /tmp/vector_0.21.0-1_amd64.deb && \\\n    rm /tmp/vector_0.21.0-1_amd64.deb\n\n# Install node_exporter\nCOPY --from=download /tmp/node_exporter-1.3.1.linux-amd64.tar.gz /tmp/node_exporter-1.3.1.linux-amd64.tar.gz\nRUN cd /tmp/ && \\\n    mkdir -p /etc/node_exporter && \\\n    tar --strip-components=1 -C /usr/local/bin/ -zvxf node_exporter-1.3.1.linux-amd64.tar.gz node_exporter-1.3.1.linux-amd64/node_exporter && \\\n    rm /tmp/node_exporter-1.3.1.linux-amd64.tar.gz\n\nCOPY --from=download /tmp/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz /tmp/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\nRUN \\\n    tar \\\n        -C /usr/local/bin \\\n        -zvxf /tmp/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz \\\n        nginx-prometheus-exporter && \\\n    mv \\\n        /usr/local/bin/nginx-prometheus-exporter \\\n        /usr/local/bin/nginx_exporter && \\\n    rm /tmp/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\n\n# Install libnginx-mod-http-ndk\nCOPY --from=download /tmp/libnginx-mod-http-ndk_0.3.1_amd64.deb /tmp/\nRUN dpkg -i /tmp/libnginx-mod-http-ndk_0.3.1_amd64.deb &&\\\n    rm /tmp/libnginx-mod-http-ndk_0.3.1_amd64.deb\n\n# Install libnginx-mod-http-cbor-input\nCOPY --from=download /tmp/libnginx-mod-http-cbor-input_0.0.9_amd64.deb /tmp/libnginx-mod-http-cbor-input_0.0.9_amd64.deb\nRUN dpkg -i /tmp/libnginx-mod-http-cbor-input_0.0.9_amd64.deb &&\\\n    rm /tmp/libnginx-mod-http-cbor-input_0.0.9_amd64.deb\n\n# Install icx-proxy\nCOPY --from=download /tmp/icx-proxy.deb /tmp/icx-proxy.deb\nRUN dpkg -i /tmp/icx-proxy.deb &&\\\n    rm /tmp/icx-proxy.deb\n\n# Install ic service worker production version from: https://registry.npmjs.org/@dfinity/service-worker/-/\nARG sw_version\nCOPY --from=download /tmp/service-worker-${sw_version}.tgz /tmp/service-worker-${sw_version}.tgz\nRUN cd /tmp && tar xfvz service-worker-${sw_version}.tgz && \\\n    mkdir -p /var/www/html/ &&\\\n    cp -rf /tmp/package/dist-prod/* /var/www/html/ &&\\\n    rm -rf /tmp/package /tmp/service-worker-${sw_version}.tgz\n"
}