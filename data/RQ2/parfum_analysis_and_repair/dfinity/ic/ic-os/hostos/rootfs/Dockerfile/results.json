{
  "startTime": 1674216442374,
  "endTime": 1674216444020,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 14,
        "columnStart": 47,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# HostOS - Main Docker Image\n#\n# Build steps:\n# - `docker build --pull -t dfinity/hostos-main -f Dockerfile .`\n#\n# First build stage:\n# - Download 3rd party tools\nFROM ubuntu:20.04 AS download\n\nENV TZ=UTC\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nRUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install \\\n    ca-certificates \\\n    curl \\\n    perl && rm -rf /var/lib/apt/lists/*;\n\n# Download and verify journalbeat\nRUN cd /tmp/ && \\\n    curl -f -L -O https://artifacts.elastic.co/downloads/beats/journalbeat/journalbeat-oss-7.14.0-linux-x86_64.tar.gz && \\\n    echo \"3c97e8706bd0d2e30678beee7537b6fe6807cf858a0dd2e7cfce5beccb621eb0fefe6871027bc7b55e2ea98d7fe2ca03d4d92a7b264abbb0d6d54ecfa6f6a305  journalbeat-oss-7.14.0-linux-x86_64.tar.gz\" > journalbeat.sha512 && \\\n    shasum -c journalbeat.sha512\n\n# Download and verify node_exporter\nRUN cd /tmp/ && \\\n    curl -f -L -O https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz && \\\n    echo \"68f3802c2dd3980667e4ba65ea2e1fb03f4a4ba026cca375f15a0390ff850949  node_exporter-1.3.1.linux-amd64.tar.gz\" > node_exporter.sha256 && \\\n    shasum -c node_exporter.sha256\n\n# Second build stage:\n# - Construct the actual target image (IC-OS root filesystem)\n# - Copy downloaded archives from first build stage into the target image\n#\n# Update below image when new dfinity/hostos-base image gets produced (see deploy-host-os-baseimg CI job on master/rc).\nFROM dfinity/hostos-base@sha256:41fbe48028138dd5b90c2e51decc44c7df6597f779e3f6da8a848c23e58f8a99\n\nRUN mkdir -p /boot/config \\\n             /boot/efi \\\n             /boot/grub\nCOPY etc /etc\n\n# Update POSIX permissions in /etc/\nRUN find /etc -type d -exec chmod 0755 {} \\+ && \\\n    find /etc -type f -not -path \"/etc/hostname\" -not -path \"/etc/hosts\" -not -path \"/etc/resolv.conf\" -exec chmod 0644 {} \\+ && \\\n    chmod 0755 /etc/systemd/system-generators/mount-generator && \\\n    chmod 0440 /etc/sudoers && \\\n    chmod 755 /etc/initramfs-tools/scripts/init-bottom/set-machine-id\n\n# Deactivate motd, it tries creating $HOME/.cache/motd.legal-displayed,\n# but we want to prohibit it from writing to user home dirs\nRUN sed -e '/.*pam_motd.so.*/d' -i /etc/pam.d/login && \\\n    sed -e '/.*pam_motd.so.*/d' -i /etc/pam.d/sshd\n\n# Deactivate lvm backup/archive: It writes backup information to /etc/lvm, but a) this is\n# per system (so backups are not persisted across upgrades) and thus not very\n# useful, and b) we want to turn /etc read-only eventually. So simply suppress\n# generating backups.\nRUN sed -e 's/\\(backup *= *\\)1/\\10/' -e 's/\\(archive *= *\\)1/\\10/' -i /etc/lvm/lvm.conf\n\n# Deactivate systemd userdb. We don't use it.\nRUN sed -e 's/ *systemd//' -i /etc/nsswitch.conf\n\n# Regenerate initramfs (config changed after copying in /etc)\nRUN RESUME=none update-initramfs -c -k all\n\nARG ROOT_PASSWORD=\nRUN \\\n    if [ \"${ROOT_PASSWORD}\" != \"\" ]; then \\\n        echo \"root:$(openssl passwd -6 -salt jE8zzDEHeRg/DuGq ${ROOT_PASSWORD})\" | chpasswd -e ; \\\n    fi\n\n# Prepare for bind mount of authorized_keys\nRUN mkdir -p /root/.ssh && chmod 0700 /root/.ssh\n\n# Delete generated ssh keys, otherwise every host will have the same key pair.\n# They will be generated on first boot.\nRUN rm /etc/ssh/ssh*key*\n# Allow root login only via keys. In prod deployments there are never any\n# keys set up for root, but in dev deployments there may be.\n# Actually, prohibit-password is the default config, so would not be\n# strictly necessary to be explicit here.\nRUN sed -e \"s/.*PermitRootLogin.*/PermitRootLogin prohibit-password/\" -i /etc/ssh/sshd_config\n\n# All of the above sets up the base operating system. Everything below relates\n# to node operation.\n\nRUN \\\n    for SERVICE in /etc/systemd/system/*; do \\\n        if [ -f \"$SERVICE\" -a ! -L \"$SERVICE\" ]; then systemctl enable \"${SERVICE#/etc/systemd/system/}\" ; fi ; \\\n    done\n\nRUN systemctl enable \\\n    chrony \\\n    libvirtd \\\n    nftables \\\n    systemd-journal-gatewayd \\\n    systemd-networkd \\\n    systemd-networkd-wait-online \\\n    systemd-resolved\n\n# Add user/group entries specified here: /usr/lib/sysusers.d/systemd.conf E.g., systemd-timesync/coredump\nRUN faketime \"1970-1-1 0\" systemd-sysusers\n\n# Set /bin/sh to point to /bin/bash instead of the default /bin/dash\nRUN echo \"set dash/sh false\" | debconf-communicate && dpkg-reconfigure -fnoninteractive dash\n\n# Group accounts to which parts of the runtime state are assigned such that\n# user accounts can be granted individual access rights.\n# Note that a group \"backup\" already exists and is used for the purpose of\n# allowing backup read access.\nRUN addgroup --system nonconfidential && \\\n    addgroup --system confidential && \\\n    addgroup --system vsock\n\n# User which will run the replica service.\nRUN adduser --system --disabled-password --home /var/lib/ic --group --no-create-home ic-replica && \\\n    adduser ic-replica backup && \\\n    adduser ic-replica nonconfidential && \\\n    adduser ic-replica confidential && \\\n    adduser ic-replica vsock && \\\n    adduser ic-replica sudo\n\n# Accounts to allow remote access to state bits\n\n# The \"backup\" user account. We simply use the existing \"backup\" account and\n# reconfigure it for our purposes.\nRUN chsh -s /bin/bash backup && \\\n    mkdir /var/lib/backup && \\\n    chown backup:backup /var/lib/backup && \\\n    usermod -d /var/lib/backup backup && \\\n    adduser backup systemd-journal\n\n# The \"read-only\" user account.\nRUN adduser --system --disabled-password --home /var/lib/readonly --shell /bin/bash readonly && \\\n    adduser readonly backup && \\\n    adduser readonly nonconfidential && \\\n    adduser readonly systemd-journal\n\n# The omnipotent \"admin\" account. May read everything and crucially can also\n# arbitrarily change system state via sudo.\nRUN adduser --system --disabled-password --home /var/lib/admin --shell /bin/bash admin && \\\n    chown admin:staff /var/lib/admin && \\\n    adduser admin backup && \\\n    adduser admin nonconfidential && \\\n    adduser admin systemd-journal && \\\n    adduser admin vsock && \\\n    adduser admin sudo\n\n# The \"journalbeat\" account. Used to run journalbeat binary to send logs of the\n# GuestOS.\nRUN addgroup journalbeat && \\\n    adduser --system --disabled-password --shell /usr/sbin/nologin -c \"Journalbeat\" journalbeat && \\\n    adduser journalbeat journalbeat && \\\n    adduser journalbeat systemd-journal\n\n# The \"node_exporter\" account. Used to run node_exporter binary to export\n# telemetry metrics of the GuestOS.\nRUN addgroup node_exporter && \\\n    adduser --system --disabled-password --shell /usr/sbin/nologin -c \"Node Exporter\" node_exporter && \\\n    adduser node_exporter node_exporter\n\n# Install journalbeat\nCOPY --from=download /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz\nRUN cd /tmp/ && \\\n    mkdir -p /etc/journalbeat \\\n             /var/lib/journalbeat \\\n             /var/log/journalbeat && \\\n    tar --strip-components=1 -C /etc/journalbeat/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/fields.yml && \\\n    tar --strip-components=1 -C /etc/journalbeat/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/journalbeat.reference.yml && \\\n    tar --strip-components=1 -C /usr/local/bin/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/journalbeat && \\\n    chown root:root /etc/journalbeat/*.yml \\\n                    /usr/local/bin/journalbeat && \\\n    chown journalbeat:journalbeat /var/lib/journalbeat \\\n                                  /var/log/journalbeat && \\\n    chmod 0755 /etc/journalbeat && \\\n    chmod 0750 /var/lib/journalbeat \\\n               /var/log/journalbeat && \\\n    chmod 0644 /etc/journalbeat/*.yml && \\\n    rm /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz\n\n# Install node_exporter\nCOPY --from=download /tmp/node_exporter-1.3.1.linux-amd64.tar.gz /tmp/node_exporter-1.3.1.linux-amd64.tar.gz\nRUN cd /tmp/ && \\\n    mkdir -p /etc/node_exporter && \\\n    tar --strip-components=1 -C /usr/local/bin/ -zvxf node_exporter-1.3.1.linux-amd64.tar.gz node_exporter-1.3.1.linux-amd64/node_exporter && \\\n    chown root:root /etc/node_exporter \\\n                    /usr/local/bin/node_exporter && \\\n    chmod 0755 /etc/node_exporter \\\n               /usr/local/bin/node_exporter && \\\n    chmod 0644 /etc/default/node_exporter \\\n               /etc/node_exporter/web.yml && \\\n    rm /tmp/node_exporter-1.3.1.linux-amd64.tar.gz\n\n# Compile locale specification\nRUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\n\n# Clear all files that may lead to indeterministic build.\nRUN apt-get clean && \\\n    rm -rf \\\n        /var/cache/fontconfig/* /var/cache/ldconfig/aux-cache \\\n        /var/log/alternatives.log /var/log/apt/history.log /var/log/apt/term.log /var/log/dpkg.log \\\n        /var/lib/apt/lists/* /var/lib/dbus/machine-id \\\n        /var/lib/initramfs-tools/5.8.0-50-generic && \\\n    find /usr/local/share/fonts -name .uuid | xargs rm && \\\n    find /usr/share/fonts -name .uuid | xargs rm && \\\n    find /usr/lib/python3.8 -name \"*.pyc\" | xargs rm && \\\n    find /usr/lib/python3 -name \"*.pyc\" | xargs rm && \\\n    find /usr/share/python3 -name \"*.pyc\" | xargs rm && \\\n    truncate --size 0 /etc/machine-id\n\n# Install IC binaries and other data late -- this means everything above\n# will be cached when only the binaries change.\nCOPY opt /opt\n\n# Update POSIX permissions in /opt/ic/\nRUN find /opt -type d -exec chmod 0755 {} \\+ && \\\n    find /opt -type f -exec chmod 0644 {} \\+ && \\\n    chmod 0755 /opt/ic/bin/* && \\\n    chmod 0644 /opt/ic/share/*\n\nCOPY boot /boot\n# Update POSIX permissions in /boot/\nRUN chmod 0644 /boot/extra_boot_args /boot/version.txt\n"
}