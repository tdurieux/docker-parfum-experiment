{
  "startTime": 1674219249260,
  "endTime": 1674219251071,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 117
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# GuestOS - Base Image\n#\n# Build steps:\n# - `docker build -t dfinity/setupos-base:<tag> -f Dockerfile.base .`\n# - `docker push/pull dfinity/setupos-base:<tag>`\n# - `docker build -t dfinity/setupos-base-dev:<tag> --build-arg PACKAGE_FILES=\"packages.common packages.dev\" -f Dockerfile.base .`\n# - `docker push/pull dfinity/setupos-base-dev:<tag>`\n#\n# First build stage:\n# - Download and cache minimal Ubuntu Server 20.04 LTS Docker image\n# - Install and cache upstream packages from built-in Ubuntu repositories\n#\n# NOTE! If you edit this file, you will need to perform the following\n# operations to get your changes deployed.\n#\n# 1. Get your MR approved and merged into master\n# 2. On the next hourly master pipeline, click the \"deploy-setup-os-baseimg\" job\n# 3. Note the sha256 and update the sha256 reference in the neighboring Dockerfiles.\nFROM ubuntu:20.04\n\nENV SOURCE_DATE_EPOCH=0\nENV TZ=UTC\n\n# For the prod image, just use packages.common to define the packages installed\n# on target.\n# For the dev image, use both \"packages.common\" and \"packages.dev\" -- this can\n# be set via docker build args (see above).\nARG PACKAGE_FILES=packages.common\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nCOPY packages.* /tmp/\nRUN apt-get -y update && \\\n    apt-get -y upgrade && \\\n    apt-get -y --no-install-recommends install $(for P in ${PACKAGE_FILES}; do cat /tmp/$P | sed -e \"s/#.*//\" ; done) && \\\n    rm /tmp/packages.* && rm -rf /var/lib/apt/lists/*;\n"
}