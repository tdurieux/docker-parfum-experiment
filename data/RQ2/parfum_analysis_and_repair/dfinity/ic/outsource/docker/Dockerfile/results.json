{
  "startTime": 1674251030640,
  "endTime": 1674251031788,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile builds the image used by the outsource machinery.\n# It is a fairly barebone Ubuntu image with a few tools like Nix and sccache\n# used when remote-building.\n#\n# NOTE: We pass the UID and the primary group ID of the logged user to make\n# sure that permissions within the container (i.e. the 'ubuntu' user) matches\n# that of the user on the host.\nFROM ubuntu:20.04\nLABEL maintainer=\"IDX <infra@dfinity.org>\"\n\n# Set in the docker build to make sure it matches that of the user on the host\n# machine. This makes sure volumes can be mounted and owned by the user.\nARG UID\nARG GID\n\n# The nix version\nARG NIX_VERSION=2.3.10\n\n# The nix version\nARG SCCACHE_VERSION=v0.2.15\n\nRUN apt --yes --quiet update && \\\n    apt --yes --no-install-recommends --quiet --quiet install \\\n\ngit openssh-client xz-utils \\\n\ncurl sudo \\\n\nrsync \\\n\npython3 python3-pip \\\n\njq dosfstools mtools rclone \\\n\nliblmdb-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install sccache in /usr/bin/sccache\nRUN cd /usr/bin; \\\n    curl --fail -L \\\n    https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz \\\n    | tar xvz --strip-components=1 \"sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl/sccache\" \\\n    && chmod 0755 /usr/bin/sccache\n\n# Make sure sccache is working\nRUN sccache --help\n\n# Add the ubuntu used with the user's UID and primary GID on the host\nRUN groupadd --gid ${GID} ubuntu\nRUN useradd --create-home --shell /bin/bash --uid ${UID} --gid ${GID} ubuntu\nRUN usermod --append --groups sudo ubuntu && echo \"ubuntu ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n# Ansible is needed for testnet deploys\nRUN /usr/bin/pip3 install ansible==2.10.7\n\n# From here on, and mostly for the Nix installation, we run commands as the user\nUSER ubuntu\n\nRUN curl --fail -L https://releases.nixos.org/nix/nix-${NIX_VERSION}/install | sh\n\n# For some reason, sourcing bashrc & al doesn't work so we can't source the\n# nix.sh script. I didn't have time to figure out why, but this has the same\n# effect.\nENV PATH=/home/ubuntu/.nix-profile/bin:$PATH \\\n    NIX_PROFILES=\"/nix/var/nix/profiles/default /home/ubuntu/.nix-profile\" \\\n    NIX_SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\n\n# Make sure nix is installed and (at least somewhat working)\nRUN nix --help\n\n# Since we mount the Nix store as a volume, the original store will be\n# overwritten. So we simply copy the executables and hope that they find the\n# dynamic libs to link to. It does work though I'm not 100% sure how (since\n# technically the Nix executable links to dynamic libs in the nix store, but\n# the store is shadowed by the overlay).\nRUN sudo cp $(dirname $(which nix))/* /bin\n"
}