{
  "startTime": 1674248511544,
  "endTime": 1674248513232,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 22,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 77
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 22,
        "columnEnd": 104
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 22,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use an official Python runtime as a parent image\nFROM ubuntu:18.04\n\nMAINTAINER Antoni Rosinol \"arosinol@mit.edu\"\n\n# To avoid tzdata asking for geographic location...\nENV DEBIAN_FRONTEND=noninteractive\n\n# Set the working directory to /root\nENV DIRPATH /root/\nWORKDIR $DIRPATH\n\n#Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends apt-utils && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y git cmake build-essential pkg-config && rm -rf /var/lib/apt/lists/*;\n\n# Install xvfb to provide a display to container for GUI realted testing.\nRUN apt-get update && apt-get install --no-install-recommends -y xvfb && rm -rf /var/lib/apt/lists/*;\n\n# Install OpenCV for Ubuntu 18.04\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      unzip \\\n      libjpeg-dev libpng-dev libtiff-dev \\\n      libvtk6-dev \\\n      libgtk-3-dev \\\n      libatlas-base-dev gfortran && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone https://github.com/opencv/opencv.git\nRUN cd opencv && \\\n      git checkout tags/3.3.1 && \\\n      mkdir build\n\nRUN git clone https://github.com/opencv/opencv_contrib.git\nRUN cd opencv_contrib && \\\n      git checkout tags/3.3.1\n\nRUN cd opencv/build && \\\n      cmake -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/usr/local \\\n      -D BUILD_opencv_python=OFF \\\n      -D BUILD_opencv_python2=OFF \\\n      -D BUILD_opencv_python3=OFF \\\n      -DOPENCV_EXTRA_MODULES_PATH=$DIRPATH/opencv_contrib/modules .. && \\\n      make -j$(nproc) install\n\n# Install GTSAM\nRUN apt-get update && apt-get install --no-install-recommends -y libboost-all-dev libtbb-dev && rm -rf /var/lib/apt/lists/*;\nADD https://api.github.com/repos/borglab/gtsam/git/refs/heads/master version.json\nRUN git clone https://github.com/borglab/gtsam.git\nRUN cd gtsam && \\\n    git fetch && \\\n    git checkout develop && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DGTSAM_BUILD_TESTS=OFF -DGTSAM_BUILD_EXAMPLES_ALWAYS=OFF -DCMAKE_BUILD_TYPE=Release -DGTSAM_BUILD_UNSTABLE=ON -DGTSAM_POSE3_EXPMAP=ON -DGTSAM_ROT3_EXPMAP=ON -DGTSAM_TANGENT_PREINTEGRATION=OFF .. && \\\n    make -j$(nproc) install\n\n# Install Open_GV\nRUN git clone https://github.com/laurentkneip/opengv\nRUN cd opengv && \\\n      mkdir build\nRUN cd opengv/build && \\\n      cmake -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/usr/local \\\n      -DEIGEN_INCLUDE_DIRS=$DIRPATH/gtsam/gtsam/3rdparty/Eigen \\\n      -DEIGEN_INCLUDE_DIR=$DIRPATH/gtsam/gtsam/3rdparty/Eigen .. && \\\n      make -j$(nproc) install\n\n# Install DBoW2\nRUN git clone https://github.com/dorian3d/DBoW2.git\nRUN cd DBoW2 && \\\n      mkdir build && \\\n      cd build && \\\n      cmake .. && \\\n      make -j$(nproc) install\n\n# Install RobustPGO\nADD https://api.github.com/repos/MIT-SPARK/Kimera-RPGO/git/refs/heads/master version.json\nRUN git clone https://github.com/MIT-SPARK/Kimera-RPGO.git\nRUN cd Kimera-RPGO && \\\n      mkdir build && \\\n      cd build && \\\n      cmake .. && \\\n      make -j$(nproc)\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends software-properties-common -y && rm -rf /var/lib/apt/lists/*;\n# Get python3\nRUN apt-get update && \\\n    add-apt-repository ppa:deadsnakes/ppa\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y python3.6 python3.6-dev python-pip python3-pip python-tk python3-tk && rm -rf /var/lib/apt/lists/*;\nRUN python3.6 -m pip install PyQt5==5.14\n\n# Install evo-1 for evaluation\n# Hack to avoid Docker's cache when evo-1 master branch is updated.\nADD https://api.github.com/repos/ToniRV/evo-1/git/refs/heads/master version.json\nRUN git clone https://github.com/ToniRV/evo-1.git\nRUN cd evo-1 && python3.6 $(which pip3) install .\n\n# Install Kimera VIO Evaluation\nRUN python3.6 $(which pip3) install ipython prompt_toolkit\n# Hack to avoid Docker's cache when Kimera VIO Evaluation master branch is updated.\nADD https://api.github.com/repos/MIT-SPARK/Kimera-VIO-Evaluation/git/refs/heads/master version.json\nRUN git clone https://github.com/MIT-SPARK/Kimera-VIO-Evaluation.git\n# We use `pip3 install -e .` so that Jinja2 has access to the webiste template...\nRUN cd Kimera-VIO-Evaluation && git fetch && git checkout master && python3.6 $(which pip3) install -e .\n\n# Install glog, gflags\nRUN apt-get update && apt-get install --no-install-recommends -y libgflags2.2 libgflags-dev libgoogle-glog0v5 libgoogle-glog-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install Pangolin\nRUN apt-get update && apt-get install --no-install-recommends -y libgl1-mesa-dev libglew-dev && rm -rf /var/lib/apt/lists/*;\nRUN git clone https://github.com/stevenlovegrove/Pangolin.git\nRUN cd Pangolin && \\\n      mkdir build && \\\n      cd build && \\\n      cmake .. && \\\n      make -j$(nproc)\n"
}