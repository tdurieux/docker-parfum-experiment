diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mit-spark/kimera-vio/Dockerfile_18_04 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mit-spark/kimera-vio/Dockerfile_18_04/repaired.Dockerfile
index c72cd03..ffc533b 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mit-spark/kimera-vio/Dockerfile_18_04
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mit-spark/kimera-vio/Dockerfile_18_04/repaired.Dockerfile
@@ -11,19 +11,19 @@ ENV DIRPATH /root/
 WORKDIR $DIRPATH
 
 #Install build dependencies
-RUN apt-get update && apt-get install -y --no-install-recommends apt-utils
-RUN apt-get update && apt-get install -y git cmake build-essential pkg-config
+RUN apt-get update && apt-get install -y --no-install-recommends apt-utils && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install --no-install-recommends -y git cmake build-essential pkg-config && rm -rf /var/lib/apt/lists/*;
 
 # Install xvfb to provide a display to container for GUI realted testing.
-RUN apt-get update && apt-get install -y xvfb
+RUN apt-get update && apt-get install --no-install-recommends -y xvfb && rm -rf /var/lib/apt/lists/*;
 
 # Install OpenCV for Ubuntu 18.04
-RUN apt-get update && apt-get install -y \
+RUN apt-get update && apt-get install --no-install-recommends -y \
       unzip \
       libjpeg-dev libpng-dev libtiff-dev \
       libvtk6-dev \
       libgtk-3-dev \
-      libatlas-base-dev gfortran
+      libatlas-base-dev gfortran && rm -rf /var/lib/apt/lists/*;
 
 RUN git clone https://github.com/opencv/opencv.git
 RUN cd opencv && \
@@ -44,7 +44,7 @@ RUN cd opencv/build && \
       make -j$(nproc) install
 
 # Install GTSAM
-RUN apt-get update && apt-get install -y libboost-all-dev libtbb-dev
+RUN apt-get update && apt-get install --no-install-recommends -y libboost-all-dev libtbb-dev && rm -rf /var/lib/apt/lists/*;
 ADD https://api.github.com/repos/borglab/gtsam/git/refs/heads/master version.json
 RUN git clone https://github.com/borglab/gtsam.git
 RUN cd gtsam && \
@@ -84,12 +84,12 @@ RUN cd Kimera-RPGO && \
       make -j$(nproc)
 
 RUN apt-get update && \
-    apt-get install software-properties-common -y
+    apt-get install --no-install-recommends software-properties-common -y && rm -rf /var/lib/apt/lists/*;
 # Get python3
 RUN apt-get update && \
     add-apt-repository ppa:deadsnakes/ppa
 RUN apt-get update && \
-    apt-get install -y python3.6 python3.6-dev python-pip python3-pip python-tk python3-tk
+    apt-get install --no-install-recommends -y python3.6 python3.6-dev python-pip python3-pip python-tk python3-tk && rm -rf /var/lib/apt/lists/*;
 RUN python3.6 -m pip install PyQt5==5.14
 
 # Install evo-1 for evaluation
@@ -107,10 +107,10 @@ RUN git clone https://github.com/MIT-SPARK/Kimera-VIO-Evaluation.git
 RUN cd Kimera-VIO-Evaluation && git fetch && git checkout master && python3.6 $(which pip3) install -e .
 
 # Install glog, gflags
-RUN apt-get update && apt-get install -y libgflags2.2 libgflags-dev libgoogle-glog0v5 libgoogle-glog-dev
+RUN apt-get update && apt-get install --no-install-recommends -y libgflags2.2 libgflags-dev libgoogle-glog0v5 libgoogle-glog-dev && rm -rf /var/lib/apt/lists/*;
 
 # Install Pangolin
-RUN apt-get update && apt-get install -y libgl1-mesa-dev libglew-dev
+RUN apt-get update && apt-get install --no-install-recommends -y libgl1-mesa-dev libglew-dev && rm -rf /var/lib/apt/lists/*;
 RUN git clone https://github.com/stevenlovegrove/Pangolin.git
 RUN cd Pangolin && \
       mkdir build && \