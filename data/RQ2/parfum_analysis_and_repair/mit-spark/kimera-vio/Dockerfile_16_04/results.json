{
  "startTime": 1674251424014,
  "endTime": 1674251425176,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 22,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 77
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 22,
        "columnEnd": 104
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 22,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use an official Python runtime as a parent image\nFROM ubuntu:16.04\n\nMAINTAINER Antoni Rosinol \"arosinol@mit.edu\"\n\n# To avoid tzdata asking for geographic location...\nENV DEBIAN_FRONTEND=noninteractive\n\n# Set the working directory to /root\nENV DIRPATH /root/\nWORKDIR $DIRPATH\n\n#Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends apt-utils && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y git cmake build-essential pkg-config && rm -rf /var/lib/apt/lists/*;\n\n# Install xvfb to provide a display to container for GUI realted testing.\nRUN apt-get update && apt-get install --no-install-recommends -y xvfb && rm -rf /var/lib/apt/lists/*;\n\n# Install OpenCV for Ubuntu 18.04\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      unzip \\\n      libjpeg-dev libpng-dev libtiff-dev \\\n      libvtk5-dev \\\n      libgtk2.0-dev \\\n      libatlas-base-dev gfortran && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone https://github.com/opencv/opencv.git\nRUN cd opencv && \\\n      git checkout tags/3.3.1 && \\\n      mkdir build\n\nRUN git clone https://github.com/opencv/opencv_contrib.git\nRUN cd opencv_contrib && \\\n      git checkout tags/3.3.1\n\nRUN cd opencv/build && \\\n      cmake -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/usr/local \\\n      -D BUILD_opencv_python=OFF \\\n      -D BUILD_opencv_python2=OFF \\\n      -D BUILD_opencv_python3=OFF \\\n      -DOPENCV_EXTRA_MODULES_PATH=$DIRPATH/opencv_contrib/modules .. && \\\n      make -j$(nproc) install\n\n# Install GTSAM (in 16_04 it needs an updated cmake...)\nADD https://cmake.org/files/v3.15/cmake-3.15.7-Linux-x86_64.sh /cmake-3.15.7-Linux-x86_64.sh\nRUN mkdir /opt/cmake\nRUN sh /cmake-3.15.7-Linux-x86_64.sh --prefix=/opt/cmake --skip-license\nRUN ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake\nRUN apt-get update && apt-get install --no-install-recommends -y libboost-all-dev libtbb-dev && rm -rf /var/lib/apt/lists/*;\nADD https://api.github.com/repos/borglab/gtsam/git/refs/heads/master version.json\nRUN git clone https://github.com/borglab/gtsam.git\nRUN cd gtsam && \\\n    git fetch && \\\n    git checkout develop && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DGTSAM_BUILD_TESTS=OFF -DGTSAM_BUILD_EXAMPLES_ALWAYS=OFF -DCMAKE_BUILD_TYPE=Release -DGTSAM_BUILD_UNSTABLE=ON -DGTSAM_POSE3_EXPMAP=ON -DGTSAM_ROT3_EXPMAP=ON -DGTSAM_TANGENT_PREINTEGRATION=OFF .. && \\\n    make -j$(nproc) install\n\n# Install Open_GV\nRUN git clone https://github.com/laurentkneip/opengv\nRUN cd opengv && \\\n      mkdir build\nRUN cd opengv/build && \\\n      cmake -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/usr/local \\\n      -DEIGEN_INCLUDE_DIRS=$DIRPATH/gtsam/gtsam/3rdparty/Eigen \\\n      -DEIGEN_INCLUDE_DIR=$DIRPATH/gtsam/gtsam/3rdparty/Eigen .. && \\\n      make -j$(nproc) install\n\n# Install DBoW2\nRUN git clone https://github.com/dorian3d/DBoW2.git\nRUN cd DBoW2 && \\\n      mkdir build && \\\n      cd build && \\\n      cmake .. && \\\n      make -j$(nproc) install\n\n# Install RobustPGO\nADD https://api.github.com/repos/MIT-SPARK/Kimera-RPGO/git/refs/heads/master version.json\nRUN git clone https://github.com/MIT-SPARK/Kimera-RPGO.git\nRUN cd Kimera-RPGO && \\\n      mkdir build && \\\n      cd build && \\\n      cmake .. && \\\n      make -j$(nproc)\n\n# Install glog, gflags\nRUN apt-get update && apt-get install --no-install-recommends -y libgflags2v5 libgflags-dev libgoogle-glog0v5 libgoogle-glog-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install Pangolin\nRUN apt-get update && apt-get install --no-install-recommends -y libgl1-mesa-dev libglew-dev && rm -rf /var/lib/apt/lists/*;\nRUN git clone https://github.com/stevenlovegrove/Pangolin.git\nRUN cd Pangolin && \\\n      mkdir build && \\\n      cd build && \\\n      cmake .. && \\\n      make -j$(nproc)\n\n"
}