{
  "startTime": 1674255968565,
  "endTime": 1674255969179,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n# Run glxgears in a container.\n# This image uses the simple approach of sharing the host's X11 socket and GPU\n# device with the container. This method requires the container, GPU device and\n# display to be on the same host, but gives performance that is equivalent to\n# running the application directly (i.e. not in a container) on the host.\n\n# With this approach we build Nvidia libglvnd inside the container.\n# This means that we don't have to bind-mount any Nvidia libraries from the\n# host to the container, which arguably makes the container that bit more\n# isolated. This image is a little bit bloaty as it requires all of the build\n# tools in order to build libglvnd. A better approach might be to separate\n# the build into a separate container whose job is to build libglvnd and\n# export the built libraries into a libglvnd.tar.gz which you could then ADD\n# into an image, which should result in much smaller images.\n# Using this approach will result in Nvidia specific Dockerfiles whereas the\n# approach of bind-mounting the required libraries from the host will result in\n# Dockerfiles that can be used with different GPU drivers, where the wrangling\n# may be done in the launch script.\n\nFROM debian:stretch-slim\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n    git \\\n    ca-certificates \\\n    make \\\n    automake \\\n    autoconf \\\n    libtool \\\n    pkg-config \\\n    python \\\n    libxext-dev \\\n    libx11-dev \\\n    x11proto-gl-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt/libglvnd\nRUN git clone --branch=v1.0.0 https://github.com/NVIDIA/libglvnd.git . && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n    make -j\"$(nproc)\" install-strip && \\\n    find /usr/local/lib/x86_64-linux-gnu -type f -name 'lib*.la' -delete\n\n# Only the first line below seems to be needed with an Ubuntu base image, but\n# all of it is needed when using debian:stretch-slim\nRUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf && \\\n    ldconfig && \\\n    echo '/usr/local/$LIB/libGL.so.1' >> /etc/ld.so.preload && \\\n    echo '/usr/local/$LIB/libEGL.so.1' >> /etc/ld.so.preload\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES graphics\n\n#-------------------------------------------------------------------------------\n\n# Install glxgears\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive \\\n    # Add the packages used\n    apt-get install -y --no-install-recommends \\\n\tmesa-utils && \\\n\trm -rf /var/lib/apt/lists/*\n\nENV LIBGL_DEBUG verbose\nENTRYPOINT [\"glxgears\"]\n\n#-------------------------------------------------------------------------------\n# Example usage\n#\n# Build the image\n# docker build -t glxgears-libglvnd -f Dockerfile-libglvnd .\n#\n# To run:\n#\n# DOCKER_COMMAND=docker\n# # If user isn't in docker group prefix docker with sudo\n# if ! (id -nG $(id -un) | grep -qw docker); then\n#     DOCKER_COMMAND=\"sudo $DOCKER_COMMAND\"\n# fi\n#\n# # Create .Xauthority.docker file with wildcarded hostname.\n# XAUTH=${XAUTHORITY:-$HOME/.Xauthority}\n# DOCKER_XAUTHORITY=${XAUTH}.docker\n# cp --preserve=all $XAUTH $DOCKER_XAUTHORITY\n# xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f $DOCKER_XAUTHORITY nmerge -\n#\n# $DOCKER_COMMAND run --runtime=nvidia --rm \\\n#     -u $(id -u):$(id -g) \\\n#     -v /etc/passwd:/etc/passwd:ro \\\n#     -e DISPLAY=unix$DISPLAY \\\n#     -v /tmp/.X11-unix:/tmp/.X11-unix:ro \\\n#     -e XAUTHORITY=$DOCKER_XAUTHORITY \\\n#     -v $DOCKER_XAUTHORITY:$DOCKER_XAUTHORITY:ro \\\n#     glxgears-libglvnd\n\n"
}