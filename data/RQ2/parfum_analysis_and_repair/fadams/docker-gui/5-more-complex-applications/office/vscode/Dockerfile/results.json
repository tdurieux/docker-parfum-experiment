{
  "startTime": 1674219167227,
  "endTime": 1674219167930,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n# Visual Studio Code on Linux\n#\n# This Dockerfile builds the vscode Desktop IDE.\n# That is to say the one you'd install by visiting:\n# https://code.visualstudio.com/\n# then downloading and installing the .deb from the web page link.\n#\n# The download URL used below was grokked from a manual download.\n# https://az764295.vo.msecnd.net/stable/ea3859d4ba2f3e577a159bc91e3074c5d85c0523/code_1.52.1-1608136922_amd64.deb\n\n# Visual Studio Code allows for remote development in containers.\n# The Visual Studio Code Remote Containers extension lets you use a Docker\n# container as a full-featured development environment. It allows you to open\n# any folder inside (or mounted into) a container and take advantage of Visual\n# Studio Code's full feature set. A devcontainer.json file in your project\n# tells VS Code how to access (or create) a development container with a\n# well-defined tool and runtime stack. This container can be used to run an\n# application or to sandbox tools, libraries, or runtimes needed for working\n# with a codebase.\n#\n# https://code.visualstudio.com/docs/remote/containers\n# https://code.visualstudio.com/docs/remote/containers-tutorial\n# https://www.docker.com/blog/how-to-develop-inside-a-container-using-visual-studio-code-remote-containers/\n#\n# Note that the above tutorials assume vscode IDE is installed on desktop\n# not in a container, so the instruction \"Once the process starts, navigate\n# to http://localhost:3000 and you should see the simple Node.js server\n# running!\" will fail. To resolve this use the IP of either the\n# vsc-vscode-remote... container or the vscode container itself e.g. via\n# docker inspect --format '{{ .NetworkSettings.IPAddress }}' container_name_or_id\n# Alternatively, launch the container in the host's network namespace\n# by adding --network=host to the launch script.\n#\n# To enable this capability we install the docker CLI in this image\n# and bind-mount the docker socket in the container.\n\nFROM debian:bullseye-slim\n\n# Install vscode Desktop IDE\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive \\\n    # Add the packages used\n    apt-get install -y --no-install-recommends \\\n\tapt-transport-https wget gnupg ca-certificates \\\n    libgl1-mesa-glx libgl1-mesa-dri \\\n    libnss3 libxkbfile1 libsecret-1-0 libgtk-3-0 \\\n    libxss1 libgbm1 libx11-xcb1 libxcb-dri3-0 \\\n    libxtst6 libasound2 pulseaudio librsvg2-common \\\n    fonts-symbola fonts-lmodern fonts-freefont-ttf \\\n    fonts-liberation fonts-dejavu gsfonts git && \\\n    # Download and install vscode.\n    VERSION=code_1.52.1-1608136922 && \\\n    PACKAGE=${VERSION}_amd64.deb && \\\n    DOWNLOAD_URL=https://az764295.vo.msecnd.net/stable/ea3859d4ba2f3e577a159bc91e3074c5d85c0523/${PACKAGE} && \\\n    wget -O ${PACKAGE} ${DOWNLOAD_URL} && \\\n    dpkg -i ${PACKAGE} && rm ${PACKAGE} && \\\n    #---------------------------------------------------------------------------\n    # Adding Docker CLI to enable vscode remote development\n    # in containers feature. Remove this block if support for\n    # this feaure is not required.\n    # Add Dockerâ€™s official GPG key:\n    wget -O /usr/share/keyrings/docker-archive.key \\\n            https://download.docker.com/linux/debian/gpg && \\\n    # Add Docker repository. Note we're using buster here\n    # as bullseye repo isn't yet available.\n    echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive.key] https://download.docker.com/linux/debian buster stable main\" > /etc/apt/sources.list.d/docker.list && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends docker-ce-cli && \\\n       #---------------------------------------------------------------------------\n\trm -rf /var/lib/apt/lists/* && \\\n    cp /etc/pulse/client.conf \\\n       /etc/pulse/client-noshm.conf && \\\n    sed -i \"s/; enable-shm = yes/enable-shm = no/g\" \\\n        /etc/pulse/client-noshm.conf\n\n# Use -w (Wait for the files to be closed before returning) option\n# otherwise /usr/bin/code returns, immediately causing the container to exit.\nENTRYPOINT [\"/usr/bin/code\", \"-w\"]\n\n#-------------------------------------------------------------------------------\n#\n# To build the image\n# docker build -t vscode .\n#\n\n"
}