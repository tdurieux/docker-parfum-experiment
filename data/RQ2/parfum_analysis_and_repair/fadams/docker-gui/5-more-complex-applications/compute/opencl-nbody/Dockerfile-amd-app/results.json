{
  "startTime": 1674251748093,
  "endTime": 1674251750555,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\nFROM debian:stretch-slim\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive \\\n    # Add the packages\n    apt-get install -y --no-install-recommends \\\n    ocl-icd-libopencl1 ocl-icd-opencl-dev libnuma1 clinfo \\\n    libxml2 libxmu-dev freeglut3-dev libglew-dev \\\n    libgl1-mesa-glx libgl1-mesa-dri wget ca-certificates \\\n    bzip2 tar gcc g++ make && \\\n    # Add the AMD APP OpenCL Installable Client Driver\n    mkdir -p /opt/amd/opencl/install && \\\n    cd /opt/amd/opencl/install && \\\n    wget -O AMD-APP-SDKInstaller-v3.0.130.136-GA-linux64.tar.bz2 \"https://archive.org/download/AMDAPPSDK/AMD-APP-SDKInstaller-v3.0.130.136-GA-linux64.tar.bz2\" && \\\n    tar xjf AMD-APP-SDKInstaller-v3.0.130.136-GA-linux64.tar.bz2 && \\\n    ./AMD-APP-SDK-v3.0.130.136-GA-linux64.sh --tar xvfp && \\\n    mv lib/x86_64/libamdocl12cl64.so /opt/amd/opencl && \\\n    mv lib/x86_64/sdk/libamdocl64.so /opt/amd/opencl && \\\n    # Add ICD to the ICD registry\n    mkdir -p /etc/OpenCL/vendors && \\\n    echo \"/opt/amd/opencl/libamdocl64.so\" > \\\n         /etc/OpenCL/vendors/amdocl64.icd && \\\n    # Download the Nvidia SDK which includes the OpenCL samples.\n    # Note that the samples listed at https://developer.nvidia.com/opencl\n    # are incomplete, missing the \"shared\" and \"common\" code needed to\n    # compile! We therefore pull the 4.2.9 SDK here, because that is the\n    # last version to include the full compilable OpenCL source tree.\n    cd /usr/local/src && \\\n    wget -O gpucomputingsdk_4.2.9_linux.run \"https://developer.download.nvidia.com/compute/cuda/4_2/rel/sdk/gpucomputingsdk_4.2.9_linux.run\" && \\\n    chmod +x gpucomputingsdk_4.2.9_linux.run && \\\n    ./gpucomputingsdk_4.2.9_linux.run --tar xfp && \\\n    rm gpucomputingsdk_4.2.9_linux.run && \\\n    rm install-sdk-linux.pl && \\\n    mv sdk/OpenCL sdk/shared . && \\\n    rm -rf sdk && rm -rf shared/lib/linux && \\\n    sed -i 's/GLEW_x86_64/GLEW/' \\\n        /usr/local/src/OpenCL/common/common_opencl.mk && \\\n    sed -i 's/-Wimplicit//' \\\n        /usr/local/src/OpenCL/common/common_opencl.mk && \\\n    # Fix issue with oclNbodyKernel.cl\n    sed -i 's/mul24(get_local_size(0), get_local_id(1))/mul24((uint)get_local_size(0), get_local_id(1))/' /usr/local/src/OpenCL/src/oclNbody/oclNbodyKernel.cl && \\\n    # Fix issue with SobelFilter.cl (Not used here, but fixed for info)\n    sed -i 's/mul24(get_local_size(1), get_global_size(0))/mul24((uint)get_local_size(1), get_global_size(0))/' /usr/local/src/OpenCL/src/oclSobelFilter/SobelFilter.cl && \\\n    sed -i 's/mul24((get_group_id(0) + 1)/mul24((uint)(get_group_id(0) + 1)/' /usr/local/src/OpenCL/src/oclSobelFilter/SobelFilter.cl && \\\n    sed -i 's/mul24(get_group_id(0)/mul24((uint)get_group_id(0)/' /usr/local/src/OpenCL/src/oclSobelFilter/SobelFilter.cl && \\\n    # Replace hard-coded CL_DEVICE_TYPE_GPU with CL_DEVICE_TYPE_CPU\n    # so the samples will work (as far as possible) on Intel CPU device.\n    for i in $(grep -rwl /usr/local/src/OpenCL/src -e CL_DEVICE_TYPE_GPU); do sed -i 's/CL_DEVICE_TYPE_GPU/CL_DEVICE_TYPE_CPU/' $i; done && \\\n    cd OpenCL && \\\n    mv src/oclNbody . && rm -rf src/* && mv oclNbody src/. && \\\n    make && \\\n    chmod 777 /usr/local/bin && \\\n    mkdir -p /usr/local/bin/src && \\\n    cp /usr/local/src/OpenCL/bin/linux/release/oclNbody \\\n       /usr/local/bin/. && \\\n    cp /usr/local/src/OpenCL/src/oclNbody/*.cl \\\n       /usr/local/bin/src/. && \\\n    # Remove packages used for installation\n    rm -rf /opt/amd/opencl/install && \\\n    rm -rf /usr/local/src/* && \\\n    apt-get clean && \\\n    apt-get purge -y wget bzip2 ca-certificates \\\n            gcc g++ make && \\\n    apt-get autoremove -y && \\\n\trm -rf /var/lib/apt/lists/* && rm AMD-APP-SDKInstaller-v3.0.130.136-GA-linux64.tar.bz2\n\n# Set WORKDIR and use relative path as this example uses Nvidia's\n# shrFindFilePath to find the kernel directory and using the absolute\n# path doesn't work correctly.\nWORKDIR /usr/local/bin/\nENTRYPOINT [\"oclNbody\"]\n\n#-------------------------------------------------------------------------------\n# Example usage\n#\n# Build the image\n# docker build -t opencl-nbody-amd-app -f Dockerfile-amd-app .\n\n"
}