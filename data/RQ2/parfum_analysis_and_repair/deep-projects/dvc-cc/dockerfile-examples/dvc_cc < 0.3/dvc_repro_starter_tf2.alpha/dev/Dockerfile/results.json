{
  "startTime": 1674254009348,
  "endTime": 1674254010033,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 6,
        "columnStart": 3,
        "columnEnd": 111
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 6,
        "columnStart": 3,
        "columnEnd": 111
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker.io/nvidia/cuda:10.1-cudnn7-runtime-ubuntu18.04\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update \\\n&& apt-get install --no-install-recommends -y unzip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget \\\ncurl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git sshfs lshw \\\n&& useradd -ms /bin/bash cc && rm -rf /var/lib/apt/lists/*;\n\n# switch user\nUSER cc\n\n# install python via pyenv\nENV PATH /home/cc/.pyenv/bin:/home/cc/.pyenv/shims:${PATH}\n\nRUN curl -f https://pyenv.run | bash \\\n&& pyenv install 3.7.2 \\\n&& pyenv global 3.7.2\n\nRUN pip install --no-cache-dir --upgrade pip\n\n# For the direcotry connector\nRUN pip install --no-cache-dir --upgrade red-connector-ssh==0.7\n\n# install tensorflow\nRUN pip install --no-cache-dir tensorflow-gpu==2.0.0-rc0\n\n# Some common environmenta variables that Python uses\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\n\n# Install a specific version of TensorFlow\n# You may also install anything else from pip like this\nRUN pip install --no-cache-dir tensorboard\n\nRUN pip install --no-cache-dir torch===1.2.0 torchvision===0.4.0 -f https://download.pytorch.org/whl/torch_stable.html\n\nRUN pip --no-cache-dir install \\\n        Pillow \\\n        h5py \\\n        ipykernel \\\n        jupyter \\\n        keras_applications \\\n        keras_preprocessing \\\n        matplotlib \\\n        mock \\\n        numpy \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        dvc \\\n        paramiko \\\n        pyyaml \\\n        seaborn \\\n        pandas\n\nRUN echo 'INSTALL dvc-cc-agent and the dvc-cc-connector 53!'\n\nRUN pip install --no-cache-dir dvc-cc-agent\nRUN pip install --no-cache-dir dvc-cc-connector\n\nWORKDIR home/cc/\n\n"
}