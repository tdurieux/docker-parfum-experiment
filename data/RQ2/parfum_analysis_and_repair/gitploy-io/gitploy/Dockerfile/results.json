{
  "startTime": 1674253254718,
  "endTime": 1674253255310,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build the server binary file.\nFROM golang:1.17 AS server\nARG OSS=false\n\nWORKDIR /server\n\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY . .\nRUN if [ \"${OSS}\" = \"false\" ]; then \\\n        echo \"Build the enterprise edition\"; \\\n        go build -o gitploy-server ./cmd/server; \\\n    else \\\n        echo \"Build the community edition\"; \\\n        go build -o gitploy-server -tags \"oss\" ./cmd/server; \\\n    fi\n\n# Build UI.\nFROM node:14.17.0 AS ui\nARG OSS=false\n\nWORKDIR /ui\n\nENV PATH /ui/node_modules/.bin:$PATH\n\nCOPY ./ui/package.json ./ui/package-lock.json ./\nRUN npm install --silent && npm cache clean --force;\n\nCOPY ./ui ./\nENV REACT_APP_GITPLOY_OSS=\"${OSS}\"\nRUN npm run build\n\n# Copy to the final image.\nFROM golang:1.17-buster AS gitploy\n\nWORKDIR /app\n\n# Create DB\nRUN mkdir /data\n\nCOPY --from=server --chown=root:root /server/LICENSE /server/NOTICE ./\nCOPY --from=server --chown=root:root /server/gitploy-server /go/bin/gitploy-server\n\n# Copy UI output into the assets directory.\nCOPY --from=ui --chown=root:root /ui/build/ /app/\n\nENTRYPOINT [ \"/go/bin/gitploy-server\" ]"
}