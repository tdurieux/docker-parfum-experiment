{
  "startTime": 1674255053357,
  "endTime": 1674255056530,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Base build image\nFROM golang:1.11-alpine AS build_base\n\n# Install some dependencies needed to build the project\nRUN apk add --no-cache bash git gcc g++ libc-dev\n\nCOPY /utils/go.mod /utils/go.sum /chuck/utils/\nCOPY /storage/go.mod /storage/go.sum /chuck/storage/\nCOPY /handlers/go.mod /handlers/go.sum /chuck/handlers/\nCOPY /cmds/go.mod /cmds/go.sum /chuck/cmds/\nCOPY go.mod go.sum /chuck/\n\nWORKDIR /chuck/\n\n# Force the go compiler to use modules\nENV GO111MODULE=on\n\n# This is the ‘magic’ step that will download all the dependencies that are specified in\n# the go.mod and go.sum file.\n# Because of how the layer caching system works in Docker, the  go mod download\n# command will _ only_ be re-run when the go.mod or go.sum file change\n# (or when we add another docker instruction this line)\nRUN go mod download\n\n# This image builds the chuck\nFROM build_base AS server_builder\n\nCOPY /utils/ ./utils\nCOPY /storage/ ./storage\nCOPY /handlers/ ./handlers\nCOPY /cmds/ ./cmds\nCOPY main.go .\n\n# And compile the project\nRUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -a -tags netgo -ldflags '-w -extldflags \"-static\"'\n\n#In this last stage, we start from a fresh Alpine image, to reduce the image size and not ship the Go compiler in our production artifacts.\nFROM alpine AS chuck-intg\n\n# Finally we copy the statically compiled Go binary.\nCOPY --from=server_builder ./chuck /bin/chuck/\nCOPY ca.pem key.pem /bin/chuck/\n\nEXPOSE 8123\n\nWORKDIR /bin/chuck/\nCMD [\"./chuck\", \"intg\", \"-address=0.0.0.0\", \"-port=8123\", \"-folder=intg\"]"
}