{
  "startTime": 1674216858275,
  "endTime": 1674216859305,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##############################################################\n# This Dockerfile contains the Devito codes.\n#\n# BUILD:\n#   docker build --network=host --file docker/Dockerfile --tag devito .\n#\n# LEGACY:\n#   (1) Option MPI 3.0:\n#   docker build --network=host --build-arg MPI_VER=3 --file docker/Dockerfile --tag devito .\n#\n#   (2) Option MPI 4.0:\n#   Enabling and using MPI 4.0.5 works on R450 drivers, but is showing compatibility\n#   issues during testing on older R418 drivers.\n#\n#   docker build --network=host --build-arg MPI_VER=4 --file docker/Dockerfile --tag devito .\n#\n# RUN:\n#   docker run --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 devito\n#   docker run --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 --device=/dev/infiniband/uverbs0 --device=/dev/infiniband/rdma_cm  devito\n#\n# to run in user context on a cluster with shared filesystem, you can add the correct user config as docker options e.g.:\n#   docker run --rm -it -v `pwd`:`pwd` -w `pwd` -u $(id -u):$(id -g) devito python examples/seismic/acoustic/acoustic_example.py\n#\n##############################################################\n\nFROM python:3.7\n\nRUN apt-get update && apt-get install --no-install-recommends -y -q \\\n    mpich \\\n    libmpich-dev \\\n    libgl1-mesa-glx && rm -rf /var/lib/apt/lists/*;\n\n# Copy Devito\nADD . /app/devito\n# Remove git files\nRUN rm -rf /app/devito/.git\n\n#Â Install pip dependencies and devito as a pip package\nRUN python3 -m venv /venv && \\\n    /venv/bin/pip install --no-cache-dir --upgrade pip && \\\n    /venv/bin/pip install --no-cache-dir jupyter && \\\n    /venv/bin/pip install --no-cache-dir wheel && \\\n    /venv/bin/pip install --no-cache-dir -e /app/devito[extras,mpi] && \\\n    rm -rf ~/.cache/pip\n\nADD docker/run-jupyter.sh /jupyter\nADD docker/run-tests.sh /tests\nADD docker/run-print-defaults.sh /print-defaults\nADD docker/entrypoint.sh /docker-entrypoint.sh\n\nRUN chmod +x \\\n    /print-defaults \\\n    /jupyter \\\n    /tests \\\n    /docker-entrypoint.sh\n\n## Create App user\n# Set the home directory to our app user's home.\nENV HOME=/app\nENV APP_HOME=/app\n\n# Create the home directory for the new app user.\n# Create an app user so our program doesn't run as root.\n# Chown all the files to the app user.\nRUN mkdir -p /app && \\\n    groupadd -r app && \\\n    useradd -r -g app -d /app -s /sbin/nologin -c \"Docker image user\" app && \\\n    chown -R app:app $APP_HOME && \\\n    chown -R app:app /docker-entrypoint.sh && \\\n    chown -R app:app /print-defaults && \\\n    chown -R app:app /tests && \\\n    chown -R app:app /jupyter && \\\n    chown -R app:app /venv\n\n# Change to the app user.\nUSER app\nWORKDIR /app/devito\n\nENV DEVITO_ARCH=\"gcc\"\nENV DEVITO_LANGUAGE=\"openmp\"\n\nEXPOSE 8888\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/jupyter\"]\n"
}