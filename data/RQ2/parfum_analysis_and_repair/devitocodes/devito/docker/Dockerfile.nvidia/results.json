{
  "startTime": 1674248675156,
  "endTime": 1674248676056,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 57,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedDockerfile": "##############################################################\n# This Dockerfile contains the additional NVIDIA compilers,\n# libraries, and plugins to enable OpenACC and NVIDIA GPU\n# acceleration of Devito codes.\n#\n# BUILD:\n#   docker build --network=host --file docker/Dockerfile.nvidia --tag devito:nvidia .\n#\n# LEGACY:\n#   (1) Option MPI 3.0:\n#   docker build --network=host --build-arg MPI_VER=3 --file docker/Dockerfile.nvidia --tag devito:nvidia .\n#\n#   (2) Option MPI 4.0:\n#   Enabling and using MPI 4.0.5 works on R450 drivers, but is showing compatibility\n#   issues during testing on older R418 drivers.\n#\n#   docker build --network=host --build-arg MPI_VER=4 --file docker/Dockerfile.nvidia --tag devito:nvidia .\n#\n# SQUASH:\n#   If you want a smaller image or to collapse/combine the smaller layers, try squashing your docker image\n#\n#   pip install docker-squash\n#   docker tag devito:nvidia devito:nvidia-pre\n#   docker-squash  -t devito:nvidia-pre devito:nvidia\n#\n# RUN:\n#   docker run --gpus all --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 devito:nvidia\n#   docker run --gpus all --rm -it devito:nvidia python examples/seismic/acoustic/acoustic_example.py\n#\n#   docker run --gpus all --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 --device=/dev/infiniband/uverbs0 --device=/dev/infiniband/rdma_cm  devito:nvidia\n#\n# to run in user context on a cluster with shared filesystem, you can add the correct user config as docker options e.g.:\n#   docker run --gpus all --rm -it -v `pwd`:`pwd` -w `pwd` -u $(id -u):$(id -g) devito:nvidia python examples/seismic/acoustic/acoustic_example.py\n#\n##############################################################\n#FROM python:3.9\nFROM python:3.9-slim-bullseye\n\nENV DEBIAN_FRONTEND noninteractive\n\n# nodesource: nvdashboard requires nodejs>=10 \nRUN echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' > /etc/apt/sources.list.d/nvhpc.list\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y -q \\\n        apt-utils curl wget && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash - && \\\n    apt-get install --no-install-recommends -y -q \\\n#        nvhpc-22-5-cuda-multi \\\n        nvhpc-22-5 \\\n        liblapack-dev \\\n        libblas-dev \\\n        libibverbs-dev libmlx4-1 libmlx5-1 ibutils \\\n# Devito Jupyter Notebooks and Ux experience\n        nodejs \\\n        texlive-latex-extra texlive-fonts-recommended dvipng cm-super \\\n        ffmpeg vim && \\\n    wget -q -P /app/nvcomp_exts/ \\\n        https://developer.download.nvidia.com/compute/nvcomp/2.2/local_installers/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz && \\\n    tar -xvf /app/nvcomp_exts/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz -C /app/nvcomp_exts && \\\n    apt-get update -y && \\\n    apt-get autoclean && \\\n    apt-get autoremove && \\\n    rm -rf /app/nvcomp_exts/nvcomp* && \\\n    rm -rf /var/lib/apt/lists/* && rm /app/nvcomp_exts/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz\n\nARG HPCSDK_HOME=/opt/nvidia/hpc_sdk/Linux_x86_64/2022\nARG HPCSDK_CUPTI=/opt/nvidia/hpc_sdk/Linux_x86_64/2022/cuda/11.6/extras/CUPTI\n#MPI_VER options 3,4,HPCX\nARG MPI_VER=HPCX\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\n\n# required for nvidia-docker v1\nRUN echo \"$HPCSDK_HOME/cuda/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"$HPCSDK_HOME/cuda/lib64\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"$HPCSDK_HOME/compilers/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"$HPCSDK_HOME/comm_libs/mpi/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"$HPCSDK_CUPTI/lib64\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"$HPCSDK_HOME/math_libs/lib64\" >> /etc/ld.so.conf.d/nvidia.conf   \n\n# Compression\nENV NVCOMP_EXTS_ROOT /app/nvcomp_exts/ubuntu18.04/11.6\nENV bitcomp_DIR $NVCOMP_EXTS_ROOT/lib/\n\n# Compiler, CUDA, and Library paths\nENV CUDA_HOME $HPCSDK_HOME/cuda\nENV CUDA_ROOT $HPCSDK_HOME/cuda/bin\nENV PATH $HPCSDK_HOME/compilers/bin:$HPCSDK_HOME/cuda/bin:$HPCSDK_HOME/comm_libs/mpi/bin:${PATH}\nENV LD_LIBRARY_PATH $HPCSDK_HOME/cuda/lib:$HPCSDK_HOME/cuda/lib64:$HPCSDK_HOME/compilers/lib:$HPCSDK_HOME/math_libs/lib64:$HPCSDK_HOME/comm_libs/mpi/lib:$HPCSDK_CUPTI/lib64:bitcomp_DIR:${LD_LIBRARY_PATH}\n\n# Copy Devito\nADD . /app/devito\n# Remove git files\nRUN rm -rf /app/devito/.git\n\n# MPI ROOT USER DEFAULTS\nENV OMPI_ALLOW_RUN_AS_ROOT=1\nENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1\nENV OMPI_MCA_rmaps_base_oversubscribe=1\nENV OMPI_MCA_btl_base_warn_component_unused=0\nENV UCX_MEMTYPE_CACHE=no\nENV UCX_NET_DEVICES=all\nENV UCX_SHM_DEVICES=all\nENV UCX_ACC_DEVICES=all\nENV NCCL_UCX_RNDV_THRESH=0\nENV NCCL_UCX_RNDV_SCHEME=get_zcopy\nENV NCCL_PLUGIN_P2P=ucx\nENV MELLANOX_MOUNT_DRIVER=1\n\nENV UCX_TLS=rc_x,sm,shm,cuda_copy,gdr_copy,cuda_ipc\n#For virtual environments and cloud\n#ENV UCX_TLS=sm,shm,cuda_copy,cuda_ipc\n\nENV CPATH $HPCSDK_HOME/comm_libs/mpi/include:${CPATH}\n\n#MPI 3\n# Do Nothing\nRUN if [ \"x$MPI_VER\" = \"x4\" ]; then \\\n        rm -f  $HPCSDK_HOME/comm_libs/mpi && \\\n        ln -sf $HPCSDK_HOME/comm_libs/openmpi4/openmpi-4.0.5 \\\n               $HPCSDK_HOME/comm_libs/mpi ; \\\n    fi;  \\\n    if [ \"x$MPI_VER\" = \"HPCX\" ]; then \\\n        rm -f  $HPCSDK_HOME/comm_libs/mpi && \\\n        ln -sf $HPCSDK_HOME/comm_libs/hpcx/latest/ompi \\\n               $HPCSDK_HOME/comm_libs/mpi ; \\\n    fi;\n\n#Â Install pip dependencies and devito as a pip package\nRUN python3 -m venv /venv && \\\n    /venv/bin/pip install --no-cache-dir --upgrade pip && \\\n    /venv/bin/pip install --no-cache-dir wheel && \\\n    /venv/bin/pip install --no-cache-dir -e /app/devito[extras,nvidia] && \\\n    # Need extra CFLAGS for mpi4py\n    CFLAGS=-noswitcherror /venv/bin/pip install --no-cache-dir -r /app/devito/requirements-mpi.txt && \\\n    rm -rf ~/.cache/pip\n\nADD docker/run-jupyterlab.sh /jupyter\nADD docker/run-tests.sh /tests\nADD docker/run-print-defaults.sh /print-defaults\nADD docker/entrypoint.sh /docker-entrypoint.sh\nADD docker/nvdashboard.json /app/nvdashboard.json\n\nRUN chmod +x /print-defaults /jupyter /tests /docker-entrypoint.sh && \\\n    /venv/bin/jupyter serverextension enable dask_labextension\n#    /venv/bin/jupyter lab workspaces import /app/nvdashboard.json\n\n## Environment Variables for OpenACC Builds\n# Reference: https://github.com/devitocodes/devito/wiki/FAQ#can-i-manually-modify-the-c-code-generated-by-devito-and-test-these-modifications\n# Set arch to PGI (pgcc)\nENV DEVITO_ARCH=\"nvc\"\nENV DEVITO_LANGUAGE=\"openacc\"\nENV DEVITO_PLATFORM=nvidiaX\n# Options: [unset, 1] For PGI openacc; Should only be set after a first execution of the benchmark\n# ENV DEVITO_JIT_BACKDOOR=1\n\n# Enable logging, Options: [unset, PERF, DEBUG]\nENV DEVITO_LOGGING=DEBUG\n#ENV PGI_ACC_TIME=1\n\n## Create App user\n# Set the home directory to our app user's home.\nENV HOME=/app\nENV APP_HOME=/app\n\n# Create the home directory for the new app user.\n# Create an app user so our program doesn't run as root.\n# Chown all the files to the app user.\nRUN mkdir -p /app && \\\n    groupadd -r app && \\\n    useradd -r -g app -d /app -s /sbin/nologin -c \"Docker image user\" app && \\\n    chown -R app:app $APP_HOME && \\\n    chown app:app /docker-entrypoint.sh && \\\n    chown app:app /print-defaults && \\\n    chown app:app /tests && \\\n    chown app:app /jupyter\n\n# Change to the app user.\nUSER app\nWORKDIR /app/devito\n\nEXPOSE 8888\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/jupyter\"]\n"
}