diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/devitocodes/devito/docker/Dockerfile.nvidia b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/devitocodes/devito/docker/Dockerfile.nvidia/repaired.Dockerfile
index aeb4ca4..6d9754c 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/devitocodes/devito/docker/Dockerfile.nvidia
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/devitocodes/devito/docker/Dockerfile.nvidia/repaired.Dockerfile
@@ -1,9 +1,9 @@
 ##############################################################
-# This Dockerfile contains the additional NVIDIA compilers, 
-# libraries, and plugins to enable OpenACC and NVIDIA GPU 
+# This Dockerfile contains the additional NVIDIA compilers,
+# libraries, and plugins to enable OpenACC and NVIDIA GPU
 # acceleration of Devito codes.
 #
-# BUILD: 
+# BUILD:
 #   docker build --network=host --file docker/Dockerfile.nvidia --tag devito:nvidia .
 #
 # LEGACY:
@@ -11,9 +11,9 @@
 #   docker build --network=host --build-arg MPI_VER=3 --file docker/Dockerfile.nvidia --tag devito:nvidia .
 #
 #   (2) Option MPI 4.0:
-#   Enabling and using MPI 4.0.5 works on R450 drivers, but is showing compatibility 
+#   Enabling and using MPI 4.0.5 works on R450 drivers, but is showing compatibility
 #   issues during testing on older R418 drivers.
-# 
+#
 #   docker build --network=host --build-arg MPI_VER=4 --file docker/Dockerfile.nvidia --tag devito:nvidia .
 #
 # SQUASH:
@@ -23,32 +23,32 @@
 #   docker tag devito:nvidia devito:nvidia-pre
 #   docker-squash  -t devito:nvidia-pre devito:nvidia
 #
-# RUN: 
+# RUN:
 #   docker run --gpus all --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 devito:nvidia
 #   docker run --gpus all --rm -it devito:nvidia python examples/seismic/acoustic/acoustic_example.py
 #
-#   docker run --gpus all --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 --device=/dev/infiniband/uverbs0 --device=/dev/infiniband/rdma_cm  devito:nvidia 
+#   docker run --gpus all --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 --device=/dev/infiniband/uverbs0 --device=/dev/infiniband/rdma_cm  devito:nvidia
 #
 # to run in user context on a cluster with shared filesystem, you can add the correct user config as docker options e.g.:
 #   docker run --gpus all --rm -it -v `pwd`:`pwd` -w `pwd` -u $(id -u):$(id -g) devito:nvidia python examples/seismic/acoustic/acoustic_example.py
 #
 ##############################################################
-#FROM python:3.9 
-FROM python:3.9-slim-bullseye 
- 
-ENV DEBIAN_FRONTEND noninteractive 
-  
-# nodesource: nvdashboard requires nodejs>=10  
+#FROM python:3.9
+FROM python:3.9-slim-bullseye
+
+ENV DEBIAN_FRONTEND noninteractive
+
+# nodesource: nvdashboard requires nodejs>=10 
 RUN echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' > /etc/apt/sources.list.d/nvhpc.list
 RUN apt-get update -y && \
-    apt-get install -y -q \
-        apt-utils curl wget
+    apt-get install --no-install-recommends -y -q \
+        apt-utils curl wget && rm -rf /var/lib/apt/lists/*;
 
-RUN curl -sL https://deb.nodesource.com/setup_12.x | bash - && \
-    apt-get install -y -q \
+RUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash - && \
+    apt-get install --no-install-recommends -y -q \
 #        nvhpc-22-5-cuda-multi \
         nvhpc-22-5 \
-        liblapack-dev  \
+        liblapack-dev \
         libblas-dev \
         libibverbs-dev libmlx4-1 libmlx5-1 ibutils \
 # Devito Jupyter Notebooks and Ux experience
@@ -56,18 +56,18 @@ RUN curl -sL https://deb.nodesource.com/setup_12.x | bash - && \
         texlive-latex-extra texlive-fonts-recommended dvipng cm-super \
         ffmpeg vim && \
     wget -q -P /app/nvcomp_exts/ \
-        http://developer.download.nvidia.com/compute/nvcomp/2.2/local_installers/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz && \
+        https://developer.download.nvidia.com/compute/nvcomp/2.2/local_installers/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz && \
     tar -xvf /app/nvcomp_exts/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz -C /app/nvcomp_exts && \
     apt-get update -y && \
     apt-get autoclean && \
     apt-get autoremove && \
     rm -rf /app/nvcomp_exts/nvcomp* && \
-    rm -rf /var/lib/apt/lists/* 
+    rm -rf /var/lib/apt/lists/* && rm /app/nvcomp_exts/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz
 
 ARG HPCSDK_HOME=/opt/nvidia/hpc_sdk/Linux_x86_64/2022
 ARG HPCSDK_CUPTI=/opt/nvidia/hpc_sdk/Linux_x86_64/2022/cuda/11.6/extras/CUPTI
 #MPI_VER options 3,4,HPCX
-ARG MPI_VER=HPCX 
+ARG MPI_VER=HPCX
 
 # nvidia-container-runtime
 ENV NVIDIA_VISIBLE_DEVICES all
@@ -79,12 +79,12 @@ RUN echo "$HPCSDK_HOME/cuda/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
     echo "$HPCSDK_HOME/compilers/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
     echo "$HPCSDK_HOME/comm_libs/mpi/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
     echo "$HPCSDK_CUPTI/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
-    echo "$HPCSDK_HOME/math_libs/lib64" >> /etc/ld.so.conf.d/nvidia.conf    
+    echo "$HPCSDK_HOME/math_libs/lib64" >> /etc/ld.so.conf.d/nvidia.conf   
 
 # Compression
 ENV NVCOMP_EXTS_ROOT /app/nvcomp_exts/ubuntu18.04/11.6
 ENV bitcomp_DIR $NVCOMP_EXTS_ROOT/lib/
-    
+
 # Compiler, CUDA, and Library paths
 ENV CUDA_HOME $HPCSDK_HOME/cuda
 ENV CUDA_ROOT $HPCSDK_HOME/cuda/bin
@@ -145,23 +145,23 @@ ADD docker/entrypoint.sh /docker-entrypoint.sh
 ADD docker/nvdashboard.json /app/nvdashboard.json
 
 RUN chmod +x /print-defaults /jupyter /tests /docker-entrypoint.sh && \
-    /venv/bin/jupyter serverextension enable dask_labextension 
+    /venv/bin/jupyter serverextension enable dask_labextension
 #    /venv/bin/jupyter lab workspaces import /app/nvdashboard.json
 
 ## Environment Variables for OpenACC Builds
 # Reference: https://github.com/devitocodes/devito/wiki/FAQ#can-i-manually-modify-the-c-code-generated-by-devito-and-test-these-modifications
 # Set arch to PGI (pgcc)
-ENV DEVITO_ARCH="nvc" 
+ENV DEVITO_ARCH="nvc"
 ENV DEVITO_LANGUAGE="openacc"
 ENV DEVITO_PLATFORM=nvidiaX
 # Options: [unset, 1] For PGI openacc; Should only be set after a first execution of the benchmark
-# ENV DEVITO_JIT_BACKDOOR=1 
+# ENV DEVITO_JIT_BACKDOOR=1
 
 # Enable logging, Options: [unset, PERF, DEBUG]
-ENV DEVITO_LOGGING=DEBUG 
-#ENV PGI_ACC_TIME=1 
+ENV DEVITO_LOGGING=DEBUG
+#ENV PGI_ACC_TIME=1
 
-## Create App user 
+## Create App user
 # Set the home directory to our app user's home.
 ENV HOME=/app
 ENV APP_HOME=/app
@@ -177,7 +177,7 @@ RUN mkdir -p /app && \
     chown app:app /print-defaults && \
     chown app:app /tests && \
     chown app:app /jupyter
-    
+
 # Change to the app user.
 USER app
 WORKDIR /app/devito