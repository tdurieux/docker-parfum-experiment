{
  "startTime": 1674255690374,
  "endTime": 1674255690991,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Base ########################################################################\n#\n# This phase sets up dependencies for the other phases\n##\nARG PYTHON_VERSION=3.7\nARG BASE_IMAGE=python:${PYTHON_VERSION}-slim\nFROM ${BASE_IMAGE} as base\n\n# This image is only for building, so we run as root\nWORKDIR /src\n\n# Install build, test, andn publish dependencies\nCOPY requirements_test.txt /src/\nRUN true && \\\n    apt-get update -y && \\\n    apt-get install --no-install-recommends make git -y && \\\n    apt-get clean autoclean && \\\n    apt-get autoremove --yes && \\\n    pip install --no-cache-dir pip --upgrade && \\\n    pip install --no-cache-dir twine pre-commit && \\\n    pip install --no-cache-dir -r /src/requirements_test.txt && \\\n    true && rm -rf /var/lib/apt/lists/*;\n\n## Test ########################################################################\n#\n# This phase runs the unit tests for the library\n##\nFROM base as test\nCOPY . /src\nARG RUN_FMT=\"true\"\nRUN true && \\\n    ./scripts/run_tests.sh && \\\n    RELEASE_DRY_RUN=true RELEASE_VERSION=0.0.0 \\\n        ./scripts/publish.sh && \\\n    ./scripts/fmt.sh && \\\n    true\n\n## Release #####################################################################\n#\n# This phase builds the release and publishes it to pypi\n##\nFROM test as release\nARG PYPI_TOKEN\nARG RELEASE_VERSION\nARG RELEASE_DRY_RUN\nRUN ./scripts/publish.sh\n\n## Release Test ################################################################\n#\n# This phase installs the indicated version from PyPi and runs the unit tests\n# against the installed version.\n##\nFROM base as release_test\nARG RELEASE_VERSION\nARG RELEASE_DRY_RUN\nCOPY ./test /src/test\nCOPY ./scripts/run_tests.sh /src/scripts/run_tests.sh\nCOPY ./scripts/install_release.sh /src/scripts/install_release.sh\nRUN true && \\\n    ./scripts/install_release.sh && \\\n    ./scripts/run_tests.sh && \\\n    true\n"
}