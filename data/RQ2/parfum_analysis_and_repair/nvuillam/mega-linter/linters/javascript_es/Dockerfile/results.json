{
  "startTime": 1674254814446,
  "endTime": 1674254815729,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 83,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###########################################\n###########################################\n## Dockerfile to run MegaLinter ##\n###########################################\n###########################################\n\n# @not-generated\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#FROM__START\n\n#FROM__END\n\n##################\n# Get base image #\n##################\n# 3.10.5 is not usable until https://github.com/jruere/multiprocessing-logging/issues/56 is fixed\nFROM python:3.10.4-alpine3.15\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#ARG__START\n\n#ARG__END\n\n####################\n# Run APK installs #\n####################\n\nWORKDIR /\n\n# APK Packages used by mega-linter core architecture\nRUN apk add --update --no-cache \\\n        bash \\\n        ca-certificates \\\n        curl \\\n        gcc \\\n        git \\\n        libffi-dev \\\n        make \\\n        musl-dev \\\n        openssh && \\\n    git config --global core.autocrlf true\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#APK__START\nRUN apk add --update --no-cache \\\n                npm \\\n                nodejs-current \\\n                yarn\n#APK__END\n\n# PATH for golang\nENV GOROOT=/usr/lib/go \\\n    GOPATH=/go\n# hadolint ignore=DL3044\nENV PATH=\"$PATH\":\"$GOROOT\"/bin:\"$GOPATH\"/bin\nRUN mkdir -p ${GOPATH}/src ${GOPATH}/bin || true && \\\n    # Ignore npm package issues\n    yarn config set ignore-engines true || true && yarn cache clean;\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#PIP__START\n\n#PIP__END\n\n############################\n# Install NPM dependencies #\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n\n# Downgrade npm because from npm@v7, npm install crashes when called from root directory within Dockerfile\nENV NODE_OPTIONS=\"--max-old-space-size=8192\"\n#NPM__START\nWORKDIR /node-deps\nRUN npm install --ignore-scripts \\\n                eslint \\\n                eslint-config-airbnb \\\n                eslint-config-prettier \\\n                eslint-config-standard \\\n                eslint-plugin-import \\\n                eslint-plugin-jest \\\n                eslint-plugin-node \\\n                eslint-plugin-prettier \\\n                eslint-plugin-promise \\\n                eslint-plugin-vue \\\n                babel-eslint \\\n                @babel/core \\\n                @babel/eslint-parser \\\n                @microsoft/eslint-formatter-sarif && \\\n    npm audit fix --audit-level=critical || true && npm cache clean --force;\nWORKDIR /\n\n#NPM__END\n\n# Add node packages to path #\nENV PATH=\"/node-deps/node_modules/.bin:${PATH}\"\nENV NODE_PATH=\"/node-deps/node_modules\"\n\n##############################\n# Installs ruby dependencies #\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n\n#GEM__START\n\n#GEM__END\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#OTHER__START\n\n#OTHER__END\n\n################################\n# Installs python dependencies #\n################################\nCOPY megalinter /megalinter\nRUN python /megalinter/setup.py install \\\n    && python /megalinter/setup.py clean --all \\\n    && rm -rf /var/cache/apk/*\n\n#######################################\n# Copy scripts and rules to container #\n#######################################\nCOPY megalinter/descriptors /megalinter-descriptors\nCOPY TEMPLATES /action/lib/.automation\n\n###########################\n# Get the build arguments #\n###########################\nARG BUILD_DATE\nARG BUILD_REVISION\nARG BUILD_VERSION\n\n#################################################\n# Set ENV values used for debugging the version #\n#################################################\nENV BUILD_DATE=$BUILD_DATE \\\n    BUILD_REVISION=$BUILD_REVISION \\\n    BUILD_VERSION=$BUILD_VERSION\n\n#FLAVOR__START\nENV MEGALINTER_FLAVOR=none\n#FLAVOR__END\n\n#########################################\n# Label the instance and set maintainer #\n#########################################\nLABEL com.github.actions.name=\"MegaLinter\" \\\n      com.github.actions.description=\"The ultimate linters aggregator to make sure your projects are clean\" \\\n      com.github.actions.icon=\"code\" \\\n      com.github.actions.color=\"red\" \\\n      maintainer=\"Nicolas Vuillamy <nicolas.vuillamy@gmail.com>\" \\\n      org.opencontainers.image.created=$BUILD_DATE \\\n      org.opencontainers.image.revision=$BUILD_REVISION \\\n      org.opencontainers.image.version=$BUILD_VERSION \\\n      org.opencontainers.image.authors=\"Nicolas Vuillamy <nicolas.vuillamy@gmail.com>\" \\\n      org.opencontainers.image.url=\"https://oxsecurity.github.io/megalinter\" \\\n      org.opencontainers.image.source=\"https://github.com/oxsecurity/megalinter\" \\\n      org.opencontainers.image.documentation=\"https://oxsecurity.github.io/megalinter\" \\\n      org.opencontainers.image.vendor=\"Nicolas Vuillamy\" \\\n      org.opencontainers.image.description=\"Lint your code base with GitHub Actions\"\n\n#EXTRA_DOCKERFILE_LINES__START\nENV ENABLE_LINTERS=JAVASCRIPT_ES \\\n    FLAVOR_SUGGESTIONS=false \\\n    SINGLE_LINTER=JAVASCRIPT_ES \\\n    PRINT_ALPACA=false \\\n    LOG_FILE=none \\\n    SARIF_REPORTER=true \\\n    TEXT_REPORTER=false \\\n    UPDATED_SOURCES_REPORTER=false \\\n    GITHUB_STATUS_REPORTER=false \\\n    GITHUB_COMMENT_REPORTER=false \\\n    EMAIL_REPORTER=false \\\n    FILEIO_REPORTER=false \\\n    CONFIG_REPORTER=false\n\nRUN mkdir /root/docker_ssh && mkdir /usr/bin/megalinter-sh\nEXPOSE 22\nCOPY entrypoint.sh /entrypoint.sh\nCOPY sh /usr/bin/megalinter-sh\nCOPY sh/megalinter_exec /usr/bin/megalinter_exec\nCOPY sh/motd /etc/motd\nRUN find /usr/bin/megalinter-sh/ -type f -iname \"*.sh\" -exec chmod +x {} \\; && \\\n    chmod +x entrypoint.sh && \\\n    chmod +x /usr/bin/megalinter_exec && \\\n    echo \"alias megalinter='python -m megalinter.run'\" >> ~/.bashrc && source ~/.bashrc && \\\n    echo \"alias megalinter_exec='/usr/bin/megalinter_exec'\" >> ~/.bashrc && source ~/.bashrc\nRUN export STANDALONE_LINTER_VERSION=\"$(python -m megalinter.run --input /tmp --linterversion)\" && \\\n    echo $STANDALONE_LINTER_VERSION\nENTRYPOINT [\"/bin/bash\", \"/entrypoint.sh\"]\n#EXTRA_DOCKERFILE_LINES__END\n"
}