{
  "startTime": 1674250320174,
  "endTime": 1674250321892,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 14
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 149,
        "lineEnd": 151,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 7,
        "columnEnd": 84
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 194,
        "lineEnd": 196,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 19,
        "columnEnd": 79
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 19,
        "columnEnd": 75
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 19,
        "columnEnd": 69
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 19,
        "columnEnd": 79
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 19,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILD_FROM=\"ghcr.io/home-assistant/amd64-base:3.14\"\nARG OCTOPRINT_VERSION=\"1.7.2\"\nARG MJPG_STREAMER_BRANCH=\"v1.0.0\"\nARG CURA_LEGACY_BRANCH=\"15.04.6\"\nARG KLIPPER_BRANCH=\"master\"\nARG MOONRAKER_BRANCH=\"master\"\n\nFROM ${BUILD_FROM} AS build-base\nENV LANG C.UTF-8\nENV PIP_FLAGS=\"--no-cache-dir --extra-index-url https://www.piwheels.org/simple\"\nENV CFLAGS=\"-fcommon\"\n\nRUN echo \"Install common dependencies\" \\\n    && apk add --no-cache --virtual .build \\\n        ## OctoPrint \\\n        build-base \\\n        linux-headers \\\n        postgresql-dev \\\n        py3-virtualenv \\\n        python3-dev \\\n        ## mjpg-streamer \\\n        libjpeg-turbo-dev \\\n        git \\\n        build-base \\\n        cmake \\\n        linux-headers \\\n        ## Klipper \\\n        build-base \\\n        git \\\n        libffi-dev \\\n        py3-virtualenv \\\n        python2-dev \\\n        python3-dev \\\n        ## Moonraker \\\n        build-base \\\n        curl-dev \\\n        git \\\n        libjpeg-turbo-dev \\\n        py3-virtualenv \\\n        python3-dev \\\n        ## Cura Engine \\\n        build-base \\\n        git \\\n        libexecinfo-dev \\\n    && echo \"Done with build-base\"\n\n\nFROM build-base AS octoprint\nARG OCTOPRINT_VERSION\nENV PYTHONPATH=/data/python/octoprint\nENV PYTHONUSERBASE=/data/python/octoprint\nENV PATH=${PATH}:/data/python/octoprint/bin\n\nRUN echo \"Install OctoPrint\" \\\n    && apk add --no-cache \\\n        build-base \\\n        linux-headers \\\n        postgresql-dev \\\n        py3-virtualenv \\\n        python3-dev \\\n    && echo \"Done with apk add\"\nRUN echo \"Install\" \\\n    && virtualenv --python=python3 /data/python/octoprint \\\n    && source /data/python/octoprint/bin/activate \\\n    && pip install --no-cache-dir ${PIP_FLAGS} --upgrade \\\n        pip \\\n        wheel \\\n        cython \\\n    && pip install --no-cache-dir ${PIP_FLAGS} --upgrade \\\n        OctoPrint==${OCTOPRINT_VERSION} \\\n    && pip install --no-cache-dir ${PIP_FLAGS} \\\n        marlin-binary-protocol \\\n        psycopg2 \\\n    && find /data/python/octoprint | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\n    && find /usr/lib/python* | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\n    && rm -rf /root/.cache\nRUN echo \"Copy files to single folder\" \\\n    && mkdir -p /copy/root \\\n    && cd /data && tar -zcf /copy/root/octoprint-python.tar.gz python/octoprint \\\n    && ln -s /data/config/octoprint /copy/root/.octoprint && rm /copy/root/octoprint-python.tar.gz\n\n\n\nFROM build-base AS mjpg-streamer\nARG MJPG_STREAMER_BRANCH\nRUN echo \"Install mjpg-streamer\" \\\n    && apk add --no-cache \\\n        libjpeg-turbo-dev \\\n        git \\\n        build-base \\\n        cmake \\\n        linux-headers \\\n    && echo \"Done with apk add\"\nRUN echo \"Install\" \\\n    && git clone --single-branch --branch ${MJPG_STREAMER_BRANCH} https://github.com/jacksonliam/mjpg-streamer \\\n    && cd mjpg-streamer/mjpg-streamer-experimental/ \\\n    && make --silent \\\n    && make install --silent \\\n    && make clean \\\n    && mv www /www_mjpg\nRUN echo \"Copy files to single folder\" \\\n    && mkdir -p /copy \\\n    && cp -R /www_mjpg /copy/www_mjpg \\\n    && mkdir -p /copy/usr/local/lib/ \\\n    && cp -R /usr/local/lib/mjpg-streamer /copy/usr/local/lib/ \\\n    && mkdir -p /copy/usr/local/share/ \\\n    && cp -R /usr/local/share/mjpg-streamer /copy/usr/local/share/ \\\n    && mkdir -p /copy/usr/local/bin/ \\\n    && cp -R /usr/local/bin/mjpg_streamer /copy/usr/local/bin/\n\n\n\nFROM build-base AS curaengine\nARG CURA_LEGACY_BRANCH\nRUN echo \"Install CuraEngine\" \\\n    && apk add --no-cache \\\n        build-base \\\n        git \\\n        libexecinfo-dev \\\n    && echo \"Done with apk add\"\nRUN echo \"Install\" \\\n    && git clone --single-branch --branch ${CURA_LEGACY_BRANCH} https://github.com/Ultimaker/CuraEngine \\\n    && cd CuraEngine \\\n    && make --silent \\\n    && mv build/CuraEngine /usr/local/bin/CuraEngine\nRUN echo \"Copy files to single folder\" \\\n    && mkdir -p /copy/usr/local/bin/ \\\n    && cp /usr/local/bin/CuraEngine /copy/usr/local/bin/CuraEngineLegacy\n\n\n\nFROM build-base AS klipper\nARG KLIPPER_BRANCH\nENV PYTHONPATH=/data/python/klipper\nENV PYTHONUSERBASE=/data/python/klipper\nENV PATH=${PATH}:/data/python/klipper/bin\n\nRUN echo \"Install Klipper\" \\\n    && apk add --no-cache \\\n        build-base \\\n        git \\\n        libffi-dev \\\n        py3-virtualenv \\\n        python2-dev \\\n        python3-dev \\\n    && echo \"Done with apk add\"\nRUN echo \"Install\" \\\n    && virtualenv --python=python3 /data/python/klipper \\\n    && source /data/python/klipper/bin/activate \\\n    && pip install --no-cache-dir ${PIP_FLAGS} --upgrade \\\n        pip \\\n        wheel \\\n    && git clone --single-branch --branch ${KLIPPER_BRANCH} https://github.com/Klipper3d/klipper.git /data/src/klipper \\\n    && pip install --no-cache-dir ${PIP_FLAGS} -r /data/src/klipper/scripts/klippy-requirements.txt \\\n    # && pip install ${PIP_FLAGS} --upgrade \\\n    #     numpy \\\n    && find /data/python/klipper | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\n    && find /usr/lib/python* | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\n    && rm -rf /root/.cache\nCOPY rootfs/root/src/klipper/.config /data/src/klipper/.config\nRUN cd /data/src/klipper \\\n    && sed -i 's\"// sched_main\"// sched_main\\n#include <pthread.h>\"' /data/src/klipper/src/linux/main.c \\\n    && sed -i 's/sched_setscheduler(0/pthread_setschedparam(pthread_self()/' /data/src/klipper/src/linux/main.c \\\n    && make clean \\\n    && make \\\n    && ./scripts/flash-linux.sh \\\n    && make clean\nRUN echo \"Copy files to single folder\" \\\n    && mkdir -p /copy/root \\\n    && cd /data && tar -zcf /copy/root/klipper-python.tar.gz python/klipper \\\n    && cd /data && tar -zcf /copy/root/klipper-src.tar.gz src/klipper \\\n    && mkdir -p /copy/usr/local/bin \\\n    && cp /usr/local/bin/klipper_mcu /copy/usr/local/bin/klipper_mcu && rm /copy/root/klipper-python.tar.gz\n\n\n\nFROM build-base AS moonraker\nARG MOONRAKER_BRANCH\nENV PYTHONPATH=/data/python/moonraker\nENV PYTHONUSERBASE=/data/python/moonraker\nENV PATH=${PATH}:/data/python/moonraker/bin\n\nRUN echo \"Install Moonraker\" \\\n    && apk add --no-cache \\\n        build-base \\\n        curl-dev \\\n        git \\\n        libjpeg-turbo-dev \\\n        py3-virtualenv \\\n        python3-dev \\\n    && echo \"Done with apk add\"\nRUN echo \"Install\" \\\n    && virtualenv --python=python3 /data/python/moonraker \\\n    && source /data/python/moonraker/bin/activate \\\n    && pip install --no-cache-dir ${PIP_FLAGS} --upgrade \\\n        pip \\\n        wheel \\\n    && git clone --single-branch --branch ${MOONRAKER_BRANCH} https://github.com/Arksine/moonraker.git /data/src/moonraker \\\n    && pip install --no-cache-dir ${PIP_FLAGS} -r /data/src/moonraker/scripts/moonraker-requirements.txt \\\n    && find /data/python/moonraker | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\n    && find /usr/lib/python* | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\nRUN echo \"Copy files to single folder\" \\\n    && mkdir -p /copy/root \\\n    && cd /data && tar -zcf /copy/root/moonraker-python.tar.gz python/moonraker \\\n    && cd /data && tar -zcf /copy/root/moonraker-src.tar.gz src/moonraker && rm /copy/root/moonraker-python.tar.gz\n\n\n\nFROM ${BUILD_FROM} AS final\nENV PIP_FLAGS=\"--no-cache-dir --extra-index-url https://www.piwheels.org/simple\"\nENV CFLAGS=\"-fcommon\"\nENV PATH=/data/python/octoprint/bin:/data/python/klipper/bin:/data/python/moonraker/bin:/data/bin:${PATH}\n\nRUN echo \"Install required packages for proxy\" \\\n    && apk add --no-cache \\\n        caddy\nRUN echo \"Install required packages for OctoPrint\" \\\n    && apk add --no-cache \\\n        python3\nRUN echo \"Install required packages for camera (mjpg-streamer, gphoto2).\" \\\n    && apk add --no-cache \\\n        ffmpeg \\\n        gphoto2 \\\n        v4l-utils\nRUN echo \"Install required packages for Klipper.\" \\\n    && apk add --no-cache \\\n        build-base \\\n        libffi-dev \\\n        linux-headers \\\n        python2 \\\n        python3\nRUN echo \"Install required packages for Moonraker.\" \\\n    && apk add --no-cache \\\n        curl-dev \\\n        libsodium-dev \\\n        sudo\nRUN echo \"Install development packages for different plugins etc.\" \\\n    && apk add --no-cache \\\n        build-base \\\n        libjpeg-turbo-dev \\\n        linux-headers \\\n        postgresql-dev \\\n        python3-dev \\\n        zlib-dev\nRUN echo \"Install required packages for firmware update.\" \\\n    && apk add --no-cache \\\n        avrdude \\\n        git \\\n        stm32flash\n\n# Copy data from previous stages\n# ## octoprint\nCOPY --from=octoprint /copy /\n# # ## mjpg-streamer\nCOPY --from=mjpg-streamer /copy /\n# # ## CuraEngineLegacy\nCOPY --from=curaengine /copy /\n# # ## Klipper\nCOPY --from=klipper /copy /\n# # ## Moonraker\nCOPY --from=moonraker /copy /\n\nCOPY rootfs/ /\nRUN chmod a+x /scripts/*.sh\nWORKDIR /\n"
}