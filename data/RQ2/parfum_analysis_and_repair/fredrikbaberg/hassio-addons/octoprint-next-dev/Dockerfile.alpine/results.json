{
  "startTime": 1674251418471,
  "endTime": 1674251419645,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 80
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 26,
        "columnEnd": 74
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 26,
        "columnEnd": 74
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 26,
        "columnEnd": 70
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 19,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Alpine-based\nARG BUILD_FROM=\"homeassistant/amd64-base:latest\"\n\nFROM ${BUILD_FROM} AS build-base\nENV LANG C.UTF-8\nENV PIP_FLAGS=\"--no-cache-dir --extra-index-url https://www.piwheels.org/simple\"\nENV CFLAGS=\"-fcommon\"\n\nRUN apk add --no-cache --virtual .build \\\n        git \\\n        python3-dev \\\n        python2-dev \\\n        py3-virtualenv \\\n        build-base \\\n        linux-headers \\\n        cmake\n\n\n\nFROM build-base AS octoprint\nENV PYTHONPATH=/data/python/OctoPrint\nENV PYTHONUSERBASE=/data/python/OctoPrint\nENV PATH=${PATH}:/data/python/OctoPrint/bin\n\nRUN echo \"Install OctoPrint\" \\\n    && virtualenv --python=python3 /data/python/OctoPrint \\\n    && source /data/python/OctoPrint/bin/activate \\\n    && pip install --no-cache-dir ${PIP_FLAGS} --upgrade pip wheel \\\n    && pip install --no-cache-dir ${PIP_FLAGS} --upgrade OctoPrint\n\n\n\nFROM build-base AS mjpg-streamer\nRUN echo \"Install mjpg-streamer\" \\\n    && apk add --no-cache \\\n        libjpeg-turbo-dev \\\n    && git clone --depth 1 https://github.com/jacksonliam/mjpg-streamer \\\n    && cd mjpg-streamer/mjpg-streamer-experimental/ \\\n    && make --silent \\\n    && make install --silent \\\n    && mv www/ /www_mjpg\n\n\n\nFROM build-base AS klipper\nENV PYTHONPATH=/data/python/Klipper\nENV PYTHONUSERBASE=/data/python/Klipper\nENV PATH=${PATH}:/data/python/Klipper/bin\n\nRUN echo \"Install Klipper\" \\\n    && apk add --no-cache \\\n        libffi-dev \\\n        freetype-dev \\\n        libpng-dev \\\n    && virtualenv --python=python2.7 /data/python/Klipper \\\n    && source /data/python/Klipper/bin/activate \\\n    && pip install --no-cache-dir ${PIP_FLAGS} --upgrade pip wheel \\\n    && git clone --depth 1 https://github.com/Klipper3d/klipper.git /data/klipper \\\n    && pip install --no-cache-dir ${PIP_FLAGS} -r /data/klipper/scripts/klippy-requirements.txt \\\n    && pip install --no-cache-dir ${PIP_FLAGS} --upgrade numpy\nCOPY rootfs/data/klipper/.config /data/klipper/.config\n# Need to make two changes to /data/klipper/src/linux/main.c due to sched_setscheduler not being available in Alpine:\n# - Add #include<pthread.h>\n# - Replace sched_setscheduler(0, SCHED_FIFO, &sp); with pthread_setschedparam(pthread_self(), SCHED_FIFO, &sp);\nRUN sed -i 's\"// sched_main\"// sched_main\\n#include <pthread.h>\"' /data/klipper/src/linux/main.c\nRUN sed -i 's/sched_setscheduler(0/pthread_setschedparam(pthread_self()/' /data/klipper/src/linux/main.c\nRUN cd /data/klipper \\\n    && make clean \\\n    && make \\\n    && ./scripts/flash-linux.sh\n\n\n\nFROM build-base AS curaengine\nARG CURA_VERSION=15.04.6\nRUN echo \"Install CuraEngine\" \\\n    && apk add --no-cache libexecinfo-dev \\\n    && git clone -b ${CURA_VERSION} --depth 1 https://github.com/Ultimaker/CuraEngine \\\n    && cd CuraEngine \\\n    && make --silent \\\n    && mv build/CuraEngine /usr/local/bin/CuraEngine\n\n\n\nFROM ${BUILD_FROM} AS final\nENV LANG C.UTF-8\nENV PIP_FLAGS=\"--no-cache-dir --extra-index-url https://www.piwheels.org/simple\"\nENV CFLAGS=\"-fcommon\"\nENV PATH=${PATH}:/data/python/OctoPrint/bin:/data/python/Klipper/bin\n\nRUN echo \"Install required packages for running.\" \\\n    && apk add --no-cache \\\n        python2 \\\n        python3 \\\n        caddy\nRUN echo \"Install additional packages\" \\\n    && apk add --no-cache --virtual .extras \\\n        gphoto2 \\\n        ffmpeg \\\n        libjpeg-turbo \\\n        zlib \\\n        build-base \\\n        linux-headers \\\n        python3-dev \\\n        vim \\\n        git \\\n        avrdude \\\n        # dfu-programmer \\\n        # dfu-util \\\n        stm32flash\n\n# Copy data from previous stages and do some setup.\n# ## OctoPrint\nCOPY --from=octoprint /data/python/OctoPrint /data/python/OctoPrint\nCOPY rootfs/data/config/octoprint /data/config/octoprint\nRUN ln -s /data/config/octoprint $HOME/.octoprint\n# ## mjpg-streamer\nCOPY --from=mjpg-streamer /usr/local/lib/mjpg-streamer /usr/local/lib/mjpg-streamer\nCOPY --from=mjpg-streamer /usr/local/share/mjpg-streamer /usr/local/share/mjpg-streamer\nCOPY --from=mjpg-streamer /usr/local/bin/mjpg_streamer /usr/local/bin/mjpg_streamer\nCOPY --from=mjpg-streamer /www_mjpg /www_mjpg\n# ## Klipper\nCOPY --from=klipper /data/python/Klipper /data/python/Klipper\nCOPY --from=klipper /data/klipper /data/klipper\nCOPY --from=klipper /usr/local/bin/klipper_mcu /usr/local/bin/klipper_mcu\n# ## CuraEngine\nCOPY --from=curaengine /usr/local/bin/CuraEngine /usr/local/bin/CuraEngine\n\nCOPY rootfs/ /\nRUN chmod a+x /scripts/*.sh\nWORKDIR /\n\n# Cleanup, move files in /data to archives.\nRUN echo \"Cleanup and move output\" \\\n    && mkdir -p /data/python/OctoPrint \\\n    && mkdir -p /data/python/Klipper \\\n    && mkdir -p /data/klipper \\\n    && find /data/python/OctoPrint | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\n    && find /data/python/Klipper | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\n    && find /usr/lib/python* | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \\\n    && rm -rf /root/.cache \\\n    && cd /data/python && tar -zcf /root/OctoPrint-python.tar.gz OctoPrint \\\n    && cd /data/config && tar -zcf /root/OctoPrint-config.tar.gz octoprint \\\n    && cd /data/python && tar -zcf /root/Klipper-python.tar.gz Klipper \\\n    && cd /data && tar -zcf /root/Klipper-src.tar.gz klipper \\\n    && rm -rf /data/* && rm /root/OctoPrint-python.tar.gz\n"
}