{
  "startTime": 1674252400819,
  "endTime": 1674252401870,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 6,
        "columnEnd": 49
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 6,
        "columnEnd": 34
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 6,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ActiveMQ Artemis\n\n##########################################################\n## Build Image                                           #\n##########################################################\nARG BASE_IMAGE\nFROM openjdk:8u171-jdk-stretch as builder\nLABEL maintainer=\"Victor Romero <victor.romero@gmail.com>\"\n\nARG ACTIVEMQ_ARTEMIS_VERSION\nARG ACTIVEMQ_DISTRIBUTION_URL\nENV JMX_EXPORTER_VERSION=0.3.1\nENV JGROUPS_KUBERNETES_VERSION=0.9.3\nENV JAVAX_JSON_VERSION=1.1.4\n\n# add user and group for artemis\nRUN groupadd -r artemis && useradd -r -s /bin/false -g artemis artemis\n\nRUN apt-get -qq -o=Dpkg::Use-Pty=0 update && \\\n  apt-get -qq -o=Dpkg::Use-Pty=0 install -y --no-install-recommends \\\n    libaio1=0.3.110-3 \\\n    xmlstarlet=1.6.1-2 \\\n    jq=1.5+dfsg-1.3 \\\n    ca-certificates=20161130+nmu1+deb9u1 \\\n    wget=1.18-5+deb9u2 \\\n    ivy=2.4.0-3 && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Make sure pipes are considered to detemine success, see: https://github.com/hadolint/hadolint/wiki/DL4006\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# Uncompress and validate\nWORKDIR /opt\nRUN if (echo \"${ACTIVEMQ_DISTRIBUTION_URL}\" | grep -Eq  \".zip\\$\" ) ; \\\n    then \\\n      mkdir tmp && \\\n      wget \"${ACTIVEMQ_DISTRIBUTION_URL}\" -P tmp/ && \\\n      unzip -d tmp -q \"tmp/*.zip\" && rm -f tmp/*.zip && ls -l tmp/ && \\\n        mv tmp/* ./apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION} && \\\n        ln -s \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}\" \"/opt/apache-artemis\" && \\\n        rmdir tmp; \\\n    elif test -n \"${ACTIVEMQ_DISTRIBUTION_URL}\" ; \\\n    then \\\n      echo \"Only .zip format is supported when using ACTIVEMQ_DISTRIBUTION_URL\" && \\\n      exit 2; \\\n    else \\\n      wget \"https://repository.apache.org/content/repositories/releases/org/apache/activemq/apache-artemis/${ACTIVEMQ_ARTEMIS_VERSION}/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz\" && \\\n      wget \"https://repository.apache.org/content/repositories/releases/org/apache/activemq/apache-artemis/${ACTIVEMQ_ARTEMIS_VERSION}/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc\" && \\\n      wget \"https://apache.org/dist/activemq/KEYS\" && \\\n      gpg --batch --no-tty --import \"KEYS\" && \\\n      gpg --batch --no-tty \"apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc\" && \\\n      tar xfz \"apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz\" && \\\n      ln -s \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}\" \"/opt/apache-artemis\" && \\\n      rm -f \"apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz\" \"KEYS\" \"apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc\"; \\\n    fi\n\n# Create broker instance\n# Per recommendation of https://activemq.apache.org/artemis/docs/latest/perf-tuning.html : -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseParallelOldGC\nWORKDIR /var/lib\nRUN if test \"${ACTIVEMQ_ARTEMIS_VERSION}\" = \"1.0.0\" ; \\\n    then \\\n      echo n | \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}/bin/artemis\" create artemis \\\n        --home /opt/apache-artemis \\\n        --user artemis \\\n        --password simetraehcapa \\\n        --cluster-user artemisCluster \\\n        --cluster-password simetraehcaparetsulc ; \\\n    else \\\n      \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}/bin/artemis\" create artemis \\\n        --home /opt/apache-artemis \\\n        --user artemis \\\n        --password simetraehcapa \\\n        --role amq \\\n        --require-login \\\n        --cluster-user artemisCluster \\\n        --cluster-password simetraehcaparetsulc ; \\\n    fi\n\n# Using KUBE_PING 0.9.3. Can't upgrade to 1.x.x as Artemis uses JGroups 3.3.x\n# https://github.com/jgroups-extras/jgroups-kubernetes/issues/30\nWORKDIR /opt/jgroupskubernetes\nRUN java -jar /usr/share/java/ivy.jar -dependency org.jgroups.kubernetes kubernetes \"${JGROUPS_KUBERNETES_VERSION}\" -retrieve \"[artifact]-[revision](-[classifier]).[ext]\" -types jar && \\\n    java -jar /usr/share/java/ivy.jar -dependency org.jgroups.kubernetes dns \"${JGROUPS_KUBERNETES_VERSION}\" -retrieve \"[artifact]-[revision](-[classifier]).[ext]\" -types jar\n\n# JsonFormatter to enable JSON logging #148\nWORKDIR /opt/jsonformatter\nRUN java -jar /usr/share/java/ivy.jar -dependency org.glassfish javax.json \"${JAVAX_JSON_VERSION}\" -retrieve \"[artifact]-[revision](-[classifier]).[ext]\" -types bundle\n\n# JsonFormatter to enable JSON logging #148\nWORKDIR /opt/jsonformatter\nRUN java -jar /usr/share/java/ivy.jar -dependency org.glassfish javax.json \"${JAVAX_JSON_VERSION}\" -retrieve \"[artifact]-[revision](-[classifier]).[ext]\" -types bundle\n\nWORKDIR /var/lib/artemis/etc\n\n# Log to tty to enable docker logs container-name\nRUN sed -i \"s/logger.handlers=.*/logger.handlers=CONSOLE/g\" logging.properties\n\n# Add JSON log handler\nRUN echo \"formatter.JSON=org.jboss.logmanager.formatters.JsonFormatter\" | tee -a  logging.properties\nRUN sed -i \"s/-Xbootclasspath\\/a:\\\"\\(.*\\)\\\"/-Xbootclasspath\\/a:\\\"\\1:\\/opt\\/apache-artemis\\/lib\\/javax.json-1.1.4.jar\\\"/g\" /var/lib/artemis/bin/artemis\n\n# --java-options doesn't seem to work across the board on all versions adding them manually\nRUN sed -i \"s/JAVA_ARGS=\\\"/JAVA_ARGS=\\\"-Djava.net.preferIPv4Addresses=true -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=2 /g\" ../etc/artemis.profile\n\n# Ports are only exposed with an explicit argument, there is no need to binding\n# the web console to localhost\nRUN xmlstarlet ed -L -N amq=\"http://activemq.org/schema\" \\\n    -u \"/amq:broker/amq:web/@bind\" \\\n    -v \"http://0.0.0.0:8161\" bootstrap.xml\n\n# In a similar fashion the jolokia access is restricted to localhost only. Disabling\n# this as in the natural environmnets for the image like Kubernetes this is problematic.\nRUN if (echo \"${ACTIVEMQ_ARTEMIS_VERSION}\" | grep -Eq  \"(2.[^0-3]\\\\.[0-9]|[^1-2]\\\\.[0-9]\\\\.[0-9]+)\" ) ; then xmlstarlet ed --inplace --subnode \"/restrict\" --type elem -n \"remote\" jolokia-access.xml && xmlstarlet ed --inplace --subnode \"/restrict/remote\" --type elem -n host -v \"0.0.0.0/0\" jolokia-access.xml; fi\n\n# Remove default values for memory in artemis profile in order to let the automatic\n# Java ergonomics detection work https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html\nRUN sed -i \"s/-Xm[xs][^ \\\"]*//g\" ../etc/artemis.profile\n\n# For the casual run of the image make the docker-entrypoint-sh think\n# that the performance journal calibration is already completed\nRUN if (echo \"${ACTIVEMQ_ARTEMIS_VERSION}\" | grep -Eq  \"(1.5\\\\.[3-5]|[^1]\\\\.[0-9]\\\\.[0-9]+)\" ) ; then touch /var/lib/artemis/data/.perf-journal-completed; fi\n\nWORKDIR /opt/jmx-exporter\nRUN wget \"https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/${JMX_EXPORTER_VERSION}/jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar\" && \\\n  wget \"https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/${JMX_EXPORTER_VERSION}/jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar.sha1\" && \\\n  echo \"$(cat \"jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar.sha1\")\" \"jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar\" | sha1sum -c - && \\\n  rm \"jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar.sha1\" && \\\n  ln -s \"/opt/jmx-exporter/jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar\" \"/opt/jmx-exporter/jmx_prometheus_javaagent.jar\"\nCOPY assets/jmx-exporter-config.yaml /opt/jmx-exporter/etc/\n\n##########################################################\n## Run Image                                             #\n##########################################################\nARG BASE_IMAGE\n# hadolint ignore=DL3006\nFROM $BASE_IMAGE\nLABEL maintainer=\"Victor Romero <victor.romero@gmail.com>\"\nARG ACTIVEMQ_ARTEMIS_VERSION\nENV ACTIVEMQ_ARTEMIS_VERSION=$ACTIVEMQ_ARTEMIS_VERSION\n\n# add user and group for artemis\nRUN addgroup -g 1000 -S artemis && adduser -u 1000 -S -G artemis artemis\n\n# Sadly this line is likely to fail every so often, see: https://medium.com/@stschindler/the-problem-with-docker-and-alpines-package-pinning-18346593e891\n# Still versions are pinned to maintain some small level of https://reproducible-builds.org/\nRUN apk add --no-cache \\\n  libaio=0.3.111-r0 \\\n  xmlstarlet=1.6.1-r0 \\\n  jq=1.6-r0 \\\n  dumb-init=1.2.2-r1 \\\n  sed=4.5-r0 \\\n  gettext=0.19.8.1-r4\n\nCOPY --from=builder \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}\" \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}\"\nCOPY --from=builder \"/var/lib/artemis\" \"/var/lib/artemis\"\nCOPY --from=builder \"/opt/jmx-exporter\" \"/opt/jmx-exporter\"\nCOPY --from=builder \"/opt/jgroupskubernetes/*\" \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}/lib/\"\nCOPY --from=builder \"/opt/jsonformatter/*\" \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}/lib/\"\n\n# To enable RESTORE_CONFIGURATION\nCOPY --from=builder \"/var/lib/artemis/etc\" \"/var/lib/artemis/etc-backup\"\n\nRUN ln -s \"/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}\" /opt/apache-artemis\nRUN chown -R artemis.artemis /var/lib/artemis\nRUN chown -R artemis.artemis /opt/jmx-exporter\n\nRUN mkdir -p /opt/assets\nCOPY assets/merge.xslt /opt/assets\nCOPY assets/enable-jmx.xml /opt/assets\nCOPY assets/semver2.sh /usr/local/bin/semver\n\n# Web Server\nEXPOSE 8161\n\n# JMX Exporter\nEXPOSE 9404\n\n# Port for CORE,MQTT,AMQP,HORNETQ,STOMP,OPENWIRE\nEXPOSE 61616\n\n# Port for HORNETQ,STOMP\nEXPOSE 5445\n\n# Port for AMQP\nEXPOSE 5672\n\n# Port for MQTT\nEXPOSE 1883\n\n#Port for STOMP\nEXPOSE 61613\n\nWORKDIR /var/lib/artemis/bin\n\nUSER artemis\n\nRUN mkdir /var/lib/artemis/lock\n\n# Expose some outstanding folders\nVOLUME [\"/var/lib/artemis/data\"]\nVOLUME [\"/var/lib/artemis/tmp\"]\nVOLUME [\"/var/lib/artemis/etc\"]\nVOLUME [\"/var/lib/artemis/etc-override\"]\nVOLUME [\"/var/lib/artemis/lock\"]\n\nCOPY assets/docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"artemis-server\"]\n"
}