{
  "startTime": 1674255697752,
  "endTime": 1674255698918,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 44,
        "columnStart": 2,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Go cross compiler (xgo): Base cross-compilation layer\n# Copyright (c) 2014 Péter Szilágyi. All rights reserved.\n#\n# Released under the MIT license.\n\nFROM ubuntu:18.04\n\nLABEL maintainer=\"techknowlogick <techknowlogick@gitea.io>\"\n\n# Mark the image as xgo enabled to support xgo-in-xgo\nENV XGO_IN_XGO 1\n\n# Configure the Go environment, since it's not going to change\nENV PATH   /usr/local/go/bin:$PATH\nENV GOPATH /go\n\n# Inject the remote file fetcher and checksum verifier\nADD fetch.sh /fetch.sh\nENV FETCH /fetch.sh\nRUN chmod +x $FETCH\n\n# Make sure apt-get is up to date and dependent packages are installed\nRUN \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y automake autogen build-essential ca-certificates \\\n    gcc-5-arm-linux-gnueabi g++-5-arm-linux-gnueabi libc6-dev-armel-cross \\\n    gcc-5-arm-linux-gnueabihf g++-5-arm-linux-gnueabihf libc6-dev-armhf-cross \\\n    gcc-5-aarch64-linux-gnu g++-5-aarch64-linux-gnu libc6-dev-arm64-cross \\\n    gcc-5-mips-linux-gnu g++-5-mips-linux-gnu libc6-dev-mips-cross \\\n    gcc-5-mipsel-linux-gnu g++-5-mipsel-linux-gnu libc6-dev-mipsel-cross \\\n    gcc-5-mips64-linux-gnuabi64 g++-5-mips64-linux-gnuabi64 libc6-dev-mips64-cross \\\n    gcc-5-mips64el-linux-gnuabi64 g++-5-mips64el-linux-gnuabi64 libc6-dev-mips64el-cross \\\n    gcc-5-multilib g++-5-multilib gcc-mingw-w64 g++-mingw-w64 clang llvm-dev \\\n    gcc-6-arm-linux-gnueabi g++-6-arm-linux-gnueabi libc6-dev-armel-cross \\\n    gcc-6-arm-linux-gnueabihf g++-6-arm-linux-gnueabihf libc6-dev-armhf-cross \\\n    gcc-6-aarch64-linux-gnu g++-6-aarch64-linux-gnu libc6-dev-arm64-cross \\\n    gcc-6-mips-linux-gnu g++-6-mips-linux-gnu libc6-dev-mips-cross \\\n    gcc-6-mipsel-linux-gnu g++-6-mipsel-linux-gnu libc6-dev-mipsel-cross \\\n    gcc-6-mips64-linux-gnuabi64 g++-6-mips64-linux-gnuabi64 libc6-dev-mips64-cross \\\n    gcc-6-mips64el-linux-gnuabi64 g++-6-mips64el-linux-gnuabi64 libc6-dev-mips64el-cross \\\n    gcc-6-s390x-linux-gnu g++-6-s390x-linux-gnu libc6-dev-s390x-cross \\\n    gcc-6-powerpc64le-linux-gnu g++-6-powerpc64le-linux-gnu libc6-dev-powerpc-ppc64-cross \\\n    gcc-6-multilib g++-6-multilib gcc-7-multilib g++-7-multilib gcc-mingw-w64 g++-mingw-w64 \\\n    clang llvm-dev libtool libxml2-dev uuid-dev libssl-dev swig openjdk-8-jdk pkg-config patch \\\n    make xz-utils cpio wget zip unzip p7zip git mercurial bzr texinfo help2man cmake curl mercurial && \\\n    apt-get install --no-install-recommends -y libssl1.1 openssl ca-certificates && \\\n    update-ca-certificates && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n  find /var/log -type f | while read f; do echo -ne '' > $f; done;\n\n# Fix any stock package issues\nRUN ln -s /usr/include/asm-generic /usr/include/asm\n\n# Fix git safe.directory\nRUN git config --global --add safe.directory '*'\n\n# Add patches directory for patching later\nADD patches /patches\n\n##########################\n# Darwin Toolchain build #\n##########################\n\n# Configure the container for OSX cross compilation\nENV OSX_SDK MacOSX11.1.sdk\nENV OSX_SDK_PATH https://github.com/phracker/MacOSX-SDKs/releases/download/11.0-11.1/${OSX_SDK}.tar.xz\n\n# Make libxar known to the ld64 and cctools build\nENV LD_LIBRARY_PATH=/osxcross/target/lib\n\n# Download the osx sdk and build the osx toolchain\n# We download the osx sdk, patch it and pack it again to be able to throw the patched version at osxcross\nRUN \\\n  $FETCH $OSX_SDK_PATH 9b86eab03176c56bb526de30daa50fa819937c54b280364784ce431885341bf6 && \\\n  tar -xf `basename $OSX_SDK_PATH` && rm -f `basename $OSX_SDK_PATH`\nADD patch.tar.xz $OSX_SDK/usr/include/c++\nRUN tar -cf - $OSX_SDK/ | xz -c - > $OSX_SDK.tar.xz && rm -rf $OSX_SDK\n\n# Actually build the toolchain\nRUN \\\n  git clone https://github.com/tpoechtrager/osxcross.git && \\\n  cd osxcross && git checkout 0f87f567dfaf98460244471ad6c0f4311d62079c && cd ../ && \\\n  mv $OSX_SDK.tar.xz /osxcross/tarballs/ && \\\n  OSX_VERSION_MIN=10.13 UNATTENDED=1 LD_LIBRARY_PATH=/osxcross/target/lib /osxcross/build.sh\n\nENV PATH /osxcross/target/bin:$PATH\n\n# Inject the new Go root distribution downloader and bootstrapper\nADD bootstrap_pure.sh /bootstrap_pure.sh\nENV BOOTSTRAP_PURE /bootstrap_pure.sh\nRUN chmod +x $BOOTSTRAP_PURE\n\n# Inject the C dependency cross compiler\nADD build_deps.sh /build_deps.sh\nENV BUILD_DEPS /build_deps.sh\nRUN chmod +x $BUILD_DEPS\n\n# Inject the container entry point, the build script\nADD build.sh /build.sh\nENV BUILD /build.sh\nRUN chmod +x $BUILD\n\nENTRYPOINT [\"/build.sh\"]\n"
}