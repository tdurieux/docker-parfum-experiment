{
  "startTime": 1674249555206,
  "endTime": 1674249556651,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 5,
        "columnEnd": 49
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build stage for BerkeleyDB\nFROM alpine as berkeleydb\n\nRUN apk --no-cache add autoconf automake build-base\n\nENV BERKELEYDB_VERSION=db-4.8.30.NC\nENV BERKELEYDB_PREFIX=/opt/${BERKELEYDB_VERSION}\n\nRUN wget https://download.oracle.com/berkeley-db/${BERKELEYDB_VERSION}.tar.gz\nRUN tar -xzf *.tar.gz && rm *.tar.gz\nRUN sed s/__atomic_compare_exchange/__atomic_compare_exchange_db/g -i ${BERKELEYDB_VERSION}/dbinc/atomic.h\nRUN mkdir -p ${BERKELEYDB_PREFIX}\n\nWORKDIR /${BERKELEYDB_VERSION}/build_unix\n\nRUN ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=${BERKELEYDB_PREFIX}\nRUN make -j$(nproc)\nRUN make install\nRUN rm -rf ${BERKELEYDB_PREFIX}/docs\n\n# Build stage for Pexa Core\nFROM alpine as pexa-core\n\nCOPY --from=berkeleydb /opt /opt\n\nRUN apk --no-cache add autoconf \\\n  automake \\\n  boost-dev \\\n  build-base \\\n  chrpath \\\n  file \\\n  gnupg \\\n  libevent-dev \\\n  libtool \\\n  linux-headers \\\n  protobuf-dev \\\n  zeromq-dev \\\n  cmake\n\nRUN set -ex \\\n  && for key in \\\n    90C8019E36C2E964; \\\n  do \\\n    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\" || \\\n    gpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" || \\\n    gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\" || \\\n    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n    gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$key\"; \\\n  done\n\nENV PEXA_PREFIX=/opt/pexa\n\nCOPY . /pexa\n\nWORKDIR /pexa\n\n# Install alt-integration-cpp\nRUN export VERIBLOCK_POP_CPP_VERSION=$(awk -F '=' '/\\$\\(package\\)_version/{print $NF}' $PWD/depends/packages/veriblock-pop-cpp.mk | head -n1); \\\n    ( cd /opt; \\\n     wget https://github.com/VeriBlock/alt-integration-cpp/archive/${VERIBLOCK_POP_CPP_VERSION}.tar.gz; \\\n     tar -xf ${VERIBLOCK_POP_CPP_VERSION}.tar.gz; \\\n     cd alt-integration-cpp-${VERIBLOCK_POP_CPP_VERSION}; \\\n     mkdir build; \\\n     cd build; \\\n     cmake .. -DCMAKE_BUILD_TYPE=Debug -DTESTING=OFF; \\\n     make -j$(nproc) install) && rm ${VERIBLOCK_POP_CPP_VERSION}.tar.gz\n\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS=-L`ls -d /opt/db*`/lib/ CPPFLAGS=-I`ls -d /opt/db*`/include/ \\\n    --disable-tests \\\n    --disable-bench \\\n    --disable-gmock \\\n    --disable-ccache \\\n    --disable-man \\\n    --without-gui \\\n    --with-libs=no \\\n    --with-daemon \\\n    --prefix=${PEXA_PREFIX}\n\nRUN make -j$(nproc) install\n\n# Build stage for compiled artifacts\nFROM alpine\n\nRUN apk --no-cache add \\\n  boost \\\n  boost-program_options \\\n  libevent \\\n  libzmq \\\n  su-exec \\\n  valgrind \\\n  curl\n\nENV DATA_DIR=/home/pexa/.pexa\nENV PEXA_PREFIX=/opt/pexa\nENV PATH=${PEXA_PREFIX}/bin:$PATH\n\nCOPY --from=pexa-core /opt /opt\n\nRUN mkdir -p ${DATA_DIR}\nRUN set -x \\\n    && addgroup -g 1001 -S pexa \\\n    && adduser -u 1001 -D -S -G pexa pexa\nRUN chown -R 1001:1001 ${DATA_DIR}\nUSER pexa\nWORKDIR $DATA_DIR\n"
}