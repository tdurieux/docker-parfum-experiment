{
  "startTime": 1674221087975,
  "endTime": 1674221089412,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 0,
        "columnEnd": 60
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 0,
        "columnEnd": 48
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 13,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 79
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:alpine\nMAINTAINER \"Denver Williams <denver@ii.coop>\"\nENV KUBECTL_VERSION=v1.5.2\nENV HELM_VERSION=v2.4.1\nENV GCLOUD_VERSION=150.0.0\nENV AWSCLI_VERSION=1.11.75\nENV AZURECLI_VERSION=2.0.2\nENV PACKETCLI_VERSION=1.33\nENV TERRAFORM_VERSION=0.9.4\nENV ARC=amd64\n\n# Install AWS / AZURE CLI Deps\nRUN apk update\nRUN apk add --no-cache --update git bash util-linux wget tar curl build-base jq \\\n  py-pip groff less openssh bind-tools python python-dev libffi-dev openssl-dev\n\n# no way to pin this packet-cli at the moment\nRUN go get -u github.com/ebsarr/packet\nRUN pip install --no-cache-dir packet-python==${PACKETCLI_VERSION} argh tabulate\nRUN pip install --no-cache-dir azure-cli==${AZURECLI_VERSION}\nRUN pip install --no-cache-dir awscli==${AWSCLI_VERSION}\n\nRUN apk --purge -v del py-pip && \\\n\trm /var/cache/apk/*\n\n# Install Google Cloud SDK\nRUN wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_VERSION}-linux-x86.tar.gz && \\\ntar xvfz google-cloud-sdk-${GCLOUD_VERSION}-linux-x86.tar.gz && \\\n./google-cloud-sdk/install.sh -q && rm google-cloud-sdk-${GCLOUD_VERSION}-linux-x86.tar.gz\n\n\n#Install Kubectl\nRUN wget -O /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/$ARC/kubectl && \\\nchmod +x /usr/local/bin/kubectl\n\n#Install helm\nRUN wget https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz  && \\\ntar xvzf helm-${HELM_VERSION}-linux-amd64.tar.gz && \\\nmv linux-amd64/helm /usr/local/bin && \\\nrm -rf helm-*gz linux-amd64 && rm helm-${HELM_VERSION}-linux-amd64.tar.gz\n\n# Install Terraform\nRUN wget https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_\"${TERRAFORM_VERSION}\"_linux_$ARC.zip\nRUN unzip terraform*.zip -d /usr/bin\n\n# Install CFSSL\nRUN go get -u github.com/cloudflare/cfssl/cmd/cfssl && \\\ngo get -u github.com/cloudflare/cfssl/cmd/...\n\n# Install Gzip+base64 Provider\nRUN go get -u github.com/jakexks/terraform-provider-gzip && \\\n  echo providers { >> ~/.terraformrc && \\\n  echo '    gzip = \"terraform-provider-gzip\"' >> ~/.terraformrc && \\\n  echo } >> ~/.terraformrc\n\n#Add Terraform Modules\n\nCOPY provision.sh /cncf/\nRUN chmod +x /cncf/provision.sh\n#ENTRYPOINT [\"/cncf/provision.sh\"]\nWORKDIR /cncf/\n#CMD [\"aws-deploy\"]\n"
}