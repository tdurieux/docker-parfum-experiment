{
  "startTime": 1674254616498,
  "endTime": 1674254617223,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\n\nENV VENV /opt/venv\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\nENV PYTHONPATH /root\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && add-apt-repository ppa:deadsnakes/ppa \\\n    && apt-get install -y \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n    cmake \\\n    curl \\\n    python3.8 \\\n    python3.8-venv \\\n    python3.8-dev \\\n    make \\\n    build-essential \\\n    libssl-dev \\\n    libffi-dev \\\n    python3-pip \\\n    zlib1g-dev \\\n    vim \\\n    wget && rm -rf /var/lib/apt/lists/*;\n\n# Install the AWS cli separately to prevent issues with boto being written over\nRUN pip3 install --no-cache-dir awscli\n\nWORKDIR /opt\nRUN curl -f https://sdk.cloud.google.com > install.sh\nRUN bash /opt/install.sh --install-dir=/opt\nENV PATH $PATH:/opt/google-cloud-sdk/bin\nWORKDIR /root\n\n# Virtual environment\nENV VENV /opt/venv\nRUN python3 -m venv ${VENV}\nENV PATH=\"${VENV}/bin:$PATH\"\n\n# Download BLAST\nRUN wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.12.0/ncbi-blast-2.12.0+-x64-linux.tar.gz && \\\n    tar -xzf ncbi-blast-2.12.0+-x64-linux.tar.gz && rm ncbi-blast-2.12.0+-x64-linux.tar.gz\n\nENV PATH=\".:/ncbi-blast-2.12.0+/bin:${PATH}\"\n\n# Check if BLAST is installed\nRUN echo $(blastx)\n\n# Set the working directory\nWORKDIR /root\n\n# Install Python dependencies\nCOPY blast/requirements.txt /root\nRUN ${VENV}/bin/pip install --no-cache-dir -r /root/requirements.txt\n\n# Copy the makefile targets to expose on the container. This makes it easier to register.\nCOPY in_container.mk /root/Makefile\nCOPY blast/sandbox.config /root\n\n# Copy the actual code\nCOPY blast/ /root/blast/\n\n# Copy over the helper script that the SDK relies on\nRUN cp ${VENV}/bin/flytekit_venv /usr/local/bin/\nRUN chmod a+x /usr/local/bin/flytekit_venv\n\n# This tag is supplied by the build script and will be used to determine the version\n# when registering tasks, workflows, and launch plans\nARG tag\nENV FLYTE_INTERNAL_IMAGE $tag\nENV FLYTE_SDK_USE_STRUCTURED_DATASET TRUE\n"
}