{
  "startTime": 1674220394403,
  "endTime": 1674220395305,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:focal\nLABEL org.opencontainers.image.source https://github.com/flyteorg/flytesnacks\n\nWORKDIR /root\nENV VENV /opt/venv\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\nENV PYTHONPATH /root\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install Python3 and other basics\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n    && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    cmake \\\n    g++-7 \\\n    curl \\\n    git \\\n    wget \\\n    python3.8 \\\n    python3.8-venv \\\n    python3.8-dev \\\n    make \\\n    libssl-dev \\\n    python3-pip \\\n    python3-wheel \\\n    libuv1 && rm -rf /var/lib/apt/lists/*;\n\nENV VENV /opt/venv\n# Virtual environment\nRUN python3.8 -m venv ${VENV}\nENV PATH=\"${VENV}/bin:$PATH\"\n\n# Install AWS CLI to run on AWS (for GCS install GSutil). This will be removed\n# in future versions to make it completely portable\nRUN pip3 install --no-cache-dir awscli\n\nWORKDIR /opt\nRUN curl -f https://sdk.cloud.google.com > install.sh\nRUN bash /opt/install.sh --install-dir=/opt\nENV PATH $PATH:/opt/google-cloud-sdk/bin\nWORKDIR /root\n\n# Install wheel after venv is activated\nRUN pip3 install --no-cache-dir wheel\n\n# MPI\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \\\n    tar zxf openmpi-4.0.0.tar.gz && \\\n    cd openmpi-4.0.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-4.0.0.tar.gz\n\n# Install OpenSSH for MPI to communicate between containers\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && \\\n    mkdir -p /var/run/sshd && rm -rf /var/lib/apt/lists/*;\n\n# Allow OpenSSH to talk to containers without asking for confirmation\n# by disabling StrictHostKeyChecking.\n# mpi-operator mounts the .ssh folder from a Secret. For that to work, we need\n# to disable UserKnownHostsFile to avoid write permissions.\n# Disabling StrictModes avoids directory and files read permission checks.\nRUN sed -i 's/[ #]\\(.*StrictHostKeyChecking \\).*/ \\1no/g' /etc/ssh/ssh_config && \\\n    echo \"    UserKnownHostsFile /dev/null\" >> /etc/ssh/ssh_config && \\\n    sed -i 's/#\\(StrictModes \\).*/\\1no/g' /etc/ssh/sshd_config\n\n# Horovod-related installations\nRUN pip install --no-cache-dir tensorflow==2.9.1\n# Enable GPU\n# ENV HOROVOD_GPU_OPERATIONS NCCL\nRUN HOROVOD_WITH_MPI=1 HOROVOD_WITH_TENSORFLOW=1 pip install --no-cache-dir horovod[spark,tensorflow]==0.24.3\n\n# Setup HOROVOD entrypoint\n# TODO: Set the entrypoint\n# ENV HOROVOD_PROGRAM /opt/venv/bin/flytekit_mpi_runner.py\n\n# Install Python dependencies\nCOPY spark_horovod/requirements.txt /root\nRUN pip install --no-cache-dir -r /root/requirements.txt\n\n# SPARK\nRUN flytekit_install_spark3.sh\n# Adding Tini support for the spark pods\nRUN wget  https://github.com/krallin/tini/releases/download/v0.18.0/tini && \\\n    cp tini /sbin/tini && cp tini /usr/bin/tini && \\\n    chmod a+x /sbin/tini && chmod a+x /usr/bin/tini\n\n# Setup Spark environment\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV SPARK_HOME /opt/spark\nENV SPARK_VERSION 3.0.1\nENV PYSPARK_PYTHON ${VENV}/bin/python3\nENV PYSPARK_DRIVER_PYTHON ${VENV}/bin/python3\n\n\n# Copy the actual code\nCOPY spark_horovod/ /root/spark_horovod\nCOPY in_container.mk /root/Makefile\nCOPY spark_horovod/sandbox.config /root\n\n# This tag is supplied by the build script and will be used to determine the version\n# when registering tasks, workflows, and launch plans\nARG tag\nENV FLYTE_INTERNAL_IMAGE $tag\n\n# Copy over the helper script that the SDK relies on\nRUN cp ${VENV}/bin/flytekit_venv /usr/local/bin/\nRUN chmod a+x /usr/local/bin/flytekit_venv\n\nENTRYPOINT [\"/opt/entrypoint.sh\"]\n"
}