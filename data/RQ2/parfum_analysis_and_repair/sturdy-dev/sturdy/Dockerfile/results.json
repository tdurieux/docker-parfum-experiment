{
  "startTime": 1674248839853,
  "endTime": 1674248841103,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 137,
        "lineEnd": 139,
        "columnStart": 61,
        "columnEnd": 32
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 6,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 25,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 92,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 112,
        "columnStart": 7,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 25,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG XX_VERSION=1.1.0\n\nFROM --platform=$BUILDPLATFORM tonistiigi/xx:${XX_VERSION} AS xx\n\nFROM golang:1.18.0-bullseye as ssh-builder\nWORKDIR /go/src/ssh\nCOPY ./ssh/scripts/build-mutagen.sh ./scripts/build-mutagen.sh\nRUN --mount=type=cache,target=/root/.cache/go-build \\\n    --mount=type=cache,target=/root/.cache/go-mod \\\n    export GOMODCACHE=/root/.cache/go-mod && \\\n    bash ./scripts/build-mutagen.sh\n# cache ssh depencencies\nCOPY ./ssh/go.mod ./go.mod\nCOPY ./ssh/go.sum ./go.sum\nCOPY ./ssh .\nRUN --mount=type=cache,target=/root/.cache/go-build \\\n    --mount=type=cache,target=/root/.cache/go-mod \\\n    GOMODCACHE=/root/.cache/go-mod \\\n    go build -v -o /usr/bin/ssh getsturdy.com/ssh/cmd/ssh\n\nFROM debian:11.2-slim as ssh\nRUN apt-get update && apt-get install -y --no-install-recommends --allow-downgrades \\\n    ca-certificates \\\n    && rm -rf /var/lib/apt/lists/*\nCOPY --from=ssh-builder /usr/bin/ssh /usr/bin/ssh\nCOPY --from=ssh-builder /go/src/ssh/mutagen-agent-v0.12.0-beta2 /usr/bin/mutagen-agent-v0.12.0-beta2\nCOPY --from=ssh-builder /go/src/ssh/mutagen-agent-v0.12.0-beta6 /usr/bin/mutagen-agent-v0.12.0-beta6\nCOPY --from=ssh-builder /go/src/ssh/mutagen-agent-v0.12.0-beta7 /usr/bin/mutagen-agent-v0.12.0-beta7\nCOPY --from=ssh-builder /go/src/ssh/mutagen-agent-v0.13.0-beta2 /usr/bin/mutagen-agent-v0.13.0-beta2\n\nFROM golang:1.18.0-bullseye as libgit-builder\n\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    build-essential \\\n    clang \\\n    libssl-dev \\\n    libz-dev \\\n    cmake && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=xx / /\n\nWORKDIR /static\nCOPY --chmod=0744 scripts/docker/build_libgit2.sh .\nRUN ./build_libgit2.sh build_libgit2\n\n# TODO(gustav): figure out why running this step above (before building libgit2) breaks things\nRUN apt-get update && apt-get install --no-install-recommends -y libssh2-1-dev && rm -rf /var/lib/apt/lists/*\n\nFROM libgit-builder as api-builder\n\nWORKDIR /go/src/api\n\n# build api\nARG API_BUILD_TAGS\nARG VERSION\nCOPY ./api ./\n\nENV LD_LIBRARY_PATH=/usr/local/lib\nENV CGO_ENABLED=1\n\nRUN --mount=type=cache,target=/root/.cache/go-build,id=go-build \\\n    --mount=type=cache,target=/root/.cache/go-mod,id=go-cache \\\n    export LIBRARY_PATH=\"/usr/local/$(xx-info triple):/usr/local/$(xx-info triple)/lib64:${LIBRARY_PATH}\" && \\\n    export PKG_CONFIG_PATH=\"/usr/local/$(xx-info triple)/lib/pkgconfig:/usr/local/$(xx-info triple)/lib64/pkgconfig:${PKG_CONFIG_PATH}\" && \\\n    export FLAGS=\"$(pkg-config --static --libs --cflags libssh2 openssl libgit2)\" && \\\n    export CGO_LDFLAGS=\"${FLAGS} -static\" && \\\n    export GOMODCACHE=/root/.cache/go-mod && \\\n    go build \\\n    -tags \"${API_BUILD_TAGS},netgo,osusergo,static_build\" \\\n    -ldflags \"-X getsturdy.com/api/pkg/version.Version=${VERSION}\" \\\n    -v -o /usr/bin/api  getsturdy.com/api/cmd/api\n\nFROM debian:11.2-slim as api\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --allow-downgrades \\\n    git-lfs=2.13.2-1+b5 \\\n    ca-certificates \\\n    && rm -rf /var/lib/apt/lists/*\nCOPY --from=api-builder /usr/bin/api /usr/bin/api\nENTRYPOINT [ \"/usr/bin/api\" ]\n\n# for amd64, use a prebuild rudolfs image\nFROM jasonwhite0/rudolfs:0.3.5 as rudolfs-builder-amd64\n# for arm64, compile from source, since there is no prebuild image\nFROM --platform=$BUILDPLATFORM rust:1.55 as rudolfs-builder-arm64\nENV PKG_CONFIG_ALLOW_CROSS=\"1\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    CARGO_BUILD_TARGET=\"aarch64-unknown-linux-gnu\"\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends --allow-downgrades install \\\n    musl-tools \\\n    ca-certificates \\\n    git \\\n    && git clone https://github.com/jasonwhite/rudolfs && rm -rf /var/lib/apt/lists/*;\nWORKDIR /rudolfs\nSHELL [\"/bin/bash\", \"-c\"]\nRUN --mount=type=cache,target=/usr/local/cargo/registry \\\n    --mount=type=cache,target=/rudolfs/target \\\n    git checkout 0.3.5 \\\n    && rustup target add \"${CARGO_BUILD_TARGET}\" \\\n    && cargo build --target \"${CARGO_BUILD_TARGET}\" --release  \\\n    && mkdir -p /build \\\n    && cp \"target/${CARGO_BUILD_TARGET}/release/rudolfs\" /build/ \\\n    && strip /build/rudolfs\n\nFROM debian:11.2-slim as rudolfs\nVOLUME [\"/data\"]\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends --allow-downgrades \\\n    ca-certificates && rm -rf /var/lib/apt/lists/*;\n# use the correct binary depending on the architecture. we do this to avoid building amd64 version ourselves,\n# as it requires us to run qemu emulation which is very slow.\nARG TARGETARCH\nCOPY --from=rudolfs-builder-arm64 /build/rudolfs /arm64/rudolfs\nCOPY --from=rudolfs-builder-amd64 /rudolfs /amd64/rudolfs\nRUN cp \"/${TARGETARCH}/rudolfs\" /usr/bin/rudolfs\nEXPOSE 8080\nENTRYPOINT [\"/usr/bin/rudolfs\"]\nCMD [\"--cache-dir\", \"/data\"]\n\nFROM --platform=$BUILDPLATFORM node:17.3.1-alpine3.15 as web-builder\n# The website is the same for linux/amd64 and linux/arm64 (output is html), setting --platform to run all builds on the\n# native host platform. (Skips emulation!)\nWORKDIR /web\nRUN apk update \\\n    && apk add --no-cache \\\n    python3=3.9.7-r4 \\\n    make=4.3-r0 \\\n    g++ \\\n    git\n# cache web dependencies\nCOPY ./web/package.json ./package.json\nCOPY ./web/yarn.lock ./yarn.lock\n# The --network-timeout is here to prevent network issues when building linux/amd64 images on linux/arm64 hosts\nRUN --mount=type=cache,target=/root/.yarn,id=web-installer-3 YARN_CACHE_FOLDER=/root/.yarn \\\n    yarn install --frozen-lockfile \\\n    --network-timeout 1000000000 && yarn cache clean;\n# build web\nCOPY ./web .\nRUN yarn build:oneliner\n\nFROM golang:1.18.0-bullseye as sslmux-builder\nRUN --mount=type=cache,target=/root/.cache/go-build \\\n    --mount=type=cache,target=/root/.cache/go-mod \\\n    GOMODCACHE=/root/.cache/go-mod \\\n    go install -v github.com/JamesDunne/sslmux@v0.0.0-20180531161153-81a78ca8247d\n\nFROM debian:11.2-slim  as reproxy-builder\nARG REPROXY_VERSION=\"v0.11.0\"\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN if [[ \"$(uname -m)\" == 'aarch64' ]]; then \\\n    ARCH='arm64'; \\\n    REPROXY_SHA256_SUM='35dd1cc3568533a0b6e1109e7ba630d60e2e39716eea28d3961c02f0feafee8e'; \\\n    elif [[ \"$(uname -m)\" == 'x86_64' ]]; then \\\n    ARCH='x86_64'; \\\n    REPROXY_SHA256_SUM='100a1389882b8ab68ae94f37e9222f5f928ece299d8cfdf5b26c9f12f902c23a'; \\\n    fi \\\n    && apt-get update && apt-get install --no-install-recommends -y wget \\\n    && wget --quiet --output-document \"/tmp/reproxy.tar.gz\" \"https://github.com/umputun/reproxy/releases/download/${REPROXY_VERSION}/reproxy_${REPROXY_VERSION}_linux_${ARCH}.tar.gz\" \\\n    && sha256sum \"/tmp/reproxy.tar.gz\" \\\n    && echo \"${REPROXY_SHA256_SUM}  /tmp/reproxy.tar.gz\" | sha256sum -c \\\n    && tar -xzf /tmp/reproxy.tar.gz -C /usr/bin \\\n    && rm /tmp/reproxy.tar.gz && rm -rf /var/lib/apt/lists/*;\n\nFROM debian:11.2-slim as oneliner\n# postgresql\n# openssl is needed by rudolfs to generate secret\n# git, git-lfs and libgit2 are needed by api\n# openssh-keygen is needed by ssh to generate ssh keys\n# ca-cerificates is needed by ssh to connect to tls hosts\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --allow-downgrades \\\n    curl=7.74.0-1.3+deb11u1 \\\n    ca-certificates=20210119 \\\n    gnupg \\\n    && curl -f https://www.postgresql.org/media/keys/ACCC4CF8.asc \\\n    | gpg --batch --dearmor \\\n    | tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null \\\n    && echo \"deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main\" > /etc/apt/sources.list.d/postgresql.list \\\n    && apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --allow-downgrades \\\n    postgresql-14=14.2-1.pgdg110+1 \\\n    openssl=1.1.1k-1+deb11u2 \\\n    git=1:2.30.2-1 \\\n    git-lfs=2.13.2-1+b5 \\\n    keychain=2.8.5-2 \\\n    wget \\\n    bash \\\n    xz-utils \\\n    && rm -rf /var/lib/apt/lists/*\n\n# s6-overlay\nARG S6_OVERLAY_VERSION=\"3.0.0.2\" \\\n    S6_OVERLAY_NOARCH_SHA256_SUM=\"17880e4bfaf6499cd1804ac3a6e245fd62bc2234deadf8ff4262f4e01e3ee521\" \\\n    S6_OVERLAY_SYMLINKS_ARCH_SHA256_SUM=\"6ee2b8580b23c0993b1e8c66b58777f32f6ff031ba0192cccd53a31e62942c70\" \\\n    S6_OVERLAY_SYMLINKS_NOARCH_SHA256_SUM=\"d67c9b436ef59ffefd4f083f07b2869662af40b2ea79a069b147dd0c926db2d3\"\nRUN ARCH=\"$(uname -m)\" \\\n    && if [[ \"$ARCH\" == 'x86_64' ]]; then \\\n    S6_OVERLAY_ARCH_SHA256_SUM=\"a4c039d1515812ac266c24fe3fe3c00c48e3401563f7f11d09ac8e8b4c2d0b0c\"; \\\n    elif [[ \"$ARCH\" == 'aarch64' ]]; then \\\n    S6_OVERLAY_ARCH_SHA256_SUM=\"e6c15e22dde00af4912d1f237392ac43a1777633b9639e003ba3b78f2d30eb33\"; \\\n    fi \\\n    && wget --quiet --output-document \"/tmp/s6-overlay-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \"https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && sha256sum \"/tmp/s6-overlay-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && echo \"${S6_OVERLAY_NOARCH_SHA256_SUM}  /tmp/s6-overlay-noarch-${S6_OVERLAY_VERSION}.tar.xz\" | sha256sum -c \\\n    && tar -C / -Jxpf \"/tmp/s6-overlay-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && rm \"/tmp/s6-overlay-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    \\\n    && wget --quiet --output-document \"/tmp/s6-overlay-${ARCH}-${S6_OVERLAY_VERSION}.tar.xz\" \"https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && sha256sum \"/tmp/s6-overlay-${ARCH}-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && echo \"${S6_OVERLAY_ARCH_SHA256_SUM}  /tmp/s6-overlay-${ARCH}-${S6_OVERLAY_VERSION}.tar.xz\" | sha256sum -c \\\n    && tar -C / -Jxpf \"/tmp/s6-overlay-${ARCH}-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && rm \"/tmp/s6-overlay-${ARCH}-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    \\\n    && wget --quiet --output-document \"/tmp/s6-overlay-symlinks-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \"https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-symlinks-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && sha256sum \"/tmp/s6-overlay-symlinks-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && echo \"${S6_OVERLAY_SYMLINKS_NOARCH_SHA256_SUM}  /tmp/s6-overlay-symlinks-noarch-${S6_OVERLAY_VERSION}.tar.xz\" | sha256sum -c \\\n    && tar -C / -Jxpf \"/tmp/s6-overlay-symlinks-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && rm \"/tmp/s6-overlay-symlinks-noarch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    \\\n    && wget --quiet --output-document \"/tmp/s6-overlay-symlinks-arch-${S6_OVERLAY_VERSION}.tar.xz\" \"https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-symlinks-arch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && sha256sum \"/tmp/s6-overlay-symlinks-arch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && echo \"${S6_OVERLAY_SYMLINKS_ARCH_SHA256_SUM}  /tmp/s6-overlay-symlinks-arch-${S6_OVERLAY_VERSION}.tar.xz\" | sha256sum -c \\\n    && tar -C / -Jxpf \"/tmp/s6-overlay-symlinks-arch-${S6_OVERLAY_VERSION}.tar.xz\" \\\n    && rm \"/tmp/s6-overlay-symlinks-arch-${S6_OVERLAY_VERSION}.tar.xz\"\nCOPY oneliner/etc /etc\n\n# use the correct binary depending on the architecture. we do this to avoid building amd64 version ourselves,\n# as it requires us to run qemu emulation which is very slow.\nARG TARGETARCH\nCOPY --from=rudolfs-builder-arm64 /build/rudolfs /arm64/rudolfs\nCOPY --from=rudolfs-builder-amd64 /rudolfs /amd64/rudolfs\nRUN cp \"/${TARGETARCH}/rudolfs\" /usr/bin/rudolfs\nCOPY --from=ssh-builder /go/src/ssh/mutagen-agent-v0.12.0-beta2 /usr/bin/mutagen-agent-v0.12.0-beta2\nCOPY --from=ssh-builder /go/src/ssh/mutagen-agent-v0.12.0-beta6 /usr/bin/mutagen-agent-v0.12.0-beta6\nCOPY --from=ssh-builder /go/src/ssh/mutagen-agent-v0.12.0-beta7 /usr/bin/mutagen-agent-v0.12.0-beta7\nCOPY --from=ssh-builder /go/src/ssh/mutagen-agent-v0.13.0-beta2 /usr/bin/mutagen-agent-v0.13.0-beta2\nCOPY --from=reproxy-builder /usr/bin/reproxy /usr/bin/reproxy\nCOPY --from=sslmux-builder /go/bin/sslmux /usr/bin/sslmux\nCOPY --from=ssh-builder /usr/bin/ssh /usr/bin/ssh\nCOPY --from=web-builder /web/dist/oneliner /web/dist\nCOPY --from=api-builder /usr/bin/api /usr/bin/api\n\n\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"C\" \\\n    S6_KILL_GRACETIME=0 \\\n    S6_SERVICES_GRACETIME=0 \\\n    S6_CMD_WAIT_FOR_SERVICES_MAXTIME=300000 \\\n    STURDY_GITHUB_APP_ID=0 \\\n    STURDY_GITHUB_APP_CLIENT_ID= \\\n    STURDY_GITHUB_APP_SECRET= \\\n    STURDY_GITHUB_APP_PRIVATE_KEY_PATH= \\\n    STURDY_API_ALLOW_CORS_ORIGINS=http://127.0.0.1:80 \\\n    STURDY_ANALYTICS_DISABLE=false\n\n# Expose sslmux on port 7000, acting as the entrypoint to the application\nEXPOSE 7000\n\nVOLUME [ \"/var/data\" ]\nENTRYPOINT [ \"/init\" ]\n"
}