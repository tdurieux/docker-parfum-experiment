{
  "startTime": 1674255192962,
  "endTime": 1674255193534,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 18,
        "columnEnd": 103
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 145
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 18,
        "columnEnd": 103
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#FROM python:3.8 as build\n#\n#ENV PIP_NO_CACHE_DIR=1\n#\n#WORKDIR /app/labeler\n#\n#RUN --mount=type=cache,target=/var/cache/apt \\\n#  apt update && apt-get install -y gcc build-essential cmake pkg-config libx11-dev libatlas-base-dev libgtk-3-dev libboost-python-dev cmake libtool autoconf\n#\n#RUN pip install \"poetry==1.1.12\"\n#RUN python -m venv /venv\n#ENV VIRTUAL_ENV=/venv\n#ENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n#\n#WORKDIR /app\n#\n#RUN touch /app/labeler/empty.py\n#COPY [\"pyproject.toml\", \"poetry.lock\", \"/app/\"]\n#RUN poetry config virtualenvs.in-project true && poetry install\n#COPY [\".\", \"/app\"]\n#\n#FROM python:3.8-alpine as final\n#ENV PATH=\"/app/.venv/bin:$PATH\"\n#WORKDIR /app\n#\n#COPY --from=build /app /app\n#\n#CMD [\"poetry\", \"run\", \"celery\", \"-A\", \"labeler.main\", \"worker\"]\n\n# `python-base` sets up all our shared environment variables\nFROM python:3.8 as python-base\n\n    # python\nENV PYTHONUNBUFFERED=1 \\\n    # prevents python creating .pyc files\n    PYTHONDONTWRITEBYTECODE=1 \\\n    \\\n    # pip\n    PIP_NO_CACHE_DIR=off \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    PIP_DEFAULT_TIMEOUT=100 \\\n    \\\n    # poetry\n    # https://python-poetry.org/docs/configuration/#using-environment-variables\n    POETRY_VERSION=1.1.12 \\\n    # make poetry install to this location\n    POETRY_HOME=\"/opt/poetry\" \\\n    # make poetry create the virtual environment in the project's root\n    # it gets named `.venv`\n    POETRY_VIRTUALENVS_IN_PROJECT=true \\\n    # do not ask any interactive question\n    POETRY_NO_INTERACTION=1 \\\n    \\\n    # paths\n    # this is where our requirements + virtual environment will live\n    PYSETUP_PATH=\"/opt/pysetup\" \\\n    VENV_PATH=\"/opt/pysetup/.venv\"\n\n\n# prepend poetry and venv to path\nENV PATH=\"$POETRY_HOME/bin:$VENV_PATH/bin:$PATH\"\n\n\n# `builder-base` stage is used to build deps + create our virtual environment\nFROM python-base as builder-base\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        # deps for installing poetry\n        curl \\\n        # deps for building python deps\n        build-essential gcc build-essential cmake pkg-config libx11-dev libatlas-base-dev libgtk-3-dev libboost-python-dev cmake libtool autoconf && rm -rf /var/lib/apt/lists/*;\n\n# install poetry - respects $POETRY_VERSION & $POETRY_HOME\nRUN curl -f -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n\n# copy project requirement files here to ensure they will be cached.\nWORKDIR $PYSETUP_PATH\nCOPY poetry.lock pyproject.toml ./\n\n# install runtime deps - uses $POETRY_VIRTUALENVS_IN_PROJECT internally\nCOPY poetry.lock /\nRUN --mount=type=cache,target=/home/.cache/pypoetry/cache \\\n    --mount=type=cache,target=/home/.cache/pypoetry/artifacts \\\n    poetry install\n\n# `production` image used for runtime\nFROM python-base as production\n\nRUN pip3 install --no-cache-dir opencv-contrib-python\nRUN apt update && apt-get install --no-install-recommends -y libatlas-base-dev libhdf5-dev libhdf5-serial-dev libatlas-base-dev && rm -rf /var/lib/apt/lists/*;\nCOPY --from=builder-base $PYSETUP_PATH $PYSETUP_PATH\nCOPY . /app/\nWORKDIR /app\n# Set user and group\nARG user=worker\nARG group=worker\nARG uid=1000\nARG gid=1000\nRUN groupadd -g ${gid} ${group}\nRUN useradd -u ${uid} -g ${group} -s /bin/sh -m ${user} # <--- the '-m' create a user home directory\n\n# Switch to user\nUSER ${uid}:${gid}\n\nCMD [\"celery\", \"-A\", \"labeler.main\", \"worker\"]\n"
}