{
  "startTime": 1674250163021,
  "endTime": 1674250164231,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 22,
        "columnEnd": 31
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 2,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch-slim\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r redis && useradd -r -g redis redis\n\n# grab gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.10\nRUN set -ex; \\\n\n  fetchDeps=\" \\\n    ca-certificates \\\n    dirmngr \\\n    gnupg \\\n    wget \\\n  \"; \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends $fetchDeps; \\\n  rm -rf /var/lib/apt/lists/*; \\\n\n  dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n  wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n  wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n  export GNUPGHOME=\"$(mktemp -d)\"; rm -rf -d \\\n  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n  gpgconf --kill all; \\\n  rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n  chmod +x /usr/local/bin/gosu; \\\n  gosu nobody true; \\\n\n  apt-get purge -y --auto-remove $fetchDeps\n\nENV REDIS_VERSION 5.0.3\nENV REDIS_DOWNLOAD_URL http://download.redis.io/releases/redis-5.0.3.tar.gz\nENV REDIS_DOWNLOAD_SHA e290b4ddf817b26254a74d5d564095b11f9cd20d8f165459efa53eb63cd93e02\n\n# for redis-sentinel see: http://redis.io/topics/sentinel\nRUN set -ex; \\\n\n  buildDeps=' \\\n    ca-certificates \\\n    wget \\\n    \\\n    gcc \\\n    libc6-dev \\\n    make \\\n  '; \\\n  apt-get update; \\\n  apt-get install -y $buildDeps --no-install-recommends; \\\n  rm -rf /var/lib/apt/lists/*; \\\n\n  wget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \\\n  echo \"$REDIS_DOWNLOAD_SHA  *redis.tar.gz\" | sha256sum -c -; \\\n  mkdir -p /usr/src/redis; \\\n  tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \\\n  rm redis.tar.gz; \\\n\n# disable Redis protected mode [1] as it is unnecessary in context of Docker\n# (ports are not automatically exposed when running inside Docker, but rather explicitly by specifying -p / -P)\n# [1]: https://github.com/antirez/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da\n  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \\\n  sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h; \\\n  grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \\\n# for future reference, we modify this directly in the source instead of just supplying a default configuration flag because apparently \"if you specify any argument to redis-server, [it assumes] you are going to specify everything\"\n# see also https://github.com/docker-library/redis/issues/4#issuecomment-50780840\n# (more exactly, this makes sure the default behavior of \"save on SIGTERM\" stays functional by default)\n\n  make -C /usr/src/redis -j \"$(nproc)\"; \\\n  make -C /usr/src/redis install; \\\n\n  rm -r /usr/src/redis; \\\n\n  apt-get purge -y --auto-remove $buildDeps\n\nRUN mkdir /data && chown redis:redis /data\nVOLUME /data\nWORKDIR /data\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 6379\nCMD [\"redis-server\"]"
}