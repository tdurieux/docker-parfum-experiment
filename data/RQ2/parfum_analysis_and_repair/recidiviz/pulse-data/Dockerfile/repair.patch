diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/recidiviz/pulse-data/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/recidiviz/pulse-data/Dockerfile/repaired.Dockerfile
index cb40ed7..4b1a703 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/recidiviz/pulse-data/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/recidiviz/pulse-data/Dockerfile/repaired.Dockerfile
@@ -6,13 +6,13 @@ COPY ./frontends/admin-panel/tsconfig.json ./frontends/admin-panel/.eslintrc.jso
 
 # Set a 5 minute timeout instead of the default 30s. For some reason, when building with the
 # --platform argument, it takes longer to download packages from yarn.
-RUN yarn config set network-timeout 300000
-RUN yarn
+RUN yarn config set network-timeout 300000 && yarn cache clean;
+RUN yarn && yarn cache clean;
 
 COPY ./frontends/admin-panel/src /usr/admin-panel/src
 COPY ./frontends/admin-panel/public /usr/admin-panel/public
 
-RUN yarn build
+RUN yarn build && yarn cache clean;
 
 FROM node:14-alpine as case-triage-build
 
@@ -21,13 +21,13 @@ COPY ./frontends/case-triage/package.json ./frontends/case-triage/yarn.lock /usr
 COPY ./frontends/case-triage/tsconfig.json ./frontends/case-triage/.eslintrc.json /usr/case-triage/
 COPY ./frontends/case-triage/craco.config.js /usr/case-triage/
 
-RUN yarn config set network-timeout 300000
-RUN yarn
+RUN yarn config set network-timeout 300000 && yarn cache clean;
+RUN yarn && yarn cache clean;
 
 COPY ./frontends/case-triage/src /usr/case-triage/src
 COPY ./frontends/case-triage/public /usr/case-triage/public
 
-RUN yarn build
+RUN yarn build && yarn cache clean;
 
 FROM node:14-alpine as justice-counts-build
 
@@ -36,13 +36,13 @@ COPY ./frontends/justice-counts/control-panel/package.json /usr/justice-counts/c
 COPY ./frontends/justice-counts/control-panel/yarn.lock /usr/justice-counts/control-panel
 COPY ./frontends/justice-counts/control-panel/tsconfig.json /usr/justice-counts/control-panel
 
-RUN yarn config set network-timeout 300000
-RUN yarn
+RUN yarn config set network-timeout 300000 && yarn cache clean;
+RUN yarn && yarn cache clean;
 
 COPY ./frontends/justice-counts/control-panel/src /usr/justice-counts/control-panel/src
 COPY ./frontends/justice-counts/control-panel/public /usr/justice-counts/control-panel/public
 
-RUN yarn build
+RUN yarn build && yarn cache clean;
 
 FROM ubuntu:focal
 
@@ -58,18 +58,18 @@ ENV TZ America/New_York
 
 # Add a package repo to get archived python versions.
 RUN apt update -y && \
-    apt install -y software-properties-common && \
-    add-apt-repository ppa:deadsnakes/ppa
+    apt install --no-install-recommends -y software-properties-common && \
+    add-apt-repository ppa:deadsnakes/ppa && rm -rf /var/lib/apt/lists/*;
 
 RUN apt update -y && \
-    apt install -y \
+    apt install --no-install-recommends -y \
     locales \
     git \
     libxml2-dev libxslt1-dev \
     python3.9-dev python3.9-distutils python3-pip \
     default-jre \
     libpq-dev \
-    curl
+    curl && rm -rf /var/lib/apt/lists/*;
 
 RUN locale-gen en_US.UTF-8
 ENV LC_ALL en_US.UTF-8
@@ -83,7 +83,7 @@ RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
 # logging collection.
 ENV PYTHONUNBUFFERED 1
 
-RUN pip3 install pipenv
+RUN pip3 install --no-cache-dir pipenv
 
 # If DEV_MODE="True", then install dependencies required for running tests
 ARG DEV_MODE="False"
@@ -91,20 +91,22 @@ ARG DEV_MODE="False"
 # Install the google cloud sdk to enable the gcp emulator (eg. fake datastore, fake pubsub)
 # As described in: https://stackoverflow.com/questions/48250338/installing-gcloud-on-travis-ci
 RUN if [ "$DEV_MODE" = "True" ]; \
-    then apt-get update && apt install -y lsb-core && \
+    then \
+    apt-get update && apt install --no-install-recommends -y lsb-core && \
     echo "deb http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
-    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
-    apt update -y && apt-get install google-cloud-sdk -y && \
-    apt install google-cloud-sdk-datastore-emulator -y && \
-    apt install google-cloud-sdk-pubsub-emulator -y; \
+    curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
+    apt update -y && apt-get install --no-install-recommends google-cloud-sdk -y && \
+    apt install --no-install-recommends google-cloud-sdk-datastore-emulator -y && \
+    apt install --no-install-recommends google-cloud-sdk-pubsub-emulator -y; rm -rf /var/lib/apt/lists/*; \
     fi
 
 # Install postgres to be used by tests that need to write to a database from multiple threads.
 RUN if [ "$DEV_MODE" = "True" ]; \
-    then apt-get install wget && \
+    then \
+    apt-get install -y --no-install-recommends wget && \
     wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \
     echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list && \
-    apt-get update && apt-get install postgresql-13 -y; \
+    apt-get update && apt-get install --no-install-recommends postgresql-13 -y; rm -rf /var/lib/apt/lists/*; \
     fi
 # Add all the postgres tools installed above to the path, so that we can use pg_ctl, etc. in tests.
 # Uses variable substitution to set PATH_PREFIX to '/usr/lib/postgresql/13/bin/' in DEV_MODE and otherwise leave it