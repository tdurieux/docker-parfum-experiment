{
  "startTime": 1674217354079,
  "endTime": 1674217359236,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 9,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 27,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 21,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 9,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 9,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 27,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 21,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 9,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 22,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 46,
        "columnEnd": 62
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 12,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 46,
        "columnEnd": 62
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 12,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 46,
        "columnEnd": 62
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 12,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "FROM node:14-alpine as admin-panel-build\n\nWORKDIR /usr/admin-panel\nCOPY ./frontends/admin-panel/package.json ./frontends/admin-panel/yarn.lock /usr/admin-panel/\nCOPY ./frontends/admin-panel/tsconfig.json ./frontends/admin-panel/.eslintrc.json /usr/admin-panel/\n\n# Set a 5 minute timeout instead of the default 30s. For some reason, when building with the\n# --platform argument, it takes longer to download packages from yarn.\nRUN yarn config set network-timeout 300000 && yarn cache clean;\nRUN yarn && yarn cache clean;\n\nCOPY ./frontends/admin-panel/src /usr/admin-panel/src\nCOPY ./frontends/admin-panel/public /usr/admin-panel/public\n\nRUN yarn build && yarn cache clean;\n\nFROM node:14-alpine as case-triage-build\n\nWORKDIR /usr/case-triage\nCOPY ./frontends/case-triage/package.json ./frontends/case-triage/yarn.lock /usr/case-triage/\nCOPY ./frontends/case-triage/tsconfig.json ./frontends/case-triage/.eslintrc.json /usr/case-triage/\nCOPY ./frontends/case-triage/craco.config.js /usr/case-triage/\n\nRUN yarn config set network-timeout 300000 && yarn cache clean;\nRUN yarn && yarn cache clean;\n\nCOPY ./frontends/case-triage/src /usr/case-triage/src\nCOPY ./frontends/case-triage/public /usr/case-triage/public\n\nRUN yarn build && yarn cache clean;\n\nFROM node:14-alpine as justice-counts-build\n\nWORKDIR /usr/justice-counts/control-panel\nCOPY ./frontends/justice-counts/control-panel/package.json /usr/justice-counts/control-panel\nCOPY ./frontends/justice-counts/control-panel/yarn.lock /usr/justice-counts/control-panel\nCOPY ./frontends/justice-counts/control-panel/tsconfig.json /usr/justice-counts/control-panel\n\nRUN yarn config set network-timeout 300000 && yarn cache clean;\nRUN yarn && yarn cache clean;\n\nCOPY ./frontends/justice-counts/control-panel/src /usr/justice-counts/control-panel/src\nCOPY ./frontends/justice-counts/control-panel/public /usr/justice-counts/control-panel/public\n\nRUN yarn build && yarn cache clean;\n\nFROM ubuntu:focal\n\nENV DEBIAN_FRONTEND noninteractive\n\n# NOTE: It is is extremely important that we do not delete this\n# variable. One of our dependencies, dateparser, seems to require\n# that TZ is defined (to be truly anything) in order to parse dates\n# properly. If it is not defined, our date parsing will silently\n# return None in a large set of circumstances which is of course,\n# unideal.\nENV TZ America/New_York\n\n# Add a package repo to get archived python versions.\nRUN apt update -y && \\\n    apt install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository ppa:deadsnakes/ppa && rm -rf /var/lib/apt/lists/*;\n\nRUN apt update -y && \\\n    apt install --no-install-recommends -y \\\n    locales \\\n    git \\\n    libxml2-dev libxslt1-dev \\\n    python3.9-dev python3.9-distutils python3-pip \\\n    default-jre \\\n    libpq-dev \\\n    curl && rm -rf /var/lib/apt/lists/*;\n\nRUN locale-gen en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nENV LC_CTYPE en_US.UTF-8\nENV LANG en_US.UTF-8\n\n# Postgres pulls in tzdata which must have these set to stay noninteractive.\nRUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime\n\n# Make stdout/stderr unbuffered. This prevents delay between output and cloud\n# logging collection.\nENV PYTHONUNBUFFERED 1\n\nRUN pip3 install --no-cache-dir pipenv\n\n# If DEV_MODE=\"True\", then install dependencies required for running tests\nARG DEV_MODE=\"False\"\n\n# Install the google cloud sdk to enable the gcp emulator (eg. fake datastore, fake pubsub)\n# As described in: https://stackoverflow.com/questions/48250338/installing-gcloud-on-travis-ci\nRUN if [ \"$DEV_MODE\" = \"True\" ]; \\\n    then \\\n    apt-get update && apt install --no-install-recommends -y lsb-core && \\\n    echo \"deb http://packages.cloud.google.com/apt cloud-sdk main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \\\n    curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \\\n    apt update -y && apt-get install --no-install-recommends google-cloud-sdk -y && \\\n    apt install --no-install-recommends google-cloud-sdk-datastore-emulator -y && \\\n    apt install --no-install-recommends google-cloud-sdk-pubsub-emulator -y; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n# Install postgres to be used by tests that need to write to a database from multiple threads.\nRUN if [ \"$DEV_MODE\" = \"True\" ]; \\\n    then \\\n    apt-get install -y --no-install-recommends wget && \\\n    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \\\n    echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" | tee /etc/apt/sources.list.d/pgdg.list && \\\n    apt-get update && apt-get install --no-install-recommends postgresql-13 -y; rm -rf /var/lib/apt/lists/*; \\\n    fi\n# Add all the postgres tools installed above to the path, so that we can use pg_ctl, etc. in tests.\n# Uses variable substitution to set PATH_PREFIX to '/usr/lib/postgresql/13/bin/' in DEV_MODE and otherwise leave it\n# blank. Docker doesn't support setting environment variables within conditions, so we can't do this above.\nENV PATH_PREFIX=${DEV_MODE:+/usr/lib/postgresql/13/bin/:}\n# Then prepend our path with whatever is in PATH_PREFIX.\nENV PATH=\"$PATH_PREFIX$PATH\"\n\n# In order to use this Dockerfile with Cloud Run, PIPENV_VENV_IN_PROJECT must be set.\n# If not, Cloud Run will try to \"helpfully\" create a new virtualenv for us which will not match our\n# expected set of dependencies.\n# The main effect of this variable is to create the pipenv environment in the `.venv` folder in the\n# root of the project.\nENV PIPENV_VENV_IN_PROJECT=\"1\"\n\n# Add only the Pipfiles first to ensure we cache `pipenv sync` when application code is updated but not the Pipfiles\nADD Pipfile /app/\nADD Pipfile.lock /app/\n\nWORKDIR /app\n\nRUN if [ \"$DEV_MODE\" = \"True\" ]; \\\n    then pipenv sync --dev; \\\n    else pipenv sync; \\\n    fi\n\n# Add the rest of the application code once all dependencies are installed\nADD . /app\n\n# Add the built Admin Panel, Case Triage, and Justice Counts frontends to the image\nCOPY --from=admin-panel-build /usr/admin-panel/build /app/frontends/admin-panel/build\nCOPY --from=case-triage-build /usr/case-triage/build /app/frontends/case-triage/build\nCOPY --from=justice-counts-build /usr/justice-counts/control-panel/build /app/frontends/justice-counts/control-panel/build\n\n# Add the current commit SHA as an env variable\nARG CURRENT_GIT_SHA=\"\"\nENV CURRENT_GIT_SHA=${CURRENT_GIT_SHA}\n\nEXPOSE 8080\nCMD pipenv run gunicorn -c gunicorn.conf.py --log-file=- -b :8080 recidiviz.server:app\n\n# This makes docker not report that our container is healthy until the flask workers are\n# started and returning 200 on the `/health` endpoint. This is initially only used by\n# our docker-test Github Action.\nHEALTHCHECK --interval=5s --timeout=3s \\\n    CMD curl -f http://localhost:8080/health || exit 1\n"
}