{
  "startTime": 1674248602304,
  "endTime": 1674248603735,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 62,
        "columnStart": 12,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 75,
        "columnStart": 9,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 62,
        "columnStart": 12,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 75,
        "columnStart": 9,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ubuntu 18.04\nFROM ubuntu:bionic\n\n# Tools I find useful during development\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y \\\n        cmake \\\n        pkg-config \\\n        cppcheck \\\n        git \\\n        mercurial \\\n        build-essential \\\n        curl \\\n        libprotobuf-dev \\\n        protobuf-compiler \\\n        libprotoc-dev \\\n        libzmq3-dev \\\n        net-tools \\\n        uuid-dev \\\n        doxygen \\\n        ruby-ronn \\\n        libsqlite3-dev \\\n        g++-8 \\\n        sudo \\\n        gnupg \\\n        lsb-release \\\n        wget \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Use GCC 8\n RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 \\\n        --slave /usr/bin/g++ g++ /usr/bin/g++-8 \\\n        --slave /usr/bin/gcov gcov /usr/bin/gcov-8\n\n# Set USER and GROUP\nARG USER=developer\nARG GROUP=developer\n\n# Add a user with the same user_id as the user outside the container\n# Requires a docker build argument `user_id`.\n\nRUN curl -f -SsL https://github.com/boxboat/fixuid/releases/download/v0.4/fixuid-0.4-linux-amd64.tar.gz | tar -C /usr/local/bin -xzf - && \\\n    chown root:root /usr/local/bin/fixuid && \\\n    chmod 4755 /usr/local/bin/fixuid && \\\n    mkdir -p /etc/fixuid && \\\n    printf \"user: $USER\\ngroup: $GROUP\\n\" > /etc/fixuid/config.yml\n\nRUN addgroup --gid 1000 $USER && \\\n    adduser --uid 1000 --ingroup $USER --home /home/$USER --shell /bin/sh --disabled-password --gecos \"\" $USER\n\nRUN adduser $USER sudo \\\n && echo \"$USER ALL=NOPASSWD: ALL\" >> /etc/sudoers.d/$USER\n\n# Commands below run as the developer user.\nUSER $USER:$GROUP\n\n# When running a container start in the developer's home folder.\nWORKDIR /home/$USER\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && sudo apt-get update \\\n && sudo -E apt-get install --no-install-recommends -y \\\n    tzdata \\\n && sudo ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime \\\n && sudo dpkg-reconfigure --frontend noninteractive tzdata \\\n && sudo apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Install Ignition dependencies\nRUN sudo /bin/sh -c 'echo \"deb [trusted=yes] http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-stable.list' \\\n && sudo /bin/sh -c 'wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -' \\\n && sudo apt-get update \\\n && sudo apt-get install --no-install-recommends -y \\\n    libignition-cmake2-dev \\\n    libignition-math6-dev \\\n    libignition-msgs8-dev \\\n    libignition-utils1-cli-dev \\\n && sudo apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Ignition transport\nRUN git clone https://github.com/ignitionrobotics/ign-transport.git \\\n && cd ign-transport \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DCMAKE_INSTALL_PREFIX=/usr \\\n && sudo make -j4 install \\\n && cd ../..\n\n# Ignition transport examples\nRUN cd ign-transport/example \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j4 \\\n && cd ../..\n\n# Customize your image here.\n# E.g.:\n# ENV PATH=\"/opt/sublime_text:$PATH\"\n"
}