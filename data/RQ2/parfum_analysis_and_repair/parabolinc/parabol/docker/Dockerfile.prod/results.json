{
  "startTime": 1674218494335,
  "endTime": 1674218495392,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 6,
        "columnEnd": 22
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 6,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 26,
        "columnEnd": 42
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 26,
        "columnEnd": 42
      }
    }
  ],
  "repairedDockerfile": "# First, install all dependencies, including devDependencies, to run the build process\nFROM node:16.14.0 as build\n\nWORKDIR /parabol\n\n# Only copy dependency-related files here (vs. COPY . .) to avoid breaking the cache and running\n# the slow `yarn install` more than necessary\nCOPY package.json yarn.lock ./\nCOPY packages/client/package.json ./packages/client/package.json\nCOPY packages/gql-executor/package.json packages/gql-executor/package.json\nCOPY packages/integration-tests/package.json packages/integration-tests/package.json\nCOPY packages/server/package.json packages/server/package.json\nRUN yarn install --frozen-lockfile && \\\n      yarn cache clean && yarn cache clean;\n\nCOPY . .\nRUN yarn build && yarn cache clean;\n\n# Now, start over with a new stage so we don't pull over devDependencies\nFROM node:16.14.0 as prod\n\nWORKDIR /parabol\n\nCOPY package.json yarn.lock ./\nCOPY packages/client/package.json ./packages/client/package.json\nCOPY packages/gql-executor/package.json packages/gql-executor/package.json\nCOPY packages/integration-tests/package.json packages/integration-tests/package.json\nCOPY packages/server/package.json packages/server/package.json\n# Only install production dependencies\nRUN yarn install --prod --frozen-lockfile && \\\n      yarn cache clean && yarn cache clean;\n\nCOPY . .\nCOPY --from=build /parabol/build ./build\nCOPY --from=build /parabol/dist ./dist\nCOPY --from=build /parabol/queryMap.json ./\n\nRUN cp docker/entrypoint.prod.sh /bin/entrypoint && \\\n      chmod +x /bin/entrypoint\nEXPOSE 80\nENTRYPOINT [ \"entrypoint\" ]\nCMD [\"yarn\", \"start\"]\n"
}