{
  "startTime": 1674248411323,
  "endTime": 1674248412376,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile builds all the dependencies needed by the monorepo, and should\n# be used to build any of the follow-on services\n#\n# ### BASE: Install deps\nFROM ethereumoptimism/foundry:latest as foundry\nFROM node:16-alpine3.14 as base\n\nRUN apk --no-cache add curl \\\n    jq \\\n    python3 \\\n    ca-certificates \\\n    git \\\n    make \\\n    gcc \\\n    musl-dev \\\n    linux-headers \\\n    bash \\\n    build-base \\\n    gcompat\n\nENV GLIBC_KEY=https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\nENV GLIBC_KEY_FILE=/etc/apk/keys/sgerrand.rsa.pub\nENV GLIBC_RELEASE=https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r0/glibc-2.35-r0.apk\n\nRUN wget -q -O ${GLIBC_KEY_FILE} ${GLIBC_KEY} \\\n    && wget -O glibc.apk ${GLIBC_RELEASE} \\\n    && apk add --no-cache glibc.apk --force\n\nCOPY --from=foundry /usr/local/bin/forge /usr/local/bin/forge\nCOPY --from=foundry /usr/local/bin/cast /usr/local/bin/cast\n\n# copy over the needed configs to run the dep installation\n# note: this approach can be a bit unhandy to maintain, but it allows\n# us to cache the installation steps\nWORKDIR /opt/optimism\nCOPY *.json yarn.lock ./\nCOPY packages/sdk/package.json ./packages/sdk/package.json\nCOPY packages/core-utils/package.json ./packages/core-utils/package.json\nCOPY packages/common-ts/package.json ./packages/common-ts/package.json\nCOPY packages/contracts/package.json ./packages/contracts/package.json\nCOPY packages/contracts-bedrock/package.json ./packages/contracts-bedrock/package.json\nCOPY packages/contracts-periphery/package.json ./packages/contracts-periphery/package.json\nCOPY packages/contracts-governance/package.json ./packages/contracts-governance/package.json\nCOPY packages/data-transport-layer/package.json ./packages/data-transport-layer/package.json\nCOPY packages/hardhat-deploy-config/package.json ./packages/hardhat-deploy-config/package.json\nCOPY packages/message-relayer/package.json ./packages/message-relayer/package.json\nCOPY packages/fault-detector/package.json ./packages/fault-detector/package.json\nCOPY packages/replica-healthcheck/package.json ./packages/replica-healthcheck/package.json\nCOPY packages/drippie-mon/package.json ./packages/drippie-mon/package.json\nCOPY integration-tests/package.json ./integration-tests/package.json\n\nRUN yarn install --frozen-lockfile && yarn cache clean\n\nCOPY ./packages ./packages\nCOPY ./integration-tests ./integration-tests\n\n# build it!\nRUN yarn build\n\n\nFROM base as deployer\nWORKDIR /opt/optimism/packages/contracts\nCOPY ./ops/scripts/deployer.sh .\nCMD [\"yarn\", \"run\", \"deploy\"]\n\nFROM base as deployer-bedrock\nWORKDIR /opt/optimism/packages/contracts-bedrock\nCMD [\"yarn\", \"run\", \"deploy\"]\n\nFROM base as data-transport-layer\nWORKDIR /opt/optimism/packages/data-transport-layer\nCOPY ./ops/scripts/dtl.sh .\nCMD [\"node\", \"dist/src/services/run.js\"]\n\n\nFROM base as integration-tests\nWORKDIR /opt/optimism/integration-tests\nCOPY ./ops/scripts/integration-tests.sh ./\nCMD [\"yarn\", \"test:integration\"]\n\n\nFROM base as message-relayer\nWORKDIR /opt/optimism/packages/message-relayer\nCOPY ./ops/scripts/relayer.sh .\nCMD [\"npm\", \"run\", \"start\"]\n\n\nFROM base as fault-detector\nWORKDIR /opt/optimism/packages/fault-detector\nCOPY ./ops/scripts/detector.sh .\nCMD [\"npm\", \"run\", \"start\"]\n\n\nFROM base as replica-healthcheck\nWORKDIR /opt/optimism/packages/replica-healthcheck\nENTRYPOINT [\"npm\", \"run\", \"start\"]\n\nFROM base as drippie-mon\nWORKDIR /opt/optimism/packages/drippie-mon\nENTRYPOINT [\"npm\", \"run\", \"start\"]\n"
}