{
  "startTime": 1674248553467,
  "endTime": 1674248554279,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILDPLATFORM=linux/amd64\nARG ALPINE_VERSION=3.15\nARG GO_VERSION=1.17\nARG XCPUTRANSLATE_VERSION=v0.6.0\nARG GOLANGCI_LINT_VERSION=v1.44.2\n\nFROM --platform=${BUILDPLATFORM} qmcgaw/xcputranslate:${XCPUTRANSLATE_VERSION} AS xcputranslate\nFROM --platform=${BUILDPLATFORM} qmcgaw/binpot:golangci-lint-${GOLANGCI_LINT_VERSION} AS golangci-lint\n\nFROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine${ALPINE_VERSION} AS base\nWORKDIR /tmp/gobuild\nENV CGO_ENABLED=0\nRUN apk --update --no-cache add git g++\nCOPY --from=xcputranslate /xcputranslate /usr/local/bin/xcputranslate\nCOPY --from=golangci-lint /bin /go/bin/golangci-lint\n# Copy repository code and install Go dependencies\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY pkg/ ./pkg/\nCOPY cmd/ ./cmd/\nCOPY internal/ ./internal/\n\nFROM --platform=$BUILDPLATFORM base AS test\n# Note on the go race detector:\n# - we set CGO_ENABLED=1 to have it enabled\n# - we installed g++ to support the race detector\nENV CGO_ENABLED=1\nENTRYPOINT go test -race -coverpkg=./... -coverprofile=coverage.txt -covermode=atomic ./...\n\nFROM --platform=$BUILDPLATFORM base AS lint\nCOPY .golangci.yml ./\nRUN golangci-lint run --timeout=10m\n\nFROM --platform=$BUILDPLATFORM base AS build\nARG VERSION=unknown\nARG BUILD_DATE=\"an unknown date\"\nARG COMMIT=unknown\nARG TARGETPLATFORM\nRUN GOARCH=\"$(xcputranslate translate -targetplatform ${TARGETPLATFORM} -field arch)\" \\\r\n    GOARM=\"$(xcputranslate translate -targetplatform ${TARGETPLATFORM} -field arm)\" \\\r\n    go build -trimpath -ldflags=\"-s -w \\\r\n    -X 'main.version=$VERSION' \\\r\n    -X 'main.buildDate=$BUILD_DATE' \\\r\n    -X 'main.commit=$COMMIT' \\\r\n    \" -o app cmd/updater/main.go\n\nFROM scratch\nEXPOSE 8000\nHEALTHCHECK --interval=60s --timeout=5s --start-period=10s --retries=2 CMD [\"/updater/app\", \"healthcheck\"]\nARG UID=1000\nARG GID=1000\nUSER ${UID}:${GID}\nENTRYPOINT [\"/updater/app\"]\nENV \\\r\n    # Core\r\n    CONFIG= \\\r\n    PERIOD=5m \\\r\n    UPDATE_COOLDOWN_PERIOD=5m \\\r\n    PUBLICIP_FETCHERS=all \\\r\n    PUBLICIP_HTTP_PROVIDERS=all \\\r\n    PUBLICIPV4_HTTP_PROVIDERS=all \\\r\n    PUBLICIPV6_HTTP_PROVIDERS=all \\\r\n    PUBLICIP_DNS_PROVIDERS=all \\\r\n    PUBLICIP_DNS_TIMEOUT=3s \\\r\n    HTTP_TIMEOUT=10s \\\r\n    DATADIR=/updater/data \\\r\n\r\n    # Web UI\r\n    LISTENING_PORT=8000 \\\r\n    ROOT_URL=/ \\\r\n\r\n    # Backup\r\n    BACKUP_PERIOD=0 \\\r\n    BACKUP_DIRECTORY=/updater/data \\\r\n\r\n    # Other\r\n    LOG_LEVEL=info \\\r\n    LOG_CALLER=hidden \\\r\n    SHOUTRRR_ADDRESSES= \\\r\n    TZ=\nARG VERSION=unknown\nARG BUILD_DATE=\"an unknown date\"\nARG COMMIT=unknown\nLABEL \\\r\n    org.opencontainers.image.authors=\"quentin.mcgaw@gmail.com\" \\\r\n    org.opencontainers.image.version=$VERSION \\\r\n    org.opencontainers.image.created=$BUILD_DATE \\\r\n    org.opencontainers.image.revision=$COMMIT \\\r\n    org.opencontainers.image.url=\"https://github.com/qdm12/ddns-updater\" \\\r\n    org.opencontainers.image.documentation=\"https://github.com/qdm12/ddns-updater\" \\\r\n    org.opencontainers.image.source=\"https://github.com/qdm12/ddns-updater\" \\\r\n    org.opencontainers.image.title=\"ddns-updater\" \\\r\n    org.opencontainers.image.description=\"Universal DNS updater with WebUI\"\nCOPY --from=build --chown=${UID}:${GID} /tmp/gobuild/app /updater/app\n"
}