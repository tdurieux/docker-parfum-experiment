{
  "startTime": 1674248586482,
  "endTime": 1674248587221,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ALPINE_VERSION=3.16\nARG GO_ALPINE_VERSION=3.16\nARG GO_VERSION=1.17\nARG XCPUTRANSLATE_VERSION=v0.6.0\nARG GOLANGCI_LINT_VERSION=v1.46.2\nARG MOCKGEN_VERSION=v1.6.0\nARG BUILDPLATFORM=linux/amd64\n\nFROM --platform=${BUILDPLATFORM} qmcgaw/xcputranslate:${XCPUTRANSLATE_VERSION} AS xcputranslate\nFROM --platform=${BUILDPLATFORM} qmcgaw/binpot:golangci-lint-${GOLANGCI_LINT_VERSION} AS golangci-lint\nFROM --platform=${BUILDPLATFORM} qmcgaw/binpot:mockgen-${MOCKGEN_VERSION} AS mockgen\n\nFROM --platform=${BUILDPLATFORM} golang:${GO_VERSION}-alpine${GO_ALPINE_VERSION} AS base\nCOPY --from=xcputranslate /xcputranslate /usr/local/bin/xcputranslate\n# Note: findutils needed to have xargs support `-d` flag for mocks stage.\nRUN apk --update --no-cache add git g++ findutils\nENV CGO_ENABLED=0\nCOPY --from=golangci-lint /bin /go/bin/golangci-lint\nCOPY --from=mockgen /bin /go/bin/mockgen\nWORKDIR /tmp/gobuild\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY cmd/ ./cmd/\nCOPY internal/ ./internal/\n\nFROM --platform=${BUILDPLATFORM} base AS test\n# Note on the go race detector:\n# - we set CGO_ENABLED=1 to have it enabled\n# - we installed g++ to support the race detector\nENV CGO_ENABLED=1\nENTRYPOINT go test -race -coverpkg=./... -coverprofile=coverage.txt -covermode=atomic ./...\n\nFROM --platform=${BUILDPLATFORM} base AS lint\nCOPY .golangci.yml ./\nRUN golangci-lint run --timeout=10m\n\nFROM --platform=${BUILDPLATFORM} base AS mocks\nRUN git init && \\\n    git config user.email ci@localhost && \\\n    git config user.name ci && \\\n    git config core.fileMode false && \\\n    git add -A && \\\n    git commit -m \"snapshot\" && \\\n    grep -lr -E '^// Code generated by MockGen\\. DO NOT EDIT\\.$' . | xargs -r -d '\\n' rm && \\\n    go generate -run \"mockgen\" ./... && \\\n    git diff --exit-code && \\\n    rm -rf .git/\n\nFROM --platform=${BUILDPLATFORM} base AS build\nARG TARGETPLATFORM\nARG VERSION=unknown\nARG CREATED=\"an unknown date\"\nARG COMMIT=unknown\nRUN GOARCH=\"$(xcputranslate translate -field arch -targetplatform ${TARGETPLATFORM})\" \\\n    GOARM=\"$(xcputranslate translate -field arm -targetplatform ${TARGETPLATFORM})\" \\\n    go build -trimpath -ldflags=\"-s -w \\\n    -X 'main.version=$VERSION' \\\n    -X 'main.created=$CREATED' \\\n    -X 'main.commit=$COMMIT' \\\n    \" -o entrypoint cmd/gluetun/main.go\n\nFROM alpine:${ALPINE_VERSION}\nARG VERSION=unknown\nARG CREATED=\"an unknown date\"\nARG COMMIT=unknown\nLABEL \\\n    org.opencontainers.image.authors=\"quentin.mcgaw@gmail.com\" \\\n    org.opencontainers.image.created=$CREATED \\\n    org.opencontainers.image.version=$VERSION \\\n    org.opencontainers.image.revision=$COMMIT \\\n    org.opencontainers.image.url=\"https://github.com/qdm12/gluetun\" \\\n    org.opencontainers.image.documentation=\"https://github.com/qdm12/gluetun\" \\\n    org.opencontainers.image.source=\"https://github.com/qdm12/gluetun\" \\\n    org.opencontainers.image.title=\"VPN swiss-knife like client for multiple VPN providers\" \\\n    org.opencontainers.image.description=\"VPN swiss-knife like client to tunnel to multiple VPN servers using OpenVPN, IPtables, DNS over TLS, Shadowsocks, an HTTP proxy and Alpine Linux\"\nENV VPN_SERVICE_PROVIDER=pia \\\n    VPN_TYPE=openvpn \\\n    # Common VPN options\n    VPN_ENDPOINT_IP= \\\n    VPN_ENDPOINT_PORT= \\\n    VPN_INTERFACE=tun0 \\\n    # OpenVPN\n    OPENVPN_PROTOCOL=udp \\\n    OPENVPN_USER= \\\n    OPENVPN_PASSWORD= \\\n    OPENVPN_USER_SECRETFILE=/run/secrets/openvpn_user \\\n    OPENVPN_PASSWORD_SECRETFILE=/run/secrets/openvpn_password \\\n    OPENVPN_VERSION=2.5 \\\n    OPENVPN_VERBOSITY=1 \\\n    OPENVPN_FLAGS= \\\n    OPENVPN_CIPHERS= \\\n    OPENVPN_AUTH= \\\n    OPENVPN_PROCESS_USER= \\\n    OPENVPN_IPV6=off \\\n    OPENVPN_CUSTOM_CONFIG= \\\n    # Wireguard\n    WIREGUARD_PRIVATE_KEY= \\\n    WIREGUARD_PRESHARED_KEY= \\\n    WIREGUARD_PUBLIC_KEY= \\\n    WIREGUARD_ADDRESSES= \\\n    # VPN server filtering\n    SERVER_REGIONS= \\\n    SERVER_COUNTRIES= \\\n    SERVER_CITIES= \\\n    SERVER_HOSTNAMES= \\\n    # # Mullvad only:\n    ISP= \\\n    OWNED_ONLY=no \\\n    # # Private Internet Access only:\n    PRIVATE_INTERNET_ACCESS_OPENVPN_ENCRYPTION_PRESET= \\\n    PRIVATE_INTERNET_ACCESS_VPN_PORT_FORWARDING=off \\\n    PRIVATE_INTERNET_ACCESS_VPN_PORT_FORWARDING_STATUS_FILE=\"/tmp/gluetun/forwarded_port\" \\\n    # # Cyberghost only:\n    OPENVPN_CLIENTCRT_SECRETFILE=/run/secrets/openvpn_clientcrt \\\n    OPENVPN_CLIENTKEY_SECRETFILE=/run/secrets/openvpn_clientkey \\\n    # # Nordvpn only:\n    SERVER_NUMBER= \\\n    # # PIA only:\n    SERVER_NAMES= \\\n    # # ProtonVPN only:\n    FREE_ONLY= \\\n    # # Surfshark only:\n    MULTIHOP_ONLY= \\\n    # Firewall\n    FIREWALL=on \\\n    FIREWALL_VPN_INPUT_PORTS= \\\n    FIREWALL_INPUT_PORTS= \\\n    FIREWALL_OUTBOUND_SUBNETS= \\\n    FIREWALL_DEBUG=off \\\n    # Logging\n    LOG_LEVEL=info \\\n    # Health\n    HEALTH_SERVER_ADDRESS=127.0.0.1:9999 \\\n    HEALTH_TARGET_ADDRESS=cloudflare.com:443 \\\n    HEALTH_VPN_DURATION_INITIAL=6s \\\n    HEALTH_VPN_DURATION_ADDITION=5s \\\n    # DNS over TLS\n    DOT=on \\\n    DOT_PROVIDERS=cloudflare \\\n    DOT_PRIVATE_ADDRESS=127.0.0.1/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,169.254.0.0/16,::1/128,fc00::/7,fe80::/10,::ffff:7f00:1/104,::ffff:a00:0/104,::ffff:a9fe:0/112,::ffff:ac10:0/108,::ffff:c0a8:0/112 \\\n    DOT_VERBOSITY=1 \\\n    DOT_VERBOSITY_DETAILS=0 \\\n    DOT_VALIDATION_LOGLEVEL=0 \\\n    DOT_CACHING=on \\\n    DOT_IPV6=off \\\n    BLOCK_MALICIOUS=on \\\n    BLOCK_SURVEILLANCE=off \\\n    BLOCK_ADS=off \\\n    UNBLOCK= \\\n    DNS_UPDATE_PERIOD=24h \\\n    DNS_ADDRESS=127.0.0.1 \\\n    DNS_KEEP_NAMESERVER=off \\\n    # HTTP proxy\n    HTTPPROXY= \\\n    HTTPPROXY_LOG=off \\\n    HTTPPROXY_LISTENING_ADDRESS=\":8888\" \\\n    HTTPPROXY_USER= \\\n    HTTPPROXY_PASSWORD= \\\n    HTTPPROXY_USER_SECRETFILE=/run/secrets/httpproxy_user \\\n    HTTPPROXY_PASSWORD_SECRETFILE=/run/secrets/httpproxy_password \\\n    # Shadowsocks\n    SHADOWSOCKS=off \\\n    SHADOWSOCKS_LOG=off \\\n    SHADOWSOCKS_LISTENING_ADDRESS=\":8388\" \\\n    SHADOWSOCKS_PASSWORD= \\\n    SHADOWSOCKS_PASSWORD_SECRETFILE=/run/secrets/shadowsocks_password \\\n    SHADOWSOCKS_CIPHER=chacha20-ietf-poly1305 \\\n    # Control server\n    HTTP_CONTROL_SERVER_ADDRESS=\":8000\" \\\n    # Server data updater\n    UPDATER_PERIOD=0 \\\n    UPDATER_MIN_RATIO=0.8 \\\n    UPDATER_VPN_SERVICE_PROVIDERS= \\\n    # Public IP\n    PUBLICIP_FILE=\"/tmp/gluetun/ip\" \\\n    PUBLICIP_PERIOD=12h \\\n    # Pprof\n    PPROF_ENABLED=no \\\n    PPROF_BLOCK_PROFILE_RATE=0 \\\n    PPROF_MUTEX_PROFILE_RATE=0 \\\n    PPROF_HTTP_SERVER_ADDRESS=\":6060\" \\\n    # Extras\n    VERSION_INFORMATION=on \\\n    TZ= \\\n    PUID= \\\n    PGID=\nENTRYPOINT [\"/gluetun-entrypoint\"]\nEXPOSE 8000/tcp 8888/tcp 8388/tcp 8388/udp\nHEALTHCHECK --interval=5s --timeout=5s --start-period=10s --retries=1 CMD /gluetun-entrypoint healthcheck\nARG TARGETPLATFORM\nRUN apk add --no-cache --update -l apk-tools && \\\n    apk add --no-cache --update -X \"https://dl-cdn.alpinelinux.org/alpine/v3.12/main\" openvpn==2.4.12-r0 && \\\n    mv /usr/sbin/openvpn /usr/sbin/openvpn2.4 && \\\n    apk del openvpn && \\\n    apk add --no-cache --update openvpn ca-certificates iptables ip6tables unbound tzdata && \\\n    mv /usr/sbin/openvpn /usr/sbin/openvpn2.5 && \\\n    # Fix vulnerability issue\n    apk add --no-cache --update busybox && \\\n    rm -rf /var/cache/apk/* /etc/unbound/* /usr/sbin/unbound-* /etc/openvpn/*.sh /usr/lib/openvpn/plugins/openvpn-plugin-down-root.so && \\\n    deluser openvpn && \\\n    deluser unbound && \\\n    mkdir /gluetun\nCOPY --from=build /tmp/gobuild/entrypoint /gluetun-entrypoint\n"
}