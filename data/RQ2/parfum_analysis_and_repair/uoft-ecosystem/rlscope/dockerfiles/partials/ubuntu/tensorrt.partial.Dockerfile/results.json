{
  "startTime": 1674253850753,
  "endTime": 1674253852365,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 9,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 9,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 9,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 22,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 60,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 68,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 9,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 108,
        "lineEnd": 110,
        "columnStart": 22,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 9,
        "columnEnd": 88
      }
    }
  ],
  "repairedDockerfile": "# Create a virtualenv, and override\n\n## Ubuntu 18.04 uses python3.6\n## Ubuntu 16.04 uses python3.5\n#ARG PYTHON_BIN_BASENAME=python3\n## https://pythonspeed.com/articles/activate-virtualenv-dockerfile/\n#ENV VIRTUALENV=/root/venv\n## NOTE: We use --system-site-packages since some python packages we need get installed through deb packages.\n## e.g.\n##  python3-libnvinfer:\n##     # Allows us to use this package:\n##     import tensorrt\n##     # Sadly, cannot pip install this separately (unavailable in pip).\n#RUN python -m virtualenv -p /usr/bin/${PYTHON_BIN_BASENAME} $VIRTUALENV --system-site-packages\n## We can't do \"actiate venv\" from Dockerfile.\n## So instead, just overwrite PATH so it finds /root/bin/python instead of\n## /usr/bin/python.\n#ENV PATH=\"$VIRTUALENV/bin:$PATH\"\n\n## TensorRT 6.0.1\n#ARG TENSOR_RT_VERSION=6.0.1-1+cuda10.1\n#ARG TENSOR_RT_VERSION_MAJOR=6\n#ARG TENSOR_RT_CUDA_VERSION=10.1\n#ARG TENSOR_RT_VERSION_THIRD_PARTY=6.0.1.5\n#ARG TENSOR_RT_TF_VERSION=1.14.0\n\n# TensorRT 7.1.3\nARG TENSOR_RT_VERSION=7.1.3-1+cuda10.2\nARG TENSOR_RT_VERSION_MAJOR=7\nARG TENSOR_RT_CUDA_VERSION=10.2\nARG TENSOR_RT_VERSION_THIRD_PARTY=7.1.3.4\nARG TENSOR_RT_TF_VERSION=1.15.2\n# NOTE: Need to install libcudnn8 before libnvinfer, otherwise libnvinfer\n# will automatically install libcudnn8=cuda-11.0 (not sure why...)\nARG CUDNN8_VERSION=8.0.0.180-1+cuda${TENSOR_RT_CUDA_VERSION}\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libcudnn8=${CUDNN8_VERSION} \\\n    libcudnn8-dev=${CUDNN8_VERSION} && rm -rf /var/lib/apt/lists/*;\n\n\n# NOTE: For some reason I had cuDNN installed for CUDA 10.2â€¦why?\nARG CUDNN_VERSION=7.6.5.32-1+cuda${CUDA}\n#ARG CUDNN_VERSION=7.6.5.32-1+cuda${TENSOR_RT_CUDA_VERSION}\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libcudnn7=${CUDNN_VERSION} \\\n    libcudnn7-dev=${CUDNN_VERSION} && rm -rf /var/lib/apt/lists/*;\n\nRUN apt list --installed | grep 'cuda11\\.0'\n#RUN exit 1\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libnvinfer${TENSOR_RT_VERSION_MAJOR}=${TENSOR_RT_VERSION} && rm -rf /var/lib/apt/lists/*;\n\nRUN apt list --installed | grep 'cuda11\\.0'\n#RUN exit 1\n\n#libnvinfer${TENSOR_RT_VERSION_MAJOR}=${TENSOR_RT_VERSION}\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libnvonnxparsers${TENSOR_RT_VERSION_MAJOR}=${TENSOR_RT_VERSION} \\\n    libnvparsers${TENSOR_RT_VERSION_MAJOR}=${TENSOR_RT_VERSION} \\\n    libnvinfer-plugin${TENSOR_RT_VERSION_MAJOR}=${TENSOR_RT_VERSION} && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libnvinfer-dev=${TENSOR_RT_VERSION} \\\n    libnvonnxparsers-dev=${TENSOR_RT_VERSION} \\\n    libnvparsers-dev=${TENSOR_RT_VERSION} \\\n    libnvinfer-plugin-dev=${TENSOR_RT_VERSION} \\\n    python-libnvinfer=${TENSOR_RT_VERSION} \\\n    python3-libnvinfer=${TENSOR_RT_VERSION} && rm -rf /var/lib/apt/lists/*;\nRUN sudo apt install -y --no-install-recommends cuda-nvrtc-${TENSOR_RT_CUDA_VERSION/./-} && rm -rf /var/lib/apt/lists/*;\n\n# NOTE: ideally, happens after pip setup.... could just install globally though.\n\n# Very Ubuntu version specific...oh well.\nARG CP_PYTHON_VERSION=cp36\nADD third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY} /root/third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY}\nRUN pip install --no-cache-dir /root/third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY}/graphsurgeon/*.whl\nRUN pip install --no-cache-dir /root/third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY}/python/tensorrt*-${CP_PYTHON_VERSION}-*.whl\nRUN pip install --no-cache-dir /root/third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY}/uff/*.whl\n#RUN python3 -c 'import sys; print(\"cp{major}{minor}\".format(major=sys.version_info[0], minor=sys.version_info[1]))'\n\n# The \"convert-to-uff\" doesn't work with tensorflow v2.\n# Create a separate python virtual env with tensorflow v1 and so we can use convert-to-uff.\n# https://pythonspeed.com/articles/activate-virtualenv-dockerfile/\nENV TF_V1_VIRTUALENV=/root/venv_tf_v1\n# NOTE: We use --system-site-packages since some python packages we need get installed through deb packages.\n# e.g.\n#  python3-libnvinfer:\n#     # Allows us to use this package:\n#     import tensorrt\n#     # Sadly, cannot pip install this separately (unavailable in pip).\nRUN python3 -m virtualenv -p /usr/bin/python3 $TF_V1_VIRTUALENV --system-site-packages\n# We can't do \"activate venv\" from Dockerfile.\n# So instead, just overwrite PATH so it finds /root/bin/python instead of\n# /usr/bin/python.\n#ENV PATH=\"$VIRTUALENV/bin:$PATH\"\n#RUN $TF_V1_VIRTUALENV/bin/pip install 'tensorflow-gpu==1.14.0'\n\n# TensorRT 7.1.3\nRUN $TF_V1_VIRTUALENV/bin/pip install --no-cache-dir \"tensorflow-gpu==${TENSOR_RT_TF_VERSION}\"\nRUN $TF_V1_VIRTUALENV/bin/pip install --no-cache-dir /root/third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY}/graphsurgeon/*.whl\nRUN $TF_V1_VIRTUALENV/bin/pip install --no-cache-dir /root/third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY}/python/tensorrt*-${CP_PYTHON_VERSION}-*.whl\nRUN $TF_V1_VIRTUALENV/bin/pip install --no-cache-dir /root/third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY}/uff/*.whl\n\nRUN rm -rf /root/third_party/TensorRT-${TENSOR_RT_VERSION_THIRD_PARTY}\n\nARG NCCL_VERSION=2.7.5-1+cuda10.1\n# Install nccl (belongs in nvidia_nccl.partial.Dockerfile)\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libnccl-dev=${NCCL_VERSION} \\\n    libnccl2=${NCCL_VERSION} && rm -rf /var/lib/apt/lists/*;\n"
}