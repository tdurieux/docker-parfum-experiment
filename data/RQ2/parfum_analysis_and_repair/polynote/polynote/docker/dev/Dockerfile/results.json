{
  "startTime": 1674251680767,
  "endTime": 1674251681112,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Set this to match your JDK version compiled with.\nFROM openjdk:8-slim-buster\n\nWORKDIR /opt\n\nRUN apt update -y && \\\n    apt install --no-install-recommends -y wget python3 python3-dev python3-pip build-essential && rm -rf /var/lib/apt/lists/*;\n\nCOPY docker/spark/install_spark.sh .\nRUN ./install_spark.sh\nENV SPARK_HOME=\"/opt/spark\"\nENV HADOOP_HOME=\"/opt/hadoop-2.7.7\"\nENV PATH=\"$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin\"\n\n# Copy over the requirements early so that we can cache this layer seperate from polynote-dist\nCOPY requirements.txt /tmp/\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt\n\n\n# Before starting, double check your JVM version\n# and make sure it matches the version in the FROM line.\n# Once you've got that sorted out, compile the website with npm\n# Package everything together by making the distribution with `sbt dist`\n# Then build this from the project root using `-f docker/dev/Dockerfile` to select this file.\n# for example (don't forget the dot at the end!):\n#   cd polynote-static; npm install; npm run dist; cd..\n#   sbt dist\n#   docker build -t polynote:dev -f docker/dev/Dockerfile .\nCOPY target/polynote-dist.tar.gz .\nRUN tar xfzp polynote-dist.tar.gz && \\\n    rm polynote-dist.tar.gz\n\n# to wrap up, we create (safe)user\nENV UID 1000\nENV NB_USER polly\n\nRUN adduser --disabled-password \\\n    --gecos \"Default user\" \\\n    --uid ${UID} \\\n    ${NB_USER}\n\n# allow user access to the WORKDIR\nRUN chown -R ${NB_USER}:${NB_USER} /opt/\n\n# start image as (safe)user\nUSER ${NB_USER}\n\n# expose the (internal) port that polynote runs on\nEXPOSE 8192\n\n# start polynote on container run\nENTRYPOINT [\"./polynote/polynote.py\"]\n"
}