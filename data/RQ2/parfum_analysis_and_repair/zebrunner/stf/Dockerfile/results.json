{
  "startTime": 1674254984513,
  "endTime": 1674254985598,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 160
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 160
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright Â© 2022 contains code contributed by Orange SA, authors: Denis Barbaron - Licensed under the Apache license 2.0\n#\n\nFROM ubuntu:20.04\n\n# Sneak the stf executable into $PATH.\nENV PATH=/opt/bin:$PATH\n\n# Work in app dir by default.\nWORKDIR /opt\n\n# Export default app port\nEXPOSE 3000\n\nENV DEVICE_UDID=\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && \\\n        apt-get install --no-install-recommends -y curl wget unzip iputils-ping nano telnet libimobiledevice-utils libimobiledevice6 usbmuxd cmake git build-essential jq libplist-utils && rm -rf /var/lib/apt/lists/*;\n\n# jq - jquery command line to operate with go-ios utility\n# libplist-utils - plistutil to convert binary Info.plist into the xml\n\n# go-ios utility to manage iOS devices connected to Linux provider host\n#Grab gidevice from github and extract it in a folder\nRUN wget https://github.com/danielpaulus/go-ios/releases/download/v1.0.69/go-ios-linux.zip && unzip go-ios-linux.zip -d /usr/local/bin && rm go-ios-linux.zip\n\n# Install app requirements. Trying to optimize push speed for dependant apps\n# by reducing layers as much as possible. Note that one of the final steps\n# installs development files for node-gyp so that npm install won't have to\n# wait for them on the first native module installation.\nRUN useradd --system \\\n      --create-home \\\n      --shell /usr/sbin/nologin \\\n      stf-build && \\\n    useradd --system \\\n      --create-home \\\n      --shell /usr/sbin/nologin \\\n      stf && \\\n    sed -i'' 's@http://archive.ubuntu.com/ubuntu/@mirror://mirrors.ubuntu.com/mirrors.txt@' /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get -y --no-install-recommends install wget python3 build-essential && \\\n    cd /tmp && \\\n    wget --progress=dot:mega \\\n      https://nodejs.org/dist/v17.9.0/node-v17.9.0-linux-x64.tar.xz && \\\n    tar -xJf node-v*.tar.xz --strip-components 1 -C /usr/local && \\\n    rm node-v*.tar.xz && \\\n    su stf-build -s /bin/bash -c '/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js install' && \\\n    apt-get -y --no-install-recommends install libzmq3-dev libprotobuf-dev git graphicsmagick openjdk-8-jdk yasm cmake && \\\n    apt-get clean && \\\n    rm -rf /var/cache/apt/* /var/lib/apt/lists/* && \\\n    mkdir /tmp/bundletool && \\\n    cd /tmp/bundletool && \\\n    wget --progress=dot:mega \\\n      https://github.com/google/bundletool/releases/download/1.2.0/bundletool-all-1.2.0.jar && \\\n    mv bundletool-all-1.2.0.jar bundletool.jar\n\n# Copy app source.\nCOPY . /tmp/build/\n\n# Give permissions to our build user.\nRUN mkdir -p /opt && \\\n    mkdir -p /data && \\\n    chown -R stf-build:stf-build /tmp/build /tmp/bundletool /opt && \\\n    chown -R stf:stf /data\n\nRUN mkdir data &&\\\n    chown stf-build: data\n\nRUN ln -s /opt /app\n# Switch over to the build user.\nUSER stf-build\n\n# Run the build.\nRUN set -x && \\\n    cd /tmp/build && \\\n    export PATH=$PWD/node_modules/.bin:$PATH && \\\n    npm install --python=\"/usr/bin/python3\"  --loglevel http && \\\n    npm pack && \\\n    tar xzf devicefarmer-stf-*.tgz --strip-components 1 -C /opt && \\\n    bower cache clean && \\\n    npm prune --production && \\\n    mv node_modules /opt && \\\n    rm -rf ~/.node-gyp && \\\n    mkdir /opt/bundletool && \\\n    mv /tmp/bundletool/* /opt/bundletool && \\\n    cd /opt && \\\n    find /tmp -mindepth 1 ! -regex '^/tmp/hsperfdata_root\\(/.*\\)?' -delete && npm cache clean --force; && rm devicefarmer-stf-*.tgz\n\n# Switch to the app user.\nUSER stf\n##Use root user only for debug\n#USER root\n\n# Show help by default.\nCMD stf --help\n"
}