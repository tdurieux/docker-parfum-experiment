{
  "startTime": 1674217856893,
  "endTime": 1674217857785,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 1,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.18.3-bullseye as permset\nWORKDIR /src\nRUN git clone https://github.com/jacobalberty/permset.git /src && \\\n    mkdir -p /out && \\\n    go build -ldflags \"-X main.chownDir=/unifi\" -o /out/permset\n\nFROM ubuntu:18.04\n\nLABEL maintainer=\"Jacob Alberty <jacob.alberty@foundigital.com>\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\nARG PKGURL=https://dl.ui.com/unifi/7.1.66/unifi_sysvinit_all.deb\n\nENV BASEDIR=/usr/lib/unifi \\\n    DATADIR=/unifi/data \\\n    LOGDIR=/unifi/log \\\n    CERTDIR=/unifi/cert \\\n    RUNDIR=/unifi/run \\\n    ORUNDIR=/var/run/unifi \\\n    ODATADIR=/var/lib/unifi \\\n    OLOGDIR=/var/log/unifi \\\n    CERTNAME=cert.pem \\\n    CERT_PRIVATE_NAME=privkey.pem \\\n    CERT_IS_CHAIN=false \\\n    GOSU_VERSION=1.10 \\\n    BIND_PRIV=true \\\n    RUNAS_UID0=true \\\n    UNIFI_GID=999 \\\n    UNIFI_UID=999\n\n# Install gosu\n# https://github.com/tianon/gosu/blob/master/INSTALL.md\n# This should be integrated with the main run because it duplicates a lot of the steps there\n# but for now while shoehorning gosu in it is seperate\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install --no-install-recommends -y gosu; \\\n\trm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /usr/unifi \\\n     /usr/local/unifi/init.d \\\n     /usr/unifi/init.d \\\n     /usr/local/docker\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY docker-healthcheck.sh /usr/local/bin/\nCOPY docker-build.sh /usr/local/bin/\nCOPY functions /usr/unifi/functions\nCOPY import_cert /usr/unifi/init.d/\nCOPY pre_build /usr/local/docker/pre_build\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh \\\n && chmod +x /usr/unifi/init.d/import_cert \\\n && chmod +x /usr/local/bin/docker-healthcheck.sh \\\n && chmod +x /usr/local/bin/docker-build.sh \\\n && chmod -R +x /usr/local/docker/pre_build\n\n# Push installing openjdk-8-jre first, so that the unifi package doesn't pull in openjdk-7-jre as a dependency? Else uncomment and just go with openjdk-7.\nRUN set -ex \\\n && mkdir -p /usr/share/man/man1/ \\\n && groupadd -r unifi -g $UNIFI_GID \\\n && useradd --no-log-init -r -u $UNIFI_UID -g $UNIFI_GID unifi \\\n && /usr/local/bin/docker-build.sh \"${PKGURL}\"\n\nCOPY --from=permset /out/permset /usr/local/bin/permset\nRUN chown 0.0 /usr/local/bin/permset && \\\n    chmod +s /usr/local/bin/permset\n\nRUN mkdir -p /unifi && chown unifi:unifi -R /unifi\n\n# Apply any hotfixes that were included\nCOPY hotfixes /usr/local/unifi/hotfixes\n\nRUN chmod +x /usr/local/unifi/hotfixes/* && run-parts /usr/local/unifi/hotfixes\n\nVOLUME [\"/unifi\", \"${RUNDIR}\"]\n\nEXPOSE 6789/tcp 8080/tcp 8443/tcp 8880/tcp 8843/tcp 3478/udp 10001/udp\n\nWORKDIR /unifi\n\nHEALTHCHECK --start-period=5m CMD /usr/local/bin/docker-healthcheck.sh || exit 1\n\n# execute controller using JSVC like original debian package does\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n\nCMD [\"unifi\"]\n\n# execute the conroller directly without using the service\n#ENTRYPOINT [\"/usr/bin/java\", \"-Xmx${JVM_MAX_HEAP_SIZE}\", \"-jar\", \"/usr/lib/unifi/lib/ace.jar\"]\n  # See issue #12 on github: probably want to consider how JSVC handled creating multiple processes, issuing the -stop instraction, etc. Not sure if the above ace.jar class gracefully handles TERM signals.\n#CMD [\"start\"]\n"
}