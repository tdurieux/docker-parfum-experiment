{
  "startTime": 1674252762455,
  "endTime": 1674252763609,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nARG USERNAME=vscode\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Ensure apt is in non-interactive to avoid prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Create the user\nRUN groupadd --gid $USER_GID $USERNAME \\\n    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n    #\n    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y sudo \\\n    && echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME && rm -rf /var/lib/apt/lists/*;\n\nRUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n\n# Install dependencies.\nRUN --mount=type=cache,target=/var/cache/apt--mount=type=cache,target=/var/lib/apt \\\n    apt-get update && apt-get -y install --no-install-recommends \\\n    build-essential make libssl-dev zlib1g-dev libbz2-dev \\\n    libreadline-dev libsqlite3-dev curl llvm libncursesw5-dev \\\n    xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \\\n    wget ca-certificates apt-utils locales git openssh-client && \\\n    locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\n\nENV DEBIAN_FRONTEND=dialog\n\nUSER $USERNAME\n\n# Install pyenv to manage multiple python installations\nRUN curl -f -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash && \\\n    echo 'export PATH=\"$HOME/.pyenv/bin:$PATH\"' >> ~/.bashrc && \\\n    echo 'eval \"$(pyenv init --path)\"' >> ~/.bashrc && \\\n    echo 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.bashrc\n\n# Not sure this is needed\nSHELL [\"/bin/bash\",\"--login\", \"-c\"]\n\n# Stuff needed to make pyenv work correctly since the login shell\n# above doesnt seem to run bachrc\nENV PYENV_ROOT=\"/home/vscode/.pyenv\"\nENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\n\n\n# Install the required python versions (this takes a bit usually) so we do lots of cacheing\nRUN --mount=type=cache,target=/home/vscode/.pyenv/cache,uid=1000 \\\n    pyenv install -s 3.7.13 && \\\n    pyenv install -s 3.8.13 && \\\n    pyenv install -s 3.9.12 && \\\n    pyenv install -s 3.10.4 && \\\n    pyenv global 3.9.12 && \\\n    pyenv rehash\n\n# Install poetry to manage our python project\nRUN curl -f -sSL https://install.python-poetry.org | python3 -\n\n# Install nox and pre-commit to automate CI stuff\nRUN pip install --no-cache-dir --user --upgrade nox nox_poetry pre-commit\n"
}