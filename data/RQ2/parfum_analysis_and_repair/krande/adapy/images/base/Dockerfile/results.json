{
  "startTime": 1674252477461,
  "endTime": 1674252478726,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 24,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04 as base\n\nENV TOOLS /tools\nRUN apt-get update && \\\n    apt-get upgrade -y --with-new-pkgs -o Dpkg::Options::=\"--force-confold\"\n\n#region install Calculix\nFROM base AS calculix\nRUN apt-get install --no-install-recommends ffmpeg libsm6 libxext6 libxft2 -y && rm -rf /var/lib/apt/lists/*;\nENV CCXVER \"2.17\"\n# Installing necessary dependecies for Calculix\nRUN apt-get install --no-install-recommends -y \\\n    build-essential \\\n    gfortran \\\n    curl \\\n    automake \\\n    make \\\n    autoconf \\\n    autotools-dev \\\n    bzip2 \\\n    sudo && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR ${TOOLS}\n\n# Downloading CalculiX\nRUN curl -f -s https://www.dhondt.de/ccx_${CCXVER}.src.tar.bz2 | tar -xj\n\n# Installing spooles\nWORKDIR ${TOOLS}\nRUN mkdir spooles.2.2 && cd spooles.2.2 && \\\n    curl -f -s https://www.netlib.org/linalg/spooles/spooles.2.2.tgz | tar -xz && \\\n    cd ${TOOLS}/spooles.2.2/Tree/src/ && \\\n    sed -i 's/drawTree/draw/g' makeGlobalLib && \\\n    cd ${TOOLS}/spooles.2.2/ && \\\n    sed -i \"s#CC = /usr/lang-4.0/bin/cc#CC = /usr/bin/cc#g\" Make.inc && \\\n    make lib && cd ${TOOLS}/spooles.2.2/MT/src/ && make\n\n# Downloading and installing ARPACK\nWORKDIR ${TOOLS}\nRUN curl -f -s https://www.caam.rice.edu//software/ARPACK/SRC/arpack96.tar.gz | tar -xz && \\\n    mv ARPACK /usr/local/ARPACK \\\n    && cd /usr/local/ARPACK \\\n    && sed -i 's/$(HOME)/\\/usr\\/local/g' ARmake.inc \\\n    && sed -i 's/\\/bin\\/make/make/g' ARmake.inc \\\n    && sed -i 's/f77/gfortran/g' ARmake.inc \\\n    && sed -i 's/SUN4/INTEL/g' ARmake.inc \\\n    && sed -i 's/-cg89//g' ARmake.inc \\\n    && sed -i 's/      EXTERNAL           ETIME/*     EXTERNAL           ETIME/g' UTIL/second.f \\\n    && make all\n\nWORKDIR ${TOOLS}/CalculiX/ccx_${CCXVER}/src\n\n# replace hardcoded paths in CalculiX\nRUN  sed -i -e 's|\\.\\./\\.\\./\\.\\./SPOOLES.2.2|${TOOLS}/spooles.2.2|g' \\\n            -e 's|\\.\\./\\.\\./\\.\\./ARPACK|/usr/local/ARPACK|g' \\\n            Makefile\n\nENV nproc=2\nRUN make -j $(nproc) --warn-undefined-variables\nRUN cp ccx_${CCXVER} /usr/local/bin\nRUN chmod a+rx /usr/local/bin/ccx_${CCXVER}\n\nLABEL calculix=${CCXVER}\nENV ADA_ccx_exe=/usr/local/bin/ccx_${CCXVER}\n#endregion\n\n#region Code Aster\nFROM calculix AS code_aster\nARG catemp=/tmp/code_aster\n\nUSER root\nRUN mkdir ${catemp}\nWORKDIR ${catemp}\n\nRUN apt-get install --no-install-recommends -y \\\n    locales sudo \\\n    gcc g++ gfortran \\\n    wget \\\n    python3 \\\n    python3-dev \\\n    python3-numpy \\\n    libxft2 \\\n    libxmu6 \\\n    libxss1 \\\n    patch \\\n    make cmake \\\n    grace \\\n    zlib1g-dev \\\n    tk bison flex \\\n    libglu1-mesa libxcursor-dev \\\n    libmpich-dev \\\n    libopenblas-dev \\\n    libsuperlu-dev \\\n    libboost-numpy-dev \\\n    libboost-python-dev && \\\n  apt-get clean && \\\n  echo \"C.UTF-8 UTF-8\" >/etc/locale.gen && \\\n  locale-gen && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set locale environment\nENV LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8 \\\n    LANGUAGE=C.UTF-8\n\n# Variables\nENV ASTER_VER=14.6\nENV ASTER_FULL_SRC=\"https://code-aster.org/FICHIERS/aster-full-src-${ASTER_VER}.0-1.noarch.tar.gz\"\n\n# Download and install the latest stable version\nRUN wget --no-check-certificate --quiet ${ASTER_FULL_SRC} -O aster_full.tar.gz && \\\n    mkdir aster_full && tar xf aster_full.tar.gz -C aster_full --strip-components 1 && rm aster_full.tar.gz\n\nRUN cd aster_full && \\\n    python3 setup.py install --prefix=${TOOLS}/aster --noprompt\n\nLABEL code_aster=\"${ASTER_VER}\"\nENV ADA_code_aster_exe=${TOOLS}/aster/bin/as_run\n#endregion\n\n#region Install Miniconda\nFROM code_aster AS miniconda\nENV CONDAPATH ${TOOLS}/miniconda3\nENV CONDABLD /tmp/condabuild\n\nENV PATH=\"${CONDAPATH}/bin:${PATH}\"\nARG PATH=\"${CONDAPATH}/bin:${PATH}\"\n\nRUN mkdir ${CONDABLD}\nWORKDIR ${CONDABLD}\n\n\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n  mkdir /root/.conda && \\\n  bash Miniconda3-latest-Linux-x86_64.sh -b -p ${CONDAPATH} && \\\n  rm -f Miniconda3-latest-Linux-x86_64.sh && \\\n  echo \"Running $(conda --version)\" && \\\n  conda init bash && \\\n  . /root/.bashrc\n\n\nCOPY images/environment.yml .\n\nRUN conda update conda && conda env update -f environment.yml\n\n#endregion\n\n#region Install and Setup ADA and Jupyter Client\n\n# Add Tini. Tini operates as a process subreaper for jupyter. This prevents kernel crashes.\nENV TINI_VERSION v0.19.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\n\nRUN conda clean -a\n\nLABEL python=\"3.9\"\n\nCMD [\"jupyter\", \"notebook\", \"--port=8888\", \"--no-browser\", \"--ip=0.0.0.0\", \"--allow-root\"]\n\n#endregion\n\n#region Binder Run Settings\nARG NB_UID=1000\nENV NB_UID ${NB_UID}\nARG NB_USER=adauser\nENV USER ${NB_USER}\nENV HOME /home/${NB_USER}\n\nENV ADA_temp_dir ${HOME}/temp\nENV ADA_test_dir ${HOME}/temp/tests\nENV ADA_log_dir ${HOME}/temp/log\nENV ADA_scratch_dir ${HOME}/scratch\n\nRUN mkdir -p ${HOME} && mkdir ${ADA_temp_dir} && mkdir ${ADA_scratch_dir} && mkdir ${ADA_test_dir} && mkdir ${ADA_log_dir}\n\nRUN adduser --disabled-password --gecos \"Default user\" --uid ${NB_UID} ${NB_USER}\nUSER root\nRUN rm -rfv /tmp/*\nRUN chown -R ${NB_UID} ${HOME}\nUSER ${NB_USER}\n\nWORKDIR ${HOME}\n#COPY examples examples\n#endregion\n"
}