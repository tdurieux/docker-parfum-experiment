{
  "startTime": 1674249407427,
  "endTime": 1674249408302,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use Python from the Debian Linux project\nFROM python:3.10.2-slim-bullseye\n\n# Add labels for metadata\nLABEL maintainer=\"Dhruv Bhanushali <https://dhruvkb.github.io/>\"\n\n# Determines whether to build a production or a development package\nARG IMAGETYPE\n\n# Create a non-root user\nRUN groupadd --system django && useradd --system --gid django django\n\n# Install dependencies\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y build-essential gcc libcairo2 libffi-dev \\\n        libgdk-pixbuf2.0-0 libpango-1.0-0 libpangocairo-1.0-0 poppler-utils \\\n        python3-cffi shared-mime-info curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install pip packages\nRUN pip install --no-cache-dir --upgrade pip \\\n    && pip install --no-cache-dir --upgrade setuptools \\\n    && pip install --no-cache-dir --upgrade supervisor\n\n# Install poetry for dependency management\nRUN curl -f -sSL https://install.python-poetry.org | python3 -\n\n# Add poetry to PATH\nENV PATH=\"/root/.local/bin:$PATH\"\n\n# Work in the root directory of the container\nWORKDIR /\n\n# Copy the file Pipfile.lock over to the container\n# This command implies an image rebuild when PyPI requirements change\nCOPY ./pyproject.toml ./pyproject.toml\nCOPY ./poetry.lock ./poetry.lock\n\n# Install dependencies from the file Pipfile.lock\n# Depending on build args, dev packages may not be installed\nRUN poetry config virtualenvs.create false \\\n && poetry install\n\n# Create the static files volume as a directory\nRUN mkdir -p /static_files \\\n    && chown django:django /static_files \\\n    && chmod -R o+r /static_files\n\n# Create the media files volume as a directory\nRUN mkdir -p /media_files \\\n    && chown -R django:django /media_files \\\n    && chmod -R o+r /media_files\n\n# Create the personal files volume as a directory\nRUN mkdir -p /personal_files \\\n    && chown -R django:django /personal_files \\\n    && chmod -R o+r /personal_files\n\n# Create the supervisor configuration files volume as a directory\nRUN mkdir -p /supervisor.d \\\n    && chown -R django:django /supervisor.d \\\n    && chmod -R o+r /supervisor.d\n\n# Create the web server logs volume as a directory\nRUN mkdir -p /web_server_logs/supervisord_logs  \\\n    && mkdir -p /web_server_logs/gunicorn_logs \\\n    && mkdir -p /web_server_logs/daphne_logs \\\n    && mkdir -p /web_server_logs/server_logs \\\n    && chown -R django:django /web_server_logs \\\n    && chmod -R o+r /web_server_logs\n\n# Create the history volume as a directory\nRUN mkdir -p /.history \\\n    && chown django:django /.history \\\n    && chmod -R o+r /.history\n\n# Change the directories into volumes\nVOLUME /static_files /media_files /personal_files /web_server_logs /supervisor.d /.history\n# Copy the supervisord.conf file over to the container\nCOPY ./supervisord.conf ./supervisord.conf\n\n# Copy the gunicorn_config.py file over to the container\nCOPY ./gunicorn_config.py ./gunicorn_config.py\n\n# Grant read rights to supervisord.conf and gunicorn_config.py\nRUN chown django:django ./supervisord.conf \\\n    && chown django:django ./gunicorn_config.py\n\n# Define environment variables\nENV PYTHONPATH=\"/omniport:/omniport/core:/omniport/services:/omniport/apps\"\nENV HISTFILE=\"/.history/.bash_history\"\nENV IPYTHONDIR=\"/.history/.ipython/\"\n\n# Add some terminal jazz\nRUN echo \"PS1='docker@\\$NAME:\\w\\$ '\" >> /etc/bash.bashrc\n\n# Enter the omniport directory\nWORKDIR /omniport\n"
}