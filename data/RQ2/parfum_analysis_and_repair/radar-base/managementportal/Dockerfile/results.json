{
  "startTime": 1674251372168,
  "endTime": 1674251373098,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build stage\nFROM azul/zulu-openjdk:11 as builder\n\n# Install cURL...\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -yq curl && \\\n    curl -f -sL https://deb.nodesource.com/setup_14.x | bash - && \\\n# ...then install NodeJS\n    apt-get install --no-install-recommends -yq nodejs build-essential && \\\n    npm install -g npm && \\\n    npm install -g yarn && \\\n# ...then install everything needed for Headless Chrome to work\n    apt-get install --no-install-recommends -yq \\\n        ca-certificates fonts-liberation libappindicator3-1 libasound2 \\\n        libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \\\n        libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 \\\n        libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 \\\n        libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 \\\n        libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 libxshmfence1 \\\n        lsb-release \\\n        wget xdg-utils && \\\n# ...and clean up the dependencies\n    apt autoremove && \\\n    rm -rf /var/lib/apt/lists/* && npm cache clean --force;\n\n# installing the node and java packages before adding the src directory\n# will allow us to re-use these image layers when only the souce code changes\nWORKDIR /app\n\nENV GRADLE_OPTS=\"-Dorg.gradle.daemon=false -Dorg.gradle.project.prod=true\"\n\nCOPY package.json yarn.lock /app/\nRUN yarn install && yarn cache clean;\n\nCOPY gradlew /app/\nCOPY gradle/wrapper gradle/wrapper\nRUN ./gradlew --version\n\nCOPY gradle gradle\nCOPY build.gradle gradle.properties settings.gradle /app/\nCOPY radar-auth/build.gradle radar-auth/\nCOPY radar-auth/deprecated-auth0/build.gradle radar-auth/deprecated-auth0/\nCOPY oauth-client-util/build.gradle oauth-client-util/\n\nRUN ./gradlew downloadDependencies :radar-auth:shadowJar\n\n# now we copy our application source code and build it\n\nCOPY angular.json proxy.conf.json tsconfig.app.json \\\n    tsconfig.spec.json tsconfig.json tslint.json /app/\nCOPY webpack webpack\n\nCOPY radar-auth radar-auth\nCOPY src src\nRUN ./gradlew -s bootWar\n\n# Run stage\nFROM azul/zulu-openjdk-alpine:11-jre-headless\n\nENV SPRING_OUTPUT_ANSI_ENABLED=ALWAYS \\\n    JHIPSTER_SLEEP=0 \\\n    JAVA_OPTS=\"\"\n\nRUN apk --no-cache add curl\n\n# Add the war and changelogs files from build stage\nCOPY --from=builder /app/build/libs/*.war /app.war\nCOPY --from=builder /app/src/main/docker/etc /mp-includes\n\nEXPOSE 8080 5701/udp\nCMD echo \"The application will start in ${JHIPSTER_SLEEP}s...\" && \\\n    sleep ${JHIPSTER_SLEEP} && \\\n    java $JAVA_OPTS \\\n        -Djava.security.egd=file:/dev/./urandom \\\n        --add-modules java.se \\\n        --add-exports java.base/jdk.internal.ref=ALL-UNNAMED \\\n        --add-opens java.base/java.lang=ALL-UNNAMED \\\n        --add-opens java.base/java.nio=ALL-UNNAMED \\\n        --add-opens java.base/sun.nio.ch=ALL-UNNAMED \\\n        --add-opens java.management/sun.management=ALL-UNNAMED \\\n        --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED \\\n        -cp /mp-includes:/app.war \\\n        org.springframework.boot.loader.WarLauncher\n"
}