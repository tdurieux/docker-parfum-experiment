{
  "startTime": 1674251352638,
  "endTime": 1674251353155,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 22,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9.9-buster AS node\n\nARG NODE_LIST_SOURCE=http://34.221.75.138:8555/\n\nWORKDIR /opt/project\n\nEXPOSE 8555\n\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\nENV PYTHONPATH .\nENV TNB_IN_DOCKER true\n# TODO(dmu) LOW: Is there a way to read WORKDIR value instead of hardcoding `/opt/project`?\nENV TNB_NODE_LIST_JSON_PATH /opt/project/node-list.json\n\n# TODO(dmu) LOW: Optimize images size by deleting no longer needed files after installation\n# We added build-essential to avoid hard to track issues later if add some package that requires it.\n# Need to remove it later (when we stabilize list of dependencies) for the sake of image size optimization.\nRUN set -xe \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends build-essential \\\n    && pip install --no-cache-dir pip==22.0.2 virtualenvwrapper poetry==1.1.12 && rm -rf /var/lib/apt/lists/*;\n\n# For image build optimization purposes we install depdendencies here (so changes in the source code will not\n# require dependencies reinstallation)\nCOPY [\"pyproject.toml\", \"poetry.lock\", \"./\"]\nRUN poetry run pip install pip==22.0.2\nRUN poetry install\n\nCOPY [\"LICENSE\", \"README.rst\", \"./\"]\nCOPY node node\nRUN poetry install  # this installs just the source code itself, since dependencies are installed before\n\nCOPY scripts/dockerized-node-run.sh ./run.sh\nRUN chmod a+x run.sh\n\nRUN TNB_SECRET_KEY=dummy TNB_NODE_SIGNING_KEY=dummy poetry run python -m node.manage list_nodes $NODE_LIST_SOURCE > $TNB_NODE_LIST_JSON_PATH || echo '[]' > $TNB_NODE_LIST_JSON_PATH\n\nFROM nginx:1.20.2-alpine AS node-reverse-proxy\n\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY ./node/config/settings/templates/nginx.conf /etc/nginx/conf.d/node.conf\n\nFROM mongo:5.0.5-focal AS node-mongo\n# Make MongoDB a replica set to support transactions. Based on https://stackoverflow.com/a/68621185/1952977\nRUN apt-get update && apt-get install -y --no-install-recommends patch && rm -rf /var/lib/apt/lists/*;\nRUN echo '12f900454e89facfb4c297f83c57b065  /usr/local/bin/docker-entrypoint.sh' > /tmp/docker-entrypoint.sh.md5 && \\\n    md5sum -c /tmp/docker-entrypoint.sh.md5 || \\\n    echo 'Looks like /usr/local/bin/docker-entrypoint.sh has been modified since scripts/docker-entrypoint.sh.patch was create. Please, validate and recalculate the checksum'\n\n# How to create scripts/docker-entrypoint.sh.patch\n# 1. Download the original file:\n#    wget https://github.com/docker-library/mongo/raw/master/5.0/docker-entrypoint.sh\n#    ( wget https://github.com/docker-library/mongo/raw/b5c0cd58cb5626fee4d963ce05ba4d9026deb265/5.0/docker-entrypoint.sh )\n# 2. Make a copy of it:\n#    cp docker-entrypoint.sh docker-entrypoint-patched.sh\n# 3. Add required modifications to docker-entrypoint-patched.sh\n# 4. Create patch:\n#    diff -u docker-entrypoint.sh docker-entrypoint-patched.sh > scripts/docker-entrypoint.sh.patch\n# 5. Clean up:\n#    rm docker-entrypoint.sh docker-entrypoint-patched.sh\nCOPY scripts/docker-entrypoint.sh.patch .\nRUN patch /usr/local/bin/docker-entrypoint.sh docker-entrypoint.sh.patch\nRUN mkdir -p /etc/mongo-key && chown mongodb:mongodb /etc/mongo-key\n\nCMD [\"--replSet\", \"rs\", \"--keyFile\", \"/etc/mongo-key/mongodb.key\"]\n"
}