diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/benc-uk/dapr-store/build/service.Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/benc-uk/dapr-store/build/service.Dockerfile/repaired.Dockerfile
index ed9a718..0b624b4 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/benc-uk/dapr-store/build/service.Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/benc-uk/dapr-store/build/service.Dockerfile/repaired.Dockerfile
@@ -11,7 +11,8 @@ ARG CGO_ENABLED=0
 WORKDIR /build
 
 # Install system dependencies, if CGO_ENABLED=1
-RUN if [[ $CGO_ENABLED -eq 1 ]]; then apk update && apk add gcc musl-dev; fi
+RUN if [[ $CGO_ENABLED -eq 1 ]]; then \
+ apk update && apk add --no-cache gcc musl-dev; fi
 
 # Fetch and cache Go modules
 COPY go.mod .
@@ -23,7 +24,7 @@ COPY cmd/ ./cmd/
 COPY pkg/ ./pkg/
 
 # Now run the build
-# Inject version and build details, to be available at runtime 
+# Inject version and build details, to be available at runtime
 RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
   go build \
   -ldflags "-X main.version=$VERSION -X 'main.buildInfo=$BUILD_INFO'" \
@@ -33,13 +34,13 @@ RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
 # === Stage 2: Get server binary into a lightweight container ====================================
 # ================================================================================================
 FROM alpine
-WORKDIR /app 
+WORKDIR /app
 
 ARG SERVICE_NAME="SET_ON_COMMAND_LINE"
 ARG SERVICE_PORT=9000
 
 # Copy the Go server binary
-COPY --from=go-build /build/server . 
+COPY --from=go-build /build/server .
 
 EXPOSE $SERVICE_PORT
 ENV PORT=$SERVICE_PORT
@@ -48,5 +49,5 @@ ENV PORT=$SERVICE_PORT
 # But some services might have .db files, some don't
 COPY cmd/$SERVICE_NAME/readme.md cmd/$SERVICE_NAME/*.db ./
 
-# That's it! Just run the server 
+# That's it! Just run the server
 CMD [ "./server"]
\ No newline at end of file