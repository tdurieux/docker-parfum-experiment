diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/tresamigossd/smv/docker/smv/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/tresamigossd/smv/docker/smv/Dockerfile/repaired.Dockerfile
index 31133c7..3cc2c75 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/tresamigossd/smv/docker/smv/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/tresamigossd/smv/docker/smv/Dockerfile/repaired.Dockerfile
@@ -7,10 +7,10 @@
 # artifacts with the process of building new Docker images. Stage 1 is exclusively for generating the release
 # artifact. It installs dev dependencies, compiles SMV, and runs the local_bundle target from the Makefile.
 # The second stage installs only the production dependencies and then copies and unpacks the release artifact
-# from the first stage. This approach typically reduces image size, although at this time SMV's production  
+# from the first stage. This approach typically reduces image size, although at this time SMV's production 
 # dependencies so closely match its dev dependencies that there may not be much of a delta. The first stage
 # is also used as the canonical build environment for the release - the release copies the artifact out of
-# the image and publishes that to Github. 
+# the image and publishes that to Github.
 #############################################################################################################
 
 #############################################################################################################
@@ -27,25 +27,25 @@ ENV PATH=${SBT_HOME}/bin:${PYENV_ROOT}/bin:${PATH}
 RUN apt-get -y update
 
 RUN wget https://dl.bintray.com/sbt/native-packages/sbt/$SBT_VERSION/sbt-$SBT_VERSION.tgz
-RUN tar -xzvf sbt-$SBT_VERSION.tgz
+RUN tar -xzvf sbt-$SBT_VERSION.tgz && rm sbt-$SBT_VERSION.tgz
 RUN mv sbt /usr/lib/sbt
 RUN rm sbt-$SBT_VERSION.tgz
 
-RUN apt-get -y install make gcc libssl-dev zlib1g-dev
+RUN apt-get -y --no-install-recommends install make gcc libssl-dev zlib1g-dev && rm -rf /var/lib/apt/lists/*;
 
 COPY . ${SMV_HOME}
 WORKDIR ${SMV_HOME}
 
-RUN cd ${SMV_HOME} && ls && make clean 
-RUN cd ${SMV_HOME} && make assemble-fat-jar 
+RUN cd ${SMV_HOME} && ls && make clean
+RUN cd ${SMV_HOME} && make assemble-fat-jar
 RUN cd ${SMV_HOME} && make local_bundle
 
 ARG PYTHON_VERSION=2.7.13
 # Debian repositories don't have all of the supported versions of Python, so it will be easiest to
 # use pyenv to manage installation
-RUN curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
+RUN curl -f -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
 RUN ${PYENV_ROOT}/bin/pyenv install ${PYTHON_VERSION}
-RUN ${PYENV_ROOT}/bin/pyenv global ${PYTHON_VERSION} 
+RUN ${PYENV_ROOT}/bin/pyenv global ${PYTHON_VERSION}
 RUN ${PYENV_ROOT}/versions/${PYTHON_VERSION}/bin/pip install --upgrade pip
 RUN ${PYENV_ROOT}/versions/${PYTHON_VERSION}/bin/pip install -r ${SMV_HOME}/docker/smv/requirements.txt
 
@@ -60,8 +60,8 @@ ENV SMV_HOME=/usr/lib/SMV
 ENV SPARK_HOME=/usr/lib/spark
 ENV PATH=${SPARK_HOME}/bin:${SMV_HOME}/tools:${PYENV_ROOT}/bin/:${PATH}
 
-RUN apt-get -y update &&\
-    apt-get -y install sudo git vim graphviz
+RUN apt-get -y update && \
+    apt-get -y --no-install-recommends install sudo git vim graphviz && rm -rf /var/lib/apt/lists/*;
 
 # create the projects directory and create a flag (.docker) to indicate project is inside docker image.
 RUN mkdir /projects &&\
@@ -74,7 +74,7 @@ COPY --from=smv-build ${PYENV_ROOT} ${PYENV_ROOT}
 
 # Copy the SMV release artifact from the first stage and unpack it. Since the same artifact is also copied
 # out and published as the official release, we are guaranteed that the published image matches the published
-# This works around the chicken/egg issues encountered with the old approach of downloading a version of 
+# This works around the chicken/egg issues encountered with the old approach of downloading a version of
 # artifact. `smv-install` from Github raw content to install (probably) the most recent release.
 COPY --from=smv-build /usr/lib/SMV/smv_*.tgz .
 RUN tar xzvf smv_*.tgz && rm -rf smv_*.tgz && mv ./SMV ${SMV_HOME} &&\