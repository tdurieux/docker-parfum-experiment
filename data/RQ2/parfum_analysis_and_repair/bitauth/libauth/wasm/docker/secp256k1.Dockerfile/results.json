{
  "startTime": 1674250184752,
  "endTime": 1674250185874,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 5,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 5,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM trzeci/emscripten-slim:latest\nFROM trzeci/emscripten-slim@sha256:e3cd9edf81c5d9cd78d2edf034ce6fcb2dccb35f1f5451e8ce75e5210bbbf036\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n  autoconf \\\n  libtool \\\n  build-essential && rm -rf /var/lib/apt/lists/*;\n\nCOPY wasm /libauth/wasm\n\nWORKDIR /libauth/wasm/secp256k1\n\nRUN ./autogen.sh\nRUN emconfigure ./configure --enable-module-recovery \\\n  # uncomment next line for debug build:\n  # CFLAGS=\"-g -O0\" \n  # uncomment next line for production build:\n  CFLAGS=\"-O3\"\nRUN emmake make FORMAT=wasm\nRUN mkdir -p out/secp256k1\n\nRUN emcc src/libsecp256k1_la-secp256k1.o \\\n  # uncomment next line for debug build:\n  # -O0 -g4 -s ASSERTIONS=2 --source-map-base ../../../wasm/secp256k1 \\\n  # uncomment next line for production build:\n  -O3 \\\n  -s WASM=1 \\\n  -s \"BINARYEN_METHOD='native-wasm'\" \\\n  -s NO_EXIT_RUNTIME=1 \\\n  -s DETERMINISTIC=1 \\\n  -s EXPORTED_FUNCTIONS='[ \\\n  \"_malloc\", \\\n  \"_free\", \\\n  \"_secp256k1_context_create\", \\\n  \"_secp256k1_context_randomize\", \\\n  \"_secp256k1_ec_seckey_verify\", \\\n  \"_secp256k1_ec_privkey_tweak_add\", \\\n  \"_secp256k1_ec_privkey_tweak_mul\", \\\n  \"_secp256k1_ec_pubkey_create\", \\\n  \"_secp256k1_ec_pubkey_parse\", \\\n  \"_secp256k1_ec_pubkey_serialize\", \\\n  \"_secp256k1_ec_pubkey_tweak_add\", \\\n  \"_secp256k1_ec_pubkey_tweak_mul\", \\\n  \"_secp256k1_ecdsa_recover\", \\\n  \"_secp256k1_ecdsa_recoverable_signature_serialize_compact\", \\\n  \"_secp256k1_ecdsa_recoverable_signature_parse_compact\", \\\n  \"_secp256k1_ecdsa_sign\", \\\n  \"_secp256k1_ecdsa_signature_malleate\", \\\n  \"_secp256k1_ecdsa_signature_normalize\", \\\n  \"_secp256k1_ecdsa_signature_parse_der\", \\\n  \"_secp256k1_ecdsa_signature_parse_compact\", \\\n  \"_secp256k1_ecdsa_signature_serialize_der\", \\\n  \"_secp256k1_ecdsa_signature_serialize_compact\", \\\n  \"_secp256k1_ecdsa_sign_recoverable\", \\\n  \"_secp256k1_ecdsa_verify\", \\\n  \"_secp256k1_schnorr_sign\", \\\n  \"_secp256k1_schnorr_verify\" \\\n  ]' \\\n  -o out/secp256k1/secp256k1.js\n\nRUN OUTPUT_TS_FILE=out/secp256k1/secp256k1.base64.ts; printf \"/**\\n * @hidden\\n */\\n// prettier-ignore\\nexport const secp256k1Base64Bytes =\\n  '\" > $OUTPUT_TS_FILE && base64 -w 0 out/secp256k1/secp256k1.wasm >> $OUTPUT_TS_FILE && printf \"';\\n\" >> $OUTPUT_TS_FILE\n\nRUN cp -r /libauth/wasm/secp256k1/out /libauth/bin\n\n# copy outputs to mounted volume\nCMD [\"cp\", \"-r\", \"/libauth/bin\", \"/libauth/out\"]"
}