{
  "startTime": 1674255022935,
  "endTime": 1674255023970,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 79
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Accept the Go version for the image to be set as a build argument.\nARG GO_VERSION=1.18\n\n# First stage: build the executable.\nFROM golang:${GO_VERSION}-stretch AS builder\n\n# What arch is it?\nARG GOARCH=amd64\nARG GOOS=linux\n\n# Install the Certificate-Authority certificates for the app to be able to make\n# calls to HTTPS endpoints.\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y ca-certificates git gcc libc-dev libncurses5-dev sqlite3 && rm -rf /var/lib/apt/lists/*;\n\n# Set the working directory outside $GOPATH to enable the support for modules.\nWORKDIR /src\n\n# Import the code from the context.\nCOPY ./ ./\n\n# Build the executable to `/app`. Mark the build as statically linked.\nRUN echo \"Building for $GOARCH\" \\\n    && mkdir -p ${GOPATH}/src/github.com/kubernetes-sigs \\\n    && ln -sf `pwd` ${GOPATH}/src/github.com/kubernetes-sigs/dashboard-metrics-scraper \\\n    && GOARCH=${GOARCH} hack/build.sh\n\n# Create a nonroot user for final image\nRUN useradd -u 10001 nonroot\n\n# Final stage: the running container.\nFROM scratch AS final\n\n# Import the compiled executable from the second stage.\nCOPY --from=builder /metrics-sidecar /metrics-sidecar\n\n# Copy nonroot user\nCOPY --from=builder /etc/passwd /etc/passwd\n\n# Declare the port on which the webserver will be exposed.\nEXPOSE 8080\nUSER nonroot\n\n# Run the compiled binary.\nENTRYPOINT [\"/metrics-sidecar\"]\n"
}