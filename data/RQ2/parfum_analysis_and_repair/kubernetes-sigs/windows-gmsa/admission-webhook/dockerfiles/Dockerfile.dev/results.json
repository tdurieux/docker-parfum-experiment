{
  "startTime": 1674256212811,
  "endTime": 1674256213635,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Dockerfile for dev\n## Differs from the release Dockerfile in that it allows re-compiling and re-starting\n## the webserver from within the container\n\nARG GO_VERSION\nFROM golang:$GO_VERSION\n\n# we use runit so that we can stop the service without killing the container, and consequently\n# play around with it\nRUN apt-get update && apt-get install --no-install-recommends --yes runit && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /etc/service/webhook \\\n    && /bin/bash -c \"echo -e '\"'#!/bin/bash\\nexec /go/src/sigs.k8s.io/windows-gmsa/admission-webhook/admission-webhook 2>&1\\n'\"' > /etc/service/webhook/run\" \\\n    && chmod +x /etc/service/webhook/run\nRUN ln -s /usr/bin/sv /etc/init.d/webhook\n\nWORKDIR /go/src/sigs.k8s.io/windows-gmsa/admission-webhook\n\n# copy go dependencies\nCOPY /vendor ./vendor\n\n# build\nCOPY *.go ./\nARG VERSION\nRUN go build -ldflags=\"-X main.version=${VERSION}\"\n\n# copy the rest\nCOPY . .\n\n# let runit work its magic\nCMD [\"runsvdir\", \"/etc/service\"]\n"
}