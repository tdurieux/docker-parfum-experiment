{
  "startTime": 1674215259694,
  "endTime": 1674215260793,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 7,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 7,
        "columnEnd": 119
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# kind node base image\n#\n# For systemd + docker configuration used below, see the following references:\n# https://systemd.io/CONTAINER_INTERFACE/\n\n# start from ubuntu, this image is reasonably small as a starting point\n# for a kubernetes node image, it doesn't contain much we don't need\nARG BASE_IMAGE=ubuntu:21.10\nFROM $BASE_IMAGE as build\n\n# `docker buildx` automatically sets this arg value\nARG TARGETARCH\n\n# Configure containerd and runc binaries from kind-ci/containerd-nightlies repository\n# The repository contains latest stable releases and nightlies built for multiple architectures\nARG CONTAINERD_VERSION=\"1.6.6\"\nARG CONTAINERD_BASE_URL=\"https://github.com/kind-ci/containerd-nightlies/releases/download/containerd-${CONTAINERD_VERSION}\"\nARG CONTAINERD_URL=\"${CONTAINERD_BASE_URL}/containerd-${CONTAINERD_VERSION}-linux-${TARGETARCH}.tar.gz\"\nARG CONTAINERD_AMD64_SHA256SUM=\"1745f3505520559994ca692662d2274bed61eb3043f6f298d06e4abe257494b4\"\nARG CONTAINERD_ARM64_SHA256SUM=\"db6c86953a9b4a91ec7a03b1a54edece7c550af3cd40a3818b3d1025e4c722b0\"\nARG CONTAINERD_PPC64LE_SHA256SUM=\"9cb28f4bb72c632211adffb571acb3825a96f2055e61d5b72765d06e7100415c\"\nARG CONTAINERD_S390X_SHA256SUM=\"f36b75338b8f713de93dd13830c5334063b89674e74144b5bd400280f754dfed\"\n\nARG RUNC_URL=\"${CONTAINERD_BASE_URL}/runc.${TARGETARCH}\"\nARG RUNC_AMD64_SHA256SUM=\"f614f2ad995e53ebd5722450dd628cedb3a143a658179d00190a203b8b057f31\"\nARG RUNC_ARM64_SHA256SUM=\"9ea2df7dcefc1e720ccc7113e1649e5b1976fea08d86b4eb2d2ac273000d4991\"\nARG RUNC_PPC64LE_SHA256SUM=\"6551442fa5537a1024fe372e9310d242c5a74660fe2accde95c06e3916e68349\"\nARG RUNC_S390X_SHA256SUM=\"feb82f880a68bc51043fc14db9fdd9f632fae04e87d3ca82bb12db15a59950f0\"\n\n# Configure crictl binary from upstream\nARG CRICTL_VERSION=\"v1.24.0\"\nARG CRICTL_URL=\"https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-${TARGETARCH}.tar.gz\"\nARG CRICTL_AMD64_SHA256SUM=\"3df4a4306e0554aea4fdc26ecef9eea29a58c8460bebfaca3405799787609880\"\nARG CRICTL_ARM64_SHA256SUM=\"b6fe172738dfa68ca4c71ade53574e859bf61a3e34d21b305587b1ad4ab28d24\"\nARG CRICTL_PPC64LE_SHA256SUM=\"586c263678c6d8d543976607ea1732115e622d44993e2bcbed29832370d3a754\"\nARG CRICTL_S390X_SHA256SUM=\"4e50aabd330ca28d4da8d5cbacb8bd0ab6fcde5f5cfb8a1d2fbe973944085745\"\n\n# Configure CNI binaries from upstream\nARG CNI_PLUGINS_VERSION=\"v1.1.1\"\nARG CNI_PLUGINS_TARBALL=\"${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH}-${CNI_PLUGINS_VERSION}.tgz\"\nARG CNI_PLUGINS_URL=\"https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_TARBALL}\"\nARG CNI_PLUGINS_AMD64_SHA256SUM=\"b275772da4026d2161bf8a8b41ed4786754c8a93ebfb6564006d5da7f23831e5\"\nARG CNI_PLUGINS_ARM64_SHA256SUM=\"16484966a46b4692028ba32d16afd994e079dc2cc63fbc2191d7bfaf5e11f3dd\"\nARG CNI_PLUGINS_PPC64LE_SHA256SUM=\"1551259fbfe861d942846bee028d5a85f492393e04bcd6609ac8aaa7a3d71431\"\nARG CNI_PLUGINS_S390X_SHA256SUM=\"767c6b2f191a666522ab18c26aab07de68508a8c7a6d56625e476f35ba527c76\"\n\n# Configure containerd-fuse-overlayfs snapshotter binary from upstream\nARG CONTAINERD_FUSE_OVERLAYFS_VERSION=\"1.0.4\"\nARG CONTAINERD_FUSE_OVERLAYFS_TARBALL=\"v${CONTAINERD_FUSE_OVERLAYFS_VERSION}/containerd-fuse-overlayfs-${CONTAINERD_FUSE_OVERLAYFS_VERSION}-linux-${TARGETARCH}.tar.gz\"\nARG CONTAINERD_FUSE_OVERLAYFS_URL=\"https://github.com/containerd/fuse-overlayfs-snapshotter/releases/download/${CONTAINERD_FUSE_OVERLAYFS_TARBALL}\"\nARG CONTAINERD_FUSE_OVERLAYFS_AMD64_SHA256SUM=\"228417cc97fea4df26ed85182443ee4d5799f65ada0b3ce663bf7e6bc8920f6b\"\nARG CONTAINERD_FUSE_OVERLAYFS_ARM64_SHA256SUM=\"5ede755ff8fe2cb3e38b59d7eb005ccc29a88037a2fa5f7749d28471ee81c727\"\nARG CONTAINERD_FUSE_OVERLAYFS_PPC64LE_SHA256SUM=\"cd4775b6de118bc3bc83efb89e4303c96c602b86d63f2df4a083f48e968c171d\"\nARG CONTAINERD_FUSE_OVERLAYFS_S390X_SHA256SUM=\"55dae4a2c74b1215ec99591b9197e6a651bfcc6f96b4cc0331537fba5411eadc\"\n\n# copy in static files\n# all scripts are 0755 (rwx r-x r-x)\nCOPY --chmod=0755 files/usr/local/bin/* /usr/local/bin/\n\n# all configs are 0644 (rw- r-- r--)\nCOPY --chmod=0644 files/etc/* /etc/\nCOPY --chmod=0644 files/etc/containerd/* /etc/containerd/\nCOPY --chmod=0644 files/etc/default/* /etc/default/\nCOPY --chmod=0644 files/etc/sysctl.d/* /etc/sysctl.d/\nCOPY --chmod=0644 files/etc/systemd/system/* /etc/systemd/system/\nCOPY --chmod=0644 files/etc/systemd/system/kubelet.service.d/* /etc/systemd/system/kubelet.service.d/\n\n# Install dependencies, first from apt, then from release tarballs.\n# NOTE: we use one RUN to minimize layers.\n#\n# First we must ensure that our util scripts are executable.\n#\n# The base image already has a basic userspace + apt but we need to install more packages.\n# Packages installed are broken down into (each on a line):\n# - packages needed to run services (systemd)\n# - packages needed for kubernetes components\n# - packages needed by the container runtime\n# - misc packages kind uses itself\n# - packages that provide semi-core kubernetes functionality\n# After installing packages we cleanup by:\n# - removing unwanted systemd services\n# - disabling kmsg in journald (these log entries would be confusing)\n#\n# Then we install containerd from our nightly build infrastructure, as this\n# build for multiple architectures and allows us to upgrade to patched releases\n# more quickly.\n#\n# Next we download and extract crictl and CNI plugin binaries from upstream.\n#\n# Next we ensure the /etc/kubernetes/manifests directory exists. Normally\n# a kubeadm debian / rpm package would ensure that this exists but we install\n# freshly built binaries directly when we build the node image.\n#\n# Finally we adjust tempfiles cleanup to be 1 minute after \"boot\" instead of 15m\n# This is plenty after we've done initial setup for a node, but before we are\n# likely to try to export logs etc.\n\nRUN echo \"Installing Packages ...\" \\\n    && DEBIAN_FRONTEND=noninteractive clean-install \\\n      systemd \\\n      conntrack iptables iproute2 ethtool socat util-linux mount ebtables kmod \\\n      libseccomp2 pigz \\\n      bash ca-certificates curl rsync \\\n      nfs-common fuse-overlayfs \\\n      jq \\\n    && find /lib/systemd/system/sysinit.target.wants/ -name \"systemd-tmpfiles-setup.service\" -delete \\\n    && rm -f /lib/systemd/system/multi-user.target.wants/* \\\n    && rm -f /etc/systemd/system/*.wants/* \\\n    && rm -f /lib/systemd/system/local-fs.target.wants/* \\\n    && rm -f /lib/systemd/system/sockets.target.wants/*udev* \\\n    && rm -f /lib/systemd/system/sockets.target.wants/*initctl* \\\n    && rm -f /lib/systemd/system/basic.target.wants/* \\\n    && echo \"ReadKMsg=no\" >> /etc/systemd/journald.conf \\\n    && ln -s \"$(which systemd)\" /sbin/init\n\nRUN echo \"Enabling kubelet ... \" \\\n    && systemctl enable kubelet.service\n\nRUN echo \"Installing containerd ...\" \\\n    && curl -f -sSL --retry 5 --output /tmp/containerd.${TARGETARCH}.tgz \"${CONTAINERD_URL}\" \\\n    && echo \"${CONTAINERD_AMD64_SHA256SUM}  /tmp/containerd.amd64.tgz\" | tee /tmp/containerd.sha256 \\\n    && echo \"${CONTAINERD_ARM64_SHA256SUM}  /tmp/containerd.arm64.tgz\" | tee -a /tmp/containerd.sha256 \\\n    && echo \"${CONTAINERD_PPC64LE_SHA256SUM}  /tmp/containerd.ppc64le.tgz\" | tee -a /tmp/containerd.sha256 \\\n    && echo \"${CONTAINERD_S390X_SHA256SUM}  /tmp/containerd.s390x.tgz\" | tee -a /tmp/containerd.sha256 \\\n    && sha256sum --ignore-missing -c /tmp/containerd.sha256 \\\n    && rm -f /tmp/containerd.sha256 \\\n    && tar -C /usr/local -xzvf /tmp/containerd.${TARGETARCH}.tgz \\\n    && rm -rf /tmp/containerd.${TARGETARCH}.tgz \\\n    && rm -f /usr/local/bin/containerd-stress /usr/local/bin/containerd-shim-runc-v1 \\\n    && curl -f -sSL --retry 5 --output /tmp/runc.${TARGETARCH} \"${RUNC_URL}\" \\\n    && echo \"${RUNC_AMD64_SHA256SUM}  /tmp/runc.amd64\" | tee /tmp/runc.sha256 \\\n    && echo \"${RUNC_ARM64_SHA256SUM}  /tmp/runc.arm64\" | tee -a /tmp/runc.sha256 \\\n    && echo \"${RUNC_PPC64LE_SHA256SUM}  /tmp/runc.ppc64le\" | tee -a /tmp/runc.sha256 \\\n    && echo \"${RUNC_S390X_SHA256SUM}  /tmp/runc.s390x\" | tee -a /tmp/runc.sha256 \\\n    && sha256sum --ignore-missing -c /tmp/runc.sha256 \\\n    && mv /tmp/runc.${TARGETARCH} /usr/local/sbin/runc \\\n    && chmod 755 /usr/local/sbin/runc \\\n    && ctr oci spec \\\n        | jq '.hooks.createContainer[.hooks.createContainer| length] |= . + {\"path\": \"/usr/local/bin/mount-product-files\"}' \\\n        | jq 'del(.process.rlimits)' \\\n        > /etc/containerd/cri-base.json \\\n    && containerd --version \\\n    && runc --version \\\n    && systemctl enable containerd\n\nRUN echo \"Installing crictl ...\" \\\n    && curl -f -sSL --retry 5 --output /tmp/crictl.${TARGETARCH}.tgz \"${CRICTL_URL}\" \\\n    && echo \"${CRICTL_AMD64_SHA256SUM}  /tmp/crictl.amd64.tgz\" | tee /tmp/crictl.sha256 \\\n    && echo \"${CRICTL_ARM64_SHA256SUM}  /tmp/crictl.arm64.tgz\" | tee -a /tmp/crictl.sha256 \\\n    && echo \"${CRICTL_PPC64LE_SHA256SUM}  /tmp/crictl.ppc64le.tgz\" | tee -a /tmp/crictl.sha256 \\\n    && echo \"${CRICTL_S390X_SHA256SUM}  /tmp/crictl.s390x.tgz\" | tee -a /tmp/crictl.sha256 \\\n    && sha256sum --ignore-missing -c /tmp/crictl.sha256 \\\n    && rm -f /tmp/crictl.sha256 \\\n    && tar -C /usr/local/bin -xzvf /tmp/crictl.${TARGETARCH}.tgz \\\n    && rm -rf /tmp/crictl.${TARGETARCH}.tgz\n\nRUN echo \"Installing CNI plugin binaries ...\" \\\n    && curl -f -sSL --retry 5 --output /tmp/cni.${TARGETARCH}.tgz \"${CNI_PLUGINS_URL}\" \\\n    && echo \"${CNI_PLUGINS_AMD64_SHA256SUM}  /tmp/cni.amd64.tgz\" | tee /tmp/cni.sha256 \\\n    && echo \"${CNI_PLUGINS_ARM64_SHA256SUM}  /tmp/cni.arm64.tgz\" | tee -a /tmp/cni.sha256 \\\n    && echo \"${CNI_PLUGINS_PPC64LE_SHA256SUM}  /tmp/cni.ppc64le.tgz\" | tee -a /tmp/cni.sha256 \\\n    && echo \"${CNI_PLUGINS_S390X_SHA256SUM}  /tmp/cni.s390x.tgz\" | tee -a /tmp/cni.sha256 \\\n    && sha256sum --ignore-missing -c /tmp/cni.sha256 \\\n    && rm -f /tmp/cni.sha256 \\\n    && mkdir -p /opt/cni/bin \\\n    && tar -C /opt/cni/bin -xzvf /tmp/cni.${TARGETARCH}.tgz \\\n    && rm -rf /tmp/cni.${TARGETARCH}.tgz \\\n    && find /opt/cni/bin -type f -not \\( \\\n         -iname host-local \\\n         -o -iname ptp \\\n         -o -iname portmap \\\n         -o -iname loopback \\\n      \\) \\\n      -delete\n\nRUN echo \"Installing containerd-fuse-overlayfs ...\" \\\n    && curl -f -sSL --retry 5 --output /tmp/containerd-fuse-overlayfs.${TARGETARCH}.tgz \"${CONTAINERD_FUSE_OVERLAYFS_URL}\" \\\n    && echo \"${CONTAINERD_FUSE_OVERLAYFS_AMD64_SHA256SUM}  /tmp/containerd-fuse-overlayfs.amd64.tgz\" | tee /tmp/containerd-fuse-overlayfs.sha256 \\\n    && echo \"${CONTAINERD_FUSE_OVERLAYFS_ARM64_SHA256SUM}  /tmp/containerd-fuse-overlayfs.arm64.tgz\" | tee -a /tmp/containerd-fuse-overlayfs.sha256 \\\n    && echo \"${CONTAINERD_FUSE_OVERLAYFS_PPC64LE_SHA256SUM}  /tmp/containerd-fuse-overlayfs.ppc64le.tgz\" | tee -a /tmp/containerd-fuse-overlayfs.sha256 \\\n    && echo \"${CONTAINERD_FUSE_OVERLAYFS_S390X_SHA256SUM}  /tmp/containerd-fuse-overlayfs.s390x.tgz\" | tee -a /tmp/containerd-fuse-overlayfs.sha256 \\\n    && sha256sum --ignore-missing -c /tmp/containerd-fuse-overlayfs.sha256 \\\n    && rm -f /tmp/containerd-fuse-overlayfs.sha256 \\\n    && tar -C /usr/local/bin -xzvf /tmp/containerd-fuse-overlayfs.${TARGETARCH}.tgz \\\n    && rm -rf /tmp/containerd-fuse-overlayfs.${TARGETARCH}.tgz\n\nRUN echo \"Ensuring /etc/kubernetes/manifests\" \\\n    && mkdir -p /etc/kubernetes/manifests\n\nRUN echo \"Adjusting systemd-tmpfiles timer\" \\\n    && sed -i /usr/lib/systemd/system/systemd-tmpfiles-clean.timer -e 's#OnBootSec=.*#OnBootSec=1min#'\n\n# squash\nFROM scratch\nCOPY --from=build / /\n\n# tell systemd that it is in docker (it will check for the container env)\n# https://systemd.io/CONTAINER_INTERFACE/\nENV container docker\n# systemd exits on SIGRTMIN+3, not SIGTERM (which re-executes it)\n# https://bugzilla.redhat.com/show_bug.cgi?id=1201657\nSTOPSIGNAL SIGRTMIN+3\n# NOTE: this is *only* for documentation, the entrypoint is overridden later\nENTRYPOINT [ \"/usr/local/bin/entrypoint\", \"/sbin/init\" ]\n"
}