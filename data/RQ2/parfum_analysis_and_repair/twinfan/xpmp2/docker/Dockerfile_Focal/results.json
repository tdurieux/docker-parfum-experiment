{
  "startTime": 1674217363891,
  "endTime": 1674217366133,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 267,
        "lineEnd": 267,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 21
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 96,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 103,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 273,
        "lineEnd": 273,
        "columnStart": 4,
        "columnEnd": 175
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 220,
        "lineEnd": 220,
        "columnStart": 4,
        "columnEnd": 173
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 252,
        "lineEnd": 255,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 264,
        "lineEnd": 264,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 295,
        "lineEnd": 295,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 203,
        "lineEnd": 204,
        "columnStart": 7,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 220,
        "lineEnd": 220,
        "columnStart": 4,
        "columnEnd": 173
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 252,
        "lineEnd": 255,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 264,
        "lineEnd": 264,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 295,
        "lineEnd": 295,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 220,
        "lineEnd": 220,
        "columnStart": 4,
        "columnEnd": 173
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 252,
        "lineEnd": 255,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 264,
        "lineEnd": 264,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 295,
        "lineEnd": 295,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "# Linux, Windows, MacOS cross compile environment, based on Ubuntu Focal Fossa\n\n# ORIGINAL DOCKERFILE, which built twinfan/focal-win-mac-lin-compile-env\n# NOTE: This script does _not_ download the MacOS SDK from anywhere!\n#       Instead, the SDK is expected to sit in the current folder as MacOSX11.1.sdk.tar.xz\n#       or its location be passed via Docker ARGs \"DARWIN_SDK_VERSION\" and/or \"DARWIN_SDK_PATH\".\n\nFROM ubuntu:20.04\n\n### MingW64 setup taken over from mmozeiko/mingw-w64 #####################\n# but I want Win32 threads, so I need to configure gcc differently\n\nWORKDIR /mnt\n\nENV MINGW=/mingw\n\nARG PKG_CONFIG_VERSION=0.29.2\nARG CMAKE_VERSION=3.22.1\nARG BINUTILS_VERSION=2.37\nARG MINGW_VERSION=9.0.0\nARG GCC_VERSION=10.3.0\nARG NASM_VERSION=2.15.05\nARG NVCC_VERSION=11.2.0\n\nSHELL [ \"/bin/bash\", \"-c\" ]\n\nRUN set -ex \\\n    \\\n    && apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get upgrade --no-install-recommends -y \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n        ca-certificates \\\n        gcc-10 \\\n        g++-10 \\\n        zlib1g-dev \\\n        libssl-dev \\\n        libgmp-dev \\\n        libmpfr-dev \\\n        libmpc-dev \\\n        libisl-dev \\\n        libssl1.1 \\\n        libgmp10 \\\n        libmpfr6 \\\n        libmpc3 \\\n        libisl22 \\\n        xz-utils \\\n        python \\\n        python-lxml \\\n        python-mako \\\n        ninja-build \\\n        texinfo \\\n        meson \\\n        gnupg \\\n        bzip2 \\\n        patch \\\n        gperf \\\n        bison \\\n        file \\\n        flex \\\n        make \\\n        yasm \\\n        wget \\\n        zip \\\n        git \\\n    \\\n    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 1000 --slave /usr/bin/g++ g++ /usr/bin/g++-10 \\\n    \\\n    && wget -q https://pkg-config.freedesktop.org/releases/pkg-config-${PKG_CONFIG_VERSION}.tar.gz -O - | tar -xz \\\n    && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz -O - | tar -xz \\\n    && wget -q https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VERSION}.tar.xz -O - | tar -xJ \\\n    && wget -q https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/mingw-w64-v${MINGW_VERSION}.tar.bz2 -O - | tar -xj \\\n    && wget -q https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.xz -O - | tar -xJ \\\n    && wget -q https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/nasm-${NASM_VERSION}.tar.xz -O - | tar -xJ \\\n    \\\n    && wget -q https://raw.githubusercontent.com/msys2/MINGW-packages/master/mingw-w64-gcc/0020-libgomp-Don-t-hard-code-MS-printf-attributes.patch -O - | \\\n        patch -d gcc-${GCC_VERSION} -p 1 \\\n    \\\n    && mkdir -p ${MINGW}/include ${MINGW}/lib/pkgconfig \\\n    && chmod 0777 -R /mnt ${MINGW} && rm -rf /var/lib/apt/lists/*;\n\nRUN set -ex \\\n    && cd pkg-config-${PKG_CONFIG_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr/local \\\n        --with-pc-path=${MINGW}/lib/pkgconfig \\\n        --with-internal-glib \\\n        --disable-shared \\\n        --disable-nls \\\n    && make -j`nproc` \\\n    && make install \\\n    && cd ..\n\nRUN set -ex \\\n    && cd cmake-${CMAKE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr/local \\\n        --parallel=`nproc` \\\n    && make -j`nproc` \\\n    && make install \\\n    && cd ..\n\nRUN set -ex \\\n    && cd binutils-${BINUTILS_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr/local \\\n        --target=x86_64-w64-mingw32 \\\n        --disable-shared \\\n        --enable-static \\\n        --disable-lto \\\n        --disable-plugins \\\n        --disable-multilib \\\n        --disable-nls \\\n        --disable-werror \\\n        --with-system-zlib \\\n    && make -j`nproc` \\\n    && make install \\\n    && cd ..\n\nRUN set -ex \\\n    && mkdir mingw-w64 \\\n    && cd mingw-w64 \\\n    && ../mingw-w64-v${MINGW_VERSION}/mingw-w64-headers/configure \\\n        --prefix=/usr/local/x86_64-w64-mingw32 \\\n        --host=x86_64-w64-mingw32 \\\n        --enable-sdk=all \\\n        --enable-secure-api \\\n    && make install \\\n    && cd ..\n\nRUN set -ex \\\n    && mkdir gcc \\\n    && cd gcc \\\n    && ../gcc-${GCC_VERSION}/configure \\\n        --prefix=/usr/local \\\n        --target=x86_64-w64-mingw32 \\\n        --enable-languages=c,c++ \\\n        --disable-shared \\\n        --enable-static \\\n        --enable-threads=win32 \\\n        --with-system-zlib \\\n        --enable-libgomp \\\n        --enable-libatomic \\\n        --enable-graphite \\\n        --disable-libstdcxx-pch \\\n        --disable-libstdcxx-debug \\\n        --disable-multilib \\\n        --disable-lto \\\n        --disable-nls \\\n        --disable-werror \\\n    && make -j`nproc` all-gcc \\\n    && make install-gcc \\\n    && cd ..\n\nRUN set -ex \\\n    && cd mingw-w64 \\\n    && ../mingw-w64-v${MINGW_VERSION}/mingw-w64-crt/configure \\\n        --prefix=/usr/local/x86_64-w64-mingw32 \\\n        --host=x86_64-w64-mingw32 \\\n        --enable-wildcard \\\n        --disable-lib32 \\\n        --enable-lib64 \\\n    && make -j`nproc` \\\n    && make install \\\n    && cd ..\n\nRUN set -ex \\\n    && cd mingw-w64 \\\n    && ../mingw-w64-v${MINGW_VERSION}/mingw-w64-libraries/winpthreads/configure \\\n        --prefix=/usr/local/x86_64-w64-mingw32 \\\n        --host=x86_64-w64-mingw32 \\\n        --enable-static \\\n        --disable-shared \\\n    && make -j`nproc` \\\n    && make install \\\n    && cd ..\n\nRUN set -ex \\\n    && cd gcc \\\n    && make -j`nproc` \\\n    && make install \\\n    && cd ..\n\nRUN set -ex \\\n    && cd nasm-${NASM_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n    && make -j`nproc` \\\n    && make install \\\n    && cd ..\n\nRUN set -ex \\\n    && rm -r pkg-config-${PKG_CONFIG_VERSION} \\\n    && rm -r cmake-${CMAKE_VERSION} \\\n    && rm -r binutils-${BINUTILS_VERSION} \\\n    && rm -r mingw-w64 mingw-w64-v${MINGW_VERSION} \\\n    && rm -r gcc gcc-${GCC_VERSION} \\\n    && rm -r nasm-${NASM_VERSION} \\\n    \\\n    && apt-get remove --purge -y file gcc-10 g++-10 zlib1g-dev libssl-dev libgmp-dev libmpfr-dev libmpc-dev libisl-dev python-lxml python-mako \\\n    \\\n    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub \\\n    && echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /\" > /etc/apt/sources.list.d/cuda.list \\\n    && apt-get update \\\n    \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n        cuda-nvcc-${NVCC_VERSION:0:2}-${NVCC_VERSION:3:1} \\\n    \\\n    && ln -s /usr/local/cuda-${NVCC_VERSION:0:2}.${NVCC_VERSION:3:1} /usr/local/cuda \\\n    && ln -s /usr/bin/gcc-9 /usr/local/cuda/bin/gcc \\\n    && ln -s /usr/bin/g++-9 /usr/local/cuda/bin/g++ \\\n    \\\n    && apt-get remove --purge -y gnupg \\\n    && apt-get autoremove --purge -y \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n### -- End of MingW64 setup taken over from mmozeiko/mingw-w64 --- #######\n\n\n### MacOS ################################################################\n\n# Install OS X cross-compiling toolchain (clang).\nRUN apt-get install -y --no-install-recommends git sudo clang llvm-dev libxml2-dev uuid-dev libssl-dev bash patch make tar xz-utils bzip2 gzip sed cpio libbz2-dev zlib1g-dev && apt-get clean && rm -rf /var/lib/apt/lists/*;\n#Build arguments\nARG OSXCROSS_REPO=\"tpoechtrager/osxcross\"\nARG DARWIN_SDK_VERSION=\"12.0\"\nARG DARWIN_SDK_PATH=\"MacOSX${DARWIN_SDK_VERSION}.sdk.tar.xz\"\nARG DARWIN_TOOLCHAIN=\"x86_64-apple-darwin21.1\"\n\n# ENV available in docker image\nENV CROSSBUILD=1 \\\n    OSX_SDK_PATH=\"/usr/osxcross/SDK/MacOSX${DARWIN_SDK_VERSION}.sdk\" \\\n    OSX_TOOLCHAIN_PREFIX=${DARWIN_TOOLCHAIN}\n\n# Clone the OSXCross repo, latest master\nRUN git clone 'https://github.com/tpoechtrager/osxcross' /tmp/osxcross\n\n# Copy the _provided_ MacOS SDK into the image as a tar ball (don't unpack yet! osxcross build.sh will do that later)\nCOPY ${DARWIN_SDK_PATH} /tmp/osxcross/tarballs/\n\n# Build OSXCross\nRUN cd /tmp/osxcross \\\n && UNATTENDED=1 JOBS=4 SDK_VERSION=${DARWIN_SDK_VERSION} ./build.sh \\\n && mv target /usr/osxcross \\\n && mv tools /usr/osxcross/ \\\n && sudo ldconfig /usr/osxcross/lib \\\n && rm -rf \"${OSX_SDK_PATH}/usr/share/man\" \\\n && rm -rf \"/tmp/osxcross\" \\\n && true\n\n\n### Linux ################################################################\n\n# Install Linux toolchain (GCC) including CMake\nRUN apt-get install -y --no-install-recommends \\\n        build-essential ninja-build \\\n        sudo bash coreutils curl \\\n        libcurl4-openssl-dev freeglut3-dev libudev-dev libopenal-dev \\\n && apt-get clean \\\n# && curl -sSL https://github.com/Kitware/CMake/releases/download/v3.19.2/cmake-3.19.2-Linux-x86_64.tar.gz | tar -xz -C /usr/local/ --strip-components=1 \\\n && true && rm -rf /var/lib/apt/lists/*;\n\n\n### CURL #################################################################\n\n# Download and build libCURL (in a limited version for our purposes: static only for HTTP and FTP)\nRUN apt-get install -y --no-install-recommends curl \\\n && mkdir /tmp/build-curl \\\n && cd /tmp/build-curl \\\n && curl -f -sSL https://curl.se/download/curl-7.74.0.tar.gz | tar -xz -C . --strip-components=1 && rm -rf /var/lib/apt/lists/*;\nARG MY_CURL_OPT=\"--enable-static --disable-shared --enable-optimize --without-zlib --enable-http --enable-ipv6 --disable-dict --disable-file --disable-gopher --disable-imap --disable-ldap --disable-mqtt --disable-pop3 --disable-rtsp --disable-smtp --disable-telnet\"\nARG WIN_TOOLCHAIN_PREFIX=\"x86_64-w64-mingw32\"\n\n# --- Mingw64 (Windows) ---\nRUN cd /tmp/build-curl \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=${WIN_TOOLCHAIN_PREFIX} --prefix=/usr/${WIN_TOOLCHAIN_PREFIX} --exec-prefix=/usr/${WIN_TOOLCHAIN_PREFIX} --disable-pthreads --with-winssl ${MY_CURL_OPT} \\\n # install header files\n && cd include \\\n && make install \\\n # make and install libcurl\n && cd ../lib \\\n && make \\\n && make install \\\n # remove the temporary build directory\n && cd / \\\n && rm -Rf /tmp/build-curl \\\n && true\n\n### Add OSXCross and Mingw paths\nENV PATH=\"${PATH}:/usr/osxcross/bin\" \\\n    MINGW_TOOLCHAIN_PREFIX=\"x86_64-w64-mingw32\" \\\n    MINGW_PATH=\"/usr/x86_64-w64-mingw32\"\nRUN sudo ldconfig /usr/osxcross/lib\n\n### User / Entrypoint ####################################################expor\n\n# Add essential users to the docker image\nRUN apt-get install -y --no-install-recommends sudo && apt-get clean \\\n && echo \"\" | adduser --uid 1000 --disabled-password  --gecos \"\" xpbuild && adduser xpbuild sudo \\\n && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && rm -rf /var/lib/apt/lists/*;\n\nVOLUME /build\nUSER xpbuild\nADD build.sh /usr/bin/build.sh\n\n# Entrypoint is the build.sh script, which takes care of actual building\nWORKDIR /build\nENTRYPOINT [\"build.sh\"]\n"
}