{
  "startTime": 1674253284846,
  "endTime": 1674253287209,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 40,
        "columnEnd": 120
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 287,
        "lineEnd": 287,
        "columnStart": 4,
        "columnEnd": 184
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 305,
        "lineEnd": 305,
        "columnStart": 4,
        "columnEnd": 342
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 324,
        "lineEnd": 324,
        "columnStart": 4,
        "columnEnd": 370
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 21,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 284,
        "lineEnd": 284,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 302,
        "lineEnd": 302,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 321,
        "lineEnd": 321,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 18,
        "columnEnd": 65
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG TEST_BASE_TYPE=alpine\nARG TEST_BASE_IMAGE=${TEST_BASE_TYPE}\nARG TEST_WITH_DARWIN=false\n\nARG SHADOW_VERSION=4.8.1\n\nFROM --platform=$BUILDPLATFORM alpine AS scripts\nCOPY xx-* /out/\nRUN ln -s xx-cc /out/xx-clang && \\\n    ln -s xx-cc /out/xx-clang++ && \\\n    ln -s xx-cc /out/xx-c++ && \\\n    ln -s xx-apt /out/xx-apt-get\n\nFROM scratch AS base\nCOPY --from=scripts /out/ /usr/bin/\n\nFROM --platform=$BUILDPLATFORM tonistiigi/bats-assert AS assert\n\nFROM ${TEST_BASE_IMAGE} AS test-base-alpine\nRUN --mount=type=cache,target=/pkg-cache \\\n    ln -s /pkg-cache /etc/apk/cache && \\\n    apk add --no-cache bats vim\nWORKDIR /work\n\nFROM ${TEST_BASE_IMAGE} AS test-base-debian\nRUN --mount=type=cache,target=/pkg-cache \\\n    rm -rf /var/cache/apt/archives && \\\n    ln -s /pkg-cache /var/cache/apt/archives && \\\n    rm /etc/apt/apt.conf.d/docker-clean && \\\n    echo 'Binary::apt::APT::Keep-Downloaded-Packages \"1\";' > /etc/apt/apt.conf.d/keep-downloads && \\\n    apt update && apt install --no-install-recommends -y bats vim && rm -rf /var/lib/apt/lists/*;\nWORKDIR /work\n\nFROM ${TEST_BASE_IMAGE} AS test-base-rhel\nRUN <<EOT\nset -ex\nif ! yum install -y epel-release; then\n  if . /etc/os-release 2>/dev/null; then\n    if [ \"$ID\" != \"fedora\" ]; then\n      yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-${VERSION:0:1}.noarch.rpm\n    fi\n  fi\nfi\nEOT\nRUN --mount=type=cache,target=/pkg-cache \\\n    rm -rf /var/cache/yum && \\\n    ln -s /pkg-cache /var/cache/yum && \\\n    yum update -y && yum -y install bats vim && rm -rf /var/cache/yum\nWORKDIR /work\n\nFROM test-base-${TEST_BASE_TYPE} AS test\nCOPY --from=assert . .\nCOPY --from=base / /\nCOPY fixtures fixtures\nCOPY test-*.bats test_helper.bash .\nARG TEST_BASE_TYPE\nARG TEST_CMDS\nRUN [ \"${TEST_CMDS:-info}\" = \"${TEST_CMDS#*info}\" ] && exit 0; ./test-info-common.bats && ./test-info-$(echo $TEST_BASE_TYPE | cut -d: -f1).bats\nRUN --mount=type=cache,target=/pkg-cache \\\n    [ \"${TEST_CMDS:-windres}\" = \"${TEST_CMDS#*windres}\" ] && exit 0; ./test-windres.bats\nRUN --mount=type=cache,target=/pkg-cache \\\n    [ \"${TEST_CMDS:-apk}\" = \"${TEST_CMDS#*apk}\" ] && exit 0; [ ! -f /etc/alpine-release ] || ./test-apk.bats\nRUN --mount=type=cache,target=/pkg-cache \\\n    [ \"${TEST_CMDS:-apt}\" = \"${TEST_CMDS#*apt}\" ] && exit 0; [ ! -f /etc/debian_version ] || ./test-apt.bats\nRUN --mount=type=cache,target=/pkg-cache \\\n    [ \"${TEST_CMDS:-verify}\" = \"${TEST_CMDS#*verify}\" ] && exit 0; ./test-verify.bats\nRUN --mount=type=cache,target=/pkg-cache \\\n    [ \"${TEST_CMDS:-clang}\" = \"${TEST_CMDS#*clang}\" ] && exit 0; ./test-clang.bats\nRUN --mount=type=cache,target=/pkg-cache \\\n    --mount=target=/root/.cache,type=cache \\\n    [ \"${TEST_CMDS:-golang}\" = \"${TEST_CMDS#*golang}\" ] && exit 0; ./test-go.bats\n\nFROM --platform=${BUILDPLATFORM} alpine AS libtapi-base\nRUN apk add --no-cache git clang lld cmake make python3 bash\nCOPY --from=base / /\nARG LIBTAPI_VERSION=1100.0.11\nRUN git clone https://github.com/tpoechtrager/apple-libtapi --depth 1 -b ${LIBTAPI_VERSION}\nWORKDIR ./apple-libtapi\nRUN --mount=target=/tmp/libtapi-cmake-args.patch,source=libtapi-cmake-args.patch \\\n    git apply /tmp/libtapi-cmake-args.patch\nRUN apk add --no-cache gcc g++\nRUN NOMAKE=1 CMAKE_EXTRA_ARGS=\"$(xx-clang --print-cmake-defines)\" ./build.sh && \\\n    cd build && \\\n    make -j $(nproc) clang-tblgen llvm-tblgen && \\\n    cp -a bin/clang-tblgen bin/llvm-tblgen /usr/bin/ && \\\n    cd .. && rm -rf build\n\nFROM libtapi-base AS libtapi\nARG TARGETPLATFORM\nRUN xx-apk add g++\nRUN INSTALLPREFIX=/opt/libtapi/ \\\n    CMAKE_EXTRA_ARGS=\"-DCLANG_TABLEGEN_EXE=/usr/bin/clang-tblgen -DLLVM_TABLEGEN=/usr/bin/llvm-tblgen -DCLANG_TABLEGEN=/usr/bin/clang-tblgen $(xx-clang --print-cmake-defines)\" \\\n    ./build.sh && ./install.sh && \\\n    xx-verify /opt/libtapi/lib/libtapi.so && \\\n    rm -rf build\n\nFROM libtapi-base AS libtapi-static\nARG TARGETPLATFORM\nRUN xx-apk add g++\nRUN export INSTALLPREFIX=/opt/libtapi/ \\\n    CMAKE_EXTRA_ARGS=\"-DCLANG_TABLEGEN_EXE=/usr/bin/clang-tblgen -DLLVM_TABLEGEN=/usr/bin/llvm-tblgen -DCLANG_TABLEGEN=/usr/bin/clang-tblgen $(xx-clang --print-cmake-defines)\" \\\n    && sed -i s/SHARED/STATIC/g src/llvm/projects/libtapi/tools/libtapi/CMakeLists.txt && \\\n    ./build.sh && cd build && make -j $(nproc) LLVMObject tapiCore LLVMSupport LLVMDemangle LLVMMC LLVMBinaryFormat install-tapi-headers && mkdir /opt/libtapi/lib && cp -a ./lib/*.a /opt/libtapi/lib/ && \\\n    cd .. && rm -rf build\n    #xx-verify --static ./build/lib/libtapi.a\n\n#FROM --platform=${BUILDPLATFORM} tonistiigi/xx:binutils-2.36.1-${TARGETOS}-${TARGETARCH}${TARGETVARIANT}-alpine AS binutils-release\n\nFROM --platform=${BUILDPLATFORM} alpine AS cctools-base\nRUN apk add --no-cache git clang lld make llvm\nCOPY --from=base / /\nWORKDIR /work\nARG CCTOOLS_REPO=https://github.com/tpoechtrager/cctools-port\nARG CCTOOLS_VERSION=949.0.1-ld64-530\nRUN git clone $CCTOOLS_REPO -b ${CCTOOLS_VERSION}\nWORKDIR ./cctools-port/cctools\nARG TARGETPLATFORM\nRUN xx-apk add --no-cache musl-dev gcc g++\n\nFROM cctools-base AS lipo-base\nARG LIPO_CFLAGS=\"-Wl,-s -Os\"\nRUN export CFLAGS=${LIPO_CFLAGS} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=$(xx-clang --print-target-triple) LDFLAGS=--static && \\\n    make -C libmacho && make -C libstuff && make -C misc lipo && \\\n    xx-verify --static misc/lipo\n\nFROM scratch AS lipo-static\nCOPY --from=lipo-base /work/cctools-port/cctools/misc/lipo /\n\nFROM cctools-base AS codesign-base\nARG CODESIGN_CFLAGS=\"-Wl,-s -Os\"\nRUN export CFLAGS=${CODESIGN_CFLAGS} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=$(xx-clang --print-target-triple) LDFLAGS=--static && \\\n    make -C libmacho && make -C libstuff && make -C misc codesign_allocate && \\\n    xx-verify --static misc/codesign_allocate\n\nFROM scratch AS codesign-static\nCOPY --from=codesign-base /work/cctools-port/cctools/misc/codesign_allocate /\n\nFROM cctools-base AS otool-base\nARG OTOOL_CFLAGS=\"-Wl,-s -Os\"\nRUN export CFLAGS=${OTOOL_CFLAGS} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=$(xx-clang --print-target-triple) LDFLAGS=--static && \\\n    make -C libstuff && make -C libobjc2 && make -C otool && \\\n    xx-verify --static otool/otool\n\nFROM scratch AS otool-static\nCOPY --from=otool-base /work/cctools-port/cctools/otool/otool /\n\nFROM cctools-base AS ld64-static-base\n# for LTO\nRUN apk add --no-cache llvm-dev\nARG LD64_CXXFLAGS=\"-Wl,-s -Os\"\nRUN --mount=from=libtapi-static,source=/opt/libtapi,target=/opt/libtapi \\\n    export CXXFLAGS=${LD64_CXXFLAGS} && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-libtapi=/opt/libtapi --host=$(xx-clang --print-target-triple) && \\\n    sed -i 's/-ltapi/-ltapi -ltapiCore -lLLVMObject -lLLVMSupport -lLLVMDemangle -lLLVMMC -lLLVMBinaryFormat --static/' ld64/src/ld/Makefile && \\\n    make -j $(nproc) -C ld64 && \\\n    xx-verify --static ld64/src/ld/ld\n\n\nFROM scratch AS ld64-static\nCOPY --from=ld64-static-base /work/cctools-port/cctools/ld64/src/ld/ld /ld64\n\nFROM cctools-base AS cctools-build\n# for LTO\nRUN apk add --no-cache llvm-dev\nARG CCTOOLS_CXXFLAGS=\"-Wl,-s -Os\"\nARG CCTOOLS_CFLAGS=\"-Wl,-s -Os\"\nRUN --mount=from=libtapi,source=/opt/libtapi,target=/opt/libtapi \\\n\n    cp -a /opt/libtapi/. /usr/ && \\ \n    export CFLAGS=${CCTOOLS_CFLAGS} CXXFLAGS=${CCTOOLS_CXXFLAGS} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/cctools --with-libtapi=/opt/libtapi --host=$(xx-clang --print-target-triple) && \\\n    make -j $(nproc) install && \\\n    xx-verify /opt/cctools/bin/ld\n\nFROM scratch AS cctools\nCOPY --from=libtapi /opt/libtapi/lib/*.so /usr/lib/\nCOPY --from=cctools-build /opt/cctools /usr\n\nFROM --platform=${BUILDPLATFORM} alpine AS sigtool-base\nRUN apk add --no-cache git clang lld cmake make pkgconf\nCOPY --from=base / /\nWORKDIR /work\nRUN git clone https://github.com/CLIUtils/CLI11 && \\\n    cd CLI11 && \\\n    cp -a include/CLI /usr/include/ && \\\n    cd .. && rm -rf CLI11\nARG SIGTOOL_VERSION=1dafd2ca4651210ba9acce10d279ace22b50fb01\nRUN git clone https://github.com/thefloweringash/sigtool && \\\n    cd sigtool && \\\n    git checkout ${SIGTOOL_VERSION}\nWORKDIR ./sigtool\nRUN --mount=target=/tmp/sigtool-static.patch,source=sigtool-static.patch \\\n    git apply /tmp/sigtool-static.patch\nARG TARGETPLATFORM\nRUN xx-apk add --no-cache g++ openssl-dev openssl-libs-static\nARG SIGTOOL_CXXFLAGS=\"-Wl,-s -Os\"\nRUN if xx-info is-cross; then cp -a /usr/include/CLI /$(xx-info triple)/usr/include/; fi && \\ \n    export CXXFLAGS=${SIGTOOL_CXXFLAGS} && \\\n    mkdir build && cd build && \\\n    cmake $(xx-clang --print-cmake-defines) -DCMAKE_EXE_LINKER_FLAGS=-static .. && \\\n    make -j $(nproc) && \\\n    xx-verify --static ./gensig\n\nFROM scratch AS sigtool\nCOPY --from=codesign-static / /\nCOPY --from=sigtool-base /work/sigtool/build/gensig /sigtool-gensig\n\nFROM --platform=darwin/amd64 tonistiigi/osxcross:xx-sdk-11.1 AS sdk-extras-darwin-amd64\nFROM tonistiigi/osxcross:xx-sdk-11.1 AS sdk-extras-darwin\n\nFROM --platform=$BUILDPLATFORM alpine AS extras-base\nRUN mkdir --p /out/Files/xx-sdk /out/xx-sdk\n\nFROM scratch AS sdk-extras-linux\nCOPY --from=extras-base /out/Files /xx-sdk\n\nFROM scratch AS sdk-extras-windows\nCOPY --from=extras-base /out /\n\nFROM sdk-extras-linux AS sdk-extras-freebsd\n\nFROM sdk-extras-${TARGETOS} AS sdk-extras\n\nFROM scratch AS ld64-signed-static\nCOPY --from=ld64-static / /\nCOPY --from=sigtool / /\nCOPY ld64.signed /\n\nFROM --platform=$BUILDPLATFORM alpine AS ld64-tgz-build\nWORKDIR /work\nARG TARGETOS TARGETARCH TARGETVARIANT\nRUN --mount=from=ld64-signed-static \\\n    mkdir /out-tgz && tar cvzf /out-tgz/ld64-signed-$TARGETOS-$TARGETARCH$TARGETVARIANT.tar.gz *\n\nFROM scratch AS ld64-tgz\nCOPY --from=ld64-tgz-build /out-tgz/ /\n\nFROM test-base-${TEST_BASE_TYPE} AS test-base-darwintrue\nCOPY --from=sdk-extras-darwin-amd64 / /\n\nFROM test-base-${TEST_BASE_TYPE} AS test-base-darwinfalse\n\nFROM test-base-darwin${TEST_WITH_DARWIN} AS dev\nCOPY fixtures fixtures\nCOPY --from=base / /\n\n# newuidmap & newgidmap binaries (shadow-uidmap 4.7-r1) shipped with alpine cannot be executed without CAP_SYS_ADMIN,\n# because the binaries are built without libcap-dev.\n# So we need to build the binaries with libcap enabled.\nFROM --platform=$BUILDPLATFORM alpine AS idmap\nRUN apk add --no-cache git autoconf automake clang lld gettext-dev libtool make byacc binutils\nCOPY --from=base / /\nARG SHADOW_VERSION\nRUN git clone https://github.com/shadow-maint/shadow.git /shadow && cd /shadow && git checkout $SHADOW_VERSION\nWORKDIR /shadow\nARG TARGETPLATFORM\nRUN xx-apk add --no-cache musl-dev gcc libcap-dev\nRUN CC=$(xx-clang --print-target-triple)-clang ./autogen.sh --disable-nls --disable-man --without-audit --without-selinux --without-acl --without-attr --without-tcb --without-nscd --host $(xx-clang --print-target-triple) \\\n  && make -j $(nproc) \\\n  && xx-verify src/newuidmap src/newuidmap \\\n  && cp src/newuidmap src/newgidmap /usr/bin\n\nFROM scratch AS idmap-binaries\nCOPY --from=idmap /usr/bin/newuidmap /usr/bin/newgidmap /\n\nFROM --platform=$BUILDPLATFORM alpine AS binutils-base0\nRUN apk add --no-cache git clang lld zlib-dev gcc patch make musl-dev\nWORKDIR /work\n# BINUTILS_PATCHES_VERSION defines version of aports to use for patches\nARG BINUTILS_PATCHES_VERSION=3.13-stable\nRUN git clone --depth 1 -b ${BINUTILS_PATCHES_VERSION} https://github.com/alpinelinux/aports.git && \\\n    mkdir patches && \\\n    cp -a aports/main/binutils/*.patch patches/ && \\\n    rm -rf aports\nCOPY --from=base / /\nARG BINUTILS_VERSION=2.36.1\nRUN wget https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VERSION}.tar.gz\nARG TARGETPLATFORM\n# first build version for current architecture that is used then cross compiling\nRUN export CC=xx-clang CXX=xx-clang++ LD=lld BINUTILS_TARGET=${TARGETPLATFORM} && unset TARGETPLATFORM && \\\n    tar xf binutils-${BINUTILS_VERSION}.tar.gz && \\\n    cd binutils-${BINUTILS_VERSION} && \\\n    for f in ../patches/*; do patch -p1 < $f; done && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-separate-code --libdir=/lib --prefix=/usr --disable-multilib --enable-deterministic-archives --target=$(TARGETPLATFORM=$BINUTILS_TARGET xx-info) --disable-nls && \\\n    make -j $(nproc) && \\\n    make install && \\\n    cd .. && rm -rf binutils-${BINUTILS_VERSION} && rm binutils-${BINUTILS_VERSION}.tar.gz\n\nRUN xx-apk add --no-cache musl-dev gcc g++ zlib-dev\nFROM binutils-base0 AS binutils-base\nARG TARGETOS TARGETARCH TARGETVARIANT\n# BINUTILS_TARGET defines platform that binutils binaries will target when run\nARG BINUTILS_TARGET=${TARGETOS}-${TARGETARCH}${TARGETVARIANT}\n# BINUTILS_CFLAGS defines C compiler flags when building binutils\nARG BINUTILS_CFLAGS=\"-Wl,-s -Os\"\n# BINUTILS_CONFIG defines extra options passed to binutils configure script\nARG BINUTILS_CONFIG=\nRUN export CC=xx-clang CXX=xx-clang++ CFLAGS=\"$BINUTILS_CFLAGS\" CXXFLAGS=\"$BINUTILS_CFLAGS\" && \\\n    tar xf binutils-${BINUTILS_VERSION}.tar.gz && \\\n    cd binutils-${BINUTILS_VERSION} && \\\n    for f in ../patches/*; do patch -p1 < $f; done && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-separate-code --libdir=/lib --prefix=/out --disable-multilib --enable-deterministic-archives --target=$(TARGETPLATFORM= TARGETPAIR=$BINUTILS_TARGET xx-info) --host $(xx-clang --print-target-triple) --disable-nls --enable-gold --enable-relro --enable-plugins --with-pic --with-mmap --with-system-zlib $BINUTILS_CONFIG && \\\n    make -j $(nproc) && \\\n    make install && \\\n    cd .. && rm -rf binutils-${BINUTILS_VERSION} && \\\n    for f in /out/bin/*; do xx-verify $f; done && rm binutils-${BINUTILS_VERSION}.tar.gz\n\nFROM binutils-base0 AS ld-base\nRUN xx-apk add --no-cache zlib-static\nARG TARGETOS TARGETARCH TARGETVARIANT\n# LD_TARGET defines platform that binutils binaries will target when run\nARG LD_TARGET=${TARGETOS}-${TARGETARCH}${TARGETVARIANT}\n# LD_CFLAGS defines C compiler flags when building binutils\nARG LD_CFLAGS=\"-Wl,-s -Os\"\n# BINUTILS_CONFIG defines extra options passed to binutils configure script\nARG BINUTILS_CONFIG=\nRUN export CC=xx-clang CXX=xx-clang++ CFLAGS=\"$LD_CFLAGS --static\" CXXFLAGS=\"$LD_CFLAGS\" LD_TARGET_TRIPLE=$(TARGETPLATFORM= TARGETPAIR=$LD_TARGET xx-info) XX_CC_PREFER_LINKER=ld && \\\n    tar xf binutils-${BINUTILS_VERSION}.tar.gz && \\\n    cd binutils-${BINUTILS_VERSION} && \\\n    for f in ../patches/*; do patch -p1 < $f; done && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-separate-code --libdir=/lib --prefix=/ --disable-multilib --enable-deterministic-archives --target=$LD_TARGET_TRIPLE --host $(xx-clang --print-target-triple) --disable-nls --disable-gold --enable-relro --disable-plugins --with-pic --with-mmap --with-system-zlib --disable-gas --disable-elfcpp --disable-binutils --disable-gprof $BINUTILS_CONFIG && \\\n    make -j $(nproc) && \\\n    make install && \\\n    cd .. && rm -rf binutils-${BINUTILS_VERSION} && \\\n    xx-verify --static /$LD_TARGET_TRIPLE/bin/ld && \\\n    mkdir -p /out && mv /$LD_TARGET_TRIPLE/bin/ld /out/$LD_TARGET-ld && \\\n    mkdir -p /out/ldscripts && mv /$LD_TARGET_TRIPLE/lib/ldscripts/* /out/ldscripts/ && rm binutils-${BINUTILS_VERSION}.tar.gz\n\nFROM ld-base AS ld-tgz-base\nARG TARGETOS TARGETARCH TARGETVARIANT\nARG LD_TARGET\nWORKDIR /out\nRUN mkdir /out-tgz && tar cvzf /out-tgz/$LD_TARGET-ld-$TARGETOS-$TARGETARCH$TARGETVARIANT.tar.gz *\n\nFROM scratch AS ld-static\nCOPY --from=ld-base /out /\n\nFROM scratch AS ld-static-tgz\nCOPY --from=ld-tgz-base /out-tgz/ /\n\nFROM --platform=$BUILDPLATFORM alpine AS compiler-rt-build\nRUN apk add --no-cache git cmake clang lld make ninja python3 llvm\nWORKDIR /work\nCOPY --from=base / /\nARG LLVM_VERSION=llvmorg-11.0.1\nRUN git clone --depth 1 -b ${LLVM_VERSION} https://github.com/llvm/llvm-project.git\nWORKDIR llvm-project/compiler-rt\nARG TARGETPLATFORM\nRUN xx-apk add gcc g++\nRUN mkdir build && cd build && \\\n    cmake $(xx-clang --print-cmake-defines) -DCOMPILER_RT_BUILD_SANITIZERS=OFF -DCOMPILER_RT_BUILD_XRAY=OFF -DCOMPILER_RT_BUILD_LIBFUZZER=OFF -DCOMPILER_RT_BUILD_PROFILE=OFF -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON -DCMAKE_SYSTEM_NAME=$(xx-info os | awk '{print toupper(substr($0,0,1))tolower(substr($0,2))}') -DCMAKE_LIPO=/usr/bin/llvm-lipo -G Ninja .. && \\\n    ninja && mkdir /out && cp -a lib/linux /out/ && \\\n    cd .. && rm -rf build\n\nFROM scratch AS compiler-rt\nCOPY --from=compiler-rt-build /out /usr/lib/clang/compiler-rt/\n\nFROM --platform=$BUILDPLATFORM alpine AS libcxx-build\nRUN apk add --no-cache git cmake clang lld make ninja python3 binutils\nWORKDIR /work\nCOPY --from=base / /\nARG LLVM_VERSION=llvmorg-11.0.1\nRUN git clone --depth 1 -b ${LLVM_VERSION} https://github.com/llvm/llvm-project.git\nWORKDIR llvm-project/libcxx\nARG LIBCXX_TARGET\nENV TARGETPLATFORM=${LIBCXX_TARGET}\nRUN xx-apk -v add gcc g++ linux-headers\nRUN mkdir build && cd build && \\\n    cmake $(xx-clang --print-cmake-defines) -DLIBCXX_HAS_MUSL_LIBC=ON -G Ninja .. && \\\n    ninja && mkdir /out && cp -a lib/libc++* /out/ && \\\n    xx-verify /out/libc++.so && \\\n    cd .. && rm -rf build\n\nFROM scratch AS libcxx\nCOPY --from=libcxx-build /out /usr/lib/\n\nFROM scratch AS binutils\nCOPY --from=binutils-base /out /usr/\n\nFROM base\n"
}