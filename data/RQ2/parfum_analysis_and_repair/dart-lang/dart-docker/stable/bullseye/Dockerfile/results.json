{
  "startTime": 1674251810390,
  "endTime": 1674251811133,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 73,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:bullseye-slim\n\nRUN set -eux; \\\n    apt-get update; \\\n    apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        curl \\\n        dnsutils \\\n        git \\\n        openssh-client \\\n        unzip \\\n    ; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Create a minimal runtime environment for executing AOT-compiled Dart code\n# with the smallest possible image size.\n# usage: COPY --from=dart:xxx /runtime/ /\n# uses hard links here to save space\nRUN set -eux; \\\n    case \"$(dpkg --print-architecture)\" in \\\n        amd64) \\\n            TRIPLET=\"x86_64-linux-gnu\" ; \\\n            FILES=\"/lib64/ld-linux-x86-64.so.2\" ;; \\\n        armhf) \\\n            TRIPLET=\"arm-linux-gnueabihf\" ; \\\n            FILES=\"/lib/ld-linux-armhf.so.3 \\\n                /lib/arm-linux-gnueabihf/ld-linux-armhf.so.3\";; \\\n        arm64) \\\n            TRIPLET=\"aarch64-linux-gnu\" ; \\\n            FILES=\"/lib/ld-linux-aarch64.so.1 \\\n                /lib/aarch64-linux-gnu/ld-linux-aarch64.so.1\" ;; \\\n        *) \\\n            echo \"Unsupported architecture\" ; \\\n            exit 5;; \\\n    esac; \\\n    FILES=\"$FILES \\\n        /etc/nsswitch.conf \\\n        /etc/ssl/certs \\\n        /usr/share/ca-certificates \\\n        /lib/$TRIPLET/libc.so.6 \\\n        /lib/$TRIPLET/libdl.so.2 \\\n        /lib/$TRIPLET/libm.so.6 \\\n        /lib/$TRIPLET/libnss_dns.so.2 \\\n        /lib/$TRIPLET/libpthread.so.0 \\\n        /lib/$TRIPLET/libresolv.so.2 \\\n        /lib/$TRIPLET/librt.so.1\"; \\\n    for f in $FILES; do \\\n        dir=$(dirname \"$f\"); \\\n        mkdir -p \"/runtime$dir\"; \\\n        cp --archive --link --dereference --no-target-directory \"$f\" \"/runtime$f\"; \\\n    done\n\nENV DART_SDK /usr/lib/dart\nENV PATH $DART_SDK/bin:$PATH\n\nWORKDIR /root\nRUN set -eux; \\\n    case \"$(dpkg --print-architecture)\" in \\\n        amd64) \\\n            DART_SHA256=f837f385603a1cfb14ddb7dd0cd64820b297646626bdb689ccfc3278fa83b2b1; \\\n            SDK_ARCH=\"x64\";; \\\n        armhf) \\\n            DART_SHA256=3eae7ed5773c125165d123a235bac9956981cfdf164059806ed69a6feefc1eda; \\\n            SDK_ARCH=\"arm\";; \\\n        arm64) \\\n            DART_SHA256=8e71b0c958a587c83ecd6c8cc637bc624bb85bc64e877e9ea00831a659a904b1; \\\n            SDK_ARCH=\"arm64\";; \\\n    esac; \\\n    SDK=\"dartsdk-linux-${SDK_ARCH}-release.zip\"; \\\n    BASEURL=\"https://storage.googleapis.com/dart-archive/channels\"; \\\n    URL=\"$BASEURL/stable/release/2.17.6/sdk/$SDK\"; \\\n    echo \"SDK: $URL\" >> dart_setup.log ; \\\n    curl -fLO \"$URL\"; \\\n    echo \"$DART_SHA256  *$SDK\" \\\n        | sha256sum --check --status --strict -; \\\n    unzip \"$SDK\" && mv dart-sdk \"$DART_SDK\" && rm \"$SDK\" \\\n        && chmod 755 \"$DART_SDK\" && chmod 755 \"$DART_SDK/bin\";\n"
}