{
  "startTime": 1674253017869,
  "endTime": 1674253018823,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "gemUpdateNoDocument",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gemUpdateNoDocument",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:3-slim-bullseye@sha256:fd04845e99c1370b5bd56e0c703cdd4f8d20e7f896ec122a1b5b51d4da66c7aa as base\n\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=US/Pacific\nRUN apt update && apt install -yq --no-install-recommends \\\n      build-essential \\\n      ca-certificates \\\n      curl \\\n      git \\\n      lsof \\\n      make \\\n      unzip \\\n      vim-nox \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN echo \"alias lla='ls -lAhG --color=auto'\" >> ~/.bashrc\nWORKDIR /root\n\n\n# google-chrome-stable\n\n\n# ============== DART ==============\n# See https://github.com/dart-lang/dart-docker\n# See https://github.com/dart-lang/setup-dart/blob/main/setup.sh\nFROM base as dart\nARG DART_VERSION=latest\nARG DART_CHANNEL=stable\nENV DART_VERSION=$DART_VERSION\nENV DART_CHANNEL=$DART_CHANNEL\nENV DART_SDK=/usr/lib/dart\nENV PATH=$DART_SDK/bin:$PATH\nRUN set -eu; \\\n    case \"$(dpkg --print-architecture)_${DART_CHANNEL}\" in \\\n      amd64_stable) \\\n        DART_SHA256=\"0052467a23ec8d46523be0f29263881444e0da3228860eb6b69de0859aca2459\"; \\\n        SDK_ARCH=\"x64\";; \\\n      arm64_stable) \\\n        DART_SHA256=\"0482ba914c7e9befc67d1ff0057bfcae354d6cfeb0d4716f1ff44623089a2688\"; \\\n        SDK_ARCH=\"arm64\";; \\\n      amd64_beta) \\\n        DART_SHA256=\"dc57e88d3c60cbd5ee738505fed804d854bfb1b30bdff9f218bb1d1085ec8173\"; \\\n        SDK_ARCH=\"x64\";; \\\n      arm64_beta) \\\n        DART_SHA256=\"99c787a521458e6fd3d402bff47f4b4c47c5ad32727f9b3a204310fc25e3b14a\"; \\\n        SDK_ARCH=\"arm64\";; \\\n      amd64_dev) \\\n        DART_SHA256=\"3187061143462a1dd5c20748778f3ffa6863db570a1863c667fd5c5ad685fcf5\"; \\\n        SDK_ARCH=\"x64\";; \\\n      arm64_dev) \\\n        DART_SHA256=\"5a4085d9e370790849eeaf0c2d997c1ab1ca47c09302bfe3711a46a5adcf09cb\"; \\\n        SDK_ARCH=\"arm64\";; \\\n    esac; \\\n    SDK=\"dartsdk-linux-${SDK_ARCH}-release.zip\"; \\\n    BASEURL=\"https://storage.googleapis.com/dart-archive/channels\"; \\\n    URL=\"$BASEURL/$DART_CHANNEL/release/$DART_VERSION/sdk/$SDK\"; \\\n    curl -fsSLO \"$URL\"; \\\n    echo \"$DART_SHA256  *$SDK\" | sha256sum --check --status --strict - || (\\\n        echo -e \"\\n\\nDART CHECKSUM FAILED! Run 'make fetch-sums' for updated values.\\n\\n\" && \\\n        rm \"$SDK\" && \\\n        exit 1 \\\n    ); \\\n    unzip \"$SDK\" > /dev/null && mv dart-sdk \"$DART_SDK\" && rm \"$SDK\";\nENV PUB_CACHE=\"${HOME}/.pub-cache\"\nRUN dart --disable-analytics\nRUN echo -e \"Successfully installed Dart SDK:\" && dart --version\n\n\n# ============== DART-TESTS ==============\nfrom dart as dart-tests\nWORKDIR /app\nCOPY ./ ./\nRUN dart pub get\nENV BASE_DIR=/app\nENV TOOL_DIR=$BASE_DIR/tool\nCMD [\"./tool/test.sh\"]\n\n\n# ============== NODEJS INSTALL ==============\nFROM dart as node\nRUN set -eu; \\\n    NODE_PPA=\"node_ppa.sh\"; \\\n    NODE_SHA256=9820c0fcf01527ffd3b2077de1f76d4bbe67bdb38df9d12fa195d7eea1521e8a; \\\n    curl -fsSL https://deb.nodesource.com/setup_lts.x -o \"$NODE_PPA\"; \\\n    echo \"$NODE_SHA256  $NODE_PPA\" | sha256sum --check --status --strict - || (\\\n        echo -e \"\\n\\nNODE CHECKSUM FAILED! Run tool/fetch-node-ppa-sum.sh for updated values.\\n\\n\" && \\\n        rm \"$NODE_PPA\" && \\\n        exit 1 \\\n    ); \\\n    sh \"$NODE_PPA\" && rm \"$NODE_PPA\"; \\\n    apt-get update -q && apt-get install -yq --no-install-recommends \\\n      nodejs \\\n    && rm -rf /var/lib/apt/lists/*\n# Ensure latest NPM\nRUN npm install -g npm && npm cache clean --force;\n\n\n# ============== DEV/JEKYLL SETUP ==============\nFROM node as dev\nWORKDIR /app\n\nENV JEKYLL_ENV=development\nCOPY Gemfile Gemfile.lock ./\nRUN mkdir -p /usr/local/etc \\\n  && { \\\n    echo 'install: --no-document'; \\\n    echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc;\nRUN gem update --system && gem install bundler && rm -rf /root/.gem;\nRUN BUNDLE_WITHOUT=\"test production\" bundle install --jobs=4 --retry=2\n\nENV NODE_ENV=development\nCOPY package.json package-lock.json ./\nRUN npm install -g firebase-tools@11.0.1 && npm cache clean --force;\nRUN npm install && npm cache clean --force;\n\nCOPY ./ ./\n\n# Ensure packages are still up-to-date if anything has changed\n# RUN dart pub get --offline\nRUN dart pub get\n\n# Let's not play \"which dir is this\"\nENV BASE_DIR=/app\nENV TOOL_DIR=$BASE_DIR/tool\n\n# Jekyl\nEXPOSE 4000\nEXPOSE 35729\n\n# Firebase emulator port\n# Airplay runs on :5000 by default now\nEXPOSE 5500\n\n# re-enable defult in case we want to test packages\nENV DEBIAN_FRONTEND=dialog\n\n\n# ============== FIREBASE EMULATE ==============\nFROM dev as emulate\nRUN bundle exec jekyll build --config _config.yml,_config_test.yml\nCMD [\"make\", \"emulate\"]\n\n# ============== TEST JEKYLL SITE ==============\nFROM dev as checklinks\nRUN bundle exec jekyll build --config _config.yml,_config_test.yml\nCMD [\"npm\", \"run\", \"checklinks\"]\n\n\n# ============== BUILD PROD JEKYLL SITE ==============\nFROM node AS build\nWORKDIR /app\n\nENV JEKYLL_ENV=production\nCOPY Gemfile Gemfile.lock ./\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRUN mkdir -p /usr/local/etc \\\n  && { \\\n    echo 'install: --no-document'; \\\n    echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc;\nRUN gem update --system && gem install bundler && rm -rf /root/.gem;\nRUN BUNDLE_WITHOUT=\"test development\" bundle install --jobs=4 --retry=2 --quiet\n\nENV NODE_ENV=production\nCOPY package.json package-lock.json ./\nRUN npm install && npm cache clean --force;\n\nCOPY ./ ./\n\nRUN dart pub get\n\nENV BASE_DIR=/app\nENV TOOL_DIR=$BASE_DIR/tool\n\nARG BUILD_CONFIGS=_config.yml\nENV BUILD_CONFIGS=$BUILD_CONFIGS\nRUN bundle exec jekyll build --config $BUILD_CONFIGS\n\n\n# ============== DEPLOY to FIREBASE ==============\nFROM build as deploy\nRUN npm install -g firebase-tools@11.0.1 && npm cache clean --force;\nARG FIREBASE_TOKEN\nENV FIREBASE_TOKEN=$FIREBASE_TOKEN\nARG FIREBASE_PROJECT=default\nENV FIREBASE_PROJECT=$FIREBASE_PROJECT\nRUN [[ -z \"$FIREBASE_TOKEN\" ]] && echo \"FIREBASE_TOKEN is required for container deploy!\"\nRUN make deploy-ci\n"
}