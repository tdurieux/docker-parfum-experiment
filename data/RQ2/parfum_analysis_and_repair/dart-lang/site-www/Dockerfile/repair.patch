diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/dart-lang/site-www/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/dart-lang/site-www/Dockerfile/repaired.Dockerfile
index 6de1c4e..afe3eb6 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/dart-lang/site-www/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/dart-lang/site-www/Dockerfile/repaired.Dockerfile
@@ -55,7 +55,7 @@ RUN set -eu; \
     BASEURL="https://storage.googleapis.com/dart-archive/channels"; \
     URL="$BASEURL/$DART_CHANNEL/release/$DART_VERSION/sdk/$SDK"; \
     curl -fsSLO "$URL"; \
-    echo "$DART_SHA256 *$SDK" | sha256sum --check --status --strict - || (\
+    echo "$DART_SHA256  *$SDK" | sha256sum --check --status --strict - || (\
         echo -e "\n\nDART CHECKSUM FAILED! Run 'make fetch-sums' for updated values.\n\n" && \
         rm "$SDK" && \
         exit 1 \
@@ -82,7 +82,7 @@ RUN set -eu; \
     NODE_PPA="node_ppa.sh"; \
     NODE_SHA256=9820c0fcf01527ffd3b2077de1f76d4bbe67bdb38df9d12fa195d7eea1521e8a; \
     curl -fsSL https://deb.nodesource.com/setup_lts.x -o "$NODE_PPA"; \
-    echo "$NODE_SHA256 $NODE_PPA" | sha256sum --check --status --strict - || (\
+    echo "$NODE_SHA256  $NODE_PPA" | sha256sum --check --status --strict - || (\
         echo -e "\n\nNODE CHECKSUM FAILED! Run tool/fetch-node-ppa-sum.sh for updated values.\n\n" && \
         rm "$NODE_PPA" && \
         exit 1 \
@@ -92,7 +92,7 @@ RUN set -eu; \
       nodejs \
     && rm -rf /var/lib/apt/lists/*
 # Ensure latest NPM
-RUN npm install -g npm
+RUN npm install -g npm && npm cache clean --force;
 
 
 # ============== DEV/JEKYLL SETUP ==============
@@ -101,13 +101,18 @@ WORKDIR /app
 
 ENV JEKYLL_ENV=development
 COPY Gemfile Gemfile.lock ./
-RUN gem update --system && gem install bundler
+RUN mkdir -p /usr/local/etc \
+  && { \
+    echo 'install: --no-document'; \
+    echo 'update: --no-document'; \
+  } >> /usr/local/etc/gemrc;
+RUN gem update --system && gem install bundler && rm -rf /root/.gem;
 RUN BUNDLE_WITHOUT="test production" bundle install --jobs=4 --retry=2
 
 ENV NODE_ENV=development
 COPY package.json package-lock.json ./
-RUN npm install -g firebase-tools@11.0.1
-RUN npm install
+RUN npm install -g firebase-tools@11.0.1 && npm cache clean --force;
+RUN npm install && npm cache clean --force;
 
 COPY ./ ./
 
@@ -125,7 +130,7 @@ EXPOSE 35729
 
 # Firebase emulator port
 # Airplay runs on :5000 by default now
-EXPOSE 5500 
+EXPOSE 5500
 
 # re-enable defult in case we want to test packages
 ENV DEBIAN_FRONTEND=dialog
@@ -148,12 +153,161 @@ WORKDIR /app
 
 ENV JEKYLL_ENV=production
 COPY Gemfile Gemfile.lock ./
-RUN gem update --system && gem install bundler
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+RUN mkdir -p /usr/local/etc \
+  && { \
+    echo 'install: --no-document'; \
+    echo 'update: --no-document'; \
+  } >> /usr/local/etc/gemrc;
+RUN gem update --system && gem install bundler && rm -rf /root/.gem;
 RUN BUNDLE_WITHOUT="test development" bundle install --jobs=4 --retry=2 --quiet
 
 ENV NODE_ENV=production
 COPY package.json package-lock.json ./
-RUN npm install
+RUN npm install && npm cache clean --force;
 
 COPY ./ ./
 
@@ -169,7 +323,7 @@ RUN bundle exec jekyll build --config $BUILD_CONFIGS
 
 # ============== DEPLOY to FIREBASE ==============
 FROM build as deploy
-RUN npm install -g firebase-tools@11.0.1
+RUN npm install -g firebase-tools@11.0.1 && npm cache clean --force;
 ARG FIREBASE_TOKEN
 ENV FIREBASE_TOKEN=$FIREBASE_TOKEN
 ARG FIREBASE_PROJECT=default