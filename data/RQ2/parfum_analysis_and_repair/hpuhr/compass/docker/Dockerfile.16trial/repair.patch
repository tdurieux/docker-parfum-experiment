diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/hpuhr/compass/docker/Dockerfile.16trial b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/hpuhr/compass/docker/Dockerfile.16trial/repaired.Dockerfile
index 58f1084..d7c5312 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/hpuhr/compass/docker/Dockerfile.16trial
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/hpuhr/compass/docker/Dockerfile.16trial/repaired.Dockerfile
@@ -1,29 +1,29 @@
 FROM ubuntu:16.04
 
-RUN groupadd -r someusers --gid=1000 
-RUN useradd -r -p "$(openssl passwd -1 sk)" -g someusers -G sudo --uid=1000 --create-home --shell /bin/bash sk 
+RUN groupadd -r someusers --gid=1000
+RUN useradd -r -p "$(openssl passwd -1 sk)" -g someusers -G sudo --uid=1000 --create-home --shell /bin/bash sk
 
 # Update and allow for apt over HTTPS
-RUN apt-get update && apt-get install -y apt-utils
-RUN apt-get install software-properties-common build-essential -y
-RUN add-apt-repository ppa:ubuntu-toolchain-r/test -y 
+RUN apt-get update && apt-get install --no-install-recommends -y apt-utils && rm -rf /var/lib/apt/lists/*;
+RUN apt-get install --no-install-recommends software-properties-common build-essential -y && rm -rf /var/lib/apt/lists/*;
+RUN add-apt-repository ppa:ubuntu-toolchain-r/test -y
 RUN add-apt-repository ppa:george-edison55/cmake-3.x
 #RUN add-apt-repository ppa:mhier/libboost-latest
 RUN apt-get update
-RUN apt-get install gcc g++ cmake -y
+RUN apt-get install --no-install-recommends gcc g++ cmake -y && rm -rf /var/lib/apt/lists/*;
 #RUN apt-get install gcc-9 g++-9 cmake -y
 #RUN sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9
 #RUN update-alternatives --set gcc "/usr/bin/gcc-9"
 
-RUN apt-get install wget -y
+RUN apt-get install --no-install-recommends wget -y && rm -rf /var/lib/apt/lists/*;
 
 # install atsdb deps
 #RUN apt-get install libboost-all-dev -y
-RUN apt-get install liblog4cpp5-dev libssl-dev libarchive-dev libmysql++-dev libeigen3-dev libmysqlclient-dev libsqlite3-dev libgdal-dev  -y
+RUN apt-get install --no-install-recommends liblog4cpp5-dev libssl-dev libarchive-dev libmysql++-dev libeigen3-dev libmysqlclient-dev libsqlite3-dev libgdal-dev -y && rm -rf /var/lib/apt/lists/*;
 # tools
-RUN apt-get install locate zip unzip qtchooser chrpath -y
+RUN apt-get install --no-install-recommends locate zip unzip qtchooser chrpath -y && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get install libtbb-dev -y
+RUN apt-get install --no-install-recommends libtbb-dev -y && rm -rf /var/lib/apt/lists/*;
 #RUN wget https://launchpad.net/ubuntu/+archive/primary/+files/libtbb2_2017~U7-8_amd64.deb
 #RUN dpkg -i libtbb2_2017~U7-8_amd64.deb
 #RUN wget https://launchpad.net/ubuntu/+archive/primary/+files/libtbb-dev_2017~U7-8_amd64.deb
@@ -35,18 +35,18 @@ RUN apt-get update
 
 RUN apt-get build-dep libopenscenegraph-dev -y
 RUN apt-get build-dep libosgearth-dev -y
-RUN apt-get install libgeos-dev -y
+RUN apt-get install --no-install-recommends libgeos-dev -y && rm -rf /var/lib/apt/lists/*;
 
 # remove libs since manually installed
-RUN apt-get remove qt4-qmake libqt4* qt4-dev-tools libopenscenegraph-dev openscenegraph openscenegraph-plugin-osgearth osgearth -y 
-#libopenthreads-dev libopenthreads14 
+RUN apt-get remove qt4-qmake libqt4* qt4-dev-tools libopenscenegraph-dev openscenegraph openscenegraph-plugin-osgearth osgearth -y
+#libopenthreads-dev libopenthreads14
 
 #RUN apt-get install libboost-all-dev -y
 
 #RUN apt-get -y --purge remove libboost*
 
-# gui/x11 
-RUN apt-get install gedit libgl1-mesa-dev libegl1-mesa-drivers libxkbcommon-x11-dev -y
+# gui/x11
+RUN apt-get install --no-install-recommends gedit libgl1-mesa-dev libegl1-mesa-drivers libxkbcommon-x11-dev -y && rm -rf /var/lib/apt/lists/*;
 
 # qt
 ENV QT_VERSION_A=5.8
@@ -58,7 +58,7 @@ ENV QT_VERSION_SCRIPT=580
 
 #RUN wget https://download.qt.io/archive/qt/${QT_VERSION_A}/${QT_VERSION_B}/qt-opensource-linux-x64-${QT_VERSION_B}.run
 RUN wget https://download.qt.io/new_archive/qt/${QT_VERSION_A}/${QT_VERSION_B}/qt-opensource-linux-x64-${QT_VERSION_B}.run
-RUN chmod +x qt-opensource-linux-x64-${QT_VERSION_B}.run 
+RUN chmod +x qt-opensource-linux-x64-${QT_VERSION_B}.run
 COPY qt-noninteractive.qs /qt-noninteractive.qs
 RUN ./qt-opensource-linux-x64-${QT_VERSION_B}.run --script qt-noninteractive.qs  -platform minimal
 
@@ -80,7 +80,7 @@ ENV QTLIBDIR="${QTDIR}/gcc_64/"
 #RUN cd OpenSceneGraph-OpenSceneGraph-3.4.1/build && make install
 
 RUN add-apt-repository ppa:ubuntugis/ppa
-RUN apt-get update && apt-get --only-upgrade install libgdal-dev  -y
+RUN apt-get update && apt-get --only-upgrade --no-install-recommends install libgdal-dev -y && rm -rf /var/lib/apt/lists/*;
 
 RUN apt-get remove libopenthreads-dev -y
 
@@ -106,11 +106,11 @@ RUN cd osgQt-Qt4/build && make install
 #RUN cd osgearth-osgearth-2.9/build && make -j 16
 #RUN cd osgearth-osgearth-2.9/build && make install
 
-RUN apt-get install libgeos++-dev -y
+RUN apt-get install --no-install-recommends libgeos++-dev -y && rm -rf /var/lib/apt/lists/*;
 
 #RUN apt-get install libprotobuf-dev protobuf-compiler libglew-dev -y
 
-RUN apt-get install autoconf automake libtool curl -y
+RUN apt-get install --no-install-recommends autoconf automake libtool curl -y && rm -rf /var/lib/apt/lists/*;
 
 #RUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protobuf-cpp-3.19.1.zip
 #RUN unzip protobuf-cpp-3.19.1.zip
@@ -121,7 +121,7 @@ RUN apt-get install autoconf automake libtool curl -y
 #RUN cd protobuf-3.19.1 && make install
 #RUN cd protobuf-3.19.1 && ldconfig # refresh shared library cache.
 
-RUN apt-get install protobuf-compiler libprotobuf-dev -y
+RUN apt-get install --no-install-recommends protobuf-compiler libprotobuf-dev -y && rm -rf /var/lib/apt/lists/*;
 
 RUN echo 'if(PROTOBUF_FOUND)' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
 RUN echo '    set(Protobuf_FOUND ${PROTOBUF_FOUND})' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
@@ -130,7 +130,7 @@ RUN echo '    set(Protobuf_INCLUDE_DIR ${PROTOBUF_INCLUDE_DIR})    ' >> /usr/sha
 RUN echo '    set(Protobuf_LIBRARIES ${PROTOBUF_LIBRARIES})    ' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
 RUN echo 'endif()' >> /usr/share/cmake-3.5/Modules/FindProtobuf.cmake
 
-RUN apt-get install libzip-dev -y
+RUN apt-get install --no-install-recommends libzip-dev -y && rm -rf /var/lib/apt/lists/*;
 
 RUN wget https://github.com/gwaldron/osgearth/archive/osgearth-3.2.zip
 RUN unzip osgearth-3.2.zip
@@ -147,18 +147,18 @@ RUN cd NemaTode-master/build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_
 RUN cd NemaTode-master/build && make -j 16
 RUN cd NemaTode-master/build && make install
 
-RUN apt-get install libbz2-dev python-dev -y
+RUN apt-get install --no-install-recommends libbz2-dev python-dev -y && rm -rf /var/lib/apt/lists/*;
 
 #install boost
 RUN wget -O boost_1_68_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.68.0/boost_1_68_0.tar.gz/download --no-check-certificate
-RUN tar xzvf boost_1_68_0.tar.gz
+RUN tar xzvf boost_1_68_0.tar.gz && rm boost_1_68_0.tar.gz
 RUN cd boost_1_68_0/ && ./bootstrap.sh --prefix=/usr/
 RUN cd boost_1_68_0/ && ./b2
 RUN cd boost_1_68_0/ && ./b2 install
 
 #RUN apt-get install gdb -y
 
-RUN apt-get -y install sudo
+RUN apt-get -y --no-install-recommends install sudo && rm -rf /var/lib/apt/lists/*;
 
 RUN ldconfig -v /usr/lib64/
 RUN updatedb