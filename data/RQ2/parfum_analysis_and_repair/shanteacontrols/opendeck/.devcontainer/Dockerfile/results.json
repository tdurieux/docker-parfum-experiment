{
  "startTime": 1674254059205,
  "endTime": 1674254060259,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 0,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 38,
        "columnStart": 0,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 38,
        "columnStart": 0,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 38,
        "columnStart": 0,
        "columnEnd": 13
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nARG user=opendeck\nARG WGET_ARGS=\"-q --show-progress --progress=bar:force:noscroll\"\n\nRUN \\\napt-get update && \\\nDEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\nmake \\\nsrecord \\\ngit \\\ngit-lfs \\\nwget \\\ngdb \\\nimagemagick \\\ndfu-util \\\nxz-utils \\\ngcc \\\ng++ \\\nbsdmainutils \\\nclang \\\nca-certificates \\\nsudo \\\nbash-completion \\\nccache \\\nunzip \\\ncmake \\\nlsb-release \\\nsoftware-properties-common \\\npython3-pip \\\ngcc-multilib \\\ngpg-agent \\\n&& rm -rf /var/lib/apt/lists/*\n\nRUN \\\n bash -c \"$(wget -O - https://apt.llvm.org/llvm.sh)\" && \\\napt-get install -y --no-install-recommends \\\nclang-format-14 \\\nclang-tidy-14 && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\nmkdir /opendeck-deps\n\nRUN \\\ncd /opendeck-deps && \\\nwget ${WGET_ARGS} https://github.com/TomWright/dasel/releases/download/v1.22.1/dasel_linux_amd64 && \\\nchmod +x dasel_linux_amd64 && \\\nmv $(pwd)/dasel_linux_amd64 /usr/local/bin/dasel\n\nRUN \\\ncd /opendeck-deps && \\\nwget ${WGET_ARGS} https://downloads.arduino.cc/arduino-1.8.19-linux64.tar.xz -O arduino.tar.xz && \\\ntar -xf arduino.tar.xz && \\\nrm arduino.tar.xz && \\\ncd arduino-1.8.19 && \\\nrm -rf \\\njava \\\nexamples \\\nlib \\\nlibraries \\\nreference \\\ntools-builder \\\narduino \\\narduino-builder \\\narduino-linux-setup.sh \\\ninstall.sh \\\nrevisions.txt \\\nuninstall.sh && \\\ncp hardware/tools/avr/etc/avrdude.conf /etc/avrdude.conf\n\nRUN \\\ncd /opendeck-deps && \\\nwget ${WGET_ARGS} https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 && \\\ntar -xf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 && \\\nrm gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2\n\nRUN \\\ncd /opendeck-deps && \\\nwget ${WGET_ARGS} https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz && \\\ntar -xf hub-linux-amd64-2.14.2.tgz && \\\nrm hub-linux-amd64-2.14.2.tgz && \\\ncp hub-linux-amd64-2.14.2/bin/hub /usr/bin/hub && \\\nrm -rf hub-linux-amd64-2.14.2\n\nRUN \\\ncd /opt && \\\nwget ${WGET_ARGS} https://github.com/facebook/infer/releases/download/v1.1.0/infer-linux64-v1.1.0.tar.xz && \\\ntar -xf infer-linux64-v1.1.0.tar.xz && \\\nrm infer-linux64-v1.1.0.tar.xz && \\\ncp /lib/clang/14.0.5/lib/linux/libclang_rt.profile-x86_64.a /opt/infer-linux64-v1.1.0/lib/infer/facebook-clang-plugins/clang/install/lib/clang/11.1.0/lib/linux\n\nENV PATH=\"/opt/infer-linux64-v1.1.0/bin:/opendeck-deps/arduino-1.8.19/hardware/tools/avr/bin:/opendeck-deps/gcc-arm-none-eabi-10.3-2021.10/bin:$PATH\"\n\n#setup gtest/gmock\nRUN \\\ncd /opendeck-deps && \\\ngit clone https://github.com/google/googletest.git -b release-1.11.0 && \\\ncd googletest && \\\nmkdir build && \\\ncd build && \\\ncmake .. && \\\nmake && \\\nmake install && \\\ncd ../../ && \\\nrm -rf googletest\n\n#use newer version of glog\nRUN \\\ncd /opendeck-deps && \\\ngit clone https://github.com/google/glog.git && \\\ncd glog && \\\ngit checkout v0.6.0 && \\\ncmake -S . -B build -G \"Unix Makefiles\" && \\\ncmake --build build && \\\ncmake --build build --target install && \\\ncd ../ && \\\nrm -rf glog && \\\nldconfig\n\nRUN \\\n pip install --no-cache-dir compiledb\n\n#don't run as root!\nRUN adduser --disabled-password --gecos '' $user\n\n#add user to sudo group\nRUN adduser $user sudo\n\n#disable password prompt for sudo commands\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nRUN echo \"alias mkc='make clean'\" >> /home/$user/.bashrc\nRUN echo \"export MAKEFLAGS=-j$(nproc)\" >> /home/$user/.bashrc\n\n#run everything below as $user\nUSER $user\nWORKDIR /home/$user\n\nRUN \\\nsudo update-alternatives --install /usr/local/bin/clang-format clang-format /usr/bin/clang-format-14 20 && \\\nsudo update-alternatives --install /usr/local/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-14 20 && \\\nsudo update-alternatives --install /usr/local/bin/run-clang-tidy run-clang-tidy /usr/bin/run-clang-tidy-14 20"
}