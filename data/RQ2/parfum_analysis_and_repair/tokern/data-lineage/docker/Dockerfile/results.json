{
  "startTime": 1674218575244,
  "endTime": 1674218575965,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 49,
        "columnStart": 7,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile\n# Uses multi-stage builds requiring Docker 17.05 or higher\n# See https://docs.docker.com/develop/develop-images/multistage-build/\n\n# Creating a python base with shared environment variables\nFROM python:3.8.1-slim as python-base\nENV PYTHONUNBUFFERED=1 \\\n    PYTHONDONTWRITEBYTECODE=1 \\\n    PIP_NO_CACHE_DIR=off \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    PIP_DEFAULT_TIMEOUT=100 \\\n    POETRY_HOME=\"/opt/poetry\" \\\n    POETRY_VIRTUALENVS_IN_PROJECT=true \\\n    POETRY_NO_INTERACTION=1 \\\n    PYSETUP_PATH=\"/opt/pysetup\" \\\n    VENV_PATH=\"/opt/pysetup/.venv\"\n\nENV PATH=\"$POETRY_HOME/bin:$VENV_PATH/bin:$PATH\"\n\n\n# builder-base is used to build dependencies\nFROM python-base as builder-base\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        curl gcc python3-dev default-libmysqlclient-dev \\\n        build-essential libpq-dev musl-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install Poetry - respects $POETRY_VERSION & $POETRY_HOME\nENV POETRY_VERSION=1.1.6\nRUN curl -f -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n\n# We copy our Python requirements here to cache them\n# and install only runtime deps using poetry\nWORKDIR $PYSETUP_PATH\nCOPY ./poetry.lock ./pyproject.toml ./\nRUN poetry install --no-dev  # respects\n\nWORKDIR /src\nCOPY . .\nRUN poetry build\nENV PATH=\"${VENV_PATH}/bin:$PATH\"\nRUN pip install --no-cache-dir dist/data_lineage-*.whl\n\n# 'production' stage uses the clean 'python-base' stage and copyies\n# in only our runtime deps that were installed in the 'builder-base'\nFROM python-base as production\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        libpq5 && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=builder-base $VENV_PATH $VENV_PATH\nCOPY ./docker/docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\n\nENTRYPOINT /docker-entrypoint.sh $0 $@\nCMD [ \"data_lineage\"]"
}