{
  "startTime": 1674252986512,
  "endTime": 1674252988432,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 17,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM xacc/ubuntu:20.04\nARG NODE_VERSION=12.18.3\nENV NODE_VERSION $NODE_VERSION\nENV YARN_VERSION 1.22.5\nARG LLVM=14\n# use \"latest\" or \"next\" version for Theia packages\nARG version=latest\n\n# Optionally build a striped Theia application with no map file or .ts sources.\n# Makes image ~150MB smaller when enabled\nARG strip=false\nENV strip=$strip\n\nWORKDIR /home/dev\nADD settings.json /home/dev/.theia/\n\n# More deps (not in the xacc/ubuntu:20.04)\nRUN apt-get update && \\\n    apt-get --no-install-recommends -y install libsecret-1-dev gfortran\\\n    curl vim  xz-utils \\\n    && python3 -m pip install --upgrade pip --user \\\n    && python3 -m pip install setuptools \\\n    && python3 -m pip install python-language-server flake8 autopep8 \\\n    cmake ipopo pint numpy scipy pydantic qiskit pylint pyquil cirq matplotlib openfermion pyscf  \\\n    qsearch qfactor scikit-quant myqlm qlmaas \\\n    && apt-get install --no-install-recommends -y gpg && rm -rf /var/lib/apt/lists/* \\\n    #Install node and yarn\n    #From: https://github.com/nodejs/docker-node/blob/6b8d86d6ad59e0d1e7a94cec2e909cad137a028f/8/Dockerfile\n    # gpg keys listed at https://github.com/nodejs/node#release-keys\n    && set -ex \\\n    && for key in \\\n    4ED778F539E3634C779C87C6D7062848A1AB005C \\\n    B9E2F5981AA6E0CD28160D9FF13993A75599653C \\\n    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n    B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n    77984A986EBC2AA786BC0F66B01FBB92821C587A \\\n    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n    FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \\\n    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n    A48C2BEE680E841632CD4E44F07496B3EB3C1762 \\\n    ; do \\\n    gpg --batch --keyserver keyserver.ubuntu.com --recv-key \"$key\" || \\\n    gpg --batch --keyserver keys.openpgp.org --recv-key \"$key\" || \\\n    gpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" || \\\n    gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\" ; \\\n    done \\\n    && ARCH= && dpkgArch=\"$(dpkg --print-architecture)\" \\\n    && case \"${dpkgArch##*-}\" in \\\n    amd64) ARCH='x64';; \\\n    ppc64el) ARCH='ppc64le';; \\\n    s390x) ARCH='s390x';; \\\n    arm64) ARCH='arm64';; \\\n    armhf) ARCH='armv7l';; \\\n    i386) ARCH='x86';; \\\n    * echo \"unsupported  architecture\"; exit 1;; \\\n  esac \\\n    && curl -f -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\" \\\n    && curl -f -SLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n    && grep \" node-v$NODE_VERSION-linux-$ARCH.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n    && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner \\\n    && rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs \\\n    && set -ex \\\n    && for key in \\\n    6A010C5166006599AA17F08146C2130DFD2497F5 \\\n    ; do \\\n    gpg --batch --keyserver keyserver.ubuntu.com --recv-key \"$key\" || \\\n    gpg --batch --keyserver keys.openpgp.org --recv-key \"$key\" || \\\n    gpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" || \\\n    gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\" ; \\\n    done \\\n    && curl -fSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz\" \\\n    && curl -fSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc\" \\\n    && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \\\n    && mkdir -p /opt/yarn \\\n    && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn --strip-components=1 \\\n    && ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn \\\n    && ln -s /opt/yarn/bin/yarn /usr/local/bin/yarnpkg \\\n    && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \\\n    #C/C++ Developer tools\n    # install clangd and clang-tidy from the public LLVM PPA (nightly build / development version)\n    # and also the GDB debugger, cmake from the Ubuntu repos\n    && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \\\n    echo \"deb http://apt.llvm.org/focal/ llvm-toolchain-focal main\" > /etc/apt/sources.list.d/llvm.list && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n    clang-tools-$LLVM \\\n    clangd-$LLVM \\\n    clang-tidy-$LLVM \\\n    gdb && \\\n    ln -s /usr/bin/clang-$LLVM /usr/bin/clang && \\\n    ln -s /usr/bin/clang++-$LLVM /usr/bin/clang++ && \\\n    ln -s /usr/bin/clang-cl-$LLVM /usr/bin/clang-cl && \\\n    ln -s /usr/bin/clang-cpp-$LLVM /usr/bin/clang-cpp && \\\n    ln -s /usr/bin/clang-tidy-$LLVM /usr/bin/clang-tidy && \\\n    ln -s /usr/bin/clangd-$LLVM /usr/bin/clangd && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN cd /home/dev && git clone --recursive https://github.com/eclipse/xacc && cd xacc && mkdir build && cd build \\\n    && cmake .. -DXACC_BUILD_EXAMPLES=TRUE \\\n    && make -j$(nproc) install \\\n    && cd ../../ && git clone https://github.com/ornl-qci/tnqvm && cd tnqvm && mkdir build && cd build \\\n    && cmake .. -DXACC_DIR=~/.xacc && make -j$(nproc) install\n\n# Theia application\nWORKDIR /home/dev\nARG version=latest\nADD $version.package.json ./package.json\n\nRUN yarn --cache-folder ./ycache && rm -rf ./ycache && \\\n    NODE_OPTIONS=\"--max_old_space_size=4096\" yarn theia build ;\\\n    yarn theia download:plugins\nEXPOSE 3000\nENV SHELL=/bin/bash \\\n    THEIA_DEFAULT_PLUGINS=local-dir:/home/dev/plugins\nENV PYTHONPATH \"${PYTHONPATH}:/root/.xacc\"\nENTRYPOINT [ \"yarn\", \"theia\", \"start\", \"/home/dev\", \"--hostname=0.0.0.0\" ]\n"
}