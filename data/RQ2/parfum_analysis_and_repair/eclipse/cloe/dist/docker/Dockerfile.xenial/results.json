{
  "startTime": 1674248117357,
  "endTime": 1674248119132,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 84,
        "columnEnd": 136
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile.xenial\n#\n# See Dockerfile.focal for documentation of each of the lines.\nARG VTD_IMAGE=scratch\nFROM ${VTD_IMAGE} AS vtd\nWORKDIR /vtd\n\nFROM ubuntu:16.04\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install Newer CMake and GCC Packages\nRUN --mount=type=cache,id=xenial-cache,target=/var/cache/apt \\\n    --mount=type=cache,id=xenial-lib,target=/var/lib/apt \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y apt-transport-https ca-certificates gnupg software-properties-common wget && \\\n    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --batch --dearmor - > /etc/apt/trusted.gpg.d/kitware.gpg && \\\n    apt-add-repository \"deb https://apt.kitware.com/ubuntu/ xenial main\" && \\\n    add-apt-repository \"ppa:ubuntu-toolchain-r/test\" && \\\n    # Install packages:\n    apt-get update && \\\n    apt-get install --no-install-recommends -y gcc-8 g++-8 cmake && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install Pyenv\nRUN --mount=type=cache,id=xenial-cache,target=/var/cache/apt \\\n    --mount=type=cache,id=xenial-lib,target=/var/lib/apt \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        build-essential \\\n        curl \\\n        git \\\n        libbz2-dev \\\n        libffi-dev \\\n        liblzma-dev \\\n        libncurses5-dev \\\n        libreadline-dev \\\n        libsqlite3-dev \\\n        libssl-dev \\\n        libxml2-dev \\\n        libxmlsec1-dev \\\n        llvm \\\n        make \\\n        tk-dev \\\n        wget \\\n        xz-utils \\\n        zlib1g-dev \\\n    && \\\n    curl -f -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV HOME /root\nENV PYENV_ROOT $HOME/.pyenv\nENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\n\nARG PYTHON_VERSION=3.6.13\nRUN pyenv install ${PYTHON_VERSION} && \\\n    pyenv global ${PYTHON_VERSION} && \\\n    pyenv rehash\n\n# Install System Packages\nCOPY Makefile.setup /cloe/Makefile.setup\nRUN --mount=type=cache,id=xenial-cache,target=/var/cache/apt \\\n    --mount=type=cache,id=xenial-lib,target=/var/lib/apt \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y make ccache locales libbsd0 && \\\n    make -f /cloe/Makefile.setup \\\n        WITHOUT_DEV_DEPS=yes \\\n        DEBIAN_FRONTEND=noninteractive \\\n        APT_ARGS=\"--no-install-recommends -y\" \\\n        install-system-deps \\\n        && \\\n    locale-gen && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\nENV CCACHE_DIR=/ccache\nENV PATH=/usr/lib/ccache:$PATH\n\nRUN pip install --no-cache-dir --upgrade pip && \\\n    make -f /cloe/Makefile.setup \\\n        PIP_INSTALL_ARGS=\"\" \\\n        install-python-deps\n\n# Install and Setup Conan\nARG BUILD_TYPE=RelWithDebInfo\nRUN conan profile new --detect default && \\\n    conan profile update settings.build_type=${BUILD_TYPE} default && \\\n    conan profile update settings.compiler.libcxx=libstdc++11 default && \\\n    conan profile update env.PATH=\"[$PYENV_ROOT/shims,$PYENV_ROOT/bin]\" default\n\nENV CONAN_NON_INTERACTIVE=yes\n\n# Build and Install Cloe\nWORKDIR /cloe\nARG WITH_VTD=0\nARG KEEP_SOURCES=0\n\n# Download or build dependencies:\nCOPY vendor /cloe/vendor\nCOPY Makefile.package /cloe\nCOPY Makefile.all /cloe\nARG VENDOR_TARGET=\"export-vendor download-vendor\"\nRUN --mount=type=cache,target=/ccache \\\n    --mount=type=secret,target=/root/setup.sh,id=setup,mode=0400 \\\n    --mount=type=bind,target=/root/.conan/data/vtd,source=/vtd,from=vtd,rw \\\n    if [ -r /root/setup.sh ]; then . /root/setup.sh; fi && \\\n    make -f Makefile.all WITH_VTD=${WITH_VTD} ${VENDOR_TARGET} && \\\n    # Clean up:\n    conan user --clean && \\\n    if [ ${KEEP_SOURCES} -eq 0 ]; then \\\n        find /root/.conan/data -name dl -type d -maxdepth 5 -exec rm -r {} + && \\\n        conan remove \\* -s -b -f; \\\n    else \\\n        conan remove \\* -b -f; \\\n    fi\n\n# Build Cloe.\nCOPY . /cloe\nARG PROJECT_VERSION=unknown\nARG PACKAGE_TARGET=package-auto\nRUN --mount=type=cache,target=/ccache \\\n    --mount=type=secret,target=/root/setup.sh,id=setup,mode=0400 \\\n    if [ -r /root/setup.sh ]; then . /root/setup.sh; fi && \\\n    echo \"${PROJECT_VERSION}\" > /cloe/VERSION && \\\n    make WITH_VTD=${WITH_VTD} ${PACKAGE_TARGET} && \\\n    # Clean up:\n    conan user --clean && \\\n    if [ ${KEEP_SOURCES} -eq 0 ]; then \\\n        find /root/.conan/data -name dl -type d -maxdepth 5 -exec rm -r {} + && \\\n        conan remove \\* -s -b -f; \\\n    else \\\n        conan remove \\* -b -f; \\\n    fi\n\n# Run smoketests.\nRUN --mount=type=secret,target=/root/setup.sh,id=setup,mode=0400 \\\n    --mount=type=bind,target=/root/.conan/data/vtd,source=/vtd,from=vtd,rw \\\n    if [ -r /root/setup.sh ]; then . /root/setup.sh; fi && \\\n    make WITH_VTD=${WITH_VTD} smoketest && \\\n    conan user --clean\n"
}