{
  "startTime": 1674252792824,
  "endTime": 1674252793429,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12.16.1-alpine3.11 as BUILD\nRUN apk add --no-cache \\\n\tgcc \\\n    g++ \\\n\tmake \\\n    linux-headers \\\n    udev \\\n    python3\nRUN npm install -g npm@7 && npm cache clean --force;\n\n## change it to maintain all the dev dependencies\nARG BUILD_ENV=production\nWORKDIR /app\nCOPY ./package.json ./\nCOPY ./tsconfig.json ./\nCOPY ./packages packages/\n\nRUN npm install && npm run build && npm cache clean --force;\n\n# now remove dev dependencies by reinstalling for production\n# this wil reduce the size of the image built in next steps significantly\nRUN if [ \"${BUILD_ENV}\" = \"production\" ]; then npm prune --production; fi\n\nFROM node:12.16.1-alpine3.11\n\nCOPY --from=BUILD  /app /app\n\nWORKDIR /app/packages/cli\n\nEXPOSE 8080/tcp\nEXPOSE 5683/udp\n\nSTOPSIGNAL SIGINT\n\nENTRYPOINT [ \"node\", \"dist/cli.js\" ]\nCMD [ \"-h\" ]\n\n##  docker build -t wot-servient ./docker/Dockerfile\n"
}