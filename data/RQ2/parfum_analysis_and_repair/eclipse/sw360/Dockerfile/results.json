{
  "startTime": 1674253809078,
  "endTime": 1674253810621,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 97
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright Siemens AG, 2020. Part of the SW360 Portal Project.\n# Copyright BMW CarIT GmbH, 2021.\n#\n# This program and the accompanying materials are made\n# available under the terms of the Eclipse Public License 2.0\n# which is available at https://www.eclipse.org/legal/epl-2.0/\n#\n# SPDX-License-Identifier: EPL-2.0\n#\n\nFROM eclipse-temurin:11-jdk-jammy AS builder\n\n# Set versiona as arguments\nARG CLUCENE_VERSION=2.1.0\nARG THRIFT_VERSION=0.16.0\nARG MAVEN_VERSION=3.8.6\n\n# Lets get dependencies as buildkit cached\nENV SW360_DEPS_DIR=/var/cache/deps\nCOPY ./scripts/docker-config/download_dependencies.sh /var/tmp/deps.sh\nRUN --mount=type=cache,mode=0755,target=/var/cache/deps,sharing=locked \\\n    chmod +x /var/tmp/deps.sh \\\n    && /var/tmp/deps.sh\n\nRUN --mount=type=cache,mode=0755,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,mode=0755,target=/var/lib/apt,sharing=locked \\\n    apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    automake \\\n    bison \\\n    build-essential \\\n    curl \\\n    flex \\\n    gettext-base \\\n    git \\\n    libboost-dev \\\n    libboost-test-dev \\\n    libboost-program-options-dev \\\n    libevent-dev \\\n    libtool \\\n    libssl-dev \\\n    pkg-config \\\n    procps \\\n    wget \\\n    unzip \\\n    zip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Prepare maven from binary to avoid wrong java dependencies and proxy\nRUN --mount=type=cache,mode=0755,target=/var/cache/deps \\\n    tar -xzf \"/var/cache/deps/apache-maven-$MAVEN_VERSION-bin.tar.gz\" --strip-components=1 -C /usr/local && rm \"/var/cache/deps/apache-maven-$MAVEN_VERSION-bin.tar.gz\"\nCOPY scripts/docker-config/mvn-proxy-settings.xml /etc\nCOPY scripts/docker-config/set_proxy.sh /usr/local/bin/setup_maven_proxy\nRUN chmod a+x /usr/local/bin/setup_maven_proxy\n\n#--------------------------------------------------------------------------------------------------\n# Thrift\nFROM builder AS thriftbuild\n\nARG BASEDIR=\"/build\"\nARG THRIFT_VERSION=0.16.0\n\nCOPY ./scripts/install-thrift.sh build_thrift.sh\n\nRUN --mount=type=tmpfs,target=/build \\\n    --mount=type=cache,mode=0755,target=/var/cache/deps,sharing=locked \\\n    tar -xzf \"/var/cache/deps/thrift-$THRIFT_VERSION.tar.gz\" --strip-components=1 -C /build \\\n    && ./build_thrift.sh --tarball && rm \"/var/cache/deps/thrift-$THRIFT_VERSION.tar.gz\"\n\n#--------------------------------------------------------------------------------------------------\n# Couchdb-Lucene\nFROM builder as clucenebuild\n\nARG CLUCENE_VERSION=2.1.0\n\nWORKDIR /build\n\n# Prepare source code\nCOPY ./scripts/docker-config/couchdb-lucene.ini /var/tmp/couchdb-lucene.ini\nCOPY ./scripts/patches/couchdb-lucene.patch /var/tmp/couchdb-lucene.patch\n\n# Build CLucene\nRUN --mount=type=cache,mode=0755,target=/var/cache/deps,sharing=locked \\\n    --mount=type=tmpfs,target=/build \\\n    --mount=type=cache,mode=0755,target=/root/.m2,rw,sharing=locked \\\n    tar -C /build -xf /var/cache/deps/couchdb-lucene-$CLUCENE_VERSION.tar.gz --strip-components=1 \\\n    && patch -p1 < /var/tmp/couchdb-lucene.patch \\\n    && cp /var/tmp/couchdb-lucene.ini src/main/resources/couchdb-lucene.ini \\\n    && setup_maven_proxy \\\n    && mvn dependency:go-offline -B \\\n    && mvn install war:war \\\n    && cp ./target/*.war /couchdb-lucene.war && rm /var/cache/deps/couchdb-lucene-$CLUCENE_VERSION.tar.gz\n\n#--------------------------------------------------------------------------------------------------\n# SW360\n# We build sw360 and create real image after everything is ready\n# So when decide to use as development, only this last stage\n# is triggered by buildkit images\n\nFROM thriftbuild AS sw360build\n\n# Install mkdocs to generate documentation\nRUN --mount=type=cache,mode=0755,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,mode=0755,target=/var/lib/apt,sharing=locked \\\n    apt-get update -qq \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -qq -y --no-install-recommends \\\n    python3-pip \\\n    python3-wheel \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && pip install --no-cache-dir mkdocs-material\n\n# Copy the sw360 directory\nCOPY . /build/sw360\n\nRUN --mount=type=cache,mode=0755,target=/root/.m2,rw,sharing=locked \\\n    cd /build/sw360 \\\n    && setup_maven_proxy \\\n    && mvn clean package \\\n    -P deploy -Dtest=org.eclipse.sw360.rest.resourceserver.restdocs.* \\\n    -DfailIfNoTests=false \\\n    -Dbase.deploy.dir=. \\\n    -Dliferay.deploy.dir=/sw360_deploy \\\n    -Dbackend.deploy.dir=/sw360_tomcat_webapps \\\n    -Drest.deploy.dir=/sw360_tomcat_webapps \\\n    -Dhelp-docs=true\n\n#--------------------------------------------------------------------------------------------------\n# Runtime image\n# We need use JDK, JRE is not enough as Liferay do runtime changes and require javac\nFROM eclipse-temurin:11-jdk-jammy\n\nWORKDIR /app/\n\nARG LIFERAY_SOURCE=\"liferay-ce-portal-tomcat-7.3.4-ga5-20200811154319029.tar.gz\"\n\nENV LANG=en_US.UTF-8\nENV LANGUAGE=en_US:en\nENV LC_ALL=en_US.UTF-8\n\nRUN --mount=type=cache,mode=0755,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,mode=0755,target=/var/lib/apt,sharing=locked \\\n    --mount=type=cache,mode=0755,target=/var/cache/deps,sharing=locked \\\n    apt-get update -qq \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    gnupg2 \\\n    iproute2 \\\n    iputils-ping \\\n    libarchive-tools \\\n    locales \\\n    lsof \\\n    netbase \\\n    openssh-client \\\n    openssl \\\n    tzdata \\\n    sudo \\\n    vim \\\n    unzip \\\n    zip \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=thriftbuild /thrift-bin.tar.gz .\nRUN tar xzf thrift-bin.tar.gz -C / \\\n    && rm thrift-bin.tar.gz\n\nENV LIFERAY_HOME=/app/sw360\nENV LIFERAY_INSTALL=/app/sw360\n\nARG USERNAME=sw360\nARG USER_ID=1000\nARG USER_GID=$USER_ID\nARG HOMEDIR=/workspace\nENV HOME=$HOMEDIR\n\n# Prepare system for non-priv user\nRUN groupadd --gid $USER_GID $USERNAME \\\n    && useradd \\\n    --uid $USER_ID \\\n    --gid $USER_GID \\\n    --shell /bin/bash \\\n    --home-dir $HOMEDIR \\\n    --create-home $USERNAME\n\n# sudo support\nRUN echo \"$USERNAME ALL=(root) NOPASSWD:ALL\" > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME\n\n# Unpack liferay as sw360 and link current tomcat version\n# to tomcat to make future proof updates\nRUN --mount=type=cache,mode=0755,target=/var/cache/deps,sharing=locked \\\n    mkdir sw360 \\\n    && tar xzf /var/cache/deps/$LIFERAY_SOURCE -C $USERNAME --strip-components=1 \\\n    && cp /var/cache/deps/jars/* sw360/deploy \\\n    && chown -R $USERNAME:$USERNAME sw360 \\\n    && ln -s /app/sw360/tomcat-* /app/sw360/tomcat\n\nCOPY --chown=$USERNAME:$USERNAME --from=sw360build /sw360_deploy/* /app/sw360/deploy\nCOPY --chown=$USERNAME:$USERNAME --from=sw360build /sw360_tomcat_webapps/* /app/sw360/tomcat/webapps/\nCOPY --chown=$USERNAME:$USERNAME --from=clucenebuild /couchdb-lucene.war /app/sw360/tomcat/webapps/\n\n# Copy tomcat base files\nCOPY --chown=$USERNAME:$USERNAME ./scripts/docker-config/setenv.sh /app/sw360/tomcat/bin\n\n# Copy liferay/sw360 config files\nCOPY --chown=$USERNAME:$USERNAME ./scripts/docker-config/portal-ext.properties /app/sw360/portal-ext.properties\nCOPY --chown=$USERNAME:$USERNAME ./scripts/docker-config/etc_sw360 /etc/sw360\nCOPY --chown=$USERNAME:$USERNAME ./scripts/docker-config/entry_point.sh /app/entry_point.sh\n\nUSER $USERNAME\n\nSTOPSIGNAL SIGINT\n\nWORKDIR /app/sw360\n\nENTRYPOINT [ \"/app/entry_point.sh\" ]\n\n"
}