{
  "startTime": 1674253444000,
  "endTime": 1674253445577,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 178
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 21,
        "columnEnd": 109
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 176
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 73,
        "columnEnd": 149
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "npmCacheCleanUseForce",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "npmCacheCleanUseForce",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 121
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#*******************************************************************************\n# Copyright (c) 2019 IBM Corporation and others.\n# All rights reserved. This program and the accompanying materials\n# are made available under the terms of the Eclipse Public License v2.0\n# which accompanies this distribution, and is available at\n# http://www.eclipse.org/legal/epl-v20.html\n#\n# Contributors:\n#     IBM Corporation - initial API and implementation\n#*******************************************************************************\n#FROM centos as codewind-pfe-base\n\n#FROM centos@sha256:f94c1d992c193b3dc09e297ffd54d8a4f1dc946c37cbeceb26d35ce1647f88d9 as codewind-pfe-base\n#FROM centos@sha256:b5e66c4651870a1ad435cd75922fe2cb943c9e973a9673822d1414824a1d0475 as codewind-pfe-base\nFROM centos:8.1.1911 AS codewind-pfe-base\n\nLABEL org.opencontainers.image.title=\"Codewind-PFE\" org.opencontainers.image.description=\"Codewind PFE\" \\\n      org.opencontainers.image.url=\"https://codewind.dev/\" \\\n      org.opencontainers.image.source=\"https://github.com/eclipse/codewind\"\n\n#ARG BUILDAH_RPM=https://cbs.centos.org/kojifiles/packages/buildah/1.11.4/4.el7/x86_64/buildah-1.11.4-4.el7.x86_64.rpm\n#ARG SLIRP=https://cbs.centos.org/kojifiles/packages/slirp4netns/0.3.0/2.git4992082.el7/x86_64/slirp4netns-0.3.0-2.git4992082.el7.x86_64.rpm\nARG SLIRP=https://rpmfind.net/linux/opensuse/ports/ppc/distribution/leap/15.2/repo/oss/ppc64le/slirp4netns-0.4.5-lp152.1.2.ppc64le.rpm\n#ARG LIBSEC=https://cbs.centos.org/kojifiles/packages/libseccomp/2.4.1/0.el7/x86_64/libseccomp-2.4.1-0.el7.x86_64.rpm\n\n# Download the buildah RPM\n#RUN curl -f -o buildah.rpm $BUILDAH_RPM\nRUN curl -f -o slirp4netns.rpm $SLIRP\n#RUN curl -f -o libseccomp.rpm $LIBSEC\n\n# Download and set up Node 10.x RPM\n#RUN curl -sL https://rpm.nodesource.com/setup_10.x | bash -\n\nRUN yum install -y epel-release \\\n    && yum -y --enablerepo=epel install zip unzip python2 sudo ca-certificates openssl  wget gcc-c++ make slirp4netns.rpm && rm -rf /var/cache/yum\n\n\nRUN wget https://nodejs.org/download/release/v13.13.0/node-v13.13.0-linux-ppc64le.tar.gz \\\n    && tar xvzf  node-v13.13.0-linux-ppc64le.tar.gz && rm node-v13.13.0-linux-ppc64le.tar.gz\nENV PATH=/node-v13.13.0-linux-ppc64le/bin:$PATH\n\nRUN yum install -y  --enablerepo=epel libseccomp buildah \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum\n\n# Install docker client only\nRUN cd /tmp \\\n    && curl -f -O https://download.docker.com/linux/static/stable/ppc64le/docker-18.06.3-ce.tgz \\\n    && echo '8fee410bc25628fa5310b33af1b362edcfe39533294a8325f3ed2cefac97c005  docker-18.06.3-ce.tgz' | sha256sum -c - \\\n    && tar -xvf docker-18.06.3-ce.tgz docker/docker \\\n    && cp /tmp/docker/docker /usr/bin/docker \\\n    && rm -rf /tmp/docker /tmp/docker-18.06.3-ce.tgz \\\n    && chown root:root /usr/bin/docker\n\n#    && curl -O https://download.docker.com/linux/static/stable/x86_64/docker-18.09.6.tgz \\\n#    && echo '1f3f6774117765279fce64ee7f76abbb5f260264548cf80631d68fb2d795bb09  docker-18.09.6.tgz' | sha256sum -c - \\\n#    && tar -xvf docker-18.09.6.tgz docker/docker \\\n#    && cp /tmp/docker/docker /usr/bin/docker \\\n#    && rm -rf /tmp/docker /tmp/docker-18.09.6.tgz \\\n#    && chown root:root /usr/bin/docker\n\n# Download OpenJ9 JRE, fixed to jre8u212-b04_openj9-0.14.2 version\nRUN cd /tmp \\\n    && curl -f -sL -O https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u222-b10_openj9-0.15.1/OpenJDK8U-jre_ppc64le_linux_openj9_8u222b10_openj9-0.15.1.tar.gz \\\n    && echo 'c6c3faacc9830129f3356569d075b1e3d1c9ff097ee95b77256246e30e64c149  OpenJDK8U-jre_ppc64le_linux_openj9_8u222b10_openj9-0.15.1.tar.gz' | sha256sum -c - \\\n    && tar -xvf OpenJDK8U-jre_ppc64le_linux_openj9_8u222b10_openj9-0.15.1.tar.gz \\\n    && OPENJ9_JRE=$(find *jre | head -n 1) \\\n    && mkdir -p /opt/java \\\n    && cp -r /tmp/$OPENJ9_JRE /opt/java/jre \\\n    && rm -rf /tmp/$OPENJ9_JRE /tmp/OpenJDK8U-jre_ppc64le_linux_openj9_8u222b10_openj9-0.15.1.tar.gz\n\n#    && curl -sL -O https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u222-b10_openj9-0.15.1/OpenJDK8U-jre_x64_linux_openj9_8u222b10_openj9-0.15.1.tar.gz \\\n#    && echo 'ae56994a7c8e8c19939c0c2ff8fe5a850eb2f23845c499aa5ede26deb3d5ad28  OpenJDK8U-jre_x64_linux_openj9_8u222b10_openj9-0.15.1.tar.gz' | sha256sum -c - \\\n#    && tar -xvf OpenJDK8U-jre_x64_linux_openj9_8u222b10_openj9-0.15.1.tar.gz \\\n#    && OPENJ9_JRE=$(find *jre | head -n 1) \\\n#    && mkdir -p /opt/java \\\n#    && cp -r /tmp/$OPENJ9_JRE /opt/java/jre \\\n#    && rm -rf /tmp/$OPENJ9_JRE /tmp/OpenJDK8U-jre_x64_linux_openj9_8u222b10_openj9-0.15.1.tar.gz\n\n# Set up PFE container environment variables\nENV JAVA_HOME=/opt/java/jre \\\n    PATH=/opt/java/jre/bin:$PATH \\\n    HELM_HOME=/root/.helm\n\n# Install the latest version of yq\nRUN LATEST_RELEASE=$( curl -f -L -s -H 'Accept: application/json' https://github.com/mikefarah/yq/releases/latest) \\\n    && LATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*\"tag_name\":\"\\([^\"]*\\)\".*/\\1/') \\\n    && curl -f -sL -O https://github.com/mikefarah/yq/releases/download/$LATEST_VERSION/yq_linux_ppc64le \\\n    && mv ./yq_linux_ppc64le /usr/local/bin/yq \\\n    && chmod +x /usr/local/bin/yq\n\n# Install kubectl\nRUN curl -f -LO https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/ppc64le/kubectl \\\n    && chmod +x ./kubectl \\\n    && mv ./kubectl /usr/local/bin/kubectl\n\n#RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \\\n#    && chmod +x ./kubectl \\\n#    && mv ./kubectl /usr/local/bin/kubectl\n\n# Install helm, fixed to the 3.0.0 version\nRUN cd /tmp \\\n    && curl -f -O https://get.helm.sh/helm-v2.9.1-linux-ppc64le.tar.gz \\\n    && echo '22671d0a5667c10c11fedf6901eadcbedd66bc0024cc6e8db3669df8feef230e  helm-v2.9.1-linux-ppc64le.tar.gz' | sha256sum -c - \\\n    && tar -xvf helm-v2.9.1-linux-ppc64le.tar.gz \\\n    && cp /tmp/linux-ppc64le/helm /usr/local/bin/helm \\\n    && chmod +x /usr/local/bin/helm \\\n    && rm -rf /tmp/linux-ppc64le /tmp/helm-v2.9.1-linux-ppc64le.tar.gz\n\n#RUN cd /tmp \\\n#    && curl -O https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gz \\\n#    && echo '10e1fdcca263062b1d7b2cb93a924be1ef3dd6c381263d8151dd1a20a3d8c0dc  helm-v3.0.0-linux-amd64.tar.gz' | sha256sum -c - \\\n#    && tar -xvf helm-v3.0.0-linux-amd64.tar.gz \\\n#    && cp /tmp/linux-amd64/helm /usr/local/bin/helm \\\n#    && chmod +x /usr/local/bin/helm \\\n#    && rm -rf /tmp/linux-amd64 /tmp/helm-v3.0.0-linux-amd64.tar.gz\n\nWORKDIR /\n# Softlink to /codewind-workspace to /projects so paths\n# match in che.\nRUN mkdir -m 777 -p /codewind-workspace && mkdir -m 777 ~/.npm-global \\\n    && ln -s /codewind-workspace /projects\n\n\n######### Extensions setup.\n#RUN mkdir /extensions\nCOPY /extensions /extensions\n\n\n\n######### File watcher setup.\nRUN mkdir /file-watcher\nWORKDIR /file-watcher\n\nCOPY /file-watcher/dockerfiles /file-watcher/dockerfiles\nCOPY /file-watcher/scripts /file-watcher/scripts\nCOPY /file-watcher/server /file-watcher/server\n\nWORKDIR /file-watcher/server\nENV PATH=/node-v13.13.0-linux-ppc64le/bin:$PATH\n\n# Install w/ dev dependencies and do linting first, then delete node_modules and reinstall using production flag\nRUN npm config set prefix '~/.npm-global' &&  npm ci \\\n    && npm run build \\\n    && rm -rf node_modules \\\n    && npm ci --production \\\n    && mkdir /file-watcher/fwdata \\\n    && npm cache clean --force -f \\\n    && npm pack nodemon\n\n# Copy translation files to the distribution directory\nRUN cp -r src/utils/locales dist/utils/locales\n\n######### Portal setup\n# This is copied in a later build stage.\n# Changes outside /portal will be lost.\nFROM codewind-pfe-base as codewind-pfe-portal\n\n#RUN mkdir /portal\nCOPY /portal /portal\n\n#WORKDIR /portal\n#COPY /portal/package.json /portal/package-lock.json /portal/\n#COPY /portal/sudoers /etc/sudoers\n\n#COPY /portal/npm-start.sh /portal/nodemon.json /portal/\n#COPY /portal/eslint-rules /portal/eslint-rules\n#RUN chmod -R +rx /portal/npm-start.sh\n\n#COPY /portal/.env /portal/.env\n#COPY /portal/server.js /portal/\n#COPY /portal/modules /portal/modules\n#COPY /portal/routes /portal/routes\n#COPY /portal/controllers /portal/controllers\n#COPY /portal/config /portal/config\n#COPY /portal/middleware /portal/middleware\n#COPY /portal/docs /portal/docs\n\nFROM codewind-pfe-base\n\n# Don't force a file-watcher rebuild on a portal change.\n# (Improves development builds significantly.)\nCOPY --from=codewind-pfe-portal /portal /portal\nWORKDIR /portal\n\nENV PATH=/node-v13.13.0-linux-ppc64le/bin:$PATH\n\nARG NODE_ENV=production\n\nRUN NODE_ENV=${NODE_ENV} npm ci \\\n    && npm cache clean --force -f\n\n# Do the idc copy at the end since IDC is rebuilt as part of the build process and will cause the docker cache at this step to change\n# and trigger all steps after this one to be executed instead of using the docker image cache. All steps after this one should be short\n# to save time on local builds.\nCOPY /file-watcher/idc /file-watcher/idc\n#RUN chmod -R +rx /file-watcher/idc\n\n\n# Move the license files to the root directory\n# to satisfy requirement from legal\n# and chmod files which need to be executable\nRUN mv /portal/LICENSE /portal/NOTICE.md / \\\n    && chmod -R +rx /portal/npm-start.sh \\\n    && chmod -R +rx /file-watcher/idc\n\nEXPOSE 9090\n\n# Moved the FORCE_COLOR env var for colored logs from root-watcher.sh to the Dockerfile\n#ENV FORCE_COLOR=1\nARG IMAGE_BUILD_TIME\nARG ENABLE_CODE_COVERAGE=false\nENV NODE_ENV=${NODE_ENV} \\\n    IMAGE_BUILD_TIME=${IMAGE_BUILD_TIME} \\\n    ENABLE_CODE_COVERAGE=${ENABLE_CODE_COVERAGE} \\\n    FORCE_COLOR=1 \\\n    LOG_LEVEL=info\n\n\n# TODO, work out how to start everything.\nWORKDIR /\nCMD [ \"sh\", \"-c\", \" /file-watcher/scripts/root-watcher.sh ${HOST_WORKSPACE_DIRECTORY} ${CONTAINER_WORKSPACE_DIRECTORY} ; cd /portal ; npm start ;\" ]\n"
}