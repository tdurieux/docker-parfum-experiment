{
  "startTime": 1674255021802,
  "endTime": 1674255023385,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanUseForce",
      "position": {
        "lineStart": 225,
        "lineEnd": 225,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanUseForce",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# the different stages of this Dockerfile are meant to be built into separate images\n# https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n# https://docs.docker.com/compose/compose-file/#target\n# https://docs.docker.com/compose/environment-variables/\n\n# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\n\nFROM php:7.4-fpm-alpine as php\n\nENV COMPOSER_ALLOW_SUPERUSER 1\nENV COMPOSER_HOME /tmp\nENV COMPOSER_MEMORY_LIMIT -1\nARG NEWRELIC_URL=https://download.newrelic.com/php_agent/archive/9.14.0.290/newrelic-php5-9.14.0.290-linux-musl.tar.gz\nARG NEWRELIC_SHA256SUM=9842f06c0834e02b2bb31e6349893532384c836a6cddccb57e827b7670e487a8\n\nCOPY --from=composer /usr/bin/composer /usr/bin/composer\n\n# required packages and PHP extensionns\nRUN set -eux ; \\\n    # Non dev packages\n    apk add  --no-cache git  \\\n        zip \\\n        unzip \\\n        curl \\\n        rabbitmq-c \\\n        libpq \\\n        icu-libs \\\n        graphviz \\\n        acl \\\n        fcgi  \\\n        bash \\\n        libcurl \\\n        gettext \\\n        gnu-libiconv \\\n        libpng \\\n        libjpeg \\\n        freetype \\\n        libwebp \\\n        imagemagick \\\n        libxpm \\\n        libzip  \\\n        busybox-suid ; \\\n    # dev packages\n    apk add --no-cache --virtual .fetch-deps \\\n        icu-dev \\\n        postgresql-dev \\\n        rabbitmq-c-dev \\\n        autoconf \\\n        musl-dev \\\n        gcc \\\n        g++ \\\n        make \\\n        pkgconf \\\n        file \\\n        curl-dev \\\n        libpng-dev \\\n        jpeg-dev \\\n        freetype-dev \\\n        libwebp-dev \\\n        libzip-dev \\\n        imagemagick-dev \\\n        libxpm-dev ; \\\n    docker-php-ext-configure gd   \\\n    --with-webp \\\n    --with-jpeg \\\n    --with-xpm \\\n    --with-freetype ; \\\n    docker-php-ext-install -j$(nproc) \\\n    pdo  \\\n    pdo_pgsql \\\n    intl \\\n    pcntl  \\\n    gd \\\n    exif  \\\n    zip  \\\n    opcache ; \\\n    pecl install amqp ; \\\n    pecl install xdebug; \\\n    pecl install imagick ; \\\n    docker-php-ext-enable amqp ; \\\n    docker-php-ext-enable xdebug ; \\\n    docker-php-ext-enable imagick ; \\\n    # newrelic\n    mkdir -p /tmp/newrelic ; \\\n    cd /tmp/newrelic ; \\\n    curl -f -L \"${NEWRELIC_URL}\" -o newrelic.tar.gz; \\\n    sha256sum newrelic.tar.gz  | grep \"${NEWRELIC_SHA256SUM}\" ; \\\n    tar -xf newrelic.tar.gz ; rm newrelic.tar.gz \\\n    NR_INSTALL_USE_CP_NOT_LN=1  NR_INSTALL_SILENT=1 ./newrelic-php5-*/newrelic-install install ; \\\n    rm -rf /tmp/newrelic ; \\\n    php --version ; \\\n    rm -rf /tmp/* ; \\\n    update-ca-certificates\n    # newrelic\n\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php\n\nCOPY ./config/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nCOPY ./config/php/php-fpm.d/zzz-01-healthcheck.conf /usr/local/etc/php-fpm.d/zzz-01-healthcheck.conf\nCOPY ./config/php/php-fpm-healthcheck.sh /usr/local/bin/php-fpm-healthcheck\nCOPY ./config/php/php-ini-directives.ini.template /usr/local/etc/php/php-ini-directives.ini.template\n\n# install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching) \\\nRUN set -eux ; \\\n    chmod +x /usr/local/bin/docker-entrypoint; \\\n    chmod 755 /usr/local/bin/php-fpm-healthcheck ; \\\n    composer --ansi --version --no-interaction; \\\n    composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative; \\\n\tcomposer clear-cache;\n\nHEALTHCHECK --start-period=5m  CMD php-fpm-healthcheck\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n\nWORKDIR /srv/app\n\nCOPY  backend/composer.json \\\n    backend/composer.lock \\\n    backend/symfony.lock \\\n    backend/.env \\\n    backend/.env.test \\\n    backend/phpunit.xml.dist \\\n    backend/phpstan.neon.dist \\\n    backend/phpcs.xml.dist \\\n    backend/behat.yml.dist \\\n    backend/build.xml \\\n      ./\n\nRUN set -eux; \\\n\tcomposer install --prefer-dist --no-autoloader --no-scripts --no-progress --no-suggest; \\\n\tmkdir -p config/jwt var/cache var/log import export public/multimedia public/thumbnail public/avatar; \\\n\tcomposer clear-cache\n\nCOPY backend/bin bin/\nCOPY backend/config config/\nCOPY backend/module module/\nCOPY backend/public public/\nCOPY backend/src src/\nCOPY backend/templates templates/\nCOPY backend/translations translations/\n\n\n#clean up\nRUN set -eux; \\\n    chmod +x bin/console; \\\n\tcomposer dump-autoload --optimize; \\\n\tcomposer dump-env prod; \\\n\tphp -d memory_limit=-1 bin/console cache:clear --env=prod --no-debug ; \\\n\tphp -d memory_limit=-1 bin/console cache:clear --env=dev; \\\n\tbin/console assets:install\n\nFROM php as php_production\n\t# do not use .env  in production\nRUN set -eux; \\\n    pecl uninstall xdebug ; \\\n    rm -f /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; \\\n    # remove unnecessary dev packages\n    apk del --no-network .fetch-deps ; \\\n    php --version ; \\\n\trm -f .env \\\n     .env.test \\\n     *.dist \\\n     *.md \\\n     config/jwt/*.pem \\\n     tests \\\n     features\n\n#copy app version if exists\nCOPY backend/.env backend/app.versio[n]  ./\n\nFROM nginx:1.17-alpine AS nginx\n\nRUN  set -eux; \\\n    apk add  --no-cache \\\n    curl \\\n    bash ; \\\n    rm -rf /tmp/*\n\nCOPY ./config/nginx/conf.d/http-directives.conf.template /etc/nginx/conf.d/http-directives.conf.template\nCOPY ./config/nginx/conf.d/symfony-development.conf.template /etc/nginx/conf.d/symfony-development.conf.template\nCOPY ./config/nginx/conf.d/symfony-production.conf.template /etc/nginx/conf.d/symfony-production.conf.template\nCOPY ./config/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY ./config/nginx/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nCOPY --from=php /srv/app/public /srv/app/public\n\nRUN chmod +x /usr/local/bin/docker-entrypoint\n\nHEALTHCHECK --start-period=5m CMD curl --fail http://localhost/healthcheck.json || exit 1\n\nENV NGINX_HTTP_DIRECTIVES=\"client_max_body_size 250m;\"\n\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\nFROM node:12.6-alpine as node\n\nCOPY config/node/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN  set -eux; \\\n    chmod +x /usr/local/bin/docker-entrypoint ; \\\n    apk add  --no-cache \\\n    curl \\\n    bash \\\n    git\n\n\nENTRYPOINT [\"docker-entrypoint\"]\n\nFROM node as nuxtjs\n\nWORKDIR /srv/app\n\nHEALTHCHECK --start-period=5m CMD curl --fail http://localhost || exit 1\n\nENV HOST=0.0.0.0\nENV PORT=80\n\nWORKDIR /srv/app\n\nCOPY frontend /srv/app/\n\nRUN set -eux; \\\n    npm install ; \\\n    npm run modules:all ; \\\n    NODE_ENV=production API_BASE_URL=http://localhost:8000/api/v1/ npm run build ; \\\n    #clean up\n    npm cache clean --force -f; \\\n    rm -f .env\n\nCMD [\"npm\", \"run\", \"dev\"]\n\nFROM nuxtjs as nuxtjs_production\n\nWORKDIR /srv/app\n\n#copy app version if exists\nCOPY frontend/.env.dist frontend/app.versio[n]  ./\n\nCMD [\"npm\", \"run\", \"start\"]\n\nFROM node as docsify\n\nRUN set -eux; \\\n    npm install docsify-cli -g ; \\\n    npm cache clean --force -f\n\nHEALTHCHECK --start-period=5m CMD curl --fail http://localhost:3000 || exit 1\n\nCMD [\"docsify\", \"serve\" ,\"docs\"]\n\nFROM postgres:10-alpine as postgres\n\nCOPY ./config/postgres/docker-entrypoint-initdb.d /docker-entrypoint-initdb.d\nCOPY ./config/postgres/postgres-healthcheck.sh  /usr/local/bin/postgres-healthcheck.sh\nCOPY ./config/postgres/ergonode-common-functions.sh /usr/local/bin/ergonode-common-functions.sh\n\nRUN chmod +x /usr/local/bin/postgres-healthcheck.sh\n\nHEALTHCHECK --start-period=5m CMD bash -c /usr/local/bin/postgres-healthcheck.sh\n\nFROM rabbitmq:3.8-management-alpine as rabbitmq-management\n\nCOPY config/rabbitmq/rabbitmq-healthcheck.sh  /usr/local/bin/rabbitmq-healthcheck.sh\nCOPY config/rabbitmq/rabbitmq.conf.template /etc/rabbitmq/rabbitmq.conf.template\nCOPY config/rabbitmq/docker-ergonode-entrypoint.sh /usr/local/bin/docker-ergonode-entrypoint\n\nRUN  set -eux; \\\n    chmod +x /usr/local/bin/rabbitmq-healthcheck.sh ; \\\n    chmod +x /usr/local/bin/docker-ergonode-entrypoint ; \\\n    rabbitmq-plugins enable --offline rabbitmq_peer_discovery_consul  ; \\\n    apk add --no-cache gettext\n\n\nHEALTHCHECK --start-period=2m CMD bash -c /usr/local/bin/rabbitmq-healthcheck.sh\n\n\nENTRYPOINT [\"docker-ergonode-entrypoint\"]\nCMD [\"rabbitmq-server\"]\n\nFROM haproxy:2.1-alpine as haproxy\nRUN set -eux ; \\\n    apk add  --no-cache curl\n\nCOPY config/haproxy/haproxy.cfg /usr/local/etc/haproxy/haproxy.cfg\n"
}