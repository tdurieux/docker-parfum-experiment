{
  "startTime": 1674250186995,
  "endTime": 1674250188139,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM goreleaser/goreleaser:v1.7.0 AS builder\nARG GORELEASER_ARGS\n\nRUN echo ${GORELEASER_ARGS}\n\nCOPY . /code/\nWORKDIR /code/\nRUN goreleaser build --single-target --skip-validate ${GORELEASER_ARGS}\n\nFROM alpine:3.14\n\nARG TERRAFORM_VERSION\nENV TERRAFORM_VERSION=${TERRAFORM_VERSION:-1.1.3}\n\nENV SOPS_VERSION=3.7.2\nENV AZURE_CLI_VERSION=2.34.1\nENV TERRAFORM_EXTERNAL_VERSION=2.2.2\nENV TERRAFORM_AZURE_VERSION=2.99.0\nENV TERRAFORM_AWS_VERSION=3.74.1\nENV TERRAFORM_NULL_VERSION=2.1.2\nENV TERRAFORM_COMMERCETOOLS_VERSION=0.30.0\nENV TERRAFORM_CONTENTFUL_VERSION=0.1.0\nENV TERRAFORM_AMPLIENCE_VERSION=0.3.7\nENV TERRAFORM_SENTRY_VERSION=0.7.0\n\nRUN apk add --no-cache --virtual .build-deps g++ libffi-dev openssl-dev wget unzip make \\\n    && apk add --no-cache bash ca-certificates git libc6-compat openssl openssh-client jq curl\n\n# For AWS\nRUN apk add --no-cache --update aws-cli\n\n# For Azure\nRUN apk add --no-cache python3-dev py3-pip py3-bcrypt py3-pynacl\n\n# Update pip so that we can install a wheel of cryptography\nRUN python3 -m pip install --upgrade pip\n\n# Install Azure CLI\nRUN pip --no-cache-dir install azure-cli==${AZURE_CLI_VERSION}\n\n# Install SOPS\nRUN cd /tmp && \\\n    wget https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64 && \\\n    /usr/bin/install sops-v3.7.2.linux.amd64 /usr/local/bin/sops && \\\n    rm -rf /tmp/*\n\n# Install terraform\nRUN cd /tmp && \\\n    wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/bin && \\\n    rm -rf /tmp/*\n\nRUN mkdir /code /deployments\n\n# Pre-install Terreform plugins\nENV TF_PLUGIN_CACHE_DIR=/home/mach-composer/.terraform.d/plugin-cache\nENV TERRAFORM_PLUGINS_PATH=/home/mach-composer/.terraform.d/plugins/linux_amd64\nRUN mkdir -p ${TF_PLUGIN_CACHE_DIR}\nRUN mkdir -p ${TERRAFORM_PLUGINS_PATH}\n\n# Install null provider\nRUN cd /tmp && \\\n    wget https://releases.hashicorp.com/terraform-provider-null/${TERRAFORM_NULL_VERSION}/terraform-provider-null_${TERRAFORM_NULL_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform-provider-null_${TERRAFORM_NULL_VERSION}_linux_amd64.zip -d ${TERRAFORM_PLUGINS_PATH} && \\\n    rm -rf /tmp/*\n\n# Install external provider\nRUN cd /tmp && \\\n    wget https://releases.hashicorp.com/terraform-provider-external/${TERRAFORM_EXTERNAL_VERSION}/terraform-provider-external_${TERRAFORM_EXTERNAL_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform-provider-external_${TERRAFORM_EXTERNAL_VERSION}_linux_amd64.zip -d ${TERRAFORM_PLUGINS_PATH} && \\\n    rm -rf /tmp/*\n\n# Install aws provider\nRUN cd /tmp && \\\n    wget https://releases.hashicorp.com/terraform-provider-aws/${TERRAFORM_AWS_VERSION}/terraform-provider-aws_${TERRAFORM_AWS_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform-provider-aws_${TERRAFORM_AWS_VERSION}_linux_amd64.zip -d ${TERRAFORM_PLUGINS_PATH} && \\\n    rm -rf /tmp/*\n\n# Install azure provider\nRUN cd /tmp && \\\n    wget https://releases.hashicorp.com/terraform-provider-azurerm/${TERRAFORM_AZURE_VERSION}/terraform-provider-azurerm_${TERRAFORM_AZURE_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform-provider-azurerm_${TERRAFORM_AZURE_VERSION}_linux_amd64.zip -d ${TERRAFORM_PLUGINS_PATH} && \\\n    rm -rf /tmp/*\n\n# Install commercetools provider\nRUN cd /tmp && \\\n    wget https://github.com/labd/terraform-provider-commercetools/releases/download/v${TERRAFORM_COMMERCETOOLS_VERSION}/terraform-provider-commercetools_${TERRAFORM_COMMERCETOOLS_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform-provider-commercetools_${TERRAFORM_COMMERCETOOLS_VERSION}_linux_amd64.zip -d ${TERRAFORM_PLUGINS_PATH} && \\\n    rm -rf /tmp/*\n\n# Install contentful provider\nRUN cd /tmp && \\\n    wget https://github.com/labd/terraform-provider-contentful/releases/download/v${TERRAFORM_CONTENTFUL_VERSION}/terraform-provider-contentful_${TERRAFORM_CONTENTFUL_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform-provider-contentful_${TERRAFORM_CONTENTFUL_VERSION}_linux_amd64.zip -d ${TERRAFORM_PLUGINS_PATH} && \\\n    rm -rf /tmp/*\n\n# Install amplience provider\nRUN cd /tmp && \\\n    wget https://github.com/labd/terraform-provider-amplience/releases/download/v${TERRAFORM_AMPLIENCE_VERSION}/terraform-provider-amplience_${TERRAFORM_AMPLIENCE_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform-provider-amplience_${TERRAFORM_AMPLIENCE_VERSION}_linux_amd64.zip -d ${TERRAFORM_PLUGINS_PATH} && \\\n    rm -rf /tmp/*\n\n# Install sentry provider\nRUN cd /tmp && \\\n    wget https://github.com/jianyuan/terraform-provider-sentry/releases/download/v${TERRAFORM_SENTRY_VERSION}/terraform-provider-sentry_${TERRAFORM_SENTRY_VERSION}_linux_amd64.zip && \\\n    unzip -n terraform-provider-sentry_${TERRAFORM_SENTRY_VERSION}_linux_amd64.zip -d ${TERRAFORM_PLUGINS_PATH} && \\\n    rm -rf /tmp/*\n\nCOPY --from=builder /code/dist/mach-composer_linux_amd64/mach-composer /usr/local/bin\nRUN ln -s /usr/local/bin/mach-composer /usr/local/bin/mach\n\nENTRYPOINT [\"mach-composer\"]\n"
}