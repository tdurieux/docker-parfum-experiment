diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ging/fiware-pep-proxy/extras/docker/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ging/fiware-pep-proxy/extras/docker/Dockerfile/repaired.Dockerfile
index 4154cd1..79cf1bd 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ging/fiware-pep-proxy/extras/docker/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ging/fiware-pep-proxy/extras/docker/Dockerfile/repaired.Dockerfile
@@ -13,7 +13,7 @@ ARG USER=node
 
 ########################################################################################
 #
-# This build stage retrieves the source code from GitHub. The default download is the 
+# This build stage retrieves the source code from GitHub. The default download is the
 # latest tip of the master of the named repository on GitHub.
 #
 # To obtain the latest stable release run this Docker file with the parameters:
@@ -22,12 +22,12 @@ ARG USER=node
 # To obtain any specific version of a release run this Docker file with the parameters:
 # --no-cache --build-arg DOWNLOAD=1.7.0
 #
-# For development purposes, to create a development image including a running Distro, 
+# For development purposes, to create a development image including a running Distro,
 # run this Docker file with the parameter:
 #
 # --target=builder
 #
-######################################################################################## 
+########################################################################################
 FROM ${BUILDER} AS builder
 ARG TARGET
 ARG GITHUB_ACCOUNT
@@ -45,10 +45,10 @@ USER root
 RUN \
 	if [ "${PACKAGE_MANAGER}" = "apt"  ]; then \
 		echo -e "\033[0;34mINFO: Using default \"${PACKAGE_MANAGER}\".\033[0m"; \
-		apt-get install -y --no-install-recommends unzip; \
+		apt-get install -y --no-install-recommends unzip; rm -rf /var/lib/apt/lists/*; \
 	elif [ "${PACKAGE_MANAGER}" = "yum"  ]; then \
 		echo -e "\033[0;33mWARNING: Overriding default package manager. Using \"${PACKAGE_MANAGER}\" .\033[0m"; \
-		yum install -y unzip; \
+		yum install -y unzip; rm -rf /var/cache/yum \
 		yum clean all; \
 	elif [ "${PACKAGE_MANAGER}" = "apk"  ]; then \
 		echo -e "\033[0;33mWARNING: Overriding default package manager. Using \"${PACKAGE_MANAGER}\" .\033[0m"; \
@@ -58,8 +58,8 @@ RUN \
 	 	exit 1; \
 	fi
 
-# As an Alternative for local development, just copy this Dockerfile into file the root of 
-# the repository and replace the whole RUN statement below by the following COPY statement 
+# As an Alternative for local development, just copy this Dockerfile into file the root of
+# the repository and replace the whole RUN statement below by the following COPY statement
 # in your local source using :
 #
 # COPY . ${TARGET}/
@@ -71,14 +71,14 @@ RUN \
 		echo "INFO: Building Latest Development from ${SOURCE_BRANCH} branch."; \
 	elif [ "${DOWNLOAD}" = "stable" ]; \
 	then \
-		RELEASE=$(curl -s https://api.github.com/repos/"${GITHUB_ACCOUNT}"/"${GITHUB_REPOSITORY}"/releases/latest | grep 'tag_name' | cut -d\" -f4); \
+		RELEASE=$( curl -f -s https://api.github.com/repos/"${GITHUB_ACCOUNT}"/"${GITHUB_REPOSITORY}"/releases/latest | grep 'tag_name' | cut -d\" -f4) ; \
 		echo "INFO: Building Latest Stable Release: ${RELEASE}"; \
 	else \
 	 	RELEASE="${DOWNLOAD}"; \
 	 	echo "INFO: Building Release: ${RELEASE}"; \
 	fi && \
 	RELEASE_CONCAT=$(echo "${RELEASE}" | tr / -); \
-	curl -s -L https://github.com/"${GITHUB_ACCOUNT}"/"${GITHUB_REPOSITORY}"/archive/"${RELEASE}".zip > source.zip && \
+	curl -f -s -L https://github.com/"${GITHUB_ACCOUNT}"/"${GITHUB_REPOSITORY}"/archive/"${RELEASE}".zip > source.zip && \
 	unzip source.zip -x "*/.github/**" "*/test/**" "*/sanity/**" "*/extras/**" "*/signatures/**" "*/doc/**" "*/.*" && \
 	rm source.zip && \
 	mv "${GITHUB_REPOSITORY}-${RELEASE_CONCAT}" /opt/fiware-pep-proxy
@@ -88,7 +88,7 @@ WORKDIR /opt/fiware-pep-proxy
 # hadolint ignore=DL3008
 RUN \
 	echo "INFO: npm install --production..." && \
-	npm install --only=prod --no-package-lock --no-optional --unsafe-perm
+	npm install --only=prod --no-package-lock --no-optional --unsafe-perm && npm cache clean --force;
 
 ########################################################################################
 #
@@ -106,8 +106,8 @@ RUN sed -i -r "/^(root|nobody)/!d" /etc/passwd /etc/shadow /etc/group \
 #
 # This build stage creates a distroless image for production.
 #
-# IMPORTANT: For production environments use Docker Secrets to protect values of the 
-# sensitive ENV variables defined below, by adding _FILE to the name of the relevant 
+# IMPORTANT: For production environments use Docker Secrets to protect values of the
+# sensitive ENV variables defined below, by adding _FILE to the name of the relevant
 # variable.
 #
 # -  PEP_PROXY_USERNAME
@@ -152,8 +152,8 @@ HEALTHCHECK  --interval=30s --timeout=3s --start-period=60s \
 #
 # This build stage creates a node-slim image for production.
 #
-# IMPORTANT: For production environments use Docker Secrets to protect values of the 
-# sensitive ENV variables defined below, by adding _FILE to the name of the relevant 
+# IMPORTANT: For production environments use Docker Secrets to protect values of the
+# sensitive ENV variables defined below, by adding _FILE to the name of the relevant
 # variable.
 #
 # -  PEP_PROXY_USERNAME
@@ -196,7 +196,7 @@ CMD ["npm", "start"]
 HEALTHCHECK  --interval=30s --timeout=3s --start-period=60s \
   CMD ["npm", "run", "healthcheck"]
 
-# 
+#
 # ALL ENVIRONMENT VARIABLES
 #
 #    PEP_PROXY_PORT