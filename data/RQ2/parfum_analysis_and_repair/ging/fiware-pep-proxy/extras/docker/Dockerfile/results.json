{
  "startTime": 1674216879895,
  "endTime": 1674216881272,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 12,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 1,
        "columnEnd": 111
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 1,
        "columnEnd": 70
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 2,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 2,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 2,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 2,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "ARG NODE_VERSION=14\nARG GITHUB_ACCOUNT=ging\nARG GITHUB_REPOSITORY=fiware-pep-proxy\nARG DOWNLOAD=latest\nARG SOURCE_BRANCH=master\n\n# Default Builder, distro and distroless build version\nARG BUILDER=node:${NODE_VERSION}\nARG DISTRO=node:${NODE_VERSION}-slim\nARG DISTROLESS=gcr.io/distroless/nodejs:${NODE_VERSION}\nARG PACKAGE_MANAGER=apt\nARG USER=node\n\n########################################################################################\n#\n# This build stage retrieves the source code from GitHub. The default download is the\n# latest tip of the master of the named repository on GitHub.\n#\n# To obtain the latest stable release run this Docker file with the parameters:\n# --no-cache --build-arg DOWNLOAD=stable\n#\n# To obtain any specific version of a release run this Docker file with the parameters:\n# --no-cache --build-arg DOWNLOAD=1.7.0\n#\n# For development purposes, to create a development image including a running Distro,\n# run this Docker file with the parameter:\n#\n# --target=builder\n#\n########################################################################################\nFROM ${BUILDER} AS builder\nARG TARGET\nARG GITHUB_ACCOUNT\nARG GITHUB_REPOSITORY\nARG DOWNLOAD\nARG SOURCE_BRANCH\nARG PACKAGE_MANAGER\n\n# hadolint ignore=DL3002\nUSER root\n# Ensure that the chosen package manger is supported by this Dockerfile\n# also ensure that unzip is installed prior to downloading sources\n\n# hadolint ignore=SC2039\nRUN \\\n\tif [ \"${PACKAGE_MANAGER}\" = \"apt\"  ]; then \\\n\t\techo -e \"\\033[0;34mINFO: Using default \\\"${PACKAGE_MANAGER}\\\".\\033[0m\"; \\\n\t\tapt-get install -y --no-install-recommends unzip; rm -rf /var/lib/apt/lists/*; \\\n\telif [ \"${PACKAGE_MANAGER}\" = \"yum\"  ]; then \\\n\t\techo -e \"\\033[0;33mWARNING: Overriding default package manager. Using \\\"${PACKAGE_MANAGER}\\\" .\\033[0m\"; \\\n\t\tyum install -y unzip; rm -rf /var/cache/yum \\\n\t\tyum clean all; \\\n\telif [ \"${PACKAGE_MANAGER}\" = \"apk\"  ]; then \\\n\t\techo -e \"\\033[0;33mWARNING: Overriding default package manager. Using \\\"${PACKAGE_MANAGER}\\\" .\\033[0m\"; \\\n\t\tapk --no-cache --update-cache add gcc python3 python3-dev py-pip build-base wget curl; \\\n\telse \\\n\t \techo -e \"\\033[0;31mERROR: Package Manager \\\"${PACKAGE_MANAGER}\\\" not supported.\\033[0m\"; \\\n\t \texit 1; \\\n\tfi\n\n# As an Alternative for local development, just copy this Dockerfile into file the root of\n# the repository and replace the whole RUN statement below by the following COPY statement\n# in your local source using :\n#\n# COPY . ${TARGET}/\n#\nRUN \\\n\tif [ \"${DOWNLOAD}\" = \"latest\" ] ; \\\n\tthen \\\n\t\tRELEASE=\"${SOURCE_BRANCH}\"; \\\n\t\techo \"INFO: Building Latest Development from ${SOURCE_BRANCH} branch.\"; \\\n\telif [ \"${DOWNLOAD}\" = \"stable\" ]; \\\n\tthen \\\n\t\tRELEASE=$( curl -f -s https://api.github.com/repos/\"${GITHUB_ACCOUNT}\"/\"${GITHUB_REPOSITORY}\"/releases/latest | grep 'tag_name' | cut -d\\\" -f4) ; \\\n\t\techo \"INFO: Building Latest Stable Release: ${RELEASE}\"; \\\n\telse \\\n\t \tRELEASE=\"${DOWNLOAD}\"; \\\n\t \techo \"INFO: Building Release: ${RELEASE}\"; \\\n\tfi && \\\n\tRELEASE_CONCAT=$(echo \"${RELEASE}\" | tr / -); \\\n\tcurl -f -s -L https://github.com/\"${GITHUB_ACCOUNT}\"/\"${GITHUB_REPOSITORY}\"/archive/\"${RELEASE}\".zip > source.zip && \\\n\tunzip source.zip -x \"*/.github/**\" \"*/test/**\" \"*/sanity/**\" \"*/extras/**\" \"*/signatures/**\" \"*/doc/**\" \"*/.*\" && \\\n\trm source.zip && \\\n\tmv \"${GITHUB_REPOSITORY}-${RELEASE_CONCAT}\" /opt/fiware-pep-proxy\n\nWORKDIR /opt/fiware-pep-proxy\n\n# hadolint ignore=DL3008\nRUN \\\n\techo \"INFO: npm install --production...\" && \\\n\tnpm install --only=prod --no-package-lock --no-optional --unsafe-perm && npm cache clean --force;\n\n########################################################################################\n#\n# This build stage creates an anonymous user to be used with the distroless build\n# as defined below.\n#\n########################################################################################\nFROM ${BUILDER} AS anon-user\n# hadolint ignore=DL3002\nUSER root\nRUN sed -i -r \"/^(root|nobody)/!d\" /etc/passwd /etc/shadow /etc/group \\\n    && sed -i -r 's#^(.*):[^:]*$#\\1:/sbin/nologin#' /etc/passwd\n\n########################################################################################\n#\n# This build stage creates a distroless image for production.\n#\n# IMPORTANT: For production environments use Docker Secrets to protect values of the\n# sensitive ENV variables defined below, by adding _FILE to the name of the relevant\n# variable.\n#\n# -  PEP_PROXY_USERNAME\n# -  PEP_PROXY_ASSWORD\n# -  PEP_PROXY_TOKEN_SECRET\n#\n########################################################################################\n\nFROM ${DISTROLESS} AS distroless\nARG GITHUB_ACCOUNT\nARG GITHUB_REPOSITORY\nARG NODE_VERSION\n\nLABEL \"maintainer\"=\"FIWARE Identity Manager Team. DIT-UPM\"\nLABEL \"description\"=\"Support for proxy functions within OAuth2-based authentication schemas. Also implements PEP functions within an XACML-based access control schema.\"\nLABEL \"name\"=\"pep-proxy\"\nLABEL \"summary\"=\"PEP Proxy - Wilma (Distroless)\"\n\nLABEL \"org.opencontainers.image.authors\"=\"\"\nLABEL \"org.opencontainers.image.documentation\"=\"https://fiware-idm.readthedocs.io/\"\nLABEL \"org.opencontainers.image.vendor\"=\"Universidad Politécnica de Madrid.\"\nLABEL \"org.opencontainers.image.licenses\"=\"MIT\"\nLABEL \"org.opencontainers.image.title\"=\"PEP Proxy - Wilma (Distroless)\"\nLABEL \"org.opencontainers.image.description\"=\"Support for proxy functions within OAuth2-based authentication schemas. Also implements PEP functions within an XACML-based access control schema.\"\nLABEL \"org.opencontainers.image.source\"=https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPOSITORY}\nLABEL \"org.nodejs.version\"=${NODE_VERSION}\n\nCOPY --from=builder /opt/fiware-pep-proxy /opt/fiware-pep-proxy\nCOPY --from=anon-user /etc/passwd /etc/shadow /etc/group /etc/\nWORKDIR /opt/fiware-pep-proxy\n\nUSER nobody\nENV NODE_ENV=production\n# Ports used by application\nEXPOSE ${PEP_PROXY_PORT:-1027}\nCMD [\"./bin/www\"]\nHEALTHCHECK  --interval=30s --timeout=3s --start-period=60s \\\n  CMD [\"/nodejs/bin/node\", \"./bin/healthcheck\"]\n\n\n########################################################################################\n#\n# This build stage creates a node-slim image for production.\n#\n# IMPORTANT: For production environments use Docker Secrets to protect values of the\n# sensitive ENV variables defined below, by adding _FILE to the name of the relevant\n# variable.\n#\n# -  PEP_PROXY_USERNAME\n# -  PEP_PASSWORD\n# -  PEP_TOKEN_SECRET\n#\n########################################################################################\n\nFROM ${DISTRO} AS slim\nARG GITHUB_ACCOUNT\nARG GITHUB_REPOSITORY\nARG NODE_VERSION\nARG USER\n\n\nLABEL \"maintainer\"=\"FIWARE Identity Manager Team. DIT-UPM\"\nLABEL \"description\"=\"Support for proxy functions within OAuth2-based authentication schemas. Also implements PEP functions within an XACML-based access control schema.\"\nLABEL \"name\"=\"pep-proxy\"\nLABEL \"summary\"=\"PEP Proxy - Wilma\"\n\nLABEL \"org.opencontainers.image.authors\"=\"\"\nLABEL \"org.opencontainers.image.documentation\"=\"https://fiware-idm.readthedocs.io/\"\nLABEL \"org.opencontainers.image.vendor\"=\"Universidad Politécnica de Madrid.\"\nLABEL \"org.opencontainers.image.licenses\"=\"MIT\"\nLABEL \"org.opencontainers.image.title\"=\"PEP Proxy - Wilma\"\nLABEL \"org.opencontainers.image.description\"=\"Support for proxy functions within OAuth2-based authentication schemas. Also implements PEP functions within an XACML-based access control schema.\"\nLABEL \"org.opencontainers.image.source\"=https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPOSITORY}\nLABEL \"org.nodejs.version\"=${NODE_VERSION}\n\nCOPY --from=builder /opt/fiware-pep-proxy /opt/fiware-pep-proxy\nCOPY --from=builder /opt/fiware-pep-proxy/LICENSE /licenses/LICENSE\nWORKDIR /opt/fiware-pep-proxy\n\n# Node by default, use 406 for Alpine, 1001 for UBI,\nUSER ${USER}\nENV NODE_ENV=production\n# Ports used by application\nEXPOSE ${PEP_PROXY_PORT:-1027}\nCMD [\"npm\", \"start\"]\nHEALTHCHECK  --interval=30s --timeout=3s --start-period=60s \\\n  CMD [\"npm\", \"run\", \"healthcheck\"]\n\n#\n# ALL ENVIRONMENT VARIABLES\n#\n#    PEP_PROXY_PORT\n#    PEP_PROXY_HTTPS_ENABLED\n#    PEP_PROXY_HTTPS_PORT\n#    PEP_PROXY_IDM_HOST\n#    PEP_PROXY_IDM_PORT\n#    PEP_PROXY_IDM_SSL_ENABLED\n#    PEP_PROXY_APP_HOST\n#    PEP_PROXY_APP_PORT\n#    PEP_PROXY_APP_SSL_ENABLED\n#    PEP_PROXY_ORG_ENABLED\n#    PEP_PROXY_ORG_HEADER\n#    PEP_PROXY_APP_ID\n#    PEP_PROXY_USERNAME\n#    PEP_PROXY_PASSWORD\n#    PEP_PROXY_TOKEN_SECRET\n#    PEP_PROXY_AUTH_ENABLED\n#    PEP_PROXY_PDP\n#    PEP_PROXY_TENANT_HEADER\n#    PEP_PROXY_AZF_PROTOCOL\n#    PEP_PROXY_AZF_HOST\n#    PEP_PROXY_AZF_PORT\n#    PEP_PROXY_AZF_CUSTOM_POLICY\n#    PEP_PROXY_PUBLIC_PATHS\n#    PEP_PROXY_AUTH_FOR_NGINX\n#    PEP_PROXY_MAGIC_KEY\n"
}