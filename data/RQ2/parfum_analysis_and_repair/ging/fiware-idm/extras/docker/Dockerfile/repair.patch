diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ging/fiware-idm/extras/docker/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ging/fiware-idm/extras/docker/Dockerfile/repaired.Dockerfile
index 73919bd..4cae3ae 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ging/fiware-idm/extras/docker/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ging/fiware-idm/extras/docker/Dockerfile/repaired.Dockerfile
@@ -14,7 +14,7 @@ ARG USER=node
 
 ########################################################################################
 #
-# This build stage retrieves the source code from GitHub. The default download is the 
+# This build stage retrieves the source code from GitHub. The default download is the
 # latest tip of the master of the named repository on GitHub.
 #
 # To obtain the latest stable release run this Docker file with the parameters:
@@ -23,7 +23,7 @@ ARG USER=node
 # To obtain any specific version of a release run this Docker file with the parameters:
 # --no-cache --build-arg DOWNLOAD=1.7.0
 #
-######################################################################################## 
+########################################################################################
 
 FROM ${BUILDER} as builder
 ARG GITHUB_ACCOUNT
@@ -45,10 +45,10 @@ RUN \
     if [ "${PACKAGE_MANAGER}" = "apt"  ]; then \
         echo -e "\033[0;34mINFO: Using default \"${PACKAGE_MANAGER}\".\033[0m"; \
         apt-get update; \
-        apt-get install -y --no-install-recommends unzip git; \
+        apt-get install -y --no-install-recommends unzip git; rm -rf /var/lib/apt/lists/*; \
     elif [ "${PACKAGE_MANAGER}" = "yum"  ]; then \
         echo -e "\033[0;33mWARNING: Overriding default package manager. Using \"${PACKAGE_MANAGER}\" .\033[0m"; \
-        yum install -y unzip git; \
+        yum install -y unzip git; rm -rf /var/cache/yum \
         yum clean all; \
     elif [ "${PACKAGE_MANAGER}" = "apk"  ]; then \
         echo -e "\033[0;33mWARNING: Overriding default package manager. Using \"${PACKAGE_MANAGER}\" .\033[0m"; \
@@ -58,8 +58,8 @@ RUN \
         exit 1; \
     fi
 
-# As an Alternative for local development, just copy this Dockerfile into file the root of 
-# the repository and replace the whole RUN statement below by the following COPY statement 
+# As an Alternative for local development, just copy this Dockerfile into file the root of
+# the repository and replace the whole RUN statement below by the following COPY statement
 # in your local source using :
 #
 # COPY . /opt/fiware-idm
@@ -73,14 +73,14 @@ RUN \
         echo "INFO: Building Latest Development from ${SOURCE_BRANCH} branch."; \
     elif [ "${DOWNLOAD}" = "stable" ]; \
     then \
-        RELEASE=$(curl -s https://api.github.com/repos/"${GITHUB_ACCOUNT}"/"${GITHUB_REPOSITORY}"/releases/latest | grep 'tag_name' | cut -d\" -f4); \
+        RELEASE=$( curl -f -s https://api.github.com/repos/"${GITHUB_ACCOUNT}"/"${GITHUB_REPOSITORY}"/releases/latest | grep 'tag_name' | cut -d\" -f4) ; \
         echo "INFO: Building Latest Stable Release: ${RELEASE}"; \
     else \
         RELEASE="${DOWNLOAD}"; \
         echo "INFO: Building Release: ${RELEASE}"; \
     fi && \
     RELEASE_CONCAT=$(echo "${RELEASE}" | tr / -); \
-    curl -s -L https://github.com/"${GITHUB_ACCOUNT}"/"${GITHUB_REPOSITORY}"/archive/"${RELEASE}".zip > source.zip && \
+    curl -f -s -L https://github.com/"${GITHUB_ACCOUNT}"/"${GITHUB_REPOSITORY}"/archive/"${RELEASE}".zip > source.zip && \
     unzip source.zip -x "*/test/**" "*/doc/**" "*/doc.ja/**" "*/extras/**" && \
     rm source.zip && \
     mv "${GITHUB_REPOSITORY}-${RELEASE_CONCAT}" /opt/fiware-idm
@@ -98,7 +98,7 @@ RUN \
     openssl x509 -req -in idm-2018-csr.pem -signkey idm-2018-key.pem -out idm-2018-cert.pem && \
     mv idm-2018-key.pem idm-2018-cert.pem idm-2018-csr.pem certs/ && \
     chmod 755 certs/idm-2018-key.pem && \
-    chmod -R 777 public
+    chmod -R 777 public && npm cache clean --force;
 
 ########################################################################################
 #
@@ -115,8 +115,8 @@ RUN sed -i -r "/^(root|nobody)/!d" /etc/passwd /etc/shadow /etc/group \
 #
 # This build stage creates a distroless build for production.
 #
-# IMPORTANT: For production environments use Docker Secrets to protect values of the 
-# sensitive ENV variables defined below, by adding _FILE to the name of the relevant 
+# IMPORTANT: For production environments use Docker Secrets to protect values of the
+# sensitive ENV variables defined below, by adding _FILE to the name of the relevant
 # variable.
 #
 #  - IDM_SESSION_SECRET
@@ -183,8 +183,8 @@ HEALTHCHECK  --interval=30s --timeout=3s --start-period=10s \
 #
 # This build stage creates a build for production.
 #
-# IMPORTANT: For production environments use Docker Secrets to protect values of the 
-# sensitive ENV variables defined below, by adding _FILE to the name of the relevant 
+# IMPORTANT: For production environments use Docker Secrets to protect values of the
+# sensitive ENV variables defined below, by adding _FILE to the name of the relevant
 # variable.
 #
 #  - IDM_SESSION_SECRET
@@ -253,7 +253,7 @@ CMD ["npm", "start"]
 HEALTHCHECK  --interval=30s --timeout=3s --start-period=60s \
   CMD ["npm", "run", "healthcheck"]
 
-# 
+#
 # ALL ENVIRONMENT VARIABLES
 #
 # ENV IDM_HOST "http://localhost"