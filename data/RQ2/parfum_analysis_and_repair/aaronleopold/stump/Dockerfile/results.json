{
  "startTime": 1674246757907,
  "endTime": 1674246759411,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ------------------------------------------------------------------------------\n# Frontend Build Stage\n# ------------------------------------------------------------------------------\n\nFROM node:16-alpine3.14 as frontend\nARG TARGETARCH\n\nWORKDIR /app\n\nCOPY apps/client/ .\n\nRUN npm install && npm cache clean --force;\nRUN npm run build\n\n# ------------------------------------------------------------------------------\n# Cargo Build Stage\n# ------------------------------------------------------------------------------\n\n######################\n### aarch64 / arm64 ##\n######################\n\nFROM messense/rust-musl-cross:aarch64-musl AS arm64-backend\n\nWORKDIR /app\n\nCOPY .cargo .cargo\nCOPY core/ .\n\n# Workaround as otherwise container would err during crates.io index updating\nENV CARGO_NET_GIT_FETCH_WITH_CLI=true\n\nRUN rustup target add aarch64-unknown-linux-musl\n\nRUN cargo build --release --target aarch64-unknown-linux-musl && \\\n    cp target/aarch64-unknown-linux-musl/release/stump .\n\n######################\n### armv7 / arm/v7 ###\n######################\n\n# Note: the name here isn't entirely accurate to my understanding. But I can't figure\n# out how to have the name be v7 inclusive so\nFROM messense/rust-musl-cross:armv7-musleabihf@sha256:3e133558686fd5059ce25749cece40a81d87dad2c7a68727c36a1bcacba6752c AS arm-backend\n\nWORKDIR /app\n\nCOPY .cargo .cargo\nCOPY core/ .\n\n# Workaround as otherwise container would err during crates.io index updating\nENV CARGO_NET_GIT_FETCH_WITH_CLI=true\n\nRUN rustup target add armv7-unknown-linux-musleabihf\n\nRUN cargo build --release --target armv7-unknown-linux-musleabihf && \\\n    cp target/armv7-unknown-linux-musleabihf/release/stump .\n\n######################\n### x86_64 / amd64 ###\n######################\n\nFROM messense/rust-musl-cross:x86_64-musl AS amd64-backend\n\nWORKDIR /app\n\nCOPY .cargo .cargo\nCOPY core/ .\n\nRUN rustup target add x86_64-unknown-linux-musl\n\nRUN cargo build --release --target x86_64-unknown-linux-musl && \\\n    cp target/x86_64-unknown-linux-musl/release/stump .\n\n######################\n## Conditional step ##\n######################\n\n# Conditional to skip non-targetarch build stages\nFROM ${TARGETARCH}-backend AS core-builder\n\n# ------------------------------------------------------------------------------\n# Final Stage\n# ------------------------------------------------------------------------------\nFROM alpine:latest\n\n# TODO: remove binutils, adding for debug options\nRUN apk add --no-cache libstdc++ binutils libc6-compat\n\nRUN addgroup -g 1000 stump\n\nRUN adduser -D -s /bin/sh -u 1000 -G stump stump\n\nWORKDIR /\n\n# create the config, data and app directories\nRUN mkdir -p config\nRUN mkdir -p data\nRUN mkdir -p app\n\n# copy the binary\nCOPY --from=core-builder /app/stump ./app/stump\n\n# copy the react build\nCOPY --from=frontend /app/build ./app/client\n\n# *sigh* Rocket requires the toml file at runtime, at CWD\nCOPY core/Rocket.toml ./app/Rocket.toml\n\nRUN chown stump:stump ./app/stump\n\nUSER stump\n\n# TODO: replace this with something more elegant lol maybe a bash case statement\nRUN ln -s /lib/ld-musl-aarch64.so.1 /lib/ld-linux-aarch64.so.1; exit 0\n\n# Default Stump environment variables\nENV STUMP_CONFIG_DIR=/config\nENV STUMP_CLIENT_DIR=/app/client\n\n# Default Rocket environment variables\nENV ROCKET_PROFILE=release\nENV ROCKET_LOG_LEVEL=normal\nENV ROCKET_PORT=10801\n\nWORKDIR /app\n\nCMD [\"./stump\"]\n"
}