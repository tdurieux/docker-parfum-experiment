{
  "startTime": 1674217742114,
  "endTime": 1674217743145,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rust:1.58 as build\n\n# create a new empty shell project\nRUN USER=root cargo new --bin asc\nWORKDIR /asciiframe\n\n# copy over your manifests\nCOPY ./Cargo.lock ./Cargo.lock\nCOPY ./Cargo.toml ./Cargo.toml\n\n# this build step will cache your dependencies\nRUN apt-get -y update && apt-get install --no-install-recommends -y libclang-dev libopencv-dev && rm -rf /var/lib/apt/lists/*;\nRUN cargo build --release --locked\nRUN rm src/*.rs\n\n# copy your source tree\nCOPY ./src ./src\n\n# build for release\nRUN rm ./target/release/deps/asc*\nRUN cargo build --release --locked\n\n# our final base\nFROM rust:1.58\n\n# copy the build artifact from the build stage\nCOPY --from=build /asciiframe/target/release/asc .\n\n# set the startup command to run your binary\nENTRYPOINT [\"./asc\"]\n"
}