{
  "startTime": 1674253526413,
  "endTime": 1674253527181,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 20,
        "lineEnd": 31,
        "columnStart": 51,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_VER='11.4.2'\nFROM nvidia/cuda:${CUDA_VER}-devel-centos8\n#==============================================================================\nARG NVIDIA_ROOT_DIR=/opt/nvidia\nENV SRC_DIR=${NVIDIA_ROOT_DIR}/src\nENV PKG_DIR=${NVIDIA_ROOT_DIR}/pkg\nENV BIN_DIR=${NVIDIA_ROOT_DIR}/bin\nENV WORKLOADS_DIR=${NVIDIA_ROOT_DIR}/workloads\nENV TORCH_UCC_GITHUB_URL=https://github.com/facebookresearch/torch_ucc.git\nENV TORCH_UCC_BRANCH=main\nENV CUDA_HOME=/usr/local/cuda\nENV UCX_GITHUB_URL=https://github.com/openucx/ucx.git\nENV UCX_BRANCH=master\nENV UCX_BUILD_TYPE=release-mt\nENV UCX_INSTALL_DIR=${BIN_DIR}/ucx/build-${UCX_BUILD_TYPE}\nENV UCC_INSTALL_DIR=${BIN_DIR}/ucc/build\n#==============================================================================\nRUN yum groupinstall -y \\\n    'Development Tools' \\\n    'Infiniband Support'\nRUN yum config-manager --set-enabled powertools && yum install -y \\\n    numactl \\\n    numactl-devel \\\n    openmpi \\\n    openmpi-devel \\\n    openssh-server \\\n    protobuf-compiler \\\n    protobuf-devel \\\n    python36-devel \\\n    rdma-core-devel \\\n    vim \\\n    wget && rm -rf /var/cache/yum\n# Remove old UCX\nRUN rpm -e --nodeps ucx\nENV PATH=/usr/lib64/openmpi/bin:$PATH\nRUN echo \"export PATH=\\\"/usr/lib64/openmpi/bin:\\$PATH\\\"\" >> /etc/bashrc && \\\n    export LD_LIBRARY_PATH=\\\"/usr/lib64/openmpi/lib:\\${LD_LIBRARY_PATH}\\\" >> /etc/bashrc\nRUN cd /tmp && wget https://github.com/Kitware/CMake/releases/download/v3.20.4/cmake-3.20.4-linux-x86_64.sh && \\\n    chmod +x /tmp/cmake-3.20.4-linux-x86_64.sh && /tmp/cmake-3.20.4-linux-x86_64.sh --skip-license --prefix=/usr && \\\n    rm -f /tmp/cmake-3.20.4-linux-x86_64.sh\n#==============================================================================\n# Configure SSH\nRUN mkdir -p /var/run/sshd && \\\n    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config && \\\n    ssh-keygen -A &&  \\\n    rm -f /run/nologin\n#==============================================================================\n\n#==============================================================================\nRUN mkdir -p ${SRC_DIR} && \\\n    mkdir -p ${PKG_DIR} && \\\n    mkdir -p ${BIN_DIR} && \\\n    mkdir -p ${WORKLOADS_DIR}\n\nRUN git clone ${TORCH_UCC_GITHUB_URL} ${SRC_DIR} && \\\n    cd ${SRC_DIR} && \\\n    git checkout ${TORCH_UCC_BRANCH}\n\nRUN mkdir -p ${SRC_DIR}/ucx && \\\n    git clone --recursive ${UCX_GITHUB_URL} ${SRC_DIR}/ucx && \\\n    cd ${SRC_DIR}/ucx && \\\n    git checkout ${UCX_BRANCH}\n\nCOPY . ${SRC_DIR}/ucc\n#==============================================================================\n# Build UCX\nRUN ${SRC_DIR}/ucc/.ci/scripts/build_ucx.sh\nENV PATH=${UCX_INSTALL_DIR}/bin:${PATH}\n#==============================================================================\n# Configure Python\nRUN ${SRC_DIR}/ucc/.ci/scripts/configure_python.sh\n#==============================================================================\n# Install PyTorch\nRUN ${SRC_DIR}/ucc/.ci/scripts/install_torch.sh\n#==============================================================================\n# Install workloads\nWORKDIR ${WORKLOADS_DIR}\nRUN git clone https://github.com/facebookresearch/dlrm.git && \\\n    cd ${WORKLOADS_DIR}/dlrm && \\\n    pip3 install --no-cache-dir -r ${WORKLOADS_DIR}/dlrm/requirements.txt && \\\n    pip3 install --no-cache-dir tensorboard\nRUN git clone https://github.com/facebookresearch/param.git && \\\n    pip3 install --no-cache-dir -r ${WORKLOADS_DIR}/param/requirements.txt\n"
}