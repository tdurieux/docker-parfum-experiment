{
  "startTime": 1674255250885,
  "endTime": 1674255252162,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 4,
        "columnEnd": 152
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (C) 2020 Heron Systems, Inc.\n#\n# This Dockerfile builds an image that:\n# (1) installs all dependencies that should be necessary to develop and run\n#     code for the current project.\n#\n# (2) supports persistence across Docker runs. After running connect.py for\n#     the first time, you should notice a new folder /mnt/users/yourusername,\n#     both on your host machine as well as your Docker instance. All files\n#     that you wish to persist should be stored under folder. For convenience,\n#     this Dockerfile sets up zsh under /mnt/users/yourusername and symlinks\n#     necessary files to /home/yoursername (in the Docker instance) such that\n#     history persists (so, ctrl-p works across Docker runs).\n#\n# Rather than running your own docker commands, it's recommended that you set\n# up a docker image via the connect.py script. You'll almost always want to\n# run something like:\n#\n# python connect.py --dockerfile ./Dockerfile --username gburdell \\\n#                   --email gburdell@heronsystems.com \\\n#                   --fullname \"George P. Burdell\"\n#\n# It's important to ensure that username, email, and fullname all match across\n# all Docker instances that you wish to all be associated with the same user\n# for persistence reasons.\nFROM nvidia/cudagl:10.1-devel-ubuntu18.04\n\nARG USERNAME\nARG EMAIL\nARG FULLNAME\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    rm -rf /var/lib/apt/lists/* \\\n           /etc/apt/sources.list.d/cuda.list \\\n           /etc/apt/sources.list.d/nvidia-ml.list && \\\n    apt-get update && \\\n# ==================================================================\n# tools\n# ------------------------------------------------------------------\n    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n        build-essential \\\n        ca-certificates \\\n        cmake \\\n        curl \\\n        git \\\n        less \\\n        openssh-server \\\n        sudo \\\n        systemd \\\n        tmux \\\n        unzip \\\n        vim \\\n        wget \\\n        zsh && \\\n# ==================================================================\n# useful developer tools\n# ------------------------------------------------------------------\n    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n        software-properties-common \\\n        && \\\n    add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n        python3.6 \\\n        python3.6-dev \\\n        python3.6-tk \\\n        python3-distutils \\\n        cython \\\n        libopenmpi-dev \\\n        openmpi-bin \\\n        libsm6 \\\n        libxext6 \\\n        libxrender-dev \\\n        locales \\\n        mesa-utils\n\n# ==================================================================\n# Python goodies\n# ------------------------------------------------------------------\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    rm -rf /var/lib/apt/lists/* \\\n           /etc/apt/sources.list.d/cuda.list \\\n           /etc/apt/sources.list.d/nvidia-ml.list && \\\n    apt-get update && \\\n    wget -O ~/get-pip.py \\\n        https://bootstrap.pypa.io/get-pip.py && \\\n    python3.6 ~/get-pip.py && \\\n    ln -s /usr/bin/python3.6 /usr/local/bin/python3 && \\\n    ln -s /usr/bin/python3.6 /usr/local/bin/python && \\\n    $PIP_INSTALL \\\n        setuptools \\\n        && \\\n    $PIP_INSTALL \\\n        black==19.10b0 \\\n        cloudpickle==1.4.1 \\\n        cmake==3.15.3 \\\n        Cython==0.29.13 \\\n        deepdiff==4.3.2 \\\n        defusedxml==0.6.0 \\\n        docopt==0.6.2 \\\n        flake8==3.7.8 \\\n        glances==3.1.4.1 \\\n        h5py==2.10.0 \\\n        imagesize==1.1.0 \\\n        ipdb==0.13.2 \\\n        jupyter==1.0.0 \\\n        magicattr==0.1.4 \\\n        matplotlib==3.1.1 \\\n        numpy==1.17.2 \\\n        opencv-python==4.1.1.26 \\\n        ordered-set==3.1.1 \\\n        pandas==0.25.1 \\\n        Pillow==6.1.0 \\\n        protobuf==3.9.2 \\\n        pycodestyle==2.5.0 \\\n        pyflakes==2.1.1 \\\n        ray==0.8.5 \\\n        requests==2.23.0 \\\n        scipy==1.3.1 \\\n        six==1.12.0 \\\n        scikit-learn==0.20.1 \\\n        scikit-optimize==0.7.4 \\\n        tabulate==0.8.7 \\\n        tensorboard==1.14.0 \\\n        tensorflow==1.14.0 \\\n        tensorboardX==2.0 \\\n        threadpoolctl==2.0.0 \\\n        torch==1.5.0 \\\n        torchvision==0.6.0 \\\n        tqdm==4.43.0\n\n# ==================================================================\n# cuDNN\n# ==================================================================\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    rm -rf /var/lib/apt/lists/* \\\n           /etc/apt/sources.list.d/cuda.list \\\n           /etc/apt/sources.list.d/nvidia-ml.list && \\\n    apt-get update && \\\n    mkdir -p /opt/cudnn7 && \\\n    cd /opt/cudnn7/ && \\\n    wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb && \\\n    dpkg -i nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb && \\\n    apt-get update && \\\n    $APT_INSTALL libcudnn7-dev && \\\n    ldconfig && \\\n    apt-get clean && \\\n    apt-get autoremove && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* ~/*\n\n# ==================================================================\n# OpenAI Gym\n# ------------------------------------------------------------------\n# Dependencies for OpenAI Gym\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    rm -rf /var/lib/apt/lists/* \\\n           /etc/apt/sources.list.d/cuda.list \\\n           /etc/apt/sources.list.d/nvidia-ml.list && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n        ffmpeg \\\n        libosmesa6-dev \\\n        libsdl2-dev \\\n        patchelf \\\n        python-pyglet \\\n        python3-opengl \\\n        swig \\\n        xvfb && \\\n    $PIP_INSTALL \\\n        atari-py==0.2.6 \\\n        box2d==2.3.10 \\\n        cffi==1.14.0 \\\n        glfw==1.11.0 \\\n        pybullet==2.7.2 \\\n        gym==0.14.0\n\n# ==================================================================\n# matplotlib display dependencies\n# ------------------------------------------------------------------\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n        tcl-dev \\\n        tk-dev \\\n        python-tk \\\n        python3-tk && \\\n    ln -fs /usr/share/zoneinfo/US/Eastern /etc/localtime && \\\n    dpkg-reconfigure --frontend noninteractive tzdata && \\\n    ldconfig && \\\n    apt-get clean && \\\n    apt-get autoremove && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* ~/*\n\n# ==================================================================\n# user setup\n# ------------------------------------------------------------------\n# Create a user and enable passwordless sudo\nRUN useradd -m --shell /bin/zsh -r $USERNAME -u 1000 && \\\n    echo \"${USERNAME} ALL=(ALL) NOPASSWD:ALL\" | sudo EDITOR=\"tee -a\" visudo\n\nUSER $USERNAME\n\n# prezto\nRUN cd /home/$USERNAME && \\\n    git clone --recursive https://github.com/sorin-ionescu/prezto.git \"${ZDOTDIR:-$HOME}/.zprezto\" && \\\n    echo $'#!/bin/zsh\\nsetopt EXTENDED_GLOB\\nfor rcfile in ${ZDOTDIR:-$HOME}/.zprezto/runcoms/^README.md(.N); do\\n  ln -s $rcfile ${ZDOTDIR:-$HOME}/.${rcfile:t}\\ndone\\n' > .zsetup && \\\n    zsh .zsetup && \\\n# fzf\n    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && \\\n    printf \"y\\ny\\ny\\n\" | ~/.fzf/install\n\n# RUN locale-gen en_US.UTF-8\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\nENV LANGUAGE=en_US.UTF-8\n\nENV DBUS_FATAL_WARNINGS=0\n\nENV USERNAME=$USERNAME\nENV EMAIL=$EMAIL\nENV FULLNAME=$FULLNAME\n\nADD startup.sh /home/$USERNAME/startup.sh\nENTRYPOINT [\"/bin/zsh\", \"-c\", \"cd /home/${USERNAME}; zsh -c 'sh /home/$USERNAME/startup.sh; rm -f /home/$USERNAME/startup.sh; tmux;'\"]\n"
}