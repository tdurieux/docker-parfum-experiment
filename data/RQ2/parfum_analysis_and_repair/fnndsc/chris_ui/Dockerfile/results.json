{
  "startTime": 1674246064259,
  "endTime": 1674246065272,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ChRIS_ui production mode server\n#\n# Build with\n#\n#   docker build -t <name> .\n#\n# For example if building a local version, you could do:\n#\n#   docker build -t local/chris_ui .\n#\n# In the case of a proxy (located at say 10.41.13.4:3128), do:\n#\n#    export PROXY=\"http://10.41.13.4:3128\"\n#    docker build --build-arg http_proxy=${PROXY} -t local/chris_ui .\n#\n# To run the server up, do:\n#\n#   docker run --name chris_ui -p 3000:3000 -d local/chris_ui\n#\n# To run an interactive shell inside this container, do:\n#\n#   docker exec -it chris_ui sh\n#\n# Tips:\n# - for access logging, remove \"--quiet\" from CMD\n# - docker-entrypoint.sh must start as root\n\n\nFROM node:16 as builder\n\nWORKDIR /app\nCOPY . .\n\nRUN npm run -s print-version\nRUN npm install && npm cache clean --force;\nRUN npm run build\n\n\nFROM node:16-alpine\n\nRUN yarn global add sirv-cli\n\nWORKDIR /app\n\nCOPY --from=builder /app/build /app\nCOPY ./docker-entrypoint.sh /docker-entrypoint.sh\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nENV HOST=0.0.0.0 PORT=3000\nCMD [\"sirv\", \"--quiet\", \"--etag\", \"--single\"]\nEXPOSE 3000\n"
}