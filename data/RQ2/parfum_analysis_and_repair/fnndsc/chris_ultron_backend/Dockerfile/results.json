{
  "startTime": 1674254047649,
  "endTime": 1674254048926,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 5,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 5,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 5,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 5,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 5,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 5,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 5,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Docker file for CUBE image\n#\n# Build production image:\n#\n#   docker build -t <name> .\n#\n# For example if building a local production image:\n#\n#   docker build -t local/chris .\n#\n# Build development image:\n#\n#   docker build --build-arg ENVIRONMENT=local -t <name>:<tag> .\n#\n# For example if building a local development image:\n#\n#   docker build --build-arg ENVIRONMENT=local -t local/chris:dev .\n#\n# In the case of a proxy (located at say proxy.tch.harvard.edu:3128), do:\n#\n#    export PROXY=\"http://proxy.tch.harvard.edu:3128\"\n#\n# then add to any of the previous build commands:\n#\n#    --build-arg http_proxy=${PROXY}\n#\n# For example if building a local development image:\n#\n# docker build --build-arg http_proxy=${PROXY} --build-arg ENVIRONMENT=local -t local/chris:dev .\n#\n\nFROM fnndsc/ubuntu-python3:ubuntu20.04-python3.8.5\n\nLABEL org.opencontainers.image.authors=\"FNNDSC <dev@babyMRI.org>\" \\\n      org.opencontainers.image.title=\"ChRIS Ultron Backend\" \\\n      org.opencontainers.image.description=\"ChRIS backend\" \\\n      org.opencontainers.image.url=\"https://chrisproject.org/\" \\\n      org.opencontainers.image.source=\"https://github.com/FNNDSC/ChRIS_ultron_backEnd\" \\\n      org.opencontainers.image.licenses=\"MIT\"\n\n# Pass a UID on build command line (see above) to set internal UID\nARG UID=1001\nARG ENVIRONMENT=production\nENV UID=$UID DEBIAN_FRONTEND=noninteractive VERSION=\"0.1\"\n\nENV APPROOT=\"/home/localuser/chris_backend\" REQPATH=\"/usr/src/requirements\"\nCOPY [\"./requirements\", \"${REQPATH}\"]\nCOPY [\"./docker-entrypoint.sh\", \"/usr/src\"]\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y locales \\\n  && export LANGUAGE=en_US.UTF-8 \\\n  && export LANG=en_US.UTF-8 \\\n  && export LC_ALL=en_US.UTF-8 \\\n  && locale-gen en_US.UTF-8 \\\n  && dpkg-reconfigure locales \\\n  && apt-get install --no-install-recommends -y libssl-dev libpq-dev \\\n  && apt-get install --no-install-recommends -y apache2 apache2-dev \\\n  && pip install --no-cache-dir --upgrade pip \\\n  && pip install --no-cache-dir -r ${REQPATH}/${ENVIRONMENT}.txt \\\n  && useradd -l -u $UID -ms /bin/bash localuser && rm -rf /var/lib/apt/lists/*;\n\n# Start as user localuser\nUSER localuser\n\n# Copy source code and make localuser the owner\nCOPY --chown=localuser [\"./chris_backend\", \"${APPROOT}\"]\n\nWORKDIR $APPROOT\nENTRYPOINT [\"/usr/src/docker-entrypoint.sh\"]\nEXPOSE 8000\n\n# Start ChRIS production server\nCMD [\"mod_wsgi-express\", \"start-server\", \"config/wsgi.py\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\",  \\\n\"--processes\", \"4\", \"--limit-request-body\", \"5368709120\", \"--server-root\", \"/home/localuser/mod_wsgi-0.0.0.0:8000\"]\n#to start daemon:\n#/home/localuser/mod_wsgi-0.0.0.0:8000/apachectl start\n#to stop deamon\n#/home/localuser/mod_wsgi-0.0.0.0:8000/apachectl stop\n"
}