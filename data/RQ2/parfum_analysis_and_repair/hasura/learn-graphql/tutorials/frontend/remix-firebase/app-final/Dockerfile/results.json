{
  "startTime": 1674253877105,
  "endTime": 1674253878493,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Credit to Tom Rowe https://gist.github.com/TheRealFlyingCoder/773bf60f433ccbdbad8c296a99fb3738\n\n# base node image\nFROM node:16-bullseye-slim as base\n\n# Install all node_modules, including dev dependencies\nFROM base as deps\n\nRUN mkdir /app\nWORKDIR /app\n\nADD package.json package-lock.json ./\nRUN npm install --production=false && npm cache clean --force;\n\n# Setup production node_modules\nFROM base as production-deps\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\nADD package.json package-lock.json ./\nRUN npm prune --production\n\n# Build the app\nFROM base as build\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\n\nADD . .\nRUN npm run build\n\n# Finally, build the production image with minimal footprint\nFROM base\n\nENV NODE_ENV=production\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=production-deps /app/node_modules /app/node_modules\n#My build goes to /app/server/build and i'm running /server/index.js express\nCOPY --from=build /app/build /app/build\nCOPY --from=build /app/public /app/public\nADD . .\n\nCMD [\"npm\", \"run\", \"start\"]\n"
}