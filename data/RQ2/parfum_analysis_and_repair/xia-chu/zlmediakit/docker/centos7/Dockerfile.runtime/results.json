{
  "startTime": 1674252128343,
  "endTime": 1674252129627,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 8,
        "columnEnd": 118
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 8,
        "columnEnd": 19
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 7,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 91,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 13,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 56
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 7,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG Version=7\n\nFROM centos:${Version} As build\n\nARG HTTP_PROXY=${NO_PROXY}\nARG HTTPS_PROXY=${NO_PROXY}\nARG PKG_CONFIG_VERSION=0.29.2\nARG CMAKE_VERSION=3.18\nARG CMAKE_FULL_VERSION=3.18.4\nARG YASM_VERSION=1.3.0\nARG NASM_VERSION=2.15.05\nARG X265_VERSION=3.4\n\nRUN yum install -y \\\n        gcc \\\n        gcc-c++ \\\n        kernel-devel \\\n        kernel-headers \\\n        openssl \\\n        openssl-devel \\\n        git \\\n        wget \\\n        which && rm -rf /var/cache/yum\n\nWORKDIR /opt\n\nRUN wget -e \"https_proxy=${HTTPS_PROXY}\" https://pkgconfig.freedesktop.org/releases/pkg-config-${PKG_CONFIG_VERSION}.tar.gz \\\n    && tar -zxvf pkg-config-${PKG_CONFIG_VERSION}.tar.gz \\\n    && cd pkg-config-${PKG_CONFIG_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-internal-glib \\\n    && make -j8 \\\n    && make install && rm pkg-config-${PKG_CONFIG_VERSION}.tar.gz\n\nRUN wget -e \"https_proxy=${HTTPS_PROXY}\" https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_FULL_VERSION}.tar.gz \\\n    && tar -zxvf cmake-${CMAKE_FULL_VERSION}.tar.gz \\\n    && cd cmake-${CMAKE_FULL_VERSION} \\\n    && ./bootstrap \\\n    && gmake -j8 \\\n    && gmake install && rm cmake-${CMAKE_FULL_VERSION}.tar.gz\n\nRUN cd /opt \\\n    && wget -e \"https_proxy=${HTTPS_PROXY}\" https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VERSION}.tar.gz \\\n    && tar zxvf yasm-${YASM_VERSION}.tar.gz \\\n    && cd yasm-${YASM_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j8 \\\n    && make install && rm yasm-${YASM_VERSION}.tar.gz\n\nRUN wget  -e \"https_proxy=${HTTPS_PROXY}\" https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-${NASM_VERSION}.tar.xz \\\n    && tar -xvJf nasm-${NASM_VERSION}.tar.xz \\\n    && cd nasm-${NASM_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared --enable-static \\\n    && make -j8 \\\n    && make install && rm nasm-${NASM_VERSION}.tar.xz\n\nRUN cd /opt \\\n    && git clone https://code.videolan.org/videolan/x264.git \\\n    && cd x264 \\\n    && git checkout -b stable origin/stable \\\n    && git pull --rebase \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-pic --enable-shared --disable-asm \\\n    && make -j8 \\\n    && make install \\\n    && export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\n\nRUN cd /opt \\\n    && wget -e \"https_proxy=${HTTPS_PROXY}\" https://github.com/videolan/x265/archive/Release_${X265_VERSION}.tar.gz  \\\n    && tar zxvf Release_${X265_VERSION}.tar.gz \\\n    && cd x265-Release_${X265_VERSION}/build/linux \\\n    && cmake ../../source \\\n    && make -j8 \\\n    && make install \\\n    && export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH && rm Release_${X265_VERSION}.tar.gz\n\nRUN cd /opt \\\n    && git clone https://gitee.com/xia-chu/FFmpeg.git \\\n    && cd /opt/FFmpeg \\\n    && export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --disable-debug \\\n        --disable-doc \\\n        --disable-shared \\\n        --enable-gpl \\\n        --enable-version3 \\\n        --enable-static \\\n        --enable-nonfree \\\n        --enable-pthreads \\\n        --enable-libx264 \\\n        --enable-libx265 \\\n        --enable-small \\\n        --pkgconfigdir=/usr/local/lib/pkgconfig \\\n\t\t\t\t\t--pkg-config-flags=\"--static\" \\\n    && make -j8 \\\n    && make install\n\nRUN cd /opt \\\n    && git clone --depth 1 https://github.com/xia-chu/ZLMediaKit.git \\\n    && cd ZLMediaKit \\\n    && git submodule update --init \\\n    && mkdir -p build release/linux/Release/ \\\n    && cd build \\\n    && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n    && make -j8\n\nRUN mkdir -p /opt/build/opt/zlm/ /opt/build/usr/local/bin/ /opt/build/usr/bin/  /opt/build/usr/local/lib/ /opt/build/etc/localtime \\\n    && cd /opt/build \\\n    && /usr/bin/cp -ip /usr/local/lib/libx26* ./usr/local/lib \\\n    && /usr/bin/cp -ip /usr/local/bin/ffmpeg ./usr/local/bin \\\n    && /usr/bin/cp -ip /opt/ZLMediaKit/release/linux/Release/MediaServer ./opt/zlm/ \\\n    && /usr/bin/cp -irp /opt/ZLMediaKit/release/linux/Release/www ./opt/zlm/ \\\n    && /usr/bin/cp -ip /opt/ZLMediaKit/tests/ssl.p12 ./opt/zlm/ \\\n    && /usr/bin/cp -ip /usr/bin/which ./usr/bin/\n\nFROM centos:${Version}\nLABEL maintainer=\"chengxiaosheng <kevin__cheng@outlook.com>\" project-url=\"https://github.com/xia-chu/ZLMediaKit\" description=\"一个基于C++11的高性能运营级流媒体服务框架\"\n\nEXPOSE 9000/tcp \\\n 1935/tcp \\\n 19350/tcp \\\n 554/tcp \\\n 322/tcp \\\n 80/tcp \\\n 443/tcp \\\n 10000/udp \\\n 10000/tcp\n\nWORKDIR /opt/zlm\nVOLUME [ \"/opt/zlm/conf/\",\"/opt/zlm/log/\",\"opt/zlm/ffmpeg/\"]\nCOPY --from=build /opt/build /\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH TZ=Asia/Shanghai\nCMD ./MediaServer -c ./conf/config.ini"
}