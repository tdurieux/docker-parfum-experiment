{
  "startTime": 1674249140302,
  "endTime": 1674249142127,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 25,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 35,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 9,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 9,
        "columnEnd": 163
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 9,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 9,
        "columnEnd": 163
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 25,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 35,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 9,
        "columnEnd": 82
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 9,
        "columnEnd": 163
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 9,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 9,
        "columnEnd": 187
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cudagl:11.4.2-devel-ubuntu20.04\nMAINTAINER Sukrit Kalra (sukrit.kalra@berkeley.edu)\n\n# Set up a erdos user first.\nRUN apt-get -y update && apt-get -y --no-install-recommends install sudo && rm -rf /var/lib/apt/lists/*;\nENV uid 1000\nENV gid 1000\n\nRUN mkdir -p /home/erdos\nRUN groupadd erdos -g ${gid}\nRUN useradd -r -u ${uid} -g erdos erdos\nRUN echo \"erdos ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/erdos\nRUN chmod 0440 /etc/sudoers.d/erdos\nRUN chown ${uid}:${gid} -R /home/erdos\nRUN usermod --shell /bin/bash erdos\n\n\nUSER erdos\nENV HOME /home/erdos\nENV SHELL /bin/bash\nWORKDIR /home/erdos\nSHELL [\"/bin/bash\", \"--login\", \"-c\"]\n\nRUN mkdir -p /home/erdos/workspace\nRUN cd /home/erdos/workspace\n\nRUN sudo apt-get -y update && sudo apt-get -y --no-install-recommends install --reinstall locales && sudo locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US\nENV LC_ALL en_US.UTF-8\n\n# Install tzdata without prompt.\nRUN sudo apt-get -y --fix-missing update\nENV DEBIAN_FRONTEND=noninteractive\nRUN sudo DEBIAN_FRONTEND=noninteractive sudo DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata\n\n# Get the ERDOS package dependencies.\nRUN sudo apt-get -y --no-install-recommends install apt-utils git curl clang python-is-python3 python3-pip && rm -rf /var/lib/apt/lists/*;\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install setuptools setuptools-rust numpy==1.19.5\n\n# Setup Rust and install ERDOS.\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nENV PATH=\"/home/erdos/.cargo/bin:${PATH}\"\nRUN echo \"export PATH=/home/erdos/.cargo/bin:${PATH}\" >> ~/.bashrc\nRUN rustup default nightly\nRUN mkdir -p /home/erdos/workspace\nRUN cd /home/erdos/workspace && git clone https://github.com/erdos-project/erdos.git && cd erdos && python3 python/setup.py install\n\n# Set up Pylot.\nRUN sudo apt-get install --no-install-recommends -y libcudnn8 cuda-toolkit-11-4 ssh libqt5core5a libeigen3-dev cmake qtbase5-dev libpng16-16 libtiff5 python3-tk python3-pygame libgeos-dev && rm -rf /var/lib/apt/lists/*;\n# Get the Pylot directory.\nRUN cd /home/erdos/workspace && git clone https://github.com/erdos-project/pylot.git\nWORKDIR /home/erdos/workspace/pylot/\nENV PYLOT_HOME /home/erdos/workspace/pylot/\n# Install all the Python dependencies.\nRUN cd /home/erdos/workspace/pylot/ && python3 -m pip install -e ./\n# Get the Pylot models and code dependencies.\nRUN cd /home/erdos/workspace/pylot/ && ./install.sh\nENV CARLA_HOME /home/erdos/workspace/pylot/dependencies/CARLA_0.9.10.1\n# Clone scenario_runner.\nRUN cd /home/erdos/workspace && git clone https://github.com/erdos-project/scenario_runner.git\n# Install scenario_runner's dependencies.\nRUN python3 -m pip install py-trees==0.8.3 networkx==2.2 Shapely==1.6.4 psutil==5.7.0 xmlschema==1.0.18 ephem==3.7.6.0 tabulate==0.8.7 six==1.14.0\n# Clone leaderboard.\nRUN cd /home/erdos/workspace && git clone https://github.com/erdos-project/leaderboard.git\nRUN python3 -m pip install dictor requests\n\nRUN echo \"export PYTHONPATH=/home/erdos/workspace/pylot/dependencies/:/home/erdos/workspace/pylot/dependencies/lanenet:/home/erdos/workspace/pylot/dependencies/CARLA_0.9.10.1/PythonAPI/carla/dist/carla-0.9.10-py3.7-linux-x86_64.egg:/home/erdos/workspace/pylot/dependencies/CARLA_0.9.10.1/PythonAPI/carla/:/home/erdos/workspace/pylot/dependencies/CARLA_0.9.10.1/PythonAPI/carla/agents/:/home/erdos/workspace/pylot/dependencies/CARLA_0.9.10.1/PythonAPI/:/home/erdos/workspace/scenario_runner\" >> ~/.bashrc\nRUN echo \"export PYLOT_HOME=/home/erdos/workspace/pylot/\" >> ~/.bashrc\nRUN echo \"export CARLA_HOME=/home/erdos/workspace/pylot/dependencies/CARLA_0.9.10.1\" >> ~/.bashrc\nRUN echo \"if [ -f ~/.bashrc ]; then . ~/.bashrc ; fi\" >> ~/.bash_profile\n\n# Add programs installed via PIP to the path.\nRUN echo \"export PATH=$HOME/.local/bin:${PATH}\" >> ~/.bashrc\n\n# Set up ssh access to the container.\nRUN cd ~/ && ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa <<<y 2>&1 >/dev/null\nRUN sudo sed -i 's/#X11UseLocalhost yes/X11UseLocalhost no/g' /etc/ssh/sshd_config\n"
}