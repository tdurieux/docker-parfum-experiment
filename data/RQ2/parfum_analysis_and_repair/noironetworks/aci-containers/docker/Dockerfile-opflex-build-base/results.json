{
  "startTime": 1674252530135,
  "endTime": 1674252531794,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 5,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 18,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.access.redhat.com/ubi8/ubi-minimal:latest\nENV ROOT=/usr/local\nARG make_args=-j4\nRUN microdnf install --enablerepo codeready-builder-for-rhel-8-x86_64-rpms \\\n    libtool pkgconfig autoconf automake make cmake file python2-six \\\n    openssl-devel git gcc gcc-c++ boost-devel diffutils python2-devel \\\n    libnetfilter_conntrack-devel wget which curl-devel procps zlib-devel \\\n    libmnl-devel vi \\\n    && microdnf clean all\nRUN git clone -b libnftnl-1.1.7 https://git.netfilter.org/libnftnl \\\n  && cd libnftnl \\\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make $make_args \\\n  && make install && cp libnftnl.pc /usr/lib64/pkgconfig && make clean \\\n  && cd / \\\n  && rm -Rf libnftnl \\\n  && git clone https://git.netfilter.org/iptables \\\n  && cd iptables \\\n  && git checkout dac904bdcd9a18aabafee7275ccf0c2bd53800f3 \\\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --sbindir=/sbin \\\n  && make $make_args \\\n  && make install && make clean \\\n  && cd / \\\n  && rm -Rf iptables \\\n  && wget https://github.com/Tencent/rapidjson/archive/v1.1.0.tar.gz \\\n  && tar xvfz v1.1.0.tar.gz \\\n  && cd rapidjson-1.1.0 \\\n  && cmake CMakeLists.txt \\\n  && cp -R include/rapidjson/ /usr/local/include/ \\\n  && mkdir -p /usr/local/lib/pkgconfig \\\n  && cp RapidJSON.pc /usr/local/lib/pkgconfig/ \\\n  && cd / \\\n  && rm -rf v1.1.0.tar.gz \\\n  && rm -rf rapidjson-1.1.0 \\\n  && git clone https://github.com/libuv/libuv.git --branch v1.20.3 --depth 1 \\\n  && cd libuv \\\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make $make_args \\\n  && make install && make clean \\\n  && cd / \\\n  && rm -rf libuv \\\n  && wget -q -O cmake-linux.sh https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-x86_64.sh \\\n  && mkdir -p cmake-tmp \\\n  && sh cmake-linux.sh -- --skip-license --prefix=cmake-tmp \\\n  && rm cmake-linux.sh \\\n  && git clone https://github.com/noironetworks/3rdparty-debian.git \\\n  && git clone https://github.com/jupp0r/prometheus-cpp.git -b v0.12.1 --depth 1 \\\n  && cd prometheus-cpp \\\n  && git submodule init \\\n  && git submodule update \\\n  && git apply /3rdparty-debian/prometheus/prometheus-cpp.patch \\\n  && mkdir _build && cd _build \\\n  && ../../cmake-tmp/bin/cmake .. -DBUILD_SHARED_LIBS=ON -DENABLE_PUSH=OFF \\\n  && make $make_args && make install && make clean \\\n  && mv /usr/local/lib64/libprometheus-cpp-* /usr/local/lib/ \\\n  && cd / \\\n  && rm -rf 3rdparty-debian \\\n  && rm -rf prometheus-cpp \\\n  && git clone -b v1.31.0 https://github.com/grpc/grpc --config submodule.third_party/re2.url=https://github.com/google/re2.git --config submodule.third_party/re2.active=true \\\n  && cd grpc \\\n  && git submodule update --init \\\n  && mkdir -p cmake/build \\\n  && cd cmake/build \\\n  && ../../../cmake-tmp/bin/cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local \\\n                               -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF -DgRPC_BUILD_CSHARP_EXT=OFF -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \\\n                               -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \\\n                               -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \\\n                               -DgRPC_SSL_PROVIDER=package -DOPENSSL_ROOT_DIR=/usr/lib/ssl ../.. \\\n  && make $make_args && make install \\\n  && mv /usr/local/lib64/pkgconfig/proto* /usr/local/lib/pkgconfig/ \\\n  && mv /usr/local/lib64/libproto* /usr/local/lib/ \\\n  && mv /usr/local/lib64/libre2* /usr/local/lib/ \\\n  && cd / \\\n  && rm -rf grpc\nENV CFLAGS='-fPIE -D_FORTIFY_SOURCE=2  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security'\nENV CXXFLAGS='-fPIE -D_FORTIFY_SOURCE=2  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security'\nENV LDFLAGS='-pie -Wl,-z,now -Wl,-z,relro'\nRUN git clone https://github.com/openvswitch/ovs.git --branch v2.12.0 --depth 1 \\\n  && cd ovs \\\n  && ./boot.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-ssl --disable-libcapng --enable-shared \\\n  && make $make_args && make install \\\n  && mkdir -p $ROOT/include/openvswitch/openvswitch \\\n  && mv $ROOT/include/openvswitch/*.h $ROOT/include/openvswitch/openvswitch \\\n  && mv $ROOT/include/openflow $ROOT/include/openvswitch \\\n  && cp include/*.h \"$ROOT/include/openvswitch/\" \\\n  && find lib -name \"*.h\" -exec cp --parents {} \"$ROOT/include/openvswitch/\" \\; \\\n  && cd / \\\n  && rm -rf ovs\n"
}