{
  "startTime": 1674255744276,
  "endTime": 1674255745699,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "# ----------------------------------------------------------------------------\n# CONTEXT\n# =======\n#\n# Here you may want to add lines to start from a pre-built Docker image like\n# a Deep-Learning one with MXNet or TensorFlow, or a ScikitLearn one. See the\n# following links for more information.\n#\n# - https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-docker-containers-frameworks.html\n# - https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html\n#\n# You can build your own following the instructions at https://github.com/aws/sagemaker-containers but it's probably easier to just start from the DLAMI one.\n#\n# Notes, depending on what you do make sure you adjust the 'CONTEXT' part of the\n# docker/buildandpush.sh script.\n#\n# ----------------------------------------------------------------------------\nARG CONTEXT=cpu-py38\nARG REGION=us-west-2\nARG VERSION=1.11.0\nARG DLAMI_REGISTRY_ID=763104351884\nFROM ${DLAMI_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com/pytorch-training:${VERSION}-${CONTEXT}-ubuntu20.04-sagemaker\n\n# ----------------------------------------------------------------------------\n# TOOLING\n# =======\n#\n# Here you may want to add lines to install libraries that you might need such\n# as OpenSSH for connections between nodes, or specific python libraries your\n# experiment might require.\n# You can either install those individually or install from a requirements.txt\n#\n# ----------------------------------------------------------------------------\n\n# Install and set things up for OpenSSH\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && rm -rf /var/lib/apt/lists/*;\nRUN mkdir -p /var/run/sshd && \\\n  sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n# OpenSSH setup\nRUN rm -rf /root/.ssh/ && \\\n  mkdir -p /root/.ssh/ && \\\n  ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \\\n  cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys && \\\n  printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nRUN python -m pip install --upgrade pip setuptools wheel\n\n# Install dependencies from the requirements file located at\n# experiment/requirements.txt (remove this line if there's no such file)\n\n\nWORKDIR /opt/app\nADD \\\n  source/requirements.txt \\\n  /tmp/packages/\nRUN python -m pip install --no-cache-dir --upgrade -r /tmp/packages/requirements.txt\n"
}