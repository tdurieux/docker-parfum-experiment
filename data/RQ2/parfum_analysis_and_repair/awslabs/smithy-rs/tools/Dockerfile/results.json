{
  "startTime": 1674254630012,
  "endTime": 1674254631087,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 8,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 8,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 8,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 8,
        "columnEnd": 122
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 8,
        "columnEnd": 112
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 8,
        "columnEnd": 112
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 18,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 58,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n\n# This is the base Docker build image used by CI\n\nARG base_image=public.ecr.aws/amazonlinux/amazonlinux:2\nFROM ${base_image} AS bare_base_image\n\n#\n# Node Installation Stage\n#\nFROM bare_base_image AS install_node\nARG node_version=v16.14.0\nENV DEST_PATH=/opt/nodejs \\\n    PATH=/opt/nodejs/bin:${PATH}\nRUN yum -y updateinfo && \\\n    yum -y install \\\n        ca-certificates \\\n        curl \\\n        tar \\\n        xz && \\\n    yum clean all && rm -rf /var/cache/yum\nWORKDIR /root\nRUN set -eux; \\\n    ARCHITECTURE=\"\"; \\\n    if [[ \"$(uname -m)\" == \"aarch64\" || \"$(uname -m)\" == \"arm64\" ]]; then \\\n        curl -f \"https://nodejs.org/dist/${node_version}/node-${node_version}-linux-arm64.tar.xz\" --output node.tar.xz; \\\n        echo \"5a6e818c302527a4b1cdf61d3188408c8a3e4a1bbca1e3f836c93ea8469826ce  node.tar.xz\" | sha256sum --check; \\\n        ARCHITECTURE=\"arm64\"; \\\n    else \\\n        curl -f \"https://nodejs.org/dist/${node_version}/node-${node_version}-linux-x64.tar.xz\" --output node.tar.xz; \\\n        echo \"0570b9354959f651b814e56a4ce98d4a067bf2385b9a0e6be075739bc65b0fae  node.tar.xz\" | sha256sum --check; \\\n        ARCHITECTURE=\"x64\"; \\\n    fi; \\\n    mkdir -p \"${DEST_PATH}\"; \\\n    tar -xJvf node.tar.xz -C \"${DEST_PATH}\"; \\\n    mv \"${DEST_PATH}/node-${node_version}-linux-${ARCHITECTURE}/\"* \"${DEST_PATH}\"; \\\n    rmdir \"${DEST_PATH}\"/node-${node_version}-linux-${ARCHITECTURE}; \\\n    rm node.tar.xz; \\\n    node --version\n\n#\n# Rust & Tools Installation Stage\n#\nFROM bare_base_image AS install_rust\nARG rust_stable_version=1.58.1\nARG rust_nightly_version=nightly-2022-03-29\nARG cargo_udeps_version=0.1.29\nARG cargo_hack_version=0.5.14\nARG cargo_minimal_versions_version=0.1.4\nENV RUSTUP_HOME=/opt/rustup \\\n    CARGO_HOME=/opt/cargo \\\n    PATH=/opt/cargo/bin/:${PATH} \\\n    CARGO_INCREMENTAL=0\nWORKDIR /root\nRUN yum -y updateinfo && \\\n    yum -y install \\\n        autoconf \\\n        automake \\\n        binutils \\\n        ca-certificates \\\n        curl \\\n        gcc \\\n        gcc-c++ \\\n        git \\\n        make \\\n        openssl-devel \\\n        pkgconfig && \\\n    yum clean all && rm -rf /var/cache/yum\nRUN set -eux; \\\n    if [[ \"$(uname -m)\" == \"aarch64\" || \"$(uname -m)\" == \"arm64\" ]]; then \\\n        curl -f https://static.rust-lang.org/rustup/archive/1.24.3/aarch64-unknown-linux-gnu/rustup-init --output rustup-init; \\\n        echo \"32a1532f7cef072a667bac53f1a5542c99666c4071af0c9549795bbdb2069ec1  rustup-init\" | sha256sum --check; \\\n    else \\\n        curl -f https://static.rust-lang.org/rustup/archive/1.24.3/x86_64-unknown-linux-gnu/rustup-init --output rustup-init; \\\n        echo \"3dc5ef50861ee18657f9db2eeb7392f9c2a6c95c90ab41e45ab4ca71476b4338  rustup-init\" | sha256sum --check; \\\n    fi; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain ${rust_stable_version}; \\\n    rm rustup-init; \\\n    rustup --version; \\\n    rustup component add rustfmt; \\\n    rustup component add clippy; \\\n    rustup toolchain install ${rust_nightly_version} --component clippy; \\\n    cargo --version; \\\n    cargo +${rust_nightly_version} --version;\nCOPY . tools/\n# when `checkout_smithy_rs_tools` is set to true, this commit will be checked out\nARG smithy_rs_commit_hash=main\n# If the `checkout_smithy_rs_tools` arg is set to true, then the Dockerfile will acquire the tools\n# source code by checking out awslabs/smithy-rs/main rather than copying them from the local directory.\nARG checkout_smithy_rs_tools=false\nRUN set -eux; \\\n    cargo +${rust_nightly_version} install cargo-udeps --locked --version ${cargo_udeps_version}; \\\n    cargo install cargo-hack --locked --version ${cargo_hack_version}; \\\n    cargo install cargo-minimal-versions --version ${cargo_minimal_versions_version}; \\\n    if [[ \"${checkout_smithy_rs_tools}\" == \"true\" ]]; then \\\n        git clone https://github.com/awslabs/smithy-rs.git; \\\n        cd smithy-rs; \\\n        git checkout ${smithy_rs_commit_hash}; \\\n    fi; \\\n    cargo install --locked --path tools/publisher; \\\n    cargo +${rust_nightly_version} install --locked --path tools/api-linter; \\\n    cargo install --locked --path tools/changelogger; \\\n    cargo install --locked --path tools/crate-hasher; \\\n    cargo install --locked --path tools/sdk-lints; \\\n    cargo install --locked --path tools/sdk-sync; \\\n    cargo install --locked --path tools/sdk-versioner; \\\n    chmod g+rw -R /opt/cargo/registry\n\n#\n# Final image\n#\nFROM bare_base_image AS final_image\nARG rust_stable_version=1.58.1\nARG rust_nightly_version=nightly-2022-03-29\nRUN set -eux; \\\n    yum -y updateinfo; \\\n    yum -y install \\\n        ca-certificates \\\n        gcc \\\n        git \\\n        java-11-amazon-corretto-headless \\\n        make \\\n        openssl-devel \\\n        pkgconfig \\\n        python3 \\\n        python3-devel \\\n        python3-pip \\\n        shadow-utils; \\\n    yum clean all; \\\n    rm -rf /var/cache/yum; \\\n    groupadd build; \\\n    useradd -m -g build build; \\\n    chmod 775 /home/build;\nCOPY --chown=build:build --from=install_node /opt/nodejs /opt/nodejs\nCOPY --chown=build:build --from=install_rust /opt/cargo /opt/cargo\nCOPY --chown=build:build --from=install_rust /opt/rustup /opt/rustup\nENV PATH=/opt/cargo/bin:/opt/nodejs/bin:$PATH \\\n    CARGO_HOME=/opt/cargo \\\n    RUSTUP_HOME=/opt/rustup \\\n    JAVA_HOME=/usr/lib/jvm/jre-11-openjdk \\\n    GRADLE_USER_HOME=/home/build/.gradle \\\n    RUST_STABLE_VERSION=${rust_stable_version} \\\n    RUST_NIGHTLY_VERSION=${rust_nightly_version} \\\n    CARGO_INCREMENTAL=0 \\\n    RUSTDOCFLAGS=\"-D warnings\" \\\n    RUSTFLAGS=\"-D warnings\" \\\n    LANG=en_US.UTF-8 \\\n    LC_ALL=en_US.UTF-8\n# SMITHY_RS_DOCKER_BUILD_IMAGE indicates to build scripts that they are being built inside of the Docker build image.\n# This is used primarily by the `build.gradle.kts` files in choosing how to execute build tools. If inside the image,\n# they will assume the tools are on the PATH, but if outside of the image, they will `cargo run` the tools.\nENV SMITHY_RS_DOCKER_BUILD_IMAGE=1\nRUN npm install -g diff2html-cli@5.1.11 && pip3 install --no-cache-dir uvloop==0.16.0 && npm cache clean --force;\nWORKDIR /home/build\nCOPY ci-build/scripts/sanity-test /home/build/sanity-test\nRUN /home/build/sanity-test\n"
}