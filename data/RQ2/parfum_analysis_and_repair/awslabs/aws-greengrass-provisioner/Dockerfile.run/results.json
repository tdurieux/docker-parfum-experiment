{
  "startTime": 1674253676435,
  "endTime": 1674253677762,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM amazoncorretto:11-al2-full\n\n# Install wget so we can fetch Device Tester and shasum so we can validate it\nRUN yum install -y wget perl-Digest-SHA && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# Fetch and validate Device Tester\nRUN cd / && \\\n    echo \"c805f3028af5ba803689187c6ccf935acf92c87c  devicetester_greengrass_linux_1.3.2.zip\" > /devicetester_greengrass_linux_1.3.2.zip.sha && \\\n    wget --referer=https://aws.amazon.com/greengrass/device-tester/ https://d232ctwt5kahio.cloudfront.net/greengrass/devicetester_greengrass_linux_1.3.2.zip && \\\n    shasum -c /devicetester_greengrass_linux_1.3.2.zip.sha\n\n# Install JDK 8 so Java functions can be built\nRUN amazon-linux-extras enable corretto8 && \\\n    yum install -y java-1.8.0-amazon-corretto-devel && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# Install pip so Python 3 functions can be built\nRUN yum install -y python3-pip python3 python3-setuptools python3-devel.x86_64 && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# Install NodeJS and npm so Node functions can be built\nRUN yum install -y gcc-c++ make && \\\n    curl -f -sL https://rpm.nodesource.com/setup_12.x | bash - && \\\n    yum install -y nodejs && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# Install unzip so we can unzip Gradle\nRUN yum install -y unzip && rm -rf /var/cache/yum\n\n# Install latest version of Gradle with sources to speed up Java builds. Lambda function developers need sources but we don't so we clear them out.\n#   If we just install the version without sources though it will still attempt to download the distribution each time since it is named differently.\n#   Therefore we download the sources distribution but clean out the components we don't need.\nRUN wget -c https://services.gradle.org/distributions/gradle-6.8.1-all.zip && \\\n    mkdir -p /opt/gradle && \\\n    unzip -d /opt/gradle gradle-6.8.1-all.zip\n\nRUN mkdir temp && \\\n    cd temp && \\\n    /opt/gradle/gradle-6.8.1/bin/gradle init && \\\n    /opt/gradle/gradle-6.8.1/bin/gradle wrapper --gradle-version 6.8.1 --distribution-type all && \\\n    ./gradlew tasks && \\\n    cd .. && \\\n    rm -rf temp && \\\n    rm -f gradle*zip && \\\n    rm -rf /root/.gradle/wrapper/dists/*/*/*/src \\\n           /root/.gradle/wrapper/dists/*/*/*/samples \\\n           /root/.gradle/wrapper/dists/*/*/*/media \\\n           /root/.gradle/wrapper/dists/*/*/*.zip \\\n           /root/.gradle/wrapper/dists/*/*/*/docs\n\n# Added Docker CLI to allow Docker builds of native functions inside of the container\nRUN amazon-linux-extras install docker\n\n# Install zip since native builds require it\nRUN yum install -y zip && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# Install the protobuf compiler so functions can use it in their build process\nRUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/protoc-3.11.1-linux-x86_64.zip && \\\n    unzip protoc-3.11.1-linux-x86_64.zip bin/protoc && \\\n    rm protoc-3.11.1-linux-x86_64.zip\n\nCOPY AwsGreengrassProvisioner.jar AwsGreengrassProvisioner.jar\n\nENTRYPOINT [\"java\", \"-jar\", \"AwsGreengrassProvisioner.jar\"]\n"
}