{
  "startTime": 1674219567643,
  "endTime": 1674219569910,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 150
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 237,
        "lineEnd": 237,
        "columnStart": 4,
        "columnEnd": 134
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 258,
        "lineEnd": 258,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 297,
        "lineEnd": 297,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 26,
        "columnEnd": 40
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 318,
        "lineEnd": 318,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 348,
        "lineEnd": 349,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 26,
        "columnEnd": 40
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 28,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 276,
        "lineEnd": 291,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedDockerfile": "ARG AMD64_BASE\nARG ARM64_BASE\nARG NODE_VERSION=16.15.1\n\nFROM node:$NODE_VERSION-bullseye-slim as node\n\nFROM ${AMD64_BASE} as base-amd64\n\nFROM ${ARM64_BASE} as base-arm64\n\nONBUILD RUN \\\n    if [[ -d /usr/local/cuda/lib64 ] && [ ! -f /usr/local/cuda/lib64/libcudart.so ]]; then \\\n        minor=\"$(nvcc --version | head -n4 | tail -n1 | cut -d' ' -f5 | cut -d',' -f1)\"; \\\n        major=\"$(nvcc --version | head -n4 | tail -n1 | cut -d' ' -f5 | cut -d',' -f1 | cut -d'.' -f1)\"; \\\n        ln -s /usr/local/cuda/lib64/libcudart.so.$minor /usr/local/cuda/lib64/libcudart.so.$major; \\\n        ln -s /usr/local/cuda/lib64/libcudart.so.$major /usr/local/cuda/lib64/libcudart.so; \\\n        rm /etc/ld.so.cache && ldconfig; \\\n    fi\n\nFROM base-${TARGETARCH} as compilers\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV PATH=\"$PATH:\\\n${CUDA_HOME}/bin:\\\n${CUDA_HOME}/nvvm/bin\"\nENV LD_LIBRARY_PATH=\"\\\n/usr/lib/aarch64-linux-gnu:\\\n/usr/lib/x86_64-linux-gnu:\\\n/usr/lib/i386-linux-gnu:\\\n${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}\\\n${CUDA_HOME}/lib64:\\\n${CUDA_HOME}/nvvm/lib64:\\\n${CUDA_HOME}/lib64/stubs\"\n\nARG GCC_VERSION=9\nARG SCCACHE_VERSION=0.2.15\nARG LINUX_VERSION=ubuntu20.04\n\nARG NODE_VERSION=16.15.1\nENV NODE_VERSION=$NODE_VERSION\n\n# Install node\nCOPY --from=node /usr/local/bin/node /usr/local/bin/node\nCOPY --from=node /usr/local/include/node /usr/local/include/node\nCOPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules\n# Install yarn\nCOPY --from=node /opt/yarn-v*/bin/* /usr/local/bin/\nCOPY --from=node /opt/yarn-v*/lib/* /usr/local/lib/\n# Copy entrypoint\nCOPY --from=node /usr/local/bin/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\n\nADD --chown=root:root https://gitlab.com/nvidia/container-images/opengl/-/raw/5191cf205d3e4bb1150091f9464499b076104354/glvnd/runtime/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json\n\n# Install compilers\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    gpg wget software-properties-common lsb-release \\\n && add-apt-repository --no-update -y ppa:git-core/ppa \\\n && add-apt-repository --no-update -y ppa:ubuntu-toolchain-r/test \\\n # Install kitware cmake apt repository \\\n && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \\\n  | gpg --batch --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null \\\n && bash -c 'echo -e \"\\\ndeb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\\n\\\n\" | tee /etc/apt/sources.list.d/kitware.list >/dev/null' \\\n\n && apt update \\\n && apt install --no-install-recommends -y \\\n    git cmake ninja-build \\\n    gcc-${GCC_VERSION} g++-${GCC_VERSION} gdb \\\n    curl libssl-dev libcurl4-openssl-dev xz-utils zlib1g-dev liblz4-dev \\\n    # From opengl/glvnd:devel\n    pkg-config \\\n    libxau6 libxdmcp6 libxcb1 libxext6 libx11-6 \\\n    libglvnd-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev \\\n\n && chmod 0644 /usr/share/glvnd/egl_vendor.d/10_nvidia.json \\\n && echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf \\\n\n # Install sccache\n && curl -f -SsL \"https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VERSION/sccache-v$SCCACHE_VERSION-$(uname -m)-unknown-linux-musl.tar.gz\" \\\n    | tar -C /usr/bin -zf - --wildcards --strip-components=1 -x */sccache \\\n && chmod +x /usr/bin/sccache \\\n\n # Install npm\n && bash -c 'echo -e \"\\\nfund=false\\n\\\naudit=false\\n\\\nsave-prefix=\\n\\\n--omit=optional\\n\\\nsave-exact=true\\n\\\npackage-lock=false\\n\\\nupdate-notifier=false\\n\\\nscripts-prepend-node-path=true\\n\\\nregistry=https://registry.npmjs.org/\\n\\\n\" | tee /root/.npmrc >/dev/null' \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs \\\n && ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm \\\n && ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx \\\n # Smoke tests\n && echo \"node version: $(node --version)\" \\\n && echo \" npm version: $(npm --version)\" \\\n && echo \"yarn version: $(yarn --version)\" \\\n\n # Clean up\n && add-apt-repository --remove -y ppa:git-core/ppa \\\n && add-apt-repository --remove -y ppa:ubuntu-toolchain-r/test \\\n && apt autoremove -y && apt clean \\\n && rm -rf \\\n    /tmp/* \\\n    /var/tmp/* \\\n    /var/cache/apt/* \\\n    /var/lib/apt/lists/* && yarn cache clean;\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nWORKDIR /\n\nFROM compilers as main-arm64\n\nONBUILD ARG ADDITIONAL_GROUPS=\"--groups sudo,video\"\n\nFROM compilers as main-amd64\n\nONBUILD ARG LLDB_VERSION=12\nONBUILD ARG CLANGD_VERSION=12\nONBUILD ARG CLANG_FORMAT_VERSION=12\n\n# Install dependencies and dev tools (llnode etc.)\n \\\nRUN export DEBIAN_FRONTEND=noninteractive \\\n # Install LLVM apt sources\n && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && bash -c 'echo -e \"\\\ndeb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-${LLDB_VERSION} main\\n\\\ndeb-src  http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-${LLDB_VERSION} main\\n\\\n\" | tee /etc/apt/sources.list.d/llvm-${LLDB_VERSION}.list >/dev/null' \\\n && bash -c 'echo -e \"\\\ndeb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-${CLANGD_VERSION} main\\n\\\ndeb-src  http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-${CLANGD_VERSION} main\\n\\\n\" | tee /etc/apt/sources.list.d/llvm-${CLANGD_VERSION}.list >/dev/null' \\\n && bash -c 'echo -e \"\\\ndeb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-${CLANG_FORMAT_VERSION} main\\n\\\ndeb-src  http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-${CLANG_FORMAT_VERSION} main\\n\\\n\" | tee /etc/apt/sources.list.d/llvm-${CLANG_FORMAT_VERSION}.list >/dev/null' \\\n \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    # lldb (for llnode)\n    lldb-${LLDB_VERSION} libllvm${LLDB_VERSION} \\\n    # clangd for C++ intellisense and debugging\n    clangd-${CLANGD_VERSION} \\\n    # clang-format for automatically formatting C++ and TS/JS\n    clang-format-${CLANG_FORMAT_VERSION} \\\n \\\n # Set alternatives for clangd\n && (update-alternatives --remove-all clangd >/dev/null 2>&1 || true) \\\n && update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-${CLANGD_VERSION} 100 \\\n # Set clangd-${CLANGD_VERSION} as the default clangd\n && update-alternatives --set clangd /usr/bin/clangd-${CLANGD_VERSION} \\\n # Set alternatives for clang-format\n && (update-alternatives --remove-all clang-format >/dev/null 2>&1 || true) \\\n && update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-${CLANG_FORMAT_VERSION} 100 \\\n # Set clang-format-${CLANG_FORMAT_VERSION} as the default clang-format\n && update-alternatives --set clang-format /usr/bin/clang-format-${CLANG_FORMAT_VERSION} \\\n # Set alternatives for lldb and llvm-config so it's in the path for llnode\n && (update-alternatives --remove-all lldb >/dev/null 2>&1 || true) \\\n && (update-alternatives --remove-all llvm-config >/dev/null 2>&1 || true) \\\n && update-alternatives \\\n    --install /usr/bin/lldb lldb /usr/bin/lldb-${LLDB_VERSION} 100 \\\n    --slave /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-${LLDB_VERSION} \\\n # Set lldb-${LLDB_VERSION} as the default lldb, llvm-config-${LLDB_VERSION} as default llvm-config\n && update-alternatives --set lldb /usr/bin/lldb-${LLDB_VERSION} \\\n \\\n # Globally install llnode\n && mkdir -p /usr/local/lib/llnode \\\n && wget -O - https://github.com/trxcllnt/llnode/archive/refs/heads/use-llvm-project-monorepo.tar.gz \\\n  | tar -C /usr/local/lib/llnode -xzf - --strip-components=1 \\\n && npm pack --pack-destination /usr/local/lib/llnode /usr/local/lib/llnode \\\n && npm install --location=global --unsafe-perm --no-audit --no-fund --no-update-notifier /usr/local/lib/llnode/llnode-*.tgz \\\n && echo \"llnode: $(which -a llnode)\" \\\n && echo \"llnode version: $(llnode --version)\" \\\n \\\n # Clean up\n && apt autoremove -y && apt clean \\\n && rm -rf \\\n    /tmp/* \\\n    /var/tmp/* \\\n    /var/cache/apt/* \\\n    /var/lib/apt/lists/* \\\n    /usr/local/lib/llnode \\\n    /etc/apt/sources.list.d/llvm-${LLDB_VERSION}.list \\\n    /etc/apt/sources.list.d/llvm-${CLANGD_VERSION}.list \\\n    /etc/apt/sources.list.d/llvm-${CLANG_FORMAT_VERSION}.list && npm cache clean --force; ONBUILD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFROM main-${TARGETARCH}\n\nENV NVIDIA_DRIVER_CAPABILITIES all\n\nARG TARGETARCH\n\nARG ADDITIONAL_GROUPS\nARG UCX_VERSION=1.12.1\nARG FIXUID_VERSION=0.5.1\nARG NODE_WEBRTC_VERSION=0.4.7\n\n# Install dependencies (llnode etc.)\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    jq entr ssh vim nano sudo less bash-completion \\\n    # X11 dependencies\n    libxi-dev libxrandr-dev libxinerama-dev libxcursor-dev \\\n    # node-canvas dependencies\n    libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev \\\n    # GLFW Wayland dependencies\n    extra-cmake-modules libwayland-dev wayland-protocols libxkbcommon-dev \\\n    # GLEW dependencies\n    build-essential libxmu-dev libgl1-mesa-dev libegl1-mesa-dev libglu1-mesa-dev \\\n    # cuSpatial dependencies\n    libgdal-dev \\\n    # SQL dependencies\n    maven openjdk-8-jdk-headless openjdk-8-jre-headless libboost-regex-dev libboost-system-dev libboost-filesystem-dev \\\n    # UCX runtime dependencies\n    libibverbs-dev librdmacm-dev libnuma-dev \\\n \\\n # Install UCX\n && wget -O /var/cache/apt/archives/ucx-v${UCX_VERSION}-${LINUX_VERSION}-mofed5-cuda11.deb \\\n    https://github.com/openucx/ucx/releases/download/v${UCX_VERSION}/ucx-v${UCX_VERSION}-${LINUX_VERSION}-mofed5-cuda11.deb \\\n && dpkg -i /var/cache/apt/archives/ucx-v${UCX_VERSION}-${LINUX_VERSION}-mofed5-cuda11.deb || true && apt --fix-broken install -y \\\n \\\n # Install fixuid \\\n && curl -f -SsL \"https://github.com/boxboat/fixuid/releases/download/v$FIXUID_VERSION/fixuid-$FIXUID_VERSION-linux-${TARGETARCH}.tar.gz\" \\\n  | tar -C /usr/bin -xzf - \\\n && chown root:root /usr/bin/fixuid && chmod 4755 /usr/bin/fixuid && mkdir -p /etc/fixuid \\\n && bash -c 'echo -e \"\\\nuser: rapids\\n\\\ngroup: rapids\\n\\\npaths:\\n\\\n  - /opt/rapids\\n\\\n  - /opt/rapids/node\\n\\\n\" | tee /etc/fixuid/config.yml >/dev/null' \\\n\n # Add a non-root user\n && useradd \\\n    --uid 1000 --shell /bin/bash \\\n    --user-group ${ADDITIONAL_GROUPS} \\\n    --create-home --home-dir /opt/rapids \\\n    rapids \\\n && mkdir -p /opt/rapids/node/.cache \\\n && mkdir -p -m 0700 /opt/rapids/.ssh \\\n\n # Add GitHub's public keys to known_hosts\n && curl -f -s https://api.github.com/meta | jq -r '.ssh_keys | map(\"github.com \\(.)\") | .[]' > /opt/rapids/.ssh/known_hosts \\\n && cp /root/.npmrc /opt/rapids/.npmrc \\\n && ln -s /opt/rapids/node/.vscode/server /opt/rapids/.vscode-server \\\n && ln -s /opt/rapids/node/.vscode/server-insiders /opt/rapids/.vscode-server-insiders \\\n && chown -R rapids:rapids /opt/rapids \\\n && bash -c 'echo \"rapids ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/nopasswd' \\\n\n # yellow + blue terminal prompt\n && sed -ri \"s/32m/33m/g\" /opt/rapids/.bashrc \\\n && sed -ri \"s/34m/36m/g\" /opt/rapids/.bashrc \\\n # Persist infinite bash history on the host\n && bash -c 'echo -e \"\\\n\\n\\\n# Infinite bash history\\n\\\nexport HISTSIZE=-1;\\n\\\nexport HISTFILESIZE=-1;\\n\\\nexport HISTCONTROL=ignoreboth;\\n\\\n\\n\\\n# Change the file location because certain bash sessions truncate .bash_history file upon close.\\n\\\n# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login\\n\\\nexport HISTFILE=/opt/rapids/node/.cache/.eternal_bash_history;\\n\\\n\\n\\\nmkdir -p \\$(dirname \\$HISTFILE) && touch \\$HISTFILE;\\n\\\nmkdir -p /opt/rapids/node/.vscode/server{,-insiders}\\n\\\n\\n\\\n# flush commands to .bash_history immediately\\n\\\nexport PROMPT_COMMAND=\\\"history -a; \\$PROMPT_COMMAND\\\";\\n\\\n\"' >> /opt/rapids/.bashrc \\\n\n # Add npm and yarn completions\n && mkdir -p /etc/bash_completion.d \\\n && npm completion > /etc/bash_completion.d/npm \\\n && curl -fsSL --compressed \\\n    https://raw.githubusercontent.com/dsifford/yarn-completion/5bf2968493a7a76649606595cfca880a77e6ac0e/yarn-completion.bash \\\n  | tee /etc/bash_completion.d/yarn >/dev/null \\\n\n # Install NVENC-enabled wrtc\n && wget -O /opt/rapids/wrtc-dev.tgz \\\n    https://github.com/trxcllnt/node-webrtc-builds/releases/download/v${NODE_WEBRTC_VERSION}/wrtc-${NODE_WEBRTC_VERSION}-linux-${TARGETARCH}.tgz \\\n && npm install --location=global --unsafe-perm --no-audit --no-fund --no-update-notifier /opt/rapids/wrtc-dev.tgz \\\n # Clean up\n && apt autoremove -y && apt clean \\\n && rm -rf \\\n    /tmp/* \\\n    /var/tmp/* \\\n    /var/cache/apt/* \\\n    /var/lib/apt/lists/* && npm cache clean --force;\n\nENV NO_UPDATE_NOTIFIER=1\nENV RAPIDSAI_SKIP_DOWNLOAD=1\nENV NODE_PATH=/usr/local/lib/node_modules\nENV NODE_OPTIONS=\"--experimental-vm-modules --trace-uncaught\"\n\nUSER rapids\n\nWORKDIR /opt/rapids/node\n\nENTRYPOINT [\"fixuid\", \"-q\", \"docker-entrypoint.sh\"]\n\nCMD [\"/bin/bash\", \"-l\"]\n"
}