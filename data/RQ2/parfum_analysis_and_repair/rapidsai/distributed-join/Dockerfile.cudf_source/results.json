{
  "startTime": 1674252436099,
  "endTime": 1674252437369,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 25,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 25,
        "columnEnd": 98
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 104
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:11.0-devel-ubuntu20.04\nARG DEBIAN_FRONTEND=noninteractive\nENV CUDA_ROOT=/usr/local/cuda\nWORKDIR /\n\nRUN apt-get update -y && apt-get install --no-install-recommends -y build-essential wget git vim libpciaccess-dev pciutils && rm -rf /var/lib/apt/lists/*;\n\n# Install conda\nADD https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh /miniconda.sh\nRUN sh /miniconda.sh -b -p /conda && /conda/bin/conda update -n base conda\nENV PATH=${PATH}:/conda/bin\n# Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Setup cuDF\nRUN git clone https://github.com/rapidsai/cudf.git /cudf \\\n    && cd /cudf \\\n    && git checkout branch-0.19 \\\n    && git submodule update --init --remote --recursive \\\n    && conda env create --name cudf_dev --file conda/environments/cudf_dev_cuda11.0.yml \\\n    && source activate cudf_dev \\\n    && conda install -c rapidsai -c nvidia -c conda-forge -y openmpi cmake \\\n    && mkdir -p cpp/build \\\n    && cd cpp/build \\\n    && cmake .. -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DCMAKE_CUDA_ARCHITECTURES=\"70;80\" \\\n    && make -j install \\\n    && conda clean -a -y\nENV CUDF_ROOT=/conda/envs/cudf_dev\nENV LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${CUDF_ROOT}/lib:${LD_LIBRARY_PATH}\nENV PATH=${PATH}:${CUDF_ROOT}/bin\n\n# Setup Mellanox OFED\nRUN apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        gnupg \\\n        wget && rm -rf /var/lib/apt/lists/*;\nRUN wget -qO - https://www.mellanox.com/downloads/ofed/RPM-GPG-KEY-Mellanox | apt-key add - && \\\n    mkdir -p /etc/apt/sources.list.d && wget -q -nc --no-check-certificate -P /etc/apt/sources.list.d https://linux.mellanox.com/public/repo/mlnx_ofed/5.2-1.0.4.0/ubuntu20.04/mellanox_mlnx_ofed.list && \\\n    apt-get update -y && \\\n    apt-get install -y --no-install-recommends \\\n        ibverbs-providers \\\n        ibverbs-utils \\\n        libibmad-dev \\\n        libibmad5 \\\n        libibumad-dev \\\n        libibumad3 \\\n        libibverbs-dev \\\n        libibverbs1 \\\n        librdmacm-dev \\\n        librdmacm1 && rm -rf /var/lib/apt/lists/*;\n\n# Setup UCX\nADD https://github.com/openucx/ucx/releases/download/v1.9.0/ucx-1.9.0.tar.gz .\nRUN apt-get install --no-install-recommends -y numactl libnuma-dev file pkg-config binutils binutils-dev \\\n    && tar -zxf ucx-1.9.0.tar.gz && cd ucx-1.9.0 \\\n    && ./contrib/configure-release --enable-mt --with-cuda=/usr/local/cuda --with-rdmacm --with-verbs \\\n    && make -j \\\n    && make install \\\n    && cd / && rm -rf ucx-1.9.0 && rm ucx-1.9.0.tar.gz && rm -rf /var/lib/apt/lists/*;\nENV UCX_ROOT=/usr\n\n# Setup nvcomp\nRUN git clone https://github.com/NVIDIA/nvcomp && cd nvcomp && git checkout branch-2.0 && mkdir -p build && cd build \\\n    && ${CUDF_ROOT}/bin/cmake .. && make -j\nENV NVCOMP_ROOT=/nvcomp/build\nENV LD_LIBRARY_PATH=${NVCOMP_ROOT}/lib:${LD_LIBRARY_PATH}\n\n# Setup NCCL\nRUN git clone https://github.com/NVIDIA/nccl && cd nccl \\\n    && make -j src.build NVCC_GENCODE=\"-gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_80,code=sm_80 -gencode=arch=compute_80,code=compute_80\"\nENV NCCL_ROOT=/nccl/build\nENV LD_LIBRARY_PATH=${NCCL_ROOT}/lib:${LD_LIBRARY_PATH}\n"
}