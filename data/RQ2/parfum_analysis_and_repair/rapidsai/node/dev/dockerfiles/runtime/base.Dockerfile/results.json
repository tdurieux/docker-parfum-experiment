{
  "startTime": 1674216501286,
  "endTime": 1674216502150,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 39,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 57,
        "columnEnd": 73
      }
    }
  ],
  "repairedDockerfile": "ARG AMD64_BASE\nARG ARM64_BASE\nARG DEVEL_IMAGE\n\nFROM ${DEVEL_IMAGE} as devel\n\nFROM ${AMD64_BASE} as base-amd64\n\nFROM ${ARM64_BASE} as base-arm64\n\nONBUILD RUN cd /usr/local/cuda/lib64 \\\n && ln -s \\\n    libcudart.so.$(nvcc --version | head -n4 | tail -n1 | cut -d' ' -f5 | cut -d',' -f1) \\\n    libcudart.so.$(nvcc --version | head -n4 | tail -n1 | cut -d' ' -f5 | cut -d',' -f1 | cut -d'.' -f1) \\\n && ln -s \\\n    libcudart.so.$(nvcc --version | head -n4 | tail -n1 | cut -d' ' -f5 | cut -d',' -f1 | cut -d'.' -f1) \\\n    libcudart.so \\\n && rm /etc/ld.so.cache && ldconfig\n\nONBUILD ARG ADDITIONAL_GROUPS=\"--groups video\"\n\nFROM base-${TARGETARCH}\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nENV NVIDIA_DRIVER_CAPABILITIES all\n\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV LD_LIBRARY_PATH=\"\\\n/usr/lib/aarch64-linux-gnu:\\\n/usr/lib/x86_64-linux-gnu:\\\n/usr/lib/i386-linux-gnu:\\\n${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}\\\n${CUDA_HOME}/lib64:\\\n${CUDA_HOME}/nvvm/lib64:\\\n${CUDA_HOME}/lib64/stubs\"\n\nADD --chown=root:root https://gitlab.com/nvidia/container-images/opengl/-/raw/5191cf205d3e4bb1150091f9464499b076104354/glvnd/runtime/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json\n\n# Install gcc-9 toolchain\nRUN export DEBIAN_FRONTEND=noninteractive \\\n # Workaround for https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212772\n && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/$( \\\n    . /etc/os-release; echo $NAME$VERSION_ID | tr -d '.' | tr '[:upper:]' '[:lower:]' \\\n )/$(uname -p)/3bf863cc.pub \\\n \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    software-properties-common \\\n && add-apt-repository --no-update -y ppa:ubuntu-toolchain-r/test \\\n && apt update \\\n && apt install --no-install-recommends -y \\\n    libstdc++6 \\\n    # From opengl/glvnd:runtime\n    libxau6 libxdmcp6 libxcb1 libxext6 libx11-6 \\\n    libglvnd0 libopengl0 libgl1 libglx0 libegl1 libgles2 \\\n \\\n && chmod 0644 /usr/share/glvnd/egl_vendor.d/10_nvidia.json \\\n && echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf \\\n # Clean up\n && add-apt-repository --remove -y ppa:ubuntu-toolchain-r/test \\\n && apt remove -y software-properties-common \\\n && apt autoremove -y && apt clean \\\n && rm -rf \\\n    /tmp/* \\\n    /var/tmp/* \\\n    /var/lib/apt/lists/* \\\n    /var/cache/apt/archives/*\n\n# Install node\nCOPY --from=devel /usr/local/bin/node                 /usr/local/bin/node\nCOPY --from=devel /usr/local/include/node             /usr/local/include/node\nCOPY --from=devel /usr/local/lib/node_modules         /usr/local/lib/node_modules\n# Install yarn\nCOPY --from=devel /usr/local/bin/yarn                 /usr/local/bin/yarn\nCOPY --from=devel /usr/local/bin/yarn.js              /usr/local/bin/yarn.js\nCOPY --from=devel /usr/local/bin/yarn.cmd             /usr/local/bin/yarn.cmd\nCOPY --from=devel /usr/local/bin/yarnpkg              /usr/local/bin/yarnpkg\nCOPY --from=devel /usr/local/bin/yarnpkg.cmd          /usr/local/bin/yarnpkg.cmd\nCOPY --from=devel /usr/local/lib/cli.js               /usr/local/lib/cli.js\nCOPY --from=devel /usr/local/lib/v8-compile-cache.js  /usr/local/lib/v8-compile-cache.js\n# Copy entrypoint\nCOPY --from=devel /usr/local/bin/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\n\nARG UID=1000\nARG ADDITIONAL_GROUPS\n\nRUN useradd --uid $UID --user-group ${ADDITIONAL_GROUPS} --shell /bin/bash --create-home node \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs \\\n && ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm \\\n && ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx \\\n # smoke tests\n && node --version && npm --version && yarn --version && yarn cache clean;\n\nENV npm_config_fund=false\nENV npm_config_update_notifier=false\nENV NODE_OPTIONS=\"--experimental-vm-modules --trace-uncaught\"\n\nWORKDIR /home/node\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nSHELL [\"/bin/bash\", \"-l\"]\n\nCMD [\"node\"]\n"
}