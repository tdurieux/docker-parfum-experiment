{
  "startTime": 1674254895146,
  "endTime": 1674254895711,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#-------------------------------------------------------------#\n#---------------------------Base------------------------------#\n#-------------------------------------------------------------#\nFROM node:lts-alpine3.11 as base\n\n# Arguments\nARG APP_PATH=/home/node/app\nARG PORT=3000\nARG BUILD_PACKAGES=\nARG DEV_PACKAGES=\"nano git\"\nARG RUNTIME_PACKAGES=\"tzdata\"\nARG NODE_PATH=.\n\n# Environment\nENV PORT=${PORT} \\\n    APP_PATH=${APP_PATH} \\\n    BUILD_PACKAGES=${BUILD_PACKAGES} \\\n    DEV_PACKAGES=${DEV_PACKAGES} \\\n    RUNTIME_PACKAGES=${RUNTIME_PACKAGES} \\\n    NODE_PATH=${NODE_PATH}\n\n# Expose ports for running processes\nEXPOSE $PORT\n\n# Update dependencies and add runtime dependencies.\n# Also create and change APP_PATH folder to match the\n# user provided by base image.\nRUN apk update && \\\n    apk upgrade && \\\n    apk add --update --no-cache ${RUNTIME_PACKAGES} && \\\n    mkdir -p ${APP_PATH} && \\\n    chown node:node -R ${APP_PATH}/\n\n# Change working directory (post ownership transfer to $APP_USER) to app directory\nWORKDIR ${APP_PATH}\n\n#-------------------------------------------------------------#\n#------------------------Development--------------------------#\n#-------------------------------------------------------------#\nFROM base as development\n\n# Development args\nARG EDITOR=nano\n\n# Change path for bundler user install\nENV EDITOR=${EDITOR}\n\n# Expose ports for debugging\nEXPOSE 9229\n\n# Add development and build packages\nRUN apk add --update --no-cache ${BUILD_PACKAGES} ${DEV_PACKAGES}\n\n# Change user to node\nUSER node\n\n# Install app dependencies\nCOPY --chown=node:node package*.json ${APP_PATH}/\n\nRUN npm install && npm cache clean --force;\n\n# Expose node_modules as a volume\nVOLUME ${APP_PATH}/node_modules\n\n# Run app on development mode by default\nCMD [\"npm\", \"run\", \"debug\"]\n\n#-------------------------------------------------------------#\n#--------------------------Release----------------------------#\n#-------------------------------------------------------------#\nFROM base as release\n\nARG NODE_ENV=production\n\n# Set NODE_ENV\nENV NODE_ENV=${NODE_ENV}\n\n# Add development and build packages\nRUN apk add --update --no-cache --virtual .build_deps ${BUILD_PACKAGES} && \\\n    rm -rf /var/cache/apk/*\n\n# Install app dependencies\nCOPY --chown=node:node package*.json ${APP_PATH}/\n\nRUN npm ci\n\n# Remove build dependencies\nRUN apk del .build_deps\n\n# Copy app files\nCOPY --chown=node:node index.js index.js\nCOPY --chown=node:node src src\nCOPY --chown=node:node config config\n\n# Change user to node\nUSER node\n\n# Start server using node directly to avoid PID problems\nCMD [\"node\", \"index.js\"]\n"
}