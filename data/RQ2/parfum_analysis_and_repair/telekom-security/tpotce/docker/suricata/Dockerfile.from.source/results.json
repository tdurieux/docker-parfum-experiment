{
  "startTime": 1674255109764,
  "endTime": 1674255111884,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine\n#\n# VARS\nENV VER=6.0.0\n#\n# Include dist\nADD dist/ /root/dist/\n#\n# Install packages\n#RUN sed -i 's/dl-cdn/dl-2/g' /etc/apk/repositories && \\\nRUN apk -U add \\\n                 ca-certificates \\\n                 curl \\\n                 file \\\n                 geoip \\\n                 hiredis \\\n                 jansson \\\n                 libcap-ng \\\n                 libmagic \\\n\t\t libmaxminddb \\\n                 libnet \\\n                 libnetfilter_queue \\\n                 libnfnetlink \\\n                 libpcap \\\n                 luajit \\\n                 lz4-libs \\\n                 musl \\\n                 nspr \\\n                 nss \\\n                 pcre \\\n                 yaml \\\n                 wget \\\n                 automake \\\n                 autoconf \\\n                 build-base \\\n                 cargo \\\n                 file-dev \\\n                 geoip-dev \\\n                 hiredis-dev \\\n                 jansson-dev \\\n                 libtool \\\n                 libcap-ng-dev \\\n                 luajit-dev \\\n\t\t libmaxminddb-dev \\\n                 libpcap-dev \\\n                 libnet-dev \\\n                 libnetfilter_queue-dev \\\n                 libnfnetlink-dev \\\n                 lz4-dev \\\n                 nss-dev \\\n                 nspr-dev \\\n                 pcre-dev \\\n                 python3 \\\n                 rust \\\n                 yaml-dev && \\\n#\n# We need latest libhtp[-dev] which is only available in community\n    apk -U add --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community \\\n               libhtp \\\n               libhtp-dev && \\\n#\n# Upgrade pip, install suricata-update to meet deps\n    pip3 install --no-cache-dir --upgrade pip && \\\n    pip3 install --no-cache-dir suricata-update && \\\n#\n# Get and build Suricata\n    mkdir -p /opt/builder/ && \\\n    wget https://www.openinfosecfoundation.org/download/suricata-$VER.tar.gz && \\\n    tar xvfz suricata-$VER.tar.gz --strip-components=1 -C /opt/builder/ && \\\n    rm suricata-$VER.tar.gz && \\\n    cd /opt/builder && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t--prefix=/usr \\\n\t--sysconfdir=/etc \\\n\t--mandir=/usr/share/man \\\n\t--localstatedir=/var \\\n\t--enable-non-bundled-htp \\\n\t--enable-nfqueue \\\n        --enable-rust \\\n\t--disable-gccmarch-native \\\n\t--enable-hiredis \\\n\t--enable-geoip \\\n\t--enable-gccprotect \\\n\t--enable-pie \\\n\t--enable-luajit && \\\n    make && \\\n    make check && \\\n    make install && \\\n    make install-full && \\\n#\n# Setup user, groups and configs\n    addgroup -g 2000 suri && \\\n    adduser -S -H -u 2000 -D -g 2000 suri && \\\n    chmod 644 /etc/suricata/*.config && \\\n    cp /root/dist/*.yaml /etc/suricata/ && \\\n    cp /root/dist/*.conf /etc/suricata/ && \\\n    cp /root/dist/*.bpf /etc/suricata/ && \\\n    mkdir -p /etc/suricata/rules && \\\n    cp /opt/builder/rules/* /etc/suricata/rules/ && \\\n#\n# Download the latest EmergingThreats OPEN ruleset\n    cp /root/dist/update.sh /usr/bin/ && \\\n    chmod 755 /usr/bin/update.sh && \\\n    suricata-update update-sources && \\\n    suricata-update --no-reload && \\\n#\n# Clean up\n    apk del --purge \\\n                 automake \\\n                 autoconf \\\n                 build-base \\\n                 cargo \\\n                 file-dev \\\n                 geoip-dev \\\n                 hiredis-dev \\\n                 jansson-dev \\\n                 libtool \\\n                 libhtp-dev \\\n                 libcap-ng-dev \\\n                 luajit-dev \\\n                 libpcap-dev \\\n\t\t libmaxminddb-dev \\\n                 libnet-dev \\\n                 libnetfilter_queue-dev \\\n                 libnfnetlink-dev \\\n                 lz4-dev \\\n                 nss-dev \\\n                 nspr-dev \\\n                 pcre-dev \\\n                 yaml-dev && \\\n    rm -rf /opt/builder && \\\n    rm -rf /root/* && \\\n    rm -rf /tmp/* && \\\n    rm -rf /var/cache/apk/*\n#\n# Start suricata\nSTOPSIGNAL SIGINT\nCMD SURICATA_CAPTURE_FILTER=$(update.sh $OINKCODE) && exec suricata -v -F $SURICATA_CAPTURE_FILTER -i $(/sbin/ip address show | /usr/bin/awk '/inet.*brd/{ print $NF; exit }')\n"
}