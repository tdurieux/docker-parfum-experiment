{
  "startTime": 1674252364031,
  "endTime": 1674252364948,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 25,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 25,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Currently unused. Originally used for Google Cloud Run. Ideally we'd use this\n# again at some point on some serverless platform that supports containers and\n# streaming HTTP responses!\n#\n# Uses the official lightweight Python image.\n# https://hub.docker.com/_/python\nFROM python:3.7-slim\n\n# Copy local code to the container image.\nENV APP_HOME /app\nWORKDIR $APP_HOME\nCOPY . ./\n\n# Install production dependencies.\nRUN pip install --no-cache-dir b2sdk gunicorn requests webob yt-dlp\nRUN apt-get update -y && apt-get install --no-install-recommends -y ffmpeg && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Run the web service on container startup. Here we use the gunicorn\n# webserver, with one worker process and 8 threads.\n# For environments with multiple CPU cores, increase the number of workers\n# to be equal to the cores available.\nCMD exec gunicorn --bind :$PORT --workers 1 --threads 8 app:application\n"
}