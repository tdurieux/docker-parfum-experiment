{
  "startTime": 1674248029947,
  "endTime": 1674248031041,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 107,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 107,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 85
      }
    }
  ],
  "repairedDockerfile": "# CUDA image is about 10GB\n# torch install is another 4GB: 2.8GB for Torch itself, 1.2GB for the pip cache\n# openspiel install is another 5GB: 1.4GB for the pip cache, 1.5GB for Tensorflow, 1.5GB for a torch reinstall?\n\n# Build image\nFROM nvidia/cuda:11.2.1-cudnn8-devel-ubuntu20.04 as build\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        # Needed for conda\n        curl ca-certificates bzip2 procps \\\n        # Needed for profiling\n        nsight-compute-2020.2.1 nsight-systems-2020.3.4 \\\n        # Needed for vast work\n        openssh-server rsync less && rm -rf /var/lib/apt/lists/*;\n\n# Set up conda\nRUN curl -f -o ~/miniconda.sh -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b -p/opt/conda && \\\n    rm ~/miniconda.sh\nENV PATH /opt/conda/bin:/opt/nvidia/nsight-compute/2020.2.1/:/opt/nvidia/nsight-systems/2020.3.4/bin/:$PATH\n\n# Set up SSH server\nADD boardlaw_rsa.pub /root/.ssh/boardlaw_rsa.pub\nADD sshd_config /etc/ssh/\nRUN mkdir -p ~/.ssh && cat ~/.ssh/boardlaw_rsa.pub > ~/.ssh/authorized_keys\nEXPOSE 22 36022\n\nWORKDIR /code\n\n# Dev image\nFROM build AS dev\n\n# Install the Python packages I usually use\nRUN apt-get install -y --no-install-recommends \\\n\n        neovim gdb wget man-db tree silversearcher-ag build-essential htop \\\n\n        git ssh-client && rm -rf /var/lib/apt/lists/*;\n\n# Grab tini so that Jupyter doesn't spray zombies everywhere\nADD https://github.com/krallin/tini/releases/download/v0.18.0/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n\n# Set up git\nRUN git config --global user.name \"Andrew Jones\" && \\\n    git config --global user.email \"andyjones.ed@gmail.com\"\n\n# Install the Python packages I usually use\n# Install Jupyter 7.5 because 7.6.1 has a bunch of lag with autoreload\nRUN pip install --no-cache-dir torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio===0.7.2 -f https://download.pytorch.org/whl/torch_stable.html\nRUN pip install --no-cache-dir \\\n        # Core reqs\n        numpy tqdm matplotlib beautifulsoup4 psutil ninja pytest b2sdk sympy portalocker fabric patchwork cloudpickle loky boto3 plotnine cvxpy \\ \n        # Things I find useful\n        pandas jupyter seaborn bokeh setproctitle wurlitzer ipython av flake8 gitpython networkx einops statsmodels dropbox sqlalchemy \\ \n        # Docs\n        sphinx \\\n        # MoHex/OpenSpiel dep\n        cmake\n\n# Geotorch\nRUN pip install --no-cache-dir git+https://github.com/Lezcano/geotorch/\n\n# Copy the Jupyter config into place.\nADD .jupyter /root/.jupyter\nADD .ipython /root/.ipython\n\n# Install my backend Jupyter extensions\n# aljpy needs to be before noterminal\nRUN pip install --no-cache-dir git+https://github.com/andyljones/aljpy.git && \\ \n    pip install --no-cache-dir git+https://github.com/andyljones/snakeviz@custom && \\\n    pip install --no-cache-dir git+https://github.com/andyljones/noterminal && \\\n    pip install --no-cache-dir git+https://github.com/andyljones/pytorch_memlab && \\\n    rm -rf ~/.cache\n\n# Install my frontend Jupyter extensions\nRUN pip install --no-cache-dir jupyter_contrib_nbextensions && \\ \n    jupyter contrib nbextension install --user && \\\n    cd /root && mkdir nbextensions && cd nbextensions && \\\n    git clone https://github.com/andyljones/nosearch && \\\n    cd nosearch && \\\n    jupyter nbextension install nosearch && \\\n    jupyter nbextension enable nosearch/main && \\\n    cd .. && \\\n    git clone https://github.com/andyljones/noterminal && \\\n    cd noterminal && \\\n    jupyter nbextension install noterminal && \\\n    jupyter nbextension enable noterminal/main && \\\n    cd .. && \\\n    git clone https://github.com/andyljones/stripcommon && \\\n    cd stripcommon && \\\n    jupyter nbextension install stripcommon && \\\n    jupyter nbextension enable stripcommon/main && \\\n    jupyter nbextension enable autoscroll/main\n\n# OpenSpiel setup. +5GB, so gonna comment it out for now\n# RUN pip install --no-cache-dir cmake && \\\n#     apt-get install clang-10 -y --no-install-recommends && \\\n#     ln -s $(which clang-10) /usr/bin/clang++ && \\\n#     cd / && \\\n#     git clone https://github.com/andyljones/open_spiel.git && \\\n#     # TODO: The install.sh bit will fail here after getting the subrepos we're after.\n#     cd open_spiel && ./install.sh || true && pip install -e .\n\n# Set up MoHex\nRUN DEBIAN_FRONTEND=noninteractive TZ=Europe/London \\\n    apt-get install gcc-7 g++-7 libdb-dev libboost-all-dev -y --no-install-recommends && \\\n    cd / && \\\n    git clone https://github.com/cgao3/benzene-vanilla-cmake.git mohex && \\\n    mkdir mohex/build && \\\n    cd mohex/build && \\\n    cmake ../ -DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7 && \\\n    make -j4 && \\\n    ln -s /mohex/build/src/mohex/mohex /bin/mohex && rm -rf /var/lib/apt/lists/*;\n\n# Something upstream of here breaks Jupyter.\nRUN pip install --no-cache-dir --upgrade ipython\n\n# Only commit the input cells of notebooks\n# https://stackoverflow.com/questions/18734739/using-ipython-notebooks-under-version-control\nRUN curl -f https://raw.githubusercontent.com/toobaz/ipynb_output_filter/master/ipynb_output_filter.py > /bin/ipynb_output_filter.py && \\\n    echo \"*.ipynb   filter=ipynb_output_filter\" > /root/.gitattributes && \\\n    git config --global core.attributesfile /root/.gitattributes && \\\n    git config --global filter.ipynb_output_filter.clean \"python /bin/ipynb_output_filter.py\" && \\\n    git config --global filter.ipynb_output_filter.smudge cat\n\n# Install the vast CLI\nRUN cd /usr/bin/ && \\\n    wget https://raw.githubusercontent.com/vast-ai/vast-python/master/vast.py -O vast && \\\n    chmod +x vast\n\n# Set up GCP SDK. You'll need to run\n# `gcloud init`\n# `gcloud auth application-default login`\n# RUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main\" | \\\n#     tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \\\n#     curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | \\\n#     apt-key --keyring /usr/share/keyrings/cloud.google.gpg  add - && \\\n#     apt-get update -y && \\\n#     apt-get install google-cloud-sdk -y\n\n# Set up the rsync daemon\nADD rsyncd.conf /etc/\n\n# Set up the entrypoint script\nADD dev.sh /usr/bin/\n\nENTRYPOINT [\"tini\", \"--\", \"dev.sh\"]\n"
}