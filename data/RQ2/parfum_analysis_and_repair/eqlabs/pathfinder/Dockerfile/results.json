{
  "startTime": 1674250991659,
  "endTime": 1674250992436,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 22,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# when developing this file, you might want to start by creating a copy of this\n# file away from the source tree and then editing that, finally committing a\n# changed version of this file. editing this file will render most of the\n# layers unusable.\n#\n# our build process requires that all files are copied for the rust build,\n# which uses `git describe --tags` to determine the build identifier.\n# Dockerfile cannot be .dockerignore'd because of this as it would produce a\n# false dirty flag.\n\n########################################\n# Stage 1: Build the pathfinder binary #\n########################################\n# Note that we're explicitly using the Debian bullseye image to make sure we're\n# compatible with the Python container we'll be copying the pathfinder\n# executable to.\nFROM rust:1.62-bullseye AS rust-builder\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y libssl-dev && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /usr/src/pathfinder\n\n# Build only the dependencies first. This utilizes\n# container layer caching for Rust builds\nRUN mkdir crates \\\n    && cargo new --lib --vcs none crates/stark_curve \\\n    && cargo new --lib --vcs none crates/stark_hash \\\n    && cargo new --lib --vcs none crates/pathfinder \\\n    && cargo new --lib --vcs none crates/load-test\n\nCOPY Cargo.toml Cargo.lock .\n\nCOPY crates/pathfinder/Cargo.toml crates/pathfinder/build.rs crates/pathfinder/\nCOPY crates/stark_curve/Cargo.toml crates/stark_curve/Cargo.toml\nCOPY crates/stark_hash/Cargo.toml crates/stark_hash/Cargo.toml\nCOPY crates/stark_hash/benches crates/stark_hash/benches\n\n# refresh indices, do it with cli git for much better ram usage\nRUN CARGO_NET_GIT_FETCH_WITH_CLI=true cargo search --limit 0\n\n# DEPENDENCY_LAYER=1 should disable any vergen interaction, because the .git directory is not yet available\nRUN CARGO_INCREMENTAL=0 DEPENDENCY_LAYER=1 cargo build --release -p pathfinder\n\n# Compile the actual libraries and binary now\nCOPY . .\nCOPY ./.git /usr/src/pathfinder/.git\n\n# Mark these for re-compilation\nRUN touch crates/pathfinder/src/lib.rs crates/pathfinder/src/build.rs crates/stark_curve/src/lib.rs crates/stark_hash/src/lib.rs\n\nRUN CARGO_INCREMENTAL=0 cargo build --release -p pathfinder --bin pathfinder\n\n#######################################\n# Stage 2: Build the Python libraries #\n#######################################\nFROM python:3.8-slim-bullseye AS python-builder\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y libgmp-dev gcc && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /usr/share/pathfinder\nCOPY py py\nRUN python3 -m pip --disable-pip-version-check install -r py/requirements-dev.txt\n\n# This reduces the size of the python libs by about 50%\nENV PY_PATH=/usr/local/lib/python3.8/\nRUN find ${PY_PATH} -type d -a -name test -exec rm -rf '{}' + \\\n    && find ${PY_PATH} -type d -a -name tests  -exec rm -rf '{}' + \\\n    && find ${PY_PATH} -type f -a -name '*.pyc' -exec rm -rf '{}' + \\\n    && find ${PY_PATH} -type f -a -name '*.pyo' -exec rm -rf '{}' +\n\n#######################\n# Final Stage: Runner #\n#######################\n# Note that we're explicitly using the Debian bullseye image to make sure we're\n# compatible with the Rust builder we've built the pathfinder executable in.\nFROM python:3.8-slim-bullseye AS runner\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y libgmp10 tini && rm -rf /var/lib/apt/lists/*\nRUN groupadd --gid 1000 pathfinder && useradd --no-log-init --uid 1000 --gid pathfinder --no-create-home pathfinder\n\nCOPY --from=rust-builder /usr/src/pathfinder/target/release/pathfinder /usr/local/bin/pathfinder\nCOPY --from=python-builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages\n\n# Create directory and volume for persistent data\nRUN install --owner 1000 --group 1000 --mode 0755 -d /usr/share/pathfinder/data\nVOLUME /usr/share/pathfinder/data\n\nUSER 1000:1000\nEXPOSE 9545\nWORKDIR /usr/share/pathfinder/data\n\n# this is required to have exposing ports work from docker, the default is not this.\nENV PATHFINDER_HTTP_RPC_ADDRESS=\"0.0.0.0:9545\"\n\n# this has been changed in #335 to follow docker best practices example; every\n# time it is changed it will be a breaking change. this allows `docker run\n# eqlabs/pathfinder --help` to give an introductory path to configuration.\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/usr/local/bin/pathfinder\"]\n\n# empty CMD is needed and cannot be --help because otherwise configuring from\n# environment variables only would be impossible and require a workaround.\nCMD []\n"
}