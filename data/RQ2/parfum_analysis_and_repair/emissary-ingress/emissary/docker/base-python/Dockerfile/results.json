{
  "startTime": 1674250315738,
  "endTime": 1674250316562,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 2,
        "columnEnd": 98
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 2,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###\n# This dockerfile builds the base image for the builder container. See\n# the main Dockerfile for more information about what the builder\n# container is and how code in this repo is built.\n#\n# Originally this base was built as part of the builder container's\n# bootstrap process. We discovered that minor network interruptions\n# would break these steps, and such interruptions were common on our\n# cloud CI system. We decided to separate out these steps so that any\n# one of them is much less likely to be the cause of a network-related\n# failure, i.e. a flake.\n#\n# See the comment before the build_builder_base() function in builder.sh\n# to see when and how often this base image is built and pushed.\n##\n\n########################################\n# Third-party code\n########################################\n\nFROM docker.io/frolvlad/alpine-glibc:alpine-3.15_glibc-2.34\n\nWORKDIR /buildroot\n\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin:/buildroot/bin\n\nRUN apk --no-cache add \\\n    bash \\\n    gcc \\\n    make \\\n    musl-dev \\\n    curl \\\n    cython \\\n    docker-cli \\\n    git \\\n    iptables \\\n    jq \\\n    libcap \\\n    libcap-dev \\\n    libffi-dev \\\n    ncurses \\\n    openssl-dev \\\n    py3-pip=~20.3.4 \\\n    python3=~3.9.7 \\\n    python3-dev \\\n    rust \\\n    cargo \\\n    patchelf \\\n    rsync \\\n    sudo \\\n    yaml-dev \\\n    && ln -s /usr/bin/python3 /usr/bin/python \\\n    && chmod u+s $(which docker)\n\n# Consult\n# https://github.com/jazzband/pip-tools/#versions-and-compatibility to\n# select a pip-tools version that corresponds to the 'py3-pip' and\n# 'python3' versions above.\nRUN pip3 install --no-cache-dir pip-tools==6.3.1\n\nRUN curl --fail -L https://dl.google.com/go/go1.17.6.linux-amd64.tar.gz | tar -C /usr/local -xzf -\n\nRUN curl --fail -L https://storage.googleapis.com/kubernetes-release/release/v1.23.3/bin/linux/amd64/kubectl -o /usr/bin/kubectl && \\\n    chmod a+x /usr/bin/kubectl\n\n# The YAML parser is... special. To get the C version, we need to install Cython and libyaml, then\n# build it locally -- just using pip won't work.\n#\n# Download, build, and install PyYAML.\nRUN mkdir /tmp/pyyaml && \\\n  cd /tmp/pyyaml && \\\n  curl -f -o pyyaml-5.4.1.1.tar.gz -L https://github.com/yaml/pyyaml/archive/refs/tags/5.4.1.1.tar.gz && \\\n  tar xzf pyyaml-5.4.1.1.tar.gz && \\\n  cd pyyaml-5.4.1.1 && \\\n  python3 setup.py --with-libyaml install && rm pyyaml-5.4.1.1.tar.gz\n\n# orjson is also special.  The wheels on PyPI rely on glibc, so we\n# need to use cargo/rustc/patchelf to build a musl-compatible version.\nRUN pip3 install --no-cache-dir orjson==3.6.6\n"
}