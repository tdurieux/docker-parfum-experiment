{
  "startTime": 1674249609778,
  "endTime": 1674249611515,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 83,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 88,
        "lineEnd": 91,
        "columnStart": 22,
        "columnEnd": 101
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster AS base\nENV LANG=C.UTF-8\n# To get the list of build dependency packages from the Vagrantfile, run:\n#\n#     sed '/# Install toolchain/,/^$/!d' Vagrantfile \\\n#         | sed -En 's/^\\s+(\\S+)\\s*\\\\?$/\\1/p' | sort\n#\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    autoconf \\\n    automake \\\n    autopoint \\\n    build-essential \\\n    cmake \\\n    gettext \\\n    git \\\n    libssl-dev \\\n    libtool \\\n    ninja-build \\\n    pkg-config \\\n    python-twisted \\\n    rsync \\\n    texinfo \\\n    unzip \\\n    wget \\\n    zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n# quieten wget and unzip\nRUN echo 'quiet = on' >> /etc/wgetrc\nWORKDIR /usr/local/src\n\nFROM base as builder\n# This version is a recommendation and this file has been tested to work for it,\n# but you may attempt to build other versions by overriding this argument.\n# Also see `OUINET_DOCKER_VERSION` below.\nARG OUINET_VERSION=v0.21.1\nRUN git clone --recursive -b \"$OUINET_VERSION\" https://github.com/equalitie/ouinet.git\nWORKDIR /opt/ouinet\n# The C.UTF-8 locale (which is always available in Debian)\n# is needed to allow CMake to extract files in the Go language binary distribution\n# with UTF-8-encoded Unicode names.\nRUN cmake /usr/local/src/ouinet \\\n && make\nRUN cp -r /usr/local/src/ouinet/repos/ repo-templates/\nARG OUINET_DEBUG=no\nRUN \\\nif [ $OUINET_DEBUG != yes ]; then \\\n    strip injector client src/ouiservice/obfs4proxy/obfs4proxy test/bt-* test/oui-* \\\n        && find . -name '*.so' -exec strip '{}' + \\\n        && find . -wholename '*/libexec/*' -executable -type f -exec strip '{}' + ; \\\nfi\n# Setting this to a different version than `OUINET_VERSION` allows to\n# use that version's Docker-specific files (e.g. wrapper scripts)\n# without having to rebuild source.\n# Maybe those Docker-specific files should go in a different repo.\nARG OUINET_DOCKER_VERSION=$OUINET_VERSION\nRUN cd /usr/local/src/ouinet \\\n && git fetch -t \\\n && git checkout \"$OUINET_DOCKER_VERSION\"\n# Populate the licenses directory (avoid version numbers in source paths).\nRUN /usr/local/src/ouinet/scripts/add-licenses-dir.sh /usr/local/src/ouinet .\n\nFROM debian:buster\n# To get the list of system library packages to install,\n# enter the build directory and execute:\n#\n#     ldd injector client $(find . -name '*.so' | grep -v '\\.libs') \\\n#         | sed -En 's#^.* => (/lib/.*|/usr/lib/.*) \\(.*#\\1#p' | sort -u \\\n#         | (while read l; do dpkg -S $l; done) | cut -f1 -d: | sort -u\n#\nARG OUINET_DEBUG=no\n# This will also be used by the wrapper script.\nENV OUINET_DEBUG=$OUINET_DEBUG\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libc6 \\\n    libgcc1 \\\n    libssl1.1 \\\n    libstdc++6 \\\n    zlib1g \\\n\n    ca-certificates \\\n    $(echo $OUINET_DEBUG | sed -n 's/^yes$/gdb/p') \\\n\n    lsb-release \\\n    netcat-openbsd \\\n    wget \\\n && rm -rf /var/lib/apt/lists/*\n# Fetch and install i2pd.\nARG I2PD_VERSION=2.23.0\nRUN wget -q -P /tmp \"https://github.com/PurpleI2P/i2pd/releases/download/${I2PD_VERSION}/i2pd_${I2PD_VERSION}-1$(lsb_release -sc)1_$(dpkg --print-architecture).deb\" \\\n && apt-get update && apt-get install --no-install-recommends -y \\\n    cron \\\n    logrotate \\\n    $(dpkg --info /tmp/i2pd_*.deb | sed -nE 's/^.*Depends: (.*)/\\1/p' | sed -E 's/( \\([^)]+\\))?,//g') \\\n && dpkg -i /tmp/i2pd_*.deb \\\n && rm -f /tmp/i2pd_*.deb \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /opt/ouinet\n# Copy locally built libraries (all placed along binaries).\nCOPY --from=builder /opt/ouinet/lib*.so /usr/local/lib/\n# Update the dynamic linker cache after all non-system libraries have been copied.\n# This also creates the appropriate symbolic links to those libraries.\nRUN ldconfig\n# GNUnet support has been temporarily removed.\n#COPY --from=builder /opt/ouinet/modules/gnunet-channels/gnunet-bin/share/gnunet/ modules/gnunet-channels/gnunet-bin/share/gnunet/\n#COPY --from=builder /opt/ouinet/modules/gnunet-channels/gnunet-bin/lib/ modules/gnunet-channels/gnunet-bin/lib/\nCOPY --from=builder /opt/ouinet/injector /opt/ouinet/client ./\nCOPY --from=builder /opt/ouinet/src/ouiservice/obfs4proxy/obfs4proxy ./\nCOPY --from=builder /opt/ouinet/repo-templates/ repo-templates/\nRUN mkdir utils\nCOPY --from=builder \\\n /opt/ouinet/test/bt-* /opt/ouinet/test/oui-* \\\n /usr/local/src/ouinet/scripts/ping-swarm \\\n utils/\n# This ensures that we use the desired Docker-specific files.\nRUN echo \"$OUINET_DOCKER_VERSION\"\nCOPY --from=builder /usr/local/src/ouinet/scripts/ouinet-wrapper.sh ouinet\nCOPY --from=builder /opt/ouinet/licenses/ licenses/\n# This last step pulls in latest updates to Debian packages\n# (only if something changed above)\n# since the base image may not have been upgraded in a long while.\nRUN apt-get update && apt-get upgrade -y \\\n && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"/opt/ouinet/ouinet\"]\n"
}