{
  "startTime": 1674251743533,
  "endTime": 1674251744197,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 48,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 48,
        "columnEnd": 91
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# (unless we decide to use Bitnami instead)\nARG base_image=ruby:2.7.6-slim-buster\n\nFROM $base_image AS builder\n\n# TODO: have a separate build image which already contains the build-only deps.\nRUN apt-get update -qy && apt-get upgrade -y && apt-get install --no-install-recommends -y build-essential curl git && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -sL https://deb.nodesource.com/setup_lts.x | bash -\nRUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\n\nRUN apt-get update && apt-get install --no-install-recommends -y nodejs yarn && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# TODO: Can ASSETS_PREFIX default to `/assets/publisher` within Publisher?\nENV RAILS_ENV=production GOVUK_APP_NAME=publisher ASSETS_PREFIX=/assets/publisher\nRUN mkdir /app\n\nWORKDIR /app\nCOPY Gemfile Gemfile.lock .ruby-version package.json yarn.lock /app/\n\nRUN bundle config set deployment 'true'\nRUN bundle config set without 'development test'\nRUN bundle install -j8 --retry=2\nRUN yarn install --production --frozen-lockfile && yarn cache clean;\nCOPY . /app\n\n# TODO: We probably don't want assets in the image; remove this once we have a proper deployment process which uploads to (e.g.) S3.\nRUN GOVUK_APP_DOMAIN=www.gov.uk GOVUK_WEBSITE_ROOT=www.gov.uk bundle exec rails assets:precompile\n\nFROM $base_image\n\n# TODO: MONGODB_URI shouldn't be set here but seems to be required by E2E tests, figure out why.\n# TODO: Can ASSETS_PREFIX default to `/assets/publisher` within Publisher?\nENV GOVUK_PROMETHEUS_EXPORTER=true RAILS_ENV=production GOVUK_APP_NAME=publisher ASSETS_PREFIX=/assets/publisher MONGODB_URI=mongodb://mongo/govuk_content_development\n\nCOPY --from=builder /usr/bin/node* /usr/bin/\nCOPY --from=builder /usr/local/bundle/ /usr/local/bundle/\nCOPY --from=builder /app /app/\n\nWORKDIR /app\nCMD bundle exec puma\n"
}