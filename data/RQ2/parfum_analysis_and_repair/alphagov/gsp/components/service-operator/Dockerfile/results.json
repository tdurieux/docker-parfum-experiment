{
  "startTime": 1674218507264,
  "endTime": 1674218510196,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build options\n\n# setup go build env\nFROM golang:1.13.10 as builder\nWORKDIR /workspace\n\n# install kubebuilder and bundled control-plane for tests\nENV KUBEBUILDER_VERSION=2.0.0\nRUN wget -nv https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${KUBEBUILDER_VERSION}/kubebuilder_${KUBEBUILDER_VERSION}_linux_amd64.tar.gz \\\n\t&& tar xvf kubebuilder_${KUBEBUILDER_VERSION}_linux_amd64.tar.gz \\\n\t&& mv kubebuilder_${KUBEBUILDER_VERSION}_linux_amd64 /usr/local/kubebuilder && rm kubebuilder_${KUBEBUILDER_VERSION}_linux_amd64.tar.gz\nENV PATH=$PATH:/usr/local/kubebuilder/bin\n\nCOPY go.mod go.mod\nCOPY go.sum go.sum\nCOPY Makefile Makefile\nRUN go mod download \\\n\t&& make controller-gen \\\n\t&& go install github.com/onsi/ginkgo/ginkgo\n\n# Copy the go source\nCOPY . .\n\n# Build and test environment\nENV CGO_ENABLED=\"0\"\nENV GOOS=\"linux\"\nENV GOARCH=\"amd64\"\nENV GO111MODULE=\"on\"\n\n# Build args for integration testing\nARG AWS_INTEGRATION=\"false\"\nENV AWS_INTEGRATION=\"${AWS_INTEGRATION}\"\nARG AWS_ACCESS_KEY_ID=\"\"\nENV AWS_ACCESS_KEY_ID=\"${AWS_ACCESS_KEY_ID}\"\nARG AWS_SECRET_ACCESS_KEY=\"\"\nENV AWS_SECRET_ACCESS_KEY=\"${AWS_SECRET_ACCESS_KEY}\"\nARG AWS_SESSION_TOKEN=\"\"\nENV AWS_SESSION_TOKEN=\"${AWS_SESSION_TOKEN}\"\nARG AWS_RDS_SECURITY_GROUP_ID\nENV AWS_RDS_SECURITY_GROUP_ID=\"${AWS_RDS_SECURITY_GROUP_ID}\"\nARG AWS_RDS_SUBNET_GROUP_NAME\nENV AWS_RDS_SUBNET_GROUP_NAME=\"${AWS_RDS_SUBNET_GROUP_NAME}\"\nARG AWS_REDIS_SECURITY_GROUP_ID\nENV AWS_REDIS_SECURITY_GROUP_ID=\"${AWS_REDIS_SECURITY_GROUP_ID}\"\nARG AWS_REDIS_SUBNET_GROUP_NAME\nENV AWS_REDIS_SUBNET_GROUP_NAME=\"${AWS_REDIS_SUBNET_GROUP_NAME}\"\nARG AWS_PRINCIPAL_PERMISSIONS_BOUNDARY_ARN\nENV AWS_PRINCIPAL_PERMISSIONS_BOUNDARY_ARN=\"${AWS_PRINCIPAL_PERMISSIONS_BOUNDARY_ARN}\"\nARG AWS_ROLE_ARN=\"\"\nENV AWS_ROLE_ARN=\"${AWS_ROLE_ARN}\"\nARG AWS_OIDC_PROVIDER_URL\nENV AWS_OIDC_PROVIDER_URL=\"${AWS_OIDC_PROVIDER_URL}\"\nARG AWS_OIDC_PROVIDER_ARN\nENV AWS_OIDC_PROVIDER_ARN=\"${AWS_OIDC_PROVIDER_ARN}\"\n\n# run tests\nRUN make test\n\n# build binary\nRUN go build -a -o manager main.go\n\n# Use distroless as minimal base image to package the manager binary\n# Refer to https://github.com/GoogleContainerTools/distroless for more details\nFROM gcr.io/distroless/static:latest\nWORKDIR /\nCOPY --from=builder /workspace/manager .\nENTRYPOINT [\"/manager\"]\n"
}