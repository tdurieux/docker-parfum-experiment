{
  "startTime": 1674254694603,
  "endTime": 1674254696146,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 6,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 6,
        "columnEnd": 55
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 6,
        "columnEnd": 55
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 6,
        "columnEnd": 154
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 6,
        "columnEnd": 84
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 15,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 15,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 15,
        "columnEnd": 56
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 15,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 15,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 29,
        "columnStart": 6,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 29,
        "columnStart": 6,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\nARG LLVM=13\nARG NTHREAD=10\n\nRUN apt-get update && apt-get install --no-install-recommends -y lsb-release wget software-properties-common && \\\n      wget -O /tmp/llvm.sh https://apt.llvm.org/llvm.sh && chmod +x /tmp/llvm.sh && /tmp/llvm.sh ${LLVM} && \\\n      DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n      clang-${LLVM} \\\n      cmake \\\n      g++ \\\n      gfortran \\\n      git \\\n      vim \\\n      lldb-${LLVM} \\\n      hdf5-tools \\\n      libblas-dev \\\n      libboost-dev \\\n      libclang-${LLVM}-dev \\\n      libfftw3-dev \\\n      libgfortran5 \\\n      libgmp-dev \\\n      libssl-dev \\\n      python-dev \\\n      python3-dev \\\n      python3-clang-${LLVM} \\\n      python3-mako \\\n      python3-matplotlib \\\n      python3-numpy \\\n      python3-pip \\\n      python3-scipy && rm -rf /var/lib/apt/lists/*;\n\nENV PYTHON_VERSION=3.8 \\\n    CC=clang-${LLVM} CXX=clang++-${LLVM} LLVM_VERSION=${LLVM}.0.0\nRUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM} 60 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM} --slave /usr/bin/clang-cpp clang-cpp /usr/bin/clang-cpp-${LLVM}\n\n# Build libcxx and libcxxabi with MSAN\nRUN git clone https://github.com/llvm/llvm-project --branch llvmorg-${LLVM_VERSION} --depth 1 -c advice.detachedHead=false /tmp/llvm_src && \\\n      mkdir /tmp/build && cd /tmp/build && \\\n      cmake /tmp/llvm_src/libcxxabi -DLLVM_CONFIG_PATH=/usr/bin/llvm-config-${LLVM} -DCMAKE_INSTALL_PREFIX=/usr/lib/llvm-${LLVM} -DLIBCXXABI_LIBCXX_PATH=/tmp/llvm_src/libcxx -DLLVM_USE_SANITIZER=MemoryWithOrigins && make -j${NTHREAD} && make install && \\\n      rm -rf * && \\\n      cmake /tmp/llvm_src/libcxx -DLLVM_CONFIG_PATH=/usr/bin/llvm-config-${LLVM} -DCMAKE_INSTALL_PREFIX=/usr/lib/llvm-${LLVM} -DLIBCXX_CXX_ABI=libcxxabi -DLIBCXX_CXX_ABI_INCLUDE_PATHS=/tmp/llvm_src/libcxxabi/include -DLLVM_USE_SANITIZER=MemoryWithOrigins && make -j${NTHREAD} install && \\\n      rm -rf /tmp/llvm_src /tmp/build\n\n# Build Environment using MSAN\nENV CXXFLAGS=\"-stdlib=libc++ -fsanitize=memory -fno-omit-frame-pointer -fsanitize-recover=all -fsanitize-memory-track-origins -ggdb3\" \\\n    CFLAGS=\"-fsanitize=memory -fno-omit-frame-pointer -fsanitize-recover=all -fsanitize-memory-track-origins -ggdb3\" \\\n    LD_LIBRARY_PATH=/usr/lib/llvm-${LLVM}/lib \\\n    LDFLAGS=\"-fsanitize=memory\" \\\n    MSAN_OPTIONS=MSAN_OPTIONS=symbolize=1:halt_on_error=1 \\\n    MSAN_SYMBOLIZER_PATH=/usr/lib/llvm-${LLVM}/bin/llvm-symbolizer\n\n# Static zlib using fPIC to be linked into hdf5\nADD https://cfhcable.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz /tmp/\nRUN cd /tmp && tar xf /tmp/zlib-1.2.11.tar.gz && cd zlib-1.2.11 && \\\n      CFLAGS=\"-fPIC $CFLAGS\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/zlib && make -j${NTHREAD} && make install && \\\n      cd /tmp && rm -rf /tmp/zlib* && rm /tmp/zlib-1.2.11.tar.gz\n\n# HDF5\nADD https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.0/src/CMake-hdf5-1.12.0.tar.gz /tmp/\nRUN cd /tmp && tar xf /tmp/CMake-hdf5-1.12.0.tar.gz && chmod 1777 . && \\\n      mkdir build && cd build && \\\n      cmake /tmp/CMake-hdf5-1.12.0/hdf5-1.12.0 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/hdf5 \\\n                                               -DHDF5_ENABLE_Z_LIB_SUPPORT=ON -DZLIB_LIBRARY=/opt/zlib/lib/libz.a -DZLIB_INCLUDE_DIR:PATH=/opt/zlib/include && \\\n      make -j${NTHREAD} && make install && \\\n      cd /tmp && rm -rf /tmp/CMake-hdf5-1.12.0* /tmp/build && rm /tmp/CMake-hdf5-1.12.0.tar.gz\nENV HDF5_ROOT=/opt/hdf5\n\n# libevent\nADD https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz /tmp/\nRUN cd /tmp && tar xf /tmp/libevent-2.1.12-stable.tar.gz && cd libevent-2.1.12-stable && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/openmpi --enable-shared && make -j${NTHREAD} && make install && \\\n      cd /tmp && rm -rf /tmp/libevent* && rm /tmp/libevent-2.1.12-stable.tar.gz\n\n# hwloc\nADD https://download.open-mpi.org/release/hwloc/v2.2/hwloc-2.2.0.tar.bz2 /tmp/\nCOPY packaging/hwloc.patch /tmp/\nRUN cd /tmp && tar xf /tmp/hwloc-2.2.0.tar.bz2 && patch -p0 -i hwloc.patch && cd hwloc-2.2.0 && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/openmpi --enable-shared && make -j${NTHREAD} && make install && \\\n      cd /tmp && rm -rf /tmp/hwloc* && rm /tmp/hwloc-2.2.0.tar.bz2\n\n# OpenMPI\nADD https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.1.tar.bz2 /tmp/\nRUN cd /tmp && tar xf /tmp/openmpi-4.1.1.tar.bz2 && cd openmpi-4.1.1 && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/openmpi --enable-shared --disable-mpi-fortran --disable-pty-support --with-hwloc=/opt/openmpi --with-libevent=/opt/openmpi && make -j${NTHREAD} && make install && \\\n      cd /tmp && rm -rf /tmp/openmpi-4.1.1* && rm /tmp/openmpi-4.1.1.tar.bz2\nENV MPI_ROOT=/opt/openmpi \\\n    MPICC=/opt/openmpi/bin/mpicc\n\n# Use libflame to provide blas / lapack\nRUN git clone https://github.com/Wentzell/libflame /tmp/libflame && cd /tmp/libflame && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/libflame --enable-lapack2flame --enable-builtin-blas && make -j${NTHREAD} && make install && \\\n      cd /tmp && rm -rf /tmp/libflame\n\n# Dockerfile.build with sanitization enabled\nCOPY requirements.txt /src/triqs/requirements.txt\n# Install numpy first to prevent h5py from pulling in a newer version first\nRUN pip3 install --no-cache-dir `grep numpy /src/triqs/requirements.txt` && \\\n    pip3 install --no-cache-dir -r /src/triqs/requirements.txt\n\nRUN useradd -m build\n\nENV SRC=/src \\\n    BUILD=/home/build \\\n    INSTALL=/usr/local \\\n    PYTHONPATH=/usr/local/lib/python3.8/site-packages \\\n    CMAKE_PREFIX_PATH=/usr/lib/cmake/triqs\n\nCOPY . ${SRC}/triqs\nWORKDIR ${BUILD}/triqs\nRUN chown -R build . ${SRC}/triqs\nUSER build\nRUN cmake $SRC/triqs -DCMAKE_INSTALL_PREFIX=$INSTALL -DBuild_Deps=Always -DCLANG_OPT=\"$CXXFLAGS\" -DMSAN=ON \\\n    -DLAPACK_LIBRARIES=/opt/libflame/lib/libflame.a -DBLAS_LIBRARIES=/opt/libflame/lib/libflame.a && \\\n    make -j${NTHREAD}\nRUN cd test/c++ && make test CTEST_OUTPUT_ON_FAILURE=1 || true\n"
}