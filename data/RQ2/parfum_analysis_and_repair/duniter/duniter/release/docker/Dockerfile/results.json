{
  "startTime": 1674249323930,
  "endTime": 1674249324542,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 1,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 1,
        "columnEnd": 39
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ------------------------------------------------------------------------------\n# Build Stage\n# ------------------------------------------------------------------------------\n\nFROM node:10-alpine as build\n\nLABEL maintainer=\"elois <elois@duniter.org>\"\nLABEL version=\"0.1.0\"\nLABEL description=\"Duniter server (Crypto-currency software to manage libre currency such as Äž1)\"\n\nARG DUNITER_UI_VER=\"1.7.x\"\nARG INSTALL_DEX=\"no\"\n\nRUN apk update && \\\n\tapk add --no-cache ca-certificates curl && \\\n\tupdate-ca-certificates && \\\n\tapk add --no-cache --update cmake g++ python make\n\nWORKDIR /duniter\n\n# copy source tree\nCOPY ./ ./\n\n# install latest stable rust\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y\n\n# build duniter\nRUN PATH=${HOME}/.cargo/bin:${PATH} \\\n\tRUSTFLAGS=\"-C target-feature=-crt-static -L/usr/lib\" \\\n\tmake -C release ADD_DEBUG=N INSTALL_DEX=${INSTALL_DEX} server-gui clean \\\n\t&& rm -rf work/extra\n\n# ------------------------------------------------------------------------------\n# Final Stage\n# ------------------------------------------------------------------------------\n\nFROM node:10-alpine\n\nARG INSTALL_DEX=\"no\"\n\n# install jq\nRUN apk add --no-cache jq\n\n# create group and user duniter\nRUN addgroup -S -g 1111 duniter && \\\n\tadduser -SD -h /duniter -G duniter -u 1111 duniter\nRUN mkdir -p /var/lib/duniter /etc/duniter && chown duniter:duniter /var/lib/duniter /etc/duniter\n\n# copy the build artifact from the build stage\nCOPY --from=build --chown=duniter:duniter /duniter/work /duniter\n\n# copy wrappers\nCOPY release/docker/duniter.sh /usr/bin/duniter\nCOPY release/docker/dex.sh /usr/bin/dex\nRUN [ \"$INSTALL_DEX\" = yes ] || rm /usr/bin/dex\n\n# copy entrypoint\nCOPY release/docker/docker-entrypoint.sh /\n\n# create volumes\nVOLUME /var/lib/duniter\nVOLUME /etc/duniter\n\n# expose ports\nEXPOSE 9220 10901 20901 30901\n\n# use duniter user\nUSER duniter\nWORKDIR /var/lib/duniter\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD []\n"
}