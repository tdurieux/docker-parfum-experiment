{
  "startTime": 1674250424149,
  "endTime": 1674250425704,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 32,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 20,
        "columnEnd": 77
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nENV CC=x86_64-w64-mingw32-gcc-posix\nENV CXX=x86_64-w64-mingw32-g++-posix\nENV AR=x86_64-w64-mingw32-ar\n\nRUN apt update && apt dist-upgrade -y && \\\n    apt install --no-install-recommends -y make git cmake g++-mingw-w64-x86-64 \\\n    binutils-mingw-w64-x86-64 wget bison flex libtool automake && rm -rf /var/lib/apt/lists/*;\n\nRUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \\\n    && tar -xzvf 1.8.4.tar.gz && rm 1.8.4.tar.gz\nWORKDIR jsoncpp-1.8.4\nRUN cmake . -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC \\\n    -DCMAKE_CXX_COMPILER=$CXX -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES \\\n    -DBUILD_SHARED_LIBS=NO -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/usr/local/mingw\nRUN make && make install\n\nWORKDIR ../\n\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz && \\\n    tar -xvzf openssl-1.1.0h.tar.gz && rm openssl-1.1.0h.tar.gz\nWORKDIR openssl-1.1.0h\nRUN ./Configure mingw64 --prefix=/usr/local/mingw no-shared\nRUN make && make install\n\nWORKDIR ../\n\nRUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz && \\\n    tar xzvf curl-7.59.0.tar.gz && rm curl-7.59.0.tar.gz\nWORKDIR curl-7.59.0\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw \\\n    --disable-shared --enable-static --disable-ldap\nRUN make && make install\n\nWORKDIR ../\n\nRUN wget https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz && \\\n    tar -xvzf libmicrohttpd-0.9.59.tar.gz && rm libmicrohttpd-0.9.59.tar.gz\nWORKDIR libmicrohttpd-0.9.59\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw \\\n    --disable-shared\nRUN make && make install\n\nWORKDIR ../\n\nRUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz && \\\n    tar -xvzf v1.1.0.tar.gz && rm v1.1.0.tar.gz\nWORKDIR libjson-rpc-cpp-1.1.0\nRUN cmake -E env CXXFLAGS=\"-DCURL_STATICLIB\" cmake . -DBUILD_SHARED_LIBS=NO \\\n    -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO \\\n    -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_SYSTEM_NAME=Windows \\\n    -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/usr/local/mingw -DREDIS_CLIENT=NO -DREDIS_SERVER=NO \\\n    -DWITH_COVERAGE=NO\nRUN mkdir -p win32-deps/include && make && make install\n\nWORKDIR ../\n\nRUN git clone https://github.com/rweather/noise-c\nWORKDIR noise-c\nADD noise-c-windows.patch .\nRUN git apply noise-c-windows.patch\nRUN ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=x86_64-linux --prefix=/usr/local/mingw\nRUN make && make install\n\nWORKDIR ../\n\nRUN git clone https://github.com/bitcoin-core/leveldb\nWORKDIR leveldb\n\nADD 0001-Fixes-for-windows-cross-compile.patch .\nRUN patch < 0001-Fixes-for-windows-cross-compile.patch\nRUN TARGET_OS=OS_WINDOWS_CROSSCOMPILE make\nRUN cp -r out-static/*.a /usr/local/mingw/lib && \\\n    cp -r include/* /usr/local/mingw/include\n\nWORKDIR ../\n\nRUN git clone https://github.com/SFML/SFML.git\nWORKDIR SFML\nRUN cmake . -DBUILD_SHARED_LIBS=NO -DSFML_BUILD_DOC=NO -DSFML_BUILD_AUDIO=NO \\\n    -DSFML_BUILD_GRAPHICS=NO -DSFML_BUILD_WINDOW=NO -DSFML_BUILD_EXAMPLES=NO \\\n    -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC \\\n    -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/usr/local/mingw\nRUN make && make install\nRUN cp /usr/local/mingw/lib/libsfml-network-s.a /usr/local/mingw/lib/libsfml-network.a && cp /usr/local/mingw/lib/libsfml-system-s.a /usr/local/mingw/lib/libsfml-system.a\n\nWORKDIR ../\n\nRUN git clone https://github.com/lhorgan/luack\nWORKDIR luack\nRUN git checkout 43e9e17984e4e992ac2dd0510ac15ebd22f38fdc\nRUN make mingw CC=$CC && \\\n    cp src/lua53.dll /usr/local/mingw/lib/liblua.dll && \\\n    cp src/*.h /usr/local/mingw/include/\n\nWORKDIR ../\n\nRUN git clone https://github.com/metalicjames/selene.git\nRUN cp -r selene/include/* /usr/local/mingw/include\n\nRUN git clone https://github.com/metalicjames/lua-lz4.git\nWORKDIR lua-lz4\nRUN CC=x86_64-w64-mingw32-gcc make UNAME=x86_64-w64-mingw32\n\nWORKDIR ../\n\nRUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz && \\\n    tar zxvf premake-5.0.0-alpha12-linux.tar.gz && \\\n    cp premake5 /usr/bin && rm premake-5.0.0-alpha12-linux.tar.gz\n\nCOPY ./cryptokernel /cryptokernel\n\nRUN cp lua-lz4/lz4.dll cryptokernel\nRUN cp /usr/local/mingw/lib/liblua.dll cryptokernel/lua53.dll\n\nRUN git clone https://github.com/metalicjames/cschnorr.git\nWORKDIR cschnorr\nRUN premake5 gmake2 --os=windows --include-dir=/usr/local/mingw/include && make config=release_static cschnorr && \\\n    mkdir /usr/local/mingw/include/cschnorr/ && \\\n    cp src/*.h /usr/local/mingw/include/cschnorr/ && \\\n    cp bin/Static/Release/cschnorr.lib /usr/local/mingw/lib\nWORKDIR ../\n\nWORKDIR cryptokernel\nRUN premake5 gmake2 --os=windows --include-dir=/usr/local/mingw/include --lib-dir=/usr/local/mingw/lib\nRUN make config=release_static ckd\n"
}