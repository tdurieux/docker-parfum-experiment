diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mit-dci/cryptokernel/build/win64/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mit-dci/cryptokernel/build/win64/Dockerfile/repaired.Dockerfile
index a4f91c2..58a4f73 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mit-dci/cryptokernel/build/win64/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mit-dci/cryptokernel/build/win64/Dockerfile/repaired.Dockerfile
@@ -5,11 +5,11 @@ ENV CXX=x86_64-w64-mingw32-g++-posix
 ENV AR=x86_64-w64-mingw32-ar
 
 RUN apt update && apt dist-upgrade -y && \
-    apt install -y make git cmake g++-mingw-w64-x86-64 \
-    binutils-mingw-w64-x86-64 wget bison flex libtool automake
+    apt install --no-install-recommends -y make git cmake g++-mingw-w64-x86-64 \
+    binutils-mingw-w64-x86-64 wget bison flex libtool automake && rm -rf /var/lib/apt/lists/*;
 
 RUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \
-    && tar -xzvf 1.8.4.tar.gz
+    && tar -xzvf 1.8.4.tar.gz && rm 1.8.4.tar.gz
 WORKDIR jsoncpp-1.8.4
 RUN cmake . -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC \
     -DCMAKE_CXX_COMPILER=$CXX -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES \
@@ -20,7 +20,7 @@ RUN make && make install
 WORKDIR ../
 
 RUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz && \
-    tar -xvzf openssl-1.1.0h.tar.gz
+    tar -xvzf openssl-1.1.0h.tar.gz && rm openssl-1.1.0h.tar.gz
 WORKDIR openssl-1.1.0h
 RUN ./Configure mingw64 --prefix=/usr/local/mingw no-shared
 RUN make && make install
@@ -28,26 +28,26 @@ RUN make && make install
 WORKDIR ../
 
 RUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz && \
-    tar xzvf curl-7.59.0.tar.gz
+    tar xzvf curl-7.59.0.tar.gz && rm curl-7.59.0.tar.gz
 WORKDIR curl-7.59.0
-RUN ./configure --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw \
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw \
     --disable-shared --enable-static --disable-ldap
 RUN make && make install
 
 WORKDIR ../
 
-RUN wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz && \
-    tar -xvzf libmicrohttpd-0.9.59.tar.gz
+RUN wget https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz && \
+    tar -xvzf libmicrohttpd-0.9.59.tar.gz && rm libmicrohttpd-0.9.59.tar.gz
 WORKDIR libmicrohttpd-0.9.59
-RUN ./configure --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw \
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw \
     --disable-shared
 RUN make && make install
 
 WORKDIR ../
 
 RUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz && \
-    tar -xvzf v1.1.0.tar.gz
-WORKDIR libjson-rpc-cpp-1.1.0 
+    tar -xvzf v1.1.0.tar.gz && rm v1.1.0.tar.gz
+WORKDIR libjson-rpc-cpp-1.1.0
 RUN cmake -E env CXXFLAGS="-DCURL_STATICLIB" cmake . -DBUILD_SHARED_LIBS=NO \
     -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO \
     -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_SYSTEM_NAME=Windows \
@@ -62,7 +62,7 @@ RUN git clone https://github.com/rweather/noise-c
 WORKDIR noise-c
 ADD noise-c-windows.patch .
 RUN git apply noise-c-windows.patch
-RUN ./autogen.sh && ./configure --host=x86_64-linux --prefix=/usr/local/mingw
+RUN ./autogen.sh && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --host=x86_64-linux --prefix=/usr/local/mingw
 RUN make && make install
 
 WORKDIR ../
@@ -104,13 +104,13 @@ RUN cp -r selene/include/* /usr/local/mingw/include
 
 RUN git clone https://github.com/metalicjames/lua-lz4.git
 WORKDIR lua-lz4
-RUN CC=x86_64-w64-mingw32-gcc make UNAME=x86_64-w64-mingw32 
+RUN CC=x86_64-w64-mingw32-gcc make UNAME=x86_64-w64-mingw32
 
 WORKDIR ../
 
 RUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz && \
     tar zxvf premake-5.0.0-alpha12-linux.tar.gz && \
-    cp premake5 /usr/bin
+    cp premake5 /usr/bin && rm premake-5.0.0-alpha12-linux.tar.gz
 
 COPY ./cryptokernel /cryptokernel