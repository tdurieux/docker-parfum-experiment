{
  "startTime": 1674217446956,
  "endTime": 1674217447933,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7.6-slim-buster as base\n\nENV PYTHONUNBUFFERED 1\n\n# required to install packages from github\nRUN apt-get -y update && apt-get -y --no-install-recommends install git && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir --upgrade pip\n\nWORKDIR /app\n\nRUN pip download torch==1.8.1\nCOPY requirements1.txt ./\nRUN pip install --no-cache-dir -r requirements1.txt\n\nCOPY uninstall_requirements.txt ./\nRUN pip uninstall -y -r uninstall_requirements.txt\n\nCOPY requirements2.txt ./\nRUN pip install --no-cache-dir -r requirements2.txt\n\n# Testing stage. We first pre-download any models separately for caching (pre_test_setup_for_docker_caching.py) and then\n# run the tests\nFROM base as test\n\nCOPY ./tests/pre_test_setup_for_docker_caching.py ./tests/pre_test_setup_for_docker_caching.py\nRUN python ./tests/pre_test_setup_for_docker_caching.py\nCOPY . ./\nRUN pip install --no-cache-dir pytest pytest-cov pytest-asyncio\nRUN mkdir test-reports\nRUN PYTHONPATH=./ pytest \\\n    --junitxml=test-reports/junit.xml \\\n    --cov \\\n    --cov-report=xml:test-reports/coverage.xml \\\n    --cov-report=html:test-reports/coverage.html; \\\n    echo $? > test-reports/pytest.existcode\n\n# Deployment stage\nFROM base as build\n\nCOPY main.py main.py\nCOPY ./square_model_inference square_model_inference\nCOPY logging.conf logging.conf\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--log-config\", \"logging.conf\"]\n"
}