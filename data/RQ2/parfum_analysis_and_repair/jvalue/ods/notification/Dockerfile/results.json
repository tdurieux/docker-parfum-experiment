{
  "startTime": 1674214952308,
  "endTime": 1674214953148,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 5,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# First stage: base image for further building and testing\nFROM node:16-alpine as base\n\n# install dependencies for pact (https://docs.pact.io/docker/)\nRUN apk add --no-cache --virtual build-dependencies build-base\nRUN apk --no-cache add ca-certificates wget bash \\\n  && wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\\n  && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.29-r0/glibc-2.29-r0.apk \\\n  && apk add --no-cache glibc-2.29-r0.apk\n\nWORKDIR /build\n\n# Copy package*.json files first in order to make best use of docker layer caching\nCOPY ./package*.json ./\n\n# npm clean slate install to get reproducible builds and quicker installs\nRUN npm ci\n\n# copy rest of the files\nCOPY ./tsconfig.json ./\nCOPY ./*.js ./\nCOPY ./src ./src\n\n# Second stage: image to build and test node application\nFROM base as build\n\n# lint project\nRUN npm run lint-ci\n\n# build\nRUN npm run transpile\n\n# run unit test\nRUN npm run test\n\n# Third stage: image to run node application\nFROM node:16-alpine\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=build /build/dist/ ./dist/\nCOPY --from=build /build/package*.json ./\n\nRUN npm ci --only=production\nEXPOSE 8080\n\nCMD [ \"npm\", \"run\", \"start:transpiled\" ]\n"
}