{
  "startTime": 1674255888981,
  "endTime": 1674255889659,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# BUILD STAGE ---------------------------------------\n# split this stage to save time and reduce image size\n# ---------------------------------------------------\n# NOTE: at the moment we use alpine3.11 instead of alpine latest\n# due to https://github.com/gliderlabs/docker-alpine/issues/539\n# which broke alpine dns lookup methods starting at alpine 3.12.\nFROM python:3.8-alpine3.11 as BuildStage\n# update apk cache\nRUN apk update\n# TODO: remove this when upgrading to a new alpine version\n# more details: https://github.com/pyca/cryptography/issues/5771\nENV CRYPTOGRAPHY_DONT_BUILD_RUST=1\n# install linux libraries necessary to compile some python packages\nRUN apk add --update --no-cache --virtual .build-deps gcc git build-base alpine-sdk python3-dev musl-dev postgresql-dev libffi-dev libressl-dev\n# from now on, work in the /app directory\nWORKDIR /app/\n# Layer dependency install (for caching)\nCOPY requirements.txt requirements.txt\n# install python deps\nRUN pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir --user -r requirements.txt\n\n\n# COMMON IMAGE --------------------------------------\n# ---------------------------------------------------\n# NOTE: at the moment we use alpine3.11 instead of alpine latest\n# due to https://github.com/gliderlabs/docker-alpine/issues/539\n# which broke alpine dns lookup methods starting at alpine 3.12.\nFROM python:3.8-alpine3.11 as common\n# copy libraries from build stage\nCOPY --from=BuildStage /root/.local /root/.local\n# needed for rookout\nRUN apk add --no-cache g++ python3-dev linux-headers\n# copy wait-for script\nCOPY scripts/wait-for.sh /usr/wait-for.sh\nRUN chmod +x /usr/wait-for.sh\n# copy startup script\nCOPY ./scripts/start.sh /start.sh\nRUN chmod +x /start.sh\n# copy gunicorn_config\nCOPY ./scripts/gunicorn_conf.py /gunicorn_conf.py\n# copy app code\nCOPY . ./\n# install sidecar package\nRUN python setup/setup_common.py install\n# Make sure scripts in .local are usable:\nENV PATH=/:/root/.local/bin:$PATH\n# run gunicorn\nCMD [\"/start.sh\"]\n\n\n# STANDALONE IMAGE ----------------------------------\n# ---------------------------------------------------\nFROM common as client-standalone\n# install sidecar client package\nRUN python setup/setup_client.py install\n# uvicorn config ------------------------------------\n\n# WARNING: do not change the number of workers on the opal client!\n# only one worker is currently supported for the client.\n\n# number of uvicorn workers\nENV UVICORN_NUM_WORKERS=1\n# uvicorn asgi app\nENV UVICORN_ASGI_APP=opal_client.main:app\n# uvicorn port\nENV UVICORN_PORT=7000\n# disable inline OPA\nENV OPAL_INLINE_OPA_ENABLED=false\n\n# expose opal client port\nEXPOSE 7000\n\n\n# CLIENT IMAGE --------------------------------------\n# Using standalone image as base --------------------\n# ---------------------------------------------------\nFROM client-standalone as client\n# curl is needed for next section\nRUN apk add --update --no-cache curl\n# copy opa from official image (main binary and lib for web assembly)\nRUN curl -f -L -o /opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static && chmod 755 /opa\n# enable inline OPA\nENV OPAL_INLINE_OPA_ENABLED=true\n# expose opa port\nEXPOSE 8181\n\n\n# SERVER IMAGE --------------------------------------\n# ---------------------------------------------------\nFROM common as server\n# git is needed by opal server (for policy repo tracking)\nRUN apk add --update --no-cache git openssh\n\n# Potentially trust POLICY REPO HOST ssh signature --\n# opal trackes a remote (git) repository and fetches policy (e.g rego) from it.\n# however, if the policy repo uses an ssh url scheme, authentication to said repo\n# is done via ssh, and without adding the repo remote host (i.e: github.com) to\n# the ssh known hosts file, ssh will issue output an interactive prompt that\n# looks something like this:\n#   The authenticity of host 'github.com (192.30.252.131)' can't be established.\n#   RSA key fingerprint is 16:27:ac:a5:76:28:1d:52:13:1a:21:2d:bz:1d:66:a8.\n#   Are you sure you want to continue connecting (yes/no)?\n# if the docker build arg `TRUST_POLICY_REPO_HOST_SSH_FINGERPRINT` is set to `true`\n# (default), the host specified by `POLICY_REPO_HOST` build arg (i.e: `github.com`)\n# will be added to the known ssh hosts file at build time and prevent said prompt\n# from showing.\nARG TRUST_POLICY_REPO_HOST_SSH_FINGERPRINT=\"true\"\nARG POLICY_REPO_HOST=\"github.com\"\n\nRUN if [[ \"$TRUST_POLICY_REPO_HOST_SSH_FINGERPRINT\" == \"true\" ]] ; then \\\n    mkdir -p /root/.ssh && \\\n    chmod 0700 /root/.ssh && \\\n    ssh-keyscan -t rsa ${POLICY_REPO_HOST} >> /root/.ssh/known_hosts ; fi\n\n# install sidecar server package\nRUN python setup/setup_server.py install\n\n# uvicorn config ------------------------------------\n\n# number of uvicorn workers\nENV UVICORN_NUM_WORKERS=1\n# uvicorn asgi app\nENV UVICORN_ASGI_APP=opal_server.main:app\n# uvicorn port\nENV UVICORN_PORT=7002\n\n# opal configuration --------------------------------\n# if you are not setting OPAL_DATA_CONFIG_SOURCES for some reason,\n# override this env var with the actual public address of the server\n# container (i.e: if you are running in docker compose and the server\n# host is `opalserver`, the value will be: http://opalserver:7002/policy-data)\n# `host.docker.internal` value will work better than `localhost` if you are\n# running dockerized opal server and client on the same machine\nENV OPAL_ALL_DATA_URL=http://host.docker.internal:7002/policy-data\n\n# expose opal server port\nEXPOSE 7002\n"
}