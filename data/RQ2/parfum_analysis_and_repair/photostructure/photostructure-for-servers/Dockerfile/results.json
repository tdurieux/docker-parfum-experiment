{
  "startTime": 1674249139238,
  "endTime": 1674249139728,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To get the latest libraw-tools and a recent sqlite we need alpine 3.13:\nFROM node:16-alpine3.13 as builder\n\n# https://docs.docker.com/develop/develop-images/multistage-build/\n\n# Build requirements for native node libraries:\n# libraw needs libtool, pkgconf, libjpeg-turbo-dev, and zlib-dev\n# sharp needs lcms2 and libjpeg\n\nRUN apk update ; apk upgrade ; apk add --no-cache \\\n  autoconf \\\n  bash \\\n  build-base \\\n  coreutils \\\n  lcms2-dev \\\n  libjpeg-turbo-dev \\\n  libtool \\\n  pkgconf \\\n  python3-dev \\\n  zlib-dev\n\n# https://docs.docker.com/engine/reference/builder/#workdir\nWORKDIR /ps/app\n\nCOPY package.json yarn.lock ./\n\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\n# Build libraw (only necessary when the version with alpine is old)\n# WORKDIR /tmp\n\n# RUN wget https://www.libraw.org/data/LibRaw-0.20.2.tar.gz && \\\n#   echo \"dc1b486c2003435733043e4e05273477326e51c3ea554c6864a4eafaff1004a6 LibRaw-0.20.2.tar.gz\" | sha256sum --check && \\\n#   tar xvzf LibRaw-0.20.2.tar.gz && \\\n#   cd LibRaw-0.20.2 && \\\n#   ./configure --enable-static --disable-openmp && \\\n#   make -j24 && \\\n#   /bin/bash ./libtool --tag=CXX --mode=link g++ -all-static -g -O2 -o bin/dcraw_emu samples/bin_dcraw_emu-dcraw_emu.o lib/libraw.la -ljpeg -lz -lm && \\\n#   /bin/bash ./libtool --tag=CXX --mode=link g++ -all-static -g -O2 -o bin/raw-identify samples/bin_raw_identify-raw-identify.o lib/libraw.la -ljpeg -lz -lm && \\\n#   ldd bin/dcraw_emu && \\\n#   strip bin/dcraw_emu && \\\n#   strip bin/raw-identify && \\\n#   mkdir -p /ps/app/bin && \\\n#   cp dcraw_emu raw-identify /ps/app/bin && \\\n#   chmod 755 /ps/app/bin/*\n\nFROM node:16-alpine3.13\n\n# Busybox's commands are a bit too bare-bones:\n# procps provides a working `ps -o lstart`\n# coreutils provides a working `df -kPl`\n# glib is for gio (for mountpoint monitoring)\n# util-linux (which should be there already) provides `renice` and `lsblk`\n# musl-locales provides `locale`\n# perl is required for exiftool.\n# libheif-tools provides \"heif-convert\"\n# libraw-tools provides \"dcraw_emu\" and \"raw-identify\"\n# shadow provides usermod\n\n# https://pkgs.alpinelinux.org/contents\n\nRUN apk update ; apk upgrade ;\\\n  apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.12/community musl-locales ;\\\n  apk add --no-cache \\\n  coreutils \\\n  ffmpeg \\\n  glib \\\n  lcms2 \\\n  libheif-tools \\\n  libjpeg-turbo-utils \\\n  libraw-tools \\\n  pciutils \\\n  perl \\\n  procps \\\n  shadow \\\n  sqlite \\\n  tini \\\n  util-linux\n\n# Sets the default path to be inside app when running `docker exec -it`\nWORKDIR /ps/app\n\nCOPY --chown=node:node . ./\nCOPY --from=builder --chown=node:node /ps/app ./\n\n# Your library is exposed by default to <http://localhost:1787>\n# This can be changed by setting the PS_HTTP_PORT environment variable.\nEXPOSE 1787\n\n# We're not installing curl, but busybox has a wget workalike:\nHEALTHCHECK CMD wget --quiet --output-document - http://localhost:1787/ping\n\n# https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact\n\n# docker-entrypoint handles dropping privileges down to the \"node\" user:\nENTRYPOINT [ \"/sbin/tini\", \"--\", \"/ps/app/docker-entrypoint.sh\" ]\n"
}