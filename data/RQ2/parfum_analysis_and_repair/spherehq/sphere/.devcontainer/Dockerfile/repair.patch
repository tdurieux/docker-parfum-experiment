diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/spherehq/sphere/.devcontainer/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/spherehq/sphere/.devcontainer/Dockerfile/repaired.Dockerfile
index 4a8fbde..9e06041 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/spherehq/sphere/.devcontainer/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/spherehq/sphere/.devcontainer/Dockerfile/repaired.Dockerfile
@@ -10,7 +10,7 @@ ENV DEBIAN_FRONTEND=noninteractive
 
 # The node image comes with a base non-root 'node' user which this Dockerfile
 # gives sudo access. However, for Linux, this user's GID/UID must match your local
-# user UID/GID to avoid permission issues with bind mounts. Update USER_UID / USER_GID 
+# user UID/GID to avoid permission issues with bind mounts. Update USER_UID / USER_GID
 # if yours is not 1000. See https://aka.ms/vscode-remote/containers/non-root-user.
 ARG USER_UID=1000
 ARG USER_GID=$USER_UID
@@ -20,38 +20,38 @@ ARG COMPOSE_VERSION=1.24.0
 RUN apt-get update \
   && apt-get -y install --no-install-recommends apt-utils dialog 2>&1 \ 
   #
-  # Verify git and needed tools are installed
-  && apt-get -y install git iproute2 procps \
+  # Verify git and needed tools are installed \
+  && apt-get -y --no-install-recommends install git iproute2 procps \
   #
   # Install python and thefuck
-  && apt-get -y install python3-dev python3-pip python3-setuptools && pip3 install thefuck \
+  && apt-get -y --no-install-recommends install python3-dev python3-pip python3-setuptools && pip3 install --no-cache-dir thefuck \
   #
   # Install ZSH
-  && apt-get -y install zsh && chsh -s $(which zsh) && sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" \
+  && apt-get -y --no-install-recommends install zsh && chsh -s $(which zsh) && sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" \
   #
   # Install Docker CE CLI
-  && apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release \
+  && apt-get install --no-install-recommends -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release \
   && curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | (OUT=$(apt-key add - 2>&1) || echo $OUT) \
   && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable" \
   && apt-get update \
-  && apt-get install -y docker-ce-cli \
+  && apt-get install --no-install-recommends -y docker-ce-cli \
   #
   # Install Docker Compose
-  && curl -sSL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
+  && curl -f -sSL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
   && chmod +x /usr/local/bin/docker-compose \
-  # Remove outdated yarn from /opt and install via package 
+  # Remove outdated yarn from /opt and install via package
   # so it can be easily updated via apt-get upgrade yarn
   && rm -rf /opt/yarn-* \
   && rm -f /usr/local/bin/yarn \
   && rm -f /usr/local/bin/yarnpkg \
-  && apt-get install -y curl apt-transport-https lsb-release \
-  && curl -sS https://dl.yarnpkg.com/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/pubkey.gpg | apt-key add - 2>/dev/null \
+  && apt-get install --no-install-recommends -y curl apt-transport-https lsb-release \
+  && curl -f -sS https://dl.yarnpkg.com/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/pubkey.gpg | apt-key add - 2>/dev/null \
   && echo "deb https://dl.yarnpkg.com/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
   && apt-get update \
   && apt-get -y install --no-install-recommends yarn \
   #
   # Install Digital Ocean CLI
-  && curl -L https://github.com/digitalocean/doctl/releases/download/v1.34.0/doctl-1.34.0-linux-amd64.tar.gz | tar xz -C /usr/local/bin \
+  && curl -f -L https://github.com/digitalocean/doctl/releases/download/v1.34.0/doctl-1.34.0-linux-amd64.tar.gz | tar xz -C /usr/local/bin \
   #
   # Install tslint and typescript globally
   && npm install -g tslint typescript \
@@ -60,14 +60,14 @@ RUN apt-get update \
   && if [ "$USER_GID" != "1000" ]; then groupmod node --gid $USER_GID; fi \
   && if [ "$USER_UID" != "1000" ]; then usermod --uid $USER_UID node; fi \
   # [Optional] Add add sudo support for non-root user
-  && apt-get install -y sudo \
+  && apt-get install --no-install-recommends -y sudo \
   && echo node ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/node \
   && chmod 0440 /etc/sudoers.d/node \
   #
   # Clean up
   && apt-get autoremove -y \
   && apt-get clean -y \
-  && rm -rf /var/lib/apt/lists/*
+  && rm -rf /var/lib/apt/lists/* && npm cache clean --force;
 
 # Switch back to dialog for any ad-hoc use of apt-get
 ENV DEBIAN_FRONTEND=