{
  "startTime": 1674255952943,
  "endTime": 1674255953612,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nLABEL maintainer=\"Alice D. <alice@starwitch.productions>\"\n\nENV LANG C.UTF-8\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update -qq && \\\n    apt-get upgrade -qqy && \\\n    apt-get install -qqy --no-install-recommends \\\n    git wget bzip2 file unzip libtool pkg-config cmake build-essential \\\n    automake yasm gettext autopoint vim-tiny python3 python3-distutils \\\n    ninja-build ca-certificates curl less zip python3-docutils python3-pip \\\n    nsis gnupg zlibc && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN pip3 install --no-cache-dir \\\n    meson==0.56.2 \\\n    ninja \\\n    zstandard \\\n    python-gnupg\n\nWORKDIR /build\n\nENV TOOLCHAIN_PREFIX=/opt/llvm-mingw\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64\"\n\nARG DEFAULT_CRT=ucrt\n\n# Build everything that uses the llvm monorepo. We need to build the mingw runtime before the compiler-rt/libunwind/libcxxabi/libcxx runtimes.\nCOPY build-llvm.sh build-lldb-mi.sh strip-llvm.sh install-wrappers.sh build-mingw-w64.sh build-mingw-w64-tools.sh build-compiler-rt.sh build-libcxx.sh build-mingw-w64-libraries.sh build-openmp.sh ./\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h ./wrappers/\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX && \\\n    ./build-lldb-mi.sh $TOOLCHAIN_PREFIX && \\\n    ./strip-llvm.sh $TOOLCHAIN_PREFIX && \\\n    ./install-wrappers.sh $TOOLCHAIN_PREFIX && \\\n    ./build-mingw-w64.sh $TOOLCHAIN_PREFIX --with-default-msvcrt=$DEFAULT_CRT && \\\n    ./build-mingw-w64-tools.sh $TOOLCHAIN_PREFIX && \\\n    ./build-compiler-rt.sh $TOOLCHAIN_PREFIX && \\\n    ./build-libcxx.sh $TOOLCHAIN_PREFIX && \\\n    ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX && \\\n    ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers && \\\n    ./build-openmp.sh $TOOLCHAIN_PREFIX && \\\n    rm -rf /build/*\n\n# Build libssp\nCOPY build-libssp.sh libssp-Makefile ./\nRUN ./build-libssp.sh $TOOLCHAIN_PREFIX && \\\n    rm -rf /build/*\n\nENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH\n"
}