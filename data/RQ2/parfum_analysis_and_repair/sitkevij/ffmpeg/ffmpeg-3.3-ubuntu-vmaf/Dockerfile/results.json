{
  "startTime": 1674250322522,
  "endTime": 1674250324285,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 2,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 2,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 2,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 2,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 2,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 2,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 2,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 2,
        "columnEnd": 70
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 2,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 2,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 2,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 2,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 2,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 2,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 2,
        "columnEnd": 157
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 134,
        "lineEnd": 151,
        "columnStart": 2,
        "columnEnd": 19
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 2,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 2,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 2,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 2,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 2,
        "columnEnd": 89
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 106
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 130
      }
    }
  ],
  "repairedDockerfile": "#\n# ffmpeg - http://ffmpeg.org\n# Read Ubuntu https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu\n# hub https://hub.docker.com/r/sitkevij/ffmpeg/\n# docker run --entrypoint \"apt-cache\" ffmpeg3 rdepends libass-dev\n#\nFROM        ubuntu:16.04\n\nCMD         [\"--help\"]\nENTRYPOINT  [\"ffmpeg\"]\nWORKDIR     /tmp/ffmpeg-workdir\n\nENV     SRC /usr/local\nENV     LD_LIBRARY_PATH ${SRC}/lib\nENV     PKG_CONFIG_PATH ${SRC}/lib/pkgconfig\nENV     BIN ${SRC}/bin\n\nENV     NASM_VERSION 2.13.01\nENV     FFMPEG_VERSION snapshot\nENV     VPX_VERSION=1.6.1\n\nENV DEBIAN_FRONTEND noninteractive\n# RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\nRUN echo ~/ && echo \"$HOME\"\n# RUN apt-get update\n\nRUN BUILD_DEP=\"autoconf \\\n    automake \\\n    cmake \\\n    curl \\\n    bzip2 \\\n    libexpat1-dev \\\n    g++ \\\n    gcc \\\n    git \\\n    gperf \\\n    libtool \\\n    make \\\n#   nasm \\\n    perl \\\n    pkg-config \\\n    python \\\n    libssl-dev \\\n    yasm \\\n    zlib1g-dev\" && \\\n  export MAKEFLAGS=\"-j$(($(nproc) + 1))\" && \\\n  apt-get -yqq update && \\\n  apt-get install -yq --no-install-recommends ${BUILD_DEP} ca-certificates expat libgomp1 && rm -rf /var/lib/apt/lists/*;\n\n# nasm\nRUN cd $SRC && \\\n  curl -f -Os https://www.nasm.us/pub/nasm/releasebuilds/2.13.01/nasm-$NASM_VERSION.tar.bz2 && \\\n  tar xjvf nasm-$NASM_VERSION.tar.bz2 && \\\n  cd nasm-$NASM_VERSION && ./autogen.sh && \\\n  PATH=\"$BIN:$PATH\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"$SRC\" --bindir=\"$BIN\" && \\\n  PATH=\"$BIN:$PATH\" make && \\\n  make install && rm nasm-$NASM_VERSION.tar.bz2\n\n# fdk-aac\nRUN DIR=$(mktemp -d) && cd ${DIR} && \\\n  curl -f -o fdk-aac.tar.gz https://codeload.github.com/mstorsjo/fdk-aac/legacy.tar.gz/master && \\\n  tar xzvf fdk-aac.tar.gz && \\\n  cd mstorsjo-fdk-aac* && \\\n  autoreconf -fiv && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"$SRC\" --disable-shared && \\\n  make && \\\n  make install && \\\n  rm -rf ${DIR} && rm fdk-aac.tar.gz\n\n# x264\nRUN DIR=$(mktemp -d) && cd ${DIR} && \\\n  curl -f -Os ftp://ftp.videolan.org/pub/x264/snapshots/last_x264.tar.bz2 && \\\n  tar xvf last_x264.tar.bz2 && \\\n  cd x264* && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"$SRC\" --bindir=\"$BIN\" --enable-static && \\\n  make && \\\n  make install && \\\n  make distclean && \\\n  rm -rf ${DIR} && rm last_x264.tar.bz2\n\n# x265 https://bitbucket.org/multicoreware/x265/downloads/x265_2.5.tar.gz\nRUN DIR=$(mktemp -d) && cd ${DIR} && \\\n  curl -f -Os -L https://bitbucket.org/multicoreware/x265/downloads/x265_2.5.tar.gz && \\\n  tar xzvf x265_2.5.tar.gz && \\\n  cd x265*/build/linux && \\\n  # ./make-Makefiles.bash\n  # cmake -G \"Unix Makefiles\" ../../source && ccmake ../../source\n  PATH=\"$BIN:$PATH\" cmake -G \"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=\"$SRC\" -DENABLE_SHARED:bool=off ../../source && \\\n  make && \\\n  make install && \\\n  rm -rf ${DIR} && rm x265_2.5.tar.gz\n\n# https://github.com/webmproject/libvpx/archive/v1.6.1.tar.gz\n# curl -sL https://codeload.github.com/webmproject/libvpx/tar.gz/v${VPX_VERSION} && \\\nRUN DIR=$(mktemp -d) && cd ${DIR} && \\\n  curl -f -Os -L https://github.com/webmproject/libvpx/archive/v1.6.1.tar.gz && \\\n  # tar -zx --strip-components=1 && \\\n  tar xzvf v1.6.1.tar.gz && \\\n  cd *1.6.1 && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"$SRC\" --enable-vp8 --enable-vp9 --enable-pic --disable-debug --disable-examples --disable-docs --disable-install-bins --enable-shared && \\\n  make && \\\n  make install && \\\n  make distclean && \\\n  rm -rf ${DIR} && rm v1.6.1.tar.gz\n\n# vmaf - docker run sitkevij/ffmpeg -i mezz -i ref -lavfi libvmaf -f null -\n#   note the need for python-tk\nRUN apt-get install --no-install-recommends -y pkg-config gfortran libhdf5-dev libfreetype6-dev liblapack-dev python-pip python-tk && \\\n  python -m pip install --upgrade pip && \\\n  pip install --no-cache-dir --user numpy scipy matplotlib pandas && \\\n  pip install --no-cache-dir --upgrade scikit-learn && \\\n  pip install --no-cache-dir --upgrade h5py && \\\n  echo 'export PATH=\"$PATH:$HOME/.local/bin\"' >>$HOME/.bashrc && \\\n  python -c 'import numpy as pkg; print pkg.__version__; print pkg.__file__' && rm -rf /var/lib/apt/lists/*;\n\nRUN DIR=$(mktemp -d) && cd ${DIR} && \\\n  git clone https://github.com/Netflix/vmaf.git && \\\n  cd vmaf && \\\n  make && \\\n  make install && \\\n  export PYTHONPATH=$SRC/vmaf/python/src:$PYTHONPATH && \\\n  # execute unittest in a diff container\n  # ./unittest && \\\n  rm -rf ${DIR}\n\n# snapshot http://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2\nRUN DIR=$(mktemp -d) && cd ${DIR} && \\\n  #curl -Os http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz && \\\n  #tar xzvf ffmpeg-${FFMPEG_VERSION}.tar.gz && \\\n  curl -f -Os https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \\\n  tar xjvf ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \\\n  # cd ffmpeg-${FFMPEG_VERSION} && \\\n  cd ffmpeg* && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${SRC}\" --extra-cflags=\"-I${SRC}/include\" --pkg-config-flags=\"--static\" --extra-ldflags=\"-L${SRC}/lib\" --bindir=\"${SRC}/bin\" \\\n  --disable-debug \\\n  --disable-doc \\\n  --disable-ffplay \\\n  --enable-avresample \\\n  --enable-gpl \\\n  # --enable-libfaac \\\n  --enable-libfdk_aac \\\n  # --enable-libmp3lame \\\n  --enable-libvmaf \\\n  --enable-libvpx \\\n  --enable-libx264 \\\n  --enable-libx265 \\\n  # --enable-libxvid \\\n  --enable-nonfree \\\n  --enable-postproc \\\n  --enable-small \\\n  --enable-version3 && \\\n  make && \\\n  make install && \\\n  make distclean && \\\n  hash -r && \\\n  rm -rf ${DIR} && rm ffmpeg-${FFMPEG_VERSION}.tar.bz2\n\n# cleanup\nRUN cd && \\\n    echo \"removing ${BUILD_DEP}\" && \\\n    apt-get purge -y ${BUILD_DEP} && \\\n    apt-get autoremove -y && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists && \\\n    ldconfig && \\\n    ffmpeg -buildconf\n"
}