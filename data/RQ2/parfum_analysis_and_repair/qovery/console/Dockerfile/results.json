{
  "startTime": 1674252131327,
  "endTime": 1674252132480,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14-alpine AS builder\n\n# Add a work directory\nWORKDIR /app\n\nARG NODE_ENV\nENV NODE_ENV $NODE_ENV\n\nARG NX_QOVERY_API\nENV NX_QOVERY_API $NX_QOVERY_API\n\nARG NX_OAUTH_DOMAIN\nENV NX_OAUTH_DOMAIN $NX_OAUTH_DOMAIN\n\nARG NX_OAUTH_KEY\nENV NX_OAUTH_KEY $NX_OAUTH_KEY\n\nARG NX_OAUTH_AUDIENCE\nENV NX_OAUTH_AUDIENCE $NX_OAUTH_AUDIENCE\n\nARG NX_INTERCOM\nENV NX_INTERCOM $NX_INTERCOM\n\nARG NX_POSTHOG\nENV NX_POSTHOG $NX_POSTHOG\n\nARG NX_POSTHOG_APIHOST\nENV NX_POSTHOG_APIHOST $NX_POSTHOG_APIHOST\n\nARG NX_LOGROCKET\nENV NX_LOGROCKET $NX_LOGROCKET\n\nARG NX_GTM\nENV NX_GTM $NX_GTM\n\nARG NX_ONBOARDING\nENV NX_ONBOARDING $NX_ONBOARDING\n\n# Cache and Install dependencies\nCOPY package.json .\nCOPY yarn.lock .\nRUN yarn global add @nrwl/cli\nRUN yarn install --production && yarn cache clean;\n\n# Copy app files\nCOPY . .\n# Build the app\nRUN yarn build\n\n# Bundle static assets with nginx\nFROM nginx:latest\n# Copy built assets from builder\nCOPY --from=builder /app/dist/apps/* /usr/share/nginx/html\n# Add your nginx.conf\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n# Expose port\nEXPOSE 80\n# Start nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}