{
  "startTime": 1674248667269,
  "endTime": 1674248668418,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright (c) 2020 Marat Abrarov (abrarov@gmail.com)\n#\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n#\n\nFROM alpine:3.15.0 AS build\n\nRUN apk add --no-cache \\\n      bash \\\n      ca-certificates \\\n      curl \\\n      tar \\\n      gzip \\\n      git \\\n      g++ \\\n      make \\\n      cmake \\\n      libstdc++ \\\n      linux-headers \\\n      icu-dev \\\n      python2-dev \\\n      libzip-dev \\\n      libbz2 \\\n      dos2unix \\\n      patch\n\nADD [\"patch\", \"/opt/patch\"]\n\nARG BOOST_VERSION=\"1.78.0\"\nARG BOOST_RELEASE_URL=\"https://boostorg.jfrog.io/artifactory/main/release\"\nARG BOOST_BUILD_OPTIONS=\"--without-mpi --without-graph_parallel\"\n\nENV BOOST_INSTALL_DIR=\"/opt/boost\" \\\n    BOOST_PATCH_DIR=\"/opt/patch\"\n\nRUN mkdir -p \"${BOOST_INSTALL_DIR}\" && \\\n    boost_build_dir=\"$(mktemp -d)\" && \\\n    boost_download_url=\"${BOOST_RELEASE_URL}/${BOOST_VERSION}/source/boost_$(echo \"${BOOST_VERSION}\" | sed -r 's/\\./_/g').tar.gz\" && \\\n    echo \"Downloading Boost C++ Libraries (source code archive) from ${boost_download_url} into ${boost_build_dir} directory\" && \\\n    curl -f -jksSL \"${boost_download_url}\" | tar -xzf - -C \"${boost_build_dir}\" --strip-components 1 && \\\n    b2_bin=\"${boost_build_dir}/b2\" && \\\n    b2_toolset=\"gcc\" && \\\n    boost_bootstrap=\"${boost_build_dir}/bootstrap.sh\" && \\\n    current_dir=\"$(pwd)\" && \\\n    cd \"${boost_build_dir}\" && \\\n    boost_patch_file=\"${BOOST_PATCH_DIR}/boost-${BOOST_VERSION}.patch\" && \\\n    if [[ -f \"${boost_patch_file}\" ]]; then \\\n      echo \"Patching Boost C++ Libraries using ${boost_patch_file}\" && \\\n      dos2unix <\"${boost_patch_file}\" | patch -uNf -p0 ; \\\n    fi && \\\n    echo \"Building Boost.Build engine\" && \\\n    \"${boost_bootstrap}\" && \\\n    boost_linkage=\"static\" && \\\n    boost_runtime_linkage=\"static\" && \\\n    echo \"Building Boost C++ Libraries with these parameters:\" && \\\n    echo \"B2_BIN               : ${b2_bin}\" && \\\n    echo \"B2_TOOLSET           : ${b2_toolset}\" && \\\n    echo \"BOOST_INSTALL_DIR    : ${BOOST_INSTALL_DIR}\" && \\\n    echo \"BOOST_LINKAGE        : ${boost_linkage}\" && \\\n    echo \"BOOST_RUNTIME_LINKAGE: ${boost_runtime_linkage}\" && \\\n    echo \"BOOST_BUILD_OPTIONS  : ${BOOST_BUILD_OPTIONS}\" && \\\n    \"${b2_bin}\" \\\n      --toolset=\"${b2_toolset}\" \\\n      link=\"${boost_linkage}\" \\\n      runtime-link=\"${boost_runtime_linkage}\" \\\n      install \\\n      --prefix=\"${BOOST_INSTALL_DIR}\" \\\n      --layout=system \\\n      ${BOOST_BUILD_OPTIONS} && \\\n    cd \"${current_dir}\" && \\\n    rm -rf \"${boost_build_dir}\"\n\nARG MA_REVISION=\"master\"\n\nRUN source_dir=\"$(mktemp -d)\" && \\\n    git clone \"https://github.com/mabrarov/asio_samples.git\" \"${source_dir}\" && \\\n    git -C \"${source_dir}\" checkout \"${MA_REVISION}\" && \\\n    build_dir=\"$(mktemp -d)\" && \\\n    cmake \\\n      -D CMAKE_SKIP_BUILD_RPATH=ON \\\n      -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D CMAKE_USER_MAKE_RULES_OVERRIDE=\"${source_dir}/cmake/static_c_runtime_overrides.cmake\" \\\n      -D CMAKE_USER_MAKE_RULES_OVERRIDE_CXX=\"${source_dir}/cmake/static_cxx_runtime_overrides.cmake\" \\\n      -D Boost_USE_STATIC_LIBS=ON \\\n      -D Boost_NO_SYSTEM_PATHS=ON \\\n      -D BOOST_INCLUDEDIR=\"${BOOST_INSTALL_DIR}/include\" \\\n      -D BOOST_LIBRARYDIR=\"${BOOST_INSTALL_DIR}/lib\" \\\n      -D MA_TESTS=OFF \\\n      -D MA_QT=OFF \\\n      -S \"${source_dir}\" \\\n      -B \"${build_dir}\" && \\\n    cmake --build \"${build_dir}\" --target ma_echo_server && \\\n    mkdir -p /opt/ma_echo_server && \\\n    mv -f \"${build_dir}/examples/ma_echo_server/ma_echo_server\" \\\n        /opt/ma_echo_server/ && \\\n    rm -rf \"${build_dir}\" && \\\n    rm -rf \"${source_dir}\"\n\nFROM gcr.io/distroless/static-debian11\n\nLABEL name=\"abrarov/tcp-echo\" \\\n    description=\"TCP echo server from Asio samples project\" \\\n    license=\"BSL-1.0\"\n\nENTRYPOINT [\"/opt/ma_echo_server/ma_echo_server\"]\n\nCOPY --from=build [\"/opt/ma_echo_server\", \"/opt/ma_echo_server\"]\n"
}