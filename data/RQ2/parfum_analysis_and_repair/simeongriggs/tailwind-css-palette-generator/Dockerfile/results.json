{
  "startTime": 1674246701269,
  "endTime": 1674246702131,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# base node image\nFROM node:17-bullseye-slim as base\n\n# Install Chromium for puppeteer\n# RUN apt-get update && apt-get install -y chromium\n\n# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.\n# ENV CHROME_BIN=/usr/bin/chromium\n\n# Install openssl for Prisma\n# RUN apt-get update && apt-get install -y openssl\n\n# Install all node_modules, including dev dependencies\nFROM base as deps\n\nRUN mkdir /app -p\nWORKDIR /app\n\nADD package.json package-lock.json ./\nRUN npm install --production=false && npm cache clean --force;\n\n# Setup production node_modules\nFROM base as production-deps\n\nRUN mkdir /app -p\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\nADD package.json package-lock.json ./\n# RUN npm prune --production\n\n# Build the app\nFROM base as build\n\nENV NODE_ENV=production\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\n\n# If we're using Prisma, uncomment to cache the prisma schema\n# ADD prisma .\n# RUN npx prisma generate\n\nADD . .\nRUN npm run build\n\n# Finally, build the production image with minimal footprint\nFROM base\n\nENV NODE_ENV=production\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=production-deps /app/node_modules /app/node_modules\n\n# Uncomment if using Prisma\n# COPY --from=build /app/node_modules/.prisma /app/node_modules/.prisma\n\nCOPY --from=build /app/build /app/build\nCOPY --from=build /app/public /app/public\nADD . .\n\nCMD [\"npm\", \"run\", \"start\"]\n"
}