{
  "startTime": 1674251058592,
  "endTime": 1674251059396,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 25,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 25,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 109
      }
    }
  ],
  "repairedDockerfile": "FROM tensorflow/tensorflow:devel\n\nRUN apt-get update -y && apt-get install --no-install-recommends -y cmake emacs mlocate && rm -rf /var/lib/apt/lists/*;\n\n\n## For Chrome, Firefox\n### EMSCRIPTEN\nWORKDIR /\nRUN git clone https://github.com/emscripten-core/emsdk.git -b 2.0.14 --depth 1 emsdk2.0.14\nWORKDIR /emsdk2.0.14\nRUN ./emsdk install latest\nRUN ./emsdk activate latest\n### openCV\nWORKDIR /\nRUN git clone https://github.com/opencv/opencv.git -b 4.5.1 --depth 1 opencv_for_emsdk2.0.14\nWORKDIR /opencv_for_emsdk2.0.14\nRUN python3  platforms/js/build_js.py build_wasm             --emscripten_dir=/emsdk2.0.14/upstream/emscripten --config_only\nRUN python3  platforms/js/build_js.py build_wasm_simd --simd --emscripten_dir=/emsdk2.0.14/upstream/emscripten --config_only\nENV OPENCV_JS_WHITELIST /opencv_for_emsdk2.0.14/platforms/js/opencv_js.config.py\nRUN cd build_wasm && /emsdk2.0.14/upstream/emscripten/emmake make -j$(nproc) && /emsdk2.0.14/upstream/emscripten/emmake make install\nRUN cd build_wasm_simd && /emsdk2.0.14/upstream/emscripten/emmake make -j$(nproc) && /emsdk2.0.14/upstream/emscripten/emmake make install\n\n## For Safari\n### EMSCRIPTEN\nWORKDIR /\nRUN git clone https://github.com/emscripten-core/emsdk.git -b 1.40.1 --depth 1 emsdk1.40.1\nWORKDIR /emsdk1.40.1\nRUN ./emsdk install latest\nRUN ./emsdk activate latest\n\n### openCV\nWORKDIR /\nRUN git clone https://github.com/opencv/opencv.git -b 4.5.1 --depth 1 opencv_for_emsdk1.40.1\nWORKDIR /opencv_for_emsdk1.40.1\nRUN python3  platforms/js/build_js.py build_wasm             --emscripten_dir=/emsdk1.40.1/upstream/emscripten --config_only\nRUN python3  platforms/js/build_js.py build_wasm_simd --simd --emscripten_dir=/emsdk1.40.1/upstream/emscripten --config_only\nENV OPENCV_JS_WHITELIST /opencv_for_emsdk1.40.1/platforms/js/opencv_js.config.py\nRUN cd build_wasm && /emsdk1.40.1/upstream/emscripten/emmake make -j$(nproc) && /emsdk1.40.1/upstream/emscripten/emmake make install\nRUN sed -i -e \"2660,2661d\" /opencv_for_emsdk1.40.1/modules/core/include/opencv2/core/hal/intrin_wasm.hpp\nRUN cd build_wasm_simd && /emsdk1.40.1/upstream/emscripten/emmake make -j$(nproc) && /emsdk1.40.1/upstream/emscripten/emmake make install\n\n\n\n\n### Tensorflow\nWORKDIR /\nRUN git -C /tensorflow_src checkout refs/tags/v2.4.1 -b v2.4.1\nRUN sed -i 's/\"crosstool_top\": \"\\/\\/external:android\\/emscripten\"/\"crosstool_top\": \"\\/\\/emscripten_toolchain\\/everything\"/' /tensorflow_src/tensorflow/BUILD\nRUN sed -i '/\":tvos_arm64\": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,/a \":emscripten_wasm\": COMMON_SRCS + EMSCRIPTEN_SRCS,' /tensorflow_src/third_party/cpuinfo/BUILD.bazel\nCOPY workspace.bzl.patch /tensorflow_src/tensorflow/\nWORKDIR /tensorflow_src/tensorflow\nRUN patch -u < workspace.bzl.patch\n\n### Zbar\nWORKDIR /\nRUN apt-get update -y\nRUN apt-get install --no-install-recommends -y autoconf libtool gettext autogen imagemagick libmagickcore-dev && rm -rf /var/lib/apt/lists/*;\nRUN git clone https://github.com/ZBar/ZBar\nWORKDIR /ZBar\n###### Delete all -Werror strings from configure.ac\n###### Don't treat warnings as errors!\nRUN sed -i \"s/ -Werror//\" $(pwd)/configure.ac\nRUN autoreconf -i\nRUN /emsdk2.0.14/upstream/emscripten/emconfigure ./configure --without-x --without-jpeg --without-imagemagick --without-npapi --without-gtk --without-python --without-qt --without-xshm --disable-video --disable-pthread\nRUN /emsdk2.0.14/upstream/emscripten/emmake make -j && /emsdk2.0.14/upstream/emscripten/emmake make install\n\n\n\n### ZXing\nWORKDIR /\nRUN git clone https://github.com/yushulx/zxing-cpp-emscripten\nWORKDIR /zxing-cpp-emscripten/build-wasm\nRUN sed -i \"s/emconfigure/\\/emsdk2.0.14\\/upstream\\/emscripten\\/emcmake/\" configure.sh\nRUN sed -i \"s/emmake/\\/emsdk2.0.14\\/upstream\\/emscripten\\/emmake/\" build.sh\nRUN sed -i '/project(zxing)/a\\set(EMSCRIPTEN 1)' CMakeLists.txt\n# RUN sed -i 's/set(CMAKE_AR \"emcc\")/set(CMAKE_AR \"\\/emsdk\\/upstream\\/emscripten\\/emcc\")/' CMakeLists.txt\n\nRUN sed -i 's/set(CMAKE_AR \"emcc\")/set(CMAKE_AR \"\\/emsdk2.0.14\\/upstream\\/emscripten\\/emar\")/' CMakeLists.txt\nRUN sed -i 's/set(CMAKE_STATIC_LIBRARY_SUFFIX \".bc\")/set(CMAKE_STATIC_LIBRARY_SUFFIX \".a\")/' CMakeLists.txt\nRUN sed -i 's/set(CMAKE_C_CREATE_STATIC_LIBRARY \"<CMAKE_AR> -o <TARGET> <LINK_FLAGS> <OBJECTS>\")/set(CMAKE_C_CREATE_STATIC_LIBRARY \"<CMAKE_AR> rcs <TARGET> <LINK_FLAGS> <OBJECTS>\")/' CMakeLists.txt\nRUN sed -i 's/set(CMAKE_CXX_CREATE_STATIC_LIBRARY \"<CMAKE_AR> -o <TARGET> <LINK_FLAGS> <OBJECTS>\")/set(CMAKE_CXX_CREATE_STATIC_LIBRARY \"<CMAKE_AR> rcs <TARGET> <LINK_FLAGS> <OBJECTS>\")/' CMakeLists.txt\n\n\n\nRUN ./configure.sh\nRUN ./build.sh\n\n###\nWORKDIR /\n"
}