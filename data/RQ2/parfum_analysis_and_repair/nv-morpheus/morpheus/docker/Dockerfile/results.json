{
  "startTime": 1674215510764,
  "endTime": 1674215512005,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# SPDX-FileCopyrightText: Copyright (c) 2021-2022, NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# Args used in FROM commands must come first\nARG FROM_IMAGE=\"gpuci/miniforge-cuda\"\nARG CUDA_VER=11.5\nARG LINUX_DISTRO=ubuntu\nARG LINUX_VER=20.04\n\n# ============ Stage: base ============\n# Configure the base conda environment\nFROM ${FROM_IMAGE}:${CUDA_VER}-devel-${LINUX_DISTRO}${LINUX_VER} AS base\n\n# Required arguments\nARG IMAGE_TYPE=base\nARG RAPIDS_CHANNEL=rapidsai-nightly\nARG RAPIDS_VER=22.06\nARG PYTHON_VER=3.8\nARG CONDA_CHANNEL=rapidsai\n\n# Temp option to set conda channel_alias property during build\nARG CONDA_CHANNEL_ALIAS\n\n# The TensorRT Version must be the full version (i.e. 7.2.2.3) and match Triton EXACTLY\nARG TENSORRT_VERSION=8.2.1.3\n\n# Capture argument used for FROM\nARG CUDA_VER\n\n# Install dependencies to build\nRUN apt-get update &&\\\n    apt-get upgrade -y && \\\n    curl -f -sL https://deb.nodesource.com/setup_12.x | bash - && \\\n    apt-get install --no-install-recommends -y \\\n        build-essential pkg-config curl unzip tar zip openssh-client bc jq nodejs git-lfs \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n\n# All code will be under /workspace\nWORKDIR /workspace\n\n# Install mamba to speed the solve up\nRUN conda config --set ssl_verify false &&\\\n    conda config --add pkgs_dirs /opt/conda/pkgs &&\\\n    conda config --env --add channels conda-forge &&\\\n    # Install mamba, boa and git here. Conda build breaks with other git installs\n    /opt/conda/bin/conda install -y -n base -c conda-forge \"mamba >=0.22\" \"boa >=0.10\" \"git >=2.35.3\" \"git-lfs\" \"python=${PYTHON_VER}\" &&\\\n    source activate base &&\\\n    git lfs install\n    # conda clean -afy\n\n# ============ Stage: conda_env ============\n# Create the conda environment and install all dependencies\nFROM base as conda_env\n\n# Create a base environment\nRUN --mount=type=cache,id=conda_pkgs,target=/opt/conda/pkgs,sharing=locked \\\n    # Create the environment and install as little dependencies as possible\n    CONDA_ALWAYS_YES=true /opt/conda/bin/mamba create -n morpheus -c conda-forge python=${PYTHON_VER} &&\\\n    # Clean and activate\n    # conda clean -afy && \\\n    sed -i 's/conda activate base/conda activate morpheus/g' ~/.bashrc\n\n# Set the permenant conda channes to use for morpheus\nRUN source activate morpheus &&\\\n    conda config --env --add channels conda-forge &&\\\n    conda config --env --add channels nvidia &&\\\n    conda config --env --add channels rapidsai\n\n# Set the entrypoint to use the entrypoint.sh script which sets the conda env\nCOPY docker/entrypoint.sh ./docker/\nENTRYPOINT [ \"/opt/conda/bin/tini\", \"--\", \"docker/entrypoint.sh\" ]\n\n# Reset the shell back to normal\nSHELL [\"/bin/bash\", \"-c\"]\n\n# ============ Stage: conda_env_dev ============\n# Create the development conda environment\nFROM conda_env as conda_env_dev\n\nARG CONDA_CHANNEL_ALIAS\n\n# Copy the development dependencies file\nCOPY docker/conda/environments/cuda${CUDA_VER}_dev.yml ./docker/conda/environments/\nCOPY docker/conda/environments/requirements.txt ./docker/conda/environments/\n\n# Update the morpheus environment\nRUN --mount=type=cache,id=conda_pkgs,target=/opt/conda/pkgs,sharing=locked \\\n    # Temp add channel_alias to get around conda 404 errors\n    conda config --env --set channel_alias ${CONDA_CHANNEL_ALIAS:-\"https://conda.anaconda.org\"} &&\\\n    /opt/conda/bin/mamba env update -n morpheus --file docker/conda/environments/cuda${CUDA_VER}_dev.yml &&\\\n    # Remove channel_alias to use the normal channel in the container\n    conda config --env --remove-key channel_alias &&\\\n    # Clean and activate\n    conda clean -afy\n\n# ============ Stage: conda_bld_morpheus ============\n# Now build the morpheus conda package\nFROM base as conda_bld_morpheus\n\nARG CONDA_CHANNEL_ALIAS\n\n# Copy the source\nCOPY . ./\n\nRUN --mount=type=cache,id=workspace_cache,target=/workspace/.cache,sharing=locked \\\n    --mount=type=cache,id=conda_pkgs,target=/opt/conda/pkgs,sharing=locked \\\n    source activate base &&\\\n    # Need to get around recent versions of git locking paths until they are deemed safe\n    git config --global --add safe.directory \"*\" &&\\\n    MORPHEUS_ROOT=/workspace MORPHEUS_BUILD_PYTHON_STUBS=OFF CONDA_BLD_PATH=/opt/conda/conda-bld CONDA_ARGS=\"--no-test\" ./ci/conda/recipes/run_conda_build.sh morpheus\n\n# ============ Stage: runtime ============\n# Setup container for runtime environment\nFROM conda_env as runtime\n\n# Manually need to install some pip-only dependencies. Once these can get moved to conda, they can be removed.\nCOPY docker/conda/environments/requirements.txt ./docker/conda/environments/\nCOPY docker/conda/environments/cuda${CUDA_VER}_runtime.yml ./docker/conda/environments/\n\nRUN --mount=type=bind,from=conda_bld_morpheus,source=/opt/conda/conda-bld,target=/opt/conda/conda-bld \\\n    --mount=type=cache,id=conda_pkgs,target=/opt/conda/pkgs,sharing=locked \\\n    source activate morpheus &&\\\n    # Install runtime dependencies that are pip-only\n    /opt/conda/bin/mamba env update -n morpheus --file docker/conda/environments/cuda${CUDA_VER}_runtime.yml &&\\\n    # Install morpheus\n    CONDA_ALWAYS_YES=true /opt/conda/bin/mamba install -n morpheus -c local -c rapidsai -c nvidia -c nvidia/label/dev -c conda-forge morpheus &&\\\n    # Clean and activate\n    conda clean -afy\n\n# Only copy specific files/folders over that are necessary for runtime\nCOPY \"./docker\" \"./docker\"\nCOPY \"./docs\" \"./docs\"\nCOPY \"./examples\" \"./examples\"\nCOPY \"./models\" \"./models\"\nCOPY \"./scripts\" \"./scripts\"\nCOPY [\"*.md\", \"LICENSE\", \"./\"]\n\n# Use morpheus by default\nCMD [ \"morpheus\" ]\n\n# ============ Stage: development ============\n# Install and configure development only packages\nFROM conda_env_dev as development\n# Copy the source\n# COPY . ./\n\n# Install camouflage needed for unittests to mock a triton server\nRUN npm install -g camouflage-server && npm cache clean --force;\n\n# Setup git to allow other users to access /workspace. Requires git 2.35.3 or\n# greater. See https://marc.info/?l=git&m=164989570902912&w=2. Only enable for\n# development\nRUN git config --global --add safe.directory \"*\"\n\n# ============ Stage: python_debug_bld ===========\n# Configure and build cpython with debugging symbols\nFROM development as development_pydbg\n\nCOPY ci/conda/recipes/python-dbg/ ./ci/conda/recipes/python-dbg\nCOPY ci/conda/recipes/run_conda_build.sh ./ci/conda/recipes/run_conda_build.sh\nCOPY ci/conda/recipes/python_dbg_install.sh ./ci/conda/recipes/python_dbg_install.sh\n\n# Temporary until #68 goes in\nARG MORPHEUS_USER=\"root\"\n\n# Build and install debug cpython\nRUN source activate morpheus \\\n    && MORPHEUS_ROOT=/workspace \\\n       CONDA_BLD_PATH=/opt/conda/conda-bld \\\n       CONDA_ARGS=\"--no-test\" \\\n       ./ci/conda/recipes/run_conda_build.sh pydebug \\\n    && ./ci/conda/recipes/python_dbg_install.sh \\\n       -s $( ls /opt/conda/conda-bld/src_cache/Python-${PYTHON_VER}*.tar.xz ) \\\n       -c $( ls /opt/conda/conda-bld/linux-64/python-${PYTHON_VER}*.tar.bz2 ) \\\n       -i ./ci/conda/recipes/python-dbg/source \\\n       -g $(eval echo \"~${MORPHEUS_USER}\")/.gdbinit\n"
}