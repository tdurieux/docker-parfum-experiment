{
  "startTime": 1674252264116,
  "endTime": 1674252265743,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG DOCKER_USER_NAME\nARG SOURCE_DOCKER_HUB\nARG FULL_GRAALVM_VERSION\n\nFROM ${SOURCE_DOCKER_HUB}:${FULL_GRAALVM_VERSION} as graalvm-jdk-image\nFROM ${DOCKER_USER_NAME}/micronaut-starter:${FULL_GRAALVM_VERSION} as micronaut-starter-image\nFROM ${DOCKER_USER_NAME}/workload-generator as workload-generator\n\nFROM debian:buster\n\nCOPY --from=workload-generator /tmp/wrk/wrk /usr/local/bin\nRUN echo \"Testing 'wrk':\"; wrk || true\n\n# Install other smaller utilities needed during building of image in the slim image\nRUN echo; echo \"--- Installing wget, curl, vim, unzip in the slim image\"; echo\nRUN apt-get update \\\n    && apt-get install -yq --no-install-recommends \\\n                       wget curl vim unzip gnupg2 \\\n                       make gcc g++ libc++-dev \\\n                       openssl libssl-dev libcrypto++-dev libz.a \\\n                       locales ca-certificates && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/*\n\n# https://www.rosehosting.com/blog/configure-system-locale-on-debian-9/\n# https://people.debian.org/~schultmc/locales.html <-- simple steps\nRUN echo \"--- Installing and setting locales\"\nRUN echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US\"\nRUN locale-gen\nRUN echo; echo \"LANG=${LANG}\"; echo \"LANGUAGE=${LANGUAGE}\";\nRUN echo; echo \"List of installed locales:\"; locale -a; echo;\n\n# Install gcc and make\nRUN echo \"gcc version: \"; gcc --version\nRUN echo \"make version: \"; make --version\n\nARG GRAALVM_HOME\n\n# Install and setup GraalVM\nCOPY --from=graalvm-jdk-image /opt/graalvm-* ${GRAALVM_HOME}\n\nENV JAVA_HOME=${GRAALVM_HOME}\nENV PATH=${JAVA_HOME}/bin:${PATH}\nRUN echo; echo \"JAVA_HOME=${JAVA_HOME}\"; echo\nRUN echo; echo \" --- GraalVM version (runtime)\"; java -version; echo\n\n# Install some of the needed components using 'gu install'\nRUN echo; echo \" --- Download & install 'espresso' using gu\"; gu install espresso; echo\nRUN echo; echo \" --- Download & install 'nodejs' using gu\"; gu install nodejs; echo\nRUN echo; echo \" --- Download & install 'python' using gu\"; gu install python; echo\nRUN echo; echo \" --- Download & install 'R' using gu\"; gu install R; echo\nRUN echo; echo \" --- Download & install 'Ruby' using gu\"; gu install ruby; echo\nRUN echo; echo \" --- Download & install 'native-image' using gu\"; gu install native-image; echo\n\n# Rebuild Ruby to make the Ruby openssl C extensions to work with the local system libssl (see https://github.com/oracle/truffleruby/blob/master/doc/user/installing-graalvm.md#installing-ruby-and-other-languages)\nRUN echo \"Rebuilding Ruby to make the Ruby openssl C extensions to work with the local system libssl\"\n\nRUN export RUBY_POST_HOOK_SCRIPT=\"$(find ${GRAALVM_HOME} -name *post_install_hook.sh*)\";  \\\n   chmod +x ${RUBY_POST_HOOK_SCRIPT}; \\\n   bash ${RUBY_POST_HOOK_SCRIPT};\n# At the moment this is a simple litmus test to verify that the above step has actually worked!\nRUN echo \"Installing ruby gems to verify if the above installation and rebuilding processes are working...\"\nRUN gem install rspec galaaz\n\nRUN echo \"gcc version: \"; gcc --version\nRUN echo \"make version: \"; make --version\n\n# https://github.com/oracle/truffleruby/blob/master/doc/user/ruby-managers.md#chruby\nRUN if [ -e \"${GRAALVM_HOME}/jre\" ]; then  ruby_home=$(${GRAALVM_HOME}/jre/languages/ruby/bin/ruby -e 'print RbConfig::CONFIG[\"prefix\"]');  else ruby_home=$(${GRAALVM_HOME}/languages/ruby/bin/ruby -e 'print RbConfig::CONFIG[\"prefix\"]'); fi\n\n\n# Install Java 8\nCOPY --from=java:8u111-jdk /usr/lib/jvm /usr/lib/jvm\n\nENV JDK8_HOME=\"/usr/lib/jvm/java-1.8.0-openjdk-amd64\"\nRUN echo; echo \"JDK8_HOME=${JDK8_HOME}\"; echo\nRUN echo; echo \"PATH=${PATH}\"; echo\nRUN echo \" --- Java 8 version:\"; ${JDK8_HOME}/bin/java -version; echo\n\n# Install mvn\nARG MAVEN_VERSION\nRUN cd /tmp\nRUN wget -q -nv https://raw.githubusercontent.com/Drambluker/install-maven/main/install-maven.sh\nRUN wget -q -nv \"https://www.mirrorservice.org/sites/ftp.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz\"\nRUN chmod +x ./install-maven.sh\nRUN ./install-maven.sh -f apache-maven-${MAVEN_VERSION}-bin.tar.gz\nENV M2_HOME=\"/usr/local/apache-maven/apache-maven-${MAVEN_VERSION}/\"\nENV PATH=${M2_HOME}/bin:${PATH}\nRUN echo \" --- Maven version:\"; mvn --version; echo\n\n# Install gradle\nARG GRADLE_VERSION\nRUN cd /tmp/; wget -q -nv https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip\nRUN cd /tmp/; unzip gradle-${GRADLE_VERSION}-bin.zip && mv gradle-${GRADLE_VERSION} /\nENV GRADLE_HOME=\"/gradle-${GRADLE_VERSION}\"\nENV PATH=${GRADLE_HOME}/bin:${PATH}\nRUN echo \" --- Gradle version:\"; gradle --version; echo\n\n# Install jmeter\nRUN cd /tmp/; wget -q -nv \"https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.1.zip\"\nRUN unzip /tmp/apache-jmeter-5.4.1.zip\nENV JMETER_HOME=\"${WORKDIR}/apache-jmeter-5.4.1\"\nENV PATH=${JMETER_HOME}/bin:${PATH}\nRUN echo \" --- Jmeter version:\"; jmeter --version; echo\n\n# Install scala and sbt\nARG SBT_VERSION\nRUN echo; echo \"--- Installing scala and sbt in the slim image\"; echo\n# See https://www.scala-sbt.org/download.html\nRUN cd /tmp/; wget -q -nv https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.zip\nRUN cd /tmp/; unzip sbt-${SBT_VERSION}.zip; mv sbt /usr/share; ln -s /usr/share/sbt/bin/sbt /usr/bin/sbt\nRUN echo \"sbt version:\"; sbt --version | grep \"sbt script version\"; echo\n\nARG SCALA_VERSION\n# See https://www.scala-lang.org/download/\nRUN cd /tmp/; wget -q -nv https://github.com/lampepfl/dotty/releases/download/${SCALA_VERSION}/scala3-${SCALA_VERSION}.zip\nRUN cd /tmp/; unzip scala3-${SCALA_VERSION}.zip; mv scala3-${SCALA_VERSION} /usr/share/scala;\nRUN ln -s /usr/share/scala /usr/share/scala-${SCALA_VERSION}; ln -s /usr/share/scala/bin/scala /usr/bin/scala\nRUN echo \"scala version:\"; scala -version; echo\n\n# this location maps to the specific vesion of Scala for e.g. scala-2.12 or 3.0.2\nENV SCALA_HOME=\"/usr/share/scala\"\nRUN echo; echo \"SCALA_HOME=${SCALA_HOME}\"; echo\n\nCOPY --from=micronaut-starter-image /root/.micronaut/micronaut-cli /root/.micronaut/micronaut-cli\nENV MICRONAUT_HOME=\"/root/.micronaut/micronaut-cli\"\nENV PATH=${MICRONAUT_HOME}/bin:${PATH}\nRUN echo; echo \" --- Micronaut version\"; mn --version; echo\n\n# Some demo apps require this env variable set\nENV GRAALVM_HOME=${GRAALVM_HOME}\nRUN echo; echo \"GRAALVM_HOME=${GRAALVM_HOME}\"; echo\n\nLABEL maintainer=\"GraalVM team\"\nLABEL example_git_repo=\"https://github.com/graalvm/graalvm-demos\"\nLABEL graalvm_version=${FULL_GRAALVM_VERSION}\nLABEL version=${FULL_GRAALVM_VERSION}"
}