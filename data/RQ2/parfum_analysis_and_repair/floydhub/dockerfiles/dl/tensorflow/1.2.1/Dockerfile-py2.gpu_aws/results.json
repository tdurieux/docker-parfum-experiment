{
  "startTime": 1674219237792,
  "endTime": 1674219238839,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM floydhub/dl-base:1.0.0-gpu-py2.6\nMAINTAINER Floyd Labs \"support@floydhub.com\"\n\nARG TENSORFLOW_VERSION=v1.2.1\nARG KERAS_VERSION=2.0.8\n\nRUN git clone https://github.com/tensorflow/tensorflow.git --branch ${TENSORFLOW_VERSION} --single-branch\nWORKDIR /tensorflow\n\nENV CI_BUILD_PYTHON python\n# Configure the build for our CUDA configuration.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\nENV TF_NEED_CUDA 1\nENV TF_CUDA_COMPUTE_CAPABILITIES=3.7\n\n# This updates the global environment for the root user\n# TODO: move to buildpack-deps\nRUN echo \"LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\" >> /etc/environment\nRUN echo \"LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$LIBRARY_PATH\" >> /etc/environment\n\n\n\n# NOTE: This command uses special flags to build an optimized image for AWS machines.\n# This image might *NOT* work on other machines\n# Clean up pip wheel and Bazel cache when done.\nRUN tensorflow/tools/ci_build/builds/configured GPU \\\n    && bazel build -c opt --copt=-msse3 --copt=-msse4.1 --copt=-msse4.2 --copt=-mavx --copt=-mavx2 \\\n        --copt=-mfma --config=cuda tensorflow/tools/pip_package:build_pip_package \\\n    && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n    && pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl \\\n    && rm -rf /tmp/* \\\n    && rm -rf /root/.cache \\\n    && cd / && rm -rf tensorflow\n\n# Add Tensorboard\nRUN apt-get update && apt-get install --no-install-recommends -y supervisor \\\n  && apt-get clean \\\n  && apt-get autoremove \\\n  && rm -rf /var/cache/apt/archives/* \\\n  && rm -rf /var/lib/apt/lists/*\nCOPY tensorboard/tensorboard.conf /etc/supervisor/conf.d/\n\nWORKDIR /\n\n# Install Keras and tflearn\nRUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} \\\n        tflearn==0.3.2 \\\n    && rm -rf /tmp/* \\\n    && rm -rf /root/.cache"
}