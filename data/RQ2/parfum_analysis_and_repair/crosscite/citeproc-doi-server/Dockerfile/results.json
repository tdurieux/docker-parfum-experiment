{
  "startTime": 1674252639412,
  "endTime": 1674252640195,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM phusion/passenger-nodejs:2.0.0\n\n# Set correct environment variables\nENV HOME /home/app\nENV DOCKERIZE_VERSION v0.2.0\n## downgrading NodeJS\nENV NVM_DIR /usr/local/nvm\nENV NODE_VERSION 0.10.46\n# ENV NODE_VERSION 0.6.12 #version in the old server\nENV NODE_PATH $NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules\nENV PATH      $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\n\n# Use baseimage-docker's init process\nCMD [\"/sbin/my_init\"]\n\n# Update installed APT packages, clean up when done\nRUN apt-get update && \\\n    apt-get upgrade -y -o Dpkg::Options::=\"--force-confold\" && \\\n    apt-get install --no-install-recommends wget git ntp -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Enable Passenger and Nginx and remove the default site\n# Preserve env variables for nginx\nRUN rm -f /etc/service/nginx/down && \\\n    rm /etc/nginx/sites-enabled/default\nCOPY vendor/docker/webapp.conf /etc/nginx/sites-enabled/webapp.conf\nCOPY vendor/docker/00_app_env.conf /etc/nginx/conf.d/00_app_env.conf\n\n# install dockerize\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\n# Use Amazon NTP servers\nCOPY vendor/docker/ntp.conf /etc/ntp.conf\n\n# Copy webapp folder\nCOPY . /home/app/webapp/\n\n# Replace shell with bash so we can source files\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n# Set debconf to run non-interactively\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\nWORKDIR /home/app/webapp/vendor\n# Install nvm with node and npm\n# RUN /sbin/setuser app cp nvm/bash_profile ~/.bash_profile \\\nRUN bash /home/app/webapp/vendor/nvm/install.sh\\\n    && source $NVM_DIR/nvm.sh \\\n    && nvm install $NODE_VERSION \\\n    && nvm alias default $NODE_VERSION \\\n    && nvm use default\n\nRUN chown -R app:app /home/app/webapp && \\\n    chmod -R 755 /home/app/webapp\n\n# Install npm and bower packages\nWORKDIR /home/app/webapp\nRUN npm install && npm cache clean --force;\n\n# Run additional scripts during container startup (i.e. not at build time)\n# Process templates using ENV variables\nRUN mkdir -p /etc/my_init.d\nCOPY vendor/docker/70_templates.sh /etc/my_init.d/70_templates.sh\nCOPY vendor/docker/80_submodules.sh /etc/my_init.d/80_submodules.sh\n\n# Expose web\nEXPOSE 80\n"
}