{
  "startTime": 1674218523518,
  "endTime": 1674218524277,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 148
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "FROM phusion/passenger-full:2.0.0\nLABEL maintainer=\"mfenner@datacite.org\"\n\n# Set correct environment variables.\nENV HOME /home/app\nENV DOCKERIZE_VERSION v0.6.0\n\n# Allow app user to read /etc/container_environment\nRUN usermod -a -G docker_env app\n\n# This is to ensure when mounting volumes the non root user is actually our app user.\n# This ensures editing on both host/container.\nRUN usermod -u 1000 app\nRUN groupmod -g 1000 app\n\n# Use baseimage-docker's init process.\nCMD [\"/sbin/my_init\"]\n\n# fetch node10 and yarn sources\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash && \\\n    curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\n\n# Use Ruby 2.6.8\nRUN bash -lc 'rvm --default use ruby-2.6.8'\n\n# Set debconf to run non-interactively\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Install Chrome for headless testing\nRUN apt-get install -y --no-install-recommends wget && \\\n    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n    sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' && rm -rf /var/lib/apt/lists/*;\n\n# Update installed APT packages\nRUN apt-get update && apt-get upgrade -y -o Dpkg::Options::=\"--force-confold\" && \\\n    apt-get install --no-install-recommends wget git ntp yarn google-chrome-stable python-dev pkg-config fontconfig libpng-dev libjpeg-dev libcairo2-dev libfreetype6-dev -y && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Enable Passenger and Nginx and remove the default site\n# Preserve env variables for nginx\nRUN rm -f /etc/service/nginx/down && \\\n    rm /etc/nginx/sites-enabled/default\nCOPY vendor/docker/00_app_env.conf /etc/nginx/conf.d/00_app_env.conf\n\n# Install dockerize\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\n# Use Amazon NTP servers\nCOPY vendor/docker/ntp.conf /etc/ntp.conf\n\n# Copy webapp folder\nCOPY . /home/app/webapp/\nRUN mkdir -p /home/app/webapp/vendor/bundle && \\\n    chown -R app:app /home/app/webapp && \\\n    chmod -R 755 /home/app/webapp\n\n# Install npm packages\n# build vue component\nWORKDIR /home/app/webapp\n\n# Install Ruby gems\nWORKDIR /home/app/webapp\nRUN gem install bundler && \\\n    /sbin/setuser app bundle install --path vendor/bundle\n\n# Install javascript libraries and webpack\nRUN yarn install && \\\n    yarn build && yarn cache clean;\n\n# Run additional scripts during container startup (i.e. not at build time)\nRUN mkdir -p /etc/my_init.d\nCOPY vendor/docker/70_templates.sh /etc/my_init.d/70_templates.sh\n\n# Expose web\nEXPOSE 80\n"
}