{
  "startTime": 1674220735181,
  "endTime": 1674220736060,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 11,
        "columnEnd": 30
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 11,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 11,
        "columnEnd": 27
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 11,
        "columnEnd": 35
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 11,
        "columnEnd": 35
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=\"registry.access.redhat.com/ubi8/nodejs-14:1-50\"\nFROM $BASE_IMAGE\n\n# to support RHEL-based and DEBIAN-based version of node\n# e.g. RHEL-based node images in ironbank, DEBIAN-based ones in docker hub\nUSER root\n\nRUN yum install -y \\\n        git \\\n        make && rm -rf /var/cache/yum\n\nRUN yum -y update libsolv libgcc libstdc++ cryptsetup-libs cyrus-sasl-lib gzip zlib nss\n\nCOPY ./postgres/tmp/RPM-GPG-KEY-PGDG-11 \\\n     ./postgres/tmp/postgresql11-server.rpm \\\n     ./postgres/tmp/postgresql11.rpm \\\n     ./postgres/tmp/postgresql11-libs.rpm \\\n     ./postgres/tmp/postgresql11-contrib.rpm \\\n     /tmp/\n\nRUN rpm --import /tmp/RPM-GPG-KEY-PGDG-11 && \\\n    dnf install -y --nodocs glibc-langpack-en /tmp/postgresql11-server.rpm /tmp/postgresql11.rpm /tmp/postgresql11-libs.rpm /tmp/postgresql11-contrib.rpm && \\\n    dnf clean all && \\\n    rm -rf /var/cache/dnf\n\n# non-root app USER/GROUP\nARG APP_UID=1000\nARG APP_GID=1000\n\n# key dirs & globally usable binaries/packages\nENV APP_ROOT=\"/opt/app-root\"\nENV APP_DIR=\"${APP_ROOT}/src\"\nENV APP_FRONTEND_DIR=\"${APP_DIR}/frontend\"\nENV APP_BACKEND_DIR=\"${APP_DIR}/backend\"\nENV APP_SHARED_DIR=\"${APP_ROOT}/shared\"\nENV APP_SHARED_BIN=\"${APP_SHARED_DIR}/node_modules/.bin\"\nENV PATH=\"${APP_SHARED_BIN}:${PATH}\"\nENV NPM_CONFIG_USERCONFIG=\"${APP_ROOT}/.nmprc\"\nENV LOGS=\"/logs/uotapp\"\n\nRUN mkdir -p \\\n        \"${APP_DIR}\" \\\n        \"${APP_BACKEND_DIR}\" \\\n        \"${APP_FRONTEND_DIR}\" \\\n        \"${APP_SHARED_DIR}\" \\\n        \"${LOGS}\" \\\n    && touch \"${NPM_CONFIG_USERCONFIG}\" \\\n    && chown -R \"$APP_UID:$APP_GID\" \"${APP_ROOT}\" \\\n    && chown -R \"$APP_UID:$APP_GID\" \"${LOGS}\"\n\n\nUSER \"$APP_UID:$APP_GID\"\n# thou shall not root\n\nARG NPM_PROFILE=\"dod-advana\"\nARG NPM_REGISTRY=\"https://npm.pkg.github.com\"\nARG NPM_AUTH_TOKEN=\"\"\n\nCOPY --chown=\"$APP_UID:$APP_GID\" ./frontend/package.json \"${APP_FRONTEND_DIR}/package.json\"\nCOPY --chown=\"$APP_UID:$APP_GID\" ./backend/package.json \"${APP_BACKEND_DIR}/package.json\"\n\nRUN npm set \"@${NPM_PROFILE}:registry\" \"${NPM_REGISTRY}\" \\\n    && ([ -n \"$NPM_AUTH_TOKEN\" ] && ( \\\n        _registry_fqdn=$(echo -n ${NPM_REGISTRY} | sed -E 's/^https?:\\/\\///') \\\n        && npm set \"//${_registry_fqdn}/:_authToken\" \"${NPM_AUTH_TOKEN}\" \\\n    )) \\\n    && (\\ \n        cd \"$APP_SHARED_DIR\" \\\n        && npm install nodemon \\\n        && npm install sequelize-cli \\\n        && npm install jest \\\n    )\\\n    && (\\\n        cd \"${APP_FRONTEND_DIR}\" \\\n        && npm install --production \\\n    )\\\n    && (\\\n        cd \"${APP_BACKEND_DIR}\" \\\n        && npm install --production \\\n    ) \\\n    && rm -rf \"${NPM_CONFIG_USERCONFIG}\" && npm cache clean --force;\n\nCOPY --chown=\"$APP_UID:$APP_GID\" ./ \"${APP_DIR}\"\n\nRUN (\\\n        cd \"${APP_FRONTEND_DIR}\" \\\n        && npm run build \\\n        && mv \"${APP_FRONTEND_DIR}/build\" \"${APP_BACKEND_DIR}\" \\\n        && cd \"${APP_BACKEND_DIR}\" \\\n        && rm -rf \"${APP_FRONTEND_DIR}\" \\\n    )\n\n# http & https\nEXPOSE 8990 8443\nWORKDIR \"${APP_BACKEND_DIR}\"\nENTRYPOINT [\"node\"]\nCMD [\"index.js\"]\n"
}