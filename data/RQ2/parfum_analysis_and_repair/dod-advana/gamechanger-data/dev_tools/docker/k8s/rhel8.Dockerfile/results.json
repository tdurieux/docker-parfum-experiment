{
  "startTime": 1674251969610,
  "endTime": 1674251970720,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 135,
        "lineEnd": 136,
        "columnStart": 9,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 138,
        "columnStart": 9,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 143,
        "lineEnd": 144,
        "columnStart": 6,
        "columnEnd": 128
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 11,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 11,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 11,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=registry.access.redhat.com/ubi8/ubi:8.4-211\nFROM --platform=x86_64 $BASE_IMAGE\n\nARG \\\n    GHOSTSCRIPT_VERSION=9.55.0 \\\n    JBIG2ENC_VERSION=0.29 \\\n    LEPTONICA_VERSION=1.82.0 \\\n    TESSERACT_OCR_VERSION=4.1.1 \\\n    TESSERACT_OCR_LANGPACK_VERSION=4.1.0 \\\n    QPDF_VERSION=8.2.1\n\n# BRIEFLY ROOT\nUSER root\n\n# PYTHON & LOCALE ENV VARS\nENV LANG=\"C.utf8\" \\\n    LANGUAGE=\"C.utf8\" \\\n    LC_ALL=\"C.utf8\" \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONIOENCODING=\"UTF-8\" \\\n    PKG_CONFIG_PATH=/usr/local/lib/pkgconfig \\\n    PKG_CONFIG=/usr/bin/pkg-config \\\n    TESSDATA_PREFIX=/usr/local/share/tessdata/\n\n# Additional Repos\nRUN \\\n      rpm --import https://download.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG \\\n  &&  dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm \\\n  &&  rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL \\\n  &&  rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8 \\\n  &&  dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\n\n# COMMON Packages & More Particular RPM Dependcies\nRUN \\\n      dnf install -y glibc-locale-source.x86_64 \\\n  &&  dnf install -y \\\n        zip \\\n        unzip \\\n        gzip \\\n        zlib \\\n        zlib-devel \\\n        git \\\n        git-lfs \\\n        make \\\n        automake \\\n        autoconf \\\n        libtool \\\n        gcc \\\n        gcc-c++ \\\n        gcc-gfortran \\\n        libpng \\\n        libpng-devel \\\n        libtiff \\\n        libtiff-devel \\\n        libjpeg-turbo \\\n        libjpeg-turbo-devel \\\n        python38 \\\n        python38-devel \\\n        python38-Cython \\\n        \"postgresql13\" \\\n        \"postgresql13-devel\" \\\n        libpq5-devel-13.4-42PGDG.rhel8 \\\n        openblas \\\n        openblas-threads \\\n        diffutils \\\n        file \\\n      && dnf clean all\n\nRUN \\\n    curl -LfSo /tmp/awscliv2.zip \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" \\\n    && echo \"[INFO] Installing AWS CLI ...\" && ( \\\n      unzip -q /tmp/awscliv2.zip -d /opt \\\n      &&  /opt/aws/install \\\n      &&  rm -f  /tmp/awscliv2.zip \\\n  ) 2>&1 1>/dev/null\n\n# OCRMYPDF REQS: https://ocrmypdf.readthedocs.io/en/v12.7.0/installation.html\n# ocrmypdf <- (compiled) tesseract 4.0+\n#          <- (compiled) jbig2enc 0.29+ <- (compiled) leptonica\n#          <- (skipped) unpaper 6.1+ (to support --clean flag...)\n#          <- (rpm) pngquant 2.5+\n#          <- (compiled) ghostscript 9.23+\n#          <- (compiled) qpdf 8.2.1\n\nRUN \\\n  git clone --depth 1 --branch \"release-qpdf-${QPDF_VERSION}\" https://github.com/qpdf/qpdf.git /opt/qpdf \\\n  && echo \"[INFO] Installing from source: QPDF ...\" && ( cd /opt/qpdf \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && ldconfig \\\n  2>&11>/dev/null)\n\n# leptonica - tesseract/jbig2enc dep\nRUN \\\n  git clone --depth 1 --branch \"${LEPTONICA_VERSION}\" https://github.com/danbloomberg/leptonica.git /opt/leptonica \\\n  && echo \"[INFO] Installing from source: LEPTONICA ...\" && ( cd /opt/leptonica \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && ldconfig \\\n  2>&11>/dev/null)\n\n# jbig2enc - optional ocrmypf/tesseract dep\nRUN \\\n      git clone --depth 1 --branch \"${JBIG2ENC_VERSION}\" https://github.com/agl/jbig2enc.git /opt/jbig2enc \\\n  &&  echo \"[INFO] Installing from source: JBIG2ENC ...\" && ( cd /opt/jbig2enc \\\n        && ./autogen.sh \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && make \\\n        && make install \\\n        && ldconfig \\\n      2>&11>/dev/null)\n\n# tesseract - ocrmypdf dep\nRUN \\\n      git clone --depth 1 --branch \"${TESSERACT_OCR_VERSION}\" https://github.com/tesseract-ocr/tesseract.git /opt/tesseract \\\n  &&  echo \"[INFO] Installing from source: TESSERACT-OCR ...\" && ( cd /opt/tesseract \\\n        && ./autogen.sh \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && make \\\n        && make install \\\n        && ldconfig \\\n      2>&11>/dev/null)\n\n# tesseract language packs - ocrmypdf dep\nRUN \\\n      echo \"[INFO] Installing language packs for TESSERACT-OCR ...\" && ( mkdir -p \"${TESSDATA_PREFIX}\" \\\n      && curl -f -L -o \"${TESSDATA_PREFIX}/eng.traineddata\" \\\n        \"https://github.com/tesseract-ocr/tessdata_fast/raw/${TESSERACT_OCR_LANGPACK_VERSION}/eng.traineddata\" \\\n      && curl -f -L -o \"${TESSDATA_PREFIX}/spa.traineddata\" \\\n        \"https://github.com/tesseract-ocr/tessdata_fast/raw/${TESSERACT_OCR_LANGPACK_VERSION}/spa.traineddata\")\n\n# ghostscript - ocrmypdf dep\nRUN \\\n      curl -f -L \\\n      \"https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs9550/ghostscript-${GHOSTSCRIPT_VERSION}.tar.gz\" \\\n        | tar -xz -C /opt \\\n      && echo \"[INFO] Installing from source: GHOSTSCRIPT ...\" && ( cd \"/opt/ghostscript-${GHOSTSCRIPT_VERSION}\" \\\n        && ./autogen.sh \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && make \\\n        && make install \\\n        && ldconfig \\\n      2>&11>/dev/null)\n\n#####\n## ## APP SETUP\n#####\n\n# non-root app USER/GROUP\nARG \\\n  APP_UID=1001 \\\n  APP_GID=1001\n\n# ensure user/group exists, formally\nRUN ( (getent group $APP_GID &> /dev/null) \\\n        || groupadd --system --gid $APP_GID app_default \\\n    ) && ( (getent passwd $APP_UID &> /dev/null) \\\n        || useradd --system --shell /sbin/nologin --gid $APP_GID --uid $APP_UID app_default \\\n    )\n\n# ensure key app directories\nENV APP_ROOT=\"/opt/app-root\"\nENV APP_VENV=\"${APP_ROOT}\"\nENV APP_VENV_CFG=\"${APP_VENV}/etc\"\nENV APP_SRC=\"${APP_ROOT}/src\"\n\nRUN \\\n  mkdir -p \\\n    \"${APP_ROOT}\" \\\n    \"${APP_VENV}\" \\\n    \"${APP_VENV_CFG}\" \\\n    \"${APP_SRC}\" \\\n  && chown -R \"${APP_UID}:${APP_GID}\" \\\n    \"${APP_ROOT}\" \\\n    \"${APP_VENV}\" \\\n    \"${APP_VENV_CFG}\" \\\n    \"${APP_SRC}\"\n\n# setup venv\nCOPY ./dev_tools/requirements/requirements.txt /tmp/requirements.txt\nRUN \\\n      python3 -m venv \"${APP_VENV}\" --prompt app-root \\\n  &&  \"${APP_VENV}/bin/python\" -m pip install --upgrade --no-cache-dir pip setuptools wheel \\\n  &&  \"${APP_VENV}/bin/python\" -m pip install --no-cache-dir -r /tmp/requirements.txt \\\n  &&  chown -R \"${APP_UID}:${APP_GID}\" \"${APP_VENV}\"\n\n# Entrypoint\nCOPY ./dev_tools/docker/k8s/entrypoint.sh /usr/bin/entrypoint\nRUN chmod a+rx \"/usr/bin/entrypoint\"\n\n# thou shall not root\nUSER $APP_UID:$APP_GID\n\nCOPY --chown=\"${APP_UID}:${APP_GID}\" ./ \"${APP_SRC}/\"\nWORKDIR \"${APP_SRC}\"\n\nENV \\\n    BASH_ENV=\"/usr/bin/entrypoint\" \\\n    ENV=\"/usr/bin/entrypoint\" \\\n    PROMPT_COMMAND=\". /usr/bin/entrypoint\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib/\"\n\nENTRYPOINT [ \"/usr/bin/entrypoint\" ]"
}