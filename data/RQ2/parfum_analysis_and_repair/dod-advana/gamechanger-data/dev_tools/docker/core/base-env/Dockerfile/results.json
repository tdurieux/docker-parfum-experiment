{
  "startTime": 1674255944497,
  "endTime": 1674255945571,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG MODEL_DATA_IMAGE=\"gamechanger/data/models:latest\"\nARG BASE_OS_IMAGE='centos:7'\n\nFROM $MODEL_DATA_IMAGE as models\nARG BASE_OS_IMAGE\n\nFROM $BASE_OS_IMAGE\n## running as root\nUSER root\n\n## shell for RUN cmd purposes\nSHELL [\"/bin/bash\", \"-c\"]\n\n# LOCALE (important for python, etc.)\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\n\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\n\n#####\n## ## SYS Package Setup\n#####\n\n# Python3 and Env Prereqs\nRUN yum update -y \\\n    && yum group install -y \"Development Tools\" \\\n    && yum install -y \\\n        wget \\\n        postgresql.x86_64 \\\n        postgresql-devel.x86_64 \\\n        python3.x86_64 \\\n        python3-devel.x86_64 \\\n        python3-pip.noarch \\\n        vim \\\n        https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.rpm \\\n        bzip2 \\\n        glibc.i686 \\\n        sudo \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum\n\n# Update base python setup packages\nRUN pip3 install --no-cache-dir --upgrade pip wheel setuptools\n\n# AWS CLI\nRUN curl -LfSo /tmp/awscliv2.zip \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" \\\n    && unzip -q /tmp/awscliv2.zip -d /opt \\\n    && /opt/aws/install\n\n# passless sudo to make things easier\nRUN sed -ri '/^\\s*%wheel/c\\%wheel ALL=(ALL) NOPASSWD: ALL' /etc/sudoers\n\n# JDK\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8.0-amazon-corretto\"\n\n#####\n## ## Python Package Env Prereqs\n#####\n\nRUN yum install -y \\\n        python-cffi \\\n        libffi-devel \\\n        cairo \\\n        pango \\\n        gdk-pixbuf2 \\\n        ghostscript \\\n        qpdf \\\n        libtiff-devel \\\n        libjpeg-turbo-devel \\\n        libpng-devel \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum\n\n\n#####\n## ## Other packages (for OCR)\n#####\n\nARG LEPTONICA_RPM_S3_URL=\"s3://advana-data-zone/bronze/gamechanger/package-approvals/ocr-20201106/leptonica-1.79.0-1.el7.x86_64.rpm\"\nARG TESSERACT_RPM_S3_URL=\"s3://advana-data-zone/bronze/gamechanger/package-approvals/ocr-20201106/tesseract-4.1.1-1.el7.x86_64.rpm\"\nRUN \\\n    mkdir /tmp/rpm-staging \\\n    && aws s3 cp \"$LEPTONICA_RPM_S3_URL\" /tmp/rpm-staging/leptonica.rpm \\\n    && rpm -i /tmp/rpm-staging/leptonica.rpm \\\n    && aws s3 cp \"$TESSERACT_RPM_S3_URL\" /tmp/rpm-staging/tesseract.rpm \\\n    && rpm -i /tmp/rpm-staging/tesseract.rpm \\\n    && rm -rf /tmp/rpm-staging\n\n#####\n## ## Python Package Setup\n#####\n\nARG BUILD_CTX_COMPREHENSIVE_REQS=\"./dev/requirements/gc-venv-current.txt\"\nARG LOCAL_REQS=\"/tmp/gc-venv-reqs.txt\"\nCOPY \"$BUILD_CTX_COMPREHENSIVE_REQS\" \"$LOCAL_REQS\"\n\nENV BASE_APP_VENV_PATH=\"/opt/gc-venv\"\nRUN python3 -m venv \"${BASE_APP_VENV_PATH}\" --copies\nRUN \"${BASE_APP_VENV_PATH}/bin/pip\" install --no-cache-dir --upgrade pip setuptools wheel\nRUN \"${BASE_APP_VENV_PATH}/bin/pip\" install --no-cache-dir --no-deps -r \"$LOCAL_REQS\"\n\n\n#####\n## ## ML Models\n#####\n\nRUN mkdir /data\nCOPY --from=models /data/models /data/models\nENV GC_ML_DEFAULT_TOPIC_MODEL_DIR=/data/models/topic_models\nENV GC_ML_API_MODEL_PARENT_DIR=/data/models\n\n#####\n## ## Entrypoint\n#####\n\n# same as for centos image (bash)"
}