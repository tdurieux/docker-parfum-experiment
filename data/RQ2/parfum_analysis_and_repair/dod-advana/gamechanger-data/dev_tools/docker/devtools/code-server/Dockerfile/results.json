{
  "startTime": 1674248027516,
  "endTime": 1674248028962,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 54,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 22,
        "columnEnd": 98
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 7,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "####\n ####\n  #### VS CODE SERVER - GC EDITION\n ####\n####\n\nARG BASE_IMAGE='centos:7'\nFROM $BASE_IMAGE\n\n## running as root\nUSER root\n\n## shell for RUN cmd purposes\nSHELL [\"/bin/bash\", \"-c\"]\n\n#####\n## ## Base Dev Package Setup\n#####\n\n# LOCALE (important for python, etc.)\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\n\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_CTYPE=\"en_US.UTF-8\" \\\n    LC_NUMERIC=\"en_US.UTF-8\" \\\n    LC_TIME=\"en_US.UTF-8\" \\\n    LC_COLLATE=\"en_US.UTF-8\" \\\n    LC_MONETARY=\"en_US.UTF-8\" \\\n    LC_MESSAGES=\"en_US.UTF-8\" \\\n    LC_PAPER=\"en_US.UTF-8\" \\\n    LC_NAME=\"en_US.UTF-8\" \\\n    LC_ADDRESS=\"en_US.UTF-8\" \\\n    LC_TELEPHONE=\"en_US.UTF-8\"\\\n    LC_MEASUREMENT=\"en_US.UTF-8\" \\\n    LC_IDENTIFICATION=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\n\n# Install EPEL & IUS repos\nRUN \\\n    curl -f -k -o /tmp/ius.rpm https://repo.ius.io/ius-release-el7.rpm \\\n    && curl -f -k -o /tmp/epel.rpm https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n    && yum install -y /tmp/ius.rpm \\\n    && yum install -y /tmp/epel.rpm \\\n    && rm -f /tmp/ius.rpm /tmp/epel.rpm && rm -rf /var/cache/yum\n\n# This is a dev img, we want the man pages\nRUN sed -i '/tsflags=nodocs/d' /etc/yum.conf\nRUN yum install -y man-db man-pages \\\n    && yum reinstall -y shadow-utils \\\n    && mandb && rm -rf /var/cache/yum\n\n# Various tools/prereqs\nRUN yum update -y \\\n    && yum group install -y \"Development Tools\" \\\n    && yum remove -y git \\\n    && yum install -y git224 \\\n    && yum install -y \\\n        wget \\\n        postgresql.x86_64 \\\n        postgresql-devel.x86_64 \\\n        python3.x86_64 \\\n        python3-devel.x86_64 \\\n        python3-pip.noarch \\\n        rpmdevtools.noarch \\\n        tmux \\\n        screen \\\n        openssl \\\n        openssh \\\n        vim \\\n        bzip2 \\\n        glibc.i686 \\\n        jq \\\n        zip \\\n        unzip \\\n        which \\\n        sudo \\\n        https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.rpm \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum \\\n    && mandb\n\n# JDK 11\nENV JAVA_HOME=\"/usr/lib/jvm/java\"\n\n# AWS CLI\nRUN curl -LfSo /tmp/awscliv2.zip \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" \\\n    && unzip -q /tmp/awscliv2.zip -d /opt \\\n    && /opt/aws/install \\\n    && rm -f /tmp/awscliv2.zip \\\n    && mandb\n\n# Git LFS extension\nRUN curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | sudo bash\n\n#####\n## ## Web & Crawler Tools\n#####\n\n# Node JS\nRUN curl -f -sL https://rpm.nodesource.com/setup_14.x | bash -\n\n# chrome browser\nCOPY dev/docker/gc_code_server/google-chrome.repo /etc/yum.repos.d/google-chrome.repo\nRUN \\\n    curl -f https://dl-ssl.google.com/linux/linux_signing_key.pub -o /tmp/google_key.pub \\\n        && rpm --import /tmp/google_key.pub \\\n        && rm /tmp/google_key.pub \\\n    && yum install google-chrome-stable -y \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum \\\n    && mandb\n\n# chrome driver\nRUN \\\n    wget -O /tmp/chromedriver.zip \\\n        https://chromedriver.storage.googleapis.com/$( curl -f -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)/chromedriver_linux64.zip \\\n    && unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/ \\\n    && chmod +x /usr/local/bin/chromedriver \\\n    && rm /tmp/chromedriver.zip\n\n#####\n## ## Container Utils\n#####\n\n# installing podman\nRUN curl -fsSL \\\n        -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo \\\n        https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_7/devel:kubic:libcontainers:stable.repo \\\n    && yum -y install podman \\\n    && mandb && rm -rf /var/cache/yum\n\n# installing docker utils\nRUN yum-config-manager \\\n        --add-repo \\\n        https://download.docker.com/linux/centos/docker-ce.repo \\\n    && yum install -y docker-ce-cli \\\n    && mandb && rm -rf /var/cache/yum\n\n# installing docker compose\nRUN curl -fsSL \\\n        -o /usr/local/bin/docker-compose \\\n        \"https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\" \\\n    && chmod +x /usr/local/bin/docker-compose\n\n# installing kubectl\nRUN KUBECTL_RELEASE=$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt) \\\n     && curl -fsSL \\\n        -o /usr/local/bin/kubectl \\\n        \"https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_RELEASE/bin/linux/amd64/kubectl\" \\\n     && chmod +x /usr/local/bin/kubectl\n\n#####\n## ## VS CODE SERVER SETUP\n#####\n\nENV CODE_SERVER_UID=1000\nENV CODE_SERVER_GID=1000\nENV CODE_SERVER_USER=coder\nENV CODE_SERVER_GROUP=coder\n\nRUN groupadd -g $CODE_SERVER_GID $CODE_SERVER_GROUP && \\\n    useradd -u $CODE_SERVER_UID -g $CODE_SERVER_GROUP -d /home/$CODE_SERVER_USER -s /bin/bash $CODE_SERVER_USER \\\n    && echo \"$CODE_SERVER_USER ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/nopasswd\n\n# script to fix uid's in mounted dirs\nRUN curl -fsSL \"https://github.com/boxboat/fixuid/releases/download/v0.5/fixuid-0.5-linux-amd64.tar.gz\" | tar -C /usr/local/bin -xzf - \\\n    && chown root:root /usr/local/bin/fixuid \\\n    && chmod 4755 /usr/local/bin/fixuid \\\n    && mkdir -p /etc/fixuid \\\n    && printf \"user: ${CODE_SERVER_USER}\\ngroup: ${CODE_SERVER_GROUP}\\n\" > /etc/fixuid/config.yml\n\n# and finally... installing code-server\nRUN yum install -y \\\n        https://github.com/cdr/code-server/releases/download/v3.7.4/code-server-3.7.4-amd64.rpm \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum\n\n# process reaper - to slay zombie children of vs-code server\nENV TINI_VERSION v0.19.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n\n# just to make sure bash shell is always the default\nRUN chsh -s /bin/bash\nENV SHELL=/bin/bash\n\n#####\n## ## DE env prereqs\n#####\n\nRUN yum install -y \\\n        python-cffi \\\n        libffi-devel \\\n        cairo \\\n        pango \\\n        gdk-pixbuf2 \\\n        ghostscript \\\n        qpdf \\\n        libtiff-devel \\\n        libjpeg-turbo-devel \\\n        libpng-devel \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum \\\n    && mandb\n\n\nARG LEPTONICA_RPM_S3_URL=\"s3://advana-data-zone/bronze/gamechanger/package-approvals/ocr-20201106/leptonica-1.79.0-1.el7.x86_64.rpm\"\nARG TESSERACT_RPM_S3_URL=\"s3://advana-data-zone/bronze/gamechanger/package-approvals/ocr-20201106/tesseract-4.1.1-1.el7.x86_64.rpm\"\nRUN \\\n    mkdir /tmp/rpm-staging \\\n    && aws s3 cp \"$LEPTONICA_RPM_S3_URL\" /tmp/rpm-staging/leptonica.rpm \\\n    && rpm -i /tmp/rpm-staging/leptonica.rpm \\\n    && aws s3 cp \"$TESSERACT_RPM_S3_URL\" /tmp/rpm-staging/tesseract.rpm \\\n    && rpm -i /tmp/rpm-staging/tesseract.rpm \\\n    && rm -rf /tmp/rpm-staging\n\n#####\n## ## DS env prereqs\n#####\n\nARG TRANSFORMER_CACHE_S3_URL=\"s3://data-tools-s3-2/transformer_models_v3/transformer_cache.zip\"\nRUN \\\n    aws s3 cp \"$TRANSFORMER_CACHE_S3_URL\" /tmp/cache.zip \\\n    && unzip /tmp/cache.zip -d / \\\n    && rm -f /tmp/cache.zip\n\nENV TRANSFORMER_CACHE=/transformer_cache/.cache/torch/transformers/\n\n#####\n## ## Code Server Plugins\n#####\n\n# This way, if someone sets $DOCKER_USER, docker-exec will still work as\n# the uid will remain the same. note: only relevant if -u isn't passed to\n# docker-run. Also, code server extensions get installed into user dir, so...\nUSER $CODE_SERVER_UID\n\nRUN \\\n       code-server --install-extension ms-python.python \\\n    && code-server --install-extension littlefoxteam.vscode-python-test-adapter \\\n    && code-server --install-extension donjayamanne.python-extension-pack \\\n    && code-server --install-extension ms-toolsai.jupyter \\\n    && code-server --install-extension pkief.material-icon-theme \\\n    && code-server --install-extension alefragnani.project-manager \\\n    && code-server --install-extension ms-azuretools.vscode-docker \\\n    && code-server --install-extension ms-kubernetes-tools.vscode-kubernetes-tools\n\n#####\n## ## Comprehensive GC Python Env\n#####\n\nUSER root\n\nCOPY \"./dev/requirements/gc-venv-current.txt\" \"/tmp/gc-venv-reqs.txt\"\n\n# Update base python setup packages\nRUN pip3 install --no-cache-dir --upgrade pip wheel setuptools \\\n    && pip3 install --no-cache-dir --no-deps -r \"/tmp/gc-venv-reqs.txt\"\n\n#####\n## ## Startup & Entrypoint Config\n#####\n\nUSER $CODE_SERVER_UID\n\n# additional env var, to setup git credentials\n## e.g. VAR=https://<bitbucket-username>:<bitbucket-token>@bitbucket.di2e.net\nENV BITBUCKET_USER_CREDENTIALS=\"\"\n\n# install entrypoint\nCOPY dev/docker/devtools/code-server/entrypoint.sh /usr/bin/entrypoint.sh\n\nEXPOSE 8080\n\nENV USER=${CODE_SERVER_USER}\nWORKDIR /home/${CODE_SERVER_USER}\n\nENTRYPOINT [\"/usr/bin/entrypoint.sh\", \"--disable-telemetry\", \"--disable-update-check\", \"--bind-addr\", \"0.0.0.0:8080\", \".\"]"
}