{
  "startTime": 1674251210684,
  "endTime": 1674251211188,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 15,
        "columnEnd": 39
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:10-alpine\n\nRUN apk add --no-cache --update\nRUN apk add --no-cache unzip\nRUN apk add --no-cache git\n\n# use changes to package.json to force Docker not to use the cache\n# when we change our application's nodejs dependencies:\nCOPY package.json /tmp/package.json\nRUN cd /tmp && npm install --production && npm cache clean --force;\nRUN mkdir -p /sample-koa-app && cp -a /tmp/node_modules /sample-koa-app\n\n# From here we load our application's code in, therefore the previous docker\n# \"layer\" that has been cached, will be used if possible\nWORKDIR /sample-koa-app\nCOPY . /sample-koa-app\n\nEXPOSE  80\n\nENTRYPOINT [ \"/bin/sh\", \"-c\", \"npm run start:env\" ]\n"
}