{
  "startTime": 1674220421881,
  "endTime": 1674220422526,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Usage:\n#\n# Note: if you're in Linux you need to run socker with 'sudo'.\n#   But honestly if you're on linux you should just save yourself\n#   gigabytes of downloads and disk space and build Espruino directly.\n#\n# 1: Build the container image\n#\n#   docker build . -t img_name\n#\n# 2: Run container image so it builds espruino\n#\n#   docker run -e BOARD='PICO_R1_3' --name container_name img_name\n#\n# This will run the container and save build results into the container's filesystem.\n# Near the end of the build the filename will be displayed, for example espruino_2v00_pico_1r3.bin\n#\n# 3: Copy build results from the container into your filesystem\n#\n#   docker cp container_name:espruino/espruino_2v00_pico_1r3.bin ./\n#\n\nFROM python:3\n\nCOPY . /espruino\nWORKDIR /espruino\n\n# Workaround add some stuff that the provision script uses\n# in here so it doesn't have to use sudo\nRUN apt-get update && apt-get install --no-install-recommends -qq -y python3-pip && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir pyserial\nRUN pip install --no-cache-dir nrfutil\n\n# This ensures ALL dependencies are installed beforehand\nRUN bash -c \"source scripts/provision.sh ALL\"\n\nENV RELEASE 1\nCMD [\"bash\", \"-c\", \"source scripts/provision.sh ALL && make\"]\n\n"
}