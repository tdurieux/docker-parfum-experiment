{
  "startTime": 1674250712895,
  "endTime": 1674250713703,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 0,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 0,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile uses multi-stage building to minimize size\n# while maintaining all necessary dependencies. The build\n# stage brings in dependencies necessary for building setsm\n# and then compiles the source code. The run stage brings the\n# executable created from the build stage into a new image and\n# includes required dependencies\n\n# Command Line arguments\nARG VERSION=16.04\nARG COMPILER=gnu\n\n# ------------- BUILD STAGE ------------- #\nFROM ubuntu:$VERSION as builder\n\n# Bring arguments in from command line\nARG COMPILER\nARG VERSION\n\n# Specify that the bash shell will be used\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Bring in dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libgeotiff-dev \\\n    libgeotiff[0-9]+ \\\n    g++ \\\n    git \\\n    ca-certificates \\\n    make \\\n    wget \\\n    gnupg2 \\\n    apt-transport-https \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install libproj-dev\nRUN apt-get update && apt-get install --no-install-recommends -y libproj-dev && rm -rf /var/lib/apt/lists/*;\n\n# Create file that holds compiler specific paths\nRUN touch /opt/compilerpath\n\n# If building Intel version, then install Intel compiler\nRUN if [ \"$COMPILER\" = 'intel' ]; then \\\n wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB; \\\napt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB; \\\nrm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB; \\\necho \"deb https://apt.repos.intel.com/oneapi all main\" | tee /etc/apt/sources.list.d/oneAPI.list; \\\napt-get update; \\\napt-get install --no-install-recommends -y intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic; rm -rf /var/lib/apt/lists/*; \\\nsource /opt/intel/oneapi/setvars.sh; \\\necho $PATH > /opt/compilerpath; \\\napt-cache pkgnames intel | grep libiomp; \\\necho **DONE**; \\\nfi\n\n# Change working directory to /opt\nWORKDIR /opt\n\n# Copy all files into /opt\nCOPY ./* /opt/\n\n# Update path and compiler\nENV PATH=\"/opt:${PATH}\"\nENV COMPILER=$COMPILER\n\n# Bring in compiler-specific paths, and then make the setsm executable\nRUN PATH=\"$(cat compilerpath):$PATH\"; make COMPILER=$COMPILER INCS=-I/usr/include/geotiff\n\n# ------------- RUN STAGE ------------- #\nFROM ubuntu:$VERSION as runner\n\n# Bring in dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        libgeotiff[0-9]+ \\\n        libgomp1 \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Make setsmdir and bring files into it\nRUN mkdir /opt/setsmdir\nCOPY --from=builder /opt/setsm /opt/setsmdir/\n\n# Update path\nENV PATH=\"/opt/setsmdir:${PATH}\"\n\n# When image is run, setsm is executed\nCMD setsm\n"
}