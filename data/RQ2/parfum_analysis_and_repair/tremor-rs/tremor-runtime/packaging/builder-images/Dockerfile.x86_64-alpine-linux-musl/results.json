{
  "startTime": 1674256048861,
  "endTime": 1674256049584,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 5,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 17,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# update the version here as needed\n# may bring updates to things like musl so proceed carefully.\n# via https://hub.docker.com/_/alpine\nFROM alpine:3.13.0\n\nRUN apk add --no-cache --update-cache \\\n\n    cmake make g++ \\\n\n    linux-headers \\\n\n    clang \\\n\n    openssl-dev openssl-libs-static\n\n# install patched rust from edge, for the specified version\nARG RUST_VERSION\nRUN apk add --no-cache --update-cache \\\n    --repository http://dl-cdn.alpinelinux.org/alpine/edge/community \\\n    --repository http://dl-cdn.alpinelinux.org/alpine/edge/main \\\n    # using apk's fuzzy version matching\n    # https://git.alpinelinux.org/apk-tools/commit/?id=693b4bcdb0f22904a521a7c8ac4f13e697dc4d71\n    \"cargo\" --repository http://dl-cdn.alpinelinux.org/alpine/edge/main \\\n    # using apk's fuzzy version matching\n    # https://git.alpinelinux.org/apk-tools/commit/?id=693b4bcdb0f22904a521a7c8ac4f13e697dc4d71\n    \"cargo\"\n\n# This doesn't work since we don't controle what version alpine offers, so we just grab the latest instead\n# \"cargo=~${RUST_VERSION}\"\n# alpine doesn't keep old package versions around (https://gitlab.alpinelinux.org/alpine/abuild/-/issues/9996)\n# so if the above strategy causes issues, we can opt for the below strategy.\n# Better to bump our project's rust version at that point though (unless\n# there's a strong reason not to).\n#\"cargo>=${RUST_VERSION}\"\n\n# only alpine's patched rustc has worked for succesful snmalloc musl builds\n# so installing rust this way does not quite work\n#\n#RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init.sh \\\n#    && sh rustup-init.sh -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION\n#    && rm rustup-init.sh\n#\n#ENV PATH=\"/root/.cargo/bin:${PATH}\"\n#\n#RUN rustup target add x86_64-unknown-linux-musl\n\nCOPY shared/entrypoint.sh /\nENTRYPOINT [ \"/entrypoint.sh\" ]\n"
}