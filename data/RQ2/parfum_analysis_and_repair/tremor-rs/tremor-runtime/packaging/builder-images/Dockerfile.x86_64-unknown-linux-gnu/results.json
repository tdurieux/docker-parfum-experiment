{
  "startTime": 1674255855275,
  "endTime": 1674255856206,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 18,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 127
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://hub.docker.com/_/centos\nFROM centos:7.9.2009\n\n# install extra software repos\nRUN yum install --assumeyes \\\n    centos-release-scl `# provides devtoolset-9*` \\\n    epel-release `# provides deps like cmake3 and clang` && rm -rf /var/cache/yum\n\n# get gcc9 via devtoolset-9, since gcc4 available from centos7 repos does not\n# work for compiling our dependencies like snmalloc\n# https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/9/html/9.0_release_notes/dts9.0_release\nRUN yum install --assumeyes devtoolset-9-gcc devtoolset-9-gcc-c++ make && rm -rf /var/cache/yum\n\n# install cmake3 and link it as cmake (cmake >=3.8.2 needed for snmalloc)\nRUN yum install --assumeyes cmake3 \\\n    && ln -s /usr/bin/cmake3 /usr/bin/cmake && rm -rf /var/cache/yum\n\n# install other system deps\nRUN yum install --assumeyes \\\n    llvm-toolset-7.0 `# for onig_sys (via the regex crate)` \\\n    devtoolset-9-libatomic-devel `# for snmalloc` \\\n    openssl-devel `# for dynamically linking against libssl1.0 (as part of openssl crate)` \\\n    perl `# for compiling & statically linking openssl (as part of openssl crate's vendored feature)` && rm -rf /var/cache/yum\n\n# for dynamically linking against libssl1.1 (as part of openssl crate)\n# centos7 has libssl1.0 by default and 1.1 is only available from epel\n#RUN yum install --assumeyes openssl11-devel\n## set variables utilized by rust openssl crate so that it knows to link against\n## libssl1.1 (default in centos7 is libssl1.0)\n## https://docs.rs/openssl/*/openssl/#manual\n#ENV OPENSSL_INCLUDE_DIR=/usr/include/openssl11 \\\n#    OPENSSL_LIB_DIR=/usr/lib64/openssl11\n\n# claim back some space\nRUN yum clean all\n\n# install rust\n# this is not needed right now since we are using this image from cross and\n# it already shares rust from the host to the image container. also saves us\n# from needing to update this image to keep up with rust version releases.\n#\n# TODO the cargo bin path is also not readable by cross docker user\n#ARG RUST_VERSION\n#RUN curl --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init.sh \\\n#    && sh rustup-init.sh -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION \\\n#    && rm rustup-init.sh\n#ENV PATH=\"/root/.cargo/bin:${PATH}\"\n\nCOPY shared/entrypoint.sh /\nENTRYPOINT [ \"/entrypoint.sh\" ]\n"
}