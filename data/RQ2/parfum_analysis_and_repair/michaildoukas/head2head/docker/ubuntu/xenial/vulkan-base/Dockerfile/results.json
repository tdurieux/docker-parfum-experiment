{
  "startTime": 1674249041929,
  "endTime": 1674249042919,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 7,
        "columnEnd": 88
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 4,
        "columnEnd": 233
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 294,
        "lineEnd": 294,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 110,
        "lineEnd": 124,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 155,
        "lineEnd": 157,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "# edowson/vulkan-base/cudagl:$BUILD_VERSION-$CUDA_MAJOR_VERSION-xenial\n\nARG REPOSITORY\nARG TAG\nFROM ${REPOSITORY}:${TAG}\n\n# setup environment variables\nENV container docker\nENV NVIDIA_VISIBLE_DEVICES ${NVIDIA_VISIBLE_DEVICES:-all}\nENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}display,graphics,utility\n\n# set the locale\nENV LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8 \\\n    LANGUAGE=C.UTF-8\n\n# Install packages (TODO:remove)\n#RUN apt-get update && apt-get install -y rsync htop git openssh-server\n#RUN apt-get update && apt-get install -y software-properties-common\n\n# install packages\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -q -y \\\n    dirmngr \\\n    gnupg2 \\\n    lsb-release \\\n    && rm -rf /var/lib/apt/lists/*\n\n# setup keys: llvm\nARG LLVM_VERSION\nRUN if [ -n \"$LLVM_VERSION\" ]; then \\\n     echo \"importing gpg keys for llvm apt repository\" ;\\\n     apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 6084F3CF814B57C1CF12EFD515CF4D18AF4F7421 ;\\\n    fi\n\n# setup sources.list\nRUN echo \"deb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs) main restricted \\n\\\ndeb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs)-updates main restricted \\n\\\ndeb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs)-backports main restricted universe multiverse \\n\\\ndeb-src http://security.ubuntu.com/ubuntu $(lsb_release -cs)-security main restricted\" \\\n    > /etc/apt/sources.list.d/official-source-repositories.list \\\n    && if [ -n \"$LLVM_VERSION\" ]; then \\\n        echo \"setting up sources.list for llvm-toolchain-$LLVM_VERSION\" ;\\\n        echo \"deb http://apt.llvm.org/`lsb_release -sc`/ llvm-toolchain-`lsb_release -sc`-$LLVM_VERSION main\" \\\n        > \"/etc/apt/sources.list.d/llvm-toolchain-$LLVM_VERSION.list\" ;\\\n       fi\n\n# install build tools\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive TERM=linux apt-get install --no-install-recommends -q -y \\\n    apt-transport-https \\\n    apt-utils \\\n    bash-completion \\\n    build-essential \\\n    bzip2 \\\n    ca-certificates \\\n    curl \\\n    gconf2 \\\n    gconf-service \\\n    gdb \\\n    git-core \\\n    git-gui \\\n    gvfs-bin \\\n    inetutils-ping \\\n    nano \\\n    net-tools \\\n    pkg-config \\\n    pulseaudio-utils \\\n    rsync \\\n    shared-mime-info \\\n    software-properties-common \\\n    sudo \\\n    tzdata \\\n    unzip \\\n    wget \\\n    xdg-user-dirs \\\n    xdg-utils \\\n    x11-xserver-utils \\\n    zip \\\n    # install git-lfs \\\n    && curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n    && DEBIAN_FRONTEND=noninteractive TERM=linux apt-get install --no-install-recommends -q -y \\\n    git-lfs \\\n    # install llvm-toolchain\n    && if [ -n \"$LLVM_VERSION\" ]; then \\\n        echo \"installing llvm-toolchain-$LLVM_VERSION\" ;\\\n        # install llvm-toolchain\n        DEBIAN_FRONTEND=noninteractive TERM=linux apt-get install --no-install-recommends -q -y \\\n        clang-$LLVM_VERSION \\\n        clang-format-$LLVM_VERSION \\\n        lld-$LLVM_VERSION \\\n        lldb-$LLVM_VERSION \\\n        llvm-$LLVM_VERSION \\\n        llvm-$LLVM_VERSION-dev ;\\\n        # configure update update-alternatives \\\n        update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-$LLVM_VERSION 100 ;\\\n        update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-$LLVM_VERSION   100 ;\\\n        update-alternatives --install /usr/bin/ld.lld  ld.lld  /usr/bin/ld.lld-$LLVM_VERSION  100 ;\\\n        update-alternatives --install /usr/bin/lldb    lldb    /usr/bin/lldb-$LLVM_VERSION    100 ;\\\n       else \\\n        echo \"llvm-toolchain not specified, not installing llvm.\" ;\\\n       fi \\\n    # perform dist-upgrade: dist-upgrade in addition to performing the function of upgrade,\n    # also intelligently handles changing dependencies with new versions of packages\n    && DEBIAN_FRONTEND=noninteractive TERM=linux apt-get dist-upgrade --no-install-recommends -q -y \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# install required libraries\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive TERM=linux apt-get --no-install-recommends install -q -y \\\n    libasound2-dev \\\n    libglm-dev \\\n    libmirclient-dev \\\n    libpciaccess0 \\\n    libpng-dev \\\n    libwayland-dev \\\n    libxcb-ewmh-dev \\\n    libxcb-dri3-0 \\\n    libxcb-dri3-dev \\\n    libxcb-glx0 \\\n    libxcb-present0 \\\n    libxcb-keysyms1-dev \\\n    libx11-dev \\\n    libxrandr-dev \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install python3.7\nRUN add-apt-repository ppa:deadsnakes/ppa\nRUN apt-get update && apt-get install --no-install-recommends -y python3.7 && rm -rf /var/lib/apt/lists/*;\n\n# Set python3.7 to default python3\nRUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1\n\n# Make python point to python3\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\n# Install pip\nRUN apt-get install --no-install-recommends python3-pip -y && rm -rf /var/lib/apt/lists/*;\nRUN pip3 install --no-cache-dir --upgrade pip\n\n# install cudnn libraries\nARG CUDA_MAJOR_VERSION\nARG CUDNN_VERSION\nENV CUDA_MAJOR_VERSION $CUDA_MAJOR_VERSION\nENV CUDNN_VERSION $CUDNN_VERSION\nLABEL com.nvidia.cudnn.version=\"$CUDNN_VERSION\"\nRUN CUDA_MAJOR_VERSION=`echo $CUDA_VERSION | cut -d. -f1` \\\n    && CUDA_MINOR_VERSION=`echo $CUDA_VERSION | cut -d. -f2` \\\n    && CUDNN_MAJOR_VERSION=`echo $CUDNN_VERSION | cut -d. -f1` \\\n    && echo \"CUDA_VERSION=$CUDA_MAJOR_VERSION.$CUDA_MINOR_VERSION\" \\\n    && echo \"CUDNN_VERSION=$CUDNN_VERSION\" \\\n    && echo \"CUDNN_MAJOR_VERSION=$CUDNN_MAJOR_VERSION\" \\\n    && apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive TERM=linux apt-get --no-install-recommends install -q -y \\\n    libcudnn$CUDNN_MAJOR_VERSION=$CUDNN_VERSION-1+cuda$CUDA_MAJOR_VERSION.$CUDA_MINOR_VERSION \\\n    libcudnn$CUDNN_MAJOR_VERSION-dev=$CUDNN_VERSION-1+cuda$CUDA_MAJOR_VERSION.$CUDA_MINOR_VERSION \\\n    && apt-mark hold libcudnn$CUDNN_MAJOR_VERSION \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# install cmake\nARG CMAKE_VERSION=3.14\nRUN wget -qO- \"https://cmake.org/files/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.0-Linux-x86_64.tar.gz\" | \\\n  tar --strip-components=1 -xz -C /usr/local\n\n# install vulkan sdk\nARG BUILD_VERSION\nARG VULKAN_SDK_VERSION\nENV VULKAN_SDK_VERSION=$VULKAN_SDK_VERSION\nRUN echo \"downloading Vulkan SDK $VULKAN_SDK_VERSION\" \\\n    && wget -q --show-progress --progress=bar:force:noscroll https://sdk.lunarg.com/sdk/download/$VULKAN_SDK_VERSION/linux/vulkansdk-linux-$VULKAN_SDK_VERSION.tar.gz?Human=true -O /tmp/vulkansdk-linux-x86_64-$VULKAN_SDK_VERSION.tar.gz \\\n    && echo \"installing Vulkan SDK $VULKAN_SDK_VERSION\" \\\n    && mkdir -p /opt/vulkan \\\n    && tar -xf /tmp/vulkansdk-linux-x86_64-$VULKAN_SDK_VERSION.tar.gz -C /opt/vulkan \\\n    && rm /tmp/vulkansdk-linux-x86_64-$VULKAN_SDK_VERSION.tar.gz\n\n# install nvidia driver\nARG NVIDIA_DRIVER_VERSION\nENV NVIDIA_DRIVER_VERSION $NVIDIA_DRIVER_VERSION\nRUN wget -q --show-progress --progress=bar:force:noscroll https://us.download.nvidia.com/XFree86/Linux-x86_64/$NVIDIA_DRIVER_VERSION/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION.run -O /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION.run \\\n    && cd /tmp \\\n    && sh NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION.run --extract-only \\\n    && cp /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION/libnvidia-cbl.so.$NVIDIA_DRIVER_VERSION /usr/lib/x86_64-linux-gnu/ \\\n    && cp /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION/libnvidia-glvkspirv.so.$NVIDIA_DRIVER_VERSION /usr/lib/x86_64-linux-gnu/ \\\n    && cp /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION/libnvidia-rtcore.so.$NVIDIA_DRIVER_VERSION /usr/lib/x86_64-linux-gnu/ \\\n    && rm -rf /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION /tmp/NVIDIA-Linux-x86_64-$NVIDIA_DRIVER_VERSION.run\n\n# install packages and libraries for jetbrains ide\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive TERM=linux apt-get install --no-install-recommends -q -y \\\n    # java jdk \\\n    openjdk-8-jdk \\\n    # gtk support \\\n    libcanberra-gtk-module \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# create user\nARG USER\nARG UID\n\nENV HOME /home/$USER\nRUN adduser $USER --uid $UID --disabled-password --gecos \"\" \\\n    && usermod -aG audio,video $USER \\\n    && echo \"$USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n# copy configuration files\nCOPY docker/ubuntu/xenial/vulkan-base/config/etc/asound.conf /etc/asound.conf\nCOPY docker/ubuntu/xenial/vulkan-base/config/etc/pulse/client.conf /etc/pulse/client.conf\nCOPY docker/ubuntu/xenial/vulkan-base/config/etc/resolv.conf /etc/resolv.conf\n\n# setup nvidia opengl and vulkan driver icds\n#COPY docker/ubuntu/xenial/vulkan-base/config/vendor/egl_nvidia_icd.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json\nCOPY docker/ubuntu/xenial/vulkan-base/config/vendor/glx_nvidia_icd.json /usr/share/vulkan/icd.d/nvidia_icd.json\n\n# switch to non-root user\nUSER $USER\n\n# set the working directory\nWORKDIR $HOME\n\n# install conda\nARG CONDA_PYTHON_VERSION\nARG CONDA_BASE_PACKAGE\nARG CONDA_VERSION\nENV CONDA_PYTHON_VERSION $CONDA_PYTHON_VERSION\nENV CONDA_BASE_PACKAGE $CONDA_BASE_PACKAGE\nENV CONDA_VERSION $CONDA_VERSION\nRUN CONDA_BASE_PACKAGE_NAME=`echo $CONDA_BASE_PACKAGE | sed -r 's/\\<./\\U&/g'` \\\n    && OS=`uname -s` \\\n    && ARCH=`uname -m` \\\n    && CONDA_INSTALL_PACKAGE=$CONDA_BASE_PACKAGE_NAME$CONDA_PYTHON_VERSION-$CONDA_VERSION-$OS-$ARCH.sh \\\n    && echo \"installing $CONDA_INSTALL_PACKAGE\" \\\n    && if [ $CONDA_BASE_PACKAGE_NAME = 'Anaconda' ]; then \\\n         wget -q --show-progress --progress=bar:force:noscroll https://repo.anaconda.com/archive/$CONDA_INSTALL_PACKAGE -O /tmp/$CONDA_BASE_PACKAGE.sh ;\\\n       fi \\\n    && if [ $CONDA_BASE_PACKAGE_NAME = 'Miniconda' ]; then \\\n         wget -q --show-progress --progress=bar:force:noscroll https://repo.continuum.io/miniconda/$CONDA_INSTALL_PACKAGE -O /tmp/$CONDA_BASE_PACKAGE.sh ;\\\n       fi \\\n    && bash /tmp/$CONDA_BASE_PACKAGE.sh -b -p $HOME/$CONDA_BASE_PACKAGE$CONDA_PYTHON_VERSION \\\n    && rm /tmp/$CONDA_BASE_PACKAGE.sh\n\n# labels\nLABEL org.label-schema.schema-version=\"1.0\"\nLABEL org.label-schema.name=\"edowson/vulkan-base/cudagl:$BUILD_VERSION-$CUDA_MAJOR_VERSION-xenial\"\nLABEL org.label-schema.description=\"Vulkan SDK $BUILD_VERSION with NVIDIA CUDA-$CUDA_VERSION CUDNN-$CUDNN_VERSION - Ubuntu-16.04.\"\nLABEL org.label-schema.version=$BUILD_VERSION\nLABEL org.label-schema.docker.cmd=\"xhost +local:root \\\ndocker run -it \\\n  --runtime=nvidia \\\n  --device /dev/snd \\\n  -e DISPLAY \\\n  -e PULSE_SERVER=tcp:$HOST_IP:4713 \\\n  -e PULSE_COOKIE_DATA=`pax11publish -d | grep --color=never -Po '(?<=^Cookie: ).*'` \\\n  -e QT_GRAPHICSSYSTEM=native \\\n  -e QT_X11_NO_MITSHM=1 \\\n  -v /dev/shm:/dev/shm \\\n  -v /etc/localtime:/etc/localtime:ro \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  -v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro \\\n  -v ${XDG_RUNTIME_DIR}/pulse/native:/run/user/1000/pulse/native \\\n  -v ~/mount/backup:/backup \\\n  -v ~/mount/data:/data \\\n  -v ~/mount/project:/project \\\n  -v ~/mount/tool:/tool \\\n  --rm \\\n  --name vulkan-base-cudagl-$BUILD_VERSION-$CUDA_MAJOR_VERSION-xenial \\\n  edowson/vulkan-base/cudagl:$BUILD_VERSION-$CUDA_MAJOR_VERSION-xenial \\\nxhost -local:root\"\n\n# update .bashrc\nRUN echo \\\n'CUDA=\"/usr/local/cuda-${CUDA_MAJOR_VERSION}\"\\n\\\nexport PS1=\"${debian_chroot:+($debian_chroot)}\\u:\\W\\$ \"\\n\\\nexport VULKAN_SDK=\"/opt/vulkan/${VULKAN_SDK_VERSION}/x86_64\"\\n\\\nexport VK_LAYER_PATH=\"${VULKAN_SDK}/etc/explicit_layer.d\"\\n\\\nexport LD_LIBRARY_PATH=\"${VULKAN_SDK}/lib:${CUDA}/lib64:${CUDA}/extras/CUPTI/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\"\\n\\\nexport PATH=\"${HOME}/bin:${VULKAN_SDK}/bin:${CUDA}/bin${PATH:+:${PATH}}\"\\n' \\\n    >> $HOME/.bashrc\n\nCOPY docker/ubuntu/xenial/vulkan-base/libm.so.6 /lib/x86_64-linux-gnu\nCOPY conda-env.txt /tmp\n\nRUN $HOME/$CONDA_BASE_PACKAGE$CONDA_PYTHON_VERSION/bin/conda init bash\n\n# update .condarc\nRUN $HOME/$CONDA_BASE_PACKAGE$CONDA_PYTHON_VERSION/bin/conda config --set auto_activate_base false \\\n    && $HOME/$CONDA_BASE_PACKAGE$CONDA_PYTHON_VERSION/bin/conda config --add envs_dirs ~/.conda/env \\\n    && $HOME/$CONDA_BASE_PACKAGE$CONDA_PYTHON_VERSION/bin/conda config --add pkgs_dirs ~/.conda/pkgs \\\n    && $HOME/$CONDA_BASE_PACKAGE$CONDA_PYTHON_VERSION/bin/conda config --add channels anaconda \\\n    && $HOME/$CONDA_BASE_PACKAGE$CONDA_PYTHON_VERSION/bin/conda install --file /tmp/conda-env.txt\n\nRUN pip install --no-cache-dir dlib insightface mxnet-cu92 facenet-pytorch --no-warn-script-location\n\nRUN echo 'conda activate base \\n' >> $HOME/.bashrc\n"
}