{
  "startTime": 1674250697794,
  "endTime": 1674250698550,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ---------------------------------------------------------------------\n# Building this Dockerfile will create an image that contains the\n# render-ws-java-client java archive and the run_ws_client.sh script\n# to facilitate running Render Web Services Java clients in a container.\n#\n# Look at the docker-build-render-ws-java-client.sh script (in this directory) to see\n# how the docker build is typically invoked.\n\n# ---------------------------------------------------------------------\n# Stage 1: Create builder image that will contain all code and build artifacts.\n#\n# NOTE: I originally tried basing this off of https://hub.docker.com/r/janeliascicomp/builder\n#       but that alpine image is missing stuff needed for render tests to succeed\n#       so I switched to use the same zulu image used for the final image\n#       rather than try to debug alpine issues.\n\nFROM azul/zulu-openjdk-debian:8 as builder\n\nRUN apt-get update && apt-get install --no-install-recommends -y git maven && rm -rf /var/lib/apt/lists/*;\n\nARG GIT_TAG=master\nARG GIT_COMMIT=latest\n\n# Checkout and build the code ...\n#\n# NOTES:\n#   avoid --depth 1 option for git since that breaks some of the build\n#   use mvn --batch_mode to reduce output during build\n#   use mvn --projects and --also-make to build only the client module and its dependent modules\nWORKDIR /tmp/render\nRUN git clone --branch $GIT_TAG https://github.com/saalfeldlab/render.git . \\\n    && mvn package --batch-mode --projects render-ws-java-client --also-make\n\n# ---------------------------------------------------------------------\n# Stage 2: Create slimmed down final image that only contains client jar and scripts.\n\nFROM azul/zulu-openjdk-debian:8\n\n# ARGs need to be re-declared for each stage in multi-stage builds - who knew?\nARG GIT_COMMIT\n\n# Add labels to image to help folks who need to figure out what they are running later.\n\n# See https://github.com/opencontainers/image-spec/blob/main/annotations.md for these \"standard\" labels.\nLABEL org.opencontainers.image.title=\"Render Web Services Java Clients\"\nLABEL org.opencontainers.image.description=\"Invoke packaged java clients for render web services\"\nLABEL org.opencontainers.image.authors=\"trautmane@janelia.hhmi.org\"\nLABEL org.opencontainers.image.source=\"https://github.com/saalfeldlab/render.git\"\nLABEL org.opencontainers.image.revision=\"$GIT_COMMIT\"\n\n# Full URL to the Dockerfile used to build image is really helpful - should be part of standard!\nLABEL org.janelia.build.dockerfile=\"https://github.com/saalfeldlab/render/blob/$GIT_COMMIT/render-ws-java-client/Dockerfile\"\nLABEL org.janelia.build.entrypoint=\"https://github.com/saalfeldlab/render/blob/$GIT_COMMIT/render-ws-java-client/src/main/scripts/run_ws_client.sh\"\n\n# Fix for this error: https://github.com/tianon/docker-brew-debian/issues/45 (not sure if this is needed, but doesn't hurt)\nRUN echo \"LC_ALL=en_US.UTF-8\" >> /etc/environment \\\n    && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n    && echo \"LANG=en_US.UTF-8\" > /etc/locale.conf \\\n    && locale-gen en_US.UTF-8\n\n# Maintaining legacy (source) path structure helps keep compatibility with older tools that depend upon it.\nCOPY --from=builder /tmp/render/render-ws-java-client/target/render-ws-java-client-*-standalone.jar /render/render-ws-java-client/target/\nCOPY --from=builder /tmp/render/render-ws-java-client/src/main/scripts /render/render-ws-java-client/src/main/scripts\n\nENTRYPOINT [ \"/render/render-ws-java-client/src/main/scripts/run_ws_client.sh\"]\n"
}