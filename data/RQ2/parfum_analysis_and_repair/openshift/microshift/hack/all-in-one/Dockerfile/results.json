{
  "startTime": 1674217986457,
  "endTime": 1674217987208,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 25,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 8,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 190
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 232
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 178
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 74,
        "columnEnd": 150
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 6,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile should not be run directly. Instead, run ./build-aio-dev.sh\nARG IMAGE_NAME=registry.access.redhat.com/ubi8/ubi-init:8.4\nFROM ${IMAGE_NAME}\nARG ARCH\nARG HOST=rhel8\nARG CPU\nUSER root\n\n# If from source, expect microshift binary in current directory\nRUN if [ \"$FROM_SOURCE\" == \"true\" ];then \\\n        mv microshift /usr/local/bin/microshift; \\\n    else \\\n        export VERSION=$( curl -f -s https://api.github.com/repos/openshift/microshift/releases | grep tag_name | head -n 1 | cut -d '\"' -f 4) && \\\n        curl -f -LO https://github.com/openshift/microshift/releases/download/$VERSION/microshift-linux-${ARCH} && \\\n        mv microshift-linux-${ARCH} /usr/local/bin/microshift; \\\n     fi\n\nRUN chmod 755 /usr/local/bin/microshift\n\n# files copied from packaging/images/microshift-aio in ./build-aio-dev.sh\nCOPY unit /usr/lib/systemd/system/microshift.service\nCOPY kubelet-cgroups.conf /etc/systemd/system.conf.d/kubelet-cgroups.conf\nCOPY crio-bridge.conf /etc/cni/net.d/100-crio-bridge.conf\n\nRUN export VERSION=1.20 && \\\n    export OS=CentOS_8_Stream && \\\n    curl -f -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/devel:kubic:libcontainers:stable.repo && \\\n    curl -f -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo\n\nRUN dnf install -y cri-o \\\n        cri-tools \\\n        iproute \\\n        procps-ng && \\\n    dnf clean all\n\nRUN curl -f -LO \"https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/${ARCH}/kubectl\" && \\\n    chmod +x ./kubectl && \\\n    mv ./kubectl /usr/local/bin/kubectl && \\\n    sed -i 's|/usr/libexec/crio/conmon|/usr/bin/conmon|' /etc/crio/crio.conf && \\\n    systemctl enable microshift.service && \\\n    systemctl enable crio\n\nRUN curl -f -s -L https://nvidia.github.io/nvidia-docker/rhel8.3/nvidia-docker.repo | tee /etc/yum.repos.d/nvidia-docker.repo && \\\n    dnf install nvidia-container-toolkit -y\n\nRUN if [ \"$HOST\" == \"rhel8\" ];then  \\\n      dnf install -y iptables; \\\n    else \\\n      yum install -y libnetfilter_conntrack libnfnetlink && \\\n      rpm -v -i --force https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/28/Everything/${CPU}/os/Packages/i/iptables-libs-1.6.2-2.fc28.${CPU}.rpm \\\n                   https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/28/Everything/${CPU}/os/Packages/i/iptables-1.6.2-2.fc28.${CPU}.rpm && \\\n      sed -e '/mountopt/s/,\\?metacopy=on,\\?//' -i /etc/containers/storage.conf; rm -rf /var/cache/yum \\\n    fi\n\nCOPY nvidia-config.toml /etc/nvidia-container-runtime/config.toml\n\nCMD [ \"/sbin/init\" ]\n"
}