{
  "startTime": 1674215229627,
  "endTime": 1674215231595,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 83,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 82,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "#FROM debian:testing\nFROM debian:oldstable\n\nLABEL maintainer=\"http://www.halclark.ca\" \\\n      description=\"DICOMautomaton Debian fuzz tester.\"\n\n\nWORKDIR /scratch_base\nCOPY docker/build_bases/debian_oldstable /scratch_base\nCOPY . /dcma\n\n\n\n# Install build dependencies.\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update --yes && \\\n    apt-get install --yes --no-install-recommends \\\n      git \\\n      cmake \\\n      make \\\n      g++ \\\n      vim \\\n      ncurses-term \\\n      gdb \\\n      rsync \\\n      wget \\\n      ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --yes --no-install-recommends \\\n    ` # Ygor dependencies ` \\\n        libboost-dev \\\n        libgsl-dev \\\n        libeigen3-dev \\\n    ` # DICOMautomaton dependencies ` \\\n        libeigen3-dev \\\n        libboost-dev libboost-filesystem-dev libboost-iostreams-dev libboost-program-options-dev libboost-thread-dev \\\n        libz-dev libsfml-dev \\\n        libsdl2-dev libglew-dev \\\n        libjansson-dev \\\n        libpqxx-dev postgresql-client \\\n        libcgal-dev \\\n        libnlopt-dev \\\n        libnlopt-cxx-dev \\\n        libasio-dev \\\n        fonts-freefont-ttf fonts-cmu \\\n        freeglut3 freeglut3-dev libxi-dev libxmu-dev \\\n        gnuplot zenity \\\n        patchelf bash-completion \\\n    ` # Additional dependencies for headless OpenGL rendering with SFML ` \\\n        x-window-system mesa-utils \\\n        xserver-xorg-video-dummy x11-apps \\\n    ` # Fuzzing tools ` \\\n        afl-clang && rm -rf /var/lib/apt/lists/*;\n\nRUN cp /scratch_base/xpra-xorg.conf /etc/X11/xorg.conf\n\n# Tweak the fuzzer settings.\nENV AFL_HARDEN 1\n#ENV AFL_USE_ASAN 1\n#ENV AFL_USE_MSAN 1\nENV AFL_QUIET 1\nENV AFL_SKIP_CPUFREQ 1\n\n# Install Wt from source to get around outdated and buggy Debian package.\n#\n# Note: Add additional dependencies if functionality is needed -- this is a basic install.\n#\n# Note: Could also install build-deps for the distribution packages, but the dependencies are not\n#       guaranteed to be stable (e.g., major version bumps).\nWORKDIR /wt\nRUN git clone https://github.com/emweb/wt.git . && \\\n    mkdir -p build && cd build && \\\n    cmake -E env CC=afl-clang CXX=afl-clang++ \\\n      cmake -DCMAKE_INSTALL_PREFIX=/usr ../ && \\\n    JOBS=$(nproc) && \\\n    JOBS=$(( $JOBS < 8 ? $JOBS : 8 )) && \\\n    make -j \"$JOBS\" VERBOSE=1 && \\\n    make install && \\\n    make clean\n\nWORKDIR /scratch_base\nRUN apt-get install --yes --no-install-recommends \\\n    -f ./libwt-dev_10.0_all.deb ./libwthttp-dev_10.0_all.deb && rm -rf /var/lib/apt/lists/*;\n\n\n# Install Ygor.\n#\n# Option 1: install a binary package.\n#WORKDIR /scratch\n#RUN apt-get install --yes -f ./Ygor*deb\n#\n# Option 2: clone the latest upstream commit.\nWORKDIR /ygor\nRUN git clone https://github.com/hdclark/Ygor . && \\\n    mkdir -p build && cd build && \\\n    cmake -E env CC=afl-clang CXX=afl-clang++ \\\n      cmake -DCMAKE_INSTALL_PREFIX=/usr ../ && \\\n    JOBS=$(nproc) && \\\n    JOBS=$(( $JOBS < 8 ? $JOBS : 8 )) && \\\n    make -j \"$JOBS\" VERBOSE=1 && \\\n    make package && \\\n    apt-get install --no-install-recommends --yes -f ./*deb && \\\n    make clean && rm -rf /var/lib/apt/lists/*;\n\n\n# Install Explicator.\n#\n# Option 1: install a binary package.\n#WORKDIR /scratch\n#RUN apt-get install --yes -f ./Explicator*deb\n#\n# Option 2: clone the latest upstream commit.\nWORKDIR /explicator\nRUN git clone https://github.com/hdclark/explicator . && \\\n    mkdir -p build && cd build && \\\n    cmake -E env CC=afl-clang CXX=afl-clang++ \\\n      cmake -DCMAKE_INSTALL_PREFIX=/usr ../ && \\\n    JOBS=$(nproc) && \\\n    JOBS=$(( $JOBS < 8 ? $JOBS : 8 )) && \\\n    make -j \"$JOBS\" VERBOSE=1 && \\\n    make package && \\\n    apt-get install --no-install-recommends --yes -f ./*deb && \\\n    make clean && rm -rf /var/lib/apt/lists/*;\n\n\n# Install YgorClustering.\nWORKDIR /ygorcluster\nRUN git clone https://github.com/hdclark/YgorClustering . && \\\n    ./compile_and_install.sh -b build\n\n\n# Install DICOMautomaton.\n#\n# Option 1: install a binary package.\n#WORKDIR /scratch\n#RUN apt-get install --yes -f ./DICOMautomaton*deb\n#\n# Option 2: clone the latest upstream commit.\n#WORKDIR /dcma\n#RUN git clone https://github.com/hdclark/DICOMautomaton . && \\\n#   ...\n#\n# Option 3: use the working directory.\nWORKDIR /dcma\nRUN mkdir -p build && \\\n    cd build && \\\n    cmake -E env CC=afl-clang CXX=afl-clang++ CXXFLAGS=\" -DDCMA_FUZZ_TESTING \" \\\n      cmake \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n        -DCMAKE_INSTALL_SYSCONFDIR=/etc \\\n        ../ && \\\n    JOBS=$(nproc) && \\\n    JOBS=$(( $JOBS < 8 ? $JOBS : 8 )) && \\\n    make -j \"$JOBS\" VERBOSE=1 dicomautomaton_dispatcher && \\\n    make package dicomautomaton_dispatcher && \\\n    apt-get install --no-install-recommends --yes -f ./*deb && \\\n    make clean && rm -rf /var/lib/apt/lists/*;\n\n\n"
}