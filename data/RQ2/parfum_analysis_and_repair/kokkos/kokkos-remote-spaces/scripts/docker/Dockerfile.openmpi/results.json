{
  "startTime": 1674255840323,
  "endTime": 1674255841265,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 14,
        "columnStart": 44,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 14,
        "columnStart": 44,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04                                                                                                                                                                                                                           \n\nENV DEBIAN_FRONTEND=noninteractive                                                                                                                                                                                                          \nRUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    wget \\\n    git \\\n    bc \\\n    ninja-build \\\n    git \\\n    libev-dev \\\n    libevent-dev \\\n    libhwloc-dev \\\n    pkg-config \\\n    clang-format-8 \\\n    && \\\n    apt-get clean && rm -rf /var/lib/apt/list && rm -rf /var/lib/apt/lists/*;\n\nENV PREFIX=/scratch                                                                                                                                                                                                                         \nENV ARCHIVE_DIR=${PREFIX}/archive                                                                                                                                                                                                           \nENV SOURCE_DIR=${PREFIX}/source                                                                                                                                                                                                             \nENV BUILD_DIR=${PREFIX}/build                                                                                                                                                                                                               \nENV INSTALL_DIR=/opt                                                                                                                                                                                                                        \n\nRUN mkdir -p ${PREFIX} && \\                                                                                                                                                                                                                  \n    cd ${PREFIX} && \\                                                                                                                                                                                                                        \n    mkdir archive && \\                                                                                                                                                                                                                       \n    mkdir source && \\                                                                                                                                                                                                                        \n    mkdir build                                                                                                                                                                                                                             \n\n# Install CMake                                                                                                                                                                                                                             \nRUN export CMAKE_VERSION=3.22.2 && \\                                                                                                                                                                                                         \n    export CMAKE_SHA256=38b3befdee8fd2bac06954e2a77cb3072e6833c69d8cc013c0a3b26f1cfdfe37 && \\                                                                                                                                                \n    export CMAKE_URL=https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz && \\                                                                                                    \n    export CMAKE_ARCHIVE=${ARCHIVE_DIR}/cmake.tar.gz && \\                                                                                                                                                                                    \n    export CMAKE_BUILD_DIR=${BUILD_DIR}/cmake && \\                                                                                                                                                                                           \n    wget --quiet ${CMAKE_URL} --output-document=${CMAKE_ARCHIVE} && \\\n    echo \"${CMAKE_SHA256}  ${CMAKE_ARCHIVE}\" | sha256sum -c && \\\n    mkdir -p ${CMAKE_BUILD_DIR} && \\\n    tar xf ${CMAKE_ARCHIVE} -C ${CMAKE_BUILD_DIR} --strip-components=1 && \\\n    mv ${CMAKE_BUILD_DIR} ${INSTALL_DIR} && \\\n    rm -rf ${CMAKE_ARCHIVE} && \\\n    rm -rf ${CMAKE_BUILD_DIR}\nENV PATH=${INSTALL_DIR}/cmake/bin:$PATH\n\n# Install UCX\nRUN export UCX_VERSION=1.12.0 && \\\n    export UCX_URL=https://github.com/openucx/ucx/archive/refs/tags/v${UCX_VERSION}.tar.gz && \\\n    export UCX_ARCHIVE=${ARCHIVE_DIR}/ucx-${UCX_VERSION}.tar.bz2 && \\\n    export UCX_SOURCE_DIR=${SOURCE_DIR}/ucx && \\\n    export UCX_BUILD_DIR=${BUILD_DIR}/ucx && \\\n    export UCX_INSTALL_DIR=${INSTALL_DIR}/ucx && \\\n    wget --quiet ${UCX_URL} --output-document=${UCX_ARCHIVE} && \\\n    mkdir -p ${UCX_SOURCE_DIR} && \\\n    tar -xf ${UCX_ARCHIVE} -C ${UCX_SOURCE_DIR} --strip-components=1 && \\\n    cd ${UCX_SOURCE_DIR} && \\\n    ./autogen.sh && \\\n    ./contrib/configure-release --enable-mt --prefix=${UCX_INSTALL_DIR} && \\\n    make -j${N_PROCS} install && \\\n    rm -rf ${UCX_ARCHIVE} && \\\n    rm -rf ${UCX_BUILD_DIR} && \\\n    rm -rf ${UCX_SOURCE_DIR}\nENV UCX_ROOT=${INSTALL_DIR}/ucx\n\n# Install OpenMPI\nRUN export OPENMPI_VERSION=4.1.2 && \\\n    export OPENMPI_VERSION_SHORT=4.1 && \\\n    export OPENMPI_SHA256=9b78c7cf7fc32131c5cf43dd2ab9740149d9d87cadb2e2189f02685749a6b527 && \\\n    export OPENMPI_URL=https://www.open-mpi.org/software/ompi/v${OPENMPI_VERSION_SHORT}/downloads/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    export OPENMPI_ARCHIVE=${ARCHIVE_DIR}/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    export OPENMPI_SOURCE_DIR=${SOURCE_DIR}/openmpi && \\\n    export OPENMPI_BUILD_DIR=${BUILD_DIR}/openmpi && \\\n    export OPENMPI_INSTALL_DIR=${INSTALL_DIR}/openmpi && \\\n    wget --quiet ${OPENMPI_URL} --output-document=${OPENMPI_ARCHIVE} && \\\n    echo \"${OPENMPI_SHA256}  ${OPENMPI_ARCHIVE}\" | sha256sum -c && \\\n    mkdir -p ${OPENMPI_SOURCE_DIR} && \\\n    tar -xf ${OPENMPI_ARCHIVE} -C ${OPENMPI_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${OPENMPI_BUILD_DIR} && \\\n    cd ${OPENMPI_BUILD_DIR} && \\\n    ${OPENMPI_SOURCE_DIR}/configure --with-ucx=${UCX_ROOT} --prefix=${OPENMPI_INSTALL_DIR} && \\\n    make -j${N_PROCS} install && \\\n    rm -rf ${OPENMPI_ARCHIVE} && \\\n    rm -rf ${OPENMPI_BUILD_DIR} && \\\n    rm -rf ${OPENMPI_SOURCE_DIR}\nENV OMPI_ALLOW_RUN_AS_ROOT=1\nENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1\nENV OMPI_MCA_btl_vader_single_copy_mechanism=none\nENV OMPI_MCA_btl_base_warn_component_unused='0'\nENV PATH=${INSTALL_DIR}/openmpi/bin:$PATH\n\n## Install Kokkos\nRUN export KOKKOS_SOURCE_DIR=${SOURCE_DIR}/kokkos && \\\n    export KOKKOS_BUILD_DIR=${BUILD_DIR}/kokkos && \\\n    export KOKKOS_INSTALL_DIR=${INSTALL_DIR}/kokkos && \\\n    cd ${SOURCE_DIR} && git clone https://github.com/kokkos/kokkos && \\\n    cd kokkos && \\\n    mkdir -p ${KOKKOS_BUILD_DIR} && \\\n    cd ${KOKKOS_BUILD_DIR} && \\\n    cmake -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DKokkos_ENABLE_OPENMP=ON \\\n        -DCMAKE_INSTALL_PREFIX=${KOKKOS_INSTALL_DIR} \\\n        ${KOKKOS_SOURCE_DIR} && \\\n    make -j${N_PROCS} install && \\\n    rm -rf ${KOKKOS_ARCHIVE} && \\\n    rm -rf ${KOKKOS_BUILD_DIR} && \\\n    rm -rf ${KOKKOS_SOURCE_DIR}\nENV KOKKOS_ROOT=${INSTALL_DIR}/kokkos\n"
}