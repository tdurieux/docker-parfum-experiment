{
  "startTime": 1674221135680,
  "endTime": 1674221136362,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# =============================================================================\n# An Arch Linux docker file for llvm-tutor. Clones and builds llvm-tutor, runs\n# all tests. It uses the precompiled LLVM packages from Fedora.\n#\n# USAGE:\n# ```bash\n# wget https://raw.githubusercontent.com/banach-space/llvm-tutor/main/Dockerfile_archlinux\n# docker build -t=llvm-tutor:llvm-14 .\n# docker run --rm -it --hostname=llvm-tutor llvm-tutor:llvm-14 /bin/bash\n# ```\n# =============================================================================\n\nFROM archlinux\n\nENV LLVM_DIR /usr/\nENV TUTOR_DIR /llvm-tutor\n\n# 1. INSTALL DEPENDENCIES\nRUN pacman -Syu --noconfirm \\\n    git \\\n    cmake \\\n    ninja \\\n    gcc \\\n    llvm \\\n    clang \\\n    python-pip\n\n# 2. INSTALL LIT\nRUN pip3 install --no-cache-dir lit\n\n# 3. CLONE LLVM-TUTOR\nRUN git clone https://github.com/banach-space/llvm-tutor $TUTOR_DIR\n\n# 4. BUILD AND RUN HELLO-WORLD\nRUN mkdir -p $TUTOR_DIR/hello-world-build \\\n    && cd $TUTOR_DIR/hello-world-build \\\n    && cmake -G Ninja -DLT_LLVM_INSTALL_DIR=$LLVM_DIR ../HelloWorld \\\n    && ninja\nRUN cd $TUTOR_DIR/hello-world-build && $LLVM_DIR/bin/clang -S -O1 -emit-llvm ../inputs/input_for_hello.c -o input_for_hello.ll\nRUN cd $TUTOR_DIR/hello-world-build && $LLVM_DIR/bin/opt -load-pass-plugin ./libHelloWorld.so -passes=hello-world -disable-output input_for_hello.ll 2>&1 | grep \"(llvm-tutor) Hello from: foo\"\n\n# 5. BUILD AND RUN LLVM-TUTOR\nRUN mkdir -p $TUTOR_DIR/build \\\n    && cd $TUTOR_DIR/build \\\n    && cmake -G Ninja -DLT_LLVM_INSTALL_DIR=$LLVM_DIR ../ \\\n    && ninja \\\n    && lit test/\n"
}