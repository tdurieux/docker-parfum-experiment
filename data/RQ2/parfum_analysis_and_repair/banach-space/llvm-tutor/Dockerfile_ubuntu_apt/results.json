{
  "startTime": 1674249246508,
  "endTime": 1674249247545,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "# =============================================================================\n# An Ubuntu docker file for llvm-tutor. Clones and builds llvm-tutor, runs all\n# tests. It uses the precompiled LLVM packages from Ubuntu.\n#\n# USAGE:\n# ```bash\n# wget https://raw.githubusercontent.com/banach-space/llvm-tutor/main/Dockerfile_ubuntu\n# docker build -t=llvm-tutor:llvm-14 .\n# docker run --rm -it --hostname=llvm-tutor llvm-tutor:llvm-14 /bin/bash\n# ```\n# =============================================================================\n\nFROM ubuntu:20.04\n\nENV LLVM_DIR /usr/lib/llvm-14/\nENV TUTOR_DIR /llvm-tutor\n\n# 1. INSTALL DEPENDENCIES\n# As `tzdata` gets installed automatically (AFAIK, Python depends on it), it\n# will interrupt the set-up with a question about the time-zone to use. However,\n# this is a non-interactive sessions and that won't work. Work around it by\n# setting the time-zone here.\nENV TZ=Europe/London\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    git \\\n    cmake \\\n    ninja-build \\\n    build-essential \\\n    python3-minimal python3-pip \\\n    wget \\\n    software-properties-common \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-add-repository \"deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main\"\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y llvm-14 llvm-14-dev llvm-14-tools clang-14 && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y python3-setuptools && rm -rf /var/lib/apt/lists/*;\n\n# 2. INSTALL LIT\nRUN pip3 install --no-cache-dir lit\n\n# 3. CLONE LLVM-TUTOR\nRUN git clone https://github.com/banach-space/llvm-tutor $TUTOR_DIR\n\n# 4. BUILD AND RUN HELLO-WORLD\nRUN mkdir -p $TUTOR_DIR/hello-world-build \\\n    && cd $TUTOR_DIR/hello-world-build \\\n    && cmake -G Ninja -DLT_LLVM_INSTALL_DIR=$LLVM_DIR ../HelloWorld \\\n    && ninja\nRUN cd $TUTOR_DIR/hello-world-build && /usr/bin/clang-14 -S -O1 -emit-llvm ../inputs/input_for_hello.c -o input_for_hello.ll\nRUN cd $TUTOR_DIR/hello-world-build && /usr/bin/opt-14 -load-pass-plugin ./libHelloWorld.so -passes=hello-world -disable-output input_for_hello.ll 2>&1 | grep \"(llvm-tutor) Hello from: foo\"\n\n# 5. BUILD AND RUN LLVM-TUTOR\nRUN mkdir -p $TUTOR_DIR/build \\\n    && cd $TUTOR_DIR/build \\\n    && cmake -DLT_LLVM_INSTALL_DIR=$LLVM_DIR ../ \\\n    && make -j $(nproc --all) \\\n    && lit test/\n"
}