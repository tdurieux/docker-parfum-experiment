{
  "startTime": 1674250364693,
  "endTime": 1674250365179,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Start from Nvidia PyTorch image https://ngc.nvidia.com/catalog/containers/nvidia:pytorch\nFROM nvcr.io/nvidia/pytorch:19.08-py3\n\n# Install dependencies (pip or conda)\nRUN pip install --no-cache-dir -U gsutil\n# RUN pip install -U -r requirements.txt\n# RUN conda update -n base -c defaults conda\n# RUN conda install -y -c anaconda future numpy opencv matplotlib tqdm pillow\n# RUN conda install -y -c conda-forge scikit-image tensorboard pycocotools\n\n## Install OpenCV with Gstreamer support\n#WORKDIR /usr/src\n#RUN pip uninstall -y opencv-python\n#RUN apt-get update\n#RUN apt-get install -y gstreamer1.0-tools gstreamer1.0-python3-dbg-plugin-loader libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev\n#RUN git clone https://github.com/opencv/opencv.git && cd opencv && git checkout 4.1.1 && mkdir build\n#RUN git clone https://github.com/opencv/opencv_contrib.git && cd opencv_contrib && git checkout 4.1.1\n#RUN cd opencv/build && cmake ../ \\\n#    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\\n#    -D BUILD_OPENCV_PYTHON3=ON \\\n#    -D PYTHON3_EXECUTABLE=/opt/conda/bin/python \\\n#    -D PYTHON3_INCLUDE_PATH=/opt/conda/include/python3.6m \\\n#    -D PYTHON3_LIBRARIES=/opt/conda/lib/python3.6/site-packages \\\n#    -D WITH_GSTREAMER=ON \\\n#    -D WITH_FFMPEG=OFF \\\n#    && make && make install && ldconfig\n#RUN cd /usr/local/lib/python3.6/site-packages/cv2/python-3.6/ && mv cv2.cpython-36m-x86_64-linux-gnu.so cv2.so\n#RUN cd /opt/conda/lib/python3.6/site-packages/ && ln -s /usr/local/lib/python3.6/site-packages/cv2/python-3.6/cv2.so cv2.so\n#RUN python3 -c \"import cv2; print(cv2.getBuildInformation())\"\n\n# Create working directory\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\n# Copy contents\nCOPY . /usr/src/app\n\n# Copy weights\n#RUN python3 -c \"from utils.google_utils import *; \\\n#    gdrive_download(id='18xqvs_uwAqfTXp-LJCYLYNHBOcrwbrp0', name='weights/darknet53.conv.74'); \\\n#    gdrive_download(id='1oPCHKsM2JpM-zgyepQciGli9X0MTsJCO', name='weights/yolov3-spp.weights'); \\\n#    gdrive_download(id='1vFlbJ_dXPvtwaLLOu-twnjK4exdFiQ73', name='weights/yolov3-spp.pt)\"\n\n\n# ---------------------------------------------------  Extras Below  ---------------------------------------------------\n\n# Build\n# rm -rf yolov3  # Warning: remove existing\n# git clone https://github.com/ultralytics/yolov3 && cd yolov3 && python3 detect.py\n# sudo docker image prune -af && sudo docker build -t ultralytics/yolov3:v0 .\n\n# Run\n# sudo nvidia-docker run --ipc=host ultralytics/yolov3:v0 python3 detect.py\n\n# Run with local directory access\n# sudo nvidia-docker run --ipc=host --mount type=bind,source=\"$(pwd)\"/coco,target=/usr/src/coco ultralytics/yolov3:v0 python3 train.py\n\n# Build and Push\n# export tag=ultralytics/yolov3:v0 && sudo docker build -t $tag . && docker push $tag\n\n# Kill all\n# sudo docker kill $(sudo docker ps -q)\n\n# Run bash for loop\n# sudo nvidia-docker run --ipc=host ultralytics/yolov3:v0 while true; do python3 train.py --evolve; done\n"
}