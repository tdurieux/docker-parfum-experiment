{
  "startTime": 1674216209894,
  "endTime": 1674216211173,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 11,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 11,
        "columnEnd": 101
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 11,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 11,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile for SeaHorn build image\n# produces a container containing dependencies\n# Arguments:\n#  - UBUNTU:     trusty, xenial, bionic\n#  - BUILD_TYPE: Debug, Release\n#\n\nARG UBUNTU\n\n# Pull base image.\nFROM buildpack-deps:$UBUNTU\n\nARG BUILD_TYPE\nRUN echo \"Build type set to: $BUILD_TYPE\" && \\\n     # Install deps.\n    apt-get update && \\\n    apt-get install --no-install-recommends -yqq software-properties-common && \\\n    if [ \"$UBUNTU\" = \"trusty\" ] ; \\\n      then \\\n      apt-get install --no-install-recommends -yqq python-software-properties; \\\n    fi && \\\n    add-apt-repository --yes ppa:ubuntu-toolchain-r/test && \\\n    apt-get update && \\\n    apt-get upgrade -yqq && \\\n    apt-get install --no-install-recommends -yqq binutils-gold cmake cmake-data xdot g++-5 \\\n                       ninja-build libgraphviz-dev libstdc++5 \\\n                       libgmp-dev libmpfr-dev libiomp-dev \\\n                       python-dev python-pip python-setuptools \\\n                       lcov ggcov && \\\n    pip install --no-cache-dir lit OutputCheck && \\\n    pip install --no-cache-dir networkx==2.2 pygraphviz && \\\n    # Use gold instead of bfd for much faster linking.\n    update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.gold\" 20 && \\\n    update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.bfd\" 10 && rm -rf /var/lib/apt/lists/*;\n\n\nWORKDIR /tmp/dockerutils\n\n# Create a helper script that works as switch (VAL) { Key0 : Val0, ...}.\n# This is to work around docker limitations and pass right correct flag to the\n# python configuration script.\nRUN echo '#!/bin/sh' > switch.sh && \\ \n    echo 'VAL=$1;shift;while test $# -gt 0;do if [ \"$1\" = \"$VAL\" ];then echo $2;exit 0;fi;shift;shift;done' >> switch.sh && \\\n    chmod +x switch.sh && \\\n    /tmp/dockerutils/switch.sh $BUILD_TYPE Debug \"debug\" Release \"rel\" \\\n    > /tmp/dockerutils/dt_out.txt && \\\n    export BT=$(cat /tmp/dockerutils/dt_out.txt) && \\\n    export UB=$(lsb_release --a 2>&1 | cut -f2 | tail -n 1) && \\\n    echo \"$UB\"_\"$BT\" > /tmp/dockerutils/prefix.txt && \\\n    cat /tmp/dockerutils/prefix.txt && \\\n    mkdir -p /deps\n\nWORKDIR /deps\nRUN export PREFIX=$(cat /tmp/dockerutils/prefix.txt) && \\\n    export DEPS_BASE=$(echo https://github.com/seahorn/seahorn-ext-deps/releases/download/5.0-deep-dev/\"$PREFIX\") && \\\n    curl -f -sSOL \"$DEPS_BASE\"_boost_1_68.tar.gz && \\\n    tar -xf \"$PREFIX\"_boost_1_68.tar.gz && \\\n    curl -f -sSOL \"$DEPS_BASE\"_z3.tar.gz && \\\n    tar -xf \"$PREFIX\"_z3.tar.gz && \\\n    curl -f -sSOL \"$DEPS_BASE\"_yices-2.6.1.tar.gz && \\\n    tar -xf \"$PREFIX\"_yices-2.6.1.tar.gz && \\\n    curl -f -sSOL \"$DEPS_BASE\"_llvm50.tar.gz && \\\n    tar -xf \"$PREFIX\"_llvm50.tar.gz && \\\n#   ls -al --block-size=M 1>&2 && \\\n    mkdir -p /seahorn && \\\n    # download clang\n    mkdir /clang-5.0 && \\\n    if [ \"$UBUNTU\" = \"trusty\" ] ; \\\n      then \\\n      curl -f -s https://releases.llvm.org/5.0.0/clang+llvm-5.0.0-linux-x86_64-ubuntu14.04.tar.xz; \\\n      else curl -f -s https://releases.llvm.org/5.0.0/clang+llvm-5.0.0-linux-x86_64-ubuntu16.04.tar.xz; \\\n    fi \\\n    | tar -xJf - -C /clang-5.0 --strip-components=1 && rm \"$PREFIX\"_boost_1_68.tar.gz\n\nWORKDIR /seahorn\n"
}