{
  "startTime": 1674219788158,
  "endTime": 1674219789585,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 21,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 2,
        "columnEnd": 83
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 2,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# boost Dockerfile for SeaHorn\n# This produces packages in /boost.\n# Arguments:\n#  - UBUNTU:     trusty, xenial, bionic\n#  - BUILD_TYPE: Debug, Release\n#\n\nARG UBUNTU\n\n# Pull base image.\nFROM buildpack-deps:$UBUNTU\n\nARG BUILD_TYPE\nRUN echo Build type set to: $BUILD_TYPE\n\nWORKDIR /tmp/dockerutils\n\n# Create a helper script that works as switch (VAL) { Key0 : Val0, ...}.\n# This is to work around docker limitations and pass right correct flag to the\n# python configuration script.\n\nRUN echo '#!/bin/sh' > switch.sh && \\ \n    echo 'VAL=$1;shift;while test $# -gt 0;do if [ \"$1\" = \"$VAL\" ];then echo $2;exit 0;fi;shift;shift;done' >> switch.sh && \\\n    chmod +x switch.sh\n\n# If BUILD_TYPE is Debug we need to add 'debug' the additional CXX flags.\n# Save them to a temporary file, as every run command runs in its own shell.\nRUN /tmp/dockerutils/switch.sh $BUILD_TYPE Debug \"debug\" Release \"release\" \\\n    > /tmp/dockerutils/out.txt\n\n# Install deps\nRUN \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -yqq binutils-gold libicu-dev libbz2-dev python-dev autotools-dev && rm -rf /var/lib/apt/lists/*;\n\n# Use gold instead of bfd for much faster linking.\nRUN update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.gold\" 20\nRUN update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.bfd\" 10\n\nWORKDIR /boost\n\nRUN wget --output-document=boost.tar.bz2 https://downloads.sourceforge.net/project/boost/boost/1.68.0/boost_1_68_0.tar.bz2\n\nRUN tar -xvf boost.tar.bz2 && mv -T /boost/boost_1_68_0 /boost/repo && rm boost.tar.bz2\n\nRUN mkdir -p /boost/out\n\n# Build selected configuration. Use the file with a saved flag to pick\n# release or debug configuration.\n\nWORKDIR /boost/repo\n\nRUN ./bootstrap.sh --with-libraries=date_time,filesystem,system,iostreams,regex,test\n\n# Generate libs and headers.\nRUN ./b2 -j$(nproc) threading=multi -d0\n\nRUN mkdir -p /boost/out ; mkdir -p /boost/out/boost ; mkdir -p /boost/out/boost/include\nRUN cp -r /boost/repo/boost /boost/out/boost/include/boost\nRUN cp -r /boost/repo/stage/lib /boost/out/boost/lib\n\nRUN ls 1>&2 /boost/out\n\nRUN cd /boost/out && tar -czvf /boost/boost_1_68.tar.gz ./ && rm /boost/boost_1_68.tar.gz\n\nRUN rm -rf /boost/out ; rm -rf /boost/repo ; rm -rf /tmp/dockerutils\n\nWORKDIR /boost\n\nRUN echo '#!/bin/sh' > cpy.sh && \\ \n    echo 'cp *.tar.gz /host/' >> cpy.sh && \\\n    chmod +x cpy.sh\n\n# Define default command.\nCMD [\"./cpy.sh\"]\n"
}