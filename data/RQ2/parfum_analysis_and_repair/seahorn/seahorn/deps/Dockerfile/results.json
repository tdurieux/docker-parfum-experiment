{
  "startTime": 1674220801914,
  "endTime": 1674220802899,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 2,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 2,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 2,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 2,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile for SeaHorn\n# This produces package in /seahorn/build\n# Arguments:\n#  - UBUNTU:     trusty, xenial\n#  - BUILD_TYPE: Debug, Release\n#\n\nARG UBUNTU\n\n# Pull base image.\nFROM buildpack-deps:$UBUNTU\n\nARG BUILD_TYPE\nRUN echo \"Build type set to: $BUILD_TYPE\"\n\n# Install deps.\nRUN \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -yqq software-properties-common python-software-properties && \\\n  add-apt-repository --yes ppa:ubuntu-toolchain-r/test && \\\n  apt-get update && \\\n  apt-get upgrade -yqq && \\\n  apt-get install --no-install-recommends -yqq binutils-gold cmake cmake-data xdot g++-5 \\\n                       ninja-build libgraphviz-dev libstdc++5 \\\n                       libgmp-dev libmpfr-dev clang-3.8 libiomp-dev \\\n                       python-dev python-pip python-setuptools && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir lit OutputCheck\nRUN easy_install networkx pygraphviz\n\n# Use gold instead of bfd for much faster linking.\nRUN update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.gold\" 20 && \\\n    update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.bfd\" 10\n\n\nWORKDIR /tmp/dockerutils\n\n# Create a helper script that works as switch (VAL) { Key0 : Val0, ...}.\n# This is to work around docker limitations and pass right correct flag to the\n# python configuration script.\nRUN echo '#!/bin/sh' > switch.sh && \\ \n    echo 'VAL=$1;shift;while test $# -gt 0;do if [ \"$1\" = \"$VAL\" ];then echo $2;exit 0;fi;shift;shift;done' >> switch.sh && \\\n    chmod +x switch.sh\n\n\nRUN /tmp/dockerutils/switch.sh $BUILD_TYPE Debug \"debug\" Release \"rel\" \\\n    > /tmp/dockerutils/dt_out.txt\nRUN export BT=$(cat /tmp/dockerutils/dt_out.txt) && \\\n    export UB=$(lsb_release --a 2>&1 | cut -f2 | tail -n 1) && \\\n    echo \"$UB\"_\"$BT\" > /tmp/dockerutils/prefix.txt && \\\n    cat /tmp/dockerutils/prefix.txt\n\nRUN mkdir -p /deps\nWORKDIR /deps\nRUN export PREFIX=$(cat /tmp/dockerutils/prefix.txt) && \\\n    export DEPS_LINK=$(echo https://github.com/kuhar/seahorn_deps/releases/download/v0.1/\"$PREFIX\".tar.gz) && \\\n    wget $DEPS_LINK\n\nRUN export PREFIX=$(cat /tmp/dockerutils/prefix.txt) && \\\n    export DEPS_TAR=$(echo \"$PREFIX\".tar.gz) && \\\n    tar -xvf $DEPS_TAR && \\\n    tar -xvf boost162.tar.gz && \\\n    tar -xvf z3.tar.gz && \\\n    tar -xvf llvm38.tar.gz && \\\n    rm *.tar.gz\n\nRUN ls -al --block-size=M 1>&2\n\nRUN mkdir -p /seahorn\nWORKDIR /seahorn\n\n# Checkout SeaHorn.\nRUN git clone https://github.com/seahorn/seahorn ./ -b master --depth=10\nRUN mkdir -p /seahorn/build\nWORKDIR /seahorn/build\n\n# Build configuration.\nRUN cmake -GNinja \\\n          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \\ \n          -DBOOST_ROOT=/deps/boost \\\n          -DZ3_ROOT=/deps/z3 \\\n          -DLLVM_DIR=/deps/LLVM-3.8.1-Linux/share/llvm/cmake \\\n          -DCMAKE_INSTALL_PREFIX=run \\\n          -DCMAKE_CXX_COMPILER=g++-5 \\\n          -DCPACK_GENERATOR=\"TGZ\" \\\n          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n          ../\n\nRUN cmake --build . --target extra  && cmake ..\nRUN cmake --build . --target crab  && cmake ..\nRUN cmake --build . --target install\nRUN cmake --build . --target package\n\nENV PATH \"/seahorn/build/run/bin:$PATH\"\n\nWORKDIR /seahorn\n\nRUN echo '#!/bin/sh' > /tmp/cpy.sh && \\ \n    echo 'cp /seahorn/build/*.tar.gz /host/ && bash' >> /tmp/cpy.sh && \\\n    chmod +x /tmp/cpy.sh\n\n# Define default command.\nCMD [\"/tmp/cpy.sh\"]\n"
}