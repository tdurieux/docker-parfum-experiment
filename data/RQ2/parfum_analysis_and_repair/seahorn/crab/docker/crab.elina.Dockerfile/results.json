{
  "startTime": 1674249021039,
  "endTime": 1674249022414,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile for Crab binary with elina and boxes libraries.\n#\n# produces package in /crab/build\n# Arguments:\n#  - UBUNTU:     bionic\n#  - BUILD_TYPE: debug, release\n#  - BRANCH\n#\n\nARG UBUNTU\n\n# Pull base image.\nFROM buildpack-deps:$UBUNTU\n\nARG BUILD_TYPE\nRUN echo \"Build type set to: $BUILD_TYPE\" && \\\n     # Install deps.\n    apt-get update && \\\n    apt-get install --no-install-recommends -yqq software-properties-common && \\\n    add-apt-repository -y ppa:mhier/libboost-latest && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -yqq cmake cmake-data g++-6 \\\n                         ninja-build libstdc++6 \\\n\t\t\t\tlibboost1.68-dev \\\n                         libgmp-dev libmpfr-dev \\\n\t\t\t\tlcov ggcov && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /tmp/dockerutils\n\n# Create a helper script that works as switch (VAL) { Key0 : Val0, ...}.\n# This is to work around docker limitations and pass right correct flag to the\n# python configuration script.\nRUN echo '#!/bin/sh' > switch.sh && \\ \n    echo 'VAL=$1;shift;while test $# -gt 0;do if [ \"$1\" = \"$VAL\" ];then echo $2;exit 0;fi;shift;shift;done' >> switch.sh && \\\n    chmod +x switch.sh && \\\n    /tmp/dockerutils/switch.sh $BUILD_TYPE Debug \"debug\" Release \"rel\" Coverage \"rel\" \\\n    > /tmp/dockerutils/dt_out.txt && \\\n    export BT=$(cat /tmp/dockerutils/dt_out.txt) && \\\n    export UB=$(lsb_release --a 2>&1 | cut -f2 | tail -n 1) && \\\n    echo \"$UB\"_\"$BT\" > /tmp/dockerutils/prefix.txt && \\\n    cat /tmp/dockerutils/prefix.txt\n\nARG BRANCH=master\nRUN cd / && rm -rf /crab && \\\n    git clone -b $BRANCH https://github.com/seahorn/crab crab --depth=10 ; \\\n    mkdir -p /crab/build\nWORKDIR /crab/build\n\nARG BUILD_TYPE\n# Build configuration.\nRUN cmake -GNinja \\\n          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \\\n          -DCMAKE_INSTALL_PREFIX=run \\\n          -DCMAKE_CXX_COMPILER=g++-6 \\\n          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n          -DCRAB_USE_LDD=ON \\\n          -DCRAB_USE_ELINA=ON \\\n\t  -DCRAB_ENABLE_TESTS=ON \\\n          ../ && \\\n    cmake --build . --target ldd  && cmake .. && \\\n    cmake --build . --target elina  && cmake .. && \\\n    cmake --build . --target install\n\n# To find elina dynamic libraries\nENV LD_LIBRARY_PATH \"/crab/build/run/elina/lib:$LD_LIBRARY_PATH\"\n\n# Run only elina test\n# RUN /crab/build/test-bin/elina_domains\n\n# Run tests\nRUN /crab/tests/run_tests.sh /crab/tests/expected_results.elina.out /crab/build\n\nWORKDIR /crab\n\n"
}