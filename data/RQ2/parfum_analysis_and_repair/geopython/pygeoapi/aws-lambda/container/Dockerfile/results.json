{
  "startTime": 1674220213207,
  "endTime": 1674220214898,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 46,
        "columnEnd": 83
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# =================================================================\n#\n# Authors: Tom Kralidis <tomkralidis@gmail.com>\n#          Just van den Broecke <justb4@gmail.com>\n#          Francesco Bartoli <xbartolone@gmail.com>\n#          Angelos Tzotsos <gcpp.kalxas@gmail.com>\n#\n# Copyright (c) 2020 Tom Kralidis\n# Copyright (c) 2019 Just van den Broecke\n# Copyright (c) 2020 Francesco Bartoli\n# Copyright (c) 2021 Angelos Tzotsos\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without\n# restriction, including without limitation the rights to use,\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the\n# Software is furnished to do so, subject to the following\n# conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n# OTHER DEALINGS IN THE SOFTWARE.\n#\n# =================================================================\n\nFROM ubuntu:focal\n\nLABEL maintainer=\"Just van den Broecke <justb4@gmail.com>\"\n\n# Docker file for full geoapi server with libs/packages for all providers.\n# Server runs with gunicorn. You can override ENV settings.\n# Defaults:\n# SCRIPT_NAME=/\n# CONTAINER_NAME=pygeoapi\n# CONTAINER_HOST=0.0.0.0\n# CONTAINER_PORT=80\n# WSGI_WORKERS=4\n# WSGI_WORKER_TIMEOUT=6000\n# WSGI_WORKER_CLASS=gevent\n\n# Calls entrypoint.sh to run. Inspect it for options.\n# Contains some test data. Also allows you to verify by running all unit tests.\n# Simply run: docker run -it geopython/pygeoapi test\n# Override the default config file /pygeoapi/local.config.yml\n# via Docker Volume mapping or within a docker-compose.yml file. See example at\n# https://github.com/geopython/demo.pygeoapi.io/tree/master/services/pygeoapi\n\n# Build arguments\n# add \"--build-arg BUILD_DEV_IMAGE=true\" to Docker build command when building with test/doc tools\n\n# ARGS\nARG TIMEZONE=\"Europe/London\"\nARG LOCALE=\"en_US.UTF-8\"\nARG BUILD_DEV_IMAGE=\"false\"\nARG ADD_DEB_PACKAGES=\"python3-gdal python3-psycopg2 python3-xarray python3-scipy python3-netcdf4 python3-rasterio python3-fiona python3-pandas python3-pyproj python3-elasticsearch python3-pymongo python3-zarr python3-dask python3-tinydb\"\nARG FUNCTION_DIR=\"/pygeoapi\"\n\n\n\n\n# ENV settings\nENV TZ=${TIMEZONE} \\\n\tDEBIAN_FRONTEND=\"noninteractive\" \\\n\tDEB_BUILD_DEPS=\"software-properties-common curl unzip\" \\\n\tDEB_PACKAGES=\"python3-pip python3-setuptools python3-distutils python3-yaml python3-dateutil python3-tz lsof python3-flask python3-flask-cors python3-unicodecsv python3-click python3-greenlet python3-gevent python3-wheel gunicorn libsqlite3-mod-spatialite ${ADD_DEB_PACKAGES}\" \\\n\tPYGEOAPI_CONFIG=\"local.config.yml\" \\\n\tPYGEOAPI_OPENAPI=\"pygoapi-test-openapi.yml\"\n\n\n\nRUN mkdir -p /pygeoapi/pygeoapi\nWORKDIR /pygeoapi\n# Add files required for pip/setuptools\nADD requirements*.txt setup.py README.md /pygeoapi/\nADD pygeoapi/__init__.py /pygeoapi/pygeoapi/\n\n# Run all installs\nRUN \\\n\n\tapt-get update -y \\\n\t&& apt-get install -y --fix-missing --no-install-recommends ${DEB_BUILD_DEPS}  \\\n\t&& add-apt-repository ppa:ubuntugis/ubuntugis-unstable \\\n\t&& apt-get --no-install-recommends install -y ${DEB_PACKAGES} \\\n\t&& echo \"For ${TZ} date=$(date)\" && echo \"Locale=$(locale)\" \\\n\t# Install pygeoapi\n\t&& cd /pygeoapi \\\n\t# Optionally add development/test/doc packages \\\n\t&& if [ \"$BUILD_DEV_IMAGE\" = \"true\" ] ; then \\\n\tpip3 install --no-cache-dir -r requirements-dev.txt; fi \\\n\t&& pip3 install --no-cache-dir -e . \\\n\t# OGC schemas local setup\n\t&& mkdir /schemas.opengis.net \\\n\t&& curl -f -O http://schemas.opengis.net/SCHEMAS_OPENGIS_NET.zip \\\n\t&& unzip ./SCHEMAS_OPENGIS_NET.zip \"ogcapi/*\" -d /schemas.opengis.net \\\n\t&& rm -f ./SCHEMAS_OPENGIS_NET.zip \\\n\t# Cleanup TODO: remove unused Locales and TZs\n\t&& apt-get remove --purge -y ${DEB_BUILD_DEPS} \\\n\t&& apt autoremove -y \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN pip3 install --no-cache-dir --target \"/pygeoapi\" awslambdaric\nADD . /pygeoapi\n\nCOPY ./docker/default.config.yml /pygeoapi/local.config.yml\nCOPY ./docker/entry.sh /pygeoapi/entry.sh\n\n\nADD https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie /usr/bin/aws-lambda-rie\n#COPY entry.sh /\nRUN chmod 755 /usr/bin/aws-lambda-rie /pygeoapi/entry.sh\nENTRYPOINT [ \"/pygeoapi/entry.sh\" ]\nCMD [ \"wsgi_handler.handler\" ]\n#ENTRYPOINT [\"/pygeoapi/entrypoint.sh\"]\n"
}