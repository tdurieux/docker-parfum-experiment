{
  "startTime": 1674250976868,
  "endTime": 1674250978165,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# base node image\nFROM node:16-bullseye-slim as base\n\n# Install openssl for Prisma\nRUN apt-get update && apt-get install --no-install-recommends -y openssl && rm -rf /var/lib/apt/lists/*;\n\n# set for base and all that inherit from it\nENV NODE_ENV=production\n\n# Install all node_modules, including dev dependencies\nFROM base as deps\n\nRUN mkdir /app\nWORKDIR /app\n\nADD package.json package-lock.json ./\nRUN npm install --production=false && npm cache clean --force;\n\n# Setup production node_modules\nFROM base as production-deps\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\nADD package.json package-lock.json ./\nRUN npm prune --production\n\n# Build the app\nFROM base as build\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\n\nADD prisma .\nRUN npx prisma generate\n\nADD . .\nRUN npm run build\n\n# Finally, build the production image with minimal footprint\nFROM base\n\nENV NODE_ENV=production\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=production-deps /app/node_modules /app/node_modules\nCOPY --from=build /app/node_modules/.prisma /app/node_modules/.prisma\nCOPY --from=build /app/build /app/build\nCOPY --from=build /app/public /app/public\nADD . .\n\nCMD [\"node\", \"node_modules/.bin/remix-serve\", \"build\"]\n"
}