diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/stevelorenz/build-vnf/ffpp/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/stevelorenz/build-vnf/ffpp/Dockerfile/repaired.Dockerfile
index 36d9b48..f22e27a 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/stevelorenz/build-vnf/ffpp/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/stevelorenz/build-vnf/ffpp/Dockerfile/repaired.Dockerfile
@@ -22,7 +22,7 @@ RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-i
 	python3 \
 	python3-pyelftools \
 	tzdata \
-	wget
+	wget && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /opt/
 
@@ -42,7 +42,7 @@ RUN mkdir -p ${XDP_TOOLS_DIR} && \
 	git clone https://github.com/xdp-project/xdp-tools.git && \
 	cd ./xdp-tools && git checkout -b ${XDP_TOOLS_VER} ${XDP_TOOLS_VER} && \
 	git submodule init && git submodule update && \
-	./configure && make && make install && \
+	./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && make && make install && \
 	cd ./lib/libbpf/src && make install
 
 # Let the build system and linker to find the libbpf.so
@@ -55,8 +55,8 @@ ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib64
 ENV DPDK_VER="21.11"
 ENV RTE_SDK="/opt/dpdk"
 RUN mkdir -p ${RTE_SDK} && \
-	wget http://fast.dpdk.org/rel/dpdk-${DPDK_VER}.tar.xz && \
-	tar -xJf dpdk-${DPDK_VER}.tar.xz -C ${RTE_SDK} --strip-components 1
+	wget https://fast.dpdk.org/rel/dpdk-${DPDK_VER}.tar.xz && \
+	tar -xJf dpdk-${DPDK_VER}.tar.xz -C ${RTE_SDK} --strip-components 1 && rm dpdk-${DPDK_VER}.tar.xz
 COPY ./configs/dpdk/meson_options.txt ${RTE_SDK}/meson_options.txt
 RUN cd ${RTE_SDK} && meson build && cd build && \
 	ninja && ninja install && ldconfig && \
@@ -70,7 +70,7 @@ RUN cd ${RTE_SDK} && meson build && cd build && \
 # Size: 301 MB
 # TODO: Remove unused dependencies !!!
 # TODO: Check if clang can be used to build pybind11 in e.g. Ubuntu 22.04
-RUN debian_frontend="noninteractive" apt-get install -y \
+RUN debian_frontend="noninteractive" apt-get --no-install-recommends install -y \
 	libbenchmark-dev \
 	libboost-coroutine-dev \
 	libboost-dev \
@@ -91,16 +91,16 @@ RUN debian_frontend="noninteractive" apt-get install -y \
 	python3-dev \
 	python3-numpy \
 	python3-pip \
-	python3-zmq
+	python3-zmq && rm -rf /var/lib/apt/lists/*;
 
 # TODO: Check if miniconda is a better option.
 # Latest pybind11 is needed for bytesarray and clang support
-RUN pip3 install -q "docker==5.0.3" "pybind11[global]==2.8.1"
+RUN pip3 install --no-cache-dir -q "docker==5.0.3" "pybind11[global]==2.8.1"
 
 # Development, testing and debugging tools.
 # These packages are NOT needed in production.
 # Size: 262 MB
-RUN debian_frontend="noninteractive" apt-get install -y \
+RUN debian_frontend="noninteractive" apt-get --no-install-recommends install -y \
 	clang-tidy \
 	cppcheck \
 	gcovr \
@@ -109,12 +109,12 @@ RUN debian_frontend="noninteractive" apt-get install -y \
 	iproute2 \
 	iputils-ping \
 	# For Linux perf tool: CPU hardware couters and events.
-	linux-tools-`uname -r`\
+	linux-tools-`uname -r` \
 	linux-tools-common \
 	net-tools \
 	tcpdump \
-	# Mainly for checking and profiling WITHOUT modification of the source code
-	valgrind
+
+	valgrind && rm -rf /var/lib/apt/lists/*;
 
 #
 # Finally! Build and install FFPP targets with release version. :)