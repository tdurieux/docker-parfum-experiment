{
  "startTime": 1674251202631,
  "endTime": 1674251204104,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 1,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 1,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 102,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 102,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 5
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 102,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 102,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n#\n# Install common build dependencies\n#\n\nRUN apt-get update && DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y --no-install-recommends \\\n\tbuild-essential \\\n\tca-certificates \\\n\tclang \\\n\tgcc-multilib \\\n\tgit \\\n\tlibelf-dev \\\n\tlibnuma-dev \\\n\tlibpcap-dev \\\n\tlinux-tools-common \\\n\tllvm \\\n\tm4 \\\n\tmeson \\\n\tninja-build\\\n\tpkg-config \\\n\tpython3 \\\n\tpython3-pyelftools \\\n\ttzdata \\\n\twget && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt/\n\n#\n# Build and install dependencies that cannot be installed directly by a package manager\n# This is just a WORKAROUND due to issues such as package versions or compilation configurations...\n#\n\n# Build xdp-tools from source using git.\n# The reason to use git instead of downloading a tarball or deb package is that the\n# xdp-tools project is currently still under heavy development without a quick release of stable deb packages.\n# xdp-tools is based on the libbpf (the forked one in xdp project).\n# It's easy to use git submodule to fetch the exact version used by xdp-tools and make sure it compiles.\nENV XDP_TOOLS_VER=\"v1.2.0\"\nENV XDP_TOOLS_DIR=\"/opt/xdp-tools\"\nRUN mkdir -p ${XDP_TOOLS_DIR} && \\\n\tgit clone https://github.com/xdp-project/xdp-tools.git && \\\n\tcd ./xdp-tools && git checkout -b ${XDP_TOOLS_VER} ${XDP_TOOLS_VER} && \\\n\tgit submodule init && git submodule update && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && \\\n\tcd ./lib/libbpf/src && make install\n\n# Let the build system and linker to find the libbpf.so\nENV PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/lib64/pkgconfig\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib64\n\n# Build DPDK from source.\n# The deb package (of Ubuntu 20.04) is not used currently since it does not\n# contain AF_XDP PMD. Will use the deb package when AF_XDP is fully supported.\nENV DPDK_VER=\"21.11\"\nENV RTE_SDK=\"/opt/dpdk\"\nRUN mkdir -p ${RTE_SDK} && \\\n\twget https://fast.dpdk.org/rel/dpdk-${DPDK_VER}.tar.xz && \\\n\ttar -xJf dpdk-${DPDK_VER}.tar.xz -C ${RTE_SDK} --strip-components 1 && rm dpdk-${DPDK_VER}.tar.xz\nCOPY ./configs/dpdk/meson_options.txt ${RTE_SDK}/meson_options.txt\nRUN cd ${RTE_SDK} && meson build && cd build && \\\n\tninja && ninja install && ldconfig && \\\n\trm -rf /opt/dpdk-${DPDK_VER}.tar.xz && \\\n\trm -rf /opt/dpdk/build\n\n#\n# Install dependencies that be installed directly by a package manager\n#\n\n# Size: 301 MB\n# TODO: Remove unused dependencies !!!\n# TODO: Check if clang can be used to build pybind11 in e.g. Ubuntu 22.04\nRUN debian_frontend=\"noninteractive\" apt-get --no-install-recommends install -y \\\n\tlibbenchmark-dev \\\n\tlibboost-coroutine-dev \\\n\tlibboost-dev \\\n\tlibboost-program-options-dev \\\n\tlibboost-system-dev \\\n\tlibcpufreq-dev \\\n\tlibczmq-dev \\\n\tlibfmt-dev \\\n\tlibgoogle-glog-dev \\\n\tlibgrpc++-dev \\\n\tlibjansson-dev \\\n\tlibmnl-dev \\\n\tlibmsgsl-dev \\\n\tlibprotobuf-dev \\\n\tlibtins-dev \\\n\tlibyaml-cpp-dev \\\n\tprotobuf-compiler-grpc \\\n\tpython3-dev \\\n\tpython3-numpy \\\n\tpython3-pip \\\n\tpython3-zmq && rm -rf /var/lib/apt/lists/*;\n\n# TODO: Check if miniconda is a better option.\n# Latest pybind11 is needed for bytesarray and clang support\nRUN pip3 install --no-cache-dir -q \"docker==5.0.3\" \"pybind11[global]==2.8.1\"\n\n# Development, testing and debugging tools.\n# These packages are NOT needed in production.\n# Size: 262 MB\nRUN debian_frontend=\"noninteractive\" apt-get --no-install-recommends install -y \\\n\tclang-tidy \\\n\tcppcheck \\\n\tgcovr \\\n\tgoogle-mock \\\n\tgoogletest \\\n\tiproute2 \\\n\tiputils-ping \\\n\t# For Linux perf tool: CPU hardware couters and events.\n\tlinux-tools-`uname -r` \\\n\tlinux-tools-common \\\n\tnet-tools \\\n\ttcpdump \\\n\n\tvalgrind && rm -rf /var/lib/apt/lists/*;\n\n#\n# Finally! Build and install FFPP targets with release version. :)\n# Size: 12 MB\n\nENV FFPP_PATH /ffpp\nRUN mkdir -p ${FFPP_PATH}\nCOPY . ${FFPP_PATH}\nWORKDIR ${FFPP_PATH}\nRUN meson build --buildtype=release && \\\n\tcd build && \\\n\tninja && ninja install && ldconfig\n\nENV PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/local/lib/x86_64-linux-gnu/pkgconfig\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib/x86_64-linux-gnu\nENV PYTHONPATH=\"${PYTHONPATH}:/usr/local/lib/python3.8/site-packages\"\n\nWORKDIR ${FFPP_PATH}\n\nCMD [\"bash\"]\n"
}