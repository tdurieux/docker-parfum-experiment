{
  "startTime": 1674246012177,
  "endTime": 1674246013098,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 3,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 2,
        "columnEnd": 75
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 2,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 2,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 2,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.5.1-slim AS base\n\nENV BUNDLER_VERSION 2.1.4\nENV RAILS_LOG_TO_STDOUT true\n\nRUN apt-get -y update && \\\n  apt-get -y --no-install-recommends install apt-transport-https curl gnupg libpq5 shared-mime-info && \\\n  ( curl -f https://baltocdn.com/helm/signing.asc | apt-key add -) && \\\n  (echo \"deb https://baltocdn.com/helm/stable/debian/ all main\" | tee /etc/apt/sources.list.d/helm-stable-debian.list) && \\\n  apt-get -y update && \\\n  apt-get -y --no-install-recommends install helm && \\\n  rm -vrf /var/lib/apt/lists/* && \\\n  gem install bundler -v \"$BUNDLER_VERSION\" && \\\n  rm -vf /usr/local/bundle/cache/*.gem && \\\n  useradd -mU -d /app app\nWORKDIR /app\n\nARG RAILS_ENV=production\nARG RACK_ENV=production\nENV RAILS_ENV=${RAILS_ENV}\nENV RACK_ENV=${RACK_ENV}\nFROM base AS build\n\nRUN apt-get -y update && \\\n  apt-get install --no-install-recommends -y build-essential libpq-dev nodejs && rm -rf /var/lib/apt/lists/*;\nUSER app\n\nCOPY --chown=app:app Gemfile* ./\nRUN bundle config --local deployment 'true' && \\\n  bundle config --local without $(echo 'development test' | sed \"s/\\\\s*$RAILS_ENV\\\\s*//g\") && \\\n  bundle install && \\\n  rm -vf /usr/local/bundle/ruby/*/cache/*.gem\n\nENV DB_NAME barito_production\nARG NODE_ENV=${RAILS_ENV}\nENV NODE_ENV=${NODE_ENV}\n\nCOPY --chown=app:app . .\nRUN mv config/application.yml.example config/application.yml && \\\n  mv config/database.yml.example config/database.yml && \\\n  mv config/tps_config.yml.example config/tps_config.yml && \\\n  SECRET_KEY_BASE=$(printf %128s | tr ' ' '0') bundle exec rails assets:precompile\n\nFROM base\nUSER app\n\nCOPY --from=build /usr/local/bundle /usr/local/bundle\nCOPY --chown=app:app --from=build /app .\nENTRYPOINT [\"bundle\", \"exec\"]\nCMD [\"puma\", \"--port\", \"8080\"]\n"
}