{
  "startTime": 1674254470357,
  "endTime": 1674254472270,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 33,
        "columnEnd": 64
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 245,
        "lineEnd": 245,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 20,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n# ------ USER ROOT HAS BEEN ACTIVATED ------\n\n# use root for dependency installation:\nUSER root\n\n# ------ PART 0: set environment variables ------\n\n# set up environment:\nENV DEBIAN_FRONTEND noninteractive\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nENV HOME=/root SHELL=/bin/bash\n\n# ------ PART 1: set up CN sources ------\n\n# Ubuntu:\nCOPY ${PWD}/image/etc/apt/sources.list /etc/apt/sources.list\nRUN rm -f /etc/apt/sources.list.d/*\n\n# Python:\nCOPY ${PWD}/image/etc/pip.conf /root/.pip/pip.conf\n\n# ------ PART 2: set up apt-fast -- NEED PROXY DUE TO UNSTABLE CN CONNECTION ------\n\n# install:\nRUN apt-get update -q --fix-missing && \\\r\n    apt-get install -y --no-install-recommends --allow-unauthenticated \\\r\n        # PPA utilities:\r\n        software-properties-common \\\r\n        # certificates management:\r\n        dirmngr gnupg2 \\\r\n        # download utilities:\r\n        axel aria2 && \\\r\n    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-keys 1EE2FF37CA8DA16B && \\\r\n    add-apt-repository ppa:apt-fast/stable && \\\r\n    apt-get update -q --fix-missing && \\\r\n    apt-get install -y --no-install-recommends --allow-unauthenticated apt-fast && \\\r\n    rm -rf /var/lib/apt/lists/*\n\n# CN config:\nCOPY ${PWD}/image/etc/apt-fast.conf /etc/apt-fast.conf\n\n# ------ PART 3: add external repositories ------\n\n# ROS:\nRUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\nCOPY ${PWD}/image/etc/apt/sources.list.d/ /etc/apt/sources.list.d/\n# libsparse:\nRUN add-apt-repository -r ppa:bzindovic/suitesparse-bugfix-1319687\n\n# ------ PART 4: install packages ------\n\nRUN apt-fast update --fix-missing && \\\r\n    apt-fast install -y --no-install-recommends --allow-unauthenticated \\\r\n        # package utils:\r\n        sudo dpkg pkg-config apt-utils \\\r\n        # security:\r\n        openssh-server pwgen ca-certificates \\\r\n        # network utils:\r\n        curl wget iputils-ping net-tools \\\r\n        # command line:\r\n        vim grep sed patch \\\r\n        # io:\r\n        pv zip unzip bzip2 \\\r\n        # version control:\r\n        git mercurial subversion \\\r\n        # daemon & services:\r\n        supervisor nginx \\\r\n        # potential image & rich text IO:\r\n        lxde \\\r\n        xvfb dbus-x11 x11-utils libxext6 libsm6 x11vnc \\\r\n        gtk2-engines-pixbuf gtk2-engines-murrine pinta ttf-ubuntu-font-family \\\r\n        mesa-utils libgl1-mesa-dri libxrender1 \\\r\n        texlive-latex-extra \\\r\n        # c++:\r\n        gcc g++ \\\r\n        make cmake build-essential autoconf automake libtool \\\r\n        libglib2.0-dev libboost-dev libboost-all-dev libtbb-dev \\\r\n        # python 2:\r\n        python-pip python-dev python-tk \\\r\n        # ROS melodic:\r\n        ros-melodic-desktop-full \\\r\n        ros-melodic-rosbridge-server \\\r\n        ros-melodic-tf2 ros-melodic-tf2-ros ros-melodic-tf2-sensor-msgs \\\r\n        ros-melodic-teleop-twist-keyboard \\\r\n        python-catkin-tools python-rosdep python-rosinstall python-rosinstall-generator python-wstool \\\r\n        ninja-build \\\r\n        # development common:\r\n        lua5.3 liblua5.3-dev libluabind-dev \\\r\n        libgoogle-glog-dev \\\r\n        libsdl1.2-dev \\\r\n        libsdl-image1.2-dev \\\r\n        ros-melodic-ecl-threads \\\r\n        ros-melodic-rviz-visual-tools \\\r\n        ros-melodic-plotjuggler \\ \r\n        # numerical optimization:\r\n        coinor-libcoinutils-dev \\\r\n        coinor-libcbc-dev \\\r\n        libeigen3-dev \\\r\n        gfortran \\\r\n        libopenblas-dev liblapack-dev \\\r\n        libdw-dev libatlas-base-dev libsuitesparse-dev \\\r\n        libmetis-dev \\\r\n        # graph optimization -- https://github.com/RainerKuemmerle/g2o\r\n        # a. visualization:\r\n        libqt4-dev libqt4-opengl-dev \\\r\n        qt5-default qt5-qmake qtdeclarative5-dev libqglviewer-dev-qt5 \\\r\n        # b. numerical optimization:\r\n        libcholmod3 libcxsparse3 \\\r\n        # imu:\r\n        ros-melodic-imu-complementary-filter ros-melodic-imu-filter-madgwick ros-melodic-rviz-imu-plugin \\\r\n        # lidar:\r\n        ros-melodic-laser-pipeline \\\r\n        ros-melodic-perception-pcl \\\r\n        # GUI tools:\r\n        freeglut3-dev \\\r\n        gnuplot \\\r\n        gnome-themes-standard \\\r\n        terminator \\\r\n        firefox && \\\r\n    apt-fast autoclean && \\\r\n    apt-fast autoremove && \\\r\n    rm -rf /var/lib/apt/lists/*\n\n# ordered startup fix for supervisord:\nRUN pip install --no-cache-dir ordered-startup-supervisord\n\n# ------ PART 5: offline installers ------\n\n# load installers:\nCOPY ${PWD}/installers /tmp/installers\nWORKDIR /tmp/installers\n\n# install Google Protobuf latest:\nRUN git clone https://github.com/google/protobuf.git -o protobuf && cd protobuf && \\\r\n    # sync:\r\n    git submodule update --init --recursive && \\\r\n    # config:\r\n    ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    # build:\r\n    make -j8 && \\\n    # install:\r\n    make install\n\n# install Aceinna GNSS/IMU sim IMU-GNSS-Odo simulation with customized error modes:\nRUN git clone https://github.com/AlexGeControl/GNSS-INS-SIM-Extended.git && cd GNSS-INS-SIM-Extended && \\\r\n    # install:\r\n    python setup.py install\n\n# install GeographicLib -- https://geographiclib.sourceforge.io/html/install.html\nRUN wget https://nchc.dl.sourceforge.net/project/geographiclib/distrib/GeographicLib-1.50.1.zip && \\\r\n    unzip -q GeographicLib-1.50.1.zip && cd GeographicLib-1.50.1 && \\\r\n    mkdir build && cd build && \\\r\n    # config:\r\n    cmake .. && \\\r\n    # build:\r\n    make -j8 && \\\r\n    # install:\r\n    make install\n\n# install sophus -- https://github.com/strasdat/Sophus:\nRUN git clone https://github.com/strasdat/Sophus.git -o Sophus && cd Sophus && \\\r\n    mkdir build && cd build && \\\r\n    # config:\r\n    cmake .. && \\\r\n    # build:\r\n    make -j8 && \\\r\n    # install:\r\n    make install\n\n# install ceres:\nRUN git clone https://github.com/ceres-solver/ceres-solver.git -o ceres-solver && \\\r\n    mkdir ceres-bin && cd ceres-bin && cmake ../ceres-solver && \\\r\n    make -j8 && make install\n\n# install g2o -- https://github.com/RainerKuemmerle/g2o:\nRUN git clone https://github.com/RainerKuemmerle/g2o.git -o g2o && cd g2o && \\\r\n    mkdir build && cd build && \\\r\n    # config:\r\n    cmake .. && \\\r\n    # build:\r\n    make -j8 && \\\r\n    # install:\r\n    make install\n\n# install gtsam -- https://github.com/borglab/gtsam.git\nRUN git clone https://github.com/borglab/gtsam.git -o gtsam && cd gtsam && \\\r\n    mkdir build && cd build && \\\r\n    # config:\r\n    cmake .. && \\\r\n    # build:\r\n    make -j8 && \\\r\n    # install:\r\n    make install\n\n# install tini:\nRUN chmod u+x ./download-tini.sh && ./download-tini.sh && dpkg -i tini.deb && \\\r\n    apt-get clean\n\nRUN rm -rf /tmp/installers\n\n\n# ------ PART 6: set up ROS environments ------\n\n# initialize rosdep\n#\n# NOTE:\n# be careful about DNS resolution problem caused by https://raw.githubusercontent.com\n# get the latest IP address of the site from Baidu and Google search engine\n#\nRUN rosdep fix-permissions && \\\r\n    rosdep init && \\\r\n    rosdep update\n\n# activate ros environment:\nRUN echo \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc\n\n# for remote debugging:\nEXPOSE 11311\n\n# ------ PART 6: set up VNC servers ------\n\nCOPY image /\n\nWORKDIR /usr/lib/\n\nRUN git clone https://github.com/novnc/noVNC.git -o noVNC\n\nWORKDIR /usr/lib/noVNC/utils\n\nRUN git clone https://github.com/novnc/websockify.git -o websockify\n\nWORKDIR /usr/lib/webportal\n\nRUN pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir -r requirements.txt\n\nEXPOSE 80 5901 9001\n\n# ------ PART 7: set up Sensor Fusion courseware dependencies ------\n\nCOPY environment /workspace\n\nWORKDIR /workspace\n\nRUN pip install --no-cache-dir -r requirements.txt\n\n# ------------------ DONE -----------------------\n\n# enable dependency lib linking:\nENV LD_LIBRARY_PATH=/usr/local/lib\n\nENTRYPOINT [\"/startup.sh\"]"
}