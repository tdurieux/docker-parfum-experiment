diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/alexgecontrol/visual-inertial-odometry/cpu.Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/alexgecontrol/visual-inertial-odometry/cpu.Dockerfile/repaired.Dockerfile
index 5441548..d910de3 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/alexgecontrol/visual-inertial-odometry/cpu.Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/alexgecontrol/visual-inertial-odometry/cpu.Dockerfile/repaired.Dockerfile
@@ -1,40 +1,40 @@
-FROM ubuntu:18.04
-
-# ------ PART 0: set environment variables ------
-
-# set up environment:
-ENV DEBIAN_FRONTEND noninteractive
-ENV PATH /opt/conda/bin:$PATH
-ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
-ENV HOME=/root SHELL=/bin/bash
-
-# ------ PART 1: set up apt-fast -- NEED PROXY DUE TO UNSTABLE CN CONNECTION ------
-
-# install apt-fast:
+FROM ubuntu:18.04
+
+# ------ PART 0: set environment variables ------
+
+# set up environment:
+ENV DEBIAN_FRONTEND noninteractive
+ENV PATH /opt/conda/bin:$PATH
+ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
+ENV HOME=/root SHELL=/bin/bash
+
+# ------ PART 1: set up apt-fast -- NEED PROXY DUE TO UNSTABLE CN CONNECTION ------
+
+# install apt-fast:
 RUN apt-get update -q --fix-missing && \
     apt-get install -y --no-install-recommends --allow-unauthenticated dirmngr gnupg2 software-properties-common axel aria2 && \
     apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-keys 1EE2FF37CA8DA16B && \
     add-apt-repository ppa:apt-fast/stable && \
     apt-get update -q --fix-missing && \
     apt-get install -y --no-install-recommends --allow-unauthenticated apt-fast && \
-    rm -rf /var/lib/apt/lists/*
-
-# ------ PART 2: install packages ------
-
-# a. CN sources:
-# for Ubuntu packages:
-COPY ${PWD}/image/etc/apt/sources.list /etc/apt/sources.list
-RUN rm -f /etc/apt/sources.list.d/*
-# for Python: 
-COPY ${PWD}/image/etc/pip.conf /root/.pip/pip.conf
-# for apt-fast:
-COPY ${PWD}/image/etc/apt-fast.conf /etc/apt-fast.conf
-
-# b. external repositories:
-# libsparse:
-RUN add-apt-repository -r ppa:bzindovic/suitesparse-bugfix-1319687
-
-# install packages:
+    rm -rf /var/lib/apt/lists/*
+
+# ------ PART 2: install packages ------
+
+# a. CN sources:
+# for Ubuntu packages:
+COPY ${PWD}/image/etc/apt/sources.list /etc/apt/sources.list
+RUN rm -f /etc/apt/sources.list.d/*
+# for Python:
+COPY ${PWD}/image/etc/pip.conf /root/.pip/pip.conf
+# for apt-fast:
+COPY ${PWD}/image/etc/apt-fast.conf /etc/apt-fast.conf
+
+# b. external repositories:
+# libsparse:
+RUN add-apt-repository -r ppa:bzindovic/suitesparse-bugfix-1319687
+
+# install packages:
 RUN apt-fast update --fix-missing && \
     apt-fast install -y --no-install-recommends --allow-unauthenticated \
         # commom:
@@ -85,19 +85,19 @@ RUN apt-fast update --fix-missing && \
         libatlas-base-dev libopenblas-dev liblapacke-dev gfortran && \
     apt-fast autoclean && \
     apt-fast autoremove && \
-    rm -rf /var/lib/apt/lists/*
-
-# ------ PART 3: offline installers ------
-
-# load installers:
-COPY ${PWD}/installers /tmp/installers
-WORKDIR /tmp/installers
-
-# install tini:
+    rm -rf /var/lib/apt/lists/*
+
+# ------ PART 3: offline installers ------
+
+# load installers:
+COPY ${PWD}/installers /tmp/installers
+WORKDIR /tmp/installers
+
+# install tini:
 RUN dpkg -i tini.deb && \
-    apt-get clean
-
-# install Pangolin -- https://github.com/stevenlovegrove/Pangolin:
+    apt-get clean
+
+# install Pangolin -- https://github.com/stevenlovegrove/Pangolin:
 RUN git clone https://github.com/stevenlovegrove/Pangolin.git -o Pangolin && cd Pangolin && \
     mkdir build && cd build && \
     # config:
@@ -105,9 +105,9 @@ RUN git clone https://github.com/stevenlovegrove/Pangolin.git -o Pangolin && cd
     # build:
     cmake --build . && \
     # install:
-    make install
-
-# install sophus -- https://github.com/strasdat/Sophus:
+    make install
+
+# install sophus -- https://github.com/strasdat/Sophus:
 RUN git clone https://github.com/strasdat/Sophus.git -o Sophus && cd Sophus && \
     mkdir build && cd build && \
     # config:
@@ -115,19 +115,19 @@ RUN git clone https://github.com/strasdat/Sophus.git -o Sophus && cd Sophus && \
     # build:
     make -j8 && \
     # install:
-    make install
-
-# install ceres -- http://ceres-solver.org/installation.html:
+    make install
+
+# install ceres -- http://ceres-solver.org/installation.html:
 RUN tar zxf ceres-solver-1.14.0.tar.gz && \
     mkdir ceres-bin && cd ceres-bin && \
     # config:
     cmake ../ceres-solver-1.14.0 && \
     # build:
-    make -j8 && make test && \
+    make -j8 && make test && \
     # install:
-    make install
-
-# install g2o -- https://github.com/RainerKuemmerle/g2o:
+    make install && rm ceres-solver-1.14.0.tar.gz
+
+# install g2o -- https://github.com/RainerKuemmerle/g2o:
 RUN git clone https://github.com/RainerKuemmerle/g2o.git -o g2o && cd g2o && \
     mkdir build && cd build && \
     # config:
@@ -135,9 +135,9 @@ RUN git clone https://github.com/RainerKuemmerle/g2o.git -o g2o && cd g2o && \
     # build:
     make -j8 && \
     # install:
-    make install
-
-# install opencv -- https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv:
+    make install
+
+# install opencv -- https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv:
 RUN unzip opencv-3.4.10.zip && mv opencv-3.4.10 opencv && \
     unzip opencv_contrib-3.4.10.zip && mv opencv_contrib-3.4.10 opencv_contrib && \
     cd /tmp/installers/opencv && mkdir build && cd build && \
@@ -158,32 +158,32 @@ RUN unzip opencv-3.4.10.zip && mv opencv-3.4.10 opencv && \
     # build:
     make -j8 && \
     # install:
-    make install
-
-# install anaconda:
+    make install
+
+# install anaconda:
 RUN /bin/bash anaconda.sh -b -p /opt/conda && \
     ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
-    conda update conda
-
-# verify installations:
+    conda update conda
+
+# verify installations:
 RUN ldconfig && \
     # verify ceres:
-    pkg-config --modversion opencv
-
-# clean up:
-RUN rm -rf /tmp/installers
-
-# ------ PART 4: set up VNC servers ------
-
-COPY image /
-
-EXPOSE 80 5900 9001
-
-# ------ PART 5: set up conda environments ------
-
-# create conda environment for tic analysis:
-WORKDIR /workspace
-
-# ------------------ DONE -----------------------
-
-ENTRYPOINT ["/startup.sh"]
+    pkg-config --modversion opencv
+
+# clean up:
+RUN rm -rf /tmp/installers
+
+# ------ PART 4: set up VNC servers ------
+
+COPY image /
+
+EXPOSE 80 5900 9001
+
+# ------ PART 5: set up conda environments ------
+
+# create conda environment for tic analysis:
+WORKDIR /workspace
+
+# ------------------ DONE -----------------------
+
+ENTRYPOINT ["/startup.sh"]