{
  "startTime": 1674251776655,
  "endTime": 1674251779154,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n# ------ PART 0: set environment variables ------\n\n# set up environment:\nENV DEBIAN_FRONTEND noninteractive\nENV PATH /opt/conda/bin:$PATH\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nENV HOME=/root SHELL=/bin/bash\n\n# ------ PART 1: set up apt-fast -- NEED PROXY DUE TO UNSTABLE CN CONNECTION ------\n\n# install apt-fast:\nRUN apt-get update -q --fix-missing && \\\r\n    apt-get install -y --no-install-recommends --allow-unauthenticated dirmngr gnupg2 software-properties-common axel aria2 && \\\r\n    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-keys 1EE2FF37CA8DA16B && \\\r\n    add-apt-repository ppa:apt-fast/stable && \\\r\n    apt-get update -q --fix-missing && \\\r\n    apt-get install -y --no-install-recommends --allow-unauthenticated apt-fast && \\\r\n    rm -rf /var/lib/apt/lists/*\n\n# ------ PART 2: install packages ------\n\n# a. CN sources:\n# for Ubuntu packages:\nCOPY ${PWD}/image/etc/apt/sources.list /etc/apt/sources.list\nRUN rm -f /etc/apt/sources.list.d/*\n# for Python:\nCOPY ${PWD}/image/etc/pip.conf /root/.pip/pip.conf\n# for apt-fast:\nCOPY ${PWD}/image/etc/apt-fast.conf /etc/apt-fast.conf\n\n# b. external repositories:\n# libsparse:\nRUN add-apt-repository -r ppa:bzindovic/suitesparse-bugfix-1319687\n\n# install packages:\nRUN apt-fast update --fix-missing && \\\r\n    apt-fast install -y --no-install-recommends --allow-unauthenticated \\\r\n        # commom:\r\n        sudo dpkg pkg-config \\\r\n        net-tools curl wget \\\r\n        bzip2 unzip \\\r\n        openssh-server pwgen ca-certificates \\\r\n        supervisor nginx \\\r\n        lxde x11vnc xvfb \\\r\n        ttf-ubuntu-font-family \\\r\n        mesa-utils libgl1-mesa-dri libgl1-mesa-dev libglew-dev freeglut3-dev \\\r\n        libgtk-3-dev gtk3-engines-breeze gtk3-engines-unico gtk3-engines-xfce gnome-themes-standard pinta \\\r\n        libglib2.0-0 libxext6 libsm6 libxrender1 \\\r\n        dbus-x11 x11-utils \\\r\n        grep sed vim terminator firefox \\\r\n        # version control:\r\n        git mercurial subversion \\\r\n        # LaTeX:\r\n        texlive-latex-extra \\\r\n        # c++:\r\n        cmake gcc g++ build-essential libboost-dev libboost-all-dev libtbb-dev \\\r\n        # python3:\r\n        python3-pip python3-dev python3-numpy \\\r\n        # 1. ceres -- http://ceres-solver.org/installation.html:\r\n        # a. google-glog + gflags:\r\n        libgoogle-glog-dev \\\r\n        # b. BLAS & LAPACK:\r\n        libatlas-base-dev \\\r\n        # c. Eigen3\r\n        libeigen3-dev \\\r\n        # d. SuiteSparse and CXSparse (optional)\r\n        libsuitesparse-dev libdw-dev \\\r\n        # 2. g2o -- https://github.com/RainerKuemmerle/g2o\r\n        # a. visualization:\r\n        qt5-qmake qtdeclarative5-dev libqglviewer-dev-qt5 \\\r\n        # b. numerical optimization:\r\n        libeigen3-dev libcholmod3 libcxsparse3 libsuitesparse-dev \\\r\n        # 3. OpenCV -- https://docs.opencv.org/3.4/d2/de6/tutorial_py_setup_in_ubuntu.html:\r\n        # a. basic I/O:\r\n        libhdf5-serial-dev libprotobuf-dev protobuf-compiler \\\r\n        # b. image I/O:\r\n        libjpeg-dev libpng-dev libtiff-dev libopenexr-dev libwebp-dev libjasper1 libjasper-dev \\\r\n        # c. video I/O:\r\n        libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev \\\r\n        libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev \\\r\n        libavresample-dev \\\r\n        # d. numerial:\r\n        libatlas-base-dev libopenblas-dev liblapacke-dev gfortran && \\\r\n    apt-fast autoclean && \\\r\n    apt-fast autoremove && \\\r\n    rm -rf /var/lib/apt/lists/*\n\n# ------ PART 3: offline installers ------\n\n# load installers:\nCOPY ${PWD}/installers /tmp/installers\nWORKDIR /tmp/installers\n\n# install tini:\nRUN dpkg -i tini.deb && \\\r\n    apt-get clean\n\n# install Pangolin -- https://github.com/stevenlovegrove/Pangolin:\nRUN git clone https://github.com/stevenlovegrove/Pangolin.git -o Pangolin && cd Pangolin && \\\r\n    mkdir build && cd build && \\\r\n    # config:\r\n    cmake .. && \\\r\n    # build:\r\n    cmake --build . && \\\r\n    # install:\r\n    make install\n\n# install sophus -- https://github.com/strasdat/Sophus:\nRUN git clone https://github.com/strasdat/Sophus.git -o Sophus && cd Sophus && \\\r\n    mkdir build && cd build && \\\r\n    # config:\r\n    cmake .. && \\\r\n    # build:\r\n    make -j8 && \\\r\n    # install:\r\n    make install\n\n# install ceres -- http://ceres-solver.org/installation.html:\nRUN tar zxf ceres-solver-1.14.0.tar.gz && \\\r\n    mkdir ceres-bin && cd ceres-bin && \\\r\n    # config:\r\n    cmake ../ceres-solver-1.14.0 && \\\r\n    # build:\r\n    make -j8 && make test && \\\n    # install:\r\n    make install && rm ceres-solver-1.14.0.tar.gz\n\n# install g2o -- https://github.com/RainerKuemmerle/g2o:\nRUN git clone https://github.com/RainerKuemmerle/g2o.git -o g2o && cd g2o && \\\r\n    mkdir build && cd build && \\\r\n    # config:\r\n    cmake .. && \\\r\n    # build:\r\n    make -j8 && \\\r\n    # install:\r\n    make install\n\n# install opencv -- https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv:\nRUN unzip opencv-3.4.10.zip && mv opencv-3.4.10 opencv && \\\r\n    unzip opencv_contrib-3.4.10.zip && mv opencv_contrib-3.4.10 opencv_contrib && \\\r\n    cd /tmp/installers/opencv && mkdir build && cd build && \\\r\n    # config:\r\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\r\n    -D CMAKE_INSTALL_PREFIX=/usr/local \\\r\n    -D WITH_CUDA=OFF \\\r\n    # built for Python3:\r\n    -D HAVE_opencv_python3=ON \\\r\n    -D BUILD_NEW_PYTHON_SUPPORT=ON \\\r\n    -D BUILD_opencv_python3=ON \\\r\n    -D INSTALL_PYTHON_EXAMPLES=ON \\\r\n    -D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \\\r\n    # contrib modules:\r\n    -D OPENCV_EXTRA_MODULES_PATH=/tmp/installers/opencv_contrib/modules \\\r\n    -D OPENCV_ENABLE_NONFREE=ON \\\r\n    -D BUILD_EXAMPLES=ON .. && \\\r\n    # build:\r\n    make -j8 && \\\r\n    # install:\r\n    make install\n\n# install anaconda:\nRUN /bin/bash anaconda.sh -b -p /opt/conda && \\\r\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\r\n    conda update conda\n\n# verify installations:\nRUN ldconfig && \\\r\n    # verify ceres:\r\n    pkg-config --modversion opencv\n\n# clean up:\nRUN rm -rf /tmp/installers\n\n# ------ PART 4: set up VNC servers ------\n\nCOPY image /\n\nEXPOSE 80 5900 9001\n\n# ------ PART 5: set up conda environments ------\n\n# create conda environment for tic analysis:\nWORKDIR /workspace\n\n# ------------------ DONE -----------------------\n\nENTRYPOINT [\"/startup.sh\"]\n"
}