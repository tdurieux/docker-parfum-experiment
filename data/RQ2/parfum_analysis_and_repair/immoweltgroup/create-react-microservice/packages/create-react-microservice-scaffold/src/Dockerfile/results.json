{
  "startTime": 1674249518880,
  "endTime": 1674249519864,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# @company-scope/my-fancy-ui\n# Please be cautious when adding new instructions,\n# this Dockerfile is optimized for dockers caching abilities as best as possible.\n#\nFROM immowelt/node-alpine:8\n\n#\n# Enable yarn's workspace feature\n#\nRUN yarn config set workspaces-experimental true && yarn cache clean;\n\nARG NODE_ENV=production\nENV NODE_ENV=production\nARG BABEL_ENV=production\nENV BABEL_ENV=production\n\nEXPOSE 8080\n\nCMD [ \"yarn\", \"start\" ]\n\n#\n# Create the app directory inside the container.\n#\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\n#\n# Install the dependencies only if the yarn.lock has been changed, otherwise use the docker cache layer of the previously built container.\n#\nCOPY yarn.lock /usr/src/app/\nCOPY package.json /usr/src/app/\n\n#\n# Copy the source files, install again to setup all symlinks and bootstrap the mono-repo and afterwards build and bootstrap the service.\n#\nCOPY . /usr/src/app\nRUN yarn install && yarn cache clean;\nRUN yarn run bootstrap\n"
}