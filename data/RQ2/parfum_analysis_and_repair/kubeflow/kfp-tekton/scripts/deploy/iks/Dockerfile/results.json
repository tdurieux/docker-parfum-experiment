{
  "startTime": 1674255151873,
  "endTime": 1674255153147,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 38,
        "columnEnd": 56
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nRUN set -xe  \\\n\t&& echo '#!/bin/sh' > /usr/sbin/policy-rc.d  \\\n\t&& echo 'exit 101' >> /usr/sbin/policy-rc.d  \\\n\t&& chmod +x /usr/sbin/policy-rc.d  \\\n\t&& dpkg-divert --local --rename --add /sbin/initctl  \\\n\t&& cp -a /usr/sbin/policy-rc.d /sbin/initctl  \\\n\t&& sed -i 's/^exit.*/exit 0/' /sbin/initctl  \\\n\t&& echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup  \\\n\t&& echo 'DPkg::Post-Invoke { \"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\"; };' > /etc/apt/apt.conf.d/docker-clean  \\\n\t&& echo 'APT::Update::Post-Invoke { \"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\"; };' >> /etc/apt/apt.conf.d/docker-clean  \\\n\t&& echo 'Dir::Cache::pkgcache \"\"; Dir::Cache::srcpkgcache \"\";' >> /etc/apt/apt.conf.d/docker-clean  \\\n\t&& echo 'Acquire::Languages \"none\";' > /etc/apt/apt.conf.d/docker-no-languages  \\\n\t&& echo 'Acquire::GzipIndexes \"true\"; Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/docker-gzip-indexes  \\\n\t&& echo 'Apt::AutoRemove::SuggestsImportant \"false\";' > /etc/apt/apt.conf.d/docker-autoremove-suggests\nRUN [ -z \"$(apt-get indextargets)\" ]\nRUN mkdir -p /run/systemd  \\\n\t&& echo 'docker' > /run/systemd/container\nCMD [\"/bin/bash\"]\nENV DEBIAN_FRONTEND=noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN=true\n\nRUN apt-get -q update \\\n\t&& apt-get install --no-install-recommends -y apt-utils apt-transport-https ca-certificates curl software-properties-common \\\n\t&& curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \\\n\t&& add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" \\\n\t&& add-apt-repository ppa:deadsnakes/ppa && rm -rf /var/lib/apt/lists/*;\nRUN apt-get -q update  \\\n\t&& apt-get upgrade -y  \\\n\t&& apt-get -q clean \\\n\t&& apt-get -q --no-install-recommends install -y sudo apt-transport-https zip unzip bzip2 xz-utils git \\\n\tdnsutils gettext wget build-essential openssl locales make docker-ce python3-pip \\\n\tpython3.8 python3.8-venv \\\n\t&& update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 9 \\\n\t&& update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 \\\n\t&& curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash \\\n\t&& apt-get -q -y --no-install-recommends install git-lfs \\\n\t&& git lfs install \\\n\t&& apt-get -q clean \\\n\t&& rm -rf /var/lib/apt/lists \\\n\t&& locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\nRUN wget https://github.com/mikefarah/yq/releases/download/v4.5.1/yq_linux_amd64.tar.gz -O - | \\\n\ttar xz && mv yq_linux_amd64 /usr/bin/yq\nENV LANG=en_US.UTF-8\nRUN git config --global http.sslverify false  \\\n\t&& git config --global url.\"https://\".insteadOf git://  \\\n\t&& git config --global http.postBuffer 1048576000\n\nRUN pip3 install --no-cache-dir -U pip setuptools && pip3 install --no-cache-dir wheel\n\nENV NODE_VERSION=v12.20.1\nRUN curl -f -l https://raw.githubusercontent.com/creationix/nvm/v0.35.3/install.sh -o /tmp/install.sh \\\n\t&& chmod a+x /tmp/install.sh \\\n\t&& /tmp/install.sh \\\n\t&& rm /tmp/install.sh \\\n\t&& . /root/.nvm/nvm.sh \\\n\t&& nvm install $NODE_VERSION \\\n\t&& nvm alias default $NODE_VERSION \\\n\t&& cd ~/.nvm/versions/node/$NODE_VERSION/lib/ \\\n\t&& npm install npm && npm cache clean --force;\n\nARG GO_VERSION=1.15.7\nRUN curl -f -L https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz \\\n    && mv go/ /usr/local/ \\\n\t&& echo \"export GOPATH=\\$HOME/go\" >> ~/.bashrc \\\n\t&& echo \"export PATH=\\$PATH:/usr/local/go/bin:\\$GOPATH/bin\" >> ~/.bashrc\n\nARG KUBECTL_VERSION=v1.18.15\nRUN wget --quiet --output-document=/usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl  \\\n\t&& chmod +x /usr/local/bin/kubectl\n\nRUN wget --quiet --output-document=/usr/local/bin/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.2.1/kustomize_kustomize.v3.2.1_linux_amd64 \\\n\t&& chmod +x /usr/local/bin/kustomize\n\nRUN curl -f -L https://github.com/tektoncd/cli/releases/download/v0.11.0/tkn_0.11.0_Linux_x86_64.tar.gz | tar -xz tkn \\\n    && mv tkn /usr/local/bin/\n\nARG HELM2_VERSION=v2.17.0\nARG HELM3_VERSION=v3.4.2\nRUN mkdir -p /tmp/helm_install \\\n\t&& curl -f https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh \\\n\t&& chmod 700 get_helm.sh \\\n\t&& ./get_helm.sh --version ${HELM2_VERSION} \\\n\t&& mv /usr/local/bin/helm /usr/local/bin/helm2 \\\n\t&& ./get_helm.sh --version ${HELM3_VERSION} \\\n\t&& mv /usr/local/bin/helm /usr/local/bin/helm3 \\\n\t&& ln -s /usr/local/bin/helm2 /usr/local/bin/helm \\\n\t&& rm -rf /tmp/helm*\n\nARG JQ_VERSION=1.6\nRUN wget --no-check-certificate https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64 -O /tmp/jq-linux64  \\\n\t&& cp /tmp/jq-linux64 /usr/bin/jq  \\\n\t&& chmod +x /usr/bin/jq  \\\n\t&& rm -f /tmp/jq-linux64\n\nARG IBMCLOUD_VERSION=1.3.0\nRUN wget --quiet -O /tmp/Bluemix_CLI.tar.gz https://download.clis.cloud.ibm.com/ibm-cloud-cli/${IBMCLOUD_VERSION}/IBM_Cloud_CLI_${IBMCLOUD_VERSION}_amd64.tar.gz  \\\n\t&& tar -xzvf /tmp/Bluemix_CLI.tar.gz -C /tmp  \\\n\t&& export PATH=/opt/IBM/cf/bin:$PATH  \\\n\t&& /tmp/Bluemix_CLI/install_bluemix_cli  \\\n\t&& rm -rf /tmp/Bluemix_CLI*  \\\n\t&& ibmcloud config --check-version false  \\\n\t&& mkdir -p /usr/local/Bluemix/bin/cfcli \\\n\t&& mkdir -p /usr/local/ibmcloud/bin/cfcli && rm /tmp/Bluemix_CLI.tar.gz\n\nRUN ibmcloud plugin install container-service -r Bluemix -v 1.0.208  \\\n\t&& ibmcloud plugin install container-registry -r Bluemix -v 0.1.497  \\\n\t&& ibmcloud plugin install cloud-functions -r Bluemix -v 1.0.49  \\\n\t&& ibmcloud plugin install schematics -r Bluemix -v 1.4.25  \\\n\t&& ibmcloud plugin install doi -r Bluemix -v 0.2.9  \\\n\t&& ibmcloud plugin install cis -r Bluemix -v 1.11.0  \\\n\t&& ibmcloud cf install -v 6.51.0 --force\n\nRUN ln -s /usr/local/ibmcloud/bin/cfcli/cf /usr/local/Bluemix/bin/cfcli/cf  \\\n\t&& ln -s /usr/local/ibmcloud/bin/cfcli/cf /usr/local/bin/cf  \\\n\t&& ln -s /usr/local/ibmcloud/bin/ibmcloud /usr/local/bin/ic\n\nENV TMPDIR=/tmp\nENV HOME=/root\nENV PATH=/root/.nvm/versions/node/${NODE_VERSION}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin:/root/go/bin\nENV BASH_ENV=/root/.bashrc\n"
}