{
  "startTime": 1674247994656,
  "endTime": 1674247995957,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# refs: https://github.com/tootsuite/mastodon\n# refs: https://qiita.com/baban/items/99877f9b3065c4cf3d50\n\nFROM node:8.9.4-alpine as node\n\nFROM ruby:2.5.3-alpine as builder\n\nRUN apk --update --no-cache add bash bash-completion\n\n# Use bash for the shell\nSHELL [\"bash\", \"-c\"]\n\n# build deps package install\n# gcc, git etc ...\nRUN apk --update --no-cache add shadow sudo busybox-suid postgresql-dev tzdata alpine-sdk\n\nCOPY Gemfile Gemfile.lock /opt/rebacklogs/\n\nWORKDIR /opt/rebacklogs\n\nCOPY --from=node /usr/local/bin/node /usr/local/bin/node\nCOPY --from=node /usr/local/include/node /usr/local/include/node\nCOPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules\nRUN ln -s /usr/local/bin/node /usr/local/bin/nodejs && \\\n    ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm\n\nRUN gem install bundler --version 1.17.3 && \\\n    bundle install --without development test --path vendor/bundle && \\\n    find vendor/bundle/ruby -path '*/gems/*/ext/*/Makefile' -exec dirname {} \\; | xargs -n1 -P$(nproc) -I{} make -C {} clean\n\nRUN cd /opt/rebacklogs && \\\n\tbundle install -j$(nproc) --deployment --without development test\n\n# yarn install\nRUN npm install -g yarn && npm cache clean --force;\nCOPY package.json yarn.lock /opt/rebacklogs/\nRUN yarn install --pure-lockfile && yarn cache clean;\n\n# assets precompile\nCOPY . /opt/rebacklogs/\n# Run rebacklogs services in prod mode\nENV RAILS_ENV=\"production\"\nENV NODE_ENV=\"production\"\n# FOR DEBUG\n# RUN cd ~ && NODE_OPTIONS=\"--max-old-space-size=4096\" NODE_ENV=production ./bin/webpack --progress --config config/webpack/production.js\nRUN cd /opt/rebacklogs && \\\n  SECRET_KEY_BASE=precompile_placeholder bin/rails assets:precompile\n\nFROM ruby:2.5.3-alpine\n\n# install rails require minimum package\nRUN apk --update --no-cache add \\\n    shadow sudo busybox-suid \\\n    execline tzdata postgresql-dev openssl && \\\n    echo \"Etc/UTC\" > /etc/localtime\n\n# for docker-compose\nENV DOCKERIZE_VERSION v0.6.1\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\n# Create the rebacklogs user\nARG UID=991\nARG GID=991\nRUN apk update && \\\n  apk --update --no-cache add bash bash-completion tini && \\\n\taddgroup --gid $GID rebacklogs && \\\n\tuseradd -m -u $UID -g $GID -d /opt/rebacklogs rebacklogs && \\\n\techo \"rebacklogs:`head /dev/urandom | tr -dc A-Za-z0-9 | head -c 24 | mkpasswd -s -m sha-256`\" | chpasswd\n\nEXPOSE 3000\n\nWORKDIR /opt/rebacklogs\n\n# Copy gem and assets:precompile from builder image\nCOPY --chown=rebacklogs:rebacklogs --from=builder /opt/rebacklogs/vendor/bundle vendor/bundle\nCOPY --chown=rebacklogs:rebacklogs --from=builder /usr/local/bundle /usr/local/bundle\n\nCOPY --chown=rebacklogs:rebacklogs --from=builder /opt/rebacklogs/public/assets/ /opt/rebacklogs/public/assets/\nCOPY --chown=rebacklogs:rebacklogs --from=builder /opt/rebacklogs/public/packs/ /opt/rebacklogs/public/packs/\n\n# Copy Re:Backlogs Source Code\nCOPY --chown=rebacklogs:rebacklogs . /opt/rebacklogs\n\n# Tell rails to serve static files\nENV RAILS_ENV=\"production\"\nENV RAILS_SERVE_STATIC_FILES=\"true\"\nENV BIND=\"0.0.0.0\"\n\n# Set the run user\nUSER rebacklogs\n\n# Set the work dir and the container entry point\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n"
}