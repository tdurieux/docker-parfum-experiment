{
  "startTime": 1674248984068,
  "endTime": 1674248985055,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 43,
        "columnStart": 47,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -------------------\n# The build container\n# -------------------\nFROM debian:buster-slim AS build\n\n# Install build dependencies.\nRUN apt-get update && \\\n  apt-get install -y --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    git \\\n    libusb-1.0-0-dev \\\n    pkg-config \\\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-wheel && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Compile and install rtl-sdr.\nRUN git clone https://github.com/steve-m/librtlsdr.git /root/librtlsdr && \\\n  mkdir -p /root/librtlsdr/build && \\\n  cd /root/librtlsdr/build && \\\n  cmake -DCMAKE_INSTALL_PREFIX=/root/target/usr/local -Wno-dev ../ && \\\n  make && \\\n  make install && \\\n  rm -rf /root/librtlsdr\n\n# Compile and install ssdv.\nRUN git clone https://github.com/fsphil/ssdv.git /root/ssdv && \\\n  cd /root/ssdv && \\\n  make && \\\n  DESTDIR=/root/target make install && \\\n  rm -rf /root/ssdv\n\n# Install Python packages.\nRUN --mount=type=cache,target=/root/.cache/pip pip3 install --no-cache-dir \\\n  --user --no-warn-script-location --ignore-installed --no-binary numpy \\\n    crcmod \\\n    flask \\\n    flask-socketio \\\n    requests \\\n    numpy\n\n# Copy in radiosonde_auto_rx.\nCOPY . /root/wenet\n\n# Build the binaries.\nWORKDIR /root/wenet/src\nRUN make\n\n# -------------------------\n# The application container\n# -------------------------\nFROM debian:buster-slim\n\nEXPOSE 5003/tcp\n\n# Install application dependencies.\nRUN apt-get update && \\\n  apt-get install -y --no-install-recommends \\\n  bc \\\n  libusb-1.0-0 \\\n  python3 \\\n  tini && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Copy compiled dependencies from the build container.\nCOPY --from=build /root/target /\nRUN ldconfig\n\n# Copy any additional Python packages from the build container.\nCOPY --from=build /root/.local /root/.local\n\n# Copy wenet from the build container to /opt.\nCOPY --from=build /root/wenet/rx/ /opt/wenet/\nCOPY --from=build /root/wenet/LICENSE.txt /opt/wenet/\n\n# Set the working directory.\nWORKDIR /opt/wenet\n\n# Ensure scripts from Python packages are in PATH.\nENV PATH=/root/.local/bin:$PATH\n\n# Use tini as init.\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\n\n# Run start_rx_docker.sh.\nCMD [\"/opt/wenet/start_rx_docker.sh\"]\n"
}