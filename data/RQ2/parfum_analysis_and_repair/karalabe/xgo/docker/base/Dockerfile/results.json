{
  "startTime": 1674251062697,
  "endTime": 1674251063581,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 38,
        "columnStart": 2,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Go cross compiler (xgo): Base cross-compilation layer\n# Copyright (c) 2014 Péter Szilágyi. All rights reserved.\n#\n# Released under the MIT license.\n\nFROM ubuntu:16.04\n\nMAINTAINER Péter Szilágyi <peterke@gmail.com>\n\n# Mark the image as xgo enabled to support xgo-in-xgo\nENV XGO_IN_XGO 1\n\n\n# Configure the Go environment, since it's not going to change\nENV PATH   /usr/local/go/bin:$PATH\nENV GOPATH /go\n\n\n# Inject the remote file fetcher and checksum verifier\nADD fetch.sh /fetch.sh\nENV FETCH /fetch.sh\nRUN chmod +x $FETCH\n\n\n# Make sure apt-get is up to date and dependent packages are installed\nRUN \\\n  apt-get update && \\\n  apt-get install -y automake autogen build-essential ca-certificates                    \\\n    gcc-5-arm-linux-gnueabi g++-5-arm-linux-gnueabi libc6-dev-armel-cross                \\\n    gcc-5-arm-linux-gnueabihf g++-5-arm-linux-gnueabihf libc6-dev-armhf-cross            \\\n    gcc-5-aarch64-linux-gnu g++-5-aarch64-linux-gnu libc6-dev-arm64-cross                \\\n    gcc-5-mips-linux-gnu g++-5-mips-linux-gnu libc6-dev-mips-cross                       \\\n    gcc-5-mipsel-linux-gnu g++-5-mipsel-linux-gnu libc6-dev-mipsel-cross                 \\\n    gcc-5-mips64-linux-gnuabi64 g++-5-mips64-linux-gnuabi64 libc6-dev-mips64-cross       \\\n    gcc-5-mips64el-linux-gnuabi64 g++-5-mips64el-linux-gnuabi64 libc6-dev-mips64el-cross \\\n    gcc-5-multilib g++-5-multilib gcc-mingw-w64 g++-mingw-w64 clang llvm-dev             \\\n    libtool libxml2-dev uuid-dev libssl-dev swig openjdk-8-jdk pkg-config patch          \\\n    make xz-utils cpio wget zip unzip p7zip git mercurial bzr texinfo help2man           \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# Fix any stock package issues\nRUN ln -s /usr/include/asm-generic /usr/include/asm\n\n# Configure the container for OSX cross compilation\nENV OSX_SDK     MacOSX10.11.sdk\nENV OSX_NDK_X86 /usr/local/osx-ndk-x86\n\nRUN \\\n  OSX_SDK_PATH=https://s3.dockerproject.org/darwin/v2/$OSX_SDK.tar.xz && \\\n  $FETCH $OSX_SDK_PATH dd228a335194e3392f1904ce49aff1b1da26ca62       && \\\n  \\\n  git clone https://github.com/tpoechtrager/osxcross.git && \\\n  mv `basename $OSX_SDK_PATH` /osxcross/tarballs/        && \\\n  \\\n  sed -i -e 's|-march=native||g' /osxcross/build_clang.sh /osxcross/wrapper/build.sh && \\\n  UNATTENDED=yes OSX_VERSION_MIN=10.6 /osxcross/build.sh                             && \\\n  mv /osxcross/target $OSX_NDK_X86                                                   && \\\n  \\\n  rm -rf /osxcross\n\nADD patch.tar.xz $OSX_NDK_X86/SDK/$OSX_SDK/usr/include/c++\nENV PATH $OSX_NDK_X86/bin:$PATH\n\n# Configure the container for iOS cross compilation\nENV IOS_NDK_ARM_7     /usr/local/ios-ndk-arm-7\nENV IOS_NDK_ARM64     /usr/local/ios-ndk-arm64\nENV IOS_SIM_NDK_AMD64 /usr/local/ios-sim-ndk-amd64\n\nADD update_ios.sh /update_ios.sh\nENV UPDATE_IOS /update_ios.sh\nRUN chmod +x $UPDATE_IOS\n\nRUN \\\n  IOS_SDK_PATH=https://sdks.website/dl/iPhoneOS9.3.sdk.tbz2     && \\\n  $FETCH $IOS_SDK_PATH db5ecf91617abf26d3db99e769bd655b943905e5 && \\\n  mv `basename $IOS_SDK_PATH` iPhoneOS9.3.sdk.tar.bz2           && \\\n  $UPDATE_IOS /iPhoneOS9.3.sdk.tar.bz2                          && \\\n  rm -rf /iPhoneOS9.3.sdk.tar.bz2\n\n# Configure the container for Android cross compilation\nENV ANDROID_NDK         android-ndk-r11c\nENV ANDROID_NDK_PATH    http://dl.google.com/android/repository/$ANDROID_NDK-linux-x86_64.zip\nENV ANDROID_NDK_ROOT    /usr/local/$ANDROID_NDK\nENV ANDROID_NDK_LIBC    $ANDROID_NDK_ROOT/sources/cxx-stl/gnu-libstdc++/4.9\nENV ANDROID_PLATFORM    21\nENV ANDROID_CHAIN_ARM   arm-linux-androideabi-4.9\nENV ANDROID_CHAIN_ARM64 aarch64-linux-android-4.9\nENV ANDROID_CHAIN_386   x86-4.9\n\nRUN \\\n  $FETCH $ANDROID_NDK_PATH de5ce9bddeee16fb6af2b9117e9566352aa7e279 && \\\n  unzip `basename $ANDROID_NDK_PATH` \\\n    \"$ANDROID_NDK/build/*\"                                           \\\n    \"$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.9/include/*\"       \\\n    \"$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi*/*\" \\\n    \"$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.9/libs/arm64*/*\"   \\\n    \"$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.9/libs/x86/*\"      \\\n    \"$ANDROID_NDK/prebuilt/linux-x86_64/*\"                           \\\n    \"$ANDROID_NDK/platforms/*/arch-arm/*\"                            \\\n    \"$ANDROID_NDK/platforms/*/arch-arm64/*\"                          \\\n    \"$ANDROID_NDK/platforms/*/arch-x86/*\"                            \\\n    \"$ANDROID_NDK/toolchains/$ANDROID_CHAIN_ARM/*\"                   \\\n    \"$ANDROID_NDK/toolchains/$ANDROID_CHAIN_ARM64/*\"                 \\\n    \"$ANDROID_NDK/toolchains/$ANDROID_CHAIN_386/*\" -d /usr/local > /dev/null && \\\n  rm -f `basename $ANDROID_NDK_PATH`\n\nENV PATH /usr/$ANDROID_CHAIN_ARM/bin:$PATH\nENV PATH /usr/$ANDROID_CHAIN_ARM64/bin:$PATH\nENV PATH /usr/$ANDROID_CHAIN_386/bin:$PATH\n\n# Inject the old Go package downloader and tool-chain bootstrapper\nADD bootstrap.sh /bootstrap.sh\nENV BOOTSTRAP /bootstrap.sh\nRUN chmod +x $BOOTSTRAP\n\n# Inject the new Go root distribution downloader and bootstrapper\nADD bootstrap_pure.sh /bootstrap_pure.sh\nENV BOOTSTRAP_PURE /bootstrap_pure.sh\nRUN chmod +x $BOOTSTRAP_PURE\n\n# Inject the Go source distribution downloader and bootstrapper\nADD bootstrap_repo.sh /bootstrap_repo.sh\nENV BOOTSTRAP_REPO /bootstrap_repo.sh\nRUN chmod +x $BOOTSTRAP_REPO\n\n# Inject the C dependency cross compiler\nADD build_deps.sh /build_deps.sh\nENV BUILD_DEPS /build_deps.sh\nRUN chmod +x $BUILD_DEPS\n\n# Inject the container entry point, the build script\nADD build.sh /build.sh\nENV BUILD /build.sh\nRUN chmod +x $BUILD\n\nENTRYPOINT [\"/build.sh\"]\n"
}