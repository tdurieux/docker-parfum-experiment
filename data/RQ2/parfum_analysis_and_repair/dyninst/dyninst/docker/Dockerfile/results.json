{
  "startTime": 1674250255540,
  "endTime": 1674250256475,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 73
      }
    }
  ],
  "repairedDockerfile": "ARG ubuntu_version=20.04\nFROM ubuntu:${ubuntu_version}\n\n# Build the Dockerfile in this directory, context one level up\n# docker build -t dyninst -f Dockerfile ../\n\nLABEL maintainer=\"@hainest,@vsoch\"\n\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=America/Los_Angeles\n\n# We can use build args to populate the specific versions of dependencies (with defaults here)\nARG BOOST_VERSION=1.71.0\nARG ELFUTILS_VERSION=0.186\nARG LIBIBERTY_VERSION=2.33.1\nARG INTELTBB_VERSION=2020.3\nARG PERL_VERSION=5.30.0\nARG CMAKE_VERSION=3.16.3\n\n# Set the branch name for spack to use (should be master even for PR)\nARG DYNINST_BRANCH=master\nENV DYNINST_BRANCH=${DYNINST_BRANCH}\n\n# Args need to be passed into envars to be used in RUN\nENV BOOST_VERSION=${BOOST_VERSION}\nENV ELFUTILS_VERSION=${ELFUTILS_VERSION}\nENV LIBIBERTY_VERSION=${LIBIBERTY_VERSION}\nENV INTELTBB_VERSION=${INTELTBB_VERSION}\nENV PERL_VERSION=${PERL_VERSION}\nENV CMAKE_VERSION=${CMAKE_VERSION}\n\nRUN apt-get -qq update && \\\n    apt-get -qq --no-install-recommends install -fy tzdata && \\\n    apt-get -qq install -y --no-install-recommends \\\n      build-essential \\\n      bzip2 \\\n      ca-certificates \\\n      curl \\\n      dh-autoreconf \\\n      git \\\n      gnupg2 \\\n      lcov \\\n      libssl-dev \\\n      ninja-build \\\n      pkg-config \\\n      python-dev \\ \n      python3-pip \\\n      sudo \\\n      valgrind \\\n      vim \\\n      wget \\\n      xsltproc \\\n      cmake \\\n      libboost1.71-all-dev \\\n      libtbb-dev \\\n      libxml2-dev \\\n      m4 \\\n      libncurses-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install Clingo for Spack\nRUN python3 -m pip install --upgrade pip && \\\n    python3 -m pip install clingo && \\\n    dpkg-reconfigure tzdata\n\n# Update gcc to 11.1.1 (otherwise we'd have 9.3.0)\nRUN apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository 'deb http://mirrors.kernel.org/ubuntu hirsute main universe' && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y gcc-11 g++-11 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 70 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9 --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-9 --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-9 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11 --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-11 --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-11; rm -rf /var/lib/apt/lists/*;\n\n# Install spack\nWORKDIR /opt\nRUN git clone --depth 1 https://github.com/spack/spack\nENV PATH=/opt/spack/bin:$PATH\n\n# Install the boto3 package for using AWS services\n# spack uses this for its binary caches\nRUN python3 -m pip install botocore boto3\n\n# Find packages already installed on system, e.g. autoconf\nRUN spack external find --not-buildable gcc@11.0.1 autoconf bzip2 git tar xz perl cmake m4 ncurses && \\\n    spack config add 'packages:all:target:[x86_64]'\n\n# 'spack external find' doesn't work on libraries\nRUN printf \"\\n\\\n  boost:\\n\\\n    externals:\\n\\\n    - spec: boost@${BOOST_VERSION}\\n\\\n      prefix: /usr\\n\\\n    buildable: false\\n\\\n  intel-tbb:\\n\\\n    externals:\\n\\\n    - spec: intel-tbb@${INTELTBB_VERSION}\\n\\\n      prefix: /usr\\n\\\n    buildable: false\\n\\\n  libxml2:\\n\\\n    externals:\\n\\\n    - spec: libxml2@2.19.10\\n\\\n      prefix: /usr\\n\\\n    buildable: false\\n\\\n\" >> ~/.spack/packages.yaml\n\n# Add Dyninst source code here (e.g., from PR or master)\nWORKDIR /code\nCOPY . /code\n\n# Install Dyninst to its own view\nWORKDIR /opt/dyninst-env\nRUN . /opt/spack/share/spack/setup-env.sh && \\\n    spack env create -d . && \\\n    echo \"  concretization: together\" >> spack.yaml && \\\n    spack env activate . && \\\n    spack add cmake@${CMAKE_VERSION} && \\\n    spack add perl@${PERL_VERSION} && \\\n    spack add boost@${BOOST_VERSION} && \\\n    spack add elfutils@${ELFUTILS_VERSION} && \\\n    spack add libiberty@${LIBIBERTY_VERSION}+pic && \\\n    spack add intel-tbb@${INTELTBB_VERSION} && \\\n    spack install --reuse\n\n# Build Dyninst\nCOPY ./docker/build.sh build.sh\nRUN /bin/bash build.sh\n"
}