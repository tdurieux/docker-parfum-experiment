{
  "startTime": 1674249690239,
  "endTime": 1674249691870,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 8,
        "columnEnd": 136
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 1,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 32,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM linuxkit/alpine:e2391e0b164c57db9f6c4ae110ee84f766edc430 AS kernel-build\nRUN apk add --no-cache \\\n    argp-standalone \\\n    automake \\\n    bash \\\n    bc \\\n    binutils-dev \\\n    bison \\\n    build-base \\\n    curl \\\n    diffutils \\\n    flex \\\n    git \\\n    gmp-dev \\\n    gnupg \\\n    installkernel \\\n    kmod \\\n    elfutils-dev \\\n    linux-headers \\\n    mpc1-dev \\\n    mpfr-dev \\\n    ncurses-dev \\\n    openssl-dev \\\n    patch \\\n    rsync \\\n    sed \\\n    squashfs-tools \\\n    tar \\\n    xz \\\n    xz-dev \\\n    zlib-dev\n\n# libunwind-dev pkg is missing for s390x for now. Only install on other arch\nRUN [ $(uname -m) != s390x ] && apk add --no-cache libunwind-dev || true\n\nARG KERNEL_VERSION\nARG KERNEL_SERIES\nARG EXTRA\nARG DEBUG\n\nENV WIREGUARD_VERSION=1.0.20200506\nENV WIREGUARD_SHA256=\"98a99f2b825a82d57a7213e666f1ee4f7cc02bddb09bf4908b4b09447a8f121e\"\nENV WIREGUARD_URL=https://git.zx2c4.com/wireguard-linux-compat/snapshot/wireguard-linux-compat-${WIREGUARD_VERSION}.tar.xz\n\n# We copy the entire directory. This copies some unneeded files, but\n# allows us to check for the existence /patches-${KERNEL_SERIES} to\n# build kernels without patches.\nCOPY / /\n\n# Download and verify kernel\n# PGP keys: 589DA6B1 (greg@kroah.com) & 6092693E (autosigner@kernel.org) & 00411886 (torvalds@linux-foundation.org)\nRUN KERNEL_MAJOR=$(echo ${KERNEL_VERSION} | cut -d . -f 1) && \\\n    KERNEL_MAJOR=v${KERNEL_MAJOR}.x && \\\n    KERNEL_SOURCE=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/linux-${KERNEL_VERSION}.tar.xz && \\\n    KERNEL_SHA256_SUMS=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/sha256sums.asc && \\\n    KERNEL_PGP2_SIGN=https://www.kernel.org/pub/linux/kernel/${KERNEL_MAJOR}/linux-${KERNEL_VERSION}.tar.sign && \\\n    curl -fsSLO ${KERNEL_SHA256_SUMS} && \\\n    gpg2 -q --import keys.asc && \\\n    gpg2 --verify sha256sums.asc && \\\n    KERNEL_SHA256=$(grep linux-${KERNEL_VERSION}.tar.xz sha256sums.asc | cut -d ' ' -f 1) && \\\n    [ -f linux-${KERNEL_VERSION}.tar.xz ] || curl -fsSLO ${KERNEL_SOURCE} && \\\n    echo \"${KERNEL_SHA256}  linux-${KERNEL_VERSION}.tar.xz\" | sha256sum -c - && \\\n    xz -T 0 -d linux-${KERNEL_VERSION}.tar.xz && \\\n    curl -fsSLO ${KERNEL_PGP2_SIGN} && \\\n    gpg2 --verify linux-${KERNEL_VERSION}.tar.sign linux-${KERNEL_VERSION}.tar && \\\n    cat linux-${KERNEL_VERSION}.tar | tar --absolute-names -x && mv /linux-${KERNEL_VERSION} /linux\n\n\nRUN mkdir -p /out/src\n\nWORKDIR /tmp\n# Download Intel ucode, create a CPIO archive for it, and keep it in the build context\n# so the firmware can also be referenced with CONFIG_EXTRA_FIRMWARE\nENV UCODE_REPO=https://github.com/intel/Intel-Linux-Processor-Microcode-Data-Files\nENV UCODE_COMMIT=microcode-20191115\nRUN set -e && \\\n    if [ $(uname -m) == x86_64 ]; then \\\n        git clone ${UCODE_REPO} ucode && \\\n        cd ucode && \\\n        git checkout ${UCODE_COMMIT} && \\\n        iucode_tool --normal-earlyfw --write-earlyfw=/out/intel-ucode.cpio ./intel-ucode && \\\n        cp license /out/intel-ucode-license.txt && \\\n        mkdir -p /lib/firmware && \\\n        cp -rav ./intel-ucode /lib/firmware; \\\n    fi\n\n\nWORKDIR /linux\n# Apply local specific patches if present\nRUN set -e && \\\n    if [ -n \"${EXTRA}\" ] && [ -d /patches-${KERNEL_SERIES}${EXTRA} ]; then \\\n\techo \"Patching ${EXTRA} kernel\"; \\\n\tfor patch in /patches-${KERNEL_SERIES}${EXTRA}/*.patch; do \\\n            echo \"Applying $patch\"; \\\n            patch -t -F0 -N -u -p1 < \"$patch\"; \\\n\tdone; \\\n    fi\n\n# Apply local common patches if present\nRUN set -e && \\\n    if [ -d /patches-${KERNEL_SERIES} ]; then \\\n        for patch in /patches-${KERNEL_SERIES}/*.patch; do \\\n            echo \"Applying $patch\"; \\\n            patch -t -F0 -N -u -p1 < \"$patch\"; \\\n        done; \\\n    fi\n\n\n\n# Save kernel source\nRUN tar cJf /out/src/linux.tar.xz /linux\n\n# Kernel config\n# The s390x defconfig moved with 5.2.x\nRUN case $(uname -m) in \\\n    x86_64) \\\n        KERNEL_DEF_CONF=/linux/arch/x86/configs/x86_64_defconfig; \\\n        ;; \\\n    aarch64) \\\n        KERNEL_DEF_CONF=/linux/arch/arm64/configs/defconfig; \\\n        ;; \\\n    s390x) \\\n        if [ -f /linux/arch/s390/defconfig ]; then \\\n            KERNEL_DEF_CONF=/linux/arch/s390/defconfig; \\\n        else \\\n            KERNEL_DEF_CONF=/linux/arch/s390/configs/defconfig; \\\n        fi; \\\n        ;; \\\n    esac  && \\\n    cp /config-${KERNEL_SERIES}-$(uname -m) ${KERNEL_DEF_CONF}; \\\n    if [ -n \"${EXTRA}\" ] && [ -f \"/config-${KERNEL_SERIES}-$(uname -m)${EXTRA}\" ]; then \\\n        cat /config-${KERNEL_SERIES}-$(uname -m)${EXTRA} >> ${KERNEL_DEF_CONF}; \\\n    fi; \\\n    sed -i \"s/CONFIG_LOCALVERSION=\\\"-linuxkit\\\"/CONFIG_LOCALVERSION=\\\"-linuxkit${EXTRA}${DEBUG}\\\"/\" ${KERNEL_DEF_CONF}; \\\n    if [ -n \"${DEBUG}\" ]; then \\\n        sed -i 's/CONFIG_PANIC_ON_OOPS=y/# CONFIG_PANIC_ON_OOPS is not set/' ${KERNEL_DEF_CONF}; \\\n        cat /config${DEBUG} >> ${KERNEL_DEF_CONF}; \\\n    fi && \\\n    make defconfig && \\\n    make oldconfig && \\\n    if [ -z \"${EXTRA}\" ] && [ -z \"${DEBUG}\" ]; then diff -u .config ${KERNEL_DEF_CONF}; fi\n\n\n# Kernel\nRUN case $(uname -m) in \\\n    s390x) \\\n        KCFLAGS=\"-fno-pie -fPIC\"; \\\n        ;; \\\n    *) \\\n        KCFLAGS=\"-fno-pie\"; \\\n        ;; \\\n    esac && \\\n    make -j \"$(getconf _NPROCESSORS_ONLN)\" KCFLAGS=\"$KCFLAGS\" && \\\n    case $(uname -m) in \\\n    x86_64) \\\n        cp arch/x86_64/boot/bzImage /out/kernel; \\\n        ;; \\\n    aarch64) \\\n        cp arch/arm64/boot/Image /out/kernel; \\\n        ;; \\\n    s390x) \\\n        cp arch/s390/boot/bzImage /out/kernel; \\\n        ;; \\\n    esac && \\\n    cp System.map /out && \\\n    ([ -n \"${DEBUG}\" ] && cp vmlinux /out || true)\n\n# WireGuard (skip kernels which have it in tree)\nRUN if [  ! -d /linux/drivers/net/wireguard ]; then \\\n        curl -fsSL -o /wireguard.tar.xz \"${WIREGUARD_URL}\" && \\\n        echo \"${WIREGUARD_SHA256}  /wireguard.tar.xz\" | sha256sum -c - && \\\n        cp /wireguard.tar.xz /out/src/ && \\\n        tar -C / --one-top-level=wireguard --strip-components=2 -xJf /wireguard.tar.xz \"wireguard-linux-compat-${WIREGUARD_VERSION}/src\" && \\\n        make -j \"$(getconf _NPROCESSORS_ONLN)\" M=\"/wireguard\" modules; rm /wireguard.tar.xz \\\n     fi\n\n# Modules and Device Tree binaries\nRUN make INSTALL_MOD_PATH=/tmp/kernel-modules modules_install && \\\n    make INSTALL_MOD_PATH=/tmp/kernel-modules M=\"/wireguard\" modules_install && \\\n    ( DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)) && \\\n      cd /tmp/kernel-modules/lib/modules/$DVER && \\\n      rm build source && \\\n      ln -s /usr/src/linux-headers-$DVER build ) && \\\n    case $(uname -m) in \\\n    aarch64) \\\n        make INSTALL_DTBS_PATH=/tmp/kernel-modules/boot/dtb dtbs_install; \\\n        ;; \\\n    esac && \\\n    ( cd /tmp/kernel-modules && tar cf /out/kernel.tar . )\n\n# Headers (userspace API)\nRUN mkdir -p /tmp/kernel-headers/usr && \\\n    make INSTALL_HDR_PATH=/tmp/kernel-headers/usr headers_install && \\\n    ( cd /tmp/kernel-headers && tar cf /out/kernel-headers.tar usr )\n\n# Headers (kernel development)\nRUN DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)) && \\\n    dir=/tmp/usr/src/linux-headers-$DVER && \\\n    mkdir -p $dir && \\\n    cp /linux/.config $dir && \\\n    cp /linux/Module.symvers $dir && \\\n    find . -path './include/*' -prune -o \\\n           -path './arch/*/include' -prune -o \\\n           -path './scripts/*' -prune -o \\\n           -type f \\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \\\n                      -name '*.lds' -o -name '*.pl' -o -name '*.sh' -o \\\n                      -name 'objtool' -o -name 'fixdep' -o -name 'randomize_layout_seed.h' \\) | \\\n         tar cf - -T - | (cd $dir; tar xf -) && \\\n    ( cd /tmp && tar cf /out/kernel-dev.tar usr/src )\n\nRUN printf \"KERNEL_SOURCE=${KERNEL_SOURCE}\\n\" > /out/kernel-source-info\n\n\nFROM scratch\nENTRYPOINT []\nCMD []\nWORKDIR /\nCOPY --from=kernel-build /out/* /\n"
}