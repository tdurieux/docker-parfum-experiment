{
  "startTime": 1674252306671,
  "endTime": 1674252307655,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 8,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.12\n\nENTRYPOINT [ \"/build.sh\" ]\nVOLUME /assets\n\nRUN true && \\\n    # Setup a cache dir so apk will cache the apks\n    mkdir -p /etc/apk/cache && \\\n    apk add --no-cache --update --upgrade \\\n        alpine-base \\\n        curl \\\n        docker \\\n        jq \\\n        linux-firmware \\\n        mdadm \\\n        mkinitfs \\\n        musl-utils \\\n        openssh \\\n        squashfs-tools \\\n        tcpdump \\\n        && \\\n    # A cache sync ensure all the deps are cached, even if the dep was pre-installed already and thus not needed to be fetched\n    apk cache sync && \\\n    apk add --no-scripts --no-cache --update --upgrade --cache-dir /tmp/non-persisted-apk-cache-dir \\\n        abuild \\\n        alpine-sdk \\\n        build-base \\\n        busybox-initscripts \\\n        coreutils \\\n        linux-headers \\\n        sudo \\\n        unzip \\\n        && \\\n    adduser -G abuild -g \"Alpine Package Builder\" -s /bin/ash -D builder && \\\n    echo \"builder ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers && \\\n    apk update\n\nUSER builder\nWORKDIR /home/builder\n\nENV COMMIT 69b95a3d1dd1627416f45bcbfb93c6f2d5f0d68b\nENV FLAVOR lts\nENV KERNEL 5.4.52\n# make sure PKGREL is +1 what is in APKGBUILD\nENV PKGREL 1\n\n# Setup self-signed keys to sign the built packages\nRUN abuild-keygen -a -i -n && \\\n    # Fetch alpine package tree \\\n    curl -fL https://github.com/alpinelinux/aports/archive/$COMMIT.tar.gz | tar -zxf - && \\\n    mv aports-$COMMIT aports\n\n# Install customized linux-$FLAVOR package \\\nRUN cd aports/main/linux-$FLAVOR && \\\n    sed -i APKBUILD \\\n        -e 's/silentoldconfig/olddefconfig/g' \\\n        -e \"/^pkgrel=/ s/=.*/=$PKGREL/\" && \\\n    # we only want to build the config-$FLAVOR.x86_64 kernel, so we need remove to any lines that look like config.*x86_64 but is not config-$FLAVOR.x86_46 \\\n    # explanation: \\\n    #   /config.*x86_64/! p       :: if line does *not* match config.*x86_64 (on account of the trailing ! after /.../) print it \\\n    #   /config.*x86_64/ { ... }  :: apply sub expression only for lines that match the pattern (so everything not ^) \\\n    #   /config-$FLAVOR.x86_64/ p :: print the config-$FLAVOR.x86_64 lines \\\n    sed -i APKBUILD -n \\\n        -e '/config.*x86_64/! p; /config.*x86_64/ { /config-'$FLAVOR'.x86_64/ p }' && \\\n    echo 'CONFIG_KEXEC=y' >> config-$FLAVOR.x86_64 && \\\n    echo 'CONFIG_IONIC=y' >> config-$FLAVOR.x86_64 && \\\n    abuild checksum && \\\n    MAKEFLAGS=-j$(nproc) abuild -r && \\\n    abuild clean && \\\n    sudo apk add --no-scripts --no-cache --update --upgrade --cache-dir /tmp/non-persisted-apk-cache-dir \\\n        /home/builder/packages/main/x86_64/linux-$FLAVOR*.apk\n\nARG ECLYPSIUM_DRIVER_VERSION=2.5.2\nARG ECLYPSIUM_DRIVER_SHA512=574620d7077663c5034eb2a3670732cb445067292ec146070715700cd9b319979e302adee885468856f87a6b457f0c7aef47352e19fe7348fa6be74966a4dcbe\nARG ECLYPSIUM_DRIVER_FILENAME=eclypsiumdriver-alpine-${ECLYPSIUM_DRIVER_VERSION}.tgz\n\nCOPY ${ECLYPSIUM_DRIVER_FILENAME} /home/builder/\n\n# Install the eclypsium driver\nRUN echo \"${ECLYPSIUM_DRIVER_SHA512}  ${ECLYPSIUM_DRIVER_FILENAME}\" | sha512sum -c && \\\n    tar -zxvf ${ECLYPSIUM_DRIVER_FILENAME} && \\\n    cd aports/non-free/eclypsiumdriver && \\\n    sed -i APKBUILD \\\n        -e \"/^_kver=/    s/=.*/=$KERNEL/\" \\\n        -e \"/^_kpkgrel=/ s/=.*/=$PKGREL/\" \\\n        && \\\n    abuild checksum && \\\n    MAKEFLAGS=-j$(nproc) abuild -r && \\\n    abuild clean && \\\n    sudo apk add --no-scripts --no-cache --update --upgrade --cache-dir /tmp/non-persisted-apk-cache-dir \\\n        /home/builder/packages/non-free/x86_64/eclypsium*.apk\n\n# Build and install the ASRR BIOS utility and kernel module\nARG ASRR_BIOS_DRIVER_VERSION=1.0\nARG ASRR_BIOS_DRIVER_SHA512=5dbb458dd105d872f61f0256ec1a57c5de922328a23cd42e636b35c5bbda7e1e1d957b271de76b49345c35a55a97845842de106aea61f930ac440ad6e21f344a\nARG ASRR_BIOS_DRIVER_FILENAME=\"BIOSControl_v1.0.3.zip\"\n\nCOPY ${ASRR_BIOS_DRIVER_FILENAME} /home/builder/\nRUN echo \"${ASRR_BIOS_DRIVER_SHA512} ${ASRR_BIOS_DRIVER_FILENAME}\" | sha512sum -c && \\\n    unzip ${ASRR_BIOS_DRIVER_FILENAME} && \\\n    # def for 5.x kernel build\n    echo '#define LINUX_VERSION_500 0' > driver/ver.h && \\\n    # build module\n    make -C /lib/modules/${KERNEL}-${PKGREL}-${FLAVOR}/build M=/home/builder/driver && \\\n    # install module\n    sudo install -D -m 600 driver/asrdev.ko /lib/modules/${KERNEL}-${PKGREL}-${FLAVOR}/extra/ && \\\n    # clean up\n    rm -rf /home/builder/BIOSControl /home/builder/driver /home/builder/ReadMe.txt\n\n# Remove built and installed packages, these never get installed at runtime\nRUN rm -rf /home/builder/packages/*\n\n\n# Build packages we want to install at osie runtime from this aports checkout #\n###############################################################################\n\n# Build pinned kexec-tools package\nRUN cd aports/testing/kexec-tools && \\\n    abuild checksum && \\\n    MAKEFLAGS=-j$(nproc) abuild -r && \\\n    abuild clean\n\nUSER root\nRUN true && \\\n    # Setup our own repos\n    mkdir -p /etc/apk/repos && \\\n    cp -a /home/builder/packages/* /etc/apk/repos && \\\n    # Clear out installed file since it was empty before\n    truncate -s0 /etc/apk/cache/installed\n\nCOPY build.sh /build.sh\n"
}