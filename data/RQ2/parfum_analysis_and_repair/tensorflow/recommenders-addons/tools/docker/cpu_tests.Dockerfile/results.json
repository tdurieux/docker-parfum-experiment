{
  "startTime": 1674217917509,
  "endTime": 1674217918556,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7 as build_wheel\n\nARG TF_VERSION=2.5.1\nARG USE_BAZEL_VERSION=5.1.1\nARG MPI_VERSION=\"4.1.1\"\nARG HOROVOD_VERSION=\"0.23.0\"\n\nRUN pip install --no-cache-dir --default-timeout=1000 tensorflow-cpu==$TF_VERSION\n\nRUN python -m pip install --upgrade protobuf==3.20.0\n\nRUN apt-get update && apt-get install --no-install-recommends -y sudo rsync cmake openmpi-bin libopenmpi-dev && rm -rf /var/lib/apt/lists/*;\n\nCOPY tools/docker/install/install_bazel.sh /install/\nRUN  /install/install_bazel.sh $USE_BAZEL_VERSION\n\nCOPY tools/docker/install/install_horovod.sh /install/\nRUN  /install/install_horovod.sh $HOROVOD_VERSION --only-cpu\n\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY tools/install_deps/pytest.txt ./\nRUN pip install --no-cache-dir -r pytest.txt pytest-cov\n\nCOPY ./ /recommenders-addons\nWORKDIR recommenders-addons\n\nRUN python -m pip install --upgrade protobuf==3.20.0\n\nRUN python configure.py\nRUN pip install --no-cache-dir -e ./\nRUN --mount=type=cache,id=cache_bazel,target=/root/.cache/bazel \\\n    bash tools/install_so_files.sh\nRUN pytest -v -s -n auto --durations=25 --doctest-modules ./tensorflow_recommenders_addons \\\n    --cov=tensorflow_recommenders_addons ./tensorflow_recommenders_addons/\n\nRUN bazel build --enable_runfiles build_pip_pkg\nRUN bazel-bin/build_pip_pkg artifacts\n\n\nFROM python:3.7\n\nCOPY tools/install_deps/tensorflow-cpu.txt ./\nRUN pip install --no-cache-dir --default-timeout=1000 --upgrade --force-reinstall -r tensorflow-cpu.txt\n\nCOPY --from=0 /recommenders-addons/artifacts /artifacts\n\nRUN python -m pip install --upgrade protobuf==3.20.0\n\nRUN pip install --no-cache-dir /artifacts/tensorflow_recommenders_addons-*.whl\n\n# check that we didnd't forget to add a py file to\n# The corresponding BUILD file.\n# Also test that the wheel works in a fresh environment\nRUN python -c \"import tensorflow_recommenders_addons\"\n"
}