{
  "startTime": 1674253365375,
  "endTime": 1674253366454,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 24,
        "columnStart": 24,
        "columnEnd": 17
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 22,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 22,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 22,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 22,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -------------------------------\nFROM python:3.7 as yapf-test\n\nCOPY tools/install_deps/yapf.txt ./\nRUN pip install --no-cache-dir -r yapf.txt\nCOPY ./ /recommenders-addons\nWORKDIR /recommenders-addons\n\nRUN python -m pip install --upgrade protobuf==3.20.0\nRUN python tools/check_python_format.py\nRUN touch /ok.txt\n\n# -------------------------------\nFROM python:3.7 as source_code_test\n\nARG USE_BAZEL_VERSION\n\nCOPY tools/install_deps /install_deps\nRUN --mount=type=cache,id=cache_pip,target=/root/.cache/pip \\\n    cd /install_deps && pip install --no-cache-dir \\\n    --default-timeout=1000 \\\n    -r tensorflow-cpu.txt \\\n    -r typedapi.txt \\\n    -r pytest.txt\n\nRUN apt-get update && apt-get install --no-install-recommends -y sudo rsync cmake && rm -rf /var/lib/apt/lists/*;\nCOPY tools/docker/install/install_bazel.sh ./\nRUN ./install_bazel.sh $USE_BAZEL_VERSION\n\nCOPY ./ /recommenders-addons\nRUN pip install --no-cache-dir -e /recommenders-addons\n\nWORKDIR /recommenders-addons\n\nRUN python -m pip install --upgrade protobuf==3.20.0\n\nRUN python configure.py\nRUN --mount=type=cache,id=cache_bazel,target=/root/.cache/bazel \\\n    bash tools/install_so_files.sh\n\nRUN pytest -v -s /recommenders-addons/tools/testing/\nRUN touch /ok.txt\n\n# -------------------------------\nFROM python:3.7 as valid_build_files\n\nARG USE_BAZEL_VERSION\n\nCOPY tools/install_deps/tensorflow-cpu.txt ./\nRUN pip install --no-cache-dir --default-timeout=1000 -r tensorflow-cpu.txt\n\nRUN apt-get update && apt-get install -y --no-install-recommends sudo && rm -rf /var/lib/apt/lists/*;\nCOPY tools/docker/install/install_bazel.sh ./\nRUN ./install_bazel.sh $USE_BAZEL_VERSION\n\nCOPY ./ /recommenders-addons\nWORKDIR /recommenders-addons\n\nRUN python -m pip install --upgrade protobuf==3.20.0\n\nRUN python ./configure.py\nRUN --mount=type=cache,id=cache_bazel,target=/root/.cache/bazel \\\n    bazel build --nobuild -- //tensorflow_recommenders_addons/...\nRUN touch /ok.txt\n\n# -------------------------------\nFROM python:3.7-alpine as clang-format\n\nRUN apk add --no-cache git\nRUN git clone https://github.com/gabrieldemarmiesse/clang-format-lint-action.git\nWORKDIR ./clang-format-lint-action\nRUN git checkout 1044fee\n\nCOPY ./ /recommenders-addons\nRUN python run-clang-format.py \\\n               -r \\\n               --cli-args=--style=google \\\n               --clang-format-executable ./clang-format/clang-format9 \\\n               /recommenders-addons/tensorflow_recommenders_addons\nRUN touch /ok.txt\n\n# -------------------------------\n# Bazel code format\nFROM alpine:3.11 as check-bazel-format\n\nCOPY ./tools/install_deps/buildifier.sh ./\nRUN sh buildifier.sh\n\nCOPY ./ /recommenders-addons\nRUN buildifier -mode=diff -r /recommenders-addons\nRUN touch /ok.txt\n\n# -------------------------------\n# docs tests\nFROM python:3.7 as docs_tests\n\nARG USE_BAZEL_VERSION\n\nCOPY tools/install_deps/tensorflow-cpu.txt ./\nRUN pip install --no-cache-dir --default-timeout=1000 -r tensorflow-cpu.txt\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY tools/install_deps/doc_requirements.txt ./\nRUN pip install --no-cache-dir -r doc_requirements.txt\n\nRUN apt-get update && apt-get install --no-install-recommends -y sudo rsync cmake && rm -rf /var/lib/apt/lists/*;\nCOPY tools/docker/install/install_bazel.sh ./\nRUN ./install_bazel.sh $USE_BAZEL_VERSION\n\nCOPY ./ /recommenders-addons\nWORKDIR /recommenders-addons\n\nRUN python -m pip install --upgrade protobuf==3.20.0\n\nRUN python configure.py\nRUN --mount=type=cache,id=cache_bazel,target=/root/.cache/bazel \\\n    bash tools/install_so_files.sh\n\nRUN pip install --no-cache-dir --no-deps -e .\nRUN python tools/docs/build_docs.py\nRUN touch /ok.txt\n\n# -------------------------------\n# test the editable mode\nFROM python:3.7 as test_editable_mode\n\nARG USE_BAZEL_VERSION\n\nCOPY tools/install_deps/tensorflow-cpu.txt ./\nRUN pip install --no-cache-dir --default-timeout=1000 -r tensorflow-cpu.txt\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY tools/install_deps/pytest.txt ./\nRUN pip install --no-cache-dir -r pytest.txt\n\nRUN apt-get update && apt-get install --no-install-recommends -y sudo rsync cmake && rm -rf /var/lib/apt/lists/*;\nCOPY tools/docker/install/install_bazel.sh ./\nRUN ./install_bazel.sh $USE_BAZEL_VERSION\n\nCOPY ./ /recommenders-addons\nWORKDIR /recommenders-addons\n\nRUN python -m pip install --upgrade protobuf==3.20.0\n\nRUN python configure.py\nRUN --mount=type=cache,id=cache_bazel,target=/root/.cache/bazel \\\n    bash tools/install_so_files.sh\nRUN pip install --no-cache-dir --no-deps -e .\nRUN pytest -v -s -n auto ./tensorflow_recommenders_addons/dynamic_embedding\nRUN touch /ok.txt\n\n# -------------------------------\n# ensure that all checks were successful\n# this is necessary if using docker buildkit\n# with \"export DOCKER_BUILDKIT=1\"\n# otherwise dead branch elimination doesn't\n# run all tests\nFROM scratch\n\nCOPY --from=0 /ok.txt /ok0.txt\nCOPY --from=1 /ok.txt /ok1.txt\nCOPY --from=2 /ok.txt /ok2.txt\nCOPY --from=3 /ok.txt /ok3.txt\nCOPY --from=4 /ok.txt /ok4.txt\nCOPY --from=5 /ok.txt /ok5.txt\nCOPY --from=6 /ok.txt /ok6.txt\n"
}