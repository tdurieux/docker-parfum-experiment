{
  "startTime": 1674220912420,
  "endTime": 1674220913291,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 32,
        "columnStart": 22,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 72,
        "columnStart": 22,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build a manylinux 2010 compliant cross-compiler.\n#\n# Builds a devtoolset gcc/libstdc++ that targets manylinux 2010 compatible\n# glibc (2.12) and system libstdc++ (4.4).\n#\n# To push a new version, run:\n# $ docker build -f cuda11.2-cudnn8.1-ubuntu18.04-manylinux2010-multipython.Dockerfile . \\\n#  --tag \"tfra/nosla-cuda11.2-cudnn8.1-ubuntu18.04-manylinux2010-multipython\"\n# $ docker push tfra/nosla-cuda11.2-cudnn8.1-ubuntu18.04-manylinux2010-multipython\n\nFROM nvidia/cuda:11.2.0-cudnn8-devel-ubuntu18.04 as devtoolset\n\nRUN chmod 777 /tmp/\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      cpio \\\n      file \\\n      flex \\\n      g++ \\\n      make \\\n      patch \\\n      rpm2cpio \\\n      unar \\\n      wget \\\n      xz-utils \\\n      libjpeg-dev \\\n      zlib1g-dev \\\n      libgflags-dev \\\n      libsnappy-dev \\\n      libbz2-dev \\\n      liblz4-dev \\\n      libzstd-dev \\\n      openssh-client \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD devtoolset/fixlinks.sh fixlinks.sh\nADD devtoolset/build_devtoolset.sh build_devtoolset.sh\nADD devtoolset/rpm-patch.sh rpm-patch.sh\n\n# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-7 in /dt7.\nRUN /build_devtoolset.sh devtoolset-7 /dt7\n# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-8 in /dt8.\nRUN /build_devtoolset.sh devtoolset-8 /dt8\n\n# TODO(klimek): Split up into two different docker images.\nFROM nvidia/cuda:11.2.0-cudnn8-devel-ubuntu18.04\nCOPY --from=devtoolset /dt7 /dt7\nCOPY --from=devtoolset /dt8 /dt8\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Copy and run the install scripts.\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY install/install_bootstrap_deb_packages.sh /install/\nRUN /install/install_bootstrap_deb_packages.sh\n\nCOPY install/install_deb_packages.sh /install/\nRUN /install/install_deb_packages.sh\n\n# Install additional packages needed for this image:\n# - dependencies to build Python from source\n# - patchelf, as it is required by auditwheel\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libbz2-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    libncurses5-dev \\\n    libnss3-dev \\\n    libreadline-dev \\\n    patchelf \\\n    gcc-multilib \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN chmod 777 /tmp/\nWORKDIR /tmp/\n\nCOPY install/install_nccl.sh /install/\nRUN /install/install_nccl.sh \"2.8.4-1+cuda11.2\"\n\nCOPY install/install_rocksdb.sh /install/\nRUN /install/install_rocksdb.sh \"6.22.1\"\n\nCOPY install/install_bazel.sh /install/\nRUN /install/install_bazel.sh \"5.1.1\"\n\nCOPY install/build_and_install_python.sh /install/\nRUN /install/build_and_install_python.sh \"3.6.9\"\nRUN /install/build_and_install_python.sh \"3.7.7\"\nRUN /install/build_and_install_python.sh \"3.8.2\"\nRUN /install/build_and_install_python.sh \"3.9.7\"\n\nCOPY install/install_pip_packages_by_version.sh /install/\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.9\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.8\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.6\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.7\"\n\nENV CLANG_VERSION=\"r7f6f9f4cf966c78a315d15d6e913c43cfa45c47c\"\nCOPY install/install_latest_clang.sh /install/\nRUN /install/install_latest_clang.sh\n\nCOPY install/use_devtoolset_7.sh /install/\nRUN /install/use_devtoolset_7.sh\n\nCOPY install/install_rocksdb.sh /install/\nRUN /install/install_rocksdb.sh \"6.22.1\"\n\nCOPY install/install_openmpi.sh /install/\nRUN /install/install_openmpi.sh \"4.1.1\"\n\n# clean\nRUN rm -rf /tmp/*"
}