{
  "startTime": 1674252189428,
  "endTime": 1674252190492,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 85,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 62,
        "columnStart": 22,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nFROM nvidia/cuda:11.2.1-base-ubuntu18.04 as base_build\n\nARG TF_SERVING_VERSION_GIT_BRANCH=master\nARG TF_SERVING_VERSION_GIT_COMMIT=HEAD\n\nLABEL maintainer=gvasudevan@google.com\nLABEL tensorflow_serving_github_branchtag=${TF_SERVING_VERSION_GIT_BRANCH}\nLABEL tensorflow_serving_github_commit=${TF_SERVING_VERSION_GIT_COMMIT}\n\nENV CUDNN_VERSION=8.1.0.77\nENV TF_TENSORRT_VERSION=7.2.2\nENV CUDA=11.2\n\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n        automake \\\n        build-essential \\\n        ca-certificates \\\n        cuda-command-line-tools-11-2 \\\n        libcublas-11-2 \\\n        libcublas-dev-11-2 \\\n        cuda-nvrtc-11-2 \\\n        cuda-nvrtc-dev-11-2 \\\n        cuda-nvprune-11-2 \\\n        cuda-cudart-dev-11-2 \\\n        libcufft-dev-11-2 \\\n        libcurand-dev-11-2 \\\n        libcusolver-dev-11-2 \\\n        libcusparse-dev-11-2 \\\n        curl \\\n        git \\\n        libfreetype6-dev \\\n        libtool \\\n        libcudnn8=${CUDNN_VERSION}-1+cuda${CUDA} \\\n        libcudnn8-dev=${CUDNN_VERSION}-1+cuda${CUDA} \\\n        libcurl3-dev \\\n        libzmq3-dev \\\n        mlocate \\\n        openjdk-8-jdk\\\n        openjdk-8-jre-headless \\\n        pkg-config \\\n        python-dev \\\n        software-properties-common \\\n        swig \\\n        unzip \\\n        wget \\\n        zip \\\n        zlib1g-dev \\\n        python3-distutils \\\n        python-distutils-extra && \\\n    find /usr/local/cuda-11.2/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v8.a && rm -rf /var/lib/apt/lists/*;\n\n# NOTE: libnvinfer uses cuda11.1 versions\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub && \\\n    echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /\"  > /etc/apt/sources.list.d/tensorRT.list && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends libnvinfer7=${TF_TENSORRT_VERSION}-1+cuda11.0 \\\n      libnvinfer-dev=${TF_TENSORRT_VERSION}-1+cuda11.0 \\\n      libnvinfer-plugin-dev=${TF_TENSORRT_VERSION}-1+cuda11.0 \\\n      libnvinfer-plugin7=${TF_TENSORRT_VERSION}-1+cuda11.0 \\\n      # TODO: need to verify\n      libnvonnxparsers7=${TF_TENSORRT_VERSION}-1+cuda11.0 \\\n      libnvparsers7=${TF_TENSORRT_VERSION}-1+cuda11.0\\\n      libnvonnxparsers-dev=${TF_TENSORRT_VERSION}-1+cuda11.0 \\\n      libnvparsers-dev=${TF_TENSORRT_VERSION}-1+cuda11.0 && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*;\n\n# Install python 3.7.\nRUN add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n    python3.7 python3.7-dev python3-pip python3.7-venv && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    python3.7 -m pip install pip --upgrade && \\\n    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 0\n\n# Make python3.7 the default python version\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3.7 0\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python3 get-pip.py && \\\n    rm get-pip.py\n\nRUN pip3 --no-cache-dir install \\\n    future>=0.17.1 \\\n    grpcio \\\n    h5py \\\n    keras_applications>=1.0.8 \\\n    keras_preprocessing>=1.1.0 \\\n    mock \\\n    numpy \\\n    portpicker \\\n    requests \\\n     --ignore-installed six>=1.12.0\n\n# Set up Bazel\nENV BAZEL_VERSION 5.1.1\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Build TensorFlow with the CUDA configuration\nENV CI_BUILD_PYTHON python\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:/usr/include/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH\n\nENV TF_NEED_CUDA 1\nENV TF_NEED_TENSORRT 1\nENV TENSORRT_INSTALL_PATH=/usr/lib/x86_64-linux-gnu\nENV TF_CUDA_VERSION=11.2\nENV TF_CUDNN_VERSION=8\n\n# Fix paths so that CUDNN can be found: https://github.com/tensorflow/tensorflow/issues/8264\nWORKDIR /\nRUN mkdir /usr/lib/x86_64-linux-gnu/include/ && \\\n  ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h && \\\n  ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so && \\\n  ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.${TF_CUDNN_VERSION} /usr/local/cuda/lib64/libcudnn.so.${TF_CUDNN_VERSION}\n\n# For backward compatibility we need this line. After 1.13 we can safely remove\n# it.\nENV TF_NCCL_VERSION=\n\n# Set TMP for nvidia build environment\nENV TMP=\"/tmp\"\n\n# Download TF Serving sources (optionally at specific commit).\nWORKDIR /tensorflow-serving\nRUN curl -f -sSL --retry 5 https://github.com/tensorflow/serving/tarball/${TF_SERVING_VERSION_GIT_COMMIT} | tar --strip-components=1 -xzf -\n\nFROM base_build as binary_build\n# Build, and install TensorFlow Serving\nARG TF_SERVING_BUILD_OPTIONS=\"--config=release\"\nRUN echo \"Building with build options: ${TF_SERVING_BUILD_OPTIONS}\"\nARG TF_SERVING_BAZEL_OPTIONS=\"\"\nRUN echo \"Building with Bazel options: ${TF_SERVING_BAZEL_OPTIONS}\"\n\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \\\n    bazel build --color=yes --curses=yes --config=cuda --copt=\"-fPIC\"\\\n    ${TF_SERVING_BAZEL_OPTIONS} \\\n    --verbose_failures \\\n    --output_filter=DONT_MATCH_ANYTHING \\\n    ${TF_SERVING_BUILD_OPTIONS} \\\n    tensorflow_serving/model_servers:tensorflow_model_server && \\\n    cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server \\\n    /usr/local/bin/ && \\\n    rm /usr/local/cuda/lib64/stubs/libcuda.so.1\n\n# Build and install TensorFlow Serving API\nRUN bazel build --color=yes --curses=yes \\\n    ${TF_SERVING_BAZEL_OPTIONS} \\\n    --verbose_failures \\\n    --output_filter=DONT_MATCH_ANYTHING \\\n    ${TF_SERVING_BUILD_OPTIONS} \\\n    tensorflow_serving/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow_serving/tools/pip_package/build_pip_package \\\n    /tmp/pip && \\\n    pip --no-cache-dir install --upgrade \\\n    /tmp/pip/tensorflow_serving_api_gpu-*.whl && \\\n    rm -rf /tmp/pip\n\nFROM binary_build as clean_build\n# Clean up Bazel cache when done.\nRUN bazel clean --expunge --color=yes && \\\n    rm -rf /root/.cache\nCMD [\"/bin/bash\"]\n\n"
}