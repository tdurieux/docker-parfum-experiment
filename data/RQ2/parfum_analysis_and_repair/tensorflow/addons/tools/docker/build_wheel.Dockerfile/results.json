{
  "startTime": 1674250976660,
  "endTime": 1674250977923,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PY_VERSION\nFROM tensorflow/build:latest-python$PY_VERSION as base_install\n\nENV TF_NEED_CUDA=\"1\"\nARG PY_VERSION\nARG TF_VERSION\n\n# TODO: Remove this if tensorflow/build container removes their keras-nightly install\n# https://github.com/tensorflow/build/issues/78\nRUN python -m pip uninstall -y keras-nightly\n\nRUN python -m pip install --default-timeout=1000 tensorflow==$TF_VERSION\n\nCOPY tools/install_deps/ /install_deps\nRUN python -m pip install -r /install_deps/pytest.txt\n\nCOPY requirements.txt .\nRUN python -m pip install -r requirements.txt\n\nCOPY ./ /addons\nWORKDIR /addons\n\n# -------------------------------------------------------------------\nFROM base_install as tfa_gpu_tests\nCMD [\"bash\", \"tools/testing/build_and_run_tests.sh\"]\n\n# -------------------------------------------------------------------\nFROM base_install as make_wheel\nARG NIGHTLY_FLAG\nARG NIGHTLY_TIME\n\nRUN python configure.py\n\n# Test Before Building\nRUN bash tools/testing/build_and_run_tests.sh\n\n# Build\nRUN bazel build \\\n        --noshow_progress \\\n        --noshow_loading_progress \\\n        --verbose_failures \\\n        --test_output=errors \\\n        --crosstool_top=@ubuntu20.04-gcc9_manylinux2014-cuda11.2-cudnn8.1-tensorrt7.2_config_cuda//crosstool:toolchain \\\n        build_pip_pkg && \\\n    # Package Whl\n    bazel-bin/build_pip_pkg artifacts $NIGHTLY_FLAG\n\nRUN bash tools/releases/tf_auditwheel_patch.sh\nRUN python -m auditwheel repair --plat manylinux2014_x86_64 artifacts/*.whl\nRUN ls -al wheelhouse/\n\n# -------------------------------------------------------------------\n\nFROM python:$PY_VERSION as test_wheel_in_fresh_environment\n\nARG TF_VERSION\nRUN python -m pip install --default-timeout=1000 tensorflow==$TF_VERSION\n\nCOPY --from=make_wheel /addons/wheelhouse/ /addons/wheelhouse/\nRUN pip install --no-cache-dir /addons/wheelhouse/*.whl\n\nRUN python -c \"import tensorflow_addons as tfa; print(tfa.register_all())\"\n\n# -------------------------------------------------------------------\nFROM scratch as output\n\nCOPY --from=test_wheel_in_fresh_environment /addons/wheelhouse/ .\n"
}