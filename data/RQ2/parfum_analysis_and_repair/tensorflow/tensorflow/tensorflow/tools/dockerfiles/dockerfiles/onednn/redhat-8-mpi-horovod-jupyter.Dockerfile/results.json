{
  "startTime": 1674252522044,
  "endTime": 1674252523456,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 62,
        "lineEnd": 65,
        "columnStart": 21,
        "columnEnd": 9
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 89,
        "lineEnd": 94,
        "columnStart": 21,
        "columnEnd": 9
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 122,
        "lineEnd": 128,
        "columnStart": 21,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG REDHAT_VERSION=latest\n\nFROM registry.access.redhat.com/ubi8/ubi:${REDHAT_VERSION} as base\n\n### Required OpenShift Labels\nLABEL name=\"Intel&#174; Optimizations for TensorFlow*\" \\\n      maintainer=\"Abolfazl Shahbazi <abolfazl.shahbazi@intel.com>\" \\\n      vendor=\"Intel&#174; Corporation\" \\\n      version=\"2.7.0\" \\\n      release=\"2.7.0\" \\\n      summary=\"Intel&#174; Optimizations for TensorFlow* is a binary distribution of TensorFlow* with Intel&#174; oneAPI Deep Neural Network Library primitives.\" \\\n      description=\"Intel&#174; Optimizations for TensorFlow* is a binary distribution of TensorFlow* with Intel&#174; oneAPI Deep Neural Network Library (Intel&#174; oneDNN) primitives, a popular performance library for deep learning applications. TensorFlow* is a widely-used machine learning framework in the deep learning arena, demanding efficient utilization of computational resources. In order to take full advantage of Intel&#174; architecture and to extract maximum performance, the TensorFlow* framework has been optimized using Intel&#174; oneDNN primitives.\"\n\n# Licenses, Legal Notice and TPPs for older versions\nADD https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/v2.7.0/LEGAL-NOTICE ./licenses/\nADD https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/v2.7.0/LICENSE ./licenses/\nADD https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/v2.7.0/third_party_programs_license/oneDNN-THIRD-PARTY-PROGRAMS ./licenses/third_party_programs_license/\nADD https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/v2.7.0/third_party_programs_license/third-party-programs.txt ./licenses/third_party_programs_license/\n\nENV LANG C.UTF-8\nARG PYTHON=python3\n\n### Add necessary updates here\nRUN yum -y update-minimal --security --sec-severity=Important --sec-severity=Critical\n\nRUN INSTALL_PKGS=\"\\\n    ${PYTHON}-pip \\\n    which\" && \\\n    yum -y --setopt=tsflags=nodocs install $INSTALL_PKGS && \\\n    rpm -V $INSTALL_PKGS && \\\n    yum -y clean all --enablerepo='*'\n\n# Intel Optimizations specific Envs\nENV KMP_AFFINITY='granularity=fine,verbose,compact,1,0' \\\n    KMP_BLOCKTIME=1 \\\n    KMP_SETTINGS=1\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\nARG PYTHON=python3\n\nRUN yum update -y && yum install -y \\\n    ${PYTHON} \\\n    ${PYTHON}-pip \\\n    which && \\\n    yum clean all && rm -rf /var/cache/yum\n\n\nRUN ${PYTHON} -m pip --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -sf $(which ${PYTHON}) /usr/local/bin/python && \\\n    ln -sf $(which ${PYTHON}) /usr/local/bin/python3 && \\\n    ln -sf $(which ${PYTHON}) /usr/bin/python\n\n# Options:\n#   tensorflow\n#   tensorflow-gpu\n#   tf-nightly\n#   tf-nightly-gpu\n# Set --build-arg TF_PACKAGE_VERSION=1.11.0rc0 to install a specific version.\n# Installs the latest version by default.\nARG TF_PACKAGE=tensorflow\nARG TF_PACKAGE_VERSION=\nRUN python3 -m pip install --no-cache-dir ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}\n\nRUN yum update -y && yum install -y \\\n    openmpi \\\n    openmpi-devel \\\n    openssh \\\n    openssh-server \\\n    which && \\\n    yum clean all && rm -rf /var/cache/yum\n\nENV PATH=\"/usr/lib64/openmpi/bin:${PATH}\"\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv -f $(which mpirun) /usr/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/bin/mpirun && \\\n    chmod a+x /usr/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\nRUN echo \"btl_tcp_if_exclude = lo,docker0\" >> /etc/openmpi-x86_64/openmpi-mca-params.conf\n\n# Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/sshd_config | grep -v StrictHostKeyChecking > /etc/ssh/sshd_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/sshd_config.new && \\\n    mv -f /etc/ssh/sshd_config.new /etc/ssh/sshd_config\n\n# Install Horovod\nARG HOROVOD_WITHOUT_PYTORCH=1\nARG HOROVOD_WITHOUT_MXNET=1\nARG HOROVOD_WITH_TENSORFLOW=1\nARG HOROVOD_VERSION=v0.21.1\n\nRUN yum update -y && yum install -y \\\n    cmake \\\n    gcc \\\n    gcc-c++ \\\n    git \\\n    make \\\n    ${PYTHON}-devel && \\\n    yum clean all && rm -rf /var/cache/yum\n\nRUN ${PYTHON} -m pip install git+https://github.com/horovod/horovod.git@${HOROVOD_VERSION}\n\nCOPY bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\n\nRUN ${PYTHON} -m pip install --no-cache-dir jupyter matplotlib\n# Pin ipykernel and nbformat; see https://github.com/ipython/ipykernel/issues/422\nRUN ${PYTHON} -m pip install --no-cache-dir jupyter_http_over_ws ipykernel==5.1.1 nbformat==4.4.0\nRUN jupyter serverextension enable --py jupyter_http_over_ws\n\nRUN mkdir -p /tf/ && chmod -R a+rwx /tf/\nRUN mkdir /.local && chmod a+rwx /.local\nWORKDIR /tf\nEXPOSE 8888\n\nRUN ${PYTHON} -m ipykernel.kernelspec\n\nCMD [\"bash\", \"-c\", \"source /etc/bash.bashrc && jupyter notebook --notebook-dir=/tf --ip 0.0.0.0 --no-browser --allow-root\"]\n"
}