{
  "startTime": 1674249790883,
  "endTime": 1674249791623,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 98,
        "lineEnd": 104,
        "columnStart": 22,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG UBUNTU_VERSION=20.04\n\nFROM ubuntu:${UBUNTU_VERSION} as base\n\n# Intel Optimizations specific Envs\nENV KMP_AFFINITY='granularity=fine,verbose,compact,1,0' \\\n    KMP_BLOCKTIME=1 \\\n    KMP_SETTINGS=1\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\nARG PYTHON=python3\n\nRUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \\\n    ca-certificates \\\n    curl \\\n    ${PYTHON} \\\n    ${PYTHON}-distutils && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fSsL https://bootstrap.pypa.io/get-pip.py | ${PYTHON}\n\nRUN ${PYTHON} -m pip --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -sf $(which ${PYTHON}) /usr/local/bin/python && \\\n    ln -sf $(which ${PYTHON}) /usr/local/bin/python3 && \\\n    ln -sf $(which ${PYTHON}) /usr/bin/python && \\\n    ln -sf $(which ${PYTHON}) /usr/bin/python3\n\n# Options:\n#   tensorflow\n#   tensorflow-gpu\n#   tf-nightly\n#   tf-nightly-gpu\n# Set --build-arg TF_PACKAGE_VERSION=1.11.0rc0 to install a specific version.\n# Installs the latest version by default.\nARG TF_PACKAGE=tensorflow\nARG TF_PACKAGE_VERSION=\nRUN python3 -m pip install --no-cache-dir ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\n# install libnuma, openssh, wget\nRUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \\\n    libopenmpi-dev \\\n    openmpi-bin \\\n    openmpi-common \\\n    openssh-client \\\n    openssh-server && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/bin/mpirun /usr/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/bin/mpirun && \\\n    chmod a+x /usr/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\nRUN echo \"btl_tcp_if_exclude = lo,docker0\" >> /etc/openmpi/openmpi-mca-params.conf\n\n# Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Install Horovod\nARG HOROVOD_WITHOUT_PYTORCH=1\nARG HOROVOD_WITHOUT_MXNET=1\nARG HOROVOD_WITH_TENSORFLOW=1\nARG HOROVOD_VERSION=v0.21.1\n\nRUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \\\n    build-essential \\\n    cmake \\\n    g++-8 \\\n    gcc-8 \\\n    git \\\n    ${PYTHON}-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 700 --slave /usr/bin/g++ g++ /usr/bin/g++-7 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8\n\nRUN ${PYTHON} -m pip install git+https://github.com/horovod/horovod.git@${HOROVOD_VERSION}\n\nCOPY bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\n"
}