{
  "startTime": 1674251158994,
  "endTime": 1674251160221,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 63,
        "columnStart": 22,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 68,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 83,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG UBUNTU_VERSION=20.04\n\nFROM ubuntu:${UBUNTU_VERSION} AS base\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \\\n        build-essential \\\n        curl \\\n        git \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        sudo \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        openjdk-8-jdk \\\n        openjdk-8-jre-headless \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV CI_BUILD_PYTHON python\n\n# CACHE_STOP is used to rerun future commands, otherwise cloning tensorflow will be cached and will not pull the most recent version\nARG CACHE_STOP=1\n# Check out TensorFlow source code if --build-arg CHECKOUT_TF_SRC=1\nARG CHECKOUT_TF_SRC=0\nARG TF_BRANCH=master\nRUN test \"${CHECKOUT_TF_SRC}\" -eq 1 && git clone https://github.com/tensorflow/tensorflow.git --branch \"${TF_BRANCH}\" --single-branch /tensorflow_src || true\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\nARG PYTHON=python3\n\nRUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \\\n    curl \\\n    software-properties-common && rm -rf /var/lib/apt/lists/*;\n\nRUN add-apt-repository ppa:deadsnakes/ppa\n\nRUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \\\n    ${PYTHON} && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fSsL https://bootstrap.pypa.io/get-pip.py | ${PYTHON}\n\nRUN ${PYTHON} -m pip --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -sf $(which ${PYTHON}) /usr/local/bin/python && \\\n    ln -sf $(which ${PYTHON}) /usr/local/bin/python3 && \\\n    ln -sf $(which ${PYTHON}) /usr/bin/python && \\\n    ln -sf $(which ${PYTHON}) /usr/bin/python3\n\nRUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \\\n    curl && rm -rf /var/lib/apt/lists/*;\n\n# Install bazel\nARG BAZEL_VERSION=3.7.2\nRUN mkdir /bazel && \\\n    curl -fSsL -o /bazel/installer.sh \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh\" && \\\n    curl -fSsL -o /bazel/LICENSE.txt \"https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE\" && \\\n    bash /bazel/installer.sh && \\\n    rm -f /bazel/installer.sh\n\nCOPY bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\n\nRUN ${PYTHON} -m pip install --no-cache-dir jupyter matplotlib\n# Pin ipykernel and nbformat; see https://github.com/ipython/ipykernel/issues/422\nRUN ${PYTHON} -m pip install --no-cache-dir jupyter_http_over_ws ipykernel==5.1.1 nbformat==4.4.0\nRUN jupyter serverextension enable --py jupyter_http_over_ws\n\nRUN mkdir -p /tf/ && chmod -R a+rwx /tf/\nRUN mkdir /.local && chmod a+rwx /.local\nWORKDIR /tf\nEXPOSE 8888\n\nRUN ${PYTHON} -m ipykernel.kernelspec\n\nCMD [\"bash\", \"-c\", \"source /etc/bash.bashrc && jupyter notebook --notebook-dir=/tf --ip 0.0.0.0 --no-browser --allow-root\"]\n"
}