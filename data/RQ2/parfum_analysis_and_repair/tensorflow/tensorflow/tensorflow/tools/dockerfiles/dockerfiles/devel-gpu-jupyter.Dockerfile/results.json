{
  "startTime": 1674249854858,
  "endTime": 1674249855918,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 106,
        "lineEnd": 108,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 117,
        "lineEnd": 125,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 67,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 106,
        "lineEnd": 108,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 117,
        "lineEnd": 125,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 22,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============================================================================\n#\n# THIS IS A GENERATED DOCKERFILE.\n#\n# This file was assembled from multiple pieces, whose use is documented\n# throughout. Please refer to the TensorFlow dockerfiles documentation\n# for more information.\n\nARG UBUNTU_VERSION=20.04\n\nARG ARCH=\nARG CUDA=11.2\nFROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}.1-base-ubuntu${UBUNTU_VERSION} as base\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\nARG ARCH\nARG CUDA\nARG CUDNN=8.1.0.77-1\nARG CUDNN_MAJOR_VERSION=8\nARG LIB_DIR_PREFIX=x86_64\nARG LIBNVINFER=7.2.2-1\nARG LIBNVINFER_MAJOR_VERSION=7\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        clang-format \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        libcublas-${CUDA/./-} \\\n        libcublas-dev-${CUDA/./-} \\\n        cuda-nvprune-${CUDA/./-} \\\n        cuda-nvrtc-${CUDA/./-} \\\n        cuda-nvrtc-dev-${CUDA/./-} \\\n        cuda-cudart-dev-${CUDA/./-} \\\n        libcufft-dev-${CUDA/./-} \\\n        libcurand-dev-${CUDA/./-} \\\n        libcusolver-dev-${CUDA/./-} \\\n        libcusparse-dev-${CUDA/./-} \\\n        libcudnn8=${CUDNN}+cuda${CUDA} \\\n        libcudnn8-dev=${CUDNN}+cuda${CUDA} \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        wget \\\n        git \\\n        && \\\n    find /usr/local/cuda-${CUDA}/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/${LIB_DIR_PREFIX}-linux-gnu/libcudnn_static_v8.a && rm -rf /var/lib/apt/lists/*;\n\n# Install TensorRT if not building for PowerPC\n# NOTE: libnvinfer uses cuda11.1 versions\nRUN [[ \"${ARCH}\" = \"ppc64le\" ]] || { apt-get update && \\\n        apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub && \\\n        echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /\"  > /etc/apt/sources.list.d/tensorRT.list && \\\n        apt-get update && \\\n        apt-get install -y --no-install-recommends libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda11.0 \\\n        libnvinfer-dev=${LIBNVINFER}+cuda11.0 \\\n        libnvinfer-plugin-dev=${LIBNVINFER}+cuda11.0 \\\n        libnvinfer-plugin${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda11.0 \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/*; }\n\n# Configure the build for our CUDA configuration.\nENV LD_LIBRARY_PATH /usr/local/cuda-11.0/targets/x86_64-linux/lib:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/include/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH:/usr/local/cuda/lib64/stubs:/usr/local/cuda-11.0/lib64:/usr/local/cuda-11.2/lib64\nENV TF_NEED_CUDA 1\nENV TF_NEED_TENSORRT 1\nENV TF_CUDA_VERSION=${CUDA}\nENV TF_CUDNN_VERSION=${CUDNN_MAJOR_VERSION}\n# CACHE_STOP is used to rerun future commands, otherwise cloning tensorflow will be cached and will not pull the most recent version\nARG CACHE_STOP=1\n# Check out TensorFlow source code if --build-arg CHECKOUT_TF_SRC=1\nARG CHECKOUT_TF_SRC=0\nRUN test \"${CHECKOUT_TF_SRC}\" -eq 1 && git clone --depth=1 https://github.com/tensorflow/tensorflow.git /tensorflow_src || true\n\n# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure\n# dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    python3 \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN python3 -m pip --no-cache-dir install --upgrade \\\n    \"pip<20.3\" \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which python3) /usr/local/bin/python\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    curl \\\n    git \\\n    wget \\\n    openjdk-8-jdk \\\n    python3-dev \\\n    virtualenv \\\n    swig && rm -rf /var/lib/apt/lists/*;\n\nRUN python3 -m pip --no-cache-dir install \\\n    Pillow \\\n    h5py \\\n    keras_preprocessing \\\n    tb-nightly \\\n    matplotlib \\\n    mock \\\n    'numpy<1.19.0' \\\n    scipy \\\n    sklearn \\\n    pandas \\\n    future \\\n    portpicker \\\n    enum34 \\\n    'protobuf < 4'\n\n# Installs bazelisk\nRUN mkdir /bazel && \\\n    curl -fSsL -o /bazel/LICENSE.txt \"https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE\" && \\\n    mkdir /bazelisk && \\\n    curl -fSsL -o /bazelisk/LICENSE.txt \"https://raw.githubusercontent.com/bazelbuild/bazelisk/master/LICENSE\" && \\\n    curl -fSsL -o /usr/bin/bazel \"https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-linux-amd64\" && \\\n    chmod +x /usr/bin/bazel\n\nCOPY bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\n\nRUN python3 -m pip install --no-cache-dir jupyter matplotlib\n# Pin ipykernel and nbformat; see https://github.com/ipython/ipykernel/issues/422\n# Pin jedi; see https://github.com/ipython/ipython/issues/12740\nRUN python3 -m pip install --no-cache-dir jupyter_http_over_ws ipykernel==5.1.1 nbformat==4.4.0 jedi==0.17.2\nRUN jupyter serverextension enable --py jupyter_http_over_ws\n\nRUN mkdir -p /tf/tensorflow-tutorials && chmod -R a+rwx /tf/\nRUN mkdir /.local && chmod a+rwx /.local\nRUN apt-get update && apt-get install -y --no-install-recommends wget git && rm -rf /var/lib/apt/lists/*;\nWORKDIR /tf/tensorflow-tutorials\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/overfit_and_underfit.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/regression.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/save_and_load.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/text_classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/text_classification_with_hub.ipynb\nCOPY readme-for-jupyter.md README.md\nRUN apt-get autoremove -y && apt-get remove -y wget\nWORKDIR /tf\nEXPOSE 8888\n\nRUN python3 -m ipykernel.kernelspec\n\nCMD [\"bash\", \"-c\", \"source /etc/bash.bashrc && jupyter notebook --notebook-dir=/tf --ip 0.0.0.0 --no-browser --allow-root\"]\n"
}