{
  "startTime": 1674221012671,
  "endTime": 1674221014110,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 53,
        "columnStart": 22,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build a manylinxu2010/manylinux 2014 compliant cross-compiler.\n#\n# Builds a devtoolset-7 environment with manylinux2010 compatible glibc (2.12) and\n# libstdc++ (4.4) in /dt7.\n#\n# Builds a devtoolset-9 environment with manylinux2014 compatible glibc (2.17) and\n# libstdc++ (4.8) in /dt9.\n#\n# To push a new version, run:\n# $ docker build -f Dockerfile.rbe.cuda11.2-cudnn8.1-ubuntu20.04-manylinux2014-multipython \\\n#  --tag \"gcr.io/tensorflow-testing/nosla-cuda11.2-cudnn8.1-ubuntu20.04-manylinux2014-multipython\" .\n# $ docker push gcr.io/tensorflow-testing/nosla-cuda11.2-cudnn8.1-ubuntu20.04-manylinux2014-multipython\n\nFROM nvidia/cuda:11.2.1-cudnn8-devel-ubuntu20.04 as devtoolset\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      cpio \\\n      file \\\n      flex \\\n      g++ \\\n      make \\\n      patch \\\n      rpm2cpio \\\n      unar \\\n      wget \\\n      xz-utils \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD devtoolset/fixlinks.sh fixlinks.sh\nADD devtoolset/build_devtoolset.sh build_devtoolset.sh\nADD devtoolset/rpm-patch.sh rpm-patch.sh\n\n# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-7 in /dt7.\nRUN /build_devtoolset.sh devtoolset-7 /dt7\n# Set up a sysroot for glibc 2.17 / libstdc++ 4.8 / devtoolset-9 in /dt9.\nRUN /build_devtoolset.sh devtoolset-9 /dt9\n\n# TODO(klimek): Split up into two different docker images.\nFROM nvidia/cuda:11.2.1-cudnn8-devel-ubuntu20.04\nCOPY --from=devtoolset /dt7 /dt7\nCOPY --from=devtoolset /dt9 /dt9\n\n# Install TensorRT.\nRUN echo \\\n    deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 / \\\n    > /etc/apt/sources.list.d/nvidia-ml.list \\\n      && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n    libnvinfer-dev=7.2.2-1+cuda11.1 \\\n    libnvinfer7=7.2.2-1+cuda11.1 \\\n    libnvinfer-plugin-dev=7.2.2-1+cuda11.1 \\\n    libnvinfer-plugin7=7.2.2-1+cuda11.1 \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy and run the install scripts.\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY install/install_bootstrap_deb_packages.sh /install/\nRUN /install/install_bootstrap_deb_packages.sh\n\nCOPY install/install_deb_packages.sh /install/\nRUN /install/install_deb_packages.sh\n\n# Install additional packages needed for this image:\n# - dependencies to build Python from source\n# - patchelf, as it is required by auditwheel\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libbz2-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    libncurses5-dev \\\n    libnss3-dev \\\n    libreadline-dev \\\n    libsqlite3-dev \\\n    patchelf \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY install/install_bazel.sh /install/\nRUN /install/install_bazel.sh\n\nCOPY install/build_and_install_python.sh /install/\nRUN /install/build_and_install_python.sh \"3.7.7\"\nRUN /install/build_and_install_python.sh \"3.8.2\"\nRUN /install/build_and_install_python.sh \"3.9.4\"\nRUN /install/build_and_install_python.sh \"3.10.0\"\n\nCOPY install/install_pip_packages_by_version.sh /install/\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.7\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.8\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.9\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.10\"\n\n# Clang is not available for Ubuntu 20.04 in Google mirror so we download the\n# official release\nENV CLANG_VERSION=\"11.0.0\"\nCOPY install/install_latest_clang_ml2014.sh /install/\nRUN /install/install_latest_clang_ml2014.sh\n\n# TensorRT 7 for CUDA 11.1 is compatible with CUDA 11.2, but requires\n# libnvrtc.so.11.1. See https://github.com/NVIDIA/TensorRT/issues/1064.\n# TODO(b/187962120): Remove when upgrading to TensorRT 8.\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/cuda-11.1/lib64\"\n"
}