{
  "startTime": 1674249559135,
  "endTime": 1674249559902,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 58,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedDockerfile": "# Dockerfile to build a manylinux 2010 compliant cross-compiler.\n#\n# Builds a devtoolset gcc/libstdc++ that targets manylinux 2010 compatible\n# glibc (2.12) and system libstdc++ (4.4).\n#\n# To push a new version, run:\n# $ docker build -f Dockerfile.rbe.cuda10.2-cudnn7-ubuntu18.04-manylinux2010-multipython \\\n#  --tag \"gcr.io/tensorflow-testing/nosla-cuda10.2-cudnn7-ubuntu18.04-manylinux2010-multipython\" .\n# $ docker push gcr.io/tensorflow-testing/nosla-cuda10.2-cudnn7-ubuntu18.04-manylinux2010-multipython\n\nFROM gcr.io/tensorflow-testing/nosla-cuda10.0-cudnn7-ubuntu16.04-manylinux2010\n\nRUN apt-get update\nRUN apt-get remove -y --allow-change-held-packages cuda-license-10-0 libcudnn7 libcudnn8 libnccl2 libnccl-dev\nRUN apt-get install -y --no-install-recommends --allow-downgrades --allow-change-held-packages \\\n  libcublas10 \\\n  libcublas-dev \\\n  cuda-nvml-dev-10.2 \\\n  cuda-command-line-tools-10.2 \\\n  cuda-libraries-dev-10.2 \\\n  cuda-minimal-build-10.2 \\\n  libcudnn7=7.6.5.32-1+cuda10.2 \\\n  libcudnn7-dev=7.6.5.32-1+cuda10.2 && rm -rf /var/lib/apt/lists/*;\nRUN rm -f /usr/local/cuda\nRUN ln -s /usr/local/cuda-10.2 /usr/local/cuda\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      cpio \\\n      file \\\n      flex \\\n      g++ \\\n      make \\\n      rpm2cpio \\\n      unar \\\n      wget \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy and run the install scripts.\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY install/install_bootstrap_deb_packages.sh /install/\nRUN /install/install_bootstrap_deb_packages.sh\n\nCOPY install/install_deb_packages.sh /install/\nRUN /install/install_deb_packages.sh\n\n# Install additional packages needed for this image:\n# - dependencies to build Python from source\n# - patchelf, as it is required by auditwheel\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libbz2-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    libncurses5-dev \\\n    libnss3-dev \\\n    libreadline-dev \\\n    patchelf \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY install/install_bazel.sh /install/\nRUN /install/install_bazel.sh\n\nCOPY install/build_and_install_python.sh /install/\nRUN /install/build_and_install_python.sh \"3.7.7\"\nRUN /install/build_and_install_python.sh \"3.8.2\"\nRUN /install/build_and_install_python.sh \"3.9.0\"\n\nCOPY install/install_pip_packages_by_version.sh /install/\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.7\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.8\"\nRUN /install/install_pip_packages_by_version.sh \"/usr/local/bin/pip3.9\"\n\nENV CLANG_VERSION=\"r42cab985fd95ba4f3f290e7bb26b93805edb447d\"\nCOPY install/install_latest_clang.sh /install/\nRUN /install/install_latest_clang.sh\n"
}