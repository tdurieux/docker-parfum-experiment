{
  "startTime": 1674219376429,
  "endTime": 1674219377369,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\nFROM ubuntu:20.04 as builder\n################################################################################\n\n# Install devtoolset build dependencies\nCOPY setup.packages.sh setup.packages.sh\nCOPY builder.packages.txt builder.packages.txt\nRUN /setup.packages.sh /builder.packages.txt\n\n# Install devtoolset-7 in /dt7 with glibc 2.12 and libstdc++ 4.4, for building\n# manylinux2010-compatible packages. Scripts expect to be in the root directory.\nCOPY builder.devtoolset/fixlinks.sh /fixlinks.sh\nCOPY builder.devtoolset/rpm-patch.sh /rpm-patch.sh\nCOPY builder.devtoolset/build_devtoolset.sh /build_devtoolset.sh\nRUN /build_devtoolset.sh devtoolset-7 /dt7\n\n# Install devtoolset-9 in /dt9 with glibc 2.17 and libstdc++ 4.8, for building\n# manylinux2014-compatible packages.\nRUN /build_devtoolset.sh devtoolset-9 /dt9\n\n################################################################################\nFROM nvidia/cuda:11.2.2-base-ubuntu20.04 as devel\n################################################################################\nCOPY --from=builder /dt7 /dt7\nCOPY --from=builder /dt9 /dt9\n\n# Install required development packages but delete unneeded CUDA bloat\n# CUDA must be cleaned up in the same command to prevent Docker layer bloating\nCOPY setup.sources.sh /setup.sources.sh\nCOPY setup.packages.sh /setup.packages.sh\nCOPY setup.cuda.sh /setup.cuda.sh\nCOPY devel.packages.txt /devel.packages.txt\nRUN /setup.sources.sh && /setup.packages.sh /devel.packages.txt && /setup.cuda.sh\n\n# Install various tools.\n# - bats: bash unit testing framework\n#         NOTE: v1.6.0 seems to have a bug that made \"git\" in setup_file break\n# - bazelisk: always use the correct bazel version\n# - buildifier: clean bazel build deps\n# - buildozer: clean bazel build deps\n# - gcloud SDK: communicate with Google Cloud Platform (GCP) for RBE, CI\nRUN git clone --branch v1.5.0 https://github.com/bats-core/bats-core.git && bats-core/install.sh /usr/local && rm -rf bats-core\nRUN wget https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-linux-amd64 -O /usr/local/bin/bazel && chmod +x /usr/local/bin/bazel\nRUN wget https://github.com/bazelbuild/buildtools/releases/download/3.5.0/buildifier -O /usr/local/bin/buildifier && chmod +x /usr/local/bin/buildifier\nRUN wget https://github.com/bazelbuild/buildtools/releases/download/3.5.0/buildozer -O /usr/local/bin/buildozer && chmod +x /usr/local/bin/buildozer\nRUN curl -f -sSL https://sdk.cloud.google.com > /tmp/gcloud && bash /tmp/gcloud --install-dir=~/usr/local/bin --disable-prompts\n\n\n# All lines past this point are reset when $CACHEBUSTER is set. We need this\n# for Python specifically because we install some nightly packages which are\n# likely to change daily.\nARG CACHEBUSTER=0\nRUN echo $CACHEBUSTER\n\n# Setup Python environment. PYTHON_VERSION is e.g. \"python3.8\"\nARG PYTHON_VERSION\nCOPY setup.python.sh /setup.python.sh\nCOPY devel.requirements.txt /devel.requirements.txt\nRUN /setup.python.sh $PYTHON_VERSION devel.requirements.txt\n\n# Setup build and environment\nCOPY devel.usertools /usertools\nCOPY devel.bashrc /root/.bashrc\n"
}