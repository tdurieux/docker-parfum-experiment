{
  "startTime": 1674254317580,
  "endTime": 1674254318944,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 63,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 59,
        "columnStart": 22,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 63,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 63,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedDockerfile": "# Ubuntu 18.04 Python3 with CUDA 10 and the following:\n#  - Installs tf-nightly-gpu-2.0-preview\n#  - Installs requirements.txt for tensorflow/models\n#  - Install bazel for building TF from source\n\nFROM nvidia/cuda:10.0-base-ubuntu18.04 as base\nARG tensorflow_pip_spec=\"tf-nightly-gpu-2.0-preview\"\nARG extra_pip_specs=\"\"\nARG local_tensorflow_pip_spec=\"\"\n\nCOPY ${local_tensorflow_pip_spec} /${local_tensorflow_pip_spec}\n\n# Pick up some TF dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-10-0 \\\n        cuda-cublas-dev-10-0 \\\n        cuda-cufft-dev-10-0 \\\n        cuda-curand-dev-10-0 \\\n        cuda-cusolver-dev-10-0 \\\n        cuda-cusparse-dev-10-0 \\\n        libcudnn7=7.6.2.24-1+cuda10.0  \\\n        libcudnn7-dev=7.6.2.24-1+cuda10.0  \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        libpng-dev \\\n        pkg-config \\\n        software-properties-common \\\n        unzip \\\n        lsb-core \\\n        curl \\\n        && \\\n  find /usr/local/cuda-10.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends libnvinfer5=5.1.5-1+cuda10.0 \\\n    libnvinfer-dev=5.1.5-1+cuda10.0 \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\n# Add google-cloud-sdk to the source list\nRUN echo \"deb http://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -c -s) main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\nRUN curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n\n# Install extras needed by most models\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n      git \\\n      build-essential \\\n      ca-certificates \\\n      wget \\\n      htop \\\n      zip \\\n      google-cloud-sdk && rm -rf /var/lib/apt/lists/*;\n\n# Install / update Python\n# (bulding TF needs py2 even if building for Python3 as of 06-AUG-2019)\nRUN apt-get install -y --no-install-recommends \\\n      python3 \\\n      python3-dev \\\n      python3-pip \\\n      python3-setuptools \\\n      python3-venv \\\n      python && rm -rf /var/lib/apt/lists/*;\n\n# Upgrade pip, need to use pip3 and then pip after this or an error\n# is thrown for no main found.\nRUN pip3 install --no-cache-dir --upgrade pip\n# setuptools upgraded to fix install requirements from model garden.\nRUN pip install --no-cache-dir wheel\nRUN pip install --no-cache-dir --upgrade setuptools google-api-python-client pyyaml google-cloud google-cloud-bigquery google-cloud-datastore mock\nRUN pip install --no-cache-dir absl-py\nRUN pip install --no-cache-dir --upgrade --force-reinstall ${tensorflow_pip_spec} ${extra_pip_specs}\nRUN pip install --no-cache-dir tfds-nightly\nRUN pip install --no-cache-dir -U scikit-learn\n\nRUN curl -f https://raw.githubusercontent.com/tensorflow/models/master/official/requirements.txt > /tmp/requirements.txt\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt\n\nRUN pip3 freeze\n\n# Install bazel\nARG BAZEL_VERSION=0.24.1\nRUN mkdir /bazel && \\\n    wget -O /bazel/installer.sh \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh\" && \\\n    wget -O /bazel/LICENSE.txt \"https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE\" && \\\n    chmod +x /bazel/installer.sh && \\\n    /bazel/installer.sh && \\\n    rm -f /bazel/installer.sh\n\nRUN git clone https://github.com/tensorflow/tensorflow.git /tensorflow_src\n"
}