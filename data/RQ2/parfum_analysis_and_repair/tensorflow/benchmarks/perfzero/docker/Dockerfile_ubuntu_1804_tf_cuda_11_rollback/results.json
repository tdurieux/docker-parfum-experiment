{
  "startTime": 1674249753006,
  "endTime": 1674249754241,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 40,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 80,
        "columnStart": 22,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedDockerfile": "# Ubuntu 18.04 Python3 with CUDA 11 and the following:\n#  - Installs tf-nightly-gpu (this is TF 2.3)\n#  - Installs requirements.txt for tensorflow/models\n\nFROM nvidia/cuda:11.2.1-cudnn8-devel-ubuntu18.04 as base\nARG tensorflow_pip_spec=\"tf-nightly-gpu\"\nARG local_tensorflow_pip_spec=\"\"\nARG extra_pip_specs=\"\"\nENV PIP_CMD=\"python3.9 -m pip\"\n\n# setup.py passes the base path of local .whl file is chosen for the docker image.\n# Otherwise passes an empty existing file from the context.\nCOPY ${local_tensorflow_pip_spec} /${local_tensorflow_pip_spec}\n\n# Pick up some TF dependencies\n# cublas-dev and libcudnn7-dev only needed because of libnvinfer-dev which may not\n# really be needed.\n# In the future, add the following lines in a shell script running on the\n# benchmark vm to get the available dependent versions when updating cuda\n# version (e.g to 10.2 or something later):\n# sudo apt-cache search cuda-command-line-tool\n# sudo apt-cache search cuda-cublas\n# sudo apt-cache search cuda-cufft\n# sudo apt-cache search cuda-curand\n# sudo apt-cache search cuda-cusolver\n# sudo apt-cache search cuda-cusparse\n\n# Needed to disable prompts during installation.\nENV DEBIAN_FRONTEND noninteractive\n\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        libpng-dev \\\n        pkg-config \\\n        software-properties-common \\\n        unzip \\\n        lsb-core \\\n        curl && rm -rf /var/lib/apt/lists/*;\n\n# Python 3.9 related deps in this ppa.\nRUN add-apt-repository ppa:deadsnakes/ppa\n\n\n# Install / update Python and Python3\nRUN apt-get install -y --no-install-recommends \\\n      python3.9 \\\n      python3-pip \\\n      python3.9-dev \\\n      python3-setuptools \\\n      python3.9-venv \\\n      python3.9-distutils \\\n      python3.9-lib2to3 && rm -rf /var/lib/apt/lists/*;\n\n# Upgrade pip, need to use pip3 and then pip after this or an error\n# is thrown for no main found.\nRUN ${PIP_CMD} install --upgrade pip\nRUN ${PIP_CMD} install --upgrade distlib\n# setuptools upgraded to fix install requirements from model garden.\nRUN ${PIP_CMD} install --upgrade setuptools\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda-11.2/lib64:$LD_LIBRARY_PATH\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\n# Add google-cloud-sdk to the source list\nRUN echo \"deb http://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -c -s) main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\nRUN curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n\n# Install extras needed by most models\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n      git \\\n      ca-certificates \\\n      wget \\\n      htop \\\n      zip \\\n      google-cloud-sdk && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP_CMD} install --upgrade pyyaml\nRUN ${PIP_CMD} install --upgrade google-api-python-client==1.8.0\nRUN ${PIP_CMD} install --upgrade google-cloud google-cloud-bigquery google-cloud-datastore mock\n\n\nRUN ${PIP_CMD} install wheel\nRUN ${PIP_CMD} install absl-py\nRUN ${PIP_CMD} install --upgrade --force-reinstall ${tensorflow_pip_spec} ${extra_pip_specs}\n\nRUN ${PIP_CMD} install tfds-nightly\nRUN ${PIP_CMD} install -U scikit-learn\n\n# Install dependnecies needed for tf.distribute test utils\nRUN ${PIP_CMD} install dill tblib portpicker\n\nRUN curl -f https://raw.githubusercontent.com/tensorflow/models/master/official/requirements.txt > /tmp/requirements.txt\nRUN ${PIP_CMD} install -r /tmp/requirements.txt\n\nRUN ${PIP_CMD} install tf-estimator-nightly\nRUN ${PIP_CMD} install tensorflow-text-nightly\nRUN ${PIP_CMD} install keras-nightly==2.7.0.dev2021082607\n\n# RUN nvidia-smi\n\nRUN nvcc --version\n\n\nRUN pip freeze\n"
}