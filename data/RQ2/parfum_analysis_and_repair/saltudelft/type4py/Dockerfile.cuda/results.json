{
  "startTime": 1674255671055,
  "endTime": 1674255671728,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 53,
        "columnEnd": 89
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 53,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NOTE: This Docker file is configured to deploy Type4Py on our server and GPUs.\n# For us, these configs seem to work: CUDA 11.0.3, ONNX v1.10.0, nvidia driver 450.36.06\nFROM nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04\nWORKDIR /type4py/\n# Put the required models files in a folder \"t4py_model_files\" inside \"/type4py\"\n# -type4py/\n# --type4py/\n# --t4py_model_files/\nCOPY . /type4py\nENV T4PY_LOCAL_MODE=\"1\"\n\nRUN apt update --fix-missing -y && apt upgrade -y && apt install --no-install-recommends -y python3-pip libpq-dev && rm -rf /var/lib/apt/lists/*;\n\n# The current model files are pickled with the below ver. of sklearn\nRUN pip install --no-cache-dir scikit-learn==0.24.1\n\n# Install Annoy from a pre-built binary wheel to avoid weird SIGILL error on some systems\nRUN pip install --no-cache-dir https://type4py.com/pretrained_models/annoy-wheels/annoy-1.17.0-cp38-cp38-linux_x86_64.whl\n\n# For production env., install ONNXRuntime with GPU support\nRUN pip install --no-cache-dir onnx==1.10 onnxruntime==1.10 onnxruntime-gpu==1.10\n\n# Install Type4Py\nRUN pip install --no-cache-dir -e .\n\n# Web server's required packages\nRUN pip install --no-cache-dir -r type4py/server/requirements.txt\n\n# Install NLTK corpus\nRUN python3 -c \"import nltk; nltk.download('stopwords')\"\nRUN python3 -c \"import nltk; nltk.download('wordnet')\"\nRUN python3 -c \"import nltk; nltk.download('omw-1.4')\"\nRUN python3 -c \"import nltk; nltk.download('averaged_perceptron_tagger')\"\n\nWORKDIR /type4py/type4py/server/\n\nEXPOSE 5010\n\nCMD [\"bash\", \"run_server.sh\"]"
}