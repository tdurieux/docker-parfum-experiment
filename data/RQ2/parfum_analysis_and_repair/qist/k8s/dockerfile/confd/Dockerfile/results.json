{
  "startTime": 1674250487015,
  "endTime": 1674250487905,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 11,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 11,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 11,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# 基础镜像\nFROM alpine\n\n# 作者信息\nLABEL MAINTAINER=\"nginx 1.17.9 Docker Maintainers 87984115@qq.com\"\n\n# 修改源\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\n\n# 安装ca 证书\nRUN apk update && \\\n    apk add --no-cache ca-certificates\n\n# 设置环境变量\n\nENV NGINX_VERSION 1.17.9\n\nENV OPENSSL_VERSION 1.1.1e\n\n\n# 编译安装NGINX\n\n\nWORKDIR /tmp\n\nRUN NGINX_CONFIG=\"\\\n      --prefix=/etc/nginx \\\n      --sbin-path=/usr/sbin/nginx \\\n      --conf-path=/etc/nginx/nginx.conf \\\n      --error-log-path=/var/log/nginx/error.log \\\n      --http-log-path=/var/log/nginx/access.log \\\n      --pid-path=/var/run/nginx.pid \\\n      --lock-path=/var/run/nginx.lock \\\n      --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n      --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n      --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n      --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n      --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n      --with-pcre \\\n      --user=nginx \\\n      --group=nginx \\\n      --with-compat \\\n      --with-file-aio \\\n      --with-threads \\\n      --with-http_addition_module \\\n      --with-http_auth_request_module \\\n      --with-http_dav_module \\\n      --with-http_flv_module \\\n      --with-http_gunzip_module \\\n      --with-http_gzip_static_module \\\n      --with-http_mp4_module \\\n      --with-http_random_index_module \\\n      --with-http_realip_module \\\n      --with-http_secure_link_module \\\n      --with-http_slice_module \\\n      --with-http_ssl_module \\\n      --with-http_stub_status_module \\\n      --with-http_sub_module \\\n      --with-http_v2_module \\\n      --with-ipv6 \\\n      --with-openssl=../openssl-$OPENSSL_VERSION \\\n      --with-openssl-opt=enable-tls1_3 \\\n      --with-mail \\\n      --with-mail_ssl_module \\\n      --with-stream \\\n      --with-stream_realip_module \\\n      --with-stream_ssl_module \\\n      --with-stream_ssl_preread_module \\\n      --with-ld-opt=-Wl,--as-needed \\\n     \" \\\n     && addgroup -S nginx \\\n     && adduser -D -S -h /www -s /sbin/nologin -G nginx nginx \\\n     && apk  add  --no-cache --virtual .build-deps \\\n        gcc \\\n        libc-dev \\\n        make \\\n        pcre-dev \\\n        zlib-dev \\\n        linux-headers \\\n        curl \\\n        gnupg \\\n        libxslt-dev \\\n        gd-dev \\\n        geoip-dev \\\n        libstdc++ wget \\\n        libjpeg  \\\n        libpng \\\n        libpng-dev \\\n        freetype \\\n        freetype-dev \\\n        libxml2 \\\n        libxml2-dev \\\n        curl-dev \\\n        libmcrypt \\\n        libmcrypt-dev \\\n        autoconf \\\n        libjpeg-turbo-dev \\\n        libmemcached \\\n        libmemcached-dev \\\n        gettext \\\n        gettext-dev \\\n        libzip \\\n        git \\\n        libzip-dev \\\n        && curl -fSL  https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz -o /tmp/openssl-$OPENSSL_VERSION.tar.gz \\\n        && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o /tmp/nginx-$NGINX_VERSION.tar.gz \\\n        && cd /tmp \\\n        && tar -xzf openssl-$OPENSSL_VERSION.tar.gz \\\n        && tar -xzf nginx-$NGINX_VERSION.tar.gz \\\n        && cd  /tmp/nginx-$NGINX_VERSION \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $NGINX_CONFIG \\\n        && make -j$(getconf _NPROCESSORS_ONLN) \\\n        && make install && rm openssl-$OPENSSL_VERSION.tar.gz\n\n# 构建confd nginx 镜像\n\nFROM alpine\n# 作者信息\nLABEL MAINTAINER=\"nginx 1.17.9 Docker Maintainers 87984115@qq.com\"\n\n# 修改源\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\n\n# 安装ca 证书\nRUN apk update && \\\n    apk add --no-cache ca-certificates\n\n# 设置环境变量\n\nENV NGINX_VERSION 1.17.9\n\nENV OPENSSL_VERSION 1.1.1e\n\nRUN  mkdir -p /var/lib/nginx/cache \\\n     && apk add  --no-cache  \\ \n           curl \\\n           wget \\\n           pcre \\\n          && addgroup -S nginx \\\n          && adduser -D -S -h /var/lib/nginx -s /sbin/nologin -G nginx nginx \\\n        && chown -R nginx:nginx /var/lib/nginx \\\n        && mkdir -p /var/log/nginx \\\n        && rm -rf /var/cache/apk/* \\\n        && mkdir -p /etc/confd \\\n        && mkdir -p /var/cache/nginx/client_temp\n#COPY 编译结果 \n\nCOPY --from=0  /usr/sbin/nginx /usr/sbin/nginx\nCOPY --from=0  /etc/nginx  /etc/nginx \nADD confd  /usr/sbin/confd\nADD conf.d /etc/confd/conf.d\nADD templates /etc/confd/templates\nADD nginx-proxy /usr/bin/nginx-proxy\n\n#添加执行权限\nRUN  chmod +x /usr/sbin/confd \\\n     && chmod +x /usr/bin/nginx-proxy\n\nSTOPSIGNAL SIGTERM\n\nENTRYPOINT [\"/usr/bin/nginx-proxy\"]\n\n"
}