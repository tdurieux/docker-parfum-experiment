{
  "startTime": 1674252715044,
  "endTime": 1674252715755,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 11,
        "columnEnd": 100
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM bitwalker/alpine-elixir-phoenix:1.13\n\nRUN apk --no-cache --update add alpine-sdk gmp-dev automake libtool inotify-tools autoconf python3 file qemu-x86_64\n\nENV GLIBC_REPO=https://github.com/sgerrand/alpine-pkg-glibc\nENV GLIBC_VERSION=2.30-r0\n\nRUN set -ex && \\\n    apk --update --no-cache add libstdc++ curl ca-certificates && \\\n    for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION}; \\\n        do curl -f -sSL ${GLIBC_REPO}/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk; done && \\\n    apk add --no-cache --allow-untrusted /tmp/*.apk && \\\n    rm -v /tmp/*.apk && \\\n    /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib\n\n# Get Rust\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n\nENV PATH=\"$HOME/.cargo/bin:${PATH}\"\nENV RUSTFLAGS=\"-C target-feature=-crt-static\"\n\nEXPOSE 4000\n\nENV PORT=4000 \\\n    MIX_ENV=\"prod\" \\\n    SECRET_KEY_BASE=\"RMgI4C1HSkxsEjdhtGMfwAHfyT6CKWXOgzCboJflfSm4jeAlic52io05KB6mqzc5\"\n\n# Cache elixir deps\nADD mix.exs mix.lock ./\nADD apps/block_scout_web/mix.exs ./apps/block_scout_web/\nADD apps/explorer/mix.exs ./apps/explorer/\nADD apps/ethereum_jsonrpc/mix.exs ./apps/ethereum_jsonrpc/\nADD apps/indexer/mix.exs ./apps/indexer/\n\nRUN mix do deps.get, local.rebar --force, deps.compile\n\nADD . .\n\nARG COIN\nRUN if [ \"$COIN\" != \"\" ]; then \\\n        sed -i s/\"POA\"/\"${COIN}\"/g apps/block_scout_web/priv/gettext/en/LC_MESSAGES/default.po; \\\n        sed -i \"/msgid \\\"Ether\\\"/{n;s/msgstr \\\"\\\"/msgstr \\\"${COIN}\\\"/g}\" apps/block_scout_web/priv/gettext/default.pot; \\\n        sed -i \"/msgid \\\"Ether\\\"/{n;s/msgstr \\\"\\\"/msgstr \\\"${COIN}\\\"/g}\" apps/block_scout_web/priv/gettext/en/LC_MESSAGES/default.po; \\\n        sed -i \"/msgid \\\"ETH\\\"/{n;s/msgstr \\\"\\\"/msgstr \\\"${COIN}\\\"/g}\" apps/block_scout_web/priv/gettext/default.pot; \\\n        sed -i \"/msgid \\\"ETH\\\"/{n;s/msgstr \\\"\\\"/msgstr \\\"${COIN}\\\"/g}\" apps/block_scout_web/priv/gettext/en/LC_MESSAGES/default.po; \\\n    fi\n\n# Run forderground build and phoenix digest\nRUN mix compile\n\nRUN npm install npm@latest && npm cache clean --force;\n\n# Add blockscout npm deps\nRUN cd apps/block_scout_web/assets/ && \\\n    npm install && \\\n    npm run deploy && \\\n    cd - && npm cache clean --force;\n\nRUN cd apps/explorer/ && \\\n    npm install && \\\n    apk update && apk del --force-broken-world alpine-sdk gmp-dev automake libtool inotify-tools autoconf python3 && npm cache clean --force;\n\nRUN mix phx.digest\n"
}