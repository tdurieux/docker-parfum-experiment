{
  "startTime": 1674214999297,
  "endTime": 1674214999964,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Note: when updating the go minor version here, also update the go-channel in snap/snapcraft.yml\nFROM golang:1.18.3-buster\nLABEL maintainer=\"Steven Allen <steven@stebalien.com>\"\n\n# Install deps\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  libssl-dev \\\n  ca-certificates \\\n  fuse && rm -rf /var/lib/apt/lists/*;\n\nENV SRC_DIR /kubo\n\n# Download packages first so they can be cached.\nCOPY go.mod go.sum $SRC_DIR/\nRUN cd $SRC_DIR \\\n  && go mod download\n\nCOPY . $SRC_DIR\n\n# Preload an in-tree but disabled-by-default plugin by adding it to the IPFS_PLUGINS variable\n# e.g. docker build --build-arg IPFS_PLUGINS=\"foo bar baz\"\nARG IPFS_PLUGINS\n\n# Build the thing.\n# Also: fix getting HEAD commit hash via git rev-parse.\nRUN cd $SRC_DIR \\\n  && mkdir -p .git/objects \\\n  && GOFLAGS=-buildvcs=false make build GOTAGS=openssl IPFS_PLUGINS=$IPFS_PLUGINS\n\n# Get su-exec, a very minimal tool for dropping privileges,\n# and tini, a very minimal init daemon for containers\nENV SUEXEC_VERSION v0.2\nENV TINI_VERSION v0.19.0\nRUN set -eux; \\\n    dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"${dpkgArch##*-}\" in \\\n        \"amd64\" | \"armhf\" | \"arm64\") tiniArch=\"tini-static-$dpkgArch\" ;;\\\n        *) echo >&2 \"unsupported architecture: ${dpkgArch}\"; exit 1 ;; \\\n    esac; \\\n  cd /tmp \\\n  && git clone https://github.com/ncopa/su-exec.git \\\n  && cd su-exec \\\n  && git checkout -q $SUEXEC_VERSION \\\n  && make su-exec-static \\\n  && cd /tmp \\\n  && wget -q -O tini https://github.com/krallin/tini/releases/download/$TINI_VERSION/$tiniArch \\\n  && chmod +x tini\n\n# Now comes the actual target image, which aims to be as small as possible.\nFROM busybox:1.31.1-glibc\nLABEL maintainer=\"Steven Allen <steven@stebalien.com>\"\n\n# Get the ipfs binary, entrypoint script, and TLS CAs from the build container.\nENV SRC_DIR /kubo\nCOPY --from=0 $SRC_DIR/cmd/ipfs/ipfs /usr/local/bin/ipfs\nCOPY --from=0 $SRC_DIR/bin/container_daemon /usr/local/bin/start_ipfs\nCOPY --from=0 $SRC_DIR/bin/container_init_run /usr/local/bin/container_init_run\nCOPY --from=0 /tmp/su-exec/su-exec-static /sbin/su-exec\nCOPY --from=0 /tmp/tini /sbin/tini\nCOPY --from=0 /bin/fusermount /usr/local/bin/fusermount\nCOPY --from=0 /etc/ssl/certs /etc/ssl/certs\n\n# Add suid bit on fusermount so it will run properly\nRUN chmod 4755 /usr/local/bin/fusermount\n\n# Fix permissions on start_ipfs (ignore the build machine's permissions)\nRUN chmod 0755 /usr/local/bin/start_ipfs\n\n# This shared lib (part of glibc) doesn't seem to be included with busybox.\nCOPY --from=0 /lib/*-linux-gnu*/libdl.so.2 /lib/\n\n# Copy over SSL libraries.\nCOPY --from=0 /usr/lib/*-linux-gnu*/libssl.so* /usr/lib/\nCOPY --from=0 /usr/lib/*-linux-gnu*/libcrypto.so* /usr/lib/\n\n# Swarm TCP; should be exposed to the public\nEXPOSE 4001\n# Swarm UDP; should be exposed to the public\nEXPOSE 4001/udp\n# Daemon API; must not be exposed publicly but to client services under you control\nEXPOSE 5001\n# Web Gateway; can be exposed publicly with a proxy, e.g. as https://ipfs.example.org\nEXPOSE 8080\n# Swarm Websockets; must be exposed publicly when the node is listening using the websocket transport (/ipX/.../tcp/8081/ws).\nEXPOSE 8081\n\n# Create the fs-repo directory and switch to a non-privileged user.\nENV IPFS_PATH /data/ipfs\nRUN mkdir -p $IPFS_PATH \\\n  && adduser -D -h $IPFS_PATH -u 1000 -G users ipfs \\\n  && chown ipfs:users $IPFS_PATH\n\n# Create mount points for `ipfs mount` command\nRUN mkdir /ipfs /ipns \\\n  && chown ipfs:users /ipfs /ipns\n\n# Create the init scripts directory\nRUN mkdir /container-init.d \\\n  && chown ipfs:users /container-init.d\n\n# Expose the fs-repo as a volume.\n# start_ipfs initializes an fs-repo if none is mounted.\n# Important this happens after the USER directive so permissions are correct.\nVOLUME $IPFS_PATH\n\n# The default logging level\nENV IPFS_LOGGING \"\"\n\n# This just makes sure that:\n# 1. There's an fs-repo, and initializes one if there isn't.\n# 2. The API and Gateway are accessible from outside the container.\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/start_ipfs\"]\n\n# Heathcheck for the container\n# QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn is the CID of empty folder\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD ipfs dag stat /ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn || exit 1\n\n# Execute the daemon subcommand by default\nCMD [\"daemon\", \"--migrate=true\", \"--agent-version-suffix=docker\"]\n"
}