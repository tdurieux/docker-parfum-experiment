{
  "startTime": 1674250961029,
  "endTime": 1674250962043,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 47,
        "columnEnd": 68
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 54,
        "columnEnd": 86
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 37,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 49,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 50,
        "columnEnd": 82
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 37,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 49,
        "columnEnd": 80
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 50,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# VERSION 1.0 (apache-docker)\n# AUTHOR: Abhishek Sharma<abhioncbr@yahoo.com>\n# DESCRIPTION: docker apache airflow container\n\nFROM python:3.6\nMAINTAINER Abhishek Sharma <abhioncbr@yahoo.com>\n\nARG PYTHON_DEPS=\"boto3 \"\nARG AIRFLOW_VERSION\nARG AIRFLOW_PATCH_VERSION\nARG AIRFLOW_DEPS=\"all,password\"\nARG BUILD_DEPS=\"freetds-dev libkrb5-dev libsasl2-dev libssl-dev libffi-dev libpq-dev git\"\nARG OTHER_DEPS=\"sshpass openssh-server openssh-client less gcc make wget vim curl rsync netcat logrotate\"\nARG APT_DEPS=\"$BUILD_DEPS $OTHER_DEPS libsasl2-dev freetds-bin build-essential default-libmysqlclient-dev apt-utils locales \"\n\nENV AIRFLOW_HOME /usr/local/airflow\nENV AIRFLOW_GPL_UNIDECODE yes\n\n#install dependencies packages.\nRUN set -x \\\n    && apt-get update \\\n    && if [ -n \"${APT_DEPS}\" ]; then \\\n    apt-get install --no-install-recommends -y $APT_DEPS; rm -rf /var/lib/apt/lists/*; fi\n\n#Install Redis\nRUN apt-get update && apt policy redis-server && apt-get install --no-install-recommends -y redis-server && rm -rf /var/lib/apt/lists/*;\n\n#Install java for java based application.\nRUN apt-get update && apt policy openjdk-8-jdk && apt-get install --no-install-recommends -y openjdk-8-jdk && rm -rf /var/lib/apt/lists/*;\n\n#for older versions[1.8.1, 1.8.2] of airflow, pip downgrading is required.\nRUN if [ ${AIRFLOW_VERSION} \\< \"1.8.3\" ]; then \\\n pip install --no-cache-dir pip==9.0; \\\nelse python -m pip install --upgrade pip setuptools wheel; fi\n\n#Install python dependencies.\nRUN if [ -n \"${PYTHON_DEPS}\" ]; then pip install --no-cache-dir ${PYTHON_DEPS}; fi\n\n#Install Airflow all packages\nRUN pip install --no-cache-dir apache-airflow[$AIRFLOW_DEPS]==$AIRFLOW_VERSION && apt-get clean\n\n#Install GCloud[GCP] packages.\nRUN curl -f https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz > /tmp/google-cloud-sdk.tar.gz\nRUN mkdir -p /usr/local/gcloud\nRUN tar -C /usr/local/gcloud -xvf /tmp/google-cloud-sdk.tar.gz && rm /tmp/google-cloud-sdk.tar.gz\nRUN /usr/local/gcloud/google-cloud-sdk/install.sh\nRUN pip install --no-cache-dir --upgrade google-api-python-client && pip install --no-cache-dir google-cloud-storage\n\n#Install aws cli.\nRUN pip3 install --no-cache-dir awscli --upgrade --user\n\n#Adding 'airflow' as group & user.\nRUN groupadd -g 5555 airflow \\\n    && useradd -ms /bin/bash -d ${AIRFLOW_HOME}  -u 5555 -g 5555 -p airflow airflow \\\n    && echo \"airflow:airflow\" | chpasswd && adduser airflow sudo\n\n#Creating folder.\nRUN mkdir /code-artifacts /data /home/airflow ${AIRFLOW_HOME}/startup_log ${AIRFLOW_HOME}/.ssh ${AIRFLOW_HOME}/.aws ${AIRFLOW_HOME}/.gcp ${AIRFLOW_HOME}/dags ${AIRFLOW_HOME}/logs ${AIRFLOW_HOME}/plugins \\\n    && mkdir -p /user/airflow \\\n    && chown -R airflow:airflow ${AIRFLOW_HOME}/* /data /code-artifacts /user/airflow /home/airflow\n\nADD airflow-config/airflow-${AIRFLOW_VERSION}.cfg ${AIRFLOW_HOME}/airflow.cfg\nADD config/user_add.py ${AIRFLOW_HOME}/user_add.py\nADD config/rbac_user_add.py ${AIRFLOW_HOME}/rbac_user_add.py\nADD config/execute_continous_scheduler.sh ${AIRFLOW_HOME}/execute_continous_scheduler.sh\n\n# airflow patch files present in airflowPatch folder\nRUN mkdir /tmp/airflow_patch\nADD airflowPatch1.8/* /tmp/airflow_patch/airflowPatch1.8/\nADD airflowPatch1.9/* /tmp/airflow_patch/airflowPatch1.9/\nADD airflowPatch1.10/* /tmp/airflow_patch/airflowPatch1.10/\nRUN if [ ! -z \"$AIRFLOW_PATCH_VERSION\" ] ; then \\\n    cp /tmp/airflow_patch/airflowPatch${AIRFLOW_PATCH_VERSION}/models.py /usr/local/lib/python3.6/site-packages/airflow/models.py; \\\n    cp /tmp/airflow_patch/airflowPatch${AIRFLOW_PATCH_VERSION}/views.py /usr/local/lib/python3.6/site-packages/airflow/www/views.py; \\\n    cp /tmp/airflow_patch/airflowPatch${AIRFLOW_PATCH_VERSION}/password_auth.py /usr/local/lib/python3.6/site-packages/airflow/contrib/auth/backends/password_auth.py; \\\n    cp /tmp/airflow_patch/airflowPatch${AIRFLOW_PATCH_VERSION}/e3a246e0dc1_current_schema.py /usr/local/lib/python3.6/site-packages/airflow/migrations/versions/e3a246e0dc1_current_schema.py; \\\n    chown root:staff /usr/local/lib/python3.6/site-packages/airflow/models.py; \\\n    chown root:staff /usr/local/lib/python3.6/site-packages/airflow/www/views.py; \\\n    chown root:staff /usr/local/lib/python3.6/site-packages/airflow/contrib/auth/backends/password_auth.py; \\\n    chown root:staff /usr/local/lib/python3.6/site-packages/airflow/migrations/versions/e3a246e0dc1_current_schema.py; \\\nfi\nRUN rm -rf /tmp/airflow_patch\n\n#Adding S3 logger.\nADD airflowExtraFeatures/s3_logger.py /usr/local/lib/python3.6/site-packages/airflow/config_templates/s3_logger.py\nRUN chown root:staff /usr/local/lib/python3.6/site-packages/airflow/config_templates/s3_logger.py\n\nRUN chown -R airflow:airflow ${AIRFLOW_HOME}/*\nVOLUME /usr/hdp\nVOLUME /code-artifacts\nVOLUME ${AIRFLOW_HOME}/.gcp\nVOLUME ${AIRFLOW_HOME}/.aws\nVOLUME ${AIRFLOW_HOME}/dags\nVOLUME ${AIRFLOW_HOME}/logs\n\nENV PATH=$PATH::/usr/local/gcloud/google-cloud-sdk/bin/\nENV PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python3.6/\n\n#for airflow processes log rotation.\nADD logrotate/airflow /etc/logrotate.d/airflow\nADD logrotate/run_log_rotate.sh ${AIRFLOW_HOME}/run_log_rotate.sh\n\n#setting up logrotation cron.\nRUN echo \"30 * * * * /bin/sh ${AIRFLOW_HOME}/run_log_rotate.sh >> ${AIRFLOW_HOME}/logRotate_logs.txt\" >> ${AIRFLOW_HOME}/airflow_cron\nRUN crontab ${AIRFLOW_HOME}/airflow_cron\nRUN rm ${AIRFLOW_HOME}/airflow_cron\n\n#ENV HDP_VERSION=2.6.1.0-129\n#export HDP_VERSION=${HDP_VERSION}\n#export HADOOP_CONF_DIR=/etc/hadoop/${HDP_VERSION}/0\n#export SPARK_CONF_DIR=/etc/spark/${HDP_VERSION}/0\n#export HIVE_CONF_DIR=/etc/hive/${HDP_VERSION}/0\n#export TEZ_CONF_DIR=/etc/tez/${HDP_VERSION}/0\n\nEXPOSE 5555 8793 2222 6379\n\nCOPY script/docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nRUN ln -s /usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat\n\nWORKDIR ${AIRFLOW_HOME}\nUSER airflow\n\n#setting default mode of docker-airflow as 'standalone'. Will be helpful when from Kitematic.\nENV MODE standalone\n\nHEALTHCHECK CMD [\"curl\", \"-f\", \"http://localhost:2222/health\"]\nENTRYPOINT [\"docker-entrypoint.sh\"]\n"
}