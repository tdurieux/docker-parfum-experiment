{
  "startTime": 1674220050088,
  "endTime": 1674220051723,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 226,
        "lineEnd": 226,
        "columnStart": 10,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 271,
        "lineEnd": 271,
        "columnStart": 24,
        "columnEnd": 44
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 44,
        "columnStart": 26,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 5,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 127,
        "lineEnd": 132,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 157,
        "lineEnd": 158,
        "columnStart": 26,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 176,
        "lineEnd": 178,
        "columnStart": 26,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 9,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 5,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 5,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 5,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 44,
        "columnStart": 26,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 127,
        "lineEnd": 132,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 157,
        "lineEnd": 158,
        "columnStart": 26,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 176,
        "lineEnd": 178,
        "columnStart": 26,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 9,
        "columnEnd": 71
      }
    }
  ],
  "repairedDockerfile": "#\n# VPNet.io - Virtual Private Network Essential Toolbox\n#\n# https://github.com/acrossfw/vpnet\n#\n# Use phusion/baseimage as base image. To make your builds\n# reproducible, make sure you lock down to a specific version, not\n# to `latest`! See\n# https://github.com/phusion/baseimage-docker/blob/master/Changelog.md\n# for a list of version numbers.\nFROM phusion/baseimage:0.9.19\nMAINTAINER AcrossFW <dev@acrossfw.com>\n\nENV DEBIAN_FRONTEND noninteractive\n\n#\n#\n# START HEADER - VPNet.io System Init\n#\n#\n\n#\tmodule-init-tools \\ operation not permitted inside docker\nRUN apt-get update -qq && apt-get -qqy --no-install-recommends install \\\n      apt-utils \\\n     curl \\\n     dnsmasq \\\n     dnsutils \\\n     inetutils-ping \\\n     inetutils-traceroute \\\n     iperf \\\n     iptables \\\n     jq \\\n     lsof \\\n     lua5.1 \\\n     man \\\n     net-tools \\\n     netcat \\\n     nload \\\n     screen \\\n     shellcheck \\\n     speedtest-cli \\\n     tcpdump \\\n     tinc \\\n     vim \\\n     wget \\\n\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#    && sed -i 's/files dns/files/g' /etc/nsswitch.conf \\\n\nENV BATS_VERSION 0.4.0\nRUN curl -f -s -o \"/tmp/v${BATS_VERSION}.tar.gz\" -L \\\n      \"https://github.com/sstephenson/bats/archive/v${BATS_VERSION}.tar.gz\" \\\n    && tar -xzf \"/tmp/v${BATS_VERSION}.tar.gz\" -C /tmp/ \\\n    && bash \"/tmp/bats-${BATS_VERSION}/install.sh\" /usr/local \\\n\n    && rm -rf /tmp/* && rm \"/tmp/v${BATS_VERSION}.tar.gz\"\n\nENV ADMIN_NAME vpnet\nENV ADMIN_PASS vpnet.io\n# TODO\nENV USERS \"user:pass\"\nENV HOSTNAME vpnet.io\nENV EMAIL dev@acrossfw.com\n\nENV DNS 8.8.8.8\nENV DNS2 8.8.4.4\n\nENV ACROSSFW_HOME /acrossfw\nENTRYPOINT [ \"/acrossfw/bin/entrypoint.sh\" ]\nCMD [ \"start\" ]\n\nWORKDIR $ACROSSFW_HOME\nRUN ln -s /etc/service /service \\\n  && ln -s ${ACROSSFW_HOME}/service/vpnet /service/vpnet \\\n  && echo 'export WANIP=`curl -Ss v4.ifconfig.co`' >> /etc/profile \\\n  && echo 'cd # fix $PWD=/acrossfw right after login bug? do not know why yet.' >> /root/.bashrc \\\n  && echo '[[ \"$PS1\" =~ WANIP ]] || PS1=${PS1//@\\\\\\\\h/@\\\\\\\\h(\\$WANIP)}' >> /root/.bashrc \\\n  && echo '[[ \"$PS1\" =~ WANIP ]] || PS1=${PS1//@\\\\\\\\h/@\\\\\\\\h(\\$WANIP)}' >> /etc/skel/.bashrc\n\n#\n# Node.JS\n#\nRUN curl -f -sL https://deb.nodesource.com/setup_7.x | bash - \\\n  && apt-get install --no-install-recommends -qqy nodejs && rm -rf /var/lib/apt/lists/*;\n\nENV PORT_WEB 10080\nEXPOSE ${PORT_WEB}/tcp\n\nCOPY service/vpnet/package.json service/vpnet/\n\nRUN cd service/vpnet \\\n  && npm install && npm cache clean --force;\n\n#\n#\n# END HEADER - VPNet.io\n#\n#\n\n#\n# 22: START SSH\n#\n\n# to prevent conflict with host ssh standard port when run in --net=host mode\nENV PORT_SSH 10022\nEXPOSE ${PORT_SSH}/tcp\n\n# Regenerate SSH host keys. baseimage-docker does not contain any, so you\n# have to do that yourself. You may also comment out this instruction; the\n# init system will auto-generate one during boot.\n# RUN /etc/my_init.d/00_regen_ssh_host_keys.sh\nRUN rm -f /etc/service/sshd/down \\\n    && ln -s ${ACROSSFW_HOME}/service/ssh /service/ssh\n\nENV SSH_AUTHORIZED_KEYS \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6GRsnNc1judMmIFeYzu02KbkkWW0mkrOusAe1kdEW9MeXIgq4cOjMMYHGHLxQR+WU4/yexpKdBlDUNSJiw7uSTyGl0ORwwKZfAeMlaFWRCtIrPh1DBugjZQKcAxoKaMeH2lzHIj5H/tCrgyjmQ6foUG70cKFQFtp6+aSURr1Oj12mQGD/JsfTRw2nnLdDA7TEV9SmhThliu7voq/u50doZjutFmASQVJJ+QD2jISyc7DGudVoQWNqsy6fJyHqnFKWpvlLMw22MgXOJEKpGS616jHGLqwvCCFghSl2+Dh3XVkhtL5WV9mU0dyqcesr347TH7FtVwufhI7yArU7+qin dev@acrossfw.com\"\n\n#\n# END SSH\n#\n\n#\n# 500: START IPSEC\n#\n\n# Inspired by https://github.com/gaomd/docker-ikev2-vpn-server/blob/master/Dockerfile\n#\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n      iptables \\\n      ndppd \\\n      openssl \\\n      strongswan \\\n      uuid-runtime \\\n    && rm /etc/ipsec.secrets \\\n    && ln -s ${ACROSSFW_HOME}/service/ipsec /service/ipsec \\\n\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# IPSec Port must be standard(should not change?)\nEXPOSE 500/udp 4500/udp\n\n#\n# END IPSEC\n#\n\n#\n# 1723: START PPTP\n#\n\n# PPTP Port must be standard(should not change?)\nEXPOSE 1723/tcp\n\n# https://groups.google.com/forum/#!topic/docker-user/dC6aIr4R1hY\n#\n# inspired by https://github.com/vimagick/dockerfiles/tree/master/pptpd\n#\n# `rm pptpd.postinst` is a workaround of `no bus` error with systemd\nRUN apt-get update -qq && apt-get install --no-install-recommends -qqy \\\n      pptpd \\\n      || true \\\n    && rm -f rm /var/lib/dpkg/info/pptpd.postinst \\\n    && ln -s ${ACROSSFW_HOME}/service/pptp /service/pptp \\\n\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\n#\n# END PPTP\n#\n\n#\n# 3128: START SQUID\n#\nENV PORT_SQUID 13128\nEXPOSE ${PORT_SQUID}/tcp\n\nRUN apt-get update -qq && apt-get install --no-install-recommends -qqy \\\n      apache2-utils \\\n      squid \\\n    && ln -s ${ACROSSFW_HOME}/service/squid /service/squid \\\n\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#\n# END SQUID\n#\n\n#\n# 8388: START SHADOWSOCKS\n#\n\n# do not use the standard port\nENV PORT_SHADOWSOCKS 18388\nEXPOSE ${PORT_SHADOWSOCKS}/tcp ${PORT_SHADOWSOCKS}/udp\n\nENV SHADOWSOCKS_ENCRYPT_METHOD salsa20\n\nRUN echo 'deb http://archive.ubuntu.com/ubuntu yakkety main universe' > /etc/apt/sources.list \\\n      && apt-get update -qq \\\n      && apt-get install --no-install-recommends -qqy shadowsocks-libev \\\n      && ln -s ${ACROSSFW_HOME}/service/shadowsocks /service/shadowsocks \\\n\n      && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#\n# END SHADOWSOCKS\n#\n\n#\n# 554: START KCPTUN\n#\nENV PORT_KCPTUN 10554\nEXPOSE ${PORT_KCPTUN}/udp\n\n# Non-Defaults\nENV KCPTUN_CRYPT salsa20\nENV KCPTUN_DATASHARD 0\nENV KCPTUN_PARITYSHARD 0\n\n# Defaults\nENV KCPTUN_MODE fast\nENV KCPTUN_MTU 1350\nENV KCPTUN_NOCOMP 1\nENV KCPTUN_RCVWND 1024\nENV KCPTUN_SNDWND 1024\n\nRUN URL=$( curl -f -s https://api.github.com/repos/xtaci/kcptun/releases/latest | jq -r '.assets[] | select(.name | contains(\"linux-amd64\")) .browser_download_url') \\\n      && wget --quiet -O /tmp/kcptun.tgz \"$URL\" \\\n      && [ -e \"${ACROSSFW_HOME}/service/kcptun/bin/\" ] || mkdir -p ${ACROSSFW_HOME}/service/kcptun/bin/ \\\n      && tar zxvf /tmp/kcptun.tgz -C ${ACROSSFW_HOME}/service/kcptun/bin/ \\\n      && ln -s ${ACROSSFW_HOME}/service/kcptun /service/kcptun \\\n      && rm -f /tmp/kcptun.tgz\n\n#\n# END KCPTUN\n#\n\n#\n# 1194: START OPENVPN\n# TBD\n\n# do not use the standard port\nENV PORT_OPENVPN 11194\nEXPOSE ${PORT_OPENVPN}/tcp ${PORT_OPENVPN}/udp\n\n# inspired by https://github.com/gaomd/docker-openvpn-static\n\n#\n# END OPENVPN\n#\n\n\n#\n# TODO:\n#   L2TP\n#   Tinc\n#   Avahi\n#   OpenConnect VPN Server - https://lvii.gitbooks.io/outman/content/ocserv.html\n#\n\n#\n#\n# START FOOTER - VPNet.io\n#\n#\n\n# put COPY . . the end of Dockerfile for speedup build time by maximum cache usage\nCOPY . .\n\nRUN cat /dev/null                                      > ${ACROSSFW_HOME}/ENV.build \\\n  && echo \"BUILD_HOST=\\\"$(hostname -f)\\\"\"             >> ${ACROSSFW_HOME}/ENV.build \\\n  && echo \"BUILD_IP=\\\"$( curl -f -Ss ifconfig.io)\\\"\" >> ${ACROSSFW_HOME}/ENV.build \\\n  && echo \"BUILD_DATE=\\\"$(date)\\\"\"                    >> ${ACROSSFW_HOME}/ENV.build \\\n  && echo \"VERSION_HASH=\\\"$(./bin/version.sh hash)\\\"\" >> ${ACROSSFW_HOME}/ENV.build\n\nRUN ./bin/entrypoint.sh test\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#\n#\n# END FOOTER - VPNet.io\n#\n#\n"
}