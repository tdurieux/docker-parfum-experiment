{
  "startTime": 1674248008073,
  "endTime": 1674248009931,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 29,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 47,
        "columnEnd": 163
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 58,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 11,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 52,
        "columnEnd": 178
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 63,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 11,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 48,
        "columnEnd": 166
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 59,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 11,
        "columnEnd": 144
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 47,
        "columnEnd": 167
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 58,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 11,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 44,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 55,
        "columnEnd": 88
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 11,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 43,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 54,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 11,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 46,
        "columnEnd": 160
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 57,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 11,
        "columnEnd": 137
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 45,
        "columnEnd": 157
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 56,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 11,
        "columnEnd": 134
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG TAG=3.10.1-alpine3.15\nFROM python:${TAG} as builder\n\nWORKDIR /bin_dir\n\nRUN apk add --no-cache \\\n    # Builder deps\n    curl=~7 \\\n    unzip=~6 && \\\n    # Upgrade pip for be able get latest Checkov\n    python3 -m pip install --no-cache-dir --upgrade pip\n\nARG PRE_COMMIT_VERSION=${PRE_COMMIT_VERSION:-latest}\nARG TERRAFORM_VERSION=${TERRAFORM_VERSION:-latest}\n\n# Install pre-commit\nRUN [ ${PRE_COMMIT_VERSION} = \"latest\" ] && pip3 install --no-cache-dir pre-commit \\\n    || pip3 install --no-cache-dir pre-commit==${PRE_COMMIT_VERSION}\n\n# Install terraform because pre-commit needs it\nRUN if [ \"${TERRAFORM_VERSION}\" = \"latest\" ]; then \\\n        TERRAFORM_VERSION=\"$( curl -f -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | grep -o -E -m 1 \"[0-9.]+\")\" \\\n    ; fi && \\\n    curl -f -L \"https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\" > terraform.zip && \\\n    unzip terraform.zip terraform && rm terraform.zip\n\n#\n# Install tools\n#\nARG CHECKOV_VERSION=${CHECKOV_VERSION:-false}\nARG INFRACOST_VERSION=${INFRACOST_VERSION:-false}\nARG TERRAFORM_DOCS_VERSION=${TERRAFORM_DOCS_VERSION:-false}\nARG TERRAGRUNT_VERSION=${TERRAGRUNT_VERSION:-false}\nARG TERRASCAN_VERSION=${TERRASCAN_VERSION:-false}\nARG TFLINT_VERSION=${TFLINT_VERSION:-false}\nARG TFSEC_VERSION=${TFSEC_VERSION:-false}\nARG TFUPDATE_VERSION=${TFUPDATE_VERSION:-false}\nARG HCLEDIT_VERSION=${HCLEDIT_VERSION:-false}\n\n\n# Tricky thing to install all tools by set only one arg.\n# In RUN command below used `. /.env` <- this is sourcing vars that\n# specified in step below\nARG INSTALL_ALL=${INSTALL_ALL:-false}\nRUN if [ \"$INSTALL_ALL\" != \"false\" ]; then \\\n        echo \"export CHECKOV_VERSION=latest\" >> /.env && \\\n        echo \"export INFRACOST_VERSION=latest\" >> /.env && \\\n        echo \"export TERRAFORM_DOCS_VERSION=latest\" >> /.env && \\\n        echo \"export TERRAGRUNT_VERSION=latest\" >> /.env && \\\n        echo \"export TERRASCAN_VERSION=latest\" >> /.env && \\\n        echo \"export TFLINT_VERSION=latest\" >> /.env && \\\n        echo \"export TFSEC_VERSION=latest\" >> /.env && \\\n        echo \"export TFUPDATE_VERSION=latest\" >> /.env && \\\n        echo \"export HCLEDIT_VERSION=latest\" >> /.env \\\n    ; else \\\n        touch /.env \\\n    ; fi\n\n\n# Checkov\nRUN . /.env && \\\n    if [ \"$CHECKOV_VERSION\" != \"false\" ]; then \\\n    ( \\\n        apk add --no-cache gcc=~10 libffi-dev=~3 musl-dev=~1; \\\n        [ \"$CHECKOV_VERSION\" = \"latest\" ] && pip3 install --no-cache-dir checkov \\\n        || pip3 install --no-cache-dir checkov==${CHECKOV_VERSION}; \\\n        apk del gcc libffi-dev musl-dev \\\n    ) \\\n    ; fi\n\n# infracost\nRUN . /.env && \\\n    if [ \"$INFRACOST_VERSION\" != \"false\" ]; then \\\n    ( INFRACOST_RELEASES=\"https://api.github.com/repos/infracost/infracost/releases\" && \\\n        [ \"$INFRACOST_VERSION\" = \"latest\" ] && curl -f -L \"$( curl -f -s ${INFRACOST_RELEASES}/latest | grep -o -E -m 1 \"https://.+?-linux-amd64.tar.gz\")\" > infracost.tgz \\\n        || curl -f -L \"$( curl -f -s ${INFRACOST_RELEASES} | grep -o -E \"https://.+?v${INFRACOST_VERSION}/infracost-linux-amd64.tar.gz\")\" > infracost.tgz) \\\n    && tar -xzf infracost.tgz && rm infracost.tgz && mv infracost-linux-amd64 infracost \\\n    ; fi\n\n# Terraform docs\nRUN . /.env && \\\n    if [ \"$TERRAFORM_DOCS_VERSION\" != \"false\" ]; then \\\n    ( TERRAFORM_DOCS_RELEASES=\"https://api.github.com/repos/terraform-docs/terraform-docs/releases\" && \\\n        [ \"$TERRAFORM_DOCS_VERSION\" = \"latest\" ] && curl -f -L \"$( curl -f -s ${TERRAFORM_DOCS_RELEASES}/latest | grep -o -E -m 1 \"https://.+?-linux-amd64.tar.gz\")\" > terraform-docs.tgz \\\n        || curl -f -L \"$( curl -f -s ${TERRAFORM_DOCS_RELEASES} | grep -o -E \"https://.+?v${TERRAFORM_DOCS_VERSION}-linux-amd64.tar.gz\")\" > terraform-docs.tgz) \\\n    && tar -xzf terraform-docs.tgz terraform-docs && rm terraform-docs.tgz && chmod +x terraform-docs \\\n    ; fi\n\n# Terragrunt\nRUN . /.env \\\n    && if [ \"$TERRAGRUNT_VERSION\" != \"false\" ]; then \\\n    ( TERRAGRUNT_RELEASES=\"https://api.github.com/repos/gruntwork-io/terragrunt/releases\" && \\\n        [ \"$TERRAGRUNT_VERSION\" = \"latest\" ] && curl -f -L \"$( curl -f -s ${TERRAGRUNT_RELEASES}/latest | grep -o -E -m 1 \"https://.+?/terragrunt_linux_amd64\")\" > terragrunt \\\n        || curl -f -L \"$( curl -f -s ${TERRAGRUNT_RELEASES} | grep -o -E -m 1 \"https://.+?v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64\")\" > terragrunt) \\\n    && chmod +x terragrunt \\\n    ; fi\n\n\n# Terrascan\nRUN . /.env && \\\n    if [ \"$TERRASCAN_VERSION\" != \"false\" ]; then \\\n    ( TERRASCAN_RELEASES=\"https://api.github.com/repos/tenable/terrascan/releases\" && \\\n        [ \"$TERRASCAN_VERSION\" = \"latest\" ] && curl -f -L \"$( curl -f -s ${TERRASCAN_RELEASES}/latest | grep -o -E -m 1 \"https://.+?_Linux_x86_64.tar.gz\")\" > terrascan.tar.gz \\\n        || curl -f -L \"$( curl -f -s ${TERRASCAN_RELEASES} | grep -o -E \"https://.+?${TERRASCAN_VERSION}_Linux_x86_64.tar.gz\")\" > terrascan.tar.gz) \\\n    && tar -xzf terrascan.tar.gz terrascan && rm terrascan.tar.gz && \\\n    ./terrascan init \\\n    ; fi\n\n# TFLint\nRUN . /.env && \\\n    if [ \"$TFLINT_VERSION\" != \"false\" ]; then \\\n    ( TFLINT_RELEASES=\"https://api.github.com/repos/terraform-linters/tflint/releases\" && \\\n        [ \"$TFLINT_VERSION\" = \"latest\" ] && curl -f -L \"$( curl -f -s ${TFLINT_RELEASES}/latest | grep -o -E -m 1 \"https://.+?_linux_amd64.zip\")\" > tflint.zip \\\n        || curl -f -L \"$( curl -f -s ${TFLINT_RELEASES} | grep -o -E \"https://.+?/v${TFLINT_VERSION}/tflint_linux_amd64.zip\")\" > tflint.zip) \\\n    && unzip tflint.zip && rm tflint.zip \\\n    ; fi\n\n# TFSec\nRUN . /.env && \\\n    if [ \"$TFSEC_VERSION\" != \"false\" ]; then \\\n    ( TFSEC_RELEASES=\"https://api.github.com/repos/aquasecurity/tfsec/releases\" && \\\n        [ \"$TFSEC_VERSION\" = \"latest\" ] && curl -f -L \"$( curl -f -s ${TFSEC_RELEASES}/latest | grep -o -E -m 1 \"https://.+?/tfsec-linux-amd64\")\" > tfsec \\\n        || curl -f -L \"$( curl -f -s ${TFSEC_RELEASES} | grep -o -E -m 1 \"https://.+?v${TFSEC_VERSION}/tfsec-linux-amd64\")\" > tfsec) \\\n    && chmod +x tfsec \\\n    ; fi\n\n# TFUpdate\nRUN . /.env && \\\n    if [ \"$TFUPDATE_VERSION\" != \"false\" ]; then \\\n    ( TFUPDATE_RELEASES=\"https://api.github.com/repos/minamijoyo/tfupdate/releases\" && \\\n        [ \"$TFUPDATE_VERSION\" = \"latest\" ] && curl -f -L \"$( curl -f -s ${TFUPDATE_RELEASES}/latest | grep -o -E -m 1 \"https://.+?_linux_amd64.tar.gz\")\" > tfupdate.tgz \\\n        || curl -f -L \"$( curl -f -s ${TFUPDATE_RELEASES} | grep -o -E -m 1 \"https://.+?${TFUPDATE_VERSION}_linux_amd64.tar.gz\")\" > tfupdate.tgz) \\\n    && tar -xzf tfupdate.tgz tfupdate && rm tfupdate.tgz \\\n    ; fi\n\n# hcledit\nRUN . /.env && \\\n    if [ \"$HCLEDIT_VERSION\" != \"false\" ]; then \\\n    ( HCLEDIT_RELEASES=\"https://api.github.com/repos/minamijoyo/hcledit/releases\" && \\\n        [ \"$HCLEDIT_VERSION\" = \"latest\" ] && curl -f -L \"$( curl -f -s ${HCLEDIT_RELEASES}/latest | grep -o -E -m 1 \"https://.+?_linux_amd64.tar.gz\")\" > hcledit.tgz \\\n        || curl -f -L \"$( curl -f -s ${HCLEDIT_RELEASES} | grep -o -E -m 1 \"https://.+?${HCLEDIT_VERSION}_linux_amd64.tar.gz\")\" > hcledit.tgz) \\\n    && tar -xzf hcledit.tgz hcledit && rm hcledit.tgz \\\n    ; fi\n\n# Checking binaries versions and write it to debug file\nRUN . /.env && \\\n    F=tools_versions_info && \\\n    pre-commit --version >> $F && \\\n    ./terraform --version | head -n 1 >> $F && \\\n    (if [ \"$CHECKOV_VERSION\"        != \"false\" ]; then echo \"checkov $(checkov --version)\" >> $F;     else echo \"checkov SKIPPED\" >> $F        ; fi) && \\\n    (if [ \"$INFRACOST_VERSION\"      != \"false\" ]; then echo \"$(./infracost --version)\" >> $F;         else echo \"infracost SKIPPED\" >> $F      ; fi) && \\\n    (if [ \"$TERRAFORM_DOCS_VERSION\" != \"false\" ]; then ./terraform-docs --version >> $F;              else echo \"terraform-docs SKIPPED\" >> $F ; fi) && \\\n    (if [ \"$TERRAGRUNT_VERSION\"     != \"false\" ]; then ./terragrunt --version >> $F;                  else echo \"terragrunt SKIPPED\" >> $F     ; fi) && \\\n    (if [ \"$TERRASCAN_VERSION\"      != \"false\" ]; then echo \"terrascan $(./terrascan version)\" >> $F; else echo \"terrascan SKIPPED\" >> $F      ; fi) && \\\n    (if [ \"$TFLINT_VERSION\"         != \"false\" ]; then ./tflint --version >> $F;                      else echo \"tflint SKIPPED\" >> $F         ; fi) && \\\n    (if [ \"$TFSEC_VERSION\"          != \"false\" ]; then echo \"tfsec $(./tfsec --version)\" >> $F;       else echo \"tfsec SKIPPED\" >> $F          ; fi) && \\\n    (if [ \"$TFUPDATE_VERSION\"       != \"false\" ]; then echo \"tfupdate $(./tfupdate --version)\" >> $F; else echo \"tfupdate SKIPPED\" >> $F       ; fi) && \\\n    (if [ \"$HCLEDIT_VERSION\"        != \"false\" ]; then echo \"hcledit $(./hcledit version)\" >> $F;     else echo \"hcledit SKIPPED\" >> $F       ; fi) && \\\n    echo -e \"\\n\\n\" && cat $F && echo -e \"\\n\\n\"\n\n\n\nFROM python:${TAG}\n\nRUN apk add --no-cache \\\n    # pre-commit deps\n    git=~2 \\\n    # All hooks deps\n    bash=~5 \\\n    # pre-commit-hooks deps: https://github.com/pre-commit/pre-commit-hooks\n    musl-dev=~1 \\\n    gcc=~10\n\n# Copy tools\nCOPY --from=builder \\\n    # Needed for all hooks\n    /usr/local/bin/pre-commit \\\n    # Hooks and terraform binaries\n    /bin_dir/ \\\n    /usr/local/bin/checkov* \\\n        /usr/bin/\n# Copy pre-commit packages\nCOPY --from=builder /usr/local/lib/python3.10/site-packages/ /usr/local/lib/python3.10/site-packages/\n# Copy terrascan policies\nCOPY --from=builder /root/ /root/\n\n# Install hooks extra deps\nRUN if [ \"$(grep -o '^terraform-docs SKIPPED$' /usr/bin/tools_versions_info)\" = \"\" ]; then \\\n        apk add --no-cache perl=~5 \\\n    ; fi && \\\n    if [ \"$(grep -o '^infracost SKIPPED$' /usr/bin/tools_versions_info)\" = \"\" ]; then \\\n        apk add --no-cache jq=~1 \\\n    ; fi && \\\n    # Fix git runtime fatal:\n    # unsafe repository ('/lint' is owned by someone else)\n    git config --global --add safe.directory /lint\n\nENV PRE_COMMIT_COLOR=${PRE_COMMIT_COLOR:-always}\n\nENV INFRACOST_API_KEY=${INFRACOST_API_KEY:-}\nENV INFRACOST_SKIP_UPDATE_CHECK=${INFRACOST_SKIP_UPDATE_CHECK:-false}\n\nENTRYPOINT [ \"pre-commit\" ]\n"
}