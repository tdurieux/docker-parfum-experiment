{
  "startTime": 1674251920128,
  "endTime": 1674251921616,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 79,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 101,
        "lineEnd": 110,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\n\nMAINTAINER Chebrolu Harika <chebroluharika@gmail.com>\n\nARG THEANO_VERSION=rel-0.8.2\nARG TENSORFLOW_VERSION=0.12.1\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=1.2.0\nARG TORCH_VERSION=latest\n\nRUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n\tcat /proc/driver/nvidia/version && \\\n\techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n\tnvcc -V && \\\n\techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n\n# Install some dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tbc \\\n\t\tbuild-essential \\\n\t\tcmake \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibopenjpeg2 \\\n\t\tlibpng12-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tpkg-config \\\n\t\tpython-dev \\\n\t\tsoftware-properties-common \\\n\t\tunzip \\\n\t\tvim \\\n\t\twget \\\n\t\tzlib1g-dev \\\n\t\tqt5-default \\\n\t\tlibvtk6-dev \\\n\t\tzlib1g-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibwebp-dev \\\n\t\tlibpng-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibjasper-dev \\\n\t\tlibopenexr-dev \\\n\t\tlibgdal-dev \\\n\t\tlibdc1394-22-dev \\\n\t\tlibavcodec-dev \\\n\t\tlibavformat-dev \\\n\t\tlibswscale-dev \\\n\t\tlibtheora-dev \\\n\t\tlibvorbis-dev \\\n\t\tlibxvidcore-dev \\\n\t\tlibx264-dev \\\n\t\tyasm \\\n\t\tlibopencore-amrnb-dev \\\n\t\tlibopencore-amrwb-dev \\\n\t\tlibv4l-dev \\\n\t\tlibxine2-dev \\\n\t\tlibtbb-dev \\\n\t\tlibeigen3-dev \\\n\t\tpython-dev \\\n\t\tpython-tk \\\n\t\tpython-numpy \\\n\t\tpython3-dev \\\n\t\tpython3-tk \\\n\t\tpython3-numpy \\\n\t\tant \\\n\t\tdefault-jdk \\\n\t\tdoxygen \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/* && \\\n\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n\tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Install pip\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n\tpython get-pip.py && \\\n\trm get-pip.py\n\n# Add SNI support to Python\nRUN pip --no-cache-dir install \\\n\t\tpyopenssl \\\n\t\tndg-httpsclient \\\n\t\tpyasn1\n\n# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tpython-numpy \\\n\t\tpython-scipy \\\n\t\tpython-nose \\\n\t\tpython-h5py \\\n\t\tpython-skimage \\\n\t\tpython-matplotlib \\\n\t\tpython-pandas \\\n\t\tpython-sklearn \\\n\t\tpython-sympy \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/*\n\n# Install other useful Python packages using pip\nRUN pip --no-cache-dir install --upgrade ipython && \\\n\tpip --no-cache-dir install \\\n\t\tCython \\\n\t\tipykernel \\\n\t\tjupyter \\\n\t\tpath.py \\\n\t\tPillow \\\n\t\tpygments \\\n\t\tsix \\\n\t\tsphinx \\\n\t\twheel \\\n\t\tzmq \\\n\t\t&& \\\n\tpython -m ipykernel.kernelspec\n\n\n# Install TensorFlow\nRUN pip --no-cache-dir install \\\n\thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\n\n\n# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} && \\\n\t\\\n\techo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\\n\t\t\\n[lib]\\ncnmem=0.95 \\\n\t\t\\n[nvcc]\\nfastmath=True \\\n\t\t\\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\\n\t\t\\n[DebugMode]\\ncheck_finite=1\" \\\n\t> /root/.theanorc\n\n\n# Install Keras\nRUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n\n# Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive && \\\n\tcd /root/torch && \\\n\tbash install-deps && \\\n\tyes no | ./install.sh\n\n# Export the LUA evironment variables manually\nENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \\\n\tLUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \\\n\tPATH=/root/torch/install/bin:$PATH \\\n\tLD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH \\\n\tDYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH\nENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH\n\n# Install OpenCV\nRUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \\\n\tcd /root/opencv && \\\n\tmkdir build && \\\n\tcd build && \\\n\tcmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. && \\\n\tmake -j\"$(nproc)\"  && \\\n\tmake install && \\\n\tldconfig && \\\n\techo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n\nWORKDIR \"/root\"\n\nRUN pip install --no-cache-dir flow2ml\nADD . flow2Ml/\nWORKDIR /root/flow2ml\n\n# Clean and remove not required packages\nRUN DEBIAN_FRONTEND=noninteractive \\\n    apt-get autoremove -y && \\\n    apt-get clean -y && \\\n    rm -rf /var/cache/apt/archives/* /var/cache/apt/lists/* /tmp/* /root/cache/.\n\nCMD [\"/bin/bash\"]\n"
}