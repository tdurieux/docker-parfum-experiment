{
  "startTime": 1674253717055,
  "endTime": 1674253718371,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 8,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#######################################################################\n##- Copyright (c) Huawei Technologies Co., Ltd. 2019. All rights reserved.\n# - lcr licensed under the Mulan PSL v2.\n# - You can use this software according to the terms and conditions of the Mulan PSL v2.\n# - You may obtain a copy of Mulan PSL v2 at:\n# -     http://license.coscl.org.cn/MulanPSL2\n# - THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR\n# - IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR\n# - PURPOSE.\n# - See the Mulan PSL v2 for more details.\n##- @Description: prepare compile container environment\n##- @Author: haozi007\n##- @Create: 2021-12-31\n#######################################################################\n# This file describes the isulad compile container image.\n#\n# Usage:\n#\n# docker build --build-arg http_proxy=YOUR_HTTP_PROXY_IF_NEEDED \\\n#\t\t--build-arg https_proxy=YOUR_HTTPS_PROXY_IF_NEEDED \\\n#\t\t-t YOUR_IMAGE_NAME -f ./Dockerfile .\n\nFROM fedora:35\nMAINTAINER haozi007 <liuhao27@huawei.com>\n\n# if set proxy, need add no_proxy\n# ENV no_proxy=127.0.0.1\n# if you run CI in intranet, you need set proxy\n# ENV http_proxy=http://proxy.com\n# ENV https_proxy=http://proxy.com\n\nRUN echo \"nameserver 8.8.8.8\" > /etc/resolv.conf && \\\n    echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf && \\\n    echo \"search localdomain\" >> /etc/resolv.conf\n\n# Install dependency package\nRUN dnf update -y && dnf install -y systemd && dnf clean all\n\nRUN dnf install -y  automake \\\n\t\t\tautoconf \\\n\t\t\tlibtool \\\n\t\t\tmake \\\n\t\t\tcmake \\\n\t\t\tgrpc-devel \\\n\t\t\tgrpc-plugins \\\n\t\t\tlibevent-devel \\\n\t\t\tlibwebsockets-devel \\\n\t\t\thttp-parser-devel \\\n\t\t\tgtest-devel \\\n\t\t\tgmock-devel \\\n\t\t\tlibarchive-devel \\\n\t\t\twhich \\\n\t\t\tgdb \\\n\t\t\tstrace \\\n\t\t\trpm-build \\\n\t\t\tgraphviz \\\n\t\t\tlibcap \\\n\t\t\tlibcap-devel \\\n\t\t\tlibxslt  \\\n\t\t\tdocbook2X \\\n\t\t\tlibselinux \\\n\t\t\tlibselinux-devel \\\n\t\t\tcontainer-selinux \\\n\t\t\tlibseccomp \\\n\t\t\tlibseccomp-devel \\\n\t\t\tyajl-devel \\\n\t\t\tgit \\\n\t\t\tdnsmasq \\\n\t\t\tlibcgroup \\\n\t\t\trsync \\\n\t\t\tiptables \\\n\t\t\tiproute \\\n\t\t\tnet-tools \\\n\t\t\tunzip \\\n\t\t\ttar \\\n\t\t\twget \\\n\t\t\tcppcheck \\\n\t\t\tpython3 \\\n\t\t\tpython3-pip \\\n\t\t\tdevice-mapper-devel \\\n\t\t\txz-devel \\\n\t\t\tlibtar \\\n\t\t\tlibtar-devel \\\n\t\t\tlibcurl-devel \\\n\t\t\tzlib-devel \\\n\t\t\tglibc-headers \\\n\t\t\topenssl-devel \\\n\t\t\tgcc \\\n\t\t\tgcc-c++ \\\n\t\t\thostname \\\n\t\t\tsqlite-devel \\\n\t\t\tgpgme \\\n\t\t\tgpgme-devel \\\n\t\t\texpect \\\n\t\t\tsystemd-devel \\\n\t\t\tsystemd-libs \\\n\t\t\tgo \\\n\t\t\tbc \\\n\t\t\tprocps-ng \\\n\t\t\tvalgrind \\\n\t\t\te2fsprogs \\\n\t\t\tlcov \\\n\t\t\tlibasan \\\n\t\t\tlangpacks-en \\\n\t\t\tcontainernetworking-plugins \\\n\t\t\trunc \\\n\t\t\tlvm2 \\\n\t\t\ttcpdump \\\n\t\t\tsystemd-udev \\\n\t\t\tiputils\n\nRUN yum clean all && \\\n    (cd /lib/systemd/system/sysinit.target.wants/; for i in *; \\\n    do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\n    rm -f /lib/systemd/system/multi-user.target.wants/*;\\\n    rm -f /etc/systemd/system/*.wants/*;\\\n    rm -f /lib/systemd/system/local-fs.target.wants/*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\n    rm -f /lib/systemd/system/basic.target.wants/*;\\\n    rm -f /lib/systemd/system/anaconda.target.wants/*;\n\n# disalbe sslverify\nRUN git config --global http.sslverify false\n\nRUN echo \"export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\" >> /etc/bashrc && \\\n    echo \"export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:$LD_LIBRARY_PATH\" >> /etc/bashrc && \\\n    echo \"/usr/lib\" >> /etc/ld.so.conf && \\\n    echo \"/usr/local/lib\" >> /etc/ld.so.conf\n\n\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n\n# configure rust\nRUN echo \"[source.crates-io]\" >> ${HOME}/.cargo/config && \\\n    echo \"[source.local-registry]\" >> ${HOME}/.cargo/config && \\\n    echo \"directory = \\\"vendor\\\"\" >> ${HOME}/.cargo/config\n\n# install libevhtp\nRUN export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH && \\\n        set -x && \\\n        cd ~ && \\\n        git clone https://gitee.com/src-openeuler/libevhtp.git && \\\n        cd libevhtp && \\\n        git checkout -b openEuler-20.03-LTS-tag openEuler-20.03-LTS-tag && \\\n        tar -xzvf libevhtp-1.2.16.tar.gz && \\\n        cd libevhtp-1.2.16 && \\\n        patch -p1 -F1 -s < ../0001-support-dynamic-threads.patch && \\\n        patch -p1 -F1 -s < ../0002-close-openssl.patch && \\\n        rm -rf build && \\\n        mkdir build && \\\n        cd build && \\\n        cmake -D EVHTP_BUILD_SHARED=on -D EVHTP_DISABLE_SSL=on ../ && \\\n        make -j $(nproc) && \\\n        make install && \\\n        ldconfig && rm libevhtp-1.2.16.tar.gz\n\nVOLUME [ \"/sys/fs/cgroup\" ]\nCMD [\"/usr/sbin/init\"]\nWORKDIR /root\n"
}