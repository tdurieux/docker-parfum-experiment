{
  "startTime": 1674250682344,
  "endTime": 1674250683430,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 8,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 95,
        "columnStart": 1,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 95,
        "columnStart": 1,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#######################################################################\n##- Copyright (c) Huawei Technologies Co., Ltd. 2022. All rights reserved.\n# - lcr licensed under the Mulan PSL v2.\n# - You can use this software according to the terms and conditions of the Mulan PSL v2.\n# - You may obtain a copy of Mulan PSL v2 at:\n# -     http://license.coscl.org.cn/MulanPSL2\n# - THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR\n# - IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR\n# - PURPOSE.\n# - See the Mulan PSL v2 for more details.\n##- @Description: prepare compile container environment\n##- @Author: wujing\n##- @Create: 2022-03-25\n#######################################################################\n# This file describes the isulad compile container image.\n#\n# Usage:\n#\n# docker build --build-arg http_proxy=YOUR_HTTP_PROXY_IF_NEEDED \\\n#\t\t--build-arg https_proxy=YOUR_HTTPS_PROXY_IF_NEEDED \\\n#\t\t-t YOUR_IMAGE_NAME -f ./Dockerfile .\n\n\nFROM\tubuntu:20.04\nMAINTAINER WuJing <wujing50@huawei.com>\n\nENV TZ=Asia/Shanghai\n\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nRUN echo \"nameserver 8.8.8.8\" > /etc/resolv.conf && \\\n    echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf && \\\n    echo \"search localdomain\" >> /etc/resolv.conf\n\n# Install dependency package\nRUN apt update -y && apt upgrade -y && \\\n\tapt install --no-install-recommends -y automake \\\n\t\t\tautoconf \\\n\t\t\tlibtool \\\n\t\t\tmake \\\n\t\t\tgdb \\\n\t\t\tstrace \\\n\t\t\tlibcap-dev \\\n\t\t\tlibxslt-dev \\\n\t\t\tgraphviz \\\n\t\t\tdocbook2x \\\n\t\t\tlibselinux-dev \\\n\t\t\tlibseccomp-dev \\\n\t\t\tlibyajl-dev \\\n\t\t\tgit \\\n\t\t\tdnsmasq \\\n\t\t\tlibcgroup-dev \\\n\t\t\trsync \\\n\t\t\tiptables \\\n\t\t\tiproute2 \\\n\t\t\tnet-tools \\\n\t\t\tunzip \\\n\t\t\ttar \\\n\t\t\twget \\\n\t\t\tcppcheck \\\n\t\t\tpython3 \\\n\t\t\tpython3-pip \\\n\t\t\tlibdevmapper-dev \\\n\t\t\txz-utils \\\n\t\t\tlibtar-dev \\\n\t\t\tlibcurl4-openssl-dev \\\n\t\t\tzlib1g-dev \\\n\t\t\topenssl \\\n\t\t\tgcc \\\n\t\t\tg++ \\\n\t\t\tlibsqlite3-dev \\\n\t\t\tlibgpgme-dev \\\n\t\t\texpect \\\n\t\t\tlibsystemd-dev \\\n\t\t\tgolang \\\n\t\t\tbc \\\n\t\t\tvalgrind \\\n\t\t\te2fsprogs \\\n\t\t\tlcov \\\n\t\t\tlibasan6 \\\n\t\t\tlvm2 \\\n\t\t\tlocales \\\n\t\t\tlanguage-pack-en \\\n\t\t\tcurl \\\n\t\t\tcmake \\\n\t\t\tlibhttp-parser-dev \\\n\t\t\tlibprotobuf-dev \\\n\t\t\tlibgrpc-dev \\\n\t\t\tlibgrpc++-dev \\\n\t\t\tprotobuf-compiler-grpc \\\n\t\t\tlibevent-dev \\\n\t\t\tlibwebsockets-dev \\\n\t\t\tlibgmock-dev \\\n\t\t\tlibgtest-dev \\\n\t\t\tlibarchive-dev \\\n\t\t\ttcpdump && rm -rf /var/lib/apt/lists/*;\n\nRUN apt autoremove -y\n\nRUN echo \"export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\" >> /etc/bashrc && \\\n    echo \"export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:$LD_LIBRARY_PATH\" >> /etc/bashrc && \\\n    echo \"/usr/lib\" >> /etc/ld.so.conf && \\\n    echo \"/usr/local/lib\" >> /etc/ld.so.conf\n\n\n# disalbe sslverify\nRUN git config --global http.sslverify false\n\n# install rust\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n\n# configure rust\nRUN echo \"[source.crates-io]\" >> ${HOME}/.cargo/config && \\\n    echo \"[source.local-registry]\" >> ${HOME}/.cargo/config && \\\n    echo \"directory = \\\"vendor\\\"\" >> ${HOME}/.cargo/config\n\n# install libevhtp\nRUN export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH && \\\n        set -x && \\\n        cd ~ && \\\n        git clone https://gitee.com/src-openeuler/libevhtp.git && \\\n        cd libevhtp && \\\n        git checkout -b openEuler-20.03-LTS-tag openEuler-20.03-LTS-tag && \\\n        tar -xzvf libevhtp-1.2.16.tar.gz && \\\n        cd libevhtp-1.2.16 && \\\n        patch -p1 -F1 -s < ../0001-support-dynamic-threads.patch && \\\n        patch -p1 -F1 -s < ../0002-close-openssl.patch && \\\n        rm -rf build && \\\n        mkdir build && \\\n        cd build && \\\n        cmake -D EVHTP_BUILD_SHARED=on -D EVHTP_DISABLE_SSL=on ../ && \\\n        make -j $(nproc) && \\\n        make install && \\\n        ldconfig && rm libevhtp-1.2.16.tar.gz\n\nVOLUME [ \"/sys/fs/cgroup\" ]\nCMD [\"/bin/bash\"]\n"
}