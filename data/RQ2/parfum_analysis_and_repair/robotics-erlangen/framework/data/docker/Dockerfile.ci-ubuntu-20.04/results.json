{
  "startTime": 1674255414432,
  "endTime": 1674255415693,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 1,
        "columnEnd": 67
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 1,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nENV PATH=\"/usr/lib/ccache:/usr/local/gcc-arm-none-eabi-7-2018-q2-update/bin:$PATH\"\nENV CCACHE_DIR=\"/ccache/ubuntu-20.04\"\n\nARG DEBIAN_FRONTEND=noninteractive\n# apt-key will warn to not parse its output if not set\nARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1\n\nRUN set -xe; \\\n\tapt-get update; \\\n\tapt-get install --no-install-recommends -y \\\n\t\tlibprotobuf-dev qtbase5-dev libqt5opengl5-dev libusb-1.0-0-dev libsdl2-dev libqt5svg5-dev \\\n\t\tcmake g++ protobuf-compiler make ccache patch ninja-build \\\n\t\tgit git-lfs \\\n\t\tca-certificates curl gnupg \\\n\t\tluarocks; \\\n\tgit lfs install; \\\n\t# setup nodejs \\\n\tcurl -f --silent https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - 2>/dev/null; \\\n\techo 'deb https://deb.nodesource.com/node_12.x focal main' > /etc/apt/sources.list.d/nodesource.list; \\\n\techo 'deb-src https://deb.nodesource.com/node_12.x focal main' >> /etc/apt/sources.list.d/nodesource.list; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends nodejs; \\\n\t# setup linters \\\n\tnpm install -g tslint@6.1.1 typescript@3.8.3; npm cache clean --force; \\\n\tluarocks install luacheck; \\\n\t# cleanup apt \\\n\tapt-get clean; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t# setup arm gcc \\\n\twget --no-verbose --output-document=gcc-arm.tbz2 https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2; \\\n\techo \" 299ebd3f1c2c90930d28ab82e5d8d6c0 gcc-arm.tbz2\" > arm.md5; \\\n\tmd5sum -c arm.md5; \\\n\ttar -xf gcc-arm.tbz2 -C /usr/local ; \\\n\trm gcc-arm.tbz2 arm.md5 ; \\\n\t# ccache seems to not automatically cover cc/c++ and arm compilers\n\tln -s ../../bin/ccache /usr/lib/ccache/cc; \\\n\tln -s ../../bin/ccache /usr/lib/ccache/c++; \\\n\tln -s ../../bin/ccache /usr/lib/ccache/arm-none-eabi-gcc; \\\n\tln -s ../../bin/ccache /usr/lib/ccache/arm-none-eabi-g++;\n\nENV V8_INCLUDE_DIR=/libs/v8/include\nENV V8_OUTPUT_DIR=/libs/v8/out/x64.release\nCOPY --from=roboticserlangen/v8:version-1-ubuntu-20.04 /v8/v8 /libs/v8\n"
}