{
  "startTime": 1674249143547,
  "endTime": 1674249144313,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Tomb3Main building toolchain.\n#\n# This is a multi-stage Docker image. It is designed to keep the final image\n# size low. Each stage builds an external dependency. The final stage takes the\n# artifacts (binaries, includes etc.) from previous stages and installs all the\n# tools necessary to build Tomb3Main.\n\n# MinGW\nFROM ubuntu:latest as mingw\n\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install --no-install-recommends -y \\\n        gcc-mingw-w64-i686 \\\n        g++-mingw-w64-i686 \\\n        git \\\n        make && rm -rf /var/lib/apt/lists/*;\n\n# Tomb3Main\nFROM mingw\n\n# set the build dir - actual files are mounted with a Docker volume\nRUN mkdir /app\nWORKDIR /app\n\n# system dependencies\n# don't prompt during tzinfo installation\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=Europe/Warsaw\n# configure pkgconfig manually\n# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967969\nENV PKG_CONFIG_LIBDIR=/ext/lib/\nENV PKG_CONFIG_PATH=/ext/lib/pkgconfig/\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install --no-install-recommends -y \\\n        mingw-w64-tools \\\n        pkg-config \\\n        upx \\\n        python3-pip \\\n    && python3 -m pip install \\\n        pyjson5 \\\n        meson \\\n        ninja && rm -rf /var/lib/apt/lists/*;\n\nENTRYPOINT [\"/app/docker/entrypoint.sh\"]\n"
}