{
  "startTime": 1674252260158,
  "endTime": 1674252261565,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 76,
        "columnStart": 7,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 119,
        "lineEnd": 123,
        "columnStart": 7,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 119,
        "lineEnd": 123,
        "columnStart": 7,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedDockerfile": "# Tomb1Main building toolchain.\n#\n# This is a multi-stage Docker image. It is designed to keep the final image\n# size low. Each stage builds an external dependency. The final stage takes the\n# artifacts (binaries, includes etc.) from previous stages and installs all the\n# tools necessary to build Tomb1Main.\n\n# MinGW\nFROM ubuntu:latest as mingw\n\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install --no-install-recommends -y \\\n        gcc-mingw-w64-i686 \\\n        g++-mingw-w64-i686 \\\n        git \\\n        make && rm -rf /var/lib/apt/lists/*;\n\n# zlib\nFROM mingw as zlib\nRUN git clone https://github.com/madler/zlib\nRUN cd zlib \\\n    && make -f win32/Makefile.gcc \\\n        SHARED_MODE=1 \\\n        BINARY_PATH=/ext/bin \\\n        INCLUDE_PATH=/ext/include \\\n        LIBRARY_PATH=/ext/lib \\\n        PREFIX=i686-w64-mingw32- \\\n        -j 4 install\n\n# libav\nFROM mingw as libav\nRUN apt-get install --no-install-recommends -y \\\n    nasm && rm -rf /var/lib/apt/lists/*;\nRUN git clone \\\n    --depth 1 \\\n    --branch \"n4.4.1\" \\\n    https://github.com/FFmpeg/FFmpeg\nCOPY --from=zlib /ext/ /usr/i686-w64-mingw32/\nRUN cd FFmpeg \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --arch=x86 \\\n        --target-os=mingw32 \\\n        --cross-prefix=i686-w64-mingw32- \\\n        --prefix=/ext/ \\\n        --cc=i686-w64-mingw32-gcc \\\n        --strip=i686-w64-mingw32-strip \\\n        --pkg-config=i686-w64-mingw32-pkg-config \\\n        --enable-gpl \\\n        --enable-decoder=pcx \\\n        --enable-decoder=png \\\n        --enable-decoder=gif \\\n        --enable-decoder=mjpeg \\\n        --enable-decoder=mpeg4 \\\n        --enable-decoder=mdec \\\n        --enable-decoder=h264 \\\n        --enable-decoder=h264_qsv \\\n        --enable-decoder=libopenh264 \\\n        --enable-decoder=png \\\n        --enable-demuxer=mov \\\n        --enable-demuxer=avi \\\n        --enable-demuxer=h264 \\\n        --enable-demuxer=str \\\n        --enable-demuxer=image2 \\\n        --enable-zlib \\\n        --enable-static \\\n        --enable-small \\\n        --disable-debug \\\n        --disable-ffplay \\\n        --disable-ffprobe \\\n        --disable-doc \\\n        --disable-network \\\n        --disable-htmlpages \\\n        --disable-manpages \\\n        --disable-podpages \\\n        --disable-txtpages \\\n        --disable-asm \\\n    && make -j 4 \\\n    && make install\n\n# SDL\nFROM mingw as sdl\nRUN git clone https://github.com/libsdl-org/SDL\nRUN apt-get install --no-install-recommends -y automake && rm -rf /var/lib/apt/lists/*;\nRUN cd SDL \\\n    && aclocal -I acinclude \\\n    && autoconf \\\n    && mkdir build \\\n    && cd build \\\n    && ../configure \\\n        --host=i686-w64-mingw32 \\\n        --build=i686-pc-mingw32 \\\n        --prefix=/ext/ \\\n        --enable-shared \\\n        --enable-static \\\n    && make -j 4 \\\n    && make install\n\n# Tomb1Main\nFROM mingw\n\n# set the build dir - actual files are mounted with a Docker volume\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=zlib /ext/ /ext/\nCOPY --from=libav /ext/ /ext/\nCOPY --from=sdl /ext/ /ext/\n\n# system dependencies\n# don't prompt during tzinfo installation\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=Europe/Warsaw\n# configure pkgconfig manually\n# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967969\nENV PKG_CONFIG_LIBDIR=/ext/lib/\nENV PKG_CONFIG_PATH=/ext/lib/pkgconfig/\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install --no-install-recommends -y \\\n        mingw-w64-tools \\\n        pkg-config \\\n        upx \\\n        python3-pip \\\n    && python3 -m pip install \\\n        pyjson5 \\\n        meson \\\n        ninja && rm -rf /var/lib/apt/lists/*;\n\nENTRYPOINT [\"/app/docker/entrypoint.sh\"]\n"
}