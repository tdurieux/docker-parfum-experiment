{
  "startTime": 1674219752792,
  "endTime": 1674219754438,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedDockerfile": "# Use upstream ubuntu images as base\nFROM nvidia/cuda:10.2-cudnn7-devel\nENV DEBIAN_FRONTEND=noninteractive\nENV ROS_DISTRO=melodic\nENV ROS_PYTHON_VERSION=3\n\n# workaround for a bug during installation https://stackoverflow.com/a/25267015\nRUN ln -s -f /bin/true /usr/bin/chfn\n\n# Install system dependencies\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y gnupg2 && rm -rf /var/lib/apt/lists/*;\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4C4EDF893374591687621C75C2F8DBB6A37B2874\nRUN sh -c 'echo \"deb [arch=amd64] http://packages.bit-bots.de bionic main\" > /etc/apt/sources.list.d/ros.list'\nRUN apt-get update\n\n# Install a lot of apt packages. They would also be installed with rosdep, but we want them to be cached\nRUN apt-get install --no-install-recommends -y build-essential git sudo python3-pip python3-rospkg python3-catkin-pkg \\\n    python3-catkin-lint python3-rosdep ros-melodic-ros-base locales wget python3-catkin-tools \\\n    ros-melodic-urdf ros-melodic-tf2 ros-melodic-tf2-sensor-msgs ros-melodic-tf-conversions \\\n    python3-opencv ros-melodic-gazebo-msgs ros-melodic-imu-complementary-filter xvfb ros-melodic-ros-numpy \\\n    ros-melodic-map-msgs ros-melodic-move-base ros-melodic-spatio-temporal-voxel-layer ros-melodic-moveit-core \\\n    ros-melodic-moveit-ros-planning ros-melodic-moveit-ros-planning-interface ros-melodic-robot-state-publisher \\\n    python3-sphinx-rtd-theme ros-melodic-image-transport ros-melodic-eigen-conversions python-hypothesis \\\n    python3-protobuf espeak ros-melodic-xacro ros-melodic-cv-bridge ros-melodic-moveit-ros-robot-interaction \\\n    ros-melodic-control-toolbox libprotobuf-dev protobuf-compiler libprotoc-dev ros-melodic-map-server \\\n    python3-psutil python3-hypothesis && rm -rf /var/lib/apt/lists/*;\n\n# Set up locale\nRUN echo 'en_US.UTF-8 UTF-8' > /etc/locale.gen && locale-gen && update-locale LANG=en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# Add user\nARG UID=150\nRUN useradd -M -d /catkin_ws -s /bin/bash -u $UID robot\n\n# Install sudoers file\nADD sudoers /etc/sudoers\n\nWORKDIR /catkin_ws\nRUN chown robot:robot /catkin_ws\nUSER robot:robot\nENV PATH=$PATH:/catkin_ws/.local/bin\n\nRUN . /opt/ros/melodic/setup.sh && \\\n    mkdir src && \\\n    catkin init && \\\n    catkin config --profile default --extend /opt/ros/melodic -DPYTHON_VERSION=3 -DCMAKE_BUILD_TYPE=Release\n# Add some requirements already here so that they are cached\nRUN python3 -m pip install -U pip && \\\n    pip3 install --no-cache-dir -U PyYAML construct defusedxml filterpy matplotlib numpy opencv-python \\\n    protobuf psutil pytorchyolo rosdep rospkg setuptools sklearn transforms3d\n\n# From here on, we don't want to cache anything. That's achieved by adding the current time.\nADD https://www.timeapi.io/api/Time/current/zone?timeZone=UTC /tmp/build-time\n\nRUN cd src && \\\n    git clone --recursive https://github.com/Bit-Bots/bitbots_meta.git && \\\n    cd bitbots_meta && \\\n    make pull-init && \\\n    sed -i -e /pydot/d -e /silx/d -e /pyopencl/d requirements.txt && \\\n    pip3 install --no-cache-dir -U -r requirements.txt && \\\n    rm -rf ~/.cache\n# Make image size smaller: remove unused packages or unused dependencies\nRUN cd src/bitbots_meta && \\\n    rm -rf bitbots_tools/bitbots_jenkins_library udp_bridge bitbots_tools/containers \\\n    humanoid_league_visualization dynamic_stack_decider/dynamic_stack_decider_visualization bitbots_lowlevel \\\n    wolfgang_pybullet_sim bitbots_navigation/bitbots_visual_compass lib/DynamixelSDK lib/dynamixel-workbench \\\n    lib/dynamixel_workbench_msgs bitbots_misc/bitbots_live_tool_rqt bitbots_motion/bitbots_recordui_rqt && \\\n    sed -i '/plotjuggler/d' bitbots_motion/bitbots_quintic_walk/package.xml && \\\n    sed -i '/run_depend/d' wolfgang_robot/wolfgang_moveit_config/package.xml\nRUN sudo rosdep init && rosdep update\nRUN rosdep install -iry --from-paths src && \\\n    sudo apt-get clean && \\\n    sudo rm -rf /var/lib/apt/lists/*\n\n# Delete some tests (has to happen before catkin build)\nRUN cd src/bitbots_meta && \\\n    rm bitbots_tools/bitbots_test/test/rostests/test_webots_simulator.launch \\\n       bitbots_navigation/bitbots_localization/test/rostests/test_inital_localization_side.launch \\\n       bitbots_motion/bitbots_quintic_walk/test/rostests/test_walk.launch\n\nRUN catkin build\n\n# Execute tests\nRUN . devel/setup.sh && catkin run_tests && catkin_test_results\n\nRUN cd src/bitbots_meta && make vision-files\nRUN cp src/bitbots_meta/wolfgang_robot/wolfgang_robocup_api/scripts/start.sh .local/bin/start\n# Set respawn=\"true\" for all nodes\nRUN bash -c \"find -name '*.launch' | xargs sed -i '/<node/s/ respawn=\\\"\\w\\+\\\"//;/<node/s/ required=\\\"\\w\\+\\\"//;/<node/s/<node/<node respawn=\\\"true\\\"/'\"\n\n# Volume for logs\nVOLUME /robocup-logs\n\n# Setup runtime\nENV DEBIAN_FRONTEND=readline\nCOPY entrypoint.sh /usr/local/bin/entrypoint\nENTRYPOINT [\"/usr/local/bin/entrypoint\"]\nCMD [\"bash\"]\n"
}