{
  "startTime": 1674248710453,
  "endTime": 1674248711786,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2016 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-clang\nMAINTAINER mike.aizatsky@gmail.com\nRUN apt-get install --no-install-recommends -y git \\\n    subversion \\\n    jq \\\n    python3 \\\n    zip \\\n    make \\\n    libunwind8-dev \\\n    binutils-dev \\\n    libblocksruntime-dev \\\n    libc6-dev-i386 && rm -rf /var/lib/apt/lists/*;\n\n# Download and install the latest stable Go.\nADD https://storage.googleapis.com/golang/getgo/installer_linux $SRC/\nRUN chmod +x $SRC/installer_linux\nRUN SHELL=\"bash\" $SRC/installer_linux\nRUN rm $SRC/installer_linux\n\n# Set up Golang environment variables (copied from /root/.bash_profile).\nENV GOPATH /root/go\n\n# /root/.go/bin is for the standard Go binaries (i.e. go, gofmt, etc).\n# $GOPATH/bin is for the binaries from the dependencies installed via \"go get\".\nENV PATH $PATH:/root/.go/bin:$GOPATH/bin\n\n# Dependency of go-fuzz.\nRUN go get golang.org/x/tools/go/packages\n\n# go-fuzz-build is the tool that instruments Go files.\nRUN go get github.com/dvyukov/go-fuzz/go-fuzz-build\n\n# Default build flags for various sanitizers.\nENV SANITIZER_FLAGS_address \"-fsanitize=address -fsanitize-address-use-after-scope\"\n\n# Set of '-fsanitize' flags matches '-fno-sanitize-recover' + 'unsigned-integer-overflow'.\nENV SANITIZER_FLAGS_undefined \"-fsanitize=bool,array-bounds,float-divide-by-zero,function,integer-divide-by-zero,return,shift,signed-integer-overflow,unsigned-integer-overflow,vla-bound,vptr -fno-sanitize-recover=bool,array-bounds,float-divide-by-zero,function,integer-divide-by-zero,return,shift,signed-integer-overflow,vla-bound,vptr\"\n\nENV SANITIZER_FLAGS_memory \"-fsanitize=memory -fsanitize-memory-track-origins\"\n\nENV SANITIZER_FLAGS_dataflow \"-fsanitize=dataflow\"\n\n# Do not use any sanitizers in the coverage build.\nENV SANITIZER_FLAGS_coverage \"\"\n\n# We use unsigned-integer-overflow as an additional coverage signal and have to\n# suppress error messages. See https://github.com/google/oss-fuzz/issues/910.\nENV UBSAN_OPTIONS=\"silence_unsigned_overflow=1\"\n\n# Default build flags for coverage feedback.\nENV COVERAGE_FLAGS=\"-fsanitize=fuzzer-no-link\"\n\n# Use '-Wno-unused-command-line-argument' to suppress \"warning: -ldl: 'linker' input unused\"\n# messages which are treated as errors by some projects.\nENV COVERAGE_FLAGS_coverage \"-fprofile-instr-generate -fcoverage-mapping -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument\"\n\n# Coverage isntrumentation flags for dataflow builds.\nENV COVERAGE_FLAGS_dataflow=\"-fsanitize-coverage=trace-pc-guard,pc-table,func,trace-cmp\"\n\n# Default sanitizer, fuzzing engine and architecture to use.\nENV SANITIZER=\"address\"\nENV FUZZING_ENGINE=\"libfuzzer\"\nENV ARCHITECTURE=\"x86_64\"\n\n# DEPRECATED - NEW CODE SHOULD NOT USE THIS. OLD CODE SHOULD STOP. Please use\n# LIB_FUZZING_ENGINE instead.\n# Path to fuzzing engine library to support some old users of\n# LIB_FUZZING_ENGINE.\nENV LIB_FUZZING_ENGINE_DEPRECATED=\"/usr/lib/libFuzzingEngine.a\"\n\n# Argument passed to compiler to link against fuzzing engine.\n# Defaults to the path, but is \"-fsanitize=fuzzer\" in libFuzzer builds.\nENV LIB_FUZZING_ENGINE=\"/usr/lib/libFuzzingEngine.a\"\n\n# TODO: remove after tpm2 catchup.\nENV FUZZER_LDFLAGS \"\"\n\nWORKDIR $SRC\n\nRUN git clone -b stable https://github.com/google/AFL.git afl\n\nADD https://github.com/google/honggfuzz/archive/oss-fuzz.tar.gz $SRC/\nRUN mkdir honggfuzz && \\\n    cd honggfuzz && \\\n    tar -xzv --strip-components=1 -f $SRC/oss-fuzz.tar.gz && \\\n    rm -rf $SRC/oss-fuzz.tar.gz\n\nCOPY compile compile_afl compile_dataflow compile_libfuzzer compile_honggfuzz \\\n    srcmap write_labels.py /usr/local/bin/\n\nCMD [\"compile\"]\n"
}