{
  "startTime": 1674254202253,
  "endTime": 1674254203064,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ============================ Base ============================\nFROM alpine:3.15 AS base\n\n# Unfortunately Alpine packages are updated in-place, and old versions are discarded so there's no way to use older versions and pin the NodeJS version\nRUN apk add --no-cache --update nodejs-current\nWORKDIR /build\n\nCOPY package.json .\nCOPY yarn.lock .\n\n# ============================ Build ============================\nFROM base AS build\n\nRUN apk add --no-cache yarn\n\n# install node packages\n# RUN npm set progress=false && npm config set depth 0\nRUN yarn install --frozen-lockfile --production=true && yarn cache clean;\n\n# Use node-prune to further reduce unnecessary files: https://github.com/tj/node-prune\nRUN curl -sf https://gobinaries.com/tj/node-prune | sh\n\n# Set aside these production dependencies for use later\nRUN cp -R node_modules prod_node_modules\n\n# Install ALL node_modules, including 'devDependencies'\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\nCOPY . .\n\nRUN yarn build\n\n#\n# ============================ Run ============================\nFROM base AS run\nWORKDIR /run\n\n# copy production node_modules\nCOPY --from=build /build/prod_node_modules ./node_modules\n# copy app sources\nCOPY --from=build /build/build ./build\n\n# Copy local static files inside the Kurtosis module image\nCOPY kurtosis-module/static_files /static-files\n\nCMD node build/main.js\n"
}