{
  "startTime": 1674248518920,
  "endTime": 1674248521064,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 5,
        "columnEnd": 118
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 242,
        "lineEnd": 242,
        "columnStart": 5,
        "columnEnd": 160
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 257,
        "lineEnd": 257,
        "columnStart": 5,
        "columnEnd": 191
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "gemUpdateNoDocument",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 5,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 5,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nARG TARGETARCH=amd64\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n### SYSTEM DEPENDENCIES\n\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n  LC_ALL=\"en_US.UTF-8\" \\\n  LANG=\"en_US.UTF-8\"\n\n# Everything from `make` onwards in apt-get install is only installed to ensure\n# Python support works with all packages (which may require specific libraries\n# at install time).\nRUN apt-get update \\\n  && apt-get upgrade -y \\\n  && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    dirmngr \\\n    git \\\n    bzr \\\n    mercurial \\\n    gnupg2 \\\n    ca-certificates \\\n    curl \\\n    file \\\n    zlib1g-dev \\\n    liblzma-dev \\\n    libyaml-dev \\\n    libgdbm-dev \\\n    bison \\\n    tzdata \\\n    zip \\\n    unzip \\\n    locales \\\n    openssh-client \\\n    software-properties-common \\\n    make \\\n    libpq-dev \\\n    libssl-dev \\\n    libbz2-dev \\\n    libffi-dev \\\n    libreadline-dev \\\n    libsqlite3-dev \\\n    libcurl4-openssl-dev \\\n    llvm \\\n    libncurses5-dev \\\n    libncursesw5-dev \\\n    libmysqlclient-dev \\\n    xz-utils \\\n    tk-dev \\\n    libxml2-dev \\\n    libxmlsec1-dev \\\n    libgeos-dev \\\n    python3-enchant \\\n  && locale-gen en_US.UTF-8 \\\n  && rm -rf /var/lib/apt/lists/*\n\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\nRUN if ! getent group \"$USER_GID\"; then groupadd --gid \"$USER_GID\" dependabot ; \\\n     else GROUP_NAME=$(getent group $USER_GID | awk -F':' '{print $1}'); groupmod -n dependabot \"$GROUP_NAME\" ; fi \\\n  && useradd --uid \"${USER_UID}\" --gid \"${USER_GID}\" -m dependabot \\\n  && mkdir -p /opt && chown dependabot:dependabot /opt\n\n\n### RUBY\n\nARG RUBY_VERSION=2.7.6\nARG RUBY_INSTALL_VERSION=0.8.3\n\nARG RUBYGEMS_SYSTEM_VERSION=3.2.20\n# Disable the outdated rubygems installation from being loaded\nENV DEBIAN_DISABLE_RUBYGEMS_INTEGRATION=true\n\nARG BUNDLER_V1_VERSION=1.17.3\nARG BUNDLER_V2_VERSION=2.3.13\nENV BUNDLE_SILENCE_ROOT_WARNING=1\n# Allow gem installs as the dependabot user\nENV BUNDLE_PATH=\".bundle\" \\\n    BUNDLE_BIN=\".bundle/bin\"\nENV PATH=\"$BUNDLE_BIN:$PATH:$BUNDLE_PATH/bin\"\n\n# Install Ruby, update RubyGems, and install Bundler\nRUN mkdir -p /usr/local/etc \\\n  && { \\\n    echo 'install: --no-document'; \\\n    echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc;\nRUN mkdir -p /tmp/ruby-install \\\n && cd /tmp/ruby-install \\\n && curl -fsSL \"https://github.com/postmodern/ruby-install/archive/v$RUBY_INSTALL_VERSION.tar.gz\" -o ruby-install-$RUBY_INSTALL_VERSION.tar.gz  \\\n && tar -xzvf ruby-install-$RUBY_INSTALL_VERSION.tar.gz \\\n && cd ruby-install-$RUBY_INSTALL_VERSION/ \\\n && make \\\n && ./bin/ruby-install --system ruby $RUBY_VERSION \\\n && gem update --system $RUBYGEMS_SYSTEM_VERSION \\\n && gem install bundler -v $BUNDLER_V1_VERSION --no-document \\\n && gem install bundler -v $BUNDLER_V2_VERSION --no-document \\\n && rm -rf /var/lib/gems/*/cache/* \\\n && rm -rf /tmp/ruby-install && rm -rf /root/.gem;\n\n### PYTHON\n\n# Install Python with pyenv.\nENV PYENV_ROOT=/usr/local/.pyenv \\\n  PATH=\"/usr/local/.pyenv/bin:$PATH\"\nRUN mkdir -p \"$PYENV_ROOT\" && chown dependabot:dependabot \"$PYENV_ROOT\"\nUSER dependabot\nRUN git clone https://github.com/pyenv/pyenv.git --branch v2.3.2 --single-branch --depth=1 /usr/local/.pyenv \\\n  # This is the version of CPython that gets installed\n  && pyenv install 3.10.5 \\\n  && pyenv global 3.10.5 \\\n  && rm -Rf /tmp/python-build*\nUSER root\n\n\n### JAVASCRIPT\n\n# Install Node and npm\nRUN curl -f -sL https://deb.nodesource.com/setup_16.x | bash - \\\n  && apt-get install -y --no-install-recommends nodejs \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && npm install -g npm@v8.5.1 \\\n  && rm -rf ~/.npm && npm cache clean --force;\n\n\n### ELM\n\n# Install Elm\n# This is currently amd64 only, see:\n# - https://github.com/elm/compiler/issues/2007\n# - https://github.com/elm/compiler/issues/2232\nENV PATH=\"$PATH:/node_modules/.bin\"\nRUN [ \"$TARGETARCH\" != \"amd64\" ] \\\n  || (curl -sSLfO \"https://github.com/elm/compiler/releases/download/0.19.0/binaries-for-linux.tar.gz\" \\\n  && tar xzf binaries-for-linux.tar.gz \\\n  && mv elm /usr/local/bin/elm19 \\\n  && rm -f binaries-for-linux.tar.gz)\n\n\n### PHP\n\n# Install PHP and Composer\nENV COMPOSER_ALLOW_SUPERUSER=1\nCOPY --from=composer:1.10.26 /usr/bin/composer /usr/local/bin/composer1\nCOPY --from=composer:2.3.9 /usr/bin/composer /usr/local/bin/composer\nRUN add-apt-repository ppa:ondrej/php \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    php7.4 \\\n    php7.4-apcu \\\n    php7.4-bcmath \\\n    php7.4-cli \\\n    php7.4-common \\\n    php7.4-curl \\\n    php7.4-gd \\\n    php7.4-geoip \\\n    php7.4-gettext \\\n    php7.4-gmp \\\n    php7.4-imagick \\\n    php7.4-imap \\\n    php7.4-intl \\\n    php7.4-json \\\n    php7.4-ldap \\\n    php7.4-mbstring \\\n    php7.4-memcached \\\n    php7.4-mongodb \\\n    php7.4-mysql \\\n    php7.4-redis \\\n    php7.4-soap \\\n    php7.4-sqlite3 \\\n    php7.4-tidy \\\n    php7.4-xml \\\n    php7.4-zip \\\n    php7.4-zmq \\\n    php7.4-mcrypt \\\n  && rm -rf /var/lib/apt/lists/*\nUSER dependabot\n# Perform a fake `composer update` to warm ~/dependabot/.cache/composer/repo\n# with historic data (we don't care about package files here)\nRUN mkdir /tmp/composer-cache \\\n  && cd /tmp/composer-cache \\\n  && echo '{\"require\":{\"psr/log\": \"^1.1.3\"}}' > composer.json \\\n  && composer update --no-scripts --dry-run \\\n  && cd /tmp \\\n  && rm -rf /home/dependabot/.cache/composer/files \\\n  && rm -rf /tmp/composer-cache\nUSER root\n\n\n### GO\n\n# Install Go\nARG GOLANG_VERSION=1.18.1\n# You can find the sha here: https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz.sha256\nARG GOLANG_AMD64_CHECKSUM=b3b815f47ababac13810fc6021eb73d65478e0b2db4b09d348eefad9581a2334\nARG GOLANG_ARM64_CHECKSUM=56a91851c97fb4697077abbca38860f735c32b38993ff79b088dac46e4735633\n\nENV PATH=/opt/go/bin:$PATH\nRUN cd /tmp \\\n  && curl -f --http1.1 -o go-${TARGETARCH}.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-${TARGETARCH}.tar.gz \\\n  && printf \"$GOLANG_AMD64_CHECKSUM go-amd64.tar.gz\\n$GOLANG_ARM64_CHECKSUM go-arm64.tar.gz\\n\" | sha256sum -c --ignore-missing - \\\n  && tar -xzf go-${TARGETARCH}.tar.gz -C /opt \\\n  && rm go-${TARGETARCH}.tar.gz\n\n\n### ELIXIR\n\n# Install Erlang, Elixir and Hex\nENV PATH=\"$PATH:/usr/local/elixir/bin\"\n# https://github.com/elixir-lang/elixir/releases\nARG ELIXIR_VERSION=v1.12.3\nARG ELIXIR_CHECKSUM=db092caa32b55195eeb24a17e0ab98bb2fea38d2f638bc42fee45a6dfcd3ba0782618d27e281c545651f93914481866b9d34b6d284c7f763d197e87847fdaef4\nARG ERLANG_VERSION=1:24.2.1-1\nRUN curl -sSLfO https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb \\\n  && dpkg -i erlang-solutions_2.0_all.deb \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends esl-erlang=${ERLANG_VERSION} \\\n  && curl -sSLfO https://github.com/elixir-lang/elixir/releases/download/${ELIXIR_VERSION}/Precompiled.zip \\\n  && echo \"$ELIXIR_CHECKSUM  Precompiled.zip\" | sha512sum -c - \\\n  && unzip -d /usr/local/elixir -x Precompiled.zip \\\n  && rm -f Precompiled.zip erlang-solutions_2.0_all.deb \\\n  && mix local.hex --force \\\n  && rm -rf /var/lib/apt/lists/*\n\n\n### RUST\n\n# Install Rust\nENV RUSTUP_HOME=/opt/rust \\\n  CARGO_HOME=/opt/rust \\\n  PATH=\"${PATH}:/opt/rust/bin\"\nRUN mkdir -p \"$RUSTUP_HOME\" && chown dependabot:dependabot \"$RUSTUP_HOME\"\nUSER dependabot\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.61.0 --profile minimal\n\n\n### Terraform\n\nUSER root\nARG TERRAFORM_VERSION=1.2.3\nARG TERRAFORM_AMD64_CHECKSUM=728b6fbcb288ad1b7b6590585410a98d3b7e05efe4601ef776c37e15e9a83a96\nARG TERRAFORM_ARM64_CHECKSUM=a48991e938a25bfe5d257f4b6cbbdc73d920cc34bbc8f0e685e28b9610ad75fe\nRUN cd /tmp \\\n  && curl -f -o terraform-${TARGETARCH}.tar.gz https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_${TARGETARCH}.zip \\\n  && printf \"$TERRAFORM_AMD64_CHECKSUM terraform-amd64.tar.gz\\n$TERRAFORM_ARM64_CHECKSUM terraform-arm64.tar.gz\\n\" | sha256sum -c --ignore-missing - \\\n  && unzip -d /usr/local/bin terraform-${TARGETARCH}.tar.gz \\\n  && rm terraform-${TARGETARCH}.tar.gz\n\n### DART\n\n# Install Dart\nENV PUB_CACHE=/opt/dart/pub-cache \\\n  PUB_ENVIRONMENT=\"dependabot\" \\\n  PATH=\"${PATH}:/opt/dart/dart-sdk/bin\"\n\nARG DART_VERSION=2.17.0\nRUN DART_ARCH=${TARGETARCH} \\\n  && if [ \"$TARGETARCH\" = \"amd64\" ]; then DART_ARCH=x64; fi \\\n  && curl -f --connect-timeout 15 --retry 5 \"https://storage.googleapis.com/dart-archive/channels/stable/release/${DART_VERSION}/sdk/dartsdk-linux-${DART_ARCH}-release.zip\" > \"/tmp/dart-sdk.zip\" \\\n  && mkdir -p \"$PUB_CACHE\" \\\n  && chown dependabot:dependabot \"$PUB_CACHE\" \\\n  && unzip \"/tmp/dart-sdk.zip\" -d \"/opt/dart\" > /dev/null \\\n  && chmod -R o+rx \"/opt/dart/dart-sdk\" \\\n  && rm \"/tmp/dart-sdk.zip\" \\\n  && dart --version\n\nCOPY --chown=dependabot:dependabot LICENSE /home/dependabot\nCOPY --chown=dependabot:dependabot composer/helpers /opt/composer/helpers\nCOPY --chown=dependabot:dependabot bundler/helpers /opt/bundler/helpers\nCOPY --chown=dependabot:dependabot go_modules/helpers /opt/go_modules/helpers\nCOPY --chown=dependabot:dependabot hex/helpers /opt/hex/helpers\nCOPY --chown=dependabot:dependabot pub/helpers /opt/pub/helpers\nCOPY --chown=dependabot:dependabot npm_and_yarn/helpers /opt/npm_and_yarn/helpers\nCOPY --chown=dependabot:dependabot python/helpers /opt/python/helpers\nCOPY --chown=dependabot:dependabot terraform/helpers /opt/terraform/helpers\n\nENV DEPENDABOT_NATIVE_HELPERS_PATH=\"/opt\" \\\n  PATH=\"$PATH:/opt/terraform/bin:/opt/python/bin:/opt/go_modules/bin\" \\\n  MIX_HOME=\"/opt/hex/mix\"\n\nUSER dependabot\nRUN bash /opt/bundler/helpers/v1/build\nRUN bash /opt/bundler/helpers/v2/build\nRUN bash /opt/composer/helpers/v1/build\nRUN bash /opt/composer/helpers/v2/build\nRUN bash /opt/go_modules/helpers/build\nRUN bash /opt/hex/helpers/build\nRUN bash /opt/npm_and_yarn/helpers/build\nRUN bash /opt/pub/helpers/build\nRUN bash /opt/python/helpers/build\nRUN bash /opt/terraform/helpers/build\n\nENV HOME=\"/home/dependabot\"\n\nWORKDIR ${HOME}\n"
}