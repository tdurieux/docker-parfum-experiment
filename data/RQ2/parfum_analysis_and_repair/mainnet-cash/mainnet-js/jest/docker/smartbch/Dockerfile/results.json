{
  "startTime": 1674252644097,
  "endTime": 1674252645098,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 19,
        "columnStart": 2,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 as builder\n\nMAINTAINER Josh Ellithorpe <quest@mac.com>\nMAINTAINER mainnet_pat\n\nARG TARGETPLATFORM\nARG GO_VERSION=1.16.6\nARG CGO_PATCH_VERSION=0.1.1\nARG SNAPPY_VERSION=1.1.8\nARG ROCKSDB_VERSION=5.18.4\nARG CONFIG_TAG=0.0.3\nARG GIT_TAG=main\n\n# Update file limit\nRUN sed -i -e '$a* soft nofile 65536\\n* hard nofile 65536' /etc/security/limits.conf\n\n# Install apt based dependencies\nRUN apt-get -y update && apt-get -y upgrade && \\\n  DEBIAN_FRONTEND=\"noninteractive\" apt-get --no-install-recommends -y install cmake gcc-8 g++-8 gcc g++ git \\\n  libgflags-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev make vim wget && \\\n  apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Setup build directory\nWORKDIR /build\n\n# Install Go\nRUN export GOPLATFORM=$(echo ${TARGETPLATFORM} | tr \"/\" \"-\") && echo ${GOPLATFORM} && \\\n  wget -q https://dl.google.com/go/go${GO_VERSION}.${GOPLATFORM}.tar.gz && \\\n  tar zxf go${GO_VERSION}.${GOPLATFORM}.tar.gz && \\\n  rm -rf go${GO_VERSION}.${GOPLATFORM}.tar.gz && \\\n  mv go /usr/local && \\\n  mkdir -p /go/bin\n\nENV GOROOT=/usr/local/go \\\n  GOPATH=/go\nENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH\n\n# Patch Go for larger cgo stack size\nRUN wget -q https://github.com/smartbch/patch-cgo-for-golang/archive/refs/tags/v${CGO_PATCH_VERSION}.tar.gz && \\\n  tar zxf v${CGO_PATCH_VERSION}.tar.gz && \\\n  rm v${CGO_PATCH_VERSION}.tar.gz && \\\n  cd patch-cgo-for-golang-${CGO_PATCH_VERSION} && cp *.c $GOROOT/src/runtime/cgo/ && \\\n  cd /build && rm -rf patch-cgo-for-golang-${CGO_PATCH_VERSION}\n\n# Build libsnappy\nRUN wget -q https://github.com/google/snappy/archive/refs/tags/${SNAPPY_VERSION}.tar.gz && \\\n  tar zxf ${SNAPPY_VERSION}.tar.gz && \\\n  rm ${SNAPPY_VERSION}.tar.gz && \\\n  cd snappy-${SNAPPY_VERSION} && mkdir build && cd build && cmake -DBUILD_SHARED_LIBS=On ../ && make -j`nproc` && make install && \\\n  cd /build && rm -rf snappy-${SNAPPY_VERSION}\n\n\n# Build rocksdb\nRUN wget -q https://github.com/facebook/rocksdb/archive/refs/tags/v${ROCKSDB_VERSION}.tar.gz && \\\n  tar zxf v${ROCKSDB_VERSION}.tar.gz && \\\n  rm v${ROCKSDB_VERSION}.tar.gz && \\\n  cd rocksdb-${ROCKSDB_VERSION} && make CC=gcc-8 CXX=g++-8 install-shared -j`nproc` && \\\n  strip --strip-debug /usr/local/lib/librocksdb.so.${ROCKSDB_VERSION} && \\\n  cd /build && rm -rf rocksdb-${ROCKSDB_VERSION}\n\nENV ROCKSDB_PATH=\"/usr/local\" \\\n CGO_CFLAGS=\"-I/$ROCKSDB_PATH/include\" \\\n CGO_LDFLAGS=\"-L/$ROCKSDB_PATH -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy -llz4 -lzstd\" \\\n LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n\n# Create smartbch directory\nWORKDIR /smart_bch\n\n# Build libevmwrap.so\nRUN git clone -b ${GIT_TAG} --depth 1 https://github.com/smartbch/moeingevm && \\\n  cd moeingevm/evmwrap && make -j`nproc`\n\nENV EVMWRAP=/smart_bch/moeingevm/evmwrap/host_bridge/libevmwrap.so\n\n# Build and setup smartbchd\nRUN git clone -b ${GIT_TAG} --depth 1 https://github.com/smartbch/smartbch && \\\n  cd smartbch && go build -tags cppbtree github.com/smartbch/smartbch/cmd/smartbchd && \\\n  cp /smart_bch/smartbch/smartbchd /build/smartbchd && \\\n  rm -rf /smart_bch/smartbch\n\nWORKDIR /root\nRUN /build/smartbchd init mynode --chain-id 0x2710 && \\\n  wget -q https://github.com/smartbch/artifacts/releases/download/v${CONFIG_TAG}/dot.smartbchd.tgz && \\\n  tar zxf dot.smartbchd.tgz && \\\n  rm dot.smartbchd.tgz && \\\n  cp -rf dot.smartbchd/* .smartbchd/\n\nENV PATH=/build:$PATH\n\n# Go back to main workdir.\nWORKDIR /build\n\nVOLUME [\"/root/.smartbchd\"]\n\nENTRYPOINT [\"smartbchd\"]\nEXPOSE 8545 8546\n\n\n# produce clean image\nFROM ubuntu:20.04\n\nRUN --mount=type=bind,src=/,dst=/builder,from=builder \\\n  cd /builder && \\\n  cp -rn --parents lib/*/libgflags.* / && \\\n  cp -rn --parents usr/local/lib / && \\\n  cp -rn --parents root / && \\\n  cp -rn --parents build / && \\\n  cp -rn --parents smart_bch/moeingevm/evmwrap/host_bridge/libevmwrap.so /\n\nWORKDIR /root\n\nCOPY init_regtest.sh /build/init_regtest.sh\n\nENV PATH=/build:$PATH\\\n    LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH \\\n    EVMWRAP=/smart_bch/moeingevm/evmwrap/host_bridge/libevmwrap.so\n\nVOLUME [\"/root/.smartbchd\"]\n\nENTRYPOINT [\"smartbchd\"]\nEXPOSE 8545 8546\n"
}