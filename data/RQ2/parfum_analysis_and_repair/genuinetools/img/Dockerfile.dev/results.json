{
  "startTime": 1674251110744,
  "endTime": 1674251111595,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 1,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic AS base\n\n# gcc for cgo\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc6-dev \\\n\t\tmake \\\n\t\twget \\\n\t\tpkg-config \\\n\t\tgit \\\n\t\tcurl \\\n\t\tca-certificates \\\n\t\tlibseccomp-dev \\\n\t\tuidmap \\\n\t\tparallel \\\n\t\tpigz \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GOLANG_VERSION 1.13.10\n\nRUN set -eux; \\\n\n# this \"case\" statement is generated via \"update.sh\"\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"${dpkgArch##*-}\" in \\\n\t\tamd64) goRelArch='linux-amd64'; goRelSha256='8a4cbc9f2b95d114c38f6cbe94a45372d48c604b707db2057c787398dfbf8e7f' ;; \\\n\t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='3c581f11ed49eaf0954f62ffebc123f8c392fc536f01c5a44cb38185701101fc' ;; \\\n\t\tarm64) goRelArch='linux-arm64'; goRelSha256='f16f19947855b410e48f395ca488bd39223c7b35e8b69c7f15ec00201e20b572' ;; \\\n\t\ti386) goRelArch='linux-386'; goRelSha256='233c9d43fe2fab27ee489efea08b84665aec5855cce95a81dba3846636de5fed' ;; \\\n\t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='6b9505388ecafa3cb04d5f51638276b25f7d80c5f70bd74ed72f8013f5006fd9' ;; \\\n\t\ts390x) goRelArch='linux-s390x'; goRelSha256='41cb67266e809920363ff620e8cabce152ab54bebd6a337e9f903f5c1996ec35' ;; \\\n\t\t*) goRelArch='src'; goRelSha256='eb9ccc8bf59ed068e7eff73e154e4f5ee7eec0a47a610fb864e3332a2fdc8b8c'; \\\n\t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo >&2 ;; \\\n\tesac; \\\n\n\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \\\n\twget -O go.tgz \"$url\"; \\\n\techo \"${goRelSha256}  *go.tgz\" | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tif [ \"$goRelArch\" = 'src' ]; then \\\n\t\techo >&2; \\\n\t\techo >&2 'error: UNIMPLEMENTED'; \\\n\t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \\\n\t\techo >&2; \\\n\t\texit 1; \\\n\tfi; \\\n\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\n\nRUN go get golang.org/x/lint/golint \\\n    && go get honnef.co/go/tools/cmd/staticcheck \\\n    && go get github.com/go-bindata/go-bindata/go-bindata \\\n    && go get github.com/go-delve/delve/cmd/dlv\n\n# We don't use the bionic shadow pkg bacause:\n# 1. To allow running img in a container without CAP_SYS_ADMIN, we need to do either\n#     a) install newuidmap/newgidmap with file capabilities rather than SETUID (requires kernel >= 4.14)\n#     b) install newuidmap/newgidmap >= 20181125 (59c2dabb264ef7b3137f5edb52c0b31d5af0cf76)\n#    We choose b) until kernel >= 4.14 gets widely adopted.\n#    See https://github.com/shadow-maint/shadow/pull/132 https://github.com/shadow-maint/shadow/pull/138 https://github.com/shadow-maint/shadow/pull/141\nFROM base AS idmap\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n      autoconf \\\n      automake \\\n      autopoint \\\n      byacc \\\n      gettext \\\n      libcap-dev \\\n      libtool \\\n      libxslt1-dev \\\n\t  && rm -rf /var/lib/apt/lists/*\nRUN git clone https://github.com/shadow-maint/shadow.git /shadow\nWORKDIR /shadow\nRUN git checkout 59c2dabb264ef7b3137f5edb52c0b31d5af0cf76\nRUN ./autogen.sh --disable-nls --disable-man --without-audit --without-selinux --without-acl --without-attr --without-tcb --without-nscd \\\n  && make \\\n  && cp src/newuidmap src/newgidmap /usr/bin\n\nFROM base\n\nCOPY --from=idmap /usr/bin/newuidmap /usr/bin/newuidmap\nCOPY --from=idmap /usr/bin/newgidmap /usr/bin/newgidmap\nRUN chmod u+s /usr/bin/newuidmap /usr/bin/newgidmap \\\n  && useradd -u 1000 --home-dir /home/user user \\\n  && mkdir -p /run/user/1000 \\\n  && mkdir -p /home/user \\\n  && chown -R user /run/user/1000 /home/user \\\n  && chown -R user /go \\\n  && echo user:100000:65536 | tee /etc/subuid | tee /etc/subgid\n\nUSER user\nENV USER user\nENV HOME /home/user\nENV XDG_RUNTIME_DIR=/run/user/1000\n\nWORKDIR /home/user"
}