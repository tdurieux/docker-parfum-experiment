{
  "startTime": 1674252424123,
  "endTime": 1674252425554,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 72,
        "columnStart": 5,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#TODO: consider using static binaries instead:\n# https://johnvansickle.com/ffmpeg/\n# this comes from Dockerfile.nvidia\nFROM adanalife/ffmpeg:v4.2.3\n\n# install dependencies\n# most of these come from the obs-studio\n# install from source instructions\nRUN export DEBIAN_FRONTEND=noninteractive \\\n  && unset LD_LIBRARY_PATH \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y --no-install-suggests \\\n    ack-grep \\\n    build-essential \\\n    checkinstall \\\n    cmake \\\n    fluxbox \\\n    git \\\n    golang-go \\\n    grc \\\n    htop \\\n    libasound2-dev \\\n    libavcodec-dev \\\n    libavdevice-dev \\\n    libavfilter-dev \\\n    libavformat-dev \\\n    libavutil-dev \\\n    libcurl4-openssl-dev \\\n    libfdk-aac-dev \\\n    libfontconfig-dev \\\n    libgl1-mesa-dev \\\n    libjack-jackd2-dev \\\n    libjansson-dev \\\n    libluajit-5.1-dev \\\n    libmbedtls-dev \\\n    libnss3-dev \\\n    libpulse-dev \\\n    libqt5svg5-dev \\\n    libqt5svg5-dev \\\n    libqt5x11extras5-dev \\\n    libspeexdsp-dev \\\n    libswresample-dev \\\n    libswscale-dev \\\n    libudev-dev \\\n    libv4l-dev \\\n    libvlc-dev \\\n    libx11-dev \\\n    libx11-xcb-dev \\\n    libx264-dev \\\n    libxcb-randr0-dev \\\n    libxcb-shm0-dev \\\n    libxcb-xfixes0-dev \\\n    libxcb-xinerama0-dev \\\n    libxcb1-dev \\\n    libxcomposite-dev \\\n    libxinerama-dev \\\n    net-tools \\\n    pkg-config \\\n    python3-dev \\\n    qtbase5-dev \\\n    scrot \\\n    software-properties-common \\\n    supervisor \\\n    swig \\\n    syslog-ng \\\n    tigervnc-standalone-server \\\n    ubuntu-drivers-common \\\n    vim \\\n    vlc \\\n    vlc-plugin-base \\\n    wget \\\n    xterm \\\n    zlib1g-dev \\\n  && apt-get clean -y \\\n  && rm -rf /var/lib/apt/lists/*\n\n# install golang v1.14\nRUN export DEBIAN_FRONTEND=noninteractive \\\n  && add-apt-repository ppa:longsleep/golang-backports \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n    golang-go \\\n  && apt-get clean -y \\\n  && rm -rf /var/lib/apt/lists/*\n\n# install vdpau driver\n#TODO: is this necessary?\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n    vdpau-va-driver \\\n  && rm -rf /var/lib/apt/lists/*\n\n# for the VNC connection\nEXPOSE 5900\n\n# for the HTTP endpoint\nEXPOSE 8080\n\n# this allows for custom VNC passwords\nENV VNC_PASSWD=123456\n\nWORKDIR /tmp\n\nENV OBS_VERSION=26.1.2\nENV TINI_VERSION v0.19.0\n\n# install obs and the obs-browser plugin\n#TODO: re-enable browser plugin\nRUN git clone --depth 1 --branch $OBS_VERSION https://github.com/obsproject/obs-studio \\\n  && cd obs-studio \\\n  && wget https://cdn-fastly.obsproject.com/downloads/cef_binary_3770_linux64.tar.bz2 \\\n  && tar xjf cef_binary_3770_linux64.tar.bz2 \\\n  && rm cef_binary_3770_linux64.tar.bz2 \\\n  && git clone --depth 1 https://github.com/obsproject/obs-browser ./plugins/obs-browser \\\n  && mkdir -p build \\\n  && cd build \\\n  && cmake -DUNIX_STRUCTURE=1 -DBUILD_BROWSER=OFF -DCEF_ROOT_DIR=\"../cef_binary_3770_linux64\" .. \\\n  && make -j2 \\\n  && make install\n  #TODO: possibly add obs-vst?\n  # && git clone https://github.com/obsproject/obs-vst ./plugins/obs-vst \\\n\n# add Tini (simple init)\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\n# add menu entries for fluxbox\nRUN echo \"?package(bash):needs=\\\"X11\\\" section=\\\"ADanaLife\\\" title=\\\"OBS Screencast\\\" command=\\\"obs\\\"\" >> /usr/share/menu/danalol \\\n  && echo \"?package(bash):needs=\\\"X11\\\" section=\\\"ADanaLife\\\" title=\\\"vlc-server\\\" command=\\\"cd /opt/tripbot && FONTCONFIG_PATH=/etc/fonts bin/vlc-server\\\"\" >> /usr/share/menu/danalol \\\n  && echo \"?package(bash):needs=\\\"X11\\\" section=\\\"ADanaLife\\\" title=\\\"vlc stop\\\" command=\\\"supervisorctl stop vlc\\\"\" >> /usr/share/menu/danalol \\\n  && echo \"?package(bash):needs=\\\"X11\\\" section=\\\"ADanaLife\\\" title=\\\"vlc start\\\" command=\\\"supervisorctl start vlc\\\"\" >> /usr/share/menu/danalol \\\n  && echo \"?package(bash):needs=\\\"X11\\\" section=\\\"ADanaLife\\\" title=\\\"obs stop\\\" command=\\\"supervisorctl stop obs\\\"\" >> /usr/share/menu/danalol \\\n  && echo \"?package(bash):needs=\\\"X11\\\" section=\\\"ADanaLife\\\" title=\\\"obs start\\\" command=\\\"supervisorctl start obs\\\"\" >> /usr/share/menu/danalol \\\n  && echo \"?package(bash):needs=\\\"X11\\\" section=\\\"ADanaLife\\\" title=\\\"Xterm\\\" command=\\\"xterm -ls -bg black -fg white\\\"\" >> /usr/share/menu/danalol \\\n  && update-menus\n\n# add helpful bash tricks\nRUN echo '\"\\e[A\":history-search-backward' >> /root/.inputrc \\\n  && echo '\"\\e[B\":history-search-forward' >> /root/.inputrc\n\n# copy over project\n#TODO: maybe just copy pkg, cmd, internal, etc?\nWORKDIR /go/src/github.com/adanalife/tripbot\nCOPY . .\n\n# create symlink to /opt/tripbot\nRUN ln -s /go/src/github.com/adanalife/tripbot /opt/tripbot \\\n  && mkdir /opt/data\n\n# build the binary\nWORKDIR /opt/tripbot\nRUN go build -o bin/vlc-server cmd/vlc-server/vlc-server.go\n\nENTRYPOINT [\"/tini\", \"--\"]\nCMD [\"/opt/tripbot/script/container_startup.sh\"]\n"
}