{
  "startTime": 1674249411247,
  "endTime": 1674249412476,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 23,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 57,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 23,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# BASIC SETUP\n\n# Official pytorch container\nFROM nvcr.io/nvidia/cuda:11.1-cudnn8-devel-ubuntu18.04\n\nARG USER=docker_solo\nARG UID=1000\nARG GID=1000\n# default password\nARG PW=user\n\n\n# GENERAL SETUP\n\n# Expose default SSH port\nEXPOSE 22\n\n# Install Miniconda3\nENV CONDADIR /opt/miniconda3\nENV CONDAEXE ${CONDADIR}/bin/conda\nRUN apt-get update && apt-get install --no-install-recommends -y wget \\\n    && wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 2>/dev/null \\\n    && bash Miniconda3-latest-Linux-x86_64.sh -b -p ${CONDADIR} \\\n    && useradd -m anaconda --uid=6666 && echo \"anaconda:anaconda\" | chpasswd \\\n    && chown -R anaconda:anaconda ${CONDADIR} \\\n    && chmod -R g+w ${CONDADIR} \\\n    && ${CONDAEXE} clean -a -y \\\n    && rm -f Miniconda3-latest-Linux-x86_64.sh && rm -rf /var/lib/apt/lists/*;\n\n# Adding keys for ROS\nRUN apt-get update && apt-get install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*\nRUN sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu bionic main\" > /etc/apt/sources.list.d/ros-latest.list'\nRUN curl -f -sSL 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | apt-key add -\n\n# Installing ROS\nRUN apt-get update && DEBIAN_FRONTEND=\"noninteractive\" apt-get --no-install-recommends -y install tzdata && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y ros-melodic-desktop-full \\\n    python-rosdep \\\n    python-rosinstall \\\n    python-rosinstall-generator \\\n    python-wstool \\\n    build-essential \\\n    && rm -rf /var/lib/apt/lists/*\nRUN rosdep init && rosdep update\n\n# Install system dependencies for convinient development inside container\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    ros-melodic-desktop-full \\\n    tmux \\\n    openssh-server \\\n    tree \\\n    less \\\n    vim \\\n    curl \\\n    wget \\\n    nano \\\n    build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# COMPONENT SPECIFIC SETUP\n\n# Add user and his password\nRUN useradd -m ${USER} --uid=${UID} \\\n    && echo \"${USER}:${PW}\" | chpasswd \\\n    && usermod -s /bin/bash ${USER}\n\nWORKDIR /home/${USER}\n\n# For ability install deps from container shell during environment setup\nRUN usermod -a -G sudo ${USER} \\\n    && usermod -a -G anaconda ${USER}\n\n# Create some dirs\nRUN mkdir -p catkin_ws/src && chown -R ${UID}:${GID} ./\n\n# Configure conda for ${USER}\nRUN su -c \"${CONDAEXE} init\" ${USER} \\\n    && su -c \"${CONDAEXE} config --set auto_activate_base false\" ${USER}\n\n\n# METHOD SPECIFIC SETUP\n# ADD YOUR COMMANDS START FROM HERE\n\n# All needed for model inference, i.e. weights, configs etc. NOT FOR DATASETS!\nVOLUME [ \"/home/${USER}/model\" ]\n\n# Install additional system dependencies here\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n       libglib2.0-0 \\\n       libsm6 \\\n       libxrender-dev \\\n       libxext6 \\\n       python-pip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install system python dependencies\nRUN python -m pip --no-cache-dir install git+https://github.com/ivbelkin/io_shared.git@rc-0.0.4\nRUN python -m pip --no-cache-dir install \"git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI\"\n\n# Create conda environment\nUSER ${USER}\nRUN ${CONDAEXE} create -n solo python=3.7 -y\nRUN ${CONDAEXE} run -n solo python -m pip --no-cache-dir install torch==1.8.0+cu111 \\\n                                                            torchvision==0.9.0+cu111  \\\n                                                            -f https://download.pytorch.org/whl/torch_stable.html\nCOPY requirements/build.txt requirements.txt\nRUN ${CONDAEXE} run -n solo python -m pip --no-cache-dir install -r requirements.txt\nRUN ${CONDAEXE} run -n solo python -m pip --no-cache-dir install \"git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI\"\nRUN ${CONDAEXE} run -n solo python -m pip --no-cache-dir install git+https://github.com/ivbelkin/io_shared.git@rc-0.0.4\nUSER root\n\n# Finally copy the code and install. Do it always at the end of Dockerfile\nCOPY --chown=${USER}:${USER} . /home/${USER}/catkin_ws/src/solov2\n#RUN ${CONDAEXE} run -n solo python -m pip install --no-cache-dir -e /home/docker_solo/catkin_ws/src/solov2\n# RUN python -m pip install scipy\n\nRUN ${CONDAEXE} run -n solo python -m pip uninstall -y pycocotools\nRUN ${CONDAEXE} run -n solo python -m pip install pycocotools==2.0.1\n\nRUN ${CONDAEXE} run -n solo python -m pip install --no-cache-dir -e /home/docker_solo/catkin_ws/src/solov2\n\n#WORKDIR /home/${USER}/catkin_ws\n\n#RUN git clone https://gitlab.com/sdbcs-nio3/itl_mipt/ros_common/camera_objects_msgs.git src/camera_objects_msgs\n#RUN git clone https://gitlab.com/sdbcs-nio3/itl_mipt/ros_common/camera_objects_visualizer.git src/camera_objects_visualizer\n\n#RUN source /opt/ros/melodic/setup.bash\n#RUN catkin_make\n#RUN source devel/setup.bash\n"
}