{
  "startTime": 1674249947846,
  "endTime": 1674249949487,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 94,
        "columnStart": 6,
        "columnEnd": 77
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2022 Intel Corporation\n# All rights reserved.\n#\n# 'recipe' for Docker to build an image of EL 9 based\n# environment for building the DAOS project.\n#\n\n# Pull base image\nARG BASE_DISTRO=almalinux:9\nFROM $BASE_DISTRO\nLABEL maintainer=\"daos@daos.groups.io\"\n\n# Intermittent cache-bust.  Used to reduce load on the actual CACHEBUST later.\nARG CB0\n\n# Use local repo server if present\nARG REPO_FILE_URL\nRUN set -e;                                                      \\\n    if [ -n \"$REPO_FILE_URL\" ]; then                             \\\n        cd /etc/yum.repos.d/ &&                                  \\\n        curl -k -f -o daos_ci-el9-artifactory.repo.tmp           \\\n             \"$REPO_FILE_URL\"daos_ci-el9-artifactory.repo &&     \\\n        for file in *.repo; do                                   \\\n            true > $file;                                        \\\n        done;                                                    \\\n        mv daos_ci-el9-artifactory.repo{.tmp,};                  \\\n    fi;                                                          \\\n    dnf --assumeyes --disablerepo \\*epel\\* install dnf-plugins-core;     \\\n    dnf config-manager --save --setopt=assumeyes=True;           \\\n    dnf config-manager --save --setopt=install_weak_deps=False;  \\\n    dnf --disablerepo \\*epel\\* install epel-release;             \\\n    dnf install epel-release;                                    \\\n    if [ -n \"$REPO_FILE_URL\" ]; then                             \\\n        PT_REPO=daos_ci-rocky8-crb-artifactory;                  \\\n    else                                                         \\\n        PT_REPO=crb;                                             \\\n    fi;                                                          \\\n    dnf -y config-manager --enable $PT_REPO;                     \\\n    dnf -y clean all\n\nARG JENKINS_URL\nARG REPOS\nRUN for repo in $REPOS; do                                                \\\n        branch=\"master\";                                                  \\\n        build_number=\"lastSuccessfulBuild\";                               \\\n        if [[ $repo = *@* ]]; then                                        \\\n            branch=\"${repo#*@}\";                                          \\\n            repo=\"${repo%@*}\";                                            \\\n            if [[ $branch = *:* ]]; then                                  \\\n                build_number=\"${branch#*:}\";                              \\\n                branch=\"${branch%:*}\";                                    \\\n            fi;                                                           \\\n        fi;                                                               \\\n        echo -e \"[$repo:$branch:$build_number]\\n\\\nname=$repo:$branch:$build_number\\n\\\nbaseurl=${JENKINS_URL}job/daos-stack/job/$repo/job/$branch/$build_number/artifact/artifacts/el9/\\n\\\nenabled=1\\n\\\ngpgcheck=False\\n\" >> /etc/yum.repos.d/$repo:$branch:$build_number.repo;   \\\n        cat /etc/yum.repos.d/$repo:$branch:$build_number.repo; \\\n    done\n\n# Install OS updates and package.  Include basic tools and daos dependencies\nCOPY ./utils/scripts/install-el9.sh /tmp/install.sh\nRUN chmod +x /tmp/install.sh && dnf upgrade && /tmp/install.sh && dnf clean all && \\\n    rm -f /tmp/install.sh\n\nARG UID=1000\n\n# Add DAOS users\nRUN useradd --no-log-init --uid $UID --user-group --create-home --shell /bin/bash \\\n            --home /home/daos daos_server\nRUN echo \"daos_server:daos_server\" | chpasswd\nRUN useradd --no-log-init --user-group --create-home --shell /bin/bash daos_agent\nRUN echo \"daos_agent:daos_agent\" | chpasswd\nRUN echo \"daos_server ALL=(root) NOPASSWD: ALL\" >> /etc/sudoers.d/daos_sudo_setup\n\n# Create directory for DAOS backend storage\nRUN mkdir -p /opt/daos /mnt/daos /var/run/daos_server /var/run/daos_agent /home/daos/pre /home/daos/daos &&   \\\n    chown -R daos_server.daos_server /opt/daos /mnt/daos /var/run/daos_server /home/daos &&  \\\n    chown daos_agent.daos_agent /var/run/daos_agent\n\nARG QUICKBUILD=false\nARG QUICKBUILD_DEPS\n\nRUN if $QUICKBUILD; then                                          \\\n        echo \"Installing: $QUICKBUILD_DEPS\";                      \\\n        echo \"$QUICKBUILD_DEPS\" | sed -e '/^$/d' | tr '\\n' '\\0' | \\\n          xargs -0 dnf install;                                   \\\n        dnf clean all;                                            \\\n    fi\n\nARG BULLSEYE\nRUN if [ \"x$BULLSEYE\" != \"x\" ]; then \\\n      curl -f ${JENKINS_URL}job/daos-stack/job/tools/job/master/lastSuccessfulBuild/artifact/bullseyecoverage-linux.tar \\\n        --retry 10 --retry-max-time 60 --silent --show-error -o bullseye.tar; \\\n      mkdir -p bullseye; \\\n      tar -C bullseye --strip-components=1 -xf bullseye.tar; \\\n      pushd bullseye; \\\n        ./install --quiet --key \"${BULLSEYE}\" --prefix /opt/BullseyeCoverage; \\\n      popd; \\\n      rm -f bullseye.tar; \\\n      rm -rf bullseye; \\\n    fi\n\nUSER daos_server:daos_server\n\n# Setup a python venv so that python packages can be installed locally.\nRUN python3 -m venv /home/daos/venv\nENV PATH=/home/daos/venv/bin:$PATH\nENV VIRTUAL_ENV=/home/daos/venv/\n\n# Install latest versions of python tools.\n# wheel is needed first to avoid a warning when installing pyyaml.\nCOPY requirements.txt .\nRUN python3 -m pip --no-cache-dir install --upgrade pip && \\\n    python3 -m pip --no-cache-dir install wheel && \\\n    python3 -m pip --no-cache-dir install --requirement requirements.txt\n\nWORKDIR /home/daos/pre\nCOPY --chown=daos_server:daos_server SConstruct .\nCOPY --chown=daos_server:daos_server site_scons site_scons\nCOPY --chown=daos_server:daos_server utils/build.config utils/\n\n# Control what to build.  By default Dockerfiles build everything to allow for\n# ease-of-use for users, however in CI everything is turned off and then\n# selectively enabled.  Turning off any step disables all future steps.\nARG DAOS_DEPS_BUILD=yes\nARG DAOS_KEEP_BUILD=no\nARG DAOS_TARGET_TYPE=release\n\n# Now do an update to ensure software is up to date for the deps build.  If the\n# src hasn't changed then this won't do anything, but if it has then we want to\n# ensure that latest dependencies are used.\nUSER root:root\nRUN [ \"$DAOS_DEPS_BUILD\" != \"yes\" ] || {                                       \\\n        dnf upgrade --exclude=spdk,spdk-devel,dpdk-devel,dpdk,mercury-devel,mercury && \\\n        dnf clean all;                                                         \\\n    }\nUSER daos_server:daos_server\n\nARG DEPS_JOBS=1\n\nRUN [ \"$DAOS_DEPS_BUILD\" != \"yes\" ] || {                            \\\n        scons --build-deps=only --jobs $DEPS_JOBS PREFIX=/opt/daos  \\\n              TARGET_TYPE=$DAOS_TARGET_TYPE &&                      \\\n        ([ \"$DAOS_KEEP_BUILD\" != \"no\" ] || /bin/rm -rf build *.gz); \\\n    }\nUSER root:root\n\n# force an upgrade to get any newly built RPMs, but only if CACHEBUST is set.\nARG CACHEBUST\nRUN [ -z \"$CACHEBUST\" ] || {                                                           \\\n        dnf upgrade --exclude=spdk,spdk-devel,dpdk-devel,dpdk,mercury-devel,mercury && \\\n        dnf clean all;                                                                 \\\n    }\nUSER daos_server:daos_server\n\n# Set a label.  This is useful for searching for DAOS images, but is also used\n# in github-actions to prune elements of the dockerfile below this point.\nLABEL DAOS=true\n\nWORKDIR /home/daos/daos/\nCOPY --chown=daos_server:daos_server VERSION LICENSE ftest.sh SConstruct .clang-format ./\nCOPY --chown=daos_server:daos_server site_scons site_scons\nCOPY --chown=daos_server:daos_server utils utils\nCOPY --chown=daos_server:daos_server src src\n\n# select compiler to use\nARG COMPILER=gcc\nARG JOBS=$DEPS_JOBS\nARG DAOS_BUILD_TYPE=$DAOS_TARGET_TYPE\nARG DAOS_BUILD=$DAOS_DEPS_BUILD\n\n# Build DAOS\n# Build client only for now since some deps couldn't be satisfied yet see\n# install-el9.sh\nRUN [ \"$DAOS_BUILD\" != \"yes\" ] || {                                        \\\n        scons --jobs $JOBS install PREFIX=/opt/daos COMPILER=$COMPILER     \\\n              BUILD_TYPE=$DAOS_BUILD_TYPE TARGET_TYPE=$DAOS_TARGET_TYPE client && \\\n        ([ \"$DAOS_KEEP_BUILD\" != \"no\" ] || /bin/rm -rf build) &&           \\\n        go clean -cache &&                                                 \\\n        cp -r utils/config/examples /opt/daos;                             \\\n    }\n\n# Set environment variables\nENV PATH=/opt/daos/bin:$PATH\nENV FI_SOCKETS_MAX_CONN_RETRY=1\n\n# Build java and hadoop bindings\nWORKDIR /home/daos/daos/src/client/java\n\nARG DAOS_JAVA_BUILD=$DAOS_BUILD\n\n# Disable Java build for now since it fails\n#RUN [ \"$DAOS_JAVA_BUILD\" != \"yes\" ] || {                                                      \\\n#        mkdir /home/daos/.m2 &&                                                               \\\n#        cp /home/daos/daos/utils/scripts/maven-settings.xml.in /home/daos/.m2/settings.xml && \\\n#        mvn clean install -T 1C                                                               \\\n#            -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn                                                   \\\n#            -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos;                               \\\n#    }\nWORKDIR /home/daos\n\nARG DAOS_KEEP_SRC=no\n# Remove local copy\nRUN [ \"$DAOS_KEEP_SRC\" != \"no\" ] || rm -rf /home/daos/daos /home/daos/pre\n"
}