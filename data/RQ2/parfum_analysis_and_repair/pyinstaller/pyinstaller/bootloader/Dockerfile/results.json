{
  "startTime": 1674251872143,
  "endTime": 1674251872789,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# A dockcross image with a cross compiled version of zlib installed.\n#\n# This dockerfile can be used to (cross)compile PyInstaller's Linux bootloaders for any architecture supported by\n# dockcross.\n#\n# Usage:\n# ------\n#\n# Building the bootloaders is two-part. First you need to build the docker image (or \"build the builder\") before you can\n# compile any bootloaders. YOU MUST BE CD-ed IN THE ROOT OF THIS REPOSITORY DURING BOTH STAGES.\n#\n# Build the image:\n#\n#   Build the default of x86_64 architecture:\n#\n#       docker build -t bob-the-build-image ./bootloader\n#\n#   (Note that bob-the-build-image is just an arbitrary name.)\n#\n#   Specify an different architecture by using an alternative base image from https://hub.docker.com/u/dockcross or\n#   https://quay.io/organization/pypa/ with --build-arg BASE=[image]. e.g. To build for aarch64 (a.k.a armv8l) use the\n#   aarch64 manylinux base:\n#\n#      docker build --build-arg BASE=dockcross/manylinux2014_aarch64 -t bob-the-build-image ./bootloader\n#\n# Build the bootloaders:\n#\n#   Simply run:\n#\n#     docker run -v \"$PWD:/io\" -t bob-the-build-image\n#\n#   The bootloaders should appear in the PyInstaller/bootloader/[platform] directory.\n#\n\nARG BASE=dockcross/manylinux2014-x64\nFROM ${BASE}\n\nARG ZLIB_VERSION=1.2.12\n\n# Download and unpack zlib.\nWORKDIR /home/\nRUN curl -f -s https://zlib.net/fossils/zlib-${ZLIB_VERSION}.tar.gz | tar xfz -\n\n# Patch zlib 1.2.12 to fix gcc misidentification when CC is set.\n# See: https://github.com/madler/zlib/issues/646\nRUN curl -f -s https://github.com/madler/zlib/commit/05796d3d8d5546cf1b4dfe2cd72ab746afae505d.patch -o gcc-fix.patch\nRUN patch -p 1 -i gcc-fix.patch zlib-${ZLIB_VERSION}/configure\n\nENV CC=${CC:-gcc}\n\nWORKDIR zlib-$ZLIB_VERSION\n# Install zlib-devel but in the sysroot of the cross compiler.\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"$($CC -print-sysroot)\"\nRUN make\nRUN make install\n\n# Set the default Python to 3.9.\nENV PATH=/opt/python/cp39-cp39/bin:$PATH\n\nWORKDIR /io\n\n# Set building the bootloader as the default run command.\nCMD cd bootloader && python3 ./waf all\n"
}