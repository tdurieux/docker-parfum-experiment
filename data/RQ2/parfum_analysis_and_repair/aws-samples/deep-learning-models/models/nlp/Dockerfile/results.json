{
  "startTime": 1674251623508,
  "endTime": 1674251625493,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 45,
        "columnStart": 22,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:11.0-devel-ubuntu18.04\n# TF 2.4 works with CUDA 11.0, not 11.1 - https://github.com/tensorflow/tensorflow/issues/45848\n\n# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV HOROVOD_VERSION=0.21.1\nENV TENSORFLOW_PIP=tensorflow\nENV TENSORFLOW_VERSION=2.4.0\nENV TENSORFLOW_ADDONS_VERSION=0.12.0\nENV PYTORCH_VERSION=1.7.1\nENV TORCHVISION_VERSION=0.8.2\n# cuDNN version listed here: https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#package-manager-ubuntu-install\nENV CUDNN_VERSION=8.0.5.39-1+cuda11.0\nENV NCCL_VERSION=2.8.3-1+cuda11.0\n\nARG python=3.7\nENV PYTHON_VERSION=${python}\n\n# LD_LIBRARY_PATH is set incorrectly for legacy compatibility; see https://gitlab.com/nvidia/container-images/cuda/-/issues/47\nENV LD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\n\n# Solution to \"Couldn't open CUDA library libcuda.so\" at https://github.com/tensorflow/tensorflow/issues/4078\n\n\n# Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n\nRUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        g++-4.8 \\\n        git \\\n        curl \\\n        vim \\\n        wget \\\n        ca-certificates \\\n        libcudnn8=${CUDNN_VERSION} \\\n        libnccl2=${NCCL_VERSION} \\\n        libnccl-dev=${NCCL_VERSION} \\\n        libjpeg-dev \\\n        libpng-dev \\\n        python${PYTHON_VERSION} \\\n        python${PYTHON_VERSION}-dev \\\n        python${PYTHON_VERSION}-distutils \\\n        librdmacm1 \\\n        libibverbs1 \\\n        ibverbs-providers && rm -rf /var/lib/apt/lists/*;\n\n# Install Python\nRUN ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n# Install TensorFlow, Keras, PyTorch and MXNet\nRUN pip install --no-cache-dir future typing\nRUN pip install --no-cache-dir numpy \\\n        keras \\\n        h5py\n\nRUN pip install --no-cache-dir ${TENSORFLOW_PIP}==${TENSORFLOW_VERSION}\nRUN pip install --no-cache-dir torch==${PYTORCH_VERSION} torchvision==${TORCHVISION_VERSION}\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \\\n    tar zxf openmpi-4.0.0.tar.gz && \\\n    cd openmpi-4.0.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-4.0.0.tar.gz\n\n# Install Horovod, no CUDA stubs needed because we set LD_LIBRARY_PATH\nRUN HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_GPU_BROADCAST=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 \\\n    pip install --no-cache-dir horovod==${HOROVOD_VERSION}\n\n# Install OpenSSH for MPI to communicate between containers\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && \\\n    mkdir -p /var/run/sshd && rm -rf /var/lib/apt/lists/*;\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Download examples\nRUN apt-get install -y --no-install-recommends subversion && \\\n    svn checkout https://github.com/horovod/horovod/trunk/examples && \\\n    rm -rf /examples/.svn && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR \"/examples\"\n\n###### Modifications to horovod Dockerfile below\n# tensorflow_addons is tightly coupled to TF version. TF 2.1 = 0.9.1, TF 2.2 = 0.10.0\nRUN pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir \\\n        scikit-learn==0.23.1 \\\n        wandb==0.9.1 \\\n        tensorboard_plugin_profile \\\n        tensorflow-addons==${TENSORFLOW_ADDONS_VERSION} \\\n        colorama==0.4.3 \\\n        pandas \\\n        apache_beam\n\nENV HDF5_USE_FILE_LOCKING \"FALSE\"\n\nWORKDIR /fsx\nCMD [\"/bin/bash\"]\n\n###### Modifications specifically for SageMaker are below\n# Install SSH on SageMaker machines\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && rm -rf /var/lib/apt/lists/*;\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nRUN mkdir -p /root/.ssh/ && \\\n    mkdir -p /var/run/sshd && \\\n    ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \\\n    cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys && \\\n    printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nRUN pip install --no-cache-dir \\\n    mpi4py==3.0.3 \\\n    sagemaker-training==3.7.2\n\n RUN pip install --no-cache-dir \\\n    transformers==4.2.0 \\\n    datasets==1.2.1 \\\n    tokenizers==0.9.4 \\\n    sentencepiece==0.1.95\n\n###### Modifications specifically for EC2 connected to FSx for Lustre are below\n# When you use `docker run`, you'll need to run two commands manually:\n# pip install -e /fsx/transformers\n# These are done in the MPIJob launch script when using Kubernetes, but not for a shell.\n"
}