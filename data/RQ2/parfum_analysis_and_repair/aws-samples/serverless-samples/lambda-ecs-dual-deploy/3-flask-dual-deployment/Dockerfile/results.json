{
  "startTime": 1674250694609,
  "endTime": 1674250695375,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\n# Define global args\nARG FUNCTION_DIR=\"/home/app/\"\nARG RUNTIME_VERSION=\"3.9\"\nARG DISTRO_VERSION=\"3.12\"\n\n# Stage 1 -bundle base image + runtime\nFROM python:${RUNTIME_VERSION}-alpine${DISTRO_VERSION} AS python-alpine\n# Install GCC (Alpine uses musl but we compile and link dependencies with GCC)\nRUN apk add --no-cache libstdc++\n# Stage 2 -build function and dependencies\nFROM python-alpine AS build-image\nARG FUNCTION_DIR\n# Install aws-lambda-cpp build dependencies\nRUN apk add --no-cache build-base libtool autoconf automake libexecinfo-dev make cmake libcurl\n# Create function directory\nRUN mkdir -p ${FUNCTION_DIR}\n# Install Lambda Runtime Interface Client for Python\nRUN python${RUNTIME_VERSION} -m pip install awslambdaric --target ${FUNCTION_DIR}\n\n# Stage 3 - Install app server and copy app\nFROM python-alpine\nARG FUNCTION_DIR\n# Set working directory to function root directory\nWORKDIR ${FUNCTION_DIR}\n# Install app server\nRUN pip install --no-cache-dir gunicorn\n# Copy in the built dependencies\nCOPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}\n# Copy application and handler function\nCOPY ./app/*.py ./app/*.sh ./app/requirements.txt ${FUNCTION_DIR}\nRUN chmod +x ${FUNCTION_DIR}/*.sh\n# Install application dependencies\nRUN pip install --no-cache-dir -r ${FUNCTION_DIR}/requirements.txt --target ${FUNCTION_DIR}\nENTRYPOINT [\"/home/app/run.sh\"]\n"
}