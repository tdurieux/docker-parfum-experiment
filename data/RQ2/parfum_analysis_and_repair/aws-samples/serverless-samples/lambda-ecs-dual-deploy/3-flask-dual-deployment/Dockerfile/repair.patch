diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/aws-samples/serverless-samples/lambda-ecs-dual-deploy/3-flask-dual-deployment/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/aws-samples/serverless-samples/lambda-ecs-dual-deploy/3-flask-dual-deployment/Dockerfile/repaired.Dockerfile
index 5287525..98650f6 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/aws-samples/serverless-samples/lambda-ecs-dual-deploy/3-flask-dual-deployment/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/aws-samples/serverless-samples/lambda-ecs-dual-deploy/3-flask-dual-deployment/Dockerfile/repaired.Dockerfile
@@ -6,7 +6,7 @@ ARG FUNCTION_DIR="/home/app/"
 ARG RUNTIME_VERSION="3.9"
 ARG DISTRO_VERSION="3.12"
 
-# Stage 1 -bundle base image + runtime 
+# Stage 1 -bundle base image + runtime
 FROM python:${RUNTIME_VERSION}-alpine${DISTRO_VERSION} AS python-alpine
 # Install GCC (Alpine uses musl but we compile and link dependencies with GCC)
 RUN apk add --no-cache libstdc++
@@ -14,7 +14,7 @@ RUN apk add --no-cache libstdc++
 FROM python-alpine AS build-image
 ARG FUNCTION_DIR
 # Install aws-lambda-cpp build dependencies
-RUN apk add --no-cache build-base libtool autoconf automake libexecinfo-dev make cmake libcurl 
+RUN apk add --no-cache build-base libtool autoconf automake libexecinfo-dev make cmake libcurl
 # Create function directory
 RUN mkdir -p ${FUNCTION_DIR}
 # Install Lambda Runtime Interface Client for Python
@@ -26,12 +26,12 @@ ARG FUNCTION_DIR
 # Set working directory to function root directory
 WORKDIR ${FUNCTION_DIR}
 # Install app server
-RUN pip install gunicorn
+RUN pip install --no-cache-dir gunicorn
 # Copy in the built dependencies
 COPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}
 # Copy application and handler function
 COPY ./app/*.py ./app/*.sh ./app/requirements.txt ${FUNCTION_DIR}
 RUN chmod +x ${FUNCTION_DIR}/*.sh
 # Install application dependencies
-RUN pip install -r ${FUNCTION_DIR}/requirements.txt --target ${FUNCTION_DIR}
+RUN pip install --no-cache-dir -r ${FUNCTION_DIR}/requirements.txt --target ${FUNCTION_DIR}
 ENTRYPOINT ["/home/app/run.sh"]