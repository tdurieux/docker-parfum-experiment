{
  "startTime": 1674251713499,
  "endTime": 1674251714475,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 50,
        "columnStart": 2,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 50,
        "columnStart": 2,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:jammy as stage1\n\n# setup environment\nENV LANG=C.UTF-8 \\\n    LC_ALL=en_US.UTF-8 \\\n    DEBIAN_FRONTEND=noninteractive \\\n    container=docker\n\n# download packages list\n# note: we remove the lists later & flatten the image.\nRUN \\\n  apt-get update && apt-get dist-upgrade -y && \\\n  apt-get install -y  \\\n  --no-install-recommends \\\n  -o \"Dpkg::Options::=--force-confdef\"  \\\n  -o \"Dpkg::Options::=--force-confnew\"  \\\n  autotools-dev \\\n  build-essential \\\n  cups \\\n  curl \\\n  fonts-ubuntu \\\n  git \\\n  htop \\\n  less \\\n  locales \\\n  lsb-release \\\n  mesa-utils \\\n  nano \\\n  ncurses-term \\\n  neofetch \\\n  net-tools \\\n  openssh-client \\\n  rsync \\\n  software-properties-common \\\n  sudo \\\n  systemd \\\n  ubuntu-desktop-minimal \\\n  ubuntu-standard \\\n  unzip \\\n  usbutils \\\n  vim \\\n  xserver-xorg-input-all \\\n  yaru-theme-gnome-shell \\\n  yaru-theme-gtk \\\n  yaru-theme-icon \\\n  yaru-theme-sound \\\n  wget && \\\n  apt-get autoremove -y && rm -rf /var/lib/apt/lists/*; # Core packages, including ubuntu-desktop-minimal.\n# Run \"unminimize\" to restore a full Ubuntu system.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# unminimize the system: restore GUI components.\nRUN (yes | unminimize)\n\n# remove unnecessary content\nRUN \\\n  apt-get autoremove -y && \\\n  apt-get clean -y && \\\n  rm -rf /var/lib/apt/lists/*\n\n# ensure default locale is generated\nRUN locale-gen \"en_US.UTF-8\"\n\n# flatten image\nFROM scratch as stage2\n\nCOPY --from=stage1 / /\n\nENV container=docker \\\n  LANG=en_US.UTF-8 \\\n  LANGUAGE=en_US:en \\\n  LC_ALL=en_US.UTF-8\n\n# Create the user 'core' which will be the usual userspace account\n# Also allow core to run stuff as sudo without a password.\nRUN \\\n  adduser core \\\n  --no-create-home \\\n  --gecos \"SkiffOS Core\" \\\n  --shell /bin/bash \\\n  --disabled-password && \\\n  adduser core audio && \\\n  adduser core sudo && \\\n  adduser core root && \\\n  adduser core systemd-journal && \\\n  adduser core dialout && \\\n  adduser core plugdev && \\\n  mkdir -p /home/core/ && \\\n  chown core:core /home/core && \\\n  passwd -d core && \\\n  echo \"core    ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\nRUN systemctl set-default graphical.target && \\\n    systemctl mask tmp.mount && \\\n    find /etc/systemd/system \\\n         /lib/systemd/system \\\n         \\( -path '*.wants/*' \\\n         -name '*swapon*' \\\n         -or -name '*ntpd*' \\\n         -or -name '*resolved*' \\\n         -or -name '*udev*' \\\n         -or -name '*freedesktop*' \\\n         -or -name '*remount-fs*' \\\n         -or -name '*getty*' \\\n         -or -name '*systemd-sysctl*' \\\n         -or -name '*.mount' \\\n         -or -name '*remote-fs*' \\) \\\n         -exec echo \\{} \\; \\\n         -exec rm \\{} \\;\n\nWORKDIR /\nENTRYPOINT [\"/lib/systemd/systemd\"]\n"
}