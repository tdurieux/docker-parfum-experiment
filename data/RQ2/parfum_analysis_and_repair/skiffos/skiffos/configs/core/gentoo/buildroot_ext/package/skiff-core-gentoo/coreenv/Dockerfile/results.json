{
  "startTime": 1674255338214,
  "endTime": 1674255338989,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 22
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# See: https://github.com/gentoo/gentoo-docker-images/blob/master/stage3.Dockerfile\nARG BOOTSTRAP\n\nFROM ${BOOTSTRAP:-alpine:edge} as downloader\n# FROM ${BOOTSTRAP:-quay.io/skiffos/alpine:latest} as downloader\n\nWORKDIR /gentoo\n\nARG ARCH=amd64\nARG MICROARCH=amd64\nARG SUBPROFILE=systemd\nARG SUFFIX=\"-systemd\"\nARG DIST=\"https://ftp-osl.osuosl.org/pub/gentoo/releases/${ARCH}/autobuilds\"\nARG SIGNING_KEY=\"0xBB572E0E2D182910\"\n\nADD ./overrides.sh /\n\nRUN apk --no-cache --upgrade add ca-certificates gnupg tar wget xz\n\nRUN source /overrides.sh \\\n    && echo \"Fetching Gentoo signing key ${SIGNING_KEY}\" \\\n    && gpg --batch --list-keys \\\n    && echo \"honor-http-proxy\" >> ~/.gnupg/dirmngr.conf \\\n    && echo \"disable-ipv6\" >> ~/.gnupg/dirmngr.conf \\\n    && gpg --batch --keyserver hkps://keys.gentoo.org --recv-keys ${SIGNING_KEY}\n\nRUN source /overrides.sh \\\n && echo \"Building Gentoo Container image for ${ARCH} ${SUFFIX} fetching from ${DIST}\" \\\n && STAGE3PATH=\"$(wget -O- \"${DIST}/latest-stage3-${MICROARCH}${SUFFIX}.txt\" | tail -n 1 | cut -f 1 -d ' ')\" \\\n && echo \"STAGE3PATH:\" $STAGE3PATH \\\n && STAGE3=\"$(basename ${STAGE3PATH})\" \\\n    && wget \"${DIST}/${STAGE3PATH}.asc\" \"${DIST}/${STAGE3PATH}.DIGESTS\" \\\n    && wget -q \"${DIST}/${STAGE3PATH}\" \"${DIST}/${STAGE3PATH}.CONTENTS.gz\" \\\n && gpg --batch --verify \"${STAGE3}.asc\" \\\n && awk '/# SHA512 HASH/{getline; print}' ${STAGE3}.DIGESTS | sha512sum -c \\\n && tar xpf \"${STAGE3}\" --xattrs-include='*.*' --numeric-owner \\\n && ( sed -i -e 's/#rc_sys=\"\"/rc_sys=\"docker\"/g' etc/rc.conf 2>/dev/null || true ) \\\n && echo 'UTC' > etc/timezone \\\n && rm ${STAGE3}.asc ${STAGE3}.DIGESTS ${STAGE3}.CONTENTS.gz ${STAGE3}\n\nFROM scratch as stage3\n\nWORKDIR /\nCOPY --from=downloader /gentoo/ /\nCMD [\"/bin/bash\"]\n\nFROM stage3 as stage4\n\n# setup environment\nENV LANG=C.UTF-8 \\\n  LC_ALL=C.UTF-8 \\\n  container=docker\n\n# we don't have Git yet, so download a gentoo tarball.\nRUN emerge-webrsync\n# ensure git is merged, unconditionally, so we can use Git for portage\nRUN emerge --oneshot --quiet-build y --with-bdeps=y --backtrack=30 dev-vcs/git\n# switch to git-based portage\nCOPY ./overrides.sh /gentoo-skiff-overrides.sh\nRUN source /gentoo-skiff-overrides.sh; \\\n  PROFILES_DIR=/var/db/repos/gentoo/profiles/default; \\\n  PROFILE_DIR=$(realpath ${PROFILES_DIR}/linux/${ARCH}/17.*/${SUBPROFILE} | sort | tail -n1); \\\n  PROFILE=default/${PROFILE_DIR#\"${PROFILES_DIR}/\"}; \\\n  eselect profile set \"${PROFILE}\"; \\\n  touch /etc/portage/repos.conf\n\n# add repos.conf and use git portage from now forward\nCOPY ./repos.conf /etc/portage/repos.conf\nRUN rm -rf /var/db/repos/gentoo/*; \\\n    mkdir -p /var/db/repos/localrepo-crossdev/{profiles,metadata}; \\\n    echo 'crossdev' > /var/db/repos/localrepo-crossdev/profiles/repo_name; \\\n    printf \"masters = gentoo\\nthin-manifests = true\\n\" > /var/db/repos/localrepo-crossdev/metadata/layout.conf; \\\n    chown -R portage:portage /var/db/repos/localrepo-crossdev; \\\n    rm -rf /etc/portage/package.use || true; \\\n    mkdir -p /etc/portage/package.use; \\\n    emerge --sync\n\n# apply package keywords, use flags, etc\nCOPY ./make.conf ./package.accept_keywords /etc/portage/\nCOPY ./sysctl.conf /etc/sysctl.conf\nRUN \\\n  source /gentoo-skiff-overrides.sh; \\\n  sed -i -e \"s#ARCH#${ARCH}#g\" /etc/portage/package.accept_keywords; \\\n  mv /etc/portage/package.accept_keywords /etc/portage/package-accept.tmp; \\\n  mkdir -p /etc/portage/package.accept_keywords; \\\n  mv /etc/portage/package-accept.tmp /etc/portage/package.accept_keywords/01-standard; \\\n  rm /gentoo-skiff-overrides.sh\nCOPY ./package.use /etc/portage/package.use/01-standard\n\n# pass #1: base package set, system, remove tk and icu to fix circular deps\n# be failure tolerant here. we can deal with it later.\n# disable certain use flags that cause cycles\nRUN \\\n  export USE=\"-tk -icu\" && \\\n  emerge -1 portage && \\\n  (emerge -uDU --quiet-build y --with-bdeps=y --keep-going --autounmask-write --autounmask-backtrack=y --backtrack=50 @system || true)\n\n# update gcc (not currently necessary)\n# RUN gcc-config -l | grep \"10.\" | cut -d[ -f2 | cut -d] -f1 | xargs gcc-config; \\\n#  source /etc/profile; \\\n#  emerge --oneshot --with-bdeps=y sys-devel/libtool\n\n# pass #2: world set from the skiff core world file\nCOPY ./world /var/lib/portage/world\nRUN (emerge -uDU --quiet-build y --with-bdeps=y --keep-going --autounmask-write --autounmask-backtrack=y --backtrack=50 @world || true)\n\n# pass #3: ensure that everything is up to date & this command works without errors\n# sometimes, emerge requires 2 passes to pick up everything\nRUN emerge --update --newuse --deep --backtrack=50 @world\n\n# pass #4: clean any outdated / not needed dependencies\n# minimize image size\nRUN (emerge --depclean || true); \\\n   rm -rf /var/cache/distfiles/* \\\n   /var/log/* /var/tmp/* /usr/src/* \\\n   /etc/xdg/autostart/* /var/db/repos/gentoo || true\n\nFROM scratch\n\nCOPY --from=stage4 / /\n\nENV container docker\n\n# Create the user which will be the usual userspace account\n# Also allow core to run stuff as sudo without a password.\nRUN \\\n  useradd \\\n  -G users,audio,dialout,systemd-journal \\\n  -s /bin/bash \\\n  core && \\\n  mkdir -p /home/core/ && \\\n  chown core:core /home/core && \\\n  printf \"# skiff core build user\\ncore    ALL=(ALL) NOPASSWD: ALL\\n\" > /etc/sudoers.d/10-skiff-core && \\\n  chmod 0400 /etc/sudoers.d/10-skiff-core && \\\n  visudo -c -f /etc/sudoers.d/10-skiff-core\n\nWORKDIR /\nENTRYPOINT [\"/lib/systemd/systemd\"]\n"
}