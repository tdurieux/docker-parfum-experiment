{
  "startTime": 1674249511709,
  "endTime": 1674249513455,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Based on the skiff/core defconfig (Ubuntu) Dockerfile, with modifications for\n# DietPi installation and setup.\n\nFROM debian:bullseye as stage1\n\n# setup environment\nENV LANG=C.UTF-8 \\\n    LC_ALL=en_US.UTF-8 \\\n    container=docker\n\n# Download apt cache (we clear it later)\nRUN apt-get update\n\n# Core packages\nRUN export DEBIAN_FRONTEND=noninteractive; \\\n    apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install -y  \\\n    --no-install-recommends \\\n    -o \"Dpkg::Options::=--force-confdef\"  \\\n    -o \"Dpkg::Options::=--force-confnew\"  \\\n    autotools-dev \\\n    bash-completion \\\n    build-essential \\\n    bzip2 \\\n    ca-certificates \\\n    cron \\\n    cups \\\n    curl \\\n    dirmngr \\\n    ethtool \\\n    fake-hwclock \\\n    git \\\n    gnupg \\\n    htop \\\n    ifupdown \\\n    iputils-ping \\\n    kmod \\\n    locales \\\n    lsb-release \\\n    nano \\\n    ncurses-term \\\n    net-tools \\\n    openssh-client \\\n    p7zip \\\n    parted \\\n    procps \\\n    psmisc \\\n    rfkill \\\n    rsync \\\n    software-properties-common \\\n    sudo \\\n    systemd \\\n    systemd-sysv \\\n    tzdata \\\n    udev \\\n    unzip \\\n    usbutils \\\n    vim \\\n    whiptail \\\n    wget && \\\n    apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\n# Create the user 'dietpi' which will be the usual userspace account\n# Also allow dietpi to run stuff as sudo without a password.\nRUN \\\n  adduser dietpi \\\n  --no-create-home \\\n  --gecos \"SkiffOS Core\" \\\n  --shell /bin/bash \\\n  --disabled-password && \\\n  adduser dietpi audio && \\\n  adduser dietpi sudo && \\\n  adduser dietpi root && \\\n  adduser dietpi systemd-journal && \\\n  adduser dietpi dialout && \\\n  adduser dietpi plugdev && \\\n  mkdir -p /home/dietpi/ && \\\n  chown dietpi:dietpi /home/dietpi && \\\n  passwd -d dietpi && \\\n  echo \"dietpi    ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n# Note: this section differs from skiff-core-defconfig\nRUN cd /usr/src && \\\n    git clone https://github.com/MichaIng/DietPi.git && \\\n    cd ./DietPi && \\\n    git checkout --detach 701c30575f7c59e15a72e33f15991eb5fad2bfe6\n\n# Prepare system for DietPi\nRUN cd /usr/src/DietPi && \\\n    export GITBRANCH=master && \\\n    export IMAGE_CREATOR=\"skiffos\" && \\\n    export PREIMAGE_INFO=\"https://github.com/skiffos/skiffos\" && \\\n    export HW_MODEL=22 && \\\n    export WIFI_REQUIRED=0 && \\\n    export DISTRO_TARGET=6 && \\\n    mkdir -p /boot/dietpi /var/tmp/dietpi /var/lib/dietpi/dietpi-software/ && \\\n    cp -Rf ./dietpi/. /boot/dietpi/ && \\\n    cp -Rf ./rootfs/. / && \\\n    cp dietpi.txt /boot/ && \\\n    cp README.md /boot/dietpi-README.md && \\\n    cp LICENSE /boot/dietpi-LICENSE.txt && \\\n    cp CHANGELOG.txt /boot/dietpi-CHANGELOG.txt && \\\n    chmod -R +x /boot/dietpi /var/lib/dietpi/services /etc/cron.*/dietpi && \\\n    echo \"$IMAGE_CREATOR\" > /boot/dietpi/.prep_info && \\\n    echo \"$PREIMAGE_INFO\" >> /boot/dietpi/.prep_info && \\\n    cp LICENSE /var/lib/dietpi/license.txt && \\\n    echo \"22\" > /etc/.dietpi_hw_model_identifier && \\\n    /boot/dietpi/func/dietpi-obtain_hw_model && \\\n    echo 2 > /boot/dietpi/.install_stage && \\\n    /boot/dietpi/func/dietpi-set_software ntpd-mode \"0\" && \\\n    echo \"PATH=\\$PATH:/boot/dietpi\" > /etc/profile.d/dietpi-path.sh && \\\n    sed -ie \"s/AUTO_SETUP_SSH_SERVER_INDEX=-1/AUTO_SETUP_SSH_SERVER_INDEX=0/g\" /boot/dietpi.txt && \\\n    sed -ie \"s/AUTO_SETUP_LOGGING_INDEX=-1/AUTO_SETUP_LOGGING_INDEX=0/g\" /boot/dietpi.txt && \\\n    chmod +x /etc/profile.d/dietpi-path.sh && \\\n    cd / && rm -rf /usr/src/DietPi\n\n# Run dietpi setup scripts\nRUN /boot/dietpi/func/dietpi-set_software apt-mirror default && \\\n    mkdir -p /run/dietpi /var/tmp/dietpi/logs && \\\n    ln -sfv /etc/profile.d/bash_completion.sh /etc/bashrc.d/dietpi-bash_completion.sh && \\\n    mkdir -pv /var/lib/dietpi/{postboot.d,dietpi-software/installed} && \\\n    mkdir -pv /var/tmp/dietpi/logs/dietpi-ramlog_store && \\\n    mkdir -pv /mnt/{dietpi_userdata,samba,ftp_client,nfs_client} && \\\n    chown -R dietpi:dietpi /var/lib/dietpi /mnt/{dietpi_userdata,samba,ftp_client,nfs_client} && \\\n    find /var/lib/dietpi /mnt/{dietpi_userdata,samba,ftp_client,nfs_client} -type d -exec chmod 0775 {} + && \\\n    systemctl enable dietpi-ramlog dietpi-preboot dietpi-boot dietpi-postboot dietpi-kill_ssh && \\\n    systemctl mask sshd\n\n# DietPi cleanup\nRUN (rm -Rv /var/cache/apparmor || true) && \\\n    (rm -Rfv /var/lib/dhcp/{,.??,.[^.]}* || true) && \\\n    ([[ -d '/usr/share/calendar' ]] && rm -vR /usr/share/calendar || true) && \\\n    (rm -Rfv /var/backups/{,.??,.[^.]}* || true) && \\\n    (rm -fv /var/cache/debconf/*-old || true) && \\\n    (rm -fv /var/lib/dpkg/*-old || true) && \\\n    (rm -Rfv /{root,home/*}/.{bash_history,nano_history,wget-hsts,cache,local,config,gnupg,viminfo,dbus,gconf,nano,vim,zshrc,oh-my-zsh} || true)\n\n# Cleanup any data we don't need.\nRUN rm -rf /var/lib/apt/lists/*\n\n# Locale-gen\nRUN locale-gen \"en_US.UTF-8\"\n\nFROM scratch as stage2\n\nCOPY --from=stage1 / /\n\n# Note: this section identical to skiff-core-defconfig\n\nENV container=docker \\\n  LANG=en_US.UTF-8 \\\n  LANGUAGE=en_US:en \\\n  LC_ALL=en_US.UTF-8\n\nRUN systemctl set-default graphical.target && \\\n    systemctl mask tmp.mount && \\\n    find /etc/systemd/system \\\n         /lib/systemd/system \\\n         \\( -path '*.wants/*' \\\n         -name '*swapon*' \\\n         -or -name '*ntpd*' \\\n         -or -name '*resolved*' \\\n         -or -name '*udev*' \\\n         -or -name '*freedesktop*' \\\n         -or -name '*remount-fs*' \\\n         -or -name '*getty*' \\\n         -or -name '*systemd-sysctl*' \\\n         -or -name '*.mount' \\\n         -or -name '*remote-fs*' \\) \\\n         -exec echo \\{} \\; \\\n         -exec rm \\{} \\;\n\nWORKDIR /\nENTRYPOINT [\"/lib/systemd/systemd\"]\n"
}