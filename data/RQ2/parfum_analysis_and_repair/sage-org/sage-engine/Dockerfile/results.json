{
  "startTime": 1674249152679,
  "endTime": 1674249153287,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-alpine\n\nRUN apk add --no-cache git make gcc g++ bash postgresql-dev python3-dev musl-dev curl\n\n# for cryptography, need to install libffi-dev\nRUN apk add --no-cache libffi-dev\n\n# install poetry\nRUN curl -f -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n\nWORKDIR /opt/sage-engine/\n\nRUN pip install --no-cache-dir pybind11==2.2.4\nRUN source ~/.poetry/env\n\nCOPY poetry.lock pyproject.toml ./\n# install grpcio first to be faster than a simple poetry install\n# super hack-ish from: https://github.com/grpc/grpc/issues/18150\n# from 20 minutes to almost less than 1.. thank you :D\n# tempory fix until someone release a python3.7-alpine grpcio wheel\nRUN echo 'manylinux1_compatible = True' > /usr/local/lib/python3.7/site-packages/_manylinux.py\nRUN pip install --no-cache-dir grpcio\n# roll back\nRUN rm /usr/local/lib/python3.7/site-packages/_manylinux.py\n# generate the requirements.txt from poetry and then use pip to install\nRUN ~/.poetry/bin/poetry export -f requirements.txt -v > requirements.txt\n# install using poetry\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . /opt/sage-engine\n\n# now re run poetry for installing but without using the creation of virtualenv. no need we are in a container ><\n# thus no need to install dev dependencies it's a production container\nRUN ~/.poetry/bin/poetry config virtualenvs.create false && ~/.poetry/bin/poetry install --no-dev --extras \"hdt postgres\"\n\nCMD [ \"sage\" ]\n"
}