{
  "startTime": 1674250289108,
  "endTime": 1674250289800,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ALPINE_VERSION=edge\nFROM alpine:${ALPINE_VERSION}\nLABEL Maintainer=\"Tim de Pater <code@trafex.nl>\"\nLABEL Description=\"Lightweight container with Nginx 1.20 & PHP 8.0 based on Alpine Linux.\"\n\nENV APP_ENV=prod\nENV INSTALLATION_TYPE=docker\nENV ELASTICSEARCH_URL=$ELASTICSEARCH_URL\nENV ELASTICSEARCH_USERNAME=$ELASTICSEARCH_USERNAME\nENV ELASTICSEARCH_PASSWORD=$ELASTICSEARCH_PASSWORD\nENV ELASTICSEARCH_API_KEY=$ELASTICSEARCH_API_KEY\nENV SSL_VERIFY_PEER=$SSL_VERIFY_PEER\nENV SSL_VERIFY_HOST=$SSL_VERIFY_HOST\n\nENV SECRET_REGISTER=$SECRET_REGISTER\n\n# Install packages and remove default server definition\nRUN apk -U upgrade && apk --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing/ add php81 php81-fpm php81-opcache php81-json php81-openssl php81-curl \\\n    php81-zlib php81-xml php81-simplexml php81-phar php81-intl php81-dom php81-xmlreader php81-ctype php81-session \\\n    php81-tokenizer php81-pdo php81-pdo_mysql php81-pdo_pgsql php81-iconv php81-zip \\\n    php81-gmp php81-mbstring nginx supervisor nodejs npm curl\n\n# Create symlink so programs depending on `php` still function\nRUN ln -s /usr/bin/php81 /usr/bin/php\n\n# Configure nginx\nCOPY docker/nginx.conf /etc/nginx/nginx.conf\nCOPY docker/privkey.pem /etc/nginx/privkey.pem\nCOPY docker/fullchain.pem /etc/nginx/fullchain.pem\nRUN rm -f /etc/nginx/conf.d/default.conf\n\n# Configure PHP-FPM\nCOPY docker/fpm-pool.conf /etc/php81/php-fpm.d/www.conf\nCOPY docker/php.ini /etc/php81/conf.d/custom.ini\n\n# Configure supervisord\nCOPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n# Create folders\nRUN mkdir -p /var/www/html && mkdir -p /.composer && mkdir -p /.npm\n\n# Make sure files/folders needed by the processes are accessable when they run under the nobody user\nRUN chown -R nobody.nobody /var/www/html && \\\n  chown -R nobody.nobody /.composer && \\\n  chown -R nobody.nobody /.npm && \\\n  chown -R nobody.nobody /etc/nginx && \\\n  chown -R nobody.nobody /run && \\\n  chown -R nobody.nobody /var/lib/nginx && \\\n  chown -R nobody.nobody /var/log/nginx\n\n# Switch to use a non-root user from here on\nUSER nobody\n\n# Add application\nWORKDIR /var/www/html\nCOPY --chown=nobody . /var/www/html/\n\n# Install composer from the official image\nCOPY --from=composer /usr/bin/composer /usr/bin/composer\n\n# Run composer install to install the dependencies\nRUN composer install --optimize-autoloader --no-interaction --no-progress --no-dev\n\nRUN npm install && npm cache clean --force;\nRUN npm run build\n\nCOPY --chown=nobody .env.dist .env\n\n# Expose the port nginx is reachable on\nEXPOSE 8080\n\n# Let supervisord start nginx & php-fpm\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor/conf.d/supervisord.conf\"]\n\n# Configure a healthcheck to validate that everything is up&running\nHEALTHCHECK --timeout=10s CMD curl --silent --fail http://127.0.0.1:8080/fpm-ping\n"
}