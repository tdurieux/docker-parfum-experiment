diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/cityofboston/digital/services-js/payment-webhooks/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/cityofboston/digital/services-js/payment-webhooks/Dockerfile/repaired.Dockerfile
index a4e0a5c..d5d9b97 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/cityofboston/digital/services-js/payment-webhooks/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/cityofboston/digital/services-js/payment-webhooks/Dockerfile/repaired.Dockerfile
@@ -8,12 +8,12 @@ WORKDIR /app
 ENV PYTHONUNBUFFERED=1
 RUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
 RUN python3 -m ensurepip
-RUN pip3 install --no-cache --upgrade pip setuptools
+RUN pip3 install --no-cache-dir --no-cache --upgrade pip setuptools
 
 # Install the AWS CLI
-RUN apk add --update curl unzip git \
+RUN apk add --no-cache --update curl unzip git \
   && cd /tmp \
-  && curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip" \
+  && curl -f "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip" \
   && unzip awscli-bundle.zip \
   && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws \
   && rm awscli-bundle.zip \
@@ -26,7 +26,7 @@ RUN yarn global add yarn@^1.6.0
 # servers.
 RUN mkdir -m 755 -p /usr/local/share/ca-certificates
 ADD https://raw.githubusercontent.com/CityOfBoston/devops-public/master/ca-certificates/CityOfBoston-Enterprise-Root-CA.crt /usr/local/share/ca-certificates/
-RUN chmod 644 /usr/local/share/ca-certificates/* && update-ca-certificates 
+RUN chmod 644 /usr/local/share/ca-certificates/* && update-ca-certificates
 
 # Tells Node to use the OS for trusted certificates
 ENV NODE_OPTIONS=--use-openssl-ca
@@ -41,12 +41,12 @@ ADD yarn.lock lerna.json .yarnrc /app/
 # which will fail because we donâ€™t have the source code at this point.
 #
 # TODO(finh): Scope this down to $WORKSPACE when yarn has that capability.
-RUN yarn install --frozen-lockfile --ignore-scripts
+RUN yarn install --frozen-lockfile --ignore-scripts && yarn cache clean;
 
 ADD . /app/
 
-RUN npx lerna run --stream --include-filtered-dependencies --scope services-js.$WORKSPACE prepare 
-RUN npx lerna run --stream --include-filtered-dependencies --scope services-js.$WORKSPACE prepare-deploy 
+RUN npx lerna run --stream --include-filtered-dependencies --scope services-js.$WORKSPACE prepare
+RUN npx lerna run --stream --include-filtered-dependencies --scope services-js.$WORKSPACE prepare-deploy
 
 EXPOSE 3000
 ENV NODE_ENV production