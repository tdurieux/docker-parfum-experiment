{
  "startTime": 1674217263223,
  "endTime": 1674217264858,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 5,
        "columnEnd": 85
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 35,
        "columnEnd": 51
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 55,
        "columnEnd": 71
      }
    }
  ],
  "repairedDockerfile": "FROM node:14.19.1-alpine\n\nENV WORKSPACE=commissions-app\n\nWORKDIR /app\n\nRUN apk add --no-cache git openssl\n\n# Install python/pip\nENV PYTHONUNBUFFERED=1\nRUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python\nRUN python3 -m ensurepip\nRUN pip3 install --no-cache-dir --no-cache --upgrade pip setuptools\n\n# Install the AWS CLI\nRUN apk add --no-cache --update curl unzip git \\\n  && cd /tmp \\\n  && curl -f \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\" \\\n  && unzip awscli-bundle.zip \\\n  && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws \\\n  && rm awscli-bundle.zip \\\n  && rm -rf awscli-bundle\n\n# To prevent “Error: could not get uid/gid”\nRUN npm config set unsafe-perm true\n\n# Need to upgrade yarn to at least 1.6\nRUN yarn global add yarn@^1.6.0 && yarn cache clean;\n\n# This is the tar'd up collection of package.json files created by\n# build-service-container.sh. Working with it and the lockfiles means we can\n# cache the yarn install across builds when there are no dependency changes.\nADD package-json.tar yarn.lock lerna.json .yarnrc /app/\n\n# We don’t run the scripts because they will try to build our custom packages,\n# which will fail because we don’t have the source code at this point.\n#\n# TODO(finh): Scope this down to $WORKSPACE when yarn has that capability.\nRUN yarn install --frozen-lockfile --ignore-scripts && yarn cache clean;\n\nADD . /app/\n\nRUN /app/scripts/generate-ssl-key.sh /app/services-js/$WORKSPACE\n\n# This does the building of our repo’s packages, which couldn’t happen during\n# the initial install because we didn’t have source. The scope keeps us from\n# building unnecessary packages.\nRUN npx lerna run --stream --include-filtered-dependencies --scope services-js.$WORKSPACE prepare\n\nEXPOSE 3000\n\nENV NODE_ENV production\nENV USE_SSL 1\n\nWORKDIR /app/services-js/$WORKSPACE\n\nENTRYPOINT [\"/app/scripts/service-entrypoint.sh\"]\nCMD [\"yarn\", \"start\"]\n"
}