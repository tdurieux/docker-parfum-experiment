{
  "startTime": 1674255882951,
  "endTime": 1674255883761,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 2,
        "columnEnd": 21
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 2,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# dependencies\nFROM caddy:2.5.1 AS caddy\n\n# development\nFROM composer:2.3 AS composer\n\nARG APPLICATION_ENV=development\nENV APPLICATION_ENV=${APPLICATION_ENV}\nARG COMMIT_SHA\nENV COMMIT_SHA=${COMMIT_SHA}\n\nCOPY composer.* /app/\n\nRUN \\\n  if [ \"${APPLICATION_ENV}\" = \"development\" ]; then \\\n    composer install \\\n      --ignore-platform-reqs \\\n      --no-interaction \\\n      --no-progress \\\n      --no-scripts \\\n      --no-suggest \\\n      --optimize-autoloader \\\n      --prefer-dist; \\\n  else \\\n    composer install \\\n      --ignore-platform-reqs \\\n      --no-dev \\\n      --no-interaction \\\n      --no-progress \\\n      --no-scripts \\\n      --no-suggest \\\n      --optimize-autoloader \\\n      --prefer-dist; \\\n  fi\n\nCOPY . /app/\n\nRUN \\\n  if [ \"${APPLICATION_ENV}\" = \"development\" ]; then \\\n    composer dump-autoload \\\n      --classmap-authoritative \\\n      --optimize; \\\n  else \\\n    composer dump-autoload \\\n      --classmap-authoritative \\\n      --no-dev \\\n      --optimize; \\\n  fi\n\nFROM php:8.1.4-cli-alpine AS php-cli\n\nARG APPLICATION_ENV=development\nENV APPLICATION_ENV=${APPLICATION_ENV}\nARG COMMIT_SHA\nENV COMMIT_SHA=${COMMIT_SHA}\n\nRUN apk add --no-cache \\\n    icu \\\n    imagemagick \\\n    libgomp \\\n    libpq \\\n    libxml2 \\\n    libzip && \\\n  apk add --no-cache --virtual .phpize-deps \\\n    $PHPIZE_DEPS \\\n    icu-dev \\\n    imagemagick-dev \\\n    libxml2-dev \\\n    libzip-dev \\\n    postgresql-dev && \\\n  docker-php-ext-install \"-j$(nproc)\" \\\n    intl \\\n    opcache \\\n    pdo_pgsql \\\n    pgsql \\\n    soap \\\n    zip && \\\n  pecl install imagick && \\\n  docker-php-ext-enable imagick && \\\n  pecl install mailparse && \\\n  docker-php-ext-enable mailparse && \\\n  pecl install redis && \\\n  docker-php-ext-enable redis && \\\n  apk del .phpize-deps\n\nRUN apk add --no-cache \\\n    openjdk11-jre && \\\n  apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.10/main --update-cache \\\n    nodejs==10.24.1-r0 \\\n    npm==10.24.1-r0 && \\\n  npm install -g less && npm cache clean --force;\n\nRUN mv \"${PHP_INI_DIR}/php.ini-production\" \"${PHP_INI_DIR}/php.ini\"\n\nCOPY --from=composer /app/ /app/\n\nCOPY docker/php-cli/litus.ini /usr/local/etc/php/conf.d/\nCOPY docker/php-cli/entrypoint.sh /\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nFROM php:8.1.4-fpm-alpine AS php-fpm\n\nARG APPLICATION_ENV=development\nENV APPLICATION_ENV=${APPLICATION_ENV}\nARG COMMIT_SHA\nENV COMMIT_SHA=${COMMIT_SHA}\n\nRUN apk add --no-cache \\\n  icu \\\n  imagemagick \\\n  libgomp \\\n  libpq \\\n  libxml2 \\\n  libzip \\\n  openjdk11-jre\n\nRUN apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.10/main --update-cache \\\n    nodejs==10.24.1-r0 \\\n    npm==10.24.1-r0 && \\\n  npm install -g less && npm cache clean --force;\n\nRUN curl -fsSL -o /tmp/fop-2.7-bin.tar.gz https://downloads.apache.org/xmlgraphics/fop/binaries/fop-2.7-bin.tar.gz && \\\n  tar --strip-components=1 -C /opt -xzf /tmp/fop-2.7-bin.tar.gz fop-2.7/fop && \\\n  rm /tmp/fop-2.7-bin.tar.gz\n\nRUN mv \"${PHP_INI_DIR}/php.ini-production\" \"${PHP_INI_DIR}/php.ini\"\n\nRUN mkdir -p /app/public/_assetic && \\\n  mkdir -p /app/public/_common/profile && \\\n  mkdir -p /app/public/_gallery/albums && \\\n  mkdir -p /app/public/_publications/pdf && \\\n  mkdir -p /app/public/_publications/html && \\\n  mkdir -p /app/public/_br/img && \\\n  chown -R www-data:www-data /app\n\nCOPY --from=php-cli --chown=www-data:www-data /app/ /app/\n\nCOPY --from=php-cli /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/\nCOPY --from=php-cli /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/\n\nCOPY docker/php-fpm/litus.ini /usr/local/etc/php/conf.d/\nCOPY docker/php-fpm/opcache.ini /usr/local/etc/php/conf.d/\n\nVOLUME [\"/app/public/_assetic\"]\nVOLUME [\"/app/public/_common/profile\"]\nVOLUME [\"/app/public/_gallery/albums\"]\nVOLUME [\"/app/public/_publications/pdf\"]\nVOLUME [\"/app/public/_publications/html\"]\nVOLUME [\"/app/public/_br/img\"]\n\nVOLUME [\"/data\"]\n\nFROM scratch\n\nCOPY --from=caddy /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=caddy /usr/bin/caddy /usr/bin/\n\nCOPY --from=composer /app/public/ /app/public/\n\nCOPY docker/caddy/Caddyfile /etc/caddy/\n\nVOLUME [\"/app/public/_assetic\"]\nVOLUME [\"/app/public/_common/profile\"]\nVOLUME [\"/app/public/_gallery/albums\"]\nVOLUME [\"/app/public/_publications/pdf\"]\nVOLUME [\"/app/public/_publications/html\"]\nVOLUME [\"/app/public/_br/img\"]\n\nEXPOSE 8080\n\nENTRYPOINT [\"caddy\"]\nCMD [\"run\", \"--config\", \"/etc/caddy/Caddyfile\", \"--adapter\", \"caddyfile\"]\n"
}