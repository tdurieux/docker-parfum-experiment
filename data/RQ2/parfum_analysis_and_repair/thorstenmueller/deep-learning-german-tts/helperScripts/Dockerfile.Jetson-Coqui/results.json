{
  "startTime": 1674252652595,
  "endTime": 1674252653184,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 118
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for running Coqui TTS trainings in a docker container on NVIDIA Jetson platofrm.\n# Based on NVIDIA Jetson ML Image, provided without any warranty as is by Thorsten MÃ¼ller (https://twitter.com/ThorstenVoice) in august 2021\n\nFROM nvcr.io/nvidia/l4t-ml:r32.5.0-py3\n\nRUN echo \"deb https://repo.download.nvidia.com/jetson/common r32.4 main\" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list\nRUN echo \"deb https://repo.download.nvidia.com/jetson/t194 r32.4 main\" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list\n\nRUN apt-get update -y && apt-get install --no-install-recommends vim python-mecab libmecab-dev cuda-toolkit-10-2 libcudnn8 libcudnn8-dev libsndfile1-dev locales -y && rm -rf /var/lib/apt/lists/*;\n\n# Setting some environment vars\nENV LLVM_CONFIG=/usr/bin/llvm-config-9\nENV PYTHONPATH=/coqui/TTS/\nENV LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH\n# Skipping OPENBLAS_CORETYPE might show \"Illegal instruction (core dumped) error\nENV OPENBLAS_CORETYPE=ARMV8\n\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\n\n# Adjust locale setting to your personal needs\nRUN sed -i '/de_DE.UTF-8/s/^# //g' /etc/locale.gen && \\\n    locale-gen\nENV LANG de_DE.UTF-8\nENV LANGUAGE de_DE:de\nENV LC_ALL de_DE.UTF-8\n\nRUN mkdir /coqui\nWORKDIR /coqui\n\nARG COQUI_BRANCH\nRUN git clone -b ${COQUI_BRANCH} https://github.com/coqui-ai/TTS.git\nWORKDIR /coqui/TTS\nRUN pip3 install --no-cache-dir pip setuptools wheel --upgrade\nRUN pip uninstall -y tensorboard tensorflow tensorflow-estimator nbconvert matplotlib\nRUN pip install --no-cache-dir -r requirements.txt\nRUN python3 ./setup.py develop\n\n# Jupyter Notebook\nRUN python3 -c \"from notebook.auth.security import set_password; set_password('nvidia', '/root/.jupyter/jupyter_notebook_config.json')\"\nCMD /bin/bash -c \"jupyter lab --ip 0.0.0.0 --port 8888 --allow-root\"\n\n\n# Build example:\n#   nvidia-docker build . -f Dockerfile.Jetson-Coqui --build-arg COQUI_BRANCH=v0.1.3 -t jetson-coqui\n# Run example:\n#   nvidia-docker run -p 8888:8888 -d --shm-size 32g --gpus all -v /ssd/___prj/tts/dataset-july21:/coqui/TTS/data jetson-coqui\n# Bash example:\n#   nvidia-docker exec -it <containerId> /bin/bash\n"
}