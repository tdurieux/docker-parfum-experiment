{
  "startTime": 1674221210205,
  "endTime": 1674221210752,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 3,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM eclipse-temurin:18-jdk\n# SHADOWS: FROM mubaldino/opensextant:xponents-3.5\n#\n# --------------------------\nENV XLAYER_PORT=8787\nENV VERSION=Xponents-3.5\nENV XPONENTS=/home/opensextant/Xponents\nENV JAVA_XMS=3500m\nENV JAVA_XMX=3500m\nENV MVN_VER=3.8.5\nENV MVN=apache-maven-$MVN_VER\nENV PATH=/home/opensextant/maven/bin:$PATH\nENV LOCAL_REPO_NAME=maven-repo\n# NOTE LOCAL_REPO is a absolute path\nENV LOCAL_REPO=$XPONENTS/$LOCAL_REPO_NAME\n\nRUN adduser opensextant --home /home/opensextant --disabled-password\nUSER opensextant\nWORKDIR /home/opensextant\n\n# --------------------------\n# Copy ./Xponents-3.x/<CONTENT> to target\n#\nCOPY --chown=opensextant:opensextant ./ $XPONENTS/\n\n# OFFLINE\n#---------------------------\n# Install Maven to allow for offline recompilation\nRUN curl -f -O https://dlcdn.apache.org/maven/maven-3/$MVN_VER/binaries/$MVN-bin.tar.gz && \\\n   tar xzf ./$MVN-bin.tar.gz && \\\n   mv $MVN ./maven && rm ./$MVN-bin.tar.gz\n\nWORKDIR $XPONENTS\n\n# Stage offline mode\nRUN mvn dependency:go-offline -Dmaven.repo.local=$LOCAL_REPO\nRUN find $LOCAL_REPO  -name \"*.sha1\"  -exec rm {} \\;\nRUN find $LOCAL_REPO  -name \"*.repositories\"  -exec rm {} \\;\n\n# Build inside Docker to confirm \"offline mode\" works\n# 1. Build fully as a test to show project is buildable inside container.\nRUN cd ./Core && mvn -o install -Dmaven.repo.local=$LOCAL_REPO\nRUN mvn -o -Dopensextant.solr=./xponents-solr/solr7 \\\n      -Dmaven.repo.local=$LOCAL_REPO clean package dependency:copy-dependencies\n\n# 1a. Log4J cleanup\nRUN for log4jdir in `find $LOCAL_REPO -type d | grep log4j | grep \"2.11\"`; do rm -rf $log4jdir; done\n\n\n# 2. Copy built items and metadata from install to final runtime CLASSPATH ./lib\nRUN cp ./target/*jar ./lib/\n\n#---------------------------\nEXPOSE $XLAYER_PORT 7000\nENTRYPOINT ./script/xlayer-docker.sh $XLAYER_PORT\n"
}