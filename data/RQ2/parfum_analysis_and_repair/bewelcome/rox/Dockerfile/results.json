{
  "startTime": 1674248147465,
  "endTime": 1674248148599,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 1,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# the different stages of this Dockerfile are meant to be built into separate images\n# https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n# https://docs.docker.com/compose/compose-file/#target\n\n\n# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PHP_VERSION=7.4.28\nARG NGINX_VERSION=1.17\n\n\n# \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine3.15 AS bewelcome_php\n\n# persistent / runtime deps\nRUN apk add --no-cache \\\n\t\tacl \\\n\t\tfreetype \\\n\t\tlibjpeg-turbo \\\n\t\tlibpng \\\n\t\tfcgi \\\n\t\tfile \\\n\t\tgettext \\\n\t\tgit \\\n\t\topenssh-client \\\n\t\tpython3 \\\n\t;\n\nARG APCU_VERSION=5.1.18\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\tfreetype-dev \\\n\t\ticu-dev \\\n\t\tlibjpeg-turbo-dev \\\n\t\tlibpng-dev \\\n\t\tlibxslt-dev \\\n\t\tlibzip-dev \\\n\t\tzlib-dev \\\n\t; \\\n\t\\\n\tdocker-php-ext-configure zip; \\\n\tdocker-php-ext-configure gd --with-freetype --with-jpeg=/usr/include/ --enable-gd; \\\n\tdocker-php-ext-install -j$(nproc) \\\n\t\tintl \\\n\t\tgd \\\n\t\tmysqli \\\n\t\tpcntl \\\n\t\tpdo_mysql \\\n\t\txmlrpc \\\n\t\txsl \\\n\t\tzip \\\n        exif \\\n\t; \\\n\tpecl install \\\n\t\tapcu-${APCU_VERSION} \\\n\t; \\\n\tpecl clear-cache; \\\n\tdocker-php-ext-enable \\\n\t\tapcu \\\n\t\topcache \\\n\t; \\\n\t\\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --virtual .phpexts-rundeps $runDeps; \\\n\t\\\n\tapk del .build-deps\n\n# https://github.com/nodejs/docker-node/issues/1126\nRUN set -eux; \\\n\techo \"@edge http://nl.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories; \\\n\tapk add --no-cache yarn@edge\n\nCOPY --from=composer:2 /usr/bin/composer /usr/bin/composer\n\nRUN ln -s $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini\nCOPY docker/php/conf.d/bewelcome.prod.ini $PHP_INI_DIR/conf.d/bewelcome.ini\n\nRUN set -eux; \\\n\t{ \\\n\t\techo '[www]'; \\\n\t\techo 'ping.path = /ping'; \\\n\t} | tee /usr/local/etc/php-fpm.d/docker-healthcheck.conf\n\n# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=1\n# install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux; \\\n\tcomposer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative; \\\n\tcomposer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\n\nWORKDIR /srv/bewelcome\n\n# build for production\nARG APP_ENV=prod\n\n# copy only specifically what we need for production\nCOPY assets assets/\nCOPY bin bin/\nCOPY build build/\nCOPY config config/\nCOPY lib lib/\nCOPY Mike42 Mike42/\nCOPY modules modules/\nCOPY pthacks pthacks/\nCOPY public public/\nCOPY roxlauncher roxlauncher/\nCOPY src src/\nCOPY templates templates/\nCOPY tools tools/\nCOPY translations translations/\nCOPY routes.php ./\nCOPY rox_docker.ini /srv/bewelcome/rox_local.ini\n\n# prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.json composer.lock symfony.lock ./\nRUN set -eux; \\\n\tcomposer install --prefer-dist --no-dev --no-scripts --no-progress --no-suggest; \\\n\tcomposer clear-cache\n\n# prevent the reinstallation of node_modules at every changes in the source code\nCOPY package.json yarn.lock webpack.config.js postcss.config.js tailwind.config.js ./\nRUN set -eux; \\\n\tyarn install --frozen-lock; yarn cache clean; \\\n\tyarn encore production --mode=production\n\n# do not use .env files in production\nCOPY .env ./\nRUN composer dump-env prod; \\\n\trm .env\n\nRUN set -eux; \\\n\tmkdir -p var/cache var/log; \\\n\tcomposer dump-autoload --classmap-authoritative --no-dev; \\\n\tchmod +x bin/console; sync\nVOLUME /srv/bewelcome/var\nVOLUME /srv/bewelcome/data\n\nCOPY docker/php/docker-healthcheck.sh /usr/local/bin/docker-healthcheck\nRUN chmod +x /usr/local/bin/docker-healthcheck\n\nHEALTHCHECK --interval=10s --timeout=3s --retries=3 CMD [\"docker-healthcheck\"]\n\nCOPY docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\n\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n\n\n# \"nginx\" stage\n# depends on the \"php\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS bewelcome_nginx\n\nCOPY docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf\n\nWORKDIR /srv/bewelcome/public\n\nCOPY --from=bewelcome_php /srv/bewelcome/public ./\n\n\n# \"php\" dev stage\n# depends on the \"php\" stage above\nFROM bewelcome_php AS bewelcome_php_dev\n\n# build for production\nARG NODE_ENV=production\n\nRUN set -eux; \\\n\tapk add --no-cache \\\n\t\tmake \\\n\t\tmysql-client\n"
}