{
  "startTime": 1674250939075,
  "endTime": 1674250940035,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "FROM google/cloud-sdk:slim\n\n# Build args.\nARG GITHUB_REF=refs/heads/master\n\n# TODO: This Dockerfile installs pytorch/xla 3.6 wheels. There are also 3.7\n# wheels available; see below.\nENV PYTHON_VERSION=3.6\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n         build-essential \\\n         cmake \\\n         git \\\n         curl \\\n         ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n# Install conda and python.\n# NOTE new Conda does not forward the exit status... https://github.com/conda/conda/issues/8385\nRUN curl -f -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b && \\\n    rm ~/miniconda.sh\n\nENV PATH=/root/miniconda3/bin:$PATH\n\nRUN conda create -y --name container python=$PYTHON_VERSION\n\n# Run the rest of commands within the new conda env.\n# Use absolute path to appease Codefactor.\nSHELL [\"/root/miniconda3/bin/conda\", \"run\", \"-n\", \"container\", \"/bin/bash\", \"-c\"]\nRUN conda install -y python=$PYTHON_VERSION mkl\n\nRUN pip uninstall -y torch && \\\n    # Python 3.7 wheels are available. Replace cp36-cp36m with cp37-cp37m\n    gsutil cp 'gs://tpu-pytorch/wheels/torch-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' . && \\\n    gsutil cp 'gs://tpu-pytorch/wheels/torch_xla-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' . && \\\n    gsutil cp 'gs://tpu-pytorch/wheels/torchvision-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' . && \\\n    pip install --no-cache-dir 'torch-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && \\\n    pip install --no-cache-dir 'torch_xla-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && \\\n    pip install --no-cache-dir 'torchvision-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && \\\n    rm 'torch-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && \\\n    rm 'torch_xla-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && \\\n    rm 'torchvision-nightly-cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}m-linux_x86_64.whl' && \\\n    apt-get install --no-install-recommends -y libomp5 && rm -rf /var/lib/apt/lists/*;\n\nENV LD_LIBRARY_PATH=root/miniconda3/envs/container/lib\n\n\n# Install huggingface/transformers at the current PR, plus dependencies.\nRUN git clone https://github.com/huggingface/transformers.git && \\\n    cd transformers && \\\n    git fetch origin $GITHUB_REF:CI && \\\n    git checkout CI && \\\n    cd .. && \\\n    pip install --no-cache-dir ./transformers && \\\n    pip install --no-cache-dir -r ./transformers/examples/requirements.txt && \\\n    pip install --no-cache-dir pytest\n\nRUN python -c \"import torch_xla; print(torch_xla.__version__)\"\nRUN python -c \"import transformers as trf; print(trf.__version__)\"\nRUN conda init bash\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nCMD [\"bash\"]\n"
}