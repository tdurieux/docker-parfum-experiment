{
  "startTime": 1674254369794,
  "endTime": 1674254371085,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# THIS FILE WAS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT.\n#\n# Generated on 2022-07-07T20:26:55Z by kres 4d1c8c7-dirty.\n\nARG TOOLCHAIN\n\n# cleaned up specs and compiled versions\nFROM scratch AS generate\n\nFROM ghcr.io/siderolabs/ca-certificates:v1.1.0 AS image-ca-certificates\n\nFROM ghcr.io/siderolabs/fhs:v1.1.0 AS image-fhs\n\n# runs markdownlint\nFROM node:18.5.0-alpine AS lint-markdown\nWORKDIR /src\nRUN npm i -g markdownlint-cli@0.31.1 && npm cache clean --force;\nRUN npm i sentences-per-line@0.2.1 && npm cache clean --force;\nCOPY .markdownlint.json .\nCOPY ./README.md ./README.md\nRUN markdownlint --ignore \"CHANGELOG.md\" --ignore \"**/node_modules/**\" --ignore '**/hack/chglog/**' --rules node_modules/sentences-per-line/index.js .\n\n# base toolchain image\nFROM ${TOOLCHAIN} AS toolchain\nRUN apk --update --no-cache add bash curl build-base protoc protobuf-dev\n\n# build tools\nFROM toolchain AS tools\nENV GO111MODULE on\nENV CGO_ENABLED 0\nENV GOPATH /go\nARG GOLANGCILINT_VERSION\nRUN curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/${GOLANGCILINT_VERSION}/install.sh | bash -s -- -b /bin ${GOLANGCILINT_VERSION}\nARG GOFUMPT_VERSION\nRUN go install mvdan.cc/gofumpt@${GOFUMPT_VERSION} \\\n\t&& mv /go/bin/gofumpt /bin/gofumpt\nARG GOIMPORTS_VERSION\nRUN go install golang.org/x/tools/cmd/goimports@${GOIMPORTS_VERSION} \\\n\t&& mv /go/bin/goimports /bin/goimports\nARG DEEPCOPY_VERSION\nRUN go install github.com/siderolabs/deep-copy@${DEEPCOPY_VERSION} \\\n\t&& mv /go/bin/deep-copy /bin/deep-copy\n\n# tools and sources\nFROM tools AS base\nWORKDIR /src\nCOPY ./go.mod .\nCOPY ./go.sum .\nRUN --mount=type=cache,target=/go/pkg go mod download\nRUN --mount=type=cache,target=/go/pkg go mod verify\nCOPY ./cmd ./cmd\nCOPY ./internal ./internal\nRUN --mount=type=cache,target=/go/pkg go list -mod=readonly all >/dev/null\n\n# builds kres-linux-amd64\nFROM base AS kres-linux-amd64-build\nCOPY --from=generate / /\nWORKDIR /src/cmd/kres\nARG VERSION_PKG=\"github.com/talos-systems/kres/internal/version\"\nARG SHA\nARG TAG\nRUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg go build -ldflags \"-s -w -X ${VERSION_PKG}.Name=kres -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /kres-linux-amd64\n\n# runs gofumpt\nFROM base AS lint-gofumpt\nRUN FILES=\"$(gofumpt -l .)\" && test -z \"${FILES}\" || (echo -e \"Source code is not formatted with 'gofumpt -w .':\\n${FILES}\"; exit 1)\n\n# runs goimports\nFROM base AS lint-goimports\nRUN FILES=\"$(goimports -l -local github.com/talos-systems/kres .)\" && test -z \"${FILES}\" || (echo -e \"Source code is not formatted with 'goimports -w -local github.com/talos-systems/kres .':\\n${FILES}\"; exit 1)\n\n# runs golangci-lint\nFROM base AS lint-golangci-lint\nCOPY .golangci.yml .\nENV GOGC 50\nRUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/root/.cache/golangci-lint --mount=type=cache,target=/go/pkg golangci-lint run --config .golangci.yml\n\n# runs unit-tests with race detector\nFROM base AS unit-tests-race\nARG TESTPKGS\nRUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg --mount=type=cache,target=/tmp CGO_ENABLED=1 go test -v -race -count 1 ${TESTPKGS}\n\n# runs unit-tests\nFROM base AS unit-tests-run\nARG TESTPKGS\nRUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg --mount=type=cache,target=/tmp go test -v -covermode=atomic -coverprofile=coverage.txt -coverpkg=${TESTPKGS} -count 1 ${TESTPKGS}\n\nFROM scratch AS kres-linux-amd64\nCOPY --from=kres-linux-amd64-build /kres-linux-amd64 /kres-linux-amd64\n\nFROM scratch AS unit-tests\nCOPY --from=unit-tests-run /src/coverage.txt /coverage.txt\n\nFROM kres-linux-${TARGETARCH} AS kres\n\nFROM scratch AS image-kres\nARG TARGETARCH\nCOPY --from=kres kres-linux-${TARGETARCH} /kres\nCOPY --from=image-fhs / /\nCOPY --from=image-ca-certificates / /\nLABEL org.opencontainers.image.source https://github.com/siderolabs/kres\nENTRYPOINT [\"/kres\",\"gen\"]\n\n"
}