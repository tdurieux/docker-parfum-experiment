{
  "startTime": 1674251228366,
  "endTime": 1674251230108,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 258,
        "lineEnd": 258,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 259,
        "lineEnd": 259,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 261,
        "lineEnd": 261,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Meta args applied to stage base names.\n\nARG TOOLS\nARG PKGS\n\n# Resolve package images using ${PKGS} to be used later in COPY --from=.\n\nFROM ghcr.io/siderolabs/ca-certificates:${PKGS} AS pkg-ca-certificates\nFROM ghcr.io/siderolabs/fhs:${PKGS} AS pkg-fhs\nFROM ghcr.io/siderolabs/ipmitool:${PKGS} AS pkg-ipmitool\nFROM --platform=amd64 ghcr.io/siderolabs/ipmitool:${PKGS} AS pkg-ipmitool-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/ipmitool:${PKGS} AS pkg-ipmitool-arm64\nFROM ghcr.io/siderolabs/openssl:${PKGS} AS pkg-openssl\nFROM --platform=amd64 ghcr.io/siderolabs/openssl:${PKGS} AS pkg-openssl-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/openssl:${PKGS} AS pkg-openssl-arm64\nFROM --platform=amd64 ghcr.io/siderolabs/linux-firmware:${PKGS} AS pkg-linux-firmware-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/linux-firmware:${PKGS} AS pkg-linux-firmware-arm64\nFROM ghcr.io/siderolabs/musl:${PKGS} AS pkg-musl\nFROM --platform=amd64 ghcr.io/siderolabs/musl:${PKGS} AS pkg-musl-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/musl:${PKGS} AS pkg-musl-arm64\nFROM --platform=amd64 ghcr.io/siderolabs/kernel:${PKGS} AS pkg-kernel-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/kernel:${PKGS} AS pkg-kernel-arm64\nFROM ghcr.io/siderolabs/liblzma:${PKGS} AS pkg-liblzma\nFROM ghcr.io/siderolabs/ipxe:${PKGS} AS pkg-ipxe\nFROM --platform=amd64 ghcr.io/siderolabs/ipxe:${PKGS} AS pkg-ipxe-amd64\nFROM --platform=arm64 ghcr.io/siderolabs/ipxe:${PKGS} AS pkg-ipxe-arm64\n\n# The base target provides the base for running various tasks against the source\n# code\n\nFROM --platform=${BUILDPLATFORM} ${TOOLS} AS base\nSHELL [\"/toolchain/bin/bash\", \"-c\"]\nENV PATH /toolchain/bin:/toolchain/go/bin:/go/bin\nRUN [\"/toolchain/bin/mkdir\", \"/bin\", \"/tmp\"]\nRUN [\"/toolchain/bin/ln\", \"-svf\", \"/toolchain/bin/bash\", \"/bin/sh\"]\nRUN [\"/toolchain/bin/ln\", \"-svf\", \"/toolchain/etc/ssl\", \"/etc/ssl\"]\nENV GO111MODULE on\nENV GOPROXY https://proxy.golang.org\nARG CGO_ENABLED\nENV CGO_ENABLED ${CGO_ENABLED}\nENV GOCACHE /.cache/go-build\nENV GOMODCACHE /.cache/mod\nRUN --mount=type=cache,target=/.cache go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0\nRUN --mount=type=cache,target=/.cache go install k8s.io/code-generator/cmd/conversion-gen@v0.23.1\nRUN --mount=type=cache,target=/.cache go install mvdan.cc/gofumpt/gofumports@v0.1.1\nRUN curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/v1.43.0/install.sh | bash -s -- -b /toolchain/bin v1.43.0\nWORKDIR /src\nCOPY ./go.mod ./\nCOPY ./go.sum ./\nRUN --mount=type=cache,target=/.cache go mod download\nRUN --mount=type=cache,target=/.cache go mod verify\nCOPY ./app/ ./app/\nCOPY ./internal/ ./internal/\nCOPY ./hack/ ./hack/\nRUN --mount=type=cache,target=/.cache go list -mod=readonly all >/dev/null\nRUN --mount=type=cache,target=/.cache ! go mod tidy -v 2>&1 | grep .\n\nFROM base AS manifests-build\nRUN --mount=type=cache,target=/.cache controller-gen \\\n  crd:crdVersions=v1 paths=\"./app/caps-controller-manager/api/...\" output:crd:dir=\"./app/caps-controller-manager/config/crd/bases\" \\\n  rbac:roleName=manager-role paths=\"./app/caps-controller-manager/controllers/...\" output:rbac:dir=\"./app/caps-controller-manager/config/rbac\" \\\n  webhook output:webhook:dir=\"./app/caps-controller-manager/config/webhook\"\nRUN --mount=type=cache,target=/.cache controller-gen \\\n  crd:crdVersions=v1 paths=\"./app/sidero-controller-manager/api/...\" output:crd:dir=\"./app/sidero-controller-manager/config/crd/bases\" \\\n  rbac:roleName=manager-role paths=\"./app/sidero-controller-manager/controllers/...\" output:rbac:dir=\"./app/sidero-controller-manager/config/rbac\" \\\n  webhook output:webhook:dir=\"./app/sidero-controller-manager/config/webhook\"\n\nFROM scratch AS manifests\nCOPY --from=manifests-build /src/app/caps-controller-manager/config ./app/caps-controller-manager/config\nCOPY --from=manifests-build /src/app/sidero-controller-manager/config ./app/sidero-controller-manager/config\n\nFROM base AS generate-build\nCOPY ./app/sidero-controller-manager/internal/api/api.proto \\\n  /src/app/sidero-controller-manager/internal/api/api.proto\nRUN protoc -I/src/app/sidero-controller-manager/internal/api \\\n  --go_out=paths=source_relative:/src/app/sidero-controller-manager/internal/api --go-grpc_out=paths=source_relative:/src/app/sidero-controller-manager/internal/api \\\n  api.proto\nRUN --mount=type=cache,target=/.cache controller-gen object:headerFile=\"./hack/boilerplate.go.txt\" paths=\"./...\"\nRUN --mount=type=cache,target=/.cache conversion-gen --input-dirs=\"./app/caps-controller-manager/api/v1alpha2\" --output-base ./ --output-file-base=\"zz_generated.conversion\" --go-header-file=\"./hack/boilerplate.go.txt\"\nRUN --mount=type=cache,target=/.cache conversion-gen --input-dirs=\"./app/sidero-controller-manager/api/v1alpha1\" --output-base ./ --output-file-base=\"zz_generated.conversion\" --go-header-file=\"./hack/boilerplate.go.txt\"\nARG MODULE\nRUN --mount=type=cache,target=/.cache gofumports -w -local ${MODULE} .\n\nFROM scratch AS generate\nCOPY --from=generate-build /src/app/caps-controller-manager/api ./app/caps-controller-manager/api\nCOPY --from=generate-build /src/app/sidero-controller-manager/api ./app/sidero-controller-manager/api\nCOPY --from=generate-build /src/app/sidero-controller-manager/internal/api ./app/sidero-controller-manager/internal/api\n\nFROM --platform=${BUILDPLATFORM} alpine:3.15.4 AS release-build\nADD https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.1.0/kustomize_v4.1.0_linux_amd64.tar.gz .\nRUN  tar -xf kustomize_v4.1.0_linux_amd64.tar.gz -C /usr/local/bin && rm kustomize_v4.1.0_linux_amd64.tar.gz\nCOPY ./config ./config\nCOPY ./templates ./templates\nCOPY ./app/caps-controller-manager/config ./app/caps-controller-manager/config\nCOPY ./app/sidero-controller-manager/config ./app/sidero-controller-manager/config\nARG REGISTRY_AND_USERNAME\nARG TAG\nRUN cd ./app/caps-controller-manager/config/manager \\\n  && kustomize edit set image controller=${REGISTRY_AND_USERNAME}/caps-controller-manager:${TAG}\nRUN cd ./app/sidero-controller-manager/config/manager \\\n  && kustomize edit set image controller=${REGISTRY_AND_USERNAME}/sidero-controller-manager:${TAG}\nRUN kustomize build config > /infrastructure-components.yaml \\\n  && cp ./config/metadata/metadata.yaml /metadata.yaml \\\n  && cp ./templates/cluster-template.yaml /cluster-template.yaml\n\nFROM scratch AS release\nARG TAG\nCOPY --from=release-build /infrastructure-components.yaml /infrastructure-sidero/${TAG}/infrastructure-components.yaml\nCOPY --from=release-build /metadata.yaml /infrastructure-sidero/${TAG}/metadata.yaml\nCOPY --from=release-build /cluster-template.yaml /infrastructure-sidero/${TAG}/cluster-template.yaml\n\nFROM base AS build-caps-controller-manager\nARG TARGETARCH\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=${TARGETARCH} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /manager ./app/caps-controller-manager\nRUN chmod +x /manager\n\n## TODO(rsmitty): make bmc pkg and move to siderolabs image\nFROM scratch AS caps-controller-manager\nCOPY --from=pkg-ca-certificates / /\nCOPY --from=pkg-fhs / /\nCOPY --from=pkg-musl / /\nCOPY --from=pkg-openssl / /\nCOPY --from=pkg-ipmitool / /\nCOPY --from=build-caps-controller-manager /manager /manager\nLABEL org.opencontainers.image.source https://github.com/siderolabs/sidero\nENTRYPOINT [ \"/manager\" ]\n\nFROM base AS build-sidero-controller-manager\nARG TALOS_RELEASE\nARG TARGETARCH\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=${TARGETARCH} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS} -X main.TalosRelease=${TALOS_RELEASE}\" -o /manager ./app/sidero-controller-manager\nRUN chmod +x /manager\n\nFROM base AS build-siderolink-manager\nARG TALOS_RELEASE\nARG TARGETARCH\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=${TARGETARCH} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS} -X main.TalosRelease=${TALOS_RELEASE}\" -o /siderolink-manager ./app/sidero-controller-manager/cmd/siderolink-manager\nRUN chmod +x /siderolink-manager\n\nFROM base AS build-log-receiver\nARG TALOS_RELEASE\nARG TARGETARCH\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=${TARGETARCH} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS} -X main.TalosRelease=${TALOS_RELEASE}\" -o /log-receiver ./app/sidero-controller-manager/cmd/log-receiver\nRUN chmod +x /log-receiver\n\nFROM base AS build-events-manager\nARG TALOS_RELEASE\nARG TARGETARCH\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=${TARGETARCH} go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS} -X main.TalosRelease=${TALOS_RELEASE}\" -o /events-manager ./app/sidero-controller-manager/cmd/events-manager\nRUN chmod +x /events-manager\n\nFROM base AS agent-build-amd64\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=amd64 go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /agent ./app/sidero-controller-manager/cmd/agent\nRUN chmod +x /agent\n\nFROM base AS agent-build-arm64\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux GOARCH=arm64 go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS}\" -o /agent ./app/sidero-controller-manager/cmd/agent\nRUN chmod +x /agent\n\nFROM base AS initramfs-archive-amd64\nWORKDIR /initramfs\nCOPY --from=pkg-ca-certificates / .\nCOPY --from=pkg-musl-amd64 / .\nCOPY --from=pkg-openssl-amd64 / .\nCOPY --from=pkg-ipmitool-amd64 / .\nCOPY --from=agent-build-amd64 /agent ./init\nCOPY --from=pkg-linux-firmware-amd64 /lib/firmware/bnx2 ./lib/firmware/bnx2\nCOPY --from=pkg-linux-firmware-amd64 /lib/firmware/bnx2x ./lib/firmware/bnx2x\nRUN set -o pipefail && find . 2>/dev/null | cpio -H newc -o | xz -v -C crc32 -0 -e -T 0 -z >/initramfs.xz\n\nFROM base AS initramfs-archive-arm64\nWORKDIR /initramfs\nCOPY --from=pkg-ca-certificates / .\nCOPY --from=pkg-musl-arm64 / .\nCOPY --from=pkg-openssl-arm64 / .\nCOPY --from=pkg-ipmitool-arm64 / .\nCOPY --from=agent-build-arm64 /agent ./init\nCOPY --from=pkg-linux-firmware-arm64 /lib/firmware/bnx2 ./lib/firmware/bnx2\nCOPY --from=pkg-linux-firmware-arm64 /lib/firmware/bnx2x ./lib/firmware/bnx2x\nRUN set -o pipefail && find . 2>/dev/null | cpio -H newc -o | xz -v -C crc32 -0 -e -T 0 -z >/initramfs.xz\n\nFROM scratch AS sidero-controller-manager-image\nCOPY --from=pkg-ca-certificates / /\nCOPY --from=pkg-fhs / /\nCOPY --from=pkg-musl / /\nCOPY --from=pkg-openssl / /\nCOPY --from=pkg-liblzma / /\nCOPY --from=pkg-ipmitool / /\nCOPY --from=pkg-ipxe-amd64 /usr/libexec/ /var/lib/sidero/ipxe/amd64\nCOPY --from=pkg-ipxe-arm64 /usr/libexec/ /var/lib/sidero/ipxe/arm64\nCOPY --from=pkg-ipxe /usr/libexec/zbin /bin/zbin\nCOPY --from=initramfs-archive-amd64 /initramfs.xz /var/lib/sidero/env/agent-amd64/initramfs.xz\nCOPY --from=initramfs-archive-arm64 /initramfs.xz /var/lib/sidero/env/agent-arm64/initramfs.xz\nCOPY --from=pkg-kernel-amd64 /boot/vmlinuz /var/lib/sidero/env/agent-amd64/vmlinuz\nCOPY --from=pkg-kernel-arm64 /boot/vmlinuz /var/lib/sidero/env/agent-arm64/vmlinuz\nCOPY --from=build-sidero-controller-manager /manager /manager\nCOPY --from=build-siderolink-manager /siderolink-manager /siderolink-manager\nCOPY --from=build-log-receiver /log-receiver /log-receiver\nCOPY --from=build-events-manager /events-manager /events-manager\n\nFROM sidero-controller-manager-image AS sidero-controller-manager\nLABEL org.opencontainers.image.source https://github.com/siderolabs/sidero\nENTRYPOINT [ \"/manager\" ]\n\nFROM base AS unit-tests-runner\nARG TEST_PKGS\nRUN --mount=type=cache,target=/.cache --mount=type=cache,id=testspace,target=/tmp --mount=type=cache,target=/root/.cache/go-build go test -v -covermode=atomic -coverprofile=coverage.txt -count 1 ${TEST_PKGS}\n#\nFROM scratch AS unit-tests\nCOPY --from=unit-tests-runner /src/coverage.txt /coverage.txt\n#\n# The unit-tests-race target performs tests with race detector.\n#\nFROM base AS unit-tests-race\nENV CGO_ENABLED 1\nARG TEST_PKGS\nRUN --mount=type=cache,target=/.cache --mount=type=cache,target=/root/.cache/go-build go test -v -count 1 -race ${TEST_PKGS}\n#\n# The lint target performs linting on the source code.\n#\nFROM base AS lint-go\nCOPY .golangci.yml .\nENV GOGC=50\nENV GOLANGCI_LINT_CACHE /.cache/lint\nRUN --mount=type=cache,target=/.cache golangci-lint run --config .golangci.yml\nARG MODULE\nRUN --mount=type=cache,target=/.cache FILES=\"$(gofumports -l -local ${MODULE} .)\" && test -z \"${FILES}\" || (echo -e \"Source code is not formatted with 'gofumports -w -local ${MODULE} .':\\n${FILES}\"; exit 1)\n#\n# The fmt target formats the source code.\n#\nFROM base AS fmt-build\nARG MODULE\nRUN --mount=type=cache,target=/.cache gofumports -w -local ${MODULE} .\n#\nFROM scratch AS fmt\nCOPY --from=fmt-build /src /\n\n#\n# The markdownlint target performs linting on Markdown files.\n#\nFROM node:18.0.0-alpine AS lint-markdown\nRUN apk add --no-cache findutils\nRUN npm i -g markdownlint-cli@0.23.2 && npm cache clean --force;\nRUN npm i -g textlint@11.7.6 && npm cache clean --force;\nRUN npm i -g textlint-filter-rule-comments@1.2.2 && npm cache clean --force;\nRUN npm i -g textlint-rule-one-sentence-per-line@1.0.2 && npm cache clean --force;\nWORKDIR /src\nCOPY . .\nRUN markdownlint \\\n    --ignore '**/LICENCE.md' \\\n    --ignore '**/CHANGELOG.md' \\\n    --ignore '**/CODE_OF_CONDUCT.md' \\\n    --ignore '**/node_modules/**' \\\n    --ignore '**/hack/chglog/**' \\\n    --ignore 'website/themes/**' \\\n    .\nRUN find . \\\n    -name '*.md' \\\n    -not -path './LICENCE.md' \\\n    -not -path './CHANGELOG.md' \\\n    -not -path './CODE_OF_CONDUCT.md' \\\n    -not -path '*/node_modules/*' \\\n    -not -path './hack/chglog/**' \\\n    -not -path './website/themes/**' \\\n    -print0 \\\n    | xargs -0 textlint\n\n#\n# The sfyra-build target builds the Sfyra source.\n#\nFROM base AS sfyra-base\nWORKDIR /src/sfyra\nCOPY ./sfyra/go.mod ./\nCOPY ./sfyra/go.sum ./\nRUN --mount=type=cache,target=/.cache go mod download\nRUN --mount=type=cache,target=/.cache go mod verify\nCOPY ./sfyra/ ./\nRUN --mount=type=cache,target=/.cache go list -mod=readonly all >/dev/null\nRUN --mount=type=cache,target=/.cache ! go mod tidy -v 2>&1 | grep .\n\nFROM sfyra-base AS lint-sfyra\nCOPY .golangci.yml .\nENV GOGC=50\nENV GOLANGCI_LINT_CACHE /.cache/lint\nRUN --mount=type=cache,target=/.cache golangci-lint run --config .golangci.yml\nARG MODULE\nRUN --mount=type=cache,target=/.cache FILES=\"$(gofumports -l -local ${MODULE} .)\" && test -z \"${FILES}\" || (echo -e \"Source code is not formatted with 'gofumports -w -local ${MODULE} .':\\n${FILES}\"; exit 1)\n\nFROM sfyra-base AS sfyra-build\nWORKDIR /src/sfyra/cmd/sfyra\nARG TALOS_RELEASE\nARG DEFAULT_K8S_VERSION\nARG SFYRA_CMD_PKG=github.com/talos-systems/sidero/sfyra/cmd/sfyra/cmd\nARG GO_BUILDFLAGS\nARG GO_LDFLAGS\nRUN --mount=type=cache,target=/.cache GOOS=linux go build ${GO_BUILDFLAGS} -ldflags \"${GO_LDFLAGS} -X ${SFYRA_CMD_PKG}.TalosRelease=${TALOS_RELEASE} -X ${SFYRA_CMD_PKG}.KubernetesVersion=${DEFAULT_K8S_VERSION}\" -o /sfyra\nRUN chmod +x /sfyra\n\nFROM scratch AS sfyra\nCOPY --from=sfyra-build /sfyra /sfyra\n"
}