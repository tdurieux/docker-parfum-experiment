{
  "startTime": 1674252024440,
  "endTime": 1674252025189,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12-alpine as nodebuilder\nLABEL stage=nodebuilder\n# Set the working directory to /app\nWORKDIR /web\n# Copy the current directory contents into the container at /web\nCOPY package.json /web/\nCOPY .npmrc /web/\n\n# Install any needed packages\nRUN npm install && npm cache clean --force;\nCOPY . /web/\n\n# build and remove front source code\nENV NODE_OPTIONS=--max_old_space_size=2048\nRUN npm run build\n\nFROM golang:alpine AS gobuilder\n\nLABEL stage=gobuilder\n\nENV CGO_ENABLED 1\nENV GOOS linux\n\nWORKDIR /server\n\nCOPY server .\nCOPY --from=nodebuilder /web/dist/ /server/api/studio/assets\nRUN go mod download\nRUN apk add --no-cache build-base\nRUN go build -ldflags=\"-s -w\" -o /server/server /server/api/studio/studio.go\n\nFROM alpine\n\nWORKDIR /app\nCOPY --from=gobuilder /server/server /app/server\nCOPY --from=gobuilder /server/api/studio/etc /app/etc/\nRUN sed -i \"s/9000/7001/g\" /app/etc/studio-api.yaml\n\nEXPOSE 7001\n\nCMD [\"./server\"]\n"
}