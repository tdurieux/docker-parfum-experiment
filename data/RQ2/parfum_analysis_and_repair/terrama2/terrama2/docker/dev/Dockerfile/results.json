{
  "startTime": 1674252379981,
  "endTime": 1674252380826,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 61,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 64
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# create terrama2 user\nENV USER=terrama2\nRUN useradd -s /bin/bash -m ${USER}\nRUN echo ${USER}:${USER} | chpasswd\nRUN usermod -aG sudo ${USER}\n\n# install minimal dependencies\nRUN apt-get update && apt-get install -y \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    git \\\n    make \\\n    sudo \\\n    wget \\\n    # add-apt-repository\n    software-properties-common python-software-properties \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# GCC 8\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test && \\\n    apt update && \\\n    apt install --no-install-recommends -y gcc-8 g++-8 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 && \\\n    update-alternatives --install /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-8 100 && \\\n    update-alternatives --install /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-8 100 && \\\n    update-alternatives --install /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 100 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100 && rm -rf /var/lib/apt/lists/*;\n\n# Clang 6\nRUN sh -c 'echo \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main\" > /etc/apt/sources.list.d/llvm.list' && \\\n    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \\\n    apt update && \\\n    apt install --no-install-recommends -y \\\n    clang-6.0 \\\n    clang-format-6.0 \\\n    clang-tidy-6.0 \\\n    clang-tools-6.0 \\\n    lldb-6.0 \\\n    python-clang-6.0 \\\n    python-lldb-6.0 && rm -rf /var/lib/apt/lists/*;\n\nRUN apt install --no-install-recommends -y gdb valgrind cppcheck && rm -rf /var/lib/apt/lists/*;\n\n# Install VSCode\nRUN curl -f https://packages.microsoft.com/keys/microsoft.asc | gpg --batch --dearmor > microsoft.gpg && \\\n    mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \\\n    sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list' && \\\n    apt-get update && \\\n    apt-get install -y code \\\n    libasound2 \\\n    libatk1.0-0 \\\n    libcairo2 \\\n    libcups2 \\\n    libexpat1 \\\n    libfontconfig1 \\\n    libfreetype6 \\\n    libgtk2.0-0 \\\n    libpango-1.0-0 \\\n    libx11-xcb1 \\\n    libxcomposite1 \\\n    libxcursor1 \\\n    libxdamage1 \\\n    libxext6 \\\n    libxfixes3 \\\n    libxi6 \\\n    libxrandr2 \\\n    libxrender1 \\\n    libxss1 \\\n    libxtst6 \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# RUN mkdir -p /opt/qtcreator && \\\n#     cd /opt/qtcreator && \\\n#     apt-get update && apt-get install -y libxcb-keysyms1-dev libxcb-image0-dev \\\n#     libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync0-dev libxcb-xfixes0-dev \\\n#     libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev \\\n#     libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxfixes-dev \\\n#     libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev x11vnc \\\n#     xauth build-essential mesa-common-dev libglu1-mesa-dev libxkbcommon-dev \\\n#     libxcb-xkb-dev libxslt1-dev libgstreamer-plugins-base0.10-dev p7zip-full && \\\n#     wget https://download.qt.io/official_releases/qtcreator/4.6/4.6.1/installer_source/linux_gcc_64_rhel72/qtcreator.7z && \\\n#     7z x qtcreator.7z && \\\n#     cd /usr/local/bin && \\\n#     ln -s /opt/qtcreator/bin/qtcreator\n\nRUN echo \"${USER} ALL=(ALL) NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers && \\\n    echo \"${USER} ALL=(ALL) NOPASSWD: /usr/bin/update-alternatives\" >> /etc/sudoers && \\\n    echo \"${USER} ALL=(ALL) NOPASSWD: /usr/sbin/usermod\" >> /etc/sudoers && \\\n    echo \"${USER} ALL=(ALL) NOPASSWD: /usr/sbin/groupadd\" >> /etc/sudoers\n\n# clean apt\nRUN rm -rf /var/lib/apt/lists/*\n\n#\nRUN wget https://cmake.org/files/v3.11/cmake-3.11.1-Linux-x86_64.sh && \\\n    sh cmake-3.11.1-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir\n\n# change user\nUSER ${USER}\n\n# install vscode extensions !!! AS USER !!!\nRUN code --install-extension ms-vscode.cpptools && \\\n    code --install-extension twxs.cmake && \\\n    code --install-extension vector-of-bool.cmake-tools && \\\n    code --install-extension vadimcn.vscode-lldb && \\\n    code --install-extension bbenoist.doxygen && \\\n    code --install-extension cschlosser.doxdocgen && \\\n    code --install-extension ajshort.include-autocomplete && \\\n    code --install-extension reloadedextensions.reloaded-cpp && \\\n    code --install-extension reloadedextensions.reloaded-themes\n\nENV DEVEL_DIR=/home/${USER}/devel\nENV SCRIPTS_DIR=/home/${USER}/scripts\nENV DEPENDENCIES_DIR=${DEVEL_DIR}/dependencies\n\nENV TERRALIB_DIR=${DEVEL_DIR}/terralib\nENV TERRAMA2_DIR=${DEVEL_DIR}/terrama2\n\nRUN mkdir -p ${SCRIPTS_DIR}\n\n# Create sistem link clang-6.0 -> clang\nADD ./clang_update-alternative.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} && \\\n    ./clang_update-alternative.sh\n\nADD clang-tidy-diff.py ${SCRIPTS_DIR}\nADD pre-commit ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} && \\\n        sed -i \\\n        -e \"s@\\${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" \\\n        pre-commit\n\nADD install-3rdparty-linux-ubuntu-16.04.sh ${SCRIPTS_DIR}\n\nADD prepare_terralib.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} && \\\n        sed -i \\\n        -e \"s@\\${DEPENDENCIES_DIR}@${DEPENDENCIES_DIR}@g\" \\\n        -e \"s@\\${TERRALIB_DIR}@${TERRALIB_DIR}@g\" \\\n        -e \"s@\\${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" \\\n        prepare_terralib.sh\n\nADD prepare_terrama2.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} && \\\n        sed -i \\\n        -e \"s@\\${DEPENDENCIES_DIR}@${DEPENDENCIES_DIR}@g\" \\\n        -e \"s@\\${TERRALIB_DIR}@${TERRALIB_DIR}@g\" \\\n        -e \"s@\\${TERRAMA2_DIR}@${TERRAMA2_DIR}@g\" \\\n        -e \"s@\\${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" \\\n        prepare_terrama2.sh\n\nWORKDIR /home/${USER}\n\nADD config_permission.sh .\nCMD /home/terrama2/config_permission.sh; sleep infinity\n\n"
}