{
  "startTime": 1674255101307,
  "endTime": 1674255102197,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Arguments\nARG NODE_ENV=production\nARG PORT=3000\n\n\n# STAGE-1\n# Install Node.js docker container\nFROM node:alpine as builder\n\n# Requirements\nRUN apk add --no-cache yarn python make g++\n\n# Install app dependencies\n# ensure both package.json AND yarn.lock are copied\nADD ./package.json ./yarn.lock ./\n\nRUN yarn install --frozen-lockfile --non-interactive && yarn cache clean;\n\n\n# STAGE-2\n# Install Node.js docker container\nFROM node:alpine\n\n# Requirements\nRUN apk add --no-cache yarn\n\n# Environment variables\nENV NODE_ENV=${NODE_ENV}\nENV PORT=${PORT}\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Transfer app dependencies\nCOPY --from=builder ./node_modules ./node_modules\n\n# Bundle app source\nCOPY ./ ./\n\nEXPOSE ${PORT}\n\nCMD [\"yarn\", \"start\"]\n"
}