{
  "startTime": 1674248495791,
  "endTime": 1674248497260,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 114
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 114
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\nLABEL org.opencontainers.image.source https://github.com/flyteorg/flytesnacks\n\nWORKDIR /root\nENV VENV /opt/venv\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\nENV PYTHONPATH /root\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install Python3 and other basics\nRUN apt-get update && apt-get install --no-install-recommends -y python3.8 python3.8-venv make build-essential libssl-dev python3-pip curl && rm -rf /var/lib/apt/lists/*;\n\n# Install AWS CLI to run on AWS (for GCS install GSutil). This will be removed\n# in future versions to make it completely portable\nRUN pip3 install --no-cache-dir awscli\n\nWORKDIR /opt\nRUN curl -f https://sdk.cloud.google.com > install.sh\nRUN bash /opt/install.sh --install-dir=/opt\nENV PATH $PATH:/opt/google-cloud-sdk/bin\nWORKDIR /root\n\nENV VENV /opt/venv\n# Virtual environment\nRUN python3 -m venv ${VENV}\nENV PATH=\"${VENV}/bin:$PATH\"\n\nRUN pip3 install --no-cache-dir wheel\n\n# Install Python dependencies\nCOPY k8s_spark/requirements.txt /root\nRUN pip install --no-cache-dir -r /root/requirements.txt\n\nRUN flytekit_install_spark3.sh\n\n# Adding Tini support for the spark pods\nRUN wget  https://github.com/krallin/tini/releases/download/v0.18.0/tini && \\\n    cp tini /sbin/tini && cp tini /usr/bin/tini && \\\n    chmod a+x /sbin/tini && chmod a+x /usr/bin/tini\n\n# Setup Spark environment\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV SPARK_HOME /opt/spark\nENV SPARK_VERSION 3.2.1\nENV PYSPARK_PYTHON ${VENV}/bin/python3\nENV PYSPARK_DRIVER_PYTHON ${VENV}/bin/python3\n\n# Copy the makefile targets to expose on the container. This makes it easier to register.\n# Delete this after we update CI\nCOPY in_container.mk /root/Makefile\n\n# Delete this after we update CI to not serialize inside the container\nCOPY k8s_spark/sandbox.config /root\n\n# Copy the actual code\nCOPY k8s_spark/ /root/k8s_spark\n\n# This tag is supplied by the build script and will be used to determine the version\n# when registering tasks, workflows, and launch plans\nARG tag\nENV FLYTE_INTERNAL_IMAGE $tag\n\n# Copy over the helper script that the SDK relies on\nRUN cp ${VENV}/bin/flytekit_venv /usr/local/bin/\nRUN chmod a+x /usr/local/bin/flytekit_venv\n\n# For spark we want to use the default entrypoint which is part of the\n# distribution, also enable the virtualenv for this image.\nENTRYPOINT [\"/opt/entrypoint.sh\"]\n"
}