diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/lyft/flytesnacks/cookbook/case_studies/ml_training/spark_horovod/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/lyft/flytesnacks/cookbook/case_studies/ml_training/spark_horovod/Dockerfile/repaired.Dockerfile
index 6b76490..79d22c2 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/lyft/flytesnacks/cookbook/case_studies/ml_training/spark_horovod/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/lyft/flytesnacks/cookbook/case_studies/ml_training/spark_horovod/Dockerfile/repaired.Dockerfile
@@ -10,9 +10,9 @@ ENV DEBIAN_FRONTEND=noninteractive
 
 # Install Python3 and other basics
 RUN apt-get update \
-    && apt-get install -y software-properties-common \
+    && apt-get install --no-install-recommends -y software-properties-common \
     && add-apt-repository ppa:ubuntu-toolchain-r/test \
-    && apt-get install -y \
+    && apt-get install --no-install-recommends -y \
     build-essential \
     cmake \
     g++-7 \
@@ -26,7 +26,7 @@ RUN apt-get update \
     libssl-dev \
     python3-pip \
     python3-wheel \
-    libuv1
+    libuv1 && rm -rf /var/lib/apt/lists/*;
 
 ENV VENV /opt/venv
 # Virtual environment
@@ -35,16 +35,16 @@ ENV PATH="${VENV}/bin:$PATH"
 
 # Install AWS CLI to run on AWS (for GCS install GSutil). This will be removed
 # in future versions to make it completely portable
-RUN pip3 install awscli
+RUN pip3 install --no-cache-dir awscli
 
 WORKDIR /opt
-RUN curl https://sdk.cloud.google.com > install.sh
+RUN curl -f https://sdk.cloud.google.com > install.sh
 RUN bash /opt/install.sh --install-dir=/opt
 ENV PATH $PATH:/opt/google-cloud-sdk/bin
 WORKDIR /root
 
 # Install wheel after venv is activated
-RUN pip3 install wheel
+RUN pip3 install --no-cache-dir wheel
 
 # MPI
 # Install Open MPI
@@ -53,15 +53,15 @@ RUN mkdir /tmp/openmpi && \
     wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \
     tar zxf openmpi-4.0.0.tar.gz && \
     cd openmpi-4.0.0 && \
-    ./configure --enable-orterun-prefix-by-default && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-orterun-prefix-by-default && \
     make -j $(nproc) all && \
     make install && \
     ldconfig && \
-    rm -rf /tmp/openmpi
+    rm -rf /tmp/openmpi && rm openmpi-4.0.0.tar.gz
 
 # Install OpenSSH for MPI to communicate between containers
 RUN apt-get install -y --no-install-recommends openssh-client openssh-server && \
-    mkdir -p /var/run/sshd
+    mkdir -p /var/run/sshd && rm -rf /var/lib/apt/lists/*;
 
 # Allow OpenSSH to talk to containers without asking for confirmation
 # by disabling StrictHostKeyChecking.
@@ -73,7 +73,7 @@ RUN sed -i 's/[ #]\(.*StrictHostKeyChecking \).*/ \1no/g' /etc/ssh/ssh_config &&
     sed -i 's/#\(StrictModes \).*/\1no/g' /etc/ssh/sshd_config
 
 # Horovod-related installations
-RUN pip install tensorflow==2.9.1
+RUN pip install --no-cache-dir tensorflow==2.9.1
 # Enable GPU
 # ENV HOROVOD_GPU_OPERATIONS NCCL
 RUN HOROVOD_WITH_MPI=1 HOROVOD_WITH_TENSORFLOW=1 pip install --no-cache-dir horovod[spark,tensorflow]==0.24.3
@@ -84,7 +84,7 @@ RUN HOROVOD_WITH_MPI=1 HOROVOD_WITH_TENSORFLOW=1 pip install --no-cache-dir horo
 
 # Install Python dependencies
 COPY spark_horovod/requirements.txt /root
-RUN pip install -r /root/requirements.txt
+RUN pip install --no-cache-dir -r /root/requirements.txt
 
 # SPARK
 RUN flytekit_install_spark3.sh