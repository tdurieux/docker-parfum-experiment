{
  "startTime": 1674248768416,
  "endTime": 1674248769528,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 7,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 194
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 7,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 73,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PHP_VERSION\n\nFROM php:${PHP_VERSION}-fpm\n\nARG DEFAULT_TIMEZONE\nARG PHP_MEMORY_LIMIT\nARG PHP_MAX_EXECUTION_TIME\nARG PHP_UPLOAD_MAX_FILESIZE\n\nARG NODE_JS_VERSION\n\nARG USER_ID\nARG GROUP_ID\n\nARG XDEBUG_CLIENT_PORT\nARG XDEBUG_START_WITH_REQUEST\nARG XDEBUG_REMOTE_HOST\nARG XDEBUG_REMOTE_CONNECT_BACK\nARG XDEBUG_FILE_LINK_FORMAT\nARG XDEBUG_IDE_KEY\n\nARG COMPOSER_VERSION\n\nARG WKHTMLTOPDF_VERSION\n\nMAINTAINER Vasilij Dusko <support@d4d.lt>\n\nRUN __SYMFONY_CLI__\n    apt-get update && \\\n    apt-get install --no-install-recommends --no-install-suggests -y \\\n    __PACKAGE_LIST__ \\\n    __CLEANUP__\n\n# Install PHP extensions. Type docker-php-ext-install to see available extensions\nRUN docker-php-ext-configure zip --with-libzip && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ && docker-php-ext-configure intl && docker-php-ext-configure imap --with-kerberos --with-imap-ssl && docker-php-ext-install -j$(nproc) __PHP_EXT_INSTALL__ \\\n    && pecl install __PECL_INSTALL__ && docker-php-ext-enable __PHP_EXT_ENABLE__ \\\n    && ln -snf /usr/share/zoneinfo/${DEFAULT_TIMEZONE} /etc/localtime && echo ${DEFAULT_TIMEZONE} > /etc/timezone \\\n    && printf '[PHP]\\ndate.timezone = \"%s\"\\n' ${DEFAULT_TIMEZONE} > $PHP_INI_DIR/conf.d/tzone.ini \\\n    && printf '[CUSTOM]\\nmemory_limit = \"%s\"\\n' ${PHP_MEMORY_LIMIT} >> $PHP_INI_DIR/conf.d/custom.ini \\\n    && printf '\\npost_max_size = %s\\n' ${PHP_UPLOAD_MAX_FILESIZE} >> $PHP_INI_DIR/conf.d/custom.ini \\\n    && printf '\\nupload_max_filesize = %s\\n' ${PHP_UPLOAD_MAX_FILESIZE} >> $PHP_INI_DIR/conf.d/custom.ini \\\n    && printf '\\nmax_execution_time = %s\\n' ${PHP_MAX_EXECUTION_TIME} >> $PHP_INI_DIR/conf.d/custom.ini \\\n    && printf '\\nxdebug.file_link_format = \"%s\"\\n' ${XDEBUG_FILE_LINK_FORMAT} >> $PHP_INI_DIR/conf.d/custom.ini \\\n    && printf '\\nxdebug.idekey = \"%s\"\\n' ${XDEBUG_IDE_KEY} >> $PHP_INI_DIR/conf.d/custom.ini \\\n    && echo 'extension=apc.so' >> $PHP_INI_DIR/conf.d/docker-php-ext-apcu.ini \\\n    __IMAGICK__ \\\n    __RABBIT_MQ__ \\\n    __MONGODB__ \\\n    # Install composer\n    && php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\\n    && php composer-setup.php --version=${COMPOSER_VERSION} \\\n    && php -r \"unlink('composer-setup.php');\" \\\n    && mv composer.phar /usr/local/bin/composer \\\n    && mkdir -p /var/www/.composer \\\n    && printf '{\\n  \"config\": {\\n    \"cache-dir\": \"/var/www/.composer/cache\"\\n  }\\n}' >> /var/www/.composer/config.json \\\n    && chown -R ${USER_ID}:${GROUP_ID} /var/www/.composer \\\n    && chown ${USER_ID}:${GROUP_ID} /var/www \\\n    # npm & node\n    && mkdir -p /var/www/.npm \\\n    && mkdir -p /var/www/html \\\n    && printf '{\"name\": \"d4d\", \"version\": \"1.0.0\"}' > /var/www/html/package.json \\\n    && chown -R ${USER_ID}:${GROUP_ID} /var/www/.npm \\\n    && chown -R ${USER_ID}:${GROUP_ID} /var/www/html \\\n    && printf 'Package: *\\nPin: origin deb.nodesource.com\\nPin-Priority: 600' > /etc/apt/preferences.d/nodejs \\\n    && curl -f -sL https://deb.nodesource.com/setup_${NODE_JS_VERSION} | bash \\\n    && apt-get install --no-install-recommends -y nodejs \\\n    && npm install --location=global __NPM_INSTALL_GLOBAL__ \\\n    # Yarn package manager\n    # bugfix: remove cmdtest to install yarn correctly.\n    __YARN__ \\\n    # Install wkhtmltopdf\n    __WKHTMLTOPDF__ \\\n    __PHP_IONCUBE__ \\\n    __BLACKFIRE__ \\\n    && curl -f -L __CURL_INSECURE__ https://cs.symfony.com/download/php-cs-fixer-v3.phar -o /usr/bin/php-cs-fixer && chmod a+x /usr/bin/php-cs-fixer \\\n    && curl -f -L __CURL_INSECURE__ https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.3/local-php-security-checker_2.0.3_linux_amd64 -o /usr/bin/local-php-security-checker && chmod a+x /usr/bin/local-php-security-checker \\\n    && curl -f -L __CURL_INSECURE__ https://github.com/phpstan/phpstan/raw/1.7.15/phpstan.phar -o /usr/local/bin/phpstan && chmod a+x /usr/local/bin/phpstan \\\n    && curl -f -L __CURL_INSECURE__ https://deployer.org/deployer.phar -o /usr/local/bin/dep && chmod a+x /usr/local/bin/dep \\\n\n    && apt-get remove --purge -y gnupg1 \\\n    && apt-get -y --purge autoremove \\\n    __CLEANUP__ && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Copy xdebug and php config.\nCOPY conf.d/* /usr/local/etc/php/conf.d/\n\n# Map user id from host user when it's provided\nRUN if [ ! -z ${USER_ID} ] && [ ${USER_ID} -ne 0 ]; then usermod -u ${USER_ID} www-data; fi \\\n    && if [ ! -z ${GROUP_ID} ] && [ ${GROUP_ID} -ne 0 ]; then groupmod -g ${GROUP_ID} www-data; fi\n\n# set default user and working directory\nUSER ${USER_ID}\nWORKDIR /var/www/project\n"
}