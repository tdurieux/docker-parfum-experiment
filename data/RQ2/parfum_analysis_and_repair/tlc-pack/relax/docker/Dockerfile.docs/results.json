{
  "startTime": 1674250416241,
  "endTime": 1674250416799,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 82
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nFROM ubuntu:18.04\n\n# Base scripts\nRUN apt-get update --fix-missing\n\nCOPY install/ubuntu_install_core.sh /install/ubuntu_install_core.sh\nRUN bash /install/ubuntu_install_core.sh\n\nCOPY install/ubuntu1804_install_python.sh /install/ubuntu1804_install_python.sh\nRUN bash /install/ubuntu1804_install_python.sh\n\n# Globally disable pip cache\nRUN pip config set global.no-cache-dir false\n\nCOPY install/ubuntu_install_python_package.sh /install/ubuntu_install_python_package.sh\nRUN bash /install/ubuntu_install_python_package.sh\n\nCOPY install/ubuntu_install_sphinx.sh /install/ubuntu_install_sphinx.sh\nRUN bash /install/ubuntu_install_sphinx.sh\n\n# Enable doxygen for c++ doc build\nRUN apt-get update && apt-get install --no-install-recommends -y doxygen libprotobuf-dev protobuf-compiler && rm -rf /var/lib/apt/lists/*;\n\nCOPY install/ubuntu_install_java.sh /install/ubuntu_install_java.sh\nRUN bash /install/ubuntu_install_java.sh\n\nCOPY install/ubuntu_install_nodejs.sh /install/ubuntu_install_nodejs.sh\nRUN bash /install/ubuntu_install_nodejs.sh\n\n# Rust env (build early; takes a while)\nCOPY install/ubuntu_install_rust.sh /install/ubuntu_install_rust.sh\nRUN bash /install/ubuntu_install_rust.sh\nENV RUSTUP_HOME /opt/rust\nENV CARGO_HOME /opt/rust\nENV PATH $PATH:$CARGO_HOME/bin\n\n# sccache\nCOPY install/ubuntu_install_sccache.sh /install/ubuntu_install_sccache.sh\nRUN bash /install/ubuntu_install_sccache.sh\n\nRUN rm -rf /opt/rust \\\n    /usr/lib/x86_64-linux-gnu/libopenblas* \\\n    /usr/lib/jvm/java-11* \\\n    /usr/lib/x86_64-linux-gnu/libLLVM-6.0.so.1\n\n# Environment variables\nENV PATH=/usr/local/nvidia/bin:${PATH}\nENV PATH=/usr/local/cuda/bin:${PATH}\nENV CPLUS_INCLUDE_PATH=/usr/local/cuda/include:${CPLUS_INCLUDE_PATH}\nENV C_INCLUDE_PATH=/usr/local/cuda/include:${C_INCLUDE_PATH}\nENV LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/compat:${LIBRARY_PATH}\nENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/compat:${LD_LIBRARY_PATH}\n\n# Ensure the local libcuda have higher priority than the /usr/local/cuda/compact\n# since the compact libcuda does not work on non-Tesla gpus\nENV LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:${LD_LIBRARY_PATH}\n\nENV LD_LIBRARY_PATH=/opt/rocm/lib:${LD_LIBRARY_PATH}\nENV PATH=/node_modules/.bin:${PATH}\nENV VULKAN_SDK=/usr\n"
}