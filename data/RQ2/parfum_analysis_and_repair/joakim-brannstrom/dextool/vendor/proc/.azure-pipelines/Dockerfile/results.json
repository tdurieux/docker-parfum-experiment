{
  "startTime": 1674254691155,
  "endTime": 1674254692187,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedDockerfile": "# ubuntu_bionic_base\nFROM ubuntu:bionic\n\n# Dependencies:\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install \\\n        ca-certificates \\\n        git \\\n        gcc g++ \\\n        make && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get -y --no-install-recommends install \\\n        curl \\\n        xz-utils \\\n        gnupg && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt\n\n# dmd_latest_version\nARG DMD_VERSION\nRUN echo ${DMD_VERSION}\n\n# setup\nENV DC \"dmd\"\nENV DLANG \"./dlang.sh\"\n\nRUN curl -f -S https://dlang.org/install.sh --output ${DLANG}\nRUN bash ${DLANG} install dmd-${DMD_VERSION}\nRUN echo \"#!/bin/bash\\nsource $(bash ${DLANG} -a)\\nbash -c \\\"\\${@}\\\"\" > /root/myshell.sh\nRUN chmod 755 /root/myshell.sh\nSHELL [\"/root/myshell.sh\"]\nRUN dmd --version && dub --version\n\n# fix_repo\nCOPY repo.tar.gz /opt\nRUN mkdir repo\nRUN tar xfz repo.tar.gz -C repo && rm repo.tar.gz\n\n# build_with_dub\nRUN cd repo && dub test\n# unable to run integration tests because some requires ssh\n#RUN cd repo && dub run -c integration_test\n"
}