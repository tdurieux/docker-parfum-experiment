{
  "startTime": 1674249249091,
  "endTime": 1674249249780,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Hack to be able to use an arg as a COPY --from\n# https://stackoverflow.com/a/63472135\nARG DOCKER_IMAGE_PREFIX=registry.gitlab.com/isard/isardvdi/\nARG DOCKER_IMAGE_TAG\nFROM ${DOCKER_IMAGE_PREFIX}rdpgw:$DOCKER_IMAGE_TAG as rdpgw\n\nFROM alpine:3.14.0 as production\nMAINTAINER isard <info@isardvdi.com>\n\nRUN apk add --no-cache --update wireguard-tools openssh python3\nRUN rm -rf /etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_dsa_key\n\n## From isard-api\nRUN apk add --no-cache python3 py3-pip\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN apk add --no-cache --virtual .build_deps \\\n    build-base \\\n    python3-dev \\\n    libffi-dev \\\n    openssl-dev \\ \n    autoconf \\\n    automake \\\n    libtool \\\n    libmnl-dev \\\n    libnftnl-dev \\\n    git\n\n# python-iptables\n# Avoid temporary build errors of iptables master branch by setting iptables version.\nRUN git clone -b v1.8.7 git://git.netfilter.org/iptables\nWORKDIR /iptables\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/tmp/iptables\nRUN make\nRUN make install\nWORKDIR /\nRUN rm -rf iptables\n\nENV IPTABLES_LIBDIR=/tmp/iptables/lib\nENV XTABLES_LIBDIR=/tmp/iptables/lib/xtables\n\n# python requirements\nCOPY docker/vpn/requirements.pip3 /requirements.pip3\nRUN pip3 install --no-cache-dir -r requirements.pip3\nRUN apk del .build_deps\n\nRUN echo \"@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories\nRUN echo \"@edge http://dl-cdn.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories\nRUN apk add --no-cache libwebsockets@edge guacamole-server@testing guacamole-server-dev@testing freerdp freerdp-plugins\n\nRUN apk add --no-cache openvswitch\nRUN /usr/bin/ovsdb-tool create /etc/openvswitch/conf.db\nRUN mkdir -pv /var/run/openvswitch/\nCOPY docker/vpn/ovs /ovs\n\nRUN apk add --no-cache dnsmasq\nCOPY docker/vpn/dnsmasq-hook /dnsmasq-hook\nCOPY docker/vpn/src /src\nCOPY docker/vpn/run.sh /\n# COPY docker/vpn/networking.py /\n\nCOPY --from=rdpgw /rdpgw /rdpgw\n\nCMD [ \"sh\", \"run.sh\"]\n\n"
}