{
  "startTime": 1674252388410,
  "endTime": 1674252389649,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 6,
        "columnEnd": 66
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 29,
        "lineEnd": 33,
        "columnStart": 6,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Self-contained Ruby builder image.\n#\n# You can use this image to produce an application image providing the source\n# code:\n#\n# $ docker run -v $(pwd):/tmp/src openshift/centos-ruby-selfcontained\n# <your application is being build>\n#\n# $ docker commit <id> your_application\n#\n# Then you can start your application using:\n#\n# $ docker run -p :9292 your_application\n#\n#\n# This image provides a base for running Ruby based applications. It provides\n# just base Ruby installation using SCL and Ruby application server.\n#\n# If you want to use Bundler with C-extensioned gems or MySQL/PostGresql, you\n# can use 'centos-ruby-extended' image instead.\n#\n\nFROM       centos\nMAINTAINER Michal Fojtik <mfojtik@redhat.com>\n\n# Pull in important updates and then install ruby193 SCL\n#\nRUN yum update --assumeyes --skip-broken && \\\n      yum install --assumeyes centos-release-SCL gettext tar which && \\\n      yum install --assumeyes ruby193 ruby193-ruby-devel \\\n      gcc-c++ automake autoconf curl-devel openssl-devel \\\n      zlib-devel libxslt-devel libxml2-devel \\\n      mysql-libs mysql-devel postgresql-devel sqlite-devel \\\n      nodejs010-nodejs && \\\n      yum clean all && rm -rf /var/cache/yum\n\n# Create 'ruby' account we will use to run Ruby application\n#\nRUN mkdir -p /opt/ruby/{gems,run,src,bin} && \\\n      groupadd -r ruby -f -g 433 && \\\n      useradd -u 431 -r -g ruby -d /opt/ruby -s /sbin/nologin -c \"Ruby application\" ruby\n\nADD ./bin /opt/ruby/bin/\nADD ./etc /opt/ruby/etc/\n\n# FIXME: The STI require all scripts in /usr/bin path, this layer is here to\n#        maintain backward compatibility\n#\nRUN cp -f /opt/ruby/bin/prepare /usr/bin/prepare && \\\n    cp -f /opt/ruby/bin/run /usr/bin/run\n\nRUN chown -R ruby:ruby /opt/ruby\n\n# Set the 'root' directory where this build will search for Gemfile and\n# config.ru.\n#\n# This can be overridden inside another Dockerfile that uses this image as a base\n# image or in STI via the '-e \"APP_ROOT=subdir\"' option.\n#\n# Use this in case when your application is contained in a subfolder of your\n# GIT repository. The default value is the root folder.\n#\nENV APP_ROOT .\nENV HOME     /opt/ruby\nENV PATH     $HOME/bin:$PATH\n\n# The initial 'start' command will trigger an application build when it runs in\n# 'self-contained' builder context. After application is built, then this\n# command is replaced in final application image by the 'run' command.\n#\nRUN chown -R ruby:ruby /opt/ruby/bin\n\nUSER ruby\nENTRYPOINT [\"/opt/ruby/bin/start\"]\n"
}