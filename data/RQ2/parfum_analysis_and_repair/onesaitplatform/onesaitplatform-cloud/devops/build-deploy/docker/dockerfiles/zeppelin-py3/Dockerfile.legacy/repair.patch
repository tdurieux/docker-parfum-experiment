diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/onesaitplatform/onesaitplatform-cloud/devops/build-deploy/docker/dockerfiles/zeppelin-py3/Dockerfile.legacy b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/onesaitplatform/onesaitplatform-cloud/devops/build-deploy/docker/dockerfiles/zeppelin-py3/Dockerfile.legacy/repaired.Dockerfile
index 09b670c..42c6c66 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/onesaitplatform/onesaitplatform-cloud/devops/build-deploy/docker/dockerfiles/zeppelin-py3/Dockerfile.legacy
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/onesaitplatform/onesaitplatform-cloud/devops/build-deploy/docker/dockerfiles/zeppelin-py3/Dockerfile.legacy/repaired.Dockerfile
@@ -25,61 +25,61 @@ ENV LOG_TAG="[ZEPPELIN_${Z_VERSION}]:" \
 
 RUN echo "$LOG_TAG update and install basic packages" && \
     apt-get -y update && \
-    apt-get install -y locales && \
+    apt-get install --no-install-recommends -y locales && \
     locale-gen $LANG && \
-    apt-get install -y software-properties-common && \
+    apt-get install --no-install-recommends -y software-properties-common && \
     apt -y autoclean && \
     apt -y dist-upgrade && \
-    apt-get install -y build-essential
+    apt-get install --no-install-recommends -y build-essential && rm -rf /var/lib/apt/lists/*;
 
 RUN echo "$LOG_TAG install tini related packages" && \
-    apt-get install -y wget curl grep sed dpkg && \
-    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
-    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
+    apt-get install --no-install-recommends -y wget curl grep sed dpkg && \
+    TINI_VERSION=$( curl -f https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:') && \
+    curl -f -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
     dpkg -i tini.deb && \
-    rm tini.deb
-    
+    rm tini.deb && rm -rf /var/lib/apt/lists/*;
+
 ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
 RUN echo "$LOG_TAG Install java8" && \
     apt-get -y update && \
-    apt-get install -y openjdk-8-jdk && \
+    apt-get install --no-install-recommends -y openjdk-8-jdk && \
     rm -rf /var/lib/apt/lists/*
-    
+
 # should install conda first before numpy, matploylib since pip and python will be installed by conda
 RUN echo "$LOG_TAG Install miniconda2 related packages" && \
     apt-get -y update && \
-    apt-get install -y bzip2 ca-certificates \
+    apt-get install --no-install-recommends -y bzip2 ca-certificates \
     libglib2.0-0 libxext6 libsm6 libxrender1 \
     git mercurial subversion && \
     echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \
     wget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.3.11-Linux-x86_64.sh -O ~/miniconda.sh && \
     /bin/bash ~/miniconda.sh -b -p /opt/conda && \
-    rm ~/miniconda.sh
+    rm ~/miniconda.sh && rm -rf /var/lib/apt/lists/*;
 ENV PATH /opt/conda/bin:$PATH
 
 RUN echo "$LOG_TAG Install python related packages" && \
     apt-get -y update && \
-    apt-get install -y python-dev python-pip && \
-    apt-get install -y gfortran && \
+    apt-get install --no-install-recommends -y python-dev python-pip && \
+    apt-get install --no-install-recommends -y gfortran && \
     # numerical/algebra packages
-    apt-get install -y libblas-dev libatlas-dev liblapack-dev && \
+    apt-get install --no-install-recommends -y libblas-dev libatlas-dev liblapack-dev && \
     # font, image for matplotlib
-    apt-get install -y libpng-dev libfreetype6-dev libxft-dev && \
+    apt-get install --no-install-recommends -y libpng-dev libfreetype6-dev libxft-dev && \
     # for tkinter
-    apt-get install -y python-tk libxml2-dev libxslt-dev zlib1g-dev && \
-    pip install numpy && \
-    pip install matplotlib    
-    
+    apt-get install --no-install-recommends -y python-tk libxml2-dev libxslt-dev zlib1g-dev && \
+    pip install --no-cache-dir numpy && \
+    pip install --no-cache-dir matplotlib && rm -rf /var/lib/apt/lists/*;
+
 # Install Python packages
 RUN echo "$LOG_TAG Install Python packages" && \
-	apt-get -y install python3-pip && \
+	apt-get -y --no-install-recommends install python3-pip && \
 	python3 -m pip install pandas && \
 	python3 -m pip install scipy && \
 	python3 -m pip install sklearn && \
 	python3 -m pip install matplotlib && \
-	apt-get install python3-tk && \
-	python3 -m pip install xgboost 
-	    
+	apt-get install -y --no-install-recommends python3-tk && \
+	python3 -m pip install xgboost && rm -rf /var/lib/apt/lists/*;
+
 # Create the notebook user and group
 RUN groupadd -r notebook -g 433 && useradd -u 431 -r -g notebook -d /opt/notebook -s /sbin/nologin -c "Notebook user" notebook
 
@@ -94,16 +94,16 @@ RUN echo "$LOG_TAG Download Zeppelin binary" && \
     mv /zeppelin-${Z_VERSION} ${Z_HOME} && \
     chmod -R 777 ${Z_HOME} && \
     chown -R notebook:notebook ${Z_HOME}
-    
+
 RUN echo "$LOG_TAG Cleanup" && \
     apt-get autoclean && \
-    apt-get clean    
+    apt-get clean   
 
 USER notebook
 
 COPY shiro.ini ${Z_HOME}/conf/
 COPY zeppelin-site.xml ${Z_HOME}/conf/
-COPY *.jar ${Z_HOME}/interpreter/onesaitplatform/  
+COPY *.jar ${Z_HOME}/interpreter/onesaitplatform/ 
 COPY zeppelin.sh ${Z_HOME}/bin/
 
 EXPOSE 8080