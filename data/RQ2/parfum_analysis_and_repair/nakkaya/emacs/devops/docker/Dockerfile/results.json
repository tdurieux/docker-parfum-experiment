{
  "startTime": 1674251394236,
  "endTime": 1674251396004,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 17,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 20,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 173,
        "lineEnd": 173,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 19,
        "columnEnd": 122
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 16,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "ARG BASE_IMAGE=ghcr.io/nakkaya/emacsd-cpu\nFROM $BASE_IMAGE as build\n\nENV USER=\"core\" \\\n    UID=1000 \\\n    TZ=UTC\n\nUSER root\n\n# Install Packages\n#\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install curl -y --no-install-recommends && \\\n    curl -f -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install \\\n\n    gnupg software-properties-common \\\n\n    openssh-server sudo iputils-ping bash-completion \\\n    unzip wget htop xz-utils nq \\\n    graphviz postgresql-client python3-psycopg2 qutebrowser \\\n    offlineimap dovecot-imapd dnsutils nano iproute2 \\\n    direnv \\\n\n    rsync rclone git git-annex git-annex-remote-rclone \\\n    apt-transport-https apache2-utils \\\n\n    openjdk-11-jdk maven \\\n\n    build-essential gcc-10 g++-10 clang clangd cmake cppcheck valgrind \\\n\n    texlive-latex-base texlive-xetex texlive-lang-english \\\n    texlive-lang-european texlive-plain-generic texlive-fonts-recommended \\\n    pandoc latexmk \\\n\n    libpng-dev zlib1g-dev libpoppler-glib-dev \\\n    libpoppler-private-dev imagemagick \\\n\n    libgl1 libglib2.0-0 \\\n\n    autoconf automake libtool \\\n\n\n    -y --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends ispell -y && rm -rf /var/lib/apt/lists/*;\n\n# Node\n#\nRUN apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Install Terraform\n#\nRUN ARCH=\"$(dpkg --print-architecture)\"; \\\n    TERRAFORM_VERSION=0.14.11; \\\n    TERRAFORM_LS_VERSION=0.22.0; \\\n    TERRAFORM_DIST=\"terraform_${TERRAFORM_VERSION}_linux_${ARCH}.zip\"; \\\n    TERRAFORM_LS_DIST=\"terraform-ls_${TERRAFORM_LS_VERSION}_linux_${ARCH}.zip\"; \\\n    echo $TERRAFORM_DIST && \\\n    echo $TERRAFORM_LS_DIST && \\\n    wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/${TERRAFORM_DIST} && \\\n    wget -q https://releases.hashicorp.com/terraform-ls/${TERRAFORM_LS_VERSION}/${TERRAFORM_LS_DIST} && \\\n    unzip ${TERRAFORM_DIST} -d /usr/bin && \\\n    rm -rf ${TERRAFORM_DIST} && \\\n    unzip ${TERRAFORM_LS_DIST} -d /usr/bin && \\\n    rm -rf ${TERRAFORM_LS_DIST}\n\n# Install Docker CLI\n#\nRUN ARCH=\"$(dpkg --print-architecture)\"; \\\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\\n    gpg --batch --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \\\n    echo \\\n    \"deb [arch=${ARCH} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n    $(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \\\n    apt-get update && \\\n    apt-get install docker-ce-cli -y --no-install-recommends && \\\n    pip install --no-cache-dir docker-compose && \\\n    touch /var/run/docker.sock && \\\n    groupadd docker && \\\n    chown root:docker /var/run/docker.sock && \\\n    usermod -a -G docker $USER && rm -rf /var/lib/apt/lists/*;\n\n# Install Syncthing\n#\nRUN wget -q https://syncthing.net/release-key.txt -O- | apt-key add - && \\\n    add-apt-repository \"deb https://apt.syncthing.net/ syncthing stable\" && \\\n    apt-get update && \\\n    apt-get install syncthing -y --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# Configure Python\n#\n\nRUN pip install --no-cache-dir \\\n    markupsafe==2.0.1 \\\n    invoke \\\n    ansible \\\n    ansible-lint \\\n    jupyterlab \\\n    mlflow \\\n    python-lsp-server[all] \\\n    ical2orgpy\n\nRUN ARCH=\"$(dpkg --print-architecture)\"; \\\n    case \"$ARCH\" in \\\n            amd64 pip install --no-cache-dir tensorflow-gpu tensorflow-datasets torch torchvision gym segmentation-models albumentations;; \\\n          esac;\n\nRUN pip install --no-cache-dir \\\n\n    numpy \\\n    numexpr \\\n    pandas \\\n    scipy \\\n    scikit-learn \\\n    scikit-image \\\n    pillow \\\n    opencv-python \\\n    boto3 \\\n    nibabel \\\n    pydicom \\\n\n    pandas_ta \\\n    yfinance \\\n    python-binance \\\n    py3cw \\\n\n    matplotlib \\\n    plotly \\\n\n    pygments \\\n    nbstripout \\\n    click\n\nRUN pip install --no-cache-dir numpy --upgrade && \\\n    pip install --no-cache-dir jinja2 --upgrade\n\n# Install Jupyter\n#\n\nCOPY resources/jupyter/themes.jupyterlab-settings /home/$USER/.jupyter/lab/user-settings/@jupyterlab/apputils-extension/themes.jupyterlab-settings\nCOPY resources/jupyter/shortcuts.jupyterlab-settings /home/$USER/.jupyter/lab/user-settings/@jupyterlab/shortcuts-extension/shortcuts.jupyterlab-settings\nCOPY resources/jupyter/tracker.jupyterlab-settings /home/$USER/.jupyter/lab/user-settings/@jupyterlab/notebook-extension/tracker.jupyterlab-settings\nCOPY resources/jupyter/terminal-plugin.jupyterlab-settings /home/$USER/.jupyter/lab/user-settings/@jupyterlab/terminal-extension/plugin.jupyterlab-settings\nCOPY resources/jupyter/extension-plugin.jupyterlab-settings /home/$USER/.jupyter/lab/user-settings/@jupyterlab/extensionmanager-extension/plugin.jupyterlab-settings\n\n# Install Clojure\n#\nRUN wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein -P /usr/bin/ && \\\n    chmod 755 /usr/bin/lein && \\\n    /bin/bash -c \"$(curl -fsSL https://download.clojure.org/install/linux-install-1.11.1.1113.sh)\" && \\\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/clojure-lsp/clojure-lsp/master/install)\" && \\\n    /bin/bash -c \"$( curl -f -s https://raw.githubusercontent.com/babashka/babashka/master/install)\" -f\n\n# Install AWS CLI\n#\nRUN ARCH=\"$(dpkg --print-architecture)\"; \\\n    case \"$ARCH\" in \\\n            amd64) URL='https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' ;; \\\n            arm64) URL='https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip' ;; \\\n    esac; \\\n    cd /opt/ && \\\n    curl -f -s \"${URL}\" -o \"awscliv2.zip\" && \\\n    unzip -q awscliv2.zip && \\\n    ./aws/install && \\\n    rm awscliv2.zip\n\n# Install Google Cloud CLI\n#\nRUN ARCH=\"$(dpkg --print-architecture)\"; \\\n    curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \\\n    echo \\\n    \"deb [arch=${ARCH} signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt \\\n    cloud-sdk main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \\\n    apt-get update && \\\n    apt-get install google-cloud-sdk -y --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n\n# Arduino\n#\n# RUN wget http://downloads.arduino.cc/arduino-1.8.13-linux64.tar.xz && \\\n#     tar xf arduino-1.8.13-linux64.tar.xz && \\\n#     mv arduino-1.8.13 /usr/local/share/arduino && \\\n#     ln -s /usr/local/share/arduino/arduino /usr/local/bin/arduino && \\\n#     ln -s /usr/local/share/arduino/arduino-builder /usr/local/bin/arduino-builder && \\\n#     rm -rf arduino-1.8.13-linux64.tar.xz && \\\n#     arduino --install-boards arduino:sam && \\\n#     wget https://www.pjrc.com/teensy/td_153/TeensyduinoInstall.linux64 && \\\n#     chmod +x TeensyduinoInstall.linux64 && \\\n#     ./TeensyduinoInstall.linux64  --dir=/usr/local/share/arduino && \\\n#     rm -rf TeensyduinoInstall.linux64\n\nRUN apt-get autoremove -y && \\\n    apt-get clean && \\\n    apt-get autoclean\n\n# Setup Emacs\n#\nRUN git clone https://github.com/nakkaya/emacs /opt/emacsd/conf && \\\n    echo \"(setq package-native-compile t)\" > /home/$USER/.emacs && \\\n    echo \"(load-file \\\"/opt/emacsd/conf/init.el\\\")\" >> /home/$USER/.emacs\n\nCOPY resources/bin/ob-tangle.sh /usr/bin/ob-tangle\nRUN sudo chmod +x /usr/bin/ob-tangle\nCOPY resources/bin/bootrc /home/$USER/.bootrc\n\nRUN mkdir -p /home/$USER/.local/share/ && \\\n    chown -R $USER:$USER /opt/emacsd && \\\n    chown -R $USER:$USER /home/$USER && \\\n    chown -R $USER:$USER /storage\n\nUSER $USER\n\nRUN echo ' ' >> /home/$USER/.bashrc && \\\n    echo 'export PYTHONDONTWRITEBYTECODE=1' >> /home/$USER/.bashrc && \\\n    echo 'export TF_CPP_MIN_LOG_LEVEL=2' >> /home/$USER/.bashrc && \\\n    echo 'export GIT_PYTHON_REFRESH=quiet' >> /home/$USER/.bashrc\n\nFROM scratch\nCOPY --from=build / /\n\nENV USER=\"core\"\nUSER $USER\nWORKDIR /storage\nCMD /opt/emacsd/exec.sh\n"
}