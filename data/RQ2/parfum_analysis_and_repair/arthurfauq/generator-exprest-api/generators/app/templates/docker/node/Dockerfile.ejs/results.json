{
  "startTime": 1674215926060,
  "endTime": 1674215926785,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 28,
        "columnEnd": 44
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 33,
        "columnEnd": 49
      }
    }
  ],
  "repairedDockerfile": "### Development stage\n\nFROM node:14.19.0-alpine3.14 as development<% if (sequelize || redis) { %>\n\n# Install git\nRUN apk add --no-cache git\n\n# Install dockerize\nENV DOCKERIZE_VERSION v0.6.0\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz<% } %>\n\n# Install node_modules in a separate directory\nWORKDIR /home/node\n\n# Copy package.json and yarn.lock\nCOPY package.json ./\nCOPY yarn.lock ./\n\n# Install all dependencies\nRUN yarn --pure-lockfile && yarn cache clean;\n\n# Set path to run packages from node_modules\nENV PATH /home/node/node_modules/.bin:$PATH\n\n# Use /home/node/app as the CWD\nWORKDIR /home/node/app\n\n# Copy all project files\nCOPY . .\n\n# Run development server\nENTRYPOINT [\"yarn\", \"dev\"]\n\n\n\n### Build stage\n\nFROM development as build\n\n# Transpile TypeScript files to JavaScript\nRUN yarn build && yarn cache clean;\n\n\n\n### Final stage\n\nFROM node:14.19.0-alpine3.14 as final<% if (sequelize || redis) { %>\n\n# Install git\nRUN apk add --no-cache git\n\n# Install dockerize\nENV DOCKERIZE_VERSION v0.6.0\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz<% } %>\n\n# Switch to user node\nUSER node\n\n# Prepare destination directory and ensure user node owns it\nRUN mkdir -p /home/node/app && chown -R node:node /home/node/app\n\n# Set CWD\nWORKDIR /home/node/app\n\n# Copy compiled files and change ownership to user node\nCOPY --chown=node:node --from=build /home/node/app/.env .<% if (sequelize) { %>\nCOPY --chown=node:node --from=build /home/node/app/.sequelizerc .<% } %>\nCOPY --chown=node:node --from=build /home/node/app/db ./db\nCOPY --chown=node:node --from=build /home/node/app/dist ./dist\nCOPY --chown=node:node --from=build /home/node/app/package.json ./\nCOPY --chown=node:node --from=build /home/node/app/yarn.lock ./\n\n# Install production dependencies\nRUN yarn install --production && yarn cache clean;\n\n# Run server\nENTRYPOINT [\"node\", \"./dist/index.js\"]\n"
}