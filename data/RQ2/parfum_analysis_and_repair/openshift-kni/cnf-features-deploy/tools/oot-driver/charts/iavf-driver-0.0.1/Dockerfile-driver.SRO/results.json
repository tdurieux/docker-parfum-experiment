{
  "startTime": 1674254722192,
  "endTime": 1674254723111,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG IMAGE=registry.access.redhat.com/ubi8:latest\nARG OUTPUT_IMAGE=registry.access.redhat.com/ubi8:latest\n\nFROM $IMAGE as builder\n\nARG KVER\nENV KVER=$KVER\n\nARG KERNEL_SOURCE\nENV KERNEL_SOURCE=$KERNEL_SOURCE\n\nARG IAVF_DRIVER_VERSION\nENV IAVF_DRIVER_VERSION=$IAVF_DRIVER_VERSION\n\nARG SIGN_DRIVER\nENV SIGN_DRIVER=$SIGN_DRIVER\n\nARG DOWNLOAD_DRIVER\nENV DOWNLOAD_DRIVER=$DOWNLOAD_DRIVER\n\nCOPY files/driver ./files/driver\nCOPY files/kernel ./files/kernel\nCOPY signing-keys /signing-key/\n\nRUN dnf install -y  \\\nmake gcc cpio kmod\n\nRUN if [[ \"${KERNEL_SOURCE}\" == *\"file\"* ]]; then \\\n[[ \"${KVER}\" == *\"rt\"* ]] && export RT=\"rt-\" || export RT=\"\"; \\\nrpm -Uvh --nodeps ./files/kernel/kernel-${RT}devel-${KVER}.rpm --force; \\\nrpm -Uvh --nodeps ./files/kernel/kernel-${RT}core-${KVER}.rpm --force; \\\nfi\n\nWORKDIR files/driver\n\nRUN if [[ ${DOWNLOAD_DRIVER} == \"true\" ]]; then \\\nwget https://netix.dl.sourceforge.net/project/e1000/iavf%20stable/$IAVF_DRIVER_VERSION/iavf-$IAVF_DRIVER_VERSION.tar.gz; \\\nfi\n\nRUN tar zxf iavf-$IAVF_DRIVER_VERSION.tar.gz && rm iavf-$IAVF_DRIVER_VERSION.tar.gz\n\nWORKDIR iavf-$IAVF_DRIVER_VERSION/src\n\nRUN BUILD_KERNEL=$KVER KSRC=/lib/modules/$KVER/build/ make modules_install\n\nRUN if [[ ${SIGN_DRIVER} == \"true\" ]]; then \\\n/usr/src/kernels/$KVER/scripts/sign-file sha256 /signing-key/PK.key /signing-key/PK.pem /lib/modules/$KVER/updates/drivers/net/ethernet/intel/iavf/iavf.ko; \\\nfi\n\nFROM $OUTPUT_IMAGE\n\nARG KVER\nENV KERNEL_VERSION=$KVER\n\nRUN dnf install -y kmod\n\nCOPY --from=builder /lib/modules/$KVER/updates/drivers/net/ethernet/intel/iavf/iavf.ko /oot-driver/\nCOPY --from=builder /lib/modules/$KVER/updates/drivers/net/ethernet/intel/auxiliary/auxiliary.ko /oot-driver/\nCOPY files/script/entrypoint.sh /usr/local/bin/\nCOPY script/load.sh /usr/local/bin/\nCOPY script/unload.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/load.sh\nRUN chmod +x /usr/local/bin/unload.sh\n\nCMD [\"/entrypoint.sh\"]"
}