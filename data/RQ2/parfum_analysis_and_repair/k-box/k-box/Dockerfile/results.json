{
  "startTime": 1674256152684,
  "endTime": 1674256153702,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##\n## K-Box Docker image\n## Build the K-Box Docker image. Uses a multi-step approach\n##\n\n## Grabbing required binaries for the video processing part\nFROM oneofftech/video-processing-cli:0.6.0 AS videocli\n## .. we just need this image so we can copy from it\n\nFROM klinktech/k-box-ci-pipeline-php:7.4 AS builder\n## Installing the dependencies to be used in a later step.\n## Will generate three directories:\n## * /var/www/dms/bin/\n## * /var/www/dms/vendor/\n## * /var/www/dms/public/\n\nLABEL kbox.builder=\"kbox\"\n\nUSER root\nRUN \\\n    rm -f /usr/local/etc/php/conf.d/docker-php-ext-pcov.ini\nUSER $IMAGE_USER\n\nCOPY --chown=php:php . /var/www/html\nRUN \\\n    mkdir bin &&\\\n    mkdir -p \"storage/app/projects/avatars\" &&\\\n    mkdir -p \"storage/documents\" &&\\\n    mkdir -p \"storage/framework/cache\" &&\\\n    mkdir -p \"storage/framework/cache/data\" &&\\\n    mkdir -p \"storage/framework/sessions\" &&\\\n    mkdir -p \"storage/framework/views\" &&\\\n    mkdir -p \"storage/logs\" &&\\\n    composer install --no-dev --prefer-dist &&\\\n    composer run install-content-cli &&\\\n    composer run install-language-cli\n    # &&\\\n    # composer run install-streaming-client\nRUN \\\n    yarn config set cache-folder .yarn && \\\n    yarn install --link-duplicates && \\\n    yarn run production && yarn cache clean;\n\n## Generating the real K-Box image\nFROM php:7.4-fpm AS php\n\nLABEL maintainer=\"OneOffTech <info@oneofftech.xyz>\" \\\n  org.label-schema.name=\"klinktech/k-box\" \\\n  org.label-schema.description=\"Docker image for K-Box, a web-based application to manage documents, images, videos and geodata.\" \\\n  org.label-schema.schema-version=\"1.0\" \\\n  org.label-schema.vcs-url=\"https://github.com/k-box/k-box\"\n\n## Default environment variables\nENV KBOX_PHP_MAX_EXECUTION_TIME 120\nENV KBOX_PHP_MAX_INPUT_TIME 120\nENV KBOX_PHP_MEMORY_LIMIT 500M\nENV KBOX_DIR /var/www/dms\n\n## Install libraries, envsubst, supervisor and php modules\nRUN apt-get update -yqq && \\\n    apt-get install -yqq --no-install-recommends \\ \n        locales \\\n        imagemagick  \\\n        libfreetype6-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        libbz2-dev \\\n        libzip-dev \\\n        gettext \\\n        supervisor \\\n        cron \\\n        gdal-bin \\\n        ghostscript \\\n        libmagickwand-dev \\\n    && docker-php-ext-install -j$(nproc) iconv \\\n    && docker-php-ext-configure gd --with-freetype=/usr/include/ --with-jpeg=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd \\\n    && docker-php-ext-install bz2 zip exif pdo_mysql bcmath pcntl opcache \\\n    && pecl channel-update pecl.php.net \\\n    && pecl install imagick \\\n    && docker-php-ext-enable imagick \\\n    # Ensure PDF support is enabled in Image Magick\n    && sed -i -e '/rights=\"none\" pattern=\"{PS,PDF,XPS}\"/ s#<!--##g;s#-->##g;' /etc/ImageMagick-6/policy.xml \\\n    && sed -i -e 's/rights=\"none\" pattern=\"{PS,PDF,XPS}\"/rights=\"read|write\" pattern=\"PDF\"/' /etc/ImageMagick-6/policy.xml \\\n    && docker-php-source delete \\\n    && apt-get clean \\\n    && rm -r /var/lib/apt/lists/*\n\n## Forces the locale to UTF-8, suggestion from Marco Zanoni\nRUN locale-gen \"en_US.UTF-8\" \\\n    && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales \\\n \t&& locale-gen \"C.UTF-8\" \\\n \t&& DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales \\\n \t&& /usr/sbin/update-locale LANG=\"C.UTF-8\"\n\n## NGINX installation\n### The installation procedure is heavily inspired from https://github.com/nginxinc/docker-nginx\nRUN set -e; \\\n\tNGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \\\n\tNGINX_VERSION=1.18.0-1~buster; \\\n\tfound=''; \\\n\tapt-get update; \\\n\tapt-get install --no-install-recommends --no-install-suggests -y gnupg1 apt-transport-https ca-certificates; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu \\\n\t; do \\\n\t\techo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \\\n\t\tapt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $NGINX_GPGKEY\" && exit 1; \\\n    echo \"deb http://nginx.org/packages/debian/ buster nginx\" >> /etc/apt/sources.list \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y \\\n\t\t\t\t\t\tca-certificates \\\n\t\t\t\t\t\tnginx=${NGINX_VERSION} \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n## Configure cron to run Laravel scheduler\nRUN echo '* * * * * php /var/www/dms/artisan schedule:run >> /dev/null 2>&1' | crontab -\n\n## Copy NGINX default configuration\nCOPY docker/nginx-default.conf /etc/nginx/conf.d/default.conf\n\n## Copy additional PHP configuration files\nCOPY docker/php/php-*.ini /usr/local/etc/php/conf.d/\n\n## Override the php-fpm additional configuration added by the base php-fpm image\nCOPY docker/php/zz-docker.conf /usr/local/etc/php-fpm.d/\n\n## Copy supervisor configuration\nCOPY docker/supervisor/kbox.conf /etc/supervisor/conf.d/\n\n## Copying custom startup scripts\nCOPY docker/configure.sh /usr/local/bin/configure.sh\nCOPY docker/start.sh /usr/local/bin/start.sh\nCOPY docker/db-connect-test.php /usr/local/bin/db-connect-test.php\n\nRUN chmod +x /usr/local/bin/configure.sh && \\\n    chmod +x /usr/local/bin/start.sh\n\n## Copy the application code\nCOPY \\\n    --chown=www-data:www-data \\\n    . /var/www/dms/\n\n## Copy in the dependencies from the previous buildstep\nCOPY \\\n    --from=builder \\\n    --chown=www-data:www-data \\\n    /var/www/html/vendor/ \\\n    /var/www/dms/vendor/\n\nCOPY \\\n    --from=builder \\\n    --chown=www-data:www-data \\\n    /var/www/html/bin/ \\\n    /var/www/dms/bin/\n\nCOPY \\\n    --from=builder \\\n    --chown=www-data:www-data \\\n    /var/www/html/public/ \\\n    /var/www/dms/public/\n\nCOPY \\\n    --from=videocli \\\n    --chown=www-data:www-data \\\n    /video-processing-cli/ \"/var/www/dms/bin/\"\n\nENV KBOX_STORAGE \"/var/www/dms/storage\"\n\nWORKDIR /var/www/dms\n\nEXPOSE 80\n\nENTRYPOINT [\"/usr/local/bin/start.sh\"]\n\nARG BUILD_DATE\nARG BUILD_VERSION\nARG BUILD_COMMIT\n\nLABEL version=$BUILD_VERSION \\\n  org.label-schema.build-date=$BUILD_DATE \\\n  org.label-schema.vcs-ref=$BUILD_COMMIT\n\n"
}