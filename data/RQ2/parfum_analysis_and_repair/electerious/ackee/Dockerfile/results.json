{
  "startTime": 1674252116696,
  "endTime": 1674252117109,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 72
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Start with first build stage\n\nFROM node:14-alpine AS build\nWORKDIR /srv/app/\n\n# Add dependencies first so that Docker can use the cache as long as the dependencies stay unchanged\n\nCOPY package.json yarn.lock /srv/app/\nRUN yarn install --production --frozen-lockfile --network-timeout 120000 && yarn cache clean;\n\n# Copy source after the dependency step as it's more likely that the source changes\n\nCOPY build.js /srv/app/\nCOPY src /srv/app/src\nCOPY dist /srv/app/dist\n\n# Start with second build stage\n\nFROM node:14-alpine\nEXPOSE 3000\nWORKDIR /srv/app/\n\n# Copy the source from the build stage to the second stage\n\nCOPY --from=build /srv/app/ /srv/app/\n\n# Run healthcheck against MongoDB, server and API.\n# Wait a bit before start to ensure the `yarn build` is done.\n\nHEALTHCHECK --interval=1m --timeout=45s --start-period=45s CMD [ \"/srv/app/src/healthcheck.js\" ]\n\n# Start Ackee\n\nCMD yarn start\n"
}