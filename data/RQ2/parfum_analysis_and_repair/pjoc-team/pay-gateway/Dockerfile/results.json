{
  "startTime": 1674254422163,
  "endTime": 1674254422886,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:latest as build\n\nARG REPOSITORY\nARG GOPROXY\nENV BUILD_PROJECT_PATH=${GOPATH}/src/${REPOSITORY}\nENV GO111MODULE=on\nENV GOPROXY=${GOPROXY}\nENV BIN=/app/bin\n\nADD . /tmp\nRUN mkdir -p /tmp/gomod /go/pkg/ &&  ln -s /tmp/gomod /go/pkg/mod\nRUN export REPOSITORY=`cat /tmp/go.mod | grep -E \"^module\\s[0-9a-zA-Z\\./_\\-]+\" | awk '{print $2}'`; \\\n    export NAME=`basename $REPOSITORY`; \\\n    export APP=`basename $REPOSITORY`; \\\n    export BUILD_PROJECT_PATH=\"${GOPATH}/src/${REPOSITORY}\"; \\\n    env; \\\n    if [ -z \"$REPOSITORY\" ]; then \\\n        echo \"repository arg is null!\"; \\\n        exit 1; \\\n    else \\\n        echo \"path===${GOPATH}/src/$REPOSITORY\"; \\\n    fi; \\\n    mkdir -p \"${BUILD_PROJECT_PATH}\"; \\\n    mkdir -p \"${BIN}\"; \\\n    cp -R /tmp/* ${BUILD_PROJECT_PATH}; \\\n    cd ${BUILD_PROJECT_PATH}; \\\n    pwd; \\\n    if [ -f \"go_build.sh\" ]; then \\\n        bash go_build.sh; \\\n        ls /app/bin; \\\n        mv /app/bin/* /app/; \\\n        cp /app/${APP} /app/main; \\\n    else \\\n        echo \"not found go_build.sh. files: `ls`\" ;\\\n    fi\n\nRUN env\n\n\nFROM alpine:latest as certs\nRUN apk --update --no-cache add ca-certificates && \\\n    apk add --no-cache bash && \\\n    mkdir -p /app\n\n#ENV APP=$app\n\nCOPY --from=build /app/ /app/\nADD conf/ /app/conf/\n\nWORKDIR /app\nCMD [\"bash\", \"-c\", \"/app/main\", \"--listen-http=:8080\", \"--listen=:9090\", \"--log-level=debug\"]\nEXPOSE 8080"
}