{
  "startTime": 1674247966259,
  "endTime": 1674247967498,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Source: https://github.com/jupyter-incubator/sparkmagic/blob/master/Dockerfile.jupyter\n# TODO: Using old version due https://github.com/jupyter-incubator/sparkmagic/issues/492\nFROM jupyter/base-notebook:4a112c0f11eb\n\nARG KAMU_VERSION\nARG dev_mode=false\n\n#########################################################################################\nUSER root\n\n# This is needed because requests-kerberos fails to install on debian due to missing linux headers\nRUN conda install requests-kerberos -y\n\n# Podman\n# Source: https://github.com/containers/podman/blob/056f492f59c333d521ebbbe186abde0278e815db/contrib/podmanimage/stable/Dockerfile\nRUN apt update && \\\n    apt -y --no-install-recommends install ca-certificates curl gnupg unzip jq && \\\n    . /etc/os-release && \\\n    echo \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /\" | tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list && \\\n    curl -f -L \"https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key\" | apt-key add - && \\\n    apt update && \\\n    apt -y --no-install-recommends install podman fuse-overlayfs && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY podman/containers.conf /etc/containers/containers.conf\nCOPY podman/storage.conf /etc/containers/storage.conf\nCOPY podman/containers-user.conf /home/$NB_USER/.config/containers/containers.conf\nCOPY podman/storage-user.conf /home/$NB_USER/.config/containers/storage.conf\n\n# Create empty storage not to get errors when it's not mounted\n# See: https://www.redhat.com/sysadmin/image-stores-podman\nRUN mkdir -p \\\n    /var/lib/containers/shared/overlay-images \\ \n    /var/lib/containers/shared/overlay-layers \\\n    /var/lib/containers/shared/vfs-images \\\n    /var/lib/containers/shared/vfs-layers && \\\n    touch /var/lib/containers/shared/overlay-images/images.lock && \\\n    touch /var/lib/containers/shared/overlay-layers/layers.lock && \\\n    touch /var/lib/containers/shared/vfs-images/images.lock && \\\n    touch /var/lib/containers/shared/vfs-layers/layers.lock\n\n\n# AWS CLI\nRUN curl -f \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" && \\\n    unzip awscliv2.zip && \\\n    ./aws/install && \\\n    rm -rf aws*\n\n\n# Kamu\nRUN wget -q https://github.com/kamu-data/kamu-cli/releases/download/v$KAMU_VERSION/kamu-cli-x86_64-unknown-linux-gnu.tar.gz && \\\n    tar -xf kamu-cli-x86_64-unknown-linux-gnu.tar.gz && \\\n    chmod +x kamu-cli-x86_64-unknown-linux-gnu/kamu && \\\n    mv kamu-cli-x86_64-unknown-linux-gnu/kamu /usr/local/bin/ && \\\n    rm -rf kamu-cli-x86_64-unknown-linux-gnu* && \\\n    echo \"source <(kamu completions bash)\" >> /home/$NB_USER/.bashrc && rm kamu-cli-x86_64-unknown-linux-gnu.tar.gz\nCOPY kamu/.kamuconfig /.kamuconfig\nCOPY kamu/kamu.py /opt/conda/lib/python3.8/site-packages/kamu.py\n\n\n#########################################################################################\nUSER $NB_USER\n\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir --upgrade --ignore-installed setuptools\nCOPY kamu/requirements.in requirements.in\nRUN pip install --no-cache-dir -r requirements.in && rm requirements.in\n\nCOPY kamu/sparkmagic.json /home/$NB_USER/.sparkmagic/config.json\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#RUN jupyter-kernelspec install --user $(pip show sparkmagic | grep Location | cut -d\" \" -f2)/sparkmagic/kernels/sparkkernel\nRUN jupyter-kernelspec install --user $(pip show sparkmagic | grep Location | cut -d\" \" -f2)/sparkmagic/kernels/pysparkkernel\n#RUN jupyter-kernelspec install --user $(pip show sparkmagic | grep Location | cut -d\" \" -f2)/sparkmagic/kernels/sparkrkernel\nRUN jupyter serverextension enable --py sparkmagic\n\n\n#########################################################################################\nUSER root\nRUN rm -r /home/$NB_USER/work\nCOPY user-home/ /home/$NB_USER/\nRUN chown -R $NB_USER:users /home/$NB_USER\n\nUSER $NB_USER\nCMD [\"start-notebook.sh\", \"--NotebookApp.iopub_data_rate_limit=1000000000\"]\n"
}