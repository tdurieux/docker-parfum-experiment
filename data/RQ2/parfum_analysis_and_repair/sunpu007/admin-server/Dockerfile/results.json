{
  "startTime": 1674249073968,
  "endTime": 1674249074784,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# 设置基础镜像,基于node:14.0.0版本\nFROM node:14.0.0\n\n# 配置环境变量\nENV NODE_ENV production\n\n# 配置阿里性能平台参数\n# Node.js 性能平台给您的项目生成的 appid\nENV ADMIN_DEMO_ALINODE_APPID appid\n# Node.js 性能平台给您的项目生成的 secret\nENV ADMIN_DEMO_ALINODE_APPSECRET secret\n\n# 创建工作目录\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\n\n# 指定工作目录\nWORKDIR /usr/src/app\n\n# 拷贝package.json文件到工作目录\n# !!重要：package.json需要单独添加。\n# Docker在构建镜像的时候，是一层一层构建的，仅当这一层有变化时，重新构建对应的层。\n# 如果package.json和源代码一起添加到镜像，则每次修改源码都需要重新安装npm模块，这样木有必要。\n# 所以，正确的顺序是: 添加package.json；安装npm模块；添加源代码。\nCOPY package.json /usr/src/app/package.json\n\n# 安装runtime\nRUN npm i nodeinstall -g && npm cache clean --force;\nRUN nodeinstall --install-alinode ^3\n\n# 安装项目依赖\nRUN npm install && npm cache clean --force;\n\n# 拷贝所有文件到工作目录\nCOPY . /usr/src/app\n\n# 暴露端口(可忽略,在启动时指定)\nEXPOSE 7002\n\n# 启动项目\nCMD npm start\n"
}