{
  "startTime": 1674217106950,
  "endTime": 1674217108011,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright 2019-present Dell EMC\n# Copyright 2019-present Open Networking Foundation\n# SPDX-License-Identifier: Apache-2.0\n\nARG BAZEL_VERSION=2.2.0\nARG JDK_URL=https://mirror.bazel.build/openjdk/azul-zulu11.29.3-ca-jdk11.0.2/zulu11.29.3-ca-jdk11.0.2-linux_x64.tar.gz\nARG LLVM_REPO_NAME=\"deb http://apt.llvm.org/stretch/  llvm-toolchain-stretch main\"\nARG PROTOBUF_TAG=v3.7.1\nARG GRPC_TAG=v1.21.3\nARG DPDK_VERSION=v19.08-rc4\nARG JOBS=4\nARG NP4_BIN\nARG NP4_DIR=/np4_intel\n\nFROM ubuntu:18.04\nLABEL maintainer=\"Stratum Ubuntu dev <stratum-dev@lists.stratumproject.org>\"\nLABEL description=\"This Docker image sets up a development environment for Stratum on Ubuntu\"\n\n# Copy in the NP4 binary\nARG NP4_BIN\nCOPY $NP4_BIN /\n\n# bazel dependencies\n# + wget to download bazel binary\n# + ca-certificates for wget HTPPS connection\n# LLVM dependencies\n# + gnupg2 for apt-key\n# + software-properties-common for add-apt-repository\nENV PKG_DEPS pkg-config zip zlib1g-dev unzip python wget ca-certificates \\\n    ssh git gdb vim emacs-nox sudo libudev-dev libjudy-dev bison flex \\\n    libfl-dev libgmp-dev libi2c-dev python-yaml libyaml-dev build-essential \\\n    lcov curl autoconf automake libtool libgmp-dev libpcap-dev \\\n    libboost-thread-dev libboost-filesystem-dev libboost-program-options-dev \\\n    gnupg2 software-properties-common python-pip python-dev python3-dev \\\n    libfdt1 libnuma-dev libhugetlbfs-dev linux-virtual dkms \\\n    libjson-c3 libjson-c-dev cmake libhwloc-dev uuid-dev\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends $PKG_DEPS && rm -rf /var/lib/apt/lists/*;\n\n# LLVM toolchain\nARG LLVM_REPO_NAME\nRUN wget --quiet -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\nRUN add-apt-repository \"$LLVM_REPO_NAME\"\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends clang-format clang && rm -rf /var/lib/apt/lists/*;\n\nARG BAZEL_VERSION\nRUN wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    chmod +x bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    rm -f bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Install java and lcov for Bazel coverage\nARG JDK_URL\nENV JAVA_HOME /usr/local/lib/jvm\nRUN wget $JDK_URL -O $HOME/jdk_11.0.2.tar.gz && \\\n    mkdir -p $JAVA_HOME && \\\n    tar xf $HOME/jdk_11.0.2.tar.gz -C $JAVA_HOME --strip-components=1 && \\\n    rm $HOME/jdk_11.0.2.tar.gz\nENV PATH=$PATH:/usr/local/lib/jvm/bin\n\n# grpc, protobuf\nENV PKG_DEPS build-essential autoconf libtool pkg-config \\\n    libgflags-dev libgtest-dev \\\n    clang-5.0 libc++-dev\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends $PKG_DEPS && rm -rf /var/lib/apt/lists/*;\n\n# install protobuf\nARG PROTOBUF_TAG\nRUN git clone https://github.com/protocolbuffers/protobuf.git /tmp/protobuf && \\\n    cd /tmp/protobuf  && \\\n    git checkout tags/${PROTOBUF_TAG} && \\\n    git submodule update --init --recursive && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && make check && make install && ldconfig && \\\n    rm -rf /tmp/protobuf\n\n# install grpc\nARG GRPC_TAG\nRUN git clone https://github.com/grpc/grpc /tmp/grpc && \\\n    cd /tmp/grpc  && \\\n    git checkout tags/${GRPC_TAG} && \\\n    git submodule update --init && \\\n    make && make install && ldconfig && \\\n    rm -rf /tmp/grpc\n\n# Create link to /lib/modules for this kernel\nRUN cd /lib/modules && \\\n    ln -s *-generic `uname -r`\n\nARG DPDK_VERSION\nENV RTE_SDK /usr/local/share/dpdk\nRUN git clone https://github.com/DPDK/dpdk.git /tmp/dpdk && \\\n    cd /tmp/dpdk && \\\n    git checkout $DPDK_VERSION && \\\n    make config T=x86_64-native-linuxapp-gcc && make && \\\n    make install && \\\n    rm -rf /tmp/dpdk\n\n# Install the NP4 Intel packages\nARG NP4_BIN\nARG NP4_DIR\nRUN mkdir $NP4_DIR && mv /$NP4_BIN $NP4_DIR && \\\n    bash $NP4_DIR/$NP4_BIN offline\n\n# Tools for style checking\nRUN pip install --no-cache-dir setuptools wheel && \\\n    pip install --no-cache-dir cpplint && \\\n    pip install --no-cache-dir virtualenv\n\n"
}