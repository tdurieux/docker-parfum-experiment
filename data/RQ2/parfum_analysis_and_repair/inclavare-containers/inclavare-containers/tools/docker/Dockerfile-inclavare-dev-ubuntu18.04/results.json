{
  "startTime": 1674254891696,
  "endTime": 1674254893112,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 92,
        "lineEnd": 94,
        "columnStart": 25,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 92,
        "lineEnd": 94,
        "columnStart": 25,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 155
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04 AS builder\n\nLABEL maintainer=\"Shirong Hao <shirong@linux.alibaba.com>\"\n\nENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    make git vim clang-format-9 gcc pkg-config protobuf-compiler debhelper cmake \\\n    wget net-tools curl file gnupg tree \\\n    libbinutils \\\n    libseccomp-dev libssl-dev binutils-dev libprotoc-dev && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /root\n\nRUN mkdir /root/gopath\n\n# build and install prortobuf-c\nRUN wget https://github.com/protobuf-c/protobuf-c/archive/v1.3.1.tar.gz && \\\n    tar -zxvf v1.3.1.tar.gz && cd protobuf-c-1.3.1 && ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm -f ../v1.3.1.tar.gz\n\n# install golang\nRUN wget https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz && \\\n    tar -zxvf go1.14.2.linux-amd64.tar.gz -C /usr/lib && \\\n    rm -f go1.14.2.linux-amd64.tar.gz\n\n# configure GOPATH and GOROOT\nENV GOROOT       /usr/lib/go\nENV GOPATH       /root/gopath\nENV PATH         $PATH:$GOROOT/bin:$GOPATH/bin\nENV GO111MODULE  on\n\n# install rust\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path\nENV PATH         /root/.cargo/bin:$PATH\n\nFROM builder AS eaa\n\n# download and install containerd 1.5.3\nRUN wget https://github.com/containerd/containerd/releases/download/v1.5.3/cri-containerd-cni-1.5.3-linux-amd64.tar.gz && \\\n    tar zxvf cri-containerd-cni-1.5.3-linux-amd64.tar.gz && \\\n    cp -rf etc/* /etc/ && cp -rf opt/* /opt/ && \\\n    cp -f usr/local/bin/* /usr/local/bin/ && \\\n    rm -rf cri-containerd-cni-1.5.3-linux-amd64.tar.gz etc opt usr\n\n# configue ocicrypt keyprovider\nRUN mkdir -p /etc/containerd/ocicrypt/keys\n\n# configure containerd\nRUN containerd config default > config.toml && \\\n    sed -i \"s#k8s.gcr.io/pause:3.5#registry.cn-hangzhou.aliyuncs.com/acs/pause-amd64:3.1#g\" config.toml && \\\n    sed -i 's/\\(snapshotter = \\)\"overlayfs\"/\\1\"native\"/' config.toml && \\\n    cp -f config.toml /etc/containerd\n\n# build and install skopeo\nRUN git clone https://github.com/containers/skopeo $GOPATH/src/github.com/containers/skopeo && \\\n    apt-get install --no-install-recommends -y libdevmapper-dev build-essential nghttp2 libnghttp2-dev libssl-dev libfftw3-dev libsndfile1-dev libgpgme-dev && \\\n    cd $GOPATH/src/github.com/containers/skopeo && make bin/skopeo && \\\n    cp -f $GOPATH/src/github.com/containers/skopeo/bin/skopeo /usr/local/bin/ && rm -rf /var/lib/apt/lists/*;\n\n# configue crictl\nRUN echo \"runtime-endpoint: unix:///run/containerd/containerd.sock\\nimage-endpoint: unix:///run/containerd/containerd.sock\\ntimeout: 2\\ndebug: true\" > /etc/crictl.yaml\n\nFROM builder\n\nENV SGX_SDK_VERSION         2.14\nENV SGX_SDK_RELEASE_NUMBER  2.14.100.2\n\n# install LVI binutils for rats-tls build\nRUN wget https://download.01.org/intel-sgx/sgx-linux/$SGX_SDK_VERSION/as.ld.objdump.gold.r3.tar.gz && \\\n     tar -zxvf as.ld.objdump.gold.r3.tar.gz && cp -rf external/toolset/ubuntu18.04/* /usr/local/bin/ && \\\n     rm -rf external && rm -rf as.ld.objdump.gold.r3.tar.gz\n\n# install docker\nRUN apt-get install --no-install-recommends -y iptables && \\\n    wget https://download.docker.com/linux/static/stable/x86_64/docker-18.09.7.tgz && \\\n    tar -zxvf docker-18.09.7.tgz && mv docker/* /usr/bin && rm -rf docker && rm -f docker-18.09.7.tgz && rm -rf /var/lib/apt/lists/*;\n\n# configure the rune runtime of docker\nRUN mkdir -p /etc/docker && \\\n    echo \"{\\n\\t\\\"runtimes\\\": {\\n\\t\\t\\\"rune\\\": {\\n\\t\\t\\t\\\"path\\\": \\\"/usr/local/bin/rune\\\",\\n\\t\\t\\t\\\"runtimeArgs\\\": []\\n\\t\\t}\\n\\t}\\n}\" >> /etc/docker/daemon.json\n\n# install Intel SGX SDK and DCAP\nRUN [ ! -f sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin ] && \\\n    wget https://download.01.org/intel-sgx/sgx-linux/$SGX_SDK_VERSION/distro/ubuntu18.04-server/sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin && \\\n    chmod +x sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin && echo -e 'no\\n/opt/intel\\n' | ./sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin && \\\n    rm -f sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin\n\nRUN echo \"deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main\" | tee /etc/apt/sources.list.d/intel-sgx.list && \\\n    wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add -\n\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n    libsgx-uae-service libsgx-dcap-default-qpl \\\n    libsgx-dcap-quote-verify-dev libsgx-dcap-ql-dev && rm -rf /var/lib/apt/lists/*;\n\n# install the packages need by skopeo\nRUN apt-get install --no-install-recommends -y libdevmapper-dev libgpgme-dev && rm -rf /var/lib/apt/lists/*;\n\n# install OPA go dependencies\nRUN go get github.com/open-policy-agent/opa@v0.30.2\nRUN curl -f -L -o opa https://openpolicyagent.org/downloads/v0.30.2/opa_linux_amd64_static\nRUN chmod 755 ./opa && mv opa /usr/local/bin/\n\n# copy binary and configure files\nCOPY --from=eaa /opt/cni                             /opt/cni\nCOPY --from=eaa /etc/containerd                      /etc/containerd\nCOPY --from=eaa /etc/cni                             /etc/cni\nCOPY --from=eaa /etc/crictl.yaml                     /etc\nCOPY --from=eaa /usr/local/bin                       /usr/local/bin\n"
}