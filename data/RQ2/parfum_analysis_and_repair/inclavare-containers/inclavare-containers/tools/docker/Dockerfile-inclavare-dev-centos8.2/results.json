{
  "startTime": 1674250329763,
  "endTime": 1674250331272,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 89,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:8.2.2004 AS builder\n\nLABEL maintainer=\"Shirong Hao <shirong@linux.alibaba.com>\"\n\nRUN dnf clean all && rm -r /var/cache/dnf && \\\n    dnf --enablerepo=PowerTools install -y \\\n      make gcc rpm-build protobuf-c autoconf libtool gcc-c++ cmake libarchive \\\n      wget git yum-utils file clang which vim \\\n      glibc-static \\\n      libseccomp-devel openssl-devel binutils-devel protobuf-c-devel\n\nWORKDIR /root\n\nRUN mkdir /root/gopath\n\n# install golang\nRUN wget https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz && \\\n    tar -zxvf go1.14.2.linux-amd64.tar.gz -C /usr/lib && \\\n    rm -f go1.14.2.linux-amd64.tar.gz\n\n# configure GOPATH and GOROOT\nENV GOROOT       /usr/lib/go\nENV GOPATH       /root/gopath\nENV PATH         $PATH:$GOROOT/bin:$GOPATH/bin\nENV GO111MODULE  on\n\n# install rust\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path\nENV PATH         /root/.cargo/bin:$PATH\n\nFROM builder AS eaa\n\n# download and install containerd 1.5.3\nRUN wget https://github.com/containerd/containerd/releases/download/v1.5.3/cri-containerd-cni-1.5.3-linux-amd64.tar.gz && \\\n    tar zxvf cri-containerd-cni-1.5.3-linux-amd64.tar.gz && \\\n    cp -rf etc/* /etc/ && cp -rf opt/* /opt/ && \\\n    cp -f usr/local/bin/* /usr/local/bin/ && \\\n    rm -rf cri-containerd-cni-1.5.3-linux-amd64.tar.gz etc opt usr\n\n# configue ocicrypt keyprovider\nRUN mkdir -p /etc/containerd/ocicrypt/keys\n\n# configure containerd\nRUN containerd config default > config.toml && \\\n    sed -i \"s#k8s.gcr.io/pause:3.5#registry.cn-hangzhou.aliyuncs.com/acs/pause-amd64:3.1#g\" config.toml && \\\n    sed -i 's/\\(snapshotter = \\)\"overlayfs\"/\\1\"native\"/' config.toml && \\\n    cp -f config.toml /etc/containerd\n\n# build and install skopeo\nRUN git clone https://github.com/containers/skopeo $GOPATH/src/github.com/containers/skopeo && \\\n    dnf --enablerepo=PowerTools install -y gpgme-devel libassuan-devel device-mapper-devel && \\\n    cd $GOPATH/src/github.com/containers/skopeo && make bin/skopeo && \\\n    cp -f $GOPATH/src/github.com/containers/skopeo/bin/skopeo /usr/local/bin/\n\n# configue crictl\nRUN rm -rf /etc/crictl.yaml && \\\n    echo -e \"runtime-endpoint: unix:///run/containerd/containerd.sock\\nimage-endpoint: unix:///run/containerd/containerd.sock\\ntimeout: 2\\ndebug: true\" > /etc/crictl.yaml\n\nFROM builder\n\nENV SGX_SDK_VERSION         2.14\nENV SGX_SDK_RELEASE_NUMBER  2.14.100.2\n\n# install LVI binutils for rats-tls build\nRUN wget https://download.01.org/intel-sgx/sgx-linux/$SGX_SDK_VERSION/as.ld.objdump.gold.r3.tar.gz && \\\n     tar -zxvf as.ld.objdump.gold.r3.tar.gz && cp -rf external/toolset/centos8.2/* /usr/local/bin/ && \\\n     rm -rf external && rm -rf as.ld.objdump.gold.r3.tar.gz\n\n# install docker\nRUN dnf --enablerepo=PowerTools install -y iptables && \\\n    wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.8.tgz && \\\n    tar -zxvf docker-19.03.8.tgz && mv docker/* /usr/bin && rm -rf docker && rm -f docker-19.03.8.tgz\n\n# configure the rune runtime of docker\nRUN mkdir -p /etc/docker && \\\n    echo -e \"{\\n\\t\\\"runtimes\\\": {\\n\\t\\t\\\"rune\\\": {\\n\\t\\t\\t\\\"path\\\": \\\"/usr/local/bin/rune\\\",\\n\\t\\t\\t\\\"runtimeArgs\\\": []\\n\\t\\t}\\n\\t}\\n}\" >> /etc/docker/daemon.json\n\n# install Intel SGX SDK and DCAP\nRUN [ ! -f sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin ] && \\\n    wget -c https://download.01.org/intel-sgx/sgx-linux/$SGX_SDK_VERSION/distro/centos8.2-server/sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin && \\\n    chmod +x sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin && echo -e 'no\\n/opt/intel\\n' | ./sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin && \\\n    rm -f sgx_linux_x64_sdk_$SGX_SDK_RELEASE_NUMBER.bin\n\nRUN [ ! -f sgx_rpm_local_repo.tgz ] && \\\n    wget -c https://download.01.org/intel-sgx/sgx-linux/$SGX_SDK_VERSION/distro/centos8.2-server/sgx_rpm_local_repo.tgz && \\\n    tar xzf sgx_rpm_local_repo.tgz && \\\n    yum-config-manager --add-repo sgx_rpm_local_repo && \\\n    yum makecache && rm -f sgx_rpm_local_repo.tgz\n\nRUN yum install --nogpgcheck -y \\\n    libsgx-uae-service libsgx-dcap-default-qpl \\\n    libsgx-dcap-quote-verify-devel libsgx-dcap-ql-devel && rm -rf /var/cache/yum\n\n# install the packages need by skopeo\nRUN dnf --enablerepo=PowerTools install -y gpgme-devel device-mapper-devel\n\n# remove native contanerd 1.2.13\nRUN rm -rf /usr/bin/containerd /usr/bin/containerd-shim /usr/bin/ctr\n\n# install OPA go dependencies\nRUN go get github.com/open-policy-agent/opa@v0.30.2\nRUN curl -f -L -o opa https://openpolicyagent.org/downloads/v0.30.2/opa_linux_amd64_static\nRUN chmod 755 ./opa && mv opa /usr/local/bin/\n\n# copy binary and configure files\nCOPY --from=eaa /opt/cni                             /opt/cni\nCOPY --from=eaa /etc/containerd                      /etc/containerd\nCOPY --from=eaa /etc/cni                             /etc/cni\nCOPY --from=eaa /etc/crictl.yaml                     /etc\nCOPY --from=eaa /usr/local/bin                       /usr/local/bin\nCOPY --from=eaa /usr/local/bin/containerd            /usr/bin/\nCOPY --from=eaa /usr/local/bin/containerd-shim       /usr/bin/\nCOPY --from=eaa /usr/local/bin/ctr                   /usr/bin/\n"
}