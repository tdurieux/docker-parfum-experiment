{
  "startTime": 1674220279392,
  "endTime": 1674220280758,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 170
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 22,
        "columnEnd": 101
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM archlinux\n\nRUN yes | pacman -Syu\nRUN yes | pacman -Sy sudo vim git\nRUN yes | pacman --noconfirm -Sy base-devel\n\nRUN groupadd sudoers\nRUN echo \"build   ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\nRUN useradd --create-home --groups sudoers -m build && echo \"build:build\" | chpasswd\n\nUSER build\nENV HOME /home/build\n\n\nWORKDIR /home/build\nRUN yes | sudo pacman -Sy cmake ninja\nRUN yes | sudo pacman -Sy emscripten\nENV PATH=\"/usr/lib/emscripten/:${PATH}\"\nENV BINARYEN=\"/usr/\"\n\n# Use as many cores as possible when building pakages\nRUN sudo sed -i '/#MAKEFLAGS=\"-j2\"/c\\MAKEFLAGS=\"-j$(nproc)\"' /etc/makepkg.conf\n\nRUN git clone https://aur.archlinux.org/yay.git /home/build/yay\nWORKDIR /home/build/yay\n\nRUN yes | sudo pacman -Sy go\nRUN yes | makepkg -si\n\n\nRUN yes | sudo pacman -Sy sdl2 glfw-x11 openal vulkan-icd-loader\n\nWORKDIR /home/build/\n\nRUN yes | sudo pacman -Sy devil faad2 libpng libjpeg freetype2 assimp\n\nRUN yes | yay --noconfirm -S imgui-src\n\nRUN yes | sudo pacman -Sy glfw-x11\nRUN yes | sudo pacman -Sy libffi\n\n\nRUN mkdir local-pkgs\n\n# To repeat this build, the system requires the following prebuilt packages and their deps\nENV CORRADE corrade-dev.release-1-x86_64.pkg.tar.xz\nENV CORRADE_WASM emscripten-corrade-dev.wasm-1-any.pkg.tar.xz\nENV MAGNUM magnum-dev.release-1-x86_64.pkg.tar.xz\nENV MAGNUM_WASM emscripten-magnum-dev.wasm.webgl2-1-any.pkg.tar.xz\nENV MAGNUM_PLUGINS_WASM emscripten-magnum-plugins-dev.wasm.webgl2-1-any.pkg.tar.xz\nENV INT_MONOPTICON_WASM monopticon-magnum-integration-2019.10.r48.gcc90f56-1-x86_64.pkg.tar.xz\n\n# corrade + magnum built normally & for emscripten-wasm-webgl2\nCOPY ${CORRADE} local-pkgs\n\nCOPY ${CORRADE_WASM} local-pkgs\n\nCOPY ${MAGNUM}  local-pkgs\nCOPY ${MAGNUM_WASM}  local-pkgs\n\n# magnum integration & plugins\nCOPY ${MAGNUM_PLUGINS_WASM} local-pkgs\n\nCOPY ${INT_MONOPTICON_WASM} local-pkgs\n\n# Install all local packages\nRUN yes | sudo pacman -U local-pkgs/${CORRADE}\nRUN yes | sudo pacman -U local-pkgs/${CORRADE_WASM}\nRUN yes | sudo pacman -U local-pkgs/${MAGNUM}\nRUN yes | sudo pacman -U local-pkgs/${MAGNUM_WASM}\nRUN yes | sudo pacman -U local-pkgs/${MAGNUM_PLUGINS_WASM}\nRUN yes | sudo pacman -U local-pkgs/${INT_MONOPTICON_WASM}\n\nRUN yes | sudo pacman -Syyu\n\n# Setup emscripten environment\nRUN emcc --version\n\nENV EM_CONFIG $HOME/.emscripten\nCOPY ./emscripten-conf $HOME/.emscripten\n\n# Download and build freetype emscripten port.\nRUN emcc -s USE_FREETYPE=1 /usr/lib/emscripten/tests/freetype_test.c\n\nARG PROTOBUF_VERSION=\"3.9.0\"\n\n# Build specific version of protobuf\nRUN cd $HOME && \\\n    curl -f https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOBUF_VERSION/protobuf-cpp-$PROTOBUF_VERSION.tar.gz -L > protobuf-cpp-$PROTOBUF_VERSION.tar.gz && \\\n    tar xvzf ./protobuf-cpp-$PROTOBUF_VERSION.tar.gz && rm ./protobuf-cpp-$PROTOBUF_VERSION.tar.gz\n\nWORKDIR \"${HOME}/protobuf-$PROTOBUF_VERSION\"\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make\nRUN sudo make install && sudo ldconfig\n\nWORKDIR $HOME\n\nENV PROTOBUF_PATCH 0001-patch-apply-kwonji.patch\nCOPY ${PROTOBUF_PATCH} local-pkgs\n\nRUN mkdir protobuf && tar xvzf protobuf-cpp-$PROTOBUF_VERSION.tar.gz -C protobuf --strip-components 1 && \\\n    cd $HOME/protobuf && patch -p1 < ~/local-pkgs/${PROTOBUF_PATCH} && rm protobuf-cpp-$PROTOBUF_VERSION.tar.gz\n\nRUN cd $HOME/protobuf && \\\n    sh autogen.sh && \\\n    emconfigure ./configure --prefix=/usr/lib/emscripten/system/ && \\\n    emmake make && \\\n    sudo make install\n\n# Rename the compiled wasm (shared object) archives to the expected extension\nRUN cd $HOME/protobuf && \\\n   sudo cp src/.libs/libprotobuf.a /usr/lib/emscripten/system/lib/protobuf.bc && \\\n   sudo cp src/.libs/libprotobuf-lite.a /usr/lib/emscripten/system/lib/protobuf-lite.bc\n\n# Include pugixml\nENV PUGI_VER=\"1.10\"\n\nRUN curl -f https://github.com/zeux/pugixml/releases/download/v1.10/pugixml-$PUGI_VER.tar.gz -L > pugixml.tar.gz && \\\n    tar xvzf pugixml.tar.gz && rm pugixml.tar.gz\n\nCOPY Emscripten-wasm.cmake local-pkgs/\n\nRUN mkdir $HOME//pugixml-$PUGI_VER/build && \\\n    cd $HOME/pugixml-$PUGI_VER/build && \\\n    cmake .. -DCMAKE_TOOLCHAIN_FILE=/home/build/local-pkgs/Emscripten-wasm.cmake -DCMAKE_PREFIX_PATH=/usr/lib/emscripten/system -DCMAKE_INSTALL_PREFIX=/usr/lib/emscripten/system && \\\n    cmake --build . && \\\n    sudo make install\n"
}