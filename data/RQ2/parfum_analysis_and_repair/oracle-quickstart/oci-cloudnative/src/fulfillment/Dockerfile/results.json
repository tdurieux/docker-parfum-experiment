{
  "startTime": 1674246412277,
  "endTime": 1674246413241,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 18,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG APPLICATION_NAME=\"fulfillment\"\nARG VERSION=\"0.0.1-SNAPSHOT\"\n\n# Stage 1 : Setup the build environment\nFROM gradle:6.5-jdk11 as buildenv\n\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY settings.gradle /usr/src/app\n# copy buildscript and cache all dependencies\nCOPY build.gradle /usr/src/app\nCOPY gradle.properties /usr/src/app\n#RUN gradle --refresh-dependencies\n\n# Stage 2 : Build the application\nFROM buildenv as appbuild\n# Copy the source code.\n# This layer is recreated only when there are actual source chnages\nCOPY src /usr/src/app/src\n# build an executable fat jar\nRUN gradle clean assemble\n\n# Stage 3 : Build a native image using GraalVM\nFROM oracle/graalvm-ce:20.1.0-java11 as graalvm\nCOPY --from=appbuild /usr/src/app/build /home/app/fulfillment\nWORKDIR /home/app/fulfillment/\nRUN gu install native-image\nRUN native-image --no-server  -cp libs/fulfillment-*-all.jar\n\n# Step 4 : Build the final application image\nFROM frolvlad/alpine-glibc\nRUN apk update && apk add --no-cache libstdc++\nEXPOSE 80\nCOPY --from=graalvm /home/app/fulfillment/fulfillment /app/fulfillment\nENTRYPOINT [\"/app/fulfillment\", \"-Djava.library.path=/app\"]\n\n"
}