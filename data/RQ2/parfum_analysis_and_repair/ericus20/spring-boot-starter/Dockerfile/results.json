{
  "startTime": 1674252497745,
  "endTime": 1674252498514,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#### Stage 1: Build the application\nFROM openjdk:17-alpine as build\n\n# Set the current working directory inside the image\nWORKDIR /app\n\n# Copy gradle executable to the image\nCOPY gradlew .\nCOPY gradle gradle\nCOPY build.gradle .\n\n# Copy the libs folder\nCOPY libs libs\n\n# Set permission to execute file\nRUN chmod +x gradlew\n\n# Prepare and install dos2unix to make gradlew file accessible\nRUN apk update && apk add --no-cache dos2unix\nRUN dos2unix gradlew\n\nRUN apk update\nRUN apk add --no-cache curl\n\n# Copy the project source\nCOPY src src\n\nCOPY src/main/scripts/wait-for-it.sh wait-for-it.sh\nRUN chmod +x wait-for-it.sh && dos2unix wait-for-it.sh\n\nCOPY src/main/scripts/start.sh start.sh\nRUN chmod +x start.sh && dos2unix start.sh\n\n# Package the application\nRUN ./gradlew bootJar\n\nWORKDIR /app/build\nRUN mkdir -p dependency  \\\n    && (cd dependency || return; jar -xf ../libs/*.jar)\n\n#### Stage 2: A minimal docker image with command to run the app\nFROM openjdk:17-jdk-slim\n\n# Set the current working directory inside the image\nWORKDIR /app\n\nARG DEPENDENCY=/app/build/dependency\n\n# Copy project dependencies from the build stage\nCOPY --from=build ${DEPENDENCY}/BOOT-INF/lib ./lib\nCOPY --from=build ${DEPENDENCY}/META-INF ./META-INF\nCOPY --from=build ${DEPENDENCY}/BOOT-INF/classes .\n\nCOPY --from=build /app/wait-for-it.sh ./wait-for-it.sh\nCOPY --from=build /app/start.sh ./start.sh\n\nENTRYPOINT [\"./start.sh\"]\n"
}