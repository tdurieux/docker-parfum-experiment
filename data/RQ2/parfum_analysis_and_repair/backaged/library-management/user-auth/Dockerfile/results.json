{
  "startTime": 1674218120346,
  "endTime": 1674218123797,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 20,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 20,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 38,
        "columnEnd": 54
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 48,
        "columnEnd": 64
      }
    }
  ],
  "repairedDockerfile": "# Step 1 : Builder image\n#\nFROM node:10-alpine AS builder\n\n# Define working directory and copy source\nWORKDIR /home/node/app\nCOPY . .\n# Install dependencies and build whatever you have to build\n# (babel, grunt, webpack, etc.)\nRUN yarn install && yarn run build && yarn cache clean;\n\n###############################################################################\n# Step 2 : Run image\n#\nFROM node:10-alpine\n\n# Taking PORT from argument\nARG PORT\n\nENV NODE_ENV=production\nWORKDIR /home/node/app\n\n# Install deps for production only\nCOPY --from=builder /home/node/app/package* /home/node/app/yarn.lock ./\nRUN yarn install && yarn cache clean --force && yarn cache clean;\n# Copy builded source from the upper builder stage\nCOPY --from=builder /home/node/app/dist .\n\n# Expose ports (for orchestrators and dynamic reverse proxies)\nEXPOSE ${PORT}\n\n# Start the app\nCMD [\"node\", \"delivery/http/server.js\"]"
}