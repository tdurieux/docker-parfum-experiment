{
  "startTime": 1674246316828,
  "endTime": 1674246318200,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 53,
        "columnStart": 10,
        "columnEnd": 62
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 41,
        "lineEnd": 42,
        "columnStart": 10,
        "columnEnd": 84
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 44,
        "lineEnd": 49,
        "columnStart": 10,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# By default, use ubuntu:focal\nARG BASE_IMAGE=\"ubuntu:focal\"\nFROM ${BASE_IMAGE}\n\n# Label the image for various checking and cleanup\nARG LLVM_PROJECT_SHA1\nARG LLVM_PROJECT_SHA1_DATE\nARG LLVM_PROJECT_DOCKERFILE_SHA1\nARG ONNX_MLIR_PR_NUMBER\nARG ONNX_MLIR_PR_NUMBER2\nLABEL llvm_project_sha1=${LLVM_PROJECT_SHA1}\nLABEL llvm_project_sha1_date=${LLVM_PROJECT_SHA1_DATE}\nLABEL llvm_project_dockerfile_sha1=${LLVM_PROJECT_DOCKERFILE_SHA1}\nLABEL onnx_mlir_pr_number=${ONNX_MLIR_PR_NUMBER}\nLABEL onnx_mlir_pr_number2=${ONNX_MLIR_PR_NUMBER2}\n\nARG NPROC=4\nARG WORK_DIR=/workdir\nWORKDIR ${WORK_DIR}\n\n# Install tools needed\nRUN distro=$(cat /etc/os-release|grep -Po '(?<=^ID=\").*(?=\")|(?<=^ID=)[^\"].*[^\"]') \\\n    && TZ=\"America/New_York\" \\\n    && if [ \"${distro}\" = \"debian\" ] || [ \"${distro}\" = \"ubuntu\" ];then \\\n          DEBIAN_FRONTEND=noninteractive && \\\n          apt-get update -qq && \\\n          apt-get install -qq -y --no-install-recommends tzdata && \\\n          ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime && \\\n          dpkg-reconfigure -f noninteractive tzdata && \\\n          apt-get install -qq -y --no-install-recommends \\\n                  autoconf automake ca-certificates cmake curl \\\n                  default-jdk-headless gcc g++ git libncurses-dev \\\n                  libtool make maven ninja-build openjdk-11-jdk-headless \\\n                  python3 python3-dev python3-distutils python3-numpy \\\n                  python3-pip python3-pytest-xdist python3-setuptools \\\n                  python3-typing-extensions zlib1g-dev && \\\n          rm -rf /var/lib/apt/lists/* && \\\n          ln -sf /usr/bin/pytest-3 /usr/bin/pytest; \\\n       elif [ \"${distro}\" = \"rhel\" ] || [ \"${distro}\" = \"fedora\" ]; then \\\n          ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime && \\\n\t  ([ -x /usr/bin/microdnf ] && microdnf install -y yum) && \\\n          yum install -q -y \\\n              https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && \\\n          yum update -q -y && \\\n          yum install -q -y \\\n              autoconf automake ca-certificates cmake diffutils \\\n              file java-11-openjdk-devel java-11-openjdk-headless \\\n              gcc gcc-c++ git libtool make ncurses-devel \\\n              python39 python39-devel python39-numpy python39-pip \\\n              python39-setuptools python39-wheel zlib-devel && \\\n          # Use same versions as those in ubuntu:focal\n          pip3 install --no-cache-dir -q \\\n               Cython pytest==4.6.9 pytest-forked==1.1.3 \\\n               pytest-xdist==1.31.0 typing-extensions==3.7.4.1 && \\\n          rm -rf /var/cache/dnf/* && \\\n          # Install ninja\n          git clone -b v1.10.2 https://github.com/ninja-build/ninja.git && \\\n          cd ninja && mkdir -p build && cd build && \\\n          cmake .. && \\\n          make -j${NPROC} install && \\\n          cd ${WORK_DIR} && rm -rf ninja; rm -rf /var/cache/yum \\\n       fi \\\n    && ln -sf /usr/bin/python3 /usr/bin/python\n\n# Install protobuf\nARG PROTOBUF_VERSION=3.14.0\nRUN git clone -b v${PROTOBUF_VERSION} --recursive https://github.com/google/protobuf.git \\\n    && cd protobuf && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static=no \\\n    && make -j${NPROC} install && ldconfig \\\n    && cd python && python setup.py install \\\n    && cd ../.. && rm -rf protobuf\n\n# Install jsoniter\nARG JSONITER_VERSION=0.9.23\nRUN JSONITER_URL=https://repo1.maven.org/maven2/com/jsoniter/jsoniter/${JSONITER_VERSION} \\\n    && JSONITER_FILE=jsoniter-${JSONITER_VERSION}.jar \\\n    && curl -f -s ${JSONITER_URL}/${JSONITER_FILE} -o /usr/share/java/${JSONITER_FILE}\n\n# Clone and build llvm-project and run tests\nARG BUILD_SHARED_LIBS=OFF\nRUN git clone -n https://github.com/llvm/llvm-project.git \\\n    && cd llvm-project \\\n    && git checkout ${LLVM_PROJECT_SHA1} \\\n    && mkdir -p build && cd build \\\n    && cmake -G Ninja ../llvm \\\n             -DLLVM_ENABLE_PROJECTS=mlir \\\n             -DLLVM_TARGETS_TO_BUILD=\"host\" \\\n             -DCMAKE_BUILD_TYPE=Release \\\n             -DLLVM_ENABLE_ASSERTIONS=ON \\\n             -DLLVM_ENABLE_RTTI=ON \\\n             -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} \\\n    && cmake --build . --parallel ${NPROC} -- ${MAKEFLAGS} \\\n    && (cmake --build . --parallel ${NPROC} --target check-mlir || \\\n        [ \"$(uname -m)\" = \"s390x\" ]) \\\n    && rm -rf /tmp/* \\\n    && echo \"llvm-project commit $(git rev-parse HEAD) successfully built\"\n\nLABEL llvm_project_successfully_built=yes\n"
}