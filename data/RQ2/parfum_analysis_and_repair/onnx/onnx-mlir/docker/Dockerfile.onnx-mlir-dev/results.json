{
  "startTime": 1674251934031,
  "endTime": 1674251934971,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE\nFROM ${BASE_IMAGE} AS onnx-mlir-dev-test\n\n# Label the base image so it can be cleaned up after becoming dangling\nARG ONNX_MLIR_PR_NUMBER\nARG ONNX_MLIR_PR_NUMBER2\nLABEL onnx_mlir_pr_number=${ONNX_MLIR_PR_NUMBER}\nLABEL onnx_mlir_pr_number2=${ONNX_MLIR_PR_NUMBER2}\n\nARG WORK_DIR=/workdir\nWORKDIR ${WORK_DIR}\n\n# Copy onnx-mlir from the pull request\nCOPY . onnx-mlir\n\n# Setup onnx\n# Install into lib instead of lib64 since everything else is in lib\nRUN ONNX_ROOT=${WORK_DIR}/onnx-mlir/third_party/onnx \\\n    && INSTALL_LIB=$(python3 -c \"import re; import site; \\\n         print(list(filter(lambda site: not re.search('lib64', site), \\\n                           site.getsitepackages()))[0])\") \\\n    && cd ${ONNX_ROOT} \\\n    && python3 setup.py -q install --install-lib=${INSTALL_LIB} \\\n    && rm -rf .eggs .setuptools-cmake-build build dist onnx.egg-info\n\nARG NPROC=4\nARG ACCEL=NNPA\nARG TEST_MCPU\n\nRUN LLVM_PROJECT_ROOT=${WORK_DIR}/llvm-project \\\n    && ONNX_MLIR_ROOT=${WORK_DIR}/onnx-mlir \\\n# Build onnx-mlir and run tests\n    && cd ${ONNX_MLIR_ROOT} \\\n    && rm -rf build && mkdir -p build && cd build \\\n# NNPA acclerator is built on all archs to enable lit tests\n# (dependent libzdnn is built on s390x only)\n    && cmake -DMLIR_DIR=${LLVM_PROJECT_ROOT}/build/lib/cmake/mlir \\\n             -DCMAKE_BUILD_TYPE=Debug \\\n             -DONNX_MLIR_TEST_OPTLEVEL=0 \\\n             -DONNX_MLIR_ACCELERATORS=${ACCEL} .. \\\n    && make -j${NPROC} \\\n    && make -j${NPROC} LIT_OPTS=-v check-onnx-lit \\\n# Dev image is built without SIMD, placeholder for easy SIMD enablement\n    && TEST_MCPU=$([ \"$(uname -m)\" = \"s390x\" ] && echo || \\\n                   [ \"$(uname -m)\" = \"x86_64\" ] &&  echo || \\\n                   [ \"$(uname -m)\" = \"ppc64le\" ] && echo || echo) \\\n    && TEST_ARGS=\"-mcpu=${TEST_MCPU}\" \\\n    && TEST_OPTLEVEL=0 \\\n    && make NPROC=${NPROC} \\\n            CTEST_PARALLEL_LEVEL=${NPROC} \\\n            TEST_MCPU=${TEST_MCPU} \\\n            TEST_ARGS=\"${TEST_ARGS}\" \\\n            TEST_OPTLEVEL=${TEST_OPTLEVEL} \\\n            -j${NPROC} -f CMakeFiles/Makefile2 \\\n            check-onnx-backend \\\n            check-onnx-backend-dynamic \\\n            check-onnx-backend-constant \\\n            check-onnx-backend-signature \\\n            check-onnx-backend-jni \\\n            check-onnx-backend-dynamic-jni \\\n            check-onnx-backend-constant-jni \\\n            check-onnx-backend-input-verification\\\n            check-onnx-numerical \\\n    && make check-docs \\\n# When building for push event to publish the image, unshallow and\n# rename origin to upstream to make the repo a bit more dev friendly.\n    && if [ \"${ONNX_MLIR_PR_NUMBER}\" != \"${ONNX_MLIR_PR_NUMBER2}\" ]; then \\\n          git fetch --unshallow && \\\n          git remote rename origin upstream; \\\n       fi \\\n# Install joblib for model zoo tests \\\n    && pip3 install --no-cache-dir -q joblib \\\n    && rm -rf /tmp/*\n\n# Copy from onnx-mlir-dev-test to squash removed source layer and\n# remove dependency on base image (onnx-mlir-llvm-static)\nFROM scratch\n\nARG WORK_DIR=/workdir\nWORKDIR ${WORK_DIR}\n\n# Label the images for various checking and cleanup\nARG ONNX_MLIR_SHA1\nARG ONNX_MLIR_SHA1_DATE\nARG ONNX_MLIR_DOCKERFILE_SHA1\nARG ONNX_MLIR_PR_NUMBER\nARG ONNX_MLIR_PR_NUMBER2\nLABEL onnx_mlir_sha1=${ONNX_MLIR_SHA1}\nLABEL onnx_mlir_sha1_date=${ONNX_MLIR_SHA1_DATE}\nLABEL onnx_mlir_dockerfile_sha1=${ONNX_MLIR_DOCKERFILE_SHA1}\nLABEL onnx_mlir_pr_number=${ONNX_MLIR_PR_NUMBER}\nLABEL onnx_mlir_pr_number2=${ONNX_MLIR_PR_NUMBER2}\n\nCOPY --from=onnx-mlir-dev-test / /\nCMD [ \"/bin/bash\" ]\nLABEL onnx_mlir_successfully_built=yes\n"
}