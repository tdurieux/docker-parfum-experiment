{
  "startTime": 1674247064544,
  "endTime": 1674247067746,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 129
      }
    }
  ],
  "repairedDockerfile": "# BASE STAGE\nFROM debian:bullseye-slim as main\n\n# Install dependencies\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get --no-install-recommends -y install tzdata && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y --fix-missing bash python3 python3-pip python3-venv python3-dev sudo curl dnsutils && rm -rf /var/lib/apt/lists/*;\n\nARG TARGETARCH\nARG dhid\nENV DOCKER_HUB_ID=$dhid\nENV CONFIGURATOR_USER=configurator\nENV TZ=UTC\n\nRUN echo \"$CONFIGURATOR_USER     ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n    && addgroup --system $CONFIGURATOR_USER \\\n    && adduser --system $CONFIGURATOR_USER \\\n    && adduser $CONFIGURATOR_USER $CONFIGURATOR_USER \\\n    && mkdir -p /home/$CONFIGURATOR_USER/data/logs \\\n    && mkdir -p /home/$CONFIGURATOR_USER/data/config \\\n    && mkdir -p /home/$CONFIGURATOR_USER/app/web \\\n    && chown -R $CONFIGURATOR_USER:$CONFIGURATOR_USER /home/$CONFIGURATOR_USER\n\n# Create symlink for backward compatibility\nRUN ln -s /home/$CONFIGURATOR_USER/data/config /home/$CONFIGURATOR_USER/app/res && \\\n    ln -s /home/$CONFIGURATOR_USER/data/logs /home/$CONFIGURATOR_USER/logs && \\\n    chown -R $CONFIGURATOR_USER:$CONFIGURATOR_USER /home/$CONFIGURATOR_USER/logs\n#######################################\n# BUILD JS STAGE\nFROM jitsucom/configurator-builder as jsbuilder\n\n# Install npm dependencies\nADD configurator/frontend/package.json /frontend/package.json\n\nARG SKIP_UI_BUILD\nENV SKIP_UI=$SKIP_UI_BUILD\n\nWORKDIR /frontend\n\n# Copy project\nADD configurator/frontend/. ./\n\n# We need to make sure empty 'build' directory exists if SKIP_UI_BUILD==true and pnpm won't make it\nRUN mkdir -p ./main/build\n\n# write the output of the date command into a file called tmp_variable\nRUN free | awk 'FNR == 2 {print $2}' > ./main/build/mem\n\n# Check RAM > 4gb else error (JS build requires >4gb RAM)\nRUN if [ $(cat ./main/build/mem) < \"4000000\" ]; then echo echo Docker build requires 4gb of RAM. Configure it in the machine Docker configuration && exit 1; else rm ./main/build/mem; fi\n\n# Install dependencies\nRUN if [ \"$SKIP_UI\" != \"true\" ]; then pnpm i; fi\n\n# Build\nRUN if [ \"$SKIP_UI\" != \"true\" ]; then CI=false ANALYTICS_KEYS='{\"eventnative\": \"js.gpon6lmpwquappfl07tuq.ka5sxhsm08cmblny72tevi\", \"sentry\": \"https://5d29508173c04d86b31638517ebf89b3@o330694.ingest.sentry.io/6365760\"}' pnpm build; fi\n\n\n#######################################\n# BUILD BACKEND STAGE\nFROM jitsucom/jitsu-builder:$TARGETARCH as builder\n\nENV CONFIGURATOR_USER=configurator\n\nRUN mkdir -p /go/src/github.com/jitsucom/jitsu/$CONFIGURATOR_USER/backend && \\\n    mkdir -p /go/src/github.com/jitsucom/jitsu/server\n\nWORKDIR /go/src/github.com/jitsucom/jitsu/$CONFIGURATOR_USER/backend\n\n#Caching dependencies\nADD configurator/backend/go.mod ./\nADD server/go.mod /go/src/github.com/jitsucom/jitsu/server/\nRUN go mod download\n\n#Copy backend\nADD openapi /go/src/github.com/jitsucom/jitsu/openapi\nADD configurator/backend/. ./.\nADD server /go/src/github.com/jitsucom/jitsu/server\nADD .git /go/src/github.com/jitsucom/jitsu/.git\n\n# Build\nRUN make docker_assemble\n\n#######################################\n# FINAL STAGE\nFROM main as final\n\n\n# copy static files from build-image\nCOPY --from=builder /go/src/github.com/jitsucom/jitsu/$CONFIGURATOR_USER/backend/build/dist /home/$CONFIGURATOR_USER/app\n\nCOPY --from=jsbuilder /frontend/main/build /home/$CONFIGURATOR_USER/app/web\n\nRUN chown -R $CONFIGURATOR_USER:$CONFIGURATOR_USER /home/$CONFIGURATOR_USER/app\n\nADD configurator/backend/entrypoint.sh /home/$CONFIGURATOR_USER/entrypoint.sh\nRUN chmod +x /home/$CONFIGURATOR_USER/entrypoint.sh\n\nUSER $CONFIGURATOR_USER\nWORKDIR /home/$CONFIGURATOR_USER/app\n\nCOPY docker/configurator.yaml /home/$CONFIGURATOR_USER/data/config/\n\nVOLUME [\"/home/$CONFIGURATOR_USER/data\"]\nEXPOSE 7000\n\nENTRYPOINT /home/$CONFIGURATOR_USER/entrypoint.sh"
}