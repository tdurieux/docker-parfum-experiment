{
  "startTime": 1674249740042,
  "endTime": 1674249740621,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04\n\n# change software source\nCOPY ./docker/sources.list /etc/apt/sources.list\nCOPY ./docker/.condarc /root/.condarc\nCOPY ./docker/pip.conf /root/.pip/pip.conf\n\n# apt software\nRUN apt-get update && apt-get install --no-install-recommends -y wget gnuplot git \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# miniconda\nWORKDIR /app\nENV PATH=\"/miniconda3/bin:$PATH\"\n# installation\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda-latest.sh \\\n    && bash ./miniconda-latest.sh -b -p /miniconda3 \\\n    && ln -s /miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n    && echo \". /miniconda3/etc/profile.d/conda.sh\" >> ~/.bashrc \\\n    && find /miniconda3/ -follow -type f -name '*.a' -delete \\\n    && find /miniconda3/ -follow -type f -name '*.js.map' -delete \\\n    && conda clean -afy\n# create environment\nRUN conda create -n fgnn_env cmake cudnn==7.6.5 python==3.8 \\\n      pytorch==1.7.1 torchvision==0.8.2 torchaudio==0.7.2 cudatoolkit=10.1 -c pytorch -y \\\n    && conda clean -afy \\\n    && echo \"conda activate fgnn_env\" >> ~/.bashrc\n\n# Make RUN commands use the new environment:\nSHELL [\"conda\", \"run\", \"--no-capture-output\", \"-n\", \"fgnn_env\", \"/bin/bash\", \"-c\"]\n\nWORKDIR /app/source\nCOPY . ./fgnn\n# install dgl\nRUN pip install --no-cache-dir 'numpy>=1.14.0' 'scipy>=1.1.0' 'networkx>=2.1' 'requests>=2.19.0' \\\n    && bash ./fgnn/3rdparty/dgl_install.sh\n# install fastgraph\nRUN bash ./fgnn/utility/fg_install.sh\n# install pyg\nRUN bash ./fgnn/3rdparty/pyg_install.sh\n\n# install fgnn\nRUN pushd ./fgnn \\\n    && bash ./build.sh \\\n    && rm -rf build \\\n    && rm -rf 3rdparty/dgl/build \\\n    && popd \\\n    && echo \"ulimit -l unlimited\" >> ~/.bashrc\n"
}