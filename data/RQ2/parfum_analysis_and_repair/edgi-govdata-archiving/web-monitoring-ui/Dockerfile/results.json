{
  "startTime": 1674217974829,
  "endTime": 1674217976321,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### Baseline image for development/test/build ###\n# We require a lot of extras for building (Python, GCC) because of Node-Zopfli.\nFROM node:16.13.1 as dev\nLABEL maintainer=\"enviroDGI@gmail.com\"\n\nRUN mkdir -p /app\nWORKDIR /app\n\n# Copy dependencies only so they can be cached.\nCOPY package.json package-lock.json ./\n\n# Install deps.\nRUN npm ci\n\n# Finally, pull in the source.\n# TODO: can we mount so this can be used for live-reload dev?\nCOPY . .\n\nCMD [\"/bin/bash\"]\n\n\n### Build a production version of the app ###\n# Note this *creates* production artifacts. The docker image created here\n# should never actually be distributed; it's just an intermediate.\nFROM dev as build\nENV NODE_ENV=production\nRUN npm run build-production\n\n\n### Release Image ###\n# It might feel ridiculous to build up all the same things again, but the\n# resulting image is less than half the size!\nFROM node:16.13.1-slim as release\nLABEL maintainer=\"enviroDGI@gmail.com\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends dumb-init && rm -rf /var/lib/apt/lists/*;\n\nENV NODE_ENV=production\n\nRUN mkdir -p /app\nWORKDIR /app\n\n# Copy dependencies only so they can be cached.\nCOPY package.json package-lock.json ./\nEXPOSE 3001\n\n# Install deps.\nRUN npm ci --only=production\n\n# Now copy all source.\nCOPY . .\nCOPY --from=build /app/dist ./dist\n\n# Run server. Use dumb-init because Node does not handle Docker's stop signal.\nENTRYPOINT [\"dumb-init\", \"--\"]\nCMD [\"npm\", \"run\", \"start\"]\n"
}