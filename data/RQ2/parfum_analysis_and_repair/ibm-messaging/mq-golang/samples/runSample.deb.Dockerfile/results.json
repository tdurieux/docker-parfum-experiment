{
  "startTime": 1674256085313,
  "endTime": 1674256086387,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 5,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Â© Copyright IBM Corporation 2019, 2021\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# This Dockerfile has two separate stages.\n#\n# The first stage is used to compile the Go program, where we need tools like the Go and C compilers.\n# The second stage is a runtime-only container that holds just the things we need to\n# execute the compiled program.\n#\n# Files and directories are copied from the builder container to the runtime container as needed.\n# Just for fun, I've used two different base images, trying to get the runtime image as small\n# as possible while still using a \"regular\" libc-based container.\n\n# Start by setting some global variables that can still be overridden on the build command line.\nARG BASE_IMAGE=ubuntu:18.04\nARG GOPATH_ARG=\"/go\"\nARG GOVERSION=1.13.15\n\n###########################################################\n# This starts the BUILD phase\n###########################################################\nFROM $BASE_IMAGE AS builder\n\nARG GOVERSION\nARG GOPATH_ARG\nENV GOVERSION=${GOVERSION}   \\\n    GOPATH=$GOPATH_ARG \\\n    GOTAR=go${GOVERSION}.linux-amd64.tar.gz \\\n    ORG=\"github.com/ibm-messaging\"\n\n# Install the Go compiler and Git\nRUN export DEBIAN_FRONTEND=noninteractive \\\n  && bash -c 'source /etc/os-release; \\\n     echo \"deb http://archive.ubuntu.com/ubuntu/ ${UBUNTU_CODENAME} main restricted\" > /etc/apt/sources.list; \\\n     echo \"deb http://archive.ubuntu.com/ubuntu/ ${UBUNTU_CODENAME}-updates main restricted\" >> /etc/apt/sources.list; \\\n     echo \"deb http://archive.ubuntu.com/ubuntu/ ${UBUNTU_CODENAME}-backports main restricted universe\" >> /etc/apt/sources.list; \\\n     echo \"deb http://archive.ubuntu.com/ubuntu/ ${UBUNTU_CODENAME} universe\" >> /etc/apt/sources.list; \\\n     echo \"deb http://archive.ubuntu.com/ubuntu/ ${UBUNTU_CODENAME}-updates universe\" >> /etc/apt/sources.list;' \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    git \\\n    wget \\\n    ca-certificates \\\n    curl \\\n    tar \\\n    bash \\\n    go-dep \\\n    build-essential \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Create a location for the go programs and the MQ installation\nRUN mkdir -p $GOPATH/src $GOPATH/bin $GOPATH/pkg \\\n  && chmod -R 777 $GOPATH \\\n  && cd /tmp       \\\n  && wget -nv https://dl.google.com/go/${GOTAR} \\\n  && tar -xf ${GOTAR} \\\n  && mv go /usr/lib/go-${GOVERSION} \\\n  && rm -f ${GOTAR} \\\n  && mkdir -p /opt/mqm \\\n  && chmod a+rx /opt/mqm\n\n# Location of the downloadable MQ client package \\\nENV RDURL=\"https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqdev/redist\" \\\n    RDTAR=\"IBM-MQC-Redist-LinuxX64.tar.gz\" \\\n    VRMF=9.3.0.0\n\n# Install the MQ client from the Redistributable package. This also contains the\n# header files we need to compile against. Setup the subset of the package\n# we are going to keep - the genmqpkg.sh script removes unneeded parts\nENV genmqpkg_incnls=1 \\\n    genmqpkg_incsdk=1 \\\n    genmqpkg_inctls=1\n\nRUN cd /opt/mqm \\\n  && curl -f -LO \"$RDURL/$VRMF-$RDTAR\" \\\n  && tar -zxf ./*.tar.gz \\\n  && rm -f ./*.tar.gz \\\n  && bin/genmqpkg.sh -b /opt/mqm\n\n# We need the Go compiler in our PATH\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/go-$GOVERSION/bin\n\n# Copy the source file over. We also need a go.mod file\n# The source for that has a different name in the repo so it doesn't accidentally get\n# used. We rename it during this copy.\nCOPY amqsput.go      $GOPATH_ARG/src\nCOPY runSample.gomod $GOPATH_ARG/src/go.mod\n\n# Do the actual compile. This will automatically download the ibmmq package\nRUN cd $GOPATH_ARG/src && go mod tidy && go build -o $GOPATH_ARG/bin/amqsput amqsput.go\n\n###########################################################\n# This starts the RUNTIME phase\n###########################################################\n# Now that there is a container with the compiled program we can build a smaller\n# runtime image. Start from one of the smaller base container images.\nFROM debian:stretch-slim\nARG GOPATH_ARG\nARG GOVERSION\n\n# Copy over the MQ runtime client code. This does preserve the .h files used during compile\n# but those are tiny so there's no real space-saving from deleting them here.\nCOPY --from=builder /opt/mqm /opt/mqm\n\n# Create some directories that may be needed at runtime, depending on the container's\n# security environment.\nRUN mkdir -p /IBM/MQ/data/errors \\\n  && mkdir -p /.mqm \\\n  && chmod -R 777 /IBM \\\n  && chmod -R 777 /.mqm \\\n  && mkdir -p /go/bin\n\n# The actual program has all of the Go runtime embedded; we only need the single\n# binary along with the MQ client libraries, for it to run.\nCOPY --from=builder $GOPATH_ARG/bin/amqsput /go/bin/amqsput\n\n# The startup script will set MQSERVER and optionally set more\n# environment variables that will be passed to amqsput through this entrypoint.\nENTRYPOINT [ \"/go/bin/amqsput\" ]\n"
}