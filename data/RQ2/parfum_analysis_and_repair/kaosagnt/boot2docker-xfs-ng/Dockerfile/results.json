{
  "startTime": 1674255133500,
  "endTime": 1674255135514,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 330,
        "lineEnd": 330,
        "columnStart": 1,
        "columnEnd": 26
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 348,
        "lineEnd": 348,
        "columnStart": 1,
        "columnEnd": 20
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 303,
        "lineEnd": 303,
        "columnStart": 1,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 1,
        "columnEnd": 56
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 358,
        "lineEnd": 358,
        "columnStart": 1,
        "columnEnd": 103
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:bullseye-slim\n\nSHELL [\"/bin/bash\", \"-Eeuo\", \"pipefail\", \"-xc\"]\n\nRUN apt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tbash-completion \\\n\t\tbc \\\n\t\tbison \\\n\t\tca-certificates \\\n\t\tcpio \\\n\t\tflex \\\n\t\tgcc \\\n\t\tgit \\\n\t\tgnupg dirmngr \\\n\t\tgolang-go \\\n\t\tkmod \\\n\t\tlibc6-dev \\\n\t\tlibc6 \\\n\t\tlibelf-dev \\\n\t\tmake \\\n\t\tp7zip-full \\\n\t\tpatch \\\n\t\tsquashfs-tools \\\n\t\twget \\\n\t\txorriso \\\n\t\txz-utils \\\n\t\tlibcurl4-openssl-dev \\\n\t\tlibxml2-dev \\\n\t\tlibsysfs-dev \\\n\t\tlibssl-dev \\\n\t\tlibgcrypt20 \\\n\t\tautomake \\\n\t\tpkg-config \\\n\t\trsync \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\n# cleaner wget output\nRUN echo 'progress = dot:giga' >> ~/.wgetrc; \\\n# color prompt (better debugging/devel)\n\tcp /etc/skel/.bashrc ~/\n\nWORKDIR /rootfs\n\n# updated via \"update.sh\"\nENV TCL_MIRRORS http://distro.ibiblio.org/tinycorelinux http://repo.tinycorelinux.net\nENV TCL_MAJOR 13.x\nENV TCL_VERSION 13.1\n\n# http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/archive/8.2.1/distribution_files/rootfs64.gz.md5.txt\n# updated via \"update.sh\"\nENV TCL_ROOTFS=\"rootfs64.gz\" TCL_ROOTFS_MD5=\"337441ac3eb75561a9d702d783e678ba\"\n\nCOPY files/tce-load.patch files/udhcpc.patch /tcl-patches/\n\nRUN for mirror in $TCL_MIRRORS; do \\\n\t\tif \\\n\t\t\t{ \\\n# wget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/archive/$TCL_VERSION/distribution_files/$TCL_ROOTFS\" || \\\n# >= 9.x doesn't seem to use \".../archive/X.Y.Z/...\" in the same way as 8.x :(\n\t\t\t\twget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/release/distribution_files/$TCL_ROOTFS\" \\\n\t\t\t; } && echo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c - \\\n\t\t; then \\\n\t\t\tbreak; \\\n\t\tfi; \\\n\tdone; \\\n\techo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c -; \\\n\tzcat /rootfs.gz | cpio \\\n\t\t--extract \\\n\t\t--make-directories \\\n\t\t--no-absolute-filenames \\\n\t; \\\n\trm /rootfs.gz; \\\n\tfor patch in /tcl-patches/*.patch; do \\\n\t\tpatch \\\n\t\t\t--input \"$patch\" \\\n\t\t\t--strip 1 \\\n\t\t\t--verbose \\\n\t\t; \\\n\tdone; \\\n\t\\\n\t{ \\\n\t\techo '# https://1.1.1.1/'; \\\n\t\techo 'nameserver 1.1.1.1'; \\\n\t\techo 'nameserver 1.0.0.1'; \\\n\t\techo; \\\n\t\techo '# https://developers.google.com/speed/public-dns/'; \\\n\t\techo 'nameserver 8.8.8.8'; \\\n\t\techo 'nameserver 8.8.4.4'; \\\n\t} > etc/resolv.conf; \\\n\tcp etc/resolv.conf etc/resolv.conf.b2d; \\\n\t{ \\\n\t\techo '#!/usr/bin/env bash'; \\\n\t\techo 'set -Eeuo pipefail'; \\\n\t\techo \"cd '$PWD'\"; \\\n\t\techo 'cp -T etc/resolv.conf etc/resolv.conf.bak'; \\\n\t\techo 'cp -T /etc/resolv.conf etc/resolv.conf'; \\\n\t\techo 'cp -T /proc/cpuinfo proc/cpuinfo 2>/dev/null || :'; \\\n\t\techo 'trap \"mv -T etc/resolv.conf.bak etc/resolv.conf || :; rm proc/cpuinfo 2>/dev/null || :\" EXIT'; \\\n\t\techo 'env -i PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" TERM=\"$TERM\" chroot '\"'$PWD'\"' \"$@\"'; \\\n\t} > /usr/local/bin/tcl-chroot; \\\n\tchmod +x /usr/local/bin/tcl-chroot\n\n# add new \"docker\" user (and replace \"tc\" user usage with \"docker\")\nRUN tcl-chroot adduser \\\n\t\t-h /home/docker \\\n\t\t-g 'Docker' \\\n\t\t-s /bin/sh \\\n\t\t-G staff \\\n\t\t-D \\\n\t\t-u 1000 \\\n\t\tdocker \\\n\t; \\\n\techo 'docker:tcuser' | tcl-chroot chpasswd; \\\n\techo 'docker ALL = NOPASSWD: ALL' >> etc/sudoers; \\\n\tsed -i 's/USER=\"tc\"/USER=\"docker\"/g' etc/init.d/tc-* etc/init.d/services/*\n\n# https://github.com/tatsushid/docker-tinycore/blob/017b258a08a41399f65250c9865a163226c8e0bf/8.2/x86_64/Dockerfile\nRUN mkdir -p proc; \\\n\ttouch proc/cmdline; \\\n\tmkdir -p tmp/tce/optional usr/local/tce.installed/optional; \\\n\tchown -R root:staff tmp/tce usr/local/tce.installed; \\\n\tchmod -R g+w tmp/tce; \\\n\tln -sT ../../tmp/tce etc/sysconfig/tcedir; \\\n\techo -n docker > etc/sysconfig/tcuser; \\\n\ttcl-chroot sh -c '. /etc/init.d/tc-functions && setupHome'\n\n# as of squashfs-tools 4.4, TCL's unsquashfs is broken... (fails to unsquashfs *many* core tcz files)\n# https://github.com/plougher/squashfs-tools/releases\nENV SQUASHFS_VERSION 4.5\nRUN wget -O squashfs.tgz \"https://github.com/plougher/squashfs-tools/archive/$SQUASHFS_VERSION.tar.gz\"; \\\n\ttar --directory=/usr/src --extract --file=squashfs.tgz; rm squashfs.tgz \\\n\tmake -C \"/usr/src/squashfs-tools-$SQUASHFS_VERSION/squashfs-tools\" \\\n\t\t-j \"$(nproc)\" \\\n# https://github.com/plougher/squashfs-tools/blob/4.4/squashfs-tools/Makefile#L1\n\t\tGZIP_SUPPORT=1 \\\n#\t\tXZ_SUPPORT=1 \\\n#\t\tLZO_SUPPORT=1 \\\n#\t\tLZ4_SUPPORT=1 \\\n#\t\tZSTD_SUPPORT=1 \\\n\t\tEXTRA_CFLAGS='-static' \\\n\t\tEXTRA_LDFLAGS='-static' \\\n\t\tINSTALL_DIR=\"$PWD/usr/local/bin\" \\\n\t\tinstall \\\n\t; \\\n\ttcl-chroot unsquashfs -v || :\n\nRUN { \\\n\t\techo '#!/bin/bash -Eeux'; \\\n\t\techo 'tcl-chroot su -c \"tce-load -wicl \\\"\\$@\\\"\" docker -- - \"$@\"'; \\\n\t} > /usr/local/bin/tcl-tce-load; \\\n\tchmod +x /usr/local/bin/tcl-tce-load\n\nRUN tcl-tce-load bash; \\\n\ttcl-chroot bash --version; \\\n# delete all the TCL user-specific profile/rc files -- they have odd settings like auto-login from interactive root directly to \"tcuser\"\n# (and the bash-provided defaults are reasonably sane)\n\trm -vf \\\n\t\thome/docker/.ashrc \\\n\t\thome/docker/.bashrc \\\n\t\thome/docker/.profile \\\n\t\troot/.ashrc \\\n\t\troot/.bashrc \\\n\t\troot/.profile \\\n\t; \\\n\techo 'source /etc/profile' > home/docker/.profile; \\\n\techo 'source /etc/profile' > root/.profile; \\\n# swap \"docker\" (and \"root\") user shell from /bin/sh to /bin/bash now that it exists\n\tsed -ri '/^(docker|root):/ s!:[^:]*$!:/bin/bash!' etc/passwd; \\\n\tgrep -E '^root:' etc/passwd | grep bash; \\\n\tgrep -E '^docker:' etc/passwd | grep bash; \\\n# /etc/profile has a minor root bug where it uses \"\\#\" in PS1 instead of \"\\$\" (so we get a counter in our prompt instead of a \"#\")\n# but also, does not use \\[ and \\] for escape sequences, so Bash readline gets confused, so let's replace it outright with something perty\n\tgrep '\\\\#' etc/profile; \\\n\techo 'PS1='\"'\"'\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ '\"'\"'' > etc/profile.d/boot2docker-ps1.sh; \\\n\tsource etc/profile.d/boot2docker-ps1.sh; \\\n\t[ \"$PS1\" = '\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ ' ]\n\n# https://www.kernel.org/category/signatures.html#important-fingerprints\nENV LINUX_GPG_KEYS \\\n# Linus Torvalds\n\t\tABAF11C65A2970B130ABE3C479BE3E4300411886 \\\n# Greg Kroah-Hartman\n\t\t647F28654894E3BD457199BE38DBBDC86092693E\n\n# updated via \"update.sh\"\nENV LINUX_VERSION 5.15.54\n\nRUN wget -O /linux.tar.xz \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.xz\"; \\\n\twget -O /linux.tar.asc \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.sign\"; \\\n\t\\\n# decompress (signature is for the decompressed file)\n\txz --decompress /linux.tar.xz; \\\n\t[ -f /linux.tar ] && [ ! -f /linux.tar.xz ]; \\\n\t\\\n# verify\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tfor key in $LINUX_GPG_KEYS; do \\\n\t\tfor mirror in \\\n\t\t\tha.pool.sks-keyservers.net \\\n\t\t\tpgp.mit.edu \\\n\t\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\t\tipv4.pool.sks-keyservers.net \\\n\t\t\tkeyserver.ubuntu.com \\\n\t\t\thkp://keyserver.ubuntu.com:80 \\\n\t\t; do \\\n\t\t\tif gpg --batch --verbose --keyserver \"$mirror\" --keyserver-options timeout=5 --recv-keys \"$key\"; then \\\n\t\t\t\tbreak; \\\n\t\t\tfi; \\\n\t\tdone; \\\n\t\tgpg --batch --fingerprint \"$key\"; \\\n\tdone; \\\n\tgpg --batch --verify /linux.tar.asc /linux.tar; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\t\\\n# extract\n\ttar --extract --file /linux.tar --directory /usr/src; \\\n\trm /linux.tar /linux.tar.asc; \\\n\tln -sT \"linux-$LINUX_VERSION\" /usr/src/linux; \\\n\t[ -d /usr/src/linux ]\n\nRUN { \\\n\t\techo '#!/usr/bin/env bash'; \\\n\t\techo 'set -Eeuo pipefail'; \\\n\t\techo 'while [ \"$#\" -gt 0 ]; do'; \\\n\t\techo 'conf=\"${1%%=*}\"; shift'; \\\n\t\techo 'conf=\"${conf#CONFIG_}\"'; \\\n# https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt\n\t\techo 'find /usr/src/linux/ \\\n\t\t\t-name Kconfig \\\n\t\t\t-exec awk -v conf=\"$conf\" '\"'\"' \\\n\t\t\t\t$1 ~ /^(menu)?config$/ && $2 == conf { \\\n\t\t\t\t\tyes = 1; \\\n\t\t\t\t\tprintf \"-- %s:%s --\\n\", FILENAME, FNR; \\\n\t\t\t\t\tprint; \\\n\t\t\t\t\tnext; \\\n\t\t\t\t} \\\n\t\t\t\t$1 ~ /^(end)?((menu)?config|choice|comment|menu|if|source)$/ { yes = 0; next } \\\n# TODO parse help text properly (indentation-based) to avoid false positives when scraping deps\n\t\t\t\tyes { print; next } \\\n\t\t\t'\"'\"' \"{}\" + \\\n\t\t'; \\\n\t\techo 'done'; \\\n\t} > /usr/local/bin/linux-kconfig-info; \\\n\tchmod +x /usr/local/bin/linux-kconfig-info; \\\n\tlinux-kconfig-info CGROUPS\n\nCOPY files/kernel_config /usr/src/linux/.config\n\nRUN make -C /usr/src/linux olddefconfig; \\\n\tmake -C /usr/src/linux -j \"$(nproc)\" bzImage modules; \\\n\tmake -C /usr/src/linux INSTALL_MOD_PATH=\"$PWD\" modules_install\nRUN mkdir -p /tmp/iso/boot; \\\n\tcp -vLT /usr/src/linux/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz\n\nRUN tcl-tce-load \\\n\t\tacpid \\\n\t\tbash-completion \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\te2fsprogs \\\n\t\tgit \\\n\t\tiproute2 \\\n\t\tiptables \\\n\t\tnfs-utils \\\n\t\topenssh \\\n\t\topenssl-1.1.1 \\\n\t\tparted \\\n\t\tprocps-ng \\\n\t\trsync \\\n\t\ttar \\\n\t\tutil-linux \\\n\t\txz \\\n\t\tlibxml2 \\\n\t\tncursesw \\\n\t\tncursesw-terminfo \\\n\t\tnano-doc nano-locale \\\n\t\tnano file \\\n\t\txfsprogs \\\n\t\thaveged\n\t\t#qemu-common\n\n# bash-completion puts auto-load in /usr/local/etc/profile.d instead of /etc/profile.d\n# (this one-liner is the same as the loop at the end of /etc/profile with an adjusted search path)\nRUN echo 'for i in /usr/local/etc/profile.d/*.sh ; do if [ -r \"$i\" ]; then . $i; fi; done' > etc/profile.d/usr-local-etc-profile-d.sh; \\\n# Docker expects to find certs in /etc/ssl\n\tln -svT ../usr/local/etc/ssl etc/ssl; \\\n# make sure the Docker group exists and we're part of it\n\ttcl-chroot sh -eux -c 'addgroup -S docker && addgroup docker docker'\n\n# install kernel headers so we can use them for building xen-utils, etc\nRUN make -C /usr/src/linux INSTALL_HDR_PATH=/usr/local headers_install\n\n# http://download.virtualbox.org/virtualbox/\n# updated via \"update.sh\"\nENV VBOX_VERSION 6.1.34\n# https://www.virtualbox.org/download/hashes/$VBOX_VERSION/SHA256SUMS\nENV VBOX_SHA256 88f86fa0e6970b6a7c80d714b7a91a8c425ff8ef53a3e73fc80781191a87257b\n# (VBoxGuestAdditions_X.Y.Z.iso SHA256, for verification)\n\nRUN wget -O /vbox.iso \"https://download.virtualbox.org/virtualbox/$VBOX_VERSION/VBoxGuestAdditions_$VBOX_VERSION.iso\"; \\\n\techo \"$VBOX_SHA256  */vbox.iso\" | sha256sum -c -; \\\n\t7z x -o/ /vbox.iso VBoxLinuxAdditions.run; \\\n\trm /vbox.iso; \\\n\tsh /VBoxLinuxAdditions.run --noexec --target /usr/src/vbox; \\\n\tmkdir /usr/src/vbox/amd64; \\\n\t7z x -so /usr/src/vbox/VBoxGuestAdditions-amd64.tar.bz2 | tar --extract --directory /usr/src/vbox/amd64; \\\n\trm /usr/src/vbox/VBoxGuestAdditions-*.tar.bz2; \\\n\tln -sT \"vboxguest-$VBOX_VERSION\" /usr/src/vbox/amd64/src/vboxguest\nRUN make -C /usr/src/vbox/amd64/src/vboxguest -j \"$(nproc)\" \\\n\t\tKERN_DIR='/usr/src/linux' \\\n\t\tKERN_VER=\"$(< /usr/src/linux/include/config/kernel.release)\" \\\n\t\tvboxguest vboxsf \\\n\t; \\\n\tcp -v /usr/src/vbox/amd64/src/vboxguest/*.ko lib/modules/*/; \\\n# create hacky symlink so these binaries can work as-is\n\tln -sT lib lib64; \\\n\tcp -v /usr/src/vbox/amd64/other/mount.vboxsf /usr/src/vbox/amd64/sbin/VBoxService sbin/; \\\n\tcp -v /usr/src/vbox/amd64/bin/VBoxControl bin/\n\n# TCL includes VMware's open-vm-tools 10.2.0.1608+ (no reason to compile that ourselves)\nRUN tcl-tce-load open-vm-tools; \\\n\ttcl-chroot vmhgfs-fuse --version; \\\n\ttcl-chroot vmtoolsd --version\n\nENV PARALLELS_VERSION 17.1.1-51537\n\nRUN wget -O /parallels.tgz \"https://download.parallels.com/desktop/v${PARALLELS_VERSION%%.*}/$PARALLELS_VERSION/ParallelsTools-$PARALLELS_VERSION-boot2docker.tar.gz\"; \\\n\tmkdir /usr/src/parallels; rm -rf /usr/src/parallels \\\n\ttar --extract --file /parallels.tgz --directory /usr/src/parallels --strip-components 1; \\\n\trm /parallels.tgz\nRUN cp -vr /usr/src/parallels/tools/* ./; \\\n\tmake -C /usr/src/parallels/kmods -f Makefile.kmods -j \"$(nproc)\" \\\n\t\tSRC='/usr/src/linux' \\\n\t\tKERNEL_DIR='/usr/src/linux' \\\n\t\tKVER=\"$(< /usr/src/linux/include/config/kernel.release)\" \\\n\t\tPRL_FREEZE_SKIP=1 \\\n\t; \\\n\tfind /usr/src/parallels/kmods -name '*.ko' -exec cp -v '{}' lib/modules/*/ ';'; \\\n\ttcl-chroot prltoolsd -V\n\n# https://github.com/xenserver/xe-guest-utilities/tags\n# updated via \"update.sh\"\nENV XEN_VERSION 7.30.0\n\nRUN wget -O /xen.tgz \"https://github.com/xenserver/xe-guest-utilities/archive/v$XEN_VERSION.tar.gz\"; \\\n\tmkdir /usr/src/xen; rm -rf /usr/src/xen \\\n\ttar --extract --file /xen.tgz --directory /usr/src/xen --strip-components 1; \\\n\trm /xen.tgz\n# download \"golang.org/x/sys/unix\" dependency (new in 7.14.0)\nRUN cd /usr/src/xen; \\\n\t\tmkdir -p GOPATH/src/golang.org/x/sys; \\\n\t\twget -O sys.tgz 'https://github.com/golang/sys/archive/fc99dfbffb4e5ed5758a37e31dd861afe285406b.tar.gz'; \\\n\t\ttar -xf sys.tgz -C GOPATH/src/golang.org/x/sys --strip-components 1; \\\n\t\trm sys.tgz\nRUN GOPATH='/usr/src/xen/GOPATH' make -C /usr/src/xen -j \"$(nproc)\" PRODUCT_VERSION=\"$XEN_VERSION\" RELEASE='boot2docker'; \\\n\ttar --extract --file \"/usr/src/xen/build/dist/xe-guest-utilities_$XEN_VERSION-boot2docker_x86_64.tgz\"; rm \"/usr/src/xen/build/dist/xe-guest-utilities_$XEN_VERSION-boot2docker_x86_64.tgz\" \\\n\ttcl-chroot xenstore || [ \"$?\" = 1 ]\n\n# Hyper-V KVP Daemon\nRUN make -C /usr/src/linux/tools/hv hv_kvp_daemon; \\\n\tcp /usr/src/linux/tools/hv/hv_kvp_daemon usr/local/sbin/; \\\n\ttcl-chroot hv_kvp_daemon --help || [ \"$?\" = 1 ]\n\n# scan all built modules for kernel loading\nRUN tcl-chroot depmod \"$(< /usr/src/linux/include/config/kernel.release)\"\n\n# https://github.com/tianon/cgroupfs-mount/releases\nENV CGROUPFS_MOUNT_VERSION 1.4\n\nRUN wget -O usr/local/sbin/cgroupfs-mount \"https://github.com/tianon/cgroupfs-mount/raw/${CGROUPFS_MOUNT_VERSION}/cgroupfs-mount\"; \\\n\tchmod +x usr/local/sbin/cgroupfs-mount; \\\n\ttcl-chroot cgroupfs-mount\n\nENV DOCKER_VERSION 20.10.17\n\n# Get the Docker binaries with version that matches our boot2docker version.\n#RUN DOCKER_CHANNEL='edge'; \\\nRUN DOCKER_CHANNEL='stable'; \\\n\tcase \"$DOCKER_VERSION\" in \\\n# all the pre-releases go in the \"test\" channel\n\t\t*-rc* | *-beta* | *-tp* ) DOCKER_CHANNEL='test' ;; \\\n\tesac; \\\n\t\\\n\twget -O /docker.tgz \"https://download.docker.com/linux/static/$DOCKER_CHANNEL/x86_64/docker-$DOCKER_VERSION.tgz\"; \\\n\ttar -zxvf /docker.tgz -C \"usr/local/bin\" --strip-components=1; \\\n\trm /docker.tgz; \\\n\t\\\n# download bash-completion too\n\twget -O usr/local/share/bash-completion/completions/docker \"https://github.com/docker/cli/raw/v${DOCKER_VERSION}/contrib/completion/bash/docker\"; \\\n\t\\\n\tfor binary in \\\n\t\tcontainerd \\\n\t\tctr \\\n\t\tdocker \\\n\t\tdocker-init \\\n\t\tdockerd \\\n\t\trunc \\\n\t; do \\\n\t\tchroot . \"$binary\" --version; \\\n\tdone\n\n# Docker cli plugins\nENV DOCKER_BUILDX_VERSION 0.7.1\nRUN mkdir -p usr/local/lib/docker/cli-plugins; \\\n\twget -O usr/local/lib/docker/cli-plugins/docker-buildx \\\n\t\"https://github.com/docker/buildx/releases/download/v$DOCKER_BUILDX_VERSION/buildx-v$DOCKER_BUILDX_VERSION.linux-amd64\"; \\\n\tchmod +x usr/local/lib/docker/cli-plugins/docker-buildx\n\n# CTOP - https://github.com/bcicen/ctop\nENV CTOP_VERSION 0.7.7\nRUN wget -O  usr/local/bin/ctop \\\n\thttps://github.com/bcicen/ctop/releases/download/v$CTOP_VERSION/ctop-$CTOP_VERSION-linux-amd64; \\\n\tchmod +x usr/local/bin/ctop\n\n# Copy in extra etc/* files\nCOPY files/etc etc/\n\n# Install docker-enter. Note: The nsenter utility is installed\n# from the Tiny Core Linux repo as a part of util-linux package so we use\n# that instead of the one from https://github.com/jpetazzo/nsenter\nADD files/docker-enter usr/local/bin/\n\n# set up a few branding bits\nRUN { \\\n\t\techo 'NAME=Boot2Docker'; \\\n\t\techo \"VERSION=$DOCKER_VERSION\"; \\\n\t\techo 'ID=boot2docker'; \\\n\t\techo 'ID_LIKE=tcl'; \\\n\t\techo \"VERSION_ID=$DOCKER_VERSION\"; \\\n\t\techo \"PRETTY_NAME=\\\"Boot2Docker $DOCKER_VERSION (TCL $TCL_VERSION)\\\"\"; \\\n\t\techo 'ANSI_COLOR=\"1;34\"'; \\\n\t\techo 'HOME_URL=\"https://github.com/boot2docker/boot2docker\"'; \\\n\t\techo 'SUPPORT_URL=\"https://blog.docker.com/2016/11/introducing-docker-community-directory-docker-community-slack/\"'; \\\n\t\techo 'BUG_REPORT_URL=\"https://github.com/boot2docker/boot2docker/issues\"'; \\\n\t} > etc/os-release; \\\n\tsed -i 's/HOSTNAME=\"box\"/HOSTNAME=\"boot2docker\"/g' usr/bin/sethostname; \\\n\ttcl-chroot sethostname; \\\n\t[ \"$(< etc/hostname)\" = 'boot2docker' ]; \\\n\tfor num in 0 1 2 3; do \\\n\t\techo \"server $num.boot2docker.pool.ntp.org\"; \\\n\tdone > etc/ntp.conf; \\\n\trm -v etc/sysconfig/ntpserver\n\nCOPY files/forgiving-getty files/shutdown ./usr/local/sbin/\n\n# getty/inittab setup\nRUN awk -F: ' \\\n\t\t$1 == \"tty1\" { \\\n\t\t\tprint \"tty1::respawn:/usr/local/sbin/forgiving-getty tty1\"; \\\n\t\t\tprint \"ttyS0::respawn:/usr/local/sbin/forgiving-getty ttyS0\"; \\\n\t\t\tnext; \\\n\t\t} \\\n\t\t$1 ~ /^#?tty/ { next } \\\n\t\t{ print } \\\n\t' etc/inittab > etc/inittab.new; \\\n\tmv etc/inittab.new etc/inittab; \\\n\tgrep forgiving-getty etc/inittab; \\\n# /sbin/autologin likes to invoke getty directly, so we skip that noise (especially since we want to always autologin)\n# (and getty's \"-l\" argument cannot accept anything but a single command to \"exec\" directly -- no args)\n# (and getty's \"-n\" argument to autologin doesn't seem to work properly)\n\t{ \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'user=\"$(cat /etc/sysconfig/tcuser 2>/dev/null)\"'; \\\n\t\techo 'exec login -f \"${user:-docker}\"'; \\\n\t} > usr/local/sbin/autologin; \\\n\tchmod +x usr/local/sbin/autologin\n\n# ssh config prep\nRUN [ ! -f usr/local/etc/sshd_config ]; \\\n\tsed -r \\\n\t\t-e 's/^#(UseDNS[[:space:]])/\\1/' \\\n\t\t-e 's/^#(PermitUserEnvironment)[[:space:]].*$/\\1 yes/' \\\n\t\tusr/local/etc/ssh/sshd_config.orig \\\n\t\t> usr/local/etc/ssh/sshd_config; \\\n\tgrep '^UseDNS no$' usr/local/etc/ssh/sshd_config; \\\n# \"This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin\n# (and there are several important binaries in /usr/local/sbin that \"docker-machine\" needs to invoke like \"ip\" and \"iptables\")\n\tgrep '^PermitUserEnvironment yes$' usr/local/etc/ssh/sshd_config; \\\n\tmkdir -p home/docker/.ssh; \\\n\techo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' > home/docker/.ssh/environment; \\\n# acpid prep (looks in the wrong path for /etc/acpi)\n\tln -sT ../usr/local/etc/acpi etc/acpi; \\\n\t[ -z \"$(ls -A etc/acpi/events)\" ]; \\\n\t{ echo 'event=button/power'; echo 'action=/usr/bin/env poweroff'; } > etc/acpi/events/power; \\\n# explicit UTC timezone (especially for container bind-mounting)\n\techo 'UTC' > etc/timezone; \\\n\tcp -vL /usr/share/zoneinfo/UTC etc/localtime; \\\n# \"dockremap\" user/group so \"--userns-remap=default\" works out-of-the-box\n\ttcl-chroot addgroup -S dockremap; \\\n\ttcl-chroot adduser -S -G dockremap dockremap; \\\n\techo 'dockremap:165536:65536' | tee etc/subuid | tee etc/subgid\n\nRUN savedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tisolinux \\\n\t\tsyslinux-common \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\tmkdir -p /tmp/iso/isolinux; \\\n\tcp -v \\\n\t\t/usr/lib/ISOLINUX/isolinux.bin \\\n\t\t/usr/lib/syslinux/modules/bios/ldlinux.c32 \\\n\t\t/usr/lib/syslinux/modules/bios/libutil.c32 \\\n\t\t/usr/lib/syslinux/modules/bios/menu.c32 \\\n\t\t/tmp/iso/isolinux/ \\\n\t; \\\n\tcp -v /usr/lib/ISOLINUX/isohdpfx.bin /tmp/; \\\n\tapt-mark auto '.*' > /dev/null; \\\n\tapt-mark manual $savedAptMark; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false\nCOPY files/isolinux.cfg /tmp/iso/isolinux/\n\nCOPY files/init.d/* ./etc/init.d/\nCOPY files/bootsync.sh ./opt/\n\n# temporary boot debugging aid\n#RUN sed -i '2i set -x' etc/init.d/tc-config\n\nCOPY files/make-b2d-iso.sh /usr/local/bin/\nRUN time make-b2d-iso.sh; \\\n\tdu -hs /tmp/boot2docker.iso\n\nCMD [\"sh\", \"-c\", \"[ -t 1 ] && exec bash || exec cat /tmp/boot2docker.iso\"]\n"
}