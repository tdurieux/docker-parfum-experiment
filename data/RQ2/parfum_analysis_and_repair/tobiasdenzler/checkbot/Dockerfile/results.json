{
  "startTime": 1674255329645,
  "endTime": 1674255331193,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 175
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 20,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Start from the latest golang base image\nFROM golang:latest as builder\n\n# Some build arguments\nARG GIT_VERSION=unspecified\nLABEL git_version=$GIT_VERSION\nARG GIT_BUILD=unspecified\nLABEL git_build=$GIT_BUILD\n\n# Download the oc client tools\nWORKDIR /tmp\nENV OC3_VERSION=v3.11.0 \\\n    OC3_ARCHIVE=openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit \\\n    OC3_SHA256SUM=4b0f07428ba854174c58d2e38287e5402964c9a9355f6c359d1242efd0990da3 \\\n    OC4_VERSION=4.6.0-0.okd-2021-02-14-205305 \\\n    OC4_SHA256SUM=741c456f1d5227eb40722b0dac328c78dceba5103fd306cf7fe57a9474eb3d35 \\\n    KUBE_VERSION=v1.19.0 \\\n    AWS_VERSION=2.1.0\n\n# OCP3\nRUN curl -f -L https://github.com/openshift/origin/releases/download/${OC3_VERSION}/${OC3_ARCHIVE}.tar.gz -o /tmp/${OC3_ARCHIVE}.tar.gz \\\n    && echo \"${OC3_SHA256SUM}  /tmp/${OC3_ARCHIVE}.tar.gz\" > /tmp/${OC3_ARCHIVE}.sha256sum \\\n    && sha256sum -c /tmp/${OC3_ARCHIVE}.sha256sum \\\n    && tar xfvz /tmp/${OC3_ARCHIVE}.tar.gz --strip-components=1 -C /tmp/ \\\n    && mv /tmp/oc /tmp/oc3 \\\n    && rm -f /tmp/${OC3_ARCHIVE}.tar.gz\n\n# OCP4\nRUN curl -f -L https://github.com/openshift/okd/releases/download/${OC4_VERSION}/openshift-client-linux-${OC4_VERSION}.tar.gz -o /tmp/openshift-client-linux-${OC4_VERSION}.tar.gz \\\n    && echo \"${OC4_SHA256SUM}  /tmp/openshift-client-linux-${OC4_VERSION}.tar.gz\" > /tmp/openshift-client-linux-${OC4_VERSION}.sha256sum \\\n    && sha256sum -c /tmp/openshift-client-linux-${OC4_VERSION}.sha256sum \\\n    && tar xfvz /tmp/openshift-client-linux-${OC4_VERSION}.tar.gz -C /tmp/ \\\n    && mv /tmp/oc /tmp/oc4 \\\n    && rm -f /tmp/openshift-client-linux-${OC4_VERSION}.tar.gz\n\n# K8S\nRUN curl -f -L https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl -o /tmp/kubectl \\\n    && chmod +x /tmp/kubectl\n\n# AWS\nRUN curl -f -L https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_VERSION}.zip -o /tmp/awscliv2.zip \\\n    && apt-get update \\\n    && apt-get -y --no-install-recommends install unzip \\\n    && unzip -q /tmp/awscliv2.zip && rm -rf /var/lib/apt/lists/*;\n\n# Set the Current Working Directory inside the container\nWORKDIR /app\n\n# Copy go mod and sum files\nCOPY go.mod go.sum ./\n\n# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed\nRUN go mod download\n\n# Copy the source from the current directory to the Working Directory inside the container\nCOPY . .\n\n# Build the Go app\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=386 go build -ldflags \"-w -s -X main.Version=${GIT_VERSION} -X main.Build=${GIT_BUILD}\" -a -installsuffix cgo -o main ./cmd/server/\n\n\n######## Start a new stage from scratch #######\nFROM frolvlad/alpine-glibc:latest\n\nRUN apk --no-cache update \\\n    && apk add --no-cache bash curl jq bind-tools python3 py-pip py-setuptools less coreutils git \\\n    && apk --no-cache add ca-certificates \\\n    && pip --no-cache-dir install awscli \\\n    && rm -rf /var/cache/apk/*\n\nRUN mkdir /app\n\nWORKDIR /app/\n\n# Copy the Pre-built binary file from the previous stage\nCOPY --from=builder /app/main .\n\n# Add the oc3 client tool\nCOPY --from=builder /tmp/oc3 /usr/bin/\n\n# Provide backwards compatibility for scripts\nRUN ln -s /usr/bin/oc3 /usr/bin/oc\n\n# Add the oc4 client tool\nCOPY --from=builder /tmp/oc4 /usr/bin/\n\n# Add the kubectl client tool\nCOPY --from=builder /tmp/kubectl /usr/bin/\n\n# Copy the AWS CLI\nCOPY --from=builder /tmp/aws/ /tmp/aws/\n\n# Install the AWS CLI\nRUN /tmp/aws/install\n\n# Copy the certs\nCOPY certs certs\n\n# Copy static ui files\nCOPY ui ui\n\n# Expose port to the outside world\nEXPOSE 4444\n\n# Command to run the executable\nCMD [\"./main\"]\n"
}