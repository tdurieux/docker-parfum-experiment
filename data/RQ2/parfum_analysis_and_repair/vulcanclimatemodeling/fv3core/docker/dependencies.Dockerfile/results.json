{
  "startTime": 1674251376821,
  "endTime": 1674251378432,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 39,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 94,
        "lineEnd": 101,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 131,
        "lineEnd": 146,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 68,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 101,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 131,
        "lineEnd": 146,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG serialize=false\nARG BASE_IMAGE\nARG BASE_IMAGE_ENV\nARG MPI_IMAGE\nARG FMS_IMAGE\nARG ESMF_IMAGE\n\nFROM $BASE_IMAGE AS fv3gfs-mpi-install\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    wget \\\n    gcc \\\n    g++ \\\n    gfortran \\\n    make && rm -rf /var/lib/apt/lists/*;\n#RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8 && \\\n#    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8 && \\\n#    update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-8 8\nRUN wget -q https://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz && \\\n    tar xzf mpich-3.1.4.tar.gz && \\\n    cd mpich-3.1.4 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-fortran --enable-cxx --prefix=/usr --enable-fast=all,O3 && \\\n    make -j24 && rm mpich-3.1.4.tar.gz\n\n\nFROM busybox as fv3gfs-mpi\nCOPY --from=fv3gfs-mpi-install /mpich-3.1.4 /mpich-3.1.4\n\nFROM $MPI_IMAGE AS mpi_image\n\nFROM $BASE_IMAGE_ENV AS fv3core-environment\nENV DEBIAN_FRONTEND=noninteractive TZ=US/Pacific\nRUN apt-get update && apt-get install -y  --no-install-recommends \\\n    curl \\\n    wget \\\n    gcc \\\n    g++ \\\n    gfortran \\\n    git \\\n    libblas-dev \\\n    liblapack-dev \\\n    libtool \\\n    m4 \\\n    libnetcdf-dev \\\n    libnetcdff-dev \\\n    perl \\\n    make \\\n    rsync \\\n    libffi-dev \\\n    openssl \\\n    bats \\\n    python3 \\\n    libpython3-dev \\\n    python3-dev \\\n    python3-setuptools \\\n    python3-pip \\\n    cython3 \\\n    build-essential \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    libreadline-dev \\\n    libsqlite3-dev \\\n    llvm \\\n    libncurses5-dev \\\n    xz-utils \\\n    tk-dev \\\n    libffi-dev \\\n    liblzma-dev && rm -rf /var/lib/apt/lists/*;\n#RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8 && \\\n#    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8 && \\\n#    update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-8 8\nARG PYVERSION=3.8.2\nRUN curl -f https://pyenv.run | bash\nENV PYENV_ROOT /root/.pyenv\nENV PATH=\"/root/.pyenv/bin:${PATH}\"\nRUN pyenv update && \\\n    pyenv install ${PYVERSION} && \\\n    echo 'eval \"$(pyenv init -)\"' >> /root/.bashrc && \\\n    eval \"$(pyenv init -)\" && \\\n    pyenv global ${PYVERSION}\nENV PATH=\"/root/.pyenv/shims:${PATH}\"\nCOPY --from=mpi_image /mpich-3.1.4 /mpich-3.1.4\nRUN cd /mpich-3.1.4 && make install && ldconfig && rm -rf /mpich-3.1.4\n\n##\n## Setup environment for Serialbox\n##---------------------------------------------------------------------------------\nFROM fv3core-environment as fv3core-environment-serialbox-install\n# set TZ\nENV DEBIAN_FRONTEND=noninteractive TZ=US/Pacific\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# install dependencies for serialbox\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libssl-dev \\\n    clang \\\n    clang-format \\\n    clang-tidy \\\n    python3-numpy \\\n    python3-nose \\\n    python3-sphinx && rm -rf /var/lib/apt/lists/*;\n\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.17.3/cmake-3.17.3.tar.gz && \\\n    tar xzf cmake-3.17.3.tar.gz && \\\n    cd cmake-3.17.3 && \\\n    ./bootstrap && make -j4 && make install && rm cmake-3.17.3.tar.gz\n\n# Install headers from the Boost library\nRUN wget -q https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source/boost_1_74_0.tar.gz && \\\n    tar xzf boost_1_74_0.tar.gz && \\\n    cd boost_1_74_0 && \\\n    cp -r boost /usr/include/ && cd / && rm boost_1_74_0.tar.gz\n\n###\n### Build Serialbox\n###\nRUN git clone -b v2.6.0 --depth 1 https://github.com/GridTools/serialbox.git /usr/src/serialbox && \\\n    cmake -B build -S /usr/src/serialbox -DSERIALBOX_USE_NETCDF=ON -DSERIALBOX_TESTING=ON \\\n    -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/serialbox && \\\n    cmake --build build/ -j $(nproc) --target install\n\nFROM busybox as fv3gfs-environment-serialbox\nCOPY --from=fv3core-environment-serialbox-install /usr/local/serialbox /usr/local/serialbox\nCOPY --from=fv3core-environment-serialbox-install /usr/include/boost /usr/include/boost\n\n###\n### Set Fortran environment\n###\nFROM $BASE_IMAGE_ENV AS fv3gfs-environment\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    wget \\\n    gcc \\\n    g++ \\\n    gfortran \\\n    make \\\n    curl \\\n    git \\\n    libblas-dev \\\n    liblapack-dev \\\n    libnetcdf-dev \\\n    libnetcdff-dev \\\n    perl \\\n    rsync \\\n    libffi-dev \\\n    openssl && rm -rf /var/lib/apt/lists/*;\n#RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8 && \\\n#    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8 && \\\n#    update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-8 8\nCOPY --from=mpi_image /mpich-3.1.4 /mpich-3.1.4\nRUN cd /mpich-3.1.4 && make install && ldconfig\n\n# download and install NCEP libraries\nRUN git config --global http.sslverify false && \\\n    git clone https://github.com/NCAR/NCEPlibs.git && \\\n    mkdir /opt/NCEPlibs && \\\n    cd NCEPlibs && \\\n    git checkout 3da51e139d5cd731c9fc27f39d88cb4e1328212b && \\\n    echo \"y\" | ./make_ncep_libs.sh -s linux -c gnu -d /opt/NCEPlibs -o 1\n\n## Build FMS\n##---------------------------------------------------------------------------------\nFROM fv3gfs-environment AS fv3gfs-fms-install\n\nENV CC=/usr/bin/mpicc \\\n    FC=/usr/bin/mpif90 \\\n    LDFLAGS=\"-L/usr/lib\" \\\n    LOG_DRIVER_FLAGS=\"--comments\" \\\n    CPPFLAGS=\"-I/usr/include -Duse_LARGEFILE -DMAXFIELDMETHODS_=500 -DGFS_PHYS\" \\\n    FCFLAGS=\"-fcray-pointer -Waliasing -ffree-line-length-none -fno-range-check -fdefault-real-8 -fdefault-double-8 -fopenmp\"\n\nCOPY FMS /FMS\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y m4 libtool autoconf bats && \\\n    cd /FMS && autoreconf --install && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    cd /FMS && make -j8 && \\\n    mv /FMS/*/*.mod /FMS/*/*.o /FMS/*/*.h /FMS/ && rm -rf /var/lib/apt/lists/*;\n\nFROM busybox as fv3gfs-fms\nCOPY --from=fv3gfs-fms-install /FMS /FMS\n\n## Build ESMF\n##---------------------------------------------------------------------------------\nFROM fv3gfs-environment AS fv3gfs-esmf-install\n\nENV ESMF_DIR=/esmf \\\n    ESMF_INSTALL_PREFIX=/usr/local/esmf \\\n    ESMF_INSTALL_MODDIR=/usr/local/esmf/include \\\n    ESMF_INSTALL_HEADERDIR=/usr/local/esmf/include \\\n    ESMF_INSTALL_LIBDIR=/usr/local/esmf/lib \\\n    ESMF_INSTALL_BINDIR=/usr/local/esmf/bin \\\n    ESMF_NETCDF_INCLUDE=/usr/include \\\n    ESMF_NETCDF_LIBS=\"-lnetcdf -lnetcdff\" \\\n    ESMF_BOPT=O3\n\nRUN git clone -b ESMF_8_0_0 --depth 1 https://git.code.sf.net/p/esmf/esmf $ESMF_DIR && \\\n    cd $ESMF_DIR && \\\n    make lib -j24 && \\\n    make install && \\\n    make installcheck\n\nFROM busybox as fv3gfs-esmf\nCOPY --from=fv3gfs-esmf-install /usr/local/esmf $ESMF_DIR\n\nFROM $FMS_IMAGE AS fms_image\nFROM $ESMF_IMAGE AS esmf_image\n\n\n## Build FV3 executable in its own image\n##---------------------------------------------------------------------------------\nFROM fv3gfs-environment AS fv3gfs-build\n\nENV FMS_DIR=/FMS \\\n    ESMF_DIR=/usr/local/esmf\n\nENV ESMF_INC=\"-I/usr/local/esmf/include\" \\\n    LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${ESMF_DIR}/lib:${FMS_DIR}/libFMS/.libs/\n\nCOPY --from=fms_image /FMS $FMS_DIR\nCOPY --from=esmf_image /usr/local/esmf $ESMF_DIR\n\nCOPY stochastic_physics /stochastic_physics\nCOPY FV3/coarse_graining /FV3/coarse_graining\nCOPY FV3/conf /FV3/conf\nCOPY FV3/ccpp /FV3/ccpp\nCOPY FV3/cpl /FV3/cpl\nCOPY FV3/gfsphysics /FV3/gfsphysics\nCOPY FV3/io /FV3/io\nCOPY FV3/ipd /FV3/ipd\nCOPY FV3/stochastic_physics /FV3/stochastic_physics\nCOPY FV3/makefile FV3/mkDepends.pl FV3/atmos_model.F90 FV3/LICENSE.md \\\n    FV3/coupler_main.F90 FV3/fv3_cap.F90 FV3/module_fcst_grid_comp.F90 \\\n    FV3/module_fv3_config.F90 FV3/time_utils.F90 \\\n    /FV3/\n\nARG configure_file=configure.fv3.gnu_docker\nARG compile_option\n\n# copy appropriate configuration file to configure.fv3\nRUN cp /FV3/conf/$configure_file \\\n        /FV3/conf/configure.fv3 && \\\n    if [ ! -z $compile_option ]; then sed -i \"33i $compile_option\" \\\n        /FV3/conf/configure.fv3; fi\n\nCOPY FV3/atmos_cubed_sphere /FV3/atmos_cubed_sphere\n\nRUN cd /FV3 && make clean_no_dycore && make libs_no_dycore -j16\n\nRUN cd /FV3/atmos_cubed_sphere && make clean && cd /FV3 && make -j16\n\nCOPY FV3/write_pkg_config.sh /FV3/\n"
}