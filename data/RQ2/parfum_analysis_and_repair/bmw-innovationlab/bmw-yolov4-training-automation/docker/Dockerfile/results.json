{
  "startTime": 1674248773879,
  "endTime": 1674248775566,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 1,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 1,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 22,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 1,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 1,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 22,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\nLABEL maintainer \"BMW AG [Munich]\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\nARG GPU=1\nARG CUDNN=1\nARG CUDNN_HALF=0\nARG OPENCV=1\nARG DOWNLOAD_ALL=0\nARG OPENMP=0\n# To save you a headache\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\nENV LIBRARY_PATH /usr/local/cuda/lib64/stubs\n\n# Fix Nvidia/Cuda repository key rotation\nRUN sed -i '/developer\\.download\\.nvidia\\.com\\/compute\\/cuda\\/repos/d' /etc/apt/sources.list.d/*\nRUN sed -i '/developer\\.download\\.nvidia\\.com\\/compute\\/machine-learning\\/repos/d' /etc/apt/sources.list.d/* \nRUN apt-key del 7fa2af80 &&\\\n\tapt-get update && \\\n\tapt-get install --no-install-recommends -y wget && \\\n    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-keyring_1.0-1_all.deb && \\\n    dpkg -i cuda-keyring_1.0-1_all.deb && rm -rf /var/lib/apt/lists/*;\n\n# Install needed libraries\nRUN apt-get update && \\\n\tapt-get upgrade -y && \\\n\tapt-get install --no-install-recommends -y clang-format wget apt-utils build-essential \\\n\tcheckinstall cmake pkg-config yasm git vim curl \\\n\tautoconf automake libtool libopencv-dev build-essential && rm -rf /var/lib/apt/lists/*;\n\n\n# Install python-dev and pip\nRUN apt-get update && apt-get install --no-install-recommends -y python3-pip python3.6-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install all needed python librarires\nCOPY ./docker/requirements.txt .\nRUN pip3 install --no-cache-dir -r requirements.txt\n\n# Create working directory\nWORKDIR /training\n\n# Fetch Repo\nRUN git clone https://github.com/AlexeyAB/darknet.git\nWORKDIR darknet\n#Checkout version should be yolov4 when stable version is released\n# Checkout the last working version of Yolov4_pre\nRUN git checkout bef28445e57cd560fa3d0a24af98a562d289135b\n\n# Modify Makefile according to needed env variables\nRUN \\ \n\tsed -i ':a;N;$!ba;s/getchar();/ /6' ./src/detector.c && \\\n\tsed -i 's/fprintf(stderr, \"%d/\\/\\/fprintf(stderr, \"%d/' ./src/detector.c && \\\n\tsed -i 's/fmax(calc_map_for_each, 100)/300/' ./src/detector.c && \\\n\tsed -i 's/next_map_calc = fmax(next_map_calc, ne/\\/\\/next_map_calc = fmax(next_map_calc, ne/' ./src/detector.c && \\\n\tsed -i \"s/GPU=.*/GPU=${GPU}/\" Makefile && \\\n\tsed -i \"s/CUDNN=0/CUDNN=${CUDNN}/\" Makefile && \\\n\tsed -i \"s/CUDNN_HALF=0/CUDNN_HALF=${CUDNN_HALF}/\" Makefile && \\\n\tsed -i \"s/OPENCV=0/OPENCV=${OPENCV}/\" Makefile && \\\n\tsed -i \"s/OPENMP=0/OPENMP=${OPENMP}/\" Makefile && \\\n\tmake\n\nWORKDIR /training\n\n# Copy needed files in the container\nCOPY ./src .\nCOPY ./config ./config\n\n# If ARG DOWNLOAD_ALL = 1, download 3 weights into config directly\nRUN chmod u+x ./config/darknet/yolo_default_weights/download_weights.sh && ./config/darknet/yolo_default_weights/download_weights.sh ${DOWNLOAD_ALL} \"/training/config/darknet/yolo_default_weights\"\nRUN chmod u+x ./config/darknet/yolov4_default_weights/download_weights.sh && ./config/darknet/yolov4_default_weights/download_weights.sh ${DOWNLOAD_ALL} \"/training/config/darknet/yolov4_default_weights\"\n# Default command\nCMD [\"python3\", \"main.py\"]\n"
}