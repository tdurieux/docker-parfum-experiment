{
  "startTime": 1674248082363,
  "endTime": 1674248083540,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 24,
        "columnEnd": 33
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 21,
        "columnEnd": 30
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 21,
        "columnEnd": 30
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 1,
        "columnEnd": 63
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 1,
        "columnEnd": 67
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 1,
        "columnEnd": 63
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 1,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedDockerfile": "FROM funcatron/frontend:latest\n\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n\t\tbzip2 \\\n\t\tunzip \\\n                wget \\\n\t\txz-utils \\\n                git \\\n                openjdk-8-jdk && rm -rf /var/lib/apt/lists/*;\n\n\n# Default to UTF-8 file.encoding\nENV LANG C.UTF-8\n\n## From the OpenJDK docker file:\n\n# add a simple script that can auto-detect the appropriate JAVA_HOME value\n# based on whether the JDK or only the JRE is installed\nRUN { \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'set -e'; \\\n\t\techo; \\\n\t\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n\t} > /usr/local/bin/docker-java-home \\\n\t&& chmod +x /usr/local/bin/docker-java-home\n\nRUN mkdir /app && \\\n    wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein && \\\n    chmod +x lein && \\\n    mv lein /usr/local/bin && \\\n    export LEIN_ROOT=ok\n\n# From https://github.com/docker-library/rabbitmq/blob/d2bd71d329cacc3f010e665fbfd54f3ceaec1071/3.6/debian/Dockerfile\n\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r rabbitmq && useradd -r -d /var/lib/rabbitmq -m -g rabbitmq rabbitmq\n\n# grab gosu for easy step-down from root\nENV GOSU_VERSION 1.7\nRUN set -x \\\n\t&& apt-get install --no-install-recommends -y ca-certificates wget \\\n\t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n\t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n\t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n\t&& rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n\t&& chmod +x /usr/local/bin/gosu \\\n\t&& gosu nobody true && rm -rf -d && rm -rf /var/lib/apt/lists/*;\n\n# Add the officially endorsed Erlang debian repository:\n# See:\n#  - http://www.erlang.org/download.html\n#  - https://www.erlang-solutions.com/resources/download.html\nRUN set -ex; \\\n\tkey='434975BD900CCBE4F7EE1B1ED208507CA14F4FCA'; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; rm -rf -d \\\n\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/erlang-solutions.gpg; \\\n\trm -r \"$GNUPGHOME\"; \\\n\tapt-key list\nRUN echo 'deb http://packages.erlang-solutions.com/debian jessie contrib' > /etc/apt/sources.list.d/erlang.list\n\n# install Erlang\nRUN apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\terlang-asn1 \\\n\t\terlang-base-hipe \\\n\t\terlang-crypto \\\n\t\terlang-eldap \\\n\t\terlang-inets \\\n\t\terlang-mnesia \\\n\t\terlang-nox \\\n\t\terlang-os-mon \\\n\t\terlang-public-key \\\n\t\terlang-ssl \\\n\t\terlang-xmerl \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# get logs to stdout (thanks @dumbbell for pushing this upstream! :D)\nENV RABBITMQ_LOGS=- RABBITMQ_SASL_LOGS=-\n# https://github.com/rabbitmq/rabbitmq-server/commit/53af45bf9a162dec849407d114041aad3d84feaf\n\n# http://www.rabbitmq.com/install-debian.html\n# \"Please note that the word testing in this line refers to the state of our release of RabbitMQ, not any particular Debian distribution.\"\nRUN set -ex; \\\n\tkey='0A9AF2115F4687BD29803A206B73A36E6026DFCA'; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; rm -rf -d \\\n\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/rabbitmq.gpg; \\\n\trm -r \"$GNUPGHOME\"; \\\n\tapt-key list\nRUN echo 'deb http://www.rabbitmq.com/debian testing main' > /etc/apt/sources.list.d/rabbitmq.list\n\nENV RABBITMQ_VERSION 3.6.10\nENV RABBITMQ_DEBIAN_VERSION 3.6.10-1\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\trabbitmq-server=$RABBITMQ_DEBIAN_VERSION \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# /usr/sbin/rabbitmq-server has some irritating behavior, and only exists to \"su - rabbitmq /usr/lib/rabbitmq/bin/rabbitmq-server ...\"\nENV PATH /usr/lib/rabbitmq/bin:$PATH\n\n# set home so that any `--user` knows where to put the erlang cookie\nENV HOME /var/lib/rabbitmq\n\nRUN mkdir -p /var/lib/rabbitmq /etc/rabbitmq \\\n\t&& chown -R rabbitmq:rabbitmq /var/lib/rabbitmq /etc/rabbitmq \\\n\t&& chmod -R 777 /var/lib/rabbitmq /etc/rabbitmq\nVOLUME /var/lib/rabbitmq\n\n# add a symlink to the .erlang.cookie in /root so we can \"docker exec rabbitmqctl ...\" without gosu\nRUN ln -sf /var/lib/rabbitmq/.erlang.cookie /root/\n\nRUN ln -sf /usr/lib/rabbitmq/lib/rabbitmq_server-$RABBITMQ_VERSION/plugins /plugins\n\nRUN rabbitmq-plugins enable --offline rabbitmq_management\nRUN rabbitmq-plugins enable --offline rabbitmq_stomp\nRUN rabbitmq-plugins enable --offline rabbitmq_web_stomp\n\nCOPY tron /tmp/tron\n\nRUN cd /tmp && \\\n    export LEIN_ROOT=yes && \\\n    cd tron && \\\n    lein uberjar && \\\n    cp target/uberjar/tron-*-standalone.jar /root/tron.jar && \\\n    cd /tmp && \\\n    rm -rf master.zip tron-master tron\n\nCOPY all-in-one/docker-entrypoint.sh /usr/local/bin/\nCOPY all-in-one/start-all.sh         /usr/local/bin/\n\nEXPOSE 80 3000\n\nENTRYPOINT [\"/usr/local/bin/start-all.sh\"]\n"
}