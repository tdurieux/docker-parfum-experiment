{
  "startTime": 1674220294371,
  "endTime": 1674220296157,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 19,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 101,
        "columnStart": 20,
        "columnEnd": 181
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 19,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 19,
        "columnEnd": 125
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 29,
        "columnStart": 11,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 37,
        "columnStart": 19,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 58,
        "columnStart": 19,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 62,
        "columnStart": 19,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 102,
        "lineEnd": 103,
        "columnStart": 19,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 159,
        "lineEnd": 163,
        "columnStart": 11,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 167,
        "lineEnd": 168,
        "columnStart": 11,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 171,
        "lineEnd": 172,
        "columnStart": 11,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM lsiobase/ubuntu:focal\nLABEL maintainer=\"Josh.5 <jsunnex@gmail.com>\"\n\n\n# Env variables\nENV \\\n    LIBVA_DRIVERS_PATH=\"/usr/lib/x86_64-linux-gnu/dri\" \\\n    NVIDIA_DRIVER_CAPABILITIES=\"compute,video,utility\" \\\n    NVIDIA_VISIBLE_DEVICES=\"all\"\n\n\n# Install the runtime dependencies\n# TODO: Remove intel-opencl-icd and replace with suggested build by Jellyfin\n#   https://jellyfin.org/docs/general/administration/hardware-acceleration.html\n#   https://github.com/jellyfin/jellyfin/blob/master/Dockerfile\nRUN \\\n    echo \"**** Install runtime packages ****\" \\\n        && apt-get update \\\n        && apt-get install --no-install-recommends -y \\\n            libexpat1=2.2.9-1ubuntu0.4 \\\n            libgl1-mesa-dri=21.2.6-0ubuntu0.1~20.04.2 \\\n            libglib2.0-0=2.64.6-1~ubuntu20.04.4 \\\n            libgomp1=10.3.0-1ubuntu1~20.04 \\\n            libharfbuzz0b=2.6.4-1ubuntu4 \\\n            libmediainfo0v5=19.09+dfsg-2build1 \\\n            libv4l-0=1.18.0-2build1 \\\n            libx11-6=2:1.6.9-2ubuntu1.2 \\\n            libxcb1=1.14-2 \\\n            libxext6=2:1.3.4-0ubuntu1 \\\n            libxml2=2.9.10+dfsg-5ubuntu0.20.04.3 \\\n    && \\\n    echo \"**** Install arch specific packages for $(uname -m) ****\" \\\n        && sleep 2 \\\n        && \\\n        if uname -m | grep -q x86; then \\\n            echo \"**** Add Intel Graphics repository  ****\" \\\n                && apt-get install --no-install-recommends -y \\\n                    gnupg \\\n                && echo \"deb [arch=amd64] https://repositories.intel.com/graphics/ubuntu focal main\" > /etc/apt/sources.list.d/intel-graphics.list \\\n                && apt-key adv --fetch-keys https://repositories.intel.com/graphics/intel-graphics.key \\\n            && \\\n            echo \"**** Install Intel Media Drivers  ****\" \\\n                && apt-get update \\\n                && apt-get install --no-install-recommends -y \\\n                    i965-va-driver=2.4.0-0ubuntu1 \\\n                    intel-igc-cm=1.0.128+i699.3~u20.04 \\\n                    intel-level-zero-gpu=1.3.22597+i699.3~u20.04 \\\n                    intel-media-va-driver-non-free=22.2.2+i699.3~u20.04 \\\n                    intel-opencl-icd=22.10.22597+i699.3~u20.04 \\\n                    level-zero=1.7.9+i699.3~u20.04 \\\n                    libigc1=1.0.10409+i699.3~u20.04 \\\n                    libigdfcl1=1.0.10409+i699.3~u20.04 \\\n                    libigdgmm11=21.3.3+i643~u20.04 \\\n                    libmfx1=22.2.2+i699.3~u20.04 \\\n                    libva-drm2=2.14.0.2-23 \\\n                    libva-wayland2=2.14.0.2-23 \\\n                    libva-x11-2=2.14.0.2-23 \\\n                    libva2=2.14.0.2-23 \\\n                    vainfo=2.14.0.2-1 \\\n            && \\\n            echo \"**** Install MESA Media Drivers for AMD VAAPI ****\" \\\n                && apt-get install --no-install-recommends -y \\\n                    mesa-va-drivers=21.2.6-0ubuntu0.1~20.04.2 \\\n            && \\\n            echo \"**** Remove build packages ****\" \\\n                && apt-get remove -y \\\n                    gnupg \\\n            && \\\n            echo; \\\n        fi \\\n    && \\\n    echo \"**** Section cleanup ****\" \\\n        && apt-get clean autoclean -y \\\n        && apt-get autoremove -y \\\n        && rm -rf \\\n            /var/lib/apt/lists/* \\\n            /var/tmp/* \\\n            /tmp/*\n\n\n# Install commonly used command line tools\nARG JELLYFIN_FFMPEG_VERSION=\"4.4.1-4\"\nARG NODEJS_VERSION=\"16.x\"\nRUN \\\n    echo \"**** Install FFmpeg for $(uname -m) ****\" \\\n        && sleep 2 \\\n        && apt-get update \\\n        && \\\n        if uname -m | grep -q x86; then \\\n            echo \"**** Add Jellyfin repository ****\" \\\n                && apt-get install --no-install-recommends --no-install-suggests -y ca-certificates gnupg \\\n                && curl -f -ks https://repo.jellyfin.org/jellyfin_team.gpg.key | apt-key add - \\\n                && echo \"deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/ubuntu focal main\" | tee /etc/apt/sources.list.d/jellyfin.list \\\n            && \\\n            echo \"**** Install jellyfin-ffmpeg and linked 3rd party libs ****\" \\\n                && apt-get update \\\n                && apt-get install --no-install-recommends --no-install-suggests -y \\\n                    openssl \\\n                    locales \\\n                && curl -f -ksL \\\n                    -o /tmp/jellyfin-ffmpeg_${JELLYFIN_FFMPEG_VERSION}-focal_amd64.deb \\\n                    \"https://repo.jellyfin.org/releases/server/ubuntu/versions/jellyfin-ffmpeg/${JELLYFIN_FFMPEG_VERSION}/jellyfin-ffmpeg_${JELLYFIN_FFMPEG_VERSION}-focal_amd64.deb\" \\\n                && apt-get install --no-install-recommends -y \\\n                    /tmp/jellyfin-ffmpeg_${JELLYFIN_FFMPEG_VERSION}-focal_amd64.deb \\\n                && ln -s /usr/lib/jellyfin-ffmpeg/ffmpeg /usr/local/bin/ffmpeg \\\n                && ln -s /usr/lib/jellyfin-ffmpeg/ffprobe /usr/local/bin/ffprobe \\\n            && \\\n            echo \"**** Remove build packages ****\" \\\n                && apt-get remove -y gnupg \\\n            && \\\n            echo; \\\n        fi \\\n        && \\\n        if uname -m | grep -q aarch64; then \\\n            echo \"**** Install ffmpeg and linked 3rd party libs ****\" \\\n                && apt-get install --no-install-recommends --no-install-suggests -y \\\n                    ffmpeg \\\n                    libssl-dev \\\n                    ca-certificates \\\n                    libfontconfig1 \\\n                    libfreetype6 \\\n                    libomxil-bellagio0 \\\n                    libomxil-bellagio-bin \\\n                    locales \\\n            && \\\n            echo ; \\\n        fi \\\n        && \\\n        if uname -m | grep -q armv7l; then \\\n            echo \"**** Add Jellyfin repository ****\" \\\n                && apt-get install --no-install-recommends --no-install-suggests -y ca-certificates gnupg \\\n                && curl -f -ks https://repo.jellyfin.org/jellyfin_team.gpg.key | apt-key add - \\\n                && curl -f -ks https://keyserver.ubuntu.com/pks/lookup?op=get\\&search=0x6587ffd6536b8826e88a62547876ae518cbcf2f2 | apt-key add - \\\n                && echo 'deb [arch=armhf] https://repo.jellyfin.org/ubuntu focal main' > /etc/apt/sources.list.d/jellyfin.list \\\n                && echo \"deb http://ppa.launchpad.net/ubuntu-raspi2/ppa/ubuntu bionic main\">> /etc/apt/sources.list.d/raspbins.list \\\n            && \\\n            echo \"**** Install jellyfin-ffmpeg and linked 3rd party libs ****\" \\\n                && apt-get update \\\n                && apt-get install --no-install-recommends --no-install-suggests -y \\\n                    jellyfin-ffmpeg \\\n                    libssl-dev \\\n                    libfontconfig1 \\\n                    libfreetype6 \\\n                    libomxil-bellagio0 \\\n                    libomxil-bellagio-bin \\\n                    libraspberrypi0 \\\n                    vainfo \\\n                    libva2 \\\n                    locales \\\n                && ln -s /usr/lib/jellyfin-ffmpeg/ffmpeg /usr/local/bin/ffmpeg \\\n                && ln -s /usr/lib/jellyfin-ffmpeg/ffprobe /usr/local/bin/ffprobe \\\n            && \\\n            echo \"**** Remove build packages ****\" \\\n                && apt-get remove -y gnupg \\\n            && \\\n            echo; \\\n        fi \\\n    && \\\n    echo \"**** Install startup script requirements ****\" \\\n        && apt-get install --no-install-recommends -y \\\n            curl \\\n            nano \\\n            sqlite3 \\\n            wget \\\n    && \\\n    echo \"**** Install NodeJS for $(uname -m) ****\" \\\n        && curl -fsSL https://deb.nodesource.com/setup_${NODEJS_VERSION} | bash - \\\n        && apt-get install --no-install-recommends -y \\\n            nodejs \\\n    && \\\n    echo \"**** Install exiftool for $(uname -m) ****\" \\\n        && apt-get install --no-install-recommends -y \\\n            libimage-exiftool-perl \\\n    && \\\n    echo \"**** Section cleanup ****\" \\\n        && apt-get clean autoclean -y \\\n        && apt-get autoremove -y \\\n        && rm -rf \\\n            /var/lib/apt/lists/* \\\n            /var/tmp/* \\\n            /tmp/*\n\n\n# Add pip requirements\nCOPY /requirements.txt /tmp/requirements.txt\n\n\n# Install Unmanic python dependencies.\nRUN \\\n    echo \"**** Install Unmanic application dependencies ****\" \\\n        && sleep 2 \\\n        && \\\n        echo \"**** Update sources ****\" \\\n            && apt-get update \\\n        && \\\n        echo \"**** Install python ****\" \\\n            && apt-get install -y --no-install-recommends \\\n                grc \\\n                python3 \\\n                python3-pip \\\n                python3-setuptools \\\n                unzip \\\n        && \\\n        if uname -m | grep -q armv7l; then \\\n            echo \"**** Install python package build dependencies ****\" \\\n                && apt-get install --no-install-recommends --no-install-suggests -y \\\n                    gcc \\\n                    python3-dev \\\n            && \\\n            echo ; \\\n        fi \\\n        && \\\n        if uname -m | grep -q aarch64; then \\\n            echo \"**** Install python package build dependencies ****\" \\\n                && apt-get install --no-install-recommends --no-install-suggests -y \\\n                    gcc \\\n                    python3-dev \\\n            && \\\n            echo ; \\\n        fi \\\n        && \\\n        echo \"**** Install pip packages ****\" \\\n            && python3 -m pip install --no-cache-dir -r /tmp/requirements.txt \\\n    && \\\n    echo \"**** Section cleanup ****\" \\\n        && apt-get clean autoclean -y \\\n        && apt-get autoremove -y \\\n        && rm -rf \\\n            /var/lib/apt/lists/* \\\n            /var/tmp/* \\\n            /tmp/*\n\n\n# Install pre-built Unmanic wheel\n# Must first run `python3 ./setup.py bdist_wheel` on host to build package\nCOPY /dist/ /src/\nRUN \\\n    echo \"**** Install Unmanic ****\" \\\n        && sleep 2 \\\n        && \\\n        echo \"**** Install unmanic from pre-built wheel ****\" \\\n            && ls -l /src/ \\\n            && python3 -m pip install --no-cache-dir /src/*.whl \\\n        && \\\n        echo \"**** Move unmanic executable so we can wrap a bash script around it for developers ****\" \\\n            && mv -f /usr/local/bin/unmanic /usr/local/bin/unmanic-service \\\n        && \\\n        echo \"**** Make default paths for unmanic library ****\" \\\n            && mkdir -p /library\n\n\n# Add local files\nCOPY /docker/root /\n\n\n# Unmanic runs on port 8888\nEXPOSE 8888/tcp\n"
}