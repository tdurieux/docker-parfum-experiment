{
  "startTime": 1674253368540,
  "endTime": 1674253370141,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:bookworm AS lib\n\nENV DEBIAN_FRONTEND=noninteractive \\\n    DEBCONF_NONINTERACTIVE_SEEN=true\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-suggests --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    dumb-init \\\n    gnupg \\\n    nginx && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - && \\\n    curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list && \\\n    curl -f -sS https://deb.nodesource.com/setup_16.x | bash - && \\\n    apt-get update && \\\n    apt-get install -y --no-install-suggests --no-install-recommends \\\n    nodejs \\\n    yarn && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /usr/local/share/mghcomputationalpathology/slim\n\n# Install dependencies first and then include code for efficient caching\nCOPY package.json .\nCOPY yarn.lock .\n\n# There are sometimes weird network errors. Increasing the network timeout\n#  seems to help (see https://github.com/yarnpkg/yarn/issues/5259)\nRUN yarn install --frozen-lockfile --network-timeout 100000 && yarn cache clean;\n\nCOPY craco.config.js .\nCOPY tsconfig.json .\nCOPY types ./types\nCOPY public ./public\nCOPY src ./src\n\n\nFROM lib AS app\n\nARG REACT_APP_CONFIG=local\nENV PUBLIC_URL=/\n\nRUN addgroup --system --gid 101 nginx && \\\n    adduser --system \\\n            --uid 101 \\\n            --disabled-login \\\n            --ingroup nginx \\\n            --no-create-home \\\n            --shell /bin/false \\\n            nginx\n\nRUN NODE_OPTIONS=--max_old_space_size=8192 yarn run build && \\\n        mkdir -p /var/www/html && \\\n        cp -R build/* /var/www/html/\n\nRUN mkdir -p /var/run/nginx && \\\n    chown -R nginx:nginx /var/www/html /var/run/nginx /var/lib/nginx /var/log/nginx && \\\n    chmod -R 0755 /var/www/html /var/run/nginx /var/lib/nginx /var/log/nginx && \\\n    rm -r /etc/nginx/conf.d /etc/nginx/sites-available /etc/nginx/sites-enabled\n\nCOPY etc/nginx/conf.d /etc/nginx/conf.d\nCOPY etc/nginx/nginx.conf /etc/nginx/\n\nUSER nginx\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"nginx\", \"-g\", \"daemon off;\"]\n\n\nFROM lib AS test\n\nRUN useradd -m -s /bin/bash tester && \\\n    mkdir -p artifacts/coverage artifacts/results && \\\n    chown -R tester:tester artifacts\n\nUSER tester\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"yarn\", \"test\"]\n"
}