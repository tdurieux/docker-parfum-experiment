{
  "startTime": 1674216802503,
  "endTime": 1674216803137,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Args defined here are only available to FROM commands\n# See https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG NGINX_VERSION\nARG NODE_VERSION\n\nFROM node:${NODE_VERSION} AS build\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y make && rm -rf /var/lib/apt/lists/*\n\n# Copy only files needed to build the frontend\nCOPY ./community/go-engines-community/.env /app/community/go-engines-community/.env\nCOPY ./community/sources/webcore/src/canopsis-next /app/community/sources/webcore/src/canopsis-next\nWORKDIR /app/community/sources/webcore/src/canopsis-next\nRUN make\n\n# Avoid rebuilding the frontend when only files in community/docker have changed\nCOPY ./community/docker /app/community/docker\nCOPY ./community/deploy-ansible /app/community/deploy-ansible\nRUN make install DESTDIR=/installroot\n\n#\n# OpenShift-compatible NGINX Container\n#\n\nFROM nginxinc/nginx-unprivileged:${NGINX_VERSION} as nginx-openshift\n\n# Put the nginx certificates in a volume\nRUN mkdir -m 750 -p /etc/nginx/ssl && \\\n\tchown -R nginx /etc/nginx/ssl\nVOLUME /etc/nginx/ssl\n\nCOPY --from=build /installroot/ /\n\nCOPY community/docker/files/entrypoint-nginx.sh /entrypoint.sh\n\nUSER root\nRUN chmod +x /entrypoint.sh\nUSER nginx\n\nENV NGINX_OPENSHIFT=1\nENTRYPOINT /entrypoint.sh\n\n#\n# Default NGINX Container\n#\n\nFROM nginx:${NGINX_VERSION}\n\nRUN mkdir -p -m 0750 /etc/nginx/ssl\n\nCOPY --from=build /installroot/ /\n\nCOPY community/docker/files/entrypoint-nginx.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nENV NGINX_OPENSHIFT=0\nENTRYPOINT /entrypoint.sh\n"
}