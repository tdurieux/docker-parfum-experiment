{
  "startTime": 1674249945948,
  "endTime": 1674249946586,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#### Stage 1: Build the react application\nFROM node:12.13-alpine as build\n\nWORKDIR /app\n\n# Copy the package.json as well as the yarn.lock and install\n# the dependencies. This is a separate step so the dependencies\n# will be cached unless changes to one of those two files\n# are made.\nCOPY package.json yarn.lock ./\nRUN yarn install && yarn cache clean;\n\n# Copy the main application\nCOPY . ./\n\nARG REACT_APP_API_NAME\nENV REACT_APP_API_NAME=${REACT_APP_API_NAME}\n\nARG REACT_APP_WS_NAME\nENV REACT_APP_WS_NAME=${REACT_APP_WS_NAME}\n\n# Build the application\nRUN yarn run build\n\n#### Stage 2: Serve the React application from Nginx\nFROM nginx:1.17.0-alpine\n\nARG BACKEND_NAME\nENV BACKEND_NAME=${BACKEND_NAME}\n\nARG FRONTEND_NAME\nENV FRONTEND_NAME=${FRONTEND_NAME}\n\nENV SUBSTVARS='$BACKEND_NAME:$PORT'\n\n# Copy the react build from Stage 1\nCOPY --from=build /app/build /var/www\n\n# Copy our custom nginx config\nCOPY nginx.conf.template /etc/nginx/nginx.conf.template\n\nCMD  envsubst \"$SUBSTVARS\" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'\n"
}