{
  "startTime": 1674249285500,
  "endTime": 1674249287033,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 27,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 5,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 5,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 5,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 82,
        "columnStart": 26,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ubuntu 20.04 with nvidia-docker2 beta opengl support\nFROM nvidia/opengl:1.0-glvnd-devel-ubuntu20.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y \\\n    tzdata \\\n    sudo \\\n    wget \\\n    gnupg2 \\\n    lsb-release \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get -qq clean\n\n# setup timezone\nRUN echo 'Etc/UTC' > /etc/timezone && \\\n  ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime \\\n  && apt-get -qq update && apt-get -q --no-install-recommends -y install tzdata \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get -qq clean\n\n# Tools useful during development\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y -qq \\\n        build-essential \\\n        atop \\\n        cmake \\\n        cppcheck \\\n        expect \\\n        gdb \\\n        git \\\n        gnutls-bin \\\n        libbluetooth-dev \\\n        libccd-dev \\\n        libcwiid-dev \\\n        libfcl-dev \\\n        libgoogle-glog-dev \\\n        libspnav-dev \\\n        libusb-dev \\\n        python3-dbg \\\n        python3-empy \\\n        python3-numpy \\\n        python3-setuptools \\\n        python3-pip \\\n        python3-venv \\\n        software-properties-common \\\n        vim \\\n        net-tools \\\n        iputils-ping \\\n        xvfb \\\n        curl \\\n && apt-get clean -qq && rm -rf /var/lib/apt/lists/*;\n\n# set up ros2 repo\nRUN /bin/sh -c 'curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg' \\\n  && /bin/sh -c 'echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" | tee /etc/apt/sources.list.d/ros2.list > /dev/null' \\\n  && /bin/sh -c 'echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros/ubuntu $(lsb_release -cs) main\" | tee /etc/apt/sources.list.d/ros.list > /dev/null'\n\n# install rosdep\nRUN apt-get update \\\n  && apt install --no-install-recommends -y python3-rosdep \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean -qq \\\n  && rosdep init \\\n  && rosdep update\n\n# install ROS2\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y ros-galactic-ros-base ros-galactic-ros1-bridge \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean -qq\n\n# install ROS\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y ros-noetic-ros-base \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean -qq\n\n# install colcon\nRUN apt-get -qq update && apt-get -q --no-install-recommends -y install \\\n  python3-vcstool \\\n  python3-colcon-common-extensions \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get -qq clean\n\n# Add a user with the same user_id as the user outside the container\n# Requires a docker build argument `user_id`\nARG user_id\nENV USERNAME developer\nRUN useradd -U --uid ${user_id} -ms /bin/bash $USERNAME \\\n && echo \"$USERNAME:$USERNAME\" | chpasswd \\\n && adduser $USERNAME sudo \\\n && echo \"$USERNAME ALL=NOPASSWD: ALL\" >> /etc/sudoers.d/$USERNAME\n\n# Commands below run as the developer user\nUSER $USERNAME\n\n# Make a couple folders for organizing docker volumes\nRUN mkdir ~/workspaces ~/other\n\n# When running a container start in the developer's home folder\nWORKDIR /home/$USERNAME\n\nCOPY mbzirc_ros1_bridge/run_bridge.bash ./run_bridge.bash\nENTRYPOINT [\"./run_bridge.bash\"]\n\n"
}