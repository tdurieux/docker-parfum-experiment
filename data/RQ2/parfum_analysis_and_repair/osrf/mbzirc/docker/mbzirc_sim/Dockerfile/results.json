{
  "startTime": 1674216190299,
  "endTime": 1674216191343,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 5,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 5,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 5,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 66,
        "columnStart": 26,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ubuntu 20.04 with nvidia-docker2 beta opengl support\nFROM osrf/mbzirc:mbzirc_models_latest\n\nUSER root\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Tools useful during development\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y -qq \\\n        build-essential \\\n        atop \\\n        cmake \\\n        cppcheck \\\n        expect \\\n        gdb \\\n        git \\\n        gnutls-bin \\\n        libbluetooth-dev \\\n        libccd-dev \\\n        libcwiid-dev \\\n        libfcl-dev \\\n        libgoogle-glog-dev \\\n        libspnav-dev \\\n        libusb-dev \\\n        python3-dbg \\\n        python3-empy \\\n        python3-numpy \\\n        python3-setuptools \\\n        python3-pip \\\n        python3-venv \\\n        software-properties-common \\\n        vim \\\n        net-tools \\\n        iputils-ping \\\n        xvfb \\\n        curl \\\n && apt-get clean -qq && rm -rf /var/lib/apt/lists/*;\n\n# set up ros2 repo\nRUN /bin/sh -c 'curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg' \\\n  && /bin/sh -c 'echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" | tee /etc/apt/sources.list.d/ros2.list > /dev/null'\n\n# install ignition fortress\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y ignition-fortress \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean -qq\n\n# install rosdep\nRUN apt-get update \\\n  && apt install --no-install-recommends -y python3-rosdep \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean -qq \\\n  && rosdep init \\\n  && rosdep update\n\n# install ROS2\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y ros-galactic-ros-base \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean -qq\n\n# install colcon\nRUN apt-get -qq update && apt-get -q --no-install-recommends -y install \\\n  python3-vcstool \\\n  python3-colcon-common-extensions \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get -qq clean\n\n# Commands below run as the developer user\nUSER $USERNAME\n\n# Make a couple folders for organizing docker volumes\nRUN mkdir ~/workspaces ~/other\n\n# When running a container start in the developer's home folder\nWORKDIR /home/$USERNAME\n\n# Prepare the colcon workspace\nRUN mkdir -p mbzirc_ws/src\n\n# clone ros_ign bridge\nRUN cd /home/$USERNAME/mbzirc_ws/src \\\n && git clone https://github.com/osrf/ros_ign.git -b galactic\n\nWORKDIR /home/$USERNAME/mbzirc_ws\n\nCOPY . src/mbzirc\n\nENV IGNITION_VERSION fortress\n\nRUN sudo apt-get update \\\n  && rosdep update \\\n  && rosdep install -r --from-paths src -i -y --rosdistro galactic \\\n  && sudo rm -rf /var/lib/apt/lists/* \\\n  && sudo apt-get clean -qq\n\n# Be sure that mbzirc_ros is present in the compilation by calling info\nRUN /bin/bash -c 'source /opt/ros/galactic/setup.bash \\\n  && colcon info mbzirc_ros \\\n  && colcon build --merge-install'\n# TODO(jrivero): implement build arg to clean build/ log/ while releasing\n# && rm -fr build/ log/\n\nRUN /bin/sh -c 'echo \". /opt/ros/galactic/setup.bash\" >> ~/.bashrc' \\\n && /bin/sh -c 'echo \". ~/mbzirc_ws/install/setup.sh\" >> ~/.bashrc'\n\n# Copy entry point script, and set the entrypoint\n# COPY mbzirc_sim/run_sim.bash ./\n# ENTRYPOINT [\"./run_sim.bash\"]\n"
}