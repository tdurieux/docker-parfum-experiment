{
  "startTime": 1674251344109,
  "endTime": 1674251345626,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 58,
        "columnStart": 12,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 81,
        "columnStart": 9,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 92,
        "columnStart": 9,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 98,
        "columnStart": 9,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 58,
        "columnStart": 12,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 81,
        "columnStart": 9,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 91,
        "lineEnd": 92,
        "columnStart": 9,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 98,
        "columnStart": 9,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ubuntu 18.04 with nvidia-docker2 beta opengl support\nFROM nvidia/opengl:1.0-glvnd-devel-ubuntu18.04\n\n# Tools I find useful during development\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y -qq \\\n        build-essential \\\n        bwm-ng \\\n        cmake \\\n        cppcheck \\\n        gdb \\\n        git \\\n        g++-8 \\\n        libbluetooth-dev \\\n        libccd-dev \\\n        libcwiid-dev \\\n        libfcl-dev \\\n        libgoogle-glog-dev \\\n        libspnav-dev \\\n        libusb-dev \\\n        lsb-release \\\n        python3-dbg \\\n        python3-empy \\\n        python3-numpy \\\n        python3-setuptools \\\n        python3-pip \\\n        python3-venv \\\n        ruby2.5 \\\n        ruby2.5-dev \\\n        software-properties-common \\\n        sudo \\\n        vim \\\n        wget \\\n        net-tools \\\n        iputils-ping \\\n && apt-get clean -qq && rm -rf /var/lib/apt/lists/*;\n\n# Add a user with the same user_id as the user outside the container\n# Requires a docker build argument `user_id`\nARG user_id\nENV USERNAME developer\nRUN useradd -U --uid ${user_id} -ms /bin/bash $USERNAME \\\n && echo \"$USERNAME:$USERNAME\" | chpasswd \\\n && adduser $USERNAME sudo \\\n && echo \"$USERNAME ALL=NOPASSWD: ALL\" >> /etc/sudoers.d/$USERNAME\n\n# Commands below run as the developer user\nUSER $USERNAME\n\n# Make a couple folders for organizing docker volumes\nRUN mkdir ~/workspaces ~/other\n\n# When running a container start in the developer's home folder\nWORKDIR /home/$USERNAME\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && sudo apt-get update -qq \\\n && sudo -E apt-get install --no-install-recommends -y -qq \\\n    tzdata \\\n && sudo ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime \\\n && sudo dpkg-reconfigure --frontend noninteractive tzdata \\\n && sudo apt-get clean -qq && rm -rf /var/lib/apt/lists/*;\n\n# install ROS and required packages\nRUN sudo /bin/sh -c 'echo \"deb [trusted=yes] http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n && sudo apt-get update -qq \\\n && sudo apt-get install --no-install-recommends -y -qq \\\n    libpcl-dev \\\n    libpcl-conversions-dev \\\n    python-catkin-tools \\\n    python-rosdep \\\n    python-rosinstall \\\n    ros-melodic-desktop \\\n    ros-melodic-joystick-drivers \\\n    ros-melodic-pcl-ros \\\n    ros-melodic-pointcloud-to-laserscan \\\n    ros-melodic-robot-localization \\\n    ros-melodic-spacenav-node \\\n    ros-melodic-tf2-sensor-msgs \\\n    ros-melodic-twist-mux \\\n    ros-melodic-rviz-imu-plugin \\\n    ros-melodic-rotors-control \\\n && sudo rosdep init \\\n && sudo apt-get clean -qq && rm -rf /var/lib/apt/lists/*;\n\nRUN rosdep update\n\n# install ign-dome\nRUN sudo /bin/sh -c 'echo \"deb [trusted=yes] http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-stable.list' \\\n && sudo /bin/sh -c 'wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -' \\\n && sudo apt-get update -qq \\\n && sudo apt-get install --no-install-recommends -y -qq \\\n    ignition-dome \\\n && sudo apt-get clean -qq && rm -rf /var/lib/apt/lists/*;\n\n# install the ros to ign bridge\nRUN sudo apt-get update -qq \\\n && sudo apt-get install --no-install-recommends -y -qq \\\n    ros-melodic-ros-ign \\\n && sudo apt-get clean -qq && rm -rf /var/lib/apt/lists/*;\n\n# Clone all the subt models so that you don't download them every time\n# docker is run\nRUN mkdir -p subt_ws/src \\\n && cd subt_ws/src \\\n && git clone https://github.com/osrf/subt\n\n# Download the public models\nRUN ign fuel download -v 4 -j 16 -u \"https://fuel.ignitionrobotics.org/OpenRobotics/collections/SubT Tech Repo\"\n\nWORKDIR /home/$USERNAME/subt_ws\n\n# Install Rotors\n# RUN wget https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz\n# RUN tar xvf subt_robot_examples_latest.tgz\n\n# build the subt tech repo (set gcc to version 8 first)\nRUN sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8\nRUN /bin/bash -c 'source /opt/ros/melodic/setup.bash && catkin_make -DCMAKE_BUILD_TYPE=Release install'\n\nRUN /bin/sh -c 'echo \". /opt/ros/melodic/setup.bash\" >> ~/.bashrc' \\\n && /bin/sh -c 'echo \". ~/subt_ws/install/setup.sh\" >> ~/.bashrc'\n\n# Copy entry point script, and set the entrypoint. Automatically run the team.ign script\nCOPY subt_team_entry/run_sim.bash ./\nENTRYPOINT [\"./run_sim.bash\", \"team.ign\"]\n\n# Customize your image here.\n# E.g.:\n# ENV PATH=\"/opt/sublime_text:$PATH\"\n"
}