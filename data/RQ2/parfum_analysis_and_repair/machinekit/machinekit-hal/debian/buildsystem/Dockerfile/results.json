{
  "startTime": 1674217731838,
  "endTime": 1674217733246,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 6,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 89,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 109,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 109,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#####################################################################\n# Description:  Dockerfile\n#\n#               This file, 'Dockerfile', implements Debian styled Docker images\n#               used for building, testing and running Machinekit-HAL in CI/CD\n#               workflows.\n#\n# Copyright (C) 2020 -          Jakub Fi≈°er  <jakub DOT fiser AT eryaf DOT com>\n#\n#   based on original Docker mk-cross-builder images by:\n#\n# Copyright (C) 2016 - 2019     John Morris  <john AT zultron DOT com>\n# Copyright (C) 2016 - 2019     Mick Grant   <arceye AT mgware DOT co DOT uk>\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n#\n######################################################################\n\nARG DEBIAN_DISTRO_BASE\n\nFROM ${DEBIAN_DISTRO_BASE} AS machinekit-hal_base\n\nSHELL [ \"bash\", \"-c\" ]\n\n###########################\n# Generic apt configuration\n\nENV TERM=dumb\n\n# Apt config:  silence warnings and set defaults\nENV DEBIAN_FRONTEND=noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN=true\nENV LC_ALL=C.UTF-8\nENV LANGUAGE=C.UTF-8\nENV LANG=C.UTF-8\n\n# Turn off recommends on container OS\nRUN printf \"%s;\\n%s;\\n\"                 \\\n    'APT::Install-Recommends \"0\"'       \\\n    'APT::Install-Suggests \"0\"'         \\\n    > /etc/apt/apt.conf.d/01norecommend\n\n# Ubuntu Focal needs debconf settings in addition\n# to setting 'DEBIAN_FRONTEND=noninteractive'\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        apt-utils && \\\n    apt-get clean && \\\n    echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && rm -rf /var/lib/apt/lists/*;\n\n# Add Machinekit Dependencies repository\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        curl \\\n        apt-transport-https \\\n        lsb-release \\\n        ca-certificates && \\\n    curl -1sLf                                                                    \\\n    'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \\\n        | distro=\"$(lsb_release -is)\" codename=\"$(lsb_release -cs)\" bash && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Update system OS\nRUN apt-get update &&     \\\n    apt-get -y upgrade && \\\n    apt-get clean\n\n####################################\n# Set up Machinekit user environment\n\nENV USER=machinekit\n\nRUN addgroup --gid 1000 ${USER} &&                            \\\n    adduser --uid 1000 --ingroup ${USER} --home /home/${USER} \\\n    --shell /bin/bash --disabled-password --gecos \"\" ${USER}\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        sudo \\\n        machinekit-fixuid && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nCOPY debian/buildsystem/base-entrypoint.sh /opt/bin/base-entrypoint.sh\n\nRUN chmod +x /opt/bin/base-entrypoint.sh &&                       \\\n    mkdir /opt/environment &&                                     \\\n    echo \"${USER} ALL=(ALL:ALL) NOPASSWD: ALL\" >> /etc/sudoers && \\\n    mkdir -p /etc/fixuid &&                                       \\\n    printf \"user: ${USER}\\ngroup: ${USER}\\n\" > /etc/fixuid/config.yml\n\nENTRYPOINT [ \"/opt/bin/base-entrypoint.sh\" ]\n\n######################################################################\n\nFROM machinekit-hal_base AS machinekit-hal_builder_base\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        build-essential \\\n        fakeroot \\\n        devscripts \\\n        equivs \\\n        ninja-build \\\n        python3-venv \\\n        jq && \\\n    apt-get clean; rm -rf /var/lib/apt/lists/*;\n\n# Kitware is publishing pre-built binaries only for amd64 and arm64 architectures!\nRUN curl -1vLf \\\n    $( curl -f -s https://api.github.com/repos/kitware/cmake/releases/latest | \\\n        jq -r --arg FILE \"cmake-\\d{1,}\\.\\d{1,}\\.\\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\\.sh\" \\\n        '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \\\n        --output /tmp/cmake.sh && \\\n    bash /tmp/cmake.sh --skip-license --prefix=/usr/local\n\n# Python 3.9 has --upgrade-deps, but lower versions need manual action\nRUN python3 -m venv /home/${USER}/pybuild        \\\n            --system-site-packages            && \\\n        /home/${USER}/pybuild/bin/pip install    \\\n            --upgrade pip setuptools\n\nRUN ln -s /home/${USER}/pybuild/bin/activate \\\n        /opt/environment/pyactivate\n\n######################################################################\n\nFROM machinekit-hal_builder_base AS machinekit-hal_builder\n\nARG HOST_ARCHITECTURE\n\n# This could be squashed into one layer, but it would require using BuildKit\nCOPY debian/buildsystem/doctor-multiarch-apt-repositories.sh \\\n     /doctor-multiarch-apt-repositories.sh\nRUN bash /doctor-multiarch-apt-repositories.sh -a ${HOST_ARCHITECTURE} && \\\n    apt-get update &&                                                     \\\n    rm -f /doctor-multiarch-apt-repositories.sh\n\nRUN if ! dpkg-architecture -e${HOST_ARCHITECTURE};      \\\n    then                                                \\\n        dpkg --add-architecture ${HOST_ARCHITECTURE} && \\\n        apt-get update;                                 \\\n    fi\n\nRUN printf \"%b\"                                               \\\n           \"#!/bin/bash\\n\"                                    \\\n           \"set -a\\n\"                                         \\\n           \"$(dpkg-architecture -a${HOST_ARCHITECTURE} -s)\\n\" \\\n           \"set +a\\n\"                                         \\\n           > /opt/environment/dpkg-architecture.sh\n\nCOPY debian/ /tmp/debian/\n\nRUN cd /tmp &&                                                                \\\n    ./debian/bootstrap -s -a ${HOST_ARCHITECTURE} -p /tmp &&                  \\\n    mk-build-deps --build-arch=$(dpkg-architecture -qDEB_BUILD_ARCH)          \\\n                  --host-arch=${HOST_ARCHITECTURE}                            \\\n                  -ir -t                                                      \\\n        \"apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y\" \\\n                  ./debian/control\n"
}