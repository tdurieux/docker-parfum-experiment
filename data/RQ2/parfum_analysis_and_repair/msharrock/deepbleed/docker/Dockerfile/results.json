{
  "startTime": 1674219481324,
  "endTime": 1674219482244,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 89,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 102,
        "lineEnd": 109,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 89,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 102,
        "lineEnd": 109,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 17
      }
    }
  ],
  "repairedDockerfile": "ARG UBUNTU_VERSION=18.04\nARG ARCH=\nARG CUDA=10.1\nFROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base\nARG ARCH\nARG CUDA\nARG CUDNN=7.6.4.38-1\nARG CUDNN_MAJOR_VERSION=7\nARG LIB_DIR_PREFIX=x86_64\nARG LIBNVINFER=6.0.1-1\nARG LIBNVINFER_MAJOR_VERSION=6\n\n# Choose the Python version\nARG _PY_SUFFIX=3\nARG PYTHON=python${_PY_SUFFIX}\nARG PIP=pip${_PY_SUFFIX}\n\n# Choose the CUDA and TF Versions\nARG TF_PACKAGE=tensorflow-gpu\nARG TF_PACKAGE_VERSION=2.1.0\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        # There appears to be a regression in libcublas10=10.2.2.89-1 which\n        # prevents cublas from initializing in TF. See\n        # https://github.com/tensorflow/tensorflow/issues/9489#issuecomment-562394257\n        libcublas10=10.2.1.243-1 \\ \n        libcublas-dev=10.2.1.243-1 \\\n        cuda-nvrtc-${CUDA/./-} \\\n        cuda-nvrtc-dev-${CUDA/./-} \\\n        cuda-cudart-dev-${CUDA/./-} \\\n        cuda-cufft-dev-${CUDA/./-} \\\n        cuda-curand-dev-${CUDA/./-} \\\n        cuda-cusolver-dev-${CUDA/./-} \\\n        cuda-cusparse-dev-${CUDA/./-} \\\n        libcudnn7=${CUDNN}+cuda${CUDA} \\\n        libcudnn7-dev=${CUDNN}+cuda${CUDA} \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        wget \\\n        git \\\n        && \\\n    find /usr/local/cuda-${CUDA}/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/${LIB_DIR_PREFIX}-linux-gnu/libcudnn_static_v7.a && rm -rf /var/lib/apt/lists/*;\n\n# Install TensorRT if not building for PowerPC\nRUN [[ \"${ARCH}\" = \"ppc64le\" ]] || { apt-get update && \\\n        apt-get install -y --no-install-recommends libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA} \\\n        libnvinfer-dev=${LIBNVINFER}+cuda${CUDA} \\\n        libnvinfer-plugin-dev=${LIBNVINFER}+cuda${CUDA} \\\n        libnvinfer-plugin${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA} \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/*; }\n\n# Configure the build for our CUDA configuration.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:/usr/include/x64_64-linux-gnu:$LD_LIBRARY_PATH\nENV TF_NEED_CUDA 1\nENV TF_NEED_TENSORRT 1\nENV TF_CUDA_VERSION=${CUDA}\nENV TF_CUDNN_VERSION=${CUDNN_MAJOR_VERSION}\n# CACHE_STOP is used to rerun future commands, otherwise cloning tensorflow will be cached and will not pull the most recent version\nARG CACHE_STOP=1\n# Check out TensorFlow source code if --build-arg CHECKOUT_TF_SRC=1\nARG CHECKOUT_TF_SRC=0\nRUN test \"${CHECKOUT_TF_SRC}\" -eq 1 && git clone https://github.com/tensorflow/tensorflow.git /tensorflow_src || true\n\n# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure\n# dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    ${PYTHON} \\\n\n    ${PYTHON}-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n#python binary if needed\nRUN ln -s $(which python3) /usr/local/bin/python\n\n# install tensorflow\nRUN python3 -m pip install --no-cache-dir ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}\n\n#install utilities\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    curl \\\n    git \\\n    wget \\\n    openjdk-8-jdk \\\n    virtualenv \\\n    swig && rm -rf /var/lib/apt/lists/*;\n\n#install useful packages\nRUN python3 -m pip --no-cache-dir install \\\n    Pillow \\\n    h5py \\\n    keras_preprocessing \\\n    matplotlib \\\n    mock \\\n    numpy \\\n    scipy \\\n    sklearn \\\n    pandas \\\n    future \\\n    portpicker \\\n    enum34 \\\n    #imaging packages\n    nibabel \\\n    six \\\n    scikit-image \\\n    webcolors \\\n    plotly \\\n    webcolors \\\n    fslpy\n\nRUN ${PIP} install antspyx\n#https://github.com/ANTsX/ANTsPy/releases/download/v0.2.0/antspyx-0.2.0-cp37-cp37m-linux_x86_64.whl\n\n\n#Install FSL base, but not unneeded extras\nENV INSTALL_FOLDER=/usr/local/\n\nRUN curl -f -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.2-centos7_64.tar.gz | tar xz -C ${INSTALL_FOLDER} \\\n    --exclude='fsl/doc' \\\n    --exclude='fsl/data/first' \\    \n    --exclude='fsl/data/atlases' \\\n    --exclude='fsl/data/possum' \\    \n    --exclude='fsl/src' \\    \n    --exclude='fsl/extras/src' \\    \n    --exclude='fsl/bin/fslview*' \\\n    --exclude='fsl/bin/FSLeyes' \\\n    --exclude='fsl/bin/*_gpu*' \\\n    --exclude='fsl/bin/*_cuda*'\n\n# Configure environment\nENV FSLDIR=${INSTALL_FOLDER}/fsl/ \\\n    FSLOUTPUTTYPE=NIFTI_GZ\n\n# Below needs a new line\nENV PATH=${FSLDIR}/bin:$PATH \\\n    LD_LIBRARY_PATH=${FSLDIR}:${LD_LIBRARY_PATH}\n\nRUN mkdir /.local && chmod a+rwx /.local\nRUN git clone https://github.com/msharrock/deepbleed && chmod a+rw ./deepbleed\n\nWORKDIR /deepbleed\n\n# download the weights\nRUN wget -O weights.zip https://www.dropbox.com/s/v2ptd9mfpo13gcb/mistie_2-20200122T175000Z-001.zip?dl=1  && unzip -j weights.zip\nRUN for i in _data-00001-of-00002 _data-00000-of-00002 _index; do out=`echo ${i} | sed \"s/_/weights./\"`; mv ${i} ${out}; done\n\nEXPOSE 8888\n\nCMD [\"bash\", \"-c\", \"source /etc/bash.bashrc\"]\n"
}