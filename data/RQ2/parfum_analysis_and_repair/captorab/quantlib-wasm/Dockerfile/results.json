{
  "startTime": 1674214956205,
  "endTime": 1674214956871,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## -*- docker-image-name: \"emscripten-quantlib\" -*-\nFROM emscripten/emsdk:3.1.1\n\nRUN apt-get update && \\\n    apt-get -y upgrade && \\\n    apt-get -y --no-install-recommends install automake autoconf libtool && \\\n    apt-get autoclean && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nENV EMSCRIPTEN /emsdk_portable/sdk\nENV BOOST /boost\nENV BOOST_VERSION 1.75\nENV BOOST_UNDERSCORE_VERSION 1_75\nENV QUANTLIB /quantlib\nENV QUANTLIB_VERSION 1.25\n\n# Download and unzip Boost\n# Remove unwanted files. Keep Emscripten as is.\n# Keep Boost and QuantLib header files and lib files.\n\n# Boost\n\nWORKDIR /tmp\nRUN wget -c https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}.0/source/boost_${BOOST_UNDERSCORE_VERSION}_0.tar.bz2 && \\\n    mkdir ${BOOST} && \\\n    tar --bzip2 -xf boost_${BOOST_UNDERSCORE_VERSION}_0.tar.bz2 -C ${BOOST} --strip-components=1 && \\\n    rm -f boost_${BOOST_UNDERSCORE_VERSION}_0.tar.bz2 && \\\n    rm -rf ${BOOST}/doc\n\n# Build Boost for Emscripten\n\n# [Getting Started on Unix Variants](https://www.boost.org/doc/libs/1_70_0/more/getting_started/unix-variants.html)\n# [Testing Emscripten with C++11 and Boost](https://gist.github.com/arielm/69a7488172611e74bfd4)\n\nWORKDIR ${EMSCRIPTEN}\nRUN embuilder.py build zlib\nENV NO_BZIP2 1\n\nWORKDIR ${BOOST}\nRUN ./bootstrap.sh && rm -rf stage && \\\n\t# ./b2 -a -j8 toolset=clang-emscripten link=static threading=single variant=release --with-system --with-filesystem --with-iostreams stage && \\\n\t./b2 -a -j8 toolset=clang-emscripten link=static threading=single variant=release \\\n\t--with-date_time --with-system --with-filesystem --with-iostreams --with-timer --with-math --with-random --with-thread stage && \\\n\trm -rf libs && \\\n\trm -rf lib/emscripten && \\\n\tmkdir -p lib/emscripten && \\\n\tcp stage/lib/*.a lib/emscripten && \\\n\tfind ${BOOST}/boost -type f  ! \\( -name \"*.h\" -o -name \"*.hpp\" -o -name \"*.ipp\" \\) -delete\n\n# QuantLib\n\nWORKDIR /tmp\nRUN wget https://github.com/lballabio/QuantLib/releases/download/QuantLib-v${QUANTLIB_VERSION}/QuantLib-${QUANTLIB_VERSION}.tar.gz -O QuantLib-${QUANTLIB_VERSION}.tar.gz && \\\n\tmkdir ${QUANTLIB} && \\\n\ttar xzf QuantLib-${QUANTLIB_VERSION}.tar.gz -C ${QUANTLIB} --strip-components=1 && \\\n\trm -f QuantLib-${QUANTLIB_VERSION}.tar.gz\n\n# UNSETENV NO_BZIP2\n\n# Build QuantLib with Boost and Emscripten\n\n# How to use emconfigure and emmake, [see](https://emscripten.org/docs/compiling/Building-Projects.html)\n# Also a good [guide](https://adamrehn.com/articles/creating-javascript-bindings-for-c-cxx-libraries-with-emscripten/)\n\nWORKDIR ${QUANTLIB}\nRUN echo $PWD\nRUN emconfigure ./configure --with-boost-include=${BOOST} --with-boost-lib=${BOOST}/lib/emscripten --disable-shared && \\\n\temmake make -j4 && \\\n\t# emmake make install && \\\n\t# ldconfig && \\\n\trm -rf ${QUANTLIB}/Examples && \\\n\tmv ${QUANTLIB}/ql/.libs/libQuantLib.a /tmp && \\\n\tfind ${QUANTLIB}/ql -type f  ! \\( -name \"*.h\" -o -name \"*.hpp\" \\) -delete && \\\n\tmv /tmp/libQuantLib.a ${QUANTLIB}/ql/.libs && \\\n\trm -rf /usr/local/lib/libQuant*.*\n\n# RUN apt-get clean\n\nWORKDIR /src\nCMD [\"/bin/bash\"]\n"
}