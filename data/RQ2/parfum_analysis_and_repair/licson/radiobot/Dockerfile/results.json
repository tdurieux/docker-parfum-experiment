{
  "startTime": 1674249940100,
  "endTime": 1674249943481,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 1,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 1,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 23,
        "lineEnd": 24,
        "columnStart": 1,
        "columnEnd": 330
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use a minimal Alpine Linux image\nFROM mhart/alpine-node:6\n\n# Jobs used in make command\nARG JOBS=4\n\n# Starts our installs\nWORKDIR /app\nCOPY . .\n\n# Install a fresh ffmpeg ourselves as the one on Alpine Linux repo is old\n# Taken from https://github.com/opencoconut/ffmpeg/ for minimal Alpine build\n# Sometimes npm fails to run the install hook, to enable the use of optimized\n# native code, we need running that manually\nWORKDIR /tmp/ffmpeg\nENV FFMPEG_VERSION=3.3.3\nRUN apk add --update build-base openssh-client python git curl nasm tar bzip2 libsodium-dev \\\r\n\tzlib-dev openssl-dev yasm-dev lame-dev libogg-dev x264-dev libvpx-dev libvorbis-dev x265-dev freetype-dev libass-dev libwebp-dev rtmpdump-dev libtheora-dev opus-dev && \\\r\n\r\n\tDIR=$(mktemp -d) && cd ${DIR} && \\\n\n\tcurl -f -s https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz | tar zxvf - -C . && \\\n\tcd ffmpeg-${FFMPEG_VERSION} && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t--enable-version3 --enable-gpl --enable-nonfree --enable-small --enable-libmp3lame --enable-libx264 --enable-libx265 --enable-libvpx --enable-libtheora --enable-libvorbis --enable-libopus --enable-libass --enable-libwebp --enable-librtmp --enable-postproc --enable-avresample --enable-libfreetype --enable-openssl --disable-debug && \\\n\tmake -j $JOBS && \\\n\tmake install && \\\n\tmake distclean && \\\n\trm -rf ${DIR} && \\\n\n\tcd /app && \\\n\tnpm install --production --force && \\\n\tnpm cache clean --force && \\\n\tnpm run install && \\\n\n\tapk del build-base curl tar bzip2 x264 openssh-client openssl nasm python git && \\\n\trm -rf /var/cache/apk/* && \\\n\trm -rf /tmp/*\n\n# Expose ports\nEXPOSE 8080\nEXPOSE 5000\n\n# Specify endpoint\nWORKDIR /app\nCMD [\"node\", \"index.js\"]\n"
}