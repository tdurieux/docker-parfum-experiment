{
  "startTime": 1674251879917,
  "endTime": 1674251881342,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-devel-ubuntu16.04\n\n# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV TENSORFLOW_VERSION=1.12.0\nENV PYTORCH_VERSION=1.0.0\nENV CUDNN_VERSION=7.4.1.5-1+cuda9.0\nENV NCCL_VERSION=2.4.2-1+cuda9.0\nENV MXNET_URL=https://s3-us-west-2.amazonaws.com/mxnet-python-packages-gcc5/mxnet_cu90_gcc5-1.4.0-py2.py3-none-manylinux1_x86_64.whl\n\n# Python 2.7 or 3.5 is supported by Ubuntu Xenial out of the box\nARG python=2.7\nENV PYTHON_VERSION=${python}\n\nRUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        curl \\\n        vim \\\n        wget \\\n        ca-certificates \\\n        libcudnn7=${CUDNN_VERSION} \\\n        libnccl2=${NCCL_VERSION} \\\n        libnccl-dev=${NCCL_VERSION} \\\n        libjpeg-dev \\\n        libpng-dev \\\n        python${PYTHON_VERSION} \\\n        python${PYTHON_VERSION}-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python\n\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n# Install TensorFlow, Keras, PyTorch and MXNet\nRUN pip install --no-cache-dir 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} keras h5py torch==${PYTORCH_VERSION} torchvision ${MXNET_URL}\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://www.open-mpi.org/software/ompi/v3.1/downloads/openmpi-3.1.2.tar.gz && \\\n    tar zxf openmpi-3.1.2.tar.gz && \\\n    cd openmpi-3.1.2 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-3.1.2.tar.gz\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs && \\\n    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir horovod && \\\n    ldconfig\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/local/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun && \\\n    chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf && \\\n    echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf && \\\n    echo \"btl_tcp_if_exclude = lo,docker0\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\n# Install OpenSSH for MPI to communicate between containers\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && \\\n    mkdir -p /var/run/sshd && rm -rf /var/lib/apt/lists/*;\n\n\n # Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    echo \"    SendEnv LD_LIBRARY_PATH MPIRUN_BIN\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\nRUN echo \"AcceptEnv LD_LIBRARY_PATH MPIRUN_BIN\" >> /etc/ssh/sshd_config\n\nRUN echo \"y\" | ssh-keygen -N \"\" -f /root/.ssh/id_rsa && \\\n    cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys && chmod og-rwx /root/.ssh/ -R\n\n# Polyaxon\n\nRUN pip install --no-cache-dir polyaxon\n\nWORKDIR /code\nCOPY build /code\n"
}