{
  "startTime": 1674249456129,
  "endTime": 1674249457732,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 168,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 245,
        "lineEnd": 245,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 5,
        "columnEnd": 59
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 122,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 224,
        "lineEnd": 227,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 292,
        "lineEnd": 299,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# EDX-PLATFORM multi-stage docker build\n\n# Change release to build, by providing the EDX_RELEASE_REF build argument to\n# your build command:\n#\n# $ docker build \\\n#     --build-arg EDX_RELEASE_REF=\"named-release/dogwood.3\" \\\n#     -t edxapp:dogwood.3-fun \\\n#     .\nARG DOCKER_UID=1000\nARG DOCKER_GID=1000\nARG EDX_RELEASE_REF=dogwood.3-fun-5.3.3\nARG EDX_ARCHIVE_URL=https://github.com/openfun/edx-platform/archive/dogwood.3-fun-5.3.3.tar.gz\nARG EDXAPP_STATIC_ROOT=/edx/app/edxapp/staticfiles\nARG NGINX_IMAGE_NAME=nginxinc/nginx-unprivileged\nARG NGINX_IMAGE_TAG=1.20\nARG PYTHON_VERSION=2.7.18\n\n\n# === BASE ===\nFROM ubuntu:12.04 as base\n\n# System dependencies\nRUN sed -i.bak -r 's/(archive|security).ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      gcc \\\n      gettext \\\n      libssl-dev \\\n      locales \\\n      make \\\n      tzdata \\\n      zlib1g-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Configure locales and timezone\nRUN echo 'en_US.UTF-8 UTF-8' > /var/lib/locales/supported.d/local && \\\n    dpkg-reconfigure locales\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# Upgrade Python 2.7 to its latest version from source\nWORKDIR /tmp/\n\nARG PYTHON_VERSION\nRUN curl -f -sLo Python-${PYTHON_VERSION}.tgz https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \\\n  && tar --extract -f Python-${PYTHON_VERSION}.tgz \\\n  && cd ./Python-${PYTHON_VERSION}/ \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations --prefix=/usr/local \\\n  && make && make install \\\n  && cd ../ \\\n  && rm -r ./Python-${PYTHON_VERSION}* && rm Python-${PYTHON_VERSION}.tgz\n\n\n# === DOWNLOAD ===\nFROM base as downloads\n\nWORKDIR /downloads\n\n# Download pip installer for python 2.7\nRUN curl -f -sLo get-pip.py https://bootstrap.pypa.io/pip/2.7/get-pip.py\n\n# Download edxapp release\nARG EDX_ARCHIVE_URL\nRUN curl -f -sLo edxapp.tgz $EDX_ARCHIVE_URL && \\\n    tar xzf edxapp.tgz && rm edxapp.tgz\n\n\n# === EDXAPP ===\nFROM base as edxapp\n\n# Install apt https support (required to use node sources repository)\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n      apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\n# Add a recent release of nodejs to apt sources (ubuntu package for precise is\n# broken)\nRUN echo \"deb https://deb.nodesource.com/node_10.x trusty main\" \\\n\t> /etc/apt/sources.list.d/nodesource.list && \\\n    curl -f -s 'https://deb.nodesource.com/gpgkey/nodesource.gpg.key' | apt-key add -\n\n# Install base system dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      nodejs && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /edx/app/edxapp/edx-platform\n\nCOPY --from=downloads /downloads/edx-platform-* .\n\nCOPY ./requirements.txt /edx/app/edxapp/edx-platform/requirements/edx/fun.txt\n\n# We copy default configuration files to \"/config\" and we point to them via\n# symlinks. That allows to easily override default configurations by mounting a\n# docker volume.\nCOPY ./config /config\nRUN ln -sf /config/lms /edx/app/edxapp/edx-platform/lms/envs/fun && \\\n    ln -sf /config/cms /edx/app/edxapp/edx-platform/cms/envs/fun && \\\n    ln -sf /config/lms/root_urls.py /edx/app/edxapp/edx-platform/lms/\n# Add node_modules/.bin to the PATH so that paver-related commands can execute\n# node scripts\nENV PATH=\"/edx/app/edxapp/edx-platform/node_modules/.bin:${PATH}\"\n\n# OpenEdx requires this environment variable to be defined, or else, it will\n# try to get the current Git reference. Since we don't use a Git clone to\n# build this release, we force the revision to be the release reference.\nARG EDX_RELEASE_REF\nENV EDX_PLATFORM_REVISION=${EDX_RELEASE_REF:-named-release/dogwood.3}\n\n\n# === BUILDER ===\nFROM edxapp as builder\n\nWORKDIR /builder\n\n# Install builder system dependencies\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n      build-essential \\\n      gfortran \\\n      git-core \\\n      graphviz \\\n      graphviz-dev \\\n      language-pack-en \\\n      libffi-dev \\\n      libfreetype6-dev \\\n      libgeos-dev \\\n      libjpeg8-dev \\\n      liblapack-dev \\\n      libmysqlclient-dev \\\n      libxml2-dev \\\n      libxmlsec1-dev \\\n      libxslt1-dev \\\n      pkg-config \\\n      rdfind \\\n      ruby1.9.1-dev \\\n      software-properties-common \\\n      swig && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /edx/app/edxapp/edx-platform\n\n# Install Javascript requirements\nRUN npm install && npm cache clean --force;\n\n# Install Ruby dependencies\nRUN gem install bundler -v 1.17.3 && \\\n    bundle install\n\nCOPY --from=downloads /downloads/get-pip.py ./get-pip.py\nRUN python get-pip.py\n\n# Install python dependencies\n#\nRUN pip install --no-cache-dir -r requirements/edx/pre.txt\n# We need specific versions of pip and setuptools to handle the different\n# ways to declare Python dependencies in OpenEdX ðŸ˜…\n# Voluptuous is a sub-dependency. The version match pattern is >=0.10.5,<1.0.0\n# but the version 0.13.0 is incompatible with this version of OpenEdX so we install\n# manually the latest compatible version to prevent the installation of 0.13.0\nRUN pip install --no-cache-dir \\\n    pip==9.0.3 \\\n    setuptools==44.1.1 \\\n    voluptuous==0.12.2\n\nRUN pip install --no-cache-dir --src /usr/local/src -r requirements/edx/github.txt\n# Uninstall django==1.4.22 which gets installed because of django-wiki.\n# Otherwise 1.8.12 is installed on top of 1.4.22 in the next step and causes\n# a build failure.\nRUN pip uninstall --yes django\nRUN pip install --no-cache-dir -r requirements/edx/base.txt\nRUN pip install --no-cache-dir -r requirements/edx/paver.txt\nRUN pip install --no-cache-dir -r requirements/edx/post.txt\n# Upgrade pip once again so that eggs (local.txt) are properly installed\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir -r requirements/edx/local.txt\n# Installing FUN requirements needs a recent pip release (we are using\n# setup.cfg declarative packages)\nRUN pip install --no-cache-dir -r requirements/edx/fun.txt\n\n# Update assets skipping collectstatic (it should be done during deployment)\nRUN NO_PREREQ_INSTALL=1 \\\n    paver update_assets --settings=fun.docker_build_production --skip-collect\n\n# === STATIC LINKS COLLECTOR ===\nFROM builder as links_collector\n\nARG EDXAPP_STATIC_ROOT\n\nRUN python manage.py lms collectstatic --link --noinput --settings=fun.docker_build_production && \\\n    python manage.py cms collectstatic --link --noinput --settings=fun.docker_build_production\n\n# Replace duplicated file by a symlink to decrease the overall size of the\n# final image\nRUN rdfind -makesymlinks true -followsymlinks true ${EDXAPP_STATIC_ROOT}\n\n\n# === STATIC FILES COLLECTOR ===\nFROM builder as files_collector\n\nARG EDXAPP_STATIC_ROOT\n\nRUN python manage.py lms collectstatic --noinput --settings=fun.docker_build_production && \\\n    python manage.py cms collectstatic --noinput --settings=fun.docker_build_production\n\n# Replace duplicated file by a symlink to decrease the overall size of the\n# final image\nRUN rdfind -makesymlinks true ${EDXAPP_STATIC_ROOT}\n\n\n# === DEVELOPMENT ===\nFROM builder as development\n\nARG DOCKER_UID\nARG DOCKER_GID\n\n# Install system dependencies\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n      git \\\n      libsqlite3-dev \\\n      mongodb && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN groupadd --gid ${DOCKER_GID} edx || \\\n    echo \"Group with ID ${DOCKER_GID} already exists.\" && \\\n    useradd \\\n      --create-home \\\n      --home-dir /home/edx \\\n      --uid ${DOCKER_UID} \\\n      --gid ${DOCKER_GID} \\\n      edx || \\\n    echo \"Skip user creation (user with ID ${DOCKER_UID} already exists?)\" && \\\n    git config --global user.name edx && \\\n    git config --global user.email edx@example.com\n\n# To prevent permission issues related to the non-privileged user running in\n# development, we will install development dependencies in a python virtual\n# environment belonging to that user\nRUN pip install --no-cache-dir virtualenv==16.7.9\n\n# Create the virtualenv directory where we will install python development\n# dependencies\nRUN mkdir -p /edx/app/edxapp/venv && \\\n    chown -R ${DOCKER_UID}:${DOCKER_GID} /edx/app/edxapp/venv\n\n# Change edxapp directory owner to allow the development image docker user to\n# perform installations from edxapp sources (yeah, I know...)\nRUN chown -R ${DOCKER_UID}:${DOCKER_GID} /edx/app/edxapp\n\n# Copy the entrypoint that will activate the virtualenv\nCOPY ./entrypoint.sh /usr/local/bin/entrypoint.sh\n\n# Change sass-cache owner so that the development user has write permission.\n# This is required to run the update_assets paver task in development.\nRUN chown -R ${DOCKER_UID}:${DOCKER_GID} /tmp/sass-cache\n\n# Switch to an un-privileged user matching the host user to prevent permission\n# issues with volumes (host folders)\nUSER ${DOCKER_UID}:${DOCKER_GID}\n\n# Create the virtualenv with a non-privileged user\nRUN virtualenv -p python2.7 --system-site-packages /edx/app/edxapp/venv\n\n# Install development dependencies in a virtualenv (we need to downgrade pip\n# for that)\nRUN bash -c \"source /edx/app/edxapp/venv/bin/activate && \\\n    pip install --upgrade pip==9.0.3 && \\\n    pip install --no-cache-dir -r requirements/edx/development.txt\"\n\n# Re-upgrade pip in the virtualenv for further install (when using sources with\n# volumes)\nRUN bash -c \"source /edx/app/edxapp/venv/bin/activate && \\\n    pip install --upgrade pip\"\n\nENTRYPOINT [ \"/usr/local/bin/entrypoint.sh\" ]\n\n\n# === PRODUCTION ===\nFROM edxapp as production\n\nARG EDXAPP_STATIC_ROOT\n\n# Install runner system dependencies\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n    libgeos-dev \\\n    libjpeg8 \\\n    libmysqlclient18 \\\n    libxml2 \\\n    libxmlsec1-dev \\\n    lynx \\\n    tzdata && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy installed dependencies\nCOPY --from=builder /usr/local /usr/local\n\n# Copy modified sources (sic!)\nCOPY --from=builder /edx/app/edxapp/edx-platform  /edx/app/edxapp/edx-platform\n\n# Copy static files\nCOPY --from=links_collector ${EDXAPP_STATIC_ROOT} ${EDXAPP_STATIC_ROOT}\n\n# Now that dependencies are installed and configuration has been set, the above\n# statements will run with a un-privileged user.\nUSER 10000\n\n# To start the CMS, inject the SERVICE_VARIANT=cms environment variable\n# (defaults to \"lms\")\nENV SERVICE_VARIANT=lms\n\n# Gunicorn configuration\n#\n# As some synchronous requests may be quite long (e.g. courses import), we\n# should make timeout rather high and configurable so that it could be\n# increased without having to make a new release of this image\n#\nENV GUNICORN_TIMEOUT 300\n\n# In docker we must increase the number of workers and threads created\n# by gunicorn.\n# This blogpost explains why and how to do that https://pythonspeed.com/articles/gunicorn-in-docker/\nENV GUNICORN_WORKERS 3\nENV GUNICORN_THREADS 6\n\n# Use Gunicorn in production as web server\nCMD DJANGO_SETTINGS_MODULE=${SERVICE_VARIANT}.envs.fun.docker_run \\\n    gunicorn \\\n      --name=${SERVICE_VARIANT} \\\n      --bind=0.0.0.0:8000 \\\n      --max-requests=1000 \\\n      --timeout=${GUNICORN_TIMEOUT} \\\n      --workers=${GUNICORN_WORKERS} \\\n      --threads=${GUNICORN_THREADS} \\\n      ${SERVICE_VARIANT}.wsgi:application\n\n\n# === NGINX ===\nFROM ${NGINX_IMAGE_NAME}:${NGINX_IMAGE_TAG} as nginx\n\nARG EDXAPP_STATIC_ROOT\n\n# Switch back to the root user to include static files in the container\nUSER root:root\n\nRUN mkdir -p ${EDXAPP_STATIC_ROOT}\n\nCOPY --from=files_collector ${EDXAPP_STATIC_ROOT} ${EDXAPP_STATIC_ROOT}\n\n# Now that everything is included, run the container with a un-privileged user\nUSER 10000\n"
}