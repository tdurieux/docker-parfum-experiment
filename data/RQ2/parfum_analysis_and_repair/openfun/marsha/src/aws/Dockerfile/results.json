{
  "startTime": 1674252681170,
  "endTime": 1674252682109,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM busybox as mediainfo\n\nARG MEDIAINFO_VERSION=20.09\n\n# Embed the mediainfo layer in the image\nRUN wget https://mediaarea.net/download/binary/mediainfo/20.09/MediaInfo_CLI_${MEDIAINFO_VERSION}_Lambda.zip && \\\n    unzip MediaInfo_CLI_${MEDIAINFO_VERSION}_Lambda.zip -d /tmp/mediainfo\n\nFROM amazon/aws-lambda-nodejs:14 as core\nARG POPPLER_VERSION\nARG POPPLER_DATA_VERSION\nARG OPENJPEG_VERSION\n\n# COPY mediainfo in core stage\nCOPY --from=mediainfo /tmp/mediainfo/bin/mediainfo /opt/bin/mediainfo\n\n# Copy sources\n# LAMBDA_TASK_ROOT is defined in base image and its value is /var/task\nCOPY lambda-complete ${LAMBDA_TASK_ROOT}/lambda-complete/\nCOPY lambda-configure ${LAMBDA_TASK_ROOT}/lambda-configure/\nCOPY lambda-elemental-routing ${LAMBDA_TASK_ROOT}/lambda-elemental-routing/\nCOPY lambda-convert ${LAMBDA_TASK_ROOT}/lambda-convert/\nCOPY lambda-medialive ${LAMBDA_TASK_ROOT}/lambda-medialive/\nCOPY lambda-mediapackage ${LAMBDA_TASK_ROOT}/lambda-mediapackage/\nCOPY lambda-migrate ${LAMBDA_TASK_ROOT}/lambda-migrate/\nCOPY utils ${LAMBDA_TASK_ROOT}/utils/\n\n# Install yarn and yarn-recursive\nRUN npm install -g yarn && npm cache clean --force;\n\n# configure volume for lambda mediapackge\nVOLUME /mnt/transcoded_video\n\nWORKDIR /root\n\n## Install packages needed to compile poppler\nRUN yum install -y \\\n   cairo-devel \\\n   cmake \\\n   cmake3 \\\n   fontconfig-devel \\\n   gcc \\\n   gcc-c++ \\\n   gzip \\\n   libjpeg-devel \\\n   libpng-devel \\\n   libtiff-devel \\\n   make \\\n   tar \\\n   xz \\\n   zip && \\\n## download poppler, poppler-data and openjpeg\n    curl -f -k -o poppler.tar.xz https://poppler.freedesktop.org/poppler-${POPPLER_VERSION}.tar.xz && \\\n    tar -xf poppler.tar.xz && \\\n    curl -f -k -o poppler-data.tar.gz https://poppler.freedesktop.org/poppler-data-${POPPLER_DATA_VERSION}.tar.gz && \\\n    tar -xf poppler-data.tar.gz && \\\n    curl -f -k -o openjpeg.tar.gz https://codeload.github.com/uclouvain/openjpeg/tar.gz/refs/tags/v${OPENJPEG_VERSION} && \\\n    tar -xf openjpeg.tar.gz && \\\n## install poppler-data\n    cd poppler-data-${POPPLER_DATA_VERSION} && make install && cd /root && \\\n## build and install openjpeg\n    mkdir openjpeg-${OPENJPEG_VERSION}/build && \\\n    cd openjpeg-${OPENJPEG_VERSION}/build && \\\n    cmake .. -DCMAKE_BUILD_TYPE=Release && \\\n    make && \\\n    make install && cd /root && \\\n## build and install poppler\n    mkdir poppler-${POPPLER_VERSION}/build && \\\n    cd poppler-${POPPLER_VERSION}/build && \\\n    cmake3 .. -DCMAKE_BUILD_TYPE=release -DBUILD_GTK_TESTS=OFF -DBUILD_QT5_TESTS=OFF -DBUILD_QT6_TESTS=OFF \\\n    -DBUILD_CPP_TESTS=OFF -DBUILD_MANUAL_TESTS=OFF -DENABLE_BOOST=OFF -DENABLE_CPP=OFF -DENABLE_GLIB=OFF \\\n    -DENABLE_GOBJECT_INTROSPECTION=OFF -DENABLE_GTK_DOC=OFF -DENABLE_QT5=OFF -DENABLE_QT6=OFF \\\n    -DENABLE_LIBOPENJPEG=openjpeg2 -DENABLE_CMS=none  -DBUILD_SHARED_LIBS=OFF && \\\n    make && \\\n    make install && cd /root && \\\n## Uninstall packages needed to compile poppler\n    yum erase -y \\\n    cairo-devel \\\n    cmake \\\n    cmake3 \\\n    fontconfig-devel \\\n    gcc \\\n    gcc-c++ \\\n    libjpeg-devel \\\n    libpng-devel \\\n    libtiff-devel \\\n    make \\\n    tar \\\n    xz \\\n    zip && \\\n## Cleanup yum caches\n    yum clean all && \\\n    rm -rf /var/cache/yum && rm poppler.tar.xz\n\nWORKDIR /var/task\n\n# Image used in developement with development dependencies\nFROM core as development\n\nRUN cd lambda-complete && yarn install && cd .. && \\\n    cd lambda-configure && yarn install && cd .. && \\\n    cd lambda-convert && yarn install && cd .. && \\\n    cd lambda-medialive && yarn install && cd .. && \\\n    cd lambda-mediapackage && yarn install && cd .. && \\\n    cd lambda-elemental-routing && yarn install && cd .. && \\\n    cd lambda-migrate && yarn install && cd .. && \\\n    yarn cache clean\n\nCMD [ \"index.handler\" ]\n\n# Image used in production without development dependencies\nFROM core as production\n\nRUN cd lambda-complete && yarn install --frozen-lockfile --production=true && cd .. && \\\n    cd lambda-configure && yarn install --frozen-lockfile --production=true && cd .. && \\\n    cd lambda-convert && yarn install --frozen-lockfile --production=true && cd .. && \\\n    cd lambda-medialive && yarn install --frozen-lockfile --production=true && cd .. && \\\n    cd lambda-mediapackage && yarn install --frozen-lockfile --production=true && cd .. && \\\n    cd lambda-elemental-routing && yarn install --frozen-lockfile --production=true && cd .. && \\\n    cd lambda-migrate && yarn install --frozen-lockfile --production=true && cd .. && \\\n    yarn cache clean\n\nCMD [ \"index.handler\" ]\n"
}