{
  "startTime": 1674250232256,
  "endTime": 1674250232839,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6-alpine\n\n# Copy in your requirements file\nADD django_app/requirements-py3.txt /requirements.txt\n\n# OR, if you’re using a directory for your requirements, copy everything (comment out the above and uncomment this if so):\n# ADD requirements /requirements\n\n# Install build deps, then run `pip install`, then remove unneeded build deps all in a single step. Correct the path to your production requirements file, if needed.\nRUN set -ex \\\n    && apk add --no-cache vim libxml2 libxslt libjpeg openjpeg tiff pcre libuuid freetype \\\n    && apk add --no-cache --virtual .build-deps \\\n            gcc \\\n            make \\\n            libc-dev \\\n            musl-dev \\\n            linux-headers \\\n            pcre-dev \\\n            postgresql-dev \\\n            jpeg-dev zlib-dev freetype-dev lcms2-dev openjpeg-dev tiff-dev tk-dev tcl-dev \\\n            libxml2-dev libxslt-dev \\\n    && pyvenv /venv \\\n    && /venv/bin/pip install -U pip \\\n    && LIBRARY_PATH=/lib:/usr/lib /bin/sh -c \"/venv/bin/pip install --no-cache-dir -r /requirements.txt\" \\\n    && runDeps=\"$( \\\n            scanelf --needed --nobanner --recursive /venv \\\n                    | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n                    | sort -u \\\n                    | xargs -r apk info --installed \\\n                    | sort -u \\\n    )\" \\\n    && apk add --no-cache --virtual .python-rundeps $runDeps \\\n    && apk del .build-deps \\\n    && apk add --no-cache vim\n\n# Copy your application code to the container (make sure you create a .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /django_app/\nWORKDIR /django_app/\nADD django_app /django_app/\nADD tools /tools/\n\n# uWSGI will listen on this port\nEXPOSE 8000\n\n# Add any custom, static environment variables needed by Django or your settings file here:\n\n# 数据库后端，可以使sqlite或者mysql\nENV DATABASE_BACKEND=mysql \\\n    MYSQL_DATABASE_NAME=word_master \\\n    MYSQL_HOST=172.17.0.1 \\\n    MYSQL_USERNAME=trent \\\n    MYSQL_PASSWORD=trenttrent \\\n    EMAIL_HOST=smtp.sina.com \\\n    EMAIL_PORT=25 \\\n    EMAIL_HOST_USER=\"word_master@sina.com\" \\\n    EMAIL_HOST_PASSWORD=\"word_master\" \\\n    EMAIL_FROM=\"word_master@sina.com\" \\\n    WILDDOG_APP_ID=\"wd7515031248wztsxi\" \\\n    WILDDOG_API_KEY=\"NYBxLJDMl9Pliv8GyOXWmS1eKGYNXe3IUz0RobMg\"\n\n# uWSGI configuration (customize as needed):\nENV UWSGI_VIRTUALENV=/venv UWSGI_WSGI_FILE=word_master/wsgi.py UWSGI_HTTP=:8000 UWSGI_MASTER=1 UWSGI_WORKERS=2 UWSGI_THREADS=8 UWSGI_UID=1000 UWSGI_GID=1000 UWSGI_LAZY_APPS=1 UWSGI_WSGI_ENV_BEHAVIOR=holy\nENV DJANGO_SETTINGS_MODULE=word_master.settings_prod\nENV MEDIA_ROOT=/upload\nRUN mkdir /upload && chown 1000:1000 /upload\n# Call collectstatic (customize the following line with the minimal environment variables needed for manage.py to run):\nRUN DATABASE_URL=none /venv/bin/python manage.py collectstatic --noinput\n\n# Start uWSGI\nCMD [\"/venv/bin/uwsgi\", \"--http-auto-chunked\", \"--http-keepalive\"]\nVOLUME [ \"/upload\" ]\nENTRYPOINT [\"/django_app/docker-entrypoint.sh\"]\n"
}