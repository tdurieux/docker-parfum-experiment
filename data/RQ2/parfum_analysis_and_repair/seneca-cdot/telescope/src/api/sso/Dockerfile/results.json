{
  "startTime": 1674250629146,
  "endTime": 1674250629725,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Base ###########################################################################\n# Set up the base layer\n# Use a larger node image to do the build for native deps (e.g., gcc, pytyhon)\nFROM node:16 as base\n\n# Reduce npm log spam and colour during install within Docker\nENV NPM_CONFIG_LOGLEVEL=warn\nENV NPM_CONFIG_COLOR=false\n\nRUN npm i -g pnpm && npm cache clean --force;\n\nWORKDIR /app\n\n## Dependencies ###################################################################\n# Stage for installing prod dependencies\nFROM base as dependencies\n\nCOPY package.json ./\n\nRUN pnpm install --prod\n\n## Deploy ######################################################################\n# Stage for that run our app\n# Use a smaller node image (-alpine) at runtime\nFROM node:16-alpine3.15 as deploy\n\nWORKDIR /app\n\n# Copy prodduction node_modules from dependencies\nCOPY --chown=node:node --from=dependencies /app/node_modules ./node_modules/\n\n# Copy the source code\nCOPY --chown=node:node . .\n\n# Switch to the node user vs. root\nUSER node\n\nENV SSO_PORT=7777\n\n# Docker Healthcheck\nHEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\\n\tCMD wget --no-verbose --tries=1 --spider localhost:${SSO_PORT}/healthcheck || exit 1\n\n# Start the app\nCMD [\"node\", \"src/server.js\"]\n"
}