{
  "startTime": 1674220388714,
  "endTime": 1674220390642,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 42,
        "columnEnd": 58
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 24,
        "columnEnd": 40
      }
    }
  ],
  "repairedDockerfile": "# Build: docker build -t sainnhe/dotfiles .\n# Run:   docker run -v <workdir-on-local-machine>:/root/work -it sainnhe/dotfiles zsh\n\nFROM opensuse/tumbleweed:latest\nRUN zypper ref && zypper up -y\nRUN zypper in -y \\\n        shadow \\\n        git \\\n        gcc \\\n        gcc-c++ \\\n        gdb \\\n        ntfs-3g \\\n        wget \\\n        net-tools \\\n        traceroute \\\n        mosh \\\n        nmap \\\n        w3m \\\n        aria2 \\\n        tar \\\n        gzip \\\n        zip \\\n        unzip \\\n        findutils \\\n        fd \\\n        tealdeer \\\n        make \\\n        cmake \\\n        autoconf \\\n        automake \\\n        neofetch \\\n        hyperfine \\\n        onefetch \\\n        bottom \\\n        nnn \\\n        pkgconf-pkg-config \\\n        libstdc++6 \\\n        libopenssl-devel \\\n        curl \\\n        lua54 \\\n        zsh \\\n        tmux \\\n        terminfo \\\n        fzf \\\n        vim \\\n        vim-data \\\n        neovim \\\n        nodejs16 \\\n        nodejs16-devel \\\n        nodejs16-docs \\\n        npm16 \\\n        yarn \\\n        clang \\\n        ripgrep \\\n        texlive \\\n        ShellCheck \\\n        python310 \\\n        python310-pip && \\\n        sync\nRUN pip install --no-cache-dir \\\n        requests \\\n        cmake-language-server\n\nRUN \\\n        git clone --depth=1 https://github.com/sainnhe/dotfiles ~/repo/dotfiles && \\\n        cp ~/repo/dotfiles/.gitconfig ~ && \\\n        cp ~/repo/dotfiles/.gitignore_global ~ && \\\n        cp -r ~/repo/dotfiles/.w3m ~ && \\\n        cp -r ~/repo/dotfiles/.aria2 ~\n\n# Zsh\nRUN \\\n        chsh -s /usr/bin/zsh && \\\n        ln -s /root/repo/dotfiles/.zshrc ~/.zshrc && \\\n        ln -s /root/repo/dotfiles/.zsh-snippets ~/.zsh-snippets && \\\n        cp ~/repo/dotfiles/.zsh-theme/edge-dark.zsh ~/.zsh-theme\nRUN git clone --depth 1 https://github.com/zdharma-continuum/zinit.git ~/.zinit/bin\nSHELL [\"/usr/bin/zsh\", \"-c\"]\nRUN source ~/.zshrc\nRUN zsh -i -c -- 'zinit module build; @zinit-scheduler burst || true '\n\n# Tmux\nRUN \\\n        git clone --depth=1 https://github.com/tmux-plugins/tpm.git ~/.tmux/plugins/tpm && \\\n        cp ~/repo/dotfiles/.tmux.conf ~ && \\\n        ln -s /root/repo/dotfiles/.tmux/tmuxline ~/.tmux/tmuxline\nRUN \\\n        tmux start-server && \\\n        tmux new-session -d && \\\n        sleep 1 && \\\n        ~/.tmux/plugins/tpm/scripts/install_plugins.sh && \\\n        tmux kill-server\n\n# Rust\nRUN \\\n        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init && \\\n        sh rustup-init --default-toolchain nightly --component rust-analyzer-preview rust-docs -y && \\\n        rm rustup-init && \\\n        zsh -c \"cargo install lsd du-dust rm-improved\" && \\\n        zsh -c \"cargo install --all-features --git=https://github.com/latex-lsp/texlab --locked\"\n\n# Vim/Neovim\nRUN \\\n        mkdir -p ~/.config ~/.local/share/nvim && \\\n        ln -s /root/repo/dotfiles/.config/nvim ~/.vim && \\\n        ln -s /root/repo/dotfiles/.config/nvim ~/.config/nvim && \\\n        cp ~/.vim/envs.example.vim ~/.vim/envs.vim\nRUN \\\n        git clone --depth=1 https://github.com/neoclide/coc.nvim.git ~/.local/share/nvim/plugins/coc.nvim && \\\n        cd ~/.local/share/nvim/plugins/coc.nvim && \\\n        yarn install --frozen-lockfile && yarn cache clean;\nRUN \\\n        mkdir -p ~/.local/share/nvim/coc/extensions && \\\n        cd ~/.local/share/nvim/coc/extensions && \\\n        cat ~/.config/nvim/features/full.vim |\\\n        grep \"\\\\\\ 'coc-\" |\\\n        sed -E -e 's/^.*coc//' -e \"s/',//\" -e 's/^/coc/' |\\\n        xargs -I{} npm install --ignore-scripts --no-lockfile --production --no-global --legacy-peer-deps {}; exit 0\nRUN \\\n        cat ~/.config/nvim/features/full.vim |\\\n        grep \"\\\\\\ 'coc-\" |\\\n        sed -E -e 's/^.*coc//' -e \"s/',//\" -e 's/^/coc/' |\\\n        xargs -I{} sh -c \"cd ~/.local/share/nvim/coc/extensions/node_modules/{}; npm install --ignore-scripts --no-lockfile --production --no-global --legacy-peer-deps\"; exit 0\nRUN \\\n        nvim -es --cmd 'call custom#plug#install()' --cmd 'qa' && \\\n        DOCKER_INIT=1 nvim --headless +PlugInstall +qall && \\\n        DOCKER_INIT=1 nvim --headless +\"helptags ALL\" +qall\nRUN \\\n        nvim --headless +\"TSInstallSync all\" +qall\n\n# Post-install\nRUN \\\n        tldr --update && \\\n        zypper clean --all && \\\n        zypper ref && \\\n        yarn cache clean && \\\n        npm cache clean --force && \\\n        rm -rf ~/.cargo/git ~/.cargo/registry && \\\n        rm -rf ~/bin && \\\n        mkdir ~/work && yarn cache clean;\n"
}