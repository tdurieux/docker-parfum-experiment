{
  "startTime": 1674251705128,
  "endTime": 1674251706351,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 38,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Check out https://hub.docker.com/_/node to select a new base image\nFROM node:16-alpine AS BUILD_IMAGE\n\nRUN apk update && apk add curl bash && rm -rf /var/cache/apk/*\nRUN curl -sfL https://gobinaries.com/tj/node-prune | bash -s -- -b /usr/local/bin\n\n# Set to a non-root built-in user `node`\nUSER node\n\n# Create app directory (with user `node`)\nRUN mkdir -p /home/node/app\nWORKDIR /home/node/app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY --chown=node package*.json ./\n\n# Bundle app source code\nCOPY --chown=node . .\nRUN npm run build\n\n# To make npm prune work, else it looks for symbolically linked packages as well\nRUN rm package-lock.json\n\n# Workaround for symlinked packages [copy packages in temp folder]\nRUN mkdir -p /tmp/app-packages\n# COPY --chown=node node_modules/@local/core /tmp/app-packages/core\n\n# Run node prune\nRUN npm prune --production\nRUN /usr/local/bin/node-prune\n\n# Workaround for symlinked packages [npm prune for all packages]\n# WORKDIR /tmp/app-packages/core\nRUN npm prune --production\nRUN /usr/local/bin/node-prune\n\n# Workaround for symlinked packages [reset WORKDIR]\nWORKDIR /home/node/app\n\nFROM node:16-alpine\nWORKDIR /home/node/app\n\nARG NR_ENABLED\n\n# Copy from build image\nCOPY --from=BUILD_IMAGE /home/node/app/dist ./dist\nCOPY --from=BUILD_IMAGE /home/node/app/public ./public\nCOPY --from=BUILD_IMAGE /home/node/app/node_modules ./node_modules\n\n# Workaround for symlinked packages [copy all packages manually]\n# COPY --from=BUILD_IMAGE /tmp/app-packages/core ./node_modules/@local/core\n\nCOPY --from=BUILD_IMAGE /home/node/app/.env.example ./.env.example\nCOPY --from=BUILD_IMAGE /home/node/app/.env.defaults ./.env.defaults\n\nRUN if [ \"$NR_ENABLED\" = \"1\" ] ; then \\\n npm i newrelic; npm cache clean --force; fi\n\n# Bind to all network interfaces so that it can be mapped to the host OS\nENV HOST=::\nENV PORT=3000\nEXPOSE ${PORT}\n\nCMD [ \"node\", \"-r\", \"./dist/opentelemetry-registry.js\", \"./dist/index.js\" ]\n"
}