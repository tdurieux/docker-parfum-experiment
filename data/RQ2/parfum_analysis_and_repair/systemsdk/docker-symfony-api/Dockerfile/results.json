{
  "startTime": 1674251719404,
  "endTime": 1674251720561,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 37,
        "columnStart": 44,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:8.1-fpm\n\n# set main params\nARG BUILD_ARGUMENT_ENV=dev\nENV ENV=$BUILD_ARGUMENT_ENV\nENV APP_HOME /var/www/html\nARG HOST_UID=1000\nARG HOST_GID=1000\nENV USERNAME=www-data\nARG INSIDE_DOCKER_CONTAINER=1\nENV INSIDE_DOCKER_CONTAINER=$INSIDE_DOCKER_CONTAINER\n\n# check environment\nRUN if [ \"$BUILD_ARGUMENT_ENV\" = \"default\" ]; then echo \"Set BUILD_ARGUMENT_ENV in docker build-args like --build-arg BUILD_ARGUMENT_ENV=dev\" && exit 2; \\\n    elif [ \"$BUILD_ARGUMENT_ENV\" = \"dev\" ]; then echo \"Building development environment.\"; \\\n    elif [ \"$BUILD_ARGUMENT_ENV\" = \"test\" ]; then echo \"Building test environment.\"; \\\n    elif [ \"$BUILD_ARGUMENT_ENV\" = \"staging\" ]; then echo \"Building staging environment.\"; \\\n    elif [ \"$BUILD_ARGUMENT_ENV\" = \"prod\" ]; then echo \"Building production environment.\"; \\\n    else echo \"Set correct BUILD_ARGUMENT_ENV in docker build-args like --build-arg BUILD_ARGUMENT_ENV=dev. Available choices are dev,test,staging,prod.\" && exit 2; \\\n    fi\n\n# install all the dependencies and enable PHP modules\nRUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y \\\n      procps \\\n      nano \\\n      git \\\n      unzip \\\n      libicu-dev \\\n      zlib1g-dev \\\n      libxml2 \\\n      libxml2-dev \\\n      libreadline-dev \\\n      supervisor \\\n      cron \\\n      sudo \\\n      libzip-dev \\\n      wget \\\n      librabbitmq-dev \\\n    && pecl install amqp \\\n    && docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd \\\n    && docker-php-ext-configure intl \\\n    && yes '' | pecl install -o -f redis && docker-php-ext-enable redis \\\n    && docker-php-ext-install \\\n      pdo_mysql \\\n      sockets \\\n      intl \\\n      opcache \\\n      zip \\\n    && docker-php-ext-enable amqp \\\n    && rm -rf /tmp/* \\\n    && rm -rf /var/list/apt/* \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\n# create document root, fix permissions for www-data user and change owner to www-data\nRUN mkdir -p $APP_HOME/public && \\\n    mkdir -p /home/$USERNAME && chown $USERNAME:$USERNAME /home/$USERNAME \\\n    && usermod -o -u $HOST_UID $USERNAME -d /home/$USERNAME \\\n    && groupmod -o -g $HOST_GID $USERNAME \\\n    && chown -R ${USERNAME}:${USERNAME} $APP_HOME\n\n# put php config for Symfony\nCOPY ./docker/$BUILD_ARGUMENT_ENV/www.conf /usr/local/etc/php-fpm.d/www.conf\nCOPY ./docker/$BUILD_ARGUMENT_ENV/php.ini /usr/local/etc/php/php.ini\n\n# install Xdebug in case dev/test environment\nCOPY ./docker/general/do_we_need_xdebug.sh /tmp/\nCOPY ./docker/dev/xdebug.ini /tmp/\nRUN chmod u+x /tmp/do_we_need_xdebug.sh && /tmp/do_we_need_xdebug.sh\n\n# install security-checker in case dev/test environment\nCOPY ./docker/general/do_we_need_security-checker.sh /tmp/\nRUN chmod u+x /tmp/do_we_need_security-checker.sh && /tmp/do_we_need_security-checker.sh\n\n# install composer\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN chmod +x /usr/bin/composer\nENV COMPOSER_ALLOW_SUPERUSER 1\n\n# add supervisor\nRUN mkdir -p /var/log/supervisor\nCOPY --chown=root:root ./docker/general/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nCOPY --chown=root:crontab ./docker/general/cron /var/spool/cron/crontabs/root\nRUN chmod 0600 /var/spool/cron/crontabs/root\n\n# set working directory\nWORKDIR $APP_HOME\n\nUSER ${USERNAME}\n\n# copy source files\nCOPY --chown=${USERNAME}:${USERNAME} . $APP_HOME/\n\n# install all PHP dependencies\nRUN if [ \"$BUILD_ARGUMENT_ENV\" = \"dev\" ] || [ \"$BUILD_ARGUMENT_ENV\" = \"test\" ]; then COMPOSER_MEMORY_LIMIT=-1 composer install --optimize-autoloader --no-interaction --no-progress; \\\n    else export APP_ENV=$BUILD_ARGUMENT_ENV && COMPOSER_MEMORY_LIMIT=-1 composer install --optimize-autoloader --no-interaction --no-progress --no-dev; \\\n    fi\n\n# create cached config file .env.local.php in case staging/prod environment\nRUN if [ \"$BUILD_ARGUMENT_ENV\" = \"staging\" ] || [ \"$BUILD_ARGUMENT_ENV\" = \"prod\" ]; then composer dump-env $BUILD_ARGUMENT_ENV; \\\n    fi\n\nUSER root\n"
}