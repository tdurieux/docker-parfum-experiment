{
  "startTime": 1674251014795,
  "endTime": 1674251015397,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 55,
        "lineEnd": 62,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 55,
        "lineEnd": 62,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use the specified base image.\n# All evaluating algorithms are built under Ubuntu 16.04\nFROM ubuntu:16.04\n\n# Set multiple labels at once, using line-continuation characters to break long lines\n# Note: spaces and quotes (\") should be either escaped (with '\\') or the spaces\n# can be taken into quotes\nLABEL vendor=\"eXascale Infolab\" \\\n      info.exascale.clubmark-env.version=\"3.0\" \\\n      info.exascale.clubmark-env.release-date=\"2018-06-03\" \\\n\t  description=\"Execution environment ONLY for the Clubmark (former PyCABeM): https://github.com/eXascaleInfolab/PyCABeM/tree/draft\"\n# Make the working directory an optional build parameter specified by --build-arg\nARG WORK_DIR=/opt/clubmark\n# Requirements (dependencies) files for Python3 relative to the $WORKDIR and\n# without the directory prefix\nARG PYREQS=pyreqs.txt\n# Note: python3 is used to run the benchmark instead of pypy to reduce the number\n# of dependencies, because otherwise Python is also required to install the psutil\n# via pip on pypy\n\n# Define environment variables\n# ATTENTION:\n# - ENV overwrites ARG\n# - ENV will persist when a container is run from the resulting image\n#ENV DEBUG true\n\n# Specify the working directory (created if did not exist)\nWORKDIR $WORK_DIR\n\n# Copy required files to the container (relative to the WORKDIR) usin ADD or COPY\n# Note ADD (vs COPY):\n# - allows <src> to be an URL\n# - If the <src> parameter is an archive in a recognized compression format,\n#  it will be unpacked: ADD rootfs.tar.xz /\n#\n# NOTE: during the image build only the copied files can be used, files from the\n# external volumes are not available\nCOPY ./$PYREQS /tmp/$PYREQS\n\n# Install Ubuntu dependencies\n# - wget is required to download pip for pypy (and as a useful tool)\n# - hwloc (includes lstopo) is required to identify enumeration type of CPUs\n#  to perform correct CPU affinity masking\n# - Python scripts:  python\n# Python2 can be used for all .py files, but it is recommended to use\n# Python3 for most of the files (scp.py supports only Python2) and pypy[2]\n# for the heavy python apps that do not link C libs (scp, ...)\n# - Accessory libraries:\n# -- python-igraph:  libxml2-dev zlib1g-dev (Virtual Package: libz-dev)\n# - Clustering Algorithms:\n# -- ganxis:  openjdk-8-jre  (openjdk >= 7)\n# -- rgmc:  libboost-program-options1.58.0\n# - Evaluation Apps & Utilities:\n# -- gecmi:  libtbb2\n# -- remlinks.py: numpy future\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\twget \\\n\thwloc \\\n\tpython3 python3-pip pypy \\\n\tlibxml2-dev zlib1g-dev \\\n\topenjdk-8-jre \\\n\tlibboost-program-options1.58.0 \\\n\tlibtbb2 && rm -rf /var/lib/apt/lists/*;\n\n## Install pip to pypy\n#RUN set -o pipefail && wget -qO - https://bootstrap.pypa.io/get-pip.py | pypy\n#\n## Install pypy dependencies (Python2 is required for the compilation)\n\n# Note: Python3 and pip3 were installed on previous step\nRUN pip3 install --no-cache-dir --upgrade pip\n\n# Install Python dependencies\n# louvain_igraph.py:  python-igraph\nRUN pip3 install --no-cache-dir -r /tmp/$PYREQS && rm /tmp/$PYREQS\n\n# Make port 8080 available to the world outside this container for the WebUI\nEXPOSE 8080\n\n# Run something when the container launches\n# ATTENTION: Benchmarking in daemon mode should be run only if the Docker is run\n# in the interactive mode, not detached:\n# https://docs.docker.com/engine/reference/run/#detached--d\n# CMD [\"./benchmark_daemon.sh\"]\n#\n# Note:\n# - CMD is appended as arguments to the ENTRYPOINT if the latter is specified\n#CMD [\"bash\"]\n\n# Allows you to configure a container that will run as an executable and pass\n# arguments to the \"benchmark.py\"\n# Notes:\n# - it overrides all elements specified using CMD\n# - \"$ docker exec -it ...\" can be used to run other command on the running container\n# - use --entrypoint=\"\" in the docker run to overwrite the default ENTRYPOINT\n#ENTRYPOINT [\"python3\"]\n#CMD [\"./benchmark.py\"]\nENTRYPOINT [\"python3\", \"./benchmark.py\"]\n\n# Note: Docker uses kernel, memory and swap of the host, so system-wide host\n# swappiness, file limits, etc. should be tuned on the host\n\n#-------------------------------------------------------------------------------\n\n# Expected to be built as\n# $ docker build [--no-cache] [--pull] [--squash] [--compress] -t luaxi/clubmark-env:v3.0-U16.04 .\n# Note: `luaxi/clubmark-env` is the same as `luaxi/clubmark-env:latest`\n# $ docker build -t luaxi/clubmark-env:v3.0-U16.04 -t luaxi/clubmark-env .\n# $ docker push luaxi/clubmark-env\n\n# Expected to be called as:\n# $ docker run -it -u $UID -v `pwd`:$WORK_DIR luaxi/clubmark-env:v3.0-U16.04 [<clubmark_args>]\n# Or to open a shell in the benchmarking directory:\n# $ docker run -it --entrypoint \"\" -u $UID -v `pwd`:/opt/clubmark luaxi/pycabem:env-U16.04-v2.0\n\n# Notes:\n# - \"$UID\" or \"`id -u $USER`\" is host user id, otherwise default user is \"root\",\n#  which results in read-only files owned by the root created on benchmarking execution.\n#  $UID might not be defined in non-bash shells unlike $USER.\n# - \"-w /opt/clubmark\" should be used if the WORKDIR was omitted in the build file\n\n#-------------------------------------------------------------------------------\n# Change log:\n#\n# 3.0.0a  - WebUI added, interfaces extended, lots of fixes made\n# 2.0.2  - h5py added for the evaluations output to the HDF5 file\n# 2.0.1  - hwloc added for the automatic identification of the CPUs enumeration\n#\ttype (required for the affinity masking)\n# 2.0.0  - Initial environment for the benchmarking made as a docker container\n"
}