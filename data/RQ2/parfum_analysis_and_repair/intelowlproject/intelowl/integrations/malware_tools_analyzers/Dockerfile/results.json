{
  "startTime": 1674254084758,
  "endTime": 1674254086375,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 90,
        "columnEnd": 101
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://github.com/qilingframework/qiling/blob/master/Dockerfile\n# based python:3.8-slim\nFROM qilingframework/qiling:1.3.0\n\nENV PROJECT_PATH /opt/deploy\nENV LOG_PATH /var/log/intel_owl/malware_tools_analyzers\nENV USER malware_tools_analyzers-user\n\n# update and install packages\n# line 4: ClamAV deps\n# line 5: Box-JS deps\n# line 6: APKiD deps\n# line 7: Thug deps\n# pytesseract pygraphviz -> Thug, wheel -> APK-iD\nRUN DEBIAN_FRONTEND=noninteractive apt-get update -qq \\\n    && apt-get install -y --no-install-recommends wget git libssl1.1 swig g++ make libssl-dev libmagic1 \\\n    libboost-regex-dev libboost-program-options-dev libboost-system-dev libboost-filesystem-dev build-essential cmake \\\n    clamav clamdscan clamav-daemon clamav-freshclam \\\n    nodejs npm gcc m4 \\\n    pandoc curl \\\n    libboost-dev libboost-python-dev libxml2-dev libxslt-dev tesseract-ocr libtool graphviz-dev \\\n    automake libffi-dev graphviz libfuzzy-dev libfuzzy2 libjpeg-dev libffi-dev pkg-config autoconf \\\n    && pip3 install --no-cache-dir --upgrade pip setuptools wheel pytesseract pygraphviz && rm -rf /var/lib/apt/lists/*;\n\n# Add a new low-privileged user\nRUN useradd -ms /bin/bash ${USER}\n\n# Install Capa and its rules\nWORKDIR ${PROJECT_PATH}\nRUN git clone --depth 1 https://github.com/mandiant/capa.git \\\n    && pip3 install -e capa --no-cache-dir\nRUN git clone --depth 1 https://github.com/mandiant/capa-rules.git\n\n# Install FLOSS nightly binary\nRUN wget -q -O floss-linux https://s3.amazonaws.com/build-artifacts.floss.flare.fireeye.com/travis/linux/dist/floss \\\n    && chmod +x floss-linux \\\n    && ln -s ${PROJECT_PATH}/floss-linux /usr/local/bin/floss \\\n    && chown -R ${USER}:${USER} .\n\n# Build and install PEframe\nRUN git clone --depth 1 https://github.com/guelfoweb/peframe.git\nRUN cd peframe && rm -rf .git && pip3 install -r requirements.txt --no-cache-dir \\\n    && python3 setup.py install \\\n    && rm -rf ./peframe\n\n# Install and build Manalyze\nRUN git clone https://github.com/JusticeRage/Manalyze.git \\\n    && cd Manalyze \\\n    && cmake . \\\n    && make -j5 \\\n    && make install\n\n# Install Box-js\nRUN npm install box-js --global --production \\\n    && mkdir -p /tmp/boxjs \\\n    && chown -R ${USER}:${USER} /tmp/boxjs && npm cache clean --force;\n\n# Install APK-iD\nRUN pip3 wheel --quiet --no-cache-dir --wheel-dir=/tmp/yara-python --build-option=\"build\" --build-option=\"--enable-dex\" git+https://github.com/VirusTotal/yara-python.git@v4.1.3 \\\n    && pip3 install --quiet --no-cache-dir --no-index --find-links=/tmp/yara-python yara-python \\\n    && pip3 install --no-cache-dir apkid\n\n# Install Thug\n# referenced to this: https://hub.docker.com/layers/buffer/thug/ but we get the latest installation\nRUN mkdir ${PROJECT_PATH}/thug\nWORKDIR ${PROJECT_PATH}/thug\nRUN wget https://github.com/area1/stpyv8/releases/download/v9.8.177.11/stpyv8-ubuntu-20.04-python-3.8.zip # buildkit \\\n    && unzip stpyv8-ubuntu-20.04-python-3.8.zip \\\n    && pip3 --no-cache-dir install stpyv8-ubuntu-20.04-3.8/stpyv8-9.8.177.11-cp36-cp36m-linux_x86_64.whl \\\n    && mkdir -p /usr/share/stpyv8 \\\n    && sudo mv stpyv8-ubuntu-20.04-3.8/icudtl.dat /usr/share/stpyv8 \\\n    && git clone https://github.com/buffer/libemu.git && cd libemu && autoreconf -v -i && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make install && cd .. && rm -rf libemu \\\n    && ldconfig \\\n    && pip3 install --no-cache-dir thug \\\n    && git clone --depth 1 https://github.com/buffer/thug.git \\\n    && mkdir /etc/thug /etc/thug/rules /etc/thug/personalities /etc/thug/scripts /etc/thug/plugins /etc/thug/hooks \\\n    && cp -R thug/thug/Classifier/rules/* /etc/thug/rules/ \\\n    && cp -R thug/thug/DOM/personalities/* /etc/thug/personalities \\\n    && cp thug/thug/DOM/thug.js /etc/thug/scripts \\\n    && cp thug/thug/DOM/storage.js /etc/thug/scripts \\\n    && cp thug/thug/DOM/date.js /etc/thug/scripts \\\n    && cp thug/thug/DOM/eval.js /etc/thug/scripts \\\n    && cp thug/thug/DOM/write.js /etc/thug/scripts \\\n    && cp thug/conf/thug.conf /etc/thug \\\n    && rm -rf thug\n\n# Build Flask REST API\nWORKDIR ${PROJECT_PATH}/malware_tools_analyzers-flask\nCOPY app.py requirements.txt entrypoint.sh stringsifter/wrapper.py qiling/analyze.py ./\nRUN pip3 install -r requirements.txt --no-cache-dir \\\n    && chown -R ${USER}:${USER} . \\\n    && chmod +x entrypoint.sh wrapper.py\n\n# Cleanup\nRUN apt-get remove --purge -y wget git gcc \\\n    && apt-get clean \\\n    && apt-get autoclean \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/* /tmp/yara-python /usr/share/doc/* /usr/share/man/* > /dev/null 2>&1\n\n# Permission juggling for ClamAV Analyzer\nRUN mkdir /var/run/clamav && \\\n    chown ${USER}:${USER} /var/run/clamav && \\\n    chmod 750 /var/run/clamav\n\n# Serve Flask application using gunicorn\nEXPOSE 4002\nENTRYPOINT [\"./entrypoint.sh\"]\n"
}