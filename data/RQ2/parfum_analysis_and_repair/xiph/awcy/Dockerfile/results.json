{
  "startTime": 1674253729499,
  "endTime": 1674253731370,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 1,
        "columnEnd": 32
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 1,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 227,
        "lineEnd": 227,
        "columnStart": 1,
        "columnEnd": 57
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 252,
        "lineEnd": 252,
        "columnStart": 1,
        "columnEnd": 83
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 271,
        "lineEnd": 271,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 274,
        "lineEnd": 274,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 1,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 1,
        "columnEnd": 66
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 3,
        "columnEnd": 61
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 2,
        "columnEnd": 60
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 1,
        "columnEnd": 31
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 2,
        "columnEnd": 92
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 1,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 1,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 1,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 70,
        "columnStart": 1,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 216,
        "lineEnd": 223,
        "columnStart": 1,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 1,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 1,
        "columnEnd": 108
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:focal\n\n# environment variables\nENV \\\n\tAPP_USER=xiph \\\n\tAPP_DIR=/opt/app \\\n\tLC_ALL=C.UTF-8 \\\n\tLANG=C.UTF-8 \\\n\tLANGUAGE=C.UTF-8 \\\n\tDEBIAN_FRONTEND=noninteractive \\\n\tGPG_SERVERS=\"hkp://keys.openpgp.org:80 hkp://p80.pool.sks-keyservers.net:80 hkp://keyserver.ubuntu.com:80\"\n\n# add runtime user\nRUN \\\n\tgroupadd --gid 1000 ${APP_USER} && \\\n\tuseradd --uid 1000 --gid ${APP_USER} --shell /bin/bash --create-home ${APP_USER}\n\n# install base build dependencies and useful packages\nRUN \\\n\techo \"deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse\"           >/etc/apt/sources.list && \\\n\techo \"deb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\" >>/etc/apt/sources.list && \\\n\techo \"deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse\"  >>/etc/apt/sources.list && \\\n\tapt-get update && \\\n\tapt-get install -y --no-install-recommends \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tbuild-essential \\\n\t\tbzip2 \\\n\t\tca-certificates \\\n\t\tcheck \\\n\t\tcmake \\\n\t\tcmake-extras \\\n\t\tctags \\\n\t\tcurl \\\n\t\tdirmngr \\\n\t\tfile \\\n\t\tgettext-base \\\n\t\tgit-core \\\n\t\tgpg \\\n\t\tgpg-agent \\\n\t\tg++-aarch64-linux-gnu \\\n\t\tiproute2 \\\n\t\tiputils-ping \\\n\t\tjq \\\n\t\tless \\\n\t\tlibicu-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibogg-dev \\\n\t\tlibpng-dev \\\n\t\tlibtool \\\n\t\tlocales \\\n\t\tnetcat-openbsd \\\n\t\tnet-tools \\\n\t\topenjdk-8-jdk-headless \\\n\t\topenssl \\\n\t\tpkg-config \\\n\t\tprocps \\\n\t\tpsmisc \\\n\t\tpython2.7 \\\n\t\trsync \\\n\t\trunit \\\n\t\tsqlite3 \\\n\t\tstrace \\\n\t\ttcpdump \\\n\t\ttzdata \\\n\t\tunzip \\\n\t\tuuid \\\n\t\tvim \\\n\t\twget \\\n\t\txz-utils \\\n\t\tyasm \\\n\t\t&& \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists && rm -rf /var/lib/apt/lists/*;\n\n# install nasm\nRUN \\\n\tDIR=/tmp/nasm && \\\n\tNASM_URL=http://debian-archive.trafficmanager.net/debian/pool/main/n/nasm && \\\n\tNASM_VERSION=2.15.05-1 && \\\n\tNASM_DEB=nasm_${NASM_VERSION}_amd64.deb && \\\n\tNASM_SUM=c860caec653b865d5b83359452d97b11f1b3ba5b18b07cac554cf72550b3bfc9 && \\\n\tmkdir -p ${DIR} && \\\n\tcd ${DIR} && \\\n\tcurl -f -O ${NASM_URL}/${NASM_DEB} && \\\n\techo ${NASM_SUM} ${NASM_DEB} | sha256sum --check && \\\n\tdpkg -i ${NASM_DEB} && \\\n\trm -rf ${DIR}\n\n# set working directory\nWORKDIR ${APP_DIR}\n\n# prepare rust installation\nENV \\\n\tRUSTUP_HOME=/usr/local/rustup \\\n\tCARGO_HOME=/usr/local/cargo \\\n\tPATH=/usr/local/cargo/bin:${PATH}\n\n# install rust\nRUN \\\n\tRUST_VERSION=1.59.0 && \\\n\tcurl -sSf --output /tmp/rustup-init https://static.rust-lang.org/rustup/archive/1.14.0/x86_64-unknown-linux-gnu/rustup-init && \\\n\tchmod +x /tmp/rustup-init && \\\n\t/tmp/rustup-init -y --no-modify-path --default-toolchain ${RUST_VERSION} && \\\n\trm -vf /tmp/rustup-init\n\n# install node 12.x\nRUN \\\n\tNODE_VERSION=12.16.1 && \\\n\tARCH=x64 && \\\n\tfor key in \\\n\t\t4ED778F539E3634C779C87C6D7062848A1AB005C \\\n\t\tB9E2F5981AA6E0CD28160D9FF13993A75599653C \\\n\t\t94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n\t\tB9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n\t\t77984A986EBC2AA786BC0F66B01FBB92821C587A \\\n\t\t71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n\t\t8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \\\n\t\tC4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n\t\tDD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n\t\tA48C2BEE680E841632CD4E44F07496B3EB3C1762; \\\n\tdo \\\n\t\tfor server in $(shuf -e ${GPG_SERVERS}); do \\\n\t\t\thttp_proxy= gpg --batch --keyserver \"$server\" --recv-keys \"${key}\" && break || :; \\\n\t\tdone; \\\n\tdone && \\\n\tcurl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" && \\\n\tcurl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\" && \\\n\tgpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && \\\n\tgrep \" node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - && \\\n\ttar xJf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" -C /usr --strip-components=1 --no-same-owner && \\\n\trm -vf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt && \\\n\tln -s /usr/bin/node /usr/bin/nodejs\n\n# install emscripten\nRUN \\\n\tEMSDK_VERSION=1.40.1 && \\\n\tEMSDK_HASH=e88a3c5bbfef172a5b947768204ef734e2fb6e04 && \\\n\tmkdir -p /opt/emsdk && \\\n\tcurl -f -sSL https://github.com/emscripten-core/emsdk/archive/${EMSDK_HASH}.tar.gz | tar zxf - -C /opt/emsdk --strip-components=1 && \\\n\tcd /opt/emsdk && \\\n\t./emsdk update && \\\n\t./emsdk install ${EMSDK_VERSION} && \\\n\t./emsdk activate ${EMSDK_VERSION} && \\\n\techo \"hack emscript config getter (em-config)\" && \\\n\tcp .emscripten /home/${APP_USER}/.emscripten && \\\n\tprintf '#!/usr/bin/env python\\nimport os, sys\\nexecfile(os.getenv(\"HOME\")+\"/.emscripten\")\\nprint eval(sys.argv[1])\\n' >/usr/local/bin/em-config && \\\n\tchmod a+x /usr/local/bin/em-config\n\n# install tini\nRUN \\\n\tTINI_VERSION=v0.18.0 && \\\n\tfor server in $(shuf -e ${GPG_SERVERS}); do \\\n\t\thttp_proxy= gpg --batch --keyserver \"$server\" --recv-keys 0527A9B7 && break || :; \\\n\tdone && \\\n\twget -O/usr/bin/tini     \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\" && \\\n\twget -O/usr/bin/tini.asc \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc\" && \\\n\tgpg --batch --verify /usr/bin/tini.asc && \\\n\trm -f /usr/bin/tini.asc && \\\n\tchmod a+x /usr/bin/tini\n\n# install gosu\nRUN \\\n\tGOSU_VERSION=1.11 && \\\n\tfor server in $(shuf -e ${GPG_SERVERS}); do \\\n\t\thttp_proxy= gpg --batch --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || :; \\\n\tdone && \\\n\twget -O/usr/bin/gosu     \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" && \\\n\twget -O/usr/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc\" && \\\n\tgpg --batch --verify /usr/bin/gosu.asc && \\\n\trm -f /usr/bin/gosu.asc && \\\n\tchmod a+x /usr/bin/gosu\n\n# install daalatool\nENV \\\n\tDAALATOOL_DIR=/opt/daalatool\n\nRUN \\\n\tmkdir -p $(dirname ${DAALATOOL_DIR}) && \\\n\tgit clone https://gitlab.xiph.org/xiph/daala.git ${DAALATOOL_DIR} && \\\n\tcd ${DAALATOOL_DIR} && \\\n\t./autogen.sh && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-player && \\\n\tmake tools -j4\n\n# install ciede2000\nENV \\\n\tCIEDE2000_DIR=/opt/dump_ciede2000\n\nRUN \\\n\tmkdir -p $(dirname ${CIEDE2000_DIR}) && \\\n\tgit clone https://github.com/KyleSiefring/dump_ciede2000.git ${CIEDE2000_DIR} && \\\n\tcd ${CIEDE2000_DIR} && \\\n\tcargo build --release\n\n# install hdrtools\nENV \\\n\tHDRTOOLS_DIR=/opt/hdrtools \\\n\tHDRTOOLS_VERSION=0.21\n\nRUN \\\n\tmkdir -p ${HDRTOOLS_DIR} && \\\n\tcurl -sSfL --output HDRTools.tar.bz2 https://gitlab.com/standards/HDRTools/-/archive/v${HDRTOOLS_VERSION}/HDRTools-v${HDRTOOLS_VERSION}.tar.bz2 && \\\n\ttar -xvf HDRTools.tar.bz2 --strip-components=1 -C ${HDRTOOLS_DIR} && \\\n\tcd ${HDRTOOLS_DIR} && \\\n\tsed -i 's/std::modff/modff/g' common/src/OutputY4M.cpp && \\\n\tsed -i 's/using ::hdrtoolslib::Y_COMP;//g' projects/HDRConvScaler/src/HDRConvScalerYUV.cpp && \\\n\tsed -i 's/\\[Y_COMP\\]/\\[hdrtoolslib::Y_COMP\\]/g' projects/HDRConvScaler/src/HDRConvScalerYUV.cpp && \\\n\tmake && rm HDRTools.tar.bz2# -j is broken\n\n# install rd_tool and dependencies\nENV \\\n\tRD_TOOL_DIR=/opt/rd_tool\n\nRUN \\\n\tapt-get update && \\\n\tapt-get install -y --no-install-recommends \\\n\t\tbc \\\n\t\tpython3-boto3 \\\n\t\tpython3-numpy \\\n\t\tpython3-scipy \\\n\t\tpython3-tornado \\\n\t\tssh \\\n\t\ttime \\\n\t\t&& \\\n\tmkdir -p ${RD_TOOL_DIR} && \\\n\trm -vf /etc/ssh/ssh_host_* && \\\n\tcurl -f -sSL https://github.com/xiph/rd_tool/tarball/master | tar zxf - -C ${RD_TOOL_DIR} --strip-components=1 && rm -rf /var/lib/apt/lists/*;\n\n# install meson\nRUN \\\n\tapt-get install --no-install-recommends -y python3 python3-pip python3-setuptools python3-wheel ninja-build && \\\n\tpip3 install --no-cache-dir meson && rm -rf /var/lib/apt/lists/*;\n\n# install dav1d and dependencies\nENV \\\n\tDAV1D_DIR=/opt/dav1d\n\nRUN \\\n\tgit clone https://code.videolan.org/videolan/dav1d.git ${DAV1D_DIR} && \\\n\tcd ${DAV1D_DIR} && \\\n\tmkdir build && cd build && \\\n\tmeson .. && \\\n\tninja\n\n# install VMAF\nENV \\\n\tVMAF_DIR=/opt/vmaf \\\n\tVMAF_VERSION=v2.2.1\n\nRUN \\\n\tmkdir -p ${VMAF_DIR} && \\\n\tcurl -f -sSL https://github.com/Netflix/vmaf/archive/refs/tags/${VMAF_VERSION}.tar.gz | tar zxf - -C ${VMAF_DIR} --strip-components=1 && \\\n\tcd ${VMAF_DIR}/libvmaf && \\\n\tmeson build --buildtype release && \\\n\tninja -C build && \\\n\tninja -C build install\n\n# clear package manager cache\nRUN \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists\n\n# add code\nADD package.json package-lock.json *.ts tsconfig.json ${APP_DIR}/\nADD www ${APP_DIR}/www\n\n# compile typescript/nodejs code\nRUN \\\n\tcd ${APP_DIR} && \\\n\texport PYTHON=python2.7 && \\\n\tnpm install && \\\n\tnpm run tsc && \\\n\tcd ${APP_DIR}/www && \\\n\tnpm install && \\\n\tnpm run build && npm cache clean --force;\n\n# add scripts\nADD *.m *.sh *.py ${APP_DIR}/\n\n# environment variables\nENV \\\n\tCONFIG_DIR=/data/conf \\\n\tCODECS_SRC_DIR=/data/src \\\n\tRUNS_DST_DIR=/data/runs \\\n\tWORK_DIR=/data/work \\\n\tMEDIAS_SRC_DIR=/data/media \\\n\tLOCAL_WORKER_ENABLED=false \\\n\tIRC_CHANNEL=none \\\n\tAWCY_API_KEY=awcy_api_key \\\n\tAWCY_SERVER_PORT=3000 \\\n\tRD_SERVER_PORT=4000\n\n# set entrypoint\nENTRYPOINT [ \"/etc/entrypoint\" ]\n\n# add configuration scripts\nADD etc /etc\n"
}