{
  "startTime": 1674252346884,
  "endTime": 1674252348520,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 2,
        "columnEnd": 33
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 1,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 1,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 1,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 1,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 1,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 66,
        "columnStart": 1,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 155,
        "lineEnd": 160,
        "columnStart": 1,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 1,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 1,
        "columnEnd": 49
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:focal\n\n# environment variables\nENV \\\n\tAPP_USER=xiph \\\n\tAPP_DIR=/opt/app \\\n\tLC_ALL=C.UTF-8 \\\n\tLANG=C.UTF-8 \\\n\tLANGUAGE=C.UTF-8 \\\n\tDEBIAN_FRONTEND=noninteractive\n\n# add runtime user\nRUN \\\n\tgroupadd --gid 1000 ${APP_USER} && \\\n\tuseradd --uid 1000 --gid ${APP_USER} --shell /bin/bash --create-home ${APP_USER}\n\n# install common/useful packages\nRUN \\\n\tARCH=`uname -m` && \\\n\tif [ \"$ARCH\" = \"x86_64\" ]; then \\\n\t\techo \"deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse\"           >/etc/apt/sources.list && \\\n\t\techo \"deb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\" >>/etc/apt/sources.list && \\\n\t\techo \"deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse\"  >>/etc/apt/sources.list; \\\n\telse \\\n\t\techo \"deb http://ports.ubuntu.com/ubuntu-ports/ focal main restricted universe multiverse\"           >/etc/apt/sources.list && \\\n\t\techo \"deb http://ports.ubuntu.com/ubuntu-ports focal-security main restricted universe multiverse\" >>/etc/apt/sources.list && \\\n\t\techo \"deb http://ports.ubuntu.com/ubuntu-ports/ focal-updates main restricted universe multiverse\"  >>/etc/apt/sources.list; \\\n\tfi\n\nRUN \\\n\tapt-get update && \\\n\tapt-get install -y --no-install-recommends \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tbuild-essential \\\n\t\tbzip2 \\\n\t\tca-certificates \\\n\t\tcheck \\\n\t\tctags \\\n\t\tcurl \\\n\t\tfile \\\n\t\tgettext-base \\\n\t\tgit-core \\\n\t\tiproute2 \\\n\t\tiputils-ping \\\n\t\tjq \\\n\t\tless \\\n\t\tlibjpeg-dev \\\n\t\tlibogg-dev \\\n\t\tlibpng-dev \\\n\t\tlibtool \\\n\t\tlocales \\\n\t\tnetcat-openbsd \\\n\t\tnet-tools \\\n\t\topenssl \\\n\t\tpkg-config \\\n\t\tprocps \\\n\t\tpsmisc \\\n\t\trsync \\\n\t\tstrace \\\n\t\ttcpdump \\\n\t\ttzdata \\\n\t\tunzip \\\n\t\tuuid \\\n\t\tvim \\\n\t\twget \\\n\t\txz-utils && \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists && rm -rf /var/lib/apt/lists/*;\n\n# install nasm\nRUN \\\n\tARCH=`uname -m` && \\\n\tif [ \"$ARCH\" = \"x86_64\" ]; then \\\n\t\tDIR=/tmp/nasm && \\\n\t\tNASM_URL=http://debian-archive.trafficmanager.net/debian/pool/main/n/nasm && \\\n\t\tNASM_VERSION=2.15.05-1 && \\\n\t\tNASM_DEB=nasm_${NASM_VERSION}_amd64.deb && \\\n\t\tNASM_SUM=c860caec653b865d5b83359452d97b11f1b3ba5b18b07cac554cf72550b3bfc9 && \\\n\t\tmkdir -p ${DIR} && \\\n\t\tcd ${DIR} && \\\n\t\tcurl -f -O ${NASM_URL}/${NASM_DEB} && \\\n\t\techo ${NASM_SUM} ${NASM_DEB} | sha256sum --check && \\\n\t\tdpkg -i ${NASM_DEB} && \\\n\t\trm -rf ${DIR}; \\\n\tfi\n\n# prepare rust installation\nENV \\\n\tRUSTUP_HOME=/usr/local/rustup \\\n\tCARGO_HOME=/usr/local/cargo \\\n\tPATH=/usr/local/cargo/bin:${PATH}\n\n# install rust\nRUN \\\n\tARCH=`uname -m` && \\\n\tRUST_VERSION=1.59.0 && \\\n\tif [ \"$ARCH\" = \"x86_64\" ]; then \\\n\t\tcurl -sSf --output /tmp/rustup-init  https://static.rust-lang.org/rustup/archive/1.14.0/x86_64-unknown-linux-gnu/rustup-init; \\\n\telse \\\n\t\tcurl -sSf --output /tmp/rustup-init  https://static.rust-lang.org/rustup/archive/1.14.0/aarch64-unknown-linux-gnu/rustup-init; \\\n\tfi && \\\n\tchmod +x /tmp/rustup-init && \\\n\t/tmp/rustup-init -y --no-modify-path --default-toolchain ${RUST_VERSION} && \\\n\trm -vf /tmp/rustup-init\n\n# install daalatool\nENV \\\n\tDAALATOOL_DIR=/opt/daalatool\n\nRUN \\\n\tmkdir -p $(dirname ${DAALATOOL_DIR}) && \\\n\tgit clone https://gitlab.xiph.org/xiph/daala.git ${DAALATOOL_DIR} && \\\n\tcd ${DAALATOOL_DIR} && \\\n\t./autogen.sh && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-player && \\\n\tmake tools -j4\n\n# install ciede2000\nENV \\\n\tCIEDE2000_DIR=/opt/dump_ciede2000\n\nRUN \\\n\tmkdir -p $(dirname ${CIEDE2000_DIR}) && \\\n\tgit clone https://github.com/KyleSiefring/dump_ciede2000.git ${CIEDE2000_DIR} && \\\n\tcd ${CIEDE2000_DIR} && \\\n\tcargo build --release\n\n# install hdrtools\nENV \\\n\tHDRTOOLS_DIR=/opt/hdrtools \\\n\tHDRTOOLS_VERSION=0.21\n\nRUN \\\n\tARCH=`uname -m` && \\\n\tmkdir -p ${HDRTOOLS_DIR} && \\\n\tcurl -sSfL --output HDRTools.tar.bz2 https://gitlab.com/standards/HDRTools/-/archive/v${HDRTOOLS_VERSION}/HDRTools-v${HDRTOOLS_VERSION}.tar.bz2 && \\\n\ttar -xvf HDRTools.tar.bz2 --strip-components=1 -C ${HDRTOOLS_DIR} && \\\n\tcd ${HDRTOOLS_DIR} && \\\n\tsed -i 's/std::modff/modff/g' common/src/OutputY4M.cpp && \\\n\tsed -i 's/using ::hdrtoolslib::Y_COMP;//g' projects/HDRConvScaler/src/HDRConvScalerYUV.cpp && \\\n\tsed -i 's/\\[Y_COMP\\]/\\[hdrtoolslib::Y_COMP\\]/g' projects/HDRConvScaler/src/HDRConvScalerYUV.cpp && \\\n\tif [ \"$ARCH\" = \"aarch64\" ]; then \\\n\t\t# temporary patches until ARM support is upstream\n\t\tsed -i 's/-msse2//g' common/Makefile projects/*/Makefile; \\\n\t\tsed -i 's/-mfpmath=sse//g' common/Makefile projects/*/Makefile; \\\n\t\tsed -i 's/#include <x86intrin.h>//g' common/src/ResizeBiCubic.cpp common/src/DistortionMetricVQM.cpp; \\\n\t\tsed -i 's/#include <mmintrin.h>//g' common/src/DistortionMetricVQM.cpp; \\\n\t\tsed -i 's/#if defined(ENABLE_SSE_OPT)/#if ENABLE_SSE_OPT/g' common/src/ResizeBiCubic.cpp; \\\n\tfi && \\\n\tmake && rm HDRTools.tar.bz2# -j is broken\n\n# install rd_tool dependencies\nRUN \\\n\tapt-get update && \\\n\tapt-get install -y --no-install-recommends \\\n\t\tbc \\\n\t\tpython3-numpy \\\n\t\tpython3-scipy \\\n\t\tssh \\\n\t\ttime \\\n\t\t&& \\\n\trm -vf /etc/ssh/ssh_host_* && rm -rf /var/lib/apt/lists/*;\n\n# install dav1d and dependencies\nENV \\\n\tDAV1D_DIR=/opt/dav1d\n\nRUN \\\n\tapt-get install --no-install-recommends -y meson && \\\n\tgit clone https://code.videolan.org/videolan/dav1d.git ${DAV1D_DIR} && \\\n\tcd ${DAV1D_DIR} && \\\n\tmkdir build && cd build && \\\n\tmeson .. && \\\n\tninja && rm -rf /var/lib/apt/lists/*;\n\n# install VMAF\nENV \\\n\tVMAF_DIR=/opt/vmaf \\\n\tVMAF_VERSION=v2.2.1\n\nRUN \\\n\tmkdir -p ${VMAF_DIR} && \\\n\tcurl -f -sSL https://github.com/Netflix/vmaf/archive/refs/tags/${VMAF_VERSION}.tar.gz | tar zxf - -C ${VMAF_DIR} --strip-components=1 && \\\n\tcd ${VMAF_DIR}/libvmaf && \\\n\tmeson build --buildtype release && \\\n\tninja -C build && \\\n\tninja -C build install\n\n# clear package manager cache\nRUN \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists\n\n# set working directory\nWORKDIR /home/${APP_USER}\n\n# environment variables\nENV \\\n\tWORK_DIR=/data/work\n\n# create symbolic links\nRUN \\\n    mkdir /home/${APP_USER}/awcy_temp && \\\n    chown -R ${APP_USER}:${APP_USER} /home/${APP_USER}/awcy_temp && \\\n    ln -s /opt/daalatool /home/${APP_USER}/awcy_temp/daalatool && \\\n    ln -s /opt/vmaf /home/${APP_USER}/awcy_temp/vmaf && \\\n    ln -s /opt/dump_ciede2000 /home/${APP_USER}/awcy_temp/dump_ciede2000 && \\\n    ln -s /opt/dav1d /home/${APP_USER}/awcy_temp/dav1d\n\n# set entrypoint\nADD etc/entrypoint.worker /etc/entrypoint.worker\nENTRYPOINT [ \"/etc/entrypoint.worker\" ]\n"
}