{
  "startTime": 1674216467128,
  "endTime": 1674216468569,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 112
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 7,
        "columnEnd": 162
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 18,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 7,
        "columnEnd": 120
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 7,
        "columnEnd": 120
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 32,
        "columnEnd": 131
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 32,
        "columnEnd": 131
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stable\n\nRUN set -x && apt-get update && apt-get install --no-install-recommends -y unzip automake build-essential curl file pkg-config git python libtool libtinfo5 && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt/android\n## INSTALL ANDROID SDK\nENV ANDROID_SDK_REVISION 4333796\nENV ANDROID_SDK_HASH 92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9\nRUN set -x \\\n    && curl -f -s -O https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_REVISION}.zip \\\n    && echo \"${ANDROID_SDK_HASH}  sdk-tools-linux-${ANDROID_SDK_REVISION}.zip\" | sha256sum -c \\\n    && unzip sdk-tools-linux-${ANDROID_SDK_REVISION}.zip \\\n    && rm -f sdk-tools-linux-${ANDROID_SDK_REVISION}.zip\n\n## INSTALL ANDROID NDK\nENV ANDROID_NDK_REVISION 17c\nENV ANDROID_NDK_HASH 3f541adbd0330a9205ba12697f6d04ec90752c53d6b622101a2a8a856e816589\nRUN set -x \\\n    && curl -f -s -O https://dl.google.com/android/repository/android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip \\\n    && echo \"${ANDROID_NDK_HASH}  android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip\" | sha256sum -c \\\n    && unzip android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip \\\n    && rm -f android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip\n\nENV WORKDIR /opt/android\nENV ANDROID_SDK_ROOT ${WORKDIR}/tools\nENV ANDROID_NDK_ROOT ${WORKDIR}/android-ndk-r${ANDROID_NDK_REVISION}\nENV PREFIX /opt/android/prefix\n\nENV TOOLCHAIN_DIR ${WORKDIR}/toolchain\nRUN set -x \\\n    && ${ANDROID_NDK_ROOT}/build/tools/make_standalone_toolchain.py \\\n         --arch arm64 \\\n         --api 21 \\\n         --install-dir ${TOOLCHAIN_DIR} \\\n         --stl=libc++\n\n#INSTALL cmake\nARG CMAKE_VERSION=3.14.6\nARG CMAKE_HASH=82e08e50ba921035efa82b859c74c5fbe27d3e49a4003020e3c77618a4e912cd\nRUN set -x \\\n    && cd /usr \\\n    && curl -f -L -s -O https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz \\\n    && echo \"${CMAKE_HASH}  cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz\" | sha256sum -c \\\n    && tar -xzf /usr/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz \\\n    && rm -f /usr/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz\nENV PATH /usr/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:$PATH\n\n## Boost\nARG BOOST_VERSION=1_70_0\nARG BOOST_VERSION_DOT=1.70.0\nARG BOOST_HASH=430ae8354789de4fd19ee52f3b1f739e1fba576f0aded0897c3c2bc00fb38778\nRUN set -x \\\n    && curl -f -s -L -o  boost_${BOOST_VERSION}.tar.bz2 https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n    && echo \"${BOOST_HASH}  boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n    && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n    && rm -f boost_${BOOST_VERSION}.tar.bz2 \\\n    && cd boost_${BOOST_VERSION} \\\n    && ./bootstrap.sh --prefix=${PREFIX}\n\nENV HOST_PATH $PATH\nENV PATH $TOOLCHAIN_DIR/aarch64-linux-android/bin:$TOOLCHAIN_DIR/bin:$PATH\n\nARG NPROC=1\n\n# Build iconv for lib boost locale\nENV ICONV_VERSION 1.16\nENV ICONV_HASH e6a1b1b589654277ee790cce3734f07876ac4ccfaecbee8afa0b649cf529cc04\nRUN set -x \\\n    && curl -f -s -O http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${ICONV_VERSION}.tar.gz \\\n    && echo \"${ICONV_HASH}  libiconv-${ICONV_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf libiconv-${ICONV_VERSION}.tar.gz \\\n    && rm -f libiconv-${ICONV_VERSION}.tar.gz \\\n    && cd libiconv-${ICONV_VERSION} \\\n    && CC=aarch64-linux-android-clang CXX=aarch64-linux-android-clang++ ./configure --build=x86_64-linux-gnu --host=aarch64-linux-android --prefix=${PREFIX} --disable-rpath \\\n    && make -j${NPROC} && make install\n\n## Build BOOST\nRUN set -x \\\n    && cd boost_${BOOST_VERSION} \\\n    && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale --build-dir=android --stagedir=android toolset=clang threading=multi threadapi=pthread target-os=android -sICONV_PATH=${PREFIX} install -j${NPROC}\n\n#Note : we build openssl because the default lacks DSA1\n\n# download, configure and make Zlib\nENV ZLIB_VERSION 1.2.11\nENV ZLIB_HASH c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1\nRUN set -x \\\n    && curl -f -s -O https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz \\\n    && echo \"${ZLIB_HASH}  zlib-${ZLIB_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf zlib-${ZLIB_VERSION}.tar.gz \\\n    && rm zlib-${ZLIB_VERSION}.tar.gz \\\n    && mv zlib-${ZLIB_VERSION} zlib \\\n    && cd zlib && CC=clang CXX=clang++ ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --static \\\n    && make -j${NPROC}\n\n# open ssl\nARG OPENSSL_VERSION=1.0.2p\nARG OPENSSL_HASH=50a98e07b1a89eb8f6a99477f262df71c6fa7bef77df4dc83025a2845c827d00\nRUN set -x \\\n    && curl -f -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n    && echo \"${OPENSSL_HASH}  openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n    && rm openssl-${OPENSSL_VERSION}.tar.gz \\\n    && cd openssl-${OPENSSL_VERSION} \\\n    && sed -i -e \"s/mandroid/target\\ aarch64\\-linux\\-android/\" Configure \\\n    && CC=clang CXX=clang++ \\\n           ./Configure android \\\n           no-asm \\\n           no-shared --static \\\n           --with-zlib-include=${WORKDIR}/zlib/include --with-zlib-lib=${WORKDIR}/zlib/lib \\\n           --prefix=${PREFIX} --openssldir=${PREFIX} \\\n    && make -j${NPROC} \\\n    && make install\n\n# ZMQ\nARG ZMQ_VERSION=v4.3.2\nARG ZMQ_HASH=a84ffa12b2eb3569ced199660bac5ad128bff1f0\nRUN set -x \\\n    && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n    && cd libzmq \\\n    && test `git rev-parse HEAD` = ${ZMQ_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CC=clang CXX=clang++ ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${PREFIX} --host=aarch64-linux-android --enable-static --disable-shared \\\n    && make -j${NPROC} \\\n    && make install\n\n# Sodium\nARG SODIUM_VERSION=1.0.18\nARG SODIUM_HASH=4f5e89fa84ce1d178a6765b8b46f2b6f91216677\nRUN set -x \\\n    && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n    && cd libsodium \\\n    && test `git rev-parse HEAD` = ${SODIUM_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CC=clang CXX=clang++ ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${PREFIX} --host=aarch64-linux-android --enable-static --disable-shared \\\n    && make  -j${NPROC} \\\n    && make install\n\nCOPY . /src\nARG NPROC=4\nRUN set -x \\\n    && cd /src \\\n    && CMAKE_INCLUDE_PATH=\"${PREFIX}/include\" \\\n       CMAKE_LIBRARY_PATH=\"${PREFIX}/lib\" \\\n       ANDROID_STANDALONE_TOOLCHAIN_PATH=${TOOLCHAIN_DIR} \\\n       USE_SINGLE_BUILDDIR=1 \\\n       PATH=${HOST_PATH} make release-static-android-armv8-wallet_api -j${NPROC}\n\nRUN set -x \\\n    && cd /src/build/release \\\n    && find . -path ./lib -prune -o -name '*.a' -exec cp '{}' lib \\;\n"
}