{
  "startTime": 1674252512586,
  "endTime": 1674252513867,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build\nFROM golang:1.12 as builder\n\nRUN go get -d -v github.com/odise/go-cron \\\n    && cd /go/src/github.com/robfig/cron \\\n    && git checkout tags/v1.2.0 \\\n    && cd /go/src/github.com/odise/go-cron \\\n    && CGO_ENABLED=0 GOOS=linux go build -o go-cron bin/go-cron.go\n\n# Package\nFROM debian:buster-slim\nLABEL maintainer=\"selim013@gmail.com\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends gnupg dirmngr bzip2 && rm -rf /var/lib/apt/lists/*\n\n# add gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.14\nRUN set -eux; \\\n    key='B42F6819007F00F88E364FD4036A9C25BF357DD4'; \\\n    savedAptMark=\"$(apt-mark showmanual)\"; \\\n    apt-get update; \\\n    apt-get install -y --no-install-recommends ca-certificates wget; \\\n    rm -rf /var/lib/apt/lists/*; \\\n    dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n    wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n    wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n    (gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\" \\\n    || gpg --batch --keyserver keys.openpgp.org --recv-keys \"$key\" \\\n    || gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\"); \\\n    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n    gpgconf --kill all; \\\n    rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n    apt-mark auto '.*' > /dev/null; \\\n    [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n    chmod +x /usr/local/bin/gosu; \\\n    gosu --version; \\\n    gosu nobody true\n\nRUN set -uex; \\\n    # gpg: key 3A79BD29: public key \"MySQL Release Engineering <mysql-build@oss.oracle.com>\" imported\n    key='859BE8D7C586F538430B19C2467B942D3A79BD29'; \\\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n    (gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\" \\\n    || gpg --batch --keyserver keys.openpgp.org --recv-keys \"$key\" \\\n    || gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\"); \\\n    gpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/mysql.gpg; \\\n    gpgconf --kill all; \\\n    rm -rf \"$GNUPGHOME\"; \\\n    apt-key list > /dev/null\n\nENV MYSQL_MAJOR 5.7\n\nRUN echo \"deb http://repo.mysql.com/apt/debian/ buster mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y mysql-community-client \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /etc/default /etc/mysql\n\nCOPY --from=builder /go/src/github.com/odise/go-cron/go-cron /usr/local/bin/\nCOPY automysqlbackup start.sh /usr/local/bin/\n\nRUN chmod +x /usr/local/bin/go-cron \\\n    /usr/local/bin/automysqlbackup \\\n    /usr/local/bin/start.sh\n\nRUN groupadd --system automysqlbackup --gid=1000 && useradd --system --uid=1000 --gid automysqlbackup automysqlbackup\n\nWORKDIR /backup\n\nENV USERNAME=           \\\n    PASSWORD=           \\\n    DBHOST=localhost    \\\n    DBNAMES=all         \\\n    DBPORT=3306         \\\n    BACKUPDIR=\"/backup\" \\\n    MDBNAMES=           \\\n    DBEXCLUDE=\"\"        \\\n    IGNORE_TABLES=\"\"    \\\n    CREATE_DATABASE=yes \\\n    SEPDIR=yes          \\\n    DOWEEKLY=6          \\\n    COMP=gzip           \\\n    COMMCOMP=no         \\\n    LATEST=no           \\\n    MAX_ALLOWED_PACKET= \\\n    SOCKET=             \\\n    PREBACKUP=          \\\n    POSTBACKUP=         \\\n    ROUTINES=yes        \\\n    EXTRA_OPTS=         \\\n    CRON_SCHEDULE=      \\\n    USER_ID=1           \\\n    GROUP_ID=\n\nCMD [\"start.sh\"]\n"
}