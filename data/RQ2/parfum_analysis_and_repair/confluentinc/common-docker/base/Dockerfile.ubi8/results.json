{
  "startTime": 1674254936852,
  "endTime": 1674254937806,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 7,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright 2017 Confluent Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nARG UBI_MINIMAL_VERSION=\"latest\"\nFROM registry.access.redhat.com/ubi8/ubi-minimal:${UBI_MINIMAL_VERSION}\n\nARG PROJECT_VERSION\nARG ARTIFACT_ID\n\n# Remember where we came from\nLABEL io.confluent.docker.git.repo=\"confluentinc/common-docker\"\n\nARG GIT_COMMIT\nLABEL io.confluent.docker.git.id=$GIT_COMMIT\n\nARG BUILD_NUMBER=-1\nLABEL io.confluent.docker.build.number=$BUILD_NUMBER\n\nLABEL maintainer=\"tools@confluent.io\"\nLABEL vendor=\"Confluent\"\nLABEL version=$GIT_COMMIT\nLABEL release=$PROJECT_VERSION\nLABEL name=$ARTIFACT_ID\nLABEL summary=\"Common base image for Confluent's Docker images.\"\nLABEL description=\"Common base image for Confluent's Docker images.\"\nLABEL io.confluent.docker=true\n\n# This affects how strings in Java class files are interpreted.  We want UTF-8 and this is the only locale in the\n# base image that supports it\nENV LANG=\"C.UTF-8\"\n\n# Set the classpath for JARs required by `cub`\nENV CUB_CLASSPATH='\"/usr/share/java/cp-base-new/*\"'\n\n# These ARGs are left blank indicating to the Dnf package manager to install the latest package\n# version that happens to be availible at this time. For reproducible builds, versions should be specified\n# as '-1.2.3-4.el8' on the command line. Or more preferibly the 'dockerfile-maven-plugin' is used\n# where these arguments are set in base/pom.xml under the <buildArgs> elements based on the commit you're\n# building from.\n\n# Redhat Package Versions\nARG OPENSSL_VERSION=\"\"\nARG WGET_VERSION=\"\"\nARG NETCAT_VERSION=\"\"\nARG PYTHON36_VERSION=\"\"\nARG TAR_VERSION=\"\"\nARG PROCPS_VERSION=\"\"\nARG KRB5_WORKSTATION_VERSION=\"\"\nARG IPUTILS_VERSION=\"\"\nARG HOSTNAME_VERSION=\"\"\nARG XZ_LIBS_VERSION=\"\"\nARG GLIBC_VERSION=\"\"\nARG CONFLUENT_PACKAGES_REPO\n\n# Zulu OpenJDK version\nARG ZULU_OPENJDK_VERSION=\"\"\n\n# Python Module Versions\nARG PYTHON_PIP_VERSION=\"\"\nARG PYTHON_SETUPTOOLS_VERSION=\"\"\n\n# Confluent Docker Utils Version (Namely the tag or branch to grab from git to install)\nARG PYTHON_CONFLUENT_DOCKER_UTILS_VERSION=\"master\"\n\n# This can be overriden for an offline/air-gapped builds\nARG PYTHON_CONFLUENT_DOCKER_UTILS_INSTALL_SPEC=\"git+https://github.com/confluentinc/confluent-docker-utils@${PYTHON_CONFLUENT_DOCKER_UTILS_VERSION}\"\n\nRUN microdnf --nodocs install yum \\\n    && rpm --import https://www.azul.com/files/0xB1998361219BD9C9.txt \\\n    && yum --nodocs -y install https://cdn.azul.com/zulu/bin/zulu-repo-1.0.0-1.noarch.rpm \\\n    && yum --nodocs install -y --setopt=install_weak_deps=False \\\n        git \\\n        \"openssl${OPENSSL_VERSION}\" \\\n        \"wget${WGET_VERSION}\" \\\n        \"nmap-ncat${NETCAT_VERSION}\" \\\n        \"python36${PYTHON36_VERSION}\" \\\n        \"tar${TAR_VERSION}\" \\\n        \"procps-ng${PROCPS_VERSION}\" \\\n        \"krb5-workstation${KRB5_WORKSTATION_VERSION}\" \\\n        \"iputils${IPUTILS_VERSION}\" \\\n        \"hostname${HOSTNAME_VERSION}\" \\\n        \"xz-libs${XZ_LIBS_VERSION}\" \\\n        \"glibc${GLIBC_VERSION}\" \\\n        \"glibc-common${GLIBC_VERSION}\" \\\n        \"glibc-minimal-langpack${GLIBC_VERSION}\" \\\n        \"zulu11-ca-jdk-headless${ZULU_OPENJDK_VERSION}\" \"zulu11-ca-jre-headless${ZULU_OPENJDK_VERSION}\" \\\n    && alternatives --set python /usr/bin/python3 \\\n    && python3 -m pip install --upgrade \"pip${PYTHON_PIP_VERSION}\" \"setuptools${PYTHON_SETUPTOOLS_VERSION}\" \\\n    && python3 -m pip install --prefer-binary --prefix=/usr/local --upgrade \"${PYTHON_CONFLUENT_DOCKER_UTILS_INSTALL_SPEC}\" \\\n    && yum remove -y git \\\n    # Work around until Redhat releases updated base image\n    && yum --nodocs update -y tzdata libgcc libstdc++ cyrus-sasl-lib \\\n    && yum clean all \\\n    && rm -rf /tmp/* \\\n    && mkdir -p /etc/confluent/docker /usr/logs \\\n    && useradd --no-log-init --create-home --shell /bin/bash appuser \\\n    && chown appuser:appuser -R /etc/confluent/ /usr/logs && rm -rf /var/cache/yum\n\n# This is a step that will cause the build to fail of the package manager detects a package update is availible and isn't installed.\n# The ARG SKIP_SECURITY_UPDATE_CHECK is an \"escape\" hatch if you want to by-pass this check and build the container anyways, which\n# is not advisable in terms of security posture. If set to false (which triggers a shell exit(1) if the check fails from the left\n# hand of ||) this check will fail. If true (which triggers a right-hand || shell exit(0)), then this check will pass even if a\n# security update is availible. We skip checks from ZuluJDK repos because Confluent pins those upstream versions for various reasons\n# such as identified bugs in ZuluJDK's software.\nARG SKIP_SECURITY_UPDATE_CHECK=\"false\"\nRUN yum check-update || \"${SKIP_SECURITY_UPDATE_CHECK}\"\n\nADD --chown=appuser:appuser target/${ARTIFACT_ID}-${PROJECT_VERSION}-package/share/doc/* /usr/share/doc/${ARTIFACT_ID}/\nADD --chown=appuser:appuser target/${ARTIFACT_ID}-${PROJECT_VERSION}-package/share/java/${ARTIFACT_ID}/* /usr/share/java/${ARTIFACT_ID}/\n\nCOPY --chown=appuser:appuser include/etc/confluent/docker /etc/confluent/docker\n\nRUN mkdir /licenses\nCOPY license.txt /licenses\n\nUSER appuser\nWORKDIR /home/appuser\n"
}