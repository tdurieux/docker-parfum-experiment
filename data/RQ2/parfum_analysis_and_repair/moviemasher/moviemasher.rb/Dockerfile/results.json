{
  "startTime": 1674254966458,
  "endTime": 1674254967442,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 91,
        "columnStart": 2,
        "columnEnd": 3
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 2,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 23,
        "columnStart": 22,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 23,
        "columnStart": 22,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.7\nMAINTAINER Movie Masher <support@moviemasher.com>\n\nENV HOME /root\n\n# install tools and helpers\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  apt-utils \\\n  build-essential \\\n  cmake \\\n  git \\\n  subversion \\\n  wget \\\n  yasm \\\n  nasm && rm -rf /var/lib/apt/lists/*;\n\n# install video libs and plugins\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  libfontconfig-dev \\\n  libfribidi-dev \\\n  libgd-dev \\\n  libvpx-dev \\\n  libxvidcore-dev \\\n  frei0r-plugins-dev && rm -rf /var/lib/apt/lists/*;\n\n# install audio libs and apps\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  libmp3lame-dev \\\n  libogg-dev \\\n  libopencore-amrnb-dev \\\n  libopencore-amrwb-dev \\\n  libsamplerate-dev \\\n  libsndfile-dev \\\n  libsox-dev \\\n  libspeex-dev \\\n  libtheora-dev \\\n  libvorbis-dev \\\n  sox \\\n  ecasound \\\n  libmad0-dev \\\n  libid3tag0-dev \\\n  libboost-all-dev && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /data\n\nRUN \\\n  cd /data; \\\n  git clone https://github.com/uclouvain/openjpeg.git; \\\n  mkdir openjpeg/build; \\\n  cd openjpeg/build; \\\n  cmake .. -DCMAKE_BUILD_TYPE=Release; \\\n  make; \\\n  make install; \\\n  rm -R /data/openjpeg\n\n# pull, configure, make and install x264\nRUN \\\n  cd /data; \\\n  git clone https://code.videolan.org/videolan/x264.git; \\\n  cd /data/x264; \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --enable-shared; \\\n  make; \\\n  make install; \\\n  rm -R /data/x264\n\n# pull, configure, make and install most recent ffmpeg\nRUN \\\n  cd /data; \\\n  wget https://ffmpeg.org/releases/ffmpeg-4.2.4.tar.gz; \\\n  tar -xzvf ffmpeg-4.2.4.tar.gz; rm ffmpeg-4.2.4.tar.gz \\\n  cd /data/ffmpeg-4.2.4; \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --enable-frei0r \\\n    --enable-gpl \\\n    --enable-libfontconfig \\\n    --enable-libfreetype \\\n    --enable-libfribidi \\\n    --enable-libmp3lame \\\n    --enable-libopencore-amrnb \\\n    --enable-libopencore-amrwb \\\n    --enable-libopenjpeg \\\n    --enable-libspeex \\\n    --enable-libtheora \\\n    --enable-libvorbis \\\n    --enable-libx264 \\\n    --enable-libxvid \\\n    --enable-postproc \\\n    --enable-pthreads \\\n    --enable-version3 \\\n    --enable-zlib \\\n    --extra-cflags=\"-I/usr/local/include/openjpeg\" \\\n  ; \\\n  make; \\\n  make install; \\\n  rm -R /data/ffmpeg-4.2.4;\n\n# needed for binaries to find libraries\nRUN ldconfig\n\n# install audiowaveform to build waveform PNGs\nRUN \\\n  cd /data; \\\n  git clone https://github.com/bbc/audiowaveform.git; \\\n  mkdir audiowaveform/build; \\\n  cd audiowaveform/build; \\\n  cmake -D ENABLE_TESTS=0 ..; \\\n  make; \\\n  make install; \\\n  audiowaveform --help\n\n# install our production gems\nCOPY Gemfile /data/\nRUN \\\n  bundle install;\n\n# copy everything except what's caught by .dockerignore\nCOPY . /mnt/moviemasher.rb/\nWORKDIR /mnt/moviemasher.rb\n\n# install our entry point, with default command\nCMD [\"moviemasher\"]\nENTRYPOINT [\"config/docker/entrypoint.rb\"]\n\n# clean up apt and temporary directories\nRUN apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# expose all our configurable directories as potential mount points\nVOLUME /tmp/moviemasher/queue\nVOLUME /tmp/moviemasher/log\nVOLUME /tmp/moviemasher/render\nVOLUME /tmp/moviemasher/download\nVOLUME /tmp/moviemasher/error\n\n"
}