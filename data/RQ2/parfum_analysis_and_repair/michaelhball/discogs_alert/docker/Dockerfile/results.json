{
  "startTime": 1674249322938,
  "endTime": 1674249323887,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 28,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Creating a python base with shared environment variables\nFROM python:3.10.0-slim as python-base\nENV PYTHONUNBUFFERED=1 \\\n    PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONFAULTHANDLER=1\n\nWORKDIR /discogs_alert\n\n\n# create 'builder' stage to install dependencies and build `discogs_alert`\nFROM python-base as builder\n\nENV PIP_DEFAULT_TIMEOUT=100 \\\n    PIP_DISABLE_PIP_VERSION_CHECK=1 \\\n    PIP_NO_CACHE_DIR=1\n\n# Install Poetry & create venv (respects $POETRY_VERSION & $POETRY_HOME)\nENV POETRY_VERSION=1.1.13\nRUN pip install --no-cache-dir \"poetry==$POETRY_VERSION\"\nRUN python -m venv /venv\n\n# install dependences & create build version of package\nCOPY pyproject.toml poetry.lock ./\nRUN . /venv/bin/activate && poetry install --no-dev --no-root\nCOPY . .\nRUN . /venv/bin/activate && poetry build\n\n\n# create lightweight 'final' stage with which to run discogs alert\nFROM python-base as final\n\n# install from whl\nCOPY --from=builder /venv /venv\nCOPY --from=builder /discogs_alert/dist .\nRUN . /venv/bin/activate && pip install --no-cache-dir *.whl\n\n# install chromium (TODO: can we move this outside the final stage?)\nRUN apt-get update && apt-get install --no-install-recommends -y chromium && rm -rf /var/lib/apt/lists/*;\n\n# run entrypoint\nCOPY ./docker/docker-entrypoint.sh ./\nCMD [\"./docker-entrypoint.sh\"]\n"
}