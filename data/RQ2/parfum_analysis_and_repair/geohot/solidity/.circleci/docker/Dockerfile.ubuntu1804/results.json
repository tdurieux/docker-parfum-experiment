{
  "startTime": 1674216817130,
  "endTime": 1674216817874,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 1,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 1,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#------------------------------------------------------------------------------\n# Dockerfile for building and testing Solidity Compiler on CI\n# Target: Ubuntu 18.04 (Bionic Beaver)\n# URL: https://hub.docker.com/r/ethereum/solidity-buildpack-deps\n#\n# This file is part of solidity.\n#\n# solidity is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# solidity is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with solidity.  If not, see <http://www.gnu.org/licenses/>\n#\n# (c) 2016-2019 solidity contributors.\n#------------------------------------------------------------------------------\nFROM buildpack-deps:bionic AS base\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN set -ex; \\\n\tdist=$(grep DISTRIB_CODENAME /etc/lsb-release | cut -d= -f2); \\\n\techo \"deb http://ppa.launchpad.net/ethereum/cpp-build-deps/ubuntu $dist main\" >> /etc/apt/sources.list ; \\\n\tapt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1c52189c923f6ca9 ; \\\n\tapt-get update; \\\n\tapt-get install -qqy --no-install-recommends \\\n\t\tbuild-essential \\\n\t\tsoftware-properties-common \\\n\t\tcmake ninja-build clang++-8 \\\n\t\tlibboost-filesystem-dev libboost-test-dev libboost-system-dev \\\n\t\tlibboost-program-options-dev \\\n\t\tlibjsoncpp-dev \\\n\t\tllvm-8-dev libz3-static-dev \\\n\t\t; \\\n\tapt-get install --no-install-recommends -qy python-pip python-sphinx; \\\n\tupdate-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-8 1; \\\n\tpip install --no-cache-dir codecov; \\\n\trm -rf /var/lib/apt/lists/*\n\nFROM base AS libraries\n\n# OSSFUZZ: libprotobuf-mutator\nRUN set -ex; \\\n\tgit clone https://github.com/google/libprotobuf-mutator.git \\\n\t    /usr/src/libprotobuf-mutator; \\\n\tcd /usr/src/libprotobuf-mutator; \\\n\tgit checkout d1fe8a7d8ae18f3d454f055eba5213c291986f21; \\\n\tmkdir build; \\\n\tcd build; \\\n\tcmake .. -GNinja -DLIB_PROTO_MUTATOR_DOWNLOAD_PROTOBUF=ON \\\n        -DLIB_PROTO_MUTATOR_TESTING=OFF -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=\"/usr\"; \\\n\tninja; \\\n\tcp -vpr external.protobuf/bin/* /usr/bin/; \\\n\tcp -vpr external.protobuf/include/* /usr/include/; \\\n\tcp -vpr external.protobuf/lib/* /usr/lib/; \\\n\tninja install/strip; \\\n\trm -rf /usr/src/libprotobuf-mutator\n\n# OSSFUZZ: libfuzzer\nRUN set -ex; \\\n\tcd /var/tmp; \\\n\tsvn co https://llvm.org/svn/llvm-project/compiler-rt/trunk/lib/fuzzer libfuzzer; \\\n\tmkdir -p build-libfuzzer; \\\n\tcd build-libfuzzer; \\\n\tclang++-8 -O1 -stdlib=libstdc++ -std=c++11 -O2 -fPIC -c ../libfuzzer/*.cpp -I../libfuzzer; \\\n\tar r /usr/lib/libFuzzingEngine.a *.o; \\\n\trm -rf /var/lib/libfuzzer\n\n# EVMONE\nARG EVMONE_HASH=\"fa4f40daf7cf9ccbcca6c78345977e084ea2136a8eae661e4d19471be852b15b\"\nARG EVMONE_MAJOR=\"0\"\nARG EVMONE_MINOR=\"3\"\nARG EVMONE_MICRO=\"0\"\nRUN set -ex; \\\n\tEVMONE_VERSION=\"$EVMONE_MAJOR.$EVMONE_MINOR.$EVMONE_MICRO\"; \\\n\tTGZFILE=\"evmone-$EVMONE_VERSION-linux-x86_64.tar.gz\"; \\\n\twget https://github.com/ethereum/evmone/releases/download/v$EVMONE_VERSION/$TGZFILE; \\\n\tsha256sum $TGZFILE; \\\n\ttar xzpf $TGZFILE -C /usr; \\\n\trm -f $TGZFILE;\n\nFROM base\nCOPY --from=libraries /usr/lib /usr/lib\nCOPY --from=libraries /usr/bin /usr/bin\nCOPY --from=libraries /usr/include /usr/include\n"
}