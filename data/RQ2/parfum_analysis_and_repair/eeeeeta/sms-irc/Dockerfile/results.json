{
  "startTime": 1674248763243,
  "endTime": 1674248764699,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM archlinux/base:latest AS sms-irc-compiled\n\n# update OS\nRUN pacman -Syu --noconfirm\nRUN pacman -S --needed --noconfirm base-devel postgresql-libs\n\n# install Rust: download rustup\nRUN curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y\n\n# The following bits build just the dependencies of the project, without the source-code itself.\n# This is so that we can take advantage of docker's caching and not rebuild everything all the damn time :P\n\nWORKDIR /sms-irc\n# add all the cargo files, to get deps\nADD ./Cargo.lock /sms-irc/\nADD ./Cargo.toml /sms-irc/\n# make dummy src/lib.rs files, to satisfy cargo\nRUN /bin/bash -c 'mkdir src; touch src/lib.rs';\n# disable incremental compilation (never going to be used, and bloats binaries)\nENV CARGO_INCREMENTAL=0\n# build all the dependencies\nRUN ~/.cargo/bin/cargo build --release\n# remove the dummy src/ lib.rs files\nRUN /bin/bash -c 'rm -rf src'\n\n# Now we a build the actual code...\n\n# add the actual code\nADD ./src /sms-irc/src\n# add migrations and other stuff\nADD ./migrations /sms-irc/migrations\n# build it!\nRUN ~/.cargo/bin/cargo build --release\n\nFROM debian:stable-slim AS sms-irc\nWORKDIR /sms-irc\nRUN apt-get update && apt-get install --no-install-recommends -y libssl1.1 ca-certificates libpq5 && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean && rm -rf /var/lib/apt/lists/*\nCOPY --from=sms-irc-compiled /sms-irc/target/release/sms-irc /sms-irc\nADD ./docker /sms-irc/docker\nENTRYPOINT \"/sms-irc/sms-irc\"\n"
}