{
  "startTime": 1674251611156,
  "endTime": 1674251612687,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 62,
        "columnStart": 5,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 5,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 5,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:latest@sha256:aba80b77e27148d99c034a987e7da3a287ed455390352663418c0f2ed40417fe\n\n\n# Contributors\nLABEL author=\"Vincent Voyer <vincent@zeroload.net>\"\nLABEL maintainers=\"Serban Ghita <serbanghita@gmail.com>, David Catalan <catalan.david@gmail.com>\"\n\n\n# Env variables\nENV LC_ALL=C\nENV DISPLAY=:99\nENV SELENIUM_CONSOLE_URL=http://localhost:4444/wd/hub\nENV SCREEN_GEOMETRY=1920x1080x16\n\n\n# Expose Selenium web console port\nEXPOSE 4444\n\n\n# Update packages\nRUN apt-get -qqy update\n\n\n# Install commons\nRUN apt-get -qqy --no-install-recommends install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    software-properties-common \\\n    sudo \\\n    openjdk-11-jre-headless \\\n    wget \\\n    xvfb \\\n    xfonts-100dpi \\\n    xfonts-75dpi \\\n    xfonts-scalable \\\n    xfonts-cyrillic && rm -rf /var/lib/apt/lists/*;\n\n\n# Install Browser from vendor source\n# Strategies copied from official Selenium Docker images (https://github.com/SeleniumHQ/docker-selenium)\n\n## Install latest Firefox\nARG FIREFOX_VERSION=latest\nRUN FIREFOX_DOWNLOAD_URL=$(if [ $FIREFOX_VERSION = \"latest\" ] || [ $FIREFOX_VERSION = \"nightly-latest\" ] || [ $FIREFOX_VERSION = \"devedition-latest\" ]; then echo \"https://download.mozilla.org/?product=firefox-$FIREFOX_VERSION-ssl&os=linux64&lang=en-US\"; else echo \"https://download-installer.cdn.mozilla.net/pub/firefox/releases/$FIREFOX_VERSION/linux-x86_64/en-US/firefox-$FIREFOX_VERSION.tar.bz2\"; fi) \\\n  && apt-get -qqy --no-install-recommends install firefox \\\n  && rm -rf /var/lib/apt/lists/* /var/cache/apt/* \\\n  && wget --no-verbose -O /tmp/firefox.tar.bz2 $FIREFOX_DOWNLOAD_URL \\\n  && apt-get -y purge firefox \\\n  && rm -rf /opt/firefox \\\n  && tar -C /opt -xjf /tmp/firefox.tar.bz2 \\\n  && rm /tmp/firefox.tar.bz2 \\\n  && mv /opt/firefox /opt/firefox-$FIREFOX_VERSION \\\n  && ln -fs /opt/firefox-$FIREFOX_VERSION/firefox /usr/bin/firefox\n\n## Install latest Google Chrome\nARG CHROME_VERSION=\"google-chrome-stable\"\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n  && echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list \\\n  && apt-get update -qqy \\\n  && apt-get -qqy --no-install-recommends install \\\n    ${CHROME_VERSION:-google-chrome-stable} \\\n  && rm /etc/apt/sources.list.d/google-chrome.list \\\n  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*\n\n## Chrome Launch Script Wrapper (forces no-sandbox so no need to use --privileged parameter)\nCOPY ./scripts/wrap_chrome_binary /opt/bin/wrap_chrome_binary\nRUN /opt/bin/wrap_chrome_binary\n\n\n# Install Node.js LTS\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash -\nRUN apt-get -qqy --no-install-recommends install -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Add non-root user\nRUN useradd seluser \\\n         --shell /bin/bash  \\\n         --create-home \\\n  && usermod -a -G sudo seluser \\\n  && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers \\\n  && echo 'seluser:secret' | chpasswd\n\n\n# Install selenium-standalone\nARG DEBUG\nRUN npm install -g selenium-standalone && npm cache clean --force;\nRUN selenium-standalone install\n\n\nADD ./scripts/ /home/seluser/scripts\n\n\n# Add Tini for graceful shutdown\nENV TINI_VERSION v0.18.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n\n\n# Force using non root user to execute the image\nUSER seluser\n\n\n# Display Selenium environment\nRUN . /home/seluser/scripts/utils.sh && print_selenium_env\n\n\n# Selenium server healthcheck\nHEALTHCHECK --start-period=5s --interval=3s --retries=8 \\\n    CMD curl -qsf \"$SELENIUM_CONSOLE_URL/status\" | jq -r '.value.ready' | grep \"true\" || exit 1\n\n\n# Run our start script under Tini\nCMD [\"/home/seluser/scripts/start.sh\"]\n"
}