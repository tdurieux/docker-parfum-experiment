{
  "startTime": 1674245991040,
  "endTime": 1674245992454,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 12,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 15,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 101
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 21,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 21,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 101
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 21,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 22,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 21,
        "columnEnd": 90
      }
    }
  ],
  "repairedDockerfile": "#===----------------------------------------------------------------------===##\n#\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n#\n#===----------------------------------------------------------------------===##\n\n#\n# This Dockerfile describes the base image used to run the various libc++\n# build bots. By default, the image runs the Buildkite Agent, however one\n# can also just start the image with a shell to debug CI failures.\n#\n# To start a Buildkite Agent, run it as:\n#   $ docker run --env-file secrets.env -it $(docker build -q .)\n#\n# The environment variables in `secrets.env` must be replaced by the actual\n# tokens for this to work. These should obviously never be checked in.\n#\n# To start a shell in the Docker image, use:\n#   $ docker run -it --volume \"$(git rev-parse --show-toplevel):/llvm\" --workdir \"/llvm\" $(docker build -q .) bash\n#\n# This will fire up the Docker container and mount the root of the monorepo\n# as /llvm in the container. Be careful, the state in /llvm is shared between\n# the container and the host machine.\n#\n# Finally, a pre-built version of this image is available on DockerHub as\n# ldionne/libcxx-builder. To use the pre-built version of the image, use\n#\n#   $ docker pull ldionne/libcxx-builder\n#   $ docker run -it <options> ldionne/libcxx-builder\n#\n# To update the image, rebuild it and push it to ldionne/libcxx-builder (which\n# will obviously only work if you have permission to do so).\n#\n#   $ docker build -t ldionne/libcxx-builder .\n#   $ docker push ldionne/libcxx-builder\n#\n\nFROM ubuntu:bionic\n\n# Make sure apt-get doesn't try to prompt for stuff like our time zone, etc.\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -y bash curl && rm -rf /var/lib/apt/lists/*;\n\n# Install various tools used by the build or the test suite\nRUN apt-get update && apt-get install --no-install-recommends -y ninja-build python3 python3-sphinx python3-distutils git gdb && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y libc6-dev-i386 && rm -rf /var/lib/apt/lists/*;\n\n# Install the most recently released LLVM\nRUN apt-get update && apt-get install --no-install-recommends -y lsb-release wget software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh\nRUN bash /tmp/llvm.sh\nRUN LLVM_VERSION=$(find /usr/bin -regex '^.+/clang-[0-9.]+$') && LLVM_VERSION=${LLVM_VERSION#*clang-} && echo \"LLVM_VERSION=$LLVM_VERSION\" > /tmp/env.sh\nRUN ln -s $(find /usr/bin -regex '^.+/clang\\+\\+-[0-9.]+$') /usr/bin/clang++ && [ -e $(readlink /usr/bin/clang++) ]\nRUN ln -s $(find /usr/bin -regex '^.+/clang-[0-9.]+$') /usr/bin/clang && [ -e $(readlink /usr/bin/clang) ]\n\n# Install the not-yet-released LLVM\nRUN . /tmp/env.sh && echo \"LLVM_TOT_VERSION=$(($LLVM_VERSION + 1))\" >> /tmp/env.sh\nRUN . /tmp/env.sh && bash /tmp/llvm.sh ${LLVM_TOT_VERSION}\nRUN . /tmp/env.sh && ln -s /usr/bin/clang++-${LLVM_TOT_VERSION} /usr/bin/clang++-tot && [ -e $(readlink /usr/bin/clang++-tot) ]\nRUN . /tmp/env.sh && ln -s /usr/bin/clang-${LLVM_TOT_VERSION} /usr/bin/clang-tot && [ -e $(readlink /usr/bin/clang-tot) ]\n\n# Install clang-format\nRUN . /tmp/env.sh && apt-get install --no-install-recommends -y clang-format-$LLVM_VERSION && rm -rf /var/lib/apt/lists/*;\nRUN ln -s $(find /usr/bin -regex '^.+/clang-format-[0-9.]+$') /usr/bin/clang-format && [ -e $(readlink /usr/bin/clang-format) ]\nRUN ln -s $(find /usr/bin -regex '^.+/git-clang-format-[0-9.]+$') /usr/bin/git-clang-format && [ -e $(readlink /usr/bin/git-clang-format) ]\n\n# Install a recent GCC\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test\nRUN apt-get update && apt install --no-install-recommends -y gcc-10 g++-10 && rm -rf /var/lib/apt/lists/*;\nRUN ln -f -s /usr/bin/g++-10 /usr/bin/g++ && [ -e $(readlink /usr/bin/g++) ]\nRUN ln -f -s /usr/bin/gcc-10 /usr/bin/gcc && [ -e $(readlink /usr/bin/gcc) ]\n\n# Install a recent CMake\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2-Linux-x86_64.sh -O /tmp/install-cmake.sh\nRUN bash /tmp/install-cmake.sh --prefix=/usr --exclude-subdir --skip-license\nRUN rm /tmp/install-cmake.sh\n\n# Change the user to a non-root user, since some of the libc++ tests\n# (e.g. filesystem) require running as non-root. Also setup passwordless sudo.\nRUN apt-get update && apt-get install --no-install-recommends -y sudo && rm -rf /var/lib/apt/lists/*;\nRUN echo \"ALL ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers\nRUN useradd --create-home libcxx-builder\nUSER libcxx-builder\nWORKDIR /home/libcxx-builder\n\n# Install the Buildkite agent and dependencies. This must be done as non-root\n# for the Buildkite agent to be installed in a path where we can find it.\nRUN bash -c \"$( curl -f -sL https://raw.githubusercontent.com/buildkite/agent/master/install.sh)\" -f\nENV PATH=\"${PATH}:/home/libcxx-builder/.buildkite-agent/bin\"\n\n# By default, start the Buildkite agent (this requires a token).\nCMD buildkite-agent start --tags \"queue=libcxx-builders\"\n"
}