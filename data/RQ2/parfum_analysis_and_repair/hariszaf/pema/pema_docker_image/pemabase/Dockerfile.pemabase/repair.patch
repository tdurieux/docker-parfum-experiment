diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/hariszaf/pema/pema_docker_image/pemabase/Dockerfile.pemabase b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/hariszaf/pema/pema_docker_image/pemabase/Dockerfile.pemabase/repaired.Dockerfile
index 1a5a3f6..18fd36e 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/hariszaf/pema/pema_docker_image/pemabase/Dockerfile.pemabase
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/hariszaf/pema/pema_docker_image/pemabase/Dockerfile.pemabase/repaired.Dockerfile
@@ -1,15 +1,15 @@
-# PEMA: a flexible Pipeline for Environmental DNA Metabarcoding Analysis 
+# PEMA: a flexible Pipeline for Environmental DNA Metabarcoding Analysis
 # of the 16S/18S ribosomal RNA, ITS, and COI marker genes. GigaScience. 2020 Mar;9(3):giaa022.
-# 
-# Aim:   Build the base of the PEMA environment 
-#        This base image will be used for the FROM statement  
+#
+# Aim:   Build the base of the PEMA environment
+#        This base image will be used for the FROM statement 
 #        when building the actual PEMA docker image
-# 
+#
 # Usage: docker build -t hariszaf/pemabase:<tag> .
 
-FROM ubuntu:16.04 
+FROM ubuntu:16.04
 
-LABEL maintainer = "Haris Zafeiropoulos" 
+LABEL maintainer = "Haris Zafeiropoulos"
 LABEL contact    = "haris-zaf@hcmr.gr"
 LABEL build_date = "2021-12-02"
 LABEL version    = "v.2.1.1"
@@ -24,16 +24,16 @@ RUN rm -rf /var/lib/apt/lists/* && \
     rm -rf /var/lib/apt/lists/*
 
 RUN apt-get update && \
-    apt-get install -y software-properties-common && \
-    apt-get update
+    apt-get install --no-install-recommends -y software-properties-common && \
+    apt-get update && rm -rf /var/lib/apt/lists/*;
 
 RUN  add-apt-repository ppa:openjdk-r/ppa && \
     apt-get update -q
 
-RUN apt-get install -y openjdk-8-jdk
-RUN apt-get install -y openjdk-11-jdk
+RUN apt-get install --no-install-recommends -y openjdk-8-jdk && rm -rf /var/lib/apt/lists/*;
+RUN apt-get install --no-install-recommends -y openjdk-11-jdk && rm -rf /var/lib/apt/lists/*;
 
-ENV JAVA_HOME /usr/lib/jvm/java-11-oracle 
+ENV JAVA_HOME /usr/lib/jvm/java-11-oracle
 ENV PATH="/opt/java/openjdk/bin:$PATH"
 
 ENV JAVA_TOOL_OPTIONS="-XX:+UseContainerSupport"
@@ -46,23 +46,23 @@ RUN ulimit -c unlimited
 
 #-------   This is where JAVA installation is completed!!   ---------
 
-## Some extras 
-RUN apt-get update && apt-get install -y ant && \
-    apt-get clean
-RUN apt-get update && apt-get install ca-certificates-java && \
+## Some extras
+RUN apt-get update && apt-get install --no-install-recommends -y ant && \
+    apt-get clean && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates-java && \
     apt-get clean && \
-    update-ca-certificates -f
+    update-ca-certificates -f && rm -rf /var/lib/apt/lists/*;
 
 # Install all necessary labs and programs to set up our Docker Image
 WORKDIR /home
 RUN apt-get update --fix-missing && \
-    apt-get install -y wget bzip2 libbz2-dev liblzma-dev libcurl4-openssl-dev \
+    apt-get install --no-install-recommends -y wget bzip2 libbz2-dev liblzma-dev libcurl4-openssl-dev \
                             libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial \
-                            subversion unzip autoconf autogen libtool zlib1g-dev
+                            subversion unzip autoconf autogen libtool zlib1g-dev && rm -rf /var/lib/apt/lists/*;
 # Download GNU
 ENV DEBIAN_FRONTEND noninteractive
 RUN apt-get update && \
-    apt-get -y install gcc mono-mcs && \
+    apt-get -y --no-install-recommends install gcc mono-mcs && \
     rm -rf /var/lib/apt/lists/*
 
 # Let "git" do as it wants for 15 times
@@ -91,7 +91,7 @@ WORKDIR /home/tools
 RUN mkdir VSEARCH
 WORKDIR /home/tools/VSEARCH
 RUN wget https://github.com/torognes/vsearch/releases/download/v2.9.1/vsearch-2.9.1-linux-x86_64.tar.gz \
-        && tar -zxvf vsearch-2.9.1-linux-x86_64.tar.gz && rm vsearch-2.9.1-linux-x86_64.tar.gz 
+        && tar -zxvf vsearch-2.9.1-linux-x86_64.tar.gz && rm vsearch-2.9.1-linux-x86_64.tar.gz
 
 # ------------------------------   Trimmomatic  --------------------------------
 
@@ -99,16 +99,16 @@ RUN wget https://github.com/torognes/vsearch/releases/download/v2.9.1/vsearch-2.
 WORKDIR /home/tools
 RUN mkdir Trimmomatic
 WORKDIR /home/tools/Trimmomatic
-RUN wget http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/Trimmomatic-0.38.zip && unzip Trimmomatic-0.38.zip \
+RUN wget https://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/Trimmomatic-0.38.zip && unzip Trimmomatic-0.38.zip \
         && rm Trimmomatic-0.38.zip
 
 
 # ------------------------------   OBITools  [START]  --------------------------------
 
 WORKDIR /home/tools
-RUN apt-get update && apt-get install -y apt-transport-https && \
-    apt-get install -y cython3 && \
-    apt-get install -y python-pip
+RUN apt-get update && apt-get install --no-install-recommends -y apt-transport-https && \
+    apt-get install --no-install-recommends -y cython3 && \
+    apt-get install --no-install-recommends -y python-pip && rm -rf /var/lib/apt/lists/*;
 
 # Install Miniconda - ATTENTION! Using -p we denote the path where will be installed
 # By default it would be installed under `/root`.
@@ -116,30 +116,30 @@ RUN apt-get update && apt-get install -y apt-transport-https && \
 WORKDIR /home
 RUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \ 
     bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3
-ENV PATH=/opt/miniconda3/bin:${PATH} 
+ENV PATH=/opt/miniconda3/bin:${PATH}
 
 # Get venv
-RUN apt-get install -y python3-dev
-RUN pip install virtualenv && \
-    apt install -y python3-venv
+RUN apt-get install --no-install-recommends -y python3-dev && rm -rf /var/lib/apt/lists/*;
+RUN pip install --no-cache-dir virtualenv && \
+    apt install --no-install-recommends -y python3-venv && rm -rf /var/lib/apt/lists/*;
 
 # Get cmake
 RUN apt update &&\
     apt purge --auto-remove cmake
-RUN wget https://github.com/Kitware/CMake/releases/download/v3.21.4/cmake-3.21.4.tar.gz &&\
-    tar -xzvf cmake-3.21.4.tar.gz
+RUN wget https://github.com/Kitware/CMake/releases/download/v3.21.4/cmake-3.21.4.tar.gz && \
+    tar -xzvf cmake-3.21.4.tar.gz && rm cmake-3.21.4.tar.gz
 
 # Get an OpenSSl
-RUN apt-get install -y libssl-dev 
+RUN apt-get install --no-install-recommends -y libssl-dev && rm -rf /var/lib/apt/lists/*;
 
 # Install cmake
 WORKDIR /home/cmake-3.21.4
 RUN /bin/bash bootstrap
-RUN make -j$(nproc) 
+RUN make -j$(nproc)
 RUN make install
 
 
-# [Future work] Install OBITools3 
+# [Future work] Install OBITools3
 # Based on https://git.metabarcoding.org/obitools/obitools3/wikis/Installing-the-OBITools3
 # WORKDIR /home
 # RUN	python3 -m venv obi3-env
@@ -148,7 +148,7 @@ RUN make install
 # A frozen OBITools version has been stored in PEMA's zenodo repo
 WORKDIR /home/tools
 RUN wget https://zenodo.org/record/5745272/files/obi_v1.2.13.tar
-RUN tar -xvf obi_v1.2.13.tar
+RUN tar -xvf obi_v1.2.13.tar && rm obi_v1.2.13.tar
 RUN rm obi_v1.2.13.tar
 
 
@@ -159,10 +159,10 @@ RUN rm obi_v1.2.13.tar
 
 # Download and install SPAdes
 WORKDIR /home/tools/SPAdes
-RUN wget http://cab.spbu.ru/files/release3.14.0/SPAdes-3.14.0.tar.gz  && \
+RUN wget https://cab.spbu.ru/files/release3.14.0/SPAdes-3.14.0.tar.gz && \
     tar -xzf SPAdes-3.14.0.tar.gz && \
     cd SPAdes-3.14.0 && \
-    ./spades_compile.sh
+    ./spades_compile.sh && rm SPAdes-3.14.0.tar.gz
 
 # ------------------------------   PANDAseq  --------------------------------
 
@@ -172,10 +172,10 @@ RUN mkdir PANDAseq
 WORKDIR /home/tools/PANDAseq
 RUN git clone http://github.com/neufeld/pandaseq.git && \
     cd pandaseq && ./autogen.sh && \
-    ./configure --prefix="/home/tools/PANDAseq" && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix="/home/tools/PANDAseq" && \
     make && \
     make install
-RUN chmod -R +777 /home/tools/PANDAseq/pandaseq/.libs/ 
+RUN chmod -R +777 /home/tools/PANDAseq/pandaseq/.libs/
 
 
 
@@ -200,15 +200,15 @@ RUN wget https://sco.h-its.org/exelixis/resource/download/software/papara_nt-2.5
 WORKDIR /home/tools
 WORKDIR /home/tools/EPA-ng
 RUN git clone --recursive https://github.com/Pbdas/epa.git && \
-    apt-get install --"yes" autotools-dev flex bison automake && \
+    apt-get install -y --no-install-recommends --"yes" autotools-dev flex bison automake && \
     cd epa && \
-    make
+    make && rm -rf /var/lib/apt/lists/*;
 
 # ------------------------------   RAxML-ng   --------------------------------
 
 ## Download and install RAxML-ng
 WORKDIR /
-RUN apt-get install -y libgmp3-dev
+RUN apt-get install --no-install-recommends -y libgmp3-dev && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /home/tools/raxml-ng
 RUN git clone --recursive https://github.com/amkozlov/raxml-ng
@@ -236,8 +236,8 @@ RUN dpkg -i mafft_7.427-1_amd64.deb
 # Install cutadapt (for the ITS marker gene case)
 # First I need to install pip3
 RUN apt update && \
-    apt install -y python3-pip && \
-    apt install python3-cutadapt
+    apt install --no-install-recommends -y python3-pip && \
+    apt install -y --no-install-recommends python3-cutadapt && rm -rf /var/lib/apt/lists/*;
 
 
 # -------------------------------   CREST   ---------------------------------
@@ -264,11 +264,11 @@ RUN wget https://zenodo.org/record/5734317/files/rdptools.tar.gz && \
 
 # -------------------  ENABLE EDITING AND RUNNING A CONTAINER ----------------
 # Download and install "nano" editor.
-RUN apt-get update 
-RUN apt-get install -y apt-transport-https
+RUN apt-get update
+RUN apt-get install --no-install-recommends -y apt-transport-https && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /home
-RUN apt-get install -y nano --fix-missing
+RUN apt-get install --no-install-recommends -y nano --fix-missing && rm -rf /var/lib/apt/lists/*;
 
 # In order to compile, BDS needs the "go" program. Here, we download and install "go".
 WORKDIR /usr/local
@@ -277,54 +277,54 @@ RUN tar -xzf go1.11.2.linux-amd64.tar.gz && rm go1.11.2.linux-amd64.tar.gz && ex
 
 # Download and install GAWK 4
 WORKDIR /home/tools
-RUN wget https://ftp.gnu.org/gnu/gawk/gawk-4.2.1.tar.gz && tar -xvpzf gawk-4.2.1.tar.gz
-RUN rm gawk-4.2.1.tar.gz && cd gawk-4.2.1/ && ./configure && make && make install  
+RUN wget https://ftp.gnu.org/gnu/gawk/gawk-4.2.1.tar.gz && tar -xvpzf gawk-4.2.1.tar.gz && rm gawk-4.2.1.tar.gz
+RUN rm gawk-4.2.1.tar.gz && cd gawk-4.2.1/ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && make && make install
 
 
 # -----------------------   SET R ENV     --------------------------------
 
 # Install of "locate" program that allows to find where is what on your container
-RUN apt-get install mlocate && updatedb
+RUN apt-get install -y --no-install-recommends mlocate && updatedb && rm -rf /var/lib/apt/lists/*;
 
 ## if i have R on my image already, i need to remove everything of it, so:
 RUN apt-get remove -y r-base-core
 
 ## if i do NOT have any R version, i can skip the previous command
-RUN apt-get install -y gfortran && \
-    apt-get install -y build-essential && \
-    apt-get install -y fort77 && \
-    apt-get install -y xorg-dev && \
-    apt-get install -y libblas-dev 
+RUN apt-get install --no-install-recommends -y gfortran && \
+    apt-get install --no-install-recommends -y build-essential && \
+    apt-get install --no-install-recommends -y fort77 && \
+    apt-get install --no-install-recommends -y xorg-dev && \
+    apt-get install --no-install-recommends -y libblas-dev && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get install -y gcc-multilib && \
-    apt-get install -y gobjc++ && \
-    apt-get install -y aptitude && \
-    aptitude install -y libreadline-dev
+RUN apt-get install --no-install-recommends -y gcc-multilib && \
+    apt-get install --no-install-recommends -y gobjc++ && \
+    apt-get install --no-install-recommends -y aptitude && \
+    aptitude install -y libreadline-dev && rm -rf /var/lib/apt/lists/*;
 
 RUN export CC=/usr/bin/gcc && \
     export CXX=/usr/bin/g++ && \
     export FC=/usr/bin/gfortran && \
     export PERL=/usr/bin/perl
 
-RUN apt-get install -y libpcre3-dev libpcre2-dev libpcre-ocaml-dev libghc-regex-pcre-dev
+RUN apt-get install --no-install-recommends -y libpcre3-dev libpcre2-dev libpcre-ocaml-dev libghc-regex-pcre-dev && rm -rf /var/lib/apt/lists/*;
 
 
 # At last, get R!
 WORKDIR /home
 # RUN apt-get install -y xorg-dev
 RUN wget https://ftp.cc.uoc.gr/mirrors/CRAN/src/base/R-3/R-3.6.0.tar.gz
-RUN tar -xf R-3.6.0.tar.gz
+RUN tar -xf R-3.6.0.tar.gz && rm R-3.6.0.tar.gz
 WORKDIR /home/R-3.6.0
-RUN ./configure 
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"
 RUN make
 RUN make install
 
 
-# Some packages mendatory for phyloseq 
+# Some packages mendatory for phyloseq
 #RUN Rscript -e 'install.packages("biom", repos="https://cran.rstudio.com")'
 RUN Rscript -e 'install.packages("vegan", repos="https://cran.rstudio.com")'
 
-# Install R packages for PEMA to run all its features 
+# Install R packages for PEMA to run all its features
 RUN Rscript -e 'install.packages("dplyr", repos="https://cran.rstudio.com")' && \
     Rscript -e 'install.packages("tidyr", repos="https://cran.rstudio.com")' && \
     Rscript -e 'install.packages("BiocManager", repos="https://cran.rstudio.com")' && \
@@ -338,7 +338,7 @@ RUN Rscript -e 'library(BiocManager); BiocManager::install("phyloseq")'
 
 
 # Install R package required for cutadapt R script
-RUN apt-get install -y libjpeg-dev
+RUN apt-get install --no-install-recommends -y libjpeg-dev && rm -rf /var/lib/apt/lists/*;
 RUN Rscript -e 'library(BiocManager); BiocManager::install("ShortRead")'
 
 
@@ -366,7 +366,7 @@ RUN echo "root:Docker!" | chpasswd
 # Download and install Big Data Script language (BDS) - in this Dockerfile, BDS 0.9999 is called, so JAVA 11 is NOT necessary
 WORKDIR /home/tools/BDS
 COPY /tools/bds_Linux.tgz ./
-RUN tar -xvzf bds_*.tgz 
+RUN tar -xvzf bds_*.tgz && rm bds_*.tgz
 RUN echo "export PATH=$PATH:/home/tools/BDS/.bds" >> /root/.bashrc
 RUN rm bds_Linux.tgz
 
@@ -377,16 +377,16 @@ RUN echo "export R_LIBS=/home/R_libs/" >> .Renviron
 COPY /R_libs/ .
 
 # Fixing java
-RUN  apt-get install -y libhsdis0-fcml
+RUN apt-get install --no-install-recommends -y libhsdis0-fcml && rm -rf /var/lib/apt/lists/*;
 
 
 # Install ncbi-taxonomist Python software
-RUN pip install ncbi-taxonomist && \
+RUN pip install --no-cache-dir ncbi-taxonomist && \
     echo "export PATH=${PATH}:$HOME/.local/bin" >> ~/.bashrc
 
 # Install super conveninet jq library to handle json output of ncbi-taxonomist
 # For more about this library, you may see here: https://stedolan.github.io/jq/
-RUN apt-get install -y jq
+RUN apt-get install --no-install-recommends -y jq && rm -rf /var/lib/apt/lists/*;
 
 # Make a source of the .bashrc file
 WORKDIR /root