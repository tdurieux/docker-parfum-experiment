{
  "startTime": 1674253003922,
  "endTime": 1674253005210,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 328
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 21,
        "columnEnd": 252
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Goals of this file:\n# - Prevent untracked (gitignore'd) files from affecting the build\n# - Cache as much as possible to allow quick iteration\n#\n# Hence the aria2 build should be cached since it rarely changes and takes about 5 times as long to\n# build as the updater. To permit caching, the aria2 directory needs to be copied separately before\n# the rest of updater2.\n#\n# git clean -dXff is used to delete all the files specified by .gitignore. This requires the data\n# from .git since a checked-in file will not be ignored. For aria2 it is assumed that the data\n# is stored in the updater2/.git/modules directory.\n\nFROM debian:buster-slim\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    autoconf \\\n    autopoint \\\n    curl \\\n    gettext \\\n    g++ \\\n    g++-mingw-w64-i686 \\\n    git \\\n    libtool \\\n    make \\\n    p7zip-full \\\n    pkg-config \\\n    python \\\n    xz-utils && rm -rf /var/lib/apt/lists/*;\n\n# Something in Qt does not build with win32 thread flavor\nRUN update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix && \\\n    update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix\n\n# The Schannel dependencies are spelled with capital letters which causes them not to be found\nRUN ln -s libsecur32.a /usr/i686-w64-mingw32/lib/libSecur32.a && \\\n    ln -s libcrypt32.a /usr/i686-w64-mingw32/lib/libCrypt32.a\n\n############\n# Build Qt #\n############\nWORKDIR /build-qt\nENV UPDATER_MODULES=qtbase,qtquickcontrols,qtquickcontrols2,qtsvg,qtgraphicaleffects\nRUN curl -f -LO https://download.qt.io/archive/qt/5.14/5.14.2/single/qt-everywhere-src-5.14.2.tar.xz && \\\n    curl -f -L https://download.qt.io/archive/qt/5.14/5.14.2/single/md5sums.txt | md5sum --check --ignore-missing && \\\n    tar -xJf qt-everywhere-src-5.14.2.tar.xz && \\\n    cd qt-everywhere-src-5.14.2 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -release -static -prefix /qt -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -qt-harfbuzz -opengl desktop -opensource -confirm-license -no-qml-debug -no-icu -xplatform win32-g++ -device-option CROSS_COMPILE=i686-w64-mingw32- -optimize-size --c++std=14 -nomake tests -nomake tools -nomake examples -schannel && \\\n    bash -c \"make -j`nproc` module-{$UPDATER_MODULES} && make module-{$UPDATER_MODULES}-install_subtargets\" && \\\n    rm -rf /build-qt && rm qt-everywhere-src-5.14.2.tar.xz\n\n###############\n# Build aria2 #\n###############\nCOPY aria2 /updater2/aria2\nCOPY .git/modules/aria2 /updater2/.git/modules/aria2\nWORKDIR /updater2/aria2\nRUN git clean -dXff\nRUN autoreconf -i && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-libxml2 --without-libexpat --without-sqlite3 --enable-libaria2 --without-libz --without-libcares --enable-static=yes ARIA2_STATIC=yes --without-libssh2 --disable-websocket --disable-nls --host i686-w64-mingw32 && make -j`nproc`\n\n#################\n# Build updater #\n#################\nCOPY . /updater2\nRUN set -e; for D in . quazip fluid; do cd /updater2/$D && git clean -dXff; done\nWORKDIR /build\nRUN /qt/bin/qmake -config release QMAKE_LFLAGS+=\"-static\" INCLUDEPATH+=/qt/include/QtZlib /updater2 && make -j`nproc`\nWORKDIR /release-win\nARG release\nRUN if [ -n \"$release\" ]; then cp /build/release/updater2.exe UnvanquishedUpdater.exe && 7z -tzip -mx=9 a UnvUpdaterWin.zip UnvanquishedUpdater.exe; fi\n"
}