{
  "startTime": 1674254341937,
  "endTime": 1674254342947,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nMAINTAINER Alexey Vishnyakov\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install build-essential gcc-multilib g++-multilib git \\\n                       wget curl unzip clang-11 vim lsb-release gdb zlib1g-dev \\\n                       lcov pkg-config libglib2.0-dev gcc-10 g++-10 \\\n                       gcc-10-plugin-dev gcc-10-multilib python3 python3-pip \\\n                       libtool gnuplot && rm -rf /var/lib/apt/lists/*;\n\nRUN python3 -m pip install scipy numpy\n\nRUN curl -f -L -O https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-linux-x86_64.sh && \\\n    mkdir /cmake && \\\n    bash cmake-3.22.1-linux-x86_64.sh --prefix=/cmake --exclude-subdir --skip-license && \\\n    ln -s /cmake/bin/cmake /bin/cmake && \\\n    rm cmake-3.22.1-linux-x86_64.sh\n\n# Install Rust.\nRUN curl -f https://sh.rustup.rs -o rustup.sh && chmod +x rustup.sh && \\\n    ./rustup.sh -y && rm rustup.sh\n\nENV PATH=\"/root/.cargo/bin:${PATH}\"\n\nRUN wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip \\\n    && unzip ninja-linux.zip && mv ninja /usr/bin && rm ninja-linux.zip\n\nRUN git clone https://github.com/llvm/llvm-project.git && cd llvm-project && \\\n    git checkout de5b16d8ca2d14ff0d9b6be9cf40566bc7eb5a01 && \\\n    mkdir build && cd build && \\\n    cmake ../llvm -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_C_COMPILER=clang-11 \\\n                  -DCMAKE_C_COMPILER=clang-11 -DCMAKE_CXX_COMPILER=clang++-11 \\\n                  -DCMAKE_BUILD_TYPE=Release \\\n                  -DLLVM_ENABLE_ZLIB=ON \\\n                  -DLLVM_ENABLE_RUNTIMES=\"libcxx;libcxxabi;libunwind\" \\\n                  -DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra;compiler-rt\" \\\n                  -GNinja && \\\n    CMAKE_BUILD_PARALLEL_LEVEL=$(nproc) cmake --build . && cmake --build . && \\\n    cmake --install . && cd ../.. && rm -rf llvm-project\n\nRUN echo /usr/lib/x86_64-unknown-linux-gnu > /etc/ld.so.conf.d/libc++.conf && \\\n    ldconfig\n\nRUN git clone --depth=1 https://github.com/vanhauser-thc/afl-cov /afl-cov && cd /afl-cov && \\\n    git checkout bb51de02c06dca2bfa2dfb494fa3b095950ec879 && \\\n    make install -j $(nproc) && cd .. && rm -rf afl-cov\n\nENV LLVM_CONFIG=llvm-config\nENV AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1\nENV IS_DOCKER=\"1\"\n\nRUN git clone https://github.com/AFLplusplus/AFLplusplus.git && cd AFLplusplus && \\\n    git checkout 40947508037b874020c8dd1251359fecaab04b9d && \\\n    export CC=gcc-10 && export CXX=g++-10 && make clean && \\\n    make distrib -j $(nproc) && make install -j $(nproc) && make clean && cd .. && rm -rf AFLplusplus\n\nENV PATH=$PATH:/fuzz/sydr\n\nWORKDIR /\n"
}