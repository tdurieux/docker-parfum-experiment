{
  "startTime": 1674255284314,
  "endTime": 1674255284814,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 18,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 18,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 90
      }
    }
  ],
  "repairedDockerfile": "#Basic Image\nFROM ubuntu:20.04\n\n#Args for compliance of inner and outer uid and gid\n\nARG cuid=1000\nARG cgid=1000\nARG cuidname=crusher\nARG cgidname=crusher\n\n#Just a notes\nLABEL maintainer=\"ponomarev@fobos-nt.ru\"\nLABEL version=\"1.0\"\nLABEL description=\"Boilerplate for collecting coverage in stat inst mode\"\n\n#Install system packages\nRUN apt update && apt install --no-install-recommends -y gcc clang llvm make sudo git aha lcov && rm -rf /var/lib/apt/lists/*;\n\n#Add group and user (like my HOST group and user)\nRUN groupadd -g $cgid $cgidname &&  useradd -m -u $cuid -g $cgidname -G sudo -s /usr/bin/bash $cuidname\n\n#Configuring and compiling the Target for fuzzing\nENV LLVM_PROFILE_FILE=/home/$cuidname/coverage/\"code-%p.profraw\"\n\n################### Add your target here\n#Set Timezone or get hang during the docker build...\nENV TZ=Europe/Moscow\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n#Install Target for coverage measurment\nRUN apt install --no-install-recommends -y libreadline-dev zlib1g-dev bison flex libfl-dev && rm -rf /var/lib/apt/lists/*;\nUSER $cuidname\nWORKDIR /home/$cuidname/\nRUN git clone --single-branch --branch REL_12_STABLE --depth 1 https://github.com/postgres/postgres\n\nWORKDIR /home/$cuidname/postgres\nRUN CC=/bin/clang CXX=/bin/clang++ \\\nCFLAGS=\"-O0 -g -fprofile-instr-generate -fcoverage-mapping\" \\\nCXXFLAGS=\"-O0 -g -fprofile-instr-generate -fcoverage-mapping\" \\\nLDFLAGS=\"-fprofile-instr-generate -fcoverage-mapping\" \\\n./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n--prefix /home/$cuidname/pgbuild\nRUN make -j20 && make install\n\nWORKDIR /home/$cuidname/\nRUN /home/$cuidname/pgbuild/bin/initdb -D /home/$cuidname/data\n###################\n\n#Getting inputs from HOST\nCOPY in in/\n\n#Start coverage collecting in a container (change ownership for output folder)\nUSER root\nENV cuidname=$cuidname\nENV cgidname=$cgidname\nENV DIR=/home/$cuidname\nCMD \\ \nfor F in $DIR/in_stat/*; \\\n    do sudo -u $cuidname $DIR/pgbuild/bin/postgres --single -jE -D $DIR/data postgres < $F; \\ \ndone && \\\nllvm-profdata merge -output=profdata $(echo $LLVM_PROFILE_FILE | sed s/\\%p/\\*/) && \\\nif [ -f \"$DIR/out_stat/coverage.txt\" ]; then mv $DIR/out_stat/coverage.txt $DIR/out_stat/coverage_prev.txt; fi && \\\nllvm-cov report $DIR/pgbuild/bin/postgres -instr-profile=profdata -use-color > $DIR/out_stat/coverage.txt && \\\naha -f $DIR/out_stat/coverage.txt > $DIR/out_stat/coverage.html && \\\nllvm-cov export $DIR/pgbuild/bin/postgres -instr-profile=profdata -format=lcov > $DIR/lcov && \\\ngenhtml -o $DIR/out_stat/coverage $DIR/lcov && \\\nchown -R $cuidname:$cgidname $DIR/out_stat\n"
}