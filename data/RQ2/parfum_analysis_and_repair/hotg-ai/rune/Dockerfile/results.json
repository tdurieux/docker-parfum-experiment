{
  "startTime": 1674254564790,
  "endTime": 1674254565581,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM tinyverseml/runecoral-cross-linux-x86_64 as build\n\nWORKDIR /app\n# Putting the toolchain file in / means we always use the right rustc version\nCOPY rust-toolchain.toml /rust-toolchain.toml\nCOPY . /app/\n\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh && \\\n    sh rustup-init.sh --default-toolchain none -y && \\\n    . ~/.cargo/env && \\\n    rustup component add rustfmt && \\\n    rustup show && \\\n    cargo fetch && \\\n    cargo install --debug bindgen && \\\n    # Install Rune\n    cargo install --root / --path /app/crates/rune-cli --locked --verbose && \\\n    rune version --verbose && \\\n    # Delete any bulky dependencies installed with Rune\n    rm -rf target $CARGO_HOME/git $CARGO_HOME/registry\n\n\nFROM debian:latest\n\nWORKDIR /app\nCOPY --from=build /bin/rune /usr/local/bin/rune\n# Putting the toolchain file in / means we always use the right rustc version\nCOPY rust-toolchain.toml /rust-toolchain.toml\nENV PATH=\"/root/.cargo/bin:${PATH}\"\n\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y curl build-essential git && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh && \\\n    sh rustup-init.sh --default-toolchain none -y && \\\n    rustup component add rustfmt && \\\n    rustup show\n\nCMD [ \"rune\" ]\n"
}