{
  "startTime": 1674253217830,
  "endTime": 1674253218268,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# STAGE 1 (base-image: node)\n# ==================================================\n# ----------\n\t# options (largest to smallest): 14 (~900mb), 14-slim (~150mb), 14-alpine (~100mb)\n\t#FROM node:14\n\t#FROM node:14-slim\n\t#FROM node:14-alpine\n\t#FROM node:16\n\tFROM node:16-alpine\n\n\t# image-internal args\n\tARG env_ENV\n# ----------\n\n# initial arg processing\nENV ENV=$env_ENV\nRUN echo \"Env:$ENV\"\n\nWORKDIR \"/dm_repo\"\n\n# bundle just the files here that yarn needs to do its job (else files change will force yarn to re-run)\nCOPY package.json .\nCOPY .yarn/ .yarn/\nCOPY .yarnrc.yml .\n#COPY yarn.lock .\nCOPY Others/yarn-lock-for-docker.lock yarn.lock\nCOPY Packages/client/package.json Packages/client/package.json\nCOPY Packages/js-common/package.json Packages/js-common/package.json\nCOPY Packages/app-server/package.json Packages/app-server/package.json\nCOPY Packages/web-server/package.json Packages/web-server/package.json\nCOPY Packages/deploy/package.json Packages/deploy/package.json\n\n#COPY .yalc/ .yalc/ # don't do it here; apply these as an update after the main install\n#COPY yalc.lock .\nCOPY patches/ patches/\n#COPY node_modules/web-vcore/patches/ node_modules/web-vcore/patches/\nCOPY Scripts/PostInstall.js Scripts/PostInstall.js\n\n# also copy cache contents from node_modules/web-vcore/.yarn/cache (if wvc is symlinked, the dm's cache will lack many of the libs)\n# this should work, except docker refuses to allow symlink-following (https://github.com/moby/moby/issues/1676)\n#COPY node_modules/web-vcore/.yarn/cache .yarn/cache\n#COPY C:/Root/Apps/@V/@Modules/web-vcore/Main/.yarn/cache .yarn/cache\n\n# now that yarn has the info it needs, have it install all the node-modules\n# (--inline-builds lets us see the output of the build-scripts [eg. the post-install for patch-package] to confirm that they're being applied properly)\n#\tRUN yarn install --inline-builds\n#RUN yarn install --inline-builds --production=true\n#\tRUN yarn install --cache-folder ./cross-build-yarn-cache\n#\tRUN --mount=type=cache,target=.yarn/cache yarn install\n#\tENV YARN_CACHE_FOLDER=../.yarn_cache\n#\tRUN --mount=type=cache,target=../.yarn_cache yarn install\n#\tRUN --mount=type=cache,mode=0777,target=../.yarn_cache yarn install\n#\tRUN --mount=type=cache,target=/tmp/yarn_cache yarn install --prefer-offline --frozen-lockfile\n#\tRUN --mount=type=cache,target=/tmp/yarn_cache yarn install --frozen-lockfile\n\n# add python for some npm packages that need it\n# --no-cache: download package index on-the-fly, no need to cleanup afterwards\n# --virtual: bundle packages, remove whole bundle at once, when done\nRUN apk --no-cache --virtual build-dependencies add python3 make g++ libexecinfo-dev \\\n# equivalent of yarn-v1's \"yarn install --production\" (as per: https://yarnpkg.com/cli/workspaces/focus#details) -- which avoids installing dev-deps, cutting down on image size\n\t&& yarn workspaces focus --all --production \\\n# remove python (and such) again, since not needed anymore\n\t&& apk del build-dependencies \\\n# exclude just-created caches (the caches can't be used anyway)\n#\t&& rm -r /dm_repo/.yarn/cache && rm -r /root/.yarn/berry/cache \\\n# delete folders that had to be marked as deps (eg. under web-vcore), but which are actually only needed at development time\n\t&& rm -r /dm_repo/node_modules/typescript \\\n# we can't exclude @babel quite yet, unfortunately, because some packages runtime-require it (eg. \"react-textarea-autosize\" requires \"@babel/runtime/helpers/extends\")\n#\t&& rm -r /dm_repo/node_modules/@babel\n# exclude every folder under \"@babel\" other than \"runtime\"\n#\t&& cd /dm_repo/node_modules/@babel && rm -r !(runtime)\n\t&& cd /dm_repo/node_modules/@babel && find . -mindepth 1 -maxdepth 1 -type d ! -name \"runtime\" -exec rm -r {} \\; && yarn cache clean;\n# for additional options (such as enableInlineBuilds), modify the .yarnrc.yml file\n\n# *now* copy the .yalc folder, and rerun the yarn install (to apply the yalc-overrides)\nCOPY .yalc/ .yalc/\nRUN yarn workspaces focus --all --production \\\n\t&& rm -r /dm_repo/.yarn/cache && rm -r /root/.yarn/berry/cache \\\n\t#&& rm -r /dm_repo/node_modules/typescript \\\n\t&& cd /dm_repo/node_modules/@babel && find . -mindepth 1 -maxdepth 1 -type d ! -name \"runtime\" -exec rm -r {} \\; && yarn cache clean;\n\n# strace: for debugging, eg. the \"std::bad_alloc\" error, as mentioned here: https://stackoverflow.com/a/59923848\n#RUN apk --no-cache add procps strace\n\n# this line-append increases the max # of mmap()'ed ranges, fixing the dreadful issue where trying to create a memory-snapshot using remote Chrome devtools would virtually always cause the pod to crash (or at least for the port-forward to dc)\n# EDIT: this fails atm, saying \"RUN sysctl -p â†’ sysctl: error setting key 'vm.max_map_count': Read-only file system\"; I'm thus setting it at container startup, in node-setup-daemon-set.yaml\n#RUN echo \"vm.max_map_count=65530999\" >> /etc/sysctl.conf\n#RUN sysctl -p\n\n# moved this to package-specific dockerfiles, as \"update base docker image\" has (a lot) more overhead than \"copy NMOverwrites/ folder\" in each package, and NMOverwrites/ can change frequently\n#COPY NMOverwrites/ /dm_repo/\n\n# fsr, \"yarn install\" is installing some of web-vcore's deps (eg. mobx-graphlink) under \"web-vcore/node_modules\", rather than hoisting (perhaps yarn is trying to avoid conflict with the \"link:XXX\" entry in yarn.lock);\n#\t\twe need those deps hoisted (so that NMOverwrites can be applied), so manually re-hoist them\n# ==========\n\n# pre-check (fails currently, which is okay -- that's why we do the below)\n#RUN if [ ! -d \"/dm_repo/node_modules/mobx-graphlink\" ]; then echo\t\t\t\t\t\t\t\t\t\t\"The mobx-graphlink package was not found in the root node_modules folder. Fix this! (hoisting needed for NMOverwrites)\"; else echo \"-1GoodA\"; fi\n#RUN if [ -d \"/dm_repo/node_modules/web-vcore/node_modules/mobx-graphlink\" ]; then echo\t\t\t\"The mobx-graphlink package was found as web-vcore subdep, rather than hoisted. Fix this! (hoisting needed for NMOverwrites)\"; else echo \"-1GoodB\"; fi\n\n#RUN mv /dm_repo/node_modules/web-vcore/node_modules/mobx-graphlink /dm_repo/node_modules/mobx-graphlink\n#RUN mv /dm_repo/node_modules/web-vcore/node_modules/graphql-feedback /dm_repo/node_modules/graphql-feedback\n# RUN mv /dm_repo/node_modules/web-vcore/node_modules/ /dm_repo/node_modules/\n\n#RUN cp -rl --force /dm_repo/node_modules/web-vcore/node_modules/ /dm_repo/ \\\n#\t&& rm -r /dm_repo/node_modules/web-vcore/node_modules/\n\n# post-check\n#RUN if [ ! -d \"/dm_repo/node_modules/mobx-graphlink\" ]; then echo\t\t\t\t\t\t\t\t\t\t\"The mobx-graphlink package was not found in the root node_modules folder. Fix this! (hoisting needed for NMOverwrites)\"; exit 1; else echo \"Passed.\"; fi\n#RUN if [ -d \"/dm_repo/node_modules/web-vcore/node_modules/mobx-graphlink\" ]; then echo\t\t\t\"The mobx-graphlink package was found as web-vcore subdep, rather than hoisted. Fix this! (hoisting needed for NMOverwrites)\"; exit 1; else echo \"Passed.\"; fi"
}