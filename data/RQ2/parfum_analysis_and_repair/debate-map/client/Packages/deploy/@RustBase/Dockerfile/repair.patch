diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/debate-map/client/Packages/deploy/@RustBase/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/debate-map/client/Packages/deploy/@RustBase/Dockerfile/repaired.Dockerfile
index ce02f76..ce5c3ed 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/debate-map/client/Packages/deploy/@RustBase/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/debate-map/client/Packages/deploy/@RustBase/Dockerfile/repaired.Dockerfile
@@ -31,16 +31,16 @@ ENV IN_DOCKER=1
 RUN apt-get update && \
 	# install some things needed by mold (at mold run-time)
 	#apt-get -y install build-essential git clang cmake libstdc++-10-dev libssl-dev libxxhash-dev zlib1g-dev pkg-config && \
-	apt-get -y install clang && \
+	apt-get -y --no-install-recommends install clang && \
 	# install mold
 	apt-get -y --no-install-recommends install software-properties-common && \
 	#apt-get -y install software-properties-common && \
 	add-apt-repository "deb http://httpredir.debian.org/debian sid main" && \
 	apt-get update && \
-	apt-get -t sid install -y --no-install-recommends mold
+	apt-get -t sid install -y --no-install-recommends mold && rm -rf /var/lib/apt/lists/*;
 	#apt-get -t sid install -y mold
 # also install various other commands (eg. for inspecting folder-structure during build)
-RUN apt-get install -y tree
+RUN apt-get install --no-install-recommends -y tree && rm -rf /var/lib/apt/lists/*;
 
 # ensure mold is installed
 RUN mold --version
@@ -51,7 +51,7 @@ WORKDIR /dm_repo
 COPY .cargo/config.toml .cargo/config.toml
 # this makes-so the cargo-build commands ignore warnings in their output (warnings in own code should be noticed/resolved through VSCode squigglies, not clutter in build-output)
 #ENV RUSTFLAGS=-Awarnings # moved to config.toml (we cannot set RUSTFLAGS from multiple places, so chose config.toml as the location for now)
-# this sets the debugging-info granularity to "per line", rather than the default "2" which is more detailed; this speeds up builds a bit 
+# this sets the debugging-info granularity to "per line", rather than the default "2" which is more detailed; this speeds up builds a bit
 ENV CARGO_PROFILE_DEV_DEBUG=1
 
 # cargo's "update crates.io index" step is slow; cache that step in its own layer