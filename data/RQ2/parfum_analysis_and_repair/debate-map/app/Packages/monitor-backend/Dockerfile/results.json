{
  "startTime": 1674249751267,
  "endTime": 1674249752351,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# STAGE 1 (base-image: none)\n# ==================================================\n# ----------\n\tARG RUST_BASE_URL\n\t#ARG RUST_BASE_URL=gcr.io/debate-map-prod/dm-rust-base\n# ----------\n\n# STAGE 2 (base-image: dm-rust-base)\n# ==================================================\n# ----------\n\t# see: ./Tiltfile (or source: Packages/deploy/@RustBase/Dockerfile)\n\tFROM $RUST_BASE_URL as cargo-build\n\tARG env_ENV\n\tARG debug_vs_release\n\tARG debug_vs_release_flag\n# ----------\n\n# initial arg processing\nENV ENV=$env_ENV\nRUN echo \"Env:$ENV DebugVSRelease:$debug_vs_release\"\n\n# now copy the actual code for each relevant package\nCOPY Packages/rust-macros/ /dm_repo/Packages/rust-macros/\nCOPY Packages/rust-shared/ /dm_repo/Packages/rust-shared/\nCOPY Packages/monitor-backend/ /dm_repo/Packages/monitor-backend/\n# ensure rust_shared was copied correctly\nRUN echo rerun_flag_1 && cat /dm_repo/Packages/rust-shared/src/lib.rs\n\n# now build everything\nWORKDIR /dm_repo/Packages/monitor-backend\nRUN RUSTC_BOOTSTRAP=1 cargo rustc ${debug_vs_release_flag} -- -Z time-passes\nRUN mkdir -p ./kgetOutput_buildTime && (cp cargo-timing.html ./kgetOutput_buildTime/ || :) && (cp ./*profdata ./kgetOutput_buildTime/ || :)\n\n# STAGE 3 (base-image: debian)\n# ==================================================\n# ----------\n\t# use debian v12 (bookworm), because that is what our linker (mold) was built on [mold only has releases for debian v12+], which makes the produced binary require it as well\n\tFROM debian:bookworm-slim@sha256:5007b106fd828d768975b21cfdcecb51a8eeea9aab815a9e4a169acde464fb89\n\tARG copy_from_path\n# ----------\n\nWORKDIR /dm_repo/Packages/monitor-backend\n\n# temp (for ssl connections; will look for cleaner way soon)\n#RUN cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt >> /etc/ssl/certs/ca-certificates.crt\n#RUN cp /var/run/secrets/kubernetes.io/serviceaccount/ca.crt /etc/ssl/certs/ca-certificates.crt\nRUN apt-get update && apt-get install --no-install-recommends -y ca-certificates && rm -rf /var/lib/apt/lists/*;\n#RUN mkdir /usr/local/share/ca-certificates\n#RUN update-ca-certificates\n\nCOPY --from=cargo-build ${copy_from_path} .\nCOPY --from=cargo-build /dm_repo/Packages/monitor-backend/kgetOutput_buildTime/ ./kgetOutput_buildTime/\n\n# copy frontend files from monitor-client package (monitor-backend is the web-server for those static files)\nCOPY Packages/monitor-client/Dist/ /dm_repo/Packages/monitor-client/Dist/\n\nCMD echo Starting Rust program...; \\\n\\\n\t# try to find better way to enable ssl connections...\n\tcat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt >> /usr/local/share/ca-certificates/k8s_ca.crt; \\\n\tupdate-ca-certificates; \\\n\\\n\tRUST_BACKTRACE=full ./monitor-backend; \\\n\tsleep 1; echo Rust program crashed..."
}