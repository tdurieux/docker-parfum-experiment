{
  "startTime": 1674253908032,
  "endTime": 1674253909403,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04\nARG ARCH=gpu\nARG DEBIAN_FRONTEND=noninteractive\nARG py_version=3\n\n# Validate that arguments are specified\nRUN test $py_version || exit 1\n\nRUN echo $py_version\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    git \\\n    curl \\\n    ca-certificates \\\n    libjpeg-dev \\\n    nginx \\\n    jq \\\n    libsm6 \\\n    libxext6 \\\n    libxrender-dev \\\n    nginx \\\n    libpng-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -f -o ~/miniconda.sh -LO https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda install -y python=3.7 numpy pyyaml scipy ipython mkl mkl-include ninja cython && \\\n    /opt/conda/bin/conda install -y -c pytorch magma-cuda100 && \\\n    /opt/conda/bin/conda clean -ya\nENV PATH /opt/conda/bin:$PATH\n\nRUN pip install --no-cache-dir --upgrade pip\n\nRUN python --version\nRUN pip --version\n\n# #RUN df -a\n\nRUN pip install --no-cache-dir --trusted-host pypi.python.org -v --log /tmp/pip.log torch torchvision\n\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONIOENCODING=UTF-8 LANG=C.UTF-8 LC_ALL=C.UTF-8\n\nRUN nvcc --version\nRUN which nvcc\n\nRUN pip --no-cache-dir install \\\n    flask \\\n    pathlib \\\n    gevent \\\n    gunicorn \\\n    scipy \\\n    sklearn \\\n    pandas \\\n    fastprogress \\\n    python-box \\\n    tensorboardX\n\n\n# RUN git clone https://github.com/NVIDIA/apex.git && cd apex && python setup.py install --cuda_ext --cpp_ext\n\n# RUN pip --no-cache-dir install fast-bert\nRUN pip install --no-cache-dir fast-bert==1.9.15\n\nRUN pip install --no-cache-dir cryptography --upgrade && \\\n    pip install --no-cache-dir urllib3 --upgrade\n\nENV PATH=\"/opt/ml/code:${PATH}\"\nCOPY /bert /opt/ml/code\n\nWORKDIR /opt/ml/code\n\nRUN cd $WORKDIR\n\nRUN python download_pretrained_models.py --location_dir ./pretrained_models/ --models bert-base-uncased roberta-base distilbert-base-uncased distilroberta-base\n\nRUN rm -rf /opt/ml/input/data/training/cache/\n"
}