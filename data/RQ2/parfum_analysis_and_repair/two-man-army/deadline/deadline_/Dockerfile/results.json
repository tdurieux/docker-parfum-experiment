{
  "startTime": 1674249469970,
  "endTime": 1674249472104,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 2,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 2,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 5,
        "columnEnd": 148
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 5,
        "columnEnd": 148
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 293,
        "lineEnd": 293,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 1,
        "columnEnd": 48
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 263,
        "lineEnd": 263,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 47,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 47,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 47,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Installs python 3.6 and Rust\nFROM buildpack-deps:jessie\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# runtime dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\ttcl \\\n\t\ttk \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\nENV PYTHON_VERSION 3.6.1\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 9.0.1\n\nRUN set -ex \\\n\t&& buildDeps=' \\\n\t\ttcl-dev \\\n\t\ttk-dev \\\n\t' \\\n\t&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n\t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n\t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n\t&& rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n\t&& mkdir -p /usr/src/python \\\n\t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n\t&& rm python.tar.xz \\\n\n\t&& cd /usr/src/python \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t--enable-loadable-sqlite-extensions \\\n\t\t--enable-shared \\\n\t&& make -j$(nproc) \\\n\t&& make install \\\n\t&& ldconfig \\\n\n# explicit path to \"pip3\" to ensure distribution-provided \"pip3\" cannot interfere\n\t&& if [ ! -e /usr/local/bin/pip3 ]; then : \\\n\t\t&& wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n\t\t&& python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n\t\t&& rm /tmp/get-pip.py \\\n\t; fi \\\n# we use \"--force-reinstall\" for the case where the version of pip we're trying to install is the same as the version bundled with Python\n# (\"Requirement already up-to-date: pip==8.1.2 in /usr/local/lib/python3.6/site-packages\")\n# https://github.com/docker-library/python/pull/143#issuecomment-241032683\n\t&& pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n# then we use \"pip list\" to ensure we don't have more than one pip version installed\n# https://github.com/docker-library/python/pull/100\n\t&& [ \"$(pip list |tac|tac| awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }')\" = \"$PYTHON_PIP_VERSION\" ] \\\n\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a -name test -o -name tests \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& apt-get purge -y --auto-remove $buildDeps \\\n\t&& rm -rf /usr/src/python ~/.cache\n\n# make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n\t&& { [ -e easy_install ] || ln -s easy_install-* easy_install; } \\\n\t&& ln -s idle3 idle \\\n\t&& ln -s pydoc3 pydoc \\\n\t&& ln -s python3 python \\\n\t&& ln -s python3-config python-config\nENV RUST_VERSION=1.16.0\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    git \\\n    libssl-dev \\\n    pkg-config && \\\n  curl -f -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n  tar -xzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n  ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh --without=rust-docs && \\\n  DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y curl && \\\n  DEBIAN_FRONTEND=noninteractive apt-get autoremove -y && \\\n  rm -rf \\\n    rust-$RUST_VERSION-x86_64-unknown-linux-gnu \\\n    rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/* && \\\n  mkdir /source\nVOLUME [\"/source\"]\n\n\n\n\n\nMAINTAINER Jimmy Cuadra <jimmy@jimmycuadra.com>\n\nENV USER root\nENV RUST_VERSION=1.16.0\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    git \\\n    libssl-dev \\\n    pkg-config && \\\n  curl -f -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n  tar -xzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n  ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh --without=rust-docs && \\\n  DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y curl && \\\n  DEBIAN_FRONTEND=noninteractive apt-get autoremove -y && \\\n  rm -rf \\\n    rust-$RUST_VERSION-x86_64-unknown-linux-gnu \\\n    rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n    /var/lib/apt/lists/* \\\n    /tmp/* \\\n    /var/tmp/*\n\n######## GOLANG\n# gcc for cgo\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc6-dev \\\n\t\tmake \\\n\t\tpkg-config \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GOLANG_VERSION 1.8.1\n\nRUN set -eux; \\\n\n# this \"case\" statement is generated via \"update.sh\"\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"${dpkgArch##*-}\" in \\\n\t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='b7b47572a2676449716865a66901090c057f6f1d8dfb1e19528fcd0372e5ce74' ;; \\\n\t\ti386) goRelArch='linux-386'; goRelSha256='cb3f4527112075a8b045d708f793aeee2709d2f5ddd320973a1413db06fddb50' ;; \\\n\t\ts390x) goRelArch='linux-s390x'; goRelSha256='0a59f4034a27fc51431989da520fd244d5261f364888134cab737e5bc2158cb2' ;; \\\n\t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='e8a8326913640409028ef95c2107773f989b1b2a6e11ceb463c77c42887381da' ;; \\\n\t\tamd64) goRelArch='linux-amd64'; goRelSha256='a579ab19d5237e263254f1eac5352efcf1d70b9dacadb6d6bb12b0911ede8994' ;; \\\n\t\t*) goRelArch='src'; goRelSha256='33daf4c03f86120fdfdc66bddf6bfff4661c7ca11c5da473e537f4d69b470e57'; \\\n\t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo >&2 ;; \\\n\tesac; \\\n\n\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \\\n\twget -O go.tgz \"$url\"; \\\n\techo \"${goRelSha256}  *go.tgz\" | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tif [ \"$goRelArch\" = 'src' ]; then \\\n\t\techo >&2; \\\n\t\techo >&2 'error: UNIMPLEMENTED'; \\\n\t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \\\n\t\techo >&2; \\\n\t\texit 1; \\\n\tfi; \\\n\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\n\n\n#COPY go-wrapper /usr/local/bin/\n\n# KOTLIN\n\nENV K_VERSION 1.0.3\n#\nENV KOTLIN_COMPILER_URL https://github.com/JetBrains/kotlin/releases/download/v${K_VERSION}/kotlin-compiler-${K_VERSION}.zip\n#\n#RUN apt-get update &&\n#    apt-get install -y &&\n#    apt-get clean && \\\n#    rm -rf /var/lib/apt/lists/*\n#\nRUN apt-get update && apt-get install -y --no-install-recommends unzip && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y curl tar unzip \\\n\t&& ( curl -f -s -k -L -C - -b \"oraclelicense=accept-securebackup-cookie\" https://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz | tar xfz - -C /opt) \\\n\t&& mv /opt/jdk1.7.0_79/jre /opt/jre1.7.0_79 \\\n\t&& mv /opt/jdk1.7.0_79/lib/tools.jar /opt/jre1.7.0_79/lib/ext \\\n\t&& rm -Rf /opt/jdk1.7.0_79 \\\n\t&& ln -s /opt/jre1.7.0_79 /opt/java && rm -rf /var/lib/apt/lists/*;\n\n# Set JAVA_HOME\nENV JAVA_HOME /opt/java\n#ENV JAVA_VERSION 7u75\n#ENV BUILD_VERSION b13\n#\n## Upgrading system\n#RUN apt-get -y upgrade && \\\n#    curl -L -k  -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/$JAVA_VERSION-$BUILD_VERSION/jdk-$JAVA_VERSION-linux-x64.rpm\" > /tmp/jdk-7-linux-x64.rpm && \\\n#    apt-get -y install /tmp/jdk-7-linux-x64.rpm && \\\n#    apt-get clean all && rm -rf /tmp/jdk-7-linux-x64.rpm\n#\n#\n#RUN alternatives --install /usr/bin/java jar /usr/java/latest/bin/java 200000 && \\\n#    alternatives --install /usr/bin/javaws javaws /usr/java/latest/bin/javaws 200000 && \\\n#    alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000\n#\n#ENV JAVA_HOME /usr/java/latest\n\nRUN wget $KOTLIN_COMPILER_URL -O /tmp/a.zip && \\\n    unzip /tmp/a.zip -d /opt && \\\n    rm /tmp/a.zip\n\n# Add java alias\n#RUN echo '#!/bin/bash\\n/opt/java/bin/java' > /usr/bin/java\n#RUN chmod +x /usr/bin/java\n#RUN mv /opt/java/bin/java /\n# Add kotlinc alias\n#RUN echo '#!/bin/bash\\n/opt/kotlinc/bin/kotlinc' > /usr/bin/kotlinc\n#RUN chmod +x /usr/bin/kotlinc\n# KOTLIN\nENV PATH $PATH:/opt/kotlinc/bin\nENV PATH $PATH:/opt/java/bin\n\n\n# *********** RUBY ******\n# skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n\t&& { \\\n\t\techo 'install: --no-document'; \\\n\t\techo 'update: --no-document'; \\\n\t} >> /usr/local/etc/gemrc\n\nENV RUBY_MAJOR 2.1\nENV RUBY_VERSION 2.1.10\nENV RUBY_DOWNLOAD_SHA256 5be9f8d5d29d252cd7f969ab7550e31bbb001feb4a83532301c0dd3b5006e148\nENV RUBYGEMS_VERSION 2.6.12\n\n# some of ruby's build scripts are written in ruby\n#   we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n\t\\\n\t&& buildDeps=' \\\n\t\tbison \\\n\t\tdpkg-dev \\\n\t\tlibgdbm-dev \\\n\t\truby \\\n\t' \\\n\t&& apt-get update \\\n\t&& apt-get install -y --no-install-recommends $buildDeps \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n\t&& echo \"$RUBY_DOWNLOAD_SHA256  *ruby.tar.xz\" | sha256sum -c - \\\n\n\t&& mkdir -p /usr/src/ruby \\\n\t&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n\t&& rm ruby.tar.xz \\\n\n\t&& cd /usr/src/ruby \\\n\n# hack in \"ENABLE_PATH_CHECK\" disabling to suppress:\n#   warning: Insecure world writable dir\n\t&& { \\\n\t\techo '#define ENABLE_PATH_CHECK 0'; \\\n\t\techo; \\\n\t\tcat file.c; \\\n\t} > file.c.new \\\n\t&& mv file.c.new file.c \\\n\n\t&& autoconf \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--disable-install-doc \\\n\t\t--enable-shared \\\n\t&& make -j \"$(nproc)\" \\\n\t&& make install \\\n\n\t&& apt-get purge -y --auto-remove $buildDeps \\\n\t&& cd / \\\n\t&& rm -r /usr/src/ruby \\\n\n\t&& gem update --system \"$RUBYGEMS_VERSION\" && rm -rf /root/.gem;\n\nENV BUNDLER_VERSION 1.15.1\n\nRUN gem install bundler --version \"$BUNDLER_VERSION\"\n\n# install things globally, for great justice\n# and don't create \".bundle\" in all our apps\nENV GEM_HOME /usr/local/bundle\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n\tBUNDLE_BIN=\"$GEM_HOME/bin\" \\\n\tBUNDLE_SILENCE_ROOT_WARNING=1 \\\n\tBUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH $BUNDLE_BIN:$PATH\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n\t&& chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\n\n\n\nCMD [\"/bin/bash\"]\n"
}