{
  "startTime": 1674253016059,
  "endTime": 1674253017199,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM linuxkit/alpine:1b05307ae8152e3d38f79e297b0632697a30c65c AS build\n\n# When changing kubernetes_version remember to also update:\n# - scripts/mk-image-cache-lst and run `make refresh-image-caches` from top-level\n# - pkg/e2e-test/Dockerfile\nENV kubernetes_version v1.10.3\nENV cni_version        v0.7.1\nENV critools_version   v1.0.0-alpha.0\n\nRUN apk add -U --no-cache \\\n  bash \\\n  coreutils \\\n  curl \\\n  findutils \\\n  git \\\n  go \\\n  grep \\\n  libc-dev \\\n  linux-headers \\\n  make \\\n  rsync \\\n  && true\n\nENV GOPATH=/go PATH=$PATH:/go/bin\n\n### Kubernetes (incl Kubelet)\n\nENV KUBERNETES_URL https://github.com/kubernetes/kubernetes.git\n#ENV KUBERNETES_BRANCH pull/NNN/head\nENV KUBERNETES_COMMIT ${kubernetes_version}\nRUN mkdir -p $GOPATH/src/github.com/kubernetes && \\\n    cd $GOPATH/src/github.com/kubernetes && \\\n    git clone $KUBERNETES_URL kubernetes\nWORKDIR $GOPATH/src/github.com/kubernetes/kubernetes\nRUN set -e; \\\n    if [ -n \"$KUBERNETES_BRANCH\" ] ; then \\\n        git fetch origin \"$KUBERNETES_BRANCH\"; \\\n    fi; \\\n    git checkout -q $KUBERNETES_COMMIT\n\nRUN make WHAT=\"cmd/kubelet cmd/kubectl cmd/kubeadm\"\n\n### CNI plugins\n\nENV CNI_URL https://github.com/containernetworking/plugins\n#ENV CNI_BRANCH pull/NNN/head\nENV CNI_COMMIT ${cni_version}\nRUN mkdir -p $GOPATH/github.com/containernetworking/ && \\\n    cd $GOPATH/github.com/containernetworking/ && \\\n    git clone $CNI_URL plugins\nWORKDIR $GOPATH/github.com/containernetworking/plugins\nRUN set -e;  \\\n    if [ -n \"$CNI_BRANCH\" ] ; then \\\n        git fetch origin \"CNI_BRANCH\"; \\\n    fi; \\\n    git checkout -q $CNI_COMMIT\nRUN ./build.sh\n\n### critools\n\nENV CRITOOLS_URL https://github.com/kubernetes-incubator/cri-tools\n#ENV CRITOOLS_BRANCH pull/NNN/head\nENV CRITOOLS_COMMIT ${critools_version}\nRUN mkdir -p $GOPATH/github.com/kubernetes-incubator/ && \\\n    cd $GOPATH/github.com/kubernetes-incubator/ && \\\n    git clone $CRITOOLS_URL cri-tools\nWORKDIR $GOPATH/github.com/kubernetes-incubator/cri-tools\nRUN set -e;  \\\n    if [ -n \"$CRITOOLS_BRANCH\" ] ; then \\\n        git fetch origin \"CRITOOLS_BRANCH\"; \\\n    fi; \\\n    git checkout -q $CRITOOLS_COMMIT\nRUN make binaries\n\n## Construct final image\n\nRUN mkdir -p /out/etc/apk && cp -r /etc/apk/* /out/etc/apk/\n#coreutils needed for du -B for disk image checks made by kubelet\n# example: $ du -s -B 1 /var/lib/kubelet/pods/...\n#          du: unrecognized option: B\nRUN apk add --no-cache --initdb -p /out \\\n    alpine-baselayout \\\n    busybox \\\n    ca-certificates \\\n    coreutils \\\n    curl \\\n    ebtables \\\n    ethtool \\\n    findutils \\\n    iproute2 \\\n    iptables \\\n    musl \\\n    openssl \\\n    socat \\\n    util-linux \\\n    nfs-utils \\\n    && true\n\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubelet /out/usr/bin/kubelet\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubeadm /out/usr/bin/kubeadm\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubectl /out/usr/bin/kubectl\n\nRUN tar -czf /out/root/cni.tgz -C $GOPATH/github.com/containernetworking/plugins/bin . && rm /out/root/cni.tgz\n\nRUN cp $GOPATH/bin/crictl /out/usr/bin/crictl\nRUN cp $GOPATH/bin/critest /out/usr/bin/critest\n\n# Remove apk residuals. We have a read-only rootfs, so apk is of no use.\nRUN rm -rf /out/etc/apk /out/lib/apk /out/var/cache\n\nADD kubelet.sh /out/usr/bin/kubelet.sh\nADD kubeadm-init.sh /kubeadm-init.sh\nRUN sed -e \"s/@KUBERNETES_VERSION@/${kubernetes_version}/g\" </kubeadm-init.sh >/out/usr/bin/kubeadm-init.sh && chmod +x /out/usr/bin/kubeadm-init.sh\n\nFROM scratch\nWORKDIR /\nENTRYPOINT [\"/usr/bin/kubelet.sh\"]\nCOPY --from=build /out /\nENV KUBECONFIG \"/etc/kubernetes/admin.conf\"\n"
}