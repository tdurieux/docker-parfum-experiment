{
  "startTime": 1674249197039,
  "endTime": 1674249198002,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 1,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM linuxkit/alpine:07f7d136e427dc68154cd5edbb2b9576f9ac5213 AS kernel-build\nRUN apk add --no-cache \\\n    argp-standalone \\\n    automake \\\n    bash \\\n    bc \\\n    binutils-dev \\\n    bison \\\n    build-base \\\n    curl \\\n    diffutils \\\n    flex \\\n    git \\\n    gmp-dev \\\n    gnupg \\\n    installkernel \\\n    kmod \\\n    libelf-dev \\\n    libressl-dev \\\n    libunwind-dev \\\n    linux-headers \\\n    ncurses-dev \\\n    sed \\\n    squashfs-tools \\\n    tar \\\n    xz \\\n    xz-dev \\\n    zlib-dev\n\nARG KERNEL_VERSION\nARG KERNEL_SERIES\nARG DEBUG\n\nENV KERNEL_SOURCE=https://www.kernel.org/pub/linux/kernel/v4.x/linux-${KERNEL_VERSION}.tar.xz\nENV KERNEL_SHA256_SUMS=https://www.kernel.org/pub/linux/kernel/v4.x/sha256sums.asc\nENV KERNEL_PGP2_SIGN=https://www.kernel.org/pub/linux/kernel/v4.x/linux-${KERNEL_VERSION}.tar.sign\n\n# PGP keys: 589DA6B1 (greg@kroah.com) & 6092693E (autosigner@kernel.org) & 00411886 (torvalds@linux-foundation.org)\nCOPY keys.asc keys.asc\n\n# Download and verify kernel\nRUN curl -fsSLO ${KERNEL_SHA256_SUMS} && \\\n    gpg2 -q --import keys.asc && \\\n    gpg2 --verify sha256sums.asc && \\\n    KERNEL_SHA256=$(grep linux-${KERNEL_VERSION}.tar.xz sha256sums.asc | cut -d ' ' -f 1) && \\\n    curl -fsSLO ${KERNEL_SOURCE} && \\\n    echo \"${KERNEL_SHA256}  linux-${KERNEL_VERSION}.tar.xz\" | sha256sum -c - && \\\n    xz -d linux-${KERNEL_VERSION}.tar.xz && \\\n    curl -fsSLO ${KERNEL_PGP2_SIGN} && \\\n    gpg2 --verify linux-${KERNEL_VERSION}.tar.sign linux-${KERNEL_VERSION}.tar && \\\n    cat linux-${KERNEL_VERSION}.tar | tar --absolute-names -x && mv /linux-${KERNEL_VERSION} /linux\n\n#COPY linux-slice /linux\n\nCOPY kernel_config-${KERNEL_SERIES} /linux/arch/x86/configs/x86_64_defconfig\nCOPY kernel_config.debug /linux/debug_config\n\nRUN if [ -n \"${DEBUG}\" ]; then \\\n    sed -i 's/CONFIG_PANIC_ON_OOPS=y/# CONFIG_PANIC_ON_OOPS is not set/' /linux/arch/x86/configs/x86_64_defconfig; \\\n    cat /linux/debug_config >> /linux/arch/x86/configs/x86_64_defconfig; \\\n    fi\n\n# Apply local patches\nCOPY patches-${KERNEL_SERIES} /patches\nWORKDIR /linux\nRUN set -e && for patch in /patches/*.patch; do \\\n        echo \"Applying $patch\"; \\\n        patch -p1 < \"$patch\"; \\\n    done\n\nRUN mkdir /out\n\n# Kernel\nRUN make defconfig && \\\n    make oldconfig && \\\n    make -j \"$(getconf _NPROCESSORS_ONLN)\" KCFLAGS=\"-fno-pie\" && \\\n    cp arch/x86_64/boot/bzImage /out/kernel && \\\n    cp System.map /out && \\\n    ([ -n \"${DEBUG}\" ] && cp vmlinux /out || true)\n\n# Modules\nRUN make INSTALL_MOD_PATH=/tmp/kernel-modules modules_install && \\\n    ( DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)) && \\\n      cd /tmp/kernel-modules/lib/modules/$DVER && \\\n      rm build source && \\\n      ln -s /usr/src/linux-headers-$DVER build ) && \\\n    ( cd /tmp/kernel-modules && tar cf /out/kernel.tar lib )\n\n# Headers (userspace API)\nRUN mkdir -p /tmp/kernel-headers/usr && \\\n    make INSTALL_HDR_PATH=/tmp/kernel-headers/usr headers_install && \\\n    ( cd /tmp/kernel-headers && tar cf /out/kernel-headers.tar usr )\n\n# Headers (kernel development)\nRUN DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)) && \\\n    dir=/tmp/usr/src/linux-headers-$DVER && \\\n    mkdir -p $dir && \\\n    cp /linux/.config $dir && \\\n    cp /linux/Module.symvers $dir && \\\n    find . -path './include/*' -prune -o \\\n           -path './arch/*/include' -prune -o \\\n           -path './scripts/*' -prune -o \\\n           -type f \\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \\\n                      -name '*.lds' -o -name '*.pl' -o -name '*.sh' \\) | \\\n         tar cf - -T - | (cd $dir; tar xf -) && \\\n    ( cd /tmp && tar cf /out/kernel-dev.tar usr/src )\n\nRUN printf \"KERNEL_SOURCE=${KERNEL_SOURCE}\\n\" > /out/kernel-source-info\n\n# perf (Don't compile for 4.4.x, it's broken and tedious to fix)\n#RUN if [ \"${KERNEL_SERIES}\" != \"4.4.x\" ]; then \\\n       #mkdir -p /build/perf && \\\n       #make -C tools/perf LDFLAGS=-static O=/build/perf && \\\n       #strip /build/perf/perf && \\\n       #cp /build/perf/perf /out; \\\n     #fi\n\nFROM scratch\nENTRYPOINT []\nCMD []\nWORKDIR /\nCOPY --from=kernel-build /out/* /\n"
}