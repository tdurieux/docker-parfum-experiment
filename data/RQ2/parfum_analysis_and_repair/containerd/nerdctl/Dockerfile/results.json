{
  "startTime": 1674245070205,
  "endTime": 1674245072663,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 240,
        "lineEnd": 240,
        "columnStart": 4,
        "columnEnd": 158
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 265,
        "lineEnd": 265,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 197,
        "lineEnd": 197,
        "columnStart": 11,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 2,
        "columnEnd": 158
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 261,
        "lineEnd": 262,
        "columnStart": 2,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 290,
        "lineEnd": 292,
        "columnStart": 2,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 2,
        "columnEnd": 158
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 233,
        "lineEnd": 238,
        "columnStart": 2,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 261,
        "lineEnd": 262,
        "columnStart": 2,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 290,
        "lineEnd": 292,
        "columnStart": 2,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#   Copyright The containerd Authors.\n\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n\n#       http://www.apache.org/licenses/LICENSE-2.0\n\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\n# -----------------------------------------------------------------------------\n# Usage: `docker run -it --privileged <IMAGE>`. Make sure to add `-t` and `--privileged`.\n\n# TODO: verify commit hash\n\n# Basic deps\nARG CONTAINERD_VERSION=v1.6.6\nARG RUNC_VERSION=v1.1.3\nARG CNI_PLUGINS_VERSION=v1.1.1\n\n# Extra deps: Build\nARG BUILDKIT_VERSION=v0.10.3\n# Extra deps: Lazy-pulling\nARG STARGZ_SNAPSHOTTER_VERSION=v0.11.4\n# Extra deps: Encryption\nARG IMGCRYPT_VERSION=v1.1.4\n# Extra deps: Rootless\nARG ROOTLESSKIT_VERSION=v1.0.1\nARG SLIRP4NETNS_VERSION=v1.2.0\n# Extra deps: bypass4netns\nARG BYPASS4NETNS_VERSION=v0.2.2\n# Extra deps: FUSE-OverlayFS\nARG FUSE_OVERLAYFS_VERSION=v1.9\nARG CONTAINERD_FUSE_OVERLAYFS_VERSION=v1.0.4\n# Extra deps: IPFS\nARG IPFS_VERSION=v0.13.0\n# Extra deps: Init\nARG TINI_VERSION=v0.19.0\n# Extra deps: Debug\nARG BUILDG_VERSION=v0.2.0\n\n# Test deps\nARG GO_VERSION=1.18\nARG UBUNTU_VERSION=22.04\nARG CONTAINERIZED_SYSTEMD_VERSION=v0.1.1\n\nFROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-bullseye AS build-base-debian\n# libbtrfs: for containerd\n# libseccomp: for runc and bypass4netns\nRUN dpkg --add-architecture arm64 && \\\n  dpkg --add-architecture amd64 && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y crossbuild-essential-amd64 crossbuild-essential-arm64 git libbtrfs-dev:amd64 libbtrfs-dev:arm64 libseccomp-dev:amd64 libseccomp-dev:arm64 && rm -rf /var/lib/apt/lists/*;\n\nFROM build-base-debian AS build-containerd\nARG CONTAINERD_VERSION\nRUN git clone https://github.com/containerd/containerd.git /go/src/github.com/containerd/containerd\nWORKDIR /go/src/github.com/containerd/containerd\nRUN git checkout ${CONTAINERD_VERSION} && \\\n  mkdir -p /out /out/amd64 /out/arm64 && \\\n  cp -a containerd.service /out\nENV CGO_ENABLED=1\nENV GO111MODULE=off\n# TODO: how to build containerd as static binaries? https://github.com/containerd/containerd/issues/6158\nRUN GOARCH=amd64 CC=x86_64-linux-gnu-gcc make && \\\n  cp -a bin/containerd bin/containerd-shim-runc-v2 bin/ctr /out/amd64\nRUN git clean -xfd\nRUN GOARCH=arm64 CC=aarch64-linux-gnu-gcc make && \\\n  cp -a bin/containerd bin/containerd-shim-runc-v2 bin/ctr /out/arm64\n\nFROM build-base-debian AS build-runc\nARG RUNC_VERSION\nRUN git clone https://github.com/opencontainers/runc.git /go/src/github.com/opencontainers/runc\nWORKDIR /go/src/github.com/opencontainers/runc\nRUN git checkout ${RUNC_VERSION} && \\\n  mkdir -p /out\nENV CGO_ENABLED=1\nRUN GOARCH=amd64 CC=x86_64-linux-gnu-gcc make static && \\\n  cp -a runc /out/runc.amd64\nRUN GOARCH=arm64 CC=aarch64-linux-gnu-gcc make static && \\\n  cp -a runc /out/runc.arm64\n\nFROM build-base-debian AS build-bypass4netns\nARG BYPASS4NETNS_VERSION\nRUN git clone https://github.com/rootless-containers/bypass4netns.git /go/src/github.com/rootless-containers/bypass4netns\nWORKDIR /go/src/github.com/rootless-containers/bypass4netns\nRUN git checkout ${BYPASS4NETNS_VERSION} && \\\n  mkdir -p /out/amd64 /out/arm64\nENV CGO_ENABLED=1\nRUN GOARCH=amd64 CC=x86_64-linux-gnu-gcc make static && \\\n  cp -a bypass4netns bypass4netnsd /out/amd64\nRUN GOARCH=arm64 CC=aarch64-linux-gnu-gcc make static && \\\n  cp -a bypass4netns bypass4netnsd /out/arm64\n\nFROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine AS build-base\nRUN apk add --no-cache make git curl\nCOPY . /go/src/github.com/containerd/nerdctl\nWORKDIR /go/src/github.com/containerd/nerdctl\n\nFROM build-base AS build-minimal\nRUN BINDIR=/out/bin make binaries install\n# We do not set CMD to `go test` here, because it requires systemd\n\nFROM build-base AS build-full\nARG TARGETARCH\nENV GOARCH=${TARGETARCH}\nRUN BINDIR=/out/bin make binaries install\nWORKDIR /nowhere\nCOPY ./Dockerfile.d/SHA256SUMS.d/ /SHA256SUMS.d\nCOPY README.md /out/share/doc/nerdctl/\nCOPY docs /out/share/doc/nerdctl/docs\nRUN echo \"${TARGETARCH:-amd64}\" | sed -e s/amd64/x86_64/ -e s/arm64/aarch64/ | tee /target_uname_m\nRUN mkdir -p /out/share/doc/nerdctl-full && \\\n  echo \"# nerdctl (full distribution)\" > /out/share/doc/nerdctl-full/README.md && \\\n  echo \"- nerdctl: $(cd /go/src/github.com/containerd/nerdctl && git describe --tags)\" >> /out/share/doc/nerdctl-full/README.md\nARG CONTAINERD_VERSION\nCOPY --from=build-containerd /out/${TARGETARCH:-amd64}/* /out/bin/\nCOPY --from=build-containerd /out/containerd.service /out/lib/systemd/system/containerd.service\nRUN echo \"- containerd: ${CONTAINERD_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG RUNC_VERSION\nCOPY --from=build-runc /out/runc.${TARGETARCH:-amd64} /out/bin/runc\nRUN echo \"- runc: ${RUNC_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG CNI_PLUGINS_VERSION\nRUN fname=\"cni-plugins-${TARGETOS:-linux}-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/cni-plugins-${CNI_PLUGINS_VERSION}\" | sha256sum -c && \\\n  mkdir -p /out/libexec/cni && \\\n  tar xzf \"${fname}\" -C /out/libexec/cni && \\\n  rm -f \"${fname}\" && \\\n  echo \"- CNI plugins: ${CNI_PLUGINS_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG BUILDKIT_VERSION\nRUN fname=\"buildkit-${BUILDKIT_VERSION}.${TARGETOS:-linux}-${TARGETARCH:-amd64}.tar.gz\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/moby/buildkit/releases/download/${BUILDKIT_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/buildkit-${BUILDKIT_VERSION}\" | sha256sum -c && \\\n  tar xzf \"${fname}\" -C /out && \\\n  rm -f \"${fname}\" /out/bin/buildkit-qemu-* /out/bin/buildkit-runc && \\\n  echo \"- BuildKit: ${BUILDKIT_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\n# NOTE: github.com/moby/buildkit/examples/systemd is not included in BuildKit v0.8.x, will be included in v0.9.x\nRUN cd /out/lib/systemd/system && \\\n  sedcomm='s@bin/containerd@bin/buildkitd@g; s@(Description|Documentation)=.*@@' && \\\n  sed -E \"${sedcomm}\" containerd.service > buildkit.service && \\\n  echo \"\" >> buildkit.service && \\\n  echo \"# This file was converted from containerd.service, with \\`sed -E '${sedcomm}'\\`\" >> buildkit.service\nARG STARGZ_SNAPSHOTTER_VERSION\nRUN fname=\"stargz-snapshotter-${STARGZ_SNAPSHOTTER_VERSION}-${TARGETOS:-linux}-${TARGETARCH:-amd64}.tar.gz\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/containerd/stargz-snapshotter/releases/download/${STARGZ_SNAPSHOTTER_VERSION}/${fname}\" && \\\n  curl -o \"stargz-snapshotter.service\" -fSL \"https://raw.githubusercontent.com/containerd/stargz-snapshotter/${STARGZ_SNAPSHOTTER_VERSION}/script/config/etc/systemd/system/stargz-snapshotter.service\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/stargz-snapshotter-${STARGZ_SNAPSHOTTER_VERSION}\" | sha256sum -c - && \\\n  grep \"stargz-snapshotter.service\" \"/SHA256SUMS.d/stargz-snapshotter-${STARGZ_SNAPSHOTTER_VERSION}\" | sha256sum -c - && \\\n  tar xzf \"${fname}\" -C /out/bin && \\\n  rm -f \"${fname}\" /out/bin/stargz-store && \\\n  mv stargz-snapshotter.service /out/lib/systemd/system/stargz-snapshotter.service && \\\n  echo \"- Stargz Snapshotter: ${STARGZ_SNAPSHOTTER_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG IMGCRYPT_VERSION\nRUN git clone https://github.com/containerd/imgcrypt.git /go/src/github.com/containerd/imgcrypt && \\\n  cd /go/src/github.com/containerd/imgcrypt && \\\n  CGO_ENABLED=0 make && DESTDIR=/out make install && \\\n  echo \"- imgcrypt: ${IMGCRYPT_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG ROOTLESSKIT_VERSION\nRUN fname=\"rootlesskit-$(cat /target_uname_m).tar.gz\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/rootless-containers/rootlesskit/releases/download/${ROOTLESSKIT_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/rootlesskit-${ROOTLESSKIT_VERSION}\" | sha256sum -c && \\\n  tar xzf \"${fname}\" -C /out/bin && \\\n  rm -f \"${fname}\" /out/bin/rootlesskit-docker-proxy && \\\n  echo \"- RootlessKit: ${ROOTLESSKIT_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG SLIRP4NETNS_VERSION\nRUN fname=\"slirp4netns-$(cat /target_uname_m)\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/rootless-containers/slirp4netns/releases/download/${SLIRP4NETNS_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/slirp4netns-${SLIRP4NETNS_VERSION}\" | sha256sum -c && \\\n  mv \"${fname}\" /out/bin/slirp4netns && \\\n  chmod +x /out/bin/slirp4netns && \\\n  echo \"- slirp4netns: ${SLIRP4NETNS_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG BYPASS4NETNS_VERSION\nCOPY --from=build-bypass4netns /out/${TARGETARCH:-amd64}/* /out/bin/\nRUN echo \"- bypass4netns: ${BYPASS4NETNS_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG FUSE_OVERLAYFS_VERSION\nRUN fname=\"fuse-overlayfs-$(cat /target_uname_m)\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/containers/fuse-overlayfs/releases/download/${FUSE_OVERLAYFS_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/fuse-overlayfs-${FUSE_OVERLAYFS_VERSION}\" | sha256sum -c && \\\n  mv \"${fname}\" /out/bin/fuse-overlayfs && \\\n  chmod +x /out/bin/fuse-overlayfs && \\\n  echo \"- fuse-overlayfs: ${FUSE_OVERLAYFS_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG CONTAINERD_FUSE_OVERLAYFS_VERSION\nRUN fname=\"containerd-fuse-overlayfs-${CONTAINERD_FUSE_OVERLAYFS_VERSION/v}-${TARGETOS:-linux}-${TARGETARCH:-amd64}.tar.gz\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/containerd/fuse-overlayfs-snapshotter/releases/download/${CONTAINERD_FUSE_OVERLAYFS_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/containerd-fuse-overlayfs-${CONTAINERD_FUSE_OVERLAYFS_VERSION}\" | sha256sum -c && \\\n  tar xzf \"${fname}\" -C /out/bin && \\\n  rm -f \"${fname}\" && \\\n  echo \"- containerd-fuse-overlayfs: ${CONTAINERD_FUSE_OVERLAYFS_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG IPFS_VERSION\nRUN fname=\"go-ipfs_${IPFS_VERSION}_${TARGETOS:-linux}-${TARGETARCH:-amd64}.tar.gz\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/ipfs/go-ipfs/releases/download/${IPFS_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/go-ipfs-${IPFS_VERSION}\" | sha256sum -c && \\\n  tmpout=$(mktemp -d) && \\\n  tar -C ${tmpout} -xzf \"${fname}\" go-ipfs/ipfs && \\\n  mv ${tmpout}/go-ipfs/ipfs /out/bin/ && \\\n  echo \"- IPFS: ${IPFS_VERSION}\" >> /out/share/doc/nerdctl-full/README.md && rm -rf -d\nARG TINI_VERSION\nRUN fname=\"tini-static-${TARGETARCH:-amd64}\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/tini-${TINI_VERSION}\" | sha256sum -c && \\\n  cp -a \"${fname}\" /out/bin/tini && chmod +x /out/bin/tini && \\\n  echo \"- Tini: ${TINI_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\nARG BUILDG_VERSION\nRUN fname=\"buildg-${BUILDG_VERSION}-${TARGETOS:-linux}-${TARGETARCH:-amd64}.tar.gz\" && \\\n  curl -o \"${fname}\" -fSL \"https://github.com/ktock/buildg/releases/download/${BUILDG_VERSION}/${fname}\" && \\\n  grep \"${fname}\" \"/SHA256SUMS.d/buildg-${BUILDG_VERSION}\" | sha256sum -c && \\\n  tar xzf \"${fname}\" -C /out/bin && \\\n  rm -f \"${fname}\" && \\\n  echo \"- buildg: ${BUILDG_VERSION}\" >> /out/share/doc/nerdctl-full/README.md\n\nRUN echo \"\" >> /out/share/doc/nerdctl-full/README.md && \\\n  echo \"## License\" >> /out/share/doc/nerdctl-full/README.md && \\\n  echo \"- bin/slirp4netns:    [GNU GENERAL PUBLIC LICENSE, Version 2](https://github.com/rootless-containers/slirp4netns/blob/${SLIRP4NETNS_VERSION}/COPYING)\" >> /out/share/doc/nerdctl-full/README.md && \\\n  echo \"- bin/fuse-overlayfs: [GNU GENERAL PUBLIC LICENSE, Version 3](https://github.com/containers/fuse-overlayfs/blob/${FUSE_OVERLAYFS_VERSION}/COPYING)\" >> /out/share/doc/nerdctl-full/README.md && \\\n  echo \"- bin/ipfs: [Combination of MIT-only license and dual MIT/Apache-2.0 license](https://github.com/ipfs/go-ipfs/blob/${IPFS_VERSION}/LICENSE)\" >> /out/share/doc/nerdctl-full/README.md && \\\n  echo \"- bin/{runc,bypass4netns,bypass4netnsd}: Apache License 2.0, statically linked with libseccomp ([LGPL 2.1](https://github.com/seccomp/libseccomp/blob/main/LICENSE), source code available at https://github.com/seccomp/libseccomp/)\" >> /out/share/doc/nerdctl-full/README.md && \\\n  echo \"- bin/tini: [MIT License](https://github.com/krallin/tini/blob/${TINI_VERSION}/LICENSE)\" >> /out/share/doc/nerdctl-full/README.md && \\\n  echo \"- Other files: [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0)\" >> /out/share/doc/nerdctl-full/README.md && \\\n  (cd /out && find ! -type d | sort | xargs sha256sum > /tmp/SHA256SUMS ) && \\\n  mv /tmp/SHA256SUMS /out/share/doc/nerdctl-full/SHA256SUMS && \\\n  chown -R 0:0 /out\n\nFROM scratch AS out-full\nCOPY --from=build-full /out /\n\nFROM ubuntu:${UBUNTU_VERSION} AS base\n# fuse3 is required by stargz snapshotter\nRUN apt-get update && \\\n  apt-get install -qq -y --no-install-recommends \\\n  apparmor \\\n  ca-certificates curl \\\n  iproute2 iptables \\\n  dbus dbus-user-session systemd systemd-sysv \\\n  fuse3 && rm -rf /var/lib/apt/lists/*;\nARG CONTAINERIZED_SYSTEMD_VERSION\nRUN curl -f -L -o /docker-entrypoint.sh https://raw.githubusercontent.com/AkihiroSuda/containerized-systemd/${CONTAINERIZED_SYSTEMD_VERSION}/docker-entrypoint.sh && \\\n  chmod +x /docker-entrypoint.sh\nCOPY --from=out-full / /usr/local/\nRUN perl -pi -e 's/multi-user.target/docker-entrypoint.target/g' /usr/local/lib/systemd/system/*.service && \\\n  systemctl enable containerd buildkit stargz-snapshotter\nCOPY ./Dockerfile.d/etc_containerd_config.toml /etc/containerd/config.toml\nVOLUME /var/lib/containerd\nVOLUME /var/lib/buildkit\nVOLUME /var/lib/containerd-stargz-grpc\nVOLUME /var/lib/nerdctl\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"bash\"]\n\n# convert GO_VERSION=1.16 to the latest release such as \"go1.16.1\"\nFROM golang:${GO_VERSION}-alpine AS goversion\nRUN go env GOVERSION > /GOVERSION\n\nFROM base AS test-integration\nARG DEBIAN_FRONTEND=noninteractive\n# `expect` package contains `unbuffer(1)`, which is used for emulating TTY for testing\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -qq -y \\\n  expect git && rm -rf /var/lib/apt/lists/*;\nCOPY --from=goversion /GOVERSION /GOVERSION\nARG TARGETARCH\nRUN curl -f -L https://golang.org/dl/$(cat /GOVERSION).linux-${TARGETARCH:-amd64}.tar.gz | tar xzvC /usr/local\nENV PATH=/usr/local/go/bin:$PATH\nCOPY . /go/src/github.com/containerd/nerdctl\nWORKDIR /go/src/github.com/containerd/nerdctl\nVOLUME /tmp\nENV CGO_ENABLED=0\n# copy cosign binary for integration test\nCOPY --from=gcr.io/projectsigstore/cosign:v1.3.1@sha256:3cd9b3a866579dc2e0cf2fdea547f4c9a27139276cc373165c26842bc594b8bd /ko-app/cosign /usr/local/bin/cosign\n# enable offline ipfs for integration test\nCOPY ./Dockerfile.d/test-integration-etc_containerd-stargz-grpc_config.toml /etc/containerd-stargz-grpc/config.toml\nCOPY ./Dockerfile.d/test-integration-ipfs-offline.service /usr/local/lib/systemd/system/\nCOPY ./Dockerfile.d/test-integration-buildkit-nerdctl-test.service /usr/local/lib/systemd/system/\nRUN cp /usr/local/bin/tini /usr/local/bin/tini-custom\n# install ipfs service. avoid using 5001(api)/8080(gateway) which are reserved by tests.\nRUN systemctl enable test-integration-ipfs-offline test-integration-buildkit-nerdctl-test && \\\n    ipfs init && \\\n    ipfs config Addresses.API \"/ip4/127.0.0.1/tcp/5888\" && \\\n    ipfs config Addresses.Gateway \"/ip4/127.0.0.1/tcp/5889\"\nCMD [\"go\", \"test\", \"-v\", \"-timeout=20m\", \"./cmd/nerdctl/...\", \"-args\", \"-test.kill-daemon\"]\n\nFROM test-integration AS test-integration-rootless\n# Install SSH for creating systemd user session.\n# (`sudo` does not work for this purpose,\n#  OTOH `machinectl shell` can create the session but does not propagate exit code)\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -qq -y \\\n  uidmap \\\n  openssh-server openssh-client && rm -rf /var/lib/apt/lists/*;\n# TODO: update containerized-systemd to enable sshd by default, or allow `systemctl wants <TARGET> sshd` here\nRUN ssh-keygen -q -t rsa -f /root/.ssh/id_rsa -N '' && \\\n  useradd -m -s /bin/bash rootless && \\\n  mkdir -p -m 0700 /home/rootless/.ssh && \\\n  cp -a /root/.ssh/id_rsa.pub /home/rootless/.ssh/authorized_keys && \\\n  mkdir -p /home/rootless/.local/share && \\\n  chown -R rootless:rootless /home/rootless\nCOPY ./Dockerfile.d/etc_systemd_system_user@.service.d_delegate.conf /etc/systemd/system/user@.service.d/delegate.conf\n# ipfs daemon for rootless containerd will be enabled in /test-integration-rootless.sh\nRUN systemctl disable test-integration-ipfs-offline\nVOLUME /home/rootless/.local/share\nRUN go test -o /usr/local/bin/nerdctl.test -c ./cmd/nerdctl\nCOPY ./Dockerfile.d/test-integration-rootless.sh /\nCMD [\"/test-integration-rootless.sh\", \"nerdctl.test\" ,\"-test.v\", \"-test.timeout=20m\", \"-test.kill-daemon\"]\n\n# test for CONTAINERD_ROOTLESS_ROOTLESSKIT_PORT_DRIVER=slirp4netns\nFROM test-integration-rootless AS test-integration-rootless-port-slirp4netns\nCOPY ./Dockerfile.d/home_rootless_.config_systemd_user_containerd.service.d_port-slirp4netns.conf /home/rootless/.config/systemd/user/containerd.service.d/port-slirp4netns.conf\nRUN chown -R rootless:rootless /home/rootless/.config\n\nFROM base AS demo\n"
}