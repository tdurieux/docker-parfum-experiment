diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/containerd/nerdctl/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/containerd/nerdctl/Dockerfile/repaired.Dockerfile
index fc10cb3..3f7c244 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/containerd/nerdctl/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/containerd/nerdctl/Dockerfile/repaired.Dockerfile
@@ -54,7 +54,7 @@ FROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-bullseye AS build-base-debia
 RUN dpkg --add-architecture arm64 && \
   dpkg --add-architecture amd64 && \
   apt-get update && \
-  apt-get install -y crossbuild-essential-amd64 crossbuild-essential-arm64 git libbtrfs-dev:amd64 libbtrfs-dev:arm64 libseccomp-dev:amd64 libseccomp-dev:arm64
+  apt-get install --no-install-recommends -y crossbuild-essential-amd64 crossbuild-essential-arm64 git libbtrfs-dev:amd64 libbtrfs-dev:arm64 libseccomp-dev:amd64 libseccomp-dev:arm64 && rm -rf /var/lib/apt/lists/*;
 
 FROM build-base-debian AS build-containerd
 ARG CONTAINERD_VERSION
@@ -198,7 +198,7 @@ RUN fname="go-ipfs_${IPFS_VERSION}_${TARGETOS:-linux}-${TARGETARCH:-amd64}.tar.g
   tmpout=$(mktemp -d) && \
   tar -C ${tmpout} -xzf "${fname}" go-ipfs/ipfs && \
   mv ${tmpout}/go-ipfs/ipfs /out/bin/ && \
-  echo "- IPFS: ${IPFS_VERSION}" >> /out/share/doc/nerdctl-full/README.md
+  echo "- IPFS: ${IPFS_VERSION}" >> /out/share/doc/nerdctl-full/README.md && rm -rf -d
 ARG TINI_VERSION
 RUN fname="tini-static-${TARGETARCH:-amd64}" && \
   curl -o "${fname}" -fSL "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/${fname}" && \
@@ -236,9 +236,9 @@ RUN apt-get update && \
   ca-certificates curl \
   iproute2 iptables \
   dbus dbus-user-session systemd systemd-sysv \
-  fuse3
+  fuse3 && rm -rf /var/lib/apt/lists/*;
 ARG CONTAINERIZED_SYSTEMD_VERSION
-RUN curl -L -o /docker-entrypoint.sh https://raw.githubusercontent.com/AkihiroSuda/containerized-systemd/${CONTAINERIZED_SYSTEMD_VERSION}/docker-entrypoint.sh && \
+RUN curl -f -L -o /docker-entrypoint.sh https://raw.githubusercontent.com/AkihiroSuda/containerized-systemd/${CONTAINERIZED_SYSTEMD_VERSION}/docker-entrypoint.sh && \
   chmod +x /docker-entrypoint.sh
 COPY --from=out-full / /usr/local/
 RUN perl -pi -e 's/multi-user.target/docker-entrypoint.target/g' /usr/local/lib/systemd/system/*.service && \
@@ -259,11 +259,11 @@ FROM base AS test-integration
 ARG DEBIAN_FRONTEND=noninteractive
 # `expect` package contains `unbuffer(1)`, which is used for emulating TTY for testing
 RUN apt-get update && \
-  apt-get install -qq -y \
-  expect git
+  apt-get install --no-install-recommends -qq -y \
+  expect git && rm -rf /var/lib/apt/lists/*;
 COPY --from=goversion /GOVERSION /GOVERSION
 ARG TARGETARCH
-RUN curl -L https://golang.org/dl/$(cat /GOVERSION).linux-${TARGETARCH:-amd64}.tar.gz | tar xzvC /usr/local
+RUN curl -f -L https://golang.org/dl/$(cat /GOVERSION).linux-${TARGETARCH:-amd64}.tar.gz | tar xzvC /usr/local
 ENV PATH=/usr/local/go/bin:$PATH
 COPY . /go/src/github.com/containerd/nerdctl
 WORKDIR /go/src/github.com/containerd/nerdctl
@@ -288,9 +288,9 @@ FROM test-integration AS test-integration-rootless
 # (`sudo` does not work for this purpose,
 #  OTOH `machinectl shell` can create the session but does not propagate exit code)
 RUN apt-get update && \
-  apt-get install -qq -y \
+  apt-get install --no-install-recommends -qq -y \
   uidmap \
-  openssh-server openssh-client
+  openssh-server openssh-client && rm -rf /var/lib/apt/lists/*;
 # TODO: update containerized-systemd to enable sshd by default, or allow `systemctl wants <TARGET> sshd` here
 RUN ssh-keygen -q -t rsa -f /root/.ssh/id_rsa -N '' && \
   useradd -m -s /bin/bash rootless && \