{
  "startTime": 1674252354056,
  "endTime": 1674252355901,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 176
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 176
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 166
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 4,
        "columnEnd": 166
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 4,
        "columnEnd": 167
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 25,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 25,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 25,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 25,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 25,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 25,
        "columnEnd": 107
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 25,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 25,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 25,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 25,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 25,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 25,
        "columnEnd": 107
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 25,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 25,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 169,
        "lineEnd": 170,
        "columnStart": 25,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 214,
        "lineEnd": 216,
        "columnStart": 25,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 217,
        "lineEnd": 217,
        "columnStart": 4,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#   Copyright The containerd Authors.\n\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n\n#       http://www.apache.org/licenses/LICENSE-2.0\n\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\nARG CONTAINERD_VERSION=v1.6.6\nARG RUNC_VERSION=v1.1.3\nARG CNI_PLUGINS_VERSION=v1.1.1\nARG NERDCTL_VERSION=0.21.0\n\nARG PODMAN_VERSION=v4.1.1\nARG CRIO_VERSION=v1.24.1\nARG CONMON_VERSION=v2.1.2\nARG COMMON_VERSION=v0.48.0\nARG CRIO_TEST_PAUSE_IMAGE_NAME=k8s.gcr.io/pause:3.6\n\n# Used in CI\nARG CRI_TOOLS_VERSION=v1.24.2\n\n# Legacy builder that doesn't support TARGETARCH should set this explicitly using --build-arg.\n# If TARGETARCH isn't supported by the builder, the default value is \"amd64\".\n\nFROM golang:1.18-bullseye AS golang-base\n\n# Build containerd\nFROM golang-base AS containerd-dev\nARG CONTAINERD_VERSION\nRUN apt-get update -y && apt-get install --no-install-recommends -y libbtrfs-dev libseccomp-dev && \\\n    git clone -b ${CONTAINERD_VERSION} --depth 1 \\\n              https://github.com/containerd/containerd $GOPATH/src/github.com/containerd/containerd && \\\n    cd $GOPATH/src/github.com/containerd/containerd && \\\n    make && DESTDIR=/out/ PREFIX= make install && rm -rf /var/lib/apt/lists/*;\n\n# Build containerd with builtin stargz snapshotter\nFROM golang-base AS containerd-snapshotter-dev\nARG CONTAINERD_VERSION\nCOPY . $GOPATH/src/github.com/containerd/stargz-snapshotter\nRUN apt-get update -y && apt-get install --no-install-recommends -y libbtrfs-dev libseccomp-dev && \\\n    git clone -b ${CONTAINERD_VERSION} --depth 1 \\\n      https://github.com/containerd/containerd $GOPATH/src/github.com/containerd/containerd && \\\n    cd $GOPATH/src/github.com/containerd/containerd && \\\n    echo 'require github.com/containerd/stargz-snapshotter v0.0.0' >> go.mod && \\\n    echo 'replace github.com/containerd/stargz-snapshotter => '$GOPATH'/src/github.com/containerd/stargz-snapshotter' >> go.mod && \\\n    echo 'replace github.com/containerd/stargz-snapshotter/estargz => '$GOPATH'/src/github.com/containerd/stargz-snapshotter/estargz' >> go.mod && \\\n    # recent containerd requires to update api/go.mod and integration/client/go.mod as well.\n    if [ -f api/go.mod ] ; then \\\n      echo 'replace github.com/containerd/stargz-snapshotter => '$GOPATH'/src/github.com/containerd/stargz-snapshotter' >> api/go.mod && \\\n      echo 'replace github.com/containerd/stargz-snapshotter/estargz => '$GOPATH'/src/github.com/containerd/stargz-snapshotter/estargz' >> api/go.mod ; \\\n    fi && \\\n    if [ -f integration/client/go.mod ] ; then \\\n      echo 'replace github.com/containerd/stargz-snapshotter => '$GOPATH'/src/github.com/containerd/stargz-snapshotter' >> integration/client/go.mod && \\\n      echo 'replace github.com/containerd/stargz-snapshotter/estargz => '$GOPATH'/src/github.com/containerd/stargz-snapshotter/estargz' >> integration/client/go.mod ; \\\n    fi && \\\n    echo 'package main \\nimport _ \"github.com/containerd/stargz-snapshotter/service/plugin\"' > cmd/containerd/builtins_stargz_snapshotter.go && \\\n    make vendor && make && DESTDIR=/out/ PREFIX= make install && rm -rf /var/lib/apt/lists/*;\n\n# Build runc\nFROM golang-base AS runc-dev\nARG RUNC_VERSION\nRUN apt-get update -y && apt-get install --no-install-recommends -y libseccomp-dev && \\\n    git clone -b ${RUNC_VERSION} --depth 1 \\\n              https://github.com/opencontainers/runc $GOPATH/src/github.com/opencontainers/runc && \\\n    cd $GOPATH/src/github.com/opencontainers/runc && \\\n    make && make install PREFIX=/out/ && rm -rf /var/lib/apt/lists/*;\n\n# Build stargz snapshotter\nFROM golang-base AS snapshotter-dev\nARG TARGETARCH\nARG GOARM\nARG SNAPSHOTTER_BUILD_FLAGS\nARG CTR_REMOTE_BUILD_FLAGS\nCOPY . $GOPATH/src/github.com/containerd/stargz-snapshotter\nRUN cd $GOPATH/src/github.com/containerd/stargz-snapshotter && \\\n    PREFIX=/out/ GOARCH=${TARGETARCH:-amd64} GO_BUILD_FLAGS=${SNAPSHOTTER_BUILD_FLAGS} make containerd-stargz-grpc && \\\n    PREFIX=/out/ GOARCH=${TARGETARCH:-amd64} GO_BUILD_FLAGS=${CTR_REMOTE_BUILD_FLAGS} make ctr-remote\n\n# Build stargz store\nFROM golang-base AS stargz-store-dev\nARG TARGETARCH\nARG GOARM\nARG SNAPSHOTTER_BUILD_FLAGS\nARG CTR_REMOTE_BUILD_FLAGS\nCOPY . $GOPATH/src/github.com/containerd/stargz-snapshotter\nRUN cd $GOPATH/src/github.com/containerd/stargz-snapshotter && \\\n    PREFIX=/out/ GOARCH=${TARGETARCH:-amd64} GO_BUILD_FLAGS=${SNAPSHOTTER_BUILD_FLAGS} make stargz-store\n\n# Build podman\nFROM golang-base AS podman-dev\nARG PODMAN_VERSION\nRUN apt-get update -y && apt-get install --no-install-recommends -y libseccomp-dev libgpgme-dev && \\\n    git clone https://github.com/containers/podman $GOPATH/src/github.com/containers/podman && \\\n    cd $GOPATH/src/github.com/containers/podman && \\\n    git checkout ${PODMAN_VERSION} && \\\n    make && make install PREFIX=/out/ && rm -rf /var/lib/apt/lists/*;\n\n# Build CRI-O\nFROM golang-base AS cri-o-dev\nARG CRIO_VERSION\nRUN apt-get update -y && apt-get install --no-install-recommends -y libseccomp-dev libgpgme-dev && \\\n    git clone https://github.com/cri-o/cri-o $GOPATH/src/github.com/cri-o/cri-o && \\\n    cd $GOPATH/src/github.com/cri-o/cri-o && \\\n    git checkout ${CRIO_VERSION} && \\\n    make && make install PREFIX=/out/ && \\\n    curl -f -sSL --output /out/crio.service https://raw.githubusercontent.com/cri-o/cri-o/${CRIO_VERSION}/contrib/systemd/crio.service && rm -rf /var/lib/apt/lists/*;\n\n# Build conmon\nFROM golang-base AS conmon-dev\nARG CONMON_VERSION\nRUN apt-get update -y && apt-get install --no-install-recommends -y gcc git libc6-dev libglib2.0-dev pkg-config make libseccomp-dev && \\\n    git clone -b ${CONMON_VERSION} --depth 1 \\\n              https://github.com/containers/conmon $GOPATH/src/github.com/containers/conmon && \\\n    cd $GOPATH/src/github.com/containers/conmon && \\\n    mkdir /out/ && make && make install PREFIX=/out/ && rm -rf /var/lib/apt/lists/*;\n\n# Get seccomp.json for Podman/CRI-O\nFROM golang-base AS containers-common-dev\nARG COMMON_VERSION\nRUN git clone https://github.com/containers/common $GOPATH/src/github.com/containers/common && \\\n    cd $GOPATH/src/github.com/containers/common && \\\n    git checkout ${COMMON_VERSION} && mkdir /out/ && cp pkg/seccomp/seccomp.json /out/\n\n# Binaries for release\nFROM scratch AS release-binaries\nCOPY --from=snapshotter-dev /out/* /\nCOPY --from=stargz-store-dev /out/* /\n\n# Base image which contains containerd with default snapshotter\nFROM golang-base AS containerd-base\nARG TARGETARCH\nARG NERDCTL_VERSION\nRUN apt-get update -y && apt-get --no-install-recommends install -y fuse && \\\n    curl -f -sSL --output /tmp/nerdctl.tgz https://github.com/containerd/nerdctl/releases/download/v${NERDCTL_VERSION}/nerdctl-${NERDCTL_VERSION}-linux-${TARGETARCH:-amd64}.tar.gz && \\\n    tar zxvf /tmp/nerdctl.tgz -C /usr/local/bin && \\\n    rm -f /tmp/nerdctl.tgz && rm -rf /var/lib/apt/lists/*;\nCOPY --from=containerd-dev /out/bin/containerd /out/bin/containerd-shim-runc-v2 /usr/local/bin/\nCOPY --from=runc-dev /out/sbin/* /usr/local/sbin/\n\n# Base image which contains containerd with stargz snapshotter\nFROM containerd-base AS snapshotter-base\nCOPY --from=snapshotter-dev /out/* /usr/local/bin/\nRUN ln -s /usr/local/bin/ctr-remote /usr/local/bin/ctr\n\n# Base image which contains containerd with builtin stargz snapshotter\nFROM golang-base AS containerd-snapshotter-base\nARG TARGETARCH\nARG NERDCTL_VERSION\nRUN apt-get update -y && apt-get --no-install-recommends install -y fuse && \\\n    curl -f -sSL --output /tmp/nerdctl.tgz https://github.com/containerd/nerdctl/releases/download/v${NERDCTL_VERSION}/nerdctl-${NERDCTL_VERSION}-linux-${TARGETARCH:-amd64}.tar.gz && \\\n    tar zxvf /tmp/nerdctl.tgz -C /usr/local/bin && \\\n    rm -f /tmp/nerdctl.tgz && rm -rf /var/lib/apt/lists/*;\nCOPY --from=containerd-snapshotter-dev /out/bin/containerd /out/bin/containerd-shim-runc-v2 /usr/local/bin/\nCOPY --from=runc-dev /out/sbin/* /usr/local/sbin/\nCOPY --from=snapshotter-dev /out/ctr-remote /usr/local/bin/\nRUN ln -s /usr/local/bin/ctr-remote /usr/local/bin/ctr\n\n# Base image which contains podman with stargz-store\nFROM golang-base AS podman-base\nARG TARGETARCH\nARG CNI_PLUGINS_VERSION\nARG PODMAN_VERSION\nRUN apt-get update -y && apt-get --no-install-recommends install -y fuse libgpgme-dev \\\n                         iptables libyajl-dev && \\\n    # Make CNI plugins manipulate iptables instead of nftables\n    # as this test runs in a Docker container that network is configured with iptables.\n    # c.f. https://github.com/moby/moby/issues/26824\n    update-alternatives --set iptables /usr/sbin/iptables-legacy && \\\n    mkdir -p /etc/containers /etc/cni/net.d /opt/cni/bin && \\\n    curl -f -qsSL https://raw.githubusercontent.com/containers/podman/${PODMAN_VERSION}/cni/87-podman-bridge.conflist | tee /etc/cni/net.d/87-podman-bridge.conflist && \\\n    curl -f -Ls https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=podman-dev /out/bin/* /usr/local/bin/\nCOPY --from=runc-dev /out/sbin/* /usr/local/sbin/\nCOPY --from=conmon-dev /out/bin/* /usr/local/bin/\nCOPY --from=containers-common-dev /out/seccomp.json /usr/share/containers/\nCOPY --from=stargz-store-dev /out/* /usr/local/bin/\n\n# Image which can be used for interactive demo environment\nFROM containerd-base AS demo\nARG CNI_PLUGINS_VERSION\nARG TARGETARCH\nRUN apt-get update && apt-get install --no-install-recommends -y iptables && \\\n    # Make CNI plugins manipulate iptables instead of nftables\n    # as this test runs in a Docker container that network is configured with iptables.\n    # c.f. https://github.com/moby/moby/issues/26824\n    update-alternatives --set iptables /usr/sbin/iptables-legacy && \\\n    mkdir -p /opt/cni/bin && \\\n    curl -f -Ls https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin && rm -rf /var/lib/apt/lists/*;\n\n# Image which can be used as a node image for KinD (containerd with builtin snapshotter)\nFROM kindest/node:v1.24.2 AS kind-builtin-snapshotter\n# see https://medium.com/nttlabs/ubuntu-21-10-and-fedora-35-do-not-work-on-docker-20-10-9-1cd439d9921\nADD https://github.com/AkihiroSuda/clone3-workaround/releases/download/v1.0.0/clone3-workaround.x86_64 /clone3-workaround\nRUN chmod 755 /clone3-workaround\nCOPY --from=containerd-snapshotter-dev /out/bin/containerd /out/bin/containerd-shim-runc-v2 /usr/local/bin/\nCOPY --from=snapshotter-dev /out/ctr-remote /usr/local/bin/\nCOPY ./script/config/ /\nRUN /clone3-workaround apt-get update -y && /clone3-workaround apt-get install --no-install-recommends -y fuse\nENTRYPOINT [ \"/usr/local/bin/entrypoint\", \"/sbin/init\" ]\n\n# Image for testing CRI-O with Stargz Store.\n# NOTE: This cannot be used for the node image of KinD.\nFROM ubuntu:22.04 AS crio-stargz-store\nARG CNI_PLUGINS_VERSION\nARG CRIO_TEST_PAUSE_IMAGE_NAME\nENV container docker\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n                         ca-certificates fuse libgpgme-dev libglib2.0-dev curl \\\n                         iptables conntrack systemd systemd-sysv && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y tzdata && \\\n    # Make CNI plugins manipulate iptables instead of nftables\n    # as this test runs in a Docker container that network is configured with iptables.\n    # c.f. https://github.com/moby/moby/issues/26824\n    update-alternatives --set iptables /usr/sbin/iptables-legacy && \\\n    mkdir -p /opt/cni/bin && \\\n    curl -f -sSL https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin && \\\n    echo ${CRIO_TEST_PAUSE_IMAGE_NAME} > /pause_name && \\\n    mkdir -p /etc/sysconfig && \\\n    echo CRIO_RUNTIME_OPTIONS=--pause-image=${CRIO_TEST_PAUSE_IMAGE_NAME} > /etc/sysconfig/crio && \\\n    # Necessary to pass CRI tests: https://github.com/kubernetes-sigs/cri-tools/pull/905\n    mkdir -p /etc/crio/crio.conf.d && \\\n    printf '[crio.runtime]\\nseccomp_use_default_when_empty = false\\n' > /etc/crio/crio.conf.d/02-seccomp.conf && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=stargz-store-dev /out/* /usr/local/bin/\nCOPY --from=cri-o-dev /out/bin/* /usr/local/bin/\nCOPY --from=cri-o-dev /out/crio.service /etc/systemd/system/\nCOPY --from=runc-dev /out/sbin/* /usr/local/sbin/\nCOPY --from=conmon-dev /out/bin/* /usr/local/bin/\nCOPY --from=containers-common-dev /out/seccomp.json /usr/share/containers/\nCOPY ./script/config-cri-o/ /\n\nENTRYPOINT [ \"/usr/local/bin/entrypoint\" ]\n\n# Image which can be used as a node image for KinD\nFROM kindest/node:v1.24.2\n# see https://medium.com/nttlabs/ubuntu-21-10-and-fedora-35-do-not-work-on-docker-20-10-9-1cd439d9921\nADD https://github.com/AkihiroSuda/clone3-workaround/releases/download/v1.0.0/clone3-workaround.x86_64 /clone3-workaround\nRUN chmod 755 /clone3-workaround\nCOPY --from=containerd-dev /out/bin/containerd /out/bin/containerd-shim-runc-v2 /usr/local/bin/\nCOPY --from=snapshotter-dev /out/* /usr/local/bin/\nCOPY ./script/config/ /\nRUN /clone3-workaround apt-get update -y && /clone3-workaround apt-get install --no-install-recommends -y fuse && \\\n    systemctl enable stargz-snapshotter\nENTRYPOINT [ \"/usr/local/bin/entrypoint\", \"/sbin/init\" ]\n"
}