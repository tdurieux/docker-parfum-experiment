diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/containerd/stargz-snapshotter/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/containerd/stargz-snapshotter/Dockerfile/repaired.Dockerfile
index ed6aa64..2707493 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/containerd/stargz-snapshotter/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/containerd/stargz-snapshotter/Dockerfile/repaired.Dockerfile
@@ -34,17 +34,17 @@ FROM golang:1.18-bullseye AS golang-base
 # Build containerd
 FROM golang-base AS containerd-dev
 ARG CONTAINERD_VERSION
-RUN apt-get update -y && apt-get install -y libbtrfs-dev libseccomp-dev && \
+RUN apt-get update -y && apt-get install --no-install-recommends -y libbtrfs-dev libseccomp-dev && \
     git clone -b ${CONTAINERD_VERSION} --depth 1 \
               https://github.com/containerd/containerd $GOPATH/src/github.com/containerd/containerd && \
     cd $GOPATH/src/github.com/containerd/containerd && \
-    make && DESTDIR=/out/ PREFIX= make install
+    make && DESTDIR=/out/ PREFIX= make install && rm -rf /var/lib/apt/lists/*;
 
 # Build containerd with builtin stargz snapshotter
 FROM golang-base AS containerd-snapshotter-dev
 ARG CONTAINERD_VERSION
 COPY . $GOPATH/src/github.com/containerd/stargz-snapshotter
-RUN apt-get update -y && apt-get install -y libbtrfs-dev libseccomp-dev && \
+RUN apt-get update -y && apt-get install --no-install-recommends -y libbtrfs-dev libseccomp-dev && \
     git clone -b ${CONTAINERD_VERSION} --depth 1 \
       https://github.com/containerd/containerd $GOPATH/src/github.com/containerd/containerd && \
     cd $GOPATH/src/github.com/containerd/containerd && \
@@ -61,16 +61,16 @@ RUN apt-get update -y && apt-get install -y libbtrfs-dev libseccomp-dev && \
       echo 'replace github.com/containerd/stargz-snapshotter/estargz => '$GOPATH'/src/github.com/containerd/stargz-snapshotter/estargz' >> integration/client/go.mod ; \
     fi && \
     echo 'package main \nimport _ "github.com/containerd/stargz-snapshotter/service/plugin"' > cmd/containerd/builtins_stargz_snapshotter.go && \
-    make vendor && make && DESTDIR=/out/ PREFIX= make install
+    make vendor && make && DESTDIR=/out/ PREFIX= make install && rm -rf /var/lib/apt/lists/*;
 
 # Build runc
 FROM golang-base AS runc-dev
 ARG RUNC_VERSION
-RUN apt-get update -y && apt-get install -y libseccomp-dev && \
+RUN apt-get update -y && apt-get install --no-install-recommends -y libseccomp-dev && \
     git clone -b ${RUNC_VERSION} --depth 1 \
               https://github.com/opencontainers/runc $GOPATH/src/github.com/opencontainers/runc && \
     cd $GOPATH/src/github.com/opencontainers/runc && \
-    make && make install PREFIX=/out/
+    make && make install PREFIX=/out/ && rm -rf /var/lib/apt/lists/*;
 
 # Build stargz snapshotter
 FROM golang-base AS snapshotter-dev
@@ -96,30 +96,30 @@ RUN cd $GOPATH/src/github.com/containerd/stargz-snapshotter && \
 # Build podman
 FROM golang-base AS podman-dev
 ARG PODMAN_VERSION
-RUN apt-get update -y && apt-get install -y libseccomp-dev libgpgme-dev && \
+RUN apt-get update -y && apt-get install --no-install-recommends -y libseccomp-dev libgpgme-dev && \
     git clone https://github.com/containers/podman $GOPATH/src/github.com/containers/podman && \
     cd $GOPATH/src/github.com/containers/podman && \
     git checkout ${PODMAN_VERSION} && \
-    make && make install PREFIX=/out/
+    make && make install PREFIX=/out/ && rm -rf /var/lib/apt/lists/*;
 
 # Build CRI-O
 FROM golang-base AS cri-o-dev
 ARG CRIO_VERSION
-RUN apt-get update -y && apt-get install -y libseccomp-dev libgpgme-dev && \
+RUN apt-get update -y && apt-get install --no-install-recommends -y libseccomp-dev libgpgme-dev && \
     git clone https://github.com/cri-o/cri-o $GOPATH/src/github.com/cri-o/cri-o && \
     cd $GOPATH/src/github.com/cri-o/cri-o && \
     git checkout ${CRIO_VERSION} && \
     make && make install PREFIX=/out/ && \
-    curl -sSL --output /out/crio.service https://raw.githubusercontent.com/cri-o/cri-o/${CRIO_VERSION}/contrib/systemd/crio.service
+    curl -f -sSL --output /out/crio.service https://raw.githubusercontent.com/cri-o/cri-o/${CRIO_VERSION}/contrib/systemd/crio.service && rm -rf /var/lib/apt/lists/*;
 
 # Build conmon
 FROM golang-base AS conmon-dev
 ARG CONMON_VERSION
-RUN apt-get update -y && apt-get install -y gcc git libc6-dev libglib2.0-dev pkg-config make libseccomp-dev && \
+RUN apt-get update -y && apt-get install --no-install-recommends -y gcc git libc6-dev libglib2.0-dev pkg-config make libseccomp-dev && \
     git clone -b ${CONMON_VERSION} --depth 1 \
               https://github.com/containers/conmon $GOPATH/src/github.com/containers/conmon && \
     cd $GOPATH/src/github.com/containers/conmon && \
-    mkdir /out/ && make && make install PREFIX=/out/
+    mkdir /out/ && make && make install PREFIX=/out/ && rm -rf /var/lib/apt/lists/*;
 
 # Get seccomp.json for Podman/CRI-O
 FROM golang-base AS containers-common-dev
@@ -138,9 +138,9 @@ FROM golang-base AS containerd-base
 ARG TARGETARCH
 ARG NERDCTL_VERSION
 RUN apt-get update -y && apt-get --no-install-recommends install -y fuse && \
-    curl -sSL --output /tmp/nerdctl.tgz https://github.com/containerd/nerdctl/releases/download/v${NERDCTL_VERSION}/nerdctl-${NERDCTL_VERSION}-linux-${TARGETARCH:-amd64}.tar.gz && \
+    curl -f -sSL --output /tmp/nerdctl.tgz https://github.com/containerd/nerdctl/releases/download/v${NERDCTL_VERSION}/nerdctl-${NERDCTL_VERSION}-linux-${TARGETARCH:-amd64}.tar.gz && \
     tar zxvf /tmp/nerdctl.tgz -C /usr/local/bin && \
-    rm -f /tmp/nerdctl.tgz
+    rm -f /tmp/nerdctl.tgz && rm -rf /var/lib/apt/lists/*;
 COPY --from=containerd-dev /out/bin/containerd /out/bin/containerd-shim-runc-v2 /usr/local/bin/
 COPY --from=runc-dev /out/sbin/* /usr/local/sbin/
 
@@ -154,9 +154,9 @@ FROM golang-base AS containerd-snapshotter-base
 ARG TARGETARCH
 ARG NERDCTL_VERSION
 RUN apt-get update -y && apt-get --no-install-recommends install -y fuse && \
-    curl -sSL --output /tmp/nerdctl.tgz https://github.com/containerd/nerdctl/releases/download/v${NERDCTL_VERSION}/nerdctl-${NERDCTL_VERSION}-linux-${TARGETARCH:-amd64}.tar.gz && \
+    curl -f -sSL --output /tmp/nerdctl.tgz https://github.com/containerd/nerdctl/releases/download/v${NERDCTL_VERSION}/nerdctl-${NERDCTL_VERSION}-linux-${TARGETARCH:-amd64}.tar.gz && \
     tar zxvf /tmp/nerdctl.tgz -C /usr/local/bin && \
-    rm -f /tmp/nerdctl.tgz
+    rm -f /tmp/nerdctl.tgz && rm -rf /var/lib/apt/lists/*;
 COPY --from=containerd-snapshotter-dev /out/bin/containerd /out/bin/containerd-shim-runc-v2 /usr/local/bin/
 COPY --from=runc-dev /out/sbin/* /usr/local/sbin/
 COPY --from=snapshotter-dev /out/ctr-remote /usr/local/bin/
@@ -174,8 +174,8 @@ RUN apt-get update -y && apt-get --no-install-recommends install -y fuse libgpgm
     # c.f. https://github.com/moby/moby/issues/26824
     update-alternatives --set iptables /usr/sbin/iptables-legacy && \
     mkdir -p /etc/containers /etc/cni/net.d /opt/cni/bin && \
-    curl -qsSL https://raw.githubusercontent.com/containers/podman/${PODMAN_VERSION}/cni/87-podman-bridge.conflist | tee /etc/cni/net.d/87-podman-bridge.conflist && \
-    curl -Ls https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin
+    curl -f -qsSL https://raw.githubusercontent.com/containers/podman/${PODMAN_VERSION}/cni/87-podman-bridge.conflist | tee /etc/cni/net.d/87-podman-bridge.conflist && \
+    curl -f -Ls https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin && rm -rf /var/lib/apt/lists/*;
 
 COPY --from=podman-dev /out/bin/* /usr/local/bin/
 COPY --from=runc-dev /out/sbin/* /usr/local/sbin/
@@ -187,13 +187,13 @@ COPY --from=stargz-store-dev /out/* /usr/local/bin/
 FROM containerd-base AS demo
 ARG CNI_PLUGINS_VERSION
 ARG TARGETARCH
-RUN apt-get update && apt-get install -y iptables && \
+RUN apt-get update && apt-get install --no-install-recommends -y iptables && \
     # Make CNI plugins manipulate iptables instead of nftables
     # as this test runs in a Docker container that network is configured with iptables.
     # c.f. https://github.com/moby/moby/issues/26824
     update-alternatives --set iptables /usr/sbin/iptables-legacy && \
     mkdir -p /opt/cni/bin && \
-    curl -Ls https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin
+    curl -f -Ls https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin && rm -rf /var/lib/apt/lists/*;
 
 # Image which can be used as a node image for KinD (containerd with builtin snapshotter)
 FROM kindest/node:v1.24.2 AS kind-builtin-snapshotter
@@ -221,13 +221,13 @@ RUN apt-get update -y && apt-get install --no-install-recommends -y \
     # c.f. https://github.com/moby/moby/issues/26824
     update-alternatives --set iptables /usr/sbin/iptables-legacy && \
     mkdir -p /opt/cni/bin && \
-    curl -sSL https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin && \
+    curl -f -sSL https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-${TARGETARCH:-amd64}-${CNI_PLUGINS_VERSION}.tgz | tar xzv -C /opt/cni/bin && \
     echo ${CRIO_TEST_PAUSE_IMAGE_NAME} > /pause_name && \
     mkdir -p /etc/sysconfig && \
     echo CRIO_RUNTIME_OPTIONS=--pause-image=${CRIO_TEST_PAUSE_IMAGE_NAME} > /etc/sysconfig/crio && \
     # Necessary to pass CRI tests: https://github.com/kubernetes-sigs/cri-tools/pull/905
     mkdir -p /etc/crio/crio.conf.d && \
-    printf '[crio.runtime]\nseccomp_use_default_when_empty = false\n' > /etc/crio/crio.conf.d/02-seccomp.conf
+    printf '[crio.runtime]\nseccomp_use_default_when_empty = false\n' > /etc/crio/crio.conf.d/02-seccomp.conf && rm -rf /var/lib/apt/lists/*;
 
 COPY --from=stargz-store-dev /out/* /usr/local/bin/
 COPY --from=cri-o-dev /out/bin/* /usr/local/bin/