{
  "startTime": 1674253728935,
  "endTime": 1674253729748,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 1,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 1,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ornladios/adios2:ci-fedora-sanitizers-base\n\n# Set up some arguments\nONBUILD ARG INSTALL_PREFIX\nONBUILD ARG TOOLCHAIN_FILE\nONBUILD ARG CFLAGS\nONBUILD ARG CXXFLAGS\nONBUILD ARG LLVM_USE_SANITIZER\n\n# Build and install libc++\n# Have to build in debug mode due to a bug in LLVM:\n# https://bugs.llvm.org/show_bug.cgi?id=44586\nONBUILD WORKDIR /root/llvm\nONBUILD RUN git clone --branch llvmorg-9.0.0 --depth 1 \\\n        https://github.com/llvm/llvm-project.git source && \\\n    mkdir -p build && \\\n    cd build && \\\n    /opt/cmake/bin/cmake \\\n        -GNinja \\\n        -DCMAKE_BUILD_TYPE=Debug \\\n        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \\\n        -DCMAKE_C_COMPILER=/usr/bin/clang \\\n        -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \\\n        -DLLVM_ENABLE_PROJECTS=\"libcxx;libcxxabi\" \\\n        -DLLVM_USE_SANITIZER=${LLVM_USE_SANITIZER} \\\n        ../source/llvm && \\\n    ninja install-cxxabi install-cxx\n\n# Copy in the toolchain\nONBUILD COPY \\\n    ${TOOLCHAIN_FILE} \\\n    ${INSTALL_PREFIX}/toolchain.cmake\n\n# Build and install zlib\nONBUILD WORKDIR /root/zlib\nONBUILD RUN git clone --branch v1.2.11 --depth 1 \\\n        https://github.com/madler/zlib.git source && \\\n    mkdir -p build && \\\n    cd build && \\\n    /opt/cmake/bin/cmake \\\n        -GNinja \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_TOOLCHAIN_FILE=${INSTALL_PREFIX}/toolchain.cmake \\\n        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \\\n        ../source && \\\n    ninja install\n\n# Build and install bzip2\nONBUILD WORKDIR /root/bzip2\nONBUILD RUN git clone --branch bzip2-1.0.8 \\\n        https://sourceware.org/git/bzip2.git source && \\\n    cd source && \\\n    sed -e \"s_^CC=.*\\$_CC=/usr/bin/clang_\" \\\n        -e \"s_^CFLAGS=.*\\$_CFLAGS=-fpic -fPIC -Wall -Winline -O2 ${CFLAGS} \\$(BIGFILES)_\" \\\n        -i Makefile-libbz2_so && \\\n    make -f Makefile-libbz2_so && \\\n    sed -e \"s_^CC=.*\\$_CC=/usr/bin/clang_\" \\\n        -e \"s_^PREFIX=.*\\$_PREFIX=${INSTALL_PREFIX}_\" \\\n        -e \"s_^CFLAGS=.*\\$_CFLAGS=-Wall -Winline -O2 ${CFLAGS} \\$(BIGFILES)_\" \\\n        -i Makefile && \\\n    make install && \\\n    install libbz2.so.1.0.8 ${INSTALL_PREFIX}/lib && \\\n    ln -s -T libbz2.so.1.0.8 ${INSTALL_PREFIX}/lib/libbz2.so.1.0 && \\\n    ln -s -T libbz2.so.1.0 ${INSTALL_PREFIX}/lib/libbz2.so\n\n# Build and install zeromq\nONBUILD WORKDIR /root/zeromq\nONBUILD RUN git clone --branch v4.3.2 \\\n        https://github.com/zeromq/libzmq.git source && \\\n    mkdir -p build && \\\n    cd build && \\\n    /opt/cmake/bin/cmake \\\n        -GNinja \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_TOOLCHAIN_FILE=${INSTALL_PREFIX}/toolchain.cmake \\\n        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \\\n        ../source && \\\n    ninja install\n\n# Build and install libpng\nONBUILD WORKDIR /root/libpng\nONBUILD RUN git clone --branch v1.6.9 \\\n        https://git.code.sf.net/p/libpng/code.git source && \\\n    mkdir -p build && \\\n    cd build && \\\n    /opt/cmake/bin/cmake \\\n        -GNinja \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_TOOLCHAIN_FILE=${INSTALL_PREFIX}/toolchain.cmake \\\n        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \\\n        ../source && \\\n    ninja install\n\n# Build and install hdf5\nONBUILD WORKDIR /root/hdf5\nONBUILD RUN git clone --branch hdf5-1_10_6 \\\n        https://bitbucket.hdfgroup.org/scm/hdffv/hdf5.git source && \\\n    mkdir -p build && \\\n    cd build && \\\n    /opt/cmake/bin/cmake \\\n        -GNinja \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_TOOLCHAIN_FILE=${INSTALL_PREFIX}/toolchain.cmake \\\n        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \\\n        ../source && \\\n    ninja install\n\n# Build and install blosc\nONBUILD WORKDIR /root/blosc\nONBUILD RUN git clone --branch v1.17.1 \\\n        https://github.com/Blosc/c-blosc.git source && \\\n    mkdir -p build && \\\n    cd build && \\\n    /opt/cmake/bin/cmake \\\n        -GNinja \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_TOOLCHAIN_FILE=${INSTALL_PREFIX}/toolchain.cmake \\\n        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \\\n        ../source && \\\n    ninja install\n\n# Build and install libfabric\nONBUILD WORKDIR /root/libfabric\n \\\nRUN mkdir -p source build && \\\n    curl -f -L \\\n        https://github.com/ofiwg/libfabric/releases/download/v1.9.0/libfabric-1.9.0.tar.bz2 | \\\n    tar -C source -xj --strip-components=1 && \\\n    cd build && \\\n    ../source/configure \\\n        --prefix=${INSTALL_PREFIX} \\\n        CC=\"/usr/bin/clang ${CFLAGS} -L${INSTALL_PREFIX}/lib -Wl,-rpath,${INSTALL_PREFIX}/lib -Wno-unused-command-line-argument\" \\\n        CXX=\"/usr/bin/clang++ ${CXXFLAGS} -L${INSTALL_PREFIX}/lib -Wl,-rpath,${INSTALL_PREFIX}/lib -Wno-unused-command-line-argument -nostdinc++ -isystem ${INSTALL_PREFIX}/include/c++/v1 -stdlib=libc++\" && \\\n    make -j4 installONBUILD\n\n\n\n\n\n\n\n\n\n\n# Build and install libffi\nONBUILD WORKDIR /root/libffi\n \\\nRUN mkdir -p source build && \\\n    curl -f -L \\\n        https://github.com/libffi/libffi/releases/download/v3.3/libffi-3.3.tar.gz | \\\n    tar -C source -xz --strip-components=1 && \\\n    cd build && \\\n    ../source/configure \\\n        --prefix=${INSTALL_PREFIX} \\\n        CC=\"/usr/bin/clang ${CFLAGS} -L${INSTALL_PREFIX}/lib -Wl,-rpath,${INSTALL_PREFIX}/lib -Wno-unused-command-line-argument\" \\\n        CXX=\"/usr/bin/clang++ ${CXXFLAGS} -L${INSTALL_PREFIX}/lib -Wl,-rpath,${INSTALL_PREFIX}/lib -Wno-unused-command-line-argument -nostdinc++ -isystem ${INSTALL_PREFIX}/include/c++/v1 -stdlib=libc++\" && \\\n    make -j4 installONBUILD\n\n\n\n\n\n\n\n\n\n"
}