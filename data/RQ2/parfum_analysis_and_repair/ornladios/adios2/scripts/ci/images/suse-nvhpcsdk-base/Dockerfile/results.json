{
  "startTime": 1674216532779,
  "endTime": 1674216534429,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 42,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM opensuse/leap:15.2\n\n# Install core dev packages\nRUN zypper addrepo -fc https://download.opensuse.org/repositories/devel:/tools:/scm/openSUSE_Leap_15.2/devel:tools:scm.repo\nRUN zypper --gpg-auto-import-keys ref\nRUN zypper in -y gcc gcc-c++ gcc-fortran git make curl tar f2c glibc-locale \\\n  glibc-devel libbz2-devel pkg-config zeromq-devel zlib-devel gdb vim valgrind \\\n  bzip2 gzip blosc-devel libzstd-devel libopenssl-devel Modules\n\n# Workaround so pgi can find g77\nWORKDIR /usr/bin\nRUN ln -s gfortran g77\n\n# Install NVidia HPC SDK\nWORKDIR /tmp/nvhpcsdk-install\nCOPY nvhpc_2020_209_Linux_x86_64_cuda_11.0.tar.gz .\nRUN tar -xzf nvhpc_2020_209_Linux_x86_64_cuda_11.0.tar.gz && \\\n    cd nvhpc_2020_209_Linux_x86_64_cuda_11.0 && \\\n    export \\\n      NVHPC_SILENT=true \\\n      NVHPC_INSTALL_DIR=/opt/nvidia/hpc_sdk \\\n      NVHPC_INSTALL_TYPE=single && \\\n    ./install && \\\n    echo 'export MODULEPATH=/opt/nvidia/hpc_sdk/modulefiles:${MODULEPATH}' > /etc/profile.d/nvhpc-modules.sh && \\\n    echo 'setenv MODULEPATH /opt/nvidia/hpc_sdk/modulefiles:${MODULEPATH}' > /etc/profile.d/pgi-modules.csh && rm nvhpc_2020_209_Linux_x86_64_cuda_11.0.tar.gz\n\n# Remove all the CUDA components since we don't need them for CI images\nWORKDIR /opt/nvidia/hpc_sdk\nRUN rm -rf \\\n        Linux_x86_64/2020 \\\n        Linux_x86_64/20.9/cuda \\\n        Linux_x86_64/20.9/math \\\n        Linux_x86_64/20.9/profilers \\\n        Linux_x86_64/20.9/examples \\\n        Linux_x86_64/20.9/REDIST \\\n        modulefiles/nvhpc-byo-compiler && \\\n    sed -e '/cuda/d' -e '/math/d' -i modulefiles/*/*\n\n# Install the most recent CMake nightly binary\nWORKDIR /opt/cmake\nRUN curl -f -L https://cmake.org/files/dev/$( curl -f https://cmake.org/files/dev/ | sed -n '/Linux-x86_64.tar.gz/s/.*>\\(cmake[^<]*\\)<.*/\\1/p' | sort | tail -1) | tar --strip-components=1 -xzv\nENV PATH=/opt/cmake/bin:${PATH}\n\n# Install ZFP\n# Note that ZFP needs to be built with GCC at the moment as the results\n# are broken when built with PGI\nWORKDIR /opt/zfp\nRUN curl -f -L https://github.com/LLNL/zfp/releases/download/0.5.5/zfp-0.5.5.tar.gz | tar -xvz && \\\n    mkdir build && \\\n    cd build && \\\n    /opt/cmake/bin/cmake \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/opt/zfp/0.5.5 \\\n        ../zfp-0.5.5 && \\\n    make -j$(grep -c '^processor' /proc/cpuinfo) install && \\\n    cd .. && \\\n    rm -rf zfp-0.5.5 build\nENV PATH=/opt/zfp/0.5.5/bin:${PATH} \\\n    LD_LIBRARY_PATH=/opt/zfp/0.5.5/lib64:${LD_LIBRARY_PATH} \\\n    CMAKE_PREFIX_PATH=/opt/zfp/0.5.5:${CMAKE_PREFIX_PATH}\n\n# Install SZ\nWORKDIR /opt/sz\nRUN curl -f -L https://github.com/szcompressor/SZ/releases/download/v2.1.11/SZ-2.1.11.tar.gz | tar -xvz && \\\n    mkdir build && \\\n    cd build && \\\n    source /etc/profile && \\\n    module load nvhpc-nompi && \\\n    /opt/cmake/bin/cmake \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/opt/sz/2.1.11 \\\n         ../SZ-2.1.11 && \\\n    make -j$(grep -c '^processor' /proc/cpuinfo) install && \\\n    cd .. && \\\n    rm -rf SZ-2.1.11 build\nENV PATH=/opt/sz/2.1.11/bin:${PATH} \\\n    LD_LIBRARY_PATH=/opt/sz/2.1.11/lib64:${LD_LIBRARY_PATH} \\\n    CMAKE_PREFIX_PATH=/opt/sz/2.1.11:${CMAKE_PREFIX_PATH}\n\n# Misc cleanup of unneeded files\nRUN rm -rf /tmp/* && \\\n    zypper clean\n"
}