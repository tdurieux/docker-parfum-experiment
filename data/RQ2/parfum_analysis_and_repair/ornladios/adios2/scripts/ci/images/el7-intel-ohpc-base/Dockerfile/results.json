{
  "startTime": 1674220571117,
  "endTime": 1674220572390,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 50,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n# READ THIS FIRST!!!!!\n################################################################################\n# It is extremly important that this image be squashed before pushing using\n# either docker build --squash, docker-squash, or some other mechanism.  The\n# last step in this image build removes the various compiler installer\n# artifacts, including the license file.  Failure to squash the image will\n# result in the license file being present within the layers of the final image.\n#\n# For the compiler to run successfully in this image, the license file needs to\n# be populated before running.  To achieve this on a public CI service:\n#\n#   1.  Create a secret variable INTEL_LICENSE_FILE_CONTENT\n#   2.  Set the value of the variable of the base64 encoded content of\n#       the license file.  You can get this from the following:\n#         $ base64 -w0 /path/to/license.lic\n#   3.  Create a step in the build before anything else is run that sets up the\n#       the license file from the secret variable:\n#         mkdir -p /opt/intel/licenses\n#         echo \"$INTEL_LICENSE_FILE_CONTENT\" | base64 -d | sudo tee /opt/intel/licenses/license.lic > /dev/null\n#\n# The following build arguments can be passed:\n#   LICENSE_FILE - The name of the license file in the build directory\n#   INTEL_VERSION - The compiler version to use for installer files in the\n#     build directory.  For example, a value of 2019_update6 would copy and\n#     install:\n#       parallel_studio_xe_2019_update6_composer_edition_for_cpp.tgz\n#       parallel_studio_xe_2019_update6_composer_edition_for_fortran.tgz\n#\n################################################################################\n\nFROM ornladios/adios2:ci-el7-base\n\n# Install Intel C++ and Fortran compilers\nARG LICENSE_FILE=CI.lic\nARG INTEL_VERSION=2020_update2\nWORKDIR /tmp\nCOPY ${LICENSE_FILE} /opt/intel/licenses/license.lic\nCOPY silent-cpp.cfg /tmp\nCOPY silent-fortran.cfg /tmp\nCOPY parallel_studio_xe_${INTEL_VERSION}_composer_edition_for_cpp.tgz /tmp/\nCOPY parallel_studio_xe_${INTEL_VERSION}_composer_edition_for_fortran.tgz /tmp/\nRUN tar -xzf parallel_studio_xe_${INTEL_VERSION}_composer_edition_for_cpp.tgz && \\\n    ./parallel_studio_xe_${INTEL_VERSION}_composer_edition_for_cpp/install.sh -s ./silent-cpp.cfg && \\\n    tar -xzf parallel_studio_xe_${INTEL_VERSION}_composer_edition_for_fortran.tgz && \\\n    ./parallel_studio_xe_${INTEL_VERSION}_composer_edition_for_fortran/install.sh -s ./silent-fortran.cfg && rm parallel_studio_xe_${INTEL_VERSION}_composer_edition_for_cpp.tgz\n\n# Install OpenHPC packages\nRUN yum install -y /tmp/*_for_cpp/rpm/intel-{comp,ps}xe-doc-*.rpm && \\\n    yum -y install https://github.com/openhpc/ohpc/releases/download/v1.3.GA/ohpc-release-1.3-1.el7.x86_64.rpm && \\\n    yum -y install lmod-ohpc intel-compilers-devel-ohpc \\\n        python3-numpy-intel-ohpc && \\\n    sed 's|python3\\.4|python3.6|g' -i /opt/ohpc/pub/moduledeps/*/py3-numpy/* && rm -rf /var/cache/yum\n\n# Install ZFP\nWORKDIR /opt/zfp\nRUN curl -f -L https://github.com/LLNL/zfp/releases/download/0.5.5/zfp-0.5.5.tar.gz | tar -xvz && \\\n    mkdir build && \\\n    cd build && \\\n    source /etc/profile && \\\n    module load intel && \\\n    export CC=icc CXX=icpc FC=ifort && \\\n    cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/zfp/0.5.5 ../zfp-0.5.5 && \\\n    make -j$(grep -c '^processor' /proc/cpuinfo) install && \\\n    cd .. && \\\n    rm -rf zfp-0.5.5 build\nENV PATH=/opt/zfp/0.5.5/bin:${PATH} \\\n    LD_LIBRARY_PATH=/opt/zfp/0.5.5/lib64:${LD_LIBRARY_PATH} \\\n    CMAKE_PREFIX_PATH=/opt/zfp/0.5.5:${CMAKE_PREFIX_PATH}\n\n# Install SZ\nWORKDIR /opt/sz\nRUN curl -f -L https://github.com/disheng222/SZ/archive/v2.1.8.3.tar.gz | tar -xvz && \\\n    mkdir build && \\\n    cd build && \\\n    source /etc/profile && \\\n    module load intel && \\\n    export CC=icc CXX=icpc FC=ifort && \\\n    cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/sz/2.1.8.3 ../SZ-2.1.8.3 && \\\n    make -j$(grep -c '^processor' /proc/cpuinfo) install && \\\n    cd .. && \\\n    rm -rf SZ-2.1.8.3 build\nENV PATH=/opt/sz/2.1.8.3/bin:${PATH} \\\n    LD_LIBRARY_PATH=/opt/sz/2.1.8.3/lib64:${LD_LIBRARY_PATH} \\\n    CMAKE_PREFIX_PATH=/opt/sz/2.1.8.3:${CMAKE_PREFIX_PATH}\n\n# Misc cleanup of unneeded files\nRUN rm -rfv \\\n        /tmp/* \\\n        /opt/intel/licenses/* \\\n        /opt/intel/man \\\n        /opt/intel/documentation_* \\\n        /opt/intel/ide_support_* \\\n        /opt/intel/samples_* \\\n        /opt/intel/compilers_and_libraries_*.*.*/linux/mkl/benchmarks \\\n        /opt/intel/compilers_and_libraries_*.*.*/linux/mkl/examples \\\n        /var/cache/yum\n"
}