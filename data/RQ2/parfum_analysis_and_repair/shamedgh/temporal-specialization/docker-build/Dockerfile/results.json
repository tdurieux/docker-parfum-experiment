{
  "startTime": 1674248683285,
  "endTime": 1674248684209,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 177
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu\n\nENV NUM_CORES 8\nENV ROOT /debloating-vol\nENV GIT_REPO temporal-specialization-artifacts\nENV GIT_REPO_URL https://github.com/shamedgh/temporal-specialization-artifacts.git\n\n# Override these when launching the container\nENV BC my_bitcode\nENV ENTRY my_func\n\n\nRUN mkdir $ROOT\n\nRUN apt-get update\n\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get --no-install-recommends install -y libedit-dev libncurses5-dev python-dev cmake build-essential libncurses5-dev python-dev cmake git && rm -rf /var/lib/apt/lists/*;\n\nRUN apt install --no-install-recommends -y vim python3 && rm -rf /var/lib/apt/lists/*;\n\n# Clone the repo\nWORKDIR $ROOT\nRUN git clone $GIT_REPO_URL\nWORKDIR $ROOT/$GIT_REPO\n\n# Build LLVM\nRUN tar -Jxvf llvm-7.0.0.src.wclang.tar.xz && rm llvm-7.0.0.src.wclang.tar.xz\nRUN mkdir $ROOT/install\nRUN mkdir $ROOT/$GIT_REPO/llvm-7.0.0.src/build\nWORKDIR $ROOT/$GIT_REPO/llvm-7.0.0.src/build\nRUN cmake -G \"Unix Makefiles\" -DLLVM_TARGETS_TO_BUILD=\"X86\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$ROOT/install ../\nRUN make -j $NUM_CORES && make install/strip\n\n# Build SVF\nENV LLVM_DIR=$ROOT/install/bin\nENV PATH=$LLVM_DIR/:$PATH\n\nWORKDIR $ROOT/$GIT_REPO/SVF\nRUN ./build.sh\nWORKDIR $ROOT/$GIT_REPO/SVF/Release-build\nRUN cp $ROOT/$GIT_REPO/SVF/Release-build/bin/* /usr/bin/\n\n# Copy the parameterized run.sh into the container\nWORKDIR $ROOT/$GIT_REPO\nCOPY run.sh $ROOT/$GIT_REPO\n# And the spin.sh -- this will ensure the container doesn't exit\nCOPY spin.sh $ROOT/$GIT_REPO\nRUN chmod u+x run.sh\nRUN chmod u+x spin.sh\nRUN git pull\n\n#CMD ./run.sh $BC $ENTRY\nCMD ./spin.sh\n"
}