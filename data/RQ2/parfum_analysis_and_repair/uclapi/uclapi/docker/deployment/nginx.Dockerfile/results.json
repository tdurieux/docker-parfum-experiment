{
  "startTime": 1674250879234,
  "endTime": 1674250880053,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 33,
        "columnEnd": 67
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 79
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 103
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n#################################\n#### Control versioning here ####\n#################################\n\n# Nginx build version\n# latest will get the LATEST_BUILD file and download the file referenced there.\n# Other values will download the tar.gz from the bucket.\nARG NGINX_BUILD\nARG ENVIRONMENT\n\nENV NGINX_BUILD ${NGINX_BUILD}\nENV ENVIRONMENT ${ENVIRONMENT}\n\nENV DEBIAN_FRONTEND=\"noninteractive\" TZ=\"Europe/London\"\n\n#################################\n######## Main Parameters ########\n#################################\nENV AWS_BUCKET uclapi-dist\n\n#################################\n########### Let's go! ###########\n#################################\nRUN apt-get update && \\\n    apt-get -y upgrade && \\\n    apt-get install --no-install-recommends -y wget \\\n                       curl \\\n                       supervisor \\\n                       libgeoip1 \\\n                       libgnutls30 \\\n                       zlib1g \\\n                       libpcre3 \\\n                       geoip-bin \\\n                       geoip-database \\\n                       sed \\\n                       git \\\n                       gnupg && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Installing Certbot\nRUN apt-get install --no-install-recommends -y python3 python3-dev libffi7 libffi-dev libssl-dev curl build-essential procps && \\\n    curl -f -L 'https://bootstrap.pypa.io/get-pip.py' | python3 && \\\n    pip install --no-cache-dir -U cffi certbot && \\\n    apt-get remove --purge -y python3-dev build-essential libffi-dev libssl-dev && \\\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Installing Nginx\nENV NGINX_AWS_URL https://${AWS_BUCKET}.s3.amazonaws.com/nginx\n\nRUN if [ \"$NGINX_BUILD\" = \"latest\" ]; \\\n        then \\\n        export NGINX_BUILD=$( curl -f ${NGINX_AWS_URL}/LATEST_BUILD); \\\n    fi; \\\n    export NGINX_AWS_URL=${NGINX_AWS_URL}/${NGINX_BUILD}; \\\n    echo -n \"Using Nginx Build: \"; \\\n    echo ${NGINX_BUILD}; \\\n    echo -n \"URL: \"; \\\n    echo ${NGINX_AWS_URL}; \\\n    mkdir -p /usr/local/nginx && \\\n    wget \"${NGINX_AWS_URL}\" -O - | tar zxvf - -C /usr/local/nginx/\n\nCOPY ./nginx/nginx-conf/* /usr/local/nginx/conf/\nRUN mkdir /usr/local/nginx/conf/conf.d\nCOPY ./nginx/nginx-conf/conf.d/* /usr/local/nginx/conf/conf.d/\n\nRUN if [ ${ENVIRONMENT} = \"production\" ]; \\\n    then sed -i -e 's/SERVER_NAME_HERE/uclapi\\.com/' /usr/local/nginx/conf/conf.d/nginx.conf; \\\n    else sed -i -e 's/SERVER_NAME_HERE/staging\\.ninja/' /usr/local/nginx/conf/conf.d/nginx.conf; \\\n    fi\n\n# Set up the SWITCH respository to get Shibboleth SP 3\nRUN wget https://pkg.switch.ch/switchaai/SWITCHaai-swdistrib.asc && \\\n    VERIFY_CHECKSUM=`shasum -a 256 SWITCHaai-swdistrib.asc | head -n1 | awk '{print $1;}'` && \\\n    echo $VERIFY_CHECKSUM && \\\n    if [ \"$VERIFY_CHECKSUM\" != \"67f733e2cdb248e96275546146ea2997b6d0c0575c9a37cb66e00d6012a51f68\" ]; then exit 1; fi; \\\n    apt-key add SWITCHaai-swdistrib.asc && \\\n    rm SWITCHaai-swdistrib.asc && \\\n    echo 'deb http://pkg.switch.ch/switchaai/ubuntu bionic main' | tee /etc/apt/sources.list.d/SWITCHaai-swdistrib.list > /dev/null && \\\n    apt-get update\n\nRUN mkdir -p /web/favicons && \\\n    mkdir /web/internal-cert && \\\n    git clone https://github.com/uclapi/branding uclapi-branding && \\\n    cp -Rav uclapi-branding/favicons/* /web/favicons && \\\n    rm -rf uclapi-branding\n\nRUN if [ ${ENVIRONMENT} = \"production\" ]; \\\n    then openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /web/internal-cert/key.pem \\\n-out /web/internal-cert/cert.pem -subj \"/C=GB/ST=London/L=London/O=DevOps/OU=Production/CN=uclapi.com\"; \\\n    else openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /web/internal-cert/key.pem \\\n-out /web/internal-cert/cert.pem -subj \"/C=GB/ST=London/L=London/O=DevOps/OU=Staging/CN=staging.ninja\"; \\\n    fi\n\nRUN apt-get -y --no-install-recommends install shibboleth-sp-common shibboleth-sp-utils odbc-postgresql && \\\n    apt-get clean && \\\n    rm -rf /etc/shibboleth/* && rm -rf /var/lib/apt/lists/*;\n\nCOPY ./non-public/${ENVIRONMENT}/Shibboleth/* /etc/shibboleth/\n\nARG POSTGRES_DATABASE\nARG POSTGRES_USERNAME\nARG POSTGRES_PASSWORD\n\nENV POSTGRES_DATABASE ${POSTGRES_DATABASE}\nENV POSTGRES_USERNAME ${POSTGRES_USERNAME}\nENV POSTGRES_PASSWORD ${POSTGRES_PASSWORD}\n\nRUN echo -n \"Setting up PostgreSQL Credentials with username: \" && echo ${POSTGRES_USERNAME}\n\nRUN if [ -z \"${POSTGRES_USERNAME}\" ]; then echo \"POSTGRES VARS NOT SET\"; exit 2; fi\n\nENV ODBC_CONNECTION_STRING Driver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbca.so;Server=shibpostgres;Port=5432;Database=${POSTGRES_DATABASE};Uid=${POSTGRES_USERNAME};Password=${POSTGRES_PASSWORD}\n\nRUN sed -i -e 's@ODBC_CONNECTION_STRING@'\"${ODBC_CONNECTION_STRING}\"'@' /etc/shibboleth/shibboleth2.xml\n\nCOPY ./nginx/supervisor-conf/supervisord.conf /etc/supervisor/supervisord.conf\nCOPY ./nginx/supervisor-conf/shib.conf        /etc/supervisor/conf.d/\nCOPY ./nginx/supervisor-conf/nginx.conf       /etc/supervisor/conf.d/\n\nRUN mkdir -p /var/run/shibboleth\nRUN mkdir -p /var/www/letsencrypt\n\nCOPY ./nginx/run.sh ./run.sh\nCOPY ./nginx/util.sh ./util.sh\nCOPY ./nginx/run-certbot.sh ./run-certbot.sh\nRUN chmod +x ./run.sh ./util.sh ./run-certbot.sh\n\nARG VERSION\nENV VERSION ${VERSION}\nRUN echo -n \"Injecting version number: \" && echo ${VERSION}\nRUN sed -i -e \"s/VERSION_NUMBER_HERE/${VERSION}/\" /usr/local/nginx/conf/conf.d/certbot.conf\nRUN sed -i -e \"s/VERSION_NUMBER_HERE/${VERSION}/\" /usr/local/nginx/conf/conf.d/nginx.conf\n\nCMD [\"bash\", \"run.sh\"]\n"
}