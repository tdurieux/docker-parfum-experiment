{
  "startTime": 1674251491004,
  "endTime": 1674251492158,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 2,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Fetch ubuntu 14.04 LTS docker image\nFROM ubuntu:14.04\n\n# Install Java on your ubuntu image.\nRUN \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y openjdk-7-jdk && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Make a directory where your files will be stored\nRUN mkdir /grader\nRUN mkdir /grader/FactoringGrader\n\n# Below commands copy the files that you need to put in your docker image\n\nCOPY executeGrader.sh /grader/executeGrader.sh\nCOPY Grader.java /grader/Grader.java\n\n# Copy files for Factoring Grader\nCOPY FactoringGrader/* /grader/FactoringGrader/\n\n# Important: Docker images are run without root access on our platforms. Its important to setup permissions accordingly.\n# Executable permissions: Required to execute executeGrader.sh\n# Read permissions: Required to read testCases.txt, solution.txt, Grader.java\n# Write permissions: Required to store the compiled java files\nRUN chmod a+rwx -R /grader/\n\n# Setup the command that will be invoked when your docker image is run.\nENTRYPOINT [\"./grader/executeGrader.sh\"]\n\n# While running the graders in production, Coursera passes several command line arguments to the ENTRYPOINT command\n# in no particular order. For local testing, the below commands can be used in place of the above ENTRYPOINT command\n# to simulate passing command line arguments to executeGrader.sh.\n# More details about these Coursera supplied command line parameters can be found in executeGrader.sh.\n\n# Command to simulate Factoring Grader:\n#ENTRYPOINT [\"./grader/executeGrader.sh\", \"partId\", \"HxbKF\"]\n"
}