{
  "startTime": 1674255381155,
  "endTime": 1674255382613,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ignition Version\nARG IGNITION_VERSION=\"7.9.20\"\n\nFROM ubuntu:22.04 AS downloader\nLABEL maintainer \"Kevin Collins <kcollins@purelinux.net>\"\nARG IGNITION_VERSION\n\n# Install some prerequisite packages\nRUN apt-get update && apt-get install --no-install-recommends -y wget unzip && rm -rf /var/lib/apt/lists/*;\n\n# Ignition Downloader Parameters\nARG IGNITION_FULL_AMD64_DOWNLOAD_URL=\"https://files.inductiveautomation.com/release/ia/build7.9.20/20220512-1016/zip-installers/Ignition-linux-64-7.9.20.zip\"\nARG IGNITION_FULL_AMD64_DOWNLOAD_SHA256=\"d5d55019ae84dea956c2b99603642e2e16834cc7bdaa0ac3f55bc0ae0d83b194\"\nARG IGNITION_EDGE_AMD64_DOWNLOAD_URL=\"https://files.inductiveautomation.com/release/ia/build7.9.20/20220512-1016/zip-installers/Ignition-linux-64-7.9.20.zip\"\nARG IGNITION_EDGE_AMD64_DOWNLOAD_SHA256=\"d5d55019ae84dea956c2b99603642e2e16834cc7bdaa0ac3f55bc0ae0d83b194\"\nARG IGNITION_AMD64_JRE_SUFFIX=\"nix\"\n\nARG IGNITION_FULL_ARMHF_DOWNLOAD_URL=\"https://files.inductiveautomation.com/release/ia/build7.9.20/20220512-1016/zip-installers/Ignition-linux-armhf-7.9.20.zip\"\nARG IGNITION_FULL_ARMHF_DOWNLOAD_SHA256=\"aa8cfd764b039a888bba044f720aba8857f5f686b71ffeb677b43bdf59e42eb3\"\nARG IGNITION_EDGE_ARMHF_DOWNLOAD_URL=\"https://files.inductiveautomation.com/release/ia/build7.9.20/20220512-1016/zip-installers/Ignition-Edge-linux-armhf-7.9.20.zip\"\nARG IGNITION_EDGE_ARMHF_DOWNLOAD_SHA256=\"c828d8c0a3a2e8c572caa2791ba55f9a4acad02f6f738a8a77550b6c5ee6dc6d\"\nARG IGNITION_ARMHF_JRE_SUFFIX=\"arm32hf\"\n\n# gosu Download Parameters\nARG GOSU_VERSION=\"1.14\"\nARG GOSU_AMD64_DOWNLOAD_URL=\"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\"\nARG GOSU_AMD64_DOWNLOAD_SHA256=\"bd8be776e97ec2b911190a82d9ab3fa6c013ae6d3121eea3d0bfd5c82a0eaf8c\"\nARG GOSU_ARMHF_DOWNLOAD_URL=\"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-armhf\"\nARG GOSU_ARMHF_DOWNLOAD_SHA256=\"abb1489357358b443789571d52b5410258ddaca525ee7ac3ba0dd91d34484589\"\nARG GOSU_ARM64_DOWNLOAD_URL=\"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-arm64\"\nARG GOSU_ARM64_DOWNLOAD_SHA256=\"73244a858f5514a927a0f2510d533b4b57169b64d2aa3f9d98d92a7a7df80cea\"\n\n# Default Build Edition - FULL, EDGE\nARG BUILD_EDITION=\"FULL\"\n\n# Retrieve Ignition Installer and Perform Ignition Installation\nENV INSTALLER_PATH /root\nENV INSTALLER_NAME \"ignition-install.zip\"\nWORKDIR ${INSTALLER_PATH}\n\n# Set to Bash Shell Execution instead of /bin/sh\nSHELL [ \"/bin/bash\", \"-c\" ]\n\n# Download Installation Zip File based on Detected Architecture\nRUN set -exo pipefail; \\\n    dpkg_arch=\"$(dpkg --print-architecture | awk '{print toupper($0)}')\"; \\\n    download_url_env=\"IGNITION_${BUILD_EDITION}_${dpkg_arch}_DOWNLOAD_URL\"; \\\n    download_sha256_env=\"IGNITION_${BUILD_EDITION}_${dpkg_arch}_DOWNLOAD_SHA256\"; \\\n    if [ -n \"${!download_url_env}\" ] && [ -n \"${!download_sha256_env}\" ]; then \\\n    wget -q --ca-certificate=/etc/ssl/certs/ca-certificates.crt --referer https://inductiveautomation.com/* -O \"${INSTALLER_NAME}\" \"${!download_url_env}\" && \\\n        if [[ ${BUILD_EDITION} != *\"NIGHTLY\"* ]]; then echo \"${!download_sha256_env}\" \"${INSTALLER_NAME}\" | sha256sum -c -; fi ; \\\n    else \\\n        echo \"Architecture ${dpkg_arch} download targets not defined, aborting build\"; \\\n        exit 1; \\\n    fi\n\n# Download gosu based on Detected Architecture\nRUN set -exo pipefail; \\\n    dpkg_arch=\"$(dpkg --print-architecture | awk '{print toupper($0)}')\"; \\\n    download_url_env=\"GOSU_${dpkg_arch}_DOWNLOAD_URL\"; \\\n    download_sha256_env=\"GOSU_${dpkg_arch}_DOWNLOAD_SHA256\"; \\\n    if [[ -n \"${!download_url_env}\" ]] && [[ -n \"${!download_sha256_env}\" ]]; then \\\n    wget -q --ca-certificate=/etc/ssl/certs/ca-certificates.crt -O \"gosu\" \"${!download_url_env}\" && \\\n    echo \"${!download_sha256_env}\" \"gosu\" | sha256sum -c -; \\\n    else \\\n    echo \"Architecture ${dpkg_arch} download targets for gosu not defined, aborting build\"; \\\n    exit 1; \\\n    fi; \\\n    chmod a+x \"gosu\"\n\n# Extract Installation Zip File\nRUN mkdir ignition && \\\n    unzip -q ${INSTALLER_NAME} -d ignition/ && \\\n    chmod +x ignition/gwcmd.sh ignition/ignition-gateway ignition/ignition.sh\n\n# Change to Ignition folder\nWORKDIR ${INSTALLER_PATH}/ignition\n\n# Stage data, temp, logs and user-lib in var folders\nRUN mkdir -p /var/lib/ignition && \\\n    mv data /var/lib/ignition/ && \\\n    mv user-lib /var/lib/ignition/ && \\\n    mv temp /var/lib/ignition/data && \\\n    mv logs /var/log/ignition && \\\n    ln -s /var/lib/ignition/data data && \\\n    ln -s /var/lib/ignition/user-lib user-lib && \\\n    ln -s /var/lib/ignition/data/temp temp && \\\n    ln -s /var/lib/ignition/data/temp /var/lib/ignition/temp && \\\n    ln -s /var/log/ignition logs && \\\n    ln -s /var/lib/ignition/data/metro-keystore webserver/metro-keystore\n\n# Apply Ignition Edge marker if applicable\nRUN if [[ \"${BUILD_EDITION}\" == *\"EDGE\"* ]]; then \\\n      prev_index=$(grep -Po \"(?<=^wrapper\\.java\\.additional\\.)([0-9]+)\" /var/lib/ignition/data/ignition.conf | tail -1); \\\n      grep -q -P \"^wrapper\\.java\\.additional\\.([0-9]+)=-Dedition=edge\" /var/lib/ignition/data/ignition.conf ; \\\n      if [ $? = 1 ]; then sed -i \"/^wrapper\\.java\\.additional\\.${prev_index}/a wrapper.java.additional.$(( ${prev_index} + 1 ))=-Dedition=edge\" /var/lib/ignition/data/ignition.conf; fi; \\\n    fi\n\n# Remove Serial Support Gateway Module if on ARMHF\nRUN set -exo pipefail; \\\n    dpkg_arch=\"$(dpkg --print-architecture | awk '{print toupper($0)}')\"; \\\n    if [ \"${dpkg_arch}\" = \"ARMHF\" ]; then \\\n        rm -f \"user-lib/modules/Serial Support Gateway-module.modl\"; \\\n    fi\n\n# RUNTIME IMAGE\nFROM eclipse-temurin:8-jre-focal as final\nLABEL maintainer \"Kevin Collins <kcollins@purelinux.net>\"\nARG IGNITION_VERSION\n\n# Install some prerequisite packages\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y curl gettext procps pwgen zip unzip sqlite3 fontconfig fonts-dejavu libatomic1 tini && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup Install Targets\nENV IGNITION_INSTALL_LOCATION=\"/usr/local/share/ignition\"\nENV IGNITION_INSTALL_USERHOME=\"/home/ignition\"\n\n# Build Arguments for UID/GID\nARG IGNITION_UID\nENV IGNITION_UID ${IGNITION_UID:-999}\nARG IGNITION_GID\nENV IGNITION_GID ${IGNITION_GID:-999}\n\n# Setup dedicated user, map file permissions, and set execution flags\nRUN mkdir ${IGNITION_INSTALL_USERHOME} && \\\n    (getent group ${IGNITION_GID} > /dev/null 2>&1 || groupadd -r ignition -g ${IGNITION_GID}) && \\\n    (getent passwd ${IGNITION_UID} > /dev/null 2>&1 || useradd -r -d ${IGNITION_INSTALL_USERHOME} -u ${IGNITION_UID} -g ${IGNITION_GID} ignition) && \\\n    chown ${IGNITION_UID}:${IGNITION_GID} ${IGNITION_INSTALL_USERHOME}\n\n# Copy Ignition Installation from Build Image\nCOPY --chown=${IGNITION_UID}:${IGNITION_GID} --from=downloader /root/ignition ${IGNITION_INSTALL_LOCATION}\nCOPY --chown=${IGNITION_UID}:${IGNITION_GID} --from=downloader /var/lib/ignition /var/lib/ignition\nCOPY --chown=${IGNITION_UID}:${IGNITION_GID} --from=downloader /var/log/ignition /var/log/ignition\nCOPY --from=downloader /root/gosu /usr/local/bin/\nRUN ln -s /dev/stdout /var/log/ignition/wrapper.log && \\\n    chown -h ${IGNITION_UID}:${IGNITION_GID} /var/log/ignition/wrapper.log\n\n# Declare Healthcheck\nHEALTHCHECK --interval=10s --start-period=60s --timeout=3s \\\n    CMD curl --max-time 3 -f http://localhost:8088/main/StatusPing 2>&1 | grep RUNNING\n\n# Setup Port Expose\nEXPOSE 8088\n\n# Launch Ignition\nUSER root\nWORKDIR ${IGNITION_INSTALL_LOCATION}\n\n# Update path to include embedded java install location\nENV PATH=\"${IGNITION_INSTALL_LOCATION}/lib/runtime/jre/bin:${PATH}\"\n\n# Copy in Entrypoint and helper scripts\nCOPY *.sh /usr/local/bin/\n\nSTOPSIGNAL SIGINT\n\n# Prepare Execution Settings\nENTRYPOINT [ \"docker-entrypoint.sh\" ]\nCMD [ \"./ignition-gateway\" \\\n    , \"data/ignition.conf\" \\\n    , \"wrapper.syslog.ident=Ignition-Gateway\" \\\n    , \"wrapper.pidfile=./Ignition-Gateway.pid\" \\\n    , \"wrapper.name=Ignition-Gateway\" \\\n    , \"wrapper.displayname=Ignition-Gateway\" \\\n    , \"wrapper.statusfile=./Ignition-Gateway.status\" \\\n    , \"wrapper.java.statusfile=./Ignition-Gateway.java.status\" ] \n\n"
}