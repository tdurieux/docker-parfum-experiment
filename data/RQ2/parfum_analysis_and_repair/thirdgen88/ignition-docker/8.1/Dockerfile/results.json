{
  "startTime": 1674220309664,
  "endTime": 1674220310823,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ignition Version\nARG IGNITION_VERSION=\"8.1.18\"\n# IGNITION_RC_VERSION should be something like `8.1.8-rc1` when applicable, otherwise blank\nARG IGNITION_RC_VERSION=\"\"\n\n# Default Build Edition - STABLE or NIGHTLY\nARG BUILD_EDITION=\"STABLE\"\n\nFROM ubuntu:20.04 AS downloader\nLABEL maintainer=\"Kevin Collins <kcollins@purelinux.net>\"\nARG IGNITION_VERSION\nARG BUILD_EDITION\n\n# Install some prerequisite packages\nRUN apt-get update && apt-get install --no-install-recommends -y wget unzip && rm -rf /var/lib/apt/lists/*;\n\n# Ignition Downloader Parameters\nARG IGNITION_STABLE_AMD64_DOWNLOAD_URL=\"https://files.inductiveautomation.com/release/ia/8.1.18/20220615-1907/Ignition-linux-x86-64-8.1.18.zip\"\nARG IGNITION_STABLE_AMD64_DOWNLOAD_SHA256=\"4bf401b921fcfa26ae1ad25a3908fcbf8d1a4d164c595a01cf3bbba1f19d250b\"\nARG IGNITION_RC_AMD64_DOWNLOAD_URL=\"\"\nARG IGNITION_RC_AMD64_DOWNLOAD_SHA256=\"\"\nARG IGNITION_NIGHTLY_AMD64_DOWNLOAD_URL=\"https://files.inductiveautomation.com/builds/nightly/8.1.19-SNAPSHOT/Ignition-linux-64-8.1.19-SNAPSHOT.zip\"\nARG IGNITION_NIGHTLY_AMD64_DOWNLOAD_SHA256=\"notused\"\nARG IGNITION_AMD64_JRE_SUFFIX=\"nix\"\n\nARG IGNITION_STABLE_ARMHF_DOWNLOAD_URL=\"https://files.inductiveautomation.com/release/ia/8.1.18/20220615-1907/Ignition-linux-armhf-32-8.1.18.zip\"\nARG IGNITION_STABLE_ARMHF_DOWNLOAD_SHA256=\"357ea5d6380b9b0f32c71f0dd6f8773fa6e4215314f29fb6d4950fbcde758a9d\"\nARG IGNITION_RC_ARMHF_DOWNLOAD_URL=\"\"\nARG IGNITION_RC_ARMHF_DOWNLOAD_SHA256=\"\"\nARG IGNITION_NIGHTLY_ARMHF_DOWNLOAD_URL=\"https://files.inductiveautomation.com/builds/nightly/8.1.19-SNAPSHOT/Ignition-linux-armhf-8.1.19-SNAPSHOT.zip\"\nARG IGNITION_NIGHTLY_ARMHF_DOWNLOAD_SHA256=\"notused\"\nARG IGNITION_ARMHF_JRE_SUFFIX=\"arm32hf\"\nARG IGNITION_STABLE_ARM64_DOWNLOAD_URL=\"https://files.inductiveautomation.com/release/ia/8.1.18/20220615-1907/Ignition-linux-aarch-64-8.1.18.zip\"\nARG IGNITION_STABLE_ARM64_DOWNLOAD_SHA256=\"17c22663a713f64e2cbf194eb761411a26bf1b5452125d5f23c00d9aad2a661b\"\nARG IGNITION_RC_ARM64_DOWNLOAD_URL=\"\"\nARG IGNITION_RC_ARM64_DOWNLOAD_SHA256=\"\"\nARG IGNITION_NIGHTLY_ARM64_DOWNLOAD_URL=\"https://files.inductiveautomation.com/builds/nightly/8.1.19-SNAPSHOT/Ignition-linux-aarch64-8.1.19-SNAPSHOT.zip\"\nARG IGNITION_NIGHTLY_ARM64_DOWNLOAD_SHA256=\"notused\"\nARG IGNITION_ARM64_JRE_SUFFIX=\"aarch64\"\n\n# gosu Download Parameters\nARG GOSU_VERSION=\"1.14\"\nARG GOSU_AMD64_DOWNLOAD_URL=\"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\"\nARG GOSU_AMD64_DOWNLOAD_SHA256=\"bd8be776e97ec2b911190a82d9ab3fa6c013ae6d3121eea3d0bfd5c82a0eaf8c\"\nARG GOSU_ARMHF_DOWNLOAD_URL=\"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-armhf\"\nARG GOSU_ARMHF_DOWNLOAD_SHA256=\"abb1489357358b443789571d52b5410258ddaca525ee7ac3ba0dd91d34484589\"\nARG GOSU_ARM64_DOWNLOAD_URL=\"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-arm64\"\nARG GOSU_ARM64_DOWNLOAD_SHA256=\"73244a858f5514a927a0f2510d533b4b57169b64d2aa3f9d98d92a7a7df80cea\"\n\n# Retrieve Ignition Installer and Perform Ignition Installation\nENV INSTALLER_PATH /root\nENV INSTALLER_NAME \"ignition-install.zip\"\nWORKDIR ${INSTALLER_PATH}\n\n# Set to Bash Shell Execution instead of /bin/sh\nSHELL [ \"/bin/bash\", \"-c\" ]\n\n# Download Installation Zip File based on Detected Architecture\nRUN set -exo pipefail; \\\n    dpkg_arch=\"$(dpkg --print-architecture | awk '{print toupper($0)}')\"; \\\n    download_url_env=\"IGNITION_${BUILD_EDITION}_${dpkg_arch}_DOWNLOAD_URL\"; \\\n    download_sha256_env=\"IGNITION_${BUILD_EDITION}_${dpkg_arch}_DOWNLOAD_SHA256\"; \\\n    if [ -n \"${!download_url_env}\" ] && [ -n \"${!download_sha256_env}\" ]; then \\\n        wget -q --ca-certificate=/etc/ssl/certs/ca-certificates.crt --referer https://inductiveautomation.com/* -O \"${INSTALLER_NAME}\" \"${!download_url_env}\" && \\\n        if [[ ${BUILD_EDITION} != *\"NIGHTLY\"* ]]; then echo \"${!download_sha256_env}\" \"${INSTALLER_NAME}\" | sha256sum -c -; fi ; \\\n    else \\\n        echo \"Architecture ${dpkg_arch} download targets for Ignition not defined, aborting build\"; \\\n        exit 1; \\\n    fi\n\n# Download gosu based on Detected Architecture\nRUN set -exo pipefail; \\\n    dpkg_arch=\"$(dpkg --print-architecture | awk '{print toupper($0)}')\"; \\\n    download_url_env=\"GOSU_${dpkg_arch}_DOWNLOAD_URL\"; \\\n    download_sha256_env=\"GOSU_${dpkg_arch}_DOWNLOAD_SHA256\"; \\\n    if [[ -n \"${!download_url_env}\" ]] && [[ -n \"${!download_sha256_env}\" ]]; then \\\n        wget -q --ca-certificate=/etc/ssl/certs/ca-certificates.crt -O \"gosu\" \"${!download_url_env}\" && \\\n        echo \"${!download_sha256_env}\" \"gosu\" | sha256sum -c -; \\\n    else \\\n        echo \"Architecture ${dpkg_arch} download targets for gosu not defined, aborting build\"; \\\n        exit 1; \\\n    fi; \\\n    chmod a+x \"gosu\"\n\n# Zip File Exclusion Build Argument\nARG ZIP_EXCLUSION_RESOURCE_LIST\nARG ZIP_EXCLUSION_MODULE_LIST\nARG ZIP_EXCLUSION_ARCHITECTURE_LIST\n\n# Extract Installation Zip File\nCOPY extract-zip.sh .\nRUN ./extract-zip.sh -f \"${INSTALLER_NAME}\" \\\n    \"${ZIP_EXCLUSION_RESOURCE_LIST:+-xr}\" \"${ZIP_EXCLUSION_RESOURCE_LIST}\" \\\n    \"${ZIP_EXCLUSION_MODULE_LIST+:-xm}\" \"${ZIP_EXCLUSION_MODULE_LIST}\" \\\n    \"${ZIP_EXCLUSION_ARCHITECTURE_LIST:+-xa}\" \"${ZIP_EXCLUSION_ARCHITECTURE_LIST}\"\n\n# Change to Ignition folder\nWORKDIR ${INSTALLER_PATH}/ignition\n\n# Modify ignition.sh file\nRUN sed -E -i 's/^(PIDFILE_CHECK_PID=true)/#\\1/' ignition.sh\n\n# Add jre-tmp folder in base ignition location\nRUN mkdir -p jre-tmp\n\n# Stage data, temp, logs and user-lib in var folders\nRUN mkdir -p /var/lib/ignition && \\\n    mv data /var/lib/ignition/ && \\\n    mv user-lib /var/lib/ignition/ && \\\n    mv logs /var/log/ignition && \\\n    ln -s /var/lib/ignition/data data && \\\n    ln -s /var/lib/ignition/user-lib user-lib && \\\n    ln -s /var/log/ignition logs && \\\n    mkdir -p /var/lib/ignition/data/local && \\\n    ln -s /var/lib/ignition/data/local/ssl.pfx webserver/ssl.pfx && \\\n    ln -s /var/lib/ignition/data/local/csr.pfx webserver/csr.pfx && \\\n    ln -s /var/lib/ignition/data/local/metro-keystore webserver/metro-keystore\n\n# Extract embedded Java based on architecture\nRUN set -exo pipefail; \\\n    dpkg_arch=\"$(dpkg --print-architecture | awk '{print toupper($0)}')\"; \\\n    jre_suffix_env=\"IGNITION_${dpkg_arch}_JRE_SUFFIX\"; \\\n    if [ -n \"${!jre_suffix_env}\" ]; then \\\n        ./ignition.sh checkRuntimes && \\\n        ln -s jre-${!jre_suffix_env} lib/runtime/jre; \\\n    else \\\n        echo \"Architecture ${dpkg_arch} JRE suffix target not defined, aborting build\"; \\\n        exit 1; \\\n    fi\n\n# RUNTIME IMAGE\nFROM ubuntu:20.04 as final\nLABEL maintainer=\"Kevin Collins <kcollins@purelinux.net>\"\nARG IGNITION_VERSION\nARG BUILD_EDITION\n\n# Capture BUILD_EDITION into environment variable\nENV BUILD_EDITION ${BUILD_EDITION:-FULL}\n\n# Install some prerequisite packages\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        curl gettext procps pwgen zip unzip sqlite3 fontconfig fonts-dejavu jq tini locales && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n    dpkg-reconfigure --frontend=noninteractive locales && \\\n    update-locale LANG=en_US.UTF-8\n\n# Setup Install Targets and Locale Settings\nENV IGNITION_INSTALL_LOCATION=\"/usr/local/share/ignition\" \\\n    IGNITION_INSTALL_USERHOME=\"/home/ignition\" \\\n    LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'\n\n# Build Arguments for UID/GID\nARG IGNITION_UID\nARG IGNITION_GID\nENV IGNITION_UID=${IGNITION_UID:-999} \\\n    IGNITION_GID=${IGNITION_GID:-999}\n\n# Setup dedicated user, map file permissions, and set execution flags\nRUN mkdir ${IGNITION_INSTALL_USERHOME} && \\\n    (getent group ${IGNITION_GID} > /dev/null 2>&1 || groupadd -r ignition -g ${IGNITION_GID}) && \\\n    (getent passwd ${IGNITION_UID} > /dev/null 2>&1 || useradd -r -d ${IGNITION_INSTALL_USERHOME} -u ${IGNITION_UID} -g ${IGNITION_GID} ignition) && \\\n    chown ${IGNITION_UID}:${IGNITION_GID} ${IGNITION_INSTALL_USERHOME} && \\\n    mkdir -p /data && chown ${IGNITION_UID}:${IGNITION_GID} /data\n\n# Copy Ignition Installation from Build Image\nCOPY --chown=${IGNITION_UID}:${IGNITION_GID} --from=downloader /root/ignition ${IGNITION_INSTALL_LOCATION}\nCOPY --chown=${IGNITION_UID}:${IGNITION_GID} --from=downloader /var/lib/ignition /var/lib/ignition\nCOPY --chown=${IGNITION_UID}:${IGNITION_GID} --from=downloader /var/log/ignition /var/log/ignition\nCOPY --from=downloader /root/gosu /usr/local/bin/\nRUN ln -s /dev/stdout /var/log/ignition/wrapper.log && \\\n    chown -h ${IGNITION_UID}:${IGNITION_GID} /var/log/ignition/wrapper.log\n\n# Declare Healthcheck\nHEALTHCHECK --interval=10s --start-period=60s --timeout=3s \\\n    CMD curl --max-time 3 -f http://localhost:${GATEWAY_HTTP_PORT:-8088}/StatusPing 2>&1 | grep RUNNING\n\n# Setup Port Expose\nEXPOSE 8088\n\n# Launch Ignition\nUSER root\nWORKDIR ${IGNITION_INSTALL_LOCATION}\n\n# Update path to include embedded java install location\nENV PATH=\"${IGNITION_INSTALL_LOCATION}/lib/runtime/jre/bin:${PATH}\"\n\n# Copy in Entrypoint and helper scripts\nCOPY *.sh /usr/local/bin/\n\nSTOPSIGNAL SIGINT\n\n# Prepare Execution Settings\nENTRYPOINT [ \"/usr/local/bin/docker-entrypoint.sh\" ]\nCMD [ \"./ignition-gateway\" ]\n"
}