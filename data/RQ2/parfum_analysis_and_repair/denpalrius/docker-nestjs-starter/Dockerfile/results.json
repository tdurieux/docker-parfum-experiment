{
  "startTime": 1674252720731,
  "endTime": 1674252721540,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14-alpine\n\n# Set necessary environment variables.\nENV NODE_ENV=production \\\n    NPM_CONFIG_PREFIX=/home/node/.npm-global \\\n    PATH=$PATH:/home/node/.npm-global/bin:/home/node/node_modules/.bin:$PATH\n\n# For handling Kernel signals properly\nRUN apk add --no-cache tini\n\n# Create the working directory, including the node_modules folder for the sake of assigning ownership in the next command\nRUN mkdir -p /usr/src/app/node_modules && rm -rf /usr/src/app/node_modules\n\n# Change ownership of the working directory to the node:node user:group\n# This ensures that npm install can be executed successfully with the correct permissions\nRUN chown -R node:node /usr/src/app\n\n# Set the user to use when running this image\n# Non previlage mode for better security (this user comes with official NodeJS image).\nUSER node\n\n# Set the default working directory for the app\n# It is a best practice to use the /usr/src/app directory\nWORKDIR /usr/src/app\n\n# Copy package.json, package-lock.json\n# Copying this separately prevents re-running npm install on every code change.\nCOPY --chown=node:node package*.json ./\n\n# Install dependencies.\n# RUN npm i -g @nestjs/cli\nRUN npm ci --only=production\n\n# Necessary to run before adding application code to leverage Docker cache\nRUN npm cache clean --force\n# RUN mv node_modules ../\n\n# Bundle app source\nCOPY --chown=node:node . ./\n\n# Display directory structure\nRUN ls -l\n\n# Expose API port\nEXPOSE 3000\n\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n\n# Run the web service on container startup\nCMD [ \"npm\", \"start\" ]\n"
}