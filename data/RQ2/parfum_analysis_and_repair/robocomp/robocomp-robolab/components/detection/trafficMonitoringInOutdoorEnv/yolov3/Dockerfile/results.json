{
  "startTime": 1674250705904,
  "endTime": 1674250706710,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 18,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 18,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Start FROM Nvidia PyTorch image https://ngc.nvidia.com/catalog/containers/nvidia:pytorch\nFROM nvcr.io/nvidia/pytorch:21.03-py3\n\n# Install linux packages\nRUN apt update && apt install --no-install-recommends -y zip htop screen libgl1-mesa-glx && rm -rf /var/lib/apt/lists/*;\n\n# Install python dependencies\nCOPY requirements.txt .\nRUN python -m pip install --upgrade pip\nRUN pip uninstall -y nvidia-tensorboard nvidia-tensorboard-plugin-dlprof\nRUN pip install --no-cache-dir --no-cache -r requirements.txt coremltools onnx gsutil notebook\n\n# Create working directory\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\n# Copy contents\nCOPY . /usr/src/app\n\n# Set environment variables\nENV HOME=/usr/src/app\n\n\n# ---------------------------------------------------  Extras Below  ---------------------------------------------------\n\n# Build and Push\n# t=ultralytics/yolov3:latest && sudo docker build -t $t . && sudo docker push $t\n# for v in {300..303}; do t=ultralytics/coco:v$v && sudo docker build -t $t . && sudo docker push $t; done\n\n# Pull and Run\n# t=ultralytics/yolov3:latest && sudo docker pull $t && sudo docker run -it --ipc=host --gpus all $t\n\n# Pull and Run with local directory access\n# t=ultralytics/yolov3:latest && sudo docker pull $t && sudo docker run -it --ipc=host --gpus all -v \"$(pwd)\"/coco:/usr/src/coco $t\n\n# Kill all\n# sudo docker kill $(sudo docker ps -q)\n\n# Kill all image-based\n# sudo docker kill $(sudo docker ps -qa --filter ancestor=ultralytics/yolov5:latest)\n\n# Bash into running container\n# sudo docker exec -it 5a9b5863d93d bash\n\n# Bash into stopped container\n# id=$(sudo docker ps -qa) && sudo docker start $id && sudo docker exec -it $id bash\n\n# Send weights to GCP\n# python -c \"from utils.general import *; strip_optimizer('runs/train/exp0_*/weights/best.pt', 'tmp.pt')\" && gsutil cp tmp.pt gs://*.pt\n\n# Clean up\n# docker system prune -a --volumes\n"
}