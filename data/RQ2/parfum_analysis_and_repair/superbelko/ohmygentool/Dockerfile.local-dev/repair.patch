diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/superbelko/ohmygentool/Dockerfile.local-dev b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/superbelko/ohmygentool/Dockerfile.local-dev/repaired.Dockerfile
index b010fa4..aea1fcb 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/superbelko/ohmygentool/Dockerfile.local-dev
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/superbelko/ohmygentool/Dockerfile.local-dev/repaired.Dockerfile
@@ -1,20 +1,19 @@
-
-# Remote development container for VS Code and CLion
-# 
-# Build and run:
-#   docker build -t gentool-devcontainer -f Dockerfile.local-dev .
-#   docker run -d --cap-add sys_ptrace -p127.0.0.1:2222:22 --name gentool-devcontainer
-#   ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[localhost]:2222"
-#
-# stop:
-#   docker stop gentool-devcontainer
-# 
-# ssh credentials (test user):
-#   user@password
-ARG UBUNTU_VERSION=21.10
-
-FROM ubuntu:${UBUNTU_VERSION} AS base_deps
-ENV DEBIAN_FRONTEND=noninteractive
+# Remote development container for VS Code and CLion
+#
+# Build and run:
+#   docker build -t gentool-devcontainer -f Dockerfile.local-dev .
+#   docker run -d --cap-add sys_ptrace -p127.0.0.1:2222:22 --name gentool-devcontainer
+#   ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[localhost]:2222"
+#
+# stop:
+#   docker stop gentool-devcontainer
+#
+# ssh credentials (test user):
+#   user@password
+ARG UBUNTU_VERSION=21.10
+
+FROM ubuntu:${UBUNTU_VERSION} AS base_deps
+ENV DEBIAN_FRONTEND=noninteractive
 RUN apt-get update && apt-get install -y --no-install-recommends \
   tzdata \
   ssh \
@@ -24,38 +23,38 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
   rsync \
   python3 python-is-python3 pip \
   ninja-build make \
-  libxml2 \
-  && apt-get clean 
-
-# Download prebuilt LLVM from Github, extract to "/usr" directory, set "lld" as default linker
-FROM base_deps AS llvm_deps
-ARG LLVM_GITHUB_RELEASE_TAG=llvmorg-12.0.1-rc1
-ARG LLVM_GITHUB_RELEASE_FILENAME=clang+llvm-12.0.1-rc1-x86_64-linux-gnu-ubuntu-21.04
-RUN set -ex \
-  && apt-get install xz-utils \
-  && wget -O llvm-clang.tar.xz https://github.com/llvm/llvm-project/releases/download/${LLVM_GITHUB_RELEASE_TAG}/${LLVM_GITHUB_RELEASE_FILENAME}.tar.xz \
-  && tar -xvf llvm-clang.tar.xz \
-  && cp -R ./${LLVM_GITHUB_RELEASE_FILENAME}/* /usr \
-  && rm ./llvm-clang.tar.xz \
-  && rm -rf ./${LLVM_GITHUB_RELEASE_FILENAME} \
-  && update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/lld" 50
-
-# Install LDC
-FROM llvm_deps AS dlang_deps
-ARG D_VERSION=ldc-1.26.0
-ARG DPATH=/dlang
+  libxml2 \
+  && apt-get clean && rm -rf /var/lib/apt/lists/*;
+
+# Download prebuilt LLVM from Github, extract to "/usr" directory, set "lld" as default linker
+FROM base_deps AS llvm_deps
+ARG LLVM_GITHUB_RELEASE_TAG=llvmorg-12.0.1-rc1
+ARG LLVM_GITHUB_RELEASE_FILENAME=clang+llvm-12.0.1-rc1-x86_64-linux-gnu-ubuntu-21.04
+RUN set -ex \
+  && apt-get install -y --no-install-recommends xz-utils \
+  && wget -O llvm-clang.tar.xz https://github.com/llvm/llvm-project/releases/download/${LLVM_GITHUB_RELEASE_TAG}/${LLVM_GITHUB_RELEASE_FILENAME}.tar.xz \
+  && tar -xvf llvm-clang.tar.xz \
+  && cp -R ./${LLVM_GITHUB_RELEASE_FILENAME}/* /usr \
+  && rm ./llvm-clang.tar.xz \
+  && rm -rf ./${LLVM_GITHUB_RELEASE_FILENAME} \
+  && update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/lld" 50 && rm -rf /var/lib/apt/lists/*;
+
+# Install LDC
+FROM llvm_deps AS dlang_deps
+ARG D_VERSION=ldc-1.26.0
+ARG DPATH=/dlang
 RUN set -ex \
   && mkdir ${DPATH} \
   && curl -fsS https://dlang.org/install.sh | bash -s ${D_VERSION} -p ${DPATH} \
   && chmod 755 -R ${DPATH} \
   && ln -s ${DPATH}/${D_VERSION} ${DPATH}/dc \
-  && ls ${DPATH}
-ENV PATH="${DPATH}/${D_VERSION}/bin:${PATH}"
-ENV LIBRARY_PATH="${DPATH}/${D_VERSION}/lib:${LIBRARY_PATH}"
-ENV LD_LIBRARY_PATH="${DPATH}/${D_VERSION}/lib:${LD_LIBRARY_PATH}"
-
-FROM dlang_deps AS build_tools_deps
-ARG CMAKE_VERSION=3.20.3
+  && ls ${DPATH}
+ENV PATH="${DPATH}/${D_VERSION}/bin:${PATH}"
+ENV LIBRARY_PATH="${DPATH}/${D_VERSION}/lib:${LIBRARY_PATH}"
+ENV LD_LIBRARY_PATH="${DPATH}/${D_VERSION}/lib:${LD_LIBRARY_PATH}"
+
+FROM dlang_deps AS build_tools_deps
+ARG CMAKE_VERSION=3.20.3
 RUN set -ex \
   # GCC (for vcpkg install)
   && apt-get install -y --no-install-recommends build-essential \
@@ -64,18 +63,18 @@ RUN set -ex \
   && sh cmake-${CMAKE_VERSION}-Linux-x86_64.sh -- --skip-license --prefix=/usr \
   && rm -f cmake-${CMAKE_VERSION}-Linux-x86_64.sh \
   # vcpkg
-  && git clone --depth=1 https://github.com/microsoft/vcpkg \
-  && ./vcpkg/bootstrap-vcpkg.sh -useSystemBinaries
-
-FROM dlang_deps AS remote_dev_ssh_deps
+  && git clone --depth=1 https://github.com/microsoft/vcpkg \
+  && ./vcpkg/bootstrap-vcpkg.sh -useSystemBinaries && rm -rf /var/lib/apt/lists/*;
+
+FROM dlang_deps AS remote_dev_ssh_deps
 RUN ( \
   echo 'LogLevel DEBUG2'; \
   echo 'PermitRootLogin yes'; \
   echo 'PasswordAuthentication yes'; \
   echo 'Subsystem sftp /usr/lib/openssh/sftp-server'; \
   ) > /etc/ssh/sshd_config_test_clion \
-  && mkdir /run/sshd
+  && mkdir /run/sshd
 RUN useradd -m user \
-  && yes password | passwd user
-RUN usermod -s /bin/bash user
+  && yes password | passwd user
+RUN usermod -s /bin/bash user
 CMD ["/usr/sbin/sshd", "-D", "-e", "-f", "/etc/ssh/sshd_config_test_clion"]
\ No newline at end of file