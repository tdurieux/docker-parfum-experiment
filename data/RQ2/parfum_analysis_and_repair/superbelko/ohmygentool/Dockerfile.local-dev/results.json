{
  "startTime": 1674217276078,
  "endTime": 1674217277502,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 5,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 5,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 5,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 5,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 5,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 5,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 5,
        "columnEnd": 63
      }
    }
  ],
  "repairedDockerfile": "# Remote development container for VS Code and CLion\n#\n# Build and run:\n#   docker build -t gentool-devcontainer -f Dockerfile.local-dev .\n#   docker run -d --cap-add sys_ptrace -p127.0.0.1:2222:22 --name gentool-devcontainer\n#   ssh-keygen -f \"$HOME/.ssh/known_hosts\" -R \"[localhost]:2222\"\n#\n# stop:\n#   docker stop gentool-devcontainer\n#\n# ssh credentials (test user):\n#   user@password\nARG UBUNTU_VERSION=21.10\n\nFROM ubuntu:${UBUNTU_VERSION} AS base_deps\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends \\\r\n  tzdata \\\r\n  ssh \\\r\n  git \\\r\n  curl wget \\\r\n  tar zip unzip \\\r\n  rsync \\\r\n  python3 python-is-python3 pip \\\r\n  ninja-build make \\\r\n  libxml2 \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Download prebuilt LLVM from Github, extract to \"/usr\" directory, set \"lld\" as default linker\nFROM base_deps AS llvm_deps\nARG LLVM_GITHUB_RELEASE_TAG=llvmorg-12.0.1-rc1\nARG LLVM_GITHUB_RELEASE_FILENAME=clang+llvm-12.0.1-rc1-x86_64-linux-gnu-ubuntu-21.04\nRUN set -ex \\\n  && apt-get install -y --no-install-recommends xz-utils \\\n  && wget -O llvm-clang.tar.xz https://github.com/llvm/llvm-project/releases/download/${LLVM_GITHUB_RELEASE_TAG}/${LLVM_GITHUB_RELEASE_FILENAME}.tar.xz \\\n  && tar -xvf llvm-clang.tar.xz \\\n  && cp -R ./${LLVM_GITHUB_RELEASE_FILENAME}/* /usr \\\n  && rm ./llvm-clang.tar.xz \\\n  && rm -rf ./${LLVM_GITHUB_RELEASE_FILENAME} \\\n  && update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/lld\" 50 && rm -rf /var/lib/apt/lists/*;\n\n# Install LDC\nFROM llvm_deps AS dlang_deps\nARG D_VERSION=ldc-1.26.0\nARG DPATH=/dlang\nRUN set -ex \\\r\n  && mkdir ${DPATH} \\\r\n  && curl -fsS https://dlang.org/install.sh | bash -s ${D_VERSION} -p ${DPATH} \\\r\n  && chmod 755 -R ${DPATH} \\\r\n  && ln -s ${DPATH}/${D_VERSION} ${DPATH}/dc \\\r\n  && ls ${DPATH}\nENV PATH=\"${DPATH}/${D_VERSION}/bin:${PATH}\"\nENV LIBRARY_PATH=\"${DPATH}/${D_VERSION}/lib:${LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"${DPATH}/${D_VERSION}/lib:${LD_LIBRARY_PATH}\"\n\nFROM dlang_deps AS build_tools_deps\nARG CMAKE_VERSION=3.20.3\nRUN set -ex \\\r\n  # GCC (for vcpkg install)\r\n  && apt-get install -y --no-install-recommends build-essential \\\r\n  # CMake\r\n  && wget -O cmake-${CMAKE_VERSION}-Linux-x86_64.sh https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh \\\r\n  && sh cmake-${CMAKE_VERSION}-Linux-x86_64.sh -- --skip-license --prefix=/usr \\\r\n  && rm -f cmake-${CMAKE_VERSION}-Linux-x86_64.sh \\\r\n  # vcpkg\r\n  && git clone --depth=1 https://github.com/microsoft/vcpkg \\\n  && ./vcpkg/bootstrap-vcpkg.sh -useSystemBinaries && rm -rf /var/lib/apt/lists/*;\n\nFROM dlang_deps AS remote_dev_ssh_deps\nRUN ( \\\r\n  echo 'LogLevel DEBUG2'; \\\r\n  echo 'PermitRootLogin yes'; \\\r\n  echo 'PasswordAuthentication yes'; \\\r\n  echo 'Subsystem sftp /usr/lib/openssh/sftp-server'; \\\r\n  ) > /etc/ssh/sshd_config_test_clion \\\r\n  && mkdir /run/sshd\nRUN useradd -m user \\\r\n  && yes password | passwd user\nRUN usermod -s /bin/bash user\nCMD [\"/usr/sbin/sshd\", \"-D\", \"-e\", \"-f\", \"/etc/ssh/sshd_config_test_clion\"]"
}