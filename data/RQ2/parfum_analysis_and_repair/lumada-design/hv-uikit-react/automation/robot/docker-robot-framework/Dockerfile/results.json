{
  "startTime": 1674251549619,
  "endTime": 1674251550142,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 7,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.8-alpine3.12\n\nMAINTAINER Paul Podgorsek <ppodgorsek@users.noreply.github.com>\nLABEL description Robot Framework in Docker.\n\n# Set the reports directory environment variable\nENV ROBOT_REPORTS_DIR /opt/robotframework/reports\n\n# Set the tests directory environment variable\nENV ROBOT_TESTS_DIR /opt/robotframework/tests\n\n# Set the working directory environment variable\nENV ROBOT_WORK_DIR /opt/robotframework/temp\n\n# Setup X Window Virtual Framebuffer\nENV SCREEN_COLOUR_DEPTH 24\nENV SCREEN_HEIGHT 1080\nENV SCREEN_WIDTH 1920\n\n# Set number of threads for parallel execution\n# By default, no parallelisation\nENV ROBOT_THREADS 1\n\n# Define the default user who'll run the tests\nENV ROBOT_UID 1000\nENV ROBOT_GID 1000\n\n# Dependency versions\nENV ALPINE_GLIBC 2.31-r0\nENV CHROMIUM_VERSION 83\nENV DATABASE_LIBRARY_VERSION 1.2\nENV FAKER_VERSION 5.0.0\nENV FIREFOX_VERSION 79.0\nENV FTP_LIBRARY_VERSION 1.9\nENV GECKO_DRIVER_VERSION v0.27.0\nENV IMAP_LIBRARY_VERSION 0.3.6\nENV PABOT_VERSION 1.8.1\nENV REQUESTS_VERSION 0.7.0\nENV ROBOT_FRAMEWORK_VERSION 3.2.1\nENV SELENIUM_LIBRARY_VERSION 4.5.0\nENV SSH_LIBRARY_VERSION 3.4.0\nENV XVFB_VERSION 1.20\n\n# Prepare binaries to be executed\nCOPY bin/chromedriver.sh /opt/robotframework/bin/chromedriver\nCOPY bin/chromium-browser.sh /opt/robotframework/bin/chromium-browser\nCOPY bin/run-tests-in-virtual-screen.sh /opt/robotframework/bin/\n\n# Install system dependencies\nRUN apk update \\\n  && apk --no-cache upgrade \\\n  && apk --no-cache --virtual .build-deps add \\\n    gcc \\\n    libffi-dev \\\n    linux-headers \\\n    make \\\n    musl-dev \\\n    openssl-dev \\\n    which \\\n    wget \\\n  && apk --no-cache add \\\n    \"chromium~$CHROMIUM_VERSION\" \\\n    \"chromium-chromedriver~$CHROMIUM_VERSION\" \\\n    \"firefox~$FIREFOX_VERSION\" \\\n    xauth \\\n    \"xvfb-run~$XVFB_VERSION\" \\\n  && mv /usr/lib/chromium/chrome /usr/lib/chromium/chrome-original \\\n  && ln -sfv /opt/robotframework/bin/chromium-browser /usr/lib/chromium/chrome \\\n# FIXME: above is a workaround, as the path is ignored\n\n# Install Robot Framework and Selenium Library\n  && pip3 install \\\n    --no-cache-dir \\\n    robotframework==$ROBOT_FRAMEWORK_VERSION \\\n    robotframework-databaselibrary==$DATABASE_LIBRARY_VERSION \\\n    robotframework-faker==$FAKER_VERSION \\\n    robotframework-ftplibrary==$FTP_LIBRARY_VERSION \\\n    robotframework-imaplibrary2==$IMAP_LIBRARY_VERSION \\\n    robotframework-pabot==$PABOT_VERSION \\\n    robotframework-requests==$REQUESTS_VERSION \\\n    robotframework-seleniumlibrary==$SELENIUM_LIBRARY_VERSION \\\n    robotframework-sshlibrary==$SSH_LIBRARY_VERSION \\\n    PyYAML \\\n\n# Download the glibc package for Alpine Linux from its GitHub repository\n  && wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\\n    && wget -q \"https://github.com/sgerrand/alpine-pkg-glibc/releases/download/$ALPINE_GLIBC/glibc-$ALPINE_GLIBC.apk\" \\\n    && wget -q \"https://github.com/sgerrand/alpine-pkg-glibc/releases/download/$ALPINE_GLIBC/glibc-bin-$ALPINE_GLIBC.apk\" \\\n    && apk add --no-cache glibc-$ALPINE_GLIBC.apk \\\n    && apk add --no-cache glibc-bin-$ALPINE_GLIBC.apk \\\n    && rm glibc-$ALPINE_GLIBC.apk \\\n    && rm glibc-bin-$ALPINE_GLIBC.apk \\\n    && rm /etc/apk/keys/sgerrand.rsa.pub \\\n\n# Download Gecko drivers directly from the GitHub repository\n  && wget -q \"https://github.com/mozilla/geckodriver/releases/download/$GECKO_DRIVER_VERSION/geckodriver-$GECKO_DRIVER_VERSION-linux64.tar.gz\" \\\n    && tar xzf geckodriver-$GECKO_DRIVER_VERSION-linux64.tar.gz \\\n    && mkdir -p /opt/robotframework/drivers/ \\\n    && mv geckodriver /opt/robotframework/drivers/geckodriver \\\n    && rm geckodriver-$GECKO_DRIVER_VERSION-linux64.tar.gz \\\n\n  && apk del --no-cache --update-cache .build-deps\n\n# Create the default report and work folders with the default user to avoid runtime issues\n# These folders are writeable by anyone, to ensure the user can be changed on the command line.\nRUN mkdir -p ${ROBOT_REPORTS_DIR} \\\n  && mkdir -p ${ROBOT_WORK_DIR} \\\n  && chown ${ROBOT_UID}:${ROBOT_GID} ${ROBOT_REPORTS_DIR} \\\n  && chown ${ROBOT_UID}:${ROBOT_GID} ${ROBOT_WORK_DIR} \\\n  && chmod ugo+w ${ROBOT_REPORTS_DIR} ${ROBOT_WORK_DIR}\n\n# Allow any user to write logs\nRUN chmod ugo+w /var/log \\\n  && chown ${ROBOT_UID}:${ROBOT_GID} /var/log\n\n# Update system path\nENV PATH=/opt/robotframework/bin:/opt/robotframework/drivers:$PATH\n\n# Set up a volume for the generated reports\nVOLUME ${ROBOT_REPORTS_DIR}\n\nUSER ${ROBOT_UID}:${ROBOT_GID}\n\n# A dedicated work folder to allow for the creation of temporary files\nWORKDIR ${ROBOT_WORK_DIR}\n\n# Execute all robot tests\nCMD [\"run-tests-in-virtual-screen.sh\"]\n"
}