{
  "startTime": 1674217857293,
  "endTime": 1674217857988,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 2,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 24,
        "columnStart": 2,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-slim as base\n\nRUN apt-get update -qq \\\n && apt-get install -y --no-install-recommends \\\n    # required by psycopg2 at build and runtime\n    libpq-dev \\\n     # required for health check\n    curl \\\n && apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\nFROM base as builder\n\nRUN apt-get update -qq && \\\n  apt-get install -y --no-install-recommends \\\n  build-essential \\\n  wget \\\n  openssh-client \\\n  graphviz-dev \\\n  pkg-config \\\n  git-core \\\n  openssl \\\n  libssl-dev \\\n  libffi6 \\\n  libffi-dev \\\n  libpng-dev && rm -rf /var/lib/apt/lists/*;\n\n# install poetry\n# keep this in sync with the version in pyproject.toml and Dockerfile\nENV POETRY_VERSION 1.1.4\nRUN curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\nENV PATH \"/root/.poetry/bin:/opt/venv/bin:${PATH}\"\n\n# copy files\nCOPY . /build/\n\n# change working directory\nWORKDIR /build\n\n# install dependencies\nRUN python -m venv /opt/venv && \\\n  . /opt/venv/bin/activate && \\\n  pip install --no-cache-dir -U 'pip<20' && \\\n  poetry install --extras full --no-dev --no-root --no-interaction\n\nRUN pip install --no-cache-dir wheel && \\\n  cd rasa_addons && \\\n  mkdir rasa_addons && \\\n  mv `\\ls -1 . | grep -v -e setup.py -e rasa_addons` ./rasa_addons/ && \\\n  python setup.py install && \\\n  cd ..\n\nRUN poetry build -f wheel -n && \\\n  pip install --no-cache-dir --no-deps dist/*.whl && \\\n  rm -rf dist *.egg-info\n\n# start a new build stage\nFROM base as runner\n\n# copy everything from /opt\nCOPY --from=builder /opt/venv /opt/venv\n\n# make sure we use the virtualenv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# update permissions & change user to not run as root\nWORKDIR /app\nRUN chgrp -R 0 /app && chmod -R g=u /app\nUSER 1001\n\n# create a volume for temporary data\nVOLUME /tmp\n\n# Create a volume for models\nVOLUME /app/models\n\n# change shell\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# the entry point\nEXPOSE 5005\n\nCMD rasa run \\\n  $([ -n \"$MODEL_PATH\" ] && echo \"-m $MODEL_PATH\") \\\n  $([ -n \"$AUTH_TOKEN\" ] && echo \"--auth-token $AUTH_TOKEN\" ) \\\n  --enable-api --debug\n"
}