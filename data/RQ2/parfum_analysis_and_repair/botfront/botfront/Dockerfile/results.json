{
  "startTime": 1674248910985,
  "endTime": 1674248911846,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 22,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The tag here should match the Meteor version of your app, per .meteor/release\nFROM geoffreybooth/meteor-base:2.0\n\n# Copy app package.json and package-lock.json into container\nCOPY ./botfront/package*.json $APP_SOURCE_FOLDER/\nCOPY ./botfront/postinstall.sh $APP_SOURCE_FOLDER/\nARG ARG_NODE_ENV=production\nENV NODE_ENV $ARG_NODE_ENV\nENV DISABLE_CLIENT_STATS 1\n# Increase Node memory for build\nENV TOOL_NODE_FLAGS --max-old-space-size=4096\n\nRUN bash $SCRIPTS_FOLDER/build-app-npm-dependencies.sh\n\n# Copy app source into container\nCOPY ./botfront $APP_SOURCE_FOLDER/\n\nRUN bash $SCRIPTS_FOLDER/build-meteor-bundle.sh\n\n# Use Debian, because nodegit is too hard to get to work with\n# Alpine >=3.8\nFROM node:12-buster-slim\nRUN apt-get update && apt-get install --no-install-recommends -y python g++ build-essential && rm -rf /var/lib/apt/lists/*;\n\nENV APP_BUNDLE_FOLDER /opt/bundle\nENV SCRIPTS_FOLDER /docker\n\n\n# Copy in entrypoint\nCOPY --from=0 $SCRIPTS_FOLDER $SCRIPTS_FOLDER/\nCOPY ./entrypoint.sh $SCRIPTS_FOLDER\nRUN chmod +x $SCRIPTS_FOLDER/entrypoint.sh\n\n# Copy in app bundle\nCOPY --from=0 $APP_BUNDLE_FOLDER/bundle $APP_BUNDLE_FOLDER/bundle/\n\nRUN bash $SCRIPTS_FOLDER/build-meteor-npm-dependencies.sh\n\n# Nodegit dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y libgssapi-krb5-2 && rm -rf /var/lib/apt/lists/*;\nRUN npm install --prefix $APP_BUNDLE_FOLDER/bundle/programs/server nodegit && npm cache clean --force;\n\n# Those dependencies are needed by the entrypoint.sh script\nRUN npm install -C $SCRIPTS_FOLDER p-wait-for mongodb && npm cache clean --force;\nRUN chgrp -R 0 $SCRIPTS_FOLDER && chmod -R g=u $SCRIPTS_FOLDER\n\nVOLUME [ \"/app/models\"]\nENTRYPOINT [\"/docker/entrypoint.sh\"]\n\nCMD [\"node\", \"main.js\"]\n"
}