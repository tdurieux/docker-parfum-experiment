{
  "startTime": 1674250124606,
  "endTime": 1674250125395,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 69
      }
    }
  ],
  "repairedDockerfile": "ARG PHPVERSION\n\n# Use an official Python runtime as a parent image\nFROM circleci/php:${PHPVERSION}-node-browsers\n\n# Switch to root user\nUSER root\n\n# Install necessary packages for PHP extensions\nRUN apt-get update && \\\n     apt-get install --no-install-recommends -y \\\n        dnsutils \\\n        libmagickwand-dev \\\n        libzip-dev \\\n        libsodium-dev \\\n        libpng-dev \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        zlib1g-dev \\\n        libicu-dev \\\n        libxml2-dev \\\n        g++ \\\n        git && rm -rf /var/lib/apt/lists/*;\n\n# Add necessary PHP Extensions\nRUN docker-php-ext-configure intl\nRUN docker-php-ext-install intl\n\nRUN pecl config-set php_ini /usr/local/etc/php/php.ini && \\\n        pear config-set php_ini /usr/local/etc/php/php.ini && \\\n        pecl channel-update pecl.php.net\n\nARG PHPVERSION\nRUN if [ \"$PHPVERSION\" = \"7.3\" ]; then docker-php-ext-configure gd \\\n        --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/; \\\n    else \\\n        docker-php-ext-configure gd --with-freetype=/usr/include/ --with-jpeg=/usr/include/; fi \\\n    &&  docker-php-ext-install -j$(nproc) gd\n\nRUN docker-php-ext-configure sodium\nRUN docker-php-ext-install sodium\nRUN pecl install libsodium\n\nRUN pecl install imagick\nRUN docker-php-ext-enable imagick\n\nRUN docker-php-ext-install bcmath\n\nRUN docker-php-ext-install soap\n\nRUN pecl install pcov\nRUN docker-php-ext-enable pcov\n\n# Set the memory limit to unlimited for expensive Composer interactions\nRUN echo \"memory_limit=-1\" > /usr/local/etc/php/conf.d/memory.ini\n\n###########################\n# Install build tools things\n###########################\n\n# Set the working directory to /build-tools-ci\nWORKDIR /build-tools-ci\n\n# Copy the current directory contents into the container at /build-tools-ci\nADD . /build-tools-ci\n\n# Collect the components we need for this image\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y ruby jq curl rsync hub && rm -rf /var/lib/apt/lists/*;\nRUN gem install circle-cli\n\n# Make sure we are on the latest version of Composer\nRUN composer selfupdate --2\n\n# Add lab in case anyone wants to automate GitLab MR creation, etc.\nRUN curl -f -s https://raw.githubusercontent.com/zaquestion/lab/master/install.sh | bash\n\n# Create an unpriviliged test user\nRUN groupadd -g 999 tester && \\\n    useradd -r -m -u 999 -g tester tester && \\\n    adduser tester sudo && \\\n    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \\\n    chown -R tester /usr/local && \\\n    chown -R tester /build-tools-ci\nUSER tester\n\n# Install terminus\nRUN curl -f -L https://github.com/pantheon-systems/terminus/releases/download/3.0.3/terminus.phar -o /usr/local/bin/terminus && \\\n    chmod +x /usr/local/bin/terminus\nRUN terminus self:update\n\n# Install CLU\nRUN mkdir -p /usr/local/share/clu\nRUN /usr/bin/env COMPOSER_BIN_DIR=/usr/local/bin composer -n --working-dir=/usr/local/share/clu require danielbachhuber/composer-lock-updater:^0.8.2\n\n# Install Drush\nRUN mkdir -p /usr/local/share/drush\nRUN /usr/bin/env composer -n --working-dir=/usr/local/share/drush require drush/drush \"^10\"\nRUN ln -fs /usr/local/share/drush/vendor/drush/drush/drush /usr/local/bin/drush\nRUN chmod +x /usr/local/bin/drush\n\n# Add a collection of useful Terminus plugins\nRUN terminus self:plugin:add terminus-build-tools-plugin\nRUN terminus self:plugin:add terminus-clu-plugin\nRUN terminus self:plugin:add terminus-secrets-plugin\nRUN terminus self:plugin:add terminus-rsync-plugin\nRUN terminus self:plugin:add terminus-quicksilver-plugin\nRUN terminus self:plugin:add terminus-composer-plugin\nRUN terminus self:plugin:add terminus-drupal-console-plugin\nRUN terminus self:plugin:add terminus-mass-update\nRUN terminus self:plugin:add terminus-site-clone-plugin\n\nENV TERMINUS_PLUGINS_DIR=/home/tester/.terminus/plugins-3.x\nENV TERMINUS_DEPENDENCIES_BASE_DIR=/home/tester/.terminus/terminus-dependencies\n\n# Add phpcs for use in checking code style\nRUN mkdir ~/phpcs && cd ~/phpcs && COMPOSER_BIN_DIR=/usr/local/bin composer require squizlabs/php_codesniffer:^2.7\n\n# Add phpunit for unit testing\nRUN mkdir ~/phpunit && cd ~/phpunit && COMPOSER_BIN_DIR=/usr/local/bin composer require phpunit/phpunit\n\n# Add bats for functional testing\nRUN git clone https://github.com/sstephenson/bats.git; bats/install.sh /usr/local\n\n# Add Behat for more functional testing\nRUN mkdir ~/behat && \\\n    cd ~/behat && \\\n    COMPOSER_BIN_DIR=/usr/local/bin \\\n    composer require \\\n        \"behat/behat:^3.5\" \\\n        \"behat/mink:*\" \\\n        \"behat/mink-extension:^2.2\" \\\n        \"behat/mink-goutte-driver:^1.2\" \\\n        \"drupal/drupal-extension:*\"\n"
}