{
  "startTime": 1674216258565,
  "endTime": 1674216260179,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_VERSION=${PYTHON_VERSION:-\"3\"}\n\nFROM python:${PYTHON_VERSION}-alpine AS builder\n\n# change to app dir\nWORKDIR /app\n\n# install git and build-base (GCC, etc.)\nRUN apk update && \\\n\t  apk upgrade && \\\n    apk add --no-cache bash git openssh && \\\n    apk add --no-cache build-base\n\n# Update Pip3\nRUN python3 -m pip install --upgrade pip\n\n# Install Pipenv\nRUN pip3 install --no-cache-dir pipenv\n\n# Create a virtual environment and activate it\nRUN python3 -m venv /opt/venv\n\nENV PATH=\"/opt/venv/bin:$PATH\" \\\n\tVIRTUAL_ENV=\"/opt/venv\"\n\n# install requirements first to engage docker cache\nRUN python3 -m pip install -U pip\n\nCOPY requirements.txt .\n\nRUN pip3 install --no-cache-dir -r requirements.txt\n\nFROM python:${PYTHON_VERSION}-alpine AS runtime\n\n\nARG VERSION\nARG BUILD\nARG NOW\nARG TINI_VERSION=${TINI_VERSION:-\"v0.19.0\"}\n\n# Install tini to /usr/local/sbin\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-muslc-amd64 /usr/local/sbin/tini\n\n# Install runtime dependencies & create runtime user\nRUN apk --no-cache --no-progress add ca-certificates openssl libffi openblas libstdc++ \\\n \t&& chmod +x /usr/local/sbin/tini && mkdir -p /opt \\\n \t&& adduser -D bes -h /opt/bert-summary -s /bin/sh\n\n# Switch to user context\nUSER bes\nWORKDIR /opt/bert-summary\n\n# Copy the virtual environment from the previous image\nCOPY --from=build /opt/venv /opt/venv\n\n# Activate the virtual environment\nENV PATH=\"/opt/venv/bin:$PATH\" \\\n\t  VIRTUAL_ENV=\"/opt/venv\"\n\n# Set container labels\nLABEL name=\"osat-contrib-bert-summary\" \\\n      version=\"$VERSION\" \\\n      build=\"$BUILD\" \\\n      architecture=\"x86_64\" \\\n      build_date=\"$NOW\" \\\n      vendor=\"osat\" \\\n      url=\"https://github.com/osat.io/osat-docker\" \\\n      summary=\"SeoZ contrib - YAKE\" \\\n      description=\"SeoZ contrib - YAKE\" \\\n      vcs-type=\"git\" \\\n      vcs-url=\"https://github.com/osat.io/osat-docker\" \\\n      vcs-ref=\"$VERSION\" \\\n      distribution-scope=\"public\"\n\n# Copy server startup script\nCOPY ./api.py /opt/bert-summary\n\nENV BERT_SUMMARY_PORT=${BERT_SUMMARY_PORT:-\"5006\"} \\\n\tBERT_SUMMARY_HOST=${BERT_SUMMARY_HOST:-\"0.0.0.0\"}\n\n# Container configuration\n# Expose server port\nEXPOSE \"$BERT_SUMMARY_PORT\"\n\n# Set default command\nENTRYPOINT [\"tini\", \"-g\", \"--\"]\nCMD [ \"python\", \"api.py\" ]\n"
}