{
  "startTime": 1674220474697,
  "endTime": 1674220475356,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 49,
        "columnEnd": 65
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "ARG NODE_VERSION=${NODE_VERSION:-\"14\"}\n\nFROM mhart/alpine-node:${NODE_VERSION} AS front-builder\n\n# Import project's dependencies\nWORKDIR /app\n\nCOPY package.json ./\nCOPY yarn.lock ./\n\nRUN yarn install --network-timeout 1000000000 && yarn cache clean;\n\n# Copy source files\nCOPY . .\n\nRUN yarn build && yarn cache clean;\n\nFROM caddy:2.3.0-rc.1-builder-alpine AS caddy-builder\n\nARG CADDY_VERSION=${CADDY_VERSION:-\"v2.3.0-rc.1\"}\nARG CADDY_PLUGINS=${CADDY_PLUGINS:-\"cors,realip,expires,cache,gzip\"}\n\n# process wrapper\nRUN go get -v github.com/abiosoft/parent && \\\n    go install github.com/abiosoft/parent && \\\n    echo \"GOPATH: $GOPATH\" && \\\n    echo \"PATH: $PATH\" && \\\n    which parent\n\nRUN echo \"VERSION=${CADDY_VERSION} PLUGINS=${CADDY_PLUGINS}\" && \\\n    VERSION=${CADDY_VERSION} PLUGINS=${CADDY_PLUGINS} ENABLE_TELEMETRY=false /bin/sh /usr/bin/caddy-builder\n\nFROM alpine:3.12 AS runtime\n\n# Set build arguments\nARG VERSION\nARG BUILD\nARG NOW\n\n# Install runtime dependencies & create runtime user\nRUN apk --no-cache --no-progress add ca-certificates openssl bash nano \\\n    && adduser -D osat -h /opt/osat -s /bin/sh \\\n    && su osat -c 'cd /opt/osat; mkdir -p www logs'\n\n# Switch to user context\nUSER osat\nWORKDIR /opt/osat\n\n# Copy the virtual environment from the previous image\nCOPY --from=front-builder /app/build /opt/osat/www\n\n# Install caddy\nCOPY --from=caddy-builder /usr/bin/caddy /usr/bin/caddy\n\nCOPY Caddyfile /etc/Caddyfile\nCOPY --from=caddy-builder /go/bin/parent /bin/parent\n\n# Container configuration\nEXPOSE 3000 80 443 2015\nVOLUME /opt/osat/www\n\n# Set container labels\nLABEL name=\"osat-admin\" \\\n    version=\"$VERSION\" \\\n    build=\"$BUILD\" \\\n    architecture=\"x86_64\" \\\n    build_date=\"$NOW\" \\\n    vendor=\"osat\" \\\n    url=\"https://github.com/osat.io/osat-docker\" \\\n    summary=\"SeoZ project with Docker\" \\\n    description=\"SeoZ project with Docker\" \\\n    vcs-type=\"git\" \\\n    vcs-url=\"https://github.com/osat.io/osat-docker\" \\\n    vcs-ref=\"$VERSION\" \\\n    distribution-scope=\"public\"\n\nENTRYPOINT [\"/bin/parent\", \"caddy\"]\nCMD [\"run\", \"--config=/etc/Caddyfile\", \"--watch\"]\n"
}