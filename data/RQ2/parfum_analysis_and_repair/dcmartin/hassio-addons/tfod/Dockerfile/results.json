{
  "startTime": 1674221276965,
  "endTime": 1674221278683,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 5,
        "columnEnd": 108
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 5,
        "columnEnd": 73
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 5,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 5,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 5,
        "columnEnd": 58
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 5,
        "columnEnd": 22
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILD_FROM=hassioaddons/base:2.0.0\n\nFROM $BUILD_FROM\n\nENV LANG C.UTF-8\n\n###\n### ALPINE LINUX ADD-ON\n###\n\nMAINTAINER dcmartin <github@dcmartin.com>\n\nRUN echo \"@testing http://nl.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories\nRUN echo \"@community http://nl.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories\nRUN apk update\n\nRUN apk add --no-cache \\\n  bc \\\n  coreutils \\\n  curl \\\n  dateutils \\\n  findutils \\\n  gawk \\\n  inotify-tools \\\n  jq \\\n  mosquitto-clients \\\n  python3 \\\n  tcsh@community\n\nRUN apk add --no-cache libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev\nRUN apk add --no-cache libavcodec-dev libavformat-dev libswscale-dev libv4l-dev\nRUN apk add --no-cache libxvidcore-dev libx264-dev\nRUN apk add --no-cache qt4-dev-tools\n\nRUN mkdir /tf \\\n  && cd /tf \\\n  && wget https://github.com/lhelontra/tensorflow-on-arm/releases/download/v1.9.0/tensorflow-1.9.0-cp35-none-linux_armv7l.whl \\\n  && pip3 install --no-cache-dir /home/pi/tf/tensorflow-1.8.0-cp35-none-linux_armv7l.whl \\\n  && pip3 install --no-cache-dir pillow lxml jupyter matplotlib cython \\\n  && apk add --no-cache python-tk \\\n  && pip3 install --no-cache-dir opencv-python\n\nRUN apk add --no-cache autoconf automake libtool curl \\\n  && wget https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-all-3.5.1.tar.gz \\\n  && tar -zxvf protobuf-all-3.5.1.tar.gz \\\n  && cd protobuf-3.5.1 \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make check && make install && rm protobuf-all-3.5.1.tar.gz\n\nRUN cd python \\\n  && export LD_LIBRARY_PATH=../src/.libs \\\n  && python3 setup.py build --cpp_implementation \\\n  && python3 setup.py test --cpp_implementation \\\n  && python3 setup.py install --cpp_implementation \\\n  && export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp \\\n  && export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION_VERSION=3 \\\n  && ldconfig\n\nENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION cpp\nENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION_VERSION 3\n\nRUN mkdir /tensorflow && cd /tensorflow \\\n  && git clone --recurse-submodules https://github.com/tensorflow/models.git \\\n  && export PYTHONPATH=$PYTHONPATH:/tensorflow/models/research:/tensorflow/models/research/slim \\\n  && cd /tensorflow/models/research \\\n  && protoc object_detection/protos/*.proto --python_out=.\n\nRUN cd /tensorflow/models/research/object_detection \\\n  && wget https://download.tensorflow.org/models/object_detection/ssdlite_mobilenet_v2_coco_2018_05_09.tar.gz \\\n  && tar -xzvf ssdlite_mobilenet_v2_coco_2018_05_09.tar.gz \\\n  && wget https://raw.githubusercontent.com/EdjeElectronics/TensorFlow-Object-Detection-on-the-Raspberry-Pi/master/Object_detection_picamera.py && rm ssdlite_mobilenet_v2_coco_2018_05_09.tar.gz\n\n# environment\nENV CONFIG_PATH /data/options.json\n\nCMD [ \"/usr/local/bin/run.sh\" ]\n\n# Build arugments\nARG BUILD_ARCH\nARG BUILD_DATE\nARG BUILD_REF\nARG BUILD_VERSION\n\n# Labels\nLABEL \\\n    io.hass.name=\"AGEATHOME\" \\\n    io.hass.description=\"AgeAtHome cognitive assistant\" \\ \n    io.hass.arch=\"${BUILD_ARCH}\" \\\n    io.hass.type=\"addon\" \\\n    io.hass.version=${BUILD_VERSION} \\\n    maintainer=\"David C Martin <github@dcmartin.com>\"\n"
}