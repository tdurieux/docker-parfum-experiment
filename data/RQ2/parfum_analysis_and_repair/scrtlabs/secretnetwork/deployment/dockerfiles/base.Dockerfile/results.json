{
  "startTime": 1674248875726,
  "endTime": 1674248876692,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Simple usage with a mounted data directory:\n# > docker build -t enigma .\n# > docker run -it -p 26657:26657 -p 26656:26656 -v ~/.secretd:/root/.secretd -v ~/.secretcli:/root/.secretcli enigma secretd init\n# > docker run -it -p 26657:26657 -p 26656:26656 -v ~/.secretd:/root/.secretd -v ~/.secretcli:/root/.secretcli enigma secretd start\nFROM enigmampc/rocksdb:v6.24.2 AS build-env-rust-go\n\nENV PATH=\"/root/.cargo/bin:$PATH\"\nENV GOROOT=/usr/local/go\nENV GOPATH=/go/\nENV PATH=$PATH:/usr/local/go/bin:$GOPATH/bin\n\nADD https://go.dev/dl/go1.17.7.linux-amd64.tar.gz go1.17.7.linux-amd64.tar.gz\nRUN tar -C /usr/local -xzf go1.17.7.linux-amd64.tar.gz && rm go1.17.7.linux-amd64.tar.gz\nRUN go install github.com/jteeuwen/go-bindata/go-bindata@latest && go-bindata -version\n\nRUN wget -q https://github.com/WebAssembly/wabt/releases/download/1.0.20/wabt-1.0.20-ubuntu.tar.gz && \\\n    tar -xf wabt-1.0.20-ubuntu.tar.gz wabt-1.0.20/bin/wat2wasm wabt-1.0.20/bin/wasm2wat && \\\n    mv wabt-1.0.20/bin/wat2wasm wabt-1.0.20/bin/wasm2wat /bin && \\\n    chmod +x /bin/wat2wasm /bin/wasm2wat && \\\n    rm -f wabt-1.0.20-ubuntu.tar.gz\n\n\n#### Install rocksdb deps\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    liblz4-dev \\\n    libzstd-dev && rm -rf /var/lib/apt/lists/*;\n#\n\n\n# rm -rf /tmp/rocksdb\n# Set working directory for the build\nWORKDIR /go/src/github.com/enigmampc/SecretNetwork/\n\nARG BUILD_VERSION=\"v0.0.0\"\nARG SGX_MODE=SW\nARG FEATURES\nARG FEATURES_U\nARG DB_BACKEND=goleveldb\nARG CGO_LDFLAGS\n\nENV VERSION=${BUILD_VERSION}\nENV SGX_MODE=${SGX_MODE}\nENV FEATURES=${FEATURES}\nENV FEATURES_U=${FEATURES_U}\nENV MITIGATION_CVE_2020_0551=LOAD\n\nCOPY third_party/build third_party/build\n\n# Add source files\nCOPY go-cosmwasm go-cosmwasm/\nCOPY cosmwasm cosmwasm/\n\nWORKDIR /go/src/github.com/enigmampc/SecretNetwork/\n\nCOPY deployment/docker/MakefileCopy Makefile\n\n# RUN make clean\nRUN make vendor\n\nWORKDIR /go/src/github.com/enigmampc/SecretNetwork/go-cosmwasm\n\nCOPY api_key.txt /go/src/github.com/enigmampc/SecretNetwork/ias_keys/develop/\nCOPY spid.txt /go/src/github.com/enigmampc/SecretNetwork/ias_keys/develop/\nCOPY api_key.txt /go/src/github.com/enigmampc/SecretNetwork/ias_keys/production/\nCOPY spid.txt /go/src/github.com/enigmampc/SecretNetwork/ias_keys/production/\nCOPY api_key.txt /go/src/github.com/enigmampc/SecretNetwork/ias_keys/sw_dummy/\nCOPY spid.txt /go/src/github.com/enigmampc/SecretNetwork/ias_keys/sw_dummy/\n\nRUN . /opt/sgxsdk/environment && env \\\n    && MITIGATION_CVE_2020_0551=LOAD VERSION=${VERSION} FEATURES=${FEATURES} FEATURES_U=${FEATURES_U} SGX_MODE=${SGX_MODE} make build-rust\n\n# Set working directory for the build\nWORKDIR /go/src/github.com/enigmampc/SecretNetwork\n\n# Add source files\nCOPY go-cosmwasm go-cosmwasm\n# This is due to some esoteric docker bug with the underlying filesystem, so until I figure out a better way, this should be a workaround\nRUN true\nCOPY x x\nRUN true\nCOPY types types\nRUN true\nCOPY app app\nCOPY go.mod .\nCOPY go.sum .\nCOPY cmd cmd\nCOPY Makefile .\nRUN true\nCOPY client client\n\nRUN ln -s /usr/lib/x86_64-linux-gnu/liblz4.so /usr/local/lib/liblz4.so  && ln -s /usr/lib/x86_64-linux-gnu/libzstd.so /usr/local/lib/libzstd.so\n\nRUN . /opt/sgxsdk/environment && env && CGO_LDFLAGS=${CGO_LDFLAGS} DB_BACKEND=${DB_BACKEND} MITIGATION_CVE_2020_0551=LOAD VERSION=${VERSION} FEATURES=${FEATURES} SGX_MODE=${SGX_MODE} make build_local_no_rust\nRUN . /opt/sgxsdk/environment && env && MITIGATION_CVE_2020_0551=LOAD VERSION=${VERSION} FEATURES=${FEATURES} SGX_MODE=${SGX_MODE} make build_cli\n\n# RUN rustup target add wasm32-unknown-unknown && apt update -y && apt install clang -y && make build-test-contract\n\n# ENTRYPOINT [\"/bin/bash\", \"go-tests.sh\"]\nENTRYPOINT [\"/bin/bash\"]"
}