{
  "startTime": 1674247904991,
  "endTime": 1674247905642,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install the app dependencies\nFROM swift:5.1 as builder\n\n# Install OS updates\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y zlib1g-dev libcurl4-openssl-dev libssl-dev \\\n && apt-get clean \\\n && echo 'Finished installing dependencies' && rm -rf /var/lib/apt/lists/*;\n\n# Copy extracted project\nWORKDIR \"/project\"\nCOPY . /project\n\n# Replace dependencies with a pristine copy, in case they have been modified\nRUN rm -rf /project/user-app/.appsody\nCOPY ./deps /project/user-app/.appsody\n\n# Build project, and discover executable name\nWORKDIR \"/project/user-app\"\nRUN echo '#!/bin/bash' > run.sh \\\n && swift build -c release | tee output.txt \\\n && cat output.txt | awk 'END {print \"./.build/x86_64-unknown-linux/release/\" $NF}' >> run.sh \\\n && chmod 755 run.sh\n\nFROM swift:5.1-slim\n\n# Define a kitura user\nRUN useradd -ms /bin/bash kitura\n\n# Copy built project\nCOPY --chown=kitura:kitura --from=builder /project /project\n\n# Configure listening port\nENV PORT 8080\nEXPOSE 8080\n\n# Run application as kitura user\nUSER kitura\nWORKDIR \"/project/user-app\"\nCMD [\"./run.sh\"]\n"
}