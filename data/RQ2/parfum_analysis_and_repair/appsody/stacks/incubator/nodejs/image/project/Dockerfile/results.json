{
  "startTime": 1674246992734,
  "endTime": 1674246998653,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install the app dependencies in a full Node docker image\nFROM node:12\n\n# Copying individual files/folders as buildah 1.9.0 does not honour .dockerignore\nCOPY user-app /project/user-app\n# Removing node_modules as we can not make assumptions about file structure of user-app\nRUN rm -rf /project/user-app/node_modules && mkdir -p /project/user-app/node_modules\n\n# Install user-app dependencies\nWORKDIR /project/user-app\nRUN npm install --production && npm cache clean --force;\n\n# Run a build phase. Projects that need to execute build commands can customize the\n# 'build' script in their package.json. The build script should call 'npm install'.\n# If no build is required, just install production dependencies.\nRUN npm run build --if-present\n\n# Uninstall dev dependencies, leaving only production dependencies. Projects can\n# customize the 'prune' script in their package.json.\n# Ideally this would just be 'npm prune', but this command does not have pre/post\n# hooks. Instead, the user's 'prune' script can itself call 'npm prune' in addition\n# to any additional actions required.\nRUN npm run prune --production --if-present\n\n# Creating a tar to work around poor copy performance when using buildah 1.9.0\nRUN cd / && tar czf project.tgz project\n\n# Copy the dependencies into a slim Node docker image\nFROM node:12-slim\n\n# Install common dependencies (TLS and CA support)\nRUN apt-get update && apt-get install --no-install-recommends -y libssl1.1 ca-certificates && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Copy project with dependencies\nCOPY --chown=node:node --from=0 /project.tgz .\nRUN tar xf project.tgz && chown -R node:node project && rm project.tgz\n\nWORKDIR /project/user-app\n\nENV NODE_ENV production\n\nUSER node\n\nCMD [\"npm\", \"start\"]\n"
}