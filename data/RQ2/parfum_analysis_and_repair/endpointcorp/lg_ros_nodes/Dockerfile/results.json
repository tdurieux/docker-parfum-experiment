{
  "startTime": 1674253312648,
  "endTime": 1674253313854,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "ARG UBUNTU_RELEASE=bionic\nFROM ubuntu:${UBUNTU_RELEASE}\nARG UBUNTU_RELEASE\n\n# prevent interactive prompts during build\nENV DEBIAN_FRONTEND noninteractive\n\n# project settings\nENV PROJECT_ROOT $HOME/src/lg_ros_nodes\nENV ROS_DISTRO melodic\n\n# Env for nvidia-docker2/nvidia container runtime\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES all\n\n# entrypoint for ROS setup.bash\nCOPY scripts/docker_entrypoint.sh /ros_entrypoint.sh\nRUN chmod 0755 /ros_entrypoint.sh\nENTRYPOINT [\"/ros_entrypoint.sh\"]\n\n# pre-install some tools for installing further dependencies\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    gnupg \\\n    wget \\\n && rm -rf /var/lib/apt/lists/*\n\n# install system dependencies and tools not tracked in rosdep\nRUN \\\n  echo \"deb http://packages.ros.org/ros/ubuntu ${UBUNTU_RELEASE} main\" > /etc/apt/sources.list.d/ros-latest.list && \\\n  echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" > /etc/apt/sources.list.d/google-chrome.list && \\\n  apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \\\n  wget --no-check-certificate -q -O /tmp/key.pub https://dl-ssl.google.com/linux/linux_signing_key.pub && apt-key add /tmp/key.pub && rm /tmp/key.pub && \\\n  apt-key update && \\\n  apt-get update && \\\n  apt-get install -y --no-install-recommends \\\n    automake autoconf libtool \\\n    g++ pycodestyle cppcheck \\\n    python-pytest wget \\\n    python-gst-1.0 \\\n    python-pip \\\n    python-rosdep \\\n    python-setuptools \\\n    python-rosdep \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-defusedxml \\\n    python3-nose \\\n    python3-pil \\\n    python3-pytest \\\n    python3-netifaces \\\n    python3-serial \\\n    python3-tornado \\\n    git sudo \\\n    curl tmux git \\\n    xvfb x11-apps \\\n    x-window-system binutils \\\n    pulseaudio \\\n    mesa-utils mesa-utils-extra \\\n    module-init-tools gdebi-core \\\n    libxext-dev \\\n    lsb-core tar libfreeimage3 \\\n    openssh-client \\\n    ros-$ROS_DISTRO-rosapi libudev-dev \\\n    ros-$ROS_DISTRO-ros-base ros-$ROS_DISTRO-rosbridge-server ros-$ROS_DISTRO-web-video-server \\\n    ros-$ROS_DISTRO-spacenav-node spacenavd \\\n    google-chrome-stable google-chrome-beta google-chrome-unstable \\\n    awesome xdg-utils \\\n    gstreamer1.0-alsa \\\n && rm -rf /var/lib/apt/lists/*\n\n\n# Install NodeJS and test dependencies\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get install --no-install-recommends -y nodejs \\\n && npm install -g eslint \\\n && rm -rf /var/lib/apt/lists/* && npm cache clean --force;\n\n# Install Python dependencies\nRUN pip install --no-cache-dir python-coveralls \\\n && pip3 install --no-cache-dir \\\n    wheel \\\n    rospkg \\\n    catkin_pkg \\\n    evdev \\\n    bson \\\n    pyinotify \\\n    catkin_tools \\\n    empy \\\n    pycrypto \\\n    pycryptodome \\\n    gnupg\n\n# Install GE\nENV GOOGLE_EARTH_VERSION ec_7.3.0.3832_64\nENV EARTH_PKG_URL https://roscoe-assets.visionport.com:443/google-earth/google-earth-stable_${GOOGLE_EARTH_VERSION}.deb\nRUN mkdir -p /tmp/GE \\\n && cd /tmp/GE \\\n && wget $EARTH_PKG_URL \\\n && dpkg -i $( basename $EARTH_PKG_URL ) \\\n && rm $( basename $EARTH_PKG_URL ) \\\n && if [ -f \"/opt/google/earth/free/libfreebl3.so\" ]; then sed -i \"s_/etc/passwd_/not/anywhr_g\" \"/opt/google/earth/free/libfreebl3.so\"; fi\n\n# add non-root user for tests and production\nENV RUN_USER lg\nENV HOME /home/${RUN_USER}\nRUN \\\n      useradd -ms /bin/bash $RUN_USER && \\\n      usermod -a -G sudo,plugdev,audio,video $RUN_USER && \\\n      mkdir -p $HOME/src ;\\\n      echo \"source /opt/ros/$ROS_DISTRO/setup.bash\" >> /root/.bash_profile ;\\\n      echo \"source /opt/ros/$ROS_DISTRO/setup.bash\" >> $HOME/.bash_profile ;\\\n      mv /bin/sh /bin/sh.bak && ln -s /bin/bash /bin/sh && \\\n      mkdir -p $PROJECT_ROOT/src\n\nCOPY ros_entrypoint.sh ${PROJECT_ROOT}\n\n# clone appctl\n# TODO change to latest tag\nARG APPCTL_TAG=3.0.1\nRUN git clone --branch ${APPCTL_TAG} https://github.com/EndPointCorp/appctl.git /appctl\nRUN ln -snf /appctl/appctl ${PROJECT_ROOT}/\nRUN ln -snf /appctl/appctl_msg_defs ${PROJECT_ROOT}/\n\n# clone command_handler\nRUN git clone https://github.com/EndPointCorp/command_handler.git /command_handler\nRUN ln -snf /command_handler ${PROJECT_ROOT}/\n\n# pre-install dependencies for each package\nCOPY interactivespaces_msgs/package.xml ${PROJECT_ROOT}/interactivespaces_msgs/package.xml\nCOPY lg_activity/package.xml ${PROJECT_ROOT}/lg_activity/package.xml\nCOPY lg_attract_loop/package.xml ${PROJECT_ROOT}/lg_attract_loop/package.xml\nCOPY lg_builder/package.xml ${PROJECT_ROOT}/lg_builder/package.xml\nCOPY lg_common/package.xml ${PROJECT_ROOT}/lg_common/package.xml\nCOPY lg_earth/package.xml ${PROJECT_ROOT}/lg_earth/package.xml\nCOPY lg_json_config/package.xml ${PROJECT_ROOT}/lg_json_config/package.xml\nCOPY lg_keyboard/package.xml ${PROJECT_ROOT}/lg_keyboard/package.xml\nCOPY lg_media/package.xml ${PROJECT_ROOT}/lg_media/package.xml\nCOPY lg_mirror/package.xml ${PROJECT_ROOT}/lg_mirror/package.xml\nCOPY lg_msg_defs/package.xml ${PROJECT_ROOT}/lg_msg_defs/package.xml\nCOPY lg_nav_to_device/package.xml ${PROJECT_ROOT}/lg_nav_to_device/package.xml\nCOPY lg_lock/package.xml ${PROJECT_ROOT}/lg_lock/package.xml\nCOPY lg_navlib/package.xml ${PROJECT_ROOT}/lg_navlib/package.xml\nCOPY lg_offliner/package.xml ${PROJECT_ROOT}/lg_offliner/package.xml\nCOPY lg_panovideo/package.xml ${PROJECT_ROOT}/lg_panovideo/package.xml\nCOPY lg_pointer/package.xml ${PROJECT_ROOT}/lg_pointer/package.xml\nCOPY lg_proximity/package.xml ${PROJECT_ROOT}/lg_proximity/package.xml\nCOPY lg_replay/package.xml ${PROJECT_ROOT}/lg_replay/package.xml\nCOPY lg_rfreceiver/package.xml ${PROJECT_ROOT}/lg_rfreceiver/package.xml\nCOPY lg_screenshot/package.xml ${PROJECT_ROOT}/lg_screenshot/package.xml\nCOPY lg_spacenav_globe/package.xml ${PROJECT_ROOT}/lg_spacenav_globe/package.xml\nCOPY lg_stats/package.xml ${PROJECT_ROOT}/lg_stats/package.xml\nCOPY lg_sv/package.xml ${PROJECT_ROOT}/lg_sv/package.xml\nCOPY lg_twister/package.xml ${PROJECT_ROOT}/lg_twister/package.xml\nCOPY lg_volume_control/package.xml ${PROJECT_ROOT}/lg_volume_control/package.xml\nCOPY lg_wireless_devices/package.xml ${PROJECT_ROOT}/lg_wireless_devices/package.xml\nCOPY liquidgalaxy/package.xml ${PROJECT_ROOT}/liquidgalaxy/package.xml\nCOPY rfid_scanner/package.xml ${PROJECT_ROOT}/rfid_scanner/package.xml\nCOPY rfreceiver/package.xml ${PROJECT_ROOT}/rfreceiver/package.xml\nCOPY spacenav_remote/package.xml ${PROJECT_ROOT}/spacenav_remote/package.xml\nCOPY spacenav_wrapper/package.xml ${PROJECT_ROOT}/spacenav_wrapper/package.xml\nCOPY state_proxy/package.xml ${PROJECT_ROOT}/state_proxy/package.xml\nCOPY wiimote/package.xml ${PROJECT_ROOT}/wiimote/package.xml\nRUN \\\n    source /opt/ros/$ROS_DISTRO/setup.bash && \\\n    apt-get update && \\\n    rosdep init && \\\n    rosdep update --include-eol-distros && \\\n    rosdep install \\\n        --from-paths $PROJECT_ROOT \\\n        --ignore-src \\\n        --rosdistro $ROS_DISTRO \\\n        -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n# install the full package contents\nCOPY ./ ${PROJECT_ROOT}\nRUN \\\n    cd ${PROJECT_ROOT} && \\\n    source /opt/ros/$ROS_DISTRO/setup.bash && \\\n    /ros_entrypoint.sh ./scripts/init_workspace && \\\n    cd ${PROJECT_ROOT}/catkin/ && \\\n    catkin_make && \\\n    catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/$ROS_DISTRO install && \\\n    source $PROJECT_ROOT/catkin/devel/setup.bash && \\\n    chown -R ${RUN_USER}:${RUN_USER} ${PROJECT_ROOT} && \\\n    chown -R ${RUN_USER}:${RUN_USER} ${HOME}\n\nUSER $RUN_USER\n\n# by default let's run tests\n#CMD cd ${PROJECT_ROOT}/catkin && \\\n#    . devel/setup.sh && \\\n#    cd ${PROJECT_ROOT} && \\\n#    ./scripts/docker_xvfb_add.sh && \\\n#    ./scripts/test_runner.py\n"
}