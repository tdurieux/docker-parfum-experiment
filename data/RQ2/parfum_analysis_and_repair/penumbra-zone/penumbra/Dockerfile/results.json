{
  "startTime": 1674254692431,
  "endTime": 1674254693084,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rust:latest as build\n\nRUN curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path --default-toolchain none -y\nRUN rustup component add rustfmt\nRUN apt-get update && apt-get install --no-install-recommends -y clang libclang-dev && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /usr/src\n\nCOPY . .\n\n# Fetch dependencies in a separate layer, so that they can be cached.\nRUN cargo fetch\n\nRUN cargo build --bin pd --release && \\\n    mkdir -p /out && \\\n    mv target/release/pd /out/pd\n\n# Install the penumbra daemon into the runtime image.\n\n# TODO(eliza): it would be nice to be able to run the Penumbra daemon in a\n# `scratch` image rather than Debian or Alpine. However, then we'd have to build\n# with a statically linked libc (read: musl), and musl's malloc exhibits\n# pathologically poor performance for Tokio applications...\nFROM debian:bullseye-slim as runtime\nARG DATABASE_URL\nENV DATABASE_URL=$DATABASE_URL\nWORKDIR /penumbra\nCOPY --from=build /out/pd /usr/bin/pd\nENV RUST_LOG=warn,pd=info,penumbra=info\nCMD [ \"/usr/bin/pd\" ]\n"
}