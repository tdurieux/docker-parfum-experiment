{
  "startTime": 1674217990344,
  "endTime": 1674217991638,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04\n\n\nRUN set -ex; \\\n    apt-get update; \\\n    apt-get upgrade -y && \\\n    apt install --no-install-recommends openjdk-8-jre wget libsnappy1v5 gcc ca-certificates p11-kit -y && \\\n    apt-get clean; \\\n    rm -rf /var/lib/apt/lists/*;\n\n# Grab gosu for easy step-down from root\nENV GOSU_VERSION 1.7\nENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-amd64\n#ENV PATH $JAVA_HOME/bin:$PATH\n\nRUN set -ex; \\\n  wget -nv -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\"; \\\n  wget -nv -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\"; \\\n  export GNUPGHOME=\"$(mktemp -d)\"; \\\n  for server in $(shuf -e ha.pool.sks-keyservers.net \\\n                          hkp://p80.pool.sks-keyservers.net:80 \\\n                          keyserver.ubuntu.com \\\n                          hkp://keyserver.ubuntu.com:80 \\\n                          pgp.mit.edu) ; do \\\n      gpg --batch --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || : ; \\\n  done && \\\n  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n  gpgconf --kill all; \\\n  rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n  chmod +x /usr/local/bin/gosu; \\\n  gosu nobody true\n# Configure Flink version\nENV FLINK_VERSION=1.9.1 \\\n    HADOOP_SCALA_VARIANT=scala_2.12\n# Prepare environment\nENV FLINK_HOME=/opt/flink\nENV PATH=$FLINK_HOME/bin:$PATH\nRUN groupadd --system --gid=9999 flink && \\\n    useradd --system --home-dir $FLINK_HOME --uid=9999 --gid=flink flink\nWORKDIR $FLINK_HOME\nENV FLINK_URL_FILE_PATH=flink/flink-${FLINK_VERSION}/flink-${FLINK_VERSION}-bin-${HADOOP_SCALA_VARIANT}.tgz\n# Not all mirrors have the .asc files\nENV FLINK_TGZ_URL=https://archive.apache.org/dist/${FLINK_URL_FILE_PATH} \\\n    FLINK_ASC_URL=https://archive.apache.org/dist/${FLINK_URL_FILE_PATH}.asc\n\n# For GPG verification instead of relying on key servers\nCOPY KEYS /KEYS\n# Install Flink\nRUN set -ex; \\\n  wget -nv -O flink.tgz \"$FLINK_TGZ_URL\" --no-check-certificate; \\\n  tar -xf flink.tgz --strip-components=1; \\\n  rm flink.tgz; \\\n  \\\n  chown -R flink:flink .;\n\nRUN set -ex; \\\n\t{ \\\n\t\techo '#!/usr/bin/env bash'; \\\n\t\techo 'set -Eeuo pipefail'; \\\n\t\techo 'ls $JAVA_HOME'; \\\n\t\techo 'cp $JAVA_HOME/jre/lib/ $JAVA_HOME/lib -r'; \\\n\t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \\\n\t# 8-jdk uses \"$JAVA_HOME/jre/lib/security/cacerts\" and 8-jre and 11+ uses \"$JAVA_HOME/lib/security/cacerts\" directly (no \"jre\" directory)\n\t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then echo \"f = $f\" && cacertsFile=\"$f\" && echo \"cacertsFile=$cacertsFile\"; break; fi; done'; \\\n\t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \\\n\t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \\\n\t} > /etc/ca-certificates/update.d/docker-openjdk; \\\n\tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \\\n\t/etc/ca-certificates/update.d/docker-openjdk; \\\n\t# https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472\n\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \\\n\tldconfig;\n\nCOPY ./libtensorflow_framework.so.1 /usr/lib/x86_64-linux-gnu/\n\n# Add optional libraries into Flink classpath\nRUN mkdir -p ${FLINK_HOME}/plugins/s3-fs-presto \\\n && mkdir -p ${FLINK_HOME}/plugins/s3-fs-hadoop \\\n && ln -fs ${FLINK_HOME}/opt/flink-s3-fs-presto-${FLINK_VERSION}.jar ${FLINK_HOME}/plugins/s3-fs-presto \\\n && ln -fs ${FLINK_HOME}/opt/flink-s3-fs-hadoop-${FLINK_VERSION}.jar ${FLINK_HOME}/plugins/s3-fs-hadoop\n\n# Configure container\nCOPY docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nEXPOSE 6123 8081\nCMD [\"help\"]\n"
}