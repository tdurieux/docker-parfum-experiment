{
  "startTime": 1674249510849,
  "endTime": 1674249511333,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build Interledger node into standalone binary\nFROM clux/muslrust:stable as rust\n\nWORKDIR /usr/src/interledger-rs\nCOPY ./Cargo.toml /usr/src/interledger-rs/Cargo.toml\nCOPY ./Cargo.lock /usr/src/interledger-rs/Cargo.lock\nCOPY ./crates /usr/src/interledger-rs/crates\nCOPY ./.git /usr/src/interledger-rs/\n\n# TODO: investigate using a method like https://whitfin.io/speeding-up-rust-docker-builds/\n# to ensure that the dependencies are cached so the build doesn't take as long\n# RUN cargo build --all-features --package ilp-node --package ilp-cli\nRUN cargo build --release --all-features --package ilp-node --package ilp-cli\n\nWORKDIR /usr/src/\nRUN git clone https://github.com/interledger-rs/settlement-engines.git\nWORKDIR /usr/src/settlement-engines\nRUN cargo build --release --all-features --package ilp-settlement-ethereum\n\nFROM node:12-alpine\n\n# Expose ports for HTTP server\nEXPOSE 7770\n\n# To save the node's data across runs, mount a volume called \"/data\".\n# You can do this by adding the option `-v data-volume-name:/data`\n# when calling `docker run`.\n\nVOLUME [ \"/data\" ]\n\n# Install SSL certs and Redis\nRUN apk --no-cache add \\\n    ca-certificates \\\n    redis\n\n# Copy Interledger binary\nCOPY --from=rust \\\n    /usr/src/interledger-rs/target/x86_64-unknown-linux-musl/release/ilp-node \\\n    /usr/local/bin/ilp-node\nCOPY --from=rust \\\n    /usr/src/interledger-rs/target/x86_64-unknown-linux-musl/release/ilp-cli \\\n    /usr/local/bin/ilp-cli\nCOPY --from=rust \\\n    /usr/src/settlement-engines/target/x86_64-unknown-linux-musl/release/ilp-settlement-ethereum \\\n    /usr/local/bin/ilp-settlement-ethereum\n# COPY --from=rust \\\n#     /usr/src/interledger-rs/target/x86_64-unknown-linux-musl/debug/ilp-node \\\n#     /usr/local/bin/ilp-node\n# COPY --from=rust \\\n#     /usr/src/interledger-rs/target/x86_64-unknown-linux-musl/debug/ilp-cli \\\n#     /usr/local/bin/ilp-cli\n# COPY --from=rust \\\n#     /usr/src/settlement-engines/target/x86_64-unknown-linux-musl/debug/ilp-settlement-ethereum \\\n#     /usr/local/bin/ilp-settlement-ethereum\n\nWORKDIR /opt/app\n\nRUN npm install -g ilp-settlement-xrp localtunnel && npm cache clean --force;\n\nCOPY ./docker/redis.conf redis.conf\nCOPY ./docker/run-testnet-bundle.js run-testnet-bundle.js\n\n# ENV RUST_BACKTRACE=1\nENV RUST_LOG=interledger=debug,ilp_settlement_ethereum=debug\n\n# In order for the node to access the config file, you need to mount\n# the directory with the node's config.yml file as a Docker volume\n# called \"/config\". You can do this by adding the option\n# `-v /path/to/config.yml:/config` when calling `docker run`.\nVOLUME [ \"/config\" ]\n\nENTRYPOINT [ \"node\", \"run-testnet-bundle.js\" ]\n"
}