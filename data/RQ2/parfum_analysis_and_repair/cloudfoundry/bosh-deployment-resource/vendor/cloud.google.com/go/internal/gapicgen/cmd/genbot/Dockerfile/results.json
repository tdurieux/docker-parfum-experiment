{
  "startTime": 1674256113644,
  "endTime": 1674256114632,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker:stable-dind\n\nRUN apk update && \\\n    apk add --no-cache ca-certificates wget git unzip\n# Install bash and ssh tools (needed to run regen.sh etc).\nRUN apk add --no-cache bash openssh openssh-client\nRUN which bash\n# Install tools necessary for artman.\nRUN apk add --no-cache alpine-sdk build-base openssl-dev\nRUN which gcc\n# Install protoc and protobuf-dev (common protos).\nRUN apk add --no-cache protoc protobuf-dev\nRUN protoc --version\n# Install libc compatibility (required by protoc and go)\nRUN apk add --no-cache libc6-compat\n\n# Install Go.\nRUN wget -O /tmp/go.tgz https://dl.google.com/go/go1.13.4.linux-amd64.tar.gz && \\\n    tar -C /usr/local -xzf /tmp/go.tgz && \\\n    rm /tmp/go.tgz\nENV PATH /usr/local/go/bin:$PATH\nRUN go version\n\n# Install python and pip.\nRUN apk add --no-cache python python3 py-pip py3-pip py-virtualenv py3-virtualenv python2-dev python3-dev libffi-dev\nRUN python --version\nRUN python3 --version\nRUN pip --version\nRUN pip3 --version\nRUN virtualenv --version\n\n# Install Go tools.\nRUN go get \\\n  github.com/golang/protobuf/protoc-gen-go \\\n  golang.org/x/lint/golint \\\n  golang.org/x/tools/cmd/goimports \\\n  honnef.co/go/tools/cmd/staticcheck \\\n  github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_gapic \\\n  golang.org/x/review/git-codereview\nENV PATH=\"${PATH}:/root/go/bin\"\n\n# Source: http://debuggable.com/posts/disable-strict-host-checking-for-git-clone:49896ff3-0ac0-4263-9703-1eae4834cda3\nRUN mkdir /root/.ssh && echo -e \"Host github.com\\n\\tStrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nRUN echo -e '#!/bin/bash\\n\\\nset -ex\\n\\\necho \"https://$GITHUB_USERNAME:$GITHUB_ACCESS_TOKEN@github.com\" > ~/.git-credentials \\n\\\ndockerd-entrypoint.sh &\\n\\\nunset DOCKER_HOST\\n\\\ngo mod download & # download deps whilst we wait for dockerd to start \\n\\\nuntil docker ps; do sleep 1; done # wait for docker to start\\n\\\ndocker ps\\n\\\ndocker pull googleapis/artman:latest & # download latest artman whilst we wait for genbot to start \\n\\\ngo run cloud.google.com/go/internal/gapicgen/cmd/genbot \\\n    --githubAccessToken=$GITHUB_ACCESS_TOKEN \\\n    --githubUsername=$GITHUB_USERNAME \\\n    --githubName=\"$GITHUB_NAME\" \\\n    --githubEmail=$GITHUB_EMAIL \\\n    --gerritCookieValue=$GERRIT_COOKIE_VALUE \\n\\\n' >> /run.sh\nRUN chmod a+x /run.sh\n\nWORKDIR /gapicgen\nCMD [\"bash\", \"-c\", \"/run.sh\"]\n"
}