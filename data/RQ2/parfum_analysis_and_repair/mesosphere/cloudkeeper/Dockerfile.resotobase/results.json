{
  "startTime": 1674251807152,
  "endTime": 1674251808842,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 112
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedDockerfile": "# This is the resoto base container. It includes CPython and pypy and is used\n# as the common base for all the other containers. The main size contributor\n# is the resoto-venv-python3 and resoto-venv-pypy3 virtual environments which\n# are required for all resoto packages. That's why size wise it made sense to\n# use the same base package for all containers.\nARG UI_IMAGE_TAG=latest\nFROM ghcr.io/someengineering/resoto-ui:${UI_IMAGE_TAG} as resoto-ui-env\nFROM docker.io/arangodb/arangodb:3.9.1-noavx as arangodb-amd64-env\nFROM docker.io/programmador/arangodb:3.9.0-devel as arangodb-arm64-env\n\nFROM ubuntu:20.04 as build-env\nENV DEBIAN_FRONTEND=noninteractive\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nARG TESTS\nARG SOURCE_COMMIT\nARG PYTHON_VERSION=3.10.4\nARG PYPY_VERSION=7.3.9\n\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nRUN echo \"I am running on ${BUILDPLATFORM}, building for ${TARGETPLATFORM}\"\nCOPY --from=resoto-ui-env /usr/local/resoto/ui /usr/local/resoto/ui\n# Install Build dependencies\nRUN apt-get update\nRUN apt-get -y dist-upgrade\nRUN apt-get -y --no-install-recommends install apt-utils && rm -rf /var/lib/apt/lists/*;\nRUN apt-get -y --no-install-recommends install \\\n        build-essential \\\n        git \\\n        curl \\\n        unzip \\\n        zlib1g-dev \\\n        libncurses5-dev \\\n        libgdbm-dev \\\n        libgdbm-compat-dev \\\n        libnss3-dev \\\n        libreadline-dev \\\n        libsqlite3-dev \\\n        tk-dev \\\n        lzma \\\n        lzma-dev \\\n        liblzma-dev \\\n        uuid-dev \\\n        libbz2-dev \\\n        rustc \\\n        shellcheck \\\n        findutils \\\n        libtool \\\n        automake \\\n        autoconf \\\n        libffi-dev \\\n        libssl-dev \\\n        cargo \\\n        linux-headers-generic && rm -rf /var/lib/apt/lists/*;\n\n\n# Download and install PyPy\nWORKDIR /build\nRUN mkdir -p /build/pypy\nRUN if [ ${TARGETPLATFORM} = \"linux/amd64\" ]; then \\\n        export PYPY_ARCH=linux64; \\\n    elif [ ${TARGETPLATFORM} = \"linux/arm64\" ]; then \\\n        export PYPY_ARCH=aarch64; \\\n    else \\\n        export PYPY_ARCH=linux64; \\\n    fi; \\\n    curl -f -L -o /tmp/pypy.tar.bz2 https://downloads.python.org/pypy/pypy3.9-v${PYPY_VERSION}-${PYPY_ARCH}.tar.bz2\nRUN tar xjvf /tmp/pypy.tar.bz2 --strip-components=1 -C /build/pypy && rm /tmp/pypy.tar.bz2\nRUN mv /build/pypy /usr/local/pypy\nRUN /usr/local/pypy/bin/pypy3 -m ensurepip\n\n\n# Download and install CPython\nWORKDIR /build/python\nRUN curl -f -L -o /tmp/python.tar.gz https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz\nRUN tar xzvf /tmp/python.tar.gz --strip-components=1 -C /build/python && rm /tmp/python.tar.gz\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations --prefix /usr/local/python\nRUN make -j 12\nRUN make install\nRUN /usr/local/python/bin/python3 -m ensurepip\n\nWORKDIR /usr/local\nRUN /usr/local/python/bin/python3 -m venv resoto-venv-python3\nRUN /usr/local/pypy/bin/pypy3 -m venv resoto-venv-pypy3\n\n# Download and install ArangoDB client on x86 builds (there are no official ArangoDB binaries for arm64)\nWORKDIR /tmp/arangodb\nRUN mkdir -p /tmp/arangodb/amd64 /tmp/arangodb/arm64\nCOPY --from=arangodb-amd64-env /usr/bin/arangodump /tmp/arangodb/amd64/\nCOPY --from=arangodb-amd64-env /usr/bin/arangorestore /tmp/arangodb/amd64/\nCOPY --from=arangodb-arm64-env /usr/bin/arangodump /tmp/arangodb/arm64/\nCOPY --from=arangodb-arm64-env /usr/bin/arangorestore /tmp/arangodb/arm64/\nRUN if [ ${TARGETPLATFORM} = \"linux/amd64\" ]; then \\\n        cp /tmp/arangodb/amd64/* /usr/local/bin/; \\\n    elif [ ${TARGETPLATFORM} = \"linux/arm64\" ]; then \\\n        cp /tmp/arangodb/arm64/* /usr/local/bin/; \\\n    else \\\n        echo \"Building for unknown platform - not copying ArangoDB client binaries\"; \\\n    fi\n\n# Prepare PyPy whl build env\nRUN mkdir -p /build-python\nRUN mkdir -p /build-pypy\n\n# Download and install Python test tools\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip install -U pip wheel tox flake8\nRUN . /usr/local/resoto-venv-pypy3/bin/activate && pypy3 -m pip install -U pip wheel\n\n# Build resotolib\nCOPY resotolib /usr/src/resotolib\nWORKDIR /usr/src/resotolib\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\nRUN . /usr/local/resoto-venv-pypy3/bin/activate && pypy3 -m pip wheel -w /build-pypy -f /build-pypy .\n\n# Build resotocore\nCOPY resotocore /usr/src/resotocore\nWORKDIR /usr/src/resotocore\n#RUN if [ \"X${TESTS:-false}\" = Xtrue ]; then nohup bash -c \"/usr/local/db/bin/arangod --database.directory /tmp --server.endpoint tcp://127.0.0.1:8529 --database.password root &\"; sleep 5; tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\nRUN . /usr/local/resoto-venv-pypy3/bin/activate && pypy3 -m pip wheel -w /build-pypy -f /build-pypy .\n\n# Build resotoworker\nCOPY resotoworker /usr/src/resotoworker\nWORKDIR /usr/src/resotoworker\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\n\n# Build resotometrics\nCOPY resotometrics /usr/src/resotometrics\nWORKDIR /usr/src/resotometrics\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\n\n# Build resotoshell\nCOPY resotoshell /usr/src/resotoshell\nWORKDIR /usr/src/resotoshell\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && tox; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip wheel -w /build-python -f /build-python .\n\n# Build resoto plugins\nCOPY plugins /usr/src/plugins\nWORKDIR /usr/src\nRUN if [ \"X${TESTS:-false}\" = Xtrue ]; then . /usr/local/resoto-venv-python3/bin/activate && find plugins/ -name tox.ini | while read toxini; do cd $(dirname \"$toxini\") && tox && cd - || exit 1; done; fi\nRUN . /usr/local/resoto-venv-python3/bin/activate && find plugins/ -maxdepth 1 -mindepth 1 -type d -print0 | xargs -0 python -m pip wheel -w /build-python -f /build-python\n\n# Workaround until cattrs 22.2.0 is released\nRUN rm -f /build-python/cattrs-22.2.0.dev0-py3-none-any.whl /build-pypy/cattrs-22.2.0.dev0-py3-none-any.whl\n\n# Install all wheels\nRUN . /usr/local/resoto-venv-python3/bin/activate && python -m pip install -f /build-python /build-python/*.whl\nRUN . /usr/local/resoto-venv-pypy3/bin/activate && pypy3 -m pip install -f /build-pypy /build-pypy/*.whl\n\n# Copy image config and startup files\nWORKDIR /usr/src/resoto\nCOPY dockerV2/defaults /usr/local/etc/resoto/defaults\nCOPY dockerV2/common /usr/local/etc/resoto/common\nCOPY dockerV2/bootstrap /usr/local/sbin/bootstrap\nCOPY dockerV2/postflight /usr/local/sbin/postflight\nCOPY dockerV2/resh-shim /usr/local/bin/resh-shim\nCOPY dockerV2/resh-wait /usr/local/bin/resh-wait\nCOPY dockerV2/resotocore-shim /usr/local/bin/resotocore-shim\nCOPY dockerV2/resotoworker-shim /usr/local/bin/resotoworker-shim\nCOPY dockerV2/resotometrics-shim /usr/local/bin/resotometrics-shim\nRUN chmod 755 \\\n    /usr/local/sbin/bootstrap \\\n    /usr/local/sbin/postflight \\\n    /usr/local/bin/resh-shim \\\n    /usr/local/bin/resotocore-shim \\\n    /usr/local/bin/resotoworker-shim \\\n    /usr/local/bin/resotometrics-shim\nRUN if [ \"${TESTS:-false}\" = true ]; then \\\n        shellcheck -a -x -s bash -e SC2034 \\\n            /usr/local/sbin/bootstrap \\\n        ; \\\n    fi\nCOPY dockerV2/dnsmasq.conf /usr/local/etc/dnsmasq.conf\nRUN echo \"${SOURCE_COMMIT:-unknown}\" > /usr/local/etc/git-commit.HEAD\n\n\n# Setup main image\nFROM ubuntu:20.04\nENV DEBIAN_FRONTEND=noninteractive\nENV LANG=\"en_US.UTF-8\"\nENV TERM=\"xterm-256color\"\nENV EDITOR=\"nano\"\nCOPY --from=build-env /usr/local /usr/local\nENV PATH=/usr/local/python/bin:/usr/local/pypy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nWORKDIR /\nRUN groupadd -g \"${PGID:-0}\" -o resoto \\\n    && useradd -g \"${PGID:-0}\" -u \"${PUID:-0}\" -o --create-home resoto \\\n    && apt-get update \\\n    && apt-get -y --no-install-recommends install apt-utils \\\n    && apt-get -y dist-upgrade \\\n    && apt-get -y --no-install-recommends install \\\n        dumb-init \\\n        iproute2 \\\n        dnsmasq \\\n        libffi7 \\\n        openssl \\\n        procps \\\n        dateutils \\\n        curl \\\n        jq \\\n        cron \\\n        ca-certificates \\\n        openssh-client \\\n        locales \\\n        unzip \\\n        nano \\\n        nvi \\\n    && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n    && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n    && mkdir -p /var/run/resoto \\\n    && rm -f /bin/sh \\\n    && ln -s /bin/bash /bin/sh \\\n    && locale-gen \\\n    && /usr/local/sbin/postflight \\\n    && ln -s /usr/local/bin/resh-shim /usr/bin/resh \\\n    && ln -s /usr/local/bin/resotocore-shim /usr/bin/resotocore \\\n    && ln -s /usr/local/bin/resotoworker-shim /usr/bin/resotoworker \\\n    && ln -s /usr/local/bin/resotometrics-shim /usr/bin/resotometrics \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENTRYPOINT [\"/bin/dumb-init\", \"--\", \"/usr/local/sbin/bootstrap\"]\nCMD [\"/bin/bash\"]\n"
}