{
  "startTime": 1674250805985,
  "endTime": 1674250807312,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# libsvm.a is linked with fcntl64, which was added to glibc since 2.28.\n# The earliest Ubuntu release that has glibc >=2.28 by default is 18.10, so the LTS one is 20.04.\n# If any issues occur on 20.04, it may be downgraded back to 18.04 with manual glibc upgrade.\nFROM ubuntu:20.04 AS linux\nENV DEBIAN_FRONTEND noninteractive\nENV SHELL /bin/bash\nARG TZ=US/Eastern\nENV TZ $TZ\nUSER root\nRUN bash -c \"for i in {1..9}; do mkdir -p /usr/share/man/man\\$i; done\" \\\n && echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90noninteractive \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90noninteractive \\\n && apt-get update --fix-missing \\\n && apt-get install -qy --no-install-recommends \\\n    ca-certificates \\\n    tzdata \\\n    locales \\\n    procps \\\n    net-tools \\\n    apt-transport-https \\\n    file \\\n    # -- it allows to start with nvidia-docker runtime --\n    #libnvidia-compute-390 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && locale-gen en_US.UTF-8 \\\n && update-locale LANG=en_US.UTF-8 \\\n && echo \"$TZ\" > /etc/timezone\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nENV NVIDIA_REQUIRE_CUDA \"cuda>=9.1 driver>=390\"\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility,display\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\n\nFROM linux as golang\nARG TARGETPLATFORM\nENV GOLANG_MAJOR_VERSION 1\nENV GOLANG_MINOR_VERSION 18\nENV GOLANG_PATCH_VERSION 1\nENV GOLANG_VERSION $GOLANG_MAJOR_VERSION.$GOLANG_MINOR_VERSION.$GOLANG_PATCH_VERSION\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\nRUN set -ex \\\n && apt-get update --fix-missing \\\n && apt-get install -qy --no-install-recommends \\\n    gcc \\\n\tlibc6-dev \\\n    git \\\n    bash \\\n    sudo \\\n    unzip \\\n    make \\\n    curl \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && if [ \"${TARGETPLATFORM}\" = \"linux/arm64\" ]; then export ARCHITECTURE=arm64; else export ARCHITECTURE=amd64; fi \\\n && curl -f -L https://golang.org/dl/go${GOLANG_VERSION}.linux-${ARCHITECTURE}.tar.gz | tar zx -C /usr/local \\\n && go version \\\n && mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n\nFROM golang as build_base\nWORKDIR /go/src/github.com/spacemeshos/go-spacemesh\n\n# Force the go compiler to use modules\nENV GO111MODULE=on\nENV GOPROXY=https://proxy.golang.org\n\n# We want to populate the module cache based on the go.{mod,sum} files.\nCOPY go.mod .\nCOPY go.sum .\nCOPY scripts/* scripts/\n\n# does not required yet\n# RUN go run scripts/check-go-version.go --major 1 --minor 15\nRUN\tgo mod download\nRUN GO111MODULE=off go get golang.org/x/lint/golint\n\n# This image builds the go-spacemesh server\nFROM build_base AS server_builder\n# Here we copy the rest of the source code\nCOPY . .\n\n# And compile the project\nRUN make build\nRUN make harness\nRUN make gen-p2p-identity\n\n#In this last stage, we start from a fresh Alpine image, to reduce the image size and not ship the Go compiler in our production artifacts.\nFROM linux AS spacemesh\n\n# Finally we copy the statically compiled Go binary.\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/go-spacemesh /bin/\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/go-harness /bin/\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/libgpu-setup.so /bin/\n# TODO(nkryuchkov): uncomment when go-svm is imported\n#COPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/libsvm.so /bin/\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/gen-p2p-identity /bin/\n\nENTRYPOINT [\"/bin/go-harness\"]\nEXPOSE 7513\n\n# profiling port\nEXPOSE 6060\n\n# pubsub port\nEXPOSE 56565\n"
}