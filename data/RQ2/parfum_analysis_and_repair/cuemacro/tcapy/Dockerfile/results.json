{
  "startTime": 1674251546426,
  "endTime": 1674251547157,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 75
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Set the base image to Ubuntu, use a public image\nFROM python:3.7.7-slim-stretch as builder\n\n# To build tests run\n# docker-compose -f docker-compose.test.yml build\n\n# File Author / Maintainer\n# MAINTAINER Thomas Schmelzer \"thomas.schmelzer@gmail.com\"\n\nCOPY requirements.txt /tmp/tcapy/requirements.txt\n\n# Dependencies for pystore and weasyprint in buildDeps\n# If we don't want to use weasyprint we\n# build-essential libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info\nRUN buildDeps='gcc g++ libsnappy-dev unixodbc-dev build-essential libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info' && \\\n    apt-get update && apt-get install -y $buildDeps --no-install-recommends && \\\n    pip install --no-cache-dir -r /tmp/tcapy/requirements.txt && \\\n    rm  /tmp/tcapy/requirements.txt && rm -rf /var/lib/apt/lists/*;\n    # && \\\n    #apt-get purge -y --auto-remove $buildDeps\n\n# Copy to /\nCOPY ./tcapy /tcapy/tcapy\nCOPY ./tcapygen /tcapy/tcapygen\nCOPY ./tcapyuser /tcapy/tcapyuser\nCOPY ./test /tcapy/test\nCOPY ./test /test\n\n# Make sure tcapy on the PYTHONPATH\nENV PYTHONPATH \"${PYTHONPATH}:/tcapy\"\n\n#### Here's the test-configuration\nFROM builder as test\n\n# We install some extra libraries purely for testing\nRUN pip install --no-cache-dir httpretty pytest pytest-cov pytest-html sphinx mongomock requests-mock\n\nWORKDIR /tcapy\n\n# For temp caching for the tests\nRUN mkdir -p /tmp/csv\nRUN mkdir -p /tmp/tcapy\n\nCMD echo \"${RUN_PART}\"\n\n# Run the pytest\n# If RUN_PART is not defined, we're not running on GitHub CI, we're running tests locally\n# Otherwise if RUN_PART is defined, it's likely we're running on GitHub, so we avoid running multithreading tests which run\n# out of memory (machines have limited memory)\nCMD if [ \"${RUN_PART}\" = 1 ]; \\\n    then py.test --cov=tcapy  --cov-report html:artifacts/html-coverage --cov-report term --html=artifacts/html-report/report.html --ignore-glob='*multithreading*.py'; \\\n    else py.test --cov=tcapy  --cov-report html:artifacts/html-coverage --cov-report term \\\n        --html=artifacts/html-report/report.html; \\\n    fi\n\n# Run everything\n# CMD py.test --cov=tcapy  --cov-report html:artifacts/html-coverage --cov-report term \\\n#        --html=artifacts/html-report/report.html\n\n# Example to run a specific test script\n# CMD py.test --cov=tcapy  --cov-report html:artifacts/html-coverage --cov-report term \\\n#    --html=artifacts/html-report/report.html test/test_tcapy/test_tca_multithreading.py\n\n# Example to run an individual test function\n# CMD py.test --cov=tcapy  --cov-report html:artifacts/html-coverage --cov-report term \\\n#    --html=artifacts/html-report/report.html test/test_tcapy/test_data_read_write.py::test_write_trade_data_sql\n\n# For debugging to keep container going\n# CMD tail -f /dev/null\n"
}