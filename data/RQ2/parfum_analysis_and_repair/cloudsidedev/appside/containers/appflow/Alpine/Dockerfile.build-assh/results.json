{
  "startTime": 1674252624914,
  "endTime": 1674252626139,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 1,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM frolvlad/alpine-glibc:alpine-3.6\n\nLABEL Authors=\"Ivo Marino <ivo.marino@ttss.ch>, Luca Di Maio <luca.dimaio@ttss.ch>\"\nLABEL Description=\"AppFlow\" Vendor=\"TTSS AG\" Version=\"1.0\"\n\n# Install my Utils\nRUN apk upgrade --no-cache && \\\n    apk add --no-cache git && \\\n    apk add --no-cache make && \\\n    apk add --no-cache curl && \\\n    apk add --no-cache bash && \\\n    apk add --no-cache openssh && \\\n    apk add --no-cache ansible\n\n# Install goLang\nENV GOLANG_VERSION 1.8.3\nCOPY *.patch /go-alpine-patches/\n\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps \\\n\t\tbash \\\n\t\tgcc \\\n\t\tmusl-dev \\\n\t\topenssl \\\n\t\tgo \\\n\t; \\\n\texport \\\n# set GOROOT_BOOTSTRAP such that we can actually build Go\n\t\tGOROOT_BOOTSTRAP=\"$(go env GOROOT)\" \\\n# ... and set \"cross-building\" related vars to the installed system's values so that we create a build targeting the proper arch\n# (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)\n\t\tGOOS=\"$(go env GOOS)\" \\\n\t\tGOARCH=\"$(go env GOARCH)\" \\\n\t\tGO386=\"$(go env GO386)\" \\\n\t\tGOARM=\"$(go env GOARM)\" \\\n\t\tGOHOSTOS=\"$(go env GOHOSTOS)\" \\\n\t\tGOHOSTARCH=\"$(go env GOHOSTARCH)\" \\\n\t; \\\n\n\twget -O go.tgz \"https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz\"; \\\n\techo '5f5dea2447e7dcfdc50fa6b94c512e58bfba5673c039259fd843f68829d99fa6  *go.tgz' | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tcd /usr/local/go/src; \\\n\tfor p in /go-alpine-patches/*.patch; do \\\n\t\t[ -f \"$p\" ] || continue; \\\n\t\tpatch -p2 -i \"$p\"; \\\n\tdone; \\\n\t./make.bash; \\\n\n\trm -rf /go-alpine-patches; \\\n\tapk del .build-deps; \\\n\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n\nCOPY go-wrapper /usr/local/bin/\n\n# Install ASSH\nRUN go get -u github.com/moul/advanced-ssh-config/cmd/assh && \\\n    mv /go/bin/assh /usr/local/bin/assh\n\n# Install Appflow\nRUN git clone https://github.com/ttssdev/appflow /opt/appflow && \\\n    ln -s /opt/appflow/appflow /usr/local/bin/appflow\n\nRUN rm -rf /go && \\\n\trm -rf /usr/local/go\n\nCOPY run.sh /usr/local/bin/run.sh\n\nENTRYPOINT [\"run.sh\"]\n"
}