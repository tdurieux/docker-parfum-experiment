{
  "startTime": 1674255435017,
  "endTime": 1674255436061,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:14.04\nMAINTAINER Dan Liew <daniel.liew@imperial.ac.uk>\n\nENV CONTAINER_USER=sbx \\\n    BUILD_TYPE=Release \\\n    MONO_VERSION=4.8.0 \\\n    SBX_SRC=/home/sbx/symbooglix \\\n    SKIP_SUBMODULE_SETUP=1\n\n# FIXME: This is overkill, we don't need everything from mono.\n# Note ca-certificates-mono is needed so NuGet can pull down the packages we need.\nRUN apt-get update && apt-get -y --no-install-recommends install wget && \\\n    wget -O - https://download.mono-project.com/repo/xamarin.gpg | apt-key add - && \\\n    echo \"deb http://download.mono-project.com/repo/debian wheezy/snapshots/${MONO_VERSION} main\" > /etc/apt/sources.list.d/mono-xamarin.list && \\\n    wget -O - https://download.opensuse.org/repositories/home:delcypher:z3/xUbuntu_14.04/Release.key | apt-key add - && \\\n    echo 'deb http://download.opensuse.org/repositories/home:/delcypher:/z3/xUbuntu_14.04/ /' >> /etc/apt/sources.list.d/smt.list && \\\n    apt-get update && \\\n    apt-get -y install --no-install-recommends mono-devel ca-certificates-mono z3=4.4.1-0 && rm -rf /var/lib/apt/lists/*;\n\n# Create user for container with password set to the user name\n# Give it sudo access so it possible to install new packages inside the container.\n# NEVER EVER EVER EVER USE THIS CONTAINER IN PRODUCTION DUE HOW EASY IT IS\n# TO GET ROOT PRIVILIDGES WITH THE ${CONTAINER_USER} USER!\nRUN useradd -m ${CONTAINER_USER} && \\\n    echo ${CONTAINER_USER}:${CONTAINER_USER} | chpasswd && \\\n    echo \"${CONTAINER_USER}  ALL=(root) ALL\" >> /etc/sudoers\n\nWORKDIR /home/${CONTAINER_USER}/\n\n# Setup Python\n# Note python3-dev installs gcc. We need that so pyyaml gets built properly\n# but remove gcc (and other bits) afterwards to save space\nRUN apt-get -y --no-install-recommends install python3 python3-pip libyaml-dev && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3 10 && \\\n    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 10 && \\\n    apt-get -y --no-install-recommends install python3-dev && \\\n    pip install --no-cache-dir psutil pyyaml lit OutputCheck && \\\n    apt-get remove -y python3-dev && apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\n\n# Copy across the sources.\n# This assumes that the git submodules have been initialised\nRUN mkdir -p ${SBX_SRC}\nADD README.md ${SBX_SRC}/\nADD ExternalLibs ${SBX_SRC}/ExternalLibs/\nADD src ${SBX_SRC}/src\nADD test_programs ${SBX_SRC}/test_programs\nADD utils ${SBX_SRC}/utils\nRUN chown --recursive ${CONTAINER_USER} ${SBX_SRC}\n\n# Switch to container user and build\nUSER ${CONTAINER_USER}\nRUN cd ${SBX_SRC} && \\\n    utils/travis-prepare.sh && \\\n    utils/travis-build.sh\n\n# Put sbx.exe in the user's PATH\nRUN echo 'export PATH=$PATH:${SBX_SRC}/src/SymbooglixDriver/bin/${BUILD_TYPE}' >> \\\n    /home/${CONTAINER_USER}/.bashrc\n\n# TODO: Run tests in container\n"
}