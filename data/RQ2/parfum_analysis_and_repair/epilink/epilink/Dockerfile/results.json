{
  "startTime": 1674220540082,
  "endTime": 1674220541289,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#############################################\n# EpiLink building stage                    #\n#############################################\nFROM --platform=amd64 eclipse-temurin:17-jdk-alpine AS builder\n\nLABEL maintainer=\"Adrien Navratil <adrien1975@live.fr>\"\n\n# Install Node and NPM for building the front-end\n# TODO this takes a *lot* of time due to updating dependencies, is there anyway to make this faster?\nRUN apk add --no-cache npm\n\n# Set up build folder\nENV BUILD_ROOT /tmp/epilink-build\nRUN mkdir -p $BUILD_ROOT\nWORKDIR ${BUILD_ROOT}\n\n# This is just to let the Gradle wrapper download everything it needs and avoid re-doing that every time\nCOPY gradle ${BUILD_ROOT}/gradle\nCOPY gradlew ${BUILD_ROOT}/\nRUN chmod +x gradlew && ./gradlew --version\n\n# Copy build files\nCOPY *.gradle LICENSE LHEADER gradle.properties ${BUILD_ROOT}\nCOPY buildSrc ${BUILD_ROOT}/buildSrc\n\n# Install the web app dependencies first before copying source files to speed up re-builds\nCOPY web/package.json web/package-lock.json web/build.gradle ./web/\nRUN ./gradlew npmInstall\n\n# Actually copy everything else\nCOPY web ./web\nCOPY bot ./bot\n\n# Build everything\nRUN ./gradlew :epilink-backend:installDist -PwithFrontend && \\\n    mkdir /tmp/epilink-backend && \\\n    cp -r bot/build/install/epilink-backend-withFrontend/* /tmp/epilink-backend\n\n\n#############################################\n# JRE building stage                        #\n#############################################\n# Prepare a lightweightish JLink'd JRE image\n# From https://hub.docker.com/_/eclipse-temurin/\n# TODO Restrict list of modules to ship a lighter image, I'm not sure of which ones are strictly necessary here.\nFROM --platform=amd64 eclipse-temurin:17-jdk-alpine AS jre\n\nRUN apk add --no-cache binutils && \\\n    $JAVA_HOME/bin/jlink \\\n    --add-modules java.base,java.desktop,java.logging,java.management,java.management.rmi,java.net.http,java.prefs,java.rmi,java.scripting,java.security.jgss,java.security.sasl,java.smartcardio,java.sql,java.sql.rowset,java.transaction.xa,java.xml,java.xml.crypto,jdk.crypto.ec,jdk.unsupported,jdk.zipfs \\\n    --strip-debug \\\n    --no-man-pages \\\n    --no-header-files \\\n    --compress=2 \\\n    --output /jre\n\n\n#############################################\n# AMD64 (Alpine-based) runner               #\n#############################################\nFROM alpine:3.15 as runner-amd64\n\nENV USER epilink\nENV LINK_ROOT /var/run/epilink\nENV JAVA_HOME /var/run/jre\n\n# Creating the app folder and runner user\nRUN mkdir -p $LINK_ROOT $JAVA_HOME && \\\n    addgroup -g 1000 -S $USER && adduser -u 1000 -S $USER -G $USER && \\\n    chown $USER:$USER $LINK_ROOT && \\\n    chown $USER:$USER $JAVA_HOME\n\nUSER $USER\n\n# Install the JRE.\nCOPY --from=jre /jre/ ${JAVA_HOME}/\n\n# Get in the EpiLink folder for installation.\nWORKDIR $LINK_ROOT\n\n# Install files from BUILDER step.\nCOPY --from=builder /tmp/epilink-backend ./\n\n# Then run the script.\nCOPY docker/run.sh ./run\n\n# Final settings\nEXPOSE 9090\nCMD [\"/bin/sh\", \"./run\"]\n\n#############################################\n# ARM (Ubuntu-based) runner                 #\n#############################################\nFROM eclipse-temurin:17-jre-focal as runner-arm-common\n\nENV USER epilink\nENV LINK_ROOT /var/run/epilink\n\n# Creating the app folder and runner user\nRUN mkdir -p $LINK_ROOT && \\\n    addgroup --gid 1000 --system $USER && adduser --uid 1000 --system $USER --ingroup $USER && \\\n    chown $USER:$USER $LINK_ROOT\n\nUSER $USER\n\n# Get in the EpiLink folder for installation.\nWORKDIR $LINK_ROOT\n\n# Install files from BUILDER step.\nCOPY --from=builder /tmp/epilink-backend ./\n\n# Then run the script.\nCOPY docker/run.sh ./run\n\n# Final settings\nEXPOSE 9090\nCMD [\"/bin/sh\", \"./run\"]\n\nFROM runner-arm-common AS runner-arm64\nFROM runner-arm-common AS runner-arm\n\n# Take the correct image according to the targeted architecture\n# See also https://github.com/docker/buildx/issues/805#issuecomment-946478949\nFROM runner-${TARGETARCH}"
}