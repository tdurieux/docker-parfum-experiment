{
  "startTime": 1674251039241,
  "endTime": 1674251040408,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 98
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 59,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 5,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7.10-buster AS base\n\n\n# shared between builder and runtime image\nRUN apt-get update \\\n    && apt-get install -y --assume-yes --no-install-recommends \\\n        dumb-init \\\n        poppler-utils \\\n        libgl1 \\\n        # install LibreOffice Write to convert Word to PDF\n        # also install fonts and fontconfig to provide common fonts\n        # or configuration to their alternatives\n        libreoffice-writer \\\n        python3-uno \\\n        fonts-liberation \\\n        fonts-liberation2 \\\n        fonts-crosextra-carlito \\\n        fonts-crosextra-caladea \\\n        fontconfig \\\n    && rm -rf /var/lib/apt/lists/*\n\n# set and check UNO_PATH, UNO_PYTHON_PATH and UNO_OFFICE_BINARY_PATH\nENV UNO_PATH=/usr/lib/python3/dist-packages\nENV UNO_PYTHON_PATH=python3.7\nENV UNO_OFFICE_BINARY_PATH=/usr/lib/libreoffice/program/soffice.bin\nRUN \\\n  echo \"UNO_PATH: ${UNO_PATH}\" \\\n  && ls -l \"${UNO_PATH}\" \\\n  && echo \"UNO_PYTHON_PATH: ${UNO_PYTHON_PATH}\" \\\n  && PYTHONPATH=\"${UNO_PATH}\" \"${UNO_PYTHON_PATH}\" -c 'import uno, unohelper' \\\n  && echo \"UNO_OFFICE_BINARY_PATH: ${UNO_OFFICE_BINARY_PATH}\" \\\n  && ls -l \"${UNO_OFFICE_BINARY_PATH}\"\n\nWORKDIR /opt/sciencebeam_parser\n\nENV VENV=/opt/venv\nENV VIRTUAL_ENV=${VENV} PYTHONUSERBASE=${VENV} PATH=${VENV}/bin:$PATH\n\n\n# builder-base\nFROM base AS builder-base\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        gcc \\\n        libtesseract4 \\\n        tesseract-ocr-eng \\\n        libtesseract-dev \\\n        libleptonica-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.build.txt ./\nRUN python3 -m venv ${VENV} \\\n    && pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location -r requirements.build.txt\n\n\nFROM builder-base AS builder\n\nCOPY requirements.cpu.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.cpu.txt\n\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.txt\n\nCOPY requirements.delft.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.delft.txt --no-deps\n\n\n# builder\nFROM builder-base AS builder-cv\n\nCOPY requirements.cpu.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.cpu.txt\n\nCOPY requirements.cv.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.cv.txt\n\nCOPY requirements.ocr.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.ocr.txt\n\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.txt\n\nCOPY requirements.delft.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.delft.txt --no-deps\n\n\n# dev image\nFROM builder-cv AS dev\n\nCOPY requirements.dev.txt ./\nRUN pip install --no-cache-dir --disable-pip-version-check --no-warn-script-location \\\n    -r requirements.dev.txt\n\nCOPY sciencebeam_parser ./sciencebeam_parser\nCOPY tests ./tests\nCOPY test-data ./test-data\nCOPY scripts/dev ./scripts/dev\nCOPY doc ./doc\nCOPY .flake8 .pylintrc setup.py MANIFEST.in README.md ./\n\n# temporary workaround for tesserocr https://github.com/sirfz/tesserocr/issues/165\nENV LC_ALL=C\n\n\n# runtime image\nFROM base AS runtime\n\nCOPY --from=builder /opt/venv /opt/venv\n\nCOPY sciencebeam_parser ./sciencebeam_parser\n\nCOPY docker/entrypoint.sh ./docker/entrypoint.sh\n\nENV SCIENCEBEAM_DELFT_MAX_SEQUENCE_LENGTH=2000\nENV SCIENCEBEAM_DELFT_INPUT_WINDOW_STRIDE=1800\n\nCMD [ \"--port=8070\", \"--host=0.0.0.0\" ]\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/opt/sciencebeam_parser/docker/entrypoint.sh\"]\n\n\n# runtime-cv image\nFROM base AS runtime-cv\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        libtesseract4 \\\n        tesseract-ocr-eng \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder-cv /opt/venv /opt/venv\n\nCOPY sciencebeam_parser ./sciencebeam_parser\n\nCOPY docker/entrypoint.sh ./docker/entrypoint.sh\n\nENV SCIENCEBEAM_DELFT_MAX_SEQUENCE_LENGTH=2000\nENV SCIENCEBEAM_DELFT_INPUT_WINDOW_STRIDE=1800\n\n# temporary workaround for tesserocr https://github.com/sirfz/tesserocr/issues/165\nENV LC_ALL=C\n\nCMD [ \"--port=8070\", \"--host=0.0.0.0\" ]\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/opt/sciencebeam_parser/docker/entrypoint.sh\"]\n"
}