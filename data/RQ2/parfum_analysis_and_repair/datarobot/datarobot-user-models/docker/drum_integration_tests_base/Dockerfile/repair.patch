diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/datarobot/datarobot-user-models/docker/drum_integration_tests_base/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/datarobot/datarobot-user-models/docker/drum_integration_tests_base/Dockerfile/repaired.Dockerfile
index 1dd41c2..4330110 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/datarobot/datarobot-user-models/docker/drum_integration_tests_base/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/datarobot/datarobot-user-models/docker/drum_integration_tests_base/Dockerfile/repaired.Dockerfile
@@ -47,7 +47,7 @@ RUN apt-get install -y --no-install-recommends \
         r-cran-tidyverse \
         r-cran-pack \
         r-cran-rook && \
-    rm -rf /var/lib/apt/lists/
+    rm -rf /var/lib/apt/lists/ && rm -rf /var/lib/apt/lists/*;
 
 RUN Rscript -e "install.packages(c('gert', 'usethis', 'devtools'), Ncpus=4)"
 
@@ -63,18 +63,18 @@ RUN rm -rf /tmp/downloaded_packages/ /tmp/*.rds
 ## Install python 3.7.10 from source with --enabled-shared flag.
 ## In this case python will be dynamically linked to libpython.so, which is required for Julia.
 ## When python is installed as a package it is statically linked to libpython.a, which Julia doesn't like.
-RUN apt update -y && apt install -y software-properties-common libsqlite3-dev libffi-dev && \
+RUN apt update -y && apt install --no-install-recommends -y software-properties-common libsqlite3-dev libffi-dev && \
     add-apt-repository ppa:deadsnakes/ppa && \
     wget https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tgz && \
     tar zxvf Python-3.7.10.tgz && \
     cd Python-3.7.10 && \
-    ./configure --enable-shared --enable-loadable-sqlite-extensions && \
-    make install
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-shared --enable-loadable-sqlite-extensions && \
+    make install && rm Python-3.7.10.tgz && rm -rf /var/lib/apt/lists/*;
 # By default, `make install' will install all the files in
 # `/usr/local/bin', `/usr/local/lib' etc. You can specify
 # an installation prefix other than `/usr/local' using `--prefix',
 # for instance `--prefix=$HOME'.
-RUN apt install -y python3.7-dev
+RUN apt install --no-install-recommends -y python3.7-dev && rm -rf /var/lib/apt/lists/*;
 # Create wirtual env
 RUN python3.7 -m pip install -U pip && \
     python3.7 -m pip install setuptools wheel virtualenv && \
@@ -86,7 +86,7 @@ COPY requirements_drum.txt requirements_dropin.txt /tmp/
 
 # uwsgi is an extra dependency and it shouldn't be in requirements_drum.txt, so install it explicitly
 RUN cd /opt && . v3.7/bin/activate && \
-    pip install -r /tmp/requirements_drum.txt -r /tmp/requirements_dropin.txt uwsgi && \
+    pip install --no-cache-dir -r /tmp/requirements_drum.txt -r uwsgi && \
     rm -rf /root/.cache/pip
 
 # # install julia 1.5.4
@@ -94,7 +94,7 @@ ENV HOME /opt
 RUN wget https://julialang-s3.julialang.org/bin/linux/x64/1.5/julia-1.5.4-linux-x86_64.tar.gz && \
     tar zxvf julia-1.5.4-linux-x86_64.tar.gz && \
     mkdir $HOME/.julia && \
-    mkdir $HOME/julia
+    mkdir $HOME/julia && rm julia-1.5.4-linux-x86_64.tar.gz
 
 COPY sysim.jl $HOME/julia/sysim.jl
 ENV JULIA_HOME=/julia-1.5.4