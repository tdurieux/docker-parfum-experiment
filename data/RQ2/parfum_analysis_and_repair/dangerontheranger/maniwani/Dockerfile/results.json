{
  "startTime": 1674249706746,
  "endTime": 1674249707614,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 35,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 35,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 93
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 35,
        "columnEnd": 85
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04 AS dev\nWORKDIR /maniwani\nENV DEBIAN_FRONTEND=noninteractive\n# backend dependencies/frontend depndencies/uwsgi, python and associated plugins\nRUN apt-get update && apt-get -y --no-install-recommends install python3 python3-pip \\\n\tpipenv uwsgi-core uwsgi-plugin-python3 uwsgi-plugin-gevent-python3 python3-gevent nodejs npm && rm -rf /var/lib/apt/lists/*;\n# install static build of ffmpeg and compress with upx\nCOPY build-helpers/ffmpeg_bootstrap.py /maniwani/build-helpers/\nWORKDIR /maniwani/build-helpers\nRUN python3 ffmpeg_bootstrap.py && apt-get -y --no-install-recommends install upx-ucl && \\\n\tchmod +w ../ffmpeg/ffmpeg && \\\n\tupx -9 ../ffmpeg/ffmpeg && apt-get autoremove -y upx-ucl && \\\n\trm -rf /var/lib/apt/lists/*\nWORKDIR /maniwani\nCOPY Pipfile /maniwani\nCOPY Pipfile.lock /maniwani\nRUN pipenv install --system --deploy\n# point MANIWANI_CFG to the devmode config file\nENV MANIWANI_CFG=./deploy-configs/devmode.cfg\n# build static frontend files\nCOPY package.json /maniwani\nCOPY package-lock.json /maniwani\nCOPY Gulpfile.js /maniwani\nCOPY scss /maniwani/scss\nRUN npm install && npm run gulp && rm -rf node_modules && npm cache clean --force;\n# build react render sidecar\nWORKDIR /maniwani-frontend\nCOPY frontend/package.json /maniwani-frontend\nCOPY frontend/package-lock.json /maniwani-frontend\nRUN npm install && npm cache clean --force;\nCOPY frontend/src /maniwani-frontend/src\nCOPY frontend/Gulpfile.js /maniwani-frontend\nRUN npm run gulp\nRUN cp -r build/* /maniwani-frontend/\nCOPY frontend/devmode-entrypoint.sh /maniwani-frontend\n# TODO: how do we do this when running/deploying without docker?\nRUN mkdir -p /maniwani/static/js\nRUN cp /maniwani-frontend/build/client-bundle/*.js /maniwani/static/js/\n# copy source files over\nWORKDIR /maniwani\nCOPY migrations /maniwani/migrations\nCOPY *.py /maniwani/\nCOPY blueprints /maniwani/blueprints\nCOPY build-helpers/docker-entrypoint.sh /maniwani/build-helpers/\nCOPY deploy-configs /maniwani/deploy-configs\nCOPY model /maniwani/model\nCOPY resources /maniwani/resources\nCOPY templates /maniwani/templates\nCOPY ./build-helpers/docker-entrypoint.sh ./docker-entrypoint.sh\n# bootstrap dev image\nRUN python3 bootstrap.py\nEXPOSE 5000\n\nENTRYPOINT [\"sh\", \"./docker-entrypoint.sh\", \"devmode\"]\n\nFROM dev AS prod\nWORKDIR /maniwani\n# clean up dev image bootstrapping\nRUN rm ./deploy-configs/test.db\nRUN rm -r uploads\nRUN apt-get -y autoremove npm nodejs\nENV MANIWANI_CFG=./deploy-configs/maniwani.cfg\n# chown and switch users for security purposes\nRUN adduser --disabled-login maniwani\nRUN chown -R maniwani:maniwani ./\nUSER maniwani\n\n# expose uWSGI\nEXPOSE 3031\nENTRYPOINT [\"sh\", \"./docker-entrypoint.sh\"]\n"
}