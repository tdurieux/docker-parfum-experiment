{
  "startTime": 1674255292033,
  "endTime": 1674255293137,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 21,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-base-ubuntu18.04\n\nLABEL maintainer=\"Amazon AI\"\n# Specify LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT\n# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n\n# Add arguments to achieve the version, python and url\nARG PYTHON=python3\nARG PIP=pip3\nARG TFS_SHORT_VERSION=1.15.2\nARG TF_MODEL_SERVER_SOURCE=https://tensorflow-aws.s3-us-west-2.amazonaws.com/${TFS_SHORT_VERSION}/Serving/GPU/tensorflow_model_server\n\n# See http://bugs.python.org/issue19846\nENV LANG=C.UTF-8\nENV NCCL_VERSION=2.4.7-1+cuda10.0\nENV CUDNN_VERSION=7.5.1.10-1+cuda10.0\nENV TF_TENSORRT_VERSION=5.0.2\nENV TF_TENSORRT_LIB_VERSION=5.1.2\nENV PYTHONDONTWRITEBYTECODE=1\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONUNBUFFERED=1\nENV SAGEMAKER_TFS_VERSION=\"${TFS_SHORT_VERSION}\"\nENV PATH=\"$PATH:/sagemaker\"\nENV MODEL_BASE_PATH=/models\n# The only required piece is the model name in order to differentiate endpoints\nENV MODEL_NAME=model\n# Prevent docker build from getting stopped by request for user interaction\nENV DEBIAN_FRONTEND=noninteractive\n\n# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771\n# Fix cuda repo's GPG key. Nvidia is no longer updating the machine-learning repo.\n# Need to manually pull and install necessary debs to continue using these versions.\nRUN rm /etc/apt/sources.list.d/cuda.list \\\n&& apt-key del 7fa2af80 \\\n&& apt-get update && apt-get install -y --no-install-recommends wget \\\n&& wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-keyring_1.0-1_all.deb \\\n&& dpkg -i cuda-keyring_1.0-1_all.deb \\\n&& wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/libcudnn7_${CUDNN_VERSION}_amd64.deb \\\n&& dpkg -i libcudnn7_${CUDNN_VERSION}_amd64.deb \\\n&& wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/libnccl2_${NCCL_VERSION}_amd64.deb \\\n&& dpkg -i libnccl2_${NCCL_VERSION}_amd64.deb \\\n&& rm *.deb && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    cuda-command-line-tools-10-0 \\\n    cuda-cublas-10-0 \\\n    cuda-cufft-10-0 \\\n    cuda-curand-10-0 \\\n    cuda-cusolver-10-0 \\\n    cuda-cusparse-10-0 \\\n    libgomp1 \\\n    curl \\\n    git \\\n    wget \\\n    vim \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s /usr/local/bin/pip3 /usr/bin/pip\n\n# nginx + njs\nRUN apt-get update \\\n && apt-get -y install --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n && curl -f -s https://nginx.org/keys/nginx_signing.key | apt-key add - \\\n && echo 'deb http://nginx.org/packages/ubuntu/ bionic nginx' >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get -y install --no-install-recommends \\\n    nginx \\\n    nginx-module-njs \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# cython, falcon, gunicorn, grpc\nRUN ${PIP} install -U --no-cache-dir \\\n    boto3 \\\n    awscli==1.18.34 \\\n    pyYAML==5.3.1 \\\n    cython==0.29.12 \\\n    falcon==2.0.0 \\\n    gunicorn==19.9.0 \\\n    gevent==1.4.0 \\\n    requests==2.22.0 \\\n    grpcio==1.24.1 \\\n    protobuf==3.10.0 \\\n# using --no-dependencies to avoid installing tensorflow binary\n && ${PIP} install --no-dependencies --no-cache-dir \\\n    tensorflow-serving-api-gpu==1.15.0\n\n# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771\n# Fix cuda repo's GPG key. Nvidia is no longer updating the machine-learning repo.\n# Need to manually pull and install necessary debs to continue using these versions.\nRUN wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvinfer-runtime-trt-repo-ubuntu1804-${TF_TENSORRT_VERSION}-ga-cuda10.0_1-1_amd64.deb \\\n&& dpkg -i nvinfer-runtime-trt-repo-ubuntu1804-${TF_TENSORRT_VERSION}-ga-cuda10.0_1-1_amd64.deb \\\n&& wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/libnvinfer5_${TF_TENSORRT_LIB_VERSION}-1+cuda10.0_amd64.deb \\\n&& dpkg -i libnvinfer5_${TF_TENSORRT_LIB_VERSION}-1+cuda10.0_amd64.deb \\\n&& rm *.deb \\\n&& rm -rf /var/lib/apt/lists/* \\\n&& rm /usr/lib/x86_64-linux-gnu/libnvinfer_plugin* \\\n&& rm /usr/lib/x86_64-linux-gnu/libnvcaffe_parser* \\\n&& rm /usr/lib/x86_64-linux-gnu/libnvparsers*\n\nCOPY sagemaker /sagemaker\n\nRUN curl -f ${TF_MODEL_SERVER_SOURCE} -o /usr/bin/tensorflow_model_server \\\n && chmod 555 /usr/bin/tensorflow_model_server\n\n# Expose gRPC and REST port\nEXPOSE 8500 8501\n\n# Set where models should be stored in the container\nRUN mkdir -p ${MODEL_BASE_PATH}\n\n# Create a script that runs the model server so we can use environment variables\n# while also passing in arguments from the docker command line\nRUN echo '#!/bin/bash \\n\\n' > /usr/bin/tf_serving_entrypoint.sh \\\n && echo '/usr/bin/tensorflow_model_server --port=8500 --rest_api_port=8501 --model_name=${MODEL_NAME} --model_base_path=${MODEL_BASE_PATH}/${MODEL_NAME} \"$@\"' >> /usr/bin/tf_serving_entrypoint.sh \\\n && chmod +x /usr/bin/tf_serving_entrypoint.sh\n\nADD https://raw.githubusercontent.com/aws/aws-deep-learning-containers-utils/master/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow/license.txt -o /license.txt\n\nCMD [\"/usr/bin/tf_serving_entrypoint.sh\"]\n"
}