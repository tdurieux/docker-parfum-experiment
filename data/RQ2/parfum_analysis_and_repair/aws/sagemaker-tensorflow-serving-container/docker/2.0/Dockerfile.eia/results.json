{
  "startTime": 1674220104363,
  "endTime": 1674220105643,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 77
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nLABEL maintainer=\"Amazon AI\"\n# Specify LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT\n# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n\n# Add arguments to achieve the version, python and url\nARG PYTHON=python3\nARG PIP=pip3\nARG HEALTH_CHECK_VERSION=1.6.3\nARG S3_TF_EI_VERSION=1-5\nARG S3_TF_VERSION=2-0-0\n\n\n# See http://bugs.python.org/issue19846\nENV LANG=C.UTF-8\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV SAGEMAKER_TFS_VERSION=\"${S3_TF_VERSION}\"\nENV PATH=\"$PATH:/sagemaker\"\nENV LD_LIBRARY_PATH='/usr/local/lib:$LD_LIBRARY_PATH'\nENV MODEL_BASE_PATH=/models\n# The only required piece is the model name in order to differentiate endpoints\nENV MODEL_NAME=model\n# To prevent user interaction when installing time zone data package\nENV DEBIAN_FRONTEND=noninteractive\n\n# nginx + njs\nRUN apt-get update \\\n && apt-get -y install --no-install-recommends \\\n    curl \\\n    gnupg2 \\\n    ca-certificates \\\n    git \\\n    wget \\\n    vim \\\n && curl -f -s https://nginx.org/keys/nginx_signing.key | apt-key add - \\\n && echo 'deb http://nginx.org/packages/ubuntu/ bionic nginx' >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get -y install --no-install-recommends \\\n    nginx \\\n    nginx-module-njs \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# cython, falcon, gunicorn, grpc\nRUN ${PIP} install --no-cache-dir \\\n    awscli==1.18.32 \\\n    cython==0.29.16 \\\n    falcon==2.0.0 \\\n    gunicorn==20.0.4 \\\n    gevent==1.4.0 \\\n    requests==2.23.0 \\\n    grpcio==1.27.2 \\\n    protobuf==3.11.3 \\\n# using --no-dependencies to avoid installing tensorflow binary\n && ${PIP} install --no-dependencies --no-cache-dir \\\n    tensorflow-serving-api==2.0.0\n\nCOPY sagemaker /sagemaker\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s /usr/local/bin/pip3 /usr/bin/pip\n\n# Get EI tools\nRUN wget https://amazonei-tools.s3.amazonaws.com/v${HEALTH_CHECK_VERSION}/ei_tools_${HEALTH_CHECK_VERSION}.tar.gz -O /opt/ei_tools_${HEALTH_CHECK_VERSION}.tar.gz \\\n && tar -xvf /opt/ei_tools_${HEALTH_CHECK_VERSION}.tar.gz -C /opt/ \\\n && rm -rf /opt/ei_tools_${HEALTH_CHECK_VERSION}.tar.gz \\\n && chmod a+x /opt/ei_tools/bin/health_check \\\n && mkdir -p /opt/ei_health_check/bin \\\n && ln -s /opt/ei_tools/bin/health_check /opt/ei_health_check/bin/health_check \\\n && ln -s /opt/ei_tools/lib /opt/ei_health_check/lib\n\nRUN wget https://amazonei-tensorflow.s3.amazonaws.com/tensorflow-serving/v2.0/archive/tensorflow-serving-${S3_TF_VERSION}-ei-${S3_TF_EI_VERSION}.tar.gz \\\n -O /tmp/tensorflow-serving-${S3_TF_VERSION}-ei-${S3_TF_EI_VERSION}.tar.gz \\\n && cd /tmp \\\n && tar zxf tensorflow-serving-${S3_TF_VERSION}-ei-${S3_TF_EI_VERSION}.tar.gz \\\n && mv tensorflow-serving-${S3_TF_VERSION}-ei-${S3_TF_EI_VERSION}/amazonei_tensorflow_model_server /usr/bin/tensorflow_model_server \\\n && chmod +x /usr/bin/tensorflow_model_server \\\n && rm -rf tensorflow-serving-${S3_TF_VERSION}* && rm tensorflow-serving-${S3_TF_VERSION}-ei-${S3_TF_EI_VERSION}.tar.gz\n\n\n# Expose ports\n# gRPC and REST\nEXPOSE 8500 8501\n\n# Set where models should be stored in the container\nRUN mkdir -p ${MODEL_BASE_PATH}\n\n# Create a script that runs the model server so we can use environment variables\n# while also passing in arguments from the docker command line\nRUN echo '#!/bin/bash \\n\\n' > /usr/bin/tf_serving_entrypoint.sh \\\n && echo '/usr/bin/tensorflow_model_server --port=8500 --rest_api_port=8501 --model_name=${MODEL_NAME} --model_base_path=${MODEL_BASE_PATH}/${MODEL_NAME} \"$@\"' >> /usr/bin/tf_serving_entrypoint.sh \\\n && chmod +x /usr/bin/tf_serving_entrypoint.sh\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-2.0/license.txt -o /license.txt\n\nCMD [\"/usr/bin/tf_serving_entrypoint.sh\"]\n"
}