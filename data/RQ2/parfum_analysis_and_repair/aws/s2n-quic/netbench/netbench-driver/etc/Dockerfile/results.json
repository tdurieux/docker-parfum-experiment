{
  "startTime": 1674249484603,
  "endTime": 1674249485619,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 2,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 2,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 20,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 2,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 20,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rust:latest as planner\nWORKDIR app\nRUN cargo install cargo-chef --version 0.1.23\nCOPY Cargo.toml /app\nCOPY common /app/common\nCOPY quic /app/quic\nCOPY netbench /app/netbench\nRUN set -eux; \\\n  cargo chef prepare --recipe-path recipe.json; \\\n  cd netbench; \\\n  cargo chef prepare --recipe-path recipe.json;\n\nFROM rust:latest as cacher\nWORKDIR app\nRUN cargo install cargo-chef --version 0.1.23\nCOPY --from=planner /app/recipe.json recipe.json\nCOPY --from=planner /app/netbench/recipe.json netbench/recipe.json\n\nARG release=\"true\"\nRUN set -eux; \\\n  export ARGS=\"\"; \\\n  if [ \"$release\" = \"true\" ]; then \\\n    export ARGS=\"--release\"; \\\n  fi; \\\n  cargo chef cook $ARGS --recipe-path recipe.json; \\\n  cd netbench; \\\n  cargo chef cook $ARGS --recipe-path recipe.json; \\\n  echo cooked;\n\nFROM rust:latest AS builder\nWORKDIR app\n\nRUN set -eux; \\\n  apt-get update; \\\n  apt-get install --no-install-recommends -y cmake clang; rm -rf /var/lib/apt/lists/*;\n\n# copy sources\nCOPY Cargo.toml /app\nCOPY common /app/common\nCOPY quic /app/quic\nCOPY netbench /app/netbench\n\n# Copy over the cached dependencies\nCOPY --from=cacher /app/target target\nCOPY --from=cacher /app/netbench/target netbench/target\nCOPY --from=cacher /usr/local/cargo /usr/local/cargo\n\nARG release=\"true\"\n\n# build libs to improve caching between drivers\nRUN set -eux; \\\n  export ARGS=\"\"; \\\n  if [ \"$release\" = \"true\" ]; then \\\n    export ARGS=\"--release\"; \\\n  fi; \\\n  mkdir -p /app/bin; \\\n  cd netbench; \\\n  cargo build --lib $ARGS; \\\n  if [ \"$release\" = \"true\" ]; then \\\n    cargo build --bin netbench-collector --release; \\\n    cp target/release/netbench-collector /app/bin; \\\n  else \\\n    cargo build --bin netbench-collector; \\\n    cp target/debug/netbench-collector /app/bin; \\\n  fi; \\\n  rm -rf target\n\nRUN set -eux; \\\n  cd netbench; \\\n  cargo run --bin netbench-scenarios; \\\n  cp target/netbench/request_response.json /app/bin; \\\n  rm -rf target;\n\nARG DRIVER=\"s2n-quic\"\nARG ENDPOINT=\"client\"\n\nRUN set -eux; \\\n  if [ \"$ENDPOINT\" = \"server\" ]; then \\\n    export TARGET=\"netbench-driver-$DRIVER-$ENDPOINT\"; \\\n    echo \"#!/usr/bin/env bash\\n \\\n    eval /usr/bin/netbench-collector /usr/bin/$TARGET \\$@\" > /app/bin/start; \\\n  else \\\n    export TARGET=\"netbench-driver-$DRIVER-$ENDPOINT\"; \\\n    echo \"#!/usr/bin/env bash\\n \\\n    export SERVER_0=\\$(dig +short \\$DNS_ADDRESS):\\$SERVER_PORT\\n \\\n    printenv\\n \\\n    eval /usr/bin/netbench-collector /usr/bin/$TARGET \\$@ > \\$DRIVER-client.json\\n \\\n    aws s3 cp ./\\$DRIVER-client.json s3://\\$S3_BUCKET/\" > /app/bin/start; \\\n  fi; \\\n  cd netbench; \\\n  if [ \"$release\" = \"true\" ]; then \\\n    cargo build --bin $TARGET --release; \\\n    cp target/release/$TARGET /app/bin; \\\n  else \\\n    cargo build --bin $TARGET; \\\n    cp target/debug/$TARGET /app/bin; \\\n  fi; \\\n  rm -rf target;\n\nFROM debian:latest\n\nENV RUST_BACKTRACE=\"1\"\n\n# copy driver\nCOPY --from=builder /app/bin /tmp/netbench\nENV DEBIAN_FRONTEND=noninteractive\nRUN set -eux; \\\n  apt-get update && apt-get install --no-install-recommends -y dnsutils curl unzip sudo; rm -rf /var/lib/apt/lists/*; \\\n  curl -f \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\" -o \"awscliv2.zip\"; \\\n  unzip awscliv2.zip; \\\n  sudo ./aws/install; \\\n  chmod +x /tmp/netbench/*; \\\n  mv /tmp/netbench/* /usr/bin; \\\n  echo done\n\nENTRYPOINT [\"/usr/bin/start\"]\n"
}