{
  "startTime": 1674255269577,
  "endTime": 1674255270594,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM public.ecr.aws/amazonlinux/amazonlinux:2 AS builder\nRUN yum update -y && \\\n    yum install -y ca-certificates unzip tar gzip git && \\\n    yum clean all && \\\n    rm -rf /var/cache/yum\n\nRUN curl -f -LO https://golang.org/dl/go1.17.1.linux-amd64.tar.gz && \\\n    tar -C /usr/local -xzvf go1.17.1.linux-amd64.tar.gz && rm go1.17.1.linux-amd64.tar.gz\n\nENV PATH=\"${PATH}:/usr/local/go/bin\"\nENV GOPATH=\"${HOME}/go\"\nENV PATH=\"${PATH}:${GOPATH}/bin\"\n\n# Use the default go proxy\nARG GO_PROXY=https://proxy.golang.org\n\nWORKDIR /go/src/github.com/aws/aws-app-mesh-examples/walkthroughs/howto-http2/color_client\n\n# Set the proxies for the go compiler.\nENV GOPROXY=$GO_PROXY\n\n# go.mod and go.sum go into their own layers.\n# This ensures `go mod download` happens only when go.mod and go.sum change.\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\n\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix nocgo -o /color_client .\n\nFROM public.ecr.aws/amazonlinux/amazonlinux:2\nRUN yum update -y && \\\n    yum install -y ca-certificates && \\\n    yum clean all && \\\n    rm -rf /var/cache/yum\nCOPY --from=builder /color_client /color_client\n\nENTRYPOINT [\"/color_client\"]\n"
}