{
  "startTime": 1674216876796,
  "endTime": 1674216878041,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 23,
        "columnStart": 22,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\n# NCCL_VERSION=2.4.7, CUDNN_VERSION=7.6.2.24\nLABEL maintainer=\"Amazon AI\"\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n\nRUN apt-get update && apt-get install -y  --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        cmake \\\n        libgomp1 \\\n        libibverbs-dev \\\n        curl \\\n        git \\\n        wget \\\n        vim \\\n        jq \\\n        libsm6 \\\n        libxext6 \\\n        libxrender-dev \\\n        build-essential \\\n        zlib1g-dev \\\n        libglib2.0-0 \\\n        libgl1-mesa-glx \\\n        openjdk-8-jdk-headless && rm -rf /var/lib/apt/lists/*;\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\n# Add arguments to achieve the version, python and url\nARG PYTHON_VERSION=3.6.6\n\n# Install OpenSSH. Allow OpenSSH to talk to containers without asking for confirmation\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && \\\n    mkdir -p /var/run/sshd && \\\n    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_configs && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -o ~/miniconda.sh -O  https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda update conda && \\\n    /opt/conda/bin/conda install -y python=$PYTHON_VERSION \\\n\t                              numpy==1.16.4 \\\n\t                              scipy==1.3.0 \\\n\t                              ipython==7.7.0 \\\n\t                              mkl==2019.4 \\\n\t                              mkl-include==2019.4 \\\n\t                              cython==0.29.12 \\\n\t                              typing==3.6.4 && \\\n\t\t/opt/conda/bin/conda clean -ya\nENV PATH /opt/conda/bin:$PATH\n\nARG PYTORCH_VERSION=1.2.0\nARG TORCHVISION_VERSION=0.4.0\nARG MMS_VERSION=1.0.7\nRUN conda install -c pytorch magma-cuda100 && \\\n    conda install -c conda-forge awscli==1.16.210 opencv==4.0.1 && \\\n    conda install -y scikit-learn==0.21.2 \\\n                     pandas==0.25.0 \\\n                     pillow==5.4.1 \\\n                     h5py==2.9.0 \\\n                     requests==2.22.0 && \\\n    conda install pytorch==$PYTORCH_VERSION torchvision==$TORCHVISION_VERSION cudatoolkit=10.0 -c pytorch && \\\n    conda clean -ya && \\\n    /opt/conda/bin/conda config --set ssl_verify False && \\\n    pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host && \\\n    ln -s /opt/conda/bin/pip /usr/local/bin/pip3 && \\\n    pip install --no-cache-dir mxnet-model-server==$MMS_VERSION\n\nRUN useradd -m model-server \\\n    && mkdir -p /home/model-server/tmp \\\n    && chown -R model-server /home/model-server\n\nCOPY docker/$PYTORCH_VERSION/py3/mms-entrypoint.py /usr/local/bin/dockerd-entrypoint.py\nCOPY docker/$PYTORCH_VERSION/py3/config.properties /home/model-server\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py\n\nCOPY dist/sagemaker_pytorch_serving_container-1.2-py2.py3-none-any.whl /sagemaker_pytorch_serving_container-1.2-py2.py3-none-any.whl\nRUN pip install --no-cache-dir /sagemaker_pytorch_serving_container-1.2-py2.py3-none-any.whl && \\\n    rm /sagemaker_pytorch_serving_container-1.2-py2.py3-none-any.whl\n\nENV SAGEMAKER_SERVING_MODULE sagemaker_pytorch_serving_container.serving:main\n\nEXPOSE 8080 8081\nENV TEMP=/home/model-server/tmp\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"mxnet-model-server\", \"--start\", \"--mms-config\", \"/home/model-server/config.properties\"]\n"
}