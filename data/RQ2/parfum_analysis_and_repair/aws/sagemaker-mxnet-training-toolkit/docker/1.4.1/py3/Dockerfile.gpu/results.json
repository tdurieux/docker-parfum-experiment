{
  "startTime": 1674215942176,
  "endTime": 1674215943179,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 8,
        "columnEnd": 19
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 8,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 26,
        "columnEnd": 173
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Note: We do not need install nccl or cudnn, which were already installed in runtime container.\nFROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu16.04\n\nLABEL maintainer=\"Amazon AI\"\n\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n\nENV MX_VERSION=1.4.1\nARG PYTHON=python3\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3\nARG PYTHON_VERSION=3.6.6\n\nRUN apt-get update && apt-get install -y --no-install-recommends software-properties-common && \\\n    add-apt-repository ppa:deadsnakes/ppa -y && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        cuda-command-line-tools-10-0 \\\n        cuda-cublas-10-0 \\\n        cuda-cufft-10-0 \\\n        cuda-curand-10-0 \\\n        cuda-cusolver-10-0 \\\n        cuda-cusparse-10-0 \\\n        curl \\\n        git \\\n        libatlas-base-dev \\\n        libcurl4-openssl-dev \\\n        libgomp1 \\\n        libopencv-dev \\\n        openssh-client \\\n        openssh-server \\\n        wget \\\n        vim \\\n        zlib1g-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz && \\\n        tar -xvf Python-$PYTHON_VERSION.tgz && cd Python-$PYTHON_VERSION && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && \\\n        apt-get update && apt-get install -y --no-install-recommends libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev && \\\n        make && make install && rm -rf ../Python-$PYTHON_VERSION* && \\\n        ln -s /usr/local/bin/pip3 /usr/bin/pip && rm Python-$PYTHON_VERSION.tgz && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP} --no-cache-dir install --upgrade pip setuptools\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python\n\nWORKDIR /\n\n# Docker container build should happen in a fresh environment with context for this build.\n# All the needed artifacts should be setup before docker build command.\nCOPY sagemaker_mxnet_container.tar.gz /sagemaker_mxnet_container-3.0.0.tar.gz\n\nRUN pip install --no-cache-dir --no-cache --upgrade \\\n        mxnet-cu100mkl==$MX_VERSION \\\n        keras-mxnet==2.2.4.1 \\\n        h5py==2.9.0 \\\n        numpy==1.14.5 \\\n        onnx==1.4.1 \\\n        pandas==0.24.1 \\\n        Pillow==5.4.1 \\\n        requests==2.21.0 \\\n        scikit-learn==0.20.3 \\\n        scipy==1.2.1 \\\n        /sagemaker_mxnet_container-3.0.0.tar.gz && \\\n    rm /sagemaker_mxnet_container-3.0.0.tar.gz\n\n# \"channels first\" is recommended for keras-mxnet\n# https://github.com/awslabs/keras-apache-mxnet/blob/master/docs/mxnet_backend/performance_guide.md#channels-first-image-data-format-for-cnn\nRUN mkdir /root/.keras && \\\n    echo '{\"image_data_format\": \"channels_first\"}' > /root/.keras/keras.json\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8\n\nENV SAGEMAKER_TRAINING_MODULE sagemaker_mxnet_container.training:main\n\nCMD [\"/bin/bash\"]\n"
}