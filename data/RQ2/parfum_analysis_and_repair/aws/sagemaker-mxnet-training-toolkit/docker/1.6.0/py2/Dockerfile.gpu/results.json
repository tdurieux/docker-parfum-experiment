{
  "startTime": 1674250130469,
  "endTime": 1674250131230,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedDockerfile": "# Note: We need to install NCCL, cuDNN, and CUDA libraries since we are using base container.\nFROM nvidia/cuda:10.1-base-ubuntu16.04\n\nLABEL maintainer=\"Amazon AI\"\n\nARG MX_URL=https://aws-mxnet-pypi.s3-us-west-2.amazonaws.com/1.6.0/aws_mxnet_cu101mkl-1.6.0-py2.py3-none-manylinux1_x86_64.whl\n\n# See http://bugs.python.org/issue19846\nENV LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    SAGEMAKER_TRAINING_MODULE=sagemaker_mxnet_container.training:main \\\n    CUDNN_VERSION=7.6.0.64-1+cuda10.1 \\\n    NCCL_VERSION=2.4.8-1+cuda10.1\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    # build-essential needed to pip install user's dependencies (e.g. requirements.txt)\n    build-essential \\\n    ca-certificates \\\n    libcudnn7=${CUDNN_VERSION} \\\n    cuda-command-line-tools-10-1 \\\n    cuda-cufft-10-1 \\\n    cuda-curand-10-1 \\\n    cuda-cusolver-10-1 \\\n    cuda-cusparse-10-1 \\\n    curl \\\n    git \\\n    libnccl2=${NCCL_VERSION} \\\n    libgomp1 \\\n    libnccl-dev=${NCCL_VERSION} \\\n    libopencv-dev \\\n    python \\\n    # python-dev needed to pip install mxnet and user's dependencies (e.g. requirements.txt)\n    python-dev \\\n    python-pip \\\n    openssh-client \\\n    openssh-server \\\n    vim \\\n    wget \\\n    # zlib1g-dev needed to pip install sagemaker_mxnet_training\n    zlib1g-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && ln -s $(which python) /usr/local/bin/python\n\n# Install cuda-dev libraries as a dependency for Horovod with MXNet backend\nENV CUDA_LIB_URL=https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64\nRUN wget ${CUDA_LIB_URL}/libcublas10_10.2.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/libcublas-dev_10.2.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/cuda-curand-dev-10-1_10.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/cuda-nvrtc-10-1_10.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb \\\n && dpkg -i libcublas10_10.2.1.243-1_amd64.deb \\\n    libcublas-dev_10.2.1.243-1_amd64.deb \\\n    cuda-curand-dev-10-1_10.1.243-1_amd64.deb \\\n    cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \\\n    cuda-nvrtc-10-1_10.1.243-1_amd64.deb \\\n    cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb \\\n && apt-get install -y -f \\\n && rm libcublas10_10.2.1.243-1_amd64.deb \\\n    libcublas-dev_10.2.1.243-1_amd64.deb \\\n    cuda-curand-dev-10-1_10.1.243-1_amd64.deb \\\n    cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \\\n    cuda-nvrtc-10-1_10.1.243-1_amd64.deb \\\n    cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb\n\n###########################################################################\n# Horovod dependencies\n###########################################################################\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \\\n && tar zxf openmpi-4.0.1.tar.gz \\\n && cd openmpi-4.0.1 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.1.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\nENV PATH=/usr/local/openmpi/bin/:$PATH\nENV PATH=/usr/local/nvidia/bin:$PATH\n\n# MXNet requires pip 19.3.1 due to being backwards compatible\n# with python2\nRUN pip --no-cache-dir install --upgrade \\\n    pip==19.3.1 \\\n    setuptools\n\nWORKDIR /\n\n# python-dateutil==2.8.0 to satisfy botocore\nRUN pip install --no-cache-dir --upgrade \\\n    h5py==2.10.0 \\\n    keras-mxnet==2.2.4.2 \\\n    numpy==1.16.5 \\\n    # setuptools<45 because support for py2 stops with 45.0.0\n    # https://github.com/pypa/setuptools/blob/master/CHANGES.rst#v4500\n    \"setuptools<45\" \\\n    onnx==1.6.0 \\\n    pandas==0.24.2 \\\n    Pillow==6.2.2 \\\n    requests==2.22.0 \\\n    scikit-learn==0.20.4 \\\n    scipy==1.2.2 \\\n    urllib3==1.25.8 \\\n    python-dateutil==2.8.0 \\\n    mpi4py==3.0.2 \\\n    ${MX_URL} \\\n    # inotify-simple updated to 1.3.0 and has an issue that prevents the installation\n    # of the enum34 package on py2. inotify-simple is used in sagemaker-mxnet-training\n    \"inotify-simple<1.3\" \\\n    \"sagemaker-mxnet-training<4\"\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITHOUT_TENSORFLOW=1 \\\n    HOROVOD_WITHOUT_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir \\\n    horovod==0.19.0 \\\n && ldconfig\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# \"channels first\" is recommended for keras-mxnet\n# https://github.com/awslabs/keras-apache-mxnet/blob/master/docs/mxnet_backend/performance_guide.md#channels-first-image-data-format-for-cnn\nRUN mkdir /root/.keras \\\n && echo '{\"image_data_format\": \"channels_first\"}' > /root/.keras/keras.json\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nCOPY dockerd-entrypoint.py /usr/local/bin/dockerd-entrypoint.py\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/aws-mxnet-1.6.0/license.txt\n\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"/bin/bash\"]\n"
}