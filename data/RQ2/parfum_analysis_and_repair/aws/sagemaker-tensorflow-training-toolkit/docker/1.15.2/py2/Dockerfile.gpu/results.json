{
  "startTime": 1674253151849,
  "endTime": 1674253153085,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Nvidia does not publish a TensorRT Runtime library for Ubuntu 18.04 with Cuda 10.1 support, so we stick with cuda 10.0.\n# https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/\nFROM nvidia/cuda:10.0-base-ubuntu18.04\n\nLABEL maintainer=\"Amazon AI\"\n\n# Prevent docker build get stopped by requesting user interaction\nENV DEBIAN_FRONTEND=noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN=true\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\n# See http://bugs.python.org/issue19846\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n# Specify the location of module that contains the training logic for SageMaker\n# https://docs.aws.amazon.com/sagemaker/latest/dg/docker-container-environmental-variables-entrypoint.html\nENV SAGEMAKER_TRAINING_MODULE=sagemaker_tensorflow_container.training:main\n\n# Define framework-related package sources\nARG TF_URL=https://tensorflow-aws.s3-us-west-2.amazonaws.com/1.15.2/AmazonLinux/gpu/final/tensorflow_gpu-1.15.2-cp27-cp27mu-manylinux2010_x86_64.whl\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends --allow-unauthenticated \\\n    ca-certificates \\\n    cuda-command-line-tools-10-0 \\\n    cuda-cublas-dev-10-0 \\\n    cuda-cudart-dev-10-0 \\\n    cuda-cufft-dev-10-0 \\\n    cuda-curand-dev-10-0 \\\n    cuda-cusolver-dev-10-0 \\\n    cuda-cusparse-dev-10-0 \\\n    curl \\\n    libcudnn7=7.5.1.10-1+cuda10.0 \\\n    # TensorFlow doesn't require libnccl anymore but Open MPI still depends on it\n    libnccl2=2.4.7-1+cuda10.0 \\\n    libgomp1 \\\n    libnccl-dev=2.4.7-1+cuda10.0 \\\n    libfreetype6-dev \\\n    libhdf5-serial-dev \\\n    libpng-dev \\\n    libzmq3-dev \\\n    git \\\n    wget \\\n    vim \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    zlib1g-dev \\\n    # The 'apt-get install' of nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0\n    # adds a new list which contains libnvinfer library, so it needs another\n    # 'apt-get update' to retrieve that list before it can actually install the library.\n    # We don't install libnvinfer-dev since we don't need to build against TensorRT,\n    # and libnvinfer4 doesn't contain libnvinfer.a static library.\n && apt-get update \\\n && apt-get install -y --no-install-recommends --allow-unauthenticated  \\\n    nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends --allow-unauthenticated  \\\n    libnvinfer5=5.0.2-1+cuda10.0 \\\n && rm /usr/lib/x86_64-linux-gnu/libnvinfer_plugin* \\\n && rm /usr/lib/x86_64-linux-gnu/libnvcaffe_parser* \\\n && rm /usr/lib/x86_64-linux-gnu/libnvparsers* \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /var/run/sshd\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \\\n && tar zxf openmpi-4.0.1.tar.gz \\\n && cd openmpi-4.0.1 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.1.tar.gz\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y \\\n    python \\\n    python-pip && rm -rf /var/lib/apt/lists/*;\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\nENV PATH /usr/local/openmpi/bin/:$PATH\nENV PATH=/usr/local/nvidia/bin:$PATH\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN mkdir -p /var/run/sshd \\\n && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN pip --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which python) /usr/local/bin/python\n\nRUN pip install --no-cache-dir -U \\\n    numpy==1.16.5 \\\n    scipy==1.2.2 \\\n    scikit-learn==0.20.3 \\\n    pandas==0.24.2 \\\n    Pillow==6.2.2 \\\n    h5py==2.9.0 \\\n    keras_applications==1.0.8 \\\n    keras_preprocessing==1.1.0 \\\n    requests==2.22.0 \\\n    keras==2.3.1 \\\n    mpi4py==3.0.2 \\\n    \"cryptography>=2.3\" \\\n    \"sagemaker-tensorflow>=1.15,<1.16\" \\\n    \"sagemaker-tensorflow-training>=2,<3\" \\\n    # Let's install TensorFlow separately in the end to avoid the library version to be overwritten\n && pip install --force-reinstall --no-cache-dir -U \\\n    ${TF_URL} \\\n && pip install --no-cache-dir -U \\\n    awscli\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 pip install --no-cache-dir \\\n    horovod==0.18.2 \\\n && ldconfig\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\nADD https://raw.githubusercontent.com/aws/aws-deep-learning-containers-utils/master/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow/license.txt -o /license.txt\n\nCMD [\"bin/bash\"]\n"
}