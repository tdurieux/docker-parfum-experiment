{
  "startTime": 1674252533082,
  "endTime": 1674252534115,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nLABEL maintainer=\"Amazon AI\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    software-properties-common \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    ca-certificates \\\n    curl \\\n    && add-apt-repository ppa:deadsnakes/ppa -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    curl -fSsL -O https://www.open-mpi.org/software/ompi/v3.1/downloads/openmpi-3.1.2.tar.gz && \\\n    tar zxf openmpi-3.1.2.tar.gz && \\\n    cd openmpi-3.1.2 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-3.1.2.tar.gz\n\n\n # Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/local/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun && \\\n    chmod a+x /usr/local/bin/mpirun\n\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf && \\\n    echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\n\nENV PATH /usr/local/openmpi/bin/:$PATH\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ && \\\n    mkdir -p /var/run/sshd && \\\n    ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \\\n    cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys && \\\n    printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\n# Set environment variables for MKL\n# For more about MKL with TensorFlow see:\n# https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn\nENV KMP_AFFINITY=granularity=fine,compact,1,0 KMP_BLOCKTIME=1 KMP_SETTINGS=0\n\nWORKDIR /\n\nARG py_version\n\nRUN if [ $py_version -eq 3 ]; then PYTHON_VERSION=python3.6; else PYTHON_VERSION=python2.7; fi && \\\n        apt-get update && apt-get install -y --no-install-recommends $PYTHON_VERSION-dev --allow-unauthenticated  && \\\n        ln -s -f /usr/bin/$PYTHON_VERSION /usr/bin/python && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONIOENCODING=UTF-8 LANG=C.UTF-8 LC_ALL=C.UTF-8\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py --disable-pip-version-check --no-cache-dir \"pip==18.1\" && \\\n    rm get-pip.py\n\nARG framework_installable\nARG framework_support_installable=sagemaker_tensorflow_container-2.0.0.tar.gz\n\nCOPY $framework_installable tensorflow-1.12.0-py2.py3-none-any.whl\nCOPY $framework_support_installable .\n\nRUN pip install --no-cache-dir -U \\\n        keras==2.2.4 \\\n        mpi4py==3.0.1 \\\n        \"sagemaker-tensorflow>=1.12,<1.13\" && \\\n    # Let's install TensorFlow separately in the end to avoid\n    # the library version to be overwritten\n    pip install --force-reinstall --no-cache-dir -U \\\n        tensorflow-1.12.0-py2.py3-none-any.whl \\\n        horovod && \\\n    pip install --no-cache-dir -U $framework_support_installable && \\\n    rm -f tensorflow-1.12.0-py2.py3-none-any.whl && \\\n    rm -f $framework_support_installable && \\\n    pip uninstall -y --no-cache-dir \\\n        markdown \\\n        tensorboard\n\nENV SAGEMAKER_TRAINING_MODULE sagemaker_tensorflow_container.training:main\n"
}