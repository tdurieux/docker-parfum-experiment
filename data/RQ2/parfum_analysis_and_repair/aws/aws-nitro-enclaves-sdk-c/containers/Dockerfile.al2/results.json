{
  "startTime": 1674254084009,
  "endTime": 1674254085502,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 29,
        "columnEnd": 56
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM amazonlinux as builder\n\nRUN yum upgrade -y\nRUN amazon-linux-extras enable epel\nRUN yum clean -y metadata && yum install -y epel-release && rm -rf /var/cache/yum\nRUN yum install -y cmake3 gcc git tar make && rm -rf /var/cache/yum\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain 1.60\n\nRUN yum install -y gcc-c++ && rm -rf /var/cache/yum\nRUN yum install -y go && rm -rf /var/cache/yum\nRUN yum install -y ninja-build && rm -rf /var/cache/yum\n\n# We keep the build artifacts in the -build directory\nWORKDIR /tmp/crt-builder\n\nRUN git clone -b v1.0.2 https://github.com/awslabs/aws-lc.git aws-lc #\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-lc -B aws-lc/build .\nRUN go env -w GOPROXY=direct\nRUN cmake3 --build aws-lc/build --target install\n\nRUN git clone -b v1.3.11 https://github.com/aws/s2n-tls.git\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -S s2n-tls -B s2n-tls/build\nRUN cmake3 --build s2n-tls/build --target install\n\nRUN git clone -b v0.6.20 https://github.com/awslabs/aws-c-common.git\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-c-common -B aws-c-common/build\nRUN cmake3 --build aws-c-common/build --target install\n\nRUN git clone -b v0.1.2 https://github.com/awslabs/aws-c-sdkutils.git\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-c-sdkutils -B aws-c-sdkutils/build\nRUN cmake3 --build aws-c-sdkutils/build --target install\n\nRUN git clone -b v0.5.17 https://github.com/awslabs/aws-c-cal.git\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-c-cal -B aws-c-cal/build\nRUN cmake3 --build aws-c-cal/build --target install\n\nRUN git clone -b v0.10.21 https://github.com/awslabs/aws-c-io.git\nRUN cmake3 -DUSE_VSOCK=1 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-c-io -B aws-c-io/build\nRUN cmake3 --build aws-c-io/build --target install\n\nRUN git clone -b v0.2.14 http://github.com/awslabs/aws-c-compression.git\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-c-compression -B aws-c-compression/build\nRUN cmake3 --build aws-c-compression/build --target install\n\nRUN git clone -b v0.6.13 https://github.com/awslabs/aws-c-http.git\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-c-http -B aws-c-http/build\nRUN cmake3 --build aws-c-http/build --target install\n\nRUN git clone -b v0.6.11 https://github.com/awslabs/aws-c-auth.git\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-c-auth -B aws-c-auth/build\nRUN cmake3 --build aws-c-auth/build --target install\n\nRUN git clone -b json-c-0.16-20220414 https://github.com/json-c/json-c.git\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_SHARED_LIBS=OFF -GNinja -S json-c -B json-c/build\nRUN cmake3 --build json-c/build --target install\n\nRUN git clone -b v0.2.1 https://github.com/aws/aws-nitro-enclaves-nsm-api.git\nRUN source $HOME/.cargo/env && cd aws-nitro-enclaves-nsm-api && cargo build --release -p nsm-lib\nRUN mv aws-nitro-enclaves-nsm-api/target/release/libnsm.so /usr/lib64\nRUN mv aws-nitro-enclaves-nsm-api/target/release/nsm.h /usr/include\n\nRUN yum install -y doxygen && rm -rf /var/cache/yum\nCOPY . aws-nitro-enclaves-sdk-c\nRUN cmake3 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja \\\n\t-S aws-nitro-enclaves-sdk-c -B aws-nitro-enclaves-sdk-c/build\nRUN cmake3 --build aws-nitro-enclaves-sdk-c/build --target install\nRUN cmake3 --build aws-nitro-enclaves-sdk-c/build --target docs\n\n# Test\nFROM builder as test\nRUN cmake3 --build aws-nitro-enclaves-sdk-c/build --target test\n\n# kmstool-enclave\nFROM amazonlinux as kmstool-enclave\n\n# TODO: building packages statically instead of cleaning up unwanted packages from amazonlinux\nRUN rpm -e python python-libs python-urlgrabber python2-rpm pygpgme pyliblzma python-iniparse pyxattr python-pycurl amazon-linux-extras yum yum-metadata-parser yum-plugin-ovl yum-plugin-priorities\nCOPY --from=builder /usr/lib64/libnsm.so /usr/lib64/libnsm.so\nCOPY --from=builder /usr/bin/kmstool_enclave /kmstool_enclave\nARG REGION\nARG ENDPOINT\nENV REGION=${REGION}\nENV ENDPOINT=${ENDPOINT}\nCMD [\"/kmstool_enclave\"]\n\n# kmstool-instance\nFROM amazonlinux as kmstool-instance\n\n# TODO: building packages statically instead of cleaning up unwanted packages from amazonlinux\nRUN rpm -e python python-libs python-urlgrabber python2-rpm pygpgme pyliblzma python-iniparse pyxattr python-pycurl amazon-linux-extras yum yum-metadata-parser yum-plugin-ovl yum-plugin-priorities\nCOPY --from=builder /usr/lib64/libnsm.so /usr/lib64/libnsm.so\nCOPY --from=builder /usr/bin/kmstool_instance /kmstool_instance\nCMD [\"/kmstool_instance\"]\n\n# kmstool-enclave-cli\nFROM amazonlinux as kmstool-enclave-cli\n\n# TODO: building packages statically instead of cleaning up unwanted packages from amazonlinux\nRUN rpm -e python python-libs python-urlgrabber python2-rpm pygpgme pyliblzma python-iniparse pyxattr python-pycurl amazon-linux-extras yum yum-metadata-parser yum-plugin-ovl yum-plugin-priorities\nCOPY --from=builder /usr/lib64/libnsm.so /usr/lib64/libnsm.so\nCOPY --from=builder /usr/bin/kmstool_enclave_cli /kmstool_enclave_cli\n"
}