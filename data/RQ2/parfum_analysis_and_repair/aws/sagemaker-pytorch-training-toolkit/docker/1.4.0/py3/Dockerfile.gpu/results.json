{
  "startTime": 1674216040692,
  "endTime": 1674216042295,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "# The tag for the base image is: 10.1-cudnn7-devel-ubuntu16.04\nFROM nvidia/cuda@sha256:4979db047661dc0003594fb20d37cce6d6c7e989252f4e3fb0beb39874a078e2\n\nLABEL maintainer=\"Amazon AI\"\n\nARG PYTHON_VERSION=3.6.6\nARG OPEN_MPI_VERSION=4.0.1\nARG CUBLAS_VERSION=10.2.1.243-1_amd64\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/conda/lib\"\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\nENV PATH /opt/conda/bin:$PATH\nENV TORCH_CUDA_ARCH_LIST=\"3.5 5.2 6.0 6.1 7.0+PTX\"\nENV TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\"\nENV HOROVOD_VERSION=0.16.4\nENV DGLBACKEND=pytorch\nENV CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\"\nENV SAGEMAKER_TRAINING_MODULE=sagemaker_pytorch_container.training:main\n\nRUN apt-get update \\\n && apt-get install -y  --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    cuda-command-line-tools-10-1 \\\n    cuda-cufft-10-1 \\\n    cuda-curand-10-1 \\\n    cuda-cusolver-10-1 \\\n    cuda-cusparse-10-1 \\\n    curl \\\n    git \\\n    jq \\\n    libglib2.0-0 \\\n    libgl1-mesa-glx \\\n    libsm6 \\\n    libxext6 \\\n    libxrender-dev \\\n    libgomp1 \\\n    libibverbs-dev \\\n    libhwloc-dev \\\n    libnuma1 \\\n    libnuma-dev \\\n    vim \\\n    wget \\\n    zlib1g-dev \\\n && apt-get remove -y cuda-cufft-dev-10-1 \\\n    cuda-curand-dev-10-1 \\\n    cuda-cusolver-dev-10-1 \\\n    cuda-npp-dev-10-1 \\\n    cuda-nvgraph-dev-10-1 \\\n    cuda-nvjpeg-dev-10-1 \\\n    cuda-nvrtc-dev-10-1 && rm -rf /var/lib/apt/lists/*;\n\nRUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/libcublas10_${CUBLAS_VERSION}.deb \\\n && dpkg -i libcublas10_${CUBLAS_VERSION}.deb \\\n && apt-get install -f -y \\\n && rm libcublas10_${CUBLAS_VERSION}.deb\n\nRUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \\\n && cd openmpi-$OPEN_MPI_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/home/.openmpi \\\n && make all install \\\n && cd .. \\\n && rm openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && rm -rf openmpi-$OPEN_MPI_VERSION\n\nENV PATH=\"$PATH:/home/.openmpi/bin\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/.openmpi/lib/\"\n\nRUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value \\\n && curl -f -L -o ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda install -y -c anaconda \\\n    python=$PYTHON_VERSION \\\n    numpy==1.16.4 \\\n    ipython==7.10.1 \\\n    mkl==2019.4 \\\n    mkl-include==2019.4 \\\n    cython==0.29.12 \\\n    typing==3.6.4 \\\n    future==0.17.1 \\\n    \"pyopenssl>=17.5.0\" \\\n && conda install -c dglteam -y dgl-cuda10.1==0.4.1 \\\n && /opt/conda/bin/conda clean -ya\n\nRUN conda install -c pytorch magma-cuda101==2.5.1 \\\n && conda install -c conda-forge \\\n    opencv==4.0.1 \\\n && conda install -y scikit-learn==0.21.2 \\\n    pandas==0.25.0 \\\n    Pillow==6.2.0 \\\n    h5py==2.9.0 \\\n    requests==2.22.0 \\\n && conda clean -ya\n\nWORKDIR /opt/pytorch\n\n# Copy workaround script for incorrect hostname\nCOPY changehostname.c /\nCOPY start_with_right_hostname.sh /usr/local/bin/start_with_right_hostname.sh\n\nWORKDIR /root\n\nRUN /opt/conda/bin/conda config --set ssl_verify False \\\n && pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && ln -s /opt/conda/bin/pip /usr/local/bin/pip3\n\n# The following section uninstalls torch and torchvision before installing the\n# custom versions from an S3 bucket. This will need to be removed in the future\nRUN pip install \\\n    --no-cache-dir smdebug==0.7.2 \\\n    sagemaker==1.50.17 \\\n    sagemaker-experiments==0.1.7 \\\n    --no-cache-dir fastai==1.0.59 \\\n    awscli \\\n    scipy==1.2.2 \\\n && pip install --no-cache-dir -U https://pytorch-aws.s3.amazonaws.com/pytorch-1.4.0/py3/gpu/torch-1.4.0-cp36-cp36m-manylinux1_x86_64.whl \\\n && pip uninstall -y torchvision \\\n && pip install --no-cache-dir -U \\\n    https://torchvision-build.s3.amazonaws.com/1.4.0/py3/gpu/torchvision-0.5.0-cp36-cp36m-linux_x86_64.whl\n\n# Install Horovod\nRUN ldconfig /usr/local/cuda-10.1/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir horovod==${HOROVOD_VERSION} \\\n && ldconfig\n\n# Configure Open MPI and configure NCCL parameters\nRUN mv /home/.openmpi/bin/mpirun /home/.openmpi/bin/mpirun.real \\\n && echo '#!/bin/bash' > /home/.openmpi/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /home/.openmpi/bin/mpirun \\\n && chmod a+x /home/.openmpi/bin/mpirun \\\n && echo \"hwloc_base_binding_policy = none\" >> /home/.openmpi/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /home/.openmpi/etc/openmpi-mca-params.conf \\\n && echo \"btl_tcp_if_exclude = lo,docker0\" >> /home/.openmpi/etc/openmpi-mca-params.conf \\\n && echo NCCL_DEBUG=INFO >> /etc/nccl.conf \\\n && echo NCCL_SOCKET_IFNAME=^docker0 >> /etc/nccl.conf\n\n# Install OpenSSH for MPI to communicate between containers, Allow OpenSSH to talk to containers without asking for confirmation\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server \\\n && mkdir -p /var/run/sshd \\\n && cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /\n\nRUN pip install --no-cache-dir \"sagemaker-pytorch-training<2\"\n\nRUN chmod +x /usr/local/bin/start_with_right_hostname.sh\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.4.0/license.txt\n\n# fix safety issues\nRUN pip install --no-cache-dir pillow==7.1.0\n\n# Starts framework\nENTRYPOINT [\"bash\", \"-m\", \"start_with_right_hostname.sh\"]\nCMD [\"/bin/bash\"]\n"
}