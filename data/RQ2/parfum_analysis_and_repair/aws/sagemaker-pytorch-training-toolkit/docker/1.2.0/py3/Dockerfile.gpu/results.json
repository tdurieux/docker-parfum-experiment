{
  "startTime": 1674255065373,
  "endTime": 1674255066400,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\n\nLABEL maintainer=\"Amazon AI\"\n\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n\nENV HOROVOD_VERSION=0.16.4\n\nRUN apt-get update && apt-get install -y  --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n        build-essential \\\n        jq \\\n        ca-certificates \\\n        cmake \\\n        cuda-command-line-tools-10-0 \\\n        cuda-cublas-10-0 \\\n        cuda-cufft-10-0 \\\n        cuda-curand-10-0 \\\n        cuda-cusolver-10-0 \\\n        cuda-cusparse-10-0 \\\n        libglib2.0-0 \\\n        libgl1-mesa-glx \\\n        libsm6 \\\n        libxext6 \\\n        libxrender-dev \\\n        libgomp1 \\\n        libibverbs-dev \\\n        curl \\\n        git \\\n        wget \\\n        vim \\\n        build-essential \\\n        zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get remove -y cuda-cufft-dev-10-0 \\\n        cuda-curand-dev-10-0 \\\n        cuda-cusolver-dev-10-0 \\\n        cuda-npp-dev-10-0 \\\n        cuda-nvgraph-dev-10-0 \\\n        cuda-nvjpeg-dev-10-0 \\\n        cuda-nvrtc-dev-10-0\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\n# Add arguments to achieve the version, python and url\nARG PYTHON_VERSION=3.6.6\nARG OPEN_MPI_VERSION=4.0.1\n\nRUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz && \\\n    gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - && \\\n    cd openmpi-$OPEN_MPI_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/home/.openmpi && \\\n    make all install && \\\n    cd .. && rm openmpi-$OPEN_MPI_VERSION.tar.gz && rm -rf openmpi-$OPEN_MPI_VERSION\n\nENV PATH=\"$PATH:/home/.openmpi/bin\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/.openmpi/lib/\"\n\nRUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value && \\\n    curl -f -o ~/miniconda.sh -O  https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda update conda && \\\n    /opt/conda/bin/conda install -y python=$PYTHON_VERSION \\\n\t                              numpy==1.16.4 \\\n\t                              scipy==1.3.0 \\\n\t                              ipython==7.7.0 \\\n\t                              mkl==2019.4 \\\n\t                              mkl-include==2019.4 \\\n\t                              cython==0.29.12 \\\n\t                              typing==3.6.4 \\\n\t                              future==0.17.1 && \\\n\t/opt/conda/bin/conda clean -ya\nENV PATH /opt/conda/bin:$PATH\n\nRUN conda install -c pytorch magma-cuda100==2.5.1 && \\\n    conda install -c conda-forge awscli==1.16.210 opencv==4.0.1 && \\\n    conda install -y scikit-learn==0.21.2 \\\n                     pandas==0.25.0 \\\n                     pillow==5.4.1 \\\n                     h5py==2.9.0 \\\n                     requests==2.22.0 && \\\n    conda clean -ya\n\nARG TORCHVISION_VERSION=0.4.0\nWORKDIR /opt/pytorch\n\nENV TORCH_CUDA_ARCH_LIST=\"3.5 5.2 6.0 6.1 7.0+PTX\"\nENV TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\"\nENV CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\"\n\nRUN pip install --no-cache-dir https://pytorch-deep-learning-container.s3.amazonaws.com/torch-1.2.0-cp36-cp36m-linux_x86_64.whl\nRUN pip install --no-cache-dir torchvision==$TORCHVISION_VERSION\n\nWORKDIR /root\n\nRUN /opt/conda/bin/conda config --set ssl_verify False && \\\n    pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host && \\\n    ln -s /opt/conda/bin/pip /usr/local/bin/pip3\n\n# Install Horovod\nRUN ldconfig /usr/local/cuda-10.0/targets/x86_64-linux/lib/stubs && \\\n    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir horovod==${HOROVOD_VERSION} && \\\n    ldconfig\n\n# Configure Open MPI and configure NCCL parameters\nRUN mv /home/.openmpi/bin/mpirun /home/.openmpi/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /home/.openmpi/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /home/.openmpi/bin/mpirun && \\\n    chmod a+x /home/.openmpi/bin/mpirun && \\\n    echo \"hwloc_base_binding_policy = none\" >> /home/.openmpi/etc/openmpi-mca-params.conf && \\\n    echo \"rmaps_base_mapping_policy = slot\" >> /home/.openmpi/etc/openmpi-mca-params.conf && \\\n    echo \"btl_tcp_if_exclude = lo,docker0\" >> /home/.openmpi/etc/openmpi-mca-params.conf && \\\n    echo NCCL_DEBUG=INFO >> /etc/nccl.conf && \\\n    echo NCCL_SOCKET_IFNAME=^docker0 >> /etc/nccl.conf\n\n# Install OpenSSH for MPI to communicate between containers, Allow OpenSSH to talk to containers without asking for confirmation\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && \\\n    mkdir -p /var/run/sshd && \\\n    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config && rm -rf /var/lib/apt/lists/*;\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8\n\nRUN pip install --no-cache-dir fastai==1.0.39\n\nWORKDIR /\n\n# Copy workaround script for incorrect hostname\nCOPY lib/changehostname.c /\nCOPY lib/start_with_right_hostname.sh /usr/local/bin/start_with_right_hostname.sh\n\nRUN chmod +x /usr/local/bin/start_with_right_hostname.sh\n\nCOPY dist/sagemaker_pytorch_container-1.2-py2.py3-none-any.whl /sagemaker_pytorch_container-1.2-py2.py3-none-any.whl\nRUN pip install --no-cache-dir /sagemaker_pytorch_container-1.2-py2.py3-none-any.whl && \\\n    rm /sagemaker_pytorch_container-1.2-py2.py3-none-any.whl\n\nENV SAGEMAKER_TRAINING_MODULE sagemaker_pytorch_container.training:main\n\n# Starts framework\nENTRYPOINT [\"bash\", \"-m\", \"start_with_right_hostname.sh\"]\nCMD [\"/bin/bash\"]\n"
}