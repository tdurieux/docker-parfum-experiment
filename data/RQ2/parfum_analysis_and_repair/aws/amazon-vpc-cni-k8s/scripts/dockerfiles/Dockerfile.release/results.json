{
  "startTime": 1674252156669,
  "endTime": 1674252157129,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG golang_image\n\nFROM $golang_image as builder\nWORKDIR /go/src/github.com/aws/amazon-vpc-cni-k8s\nARG TARGETARCH\n# Configure build with Go modules\nENV GO111MODULE=on\nENV GOPROXY=direct\n\n# Copy modules in before the rest of the source to only expire cache on module changes:\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY Makefile ./\nRUN make plugins && make debug-script\n\nCOPY . ./\nRUN make build-linux\n\n# Build the architecture specific container image:\nFROM public.ecr.aws/amazonlinux/amazonlinux:2\nRUN yum update -y && \\\n    yum install -y iptables iproute jq && \\\n    yum clean all && rm -rf /var/cache/yum\n\nWORKDIR /app\n\nCOPY --from=builder /go/src/github.com/aws/amazon-vpc-cni-k8s/aws-cni \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/misc/10-aws.conflist \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/loopback \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/portmap \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/bandwidth \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/host-local \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/aws-cni-support.sh \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/aws-k8s-agent  \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/grpc-health-probe \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/egress-v4-cni \\\n    /go/src/github.com/aws/amazon-vpc-cni-k8s/scripts/entrypoint.sh /app/\n\nENTRYPOINT [\"/app/entrypoint.sh\"]\n"
}