{
  "startTime": 1674254382757,
  "endTime": 1674254383394,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG RUNTIME_VERSION\nARG DISTRO_VERSION\n\n# Stage 1 - build function and dependencies\nFROM public.ecr.aws/docker/library/python:${RUNTIME_VERSION}-${DISTRO_VERSION} AS python-debian-builder\n\n# Install aws-lambda-cpp build dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        g++ \\\n        make \\\n        cmake \\\n        libcurl4-openssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# Include global args in this stage of the build\nARG RIC_BUILD_DIR=\"/home/build/\"\n# Create function directory\nRUN mkdir -p ${RIC_BUILD_DIR}\n# Copy function code and Runtime Interface Client .tgz\nWORKDIR ${RIC_BUILD_DIR}\nCOPY . .\nRUN make init build test && \\\n    mv ./dist/awslambdaric-*.tar.gz ./dist/awslambdaric-test.tar.gz\n\n# Include global args in this stage of the build\nARG FUNCTION_DIR=\"/home/app/\"\n# Create function directory\nRUN mkdir -p ${FUNCTION_DIR}\n# Copy function code\nCOPY tests/integration/test-handlers/echo/* ${FUNCTION_DIR}\n# Copy Runtime Interface Client .tgz\nRUN cp ./dist/awslambdaric-test.tar.gz ${FUNCTION_DIR}/awslambdaric-test.tar.gz\n\n# Install the function's dependencies\nWORKDIR ${FUNCTION_DIR}\nRUN pip install --no-cache-dir \\\n        awslambdaric-test.tar.gz \\\n        --target ${FUNCTION_DIR} && \\\n    rm awslambdaric-test.tar.gz\n\n\n# Stage 2 - final runtime interface client image\n# Grab a fresh slim copy of the Python image\nFROM public.ecr.aws/docker/library/python:${RUNTIME_VERSION}-slim-${DISTRO_VERSION}\n\n# Include global arg in this stage of the build\nARG FUNCTION_DIR=\"/home/app/\"\n\n# copy the lambda function code\nCOPY --from=python-debian-builder ${FUNCTION_DIR} ${FUNCTION_DIR}\n\n# Set working directory to function root directory\nWORKDIR ${FUNCTION_DIR}\n\nENTRYPOINT [\"/usr/local/bin/python\", \"-m\", \"awslambdaric\"]\nCMD [\"app.handler\"]\n"
}