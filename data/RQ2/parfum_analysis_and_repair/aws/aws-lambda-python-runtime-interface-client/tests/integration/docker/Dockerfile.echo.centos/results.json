{
  "startTime": 1674215172170,
  "endTime": 1674215173650,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 48,
        "columnEnd": 90
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 9,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 42,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 55,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 6
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG DISTRO_VERSION\n\n# Stage 1 - bundle base image + runtime interface client\n# Grab a fresh copy of the image and install Python\nFROM public.ecr.aws/docker/library/centos:${DISTRO_VERSION} AS python-centos-builder\n\nARG RUNTIME_VERSION\n\n# Install apt dependencies\nRUN yum install -y \\\n  gcc \\\n  gcc-c++ \\\n  tar \\\n  gzip \\\n  make \\\n  autoconf \\\n  automake \\\n  freetype-devel \\\n  yum-utils \\\n  findutils \\\n  openssl-devel \\\n  wget \\\n  libffi-devel \\\n  sqlite-devel && rm -rf /var/cache/yum\n\nRUN RUNTIME_LATEST_VERSION=${RUNTIME_VERSION}.$( curl -f -s https://www.python.org/ftp/python/ | \\\n                                                grep -oE \"href=\\\"$(echo ${RUNTIME_VERSION} | sed \"s/\\\\./\\\\\\./g\")\\.[0-9]+\" | \\\n                                                cut -d. -f3 | \\\n                                                sort -rn | \\\n                                                while read -r patch; do \\\n                                                  $(wget -c https://www.python.org/ftp/python/${RUNTIME_VERSION}.$patch/Python-${RUNTIME_VERSION}.$patch.tgz -O Python-${RUNTIME_VERSION}.$patch.tgz); \\\n                                                  [ $? -eq 0 ] && echo $patch && break; \\\n                                                done) \\\n  && tar -xzf Python-${RUNTIME_LATEST_VERSION}.tgz \\\n  && cd Python-${RUNTIME_LATEST_VERSION} \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-shared \\\n  && make \\\n  && make install \\\n  && ln -s /usr/local/bin/python${RUNTIME_VERSION} /usr/local/bin/python${RUNTIME_LATEST_VERSION} && rm Python-${RUNTIME_LATEST_VERSION}.tgz\n\n# Stage 2 - clean python build dependencies\nFROM public.ecr.aws/docker/library/centos:${DISTRO_VERSION} AS python-centos\nRUN yum install -y \\\n  libffi-devel && rm -rf /var/cache/yum\n\n# Copy the compiled python to /usr/local\nCOPY --from=python-centos-builder /usr/local /usr/local\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n\n# Stage 3 - build function and dependencies\nFROM python-centos-builder AS build-image\nARG RUNTIME_VERSION\nARG ARCHITECTURE\n\n# Install aws-lambda-cpp build dependencies\nRUN yum install -y \\\n  tar \\\n  gzip \\\n  make \\\n  autoconf \\\n  automake \\\n  libtool \\\n  libcurl-devel \\\n  gcc-c++ \\\n  wget && rm -rf /var/cache/yum\n\n# Install a modern CMake\nRUN wget --quiet -O cmake-install https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-linux-${ARCHITECTURE}.sh && \\\n    sh cmake-install --skip-license --prefix=/usr --exclude-subdirectory;\n\nENV PATH=/usr/local/bin:$PATH\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n\n\n# Include global args in this stage of the build\nARG RIC_BUILD_DIR=\"/home/build/\"\n# Create function directory\nRUN mkdir -p ${RIC_BUILD_DIR}\n# Copy function code and Runtime Interface Client .tgz\nWORKDIR ${RIC_BUILD_DIR}\nCOPY . .\nRUN make init build && \\\n    mv ./dist/awslambdaric-*.tar.gz ./dist/awslambdaric-test.tar.gz\n\n# Include global args in this stage of the build\nARG FUNCTION_DIR=\"/home/app/\"\n# Create function directory\nRUN mkdir -p ${FUNCTION_DIR}\n# Copy function code\nCOPY tests/integration/test-handlers/echo/* ${FUNCTION_DIR}\n# Copy Runtime Interface Client .tgz\nRUN cp ./dist/awslambdaric-test.tar.gz ${FUNCTION_DIR}/awslambdaric-test.tar.gz\n\n# Install the function's dependencies\nWORKDIR ${FUNCTION_DIR}\nARG ENABLE_LTO=OFF\nENV ENABLE_LTO ${ENABLE_LTO}\nRUN python${RUNTIME_VERSION} -m pip install \\\n          awslambdaric-test.tar.gz \\\n          --verbose \\\n          --target ${FUNCTION_DIR} && \\\n    rm awslambdaric-test.tar.gz\n\n\n# Stage 4 - final runtime interface client image\n# Grab a fresh copy of the Python image\nFROM python-centos\n\n# Include global arg in this stage of the build\nARG FUNCTION_DIR=\"/home/app/\"\n# Set working directory to function root directory\nWORKDIR ${FUNCTION_DIR}\n# Copy in the built dependencies\nCOPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}\n\nENTRYPOINT [ \"/usr/local/bin/python3\", \"-m\", \"awslambdaric\" ]\nCMD [ \"app.handler\" ]\n"
}