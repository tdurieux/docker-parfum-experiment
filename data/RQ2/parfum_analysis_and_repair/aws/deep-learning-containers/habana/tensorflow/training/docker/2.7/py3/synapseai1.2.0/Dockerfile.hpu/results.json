{
  "startTime": 1674215215593,
  "endTime": 1674215216354,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 22,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 22,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM vault.habana.ai/gaudi-docker/1.2.0/ubuntu20.04/habanalabs/tensorflow-installer-tf-cpu-2.7.0:latest\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# prevent stopping by user interaction\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\n# Set environment variables for MKL\n# For more about MKL with TensorFlow see:\n# https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn\n\nENV KMP_AFFINITY=granularity=fine,compact,1,0\nENV KMP_BLOCKTIME=1\nENV KMP_SETTINGS=0\n\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n\nARG PYTHON=python3.8\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3.8\n\nARG TF_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/tensorflow/r2.7_aws/hpu-manylinux-py38/2022-01-22-02-41/tensorflow_cpu-2.7.0-cp38-cp38-manylinux2010_x86_64.whl\n\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    emacs \\\n    git \\\n    libtemplate-perl \\\n    libssl1.1 \\\n    openssl \\\n    unzip \\\n    wget \\\n    vim \\\n    zlib1g-dev \\\n    # Install dependent library for OpenCV\n    libgtk2.0-dev \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n && mkdir -p /var/run/sshd \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libbz2-dev \\\n    libc6-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    liblzma-dev \\\n    libncursesw5-dev \\\n    libreadline-gplv2-dev \\\n    libsqlite3-dev \\\n    libssl-dev \\\n    tk-dev \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    #Setuptools release 60.x (and later) revealed an issue in Habana-TensorFlow package.\n    \"setuptools<60.0.0\"\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s $(which ${PIP}) /usr/bin/pip\n\nRUN apt-get update && apt-get -y --no-install-recommends install cmake protobuf-compiler && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP} uninstall -y tensorflow-cpu \\\n && ${PIP} install --no-cache-dir -U \\\n    numpy==1.19.1 \\\n    scipy==1.5.2 \\\n    scikit-learn==0.23 \\\n    pandas==1.1 \\\n    Pillow \\\n    # python-dateutil==2.8.1 to satisfy botocore associated with latest awscli\n    python-dateutil==2.8.1 \\\n    # install PyYAML>=5.4 to avoid conflict with latest awscli\n    \"pyYAML>=5.4,<5.5\" \\\n    requests \\\n    \"awscli<2\" \\\n    mpi4py==3.0.3 \\\n    opencv-python==4.3.0.36 \\\n && ${PIP} uninstall -y keras \\\n && ${PIP} install --no-cache-dir -U boto3 --upgrade \\\n    # Let's install TensorFlow separately in the end to avoid\n    # the library version to be overwritten\n && ${PIP} install --no-cache-dir -U \\\n    ${TF_URL} \\\n    h5py==3.1.0 \\\n    \"absl-py>=0.9,<0.11\" \\\n    werkzeug \\\n    psutil==5.7.2 \\\n && rm -rf ${TF_URL}\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n   && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n   && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n   && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n   && chmod +x /usr/local/bin/testOSSCompliance \\\n   && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n   && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n   && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-2.7/license.txt -o /license.txt\n\nCMD [\"/bin/bash\"]\n"
}