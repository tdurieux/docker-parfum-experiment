{
  "startTime": 1674216117847,
  "endTime": 1674216119205,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 90
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM vault.habana.ai/gaudi-docker/0.15.4/ubuntu18.04/habanalabs/pytorch-installer:0.15.4-75\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# Python versions\nARG PYTHON=python3.7\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3.7\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    ca-certificates \\\n    curl \\\n    jq \\\n    emacs \\\n    git \\\n    libtemplate-perl \\\n    libssl1.1 \\\n    openssl \\\n    unzip \\\n    wget \\\n    vim \\\n    zlib1g-dev \\\n    # Install dependent library for OpenCV\n    libgtk2.0-dev \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\n\nARG PT_TRAINING_URL\nCOPY ${PT_TRAINING_URL} .\n\nARG PT_TORCHVISION_URL=https://torchvision-build.s3.us-west-2.amazonaws.com/1.7.1/cpu/torchvision-0.8.2-cp37-cp37m-linux_x86_64.whl\n\nRUN pip --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# The following section uninstalls torch and torchvision before installing the\n# custom versions from an S3 bucket.\nRUN pip install --no-cache-dir --user -U \\ \n    fastai==1.0.61 \\\n    \"pyyaml>=5.4,<5.5\" \\\n    \"awscli<2\" \\\n    psutil \\\n    Pillow \\\n    scipy \\\n    pybind11 \\\n    mpi4py==3.0.3 \\\n    cmake==3.18.2.post1 \\\n    torchnet \\\n    \"cryptography>3.2\" \\\n    werkzeug \\\n && pip uninstall -y dataclasses typing \\\n && pip install --no-cache-dir --user -U boto3 --upgrade \\\n && pip uninstall -y torch \\\n && pip uninstall -y hb-torch \\\n && pip install --no-cache-dir --user -U ${PT_TRAINING_URL} \\\n && rm -rf ${PT_TRAINING_URL} \\\n && pip uninstall -y torchvision \\\n && pip install --no-deps --no-cache-dir --user -U ${PT_TORCHVISION_URL} \\\n && rm -rf ${PT_TORCHVISION_URL}\n\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/.local/lib\n\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s $(which ${PIP}) /usr/bin/pip\n\n# Copy workaround script for incorrect hostname\nCOPY changehostname.c /\nCOPY start_with_right_hostname.sh /usr/local/bin/start_with_right_hostname.sh\n\nADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/start_with_right_hostname.sh \\\n && chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.7/license.txt\n\n# Starts framework\nENTRYPOINT [\"bash\", \"-m\", \"start_with_right_hostname.sh\"]\nCMD [\"/bin/bash\"]\n"
}