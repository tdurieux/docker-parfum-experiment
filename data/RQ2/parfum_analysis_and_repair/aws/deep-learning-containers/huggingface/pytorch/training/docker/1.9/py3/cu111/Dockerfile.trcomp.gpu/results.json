{
  "startTime": 1674248732948,
  "endTime": 1674248734010,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://github.com/aws/deep-learning-containers/blob/master/available_images.md\n# refer to the above page to pull latest Pytorch image\n\n# docker image region us-west-2\nFROM 763104351884.dkr.ecr.us-west-2.amazonaws.com/pytorch-training:1.9-gpu-py38-cu111-ubuntu20.04-v1\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# version args\nARG TRANSFORMERS_VERSION\nARG DATASETS_VERSION\nARG PYTHON=python3\n\n# Install  Sagemaker PythonSDK\nARG SAGEMAKER_BINARY\n\nCOPY ${SAGEMAKER_BINARY} .\n\n# Install Sagemaker PythonSDK\nRUN pip install --no-cache-dir sagemaker\n\n\n# Artifact URLs\nARG ARTIFACT_BUCKET=https://sm-training-comp-pytorch-binaries.s3.us-west-2.amazonaws.com\nARG PT_PREFIX=8e3374f1-7fd0-4909-acc0-7d00f2ba52b5/20220120-035850/f8595cb4308f6cf9856beebb39e6bed5ddd38f6a\nARG PT_URL=${ARTIFACT_BUCKET}/${PT_PREFIX}/torch-1.9.0-cp38-cp38-linux_x86_64.whl\nARG PT_XLA_URL=${ARTIFACT_BUCKET}/${PT_PREFIX}/torch_xla-1.10%2Bf8595cb-cp38-cp38-linux_x86_64.whl\nARG TORCHVISION_URL=${ARTIFACT_BUCKET}/${PT_PREFIX}/torchvision-0.10.0a0%2B6e72416-cp38-cp38-linux_x86_64.whl\nARG HF_PREFIX=v4.11.0_aws/20211111-201203/e5c0ba2158ef44f1a15f2d58dc5f0e17e4678242\nARG HF_TRANSFORMERS_URL=${ARTIFACT_BUCKET}/${HF_PREFIX}/transformers-4.11.0-py3-none-any.whl\n\n# install Hugging Face libraries and its dependencies\nRUN pip install -U --no-cache-dir \\ \n\ttransformers[sklearn,sentencepiece]==${TRANSFORMERS_VERSION} \\ \n\tdatasets==${DATASETS_VERSION} \\\n\t# TODO: Remove upgrade statements once packages are updated in base image\n\t\"Pillow>=8.3.2\" \\\n    \"bokeh>=2.4.2\" \\\n    \"numpy>=1.22.0\" \\\n    \"ipython>=7.31.1\" \\\n    \"opencv-python>=4.6,<5\"\n\nRUN apt-get update \\\n # TODO: Remove upgrade statements once packages are updated in base image\n && apt-get -y upgrade --only-upgrade systemd openssl \\\n && apt install --no-install-recommends -y git-lfs \\\n && apt install --no-install-recommends -y libomp5 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install PyTorch\n\nRUN pip uninstall -y torch\\\n && pip install --no-deps --no-cache-dir -U --force-reinstall ${PT_URL}\n\n# Install PyTorch XLA\n\nRUN pip uninstall -y torch_xla \\\n && pip install --no-deps --no-cache-dir -U --force-reinstall ${PT_XLA_URL}\n\n# Install TorchVision\n\nRUN pip uninstall -y torchvision \\\n && pip install --no-deps --no-cache-dir -U --force-reinstall ${TORCHVISION_URL}\n\n# Install Tranformers\n\nRUN pip uninstall -y transformers \\\n && pip install --no-deps --no-cache-dir --force-reinstall -U ${HF_TRANSFORMERS_URL}\n\n# Fix library links\nARG CONDA_PREFIX=/opt/conda\n\nRUN ln -s ${CONDA_PREFIX}/lib/libmkl_intel_lp64.so ${CONDA_PREFIX}/lib/libmkl_intel_lp64.so.1 \\\n && ln -s ${CONDA_PREFIX}/lib/libmkl_intel_thread.so ${CONDA_PREFIX}/lib/libmkl_intel_thread.so.1 \\\n && ln -s ${CONDA_PREFIX}/lib/libmkl_core.so ${CONDA_PREFIX}/lib/libmkl_core.so.1\n\n# Install Numpy\nARG NUMPY_VERSION=1.20\nRUN ${CONDA_PREFIX}/bin/conda install -y -c anaconda numpy=${NUMPY_VERSION}\n\n# Install Horovod\nENV HOROVOD_VERSION=0.21.3\nRUN pip uninstall -y horovod \\\n && ldconfig /usr/local/cuda-11.1/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_CUDA_HOME=/usr/local/cuda-11.1 HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir horovod==${HOROVOD_VERSION} \\\n && ldconfig\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n"
}