{
  "startTime": 1674254940096,
  "endTime": 1674254941119,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# Specify accept-bind-to-port LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT\n# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n# Specify multi-models LABEL to indicate container is capable of loading and serving multiple models concurrently\n# https://docs.aws.amazon.com/sagemaker/latest/dg/build-multi-model-build-container.html\nLABEL com.amazonaws.sagemaker.capabilities.multi-models=true\n\nARG MMS_VERSION=1.1.7\nARG PYTHON=python3\nARG PYTHON_VERSION=3.6.13\nARG OPEN_MPI_VERSION=4.0.1\n# HF ARGS\nARG PT_INFERENCE_URL=https://pytorch-ei-binaries.s3-us-west-2.amazonaws.com/r1.8.1_inference/20210326-045154/0cef1489a03d1f55f692c38bfb26b5f4f6ecbfa7/cpu/torch-1.8.1-cp36-cp36m-manylinux1_x86_64.whl\nARG TRANSFORMERS_VERSION\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"/opt/conda/lib/:${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    DEBIAN_FRONTEND=noninteractive\n\nENV PATH /opt/conda/bin:$PATH\n\nRUN apt-get update \\\n # TODO: Remove upgrade statements once packages are updated in base image\n && apt-get -y upgrade --only-upgrade systemd openssl \\\n && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    build-essential \\\n    openssl \\\n    openjdk-8-jdk-headless \\\n    vim \\\n    wget \\\n    curl \\\n    emacs \\\n    unzip \\\n    git \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# py37 is the oldest python version supported by Miniconda 4.10.3, py36 is installed below and will override py37 environment\nRUN curl -f -L -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda install -c conda-forge \\\n    python=$PYTHON_VERSION \\\n && /opt/conda/bin/conda install -y \\\n    # conda 4.10.0 requires ruamel_yaml to be installed. Currently pinned at latest.\n    ruamel_yaml==0.15.100 \\\n    cython==0.29.12 \\\n    mkl-include==2019.4 \\\n    mkl==2019.4 \\\n    botocore \\\n && /opt/conda/bin/conda clean -ya\n\nRUN pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \\\n && pip install --no-cache-dir packaging==20.4 \\\n    enum-compat==0.0.3 \\\n    \"cryptography>3.2\"\n\nRUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \\\n && cd openmpi-$OPEN_MPI_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/home/.openmpi \\\n && make all install \\\n && cd .. \\\n && rm openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && rm -rf openmpi-$OPEN_MPI_VERSION\n\n# The ENV variables declared below are changed in the previous section\n# Grouping these ENV variables in the first section causes\n# ompi_info to fail. This is only observed in CPU containers\nENV PATH=\"$PATH:/home/.openmpi/bin\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/.openmpi/lib/\"\nRUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value\n\nWORKDIR /\n\nRUN pip install --no-cache-dir \\\n    multi-model-server==$MMS_VERSION \\\n    sagemaker-inference\n\nRUN useradd -m model-server \\\n && mkdir -p /home/model-server/tmp \\\n && chown -R model-server /home/model-server\n\nCOPY mms-entrypoint.py /usr/local/bin/dockerd-entrypoint.py\nCOPY config.properties /etc/sagemaker-mms.properties\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py\n\nADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\n#################################\n# Hugging Face specific section #\n#################################\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.8/license.txt -o /license.txt\n\n# Uninstall and re-install torch and torchvision from the PyTorch website\nRUN pip uninstall -y torch \\\n && pip install --no-cache-dir -U $PT_INFERENCE_URL\n\n# install Hugging Face libraries and its dependencies\nRUN pip install --no-cache-dir \\\n\ttransformers[sentencepiece]==${TRANSFORMERS_VERSION} \\\n\tprotobuf==3.12.0 \\\n\t\"sagemaker-huggingface-inference-toolkit<2\"\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nEXPOSE 8080 8081\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"serve\"]\n"
}