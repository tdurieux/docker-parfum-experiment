{
  "startTime": 1674247997911,
  "endTime": 1674247999104,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 3,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 3,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 69,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 3,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# Specify accept-bind-to-port LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT\n# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n# Specify multi-models LABEL to indicate container is capable of loading and serving multiple models concurrently\n# https://docs.aws.amazon.com/sagemaker/latest/dg/build-multi-model-build-container.html\nLABEL com.amazonaws.sagemaker.capabilities.multi-models=true\n\nARG MMS_VERSION=1.1.8\nARG PYTHON=python3\nARG PIP=pip3\nARG PYTHON_VERSION=3.7.10\n\nENV DEBIAN_FRONTEND=noninteractive\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    TEMP=/home/model-server/tmp\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    git \\\n    libopencv-dev \\\n    openjdk-8-jdk-headless \\\n    openjdk-8-jdk \\\n    openjdk-8-jre \\\n    vim \\\n    wget \\\n    unzip \\\n    zlib1g-dev \\\n    libreadline-gplv2-dev \\\n    libncursesw5-dev \\\n    openssl \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    libgdbm-dev \\\n    libc6-dev \\\n    libbz2-dev \\\n    tk-dev \\\n    libffi-dev \\\n    libcap-dev \\\n    gnupg2 \\\n && apt-get clean \\\n && rm -rf /tmp/tmp* \\\n && rm -rf /var/lib/apt/lists/*\n\n## This section is for allowing the automatic updates of vulnerable packages.\nCOPY apt-upgrade-list.txt /tmp/apt-upgrade-list.txt\nRUN apt-get update \\\n&& apt-get install -y --no-install-recommends --only-upgrade $(cat /tmp/apt-upgrade-list.txt) \\\n&& rm -rf /tmp/apt-upgrade-list.txt && rm -rf /var/lib/apt/lists/*;\n\nRUN echo \"deb https://apt.repos.neuron.amazonaws.com bionic main\" > /etc/apt/sources.list.d/neuron.list\nRUN wget -qO - https://apt.repos.neuron.amazonaws.com/GPG-PUB-KEY-AMAZON-AWS-NEURON.PUB | apt-key add -\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n    aws-neuron-tools=2.0.623.0 \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && rm -rf /tmp/tmp* \\\n  && apt-get clean\n\n# https://github.com/docker-library/openjdk/issues/261 https://github.com/docker-library/openjdk/pull/263/files\nRUN keytool -importkeystore -srckeystore /etc/ssl/certs/java/cacerts -destkeystore /etc/ssl/certs/java/cacerts.jks -deststoretype JKS -srcstorepass changeit -deststorepass changeit -noprompt; \\\n    mv /etc/ssl/certs/java/cacerts.jks /etc/ssl/certs/java/cacerts; \\\n    /var/lib/dpkg/info/ca-certificates-java.postinst configure;\n\n# install Python\nRUN wget -q https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xzf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared --prefix=/usr/local \\\n && make -j $(nproc) && make install \\\n && cd .. && rm -rf ../Python-$PYTHON_VERSION* \\\n && ln -s /usr/local/bin/pip3 /usr/bin/pip \\\n && ln -s /usr/local/bin/$PYTHON /usr/local/bin/python \\\n && ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools && rm Python-$PYTHON_VERSION.tgz\n\nWORKDIR /\n\nRUN ${PIP} install --no-cache-dir \\\n    \"awscli<2\" \\\n    boto3 \\\n    gluonnlp==0.10.0 \\\n    gluoncv==0.8.0 \\\n    multi-model-server==$MMS_VERSION \\\n    keras-mxnet==2.2.4.1 \\\n    numpy==1.17.4 \\\n    onnx==1.7.0 \\\n    protobuf==3.19.4 \\\n    sagemaker-mxnet-inference\n\nRUN ${PIP} install neuron-cc[tensorflow]==1.9.1.0 --extra-index-url https://pip.repos.neuron.amazonaws.com \\\n && ${PIP} install --no-cache-dir -U \\\n    https://aws-mx-pypi.s3-us-west-2.amazonaws.com/1.8.0/aws_mx-1.8.0-py2.py3-none-manylinux2014_x86_64.whl \\\n && ${PIP} install mx-neuron==1.8.0.2.1.5.0 --extra-index-url https://pip.repos.neuron.amazonaws.com \\\n # Install TF 1.15.5 to override neuron-cc[tensorflow]'s installation of tensorflow==1.15.0 \\\n && pip install --no-cache-dir -U tensorflow==1.15.5\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nRUN useradd -m model-server \\\n && mkdir -p /home/model-server/tmp \\\n && chown -R model-server /home/model-server\n\nCOPY neuron-entrypoint.py /usr/local/bin/dockerd-entrypoint.py\nCOPY neuron-monitor.sh /usr/local/bin/neuron-monitor.sh\nCOPY modelserver-neuron.sh /usr/local/bin/entrypoint.sh\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py \\\n && chmod +x /usr/local/bin/neuron-monitor.sh \\\n && chmod +x /usr/local/bin/entrypoint.sh\n\nCOPY config.properties /home/model-server\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/aws-mx-1.8.0/license.txt -o /license.txt\n\nEXPOSE 8080 8081\n\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"/usr/local/bin/entrypoint.sh\"]\n"
}