{
  "startTime": 1674249161686,
  "endTime": 1674249162787,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM arm64v8/ubuntu:18.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG MMS_VERSION=1.1.2\nARG MX_URL=https://aws-mx-pypi.s3.us-west-2.amazonaws.com/1.9.0/aws_mx-1.9.0.25-py3-none-manylinux2014_aarch64.whl\nARG PYTHON=python3\nARG PIP=pip3\nARG PYTHON_VERSION=3.8.10\nARG OPENSSL_VERSION=1.1.1l\nENV DEBIAN_FRONTEND=noninteractive\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    TEMP=/home/model-server/tmp\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    cmake \\\n    libprotobuf-dev \\\n    protobuf-compiler \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    git \\\n    libopencv-dev \\\n    openjdk-8-jdk-headless \\\n    openjdk-8-jdk \\\n    openjdk-8-jre \\\n    vim \\\n    wget \\\n    unzip \\\n    zlib1g-dev \\\n    libreadline-gplv2-dev \\\n    libncursesw5-dev \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    libgdbm-dev \\\n    libc6-dev \\\n    libbz2-dev \\\n    tk-dev \\\n    libffi-dev \\\n    python3-h5py \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# install OpenSSL\nRUN wget -q -c https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./config && make -j $(nproc) && make install \\\n && ldconfig \\\n && cd .. && rm -rf openssl-* \\\n && rmdir /usr/local/ssl/certs \\\n && ln -s /etc/ssl/certs /usr/local/ssl/certs && rm openssl-${OPENSSL_VERSION}.tar.gz\n\n# install ArmPL\nRUN wget https://developer.arm.com/-/media/Files/downloads/hpc/arm-performance-libraries/21-1-0/Ubuntu18.04/arm-performance-libraries_21.1_Ubuntu-18.04_gcc-9.3.tar \\\n && tar -xvf arm-performance-libraries_21.1_Ubuntu-18.04_gcc-9.3.tar \\\n && arm-performance-libraries_21.1_Ubuntu-18.04_gcc-9.3/arm-performance-libraries_21.1_Ubuntu-18.04.sh -a \\\n && export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/arm/armpl_21.1_gcc-9.3/lib/ \\\n && ldconfig /opt/arm/armpl_21.1_gcc-9.3/lib/ && rm arm-performance-libraries_21.1_Ubuntu-18.04_gcc-9.3.tar\n\n# install Python\nRUN wget -q https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xzf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared --prefix=/usr/local \\\n && make -j $(nproc) && make install \\\n && cd .. && rm -rf ../Python-$PYTHON_VERSION* \\\n && ln -s /usr/local/bin/pip3 /usr/bin/pip \\\n && ln -s /usr/local/bin/$PYTHON /usr/local/bin/python \\\n && ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools && rm Python-$PYTHON_VERSION.tgz\n\nRUN rm -rf /tmp/tmp*\n\nWORKDIR /\n\nRUN ${PIP} install --no-cache-dir \\\n    \"awscli<2\" \\\n    boto3 \\\n    ${MX_URL} \\\n    gluonnlp==0.10.0 \\\n    gluoncv==0.8.0 \\\n    multi-model-server==$MMS_VERSION \\\n    onnx==1.7.0\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nRUN useradd -m model-server \\\n && mkdir -p /home/model-server/tmp \\\n && chown -R model-server /home/model-server\n\nCOPY mms-e3-entrypoint.py /usr/local/bin/dockerd-entrypoint.py\nCOPY config.properties /home/model-server\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && cp ${HOME_DIR}/oss_compliance/build_from_source_packages/BUILD_FROM_SOURCE_PACKAGES_LICENCES_AARCH64_IMAGES ${HOME_DIR} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/aws-mx-1.8.0/license.txt -o /license.txt\n\nEXPOSE 8080 8081\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"multi-model-server\", \"--start\", \"--mms-config\", \"/home/model-server/config.properties\"]\n"
}