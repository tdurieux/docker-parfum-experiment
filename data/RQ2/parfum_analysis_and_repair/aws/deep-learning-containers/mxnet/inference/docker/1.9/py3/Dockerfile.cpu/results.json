{
  "startTime": 1674248783183,
  "endTime": 1674248784518,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##############################################################################\n#  _____ _____   ___                              ____           _\n# | ____|___ /  |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n# |  _|   |_ \\   | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n# | |___ ___) |  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |_____|____/  |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                                    |___/                        |_|\n##############################################################################\n\nFROM ubuntu:20.04 AS e3\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON_VERSION=3.8.10\nARG MMS_VERSION=1.1.8\nARG MX_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/mxnet/v1.9.0/aws_mx-1.9.0-py3-none-manylinux2014_x86_64.whl\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    TEMP=/home/model-server/tmp \\\n    DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update \\\n && apt-get -y upgrade --only-upgrade systemd \\\n && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    git \\\n    libopencv-dev \\\n    openjdk-8-jdk-headless \\\n    openjdk-8-jdk \\\n    openjdk-8-jre \\\n    vim \\\n    wget \\\n    unzip \\\n    zlib1g-dev \\\n    libreadline-gplv2-dev \\\n    libncursesw5-dev \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    libgdbm-dev \\\n    libc6-dev \\\n    libbz2-dev \\\n    tk-dev \\\n    libffi-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# install Python\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y python3 python3-pip \\\n && rm -rf /usr/bin/python /usr/bin/pip \\\n && ln -s /usr/bin/python3 /usr/bin/python \\\n && ln -s /usr/bin/pip3 /usr/bin/pip && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /\n\nRUN pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && pip install --no-cache-dir \\\n    \"awscli<2\" \\\n    boto3 \\\n    ${MX_URL} \\\n    gluonnlp==0.10.0 \\\n    gluoncv==0.8.0 \\\n    multi-model-server==$MMS_VERSION \\\n    \"numpy<1.20\" \\\n    onnx==1.8.1 \\\n    # Protobuf above this version appears to result protobuf errors.\n    protobuf==3.20.1\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nRUN useradd -m model-server \\\n && mkdir -p /home/model-server/tmp \\\n && chown -R model-server /home/model-server\n\nCOPY mms-e3-entrypoint.py /usr/local/bin/dockerd-entrypoint.py\nCOPY config.properties /home/model-server\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/aws-mx-1.9.0/license.txt -o /license.txt\n\nEXPOSE 8080 8081\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"multi-model-server\", \"--start\", \"--mms-config\", \"/home/model-server/config.properties\"]\n\n#################################################################\n#  ____                   __  __       _\n# / ___|  __ _  __ _  ___|  \\/  | __ _| | _____ _ __\n# \\___ \\ / _` |/ _` |/ _ \\ |\\/| |/ _` | |/ / _ \\ '__|\n#  ___) | (_| | (_| |  __/ |  | | (_| |   <  __/ |\n# |____/ \\__,_|\\__, |\\___|_|  |_|\\__,_|_|\\_\\___|_|\n#              |___/\n#  ___                              ____           _\n# |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n#  | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n#  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                      |___/                        |_|\n#################################################################\n\nFROM e3 AS sagemaker\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# Specify accept-bind-to-port LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT\n# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html\nLABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true\n# Specify multi-models LABEL to indicate container is capable of loading and serving multiple models concurrently\n# https://docs.aws.amazon.com/sagemaker/latest/dg/build-multi-model-build-container.html\nLABEL com.amazonaws.sagemaker.capabilities.multi-models=true\n\nARG PYTHON_VERSION=3.8.10\n\nWORKDIR /\n\nRUN pip install --no-cache-dir \\\n    sagemaker-mxnet-inference\n\nCOPY mms-entrypoint.py /usr/local/bin/dockerd-entrypoint.py\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nEXPOSE 8080 8081\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"multi-model-server\", \"--start\", \"--mms-config\", \"/home/model-server/config.properties\"]\n"
}