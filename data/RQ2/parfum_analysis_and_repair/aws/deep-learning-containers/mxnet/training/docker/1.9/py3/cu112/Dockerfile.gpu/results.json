{
  "startTime": 1674217138340,
  "endTime": 1674217140090,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 128,
        "lineEnd": 154,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 230,
        "lineEnd": 235,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##############################################################################\n#  _____ _____   ___                              ____           _\n# | ____|___ /  |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n# |  _|   |_ \\   | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n# | |___ ___) |  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |_____|____/  |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                                    |___/                        |_|\n##############################################################################\n\n# Note: We need to install NCCL, cuDNN, and CUDA libraries since we are using base container.\nFROM nvidia/cuda:11.2.2-base-ubuntu20.04 AS e3\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON_VERSION=3.8.10\nARG MX_URL=https://aws-mx-pypi.s3.us-west-2.amazonaws.com/1.9.0/aws_mx_cu112-1.9.0b20211227.163-py3-none-manylinux2014_x86_64.whl\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    DGLBACKEND=mxnet \\\n    CUDNN_VERSION=8.1.0.77-1+cuda11.2 \\\n    NCCL_VERSION=2.8.3-1+cuda11.2 \\\n    DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update \\\n && apt-get -y upgrade --only-upgrade systemd \\\n && apt-get install -y --no-install-recommends \\\n    # from sources.list\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    git \\\n    vim \\\n    wget \\\n    unzip \\\n    libopencv-dev \\\n    openssh-client \\\n    openssh-server \\\n    zlib1g-dev \\\n    libreadline-gplv2-dev \\\n    libncursesw5-dev \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    libgdbm-dev \\\n    libc6-dev \\\n    libbz2-dev \\\n    tk-dev \\\n    libffi-dev \\\n    cmake \\\n    libgtk2.0-dev \\\n    # from sources.list.d/cuda.list\n    libcudnn8=${CUDNN_VERSION} \\\n    libcufft-11-2 \\\n    libcusparse-11-2 \\\n    libcublas-11-2 \\\n    libcublas-dev-11-2 \\\n    libcurand-11-2 \\\n    libcurand-dev-11-2 \\\n    libcusolver-11-2 \\\n    libcusolver-dev-11-2 \\\n    cuda-nvrtc-11-2 \\\n    cuda-nvrtc-dev-11-2 \\\n    cuda-command-line-tools-11-2 \\\n    # from sources.list.d/nvidia-ml.list\n    # Until the version of these is bumped, these will be manually installed. See below.\n    # libnccl2=${NCCL_VERSION} \\\n    # libnccl-dev=${NCCL_VERSION} \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# from sources.list.d/nvidia-ml.list which was recently deprecated.\n# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771/10\n# For now, we will manually pull and install packages.\nRUN wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/libnccl2_${NCCL_VERSION}_amd64.deb \\\n&& dpkg -i libnccl2_${NCCL_VERSION}_amd64.deb \\\n&& wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/libnccl-dev_${NCCL_VERSION}_amd64.deb \\\n&& dpkg -i libnccl-dev_${NCCL_VERSION}_amd64.deb \\\n&& rm libnccl2_${NCCL_VERSION}_amd64.deb libnccl-dev_${NCCL_VERSION}_amd64.deb\n\n# install Python\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y python3 python3-pip \\\n && rm -rf /usr/bin/python /usr/bin/pip \\\n && ln -s /usr/bin/python3 /usr/bin/python \\\n && ln -s /usr/bin/pip3 /usr/bin/pip && rm -rf /var/lib/apt/lists/*;\n\n###########################################################################\n# Horovod dependencies\n###########################################################################\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && wget -q https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \\\n && tar zxf openmpi-4.0.1.tar.gz \\\n && cd openmpi-4.0.1 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.1.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\nENV PATH=/usr/local/bin:/usr/local/nvidia/bin:$PATH\n\nWORKDIR /\n\nRUN pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && pip install --no-cache-dir --no-cache --upgrade \\\n    # Protobuf above this version appears to result in horovod build failures.\n    protobuf==3.20.1 \\\n    h5py==2.10.0 \\\n    onnx==1.8.1 \\\n    \"numpy<1.20\" \\\n    pandas==1.3.0 \\\n    \"Pillow>=9.0,<10.0\" \\\n    \"requests<3\" \\\n    scikit-learn \\\n\n\n    scipy==1.7.0 \\\n    gluonnlp==0.10.0 \\\n    gluoncv==0.8.0 \\\n\n    \"urllib3<2\" \\\n\n    python-dateutil==2.8.0 \\\n    tqdm==4.39.0 \\\n\n    \"PyYAML>=5.4,<5.5\" \\\n    mpi4py==3.0.3 \\\n    ${MX_URL} \\\n    awscli \\\n    s3fs==0.4.2 \\\n    opencv-python\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-11.2/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITHOUT_TENSORFLOW=1 \\\n    HOROVOD_WITHOUT_PYTORCH=1 HOROVOD_WITH_MXNET=1 MAKEFLAGS=\"-j1\" \\\n    pip install --no-cache-dir horovod \\\n && ldconfig\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# OpenSHH config for MPI communication\nRUN mkdir -p /var/run/sshd && \\\n  sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nRUN rm -rf /root/.ssh/ && \\\n  mkdir -p /root/.ssh/ && \\\n  ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \\\n  cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n  && printf \"Host *\\n StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/aws-mx-1.9.0/license.txt\n\nCMD [\"/bin/bash\"]\n\n#################################################################\n#  ____                   __  __       _\n# / ___|  __ _  __ _  ___|  \\/  | __ _| | _____ _ __\n# \\___ \\ / _` |/ _` |/ _ \\ |\\/| |/ _` | |/ / _ \\ '__|\n#  ___) | (_| | (_| |  __/ |  | | (_| |   <  __/ |\n# |____/ \\__,_|\\__, |\\___|_|  |_|\\__,_|_|\\_\\___|_|\n#              |___/\n#  ___                              ____           _\n# |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n#  | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n#  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                      |___/                        |_|\n#################################################################\n\nFROM e3 AS sagemaker\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON_VERSION=3.8.10\n\n# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating\n# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.\nARG SMDEBUG_VERSION=1.0.12\n\nENV SAGEMAKER_TRAINING_MODULE=sagemaker_mxnet_container.training:main\n\nWORKDIR /\n\nRUN pip install --no-cache-dir --no-cache --upgrade \\\n    sagemaker-experiments==0.* \\\n    sagemaker-mxnet-training \\\n    smdebug==${SMDEBUG_VERSION} \\\n    sagemaker \\\n    smclarify\n\n# Install extra packages\nRUN pip install --no-cache-dir -U \\\n    bokeh \\\n    imageio \\\n    plotly \\\n    seaborn \\\n    shap\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nCMD [\"/bin/bash\"]\n"
}