{
  "startTime": 1674248542296,
  "endTime": 1674248543508,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 225,
        "lineEnd": 225,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedDockerfile": "# Note: We need to install NCCL, cuDNN, and CUDA libraries since we are using base container.\nFROM nvidia/cuda:10.1-base-ubuntu16.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON=python3\nARG PIP=pip3\nARG PYTHON_VERSION=3.6.13\nARG MX_URL=https://aws-mx-pypi.s3-us-west-2.amazonaws.com/1.7.0/aws_mx_cu101-1.7.0-py2.py3-none-manylinux2014_x86_64.whl\n\n# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating\n# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.\nARG SMDEBUG_VERSION=0.9.3\nARG OPENSSL_VERSION=1.1.1k\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\" \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    SAGEMAKER_TRAINING_MODULE=sagemaker_mxnet_container.training:main \\\n    DGLBACKEND=mxnet \\\n    CUDNN_VERSION=7.6.0.64-1+cuda10.1 \\\n    NCCL_VERSION=2.4.8-1+cuda10.1\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    software-properties-common \\\n    build-essential \\\n    ca-certificates \\\n    libcudnn7=${CUDNN_VERSION} \\\n    cuda-command-line-tools-10-1 \\\n    cuda-cufft-10-1 \\\n    cuda-curand-10-1 \\\n    cuda-cusolver-10-1 \\\n    cuda-cusparse-10-1 \\\n    curl \\\n    emacs \\\n    git \\\n    libatlas-base-dev \\\n    libcurl4-openssl-dev \\\n    libnccl2=${NCCL_VERSION} \\\n    libgomp1 \\\n    libnccl-dev=${NCCL_VERSION} \\\n    libopencv-dev \\\n    openssh-client \\\n    openssh-server \\\n    vim \\\n    wget \\\n    unzip \\\n    zlib1g-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install cuda-dev libraries as a dependency for Horovod with MXNet backend\nENV CUDA_LIB_URL=https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64\nRUN wget ${CUDA_LIB_URL}/libcublas10_10.2.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/libcublas-dev_10.2.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/cuda-curand-dev-10-1_10.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/cuda-nvrtc-10-1_10.1.243-1_amd64.deb \\\n    ${CUDA_LIB_URL}/cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb \\\n && dpkg -i libcublas10_10.2.1.243-1_amd64.deb \\\n    libcublas-dev_10.2.1.243-1_amd64.deb \\\n    cuda-curand-dev-10-1_10.1.243-1_amd64.deb \\\n    cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \\\n    cuda-nvrtc-10-1_10.1.243-1_amd64.deb \\\n    cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb \\\n && apt-get install -y -f \\\n && rm libcublas10_10.2.1.243-1_amd64.deb \\\n    libcublas-dev_10.2.1.243-1_amd64.deb \\\n    cuda-curand-dev-10-1_10.1.243-1_amd64.deb \\\n    cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \\\n    cuda-nvrtc-10-1_10.1.243-1_amd64.deb \\\n    cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb\n\n###########################################################################\n# Horovod dependencies\n###########################################################################\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \\\n && tar zxf openmpi-4.0.1.tar.gz \\\n && cd openmpi-4.0.1 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.1.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\nENV PATH=/usr/local/openmpi/bin/:$PATH\nENV PATH=/usr/local/nvidia/bin:$PATH\n\n\nRUN wget -c https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && apt-get update \\\n && apt remove -y --purge openssl \\\n && rm -rf /usr/include/openssl \\\n && apt-get install --no-install-recommends -y \\\n    ca-certificates \\\n && tar -xzvf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./config && make && make test \\\n && make install \\\n && ldconfig \\\n && cd .. && rm -rf openssl-* && rm openssl-${OPENSSL_VERSION}.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n# when we remove previous openssl, the ca-certificates pkgs and its symlinks gets deleted\n# causing sslcertverificationerror the below steps are to fix that\nRUN ln -s /etc/ssl/certs/*.* /usr/local/ssl/certs/\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xvf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && make \\\n && make install \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libreadline-gplv2-dev \\\n    libncursesw5-dev \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    libgdbm-dev \\\n    libc6-dev \\\n    libbz2-dev \\\n    tk-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && make \\\n && make install \\\n && rm -rf ../Python-$PYTHON_VERSION* \\\n && ln -s /usr/local/bin/pip3 /usr/bin/pip \\\n && ln -s $(which ${PYTHON}) /usr/local/bin/python && rm Python-$PYTHON_VERSION.tgz\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\nWORKDIR /\n\n# python-dateutil==2.8.0 to satisfy botocore associated with latest awscli\nRUN ${PIP} install --no-cache --upgrade \\\n    keras-mxnet==2.2.4.2 \\\n    h5py==2.10.0 \\\n    numpy==1.19.1 \\\n    onnx==1.6.0 \\\n    pandas==0.25.1 \\\n    Pillow \\\n    requests==2.22.0 \\\n    scikit-learn==0.20.4 \\\n    scipy==1.2.2 \\\n    dgl-cu101==0.4.* \\\n    gluonnlp==0.10.0 \\\n    gluoncv==0.6.0 \\\n    # Putting a cap in versions number to avoid potential issues with a new major version\n    \"urllib3>=1.25.10,<1.26.0\" \\\n    python-dateutil==2.8.0 \\\n    tqdm==4.39.0 \\\n    sagemaker-experiments==0.* \\\n    # install PyYAML>=5.4,<5.5 to avoid conflict with latest awscli\n    \"PyYAML>=5.4,<5.5\" \\\n    mpi4py==3.0.2 \\\n    \"sagemaker-mxnet-training<5\" \\\n    ${MX_URL} \\\n    smdebug==${SMDEBUG_VERSION} \\\n    \"sagemaker>=2,<3\" \\\n    awscli\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-10.1/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITHOUT_TENSORFLOW=1 \\\n    HOROVOD_WITHOUT_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir \\\n    horovod==0.19.5 \\\n && ldconfig\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# OpenSHH config for MPI communication\nRUN mkdir -p /var/run/sshd && \\\n  sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nRUN rm -rf /root/.ssh/ && \\\n  mkdir -p /root/.ssh/ && \\\n  ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \\\n  cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n  && printf \"Host *\\n StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\n# \"channels first\" is recommended for keras-mxnet\n# https://github.com/awslabs/keras-apache-mxnet/blob/master/docs/mxnet_backend/performance_guide.md#channels-first-image-data-format-for-cnn\nRUN mkdir /root/.keras \\\n && echo '{\"image_data_format\": \"channels_first\"}' > /root/.keras/keras.json\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/aws-mx-1.7.0/license.txt\n\nCMD [\"/bin/bash\"]\n"
}