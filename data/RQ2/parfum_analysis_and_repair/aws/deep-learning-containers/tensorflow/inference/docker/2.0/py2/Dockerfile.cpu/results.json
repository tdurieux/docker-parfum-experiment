{
  "startTime": 1674252973486,
  "endTime": 1674252974637,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 54,
        "columnStart": 22,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nLABEL maintainer=\"Amazon AI\"\n\nARG OPENSSL_VERSION=1.1.1k\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    git \\\n    wget \\\n    vim \\\n    build-essential \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN wget -c https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && apt-get update \\\n && apt remove -y --purge openssl \\\n && rm -rf /usr/include/openssl \\\n && apt-get install --no-install-recommends -y \\\n    ca-certificates \\\n && tar -xzvf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./config && make && make test \\\n && make install \\\n && ldconfig \\\n && cd .. && rm -rf openssl-* && rm openssl-${OPENSSL_VERSION}.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n # when we remove previous openssl, the ca-certificates pkgs and its symlinks gets deleted\n# causing sslcertverificationerror the below steps are to fix that\nRUN ln -s /etc/ssl/certs/*.* /usr/local/ssl/certs/\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\n# Add arguments to achieve the version, python and url\n#  PYTHON=python for 2.7\n#  PYTHON=python3 for 3.5, 3.6 is not available directly on 16.04\nARG PYTHON=python\n\n# user python-pip or python3-pip\nARG PYTHON_PIP=python-pip\n\n#  PIP=pip for 2.7\n#  PIP=pip3 for 3.5, 3.6 is not available directly on 16.04\nARG PIP=pip\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ${PYTHON} \\\n    ${PYTHON_PIP} && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python\n\nRUN curl -f https://tensorflow-aws.s3-us-west-2.amazonaws.com/MKL-Libraries/libiomp5.so -o /usr/local/lib/libiomp5.so\nRUN curl -f https://tensorflow-aws.s3-us-west-2.amazonaws.com/MKL-Libraries/libmklml_intel.so -o /usr/local/lib/libmklml_intel.so\n\nENV LD_LIBRARY_PATH '/usr/local/lib:$LD_LIBRARY_PATH'\n\nRUN curl -f https://tensorflow-aws.s3-us-west-2.amazonaws.com/2.0.2/Serving/CPU-WITH-MKL/tensorflow_model_server -o /usr/bin/tensorflow_model_server \\\n && chmod 555 /usr/bin/tensorflow_model_server\n\nRUN ${PIP} install -U --no-cache-dir \\\n    PyYAML==5.3.1 \\\n    docutils==0.15.2 \\\n    \"awscli<2\" \\\n    requests==2.22.0\n\n# Expose ports\n# gRPC\nEXPOSE 8500\n\n# REST\nEXPOSE 8501\n\n# Set where models should be stored in the container\nENV MODEL_BASE_PATH=/models\nRUN mkdir -p ${MODEL_BASE_PATH}\n\n# The only required piece is the model name in order to differentiate endpoints\nENV MODEL_NAME=model\n\n# Create a script that runs the model server so we can use environment variables\n# while also passing in arguments from the docker command line\nRUN echo '#!/bin/bash \\n\\n\\\ntensorflow_model_server --port=8500 --rest_api_port=8501 \\\n--model_name=${MODEL_NAME} --model_base_path=${MODEL_BASE_PATH}/${MODEL_NAME} \\\n\"$@\"' > /usr/bin/tf_serving_entrypoint.sh \\\n&& chmod +x /usr/bin/tf_serving_entrypoint.sh\n\nADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-2.0/license.txt -o /license.txt\n\nCMD [\"/usr/bin/tf_serving_entrypoint.sh\"]\n"
}