{
  "startTime": 1674248473487,
  "endTime": 1674248473975,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 142
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 66,
        "columnStart": 22,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-base-ubuntu18.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"5\"\n\nENV NCCL_VERSION=2.4.7-1+cuda10.0\nENV CUDNN_VERSION=7.5.1.10-1+cuda10.0\nENV TF_TENSORRT_VERSION=5.0.2\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    cuda-command-line-tools-10-0 \\\n    cuda-cublas-10-0 \\\n    cuda-cufft-10-0 \\\n    cuda-curand-10-0 \\\n    cuda-cusolver-10-0 \\\n    cuda-cusparse-10-0 \\\n    libcudnn7=${CUDNN_VERSION} \\\n    libnccl2=${NCCL_VERSION} \\\n    libgomp1 \\\n    curl \\\n    emacs \\\n    git \\\n    wget \\\n    vim \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# The 'apt-get install' of nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda10.0\n# adds a new list which contains libnvinfer library, so it needs another\n# 'apt-get update' to retrieve that list before it can actually install the\n# library.\n# We don't install libnvinfer-dev since we don't need to build against TensorRT,\n# and libnvinfer4 doesn't contain libnvinfer.a static library.\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends nvinfer-runtime-trt-repo-ubuntu1804-${TF_TENSORRT_VERSION}-ga-cuda10.0 \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends libnvinfer5=${TF_TENSORRT_VERSION}-1+cuda10.0 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /usr/lib/x86_64-linux-gnu/libnvinfer_plugin* \\\n && rm /usr/lib/x86_64-linux-gnu/libnvcaffe_parser* \\\n && rm /usr/lib/x86_64-linux-gnu/libnvparsers*\n\n# See http://bugs.python.org/issue19846\nENV LANG \\\n    C.UTF-8\n\n# Add arguments to achieve the version, python and url\n#  PYTHON=python for 2.7\n#  PYTHON=python3 for 3.5, 3.6 is not available directly on 16.04\nARG PYTHON=python\n\n# user python-pip or python3-pip\nARG PYTHON_PIP=python-pip\n\n#  PIP=pip for 2.7\n#  PIP=pip3 for 3.5, 3.6 is not available directly on 16.04\nARG PIP=pip\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ${PYTHON} \\\n    ${PYTHON_PIP} && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python\n\nRUN curl -f https://tensorflow-aws.s3-us-west-2.amazonaws.com/2.0.1/Serving/GPU/tensorflow_model_server --output /usr/bin/tensorflow_model_server \\\n && chmod 555 /usr/bin/tensorflow_model_server\n\nRUN pip install -U --no-cache-dir \\\n    docutils==0.15.2 \\\n    \"awscli<2\" \\\n    requests==2.22.0\n\n#CMD [\"/bin/bash\"]\n# Expose ports\n# gRPC\nEXPOSE 8500\n\n# REST\nEXPOSE 8501\n\n# Set where models should be stored in the container\nENV MODEL_BASE_PATH=/models\nRUN mkdir -p ${MODEL_BASE_PATH}\n\n# The only required piece is the model name in order to differentiate endpoints\nENV MODEL_NAME=model\n\n# Create a script that runs the model server so we can use environment variables\n# while also passing in arguments from the docker command line\nRUN echo '#!/bin/bash \\n\\n\\\ntensorflow_model_server --port=8500 --rest_api_port=8501 \\\n--model_name=${MODEL_NAME} --model_base_path=${MODEL_BASE_PATH}/${MODEL_NAME} \\\n\"$@\"' > /usr/bin/tf_serving_entrypoint.sh \\\n&& chmod +x /usr/bin/tf_serving_entrypoint.sh\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-2.0/license.txt -o /license.txt\n\nCMD [\"/usr/bin/tf_serving_entrypoint.sh\"]\n"
}