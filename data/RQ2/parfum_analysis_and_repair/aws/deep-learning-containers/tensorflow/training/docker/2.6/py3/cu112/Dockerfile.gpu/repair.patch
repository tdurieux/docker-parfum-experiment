diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/aws/deep-learning-containers/tensorflow/training/docker/2.6/py3/cu112/Dockerfile.gpu b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/aws/deep-learning-containers/tensorflow/training/docker/2.6/py3/cu112/Dockerfile.gpu/repaired.Dockerfile
index 21d3102..318aeb0 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/aws/deep-learning-containers/tensorflow/training/docker/2.6/py3/cu112/Dockerfile.gpu
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/aws/deep-learning-containers/tensorflow/training/docker/2.6/py3/cu112/Dockerfile.gpu/repaired.Dockerfile
@@ -84,9 +84,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends --allow-unauthe
    # Install dependent library for OpenCV
    libgtk2.0-dev \
    jq \
-   && apt-get install -y -qq libkrb5-dev \
-   && apt-get install -y -qq libsasl2-dev libsasl2-modules \
-   && apt-get install -y -qq krb5-user \
+   && apt-get install --no-install-recommends -y -qq libkrb5-dev \
+   && apt-get install --no-install-recommends -y -qq libsasl2-dev libsasl2-modules \
+   && apt-get install --no-install-recommends -y -qq krb5-user \
  && apt-get update \
  && apt-get install -y --no-install-recommends --allow-unauthenticated --allow-change-held-packages \
    libcublas-dev-${CUDA_DASH} \
@@ -111,7 +111,7 @@ RUN cd /tmp \
 # Install EFA without AWS OPEN_MPI
 RUN mkdir /tmp/efa \
   && cd /tmp/efa \
-  && curl -O https://s3-us-west-2.amazonaws.com/aws-efa-installer/aws-efa-installer-${EFA_VERSION}.tar.gz \
+  && curl -f -O https://s3-us-west-2.amazonaws.com/aws-efa-installer/aws-efa-installer-${EFA_VERSION}.tar.gz \
   && tar -xf aws-efa-installer-${EFA_VERSION}.tar.gz \
   && cd aws-efa-installer \
   && ./efa_installer.sh -y --skip-kmod -g \
@@ -125,12 +125,12 @@ RUN mkdir /tmp/openmpi && \
   wget --quiet https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OMPI_VERSION}.tar.gz && \
   tar zxf openmpi-${OMPI_VERSION}.tar.gz && \
   cd openmpi-${OMPI_VERSION} && \
-  ./configure --enable-orterun-prefix-by-default --prefix=$OPEN_MPI_PATH && \
+  ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-orterun-prefix-by-default --prefix=$OPEN_MPI_PATH && \
   make -j $(nproc) all && \
   make install && \
   ldconfig && \
   cd / && \
-  rm -rf /tmp/openmpi
+  rm -rf /tmp/openmpi && rm openmpi-${OMPI_VERSION}.tar.gz
 
 RUN wget https://sourceforge.net/projects/boost/files/boost/1.73.0/boost_1_73_0.tar.gz/download -O boost_1_73_0.tar.gz \
    && tar -xzf boost_1_73_0.tar.gz \
@@ -199,9 +199,9 @@ RUN apt-get update \
 RUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \
    && tar -xvf Python-$PYTHON_VERSION.tgz \
    && cd Python-$PYTHON_VERSION \
-   && ./configure --enable-shared \
+   && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-shared \
    && make -j $(nproc) all && make install \
-   && rm -rf ../Python-$PYTHON_VERSION*
+   && rm -rf ../Python-$PYTHON_VERSION* && rm Python-$PYTHON_VERSION.tgz
 
 RUN ${PIP} --no-cache-dir install --upgrade \
    pip \
@@ -267,13 +267,13 @@ ARG METIS=metis-5.1.0
 ARG RMM_VERSION=0.15.0
 
 # install metis
-RUN wget -nv http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/${METIS}.tar.gz \
+RUN wget -nv https://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/${METIS}.tar.gz \
   && gunzip -f ${METIS}.tar.gz \
   && tar -xvf ${METIS}.tar \
   && cd ${METIS} \
   && apt-get update \
-  && apt-get install -y build-essential \
-  && apt-get install -y cmake \
+  && apt-get install --no-install-recommends -y build-essential \
+  && apt-get install --no-install-recommends -y cmake \
   && make config shared=1 \
   && make install \
   && cd .. \
@@ -293,13 +293,13 @@ RUN  wget -nv https://github.com/rapidsai/rmm/archive/v${RMM_VERSION}.tar.gz \
   && rm -rf rmm-${RMM_VERSION}
 
 # Install AWS OFI NCCL plug-in
-RUN apt-get update && apt-get install -y autoconf
+RUN apt-get update && apt-get install --no-install-recommends -y autoconf && rm -rf /var/lib/apt/lists/*;
 RUN mkdir /tmp/efa-ofi-nccl \
   && cd /tmp/efa-ofi-nccl \
   && git clone https://github.com/aws/aws-ofi-nccl.git -b v$BRANCH_OFI \
   && cd aws-ofi-nccl \
   && ./autogen.sh \
-  && ./configure --with-libfabric=/opt/amazon/efa \
+  && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --with-libfabric=/opt/amazon/efa \
   --with-mpi=/opt/amazon/openmpi \
   --with-cuda=/usr/local/cuda \
   --with-nccl=/usr/local --prefix=/usr/local \
@@ -307,7 +307,7 @@ RUN mkdir /tmp/efa-ofi-nccl \
   && make install \
   && rm -rf /tmp/efa-ofi-nccl
 
-RUN apt-get update && apt-get -y install  protobuf-compiler
+RUN apt-get update && apt-get -y --no-install-recommends install protobuf-compiler && rm -rf /var/lib/apt/lists/*;
 
 # Install Horovod, temporarily using CUDA stubs
 RUN ldconfig /usr/local/cuda-11.2/targets/x86_64-linux/lib/stubs \
@@ -336,7 +336,7 @@ ADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/de
 RUN chmod +x /usr/local/bin/deep_learning_container.py
 
 RUN HOME_DIR=/root \
-   && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
+   && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
    && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
    && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
    && chmod +x /usr/local/bin/testOSSCompliance \
@@ -344,6 +344,6 @@ RUN HOME_DIR=/root \
    && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
    && rm -rf ${HOME_DIR}/oss_compliance*
 
-RUN curl https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-2.6/license.txt -o /license.txt
+RUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-2.6/license.txt -o /license.txt
 
 CMD ["/bin/bash"]