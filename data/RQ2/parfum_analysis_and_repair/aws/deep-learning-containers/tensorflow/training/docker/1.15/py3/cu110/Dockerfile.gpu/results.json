{
  "startTime": 1674256027710,
  "endTime": 1674256028930,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 230,
        "lineEnd": 230,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.0-base-ubuntu18.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"8\"\n\n# prevent stopping by user interaction\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\nENV SAGEMAKER_TRAINING_MODULE sagemaker_tensorflow_container.training:main\n\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n\n# Set environment variables for MKL\n# For more about MKL with TensorFlow see:\n# https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn\nENV KMP_AFFINITY=granularity=fine,compact,1,0\nENV KMP_BLOCKTIME=1\nENV KMP_SETTINGS=0\n\nARG PYTHON=python3.7\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3\nARG PYTHON_VERSION=3.7.10\n\nARG TF_URL=https://aws-tensorflow-binaries.s3-us-west-2.amazonaws.com/tensorflow/r1.15_aws/20210225-223752/gpu/cu110/py37/tensorflow_gpu-1.15.5-cp37-cp37m-manylinux2010_x86_64.whl\n\nARG ESTIMATOR_URL=https://aws-tensorflow-binaries.s3-us-west-2.amazonaws.com/estimator/r1.15_aws/20210225-223752/tensorflow_estimator-1.15.2-py2.py3-none-any.whl\n\n# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating\n# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.\nARG SMDEBUG_VERSION=0.9.4\n\nRUN apt-get update \\\n # TODO: Remove systemd upgrade once it is updated in base image\n && apt-get -y upgrade --only-upgrade systemd \\\n && apt-get install -y --no-install-recommends --allow-unauthenticated \\\n    ca-certificates \\\n    cuda-command-line-tools-11-0 \\\n    cuda-cudart-dev-11-0 \\\n    libcufft-dev-11-0 \\\n    libcurand-dev-11-0 \\\n    libcusolver-dev-11-0 \\\n    libcusparse-dev-11-0 \\\n    curl \\\n    emacs \\\n    libcudnn8=8.0.4.30-1+cuda11.0 \\\n    # TensorFlow doesn't require libnccl anymore but Open MPI still depends on it\n    libnccl2=2.7.8-1+cuda11.0 \\\n    libgomp1 \\\n    libnccl-dev=2.7.8-1+cuda11.0 \\\n    libfreetype6-dev \\\n    libhdf5-serial-dev \\\n    liblzma-dev \\\n    libpng-dev \\\n    libtemplate-perl \\\n    libzmq3-dev \\\n    git \\\n    unzip \\\n    wget \\\n    vim \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    zlib1g-dev \\\n    # Install dependent library for OpenCV\n    libgtk2.0-dev \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends --allow-unauthenticated \\\n    libcublas-11-0=11.2.0.252-1 \\\n    libcublas-dev-11-0=11.2.0.252-1 \\\n    # The 'apt-get install' of nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0\n    # adds a new list which contains libnvinfer library, so it needs another\n    # 'apt-get update' to retrieve that list before it can actually install the\n    # library.\n    # We don't install libnvinfer-dev since we don't need to build against TensorRT,\n    # and libnvinfer4 doesn't contain libnvinfer.a static library.\n    # nvinfer-runtime-trt-repo doesn't have a 1804-cuda10.1 version yet. see:\n    # https://developer.download.nvidia.cn/compute/machine-learning/repos/ubuntu1804/x86_64/\n && apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated  \\\n    nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 \\\n && apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated  \\\n    libnvinfer7=7.1.3-1+cuda11.0 \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /var/run/sshd\n\n###########################################################################\n# Horovod & its dependencies\n###########################################################################\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.4.tar.gz \\\n && tar zxf openmpi-4.0.4.tar.gz \\\n && cd openmpi-4.0.4 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.4.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\nENV PATH /usr/local/openmpi/bin/:$PATH\nENV PATH=/usr/local/nvidia/bin:$PATH\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN mkdir -p /var/run/sshd \\\n && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libbz2-dev \\\n    libc6-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    libncursesw5-dev \\\n    libreadline-gplv2-dev \\\n    libsqlite3-dev \\\n    libssl-dev \\\n    tk-dev \\\n    libssl1.1 \\\n    openssl \\\n    # Needed for open-cv to resolve error: ImportError: libGL.so.1: cannot open shared object file: No such file or directory\n    libgl1-mesa-glx \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xvf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install \\\n && make && make install && rm -rf ../Python-$PYTHON_VERSION* && rm Python-$PYTHON_VERSION.tgz\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s $(which ${PIP}) /usr/bin/pip\n\n# # python-dateutil==2.8 to satisfy botocore associated with latest awscli\nRUN ${PIP} install --no-cache-dir -U \\\n    numpy==1.19.1 \\\n    scipy==1.5.2 \\\n    scikit-learn==0.23 \\\n    pandas==1.1 \\\n    Pillow==8.2.0 \\\n    python-dateutil==2.8.1 \\\n    # install PyYAML>=5.4,<5.5 to avoid conflict with latest awscli\n    \"pyYAML>=5.4,<5.5\" \\\n    requests==2.24.0 \\\n    \"awscli<2\" \\\n    mpi4py==3.0.3 \\\n    \"sagemaker>=2,<3\" \\\n    sagemaker-experiments==0.* \\\n    \"sagemaker-tensorflow>=1.15,<1.16\" \\\n    \"sagemaker-tensorflow-training>=10,<20\" \\\n    # Let's install TensorFlow separately in the end to avoid\n    # the library version to be overwritten\n && ${PIP} install --no-cache-dir -U \\\n    ${TF_URL} \\\n    h5py==2.10.0 \\\n    werkzeug==1.0.1 \\\n    smdebug==${SMDEBUG_VERSION} \\\n    smclarify\n\n# Install extra packages\n# numba 0.54 only works with numpy>=1.20. See https://github.com/numba/numba/issues/7339\nRUN pip install --no-cache-dir -U \\\n    \"bokeh>=2.3,<3\" \\\n    \"imageio>=2.9,<3\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"numba<0.54\" \\\n    \"shap>=0.39,<1\"\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-11.0/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 ${PIP} install --no-cache-dir horovod==0.19.5 \\\n && ldconfig\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Add NGC vars\nENV TF_ADJUST_HUE_FUSED=1 TF_AUTOTUNE_THRESHOLD=2 TF_USE_CUDNN_BATCHNORM_SPATIAL_PERSISTENT=1 TF_ADJUST_SATURATION_FUSED=1 TF_ENABLE_WINOGRAD_NONFUSED=1 CUDA_CACHE_DISABLE=1\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow/license.txt -o /license.txt\n\nCMD [\"/bin/bash\"]\n"
}