{
  "startTime": 1674249954639,
  "endTime": 1674249956438,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 5,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 324,
        "lineEnd": 324,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 332,
        "lineEnd": 332,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 254,
        "lineEnd": 254,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 2,
        "columnEnd": 72
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 197,
        "lineEnd": 197,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 286,
        "lineEnd": 289,
        "columnStart": 5,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 2,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 259,
        "lineEnd": 259,
        "columnStart": 5,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 5,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 280,
        "lineEnd": 280,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 296,
        "lineEnd": 296,
        "columnStart": 22,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 280,
        "lineEnd": 280,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 296,
        "lineEnd": 296,
        "columnStart": 22,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.0-base-ubuntu18.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# prevent stopping by user interaction\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\nENV SAGEMAKER_TRAINING_MODULE sagemaker_tensorflow_container.training:main\n\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n\n# Set environment variables for MKL\n# For more about MKL with TensorFlow see:\n# https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn\nENV KMP_AFFINITY=granularity=fine,compact,1,0\nENV KMP_BLOCKTIME=1\nENV KMP_SETTINGS=0\nENV MANUAL_BUILD=0\nENV RDMAV_FORK_SAFE=1\n\nARG PYTHON=python3.7\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3\nARG PYTHON_VERSION=3.7.10\nARG OPEN_MPI_PATH=/opt/amazon/openmpi\nARG EFA_PATH=/opt/amazon/efa\nARG NCCL_VERSION=2.7.8\nARG EFA_VERSION=1.11.2\nARG OMPI_VERSION=4.1.1\nARG BRANCH_OFI=1.1.1\n\nARG TF_URL=https://aws-tensorflow-binaries.s3-us-west-2.amazonaws.com/tensorflow/r2.4_aws/20210813_093733/gpu/cu110/py37/tensorflow_gpu-2.4.3-cp37-cp37m-manylinux2010_x86_64.whl\n\nARG ESTIMATOR_URL=https://aws-tensorflow-binaries.s3-us-west-2.amazonaws.com/estimator/r2.4_aws/20210813_093733/tensorflow_estimator-2.4.0-py2.py3-none-any.whl\n\n# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating\n# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.\nARG SMDEBUG_VERSION=1.0.9\n\nARG SMDATAPARALLEL_BINARY=https://smdataparallel.s3.amazonaws.com/binary/tensorflow/2.4.1/cu110/2021-04-28/smdistributed_dataparallel-1.2.0-cp37-cp37m-linux_x86_64.whl\n\nARG SMMODELPARALLEL_BINARY=https://sagemaker-distributed-model-parallel.s3.amazonaws.com/tensorflow-2.4/build-artifacts/2021-03-26-21-57/smdistributed_modelparallel-1.3.1-cp37-cp37m-linux_x86_64.whl\n\nRUN apt-get update \\\n && apt-get -y upgrade --only-upgrade systemd \\\n && apt-get install -y --no-install-recommends --allow-unauthenticated \\\n    ca-certificates \\\n    cuda-command-line-tools-11-0 \\\n    cuda-cudart-dev-11-0 \\\n    libcufft-dev-11-0 \\\n    libcurand-dev-11-0 \\\n    libcusolver-dev-11-0 \\\n    libcusparse-dev-11-0 \\\n    curl \\\n    emacs \\\n    libcudnn8=8.0.5.39-1+cuda11.0 \\\n    # TensorFlow doesn't require libnccl anymore but Open MPI still depends on it\n    libgomp1 \\\n    libfreetype6-dev \\\n    libhdf5-serial-dev \\\n    liblzma-dev \\\n    libpng-dev \\\n    libtemplate-perl \\\n    libzmq3-dev \\\n    hwloc \\\n    git \\\n    unzip \\\n    wget \\\n    libtool \\\n    vim \\\n    libssl1.1 \\\n    openssl \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    zlib1g-dev \\\n    # Install dependent library for OpenCV\n    libgtk2.0-dev \\\n    # Needed for open-cv to resolve error: ImportError: libGL.so.1: cannot open shared object file: No such file or directory\n    libgl1-mesa-glx \\\n    jq \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends --allow-unauthenticated \\\n    libcublas-11-0=11.2.0.252-1 \\\n    libcublas-dev-11-0=11.2.0.252-1 \\\n    # The 'apt-get install' of nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0\n    # adds a new list which contains libnvinfer library, so it needs another\n    # 'apt-get update' to retrieve that list before it can actually install the\n    # library.\n    # We don't install libnvinfer-dev since we don't need to build against TensorRT,\n    # and libnvinfer4 doesn't contain libnvinfer.a static library.\n    # nvinfer-runtime-trt-repo doesn't have a 1804-cuda10.1 version yet. see:\n    # https://developer.download.nvidia.cn/compute/machine-learning/repos/ubuntu1804/x86_64/\n && apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated  \\\n    nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 \\\n && apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated  \\\n    libnvinfer7=7.1.3-1+cuda11.0 \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /var/run/sshd\n\nRUN cd /tmp \\\n  && git clone https://github.com/NVIDIA/nccl.git -b v$NCCL_VERSION-1 \\\n  && cd nccl \\\n  && make -j64 src.build BUILDDIR=/usr/local \\\n  && rm -rf /tmp/nccl\n\n# Install EFA along without AWS OPEN_MPI\nRUN mkdir /tmp/efa \\\n  && cd /tmp/efa \\\n  && curl -f -O https://s3-us-west-2.amazonaws.com/aws-efa-installer/aws-efa-installer-${EFA_VERSION}.tar.gz \\\n  && tar -xf aws-efa-installer-${EFA_VERSION}.tar.gz \\\n  && cd aws-efa-installer \\\n  && ./efa_installer.sh -y --skip-kmod -g \\\n  && rm -rf $OPEN_MPI_PATH \\\n  && rm -rf /tmp/efa \\\n  && rm -rf /tmp/aws-efa-installer-${EFA_VERSION}.tar.gz\n\n# Install OpenMPI without libfabric support\nRUN mkdir /tmp/openmpi && \\\n  cd /tmp/openmpi && \\\n  wget --quiet https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OMPI_VERSION}.tar.gz && \\\n  tar zxf openmpi-${OMPI_VERSION}.tar.gz && \\\n  cd openmpi-${OMPI_VERSION} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default --prefix=$OPEN_MPI_PATH && \\\n  make -j $(nproc) all && \\\n  make install && \\\n  ldconfig && \\\n  cd / && \\\n  rm -rf /tmp/openmpi && rm openmpi-${OMPI_VERSION}.tar.gz\n\nRUN wget https://sourceforge.net/projects/boost/files/boost/1.73.0/boost_1_73_0.tar.gz/download -O boost_1_73_0.tar.gz \\\n && tar -xzf boost_1_73_0.tar.gz \\\n && cd boost_1_73_0 \\\n && ./bootstrap.sh \\\n && ./b2 threading=multi --prefix=/usr -j 64 cxxflags=-fPIC cflags=-fPIC install || true \\\n && cd .. \\\n && rm -rf boost_1_73_0.tar.gz \\\n && rm -rf boost_1_73_0 \\\n && cd /usr/include/boost\n\n###########################################################################\n# Horovod & its dependencies\n###########################################################################\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv $OPEN_MPI_PATH/bin/mpirun $OPEN_MPI_PATH/bin/mpirun.real \\\n && echo '#!/bin/bash' > $OPEN_MPI_PATH/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> $OPEN_MPI_PATH/bin/mpirun \\\n && chmod a+x $OPEN_MPI_PATH/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\nENV LD_LIBRARY_PATH=$OPEN_MPI_PATH/lib/:$EFA_PATH/lib/:$LD_LIBRARY_PATH\n# /usr/local/lib/libpython* needs to be accessible for dynamic linking\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\nENV PATH=$OPEN_MPI_PATH/bin/:$PATH\nENV PATH=$OPEN_MPI_PATH/nvidia/bin:$PATH\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN mkdir -p /var/run/sshd \\\n && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libbz2-dev \\\n    libc6-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    libncursesw5-dev \\\n    libreadline-gplv2-dev \\\n    libsqlite3-dev \\\n    libssl-dev \\\n    tk-dev \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xvf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared && make && make install \\\n && rm -rf ../Python-$PYTHON_VERSION* && rm Python-$PYTHON_VERSION.tgz\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s $(which ${PIP}) /usr/bin/pip\n\nRUN ${PIP} install --no-cache-dir -U \\\n    pybind11 \\\n    cmake==3.18.2.post1 \\\n    numpy==1.19.1 \\\n    scipy==1.5.2 \\\n    scikit-learn==0.23 \\\n    pandas==1.1 \\\n    \"Pillow>=8.3,<8.4\" \\\n    # python-dateutil==2.8.1 to satisfy botocore associated with latest awscli\n    python-dateutil==2.8.1 \\\n    # install PyYAML>=5.4 to avoid conflict with latest awscli\n    \"pyYAML>=5.4,<5.5\" \\\n    requests==2.24.0 \\\n    \"awscli<2\" \\\n    mpi4py==3.0.3 \\\n    \"sagemaker>=2,<3\" \\\n    sagemaker-experiments==0.* \\\n    \"sagemaker-tensorflow>=2.4,<2.5\" \\\n    \"sagemaker-tensorflow-training>=20\" \\\n    # Let's install TensorFlow separately in the end to avoid\n    # the library version to be overwritten\n && ${PIP} install --no-cache-dir -U \\\n    ${TF_URL} \\\n    ${ESTIMATOR_URL} \\\n    h5py==2.10.0 \\\n    \"absl-py>=0.9,<0.11\" \\\n    werkzeug==2.0.2 \\\n    smdebug==${SMDEBUG_VERSION} \\\n    smclarify\n\n# Install extra packages\n# numba 0.54 only works with numpy>=1.20. See https://github.com/numba/numba/issues/7339\n# Pinning bokeh to 2.3.3 due to typing-extension package version conflict with tensorlfow-cpu. See https://github.com/aws/deep-learning-containers/issues/1393\nRUN ${PIP} install --no-cache-dir -U \\\n    \"bokeh==2.3.3\" \\\n    \"imageio>=2.9,<3\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"numba<0.54\" \\\n    \"shap>=0.39,<1\"\n\nARG METIS=metis-5.1.0\nARG RMM_VERSION=0.15.0\n\n# install metis\nRUN wget -nv https://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/${METIS}.tar.gz \\\n  && gunzip -f ${METIS}.tar.gz \\\n  && tar -xvf ${METIS}.tar \\\n  && cd ${METIS} \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y build-essential \\\n  && apt-get install --no-install-recommends -y cmake \\\n  && make config shared=1 \\\n  && make install \\\n  && cd .. \\\n  && rm -rf ${METIS}.tar* \\\n  && rm -rf ${METIS} \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean\n\n# Install RAPIDSMemoryManager.\n# Requires cmake>=3.14.\nRUN  wget -nv https://github.com/rapidsai/rmm/archive/v${RMM_VERSION}.tar.gz \\\n  && tar -xvf v${RMM_VERSION}.tar.gz \\\n  && cd rmm-${RMM_VERSION} \\\n  && INSTALL_PREFIX=/usr/local ./build.sh librmm \\\n  && cd .. \\\n  && rm -rf v${RMM_VERSION}.tar* \\\n  && rm -rf rmm-${RMM_VERSION}\n\n# Install AWS OFI NCCL plug-in\nRUN apt-get update && apt-get install --no-install-recommends -y autoconf && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /tmp/efa-ofi-nccl \\\n  && cd /tmp/efa-ofi-nccl \\\n  && git clone https://github.com/aws/aws-ofi-nccl.git -b v$BRANCH_OFI \\\n  && cd aws-ofi-nccl \\\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-libfabric=/opt/amazon/efa \\\n  --with-mpi=/opt/amazon/openmpi \\\n  --with-cuda=/usr/local/cuda \\\n  --with-nccl=/usr/local --prefix=/usr/local \\\n  && make \\\n  && make install \\\n  && rm -rf /tmp/efa-ofi-nccl\n\nENV CPATH=\"/usr/local/lib/python3.7/dist-packages/pybind11/include/\"\n\nRUN apt-get update && apt-get -y --no-install-recommends install cmake protobuf-compiler && rm -rf /var/lib/apt/lists/*;\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-11.0/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 ${PIP} install --no-cache-dir horovod==0.21.0 \\\n && ldconfig\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Add NGC vars\nENV TF_AUTOTUNE_THRESHOLD=2\n\n# Install SMD MP binary\nRUN pip install --no-cache-dir -U ${SMMODELPARALLEL_BINARY}\n\n# Install SMD DP binary\nRUN SMDATAPARALLEL_TF=1 pip install --no-cache-dir ${SMDATAPARALLEL_BINARY}\n\nENV LD_LIBRARY_PATH=\"/usr/local/lib/python3.7/site-packages/smdistributed/dataparallel/lib:$LD_LIBRARY_PATH\"\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-2.4/license.txt -o /license.txt\n\nCMD [\"/bin/bash\"]\n"
}