{
  "startTime": 1674249755256,
  "endTime": 1674249757664,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 285,
        "lineEnd": 285,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 224,
        "lineEnd": 224,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 225,
        "lineEnd": 225,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 274,
        "lineEnd": 274,
        "columnStart": 18,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 274,
        "lineEnd": 274,
        "columnStart": 18,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 AS common\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# TensorFlow major.minor version\nENV TF_VERSION=2.9\n\n# prevent stopping by user interaction\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\n# Set environment variables for MKL\n# For more about MKL with TensorFlow see:\n# https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn\n\nENV KMP_AFFINITY=granularity=fine,compact,1,0\nENV KMP_BLOCKTIME=1\nENV KMP_SETTINGS=0\n\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n\nARG PYTHON=python3.9\nARG PYTHON_VERSION=3.9.10\n\nARG PIP=pip3\n\n# To be passed to e3 and sagemaker stages\nENV PYTHON=${PYTHON}\nENV PYTHON_VERSION=${PYTHON_VERSION}\nENV PIP=${PIP}\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    git \\\n    libtemplate-perl \\\n    libssl1.1 \\\n    openssl \\\n    unzip \\\n    wget \\\n    vim \\\n    zlib1g-dev \\\n    # Install dependent library for OpenCV\n    libgtk2.0-dev \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.4.tar.gz \\\n && tar zxf openmpi-4.0.4.tar.gz \\\n && cd openmpi-4.0.4 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.4.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\nENV PATH /usr/local/openmpi/bin/:$PATH\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n && mkdir -p /var/run/sshd \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libbz2-dev \\\n    libc6-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    liblzma-dev \\\n    libncursesw5-dev \\\n    libreadline-gplv2-dev \\\n    libsqlite3-dev \\\n    libssl-dev \\\n    tk-dev \\\n    ffmpeg \\\n    libsm6 \\\n    libxext6 \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xvf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && make -j $(nproc) \\\n && make install \\\n && rm -rf ../Python-$PYTHON_VERSION* \\\n # Starting from Python39, a xxx.pem file will be generated under /tmp folder during installation. Remove it to complete cleanup after installation from python source.\n && rm /tmp/*.pem && rm Python-$PYTHON_VERSION.tgz\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s $(which ${PIP}) /usr/bin/pip\n\nRUN apt-get update && apt-get -y --no-install-recommends install protobuf-compiler && rm -rf /var/lib/apt/lists/*;\n\n# install PyYAML==5.1.2 to avoid conflict with latest awscli\n# # python-dateutil==2.8.0 to satisfy botocore associated with latest awscli\nRUN ${PIP} install --no-cache-dir -U \\ \n    pybind11 \\\n    cmake==3.18.2.post1 \\\n    scipy==1.8.0 \\\n    \"Pillow>=9.0.0<9.1.0\" \\\n    python-dateutil==2.8.1 \\\n    \"pyYAML>=5.4,<5.5\" \\\n    requests==2.27.1 \\\n    \"awscli<2\" \\\n    mpi4py==3.1.3 \\\n    # Let's install TensorFlow separately in the end to avoid\n    # the library version to be overwritten\n && ${PIP} install --no-cache-dir -U \\\n    h5py==3.6.0 \\\n    \"absl-py>=0.9,<0.11\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"werkzeug>=2.0.2,<3\" \\\n    psutil==5.7.2 \\\n    \"urllib3>1.26.0<1.27.0\" \\\n    protobuf==3.19.4\n\nADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-${TF_VERSION}/license.txt -o /license.txt\n\n##############################################################################\n#  _____ _____   ___                              ____           _\n# | ____|___ /  |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n# |  _|   |_ \\   | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n# | |___ ___) |  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |_____|____/  |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                                    |___/                        |_|\n##############################################################################\n\nFROM common AS e3\n\nARG TF_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/tensorflow/r2.9_aws/cpu/2022-05-23-23-00/tensorflow_cpu-2.9.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n\nRUN ${PIP} install --no-cache-dir -U \\\n    ${TF_URL} \\\n    tensorflow-io==0.24.0 \\\n    tensorflow-datasets==4.5.2\n\n# Install Horovod with TensorFlow\nRUN HOROVOD_WITH_MPI=1 \\\n   && HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITHOUT_MXNET=1 HOROVOD_WITHOUT_PYTORCH=1 \\\n   && ${PIP} install --no-cache-dir horovod==0.24.2\n\nRUN HOME_DIR=/root \\\n   && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n   && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n   && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n   && chmod +x /usr/local/bin/testOSSCompliance \\\n   && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n   && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n   && rm -rf ${HOME_DIR}/oss_compliance*\n\n\n# remove tmp files\nRUN rm -rf /tmp/*\n\nCMD [\"/bin/bash\"]\n\n#################################################################\n#  ____                   __  __       _\n# / ___|  __ _  __ _  ___|  \\/  | __ _| | _____ _ __\n# \\___ \\ / _` |/ _` |/ _ \\ |\\/| |/ _` | |/ / _ \\ '__|\n#  ___) | (_| | (_| |  __/ |  | | (_| |   <  __/ |\n# |____/ \\__,_|\\__, |\\___|_|  |_|\\__,_|_|\\_\\___|_|\n#              |___/\n#  ___                              ____           _\n# |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n#  | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n#  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                      |___/                        |_|\n#################################################################\n\nFROM common AS sagemaker\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# sagemaker-specific environment variable\nENV SAGEMAKER_TRAINING_MODULE sagemaker_tensorflow_container.training:main\n\n# dependencies for opencv\n# these dependencies are not needed for gpu image\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libgtk2.0-dev \\\n    && apt-get install --no-install-recommends -y -qq libkrb5-dev \\\n    && apt-get install --no-install-recommends -y -qq libsasl2-dev libsasl2-modules \\\n    && apt-get install --no-install-recommends -y -qq krb5-user \\\n&& rm -rf /var/lib/apt/lists/*\n\nARG TF_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/tensorflow/r2.9_aws/cpu/2022-05-23-23-00/tensorflow_cpu-2.9.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n\n# https://github.com/tensorflow/models/issues/9267\n# tf-models does not respect existing installations of TF and always installs open source TF\nRUN ${PIP} install --no-cache-dir -U \\\n    tf-models-official==2.9.1\n\nRUN ${PIP} uninstall -y tensorflow tensorflow-gpu \\\n  ; ${PIP} install --no-cache-dir -U \\\n    ${TF_URL} \\\n    tensorflow-io==0.24.0 \\\n    tensorflow-datasets==4.5.2\n\n# Install Horovod with TensorFlow\nRUN HOROVOD_WITH_MPI=1 \\\n   && HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITHOUT_MXNET=1 HOROVOD_WITHOUT_PYTORCH=1 \\\n   && ${PIP} install --no-cache-dir horovod==0.24.2\n\nRUN $PYTHON -m pip install --no-cache-dir -U \\\n    \"bokeh>=2.3,<3\" \\\n    \"imageio>=2.9,<3\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"numba<0.54\" \\\n    \"shap>=0.39,<1\"\n\nRUN $PYTHON -m pip install --no-cache-dir -U \\\n    \"sagemaker>=2.93.0,<3\" \\\n    sagemaker-experiments==0.* \\\n    \"sagemaker-tensorflow-training>=20.3.1\" \\\n    \"sagemaker-studio-analytics-extension==0.0.2\" \\\n    \"sparkmagic<1\" \\\n    \"sagemaker-studio-sparkmagic-lib<1\" \\\n    smclarify\n\n\n# install smdebug directly the specific branch\nARG SMDEBUG_TAG=1.0.17\nRUN git clone https://github.com/awslabs/sagemaker-debugger.git \\\n    && cd sagemaker-debugger \\\n    && git checkout tags/$SMDEBUG_TAG -b $SMDEBUG_TAG \\\n    && $PYTHON setup.py install && cd .. && rm -rf sagemaker-debugger\n\n# install sagemaker-tensorflow from source\nARG SAGEMAKER_TENSORFLOW_TAG=v1.15.0\nRUN apt update && apt install --no-install-recommends -y libcurl4-openssl-dev && rm -rf /var/lib/apt/lists/*;\nRUN git clone -b tf-2 https://github.com/aws/sagemaker-tensorflow-extensions.git \\\n    && cd sagemaker-tensorflow-extensions \\\n    && git checkout tags/$SAGEMAKER_TENSORFLOW_TAG -b $SAGEMAKER_TENSORFLOW_TAG \\\n    && $PYTHON -m pip install . \\\n    && cd .. && rm -rf sagemaker-tensorflow-extensions\n\n# remove tmp files\nRUN rm -rf /tmp/*\n\nRUN HOME_DIR=/root \\\n   && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n   && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n   && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n   && chmod +x /usr/local/bin/testOSSCompliance \\\n   && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n   && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n   && rm -rf ${HOME_DIR}/oss_compliance*\n\nCMD [\"/bin/bash\"]\n"
}