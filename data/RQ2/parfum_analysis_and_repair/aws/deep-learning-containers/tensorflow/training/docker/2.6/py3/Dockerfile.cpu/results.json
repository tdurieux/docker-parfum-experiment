{
  "startTime": 1674249394201,
  "endTime": 1674249395739,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 22,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# prevent stopping by user interaction\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\nENV SAGEMAKER_TRAINING_MODULE sagemaker_tensorflow_container.training:main\n\n# Set environment variables for MKL\n# For more about MKL with TensorFlow see:\n# https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn\n\nENV KMP_AFFINITY=granularity=fine,compact,1,0\nENV KMP_BLOCKTIME=1\nENV KMP_SETTINGS=0\n\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n\nARG PYTHON=python3.8\nARG PYTHON_VERSION=3.8.2\n\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3\n\n# disable prompts during package installation\nARG DEBIAN_FRONTEND=noninteractive\n\nARG TF_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/tensorflow/r2.6_aws/cpu/2022-02-26-21-47/tensorflow_cpu-2.6.3-cp38-cp38-manylinux2010_x86_64.whl\n\n# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating\n# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.\nARG SMDEBUG_VERSION=1.0.12\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    git \\\n    libtemplate-perl \\\n    libssl1.1 \\\n    openssl \\\n    unzip \\\n    wget \\\n    vim \\\n    zlib1g-dev \\\n    # Install dependent library for OpenCV\n    libgtk2.0-dev \\\n    && apt-get install --no-install-recommends -y -qq libkrb5-dev \\\n    && apt-get install --no-install-recommends -y -qq libsasl2-dev libsasl2-modules \\\n    && apt-get install --no-install-recommends -y -qq krb5-user \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.4.tar.gz \\\n && tar zxf openmpi-4.0.4.tar.gz \\\n && cd openmpi-4.0.4 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.4.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\nENV PATH /usr/local/openmpi/bin/:$PATH\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n && mkdir -p /var/run/sshd \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libbz2-dev \\\n    libc6-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    liblzma-dev \\\n    libncursesw5-dev \\\n    libreadline-gplv2-dev \\\n    libsqlite3-dev \\\n    libssl-dev \\\n    tk-dev \\\n    ffmpeg \\\n    libsm6 \\\n    libxext6 \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xvf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j $(nproc) all && make install \\\n && make && make install && rm -rf ../Python-$PYTHON_VERSION* && rm Python-$PYTHON_VERSION.tgz\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s $(which ${PIP}) /usr/bin/pip\n\nRUN apt-get update && apt-get -y --no-install-recommends install protobuf-compiler && rm -rf /var/lib/apt/lists/*;\n\n# Install extra packages\nRUN $PYTHON -m pip install --no-cache-dir \\\n    \"bokeh>=2.4.2,<2.5\" \\\n    \"imageio==2.13.3\" \\\n    \"opencv-python>=4.6,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"shap>=0.39,<1\"\n\n# install PyYAML==5.1.2 to avoid conflict with latest awscli\n# # python-dateutil==2.8.0 to satisfy botocore associated with latest awscli\nRUN $PYTHON -m pip install --no-cache-dir \\\n    pybind11 \\\n    cmake==3.18.2.post1 \\\n    scipy==1.7.0 \\\n    scikit-learn==0.24.2 \\\n    pandas==1.2.5 \\\n    Pillow==9.0.1 \\\n    python-dateutil==2.8.1 \\\n    \"pyYAML>=5.4,<5.5\" \\\n    requests==2.27.1 \\\n    \"awscli<2\" \\\n    mpi4py==3.0.3 \\\n    \"shap>=0.39,<1\" \\\n    \"boto3>1.0,<2.0\" \\\n    \"sasl<1\" \\\n    \"thrift_sasl<1\" \\\n    \"PyHive<1\" \\\n    \"sparkmagic<1\" \\\n    ${TF_URL} \\\n    tensorflow-datasets==4.5.2 \\\n    psutil==5.7.2\n\n\n# Install sagemaker pacakges\nRUN $PYTHON -m pip install --no-cache-dir \\\n    \"sagemaker==2.70.0\" \\\n    sagemaker-experiments==0.* \\\n    \"sagemaker-tensorflow>=2.6,<2.7\" \\\n    \"sagemaker-tensorflow-training>=20\" \\\n    \"sagemaker-studio-sparkmagic-lib<1\" \\\n    \"sagemaker-studio-analytics-extension<1\" \\\n    smdebug==${SMDEBUG_VERSION} \\\n    smclarify\n\n# Insteall tensorflow-io without deps\n# to avoid it accidently install public tensorflow wheel\nRUN $PYTHON -m pip install --no-cache-dir --no-deps tensorflow-io==0.21.0 \\\n    tensorflow-io-gcs-filesystem==0.21.0\n\n# Install Horovod with TensorFlow\nRUN HOROVOD_WITH_MPI=1 \\\n   && HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITHOUT_MXNET=1 HOROVOD_WITHOUT_PYTORCH=1 \\\n   && ${PIP} install --no-cache-dir horovod==0.22.1\n\n# Remove python kernel installed by sparkmagic\nRUN /usr/local/bin/jupyter-kernelspec remove -f python3\n\nADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n   && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n   && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n   && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n   && chmod +x /usr/local/bin/testOSSCompliance \\\n   && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n   && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n   && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-2.6/license.txt -o /license.txt\n\nCMD [\"/bin/bash\"]\n"
}