{
  "startTime": 1674248801493,
  "endTime": 1674248803715,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 5,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 250,
        "lineEnd": 250,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 276,
        "lineEnd": 276,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 392,
        "lineEnd": 392,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 2,
        "columnEnd": 72
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 6,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 222,
        "lineEnd": 225,
        "columnStart": 5,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 2,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 6,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 22,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 357,
        "lineEnd": 357,
        "columnStart": 18,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 22,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 357,
        "lineEnd": 357,
        "columnStart": 18,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 4,
        "columnEnd": 72
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:11.2.2-base-ubuntu20.04 AS common\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# TensorFlow major.minor version\nENV TF_VERSION=2.9\n\n# prevent stopping by user interaction\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n\n# Set environment variables for MKL\n# For more about MKL with TensorFlow see:\n# https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn\nENV KMP_AFFINITY=granularity=fine,compact,1,0\nENV KMP_BLOCKTIME=1\nENV KMP_SETTINGS=0\nENV RDMAV_FORK_SAFE=1\n\nARG PYTHON=python3.9\nARG PIP=pip3\nARG PYTHON_VERSION=3.9.10\n\nARG OPEN_MPI_PATH=/opt/amazon/openmpi\nARG EFA_PATH=/opt/amazon/efa\nARG EFA_VERSION=1.12.1\nARG OMPI_VERSION=4.1.1\nARG BRANCH_OFI=1.2.0-aws\n\nARG CUDA=11.2\nARG CUDA_DASH=11-2\nARG CUDNN=8.2.4.15-1\n\nARG NCCL_VERSION=2.10.3\n\n# To be passed to e3 and sagemaker stages\nENV PYTHON=${PYTHON}\nENV PYTHON_VERSION=${PYTHON_VERSION}\nENV PIP=${PIP}\n\nRUN apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated --allow-downgrades  --allow-change-held-packages \\\n   ca-certificates \\\n   cuda-command-line-tools-${CUDA_DASH} \\\n   cuda-cudart-dev-${CUDA_DASH} \\\n   libcufft-dev-${CUDA_DASH} \\\n   libcurand-dev-${CUDA_DASH} \\\n   libcusolver-dev-${CUDA_DASH} \\\n   libcusparse-dev-${CUDA_DASH} \\\n   curl \\\n   emacs \\\n   libcudnn8=${CUDNN}+cuda11.4 \\\n   libgomp1 \\\n   libfreetype6-dev \\\n   libhdf5-serial-dev \\\n   liblzma-dev \\\n   libpng-dev \\\n   libtemplate-perl \\\n   libzmq3-dev \\\n   hwloc \\\n   git \\\n   unzip \\\n   wget \\\n   libtool \\\n   vim \\\n   libssl1.1 \\\n   openssl \\\n   build-essential \\\n   openssh-client \\\n   openssh-server \\\n   zlib1g-dev \\\n   # Install dependent library for OpenCV\n   libgtk2.0-dev \\\n   jq \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends --allow-unauthenticated --allow-change-held-packages \\\n   libcublas-dev-${CUDA_DASH} \\\n   libcublas-${CUDA_DASH} \\\n   # The 'apt-get install' of nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0\n   # adds a new list which contains libnvinfer library, so it needs another\n   # 'apt-get update' to retrieve that list before it can actually install the\n   # library.\n   # We don't install libnvinfer-dev since we don't need to build against TensorRT,\n   # and libnvinfer4 doesn't contain libnvinfer.a static library.\n   # nvinfer-runtime-trt-repo doesn't have a 1804-cuda10.1 version yet. see:\n   # https://developer.download.nvidia.cn/compute/machine-learning/repos/ubuntu1804/x86_64/\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /var/run/sshd\n\nRUN cd /tmp \\\n  && git clone https://github.com/NVIDIA/nccl.git -b v$NCCL_VERSION-1 \\\n  && cd nccl \\\n  && make -j64 src.build BUILDDIR=/usr/local \\\n  && rm -rf /tmp/nccl\n\n# Install EFA without AWS OPEN_MPI\nRUN mkdir /tmp/efa \\\n  && cd /tmp/efa \\\n  && curl -f -O https://s3-us-west-2.amazonaws.com/aws-efa-installer/aws-efa-installer-${EFA_VERSION}.tar.gz \\\n  && tar -xf aws-efa-installer-${EFA_VERSION}.tar.gz \\\n  && cd aws-efa-installer \\\n  && ./efa_installer.sh -y --skip-kmod -g \\\n  && rm -rf $OPEN_MPI_PATH \\\n  && rm -rf /tmp/efa \\\n  && rm -rf /tmp/aws-efa-installer-${EFA_VERSION}.tar.gz\n\n# Install OpenMPI without libfabric support\nRUN mkdir /tmp/openmpi && \\\n  cd /tmp/openmpi && \\\n  wget --quiet https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OMPI_VERSION}.tar.gz && \\\n  tar zxf openmpi-${OMPI_VERSION}.tar.gz && \\\n  cd openmpi-${OMPI_VERSION} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default --prefix=$OPEN_MPI_PATH && \\\n  make -j $(nproc) all && \\\n  make install && \\\n  ldconfig && \\\n  cd / && \\\n  rm -rf /tmp/openmpi && rm openmpi-${OMPI_VERSION}.tar.gz\n\n###########################################################################\n# Horovod & its dependencies\n###########################################################################\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv $OPEN_MPI_PATH/bin/mpirun $OPEN_MPI_PATH/bin/mpirun.real \\\n && echo '#!/bin/bash' > $OPEN_MPI_PATH/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> $OPEN_MPI_PATH/bin/mpirun \\\n && chmod a+x $OPEN_MPI_PATH/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\nENV LD_LIBRARY_PATH=$OPEN_MPI_PATH/lib/:$EFA_PATH/lib/:$LD_LIBRARY_PATH\n# /usr/local/lib/libpython* needs to be accessible for dynamic linking\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\nENV PATH=$OPEN_MPI_PATH/bin/:$PATH\nENV PATH=$OPEN_MPI_PATH/nvidia/bin:$PATH\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN mkdir -p /var/run/sshd \\\n   && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n   && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n   && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n   && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN apt-get update \\\n   && apt-get install -y --no-install-recommends \\\n   libbz2-dev \\\n   libc6-dev \\\n   libffi-dev \\\n   libgdbm-dev \\\n   libncursesw5-dev \\\n   libreadline-gplv2-dev \\\n   libsqlite3-dev \\\n   libssl-dev \\\n   tk-dev \\\n   ffmpeg \\\n   libsm6 \\\n   libxext6 \\\n   # remove libsasl2-2 after Nvidia docker upstream fix CVE-2022-24407\n   && rm -rf /var/lib/apt/lists/* \\\n   && apt-get clean\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n   && tar -xvf Python-$PYTHON_VERSION.tgz \\\n   && cd Python-$PYTHON_VERSION \\\n   && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared \\\n   && make -j $(nproc) \\\n   && make install \\\n   && rm -rf ../Python-$PYTHON_VERSION* \\\n   # Starting from Python39, a xxx.pem file will be generated under /tmp folder during installation. Remove it to complete cleanup after installation from python source.\n   && rm /tmp/*.pem && rm Python-$PYTHON_VERSION.tgz\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n   pip \\\n   setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n   && ln -s $(which ${PIP}) /usr/bin/pip\n\n# install PyYAML==5.1.2 to avoid conflict with latest awscli\n# # python-dateutil==2.8.0 to satisfy botocore associated with latest awscli\nRUN ${PIP} install --no-cache-dir -U \\\n   pybind11 \\\n   cmake==3.18.2.post1 \\\n   scipy==1.8.0 \\\n   \"Pillow>=9.0.0<9.1.0\" \\\n   python-dateutil==2.8.1 \\\n   \"pyYAML>=5.4,<5.5\" \\\n   requests==2.27.1 \\\n   \"awscli<2\" \\\n   mpi4py==3.1.3 \\\n   h5py==3.6.0 \\\n   \"absl-py>=0.9,<0.11\" \\\n   \"opencv-python>=4.3,<5\" \\\n   \"werkzeug>=2.0.2,<3\" \\\n   \"urllib3>1.26.0<1.27.0\" \\\n   protobuf==3.19.4\n\n# Install AWS OFI NCCL plug-in\nRUN apt-get update && apt-get install --no-install-recommends -y autoconf && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /tmp/efa-ofi-nccl \\\n  && cd /tmp/efa-ofi-nccl \\\n  && git clone https://github.com/aws/aws-ofi-nccl.git -b v$BRANCH_OFI \\\n  && cd aws-ofi-nccl \\\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-libfabric=/opt/amazon/efa \\\n  --with-mpi=/opt/amazon/openmpi \\\n  --with-cuda=/usr/local/cuda \\\n  --with-nccl=/usr/local --prefix=/usr/local \\\n  && make -j $(nproc) \\\n  && make install \\\n  && rm -rf /tmp/efa-ofi-nccl\n\n# Upgrade libsasl2-2 for fixing cyrus-sasl2 related CVE\nRUN apt-get install --no-install-recommends -y --only-upgrade libsasl2-2 && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && apt-get -y --no-install-recommends install protobuf-compiler && rm -rf /var/lib/apt/lists/*;\n\n# Upgrade libsasl2-2 for fixing cyrus-sasl2 related CVE\nRUN apt-get install --no-install-recommends -y --only-upgrade libsasl2-2 && rm -rf /var/lib/apt/lists/*;\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n   && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n   && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Add NGC vars\nENV TF_AUTOTUNE_THRESHOLD=2\n\nADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow-${TF_VERSION}/license.txt -o /license.txt\n\n##############################################################################\n#  _____ _____   ___                              ____           _\n# | ____|___ /  |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n# |  _|   |_ \\   | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n# | |___ ___) |  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |_____|____/  |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                                    |___/                        |_|\n##############################################################################\n\nFROM common AS e3\n\nARG TF_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/tensorflow/r2.9_aws/gpu/2022-06-06-22-28/tensorflow_gpu-2.9.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n\nRUN ${PIP} install --no-cache-dir -U \\\n   ${TF_URL} \\\n   tensorflow-io==0.24.0 \\\n   tensorflow-datasets==4.5.2\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-11.2/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 ${PIP} install --no-cache-dir horovod==0.24.2 \\\n && ldconfig\n\nRUN HOME_DIR=/root \\\n   && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n   && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n   && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n   && chmod +x /usr/local/bin/testOSSCompliance \\\n   && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n   && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n   && rm -rf ${HOME_DIR}/oss_compliance*\n\n# remove tmp files\nRUN rm -rf /tmp/*\n\nCMD [\"/bin/bash\"]\n\n#################################################################\n#  ____                   __  __       _\n# / ___|  __ _  __ _  ___|  \\/  | __ _| | _____ _ __\n# \\___ \\ / _` |/ _` |/ _ \\ |\\/| |/ _` | |/ / _ \\ '__|\n#  ___) | (_| | (_| |  __/ |  | | (_| |   <  __/ |\n# |____/ \\__,_|\\__, |\\___|_|  |_|\\__,_|_|\\_\\___|_|\n#              |___/\n#  ___                              ____           _\n# |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n#  | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n#  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                      |___/                        |_|\n#################################################################\n\nFROM common AS sagemaker\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG TF_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/tensorflow/r2.9_aws/gpu/2022-06-06-22-28/tensorflow_gpu-2.9.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n\n# sagemaker-specific environment variable\nENV SAGEMAKER_TRAINING_MODULE sagemaker_tensorflow_container.training:main\n\n# https://github.com/tensorflow/models/issues/9267\n# tf-models does not respect existing installations of TF and always installs open source TF\nRUN ${PIP} install --no-cache-dir -U \\\n    tf-models-official==2.9.1\n\nRUN ${PIP} uninstall -y tensorflow tensorflow-gpu \\\n  ; ${PIP} install --no-cache-dir -U \\\n    ${TF_URL} \\\n    tensorflow-io==0.24.0 \\\n    tensorflow-datasets==4.5.2\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-11.2/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 ${PIP} install --no-cache-dir horovod==0.24.2 \\\n && ldconfig\n\nRUN $PYTHON -m pip install --no-cache-dir -U \\\n    \"sagemaker>=2.93.0,<3\" \\\n    sagemaker-experiments==0.* \\\n    \"sagemaker-tensorflow-training>=20.3.1\" \\\n    \"sparkmagic<1\" \\\n    \"sagemaker-studio-sparkmagic-lib<1\" \\\n    \"sagemaker-studio-analytics-extension==0.0.2\" \\\n    smclarify\n\nRUN $PYTHON -m pip install --no-cache-dir -U \\\n    \"bokeh>=2.3,<3\" \\\n    \"imageio>=2.9,<3\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"numba<0.54\" \\\n    \"shap>=0.39,<1\"\n\n# install smdebug directly the specific branch\nARG SMDEBUG_TAG=1.0.17\nRUN git clone https://github.com/awslabs/sagemaker-debugger.git \\\n    && cd sagemaker-debugger \\\n    && git checkout tags/$SMDEBUG_TAG -b $SMDEBUG_TAG \\\n    && $PYTHON setup.py install && cd .. && rm -rf sagemaker-debugger\n\n# install sagemaker-tensorflow from source\nARG SAGEMAKER_TENSORFLOW_TAG=v1.15.0\nRUN apt update && apt install --no-install-recommends -y libcurl4-openssl-dev && rm -rf /var/lib/apt/lists/*;\nRUN git clone -b tf-2 https://github.com/aws/sagemaker-tensorflow-extensions.git \\\n    && cd sagemaker-tensorflow-extensions \\\n    && git checkout tags/$SAGEMAKER_TENSORFLOW_TAG -b $SAGEMAKER_TENSORFLOW_TAG \\\n    && $PYTHON -m pip install . \\\n    && cd .. && rm -rf sagemaker-tensorflow-extensions\n\n# install boost\n# tensorflow is compiled with --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=1\"\nRUN wget https://sourceforge.net/projects/boost/files/boost/1.73.0/boost_1_73_0.tar.gz/download -O boost_1_73_0.tar.gz \\\n   && tar -xzf boost_1_73_0.tar.gz \\\n   && cd boost_1_73_0 \\\n   && ./bootstrap.sh \\\n   && ./b2 define=_GLIBCXX_USE_CXX11_ABI=1 threading=multi --prefix=/usr -j 64 cxxflags=-fPIC cflags=-fPIC install || true \\\n   && cd .. \\\n   && rm -rf boost_1_73_0.tar.gz \\\n   && rm -rf boost_1_73_0 \\\n   && cd /usr/include/boost\n\n# add smdataparallel\n# smdataparallel\nARG SMDATAPARALLEL_BINARY=https://smdataparallel.s3.amazonaws.com/binary/tensorflow/2.9.0/cu112/2022-05-11/smdistributed_dataparallel-1.4.1-cp39-cp39-linux_x86_64.whl\n\n# Install SMD DP binary\nRUN SMDATAPARALLEL_TF=1 ${PYTHON} -m pip install --no-cache-dir ${SMDATAPARALLEL_BINARY}\n\n# Add NGC vars\nENV TF_AUTOTUNE_THRESHOLD=2\n\nENV LD_LIBRARY_PATH=\"/usr/local/lib/${PYTHON}/site-packages/smdistributed/dataparallel/lib:$LD_LIBRARY_PATH\"\n\n# remove tmp files\nRUN rm -rf /tmp/*\n\nRUN HOME_DIR=/root \\\n   && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n   && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n   && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n   && chmod +x /usr/local/bin/testOSSCompliance \\\n   && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n   && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n   && rm -rf ${HOME_DIR}/oss_compliance*\n\nCMD [\"/bin/bash\"]\n"
}