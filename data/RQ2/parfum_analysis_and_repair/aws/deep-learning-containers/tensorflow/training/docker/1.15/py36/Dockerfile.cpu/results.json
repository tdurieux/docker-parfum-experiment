{
  "startTime": 1674246345865,
  "endTime": 1674246347324,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"4\"\n\n# Prevent docker build get stopped by requesting user interaction\nENV DEBIAN_FRONTEND=noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN=true\n# Set environment variables for MKL\n# https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn\nENV KMP_AFFINITY=granularity=fine,compact,1,0\nENV KMP_BLOCKTIME=1\nENV KMP_SETTINGS=0\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\n# See http://bugs.python.org/issue19846\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n# Specify the location of module that contains the training logic for SageMaker\n# https://docs.aws.amazon.com/sagemaker/latest/dg/docker-container-environmental-variables-entrypoint.html\nENV SAGEMAKER_TRAINING_MODULE=sagemaker_tensorflow_container.training:main\n\n# Define framework-related package sources\nARG TF_URL=https://aws-tensorflow-binaries.s3-us-west-2.amazonaws.com/tensorflow/r1.15_aws/20210225-214219/cpu/py36/tensorflow_cpu-1.15.5-cp36-cp36m-manylinux2010_x86_64.whl\n\n# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating\n# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.\nARG SMDEBUG_VERSION=0.9.4\n\nARG PYTHON=python3\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3\nARG PYTHON_VERSION=3.6.13\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    openssh-client \\\n    openssh-server \\\n    libssl1.1 \\\n    openssl \\\n    ca-certificates \\\n    curl \\\n    emacs \\\n    git \\\n    unzip \\\n    wget \\\n    vim \\\n    zlib1g-dev \\\n    # Install dependent library for OpenCV\n    libgtk2.0-dev \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \\\n && tar zxf openmpi-4.0.1.tar.gz \\\n && cd openmpi-4.0.1 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.1.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\nENV PATH=/usr/local/openmpi/bin/:$PATH\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n && mkdir -p /var/run/sshd \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libbz2-dev \\\n    libc6-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    libncursesw5-dev \\\n    liblzma-dev \\\n    libreadline-gplv2-dev \\\n    libsqlite3-dev \\\n    libssl-dev \\\n    tk-dev \\\n    # Needed for open-cv to resolve error: ImportError: libGL.so.1: cannot open shared object file: No such file or directory\n    libgl1-mesa-glx \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xvf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install \\\n && rm -rf ../Python-$PYTHON_VERSION* && rm Python-$PYTHON_VERSION.tgz\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python \\\n && ln -s $(which ${PIP}) /usr/bin/pip\n\nRUN pip install --no-cache-dir -U \\\n    numpy==1.18.5 \\\n    scipy==1.2.2 \\\n    scikit-learn==0.20.3 \\\n    pandas==0.24.2 \\\n    Pillow \\\n    keras_applications==1.0.8 \\\n    keras_preprocessing==1.1.0 \\\n    keras==2.3.1 \\\n    requests==2.22.0 \\\n    \"sagemaker>=2,<3\" \\\n    sagemaker-experiments==0.* \\\n    mpi4py==3.0.2 \\\n    \"cryptography>=2.3\" \\\n    \"sagemaker-tensorflow>=1.15,<1.16\" \\\n    \"sagemaker-tensorflow-training>=10,<20\" \\\n    # Let's install TensorFlow separately in the end to avoid\n    # the library version to be overwritten\n && pip install --force-reinstall --no-cache-dir -U \\\n    ${TF_URL} \\\n    h5py==2.9.0 \\\n && pip install --force-reinstall --no-cache-dir -U \\\n    horovod==0.19.5 \\\n && pip install --no-cache-dir -U \\\n    # install PyYAML>=5.4,<5.5 to avoid conflict with latest awscli\n    \"pyYAML>=5.4,<5.5\" \\\n    \"awscli<2\" \\\n    smdebug==${SMDEBUG_VERSION} \\\n    smclarify\n\n# Install extra packages\n# numba 0.54 only works with numpy>=1.20. See https://github.com/numba/numba/issues/7339\nRUN pip install --no-cache-dir -U \\\n    \"bokeh>=2.3,<3\" \\\n    \"imageio>=2.9,<3\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"numba<0.54\" \\\n    \"shap>=0.39,<1\"\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow/license.txt -o /license.txt\n\nCMD [\"/bin/bash\"]\n"
}