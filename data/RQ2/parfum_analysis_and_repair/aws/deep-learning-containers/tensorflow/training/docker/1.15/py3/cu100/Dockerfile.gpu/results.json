{
  "startTime": 1674215038879,
  "endTime": 1674215040194,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 210,
        "lineEnd": 210,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 218,
        "lineEnd": 218,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Nvidia does not publish a TensorRT Runtime library for Ubuntu 18.04 with Cuda 10.1 support, so we stick with cuda 10.0.\n# https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/\nFROM nvidia/cuda:10.0-base-ubuntu18.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"7\"\n\n# Prevent docker build get stopped by requesting user interaction\nENV DEBIAN_FRONTEND=noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN=true\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\n# See http://bugs.python.org/issue19846\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\n# Specify the location of module that contains the training logic for SageMaker\n# https://docs.aws.amazon.com/sagemaker/latest/dg/docker-container-environmental-variables-entrypoint.html\nENV SAGEMAKER_TRAINING_MODULE=sagemaker_tensorflow_container.training:main\n\n# Define framework-related package sources\nARG TF_URL=https://aws-tensorflow-binaries.s3-us-west-2.amazonaws.com/tensorflow/r1.15_aws/20210225-231235/gpu/cu100/py37/tensorflow_gpu-1.15.5-cp37-cp37m-manylinux2010_x86_64.whl\nARG SMDEBUG_VERSION=0.9.4\nARG PYTHON=python3\nARG PYTHON_PIP=python3-pip\nARG PIP=pip3\nARG PYTHON_VERSION=3.7.10\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends --allow-unauthenticated \\\n    build-essential \\\n    ca-certificates \\\n    cuda-command-line-tools-10-0 \\\n    cuda-cublas-dev-10-0 \\\n    cuda-cudart-dev-10-0 \\\n    cuda-cufft-dev-10-0 \\\n    cuda-curand-dev-10-0 \\\n    cuda-cusolver-dev-10-0 \\\n    cuda-cusparse-dev-10-0 \\\n    curl \\\n    emacs \\\n    libcudnn7=7.5.1.10-1+cuda10.0 \\\n    # TensorFlow doesn't require libnccl anymore but Open MPI still depends on it\n    libnccl2=2.4.7-1+cuda10.0 \\\n    libgomp1 \\\n    libnccl-dev=2.4.7-1+cuda10.0 \\\n    libfreetype6-dev \\\n    libhdf5-serial-dev \\\n    libpng-dev \\\n    libzmq3-dev \\\n    git \\\n    unzip \\\n    wget \\\n    vim \\\n    openssh-client \\\n    openssh-server \\\n    libssl1.1 \\\n    openssl \\\n    zlib1g-dev \\\n    # Install dependent library for OpenCV\n    libgtk2.0-dev \\\n    # The 'apt-get install' of nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0\n    # adds a new list which contains libnvinfer library, so it needs another\n    # 'apt-get update' to retrieve that list before it can actually install the\n    # library.\n    # We don't install libnvinfer-dev since we don't need to build against TensorRT,\n    # and libnvinfer4 doesn't contain libnvinfer.a static library.\n && apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated  \\\n    nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 \\\n && apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated  \\\n    libnvinfer5=5.0.2-1+cuda10.0 \\\n && rm /usr/lib/x86_64-linux-gnu/libnvinfer_plugin* \\\n && rm /usr/lib/x86_64-linux-gnu/libnvcaffe_parser* \\\n && rm /usr/lib/x86_64-linux-gnu/libnvparsers* \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /var/run/sshd\n\n###########################################################################\n# Horovod & its dependencies\n###########################################################################\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \\\n && tar zxf openmpi-4.0.1.tar.gz \\\n && cd openmpi-4.0.1 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/openmpi && rm openmpi-4.0.1.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\nENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH\n# Resolve missing libcuda.so issue\nRUN cp /usr/local/cuda-10.0/extras/CUPTI/lib64/libcupti* /usr/local/cuda/lib64/\nENV LD_LIBRARY_PATH=/usr/local/cuda/lib64/:$LD_LIBRARY_PATH\n\nENV PATH=/usr/local/openmpi/bin/:$PATH\nENV PATH=/usr/local/nvidia/bin:$PATH\n\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN mkdir -p /var/run/sshd \\\n && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Create SSH key.\nRUN mkdir -p /root/.ssh/ \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n  StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nWORKDIR /\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    libbz2-dev \\\n    libc6-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    libncursesw5-dev \\\n    libreadline-gplv2-dev \\\n    libsqlite3-dev \\\n    libssl-dev \\\n    tk-dev \\\n    # Needed for open-cv to resolve error: ImportError: libGL.so.1: cannot open shared object file: No such file or directory\n    libgl1-mesa-glx \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xvf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install \\\n && make && make install && rm -rf ../Python-$PYTHON_VERSION* && rm Python-$PYTHON_VERSION.tgz\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which python3) /usr/local/bin/python \\\n && ln -s $(which pip3) /usr/bin/pip\n\nRUN ${PIP} install --no-cache-dir -U \\\n    numpy==1.18.5 \\\n    scipy==1.2.2 \\\n    scikit-learn==0.20.3 \\\n    pandas==0.24.2 \\\n    Pillow \\\n    requests==2.22.0 \\\n    \"sagemaker>=2,<3\" \\\n    smdebug==${SMDEBUG_VERSION} \\\n    sagemaker-experiments==0.* \\\n    mpi4py==3.0.2 \\\n    \"cryptography>=2.3\" \\\n    \"sagemaker-tensorflow>=1.15,<1.16\" \\\n    \"sagemaker-tensorflow-training>=10,<20\" \\\n    # Let's install TensorFlow separately in the end to avoid\n    # the library version to be overwritten\n && ${PIP} install --force-reinstall --no-cache-dir -U \\\n    ${TF_URL} \\\n    h5py==2.10.0 \\\n && ${PIP} install --no-cache-dir -U \\\n    # install PyYAML>=5.4,<5.5 to avoid conflict with latest awscli\n    \"pyYAML>=5.4,<5.5\" \\\n    \"awscli<2\"\n\n# Install extra packages\n# numba 0.54 only works with numpy>=1.20. See https://github.com/numba/numba/issues/7339\nRUN pip install --no-cache-dir -U \\\n    \"bokeh>=2.3,<3\" \\\n    \"imageio>=2.9,<3\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"numba<0.54\" \\\n    \"shap>=0.39,<1\"\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-10.0/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 pip install --no-cache-dir \\\n    horovod==0.19.5 \\\n && ldconfig\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/tensorflow/license.txt -o /license.txt\n\nCMD [\"/bin/bash\"]\n"
}