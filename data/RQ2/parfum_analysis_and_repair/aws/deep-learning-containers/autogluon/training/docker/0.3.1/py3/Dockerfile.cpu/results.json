{
  "startTime": 1674254048593,
  "endTime": 1674254049799,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG FROM_IMAGE=ubuntu:18.04\nFROM ${FROM_IMAGE}\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG OPENSSL_VERSION=1.1.1l\nARG PYTHON_VERSION=3.7.10\nARG PYTHON=python3\nARG MXNET_VER=1.7.*\nARG TORCH_VER=1.8.0+cpu\nARG TORCH_VISION_VER=0.9.0+cpu\n\nARG AUTOGLUON_VERSION=0.3.1\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    SAGEMAKER_TRAINING_MODULE=sagemaker_mxnet_container.training:main \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    TZ=\"UTC\"\n\n# Install dependencies\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get install -y --no-install-recommends \\\n    gcc \\\n    build-essential \\\n    wget \\\n    curl \\\n    emacs \\\n    git \\\n    vim \\\n    unzip \\\n    zlib1g-dev \\\n    libssl-dev \\\n    libncurses5-dev \\\n    libgdbm-dev \\\n    libnss3-dev \\\n    libgl1-mesa-glx \\\n    libffi-dev \\\n    liblzma-dev \\\n    libbz2-dev \\\n    libsqlite3-dev \\\n    tk-dev \\\n    uuid-dev \\\n    ca-certificates \\\n    libopencv-dev \\\n    openssh-client \\\n    openssh-server \\\n    libreadline-gplv2-dev \\\n    libc6-dev \\\n    cmake \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# install OpenSSL\nRUN wget -q -c https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./config && make -j $(nproc) && make install \\\n && ldconfig \\\n && cd .. && rm -rf openssl-* \\\n && rmdir /usr/local/ssl/certs \\\n && ln -s /etc/ssl/certs /usr/local/ssl/certs && rm openssl-${OPENSSL_VERSION}.tar.gz\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi \\\n && cd /tmp/openmpi \\\n && wget -q https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \\\n && tar zxf openmpi-4.0.1.tar.gz \\\n && cd openmpi-4.0.1 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default \\\n && make -j $(nproc) all \\\n && make install \\\n && ldconfig \\\n && cd /tmp && rm -rf /tmp/openmpi && rm openmpi-4.0.1.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun \\\n && echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf\n\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\nENV PATH=/usr/local/bin:$PATH\n\n# install Python\nRUN wget -q https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \\\n && tar -xzf Python-$PYTHON_VERSION.tgz \\\n && cd Python-$PYTHON_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared --prefix=/usr/local \\\n && make -j $(nproc) && make install \\\n && cd .. && rm -rf ../Python-$PYTHON_VERSION* \\\n && ln -s /usr/local/bin/pip3 /usr/bin/pip \\\n && ln -s /usr/local/bin/$PYTHON /usr/local/bin/python \\\n && pip --no-cache-dir install --upgrade --trusted-host pypi.org --trusted-host files.pythonhosted.org pip \\\n && pip --no-cache-dir install --upgrade wheel setuptools && rm Python-$PYTHON_VERSION.tgz\n\nWORKDIR /\n\nRUN pip install --no-cache-dir -U \\\n    torch==${TORCH_VER} torchvision==${TORCH_VISION_VER} -f https://download.pytorch.org/whl/torch_stable.html \\\n    mxnet==${MXNET_VER} \\\n    autogluon==${AUTOGLUON_VERSION} \\\n    sagemaker-mxnet-training \\\n && pip uninstall -y \\ \n    datashader \\\n    ipykernel \\\n    ipython \\\n    ipython-genutils \\\n    ipywidgets \\\n    jupyter-client \\\n    jupyter-core \\\n    jupyter-packaging \\\n    jupyter-server \\\n    jupyter-server-proxy \\\n    jupyterlab \\\n    jupyterlab-nvdashboard \\\n    jupyterlab-pygments \\\n    jupyterlab-server \\\n    jupyterlab-widgets \\\n    matplotlib-inline \\\n    nbclient \\\n    nbconvert \\\n    nbformat \\\n    notebook \\\n    panel \\\n    pydeck \\\n    pyppeteer \\\n    traitlets \\\n    websockets \\\n    widgetsnbextension\n\n# Catboost 0.26 updates version of scala 2.11 for security reasons\n# https://github.com/catboost/catboost/issues/1632\n# Dask security patching\nRUN pip install --no-cache-dir -U catboost==0.26.1 \\\n && pip install --no-cache-dir -U \"dask>2021.09.1\" \"distributed>2021.09.1\"\n\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# OpenSHH config for MPI communication\nRUN mkdir -p /var/run/sshd && \\\n  sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nRUN rm -rf /root/.ssh/ \\\n && mkdir -p /root/.ssh/ \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f -o /license.txt https://autogluon.s3.us-west-2.amazonaws.com/licenses/THIRD-PARTY-LICENSES.txt\n\nCMD [\"/bin/bash\"]\n"
}