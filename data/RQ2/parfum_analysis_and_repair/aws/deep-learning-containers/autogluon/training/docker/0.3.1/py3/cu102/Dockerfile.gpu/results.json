{
  "startTime": 1674256050429,
  "endTime": 1674256052058,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_VER=10.2\nARG LINUX_VER=ubuntu18.04\nARG PYTHON_VERSION=3.7.10\nARG PYTHON_VER=3.7\nARG RAPIDS_VER=0.19\nARG FROM_IMAGE=rapidsai/rapidsai-core\n\nFROM ${FROM_IMAGE}:${RAPIDS_VER}-cuda${CUDA_VER}-base-${LINUX_VER}-py${PYTHON_VER}\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG CUDA_VER\n\nARG OPENSSL_VERSION=1.1.1l\nARG AUTOGLUON_VERSION=0.3.1\n\nARG MXNET_VER=1.7.*\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONIOENCODING=UTF-8 \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    MXNET_CUDNN_LIB_CHECKING=0 \\\n    SAGEMAKER_TRAINING_MODULE=sagemaker_mxnet_container.training:main \\\n    LD_LIBRARY_PATH=/opt/conda/envs/rapids/lib:/usr/local/lib:$LD_LIBRARY_PATH \\\n    PATH=/opt/conda/envs/rapids/bin:/usr/local/bin:$PATH\n\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    libgl1-mesa-glx \\\n    ffmpeg \\\n    libsm6 \\\n    libxext6 \\\n    emacs \\\n    vim \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /tmp/*\n\n# install OpenSSL\nRUN wget -q -c https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./config && make -j $(nproc) && make install \\\n && ldconfig \\\n && cd .. && rm -rf openssl-* \\\n && rmdir /usr/local/ssl/certs \\\n && ln -s /etc/ssl/certs /usr/local/ssl/certs && rm openssl-${OPENSSL_VERSION}.tar.gz\n\nRUN conda update conda -y \\\n && conda update --all -y \\\n && conda clean --all -y\n\nRUN source activate rapids \\\n && conda remove gdal libgdal dask dask-core dask-cuda dask-cudf distributed markdown -y \\\n && conda update --all -y \\\n && conda clean --all -y\n\nRUN source activate rapids \\\n && pip install --no-cache-dir -U --trusted-host pypi.org --trusted-host files.pythonhosted.org pip \\\n && pip install --no-cache-dir -U setuptools wheel \\\n && pip install --no-cache-dir -U \"dask>2021.09.1\" \"distributed>2021.09.1\" \\\n && pip install --no-cache-dir -U --no-use-pep517 mxnet-cu$(echo ${CUDA_VER} | sed 's/\\.//')==${MXNET_VER} \\\n && pip install --no-cache-dir -U autogluon==${AUTOGLUON_VERSION} \\\n && pip install --no-cache-dir -U sagemaker-mxnet-training \\\n && pip install --no-cache-dir -U cupy-cuda102==9.2.0 \\\n && pip uninstall -y \\\n    datashader \\\n    ipykernel \\\n    ipython \\\n    ipython-genutils \\\n    ipywidgets \\\n    jupyter-client \\\n    jupyter-core \\\n    jupyter-packaging \\\n    jupyter-server \\\n    jupyter-server-proxy \\\n    jupyterlab \\\n    jupyterlab-nvdashboard \\\n    jupyterlab-pygments \\\n    jupyterlab-server \\\n    jupyterlab-widgets \\\n    matplotlib-inline \\\n    nbclient \\\n    nbconvert \\\n    nbformat \\\n    notebook \\\n    panel \\\n    pydeck \\\n    pyppeteer \\\n    traitlets \\\n    websockets \\\n    widgetsnbextension\n\n# Catboost 0.26 updates version of scala 2.11 for security reasons\n# https://github.com/catboost/catboost/issues/1632\nRUN pip install --no-cache-dir -U catboost==0.26.1\n\nWORKDIR /\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\nRUN rm -rf /root/.ssh/ && \\\n  mkdir -p /root/.ssh/ && \\\n  ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \\\n  cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n  && printf \"Host *\\n StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\n# This is here to make our installed version of OpenCV work.\n# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394\n# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?\nRUN ln -s /dev/null /dev/raw1394\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && chmod 775 -R ${HOME_DIR}/oss_compliance/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python3 \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f -o /license.txt https://autogluon.s3.us-west-2.amazonaws.com/licenses/THIRD-PARTY-LICENSES.txt\n\nCMD [\"/bin/bash\"]\n"
}