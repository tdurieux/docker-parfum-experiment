{
  "startTime": 1674252805272,
  "endTime": 1674252807432,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 150
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 293,
        "lineEnd": 293,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 249,
        "lineEnd": 249,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 265,
        "lineEnd": 265,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON=python3\nARG PYTHON_VERSION=3.8.13\nARG MAMBA_VERSION=4.12.0-2\n\n# PyTorch Binaries\nARG PT_E3_TRAINING_URL=https://aws-pytorch-cicd-v3-binaries.s3.us-west-2.amazonaws.com/r1.11.0_v3_e3/20220309-213627/9c116675b0719f637546dbc5507bf79ef8fb622e/cpu/torch-1.11.0%2Bcpu-cp38-cp38-linux_x86_64.whl\nARG PT_SM_TRAINING_URL=https://aws-pytorch-cicd-v3-binaries.s3.us-west-2.amazonaws.com/r1.11.0_v3_sm/20220404-193901/15c50b561b1a638dacc59db932cab0fcb8d60d10/cpu/torch-1.11.0%2Bcpu-cp38-cp38-linux_x86_64.whl\nARG PT_TORCHVISION_URL=https://download.pytorch.org/whl/cpu/torchvision-0.12.0%2Bcpu-cp38-cp38-linux_x86_64.whl\nARG PT_TORCHAUDIO_URL=https://download.pytorch.org/whl/cpu/torchaudio-0.11.0%2Bcpu-cp38-cp38-linux_x86_64.whl\nARG PT_TORCHDATA_URL=https://aws-pytorch-cicd-v3-binaries.s3.us-west-2.amazonaws.com/r1.11.0_v3_e3/aws-torchdata/torchdata-0.4.0-cp38-cp38-linux_x86_64.whl\nARG PT_S3_WHL=https://aws-s3-plugin.s3.us-west-2.amazonaws.com/binaries/0.0.1/1c3e69e/awsio-0.0.1-cp38-cp38-manylinux1_x86_64.whl\n\nFROM ubuntu:20.04 AS common\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON\nARG PYTHON_VERSION\nARG OPEN_MPI_VERSION=4.0.1\nARG MAMBA_VERSION\n\n# This arg required to stop docker build waiting for region configuration while installing tz data from ubuntu 20\nARG DEBIAN_FRONTEND=noninteractive\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/conda/lib\"\nENV PATH=/opt/conda/bin:$PATH\nENV DGLBACKEND=pytorch\nENV DLC_CONTAINER_TYPE=training\n\nWORKDIR /\n\nRUN apt-get update \\\n # TODO: Remove systemd upgrade once it is updated in base image\n && apt-get -y upgrade --only-upgrade systemd \\\n && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    curl \\\n    emacs \\\n    git \\\n    jq \\\n    libcurl4-openssl-dev \\\n    libglib2.0-0 \\\n    libgl1-mesa-glx \\\n    libsm6 \\\n    libssl-dev \\\n    libxext6 \\\n    libxrender-dev \\\n    software-properties-common \\\n    unzip \\\n    vim \\\n    wget \\\n    zlib1g-dev \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\n# Install aws-sdk-cpp s3;transfer modules for torchdata\nRUN git clone --recurse-submodules https://github.com/aws/aws-sdk-cpp \\\n && cd aws-sdk-cpp/ \\\n && mkdir sdk-build \\\n && cd sdk-build \\\n && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=\"s3;transfer\" -DAUTORUN_UNIT_TESTS=OFF \\\n && make \\\n && make install \\\n && cd ../.. \\\n && rm -rf aws-sdk-cpp\n\n# Install Open MPI\nRUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \\\n && cd openmpi-$OPEN_MPI_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/home/.openmpi \\\n && make all install \\\n && cd .. \\\n && rm openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && rm -rf openmpi-$OPEN_MPI_VERSION\n\n# The ENV variables declared below are changed in the previous section\n# Grouping these ENV variables in the first section causes\n# ompi_info to fail. This is only observed in CPU containers\nENV PATH=\"$PATH:/home/.openmpi/bin\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/.openmpi/lib/\"\nRUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value\n\n# Install OpenSSH for MPI to communicate between containers, allow OpenSSH to talk to containers without asking for confirmation\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends openssh-client openssh-server \\\n && mkdir -p /var/run/sshd \\\n && cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\n# Configure OpenSSH so that nodes can communicate with each other\nRUN mkdir -p /var/run/sshd \\\n && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nRUN rm -rf /root/.ssh/ \\\n && mkdir -p /root/.ssh/ \\\n && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \\\n && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\nRUN curl -f -L -o ~/mambaforge.sh https://github.com/conda-forge/miniforge/releases/download/${MAMBA_VERSION}/Mambaforge-${MAMBA_VERSION}-Linux-x86_64.sh \\\n && chmod +x ~/mambaforge.sh \\\n && ~/mambaforge.sh -b -p /opt/conda \\\n && rm ~/mambaforge.sh \\\n && /opt/conda/bin/conda install -c conda-forge \\\n    python=$PYTHON_VERSION \\\n    cython \\\n    mkl \\\n    mkl-include \\\n    parso \\\n    typing \\\n    h5py \\\n    requests \\\n    \"pyopenssl>=17.5.0\" \\\n    # Below 2 are included in miniconda base, but not mamba so need to install\n    conda-content-trust \\\n    charset-normalizer \\\n && /opt/conda/bin/conda install -c dglteam -y dgl=0.8.0 \\\n && /opt/conda/bin/conda clean -ya\n\n# Upstream conda looks to have moved to 4.13 which is incompatible with mamba 0.22.1 and will fail the conda-forge installs.\n# having \"conda update conda\" before the \"conda -c conda-forge\" commands will automatically update conda to 4.13.\n# Moving conda update conda\" after the \"conda -c conda-forge\" commands keep conda at 4.12 but will update other packages using\n# the current conda 4.12\nRUN /opt/conda/bin/conda update -y conda \\\n && /opt/conda/bin/conda clean -ya\n\n# Conda installs links for libtinfo.so.6 and libtinfo.so.6.2 both\n# Which causes \"/opt/conda/lib/libtinfo.so.6: no version information available\" warning\n# Removing link for libtinfo.so.6. This change is needed only for ubuntu 20.04-conda, and can be reverted\n# once conda fixes the issue\nRUN rm -rf /opt/conda/lib/libtinfo.so.6\n\nRUN pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \\\n && pip install --no-cache-dir -U \\\n    \"awscli<2\" \\\n    boto3 \\\n    click \\\n    \"cryptography>3.2\" \\\n    ipython==8.1.0 \\\n    numpy==1.22.2 \\\n    \"opencv-python>=4.3,<5\" \\\n    packaging \\\n    \"Pillow>=9.0.0\" \\\n    psutil==5.9.0 \\\n    \"pyyaml>=5.4,<5.5\" \\\n    scipy\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.11/license.txt\n\n##############################################################################\n#  _____ _____   ___                              ____           _\n# | ____|___ /  |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n# |  _|   |_ \\   | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n# | |___ ___) |  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |_____|____/  |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                                    |___/                        |_|\n##############################################################################\n\nFROM common AS e3\n\nARG PYTHON\n\n# PyTorch Binaries\nARG PT_E3_TRAINING_URL\nARG PT_TORCHVISION_URL\nARG PT_TORCHAUDIO_URL\nARG PT_TORCHDATA_URL\nARG PT_S3_WHL\n\n# Install AWS-PyTorch and other torch packages\nRUN pip uninstall -y torch torchvision torchaudio torchdata \\\n && pip install --no-cache-dir -U ${PT_E3_TRAINING_URL} ${PT_TORCHVISION_URL} ${PT_TORCHAUDIO_URL} ${PT_TORCHDATA_URL}\n\n# Install PT S3 plugin\nRUN pip install --no-cache-dir -U ${PT_S3_WHL}\nRUN mkdir -p /etc/pki/tls/certs && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance* \\\n && rm -rf /tmp/tmp*\n\n# Starts framework\nCMD [\"/bin/bash\"]\n\n#################################################################\n#  ____                   __  __       _\n# / ___|  __ _  __ _  ___|  \\/  | __ _| | _____ _ __\n# \\___ \\ / _` |/ _` |/ _ \\ |\\/| |/ _` | |/ / _ \\ '__|\n#  ___) | (_| | (_| |  __/ |  | | (_| |   <  __/ |\n# |____/ \\__,_|\\__, |\\___|_|  |_|\\__,_|_|\\_\\___|_|\n#              |___/\n#  ___                              ____           _\n# |_ _|_ __ ___   __ _  __ _  ___  |  _ \\ ___  ___(_)_ __   ___\n#  | || '_ ` _ \\ / _` |/ _` |/ _ \\ | |_) / _ \\/ __| | '_ \\ / _ \\\n#  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/\n# |___|_| |_| |_|\\__,_|\\__, |\\___| |_| \\_\\___|\\___|_| .__/ \\___|\n#                      |___/                        |_|\n#################################################################\n\nFROM common AS sagemaker\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON\n\n# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating\n# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.\nARG SMDEBUG_VERSION=1.0.16\n\nENV SAGEMAKER_TRAINING_MODULE=sagemaker_pytorch_container.training:main\n\nARG PT_SM_TRAINING_URL\nARG PT_TORCHVISION_URL\nARG PT_TORCHAUDIO_URL\nARG PT_TORCHDATA_URL\nARG PT_S3_WHL\n\n# Install AWS-PyTorch and other torch packages\nRUN pip uninstall -y torch torchvision torchaudio torchdata \\\n && pip install --no-cache-dir -U ${PT_SM_TRAINING_URL} ${PT_TORCHVISION_URL} ${PT_TORCHAUDIO_URL} ${PT_TORCHDATA_URL}\n\n# Install PT S3 plugin\nRUN pip install --no-cache-dir -U ${PT_S3_WHL}\nRUN mkdir -p /etc/pki/tls/certs && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\n\nWORKDIR /\n\n# Copy workaround script for incorrect hostname\nCOPY changehostname.c /\nCOPY start_with_right_hostname.sh /usr/local/bin/start_with_right_hostname.sh\n\nRUN chmod +x /usr/local/bin/start_with_right_hostname.sh\n\n# Install scikit-learn and pandas\nRUN conda install -y -c conda-forge \\\n    scikit-learn \\\n    pandas\n\nRUN pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && pip install --no-cache-dir -U \\\n    # disable smdebug pip install until available stable smdebug releases\n    # smdebug==${SMDEBUG_VERSION} \\\n    smclarify \\\n    \"sagemaker>=2,<3\" \\\n    sagemaker-experiments==0.* \\\n    \"sagemaker-pytorch-training<3\"\n\n# Install smdebug from souce\nRUN cd /tmp \\\n  && git clone -b ${SMDEBUG_VERSION} https://github.com/awslabs/sagemaker-debugger \\\n  && cd sagemaker-debugger \\\n  && python setup.py install \\\n  && rm -rf /tmp/*\n\n# Install extra packages\n# numba 0.54 only works with numpy>=1.20. See https://github.com/numba/numba/issues/7339\nRUN pip install --no-cache-dir -U \\\n    \"bokeh>=2.3,<3\" \\\n    \"imageio>=2.9,<3\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"numba<0.54\" \\\n    \"shap>=0.39,<1\"\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance* \\\n && rm -rf /tmp/tmp*\n\nENTRYPOINT [\"bash\", \"-m\", \"start_with_right_hostname.sh\"]\nCMD [\"/bin/bash\"]\n"
}