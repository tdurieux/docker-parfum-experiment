{
  "startTime": 1674221232878,
  "endTime": 1674221233715,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\n# Add arguments to achieve the version, python and url\nARG PYTHON=python3\nARG PYTHON_VERSION=3.6.13\nARG OPEN_MPI_VERSION=4.0.1\n\n# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating\n# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.\nARG SMDEBUG_VERSION=1.0.7\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/conda/lib\"\nENV PATH=/opt/conda/bin:$PATH\nENV SAGEMAKER_TRAINING_MODULE=sagemaker_pytorch_container.training:main\nENV DGLBACKEND=pytorch\n\nARG PT_TRAINING_URL=https://aws-pytorch-binaries.s3-us-west-2.amazonaws.com/r1.6.0_cuda/20201205-063316/cddb1a49fc68ff0c6b06af06cb08e18cfd7dc0a2/cpu/torch-1.6.0-cp36-cp36m-manylinux1_x86_64.whl\nARG PT_TORCHVISION_URL=https://torchvision-build.s3.amazonaws.com/1.6.0/cpu/torchvision-0.7.0-cp36-cp36m-linux_x86_64.whl\n\nWORKDIR /\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    cmake \\\n    curl \\\n    emacs \\\n    git \\\n    wget \\\n    unzip \\\n    vim \\\n    build-essential \\\n    jq \\\n    libglib2.0-0 \\\n    libgl1-mesa-glx \\\n    libsm6 \\\n    libxext6 \\\n    libxrender-dev \\\n    zlib1g-dev \\\n    software-properties-common \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \\\n && cd openmpi-$OPEN_MPI_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/home/.openmpi \\\n && make all install \\\n && cd .. \\\n && rm openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && rm -rf openmpi-$OPEN_MPI_VERSION\n\n# The ENV variables declared below are changed in the previous section\n# Grouping these ENV variables in the first section causes\n# ompi_info to fail. This is only observed in CPU containers\nENV PATH=\"$PATH:/home/.openmpi/bin\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/.openmpi/lib/\"\nRUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value\n\n# Copy workaround script for incorrect hostname\nCOPY changehostname.c /\nCOPY start_with_right_hostname.sh /usr/local/bin/start_with_right_hostname.sh\n\nRUN curl -f -L -o ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda install -c conda-forge \\\n    python=$PYTHON_VERSION \\\n && /opt/conda/bin/conda install -y -c anaconda \\\n    numpy \\\n    ipython \\\n    mkl \\\n    mkl-include \\\n    cython \\\n    typing \\\n    \"pyopenssl>=17.5.0\" \\\n && conda install -c conda-forge \\\n    opencv \\\n && conda install -y \\\n    scikit-learn \\\n    pandas \\\n    h5py \\\n    requests \\\n && conda install -c dglteam -y dgl \\\n && /opt/conda/bin/conda clean -ya \\\n && conda clean -ya\n\n# The following section uninstalls torch and torchvision before installing the\n# custom versions from an S3 bucket. This will need to be removed in the future\nRUN pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \\\n && pip install --no-cache-dir -U \\\n    \"awscli<2\" \\\n    fastai==1.0.61 \\\n    scipy==1.2.2 \\\n    click \\\n    ruamel-yaml \\\n    \"cryptography>3.2\" \\\n    smdebug==${SMDEBUG_VERSION} \\\n    smclarify \\\n    \"sagemaker>=2,<3\" \\\n    sagemaker-experiments==0.* \\\n    \"sagemaker-pytorch-training<3\" \\\n    psutil==5.6.7 \\\n    Pillow==8.2.0 \\\n && pip install --no-cache-dir -U ${PT_TRAINING_URL} \\\n && pip uninstall -y torchvision \\\n && pip install --no-deps --no-cache-dir -U ${PT_TORCHVISION_URL}\n\nADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN chmod +x /usr/local/bin/start_with_right_hostname.sh \\\n && chmod +x /usr/local/bin/deep_learning_container.py \\\n && wget -O /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.6.0/license.txt\n\n# Starts framework\nENTRYPOINT [\"bash\", \"-m\", \"start_with_right_hostname.sh\"]\nCMD [\"/bin/bash\"]\n"
}