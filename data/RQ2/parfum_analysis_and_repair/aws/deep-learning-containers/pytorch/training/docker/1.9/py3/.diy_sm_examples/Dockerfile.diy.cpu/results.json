{
  "startTime": 1674215484864,
  "endTime": 1674215486125,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON=python3\n# Add arguments to achieve the version, python and url\nARG PYTHON_VERSION=3.8.10\nARG OPEN_MPI_VERSION=4.0.1\n\n# This arg required to stop docker build waiting for region configuration while installing tz data from ubuntu 20\nARG DEBIAN_FRONTEND=noninteractive\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/conda/lib\"\nENV PATH=/opt/conda/bin:$PATH\nENV DGLBACKEND=pytorch\n\nARG PT_TRAINING_URL=https://aws-pytorch-cicd-v3-binaries.s3.us-west-2.amazonaws.com/r1.9.0_aws_v3/20210621-225848/ba7c4b277d2664f51afae8f0bfef33ec82dd6018/cpu/torch-1.9.0-cp38-cp38-manylinux1_x86_64.whl\nARG PT_TORCHVISION_URL=https://torchvision-build-rc.s3.us-west-2.amazonaws.com/1.9.0/cpu/07-30-2021/torchvision-0.10.0-cp38-cp38-linux_x86_64.whl\nARG PT_S3_WHL=https://aws-s3-plugin.s3.us-west-2.amazonaws.com/binaries/0.0.1/1c3e69e/awsio-0.0.1-cp38-cp38-manylinux1_x86_64.whl\n\nWORKDIR /\n\nRUN apt-get update \\\n # TODO: Remove systemd upgrade once it is updated in base image\n && apt-get -y upgrade --only-upgrade systemd \\\n && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    curl \\\n    emacs \\\n    git \\\n    jq \\\n    libglib2.0-0 \\\n    libgl1-mesa-glx \\\n    libsm6 \\\n    libxext6 \\\n    libxrender-dev \\\n    software-properties-common \\\n    wget \\\n    unzip \\\n    vim \\\n    zlib1g-dev \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \\\n && cd openmpi-$OPEN_MPI_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/home/.openmpi \\\n && make all install \\\n && cd .. \\\n && rm openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && rm -rf openmpi-$OPEN_MPI_VERSION\n\n# The ENV variables declared below are changed in the previous section\n# Grouping these ENV variables in the first section causes\n# ompi_info to fail. This is only observed in CPU containers\nENV PATH=\"$PATH:/home/.openmpi/bin\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/.openmpi/lib/\"\nRUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value\n\nRUN curl -f -L -o ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda update conda \\\n && /opt/conda/bin/conda install -c conda-forge \\\n    python=$PYTHON_VERSION \\\n && /opt/conda/bin/conda install -y -c anaconda \\\n    # conda 4.10.0 requires ruamel_yaml to be installed. Currently pinned at latest.\n    ruamel_yaml==0.15.100 \\\n    numpy \\\n    ipython \\\n    mkl \\\n    mkl-include \\\n    cython \\\n    typing \\\n    \"pyopenssl>=17.5.0\" \\\n && conda install -y \\\n    scikit-learn \\\n    pandas \\\n    h5py \\\n    requests \\\n && conda install -c dglteam -y dgl=0.6.1 \\\n && /opt/conda/bin/conda clean -ya \\\n && conda clean -ya\n\n# Conda installs links for libtinfo.so.6 and libtinfo.so.6.2 both\n# Which causes \"/opt/conda/lib/libtinfo.so.6: no version information available\" warning\n# Removing link for libtinfo.so.6. This change is needed only for ubuntu 20.04-conda, and can be reverted\n# once conda fixes the issue\nRUN rm -rf /opt/conda/lib/libtinfo.so.6\n\n# The following section uninstalls torch and torchvision before installing the\n# custom versions from an S3 bucket. This will need to be removed in the future\nRUN pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \\\n && pip install --no-cache-dir -U \\\n    \"pyyaml>=5.4,<5.5\" \\\n    opencv-python==4.5.2.54 \\\n    \"awscli<2\" \\\n    boto3 \\\n    scipy \\\n    click \\\n    \"cryptography>3.2\" \\\n    psutil==5.6.7 \\\n    \"Pillow>=8.3.2\" \\\n && pip uninstall -y torch \\\n && pip install --no-cache-dir -U ${PT_TRAINING_URL} \\\n && pip uninstall -y torchvision \\\n && pip install --no-deps --no-cache-dir -U ${PT_TORCHVISION_URL}\n\n# Install extra packages\n# numba 0.54 only works with numpy>=1.20. See https://github.com/numba/numba/issues/7339\nRUN pip install --no-cache-dir -U \\\n    \"bokeh>=2.3,<3\" \\\n    \"imageio>=2.9,<3\" \\\n    \"opencv-python>=4.3,<5\" \\\n    \"plotly>=5.1,<6\" \\\n    \"seaborn>=0.11,<1\" \\\n    \"numba<0.54\" \\\n    \"shap>=0.39,<1\"\n\n# Install PT S3 plugin\nRUN pip install --no-cache-dir -U ${PT_S3_WHL}\nRUN mkdir -p /etc/pki/tls/certs && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance* \\\n && rm -rf /tmp/tmp*\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.9/license.txt\n\nCMD [\"/bin/bash\"]\n"
}