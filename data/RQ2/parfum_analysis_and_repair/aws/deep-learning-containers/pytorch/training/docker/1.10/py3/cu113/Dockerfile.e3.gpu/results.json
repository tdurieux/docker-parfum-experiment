{
  "startTime": 1674253621791,
  "endTime": 1674253623302,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 5,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 150
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 270,
        "lineEnd": 270,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 279,
        "lineEnd": 279,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 2,
        "columnEnd": 72
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 222,
        "lineEnd": 225,
        "columnStart": 5,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 2,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.3.1-base-ubuntu20.04\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON=python3\nARG PYTHON_VERSION=3.8.10\nARG PYTHON_SHORT_VERSION=3.8\nARG CUBLAS_VERSION=11.5.1.109\nARG OPEN_MPI_PATH=/opt/amazon/openmpi\nARG EFA_PATH=/opt/amazon/efa\n\nARG CUDA_HOME=/usr/local/cuda\nARG MAMBA_VERSION=4.12.0-0\n\n# This arg required to stop docker build waiting for region configuration while installing tz data from ubuntu 20\nARG DEBIAN_FRONTEND=noninteractive\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV LD_LIBRARY_PATH=\"/usr/local/lib:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/opt/conda/lib:${LD_LIBRARY_PATH}\"\nENV PYTHONIOENCODING=UTF-8\nENV LANG=C.UTF-8\nENV LC_ALL=C.UTF-8\nENV PATH /opt/conda/bin:$PATH\nENV TORCH_CUDA_ARCH_LIST=\"3.7 5.0 7.0+PTX 8.0\"\nENV TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\"\nENV CUDNN_VERSION=8.2.0.53\nENV NCCL_VERSION=2.10.3\nENV HOROVOD_VERSION=0.21.3\nENV EFA_VERSION=1.15.2\nENV OMPI_VERSION=4.1.1\nENV BRANCH_OFI=1.2.0-aws\n# TODO: Add DGL environment variables back when DGL is re-enabled\n# ENV DGLBACKEND=pytorch\nENV CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\"\nENV MANUAL_BUILD=0\nENV RDMAV_FORK_SAFE=1\nENV DLC_CONTAINER_TYPE=training\n\n# There's no PT pipeline for binary for diy/e3 currently. Using the inference branch (PyTorch + telemetry feature) with different building environments for both training and inference DLCs temporarily.\nARG PT_TRAINING_URL=https://pytorch-ei-binaries.s3.us-west-2.amazonaws.com/r1.10.2_inference/20220211-013556/528b6ca3747ec951396383f2a70d1354283ad29f/gpu/torch-1.10.2%2Bcu113-cp38-cp38-manylinux1_x86_64.whl\nARG PT_TORCHVISION_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/pytorch/1.10.2/torchvision-0.11.3-cp38-cp38-linux_x86_64.whl\nARG PT_S3_WHL_GPU=https://aws-s3-plugin.s3.us-west-2.amazonaws.com/binaries/0.0.1/1c3e69e/awsio-0.0.1-cp38-cp38-manylinux1_x86_64.whl\n\n## NVIDIA updated and rotated the signing keys used by apt, dnf/yum, and zypper package managers beginning April 27, 2022\n## This code snippet has been taken from the NVIDIA forums https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771\n## to ensure that the builds do not fail\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n\nRUN apt-get update \\\n # TODO: Remove systemd upgrade once it is updated in base image\n && apt-get -y upgrade --only-upgrade systemd \\\n && apt-get install -y --allow-change-held-packages --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    cuda-command-line-tools-11-3 \\\n    cuda-cudart-11-3 \\\n    cuda-libraries-11-3 \\\n    curl \\\n    emacs \\\n    git \\\n    jq \\\n    libcublas-11-3=${CUBLAS_VERSION}-1 \\\n    libcublas-dev-11-3=${CUBLAS_VERSION}-1 \\\n    libcudnn8=$CUDNN_VERSION-1+cuda11.3 \\\n    libcufft-dev-11-3 \\\n    libcurand-dev-11-3 \\\n    libcusolver-dev-11-3 \\\n    libcusparse-dev-11-3 \\\n    libglib2.0-0 \\\n    libgl1-mesa-glx \\\n    libsm6 \\\n    libxext6 \\\n    libxrender-dev \\\n    libgomp1 \\\n    libibverbs-dev \\\n    libhwloc-dev \\\n    libnuma1 \\\n    libnuma-dev \\\n    libssl1.1 \\\n    libtool \\\n    hwloc \\\n    openssl \\\n    python3-dev \\\n    vim \\\n    wget \\\n    unzip \\\n    zlib1g-dev \\\n    jq \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN cd /tmp \\\n  && git clone https://github.com/NVIDIA/nccl.git -b v${NCCL_VERSION}-1 \\\n  && cd nccl \\\n  && make -j64 src.build BUILDDIR=/usr/local \\\n  && rm -rf /tmp/nccl\n\n# Install EFA along without AWS OPEN_MPI\nRUN mkdir /tmp/efa \\\n  && cd /tmp/efa \\\n  && curl -f -O https://s3-us-west-2.amazonaws.com/aws-efa-installer/aws-efa-installer-${EFA_VERSION}.tar.gz \\\n  && tar -xf aws-efa-installer-${EFA_VERSION}.tar.gz \\\n  && cd aws-efa-installer \\\n  && apt-get update \\\n  && ./efa_installer.sh -y --skip-kmod -g \\\n  && rm -rf $OPEN_MPI_PATH \\\n  && rm -rf /tmp/efa \\\n  && rm -rf /tmp/aws-efa-installer-${EFA_VERSION}.tar.gz \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean\n\n# Install OpenMPI without libfabric support\nRUN mkdir /tmp/openmpi && \\\n  cd /tmp/openmpi && \\\n  wget --quiet https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OMPI_VERSION}.tar.gz && \\\n  tar zxf openmpi-${OMPI_VERSION}.tar.gz && \\\n  cd openmpi-${OMPI_VERSION} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default --prefix=$OPEN_MPI_PATH && \\\n  make -j $(nproc) all && \\\n  make install && \\\n  ldconfig && \\\n  cd / && \\\n  rm -rf /tmp/openmpi && rm openmpi-${OMPI_VERSION}.tar.gz\n\nENV PATH=\"$OPEN_MPI_PATH/bin:$PATH\"\nENV LD_LIBRARY_PATH=$OPEN_MPI_PATH/lib/:$EFA_PATH/lib/:$LD_LIBRARY_PATH\n\nRUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value \\\n && curl -f -L -o ~/mambaforge.sh https://github.com/conda-forge/miniforge/releases/download/${MAMBA_VERSION}/Mambaforge-${MAMBA_VERSION}-Linux-x86_64.sh \\\n && chmod +x ~/mambaforge.sh \\\n && ~/mambaforge.sh -b -p /opt/conda \\\n && rm ~/mambaforge.sh \\\n && /opt/conda/bin/conda install -c conda-forge \\\n    python=$PYTHON_VERSION \\\n    mkl \\\n    mkl-include \\\n    cython \\\n    typing \\\n    future \\\n    \"pyopenssl>=17.5.0\" \\\n    # Below 2 are included in miniconda base, but not mamba so need to install\n    conda-content-trust \\\n    charset-normalizer \\\n # TODO: add dgl back once the ecs test for dgl gpu get fixed\n#  && conda install -y -c dglteam dgl-cuda11.3=0.7.2 \\\n && /opt/conda/bin/conda clean -ya\n\n# Conda installs links for libtinfo.so.6 and libtinfo.so.6.2 both\n# Which causes \"/opt/conda/lib/libtinfo.so.6: no version information available\" warning\n# Removing link for libtinfo.so.6. This change is needed only for ubuntu 20.04-conda, and can be reverted\n# once conda fixes the issue\nRUN rm -rf /opt/conda/lib/libtinfo.so.6\n\nRUN /opt/conda/bin/conda config --set ssl_verify False \\\n && pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && ln -s /opt/conda/bin/pip /usr/local/bin/pip3\n\nRUN conda install -c pytorch magma-cuda113==2.5.2 \\\n && conda install -y -c conda-forge \\\n    h5py \\\n    requests \\\n    libgcc \\\n && conda clean -ya\n\nWORKDIR /root\n\n# Uninstall torch and torchvision before installing the custom versions from an S3 bucket\n# Install urllib3>=1.25.9 to satisfy awscli/boto3/botocore requirements while fixing for CVE-2020-26137\nRUN pip install --no-cache-dir -U \\\n    opencv-python==4.5.2.54 \\\n    numpy==1.22.2 \\\n    ipython==8.0.1 \\\n    \"pyyaml>=5.4,<5.5\" \\\n    \"awscli<2\" \\\n    \"urllib3>=1.25.9\" \\\n    boto3 \\\n    packaging \\\n    psutil \\\n    \"Pillow>=9.0.0\" \\\n    scipy \\\n    pybind11 \\\n    click \\\n    mpi4py==3.0.3 \\\n    cmake==3.18.2.post1 \\\n    torchnet \\\n    \"cryptography>3.2\" \\\n && pip uninstall -y torch \\\n && pip install --no-cache-dir -U ${PT_TRAINING_URL} \\\n && pip uninstall -y torchvision \\\n && pip install --no-deps --no-cache-dir -U ${PT_TORCHVISION_URL}\n\n# Install Nvidia Apex\n## Pin apex commit requested by sm-model-parallel team\nRUN git clone https://github.com/NVIDIA/apex && \\\n    cd apex && \\\n    git checkout aa756ce && \\\n    pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" ./\n\n# Configure Open MPI and configure NCCL parameters\nRUN mv $OPEN_MPI_PATH/bin/mpirun $OPEN_MPI_PATH/bin/mpirun.real \\\n && echo '#!/bin/bash' > $OPEN_MPI_PATH/bin/mpirun \\\n && echo \"${OPEN_MPI_PATH}/bin/mpirun.real --allow-run-as-root \\\"\\$@\\\"\" >> $OPEN_MPI_PATH/bin/mpirun \\\n && chmod a+x $OPEN_MPI_PATH/bin/mpirun \\\n && echo \"hwloc_base_binding_policy = none\" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \\\n && echo NCCL_DEBUG=INFO >> /etc/nccl.conf \\\n && echo NCCL_SOCKET_IFNAME=^docker0 >> /etc/nccl.conf\n\n# Install AWS OFI NCCL plug-in\nRUN apt-get update && apt-get install --no-install-recommends -y autoconf && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /tmp/efa-ofi-nccl \\\n  && cd /tmp/efa-ofi-nccl \\\n  && git clone https://github.com/aws/aws-ofi-nccl.git -b v${BRANCH_OFI} \\\n  && cd aws-ofi-nccl \\\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-libfabric=/opt/amazon/efa \\\n  --with-mpi=/opt/amazon/openmpi \\\n  --with-cuda=/usr/local/cuda \\\n  --with-nccl=/usr/local --prefix=/usr/local \\\n  && make \\\n  && make install \\\n  && rm -rf /tmp/efa-ofi-nccl \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean\n\n# Install OpenSSH for MPI to communicate between containers, allow OpenSSH to talk to containers without asking for confirmation\nRUN apt-get update \\\n && apt-get install -y  --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n && apt-get install -y --no-install-recommends openssh-client openssh-server \\\n && mkdir -p /var/run/sshd \\\n && cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\n# Configure OpenSSH so that nodes can communicate with each other\nRUN mkdir -p /var/run/sshd && \\\n sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nRUN rm -rf /root/.ssh/ && \\\n mkdir -p /root/.ssh/ && \\\n ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \\\n cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \\\n && printf \"Host *\\n StrictHostKeyChecking no\\n\" >> /root/.ssh/config\n\n# Install Horovod\nRUN pip uninstall -y horovod \\\n && ldconfig /usr/local/cuda-11.3/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_CUDA_HOME=/usr/local/cuda-11.3 HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir horovod==${HOROVOD_VERSION} \\\n && ldconfig\n\n# Install PT S3 plugin\nRUN pip install --no-cache-dir -U ${PT_S3_WHL_GPU}\nRUN mkdir -p /etc/pki/tls/certs && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\n\nWORKDIR /\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance* \\\n && rm -rf /tmp/tmp*\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.10/license.txt\n\n# Starts framework\nCMD [\"/bin/bash\"]\n"
}