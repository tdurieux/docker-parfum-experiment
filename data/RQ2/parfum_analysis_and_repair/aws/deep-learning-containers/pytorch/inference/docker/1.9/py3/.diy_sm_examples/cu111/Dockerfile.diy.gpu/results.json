{
  "startTime": 1674255683019,
  "endTime": 1674255684342,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 197,
        "lineEnd": 197,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 145,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.1.1-base-ubuntu20.04\n\n\nLABEL maintainer=\"Amazon AI\"\nLABEL dlc_major_version=\"1\"\n\nARG PYTHON=python3\nARG PYTHON_VERSION=3.8.10\n\n# PyTorch Binaries\nARG PT_INFERENCE_URL=https://pytorch-ei-binaries.s3.us-west-2.amazonaws.com/r1.9.0_inference/20210730-020505/2dc3e2055764606a22a3c59ea955184e85ad6110/gpu/torch-1.9.0-cp38-cp38-manylinux1_x86_64.whl\nARG PT_TORCHVISION_URL=https://pytorch-ei-binaries.s3.us-west-2.amazonaws.com/torchvision_build/0.10.0/gpu/torchvision-0.10.0-cp38-cp38-linux_x86_64.whl\nARG PT_TORCHAUDIO_URL=https://pytorch-ei-binaries.s3.us-west-2.amazonaws.com/torchaudio_build/0.9.0/gpu/torchaudio-0.9.0-cp38-cp38-linux_x86_64.whl\n\nARG OPEN_MPI_VERSION=4.0.1\nARG TS_VERSION=0.4.2\nARG CUBLAS_VERSION=11.3.0.106\n\nARG DEBIAN_FRONTEND=noninteractive\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\nENV LD_LIBRARY_PATH /opt/conda/lib/:$LD_LIBRARY_PATH\nENV PATH /opt/conda/bin:$PATH\nENV TEMP=/home/model-server/tmp\nENV CUDNN_VERSION=8.0.5.39\nENV NCCL_VERSION=2.7.8\nENV EFA_VERSION=1.11.2\nENV OMPI_VERSION=4.1.1\nENV NVML_VERSION=11.1.74\nENV TORCH_CUDA_ARCH_LIST=\"3.7 5.0 7.0+PTX 8.0\"\n# Set MKL_THREADING_LAYER=GNU to prevent issues between torch and numpy/mkl\nENV MKL_THREADING_LAYER=GNU\n\nRUN apt-get update \\\n    # TODO: Remove systemd upgrade once it is updated in base image\n    && apt-get -y upgrade --only-upgrade systemd \\\n    && apt-get install -y --no-install-recommends software-properties-common \\\n    && add-apt-repository ppa:openjdk-r/ppa \\\n    && apt-get update \\\n    && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    cuda-command-line-tools-11-1 \\\n    cuda-cudart-11-1 \\\n    cuda-libraries-dev-11-1 \\\n    curl \\\n    emacs \\\n    git \\\n    jq \\\n    libcublas-11-1=${CUBLAS_VERSION}-1 \\\n    libcublas-dev-11-1=${CUBLAS_VERSION}-1 \\\n    libcudnn8=$CUDNN_VERSION-1+cuda11.1 \\\n    libcufft-dev-11-1 \\\n    libcurand-dev-11-1 \\\n    libcusolver-dev-11-1 \\\n    libcusparse-dev-11-1 \\\n    cuda-nvml-dev-11-1=${NVML_VERSION}-1 \\\n    libgl1-mesa-glx \\\n    libglib2.0-0 \\\n    libgomp1 \\\n    libibverbs-dev \\\n    libnuma1 \\\n    libnuma-dev \\\n    libsm6 \\\n    libssl1.1 \\\n    libxext6 \\\n    libxrender-dev \\\n    openjdk-11-jdk \\\n    openssl \\\n    vim \\\n    wget \\\n    unzip \\\n    zlib1g-dev \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN cd /tmp \\\n  && git clone https://github.com/NVIDIA/nccl.git -b v${NCCL_VERSION}-1 \\\n  && cd nccl \\\n  && make -j64 src.build BUILDDIR=/usr/local \\\n  && rm -rf /tmp/nccl\n\n# https://github.com/docker-library/openjdk/issues/261 https://github.com/docker-library/openjdk/pull/263/files\nRUN keytool -importkeystore -srckeystore /etc/ssl/certs/java/cacerts -destkeystore /etc/ssl/certs/java/cacerts.jks -deststoretype JKS -srcstorepass changeit -deststorepass changeit -noprompt; \\\n    mv /etc/ssl/certs/java/cacerts.jks /etc/ssl/certs/java/cacerts; \\\n    /var/lib/dpkg/info/ca-certificates-java.postinst configure;\n\nRUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \\\n && cd openmpi-$OPEN_MPI_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/home/.openmpi \\\n && make all install \\\n && cd .. \\\n && rm openmpi-$OPEN_MPI_VERSION.tar.gz \\\n && rm -rf openmpi-$OPEN_MPI_VERSION\n\nENV PATH=\"$PATH:/home/.openmpi/bin\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/.openmpi/lib/\"\n\n# Install OpenSSH. Allow OpenSSH to talk to containers without asking for confirmation\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    openssh-client \\\n    openssh-server \\\n && mkdir -p /var/run/sshd \\\n && cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_configs \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nRUN curl -f -L -o ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda update conda \\\n && /opt/conda/bin/conda install -c conda-forge \\\n    python=$PYTHON_VERSION \\\n && /opt/conda/bin/conda install -y \\\n    # conda 4.10.0 requires ruamel_yaml to be installed. Currently pinned at latest.\n    ruamel_yaml==0.15.100 \\\n    cython \\\n    ipython \\\n    mkl-include \\\n    mkl \\\n    parso \\\n    scipy \\\n    typing \\\n && /opt/conda/bin/conda clean -ya\n\nRUN conda install -c \\\n    pytorch magma-cuda111 \\\n && conda install -c \\\n    conda-forge \\\n    opencv \\\n && conda install -y \\\n    scikit-learn \\\n    pandas \\\n    h5py \\\n    requests \\\n && conda clean -ya \\\n && /opt/conda/bin/conda config --set ssl_verify False \\\n && pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \\\n && ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \\\n && pip install --no-cache-dir packaging==20.4 \\\n    enum-compat==0.0.3 \\\n    numpy==1.20.3 \\\n    \"cryptography>=3.3.2\"\n\n# Conda installs links for libtinfo.so.6 and libtinfo.so.6.2 both\n# Which causes \"/opt/conda/lib/libtinfo.so.6: no version information available\" warning\n# Removing link for libtinfo.so.6. This change is needed only for ubuntu 20.04-conda, and can be reverted\n# once conda fixes the issue: https://github.com/conda/conda/issues/9680\nRUN rm -rf /opt/conda/lib/libtinfo.so.6\n\n# Uninstall and re-install torch and torchvision from the PyTorch website\nRUN pip uninstall -y torch \\\n && pip install --no-cache-dir -U $PT_INFERENCE_URL \\\n && pip uninstall -y torchvision \\\n && pip install --no-deps --no-cache-dir -U $PT_TORCHVISION_URL \\\n && pip uninstall -y torchaudio \\\n && pip install --no-deps --no-cache-dir -U $PT_TORCHAUDIO_URL\n\nRUN conda install -y -c conda-forge \"pyyaml>=5.4,<5.5\"\nRUN pip install --no-cache-dir \"Pillow>=8.3.2\" \"awscli<2\" boto3\n\nRUN pip uninstall -y model-archiver multi-model-server \\\n && pip install --no-cache-dir captum \\\n && pip install --no-cache-dir torchserve==$TS_VERSION \\\n && pip install --no-cache-dir torch-model-archiver==$TS_VERSION\n\nRUN cd tmp/ \\\n && rm -rf tmp*\n\nRUN useradd -m model-server \\\n && mkdir -p /home/model-server/tmp /opt/ml/model \\\n && chown -R model-server /home/model-server /opt/ml/model\n\nCOPY torchserve-entrypoint.py /usr/local/bin/dockerd-entrypoint.py\nCOPY config.properties /home/model-server\n\nRUN chmod +x /usr/local/bin/dockerd-entrypoint.py\n\nCOPY deep_learning_container.py /usr/local/bin/deep_learning_container.py\n\nRUN chmod +x /usr/local/bin/deep_learning_container.py\n\nRUN HOME_DIR=/root \\\n && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \\\n && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \\\n && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \\\n && chmod +x /usr/local/bin/testOSSCompliance \\\n && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \\\n && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \\\n && rm -rf ${HOME_DIR}/oss_compliance*\n\nRUN curl -f -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.9/license.txt\n\nEXPOSE 8080 8081\nENTRYPOINT [\"python\", \"/usr/local/bin/dockerd-entrypoint.py\"]\nCMD [\"torchserve\", \"--start\", \"--ts-config\", \"/home/model-server/config.properties\", \"--model-store\", \"/home/model-server/\"]\n"
}