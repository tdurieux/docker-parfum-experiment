diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/aws/deep-learning-containers/pytorch/inference/docker/1.10/py3/Dockerfile.graviton.e3.cpu b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/aws/deep-learning-containers/pytorch/inference/docker/1.10/py3/Dockerfile.graviton.e3.cpu/repaired.Dockerfile
index 574d549..ae1b871 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/aws/deep-learning-containers/pytorch/inference/docker/1.10/py3/Dockerfile.graviton.e3.cpu
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/aws/deep-learning-containers/pytorch/inference/docker/1.10/py3/Dockerfile.graviton.e3.cpu/repaired.Dockerfile
@@ -46,7 +46,7 @@ RUN keytool -importkeystore -srckeystore /etc/ssl/certs/java/cacerts -destkeysto
     mv /etc/ssl/certs/java/cacerts.jks /etc/ssl/certs/java/cacerts; \
     /var/lib/dpkg/info/ca-certificates-java.postinst configure;
 
-RUN curl -L -o ~/mambaforge.sh https://github.com/conda-forge/miniforge/releases/download/${MAMBA_VERSION}/Mambaforge-${MAMBA_VERSION}-Linux-aarch64.sh \
+RUN curl -f -L -o ~/mambaforge.sh https://github.com/conda-forge/miniforge/releases/download/${MAMBA_VERSION}/Mambaforge-${MAMBA_VERSION}-Linux-aarch64.sh \
  && chmod +x ~/mambaforge.sh \
  && ~/mambaforge.sh -b -p /opt/conda \
  && rm ~/mambaforge.sh
@@ -81,7 +81,7 @@ RUN rm -rf /opt/conda/lib/libtinfo.so.6
 RUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \
  && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \
  && cd openmpi-$OPEN_MPI_VERSION \
- && ./configure --prefix=/home/.openmpi \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/home/.openmpi \
  && make all install \
  && cd .. \
  && rm openmpi-$OPEN_MPI_VERSION.tar.gz \
@@ -99,16 +99,16 @@ RUN conda install -c conda-forge -y \
     pandas \
     requests \
  && conda clean -ya \
- && pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org \
+ && pip install --no-cache-dir --upgrade pip --trusted-host pypi.org --trusted-host \
  && ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \
- && pip install packaging==20.4 \
+ && pip install --no-cache-dir packaging==20.4 \
     enum-compat==0.0.3 \
     "cryptography>=3.3.2"
 
 # install torch and torchvision from the PyTorch website
 RUN pip uninstall -y torch \
  && pip install --no-cache-dir -U $PT_INFERENCE_URL
-RUN pip install "torchvision>=0.11,<0.12"
+RUN pip install --no-cache-dir "torchvision>=0.11,<0.12"
 
 ## compile and install ArmCL
 RUN git clone https://github.com/Arm-software/ComputeLibrary.git \
@@ -121,12 +121,12 @@ RUN git clone https://github.com/Arm-software/ComputeLibrary.git \
 ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/armClArtifact/"
 
 RUN conda install -y -c conda-forge "pyyaml>=5.4,<5.5"
-RUN pip install "opencv-python>=4.6,<5" "Pillow>=9.0.1,<9.1.0" "awscli<2"
+RUN pip install --no-cache-dir "opencv-python>=4.6,<5" "Pillow>=9.0.1,<9.1.0" "awscli<2"
 
 RUN pip uninstall -y model-archiver multi-model-server \
- && pip install captum \
- && pip install torchserve==$TS_VERSION \
- && pip install torch-model-archiver==$TS_VERSION
+ && pip install --no-cache-dir captum \
+ && pip install --no-cache-dir torchserve==$TS_VERSION \
+ && pip install --no-cache-dir torch-model-archiver==$TS_VERSION
 
 RUN cd tmp/ \
  && rm -rf tmp*
@@ -145,7 +145,7 @@ COPY deep_learning_container.py /usr/local/bin/deep_learning_container.py
 RUN chmod +x /usr/local/bin/deep_learning_container.py
 
 RUN HOME_DIR=/root \
- && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
+ && curl -f -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
  && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
  && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
  && chmod +x /usr/local/bin/testOSSCompliance \
@@ -154,7 +154,7 @@ RUN HOME_DIR=/root \
  && cp ${HOME_DIR}/oss_compliance/build_from_source_packages/BUILD_FROM_SOURCE_PACKAGES_LICENCES_AARCH64_IMAGES ${HOME_DIR} \
  && rm -rf ${HOME_DIR}/oss_compliance*
 
-RUN curl https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.10/license.txt -o /license.txt
+RUN curl -f https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.10/license.txt -o /license.txt
 
 EXPOSE 8080 8081
 ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]