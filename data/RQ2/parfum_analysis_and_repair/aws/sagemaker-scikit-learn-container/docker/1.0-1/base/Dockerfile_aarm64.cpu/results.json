{
  "startTime": 1674248187582,
  "endTime": 1674248188517,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 8,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG UBUNTU_VERSION=18.04\nARG UBUNTU_IMAGE_DIGEST=646942475da61b4ce9cc5b3fadb42642ea90e5d0de46111458e100ff2c7031e6\n\nFROM ubuntu:${UBUNTU_VERSION}@sha256:${UBUNTU_IMAGE_DIGEST}\n\nARG MINICONDA_VERSION=4.9.2 # Upgraded version\nARG CONDA_PY_VERSION=38\nARG CONDA_PKG_VERSION=4.10.1\nARG PYTHON_VERSION=3.8.13\nARG PYARROW_VERSION=1.0\nARG MLIO_VERSION=arch-agnostic\n\n# Install python and other scikit-learn runtime dependencies\n# Dependency list from http://scikit-learn.org/stable/developers/advanced_installation.html#installing-build-dependencies\nRUN apt-get update && \\\n    apt-get -y upgrade && \\\n    apt-get -y install --no-install-recommends \\\n        build-essential \\\n        curl \\\n        git \\\n        jq \\\n        libatlas-base-dev \\\n        nginx \\\n        openjdk-8-jdk-headless \\\n        unzip \\\n        wget \\\n        && \\\n    \n    apt-get -y install --no-install-recommends \\\n        apt-transport-https \\ \n        ca-certificates \\\n\tgnupg \\\n        software-properties-common \\\n        autoconf \\\n        automake \\\n        build-essential \\\n        libssl-dev \\\n        && \\\n    # MLIO build dependencies\n    # Official Ubuntu APT repositories do not contain an up-to-date version of CMake required to build MLIO.\n    # Kitware contains the latest version of CMake.\n    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \\\n        gpg --batch --dearmor - | \\\n        tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \\\n    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \\\n    wget https://cmake.org/files/v3.18/cmake-3.18.4.tar.gz && \\\n    tar -xzvf cmake-3.18.4.tar.gz && \\\n    cd cmake-3.18.4 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(nproc) && \\\n    make install && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n       \n        cmake-data=3.18.4-0kitware1 \\\n        doxygen \\\n        kitware-archive-keyring \\\n        libcurl4-openssl-dev \\\n        libtool \\\n        ninja-build \\\n        python3-dev \\\n        python3-distutils \\\n        python3-pip \\\n        zlib1g-dev \\\n        && \\\n    rm /etc/apt/trusted.gpg.d/kitware.gpg && \\\n    rm -rf /var/lib/apt/lists/* && rm cmake-3.18.4.tar.gz\n\nRUN cd /tmp && \\\n    curl -f -L --output /tmp/Miniconda3.sh https://repo.anaconda.com/miniconda/Miniconda3-py${CONDA_PY_VERSION}_${MINICONDA_VERSION}-Linux-aarch64.sh && \\\n    bash /tmp/Miniconda3.sh -bfp /miniconda3 && \\\n    rm /tmp/Miniconda3.sh\n\nENV PATH=/miniconda3/bin:${PATH}\n\n# Install MLIO with Apache Arrow integration\n# We could install mlio-py from conda, but it comes  with extra support such as image reader that increases image size\n# which increases training time. We build from source to minimize the image size.\nRUN echo \"conda ${CONDA_PKG_VERSION}\" >> /miniconda3/conda-meta/pinned && \\\n    # Conda configuration see https://conda.io/projects/conda/en/latest/configuration.html\n   conda config --system --set auto_update_conda false && \\\n   conda config --system --set show_channel_urls true && \\\n    echo \"python ${PYTHON_VERSION}.*\" >> /miniconda3/conda-meta/pinned && \\\n    conda install -c conda-forge python=${PYTHON_VERSION} && \\\n    conda install conda=${CONDA_PKG_VERSION} && \\\n    conda update -y conda && \\\n    conda install -c conda-forge pyarrow=${PYARROW_VERSION} && \\\n    cd /tmp  && \\\n    git clone --branch ${MLIO_VERSION} https://github.com/awslabs/ml-io.git mlio && \\\n    cd mlio && \\\n    build-tools/build-dependency build/third-party all && \\\n    mkdir -p build/release && \\\n    cd build/release && \\\n    cmake -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_PREFIX_PATH=\"$(pwd)/../third-party\" ../.. && \\\n    cmake --build . && \\\n    cmake --build . --target install && \\\n    cmake -DMLIO_INCLUDE_PYTHON_EXTENSION=ON -DPYTHON_EXECUTABLE=\"/miniconda3/bin/python3\" \\\n        -DMLIO_INCLUDE_ARROW_INTEGRATION=ON ../.. && \\\n    cmake --build . --target mlio-py && \\\n    cmake --build . --target mlio-arrow && \\\n    cd ../../src/mlio-py && \\\n   python3 setup.py bdist_wheel && \\\n    python3 -m pip install --upgrade pip && \\\n    python3 -m pip install dist/*.whl && \\\n    cp -r /tmp/mlio/build/third-party/lib/libtbb* /usr/local/lib/ && \\\n    ldconfig && \\\n    rm -rf /tmp/mlio\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONIOENCODING=UTF-8 LANG=C.UTF-8 LC_ALL=C.UTF-8\n\n# Install Scikit-Learn\n# Scikit-learn 0.20 was the last version to support Python 2.7 and Python 3.4.\n# Scikit-learn now requires Python 3.6 or newer.\n RUN python -m pip install --no-cache -I scikit-learn==1.0.2\n"
}