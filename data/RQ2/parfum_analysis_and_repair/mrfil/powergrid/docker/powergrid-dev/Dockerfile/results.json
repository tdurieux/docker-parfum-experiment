{
  "startTime": 1674246201862,
  "endTime": 1674246202771,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 1,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 1,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 8,
        "columnStart": 25,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 8,
        "columnStart": 25,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvcr.io/hpc/pgi-compilers:ce as builder\n\n# Run everything in /root\nWORKDIR /root\n\n# Add needed packages\nRUN apt-get -y update && apt-get install --no-install-recommends -y g++ gcc curl wget libopenblas-dev \\\n\t\t\t\t\t\tlibarpack2-dev nano wget git \\\n\t\t\t\t\t\tlibhdf5-dev libfftw3-dev && apt-get clean all; rm -rf /var/lib/apt/lists/*;\n\n#ENV LD_LIBRARY_PATH=\"/opt/pgi/linux86-64/2019/cuda/9.1/lib64:${LD_LIBRARY_PATH}\"\n\n# Install Latest CMake\nRUN curl -f -O -J -L https://cmake.org/files/v3.14/cmake-3.14.0-Linux-x86_64.tar.gz; \\\n\tapt-get -y purge cmake; \\\n\ttar -xvf ./cmake-3.14.0-Linux-x86_64.tar.gz; rm ./cmake-3.14.0-Linux-x86_64.tar.gz \\\n\tcd ./cmake-3.14.0-Linux-x86_64; \\\n\tcp -r bin /usr/; \\\n\tcp -r doc /usr/share/; \\\n\tcp -r man /usr/share/; \\\n\tcp -r share /usr/\n\n\t# Install custom compile of boost for mpi.\nRUN wget -O ~/boost_1_70_0.tar.bz2 -c 'https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.bz2' --max-redirect=100 \\\n && tar xjf ~/boost_1_70_0.tar.bz2 \\\n && cd ~/boost_1_70_0/ \\\n && ./bootstrap.sh --prefix=/usr/local --with-toolset=gcc --with-libraries=mpi,program_options,serialization \\\n && cp ~/boost_1_70_0/tools/build/example/user-config.jam ~/boost_1_70_0/tools/build/src/user-config.jam \\\n && echo \"using mpi : /opt/pgi/linux86-64/2019/mpi/openmpi-3.1.3/bin/mpic++ ; \" >> ~/boost_1_70_0/tools/build/src/user-config.jam && rm ~/boost_1_70_0.tar.bz2\n\nRUN cd ~/boost_1_70_0 && ./b2 -j 4 toolset=gcc install || true\n\n# Install SuperLU5\nRUN curl -f -O -J -L https://github.com/xiaoyeli/superlu/archive/v5.2.1.tar.gz; \\\n\ttar xvf superlu-5.2.1.tar.gz; rm superlu-5.2.1.tar.gz \\\n\tmkdir /root/superlu-5.2.1/build; \\\n\tcd /root/superlu-5.2.1/build; \\\n\tcmake ../ -DBUILD_SHARED_LIBS=ON; \\\n\tmake; \\\n\tmake install;\n\n# Install Armadillo\nRUN git clone https://gitlab.com/conradsnicta/armadillo-code; \\\n\tcd armadillo-code; \\\n\tgit checkout 9.200.x; \\\n\tmkdir build; \\\n\tcd build; \\\n\techo $PATH; \\\n\tcmake ../ -DCMAKE_INSTALL_PREFIX=/opt; \\\n\tmake; \\\n\tmake install; \\\n\tldconfig\n\nENV LD_LIBRARY_PATH=\"/opt/lib:/opt/lib64:${LD_LIBRARY_PATH}\"\n\nRUN git clone https://github.com/acerjanic/ismrmrd.git; \\\n    cd ismrmrd; \\\n    git fetch; \\\n    git checkout matlab; \\\n    mkdir ./build; \\\n    cd build; \\\n    cmake ../ -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DBoost_FOUND=OFF; \\\n    make;  \\\n    make install\n\nENV LD_LIBRARY_PATH=\"/opt/PowerGrid/lib:${LD_LIBRARY_PATH}\"\nENV PATH=\"${PATH}:/opt/PowerGrid/bin\"\n\n# For singularity compatibility\nRUN ldconfig\n"
}