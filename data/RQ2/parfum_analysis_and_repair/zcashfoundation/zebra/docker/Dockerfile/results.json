{
  "startTime": 1674255855871,
  "endTime": 1674255856512,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 6,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 135,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We are using five stages:\n# - chef: installs cargo-chef\n# - planner: computes the recipe file\n# - deps: caches our dependencies and sets the needed variables\n# - tests: builds tests\n# - release: builds release binary\n# - runtime: is our runtime environment\n#\n# This stage implements cargo-chef for docker layer caching\nFROM rust:bullseye as chef\nRUN cargo install cargo-chef --locked\nWORKDIR /app\n\n# Analyze the current project to determine the minimum subset of files\n# (Cargo.lock and Cargo.toml manifests) required to build it and cache dependencies\n#\n# The recipe.json is the equivalent of the Python requirements.txt file\nFROM chef AS planner\nCOPY . .\nRUN cargo chef prepare --recipe-path recipe.json\n\n# In this stage we download all system requirements to build the project\n#\n# It also captures all the build arguments to be used as environment variables.\n# We set defaults for the arguments, in case the build does not include this information.\nFROM chef AS deps\nSHELL [\"/bin/bash\", \"-xo\", \"pipefail\", \"-c\"]\nCOPY --from=planner /app/recipe.json recipe.json\n\n# Install zebra build deps\nRUN apt-get -qq update && \\\n    apt-get -qq install -y --no-install-recommends \\\n    llvm \\\n    libclang-dev \\\n    clang \\\n    ca-certificates \\\n    protobuf-compiler \\\n    ; \\\n    rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Install google OS Config agent to be able to get information from the VMs being deployed\n# into GCP for integration testing purposes, and as Mainnet nodes\n# TODO: this shouldn't be a hardcoded requirement for everyone\nRUN if [ \"$(uname -m)\" != \"aarch64\" ]; then \\\n      apt-get -qq update && \\\n      apt-get -qq install -y --no-install-recommends \\\n      curl \\\n      lsb-release \\\n      && \\\n      echo \"deb http://packages.cloud.google.com/apt google-compute-engine-$(lsb_release -cs)-stable main\" > /etc/apt/sources.list.d/google-compute-engine.list && \\\n      curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \\\n      apt-get -qq update && \\\n      apt-get -qq install -y --no-install-recommends google-osconfig-agent; \\\n    fi \\\n    && \\\n    rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Build arguments and variables set to change how tests are run, tracelog levels,\n# and Network to be used (Mainnet or Testnet)\n#\n# We set defaults to all variables.\nARG RUST_BACKTRACE\nENV RUST_BACKTRACE ${RUST_BACKTRACE:-0}\n\nARG RUST_LIB_BACKTRACE\nENV RUST_LIB_BACKTRACE ${RUST_LIB_BACKTRACE:-0}\n\nARG COLORBT_SHOW_HIDDEN\nENV COLORBT_SHOW_HIDDEN ${COLORBT_SHOW_HIDDEN:-0}\n\nARG RUST_LOG\nENV RUST_LOG ${RUST_LOG:-info}\n\n# Skip IPv6 tests by default, as some CI environment don't have IPv6 available\nARG ZEBRA_SKIP_IPV6_TESTS\nENV ZEBRA_SKIP_IPV6_TESTS ${ZEBRA_SKIP_IPV6_TESTS:-1}\n\n# Use default checkpoint sync and network values if none is provided\nARG CHECKPOINT_SYNC\nENV CHECKPOINT_SYNC ${CHECKPOINT_SYNC:-true}\n\nARG NETWORK\nENV NETWORK ${NETWORK:-Mainnet}\n\nENV CARGO_HOME /app/.cargo/\n\n# In this stage we build tests (without running then)\n#\n# We also download needed dependencies for tests to work, from other images.\n# An entrypoint.sh is only available in this step for easier test handling with variables.\nFROM deps AS tests\n# TODO: do not hardcode the user /root/ even though is a safe assumption\n# Pre-download Zcash Sprout, Sapling parameters and Lightwalletd binary\nCOPY --from=us-docker.pkg.dev/zealous-zebra/zebra/zcash-params /root/.zcash-params /root/.zcash-params\nCOPY --from=us-docker.pkg.dev/zealous-zebra/zebra/lightwalletd /lightwalletd /usr/local/bin\n\n# Re-hydrate the minimum project skeleton identified by `cargo chef prepare` in the planner stage,\n# and build it to cache all possible sentry and test dependencies.\n#\n# This is the caching Docker layer for Rust!\n#\n# TODO: is it faster to use --tests here?\nRUN cargo chef cook --release --features sentry,lightwalletd-grpc-tests --workspace --recipe-path recipe.json\n\nCOPY . .\nRUN cargo test --locked --release --features lightwalletd-grpc-tests --workspace --no-run\n\nCOPY ./docker/entrypoint.sh /\nRUN chmod u+x /entrypoint.sh\n\n# By default, runs the entrypoint tests specified by the environmental variables (if any are set)\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [ \"cargo\"]\n\n# In this stage we build a release (generate the zebrad binary)\n#\n# This step also adds `cargo chef` as this stage is completely independent from the\n# `test` stage. This step is a dependency for the `runtime` stage, which uses the resulting\n# zebrad binary from this step.\nFROM deps AS release\nRUN cargo chef cook --release --features sentry --recipe-path recipe.json\n\nCOPY . .\n# Build zebra\nRUN cargo build --locked --release --features sentry --package zebrad --bin zebrad\n\n# This stage is only used when deploying nodes or when only the resulting zebrad binary is needed\n#\n# To save space, this step starts from scratch using debian, and only adds the resulting\n# binary from the `release` stage, and the Zcash Sprout & Sapling parameters from ZCash\nFROM debian:bullseye-slim AS runtime\nCOPY --from=release /app/target/release/zebrad /usr/local/bin\nCOPY --from=us-docker.pkg.dev/zealous-zebra/zebra/zcash-params /root/.zcash-params /root/.zcash-params\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nARG CHECKPOINT_SYNC=true\nARG NETWORK=Mainnet\n\n# Build the `zebrad.toml` before starting the container, using the arguments from build\n# time, or using the default values set just above.\nRUN set -ex; \\\n  { \\\n    echo \"[consensus]\"; \\\n    echo \"checkpoint_sync = ${CHECKPOINT_SYNC}\"; \\\n    echo \"[metrics]\"; \\\n    echo \"endpoint_addr = '0.0.0.0:9999'\"; \\\n    echo \"[network]\"; \\\n    echo \"network = '${NETWORK}'\"; \\\n    echo \"[state]\"; \\\n    echo \"cache_dir = '/zebrad-cache'\"; \\\n    echo \"[tracing]\"; \\\n    echo \"endpoint_addr = '0.0.0.0:3000'\"; \\\n  } > \"zebrad.toml\"\n\nEXPOSE 3000 8233 18233\n\nARG SHORT_SHA\nENV SHORT_SHA $SHORT_SHA\n\nARG SENTRY_DSN\nENV SENTRY_DSN ${SENTRY_DSN}\n\nCMD [ \"zebrad\", \"-c\", \"zebrad.toml\", \"start\" ]\n"
}