{
  "startTime": 1674218286907,
  "endTime": 1674218287902,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-slim-buster\n\nWORKDIR /app\n\n# uwsgi must be compiled - install necessary build tools, compile uwsgi\n# and then remove the build tools to minimize image size\n# (buildDeps are removed, deps are kept)\nRUN set -ex \\\n    && buildDeps=' \\\n        build-essential \\\n    ' \\\n    && deps=' \\\n        htop \\\n    ' \\\n    && apt-get update && apt-get install -y $buildDeps $deps --no-install-recommends  && rm -rf /var/lib/apt/lists/* \\\n    && pip install --no-cache-dir uWSGI==2.0.19.1 \\\n    && apt-get purge -y --auto-remove $buildDeps \\\n    && find /usr/local -depth \\\n    \\( \\\n        \\( -type d -a -name test -o -name tests \\) \\\n        -o \\\n        \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n    \\) -exec rm -rf '{}' +\n\n# install other py libs - not require compilation\nCOPY requirements.txt /app/requirements.txt\nRUN pip install --no-cache-dir -r /app/requirements.txt\n\n# copy source files\nCOPY conf /app/conf\nCOPY py /app/py\nCOPY migrations /app/migrations\nCOPY migrations_sqlite /app/migrations_sqlite\nCOPY scripts /app/scripts\nCOPY templates /app/templates\nCOPY test /app/test\nCOPY conf/loginscript.sh /etc/profile\n\n# background spooler dir\nRUN mkdir /tmp/pysrv_spooler\n\n# we don't need this file with Docker but uwsgi looks for it\nRUN echo `date +%s` >/app/VERSION\n\nEXPOSE 80\n\n\n# our server config file\n# - you should write your own config file and put OUTSIDE the repository\n#   since the config file contains secrets\n# - here I use the sample template from repo\n# - it is also possible to override the config with env variables, either here\n#   or in Amazon ECS or Kubernetes configuration\nCOPY conf/server-config.json /app/real-server-config.json\n# ENV PYSRV_DATABASE_HOST host.docker.internal\n# ENV PYSRV_REDIS_HOST host.docker.internal\n# ENV PYSRV_DATABASE_PASSWORD x\n\n# build either a production or dev image\nARG BUILDMODE=production\nENV ENVBUILDMODE=$BUILDMODE\n\nRUN echo \"BUILDMODE $ENVBUILDMODE\"\n\n# run in shell mode with ENV expansion\nCMD uwsgi --ini /app/conf/uwsgi.ini:uwsgi-$ENVBUILDMODE\n\n"
}