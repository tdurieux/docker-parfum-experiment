{
  "startTime": 1674217782638,
  "endTime": 1674217784135,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 31,
        "columnEnd": 47
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "# base node image\nFROM node:16-bullseye-slim as base\n\n# set for base and all layer that inherit from it\nENV NODE_ENV production\n\n# Install openssl for Prisma\nRUN apt-get update && apt-get install --no-install-recommends -y openssl sqlite3 && rm -rf /var/lib/apt/lists/*;\n\n# Install all node_modules, including dev dependencies\nFROM base as deps\n\nWORKDIR /app\n\nADD package.json yarn.lock ./\nRUN yarn --production=false && yarn cache clean;\n\n# Setup production node_modules\nFROM base as production-deps\n\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\nADD package.json yarn.lock ./\n\n# Build the app\nFROM base as build\n\nARG COMMIT_SHA\nENV COMMIT_SHA=$COMMIT_SHA\nARG GITHUB_REPOSITORY\nENV GITHUB_REPOSITORY=$GITHUB_REPOSITORY\nENV NODE_ENV=production\n\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\n\nADD prisma .\nRUN npx prisma generate\n\nADD . .\nRUN yarn build && yarn cache clean;\n\n# Finally, build the production image with minimal footprint\nFROM base\n\nARG GITHUB_REPOSITORY\nENV GITHUB_REPOSITORY=$GITHUB_REPOSITORY\nENV DATABASE_URL=file:/data/sqlite.db\nENV PORT=\"8080\"\nENV NODE_ENV=\"production\"\n\n# add shortcut for connecting to database CLI\nRUN echo \"#!/bin/sh\\nset -x\\nsqlite3 \\$DATABASE_URL\" > /usr/local/bin/database-cli && chmod +x /usr/local/bin/database-cli\n\nWORKDIR /app\n\nCOPY --from=production-deps /app/node_modules /app/node_modules\nCOPY --from=build /app/node_modules/.prisma /app/node_modules/.prisma\n\nCOPY --from=build /app/build /app/build\nCOPY --from=build /app/public /app/public\nCOPY --from=build /app/server-build /app/server-build\nADD . .\n\nCMD [\"yarn\", \"start\"]\n"
}