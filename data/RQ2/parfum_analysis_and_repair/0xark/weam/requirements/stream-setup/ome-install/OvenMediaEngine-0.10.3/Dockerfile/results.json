{
  "startTime": 1674249593373,
  "endTime": 1674249595041,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 8,
        "columnEnd": 121
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 57,
        "lineEnd": 58,
        "columnStart": 8,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 8,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 8,
        "columnEnd": 186
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 8,
        "columnEnd": 92
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 136,
        "columnStart": 8,
        "columnEnd": 111
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 8,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 26,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 8,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 8,
        "columnEnd": 106
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 26,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 8,
        "columnEnd": 106
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 126
      }
    }
  ],
  "repairedDockerfile": "FROM    ubuntu:18.04 AS base\n\n## Install libraries by package\nENV     DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y tzdata && rm -rf /var/lib/apt/lists/*;\n\nFROM    base AS build\n\nWORKDIR /tmp\n\nARG     PREFIX=/opt/ovenmediaengine\nARG     MAKEFLAGS=\"-j16\"\n\nENV     OME_VERSION=master \\\n        OPENSSL_VERSION=1.1.0g \\\n        SRTP_VERSION=2.2.0 \\\n        SRT_VERSION=1.3.3 \\\n        OPUS_VERSION=1.1.3 \\\n        X264_VERSION=20190513-2245-stable \\\n        VPX_VERSION=1.7.0 \\\n        FDKAAC_VERSION=0.1.5 \\\n        FFMPEG_VERSION=3.4 \\\n        JEMALLOC_VERSION=5.2.1\n\n## Install build utils\nRUN apt-get -y --no-install-recommends install build-essential nasm autoconf libtool zlib1g-dev tclsh cmake curl pkg-config bc && rm -rf /var/lib/apt/lists/*;\n\n## Build OpenSSL\nRUN \\\n        OPENSSL_DOWNLOAD_NAME=$(echo \"${OPENSSL_VERSION}\" | sed 's/\\./_/g') && \\\n        DIR=/tmp/openssl && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://github.com/openssl/openssl/archive/OpenSSL_${OPENSSL_DOWNLOAD_NAME}.tar.gz | tar -xz --strip-components=1 && \\\n        ./config --prefix=\"${PREFIX}\" --openssldir=\"${PREFIX}\" -Wl,-rpath=\"${PREFIX}/lib\" shared no-idea no-mdc2 no-rc5 no-ec2m no-ecdh no-ecdsa no-async && \\\n        make && \\\n        make install_sw && \\\n        rm -rf ${DIR} && \\\n        rm -rf ${PREFIX}/bin\n\n## Build SRTP\nRUN \\\n        DIR=/tmp/srtp && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://github.com/cisco/libsrtp/archive/v${SRTP_VERSION}.tar.gz | tar -xz --strip-components=1 && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${PREFIX}\" --enable-shared --disable-static --enable-openssl --with-openssl-dir=\"${PREFIX}\" && \\\n        make shared_library && \\\n        make install && \\\n        rm -rf ${DIR}\n\n## Build SRT\nRUN \\\n        DIR=/tmp/srt && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://github.com/Haivision/srt/archive/v${SRT_VERSION}.tar.gz | tar -xz --strip-components=1 && \\\n        PKG_CONFIG_PATH=\"${PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=\"${PREFIX}\" --enable-shared --disable-static && \\\n        make && \\\n        make install && \\\n        rm -rf ${DIR} && \\\n        rm -rf ${PREFIX}/bin\n\n## Build OPUS\nRUN \\\n        DIR=/tmp/opus && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://archive.mozilla.org/pub/opus/opus-${OPUS_VERSION}.tar.gz | tar -xz --strip-components=1 && \\\n        autoreconf -fiv && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${PREFIX}\" --enable-shared --disable-static && \\\n        make && \\\n        make install && \\\n        rm -rf ${PREFIX}/share && \\\n        rm -rf ${DIR}\n\n## Build X264\nRUN \\\n        DIR=/tmp/x264 && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2 | tar -jx --strip-components=1 && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${PREFIX}\" --enable-shared --enable-pic --disable-cli && \\\n        make && \\\n        make install && \\\n        rm -rf ${DIR}\n\n## Build VPX\nRUN \\\n        DIR=/tmp/vpx && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://codeload.github.com/webmproject/libvpx/tar.gz/v${VPX_VERSION} | tar -xz --strip-components=1 && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${PREFIX}\" --enable-vp8 --enable-pic --enable-shared --disable-static --disable-vp9 --disable-debug --disable-examples --disable-docs --disable-install-bins && \\\n        make && \\\n        make install && \\\n        rm -rf ${DIR}\n\n## Build FDK-AAC\nRUN \\\n        DIR=/tmp/aac && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://github.com/mstorsjo/fdk-aac/archive/v${FDKAAC_VERSION}.tar.gz | tar -xz --strip-components=1 && \\\n        autoreconf -fiv && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${PREFIX}\" --enable-shared --disable-static --datadir=/tmp/aac && \\\n        make && \\\n        make install && \\\n        rm -rf ${DIR}\n\n## Build FFMPEG\nRUN \\\n        DIR=/tmp/ffmpeg && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://github.com/AirenSoft/FFmpeg/archive/ome/${FFMPEG_VERSION}.tar.gz | tar -xz --strip-components=1 && \\\n        PKG_CONFIG_PATH=\"${PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=\"${PREFIX}\" \\\n        --enable-gpl \\\n        --enable-nonfree \\\n        --extra-cflags=\"-I${PREFIX}/include\" \\\n        --extra-ldflags=\"-L${PREFIX}/lib -Wl,-rpath,${PREFIX}/lib\" \\\n        --extra-libs=-ldl \\\n        --enable-shared \\\n        --disable-static \\\n        --disable-debug \\\n        --disable-doc \\\n        --disable-programs \\\n        --disable-avdevice --disable-dct --disable-dwt --disable-error-resilience --disable-lsp --disable-lzo --disable-rdft --disable-faan --disable-pixelutils \\\n        --disable-everything \\\n        --enable-zlib --enable-libopus --enable-libvpx --enable-libfdk_aac --enable-libx264 \\\n        --enable-encoder=libvpx_vp8,libvpx_vp9,libopus,libfdk_aac,libx264 \\\n        --enable-decoder=aac,aac_latm,aac_fixed,h264 \\\n        --enable-parser=aac,aac_latm,aac_fixed,h264 \\\n        --enable-network --enable-protocol=tcp --enable-protocol=udp --enable-protocol=rtp --enable-demuxer=rtsp \\\n        --enable-filter=asetnsamples,aresample,aformat,channelmap,channelsplit,scale,transpose,fps,settb,asettb && \\\n        make && \\\n        make install && \\\n        rm -rf ${PREFIX}/share && \\\n        rm -rf ${DIR}\n\n## Build jemalloc\nRUN \\\n        DIR=/tmp/jemalloc && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://github.com/jemalloc/jemalloc/releases/download/${JEMALLOC_VERSION}/jemalloc-${JEMALLOC_VERSION}.tar.bz2 | tar -jx --strip-components=1 && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${PREFIX}\" && \\\n        make && \\\n        make install_include install_lib && \\\n        rm -rf ${DIR}\n\n## Build OvenMediaEngine\nRUN \\\n        DIR=/tmp/ome && \\\n        mkdir -p ${DIR} && \\\n        cd ${DIR} && \\\n        curl -sLf https://github.com/AirenSoft/OvenMediaEngine/archive/${OME_VERSION}.tar.gz | tar -xz --strip-components=1 && \\\n        cd src && \\\n        make release\n\n## Make running environment\nRUN \\\n        DIR=/tmp/ome && \\\n        cd ${DIR} && \\\n        cd src && \\\n        mkdir -p ${PREFIX}/bin/origin_conf && \\\n        mkdir -p ${PREFIX}/bin/edge_conf && \\\n        strip ./bin/RELEASE/OvenMediaEngine && \\\n        cp ./bin/RELEASE/OvenMediaEngine ${PREFIX}/bin/ && \\\n        cp ../misc/conf_examples/Origin.xml ${PREFIX}/bin/origin_conf/Server.xml && \\\n        cp ../misc/conf_examples/Logger.xml ${PREFIX}/bin/origin_conf/Logger.xml && \\\n        cp ../misc/conf_examples/Edge.xml ${PREFIX}/bin/edge_conf/Server.xml && \\\n        cp ../misc/conf_examples/Logger.xml ${PREFIX}/bin/edge_conf/Logger.xml && \\\n        rm -rf ${DIR}\n\nFROM\tbase AS release\nMAINTAINER  Jeheon Han <getroot@airensoft.com>\n\nWORKDIR         /opt/ovenmediaengine/bin\nEXPOSE          80/tcp 8080/tcp 1935/tcp 3333/tcp 3334/tcp 10000-10010/udp 9000/tcp\nCOPY            --from=build /opt/ovenmediaengine /opt/ovenmediaengine\n# Default run as Origin mode\nCMD             [\"/opt/ovenmediaengine/bin/OvenMediaEngine\", \"-c\", \"origin_conf\"]\n"
}