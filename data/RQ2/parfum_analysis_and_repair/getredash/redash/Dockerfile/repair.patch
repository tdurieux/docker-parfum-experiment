diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/getredash/redash/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/getredash/redash/Dockerfile/repaired.Dockerfile
index 68f3cf9..ee1dd32 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/getredash/redash/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/getredash/redash/Dockerfile/repaired.Dockerfile
@@ -1,6 +1,6 @@
 FROM node:14.17 as frontend-builder
 
-RUN npm install --global --force yarn@1.22.10
+RUN npm install --global --force yarn@1.22.10 && npm cache clean --force;
 
 # Controls whether to build the frontend assets
 ARG skip_frontend_build
@@ -66,13 +66,13 @@ RUN apt-get update && \
 ARG TARGETPLATFORM
 ARG databricks_odbc_driver_url=https://databricks.com/wp-content/uploads/2.6.10.1010-2/SimbaSparkODBC-2.6.10.1010-2-Debian-64bit.zip
 RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
-    curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
-    && curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list \
+    curl -f https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
+    && curl -f https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list \
     && apt-get update \
     && ACCEPT_EULA=Y apt-get install  -y --no-install-recommends msodbcsql17 \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/* \
-    && curl "$databricks_odbc_driver_url" --output /tmp/simba_odbc.zip \
+    && curl -f "$databricks_odbc_driver_url" --output /tmp/simba_odbc.zip \
     && chmod 600 /tmp/simba_odbc.zip \
     && unzip /tmp/simba_odbc.zip -d /tmp/ \
     && dpkg -i /tmp/SimbaSparkODBC-*/*.deb \
@@ -87,17 +87,19 @@ ENV PIP_DISABLE_PIP_VERSION_CHECK=1
 ENV PIP_NO_CACHE_DIR=1
 
 # rollback pip version to avoid legacy resolver problem
-RUN pip install pip==20.2.4;
+RUN pip install --no-cache-dir pip==20.2.4;
 
 # We first copy only the requirements file, to avoid rebuilding on every file change.
 COPY requirements_all_ds.txt ./
-RUN if [ "x$skip_ds_deps" = "x" ] ; then pip install -r requirements_all_ds.txt ; else echo "Skipping pip install -r requirements_all_ds.txt" ; fi
+RUN if [ "x$skip_ds_deps" = "x" ] ; then \
+ pip install --no-cache-dir -r requirements_all_ds.txt; else echo "Skipping pip install -r requirements_all_ds.txt" ; fi
 
 COPY requirements_bundles.txt requirements_dev.txt ./
-RUN if [ "x$skip_dev_deps" = "x" ] ; then pip install -r requirements_dev.txt ; fi
+RUN if [ "x$skip_dev_deps" = "x" ] ; then \
+ pip install --no-cache-dir -r requirements_dev.txt; fi
 
 COPY requirements.txt ./
-RUN pip install -r requirements.txt
+RUN pip install --no-cache-dir -r requirements.txt
 
 COPY --chown=redash . /app
 COPY --from=frontend-builder --chown=redash /frontend/client/dist /app/client/dist