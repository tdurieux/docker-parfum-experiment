{
  "startTime": 1674248385745,
  "endTime": 1674248386780,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 1,
        "columnEnd": 90
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 1,
        "columnEnd": 90
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Note: This is currently designed to simplify development\n# To get a smaller docker image, there should be 2 images generated, in 2 stages.\n\nFROM rustlang/rust:nightly\n\n\nARG PROFILE=release\nWORKDIR /frontier\n\n# Upcd dates core parts\nRUN apt-get update -y && \\\n\tapt-get install --no-install-recommends -y cmake pkg-config libssl-dev git gcc build-essential clang libclang-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install rust wasm. Needed for substrate wasm engine\nRUN rustup target add wasm32-unknown-unknown\n\n# Download Frontier repo\nRUN git clone https://github.com/paritytech/frontier /frontier\nRUN cd /frontier && git submodule init && git submodule update\n\n# Download rust dependencies and build the rust binary\nRUN cargo build \"--$PROFILE\"\n\n# 30333 for p2p traffic\n# 9933 for RPC call\n# 9944 for Websocket\n# 9615 for Prometheus (metrics)\nEXPOSE 30333 9933 9944 9615\n\n\nENV PROFILE ${PROFILE}\n\n# The execution will re-compile the project to run it\n# This allows to modify the code and not have to re-compile the\n# dependencies.\nCMD cargo run \"--$PROFILE\" -- --dev\n"
}