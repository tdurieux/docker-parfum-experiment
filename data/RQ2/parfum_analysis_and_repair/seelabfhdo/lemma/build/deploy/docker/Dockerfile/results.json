{
  "startTime": 1674216288149,
  "endTime": 1674216289162,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM maven:3.6.3-openjdk-11-slim\nCOPY --from=python:3.6.9 / /\nRUN apt-get update && apt-get install --no-install-recommends -y sshpass && rm -rf /var/lib/apt/lists/*;\n\n# Enable specification of User ID on Jenkins system. That is, because Jenkins\n# always invokes the container with the \"jenkins\" user and ssh requires the user\n# with the Jenkins User ID to exist in passwd. We therefore add the \"jenkins\"\n# user with the Jenkins User ID to the container, if possible.\nARG JENKINS_UID\nRUN if [ \"x$JENKINS_UID\" != \"x\" ]; \\\n    then adduser jenkins --uid=$JENKINS_UID; \\\nfi\n\n# Add settings.xml to point to Maven repository (cf. \"../../docker/Dockerfile\").\n# To enable reuse of the settings.xml in \"../../docker/\", we expect the file's\n# contents to be provided as a Docker build-arg\nARG MAVEN_SETTINGS_XML\nRUN if [ \"x$MAVEN_SETTINGS_XML\" = \"x\" ]; \\\n    then echo \"To build the image, \"\\\n\"you need to set the MAVEN_SETTINGS_XML Docker build-arg\" && exit 1; \\\nfi\n\nRUN echo \"$MAVEN_SETTINGS_XML\" > /usr/share/maven/conf/settings.xml\nRUN chmod 777 /usr/share/maven/conf/settings.xml\n\n# Add Python script to adapt Maven's settings.xml to contain user and password\n# for artifact deployment\nRUN pip install --no-cache-dir lxml\nCOPY maven_settings_configurator.py /usr/share/maven/\n\n# Prepare Gradle like in \"../../docker/Dockerfile\". To enable reuse of the\n# gradle.properties in \"../../docker/\", we expect the file's contents to be\n# provided as a Docker build-arg\nARG GRADLE_PROPERTIES\nRUN if [ \"x$GRADLE_PROPERTIES\" = \"x\" ]; \\\n    then echo \"To build the image, \"\\\n\"you need to set the GRADLE_PROPERTIES Docker build-arg\" && exit 1; \\\nfi\n\nRUN mkdir -p /usr/share/gradle/conf/\nRUN echo \"$GRADLE_PROPERTIES\" > /usr/share/gradle/conf/gradle.properties\nENV GRADLE_USER_HOME /root/.gradle\n\n# Entrypoint\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s /usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nCMD [\"mvn\"]"
}