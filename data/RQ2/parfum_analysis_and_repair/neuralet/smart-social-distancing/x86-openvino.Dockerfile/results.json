{
  "startTime": 1674250364296,
  "endTime": 1674250365907,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 72,
        "columnEnd": 104
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM openvino/ubuntu18_runtime\nUSER root\n\n# The `python3-opencv` package isn't built with gstreamer. So we need to manually build opencv.\nARG OPENCV_VERSION=4.5.3\n# http://amritamaz.net/blog/opencv-config\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        curl \\\n        git \\\n        gstreamer1.0-plugins-bad \\\n        gstreamer1.0-plugins-good \\\n        gstreamer1.0-plugins-ugly \\\n        gstreamer1.0-vaapi \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libsm6 \\\n        libswscale-dev \\\n        libxext6 \\\n        libxrender-dev \\\n        libpython3.6-dev \\\n        mesa-va-drivers \\\n        python3-dev \\\n        python3-numpy \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && cd /tmp/ \\\n    && curl -f -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz -o opencv.tar.gz \\\n    && tar zxvf opencv.tar.gz && rm opencv.tar.gz \\\n    && cd /tmp/opencv-${OPENCV_VERSION} \\\n    && mkdir build \\\n    && cd build \\\n    && cmake \\\n        -DBUILD_opencv_python3=yes \\\n        -DPYTHON_EXECUTABLE=$(which python3) \\\n        -DCMAKE_BUILD_TYPE=RELEASE \\\n        -DBUILD_TESTS=OFF \\\n        -DBUILD_PERF_TESTS=OFF \\\n        -DBUILD_EXAMPLES=OFF \\\n        -DINSTALL_TESTS=OFF \\\n        -DBUILD_opencv_apps=OFF \\\n        -DBUILD_DOCS=OFF \\\n        ../ \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf opencv-${OPENCV_VERSION} \\\n    && apt-get purge -y \\\n        cmake \\\n        git \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libxrender-dev \\\n        python3-dev \\\n    && apt-get autoremove -y\n\n# https://askubuntu.com/questions/909277/avoiding-user-interaction-with-tzdata-when-installing-certbot-in-a-docker-contai\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY api/requirements.txt /\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        tzdata \\\n        pkg-config \\\n        python3-dev \\\n        python3-numpy \\\n        python3-pillow \\\n        python3-pip \\\n        python3-scipy \\\n        python3-wget \\\n        supervisor \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && python3 -m pip install --upgrade pip setuptools==41.0.0 wheel && pip install --no-cache-dir -r /requirements.txt \\\n    && apt-get purge -y \\\n        python3-dev \\\n    && apt-get autoremove -y\n\n# Remove the opencv which is included in Openvino and is incompatible with globally-installed gstreamer\nRUN rm -rf /opt/intel/openvino/opencv /opt/intel/openvino/python/cv2.* /opt/intel/openvino/python/python3/cv2.*\n\nADD docker/x86-openvino/openvino_setupvars.py /opt/openvino_setupvars.py\nENV DEV_ALLOW_ALL_ORIGINS=true\nENV CONFIG_FILE=config-x86-openvino.ini\n\nCOPY . /repo\nWORKDIR /repo\n\nHEALTHCHECK --interval=30s --retries=2 --start-period=15s CMD bash healthcheck.bash\nCMD env `python3 /opt/openvino_setupvars.py` supervisord -c supervisord.conf -n\n"
}