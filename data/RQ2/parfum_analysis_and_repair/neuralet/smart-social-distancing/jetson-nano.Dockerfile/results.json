{
  "startTime": 1674254416177,
  "endTime": 1674254417728,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 90,
        "columnStart": 72,
        "columnEnd": 57
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# docker can be installed on the dev board following these instructions:\n# https://docs.docker.com/install/linux/docker-ce/debian/#install-using-the-repository , step 4: arm64\n# 1) build: docker build -f jetson-nano.Dockerfile -t \"neuralet/smart-social-distancing:latest-jetson-nano\" .\n# 2) run: docker run -it --runtime nvidia --privileged -p HOST_PORT:8000 -v \"$PWD/data\":/repo/data neuralet/smart-social-distancing:latest-jetson-nano\n\nFROM nvcr.io/nvidia/l4t-base:r32.3.1\n\nRUN wget https://github.com/Tony607/jetson_nano_trt_tf_ssd/raw/master/packages/jetpack4.3/tensorrt.tar.gz -O /opt/tensorrt.tar.gz\nRUN tar -xzf /opt/tensorrt.tar.gz -C /usr/local/lib/python3.6/dist-packages/ && rm /opt/tensorrt.tar.gz\n\nRUN wget https://github.com/sasikiran/jetson_tx2_trt_ssd/raw/master/libflattenconcat.so -O /opt/libflattenconcat.so\n\n# The `python3-opencv` package is old and doesn't support gstreamer video writer on Debian. So we need to manually build opencv.\nARG OPENCV_VERSION=4.3.0\n# http://amritamaz.net/blog/opencv-config\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        curl \\\n        git \\\n        gstreamer1.0-plugins-bad \\\n        gstreamer1.0-plugins-good \\\n        gstreamer1.0-plugins-ugly \\\n        gstreamer1.0-vaapi \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libsm6 \\\n        libswscale-dev \\\n        libxext6 \\\n        libxrender-dev \\\n        mesa-va-drivers \\\n        python3-dev \\\n        python3-numpy \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && cd /tmp/ \\\n    && curl -f -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz -o opencv.tar.gz \\\n    && tar zxvf opencv.tar.gz && rm opencv.tar.gz \\\n    && cd /tmp/opencv-${OPENCV_VERSION} \\\n    && mkdir build \\\n    && cd build \\\n    && cmake \\\n        -DBUILD_opencv_python3=yes \\\n        -DPYTHON_EXECUTABLE=$(which python3) \\\n        -DCMAKE_BUILD_TYPE=RELEASE \\\n        -DBUILD_TESTS=OFF \\\n        -DBUILD_PERF_TESTS=OFF \\\n        -DBUILD_EXAMPLES=OFF \\\n        -DINSTALL_TESTS=OFF \\\n        -DBUILD_opencv_apps=OFF \\\n        -DBUILD_DOCS=OFF \\\n        ../ \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf opencv-${OPENCV_VERSION} \\\n    && apt-get purge -y \\\n        cmake \\\n        git \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libxrender-dev \\\n    && apt-get autoremove -y\n\n# https://askubuntu.com/questions/909277/avoiding-user-interaction-with-tzdata-when-installing-certbot-in-a-docker-contai\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY api/requirements.txt /\n\n# Installing pycuda using already-built wheel is a lot faster\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        tzdata \\\n        libboost-python-dev \\\n        libboost-thread-dev \\\n        pkg-config \\\n        python3-dev \\\n        python3-matplotlib \\\n        python3-numpy \\\n        python3-pillow \\\n        python3-pip \\\n        python3-scipy \\\n        python3-wget \\\n        supervisor \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && ln -sf $(which gcc) /usr/local/bin/gcc-aarch64-linux-gnu \\\n    && ln -sf $(which g++) /usr/local/bin/g++-aarch64-linux-gnu \\\n    && wget https://github.com/Tony607/jetson_nano_trt_tf_ssd/raw/master/packages/jetpack4.3/pycuda-2019.1.2-cp36-cp36m-linux_aarch64.whl -O /tmp/pycuda-2019.1.2-cp36-cp36m-linux_aarch64.whl \\\n    && python3 -m pip install --upgrade pip setuptools==41.0.0 wheel && pip install --no-cache-dir -r requirements.txt \\\n        /tmp/pycuda-2019.1.2-cp36-cp36m-linux_aarch64.whl \\\n    && rm /tmp/pycuda-2019.1.2-cp36-cp36m-linux_aarch64.whl \\\n    && apt-get purge -y \\\n        pkg-config \\\n    && apt-get autoremove -y\n\nENV DEV_ALLOW_ALL_ORIGINS=true\nENV CONFIG_FILE=config-jetson-nano.ini\nENV OPENBLAS_CORETYPE=armv8\n\nCOPY . /repo/\nWORKDIR /repo\nHEALTHCHECK --interval=30s --retries=2 --start-period=15s CMD bash healthcheck.bash\nCMD supervisord -c supervisord.conf -n\n"
}