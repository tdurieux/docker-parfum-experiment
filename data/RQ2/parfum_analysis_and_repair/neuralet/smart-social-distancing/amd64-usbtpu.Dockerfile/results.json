{
  "startTime": 1674253142367,
  "endTime": 1674253143459,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 88,
        "columnStart": 72,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 30,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 30,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# docker can be installed on the dev board following these instructions:\n# https://docs.docker.com/install/linux/docker-ce/debian/#install-using-the-repository , step 4: x86_64 / amd64\n# 1) build: docker build -f amd64-usbtpu.Dockerfile -t \"neuralet/smart-social-distancing:latest-amd64\" .\n# 2) run: docker run -it --privileged -p HOST_PORT:8000 -v \"$PWD/data\":/repo/data neuralet/smart-social-distancing:latest-amd64\n\nFROM amd64/debian:buster\n\nRUN apt-get update && apt-get install --no-install-recommends -y wget gnupg usbutils \\\n    && rm -rf /var/lib/apt/lists \\\n    && wget -qO - https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && rm -rf /var/lib/apt/lists/*;\n\nRUN echo \"deb https://packages.cloud.google.com/apt coral-edgetpu-stable main\" | tee /etc/apt/sources.list.d/coral-edgetpu.list\n\n# The `python3-opencv` package isn't built with gstreamer on Ubuntu. So we need to manually build opencv.\nARG OPENCV_VERSION=4.3.0\n# http://amritamaz.net/blog/opencv-config\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        curl \\\n        git \\\n        gstreamer1.0-plugins-bad \\\n        gstreamer1.0-plugins-good \\\n        gstreamer1.0-plugins-ugly \\\n        gstreamer1.0-vaapi \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libsm6 \\\n        libswscale-dev \\\n        libxext6 \\\n        libxrender-dev \\\n        mesa-va-drivers \\\n        python3-dev \\\n        python3-numpy \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && cd /tmp/ \\\n    && curl -f -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz -o opencv.tar.gz \\\n    && tar zxvf opencv.tar.gz && rm opencv.tar.gz \\\n    && cd /tmp/opencv-${OPENCV_VERSION} \\\n    && mkdir build \\\n    && cd build \\\n    && cmake \\\n        -DBUILD_opencv_python3=yes \\\n        -DPYTHON_EXECUTABLE=$(which python3) \\\n        -DCMAKE_BUILD_TYPE=RELEASE \\\n        -DBUILD_TESTS=OFF \\\n        -DBUILD_PERF_TESTS=OFF \\\n        -DBUILD_EXAMPLES=OFF \\\n        -DINSTALL_TESTS=OFF \\\n        -DBUILD_opencv_apps=OFF \\\n        -DBUILD_DOCS=OFF \\\n        ../ \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf opencv-${OPENCV_VERSION} \\\n    && apt-get purge -y \\\n        cmake \\\n        git \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libxrender-dev \\\n        python3-dev \\\n    && apt-get autoremove -y\n\n# https://askubuntu.com/questions/909277/avoiding-user-interaction-with-tzdata-when-installing-certbot-in-a-docker-contai\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY api/requirements.txt /\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        tzdata \\\n        pkg-config \\\n        python3-dev \\\n        python3-numpy \\\n        python3-pillow \\\n        python3-pip \\\n        python3-scipy \\\n        python3-wget \\\n        python3-pytest \\\n\tpython3-requests \\\n        build-essential \\\n        libedgetpu1-std \\\n        supervisor \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && python3 -m pip install --upgrade pip setuptools==41.0.0 wheel && pip install --no-cache-dir -r /requirements.txt \\\n\thttps://dl.google.com/coral/python/tflite_runtime-2.1.0.post1-cp37-cp37m-linux_x86_64.whl \\\n    && apt-get purge -y \\\n        build-essential \\\n        python3-dev \\\n    && apt-get autoremove -y\n\nENV DEV_ALLOW_ALL_ORIGINS=true\n\nRUN cd / && apt-get update && apt-get install --no-install-recommends -y git python3-edgetpu && git clone \\\n    https://github.com/google-coral/project-posenet.git && cd project-posenet && \\\n    git checkout f74ff7973e4b4349aaad9f50c7f0bc77fe33775b && sed -i 's/sudo / /g' \\\n    /project-posenet/install_requirements.sh && sh /project-posenet/install_requirements.sh && rm -rf /var/lib/apt/lists/*;\nENV PYTHONPATH=$PYTHONPATH:/project-posenet\nENV CONFIG_FILE=config-coral.ini\n\nCOPY . /repo\nWORKDIR /repo\nHEALTHCHECK --interval=30s --retries=2 --start-period=15s CMD bash healthcheck.bash\nCMD supervisord -c supervisord.conf -n\n"
}