{
  "startTime": 1674249172529,
  "endTime": 1674249173600,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 66,
        "columnEnd": 98
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 56,
        "columnEnd": 119
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 3,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 22,
        "columnEnd": 97
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 22,
        "columnEnd": 97
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvcr.io/nvidia/tensorrt:20.03-py3\n\n# The `python3-opencv` package isn't built with gstreamer on Ubuntu. So we need to manually build opencv.\nARG OPENCV_VERSION=4.3.0\n# http://amritamaz.net/blog/opencv-config\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        curl \\\n        git \\\n        gstreamer1.0-plugins-bad \\\n        gstreamer1.0-plugins-good \\\n        gstreamer1.0-plugins-ugly \\\n        gstreamer1.0-vaapi \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libsm6 \\\n        libswscale-dev \\\n        libxext6 \\\n        libxrender-dev \\\n        mesa-va-drivers \\\n        python3-dev \\\n        python3-numpy \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && cd /tmp/ \\\n    && curl -f -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz -o opencv.tar.gz \\\n    && tar zxvf opencv.tar.gz && rm opencv.tar.gz \\\n    && cd /tmp/opencv-${OPENCV_VERSION} \\\n    && mkdir build \\\n    && cd build \\\n    && cmake \\\n        -DBUILD_opencv_python3=yes \\\n        -DPYTHON_EXECUTABLE=$(which python3) \\\n        -DCMAKE_BUILD_TYPE=RELEASE \\\n        -DBUILD_TESTS=OFF \\\n        -DBUILD_PERF_TESTS=OFF \\\n        -DBUILD_EXAMPLES=OFF \\\n        -DINSTALL_TESTS=OFF \\\n        -DBUILD_opencv_apps=OFF \\\n        -DBUILD_DOCS=OFF \\\n        ../ \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf opencv-${OPENCV_VERSION} \\\n    && apt-get purge -y \\\n        cmake \\\n        git \\\n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libxrender-dev \\\n        python3-dev \\\n    && apt-get autoremove -y\n\n# https://askubuntu.com/questions/909277/avoiding-user-interaction-with-tzdata-when-installing-certbot-in-a-docker-contai\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY api/requirements.txt /\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        tzdata \\\n        pkg-config \\\n        python3-dev \\\n        python3-numpy \\\n        python3-pillow \\\n        python3-pip \\\n        python3-scipy \\\n        python3-wget \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && python3 -m pip install --upgrade pip setuptools==41.0.0 && pip install --no-cache-dir -r /requirements.txt \\\n    && apt-get purge -y \\\n        python3-dev \\\n    && apt-get autoremove -y\n\nRUN apt-get update && apt-get install --no-install-recommends -y python3-dev && pip3 install --no-cache-dir torch==1.5.1 torchvision==0.6.1 openpifpaf==0.12a4 && rm -rf /var/lib/apt/lists/*;\nRUN pip3 install --no-cache-dir tensorflow==2.1.0 Keras-Applications==1.0.8 Keras-Preprocessing==1.1.0\nRUN pip3 install --no-cache-dir h5py==2.10.0\n\n\nRUN apt-get update && apt install --no-install-recommends -y git autoconf automake libtool curl make g++ unzip supervisor && rm -rf /var/lib/apt/lists/*;\n\n\nRUN git clone https://github.com/protocolbuffers/protobuf.git \\\n&& cd protobuf \\\n&& git checkout v3.17.3 \\\n&& git submodule update --init --recursive \\\n&& chmod +x autogen.sh \\\n&& ./autogen.sh \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n&& make -j$(nproc) \\\n&& make install \\\n&& ldconfig\n\nRUN git clone https://github.com/onnx/onnx-tensorrt.git \\\n&& cd onnx-tensorrt \\\n&& git checkout 7.0 \\\n&& git submodule update --init --recursive \\\n&& mkdir build \\\n&& cd build \\\n&& cmake .. -DTENSORRT_ROOT=/usr/src/tensorrt/ \\\n&& make -j$(nproc) \\\n&& make install\n\nENV DEV_ALLOW_ALL_ORIGINS=true\nENV CONFIG_FILE=config-x86-gpu-tensorrt.ini\n\nCOPY . /repo\nWORKDIR /repo\nCMD supervisord -c supervisord.conf -n\n"
}