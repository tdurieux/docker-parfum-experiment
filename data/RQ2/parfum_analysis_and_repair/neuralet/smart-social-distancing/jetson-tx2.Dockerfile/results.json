{
  "startTime": 1674253764311,
  "endTime": 1674253765719,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 72,
        "columnEnd": 104
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 7,
        "columnEnd": 167
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 7,
        "columnEnd": 121
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 3,
        "columnEnd": 14
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 18,
        "columnEnd": 164
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 22,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 18,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 18,
        "columnEnd": 164
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 22,
        "columnEnd": 97
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 18,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# See here for installing Docker for Nvidia on Jetson devices:\n# https://github.com/NVIDIA/nvidia-docker/wiki/NVIDIA-Container-Runtime-on-Jetson\n\nFROM nvcr.io/nvidia/l4t-pytorch:r32.4.4-pth1.6-py3\n\n# The `python3-opencv` package is old and doesn't support gstreamer video writer on Debian. So we need to manually build opencv.\nARG OPENCV_VERSION=4.3.0\n# http://amritamaz.net/blog/opencv-config\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        curl \\\n        git && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tca-certificates \\ \n\tgstreamer1.0-plugins-bad \\\n        gstreamer1.0-plugins-good \\\n        gstreamer1.0-plugins-ugly \\\n        gstreamer1.0-vaapi \\\n        libavcodec-dev \\\n        libavformat-dev && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install -y --no-install-recommends libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libsm6 \\\n        libswscale-dev \\\n        libxext6 \\\n        libxrender-dev \\\n        mesa-va-drivers \\\n        python3-dev \\\n        python3-numpy \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && cd /tmp/ \\\n    && curl -f -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz -o opencv.tar.gz \\\n    && tar zxvf opencv.tar.gz && rm opencv.tar.gz \\\n    && cd /tmp/opencv-${OPENCV_VERSION} \\\n    && mkdir build \\\n    && cd build \\\n    && cmake \\\n        -DBUILD_opencv_python3=yes \\\n        -DPYTHON_EXECUTABLE=$(which python3) \\\n        -DCMAKE_BUILD_TYPE=RELEASE \\\n        -DBUILD_TESTS=OFF \\\n        -DBUILD_PERF_TESTS=OFF \\\n        -DBUILD_EXAMPLES=OFF \\\n        -DINSTALL_TESTS=OFF \\\n        -DBUILD_opencv_apps=OFF \\\n        -DBUILD_DOCS=OFF \\\n        ../ \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf opencv-${OPENCV_VERSION} \\\n    && apt-get purge -y \\  \n        libgstreamer-plugins-base1.0-dev \\\n        libgstreamer1.0-dev \\\n        libxrender-dev \\\n    && apt-get autoremove -y\n\n# https://askubuntu.com/questions/909277/avoiding-user-interaction-with-tzdata-when-installing-certbot-in-a-docker-contai\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY api/requirements.txt /\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        tzdata \\\n        libboost-python-dev \\\n        libboost-thread-dev \\\n        pkg-config \\\n        python3-dev \\\n        python3-matplotlib \\\n        python3-numpy \\\n        python3-pillow \\\n        python3-pip \\\n        python3-scipy \\\n        python3-wget \\\n        supervisor \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN ln -sf $(which gcc) /usr/local/bin/gcc-aarch64-linux-gnu \\\n    && ln -sf $(which g++) /usr/local/bin/g++-aarch64-linux-gnu \\\n    && python3 -m pip install --upgrade pip setuptools==41.0.0 wheel && pip install --no-cache-dir -r /requirements.txt \\\n    && apt-get purge -y \\\n        pkg-config \\\n    && apt-get autoremove -y\n\nRUN pip3 install --no-cache-dir openpifpaf==0.12a4\n\nRUN apt update && apt-get install --no-install-recommends -y pkg-config libhdf5-100 libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran \\\n    && pip3 install --no-cache-dir -U pip testresources setuptools==49.6.0 \\\n    && pip3 install --no-cache-dir -U numpy==1.16.1 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures protobuf pybind11 \\\n    && pip3 install --no-cache-dir --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v44 tensorflow==2.1.0 && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && apt install --no-install-recommends -y git autoconf automake libtool curl make g++ unzip supervisor && rm -rf /var/lib/apt/lists/*;\n\n\nRUN git clone https://github.com/protocolbuffers/protobuf.git \\\n&& cd protobuf \\\n&& git submodule update --init --recursive \\\n&& chmod +x autogen.sh \\\n&& ./autogen.sh \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n&& make -j$(nproc) \\\n&& make install \\\n&& ldconfig\n\nRUN apt update && apt-get install --no-install-recommends -y libssl-dev && wget https://github.com/Kitware/CMake/releases/download/v3.19.1/cmake-3.19.1.tar.gz \\\n    && tar -xf cmake-3.19.1.tar.gz \\\n    && cd cmake-3.19.1 \\\n    && ./bootstrap \\\n    && make -j$(nproc) \\\n    && make install && rm cmake-3.19.1.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n\nRUN git clone https://github.com/onnx/onnx-tensorrt.git \\\n&& cd onnx-tensorrt \\\n&& git checkout 7.0 \\\n&& git submodule update --init --recursive \\\n&& mkdir build \\\n&& cd build \\\n&& cmake .. -DTENSORRT_ROOT=/usr/src/tensorrt/ \\\n&& make -j$(nproc) \\\n&& make install && cd ../.. \\\n&& rm -rf onnx-tensorrt\n\n\nENV DEV_ALLOW_ALL_ORIGINS=true\nENV CONFIG_FILE=config-jetson-tx2.ini\n\nCOPY . /repo/\nWORKDIR /repo\nHEALTHCHECK --interval=30s --retries=2 --start-period=15s CMD bash healthcheck.bash\nCMD supervisord -c supervisord.conf -n\n"
}