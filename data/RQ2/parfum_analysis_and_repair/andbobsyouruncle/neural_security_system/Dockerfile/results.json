{
  "startTime": 1674219642611,
  "endTime": 1674219644379,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 22,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nENV http_proxy $HTTP_PROXY\nENV https_proxy $HTTPS_PROXY\nARG DOWNLOAD_LINK=http://registrationcenter-download.intel.com/akdlm/irc_nas/16345/l_openvino_toolkit_p_2020.1.023.tgz\nARG INSTALL_DIR=/opt/intel/openvino\nARG TEMP_DIR=/tmp/openvino_installer\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    wget \\\n    cpio \\\n    sudo \\\n    lsb-release && \\\n    rm -rf /var/lib/apt/lists/*\nRUN mkdir -p $TEMP_DIR && cd $TEMP_DIR && \\\n    wget -c $DOWNLOAD_LINK && \\\n    tar xf l_openvino_toolkit*.tgz && \\\n    cd l_openvino_toolkit* && \\\n    sed -i 's/decline/accept/g' silent.cfg && \\\n    sed -i 's/=DEFAULTS/=intel-openvino-ie-sdk-ubuntu-bionic__x86_64;intel-openvino-ie-rt-cpu-ubuntu-bionic__x86_64;intel-openvino-ie-rt-vpu-ubuntu-bionic__x86_64;intel-openvino-model-optimizer__x86_64;intel-openvino-opencv-lib-ubuntu-bionic__x86_64/g' silent.cfg && \\\n    ./install.sh -s silent.cfg && \\\n    rm -rf $TEMP_DIR && rm l_openvino_toolkit*.tgz\nRUN $INSTALL_DIR/install_dependencies/install_openvino_dependencies.sh\n# build Inference Engine samples\nRUN mkdir $INSTALL_DIR/deployment_tools/inference_engine/samples/cpp/build && cd $INSTALL_DIR/deployment_tools/inference_engine/samples/cpp/build && \\\n    /bin/bash -c \"source $INSTALL_DIR/bin/setupvars.sh && cmake .. && make -j1\"\n\nWORKDIR $INSTALL_DIR/deployment_tools/model_optimizer/install_prerequisites\nRUN ./install_prerequisites.sh\n\nRUN apt-get update && apt-get install -y --no-install-recommends dh-autoreconf unzip && \\\n    cd /tmp/ && \\\n    wget https://github.com/libusb/libusb/archive/v1.0.22.zip && \\\n    unzip v1.0.22.zip && cd libusb-1.0.22 && \\\n    ./bootstrap.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-udev --enable-shared && \\\n    make -j4 && make install && \\\n    rm -rf /tmp/* && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    git \\\n    libssl-dev \\\n    libgflags-dev \\\n    build-essential \\\n    gcc \\\n    make \\\n    cmake \\\n    cmake-gui \\\n    cmake-curses-gui && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN cd /usr && git clone https://github.com/eclipse/paho.mqtt.c.git && \\\n    cd /usr/paho.mqtt.c && git checkout v1.3.1 && \\\n    cmake -Bbuild -H. -DPAHO_WITH_SSL=ON -DPAHO_BUILD_SHARED=ON && \\\n    cmake --build build/ --target install && \\\n    ldconfig && \\\n    cd /usr && \\\n    rm -rf /usr/paho.mqtt.c\n\nRUN cd /usr && git clone https://github.com/eclipse/paho.mqtt.cpp && \\\n    cd /usr/paho.mqtt.cpp && git checkout v1.1 && \\\n    cmake -Bbuild -H. -DPAHO_WITH_SSL=ON -DPAHO_BUILD_SHARED=ON && \\\n    cmake --build build/ --target install && \\\n    ldconfig && \\\n    cd /usr && \\\n    rm -rf /usr/paho.mqtt.cpp\n\nRUN cd /usr && git clone https://github.com/jbeder/yaml-cpp.git && \\\n    cd /usr/yaml-cpp/ && git checkout yaml-cpp-0.6.3 && mkdir build && \\\n    cd /usr/yaml-cpp/build && \\\n    cmake -DYAML_BUILD_SHARED_LIBS=ON .. && \\\n    cmake --build ./ --target install && \\\n    ldconfig && \\\n    cd /usr && \\\n    rm -rf /usr/yaml-cpp\n\nRUN pip3 install --no-cache-dir image && \\\n    cd /usr && git clone https://github.com/mystic123/tensorflow-yolo-v3.git && \\\n    cd tensorflow-yolo-v3 && \\\n    git checkout ed60b90 && \\\n    wget https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names && \\\n    wget https://pjreddie.com/media/files/yolov3.weights && \\\n    wget https://pjreddie.com/media/files/yolov3-tiny.weights && \\\n    cp $INSTALL_DIR/deployment_tools/model_optimizer/extensions/front/tf/yolo_v3.json ./ && \\\n    cp $INSTALL_DIR/deployment_tools/model_optimizer/extensions/front/tf/yolo_v3_tiny.json ./ && \\\n\n    mkdir -p /usr/neural_secur ty \\\n    cd /usr/tensorflow-yolo-v3 && \\\n    python3 convert_weights_pb.py --class_names coco.names \\\n      --data_format NHWC --weights_file yolov3-tiny.wei ht \\\n        --output_graph frozen_tiny_yolov3_model.pb --tiny && \\\n    python3 $INSTALL_DIR/deployment_tools/model_optimizer/mo_tf.py \\\n      --input_model frozen_tiny_yolov3_model.pb \\\n      --tensorflow_use_custom_operations_config yo o_ \\\n        --input_shape [1,416,416,3] --data_type=FP16 && \\\n    mv frozen_tiny_yolov3_model.xml /usr/neural_security_system/models/tiny_yolov3/FP16/ && \\\n    mv frozen_tiny_yolov3_model.bin /usr/neural_security_system/models/tiny_yolov3/FP16/ && \\\n    cp coco.names /usr/neural_security_system/models/tiny_yolov3 FP \\\n\n    mkdir -p /usr/neural_security_system/models/tiny_yolov3/FP32 && \\\n    cd /usr/tensorflow-yolo-v3 && \\\n    python3 convert_weights_pb.py --class_names coco.na es \\\n        --data_format NHWC --weights_file yolov3-tiny.weights \\\n      --output_graph frozen_tiny_yolov3_model.pb --tiny && \\\n    python3 $INSTALL_DIR/deployment_tools/model_optimizer/mo_tf.py \\\n      --input_model frozen_tiny_y lo \\\n        --tensorflow_use_custom_operations_config yolo_v3_tiny.json \\\n        --input_shape [1,416,416,3] && \\\n    mv frozen_tiny_yolov3_model.xml /usr/neural_security_system/models/tiny_yolov3/FP32/ && \\\n    mv frozen_tiny_yolov3_model.bin /usr/neural_security_sy te \\\n    cp coco.names /usr/neural_ ec \\\n    \n    mkdir -p /usr/neural_security_system/models/yolov3/FP16 && \\\n    cd /usr/tensorflow-yolo-v3 && \\\n    python3 convert_weights_pb.py --class_names coco.names \\\n      --data_format NHWC --weights_file yolov3.weights \\\n      --output_graph frozen_yolov3_model.pb && \\\n    python3 $INSTALL_DIR/deployment_tools/model_op im \\\n        --input_model frozen_yolov3_model.pb \\\n        --tensorflow_use_custom_operations_config yolo_v3.json \\\n        --input_shape [1,416,416,3] --data_type=FP16 && \\\n    mv frozen_yolov3_model.xml /usr/neural_security_system/ od \\\n    mv frozen_yolov3_model.bin /u \\\n    cp coco.names /usr/neural_security_system/models/yolov3/FP16/frozen_yolov3_model.labels && \\\n\n    mkdir -p /usr/neural_security_system/mo el \\\n    cd /usr/tensorflow-yolo-v3 && \\\n    python3 convert_weights_pb.py --class_names coco.names \\\n      --data_format NHWC --weights_file yolov3.weights \\\n      --output_graph frozen_yolov _m \\\n    python3 $INSTALL_DIR/deployment_tools/model_optimizer/mo_tf.py \\\n        --input_model frozen_yolov3_model.pb \\\n        --tensorflow_use_custom_operations_config yolo_v3.json \\\n        --inp t_ \\\n    mv frozen_yolov3_model.xml /us\n\nENV INSTALL_DIR=$INSTALL_DIR\n\nENV THRESHOLD 0.5\nENV IOU_THRESHOLD 0.4\nENV HUMAN_TIMEOUT 5\n\nWORKDIR /usr/neural_security_system\n\nRUN touch /usr/neural_security_system/cameras.yaml\n\nCOPY . /usr/neural_security_system\n\nRUN /bin/bash -c \"source $INSTALL_DIR/bin/setupvars.sh && make -B\"\n\nCMD [ \"/bin/bash\", \"-c\", \"/usr/neural_security_system/start_neural_security_system.sh\" ]\n"
}