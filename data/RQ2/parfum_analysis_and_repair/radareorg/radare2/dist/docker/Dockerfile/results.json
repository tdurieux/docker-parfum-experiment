{
  "startTime": 1674255886286,
  "endTime": 1674255887133,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 2,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 80,
        "columnStart": 2,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 2,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# r2docker\n# ========\n#\n# Requires 1GB of free disk space\n#\n# Build docker image with:\n# $ docker build -t r2docker:latest .\n# To enable rasm2 plugins based on binutils, pass '--build-arg with_ARCH_as=1' to the build command.\n# Supported ARCHs are arm32, arm64, ppc. Each ARCH should be passed in a separate '--build-arg'.\n#\n# Run the docker image:\n# $ docker images\n# $ export DOCKER_IMAGE_ID=$(docker images --format '{{.ID}}' -f 'label=r2docker')\n# $ docker run -ti --cap-drop=ALL r2docker:latest\n#\n# Once you quit the bash session get the container id with:\n# $ docker ps -a | grep bash\n#\n# To get into that shell again just type:\n# $ docker start -ai <containedid>\n#\n# To share those images:\n# $ docker export <containerid> | xz > container.xz\n# $ xz -d < container.xz | docker import -\n#\n#\n# If you willing to debug a program within Docker, you should run it with CAP_SYS_PTRACE:\n#\n# $ docker run -it --cap-drop=ALL --cap-add=SYS_PTRACE r2docker:latest\n# $ r2 -d /bin/true\n#\n\n# Using debian 10 as base image.\nFROM debian:10\n\n# Label base\nLABEL r2docker latest\n\n# Radare version\nARG R2_VERSION=master\n# R2pipe python version\nARG R2_PIPE_PY_VERSION=1.6.5\n\nARG with_arm32_as\nARG with_arm64_as\nARG with_ppc_as\n\nENV R2_VERSION ${R2_VERSION}\nENV R2_PIPE_PY_VERSION ${R2_PIPE_PY_VERSION}\n\nRUN echo -e \"Building versions:\\n\\\n  R2_VERSION=$R2_VERSION\\n\\\n  R2_PIPE_PY_VERSION=${R2_PIPE_PY_VERSION}\"\n\n# Build radare2 in a volume to minimize space used by build\nVOLUME [\"/mnt\"]\n\n# Install all build dependencies\n# Install bindings\n# Build and install radare2 on master branch\n# Remove all build dependencies\n# Cleanup\nRUN DEBIAN_FRONTEND=noninteractive dpkg --add-architecture i386 && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y \\\n  curl \\\n  wget \\\n  gcc \\\n  git \\\n  bison \\\n  pkg-config \\\n  make \\\n  glib-2.0 \\\n  libc6:i386 \\\n  libncurses5:i386 \\\n  libstdc++6:i386 \\\n  gnupg2 \\\n  python-pip \\\n  ${with_arm64_as:+binutils-aarch64-linux-gnu} \\\n  ${with_arm32_as:+binutils-arm-linux-gnueabi} \\\n  ${with_ppc_as:+binutils-powerpc64le-linux-gnu} && \\\n  pip install --no-cache-dir r2pipe==\"$R2_PIPE_PY_VERSION\" && \\\n  cd /mnt && \\\n  git clone -b \"$R2_VERSION\" -q --depth 1 https://github.com/radareorg/radare2.git && \\\n  cd radare2 && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make && \\\n  make install && \\\n  apt-get install --no-install-recommends -y xz-utils && \\\n  apt-get remove --purge -y \\\n  bison \\\n  python-pip \\\n  glib-2.0 && \\\n  apt-get autoremove --purge -y && \\\n  apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV R2_ARM64_AS=${with_arm64_as:+aarch64-linux-gnu-as}\nENV R2_ARM32_AS=${with_arm32_as:+arm-linux-gnueabi-as}\nENV R2_PPC_AS=${with_ppc_as:+powerpc64le-linux-gnu-as}\n\n# Create non-root user\nRUN useradd -m r2 && \\\n  adduser r2 sudo && \\\n  echo \"r2:r2\" | chpasswd\n\n# Initilise base user\nUSER r2\nWORKDIR /home/r2\nENV HOME /home/r2\n\n# Setup r2pm\nRUN r2pm init && \\\n  r2pm update && \\\n  chown -R r2:r2 /home/r2/.config\n\n# Base command for container\nCMD [\"/bin/bash\"]\n"
}