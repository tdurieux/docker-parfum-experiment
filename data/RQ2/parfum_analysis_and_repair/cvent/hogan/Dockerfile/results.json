{
  "startTime": 1674216825815,
  "endTime": 1674216826431,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We need to use the Rust build image, because\n# we need the Rust compile and Cargo tooling\nFROM clux/muslrust:stable as build\n\n# Install cmake as it is not included in muslrust, but is needed by libssh2-sys\nRUN apt-get update && apt-get install -y \\\n  cmake \\\n  --no-install-recommends && \\\n  rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n# Creates a dummy project used to grab dependencies\nRUN USER=root cargo init --bin\n\n# Copies over *only* your manifests\nCOPY ./Cargo.* ./\n\n# Builds your dependencies and removes the\n# fake source code from the dummy project\nRUN cargo build --release\nRUN rm src/*.rs\nRUN rm target/x86_64-unknown-linux-musl/release/hogan\n\n# Copies only your actual source code to\n# avoid invalidating the cache at all\nCOPY ./src ./src\n\n# Builds again, this time it'll just be\n# your actual source files being built\nRUN cargo build --release\n\nFROM alpine:latest as certs\nRUN apk --update --no-cache add ca-certificates\n\n# Create a new stage with a minimal image\n# because we already have a binary built\nFROM alpine:latest\n\nRUN apk --no-cache add git openssh\n\n# Copies standard SSL certs from the \"build\" stage\nCOPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\n\n# Copies the binary from the \"build\" stage\nCOPY --from=build /app/target/x86_64-unknown-linux-musl/release/hogan /bin/\n\n# Configures the startup!\nENTRYPOINT [\"/bin/hogan\"]\n"
}