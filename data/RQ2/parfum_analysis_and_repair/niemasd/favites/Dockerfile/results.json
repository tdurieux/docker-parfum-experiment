{
  "startTime": 1674251727553,
  "endTime": 1674251729027,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 252
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 252
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FAVITES minimal docker image using Ubuntu base\nFROM ubuntu:20.04\nMAINTAINER Niema Moshiri <niemamoshiri@gmail.com>\n\n# Set up environment\nRUN apt-get update && apt-get -y upgrade && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y autoconf bison curl default-jre flex git gsl-bin libcurl4-openssl-dev libgsl0-dev libmodule-install-perl libncurses5-dev libncursesw5-dev libssl-dev libtool python3 python3-pip unzip wget zlib1g-dev && rm -rf /var/lib/apt/lists/*;\nRUN mkdir -p /etc/perl/CPAN && echo -e \"'urllist' => [\\n    q[http://mirror.bhoovd.com/CPAN/],\\n    q[http://cpan.develooper.com/],\\n    q[http://cpan.cs.utah.edu/]\\n],\" >> /etc/perl/CPAN/Config.pm\nRUN echo -e \"y\\nexit\\n\" | cpan && cpan App::cpanminus && cpanm --force Bio::Perl\n\n# Set up Python 3 and modules\nRUN pip3 install --no-cache-dir dendropy && \\\n    pip3 install --no-cache-dir treeswift && \\\n    pip3 install --no-cache-dir treesap && \\\n    pip3 install --no-cache-dir networkx && \\\n    pip3 install --no-cache-dir numpy && \\\n    pip3 install --no-cache-dir pandas && \\\n    pip3 install --no-cache-dir scipy && \\\n    pip3 install --no-cache-dir pyvolve\n\n# Set up ART (MountRainier-2016-06-05)\nRUN wget -O- \"https://github.com/niemasd/FAVITES/blob/master/dependencies/artsrcmountrainier2016.06.05linux.tgz?raw=true\" | tar xz && \\\n    cd art_src_MountRainier_Linux && make && mv art_* /usr/local/bin && cd .. && rm -rf art_src_MountRainier_Linux\n\n# Set up DWGSIM\nRUN git clone --recursive https://github.com/nh13/DWGSIM.git && \\\n    cd DWGSIM && make && mv dwgsim* /usr/local/bin && cd .. && rm -rf DWGSIM\n\n# Set up GEMF\nRUN git clone https://github.com/niemasd/GEMF.git && \\\n    cd GEMF && make && mv GEMF /usr/local/bin && cd .. && rm -rf GEMF\n\n# Set up Grinder\nRUN wget --no-check-certificate -qO- https://tenet.dl.sourceforge.net/project/biogrinder/biogrinder/Grinder-0.5.4/Grinder-0.5.4.tar.gz | tar -xz && \\\n    cd Grinder* && echo -e \"y\\n\" | perl \"Makefile.PL\" && echo -e \"yes\\n\" | make && make install && cd .. && rm -rf Grinder*\n\n# Set up HMMER\nRUN curl -f https://eddylab.org/software/hmmer3/3.1b2/hmmer-3.1b2-linux-intel-x86_64.tar.gz | tar xz && \\\n    mv hmmer*/binaries/* /usr/local/bin && rm -rf hmmer*\n\n# Set up Seq-Gen\nRUN git clone https://github.com/rambaut/Seq-Gen.git && \\\n    cd Seq-Gen/source && make && mv seq-gen /usr/local/bin && cd ../.. && rm -rf Seq-Gen\n\n# Set up Dual-Birth Simulator\nRUN git clone https://github.com/niemasd/Dual-Birth-Simulator.git && \\\n    cd Dual-Birth-Simulator && make && mv dualbirth /usr/local/bin && mv yule /usr/local/bin && cd .. && rm -rf Dual-Birth-Simulator\n\n# Set up Newick Utilities\nRUN wget https://github.com/tjunier/newick_utils/archive/refs/heads/master.zip && \\\n    unzip master.zip && \\\n    cd newick_utils-master && \\\n    autoreconf -fi && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf master.zip newick_utils-master\n\n# Set up msms\nRUN wget https://www.mabs.at/ewing/msms/msms3.2rc-b163.zip && unzip msms3.2rc-b163.zip && \\\n    mv msms/lib/* /usr/local/lib && mv msms/bin/* /usr/local/bin && chmod a+x /usr/local/bin/msms && rm -rf msms*\n\n# Set up SimPhy\nRUN wget -O- \"https://github.com/adamallo/SimPhy/releases/download/v1.0.2/SimPhy_1.0.2.tar.gz\" | tar -zx && \\\n    mv SimPhy_1.0.2/bin/simphy_lnx64 /usr/local/bin/simphy && chmod a+x /usr/local/bin/simphy && \\\n    rm -rf *SimPhy* .*SimPhy*\n\n# Set up FAVITES\nRUN git clone https://github.com/niemasd/FAVITES.git\nENV PATH=\"/FAVITES:${PATH}\"\nENV FAVITES_DOCKER=TRUE\nRUN mkdir -p /FAVITES_MOUNT\n\n# Clean up\nRUN find /usr/lib/python3.*/ -name 'tests' -exec rm -r '{}' + && \\\n    rm -rf /root/.cache && \\\n    rm -rf /tmp/*\n\n# Run FAVITES\nENTRYPOINT [\"/bin/bash\", \"-c\", \"run_favites.py\"]\n"
}