{
  "startTime": 1674252889567,
  "endTime": 1674252890419,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nARG NPROC=4\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        gfortran \\\n        wget \\\n        git \\\n        cmake \\\n        libssl-dev \\\n        libpng-dev \\\n        libfreetype6-dev \\\n        npm \\\n        nodejs \\\n        nodejs-legacy \\\n        libblas-dev \\\n        liblapack-dev \\\n        libatlas-dev \\\n        python2.7-dev \\\n        python-pip \\\n        libboost-all-dev \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN pip install --no-cache-dir --upgrade\\\n\tpip \\\n\tnumpy \\\n\tmatplotlib \\\n\tscipy \\\n\tpandas \\\n        jupyter \\\n        && \\\n    npm install -g configurable-http-proxy && rm -rf ~/.npm && npm cache clean --force;\n\n# Set up time zone\nRUN echo \"America/New_York\" > /etc/timezone && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\nENV PREFIX=/scratch\nRUN mkdir -p ${PREFIX} && \\\n    cd ${PREFIX} && \\\n    mkdir archive && \\\n    mkdir source && \\\n    mkdir build && \\\n    mkdir install\n\nENV BOOST_DIR=/usr\n#ENV LD_LIBRARY_PATH=${BOOST_DIR}/lib:${LD_LIBRARY_PATH}\n\n# install Boost.Numpy\nRUN export BNUMPY_URL=https://github.com/ndarray/Boost.NumPy.git && \\\n    export BNUMPY_NAME=Boost.Numpy && \\\n    export BNUMPY_SOURCE_DIR=${PREFIX}/source/Boost.Numpy && \\\n    export BNUMPY_BUILD_DIR=${PREFIX}/build/Boost.Numpy && \\\n    cd ${PREFIX}/source && \\\n    git clone ${BNUMPY_URL} ${BNUMPY_NAME} && \\\n    mkdir -p ${BNUMPY_BUILD_DIR} && \\\n    cd ${BNUMPY_BUILD_DIR} && \\\n    cmake \\\n\t -D Boost_NO_BOOST_CMAKE=ON \\\n\t -D BOOST_ROOT=${BOOST_DIR} \\\n\t -D CMAKE_INSTALL_PREFIX=${BOOST_DIR} \\\n\t -D LIB_SUFFIX=\"\" \\\n        ${BNUMPY_SOURCE_DIR} && \\\n   make -j${NPROC} install && \\\n   cd ${PREFIX} && \\\n   rm -rf ${BNUMPY_SOURCE_DIR} && \\\n   rm -rf ${BNUMPY_BUILD_DIR}\n\nENV ARMA_DIR=/usr\n#ENV LD_LIBRARY_PATH=${ARMA_DIR}/lib:${LD_LIBRARY_PATH}\n\n# Install armadillo\nRUN export ARMA_URL=http://sourceforge.net/projects/arma/files/armadillo-7.400.1.tar.xz && \\\n    export ARMA_SHA1=c69bdd341dce731e8b7d35b9605e0e4b27e475e6 && \\\n    export ARMA_ARCHIVE=${PREFIX}/archive/armadillo-7.400.1.tar.xz && \\\n    export ARMA_SOURCE_DIR=${PREFIX}/source/armadillo/7.400.1 && \\\n    export ARMA_BUILD_DIR=${PREFIX}/build/armadillo/7.400.1 && \\\n    export ARMA_INSTALL_DIR=/usr && \\\n    wget --quiet ${ARMA_URL} --output-document=${ARMA_ARCHIVE} && \\\n    echo \"${ARMA_SHA1} ${ARMA_ARCHIVE}\" | sha1sum -c && \\\n    mkdir -p ${ARMA_SOURCE_DIR} && \\\n    tar -xf ${ARMA_ARCHIVE} -C ${ARMA_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${ARMA_BUILD_DIR} && \\\n    cd ${ARMA_BUILD_DIR} && \\\n    cmake \\\n\t -D CMAKE_INSTALL_PREFIX=${ARMA_INSTALL_DIR} \\\n\t ${ARMA_SOURCE_DIR} && \\\n\tmake -j${NPROC} install && \\\n    cd ${PREFIX} && \\\n    rm -rf ${ARMA_ARCHIVE} && \\\n    rm -rf ${PREFIX}/source/armadillo && \\\n    rm -rf ${PREFIX}/build/armadillo\n\n# install tini\nRUN export TINI_VERSION=0.10.0 && \\\n    wget --quiet https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini && \\\n    chmod +x tini && \\\n    mv tini /usr/local/bin/"
}