{
  "startTime": 1674248288381,
  "endTime": 1674248289702,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -- stage 1: build static krill with musl libc for alpine\nFROM d_base:latest as build\n\n# Specify what version of krill should be built.\nARG KRILL_VERSION=0.9.0-rc2\n\nRUN apk add --no-cache wget openssl-dev patch rust cargo\n\nWORKDIR /tmp/krill\n\nCOPY krill_cli.patch /\n\nRUN wget \"https://github.com/NLnetLabs/krill/archive/refs/tags/v${KRILL_VERSION}.tar.gz\" -O - | tar -xz --strip-components=1\nRUN patch -p1 < /krill_cli.patch\nRUN cargo build \\\n    --target x86_64-alpine-linux-musl \\\n    --features multi-user \\\n    --release \\\n    --locked\n\n# -- stage 2: create image with the static krill executable\nFROM d_base_supervisor:latest\nCOPY --from=build /tmp/krill/target/x86_64-alpine-linux-musl/release/krill /usr/local/bin/\nCOPY --from=build /tmp/krill/target/x86_64-alpine-linux-musl/release/krillc /usr/local/bin/\nCOPY --from=build /tmp/krill/target/x86_64-alpine-linux-musl/release/krillpubd /usr/local/bin/\nCOPY --from=build /tmp/krill/target/x86_64-alpine-linux-musl/release/krillpubc /usr/local/bin/\n\nRUN apk add --no-cache haproxy curl rsync libgcc ca-certificates openssl openssh-server \\\n    && ssh-keygen -A \\\n    && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config \\\n    && sed -i 's/#PrintMotd yes/PrintMotd no/g' /etc/ssh/sshd_config \\\n    # Unlocks the root user so that ssh login is allowed.\n    && sed -i s/root:!/\"root:*\"/g /etc/shadow \\\n    && mkdir -p /var/run/sshd /root/.ssh \\\n    && chmod 0755 /var/run/sshd \\\n    && mkdir -p /var/krill/data/ssl\n\nRUN apk add --no-cache iproute2-minimal iptables\n\nCOPY haproxy.cfg /etc/haproxy/haproxy.cfg\nCOPY supervisord.conf /etc/supervisor/conf.d/processes.conf\n\nCOPY docker-start /docker-start\nRUN chmod +x /docker-start\n\nENTRYPOINT [ \"/docker-start\" ]\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\"]\n"
}