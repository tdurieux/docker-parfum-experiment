{
  "startTime": 1674219335265,
  "endTime": 1674219338455,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build command:\n#   $ docker build -t aprokop/fortrilinos-stack:latest -f Dockerfile  .\nARG BASE=nvidia/cuda:11.0.3-devel-ubuntu18.04\nFROM $BASE\n\nARG NPROC=8\n\nRUN if test ${NV_CUDA_LIB_VERSION}; then apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub; fi\n\n# Avoid tzdata dialog\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -yq \\\n        autoconf \\\n        bc \\\n        build-essential \\\n        ccache \\\n        curl \\\n        environment-modules \\\n        gawk \\\n        gfortran \\\n        git \\\n        lcov \\\n        libatlas-base-dev \\\n        libbz2-dev \\\n        python2.7-dev \\\n        tmux \\\n        unzip \\\n        valgrind \\\n        vim \\\n        wget \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install CMake\nENV CMAKE_DIR=/opt/cmake\nRUN CMAKE_VERSION=3.16.4 && \\\n    CMAKE_URL=https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION} && \\\n    CMAKE_SCRIPT=cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    CMAKE_SHA256=cmake-${CMAKE_VERSION}-SHA-256.txt && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SHA256} && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SHA256}.asc && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SCRIPT} && \\\n    grep ${CMAKE_SCRIPT} ${CMAKE_SHA256} | sha256sum --check && \\\n    mkdir -p ${CMAKE_DIR} && \\\n    sh ${CMAKE_SCRIPT} --skip-license --prefix=${CMAKE_DIR} && \\\n    rm -rf ${SCRATCH_DIR}\nENV PATH=${CMAKE_DIR}/bin:$PATH\n\n# Install OpenMPI\nENV OPENMPI_DIR=/opt/openmpi\nRUN OPENMPI_VERSION=4.0.3 && \\\n    OPENMPI_VERSION_SHORT=$(echo \"$OPENMPI_VERSION\" | cut -d. -f1,2) && \\\n    OPENMPI_SHA1=d958454e32da2c86dd32b7d557cf9a401f0a08d3 && \\\n    OPENMPI_URL=https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION_SHORT}/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    OPENMPI_ARCHIVE=openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${OPENMPI_URL} --output-document=${OPENMPI_ARCHIVE} && \\\n    echo \"${OPENMPI_SHA1} ${OPENMPI_ARCHIVE}\" | sha1sum -c && \\\n    mkdir -p openmpi && \\\n    tar -xf ${OPENMPI_ARCHIVE} -C openmpi --strip-components=1 && \\\n    mkdir -p build && cd build && \\\n    ../openmpi/configure --prefix=${OPENMPI_DIR} ${CUDA_OPTIONS} CFLAGS=-w && \\\n    make -j${NPROCS} install && \\\n    rm -rf ${SCRATCH_DIR}\nENV PATH=${OPENMPI_DIR}/bin:$PATH\n\n# Workaround for Kokkos to find libcudart\nENV LD_LIBRARY_PATH=/usr/local/cuda/targets/x86_64-linux/lib:${LD_LIBRARY_PATH}\n\n# Install Trilinos (13.0.0)\nENV TRILINOS_DIR=/opt/trilinos\nRUN export TRILINOS_HASH=9fec35276d846a667bc668ff4cbdfd8be0dfea08 && \\\n    export TRILINOS_URL=https://github.com/trilinos/Trilinos/archive/${TRILINOS_HASH}.tar.gz && \\\n    export TRILINOS_ARCHIVE=trilinos-${TRILINOS_HASH}.tar.gz && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${TRILINOS_URL} --output-document=${TRILINOS_ARCHIVE} && \\\n    mkdir -p trilinos && \\\n    tar -xf ${TRILINOS_ARCHIVE} -C trilinos --strip-components=1 && \\\n    mkdir -p build && cd build && \\\n    cmake \\\n        -D CMAKE_BUILD_TYPE=RelWithDebInfo \\\n        -D BUILD_SHARED_LIBS=ON \\\n        \\\n        -D CMAKE_INSTALL_PREFIX=${TRILINOS_DIR} \\\n        \\\n        -D TPL_ENABLE_Boost=OFF \\\n              -D TPL_ENABLE_CUDA=ON \\\n        -D TPL_ENABLE_CUDA=OFF \\\n        -D TPL_ENABLE_DLlib=OFF \\\n        -D TPL_ENABLE_MPI=ON \\\n        \\\n        -D Trilinos_ENABLE_Fortran=ON \\\n        \\\n        -D Trilinos_ENABLE_EXPLICIT_INSTANTIATION=ON \\\n        -D Trilinos_ENABLE_DEBUG=OFF \\\n        -D Trilinos_ENABLE_EXAMPLES=OFF \\\n        -D Trilinos_ENABLE_TESTS=OFF \\\n        -D Trilinos_ENABLE_ALL_PACKAGES=OFF \\\n        -D Trilinos_ENABLE_ALL_FORWARD_DEP_PACKAGES=OFF \\\n        -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES=OFF \\\n        -D Trilinos_ENABLE_SECONDARY_TESTED_CODE=ON \\\n        \\\n        -D Trilinos_ENABLE_Amesos2=ON \\\n        -D Trilinos_ENABLE_Anasazi=ON \\\n        -D Trilinos_ENABLE_Belos=ON \\\n        -D Trilinos_ENABLE_Epetra=OFF \\\n        -D Trilinos_ENABLE_Ifpack2=ON \\\n        -D Trilinos_ENABLE_Kokkos=ON \\\n            -D Kokkos_ENABLE_Serial=ON \\\n            -D Kokkos_ENABLE_OpenMP=OFF \\\n            -D Kokkos_ENABLE_Cuda=OFF \\\n            -D Kokkos_ENABLE_Cuda_UVM=ON \\\n            -D Kokkos_ENABLE_Cuda_Lambda=ON \\\n            -D Kokkos_ARCH_VOLTA70=ON \\\n        -D Trilinos_ENABLE_MueLu=ON \\\n        -D Trilinos_ENABLE_NOX=ON \\\n        -D Trilinos_ENABLE_Stratimikos=ON \\\n        -D Trilinos_ENABLE_Teuchos=ON \\\n        -D Trilinos_ENABLE_Thyra=ON \\\n        -D Trilinos_ENABLE_Tpetra=ON \\\n            -D Tpetra_INST_SERIAL=ON \\\n            -D Tpetra_INST_INT_INT=OFF \\\n            -D Tpetra_INST_INT_LONG=OFF \\\n            -D Tpetra_INST_INT_LONG_LONG=ON \\\n            -D Tpetra_INST_FLOAT=OFF \\\n            -D Tpetra_ENABLE_DEPRECATED_CODE=OFF \\\n        \\\n    ../trilinos && \\\n    make -j${NPROC} install && \\\n    rm -rf ${SCRATCH_DIR}\nENV TRILINOS_DIR=/opt/trilinos\n"
}