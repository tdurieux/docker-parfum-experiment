{
  "startTime": 1674248839318,
  "endTime": 1674248840727,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.12\n\n#Install dependencies and fix issue in apache\nRUN apk --no-cache upgrade\nRUN apk add --no-cache \\\n    apache2 apache2-ssl git php7 php7-tokenizer php7-ctype php7-session php7-apache2 \\\n    php7-json php7-pdo php7-pdo_mysql php7-curl php7-ldap php7-openssl php7-iconv \\\n    php7-xml php7-xsl php7-gd php7-zip php7-soap php7-mbstring php7-zlib \\\n    php7-mysqli php7-sockets php7-xmlreader php7-redis perl php7-simplexml php7-xmlwriter php7-phar php7-fileinfo \\\n    php7-sodium php7-calendar php7-intl \\\n    mysql-client tar curl imagemagick npm \\\n    python2 python3 openssl git py-pip openssl-dev dcron \\\n    rsync shadow jq \\\n    && sed -i 's/^Listen 80$/Listen 0.0.0.0:80/' /etc/apache2/httpd.conf\n# Needed to ensure permissions work across shared volumes with openemr, nginx, and php-fpm dockers\n    RUN usermod -u 1000 apache\n#Stuff for developers since this predominantly a developer/tester docker\nRUN apk add --no-cache \\\n    unzip vim nano bash bash-doc bash-completion tree\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\nRUN apk add --no-cache build-base libffi-dev python3-dev cargo \\\n    && mkdir -p /var/www/localhost/htdocs/openemr/sites \\\n    && chown -R apache /var/www/localhost/htdocs/openemr \\\n    && git clone https://github.com/letsencrypt/letsencrypt --depth 1 /opt/certbot \\\n    && pip install --no-cache-dir --upgrade pip \\\n    && pip install --no-cache-dir -e /opt/certbot/acme -e \\\n    && mkdir -p /etc/ssl/certs /etc/ssl/private \\\n    && apk del --no-cache build-base libffi-dev python3-dev cargo\nWORKDIR /var/www/localhost/htdocs\nVOLUME [ \"/etc/letsencrypt/\", \"/etc/ssl\" ]\n#configure apache & php properly\nENV APACHE_LOG_DIR=/var/log/apache2\nCOPY php.ini /etc/php7/php.ini\nCOPY openemr.conf /etc/apache2/conf.d/\n#add runner and auto_configure and prevent auto_configure from being run w/o being enabled\nCOPY run_openemr.sh autoconfig.sh auto_configure.php /var/www/localhost/htdocs/\nCOPY utilities/unlock_admin.php utilities/unlock_admin.sh /root/\nRUN chmod 500 run_openemr.sh autoconfig.sh /root/unlock_admin.sh \\\n    && chmod 000 auto_configure.php /root/unlock_admin.php\n#fix issue with apache2 dying prematurely\nRUN mkdir -p /run/apache2\n#Copy dev tools alias to root and create snapshots and certs dir\nCOPY utilities/devtools /root/\nCOPY utilities/devtoolsLibrary.source /root/\nRUN mkdir /snapshots\nRUN mkdir /certs\nRUN mkdir -p /couchdb/original\n#Copy demo data to root\nCOPY utilities/demo_5_0_0_5.sql /root/\nRUN chmod 500 /root/devtools\n#Ensure swarm/orchestration pieces are available if needed\nRUN mkdir /swarm-pieces \\\n    && rsync --owner --group --perms --delete --recursive --links /etc/ssl /swarm-pieces/\n#go\nCMD [ \"./run_openemr.sh\" ]\n\nEXPOSE 80 443\n"
}