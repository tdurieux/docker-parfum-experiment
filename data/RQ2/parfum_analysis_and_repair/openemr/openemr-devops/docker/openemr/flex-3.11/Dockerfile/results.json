{
  "startTime": 1674249421334,
  "endTime": 1674249421967,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.11\n\n#Install dependencies\nRUN apk --no-cache upgrade\nRUN apk add --no-cache \\\n    apache2 apache2-ssl git php7 php7-tokenizer php7-ctype php7-session php7-apache2 \\\n    php7-json php7-pdo php7-pdo_mysql php7-curl php7-ldap php7-openssl php7-iconv \\\n    php7-xml php7-xsl php7-gd php7-zip php7-soap php7-mbstring php7-zlib \\\n    php7-mysqli php7-sockets php7-xmlreader php7-redis php7-simplexml php7-xmlwriter php7-phar php7-fileinfo \\\n    php7-sodium php7-calendar \\\n    perl mysql-client tar curl imagemagick \\\n    python openssl git libffi-dev py-pip python-dev build-base openssl-dev dcron \\\n    rsync shadow jq\n\n# Temporary fix to avoid npm permission bug during build in certain npm versions. This\n#  is currently fixed in edge, so will collect the npm package (now npm-12.16.2-r0.apk)\n#  from edge until it is fixed in current alpine version. When it is fixed, then will\n#  install npm in above standard apk add call.\nRUN apk add --no-cache npm --repository http://dl-3.alpinelinux.org/alpine/edge/main/\n\n# Needed to ensure permissions work across shared volumes with openemr, nginx, and php-fpm dockers\n    RUN usermod -u 1000 apache\n#Stuff for developers since this predominantly a developer/tester docker\nRUN apk add --no-cache \\\n    unzip vim nano bash bash-doc bash-completion tree\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#some other stuff (note not deleting build-base, libffi-dev, and python-dev since this\n# is predominantly a developer/tester docker)\nRUN mkdir -p /var/www/localhost/htdocs/openemr/sites \\\n    && chown -R apache /var/www/localhost/htdocs/openemr \\\n    && git clone https://github.com/letsencrypt/letsencrypt --branch 0.35.x --depth 1 /opt/certbot \\\n    && pip install --no-cache-dir --upgrade pip \\\n    && pip install --no-cache-dir -e /opt/certbot/acme -e \\\n    && mkdir -p /etc/ssl/certs /etc/ssl/private\nWORKDIR /var/www/localhost/htdocs\nVOLUME [ \"/etc/letsencrypt/\", \"/etc/ssl\" ]\n#configure apache & php properly\nENV APACHE_LOG_DIR=/var/log/apache2\nCOPY php.ini /etc/php7/php.ini\nCOPY openemr.conf /etc/apache2/conf.d/\n#add runner and auto_configure and prevent auto_configure from being run w/o being enabled\nCOPY run_openemr.sh autoconfig.sh auto_configure.php /var/www/localhost/htdocs/\nCOPY utilities/unlock_admin.php utilities/unlock_admin.sh /root/\nRUN chmod 500 run_openemr.sh autoconfig.sh /root/unlock_admin.sh \\\n    && chmod 000 auto_configure.php /root/unlock_admin.php\n#fix issue with apache2 dying prematurely\nRUN mkdir -p /run/apache2\n#Copy dev tools alias to root\nCOPY  utilities/devtools /root/\nRUN chmod 500 /root/devtools\n\n#go\nCMD [ \"./run_openemr.sh\" ]\n\nEXPOSE 80 443\n"
}