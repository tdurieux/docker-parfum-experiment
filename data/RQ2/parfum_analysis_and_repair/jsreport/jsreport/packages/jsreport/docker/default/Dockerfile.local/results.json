{
  "startTime": 1674255563903,
  "endTime": 1674255564946,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16.11.0-alpine3.14\nEXPOSE 5488\nUSER root\n\nENV GOSU_VERSION 1.12\nRUN set -eux; \\\n    \\\n    apk add --no-cache --virtual .gosu-deps \\\n    ca-certificates \\\n    dpkg \\\n    gnupg \\\n    ; \\\n    \\\n    dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n    wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n    wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n    \\\n    # verify the signature\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n    command -v gpgconf && gpgconf --kill all || :; \\\n    rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n    \\\n    # clean up fetch dependencies\n    apk del --no-network .gosu-deps; \\\n    \\\n    chmod +x /usr/local/bin/gosu; \\\n    # verify that the binary works\n    gosu --version; \\\n    gosu nobody true\n\nRUN addgroup -S jsreport && adduser --shell /bin/bash -S -G jsreport jsreport\n\nRUN apk update --no-cache && \\\n    echo @edge http://dl-cdn.alpinelinux.org/alpine/v3.14/community >> /etc/apk/repositories && \\\n    echo @edge http://nl.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories && \\\n    echo @edge http://nl.alpinelinux.org/alpine/edge/main >> /etc/apk/repositories && \\\n    apk add --no-cache \\\n    libstdc++@edge \\\n    chromium@edge=93.0.4577.82-r2 \\\n    nss@edge \\\n    freetype@edge \\\n    harfbuzz@edge \\\n    ttf-freefont@edge \\\n    # just for now as we npm install from git\n    git \\\n    # so user can docker exec -it test /bin/bash\n    bash\n\nRUN rm -rf /var/cache/apk/* /tmp/*\n\nRUN mkdir -p /app\n\n# we need to create the volume and give it expected owner\n# before the VOLUME step in order for the volume to be created with non-root user\nRUN mkdir /jsreport\nRUN chown jsreport:jsreport /jsreport\nRUN chmod g+s /jsreport\n\nVOLUME [\"/jsreport\"]\n\n\nENV NPM_CONFIG_PREFIX /home/jsreport/.npm-global\nENV PATH $PATH:/home/jsreport/.npm-global/bin\n\nWORKDIR /app\n\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true\n\nRUN npm i -g yarn json-merger && npm cache clean --force;\nCOPY ./packages/jsreport/server.js server.js\nCOPY ./packages/jsreport/index.js index.js\nCOPY ./packages/jsreport/package.json package.json\nCOPY packages packages\nCOPY ./packages/jsreport/lib lib\nCOPY ./packages/jsreport/build build\n\nRUN json-merger -p package.json ./build/workspaces-changes.json -o package.json\n\nRUN yarn install --production && yarn cache clean;\n\n# this copy of jsreport.config.json is only needed on Dockerfile.local, because it is missing\nCOPY ./packages/jsreport/docker/default/jsreport.config.json jsreport.config.json\nCOPY ./packages/jsreport/docker/default/editConfig.js editConfig.js\nCOPY ./packages/jsreport/docker/default/run.sh run.sh\nRUN node editConfig.js\n\nRUN yarn cache clean --all && rm -rf /tmp/*\nRUN chown -R jsreport:jsreport /app\n\nENV chrome:launchOptions:executablePath /usr/lib/chromium/chrome\nENV chrome_launchOptions_args --no-sandbox,--disable-dev-shm-usage\n\n\nCMD [\"bash\", \"run.sh\"]\n"
}