{
  "startTime": 1674251691937,
  "endTime": 1674251692770,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 98
      }
    }
  ],
  "repairedDockerfile": "FROM swift:focal\n\nENV DEBIAN_FRONTEND=noninteractive\nENV SHELL=bash\n\nRUN apt-get -y update && apt-get -y upgrade\nRUN apt-get install --no-install-recommends -y git python3 python3-pip python3-virtualenv clang-10 && rm -rf /var/lib/apt/lists/*;\n\nRUN useradd -m builder\n\n# Fetch Firefox source code\nRUN git clone https://github.com/mozilla/gecko-dev.git /home/builder/firefox\nWORKDIR /home/builder/firefox\n\n# Docker will attempt to cache the output of every step. That's fine (and useful to speed things up, e.g. by avoiding\n# the need to download the entire source repository again every time!). However, whenever the following ARG is changed\n# (i.e. we are building a new version of the engine), a cache miss occurs (because the build context changed) and all\n# steps from here on are rerun. That, however, means we might be operating on an old checkout of the source code from\n# the cache, and so we update it again before checking out the requested revision.\nARG rev=master\n\n# Update system packages first\nRUN apt-get -y update && apt-get -y upgrade\n\n# Fetch latest source code and checkout requested source revision\nRUN git pull\nRUN git checkout $rev\n\n# Prepare for building\nRUN ./mach bootstrap --application-choice=js\n\n# Upload and apply patches\nADD Patches Patches\nRUN for i in `ls Patches`; do patch -p1 < Patches/$i; done\n\n# Start building!\nADD fuzzbuild.sh js/src/fuzzbuild.sh\nRUN cd js/src && ./fuzzbuild.sh\n"
}