{
  "startTime": 1674255410472,
  "endTime": 1674255411976,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM airdock/oraclejdk:1.8 as metabrainz-spark-base\n\n# Compile and install specific version of Python\n# The jdk image comes with jessie which has python 3.4 which\n# is not supported anymore. We install Python 3.6 here because\n# 3.7 needs a version of OpenSSL that is not available in  jessie\n# Based on https://github.com/docker-library/python/blob/master/3.6/jessie/Dockerfile\n\n# Ensure that local Python build is preferred over whatever might come with the base image\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# Runtime dependencies. This includes the core packages for all of the buildDeps listed\n# below. We explicitly install them so that when we `remove --auto-remove` the dev packages,\n# these packages stay installed.\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n                       ca-certificates \\\n                       netbase \\\n                       git \\\n                       libbz2-1.0 \\\n                       libexpat1 \\\n                       libffi6 \\\n                       libgdbm3 \\\n                       liblzma5 \\\n                       libncursesw5 \\\n                       libreadline6 \\\n                       libsqlite3-0 \\\n                       libssl1.0.0 \\\n                       libuuid1 \\\n                       tcl \\\n                       tk \\\n                       zlib1g wget \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\nENV PYTHON_VERSION 3.6.9\n\n# The list of build dependencies comes from the python-docker slim version:\n# https://github.com/docker-library/python/blob/408f7b8130/3.7/stretch/slim/Dockerfile#L29\nRUN set -ex \\\n\t&& buildDeps=' \\\n\t\tbuild-essential \\\n\t\tlibbz2-dev \\\n\t\tlibexpat1-dev \\\n\t\tlibffi-dev \\\n\t\tlibgdbm-dev \\\n\t\tliblzma-dev \\\n\t\tlibncursesw5-dev \\\n\t\tlibreadline-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\ttk-dev \\\n\t\ttcl-dev \\\n\t\tuuid-dev \\\n\t\txz-utils \\\n\t\tzlib1g-dev \\\n\t' \\\n\t&& apt-get update \\\n\t&& apt-get install -y $buildDeps --no-install-recommends \\\n    \\\n\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n\t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n\t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n\t&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \\\n\t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n\t&& mkdir -p /usr/src/python \\\n\t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n\t&& rm python.tar.xz \\\n\t\\\n\t&& cd /usr/src/python \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-loadable-sqlite-extensions \\\n\t\t--enable-shared \\\n\t\t--with-system-expat \\\n\t\t--with-system-ffi \\\n\t\t--without-ensurepip \\\n\t&& make -j \"$(nproc)\" \\\n\t&& make install \\\n\t&& ldconfig \\\n\t\\\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& rm -rf /usr/src/python \\\n\t\\\n\t&& apt-get purge -y --auto-remove $buildDeps \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& python3 --version\n\n\n# make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n\t&& ln -s idle3 idle \\\n\t&& ln -s pydoc3 pydoc \\\n\t&& ln -s python3 python \\\n\t&& ln -s python3-config python-config\n\n# Install pip\nENV PYTHON_PIP_VERSION 19.2.3\n\nRUN set -ex; \\\n\t\\\n\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \\\n\t\\\n\tpython get-pip.py \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t\"pip==$PYTHON_PIP_VERSION\" \\\n\t; \\\n\tpip --version; \\\n\t\\\n\tfind /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' +; \\\n\trm -f get-pip.py\n\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    scala \\\n    wget \\\n    net-tools \\\n    dnsutils \\\n    bsdmainutils \\\n    xz-utils \\\n    pxz \\\n    zip \\\n    && rm -rf /var/lib/apt/lists/*\n\n\nENV DOCKERIZE_VERSION v0.6.1\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\nCOPY docker/apache-download.sh /apache-download.sh\nENV SPARK_VERSION 2.4.1\nENV HADOOP_VERSION 2.7\nRUN cd /usr/local && \\\n    /apache-download.sh spark/spark-$SPARK_VERSION/spark-$SPARK_VERSION-bin-hadoop$HADOOP_VERSION.tgz && \\\n    tar xzf spark-$SPARK_VERSION-bin-hadoop$HADOOP_VERSION.tgz && \\\n    ln -s spark-$SPARK_VERSION-bin-hadoop$HADOOP_VERSION spark && rm spark-$SPARK_VERSION-bin-hadoop$HADOOP_VERSION.tgz\n\nRUN mkdir /rec\nWORKDIR /rec\nCOPY requirements.txt /rec/requirements.txt\nRUN pip3 install --no-cache-dir -r requirements.txt\n\nFROM metabrainz-spark-base as metabrainz-spark-master\nCMD /usr/local/spark/sbin/start-master.sh\n\nFROM metabrainz-spark-base as metabrainz-spark-worker\nCMD dockerize -wait tcp://spark-master:7077 -timeout 9999s /usr/local/spark/sbin/start-slave.sh spark://spark-master:7077\n\nFROM metabrainz-spark-base as metabrainz-spark-jobs\nCOPY . /rec\n\nFROM metabrainz-spark-base as metabrainz-spark-dev\nCOPY . /rec\n\nFROM metabrainz-spark-base as metabrainz-spark-request-consumer\nCOPY . /rec\n"
}