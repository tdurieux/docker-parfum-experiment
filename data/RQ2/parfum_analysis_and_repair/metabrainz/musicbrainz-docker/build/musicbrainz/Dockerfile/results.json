{
  "startTime": 1674215852158,
  "endTime": 1674215853353,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 131
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG METABRAINZ_BASE_IMAGE_VERSION=focal-1.0.0-alpha1\nARG METABRAINZ_BASE_IMAGE_VARIANT=\nARG METABRAINZ_BASE_IMAGE_TAG=${METABRAINZ_BASE_IMAGE_VERSION}${METABRAINZ_BASE_IMAGE_VARIANT}\nFROM metabrainz/base-image:${METABRAINZ_BASE_IMAGE_TAG}\n\nARG METABRAINZ_BASE_IMAGE_VERSION\nARG METABRAINZ_BASE_IMAGE_VARIANT\nARG METABRAINZ_BASE_IMAGE_TAG\nLABEL org.metabrainz.based-on-image=\"metabrainz/base-image:${METABRAINZ_BASE_IMAGE_TAG}\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\nARG DOCKERIZE_VERSION=v0.6.1\nRUN curl -f -sSLO --retry 5 https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    rm -f dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\nARG POSTGRES_VERSION=12\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN mkdir -p /usr/local/share/keyrings && \\\n    curl -f -sSL --retry 5 https://www.postgresql.org/media/keys/ACCC4CF8.asc > /tmp/postgres-key.asc && \\\n    gpg --batch --no-default-keyring --keyring /tmp/postgres-keyring.gpg --import /tmp/postgres-key.asc && \\\n    gpg --batch --no-default-keyring --keyring /tmp/postgres-keyring.gpg --export --output /usr/local/share/keyrings/apt.postgresql.org.gpg && \\\n    rm -f /tmp/postgres-key.asc /tmp/postgres-keyring.gpg && \\\n    echo \"deb [signed-by=/usr/local/share/keyrings/apt.postgresql.org.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -qy \\\n        cpanminus \\\n        bzip2 \\\n        gettext \\\n        g++ \\\n        git \\\n        # Needed for Cache in DB_File\n        libdb-dev \\\n        libexpat1-dev \\\n        libicu-dev \\\n        liblocal-lib-perl \\\n        libpq-dev \\\n        libssl-dev \\\n        # Needed for XML::LibXML\n        libxml2-dev \\\n        make \\\n        # Needed for Unicode::ICU::Collator\n        pkg-config \\\n        postgresql-client-${POSTGRES_VERSION} \\\n        python2-minimal \\\n        # Needed to decompress sample data\n        xz-utils \\\n        # Needed for XML:LibXML\n        zlib1g-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nARG MUSICBRAINZ_SERVER_VERSION=v-2022-06-20\nLABEL org.metabrainz.musicbrainz-server.version=\"${MUSICBRAINZ_SERVER_VERSION}\"\nRUN git clone --depth=1 --branch $MUSICBRAINZ_SERVER_VERSION https://github.com/metabrainz/musicbrainz-server.git musicbrainz-server\n\nWORKDIR /musicbrainz-server\n\nARG NODE_VERSION=16.1.0\nARG PGP_SERVERS=\"keys.openpgp.org keyserver.ubuntu.com pgp.mit.edu\"\nRUN cp docker/yarn_pubkey.txt /tmp/yarn-key.asc && \\\n    cd /tmp && \\\n    gpg --no-default-keyring --keyring /tmp/yarn-keyring.gpg --import /tmp/yarn-key.asc && \\\n    \\\n    # Refresh Yarn signing keys\n    refreshed_keys=''; \\\n    for pgp_server in $(tr ' ' '\\n' <<<\"$PGP_SERVERS\"); do \\\n        for attempt in {1..3}; do \\\n            gpg --no-default-keyring --keyring /tmp/yarn-keyring.gpg --keyserver \"$pgp_server\" --refresh-keys Yarn 2>&1 && \\\n            { refreshed_keys='yes'; break; } || \\\n            echo \"Temporary failure: gpg returned error code '$?' on attempt #$attempt to reach '$pgp_server'.\"; \\\n        done; \\\n        if [[ $refreshed_keys == yes ]]; then break; fi; \\\n    done; \\\n    if [[ $refreshed_keys != yes ]]; then \\\n        echo >&2 'Fatal error: Failed all attempts to refresh PGP keys.'; \\\n        echo >&2 'Try passing a list of PGP servers that work for you as build argument:'; \\\n        echo >&2 ''; \\\n        echo >&2 '    docker-compose build --build-arg PGP_SERVERS=\"LIST\" musicbrainz'; \\\n        echo >&2 ''; \\\n        echo >&2 \"Current LIST is \\\"$PGP_SERVERS\\\"\"; \\\n        EX_TEMPFAIL=75; \\\n        exit $EX_TEMPFAIL; \\\n    fi; \\\n    unset attempt pgp_server refreshed_keys; \\\n    \\\n    gpg --no-default-keyring --keyring /tmp/yarn-keyring.gpg --export --output /usr/local/share/keyrings/dl.yarnpkg.com.gpg && \\\n    rm -f /tmp/yarn-key.asc /tmp/yarn-keyring.gpg && \\\n    echo \"deb [signed-by=/usr/local/share/keyrings/dl.yarnpkg.com.gpg] https://dl.yarnpkg.com/debian/ stable main\" > /etc/apt/sources.list.d/yarnpkg.list && \\\n    apt-get update -o Dir::Etc::sourcelist=\"sources.list.d/yarnpkg.list\" -o Dir::Etc::sourceparts=\"-\" -o APT::Get::List-Cleanup=\"0\" && \\\n    curl -sSLO --retry 5 https://deb.nodesource.com/node_16.x/pool/main/n/nodejs/nodejs_${NODE_VERSION}-deb-1nodesource1_amd64.deb && \\\n    dpkg -i nodejs_${NODE_VERSION}-deb-1nodesource1_amd64.deb && \\\n    apt-get purge -qy cmdtest && \\\n    apt-get install --no-install-recommends -qy \\\n        yarn && \\\n    rm /tmp/* && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN eval \"$(perl -Mlocal::lib)\" \\\n    && cpanm --installdeps --notest . \\\n    && cpanm --notest \\\n        Catalyst::Plugin::Cache::HTTP \\\n        Catalyst::Plugin::StackTrace \\\n        Digest::MD5::File \\\n        JSON::Any \\\n        LWP::Protocol::https \\\n        Plack::Handler::Starlet \\\n        Plack::Middleware::Debug::Base \\\n        Server::Starter \\\n        Starlet \\\n        Starlet::Server \\\n        Term::Size::Any \\\n        TURNSTEP/DBD-Pg-3.10.3.tar.gz \\\n    && rm -rf /root/.cpan* /root/perl5/man/\n\nCOPY DBDefs.pm /musicbrainz-server/lib/\nCOPY scripts/* /usr/local/bin/\nRUN cat /usr/local/bin/snippet.perllocallib.bashrc >> ~/.bashrc \\\n    && rm /usr/local/bin/snippet.perllocallib.bashrc \\\n    && ln -s /usr/local/bin/docker-entrypoint.sh /\n\n# Postgres user/password would be solely needed to compile tests\nARG POSTGRES_USER=doesntmatteraslongasyoudontcompiletests\nARG POSTGRES_PASSWORD=doesntmatteraslongasyoudontcompiletests\n\nENV BASH_ENV=/noninteractive.bash_env \\\n    MUSICBRAINZ_BASE_FTP_URL=ftp://ftp.eu.metabrainz.org/pub/musicbrainz \\\n    MUSICBRAINZ_CATALYST_DEBUG=0 \\\n    MUSICBRAINZ_DB_SCHEMA_SEQUENCE=27 \\\n    MUSICBRAINZ_DEVELOPMENT_SERVER=0 \\\n    MUSICBRAINZ_SEARCH_SERVER=search:8983/solr \\\n    MUSICBRAINZ_SERVER_PROCESSES=10 \\\n    MUSICBRAINZ_STANDALONE_SERVER=0 \\\n    MUSICBRAINZ_WEB_SERVER_HOST=localhost \\\n    MUSICBRAINZ_WEB_SERVER_PORT=5000 \\\n    # Needed for yarn to install production dependencies only\n    NODE_ENV=production \\\n    POSTGRES_USER=musicbrainz \\\n    POSTGRES_PASSWORD=musicbrainz\n\nRUN yarn install \\\n    && yarn cache clean \\\n    && eval \"$(perl -Mlocal::lib)\" \\\n    && /musicbrainz-server/script/compile_resources.sh\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"start.sh\"]\n"
}