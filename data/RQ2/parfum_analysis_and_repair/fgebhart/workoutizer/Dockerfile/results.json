{
  "startTime": 1674256169702,
  "endTime": 1674256170823,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:latest\n\n# set apt to noninteractive mode  (for installing firefox)\nENV DEBIAN_FRONTEND='noninteractive'\n# install sqlite3 package for the use of djangos db shell\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y sqlite3 \\\n                        build-essential \\\n                        vim \\\n                        git \\\n                        zsh \\\n                        wget \\\n                        htop \\\n                        curl \\\n                        firefox \\\n                        unzip && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y python3-dev \\\n                       python3-pip \\\n                       python3.8 \\\n                       python3.9 \\\n                       python3.10 && rm -rf /var/lib/apt/lists/*;\n\n\n# install oh-my-zsh\nRUN wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh || true\n\nRUN echo \"Europe/Berlin\" > /etc/timezone && \\\n    ln -fs /usr/share/zoneinfo/`cat /etc/timezone` /etc/localtime && \\\n    dpkg-reconfigure -f noninteractive tzdata\n\n# install gecko driver\nRUN wget https://github.com/mozilla/geckodriver/releases/download/v0.30.0/geckodriver-v0.30.0-linux64.tar.gz --no-check-certificate\nRUN sh -c 'tar -x geckodriver -zf geckodriver-v0.30.0-linux64.tar.gz -O > /usr/bin/geckodriver'\nRUN chmod +x /usr/bin/geckodriver\nRUN rm geckodriver-v0.30.0-linux64.tar.gz\n\n# first copy only project toml and lock file to only invalidate the next setps in case of changed requirements\nCOPY pyproject.toml /workspaces/workoutizer/pyproject.toml\nCOPY poetry.lock /workspaces/workoutizer/poetry.lock\nWORKDIR /workspaces/workoutizer\n\n# install pip dependencies\nRUN pip install --no-cache-dir --upgrade poetry\nRUN poetry install --no-interaction --no-root\n\nENV SHELL /bin/zsh\nENV WKZ_ENV='devel'\nENV WKZ_LOG_LEVEL='DEBUG'\nENV DJANGO_DEBUG=True\nENV PYTHONBREAKPOINT=ipdb.set_trace\n\nEXPOSE 8000\n\nCOPY . /workspaces/workoutizer\nWORKDIR /workspaces/workoutizer\n\n# set convenience alias\nRUN echo 'alias run_all_tests=\"pytest tests -v -n auto --html=pytest-report.html\"' >> ~/.zshrc\n\nRUN poetry install --no-interaction\n"
}