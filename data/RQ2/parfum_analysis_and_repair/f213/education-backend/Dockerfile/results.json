{
  "startTime": 1674255958891,
  "endTime": 1674255959665,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 5,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.10.5-slim-buster as base\nLABEL maintainer=\"fedor@borshev.com\"\n\nLABEL com.datadoghq.ad.logs='[{\"source\": \"uwsgi\", \"service\": \"django\"}]'\n\nENV PYTHONUNBUFFERED 1\nENV DEBIAN_FRONTEND noninteractive\n\nENV STATIC_ROOT /var/lib/django-static\nENV CELERY_APP=app.celery\n\nENV _UWSGI_VERSION 2.0.20\nENV DOCKERIZE_VERSION v0.6.1\n\nRUN echo deb http://deb.debian.org/debian buster contrib non-free > /etc/apt/sources.list.d/debian-contrib.list \\\n  && apt-get update \\\n  && apt-get --no-install-recommends install -y gettext locales-all wget imagemagick tzdata git \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && apt-get --no-install-recommends install -y build-essential libxml2-dev libxslt1-dev \\\n  && apt-get --no-install-recommends install -y libjpeg62-turbo-dev libjpeg-dev libfreetype6-dev libtiff5-dev liblcms2-dev libwebp-dev tk8.6-dev \\\n  && apt-get --no-install-recommends install -y libffi-dev libcgraph6 libgraphviz-dev libmagic-dev \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n  && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n  && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\nRUN wget -O uwsgi-${_UWSGI_VERSION}.tar.gz https://github.com/unbit/uwsgi/archive/${_UWSGI_VERSION}.tar.gz \\\n  && tar zxvf uwsgi-*.tar.gz \\\n  && UWSGI_BIN_NAME=/usr/local/bin/uwsgi make -C uwsgi-${_UWSGI_VERSION} \\\n  && rm -Rf uwsgi-* && rm uwsgi-*.tar.gz\n\nRUN pip install --no-cache-dir --upgrade pip\n\nCOPY requirements.txt /\n\nRUN pip install --no-cache-dir -r requirements.txt\n\nWORKDIR /src\nCOPY src /src\n\nENV NO_CACHE=On\nRUN ./manage.py compilemessages\nRUN ./manage.py collectstatic --noinput\nENV NO_CACHE=Off\n\nUSER nobody\n\n\nFROM base as web\nHEALTHCHECK CMD wget -q -O /dev/null http://localhost:8000/api/v2/healthchecks/db/ --header \"Host: app.tough-dev.school\" || exit 1\nCMD ./manage.py migrate && uwsgi --master --http :8000 --module app.wsgi --workers 2 --threads 2 --harakiri 25 --max-requests 1000 --log-x-forwarded-for\n\n\nFROM base as worker\nHEALTHCHECK CMD celery -A ${CELERY_APP} inspect ping -d $QUEUE@$HOSTNAME\nCMD celery -A ${CELERY_APP} worker -Q $QUEUE -c ${CONCURENCY:-2} -n \"${QUEUE}@%h\" --max-tasks-per-child ${MAX_REQUESTS_PER_CHILD:-50} --time-limit ${TIME_LIMIT:-900} --soft-time-limit ${SOFT_TIME_LIMIT:-45}\n\n\nFROM base as scheduler\nENV SCHEDULER_DB_PATH=/var/db/scheduler\nUSER root\nRUN mkdir -p ${SCHEDULER_DB_PATH} && chown nobody ${SCHEDULER_DB_PATH}\nVOLUME ${SCHEDULER_DB_PATH}\nUSER nobody\nHEALTHCHECK NONE\nCMD celery -A ${CELERY_APP} beat --pidfile=/tmp/celerybeat.pid --schedule=${SCHEDULER_DB_PATH}/celerybeat-schedule.db\n"
}