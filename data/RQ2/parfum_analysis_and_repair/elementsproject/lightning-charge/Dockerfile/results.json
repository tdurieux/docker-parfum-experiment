{
  "startTime": 1674219094496,
  "endTime": 1674219096413,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 58
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 30,
        "lineEnd": 36,
        "columnStart": 5,
        "columnEnd": 66
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 109
      }
    },
    {
      "rule": "gpgVerifyAscRmAsc",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 74
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 6,
        "columnStart": 42,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14.15.5-slim as builder\n\nARG STANDALONE\n\nRUN mkdir /opt/local && apt-get update && apt-get install -y --no-install-recommends git gpg dirmngr ca-certificates wget \\\n    $([ -n \"$STANDALONE\" ] || echo \"autoconf automake build-essential gettext libtool libgmp-dev \\\n                                     libsqlite3-dev python python3 python3-mako zlib1g-dev\") && rm -rf /var/lib/apt/lists/*;\n\nARG TESTRUNNER\n\n# v0.9.3\nENV LIGHTNINGD_COMMIT=015ac37d924e31bb87b8597da9f863e82270657b\n\nRUN [ -n \"$STANDALONE\" ] || \\\n    ( git clone https://github.com/ElementsProject/lightning.git /opt/lightningd \\\n    && cd /opt/lightningd \\\n    && git checkout $LIGHTNINGD_COMMIT \\\n    && DEVELOPER=$TESTRUNNER ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=./target \\\n    && make \\\n    && make install \\\n    && rm -r target/share \\\n    && mv -f target/* /opt/local/)\n\nENV BITCOIN_VERSION 0.21.0\nENV BITCOIN_FILENAME bitcoin-$BITCOIN_VERSION-x86_64-linux-gnu.tar.gz\nENV BITCOIN_URL https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/$BITCOIN_FILENAME\nENV BITCOIN_SHA256 da7766775e3f9c98d7a9145429f2be8297c2672fe5b118fd3dc2411fb48e0032\nENV BITCOIN_ASC_URL https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/SHA256SUMS.asc\nENV BITCOIN_PGP_KEY 01EA5486DE18A882D4C2684590C8019E36C2E964\nRUN [ -n \"$STANDALONE\" ] || \\\n    ( mkdir /opt/bitcoin && cd /opt/bitcoin \\\n    && wget -qO \"$BITCOIN_FILENAME\" \"$BITCOIN_URL\" \\\n    && echo \"$BITCOIN_SHA256    $BITCOIN_FILENAME\" | sha256sum -c - \\\n    && gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$BITCOIN_PGP_KEY\" \\\n    && wget -qO bitcoin.asc \"$BITCOIN_ASC_URL\" \\\n    && gpg --batch --verify bitcoin.asc \\\n    && cat bitcoin.asc | grep \"$BITCOIN_FILENAME\" | sha256sum -c - \\\n    && BD=bitcoin-$BITCOIN_VERSION/bin \\\n    && tar -xzvf \"$BITCOIN_FILENAME\" $BD/bitcoind $BD/bitcoin-cli --strip-components=1 \\\n    && mv bin/* /opt/local/bin/) && rm bitcoin.asc\n\nRUN wget -qO /usr/bin/tini \"https://github.com/krallin/tini/releases/download/v0.19.0/tini-amd64\" \\\n    && echo \"93dcc18adc78c65a028a84799ecf8ad40c936fdfc5f2a57b1acda5a8117fa82c  /usr/bin/tini\" | sha256sum -c - \\\n    && chmod +x /usr/bin/tini\n\nWORKDIR /opt/charged\n\nCOPY package.json npm-shrinkwrap.json ./\nRUN npm install \\\n   && test -n \"$TESTRUNNER\" || { \\\n      cp -r node_modules node_modules.dev \\\n      && npm prune --production \\\n      && mv -f node_modules node_modules.prod \\\n      && mv -f node_modules.dev node_modules; } && npm cache clean --force;\n\nCOPY . .\nRUN npm run dist \\\n    && rm -rf src \\\n    && test -n \"$TESTRUNNER\" || (rm -rf test node_modules && mv -f node_modules.prod node_modules)\n\nFROM node:12.16-slim\n\nWORKDIR /opt/charged\nARG TESTRUNNER\nENV HOME /tmp\nENV NODE_ENV production\nARG STANDALONE\nENV STANDALONE=$STANDALONE\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends inotify-tools \\\n    && ([ -n \"$STANDALONE\" ] || apt-get install -y --no-install-recommends libgmp-dev libsqlite3-dev) \\\n    && ([ -z \"$TESTRUNNER\" ] || apt-get install -y --no-install-recommends jq procps curl) \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && ln -s /opt/charged/bin/charged /usr/bin/charged \\\n    && mkdir /data \\\n    && ln -s /data/lightning /tmp/.lightning\n\nCOPY --from=builder /opt/local /usr/local\nCOPY --from=builder /opt/charged /opt/charged\nCOPY --from=builder /usr/bin/tini /usr/bin/\n\nENTRYPOINT [ \"tini\", \"-g\", \"--\", \"bin/docker-entrypoint.sh\" ]\nEXPOSE 9112 9735\n"
}