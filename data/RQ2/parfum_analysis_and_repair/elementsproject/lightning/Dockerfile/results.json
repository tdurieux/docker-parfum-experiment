{
  "startTime": 1674245961473,
  "endTime": 1674245963221,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 3,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 3,
        "columnEnd": 95
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 3,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "# This dockerfile is meant to compile a core-lightning x64 image\n# It is using multi stage build:\n# * downloader: Download litecoin/bitcoin and qemu binaries needed for core-lightning\n# * builder: Compile core-lightning dependencies, then core-lightning itself with static linking\n# * final: Copy the binaries required at runtime\n# The resulting image uploaded to dockerhub will only contain what is needed for runtime.\n# From the root of the repository, run \"docker build -t yourimage:yourtag .\"\nFROM debian:bullseye-slim as downloader\n\nRUN set -ex \\\n\t&& apt-get update \\\n\t&& apt-get install -y -qq --no-install-recommends ca-certificates dirmngr wget && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt\n\nRUN wget -qO /opt/tini \"https://github.com/krallin/tini/releases/download/v0.18.0/tini\" \\\n    && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855  /opt/tini\" | sha256sum -c - \\\n    && chmod +x /opt/tini\n\nARG BITCOIN_VERSION=22.0\nENV BITCOIN_TARBALL bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz\nENV BITCOIN_URL https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/$BITCOIN_TARBALL\nENV BITCOIN_ASC_URL https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/SHA256SUMS\n\nRUN mkdir /opt/bitcoin && cd /opt/bitcoin \\\n    && wget -qO $BITCOIN_TARBALL \"$BITCOIN_URL\" \\\n    && wget -qO bitcoin \"$BITCOIN_ASC_URL\" \\\n    && grep $BITCOIN_TARBALL bitcoin | tee SHA256SUMS \\\n    && sha256sum -c SHA256SUMS \\\n    && BD=bitcoin-$BITCOIN_VERSION/bin \\\n    && tar -xzvf $BITCOIN_TARBALL $BD/bitcoin-cli --strip-components=1 \\\n    && rm $BITCOIN_TARBALL\n\nENV LITECOIN_VERSION 0.16.3\nENV LITECOIN_PGP_KEY FE3348877809386C\nENV LITECOIN_URL https://download.litecoin.org/litecoin-${LITECOIN_VERSION}/linux/litecoin-${LITECOIN_VERSION}-x86_64-linux-gnu.tar.gz\nENV LITECOIN_ASC_URL https://download.litecoin.org/litecoin-${LITECOIN_VERSION}/linux/litecoin-${LITECOIN_VERSION}-linux-signatures.asc\nENV LITECOIN_SHA256 686d99d1746528648c2c54a1363d046436fd172beadaceea80bdc93043805994\n\n# install litecoin binaries\nRUN mkdir /opt/litecoin && cd /opt/litecoin \\\n    && wget -qO litecoin.tar.gz \"$LITECOIN_URL\" \\\n    && echo \"$LITECOIN_SHA256  litecoin.tar.gz\" | sha256sum -c - \\\n    && BD=litecoin-$LITECOIN_VERSION/bin \\\n    && tar -xzvf litecoin.tar.gz $BD/litecoin-cli --strip-components=1 --exclude=*-qt \\\n    && rm litecoin.tar.gz\n\nFROM debian:bullseye-slim as builder\n\nENV LIGHTNINGD_VERSION=master\nRUN apt-get update -qq && \\\n    apt-get install -qq -y --no-install-recommends \\\n        autoconf \\\n        automake \\\n        build-essential \\\n        ca-certificates \\\n        curl \\\n        dirmngr \\\n        gettext \\\n        git \\\n        gnupg \\\n        libpq-dev \\\n        libtool \\\n        libffi-dev \\\n        python3 \\\n        python3-dev \\\n        python3-mako \\\n        python3-pip \\\n        python3-venv \\\n        python3-setuptools \\\n        wget && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -q https://zlib.net/zlib-1.2.12.tar.gz \\\n&& tar xvf zlib-1.2.12.tar.gz \\\n&& cd zlib-1.2.12 \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n&& make \\\n&& make install && cd .. && rm zlib-1.2.12.tar.gz && rm -rf zlib-1.2.12\n\nRUN apt-get install -y --no-install-recommends unzip tclsh \\\n&& wget -q https://www.sqlite.org/2019/sqlite-src-3290000.zip \\\n&& unzip sqlite-src-3290000.zip \\\n&& cd sqlite-src-3290000 \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-readline --disable-threadsafe --disable-load-extension \\\n&& make \\\n&& make install && cd .. && rm sqlite-src-3290000.zip && rm -rf sqlite-src-3290000 && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -q https://gmplib.org/download/gmp/gmp-6.1.2.tar.xz \\\n&& tar xvf gmp-6.1.2.tar.xz \\\n&& cd gmp-6.1.2 \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-assembly \\\n&& make \\\n&& make install && cd .. && rm gmp-6.1.2.tar.xz && rm -rf gmp-6.1.2\n\nENV RUST_PROFILE=release\nENV PATH=$PATH:/root/.cargo/bin/\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nRUN rustup toolchain install stable --component rustfmt --allow-downgrade\n\nWORKDIR /opt/lightningd\nCOPY . /tmp/lightning\nRUN git clone --recursive /tmp/lightning . && \\\n    git checkout $(git --work-tree=/tmp/lightning --git-dir=/tmp/lightning/.git rev-parse HEAD)\nARG DEVELOPER=0\nENV PYTHON_VERSION=3\nRUN curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python3 - \\\n    && pip3 install --no-cache-dir -U pip \\\n    && pip3 install --no-cache-dir -U wheel \\\n    && /root/.local/bin/poetry config virtualenvs.create false \\\n    && /root/.local/bin/poetry install\n\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/tmp/lightning_install --enable-static && make -j3 DEVELOPER=${DEVELOPER} && make install\n\nFROM debian:bullseye-slim as final\n\nCOPY --from=downloader /opt/tini /usr/bin/tini\nRUN apt-get update && apt-get install -y --no-install-recommends socat inotify-tools python3 python3-pip libpq5\\\n    && rm -rf /var/lib/apt/lists/*\n\nENV LIGHTNINGD_DATA=/root/.lightning\nENV LIGHTNINGD_RPC_PORT=9835\nENV LIGHTNINGD_PORT=9735\nENV LIGHTNINGD_NETWORK=bitcoin\n\nRUN mkdir $LIGHTNINGD_DATA && \\\n    touch $LIGHTNINGD_DATA/config\nVOLUME [ \"/root/.lightning\" ]\nCOPY --from=builder /tmp/lightning_install/ /usr/local/\nCOPY --from=downloader /opt/bitcoin/bin /usr/bin\nCOPY --from=downloader /opt/litecoin/bin /usr/bin\nCOPY tools/docker-entrypoint.sh entrypoint.sh\n\nEXPOSE 9735 9835\nENTRYPOINT  [ \"/usr/bin/tini\", \"-g\", \"--\", \"./entrypoint.sh\" ]\n"
}