{
  "startTime": 1674216217060,
  "endTime": 1674216217919,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 23,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 13,
        "columnStart": 8,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nLABEL maintainer=\"Tsubasa Hirakawa <hirakawa@mprg.cs.chubu.ac.jp>\"\n\n# install base packages\nRUN apt-get -y update && apt-get -y upgrade && \\\n        apt-get install --no-install-recommends -y sudo cmake g++ gfortran \\\n        libhdf5-dev pkg-config build-essential \\\n        wget curl git htop tmux vim graphviz ffmpeg \\\n        libeigen3-dev libgtk-3-dev freeglut3-dev libvtk6-qt-dev \\\n        libtbb-dev libdc1394-22-dev libavcodec-dev libavformat-dev \\\n        libswscale-dev libjpeg-dev libjasper-dev libpng++-dev libtiff5-dev \\\n        libopenexr-dev libwebp-dev libhdf5-dev libopenblas-dev liblapacke-dev \\\n        libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev \\\n        tk-dev libgdbm-dev libc6-dev libbz2-dev && \\\n        apt-get -y autoremove && apt-get -y clean && apt-get -y autoclean && \\\n        rm -rf /var/lib/apt/lists/*\n\n\n# cuda path\nENV CUDA_ROOT /usr/local/cuda\nENV PATH $PATH:$CUDA_ROOT/bin\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:$CUDA_ROOT/lib64:$CUDA_ROOT/lib:/usr/local/nvidia/lib64:/usr/local/nvidia/lib\nENV LIBRARY_PATH /usr/local/nvidia/lib64:/usr/local/nvidia/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib64:/usr/local/cuda/lib$LIBRARY_PATH\n\n\n# python 3.6\n# build python 3.6 from source\nRUN wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz && tar -xvf Python-3.6.9.tgz && \\\n    cd Python-3.6.9 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared --enable-optimizations && make altinstall && \\\n    ldconfig && rm -rf /opt/Python-3.6.9.tgz /opt/Python-3.6.9/ && \\\n    ln -sf /usr/local/bin/python3.6 /usr/local/bin/python3\nRUN pip3.6 install --upgrade pip && \\\n    pip3.6 install --upgrade --no-cache-dir wheel six setuptools cython numpy scipy matplotlib seaborn scikit-learn scikit-image pillow requests jupyterlab networkx h5py pandas plotly protobuf tqdm hacking nose mock converge setproctitle tensorboardx && \\\n    pip3.6 install https://download.pytorch.org/whl/cu90/torch-0.4.1-cp36-cp36m-linux_x86_64.whl && \\\n    pip3.6 install torchvision==0.2.1\n\n\n# opencv install (biuld from source)\nWORKDIR /opt\nENV OPENCV_VERSION=\"3.4.1\"\nRUN git clone https://github.com/opencv/opencv.git && \\\n        cd /opt/opencv && git checkout ${OPENCV_VERSION} && \\\n        mkdir build && cd build && \\\n        cmake .. -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF \\\n            -DWITH_CUDA=OFF -DENABLE_AVX=ON -DWITH_OPENGL=ON \\\n            -DWITH_OPENCL=ON -DWITH_IPP=ON -DWITH_TBB=ON \\\n            -DWITH_EIGEN=ON -DWITH_V4L=ON -DBUILD_TESTS=OFF \\\n            -DBUILD_PERF_TESTS=OFF -DCMAKE_BUILD_TYPE=RELEASE \\\n            -DCMAKE_INSTALL_PREFIX=$(python3.6 -c \"import sys; print(sys.prefix)\") \\\n            -DPYTHON_EXECUTABLE=$(which python3.6) \\\n            -DPYTHON_INCLUDE_DIR=$(python3.6 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\\n            -DPYTHON_PACKAGES_PATH=$(python3.6 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") .. && \\\n        make -j8 && make install && \\\n        echo \"/usr/local/lib\" > /etc/ld.so.conf.d/local.conf && \\\n        ldconfig && rm -rf /opt/opencv\n\n\n# user settings ===========================================\n# add general user\nENV USER_NAME=dockeruser\nENV HOME=/home/${USER_NAME}\n\n# add user to sudo group\nWORKDIR /etc/sudoers.d\nRUN echo \"${USER_NAME} ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/${USER_NAME}\n\n# change permissions so that a general user can add user and group\n# resotre permission in entrypoint.sh\nRUN chmod u+s /usr/sbin/useradd && chmod u+s /usr/sbin/groupadd\n\nCOPY entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\n# =========================================================\n"
}