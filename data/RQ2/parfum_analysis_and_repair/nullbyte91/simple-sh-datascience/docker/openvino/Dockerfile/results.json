{
  "startTime": 1674254813343,
  "endTime": 1674254814549,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 56,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 22,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nLABEL maintainer=\"nullbyte.in@gmail.com\"\n\nARG proxy\n\nENV http_proxy $proxy\nENV https_proxy $proxy\n\nRUN echo \"check_certificate = off\" >> ~/.wgetrc\nRUN echo \"[global] \\n\\\ntrusted-host = pypi.python.org \\n \\\n\\t               pypi.org \\n \\\n\\t              files.pythonhosted.org\" >> /etc/pip.conf\n\n# >> START Install base software\n# Basic update and Set the locale to en_US.UTF-8, because the Yocto build fails without any locale set.\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends locales ca-certificates &&  rm -rf /var/lib/apt/lists/*\n\n# Locale set to something minimal like POSIX\nRUN locale-gen en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# Exit when RUN get non-zero value\nRUN set -e\n\n# Get basic packages\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl \\\n        wget \\\n        git \\\n        python \\\n        python-dev \\\n        python-pip \\\n        python-wheel \\\n        python-numpy \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        python3-wheel \\\n        python3-numpy \\\n        python3-setuptools \\\n        libcurl3-dev  \\\n        gcc \\\n        sox \\\n        libsox-fmt-mp3 \\\n        htop \\\n        nano \\\n        swig \\\n        cmake \\\n        libboost-all-dev \\\n        zlib1g-dev \\\n        libbz2-dev \\\n        liblzma-dev \\\n        pkg-config \\\n        libsox-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install pip\nRUN wget https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n# # Install openvivoToolKit\nARG DOWNLOAD_LINK=http://registrationcenter-download.intel.com/akdlm/irc_nas/16612/l_openvino_toolkit_p_2020.2.120.tgz\nARG INSTALL_DIR=/opt/intel/openvino\nARG TEMP_DIR=/tmp/openvino_installer\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    wget \\\n    cpio \\\n    sudo \\\n    lsb-release && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p $TEMP_DIR && cd $TEMP_DIR && \\\n    wget -c $DOWNLOAD_LINK && \\\n    tar xf l_openvino_toolkit*.tgz && \\\n    cd l_openvino_toolkit* && \\\n    sed -i 's/decline/accept/g' silent.cfg && \\\n    ./install.sh -s silent.cfg && \\\n    rm -rf $TEMP_DIR && rm l_openvino_toolkit*.tgz\n\nRUN $INSTALL_DIR/install_dependencies/install_openvino_dependencies.sh\n\n# OpenCV Fix\nRUN pip3 install --no-cache-dir opencv-python\nRUN apt-get update && apt-get install -y --no-install-recommends \\ \n    libcanberra-gtk-module \\\n    libcanberra-gtk3-module && rm -rf /var/lib/apt/lists/*;\n\n# Docker Read/Write permission Issue\nARG USER_ID\nARG GROUP_ID\n\nRUN apt-get update && apt-get install -y --no-install-recommends sudo && rm -rf /var/lib/apt/lists/*;\n\nRUN addgroup --gid $GROUP_ID user\nRUN adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID user &&  \\\n    echo user:user | sudo chpasswd && \\\n    usermod -aG sudo user\nUSER user\n\n# OpenVINO Pre-trained model downloader dep\nRUN pip3 install --no-cache-dir requests PyYAML\n\nRUN echo \"source /opt/intel/openvino/bin/setupvars.sh -pyver 3.5\" >> ~/.bashrc"
}