diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nullbyte91/simple-sh-datascience/docker/x86_64/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nullbyte91/simple-sh-datascience/docker/x86_64/Dockerfile/repaired.Dockerfile
index f961815..c8c200c 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nullbyte91/simple-sh-datascience/docker/x86_64/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nullbyte91/simple-sh-datascience/docker/x86_64/Dockerfile/repaired.Dockerfile
@@ -23,7 +23,7 @@ trusted-host = pypi.python.org \n \
 \t              files.pythonhosted.org" >> /etc/pip.conf
 
 # Get basic packages
-RUN apt-get update && apt-get install -y \
+RUN apt-get update && apt-get install --no-install-recommends -y \
     apparmor \
     aufs-tools \
     automake \
@@ -66,24 +66,24 @@ RUN apt-get update && apt-get install -y \
     autoconf \
     libtool \
     build-essential \
-    g++ \ 
+    g++ \
     cmake && rm -rf /var/lib/apt/lists/*
 
 # Install Cross-compiling ToolChain
-RUN apt-get update && apt-get install -y crossbuild-essential-arm64
+RUN apt-get update && apt-get install --no-install-recommends -y crossbuild-essential-arm64 && rm -rf /var/lib/apt/lists/*;
 
 # Build and install Google's Protobuf library
 # Download and Extract
 RUN mkdir -p $HOME/google && \
     cd $HOME/google && \
     wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-all-3.5.1.tar.gz && \
-    tar -zxvf protobuf-all-3.5.1.tar.gz
+    tar -zxvf protobuf-all-3.5.1.tar.gz && rm protobuf-all-3.5.1.tar.gz
 
 # Build a native (x86_64) version
 RUN cd $HOME/google/protobuf-3.5.1 && \
     mkdir x86_build && cd x86_build && \
     ../configure --prefix=$HOME/armnn-devenv/google/x86_64_pb_install && \
-    make install -j16 
+    make install -j16
 
 # Build the arm64 version of the protobuf libraries
 RUN cd $HOME/google/protobuf-3.5.1 && \
@@ -102,7 +102,7 @@ RUN apt-get update && apt-get install -y \
     --no-install-recommends libboost-all-dev \
     libgflags-dev libgoogle-glog-dev liblmdb-dev \
     libopenblas-dev \
-    libatlas-base-dev 
+    libatlas-base-dev && rm -rf /var/lib/apt/lists/*;
 
 
 # Download
@@ -114,9 +114,9 @@ RUN cd $HOME && git clone https://github.com/BVLC/caffe.git
 COPY Makefile.config /tmp
 RUN mv /tmp/Makefile.config $HOME/caffe/
 
-# Dep Error - Bug ARMNN 
-RUN apt-get update && apt-get install -y \
-     python-numpy
+# Dep Error - Bug ARMNN
+RUN apt-get update && apt-get install --no-install-recommends -y \
+     python-numpy && rm -rf /var/lib/apt/lists/*;
 
 # Setup Env
 # ENV PATH=$HOME/armnn-devenv/google/x86_64_pb_install/bin/:$PATH
@@ -133,13 +133,13 @@ RUN cd $HOME/caffe/ && mkdir build && cd build && \
     make runtest -j8
 
 # Build Boost library for arm64
-RUN cd $HOME && wget http://downloads.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.gz && \
+RUN cd $HOME && wget https://downloads.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.gz && \
     tar xfz boost_1_64_0.tar.gz && \
     rm boost_1_64_0.tar.gz && \
     cd boost_1_64_0 && \
     echo "using gcc : arm : aarch64-linux-gnu-g++ ;" > user_config.jam && \
     ./bootstrap.sh --prefix=$HOME/armnn-devenv/boost_arm64_install && \
-    ./b2 install toolset=gcc-arm link=static cxxflags=-fPIC --with-filesystem --with-test --with-log --with-program_options -j32 --user-config=user_config.jam 
+    ./b2 install toolset=gcc-arm link=static cxxflags=-fPIC --with-filesystem --with-test --with-log --with-program_options -j32 --user-config=user_config.jam
 
 # Build Compute Library
 RUN cd $HOME/armnn-devenv/ && git clone https://github.com/ARM-software/ComputeLibrary.git && \