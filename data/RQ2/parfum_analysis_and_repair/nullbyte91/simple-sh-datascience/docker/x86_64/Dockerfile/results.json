{
  "startTime": 1674248576413,
  "endTime": 1674248577462,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 16,
        "columnEnd": 100
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 69,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 99,
        "lineEnd": 104,
        "columnStart": 22,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 22,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nENV TERM linux\nENV DEBIAN_FRONTEND noninteractive\n\n# Forward system proxy setting\n# ARG proxy\n# ENV http_proxy $proxy\n# ENV https_proxy $proxy\n\n# Basic apt update\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends locales ca-certificates &&  rm -rf /var/lib/apt/lists/*\n\n# Set the locale to en_US.UTF-8, because the Yocto build fails without any locale set.\nRUN locale-gen en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# Again, off the certificare\nRUN echo \"check_certificate = off\" >> ~/.wgetrc\nRUN echo \"[global] \\n\\\ntrusted-host = pypi.python.org \\n \\\n\\t               pypi.org \\n \\\n\\t              files.pythonhosted.org\" >> /etc/pip.conf\n\n# Get basic packages\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    apparmor \\\n    aufs-tools \\\n    automake \\\n    bash-completion \\\n    btrfs-tools \\\n    build-essential \\\n    cmake \\\n    createrepo \\\n    curl \\\n    dpkg-sig \\\n    g++ \\\n    gcc \\\n    git \\\n    iptables \\\n    jq \\\n    libapparmor-dev \\\n    libc6-dev \\\n    libcap-dev \\\n    libsystemd-dev \\\n    libyaml-dev \\\n    mercurial \\\n    net-tools \\\n    parallel \\\n    pkg-config \\\n    python-dev \\\n    python-mock \\\n    python-pip \\\n    python-setuptools \\\n    python-websocket \\\n    golang-go \\\n    iproute2 \\\n    iputils-ping \\\n    vim-common \\\n    vim \\\n    wget \\\n    libtool \\\n    unzip \\\n    scons \\\n    curl \\\n    autoconf \\\n    libtool \\\n    build-essential \\\n    g++ \\\n    cmake && rm -rf /var/lib/apt/lists/*\n\n# Install Cross-compiling ToolChain\nRUN apt-get update && apt-get install --no-install-recommends -y crossbuild-essential-arm64 && rm -rf /var/lib/apt/lists/*;\n\n# Build and install Google's Protobuf library\n# Download and Extract\nRUN mkdir -p $HOME/google && \\\n    cd $HOME/google && \\\n    wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-all-3.5.1.tar.gz && \\\n    tar -zxvf protobuf-all-3.5.1.tar.gz && rm protobuf-all-3.5.1.tar.gz\n\n# Build a native (x86_64) version\nRUN cd $HOME/google/protobuf-3.5.1 && \\\n    mkdir x86_build && cd x86_build && \\\n    ../configure --prefix=$HOME/armnn-devenv/google/x86_64_pb_install && \\\n    make install -j16\n\n# Build the arm64 version of the protobuf libraries\nRUN cd $HOME/google/protobuf-3.5.1 && \\\n    mkdir arm64_build && cd arm64_build && \\\n    export CC=aarch64-linux-gnu-gcc && \\\n    export CXX=aarch64-linux-gnu-g++ && \\\n    ../configure --host=aarch64-linux \\\n    --prefix=$HOME/armnn-devenv/google/arm64_pb_install \\\n    --with-protoc=$HOME/armnn-devenv/google/x86_64_pb_install/bin/protoc && \\\n    make install -j16\n\n# Build Caffe for x86_64\n# Dep Install\nRUN apt-get update && apt-get install -y \\\n    libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev \\\n    --no-install-recommends libboost-all-dev \\\n    libgflags-dev libgoogle-glog-dev liblmdb-dev \\\n    libopenblas-dev \\\n    libatlas-base-dev && rm -rf /var/lib/apt/lists/*;\n\n\n# Download\nRUN cd $HOME && git clone https://github.com/BVLC/caffe.git\n\n# Makefile update\n# To Do: Don't copy the Local Make file to docker\n# RUN cd $HOME/caffe/ && rm Makefile.config.example\nCOPY Makefile.config /tmp\nRUN mv /tmp/Makefile.config $HOME/caffe/\n\n# Dep Error - Bug ARMNN\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n     python-numpy && rm -rf /var/lib/apt/lists/*;\n\n# Setup Env\n# ENV PATH=$HOME/armnn-devenv/google/x86_64_pb_install/bin/:$PATH\n# ENV LD_LIBRARY_PATH=$HOME/armnn-devenv/google/x86_64_pb_install/lib/:$LD_LIBRARY_PATH\n\n# Compile CAFFE\nRUN cd $HOME/caffe/ && mkdir build && cd build && \\\n    export PATH=$HOME/armnn-devenv/google/x86_64_pb_install/bin/:$PATH && \\\n    export LD_LIBRARY_PATH=$HOME/armnn-devenv/google/x86_64_pb_install/lib/:$LD_LIBRARY_PATH && \\\n    ldconfig && \\\n    cmake ../ && \\\n    make all -j8 && \\\n    make test -j8 && \\\n    make runtest -j8\n\n# Build Boost library for arm64\nRUN cd $HOME && wget https://downloads.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.gz && \\\n    tar xfz boost_1_64_0.tar.gz && \\\n    rm boost_1_64_0.tar.gz && \\\n    cd boost_1_64_0 && \\\n    echo \"using gcc : arm : aarch64-linux-gnu-g++ ;\" > user_config.jam && \\\n    ./bootstrap.sh --prefix=$HOME/armnn-devenv/boost_arm64_install && \\\n    ./b2 install toolset=gcc-arm link=static cxxflags=-fPIC --with-filesystem --with-test --with-log --with-program_options -j32 --user-config=user_config.jam\n\n# Build Compute Library\nRUN cd $HOME/armnn-devenv/ && git clone https://github.com/ARM-software/ComputeLibrary.git && \\\n    cd ComputeLibrary && \\\n    scons arch=arm64-v8a neon=1 opencl=1 embed_kernels=1 extra_cxx_flags=\"-fPIC\" -j8 internal_only=0\n\n# Build ArmNN\nRUN cd $HOME && git clone https://github.com/ARM-software/armnn.git && \\\n    cd armnn && mkdir build && cd build && \\\n    export CXX=aarch64-linux-gnu-g++ && \\\n    export CC=aarch64-linux-gnu-gcc && \\\n    cmake .. \\\n    -DARMCOMPUTE_ROOT=$HOME/armnn-devenv/ComputeLibrary \\\n    -DARMCOMPUTE_BUILD_DIR=$HOME/armnn-devenv/ComputeLibrary/build/ \\\n    -DBOOST_ROOT=$HOME/armnn-devenv/boost_arm64_install/ \\\n    -DARMCOMPUTENEON=1 -DARMCOMPUTECL=1 -DARMNNREF=1 \\\n    -DCAFFE_GENERATED_SOURCES=$HOME/caffe/build/include \\\n    -DBUILD_CAFFE_PARSER=1 \\\n    -DPROTOBUF_ROOT=$HOME/armnn-devenv/google/x86_64_pb_install/ \\\n    -DPROTOBUF_LIBRARY_DEBUG=$HOME/armnn-devenv/google/arm64_pb_install/lib/libprotobuf.so.15.0.1 \\\n    -DPROTOBUF_LIBRARY_RELEASE=$HOME/armnn-devenv/google/arm64_pb_install/lib/libprotobuf.so.15.0.1 && \\\n    make -j8\n"
}