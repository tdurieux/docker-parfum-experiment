{
  "startTime": 1674250395627,
  "endTime": 1674250396253,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# from node lts alpine\nFROM node:lts-alpine AS repo\n\n# env vars to configure the system\n\n# Chooses where the static assets are served from\nARG STATIC_DIRECTORY=/static\n# Allows for the frontend to be run under a different prefix\nARG BASE_PATH=/\n# Same as above, but for the api\nARG API_BASE_PATH=/\n# Triggers a bunch of optimizations\nARG NODE_ENV=production\n# Allows for a faster webpack conf to be used during testing\nARG WEBPACK_FILE=prod\n# Defines the string that shows up on the main page [for debugging deployments]\nARG INFLUXDB_SHA=local\n# migrating to this one\nARG UI_SHA\n\n# optional ones, used for production\n\n# Where is quartz? normally it's behind /auth or we are in OSS mode\nARG CLOUD_URL\n# Configure what honey badger uses for auth\nARG HONEYBADGER_KEY\n# Configure the amplitude access key\nARG AMPLITUDE_KEY\n# Throw any string up in the header, we use it for google tag manager\nARG INJECT_HEADER\n# Injecting strings into the html never went wrong. we use this for google tag manager\nARG INJECT_BODY\n# Location for Rudderstack data\nARG RUDDERSTACK_DATA_PLANE_URL\n# Rudderstack write key\nARG RUDDERSTACK_WRITE_KEY\n# Global Search API key\nARG GLOBALSEARCH_API_KEY\n# Global Search App ID\nARG GLOBALSEARCH_APP_ID\n# Google Experiment ID for PAYG $250 Credit\nARG PAYG_CREDIT_EXPERIMENT_ID\n\nCOPY . /repo/ui\nWORKDIR /repo/ui\n\nRUN apk \\\n    --update \\\n    --no-cache \\\n    --virtual build-dependencies \\\n    add \\\n    git\n\n# these are all run together as docker's caching mechanism\n# makes big steps like yarn install expensive\nRUN yarn install --production=false && \\\n    yarn generate && \\\n    $(npm bin)/webpack --config ./webpack.${WEBPACK_FILE}.ts && \\\n    rm -rf ./node_modules && yarn cache clean;\n\nRUN mkdir /includes\n\nFROM nginx:stable-alpine AS deploy\nWORKDIR /repo\nCOPY --from=repo /repo/ui/build /usr/share/nginx/html\nCOPY ./docker/nginx.conf /etc/nginx/nginx.conf\nCOPY ./docker/includes /includes\n# RUN useradd --no-create-home nginx\n\nEXPOSE 9999\n\nCMD [\"nginx\", \"-g\", \"daemon off;\", \"-c\", \"/etc/nginx/nginx.conf\"]\n"
}