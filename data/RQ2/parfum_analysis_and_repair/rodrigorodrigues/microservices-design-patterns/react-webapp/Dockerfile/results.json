{
  "startTime": 1674251379516,
  "endTime": 1674251380313,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 55,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 55,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12-buster-slim as builder\nARG PORT\n\n# Create app directory\nWORKDIR /usr/src/app\n\nENV PATH /usr/src/app/node_modules/.bin:$PATH\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\n\n#COPY node_modules/ ./\n\nRUN apt-get update && apt-get install --no-install-recommends npm nodejs -y && apt-get install --no-install-recommends netcat-openbsd -y && rm -rf /var/lib/apt/lists/*;\n\nRUN npm install && npm cache clean --force;\nRUN npm install react-scripts -g && npm cache clean --force;\n\n# Bundle app source\n\nCOPY . .\n\nRUN npm run build\n\n### STAGE 2: Production Environment ###\nFROM nginx:stable-alpine\nARG PORT\n\nENV PORT=$PORT\n\n\nCOPY --from=builder /usr/src/app/build /usr/share/nginx/html\nCOPY --from=builder /usr/src/app/nginx.conf /etc/nginx/conf.d/default.conf\n\nRUN echo \"PORT = $PORT\"\n\nRUN sed -i 's/PORT/'\"$PORT\"'/g' /etc/nginx/conf.d/default.conf\n\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\n\nEXPOSE $PORT\n\nENV JAVA_CMD=\"nginx-debug\"\nCMD [\"nginx-debug\"]"
}