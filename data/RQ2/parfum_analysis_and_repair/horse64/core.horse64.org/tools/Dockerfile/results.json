{
  "startTime": 1674217727848,
  "endTime": 1674217729109,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 40,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 21,
        "columnEnd": 194
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 49,
        "columnEnd": 153
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 21,
        "columnEnd": 194
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 49,
        "columnEnd": 153
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n# Upgrade image in general:\nRUN apt update -y && DEBIAN_FRONTEND=noninteractive apt upgrade -y\n\n# Install various tools like git, python3, and more:\nRUN apt update -y && DEBIAN_FRONTEND=noninteractive apt --no-install-recommends install -y git zip gdb bash python3 make sed vim gcc g++ g++-mingw-w64 gcc-mingw-w64 mingw-w64 gcc-aarch64-linux-gnu g++-aarch64-linux-gnu && rm -rf /var/lib/apt/lists/*;\n\n# Install needed base system libraries:\nRUN DEBIAN_FRONTEND=noninteractive apt update && DEBIAN_FRONTEND=noninteractive apt --no-install-recommends install -y check automake libtool autotools-dev libreadline-dev cmake && rm -rf /var/lib/apt/lists/*;\n\n# Install valgrind manually for newer version:\nRUN valgrind --help || { echo \"No valgrind yet, this is expected.\"; }\nRUN mkdir -p /tmp/valgrind && cd /tmp/valgrind && git clone git://sourceware.org/git/valgrind.git .\nRUN cd /tmp/valgrind && git checkout 57c823aefea32e1fba3af47d29e66313d0bc13cd\nRUN cd /tmp/valgrind && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN cd /tmp/valgrind && make && make install\nRUN valgrind --help; valgrind --version\n\n# Command to build release builds, and optionally run tests:\nRUN echo \"#!/bin/bash\" > /do-build\nRUN echo \"cd /compile-tree/\" >> /do-build\nRUN echo \"if [ ! -e ./.git ]; then\" >> /do-build\nRUN echo \"    git init .\" >> /do-build\nRUN echo \"    git remote add origin https://github.com/horse64/core.horse64.org\" >> /do-build\nRUN echo \"    git fetch\" >> /do-build\nRUN echo \"    git checkout -b main -t origin/main\" >> /do-build\nRUN echo \"    git submodule foreach git reset --hard\" >> /do-build\nRUN echo \"    make check-submodules || git submodule update --init\" >> /do-build\nRUN echo \"fi\" >> /do-build\nRUN echo \"rm -f ./binaries/* && make veryclean && if [ \\\"x\\$RUN_TESTS\\\" = xyes ]; then echo \"\"; echo \\\" *** BUILDING DEBUG (for tests) ***\\\"; make clean debug; echo \\\" *** RUNNING TESTS (DEBUG)***\\\"; echo \"\"; make test; fi && make clean release && mv horsec ./binaries/horsec-x64 && chmod -R 777 /compile-tree/binaries/* && if [ \\\"x\\$RUN_TESTS\\\" = xyes ]; then echo \"\"; echo \\\" *** RUNNING TESTS (release) ***\\\"; echo \"\"; make test; fi && CC=x86_64-w64-mingw32-gcc make veryclean release && rm -f ./binaries/horsec-x64.exe && mv horsec.exe ./binaries/horsec-x64.exe && CC=aarch64-linux-gnu-gcc make veryclean release && mv horsec ./binaries/horsec-aarch64\" >> /do-build\nRUN chmod +x /do-build\nRUN mkdir -p /compile-tree/\nWORKDIR /compile-tree/\n\n# Volume to write resulting binaries to:\nVOLUME /compile-tree/binaries/\n\nCMD /do-build\n"
}