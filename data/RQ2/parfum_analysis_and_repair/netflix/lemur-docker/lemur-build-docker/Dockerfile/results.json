{
  "startTime": 1674220385847,
  "endTime": 1674220387137,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 112
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#############  BUILDER  #############\nFROM ubuntu:20.04 as builder\nLABEL maintainer=\"Netflix Open Source Development <talent@netflix.com>\"\n\nARG DEBIAN_FRONTEND=noninteractive\nARG VERSION\n\nARG URLCONTEXT\n\nCOPY lemur/ /opt/lemur\nWORKDIR /opt/lemur\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends upgrade && \\\n    apt-get install -y --no-install-recommends libpq-dev curl build-essential locales libffi-dev libsasl2-dev libldap2-dev \\\n        dh-autoreconf git python3-dev python3-pip python3-venv python3-wheel nodejs npm && \\\n    locale-gen en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && \\\n    npm config set registry https://registry.npmjs.org/ && \\\n    npm install npm -g && \\\n    echo \"Running with nodejs:\" && node -v && \\\n    python3 -m venv /opt/venv && \\\n    echo \"Running with python:\" && /opt/venv/bin/python3 -c 'import platform; print(platform.python_version())' && \\\n    /opt/venv/bin/python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel && \\\n    /opt/venv/bin/python3 -m pip install --no-cache-dir -e . && \\\n    npm install --unsafe-perm && \\\n    node_modules/.bin/gulp --cwd /opt/lemur build && \\\n    node_modules/.bin/gulp --cwd /opt/lemur package && \\\n    npm cache clean --force && \\\n    rm -rf node_modules && \\\n    python3 -c 'print(\" \\033[32m BUILDER DONE \\033[0m \")' && rm -rf /var/lib/apt/lists/*;\n\n#############  APP  #############\nFROM ubuntu:20.04\nLABEL maintainer=\"Netflix Open Source Development <talent@netflix.com>\"\n\nARG DEBIAN_FRONTEND=noninteractive\nARG VERSION\n\nARG URLCONTEXT\n\nENV uid 1337\nENV gid 1337\nENV user lemur\nENV group lemur\n\n# TODO: do not copy build artefacts\nCOPY --from=builder /opt/lemur /opt/lemur\nCOPY --from=builder /opt/venv /opt/venv\n\nWORKDIR /opt/lemur\n\nRUN addgroup --gid ${gid} ${group} && \\\n    adduser --gecos \"\" --disabled-password --ingroup ${group} --uid ${uid} ${user} && \\\n    apt-get update && apt-get -y --no-install-recommends upgrade && \\\n    apt-get -y --no-install-recommends install python3 locales haveged supervisor curl postgresql-client openssl && \\\n    locale-gen en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && \\\n    mkdir -p /opt/lemur /home/lemur/.lemur/ && \\\n    touch /home/lemur/.lemur/lemur.log && \\\n    chown -R $user:$group /opt/lemur/ /home/lemur/.lemur/ && \\\n    chmod o+w /home/lemur/.lemur/lemur.log && \\\n    apt-get clean autoclean && \\\n    apt-get autoremove --yes && \\\n    rm -rf /var/lib/{apt,dpkg,cache,log}/ && \\\n    python3 -c 'print(\" \\033[32m APP BUILD DONE \\033[0m \")' && rm -rf /var/lib/apt/lists/*;\n\nCOPY ./files/entrypoint /\n#COPY lemur.conf.py /home/lemur/.lemur/lemur.conf.py\nCOPY ./files/supervisor.conf /\n\nRUN chmod +x /entrypoint\nWORKDIR /\n\nHEALTHCHECK --interval=12s --timeout=12s --start-period=30s \\\n CMD curl --fail http://localhost:8000/api/1/healthcheck | grep -q ok || exit 1\n\nUSER root\n\nENTRYPOINT [\"/entrypoint\"]\n\nCMD [\"/usr/bin/supervisord\",\"-c\",\"/supervisor.conf\"]\n"
}