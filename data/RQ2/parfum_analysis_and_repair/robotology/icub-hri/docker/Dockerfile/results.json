{
  "startTime": 1674255696843,
  "endTime": 1674255699393,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 377,
        "lineEnd": 377,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 418,
        "lineEnd": 418,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 394,
        "lineEnd": 394,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 394,
        "lineEnd": 394,
        "columnStart": 33,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 99,
        "columnEnd": 122
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 129,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 99,
        "columnEnd": 122
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 129,
        "columnStart": 22,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\n\n# If host is running squid-deb-proxy on port 8000, populate /etc/apt/apt.conf.d/30proxy\n# By default, squid-deb-proxy 403s unknown sources, so apt shouldn't proxy ppa.launchpad.net\n# this will cache apt-get update results for the rest of the dockerfile allowing docker to cache apt-get install commands\nRUN route -n | awk '/^0.0.0.0/ {print $2}' > /tmp/host_ip.txt\nRUN echo \"HEAD /\" | nc `cat /tmp/host_ip.txt` 8000 | grep squid-deb-proxy \\\n  && (echo \"Acquire::http::Proxy \\\"http://$(cat /tmp/host_ip.txt):8000\\\";\" > /etc/apt/apt.conf.d/30proxy) \\\n  && (echo \"Acquire::http::Proxy::ppa.launchpad.net DIRECT;\" >> /etc/apt/apt.conf.d/30proxy) \\\n  || echo \"No squid-deb-proxy detected on docker host\"\n\n#create icub user\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install sudo git && rm -rf /var/lib/apt/lists/*;\n\nRUN useradd -m icub && echo \"icub:icub\" | chpasswd && adduser icub sudo && usermod -aG video icub && usermod -s /bin/bash icub\n\nCOPY ./keyboard /etc/default/keyboard\n\nARG cores=6\nENV SRC_FOLDER=/usr/local/src/robot\nARG localBash=/home/icub/.bashrc\n\n# Clone libraries\nRUN mkdir $SRC_FOLDER\nWORKDIR $SRC_FOLDER\nRUN git clone https://github.com/opencv/opencv.git \t\nRUN git clone https://github.com/opencv/opencv_contrib.git\nRUN git clone https://github.com/robotology/yarp.git\nRUN git clone https://github.com/robotology/icub-main.git\nRUN git clone https://github.com/robotology/icub-contrib-common.git\nRUN git clone https://github.com/kmarkus/rFSM.git\nRUN git clone https://github.com/robotology/robots-configuration.git\nRUN git clone https://github.com/BVLC/caffe.git\nRUN git clone https://github.com/SheffieldML/GPy.git\nRUN git clone https://github.com/robotology/segmentation.git\nRUN git clone https://github.com/robotology/himrep.git\nRUN git clone https://github.com/robotology/iol.git\nRUN git clone https://github.com/robotology/stereo-vision.git\nRUN git clone https://github.com/robotology/speech.git\nRUN git clone https://github.com/robotology/boost-mil.git\nRUN git clone https://github.com/dcam0050/human-sensing-SAM.git\nRUN git clone https://github.com/robotology/kinect-wrapper.git\nRUN git clone https://github.com/SheffieldML/GPyOpt.git\nRUN git clone https://github.com/avin2/SensorKinect.git\nRUN git clone https://github.com/pitzer/SiftGPU.git\nRUN git clone https://github.com/towardthesea/karmaWYSIWYD.git\n\n# Install icub ppa\nRUN sh -c 'echo \"deb http://www.icub.org/ubuntu xenial contrib/science\" > /etc/apt/sources.list.d/icub.list'\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 57A5ACB6110576A6 && apt-get update && apt-get install --no-install-recommends -y wget && rm -rf /var/lib/apt/lists/*;\n\n#Python\nRUN wget https://repo.continuum.io/archive/Anaconda2-4.2.0-Linux-x86_64.sh\nRUN cd $SRC_FOLDER && bash Anaconda2-4.2.0-Linux-x86_64.sh -b -p ./anaconda2 \t&& \t\\\n\trm $SRC_FOLDER/anaconda2/lib/libgomp.so* \t\t\t\t\t\t\t\t\t&& \t\\\n\trm $SRC_FOLDER/anaconda2/lib/libstdc++.so* \t\t\t\t\t\t\t\t\t&& \t\\\n\trm $SRC_FOLDER/anaconda2/lib/libgfortran.so* \t\t\t\t\t\t\t\t&& \t\\\n\trm $SRC_FOLDER/anaconda2/lib/libQt5*\t\t\t\t\t\t\t\t\t\t&& \t\\\n\trm -r $SRC_FOLDER/anaconda2/lib/cmake/Qt5*\n\n#Install required libraries\nRUN apt-get update && apt-get install --no-install-recommends -y icub-common \\\n\tbuild-essential \\\n\tcmake-curses-gui \\\n\tpciutils \\\n\twget \\\n\tlibgtk2.0-dev \\\n\tmesa-utils git \\\n\tpkg-config \\\n\tlibavcodec-dev \\\n\tlibavformat-dev \\\n\tlibswscale-dev \\\n\tlibtbb2 \\\n\tlibtbb-dev \\\n\tlibjpeg-dev \\\n\tlibpng-dev \\\n\tlibtiff-dev \\\n\tlibjasper-dev \\\n\tlibdc1394-22-dev \\\n\tcheckinstall \\\n\tlibopenblas-dev \\\n\tliblapack-dev \\\n\tliblapacke-dev \\\n\tlibboost-all-dev \\\n\tdoxygen \\\n\tlibeigen3-dev \\\n\tbash-completion \\\n\tapt-utils \\\n\tvim \\\n\tnet-tools \\\n\tsoftware-properties-common \\\n\tswig3.0 \\\n\tliblua5.2-dev \\\n\txterm \\\n\tgdb \\\n\tgedit \\\n\tlibopenblas-dev \\\n\tlibatlas-dev \\\n\tlibboost-all-dev \\\n\tlibprotobuf-dev \\\n\tprotobuf-compiler \\\n\tlibgoogle-glog-dev \\\n\tlibgflags-dev \\\n\tlibleveldb-dev \\\n\tlibhdf5-serial-dev \\\n\tliblmdb-dev \\\n\tlibsnappy-dev \\\n\thdf5-tools \\\n\tlibatlas-base-dev \\\n\tlibatlas3-base \\\n\tlibglew-dev \\\n\tlibdevil-dev \\\n\tpython-tk \\\n\tusbutils \\\n\tiputils-ping \\\n\topenssh-server \\\n\tlibopenni-dev \\\n\tbison \\\n\tflex \\\n\tlibpq-dev \\\n\tlibsqlite3-dev \\\n\tpostgresql \\\n\tpgadmin3 \\\n\texpect \\\n\tlibasound2 \\\n\tlibpango1.0-0 \\\n\tpulseaudio-utils \\\n\talsa-base \\\n\talsa-utils && rm -rf /var/lib/apt/lists/*;\n\nENV PYTHONPATH=$SRC_FOLDER/anaconda2/bin\nENV PATH=$PYTHONPATH:$PATH\n\nRUN wget https://download.sublimetext.com/sublime-text_build-3126_amd64.deb && \\\n\tdpkg -i sublime-text_build-3126_amd64.deb && rm sublime-text_build-3126_amd64.deb\n\nRUN cp -r opencv opencv3 && mv opencv opencv2\n\nARG opencv3Hash=70bbf17b133496bd7d54d034b0f94bd869e0e810\nRUN cd opencv3 && git checkout -b localBranch $opencv3Hash\n\nARG opencv3ContribHash=86342522b0eb2b16fa851c020cc4e0fef4e010b7\nRUN cd opencv_contrib && git checkout -b localBranch $opencv3ContribHash\n\nRUN mkdir opencv3/build \t&& cd opencv3/build \t&& mkdir ./install \t\t\t\t\t\t\t&& \\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=Release \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DBUILD_PERF_TESTS=OFF \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=./install \t\t\t\t\t\t\t\\\n\t\t\t\t-DBUILD_TESTS=OFF \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DBUILD_opencv_cnn_3dobj=OFF \t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCUDA_ARCH_BIN=\"6.0 6.1\" \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCUDA_FAST_MATH=ON \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \t\\\n\t\t\t\t-DWITH_CUBLAS=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DWITH_QT=ON \t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DWITH_TIFF=OFF \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DWITH_TBB=ON \t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DBUILD_opencv_tracking=ON \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DBUILD_opencv_dnn=ON\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DINSTALL_PYTHON_EXAMPLES=ON \t\t\t\t\t\t\t\t\\\n\t\t\t\t-DINSTALL_TESTS=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DBUILD_opencv_hdf=OFF \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DPYTHON2_NUMPY_INCLUDE_DIRS=$SRC_FOLDER/anaconda2/lib/python2.7/site-packages/numpy/core/include \t\\\n\t\t\t\t-DPYTHON2_LIBRARY=$SRC_FOLDER/anaconda2/lib/libpython2.7.so \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DPYTHON2_PACKAGES_PATH=$SRC_FOLDER/anaconda2/lib/python2.7/site-packages \t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\nENV OPENCV_DIR=$SRC_FOLDER/opencv3 OPENCV_ROOT=$SRC_FOLDER/opencv3/build/install\nENV OPENCV_LIB=$OPENCV_ROOT/lib OPENCV_BIN=$OPENCV_ROOT/bin \\\n\tOPENCV_INCLUDE=$OPENCV_ROOT/include OPENCV_PYTHONLIB=$OPENCV_DIR/build/lib\nENV PATH=$OPENCV_BIN:$OPENCV_INCLUDE:$PATH \\\n\tLD_LIBRARY_PATH=$OPENCV_LIB:$OPENCV_PYTHONLIB:$LD_LIBRARY_PATH\n\n# # YARP\nARG yarpHash=cca890b8ae3ec14fc7cadab0821bcd1a09181da1\nRUN\tcd yarp && git checkout -b localBranch $yarpHash\n\nADD yarp.i yarp/bindings\n\nRUN mkdir yarp/build && cd yarp/build \t\t\t\t\t\t\t\t\t&& \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=Release \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_DEVICE_LIBRARY_MODULES=ON \t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=./install \t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_GUIS=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_LIB_MATH=ON \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_OPTIONAL_CARRIERS=ON\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DYARP_COMPILE_BINDINGS=ON\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_CSHARP=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_LUA=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_PYTHON=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpcar_bayer=ON \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpcar_mjpeg=ON \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpmod_opencv_grabber=ON \t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpmod_serial=ON \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpmod_serialport=ON \t\t\t\t\t\t\t\t\\\n\t\t\t\t-DYARP_USE_PYTHON_VERSION=2\t\t\t\t\t\t\t\t &&\t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=Release \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_DEVICE_LIBRARY_MODULES=ON \t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=./install \t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_GUIS=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_LIB_MATH=ON \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_OPTIONAL_CARRIERS=ON\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DYARP_COMPILE_BINDINGS=ON\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_CSHARP=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_LUA=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCREATE_PYTHON=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpcar_bayer=ON \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpcar_mjpeg=ON \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpmod_opencv_grabber=ON \t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpmod_serial=ON \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DENABLE_yarpmod_serialport=ON \t\t\t\t\t\t\t\t\\\n\t\t\t\t-DYARP_USE_PYTHON_VERSION=2\t\t\t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make install\n\nENV LUA_CPATH=$SRC_FOLDER/yarp/build/lib/lua/?.so  YARP_ROOT=$SRC_FOLDER/yarp\nENV YARP_DIR=$YARP_ROOT/build/install\nENV YARP_LIB=$YARP_DIR/lib \\\n\tYARP_BIN=$YARP_DIR/bin \\\n\tYARP_ROBOT_NAME=iCubSheffield01\nENV PATH=$YARP_BIN:$LUA_CPATH:$PATH \\\n\tLD_LIBRARY_PATH=$YARP_LIB:$LD_LIBRARY_PATH\n\n# ROBOTS CONFIGURATION\nARG robotConfigHash=a8e47be03b88a0dd2bc7609ab5ce6bfdf29a3c5c\nRUN cd robots-configuration &&\tgit checkout -b localBranch $robotConfigHash\n\n# ICUB MAIN\nARG icubMainHash=a5e94059e899c4fd6994d007dc7bdab9595a9111\nRUN cd icub-main  && git checkout -b localBranch $icubMainHash\n\nRUN mkdir icub-main/build \t&& \tcd icub-main/build \t\t\t&& \t\\\n\tcmake .. -DCMAKE_BUILD_TYPE=Release\t\t\t\t\t\t\t\\\n\t\t\t -DICUB_USE_GTK2=OFF \t\t\t\t\t\t\t\t\\\n\t\t\t -DCMAKE_INSTALL_PREFIX=./install \t\t\t\t\t\\\n\t\t\t -DENABLE_icubmod_gazecontrollerclient=ON \t\t\t\\\n\t\t\t -DENABLE_icubmod_cartesiancontrollerclient=ON \t\t\\\n\t\t\t -DENABLE_icubmod_cartesiancontrollerserver=ON \t&&\t\\\n\tmake -j$cores && make -j$cores install\n\nENV ICUB_ROOT=$SRC_FOLDER/icub-main\nENV ICUB_DIR=$ICUB_ROOT/build/install\nENV ICUB_LIB=$ICUB_DIR/lib \t\\\n\tICUB_BIN=$ICUB_DIR/bin \t\\\n\tICUB_ROBOTNAME=$YARP_ROBOT_NAME\nENV PATH=$ICUB_BIN:$PATH \t\\\n\tLD_LIBRARY_PATH=$ICUB_LIB:$LD_LIBRARY_PATH\n\n# ICUB CONTRIB\nRUN mkdir icub-contrib-common/build && cd icub-contrib-common/build\t\t\t\t\t\t\t&& \t\\\n\tcmake .. -DCMAKE_INSTALL_PREFIX=$SRC_FOLDER/icub-contrib-common/build/install \t\t\t\t\\\n\t\t\t -DCMAKE_BUILD_TYPE=Release\t\t\t\t\t\t\t\t\t\t\t\t\t\t&&\t\\\n\tmake && make install\n\nENV ICUBCONTRIB_ROOT=$SRC_FOLDER/icub-contrib-common\nENV ICUBCONTRIB_DIR=$ICUBCONTRIB_ROOT/build/install\nENV ICUBCONTRIB_BIN=$ICUBCONTRIB_DIR/bin \\\n\tCMAKE_PREFIX_PATH=$ICUBCONTRIB_DIR\nENV PATH=$ICUBCONTRIB_DIR:$ICUBCONTRIB_BIN:$PATH\n\n#OpenCV 2\nARG opencv2Hash=d68e3502278d6fc5a1de0ce8f7951d9961b20913\nRUN cd opencv2 && git checkout -b localBranch $opencv2Hash\n\nRUN mkdir opencv2/build \t&& cd opencv2/build \t&& mkdir ./install \t&& \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=Release \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DBUILD_PERF_TESTS=OFF \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=./install \t\t\t\t\t\t\t\\\n\t\t\t\t-DBUILD_TESTS=OFF \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCUDA_ARCH_BIN=\"6.0 6.1\" \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCUDA_FAST_MATH=ON \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DWITH_CUBLAS=ON \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DWITH_QT=ON \t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DWITH_TIFF=OFF \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DWITH_TBB=ON \t\t\t\t\t\t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\n#Caffe\nARG caffeHash=68215ccc004ebd05a2209270688c26b6e4304d4a\nRUN cd caffe && git checkout -b localBranch $caffeHash && mkdir build \t&& cd build\t&& \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=Release\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=./install \t\t\t\t\t\t\t\\\n\t\t\t\t-DOpenCV_DIR=$SRC_FOLDER/opencv2/build/install/share/OpenCV \\\n\t\t\t\t-DCUDA_USE_STATIC_CUDA_RUNTIME=OFF \t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\nRUN cd caffe && scripts/download_model_binary.py models/bvlc_reference_caffenet && \\\n\t./data/ilsvrc12/get_ilsvrc_aux.sh\nENV CAFFE_ROOT=$SRC_FOLDER/caffe/build\nENV CAFFE_DIR=$CAFFE_ROOT/install\nENV CAFFE_LIB=$CAFFE_DIR/lib \t\\\n\tCAFFE_BIN=$CAFFE_DIR/bin\nENV PATH=$CAFFE_BIN:$PATH \t\t\\\n\tLD_LIBRARY_PATH=$CAFFE_LIB:$LD_LIBRARY_PATH\n\n#rFSM\nARG rFSMHash=26d0477053597690ab1d941f26041492ddfced9b\nRUN cd rFSM && git checkout -b localBranch $rFSMHash\n\n# Segmentation\nARG segmentationHash=0a6666ce44304a9cf52c49e4871a1fb835896200\nRUN cd segmentation && git checkout -b localBranch $segmentationHash && mkdir build && \\\n\tcd build && cmake .. -DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH && make -j$cores && make -j$cores install\n\n#SiftGPU\nARG siftGPUHash=b46bd5b8cc5cfdc1dc163444b72c705569800b6d\nRUN cd SiftGPU && git checkout -b localBranch $siftGPUHash && make clean && make\n\nENV SIFTGPU_ROOT=$SRC_FOLDER/SiftGPU\nENV SIFTGPU_BIN=$SIFTGPU_ROOT/bin \\\n\tSIFTGPU_LIB=$SIFTGPU_ROOT/lib \\\n\tSIFTGPU_INCLUDE_DIRS=$SIFTGPU_ROOT/src/SiftGPU/\nENV LUA_PATH=$SRC_FOLDER/rFSM/?.lua:$ICUBCONTRIB_DIR/share/ICUBcontrib/contexts/iol/lua/?.lua?\nENV PATH=$SIFTGPU_BIN:$SIFTGPU_INCLUDE_DIRS:$PATH \\\n\tLD_LIBRARY_PATH=$SIFTGPU_LIB:$LIBSVMLIN_DIR:$LUA_PATH:$LD_LIBRARY_PATH\n\n#LIBLINEAR\nRUN cd himrep && wget https://www.csie.ntu.edu.tw/~cjlin/liblinear/oldfiles/liblinear-1.91.tar.gz\nRUN cd himrep && tar xvzf liblinear-1.91.tar.gz && rm liblinear-1.91.tar.gz\nRUN cd himrep/liblinear-1.91 && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=RELEASE && make && cp libLiblinear.a ../\nENV LIBSVMLIN_DIR=$SRC_FOLDER/himrep/liblinear-1.91\n\n# Himrep\nARG himrepHash=c1e4b0509da512ee4e9234d77148bf18fe228ad8\nRUN cd himrep && git checkout -b localBranch $himrepHash && mkdir build && cd build && \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=RELEASE \t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DOpenCV_DIR=$SRC_FOLDER/opencv2/build/install/share/OpenCV \\\n\t\t\t\t-DSIFTGPU_DIR=$SIFTGPU_ROOT \t\t\t\t\t\t\t\t\\\n\t\t\t\t-DSIFTGPU_LIBRARIES=$SIFTGPU_BIN/libsiftgpu.so \t\t\t\t\\\n\t\t\t\t-DSIFTGPU_INCLUDE_DIRS=$SIFTGPU_INCLUDE_DIRS\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH\t\t\t\t\t\\\n\t\t\t\t-DCUDA_USE_STATIC_CUDA_RUNTIME=OFF \t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\n#Stereo Vision\nARG stereoHash=a5b8e2599916ac1a83e7f89ac94d15d087ef3a59\nRUN cd stereo-vision && git checkout -b localBranch $stereoHash && mkdir build && cd build \t&& \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=RELEASE \t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DUSE_SIFT_GPU=OFF \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DOpenCV_DIR=$SRC_FOLDER/opencv3/build/install/share/OpenCV \t\t\t\t\t\\\n\t\t\t\t-DCUDA_USE_STATIC_CUDA_RUNTIME=OFF\t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \t\t\t\t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\n# Speech\nARG speechHash=0ad96ea84f490df9596544f4ca579e259783e650\nRUN cd speech && git checkout -b localBranch $speechHash && mkdir build && cd build && \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=RELEASE \t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \t\t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\nENV YARP_DATA_DIRS=$YARP_DIR/share/yarp:$ICUB_DIR/share/iCub:$ICUBCONTRIB_DIR/share/ICUBcontrib:$ICUBCONTRIB_DIR/share/speech:$ICUB_ROOT/app/simConfig/conf \\\n\tYARP_PYTHONLIB=$YARP_LIB/python2.7/site-packages\n\nRUN cd speech/svox-speech && mkdir build &&\tcd build && \t\t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=RELEASE \t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \t\t\\\n\t\t\t\t-DENABLE_speech=ON \t\t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\n#Boost\nARG boostHash=fbe3e245a0b1aecfda960c1d7a254a1deeb58022\nRUN cd boost-mil && git checkout -b localBranch $boostHash && mkdir build && cd build \t&& \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=RELEASE \t\t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \t\t\t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\n#IOL\nARG iolHash=60b608ecced5c32933449d4b67c367f16221a815\nRUN cd iol && git checkout -b localBranch $iolHash && mkdir build && cd build \t&& \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=RELEASE \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \t\t\t\t\t\t\t\\\n\t\t\t\t-DOpenCV_DIR=$SRC_FOLDER/opencv3/build/install/share/OpenCV \t&& \t\\\n\tmake -j$cores && make -j$cores install\n\n#NITE\nARG NITED=NITE-Bin-Dev-Linux-x64-v1.5.2.21\nARG NITEZ=nite-bin-linux-x64-v1.5.2.21.tar.bz2\nRUN wget https://ilab.usc.edu/packages/forall/ubuntu-12.04lts/old/nite-bin-linux-x64-v1.5.2.21.tar.bz2\nRUN tar xvfj $NITEZ && cd $NITED && ./install.sh && rm $SRC_FOLDER/$NITEZ\n\n#SensorKinect\nARG sensorKinectHash=15f1975d5e50d84ca06ff784f83f8b7836749a7b\nRUN cd SensorKinect && git checkout -b localBranch $sensorKinectHash && \\\n\tcd Platform/Linux/CreateRedist && ./RedistMaker && cd ../Redist/Sensor-Bin-Linux-x64-v5.1.2.1/ && ./install.sh\n\n#kinectWrapper\nARG kinectHash=20113eae69e3e16e69048d7debd2d02dee591425\nRUN cd kinect-wrapper && git checkout -b localBranch $kinectHash && mkdir build && cd build && \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=RELEASE \t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DOpenCV_DIR=$SRC_FOLDER/opencv3/build/install/share/OpenCV \t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\nUSER root\nRUN pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir paramz && conda install ipyparallel -y && conda install 'pyqt<5' -y\n\nARG karmaWYSIWYDHash=e14488ffc7fcca750db54122174fe8c06fa397a0\nRUN cd karmaWYSIWYD && git checkout -b localBranch $karmaWYSIWYDHash && mkdir build && cd build && \t\\\n\tcmake .. \t-DCMAKE_BUILD_TYPE=RELEASE \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t-DOpenCV_DIR=$SRC_FOLDER/opencv3/build/install/share/OpenCV \t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\n# Git clone GPY and WYSIWYD\nARG GPYHash=845168af3bb5e61dafed4dd860644546e9c4666a\nRUN cd GPy && git checkout -b localBranch $GPYHash && python setup.py build_ext --inplace\nENV GPY_ROOT=$SRC_FOLDER/GPy \\\n\tGPY_DIR=$SRC_FOLDER/GPy/build\n\nENV PYTHONPATH=$PYTHONPATH:$YARP_PYTHONLIB:$OPENCV_PYTHONLIB:$GPY_DIR:$GPY_ROOT\n\nARG GPYOPTHash=dd1438023e9d133af0c861a9a3c3fd24a5fa07bd\nRUN cd GPyOpt && git checkout -b localBranch $GPYOPTHash && python setup.py develop\nENV GPY_ROOT=$SRC_FOLDER/GPyOpt \\\n\tGPY_DIR=$SRC_FOLDER/GPyOpt/build\nENV PYTHONPATH=$PYTHONPATH:$GPYOPT_DIR:$GPYOPT_ROOT\n\n#Install dlib\nRUN wget https://dlib.net/files/dlib-19.2.tar.bz2 && tar xvfj dlib-19.2.tar.bz2 && \\\n\tcd dlib-19.2/examples && mkdir build && cd build && \\\n\tcmake .. -DOpenCV_DIR=$SRC_FOLDER/opencv3/build/install/share/OpenCV && make -j$cores && rm $SRC_FOLDER/dlib-19.2.tar.bz2\n\n#Human Sensing SAM\nRUN cd human-sensing-SAM && mkdir build && cd build \t\t\t\t\t\t\t&& \t\\\n\tcmake .. -DCMAKE_BUILD_TYPE=Release\t\t\t\t\t\t\t\t\t\t\t\t\\\n\t\t\t-DOpenCV_DIR=/usr/local/src/robot/opencv/build/install/share/OpenCV && \t\\\n\tmake -j6 && make install\n\nCOPY CLMYarp.ini $SRC_FOLDER/human-sensing-SAM/app/CLM_Yarp/conf\nENV CLM_MODEL_DIR=$SRC_FOLDER/human-sensing-SAM/app/CLM_Yarp/conf\nENV PATH=$CLM_MODEL_DIR:$PATH\n\n# Comment this section if postgres initialisation is not required\n# COPY ABM_backup.backup .\n\n# RUN echo \"postgres:postgres\" | chpasswd\n\n# USER postgres\n\n# RUN /etc/init.d/postgresql start &&\\\n#     psql --command \"alter user postgres with password 'postgres'\" && \\\n#     echo \"postgres\" | createdb -h localhost -p 5432 -U postgres ABM && \\\n#     echo \"postgres\" | /usr/bin/pg_restore \t--host localhost --port 5432 --username \"postgres\" \\\n# \t\t\t\t\t\t\t\t\t\t\t--dbname \"ABM\" --section pre-data --section data \\\n# \t\t\t\t\t\t\t\t\t\t\t--section post-data --verbose \"/usr/local/src/robot/ABM_backup.backup\"\n# Comment this section if postgres initialisation is not required\n\nUSER root\n\n#ICUB CLIENT\nARG icubClientHash=f720428148690306abc0d1b1dc1503467cc5ad02\nRUN git clone https://github.com/robotology/icub-client.git\nRUN cd icub-client && git checkout -b localBranch $icubClientHash && mkdir build && cd build && \\\n \tcmake ..\t-DCMAKE_INSTALL_PREFIX=./install \t\t\t\t\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t-DCMAKE_BUILD_TYPE=Release\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t-DOpenCV_DIR=$SRC_FOLDER/opencv3/build/install/share/OpenCV \t\t\t\t\t\t\\\n \t\t\t\t-DICUBCLIENT_COMPILE_TESTS=ON \t\t\t\t\t\t\t\t\t\t\t\t\t&& \t\\\n\tmake -j$cores && make -j$cores install\n\nENV ICUBCLIENT_ROOT=$SRC_FOLDER/icub-client/build\nENV ICUBCLIENT_DIR=$ICUBCLIENT_ROOT/install \t\t\t\t\t\t\t\t\t\\\n\tICUBCLIENT_BIN=$ICUBCLIENT_ROOT/install/bin \t\t\t\t\t\t\t\t\\\n\tICUBCLIENT_LIB=$ICUBCLIENT_ROOT/install/lib \t\t\t\t\t\t\t\t\nENV LD_LIBRARY_PATH=$ICUBCLIENT_LIB:$LD_LIBRARY_PATH \t\t\t\t\t\t\\\n\tPATH=$ICUBCLIENT_BIN:$PATH\n\nRUN cd icub-client/bindings && mkdir build && cd build && \\\n\tcmake .. \t-DCMAKE_INSTALL_PREFIX=./install \t\t\t\t\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t-DCMAKE_BUILD_TYPE=Release\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t-DICUBCLIENT_USE_PYTHON_VERSION=2\t\t&& \t\\\n \tmake -j$cores && make -j$cores install\t\t\t\t\t\t\t\t\t\t\t\t\n\nENV SAM_ROOT=$SRC_FOLDER/icub-client/src/modules \\\n\tICUBCLIENT_BINDINGS=$SRC_FOLDER/icub-client/bindings/build/install/lib/python2.7/site-packages\nENV PYTHONPATH=$PYTHONPATH:$SAM_ROOT:$ICUBCLIENT_BINDINGS\n\nWORKDIR /home/icub/\nCOPY startup.sh .\nCOPY init.sh .\nCOPY myprompt /usr/bin/\nRUN chmod +x startup.sh && chmod +x init.sh\n\nUSER icub\nRUN yarp conf 10.0.0.100 10000\nCOPY bashrc .\nCOPY Xylo.wav .\n\nRUN ssh-keygen -t rsa -f /home/icub/.ssh/id_rsa -q -N \"\" && touch .ssh/authorized_keys && cat .ssh/id_rsa.pub >> .ssh/authorized_keys\n\nUSER root\nRUN chown -R icub /home/icub && chown -R icub $SRC_FOLDER\n\nUSER icub\n\n# Uncomment this line if postgresql is not required\nENTRYPOINT sudo service ssh start && bash\n\n#Comment this line if postgresql is not required\n# ENTRYPOINT sudo service ssh start && sudo service postgresql start && bash\n\n"
}