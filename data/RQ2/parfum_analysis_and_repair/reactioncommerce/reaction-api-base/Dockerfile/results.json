{
  "startTime": 1674250666719,
  "endTime": 1674250668109,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:8-alpine\nMAINTAINER Jeremy Shimko <jeremy@reactioncommerce.com>\n\nARG NODE_ENV=production\n\nENV APP_SOURCE_DIR=/opt/src \\\n    NODE_ENV=$NODE_ENV \\\n    PATH=$PATH:/opt/node_modules/.bin\n\nWORKDIR $APP_SOURCE_DIR\n\n# Build the dependencies into the Docker image in a cacheable way. Dependencies\n# are only rebuilt when package.json or yarn.lock is modified.\n#\n# The project directory will be mounted during development. Therefore, we'll\n# install dependencies into an external directory (one level up.) This works\n# because Node traverses up the fs to find node_modules.\nCOPY package.json yarn.lock $APP_SOURCE_DIR/\nRUN set -ex; \\\n  if [ \"$NODE_ENV\" = \"production\" ]; then \\\n    yarn install \\\n      --frozen-lockfile \\\n      --ignore-scripts \\\n      --modules-folder \"$APP_SOURCE_DIR/../node_modules\" \\\n      --no-cache \\\n      --production; yarn cache clean; \\\n  elif [ \"$NODE_ENV\" = \"test\" ]; then \\\n    yarn install \\\n      --frozen-lockfile \\\n      --ignore-scripts \\\n      --modules-folder \"$APP_SOURCE_DIR/../node_modules\" \\\n      --no-cache; yarn cache clean; \\\n  elif [ \"$NODE_ENV\" = \"development\" ]; then \\\n    yarn install \\\n      --cache-folder /home/node/.cache/yarn \\\n      --ignore-scripts \\\n      --modules-folder \"$APP_SOURCE_DIR/../node_modules\"; yarn cache clean; \\\n  fi; \\\n  rm package.json yarn.lock\n\nCOPY . $APP_SOURCE_DIR\n\nRUN yarn run build\n\nEXPOSE 3000\n\nCMD [\"node\", \"dist/index.js\"]\n"
}