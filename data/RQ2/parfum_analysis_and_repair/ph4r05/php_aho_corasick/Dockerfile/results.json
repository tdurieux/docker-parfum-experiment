{
  "startTime": 1674255809783,
  "endTime": 1674255810891,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#   Classpoly Docker file\n# -----------------------------------------------------------------------------\n# Creates compilation image, i.e. you can modify the built sources.\n# However, binaries are also compiled during image creation\n# thus available in the image.\n\n# Base image is an argument - debian or ubuntu.\nARG BASE_IMAGE=ubuntu:latest\n\n# Builder stage\n# Multistage docker build, requires docker 17.05\n# https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\n# https://docs.docker.com/engine/reference/builder/\n# https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae\nFROM ${BASE_IMAGE} AS base\n\nARG DEVEL_TOOLS=0\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=Europe/Prague\n\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install \\\n        autoconf \\\n        automake \\\n        bzip2 \\\n        ca-certificates \\\n        curl \\\n        g++ \\\n        git \\\n        libtool-bin \\\n        make \\\n        php7.2-dev \\\n        pkg-config \\\n        python \\\n        rsync \\\n        unzip \\\n        wget \\\n    && if [ \"${DEVEL_TOOLS}\" -eq 1 ] ; then \\\n       apt-get --no-install-recommends --yes install \\\n          gdb \\\n          gdbserver \\\n          software-properties-common \\\n          valgrind \\\n          vim; \\\n       fi \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# Building class poly\nFROM base AS builder\nWORKDIR /usr/local/src\n\nENV PROJECT_DIR /usr/local/src/php_aho_corasick\n\n# Build either from current source or github repo (no local files needed then)\nARG DIR_BUSTER=0\n\n# php_aho_corasick\nCOPY config* $PROJECT_DIR/\nCOPY build.sh $PROJECT_DIR/\nCOPY src/ $PROJECT_DIR/src/\n\nCOPY docker/*.sh /usr/local/bin/\nRUN set -ex \\\n    && chmod +x /usr/local/bin/*.sh\n\nWORKDIR $PROJECT_DIR\nRUN set -ex \\\n    && phpize --clean \\\n    && phpize \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-ahocorasick \\\n    && make clean \\\n    && make\n\nCOPY examples/ $PROJECT_DIR/examples/\n\n"
}