{
  "startTime": 1674254641431,
  "endTime": 1674254642806,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 22,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-devel\nARG CUDA_GENERATION=Auto\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    clang \\\n    cmake \\\n    git \\\n    libblas-dev \\\n    libeigen3-dev \\\n    libgoogle-glog-dev \\\n    libgtk2.0-dev \\\n    liblapack-dev \\\n    libproj-dev \\\n    libsuitesparse-dev \\\n    libvtk5-dev \\\n    pkg-config \\\n    zip && rm -rf /var/lib/apt/lists/*;\n\n# Make dynfu build dir\nRUN mkdir -p dynfu/build\n\n# Get terra\nADD https://github.com/zdevito/terra/releases/download/release-2016-03-25/terra-Linux-x86_64-332a506.zip .\nRUN unzip -qq terra-Linux-x86_64-332a506.zip\nRUN mv terra-Linux-x86_64-332a506 terra\nRUN ln -s /terra /dynfu/build/terra\n\n# Get Opt\nRUN git clone https://github.com/mbrookes1304/Opt.git\nWORKDIR Opt/API\nRUN git checkout env-variables\nRUN make\nWORKDIR ../..\nRUN ln -s /Opt /dynfu/build/Opt\n\n# Install OpenMesh\nADD http://www.openmesh.org/media/Releases/6.3/OpenMesh-6.3.tar.gz .\nRUN tar xzf OpenMesh-6.3.tar.gz && rm OpenMesh-6.3.tar.gz\nWORKDIR OpenMesh-6.3\nRUN mkdir build\nWORKDIR build\nRUN cmake -DCMAKE_BUILD_TYPE=Release .. && make install\nWORKDIR ../..\nRUN rm -rf OpenMesh*\nWORKDIR ../..\nRUN rm -rf OpenMesh*\n\n# Install ceres-solver\nRUN git clone https://ceres-solver.googlesource.com/ceres-solver\nWORKDIR ceres-solver\nRUN cmake \\\n         -D BUILD_EXAMPLES=OFF \\\n         -D BUILD_TESTING=OFF \\\n         -D GFLAGS=OFF \\\n. && make install\nWORKDIR ..\nRUN rm -rf ceres-solver\n\n# Install FLANN\nRUN apt-get install --no-install-recommends -y libflann-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install boost\nRUN apt-get update && apt-get install --no-install-recommends -y libboost-all-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install pcl\nADD https://github.com/PointCloudLibrary/pcl/archive/pcl-1.8.1.tar.gz .\nRUN tar xzf pcl-1.8.1.tar.gz && rm pcl-1.8.1.tar.gz\nWORKDIR pcl-pcl-1.8.1\nRUN mkdir build\nWORKDIR build\nRUN cmake -D BUILD_keypoints=OFF \\\n          -D BUILD_ml=OFF \\\n          -D BUILD_outofcore=OFF \\\n          -D BUILD_people=OFF \\\n          -D BUILD_recognition=OFF \\\n          -D BUILD_registration=OFF \\\n          -D BUILD_segmentation=OFF \\\n          -D BUILD_simulation=OFF \\\n          -D BUILD_stereo=OFF \\\n          -D BUILD_tools=OFF \\\n    ..\nRUN make install\nWORKDIR ../..\nRUN rm -rf pcl*\n\n# Install OpenCV\nADD https://github.com/opencv/opencv/archive/3.2.0.tar.gz .\nRUN tar xzf 3.2.0.tar.gz && rm 3.2.0.tar.gz\nRUN rm 3.2.0.tar.gz\nWORKDIR opencv-3.2.0\nRUN rm -rf platforms/android platforms/ios platforms/maven platforms/osx samples/*\nRUN mkdir build\nWORKDIR build\nRUN cmake -D BUILD_DOCS=OFF \\\n          -D BUILD_PACKAGE=OFF \\\n          -D BUILD_PERF_TESTS=OFF \\\n          -D BUILD_TESTS=OFF \\\n          -D BUILD_WITH_DEBUG_INFO=OFF \\\n          -D BUILD_opencv_apps=OFF \\\n          -D BUILD_opencv_calib3d=ON \\\n          -D BUILD_opencv_core=ON \\\n          -D BUILD_opencv_features2d=ON \\\n          -D BUILD_opencv_flann=ON \\\n          -D BUILD_opencv_highgui=ON \\\n          -D BUILD_opencv_imgcodecs=ON \\\n          -D BUILD_opencv_imgproc=ON \\\n          -D BUILD_opencv_ml=ON \\\n          -D BUILD_opencv_objdetect=OFF \\\n          -D BUILD_opencv_photo=OFF \\\n          -D BUILD_opencv_shape=OFF \\\n          -D BUILD_opencv_stitching=OFF \\\n          -D BUILD_opencv_superres=OFF \\\n          -D BUILD_opencv_ts=OFF \\\n          -D BUILD_opencv_video=OFF \\\n          -D BUILD_opencv_videoio=OFF \\\n          -D BUILD_opencv_videostab=OFF \\\n          -D BUILD_opencv_viz=ON \\\n          -D BUILD_opencv_video=OFF \\\n          -D CMAKE_BUILD_TYPE=RELEASE \\\n          -D CUDA_GENERATION=${CUDA_GENERATION:-Auto} \\\n          -D WITH_VTK=ON \\\n    ..\nRUN make\nRUN make install\nWORKDIR ../..\nRUN rm -rf opencv-3.2.0\n\n# Add source files\nADD CMakeLists.txt /dynfu\nADD cmake /dynfu/cmake\nADD src /dynfu/src\nADD include /dynfu/include\n\n# Build dynfu\nWORKDIR dynfu/build\nRUN cmake -D CUDA_CUDA_LIBRARY=\"/usr/local/cuda/lib64/stubs/libcuda.so\" ..\nRUN make\nWORKDIR ..\n\n# Run dynamicfusion using /data\nCMD ./build/bin/app /data\n\n# Rmeove unnecessary packages\nRUN apt-get remove -y \\\n    clang \\\n    curl \\\n    git \\\n    pkg-config \\\n    zip\n"
}