{
  "startTime": 1674253618287,
  "endTime": 1674253620199,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 7,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 7,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 7,
        "columnEnd": 56
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 117
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 120,
        "lineEnd": 141,
        "columnStart": 11,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 85,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 183,
        "lineEnd": 195,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 258,
        "lineEnd": 259,
        "columnStart": 7,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#########################################################################\n# This image contains every build tools that will be used by the builder and\n# the app images (usefull in dev mode)\n#########################################################################\n\nFROM php:7.0-fpm-stretch as phraseanet-system\n\nENV FFMPEG_VERSION=4.2.2\n\nRUN echo \"deb http://deb.debian.org/debian stretch main non-free\" > /etc/apt/sources.list \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        apt-transport-https \\\n        ca-certificates \\\n        gnupg2 \\\n        wget \\\n    && wget -O certs.deb https://ftp.fr.debian.org/debian/pool/main/c/ca-certificates/ca-certificates_20210119_all.deb \\\n    && dpkg --fsys-tarfile certs.deb | tar -xOf - ./usr/share/ca-certificates/mozilla/ISRG_Root_X1.crt > /usr/local/share/ca-certificates/ISRG_Root_X1.crt \\\n    && rm -rf /usr/share/ca-certificates/mozilla/DST_Root_CA_X3.crt \\\n    && update-ca-certificates --fresh \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        zlib1g-dev \\\n        automake \\\n        git \\\n        ghostscript \\\n        gpac \\\n        imagemagick \\\n        ufraw \\\n        inkscape \\\n        libav-tools \\\n        libfreetype6-dev \\\n        libicu-dev \\\n        libjpeg62-turbo-dev \\\n        libmagickwand-dev \\\n        libmcrypt-dev \\\n        libpng-dev \\\n        librabbitmq-dev \\\n        libssl-dev \\\n        libxslt-dev \\\n        libzmq3-dev \\\n        libtool \\\n        locales \\\n        gettext \\\n        mcrypt \\\n        swftools \\\n        unoconv \\\n        unzip \\\n        poppler-utils \\\n        libreoffice-base-core \\\n        libreoffice-impress \\\n        libreoffice-calc \\\n        libreoffice-math \\\n        libreoffice-writer \\                                                                 \n        libreoffice-pdfimport \\\n        # heic\n        libde265-dev \\\n        libopenjp2-7-dev \\\n        librsvg2-dev \\\n        libwebp-dev \\\n        # End heic\n        # FFmpeg\n        yasm \\\n        libvorbis-dev \\\n        texi2html \\\n        nasm \\\n        zlib1g-dev \\\n        libx264-dev \\\n        libfdk-aac-dev \\\n        libopus-dev \\\n        libvpx-dev \\\n        libmp3lame-dev \\\n        libogg-dev \\\n        libopencore-amrnb-dev \\\n        libopencore-amrwb-dev \\\n        libdc1394-22-dev \\\n        libx11-dev \\\n        libswscale-dev \\\n        libpostproc-dev \\\n        libxvidcore-dev \\\n        libtheora-dev \\\n        libgsm1-dev \\\n        libfreetype6-dev \\\n        libldap2-dev \\ \n        # End FFmpeg\n        nano \\\n    && update-locale \"LANG=fr_FR.UTF-8 UTF-8\" \\\n    && dpkg-reconfigure --frontend noninteractive locales \\\n    && mkdir /tmp/libheif \\\n    && git clone https://github.com/strukturag/libheif.git /tmp/libheif \\\n    && cd /tmp/libheif \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && mkdir /tmp/ImageMagick \\\n    && curl -f https://imagemagick.org/archive/ImageMagick.tar.gz | tar zx -C /tmp/ImageMagick --strip-components 1 \\\n    && cd /tmp/ImageMagick \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && ldconfig \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd \\\n    && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n    && docker-php-ext-install -j$(nproc) ldap \\\n    && docker-php-ext-install zip exif iconv mbstring pcntl sockets xsl intl pdo_mysql gettext bcmath mcrypt \\\n    && pecl install \\\n        redis \\\n        amqp-1.9.3 \\\n        zmq-beta \\\n        imagick-beta \\\n        xdebug-2.6.1 \\\n    && docker-php-ext-enable redis amqp zmq imagick \\\n    && pecl clear-cache \\\n    && docker-php-source delete \\\n    && mkdir /tmp/ffmpeg \\\n    && curl -f -s https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2 | tar jxf - -C /tmp/ffmpeg \\\n    && ( cd /tmp/ffmpeg/ffmpeg-${FFMPEG_VERSION} \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n            --enable-gpl \\\n            --enable-nonfree \\\n            --enable-libfdk-aac \\\n            --enable-libfdk_aac \\\n            --enable-libgsm \\\n            --enable-libmp3lame \\\n            --enable-libtheora \\\n            --enable-libvorbis \\\n            --enable-libvpx \\\n            --enable-libfreetype \\\n            --enable-libopus \\\n            --enable-libx264 \\\n            --enable-libxvid \\\n            --enable-zlib \\\n            --enable-postproc \\\n            --enable-swscale \\\n            --enable-pthreads \\\n            --enable-libdc1394 \\\n            --enable-version3 \\\n            --enable-libopencore-amrnb \\\n            --enable-libopencore-amrwb \\\n        && make \\\n        && make install \\\n        && make distclean) \\\n\n    #&& rm -rf /tmp/ffmpeg \\\n    && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\\n    && curl -f -o- https://download.newrelic.com/548C16BF.gpg | apt-key add - \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y newrelic-php5 \\\n    && NR_INSTALL_SILENT=1 newrelic-install install \\\n    && touch /etc/newrelic/newrelic.cfg \\\n    && curl -f -o- https://packages.blackfire.io/gpg.key | apt-key add - \\\n    && echo \"deb http://packages.blackfire.io/debian any main\" |tee /etc/apt/sources.list.d/blackfire.list \\\n    && apt update \\\n    && apt install -y --no-install-recommends blackfire-agent \\\n    && apt install -y --no-install-recommends blackfire-php \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists \\\n    && mkdir /entrypoint /var/alchemy \\\n    && useradd -u 1000 app \\\n    && mkdir -p /home/app/.composer \\\n    && chown -R app: /home/app /var/alchemy && rm -rf /var/lib/apt/lists/*;\n\nENV XDEBUG_ENABLED=0\n\n#########################################################################\n# This image is used to build the apps\n#########################################################################\n\nFROM phraseanet-system as builder\n\nCOPY --from=composer:2.1.6 /usr/bin/composer /usr/bin/composer\n\n# Node Installation (node + yarn)\n# Reference :\n# https://linuxize.com/post/how-to-install-node-js-on-ubuntu-18.04/\n# https://yarnpkg.com/lang/en/docs/install/#debian-stable\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash - \\\n    && curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n    && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        nodejs \\\n        yarn \\\n        nano \\\n        vim \\\n        iputils-ping \\\n        zsh \\\n        ssh \\\n        telnet \\\n        autoconf \\\n        libtool \\\n        python \\\n        pkg-config \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists \\\n    && git clone https://github.com/robbyrussell/oh-my-zsh.git /bootstrap/.oh-my-zsh \\\n    && mkdir -p /var/alchemy/Phraseanet \\\n    && chown -R app:app /var/alchemy && rm -rf /var/lib/apt/lists/*;\n\n# Set the php memory_limit\nRUN echo 'memory_limit = 2048M' >> /usr/local/etc/php/conf.d/docker-php-ram-limit.ini\n\nWORKDIR /var/alchemy/Phraseanet\n\nUSER app\n\n# Warm up composer cache for faster builds\nCOPY docker/caching/composer.* ./\nRUN composer install --prefer-dist --no-dev --no-progress --classmap-authoritative --no-interaction --no-scripts \\\n    && rm -rf vendor composer.*\n# End warm up\n\nCOPY --chown=app  . .\n\nRUN make install\n\nADD ./docker/builder/root /\n\n# SSH Private repo\nARG SSH_PRIVATE_KEY\nARG PHRASEANET_PLUGINS\n\nRUN ( \\\n        test ! -z \"${SSH_PRIVATE_KEY}\" \\\n        && mkdir -p ~/.ssh \\\n        && echo \"${SSH_PRIVATE_KEY}\" > ~/.ssh/id_rsa \\\n        # make sure github domain.com is accepted\n        && ssh-keyscan -H github.com >> ~/.ssh/known_hosts \\\n        && chmod 600 ~/.ssh/id_rsa \\\n    ) || echo \"Skip SSH key\"\n\nRUN ./docker/phraseanet/plugins/console install\n\nENTRYPOINT [\"/bootstrap/entrypoint.sh\"]\n\nCMD []\n\n#########################################################################\n# Phraseanet web application image\n#########################################################################\n\nFROM phraseanet-system as phraseanet-fpm\n\nCOPY --from=builder --chown=app /var/alchemy/Phraseanet /var/alchemy/Phraseanet\nADD ./docker/phraseanet/root /\nWORKDIR /var/alchemy/Phraseanet\nENTRYPOINT [\"docker/phraseanet/entrypoint.sh\"]\nCMD [\"php-fpm\", \"-F\"]\n\n#########################################################################\n# Phraseanet worker application image\n#########################################################################\n\nFROM phraseanet-fpm as phraseanet-worker\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        supervisor \\\n    && mkdir -p /var/log/supervisor \\\n    && chown -R app: /var/log/supervisor \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists && rm -rf /var/lib/apt/lists/*;\n\nCOPY ./docker/phraseanet/worker/supervisor.conf /etc/supervisor/\nENTRYPOINT [\"docker/phraseanet/worker/entrypoint.sh\"]\nCMD [\"/bin/bash\", \"bin/run-worker.sh\"]\n\n#########################################################################\n# phraseanet-nginx\n#########################################################################\n\nFROM nginx:1.17.8-alpine as phraseanet-nginx\nRUN adduser --uid 1000 --disabled-password app\nADD ./docker/nginx/root /\nCOPY --from=builder /var/alchemy/Phraseanet/www /var/alchemy/Phraseanet/www\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\nHEALTHCHECK CMD wget --spider http://127.0.0.1/login || nginx -s reload || exit 1\n\n"
}