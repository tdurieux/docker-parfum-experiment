{
  "startTime": 1674248863138,
  "endTime": 1674248863814,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 25,
        "columnEnd": 69
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 25,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Stage 0, \"build-stage\", based on Node.js, to build and compile the frontend\nFROM node:lts as build-stage\n\nWORKDIR /app\n\nCOPY package*.json /app/\n\nRUN apt-get update -y && apt-get install --no-install-recommends -y libxml2-dev libgcrypt-dev && rm -rf /var/lib/apt/lists/*;\nRUN npm install && npm cache clean --force;\n\nCOPY ./ /app/\n\nARG FRONTEND_ENV=production\n\nENV VUE_APP_ENV=${FRONTEND_ENV}\n\n# Comment out the next line to disable tests\n#RUN npm run test:unit\n\nRUN npm run build\n\n\n# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx\nFROM nginx:alpine\n\nCOPY --from=build-stage /app/dist/ /usr/share/nginx/html\nCOPY packaging/nginx.conf /etc/nginx/conf.d/default.conf\n"
}