{
  "startTime": 1674255176208,
  "endTime": 1674255177323,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use phusion/baseimage as base image. To make your builds reproducible, make\n# sure you lock down to a specific version, not to `latest`!\n# See https://github.com/phusion/baseimage-docker/blob/master/Changelog.md for\n# a list of version numbers.\nFROM phusion/baseimage:latest\n\n# Set correct environment variables.\nENV HOME /root\n\n# Regenerate SSH host keys. baseimage-docker does not contain any, so you\n# have to do that yourself. You may also comment out this instruction; the\n# init system will auto-generate one during boot.\nRUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\n\n##################################################################################################\n## CUSTOMIZATION\n\n# Shared volume with the codebase.\nVOLUME [\"{{ container_dir_for_codebase }}\"]\n\n# Install python, pip, git, postgresql client.\nRUN apt-get update && apt-get install --no-install-recommends -y python python-pip git postgresql-client-9.3 python-psycopg2 nginx && rm -rf /var/lib/apt/lists/*;\n\n# Create a password file for PostgreSQL (for users root and www-data).\nRUN echo \"*:*:*:{{ postgresql_username }}:{{ postgresql_password }}\" > /root/.pgpass\nRUN chmod 0600 /root/.pgpass\nRUN mkdir /var/www\nRUN echo \"*:*:*:{{ postgresql_username }}:{{ postgresql_password }}\" > /var/www/.pgpass\nRUN chown -R www-data:www-data /var/www\nRUN chmod 0600 /var/www/.pgpass\n\n# Copy nginx config file.\nCOPY nginx-biostar.conf /etc/nginx/sites-available/biostar\nRUN ln -s /etc/nginx/sites-available/biostar /etc/nginx/sites-enabled/biostar\nRUN rm /etc/nginx/sites-enabled/default\n\n{% if basic_auth_username is defined and basic_auth_password is defined %}\n# Copy basic auth file.\nCOPY biostar-auth /etc/nginx/biostar-auth\nRUN chown www-data:www-data /etc/nginx/biostar-auth\nRUN chmod 0600 /etc/nginx/biostar-auth\n{% endif %}\n\n# Expose SSH and webserver ports.\nEXPOSE 80 22\n\n# Add the Nginx start script (executed on a `docker run`).\nRUN echo '#!/bin/bash' > /etc/my_init.d/01_start_nginx.sh\nRUN echo 'exec service nginx start' >> /etc/my_init.d/01_start_nginx.sh\nRUN chmod +x /etc/my_init.d/01_start_nginx.sh\n\n# Add the webapp daemon: a Runit script executed on a `docker run`.\n# Runit will keep the daemon up and running, restarting it when it crashes.\nRUN mkdir /etc/service/webapp\nRUN ln -s {{ container_dir_for_codebase }}/run-webapp.sh /etc/service/webapp/run\n\n# Install host's SSH public key.\nRUN echo \"{{ host_ssh_public_key.stdout }}\" >> /root/.ssh/authorized_keys\n\n## END CUSTOMIZATION\n##################################################################################################\n\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\n###################################################################################################\n## HOW TO USE IT\n#\n# Build:\n#     docker build -t biostar/webapp .\n# Run:\n#     docker run -d --link postgresql:pg -p 80:80 -p 2222:22 --volume={{ host_dir_for_codebase }}:{{ container_dir_for_codebase }} --name webapp biostar/webapp"
}