{
  "startTime": 1674248768750,
  "endTime": 1674248769698,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 2,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ----------------------------------------------\n# Stage 0, \"build-stage\", based on Node.js, to build and compile the frontend\n# ----------------------------------------------\nFROM node:11.4-alpine as build-stage\nWORKDIR /app\n\nRUN apk update && apk upgrade; \\\n  apk add --no-cache git;\n\n# Single layer for dependencies to improve caching between builds\nCOPY package.json ./\nRUN yarn install && yarn cache clean;\n\n# Copy application\nCOPY tsconfig.json angular.json ngsw-config.json tslint.json ./\nCOPY ./src ./src\nCOPY *.js *.ts ./\n\n# Build application in multiple layers, so if one fails we still keep cache on the successful ones.\nRUN yarn build --prod\nRUN yarn build:ssr\n\n# ----------------------------------------------\n# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx\n# ----------------------------------------------\nFROM nginx:1.17-alpine\n# FROM node:11.4-alpine\nWORKDIR /usr/share/nginx\n# WORKDIR /usr/local/app\n\n# Install dependencies\nRUN echo @edge http://dl-cdn.alpinelinux.org/alpine/edge/main >> /etc/apk/repositories; \\\n  echo @edgecommunity http://dl-cdn.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories; \\\n  apk update && apk upgrade; \\\n  apk add --no-cache git; \\\n  apk add --no-cache --update nodejs-current@edge yarn; \\\n  yarn global add pm2;\n\n# Copy pre-built application\nCOPY --from=build-stage /app/dist/ .\nCOPY ./docker/nginx.conf /etc/nginx/conf.d/default.conf\n\nCOPY ./package.json .\nRUN yarn install --production && yarn cache clean;\n\n# EXPOSE 4000\n\n# Override original image CMD in order to start our SSR server side-by-side with nginx\nCMD pm2 start ./server.js --name ssr.angular && nginx -g 'daemon off;'\n# CMD [\"node\", \"server.js\"]\n"
}