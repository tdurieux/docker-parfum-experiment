{
  "startTime": 1674248780336,
  "endTime": 1674248781075,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM tomcat:9-jre8\nMAINTAINER GeoNode Development Team\n\n#\n# Set GeoServer version and data directory\n#\nENV GEOSERVER_VERSION=2.15.4\nENV GEOSERVER_DATA_DIR=\"/geoserver_data/data\"\n\n#\n# Download and install GeoServer\n#\nRUN cd /usr/local/tomcat/webapps \\\n    && wget --no-check-certificate --progress=bar:force:noscroll https://build.geo-solutions.it/geonode/geoserver/latest/geoserver-${GEOSERVER_VERSION}.war \\\n    && unzip -q geoserver-${GEOSERVER_VERSION}.war -d geoserver \\\n    && rm geoserver-${GEOSERVER_VERSION}.war \\\n    && mkdir -p $GEOSERVER_DATA_DIR\n\nVOLUME $GEOSERVER_DATA_DIR\n\n# added by simonelanucara https://github.com/simonelanucara\n# Optionally add JAI, ImageIO and Marlin Render for improved Geoserver performance\nWORKDIR /tmp\nARG JAI_IMAGEIO=true\nRUN if [ \"$JAI_IMAGEIO\" = true ]; then \\\n    # NetCDF plugin\n    wget https://build.geoserver.org/geoserver/2.15.x/ext-latest/geoserver-2.15-SNAPSHOT-netcdf-out-plugin.zip && \\\n    wget https://build.geoserver.org/geoserver/2.15.x/ext-latest/geoserver-2.15-SNAPSHOT-netcdf-plugin.zip && \\\n    unzip -o geoserver-2.15-SNAPSHOT-netcdf-out-plugin.zip  && \\\n    unzip -o geoserver-2.15-SNAPSHOT-netcdf-plugin.zip  && \\\n    mv *.jar /usr/local/tomcat/webapps/geoserver/WEB-INF/lib/ && \\\n    # marlin plugin\n    wget https://github.com/bourgesl/marlin-renderer/releases/download/v0_9_3/marlin-0.9.3-Unsafe.jar && \\\n    mv /tmp/marlin-0.9.3-Unsafe.jar /usr/local/tomcat/webapps/geoserver/WEB-INF/lib/ ; \\\n    fi\n\n###########docker host###############\n# Set DOCKERHOST variable if DOCKER_HOST exists\nARG DOCKERHOST=${DOCKERHOST}\n# for debugging\nRUN echo -n #1===>DOCKERHOST=${DOCKERHOST}\n#\nENV DOCKERHOST ${DOCKERHOST}\n# for debugging\nRUN echo -n #2===>DOCKERHOST=${DOCKERHOST}\n\n###########docker host ip#############\n# Set GEONODE_HOST_IP address if it exists\nARG GEONODE_HOST_IP=${GEONODE_HOST_IP}\n# for debugging\nRUN echo -n #1===>GEONODE_HOST_IP=${GEONODE_HOST_IP}\n#\nENV GEONODE_HOST_IP ${GEONODE_HOST_IP}\n# for debugging\nRUN echo -n #2===>GEONODE_HOST_IP=${GEONODE_HOST_IP}\n# If empty set DOCKER_HOST_IP to GEONODE_HOST_IP\nENV DOCKER_HOST_IP=${DOCKER_HOST_IP:-${GEONODE_HOST_IP}}\n# for debugging\nRUN echo -n #1===>DOCKER_HOST_IP=${DOCKER_HOST_IP}\n# Trying to set the value of DOCKER_HOST_IP from DOCKER_HOST\nRUN if ! [ -z ${DOCKER_HOST_IP} ]; \\\n    then echo export DOCKER_HOST_IP=${DOCKERHOST} | \\\n    sed 's/tcp:\\/\\/\\([^:]*\\).*/\\1/' >> /root/.bashrc; \\\n    else echo \"DOCKER_HOST_IP is already set!\"; fi\n# for debugging\nRUN echo -n #2===>DOCKER_HOST_IP=${DOCKER_HOST_IP}\n\n# Set WEBSERVER public port\nARG PUBLIC_PORT=${PUBLIC_PORT}\n# for debugging\nRUN echo -n #1===>PUBLIC_PORT=${PUBLIC_PORT}\n#\nENV PUBLIC_PORT=${PUBLIC_PORT}\n# for debugging\nRUN echo -n #2===>PUBLIC_PORT=${PUBLIC_PORT}\n\n# set nginx base url for geoserver\nRUN echo export NGINX_BASE_URL=http://${NGINX_HOST}:${NGINX_PORT}/ | \\\n    sed 's/tcp:\\/\\/\\([^:]*\\).*/\\1/' >> /root/.bashrc\n\n# copy the script and perform the run of scripts from entrypoint.sh\nRUN mkdir -p /usr/local/tomcat/tmp\nWORKDIR /usr/local/tomcat/tmp\nCOPY set_geoserver_auth.sh /usr/local/tomcat/tmp\nCOPY setup_auth.sh /usr/local/tomcat/tmp\nCOPY requirements.txt /usr/local/tomcat/tmp\nCOPY get_dockerhost_ip.py /usr/local/tomcat/tmp\nCOPY get_nginxhost_ip.py /usr/local/tomcat/tmp\nCOPY entrypoint.sh /usr/local/tomcat/tmp\n\nRUN apt-get update \\\n    && apt-get -y upgrade \\\n    && apt-get install --no-install-recommends -y python python-pip python-dev \\\n    && chmod +x /usr/local/tomcat/tmp/set_geoserver_auth.sh \\\n    && chmod +x /usr/local/tomcat/tmp/setup_auth.sh \\\n    && chmod +x /usr/local/tomcat/tmp/entrypoint.sh \\\n    && pip install --no-cache-dir pip==9.0.3 \\\n    && pip install --no-cache-dir -r requirements.txt \\\n    && chmod +x /usr/local/tomcat/tmp/get_dockerhost_ip.py \\\n    && chmod +x /usr/local/tomcat/tmp/get_nginxhost_ip.py && rm -rf /var/lib/apt/lists/*;\n\nENV JAVA_OPTS=\"-Djava.awt.headless=true -XX:MaxPermSize=512m -XX:PermSize=256m -Xms512m -Xmx2048m -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Dfile.encoding=UTF8 -Djavax.servlet.request.encoding=UTF-8 -Djavax.servlet.response.encoding=UTF-8 -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=true -DGEOSERVER_CSRF_DISABLED=true\"\n\nCMD [\"/usr/local/tomcat/tmp/entrypoint.sh\"]\n"
}