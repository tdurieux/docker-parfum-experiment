{
  "startTime": 1674219099309,
  "endTime": 1674219101077,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 7,
        "columnEnd": 199
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 75,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 7,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 7,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 191,
        "lineEnd": 191,
        "columnStart": 7,
        "columnEnd": 172
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 7,
        "columnEnd": 109
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 168,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 181,
        "lineEnd": 182,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 114,
        "lineEnd": 159,
        "columnStart": 7,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## --- [{:name \"CLOJURE_LSP_VERSION\"\n## ---   :url \"https://api.github.com/repos/clojure-lsp/clojure-lsp/releases\"}\n## ---  {:name \"RUST_ANALYZER_VERSION\"\n## ---   :url \"https://api.github.com/repos/rust-analyzer/rust-analyzer/releases\"}\n## ---  {:name \"BUF_VERSION\"\n## ---   :url \"https://api.github.com/repos/bufbuild/buf/tags\"}]\n\nARG CLOJURE_LSP_VERSION=2022.06.29-19.32.13\nARG RUST_ANALYZER_VERSION=nightly\nARG BUF_VERSION=v1.6.0\n\nFROM rust:slim AS rust\n\nFROM golang:alpine AS go\n\nRUN apk update \\\n    && apk upgrade \\\n    && apk --update-cache add --no-cache \\\n    make \\\n    git \\\n    curl \\\n    gcc \\\n    musl-dev \\\n    wget\n\nRUN go install github.com/go-delve/delve/cmd/dlv@latest \\\n    && go install github.com/mattn/efm-langserver@latest \\\n    && go install golang.org/x/tools/gopls@latest \\\n    && go install github.com/x-motemen/ghq@latest\n\nRUN git clone --depth 1 https://github.com/cli/cli.git /tmp/gh-cli \\\n    && cd /tmp/gh-cli \\\n    && make \\\n    && mv bin/gh /usr/local/go/bin\n\nRUN mkdir -p /out/usr/local/go\nRUN mkdir -p /out/go\nRUN cp -r /usr/local/go/bin /out/usr/local/go/bin\nRUN cp -r /go/bin /out/go/bin\n\nFROM alpine:latest AS kube\n\nRUN apk update \\\n    && apk upgrade \\\n    && apk --update-cache add --no-cache \\\n    make \\\n    curl \\\n    gcc \\\n    openssl \\\n    bash \\\n    git\n\nRUN mkdir -p /out/packer \\\n    && mkdir -p /out/kube \\\n    && curl -f -L https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o /out/packer/kubectl \\\n    && chmod a+x /out/packer/kubectl \\\n    && curl -f https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash \\\n    && mv /usr/local/bin/helm /out/packer/helm\n\nFROM ubuntu:rolling AS neovim\n\nRUN apt update \\\n    && apt install --no-install-recommends -y \\\n    autoconf \\\n    automake \\\n    cmake \\\n    curl \\\n    g++ \\\n    gettext \\\n    git \\\n    libtool \\\n    libtool-bin \\\n    ninja-build \\\n    pkg-config \\\n    unzip \\\n    upx \\\n    && apt autoclean -y \\\n    && apt autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN cd /tmp \\\n    && git clone https://github.com/neovim/neovim \\\n    && cd /tmp/neovim \\\n    && git checkout stable \\\n    && make CMAKE_BUILD_TYPE=RelWithDebInfo \\\n    && make install \\\n    && upx -9 /usr/local/bin/nvim\n\nFROM alpine:latest AS packer\n\nRUN apk update \\\n    && apk upgrade \\\n    && apk --update-cache add --no-cache \\\n    upx\n\nCOPY --from=go /out /out/go\nRUN upx -9 /out/go/usr/local/go/bin/*\nRUN upx -9 /out/go/go/bin/*\n\nCOPY --from=kube /out/packer /out/kube\nRUN upx -9 /out/kube/*\n\nFROM ubuntu:rolling AS base\n\nLABEL maintainer \"Rintaro Okamura <rintaro.okamura@gmail.com>\"\nARG CLOJURE_LSP_VERSION\nARG RUST_ANALYZER_VERSION\nARG BUF_VERSION\n\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nENV TZ Asia/Tokyo\n\nRUN apt update \\\n    && DEBIAN_FRONTEND=noninteractive \\\n    apt --no-install-recommends install -y \\\n    autoconf \\\n    automake \\\n    bison \\\n    cmake \\\n    curl \\\n    diffutils \\\n    fzy \\\n    g++ \\\n    gawk \\\n    gcc \\\n    gettext \\\n    gfortran \\\n    git \\\n    gnupg \\\n    less \\\n    libevent-dev \\\n    liblua5.3-dev \\\n    libtool \\\n    libtool-bin \\\n    locales \\\n    lua5.3 \\\n    luarocks \\\n    make \\\n    musl-dev \\\n    ninja-build \\\n    nodejs \\\n    npm \\\n    openssh-client \\\n    openssh-server \\\n    openssl \\\n    perl \\\n    pkg-config \\\n    python3-dev \\\n    python3-pip \\\n    rlwrap \\\n    sed \\\n    tar \\\n    tmux \\\n    tzdata \\\n    unzip \\\n    upx \\\n    wget \\\n    zip \\\n    zsh \\\n    && apt autoclean -y \\\n    && apt autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN pip3 install --no-cache-dir --upgrade pip neovim neovim-remote \\\n    && npm config set user root \\\n    && npm install -g neovim && npm cache clean --force;\n\nRUN npm install -g \\\n    bash-language-server \\\n    dockerfile-language-server-nodejs \\\n    markdownlint \\\n    markdownlint-cli \\\n    textlint \\\n    textlint-rule-preset-ja-technical-writing \\\n    @proofdict/textlint-rule-proofdict \\\n    typescript \\\n    typescript-language-server \\\n    vscode-langservers-extracted \\\n    yaml-language-server \\\n    yarn \\\n    && pip3 install --no-cache-dir \\\n    fortran-language-server && npm cache clean --force;\n\nRUN cd /tmp \\\n    && curl -f -OL \"https://github.com/clojure-lsp/clojure-lsp/releases/download/${CLOJURE_LSP_VERSION}/clojure-lsp-native-linux-amd64.zip\" \\\n    && unzip clojure-lsp-native-linux-amd64.zip \\\n    && mv clojure-lsp /usr/local/bin/ \\\n    && rm -rf clojure-lsp-native-linux-amd64.zip\n\nRUN cd /tmp \\\n    && curl -f -L https://github.com/rust-analyzer/rust-analyzer/releases/download/${RUST_ANALYZER_VERSION}/rust-analyzer-x86_64-unknown-linux-gnu.gz --output rust-analyzer.gz \\\n    && gunzip rust-analyzer.gz \\\n    && mv rust-analyzer /usr/local/bin/rust-analyzer \\\n    && chmod a+x /usr/local/bin/rust-analyzer \\\n    && upx -9 /usr/local/bin/rust-analyzer\n\nRUN cd /tmp \\\n    && curl -f -L https://github.com/bufbuild/buf/releases/download/${BUF_VERSION}/buf-Linux-x86_64 --output buf \\\n    && mv buf /usr/local/bin/buf \\\n    && chmod a+x /usr/local/bin/buf \\\n    && upx -9 /usr/local/bin/buf\n\nENV HOME /root\nENV DOTFILES $HOME/.dotfiles\n\nENV SHELL /bin/zsh\nENV EDITOR nvim\n\nENV GOPATH $HOME/local\nENV GOROOT /usr/local/go\nENV RUSTUP_HOME /usr/local/rustup\nENV CARGO_HOME /usr/local/cargo\n\nENV PATH $PATH:/usr/local/bin:$CARGO_HOME/bin:$GOROOT/bin:$GOPATH/bin:$DOTFILES/bin:$HOME/.bin\n\nENV GO111MODULE auto\nENV DOCKERIZED_DEVENV rinx/devenv\n\nRUN mkdir -p $HOME/.ssh \\\n    && ssh-keyscan github.com >> $HOME/.ssh/known_hosts\n\nCOPY --from=rust /usr/local/cargo  $CARGO_HOME\nCOPY --from=rust /usr/local/rustup $RUSTUP_HOME\n\nCOPY --from=go /usr/local/go/src  $GOROOT/src\nCOPY --from=go /usr/local/go/lib  $GOROOT/lib\nCOPY --from=go /usr/local/go/pkg  $GOROOT/pkg\nCOPY --from=go /usr/local/go/misc $GOROOT/misc\n\nCOPY --from=packer /out/go/usr/local/go/bin $GOROOT/bin\nCOPY --from=packer /out/go/go/bin           $GOROOT/bin\n\nCOPY --from=packer /out/kube/kubectl   /usr/local/bin/kubectl\nCOPY --from=packer /out/kube/helm      /usr/local/bin/helm\n\nCOPY --from=neovim /usr/local/bin/nvim     /usr/local/bin/nvim\nCOPY --from=neovim /usr/local/share/locale /usr/local/share/locale\nCOPY --from=neovim /usr/local/share/nvim   /usr/local/share/nvim\n\nRUN mkdir $DOTFILES\nWORKDIR $DOTFILES\n\nCOPY gitattributes_global $DOTFILES/gitattributes_global\nCOPY gitconfig            $DOTFILES/gitconfig\nCOPY gitignore            $DOTFILES/gitignore\nCOPY nvim                 $DOTFILES/nvim\nCOPY Makefile             $DOTFILES/Makefile\nCOPY Makefile.d           $DOTFILES/Makefile.d\nCOPY profiles.clj         $DOTFILES/profiles.clj\nCOPY resources            $DOTFILES/resources\nCOPY tmux.conf            $DOTFILES/tmux.conf\nCOPY zshrc                $DOTFILES/zshrc\nCOPY zshrc.d              $DOTFILES/zshrc.d\nCOPY p10k.zsh             $DOTFILES/p10k.zsh\n\nRUN ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime \\\n    && locale-gen --purge $LANG\n\nRUN [\"/bin/bash\", \"-c\", \"make -j4 deploy\"]\nRUN [\"/bin/bash\", \"-c\", \"make -j4 install\"]\nRUN [\"/bin/bash\", \"-c\", \"make prepare-init && make tmux-init && make neovim-init\"]\n\nRUN rm -rf /tmp/*\n\nWORKDIR $HOME\n\nENTRYPOINT [\"nvim\"]\nCMD [\"--headless\", \"--listen\", \"0.0.0.0:16666\"]\n"
}