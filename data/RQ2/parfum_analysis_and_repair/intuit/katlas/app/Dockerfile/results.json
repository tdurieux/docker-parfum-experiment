{
  "startTime": 1674217093638,
  "endTime": 1674217094279,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 20,
        "columnEnd": 36
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "FROM node:8.12.0 as build-stage\nWORKDIR /app\n#initially copy over just package.json (and locks, if present) for dependency installation\nCOPY package*.json /app/\nRUN yarn install && yarn cache clean;\n#then copy over our code for build\nCOPY ./ /app/\nRUN yarn build && yarn cache clean;\n\n#once the build-stage is complete, we can build an image for our deployment\n#which is ONLY nginx(alpine) + our bundled app roughly speaking, the build\n#image ends up over 1 GB while the deployable image is only about 25 MB\nFROM nginx:alpine\nCOPY --from=build-stage /app/build /usr/share/nginx/html\nCOPY --from=build-stage /app/nginx.conf /etc/nginx/conf.d/default.conf\nCOPY --from=build-stage /app/entrypoint.sh /etc/nginx/entrypoint.sh\nRUN chmod 777 /etc/nginx/entrypoint.sh\nEXPOSE 80\nCMD /etc/nginx/entrypoint.sh"
}