{
  "startTime": 1674217840876,
  "endTime": 1674217842518,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 34,
        "columnEnd": 50
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 35,
        "columnEnd": 51
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 49,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "FROM --platform=${BUILDPLATFORM} golang:alpine AS gobase\nRUN apk add --no-cache \\\n        ca-certificates \\\n        gcc \\\n        git \\\n        musl-dev \\\n        sqlite \\\n    && true\nRUN env GO111MODULE=on go get -u \\\n        github.com/cortesi/modd/cmd/modd \\\n        golang.org/x/lint/golint \\\n        golang.org/x/tools/cmd/goimports \\\n    && true\nWORKDIR /src\n\n\n\nFROM --platform=${BUILDPLATFORM} node:alpine AS nodebase\nRUN npm install -g @vue/cli && npm cache clean --force;\nWORKDIR /src/web\n\n\n\nFROM --platform=${BUILDPLATFORM} nodebase AS nodebuilder\nCOPY web/package*.json /src/web/\nRUN yarn install --no-progress && yarn cache clean;\nCOPY web/ /src/web/\nRUN yarn run lint --no-progress && yarn cache clean;\nRUN yarn run build --no-progress --production && yarn cache clean;\n\n\n\nFROM --platform=${BUILDPLATFORM} gobase AS gobuilder\nENV CGO_ENABLED=0\nCOPY go.mod go.sum .\nRUN --mount=type=cache,target=/root/.cache/go-build go mod download\nARG BUILD_VERSION=master\nARG BUILD_COMMIT=unknown\nARG BUILD_DATE=now\nARG TARGETOS\nARG TARGETARCH\nCOPY . .\nCOPY --from=nodebuilder /src/web/dist/ ./web/dist/\nRUN --mount=type=cache,target=/root/.cache/go-build golint -set_exit_status ./...\nRUN --mount=type=cache,target=/root/.cache/go-build go vet -v ./...\nRUN mkdir -p dist\nRUN --mount=type=cache,target=/root/.cache/go-build GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -v -x -o dist \\\n        -ldflags \"\\\n            -X github.com/nrocco/bookmarks/cmd.version=${BUILD_VERSION} \\\n            -X github.com/nrocco/bookmarks/cmd.commit=${BUILD_COMMIT} \\\n            -X github.com/nrocco/bookmarks/cmd.date=${BUILD_DATE} \\\n            -s -w\"\nRUN --mount=type=cache,target=/root/.cache/go-build go test -v -short ./...\n\n\n\nFROM scratch AS bin\nCOPY --from=gobuilder /src/dist/ /\n\n\n\nFROM alpine:edge\nRUN apk add --no-cache \\\n        ca-certificates \\\n        sqlite \\\n    && true\nCOPY --from=gobuilder /src/dist/bookmarks /usr/bin/bookmarks\nEXPOSE 3000\nWORKDIR /var/lib/bookmarks\nVOLUME /var/lib/bookmarks\nCMD [\"bookmarks\", \"server\"]\n"
}