{
  "startTime": 1674251617516,
  "endTime": 1674251618167,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 29,
        "columnEnd": 72
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 35,
        "columnEnd": 60
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build a statically linked goRsaTool binary from source for linux-amd64\nFROM golang:alpine\nLABEL os=linux\nLABEL arch=amd64\nENV GOOS=linux\nENV GOARCH=amd64\nENV CGO_ENABLED=1\nENV CC=gcc\nENV FLINT_VER=2.8.0\nENV PATH=\"/go/bin/${GOOS}_${GOARCH}:${PATH}\"\n\n# Add dependencies.\nRUN apk add --no-cache gcc \\\n    libc-dev \\\n    gmp-dev \\\n    mpfr-dev \\\n    pkgconfig \\\n    make \\\n    git \\\n    wget \\\n    autoconf \\\n    automake \\\n    libtool\n\n# alpine flint-dev package is not complete so compile from source.\nRUN cd /root && wget https://www.flintlib.org/flint-${FLINT_VER}.tar.gz && \\\n    tar xvf flint-${FLINT_VER}.tar.gz && \\\n    cd flint-${FLINT_VER} && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-pthread --prefix=/usr && \\\n    make && make install && rm flint-${FLINT_VER}.tar.gz\n\nRUN cd /root && git clone https://gitlab.inria.fr/zimmerma/ecm.git && cd ecm && \\\n    libtoolize && autoreconf -i && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && \\\n    make && make install\n\n# get the tool & dependency source using the pre-modules method.\nRUN GO111MODULE=off go get github.com/sourcekris/goRsaTool\n\n# statically compile it\nENV CGO_LDFLAGS=\"/usr/lib/libmpfr.a /usr/lib/libecm.a /usr/lib/libm.a /usr/lib/libgmp.a\"\nRUN cd /go/src/github.com/sourcekris/goRsaTool && go build -ldflags=\"-extldflags=-static\" && \\\n    cp goRsaTool /go/bin"
}