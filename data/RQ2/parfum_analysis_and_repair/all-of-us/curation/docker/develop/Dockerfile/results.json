{
  "startTime": 1674249831659,
  "endTime": 1674249833077,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nLABEL org.opencontainers.image.authors=\"daniel.p.carbone@vumc.org\"\nLABEL org.opencontainers.image.url=\"https://github.com/all-of-us/curation\"\nLABEL org.opencontainers.image.documentation=\"https://github.com/all-of-us/curation\"\nLABEL org.opencontainers.image.licenses=\"MIT\"\nLABEL org.opencontainers.image.title=\"All of Us Curation base development image\"\nLABEL org.opencontainers.image.description=\"Base development container image used by the All of Us Curationm team\"\n\n### DESCRIPTION\n\n# this image's intent is to provide a universal base image upon which all subsequent development\n# images can be derived\n\n### CONTAINER BUILD\n\n## OS INIT\n# run the base container init first, as it is highly unlikely to change.\n# this allows us to modify subsequent steps without initating a full image rebuild\n\n# install deps and link \"python\" and \"python3\" execs to 3.7\nRUN apt update \\\n    && apt upgrade -y \\\n    && apt install --no-install-recommends -y \\\n      curl \\\n      git \\\n      python3.7-dev \\\n      python3.7-venv \\\n      python3-pip \\\n      python3-wheel \\\n      wget \\\n    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1 \\\n    && update-alternatives --install /usr/bin/python python /usr/bin/python3.7 1 && rm -rf /var/lib/apt/lists/*;\n\n## BUILD ARGS\n\n# expected to be defined via either docker-compose or as docker build --build-arg\nARG UID\nARG GID\n\n# this will be the name of our in-container user\nARG CURATION_USER=\"curation\"\nARG CURATION_HOME=\"/home/${CURATION_USER}\"\n\n# gsdk args\nARG GSDK_VERSION\nARG GSDK_CHECKSUM\nARG GSDK_INSTALL_PATH=\"${CURATION_HOME}/google-cloud-sdk\"\nARG GSDK_TAR_FILE=\"google-cloud-sdk-${GSDK_VERSION}-linux-x86_64.tar.gz\"\nARG GSDK_DOWNLOAD=\"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/${GSDK_TAR_FILE}\"\n\n# circleci cli args\nARG CIRCLECI_CLI_VERSION\nARG CIRCLECI_CLI_CHECKSUM\nARG CIRCLECI_CLI_TMP_PATH=\"/tmp/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64\"\nARG CIRCLECI_CLI_TAR_FILE=\"circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz\"\nARG CIRCLECI_CLI_DOWNLOAD=\"https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/${CIRCLECI_CLI_TAR_FILE}\"\n\n# this is the default location into which all per-purpose container scripts should be placed\nENV CURATION_SCRIPTS_DIR \"${CURATION_HOME}\"/container-scripts\n\n# this is the default location into which all per-purpose container commands should be placed\nENV CURATION_COMMANDS_DIR \"${CURATION_HOME}\"/container-commands\n\n# we're using the CIRCLE_ envvars to retain backwards compatbility\nENV CIRCLE_PROJECT_NAME \"all-of-us\"\nENV CIRCLE_WORKING_DIRECTORY \"${CURATION_HOME}/project/curation\"\nENV CIRCLE_ARTIFACTS \"/tmp/circleci-artifacts\"\n\n# python venv envvars\nENV VENV_PATH \"${CIRCLE_WORKING_DIRECTORY}/curation_venv\"\nENV VENV_ACTIVATE \"${VENV_PATH}/bin/activate\"\n\n# google envvars\nENV GOOGLE_APPLICATION_CREDENTIALS \"${CIRCLE_WORKING_DIRECTORY}/aou-res-curation-test.json\"\n\n# GLOBAL BINARIES SETUP\n\n# download circleci cli\nRUN wget --quiet \"${CIRCLECI_CLI_DOWNLOAD}\" \\\n    && if ! $(echo \"${CIRCLECI_CLI_CHECKSUM}\" \"${CIRCLECI_CLI_TAR_FILE}\" | sha256sum --check --status); \\\n        then echo \"CircleCI cli tar integrity check failure, please update build arg with correct checksum and/or version\";\\\n        exit 1;\\\n    fi;\n\nRUN tar -xvf \"${CIRCLECI_CLI_TAR_FILE}\" -C \"/tmp\" \\\n    && mv \"${CIRCLECI_CLI_TMP_PATH}/circleci\" \"/usr/bin/circleci\" \\\n    && rm -rf \"${CIRCLECI_CLI_TMP_PATH}\" \\\n    && /usr/bin/circleci update\n\n# CONTAINER USER SETUP\n\n# create runtime user group\nRUN if ! find . | grep -q \":${GID}:\" /etc/group; then \\\n    addgroup --gid \"${GID}\" \"${CURATION_USER}\"; \\\n    fi;\n\n# create runtime user\nRUN adduser \\\n    --shell /usr/bin/bash \\\n    --uid \"${UID}\" \\\n    --gid \"${GID}\" \\\n    --gecos \"\" \\\n    --disabled-login \\\n    \"${CURATION_USER}\"\n\n# WORKING DIRECTORY SETUP\n\n# create our penultimate working directory\nRUN mkdir -p \"${CIRCLE_WORKING_DIRECTORY}\" \\\n    && chown -R \"${CURATION_USER}\" \"${CIRCLE_WORKING_DIRECTORY}\" \\\n    && chmod -R 775 \"${CIRCLE_WORKING_DIRECTORY}\"\n\n# EVERYTHING ELSE\n\n# ensure /ci.env file exists\nRUN touch /ci.env\n\n# move into new home dir\nWORKDIR \"${CURATION_HOME}\"\n\n# switch to curation user\nUSER \"${CURATION_USER}\"\n\n# add check for ci.env file\nRUN echo source /ci.env | tee -a \"${CURATION_HOME}\"/.bashrc \"${CURATION_HOME}\"/.profile\n\n# add a few envvars to runtime user's bashrc and profile files\nRUN echo export CIRCLE_WORKING_DIRECTORY=\"${CIRCLE_WORKING_DIRECTORY}\" | \\\n      tee -a \"${CURATION_HOME}\"/.bashrc \"${CURATION_HOME}\"/.profile \\\n    && echo export CIRCLE_ARTIFACTS=\"${CIRCLE_ARTIFACTS}\" | \\\n      tee -a \"${CURATION_HOME}\"/.bashrc \"${CURATION_HOME}\"/.profile \\\n    && echo export GOOGLE_APPLICATION_CREDENTIALS=\"${GOOGLE_APPLICATION_CREDENTIALS}\" | \\\n      tee -a \"${CURATION_HOME}\"/.bashrc \"${CURATION_HOME}\"/.profile \\\n    && echo export CURATION_SCRIPTS_DIR=\"${CURATION_SCRIPTS_DIR}\" | \\\n      tee -a \"${CURATION_HOME}\"/.bashrc \"${CURATION_HOME}\"/.profile \\\n    && echo export CURATION_COMMANDS_DIR=\"${CURATION_COMMANDS_DIR}\" | \\\n      tee -a \"${CURATION_HOME}\"/.bashrc \"${CURATION_HOME}\"/.profile\n\n# download gsdk and verify checksum\nRUN wget --quiet \"${GSDK_DOWNLOAD}\" \\\n    && if ! $(echo \"${GSDK_CHECKSUM}\" \"${GSDK_TAR_FILE}\" | sha256sum --check --status); \\\n        then echo \"GSDK tar integrity check failure, please update build arg with correct checksum and/or version.\";\\\n        exit 1; \\\n    fi;\n\n# install gsdk,\nRUN mkdir -p \"${GSDK_INSTALL_PATH}\" \\\n    && tar -xzf \"${GSDK_TAR_FILE}\" -C \"${CURATION_HOME}\" \\\n    && rm \"${GSDK_TAR_FILE}\" \\\n    && cd \"${GSDK_INSTALL_PATH}\" \\\n    && ./install.sh --quiet \\\n    && echo \"source ${GSDK_INSTALL_PATH}/path.bash.inc\" | tee --append \"${CURATION_HOME}/.bashrc\" \"${CURATION_HOME}/.profile\" \\\n    && echo \"source ${GSDK_INSTALL_PATH}/completion.bash.inc\" | tee --append \"${CURATION_HOME}/.bashrc\" \"${CURATION_HOME}/.profile\" \\\n    && cd .. \\\n    && ./google-cloud-sdk/bin/gcloud components update --quiet\n\n# set container working directory to one created above\nWORKDIR \"${CIRCLE_WORKING_DIRECTORY}\"\n\n# copy in requirements.txt so we can go ahead and bake deps into the image\n# this requires a rebuild, but oh well.\nCOPY --chown=${CURATION_USER} --chmod=755 data_steward/requirements.txt \"${CIRCLE_WORKING_DIRECTORY}/data_steward/requirements.txt\"\n\n# initialize venv and install python deps\nRUN python -m venv \"${VENV_PATH}\" \\\n    && echo \"source ${VENV_ACTIVATE}\" | tee -a \"${CURATION_HOME}/.bashrc\" \"${CURATION_HOME}/.profile\" \\\n    && echo \"export PYTHONPATH=:${CIRCLE_WORKING_DIRECTORY}:${CIRCLE_WORKING_DIRECTORY}/data_steward:${CIRCLE_WORKING_DIRECTORY}/tests:\\\"\\${PYTHONPATH}\\\"\" \\\n      | tee -a \"${CURATION_HOME}/.bashrc\" \"${CURATION_HOME}/.profile\" \\\n    && . \"${VENV_ACTIVATE}\" \\\n    && python -m pip install --upgrade pip setuptools wheel \\\n    && python -m pip install -r data_steward/requirements.txt\n\n# remove data_steward dir as it will be mounted inside the container as a volume later.\nRUN rm -rf \"${CIRCLE_WORKING_DIRECTORY}/data_steward\"\n\n# copy in some seldom-modified files.\n# TODO: these should probably be mounted as ro volumes by the run script(s)\nCOPY --chown=${CURATION_USER} --chmod=755 .coveragerc \"${CIRCLE_WORKING_DIRECTORY}\"/\nCOPY --chown=${CURATION_USER} --chmod=755 .coveragerc_integration \"${CIRCLE_WORKING_DIRECTORY}\"/\nCOPY --chown=${CURATION_USER} --chmod=755 .coveragerc_unit \"${CIRCLE_WORKING_DIRECTORY}\"/\nCOPY --chown=${CURATION_USER} --chmod=755 .pylintrc \"${CIRCLE_WORKING_DIRECTORY}\"/\nCOPY --chown=${CURATION_USER} --chmod=755 .style.yapf \"${CIRCLE_WORKING_DIRECTORY}\"/\nCOPY --chown=${CURATION_USER} --chmod=755 .yapfignore \"${CIRCLE_WORKING_DIRECTORY}\"/\n\n# copy in our entrypoint script\nCOPY --chmod=555 docker/develop/entrypoint.sh /entrypoint.sh\n\n# copy in commands\nCOPY --chown=${CURATION_USER} --chmod=555 docker/develop/commands \"${CURATION_COMMANDS_DIR}\"\n\n# copy in scripts to be used inside test container\nCOPY --chown=${CURATION_USER} --chmod=555 docker/develop/scripts \"${CURATION_SCRIPTS_DIR}\"\n\n# define our entrypoint\nENTRYPOINT [ \"bash\", \"--login\", \"/entrypoint.sh\" ]"
}