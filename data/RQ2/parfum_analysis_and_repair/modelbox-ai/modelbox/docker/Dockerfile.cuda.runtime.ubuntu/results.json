{
  "startTime": 1674218928617,
  "endTime": 1674218930110,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 8,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 8,
        "columnEnd": 114
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 8,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=ubuntu:18.04\nFROM ${BASE_IMAGE} as base\n\nCOPY release /opt/release\nADD *.tar.gz /usr/local/\n\nARG CUDA_VER\nARG CUDA_VERSION\nARG TRT_VERSION\nARG TORCH_VERSION\nARG CUDA_CUDART_VERSION\nARG NVIDIA_CUDA_VERSION\nARG NVIDIA_REQUIRE_CUDA\n\nWORKDIR /root\n\nRUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo \"Asia/Shanghai\" > /etc/timezone && \\\n    apt update && apt upgrade -y && \\\n    apt install --no-install-recommends -y python3.7-dev python3-pip python3-apt python3-setuptools && \\\n    apt install --no-install-recommends -y dbus systemd systemd-cron iproute2 gnupg2 libfuse2 \\\n        build-essential bash unzip ffmpeg curl pkg-config ca-certificates libduktape202 \\\n        libssl1.1 libcpprest libswscale4 libavformat57 graphviz libprotobuf-c1 \\\n        libopencv-core3.2 libopencv-imgproc3.2 libopencv-imgcodecs3.2 && \\\n    rm -f /usr/bin/python3 /usr/bin/python && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100 && \\\n    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 100 && \\\n    update-alternatives --config python3 && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /root/.pip && \\\n    echo \"[global]\" > /root/.pip/pip.conf && \\\n    echo \"index-url = https://pypi.python.org/simple\" >>/root/.pip/pip.conf && \\\n    echo \"trusted-host = pypi.python.org\" >>/root/.pip/pip.conf && \\\n    echo \"timeout = 120\" >>/root/.pip/pip.conf && \\\n    python3 -m pip install --upgrade pip && \\\n    python3 -m pip install --no-cache-dir wheel pyyaml requests opencv-python pillow && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub | apt-key add - && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \\\n    echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /\" > /etc/apt/sources.list.d/cuda.list && \\\n    echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list && \\\n    apt update && \\\n    if [ \"${CUDA_VERSION}\" = \"10.2\" ];then \\\n        apt install -y --no-install-recommends \\\n            libcudnn8=8.0.0.180-1+cuda10.2 \\\n            libcublas10=10.2.2.89-1; \\\n    elif [ \"${CUDA_VERSION}\" = \"11.2\" ]; then \\\n        curl -f -LO https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz && \\\n        tar zxf libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz -C /usr/local/ && \\\n        python3 -m pip install --no-cache-dir tensorflow-gpu==2.6.0 && \\\n        apt install -y --no-install-recommends \\\n            libcudnn8=8.1.1.33-1+cuda11.2 \\\n            libcublas-11-2=11.4.1.1043-1; rm libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz fi && \\\n    find /usr/local -name \"*.a\"|xargs rm -f && \\\n    rm -rf /var/lib/apt/lists/* /root/*\n\nRUN apt update && \\\n    apt install -y --no-install-recommends \\\n        cuda-nvtx-${CUDA_VER} \\\n        cuda-libraries-${CUDA_VER} && \\\n    ln -s cuda-${CUDA_VERSION} /usr/local/cuda && \\\n    if [ -n \"${TRT_VERSION}\" ];then \\\n        v=\"7.1.3-1+cuda10.2\" && \\\n        apt install -y --no-install-recommends \\\n            libcudnn8=8.0.0.180-1+cuda10.2 \\\n            libnvinfer7=${v} \\\n            libnvonnxparsers7=${v} \\\n            libnvparsers7=${v} \\\n            libnvinfer-plugin7=${v} \\\n            python3-libnvinfer=${v}; \\\n    elif [ -n \"${TORCH_VERSION}\" ]; then \\\n        curl -f -LO https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.9.1%2Bcu102.zip && \\\n        unzip libtorch-*.zip -d /root >/dev/null 2>&1 && \\\n        cp -af libtorch/* /usr/local/; fi && \\\n    find /usr/local -name \"*.a\"|xargs rm -f && \\\n    rm -rf /var/lib/apt/lists/* /root/*\n\nRUN python3 -m pip install --no-cache-dir /opt/release/python/modelbox-*.whl && \\\n    dpkg -i /opt/release/*.deb && \\\n    (cd /lib/systemd/system/sysinit.target.wants/; for i in *; \\\n    do [ $i = systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\n    rm -f /lib/systemd/system/multi-user.target.wants/*; \\\n    rm -f /etc/systemd/system/*.wants/*; \\\n    rm -f /lib/systemd/system/local-fs.target.wants/*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\n    rm -f /lib/systemd/system/basic.target.wants/*; \\\n    rm -f /lib/systemd/system/anaconda.target.wants/*; \\\n    echo \"/usr/local/lib\" >>  /etc/ld.so.conf && \\\n    echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    sed -i 's/^SystemMaxUse=.*/SystemMaxUse=16M/g' /etc/systemd/journald.conf && \\\n    ldconfig -v 2>/dev/null && systemctl enable modelbox\n\nVOLUME [\"/sys/fs/cgroup\", \"/tmp\", \"/run\", \"/run/lock\"]\nSTOPSIGNAL SIGRTMIN+3\n\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\" com.nvidia.cuda.verison=\"${NVIDIA_CUDA_VERSION}\"\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin${PATH:+:${PATH}}\nENV LD_LIBRARY_PATH=/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility\nENV NVIDIA_REQUIRE_CUDA \"${NVIDIA_REQUIRE_CUDA}\"\n\nCMD [\"/sbin/init\", \"--log-target=journal\"]\n"
}