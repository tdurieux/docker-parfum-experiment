{
  "startTime": 1674248223720,
  "endTime": 1674248226429,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 8,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 8,
        "columnEnd": 114
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 8,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=openeuler/openeuler:20.03-lts-sp3\nFROM ${BASE_IMAGE} as base\n\nCOPY release /opt/release\nCOPY docker/repo/*.repo /etc/yum.repos.d/\n\nADD *.tar.gz /usr/local/\n\nARG CUDA_VER\nARG CUDA_VERSION\nARG TRT_VERSION\nARG TORCH_VERSION\nARG CUDA_CUDART_VERSION\nARG NVIDIA_CUDA_VERSION\nARG NVIDIA_REQUIRE_CUDA\n\nWORKDIR /root\n\nRUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo \"Asia/Shanghai\" > /etc/timezone && \\\n    dnf update -y --nogpgcheck && \\\n    dnf install -y --nogpgcheck curl boost libnsl libssh2 libatomic mesa-libGL graphviz protobuf-c systemd fuse libxml2 openssl bc && \\\n    ln -sf pip3.7 /usr/bin/pip && ln -sf python3.7 /usr/bin/python && \\\n    dnf clean all && rm -rf /var/cache/dnf/*\n\nRUN mkdir -p /root/.pip && \\\n    echo \"[global]\" > /root/.pip/pip.conf && \\\n    echo \"index-url = https://pypi.python.org/simple\" >>/root/.pip/pip.conf && \\\n    echo \"trusted-host = pypi.python.org\" >>/root/.pip/pip.conf && \\\n    echo \"timeout = 120\" >>/root/.pip/pip.conf && \\\n    python3 -m pip install --upgrade pip && \\\n    python3 -m pip install --no-cache-dir wheel pyyaml requests opencv-python pillow && \\\n    NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/7fa2af80.pub | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \\\n    echo \"$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA\" | sha256sum -c --strict - && \\\n    if [ \"${CUDA_VERSION}\" = \"10.2\" ];then \\\n        dnf install -y --nogpgcheck --setopt=obsoletes=0 \\\n            libcudnn8-8.0.0.180-1.cuda10.2 \\\n            libcublas10-10.2.2.89-1; \\\n    elif [ \"${CUDA_VERSION}\" = \"11.2\" ]; then \\\n        curl -f -LO https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz && \\\n        tar zxf libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz -C /usr/local/ && \\\n        rm -rf /usr/local/include/tensorflow && \\\n        python3 -m pip install --no-cache-dir tensorflow-gpu==2.6.0 && \\\n        dnf install -y --nogpgcheck --setopt=obsoletes=0 \\\n            libcudnn8-8.1.1.33-1.cuda11.2 \\\n            libcublas-11-2-11.4.1.1043; rm libtensorflow-gpu-linux-x86_64-2.6.0.tar.gzfi && \\\n    find /usr/local -name \"*.a\"|xargs rm -f && \\\n    dnf clean all && rm -rf /var/cache/dnf/* /root/*\n\nRUN dnf install -y --nogpgcheck --setopt=obsoletes=0 \\\n        cuda-nvtx-${CUDA_VER} \\\n        cuda-libraries-${CUDA_VER} && \\\n    ln -s cuda-${CUDA_VERSION} /usr/local/cuda && \\\n    if [ -n \"${TRT_VERSION}\" ];then \\\n        v=\"7.1.3-1.cuda10.2\" && \\\n        dnf install -y --nogpgcheck --setopt=obsoletes=0 \\\n            libcudnn8-8.0.0.180-1.cuda10.2 \\\n            libnvinfer7-${v} \\\n            libnvonnxparsers7-${v} \\\n            libnvparsers7-${v} \\\n            libnvinfer-plugin7-${v}; \\\n    elif [ -n \"${TORCH_VERSION}\" ]; then \\\n        curl -f -LO https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.9.1%2Bcu102.zip && \\\n        unzip libtorch-*.zip -d /root >/dev/null 2>&1 && \\\n        cp -af libtorch/lib /usr/local/; fi && \\\n    find /usr/local -name \"*.a\"|xargs rm -f && \\\n    dnf clean all && rm -rf /var/cache/dnf/* /root/*\n\nRUN python3 -m pip install --no-cache-dir /opt/release/python/modelbox-*.whl && \\\n    rpm -ivh /opt/release/*.rpm && \\\n    (cd /lib/systemd/system/sysinit.target.wants/; for i in *; \\\n    do [ $i = systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\n    rm -f /lib/systemd/system/multi-user.target.wants/*; \\\n    rm -f /etc/systemd/system/*.wants/*; \\\n    rm -f /lib/systemd/system/local-fs.target.wants/*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\n    rm -f /lib/systemd/system/basic.target.wants/*; \\\n    rm -f /lib/systemd/system/anaconda.target.wants/*; \\\n    sed -i 's/^SystemMaxUse=.*/SystemMaxUse=16M/g' /etc/systemd/journald.conf && \\\n    echo \"/usr/local/lib\" >>/etc/ld.so.conf && \\\n    echo \"/usr/local/lib64\" >>/etc/ld.so.conf && \\\n    echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\" > /etc/profile.d/pkgconfig.sh && \\\n    ldconfig -v 2>/dev/null && systemctl enable modelbox\n\nVOLUME [\"/sys/fs/cgroup\", \"/tmp\", \"/run\", \"/run/lock\"]\nSTOPSIGNAL SIGRTMIN+3\n\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\" com.nvidia.cuda.verison=\"${NVIDIA_CUDA_VERSION}\"\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin${PATH:+:${PATH}}\nENV LD_LIBRARY_PATH=/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility\nENV NVIDIA_REQUIRE_CUDA \"${NVIDIA_REQUIRE_CUDA}\"\n\nCMD [\"/usr/sbin/init\", \"--log-target=journal\"]\n"
}