{
  "startTime": 1674251385898,
  "endTime": 1674251387392,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 26,
        "columnStart": 49,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 26,
        "columnStart": 49,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.4-fpm\n\n# Set working directory\nWORKDIR /var/www\n\n# Install dependencies\nRUN curl -f -sL https://deb.nodesource.com/setup_14.x | bash - && \\\n    apt-get update --allow-releaseinfo-change && apt-get install --no-install-recommends -y \\\n    nodejs \\\n    build-essential \\\n    zlib1g-dev \\\n    libicu-dev \\\n    g++ \\\n    mariadb-client \\\n    libpng-dev \\\n    libjpeg62-turbo-dev \\\n    libfreetype6-dev \\\n    libzip-dev \\\n    locales \\\n    zip \\\n    jpegoptim optipng pngquant gifsicle \\\n    libonig-dev \\\n    vim \\\n    unzip \\\n    git \\\n    curl \\\n    nginx && \\\n    npm install -g npm && \\\n    /etc/init.d/nginx start && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Install extensions\nRUN docker-php-ext-install pdo_mysql mbstring zip exif pcntl intl\nRUN docker-php-ext-configure gd --with-freetype --with-jpeg\nRUN docker-php-ext-install gd\n\n# Install composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\n\n# Copy existing application directory contents\nCOPY --chown=www-data:www-data . /var/www\n\n# Copy the nginx conf file\nRUN rm /etc/nginx/sites-enabled/default\nRUN rm /etc/nginx/sites-available/default\n\nCOPY --chown=www-data:www-data docker/nginx-conf/docker-app.conf /etc/nginx/sites-available\n\nRUN ln -s /etc/nginx/sites-available/docker-app.conf /etc/nginx/sites-enabled/docker-app.conf\n\nRUN chown -R www-data:www-data /var/www\n\nRUN chmod +x ./docker/scripts/docker-set-up.sh\nRUN ./docker/scripts/docker-set-up.sh\n\nRUN chmod -R 755 /var/www/storage\n\nCOPY docker/.env.example.docker .env\n\n# Expose port 9000 and start php-fpm server\nEXPOSE 9000\nEXPOSE 80\nEXPOSE 443\n\nRUN [\"chmod\", \"+x\", \"./docker/scripts/docker-start.sh\"]\nCMD [\"./docker/scripts/docker-start.sh\"]\n"
}