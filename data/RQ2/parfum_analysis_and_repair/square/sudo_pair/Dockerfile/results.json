{
  "startTime": 1674249950244,
  "endTime": 1674249951041,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 84,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 82,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedDockerfile": "FROM rust:latest AS base\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN --mount=type=cache,target=/var/cache/apt \\\n    apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n        libclang1 \\\n        sudo && rm -rf /var/lib/apt/lists/*;\n\nFROM base AS build\n\n# we depend upon:\n# * >= 1.32 for uniform module paths\n# * >= 1.36 for std::mem::MaybeUninit\n# * >= 1.38 for std::ptr::cast\n# * >= 1.52 for warn(rustdoc:all)\nARG TOOLCHAIN\nENV TOOLCHAIN=${TOOLCHAIN:-1.52}\n\nRUN --mount=type=cache,target=/tmp/cache/cargo                  \\\n    --mount=type=cache,target=/tmp/cache/target,sharing=private \\\n    rustup self update                  && \\\n    rustup toolchain install $TOOLCHAIN && \\\n    rustup default           $TOOLCHAIN && \\\n    rustup component add clippy\n\nENV CARGO_HOME=/tmp/cache/cargo\nENV CARGO_TARGET_DIR=/tmp/cache/target\n\nWORKDIR /srv/rust\n\nFROM build AS sudo_pair-deps\n\nRUN cargo new --lib sudo_plugin-sys\nRUN cargo new --lib sudo_plugin\nRUN cargo new --lib sudo_pair\nRUN cargo new --lib examples/raw_plugin_api\n\nCOPY Cargo.toml                         .\nCOPY sudo_plugin-sys/Cargo.toml         ./sudo_plugin-sys\nCOPY sudo_plugin-sys/build.rs           ./sudo_plugin-sys\nCOPY sudo_plugin-sys/src/bindings       ./sudo_plugin-sys/src/bindings\nCOPY sudo_plugin/Cargo.toml             ./sudo_plugin\nCOPY sudo_pair/Cargo.toml               ./sudo_pair\nCOPY examples/raw_plugin_api/Cargo.toml ./examples/raw_plugin_api\n\nRUN --mount=type=cache,target=${CARGO_HOME}       \\\n    --mount=type=cache,target=${CARGO_TARGET_DIR} \\\n    cargo build\n\nFROM sudo_pair-deps AS sudo_pair\n\nARG CARGOFLAGS\nARG RUSTFLAGS=\"-A warnings -A unknown_lints --verbose\"\nARG RUSTDOCFLAGS\n\n# replace the dummy crates with the full project\nCOPY . .\n\nFROM sudo_pair AS sudo_pair-build\n\nRUN --mount=type=cache,target=${CARGO_HOME}       \\\n    --mount=type=cache,target=${CARGO_TARGET_DIR} \\\n    cargo build ${CARGOFLAGS}\n\nFROM sudo_pair-build AS sudo_pair-test\n\nRUN --mount=type=cache,target=${CARGO_HOME}       \\\n    --mount=type=cache,target=${CARGO_TARGET_DIR} \\\n    cargo test ${CARGOFLAGS}\n\nFROM sudo_pair-build AS sudo_pair-lint\n\nRUN --mount=type=cache,target=${CARGO_HOME}       \\\n    --mount=type=cache,target=${CARGO_TARGET_DIR} \\\n    cargo clippy ${CARGOFLAGS}\n\nFROM sudo_pair AS sudo_pair-sample\n\nRUN --mount=type=cache,target=/var/cache/apt \\\n    apt-get install --no-install-recommends -y \\\n        busybox-syslogd \\\n        socat \\\n        vim && rm -rf /var/lib/apt/lists/*;\n\n# copy the cached cargo build stages into the container\nRUN --mount=type=cache,target=${CARGO_HOME}       \\\n    --mount=type=cache,target=${CARGO_TARGET_DIR} \\\n    cp -a ${CARGO_HOME}       ~/.cargo && \\\n    cp -a ${CARGO_TARGET_DIR} .\n\nENV CARGO_HOME=~/.cargo\nENV CARGO_TARGET_DIR=/srv/rust/target\n\nRUN make -C sample\nRUN make -C sample prefix= exec_prefix=/usr install\n"
}