{
  "startTime": 1674216901716,
  "endTime": 1674216903045,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedDockerfile": "# Dockerfile to build aria2 Windows binary using ubuntu mingw-w64\n# cross compiler chain.\n#\n# $ sudo docker build -t aria2-mingw - < Dockerfile.mingw\n#\n# After successful build, windows binary is located at\n# /aria2/src/aria2c.exe.  You can copy the binary using following\n# commands:\n#\n# $ id=$(sudo docker create aria2-mingw)\n# $ sudo docker cp $id:/aria2/src/aria2c.exe <dest>\n# $ sudo docker rm -v $id\n\nFROM ubuntu:20.04\n\nMAINTAINER Tatsuhiro Tsujikawa\n\n# Change HOST to x86_64-w64-mingw32 to build 64-bit binary\nENV HOST i686-w64-mingw32\n\n# It would be better to use nearest ubuntu archive mirror for faster\n# downloads.\n# RUN sed -ie 's/archive\\.ubuntu/jp.archive.ubuntu/g' /etc/apt/sources.list\n\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    apt-get install -y --no-install-recommends \\\n        make binutils autoconf automake autotools-dev libtool \\\n        patch ca-certificates \\\n        pkg-config git curl dpkg-dev gcc-mingw-w64 g++-mingw-w64 \\\n        autopoint libcppunit-dev libxml2-dev libgcrypt20-dev lzip && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -L -O https://gmplib.org/download/gmp/gmp-6.2.1.tar.lz && \\\n    curl -f -L -O https://github.com/libexpat/libexpat/releases/download/R_2_4_1/expat-2.4.1.tar.bz2 && \\\n    curl -f -L -O https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz && \\\n    curl -f -L -O http://zlib.net/zlib-1.2.11.tar.gz && \\\n    curl -f -L -O https://c-ares.haxx.se/download/c-ares-1.17.2.tar.gz && \\\n    curl -f -L -O https://www.libssh2.org/download/libssh2-1.9.0.tar.gz && \\\n    curl -f -L -O https://github.com/libssh2/libssh2/commit/ba149e804ef653cc05ed9803dfc94519ce9328f7.patch\n\nRUN tar xf gmp-6.2.1.tar.lz && \\\n    cd gmp-6.2.1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --disable-shared \\\n        --enable-static \\\n        --prefix=/usr/local/$HOST \\\n        --host=$HOST \\\n        --disable-cxx \\\n        --enable-fat \\\n        CFLAGS=\"-mtune=generic -O2 -g0\" && \\\n    make install && rm gmp-6.2.1.tar.lz\n\nRUN tar xf expat-2.4.1.tar.bz2 && \\\n    cd expat-2.4.1 && \\\n    ./configure \\\n        --disable-shared \\\n        --enable-static \\\n        --prefix=/usr/local/$HOST \\\n        --host=$HOST \\\n        --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \\\n    make install && rm expat-2.4.1.tar.bz2\n\nRUN tar xf sqlite-autoconf-3360000.tar.gz && \\\n    cd sqlite-autoconf-3360000 && \\\n    ./configure \\\n        --disable-shared \\\n        --enable-static \\\n        --prefix=/usr/local/$HOST \\\n        --host=$HOST \\\n        --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \\\n    make install && rm sqlite-autoconf-3360000.tar.gz\n\nRUN tar xf zlib-1.2.11.tar.gz && \\\n    cd zlib-1.2.11 && \\\n    CC=$HOST-gcc \\\n    AR=$HOST-ar \\\n    LD=$HOST-ld \\\n    RANLIB=$HOST-ranlib \\\n    STRIP=$HOST-strip \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n\n\n        --prefix=/usr/local/$HOST \\\n        --libdir=/usr/local/$HOST/lib \\\n        --includedir=/usr/local/$HOST/include \\\n        --static && \\\n    make install && rm zlib-1.2.11.tar.gz\n\nRUN tar xf c-ares-1.17.2.tar.gz && \\\n    cd c-ares-1.17.2 && \\\n    ./configure \\\n        --disable-shared \\\n        --enable-static \\\n        --without-random \\\n        --prefix=/usr/local/$HOST \\\n        --host=$HOST \\\n        --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\\n        LIBS=\"-lws2_32\" && \\\n    make install && rm c-ares-1.17.2.tar.gz\n\nRUN tar xf libssh2-1.9.0.tar.gz && \\\n    cd libssh2-1.9.0 && \\\n    patch -p1 < ../ba149e804ef653cc05ed9803dfc94519ce9328f7.patch && \\\n    ./configure \\\n        --disable-shared \\\n        --enable-static \\\n        --prefix=/usr/local/$HOST \\\n        --host=$HOST \\\n        --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\\n        --without-openssl \\\n        --with-wincng \\\n        LIBS=\"-lws2_32\" && \\\n    make install && rm libssh2-1.9.0.tar.gz\nADD https://api.github.com/repos/aria2/aria2/git/refs/heads/master version.json\nRUN git clone https://github.com/aria2/aria2 && \\\n    cd aria2 && autoreconf -i && ./mingw-config && make && \\\n    $HOST-strip src/aria2c.exe\n"
}