{
  "startTime": 1674254195883,
  "endTime": 1674254196858,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:22.04 as base_runtime\nLABEL maintainer=\"https://github.com/underworldcode/\"\nENV LANG=C.UTF-8\nENV PYVER=3.10\n# Setup some things in anticipation of virtualenvs\nENV VIRTUAL_ENV=/opt/venv\n# The following ensures that the venv takes precedence if available\nENV PATH=${VIRTUAL_ENV}/bin:$PATH\n\n# The following ensures venv packages are available when using system python (such as from jupyter)\nENV PYTHONPATH=${PYTHONPATH}:${VIRTUAL_ENV}/lib/python${PYVER}/site-packages\n# add joyvan user, volume mount and expose port 8888\nEXPOSE 8888\nENV NB_USER jovyan\nENV NB_WORK /home/$NB_USER\nRUN useradd -m -s /bin/bash -N $NB_USER -g users \\\n&&  mkdir -p /$NB_WORK/workspace \\\n&&  chown -R $NB_USER:users $NB_WORK\nVOLUME $NB_WORK/workspace\n\n# make virtualenv directory and set permissions\nRUN mkdir ${VIRTUAL_ENV} \\\n&&  chmod ugo+rwx ${VIRTUAL_ENV}\n\n# install runtime requirements\nRUN apt-get update -qq \\\n&&  DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        python3-minimal \\\n        python3-venv \\\n        python3-pip \\\n        python3-numpy \\\n        libpng16-16 \\\n        libjpeg8 \\\n        libtiff5 \\ \n        libglu1-mesa \\\n        libosmesa6 \\\n        libavcodec58 \\\n        libavformat58 \\\n        libavutil56 \\\n        libswscale5 \\\n        zlib1g \\\n        libopenblas0 \\\n&&  apt-get clean \\\n&&  rm -rf /var/lib/apt/lists/*\n\nRUN pip3 install --no-cache-dir -U setuptools \\\n&& pip3 install --no-cache-dir \\\n        packaging \\\n        appdirs \\\n        jupyter \\\n        pillow \\\n        ipython\n\nFROM base_runtime AS build_base\n# FROM base_runtime AS build_base\n# install build requirements\nRUN apt-get update -qq\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        build-essential \\\n        python3-setuptools \\\n        libpython${PYVER}-dev \\\n        libpng-dev \\\n        libjpeg-dev \\\n        libtiff-dev \\\n        mesa-utils \\\n        libglu1-mesa-dev \\\n        libosmesa6-dev \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libavutil-dev \\\n        libswscale-dev \\\n        zlib1g-dev \\\n        cmake \\\n        libopenblas-dev \\\n        libz-dev && rm -rf /var/lib/apt/lists/*;\n\n# lavavu\n# create a virtualenv to put new python modules\nUSER $NB_USER\nRUN /usr/bin/python3 -m venv --system-site-packages ${VIRTUAL_ENV}\nRUN LV_OSMESA=1 pip3 install --no-cache-dir --no-binary=lavavu lavavu\n\nFROM base_runtime AS minimal\nCOPY --from=build_base $VIRTUAL_ENV $VIRTUAL_ENV\nCOPY --from=build_base /usr/local /usr/local\n# ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/x86_64-linux-gnu/\n# Record Python packages, but only record system packages!\n# Not venv packages, which will be copied directly in.\nRUN PYTHONPATH= /usr/bin/pip3 freeze >/opt/requirements.txt\n# Record manually install apt packages.\nRUN apt-mark showmanual >/opt/installed.txt\n\n# Add user environment\nFROM minimal\nUSER $NB_USER\nWORKDIR $NB_WORK\nCMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip='0.0.0.0'\"]\n"
}