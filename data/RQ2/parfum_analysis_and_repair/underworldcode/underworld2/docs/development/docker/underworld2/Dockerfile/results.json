{
  "startTime": 1674253635687,
  "endTime": 1674253636964,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedDockerfile": "# This image needs to be built from the top level project directory.\n# Typically:\n#    $  docker build -f docs/development/docker/underworld2/Dockerfile .\n\nFROM underworldcode/base as base_runtime\nLABEL maintainer=\"https://github.com/underworldcode/\"\n# install runtime requirements\nUSER root\nENV PYVER=3.10\nRUN apt-get update -qq \\\n&& DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        libxml2 \\\n        libpython${PYVER} && rm -rf /var/lib/apt/lists/*;\n\n\nFROM base_runtime AS build_base\n# install build requirements\nRUN apt-get update -qq\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        build-essential \\\n        pkg-config \\\n        python3-dev \\\n        cmake \\\n        ninja-build \\\n        make \\\n        swig \\\n        libxml2-dev \\\n        g++ \\\n        pkg-config && rm -rf /var/lib/apt/lists/*;\n# setup further virtualenv to avoid double copying back previous packages (h5py,mpi4py,etc)\nUSER $NB_USER\nRUN /usr/bin/python3 -m venv --system-site-packages ${VIRTUAL_ENV}\nWORKDIR /tmp\nCOPY --chown=jovyan:users . /tmp/underworld2\nWORKDIR /tmp/underworld2\nRUN pip3 install --no-cache-dir -vvv .\n\nFROM base_runtime\nCOPY --from=build_base ${VIRTUAL_ENV} ${VIRTUAL_ENV}\n# Record Python packages, but only record system packages!\n# Not venv packages, which will be copied directly in.\nRUN PYTHONPATH= /usr/bin/pip3 freeze >/opt/requirements.txt\n# Record manually install apt packages.\nRUN apt-mark showmanual >/opt/installed.txt\n# Copy in examples, tests, etc.\nCOPY --chown=jovyan:users ./docs/examples   $NB_WORK/Underworld/examples\nCOPY --chown=jovyan:users ./docs/cheatsheet $NB_WORK/Underworld/cheatsheet\nCOPY --chown=jovyan:users ./docs/user_guide $NB_WORK/Underworld/user_guide\nCOPY --chown=jovyan:users ./docs/test       $NB_WORK/Underworld/test\nCOPY --chown=jovyan:users ./docs/UWGeodynamics/examples  $NB_WORK/Underworld/UWGeodynamics/examples\nCOPY --chown=jovyan:users ./docs/UWGeodynamics/benchmarks  $NB_WORK/Underworld/UWGeodynamics/benchmarks\nCOPY --chown=jovyan:users ./docs/UWGeodynamics/tutorials  $NB_WORK/Underworld/UWGeodynamics/tutorials\nRUN chown jovyan:users /home/jovyan/workspace\nRUN jupyter serverextension enable --sys-prefix jupyter_server_proxy\nUSER $NB_USER\nWORKDIR $NB_WORK\n"
}