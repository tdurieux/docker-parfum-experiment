{
  "startTime": 1674250367198,
  "endTime": 1674250368389,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 19,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic\nLABEL maintainer=\"https://github.com/underworldcode/\"\n\nRUN  mkdir /home1 /work /scratch /gpfs /corral-repl /corral-tacc /data\n\n########################################\n# Install mpi\n########################################\n\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        bash-completion \\\n        build-essential \\\n        git \\\n        python3-minimal \\\n        python3-dev \\\n        python3-pip \\\n        libxml2-dev \\\n        xorg-dev \\\n        ssh \\\n        curl \\\n        libfreetype6-dev \\\n        libpng-dev \\\n        libxft-dev \\\n        xvfb \\\n        freeglut3 \\\n        freeglut3-dev \\\n        libgl1-mesa-dri \\\n        libgl1-mesa-glx \\\n        python3-tk \\\n        rsync \\\n        vim \\\n        less \\\n        xauth \\\n        swig \\\n        gdb \\\n        python3-dbg \\\n        cmake \\\n        python3-setuptools \\\n        wget \\\n        ca-certificates \\\n        bison \\\n        rdma-core \\\n        libnuma-dev \\\n        gfortran  && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install PSM2\nARG PSM=PSM2\nARG PSMV=11.2.78\nARG PSMD=opa-psm2-${PSM}_${PSMV}\n\nRUN curl -f -L https://github.com/intel/opa-psm2/archive/${PSM}_${PSMV}.tar.gz | tar -xzf - \\\n    && cd ${PSMD} \\\n    && make PSM_AVX=1 -j $(nproc --all 2>/dev/null || echo 2) \\\n    && make LIBDIR=/usr/lib/x86_64-linux-gnu install \\\n    && cd ../ && rm -rf ${PSMD}\n\n# Install mvapich2-2.3\nARG MAJV=2\nARG MINV=3\nARG DIR=mvapich${MAJV}-${MAJV}.${MINV}\n\nRUN curl -f https://mvapich.cse.ohio-state.edu/download/mvapich/mv${MAJV}/${DIR}.tar.gz | tar -xzf - \\\n    && cd ${DIR} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-device=ch3:psm \\\n    && make -j $(nproc --all 2>/dev/null || echo 2) && make install \\\n    && mpicc examples/hellow.c -o /usr/bin/hellow \\\n    && cd ../ && rm -rf ${DIR} && rm -rf /usr/local/share/doc/mvapich2\n\nENV LANG=C.UTF-8\n# Install setuptools and wheel first, needed by plotly\nRUN pip3 install --no-cache-dir -U setuptools && \\\n    pip3 install --no-cache-dir -U wheel && \\\n    pip3 install --no-cache-dir packaging \\\n        appdirs \\\n        numpy \\\n        jupyter \\\n        plotly \\\n        matplotlib \\\n        pillow \\\n        pyvirtualdisplay \\\n        ipython \\\n        ipyparallel \\\n        pint \\\n        sphinx \\\n        sphinx_rtd_theme \\\n        sphinxcontrib-napoleon \\\n        mock \\\n        scipy \\ \n        tabulate \\\n        mpi4py\n\n# update python to py3\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1\n\nWORKDIR /tmp/petsc-build\nARG PETSC_VERSION=\"3.11.2\"\nRUN wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz && \\\n    tar zxf petsc-lite-${PETSC_VERSION}.tar.gz && cd petsc-${PETSC_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-debugging=0 --prefix=/usr/local/petsc \\\n                --COPTFLAGS=\"-g -O3\" --CXXOPTFLAGS=\"-g -O3\" --FOPTFLAGS=\"-g -O3\" \\\n                --with-zlib=1 \\\n                --download-fblaslapack=1 \\\n                --download-ctetgen=1 \\\n                --download-triangle=1 \\\n                --download-hdf5=1 \\\n                --download-mumps=1 \\\n                --download-parmetis=1 \\\n                --download-metis=1 \\\n                --download-superlu=1 \\\n                --download-hypre=1 \\\n                --download-scalapack=1 \\\n                --download-superlu_dist=1 \\\n                --useThreads=1 \\\n                --download-superlu=1 \\\n                --with-shared-libraries \\\n                --with-cxx-dialect=C++11 && \\\n    make PETSC_DIR=/tmp/petsc-build/petsc-${PETSC_VERSION} PETSC_ARCH=arch-linux-c-opt all && \\\n    make PETSC_DIR=/tmp/petsc-build/petsc-${PETSC_VERSION} PETSC_ARCH=arch-linux-c-opt install && \\\n    make PETSC_DIR=/usr/local/petsc PETSC_ARCH=\"\" test && \\\n    cd /tmp && \\\n    rm -fr * && rm petsc-lite-${PETSC_VERSION}.tar.gz\n\nENV PETSC_DIR=/usr/local/petsc\nENV PATH=${PETSC_DIR}/bin:$PATH\n\nENV PYTHONPATH $PYTHONPATH:/usr/lib\nRUN CC=h5pcc HDF5_MPI=\"ON\" HDF5_DIR=${PETSC_DIR} pip3 install --no-cache-dir --no-binary=h5py h5py && \\\n    pip3 install --no-cache-dir petsc4py\n\nENV NB_WORK /workspace\n# create a volume\nVOLUME $NB_WORK/user_data\nWORKDIR $NB_WORK\n\nRUN pip3 install --no-cache-dir lavavu\n\n# install underworld under /tmp.\nWORKDIR /tmp\nENV UW2_TMP /tmp/underworld2\nENV UW2_DIR /usr/local/underworld2\nENV PYTHONPATH $PYTHONPATH:$UW2_DIR/lib\nRUN mkdir -p $UW2_TMP\n\nCOPY . $UW2_TMP/\n\nRUN cd $UW2_TMP && pip3 install --no-cache-dir -vvv .\n\n# environment variable will internally run xvfb when uw.visualisation is imported,\n# see /opt/underworld2/visualisation/__init__.py\nENV UW_USE_XVFB 1\n\nWORKDIR $NB_WORK\n\n\n"
}