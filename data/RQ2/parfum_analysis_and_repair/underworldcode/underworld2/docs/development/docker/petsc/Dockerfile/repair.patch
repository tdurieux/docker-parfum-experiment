diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/underworldcode/underworld2/docs/development/docker/petsc/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/underworldcode/underworld2/docs/development/docker/petsc/Dockerfile/repaired.Dockerfile
index 5214664..7d92455 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/underworldcode/underworld2/docs/development/docker/petsc/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/underworldcode/underworld2/docs/development/docker/petsc/Dockerfile/repaired.Dockerfile
@@ -18,7 +18,7 @@ RUN useradd -m -s /bin/bash -N $NB_USER -g users \
 &&  chown -R $NB_USER:users $NB_WORK
 VOLUME $NB_WORK/workspace
 
-# make virtualenv directory and set permissions 
+# make virtualenv directory and set permissions
 RUN mkdir ${VIRTUAL_ENV} \
 &&  chmod ugo+rwx ${VIRTUAL_ENV}
 
@@ -35,16 +35,16 @@ RUN apt-get update -qq \
 &&  apt-get clean \
 &&  rm -rf /var/lib/apt/lists/*
 
-RUN pip3 install -U setuptools  \
-&&  pip3 install --no-cache-dir \
+RUN pip3 install --no-cache-dir -U setuptools \
+&& pip3 install --no-cache-dir \
         packaging \
         appdirs \
         jupyter \
-        ipyparallel 
+        ipyparallel
 
 FROM base_runtime AS build_base
 # install build requirements
-RUN apt-get update -qq 
+RUN apt-get update -qq
 RUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
         build-essential \
         cmake \
@@ -54,18 +54,18 @@ RUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
         libopenblas-dev \
         libz-dev \
         cmake \
-        git
+        git && rm -rf /var/lib/apt/lists/*;
 # build mpi
 WORKDIR /tmp/mpich-build
 ARG MPICH_VERSION="4.0.2"
-RUN wget http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz 
-RUN  tar xvzf mpich-${MPICH_VERSION}.tar.gz 
-WORKDIR /tmp/mpich-build/mpich-${MPICH_VERSION}              
+RUN wget https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz
+RUN tar xvzf mpich-${MPICH_VERSION}.tar.gz && rm mpich-${MPICH_VERSION}.tar.gz
+WORKDIR /tmp/mpich-build/mpich-${MPICH_VERSION}             
 ARG MPICH_CONFIGURE_OPTIONS="--prefix=/usr/local --enable-g=option=none --disable-debuginfo --enable-fast=O3,ndebug --without-timing --without-mpit-pvars --with-device=ch3 FFLAGS=-fallow-argument-mismatch FCFLAGS=-fallow-argument-mismatch"
 ARG MPICH_MAKE_OPTIONS="-j8"
-RUN ./configure ${MPICH_CONFIGURE_OPTIONS} 
-RUN make ${MPICH_MAKE_OPTIONS}             
-RUN make install                           
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" ${MPICH_CONFIGURE_OPTIONS}
+RUN make ${MPICH_MAKE_OPTIONS}            
+RUN make install                          
 RUN ldconfig
 
 # create venv now for forthcoming python packages
@@ -77,8 +77,8 @@ USER root
 # build petsc
 WORKDIR /tmp/petsc-build
 ARG PETSC_VERSION="3.17.1"
-RUN wget http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz
-RUN tar zxf petsc-lite-${PETSC_VERSION}.tar.gz
+RUN wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz
+RUN tar zxf petsc-lite-${PETSC_VERSION}.tar.gz && rm petsc-lite-${PETSC_VERSION}.tar.gz
 WORKDIR /tmp/petsc-build/petsc-${PETSC_VERSION}
 RUN python3 -m pip install cython
 RUN python3 ./configure --with-debugging=0 --prefix=/usr/local \
@@ -104,7 +104,7 @@ RUN python3 ./configure --with-debugging=0 --prefix=/usr/local \
 RUN make PETSC_DIR=/tmp/petsc-build/petsc-${PETSC_VERSION} PETSC_ARCH=arch-linux-c-opt all
 RUN make PETSC_DIR=/tmp/petsc-build/petsc-${PETSC_VERSION} PETSC_ARCH=arch-linux-c-opt install
 # these aren't needed
-RUN rm -fr /usr/local/share/petsc 
+RUN rm -fr /usr/local/share/petsc
 # build petsc4py
 ENV PETSC_DIR=/usr/local
 USER $NB_USER
@@ -113,7 +113,7 @@ RUN CC=h5pcc HDF5_MPI="ON" HDF5_DIR=${PETSC_DIR} pip3 install --no-cache-dir --n
 FROM base_runtime AS minimal
 COPY --from=build_base $VIRTUAL_ENV $VIRTUAL_ENV
 COPY --from=build_base /usr/local /usr/local
-# Record Python packages, but only record system packages! 
+# Record Python packages, but only record system packages!
 # Not venv packages, which will be copied directly in.
 RUN PYTHONPATH= /usr/bin/pip3 freeze >/opt/requirements.txt
 # Record manually install apt packages.