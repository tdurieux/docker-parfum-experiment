{
  "startTime": 1674220977019,
  "endTime": 1674220977751,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:22.04 as base_runtime\nLABEL maintainer=\"https://github.com/underworldcode/\"\nENV LANG=C.UTF-8\nENV PYVER=3.10\n# Setup some things in anticipation of virtualenvs\nENV VIRTUAL_ENV=/opt/venv\n# The following ensures that the venv takes precedence if available\nENV PATH=${VIRTUAL_ENV}/bin:$PATH\n# The following ensures venv packages are available when using system python (such as from jupyter)\nENV PYTHONPATH=${PYTHONPATH}:${VIRTUAL_ENV}/lib/python${PYVER}/site-packages\n\n# add joyvan user, volume mount and expose port 8888\nEXPOSE 8888\nENV NB_USER jovyan\nENV NB_WORK /home/$NB_USER\nRUN useradd -m -s /bin/bash -N $NB_USER -g users \\\n&&  mkdir -p /$NB_WORK/workspace \\\n&&  chown -R $NB_USER:users $NB_WORK\nVOLUME $NB_WORK/workspace\n\n# make virtualenv directory and set permissions\nRUN mkdir ${VIRTUAL_ENV} \\\n&&  chmod ugo+rwx ${VIRTUAL_ENV}\n\n# install runtime requirements\nRUN apt-get update -qq \\\n&&  DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \\\n        bash-completion \\\n        bash-completion \\\n        python3-minimal \\\n        python3-venv \\\n        python3-pip \\\n        python3-numpy \\\n        vim \\\n        less \\\n        git \\\n        cmake \\\n        g++ \\\n        gcc python3-dev \\\n        valgrind valgrind-dbg valgrind-mpi \\\n        gdb cgdb \\ \n&&  apt-get clean \\\n&&  rm -rf /var/lib/apt/lists/*\n\nRUN pip3 install --no-cache-dir -U setuptools \\\n&& pip3 install --no-cache-dir \\\n        packaging \\\n        appdirs \\\n        jupyter \\\n        jupytext \\\n        jupyterlab \\\n        plotly \\\n        matplotlib \\\n        pillow \\\n        ipython \\\n        ipyparallel \\\n        pint==0.9 \\\n        scipy \\ \n        rise \\\n        tabulate\n\n# Lets grab lavavu & requirements\nCOPY --from=underworldcode/lavavu /opt       /opt\nCOPY --from=underworldcode/lavavu /usr/local /usr/local\nRUN apt-get update \\\n&&  DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends $(awk '{print $1'} /opt/installed.txt) \\\n&&  apt-get clean \\\n&&  rm -rf /var/lib/apt/lists/*\nRUN PYTHONPATH= /usr/bin/pip3 install -r /opt/requirements.txt\n\n# mpi, petsc, mpi4py, petsc4py, h5py\nCOPY --from=underworldcode/petsc /opt       /opt\nCOPY --from=underworldcode/petsc /usr/local /usr/local\nRUN apt-get update \\\n&&  DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends $(awk '{print $1'} /opt/installed.txt) \\\n&&  apt-get clean \\\n&&  rm -rf /var/lib/apt/lists/*\nRUN PYTHONPATH= /usr/bin/pip3 install -r /opt/requirements.txt\n\n# jovyan user, finalise jupyter env\nUSER $NB_USER\n# RUN ipython profile create --parallel --profile=mpi \\\n# &&  echo \"c.IPClusterEngines.engine_launcher_class = 'MPIEngineSetLauncher'\" >> $NB_WORK/.ipython/profile_mpi/ipcluster_config.py\nWORKDIR $NB_WORK\nCMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip='0.0.0.0'\"]\n"
}