{
  "startTime": 1674248714830,
  "endTime": 1674248715404,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16.15.0-alpine as builder\n\n# Create app directory\nWORKDIR /app\n\n# add `/app/node_modules/.bin` to $PATH\nENV PATH /app/node_modules/.bin:$PATH\n\nARG ARG_GRAPHQL_ENDPOINT=/graphql\nENV REACT_APP_GRAPHQL_ENDPOINT=${ARG_GRAPHQL_ENDPOINT}\n\n# set build version, date and revision\nARG ARG_BUILD_VERSION=dev\nARG ARG_BUILD_DATE\nARG ARG_BUILD_REVISION\nENV REACT_APP_BUILD_VERSION=${ARG_BUILD_VERSION}\nENV REACT_APP_BUILD_DATE=${ARG_BUILD_DATE}\nENV REACT_APP_BUILD_REVISION=${ARG_BUILD_REVISION}\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\n\nRUN npm i -g npm@8.5.5 && npm cache clean --force;\nRUN npm install && npm cache clean --force;\n\n# Everything for now\nCOPY . .\n\nRUN npm run-script build\n\nFROM nginx:alpine as production-build\nCOPY ./.build/.nginx/nginx.conf /etc/nginx/nginx.conf\n\n## Remove default nginx index page\nRUN rm -rf /usr/share/nginx/html/*\n\n# Copy from the stage 1\nCOPY --from=builder /app/build /usr/share/nginx/html\n\nWORKDIR /usr/share/nginx/html\nCOPY --from=builder /app/.build/docker/env.sh .\nCOPY --from=builder /app/.build/docker/.env.base .\nRUN chmod +x env.sh\n\nEXPOSE 80\nCMD [\"/bin/sh\", \"-c\", \"/usr/share/nginx/html/env.sh && nginx -g \\\"daemon off;\\\"\"]\n"
}