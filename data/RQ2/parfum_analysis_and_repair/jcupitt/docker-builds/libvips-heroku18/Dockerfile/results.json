{
  "startTime": 1674253269039,
  "endTime": 1674253270751,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 138,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedDockerfile": "FROM heroku/heroku:18\n\n# generic build tools  ... libgsf needs intltool\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y \\\n\t\tbuild-essential \\\n\t\twget \\\n\t\tpython3-pip \\\n\t\tninja-build \\\n\t\tintltool \\\n\t\tpkg-config && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir meson\n\n# use the heroku platform libraries when we can\n#\n# see https://devcenter.heroku.com/articles/stack-packages\n#\n# libgsf needs libxml2\n#\n# this should only pull in header files and should not create any extra run\n# time dependencies\nRUN apt-get install --no-install-recommends -y \\\n\tglib-2.0-dev \\\n\tlibexpat1-dev \\\n\tlibpango1.0-dev \\\n\tlibrsvg2-dev \\\n\tlibpng-dev \\\n\tlibwebp-dev \\\n\tlibjpeg-turbo8-dev \\\n\tlibtiff5-dev \\\n\tlibexif-dev \\\n\tliblcms2-dev \\\n\tlibxml2-dev \\\n\tlibfftw3-dev && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /usr/local/src\n\n# build to this prefix\n#  - heroku has /usr/local/lib on the default ld.so.conf search path, so\n#    this is convenient\n#  - heroku has a basic dir structure in /usr/local, but no files\nARG PREFIX=/usr/local\nENV PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig\n\n# the main libimagequant is now gpl3 and we can't use it ... this is a\n# maintained fork of the old BSD-licensed version\nARG IMAGEQUANT_VERSION=main\nARG IMAGEQUANT_URL=https://github.com/lovell/libimagequant\n\nRUN git clone $IMAGEQUANT_URL \\\n\t&& cd libimagequant \\\n\t&& git checkout $IMAGEQUANT_VERSION \\\n\t&& meson build --prefix=${PREFIX} --libdir=lib \\\n\t&& cd build \\\n\t&& ninja \\\n\t&& ninja install\n\n# need to add heif\n\nARG ORC_VERSION=0.4.32\nARG ORC_URL=https://gstreamer.freedesktop.org/src/orc\n\nRUN wget ${ORC_URL}/orc-$ORC_VERSION.tar.xz \\\n\t&& tar xf orc-${ORC_VERSION}.tar.xz \\\n\t&& cd orc-${ORC_VERSION} \\\n\t&& meson build --prefix=${PREFIX} --libdir=lib \\\n\t&& cd build \\\n\t&& ninja \\\n\t&& ninja install && rm orc-${ORC_VERSION}.tar.xz\n\nARG GSF_VERSION=1.14.48\nARG GSF_URL=http://ftp.gnome.org/pub/GNOME/sources/libgsf\n\nRUN wget ${GSF_URL}/${GSF_VERSION%.*}/libgsf-$GSF_VERSION.tar.xz \\\n\t&& tar xf libgsf-${GSF_VERSION}.tar.xz \\\n\t&& cd libgsf-${GSF_VERSION} \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PREFIX --disable-gtk-doc \\\n\t&& make \\\n\t&& make install && rm libgsf-${GSF_VERSION}.tar.xz\n\n# use cgif for GIF write\nARG CGIF_VERSION=0.2.0\nARG CGIF_URL=https://github.com/dloebl/cgif/archive/refs/tags\n\nRUN wget ${CGIF_URL}/V${CGIF_VERSION}.tar.gz \\\n\t&& tar xf V${CGIF_VERSION}.tar.gz \\\n\t&& cd cgif-${CGIF_VERSION} \\\n\t&& meson build --prefix=${PREFIX} --libdir=lib \\\n\t&& cd build \\\n\t&& ninja \\\n\t&& ninja install && rm V${CGIF_VERSION}.tar.gz\n\n# use libspng for PNG load (libvips 8.13 will support PNG save as well, but\n# for now it's only load)\nARG SPNG_VERSION=0.7.2\nARG SPNG_URL=https://github.com/randy408/libspng/archive/refs/tags\n\nRUN wget ${SPNG_URL}/v${SPNG_VERSION}.tar.gz \\\n\t&& tar xf v${SPNG_VERSION}.tar.gz \\\n\t&& cd libspng-${SPNG_VERSION} \\\n\t&& meson build --prefix=${PREFIX} --libdir=lib \\\n\t&& cd build \\\n\t&& ninja \\\n\t&& ninja install && rm v${SPNG_VERSION}.tar.gz\n\n# the version number is was correct in feb 2022 ... it just needs to be >4200\n# for libvips\nARG PDFIUM_URL=https://github.com/bblanchon/pdfium-binaries/releases/latest/download\nARG PDFIUM_VERSION=4901\n\nRUN wget $PDFIUM_URL/pdfium-linux-x64.tgz \\\n\t&& mkdir pdfium \\\n\t&& cd pdfium \\\n\t&& tar xf ../pdfium-linux-x64.tgz \\\n\t&& cp lib/* $PREFIX/lib \\\n\t&& cp -r include/* $PREFIX/include && rm ../pdfium-linux-x64.tgz\n\n# make a pdfium.pc file libvips can use\nRUN mkdir -p $PREFIX/lib/pkgconfig \\\n\t&& cd $PREFIX/lib/pkgconfig \\\n\t&& echo \"prefix=$PREFIX\" >> pdfium.pc \\\n\t&& echo \"exec_prefix=\\${prefix}\" >> pdfium.pc \\\n\t&& echo \"libdir=\\${exec_prefix}/lib\" >> pdfium.pc \\\n\t&& echo \"includedir=\\${prefix}/include\" >> pdfium.pc \\\n\t&& echo \"Name: pdfium\" >> pdfium.pc \\\n\t&& echo \"Description: pdfium\" >> pdfium.pc \\\n\t&& echo \"Version: $PDFIUM_VERSION\" >> pdfium.pc \\\n\t&& echo \"Requires: \" >> pdfium.pc \\\n\t&& echo \"Libs: -L\\${libdir} -lpdfium\" >> pdfium.pc \\\n\t&& echo \"Cflags: -I\\${includedir}\" >> pdfium.pc\n\nARG VIPS_VERSION=8.12.2\nARG VIPS_URL=https://github.com/libvips/libvips/releases/download\n\nRUN wget ${VIPS_URL}/v${VIPS_VERSION}/vips-${VIPS_VERSION}.tar.gz \\\n\t&& tar xzf vips-${VIPS_VERSION}.tar.gz \\\n\t&& cd vips-${VIPS_VERSION} \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PREFIX \\\n\t\t--disable-deprecated \\\n\t\t--without-radiance \\\n\t\t--without-analyze \\\n\t&& make V=0 \\\n\t&& make install && rm vips-${VIPS_VERSION}.tar.gz\n\n# clean and package\nRUN cd $PREFIX \\\n\t&& cp -r lib libvips-heroku20 \\\n\t&& cd libvips-heroku20 \\\n\t&& rm *.a \\\n\t&& rm *.la \\\n\t&& strip lib*.so* \\\n\t&& rm -rf pkgconfig \\\n\t&& rm -rf python* \\\n\t&& tar cfz ../libvips-heroku18.tar.gz * \\\n\t&& echo built libvips-heroku18.tar.gz \\\n \t&& ls -l $PREFIX/libvips-heroku18.tar.gz\n\n# install and test ruby-vips to confirm we can pick up the libraries\n# correctly\n# we need ruby-dev to install ruby-ffi\nENV LD_LIBRAY_PATH=$PREFIX/lib\nRUN apt-get install --no-install-recommends -y ruby-dev && rm -rf /var/lib/apt/lists/*;\nRUN gem install ruby-vips\nRUN ruby -e 'require \"vips\"; puts \"ruby-vips: libvips #{Vips::LIBRARY_VERSION}\"'\n"
}