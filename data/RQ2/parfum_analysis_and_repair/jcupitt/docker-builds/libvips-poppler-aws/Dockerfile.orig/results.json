{
  "startTime": 1674254584001,
  "endTime": 1674254585996,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 5,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 5,
        "columnEnd": 178
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 5,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 5,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 5,
        "columnEnd": 106
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 5,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 5,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 291,
        "lineEnd": 291,
        "columnStart": 5,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 328,
        "lineEnd": 328,
        "columnStart": 5,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 351,
        "lineEnd": 351,
        "columnStart": 5,
        "columnEnd": 109
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 382,
        "lineEnd": 382,
        "columnStart": 5,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 405,
        "lineEnd": 405,
        "columnStart": 5,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 431,
        "lineEnd": 431,
        "columnStart": 5,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 458,
        "lineEnd": 458,
        "columnStart": 5,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 511,
        "lineEnd": 511,
        "columnStart": 5,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 533,
        "lineEnd": 533,
        "columnStart": 5,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 5,
        "columnEnd": 178
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 5,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 328,
        "lineEnd": 328,
        "columnStart": 5,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 114,
        "lineEnd": 116,
        "columnStart": 5,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 272,
        "lineEnd": 276,
        "columnStart": 5,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 309,
        "lineEnd": 313,
        "columnStart": 5,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 334,
        "lineEnd": 335,
        "columnStart": 5,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 360,
        "lineEnd": 366,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 412,
        "lineEnd": 415,
        "columnStart": 5,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 437,
        "lineEnd": 439,
        "columnStart": 5,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 539,
        "lineEnd": 557,
        "columnStart": 5,
        "columnEnd": 19
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 22,
        "lineEnd": 27,
        "columnStart": 5,
        "columnEnd": 13
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 576,
        "lineEnd": 576,
        "columnStart": 5,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM lambci/lambda:build-go1.x AS compile-image\n\n# See here for more build examples: https://github.com/stechstudio/libvips-lambda/tree/master/build/dependencies\n# https://github.com/jeylabs/aws-lambda-poppler-layer\n# https://github.com/pjfoley/poppler-for-lambda\n\n# SHELL [\"/bin/bash\", \"-c\"]\n\nENV BUILD_DIR=\"/tmp/build\"\nENV INSTALL_DIR=\"/opt\"\n\n# Create all necessary build directories\n#\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${BUILD_DIR}/{etc,bin,doc,include,lib,lib64,libexec,sbin,share}\n\n# Install Development Tools\n#\nWORKDIR /tmp\n\nRUN set -Eeuxo pipefail \\\n  && yum -y update \\\n  && yum -y install \\\n  gcc72-c++ \\\n  # libuuid is required by Fontconfig\n  libuuid-devel \\\n  nasm \\\n  ninja-build \\\n  && yum -y clean all && rm -rf /var/cache/yum\n\nRUN pip3 install --no-cache-dir meson\n\n# Set GCC to 7.2.1-2 (default is 4.8.5-28 on lambci/lambda:build-go1.x image)\nRUN update-alternatives --set gcc /usr/bin/gcc72\n\n\n# Install CMake (http://www.linuxfromscratch.org/blfs/view/svn/general/cmake.html)\n#\n# Pre-installed on Amazon Linux: 2.8.12.2\n# Required by: Fontconfig (Poppler)\n#\nENV CMAKE3_VERSION=3.18.0\nENV CMAKE3_BUILD_DIR=${BUILD_DIR}/cmake3\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${CMAKE3_BUILD_DIR} \\\n  && curl -f -L https://github.com/Kitware/CMake/releases/download/v${CMAKE3_VERSION}/cmake-${CMAKE3_VERSION}.tar.gz \\\n  | tar xzC ${CMAKE3_BUILD_DIR} --strip-components=1 \\\n  && curl -f -L https://www.linuxfromscratch.org/patches/blfs/svn/cmake-${CMAKE3_VERSION}-regression_fix-1.patch -o ${CMAKE3_BUILD_DIR}/cmake-${CMAKE3_VERSION}-regression_fix-1.patch\n\nWORKDIR ${CMAKE3_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && patch -Np1 -i cmake-${CMAKE3_VERSION}-regression_fix-1.patch \\\n  && sed -i '/\"lib64\"/s/64//' Modules/GNUInstallDirs.cmake \\\n  && ./bootstrap \\\n  #  --prefix=/usr/local \\\n  --parallel=4 \\\n  && make V=0 \\\n  && make install\n\n\n# Configure Default Compiler Variables\n#\nENV PATH=\"${INSTALL_DIR}/bin:${PATH}\" \\\n  LD_LIBRARY_PATH=\"${INSTALL_DIR}/lib64:${INSTALL_DIR}/lib:${LD_LIBRARY_PATH}\" \\\n  PKG_CONFIG_PATH=\"${INSTALL_DIR}/lib64/pkgconfig:${INSTALL_DIR}/lib/pkgconfig\"\n\n\n# Install GLib (http://www.linuxfromscratch.org/blfs/view/svn/general/cmake.html)\n#\n# Pre-installed on Amazon Linux: 2.36.3\n# Required by: Poppler\n# Note: Amazon Linux has GLib 2.36.3 but Poppler requires >=2.41.0\n#\nENV GLIB_VERSION=2.64.4\nENV GLIB_MAJOR=2.64\nENV GLIB_BUILD_DIR=${BUILD_DIR}/glib\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${GLIB_BUILD_DIR} \\\n  && curl -f -L https://ftp.gnome.org/pub/gnome/sources/glib/${GLIB_MAJOR}/glib-${GLIB_VERSION}.tar.xz \\\n  | tar xJC ${GLIB_BUILD_DIR} --strip-components=1\n\nWORKDIR ${GLIB_BUILD_DIR}\n\nRUN set -Eeuxo pipefail \\\n  && mkdir build \\\n  && cd build \\\n  && meson \\\n  --prefix=${INSTALL_DIR} \\\n  -Dselinux=disabled \\\n  && ninja \\\n  && ninja install\n\n\n# Install Libpng (http://www.linuxfromscratch.org/blfs/view/svn/general/openjpeg2.html)\n#\n# Pre-installed on Amazon Linux: 1.2.49\n# Required by: Cairo (Poppler)\n# Recommended dependency of: Poppler, FreeType (Poppler)\n# Optional dependency of: libvips\n#\nENV LIBPNG_VERSION=1.6.37\nENV LIBPNG_BUILD_DIR=${BUILD_DIR}/libpng\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${LIBPNG_BUILD_DIR} \\\n  && curl -f -L https://downloads.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.xz \\\n  | tar xJC ${LIBPNG_BUILD_DIR} --strip-components=1\n\nWORKDIR ${LIBPNG_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=${INSTALL_DIR} \\\n  --disable-static \\\n  && make V=0 \\\n  && make install\n\n\n# Install LibTIFF (http://www.linuxfromscratch.org/blfs/view/svn/general/libtiff.html)\n#\n# Pre-installed on Amazon Linux: 4.0.3\n# Optional dependency of: libvips, Poppler\n#\n# ENV LIBTIFF_VERSION=4.1.0\n# ENV LIBTIFF_BUILD_DIR=${BUILD_DIR}/tiff\n\n# RUN set -Eeuxo pipefail \\\n#   && mkdir -p ${LIBTIFF_BUILD_DIR} \\\n#   && curl -L http://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz \\\n#   | tar xzC ${LIBTIFF_BUILD_DIR} --strip-components=1\n\n# WORKDIR ${LIBTIFF_BUILD_DIR}/\n\n# RUN set -Eeuxo pipefail \\\n#   && mkdir -p libtiff-build \\\n#   && cd libtiff-build \\\n#   && cmake .. \\\n#   -DCMAKE_INSTALL_DOCDIR=/usr/share/doc/libtiff-4.1.0 \\\n#   -DCMAKE_INSTALL_PREFIX=/usr -G Ninja \\\n#   && ninja \\\n#   && ninja install\n\n\n# Install Libjpeg-Turbo (http://www.linuxfromscratch.org/blfs/view/svn/general/libjpeg.html)\n#\n# Pre-installed on Amazon Linux: no\n# Recommended dependency of: Poppler\n# Optional dependency of: libvips\n#\nENV LIBJPEG_TURBO_VERSION=2.0.5\nENV LIBJPEG_TURBO_BUILD_DIR=${BUILD_DIR}/libjpeg\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${LIBJPEG_TURBO_BUILD_DIR}/build \\\n  && curl -f -L https://downloads.sourceforge.net/libjpeg-turbo/libjpeg-turbo-${LIBJPEG_TURBO_VERSION}.tar.gz \\\n  | tar xzC ${LIBJPEG_TURBO_BUILD_DIR} --strip-components=1\n\nWORKDIR ${LIBJPEG_TURBO_BUILD_DIR}/build/\n\nRUN set -Eeuxo pipefail \\\n  && cmake .. \\\n  -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \\\n  -DCMAKE_BUILD_TYPE=RELEASE \\\n  -DENABLE_STATIC=FALSE \\\n  -DCMAKE_INSTALL_DEFAULT_LIBDIR=lib \\\n  && make V=0 \\\n  && make install\n\n\n# Install libexif (http://www.linuxfromscratch.org/blfs/view/svn/general/libexif.html)\n#\n# Pre-installed on Amazon Linux: 0.6.21\n# Optional dependency of: libvips\n#\n# ENV LIBEXIF_VERSION=0.6.22\n# ENV LIBEXIF_VERSION_URL=0_6_22\n# ENV LIBEXIF_BUILD_DIR=${BUILD_DIR}/libexif\n\n# RUN set -Eeuxo pipefail \\\n#   && mkdir -p ${LIBEXIF_BUILD_DIR} \\\n#   && curl -L https://github.com/libexif/libexif/releases/download/libexif-${LIBEXIF_VERSION_URL}-release/libexif-${LIBEXIF_VERSION}.tar.xz \\\n#   | tar xJC ${LIBEXIF_BUILD_DIR} --strip-components=1\n\n# WORKDIR ${LIBEXIF_BUILD_DIR}\n\n# RUN set -Eeuxo pipefail \\\n#   && ./configure  \\\n#   --prefix=${INSTALL_DIR} \\\n#   --disable-docs \\\n#   --disable-static \\\n#   && make V=0 \\\n#   && make install\n\n\n# Install OpenJPEG (http://www.linuxfromscratch.org/blfs/view/svn/general/openjpeg2.html)\n#\n# Pre-installed on Amazon Linux: no\n# Recommended dependency of: Poppler\n#\nENV OPENJPEG_VERSION=2.3.1\nENV OPENJPEG_BUILD_DIR=${BUILD_DIR}/openjpeg2\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${OPENJPEG_BUILD_DIR}/build \\\n  && curl -f -L https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}/openjpeg-${OPENJPEG_VERSION}.tar.gz \\\n  | tar xzC ${OPENJPEG_BUILD_DIR} --strip-components=1\n\nWORKDIR ${OPENJPEG_BUILD_DIR}/build/\n\nRUN set -Eeuxo pipefail \\\n  && cmake .. \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \\\n  -DBUILD_STATIC_LIBS=OFF \\\n  && make V=0 \\\n  && make install\n\n\n# Build libxml2 (http://www.linuxfromscratch.org/blfs/view/svn/general/libxml2.html)\n#\n# Pre-installed on Amazon Linux: 2.9.1\n# Optional dependency of: Fontconfig (Poppler)\n#\n# ENV XML2_VERSION=2.9.10\n# ENV XML2_BUILD_DIR=${BUILD_DIR}/libxml2\n\n#RUN set -Eeuxo pipefail; \\\n#  mkdir -p ${XML2_BUILD_DIR} \\\n#  && curl -L http://xmlsoft.org/sources/libxml2-${XML2_VERSION}.tar.gz \\\n#  | tar xzC ${XML2_BUILD_DIR} --strip-components=1\n\n# WORKDIR ${XML2_BUILD_DIR}/\n\n# RUN set -Eeuxo pipefail \\\n#   && ./configure \\\n#   --prefix=${INSTALL_DIR} \\\n#   --with-sysroot=${INSTALL_DIR} \\\n#   --disable-static \\\n#   --with-history \\\n#   --with-icu \\\n#   --without-python\n\n# RUN set -Eeuxo pipefail \\\n#   && make install \\\n#   && cp xml2-config ${INSTALL_DIR}/bin/xml2-config\n\n\n# Install FreeType (http://www.linuxfromscratch.org/blfs/view/svn/general/freetype2.html)\n#\n# Pre-installed on Amazon Linux: 2.3.11\n# Required by: Fontconfig (Poppler)\n#\nENV FREETYPE_VERSION=2.10.2\nENV FREETYPE_BUILD_DIR=${BUILD_DIR}/freetype\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${FREETYPE_BUILD_DIR} \\\n  && curl -f -L https://download-mirror.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.xz \\\n  | tar xJC ${FREETYPE_BUILD_DIR} --strip-components=1\n\nWORKDIR ${FREETYPE_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && sed -ri \"s:.*(AUX_MODULES.*valid):\\1:\" modules.cfg\n\nRUN set -Eeuxo pipefail \\\n  && sed -r \"s:.*(#.*SUBPIXEL_RENDERING) .*:\\1:\" -i include/freetype/config/ftoption.h\n\nRUN set -Eeuxo pipefail \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=${INSTALL_DIR} \\\n  --with-sysroot=${INSTALL_DIR} \\\n  --enable-freetype-config \\\n  --disable-static \\\n  && make V=0 \\\n  && make install\n\n\n# Install Harfbuzz (http://www.linuxfromscratch.org/blfs/view/svn/general/harfbuzz.html)\n#\n# Pre-installed on Amazon Linux: no\n# Recommended dependency of: FreeType\n#\nENV HARZBUFF_VERSION=2.7.0\nENV HARZBUFF_BUILD_DIR=${BUILD_DIR}/harfbuzz\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${HARZBUFF_BUILD_DIR} \\\n  && curl -f -L https://github.com/harfbuzz/harfbuzz/archive/${HARZBUFF_VERSION}.tar.gz \\\n  | tar xzC ${HARZBUFF_BUILD_DIR} --strip-components=1\n\nWORKDIR ${HARZBUFF_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && mkdir build \\\n  && cd build \\\n  && meson \\\n  --prefix=${INSTALL_DIR} \\\n  && ninja \\\n  && ninja install\n\n# Now re-install FreeType\n\nWORKDIR ${FREETYPE_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=${INSTALL_DIR} \\\n  --with-sysroot=${INSTALL_DIR} \\\n  --enable-freetype-config \\\n  --disable-static \\\n  && make V=0 \\\n  && make install\n\n\n# Install Gperf (http://www.linuxfromscratch.org/blfs/view/7.4/general/gperf.html)\n#\n# Pre-installed on Amazon Linux: no\n# Required by: Fontconfig\n#\nENV GPERF_VERSION=3.1\nENV GPERF_BUILD_DIR=${BUILD_DIR}/gperf\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${GPERF_BUILD_DIR} \\\n  && curl -f -L https://ftp.gnu.org/pub/gnu/gperf/gperf-${GPERF_VERSION}.tar.gz \\\n  | tar xzC ${GPERF_BUILD_DIR} --strip-components=1\n\nWORKDIR  ${GPERF_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=${INSTALL_DIR} \\\n  && make V=0 \\\n  && make install\n\n\n# Install Fontconfig (http://www.linuxfromscratch.org/blfs/view/svn/general/fontconfig.html)\n#\n# Pre-installed on Amazon Linux: 2.8.0\n# Required by: Poppler\n# Requires: freetype and either expat or libxml2 (http://bio.gsi.de/DOCS/SOFTWARE/fontconfig.html) - not sure if that's still the case\n#\nENV FONTCONFIG_VERSION=2.13.1\nENV FONTCONFIG_BUILD_DIR=${BUILD_DIR}/fontconfig\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${FONTCONFIG_BUILD_DIR} \\\n  && curl -f -L https://www.freedesktop.org/software/fontconfig/release/fontconfig-${FONTCONFIG_VERSION}.tar.bz2 \\\n  | tar xjC ${FONTCONFIG_BUILD_DIR} --strip-components=1\n\nWORKDIR ${FONTCONFIG_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && rm -f src/fcobjshash.h\n\nRUN set -Eeuxo pipefail \\\n  && LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n  FONTCONFIG_PATH=${INSTALL_DIR} \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n  --sysconfdir=${INSTALL_DIR}/etc \\\n  --localstatedir=${INSTALL_DIR}/var \\\n  --prefix=${INSTALL_DIR} \\\n  --disable-docs \\\n  # --enable-libxml2 \\\n  && make V=0 \\\n  && make install\n\n\n# Install Pixman (http://www.linuxfromscratch.org/blfs/view/svn/general/pixman.html)\n#\n# Pre-installed on Amazon Linux: 0.32.4\n# Required by: Cairo (Poppler)\n#\nENV PIXMAN_VERSION=0.40.0\nENV PIXMAN_BUILD_DIR=${BUILD_DIR}/pixman\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${PIXMAN_BUILD_DIR} \\\n  && curl -f -L https://www.cairographics.org/releases/pixman-${PIXMAN_VERSION}.tar.gz \\\n  | tar xzC ${PIXMAN_BUILD_DIR} --strip-components=1\n\nWORKDIR ${PIXMAN_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && mkdir build \\\n  && cd build \\\n  && meson --prefix=${INSTALL_DIR} \\\n  && ninja \\\n  && ninja install\n\n\n# Install Cairo (http://www.linuxfromscratch.org/blfs/view/svn/x/cairo.html)\n#\n# Pre-installed on Amazon Linux: 1.12.14\n# Recommend eddependency of: Poppler\n#\nENV CAIRO_VERSION=1.17.2\nENV CAIRO_BUILD_DIR=${BUILD_DIR}/cairo\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${CAIRO_BUILD_DIR} \\\n  && curl -f -L https://cairographics.org/snapshots/cairo-${CAIRO_VERSION}.tar.xz \\\n  | tar xJC ${CAIRO_BUILD_DIR} --strip-components=1\n\nWORKDIR ${CAIRO_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && autoreconf -fiv \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=${INSTALL_DIR} \\\n  --disable-static \\\n  --enable-tee \\\n  && make \\\n  && make install\n\n\n# Install Little CMS (http://www.linuxfromscratch.org/blfs/view/svn/general/lcms2.html)\n#\n# Pre-installed on Amazon Linux: 2.6\n# Recommended dependency of: Poppler\n# Optional dependency of: libvips\n#\nENV LCMS2_VERSION=2.11\nENV LCMS2_BUILD_DIR=${BUILD_DIR}/lcms\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${LCMS2_BUILD_DIR} \\\n  && curl -f -L https://downloads.sourceforge.net/lcms/lcms2-${LCMS2_VERSION}.tar.gz \\\n  | tar xzC ${LCMS2_BUILD_DIR} --strip-components=1\n\nWORKDIR ${LCMS2_BUILD_DIR}/\n\nRUN set -Eeuxo pipefail \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=${INSTALL_DIR} \\\n  --disable-static \\\n  && make V=0 \\\n  && make install\n\n\n# Install Poppler (http://www.linuxfromscratch.org/blfs/view/svn/general/poppler.html)\n#\n# Pre-installed on Amazon Linux: no\n#\nENV POPPLER_VERSION=0.89.0\nENV POPPLER_BUILD_DIR=${BUILD_DIR}/poppler\n# ENV POPPLER_TEST_DIR=${BUILD_DIR}/poppler-test\n\n# RUN set -Eeuxo pipefail \\\n#   && mkdir -p ${POPPLER_TEST_DIR} \\\n#   && git clone git://git.freedesktop.org/git/poppler/test ${POPPLER_TEST_DIR}\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${POPPLER_BUILD_DIR}/build \\\n  && curl -f -L https://poppler.freedesktop.org/poppler-${POPPLER_VERSION}.tar.xz \\\n  | tar xJC ${POPPLER_BUILD_DIR} --strip-components=1\n\nWORKDIR ${POPPLER_BUILD_DIR}/build/\n\nRUN set -Eeuxo pipefail \\\n  && CFLAGS=\"\" \\\n  CPPFLAGS=\"-I${INSTALL_DIR}/include -I/usr/include\" \\\n  LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n  cmake .. \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \\\n  # -DTESTDATADIR=${POPPLER_TEST_DIR} \\\n  -DENABLE_UNSTABLE_API_ABI_HEADERS=ON \\\n  -DENABLE_CPP=OFF \\\n  -DENABLE_QT5=OFF \\\n  -DENABLE_GLIB=ON \\\n  -DENABLE_SPLASH=OFF \\\n  && make V=0 \\\n  && make install\n\n\n# Install libimagequant\n#\n# Pre-installed on Amazon Linux: no\n# Optional dependency of: libvips\n#\n# ENV LIBIMAGEQUANT_VERSION=2.12.6\n# ENV LIBIMAGEQUANT_BUILD_DIR=${BUILD_DIR}/libimagequant\n\n# RUN set -Eeuxo pipefail \\\n#   && mkdir -p ${LIBIMAGEQUANT_BUILD_DIR} \\\n#   && git clone https://github.com/ImageOptim/libimagequant.git ${LIBIMAGEQUANT_BUILD_DIR}\n\n# WORKDIR ${LIBIMAGEQUANT_BUILD_DIR}\n\n# RUN set -Eeuxo pipefail \\\n#   && ./configure \\\n#   --prefix=${INSTALL_DIR} && \\\n#   make V=0 libimagequant.so && \\\n#   make install\n\n\n# Install orc (https://gitlab.freedesktop.org/gstreamer/orc/-/blob/master/.gitlab-ci.yml#L15)\n#\n# Pre-installed on Amazon Linux: no\n# Optional dependency of: libvips\n#\nENV ORC_VERSION=0.4.31\nENV ORC_BUILD_DIR=${BUILD_DIR}/orc\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${ORC_BUILD_DIR} \\\n  && curl -f -L https://gstreamer.freedesktop.org/src/orc/orc-${ORC_VERSION}.tar.xz \\\n  | tar xJC ${ORC_BUILD_DIR} --strip-components=1\n\nWORKDIR ${ORC_BUILD_DIR}\n\nRUN set -Eeuxo pipefail \\\n  && mkdir build \\\n  && cd build \\\n  && meson --prefix=${INSTALL_DIR} --werror \\\n  && ninja \\\n  && ninja install\n\n\n# Install libvips (https://libvips.github.io/libvips/install.html)\n#\n# Pre-installed on Amazon Linux: no\n#\nENV LIBVIPS_VERSION=8.9.2\nENV LIBVIPS_BUILD_DIR=${BUILD_DIR}/libvips\n\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${LIBVIPS_BUILD_DIR} \\\n  && curl -f -L https://github.com/libvips/libvips/releases/download/v${LIBVIPS_VERSION}/vips-${LIBVIPS_VERSION}.tar.gz \\\n  | tar xzC ${LIBVIPS_BUILD_DIR} --strip-components=1\n\nWORKDIR ${LIBVIPS_BUILD_DIR}\n\nRUN set -Eeuxo pipefail \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${INSTALL_DIR} \\\n  --without-gsf \\\n  --without-fftw \\\n  --without-magick \\\n  --without-OpenEXR \\\n  --without-nifti \\\n  --without-heif \\\n  --without-pdfium \\\n  --without-rsvg \\\n  --without-openslide \\\n  --without-matio \\\n  --without-cfitsio \\\n  --without-libwebp \\\n  --without-pangoft2 \\\n  --without-tiff \\\n  --without-giflib \\\n  --without-imagequant \\\n  --without-libexif \\\n  --disable-gtk-doc \\\n  && make V=0 \\\n  && make install \\\n  && echo /opt/lib > /etc/ld.so.conf.d/libvips.conf \\\n  && ldconfig\n\n\nFROM lambci/lambda:build-go1.x AS runtime-image\n\nENV SOURCE_DIR=\"/opt\"\nENV INSTALL_DIR=\"/opt\"\n\nENV PATH=\"/opt/bin:${PATH}\" \\\n  LD_LIBRARY_PATH=\"${INSTALL_DIR}/lib64:${INSTALL_DIR}/lib\"\n\n# Install zip\n#\nRUN set -Eeuxo pipefail \\\n  && yum update -y \\\n  && yum -y install zip \\\n  && yum -y clean all && rm -rf /var/cache/yum\n\n# Copy all binaries/libaries\n#\nRUN set -Eeuxo pipefail \\\n  && mkdir -p ${INSTALL_DIR}/{etc,bin,var,share,lib}\n\nCOPY --from=compile-image /lib64/libuuid.so.* ${INSTALL_DIR}/lib/\nCOPY --from=compile-image ${SOURCE_DIR}/share/ /tmp/share\nCOPY --from=compile-image ${SOURCE_DIR}/etc/ ${INSTALL_DIR}/etc/\nCOPY --from=compile-image ${SOURCE_DIR}/bin/ ${INSTALL_DIR}/bin/\nCOPY --from=compile-image ${SOURCE_DIR}/var/ ${INSTALL_DIR}/var/\nCOPY --from=compile-image ${SOURCE_DIR}/lib/ ${INSTALL_DIR}/lib/\n# COPY --from=compile-image ${SOURCE_DIR}/lib64/ ${INSTALL_DIR}/lib/\n\nRUN set -Eeuxo pipefail \\\n  && cp -R /tmp/share/fontconfig ${INSTALL_DIR}/share/fontconfig\n"
}