{
  "startTime": 1674254462132,
  "endTime": 1674254462983,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 33,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedDockerfile": "FROM python:3.10-slim as base\n\n# these commands are organized to minimize docker build cache invalidation\n# (barring any other logical constraints)\n\n# use bash\nSHELL [\"/bin/bash\", \"-c\"]\n\n# install any security updates\nRUN apt-get update && apt-get -y upgrade\n\n# install system dependencies\nRUN apt-get install --no-install-recommends -y gfortran && rm -rf /var/lib/apt/lists/*;\n\n# upgrade pip and install poetry\nRUN pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir poetry\n\nWORKDIR /src\n\n# copy bare minimum needed to install python dependecies with poetry\nCOPY ./README.md ./pyproject.toml ./poetry.lock ./\n\n# install locked python dependecies using poetry to generate a requirements.txt\n\n# NOTE: pySLALIB's setup.py is messed up as it requires numpy to already be\n# installed to install it. https://github.com/scottransom/pyslalib/blob/fcb0650a140a8002cc6c0e8918c3e4c6fe3f8e01/setup.py#L3\n# So please excuse the ugly hack.\n\nRUN pip install -r <(poetry export | grep \"numpy\") && \\\n  pip install -r <(poetry export)\n\n# copy everything else\nCOPY ./ ./\n\n# install our app\nRUN pip install --no-cache-dir .\n\n# collect all static assets into one place: /static\nRUN mkdir -p static && python manage.py collectstatic --noinput\n\nENV PYTHONUNBUFFERED=1 PYTHONFAULTHANDLER=1\n\n\n# add a multi-stage build target which also has dev (test) dependencies\n# usefull for running tests in docker container\n# this won't be included in the final image\n# e.g. docker build --target dev .\nFROM base as dev\n\nRUN pip install -r <(poetry export --dev)\n\nENTRYPOINT [\"bash\"]\n\n\n# final image\nFROM base as prod\n\n# add a non-root user to run the app\nRUN useradd appuser\n\n# switch to non-root user\nUSER appuser\n\nCMD [\"gunicorn\", \"observation_portal.wsgi\", \"--bind=0.0.0.0:8080\", \"--worker-class=gevent\", \"--workers=4\", \"--timeout=300\"]\n\nEXPOSE 8080/tcp\n"
}