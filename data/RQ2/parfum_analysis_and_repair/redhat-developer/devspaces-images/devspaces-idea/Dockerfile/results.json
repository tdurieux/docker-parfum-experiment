{
  "startTime": 1674252742297,
  "endTime": 1674252743433,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 38,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2021 Red Hat, Inc.\n# This program and the accompanying materials are made\n# available under the terms of the Eclipse Public License 2.0\n# which is available at https://www.eclipse.org/legal/epl-2.0/\n#\n# SPDX-License-Identifier: EPL-2.0\n#\n\n#\n# Copyright 2019-2020 JetBrains s.r.o.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# To build the cuurent Dockerfile there is the following flow:\n#   $ ./projector.sh build [OPTIONS]\n\n# Stage 1. Prepare JetBrains IDE with Projector.\n#   Requires the following assets:\n#       * asset-ide-packaging.tar.gz - IDE packaging downloaded previously;\n#       * asset-projector-server-assembly.zip - Projector Server assembly;\n#       * asset-static-assembly.tar.gz - archived `static/` directory.\n# https://access.redhat.com/containers/?tab=tags#/registry.access.redhat.com/ubi8\nFROM ubi8:8.6-855 as ubi-builder\nCOPY --chown=0:0 asset-required-rpms.txt /tmp/asset-required-rpms.txt\n\nRUN mkdir -p /mnt/rootfs\nRUN yum install unzip -y --nodocs && \\\n    yum install --installroot /mnt/rootfs \\\n        brotli libstdc++ coreutils glibc-minimal-langpack \\\n        jq shadow-utils wget git nss procps findutils which socat \\\n        java-11-openjdk-devel \\\n        libXext libXrender libXtst libXi \\\n        $(cat /tmp/asset-required-rpms.txt) \\\n            --releasever 8 --setopt install_weak_deps=false --nodocs -y && \\\n    yum --installroot /mnt/rootfs clean all && rm -rf /var/cache/yum\nRUN rm -rf /mnt/rootfs/var/cache/* /mnt/rootfs/var/log/dnf* /mnt/rootfs/var/log/yum.*\n\nRUN mkdir -p /mnt/rootfs/projects && mkdir -p /mnt/rootfs/home/projector && mkdir -p /mnt/rootfs/projector && \\\n    cat /mnt/rootfs/etc/passwd | sed s#root:x.*#root:x:\\${USER_ID}:\\${GROUP_ID}::\\${HOME}:/bin/bash#g > /mnt/rootfs/home/projector/.passwd.template  && \\\n    cat /mnt/rootfs/etc/group | sed s#root:x:0:#root:x:0:0,\\${USER_ID}:#g > /mnt/rootfs/home/projector/.group.template\n\nWORKDIR /mnt/rootfs/projector\n\nCOPY --chown=0:0 asset-ide-packaging.tar.gz .\nRUN tar -xf asset-ide-packaging.tar.gz && rm asset-ide-packaging.tar.gz && \\\n    find . -maxdepth 1 -type d -name * -exec mv {} ide \\;\n\nCOPY --chown=0:0 asset-projector-server-assembly.zip .\nRUN unzip asset-projector-server-assembly.zip && rm asset-projector-server-assembly.zip && \\\n    find . -maxdepth 1 -type d -name projector-server-* -exec mv {} ide/projector-server \\;\n\nCOPY --chown=0:0 asset-static-assembly.tar.gz .\nRUN tar -xf asset-static-assembly.tar.gz && rm asset-static-assembly.tar.gz && \\\n    chown -R 0:0 static && \\\n    mv static/* . && rm -rf static && \\\n    chmod +x *.sh && \\\n    mv ide-projector-launcher.sh ide/bin\n\nCOPY --chown=0:0 asset-che-plugin-assembly.zip .\nRUN unzip asset-che-plugin-assembly.zip && rm asset-che-plugin-assembly.zip && \\\n    find . -maxdepth 1 -type d -name che-plugin -exec mv {} ide/plugins/che-plugin \\;\n\nCOPY --chown=0:0 asset-machine-exec ide/bin/machine-exec\n\nRUN for f in \"/mnt/rootfs/bin/\" \"/mnt/rootfs/home/projector\" \"/mnt/rootfs/etc/passwd\" \"/mnt/rootfs/etc/group\" \"/mnt/rootfs/projects\" \"/mnt/rootfs/projector/ide/bin\" ; do\\\n           chgrp -R 0 ${f} && \\\n           chmod -R g+rwX ${f}; \\\n    done\n\nRUN rm /mnt/rootfs/etc/hosts\n\n# Stage 2. Copy from build environment Projector assembly to the runtime. Projector runs in headless mode.\n# https://access.redhat.com/containers/?tab=tags#/registry.access.redhat.com/ubi8-minimal\nFROM ubi8-minimal:8.6-854\nENV HOME=/home/projector\nENV PROJECTOR_ASSEMBLY_DIR /projector\nENV PROJECTOR_CONFIG_DIR $HOME/.jetbrains\nCOPY --from=ubi-builder /mnt/rootfs/ /\nUSER 1001\nEXPOSE 8887\nENTRYPOINT $PROJECTOR_ASSEMBLY_DIR/entrypoint.sh\n\nENV SUMMARY=\"Red Hat OpenShift Dev Spaces - IntelliJ IDEA Community IDE container\" \\\n    DESCRIPTION=\"Red Hat OpenShift Dev Spaces - IntelliJ IDEA Community IDE container\" \\\n    PRODNAME=\"devspaces\" \\\n    COMPNAME=\"idea-rhel8\"\n\nLABEL summary=\"$SUMMARY\" \\\n      description=\"$DESCRIPTION\" \\\n      io.k8s.description=\"$DESCRIPTION\" \\\n      io.k8s.display-name=\"$DESCRIPTION\" \\\n      io.openshift.tags=\"$PRODNAME,$COMPNAME\" \\\n      com.redhat.component=\"$PRODNAME-$COMPNAME-container\" \\\n      name=\"$PRODNAME/$COMPNAME\" \\\n      version=\"3.2\" \\\n      license=\"EPLv2\" \\\n      maintainer=\"Vladyslav Zhukovskyi <vzhukovs@redhat.com>\" \\\n      io.openshift.expose-services=\"\" \\\n      usage=\"\"\n"
}