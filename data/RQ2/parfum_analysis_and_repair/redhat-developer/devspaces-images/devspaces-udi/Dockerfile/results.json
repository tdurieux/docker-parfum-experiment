{
  "startTime": 1674255238777,
  "endTime": 1674255240861,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 31,
        "columnEnd": 103
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 4,
        "columnEnd": 95
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2022 Red Hat, Inc.\n# This program and the accompanying materials are made\n# available under the terms of the Eclipse Public License 2.0\n# which is available at https://www.eclipse.org/legal/epl-2.0/\n#\n# SPDX-License-Identifier: EPL-2.0\n#\n# Contributors:\n#   Red Hat, Inc. - initial API and implementation\n\n# https://access.redhat.com/containers/?tab=tags#/registry.access.redhat.com/ubi8-minimal\nFROM ubi8-minimal:8.6-854\n\nUSER root\n\nENV \\\n    HOME=/home/user \\\n    KAMEL_VERSION=\"\" \\\n    ODO_VERSION=\"v2.5.0\" \\\n    NODEJS_VERSION=\"16\" \\\n    GRADLE_VERSION=\"6.1\" \\\n    MAVEN_VERSION=\"3.6.3\" \\\n    LOMBOK_VERSION=\"1.18.22\" \\\n    PYTHON_VERSION=\"3.8\" \\\n    PHP_VERSION=\"7.3\" \\\n    E2FSPROGS_VERSION=\"1.46.5\" \\\n    LD_LIBRARY_PATH=\"/usr/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\" \\\n    CPATH=\"/usr/include${CPATH:+:${CPATH}}\" \\\n    DOTNET_RPM_VERSION=3.1 \\\n    DOTNET_CLI_TELEMETRY_OPTOUT=1 \\\n    JAVA11_HOME=/usr/lib/jvm/java-11-openjdk \\\n    JAVA8_HOME=/usr/lib/jvm/java-1.8.0-openjdk \\\n    JAVA_HOME=\"/home/user/.java/current\" \\\n    PATH=\"/home/user/.java/current/bin:/home/user/node_modules/.bin/:/home/user/.npm-global/bin/:/opt/app-root/src/.npm-global/bin/:/opt/apache-maven/bin:/opt/gradle/bin:/usr/bin:${PATH:-/bin:/usr/bin}\" \\\n    MANPATH=\"/usr/share/man:${MANPATH}\" \\\n    JAVACONFDIRS=\"/etc/java${JAVACONFDIRS:+:}${JAVACONFDIRS:-}\" \\\n    XDG_CONFIG_DIRS=\"/etc/xdg:${XDG_CONFIG_DIRS:-/etc/xdg}\" \\\n    XDG_DATA_DIRS=\"/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}\" \\\n    M2_HOME=\"/opt/apache-maven\" \\\n    PKG_CONFIG_PATH=\"/usr/lib64/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}\" \\\n    GOPATH=/projects/.che/gopath\n\nADD etc/storage.conf $HOME/.config/containers/storage.conf\n\nRUN mkdir -p /home/user /projects\n\nCOPY . /tmp/assets/\nCOPY etc/docker.sh /usr/local/bin/docker\nCOPY lombok-${LOMBOK_VERSION}.jar /lombok.jar\nCOPY gradle-${GRADLE_VERSION}-bin.zip apache-maven-${MAVEN_VERSION}-bin.tar.gz e2fsprogs-${E2FSPROGS_VERSION}.tar.gz /tmp/\n\n# NOTE: uncomment for local build. Must also set full registry path in FROM to registry.redhat.io or registry.access.redhat.com\n# enable rhel 8 content sets (from Brew) to resolve buildah\n# COPY content_set*.repo /etc/yum.repos.d/\n\n    ########################################################################\n    # Common Installations and Configuration\n    ########################################################################\nRUN \\\n    microdnf install -y dnf bash tar gzip unzip bzip2 which shadow-utils findutils wget curl sudo git procps-ng podman skopeo \\\n    # For OpenShift Client 4 (oc): rhocp-4.9-for-rhel-8-x86_64-rpms\n    # must hard code a version because otherwise CVP/Brew fails with: Failed component comparison for components: openshift-clients\n    # http://rhsm-pulp.corp.redhat.com/content/dist/layered/rhel8/x86_64/ocp/tools/4.8/os/Packages/h/helm-3.6.2-5.el8.x86_64.rpm\n    # http://rhsm-pulp.corp.redhat.com/content/dist/layered/rhel8/s390x/ocp/tools/4.8/os/Packages/h/helm-3.6.2-5.el8.s390x.rpm\n    # http://rhsm-pulp.corp.redhat.com/content/dist/layered/rhel8/ppc64le/ocp/tools/4.8/os/Packages/h/helm-3.6.2-5.el8.ppc64le.rpm\n    # http://rhsm-pulp.corp.redhat.com/content/dist/layered/rhel8/x86_64/rhocp/4.9/os/Packages/o/openshift-clients-4.9.0-202206240935.p0.g728b452.assembly.stream.el8.x86_64.rpm\n    # http://rhsm-pulp.corp.redhat.com/content/dist/layered/rhel8/s390x/rhocp/4.9/os/Packages/o/openshift-clients-4.9.0-202206240935.p0.g728b452.assembly.stream.el8.s390x.rpm\n    # http://rhsm-pulp.corp.redhat.com/content/dist/layered/rhel8/ppc64le/rhocp/4.9/os/Packages/o/openshift-clients-4.9.0-202206240935.p0.g728b452.assembly.stream.el8.ppc64le.rpm\n    buildah helm-3.6.2-5.el8 openshift-clients-4.9.0-202206240935.p0.g728b452.assembly.stream.el8 && \\\n    mkdir -p /opt && \\\n    # Change permissions to let any arbitrary user\n    for f in \"${HOME}\" \"/etc/passwd\" \"/etc/group\" \"/projects\"; do \\\n        echo \"Changing permissions on ${f}\" && chgrp -R 0 ${f} && \\\n        chmod -R g+rwX ${f}; \\\n    done && \\\n    # add user and configure it\n    useradd -u 1000 -G wheel,root -d /home/user --shell /bin/bash -m user && \\\n    # Generate passwd.template\n    cat /etc/passwd | \\\n    sed s#user:x.*#user:x:\\${USER_ID}:\\${GROUP_ID}::\\${HOME}:/bin/bash#g \\\n    > ${HOME}/passwd.template && \\\n    cat /etc/group | \\\n    sed s#root:x:0:#root:x:0:0,\\${USER_ID}:#g \\\n    > ${HOME}/group.template\nRUN \\\n\n\n\n    dnf -y -q install java-1.8.0-openjdk java-1.8.0-openjdk-devel java-1.8.0-openjdk-headless \\\n    java-11-openjdk java-11-openjdk-devel java-11-openjdk-src java-11-openjdk-headless && \\\n    mkdir -p ${HOME}/.java/current && \\\n    rm -f /usr/bin/java && \\\n    ln -s /usr/lib/jvm/java-11-openjdk/* ${HOME}/.java/current && \\\n    ########################################################################\n    # nodejs\n    ########################################################################\n    # BEGIN copy from https://catalog.redhat.com/software/containers/ubi8/nodejs-16/615aee9fc739c0a4123a87e1?container-tabs=dockerfile\n    dnf -y -q module enable nodejs:$NODEJS_VERSION && \\\n    MODULE_DEPS=\"make gcc gcc-c++ libatomic_ops git openssl-devel\" && \\\n    INSTALL_PKGS=\"$MODULE_DEPS nodejs npm nodejs-nodemon nss_wrapper\" && \\\n    ln -s /usr/lib/node_modules/nodemon/bin/nodemon.js /usr/bin/nodemon && \\\n    ln -s /usr/libexec/platform-python /usr/bin/python3 && \\\n    dnf -y -q install --setopt=tsflags=nodocs $INSTALL_PKGS && \\\n    rpm -V $INSTALL_PKGS && \\\n    # END copy from https://catalog.redhat.com/software/containers/ubi8/nodejs-16/615aee9fc739c0a4123a87e1?container-tabs=dockerfile\n    ########################################################################\n    # Gradle\n    ########################################################################\n    # unpack gradle into /opt/gradle/, and maven into /opt/apache-maven/\n    mkdir -p /opt; unzip -d /opt /tmp/gradle-${GRADLE_VERSION}-bin.zip && \\\n    mv /opt/gradle-${GRADLE_VERSION} /opt/gradle && rm -f /tmp/gradle-${GRADLE_VERSION}-bin.zip && \\\n    ########################################################################\n    # Maven\n    ########################################################################\n    tar xzf /tmp/assets/apache-maven-${MAVEN_VERSION}-bin.tar.gz -C /opt && \\\n    mv /opt/apache-maven-${MAVEN_VERSION} /opt/apache-maven && \\\n    rm -f /tmp/assets/apache-maven-${MAVEN_VERSION}-bin.tar.gz && \\\n    # fix permissions in bin/* files\n    for d in $(find /opt/apache-maven -name bin -type d); do echo $d; chmod +x $d/*; done && \\\n    # additional node stuff\n    mkdir -p /opt/app-root/src/.npm-global/bin && \\\n    ln -s /usr/bin/node /usr/bin/nodejs && \\\n    for f in \"/opt/app-root/src/.npm-global\"; do chgrp -R 0 ${f}; chmod -R g+rwX ${f}; done && \\\n    ########################################################################\n    # Python\n    ########################################################################\n    # BEGIN update to python 3.8 per https://catalog.redhat.com/software/containers/ubi8/python-38/5dde9cacbed8bd164a0af24a?container-tabs=dockerfile\n    dnf -y -q module reset python38 && \\\n    dnf -y -q module enable python38:${PYTHON_VERSION} && \\\n    dnf -y -q install python38 python38-devel python38-setuptools python38-pip && \\\n    # END update to python 3.8 per https://catalog.redhat.com/software/containers/ubi8/python-38/5dde9cacbed8bd164a0af24a?container-tabs=dockerfile\n    # python lang server\n    mkdir -p /tmp/py-unpack && tar -xf /tmp/assets/asset-python-ls-$(uname -m).tar.gz -C /tmp/py-unpack && \\\n    for f in /tmp/py-unpack; do chgrp -R 0 ${f}; chmod -R g+rwX ${f}; done; rm /tmp/assets/asset-python-ls-$( uname -m).tar.gz \\\n    for d in bin lib lib64; do cp -R /tmp/py-unpack/${d}/* /usr/${d}; done; \\\n    cp -R /tmp/py-unpack/.venv ${HOME} && chgrp -R 0 ${HOME}/.venv && chmod -R g+rwX ${HOME}/.venv && \\\n    rm -fr /tmp/py-unpack\nRUN \\\n    # python/pip/pylint symlinks\n    echo \"Create python symlinks (or display existing ones) ==>\" && \\\n    echo -e \"#/usr/bin/bash\\n/usr/bin/python${PYTHON_VERSION} -m pylint \\$*\" | sed -r -e \"s@#@#\\!@\" > /usr/bin/pylint && \\\n    echo -e \"#/usr/bin/bash\\n/usr/bin/python${PYTHON_VERSION} -m pylint \\$*\" | sed -r -e \"s@#@#\\!@\" > /usr/bin/pylint${PYTHON_VERSION} && \\\n    chmod +x /usr/bin/pylint* && \\\n    SL=/usr/local/bin/python; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/python${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \\\n    SL=/usr/local/bin/pip; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/pip${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \\\n    SL=/usr/local/bin/pylint; if [[ ! -f ${SL} ]] && [[ ! -L ${SL} ]]; then ln -s /usr/bin/pylint${PYTHON_VERSION} ${SL}; else ls -la ${SL}; fi && \\\n    echo \"<== Create python symlinks (or display existing ones)\"\nRUN \\\n    ########################################################################\n    # Kamel, ODO\n    ########################################################################\n    if [[ -f /usr/local/bin/kamel ]]; then rm -f /usr/local/bin/kamel; fi; \\\n    if [[ -f /tmp/assets/asset-kamel-$(uname -m).tar.gz ]]; then tar xzf /tmp/assets/asset-kamel-$(uname -m).tar.gz -C /usr/local/bin/; fi; \\\n    if [[ -f /usr/local/bin/odo ]]; then rm -f /usr/local/bin/odo; fi; \\\n    tar xzf /tmp/assets/asset-odo.tgz --strip=1 -C /usr/local/bin $(uname -m)/odo && rm -fr /tmp/assets/asset-odo.tgz\nRUN \\\n    ########################################################################\n    # C/C++ (Tech Preview)\n    ########################################################################\n    dnf -y -q install llvm-toolset clang clang-libs clang-tools-extra git-clang-format gdb make cmake gcc gcc-c++ && \\\n    # to see what requires kernel-headers, use in line above: dnf install --exclude=kernel*\n    # or query: rpm -q --whatrequires kernel-headers && rpm -q --whatrequires glibc-headers && rpm -q --whatrequires glibc-devel && rpm -q --whatrequires gcc\n    mkdir -p ${HOME}/che/ls-csharp ${HOME}/che/ls-clangd && \\\n    echo \"clangd -pretty\" > ${HOME}/che/ls-clangd/launch.sh && \\\n    chmod +x ${HOME}/che/ls-clangd/launch.sh\n    ########################################################################\n    # Dotnet (x64 only) (Tech Preview)\n    ########################################################################\nRUN \\\n    if [[ \"$(uname -m)\" == 'x86_64' ]]; then \\\n        dnf -y -q --setopt=tsflags=nodocs install dotnet dotnet-host dotnet-hostfxr-${DOTNET_RPM_VERSION} dotnet-runtime-${DOTNET_RPM_VERSION} dotnet-sdk-${DOTNET_RPM_VERSION}; \\\n    fi\nRUN \\\n\n\n\n    dnf -y -q install golang glibc-devel zlib-devel libstdc++ libstdc++-devel && \\\n    mkdir -p /projects/.che/gopath /.cache ${HOME}/go && \\\n    tar -xvf /tmp/assets/asset-golang-$(uname -m).tar.gz --strip-components=1 -C /projects/.che/gopath/ && \\\n    for f in \"/home/user\" \"/etc/passwd\" \"/etc/group\" \"/projects\" \"/.cache\" \"/usr/share/gocode\" \"/opt/app-root/src/\"; do \\\n        chgrp -R 0 ${f} && \\\n        chmod -R g+rwX ${f}; \\\n    done && rm /tmp/assets/asset-golang-$( uname -m).tar.gz\nRUN \\\n\n\n\n    dnf -y -q module enable php:$PHP_VERSION && \\\n    dnf -y -q install php php-fpm php-opcache php-devel php-pear php-gd php-mysqli php-zlib php-curl ca-certificates && \\\n    tar xzf /tmp/assets/asset-php-xdebug-$(uname -m).tar.gz -C / && \\\n    sed -i 's/opt\\/app-root\\/src/projects/' /etc/httpd/conf/httpd.conf && \\\n    sed -i 's/#DocumentRoot/DocumentRoot/' /etc/httpd/conf/httpd.conf && \\\n    sed -i 's/CustomLog \\\"|\\/usr\\/bin\\/cat\\\"/CustomLog \\\"\\/var\\/log\\/httpd\\/access_log\\\"/' /etc/httpd/conf/httpd.conf && \\\n    sed -i 's/ErrorLog \\\"|\\/usr\\/bin\\/cat\\\"/ErrorLog \\\"\\/var\\/log\\/httpd\\/error_log\\\"/' /etc/httpd/conf/httpd.conf && \\\n    chmod -R 777 /var/run/httpd /var/log/httpd/ /etc/pki/ /etc/httpd/logs/ && \\\n    mkdir -p ${HOME}/che/ls-php/php-language-server && \\\n    tar xzf /tmp/assets/asset-php-$(uname -m).tar.gz -C ${HOME}/che/ls-php/php-language-server/ && \\\n    cp ${HOME}/che/ls-php/php-language-server/composer/composer /usr/bin/composer && rm /tmp/assets/asset-php-xdebug-$( uname -m).tar.gz\nRUN \\\n    ########################################################################\n    # e2fsprogs (x64 only) (Tech Preview)\n    ########################################################################\n    if [[ \"$(uname -m)\" == 'x86_64' ]]; then \\\n        TEMP_DIR=\"$(mktemp -d)\" && \\\n        cd \"${TEMP_DIR}\" && \\\n        mv /tmp/e2fsprogs-${E2FSPROGS_VERSION}.tar.gz . && \\\n        tar -zxvf e2fsprogs-${E2FSPROGS_VERSION}.tar.gz && \\\n        cd \"e2fsprogs-${E2FSPROGS_VERSION}\" && \\\n        mkdir build && \\\n        cd build && \\\n        ../configure --prefix=/usr --with-root-prefix=\"\" --enable-elf-shlibs && \\\n        make && \\\n        make install && \\\n        make install-libs && \\\n        cd -- && \\\n        rm -rf \"${TEMP_DIR}\"; \\\n    else \\\n        rm /tmp/e2fsprogs-${E2FSPROGS_VERSION}.tar.gz; \\\n    fi\n    ########################################################################\n    # Cleanup and Summaries\n    ########################################################################\nRUN \\\n    # fetch CVE updates\n    dnf -y -q update && \\\n    dnf -y -q clean all --enablerepo='*' && \\\n    dnf -y -q clean all && rm -rf /var/cache/yum && \\\n    rm -fr /tmp/assets/ && \\\n    chmod 755 /usr/local/bin/* && \\\n    chmod -R g+rwX ${HOME} && \\\n    echo \"Installed Packages\" && rpm -qa | sort -V && echo \"End Of Installed Packages\" && \\\n    echo \"========\" && \\\n    echo -n \"java:  \"; java -version; \\\n    echo -n \"mvn:   \"; mvn -version; \\\n    echo -n \"gradle:    \"; gradle -v; \\\n    echo \"========\" && \\\n    echo -n \"node:  \"; node --version; \\\n    echo -n \"npm:   \"; npm --version; \\\n    echo \"========\" && \\\n    echo \"python basic install:\"; python -V; \\\n    echo -n \"pip:   \"; pip -V; \\\n    echo -n \"pylint:    \"; pylint --version; \\\n    echo \"========\" && \\\n    echo \"python venv install:\"; python${PYTHON_VERSION} -m venv .venv && . .venv/bin/activate; python -V; \\\n    echo -n \"pip:   \"; pip -V; \\\n    echo -n \"pylint:    \"; pylint --version; \\\n    echo \"========\" && \\\n    echo -n \"oc:    \"; oc version; \\\n    echo -n \"odo:    \"; odo version; \\\n    echo -n \"helm:    \"; helm version --short --client; \\\n    echo -n \"kubectl: \"; kubectl version --short --client=true; \\\n    if [[ -f /usr/local/bin/kamel ]]; then \\\n      echo -n \"kamel:   \"; kamel version; \\\n    else \\\n      echo \"kamel: not available on $(uname -m)\"; \\\n    fi; \\\n    echo \"========\" && \\\n    echo -n \"clangd:    \"; clangd --version; \\\n    if [[ -f /usr/bin/dotnet ]]; then \\\n      echo -n \"dotnet:    \"; dotnet --version; \\\n    else \\\n      echo \"dotnet: not available on $(uname -m)\"; \\\n    fi; \\\n    echo -n \"go:    \"; go version; \\\n    echo -n \"php:    \"; php -v; \\\n    echo \"========\"\n\nADD etc/entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\nWORKDIR /projects\nCMD tail -f /dev/null\n\nENV SUMMARY=\"Red Hat OpenShift Dev Spaces - Universal Developer Image container\" \\\n    DESCRIPTION=\"Red Hat OpenShift Dev Spaces - Universal Developer Image container\" \\\n    PRODNAME=\"devspaces\" \\\n    COMPNAME=\"udi-rhel8\"\n\nLABEL summary=\"$SUMMARY\" \\\n      description=\"$DESCRIPTION\" \\\n      io.k8s.description=\"$DESCRIPTION\" \\\n      io.k8s.display-name=\"$DESCRIPTION\" \\\n      io.openshift.tags=\"$PRODNAME,$COMPNAME\" \\\n      com.redhat.component=\"$PRODNAME-$COMPNAME-container\" \\\n      name=\"$PRODNAME/$COMPNAME\" \\\n      version=\"3.2\" \\\n      license=\"EPLv2\" \\\n      maintainer=\"Nick Boldt <nboldt@redhat.com>\" \\\n      io.openshift.expose-services=\"\" \\\n      usage=\"\"\n"
}