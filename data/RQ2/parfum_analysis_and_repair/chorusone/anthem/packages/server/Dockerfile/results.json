{
  "startTime": 1674216181643,
  "endTime": 1674216182463,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 18,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 24,
        "columnEnd": 40
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 25,
        "columnEnd": 41
      }
    }
  ],
  "repairedDockerfile": "FROM node:10-alpine AS build\n\n# Install git\nRUN apk add --no-cache git\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Copy files\nCOPY . .\n\n# Install Lerna\nRUN npm i -g lerna && npm cache clean --force;\n\n# Install Zeit ncc\nRUN npm i -g @zeit/ncc && npm cache clean --force;\n\n# Install dependencies\nRUN lerna bootstrap\n\n# Build utils package\nRUN yarn utils:build && yarn cache clean;\n\n# Build the server\nRUN yarn server:build && yarn cache clean;\n\n# Compile the server into a single js file\nRUN cd packages/server && ncc build build/src/server.js -o dist\n\nFROM node:10-alpine AS runtime\n\n# Install dependencies for entrypoint script\nRUN apk update && apk add --no-cache bash curl jq\n\nWORKDIR /usr/src/app\n\n# Copy entrypoint file\nCOPY --from=build /usr/src/app/packages/server/entrypoint.sh /usr/src/app\n\n# Copy dist folder with server index.js file\nCOPY --from=build /usr/src/app/packages/server/dist /usr/src/app/dist\n\n# Copy schema.graphql file\nCOPY --from=build /usr/src/app/packages/server/src/schema.graphql /usr/src/app/dist\n\n# Allow entrypoint to be executable\nRUN chmod +x entrypoint.sh\n\n# Expose PORT\nEXPOSE 8000\n\nCMD [ \"node\", \"dist/index.js\" ]"
}