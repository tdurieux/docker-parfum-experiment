{
  "startTime": 1674248901636,
  "endTime": 1674248903225,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 97
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:bionic\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y -q \\\n      apt-utils autoconf bison build-essential flex gawk gdb-multiarch git gperf help2man \\\n      libexpat-dev libncurses5-dev libtool-bin \\\n      python python-dev python-git python-pyelftools python-serial python-six python-yaml \\\n      python3 python3-dev python3-git python3-pyelftools python3-serial python3-six python3-yaml \\\n      software-properties-common texinfo unzip wget zip && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN cd /tmp && \\\n    git clone https://github.com/rojer/fsync-stub && \\\n    cd /tmp/fsync-stub && ./install.sh && \\\n    rm -rf /tmp/fsync-stub\n\nRUN DEBIAN_FRONTEND=noninteractive add-apt-repository -y -u ppa:team-gcc-arm-embedded/ppa && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y -q gcc-arm-embedded && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nARG TI_COMPILER_DIR\nADD tmp/$TI_COMPILER_DIR /opt/$TI_COMPILER_DIR\n\n# Create our own version of libc - with no HOSTIO and malloc functions.\nRUN cd /opt/$TI_COMPILER_DIR/lib && rm *.lib && \\\n    ./mklib --index=libc.a --pattern=rtsv7M4_T_le_eabi.lib \\\n            --extra_options='-O4 --opt_for_speed=0' \\\n            --compiler_bin_dir=../bin \\\n            --name=rtsv7M4_T_le_eabi_cesanta.lib --install_to=. \\\n            --parallel=4\n\nARG SDK_DIR\nADD tmp/$SDK_DIR /opt/$SDK_DIR\n\nARG TARGETARCH\nADD mgos_fw_meta.py $TARGETARCH/mklfs $TARGETARCH/mkspiffs $TARGETARCH/mkspiffs8 /usr/local/bin/\nADD serve_core/ /opt/serve_core/\nRUN ln -s /opt/serve_core/serve_core.py /usr/local/bin/serve_core.py\n\nARG DOCKER_TAG\nENV SDK_PATH=/opt/$SDK_DIR\nENV TI_COMPILER_PATH=/opt/$TI_COMPILER_DIR\nENV MGOS_TARGET_GDB=/usr/bin/arm-none-eabi-gdb\nENV MGOS_SDK_REVISION $DOCKER_TAG\nENV MGOS_SDK_BUILD_IMAGE docker.io/mgos/cc3220-build:$DOCKER_TAG\n"
}