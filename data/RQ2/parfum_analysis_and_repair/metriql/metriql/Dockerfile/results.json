{
  "startTime": 1674248625749,
  "endTime": 1674248626364,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 15,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 84,
        "columnEnd": 106
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 110,
        "columnEnd": 207
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 80
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 87
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16-alpine3.11 AS frontend\n\nCOPY ./frontend ./app/\n\nRUN cd /app && npm install && export NODE_ENV=production && npm run build && npm cache clean --force;\n\nFROM adoptopenjdk:11 AS backend\n\n# copy the pom and src code to the container\nCOPY ./ ./app\n\n# package our application code, we optimize with extra JVM flags and disable tests because Maven throws java.lang.OutOfMemoryError: GC overhead limit exceeded\nRUN cd app && export MAVEN_OPTS=\"-Xmx2500m -XX:MetaspaceSize=512M -XX:MaxMetaspaceSize=1024M -XX:-UseGCOverheadLimit\" && ./mvnw package -Dmaven.test.skip=true\n\n# the second stage of our build will use open jdk 11 on alpine 3.9\nFROM openjdk:11-jre-slim\n\n# copy only the artifacts we need from the first stage and discard the rest\nCOPY --from=backend /app/target/metriql-*-bundle /\n\n# see https://cloud.google.com/sdk/docs/install#deb\nRUN apt-get update && apt-get install --no-install-recommends apt-transport-https ca-certificates gnupg curl -y && rm -rf /var/lib/apt/lists/*;\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\nRUN curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\n# install packages required at runtime\nRUN apt-get update && apt-get install --no-install-recommends python-dev python3-pip google-cloud-sdk -y && pip3 install --no-cache-dir \"pip>=20\" && pip3 install --no-cache-dir metriql-lookml==0.3 metriql-tableau==0.6 metriql-superset==0.6 metriql-metabase==0.5 && rm -rf /var/lib/apt/lists/*;\n\nRUN mv metriql-* app\n\nCOPY --from=frontend /app/dist /app/frontend\n\n# set the startup command to execute the jar\nENTRYPOINT [\"java\", \"-cp\", \"/app/lib/*\", \"com.metriql.ServiceStarterKt\"]\nEXPOSE 5656"
}