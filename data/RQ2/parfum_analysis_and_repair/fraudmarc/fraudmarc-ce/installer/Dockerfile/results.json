{
  "startTime": 1674219078648,
  "endTime": 1674219079593,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 1,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# - - build (from parent directory)\n# docker build -t fraudmarc-ce-install -f installer/Dockerfile .\n\n# - - run\n# docker run -it --env-file env.list --env-file installer/env.list fraudmarc-ce-install\n\n# OR run pre-built image from public repository https://hub.docker.com/r/fraudmarc/fraudmarc-ce-install/:\n# docker run -it --env-file env.list --env-file installer/env.list fraudmarc/fraudmarc-ce-install\n\n# - - stop & remove all of your docker images in case you wasted a lot of space\n# docker stop $(docker ps -a -q); docker rm $(docker ps -a -q); docker rmi -f $(docker images -q); docker images\n\nFROM golang:alpine as builder\nRUN apk -Uuv add git zip && \\\n\trm /var/cache/apk/*\nRUN (go get -d gopkg.in/mgutz/dat.v1 ; exit 0)\nCOPY /database/dat.patch /\nWORKDIR $GOPATH/src/gopkg.in/mgutz/dat.v1\nRUN patch -p1 < /dat.patch\nCOPY /functions /\nRUN go get \\\n    github.com/aws/aws-lambda-go/lambda \\\n    github.com/aws/aws-sdk-go/service/lambda \\\n    github.com/fraudmarc/fraudmarc-ce/backend/lib \\\n    github.com/fraudmarc/fraudmarc-ce/database \\\n    golang.org/x/text/encoding\nWORKDIR /receive\nRUN CGO_ENABLED=0 GOOS=linux \\\n    go build -a -installsuffix cgo -ldflags '-s -w -extldflags \"-static\"' -o receive .\nRUN zip ../fraudmarc-ce-receive.zip ./receive\nWORKDIR /process\nRUN CGO_ENABLED=0 GOOS=linux \\\n    go build -a -installsuffix cgo -ldflags '-s -w -extldflags \"-static\"' -o process .\nRUN zip ../fraudmarc-ce-process.zip ./process\n\nFROM alpine as installer\nRUN apk -Uuv add python py-pip jq && \\\n\tpip install --no-cache-dir awscli && \\\n\tapk --purge -v del py-pip && \\\n\trm /var/cache/apk/*\nCOPY --from=builder /fraudmarc-ce-receive.zip /fraudmarc-ce-process.zip /\nCOPY /installer/lambda-assume-policy.json /\nCOPY /installer/inline-policy.json /\nCMD aws rds create-db-instance --db-name $REPORTING_DB_NAME --db-instance-identifier $REPORTING_DB_IDENTIFIER \\\n        --allocated-storage 20 --db-instance-class db.t3.micro --engine postgres --master-username $REPORTING_DB_USER \\\n        --master-user-password $REPORTING_DB_PASSWORD > /dev/null \\\n    && echo \"Your Database has been launched! Check the AWS RDS Console -> Instances tab (fraudmarcce)\" \\\n    && export AWS_ROLE_ARN=$(aws iam create-role --role-name FraudmarcCE --assume-role-policy-document file:///lambda-assume-policy.json \\\n    | jq \".Role.Arn\" | tr -d \"\\\"\") && sleep 6 \\\n    && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess --role-name FraudmarcCE \\\n    && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess --role-name FraudmarcCE \\\n    && echo \"Your IAM Role has been created! Check the AWS IAM Console (FraudmarcCE)\" \\\n    && export PROCESS_ARN=$(aws lambda create-function \\\n    --region $AWS_DEFAULT_REGION \\\n    --function-name fraudmarc-ce-process \\\n    --memory 128 \\\n    --timeout 300 \\\n    --description \"Process DMARC Reports with IP Intelligence\" \\\n    --role $AWS_ROLE_ARN \\\n    --environment Variables=\"{ \\\n      ARRTable=$ARRTable, \\\n      ARTable=$ARTable, \\\n      BUCKET_NAME=$BUCKET_NAME, \\\n      DRE_TABLE=$DRE_TABLE, \\\n      REPORTING_DB_NAME=$REPORTING_DB_NAME, \\\n      REPORTING_DB_USER=$REPORTING_DB_USER, \\\n      REPORTING_DB_PASSWORD=$REPORTING_DB_PASSWORD, \\\n      REPORTING_DB_HOST=$REPORTING_DB_HOST, \\\n      REPORTING_DB_SSL=$REPORTING_DB_SSL, \\\n      REPORTING_DB_MAX_TIME=$REPORTING_DB_MAX_TIME \\\n    }\" \\\n    --runtime go1.x \\\n    --zip-file fileb://fraudmarc-ce-process.zip \\\n    --handler process \\\n    | jq \".FunctionArn\") \\\n    && aws lambda create-function \\\n        --region $AWS_DEFAULT_REGION \\\n        --function-name fraudmarc-ce-receive \\\n        --memory 1536 \\\n        --timeout 300 \\\n        --description \"Receive DMARC RUA Reports\" \\\n        --role $AWS_ROLE_ARN \\\n        --environment Variables=\"{ \\\n          ARRTable=$ARRTable, \\\n          ARTable=$ARTable, \\\n          BUCKET_NAME=$BUCKET_NAME, \\\n          DRE_TABLE=$DRE_TABLE, \\\n          ArnLambdaDmarcARResolveBulk=$PROCESS_ARN, \\\n          REPORTING_DB_NAME=$REPORTING_DB_NAME, \\\n          REPORTING_DB_USER=$REPORTING_DB_USER, \\\n          REPORTING_DB_PASSWORD=$REPORTING_DB_PASSWORD, \\\n          REPORTING_DB_HOST=$REPORTING_DB_HOST, \\\n          REPORTING_DB_SSL=$REPORTING_DB_SSL, \\\n          REPORTING_DB_MAX_TIME=$REPORTING_DB_MAX_TIME \\\n        }\" \\\n        --runtime go1.x \\\n        --zip-file fileb://fraudmarc-ce-receive.zip \\\n        --handler receive \\\n        | jq \".FunctionArn\" | xargs -I {} \\\n        sed -i \"s/ARN/$PROCESS_ARN/g\" inline-policy.json \\\n        && echo \"Your Lambda functions have been created! Check the AWS Lambda Console (fraudmarc-ce-receive/process)\" \\\n        && aws iam put-role-policy --role-name FraudmarcCE --policy-name invokeProcessLambda --policy-document file:///inline-policy.json \\\n        && echo \"Your inline-policy has been added to the FraudmarcCE role! Check the IAM Console\" \\\n        && echo \"Your AWS Role, RDS, Lambdas has been setup. Fraudmarc CE installation complete.\"\n"
}