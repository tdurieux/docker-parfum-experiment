{
  "startTime": 1674254133024,
  "endTime": 1674254134191,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 5,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 5,
        "columnEnd": 59
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 5,
        "columnEnd": 152
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 5,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 5,
        "columnEnd": 78
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 62,
        "columnEnd": 114
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.10-alpine AS lsp-adapter\nWORKDIR /go/src/github.com/sourcegraph/lsp-adapter\nCOPY . .\nRUN CGO_ENABLED=0 GOBIN=/usr/local/bin go install github.com/sourcegraph/lsp-adapter\n\n# .NET Core 2.0.0 is not available on Alpine yet, but it is actively being\n# worked on: https://github.com/dotnet/core/issues/1076\nFROM ubuntu:16.04\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y ca-certificates gnupg curl jq \\\n  # Ubuntu 16.04's default nodejs package v4.2.6 is too old to run the\n  # omnisharp-client npm package. \\\n  && curl -f -sL https://deb.nodesource.com/setup_10.x | bash - \\\n  && curl -f https://packages.microsoft.com/keys/microsoft.asc | gpg --batch --dearmor > /etc/apt/trusted.gpg.d/microsoft.gpg \\\n  && echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list \\\n  && echo \"deb https://download.mono-project.com/repo/ubuntu stable-xenial main\" > /etc/apt/sources.list.d/mono-official-stable.list \\\n  && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n  && apt-get update && apt-get install --no-install-recommends -y apt-transport-https \\\n  # OmniSharp runs on Mono and requires the .NET SDK 2.0.0.\n  && apt-get update && apt-get install --no-install-recommends -y mono-complete dotnet-sdk-2.0.0 nodejs \\\n  # Removes ~1 GB of unused files.\n  && rm -rf /usr/share/dotnet/sdk/NuGetFallbackFolder \\\n  && rm -rf /var/lib/apt/lists/* \\\n  # omnisharp-client translates between LSP and OmniSharp's custom protocol.\n  && npm install -g omnisharp-client@7.2.3 && npm cache clean --force;\n\n# Bake OmniSharp into this image (and write a .version file) so that\n# omnisharp-client doesn't have to download it upon initialization.\nENV BASE=/usr/lib/node_modules/omnisharp-client\nRUN mkdir \"$BASE/omnisharp-linux-x64\"\nRUN VERSION=\"$(jq -r \".[\\\"omnisharp-roslyn\\\"]\" < \"$BASE/package.json\")\" \\\n  && curl -f -L \"https://github.com/OmniSharp/omnisharp-roslyn/releases/download/$VERSION/omnisharp-linux-x64.tar.gz\" -o \"$BASE/omnisharp-linux-x64.tar.gz\" \\\n  && echo \"$VERSION\" > \"$BASE/omnisharp-linux-x64/.version\" \\\n  && tar xvf \"$BASE/omnisharp-linux-x64.tar.gz\" -C \"$BASE/omnisharp-linux-x64\" && rm \"$BASE/omnisharp-linux-x64.tar.gz\"\n\n# Use tini as entrypoint to correctly handle signals and zombie processes.\nENV TINI_VERSION v0.18.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n\nEXPOSE 8080\nCOPY --from=lsp-adapter /usr/local/bin/lsp-adapter /usr/local/bin/\nCMD [\"lsp-adapter\", \"-trace\", \"-proxyAddress=0.0.0.0:8080\", \"nodejs\", \"/usr/lib/node_modules/omnisharp-client/languageserver/server.js\"]\n"
}