diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/joseluisgs/docker-tutorial/ejemplos/ejem12/dockervue/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/joseluisgs/docker-tutorial/ejemplos/ejem12/dockervue/Dockerfile/repaired.Dockerfile
index 27c9d05..24fe913 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/joseluisgs/docker-tutorial/ejemplos/ejem12/dockervue/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/joseluisgs/docker-tutorial/ejemplos/ejem12/dockervue/Dockerfile/repaired.Dockerfile
@@ -4,7 +4,7 @@
 FROM node:14-alpine
 
 # instalar un simple servidor http para servir nuestro contenido estático
-RUN npm install -g http-server
+RUN npm install -g http-server && npm cache clean --force;
 
 # hacer la carpeta 'app' el directorio de trabajo actual
 WORKDIR /app
@@ -13,7 +13,7 @@ WORKDIR /app
 COPY package*.json ./
 
 # instalar dependencias del proyecto
-RUN npm install
+RUN npm install && npm cache clean --force;
 
 # copiar los archivos y carpetas del proyecto al directorio de trabajo actual (es decir, la carpeta 'app')
 COPY . .
@@ -25,12 +25,12 @@ RUN npm run build
 EXPOSE 8080
 CMD [ "http-server", "dist" ]
 
-# Puede parecer redundante copiar primero package.json ypackage-lock.json y luego todos los archivos y carpetas del proyecto en dos pasos separados, 
+# Puede parecer redundante copiar primero package.json ypackage-lock.json y luego todos los archivos y carpetas del proyecto en dos pasos separados,
 # pero en realidad hay una muy buena razón para eso (adelanto: nos permite aprovechar las capas de Docker almacenadas en caché).
 
 # Para subirla al registro, primero le ponemos una tag
 # docker build -t joseluisgs/joseluisgs/docker-vuejs-app .
 # Subirla:
 # docker push joseluisgs/docker-vuejs-app
-# Ejecutarla: 
+# Ejecutarla:
 # docker run -it -p 8080:8080 --rm --name docker-vuejs-app-1 joseluisgs/docker-vuejs-app