{
  "startTime": 1674217982419,
  "endTime": 1674217983142,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Elegimos la imagen, e este caso la 14 que es la última LTS:\n# https://hub.docker.com/_/node\n\nFROM node:14-alpine\n\n# instalar un simple servidor http para servir nuestro contenido estático\nRUN npm install -g http-server && npm cache clean --force;\n\n# hacer la carpeta 'app' el directorio de trabajo actual\nWORKDIR /app\n\n# copiar 'package.json' y 'package-lock.json' (si están disponibles)\nCOPY package*.json ./\n\n# instalar dependencias del proyecto\nRUN npm install && npm cache clean --force;\n\n# copiar los archivos y carpetas del proyecto al directorio de trabajo actual (es decir, la carpeta 'app')\nCOPY . .\n\n# construir aplicación para producción minificada\nRUN npm run build\n\n# Exponemos el puerto y ejecutamos el servidor\nEXPOSE 8080\nCMD [ \"http-server\", \"dist\" ]\n\n# Puede parecer redundante copiar primero package.json ypackage-lock.json y luego todos los archivos y carpetas del proyecto en dos pasos separados,\n# pero en realidad hay una muy buena razón para eso (adelanto: nos permite aprovechar las capas de Docker almacenadas en caché).\n\n# Para subirla al registro, primero le ponemos una tag\n# docker build -t joseluisgs/joseluisgs/docker-vuejs-app .\n# Subirla:\n# docker push joseluisgs/docker-vuejs-app\n# Ejecutarla:\n# docker run -it -p 8080:8080 --rm --name docker-vuejs-app-1 joseluisgs/docker-vuejs-app\n"
}