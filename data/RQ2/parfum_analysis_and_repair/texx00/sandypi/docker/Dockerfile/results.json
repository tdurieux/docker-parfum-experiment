{
  "startTime": 1674217827431,
  "endTime": 1674217828122,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 45,
        "columnEnd": 61
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "# Docker file to run the server in a docker environment\n\n# IMPORTANT! before building this image it is important to use \"python dev_tools/update_frontend_version_hash.py\". Check the build.md file\n\n# building frontend\nFROM node:16.13.0-alpine AS step1\n\nCOPY frontend/yarn.lock frontend/package.json ./\nRUN yarn install --network-timeout=100000 && yarn cache clean;\n\nCOPY frontend/public /public\nCOPY frontend/src /src\nCOPY frontend/.env ./\nRUN yarn build && yarn cache clean;\n\n# ------------------------\n\n# preparing the python part of the image\nFROM python:3.9.9\n\nLABEL mantainer=\"Texx00\"\nWORKDIR /sandypi\n\n# setting up virtual environment\n# for some reason I'm not able to build this with the slim version of the image because the apt-get install is failing (connection issues to the packages sites)\n# as a workaround will use the non-slim version of the image -> will get a larger image on the registry\n#RUN apt-get update && apt-get install python3-dev gcc libc-dev -y\nENV FLASK_ENV=production VIRTUAL_ENV=/env PATH=\"$VIRTUAL_ENV/bin:$PATH\" IS_DOCKER=true CFLAGS=-fcommon\nRUN python -m pip install virtualenv wheel\nRUN python -m venv ${VIRTUAL_ENV}\n\n# installing GPIO libraries only on arm/v7\nARG TARGETVARIANT TARGETARCH\nRUN if [ \"$TARGETARCH/$TARGETVARIANT\" = \"arm/v7\" ] ; then python -m pip install RPi.GPIO adafruit-circuitpython-neopixel adafruit-circuitpython-tsl2591 rpi_ws281x ; fi\n\n# adding docker-compose file version here to compare at runtime if need to update the file manually on the host\n# this version should always match the DOCKER_COMPOSE_FILE_VERSION in the docker-compose.yml file\nENV DOCKER_COMPOSE_FILE_EXPECTED_VERSION=1\n\n# installing python dependencies\nCOPY requirements.txt requirements.txt\nRUN python -m pip install -r requirements.txt\n\n# git_shash.json must be updated with \"python dev_tools/update_frontend_version_hash.py\" before creating the image\nCOPY .flaskenv setup.py ./\n\n# copying docker start files\nCOPY docker/check_prestart.py docker/start_server.sh docker/wsgi.py docker/check_pre_update.sh ./\n\n# copying server data\nCOPY migrations migrations\nCOPY server server\n# copy placeholder copy hidden by the .dockerignore\nCOPY docker/placeholder.jpg server/static/Drawings/placeholder.jpg\n\n# copying frontend files into python image\nCOPY --from=step1 build frontend/build\n\nCOPY git_shash.json git_shash.json\n\nRUN python setup.py install\n\nEXPOSE 5000\nENTRYPOINT [\"bash\", \"start_server.sh\"]"
}