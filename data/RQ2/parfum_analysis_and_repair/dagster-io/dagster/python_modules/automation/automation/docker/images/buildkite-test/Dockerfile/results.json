{
  "startTime": 1674249419489,
  "endTime": 1674249420494,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 7,
        "columnEnd": 166
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 108,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 120,
        "lineEnd": 121,
        "columnStart": 7,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 56,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 108,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 120,
        "lineEnd": 121,
        "columnStart": 7,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "####################################################################################################\n#\n# DAGSTER BUILDKITE TEST\n#\n# This Dockerfile specifies an image that serves as base for all Python testing\n# steps (both integration and unit) run on BK.\n#\n####################################################################################################\nARG BASE_IMAGE\nFROM \"${BASE_IMAGE}\" AS system_base\n\nLABEL maintainer=\"Elementl\"\n\n# Never prompts the user for choices on installation/configuration of packages (NOTE:\n# DEBIAN_FRONTEND does not affect the apt-get command)\nENV DEBIAN_FRONTEND=noninteractive \\\n    TERM=linux\n\n# Set correct locale first and install deps for installing debian packages\nRUN apt-get update -yqq \\\n    && apt-get upgrade -yqq \\\n    && apt-get install -yqq --no-install-recommends \\\n       apt-transport-https \\\n       curl \\\n       ca-certificates \\\n       gnupg2 \\\n       locales \\\n       lsb-release \\\n    # Set locale\n    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n    && dpkg-reconfigure --frontend=noninteractive locales \\\n    && update-locale LANG=en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\n\n# Envionment variables that will be referenced during installation of various packages\nENV LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US.UTF-8 \\\n    LC_ALL=en_US.UTF-8 \\\n    DOCKER_COMPOSE_VERSION=1.29.1 \\\n    KIND_VERSION=v0.9.0 \\\n    KUBECTL_VERSION=v1.20.1 \\\n    PYSPARK_VERSION=3.0.1 \\\n    FOSSA_VERSION=v1.1.10\n\n# Install Kubernetes tools: kubectl, kind, helm\nRUN curl -f -LO \"https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl\" \\\n    && chmod +x ./kubectl \\\n    && mv ./kubectl /usr/local/bin/kubectl \\\n    && curl -f -L \"https://github.com/kubernetes-sigs/kind/releases/download/$KIND_VERSION/kind-linux-amd64\" -o ./kind \\\n    && chmod +x ./kind \\\n    && mv ./kind /usr/local/bin/kind \\\n    && curl -f \"https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\" | bash\n\n# Install libxmlsec to use xmlsec\nRUN apt-get update -yqq \\\n    && apt-get install -yqq --no-install-recommends \\\n       libxmlsec1-dev \\\n       pkg-config && rm -rf /var/lib/apt/lists/*;\n\n# Install various packages used in running/installing/testing Dagster:\n# - git/make (cloning dagster, running checks defined in Makefile)\n# - openjdk-11-{jdk,jre}-headless 8 (Java required by pyspark) see: http://bit.ly/2ZIuHRh\n# - nodejs/yarn (dagit)\n# - assorted others-- some may no longer be required, but leaving in place for now\n#\n# deb.nodesource script adds node source to apt\nRUN curl -f -sL https://deb.nodesource.com/setup_14.x | bash - \\\n    # Add yarn GPG key and apt source\n    && curl -f -sL https://dl.yarnpkg.com/debian/pubkey.gpg | \\\n       gpg --batch --dearmor -o /usr/share/keyrings/yarnkey.gpg \\\n    && echo \"deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian/ stable main\" | \\\n       tee -a /etc/apt/sources.list.d/yarn.list >/dev/null \\\n    # Deal with slim variants not having man page directories (which causes \"update-alternatives\" to fail)\n    && mkdir -p /usr/share/man/man1 /usr/share/man/man2 \\\n    && apt-get update -yqq \\\n    && apt-get install -yqq --no-install-recommends \\\n       build-essential \\\n       bzip2 \\\n       cron \\\n       g++ \\\n       gcc \\\n       git \\\n       make \\\n       mariadb-client \\\n       nodejs \\\n       openjdk-11-jdk-headless \\\n       openjdk-11-jre-headless \\\n       pandoc \\\n       postgresql \\\n       rabbitmq-server \\\n       rsync \\\n       ssh \\\n       software-properties-common \\\n       unzip \\\n       wget \\\n       xz-utils \\\n       yarn \\\n    # Confirm Java works\n    && java -version && rm -rf /var/lib/apt/lists/*;\n\n# Install Google Cloud SDK\n# https://cloud.google.com/sdk/docs/install#deb\n# Add Google Cloud GPG key and apt source\nRUN curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg > /usr/share/keyrings/cloud.google.gpg \\\n    && echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main\" | \\\n       tee -a /etc/apt/sources.list.d/google-cloud-sdk.list > /dev/null \\\n    # Install google cloud\n    && apt-get -yqq update \\\n    && apt-get -yqq --no-install-recommends install \\\n       google-cloud-sdk && rm -rf /var/lib/apt/lists/*;\n\n# Install Docker -- note that we have some older code using `docker-compose` instead of `docker\n# compose`, so we have to install both the `docker-compose` executable and the docker compose CLI\n# plugin. Eventually we should update the code using `docker-compose` and then we can just use the\n# CLI plugin.\n# See: https://docs.docker.com/engine/install/debian/\nRUN curl -fsSL https://download.docker.com/linux/debian/gpg | \\\n       gpg --batch --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \\\n    && echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" | \\\n       tee -a /etc/apt/sources.list.d/docker.list > /dev/null \\\n    && apt-get -yqq update \\\n    && apt-get -yqq --no-install-recommends install \\\n       docker-ce docker-ce-cli containerd.io docker-compose-plugin \\\n    # Install docker-compose\n    && curl -f -L \"https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose \\\n    && chmod +x /usr/local/bin/docker-compose \\\n    # Install docker compose Cloud Integrations (for ecs). Note that the `compose-cli` name is old.\n    # The compose-cli is actually handled by `docker-compose-plugin` above, but we still have to\n    # install this for the cloud integrations.\n    # https://github.com/docker/compose-cli/blob/main/INSTALL.md\n    && curl -f -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh && rm -rf /var/lib/apt/lists/*;\n\n# Install Python build deps\nRUN pip install --no-cache-dir -U pip setuptools wheel\n\n# Install redis\nRUN wget https://download.redis.io/redis-stable.tar.gz \\\n    && tar xvzf redis-stable.tar.gz \\\n    && cd redis-stable \\\n    && make install && rm redis-stable.tar.gz\n\n# Install FOSSA cli for analyzing our open-source dependencies\n# https://github.com/fossas/fossa-cli\nRUN curl -f -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | \\\n       sh -s $FOSSA_VERSION\n\n# Clean up\nRUN apt-get remove -yqq \\\n    && apt-get autoremove -yqq --purge \\\n    && apt-get clean\n\n\n# Temp image used to get non-dagster Python dependencies\nFROM system_base AS snapshot_builder\n\n# Build a requirements file with all non-Dagster packages that are dependencies of a Dagster\n# package. We also install `awscli` (used in Buildkite) at this stage so that it can be installed\n# together with Dagster dependencies. This allows pip's dependency resolver to account for\n# everything.\nRUN git clone https://github.com/dagster-io/dagster.git\n\nWORKDIR dagster\n\nRUN python scripts/install_dev_python_modules.py awscli \\\n    && pip freeze --exclude-editable > /snapshot-reqs.txt\n\n# Final image includes both system deps and preinstalled non-Dagster python deps\nFROM system_base\n\nCOPY --from=snapshot_builder /snapshot-reqs.txt .\n\n# Preinstall non-Dagster packages in image so that the virtual environment\n# builds faster in Buildkite.\nRUN pip install --no-cache-dir -r /snapshot-reqs.txt \\\n    && rm /snapshot-reqs.txt\n"
}