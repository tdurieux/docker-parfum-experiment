diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/dagster-io/dagster/python_modules/automation/automation/docker/images/buildkite-test/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/dagster-io/dagster/python_modules/automation/automation/docker/images/buildkite-test/Dockerfile/repaired.Dockerfile
index a9d9bbe..e1c44c7 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/dagster-io/dagster/python_modules/automation/automation/docker/images/buildkite-test/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/dagster-io/dagster/python_modules/automation/automation/docker/images/buildkite-test/Dockerfile/repaired.Dockerfile
@@ -3,7 +3,7 @@
 # DAGSTER BUILDKITE TEST
 #
 # This Dockerfile specifies an image that serves as base for all Python testing
-# steps (both integration and unit) run on BK. 
+# steps (both integration and unit) run on BK.
 #
 ####################################################################################################
 ARG BASE_IMAGE
@@ -29,7 +29,7 @@ RUN apt-get update -yqq \
     # Set locale
     && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
     && dpkg-reconfigure --frontend=noninteractive locales \
-    && update-locale LANG=en_US.UTF-8
+    && update-locale LANG=en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;
 
 # Envionment variables that will be referenced during installation of various packages
 ENV LANG=en_US.UTF-8 \
@@ -42,19 +42,19 @@ ENV LANG=en_US.UTF-8 \
     FOSSA_VERSION=v1.1.10
 
 # Install Kubernetes tools: kubectl, kind, helm
-RUN curl -LO "https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl" \
+RUN curl -f -LO "https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl" \
     && chmod +x ./kubectl \
     && mv ./kubectl /usr/local/bin/kubectl \
-    && curl -L "https://github.com/kubernetes-sigs/kind/releases/download/$KIND_VERSION/kind-linux-amd64" -o ./kind \
+    && curl -f -L "https://github.com/kubernetes-sigs/kind/releases/download/$KIND_VERSION/kind-linux-amd64" -o ./kind \
     && chmod +x ./kind \
     && mv ./kind /usr/local/bin/kind \
-    && curl "https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3" | bash
+    && curl -f "https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3" | bash
 
 # Install libxmlsec to use xmlsec
 RUN apt-get update -yqq \
     && apt-get install -yqq --no-install-recommends \
        libxmlsec1-dev \
-       pkg-config
+       pkg-config && rm -rf /var/lib/apt/lists/*;
 
 # Install various packages used in running/installing/testing Dagster:
 # - git/make (cloning dagster, running checks defined in Makefile)
@@ -62,11 +62,11 @@ RUN apt-get update -yqq \
 # - nodejs/yarn (dagit)
 # - assorted others-- some may no longer be required, but leaving in place for now
 #
-# deb.nodesource script adds node source to apt 
-RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - \
+# deb.nodesource script adds node source to apt
+RUN curl -f -sL https://deb.nodesource.com/setup_14.x | bash - \
     # Add yarn GPG key and apt source
-    && curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | \
-       gpg --dearmor -o /usr/share/keyrings/yarnkey.gpg \
+    && curl -f -sL https://dl.yarnpkg.com/debian/pubkey.gpg | \
+       gpg --batch --dearmor -o /usr/share/keyrings/yarnkey.gpg \
     && echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian/ stable main" | \
        tee -a /etc/apt/sources.list.d/yarn.list >/dev/null \
     # Deal with slim variants not having man page directories (which causes "update-alternatives" to fail)
@@ -95,18 +95,18 @@ RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - \
        xz-utils \
        yarn \
     # Confirm Java works
-    && java -version
+    && java -version && rm -rf /var/lib/apt/lists/*;
 
 # Install Google Cloud SDK
 # https://cloud.google.com/sdk/docs/install#deb
 # Add Google Cloud GPG key and apt source
-RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg > /usr/share/keyrings/cloud.google.gpg \
+RUN curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg > /usr/share/keyrings/cloud.google.gpg \
     && echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | \
        tee -a /etc/apt/sources.list.d/google-cloud-sdk.list > /dev/null \
     # Install google cloud
     && apt-get -yqq update \
-    && apt-get -yqq install \
-       google-cloud-sdk
+    && apt-get -yqq --no-install-recommends install \
+       google-cloud-sdk && rm -rf /var/lib/apt/lists/*;
 
 # Install Docker -- note that we have some older code using `docker-compose` instead of `docker
 # compose`, so we have to install both the `docker-compose` executable and the docker compose CLI
@@ -114,33 +114,33 @@ RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg > /usr/share/keyr
 # CLI plugin.
 # See: https://docs.docker.com/engine/install/debian/
 RUN curl -fsSL https://download.docker.com/linux/debian/gpg | \
-       gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
+       gpg --batch --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
     && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | \
        tee -a /etc/apt/sources.list.d/docker.list > /dev/null \
     && apt-get -yqq update \
-    && apt-get -yqq install \
+    && apt-get -yqq --no-install-recommends install \
        docker-ce docker-ce-cli containerd.io docker-compose-plugin \
     # Install docker-compose
-    && curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
+    && curl -f -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
     && chmod +x /usr/local/bin/docker-compose \
     # Install docker compose Cloud Integrations (for ecs). Note that the `compose-cli` name is old.
     # The compose-cli is actually handled by `docker-compose-plugin` above, but we still have to
     # install this for the cloud integrations.
     # https://github.com/docker/compose-cli/blob/main/INSTALL.md
-    && curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
+    && curl -f -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh && rm -rf /var/lib/apt/lists/*;
 
 # Install Python build deps
-RUN pip install -U pip setuptools wheel
+RUN pip install --no-cache-dir -U pip setuptools wheel
 
 # Install redis
-RUN wget http://download.redis.io/redis-stable.tar.gz \
+RUN wget https://download.redis.io/redis-stable.tar.gz \
     && tar xvzf redis-stable.tar.gz \
     && cd redis-stable \
-    && make install
+    && make install && rm redis-stable.tar.gz
 
 # Install FOSSA cli for analyzing our open-source dependencies
 # https://github.com/fossas/fossa-cli
-RUN curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | \
+RUN curl -f -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | \
        sh -s $FOSSA_VERSION
 
 # Clean up
@@ -170,5 +170,5 @@ COPY --from=snapshot_builder /snapshot-reqs.txt .
 
 # Preinstall non-Dagster packages in image so that the virtual environment
 # builds faster in Buildkite.
-RUN pip install -r /snapshot-reqs.txt \
+RUN pip install --no-cache-dir -r /snapshot-reqs.txt \
     && rm /snapshot-reqs.txt