{
  "startTime": 1674218485444,
  "endTime": 1674218486699,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 7,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 1,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 100,
        "lineEnd": 115,
        "columnStart": 25,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 18,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG FROM_IMAGE\n\nFROM $FROM_IMAGE AS build\nARG ROS_DISTRO=melodic \\\n\tUBUNTU_DISTRO=bionic \\\n\tGAZEBOV=11\nENV ROS_DISTRO=$ROS_DISTRO\n\n#update gazebo to latest\nRUN apt update && \\\n\tapt-get install -y --no-install-recommends \\\n\tapt-utils \\\n\tcurl \\\n\tgit \\\n\trsync \\\n\tsoftware-properties-common \\\n\tunzip \\\n\tusbutils \\\n\twget \\\n\t&& \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists/*\n\n\n#RUN sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable $UBUNTU_DISTRO main\" > /etc/apt/sources.list.d/gazebo-stable.list' && \\\n#\twget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add - && \\\n#\tapt-get update \\\n#\t&& \\\n#\tapt-get -q -y install gazebo$GAZEBOV libgazebo$GAZEBOV-dev \\\n#\t&& \\\n#\tapt-get clean && \\\n#\trm -rf /var/lib/apt/lists/*\n\n# CMake 3.19+ is required to build Open3D\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.19.3/cmake-3.19.3-Linux-aarch64.sh && \\\n\tsh cmake-3.19.3-Linux-aarch64.sh --skip-license --prefix=/usr && \\\n\trm cmake-3.19.3-Linux-aarch64.sh\n\nRUN apt-key adv --fetch-key http://repo.download.nvidia.com/jetson/jetson-ota-public.asc && \\\n\techo \"deb https://repo.download.nvidia.com/jetson/common r32.6 main\" > /etc/apt/sources.list.d/nvidia-l4t-apt-source.list && \\\n\techo \"deb https://repo.download.nvidia.com/jetson/t194 r32.6 main\" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list\n\nRUN apt update && \\\n\tapt install --no-install-recommends -y \\\n\tnvidia-cudnn8 \\\n\tlibcublas-dev \\\n\tlibcurand-dev-10-2 \\\n\tlibnpp-dev-10-2 \\\n\tlibcufft-dev-10-2 \\\n\tcuda-nvcc-10-2  \\\n\tnvidia-container-csv-cudnn \\\n\t&& \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists/*\n\n\n# install opencv       \nARG OPENCV_V=4.5.4 \\\n    COMP_CAP=5.3,6.2,7.2\n\nRUN mkdir -p src/opencv/build && cd src/opencv && \\\n\twget -q https://github.com/opencv/opencv/archive/refs/tags/${OPENCV_V}.zip && \\\n\tunzip -q ${OPENCV_V}.zip && rm ${OPENCV_V}.zip && \\\n\twget -q https://github.com/opencv/opencv_contrib/archive/refs/tags/${OPENCV_V}.zip && \\\n\tunzip -q ${OPENCV_V}.zip && rm ${OPENCV_V}.zip && \\\n\tcd build && \\\n\tcmake -D CMAKE_BUILD_TYPE=RELEASE \\\n\t-D CMAKE_INSTALL_PREFIX=/usr/local \\\n\t-D INSTALL_PYTHON_EXAMPLES=OFF \\\n\t-D INSTALL_C_EXAMPLES=OFF \\\n\t-D WITH_TBB=ON \\\n\t-D WITH_CUDA=ON \\\n\t-D WITH_CUDNN=ON \\\n\t-D OPENCV_DNN_CUDA=ON \\\n\t-D CUDA_ARCH_BIN=${COMP_CAP} \\\n\t-D BUILD_opencv_cudacodec=OFF \\\n\t-D ENABLE_FAST_MATH=1 \\\n\t-D CUDA_FAST_MATH=1 \\\n\t-D WITH_CUBLAS=1 \\\n\t-D WITH_V4L=ON \\\n\t-D WITH_QT=OFF \\\n\t-D WITH_OPENGL=ON \\\n\t-D WITH_GSTREAMER=ON \\\n\t-D WITH_FFMPEG=ON \\\n\t-D OPENCV_GENERATE_PKGCONFIG=ON \\\n\t-D OPENCV_PC_FILE_NAME=opencv4.pc \\\n\t-D OPENCV_ENABLE_NONFREE=OFF \\\n\t-D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib-${OPENCV_V}/modules \\\n\t-D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \\\n\t-D BUILD_EXAMPLES=OFF \\\n\t../opencv-${OPENCV_V} && \\\n\tmake -j$(nproc) && \\\n\tmake install && \\\n\tldconfig && \\\n\tcd ../../ && \\\n\trm -rf opencv\n\n# install Open3D and build Open3D python package\n# http://www.open3d.org/docs/release/arm.html\n# https://github.com/intel-isl/Open3D/issues/2519\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n\tclang-7 \\\n\tgfortran \\\n\tlibglu1-mesa-dev \\\n\tlibblas-dev \\\n\tlibc++-7-dev \\\n\tlibc++abi-7-dev \\\n\tlibfreetype6-dev \\\n\tlibjpeg-dev \\\n\tliblapack-dev \\\n\tliblapacke-dev \\\n\tlibsdl2-dev \\\n\tlibxi-dev \\\n\txorg-dev \\\n\topenmpi-bin \\\n\topenmpi-common \\\n    && pip3 install --no-cache-dir -U --force-reinstall pip \\\n    && pip3 install --no-cache-dir \\\n\tsetuptools \\\n\tCython \\\n\twheel \\\n\tnumpy==1.19.2 --verbose \\\n    && pip3 install --no-cache-dir \\\n\tmatplotlib==3.3.3 \\\n\tscipy==1.5.4 \\\n\tscikit-learn==0.24.0 \\\n\tfilterpy==1.4.5 --verbose \\\n\t&& \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists/*\n\n# need to run build, install, and delete to reduce image size\nRUN git clone --recursive https://github.com/intel-isl/Open3D && \\\n\tcd Open3D && \\\n\tgit checkout v0.14.1 && \\\n\tgit submodule update --init --recursive && \\\n\tmkdir build && \\\n\tcd build && \\\n\tcmake \\\n\t-DCMAKE_BUILD_TYPE=Release \\\n\t-DBUILD_EXAMPLES=OFF \\\n\t-DBUILD_CUDA_MODULE=OFF \\\n\t-DBUILD_GUI=OFF \\\n\t-DBUILD_TENSORFLOW_OPS=OFF \\\n\t-DBUILD_PYTORCH_OPS=OFF \\\n\t-DBUILD_UNIT_TESTS=OFF \\\n\t-DPYTHON_EXECUTABLE=$(which python3) \\\n# to avoid error when linking with cpp programs\n\t-DBUILD_SHARED_LIBS=ON \\\n\t-DGLIBCXX_USE_CXX11_ABI=ON \\\n\t.. && \\\n\tmake -j$(nproc) && \\\n\tmake install && \\\n\tmake pip-package -j$(nproc) && \\\n        cd ../../ && \\\n\tpip3 install --no-cache-dir Open3D/build/lib/python_package/pip_package/open3d-*.whl --verbose && \\\n\trm -rf Open3D\n\n# install librealsense\nRUN apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || \\\n\tapt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE && \\\n\tadd-apt-repository \"deb https://librealsense.intel.com/Debian/apt-repo $UBUNTU_DISTRO main\" -u \\\n && apt update && apt install -y --no-install-recommends \\\n\tlibrealsense2-utils \\\n\tlibrealsense2-dev \\\n\t&& \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists/*\n\nRUN apt update && \\\n\tapt-get install -y --no-install-recommends \\\n\tlibogg-dev \\\n        libtheora-dev \\\n\t&& \\\n\tapt-get clean && \\\n\trm -rf /var/lib/apt/lists/*\n\nCOPY ./launch.sh ./resetusb.sh ./resetrs.sh /\n\n# debug\nRUN apt update && apt-get install -y --no-install-recommends gdb && rm -rf /var/lib/apt/lists/*;\n\n# setup for display\nENV USERNAME developer\n\n### replace 1000 with your user/group id\nARG UID=1000\nRUN useradd -m $USERNAME && \\\n        echo \"$USERNAME:$USERNAME\" | chpasswd && \\\n        usermod --shell /bin/bash $USERNAME && \\\n\tusermod -aG sudo $USERNAME && \\\n        mkdir -p /etc/sudoers.d/ && \\\n        echo \"$USERNAME ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/$USERNAME && \\\n        chmod 0440 /etc/sudoers.d/$USERNAME && \\\n        usermod  --uid $UID $USERNAME && \\\n        groupmod --gid $UID $USERNAME\n# on jetson, add user to video group to use CUDA\nRUN usermod -aG video $USERNAME\n\nUSER $USERNAME\n\nENV HOME /home/$USERNAME\nRUN mkdir -p $HOME/people_ws/src\nWORKDIR $HOME/people_ws\n"
}