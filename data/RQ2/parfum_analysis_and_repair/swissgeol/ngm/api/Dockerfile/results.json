{
  "startTime": 1674256105025,
  "endTime": 1674256105615,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 60
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# local dev and dev/int/prod images are separate because they\n# are built using a different and incompatible mode (default vs release)\n\nFROM rust:1.60 AS builder\nRUN apt-get update && apt-get install --no-install-recommends -y musl-tools musl-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN rustup target add x86_64-unknown-linux-musl\nRUN rustup component add clippy rustfmt\n\n\nWORKDIR /app\n\n# First we handle fetching and building our dependencies\n# This rarely changes so is done once and for all\n# Cargo needs a stub entry point otherwise it fails\nCOPY Cargo.toml Cargo.lock ./\nRUN mkdir src; echo \"fn main() {}\" > src/main.rs\nRUN cargo fetch --target x86_64-unknown-linux-musl\n\nENV SQLX_OFFLINE=true\nRUN cargo build --offline --target x86_64-unknown-linux-musl --release\n\n# Then we copy every files, and detect linting / formating errors\n# This is only detection, fixing the errors should be done outside docker\n# We handle this section in offline mode to avoid unecessary and terribly long crates index update\nCOPY ./ .\n\nRUN cargo fmt --all -- --check\n\n# we don't care about linting dependencies, but clippy still does so despite our use\n# of --package and --no-deps flags\n# this is relatively fast so not a blocker\nRUN cargo clippy --package api --target x86_64-unknown-linux-musl --tests --examples --offline --release -- -D warnings  --no-deps\n\n# The tests actually requires a live DB so it must be run after the image is built\n# See \"make acceptance\"\n\n# We build the app\nRUN cargo build --target x86_64-unknown-linux-musl --release --offline\n\n\n## The final image is quite small and almost minimal\nFROM alpine:3.15\n\nRUN apk add --no-cache util-linux\n\n# Import from builder.\nCOPY --from=builder /etc/passwd /etc/passwd\nCOPY --from=builder /etc/group /etc/group\n\nWORKDIR /app\n\n# Create appuser\nENV USER=appuser\nENV UID=10001\n\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    \"${USER}\"\n\n# Copy the app (we assume the musl libc from alpine is available and compatible)\nCOPY --from=builder /app/target/x86_64-unknown-linux-musl/release/api ./\n\nUSER 10001\nCMD [\"/app/api\"]\n"
}