{
  "startTime": 1674253687827,
  "endTime": 1674253689973,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 79,
        "lineEnd": 96,
        "columnStart": 5,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 184,
        "lineEnd": 185,
        "columnStart": 5,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 201,
        "lineEnd": 202,
        "columnStart": 5,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#== Ubuntu xenial is 16.04, i.e. FROM ubuntu:16.04\n# Find latest images at https://hub.docker.com/r/library/ubuntu/\n# Layer size: big: ~130 MB\n\nFROM ubuntu:xenial-20191024\nENV UBUNTU_FLAVOR=\"xenial\" \\\n    UBUNTU_DATE=\"20191024\"\nARG UBUNTU_MIRROR=http://archive.ubuntu.com/ubuntu\n\n#== Ubuntu flavors - common\nRUN  echo \"deb ${UBUNTU_MIRROR} ${UBUNTU_FLAVOR} main universe\\n\" > /etc/apt/sources.list \\\n  && echo \"deb ${UBUNTU_MIRROR} ${UBUNTU_FLAVOR}-updates main universe\\n\" >> /etc/apt/sources.list \\\n  && echo \"deb ${UBUNTU_MIRROR} ${UBUNTU_FLAVOR}-security main universe\\n\" >> /etc/apt/sources.list\n\nLABEL maintainer \"Team EP <diemol+team-ep@gmail.com>\"\n\n# No interactive frontend during docker build\nENV DEBIAN_FRONTEND=noninteractive \\\n    DEBCONF_NONINTERACTIVE_SEEN=true\n\n# http://askubuntu.com/a/235911/134645\n# Remove with: sudo apt-key del 2EA8F35793D8809A\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 2EA8F35793D8809A \\\n  && apt-key update -qqy\n# Remove with: sudo apt-key del 40976EAF437D05B5\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5 \\\n  && apt-key update -qqy\n# Remove with: sudo apt-key del 3B4FE6ACC0B21F32\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32 \\\n  && apt-key update -qqy\n# Remove with: sudo apt-key del A2F683C52980AECF\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2F683C52980AECF \\\n  && apt-key update -qqy\n\n#========================\n# Miscellaneous packages\n#========================\n# libltdl7        0.3 MB\n#   allows to run docker alongside docker\n# netcat-openbsd  0.5 MB\n#   inlcues `nc` an arbitrary TCP and UDP connections and listens\n# pwgen           0.4 MB\n#   generates random, meaningless but pronounceable passwords\n# bc              0.5 MB\n#   An arbitrary precision calculator language\n# unzip           0.7 MB\n#   uncompress zip files\n# bzip2           1.29 MB\n#   uncompress bzip files\n# apt-utils       1.0 MB\n#   commandline utilities related to package management with APT\n# net-tools       0.8 MB\n#   arp, hostname, ifconfig, netstat, route, plipconfig, iptunnel\n# jq              1.1 MB\n#   jq is like sed for JSON data, you can use it to slice and filter and map\n# sudo            1.3 MB\n#   sudo binary\n# psmisc          1.445 MB\n#   fuser – identifies what processes are using files.\n#   killall – kills a process by its name, similar to a pkill Unices.\n#   pstree – Shows currently running processes in a tree format.\n#   peekfd – Peek at file descriptors of running processes.\n# iproute2        2.971 MB\n#   to use `ip` command\n# iputils-ping    3.7 MB\n#   ping, ping6 - send ICMP ECHO_REQUEST to network hosts\n# dbus-x11        4.6 MB\n#   is needed to avoid http://askubuntu.com/q/237893/134645\n# wget            7.3 MB\n#   The non-interactive network downloader\n# curl             17 MB (real +diff when with wget: 7 MB)\n#   transfer URL data using various Internet protocols\n# apache2-utils\n#   utility programs for webservers, needed to use htpasswd when the grid\n#   should be protected\n#\n# Layer size: medium: 33.3 MB\n# Layer size: medium: 31.4 MB (with --no-install-recommends)\nRUN apt-get -qqy update \\\n  && apt-get -qqy --no-install-recommends install \\\n    libltdl7 \\\n    netcat-openbsd \\\n    pwgen \\\n    bc \\\n    unzip \\\n    bzip2 \\\n    apt-utils \\\n    net-tools \\\n    jq \\\n    sudo \\\n    psmisc \\\n    iproute2 \\\n    iputils-ping \\\n    dbus-x11 \\\n    wget \\\n    curl \\\n    apache2-utils \\\n  && apt-get -qyy autoremove \\\n  && rm -rf /var/lib/apt/lists/*\n\n#######################\n# Nginx reverse proxy #\n#######################\n# We need this to expose dynamic created ports\n#  until https://github.com/docker/for-mac/issues/171\n# Layer size: medium: 44.84 MB (with --no-install-recommends)\n# Layer size: medium: 50.51 MB\nRUN apt-get -qqy update \\\n  && apt-get -qqy --no-install-recommends install \\\n    nginx-extras \\\n  && apt-get -qyy autoremove \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && nginx -v \\\n  && ln -s /usr/sbin/nginx /usr/bin/ \\\n  && /usr/bin/nginx -v \\\n  && chmod -R 777 /var/log/nginx \\\n  && chmod -R 777 /var/run/ \\\n  && chmod -R 777 /var/lib/nginx \\\n  && chmod -R 777 /usr/share/nginx/ \\\n  && chmod -R 777 /tmp\n\n#==============================\n# Locale and encoding settings\n#==============================\n# TODO: Allow to change instance language OS and Browser level\n#  see if this helps: https://github.com/rogaha/docker-desktop/blob/68d7ca9df47b98f3ba58184c951e49098024dc24/Dockerfile#L57\nENV LANG_WHICH en\nENV LANG_WHERE US\nENV ENCODING UTF-8\nENV LANGUAGE ${LANG_WHICH}_${LANG_WHERE}.${ENCODING}\nENV LANG ${LANGUAGE}\n# Layer size: small: ~9 MB\n# Layer size: small: ~9 MB MB (with --no-install-recommends)\nRUN apt-get -qqy update \\\n  && apt-get -qqy --no-install-recommends install \\\n    language-pack-en \\\n    tzdata \\\n    locales \\\n  && locale-gen ${LANGUAGE} \\\n  && dpkg-reconfigure --frontend noninteractive locales \\\n  && apt-get -qyy autoremove \\\n  && rm -rf /var/lib/apt/lists/*\n\n#===================\n# Timezone settings\n#===================\n# Full list at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n#  e.g. \"US/Pacific\" for Los Angeles, California, USA\n# e.g. ENV TZ \"US/Pacific\"\nENV TZ \"Europe/Berlin\"\n# Apply TimeZone\n# Layer size: tiny: 1.339 MB\nRUN echo \"Setting time zone to '${TZ}'\" \\\n  && echo \"${TZ}\" > /etc/timezone \\\n  && dpkg-reconfigure --frontend noninteractive tzdata\n\n#========================================\n# Add normal user with passwordless sudo\n#========================================\n# Layer size: tiny: 0.3 MB\nRUN useradd seluser \\\n         --shell /bin/bash  \\\n         --create-home \\\n  && usermod -a -G sudo seluser \\\n  && gpasswd -a seluser video \\\n  && echo 'seluser:secret' | chpasswd \\\n  && useradd extrauser \\\n         --shell /bin/bash  \\\n  && usermod -a -G sudo extrauser \\\n  && gpasswd -a extrauser video \\\n  && gpasswd -a extrauser seluser \\\n  && echo 'extrauser:secret' | chpasswd \\\n  && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers\n\n#==============================\n# Java8 - OpenJDK JRE headless\n# Minimal runtime used for executing non GUI Java programs\n#==============================\n# Regarding urandom see\n#  http://stackoverflow.com/q/26021181/511069\n#  https://github.com/SeleniumHQ/docker-selenium/issues/14#issuecomment-67414070\n# Layer size: big: 132.2 MB\n# Layer size: big: 132.2 MB (with --no-install-recommends)\nRUN apt-get -qqy update \\\n  && apt-get -qqy --no-install-recommends install \\\n    openjdk-8-jre-headless \\\n  && sed -i 's/securerandom.source=file:\\/dev\\/urandom/securerandom.source=file:\\/dev\\/.\\/urandom/g' \\\n       /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security \\\n  && sed -i 's/securerandom.source=file:\\/dev\\/random/securerandom.source=file:\\/dev\\/.\\/urandom/g' \\\n       /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security \\\n  && apt-get -qyy autoremove \\\n  && rm -rf /var/lib/apt/lists/*\n\n#==============================================\n# Java blocks until kernel have enough entropy\n# to generate the /dev/random seed\n#==============================================\n# See: SeleniumHQ/docker-selenium/issues/14\n# Layer size: tiny: 0.8 MB\nRUN apt-get -qqy update \\\n  && apt-key update -qqy \\\n  && apt-get -qqy --no-install-recommends install \\\n    haveged rng-tools \\\n  && service haveged start \\\n  && update-rc.d haveged defaults \\\n  && apt-get -qyy autoremove \\\n  && rm -rf /var/lib/apt/lists/*\n\n#==============================================================\n# Kubernetes doesn't need gosu or docker\n# So if you set a build arg of kubernetesSlimVersion=true then\n# the unneeded layers will be excluded\n#==============================================================\nARG kubernetesSlimVersion=false\n\n#==============================================================\n# Simple Go-based setuid+setgid+setgroups+exec\n# drop-in replacement to avoid using `su` as is buggy in docker\n#==============================================================\n# https://github.com/tianon/gosu\nRUN if [ \"${kubernetesSlimVersion}\" = \"false\" ]; then \\\n        wget -nv -O /usr/bin/gosu \\\n            \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64\" \\\n        && chmod +x /usr/bin/gosu \\\n        && gosu root bash -c 'whoami' | grep root; \\\n    else \\\n        echo \"Skipping gosu because building in kubernetes slim mode\"; \\\n    fi\n\n#=====================\n# Get docker binaries\n#=====================\n# Var `DOCKER` points to which binary to use at runtime\nENV DOCKER_HOST=\"unix:///var/run/docker.sock\" \\\n    DOCKER_BUCKET=\"download.docker.com\" \\\n    DOCKER=\"18.09.0\"\n\n#----------------------------\n# Docker 18.09 -- 15 MB\n#----------------------------\n# https://github.com/docker-library/docker/blob/master/18.03/Dockerfile\n# Note: Starting with 1.13, newer CLIs can talk to older daemons\nRUN if [ \"${kubernetesSlimVersion}\" = \"false\" ]; then \\\n        set -x \\\n        && DOCKER_VERSION=\"18.09.0\" \\\n        && curl -fSL \"https://${DOCKER_BUCKET}/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz\" \\\n                -o docker.tgz \\\n        && tar -xzvf docker.tgz \\\n        && mv docker/docker /usr/bin/docker-${DOCKER_VERSION} \\\n        && rm -rf docker/ && rm docker.tgz \\\n        && ln -s /usr/bin/docker-${DOCKER_VERSION} /usr/bin/docker \\\n        && docker-${DOCKER_VERSION} --version | grep \"${DOCKER_VERSION}\"; \\\n    else \\\n        echo \"Skipping adding Docker because of kubernetes slim mode\"; \\\n    fi\n\n\n# ------------------------#\n# Sauce Connect Tunneling #\n# ------------------------#\n# https://docs.saucelabs.com/reference/sauce-connect/\n# Layer size: medium: ~13 MB\nENV SAUCE_CONN_VER=\"sc-4.5.3-linux\" \\\n    SAUCE_CONN_DOWN_URL=\"https://saucelabs.com/downloads\"\nRUN cd /tmp \\\n  && wget -nv \"${SAUCE_CONN_DOWN_URL}/${SAUCE_CONN_VER}.tar.gz\" \\\n  && tar -zxf \"${SAUCE_CONN_VER}.tar.gz\" \\\n  && rm -rf /usr/local/${SAUCE_CONN_VER} \\\n  && mv ${SAUCE_CONN_VER} /usr/local \\\n  && rm \"${SAUCE_CONN_VER}.tar.gz\" \\\n  && ln -sf /usr/local/${SAUCE_CONN_VER}/bin/sc /usr/local/bin/sc \\\n  && which sc\n\n# -----------------------#\n# BrowserStack Tunneling #\n# -----------------------#\n# https://www.browserstack.com/local-testing\n# Layer size: medium: 16.02 MB\nENV BSTACK_TUNNEL_URL=\"https://www.browserstack.com/browserstack-local\" \\\n    BSTACK_TUNNEL_ZIP=\"BrowserStackLocal-linux-x64.zip\"\nRUN cd /tmp \\\n  && wget -nv \"${BSTACK_TUNNEL_URL}/${BSTACK_TUNNEL_ZIP}\" \\\n  && unzip \"${BSTACK_TUNNEL_ZIP}\" \\\n  && chmod 755 BrowserStackLocal \\\n  && rm \"${BSTACK_TUNNEL_ZIP}\" \\\n  && mv BrowserStackLocal /usr/local/bin \\\n  && which BrowserStackLocal\n\n# -----------------------#\n# TestingBot Tunneling #\n# -----------------------#\n# https://testingbot.com/support/other/tunnel\nENV TB_TUNNEL_URL=\"https://testingbot.com/tunnel/testingbot-tunnel.jar\"\n# If you need to disable testingBot at build time set a build arg of testingBotEnabled=false\nARG testingBotEnabled=true\nRUN if [ \"${testingBotEnabled}\" = \"true\" ]; then \\\n  cd /tmp \\\n  && wget -nv \"${TB_TUNNEL_URL}\" \\\n  && mv testingbot-tunnel.jar /usr/local/bin \\\n  && java -jar /usr/local/bin/testingbot-tunnel.jar --version; \\\n  else echo \"Testing Bot Disabled\"; \\\n  fi\n\n# ------------------------------#\n# CrossBrowserTesting Tunneling #\n# ------------------------------#\n# https://help.crossbrowsertesting.com/local-connection/general/local-tunnel-overview/\nENV CBT_TUNNEL_URL=\"https://github.com/crossbrowsertesting/cbt-tunnel-nodejs/releases/download/v0.9.9\" \\\n    CBT_TUNNEL_ZIP=\"cbt_tunnels-linux-x64.zip\"\nRUN cd /tmp \\\n  && wget -nv \"${CBT_TUNNEL_URL}/${CBT_TUNNEL_ZIP}\" \\\n  && unzip \"${CBT_TUNNEL_ZIP}\" \\\n  && rm \"${CBT_TUNNEL_ZIP}\" \\\n  && mv cbt_tunnels-linux-x64 /usr/local/bin \\\n  && which cbt_tunnels-linux-x64\n\n# -----------------------#\n# LambdaTest Tunneling #\n# -----------------------#\n# https://www.lambdatest.com/support/docs/testing-locally-hosted-pages/\n# Layer size: medium: ~16 MB\nENV LT_TUNNEL_URL=\"https://s3.amazonaws.com/lambda-tunnel\" \\\n    LT_TUNNEL_ZIP=\"LT_Linux.zip\"\nRUN cd /tmp \\\n  && wget -nv \"${LT_TUNNEL_URL}/${LT_TUNNEL_ZIP}\" \\\n  && unzip \"${LT_TUNNEL_ZIP}\" \\\n  && chmod 755 LT \\\n  && rm \"${LT_TUNNEL_ZIP}\" \\\n  && mv LT /usr/local/bin \\\n  && which LT\n\n\n#===================================================\n# Run the following commands as non-privileged user\n#===================================================\nUSER seluser\nWORKDIR /home/seluser\n\n\n#==========\n# Zalenium\n#==========\nEXPOSE 4444 4445\n\nENV ZAL_VER=\"${project.build.finalName}\" \\\n    BROWSER_STACK_TUNNEL_OPTS=\"-skipCheck -v -forcelocal\" \\\n    BROWSER_STACK_TUNNEL_ID=\"zalenium\" \\\n    BROWSER_STACK_TUNNEL=\"false\" \\\n    BROWSER_STACK_WAIT_TIMEOUT=\"2m\" \\\n    SAUCE_TUNNEL_MAX_RETRY_ATTEMPTS=\"1\" \\\n    SAUCE_TUNNEL_READY_FILE=\"/tmp/sauce-connect-ready\" \\\n    SAUCE_TUNNEL_ID=\"zalenium\" \\\n    SAUCE_TUNNEL_DOCTOR_TEST=\"false\" \\\n    SAUCE_WAIT_TIMEOUT=\"2m\" \\\n    SAUCE_TUNNEL=\"false\" \\\n    TESTINGBOT_TUNNEL_OPTS=\"--se-port 4447\" \\\n    TESTINGBOT_TUNNEL=\"false\" \\\n    TESTINGBOT_WAIT_TIMEOUT=\"2m\" \\\n    TESTINGBOT_TUNNEL_ID=\"zalenium\" \\\n    CBT_TUNNEL_ID=\"zalenium\" \\\n    CBT_TUNNEL=\"false\" \\\n    LT_TUNNEL_ID=\"zalenium\" \\\n    LT_TUNNEL=\"false\" \\\n    SELENIUM_HUB_PARAMS=\"\" \\\n    SELENIUM_NODE_PARAMS=\"\" \\\n    SELENIUM_CONTAINER_LABELS=\"\" \\\n    SELENIUM_WAIT_FOR_CONTAINER=\"true\"\n\nCOPY entry.sh log warn error /usr/bin/\nCOPY nginx.conf error.html /home/seluser/\nCOPY css/ /home/seluser/css/\nCOPY js/ /home/seluser/js/\nCOPY img/ /home/seluser/img/\nCOPY zalenium.sh \\\n LICENSE.md \\\n Analytics.md \\\n start-browserstack.sh \\\n wait-browserstack.sh \\\n start-saucelabs.sh \\\n wait-saucelabs.sh \\\n start-testingbot.sh \\\n wait-testingbot.sh \\\n start-cbt.sh \\\n wait-cbt.sh \\\n start-lambdatest.sh \\\n wait-lambdatest.sh \\\n dashboard_template.html \\\n zalando.ico \\\n logging_info.properties \\\n logging_debug.properties \\\n logback.xml \\\n /home/seluser/\nCOPY scm-source.json /\n\nRUN mkdir /home/seluser/videos\n\n#-----------------#\n# Fix perms again #\n#-----------------#\nRUN sudo chmod +x /home/seluser/zalenium.sh \\\n  && sudo chmod +x /home/seluser/start-browserstack.sh \\\n  && sudo chmod +x /home/seluser/wait-browserstack.sh \\\n  && sudo chmod +x /home/seluser/start-saucelabs.sh \\\n  && sudo chmod +x /home/seluser/wait-saucelabs.sh \\\n  && sudo chmod +x /home/seluser/start-testingbot.sh \\\n  && sudo chmod +x /home/seluser/wait-testingbot.sh \\\n  && sudo chmod +x /home/seluser/start-cbt.sh \\\n  && sudo chmod +x /home/seluser/wait-cbt.sh \\\n  && sudo chmod +x /home/seluser/start-lambdatest.sh \\\n  && sudo chmod +x /home/seluser/wait-lambdatest.sh \\\n  && sudo chmod +x /usr/bin/log \\\n  && sudo chmod +x /usr/bin/warn \\\n  && sudo chmod +x /usr/bin/error \\\n  && sudo chmod +x /usr/bin/entry.sh \\\n  && sudo chmod 777 /etc/passwd \\\n  && sudo chown -R seluser:seluser /home/seluser\n\n# Allows different operations in Openshift environments\n# https://docs.openshift.com/container-platform/latest/creating_images/guidelines.html#openshift-specific-guidelines\nRUN sudo chgrp -R 0 /home/seluser && \\\n    sudo chmod -R g=u /home/seluser && \\\n    sudo chmod -R u+x /home/seluser\n\nCOPY ${ZAL_VER}.jar /home/seluser/${ZAL_VER}.jar\n\n# IMPORTANT: Using the string form `CMD \"entry.sh\"` without\n# brackets [] causes Docker to run your process\n# And using `bash` which doesn’t handle signals properly\nENTRYPOINT [\"entry.sh\"]\n"
}