diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/zalando/spilo/postgres-appliance/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/zalando/spilo/postgres-appliance/Dockerfile/repaired.Dockerfile
index 4326c2b..484a28b 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/zalando/spilo/postgres-appliance/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/zalando/spilo/postgres-appliance/Dockerfile/repaired.Dockerfile
@@ -11,14 +11,14 @@ ENV WALG_VERSION=v2.0.0
 RUN export DEBIAN_FRONTEND=noninteractive \
     && echo 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";' > /etc/apt/apt.conf.d/01norecommend \
     && apt-get update \
-    && apt-get install -y curl ca-certificates \
+    && apt-get install --no-install-recommends -y curl ca-certificates \
     && if [ "$(dpkg --print-architecture)" != "amd64" ]; then \
-        apt-get install -y software-properties-common \
+        apt-get install --no-install-recommends -y software-properties-common \
         && add-apt-repository ppa:longsleep/golang-backports \
         && apt-get update \
-        && apt-get install -y golang-go liblzo2-dev brotli libsodium-dev git make cmake gcc \
+        && apt-get install --no-install-recommends -y golang-go liblzo2-dev brotli libsodium-dev git make cmake gcc \
         && go version; \
-    fi
+    fi && rm -rf /var/lib/apt/lists/*;
 
 RUN if [ "$(dpkg --print-architecture)" != "amd64" ]; then git clone -b $WALG_VERSION --recurse-submodules https://github.com/wal-g/wal-g.git; fi
 WORKDIR /wal-g
@@ -38,16 +38,16 @@ COPY  dependencies/debs /builddeps/
 RUN echo "shopt -s extglob\nrm /builddeps/!(*_$(dpkg --print-architecture).deb)" | bash -s
 ARG DEMO
 RUN mkdir /builddeps/wal-g \
-    && if [ "$DEMO" = "true" ]; then \
+    && if [ "$DEMO" = "true" ];then \
         rm -f /builddeps/*.deb \
         # Create an empty dummy deb file to prevent the `COPY --from=dependencies-builder /builddeps/*.deb /builddeps/` step from failing
         && touch /builddeps/dummy.deb; \
-    elif [ "$(dpkg --print-architecture)" != "amd64" ]; then \
+    elif [ "$(dpkg --print-architecture)" != "amd64" ];then \
         cp /wal-g/main/pg/wal-g /builddeps/wal-g/; \
     else \
-        # In order to speed up amd64 build we just download the binary from GH
+
         DISTRIB_RELEASE=$(sed -n 's/DISTRIB_RELEASE=//p' /etc/lsb-release) \
-        && curl -sL https://github.com/wal-g/wal-g/releases/download/$WALG_VERSION/wal-g-pg-ubuntu-$DISTRIB_RELEASE-amd64.tar.gz \
+        && curl -f -sL https://github.com/wal-g/wal-g/releases/download/$WALG_VERSION/wal-g-pg-ubuntu-$DISTRIB_RELEASE-amd64.tar.gz \
                 | tar -C /builddeps/wal-g -xz \
         && mv /builddeps/wal-g/wal-g-pg-ubuntu-$DISTRIB_RELEASE-amd64 /builddeps/wal-g/wal-g; \
     fi
@@ -62,7 +62,7 @@ RUN export DEBIAN_FRONTEND=noninteractive \
     && echo 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";' > /etc/apt/apt.conf.d/01norecommend \
     && apt-get update \
     && apt-get -y upgrade \
-    && apt-get install -y curl ca-certificates less locales jq vim-tiny gnupg1 cron runit dumb-init libcap2-bin rsync sysstat \
+    && apt-get install --no-install-recommends -y curl ca-certificates less locales jq vim-tiny gnupg1 cron runit dumb-init libcap2-bin rsync sysstat \
     && ln -s chpst /usr/bin/envdir \
     # Make it possible to use the following utilities without root (if container runs without "no-new-privileges:true")
     && setcap 'cap_sys_nice+ep' /usr/bin/chrt \
@@ -70,16 +70,15 @@ RUN export DEBIAN_FRONTEND=noninteractive \
     # Disable unwanted cron jobs
     && rm -fr /etc/cron.??* \
     && truncate --size 0 /etc/crontab \
-\
+
     && if [ "$DEMO" != "true" ]; then \
-        # Required for wal-e
-        apt-get install -y pv lzop \
+        apt-get install --no-install-recommends -y pv lzop \
         # install etcdctl
         && ETCDVERSION=3.3.27 \
-        && curl -L https://github.com/coreos/etcd/releases/download/v${ETCDVERSION}/etcd-v${ETCDVERSION}-linux-$(dpkg --print-architecture).tar.gz \
+        && curl -f -L https://github.com/coreos/etcd/releases/download/v${ETCDVERSION}/etcd-v${ETCDVERSION}-linux-$(dpkg --print-architecture).tar.gz \
                 | tar xz -C /bin --strip=1 --wildcards --no-anchored --no-same-owner etcdctl etcd; \
     fi \
-\
+
     # Cleanup all locales but en_US.UTF-8 and optionally specified in ADDITIONAL_LOCALES arg
     && find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \
     # Prepare find expression for locales
@@ -88,21 +87,21 @@ RUN export DEBIAN_FRONTEND=noninteractive \
         LOCALE_FIND_EXPR="$LOCALE_FIND_EXPR ! -name $loc"; \
     done \
     && find /usr/share/i18n/locales/ $LOCALE_FIND_EXPR -delete \
-\
+
     # Make sure we have the en_US.UTF-8 and all additional locales available
     && truncate --size 0 /usr/share/i18n/SUPPORTED \
     && for loc in en_US $ADDITIONAL_LOCALES; do \
         echo "$loc.UTF-8 UTF-8" >> /usr/share/i18n/SUPPORTED \
         && localedef -i $loc -c -f UTF-8 -A /usr/share/locale/locale.alias $loc.UTF-8; \
     done \
-\
+
     # Add PGDG repositories
     && DISTRIB_CODENAME=$(sed -n 's/DISTRIB_CODENAME=//p' /etc/lsb-release) \
     && for t in deb deb-src; do \
         echo "$t http://apt.postgresql.org/pub/repos/apt/ ${DISTRIB_CODENAME}-pgdg main" >> /etc/apt/sources.list.d/pgdg.list; \
     done \
-    && curl -s -o - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
-\
+    && curl -f -s -o - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
+
     # Clean up
     && apt-get purge -y libcap2-bin \
     && apt-get autoremove -y \
@@ -153,47 +152,47 @@ RUN export DEBIAN_FRONTEND=noninteractive \
         export DEB_PG_SUPPORTED_VERSIONS="$PGVERSION" \
         && WITH_PERL=false \
         && rm -f *.deb \
-        && apt-get install -y $BUILD_PACKAGES; \
+        && apt-get install --no-install-recommends -y $BUILD_PACKAGES; \
     else \
         BUILD_PACKAGES="$BUILD_PACKAGES zlib1g-dev libpam0g-dev libcurl4-openssl-dev libicu-dev python libc-ares-dev pandoc pkg-config" \
-        && apt-get install -y $BUILD_PACKAGES libcurl4 \
-\
+        && apt-get install --no-install-recommends -y $BUILD_PACKAGES libcurl4 \
+
         # install pam_oauth2.so
         && git clone -b $PAM_OAUTH2 --recurse-submodules https://github.com/CyberDem0n/pam-oauth2.git \
         && make -C pam-oauth2 install \
-\
+
         # prepare 3rd sources
         && git clone -b $PLPROFILER https://github.com/bigsql/plprofiler.git \
         && tar -xzf plantuner-${PLANTUNER_COMMIT}.tar.gz \
-        && curl -sL https://github.com/sdudoladov/pg_mon/archive/$PG_MON_COMMIT.tar.gz | tar xz \
-\
+        && curl -f -sL https://github.com/sdudoladov/pg_mon/archive/$PG_MON_COMMIT.tar.gz | tar xz \
+
         && for p in python3-keyring python3-docutils ieee-data; do \
             version=$(apt-cache show $p | sed -n 's/^Version: //p' | sort -rV | head -n 1) \
             && echo "Section: misc\nPriority: optional\nStandards-Version: 3.9.8\nPackage: $p\nVersion: $version\nDescription: $p" > $p \
             && equivs-build $p; \
-        done; \
+        done; rm plantuner-${PLANTUNER_COMMIT}.tar.gz \
     fi \
-\
+
     && if [ "$WITH_PERL" != "true" ]; then \
         version=$(apt-cache show perl | sed -n 's/^Version: //p' | sort -rV | head -n 1) \
         && echo "Section: misc\nPriority: optional\nStandards-Version: 3.9.8\nPackage: perl\nSection:perl\nMulti-Arch: allowed\nReplaces: perl-base\nVersion: $version\nDescription: perl" > perl \
         && equivs-build perl; \
     fi \
-\
+
     && if [ "$WITH_PERL" != "true" ] || [ "$DEMO" != "true" ]; then dpkg -i *.deb || apt-get -y -f install; fi \
-\
-    && curl -sL https://github.com/CyberDem0n/bg_mon/archive/$BG_MON_COMMIT.tar.gz | tar xz \
-    && curl -sL https://github.com/sdudoladov/pg_auth_mon/archive/$PG_AUTH_MON_COMMIT.tar.gz | tar xz \
-    && curl -sL https://github.com/cybertec-postgresql/pg_permissions/archive/$PG_PERMISSIONS_COMMIT.tar.gz | tar xz \
-    && curl -sL https://github.com/x4m/pg_tm_aux/archive/$PG_TM_AUX_COMMIT.tar.gz | tar xz \
+
+    && curl -f -sL https://github.com/CyberDem0n/bg_mon/archive/$BG_MON_COMMIT.tar.gz | tar xz \
+    && curl -f -sL https://github.com/sdudoladov/pg_auth_mon/archive/$PG_AUTH_MON_COMMIT.tar.gz | tar xz \
+    && curl -f -sL https://github.com/cybertec-postgresql/pg_permissions/archive/$PG_PERMISSIONS_COMMIT.tar.gz | tar xz \
+    && curl -f -sL https://github.com/x4m/pg_tm_aux/archive/$PG_TM_AUX_COMMIT.tar.gz | tar xz \
     && git clone -b $SET_USER https://github.com/pgaudit/set_user.git \
     && git clone https://github.com/timescale/timescaledb.git \
-\
-    && apt-get install -y postgresql-common libevent-2.1 libevent-pthreads-2.1 brotli libbrotli1 python3.6 python3-psycopg2 \
-\
+
+    && apt-get install --no-install-recommends -y postgresql-common libevent-2.1 libevent-pthreads-2.1 brotli libbrotli1 python3.6 python3-psycopg2 \
+
     # forbid creation of a main cluster when package is installed
     && sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf \
-\
+
     && for version in $DEB_PG_SUPPORTED_VERSIONS; do \
             sed -i "s/ main.*$/ main $version/g" /etc/apt/sources.list.d/pgdg.list \
             && apt-get update \
@@ -230,12 +229,12 @@ RUN export DEBIAN_FRONTEND=noninteractive \
                 fi; \
             fi \
 \
-            # Install PostgreSQL binaries, contrib, plproxy and multiple pl's
-            && apt-get install --allow-downgrades -y postgresql-contrib-${version} \
+            # Install PostgreSQL binaries, contrib, plproxy and multiple pl's \
+            && apt-get install --no-install-recommends --allow-downgrades -y postgresql-contrib-${version} \
                     postgresql-plpython3-${version} postgresql-server-dev-${version} \
                     postgresql-${version}-cron postgresql-${version}-pgq3 \
                     postgresql-${version}-pg-stat-kcache $EXTRAS \
-\
+
             # Install 3rd party stuff
             && cd timescaledb \
             && for v in $TIMESCALEDB; do \
@@ -251,7 +250,7 @@ RUN export DEBIAN_FRONTEND=noninteractive \
                 && git clean -f -d; \
             done \
             && cd .. \
-\
+
             && if [ "$DEMO" != "true" ]; then \
                 EXTRA_EXTENSIONS="plantuner-${PLANTUNER_COMMIT} plprofiler" \
                 && if [ ${version%.*} -ge 10 ]; then \
@@ -260,31 +259,31 @@ RUN export DEBIAN_FRONTEND=noninteractive \
             else \
                 EXTRA_EXTENSIONS=""; \
             fi \
-\
+
             && for n in bg_mon-${BG_MON_COMMIT} pg_auth_mon-${PG_AUTH_MON_COMMIT} set_user pg_permissions-${PG_PERMISSIONS_COMMIT} pg_tm_aux-${PG_TM_AUX_COMMIT} $EXTRA_EXTENSIONS; do \
                 make -C $n USE_PGXS=1 clean install-strip; \
             done; \
     done \
-\
-    && apt-get install -y skytools3-ticker pgbouncer \
-\
+
+    && apt-get install --no-install-recommends -y skytools3-ticker pgbouncer \
+
     && sed -i "s/ main.*$/ main/g" /etc/apt/sources.list.d/pgdg.list \
     && apt-get update \
-    && apt-get install -y postgresql postgresql-server-dev-all postgresql-all libpq-dev \
+    && apt-get install --no-install-recommends -y postgresql postgresql-server-dev-all postgresql-all libpq-dev \
     && for version in $DEB_PG_SUPPORTED_VERSIONS; do \
-        apt-get install -y postgresql-server-dev-${version}; \
+        apt-get install --no-install-recommends -y postgresql-server-dev-${version}; \
     done \
-\
+
     && if [ "$DEMO" != "true" ]; then \
         for version in $DEB_PG_SUPPORTED_VERSIONS; do \
-            # due to dependency issues partman has to be installed separately
-            apt-get install -y postgresql-${version}-partman \
+
+            apt-get install --no-install-recommends -y postgresql-${version}-partman \
             # create postgis symlinks to make it possible to perform update
             && ln -s postgis-${POSTGIS_VERSION%.*}.so \
                 /usr/lib/postgresql/${version}/lib/postgis-2.5.so; \
         done; \
     fi \
-\
+
     # build and install missing packages
     && for pkg in pgextwlist; do \
         apt-get source postgresql-13-${pkg} \
@@ -305,16 +304,16 @@ RUN export DEBIAN_FRONTEND=noninteractive \
             done; \
         done; \
     done \
-\
+
     # make it possible for cron to work without root
     && gcc -s -shared -fPIC -o /usr/local/lib/cron_unprivileged.so cron_unprivileged.c \
-\
+
     # Remove unnecessary packages
     && apt-get purge -y ${BUILD_PACKAGES} postgresql postgresql-all postgresql-server-dev-* libpq-dev=* libmagic1 bsdmainutils \
     && apt-get autoremove -y \
     && apt-get clean \
     && dpkg -l | grep '^rc' | awk '{print $2}' | xargs apt-get purge -y \
-\
+
     # Try to minimize size by creating symlinks instead of duplicate files
     && if [ "$DEMO" != "true" ]; then \
         cd /usr/lib/postgresql/$PGVERSION/bin \
@@ -376,7 +375,7 @@ RUN export DEBIAN_FRONTEND=noninteractive \
         done \
         && set -x; \
     fi \
-\
+
     # Clean up
     && rm -rf /var/lib/apt/lists/* \
             /var/cache/debconf/* \
@@ -415,35 +414,35 @@ RUN export DEBIAN_FRONTEND=noninteractive \
             | grep -Ev '^python3-(sphinx|etcd|consul|kazoo|kubernetes)' \
             | xargs apt-get install -y ${BUILD_PACKAGES} \
                         python3-pystache python3-requests \
-\
-    && pip3 install setuptools \
-\
+
+    && pip3 install --no-cache-dir setuptools \
+
     && if [ "$DEMO" != "true" ]; then \
         EXTRAS=",etcd,consul,zookeeper,aws" \
-        && apt-get install -y python3-etcd python3-consul python3-kazoo python3-meld3 \
+        && apt-get install --no-install-recommends -y python3-etcd python3-consul python3-kazoo python3-meld3 \
                         python3-boto python3-gevent python3-greenlet python3-cachetools \
                         python3-rsa python3-pyasn1-modules python3-swiftclient python3-cffi \
-\
+
         && find /usr/share/python-babel-localedata/locale-data -type f ! -name 'en_US*.dat' -delete \
-\
-        && pip3 install filechunkio wal-e[aws,google,swift]==$WALE_VERSION google-crc32c==1.1.2 'protobuf<4.21.0' \
+
+        && pip3 install --no-cache-dir filechunkio wal-e[aws,google,swift]==$WALE_VERSION google-crc32c==1.1.2 'protobuf<4.21.0' \
                 'git+https://github.com/zalando/pg_view.git@master#egg=pg-view' \
-\
+
         # Non-exclusive backups
-        && curl -sL https://github.com/CyberDem0n/wal-e/commit/dad4d53969b93c56f1eaa5243ffa8e9051fd7eb7.diff \
+        && curl -f -sL https://github.com/CyberDem0n/wal-e/commit/dad4d53969b93c56f1eaa5243ffa8e9051fd7eb7.diff \
                 | patch -d /usr/local/lib/python3.6/dist-packages/wal_e -p2 \
         # WALE_DISABLE_S3_SSE support
-        && curl -sL https://github.com/CyberDem0n/wal-e/commit/0309317d33d252fcd968b3eb97313a9fdf022c65.diff \
+        && curl -f -sL https://github.com/CyberDem0n/wal-e/commit/0309317d33d252fcd968b3eb97313a9fdf022c65.diff \
                 | patch -d /usr/local/lib/python3.6/dist-packages/wal_e -p2 \
         # Revert https://github.com/wal-e/wal-e/commit/485d834a18c9b0d97115d95f89e16bdc564e9a18, it affects S3 performance
-        && curl -sL https://github.com/wal-e/wal-e/commit/485d834a18c9b0d97115d95f89e16bdc564e9a18.diff \
+        && curl -f -sL https://github.com/wal-e/wal-e/commit/485d834a18c9b0d97115d95f89e16bdc564e9a18.diff \
                 | patch -d /usr/local/lib/python3.6/dist-packages/wal_e -Rp2 \
         # https://github.com/wal-e/wal-e/issues/318
         && sed -i 's/^\(    for i in range(0,\) num_retries):.*/\1 100):/g' \
                     /usr/lib/python3/dist-packages/boto/utils.py; \
     fi \
-    && pip3 install patroni[kubernetes$EXTRAS]==$PATRONIVERSION \
-\
+    && pip3 install --no-cache-dir patroni[kubernetes$EXTRAS]==$PATRONIVERSION \
+
     && for d in /usr/local/lib/python3.6 /usr/lib/python3; do \
         cd $d/dist-packages \
         && find . -type d -name tests | xargs rm -fr \
@@ -452,7 +451,7 @@ RUN export DEBIAN_FRONTEND=noninteractive \
     && find . -type f -name 'unittest_*.py*' -delete \
     && find . -type f -name '*_test.py' -delete \
     && find . -type f -name '*_test.cpython*.pyc' -delete \
-\
+
     # Clean up
     && apt-get purge -y ${BUILD_PACKAGES} \
     && apt-get autoremove -y \
@@ -470,7 +469,7 @@ RUN export DEBIAN_FRONTEND=noninteractive \
 RUN set -ex \
     && if [ "$COMPRESS" = "true" ]; then \
         apt-get update \
-        && apt-get install -y busybox xz-utils \
+        && apt-get install --no-install-recommends -y busybox xz-utils \
         && apt-get clean \
         && rm -rf /var/lib/apt/lists/* /var/cache/debconf/* /usr/share/doc /usr/share/man /etc/rc?.d /etc/systemd \
         && ln -snf busybox /bin/sh \
@@ -485,7 +484,7 @@ RUN set -ex \
         && rm -fr /usr/local/lib/python* \
         && /bin/busybox sh -c "(find $save_dirs -not -type d && cat /exclude /exclude && echo exclude) | sort | uniq -u | xargs /bin/busybox rm" \
         && /bin/busybox --install -s \
-        && /bin/busybox sh -c "find $save_dirs -type d -depth -exec rmdir -p {} \; 2> /dev/null"; \
+        && /bin/busybox sh -c "find $save_dirs -type d -depth -exec rmdir -p {} \; 2> /dev/null"; rm a.tar.xz \
     fi
 
 FROM scratch as builder-true