{
  "startTime": 1674256014860,
  "endTime": 1674256017545,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 11,
        "columnEnd": 128
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 11,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 11,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 7,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 7,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 432,
        "lineEnd": 432,
        "columnStart": 11,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 435,
        "lineEnd": 435,
        "columnStart": 11,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 438,
        "lineEnd": 438,
        "columnStart": 11,
        "columnEnd": 103
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 418,
        "lineEnd": 418,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 428,
        "lineEnd": 429,
        "columnStart": 11,
        "columnEnd": 79
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 444,
        "lineEnd": 444,
        "columnStart": 7,
        "columnEnd": 63
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 11,
        "columnEnd": 56
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 483,
        "lineEnd": 483,
        "columnStart": 11,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 8,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 11,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 125
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 8,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 11,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 11,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 191,
        "lineEnd": 191,
        "columnStart": 7,
        "columnEnd": 123
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 233,
        "lineEnd": 236,
        "columnStart": 15,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 272,
        "lineEnd": 272,
        "columnStart": 7,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 274,
        "lineEnd": 274,
        "columnStart": 8,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 280,
        "lineEnd": 280,
        "columnStart": 12,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 422,
        "lineEnd": 424,
        "columnStart": 11,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 472,
        "lineEnd": 472,
        "columnStart": 11,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 8,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 11,
        "columnEnd": 91
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=ubuntu:18.04\nARG PGVERSION=14\nARG TIMESCALEDB=\"1.7.5 2.3.1 2.7.0\"\nARG DEMO=false\nARG COMPRESS=false\n\nFROM $BASE_IMAGE as dependencies-builder\n\nENV WALG_VERSION=v2.0.0\n# We want to build ourself non-amd64 wal-g in one of the build steps\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && echo 'APT::Install-Recommends \"0\";\\nAPT::Install-Suggests \"0\";' > /etc/apt/apt.conf.d/01norecommend \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y curl ca-certificates \\\n    && if [ \"$(dpkg --print-architecture)\" != \"amd64\" ]; then \\\n        apt-get install --no-install-recommends -y software-properties-common \\\n        && add-apt-repository ppa:longsleep/golang-backports \\\n        && apt-get update \\\n        && apt-get install --no-install-recommends -y golang-go liblzo2-dev brotli libsodium-dev git make cmake gcc \\\n        && go version; \\\n    fi && rm -rf /var/lib/apt/lists/*;\n\nRUN if [ \"$(dpkg --print-architecture)\" != \"amd64\" ]; then git clone -b $WALG_VERSION --recurse-submodules https://github.com/wal-g/wal-g.git; fi\nWORKDIR /wal-g\nRUN if [ \"$(dpkg --print-architecture)\" != \"amd64\" ]; then go get -v -t -d ./... && go mod vendor; fi\nRUN if [ \"$(dpkg --print-architecture)\" != \"amd64\" ]; then export MAKEFLAGS=\"-j $(grep -c ^processor /proc/cpuinfo)\" && bash link_brotli.sh; fi\nRUN if [ \"$(dpkg --print-architecture)\" != \"amd64\" ]; then export MAKEFLAGS=\"-j $(grep -c ^processor /proc/cpuinfo)\" && bash link_libsodium.sh; fi\nRUN if [ \"$(dpkg --print-architecture)\" != \"amd64\" ]; then \\\n        if grep -q DISTRIB_RELEASE=18.04 /etc/lsb-release; then export CGO_LDFLAGS=-no-pie; fi \\\n        && export USE_LIBSODIUM=1 \\\n        && export USE_LZO=1 \\\n        && export MAKEFLAGS=\"-j $(grep -c ^processor /proc/cpuinfo)\" \\\n        && make pg_build; \\\n    fi\n\nCOPY  dependencies/debs /builddeps/\n# We want to remove all libgdal20 debs except one that is for current architecture.\nRUN echo \"shopt -s extglob\\nrm /builddeps/!(*_$(dpkg --print-architecture).deb)\" | bash -s\nARG DEMO\nRUN mkdir /builddeps/wal-g \\\n    && if [ \"$DEMO\" = \"true\" ];then \\\n        rm -f /builddeps/*.deb \\\n        # Create an empty dummy deb file to prevent the `COPY --from=dependencies-builder /builddeps/*.deb /builddeps/` step from failing\n        && touch /builddeps/dummy.deb; \\\n    elif [ \"$(dpkg --print-architecture)\" != \"amd64\" ];then \\\n        cp /wal-g/main/pg/wal-g /builddeps/wal-g/; \\\n    else \\\n\n        DISTRIB_RELEASE=$(sed -n 's/DISTRIB_RELEASE=//p' /etc/lsb-release) \\\n        && curl -f -sL https://github.com/wal-g/wal-g/releases/download/$WALG_VERSION/wal-g-pg-ubuntu-$DISTRIB_RELEASE-amd64.tar.gz \\\n                | tar -C /builddeps/wal-g -xz \\\n        && mv /builddeps/wal-g/wal-g-pg-ubuntu-$DISTRIB_RELEASE-amd64 /builddeps/wal-g/wal-g; \\\n    fi\n\n\nFROM $BASE_IMAGE as builder-false\n\nARG DEMO\nARG ADDITIONAL_LOCALES=\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && echo 'APT::Install-Recommends \"0\";\\nAPT::Install-Suggests \"0\";' > /etc/apt/apt.conf.d/01norecommend \\\n    && apt-get update \\\n    && apt-get -y upgrade \\\n    && apt-get install --no-install-recommends -y curl ca-certificates less locales jq vim-tiny gnupg1 cron runit dumb-init libcap2-bin rsync sysstat \\\n    && ln -s chpst /usr/bin/envdir \\\n    # Make it possible to use the following utilities without root (if container runs without \"no-new-privileges:true\")\n    && setcap 'cap_sys_nice+ep' /usr/bin/chrt \\\n    && setcap 'cap_sys_nice+ep' /usr/bin/renice \\\n    # Disable unwanted cron jobs\n    && rm -fr /etc/cron.??* \\\n    && truncate --size 0 /etc/crontab \\\n\n    && if [ \"$DEMO\" != \"true\" ]; then \\\n        apt-get install --no-install-recommends -y pv lzop \\\n        # install etcdctl\n        && ETCDVERSION=3.3.27 \\\n        && curl -f -L https://github.com/coreos/etcd/releases/download/v${ETCDVERSION}/etcd-v${ETCDVERSION}-linux-$(dpkg --print-architecture).tar.gz \\\n                | tar xz -C /bin --strip=1 --wildcards --no-anchored --no-same-owner etcdctl etcd; \\\n    fi \\\n\n    # Cleanup all locales but en_US.UTF-8 and optionally specified in ADDITIONAL_LOCALES arg\n    && find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \\\n    # Prepare find expression for locales\n    && LOCALE_FIND_EXPR=\"-type f\" \\\n    && for loc in en_US en_GB $ADDITIONAL_LOCALES \"i18n*\" iso14651_t1 iso14651_t1_common \"translit_*\"; do \\\n        LOCALE_FIND_EXPR=\"$LOCALE_FIND_EXPR ! -name $loc\"; \\\n    done \\\n    && find /usr/share/i18n/locales/ $LOCALE_FIND_EXPR -delete \\\n\n    # Make sure we have the en_US.UTF-8 and all additional locales available\n    && truncate --size 0 /usr/share/i18n/SUPPORTED \\\n    && for loc in en_US $ADDITIONAL_LOCALES; do \\\n        echo \"$loc.UTF-8 UTF-8\" >> /usr/share/i18n/SUPPORTED \\\n        && localedef -i $loc -c -f UTF-8 -A /usr/share/locale/locale.alias $loc.UTF-8; \\\n    done \\\n\n    # Add PGDG repositories\n    && DISTRIB_CODENAME=$(sed -n 's/DISTRIB_CODENAME=//p' /etc/lsb-release) \\\n    && for t in deb deb-src; do \\\n        echo \"$t http://apt.postgresql.org/pub/repos/apt/ ${DISTRIB_CODENAME}-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list; \\\n    done \\\n    && curl -f -s -o - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n\n    # Clean up\n    && apt-get purge -y libcap2-bin \\\n    && apt-get autoremove -y \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n            /var/cache/debconf/* \\\n            /usr/share/doc \\\n            /usr/share/man \\\n            /usr/share/locale/?? \\\n            /usr/share/locale/??_?? \\\n    && find /var/log -type f -exec truncate --size 0 {} \\;\n\nCOPY cron_unprivileged.c dependencies/src /builddeps/\nCOPY --from=dependencies-builder /builddeps/*.deb /builddeps/\n\nARG PGVERSION\nARG TIMESCALEDB\nARG TIMESCALEDB_APACHE_ONLY=true\nARG DEMO\nARG COMPRESS\nARG PGOLDVERSIONS=\"9.6 10 11 12 13\"\nARG WITH_PERL=false\n\nARG DEB_PG_SUPPORTED_VERSIONS=\"$PGOLDVERSIONS $PGVERSION\"\n\n# Install PostgreSQL, extensions and contribs\nENV POSTGIS_VERSION=3.2 \\\n    POSTGIS_LEGACY=3.2 \\\n    BG_MON_COMMIT=8de3b0afb4e3337168b77d26ad4e0c5c89638f53 \\\n    PG_AUTH_MON_COMMIT=437435b4e2de32a820e86973f6934ec849a768e0 \\\n    PG_MON_COMMIT=54fbdcc3cfe7e2a626bd96dda644d9a0c6866b58 \\\n    SET_USER=REL3_0_0 \\\n    PLPROFILER=REL4_1 \\\n    PAM_OAUTH2=v1.0.1 \\\n    PLANTUNER_COMMIT=800d81bc85da64ff3ef66e12aed1d4e1e54fc006 \\\n    PG_PERMISSIONS_COMMIT=314b9359e3d77c0b2ef7dbbde97fa4be80e31925 \\\n    PG_TM_AUX_COMMIT=6c012d38a4c1b0ba4a36952d60b0ce3a22ac9c3d\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && export MAKEFLAGS=\"-j $(grep -c ^processor /proc/cpuinfo)\" \\\n    && set -ex \\\n    && sed -i 's/^#\\s*\\(deb.*universe\\)$/\\1/g' /etc/apt/sources.list \\\n    && apt-get update \\\n    && cd /builddeps \\\n\\\n    && BUILD_PACKAGES=\"devscripts equivs build-essential fakeroot debhelper git gcc libc6-dev make cmake libevent-dev libbrotli-dev libssl-dev libkrb5-dev\" \\\n    && if [ \"$DEMO\" = \"true\" ]; then \\\n        export DEB_PG_SUPPORTED_VERSIONS=\"$PGVERSION\" \\\n        && WITH_PERL=false \\\n        && rm -f *.deb \\\n        && apt-get install --no-install-recommends -y $BUILD_PACKAGES; \\\n    else \\\n        BUILD_PACKAGES=\"$BUILD_PACKAGES zlib1g-dev libpam0g-dev libcurl4-openssl-dev libicu-dev python libc-ares-dev pandoc pkg-config\" \\\n        && apt-get install --no-install-recommends -y $BUILD_PACKAGES libcurl4 \\\n\n        # install pam_oauth2.so\n        && git clone -b $PAM_OAUTH2 --recurse-submodules https://github.com/CyberDem0n/pam-oauth2.git \\\n        && make -C pam-oauth2 install \\\n\n        # prepare 3rd sources\n        && git clone -b $PLPROFILER https://github.com/bigsql/plprofiler.git \\\n        && tar -xzf plantuner-${PLANTUNER_COMMIT}.tar.gz \\\n        && curl -f -sL https://github.com/sdudoladov/pg_mon/archive/$PG_MON_COMMIT.tar.gz | tar xz \\\n\n        && for p in python3-keyring python3-docutils ieee-data; do \\\n            version=$(apt-cache show $p | sed -n 's/^Version: //p' | sort -rV | head -n 1) \\\n            && echo \"Section: misc\\nPriority: optional\\nStandards-Version: 3.9.8\\nPackage: $p\\nVersion: $version\\nDescription: $p\" > $p \\\n            && equivs-build $p; \\\n        done; rm plantuner-${PLANTUNER_COMMIT}.tar.gz \\\n    fi \\\n\n    && if [ \"$WITH_PERL\" != \"true\" ]; then \\\n        version=$(apt-cache show perl | sed -n 's/^Version: //p' | sort -rV | head -n 1) \\\n        && echo \"Section: misc\\nPriority: optional\\nStandards-Version: 3.9.8\\nPackage: perl\\nSection:perl\\nMulti-Arch: allowed\\nReplaces: perl-base\\nVersion: $version\\nDescription: perl\" > perl \\\n        && equivs-build perl; \\\n    fi \\\n\n    && if [ \"$WITH_PERL\" != \"true\" ] || [ \"$DEMO\" != \"true\" ]; then dpkg -i *.deb || apt-get -y -f install; fi \\\n\n    && curl -f -sL https://github.com/CyberDem0n/bg_mon/archive/$BG_MON_COMMIT.tar.gz | tar xz \\\n    && curl -f -sL https://github.com/sdudoladov/pg_auth_mon/archive/$PG_AUTH_MON_COMMIT.tar.gz | tar xz \\\n    && curl -f -sL https://github.com/cybertec-postgresql/pg_permissions/archive/$PG_PERMISSIONS_COMMIT.tar.gz | tar xz \\\n    && curl -f -sL https://github.com/x4m/pg_tm_aux/archive/$PG_TM_AUX_COMMIT.tar.gz | tar xz \\\n    && git clone -b $SET_USER https://github.com/pgaudit/set_user.git \\\n    && git clone https://github.com/timescale/timescaledb.git \\\n\n    && apt-get install --no-install-recommends -y postgresql-common libevent-2.1 libevent-pthreads-2.1 brotli libbrotli1 python3.6 python3-psycopg2 \\\n\n    # forbid creation of a main cluster when package is installed\n    && sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \\\n\n    && for version in $DEB_PG_SUPPORTED_VERSIONS; do \\\n            sed -i \"s/ main.*$/ main $version/g\" /etc/apt/sources.list.d/pgdg.list \\\n            && apt-get update \\\n\\\n            && if [ \"$DEMO\" != \"true\" ]; then \\\n                EXTRAS=\"postgresql-pltcl-${version} \\\n                        postgresql-${version}-dirtyread \\\n                        postgresql-${version}-extra-window-functions \\\n                        postgresql-${version}-first-last-agg \\\n                        postgresql-${version}-hll \\\n                        postgresql-${version}-hypopg \\\n                        postgresql-${version}-pgaudit \\\n                        postgresql-${version}-pg-checksums \\\n                        postgresql-${version}-pgl-ddl-deploy \\\n                        postgresql-${version}-pglogical \\\n                        postgresql-${version}-pglogical-ticker \\\n                        postgresql-${version}-pgq-node \\\n                        postgresql-${version}-pldebugger \\\n                        postgresql-${version}-pllua \\\n                        postgresql-${version}-plpgsql-check \\\n                        postgresql-${version}-plproxy \\\n                        postgresql-${version}-postgis-${POSTGIS_VERSION%.*} \\\n                        postgresql-${version}-postgis-${POSTGIS_VERSION%.*}-scripts \\\n                        postgresql-${version}-repack \\\n                        postgresql-${version}-wal2json\" \\\n                && if [ \"$WITH_PERL\" = \"true\" ]; then \\\n                    EXTRAS=\"$EXTRAS postgresql-plperl-${version}\"; \\\n                fi \\\n                && if [ ${version%.*} -ge 10 ]; then \\\n                    EXTRAS=\"$EXTRAS postgresql-${version}-decoderbufs\"; \\\n                fi \\\n                && if [ ${version%.*} -lt 11 ]; then \\\n                    EXTRAS=\"$EXTRAS postgresql-${version}-amcheck\"; \\\n                fi; \\\n            fi \\\n\\\n            # Install PostgreSQL binaries, contrib, plproxy and multiple pl's \\\n            && apt-get install --no-install-recommends --allow-downgrades -y postgresql-contrib-${version} \\\n                    postgresql-plpython3-${version} postgresql-server-dev-${version} \\\n                    postgresql-${version}-cron postgresql-${version}-pgq3 \\\n                    postgresql-${version}-pg-stat-kcache $EXTRAS \\\n\n            # Install 3rd party stuff\n            && cd timescaledb \\\n            && for v in $TIMESCALEDB; do \\\n                git checkout $v \\\n                && sed -i \"s/VERSION 3.11/VERSION 3.10/\" CMakeLists.txt \\\n                && if BUILD_FORCE_REMOVE=true ./bootstrap -DREGRESS_CHECKS=OFF -DWARNINGS_AS_ERRORS=OFF \\\n                    -DTAP_CHECKS=OFF -DPG_CONFIG=/usr/lib/postgresql/$version/bin/pg_config \\\n                    -DAPACHE_ONLY=$TIMESCALEDB_APACHE_ONLY -DSEND_TELEMETRY_DEFAULT=NO; then \\\n                        make -C build install \\\n                        && strip /usr/lib/postgresql/$version/lib/timescaledb*.so; \\\n                fi \\\n                && git reset --hard \\\n                && git clean -f -d; \\\n            done \\\n            && cd .. \\\n\n            && if [ \"$DEMO\" != \"true\" ]; then \\\n                EXTRA_EXTENSIONS=\"plantuner-${PLANTUNER_COMMIT} plprofiler\" \\\n                && if [ ${version%.*} -ge 10 ]; then \\\n                     EXTRA_EXTENSIONS=\"$EXTRA_EXTENSIONS pg_mon-${PG_MON_COMMIT}\"; \\\n                fi; \\\n            else \\\n                EXTRA_EXTENSIONS=\"\"; \\\n            fi \\\n\n            && for n in bg_mon-${BG_MON_COMMIT} pg_auth_mon-${PG_AUTH_MON_COMMIT} set_user pg_permissions-${PG_PERMISSIONS_COMMIT} pg_tm_aux-${PG_TM_AUX_COMMIT} $EXTRA_EXTENSIONS; do \\\n                make -C $n USE_PGXS=1 clean install-strip; \\\n            done; \\\n    done \\\n\n    && apt-get install --no-install-recommends -y skytools3-ticker pgbouncer \\\n\n    && sed -i \"s/ main.*$/ main/g\" /etc/apt/sources.list.d/pgdg.list \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y postgresql postgresql-server-dev-all postgresql-all libpq-dev \\\n    && for version in $DEB_PG_SUPPORTED_VERSIONS; do \\\n        apt-get install --no-install-recommends -y postgresql-server-dev-${version}; \\\n    done \\\n\n    && if [ \"$DEMO\" != \"true\" ]; then \\\n        for version in $DEB_PG_SUPPORTED_VERSIONS; do \\\n\n            apt-get install --no-install-recommends -y postgresql-${version}-partman \\\n            # create postgis symlinks to make it possible to perform update\n            && ln -s postgis-${POSTGIS_VERSION%.*}.so \\\n                /usr/lib/postgresql/${version}/lib/postgis-2.5.so; \\\n        done; \\\n    fi \\\n\n    # build and install missing packages\n    && for pkg in pgextwlist; do \\\n        apt-get source postgresql-13-${pkg} \\\n        && cd $(ls -d *${pkg%?}*-*/) \\\n        && if [ -f ../$pkg.patch ]; then patch -p1 < ../$pkg.patch; fi \\\n        && if [ \"$pkg\" = \"pgextwlist\" ]; then \\\n            sed -i '/postgresql-all/d' debian/control.in \\\n            # make it possible to use it from shared_preload_libraries\n            && perl -ne 'print unless /PG_TRY/ .. /PG_CATCH/' pgextwlist.c > pgextwlist.c.f \\\n            && egrep -v '(PG_END_TRY|EmitWarningsOnPlaceholders)' pgextwlist.c.f > pgextwlist.c; \\\n        fi \\\n        && pg_buildext updatecontrol \\\n        && DEB_BUILD_OPTIONS=nocheck debuild -b -uc -us \\\n        && cd .. \\\n        && for version in $DEB_PG_SUPPORTED_VERSIONS; do \\\n            for deb in postgresql-${version}-${pkg}_*.deb; do \\\n                if [ -f $deb ]; then dpkg -i $deb; fi; \\\n            done; \\\n        done; \\\n    done \\\n\n    # make it possible for cron to work without root\n    && gcc -s -shared -fPIC -o /usr/local/lib/cron_unprivileged.so cron_unprivileged.c \\\n\n    # Remove unnecessary packages\n    && apt-get purge -y ${BUILD_PACKAGES} postgresql postgresql-all postgresql-server-dev-* libpq-dev=* libmagic1 bsdmainutils \\\n    && apt-get autoremove -y \\\n    && apt-get clean \\\n    && dpkg -l | grep '^rc' | awk '{print $2}' | xargs apt-get purge -y \\\n\n    # Try to minimize size by creating symlinks instead of duplicate files\n    && if [ \"$DEMO\" != \"true\" ]; then \\\n        cd /usr/lib/postgresql/$PGVERSION/bin \\\n        && for u in clusterdb pg_archivecleanup pg_basebackup pg_isready pg_recvlogical pg_test_fsync pg_test_timing pgbench psql reindexdb vacuumdb vacuumlo *.py; do \\\n            for v in /usr/lib/postgresql/*; do \\\n                if [ \"$v\" != \"/usr/lib/postgresql/$PGVERSION\" ] && [ -f \"$v/bin/$u\" ]; then \\\n                    rm $v/bin/$u \\\n                    && ln -s ../../$PGVERSION/bin/$u $v/bin/$u; \\\n                fi; \\\n            done; \\\n        done \\\n        && set +x \\\n        && for v1 in $(ls -1d /usr/share/postgresql/* | sort -Vr); do \\\n            # relink files with the same content\n            cd $v1/extension \\\n            && for orig in $(ls -1 *.sql | grep -v -- '--'); do \\\n                for f in ${orig%.sql}--*.sql; do \\\n                    if [ ! -L $f ] && diff $orig $f > /dev/null; then \\\n                        echo \"creating symlink $f -> $orig\" \\\n                        && rm $f && ln -s $orig $f; \\\n                    fi; \\\n                done; \\\n            done \\\n            && for e in pgq pgq_node plproxy address_standardizer address_standardizer_data_us; do \\\n                orig=$(basename \"$(find -maxdepth 1 -type f -name \"$e--*--*.sql\" | head -n1)\") \\\n                && if [ \"x$orig\" != \"x\" ]; then \\\n                    for f in $e--*--*.sql; do \\\n                        if [ \"$f\" != \"$orig\" ] && [ ! -L $f ] && diff $f $orig > /dev/null; then \\\n                            echo \"creating symlink $f -> $orig\" \\\n                            && rm $f && ln -s $orig $f; \\\n                        fi; \\\n                    done; \\\n                fi; \\\n            done \\\n            # relink files with the same name and content across different major versions\n            && started=0 \\\n            && for v2 in $(ls -1d /usr/share/postgresql/* | sort -Vr); do \\\n                if [ $v1 = $v2 ]; then \\\n                    started=1; \\\n                elif [ $started = 1 ]; then \\\n                    for d1 in extension contrib contrib/postgis-$POSTGIS_VERSION; do \\\n                        cd $v1/$d1 \\\n                        && d2=\"$d1\" \\\n                        && d1=\"../../${v1##*/}/$d1\" \\\n                        && if [ \"${d2%-*}\" = \"contrib/postgis\" ]; then \\\n                            if  [ \"${v2##*/}\" = \"9.6\" ]; then d2=\"${d2%-*}-$POSTGIS_LEGACY\"; fi \\\n                            && d1=\"../$d1\"; \\\n                        fi \\\n                        && d2=\"$v2/$d2\" \\\n                        && for f in *.html *.sql *.control *.pl; do \\\n                            if [ -f $d2/$f ] && [ ! -L $d2/$f ] && diff $d2/$f $f > /dev/null; then \\\n                                echo \"creating symlink $d2/$f -> $d1/$f\" \\\n                                && rm $d2/$f && ln -s $d1/$f $d2/$f; \\\n                            fi; \\\n                        done; \\\n                    done; \\\n                fi; \\\n            done; \\\n        done \\\n        && set -x; \\\n    fi \\\n\n    # Clean up\n    && rm -rf /var/lib/apt/lists/* \\\n            /var/cache/debconf/* \\\n            /builddeps \\\n            /usr/share/doc \\\n            /usr/share/man \\\n            /usr/share/info \\\n            /usr/share/locale/?? \\\n            /usr/share/locale/??_?? \\\n            /usr/share/postgresql/*/man \\\n            /etc/pgbouncer/* \\\n            /usr/lib/postgresql/*/bin/createdb \\\n            /usr/lib/postgresql/*/bin/createlang \\\n            /usr/lib/postgresql/*/bin/createuser \\\n            /usr/lib/postgresql/*/bin/dropdb \\\n            /usr/lib/postgresql/*/bin/droplang \\\n            /usr/lib/postgresql/*/bin/dropuser \\\n            /usr/lib/postgresql/*/bin/pg_standby \\\n            /usr/lib/postgresql/*/bin/pltcl_* \\\n    && find /var/log -type f -exec truncate --size 0 {} \\;\n\n# Install wal-g\nCOPY --from=dependencies-builder /builddeps/wal-g /usr/local/bin/\n\n# Install patroni and wal-e\nENV PATRONIVERSION=2.1.4\nENV WALE_VERSION=1.1.1\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && set -ex \\\n    && BUILD_PACKAGES=\"python3-pip python3-wheel python3-dev git patchutils binutils\" \\\n    && apt-get update \\\n\\\n    # install most of the patroni dependencies from ubuntu packages\n    && apt-cache depends patroni \\\n            | sed -n -e 's/.* Depends: \\(python3-.\\+\\)$/\\1/p' \\\n            | grep -Ev '^python3-(sphinx|etcd|consul|kazoo|kubernetes)' \\\n            | xargs apt-get install -y ${BUILD_PACKAGES} \\\n                        python3-pystache python3-requests \\\n\n    && pip3 install --no-cache-dir setuptools \\\n\n    && if [ \"$DEMO\" != \"true\" ]; then \\\n        EXTRAS=\",etcd,consul,zookeeper,aws\" \\\n        && apt-get install --no-install-recommends -y python3-etcd python3-consul python3-kazoo python3-meld3 \\\n                        python3-boto python3-gevent python3-greenlet python3-cachetools \\\n                        python3-rsa python3-pyasn1-modules python3-swiftclient python3-cffi \\\n\n        && find /usr/share/python-babel-localedata/locale-data -type f ! -name 'en_US*.dat' -delete \\\n\n        && pip3 install --no-cache-dir filechunkio wal-e[aws,google,swift]==$WALE_VERSION google-crc32c==1.1.2 'protobuf<4.21.0' \\\n                'git+https://github.com/zalando/pg_view.git@master#egg=pg-view' \\\n\n        # Non-exclusive backups\n        && curl -f -sL https://github.com/CyberDem0n/wal-e/commit/dad4d53969b93c56f1eaa5243ffa8e9051fd7eb7.diff \\\n                | patch -d /usr/local/lib/python3.6/dist-packages/wal_e -p2 \\\n        # WALE_DISABLE_S3_SSE support\n        && curl -f -sL https://github.com/CyberDem0n/wal-e/commit/0309317d33d252fcd968b3eb97313a9fdf022c65.diff \\\n                | patch -d /usr/local/lib/python3.6/dist-packages/wal_e -p2 \\\n        # Revert https://github.com/wal-e/wal-e/commit/485d834a18c9b0d97115d95f89e16bdc564e9a18, it affects S3 performance\n        && curl -f -sL https://github.com/wal-e/wal-e/commit/485d834a18c9b0d97115d95f89e16bdc564e9a18.diff \\\n                | patch -d /usr/local/lib/python3.6/dist-packages/wal_e -Rp2 \\\n        # https://github.com/wal-e/wal-e/issues/318\n        && sed -i 's/^\\(    for i in range(0,\\) num_retries):.*/\\1 100):/g' \\\n                    /usr/lib/python3/dist-packages/boto/utils.py; \\\n    fi \\\n    && pip3 install --no-cache-dir patroni[kubernetes$EXTRAS]==$PATRONIVERSION \\\n\n    && for d in /usr/local/lib/python3.6 /usr/lib/python3; do \\\n        cd $d/dist-packages \\\n        && find . -type d -name tests | xargs rm -fr \\\n        && find . -type f -name 'test_*.py*' -delete; \\\n    done \\\n    && find . -type f -name 'unittest_*.py*' -delete \\\n    && find . -type f -name '*_test.py' -delete \\\n    && find . -type f -name '*_test.cpython*.pyc' -delete \\\n\n    # Clean up\n    && apt-get purge -y ${BUILD_PACKAGES} \\\n    && apt-get autoremove -y \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n            /var/cache/debconf/* \\\n            /root/.cache \\\n            /usr/share/doc \\\n            /usr/share/man \\\n            /usr/share/locale/?? \\\n            /usr/share/locale/??_?? \\\n            /usr/share/info \\\n    && find /var/log -type f -exec truncate --size 0 {} \\;\n\nRUN set -ex \\\n    && if [ \"$COMPRESS\" = \"true\" ]; then \\\n        apt-get update \\\n        && apt-get install --no-install-recommends -y busybox xz-utils \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/* /var/cache/debconf/* /usr/share/doc /usr/share/man /etc/rc?.d /etc/systemd \\\n        && ln -snf busybox /bin/sh \\\n        && files=\"/bin/sh\" \\\n        && arch=$(uname -m) \\\n        && darch=$(uname -m | sed 's/_/-/') \\\n        && libs=\"$(ldd $files | awk '{print $3;}' | grep '^/' | sort -u) /lib/ld-linux-$darch.so.* /lib/$arch-linux-gnu/ld-linux-$darch.so.* /lib/$arch-linux-gnu/libnsl.so.* /lib/$arch-linux-gnu/libnss_compat.so.*\" \\\n        && (echo /var/run /var/spool $files $libs | tr ' ' '\\n' && realpath $files $libs) | sort -u | sed 's/^\\///' > /exclude \\\n        && find /etc/alternatives -xtype l -delete \\\n        && save_dirs=\"usr lib var bin sbin etc/ssl etc/init.d etc/alternatives etc/apt\" \\\n        && XZ_OPT=-e9v tar -X /exclude -cpJf a.tar.xz $save_dirs \\\n        && rm -fr /usr/local/lib/python* \\\n        && /bin/busybox sh -c \"(find $save_dirs -not -type d && cat /exclude /exclude && echo exclude) | sort | uniq -u | xargs /bin/busybox rm\" \\\n        && /bin/busybox --install -s \\\n        && /bin/busybox sh -c \"find $save_dirs -type d -depth -exec rmdir -p {} \\; 2> /dev/null\"; rm a.tar.xz \\\n    fi\n\nFROM scratch as builder-true\nCOPY --from=builder-false / /\n\nFROM builder-${COMPRESS}\n\nLABEL maintainer=\"Alexander Kukushkin <alexander.kukushkin@zalando.de>\"\nLABEL maintainer=\"Polina Bungina <polina.bungina@zalando.de>\"\n\nARG PGVERSION\nARG TIMESCALEDB\nARG DEMO\nARG COMPRESS\n\nEXPOSE 5432 8008 8080\n\nENV LC_ALL=en_US.utf-8 \\\n    PATH=$PATH:/usr/lib/postgresql/$PGVERSION/bin \\\n    PGHOME=/home/postgres \\\n    RW_DIR=/run \\\n    TIMESCALEDB=$TIMESCALEDB \\\n    DEMO=$DEMO\n\nENV WALE_ENV_DIR=$RW_DIR/etc/wal-e.d/env \\\n    LOG_ENV_DIR=$RW_DIR/etc/log.d/env \\\n    PGROOT=$PGHOME/pgdata/pgroot\n\nENV PGDATA=$PGROOT/data \\\n    PGLOG=$PGROOT/pg_log\n\nWORKDIR $PGHOME\n\nCOPY motd /etc/\nCOPY runit /etc/service/\nCOPY pgq_ticker.ini $PGHOME/\n\nRUN sed -i \"s|/var/lib/postgresql.*|$PGHOME:/bin/bash|\" /etc/passwd \\\n        && chown -R postgres:postgres $PGHOME $RW_DIR \\\n        && rm -fr /var/spool/cron /var/tmp \\\n        && mkdir -p /var/spool \\\n        && ln -s $RW_DIR/cron /var/spool/cron \\\n        && ln -s $RW_DIR/tmp /var/tmp \\\n        && for d in /etc/service/*; do \\\n            chmod 755 $d/* \\\n            && ln -s /run/supervise/$(basename $d) $d/supervise; \\\n        done \\\n        && ln -snf $RW_DIR/service /etc/service \\\n        && ln -s $RW_DIR/pam.d-postgresql /etc/pam.d/postgresql \\\n        && ln -s $RW_DIR/postgres.yml $PGHOME/postgres.yml \\\n        && ln -s $RW_DIR/.bash_history /root/.bash_history \\\n        && ln -s $RW_DIR/postgresql/.bash_history $PGHOME/.bash_history \\\n        && ln -s $RW_DIR/postgresql/.psql_history $PGHOME/.psql_history \\\n        && ln -s $RW_DIR/etc $PGHOME/etc \\\n        && for d in $PGHOME /root; do \\\n            d=$d/.config/patroni \\\n            && mkdir -p $d \\\n            && ln -s $PGHOME/postgres.yml $d/patronictl.yaml; \\\n        done \\\n        && sed -i 's/set compatible/set nocompatible/' /etc/vim/vimrc.tiny \\\n        && echo \"PATH=\\\"$PATH\\\"\" > /etc/environment \\\n        && for e in TERM=linux LC_ALL=C.UTF-8 LANG=C.UTF-8 EDITOR=editor; \\\n            do echo \"export $e\" >> /etc/bash.bashrc; \\\n        done \\\n        && ln -s /etc/skel/.bashrc $PGHOME/.bashrc \\\n        && echo \"source /etc/motd\" >> /root/.bashrc \\\n        # Allow users in the root group to access the following files and dirs\n        && if [ \"$COMPRESS\" != \"true\" ]; then \\\n           chmod 664 /etc/passwd \\\n           && chmod o+r /etc/shadow \\\n           && chgrp -R 0 $PGHOME $RW_DIR \\\n           && chmod -R g=u $PGHOME $RW_DIR \\\n           && usermod -a -G root postgres; \\\n        fi\n\nCOPY scripts bootstrap major_upgrade /scripts/\nCOPY launch.sh /\n\nCMD [\"/bin/sh\", \"/launch.sh\", \"init\"]\n"
}