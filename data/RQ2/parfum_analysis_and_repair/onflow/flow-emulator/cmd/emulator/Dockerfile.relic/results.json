{
  "startTime": 1674255966127,
  "endTime": 1674255966642,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 5,
        "lineEnd": 8,
        "columnStart": 18,
        "columnEnd": 8
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 18,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NOTE: Must be run in the context of the repo's root directory\n\n## (1) Build Relic first to maximize caching\nFROM golang:1.13-alpine3.10 AS build-relic\n\nRUN apk update && apk add --no-cache \\\n    build-base \\\n    cmake \\\n    bash\n\nRUN mkdir /build\nWORKDIR /build\n\n# Copy over *only* files necessary for Relic\nCOPY crypto/relic ./relic\nCOPY crypto/relic_build.sh .\n\n# Build Relic (this places build artifacts in /build/relic/build)\n# NOTE: The Relic build script uses Bash-specific features, so we explicitly run\n# it with bash rather than the default shell.\nRUN bash ./relic_build.sh\n\n## (2) Build the app binary\nFROM golang:1.13-alpine3.10 AS build-app\n\nRUN apk update && apk add --no-cache build-base\n\n# Build the app binary in /app\nRUN mkdir /app\nWORKDIR /app\n\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\n\nCOPY . .\n# Copy over Relic build artifacts\nCOPY --from=build-relic /build/relic/build ./crypto/relic/build\n\nRUN GO111MODULE=on CGO_ENABLED=1 GOOOS=linux GOARCH=amd64 go build -o ./app ./cmd/flow\n\n## (3) Add the binary to a fresh Alpine image\nFROM alpine:3.10\n\nCOPY --from=build-app /app/app /bin/app\n\n# Expose GRPC and HTTP ports\nEXPOSE 8080\nEXPOSE 3569\n\n# Run the CLI binary as the entrypoint\nENTRYPOINT [\"/bin/app\"]\n# These arguments are separated from the entrypoint to simplify running other\n# commands with this image.\nCMD [\"emulator\", \"start\", \"--init\", \"--persist\"]\n"
}