{
  "startTime": 1674249757094,
  "endTime": 1674249757668,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install necessary dependencies to install the app's dependencies\nFROM node:16-alpine as base_dependencies\nRUN apk add --no-cache make gcc g++ python3 git\nRUN npm install -g pnpm && npm cache clean --force;\n\n# Ignore the app's version to avoid an unnecessary dependency install\nFROM node:16-alpine as version_cache_fix\nWORKDIR /cache\nCOPY package*.json ./\n# '3d' is the 3rd line of package*.json\n# If you are gonna use this in your project remember to select the right line (where the \"version\" field is)\nRUN sed -e '3d' -i package.json package-lock.json\n\n# install dependencies for building the app\nFROM base_dependencies as app_building_dependencies\nWORKDIR /cache\nCOPY --from=version_cache_fix /cache /cache\nRUN pnpm install --strict-peer-dependencies=false\n\n# install dependencies for production\nFROM app_building_dependencies as app_production_dependencies\nWORKDIR /cache\nCOPY --from=version_cache_fix /cache /cache\nRUN pnpm prune --prod\n\n# compile the app using the cached dev dependencies\nFROM node:16-alpine as builder\nWORKDIR /app\nCOPY . .\nCOPY --from=app_building_dependencies /cache/node_modules ./node_modules\nRUN npm run build\n\n# copy the cached dependencies, copy the compiled code and set entrypoint\nFROM node:16-alpine as release\nWORKDIR /app\nCOPY package*.json ./\nCOPY --from=app_production_dependencies /cache/node_modules ./node_modules\nCOPY --from=builder /app/dist ./dist\nCOPY ./res ./res\nCMD [\"node\", \".\"]\n"
}