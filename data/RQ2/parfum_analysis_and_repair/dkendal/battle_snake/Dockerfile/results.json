{
  "startTime": 1674255713805,
  "endTime": 1674255717860,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM frolvlad/alpine-glibc as builder\n\nENV OTP_VERSION=\"20.2.2\"\n\nRUN set -xe \\\n    && OTP_DOWNLOAD_URL=\"https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz\" \\\n    && OTP_DOWNLOAD_SHA256=\"7614a06964fc5022ea4922603ca4bf1d2cc241f9bd6b7321314f510fd74c7304\" \\\n    && apk add --no-cache --virtual .fetch-deps curl ca-certificates \\\n    && curl -fSL -o otp-src.tar.gz \"$OTP_DOWNLOAD_URL\" \\\n    && echo \"$OTP_DOWNLOAD_SHA256  otp-src.tar.gz\" | sha256sum -c - \\\n    && apk add --no-cache --virtual .build-deps \\\n    dpkg-dev dpkg \\\n    gcc \\\n    g++ \\\n    libc-dev \\\n    linux-headers \\\n    make \\\n    autoconf \\\n    ncurses-dev \\\n    openssl-dev \\\n    unixodbc-dev \\\n    lksctp-tools-dev \\\n    tar \\\n    && export ERL_TOP=\"/usr/src/otp_src_${OTP_VERSION%%@*}\" \\\n    && mkdir -vp $ERL_TOP \\\n    && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 \\\n    && rm otp-src.tar.gz \\\n    && ( cd $ERL_TOP \\\n    && ./otp_build autoconf \\\n    && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && ./configure --build=\"$gnuArch\" \\\n    && make -j$(getconf _NPROCESSORS_ONLN) \\\n    && make install ) \\\n    && rm -rf $ERL_TOP \\\n    && find /usr/local -regex '/usr/local/lib/erlang/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|obj\\|c_src\\|emacs\\|info\\|examples\\)' | xargs rm -rf \\\n    && find /usr/local -name src | xargs -r find | grep -v '\\.hrl$' | xargs rm -v || true \\\n    && find /usr/local -name src | xargs -r find | xargs rmdir -vp || true \\\n    && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /usr/local | xargs -r strip --strip-all \\\n    && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded \\\n    && runDeps=\"$( \\\n    scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n    | tr ',' '\\n' \\\n    | sort -u \\\n    | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    )\" \\\n    && apk add --no-cache --virtual .erlang-rundeps $runDeps lksctp-tools \\\n    && apk del .fetch-deps .build-deps\n\n# elixir expects utf8.\nENV ELIXIR_VERSION=\"v1.6.0\" \\\n    LANG=C.UTF-8\n\nRUN set -xe \\\n    && ELIXIR_DOWNLOAD_URL=\"https://github.com/elixir-lang/elixir/releases/download/${ELIXIR_VERSION}/Precompiled.zip\" \\\n    && ELIXIR_DOWNLOAD_SHA256=\"f848bc7f88f9c252b3610a9995679889ce18073d0f0a061533c12e622b2ac9e7\" \\\n    && buildDeps=' \\\n    ca-certificates \\\n    curl \\\n    unzip \\\n    ' \\\n    && apk --no-cache  add --virtual .build-deps $buildDeps \\\n    && curl -fSL -o elixir-precompiled.zip $ELIXIR_DOWNLOAD_URL \\\n    && echo \"$ELIXIR_DOWNLOAD_SHA256  elixir-precompiled.zip\" | sha256sum -c - \\\n    && unzip -d /usr/local elixir-precompiled.zip \\\n    && rm elixir-precompiled.zip \\\n    && apk del .build-deps\n\nENV MIX_ENV=prod VERBOSE=1\n\nWORKDIR /app\n\nRUN apk update && apk --no-cache add nodejs git yarn gmp-dev gmp\n\nCOPY . .\n\nRUN mix do local.hex --force, \\\n    local.rebar, \\\n    deps.get, \\\n    deps.compile, \\\n    compile\n\nRUN yarn install && yarn webpack:production || : && mix phx.digest && yarn cache clean;\n\nRUN mix release --env=prod --verbose\n\nFROM elixir:1.6.0-alpine\nWORKDIR /root\nCOPY --from=builder /app/_build/ .\nRUN apk update && apk --no-cache add bash\nENV HOST=localhost \\\n    MNESIA_HOST=bs@127.0.0.1 \\\n    MNESIA_STORAGE_TYPE=ram_copies \\\n    PORT=3000 \\\n    SECRET_KEY_BASE=tbFePEIYrMaNfKmTHZZT9IrdebmVbS3FnCTOp/AAWklO9Jxnhua1YlGaMLzYz2yy\nEXPOSE 3000\nCMD /root/prod/rel/bs/bin/bs foreground\n"
}