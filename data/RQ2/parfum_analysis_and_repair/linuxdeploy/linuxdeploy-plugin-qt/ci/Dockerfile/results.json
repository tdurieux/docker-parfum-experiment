{
  "startTime": 1674218156734,
  "endTime": 1674218158180,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG base_image\n\nFROM ${base_image}\n\nSHELL [\"bash\", \"-x\", \"-c\"]\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y build-essential cmake git gcovr patchelf wget \\\n            libmagic-dev libjpeg-dev libpng-dev libboost-filesystem-dev libboost-regex-dev \\\n            cimg-dev qtbase5-dev qtdeclarative5-dev-tools qml-module-qtquick2 qtdeclarative5-dev \\\n            googletest google-mock nlohmann-json3-dev autoconf libtool nano qtwebengine5-dev && \\\n    apt-get autoremove --purge -y && \\\n    apt-get clean -y && rm -rf /var/lib/apt/lists/*;\n\nENV CI=1\n\n# in case AppImageLauncher is installed on the host, this little snippet will make AppImages launch normally\n#RUN echo -e '#! /bin/bash\\nset -exo pipefail\\nexec \"$@\"' > /usr/bin/AppImageLauncher && \\\n#    chmod +x /usr/bin/AppImageLauncher\n\n# we need to configure some Qt tools, therefore we use /tmp as temporary home\nENV HOME=/tmp\n\n# make sure all AppImages can run in Docker\nENV APPIMAGE_EXTRACT_AND_RUN=1\n"
}