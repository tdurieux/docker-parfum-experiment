{
  "startTime": 1674249036319,
  "endTime": 1674249037546,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 7,
        "columnEnd": 133
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 7,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.2-fpm-stretch\n\n# Container containing php-fpm and php-cli to run and interact with eZ Platform and other Symfony projects\n#\n# It has two modes of operation:\n# - (run.sh cmd) [default] Reconfigure eZ Platform/Publish based on provided env variables and start php-fpm\n# - (bash|php|composer) Allows to execute composer, php or bash against the image\n\n# Set defaults for variables used by run.sh\nENV COMPOSER_HOME=/root/.composer\n\n# Get packages that we need in container\nRUN apt-get update -q -y \\\r\n    && apt-get install -q -y --no-install-recommends \\\r\n        ca-certificates \\\r\n        curl \\\r\n        acl \\\r\n        sudo \\\r\n# Needed for the php extensions we enable below\r\n        libfreetype6 \\\r\n        libjpeg62-turbo \\\r\n        libxpm4 \\\r\n        libpng16-16 \\\r\n        libicu57 \\\r\n        libxslt1.1 \\\r\n        libmemcachedutil2 \\\r\n        imagemagick \\\r\n        libpq5 \\ \r\n# git & unzip needed for composer, unless we document to use dev image for composer install\r\n# unzip needed due to https://github.com/composer/composer/issues/4471\r\n        unzip \\\r\n        git \\\r\n# packages useful for dev\r\n        less \\\r\n        mariadb-client \\\r\n        vim \\\r\n        wget \\\r\n        tree \\\r\n        gdb-minimal \\\r\n    && rm -rf /var/lib/apt/lists/*\n\n# Install and configure php plugins\nRUN set -xe \\\r\n    && buildDeps=\" \\\r\n        $PHP_EXTRA_BUILD_DEPS \\\r\n        libfreetype6-dev \\\r\n        libjpeg62-turbo-dev \\\r\n        libxpm-dev \\\r\n        libpng-dev \\\r\n        libicu-dev \\\r\n        libxslt1-dev \\\r\n        libmemcached-dev \\\r\n        libxml2-dev \\\r\n        libmagickwand-dev \\\r\n        libpq-dev \\\r\n    \" \\\r\n\t&& apt-get update -q -y && apt-get install -q -y --no-install-recommends $buildDeps && rm -rf /var/lib/apt/lists/* \\\r\n# Extract php source and install missing extensions\r\n    && docker-php-source extract \\\r\n    && docker-php-ext-configure mysqli --with-mysqli=mysqlnd \\\r\n    && docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd \\\r\n    && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \\\r\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ --with-xpm-dir=/usr/include/ --enable-gd-jis-conv \\\r\n    && docker-php-ext-install exif gd mbstring intl xsl zip mysqli pdo_mysql pdo_pgsql pgsql soap bcmath \\\r\n    && docker-php-ext-enable opcache \\\r\n    && cp /usr/src/php/php.ini-production ${PHP_INI_DIR}/php.ini \\\r\n    \\\r\n# Install imagemagick\r\n    && for i in $(seq 1 3); do pecl install -o imagick && s=0 && break || s=$? && sleep 1; done; (exit $s) \\\r\n    && docker-php-ext-enable imagick \\\r\n# Install xdebug\r\n    && for i in $(seq 1 3); do echo yes | pecl install -o \"xdebug\" && s=0 && break || s=$? && sleep 1; done; (exit $s) \\\r\n# Install blackfire: https://blackfire.io/docs/integrations/docker\r\n    && version=$(php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\") \\\n    && curl -f -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n    && mv /tmp/blackfire-*.so $(php -r \"echo ini_get('extension_dir');\")/blackfire.so \\\n    && rm -f /tmp/blackfire-probe.tar.gz \\\n\n# Install igbinary (for more efficient serialization in redis/memcached)\r\n    && for i in $(seq 1 3); do pecl install -o igbinary && s=0 && break || s=$? && sleep 1; done; (exit $s) \\\r\n    && docker-php-ext-enable igbinary \\\r\n    \\\r\n# Install redis (manualy build in order to be able to enable igbinary)\r\n    && for i in $(seq 1 3); do pecl install -o --nobuild redis && s=0 && break || s=$? && sleep 1; done; (exit $s) \\\r\n    && cd \"$(pecl config-get temp_dir)/redis\" \\\r\n    && phpize \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-redis-igbinary \\\n    && make \\\n    && make install \\\n    && docker-php-ext-enable redis \\\n    && cd - \\\n\n# Install memcached (manualy build in order to be able to enable igbinary)\r\n    && for i in $(seq 1 3); do echo no | pecl install -o --nobuild memcached && s=0 && break || s=$? && sleep 1; done; (exit $s) \\\r\n    && cd \"$(pecl config-get temp_dir)/memcached\" \\\r\n    && phpize \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-memcached-igbinary \\\n    && make \\\n    && make install \\\n    && docker-php-ext-enable memcached \\\n    && cd - \\\n\n# Delete source & builds deps so it does not hang around in layers taking up space\r\n    && pecl clear-cache \\\n    && rm -Rf \"$(pecl config-get temp_dir)/*\" \\\n    && docker-php-source delete \\\n    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps\n\n# Set timezone\nRUN echo \"UTC\" > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata\n\n# Set pid file to be able to restart php-fpm\nRUN sed -i \"s@^\\[global\\]@\\[global\\]\\n\\npid = /run/php-fpm.pid@\" ${PHP_INI_DIR}-fpm.conf\n\n\nCOPY conf.d/blackfire.ini ${PHP_INI_DIR}/conf.d/blackfire.ini\nCOPY conf.d/xdebug.ini ${PHP_INI_DIR}/conf.d/xdebug.ini.disabled\n\n# Create Composer directory (cache and auth files) & Get Composer\nRUN mkdir -p $COMPOSER_HOME \\\n    && curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\n\n# As application is put in as volume we do all needed operation on run\nCOPY scripts /scripts\n\n# Add some custom config\nCOPY conf.d/php.ini ${PHP_INI_DIR}/conf.d/php.ini\n\nRUN chmod 755 /scripts/*.sh\n\n\n# Needed for docker-machine\nRUN usermod -u 1000 www-data\n\nWORKDIR /var/www\n\nENTRYPOINT [\"/scripts/docker-entrypoint.sh\"]\n\n\nCMD php-fpm\n\n\nEXPOSE 9000"
}