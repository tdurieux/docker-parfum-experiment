diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/fogospt/fogospt/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/fogospt/fogospt/Dockerfile/repaired.Dockerfile
index 3938b83..e90d2ca 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/fogospt/fogospt/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/fogospt/fogospt/Dockerfile/repaired.Dockerfile
@@ -1,15 +1,15 @@
-FROM php:7.2-fpm-stretch
-
-# Container containing php-fpm and php-cli to run and interact with eZ Platform and other Symfony projects
-#
-# It has two modes of operation:
-# - (run.sh cmd) [default] Reconfigure eZ Platform/Publish based on provided env variables and start php-fpm
-# - (bash|php|composer) Allows to execute composer, php or bash against the image
-
-# Set defaults for variables used by run.sh
-ENV COMPOSER_HOME=/root/.composer
-
-# Get packages that we need in container
+FROM php:7.2-fpm-stretch
+
+# Container containing php-fpm and php-cli to run and interact with eZ Platform and other Symfony projects
+#
+# It has two modes of operation:
+# - (run.sh cmd) [default] Reconfigure eZ Platform/Publish based on provided env variables and start php-fpm
+# - (bash|php|composer) Allows to execute composer, php or bash against the image
+
+# Set defaults for variables used by run.sh
+ENV COMPOSER_HOME=/root/.composer
+
+# Get packages that we need in container
 RUN apt-get update -q -y \
     && apt-get install -q -y --no-install-recommends \
         ca-certificates \
@@ -37,9 +37,9 @@ RUN apt-get update -q -y \
         wget \
         tree \
         gdb-minimal \
-    && rm -rf /var/lib/apt/lists/*
-
-# Install and configure php plugins
+    && rm -rf /var/lib/apt/lists/*
+
+# Install and configure php plugins
 RUN set -xe \
     && buildDeps=" \
         $PHP_EXTRA_BUILD_DEPS \
@@ -71,12 +71,12 @@ RUN set -xe \
 # Install xdebug
     && for i in $(seq 1 3); do echo yes | pecl install -o "xdebug" && s=0 && break || s=$? && sleep 1; done; (exit $s) \
 # Install blackfire: https://blackfire.io/docs/integrations/docker
-    && version=$(php -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;") \
-    && curl -A "Docker" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \
-    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \
-    && mv /tmp/blackfire-*.so $(php -r "echo ini_get('extension_dir');")/blackfire.so \
-    && rm -f /tmp/blackfire-probe.tar.gz \
-    \
+    && version=$(php -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;") \
+    && curl -f -A "Docker" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \
+    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \
+    && mv /tmp/blackfire-*.so $(php -r "echo ini_get('extension_dir');")/blackfire.so \
+    && rm -f /tmp/blackfire-probe.tar.gz \
+
 # Install igbinary (for more efficient serialization in redis/memcached)
     && for i in $(seq 1 3); do pecl install -o igbinary && s=0 && break || s=$? && sleep 1; done; (exit $s) \
     && docker-php-ext-enable igbinary \
@@ -84,62 +84,62 @@ RUN set -xe \
 # Install redis (manualy build in order to be able to enable igbinary)
     && for i in $(seq 1 3); do pecl install -o --nobuild redis && s=0 && break || s=$? && sleep 1; done; (exit $s) \
     && cd "$(pecl config-get temp_dir)/redis" \
-    && phpize \
-    && ./configure --enable-redis-igbinary \
-    && make \
-    && make install \
-    && docker-php-ext-enable redis \
-    && cd - \
-    \
+    && phpize \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-redis-igbinary \
+    && make \
+    && make install \
+    && docker-php-ext-enable redis \
+    && cd - \
+
 # Install memcached (manualy build in order to be able to enable igbinary)
     && for i in $(seq 1 3); do echo no | pecl install -o --nobuild memcached && s=0 && break || s=$? && sleep 1; done; (exit $s) \
     && cd "$(pecl config-get temp_dir)/memcached" \
-    && phpize \
-    && ./configure --enable-memcached-igbinary \
-    && make \
-    && make install \
-    && docker-php-ext-enable memcached \
-    && cd - \
-    \
+    && phpize \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-memcached-igbinary \
+    && make \
+    && make install \
+    && docker-php-ext-enable memcached \
+    && cd - \
+
 # Delete source & builds deps so it does not hang around in layers taking up space
-    && pecl clear-cache \
-    && rm -Rf "$(pecl config-get temp_dir)/*" \
-    && docker-php-source delete \
-    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps
-
-# Set timezone
-RUN echo "UTC" > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata
-
-# Set pid file to be able to restart php-fpm
-RUN sed -i "s@^\[global\]@\[global\]\n\npid = /run/php-fpm.pid@" ${PHP_INI_DIR}-fpm.conf
-
-
-COPY conf.d/blackfire.ini ${PHP_INI_DIR}/conf.d/blackfire.ini
-COPY conf.d/xdebug.ini ${PHP_INI_DIR}/conf.d/xdebug.ini.disabled
-
-# Create Composer directory (cache and auth files) & Get Composer
-RUN mkdir -p $COMPOSER_HOME \
-    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
-
-
-# As application is put in as volume we do all needed operation on run
-COPY scripts /scripts
-
-# Add some custom config
-COPY conf.d/php.ini ${PHP_INI_DIR}/conf.d/php.ini
-
-RUN chmod 755 /scripts/*.sh
-
-
-# Needed for docker-machine
-RUN usermod -u 1000 www-data
-
-WORKDIR /var/www
-
-ENTRYPOINT ["/scripts/docker-entrypoint.sh"]
-
-
-CMD php-fpm
-
-
+    && pecl clear-cache \
+    && rm -Rf "$(pecl config-get temp_dir)/*" \
+    && docker-php-source delete \
+    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps
+
+# Set timezone
+RUN echo "UTC" > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata
+
+# Set pid file to be able to restart php-fpm
+RUN sed -i "s@^\[global\]@\[global\]\n\npid = /run/php-fpm.pid@" ${PHP_INI_DIR}-fpm.conf
+
+
+COPY conf.d/blackfire.ini ${PHP_INI_DIR}/conf.d/blackfire.ini
+COPY conf.d/xdebug.ini ${PHP_INI_DIR}/conf.d/xdebug.ini.disabled
+
+# Create Composer directory (cache and auth files) & Get Composer
+RUN mkdir -p $COMPOSER_HOME \
+    && curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
+
+
+# As application is put in as volume we do all needed operation on run
+COPY scripts /scripts
+
+# Add some custom config
+COPY conf.d/php.ini ${PHP_INI_DIR}/conf.d/php.ini
+
+RUN chmod 755 /scripts/*.sh
+
+
+# Needed for docker-machine
+RUN usermod -u 1000 www-data
+
+WORKDIR /var/www
+
+ENTRYPOINT ["/scripts/docker-entrypoint.sh"]
+
+
+CMD php-fpm
+
+
 EXPOSE 9000
\ No newline at end of file