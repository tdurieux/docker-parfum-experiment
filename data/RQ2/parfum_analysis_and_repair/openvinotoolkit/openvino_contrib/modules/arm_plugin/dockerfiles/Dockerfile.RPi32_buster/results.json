{
  "startTime": 1674220646834,
  "endTime": 1674220647997,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 23,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#This Dockerfile is for x86 and should be used for OpenVINO ARM plugin cross-compilation\n#https://github.com/openvinotoolkit/openvino_contrib/tree/master/modules/arm_plugin#how-to-build\n\nFROM debian:10\n\nENV DEBIAN_FRONTEND noninteractive\nENV PAKAGE_UPDATES_OF 20210505\n\n#Prerequisite installation\nRUN apt-get update && \\\n    apt-get -y upgrade && \\\n    apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        lsb-release \\\n        nano \\\n        wget \\\n        curl \\\n        nano \\\n        tar \\\n        bzip2 \\\n        unzip \\\n        cpio \\\n        cifs-utils \\\n        locales \\\n        rsync \\\n        apt-transport-https \\\n        debian-archive-keyring \\\n        sudo \\\n        openssh-client \\\n        default-jre \\\n        p7zip-full \\\n        software-properties-common \\\n        dirmngr \\\n        gnupg \\\n        netcat-openbsd \\\n        dh-autoreconf \\\n        libcurl4-gnutls-dev \\\n        libexpat1-dev \\\n        gettext \\\n        libz-dev \\\n        libssl-dev \\\n        build-essential \\\n        git \\\n    && \\\n    locale-gen en_US.UTF-8 && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN dpkg --add-architecture armhf && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends -f -o Dpkg::Options::=\"--force-confnew\" \\\n        build-essential \\\n        libusb-1.0-0-dev:armhf \\\n        software-properties-common \\\n        crossbuild-essential-armhf \\\n        zlib1g-dev \\\n        libffi-dev \\\n        libssl-dev \\\n        chrpath \\\n        libssl-dev \\\n        libprotobuf-dev \\\n        libprotoc-dev \\\n        protobuf-compiler \\\n        python3-dev \\\n        libpython3-dev:armhf \\\n        libgtk-3-dev:armhf \\\n        libavcodec-dev:armhf \\\n        libavformat-dev:armhf \\\n        libswscale-dev:armhf \\\n        # For ARM CPU plugin\n        scons \\\n    && \\\n    rm -rf /var/lib/apt/lists/*\n\n# To cross-compile Python3.7 we need to first compile it for the host\nRUN curl -f -O https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tar.xz && \\\n    tar -xf Python-3.7.9.tar.xz && \\\n    cd Python-3.7.9 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j4 && make altinstall && \\\n    curl -f https://bootstrap.pypa.io/get-pip.py | python3.7 - --no-cache-dir pip==20.2.2 numpy==1.19.5 cython && rm Python-3.7.9.tar.xz\n\n# Cross-compile Python3.7 for ARM\nRUN cd Python-3.7.9 && make distclean && \\\n    ./configure \\\n        --host=arm-linux-gnueabihf \\\n        --build=x86_64-linux-gnu \\\n        --disable-ipv6 \\\n        --enable-shared \\\n        --prefix=/opt/python3.7_arm \\\n        ac_cv_file__dev_ptmx=no \\\n        ac_cv_file__dev_ptc=no && \\\n    make -j4 && make altinstall\n\nRUN wget https://www.cmake.org/files/v3.13/cmake-3.13.4.tar.gz && \\\n    tar xf cmake-3.13.4.tar.gz && \\\n    (cd cmake-3.13.4 && ./bootstrap --parallel=$(nproc --all) && make --jobs=$(nproc --all) && make install) && \\\n    rm -rf cmake-3.13.4 cmake-3.13.4.tar.gz\n\n# Replace exceptional Python version. It's used in case of failed test check which we\n# have in our case because CMake tries to run cross-compiled python to detect version.\nRUN sed -i -E 's|PYTHON_VERSION_STRING \"1.4\"|PYTHON_VERSION_STRING \"3.7\"|' /usr/local/share/cmake-3.13/Modules/FindPythonInterp.cmake && \\\n    sed -i -E 's|PYTHON_VERSION_MAJOR \"1\"|PYTHON_VERSION_MAJOR \"3\"|' /usr/local/share/cmake-3.13/Modules/FindPythonInterp.cmake && \\\n    sed -i -E 's|PYTHON_VERSION_MINOR \"4\"|PYTHON_VERSION_MINOR \"7\"|' /usr/local/share/cmake-3.13/Modules/FindPythonInterp.cmake && \\\n    sed -i -E 's|PYTHON_VERSION_PATCH \"0\"|PYTHON_VERSION_PATCH \"9\"|' /usr/local/share/cmake-3.13/Modules/FindPythonInterp.cmake\n\nRUN rm -f /usr/bin/python3 && ln -s /usr/local/bin/python3.7 /usr/bin/python3\nRUN rm /usr/bin/lsb_release\n\nRUN git config --global user.name \"Your Name\" && \\\n    git config --global user.email \"you@example.com\"\n\nENV ARCH_NAME arm-linux-gnueabihf\nENV TOOLCHAIN_DEFS arm.toolchain.cmake\nCOPY scripts/arm_cpu_plugin_build.sh /arm_cpu_plugin_build.sh\n\n#configure paths\nRUN mkdir -p /arm_cpu_plugin\nWORKDIR /arm_cpu_plugin/\n\nCMD [\"sh\", \"/arm_cpu_plugin_build.sh\"]\n"
}