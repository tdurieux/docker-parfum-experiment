{
  "startTime": 1674246446753,
  "endTime": 1674246448723,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 0,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 74,
        "columnStart": 18,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 18,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 74,
        "columnStart": 18,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 18,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedDockerfile": "#\n# Copyright (c) 2021 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nARG BASE_IMAGE=ubuntu:20.04\nFROM $BASE_IMAGE as base_build\n\nLABEL version=\"1.0.0\"\n\nARG INSTALL_DIR=/opt/intel/openvino\nARG INSTALL_DIR=/opt/intel/openvino\nARG TEMP_DIR=/tmp/openvino_installer\nARG DL_INSTALL_DIR=/opt/intel/openvino/deployment_tools\nARG DL_DIR=/tmp\nARG JOBS\nARG APT_OV_PACKAGE=openvino-2022.1.0\nARG APT_OVCV_PACKAGE=openvino-opencv-2022.1.0\n\n# build_type=[ opt, dbg ]\nARG build_type=dbg\nARG debug_bazel_flags=--strip=never\\ --copt=\"-g\"\\ -c\\ dbg\nENV HDDL_INSTALL_DIR=/opt/intel/openvino/deployment_tools/inference_engine/external/hddl\nENV DEBIAN_FRONTEND=noninteractive\nENV TF_SYSTEM_LIBS=\"curl\"\nSHELL [\"/bin/bash\", \"-c\"]\nRUN apt update && apt install --no-install-recommends -y \\\n            libboost-atomic1.71.0 \\\n            libboost-chrono1.71.0 \\\n            libboost-filesystem1.71.0 \\\n            libboost-program-options1.71.0 \\\n            libboost-thread1.71.0 \\\n            libboost-system1.71.0 \\\n            libboost-date-time1.71.0 \\\n            build-essential \\\n            cmake \\\n            automake \\\n            autoconf \\\n            curl \\\n            gdb \\\n            git \\\n            libusb-dev \\\n            libusb-1.0-0-dev \\\n            libcurl4-openssl-dev \\\n            libtool \\\n            libxml2-dev \\\n            libnuma-dev \\\n            libssl-dev \\\n            patch \\\n            pkg-config \\\n            python2 \\\n            python2-dev \\\n            python-setuptools \\\n            python3 \\\n            python3-pip \\\n            python3-dev \\\n            python3-setuptools \\\n            python3-virtualenv \\\n            python3-numpy \\\n            python-is-python3 \\\n            unzip \\\n            wget \\\n            unzip \\\n            xz-utils && \\\n            apt clean && rm -rf /var/lib/apt/lists/*;\n\n\n# Set up Bazel\nENV BAZEL_VERSION 3.7.2\nWORKDIR /bazel\nRUN curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n\n\n####### Azure SDK needs new boost:\nWORKDIR /boost\nRUN wget https://sourceforge.net/projects/boost/files/boost/1.69.0/boost_1_69_0.tar.gz && \\\ntar xvf boost_1_69_0.tar.gz && cd boost_1_69_0 && ./bootstrap.sh && \\\n./b2 cxxstd=17 link=static cxxflags='-fPIC' cflags='-fPIC' \\\n--with-chrono --with-date_time --with-filesystem --with-program_options --with-system \\\n--with-random --with-thread --with-atomic --with-regex \\\n--with-log --with-locale \\\ninstall && rm boost_1_69_0.tar.gz\n\n####### Azure SDK\nCOPY third_party /ovms/third_party/\n\nWORKDIR /azure\nRUN apt update && apt-get install --no-install-recommends -y uuid uuid-dev && rm -rf /var/lib/apt/lists/*;\nRUN git clone https://github.com/Microsoft/cpprestsdk.git && cd cpprestsdk && git checkout tags/v2.10.18 -b v2.10.18 && git submodule update --init\n\nRUN git clone https://github.com/Azure/azure-storage-cpp.git && cd azure-storage-cpp/Microsoft.WindowsAzure.Storage && git checkout tags/v7.5.0 && mkdir build.release\n\nWORKDIR /\nRUN cp -rf /ovms/third_party/cpprest/rest_sdk_v2.10.16.patch /azure/cpprestsdk/\nRUN cd /azure/cpprestsdk/ && patch -p1 < rest_sdk_v2.10.16.patch\nRUN cp -rf /ovms/third_party/azure/azure_sdk.patch /azure/azure-storage-cpp/\nRUN cd /azure/azure-storage-cpp/ && patch -p1 < azure_sdk.patch\nWORKDIR /azure\n\nRUN cd cpprestsdk && mkdir Release/build.release && cd Release/build.release && cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_FLAGS=\"-fPIC\" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON -DBoost_USE_STATIC_LIBS=ON -DWERROR=OFF -DBUILD_SAMPLES=OFF -DBUILD_TESTS=OFF && make --jobs=$JOBS install\nRUN cd azure-storage-cpp/Microsoft.WindowsAzure.Storage/build.release && CASABLANCA_DIR=/azure/cpprestsdk cmake .. -DCMAKE_CXX_FLAGS=\"-fPIC\" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON -DBoost_USE_STATIC_LIBS=ON -DCMAKE_VERBOSE_MAKEFILE=ON && make --jobs=$JOBS && make --jobs=$JOBS install\n\n####### End of Azure SDK\n\n# Build AWS S3 SDK\nRUN git clone https://github.com/aws/aws-sdk-cpp.git --branch 1.7.129 --single-branch --depth 1 /awssdk\nWORKDIR /awssdk/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=s3 -DENABLE_TESTING=OFF -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DFORCE_SHARED_CRT=OFF -DSIMPLE_INSTALL=OFF -DCMAKE_CXX_FLAGS=\" -D_GLIBCXX_USE_CXX11_ABI=1 \" ..\nRUN make --jobs=$JOBS\n#RUN mv .deps/install/lib64 .deps/install/lib\n\n####### End of AWS S3 SDK\n\nARG ov_use_binary=1\nARG DLDT_PACKAGE_URL\nARG OPENVINO_NAME=${DLDT_PACKAGE_URL}\nARG ov_source_branch=master\n\n################### BUILD OPENVINO FROM SOURCE - buildarg ov_use_binary=0  ############################\n# Build OpenVINO and nGraph (OV dependency) with D_GLIBCXX_USE_CXX11_ABI=0 or 1\nRUN if [ \"$ov_use_binary\" == \"0\" ] ; then true ; else exit 0 ; fi ;  git clone https://github.com/openvinotoolkit/openvino /openvino ; cd /openvino ; git checkout $ov_source_branch; git submodule update --init --recursive\nWORKDIR /openvino/build\nRUN if [ \"$ov_use_binary\" == \"0\" ] ; then true ; else exit 0 ; fi ; cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_SAMPLES=0 -DNGRAPH_USE_CXX_ABI=1 -DCMAKE_CXX_FLAGS=\" -D_GLIBCXX_USE_CXX11_ABI=1 -Wno-error=parentheses \"  ..\nRUN if [ \"$ov_use_binary\" == \"0\" ] ; then true ; else exit 0 ; fi ; make --jobs=$JOBS\nRUN if [ \"$ov_use_binary\" == \"0\" ] ; then true ; else exit 0 ; fi ; make install\nRUN if [ \"$ov_use_binary\" == \"0\" ] ; then true ; else exit 0 ; fi ; \\\n    mkdir -p /opt/intel/openvino/extras && \\\n    mkdir -p /opt/intel/openvino && \\\n    ln -s /openvino/inference-engine/temp/opencv_*_ubuntu20/opencv /opt/intel/openvino/extras && \\\n    ln -s /usr/local/runtime /opt/intel/openvino && \\\n    ln -s /openvino/scripts/setupvars/setupvars.sh /opt/intel/openvino/setupvars.sh\n################## END OF OPENVINO SOURCE BUILD ######################\n\n################### TAKE OPENVINO FROM A BINARY RELEASE - buildarg ov_use_binary=1 (DEFAULT) ##########\nWORKDIR /\n# OV toolkit package\nRUN if [ \"$ov_use_binary\" = \"1\" ] && [ \"$DLDT_PACKAGE_URL\" != \"\" ]; then true ; else exit 0 ; fi ; mkdir -p $TEMP_DIR && cd $TEMP_DIR/ && \\\n    wget $DLDT_PACKAGE_URL && \\\n    chmod 755 l_openvino_toolkit_* && \\\n    ./l_openvino_toolkit_* -a -s --eula accept && \\\n    rm -rf /opt/intel/openvino && \\\n    ln -s /opt/intel/openvino_2022 /opt/intel/openvino\n\n# apt package\nRUN if [ \"$ov_use_binary\" = \"1\" ] && [ \"$DLDT_PACKAGE_URL\" = \"\" ] ; then true ; else exit 0 ; fi ; \\\n    echo \"installing apt package\" && \\\n    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \\\n    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \\\n    echo \"deb https://apt.repos.intel.com/openvino/2022 focal main\" | tee /etc/apt/sources.list.d/intel-openvino-2022.list && \\\n    apt update && \\\n    apt install --no-install-recommends -y $APT_OV_PACKAGE $APT_OVCV_PACKAGE && \\\n    ln -s /opt/intel/openvino_2022 /opt/intel/openvino && rm -rf /var/lib/apt/lists/*;\n\n# install sample apps including benchmark_app\nRUN if [ -f /opt/intel/openvino/samples/cpp/build_samples.sh ];  then /opt/intel/openvino/samples/cpp/build_samples.sh ; fi\n#################### END OF OPENVINO BINARY INSTALL\n\n# install opencv\nARG OPENVINO_OPENCV_DOWNLOAD_SERVER=\"\"\nRUN if [ \"$ov_use_binary\" = \"1\" ] && [ \"$DLDT_PACKAGE_URL\" != \"\" ]; then true ; else exit 0 ; fi ; \\\n    cd /opt/intel/openvino/extras/scripts && ./download_opencv.sh\n\n# Build OpenVINO Model Server\nWORKDIR /ovms\nCOPY .bazelrc WORKSPACE /ovms/\nCOPY external /ovms/external/\n\nENV BAZEL_LINKLIBS=-l%:libstdc++.a\nRUN apt install --no-install-recommends -y python-is-python3 && rm -rf /var/lib/apt/lists/*;\nRUN bazel build --jobs=$JOBS ${debug_bazel_flags} @org_tensorflow//tensorflow/core:framework\nRUN bazel build --jobs=$JOBS ${debug_bazel_flags} @tensorflow_serving//tensorflow_serving/apis:prediction_service_cc_proto\n\nWORKDIR /example_cpp_client\nCOPY demos/common/cpp /example_cpp_client/cpp\nCOPY demos/benchmark/cpp/synthetic_client_async_benchmark.cpp demos/image_classification/cpp/*.cpp /example_cpp_client/cpp/src/\n\nWORKDIR /ovms\n\nCOPY src/ /ovms/src/\n\nARG PROJECT_NAME=\"OpenVINO Model Server 2022.1\"\nLABEL description=${PROJECT_NAME}\n\n# Set OVMS version strings\nRUN bash -c \"sed -i -e 's|REPLACE_PROJECT_NAME|${PROJECT_NAME}|g' /ovms/src/version.hpp\"\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; sed -i -e \"s#REPLACE_OPENVINO_NAME#`find /opt/intel/ -maxdepth 1 -type d | grep openvino_2022 | cut -d'_' -f2`#g\" /ovms/src/version.hpp\nRUN if [ \"$ov_use_binary\" == \"0\" ] ; then true ; else exit 0 ; fi ; sed -i -e \"s#REPLACE_OPENVINO_NAME#`git --git-dir /openvino/.git log -n 1 | head -n 1 | cut -d' ' -f2 | head -c 12`#g\" /ovms/src/version.hpp\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/openvino/runtime/lib/intel64/:/opt/intel/openvino/extras/opencv/lib/:/opt/intel/openvino/runtime/3rdparty/tbb/lib/\n\nRUN bazel build ${debug_bazel_flags} --jobs $JOBS //src:ovms\nRUN bazel build ${debug_bazel_flags} --jobs $JOBS //src:libsampleloader.so\n\nRUN cd /ovms/src/example/SampleCpuExtension/ && make\n\nRUN bazel test ${debug_bazel_flags} --jobs $JOBS --test_summary=detailed --test_output=streamed //src:ovms_test\n\nARG ovms_metadata_file\nCOPY ${ovms_metadata_file} metadata.json\n\nRUN ./bazel-bin/src/./ovms --version\nRUN ./bazel-bin/src/./ovms\nCOPY release_files/thirdparty-licenses/ /ovms/release_files/thirdparty-licenses/\nCOPY release_files/LICENSE /ovms/release_files/LICENSE\n"
}