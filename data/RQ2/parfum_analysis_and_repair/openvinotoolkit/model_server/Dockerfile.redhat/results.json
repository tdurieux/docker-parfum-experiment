{
  "startTime": 1674250302597,
  "endTime": 1674250304724,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 34,
        "lineEnd": 67,
        "columnStart": 114,
        "columnEnd": 14
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 1,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright (c) 2020-2021 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nARG BASE_IMAGE=registry.access.redhat.com/ubi8/ubi:8.5\nFROM $BASE_IMAGE as base_build\n\nLABEL version=\"1.0.0\"\n\nARG ov_source_branch=releases/2021/2\nARG ovms_metadata_file\n\nARG INSTALL_DIR=/opt/intel/openvino\nARG TEMP_DIR=/tmp/openvino_installer\nARG DL_INSTALL_DIR=/opt/intel/openvino/deployment_tools\nARG DL_DIR=/tmp\nARG JOBS\n# build_type=[ opt, dbg ]\nARG build_type=dbg\nARG debug_bazel_flags=--strip=never\\ --copt=\"-g\"\\ -c\\ dbg\nENV TF_SYSTEM_LIBS=\"curl\"\n\nRUN dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && yum update -d6 -y && yum install -d6 -y \\\n            boost169-atomic \\\n            boost169-chrono \\\n            boost169-filesystem \\\n            boost169-program-options \\\n            boost169-thread \\\n            boost169-system \\\n            boost169-date-time \\\n            cmake \\\n            gcc-c++ \\\n            curl \\\n            gdb \\\n            git \\\n            libgusb.x86_64 \\\n            libusbx \\\n            libcurl-devel \\\n            libtool \\\n            libuuid-devel \\\n            libxml2-devel \\\n            make \\\n            openssl-devel \\\n            patch \\\n            pkg-config \\\n            python3 \\\n            python3-pip \\\n            python3-devel \\\n            python3-setuptools \\\n            python3-virtualenv \\\n            python3-numpy \\\n            wget \\\n            which \\\n            yum-utils \\\n            unzip \\\n            xz && \\\n            yum clean all && rm -rf /var/cache/yum\n\n# Set up Bazel\nENV BAZEL_VERSION 3.7.2\nWORKDIR /bazel\nRUN curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n####### Azure SDK needs new boost:\nWORKDIR /boost\nRUN wget https://sourceforge.net/projects/boost/files/boost/1.68.0/boost_1_68_0.tar.gz && \\\n\ttar xvf boost_1_68_0.tar.gz && cd boost_1_68_0 && ./bootstrap.sh && \\\n\t./b2 cxxstd=17 link=static cxxflags='-fPIC' cflags='-fPIC' \\\n\t\t--with-chrono --with-date_time --with-filesystem --with-program_options --with-system \\\n\t\t--with-random --with-thread --with-atomic --with-regex \\\n\t\t--with-log --with-locale \\\n\t\tinstall && rm boost_1_68_0.tar.gz\n\n####### Azure SDK\nCOPY third_party /ovms/third_party/\n\nWORKDIR /azure\nRUN git clone https://github.com/Microsoft/cpprestsdk.git && cd cpprestsdk && git checkout tags/v2.10.16 -b v2.10.16 && git submodule update --init\n\nRUN git clone https://github.com/Azure/azure-storage-cpp.git && cd azure-storage-cpp/Microsoft.WindowsAzure.Storage && git checkout tags/v7.5.0 && mkdir build.release\n\nWORKDIR /\nRUN cp -rf /ovms/third_party/cpprest/rest_sdk_v2.10.16.patch /azure/cpprestsdk/\nRUN cd /azure/cpprestsdk/ && patch -p1 < rest_sdk_v2.10.16.patch\nRUN cp -rf /ovms/third_party/azure/azure_sdk.patch /azure/azure-storage-cpp/\nRUN cd /azure/azure-storage-cpp/ && patch -p1 < azure_sdk.patch\nWORKDIR /azure\n\nRUN cd cpprestsdk && mkdir Release/build.release && cd Release/build.release && cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_FLAGS=\"-fPIC\" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON -DBoost_USE_STATIC_LIBS=ON -DWERROR=OFF -DBUILD_SAMPLES=OFF -DBUILD_TESTS=OFF && make --jobs=$JOBS install\nRUN cd azure-storage-cpp/Microsoft.WindowsAzure.Storage/build.release && CASABLANCA_DIR=/azure/cpprestsdk cmake .. -DCMAKE_CXX_FLAGS=\"-fPIC\" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON -DBoost_USE_STATIC_LIBS=ON -DCMAKE_VERBOSE_MAKEFILE=ON && make --jobs=$JOBS && make --jobs=$JOBS install\n\n####### End of Azure SDK\n\n# Build AWS S3 SDK\nRUN git clone https://github.com/aws/aws-sdk-cpp.git --branch 1.7.129 --single-branch --depth 1 /awssdk\nWORKDIR /awssdk/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=s3 -DENABLE_TESTING=OFF -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DFORCE_SHARED_CRT=OFF -DSIMPLE_INSTALL=OFF -DCMAKE_CXX_FLAGS=\" -D_GLIBCXX_USE_CXX11_ABI=1 \" ..\nRUN make --jobs=$JOBS\nRUN mv .deps/install/lib64 .deps/install/lib\n\n####### End of AWS S3 SDK\n\nARG ov_use_binary=1\nARG DLDT_PACKAGE_URL\nARG OPENVINO_NAME=${DLDT_PACKAGE_URL}\n\n################### TAKE OPENVINO FROM A BINARY RELEASE - buildarg ov_use_binary=1 (DEFAULT) ##########\nWORKDIR /\n# OV toolkit package\nRUN if [ \"$ov_use_binary\" == \"1\" ] && [ \"$DLDT_PACKAGE_URL\" != \"\" ]; then true ; else exit 0 ; fi ; mkdir -p $TEMP_DIR && cd $TEMP_DIR/ && \\\n    wget $DLDT_PACKAGE_URL && \\\n    mkdir /opt/intel && \\\n    tar -zxf l_openvino_toolkit*.tgz -C /opt/intel && \\\n    ln -s /opt/intel/l_openvino_toolkit_runtime_rhel8_p* /opt/intel/openvino && \\\n    ln -s /opt/intel/l_openvino_toolkit_runtime_rhel8_p* /opt/intel/openvino_2022 && rm l_openvino_toolkit*.tgz\n\n# install opencv\nARG OPENVINO_OPENCV_DOWNLOAD_SERVER=\"\"\nRUN cd /opt/intel/openvino/extras/scripts && ./download_opencv.sh\n\n# Build OpenVINO Model Server\nWORKDIR /ovms\nCOPY .bazelrc WORKSPACE /ovms/\n# since bazel does not have easy way to pass if down the dependencies to have select the sources\n# for libcurl & ssl we hack it this way\nRUN ln -s /usr/lib64 /usr/lib/x86_64-linux-gnu\nCOPY external /ovms/external/\nCOPY third_party /ovms/third_party/\n\nRUN alternatives --set python /usr/bin/python3\nRUN bazel build --jobs=$JOBS ${debug_bazel_flags} @org_tensorflow//tensorflow/core:framework\nRUN bazel build --jobs=$JOBS ${debug_bazel_flags} @tensorflow_serving//tensorflow_serving/apis:prediction_service_cc_proto\n\n\nRUN cp -v /etc/ssl/certs/ca-bundle.crt /etc/ssl/certs/ca-certificates.crt\n\nWORKDIR /example_cpp_client\nCOPY demos/common/cpp /example_cpp_client/cpp\nCOPY demos/benchmark/cpp/synthetic_client_async_benchmark.cpp demos/image_classification/cpp/*.cpp /example_cpp_client/cpp/src/\n\nWORKDIR /ovms\n\nCOPY src/ /ovms/src/\n\nARG PROJECT_NAME=\"OpenVINO Model Server 2022.1\"\nLABEL description=${PROJECT_NAME}\n\n# Set OVMS version strings\nRUN bash -c \"sed -i -e 's|REPLACE_PROJECT_NAME|${PROJECT_NAME}|g' /ovms/src/version.hpp\"\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; sed -i -e \"s#REPLACE_OPENVINO_NAME#`find /opt/intel/ -maxdepth 1 -mindepth 1 -type d | grep l_openvino | cut -d'_' -f7`#g\" /ovms/src/version.hpp\n\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/openvino/runtime/lib/intel64/:/opt/intel/openvino/extras/opencv/lib/:/opt/intel/openvino/runtime/3rdparty/tbb/lib/\n\nRUN bazel build ${debug_bazel_flags} --jobs $JOBS //src:ovms\nRUN bazel build ${debug_bazel_flags} --jobs $JOBS //src:libsampleloader.so\n\nRUN cd /ovms/src/example/SampleCpuExtension/ && make\n\nRUN bazel test ${debug_bazel_flags} --jobs $JOBS --test_summary=detailed --test_output=streamed  //src:ovms_test\n\nCOPY ${ovms_metadata_file} metadata.json\n\nRUN ./bazel-bin/src/./ovms\nCOPY release_files/thirdparty-licenses/ /ovms/release_files/thirdparty-licenses/\nCOPY release_files/LICENSE /ovms/release_files/LICENSE\n"
}