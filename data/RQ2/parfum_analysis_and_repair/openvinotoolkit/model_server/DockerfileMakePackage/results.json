{
  "startTime": 1674254198458,
  "endTime": 1674254200168,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 19,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 1,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright (c) 2021 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nARG BUILD_IMAGE=ovms-redhat:latest\n\nFROM $BUILD_IMAGE\n\nARG ov_use_binary=1\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN mkdir /patchelf && cd /patchelf && \\\n\twget https://github.com/NixOS/patchelf/archive/0.10.tar.gz && \\\n\ttar -xf 0.10.tar.gz && ls -lah && cd */ && \\\n\t./bootstrap.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm 0.10.tar.gz\n\nRUN mkdir -vp /ovms_release/bin\nRUN mkdir -vp /ovms_release/deps\nRUN mkdir -vp /ovms_release/lib\nRUN mkdir -vp /ovms_release/lib/hddl/config\n\nRUN cp /ovms/metadata.json /ovms_release/\nRUN if [ \"$ov_use_binary\" == \"0\" ] ; then true ; else exit 0 ; fi ; cp -v /openvino/bin/intel64/Release/lib/plugins.xml /ovms_release/lib/\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; cp -v /opt/intel/openvino/runtime/3rdparty/hddl/config/* /ovms_release/lib/hddl/config/ || true\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; cp -vr /opt/intel/openvino/runtime/3rdparty/hddl/etc/* /ovms_release/lib/hddl/etc/ || true\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; cp -v /opt/intel/openvino/runtime/lib/intel64/plugins.xml /ovms_release/lib/ && cp /opt/intel/openvino/install_dependencies/* /ovms_release/deps/\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; rm -vrf /ovms_release/deps/*-devel-*\n\nRUN find /ovms/bazel-out/k8-*/bin -iname '*.so*' -exec cp -v {} /ovms_release/lib/ \\;\nRUN cd /ovms_release/lib/ ; rm -f libazurestorage.so.* ; ln -s libazurestorage.so libazurestorage.so.7 ;ln -s libazurestorage.so libazurestorage.so.7.5\nRUN cd /ovms_release/lib/ ; rm -f libcpprest.so.2.10 ; ln -s libcpprest.so libcpprest.so.2.10\nRUN rm -f /ovms_release/lib/libssl.so\nRUN rm -f /ovms_release/lib/libsampleloader*\nRUN rm -f /ovms_release/lib/lib_node*\nRUN rm -f /ovms_release/lib/libcustom_node*\n\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; find /opt/intel/openvino/runtime/lib/intel64/ -iname '*.so*' -exec cp -vP {} /ovms_release/lib/ \\;\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; find /opt/intel/openvino/runtime/lib/intel64/ -iname '*.mvcmd*' -exec cp -v {} /ovms_release/lib/ \\;\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; find /opt/intel/openvino/runtime/3rdparty/ -iname '*.so*' -exec cp -vP {} /ovms_release/lib/ \\;\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; find /opt/intel/openvino/extras/opencv/lib/ -iname '*.so*' -exec cp -vP {} /ovms_release/lib/ \\; && rm /ovms_release/lib/libopencv_highgui*\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; cp /opt/intel/openvino/extras/opencv/etc/licenses/* /ovms/release_files/thirdparty-licenses/;\nRUN if [ \"$ov_use_binary\" == \"1\" ] ; then true ; else exit 0 ; fi ; if [ -f /opt/intel/openvino/docs/licensing/EULA.txt ] ; then true ; else exit 0; fi ; cp /opt/intel/openvino/docs/licensing/EULA.txt /ovms/release_files/thirdparty-licenses/openvino.LICENSE.txt;\nRUN if [ \"$ov_use_binary\" == \"0\" ] ; then true ; else exit 0 ; fi ; cp /openvino/LICENSE /ovms/release_files/thirdparty-licenses/openvino.LICENSE.txt;\n\nRUN find /ovms/bazel-bin/src -name 'ovms' -type f -exec cp -v {} /ovms_release/bin \\;\nWORKDIR /ovms_release/bin\nRUN patchelf --remove-rpath ./ovms && patchelf --set-rpath '$ORIGIN/../lib/' ./ovms\nRUN find /ovms_release/lib/ -iname '*.so*' -exec patchelf --debug --remove-rpath  {}  \\;\nRUN find /ovms_release/lib/ -iname '*.so*' -exec patchelf --debug --set-rpath '$ORIGIN/../lib' {} \\;\n\nWORKDIR /ovms\nRUN cp -v /ovms/release_files/LICENSE /ovms_release/\nRUN cp -rv /ovms/release_files/thirdparty-licenses /ovms_release/\n\nRUN ls -lahR /ovms_release/\n\nRUN find /ovms_release/lib/ -iname '*.so*' -type f -exec patchelf --remove-rpath  {}  \\;\nRUN find /ovms_release/lib/ -iname '*.so*' -type f -exec patchelf --set-rpath '$ORIGIN/../lib' {} \\;\n\nWORKDIR /\nRUN tar czf ovms.tar.gz --transform 's/ovms_release/ovms/' /ovms_release/ && sha256sum ovms.tar.gz > ovms.tar.gz.sha256 && cp /ovms_release/metadata.json /ovms.tar.gz.metadata.json\nRUN tar cJf ovms.tar.xz --transform 's/ovms_release/ovms/' /ovms_release/ && sha256sum ovms.tar.xz > ovms.tar.xz.sha256 && cp /ovms_release/metadata.json /ovms.tar.xz.metadata.json\n\nENTRYPOINT [ ]\n"
}