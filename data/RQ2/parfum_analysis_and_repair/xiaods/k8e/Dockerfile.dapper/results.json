{
  "startTime": 1674252390086,
  "endTime": 1674252390970,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GOLANG=golang:1.16.10-alpine3.13\nFROM ${GOLANG}\n\nARG http_proxy=$http_proxy\nARG https_proxy=$https_proxy\nARG no_proxy=$no_proxy\nENV http_proxy=$http_proxy\nENV https_proxy=$https_proxy\nENV no_proxy=$no_proxy\n\nRUN apk -U --no-cache add bash git gcc musl-dev docker vim less file curl wget ca-certificates jq linux-headers \\\n    zlib-dev tar zip squashfs-tools npm coreutils python3 openssl-dev libffi-dev libseccomp libseccomp-dev \\\n    libseccomp-static make libuv-static sqlite-dev sqlite-static libselinux libselinux-dev zlib-dev zlib-static \\\n    zstd gzip alpine-sdk binutils-gold\nRUN if [ \"$(go env GOARCH)\" = \"arm64\" ]; then \\\n    wget https://github.com/aquasecurity/trivy/releases/download/v0.25.3/trivy_0.25.3_Linux-ARM64.tar.gz && \\\n    tar -zxvf trivy_0.25.3_Linux-ARM64.tar.gz                                                            && \\\n    mv trivy /usr/local/bin; rm trivy_0.25.3_Linux-ARM64.tar.gz \\\n    else \\\n    wget https://github.com/aquasecurity/trivy/releases/download/v0.25.3/trivy_0.25.3_Linux-64bit.tar.gz && \\\n    tar -zxvf trivy_0.25.3_Linux-64bit.tar.gz                                                            && \\\n    mv trivy /usr/local/bin; rm trivy_0.25.3_Linux-64bit.tar.gz \\\n    fi\n# this works for both go 1.15 and 1.16\nRUN GOPROXY=direct go get golang.org/x/tools/cmd/goimports@gopls/v0.6.9\nRUN rm -rf /go/src /go/pkg\n\nRUN if [ \"$(go env GOARCH)\" = \"amd64\" ]; then \\\n    curl -f -sL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s v1.40.0; \\\n    fi\n\nENV YQ_URL=https://github.com/mikefarah/yq/releases/download/v4.6.2/yq_linux\nRUN wget -O - ${YQ_URL}_$(go env GOARCH) > /usr/bin/yq && chmod +x /usr/bin/yq\n\nARG SELINUX=true\nENV SELINUX $SELINUX\n\nENV DAPPER_RUN_ARGS --privileged -v k8e-cache:/go/src/github.com/xiaods/k8e/.cache -v trivy-cache:/root/.cache/trivy\nENV DAPPER_ENV REPO TAG RELEASE_TAG IMAGE_NAME SKIP_VALIDATE GCLOUD_AUTH GITHUB_TOKEN GOLANG GOOS GOARCH\nENV DAPPER_SOURCE /go/src/github.com/xiaods/k8e/\nENV DAPPER_OUTPUT ./bin ./dist ./build/out ./build/static ./pkg/static ./pkg/deploy\nENV DAPPER_DOCKER_SOCKET true\nENV HOME ${DAPPER_SOURCE}\nENV CROSS true\nENV STATIC_BUILD true\nWORKDIR ${DAPPER_SOURCE}\n\nENTRYPOINT [\"./hack/entry.sh\"]\nCMD [\"ci\"]"
}