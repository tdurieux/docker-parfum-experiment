{
  "startTime": 1674251841867,
  "endTime": 1674251842807,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 105,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 1,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 22,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 75
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 22,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##\n## CrossbarFX Data Workbench\n##\n\nFROM buildpack-deps:bionic\n\nMAINTAINER The Crossbar.io Project <support@crossbario.com>\n\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONUNBUFFERED 1\n\n##### (1) first install pypy3 (copied from https://github.com/docker-library/pypy/blob/master/3/Dockerfile)\n\n# ensure local pypy is preferred over distribution pypy\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# runtime dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\ttcl \\\n\t\ttk \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV PYPY_VERSION 6.0.0\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 18.1\n\nRUN set -ex; \\\n\n# this \"case\" statement is generated via \"update.sh\"\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"${dpkgArch##*-}\" in \\\n# amd64\n\t\tamd64) pypyArch='linux64'; sha256='4cfffa292b9ef34bb6ba39cdbaa196c5c5cbbc5aa3faaa157cf45d7e34027048' ;; \\\n# arm32v5\n\t\tarmel) pypyArch='linux-armel'; sha256='6a6888a55192f58594838b8b3d2e7daaad43d3bf4293afab3dd8987d0bbd1124' ;; \\\n# i386\n\t\ti386) pypyArch='linux32'; sha256='b04eeee5160e6cb5f8962de80f077ea1dc7be34e77d74bf075519c23603f5ff9' ;; \\\n\t\t*) echo >&2 \"error: current architecture ($dpkgArch) does not have a corresponding PyPy $PYPY_VERSION binary release\"; exit 1 ;; \\\n\tesac; \\\n\n\twget -O pypy.tar.bz2 \"https://bitbucket.org/pypy/pypy/downloads/pypy3-v${PYPY_VERSION}-${pypyArch}.tar.bz2\"; \\\n\techo \"$sha256  *pypy.tar.bz2\" | sha256sum -c; \\\n\ttar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \\\n\tfind /usr/local/lib-python -depth -type d -a \\( -name test -o -name tests \\) -exec rm -rf '{}' +; \\\n\trm pypy.tar.bz2; \\\n\n\tpypy3 --version\n\nRUN set -ex; \\\n\t\\\n\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \\\n\t\\\n\tpypy3 get-pip.py \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t\"pip==$PYTHON_PIP_VERSION\" \\\n\t; \\\n\tpip --version; \\\n\t\\\n\trm -f get-pip.py\n\n##### (2) now install a jupyter based analytics environment\n\n# https://docs.scipy.org/doc/scipy/reference/building/linux.html#debian-ubuntu\n# https://jupyterlab.readthedocs.io/en/stable/\n# https://github.com/jupyterhub/jupyterhub\n\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n               lsb-release \\\n               ca-certificates \\\n               apt-transport-https \\\n               curl \\\n               wget \\\n               expat \\\n               build-essential \\\n               libssl-dev \\\n               libsnappy-dev \\\n               gcc gfortran python-dev libopenblas-dev liblapack-dev cython && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O /usr/share/keyrings/red-data-tools-keyring.gpg https://packages.red-data-tools.org/$(lsb_release --id --short | tr 'A-Z' 'a-z')/red-data-tools-keyring.gpg\nCOPY red-data-tools.list /etc/apt/sources.list.d/\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends libhdf5-dev libarrow-dev libparquet-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir -U pip && \\\n    pip install --no-cache-dir numpy pandas matplotlib scipy jupyter\n\n# the following installs all packages from\n#\n#    * https://github.com/jupyter/docker-stacks/blob/master/scipy-notebook/Dockerfile\n#    * https://github.com/jupyter/docker-stacks/blob/master/minimal-notebook/Dockerfile\n#    * https://github.com/jupyter/docker-stacks/blob/master/base-notebook/Dockerfile\n#\n# without the packages already installed further above.\n#\n# FIXME (failing currently): hdf5 numba\n#\nRUN pip install --no-cache-dir ipywidgets numexpr h5py seaborn scikit-learn scikit-image sympy \\\n                patsy statsmodels cloudpickle dill bokeh sqlalchemy vincent \\\n                beautifulsoup4 protobuf xlrd\n\n# ML stuff, from https://github.com/jupyter/docker-stacks/blob/master/tensorflow-notebook/Dockerfile\n#\n# FIXME: tensorflow keras pyro\nRUN apt-get update && apt-get install --no-install-recommends -y cmake && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir keras\n#RUN pip install pyarrow\n#RUN pip install pytorch\n\n## our own stuff\n\nRUN pip install --no-cache-dir -U pip && \\\n    pip install --no-cache-dir aiohttp autobahn[asyncio,twisted,encryption,serialization,scram]\n\n# RUN pip install zlmdb cfxdb\n\nCOPY .wheels /tmp/\n\nRUN ls -la /tmp\n\nRUN pip install --no-cache-dir \\\n        /tmp/zlmdb-*-py2.py3-none-any.whl \\\n        /tmp/cfxdb-*-py2.py3-none-any.whl \\\n    && pip show zlmdb cfxdb\n\n#USER 1000\n\nENV HOME /work\nVOLUME /work\nWORKDIR /work\n\n#RUN mkdir -p /work/.jupyter\n#COPY jupyter_notebook_config.py /work/.jupyter\n\nCMD [\"jupyter\", \"notebook\", \"--allow-root\", \"--no-browser\", \"--notebook-dir\", \"/work/notebooks\", \"--config\", \"/work/.jupyter/jupyter_notebook_config.py\"]\n"
}