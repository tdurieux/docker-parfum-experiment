{
  "startTime": 1674249985078,
  "endTime": 1674249986156,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 22,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:xenial\n\nMAINTAINER The Crossbar.io Project <support@crossbario.com>\n\n# Metadata\nARG BUILD_DATE\nARG AUTOBAHN_CPP_VERSION\nARG AUTOBAHN_CPP_VCS_REF\n\n# Metadata labeling\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"AutobahnCpp Starter Template\" \\\n      org.label-schema.description=\"Quickstart template for application development with AutobahnCpp\" \\\n      org.label-schema.url=\"http://crossbar.io\" \\\n      org.label-schema.vcs-ref=$AUTOBAHN_CPP_VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/crossbario/autobahn-cpp\" \\\n      org.label-schema.vendor=\"The Crossbar.io Project\" \\\n      org.label-schema.version=$AUTOBAHN_CPP_VERSION \\\n      org.label-schema.schema-version=\"1.0\"\n\n# Crossbar.io connection defaults\nENV CBURL ws://localhost:8080/ws\nENV CBREALM realm1\n\n# user env\nENV DEBIAN_FRONTEND noninteractive\n\nENV HOME /autobahn\nENV PATH /autobahn:$PATH\nENV LD_LIBRARY_PATH /usr/local/lib\n\n# env vars to configure websocketpp\nENV WSPP_ENABLE_CPP11 1\n\n# update system, get dev tools and libs\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y wget curl unzip git-core \\\n                          build-essential autotools-dev autoconf libtool cmake \\\n                          zlib1g-dev libbz2-dev libssl-dev \\\n                          libboost-all-dev \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\n# get, build and install Boost from upstream\n# RUN    cd /tmp \\\n#     && wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.bz2 \\\n#     && tar xvjf boost_1_69_0.tar.bz2\n\n# RUN    cd /tmp/boost_1_69_0 \\\n#     && ./bootstrap.sh --with-toolset=gcc \\\n#     && ./b2 toolset=gcc link=shared link=static threading=single threading=multi --layout=tagged --without-python -j 8 install \\\n#     && cd / \\\n#     && rm -rf /tmp/boost*\n\n# https://askubuntu.com/a/486184\n# RUN cd /usr/local/lib && \\\n#     ln -s libboost_thread-mt.a libboost_thread.a\n\n# get, build and install msgpack-c from upstream\nRUN cd /tmp \\\n    && wget https://github.com/msgpack/msgpack-c/archive/cpp-1.4.2.zip -O msgpack-c.zip \\\n    && unzip msgpack-c.zip && cd msgpack-c-cpp-1.4.2 \\\n    && export CXXFLAGS=\"$CXXFLAGS -std=c++11\" \\\n    && ./bootstrap && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make install \\\n    && cd / && rm -rf /tmp/msgpack*\n\n# get and install websocketpp from upstream\nRUN cd /tmp \\\n    && wget https://github.com/zaphoyd/websocketpp/archive/master.zip -O websocketpp.zip \\\n    && unzip websocketpp.zip \\\n    && cp -r /tmp/websocketpp-master/websocketpp/ /usr/local/include/ \\\n    && cd / && rm -rf /tmp/websocketpp*\n\n# get and install cmake from upstream\n# RUN cd /tmp \\\n#     && wget https://cmake.org/files/v3.11/cmake-3.11.0-Linux-x86_64.sh \\\n#     && sh cmake-3.11.0-Linux-x86_64.sh --skip-license --prefix=/usr/local \\\n#     && which cmake && cmake --version\n\n#### all dependencies and tools are now in place\n\n\n# setup and build example project\n\nRUN mkdir -p /autobahn/build\nWORKDIR /autobahn\n\nCOPY autobahn /autobahn/autobahn\nCOPY examples /autobahn/examples\nCOPY cmake /autobahn/cmake\nCOPY cmake/Modules /autobahn/cmake/Modules\nCOPY cmake/Includes /autobahn/cmake/Includes\nCOPY CMakeLists.txt /autobahn/CMakeLists.txt\n\nRUN cd build \\\n    && cmake .. \\\n    && make -j4 \\\n    && find examples/ -executable -type f -exec file {} \\;\n\n\n# drop into shell by default\n\nCMD [\"bash\"]\n"
}