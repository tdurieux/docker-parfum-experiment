{
  "startTime": 1674254829754,
  "endTime": 1674254830559,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 121
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 as base\n\nFROM base as builder\n\nENV LANG=C.UTF-8\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        autoconf \\\n        automake \\\n        build-essential \\\n        ca-certificates \\\n        curl \\\n        libleptonica-dev \\\n        libtool \\\n        zlib1g-dev \\\n    && mkdir src \\\n    && cd src \\\n    && curl -f -L https://github.com/agl/jbig2enc/archive/ea6a40a2cbf05efb00f3418f2d0ad71232565beb.tar.gz --output jbig2.tgz \\\n    && tar xzf jbig2.tgz --strip-components=1 \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm jbig2.tgz && rm -rf /var/lib/apt/lists/*;\n\nFROM base\n\nENV LANG=C.UTF-8\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        ghostscript \\\n        gosu \\\n        liblept5 \\\n        pngquant \\\n        python3-venv \\\n        python3-pip \\\n        qpdf \\\n        tesseract-ocr \\\n        tesseract-ocr-eng \\\n        tesseract-ocr-osd \\\n        unpaper \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN python3 -m venv --system-site-packages /appenv \\\n    && . /appenv/bin/activate \\\n    && pip install --no-cache-dir --upgrade pip\n\n# Copy jbig2 from builder image\nCOPY --from=builder /usr/local/bin/ /usr/local/bin/\nCOPY --from=builder /usr/local/lib/ /usr/local/lib/\n\n# Pull in ocrmypdf via requirements.txt and install pinned version\nCOPY src/requirements.txt /app/\n\nRUN . /appenv/bin/activate; \\\n    pip install --no-cache-dir -r /app/requirements.txt\n\nCOPY src/ /app/\n\n# Create restricted privilege user docker:docker to drop privileges\n# to later. We retain root for the entrypoint in order to install\n# additional tesseract OCR language packages.\nRUN groupadd -g 1000 docker && \\\n    useradd -u 1000 -g docker -N --home-dir /app docker && \\\n    mkdir /config /input /output /ocrtemp /archive && \\\n    chown -Rh docker:docker /app /config /input /output /ocrtemp /archive && \\\n    chmod 755 /app/docker-entrypoint.sh\n\nVOLUME [\"/config\", \"/input\", \"/output\", \"/ocrtemp\", \"/archive\"]\n\nENTRYPOINT [\"/app/docker-entrypoint.sh\"]\n\n"
}