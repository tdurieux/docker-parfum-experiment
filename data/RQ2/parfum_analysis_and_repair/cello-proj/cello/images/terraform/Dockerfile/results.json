{
  "startTime": 1674254311253,
  "endTime": 1674254312124,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM hashicorp/terraform:{{TERRAFORM_VERSION}}\n\n#\n# Vault from https://github.com/hashicorp/docker-vault/blob/master/0.X/Dockerfile\n#\n# This is the release of Vault to pull in.\nARG VAULT_VERSION=1.7.1\n\n# Create a vault user and group first so the IDs get set the same way,\n# even as the rest of this may change over time.\nRUN addgroup vault && \\\n    adduser -S -G vault vault\n\n# Set up certificates, our base tools, and Vault.\nRUN set -eux; \\\n    apk add --no-cache ca-certificates gnupg openssl libcap su-exec dumb-init tzdata && \\\n    apkArch=\"$(apk --print-arch)\"; \\\n    case \"$apkArch\" in \\\n        armhf) ARCH='arm' ;; \\\n        aarch64) ARCH='arm64' ;; \\\n        x86_64) ARCH='amd64' ;; \\\n        x86) ARCH='386' ;; \\\n        *) echo >&2 \"error: unsupported architecture: $apkArch\"; exit 1 ;; \\\n    esac && \\\n    VAULT_GPGKEY=C874011F0AB405110D02105534365D9472D7468F; \\\n    found=''; \\\n    for server in \\\n        hkp://p80.pool.sks-keyservers.net:80 \\\n        hkp://keyserver.ubuntu.com:80 \\\n        hkp://pgp.mit.edu:80 \\\n    ; do \\\n        echo \"Fetching GPG key $VAULT_GPGKEY from $server\"; \\\n        gpg --batch --keyserver \"$server\" --recv-keys \"$VAULT_GPGKEY\" && found=yes && break; \\\n    done; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $VAULT_GPGKEY\" && exit 1; \\\n    mkdir -p /tmp/build && \\\n    cd /tmp/build && \\\n    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_${ARCH}.zip && \\\n    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS && \\\n    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS.sig && \\\n    gpg --batch --verify vault_${VAULT_VERSION}_SHA256SUMS.sig vault_${VAULT_VERSION}_SHA256SUMS && \\\n    grep vault_${VAULT_VERSION}_linux_${ARCH}.zip vault_${VAULT_VERSION}_SHA256SUMS | sha256sum -c && \\\n    unzip -d /bin vault_${VAULT_VERSION}_linux_${ARCH}.zip && \\\n    cd /tmp && \\\n    rm -rf /tmp/build && \\\n    gpgconf --kill dirmngr && \\\n    gpgconf --kill gpg-agent && \\\n    apk del gnupg openssl && \\\n    rm -rf /root/.gnupg\n\n# /vault/logs is made available to use as a location to store audit logs, if\n# desired; /vault/file is made available to use as a location with the file\n# storage backend, if desired; the server will be started with /vault/config as\n# the configuration directory so you can add additional config files in that\n# location.\nRUN mkdir -p /vault/logs && \\\n    mkdir -p /vault/file && \\\n    mkdir -p /vault/config && \\\n    chown -R vault:vault /vault\n\nLABEL terraform_version={{TERRAFORM_VERSION}}\n\nRUN mkdir /work ~/.aws\nCOPY ./setup.sh /usr/local/bin/\nCOPY ./requirements.txt /work\nWORKDIR /work\n\nRUN apk -U --no-cache add \\\n    bash \\\n    curl \\\n    jq \\\n    python3 \\\n    unzip && \\\n    apk add py3-pip && \\\n    pip3 install --no-cache-dir -r requirements.txt && \\\n    rm -rf /var/cache/apk/* /work/requirements.txt\n"
}