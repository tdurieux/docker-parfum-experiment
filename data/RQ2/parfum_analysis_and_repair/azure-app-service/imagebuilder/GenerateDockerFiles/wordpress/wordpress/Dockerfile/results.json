{
  "startTime": 1674217408891,
  "endTime": 1674217410869,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 308,
        "lineEnd": 308,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 330,
        "lineEnd": 330,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 206,
        "lineEnd": 206,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 24,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 206,
        "lineEnd": 206,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 2,
        "columnEnd": 90
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 1,
        "columnEnd": 51
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "FROM BASE_IMAGE_NAME_PLACEHOLDER\nLABEL maintainer Azure App Service Container Images <appsvc-images@microsoft.com>\n# ========\n# ENV vars\n# ========\n# ssh\nENV SSH_PASSWD \"root:Docker!\"\nENV SSH_PORT 2222\n#nginx\nENV NGINX_VERSION 1.20.1\nENV NGINX_LOG_DIR \"/var/log/nginx\"\n#php\nENV PHP_HOME \"/usr/local/etc/php\"\nENV PHP_CONF_DIR $PHP_HOME\nENV PHP_CONF_FILE $PHP_CONF_DIR\"/php.ini\"\nENV PHP_CUSTOM_CONF_FILE $PHP_CONF_DIR\"/conf.d/uploads.ini\"\n#Upper bounds of php configs\nENV UB_PHP_MEMORY_LIMIT 512M\nENV UB_UPLOAD_MAX_FILESIZE 256M\nENV UB_POST_MAX_SIZE 256M\nENV UB_MAX_EXECUTION_TIME 120\nENV UB_MAX_INPUT_TIME 120\nENV UB_MAX_INPUT_VARS 10000\n# phpmyadmin\nENV PHPMYADMIN_SOURCE \"/usr/src/phpmyadmin\"\nENV PHPMYADMIN_HOME \"/home/phpmyadmin\"\n# redis\nENV PHPREDIS_VERSION 5.3.4\n#Web Site Home\nENV HOME_SITE \"/home/site/wwwroot\"\n# supervisor\nENV SUPERVISOR_LOG_DIR \"/var/log/supervisor\"\n# wordpress\nENV WORDPRESS_SOURCE \"/usr/src/wordpress\"\nENV WORDPRESS_HOME \"/home/site/wwwroot\"\nENV WORDPRESS_LOCK_HOME \"/home/wp-locks\"\nENV WORDPRESS_LOCK_FILE $WORDPRESS_LOCK_HOME\"/wp_deployment_status.txt\"\n#\nENV DOCKER_BUILD_HOME \"/dockerbuild\"\n#\n# --------\n# ~. tools\n# --------\nRUN set -ex \\\n    && apk update \\\n    && apk add --no-cache openssl git net-tools tcpdump tcptraceroute vim curl wget bash\\\n\t&& cd /usr/bin \\\n\t&& wget https://www.vdberg.org/~richard/tcpping \\\n\t&& chmod 777 tcpping \\\n# ========\n# install the PHP extensions we need and xdebug\n# ========\n    && apk add --no-cache                  \\\n            --virtual .build-dependencies   \\\n                $PHPIZE_DEPS                \\\n                zlib-dev                    \\\n                cyrus-sasl-dev              \\\n                git                         \\\n                autoconf                    \\\n                g++                         \\\n                libtool                     \\\n                make                        \\\n                pcre-dev                    \\    \n            tini                            \\\n            libintl                         \\\n            icu                             \\\n            icu-dev                         \\\n            libxml2-dev                     \\\n            postgresql-dev                  \\\n            freetype-dev                    \\\n            libjpeg-turbo-dev               \\\n            libpng-dev                      \\\n            gmp                             \\\n            gmp-dev                         \\\n            libmemcached-dev                \\\n            imagemagick-dev                 \\\n            libssh2                         \\\n            libssh2-dev                     \\\n            libxslt-dev \\\n    && docker-php-source extract \\\n    && pecl install xdebug-beta apcu \\\n    && pecl install imagick \\\n    && docker-php-ext-enable imagick \\\n    && docker-php-ext-install exif \\\n    && docker-php-ext-install bcmath \\\n    && docker-php-ext-install -j \"$(nproc)\" \\\n\t    mysqli \\\n\t\topcache \\\n\t\tpdo_mysql \\\n\t\tpdo_pgsql \\\n\t&& docker-php-ext-enable apcu \\\n    && docker-php-source delete \\\n    && runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --virtual .drupal-phpexts-rundeps $runDeps \\\n\t&& apk del .build-dependencies \\\n\t&& docker-php-source delete \\\n\t&& mkdir -p /usr/local/php/tmp \\\n\t&& chmod 777 /usr/local/php/tmp \\\n# ------\n# ssh\n# ------\n    && apk add --no-cache openssh-server \\\n    && echo \"$SSH_PASSWD\" | chpasswd \\\n#---------------\n# at\n#---------------\n    && apk add --no-cache at \\\n#---------------\n# openrc service\n#---------------\n   && apk add --no-cache openrc \\\n   && sed -i 's/\"cgroup_add_service/\" # cgroup_add_service/g' /lib/rc/sh/openrc-run.sh \\\n# ----------\n# Nginx\n# ----------\n# RUN set -ex\\\n\t&& GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/var/log/nginx/error.log \\\n\t\t--http-log-path=/var/log/nginx/access.log \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=nginx \\\n\t\t--group=nginx \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module=dynamic \\\n\t\t--with-http_image_filter_module=dynamic \\\n\t\t--with-http_geoip_module=dynamic \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-stream_ssl_preread_module \\\n\t\t--with-stream_realip_module \\\n\t\t--with-stream_geoip_module=dynamic \\\n\t\t--with-http_slice_module \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-compat \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\t--add-module=/usr/src/ngx_cache_purge-c7345057ad5429617fc0823e92e3fa8043840cef \\\n\t\" \\\n\t&& addgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg1 \\\n\t\tlibxslt-dev \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \\\n\t&& curl -fSL https://github.com/nullunit/ngx_cache_purge/archive/c7345057ad5429617fc0823e92e3fa8043840cef.zip -o ngx_cache_purge-2.3.zip \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; do \\\n\t\t\t\n\t\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone \\\n\t; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& unzip ngx_cache_purge-2.3.zip -d /usr/src \\\n\t&& rm ngx_cache_purge-2.3.zip \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& mkdir /etc/nginx/conf.d/ \\\n\t&& mkdir -p /usr/share/nginx/html/ \\\n\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& strip /usr/lib/nginx/modules/*.so \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\t&& rm -rf /usr/src/ngx_cache_purge-c7345057ad5429617fc0823e92e3fa8043840cef \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# Bring in tzdata so users could set the timezones through the environment\n\t# variables\n\t&& apk add --no-cache tzdata \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log \\\n\t#\n\t# change default root path to $HOME_SITE\n\t&& mkdir -p /etc/nginx/conf.d \\\n    && mkdir -p ${HOME_SITE} \\\n    && chown -R www-data:www-data $HOME_SITE \\\n    && echo \"<?php phpinfo();\" > $HOME_SITE/index.php \\\n# -------------\n# log rotate & supervisor\n# -------------\n\t&& apk update \\\n\t&& apk add logrotate supervisor \\\n\t# check log files once every minute, triaged by crond.\n\t&& echo \"*       *       *       *       *       sh /usr/local/bin/triage-rotate.sh\" >> /etc/crontabs/root \\\n# -------------\n# phpmyadmin\n# -------------\n    && mkdir -p $PHPMYADMIN_SOURCE \\\n# ----------\n# ~. upgrade/clean up\n# ----------\n\t&& apk upgrade \\\n\t&& rm -rf /var/cache/apk/* \\\n    && rm -rf /tmp/* \\\n# =========\n# Configure\n# =========\n# RUN set -ex\\\n\t##\n\t&& rm -rf /var/log/nginx \\\n\t##\n\t&& rm -rf /var/log/supervisor \\\n\t## Just take care of nginx and php logs\n\t&& rm -rf /etc/logrotate.d \\\n\t&& mkdir -p /etc/logrotate.d\n# ====================\n# Download and Install\n# ~. tools\n# 1. redis\n# 2. wp-cli\n# ====================\nRUN set -ex \\\n    # --------\n\t# ~. tools\n\t# --------\n    && apk update \\\n    && apk add --no-cache redis \\\n\t# --------\n\t# 1. PHP extensions\n\t# -------- \n\t# install the PHP extensions we need\n\t&& docker-php-source extract \\\n    && curl -f -L -o /tmp/redis.tar.gz https://github.com/phpredis/phpredis/archive/$PHPREDIS_VERSION.tar.gz \\\n    && tar xfz /tmp/redis.tar.gz \\\n    && rm -r /tmp/redis.tar.gz \\\n    && mv phpredis-$PHPREDIS_VERSION /usr/src/php/ext/redis \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tlibjpeg-turbo-dev \\\n\t\tlibpng-dev \\\n                libzip-dev \\\n\t&& docker-php-ext-configure gd --with-jpeg \\\n\t&& docker-php-ext-install gd zip redis \\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --virtual .wordpress-phpexts-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& docker-php-source delete \\\n\t# ----------\n\t# 2. wp-cli tool\n\t# ----------\n\t&& curl -f -L -o /tmp/wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \\\n\t&& chmod +x /tmp/wp-cli.phar \\\n\t&& mv /tmp/wp-cli.phar /usr/local/bin/wp \\\n\t# ----------\n\t# ~. upgrade/clean up\n\t# ----------\n\t&& apk upgrade \\\n\t&& rm -rf /var/cache/apk/* \\\n\t&& rm -rf /tmp/*\n\n# ssh\nCOPY sshd_config /etc/ssh/\n# php\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY php_conf/. /usr/local/etc/php/conf.d/\nCOPY php_fpm_conf/. /usr/local/etc/php-fpm.d/\nCOPY php-fpm.conf /usr/local/etc/\n# nginx\nCOPY nginx_conf/nginx.conf /etc/nginx/nginx.conf\nCOPY nginx_conf/wordpress-server.conf /etc/nginx/conf.d/default.conf\nCOPY nginx_conf/spec-settings.conf /etc/nginx/conf.d/spec-settings.conf\nCOPY nginx_conf/wordpress-server.conf /usr/src/nginx/wordpress-server.conf\nCOPY nginx_conf/wordpress-phpmyadmin-server.conf /usr/src/nginx/wordpress-phpmyadmin-server.conf\nCOPY nginx_conf/temp-server.conf /usr/src/nginx/temp-server.conf\n# phpmyadmin\nCOPY phpmyadmin_src/. $PHPMYADMIN_SOURCE/\n# log rotater\nCOPY logrotate.conf /etc/logrotate.conf\nRUN chmod 444 /etc/logrotate.conf\nCOPY logrotate.d/. /etc/logrotate.d/\nRUN chmod -R 444 /etc/logrotate.d\n# supervisor\nCOPY supervisord.conf /etc/\n# wordpress\nCOPY wordpress_src/. $WORDPRESS_SOURCE/\n#temporary server\nCOPY temp_server_src/. /usr/src/temp-server/\n# php\nCOPY uploads.ini /usr/local/etc/php/conf.d/\n\n\n# =====\n# final\n# =====\nCOPY local_bin/. /usr/local/bin/\nRUN chmod -R +x /usr/local/bin\nEXPOSE $SSH_PORT 80\nEXPOSE 2222 80\nENTRYPOINT [\"entrypoint.sh\"]\n"
}