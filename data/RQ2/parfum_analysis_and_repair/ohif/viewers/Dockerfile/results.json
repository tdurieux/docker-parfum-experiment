{
  "startTime": 1674251916745,
  "endTime": 1674251917964,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This dockerfile is used to publish the `ohif/viewer` image on dockerhub.\n#\n# It's a good example of how to build our static application and package it\n# with a web server capable of hosting it as static content.\n#\n# docker build\n# --------------\n# If you would like to use this dockerfile to build and tag an image, make sure\n# you set the context to the project's root directory:\n# https://docs.docker.com/engine/reference/commandline/build/\n#\n#\n# SUMMARY\n# --------------\n# This dockerfile has two stages:\n#\n# 1. Building the React application for production\n# 2. Setting up our Nginx (Alpine Linux) image w/ step one's output\n#\n\n\n# Stage 1: Build the application\n# docker build -t ohif/viewer:latest .\nFROM node:14-slim as builder\n\nRUN mkdir /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\n# Copy Files\nCOPY .docker /usr/src/app/.docker\nCOPY .webpack /usr/src/app/.webpack\nCOPY extensions /usr/src/app/extensions\nCOPY platform /usr/src/app/platform\nCOPY .browserslistrc /usr/src/app/.browserslistrc\nCOPY aliases.config.js /usr/src/app/aliases.config.js\nCOPY babel.config.js /usr/src/app/babel.config.js\nCOPY lerna.json /usr/src/app/lerna.json\nCOPY package.json /usr/src/app/package.json\nCOPY postcss.config.js /usr/src/app/postcss.config.js\nCOPY yarn.lock /usr/src/app/yarn.lock\n\nRUN apt-get update && apt-get install --no-install-recommends -y python make g++ && rm -rf /var/lib/apt/lists/*;\n# Run the install before copying the rest of the files\nRUN yarn config set workspaces-experimental true && yarn cache clean;\nRUN yarn install --verbose && yarn cache clean;\n\nENV PATH /usr/src/app/node_modules/.bin:$PATH\nENV QUICK_BUILD true\n# ENV GENERATE_SOURCEMAP=false\n# ENV REACT_APP_CONFIG=config/default.js\n\nRUN yarn run build\n\n# Stage 2: Bundle the built application into a Docker container\n# which runs Nginx using Alpine Linux\nFROM nginx:1.21.1-alpine\nRUN apk add --no-cache bash\nRUN rm -rf /etc/nginx/conf.d\nCOPY .docker/Viewer-v2.x /etc/nginx/conf.d\nCOPY .docker/Viewer-v2.x/entrypoint.sh /usr/src/\nRUN chmod 777 /usr/src/entrypoint.sh\nCOPY --from=builder /usr/src/app/platform/viewer/dist /usr/share/nginx/html\nEXPOSE 80\nEXPOSE 443\nENTRYPOINT [\"/usr/src/entrypoint.sh\"]\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}