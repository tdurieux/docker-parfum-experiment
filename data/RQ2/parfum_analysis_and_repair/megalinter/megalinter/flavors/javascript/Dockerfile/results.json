{
  "startTime": 1674219796101,
  "endTime": 1674219797510,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 208,
        "lineEnd": 208,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 247,
        "lineEnd": 247,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 105,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 217,
        "lineEnd": 217,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 227,
        "lineEnd": 227,
        "columnStart": 7,
        "columnEnd": 100
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 51,
        "columnEnd": 67
      }
    }
  ],
  "repairedDockerfile": "# MEGA-LINTER FLAVOR [javascript]: Optimized for JAVASCRIPT or TYPESCRIPT based projects\n###########################################\n###########################################\n## Dockerfile to run MegaLinter ##\n###########################################\n###########################################\n\n# @not-generated\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#FROM__START\nFROM mvdan/shfmt:latest-alpine as shfmt\nFROM hadolint/hadolint:v2.10.0-alpine as hadolint\nFROM mstruebing/editorconfig-checker:2.4.0 as editorconfig-checker\nFROM yoheimuta/protolint:latest as protolint\nFROM zricethezav/gitleaks:v8.8.7 as gitleaks\n#FROM__END\n\n##################\n# Get base image #\n##################\n# 3.10.5 is not usable until https://github.com/jruere/multiprocessing-logging/issues/56 is fixed\nFROM python:3.10.4-alpine3.15\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#ARG__START\n\n#ARG__END\n\n####################\n# Run APK installs #\n####################\n\nWORKDIR /\n\n# APK Packages used by mega-linter core architecture\nRUN apk add --update --no-cache \\\n        bash \\\n        ca-certificates \\\n        curl \\\n        gcc \\\n        git \\\n        libffi-dev \\\n        make \\\n        musl-dev \\\n        openssh && \\\n    git config --global core.autocrlf true\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#APK__START\nRUN apk add --update --no-cache \\\n                go \\\n                bash \\\n                openjdk11 \\\n                nodejs \\\n                npm \\\n                yarn \\\n                libc-dev \\\n                libxml2-dev \\\n                libxml2-utils \\\n                libgcc \\\n                nodejs-current \\\n                ruby \\\n                ruby-dev \\\n                ruby-bundler \\\n                ruby-rdoc\n#APK__END\n\n# PATH for golang\nENV GOROOT=/usr/lib/go \\\n    GOPATH=/go\n# hadolint ignore=DL3044\nENV PATH=\"$PATH\":\"$GOROOT\"/bin:\"$GOPATH\"/bin\nRUN mkdir -p ${GOPATH}/src ${GOPATH}/bin || true && \\\n    # Ignore npm package issues\n    yarn config set ignore-engines true || true && yarn cache clean;\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#PIP__START\nRUN pip3 install --no-cache-dir --upgrade pip && pip3 install --no-cache-dir --upgrade \\\n          'ansible-lint==6.0.2' \\\n          'semgrep' \\\n          'snakemake' \\\n          'sqlfluff' \\\n          'yamllint'\n#PIP__END\n\n############################\n# Install NPM dependencies #\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n\n# Downgrade npm because from npm@v7, npm install crashes when called from root directory within Dockerfile\nENV NODE_OPTIONS=\"--max-old-space-size=8192\"\n#NPM__START\nWORKDIR /node-deps\nRUN npm install --ignore-scripts \\\n                typescript \\\n                @coffeelint/cli \\\n                jscpd@3.3.26 \\\n                stylelint \\\n                stylelint-config-standard \\\n                stylelint-config-sass-guidelines \\\n                stylelint-scss \\\n                graphql \\\n                graphql-schema-linter \\\n                npm-groovy-lint \\\n                htmlhint \\\n                eslint \\\n                eslint-config-airbnb \\\n                eslint-config-prettier \\\n                eslint-config-standard \\\n                eslint-plugin-import \\\n                eslint-plugin-jest \\\n                eslint-plugin-node \\\n                eslint-plugin-prettier \\\n                eslint-plugin-promise \\\n                eslint-plugin-vue \\\n                babel-eslint \\\n                @babel/core \\\n                @babel/eslint-parser \\\n                @microsoft/eslint-formatter-sarif \\\n                standard@15.0.1 \\\n                prettier \\\n                jsonlint \\\n                eslint-plugin-jsonc \\\n                v8r \\\n                eslint-plugin-react \\\n                eslint-plugin-jsx-a11y \\\n                markdownlint-cli \\\n                markdown-link-check \\\n                markdown-table-formatter \\\n                @stoplight/spectral@5.6.0 \\\n                secretlint \\\n                @secretlint/secretlint-rule-preset-recommend \\\n                @secretlint/secretlint-formatter-sarif \\\n                cspell \\\n                sql-lint \\\n                tekton-lint \\\n                prettyjson \\\n                @typescript-eslint/eslint-plugin \\\n                @typescript-eslint/parser && \\\n    npm audit fix --audit-level=critical || true && npm cache clean --force;\nWORKDIR /\n\n#NPM__END\n\n# Add node packages to path #\nENV PATH=\"/node-deps/node_modules/.bin:${PATH}\"\nENV NODE_PATH=\"/node-deps/node_modules\"\n\n##############################\n# Installs ruby dependencies #\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n\n#GEM__START\nRUN echo 'gem: --no-document' >> ~/.gemrc && \\\n    gem install \\\n          scss_lint \\\n          goodcheck\n#GEM__END\n\n#############################################################################################\n## @generated by .automation/build.py using descriptor files, please do not update manually ##\n#############################################################################################\n#OTHER__START\n# actionlint installation\nENV GO111MODULE=on\nRUN go get github.com/rhysd/actionlint/cmd/actionlint\n\n# bash-exec installation\nRUN printf '#!/bin/bash \\n\\nif [[ -x \"$1\" ]]; then exit 0; else echo \"Error: File:[$1] is not executable\"; exit 1; fi' > /usr/bin/bash-exec \\\n    && chmod +x /usr/bin/bash-exec\n\n\n# shellcheck installation\nRUN ML_THIRD_PARTY_DIR=\"/third-party/shellcheck\" \\\n    && mkdir -p ${ML_THIRD_PARTY_DIR} \\\n    && wget -qO- \"https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz\" | tar -xJv --directory ${ML_THIRD_PARTY_DIR} \\\n    && mv \"${ML_THIRD_PARTY_DIR}/shellcheck-stable/shellcheck\" /usr/bin/ \\\n    && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete \\\n    && shellcheck --version\n\n\n# shfmt installation\nCOPY --from=shfmt /bin/shfmt /usr/bin/\n\n# hadolint installation\nCOPY --from=hadolint /bin/hadolint /usr/bin/hadolint\n\n# editorconfig-checker installation\nCOPY --from=editorconfig-checker /usr/bin/ec /usr/bin/editorconfig-checker\n\n# dotenv-linter installation\nRUN wget -q -O - https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s\n\n# ktlint installation\nRUN curl -f --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/latest/download/ktlint && \\\n    chmod a+x ktlint && \\\n    mv \"ktlint\" /usr/bin/\n\n\n# kubeval installation\nRUN ML_THIRD_PARTY_DIR=\"/third-party/kubeval\" \\\n    && mkdir -p ${ML_THIRD_PARTY_DIR} \\\n    && wget -P ${ML_THIRD_PARTY_DIR} -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz \\\n    && tar xf ${ML_THIRD_PARTY_DIR}/kubeval-linux-amd64.tar.gz --directory ${ML_THIRD_PARTY_DIR} \\\n    && mv ${ML_THIRD_PARTY_DIR}/kubeval /usr/local/bin \\\n    && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete && rm ${ML_THIRD_PARTY_DIR}/kubeval-linux-amd64.tar.gz\n\n\n# kubeconform installation\nRUN ML_THIRD_PARTY_DIR=\"/third-party/kubeconform\" \\\n    && KUBECONFORM_VERSION=v0.4.12 \\\n    && mkdir -p ${ML_THIRD_PARTY_DIR} \\\n    && wget -P ${ML_THIRD_PARTY_DIR} -q https://github.com/yannh/kubeconform/releases/download/$KUBECONFORM_VERSION/kubeconform-linux-amd64.tar.gz \\\n    && tar xf ${ML_THIRD_PARTY_DIR}/kubeconform-linux-amd64.tar.gz --directory ${ML_THIRD_PARTY_DIR} \\\n    && mv ${ML_THIRD_PARTY_DIR}/kubeconform /usr/local/bin \\\n    && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete && rm ${ML_THIRD_PARTY_DIR}/kubeconform-linux-amd64.tar.gz\n\n\n# protolint installation\nCOPY --from=protolint /usr/local/bin/protolint /usr/bin/\n\n# gitleaks installation\nCOPY --from=gitleaks /usr/bin/gitleaks /usr/bin/\n\n# trivy installation\nRUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.29.2 && \\\n    wget --tries=5 -q -O /usr/local/bin/sarif.tpl https://raw.githubusercontent.com/aquasecurity/trivy/714b5ca2460363e082d42a8d933c7a0cb7eff7a8/contrib/sarif.tpl && \\\n    chmod 644 /usr/local/bin/sarif.tpl\n\n\n# misspell installation\nRUN ML_THIRD_PARTY_DIR=\"/third-party/misspell\" \\\n    && mkdir -p ${ML_THIRD_PARTY_DIR} \\\n    && curl -f -L -o ${ML_THIRD_PARTY_DIR}/install-misspell.sh https://git.io/misspell \\\n    && sh .${ML_THIRD_PARTY_DIR}/install-misspell.sh \\\n    && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete \\\n    && find /tmp -path '/tmp/tmp.*' -type f -name 'misspell*' -delete -o -type d -empty -delete\n\n\n#OTHER__END\n\n################################\n# Installs python dependencies #\n################################\nCOPY megalinter /megalinter\nRUN python /megalinter/setup.py install \\\n    && python /megalinter/setup.py clean --all \\\n    && rm -rf /var/cache/apk/*\n\n#######################################\n# Copy scripts and rules to container #\n#######################################\nCOPY megalinter/descriptors /megalinter-descriptors\nCOPY TEMPLATES /action/lib/.automation\n\n###########################\n# Get the build arguments #\n###########################\nARG BUILD_DATE\nARG BUILD_REVISION\nARG BUILD_VERSION\n\n#################################################\n# Set ENV values used for debugging the version #\n#################################################\nENV BUILD_DATE=$BUILD_DATE \\\n    BUILD_REVISION=$BUILD_REVISION \\\n    BUILD_VERSION=$BUILD_VERSION\n\n#FLAVOR__START\nENV MEGALINTER_FLAVOR=javascript\n#FLAVOR__END\n\n#########################################\n# Label the instance and set maintainer #\n#########################################\nLABEL com.github.actions.name=\"MegaLinter\" \\\n      com.github.actions.description=\"The ultimate linters aggregator to make sure your projects are clean\" \\\n      com.github.actions.icon=\"code\" \\\n      com.github.actions.color=\"red\" \\\n      maintainer=\"Nicolas Vuillamy <nicolas.vuillamy@gmail.com>\" \\\n      org.opencontainers.image.created=$BUILD_DATE \\\n      org.opencontainers.image.revision=$BUILD_REVISION \\\n      org.opencontainers.image.version=$BUILD_VERSION \\\n      org.opencontainers.image.authors=\"Nicolas Vuillamy <nicolas.vuillamy@gmail.com>\" \\\n      org.opencontainers.image.url=\"https://oxsecurity.github.io/megalinter\" \\\n      org.opencontainers.image.source=\"https://github.com/oxsecurity/megalinter\" \\\n      org.opencontainers.image.documentation=\"https://oxsecurity.github.io/megalinter\" \\\n      org.opencontainers.image.vendor=\"Nicolas Vuillamy\" \\\n      org.opencontainers.image.description=\"Lint your code base with GitHub Actions\"\n\n#EXTRA_DOCKERFILE_LINES__START\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x entrypoint.sh\nENTRYPOINT [\"/bin/bash\", \"/entrypoint.sh\"]\n#EXTRA_DOCKERFILE_LINES__END\n"
}