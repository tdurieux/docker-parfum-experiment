{
  "startTime": 1674254495584,
  "endTime": 1674254497799,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE=nvidia/cuda:10.2-devel\nFROM $BASE\n\nARG NPROC=8\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        bc \\\n        gfortran \\\n        curl \\\n        git \\\n        wget \\\n        autoconf \\\n        lcov \\\n        ccache \\\n        libssl-dev \\\n        libpng-dev \\\n        libfreetype6-dev \\\n        libxft-dev \\\n        libsqlite3-dev \\\n        libbz2-dev \\\n        libcurl4-gnutls-dev \\\n        libatlas-base-dev \\\n        zlib1g-dev \\\n        python2.7-dev \\\n        doxygen \\\n        clang-format \\\n        clang \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV PREFIX=/scratch\nRUN mkdir -p ${PREFIX} && \\\n    cd ${PREFIX} && \\\n    mkdir archive && \\\n    mkdir source && \\\n    mkdir build && \\\n    mkdir install\n\n# Install CMake\nRUN export CMAKE_VERSION=3.16.4 && \\\n    export CMAKE_VERSION_SHORT=3.16 && \\\n    export CMAKE_URL=https://cmake.org/files/v${CMAKE_VERSION_SHORT}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    export CMAKE_SCRIPT=cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    export CMAKE_PREFIX=/opt/cmake/${CMAKE_VERSION_SHORT} && \\\n    wget --quiet ${CMAKE_URL} --output-document=${CMAKE_SCRIPT} && \\\n    mkdir -p ${CMAKE_PREFIX} && \\\n    sh ${CMAKE_SCRIPT} --skip-license --prefix=${CMAKE_PREFIX} && \\\n    rm ${CMAKE_SCRIPT}\nENV PATH=/opt/cmake/3.16/bin:$PATH\n\n# Install OpenMPI\nRUN export OPENMPI_VERSION=4.0.2 && \\\n    export OPENMPI_VERSION_SHORT=4.0 && \\\n    export OPENMPI_SHA1=32ce3761288575fb8e4f6296c9105c3a25cf3235 && \\\n    export OPENMPI_URL=https://www.open-mpi.org/software/ompi/v${OPENMPI_VERSION_SHORT}/downloads/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    export OPENMPI_ARCHIVE=${PREFIX}/archive/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    export OPENMPI_SOURCE_DIR=${PREFIX}/source/openmpi/${OPENMPI_VERSION} && \\\n    export OPENMPI_BUILD_DIR=${PREFIX}/build/openmpi/${OPENMPI_VERSION} && \\\n    export OPENMPI_INSTALL_DIR=/opt/openmpi/${OPENMPI_VERSION_SHORT} && \\\n    wget --quiet ${OPENMPI_URL} --output-document=${OPENMPI_ARCHIVE} && \\\n    echo \"${OPENMPI_SHA1} ${OPENMPI_ARCHIVE}\" | sha1sum -c && \\\n    mkdir -p ${OPENMPI_SOURCE_DIR} && \\\n    tar -xf ${OPENMPI_ARCHIVE} -C ${OPENMPI_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${OPENMPI_BUILD_DIR} && \\\n    cd ${OPENMPI_BUILD_DIR} && \\\n    ${OPENMPI_SOURCE_DIR}/configure --prefix=${OPENMPI_INSTALL_DIR} && \\\n    make -j${NPROC} install && \\\n    rm -rf ${OPENMPI_ARCHIVE} && \\\n    rm -rf ${OPENMPI_BUILD_DIR} && \\\n    rm -rf ${OPENMPI_SOURCE_DIR}\n\nENV MPI_DIR=/opt/openmpi/4.0\n# Put OPENMPI_DIR at the end of the path so that /ust/local/bin/mpiexec will\n# overwrite it\nENV PATH=$PATH:${MPI_DIR}/bin\n\n\n# install Boost\nRUN export BOOST_VERSION=1.67.0 && \\\n    export BOOST_VERSION_UNDERSCORE=$(echo \"$BOOST_VERSION\" | sed -e \"s/\\./_/g\") && \\\n    export BOOST_URL=https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 && \\\n    export BOOST_SHA256=2684c972994ee57fc5632e03bf044746f6eb45d4920c343937a465fd67a5adba && \\\n    export BOOST_ARCHIVE=${PREFIX}/archive/boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 && \\\n    export BOOST_SOURCE_DIR=${PREFIX}/source/boost/${BOOST_VERSION} && \\\n    export BOOST_BUILD_DIR=${PREFIX}/build/boost/${BOOST_VERSION} && \\\n    export BOOST_INSTALL_DIR=/opt/boost/${BOOST_VERSION} && \\\n    wget --quiet ${BOOST_URL} --output-document=${BOOST_ARCHIVE} && \\\n    echo \"${BOOST_SHA256}  ${BOOST_ARCHIVE}\" | sha256sum -c && \\\n    mkdir -p ${BOOST_SOURCE_DIR} && \\\n    tar -xf ${BOOST_ARCHIVE} -C ${BOOST_SOURCE_DIR} --strip-components=1 && \\\n    cd ${BOOST_SOURCE_DIR} && \\\n    ./bootstrap.sh \\\n        --prefix=${BOOST_INSTALL_DIR} \\\n        && \\\n    echo \"using mpi ;\" >> project-config.jam && \\\n    ./b2 -j${NPROC} \\\n        --build-dir=${BOOST_BUILD_DIR} \\\n        hardcode-dll-paths=true dll-path=${BOOST_INSTALL_DIR}/lib \\\n        link=shared \\\n        variant=release \\\n        install \\\n        && \\\n    rm -rf ${BOOST_ARCHIVE} && \\\n    rm -rf ${BOOST_BUILD_DIR} && \\\n    rm -rf ${BOOST_SOURCE_DIR}\n\nENV BOOST_DIR=/opt/boost/1.67.0\n\n# install HDF5\nRUN export HDF5_VERSION=1.10.6 && \\\n    export HDF5_URL=http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.bz2 && \\\n    export HDF5_MD5=03095102a6118c32a75a9b9b40be66f2 && \\\n    export HDF5_ARCHIVE=${PREFIX}/archive/hdf5-${HDF5_VERSION}.tar.bz2 && \\\n    export HDF5_SOURCE_DIR=${PREFIX}/source/hdf5/${HDF5_VERSION} && \\\n    export HDF5_BUILD_DIR=${PREFIX}/build/hdf5/${HDF5_VERSION} && \\\n    export HDF5_INSTALL_DIR=/opt/hdf5/${HDF5_VERSION} && \\\n    wget --quiet ${HDF5_URL} --output-document=${HDF5_ARCHIVE} && \\\n    echo \"${HDF5_MD5} ${HDF5_ARCHIVE}\" | md5sum -c && \\\n    mkdir -p ${HDF5_SOURCE_DIR} && \\\n    tar -xf ${HDF5_ARCHIVE} -C ${HDF5_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${HDF5_BUILD_DIR} && \\\n    cd ${HDF5_BUILD_DIR} && \\\n    ${HDF5_SOURCE_DIR}/configure \\\n        --prefix=${HDF5_INSTALL_DIR} \\\n        --enable-shared \\\n        --disable-static \\\n        --enable-parallel \\\n        && \\\n    make -j${NPROC} install && \\\n    rm -rf ${HDF5_ARCHIVE} && \\\n    rm -rf ${HDF5_BUILD_DIR} && \\\n    rm -rf ${HDF5_SOURCE_DIR}\n\nENV HDF5_DIR=/opt/hdf5/1.10.6\n\n# install NetCDF\nRUN export NETCDF_VERSION=4.7.3 && \\\n    export NETCDF_URL=https://github.com/Unidata/netcdf-c/archive/v${NETCDF_VERSION}.tar.gz && \\\n    export NETCDF_ARCHIVE=${PREFIX}/archive/netcdf-${NETCDF_VERSION}.tar.gz && \\\n    export NETCDF_SOURCE_DIR=${PREFIX}/source/netcdf/${NETCDF_VERSION} && \\\n    export NETCDF_BUILD_DIR=${PREFIX}/build/netcdf/${NETCDF_VERSION} && \\\n    export NETCDF_INSTALL_DIR=/opt/netcdf/${NETCDF_VERSION} && \\\n    wget --quiet ${NETCDF_URL} --output-document=${NETCDF_ARCHIVE} && \\\n    mkdir -p ${NETCDF_SOURCE_DIR} && \\\n    tar -xf ${NETCDF_ARCHIVE} -C ${NETCDF_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${NETCDF_BUILD_DIR} && \\\n    cd ${NETCDF_BUILD_DIR} && \\\n    ${NETCDF_SOURCE_DIR}/configure \\\n        --prefix=${NETCDF_INSTALL_DIR} \\\n        --enable-netcdf-4 \\\n        --enable-shared \\\n        --disable-static \\\n        CC=${MPI_DIR}/bin/mpicc \\\n        CFLAGS=\"-I${HDF5_DIR}/include\" \\\n        LDFLAGS=\"-L${HDF5_DIR}/lib -lhdf5\" \\\n        && \\\n    make -j${NPROC} install && \\\n    rm -rf ${NETCDF_ARCHIVE} && \\\n    rm -rf ${NETCDF_BUILD_DIR} && \\\n    rm -rf ${NETCDF_SOURCE_DIR}\n\nENV NETCDF_DIR=/opt/netcdf/4.7.3\n\n# download Trilinos 13.0.0\n# Current hash has Kokkos 3.1\nRUN export TRILINOS_HASH=9fec35276d846a667bc668ff4cbdfd8be0dfea08 && \\\n    export TRILINOS_SHORT_HASH=9fec3527 && \\\n    export TRILINOS_URL=https://github.com/trilinos/Trilinos/archive/${TRILINOS_HASH}.tar.gz && \\\n    export TRILINOS_ARCHIVE=${PREFIX}/archive/trilinos-${TRILINOS_HASH}.tar.gz && \\\n    export TRILINOS_SOURCE_DIR=${PREFIX}/source/trilinos/${TRILINOS_SHORT_HASH} && \\\n    export TRILINOS_BUILD_DIR=${PREFIX}/build/trilinos/${TRILINOS_SHORT_HASH} && \\\n    export TRILINOS_INSTALL_DIR=/opt/trilinos && \\\n    export OMPI_CXX=${TRILINOS_SOURCE_DIR}/packages/kokkos/bin/nvcc_wrapper && \\\n    wget --quiet ${TRILINOS_URL} --output-document=${TRILINOS_ARCHIVE} && \\\n    mkdir -p ${TRILINOS_SOURCE_DIR} && \\\n    tar -xf ${TRILINOS_ARCHIVE} -C ${TRILINOS_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${TRILINOS_BUILD_DIR} && \\\n    cd ${TRILINOS_BUILD_DIR} && \\\n    cmake \\\n      -D CMAKE_BUILD_TYPE=Release \\\n      -D CMAKE_CXX_STANDARD=14 \\\n      -D BUILD_SHARED_LIBS=ON \\\n      -D TPL_ENABLE_MPI=ON \\\n      -D TPL_ENABLE_BLAS=ON \\\n      -D TPL_ENABLE_LAPACK=ON \\\n      -D TPL_ENABLE_Boost=ON \\\n        -D Boost_INCLUDE_DIRS=${BOOST_DIR}/include \\\n        -D Boost_LIBRARY_DIRS=${BOOST_DIR}/lib \\\n      -D TPL_ENABLE_BoostLib=ON \\\n        -D BoostLib_INCLUDE_DIRS=${BOOST_DIR}/include \\\n        -D BoostLib_LIBRARY_DIRS=${BOOST_DIR}/lib \\\n      -D TPL_ENABLE_Netcdf=ON \\\n        -D Netcdf_INCLUDE_DIRS=$NETCDF_DIR/include \\\n        -D Netcdf_LIBRARY_DIRS=$NETCDF_DIR/lib \\\n      -D Trilinos_ENABLE_EXPLICIT_INSTANTIATION=ON \\\n      -D Trilinos_ENABLE_ALL_PACKAGES=OFF \\\n      -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES=OFF \\\n      -D Trilinos_ENABLE_TESTS=OFF \\\n      -D Trilinos_ENABLE_EXAMPLES=OFF \\\n      -D Trilinos_ENABLE_OpenMP=ON \\\n      -D Trilinos_ENABLE_Teuchos=ON \\\n      -D Trilinos_ENABLE_Intrepid2=ON \\\n      -D Trilinos_ENABLE_Belos=ON \\\n      -D Trilinos_ENABLE_Stratimikos=ON \\\n      -D Trilinos_ENABLE_Thyra=ON \\\n      -D Trilinos_ENABLE_Tpetra=ON \\\n        -D Tpetra_INST_COMPLEX_DOUBLE=OFF \\\n        -D Tpetra_INST_COMPLEX_FLOAT=OFF \\\n        -D Tpetra_INST_SERIAL=ON \\\n        -D Tpetra_INST_OPENMP=ON \\\n      -D Kokkos_ENABLE_OpenMP=ON \\\n      -D TPL_ENABLE_CUDA=ON \\\n      -D Kokkos_ENABLE_Cuda=ON \\\n      -D Kokkos_ENABLE_Cuda_UVM=ON \\\n      -D Kokkos_ENABLE_Cuda_Lambda=ON \\\n      -D Kokkos_ARCH_VOLTA70=ON \\\n      -D Tpetra_INST_CUDA=ON \\\n      -D CMAKE_INSTALL_PREFIX=${TRILINOS_INSTALL_DIR} \\\n    ${TRILINOS_SOURCE_DIR} && \\\n    make -j${NPROC} install && \\\n    export OMPI_CXX=${TRILINOS_INSTALL_DIR}/bin/nvcc_wrapper && \\\n    rm -rf ${TRILINOS_ARCHIVE} && \\\n    rm -rf ${TRILINOS_BUILD_DIR} && \\\n    rm -rf ${TRILINOS_SOURCE_DIR}\n\nENV TRILINOS_DIR=/opt/trilinos\n\n# Benchmark support library\nENV BENCHMARK_DIR=/opt/benchmark\nRUN cd ${PREFIX} && \\\n    git clone https://github.com/google/benchmark.git -b v1.5.0 && \\\n    cd benchmark && \\\n    git clone https://github.com/google/googletest.git -b release-1.10.0 && \\\n    mkdir build && cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=${BENCHMARK_DIR} .. && \\\n    make -j${NPROC} && make install && \\\n    cd ../.. && rm -rf benchmark\n"
}