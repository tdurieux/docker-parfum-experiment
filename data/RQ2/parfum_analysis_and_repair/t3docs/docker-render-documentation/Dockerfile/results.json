{
  "startTime": 1674218057998,
  "endTime": 1674218059436,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 6,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 97,
        "columnStart": 6,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 6,
        "columnEnd": 70
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n# Reflect the development progress. Set to the release number or something\n# like vX.Y-dev\nARG OUR_IMAGE_VERSION=v2.9.0\n# Specify tag. Should be 'latest' or 'develop' or '<RELEASE_VERSION>' where\n# release version looks like 'v2.9.0'\nARG OUR_IMAGE_TAG=latest\n#\n# flag for apt-get - affects only build time\nARG DEBIAN_FRONTEND=noninteractive\nARG DOCKRUN_PREFIX=\"dockrun_\"\nARG hack_OUR_IMAGE=\"t3docs/render-documentation:${OUR_IMAGE_TAG}\"\nARG hack_OUR_IMAGE_SHORT=\"t3rd\"\nARG OUR_IMAGE_SLOGAN=\"t3rd - TYPO3 render documentation\"\n#\n# PlantUML tagged file name as shown on https://plantuml.com/en/download\n# Doesn't work at the moment, but should in future.\nARG PLANTUML_TAGGED_FILE_NAME=\"plantuml.1.2020.20.jar\"\n\n# requires toolchain version >= 2.7.0, since /ALL/dummy_webroot is gone\n\nENV \\\n   LC_ALL=C.UTF-8 \\\n   LANG=C.UTF-8 \\\n   HOME=\"/ALL/userhome\" \\\n   OUR_IMAGE=\"$hack_OUR_IMAGE\" \\\n   OUR_IMAGE_SHORT=\"$hack_OUR_IMAGE_SHORT\" \\\n   OUR_IMAGE_VERSION=\"$OUR_IMAGE_VERSION\" \\\n   PIP_NO_CACHE_DIR=1 \\\n   PIP_CACHE_DIR=\"/ALL/userhome/.cache/pip\" \\\n   PIP_DISABLE_PIP_VERSION_CHECK=1 \\\n   PIP_NO_PYTHON_VERSION_WARNING=1 \\\n   THEME_MTIME=\"1626861600\" \\\n   THEME_NAME=\"unknown\" \\\n   THEME_VERSION=\"unknown\" \\\n   TOOLCHAIN_TOOL_VERSION=\"develop (1.2.0-dev)\" \\\n   TOOLCHAIN_UNPACKED=\"Toolchain_RenderDocumentation-2.11.1\" \\\n   TOOLCHAIN_URL=\"https://github.com/marble/Toolchain_RenderDocumentation/archive/v2.11.1.zip\" \\\n   TOOLCHAIN_VERSION=\"2.11.1\" \\\n   TYPOSCRIPT_PY_URL=\"https://raw.githubusercontent.com/TYPO3-Documentation/Pygments-TypoScript-Lexer/v2.2.4/typoscript.py\" \\\n   TYPOSCRIPT_PY_VERSION=\"v2.2.4\"\n\n# Notation:\n#  TOOLCHAIN_UNPACKED=\"Toolchain_RenderDocumentation-develop\"\n#  TOOLCHAIN_URL=\"https://github.com/marble/Toolchain_RenderDocumentation/archive/develop.zip\"\n#  TOOLCHAIN_VERSION=\"2.10-dev\"\n\n\nLABEL \\\n   Maintainer=\"TYPO3 Documentation Team\" \\\n   Description=\"This image renders TYPO3 documentation.\" \\\n   Vendor=\"t3docs\" Version=\"$OUR_IMAGE_VERSION\"\n\nCOPY ALL-for-build  /ALL\n\nWORKDIR /ALL/venv\n\nRUN \\\n   true \"Create executable COMMENT as a workaround to allow commenting here\" \\\n   && cp /bin/true /bin/COMMENT \\\n   \\\n   && COMMENT \"Garantee folders\" \\\n   && mkdir /PROJECT \\\n   && mkdir /RESULT \\\n   && mkdir /THEMES \\\n   && mkdir /WHEELS \\\n   \\\n   && COMMENT \"Avoid GIT bug\" \\\n   && cp /ALL/global-gitconfig.cfg /root/.gitconfig \\\n   && cp /ALL/global-gitconfig.cfg /.gitconfig \\\n   && chmod 666 /.gitconfig \\\n   \\\n   && COMMENT \"Install and upgrade system packages\" \\\n   && apt-get update \\\n   && apt-get install --no-install-recommends -y apt-utils 2>/dev/null \\\n   && apt-get upgrade -qy \\\n\n   && COMMENT \"What the toolchains needs\" \\\n   && apt-get install -yq --no-install-recommends \\\n      git \\\n      graphviz \\\n      moreutils \\\n      pandoc \\\n      plantuml \\\n      rsync \\\n      tidy \\\n      unzip \\\n      wget \\\n      zip \\\n\n   && COMMENT \"Make sure we have the latest plantuml.jar - DISABLED this time\" \\\n   && COMMENT \"wget https://sourceforge.net/projects/plantuml/files/${PLANTUML_TAGGED_FILE_NAME}/download \\\n           --quiet --output-document /usr/share/plantuml/${PLANTUML_TAGGED_FILE_NAME}\" \\\n   && COMMENT \"PLANTUML_TAGGED_FILE :: /usr/share/plantuml/${PLANTUML_TAGGED_FILE_NAME}\" \\\n\n   && COMMENT \"Install python2, pip, setuptools, wheel\" \\\n   && apt-get install --no-install-recommends -yq \\\n      python2 \\\n   && COMMENT \"Make python2 the default\" \\\n   && ln -s /usr/bin/python2 /usr/bin/python \\\n   && /usr/bin/wget  https://bootstrap.pypa.io/pip/2.7/get-pip.py \\\n           --quiet --output-document /ALL/Downloads/get-pip.py \\\n   && /usr/bin/python2 /ALL/Downloads/get-pip.py \\\n\n   && COMMENT \"What we need - convenience tools\" \\\n   && apt-get install -yq --no-install-recommends \\\n      less \\\n      nano \\\n      ncdu \\\n\n   && COMMENT \"Try extra cleaning besides /etc/apt/apt.conf.d/docker-clean\" \\\n   && apt-get clean \\\n   && rm -rf /var/lib/apt/lists/* \\\n\n   && COMMENT \"Python stuff\" \\\n   && /usr/local/bin/pip install --upgrade virtualenv \\\n\n   && echo \"Empty /ALL/venv/.venv\" \\\n   && rm -rf /ALL/venv/.venv/.gitkeep \\\n\n   && echo \"Disable /ALL/venv/Pipfile.lock - it didn't work reliably\" \\\n   && rm -f Pipfile.lock.DISABLED \\\n   && if [ -f \"Pipfile.lock\" ]; then mv Pipfile.lock Pipfile.lock.DISABLED; fi \\\n\n   && virtualenv .venv \\\n   && .venv/bin/pip install --upgrade --disable-pip-version-check install pip pathlib2 \\\n   && .venv/bin/pip install --disable-pip-version-check install -r requirements.txt \\\n   && echo source $(pwd)/.venv/bin/activate >>$HOME/.bashrc \\\n\n   && COMMENT bash -c 'find /ALL/Downloads -name \"*.whl\" -exec .venv/bin/pip install -v {} \\;' \\\n\n   && COMMENT \"All files of the theme of a given theme version should have the\" \\\n   && COMMENT \"same mtime (last commit) to not turn off Sphinx caching\" \\\n   && python=$(pwd)/.venv/bin/python \\\n   && destdir=$(dirname $($python -c \"import sphinx_typo3_theme; print sphinx_typo3_theme.__file__\")) \\\n   && THEME_MTIME=$($python -c \"import sphinx_typo3_theme; print sphinx_typo3_theme.get_theme_mtime()\") \\\n   && THEME_NAME=$($python -c \"import sphinx_typo3_theme; print sphinx_typo3_theme.get_theme_name()\") \\\n   && THEME_VERSION=$($python -c \"import sphinx_typo3_theme; print sphinx_typo3_theme.__version__\") \\\n   && find $destdir -exec touch --no-create --time=mtime --date=\"$(date --rfc-2822 --date=@$THEME_MTIME)\" {} \\; \\\n\n   && COMMENT \"Update TypoScript lexer for highlighting. It comes with Sphinx\" \\\n   && COMMENT \"but isn't up to date there. So we use it from our own repo.\" \\\n   && COMMENT \"usually: /usr/local/lib/python2.7/site-packages/pygments/lexers\" \\\n   && destdir=$(dirname $($python -c \"import pygments; print pygments.__file__\"))/lexers \\\n   && rm $destdir/typoscript.* \\\n   && wget $TYPOSCRIPT_PY_URL --quiet --output-document $destdir/typoscript.py \\\n   && echo curdir=$(pwd); cd $destdir; $python _mapping.py; cd $curdir \\\n   && curdir=$(pwd); cd $destdir; $python _mapping.py; cd $curdir \\\n   \\\n   && COMMENT \"Provide the toolchain\" \\\n   && wget ${TOOLCHAIN_URL} -qO /ALL/Downloads/Toolchain_RenderDocumentation.zip \\\n   && unzip /ALL/Downloads/Toolchain_RenderDocumentation.zip -d /ALL/Toolchains \\\n   && mv /ALL/Toolchains/${TOOLCHAIN_UNPACKED} /ALL/Toolchains/RenderDocumentation \\\n   && rm /ALL/Downloads/Toolchain_RenderDocumentation.zip \\\n   \\\n   && COMMENT \"Final cleanup\" \\\n   && apt-get clean \\\n   && COMMENT pip cache purge \\\n   && rm -rf /tmp/* /ALL/userhome/.cache \\\n   \\\n   && COMMENT \"Make sure other users can write\" \\\n   && chmod -R a+w \\\n      /ALL/Makedir \\\n      /ALL/userhome \\\n      /ALL/venv \\\n      /RESULT \\\n   \\\n   && COMMENT \"Memorize the settings in the container\" \\\n   && echo \"export DEBIAN_FRONTEND=\\\"${DEBIAN_FRONTEND}\\\"\"         >> /ALL/Downloads/envvars.sh \\\n   && echo \"export DOCKRUN_PREFIX=\\\"${DOCKRUN_PREFIX}\\\"\"           >> /ALL/Downloads/envvars.sh \\\n   && echo \"export OS_NAME=\\\"$(   grep -e ^NAME=    /etc/os-release | sed -r 's/.*\"(.+)\".*/\\1/')\\\"\"  >> /ALL/Downloads/envvars.sh \\\n   && echo \"export OS_VERSION=\\\"$(grep -e ^VERSION= /etc/os-release | sed -r 's/.*\"(.+)\".*/\\1/')\\\"\"  >> /ALL/Downloads/envvars.sh \\\n   && echo \"export OUR_IMAGE=\\\"${OUR_IMAGE}\\\"\"                     >> /ALL/Downloads/envvars.sh \\\n   && echo \"export OUR_IMAGE_SHORT=\\\"${OUR_IMAGE_SHORT}\\\"\"         >> /ALL/Downloads/envvars.sh \\\n   && echo \"export OUR_IMAGE_SLOGAN=\\\"${OUR_IMAGE_SLOGAN}\\\"\"       >> /ALL/Downloads/envvars.sh \\\n   && echo \"export OUR_IMAGE_TAG=\\\"${OUR_IMAGE_TAG}\\\"\"             >> /ALL/Downloads/envvars.sh \\\n   && echo \"export OUR_IMAGE_VERSION=\\\"${OUR_IMAGE_VERSION}\\\"\"     >> /ALL/Downloads/envvars.sh \\\n   && echo \"export TOOLCHAIN_URL=\\\"${TOOLCHAIN_URL}\\\"\"             >> /ALL/Downloads/envvars.sh \\\n   \\\n   && COMMENT \"Let\\'s have some debug info ('::' as separator)\" \\\n   && echo \"\\\n      $OUR_IMAGE_VERSION\\n\\\n      Versions used for $OUR_IMAGE_VERSION:\\n\\\n      Theme                :: $THEME_NAME :: $THEME_VERSION :: mtime:$THEME_MTIME\\n\\\n      Toolchain            :: RenderDocumentation :: $TOOLCHAIN_VERSION\\n\\\n      Toolchain tool       :: TCT                 :: $TOOLCHAIN_TOOL_VERSION\\n\\\n      TYPO3-Documentation  :: typo3.latex         :: v1.1.0\\n\\\n      TypoScript lexer     :: typoscript.py       :: $TYPOSCRIPT_PY_VERSION\\n\\\n      \\n\\\n      DOCKRUN_PREFIX       :: ${DOCKRUN_PREFIX}\\n\\\n      OS_NAME              :: $(grep -e ^NAME=    /etc/os-release | sed -r 's/.*\"(.+)\".*/\\1/')\\n\\\n      OS_VERSION           :: $(grep -e ^VERSION= /etc/os-release | sed -r 's/.*\"(.+)\".*/\\1/')\\n\\\n      OUR_IMAGE            :: ${OUR_IMAGE}\\n\\\n      OUR_IMAGE_SHORT      :: ${OUR_IMAGE_SHORT}\\n\\\n      OUR_IMAGE_SLOGAN     :: ${OUR_IMAGE_SLOGAN}\\n\\\n      OUR_IMAGE_TAG        :: ${OUR_IMAGE_TAG}\\n\\\n      OUR_IMAGE_VERSION    :: ${OUR_IMAGE_VERSION}\\n\\\n      TOOLCHAIN_TOOL_URL   :: ${TOOLCHAIN_TOOL_URL}\\n\\\n      TOOLCHAIN_URL        :: ${TOOLCHAIN_URL}\\n\\\n      \\n\" | cut -b 7- > /ALL/Downloads/buildinfo.txt \\\n   && cat /ALL/Downloads/envvars.sh >> /ALL/Downloads/buildinfo.txt \\\n   && cat /ALL/Downloads/buildinfo.txt\n\n\nENTRYPOINT [\"/ALL/Menu/mainmenu.sh\"]\n\nCMD []\n"
}