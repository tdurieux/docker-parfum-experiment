{
  "startTime": 1674249810218,
  "endTime": 1674249810961,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# =================== BASE BUILD LAYER ===================\n# this layer is used to prepare a common layer for both debug and release builds\nFROM golang:1.17 as secrets-provider-builder-base\nMAINTAINER CyberArk Software Ltd.\n\nENV GOOS=linux \\\n    GOARCH=amd64 \\\n    CGO_ENABLED=0\n\n# On CyberArk dev laptops, golang module dependencies are downloaded with a\n# corporate proxy in the middle. For these connections to succeed we need to\n# configure the proxy CA certificate in build containers.\n#\n# To allow this script to also work on non-CyberArk laptops where the CA\n# certificate is not available, we copy the (potentially empty) directory\n# and update container certificates based on that, rather than rely on the\n# CA file itself.\nADD build_ca_certificate /usr/local/share/ca-certificates/\nRUN update-ca-certificates\n\nRUN go get -u github.com/jstemmer/go-junit-report\n\nWORKDIR /opt/secrets-provider-for-k8s\n\nEXPOSE 8080\n\nCOPY go.mod go.sum ./\n\n# Add a layer of prefetched modules so the modules are already cached in case we rebuild\nRUN go mod download\n\n# =================== RELEASE BUILD LAYER ===================\n# this layer is used to build the release binaries\nFROM secrets-provider-builder-base as secrets-provider-builder\n\nCOPY . .\n\n# this value is set in ./bin/build\nARG TAG\n\nRUN go build \\\n    -a \\\n    -installsuffix cgo \\\n    -ldflags=\"-X github.com/cyberark/secrets-provider-for-k8s/pkg/secrets.Tag=$TAG\" \\\n    -o secrets-provider \\\n    ./cmd/secrets-provider\n\n# =================== DEBUG BUILD LAYER ===================\n# this layer is used to build the debug binaries\nFROM secrets-provider-builder-base as secrets-provider-builder-debug\n\n# Build Delve - debugging tool for Go\nRUN go get github.com/go-delve/delve/cmd/dlv\n\n# Expose port 40000 for debugging\nEXPOSE 40000\n\nCOPY . .\n\n# Build debug flavor without compilation optimizations using \"all=-N -l\"\nRUN go build -a -installsuffix cgo -gcflags=\"all=-N -l\" -o secrets-provider ./cmd/secrets-provider\n\n# =================== BUSYBOX LAYER ===================\n# this layer is used to get binaries into the main container\nFROM busybox\n\n# =================== BASE MAIN CONTAINER ===================\n# this layer is used to prepare a common layer for both debug and release containers\nFROM alpine:3.14 as secrets-provider-base\nMAINTAINER CyberArk Software Ltd.\n\n# Ensure openssl development libraries are always up to date\nRUN apk add --no-cache openssl-dev\n\n# copy a few commands from busybox\nCOPY --from=busybox /bin/tar /bin/tar\nCOPY --from=busybox /bin/sleep /bin/sleep\nCOPY --from=busybox /bin/sh /bin/sh\nCOPY --from=busybox /bin/ls /bin/ls\nCOPY --from=busybox /bin/id /bin/id\nCOPY --from=busybox /bin/whoami /bin/whoami\nCOPY --from=busybox /bin/mkdir /bin/mkdir\nCOPY --from=busybox /bin/chmod /bin/chmod\nCOPY --from=busybox /bin/cat /bin/cat\nCOPY bin/run-time-scripts /usr/local/bin/\n\nRUN apk add --no-cache -u shadow libc6-compat && \\\n    # Add limited user\n    groupadd -r secrets-provider \\\n             -g 777 && \\\n    useradd -c \"secrets-provider runner account\" \\\n            -g secrets-provider \\\n            -u 777 \\\n            -m \\\n            -r \\\n            secrets-provider && \\\n    # Ensure plugin dir is owned by secrets-provider user\n    mkdir -p /usr/local/lib/secrets-provider /etc/conjur/ssl /run/conjur /conjur/status && \\\n    # Use GID of 0 since that is what OpenShift will want to be able to read things\n    chown secrets-provider:0 /usr/local/lib/secrets-provider \\\n                           /etc/conjur/ssl \\\n                           /run/conjur \\\n                           /conjur/status && \\\n    # We need open group permissions in these directories since OpenShift won't\n    # match our UID when we try to write files to them\n    chmod 770 /etc/conjur/ssl \\\n              /run/conjur && \\\n    chmod 777 /conjur/status\n\nUSER secrets-provider\n\n# =================== RELEASE MAIN CONTAINER ===================\nFROM secrets-provider-base as secrets-provider\n\nCOPY --from=secrets-provider-builder /opt/secrets-provider-for-k8s/secrets-provider /usr/local/bin/\n\nCMD [ \"/usr/local/bin/secrets-provider\"]\n\n# =================== DEBUG MAIN CONTAINER ===================\nFROM secrets-provider-base as secrets-provider-debug\n\nCOPY --from=secrets-provider-builder-debug /go/bin/dlv /usr/local/bin/\n\nCOPY --from=secrets-provider-builder-debug /opt/secrets-provider-for-k8s/secrets-provider /usr/local/bin/\n\n# Execute secrets provider wrapped with dlv debugger listening on port 40000 for remote debugger connection.\n# Will wait indefinitely until a debugger is connected.\nCMD [\"/usr/local/bin/dlv\",  \\\n     \"--listen=:40000\",     \\\n     \"--headless=true\",     \\\n     \"--api-version=2\",     \\\n     \"--accept-multiclient\",\\\n     \"exec\",                \\\n     \"/usr/local/bin/secrets-provider\"]\n\n# =================== MAIN CONTAINER (REDHAT) ===================\nFROM registry.access.redhat.com/ubi8/ubi as secrets-provider-for-k8s-redhat\nMAINTAINER CyberArk Software Ltd.\n\nARG VERSION\n\nLABEL name=\"secrets-provider-for-k8s\"\nLABEL vendor=\"CyberArk\"\nLABEL version=\"$VERSION\"\nLABEL release=\"$VERSION\"\nLABEL summary=\"Store secrets in Conjur or DAP and consume them in your Kubernetes / Openshift application containers\"\nLABEL description=\"To retrieve the secrets from Conjur or DAP, the CyberArk Secrets Provider for Kubernetes runs as an \\\n init container or separate application container and fetches the secrets that the pods require\"\n\nRUN yum -y distro-sync\n\n# Add limited user\nRUN groupadd -r secrets-provider \\\n             -g 777 && \\\n    useradd -c \"secrets-provider runner account\" \\\n            -g secrets-provider \\\n            -u 777 \\\n            -m \\\n            -r \\\n            secrets-provider && \\\n    # Ensure plugin dir is owned by secrets-provider user\n    mkdir -p /usr/local/lib/secrets-provider /etc/conjur/ssl /run/conjur /conjur/status /licenses && \\\n    # Use GID of 0 since that is what OpenShift will want to be able to read things\n    chown secrets-provider:0 /usr/local/lib/secrets-provider \\\n                           /etc/conjur/ssl \\\n                           /run/conjur \\\n                           /conjur/status && \\\n    # We need open group permissions in these directories since OpenShift won't\n    # match our UID when we try to write files to them\n    chmod 770 /etc/conjur/ssl \\\n              /run/conjur && \\\n    chmod 777 /conjur/status\n\nCOPY --from=secrets-provider-builder /opt/secrets-provider-for-k8s/secrets-provider /usr/local/bin/\nCOPY bin/run-time-scripts /usr/local/bin/\n\nCOPY LICENSE.md /licenses\n\nUSER secrets-provider\n\nENTRYPOINT [ \"/usr/local/bin/secrets-provider\"]\n\n"
}