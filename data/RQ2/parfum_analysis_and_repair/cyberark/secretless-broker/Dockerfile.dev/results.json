{
  "startTime": 1674247987848,
  "endTime": 1674247988816,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.17-buster\nMAINTAINER CyberArk Software Ltd.\n\n# On CyberArk dev laptops, golang module dependencies are downloaded with a\n# corporate proxy in the middle. For these connections to succeed we need to\n# configure the proxy CA certificate in build containers.\n#\n# To allow this script to also work on non-CyberArk laptops where the CA\n# certificate is not available, we copy the (potentially empty) directory\n# and update container certificates based on that, rather than rely on the\n# CA file itself.\nADD build_ca_certificate /usr/local/share/ca-certificates/\nRUN update-ca-certificates\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y curl \\\n                       jq \\\n                       less \\\n                       vim && rm -rf /var/lib/apt/lists/*;\n\nENV ROOT_DIR=/secretless\n\nWORKDIR $ROOT_DIR\n\nRUN groupadd -r secretless \\\n             -g 777 && \\\n    useradd -c \"secretless runner account\" \\\n            -g secretless \\\n            -u 777 \\\n            -m \\\n            -r \\\n            secretless && \\\n    mkdir -p /usr/local/lib/secretless \\\n             /sock && \\\n    chown secretless:secretless /usr/local/lib/secretless \\\n                                /sock\n\n# these are binaries necessary for development\n# the happen to be written in Go:\n#\n# go-junit-report => Convert go test output to junit xml\n# goconvey => Go testing tool\n# reflex => Utility for watching files and executing process in response to changes\n# gocov => converts native coverage output to gocov's JSON interchange format\n# gocov-xml => converts gocov format to XML for use with Jenkins/Cobertura\n# gocovmerge => Merges multiple 'go test -coverprofile' results into one profile\nRUN go get -u github.com/jstemmer/go-junit-report && \\\n    go get github.com/smartystreets/goconvey && \\\n    go get github.com/cespare/reflex && \\\n    go get github.com/axw/gocov/gocov && \\\n    go get github.com/AlekSi/gocov-xml && \\\n    go get github.com/wadey/gocovmerge\n\n# go mod dependency management for the secretless project\nCOPY go.mod go.sum /secretless/\nCOPY third_party/ /secretless/third_party\n\nRUN go mod download\n\n# TODO: all the stuff below this line is not needed\n# this image should just be a development environment for Secretless\n# and not be a snapshot of the repository\n# the repo should be volume mounted\n# NOTE: don't forget all the parts of the repo that are dependent on the definition\n# of secretless-dev as dev environment + secretless repo snapshot +\n# binaries, you'll need to fix them all\n\n# TODO: Expand this with build args when we support other arches\nENV GOOS=linux \\\n    GOARCH=amd64 \\\n    CGO_ENABLED=1\n\n# secretless source files\nCOPY ./cmd ./cmd\nCOPY ./internal ./internal\nCOPY ./pkg ./pkg\nCOPY ./resource-definitions ./resource-definitions\n\n# Not strictly needed but we might as well do this step too since\n# the dev may want to run the binary\nRUN go build -o dist/$GOOS/$GOARCH/secretless-broker ./cmd/secretless-broker && \\\n    go build -o dist/$GOOS/$GOARCH/summon2 ./cmd/summon2 && \\\n    ln -s $ROOT_DIR/dist/$GOOS/$GOARCH/secretless-broker /usr/local/bin/ && \\\n    ln -s $ROOT_DIR/dist/$GOOS/$GOARCH/summon2 /usr/local/bin/\n\nCOPY . .\n"
}