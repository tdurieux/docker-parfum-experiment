{
  "startTime": 1674250596290,
  "endTime": 1674250597624,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 377,
        "lineEnd": 377,
        "columnStart": 7,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 367,
        "lineEnd": 367,
        "columnStart": 26,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 247,
        "lineEnd": 247,
        "columnStart": 7,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 365,
        "lineEnd": 365,
        "columnStart": 8,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 367,
        "lineEnd": 367,
        "columnStart": 26,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 424,
        "lineEnd": 424,
        "columnStart": 12,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Official Dockware Image\n# Tag: {{ orca.tag }}\n# Copyright 2022 dasistweb GmbH\n#\nFROM {{ base_image }}\nLABEL title=\"Dockware {{ orca.image }}:{{ orca.tag }}\" \\\n      version=\"{{version}}\" \\\n      maintainer=\"dasistweb GmbH\"\n\n# remember build-date\nRUN date >/build-date.txt && \\\n    mkdir -p /var/www && \\\n    mkdir -p /var/www/scripts\n\n# add our changelog to the containers\nADD ./assets/CHANGELOG.md /var/www/CHANGELOG.md\n\n\n\n{% block image_variables %}\n## ***********************************************************************\n##  IMAGE VARIABLES\n## ***********************************************************************\n{% block image_variables_main %}\nENV TZ Europe/Berlin\nENV PHP_VERSION {{php.default_version}}\nENV APACHE_DOCROOT {{ apache.docroot }}\nENV SW_TASKS_ENABLED 0\nENV COMPOSER_VERSION not-set\nENV NODE_VERSION {{ node.version }}\nRUN echo \"export TZ=${TZ}\" >> /etc/profile \\\n && echo \"export PHP_VERSION=${PHP_VERSION}\" >> /etc/profile \\\n && echo \"export APACHE_DOCROOT=${APACHE_DOCROOT}\" >> /etc/profile \\\n && echo \"export SW_TASKS_ENABLED=${SW_TASKS_ENABLED}\" >> /etc/profile \\\n && echo \"export COMPOSER_VERSION=${COMPOSER_VERSION}\" >> /etc/profile \\\n && echo \"export NODE_VERSION=${NODE_VERSION}\" >> /etc/profile\n{% endblock %}\n\n{% block image_variables_dev %}\n\nENV SSH_USER not-set\nENV SSH_PWD not-set\nENV XDEBUG_REMOTE_HOST \"host.docker.internal\"\nENV XDEBUG_CONFIG \"idekey=PHPSTORM\"\nENV PHP_IDE_CONFIG \"serverName=localhost\"\nENV XDEBUG_ENABLED 0\nENV FILEBEAT_ENABLED 0\nENV TIDEWAYS_KEY not-set\nENV TIDEWAYS_ENV production\nENV TIDEWAYS_SERVICE web\n\n\nRUN echo \"export SSH_USER=${SSH_USER}\" >> /etc/profile \\\n && echo \"export SSH_PWD=${SSH_PWD}\" >> /etc/profile \\\n && echo \"export XDEBUG_ENABLED=${XDEBUG_ENABLED}\" >> /etc/profile \\\n && echo \"export XDEBUG_REMOTE_HOST=${XDEBUG_REMOTE_HOST}\" >> /etc/profile \\\n && echo \"export XDEBUG_CONFIG=${XDEBUG_CONFIG}\" >> /etc/profile \\\n && echo \"export PHP_IDE_CONFIG=${PHP_IDE_CONFIG}\" >> /etc/profile \\\n && echo \"export FILEBEAT_ENABLED=${FILEBEAT_ENABLED}\" >> /etc/profile \\\n && echo \"export TIDEWAYS_KEY=${TIDEWAYS_KEY}\" >> /etc/profile \\\n && echo \"export TIDEWAYS_ENV=${TIDEWAYS_ENV}\" >> /etc/profile \\\n && echo \"export TIDEWAYS_SERVICE=${TIDEWAYS_SERVICE}\" >> /etc/profile\n{% endblock %}\n\n{% block image_variables_mysql %}\nENV MYSQL_USER not-set\nENV MYSQL_PWD not-set\nRUN echo \"export MYSQL_USER=${MYSQL_USER}\" >> /etc/profile \\\n    && echo \"export MYSQL_PWD=${MYSQL_PWD}\" >> /etc/profile\n{% endblock %}\n\n{% block image_variables_sw_currency %}\nENV SW_CURRENCY 'not-set'\nRUN echo \"export SW_CURRENCY=${SW_CURRENCY}\" >> /etc/profile\n{% endblock %}\n\n{% block image_variables_sw_api_access_key %}\nENV SW_API_ACCESS_KEY 'not-set'\nRUN echo \"export SW_API_ACCESS_KEY=${SW_API_ACCESS_KEY}\" >> /etc/profile\n{% endblock %}\n\n{% endblock %}\n\n\n## ***********************************************************************\n##  BASE REQUIREMENTS\n## ***********************************************************************\nRUN apt-get update \\\n    {% block base %}\n    && apt-get install -y gosu \\\n    && apt-get install -y sudo \\\n    && apt-get install -y wget \\\n    && apt-get install -y curl \\\n    && apt-get install -y unzip \\\n    && apt-get install -y bzip2 \\\n    && apt-get install -y ssmtp \\\n    && apt-get install -y lsof \\\n    && apt-get install -y openssh-server \\\n    && apt-get install -y cron \\\n    && apt-get install -y vim \\\n    && apt-get install -y nano \\\n    && apt-get install -y jq \\\n    && apt-get install -y gnupg2 \\\n    && apt-get install -y gpg-agent \\\n    && apt-get install -y chromium-browser \\\n    && mkdir /var/run/sshd \\\n    # TIMEZONE SETTINGS\n    # otherwise we would have an interactive input dialog\n    && ln -fs /usr/share/zoneinfo/Europe/Berlin /etc/localtime \\\n    {% block base_tzdata %}\n    && apt-get install -y tzdata \\\n    && dpkg-reconfigure --frontend noninteractive tzdata  \\\n    {% endblock %} \\\n    {% block base_xdg %}\n    && apt-get install -y xdg-utils \\\n    {% endblock %}\n    {% block base_sodium %}\n    && apt-get install -y libsodium-dev \\\n    && apt-get install -y php-dev \\\n    && apt-get install -y php-pear \\\n    && pecl install -f libsodium \\\n    && apt-get remove -y php-pear \\\n    && apt-get remove -y php-dev \\\n    {% endblock %}\n    {% endblock %}\n    && rm -rf /var/lib/apt/lists/* /var/cache/apt/*\n\n\n{% block users %}\n## ***********************************************************************\n##  USER MANAGEMENT\n## ***********************************************************************\n{% block users_setup %}\n# set easy root pwd for dev purpose\nRUN echo \"root:root\" | chpasswd \\\n    # set password for www-data, and also\n    # avoid shell login (we have a separate user for that)\n    && echo 'www-data:www-data' | chpasswd \\\n    && usermod -s /usr/sbin/nologin www-data \\\n    # this option makes sure to avoid root SSH login\n    # we just replace our lines with nothing\n    && sed -i 's/PermitRootLogin without-password//' /etc/ssh/sshd_config \\\n    && sed -i 's/PermitRootLogin prohibit-password//' /etc/ssh/sshd_config \\\n    # allow root and sudo group to run sudo without password\n    && sed -i /etc/sudoers -re 's/^%sudo.*/%sudo ALL=(ALL:ALL) NOPASSWD: ALL/g' \\\n    && sed -i /etc/sudoers -re 's/^root.*/root ALL=(ALL:ALL) NOPASSWD: ALL/g' \\\n    # remove include directory\n    && sed -i /etc/sudoers -re 's/^#includedir.*/## **Removed the include directive** ##\"/g'\n{% endblock %}\n\n{% block users_ssh_add %}\n{% include 'template/components/ssh/add_user.sh.twig' with {'user': ssh.user.name, 'pwd' : ssh.user.pwd, 'sudo' : true } %}\n{% endblock %}\n\n{% block users_ssh_connection %}\nRUN echo 'AllowUsers {{ ssh.user.name }}' >> /etc/ssh/sshd_config\n{% endblock %}\n\n{% block users_bashrc %}\nENV BASH_ENV /var/www/.bashrc\n\nRUN echo \"source /var/www/.nvm/nvm.sh\" >> /var/www/.bashrc \\\n    # -------------------------------------------------\n    && chown 33:33 /var/www/.bashrc \\\n    # -------------------------------------------------\n    && echo \"export BASH_ENV=${BASH_ENV}\" >> /etc/profile\n{% endblock %}\n\n\n{% endblock %}\n\n\n{% block apache %}\n## ***********************************************************************\n##  APACHE INSTALLATION\n## ***********************************************************************\n#this conf is needed for enconf command ...\nADD ./config/apache/http2.conf /etc/apache2/conf-available/http2.conf\n\n{% include 'template/components/apache2/install.sh.twig' %}\n\nADD ./config/apache/apache2.conf /etc/apache2/apache2.conf\nADD ./config/apache/ports.conf /etc/apache2/ports.conf\nADD ./config/apache/sites.conf /etc/apache2/sites-enabled/000-default.conf\n\n{% endblock %}\n\n# create a new id_rsa for the www-data dockeruser.\n# thus we have a SSH Key for connections out of the box\n{% set id_rsa_vars = { 'user' : 'www-data', 'group' : 'www-data', 'directory': '/var/www/.ssh', 'comment' : 'Dockware Container'} %}\n{% include 'template/components/ssh/create_key.sh.twig' with id_rsa_vars %}\n\n\n\n{% block php %}\n## ***********************************************************************\n##  PHP INSTALLATION\n## ***********************************************************************\n{% for key,value in php.versions %}\n{% if value.active == true %}\n{% include \"template/components/php/#{ key }/install.sh.twig\" %}\n\nCOPY ./config/php/general.ini /etc/php/{{ key }}/fpm/conf.d/01-general.ini\nCOPY ./config/php/general.ini /etc/php/{{ key }}/cli/conf.d/01-general.ini\nCOPY ./config/php/cli.ini /etc/php/{{ key }}/cli/conf.d/01-general-cli.ini\n\n\n{% endif %}\n{% endfor %}\n#make sure the installation runs also in default php version\nRUN sudo update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1 &\n# make sure the installation runs using our default php version\nRUN service php{{ php.default_version }}-fpm stop > /dev/null 2>&1 && \\\n    service php{{ php.default_version }}-fpm start && \\\n    sudo update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1\n\n\n# make sure our php user has rights on the session\nRUN chown www-data:www-data -R /var/lib/php/sessions\n{% endblock %}\n\n# remove the standard apache index file\nRUN mkdir -p /var/www/html \\\n    && rm -rf /var/www/html/* \\\n    && chown -R www-data:www-data /var/www/html \\\n    && sudo -u www-data sh -c 'mkdir -p /var/www/html/public'\n\n\n{% block permissions %}\n# make sure the configured log folder exists and is writeable\nRUN chmod -R 0777 /var/www \\\n    && chgrp -R www-data /var/log/apache2 \\\n    && mkdir -p /var/log/mysql \\\n    && chgrp -R www-data /var/log/mysql\\\n    && mkdir /var/log/php -p  \\\n    && touch /var/log/php/cli_errors.log  \\\n    && touch /var/log/php/fpm_errors.log  \\\n    && chown -R www-data:www-data /var/log/php  \\\n    && chmod 0755 /var/log/php\n{% endblock %}\n\n{% block ssl %}\n## ***********************************************************************\n##  MOD_SSL\n##  create SSL certificate\n## ***********************************************************************\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y openssl \\\n    && a2enmod ssl \\\n    && mkdir /etc/apache2/ssl \\\n    && openssl req -new -x509 -days 365 -sha1 -newkey rsa:2048 -nodes -keyout /etc/apache2/ssl/server.key -out /etc/apache2/ssl/server.crt -subj '/O=Company/OU=Department/CN=localhost' \\\n    && rm -rf /var/lib/apt/lists/* /var/cache/apt/*\n{% endblock %}\n\n\n\n{% block components %}\n\nRUN apt-get update \\\n\n{% block components_dev_tools %}\n    && apt-get install -y rsync \\\n    && apt-get install -y sshpass \\\n    && apt-get install -y jpegoptim \\\n    && apt-get install -y screen \\\n    && apt-get install -y mysql-client \\\n{% endblock %}\n\n{% block components_git %}\n    && apt-get install -y git\n{% endblock %}\n\n\n\n{% block components_packagers %}\n{% block components_packagers_composer %}\n{% if composer.version == 1 %}\n{% include 'template/components/composer/v1/install.sh.twig' %}\n{% else %}\n{% include 'template/components/composer/v2/install.sh.twig' %}\n{% endif %}\n{% endblock %}\n\n\n\n{% endblock %}\n\n\n{% block components_xdebug %}\nRUN cd /var/www \\\n    && apt-get update \\\n{% for key, value in php.versions %}\n{% if value.xdebug_version != '' %}\n{% include 'template/components/xdebug/install.sh.twig' with { \"php_version\" : key,\"folder_id\" : value.folder_id, \"xdebug_tag\":value.xdebug_tag} %}\n{% endif %}\n{% endfor %}\n&& sudo apt-get install -y zlib1g-dev \\\n&& sudo rm -rf /var/lib/apt/lists/* /var/cache/apt/* \\\n&& sudo rm -rf /var/www/xdebug\n\n\n\n#generate xdebug ini files\n{% for key, value in php.versions %}\n{% if value.xdebug_version != '' %}\n{% include 'template/components/xdebug/generate_ini_files.sh.twig' with { \"version\" : key, \"folder_id\" : value.folder_id ,\"xdebug_version\":value.xdebug_version} %}\n{% endif %}\n{% endfor %}\n\nRUN cd /var/www \\\n{% for key, value in php.versions %}\n{% if value.xdebug_version != '' %}\n{% include 'template/components/xdebug/edit_ini_files.sh.twig' with { \"version\" : key, \"folder_id\" : value.folder_id ,\"xdebug_version\":value.xdebug_version} %}\n{% endif %}\n{% endfor %}\n && cd /var/www\n{% endblock %}\n\n\n\n{% block components_mysql %}\n{% include 'template/components/mysql/5.7/install.sh.twig' with { 'pwd' : db.pwd } %}\n\nRUN service mysql start && \\\n    mysql --user={{ db.user }} --password={{ db.pwd }} -e \"use mysql; update user set host='%' where host='localhost';\" && \\\n    service mysql restart\n{% endblock %}\n\n\n{% block components_adminer %}\n{% include 'template/components/adminer/install.sh.twig' %}\n{% endblock %}\n\n\n{% block components_mailcatcher %}\n{% include 'template/components/mailcatcher/install.sh.twig' %}\n\nRUN {% for key,value in php.versions %}\n{% if value.active==1 %}\necho \"sendmail_path = /usr/bin/env $(which catchmail) -f 'local@dockware'\" >> /etc/php/{{ key }}/mods-available/mailcatcher.ini && \\\n{% endif %}\n{% endfor %}\n    echo \"\"\n{% endblock %}\n\n{% block components_pimpmylog %}\nRUN mkdir -p /var/www/pimpmylog && \\\n    wget -O - https://github.com/potsky/PimpMyLog/tarball/master | tar xzf - && \\\n    mv potsky-PimpMyLog-* /var/www/pimpmylog && \\\n    mv /var/www/pimpmylog/potsky-PimpMyLog-2fed8c1/* /var/www/pimpmylog && \\\n    rm -rf /var/www/pimpmylog/potsky-PimpMyLog-*\n\nCOPY /config/pimpmylog/config.user.d /var/www/pimpmylog/config.user.d\nCOPY /config/pimpmylog/config.user.json /var/www/pimpmylog/config.user.json\n\n# apply our custom file with fixes for PHP 8\n# its used from here: https://github.com/potsky/PimpMyLog/pull/149/files\nCOPY /config/pimpmylog/global.inc.php /var/www/pimpmylog/inc/global.inc.php\n\nRUN chown -R www-data:www-data /var/www/pimpmylog/\n{% endblock %}\n\n{% block components_filebeat %}\nRUN apt-get update \\\n    && wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - \\\n    && apt-get install --no-install-recommends -y apt-transport-https \\\n    && echo \"deb https://artifacts.elastic.co/packages/7.x/apt stable main\" | tee -a /etc/apt/sources.list.d/elastic-7.x.list \\\n    && apt-get update && apt-get install -y --no-install-recommends filebeat \\\n    && rm -rf /var/lib/apt/lists/* /var/cache/apt/*\n{% endblock %}\n\n\n{% block components_nvm %}\nRUN ls -la \\\n    && mkdir \"/var/www/.nvm\" \\\n    && export NVM_DIR=\"/var/www/.nvm\" \\\n    # ----------------------------------------------------------------------------------------- \\\n    && curl -f -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash \\\n    # -----------------------------------------------------------------------------------------\n    && [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" \\\n    && [ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\" \\\n    # -----------------------------------------------------------------------------------------\n    && nvm install 16 \\\n    && nvm install 14 \\\n    && nvm install 12 \\\n    # -----------------------------------------------------------------------------------------\n    && nvm use {{ node.version }} \\\n    && nvm alias default {{ node.version }}\n\nENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules\nENV PATH      $NVM_DIR/v$NODE_VERSION/bin:$PATH\n{% endblock %}\n\nRUN echo \"\" \\\n{% block components_node %}\n    # -----------------------------------------------------------\n    # we have to reload the correct nvm version otherwise this would destroy it\n    && export NVM_DIR=\"/var/www/.nvm\" \\\n    && [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" \\\n    && [ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  \\\n    && nvm use {{ node.version }} \\\n    # -----------------------------------------------------------\n    && mkdir /var/www/.npm \\\n    && npm config set cache /var/www/.npm \\\n    && chown 33:33 /var/www/.npm \\\n{% endblock %}\n\n{% block components_grunt %}\n    # navigate to another folder outside shopware to avoid this error: npm ERR! Tracker \"idealTree\" already exists\n    && cd /var/www && npm install -g grunt-cli \\\n    && cd /var/www && npm install grunt --save-dev \\\n{% endblock %}\n\n{% block components_packagers_yarn %}\n    && npm install -g yarn \\\n    && chown -R www-data:www-data /var/www/.composer \\\n{% endblock %}\n    && rm -rf /var/lib/apt/lists/* /var/cache/apt/*\n\n\n{% block components_tideways %}\nRUN sudo echo 'deb https://packages.tideways.com/apt-packages-main any-version main' | sudo tee /etc/apt/sources.list.d/tideways.list \\\n    && sudo wget -qO - https://packages.tideways.com/key.gpg | sudo apt-key add - \\\n    && sudo apt-get -y update \\\n    && sudo apt-get -y --no-install-recommends install tideways-php tideways-daemon \\\n    && rm -rf /var/lib/apt/lists/* /var/cache/apt/*\n\nCOPY ./config/tideways/tideways-daemon /etc/default/tideways-daemon\n\n{% for key,value in php.versions %}\nCOPY ./config/tideways/tideways.ini /etc/php/{{ key }}/fpm/conf.d/20-tideways.ini\nCOPY ./config/tideways/tideways.ini /etc/php/{{ key }}/cli/conf.d/20-tideways.ini\n{% endfor %}\n{% endblock %}\n\n\n{% endblock %}\n\n\n{% block assets_install %}\nCOPY ./assets/scripts/makefile /var/www/makefile\nCOPY ./assets/scripts/bin /var/www/scripts/bin\nCOPY ./assets/scripts/cron /var/www/scripts/cron\n\n{% block assets_install_shopware6 %}\nCOPY ./assets/shopware6/files /var/www/scripts/shopware6\n{% endblock %}\n\n{% endblock %}\n\nRUN chown www-data:www-data -R /var/www/scripts\n#make sure for the whole installation xdebug is off for performance\nRUN sh /var/www/scripts/bin/xdebug_disable.sh\n\nADD entrypoint.sh /entrypoint.sh\nRUN chmod 755 /*.sh\n\n\n\n\n{% block shopware %}\n\n{% block shopware_install %}\n## ***********************************************************************\n##  INSTALL SHOPWARE\n## ***********************************************************************\nRUN rm -rf /var/www/html/* \\\n    && wget --no-check-certificate {{ shopware.download_url }} -qq -O /var/www/shopware.zip \\\n    && unzip -q /var/www/shopware.zip -d /var/www/html \\\n    && rm -rf /var/www/shopware.zip\n{% endblock %}\n\n{% block shopware_prepare %}\n\n{% block shopware_prepare_env %}\nRUN echo \"APP_ENV={{ shopware.env }}\" >> /var/www/html/.env && \\\n    echo \"APP_SECRET=1\" >> /var/www/html/.env && \\\n    echo \"INSTANCE_ID=1\" >> /var/www/html/.env && \\\n    echo \"DATABASE_URL=mysql://{{ db.user }}:{{ db.pwd }}@{{ db.host }}:{{ db.port }}/{{ db.database }}\" >> /var/www/html/.env && \\\n    echo \"APP_URL={{ shopware.url }}\" >> /var/www/html/.env && \\\n    echo \"MAILER_URL=smtp://localhost:1025\" >> /var/www/html/.env && \\\n    echo \"COMPOSER_HOME=/var/www/html/var/cache/composer\" >> /var/www/html/.env && \\\n    echo \"SHOPWARE_ES_ENABLED=0\" >> /var/www/html/.env\n{% endblock %}\n\n\nRUN sudo service mysql start && \\\n    # switch to default PHP before installing\n    sudo update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1 && \\\n    # -------------------------------------------------------------------------------------------\n    cd /var/www/html && php bin/console system:install --create-database --basic-setup && \\\n    # make sure assets like logos are ready\n    cd /var/www/html && php bin/console assets:install && \\\n    # -------------------------------------------------------------------------------------------\n    # add some demo data\n    {% if version_gte(shopware.version, '6.2.0-rc1') %}\n    cd /var/www/html && APP_ENV=prod php bin/console store:download -p SwagPlatformDemoData && \\\n    cd /var/www/html && APP_ENV=prod php bin/console plugin:refresh && \\\n    cd /var/www/html && APP_ENV=prod php bin/console plugin:install --activate SwagPlatformDemoData && \\\n    {% else %}\n    # -------------------------------------------------------------------------------------------\n    cd /var/www/html && APP_ENV=prod php bin/console framework:demodata && \\\n    {% endif %}\n    # -------------------------------------------------------------------------------------------\n    # clear cache and refresh dal index to show the new demo data\n    cd /var/www/html && php bin/console cache:clear && \\\n    cd /var/www/html && php bin/console dal:refresh:index && \\\n    rm -rf /var/www/html/var/cache/* && \\\n    # -------------------------------------------------------------------------------------------\n    mysql --user={{ db.user }} --password={{ db.pwd }} -e \"use {{ db.database }}; INSERT INTO system_config (id, configuration_key, configuration_value, sales_channel_id, created_at, updated_at) VALUES (X'b3ae4d7111114377af9480c4a0911111', 'core.frw.completedAt', '{\\\"_value\\\": \\\"2019-10-07T10:46:23+00:00\\\"}', NULL, '2019-10-07 10:46:23.169', NULL);\" && \\\n    sudo service mysql stop\n{% endblock %}\n\n{% block shopware_dev %}\n\n{% block shopware_dev_install %}\nRUN sudo service mysql start \\\n    # -------------------------------------------------------------------------------------------\n    # fix weird problem with invalid phpunit file\n    # without this, it cannot find an autoload and thus it\n    # always says \"please install composer dependencies\"\n    && rm -rf /var/www/html/vendor/bin/phpunit \\\n    # -------------------------------------------------------------------------------------------\n    && cd /var/www/html && composer install \\\n    # install and pre-build our admin and storefront\n    && cd /var/www/html && ./bin/build.sh \\\n    && cd /var/www/html && php bin/console theme:compile \\\n    && sudo service mysql stop\n{% endblock %}\n\n{% block shopware_dev_plugin %}\nCOPY ./assets/shopware6/DockwareSamplePlugin /var/www/html/custom/plugins/DockwareSamplePlugin\n\nRUN sudo service mysql start && \\\n    cd /var/www/html && php bin/console plugin:refresh && \\\n    cd /var/www/html && php bin/console plugin:install DockwareSamplePlugin && \\\n    cd /var/www/html && php bin/console plugin:activate DockwareSamplePlugin && \\\n    rm -rf /var/www/html/var/cache/* && \\\n    sudo service mysql stop\n{% endblock %}\n\n{% endblock %}\n\n{% endblock %}\n\n\nRUN chown 33:33 -R /var/www/html\n\n\n## ***********************************************************************\n## SWITCH TO NORMAL USER (NOT ROOT ANYMORE!)\n## everything down here is now done as our www-data / dockware user\n## just like you would do it manually in the container\n## ***********************************************************************\n\nUSER {{ ssh.user.name }}\n\n# make the apache folder the working directory\nWORKDIR /var/www/html\n\n\n## ***********************************************************************\n##  POST BUILD\n## ***********************************************************************\n\nENTRYPOINT [\"/bin/bash\", \"/entrypoint.sh\"]\n"
}