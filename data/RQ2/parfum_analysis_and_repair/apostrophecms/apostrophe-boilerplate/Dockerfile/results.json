{
  "startTime": 1674252463703,
  "endTime": 1674252464362,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14\nENV APOS_MINIFY=1\nENV NODE_ENV=production\nWORKDIR /app\nCOPY package* ./\nRUN npm ci\nRUN mkdir scripts\n# Use \"m\" to temporarily install mongod in a lightweight way so\n# the asset build task does not encounter problems initializing modules\n# that expect a database. We do not actually need this database in the\n# container, so uninstall it at the end\nRUN npm install -g m && npm cache clean --force;\nRUN apt-get -y update && apt-get -y --no-install-recommends install scons && rm -rf /var/lib/apt/lists/*;\nRUN m 3.6\nRUN m tools stable\nRUN npm install -g pm2 && npm cache clean --force;\nCOPY . ./\nRUN ./scripts/docker-build-assets-with-temporary-mongod\nRUN m rm 3.6\nEXPOSE 3000\nENTRYPOINT [ \"./scripts/docker-wait-for-port\", \"mongo:27017\", \"--\" ]\n# Load balance at least 2 copies\nCMD [\"pm2-runtime\", \"-i\", \"2\", \"start\", \"app.js\" ]\n"
}