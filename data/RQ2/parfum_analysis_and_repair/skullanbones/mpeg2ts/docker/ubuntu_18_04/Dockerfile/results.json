{
  "startTime": 1674255738569,
  "endTime": 1674255739448,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#*****************************************************************\n#\n#    Copyright Â© 2017-2020 kohnech, lnwhome All rights reserved\n#\n#    mpeg2ts - mpeg2ts Dockerfile\n#\n#    This file is part of mpeg2ts (Mpeg2 Transport Stream Library).\n#\n#    Unless you have obtained mpeg2ts under a different license,\n#    this version of mpeg2ts is mpeg2ts|GPL.\n#    Mpeg2ts|GPL is free software; you can redistribute it and/or\n#    modify it under the terms of the GNU General Public License as\n#    published by the Free Software Foundation; either version 2,\n#    or (at your option) any later version.\n#\n#    Mpeg2ts|GPL is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with mpeg2ts|GPL; see the file COPYING. If not, write to\n#    the Free Software Foundation, 59 Temple Place - Suite 330,\n#    Boston, MA 02111-1307, USA.\n#\n#******************************************************************/\n\nFROM ubuntu:18.04 as base\n\n\nRUN apt-get update && apt-get --yes --no-install-recommends install \\\n    ca-certificates \\\n    curl \\\n    gnupg2 \\\n    gosu \\\n    apt-utils \\\n    software-properties-common \\\n    build-essential \\\n    wget \\\n    lcov \\\n    sudo \\\n    zip \\\n    unzip \\\n    doxygen \\\n    graphviz \\\n    cmake \\\n    git && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n### Builder image ###\nFROM base as build\n\n# LLVM Clang\nENV CLANG_VERSION=7\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \\\napt-add-repository \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-$CLANG_VERSION main\" && \\\napt-get update && \\\napt-get install --yes --no-install-recommends clang-$CLANG_VERSION \\\n  clang-tidy-$CLANG_VERSION \\\n  clang-format-$CLANG_VERSION \\\n  llvm-$CLANG_VERSION-dev \\\n  libclang-$CLANG_VERSION-dev && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n\n# python support\nRUN apt-get update && \\\n  apt-get install --yes --no-install-recommends \\\n  virtualenv \\\n  python3-setuptools \\\n  python3-pip \\\n  python3-dev \\\n  python3-virtualenv \\\n  python3-pip && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n\n#python packages\nRUN pip3 install --no-cache-dir \\\n  flake8 \\\n  autopep8 \\\n  virtualenv\n\n# Install latest cppcheck\nRUN git clone https://github.com/danmar/cppcheck.git /cppcheck \\\n  && mkdir /cppcheck/build \\\n  && cd /cppcheck/build \\\n  && cmake .. && cmake --build . -- -j16 && make install \\\n  && cd / && rm -rf /cppcheck\n\n# Install gtest/gmock\nRUN git clone -q https://github.com/google/googletest.git /googletest \\\n  && cd googletest \\\n  && git checkout tags/release-1.8.1 \\\n  && mkdir -p /googletest/build \\\n  && cd /googletest/build \\\n  && cmake .. && make -j $(nproc) && make install \\\n  && cd / && rm -rf /googletest\n\n# Install benchmark\nRUN git clone -q https://github.com/google/benchmark.git /benchmark \\\n  && cd benchmark \\\n  && git checkout tags/v1.4.0 \\\n  && mkdir -p /benchmark/build \\\n  && cd /benchmark/build \\\n  && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j$(nproc) && make install \\\n  && cd / && rm -rf /benchmark\n\n# Install latest iwyu\nRUN git clone https://github.com/include-what-you-use/include-what-you-use.git /iwyu \\\n  && mkdir /iwyu/build \\\n  && cd /iwyu && git checkout clang_$CLANG_VERSION.0 \\\n  && cd /iwyu/build \\\n  && cmake .. && cmake --build . -- -j$(nproc) && make install \\\n  && cd / && rm -rf /iwyu\n\n# Install as docker user (after entrypoint)\n# Install Emscripten SDK/toolchain\nENV EMSDK_VERSION=1.39\nENV EMSDK_BUILD_VERSION=5\nRUN git clone https://github.com/emscripten-core/emsdk.git /tmp/emsdk && \\\ncd /tmp/emsdk && \\\n./emsdk install $EMSDK_VERSION.$EMSDK_BUILD_VERSION && \\\n./emsdk activate $EMSDK_VERSION.$EMSDK_BUILD_VERSION\nENV PATH=\"${PATH}:/tmp/emsdk:/tmp/emsdk/upstream/emscripten:/tmp/emsdk/node/12.9.1_64bit/bin\"\nRUN echo \"PATH: \" $PATH\nRUN em++ --version\n\n# entrypoint\nCOPY ./entrypoint.sh /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\n# WORKDIR /tmp/workspace\nRUN adduser docker\n"
}