{
  "startTime": 1674249673343,
  "endTime": 1674249674167,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 116
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#################################################################\n# Creates a base CentOS 6 image with Jenkins\n#\n#                    ##        .\n#              ## ## ##       ==\n#           ## ## ## ##      ===\n#       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\___/ ===\n#  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n#       \\______ o          __/\n#         \\    \\        __/\n#          \\____\\______/\n#\n# Author:    Paolo Antinori <paolo.antinori@gmail.com>\n# License:   MIT\n#################################################################\n\nFROM centos\n\nMAINTAINER Paolo Antinori <paolo.antinori@gmail.com>\n\n\n# command line goodies\nRUN echo \"export JAVA_HOME=/usr/lib/jvm/jre\" >> /etc/profile\nRUN echo \"export LANG=en_GB.utf8\" >> /etc/profile\nRUN echo \"alias ll='ls -l --color=auto'\" >> /etc/profile\nRUN echo \"alias grep='grep --color=auto'\" >> /etc/profile\n\n# add jenkins repo\nADD http://pkg.jenkins-ci.org/redhat/jenkins.repo /etc/yum.repos.d/jenkins.repo\nRUN rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key\n\nADD http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo /etc/yum.repos.d/maven.repo\n# telnet is required by some fabric command. without it you have silent failures\nRUN yum install -y java-1.7.0-openjdk-devel which unzip openssh-server sudo openssh-clients jenkins apache-maven git && rm -rf /var/cache/yum\n# enable no pass and speed up authentication\nRUN sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/;s/#UseDNS yes/UseDNS no/' /etc/ssh/sshd_config\n\n# enabling sudo group\nRUN echo '%wheel ALL=(ALL) ALL' >> /etc/sudoers\n# enabling sudo over ssh\nRUN sed -i 's/.*requiretty$/#Defaults requiretty/' /etc/sudoers\n\nENV JAVA_HOME /usr/lib/jvm/jre\n\n# add a user for the application, with sudo permissions\nRUN useradd -m fuse ; echo fuse: | chpasswd ; usermod -a -G wheel fuse\n\n# assigning higher default ulimits\n# unluckily this is not very portable. these values work only if the user running docker daemon on the host has his own limits >= than values set here\n# if they are not, the risk is that the \"su fuse\" operation will fail\nRUN echo \"fuse                -       nproc           4096\" >> /etc/security/limits.conf\nRUN echo \"fuse                -       nofile           4096\" >> /etc/security/limits.conf\n\n# install git plugin and related dependencies\nADD http://updates.jenkins-ci.org/latest/git.hpi /var/lib/jenkins/plugins/git.hpi\nADD http://updates.jenkins-ci.org/latest/ssh-credentials.hpi /var/lib/jenkins/plugins/ssh-credentials.hpi\nADD http://updates.jenkins-ci.org/latest/git-client.hpi /var/lib/jenkins/plugins/git-client.hpi\nADD http://updates.jenkins-ci.org/latest/scm-api.hpi /var/lib/jenkins/plugins/scm-api.hpi\nADD http://updates.jenkins-ci.org/latest/ssh-credentials.hpi /var/lib/jenkins/plugins/ssh-credentials.hpi\nADD http://updates.jenkins-ci.org/latest/credentials.hpi /var/lib/jenkins/plugins/credentials.hpi\n\nRUN chown -R jenkins:jenkins /var/lib/jenkins/plugins\n\n# disable strict host checking to avoid any manual step\nRUN mkdir -p /var/lib/jenkins/.ssh ;  printf \"Host * \\nUserKnownHostsFile /dev/null \\nStrictHostKeyChecking no\" >> /var/lib/jenkins/.ssh/config ; chown -R jenkins:jenkins /var/lib/jenkins/.ssh\n\n# preconfigure maven location\nRUN printf \"<?xml version='1.0' encoding='UTF-8'?> <hudson.tasks.Maven_-DescriptorImpl> <installations> <hudson.tasks.Maven_-MavenInstallation> <name>maven</name> <home>/usr/share/apache-maven</home> <properties/> </hudson.tasks.Maven_-MavenInstallation> </installations> </hudson.tasks.Maven_-DescriptorImpl>\" >> /var/lib/jenkins/hudson.tasks.Maven.xml ; chown jenkins:jenkins /var/lib/jenkins/hudson.tasks.Maven.xml\n\n\n\nCMD service sshd start ; service jenkins start ; bash\n\n\n# declaring exposed ports. helpful for non Linux hosts. add \"-P\" flag to your \"docker run\" command to automatically expose them and \"docker ps\" to discover them.\n# SSH, jenkins\nEXPOSE 22 8080\n"
}