{
  "startTime": 1674218981009,
  "endTime": 1674218982209,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG POETRY_VERSION=1.1.7\nARG PYTHON_VERSION=latest\nARG IMAGE_BASE=-slim\nARG IMAGE_VERSION=python:${PYTHON_VERSION}${IMAGE_BASE}\nARG WORKSPACE=\"/workspace\"\n\n# TODO decide whether download get-poetry.py or install it via PyPI\n# FROM debian:stable-slim as downloader\n# ARG WORKSPACE\n# WORKDIR ${WORKSPACE}\n# RUN apt update -y \\\n#     && apt install -y --no-install-recommends \\\n#     ca-certificates \\\n#     curl \\\n#     && rm -rf /var/lib/apt/lists/*\n# RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py > /get-poetry.py\n\nFROM ${IMAGE_VERSION} AS dev\nARG IMAGE_VERSION\nARG POETRY_VERSION\nARG PYTHON_VERSION\nARG WORKSPACE\nENV DEBIAN_FRONTEND=noninteractive \\\n    IMAGE_VERSION=${IMAGE_VERSION} \\\n    PATH=\"${PATH}:/root/.poetry/bin\" \\\n    PIP_DEFAULT_TIMEOUT=100 \\\n    PIP_DISABLE_PIP_VERSION_CHECK=1 \\\n    PIP_NO_CACHE_DIR=1 \\\n    PYTHONFAULTHANDLER=1 \\\n    PYTHONHASHSEED=random \\\n    PYTHONUNBUFFERED=1 \\\n    POETRY_VERSION=${POETRY_VERSION} \\\n    WORKSPACE=${WORKSPACE}\nWORKDIR ${WORKSPACE}\nRUN apt update -y \\\n    && apt install -y --no-install-recommends \\\n    git \\\n    libpython3-dev \\\n    tree \\\n    vim \\\n    && rm -rf /var/lib/apt/lists/*\n# COPY --from=downloader /get-poetry.py .\nRUN pip install --no-cache-dir -U \\\n    pip \\\n    poetry==${POETRY_VERSION} \\\n    setuptools \\\n    && poetry config virtualenvs.create false\nCOPY pyproject.toml poetry.lock ./\nRUN poetry install --no-root --no-interaction\nENTRYPOINT [ \"/bin/bash\" ]\n\nFROM dev AS test\nENTRYPOINT [ \"pytest\", \"--cov\", \"--cov-report\", \"term\", \"--cov-report\", \"xml\"]\n\nFROM dev AS lint\nCOPY .git .git\nCOPY .pre-commit-config.yaml .\nRUN pre-commit install --install-hooks\nENTRYPOINT [ \"pre-commit\", \"run\", \"-a\" ]\n"
}