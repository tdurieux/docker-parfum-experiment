{
  "startTime": 1674255668287,
  "endTime": 1674255668864,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 6,
        "columnEnd": 39
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 62,
        "columnEnd": 125
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 62
      }
    }
  ],
  "repairedDockerfile": "# FROM golang:1.17-buster as builder\n# COPY cmd src/cmd/\n# COPY go.mod src/\n# COPY go.sum src/\n# RUN cd src/ && go mod download\n# RUN cd src && GO_ENABLED=0 go build -o /manager -ldflags=\" -s -w\" cmd/manager/*.go\n\n# FROM ubuntu:21.10 as runner\n# RUN apt-get update && apt-get install ca-certificates net-tools iproute2 buildah -y\n# RUN echo \"unqualified-search-registries = ['docker.io']\" >> /etc/containers/registries.conf\n# COPY --from=builder /manager /runner\n\n# FROM ubuntu:21.10 as linux\n# ARG LINUX=5.16.11\n# RUN apt-get update && apt-get install wget curl build-essential make libelf-dev \\\n#     flex bison bc libvdeplug-dev libssl-dev -y\n# RUN wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$LINUX.tar.xz\n# RUN tar -xvf linux-$LINUX.tar.xz\n# COPY linux.config /\n# RUN cp /linux.config /linux-$LINUX/.config\n# RUN cd /linux-$LINUX && make ARCH=um -j `nproc`\n# RUN mkdir /out && mkdir /build && cp /linux-$LINUX/linux /out/linux\n# CMD [\"cp\", \"/out/linux\", \"/build/linux\"]\n\n# FROM golang:1.17-buster as coredns\n# RUN apt-get update\n# RUN apt-get install git make -y\n# RUN git clone -b v1.9.0 --depth 1 https://github.com/coredns/coredns\n# RUN cd coredns && echo fanout:github.com/networkservicemesh/fanout >> plugin.cfg && \\\n#   make\n\n# FROM ubuntu:21.10 as application\n# RUN apt-get update\n# RUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata\n# RUN apt-get install tar gzip git net-tools iproute2 ca-certificates -y\n# # install docker\n# RUN apt-get install ca-certificates curl iptables gnupg lsb-release -y\n# RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n# RUN echo \\\n#   \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n#   $(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null\n# RUN apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io\n# RUN mkdir /disk\n\n# RUN update-alternatives --set iptables /usr/sbin/iptables-legacy\n# RUN update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy\n\n# RUN curl -L -o /slirp4netns https://github.com/rootless-containers/slirp4netns/releases/download/v1.2.0-beta.0/slirp4netns-x86_64\n# RUN chmod 755 /slirp4netns\n\n# COPY --from=linux /out/linux /usr/local/bin/linux\n# COPY --from=coredns /go/bin/coredns /coredns\n# COPY --from=builder /manager /usr/local/bin/manager\n\n# ENV DOCKER_HOST=tcp://127.0.0.1:2375\n# COPY daemon.json /etc/docker/daemon.json\n\n# RUN mkdir /buildtmp\n# ENV TMPDIR /buildtmp\n\n# CMD [\"/usr/local/bin/manager\"]\n\nFROM golang:1.17-buster as builder\nCOPY cmd src/cmd/\nCOPY go.mod src/\nCOPY go.sum src/\nRUN cd src/ && go mod download\nRUN cd src && GO_ENABLED=0 go build -o /runner -ldflags=\" -s -w\" cmd/runner/*.go\nRUN cd src && GO_ENABLED=0 go build -o /builder -ldflags=\" -s -w\" cmd/builder/*.go\n\nFROM ubuntu:21.10 as base\nRUN apt-get update && apt-get install -y --no-install-recommends net-tools qemu slirp && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends ca-certificates curl iptables gnupg lsb-release -y && rm -rf /var/lib/apt/lists/*;\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --batch --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\nRUN echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null\nRUN apt-get update && apt-get install --no-install-recommends -y docker-ce docker-ce-cli containerd.io && rm -rf /var/lib/apt/lists/*;\nCOPY --from=builder /runner /runner\nCMD [\"/runner\"]\n\nFROM base\nARG BASE_IMAGE=gerke74/base\nRUN apt-get update && apt-get install --no-install-recommends wget -y && rm -rf /var/lib/apt/lists/*;\nRUN wget https://github.com/vorteil/vorteil/releases/latest/download/vorteil_linux-x86.tar.gz && \\\n      tar -xzf vorteil_linux-x86.tar.gz && \\\n        ./vorteil version && rm vorteil_linux-x86.tar.gz\n\nRUN ./vorteil projects convert-container $BASE_IMAGE /tmp/base\n\nENV DOCKER_HOST=tcp://127.0.0.1:2375\nRUN mkdir -p /tmp/tars\n\nRUN apt-get install --no-install-recommends qemu-system-x86 -y && rm -rf /var/lib/apt/lists/*;\nCOPY --from=builder /builder /builder\nCMD [\"/builder\"]\n"
}