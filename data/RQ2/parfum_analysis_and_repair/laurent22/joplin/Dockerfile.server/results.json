{
  "startTime": 1674254439338,
  "endTime": 1674254440009,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 7,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# =============================================================================\n# Build stage\n# =============================================================================\n\nFROM node:16-bullseye AS builder\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n    python tini \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Enables Yarn\nRUN corepack enable\n\nWORKDIR /build\n\nCOPY .yarn/plugins ./.yarn/plugins\nCOPY .yarn/releases ./.yarn/releases\nCOPY package.json .\nCOPY .yarnrc.yml .\nCOPY yarn.lock .\nCOPY gulpfile.js .\nCOPY tsconfig.json .\nCOPY packages/turndown ./packages/turndown\nCOPY packages/turndown-plugin-gfm ./packages/turndown-plugin-gfm\nCOPY packages/fork-htmlparser2 ./packages/fork-htmlparser2\nCOPY packages/server/package*.json ./packages/server/\nCOPY packages/fork-sax ./packages/fork-sax\nCOPY packages/fork-uslug ./packages/fork-uslug\nCOPY packages/htmlpack ./packages/htmlpack\nCOPY packages/renderer ./packages/renderer\nCOPY packages/tools ./packages/tools\nCOPY packages/lib ./packages/lib\nCOPY packages/server ./packages/server\n\n# For some reason there's both a .yarn/cache and .yarn/berry/cache that are\n# being generated, and both have the same content. Not clear why it does this\n# but we can delete it anyway. We can delete the cache because we use\n# `nodeLinker: node-modules`. If we ever implement Zero Install, we'll need to\n# keep the cache.\n#\n# Note that `yarn install` ignores `NODE_ENV=production` and will install dev\n# dependencies too, but this is fine because we need them to build the app.\n\nRUN BUILD_SEQUENCIAL=1 yarn install --inline-builds \\\n    && yarn cache clean \\\n    && rm -rf .yarn/berry\n\n# =============================================================================\n# Final stage - we copy only the relevant files from the build stage and start\n# from a smaller base image.\n# =============================================================================\n\nFROM node:16-bullseye-slim\n\nARG user=joplin\nRUN useradd --create-home --shell /bin/bash $user\n\nUSER $user\n\nCOPY --chown=$user:$user --from=builder /build/packages /home/$user/packages\nCOPY --chown=$user:$user --from=builder /usr/bin/tini /usr/local/bin/tini\n\nENV NODE_ENV=production\nENV RUNNING_IN_DOCKER=1\nEXPOSE ${APP_PORT}\n\n# Use Tini to start Joplin Server:\n# https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#handling-kernel-signals\nWORKDIR /home/$user/packages/server\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"node\", \"dist/app.js\"]\n\n# Build-time metadata\n# https://github.com/opencontainers/image-spec/blob/master/annotations.md\nARG BUILD_DATE\nARG REVISION\nARG VERSION\nLABEL org.opencontainers.image.created=\"$BUILD_DATE\" \\\n      org.opencontainers.image.title=\"Joplin Server\" \\\n      org.opencontainers.image.description=\"Docker image for Joplin Server\" \\\n      org.opencontainers.image.url=\"https://joplinapp.org/\" \\\n      org.opencontainers.image.revision=\"$REVISION\" \\\n      org.opencontainers.image.source=\"https://github.com/laurent22/joplin.git\" \\\n      org.opencontainers.image.version=\"${VERSION}\"\n"
}