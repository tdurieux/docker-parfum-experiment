{
  "startTime": 1674220282911,
  "endTime": 1674220284205,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# build stage\nFROM node:lts-alpine as build-stage\n\n#\nENV ENV_JSON_FILE=./src/env-config.json\n\n# Configure JQ for env-config.jon file Parsing\nENV JQ_VERSION=1.6\nRUN wget --no-check-certificate https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64 -O /tmp/jq-linux64\nRUN cp /tmp/jq-linux64 /usr/bin/jq\nRUN chmod +x /usr/bin/jq\n\nWORKDIR /usr/src/app/\nCOPY package*.json ./\nCOPY . .\n\n# ReParse the env-config.json file.\nRUN jq 'to_entries | map_values({ (.key) : (\"$\" + .key) }) | reduce .[] as $item ({}; . + $item)' $ENV_JSON_FILE > ./src/env-config.tmp.json && mv ./src/env-config.tmp.json $ENV_JSON_FILE\n\n# Build Shifter UI\nRUN npm install && npm cache clean --force;\nRUN npm run build\n\n\n# production stage\n# nginx state for serving content\nFROM nginx:alpine as production-stage\n\nRUN apk add --no-cache --update coreutils\n\n# Add a user how will have the rights to change the files in code\nRUN addgroup -g 1500 nginxusers\nRUN adduser --disabled-password -u 1501 nginxuser nginxusers\n\n# Configure ngnix server\nCOPY nginx/default.conf /etc/nginx/nginx.conf\nWORKDIR /code\nCOPY --from=build-stage /usr/src/app/dist .\nCOPY --from=build-stage /usr/src/app/dist/assets ./assets_original\n\n# Configure web-app for environment variable usage\nWORKDIR /\n\n# VueJS JS File Location\nENV JSFOLDER=/code/assets/*.js\n\nCOPY docker_entrypoint.sh .\n#COPY generate_env-config.sh .\n\nRUN chown nginxuser:nginxusers docker_entrypoint.sh\n#RUN chown nginxuser:nginxusers generate_env-config.sh\nRUN chmod 777 docker_entrypoint.sh\n#RUN chmod 777 generate_env-config.sh\nRUN chown -R nginxuser:nginxusers /code\nRUN chown -R nginxuser:nginxusers /etc/nginx\nRUN chown -R nginxuser:nginxusers /tmp\nRUN chmod 777 /code\nRUN chmod 777 /tmp\nRUN chmod 777 /etc/nginx\n\nUSER nginxuser\n\nEXPOSE 8080:8080\nCMD [\"/bin/sh\",\"docker_entrypoint.sh\"]"
}