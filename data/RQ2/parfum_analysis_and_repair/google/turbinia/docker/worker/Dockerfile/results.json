{
  "startTime": 1674215270839,
  "endTime": 1674215271628,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 25,
        "columnEnd": 183
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 25,
        "columnEnd": 179
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 16,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 23,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 59,
        "columnStart": 22,
        "columnEnd": 101
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 59,
        "columnStart": 22,
        "columnEnd": 101
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# Use: docker build --no-cache --build-arg PPA_TRACK=\"[staging|stable]\"\nARG PPA_TRACK=stable\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n    apt-transport-https \\\n    apt-utils \\\n    ca-certificates \\\n    curl \\\n    git \\\n    john-data \\\n    hashcat \\\n    hashcat-data \\\n    libleveldb1d \\\n    libleveldb-dev \\\n    libterm-readline-gnu-perl \\\n    lvm2 \\\n    python3-pip \\\n    software-properties-common \\\n    sudo \\\n    testdisk \\\n    wget \\\n    && rm -rf /var/lib/apt/lists/*\n\nADD requirements.txt /tmp/\nRUN cd /tmp/ && pip3 install --no-cache-dir -r requirements.txt\n\nRUN pip3 install --no-cache-dir pip --upgrade\nRUN pip3 install --no-cache-dir requests --upgrade\nRUN pip3 install --no-cache-dir urllib3 cryptography --upgrade\n\n# Install third-party worker dependencies\nRUN pip3 install --no-cache-dir dfDewey\n# TODO(hacktobeer) uncomment when protobuf lib dependency if fixed upstream\n# RUN pip3 install pyhindsight\n\n# Install various packages from the GIFT PPA\n#   bulkextractor\n#   dfImageTools\n#   docker-explorer\n#   libbde-tools\n#   Plaso\n#   Sleuthkit\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0x5e80511b10c598b8 \\\n    && add-apt-repository -y ppa:gift/$PPA_TRACK\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n    bulk-extractor \\\n    dfimagetools-tools \\\n    docker-explorer-tools \\\n    libbde-tools \\\n    libewf \\\n    libewf-python3 \\\n    plaso-tools \\\n    python3-dfimagetools \\\n    python3-dfvfs \\\n    python3-plaso \\\n    sleuthkit \\\n    --option Acquire::ForceIPv4=true --option --option && rm -rf /var/lib/apt/lists/*;\n\nRUN useradd -r -s /bin/nologin -G disk,sudo turbinia\nRUN echo \"turbinia ALL = (root) NOPASSWD: ALL\" > /etc/sudoers.d/turbinia\n\nRUN pip3 install --no-cache-dir impacket --no-deps\n\nRUN mkdir -p /opt/loki && chown -R turbinia:turbinia /opt/loki \\\n    && cd /opt/loki \\\n    && curl -f -s https://api.github.com/repos/Neo23x0/Loki/releases/latest | sed -n 's/.*\"tarball_url\": \"\\(.*\\)\",.*/\\1/p' | xargs -n1 wget -O - -q | tar -xz --strip-components=1 \\\n    && pip3 install --no-cache-dir -r requirements.txt \\\n    && sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \\\n    && sudo chown -R turbinia:turbinia /opt/loki \\\n    && git clone https://github.com/Neo23x0/signature-base.git\n\nCOPY turbinia/config/rules/*.yar /opt/loki/signature-base/yara/\n\nRUN mkdir /etc/turbinia && mkdir -p /mnt/turbinia/ && mkdir -p /var/lib/turbinia/ \\\n    && mkdir -p /etc/turbinia/ && chown -R turbinia:turbinia /etc/turbinia/ \\\n    && mkdir -p /var/log/turbinia/ && chown -R turbinia:turbinia /mnt/turbinia/ \\\n    && chown -R turbinia:turbinia /var/lib/turbinia/ \\\n    && chown -R turbinia:turbinia /var/log/turbinia/ \\\n    && mkdir -p /home/turbinia && chown -R turbinia:turbinia /home/turbinia\n\n# Get a decent password list\nRUN cd /home/turbinia && echo \"\" > password.lst\nRUN cd /home/turbinia && curl -f -s https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-1000000.txt >> password.lst\nRUN cd /home/turbinia && curl -f -s https://raw.githubusercontent.com/danielmiessler/SecLists/285474cf9bff85f3323c5a1ae436f78acd1cb62c/Passwords/UserPassCombo-Jay.txt >> password.lst\nRUN cp /home/turbinia/password.lst /root/\n\n# Copy Kubernetes support tool to home folder\nCOPY k8s/tools/check-lockfile.py /home/turbinia/check-lockfile.py\nRUN chown turbinia:turbinia /home/turbinia/check-lockfile.py\n\nADD . /tmp/\n# unshallow and fetch all tags so our build systems pickup the correct git tag if it's a shallow clone\nRUN if $(cd /tmp/ && git rev-parse --is-shallow-repository); then cd /tmp/ && git fetch --prune --unshallow && git fetch --depth=1 origin +refs/tags/*:refs/tags/*; fi\nRUN cd /tmp/ && python3 setup.py install\n\nCOPY docker/worker/start.sh /home/turbinia/start.sh\nRUN chmod +rwx /home/turbinia/start.sh\nUSER turbinia\nCMD [\"/home/turbinia/start.sh\"]\n# Expose Prometheus endpoint.\nEXPOSE 8000/tcp\n"
}