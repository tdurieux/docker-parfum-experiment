{
  "startTime": 1674248483664,
  "endTime": 1674248484887,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-clang\n\nRUN dpkg --add-architecture i386 && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository ppa:git-core/ppa && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        binutils-dev \\\n        build-essential \\\n        curl \\\n        wget \\\n        git \\\n        jq \\\n        libc6-dev-i386 \\\n        patchelf \\\n        rsync \\\n        subversion \\\n        zip && rm -rf /var/lib/apt/lists/*;\n\n# Build and install latest Python 3 (3.8.3).\nENV PYTHON_VERSION 3.8.3\nRUN export PYTHON_DEPS=\"\\\n        zlib1g-dev \\\n        libncurses5-dev \\\n        libgdbm-dev \\\n        libnss3-dev \\\n        libssl-dev \\\n        libsqlite3-dev \\\n        libreadline-dev \\\n        libffi-dev \\\n        libbz2-dev \\\n        liblzma-dev\" && \\\n    unset CFLAGS CXXFLAGS && \\\n    apt-get install --no-install-recommends -y $PYTHON_DEPS && \\\n    cd /tmp && \\\n    curl -f -O https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz && \\\n    tar -xvf Python-$PYTHON_VERSION.tar.xz && \\\n    cd Python-$PYTHON_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations --enable-shared && \\\n    make -j install && \\\n    ldconfig && \\\n    ln -s /usr/bin/python3 /usr/bin/python && \\\n    cd .. && \\\n    rm -r /tmp/Python-$PYTHON_VERSION.tar.xz /tmp/Python-$PYTHON_VERSION && \\\n    rm -rf /usr/local/lib/python3.8/test && \\\n    apt-get remove -y $PYTHON_DEPS && rm -rf /var/lib/apt/lists/*; # https://github.com/google/oss-fuzz/issues/3888\n\n# Install six for Bazel rules.\nRUN unset CFLAGS CXXFLAGS && pip3 install -v --no-cache-dir \\\n    six==1.15.0 && rm -rf /tmp/*\n\n# Install Bazel through Bazelisk, which automatically fetches the latest Bazel version.\nENV BAZELISK_VERSION 1.9.0\nRUN curl -f -L https://github.com/bazelbuild/bazelisk/releases/download/v$BAZELISK_VERSION/bazelisk-linux-amd64 -o /usr/local/bin/bazel && \\\n    chmod +x /usr/local/bin/bazel\n\n# Default build flags for various sanitizers.\nENV SANITIZER_FLAGS_address \"-fsanitize=address -fsanitize-address-use-after-scope\"\n\n# Set of '-fsanitize' flags matches '-fno-sanitize-recover' + 'unsigned-integer-overflow'.\nENV SANITIZER_FLAGS_undefined \"-fsanitize=array-bounds,bool,builtin,enum,float-divide-by-zero,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,float-divide-by-zero,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr\"\n\nENV SANITIZER_FLAGS_memory \"-fsanitize=memory -fsanitize-memory-track-origins\"\n\nENV SANITIZER_FLAGS_thread \"-fsanitize=thread\"\n\nENV SANITIZER_FLAGS_introspector \"-O0 -flto -fno-inline-functions -fuse-ld=gold -Wno-unused-command-line-argument\"\n\n# Do not use any sanitizers in the coverage build.\nENV SANITIZER_FLAGS_coverage \"\"\n\n# We use unsigned-integer-overflow as an additional coverage signal and have to\n# suppress error messages. See https://github.com/google/oss-fuzz/issues/910.\nENV UBSAN_OPTIONS=\"silence_unsigned_overflow=1\"\n\n# To suppress warnings from binaries running during compilation.\nENV DFSAN_OPTIONS='warn_unimplemented=0'\n\n# Default build flags for coverage feedback.\nENV COVERAGE_FLAGS=\"-fsanitize=fuzzer-no-link\"\n\n# Use '-Wno-unused-command-line-argument' to suppress \"warning: -ldl: 'linker' input unused\"\n# messages which are treated as errors by some projects.\nENV COVERAGE_FLAGS_coverage \"-fprofile-instr-generate -fcoverage-mapping -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument\"\n\n# Default sanitizer, fuzzing engine and architecture to use.\nENV SANITIZER=\"address\"\nENV FUZZING_ENGINE=\"libfuzzer\"\nENV ARCHITECTURE=\"x86_64\"\n\n# DEPRECATED - NEW CODE SHOULD NOT USE THIS. OLD CODE SHOULD STOP. Please use\n# LIB_FUZZING_ENGINE instead.\n# Path to fuzzing engine library to support some old users of\n# LIB_FUZZING_ENGINE.\nENV LIB_FUZZING_ENGINE_DEPRECATED=\"/usr/lib/libFuzzingEngine.a\"\n\n# Argument passed to compiler to link against fuzzing engine.\n# Defaults to the path, but is \"-fsanitize=fuzzer\" in libFuzzer builds.\nENV LIB_FUZZING_ENGINE=\"/usr/lib/libFuzzingEngine.a\"\n\n# TODO: remove after tpm2 catchup.\nENV FUZZER_LDFLAGS \"\"\n\nWORKDIR $SRC\n\nRUN git clone https://github.com/AFLplusplus/AFLplusplus.git aflplusplus && \\\n    cd aflplusplus && \\\n    git checkout c208dcf9c573e3d85990c7dea777646f7fa4961c && \\\n    wget --no-check-certificate -O oss.sh https://raw.githubusercontent.com/vanhauser-thc/binary_blobs/master/oss.sh && \\\n    chmod 755 oss.sh\n\nRUN cd $SRC && \\\n    curl -f -L -O https://github.com/google/honggfuzz/archive/oss-fuzz.tar.gz && \\\n    mkdir honggfuzz && \\\n    cd honggfuzz && \\\n    tar -xzv --strip-components=1 -f $SRC/oss-fuzz.tar.gz && \\\n    rm -rf examples $SRC/oss-fuzz.tar.gz\n\n# Do precompiles before copying other scripts for better cache efficiency.\nCOPY precompile_afl /usr/local/bin/\nRUN precompile_afl\n\nCOPY precompile_honggfuzz /usr/local/bin/\nRUN precompile_honggfuzz\n\nCOPY cargo compile compile_afl compile_libfuzzer compile_honggfuzz \\\n    compile_go_fuzzer \\\n    compile_native_go_fuzzer \\\n    compile_python_fuzzer \\\n    python_coverage_helper.py \\\n    debug_afl srcmap \\\n    write_labels.py bazel_build_fuzz_tests \\\n    # Go, java, and swift installation scripts.\n    install_go.sh \\\n    install_go_CodeIntelligenceTesting.sh \\\n    install_java.sh \\\n    install_python.sh \\\n    install_rust.sh \\\n    install_swift.sh \\\n    /usr/local/bin/\n\nCOPY llvmsymbol.diff $SRC\nCOPY detect_repo.py /opt/cifuzz/\nCOPY bazel.bazelrc /root/.bazelrc\n\nCMD [\"compile\"]\n"
}