{
  "startTime": 1674246184448,
  "endTime": 1674246186153,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 65,
        "lineEnd": 75,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 58,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 65,
        "lineEnd": 75,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 81,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This Dockerfile provides a base image with the libraries needed to compile\n# and test CLIF preinstalled. Example workflow using this image:\n#\n#  // Build docker image\n#  docker build $CLIF_DIR --tag clif --build-arg=UBUNTU_VERSION=18.04 ...\n#\n#  // Configure build\n#  docker run --volume $CLIF_DIR:/clif --workdir /clif/build clif cmake ..\n#\n#  // Build clif-matcher\n#  docker run --volume $CLIF_DIR:/clif --workdir /clif/build clif make clif-matcher\n#\n#  // Run cc tests\n#  docker run --volume $CLIF_DIR:/clif --workdir /clif/build clif ctest\n#\n# This docker image can be customized using the following build args:\n#\n#  UBUNTU_VERSION: one of tags listed on https://hub.docker.com/_/ubuntu\n#  ABSL_VERSION: one of abseil/abseil-cpp Github releases\n#  PROTOBUF_VERSION: one of protocolbuffers/protobuf Github releases\n#  PYTHON_VERSION: python version to use (>= 3.6)\n\nARG UBUNTU_VERSION=18.04\n\nFROM ubuntu:${UBUNTU_VERSION}\n\nARG ABSL_VERSION=20210324.2\nARG PROTOBUF_VERSION=3.13.0\nARG PYTHON_VERSION=3.7\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    autoconf \\\n    automake \\\n    cmake \\\n    curl \\\n    gpg-agent \\\n    g++ \\\n    libtool \\\n    make \\\n    pkg-config \\\n    software-properties-common \\\n    wget \\\n    unzip && rm -rf /var/lib/apt/lists/*;\n\n# Configure LLVM 11 apt repository\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \\\n    add-apt-repository \"deb http://apt.llvm.org/$(lsb_release -sc)/ llvm-toolchain-$(lsb_release -sc)-11 main\"\n\n# Install CLIF dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    clang-11 \\\n    libclang-11-dev \\\n    libgoogle-glog-dev \\\n    libgtest-dev \\\n    libllvm11 \\\n    llvm-11 \\\n    llvm-11-dev \\\n    llvm-11-linker-tools \\\n    python3-dev \\\n    zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# Configure deadsnakes PPA with the more recent versions of python packaged for\n# Ubuntu. See https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa\nRUN add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n    \"python$PYTHON_VERSION-dev\" \\\n    \"python$PYTHON_VERSION-distutils\" && rm -rf /var/lib/apt/lists/*;\n\n# Install latest version of pip since the version on ubuntu could be outdated\nRUN curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \\\n    \"python$PYTHON_VERSION\" get-pip.py && \\\n    rm get-pip.py\n\n# Compile and install absl-cpp from source\nRUN wget \"https://github.com/abseil/abseil-cpp/archive/$ABSL_VERSION.tar.gz\" && \\\n    tar -xf \"$ABSL_VERSION.tar.gz\" && \\\n    mkdir \"abseil-cpp-$ABSL_VERSION/build\" && \\\n    cd \"abseil-cpp-$ABSL_VERSION/build\" && \\\n    cmake .. -DCMAKE_POSITION_INDEPENDENT_CODE=true && \\\n    make install && \\\n    rm -rf \"/abseil-cpp-$ABSL_VERSION\" \"/$ABSL_VERSION.tar.gz\"\n\n# Compile and install protobuf from source\nRUN wget \"https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOBUF_VERSION/protobuf-cpp-$PROTOBUF_VERSION.tar.gz\" && \\\n    tar -xf \"protobuf-cpp-$PROTOBUF_VERSION.tar.gz\" && \\\n    cd \"protobuf-$PROTOBUF_VERSION\" && \\\n    # Configure and install C++ libraries\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(nproc) && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf \"/protobuf-$PROTOBUF_VERSION\" \"/protobuf-cpp-$PROTOBUF_VERSION.tar.gz\"\n\n# Install googletest\nRUN cd /usr/src/googletest && \\\n    cmake . && \\\n    make install\n\n# Install python runtime and test dependencies\nRUN \"python$PYTHON_VERSION\" -m pip install \\\n    absl-py \\\n    parameterized \\\n    protobuf==\"$PROTOBUF_VERSION\" \\\n    pyparsing==2.2.0\n"
}