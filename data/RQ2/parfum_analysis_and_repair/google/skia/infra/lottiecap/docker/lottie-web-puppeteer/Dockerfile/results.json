{
  "startTime": 1674251588435,
  "endTime": 1674251589156,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker container with Google Chrome and puppeteer.\n#\n# Tests will be run as non-root (user skia, in fact), so /OUT should have permissions\n# 777 so as to be able to create output there.\n\nFROM node:8.11\n\nRUN apt-get update && apt-get upgrade -y\n\nRUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64.deb\nRUN dpkg -i dumb-init_*.deb\n\n# https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-in-docker\n# recommends using dumb-init to \"prevent zombie chrome processes\"\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\nRUN sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list'\nRUN apt-get update && apt-get install --no-install-recommends -y google-chrome-stable && rm -rf /var/lib/apt/lists/*;\n\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true\n\nRUN npm install --global \\\n    command-line-args@5.0.2 \\\n    command-line-usage@5.0.3 \\\n    express@4.16.3 \\\n    node-fetch@2.2.0 \\\n    puppeteer@1.6.2 && npm cache clean --force;\n\n# Allows require('puppeteer') to work from anywhere.\n# https://stackoverflow.com/a/15646750\nENV NODE_PATH=/usr/local/lib/node_modules\n\n#Add user so we don't have to run as root (prevents us from over-writing files in /SRC)\nRUN groupadd -g 2000 skia \\\n    && useradd -u 2000 -g 2000 skia \\\n    && mkdir -p /home/skia \\\n    && chown -R skia:skia /home/skia\n\n# These directories can be used for mounting a source checkout and having a place to put outputs.\nRUN mkdir -m 0777 /SRC /OUT\n\n# Run everything after as non-privileged user.\nUSER skia\n\nWORKDIR /home/skia"
}