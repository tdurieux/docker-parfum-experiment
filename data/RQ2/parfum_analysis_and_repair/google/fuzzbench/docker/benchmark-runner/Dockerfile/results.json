{
  "startTime": 1674214894609,
  "endTime": 1674214895608,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 48,
        "columnStart": 25,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 44,
        "lineEnd": 48,
        "columnStart": 25,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Dockerfile for running a specific benchmark for a specific fuzzer.\n#\n# This Dockerfile adds essential files into the runner image, regardless of\n# whether it was built from `benchmark-runner/Dockerfile` or a custom\n# `runner.Dockerfile`.\n#\n# The benchmark/fuzzer pair is defined by build arguments. To specify them, pass\n# the following arguments to docker build:\n#\n# $ docker build \\\n#   --build-arg benchmark=afl \\\n#   --build-arg fuzzer=freetype2-2017 \\\n#   ...\n\nARG fuzzer\nARG benchmark\n\n# We use Docker's multi-stage build feature to create a minimal runner image,\n# separate from the sometimes bulky builder images.\n\n# We take the already built builder image for the given fuzzer/benchmark pair\n# and refer to it as \"builder\", so we can copy the build artifacts from it.\nFROM gcr.io/fuzzbench/builders/$fuzzer/$benchmark AS builder\n\n# We base the runner image from the intermediate runner image, defined by the\n# runner.Dockerfile of each fuzzer.\nFROM gcr.io/fuzzbench/runners/$fuzzer/$benchmark-intermediate\n\n# Install runtime dependencies for benchmarks.\n\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n    libglib2.0-0 \\\n    libxml2 \\\n    libarchive13 \\\n    libgss3 && rm -rf /var/lib/apt/lists/*;\n\n# Set up the directory for the build artifacts.\nENV OUT /out\nENV WORKDIR /out\nRUN mkdir -p $WORKDIR\nWORKDIR $WORKDIR\n\nENV ROOT_DIR=/src\n\n# Copy over all the build artifacts (without * to preserve directory structure).\n# This also copies seed and dictionary files if they are available.\nCOPY --from=builder /out/ ./\n# Copy the benchmarks directory.\nCOPY benchmarks $ROOT_DIR/benchmarks\n# Copy the fuzzers directory.\nCOPY fuzzers $ROOT_DIR/fuzzers\n# Create empty __init__.py to allow python deps to work.\nRUN touch __init__.py\n\n# Define environment variables used when we run the fuzzer:\n# - Directory to get starting seeds from.\nENV SEED_CORPUS_DIR=$WORKDIR/seeds\n# - Where to place new test cases generated by the fuzzer.\nENV OUTPUT_CORPUS_DIR=$WORKDIR/corpus\n\n# Create the seeds directory if it doesn't exist.\nRUN mkdir -p $SEED_CORPUS_DIR $OUTPUT_CORPUS_DIR\n\n# Copy the source code into the image. We do this here instead of in base-image\n# because it is likely to change, particularly in development. If this were done\n# earlier, build cycles would be intolerably slow.\nCOPY common $ROOT_DIR/common\nCOPY experiment/runner.py $ROOT_DIR/experiment/runner.py\nCOPY docker/benchmark-runner $ROOT_DIR/docker/benchmark-runner\n\nENV PYTHONPATH=$ROOT_DIR\nRUN chmod +x $ROOT_DIR/docker/benchmark-runner/startup-runner.sh\nENTRYPOINT $ROOT_DIR/docker/benchmark-runner/startup-runner.sh\n"
}