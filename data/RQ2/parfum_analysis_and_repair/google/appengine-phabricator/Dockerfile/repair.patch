diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/google/appengine-phabricator/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/google/appengine-phabricator/Dockerfile/repaired.Dockerfile
index a89b6db..3602adc 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/google/appengine-phabricator/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/google/appengine-phabricator/Dockerfile/repaired.Dockerfile
@@ -34,7 +34,7 @@ RUN apt-get update && apt-get upgrade -y && \
 # Mercurial to support hosted hg repos
   mercurial && \
   apt-get clean && \
-  pip install Pygments
+  pip install --no-cache-dir Pygments && rm -rf /var/lib/apt/lists/*;
 
 # Setup Apache and Supervisord
 ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
@@ -69,16 +69,16 @@ ADD ./send_mail.py /opt/send_mail.py
 # TODO(ckerur): Split the configuration of the mail implementation adapter away from the compile_time_config.sh script,
 # since this is only specific to AppEngine; not the base commands needed. Then we can move the below command after the base Phabricator setup
 
-RUN pip install --upgrade pip>=6.1.1 && \
-  pip install click && \
-  pip install /home/vmagent/python-runtime.tar.gz && \
+RUN pip install --no-cache-dir --upgrade pip >=6.1.1 && \
+  pip install --no-cache-dir click && \
+  pip install --no-cache-dir /home/vmagent/python-runtime.tar.gz && \
   chmod +x /opt/send_mail.py && \
 # Add Google App Engine email class for sending out email. This is a Python implementation
   chmod +x /opt/phabricator/src/applications/metamta/adapter/PhabricatorMailImplementationPythonCLIAdapter.php && \
 # build-essential gives us "make", which is required by the "arc liberate" command below.
-  apt-get install -y build-essential && \
+  apt-get install --no-install-recommends -y build-essential && \
 # Run liberate to build a new library map so the class is found by phabricator
-	/opt/arcanist/bin/arc liberate /opt/phabricator/
+	/opt/arcanist/bin/arc liberate /opt/phabricator/ && rm -rf /var/lib/apt/lists/*;
 
 # Configure the base Phabricator setup.
 ADD phabricator.conf /etc/apache2/sites-available/phabricator.conf
@@ -102,8 +102,8 @@ ENV PHABRICATOR_BASE_URI PHABRICATOR_BASE_URI
 ENV ALTERNATE_FILE_DOMAIN ALTERNATE_FILE_DOMAIN
 
 # Install the Google Cloud SDK.
-RUN apt-get install unzip && \
-  curl -O https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip && \
+RUN apt-get install -y --no-install-recommends unzip && \
+  curl -f -O https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip && \
   unzip google-cloud-sdk.zip -d /google/ && \
   rm google-cloud-sdk.zip && \
   echo PATH=/google/google-cloud-sdk/bin:$PATH >> /etc/profile && \
@@ -112,7 +112,7 @@ RUN apt-get install unzip && \
       --disable-installation-options && \
   /google/google-cloud-sdk/bin/gcloud config set \
       --scope installation \
-      component_manager/disable_update_check True
+      component_manager/disable_update_check True && rm -rf /var/lib/apt/lists/*;
 
 # Support Gerrit
 ADD git-credential-gerrit.sh /google/google-cloud-sdk/bin/git-credential-gerrit.sh
@@ -139,9 +139,9 @@ RUN chmod +x /opt/run_time_config.sh && \
   tar -C /usr/local -xzf /opt/go1.4.2.linux-amd64.tar.gz && \
   export PATH=${PATH}:/usr/local/go/bin/ && \
   export GOPATH=/opt/ && \
-  go get github.com/google/git-phabricator-mirror/git-phabricator-mirror
+  go get github.com/google/git-phabricator-mirror/git-phabricator-mirror && rm /opt/go1.4.2.linux-amd64.tar.gz
 
 # Install uuidgen and jq, so that the run-time setup script can setup the Cloud SQL instance.
-RUN apt-get install -y --no-install-recommends uuid-runtime jq
+RUN apt-get install -y --no-install-recommends uuid-runtime jq && rm -rf /var/lib/apt/lists/*;
 
 CMD ["/bin/sh", "-c", "echo One time config && /opt/run_time_config.sh && echo Upgrading the SQL database && /opt/phabricator/bin/storage upgrade --force && /usr/bin/supervisord"]