{
  "startTime": 1674219516577,
  "endTime": 1674219518150,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 20,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 2,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 2,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 2,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nRUN yum install -y git \\\n                   tar \\\n                   wget \\\n                   which \\\n                   make \\\n                   emacs \\\n                   autoconf \\\n                   curl-devel \\\n                   unzip \\\n                   automake \\\n                   libtool \\\n                   glibc-static.i686 \\\n                   glibc-devel \\\n                   glibc-devel.i686 && rm -rf /var/cache/yum\n\nRUN yum update -y nss\n\n# Install Java 8\nRUN wget -q --no-cookies --no-check-certificate \\\n    --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \\\n    \"https://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz\" \\\n    -O - | tar xz -C /var/local\nENV JAVA_HOME /var/local/jdk1.8.0_131\nENV PATH $JAVA_HOME/bin:$PATH\n\n# Install Clang 5\nRUN yum install -y centos-release-scl && rm -rf /var/cache/yum\nRUN yum install -y llvm-toolset-7 && rm -rf /var/cache/yum\nENV CC /opt/rh/llvm-toolset-7/root/usr/bin/clang\nENV CXX /opt/rh/llvm-toolset-7/root/usr/bin/clang++\n\n# Download and install Golang\nWORKDIR /\nENV GOLANG_VERSION 1.10.5\nENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz\nENV GOLANG_DOWNLOAD_SHA256 a035d9beda8341b645d3f45a1b620cf2d8fb0c5eb409be36b389c0fd384ecc3a\nRUN curl -fsSL \"$GOLANG_DOWNLOAD_URL\" -o golang.tar.gz \\\n\t&& echo \"$GOLANG_DOWNLOAD_SHA256  golang.tar.gz\" | sha256sum -c - \\\n\t&& tar -C /usr/local -xzf golang.tar.gz \\\n\t&& rm golang.tar.gz\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\n\n# Build and install CMake from source.\nWORKDIR /usr/src\nRUN git clone https://gitlab.kitware.com/cmake/cmake.git CMake && \\\n  cd CMake && \\\n  git checkout tags/v3.5.2 && \\\n  mkdir /usr/src/CMake-build && \\\n  cd /usr/src/CMake-build && \\\n  /usr/src/CMake/bootstrap \\\n    --parallel=$(grep -c processor /proc/cpuinfo) \\\n    --prefix=/usr && \\\n  make -j$(grep -c processor /proc/cpuinfo) && \\\n  ./bin/cmake \\\n    -DCMAKE_BUILD_TYPE:STRING=Release \\\n    -DCMAKE_USE_OPENSSL:BOOL=ON . && \\\n  make install && \\\n  cd .. && rm -rf CMake* && rm -rf /usr/src/CMake-build\n\n# Build and install Python from source.\nWORKDIR /usr/src\nENV PYTHON_VERSION 2.7.14\nRUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && \\\n  tar xvzf Python-${PYTHON_VERSION}.tgz && \\\n  cd Python-${PYTHON_VERSION} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make -j$(grep -c processor /proc/cpuinfo) && \\\n  make install && \\\n  cd .. && rm -rf Python-${PYTHON_VERSION}* && rm Python-${PYTHON_VERSION}.tgz\n\n# Build and install ninja from source.\nWORKDIR /usr/src\nENV NINJA_VERSION 1.8.2\nRUN git clone https://github.com/martine/ninja.git && \\\n  cd ninja && \\\n  git checkout v$NINJA_VERSION && \\\n  ./configure.py --bootstrap && \\\n  mv ninja /usr/bin/ && \\\n  cd .. && rm -rf ninja\n\n# Build and install BoringSSL from source.\nENV BORINGSSL_HOME /usr/src/boringssl\nENV BORINGSSL_BUILD_DIR $BORINGSSL_HOME/build64\nRUN git clone --depth 1 https://boringssl.googlesource.com/boringssl $BORINGSSL_HOME\nRUN mkdir $BORINGSSL_BUILD_DIR\nWORKDIR $BORINGSSL_BUILD_DIR\nRUN cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DCMAKE_BUILD_TYPE=Release -DCMAKE_ASM_FLAGS=-Wa,--noexecstack -GNinja ..\nRUN ninja\n\n# Download conscrypt.\nWORKDIR /\nRUN git clone --depth 1 --no-single-branch https://github.com/google/conscrypt.git\n\n# Start in toolset environment that uses Clang 5\nCMD [\"scl\", \"enable\", \"llvm-toolset-7\", \"bash\"]\n"
}