{
  "startTime": 1674253863610,
  "endTime": 1674253864297,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:8\n\nWORKDIR /opt/app\n\n# We copy the package.json to leverage the layer caching\n# capabilities of Docker. If the package.json is not\n# changed, the build process will not run the npm install\n# command, which is the next command in the Dockerfile.\n#\n# The rationale behind this is the following: if the package.json\n# is not changed, Docker will use the previously cached layer\n# (outcome of previous image builds). When it comes to execute\n# the next instruction, which is unchanged it will be able to\n# reuse a previously cached layer associated to the instruction\n# \"RUN npm install\" which has not changed.\n#\nCOPY package.json package.json\nCOPY package-lock.json package-lock.json\n\nRUN npm install && npm cache clean --force;\n\n\n# We copy the rest of the application, this will override the\n# previously copied files\n#\nCOPY . .\n\nRUN npm run build\n\n# This is to prevent that the command gets overridden from\n# outside.\n#\nENTRYPOINT [\"npm\"]\n\n# This is to specify which command to run with NPM.\n#\nCMD [\"run\", \"serve\"]\n\nEXPOSE 3000\n"
}