{
  "startTime": 1674251206329,
  "endTime": 1674251207622,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 2,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 62,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 2,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 2,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 62,
        "columnEnd": 95
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 2,
        "columnEnd": 64
      }
    }
  ],
  "repairedDockerfile": "# This builds an Ubuntu image, clones the coreclr github repo and builds it.\n# It then sets up the environment for compiling the New Relic .NET profiler.\nFROM ubuntu:18.04\n\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y \\\n  wget \\\n  curl \\\n  git \\\n  dos2unix \\\n  gnupg && rm -rf /var/lib/apt/lists/*;\n\nRUN echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main\" | tee /etc/apt/sources.list.d/llvm.list\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-get update\n\n# Putting this on it's own line, tzdata is a dependency of one of the packages being installed below\n# and it needs to be told what timezone it is in.  Just use UTC.\nRUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get --no-install-recommends -y install tzdata && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends -y \\\n  cmake llvm-7 clang-7 lldb-7 liblldb-7-dev libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev libnuma-dev libkrb5-dev \\\n  libc++-dev \\\n  uuid-dev \\\n  zlib1g-dev \\\n  locales \\\n  locales-all && rm -rf /var/lib/apt/lists/*;\n\n# The CoreCLR build notes say their repos should be pulled into a `git` directory.\n# Not sure how necessary that is.\nRUN mkdir /root/git\nWORKDIR /root/git\n\nRUN git clone --branch release/3.1 https://github.com/dotnet/coreclr.git\n\n# Build CoreCLR with clang 7\nRUN cd /root/git/coreclr; ./build.sh -clang7\n\n# Set up to build the profiler\nRUN ln -sf /usr/bin/clang-7 /usr/bin/cc; ln -sf /usr/bin/clang++-7 /usr/bin/c++\n\n# Install dotnet core 3.1\nRUN wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \\\n  dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb && \\\n  apt-get install --no-install-recommends -y apt-transport-https && apt-get update && apt-get install --no-install-recommends -y dotnet-sdk-3.1 && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /root/git\n\n# Environment for running the profiler\n\nENV CORECLR_ENABLE_PROFILING=1\nENV CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A}\nENV CORECLR_PROFILER_PATH=/profiler/libNewRelicProfiler.so\nENV CORECLR_NEWRELIC_HOME=/agent\nENV CORECLR_BINARIES=/root/git/coreclr/bin/Product/Linux.x64.Debug\n\n# (Try to) enable CLR logging\nENV COMPlus_LogEnable=1\nENV COMPlus_LogToConsole=1\nENV COMPlus_LogLevel=10\n\n# Install SOS extension\nRUN dotnet tool install -g --version 3.1 dotnet-sos && \\\n  /root/.dotnet/tools/dotnet-sos install\n\n# Write a debug.sh script in $CORECLR_BINARIES that runs lldb on a .NET app\nRUN echo 'lldb-7 -o \"plugin load libsosplugin.so\" -o \"process launch -s\"  -o \"breakpoint set -n LOADLoadLibraryDirect\" corerun $CORECLR_BINARIES/bin/Debug/netcoreapp3.1/Linux.x64.Debug.dll' > $CORECLR_BINARIES/debug.sh\nRUN chmod +x $CORECLR_BINARIES/debug.sh"
}