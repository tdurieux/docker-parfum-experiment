{
  "startTime": 1674249306880,
  "endTime": 1674249307662,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 5,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 45,
        "columnStart": 2,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 5,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 5,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 5,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 5,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG image=debian:stretch-slim\nFROM ${image}\n# Run with `docker build --build-arg deb_version=<version>`\nARG deb_version\nARG deb_release=unstable\nARG deb_codename=stretch\nARG network=mainnet\n\nENV DEBIAN_FRONTEND noninteractive\n\n# We do not install the below platform-specific dependencies,\n# and instead assume that apt will install the proper deps based on the package definition.\n# The packages are noted here just for clarity/documentation.\n# Stretch-only Deps:\n#    libffi6\n#    libprocps6\n#    libjemalloc1\n# Buster-only Deps:\n#    libffi7\n#    libprocps7\n#    libjemalloc2\n# Focal-only Deps:\n#    libffi7\n#    libprocps8\n#    libjemalloc2\n\n\n# Dependencies\nRUN apt-get -y update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get -y upgrade && \\\n  DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    dnsutils \\\n    dumb-init \\\n    gettext \\\n    gnupg2 \\\n    jq \\\n    libgmp10 \\\n    libgomp1 \\\n    libssl1.1 \\\n    libpq-dev \\\n    procps \\\n    python3 \\\n    tzdata && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Install google-cloud-sdk for GCLOUD_UPLOAD feature\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n  && curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y google-cloud-sdk kubectl && rm -rf /var/lib/apt/lists/*;\n\n# Mina daemon package\n# jemalloc is also installed automatically here to match the package dependencies for this $deb_codename\nRUN echo \"Building image with version $deb_version from repo $deb_release $deb_codename for network $network\" \\\n  && echo \"deb [trusted=yes] http://packages.o1test.net $deb_codename $deb_release\" > /etc/apt/sources.list.d/o1.list \\\n  && apt-get update \\\n  || sleep 10s && apt-get update \\\n  || sleep 10s && apt-get update \\\n  || sleep 10s && apt-get update \\\n  && apt-get install --no-install-recommends -y --allow-downgrades \"mina-$network=$deb_version\" && rm -rf /var/lib/apt/lists/*;\n\n\n# Move to a non-root UID in the future (specifically 50000, as it is memorable and safely within the bounds of most systems)\n# for now stick to root for compatibility\nARG UID=0\n\n# TODO: flesh out this feature + test\n# Create a mina user to execute the daemon with\nRUN mkdir /home/mina \\\n  && adduser --uid 50000 --disabled-password --gecos '' mina \\\n  && passwd -l mina \\\n  && chown -R mina:mina /home/mina\n\nWORKDIR /home/mina\nUSER mina\n\n## Reset workdir, USER, and ${UID} for root-owned version\nWORKDIR /root/\nUSER 0\n\nCOPY --chown=${UID} scripts/healthcheck-utilities.sh /healthcheck/utilities.sh\nCOPY --chown=${UID} scripts/cron_job_dump_ledger.sh /cron_job_dump_ledger.sh\nCOPY --chown=${UID} scripts/daemon-entrypoint.sh /entrypoint.sh\n# Solve this by marking scripts executable in git\nCOPY --chown=${UID} ./auxiliary_entrypoints /entrypoint.d\n\nCOPY --chown=${UID} puppeteer-context/* /\nRUN chmod +x /mina_daemon_puppeteer.py /find_puppeteer.sh /start.sh /stop.sh\n\nENV MINA_TIME_OFFSET 0\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"/entrypoint.sh\"]\n"
}