{
  "startTime": 1674250826111,
  "endTime": 1674250827747,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 29,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 160
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 18,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 18,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 18,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 18,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 18,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 The Knative Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Build kubetest independently of the rest\nFROM docker.io/library/golang:1.17.11 as kubetest\nRUN git clone https://github.com/kubernetes/test-infra /go/src/k8s.io/test-infra\n# Using e685556b32c5fb7ab12c3277d41112d47ceac0cd because after that, the URL kubetest\n# uses needs extract credentials.\n# FIXME: use kind and kops to run provision e2e tests clusters instead of kubetest\nRUN cd /go/src/k8s.io/test-infra && \\\n    git checkout e685556b32c5fb7ab12c3277d41112d47ceac0cd && \\\n    go install k8s.io/test-infra/kubetest\n\nFROM docker.io/library/debian:buster\nLABEL maintainer \"Tekton Authors <tekton-dev@googlegroups.com>\"\n\nENV DEBIAN_FRONTEND noninteractive \\\n    TERM=xterm\n\n# common util tools\n# https://github.com/GoogleCloudPlatform/gsutil/issues/446 for python-openssl\nRUN apt update && apt install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    file \\\n    git \\\n    jq \\\n    mercurial \\\n    openssh-client \\\n    pkg-config \\\n    procps \\\n    python3 \\\n    python3-dev \\\n    python3-openssl \\\n    python3-pip \\\n    rsync \\\n    unzip \\\n    wget \\\n    xz-utils \\\n    zip \\\n    zlib1g-dev \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \\\n    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 \\\n    && python -m pip install --upgrade pip setuptools wheel\n\n# Install gcloud\n\nENV PATH=/google-cloud-sdk/bin:/workspace:${PATH} \\\n    CLOUDSDK_CORE_DISABLE_PROMPTS=1\n\nRUN wget -q https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz && \\\n    tar xzf google-cloud-sdk.tar.gz -C / && \\\n    rm google-cloud-sdk.tar.gz && \\\n    /google-cloud-sdk/install.sh \\\n        --disable-installation-options \\\n        --bash-completion=false \\\n        --path-update=false \\\n        --usage-reporting=false && \\\n    gcloud components update && \\\n    gcloud components install alpha beta kubectl docker-credential-gcr && \\\n    gcloud info | tee /gcloud-info.txt\nRUN docker-credential-gcr configure-docker\n\n#\n# BEGIN: DOCKER IN DOCKER SETUP\n# Install Docker deps, some of there are already installed in the image but\n# that's fine since they won't re-install and we can reuse the code below\n# for another image someday.\nRUN apt update && apt install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Add the Docker apt-repository\nRUN curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg \\\n    | apt-key add - && \\\n    add-apt-repository \\\n    \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n    $(lsb_release -cs) stable\"\n\n# Install Docker\n# TODO: the `sed` is a bit of a hack, look into alternatives.\n# Why this exists: `docker service start` on debian runs a `cgroupfs_mount` method,\n# We're already inside docker though so we can be sure these are already mounted.\n# Trying to remount these makes for a very noisy error block in the beginning of\n# the pod logs, so we just comment out the call to it... :shrug:\nRUN apt update && apt install -y --no-install-recommends docker-ce=5:19.03.* && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    sed -i 's/cgroupfs_mount$/#cgroupfs_mount\\n/' /etc/init.d/docker \\\n    && update-alternatives --set iptables /usr/sbin/iptables-legacy \\\n    && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy\n\n\n\n# Move Docker's storage location\nRUN echo 'DOCKER_OPTS=\"${DOCKER_OPTS} --data-root=/docker-graph\"' | \\\n    tee --append /etc/default/docker\n# NOTE this should be mounted and persisted as a volume ideally (!)\n# We will make a fallback one now just in case\nRUN mkdir /docker-graph\n\n#\n# END: DOCKER IN DOCKER SETUP\n#\n\n# Go standard envs\nENV GOPATH /home/prow/go\nENV GOBIN /usr/local/go/bin\nENV PATH /usr/local/go/bin:$PATH\n\n# preinstall:\n# - bc for shell to junit\nRUN apt update && apt install --no-install-recommends -y bc && \\\n    rm -rf /var/lib/apt/lists/*\n\n# replace kubectl with one from K8S_RELEASE\nARG K8S_RELEASE=latest\nRUN rm -f $(which kubectl) && \\\n    export KUBECTL_VERSION=$( curl -f https://storage.googleapis.com/kubernetes-release/release/${K8S_RELEASE}.txt) && \\\n    wget https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl && \\\n    chmod +x /usr/local/bin/kubectl\n\n# everything below will be triggered on every new image tag ...\nADD [\"https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/get-kube.sh\", \\\n    \"/workspace/\"]\nRUN [\"/bin/chmod\", \"+x\", \"/workspace/get-kube.sh\"]\n\n# END: test-infra import\n\n# Install Go 1.17.11\nARG GO_VERSION=1.17.11\nRUN curl -f https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz > go${GO_VERSION}.tar.gz && \\\n    tar -C /usr/local -xzf go${GO_VERSION}.tar.gz && \\\n    rm go${GO_VERSION}.tar.gz\nENV GOROOT /usr/local/go\n\n# Extra tools through apt\nRUN apt update && apt install --no-install-recommends -y uuid-runtime && rm -rf /var/lib/apt/lists/*;\nRUN apt update && apt install --no-install-recommends -y rubygems && rm -rf /var/lib/apt/lists/*;\n\n# Install ko\nARG KO_VERSION=0.8.3\nRUN curl -f -L https://github.com/google/ko/releases/download/v${KO_VERSION}/ko_${KO_VERSION}_Linux_x86_64.tar.gz > ko_${KO_VERSION}.tar.gz\nRUN tar -C /usr/local/bin -xzf ko_${KO_VERSION}.tar.gz && rm ko_${KO_VERSION}.tar.gz\n\n# Extra tools through go get\nARG KIND_VERSION=\"v0.14.0\"\nRUN GO111MODULE=\"on\" go install github.com/google/go-licenses@latest && \\\n    GO111MODULE=\"on\" go get github.com/jstemmer/go-junit-report && \\\n    GO111MODULE=\"on\" go get github.com/raviqqe/liche && \\\n    GO111MODULE=\"off\" go get github.com/golang/dep/cmd/dep && \\\n    GO111MODULE=\"on\" go get sigs.k8s.io/kind@${KIND_VERSION}\n\n# Install GolangCI linter: https://github.com/golangci/golangci-lint/\nARG GOLANGCI_VERSION=1.42.0\nRUN curl -f -sL https://github.com/golangci/golangci-lint/releases/download/v${GOLANGCI_VERSION}/golangci-lint-${GOLANGCI_VERSION}-linux-amd64.tar.gz | tar -C /usr/local/bin -xvzf - --strip-components=1 --wildcards \"*/golangci-lint\"\n\n# Install Kustomize:\nARG KUSTOMIZE_VERSION=3.8.1\nRUN curl -f -sL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz | tar -C /usr/local/bin -xvzf - --strip-components=1 --wildcards \"kustomize\"\n\n# Install the TektonCD CLI: https://github.com/tektoncd/cli/\nARG TKN_VERSION=0.24.0\nRUN curl -f -sL https://github.com/tektoncd/cli/releases/download/v${TKN_VERSION}/tkn_${TKN_VERSION}_Linux_x86_64.tar.gz | tar -C /usr/local/bin -xvzf - --wildcards \"tkn\"\n\n# Extra tools through gem\nRUN gem install mixlib-config -v 2.2.4  # required because ruby is 2.1\nRUN gem install mdl -v 0.5.0\n\n# Extra tools through pip\nRUN python -m pip install yamllint\n\n# Install yq\nARG YQ_VERSION=4.13.4\nRUN wget https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64 -O /usr/local/bin/yq && \\\n    chmod +x /usr/local/bin/yq\n\nCOPY --from=kubetest /go/bin/kubetest /usr/local/bin\n\n# note the runner is also responsible for making docker in docker function if\n# env DOCKER_IN_DOCKER_ENABLED is set and similarly responsible for generating\nCOPY [\"entrypoint.sh\", \"runner.sh\", \"/usr/local/bin/\"]\nCOPY setup-kind.sh /usr/local/bin/kind-e2e\n\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n"
}