{
  "startTime": 1674249931354,
  "endTime": 1674249931876,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# PSONO Dockerfile for Alpine\nFROM psono-docker.jfrog.io/python:3.10.4-alpine3.16\n\nLABEL maintainer=\"Sascha Pfeiffer <sascha.pfeiffer@psono.com>\"\nCOPY psono/static/email /var/www/html/static/email\nCOPY . /root/\nENV PYTHONUNBUFFERED True\nWORKDIR /root\n\nRUN apk upgrade && \\\n    mkdir -p /root/.pip && \\\n    echo '[global]' >> /root/.pip/pip.conf && \\\n    echo 'index-url = https://psono.jfrog.io/psono/api/pypi/pypi/simple' >> /root/.pip/pip.conf && \\\n    apk add \\\n        ca-certificates \\\n        curl \\\n        postgresql-dev && \\\n    apk add --virtual .build-deps \\\n        build-base \\\n        libffi-dev \\\n        linux-headers && \\\n    pip3 install --no-cache-dir --upgrade pip && \\\n    pip3 install --no-cache-dir -r requirements.txt && \\\n    pip3 install --no-cache-dir uwsgi && \\\n    mkdir -p /root/.psono_server && \\\n    cp /root/configs/mainconfig/settings.yaml /root/.psono_server/settings.yaml && \\\n    sed -i /root/.psono_server/settings.yaml \\\n        -e \"s/YourPostgresDatabase/postgres/g \" \\\n        -e \"s/YourPostgresUser/postgres/g\" \\\n        -e \"s/YourPostgresHost/postgres/g\" \\\n        -e \"s/YourPostgresPort/5432/g\" \\\n        -e \"s,path/to/psono-server,root,g\" && \\\n    apk del .build-deps && \\\n    rm -Rf \\\n        /root/.cache \\\n        /var/cache/apk/*\n\n\nHEALTHCHECK --interval=2m --timeout=3s \\\n\tCMD curl -f http://localhost/healthcheck/ || exit 1\n\nEXPOSE 80\n\nCMD [\"/bin/sh\", \"/root/configs/docker/cmd.sh\"]\n"
}