{
  "startTime": 1674251166325,
  "endTime": 1674251167158,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 18,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 18,
        "columnEnd": 37
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.15 AS compile\n\nRUN apk add --no-cache build-base\n\nWORKDIR /root\nCOPY [\"upload_runtime.c\", \"upload_runtime.h\", \"wait_for_exec.c\", \\\n      \"wait_for_exec.h\", \"consts.h\", \\\n      \"/root/\"]\n\n# In wait-for-exec mode, upload_runtime won't run as the dynamic linker, so we could go with glibc, but sticking with musl is fine\nRUN gcc -static-pie -s upload_runtime.c wait_for_exec.c -o /upload_runtime\n\n# -------------------------------- #\n\nFROM ubuntu:18.04\n\nRUN apt update && apt install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=compile /upload_runtime /upload_runtime\n# Allow upload_runtime to create a binary pointing to /proc/self/exe\nRUN chmod ugo+rwx /bin\n\n# run upload_runtime in wait_for_exec mode\nENTRYPOINT [\"/upload_runtime\", \"-e\"]\nCMD [\"127.0.0.1\"] # default address\n"
}