{
  "startTime": 1674254183560,
  "endTime": 1674254184529,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 145,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 145,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2022 Telefonica Investigacion y Desarrollo, S.A.U\n#\n# This file is part of Orion Context Broker.\n#\n# Orion Context Broker is free software: you can redistribute it and/or\n# modify it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# Orion Context Broker is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n# General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.\n#\n# For those usages not covered by this license please contact with\n# iot_support at tid dot es\n#\n\nARG  IMAGE_TAG=11.3-slim\nFROM debian:${IMAGE_TAG}\n\nARG GITHUB_ACCOUNT=telefonicaid\nARG GITHUB_REPOSITORY=fiware-orion\n\nARG GIT_NAME\nARG GIT_REV_ORION\nARG CLEAN_DEV_TOOLS\n\nENV ORION_USER ${ORION_USER:-orion}\nENV GIT_NAME ${GIT_NAME:-telefonicaid}\nENV GIT_REV_ORION ${GIT_REV_ORION:-master}\nENV CLEAN_DEV_TOOLS ${CLEAN_DEV_TOOLS:-1}\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nWORKDIR /opt\n\nRUN \\\n\n    apt-get -y update && \\\n    apt-get -y upgrade && \\\n    # Install dependencies\n    apt-get -y --no-install-recommends install \\\n      curl \\\n      cmake \\\n      libssl-dev \\\n      git \\\n      g++ \\\n      libcurl4-openssl-dev \\\n      libboost-dev \\\n      libboost-regex-dev \\\n      libboost-filesystem-dev \\\n      libboost-thread-dev \\\n      uuid-dev \\\n      libgnutls28-dev \\\n      libsasl2-dev \\\n      libgcrypt-dev && \\\n    # Install libmicrohttpd from source\n    cd /opt && \\\n    curl -f -kOL https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.70.tar.gz && \\\n    tar xvf libmicrohttpd-0.9.70.tar.gz && \\\n    cd libmicrohttpd-0.9.70 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-messages --disable-postprocessor --disable-dauth && \\\n    make && \\\n    make install && \\\n    ldconfig && \\\n    # Install mosquitto from source\n    cd /opt && \\\n    curl -f -kOL https://mosquitto.org/files/source/mosquitto-2.0.12.tar.gz && \\\n    tar xvf mosquitto-2.0.12.tar.gz && \\\n    cd mosquitto-2.0.12 && \\\n    sed -i 's/WITH_CJSON:=yes/WITH_CJSON:=no/g' config.mk && \\\n    sed -i 's/WITH_STATIC_LIBRARIES:=no/WITH_STATIC_LIBRARIES:=yes/g' config.mk && \\\n    sed -i 's/WITH_SHARED_LIBRARIES:=yes/WITH_SHARED_LIBRARIES:=no/g' config.mk && \\\n    make && \\\n    make install && \\\n    ldconfig && \\\n    # Install mongodb driver from source\n    cd /opt && \\\n    curl -f -kOL https://github.com/mongodb/mongo-c-driver/releases/download/1.17.4/mongo-c-driver-1.17.4.tar.gz && \\\n    tar xfvz mongo-c-driver-1.17.4.tar.gz && \\\n    cd mongo-c-driver-1.17.4 && \\\n    mkdir cmake-build && \\\n    cd cmake-build && \\\n    cmake -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF .. && \\\n    make && \\\n    make install && \\\n    # Install rapidjson from source\n    cd /opt && \\\n    curl -f -kOL https://github.com/miloyip/rapidjson/archive/v1.1.0.tar.gz && \\\n    tar xfz v1.1.0.tar.gz && \\\n    mv rapidjson-1.1.0/include/rapidjson/ /usr/local/include && \\\n    # Install orion from source\n    adduser ${ORION_USER} && \\\n    cd /opt && \\\n    git clone https://github.com/${GIT_NAME}/fiware-orion && \\\n    cd fiware-orion && \\\n    git checkout ${GIT_REV_ORION} && \\\n    make && \\\n    make install && \\\n    # reduce size of installed binaries\n    strip /usr/bin/contextBroker && \\\n    # create needed run path\n    mkdir -p /var/run/contextBroker && \\\n    chown ${ORION_USER} /var/run/contextBroker && \\\n    cd /opt && \\\n    apt-get clean && \\\n    if [ ${CLEAN_DEV_TOOLS} -eq 0 ] ; then exit 0 ; fi && \\\n    # cleanup sources, dev tools and locales to reduce the final image size\n    # FIXME: this could need more tunning. Have a look to old CentOS Docerkile and try to\n    # reproduce the same steps\n    rm -rf /opt/libmicrohttpd-0.9.70.tar.gz \\\n           /usr/local/include/microhttpd.h \\\n           /usr/local/lib/libmicrohttpd.* \\\n           /opt/libmicrohttpd-0.9.70 \\\n           /opt/mosquitto-2.0.12.tar.gz \\\n           /opt/mosquitto-2.0.12 \\\n           /opt/mongo-c-driver-1.17.4.tar.gz \\\n           /opt/mongo-c-driver-1.17.4 \\\n           /usr/local/include/mongo \\\n           /usr/local/lib/libmongoclient.a \\\n           /opt/rapidjson-1.1.0 \\\n           /opt/v1.1.0.tar.gz \\\n           /usr/local/include/rapidjson \\\n           /opt/fiware-orion && \\\n    # remove the same packages we installed at the beginning to build Orion\n    apt-get -y remove --purge \\\n      cmake \\\n      libssl-dev \\\n      git \\\n      g++ \\\n      libcurl4-openssl-dev \\\n      libboost-dev \\\n      libboost-regex-dev \\\n      libboost-filesystem-dev \\\n      libboost-thread-dev \\\n      uuid-dev \\\n      libgnutls28-dev \\\n      libsasl2-dev \\\n      libgcrypt-dev && \\\n    apt-get -y autoremove --purge && \\\n    # The above apt removal erases some dependencies needed by contextBroker. So we reinstall it\n    apt-get -y --no-install-recommends install \\\n        libicu67 \\\n        libcurl4 \\\n        libboost-thread1.74.0 && \\\n    # Don't need old log files inside docker images\n    rm -f /var/log/*log && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /\n\n# Note we disable log file as docker container will output by stdout\nENTRYPOINT [\"/usr/bin/contextBroker\",\"-fg\", \"-multiservice\", \"-ngsiv1Autocast\", \"-disableFileLog\" ]\nEXPOSE 1026\n\nLABEL \"maintainer\"=\"Orion Team. Telefónica I+D\"\nLABEL \"org.opencontainers.image.authors\"=\"iot_support@tid.es\"\nLABEL \"org.opencontainers.image.documentation\"=\"https://fiware-orion.rtfd.io/\"\nLABEL \"org.opencontainers.image.vendor\"=\"Telefónica Investigación y Desarrollo, S.A.U\"\nLABEL \"org.opencontainers.image.licenses\"=\"AGPL-3.0-only\"\nLABEL \"org.opencontainers.image.title\"=\"Orion Context Broker\"\nLABEL \"org.opencontainers.image.description\"=\"The Orion Context Broker is an implementation of the Publish/Subscribe Context Broker GE, providing an NGSI interface\"\nLABEL \"org.opencontainers.image.source\"=https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPOSITORY}\n\n# Create an anonymous user\nRUN sed -i -r \"/^(root|nobody)/!d\" /etc/passwd /etc/shadow /etc/group \\\n    && sed -i -r 's#^(.*):[^:]*$#\\1:/sbin/nologin#' /etc/passwd\nUSER nobody\n\nHEALTHCHECK --interval=60s --timeout=5s --start-period=10s \\\n            # Note we cannot use GET /version for healthchecking as that operation is working even in the case\n            # the database is down. In this sense, GET /v2/entities is better, as it touches database\n            CMD curl --fail -X GET http://localhost:1026/v2/entities?limit=1 || exit 1\n"
}