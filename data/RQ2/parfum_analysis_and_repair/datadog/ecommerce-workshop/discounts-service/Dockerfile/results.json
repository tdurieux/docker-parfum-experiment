{
  "startTime": 1674255315624,
  "endTime": 1674255316259,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ^ This enables the new BuildKit stable syntax which can be\n# run with the DOCKER_BUILDKIT=1 environment variable in your\n# docker build command (see build.sh)\nFROM python:3.9.6-slim-buster\n\n# Update, upgrade, and cleanup debian packages\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get upgrade --yes && \\\n    apt-get install --no-install-recommends --yes build-essential libpq-dev openssh-server sudo dumb-init rsyslog && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup for attack scenario\nRUN useradd -rm -g root -G sudo test\nRUN  echo 'test:test' | chpasswd\nUSER test\n\n# Bring in app\nWORKDIR /app\nCOPY . .\n\n# Create SSH config for attack scenario\nRUN mkdir -p /home/test/.ssh\nCOPY keys/storedog-leaked-key.pub /home/test/.ssh\nRUN touch /home/test/.ssh/authorized_keys\nRUN cat /home/test/.ssh/storedog-leaked-key.pub >> /home/test/.ssh/authorized_keys\n\nUSER root\n# Let Flask know what to boot\nENV FLASK_APP=discounts.py\n\n# Install dependencies via pip and avoid caching build artifacts\nRUN pip install --no-cache-dir -r requirements.txt\nRUN chmod +x ./my-wrapper-script.sh\n\n# Pass in Port mapping (default to 8282)\nARG DISCOUNTS_PORT=8282\n# Because CMD is a runtime instruction, we have to create an additional ENV var that reads the ARG val\n# Only ENV vars are accessible via CMD\nENV DISCOUNTS_PORT ${DISCOUNTS_PORT}\n\n# required to get logs out of the container\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n\n# runs sshd and flask server\nCMD ./my-wrapper-script.sh ${DISCOUNTS_PORT}\n"
}