{
  "startTime": 1674217877841,
  "endTime": 1674217879127,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 5
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nARG PHP_MAJOR_MINOR\n\n# Getting the latest nginx\nRUN echo $'[nginx]\\nname=nginx repo\\nbaseurl=https://nginx.org/packages/mainline/centos/7/$basearch/\\ngpgcheck=0\\nenabled=1' >> /etc/yum.repos.d/nginx.repo\n\nRUN \\\n    rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n    && yum install -y \\\n        autoconf \\\n        bzip2-devel \\\n        elinks \\\n        gcc \\\n        gdb \\\n        git \\\n        httpd-devel \\\n        libcurl-devel \\\n        libmemcached-devel \\\n        libsodium-devel \\\n        libsqlite3x-devel \\\n        libxml2-devel \\\n        libxslt-devel \\\n        nc \\\n        nginx \\\n        openssl-devel \\\n        readline-devel \\\n        unzip \\\n        vim \\\n        wget \\\n    && debuginfo-install -y httpd \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum\n\nADD envs /envs\n\n# Downloading / Extracting PHP\nRUN set -eux; \\\n    source /envs/${PHP_MAJOR_MINOR}.env; \\\n    curl -f -L --output php.tar.gz ${PHP_DOWNLOAD_URL}; \\\n    tar -xvf php.tar.gz -C /usr/local/src/; \\\n    mv /usr/local/src/php-* /usr/local/src/php; \\\n    rm php.tar.gz\n\nWORKDIR /usr/local/src/php\n\nRUN set -eux; \\\n    mkdir -p /etc/php.d; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr/local \\\n        --with-config-file-path=/etc \\\n        --with-config-file-scan-dir=/etc/php.d \\\n        --enable-calendar \\\n        --enable-exif \\\n        --enable-fpm \\\n        --enable-ftp \\\n        --enable-mysqlnd \\\n        --enable-pcntl \\\n        --enable-shmop \\\n        --enable-sockets \\\n        --enable-sysvmsg \\\n        --enable-sysvsem \\\n        --enable-sysvshm \\\n        --with-apxs2 \\\n        --with-bz2 \\\n        --with-curl \\\n        --with-fpm-group=www-data \\\n        --with-fpm-user=www-data \\\n        --with-gettext \\\n        --with-mysqli \\\n        --with-openssl \\\n        --with-pdo-mysql \\\n        --with-pear \\\n        --with-readline \\\n        --with-sodium \\\n        --with-xsl \\\n        --with-zlib \\\n    ; \\\n    make -j \"$((`nproc`+1))\"; \\\n    make install\n\n# Enabling Opcache, which is disabled by default\nRUN echo \"zend_extension=opcache.so\" > /etc/php.d/opache.ini\n\n# Igbinary\nRUN set -eux; \\\n    source /envs/${PHP_MAJOR_MINOR}.env; \\\n    if [[ -z \"${IGBINARY_VERSION:-}\" ]]; then PECL_SUFFIX=\"\"; else PECL_SUFFIX=\"-${IGBINARY_VERSION}\"; fi; \\\n    pecl install \"igbinary${PECL_SUFFIX}\"; \\\n    echo \"extension=igbinary.so\" > /etc/php.d/igbinary.ini\n\n# Memached\nRUN set -eux; \\\n    source /envs/${PHP_MAJOR_MINOR}.env; \\\n    if [[ -z \"${MEMCACHED_VERSION:-}\" ]]; then PECL_SUFFIX=\"\"; else PECL_SUFFIX=\"-${MEMCACHED_VERSION}\"; fi; \\\n    printf 'yes' | pecl install \"memcached${PECL_SUFFIX}\"; \\\n    echo \"extension=memcached.so\" > /etc/php.d/memcached.ini\n\n# Redis\nRUN set -eux; \\\n    source /envs/${PHP_MAJOR_MINOR}.env; \\\n    if [[ -z \"${REDIS_VERSION:-}\" ]]; then PECL_SUFFIX=\"\"; else PECL_SUFFIX=\"-${REDIS_VERSION}\"; fi; \\\n    printf 'yes' | pecl install \"redis${PECL_SUFFIX}\"; \\\n    echo \"extension=redis.so\" > /etc/php.d/redis.ini\n\n# Create coredumps folder\n# If not generated, see: https://fromdual.com/hunting-the-core\nRUN mkdir -p /tmp/corefiles\nRUN chmod -R a+w /tmp/corefiles\nADD enable-coredump.sh /scripts/enable-coredump.sh\n\n# Add the wait script to the image: note SHA 672a28f0509433e3b4b9bcd4d9cd7668cea7e31a has been reviewed and should not\n# be changed without an appropriate code review.\nADD https://raw.githubusercontent.com/eficode/wait-for/672a28f0509433e3b4b9bcd4d9cd7668cea7e31a/wait-for /scripts/wait-for.sh\nRUN chmod +x /scripts/wait-for.sh\n\n# Installing vegeta\nRUN curl -f -L -o /tmp/vegeta.tar.gz https://github.com/tsenart/vegeta/releases/download/v12.8.4/vegeta_12.8.4_linux_amd64.tar.gz \\\n    && tar -C /usr/bin -zxvf /tmp/vegeta.tar.gz vegeta \\\n    && rm /tmp/vegeta.tar.gz\n\n# Installing composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\n# Preparing PHP\nRUN echo \"date.timezone = UTC\" > \"/etc/php.d/00-adjust-timezones.ini\"\n\n# Preparing PHP-FPM\nRUN mkdir -p /usr/local/etc/php-fpm.d\nADD php-fpm.conf /usr/local/etc/php-fpm.conf\n\n# Preparing NGINX\nRUN groupadd www-data\nRUN adduser -M --system -g www-data www-data\nADD nginx.conf /etc/nginx/nginx.conf\nADD nginx.site.conf /etc/nginx/conf.d/default.conf\n\n# Preparing HTTPD\nADD apache.php.conf /etc/httpd/conf.d/php.conf\nRUN sed -i 's/Listen 80/Listen 81/' /etc/httpd/conf/httpd.conf\nRUN echo \"CoreDumpDirectory /tmp/corefiles\" >> /etc/httpd/conf/httpd.conf\n\nADD run.sh /scripts/run.sh\nADD prepare.sh /scripts/prepare.sh\n\nWORKDIR /var/www/html\n\nENV COMPOSER_CACHE_DIR /composer-cache\nRUN mkdir -p ${COMPOSER_CACHE_DIR}\nENV COMPOSER_VENDOR_DIR /composer-vendor\nRUN mkdir -p ${COMPOSER_VENDOR_DIR}\n\nCMD [ \"bash\", \"/scripts/run.sh\" ]\n"
}