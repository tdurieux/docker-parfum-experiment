{
  "startTime": 1674251555225,
  "endTime": 1674251559158,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 120,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 307,
        "lineEnd": 417,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 489,
        "lineEnd": 489,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 502,
        "lineEnd": 505,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 521,
        "lineEnd": 524,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 552,
        "lineEnd": 570,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 585,
        "lineEnd": 585,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 22,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG DEBUG 1\n\nFROM centos:7 AS builder\nENV GIT https://github.com\nENV GIT_FREEDESKTOP ${GIT}/gitlab-freedesktop-mirrors\nENV PKG_CONFIG_PATH /usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig\nENV QT 6_3_1\nENV QT_TAG v6.3.1\nENV QT_PREFIX /usr/local/desktop-app/Qt-6.3.1\nENV OPENSSL_VER 1_1_1\nENV OPENSSL_PREFIX /usr/local/desktop-app/openssl-1.1.1\nENV OPENSSL_ROOT_DIR ${OPENSSL_PREFIX}\nENV CMAKE_VER 3.21.3\nENV CMAKE_FILE cmake-$CMAKE_VER-Linux-x86_64.sh\nENV CMAKE_PREFIX_PATH ${QT_PREFIX}\nENV PATH ${QT_PREFIX}/bin:${PATH}\nENV HFLAGS_DEBUG \"-fstack-protector-all -fstack-clash-protection -fPIC\"\nENV HFLAGS \"$HFLAGS_DEBUG -D_FORTIFY_SOURCE=2\"\n\nRUN yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n\t&& yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm \\\n\t&& yum -y install centos-release-scl \\\n\t&& yum -y install git meson ninja-build autoconf automake libtool patch \\\n\t\tfontconfig-devel freetype-devel libX11-devel at-spi2-core-devel alsa-lib-devel \\\n\t\tpulseaudio-libs-devel mesa-libGL-devel mesa-libEGL-devel mesa-libgbm-devel \\\n\t\tlibdrm-devel gtk3-devel \\\n\t\tperl-XML-Parser pkgconfig bison yasm file which xorg-x11-util-macros \\\n\t\tdevtoolset-10-make devtoolset-10-gcc devtoolset-10-gcc-c++ \\\n\t\tdevtoolset-10-binutils llvm-toolset-7.0 llvm-toolset-7.0-clang-devel \\\n\t\tllvm-toolset-7.0-llvm-devel \\\n\t&& yum clean all && rm -rf /var/cache/yum\n\n# Fix a bug with argument naming in CentOS 7 glibc\nRUN sed -i 's/char \\*__block/char */' /usr/include/unistd.h\n\nSHELL [ \"bash\", \"-c\", \". /opt/rh/devtoolset-10/enable; exec bash -c \\\"$@\\\"\", \"-s\"]\n\nENV LibrariesPath /usr/src/Libraries\nWORKDIR $LibrariesPath\n\nRUN mkdir /opt/cmake \\\n\t&& curl -f -sSLo $CMAKE_FILE $GIT/Kitware/CMake/releases/download/v$CMAKE_VER/$CMAKE_FILE \\\n\t&& sh $CMAKE_FILE --prefix=/opt/cmake --skip-license \\\n\t&& ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake \\\n\t&& rm $CMAKE_FILE\n\nFROM builder AS patches\nRUN git clone $GIT/desktop-app/patches.git \\\n\t&& cd patches \\\n\t&& git checkout 4a5c759f8f \\\n\t&& rm -rf .git\n\nFROM builder AS libffi\nRUN git clone -b v3.4.2 --depth=1 $GIT/libffi/libffi.git \\\n\t&& cd libffi \\\n\t&& ./autogen.sh \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-docs \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libffi-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libffi\n\nFROM builder AS zlib\nRUN git clone -b v1.2.11 --depth=1 $GIT/madler/zlib.git \\\n\t&& cd zlib \\\n\t&& CFLAGS=\"-O3 $HFLAGS\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/zlib-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf zlib\n\nFROM builder AS xz\nRUN git clone -b v5.2.5 https://git.tukaani.org/xz.git \\\n\t&& cd xz \\\n\t&& CFLAGS=\"$HFLAGS\" cmake -GNinja -B build . -DCMAKE_BUILD_TYPE=Release \\\n\t&& cmake --build build --parallel \\\n\t&& DESTDIR=\"$LibrariesPath/xz-cache\" cmake --install build \\\n\t&& cd .. \\\n\t&& rm -rf xz\n\nFROM patches AS libproxy\nRUN git clone -b 0.4.17 --depth=1 $GIT/libproxy/libproxy.git \\\n\t&& cd libproxy \\\n\t&& git apply ../patches/libproxy.patch \\\n\t&& CFLAGS=\"$HFLAGS\" CXXFLAGS=\"$HFLAGS\" cmake -GNinja -B build . \\\n\t\t-DCMAKE_BUILD_TYPE=Release \\\n\t\t-DWITH_DBUS=OFF \\\n\t\t-DWITH_NM=OFF \\\n\t\t-DWITH_NMold=OFF \\\n\t&& cmake --build build --parallel \\\n\t&& DESTDIR=\"$LibrariesPath/libproxy-cache\" cmake --install build \\\n\t&& cd .. \\\n\t&& rm -rf libproxy\n\nFROM builder AS mozjpeg\nRUN git clone -b v4.0.3 --depth=1 $GIT/mozilla/mozjpeg.git \\\n\t&& cd mozjpeg \\\n\t&& CFLAGS=\"$HFLAGS\" cmake -GNinja -B build . \\\n\t\t-DCMAKE_BUILD_TYPE=Release \\\n\t\t-DCMAKE_INSTALL_PREFIX=/usr/local \\\n\t\t-DWITH_JPEG8=ON \\\n\t\t-DPNG_SUPPORTED=OFF \\\n\t&& cmake --build build --parallel \\\n\t&& DESTDIR=\"$LibrariesPath/mozjpeg-cache\" cmake --install build \\\n\t&& cd .. \\\n\t&& rm -rf mozjpeg\n\nFROM builder AS opus\nRUN git clone -b v1.3.1 --depth=1 $GIT/xiph/opus.git \\\n\t&& cd opus \\\n\t&& ./autogen.sh \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/opus-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf opus\n\nFROM builder AS libvpx\nRUN git clone -b v1.11.0 --depth=1 $GIT/webmproject/libvpx.git \\\n\t&& cd libvpx \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t--disable-examples \\\n\t\t--disable-unit-tests \\\n\t\t--disable-tools \\\n\t\t--disable-docs \\\n\t\t--enable-vp8 \\\n\t\t--enable-vp9 \\\n\t\t--enable-webm-io \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libvpx-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libvpx\n\nFROM builder AS rnnoise\nRUN git clone -b master --depth=1 $GIT/desktop-app/rnnoise \\\n\t&& cd rnnoise \\\n\t&& CFLAGS=\"$HFLAGS\" cmake -GNinja -B build . -DCMAKE_BUILD_TYPE=Release \\\n\t&& cmake --build build --parallel \\\n\t&& mkdir -p \"$LibrariesPath/rnnoise-cache/usr/local/include\" \\\n\t&& cp \"include/rnnoise.h\" \"$LibrariesPath/rnnoise-cache/usr/local/include/\" \\\n\t&& mkdir -p \"$LibrariesPath/rnnoise-cache/usr/local/lib\" \\\n\t&& cp \"build/librnnoise.a\" \"$LibrariesPath/rnnoise-cache/usr/local/lib/\" \\\n\t&& cd .. \\\n\t&& rm -rf rnnoise\n\nFROM builder AS xcb-proto\nRUN git clone -b xcb-proto-1.14.1 --depth=1 $GIT_FREEDESKTOP/xcbproto.git \\\n\t&& cd xcbproto \\\n\t&& ./autogen.sh \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/xcb-proto-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf xcbproto\n\nFROM builder AS xcb\nCOPY --from=xcb-proto ${LibrariesPath}/xcb-proto-cache /\n\nRUN git clone -b libxcb-1.14 --depth=1 $GIT_FREEDESKTOP/libxcb.git \\\n\t&& cd libxcb \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/xcb-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxcb\n\nFROM builder AS xcb-wm\nRUN git clone -b 0.4.1 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-wm.git \\\n\t&& cd libxcb-wm \\\n\t&& ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/xcb-wm-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxcb-wm\n\nFROM builder AS xcb-util\nRUN git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-util.git \\\n\t&& cd libxcb-util \\\n\t&& ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/xcb-util-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxcb-util\n\nFROM builder AS xcb-image\nCOPY --from=xcb-util ${LibrariesPath}/xcb-util-cache /\n\nRUN git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-image.git \\\n\t&& cd libxcb-image \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/xcb-image-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxcb-image\n\nFROM builder AS xcb-keysyms\nRUN git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-keysyms.git \\\n\t&& cd libxcb-keysyms \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/xcb-keysyms-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxcb-keysyms\n\nFROM builder AS xcb-render-util\nRUN git clone -b 0.3.9 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-render-util.git \\\n\t&& cd libxcb-render-util \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/xcb-render-util-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxcb-render-util\n\nFROM builder AS libXext\nRUN git clone -b libXext-1.3.4 --depth=1 $GIT_FREEDESKTOP/libxext.git \\\n\t&& cd libxext \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libXext-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxext\n\nFROM builder AS libXtst\nRUN git clone -b libXtst-1.2.3 --depth=1 $GIT_FREEDESKTOP/libxtst.git \\\n\t&& cd libxtst \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libXtst-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxtst\n\nFROM builder AS libXfixes\nRUN git clone -b libXfixes-5.0.3 --depth=1 $GIT_FREEDESKTOP/libxfixes.git \\\n\t&& cd libxfixes \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libXfixes-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxfixes\n\nFROM builder AS libXrandr\nRUN git clone -b libXrandr-1.5.2 --depth=1 $GIT_FREEDESKTOP/libxrandr.git \\\n\t&& cd libxrandr \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libXrandr-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxrandr\n\nFROM builder AS libXrender\nRUN git clone -b libXrender-0.9.10 --depth=1 $GIT_FREEDESKTOP/libxrender.git \\\n\t&& cd libxrender \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libXrender-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxrender\n\nFROM builder AS libXdamage\nRUN git clone -b libXdamage-1.1.5 --depth=1 $GIT_FREEDESKTOP/libxdamage.git \\\n\t&& cd libxdamage \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libXdamage-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxdamage\n\nFROM builder AS libXcomposite\nRUN git clone -b libXcomposite-0.4.5 --depth=1 $GIT_FREEDESKTOP/libxcomposite.git \\\n\t&& cd libxcomposite \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libXcomposite-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libxcomposite\n\nFROM builder AS wayland\nCOPY --from=libffi ${LibrariesPath}/libffi-cache /\n\nRUN git clone -b 1.20.0 --depth=1 $GIT_FREEDESKTOP/wayland.git \\\n\t&& cd wayland \\\n\t&& meson build \\\n\t\t--buildtype=release \\\n\t\t--default-library=both \\\n\t\t-Dtests=false \\\n\t\t-Ddocumentation=false \\\n\t\t-Ddtd_validation=false \\\n\t\t-Dicon_directory=/usr/share/icons \\\n\t&& meson compile -C build \\\n\t&& DESTDIR=\"$LibrariesPath/wayland-cache\" meson install -C build \\\n\t&& cd .. \\\n\t&& rm -rf wayland\n\nFROM builder AS nv-codec-headers\nRUN git clone -b n11.1.5.1 --depth=1 https://github.com/FFmpeg/nv-codec-headers.git \\\n\t&& DESTDIR=\"$LibrariesPath/nv-codec-headers-cache\" make -C nv-codec-headers install \\\n\t&& rm -rf nv-codec-headers\n\nFROM builder AS ffmpeg\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nCOPY --from=libvpx ${LibrariesPath}/libvpx-cache /\nCOPY --from=nv-codec-headers ${LibrariesPath}/nv-codec-headers-cache /\n\nRUN git init ffmpeg \\\n\t&& cd ffmpeg \\\n\t&& git remote add origin $GIT/FFmpeg/FFmpeg.git \\\n\t&& git fetch --depth=1 origin cc33e73618a981de7fd96385ecb34719de031f16 \\\n\t&& git reset --hard FETCH_HEAD \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t--extra-cflags=\"-DCONFIG_SAFE_BITSTREAM_READER=1 $HFLAGS\" \\\n\t\t--extra-cxxflags=\"-DCONFIG_SAFE_BITSTREAM_READER=1 $HFLAGS\" \\\n\t\t--disable-debug \\\n\t\t--disable-programs \\\n\t\t--disable-doc \\\n\t\t--disable-network \\\n\t\t--disable-autodetect \\\n\t\t--disable-everything \\\n\t\t--enable-libopus \\\n\t\t--enable-libvpx \\\n\t\t--enable-ffnvcodec \\\n\t\t--enable-nvdec \\\n\t\t--enable-cuvid \\\n\t\t--enable-protocol=file \\\n\t\t--enable-hwaccel=av1_nvdec \\\n\t\t--enable-hwaccel=h264_nvdec \\\n\t\t--enable-hwaccel=hevc_nvdec \\\n\t\t--enable-hwaccel=mpeg2_nvdec \\\n\t\t--enable-hwaccel=mpeg4_nvdec \\\n\t\t--enable-hwaccel=vp8_nvdec \\\n\t\t--enable-decoder=aac \\\n\t\t--enable-decoder=aac_fixed \\\n\t\t--enable-decoder=aac_latm \\\n\t\t--enable-decoder=aasc \\\n\t\t--enable-decoder=ac3 \\\n\t\t--enable-decoder=alac \\\n\t\t--enable-decoder=av1 \\\n\t\t--enable-decoder=av1_cuvid \\\n\t\t--enable-decoder=eac3 \\\n\t\t--enable-decoder=flac \\\n\t\t--enable-decoder=gif \\\n\t\t--enable-decoder=h264 \\\n\t\t--enable-decoder=hevc \\\n\t\t--enable-decoder=libvpx_vp8 \\\n\t\t--enable-decoder=libvpx_vp9 \\\n\t\t--enable-decoder=mp1 \\\n\t\t--enable-decoder=mp1float \\\n\t\t--enable-decoder=mp2 \\\n\t\t--enable-decoder=mp2float \\\n\t\t--enable-decoder=mp3 \\\n\t\t--enable-decoder=mp3adu \\\n\t\t--enable-decoder=mp3adufloat \\\n\t\t--enable-decoder=mp3float \\\n\t\t--enable-decoder=mp3on4 \\\n\t\t--enable-decoder=mp3on4float \\\n\t\t--enable-decoder=mpeg4 \\\n\t\t--enable-decoder=msmpeg4v2 \\\n\t\t--enable-decoder=msmpeg4v3 \\\n\t\t--enable-decoder=opus \\\n\t\t--enable-decoder=pcm_alaw \\\n\t\t--enable-decoder=pcm_f32be \\\n\t\t--enable-decoder=pcm_f32le \\\n\t\t--enable-decoder=pcm_f64be \\\n\t\t--enable-decoder=pcm_f64le \\\n\t\t--enable-decoder=pcm_lxf \\\n\t\t--enable-decoder=pcm_mulaw \\\n\t\t--enable-decoder=pcm_s16be \\\n\t\t--enable-decoder=pcm_s16be_planar \\\n\t\t--enable-decoder=pcm_s16le \\\n\t\t--enable-decoder=pcm_s16le_planar \\\n\t\t--enable-decoder=pcm_s24be \\\n\t\t--enable-decoder=pcm_s24daud \\\n\t\t--enable-decoder=pcm_s24le \\\n\t\t--enable-decoder=pcm_s24le_planar \\\n\t\t--enable-decoder=pcm_s32be \\\n\t\t--enable-decoder=pcm_s32le \\\n\t\t--enable-decoder=pcm_s32le_planar \\\n\t\t--enable-decoder=pcm_s64be \\\n\t\t--enable-decoder=pcm_s64le \\\n\t\t--enable-decoder=pcm_s8 \\\n\t\t--enable-decoder=pcm_s8_planar \\\n\t\t--enable-decoder=pcm_u16be \\\n\t\t--enable-decoder=pcm_u16le \\\n\t\t--enable-decoder=pcm_u24be \\\n\t\t--enable-decoder=pcm_u24le \\\n\t\t--enable-decoder=pcm_u32be \\\n\t\t--enable-decoder=pcm_u32le \\\n\t\t--enable-decoder=pcm_u8 \\\n\t\t--enable-decoder=pcm_zork \\\n\t\t--enable-decoder=vorbis \\\n\t\t--enable-decoder=vp8 \\\n\t\t--enable-decoder=wavpack \\\n\t\t--enable-decoder=wmalossless \\\n\t\t--enable-decoder=wmapro \\\n\t\t--enable-decoder=wmav1 \\\n\t\t--enable-decoder=wmav2 \\\n\t\t--enable-decoder=wmavoice \\\n\t\t--enable-encoder=libopus \\\n\t\t--enable-parser=aac \\\n\t\t--enable-parser=aac_latm \\\n\t\t--enable-parser=flac \\\n\t\t--enable-parser=h264 \\\n\t\t--enable-parser=hevc \\\n\t\t--enable-parser=mpeg4video \\\n\t\t--enable-parser=mpegaudio \\\n\t\t--enable-parser=opus \\\n\t\t--enable-parser=vorbis \\\n\t\t--enable-demuxer=aac \\\n\t\t--enable-demuxer=flac \\\n\t\t--enable-demuxer=gif \\\n\t\t--enable-demuxer=h264 \\\n\t\t--enable-demuxer=hevc \\\n\t\t--enable-demuxer=matroska \\\n\t\t--enable-demuxer=m4v \\\n\t\t--enable-demuxer=mov \\\n\t\t--enable-demuxer=mp3 \\\n\t\t--enable-demuxer=ogg \\\n\t\t--enable-demuxer=wav \\\n\t\t--enable-muxer=ogg \\\n\t\t--enable-muxer=opus \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/ffmpeg-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf ffmpeg\n\nFROM builder AS pipewire\nRUN git clone -b 0.3.33 --depth=1 $GIT/PipeWire/pipewire.git \\\n\t&& cd pipewire \\\n\t&& meson build \\\n\t\t--buildtype=release \\\n\t\t-Dtests=disabled \\\n\t\t-Dexamples=disabled \\\n\t\t-Dspa-plugins=disabled \\\n\t&& meson compile -C build \\\n\t&& DESTDIR=\"$LibrariesPath/pipewire-cache\" meson install -C build \\\n\t&& cd .. \\\n\t&& rm -rf pipewire\n\nFROM builder AS openal\nCOPY --from=pipewire ${LibrariesPath}/pipewire-cache /\n\nRUN git clone -b 1.22.1 --depth=1 $GIT/kcat/openal-soft.git \\\n\t&& cd openal-soft \\\n\t&& CFLAGS=\"$HFLAGS\" CXXFLAGS=\"$HFLAGS\" cmake -GNinja -B build . \\\n\t\t-DCMAKE_BUILD_TYPE=Release \\\n\t\t-DLIBTYPE:STRING=STATIC \\\n\t\t-DALSOFT_EXAMPLES=OFF \\\n\t\t-DALSOFT_UTILS=OFF \\\n\t\t-DALSOFT_INSTALL_CONFIG=OFF \\\n\t&& cmake --build build --parallel \\\n\t&& DESTDIR=\"$LibrariesPath/openal-cache\" cmake --install build \\\n\t&& cd .. \\\n\t&& rm -rf openal-soft\n\nFROM builder AS openssl\nENV opensslDir openssl_${OPENSSL_VER}\nRUN git clone -b OpenSSL_${OPENSSL_VER}-stable --depth=1 $GIT/openssl/openssl.git $opensslDir \\\n\t&& cd $opensslDir \\\n\t&& ./config \\\n\t\t--prefix=\"$OPENSSL_PREFIX\" \\\n\t\t--openssldir=/etc/ssl \\\n\t\tno-tests \\\n\t\tno-dso \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/openssl-cache\" install_sw \\\n\t&& cd .. \\\n\t&& rm -rf $opensslDir\n\nFROM builder AS xkbcommon\nCOPY --from=xcb ${LibrariesPath}/xcb-cache /\n\nRUN git clone -b xkbcommon-1.3.1 --depth=1 $GIT/xkbcommon/libxkbcommon.git \\\n\t&& cd libxkbcommon \\\n\t&& meson build \\\n\t\t--buildtype=release \\\n\t\t--default-library=both \\\n\t\t-Denable-docs=false \\\n\t\t-Denable-wayland=false \\\n\t\t-Denable-xkbregistry=false \\\n\t\t-Dxkb-config-root=/usr/share/X11/xkb \\\n\t\t-Dxkb-config-extra-path=/etc/xkb \\\n\t\t-Dx-locale-root=/usr/share/X11/locale \\\n\t&& meson compile -C build \\\n\t&& DESTDIR=\"$LibrariesPath/xkbcommon-cache\" meson install -C build \\\n\t&& cd .. \\\n\t&& rm -rf libxkbcommon\n\nFROM builder AS mm-common\nRUN git clone -b 1.0.3 --depth=1 $GIT/GNOME/mm-common.git \\\n\t&& cd mm-common \\\n\t&& NOCONFIGURE=1 ./autogen.sh \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-network \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/mm-common-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf mm-common\n\nFROM builder AS libsigcplusplus\nCOPY --from=mm-common ${LibrariesPath}/mm-common-cache /\n\nRUN git clone -b 2.10.7 --depth=1 $GIT/libsigcplusplus/libsigcplusplus.git \\\n\t&& cd libsigcplusplus \\\n\t&& export ACLOCAL_PATH=\"/usr/local/share/aclocal\" \\\n\t&& NOCONFIGURE=1 ./autogen.sh \\\n\t&& CFLAGS=\"-g -O2 $HFLAGS\" CXXFLAGS=\"-g -O2 $HFLAGS\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t--enable-maintainer-mode \\\n\t\t--enable-static \\\n\t\t--disable-documentation \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/libsigcplusplus-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf libsigcplusplus\n\nFROM patches AS glibmm\nCOPY --from=mm-common ${LibrariesPath}/mm-common-cache /\nCOPY --from=libsigcplusplus ${LibrariesPath}/libsigcplusplus-cache /\n\n# equals to glib version of Ubuntu 14.04\nRUN git clone -b 2.40.0 --depth=1 $GIT/GNOME/glibmm.git \\\n\t&& cd glibmm \\\n\t&& git apply ../patches/glibmm.patch \\\n\t&& export ACLOCAL_PATH=\"/usr/local/share/aclocal\" \\\n\t&& NOCONFIGURE=1 ./autogen.sh \\\n\t&& CC=\"gcc -flto $HFLAGS\" CXX=\"g++ -flto $HFLAGS\" AR=gcc-ar RANLIB=gcc-ranlib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t--enable-maintainer-mode \\\n\t\t--enable-static \\\n\t\t--disable-documentation \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"$LibrariesPath/glibmm-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf glibmm\n\nFROM patches AS qt\nCOPY --from=libffi ${LibrariesPath}/libffi-cache /\nCOPY --from=zlib ${LibrariesPath}/zlib-cache /\nCOPY --from=libproxy ${LibrariesPath}/libproxy-cache /\nCOPY --from=mozjpeg ${LibrariesPath}/mozjpeg-cache /\nCOPY --from=xcb ${LibrariesPath}/xcb-cache /\nCOPY --from=xcb-wm ${LibrariesPath}/xcb-wm-cache /\nCOPY --from=xcb-util ${LibrariesPath}/xcb-util-cache /\nCOPY --from=xcb-image ${LibrariesPath}/xcb-image-cache /\nCOPY --from=xcb-keysyms ${LibrariesPath}/xcb-keysyms-cache /\nCOPY --from=xcb-render-util ${LibrariesPath}/xcb-render-util-cache /\nCOPY --from=wayland ${LibrariesPath}/wayland-cache /\nCOPY --from=openssl ${LibrariesPath}/openssl-cache /\nCOPY --from=xkbcommon ${LibrariesPath}/xkbcommon-cache /\n\nARG DEBUG\nRUN git clone -b ${QT_TAG} --depth=1 git://code.qt.io/qt/qt5.git qt_${QT} \\\n\t&& cd qt_${QT} \\\n\t&& git submodule update --init --recursive --depth=1 qtbase qtwayland qtimageformats qtsvg qt5compat \\\n\t&& cd qtbase \\\n\t&& find ../../patches/qtbase_${QT} -type f -print0 | sort -z | xargs -r0 git apply \\\n\t&& cd .. \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -prefix \"$QT_PREFIX\" \\\n\t\t-release \\\n\t\t${DEBUG:+-force-debug-info} \\\n\t\t-opensource \\\n\t\t-confirm-license \\\n\t\t-libproxy \\\n\t\t-qt-libpng \\\n\t\t-qt-harfbuzz \\\n\t\t-qt-pcre \\\n\t\t-no-icu \\\n\t\t-no-feature-xcb-sm \\\n\t\t-no-feature-egl-extension-platform-wayland \\\n\t\t-no-feature-wayland-server \\\n\t\t-no-feature-highdpiscaling \\\n\t\t-static \\\n\t\t-dbus-runtime \\\n\t\t-openssl-linked \\\n\t\t-nomake examples \\\n\t\t-nomake tests \\\n\t&& cmake --build . --parallel \\\n\t&& DESTDIR=\"$LibrariesPath/qt-cache\" cmake --install . \\\n\t&& cd .. \\\n\t&& rm -rf qt_${QT}\n\nFROM patches AS breakpad\nRUN git clone https://github.com/google/breakpad.git \\\n\t&& cd breakpad \\\n\t&& git checkout dfcb7b6799 \\\n\t&& git apply ../patches/breakpad.diff \\\n\t&& git clone https://chromium.googlesource.com/linux-syscall-support.git src/third_party/lss \\\n\t&& cd src/third_party/lss \\\n\t&& git checkout e1e7b0ad8e \\\n\t&& cd ../../.. \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& make -j$(nproc) \\\n\t&& make DESTDIR=\"${LibrariesPath}/breakpad-cache\" install \\\n\t&& cd .. \\\n\t&& rm -rf breakpad\n\nFROM builder AS webrtc\nCOPY --from=mozjpeg ${LibrariesPath}/mozjpeg-cache /\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nCOPY --from=libvpx ${LibrariesPath}/libvpx-cache /\nCOPY --from=ffmpeg ${LibrariesPath}/ffmpeg-cache /\nCOPY --from=openssl ${LibrariesPath}/openssl-cache /\nCOPY --from=libXtst ${LibrariesPath}/libXtst-cache /\nCOPY --from=pipewire ${LibrariesPath}/pipewire-cache /\n\n# Shallow clone on a specific commit.\nRUN git init tg_owt \\\n\t&& cd tg_owt \\\n\t&& git remote add origin $GIT/desktop-app/tg_owt.git \\\n\t&& git fetch --depth=1 origin 442d5bb593c0ae314960308d78f2016ad1f80c3e \\\n\t&& git reset --hard FETCH_HEAD \\\n\t&& git submodule update --init --recursive --depth=1 \\\n\t&& rm -rf .git \\\n\t&& cmake -G\"Ninja Multi-Config\" -B out . \\\n\t\t-DCMAKE_C_FLAGS_RELEASE=\"-O3 -DNDEBUG $HFLAGS\" \\\n\t\t-DCMAKE_C_FLAGS_DEBUG=\"-g $HFLAGS_DEBUG\" \\\n\t\t-DCMAKE_CXX_FLAGS_RELEASE=\"-O3 -DNDEBUG $HFLAGS\" \\\n\t\t-DCMAKE_CXX_FLAGS_DEBUG=\"-g $HFLAGS_DEBUG\" \\\n\t\t-DTG_OWT_SPECIAL_TARGET=linux \\\n\t\t-DTG_OWT_LIBJPEG_INCLUDE_PATH=/usr/local/include \\\n\t\t-DTG_OWT_OPENSSL_INCLUDE_PATH=$OPENSSL_PREFIX/include \\\n\t\t-DTG_OWT_OPUS_INCLUDE_PATH=/usr/local/include/opus \\\n\t\t-DTG_OWT_LIBVPX_INCLUDE_PATH=/usr/local/include \\\n\t\t-DTG_OWT_FFMPEG_INCLUDE_PATH=/usr/local/include\n\nWORKDIR tg_owt\n\nFROM webrtc AS webrtc_release\nRUN cmake --build out --config Release --parallel \\\n\t&& find out -mindepth 1 -maxdepth 1 ! -name Release -exec rm -rf {} \\;\n\nFROM webrtc AS webrtc_debug\nARG DEBUG\nRUN [ -z \"$DEBUG\" ] || (cmake --build out --config Debug --parallel \\\n\t&& find out -mindepth 1 -maxdepth 1 ! -name Debug -exec rm -rf {} \\;)\nRUN [ -n \"$DEBUG\" ] || mkdir -p out/Debug\n\nFROM builder\nCOPY --from=libffi ${LibrariesPath}/libffi-cache /\nCOPY --from=zlib ${LibrariesPath}/zlib-cache /\nCOPY --from=xz ${LibrariesPath}/xz-cache /\nCOPY --from=libproxy ${LibrariesPath}/libproxy-cache /\nCOPY --from=mozjpeg ${LibrariesPath}/mozjpeg-cache /\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nCOPY --from=libvpx ${LibrariesPath}/libvpx-cache /\nCOPY --from=rnnoise ${LibrariesPath}/rnnoise-cache /\nCOPY --from=xcb ${LibrariesPath}/xcb-cache /\nCOPY --from=xcb-wm ${LibrariesPath}/xcb-wm-cache /\nCOPY --from=xcb-util ${LibrariesPath}/xcb-util-cache /\nCOPY --from=xcb-image ${LibrariesPath}/xcb-image-cache /\nCOPY --from=xcb-keysyms ${LibrariesPath}/xcb-keysyms-cache /\nCOPY --from=xcb-render-util ${LibrariesPath}/xcb-render-util-cache /\nCOPY --from=libXext ${LibrariesPath}/libXext-cache /\nCOPY --from=libXfixes ${LibrariesPath}/libXfixes-cache /\nCOPY --from=libXtst ${LibrariesPath}/libXtst-cache /\nCOPY --from=libXrandr ${LibrariesPath}/libXrandr-cache /\nCOPY --from=libXrender ${LibrariesPath}/libXrender-cache /\nCOPY --from=libXdamage ${LibrariesPath}/libXdamage-cache /\nCOPY --from=libXcomposite ${LibrariesPath}/libXcomposite-cache /\nCOPY --from=wayland ${LibrariesPath}/wayland-cache /\nCOPY --from=ffmpeg ${LibrariesPath}/ffmpeg-cache /\nCOPY --from=openal ${LibrariesPath}/openal-cache /\nCOPY --from=openssl ${LibrariesPath}/openssl-cache /\nCOPY --from=xkbcommon ${LibrariesPath}/xkbcommon-cache /\nCOPY --from=libsigcplusplus ${LibrariesPath}/libsigcplusplus-cache /\nCOPY --from=glibmm ${LibrariesPath}/glibmm-cache /\nCOPY --from=qt ${LibrariesPath}/qt-cache /\nCOPY --from=breakpad ${LibrariesPath}/breakpad-cache /\nCOPY --from=webrtc ${LibrariesPath}/tg_owt tg_owt\nCOPY --from=webrtc_release ${LibrariesPath}/tg_owt/out/Release tg_owt/out/Release\nCOPY --from=webrtc_debug ${LibrariesPath}/tg_owt/out/Debug tg_owt/out/Debug\n\nWORKDIR ../tdesktop\nVOLUME [ \"/usr/src/tdesktop\" ]\nCMD [ \"/usr/src/tdesktop/Telegram/build/docker/centos_env/build.sh\" ]\n"
}