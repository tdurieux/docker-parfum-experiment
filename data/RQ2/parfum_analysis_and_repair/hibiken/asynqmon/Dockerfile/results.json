{
  "startTime": 1674246581124,
  "endTime": 1674246582506,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# First stage:\n# Building a frontend.\n#\n\nFROM alpine:3.13 AS frontend\n\n# Move to a working directory (/static).\nWORKDIR /static\n\n# Install npm (with latest nodejs) and yarn (globally, in silent mode).\nRUN apk add --no-cache npm && \\\n    npm i -g -s --unsafe-perm yarn && npm cache clean --force;\n\n# Copy only ./ui folder to the working directory.\nCOPY ui .\n\n# Run yarn scripts (install & build).\nRUN yarn install && yarn build && yarn cache clean;\n\n#\n# Second stage:\n# Building a backend.\n#\n\nFROM golang:1.16-alpine AS backend\n\n# Move to a working directory (/build).\nWORKDIR /build\n\n# Copy and download dependencies.\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Copy a source code to the container.\nCOPY . .\n\n# Copy frontend static files from /static to the root folder of the backend container.\nCOPY --from=frontend [\"/static/build\", \"ui/build\"]\n\n# Set necessary environmet variables needed for the image and build the server.\nENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64\n\n# Run go build (with ldflags to reduce binary size).\nRUN go build -ldflags=\"-s -w\" -o asynqmon ./cmd/asynqmon\n\n#\n# Third stage:\n# Creating and running a new scratch container with the backend binary.\n#\n\nFROM scratch\n\n# Copy binary from /build to the root folder of the scratch container.\nCOPY --from=backend [\"/build/asynqmon\", \"/\"]\n\n# Command to run when starting the container.\nENTRYPOINT [\"/asynqmon\"]\n"
}