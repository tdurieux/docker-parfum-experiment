{
  "startTime": 1674251958559,
  "endTime": 1674251959277,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 167
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# How to build and run this Dockerfile:\n#\n# ```\n# RUST_FIL_PROOFS=`pwd` # path to `rust-fil-proofs`\n# docker --log-level debug build --progress tty --file Dockerfile-profile --tag rust-cpu-profile .\n# docker run -it -v $RUST_FIL_PROOFS:/code/ rust-cpu-profile\n# ```\n\nFROM rust\n\n# Get all the dependencies\n# ------------------------\n\n# Copied from: github.com/filecoin-project/rust-fil-proofs/blob/master/Dockerfile-ci\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y curl file gcc g++ git make openssh-client \\\n    autoconf automake cmake libtool libcurl4-openssl-dev libssl-dev \\\n    libelf-dev libdw-dev binutils-dev zlib1g-dev libiberty-dev wget \\\n    xz-utils pkg-config python clang && rm -rf /var/lib/apt/lists/*;\n\n# `gperftools` and dependencies (`libunwind`)\n# -------------------------------------------\n\nENV GPERFTOOLS_VERSION=\"2.7\"\nENV LIBUNWIND_VERSION=\"0.99-beta\"\n\nENV HOME=\"/root\"\nENV DOWNLOADS=${HOME}/downloads\nRUN mkdir -p ${DOWNLOADS}\nRUN echo ${DOWNLOADS}\nWORKDIR ${DOWNLOADS}\n\nRUN wget https://download.savannah.gnu.org/releases/libunwind/libunwind-${LIBUNWIND_VERSION}.tar.gz --output-document ${DOWNLOADS}/libunwind-${LIBUNWIND_VERSION}.tar.gz\nRUN tar -xvf ${DOWNLOADS}/libunwind-${LIBUNWIND_VERSION}.tar.gz && rm ${DOWNLOADS}/libunwind-${LIBUNWIND_VERSION}.tar.gz\nWORKDIR ${DOWNLOADS}/libunwind-${LIBUNWIND_VERSION}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make\nRUN make install\nWORKDIR ${DOWNLOADS}\n\nRUN wget https://github.com/gperftools/gperftools/releases/download/gperftools-${GPERFTOOLS_VERSION}/gperftools-${GPERFTOOLS_VERSION}.tar.gz  --output-document ${DOWNLOADS}/gperftools-${GPERFTOOLS_VERSION}.tar.gz\nRUN tar -xvf ${DOWNLOADS}/gperftools-${GPERFTOOLS_VERSION}.tar.gz && rm ${DOWNLOADS}/gperftools-${GPERFTOOLS_VERSION}.tar.gz\nWORKDIR ${DOWNLOADS}/gperftools-${GPERFTOOLS_VERSION}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make install\nWORKDIR ${DOWNLOADS}\n\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib\n# FIXME: `gperftools` installs the library (`make install`) in\n# `/usr/local/lib` by default but Debian/Ubuntu don't look there\n# now, the correct `--prefix` should be added to the command.\n\n# Install latest toolchain used by `rust-fil-proofs`\n# --------------------------------------------------\n\nRUN rustup default nightly-2019-07-15\n# FIXME: The lastest version used should be dynamically obtained form the `rust-fil-proofs` repo\n# and not hard-coded here.\n\n# Ready to run\n# ------------\n\nWORKDIR /code\n\nCMD                                                                           \\\ncargo update                                                                  \\\n&&                                                                            \\\ncargo build                                                                   \\\n  -p filecoin-proofs                                                          \\\n  --release                                                                   \\\n  --example stacked                                                            \\\n  --features                                                                  \\\n    cpu-profile                                                               \\\n  -Z package-features                                                         \\\n&&                                                                            \\\nRUST_BACKTRACE=full                                                           \\\nRUST_LOG=trace                                                                \\\ntarget/release/examples/stacked                                                \\\n  --size 1024                                                                 \\\n&&                                                                            \\\npprof target/release/examples/stacked replicate.profile || bash\n"
}