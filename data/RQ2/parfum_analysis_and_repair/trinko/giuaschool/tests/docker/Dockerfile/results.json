{
  "startTime": 1674218646401,
  "endTime": 1674218648270,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 2,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 59
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 65,
        "columnEnd": 132
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "########## First Step - Build system\nFROM debian:11.2 as system_builder\n\n### System and build environments\nARG DEBIAN_FRONTEND=noninteractive\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n\n### Install system\nRUN \\\n# Source repositories\n  echo \"deb http://deb.debian.org/debian bullseye main contrib non-free\" > /etc/apt/sources.list && \\\n  echo \"deb http://deb.debian.org/debian bullseye-updates main contrib non-free\" >> /etc/apt/sources.list && \\\n  echo \"deb http://security.debian.org/debian-security bullseye-security main contrib non-free\" >> /etc/apt/sources.list && \\\n# Init APT\n  apt-get -qq update && \\\n  apt-get -yqq --no-install-recommends --no-install-suggests install apt-utils && \\\n# Set locale\n  apt-get -yqq --no-install-recommends --no-install-suggests install locales && \\\n  sed -i -e \"s/# it_IT.UTF-8/it_IT.UTF-8/\" /etc/locale.gen && \\\n  echo \"LANGUAGE=it_IT.UTF-8\" > /etc/default/locale && \\\n  echo \"LANG=it_IT.UTF-8\" >> /etc/default/locale && \\\n  echo \"LC_ALL=it_IT.UTF-8\" >> /etc/default/locale && \\\n  dpkg-reconfigure --frontend=noninteractive locales && \\\n  update-locale LANG=it_IT.UTF-8 && \\\n  ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime && \\\n# Install dev tools\n  apt-get -yqq --no-install-recommends --no-install-suggests install \\\n  curl wget ca-certificates debconf-utils lsb-release zip unzip git \\\n# Install Apache and MariaDB\n  apache2=2.4.* \\\n  mariadb-common=1:10.5.* mariadb-server=1:10.5.* mariadb-client=1:10.5.* \\\n# Install PHP 7.4\n  php php-curl php-gd php-intl php-mbstring php-mysql php-xml php-zip \\\n# Install external dependencies: libreoffice, unoconv and PDF utils\n  libreoffice-nogui unoconv poppler-utils && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* && \\\n# Install Composer\n  php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" && \\\n  HASH=\"$(wget -q -O - https://composer.github.io/installer.sig)\" && \\\n  php -r \"if (hash_file('SHA384', 'composer-setup.php') === '$HASH') { echo 'Composer installer verified'; } else { echo 'Composer installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" && \\\n  php composer-setup.php --install-dir=/usr/local/bin --filename=composer && \\\n  rm composer-setup.php && \\\n# Configure Apache/PHP\n  a2enmod rewrite && \\\n  a2enmod ssl && \\\n  sed -r -i -e 's/^;date\\.timezone *=.*$/date.timezone = Europe\\/Rome/' /etc/php/7.4/apache2/php.ini && \\\n  sed -r -i -e 's/;opcache.enable=1.*$/opcache.enable=1/' /etc/php/7.4/apache2/php.ini && \\\n  sed -r -i -e 's/^;date\\.timezone *=.*$/date.timezone = Europe\\/Rome/' /etc/php/7.4/cli/php.ini && \\\n  rm -f /etc/apache2/sites-available/default-ssl.conf\nCOPY ./tests/docker/apache2-certificate.crt /etc/ssl/cert/apache2-certificate.crt\nCOPY ./tests/docker/apache2-certificate.key /etc/ssl/private/apache2-certificate.key\nCOPY ./tests/docker/apache2-site.conf /etc/apache2/sites-available/000-default.conf\nCOPY ./tests/docker/apache2-mpm.conf /etc/apache2/mods-available/mpm_prefork.conf\n\n\n########## Second Step - Build Symfony framework\nFROM system_builder as symfony_builder\n\n### Install Symfony\nWORKDIR /var/www/giuaschool\nCOPY --chown=www-data:www-data composer.* symfony.lock ./\nRUN \\\n  composer -q install --no-dev --no-progress --prefer-dist --optimize-autoloader --no-plugins --no-scripts && \\\n  composer -q clear-cache --no-plugins\n\n\n########## Third Step - Build Application for PROD environment\nFROM symfony_builder as application_prod\n\n### Configure application\nWORKDIR /var/www/giuaschool\nCOPY --chown=www-data:www-data . .\nRUN \\\n\n  chmod 755 tests/docker/*.sh && \\\n# set PROD environment\n  sed -r -i -e \"s/^APP_ENV\\s*=.*$/APP_ENV=prod/\" .env && \\\n# create database\n  service mariadb start && mysqladmin -u root password 'root' && \\\n  php bin/console doctrine:database:create -n -q && \\\n  php bin/console doctrine:schema:update -f -q && \\\n# init database\n  mysql -uroot -proot --default-character-set=utf8 giuaschool < src/Install/init-db.sql && \\\n  php bin/console security:encode-password -n admin App\\\\Entity\\\\Amministratore 2> /dev/null | grep \"Encoded password\" | sed -r -e \"s/^\\s*Encoded password\\s+(\\S+)\\s*$/UPDATE gs_utente SET password='\\1' where username='admin';/\" > admin-pswd && \\\n  mysql -uroot -proot giuaschool < admin-pswd && \\\n  rm -f admin-pswd && \\\n# install SPID library\n  mkdir vendor/italia && \\\n  cd vendor/italia && \\\n  tar -zxf ../../tests/docker/spid-php.tgz && \\\n  cd spid-php && \\\n  composer -q install --no-dev --no-progress --prefer-dist --no-plugins --no-scripts && \\\n  composer -q clear-cache --no-plugins && \\\n  cd vendor/simplesamlphp/simplesamlphp/modules && \\\n  tar -zxf ../../../../../../../tests/docker/spid-theme.tgz && \\\n  cd .. && \\\n  mkdir log cert && \\\n  cp ../../.gitkeep log/ && \\\n  cp ../../.gitkeep cert/ && \\\n  cd /var/www/giuaschool && \\\n# adjust file permissions\n  chown -R www-data:www-data . && rm ../../tests/docker/spid-php.tgz\n\n### Configure services\nEXPOSE 443\nCMD tests/docker/entrypoint.sh\n\n\n########## Fourth Step - Build Application for DEV environment\nFROM application_prod as application_dev\n\n### Build environment\nARG DEBIAN_FRONTEND=noninteractive\n\n### Configure application\nWORKDIR /var/www/giuaschool\nRUN \\\n# Set DEV environment\n  sed -r -i -e \"s/^APP_ENV\\s*=.*$/APP_ENV=dev/\" .env && \\\n  composer -q install --no-progress --prefer-dist --no-suggest --optimize-autoloader --no-plugins --no-scripts && \\\n  composer clear-cache && \\\n  chown -R www-data:www-data .\n\n\n########## Fifth Step - Build Application for TEST environment\nFROM application_dev as application_test\n\n### Build environment\nARG DEBIAN_FRONTEND=noninteractive\n\n### Configure application\nWORKDIR /var/www/giuaschool\nRUN \\\n\n  wget -qO - https://dl.google.com/linux/linux_signing_key.pub | gpg --batch --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg && \\\n  echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google-chrome.list && \\\n  apt-get -qq update && \\\n  apt-get -yqq --no-install-recommends --no-install-suggests install google-chrome-stable && \\\n  dbus-uuidgen > /var/lib/dbus/machine-id && \\\n  mkdir -p /var/run/dbus && \\\n# Install xdebug\n  apt-get -yqq --no-install-recommends --no-install-suggests install php-xdebug && \\\n  echo \"xdebug.mode=coverage\" >> /etc/php/7.4/mods-available/xdebug.ini && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* && \\\n# Set TEST environment\n  sed -r -i -e \"s/^APP_ENV\\s*=.*$/APP_ENV=test/\" .env && \\\n  service mariadb start && \\\n  php bin/console doctrine:database:drop -f -q && \\\n  php bin/console doctrine:database:create -n -q && \\\n  php bin/console doctrine:schema:update -f -q && \\\n  php bin/console doctrine:fixtures:load -n -q --group=Test && \\\n  mysqldump -uroot -proot giuaschool -t -n --compact --result-file='tests/temp/Test.fixtures' && \\\n  chown -R www-data:www-data .\n"
}