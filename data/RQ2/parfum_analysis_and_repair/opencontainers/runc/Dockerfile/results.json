{
  "startTime": 1674215944766,
  "endTime": 1674215945544,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 42,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GO_VERSION=1.18\nARG BATS_VERSION=v1.3.0\nARG LIBSECCOMP_VERSION=2.5.4\n\nFROM golang:${GO_VERSION}-bullseye\nARG DEBIAN_FRONTEND=noninteractive\nARG CRIU_REPO=https://download.opensuse.org/repositories/devel:/tools:/criu/Debian_11\n\nRUN KEYFILE=/usr/share/keyrings/criu-repo-keyring.gpg; \\\n    wget -nv $CRIU_REPO/Release.key -O- | gpg --batch --dearmor > \"$KEYFILE\" \\\n    && echo \"deb [signed-by=$KEYFILE] $CRIU_REPO/ /\" > /etc/apt/sources.list.d/criu.list \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        criu \\\n        gcc-aarch64-linux-gnu libc-dev-arm64-cross \\\n        gcc-arm-linux-gnueabi libc-dev-armel-cross \\\n        gcc-arm-linux-gnueabihf libc-dev-armhf-cross \\\n        gcc-powerpc64le-linux-gnu libc-dev-ppc64el-cross \\\n        gcc-s390x-linux-gnu libc-dev-s390x-cross \\\n        gcc-riscv64-linux-gnu libc-dev-riscv64-cross \\\n        curl \\\n        gawk \\\n        gcc \\\n        gperf \\\n        iptables \\\n        jq \\\n        kmod \\\n        pkg-config \\\n        python3-minimal \\\n        sshfs \\\n        sudo \\\n        uidmap \\\n    && apt-get clean \\\n    && rm -rf /var/cache/apt /var/lib/apt/lists/* /etc/apt/sources.list.d/*.list\n\n# Add a dummy user for the rootless integration tests. While runC does\n# not require an entry in /etc/passwd to operate, one of the tests uses\n# `git clone` -- and `git clone` does not allow you to clone a\n# repository if the current uid does not have an entry in /etc/passwd.\nRUN useradd -u1000 -m -d/home/rootless -s/bin/bash rootless\n\n# install bats\nARG BATS_VERSION\nRUN cd /tmp \\\n    && git clone https://github.com/bats-core/bats-core.git \\\n    && cd bats-core \\\n    && git reset --hard \"${BATS_VERSION}\" \\\n    && ./install.sh /usr/local \\\n    && rm -rf /tmp/bats-core\n\n# install libseccomp\nARG LIBSECCOMP_VERSION\nCOPY script/seccomp.sh script/lib.sh /tmp/script/\nRUN mkdir -p /opt/libseccomp \\\n    && /tmp/script/seccomp.sh \"$LIBSECCOMP_VERSION\" /opt/libseccomp arm64 armel armhf ppc64le riscv64 s390x\nENV LIBSECCOMP_VERSION=$LIBSECCOMP_VERSION\nENV LD_LIBRARY_PATH=/opt/libseccomp/lib\nENV PKG_CONFIG_PATH=/opt/libseccomp/lib/pkgconfig\n\nWORKDIR /go/src/github.com/opencontainers/runc\n"
}