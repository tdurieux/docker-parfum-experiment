{
  "startTime": 1674252872219,
  "endTime": 1674252873167,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 6,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NOTE: this Dockerfile is purely for local development! it is *not* used for\n# the official 'concourse/concourse' image.\n\nARG base_image=concourse/dev\nFROM ${base_image} AS base\n\nARG goproxy\nENV GOPROXY=$goproxy\n\n# download go modules separately so this doesn't re-run on every change\nWORKDIR /src\nCOPY go.mod .\nCOPY go.sum .\n# don't do go mod download if there's a replace directive pointing to local filepath (./, ../)\nRUN grep ' => (\\.\\/|\\.\\.\\/)' go.mod || go mod download\n\n# build the init executable for containerd\nCOPY ./cmd/init/init.c /tmp/init.c\nRUN gcc -O2 -static -o /usr/local/concourse/bin/init /tmp/init.c && rm /tmp/init.c\n\n# copy the rest separately so we don't constantly rebuild init\nCOPY . .\n\n# build 'concourse' binary\nRUN go build -gcflags=all=\"-N -l\" -o /usr/local/concourse/bin/concourse \\\n      ./cmd/concourse\n\n\n# separate build target to build the linux fly binary\nFROM base AS with-fly\nRUN go build -ldflags '-extldflags \"-static\"' -o /tmp/fly ./fly && \\\n      tar -C /tmp -czf /usr/local/concourse/fly-assets/fly-$(go env GOOS)-$(go env GOARCH).tgz fly && \\\n      rm /tmp/fly && rm /usr/local/concourse/fly-assets/fly-$( go env GOOS)-$( go env GOARCH).tgz\nVOLUME /src\nENV CONCOURSE_WEB_PUBLIC_DIR=/src/web/public\n\n\n# extend base stage with setup for local docker-compose workflow\nFROM base\n\n# set up a volume so locally built web UI changes auto-propagate\nVOLUME /src\nENV CONCOURSE_WEB_PUBLIC_DIR=/src/web/public\n"
}