{
  "startTime": 1674248828368,
  "endTime": 1674248831438,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 49,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 49,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GO_IMAGE=quay.io/airshipit/golang:1.16.8-buster\nARG RELEASE_IMAGE=scratch\nFROM ${GO_IMAGE} as builder\n\nENV PATH \"/usr/local/go/bin:$PATH\"\n\nARG GOPROXY=\"\"\n\n# Inject custom root certificate authorities if needed\n# Docker does not have a good conditional copy statement and requires that a source file exists\n# to complete the copy function without error.  Therefore the README.md file will be copied to\n# the image every time even if there are no .crt files.\nCOPY ./certs/* /usr/local/share/ca-certificates/\nRUN update-ca-certificates\n\nRUN apt-get update -yq && apt-get upgrade -yq && apt-get install --no-install-recommends -y gcc make && rm -rf /var/lib/apt/lists/*;\n\nSHELL [ \"/bin/bash\", \"-cex\" ]\nWORKDIR /usr/src/airshipctl\n\n# Take advantage of caching for dependency acquisition\nCOPY go.mod go.sum /usr/src/airshipctl/\nRUN go mod download\n\nCOPY . /usr/src/airshipctl/\nARG MAKE_TARGET=build\nRUN for target in $MAKE_TARGET; do make $target; done\n\nFROM ${RELEASE_IMAGE} as release\n\nLABEL org.opencontainers.image.authors='airship-discuss@lists.airshipit.org, irc://#airshipit@freenode' \\\n      org.opencontainers.image.url='https://airshipit.org' \\\n      org.opencontainers.image.documentation='https://docs.airshipit.org/airshipctl/' \\\n      org.opencontainers.image.source='https://opendev.org/airship/airshipctl' \\\n      org.opencontainers.image.vendor='The Airship Authors' \\\n      org.opencontainers.image.licenses='Apache-2.0'\n\nARG BINARY=airshipctl\nENV BINARY=${BINARY}\nCOPY --from=builder /usr/src/airshipctl/bin/${BINARY} /usr/local/bin/${BINARY}\nUSER 65534\n# ENTRYPOINT instruction does not expand args from both ENV and ARG.\n# Since variable defined with ENV is available at runtime it will be\n# consumed this way. This also means it may be overridden by passing\n# --env ENTRYPOINT=... to docker run\nARG ENTRYPOINT=/usr/local/bin/${BINARY}\nENV ENTRYPOINT=${ENTRYPOINT}\nENTRYPOINT ${ENTRYPOINT}\n"
}