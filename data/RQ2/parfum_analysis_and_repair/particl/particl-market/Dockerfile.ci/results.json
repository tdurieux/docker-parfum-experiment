{
  "startTime": 1674255696743,
  "endTime": 1674255697325,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 7,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM mhart/alpine-node:9.6.1\n\nENV BUILD_PACKAGES git wget curl bash make gcc g++ python libc6-compat build-base openssl-dev ca-certificates libssl1.0 openssl libstdc++\nENV RUBY_PACKAGES ruby ruby-dev ruby-bundler ruby-json ruby-bigdecimal ruby-io-console\nENV NPM_PACKAGES wait-port yarn ts-node tslint typescript\nENV GEM_PACKAGES kontena-cli\n\n# update and install all of the required packages, then remove the apk cache\nRUN apk --update add --no-cache $BUILD_PACKAGES && \\\n    apk add --no-cache $RUBY_PACKAGES\n\nRUN npm install -g -s --no-progress $NPM_PACKAGES && npm cache clean --force;\nRUN gem install $GEM_PACKAGES --no-rdoc --no-ri\nRUN gem cleanup\n\n# RUN apk add --no-cache fftw-dev --repository https://dl-3.alpinelinux.org/alpine/edge/main/\n# RUN apk add --no-cache vips-dev --repository https://dl-3.alpinelinux.org/alpine/edge/testing/\n#RUN npm install -g wait-port\n#RUN npm install -g -s --no-progress yarn\n#RUN npm install -g ts-node\n#RUN npm install -g tslint\n#RUN npm install -g typescript\n#RUN echo 'check_certificate = off' >> /etc/wgetrc \\\n#    && wget -O ruby-install-0.6.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.6.0.tar.gz \\\n#    && tar xzf ruby-install-0.6.0.tar.gz \\\n#    && cd ruby-install-0.6.0 \\\n#    && make install \\\n#    && ruby-install --system --latest ruby \\\n#    && gem install --no-ri --no-rdoc bundler \\\n#    && gem update --system \\\n#    && rm -rf ruby-install* \\\n#    && ruby --version \\\n#    && ruby-install --cleanup\n\n\n\nRUN mkdir -p /app/data/database\nRUN mkdir -p /root/.kontena/certs\n\nWORKDIR /app/\n\n# install dockerize\nRUN wget https://github.com/jwilder/dockerize/releases/download/v0.6.0/dockerize-linux-amd64-v0.6.0.tar.gz \\\n    && tar -xzvf dockerize-linux-amd64-v0.6.0.tar.gz && rm dockerize-linux-amd64-v0.6.0.tar.gz\n\nCOPY package.json /app\nCOPY yarn.lock /app\nCOPY . /app/\nCOPY .kontena_client.json /root/.kontena_client.json\n\n# setup config files\nRUN cp -f .env.ci.app1 /app/.env\nRUN cp -f .env.ci.test /app/.env.test\nRUN cp -f .env.ci.blackbox /app/.env.blackbox\n\n#RUN yarn install --check-files\n\n#VOLUME /app/data\n#VOLUME /app/\n#CMD [ \"yarn\", \"serve\" ]\n#CMD [ \"bin/entrypoint.sh\" ]\n\nEXPOSE 3000 3100 3200\n"
}