{
  "startTime": 1674220557320,
  "endTime": 1674220559266,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 25,
        "columnEnd": 177
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 2,
        "columnEnd": 203
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 2,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 2,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 2,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###\n# Build\n###\nFROM debian:bullseye AS build\n\nRUN mkdir -p /app/build /build/.task /build/build/work\nRUN ln -snf /build/.task /app/.task\nRUN ln -snf /build/build/work /app/build/work\nWORKDIR /app\n\nENV NOKOGIRI_USE_SYSTEM_LIBRARIES 1\n\nCOPY build/package_dependencies.sh /app/build/package_dependencies.sh\nCOPY tasks/helpers.sh tasks/install-system-build-dependencies /app/tasks/\nCOPY tasks/helpers/detect_os_release.sh tasks/helpers/lua.sh /app/tasks/helpers/\nRUN /app/tasks/install-system-build-dependencies\n\nCOPY Makefile.in Taskfile.yml configure /app/\nCOPY tasks/bootstrap-* /app/tasks/\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\n\nCOPY tasks/clean/dev /app/tasks/clean/dev\n\nCOPY tasks/deps/bundler tasks/deps/ruby tasks/deps/rubygems /app/tasks/deps/\nRUN make deps:bundler && make clean:dev\n\nCOPY tasks/deps/perp /app/tasks/deps/\nRUN make deps:perp && make clean:dev\n\nCOPY tasks/deps/runit_svlogd /app/tasks/deps/\nRUN make deps:runit_svlogd && make clean:dev\n\nCOPY build/patches/openresty* /app/build/patches/\nCOPY tasks/deps/libmaxminddb tasks/deps/openresty /app/tasks/deps/\nRUN make deps:openresty && make clean:dev\n\nCOPY build/patches/trafficserver* /app/build/patches/\nCOPY tasks/deps/trafficserver /app/tasks/deps/\nRUN make deps:trafficserver && make clean:dev\n\nCOPY tasks/deps/libestr tasks/deps/libfastjson tasks/deps/rsyslog /app/tasks/deps/\nRUN make deps:rsyslog && make clean:dev\n\nCOPY tasks/deps/icu4c /app/tasks/deps/\nRUN make deps:icu4c && make clean:dev\n\nCOPY tasks/deps/luarocks /app/tasks/deps/\nRUN make deps:luarocks && make clean:dev\n\nCOPY tasks/deps/mora /app/tasks/deps/\nRUN make deps:mora && make clean:dev\n\nCOPY tasks/deps/mongodb /app/tasks/deps/\nRUN make deps:mongodb && make clean:dev\n\nCOPY tasks/deps/elasticsearch /app/tasks/deps/\nRUN make deps:elasticsearch && make clean:dev\n\nCOPY tasks/deps /app/tasks/deps\nRUN make deps && make clean:dev\n\nCOPY tasks/build-deps /app/tasks/build-deps\nRUN make build-deps && make clean:dev\n\nCOPY tasks/app/static-site /app/tasks/app/\nRUN make app:static-site && make clean:dev\n\nCOPY src/api-umbrella/web-app/Gemfile src/api-umbrella/web-app/Gemfile.lock /app/src/api-umbrella/web-app/\nCOPY tasks/app-deps/web-app/bundle /app/tasks/app-deps/web-app/\nRUN make app-deps:web-app:bundle && make clean:dev\n\nCOPY src/api-umbrella/admin-ui/.yarnrc src/api-umbrella/admin-ui/package.json src/api-umbrella/admin-ui/yarn.lock /app/src/api-umbrella/admin-ui/\nCOPY tasks/app-deps/admin-ui/yarn /app/tasks/app-deps/admin-ui/\nRUN make app-deps:admin-ui:yarn && make clean:dev\n\nCOPY tasks/app-deps /app/tasks/app-deps\nRUN make app-deps && make clean:dev\n\nCOPY src/api-umbrella/web-app/Rakefile src/api-umbrella/web-app/config.ru /app/src/api-umbrella/web-app/\nCOPY src/api-umbrella/web-app/app/assets /app/src/api-umbrella/web-app/app/assets\nCOPY src/api-umbrella/web-app/bin /app/src/api-umbrella/web-app/bin\nCOPY src/api-umbrella/web-app/config /app/src/api-umbrella/web-app/config\nCOPY tasks/app/web-app/precompile /app/tasks/app/web-app/\nRUN make app:web-app:precompile && make clean:dev\n\nCOPY src/api-umbrella/admin-ui /app/src/api-umbrella/admin-ui\nCOPY tasks/app/admin-ui/build /app/tasks/app/admin-ui/\nRUN make app:admin-ui:build && make clean:dev\n\nCOPY LICENSE.txt /app/\nCOPY bin /app/bin\nCOPY config /app/config\nCOPY src /app/src\nCOPY tasks /app/tasks\nCOPY templates /app/templates\nRUN make && make clean:dev\n\n###\n# Test\n###\nFROM debian:bullseye AS test\n\nRUN mkdir -p /app/build /build/.task /build/build/work\nRUN ln -snf /build/.task /app/.task\nRUN ln -snf /build/build/work /app/build/work\nWORKDIR /app\n\n# Add Chrome for integration tests, similar to how the CircleCI images add it:\n# https://github.com/CircleCI-Public/circleci-dockerfiles/blob/c24e69355b400aaba34a1ddfc55cdb1fef9dedff/buildpack-deps/images/xenial/browsers/Dockerfile#L47\nRUN set -x && \\\n  apt-get update && \\\n  apt-get -y --no-install-recommends install curl gnupg2 unzip && \\\n  curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \\\n  (dpkg -i /tmp/google-chrome-stable_current_amd64.deb || apt-get -fy install) && \\\n  rm -f /tmp/google-chrome-stable_current_amd64.deb && \\\n  sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' /opt/google/chrome/google-chrome && \\\n  google-chrome --version && \\\n  CHROME_VERSION=\"$(google-chrome --version)\" && \\\n  export CHROMEDRIVER_RELEASE=\"$(echo $CHROME_VERSION | sed 's/^Google Chrome //')\" && export CHROMEDRIVER_RELEASE=${CHROMEDRIVER_RELEASE%%.*} && \\\n  CHROMEDRIVER_VERSION=$( curl --silent --show-error --location --fail --retry 4 --retry-delay 5 https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROMEDRIVER_RELEASE}) && \\\n  curl --silent --show-error --location --fail --retry 4 --retry-delay 5 --output /tmp/chromedriver_linux64.zip \"https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip\" && \\\n  cd /tmp && \\\n  unzip chromedriver_linux64.zip && \\\n  rm -rf chromedriver_linux64.zip && \\\n  mv chromedriver /usr/local/bin/chromedriver && \\\n  chmod +x /usr/local/bin/chromedriver && \\\n  chromedriver --version && rm -rf /var/lib/apt/lists/*;\n\nCOPY build/package_dependencies.sh /app/build/package_dependencies.sh\nCOPY tasks/helpers.sh tasks/install-system-build-dependencies /app/tasks/\nCOPY tasks/helpers/detect_os_release.sh tasks/helpers/lua.sh /app/tasks/helpers/\nRUN INSTALL_TEST_DEPENDENCIES=true /app/tasks/install-system-build-dependencies\n\nCOPY Makefile.in Taskfile.yml configure /app/\nCOPY tasks/bootstrap-* /app/tasks/\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\n\nCOPY tasks/clean/dev /app/tasks/clean/dev\n\nCOPY --from=build /build /build\n\nCOPY Gemfile Gemfile.lock /app/\nCOPY tasks/deps/bundler tasks/deps/ruby tasks/deps/rubygems /app/tasks/deps/\nCOPY tasks/test-deps/bundle /app/tasks/test-deps/\nRUN make test-deps:bundle && make clean:dev\n\nCOPY tasks/test-deps/elasticsearch6 /app/tasks/test-deps/\nRUN make test-deps:elasticsearch6 && make clean:dev\n\nCOPY tasks/test-deps/elasticsearch7 /app/tasks/test-deps/\nRUN make test-deps:elasticsearch7 && make clean:dev\n\nCOPY tasks/deps/libmaxminddb tasks/deps/luarocks tasks/deps/openresty /app/tasks/deps/\nCOPY tasks/test-deps /app/tasks/test-deps\nRUN make test-deps && make clean:dev\n\nRUN groupadd -r api-umbrella && \\\n  useradd -r -g api-umbrella -s /sbin/nologin -d /opt/api-umbrella -c \"API Umbrella user\" api-umbrella\n\nCOPY --from=build /app /app\nCOPY .luacheckrc .rubocop.yml Rakefile /app/\nCOPY build/package /app/build/package\nCOPY deploy /app/deploy\nCOPY scripts /app/scripts\nCOPY test /app/test\nCOPY website/Gemfile website/Rakefile website/config.rb /app/website/\n\nRUN ln -snf \"/app/build/work/tasks/app-deps/admin-ui/yarn/_persist/node_modules\" \"/app/src/api-umbrella/admin-ui/node_modules\"\nRUN ln -snf \"/app/build/work/tasks/app-deps/web-app/bundle/_persist/.bundle\" \"/app/src/api-umbrella/web-app/.bundle\"\n\nENV \\\n  PATH=\"/app/bin:/build/build/work/dev-env/sbin:/build/build/work/dev-env/bin:/build/build/work/test-env/sbin:/build/build/work/test-env/bin:/build/build/work/stage/opt/api-umbrella/sbin:/build/build/work/stage/opt/api-umbrella/bin:/build/build/work/stage/opt/api-umbrella/embedded/sbin:/build/build/work/stage/opt/api-umbrella/embedded/bin:${PATH}\" \\\n  API_UMBRELLA_ROOT=\"/build/build/work/stage/opt/api-umbrella\"\n\n###\n# Install\n###\nFROM debian:bullseye AS install\n\nRUN apt-get update && \\\n  apt-get -y --no-install-recommends install git rsync && \\\n  rm -rf /var/lib/apt/lists/*\n\nCOPY --from=build /app/tasks/helpers.sh /tmp/install/tasks/helpers.sh\nCOPY --from=build /app/tasks/install /tmp/install/tasks/install\nWORKDIR /tmp/install\nRUN DESTDIR=\"/build/install-destdir\" ./tasks/install\n\n###\n# Runtime\n###\nFROM debian:bullseye AS runtime\n\nCOPY --from=build /build/install-destdir /\nCOPY --from=build /app/build/package/scripts/after-install /tmp/install/build/package/scripts/after-install\nCOPY --from=build /app/build/package_dependencies.sh /tmp/install/build/package_dependencies.sh\nCOPY --from=build /app/tasks/helpers/detect_os_release.sh /tmp/install/tasks/helpers/detect_os_release.sh\nRUN set -x && \\\n  apt-get update && \\\n  bash -c 'source /tmp/install/build/package_dependencies.sh && DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install \"${core_package_dependencies[@]}\"' && \\\n  /tmp/install/build/package/scripts/after-install 1 && \\\n  rm -rf /tmp/install /var/lib/apt/lists/*\n\nENTRYPOINT [\"/app/docker/dev/docker-entrypoint\"]\nCMD [\"/app/docker/dev/docker-start\"]\n"
}