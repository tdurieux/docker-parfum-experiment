diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nrel/alfalfa/alfalfa_worker/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nrel/alfalfa/alfalfa_worker/Dockerfile/repaired.Dockerfile
index d5573a0..59ab210 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nrel/alfalfa/alfalfa_worker/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nrel/alfalfa/alfalfa_worker/Dockerfile/repaired.Dockerfile
@@ -17,13 +17,13 @@ WORKDIR /home/alfalfa
 # firewall this step must be run off VPN. This way you don't need to log off everytime you
 # update apt packaged, at least.
 RUN apt-get update \
-    && apt install -y software-properties-common \
+    && apt install --no-install-recommends -y software-properties-common \
     && add-apt-repository ppa:openjdk-r/ppa \
     && add-apt-repository ppa:deadsnakes/ppa \
     && rm -rf /var/lib/apt/lists/*
 
 RUN apt-get update \
-    && apt-get install -y \
+    && apt-get install --no-install-recommends -y \
     ca-certificates \
     curl \
     gdebi-core \
@@ -46,7 +46,7 @@ RUN apt-get update \
 # provide non-interactive input.
 RUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java \
     && update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac \
-    && curl -SLO http://openstudio-resources.s3.amazonaws.com/bcvtb-linux.tar.gz \
+    && curl -f -SLO http://openstudio-resources.s3.amazonaws.com/bcvtb-linux.tar.gz \
     && tar -xzf bcvtb-linux.tar.gz \
     && rm bcvtb-linux.tar.gz
 
@@ -69,7 +69,7 @@ ENV ENERGYPLUS_DOWNLOAD_URL $ENERGYPLUS_DOWNLOAD_BASE_URL/$ENERGYPLUS_DOWNLOAD_F
 
 # We would rather use the self extracting tarball distribution of EnergyPlus, but there appears to
 # be a bug in the installation script so using the tar.gz manually here and making our own links
-RUN curl -SLO $ENERGYPLUS_DOWNLOAD_URL \
+RUN curl -f -SLO $ENERGYPLUS_DOWNLOAD_URL \
     && mkdir $ENERGYPLUS_DIR \
     && tar -C $ENERGYPLUS_DIR/ --strip-components=1 -xzf $ENERGYPLUS_DOWNLOAD_FILENAME \
     && ln -s $ENERGYPLUS_DIR/energyplus /usr/local/bin/ \
@@ -78,7 +78,7 @@ RUN curl -SLO $ENERGYPLUS_DOWNLOAD_URL \
     && rm $ENERGYPLUS_DOWNLOAD_FILENAME
 
 
-RUN curl -SLO $OPENSTUDIO_DOWNLOAD_URL \
+RUN curl -f -SLO $OPENSTUDIO_DOWNLOAD_URL \
     && gdebi -n $OPENSTUDIO_DOWNLOAD_FILENAME \
     && rm -f $OPENSTUDIO_DOWNLOAD_FILENAME \
     && cd /usr/local/openstudio* \
@@ -107,8 +107,8 @@ ENV PYFMI_TAG PyFMI-2.9.5
 ENV SUPERLU_HOME $ROOT_DIR/SuperLU_MT_3.1
 
 # Modelica requires libgfortran3 which is not in apt for 20.04
-RUN wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-6/gcc-6-base_6.4.0-17ubuntu1_amd64.deb \
-    && wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-6/libgfortran3_6.4.0-17ubuntu1_amd64.deb \
+RUN wget https://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-6/gcc-6-base_6.4.0-17ubuntu1_amd64.deb \
+    && wget https://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-6/libgfortran3_6.4.0-17ubuntu1_amd64.deb \
     && dpkg -i gcc-6-base_6.4.0-17ubuntu1_amd64.deb \
     && dpkg -i libgfortran3_6.4.0-17ubuntu1_amd64.deb \
     && ln -s /usr/lib/x86_64-linux-gnu/libffi.so.7 /usr/lib/x86_64-linux-gnu/libffi.so.6 \
@@ -127,12 +127,12 @@ RUN git clone --branch $FMIL_TAG --depth 1 https://github.com/modelon-community/
 COPY alfalfa_worker/build/make.inc $BUILD_DIR
 
 RUN cd $ROOT_DIR \
-    && curl -SLO http://crd-legacy.lbl.gov/~xiaoye/SuperLU/superlu_mt_3.1.tar.gz \
+    && curl -f -SLO http://crd-legacy.lbl.gov/~xiaoye/SuperLU/superlu_mt_3.1.tar.gz \
     && tar -xzf superlu_mt_3.1.tar.gz \
     && cd SuperLU_MT_3.1 \
     && rm make.inc \
     && cp $BUILD_DIR/make.inc make.inc \
-    && make lib
+    && make lib && rm superlu_mt_3.1.tar.gz
 
 ENV LD_LIBRARY_PATH $ROOT_DIR/lib:$SUPERLU_HOME/lib:$LD_LIBRARY_PATH
 
@@ -210,10 +210,10 @@ RUN rm -f poetry.lock && \
     python -m poetry install
 
 # for remote debugging
-RUN pip install remote-pdb
+RUN pip install --no-cache-dir remote-pdb
 
 # for live reloading celery
-RUN pip install watchdog[watchmedo]
+RUN pip install --no-cache-dir watchdog[watchmedo]
 
 # The docker-compose will require the mounting
 # of the files into the container, see docker-compose.dev.yml