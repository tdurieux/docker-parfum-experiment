{
  "startTime": 1674218919900,
  "endTime": 1674218921288,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 7,
        "columnEnd": 80
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 212,
        "lineEnd": 212,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 AS base\n\nUSER root\n\nENV HOME /home/alfalfa\n\n# Need to set the lang to use Python 3.6 with Poetry\nENV  LANG C.UTF-8\nENV DEBIAN_FRONTEND noninteractive\nENV ROOT_DIR /usr/local\nENV BUILD_DIR $HOME/build\n\nWORKDIR /home/alfalfa\n\n# Until we can support E+ 22.1.0 we need to install python 3.7 (thus deadsnakes/ppa)\n# This step should probably be connected tot he next one, but due to the nature of NREL's\n# firewall this step must be run off VPN. This way you don't need to log off everytime you\n# update apt packaged, at least.\nRUN apt-get update \\\n    && apt install --no-install-recommends -y software-properties-common \\\n    && add-apt-repository ppa:openjdk-r/ppa \\\n    && add-apt-repository ppa:deadsnakes/ppa \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n    ca-certificates \\\n    curl \\\n    gdebi-core \\\n    vim \\\n    wget \\\n    git \\\n    openjdk-8-jdk-headless \\\n    liblapack-dev \\\n    gfortran \\\n    libgfortran4 \\\n    cmake \\\n    python3.7-dev \\\n    python3.7 \\\n    python3.7-distutils \\\n    python3-pip \\\n    libblas-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Use set in update-alternatives instead of config to\n# provide non-interactive input.\nRUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java \\\n    && update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac \\\n    && curl -f -SLO http://openstudio-resources.s3.amazonaws.com/bcvtb-linux.tar.gz \\\n    && tar -xzf bcvtb-linux.tar.gz \\\n    && rm bcvtb-linux.tar.gz\n\nWORKDIR $BUILD_DIR\n\nENV OPENSTUDIO_DOWNLOAD_FILENAME OpenStudio-3.3.0+ad235ff36e-Ubuntu-20.04.deb\nENV OPENSTUDIO_DOWNLOAD_URL https://github.com/NREL/OpenStudio/releases/download/v3.3.0/OpenStudio-3.3.0+ad235ff36e-Ubuntu-20.04.deb\n\nENV ENERGYPLUS_VERSION 9.6.0\nENV ENERGYPLUS_TAG v9.6.0\nENV ENERGYPLUS_SHA f420c06a69\nENV ENERGYPLUS_DIR /usr/local/EnergyPlus-9-4-0\n\n# mlep / external interface needs parts of EnergyPlus that are not included with OpenStudio\n# expandobjects, runenergyplus might be two examples, but the need to install EnergyPlus separately from OpenStudio\n# might be revaluated\nENV ENERGYPLUS_DOWNLOAD_BASE_URL https://github.com/NREL/EnergyPlus/releases/download/$ENERGYPLUS_TAG\nENV ENERGYPLUS_DOWNLOAD_FILENAME EnergyPlus-$ENERGYPLUS_VERSION-$ENERGYPLUS_SHA-Linux-Ubuntu20.04-x86_64.tar.gz\nENV ENERGYPLUS_DOWNLOAD_URL $ENERGYPLUS_DOWNLOAD_BASE_URL/$ENERGYPLUS_DOWNLOAD_FILENAME\n\n# We would rather use the self extracting tarball distribution of EnergyPlus, but there appears to\n# be a bug in the installation script so using the tar.gz manually here and making our own links\nRUN curl -f -SLO $ENERGYPLUS_DOWNLOAD_URL \\\n    && mkdir $ENERGYPLUS_DIR \\\n    && tar -C $ENERGYPLUS_DIR/ --strip-components=1 -xzf $ENERGYPLUS_DOWNLOAD_FILENAME \\\n    && ln -s $ENERGYPLUS_DIR/energyplus /usr/local/bin/ \\\n    && ln -s $ENERGYPLUS_DIR/ExpandObjects /usr/local/bin/ \\\n    && ln -s $ENERGYPLUS_DIR/runenergyplus /usr/local/bin/ \\\n    && rm $ENERGYPLUS_DOWNLOAD_FILENAME\n\n\nRUN curl -f -SLO $OPENSTUDIO_DOWNLOAD_URL \\\n    && gdebi -n $OPENSTUDIO_DOWNLOAD_FILENAME \\\n    && rm -f $OPENSTUDIO_DOWNLOAD_FILENAME \\\n    && cd /usr/local/openstudio* \\\n    && rm -rf EnergyPlus \\\n    && ln -s $ENERGYPLUS_DIR EnergyPlus\n\n# Install commands for Spawn\nENV SPAWN_VERSION=0.3.0-69040695f9\nRUN wget https://spawn.s3.amazonaws.com/custom/Spawn-$SPAWN_VERSION-Linux.tar.gz \\\n    && tar -C /usr/local/ -xzf Spawn-$SPAWN_VERSION-Linux.tar.gz \\\n    && ln -s /usr/local/Spawn-$SPAWN_VERSION-Linux/bin/spawn-$SPAWN_VERSION /usr/local/bin/ \\\n    && rm Spawn-$SPAWN_VERSION-Linux.tar.gz\n\n## MODELICA\n\nENV FMIL_TAG 2.4\nENV FMIL_HOME $ROOT_DIR/fmil\n\nENV SUNDIALS_HOME $ROOT_DIR\nENV SUNDIALS_TAG v4.1.0\n\nENV ASSIMULO_TAG Assimulo-3.2.9\n\nENV PYFMI_TAG PyFMI-2.9.5\n\nENV SUPERLU_HOME $ROOT_DIR/SuperLU_MT_3.1\n\n# Modelica requires libgfortran3 which is not in apt for 20.04\nRUN wget https://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-6/gcc-6-base_6.4.0-17ubuntu1_amd64.deb \\\n    && wget https://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-6/libgfortran3_6.4.0-17ubuntu1_amd64.deb \\\n    && dpkg -i gcc-6-base_6.4.0-17ubuntu1_amd64.deb \\\n    && dpkg -i libgfortran3_6.4.0-17ubuntu1_amd64.deb \\\n    && ln -s /usr/lib/x86_64-linux-gnu/libffi.so.7 /usr/lib/x86_64-linux-gnu/libffi.so.6 \\\n    && rm *.deb\n\n# Build FMI Library (for PyFMI)\nRUN git clone --branch $FMIL_TAG --depth 1 https://github.com/modelon-community/fmi-library.git \\\n    && mkdir $FMIL_HOME \\\n    && mkdir fmil_build \\\n    && cd fmil_build \\\n    && cmake -DFMILIB_INSTALL_PREFIX=$FMIL_HOME ../fmi-library \\\n    && make install \\\n    && cd .. && rm -rf fmi-library fmil_build\n\n# Build SuperLU (groan)\nCOPY alfalfa_worker/build/make.inc $BUILD_DIR\n\nRUN cd $ROOT_DIR \\\n    && curl -f -SLO http://crd-legacy.lbl.gov/~xiaoye/SuperLU/superlu_mt_3.1.tar.gz \\\n    && tar -xzf superlu_mt_3.1.tar.gz \\\n    && cd SuperLU_MT_3.1 \\\n    && rm make.inc \\\n    && cp $BUILD_DIR/make.inc make.inc \\\n    && make lib && rm superlu_mt_3.1.tar.gz\n\nENV LD_LIBRARY_PATH $ROOT_DIR/lib:$SUPERLU_HOME/lib:$LD_LIBRARY_PATH\n\n# Build Sundials with SuperLU(for Assimulo)\nRUN git clone --branch $SUNDIALS_TAG --depth 1 https://github.com/LLNL/sundials.git \\\n    && mkdir sundials_build \\\n    && cd sundials_build \\\n    && cmake ../sundials \\\n    -DPTHREAD_ENABLE=1 \\\n    -DBLAS_ENABLE=1 \\\n    -DLAPACK_LIBRARIES='-llapack -lblas' \\\n    -DLAPACK_ENABLE=1 \\\n    -DSUPERLUMT_ENABLE=1 \\\n    -DSUNDIALS_INDEX_SIZE=32 \\\n    -DSUPERLUMT_INCLUDE_DIR=$SUPERLU_HOME/SRC \\\n    -DSUPERLUMT_LIBRARY_DIR=$SUPERLU_HOME/lib \\\n    -DSUPERLUMT_LIBRARIES='-lblas' \\\n    && make \\\n    && make install \\\n    && cd .. && rm -rf sundials sundials_build\n\nCOPY pyproject.toml $BUILD_DIR\nCOPY poetry.lock $BUILD_DIR\n\n# Reinstall/upgrade setuptools because this is needed for symfit (used in E+ Python)\nRUN ln -sf /usr/bin/python3.7 /usr/bin/python \\\n    && ln -sf /usr/bin/python3.7 /usr/bin/python3 \\\n    && ln -sf /usr/bin/pip3 /usr/bin/pip \\\n    && python -m pip install poetry==1.1.12 setuptools==62.1.0 \\\n    && python -m poetry config virtualenvs.create false \\\n    && python -m poetry install --no-dev\n\n# This is required for Assimulo to build correctly with setuptools 60+\nENV SETUPTOOLS_USE_DISTUTILS stdlib\n\nRUN git clone --branch $ASSIMULO_TAG --depth 1 https://github.com/modelon-community/Assimulo.git \\\n     && cd Assimulo \\\n     && python setup.py install \\\n     --sundials-home=$SUNDIALS_HOME \\\n     --blas-home=/usr/lib/x86_64-linux-gnu \\\n     --lapack-home=/usr/lib/x86_64-linux-gnu/lapack/ \\\n     --superlu-home=$SUPERLU_HOME \\\n     && cd .. && rm -rf Assimulo\n\n# Install PyFMI\nRUN git clone --branch $PYFMI_TAG --depth 1 https://github.com/modelon-community/PyFMI.git \\\n    && cd PyFMI \\\n    && python setup.py install \\\n    && cd .. && rm -rf PyFMI\n\nWORKDIR /alfalfa\n# Include the path to where alfalfa_worker is so that system calls can find it.\nENV  PYTHONPATH=\"/alfalfa:${PYTHONPATH}\"\n\nCOPY . /alfalfa\nCOPY ./deploy/wait-for-it.sh /usr/local/wait-for-it.sh\nCOPY ./deploy/start_worker.sh start_worker.sh\n\nWORKDIR /alfalfa/alfalfa_worker\n# add back in the workflow.tar.gz, but this will be remove (i think)\n# when we remove the osm support.\n# RUN tar -czf workflow.tar.gz workflow\nENV SEPARATE_PROCESS_JVM /usr/lib/jvm/java-8-openjdk-amd64/\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/\n\nCMD [\"/alfalfa/start_worker.sh\"]\n\n# **** Staged build for running in development mode ****\nFROM base AS dev\n\n# Install poetry's dev dependencies by removing old lock\nRUN rm -f poetry.lock && \\\n    python -m pip install poetry==1.1.12 setuptools==62.1.0 &&\\\n    python -m poetry config virtualenvs.create false &&\\\n    python -m poetry install\n\n# for remote debugging\nRUN pip install --no-cache-dir remote-pdb\n\n# for live reloading celery\nRUN pip install --no-cache-dir watchdog[watchmedo]\n\n# The docker-compose will require the mounting\n# of the files into the container, see docker-compose.dev.yml\n\n# Enable the ability to restart the service when\n# the files change\nCMD [\"watchmedo\", \"auto-restart\", \"--directory=/alfalfa\", \"--pattern=*.py\", \"--recursive\", \"--\", \"/alfalfa/deploy/start_worker.sh\"]\n\n# **** Image with just OpenStudio and EnergyPlus ****\nFROM ubuntu:20.04 AS alfalfa-openstudio\nCOPY --from=base /usr/local/EnergyPlus-9-4-0 /usr/local/EnergyPlus-9-4-0\n# This is a WIP, need to decide how where the base libraries go because ./energyplus requires\n# several libraries to already be installed on the core OS\n"
}