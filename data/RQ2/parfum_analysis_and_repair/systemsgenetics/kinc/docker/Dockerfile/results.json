{
  "startTime": 1674218462511,
  "endTime": 1674218464087,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 37,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 40,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 40,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 83,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 40,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 7,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 1,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 84,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-devel\nMAINTAINER Ben Shealy <btsheal@clemson.edu>\n\nARG NVIDIA_HEADLESS=0\nARG ACE_REVISION=\"develop\"\nARG KINC_REVISION=\"develop\"\nARG KINC_R_REVISION=\"master\"\n\nENV CUDADIR=\"/usr/local/cuda\"\nENV CPLUS_INCLUDE_PATH=\"${CUDADIR}/include:${CPLUS_INCLUDE_PATH}\"\nENV LIBRARY_PATH=\"${CUDADIR}/lib64:${LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"${CUDADIR}/lib64:${LD_LIBRARY_PATH}\"\n\n# install package dependencies\nRUN apt-get update -qq \\\n\t&& apt-get install --no-install-recommends -qq -y \\\n\t\tqt5-default \\\n\t\tclinfo \\\n\t\tgit \\\n\t\tlibboost-dev \\\n\t\tlibgsl-dev \\\n\t\tliblapacke-dev \\\n\t\tlibopenblas-dev \\\n\t\tlibopenmpi-dev \\\n\t\tocl-icd-opencl-dev \\\n\t\tpython3-pip && rm -rf /var/lib/apt/lists/*;\n\n\n# Install headless driver for cpu image\nRUN if [ ${NVIDIA_HEADLESS} = 1 ]; then \\\n apt-get install --no-install-recommends -qq -y nvidia-headless-418; rm -rf /var/lib/apt/lists/*; fi\n\n# add NVIDIA platform to OpenCL\nRUN mkdir -p /etc/OpenCL/vendors \\\n\t&& echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n\n# install StatsLib\nWORKDIR /opt\n\nRUN git clone -q https://github.com/kthohr/gcem \\\n\t&& cp -r gcem/include/* /usr/local/include\n\nRUN git clone -q https://github.com/kthohr/stats \\\n\t&& cp -r stats/include/* /usr/local/include\n\n# install ACE\nWORKDIR /opt\n\nRUN git clone -q https://github.com/SystemsGenetics/ACE.git \\\n\t&& cd ACE/build \\\n\t&& git checkout -q ${ACE_REVISION} \\\n\t&& qmake ../src/ACE.pro \\\n\t&& make -s -j $(nproc) \\\n\t&& make -s qmake_all \\\n\t&& make -s install\n\nENV LD_LIBRARY_PATH \"/usr/local/lib:$LD_LIBRARY_PATH\"\n\n# install KINC\nWORKDIR /opt\n\n# For older version of KINC we need to use qmake. For newer versions after 3.3.x we\n# can use the make file in the root directory of KINC.\nRUN if echo \"${KINC_REVISION}\" | grep -Eq 'v3\\.[32]\\.[0-9]$' ; then \\\n    git clone -q https://github.com/SystemsGenetics/KINC.git \\\n    && cd KINC \\\n\t&& git checkout -q ${KINC_REVISION} \\\n    && cd build \\\n\t&& qmake ../src/KINC.pro \\\n\t&& make -s -j $(nproc) \\\n\t&& make -s qmake_all \\\n\t&& make -s install; \\\nelse \\\n    git clone -q https://github.com/SystemsGenetics/KINC.git \\\n    && cd KINC \\\n\t&& git checkout -q ${KINC_REVISION} \\\n\t&& make -s -j $(nproc) \\\n\t&& make -s install; \\\nfi\n\n\n# Add in a few additional requirements for the >=3.4 version of KINC. These are needed\n# for the R and Python scripts in the bin folder.\nRUN if ! echo \"${KINC_REVISION}\" | grep -Eq 'v3\\.[32]\\.[0-9]$' ; then \\\n    apt-get install --no-install-recommends -qq -y \\\n        m4 \\\n        autoconf \\\n        automake \\\n        libxml2-dev \\\n        bison \\\n        flex \\\n        build-essential \\\n        libcurl4-gnutls-dev \\\n        libssl-dev \\\n        software-properties-common; rm -rf /var/lib/apt/lists/*; \\\n fi\n\n# Install KINC.R\nENV DEBIAN_FRONTEND=noninteractive\nRUN if ! echo \"${KINC_REVISION}\" | grep -Eq 'v3\\.[32]\\.[0-9]$' ; then \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n    && add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/' \\\n    && apt-get update -qq \\\n    && apt-get -qq --no-install-recommends install -y r-base \\\n    && R -q -e \"install.packages('devtools', dependencies=TRUE, repos='http://cran.us.r-project.org')\" \\\n    && R -e \"library('devtools'); install_github('SystemsGenetics/KINC.R', ref='${KINC_R_REVISION}')\"; rm -rf /var/lib/apt/lists/*; \\\n fi\n\n# install python dependencies\nWORKDIR /opt/KINC\n\nRUN if [ -e requirements.txt ]; then \\\n pip3 install --no-cache-dir -r requirements.txt; fi\n\n\n\n# initialize default work directory\nWORKDIR /workspace\n\n# Tini for signal processing and zombie killing.\nENV TINI_VERSION v0.19.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\n\n# Define the command and parameters that will be executed when this\n# container is first run.\nENTRYPOINT [\"/tini\", \"--\"]\n"
}