{
  "startTime": 1674248152224,
  "endTime": 1674248153281,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 30,
        "columnStart": 18,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.0.3-cudnn8-devel-ubuntu20.04\n\nENV OPENCV_VERSION=\"3.4.6\"\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt update && apt-get -qq install -y --no-install-recommends \\\n        build-essential     \\\n        cmake               \\\n        git                 \\\n        wget                \\\n        unzip               \\\n        yasm                \\\n        pkg-config          \\\n        libswscale-dev      \\\n        libtbb2             \\\n        libtbb-dev          \\\n        libjpeg-dev         \\\n        libpng-dev          \\\n        libtiff-dev         \\\n        libopenjp2-7-dev    \\\n        libavformat-dev     \\\n        libssl-dev          \\\n        libpq-dev           \\\n        libeigen3-dev       \\\n        libgl1-mesa-dev     \\\n        libboost1.67-all-dev\\\n        libglew-dev         \\\n        qtbase5-dev         \\\n        libqt5x11extras5-dev\\\n        libqt5opengl5-dev   \\\n        libsuitesparse-dev  \\\n        meshlab && rm -rf /var/lib/apt/lists/*;\n\nRUN wget https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz\nRUN tar xzvf Python-3.9.9.tgz && rm Python-3.9.9.tgz\nWORKDIR Python-3.9.9\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make install\nWORKDIR /\n\nRUN python3 -m pip install numpy \\\n    && wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -O opencv.zip \\\n    && unzip -qq opencv.zip -d /opt \\\n    && rm -rf opencv.zip \\\n    && cmake \\\n        -D BUILD_TIFF=ON            \\\n        -D BUILD_opencv_java=OFF    \\\n        -D WITH_CUDA=OFF            \\\n        -D WITH_OPENGL=ON           \\\n        -D WITH_OPENCL=OFF          \\\n        -D WITH_IPP=ON              \\\n        -D WITH_TBB=ON              \\\n        -D WITH_EIGEN=ON            \\\n        -D WITH_V4L=ON              \\\n        -D BUILD_TESTS=OFF          \\\n        -D BUILD_PERF_TESTS=OFF     \\\n        -D CMAKE_BUILD_TYPE=RELEASE \\\n        -D CMAKE_INSTALL_PREFIX=$(python3.9 -c \"import sys; print(sys.prefix)\") \\\n        -D PYTHON_EXECUTABLE=$(which python3.9) \\\n        -D PYTHON_INCLUDE_DIR=$(python3.9 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\\n        -D PYTHON_PACKAGES_PATH=$(python3.9 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") \\\n        /opt/opencv-${OPENCV_VERSION} \\\n    && make -j$(nproc) \\\n    && make install \\\n    && rm -rf /opt/build/* \\\n    && rm -rf /opt/opencv-${OPENCV_VERSION} \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get -qq autoremove \\\n    && apt-get -qq clean\n\nRUN git clone https://github.com/dorian3d/DLib\nWORKDIR DLib\nRUN git reset --hard b6c28fb\nRUN mkdir build\nWORKDIR build\nRUN cmake -E env CXXFLAGS=\"-march=native\" cmake .. && make -j install\nWORKDIR /\n\nRUN git clone https://github.com/laurentkneip/opengv.git\nWORKDIR opengv\nRUN git reset --hard 91f4b19\nRUN mkdir build\nWORKDIR build\nRUN cmake -E env CXXFLAGS=\"-march=native\" cmake .. && make -j install\nWORKDIR /\n\nRUN git clone https://github.com/RainerKuemmerle/g2o.git\nWORKDIR g2o\nRUN git reset --hard b1ba729\nRUN mkdir build\nWORKDIR build\nRUN cmake -DBUILD_WITH_MARCH_NATIVE=ON .. && make -j install\n\nADD . /home/badslam\nRUN mkdir build_RelWithDebInfo\nWORKDIR /home/badslam/build_RelWithDebInfo\n\nARG CUDA_ARCH\nENV CUDA_ARCH ${CUDA_ARCH}\nRUN cmake -E env CXXFLAGS='-march=native' cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CUDA_FLAGS=\"-arch=${CUDA_ARCH}\" .. && make -j\n"
}