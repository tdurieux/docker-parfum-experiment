{
  "startTime": 1674253732489,
  "endTime": 1674253733332,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NOTE(willkg): Make sure to update frontend/Dockerfile when you update this\n#\n# NOTE(willkg): We're using node 14 because of this issue:\n# https://github.com/docker/for-mac/issues/5831\nFROM node:16.10.0-slim@sha256:9bec98898848c3e3a1346bc74ab04c2072da9d0149d8be1ea0485dbf39fd658f as frontend\n\nCOPY . /app\nWORKDIR /app\nRUN bin/build_frontend.sh\n\n\nFROM python:3.9.12-slim@sha256:0cdfeed99b35442a55c9fd3401267f395b8ed8319b605bb4b71ee8292aeceaea\n\nARG userid=10001\nARG groupid=10001\n\nENV PYTHONUNBUFFERED=1 \\\n    PYTHONPATH=/app/ \\\n    PORT=8000\n\nEXPOSE $PORT\n\nWORKDIR /app\n\n# add a non-privileged user for installing and running the application\nRUN groupadd --gid $groupid app && \\\n    useradd -g app --uid $userid --shell /usr/sbin/nologin --create-home app && \\\n    chown app:app /app/\n\n# install a few essentials and clean apt caches afterwards\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    apt-transport-https build-essential curl git libpq-dev \\\n    gettext libffi-dev && rm -rf /var/lib/apt/lists/*;\n\n# Clean up apt\nRUN apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install Python dependencies\nCOPY requirements.txt /tmp/\n# Switch to /tmp to install dependencies outside home dir\nWORKDIR /tmp\n\nRUN pip install --no-cache-dir -U 'pip>=20' && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    pip check --disable-pip-version-check\n\nCOPY . /app\n\n# Switch back to home directory\nWORKDIR /app\n\n# Copy static assets\nCOPY --from=frontend /app/frontend/build /app/frontend/build\nRUN /app/bin/run_collectstatic.sh\n\nRUN chown -R app:app /app\n\nUSER app\n\n# Using /bin/bash as the entrypoint works around some volume mount issues on Windows\n# where volume-mounted files do not have execute bits set.\n# https://github.com/docker/compose/issues/2301#issuecomment-154450785 has additional background.\nENTRYPOINT [\"/bin/bash\", \"/app/bin/entrypoint.sh\"]\n\nCMD [\"web\"]\n"
}