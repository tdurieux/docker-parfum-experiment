{
  "startTime": 1674252540008,
  "endTime": 1674252540756,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 20,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedDockerfile": "# DOCKER-VERSION        1.3\n\n# Build Swoole\nFROM cr.zend.com/zendphp/8.1:ubuntu-20.04-cli as swoole\n\n## Prepare image\nARG SWOOLE_VERSION=4.10.0\nARG TIMEZONE=UTC\nENV TZ=$TIMEZONE\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nRUN set -e; \\\n    apt-get update; \\\n    apt-get install --no-install-recommends -y php8.1-zend-dev libcurl4-openssl-dev; rm -rf /var/lib/apt/lists/*; \\\n    mkdir /workdir; \\\n    cd /workdir; \\\n    curl -f -L -o openswoole-${SWOOLE_VERSION}.tgz https://pecl.php.net/get/openswoole-${SWOOLE_VERSION}.tgz; \\\n    tar xzf openswoole-${SWOOLE_VERSION}.tgz; rm openswoole-${SWOOLE_VERSION}.tgz \\\n    cd openswoole-${SWOOLE_VERSION}; \\\n    phpize8.1-zend; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --with-php-config=/usr/bin/php-config8.1-zend \\\n        --enable-http2 \\\n        --enable-openssl \\\n        --enable-sockets \\\n        --enable-swoole \\\n        --enable-swoole-curl \\\n        --enable-swoole-json; \\\n    make; \\\n    make install\n\n# Build assets\nFROM node:16.13 as assets\nRUN set -e; \\\n    echo \"Installing make (required for building assets)\"; \\\n    apt-get update; \\\n    apt-get install --no-install-recommends -y make; rm -rf /var/lib/apt/lists/*; \\\n    echo \"Installing agentkeepalive NPM module (required for npm upgrade)\"; \\\n    npm install -g agentkeepalive --save; npm cache clean --force; \\\n    echo \"Upgrading npm to latest version\"; \\\n    npm install -g npm@latest; \\\n    echo \"Installing PostCSS\"; \\\n    npm install -g postcss-cli; \\\n    echo \"Creating build directory\"; \\\n    mkdir /build\n\nCOPY assets /build/assets\nCOPY src /build/src\nCOPY templates /build/templates\n\nWORKDIR /build/assets\nRUN set -e; \\\n    if [ -d \"node_modules\" ];then \\\n        echo \"Removing existing installed node modules\"; \\\n        rm -rf node_modules; \\\n    fi; \\\n    echo \"Installing asset dependencies\"; \\\n    npm install; npm cache clean --force; \\\n    echo \"Building assets\"; \\\n    make assets\n\n# Build the PHP container\nFROM cr.zend.com/zendphp/8.1:ubuntu-20.04-cli\n\n## Customizations\nARG TIMEZONE=UTC\nARG INSTALL_COMPOSER=false\nARG SYSTEM_PACKAGES\nARG ZEND_EXTENSIONS_LIST\nARG PECL_EXTENSIONS_LIST\nARG POST_BUILD_BASH\n\n## Prepare tzdata\nENV TZ=$TIMEZONE\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n## Create working directory and composer home\nRUN set -e; \\\n    mkdir -p /var/www/public/js /var/www/public/css /var/local/composer\n\n## Install assets\nCOPY --from=assets /build/assets/dist /var/www/public/assets\n\n## Customize PHP runtime according\n## to the given building arguments\nRUN ZendPHPCustomizeWithBuildArgs.sh\n\n## Install Swoole\nCOPY --from=swoole /usr/lib/php/8.1-zend/openswoole.so /usr/lib/php/8.1-zend/openswoole.so\nCOPY --from=swoole /usr/include/php/8.1-zend/ext/openswoole /usr/include/php/8.1-zend/ext/openswoole\nRUN set -e; \\\n    echo \"extension=openswoole.so\" > /etc/zendphp/cli/conf.d/60-swoole.ini\n\n## Expose 9001\nEXPOSE 9001\n\n## Set working directory\nWORKDIR /var/www\n\n## Override entrypoint to use s6\nENV COMPOSER_BIN=/usr/local/sbin/composer\nENV COMPOSER_HOME=/var/local/composer\nENTRYPOINT [\"/init\"]\n"
}