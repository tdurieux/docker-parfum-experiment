{
  "startTime": 1674217546299,
  "endTime": 1674217547844,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 2,
        "columnEnd": 90
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 162
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 2,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 2,
        "columnEnd": 102
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 2,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 2,
        "columnEnd": 70
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 2,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 5,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 5,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 5,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 7,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 6,
        "columnEnd": 67
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# For generating/running a Dockerfile image based on Python 2\n# Note: Python 2 is no longer officially supported and this Docker image will\n# probably stop working eventually...\n\nLABEL maintainer=\"David Lung (lungdm@gmail.com); Padraig Gleeson (p.gleeson@gmail.com)\"\n\nARG INTEL_SDK_VERSION=2017_7.0.0.2511_x64\n\n#COPY ./silent-intel-sdk.cfg /tmp/silent-intel-sdk.cfg\n\n\nARG USR=ow\nENV USER=$USR\n\nRUN apt-get update && \\\n  apt-get upgrade -y && \\\n  apt-get dist-upgrade -y\n\nRUN mkdir -p /etc/sudoers.d && \\\n  export uid=1000 gid=1000 && \\\n  mkdir -p /home/$USER && \\\n  echo \"$USER:x:${uid}:${gid}:$USER,,,:/home/$USER:/bin/bash\" >> /etc/passwd && \\\n  echo \"$USER:x:${uid}:\" >> /etc/group && \\\n  echo \"$USER ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/$USER && \\\n  chmod 0440 /etc/sudoers.d/$USER && \\\n  chown ${uid}:${gid} -R /home/$USER\n\n\nENV DEBIAN_FRONTEND noninteractive # TODO: change\n\n\n#RUN useradd -ms /bin/bash $USER\n\n\n################################################################################\n########     Update/install essential libraries\n\nRUN apt-get update && apt-get install -y --no-install-recommends apt-utils \\\n  wget nano htop build-essential make git automake autoconf \\\n  g++ rpm libtool libncurses5-dev zlib1g-dev bison flex lsb-core \\\n  sudo xorg openbox x11-xserver-utils \\\n  libxext-dev libncurses-dev python-dev mercurial \\\n  freeglut3-dev libglu1-mesa-dev libglew-dev python-dev python-pip python-lxml python-numpy python-scipy python-tk \\\n  kmod dkms linux-source linux-headers-generic \\\n  maven openjdk-8-jdk \\\n  python-setuptools python-yaml libnuma1 \\\n  openmpi-bin libopenmpi-dev \\\n  libgl1-mesa-glx libgl1-mesa-dri libfreetype6-dev \\\n  libpng12-dev libxft-dev python-matplotlib unzip ffmpeg xvfb tmux && rm -rf /var/lib/apt/lists/*;\n\n#RUN  sudo pip install --upgrade pip\n#RUN sudo apt-get install nvidia-opencl-dev\n\nRUN sudo usermod -a -G video $USER\n\nUSER $USER\nENV HOME /home/$USER\nWORKDIR $HOME\n\n################################################################################\n########     Install NEURON simulator\n\nRUN mkdir neuron && \\\n  cd neuron && \\\n  git clone https://github.com/nrnhines/iv.git && \\\n  git clone https://github.com/nrnhines/nrn.git && \\\n  cd iv && \\\n  git checkout 76c123b && \\\n  ./build.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=`pwd` && \\\n  make -j3 && \\\n  sudo make install && \\\n  cd ../nrn && \\\n  git checkout e0950a1 && \\\n  ./build.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=`pwd` --with-iv=$HOME/neuron/iv --with-nrnpython=/usr/bin/python --with-paranrn && \\\n  make -j3 && \\\n  sudo make install && \\\n  cd src/nrnpython && \\\n  sudo python setup.py install\n\n\n################################################################################\n########     Install pyNeuroML for handling NeuroML network model\n\nRUN pip install --no-cache-dir cachetools==0.8.0\nRUN git clone https://github.com/NeuroML/pyNeuroML.git && \\\n  cd pyNeuroML && \\\n  git checkout master  && \\\n  sudo python setup.py install\n\n\n################################################################################\n########     Install PyOpenWorm\n\nRUN pip install --no-cache-dir pyparsing==2.0.3 Jinja2==2.11.1 configparser==4.0.2 GitPython==3.0.7 gitdb2==2.0.6 numpydoc==0.9.2 Sphinx==1.8.3 future==0.18.2 setuptools==41.5.1\nRUN git clone https://github.com/openworm/PyOpenWorm.git && \\\n  cd PyOpenWorm && \\\n  git checkout ow-0.9 && \\\n  sudo apt-get install --no-install-recommends -y python-cffi && \\\n  sudo python setup.py install && \\\n  pow clone https://github.com/openworm/OpenWormData.git && rm -rf /var/lib/apt/lists/*;\n\n\n################################################################################\n########     Install c302 for building neuronal network models\n\nRUN git clone https://github.com/openworm/c302.git && \\\n  cd c302 && \\\n  git checkout ow-0.9.1 && \\\n  sudo python setup.py install\n\n\n################################################################################\n########     Install Sibernetic for the worm body model\n\nRUN git clone https://github.com/openworm/sibernetic.git && \\\n  cd sibernetic && \\\n  git checkout ow-0.9.1 # fixed to a specific branch\n\nRUN cp c302/pyopenworm.conf sibernetic/   # Temp step until PyOpenWorm can be run from any dir...\n\n\n################################################################################\n########     Set some paths//environment variables\n\nENV JNML_HOME=$HOME/jNeuroML\nENV PATH=$PATH:$JNML_HOME\nENV IV=$HOME/neuron/iv\nENV N=$HOME/neuron/nrn\nENV CPU=x86_64\nENV PATH=$PATH:$IV/$CPU/bin:$N/$CPU/bin\nENV NEURON_HOME=$N/$CPU\nENV C302_HOME=$HOME/c302/c302\nENV SIBERNETIC_HOME=$HOME/sibernetic\nENV PYTHONPATH=$PYTHONPATH:$HOME/c302:$SIBERNETIC_HOME\n\n# Not working with --chown=$USER:$USER\nCOPY ./master_openworm.py $HOME/master_openworm.py\nRUN sudo chown $USER:$USER $HOME/master_openworm.py\n\n\n################################################################################\n########     Install Intel OpenCL libraries needed for Sibernetic\n\nRUN mkdir intel-opencl-tmp && \\\n  cd intel-opencl-tmp && \\\n  mkdir intel-opencl && \\\n  wget https://registrationcenter-download.intel.com/akdlm/irc_nas/11396/SRB5.0_linux64.zip && \\\n  unzip SRB5.0_linux64.zip && \\\n  tar -C intel-opencl -Jxf intel-opencl-r5.0-63503.x86_64.tar.xz && \\\n  tar -C intel-opencl -Jxf intel-opencl-devel-r5.0-63503.x86_64.tar.xz && \\\n  tar -C intel-opencl -Jxf intel-opencl-cpu-r5.0-63503.x86_64.tar.xz && \\\n  sudo cp -R intel-opencl/* / && \\\n  sudo ldconfig && \\\n  cd .. && \\\n  sudo rm -r intel-opencl-tmp && rm intel-opencl-r5.0-63503.x86_64.tar.xz\n\nRUN sudo cp -R /opt/intel/opencl/include/CL /usr/include/ && \\\n sudo apt install --no-install-recommends -y ocl-icd-opencl-dev vim && rm -rf /var/lib/apt/lists/*;\n#sudo ln -s /opt/intel/opencl/libOpenCL.so.1 /usr/lib/libOpenCL.so\n\n\n################################################################################\n########     Build Sibernetic\n\nRUN cd sibernetic && \\\nmake clean && make all\n\n# intel i5, hd 5500, linux 4.15.0-39-generic\n# ./Release/Sibernetic -f worm -no_g device=CPU    190ms\n# ./Release/Sibernetic -f worm -no_g device=GPU    150ms (initialization takes some time)\n\n# Intel(R) Xeon(R) CPU E5-1650 v4 @ 3.60GHz, linux 4.4.0-139-generic\n# ./Release/Sibernetic -f worm -no_g device=CPU    60ms\n#\n# after installing the nvidia driver used in host:\n## wget http://us.download.nvidia.com/tesla/390.30/nvidia-diag-driver-local-repo-ubuntu1604-390.30_1.0-1_amd64.deb\n## sudo dpkg -i nvidia-diag-driver-local-repo-ubuntu1604-390.30_1.0-1_amd64.deb\n## sudo apt-key add /var/nvidia-diag-driver-local-repo-390.30/7fa2af80.pub\n## sudo apt-get update\n## sudo apt-get install -y cuda-drivers\n# ./Release/Sibernetic -f worm -no_g device=GPU    37ms\n\n\nRUN echo '\\n\\nalias cd..=\"cd ..\"\\nalias h=history\\nalias ll=\"ls -alt\"' >> ~/.bashrc\n\nRUN echo \"Built the OpenWorm Docker image!\"\n"
}