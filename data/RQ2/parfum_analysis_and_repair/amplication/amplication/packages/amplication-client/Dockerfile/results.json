{
  "startTime": 1674250213318,
  "endTime": 1674250213890,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ALPINE_VERSION=alpine3.14\nARG NODE_VERSION=16.13.1\nARG NGINX_VERSION=1.20.2-alpine\n\nFROM node:$NODE_VERSION-$ALPINE_VERSION as build\nARG NPM_VERSION=8.1.2\nENV NPM_CONFIG_LOGLEVEL=silent\nENV OPENCOLLECTIVE_HIDE=1\n\nRUN npm install --global npm@$NPM_VERSION && npm cache clean --force;\nRUN npm config set fund false\n\nWORKDIR /app\nCOPY lerna.json /app\nCOPY package*.json /app/\nRUN npm ci --production\n\nCOPY packages packages\nRUN npm run bootstrap -- --scope @amplication/client --include-dependencies\nRUN npm run build -- --scope @amplication/client --include-dependencies\n\nFROM nginx:$NGINX_VERSION as client\n\nRUN apk add --no-cache --update nodejs\n\nWORKDIR /app\n\nCOPY --from=build /app/packages/amplication-client/nginx.conf /etc/nginx/conf.d/default.conf\nCOPY --from=build /app/packages/amplication-client/build /app\nCOPY --from=build /app/packages/amplication-client/src/scripts/inject-variables.js .\nCOPY --from=build /app/packages/amplication-client/entrypoint.sh .\n\nRUN chmod 755 entrypoint.sh\n\nENTRYPOINT [ \"/app/entrypoint.sh\" ]\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}