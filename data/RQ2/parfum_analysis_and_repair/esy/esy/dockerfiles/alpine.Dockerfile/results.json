{
  "startTime": 1674254660750,
  "endTime": 1674254661201,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM esydev/esy-dev:alpine as builder\nWORKDIR /app/esy\n\n# This section useful for debugging the image/container\n# RUN env LD_LIBRARY_PATH=/usr/lib make opam-setup SUDO=''\n# RUN env LD_LIBRARY_PATH=/usr/lib make build-with-opam SUDO=''\n# RUN env LD_LIBRARY_PATH=/usr/lib make build-with-esy SUDO=''\n# RUN env LD_LIBRARY_PATH=/usr/lib make opam-cleanup SUDO=''\n# RUN env LD_LIBRARY_PATH=/usr/lib make install-esy-artifacts SUDO=''\n\n# The statements above cannot be used as is because CI disks run out of space\n# Which is why we use a single command that builds and cleans up in the same run step.\n# This is because docker caches results of multiple steps - having everything in one step\n# (that also cleans up build cache) takes lesser space.\nRUN env LD_LIBRARY_PATH=/usr/lib make new-docker SUDO=''\n\nFROM alpine:latest\n\nCOPY --from=builder /usr/local /usr/local\nCOPY --from=builder /app/_release /app/_release\nRUN apk add --no-cache nodejs npm linux-headers curl git perl-utils bash gcc g++ musl-dev make m4 patch\n"
}