{
  "startTime": 1674255080278,
  "endTime": 1674255083505,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 247,
        "lineEnd": 247,
        "columnStart": 5,
        "columnEnd": 94
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 256,
        "lineEnd": 256,
        "columnStart": 5,
        "columnEnd": 82
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 262,
        "lineEnd": 262,
        "columnStart": 2,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NOTE: you can use docker_pull.py if docker hub blocked under corp proxy\n# See:\n# + https://gist.github.com/blockspacer/893b31e61c88f6899ffd0813111b3e41#file-docker-conf-proxy-rxt\n# + https://stackoverflow.com/a/53551452\n# + https://medium.com/@saniaky/configure-docker-to-use-a-host-proxy-e88bd988c0aa\n# + https://stackoverflow.com/a/28093517\n# + https://stackoverflow.com/a/38901128\n# + https://dev.to/shriharshmishra/behind-the-corporate-proxy-2jd8\n# + https://stackoverflow.com/a/38901128\nARG UBUNTU_VERSION=18.04\nFROM        ubuntu:${UBUNTU_VERSION} as cxxctp_build_env\n\n# TODO: move to pydocker https://github.com/moby/moby/issues/16058#issuecomment-489116273\n\n# Give docker the rights to access X-server\n# sudo -E xhost +local:docker\n\n# build Dockerfile\n# sudo -E docker build --no-cache -t cpp-docker-cxxctp .\n#\n# OR under proxy:\n# sudo -E DOCKER_OPTS='--insecure-registry registry.docker.io --insecure-registry production.cloudflare.docker.com' \\\n#  docker build  \\\n#  --build-arg http_proxy=http://172.17.0.1:3128 \\\n#  --build-arg https_proxy=http://172.17.0.1:3128 \\\n#  --build-arg no_proxy=192.168.99.0/24,$(minikube ip),localhost,127.0.0.*,10.*,192.168.*,*.somecorp.ru,*.mycorp.ru \\\n#  --build-arg HTTP_PROXY=http://172.17.0.1:3128 \\\n#  --build-arg HTTPS_PROXY=http://172.17.0.1:3128 \\\n#  --build-arg NO_PROXY=192.168.99.0/24,$(minikube ip),localhost,127.0.0.*,10.*,192.168.*,*.somecorp.ru,*.mycorp.ru \\\n#  --no-cache -t cpp-docker-cxxctp .\n# OR\n# --network=host. This will make the build command use the network settings of the host.\n\n# Now let's check if our image has been created.\n# sudo -E docker images\n\n# Run a terminal in container\n# sudo -E docker run --rm -v \"$PWD\":/home/u/cxxctp -w /home/u/cxxctp  -it  -e DISPLAY         -v /tmp/.X11-unix:/tmp/.X11-unix  cpp-docker-cxxctp\n\n# NOTE: you can set up proxy when running the container\n# docker container run -e http_proxy nginx\n\n# The usual way of running this is as follows:\n# docker run -v `pwd`:`pwd` -w `pwd` -u `id -u`:`id -g` <tagged-container-name> <app> <options>\n\n# Run in container without leaving host terminal\n# sudo -E docker run -v \"$PWD\":/home/u/cxxctp -w /home/u/cxxctp cpp-docker-cxxctp CXTPL_tool -version --version\n\n# An example of how to build (with Makefile generated from cmake) inside the container\n# Mounts $PWD to /home/u/cxxctp and runs command\n# mkdir build\n# sudo -E docker run --rm -v \"$PWD\":/home/u/cxxctp -w /home/u/cxxctp/build cpp-docker-cxxctp cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..\n\n# Run resulting app in host OS:\n# ./build/<app>\n\nARG ENABLE_LLVM=\"True\"\nARG GIT_EMAIL=\"you@example.com\"\nARG GIT_USERNAME=\"Your Name\"\n# SEE: http://kefhifi.com/?p=701\nARG GIT_WITH_OPENSSL=\"\"\n# see git config --global http.sslCAInfo\nARG GIT=\"git\"\nARG GIT_CA_INFO=\"\"\nENV LC_ALL=C.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US:en \\\n    #TERM=screen \\\n    PATH=/usr/local/bin/:/usr/local/include/:/usr/local/lib/:/usr/lib/clang/6.0/include:/usr/lib/llvm-6.0/include/:$PATH \\\n    LD_LIBRARY_PATH=/usr/local/lib/:$LD_LIBRARY_PATH \\\n    GIT_AUTHOR_NAME=$GIT_USERNAME \\\n    GIT_AUTHOR_EMAIL=$GIT_EMAIL \\\n    GIT_COMMITTER_NAME=$GIT_USERNAME \\\n    GIT_COMMITTER_EMAIL=$GIT_EMAIL \\\n    WDIR=/opt\nRUN mkdir -p $WDIR\nARG APT=\"apt-get -qq --no-install-recommends\"\n# docker build --build-arg NO_SSL=\"False\" APT=\"apt-get -qq --no-install-recommends\" .\nARG NO_SSL=\"True\"\n# https://askubuntu.com/a/1013396\n# https://github.com/phusion/baseimage-docker/issues/319\n# RUN export DEBIAN_FRONTEND=noninteractive\n# Set it via ARG as this only is available during build:\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# TODO\n# better dev-env https://github.com/aya/infra/blob/318b16621c7f6d3cd33cfd481f46eed5d750b6aa/stack/ide/docker/ide/Dockerfile\n\n# https://www.peterbe.com/plog/set-ex\n# RUN set -ex\n\n\n\n# TODO\n#RUN set -ex \\\n#    && for key in \\\n#    4ED778F539E3634C779C87C6D7062848A1AB005C \\\n#    B9E2F5981AA6E0CD28160D9FF13993A75599653C \\\n#    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n#    B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n#    77984A986EBC2AA786BC0F66B01FBB92821C587A \\\n#    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n#    FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n#    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \\\n#    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n#    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n#    A48C2BEE680E841632CD4E44F07496B3EB3C1762 \\\n#    ; do \\\n#    gpg --batch --keyserver ipv4.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n#    gpg --batch --keyserver pool.sks-keyservers.net --recv-keys \"$key\" || \\\n#    gpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" || \\\n#    gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\" || \\\n#    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; \\\n#    done\n\n#                            python \\\n#                            python-dev \\\n#                            python-pip \\\n#                            python-setuptools\n\n# RUN mkdir ~/.pip && echo \"[global]\\n#index-urls:  https://pypi.douban.com, https://mirrors.aliyun.com/pypi,\\ncheckout https://www.pypi-mirrors.org/ for more available mirror servers\\nindex-url = https://pypi.douban.com/simple\\ntrusted-host = pypi.douban.com\" > ~/.pip/pip.conf\n\n# pip install pip setuptools --index-url=https://pypi.python.org/simple/ --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org\n\n# RUN mkdir -p $HOME/.config/pip/\n# # https://stackoverflow.com/a/54397762\n# RUN echo $'\n# [global]\n# timeout = 60\n# index-url = https://pypi.python.org/simple/\n# extra-index-url = http://151.101.112.223/root/pypi/+simple/\n#                 http://pypi.python.org/simple\n# trusted-host = download.zope.org\n#             pypi.python.org\n#             secondary.extra.host\n#             https://pypi.org\n#             pypi.org\n#             pypi.org:443\n#             151.101.128.223\n#             151.101.128.223:443\n#             https://pypi.python.org\n#             pypi.python.org\n#             pypi.python.org:443\n#             151.101.112.223\n#             151.101.112.223:443\n#             https://files.pythonhosted.org\n#             files.pythonhosted.org\n#             files.pythonhosted.org:443\n#             151.101.113.63\n#             151.101.113.63:443\n# ' >> $HOME/.config/pip/pip.conf\n\n# TODO https://github.com/moby/moby/issues/1799#issuecomment-489119778\n\n# RUN cat $HOME/.pip/pip.conf\n\n# pip install setuptools --upgrade\n\n# /usr/lib/python3.6/distutils/dist.py:261: UserWarning: Unknown distribution option: 'long_description_content_type'\n\nCOPY ./.ca-certificates/* /usr/local/share/ca-certificates/\n\n# NO_SSL usefull under proxy, you can disable it with --build-arg NO_SSL=\"False\"\n# Also change http-proxy.conf and ~/.docker/config.json like so https://medium.com/@saniaky/configure-docker-to-use-a-host-proxy-e88bd988c0aa\n#\n# read https://docs.docker.com/network/proxy/\n#\n# NOTE:\n#\n# (!!!) Turns off SSL verification on the whole system (!!!)\n#\nRUN set -ex \\\n  && \\\n  ldconfig \\\n  && \\\n  if [ \"$NO_SSL\" = \"True\" ]; then \\\n    echo 'NODE_TLS_REJECT_UNAUTHORIZED=0' >> ~/.bashrc \\\n    && \\\n    echo \"strict-ssl=false\" >> ~/.npmrc \\\n    && \\\n    echo \"registry=http://registry.npmjs.org/\" > ~/.npmrc \\\n    && \\\n    echo ':ssl_verify_mode: 0' >> ~/.gemrc \\\n    && \\\n    echo \"sslverify=false\" >> /etc/yum.conf \\\n    && \\\n    echo \"sslverify=false\" >> ~/.yum.conf \\\n    && \\\n    echo \"APT{Ignore {\\\"gpg-pubkey\\\"; }};\" >> /etc/apt.conf \\\n    && \\\n    echo \"Acquire::http::Verify-Peer \\\"false\\\";\" >> /etc/apt.conf \\\n    && \\\n    echo \"Acquire::https::Verify-Peer \\\"false\\\";\" >> /etc/apt.conf \\\n    && \\\n    echo \"APT{Ignore {\\\"gpg-pubkey\\\"; }};\" >> ~/.apt.conf \\\n    && \\\n    echo \"Acquire::http::Verify-Peer \\\"false\\\";\" >> ~/.apt.conf \\\n    && \\\n    echo \"Acquire::https::Verify-Peer \\\"false\\\";\" >> ~/.apt.conf \\\n    && \\\n    echo \"Acquire::http::Verify-Peer \\\"false\\\";\" >> /etc/apt/apt.conf.d/00proxy \\\n    && \\\n    echo \"Acquire::https::Verify-Peer \\\"false\\\";\" >> /etc/apt/apt.conf.d/00proxy \\\n    && \\\n    echo \"check-certificate = off\" >> /etc/.wgetrc \\\n    && \\\n    echo \"check-certificate = off\" >> ~/.wgetrc \\\n    && \\\n    echo \"insecure\" >> /etc/.curlrc \\\n    && \\\n    echo \"insecure\" >> ~/.curlrc \\\n    ; \\\n  fi \\\n  && \\\n  $APT update \\\n  && \\\n  $APT install -y --reinstall software-properties-common \\\n  && \\\n  $APT install -y gnupg2 wget \\\n  && \\\n  wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key --no-check-certificate | apt-key add - \\\n  # See `How to add an Ubuntu apt-get key from behind a firewall` \\\n  # + http://redcrackle.com/blog/how-add-ubuntu-apt-get-key-behind-firewall \\\n  # NOTE: need to set at least empty http-proxy \\\n  # https://github.com/EtiennePerot/parcimonie.sh/issues/15 \\\n  && \\\n  export GNUPGHOME=\"$(mktemp -d)\" \\\n  && \\\n  (mkdir ~/.gnupg || true) \\\n  && \\\n  echo \"keyserver-options auto-key-retrieve\" >> ~/.gnupg/gpg.conf \\\n  && \\\n  wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key --no-check-certificate | apt-key add - \\\n  && \\\n  # Try more keyservers to fix unstable builds \\\n  # see https://unix.stackexchange.com/a/361220 \\\n  keyservers=\"hkp://keyserver.ubuntu.com:80\"\\ \"keyserver.ubuntu.com:80\"\\ \"pool.sks-keyservers.net\"\\ \"keyserver.ubuntu.com\"\\ \"ipv4.pool.sks-keyservers.net\"\\ \"Zpool.sks-keyservers.net\"\\ \"keyserver.pgp.com\"\\ \"ha.pool.sks-keyservers.net\"\\ \"hkp://p80.pool.sks-keyservers.net:80\"\\ \"pgp.mit.edu\" \\\n  && \\\n  keys=94558F59\\ 1E9377A2BA9EF27F\\ 2EA8F35793D8809A \\\n  && \\\n  if [ ! -z \"$http_proxy\" ]; then \\\n    echo 'WARNING: GPG SSL CHECKS DISABLED! SEE http_proxy IN DOCKERFILE' \\\n    && \\\n    for key in $keys; do \\\n    for server in $keyservers; do \\\n    echo \"Fetching GPG key ${key} from ${server}\" \\\n    && \\\n    ( gpg --batch --keyserver \"$server\" --keyserver-options http-proxy=$http_proxy --recv-keys \"${key}\" || true) \\\n    ; done \\\n    ; done \\\n    ; \\\n  else \\\n    for key in $keys; do \\\n    for server in $keyservers; do \\\n    echo \"Fetching GPG key ${key} from ${server}\" \\\n    && \\\n    ( gpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"${key}\" || true) \\\n    ; done \\\n    ; done \\\n    ; \\\n  fi \\\n  && \\\n  gpg --batch --list-keys \\\n  && \\\n  (apt-key adv --keyserver-options http-proxy=$http_proxy --fetch-keys http://llvm.org/apt/llvm-snapshot.gpg.key || true) \\\n  && \\\n  echo \"added llvm-snapshot.gpg.key\" \\\n  #&& \\\n  #apt-add-repository -y \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu $(lsb_release -sc) main\" \\\n  && \\\n  apt-add-repository -y \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-5.0 main\" \\\n  && \\\n  apt-add-repository -y \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main\" \\\n  && \\\n  apt-add-repository -y \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main\" \\\n  && \\\n  apt-add-repository -y \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main\" \\\n  && \\\n  echo \"added llvm-toolchain repository\" \\\n  && \\\n  ldconfig \\\n  && \\\n  $APT update \\\n  && \\\n  $APT install -y \\\n                    ca-certificates \\\n                    software-properties-common \\\n                    #git \\\n                    wget \\\n                    locales \\\n                    make \\\n                    autoconf automake autotools-dev libtool \\\n                    curl \\\n                    vim \\\n  && \\\n  update-ca-certificates --fresh \\\n  && \\\n  $APT install -y build-essential \\\n  && \\\n    if [ \"$ENABLE_LLVM\" = \"True\" ]; then \\\n    $APT install -y \\\n                    clang-6.0 libstdc++6 \\\n    ; \\\n    fi \\\n  && \\\n  $APT install -y \\\n                    libboost-dev \\\n                    libevent-dev \\\n                    libdouble-conversion-dev \\\n                    libiberty-dev \\\n                    liblz4-dev \\\n                    liblzma-dev \\\n                    libsnappy-dev \\\n                    zlib1g-dev \\\n                    libboost-all-dev \\\n                    #\n                    #libgoogle-glog-dev \\\n                    #libgflags-dev \\\n                    #libgtest-dev \\\n                    #libzstd-dev \\\n                    #libjemalloc-dev \\\n                    openmpi-bin \\\n                    openmpi-common \\\n                    libopenmpi-dev \\\n                    binutils-dev \\\n                    libssl-dev \\\n                    pkg-config \\\n                    autoconf-archive \\\n                    bison \\\n                    flex \\\n                    gperf \\\n                    joe \\\n                    libcap-dev \\\n                    libkrb5-dev \\\n                    libpcre3-dev \\\n                    libpthread-stubs0-dev \\\n                    libnuma-dev \\\n                    libsasl2-dev \\\n                    libsqlite3-dev \\\n                    libtool \\\n                    netcat-openbsd \\\n                    unzip \\\n                    gcc \\\n                    g++ \\\n                    gnutls-bin \\\n                    openssl \\\n                    fakeroot \\\n                    dpkg-dev \\\n                    libcurl4-openssl-dev \\\n  && \\\n  $APT install -y mesa-utils \\\n                            libegl1-mesa-dev \\\n                            libgles2-mesa-dev \\\n                            libglu1-mesa-dev \\\n                            dbus-x11 \\\n                            libx11-dev \\\n                            xorg-dev \\\n                            libssl-dev \\\n                            python3 \\\n                            python3-pip \\\n                            python3-dev \\\n                            python3-setuptools \\\n  # For convenience, alias (but don't sym-link) python & pip to python3 & pip3 as recommended in: \\\n  # http://askubuntu.com/questions/351318/changing-symlink-python-to-python3-causes-problems \\\n  && \\\n  if [ \"$GIT_WITH_OPENSSL\" = \"True\" ]; then \\\n    echo 'building git from source, see ARG GIT_WITH_OPENSSL' \\\n    && \\\n    # Ubuntu's default git package is built with broken gnutls. Rebuild git with openssl.\n    $APT update \\\n    #&& \\\n    #add-apt-repository ppa:git-core/ppa  \\\n    #apt-add-repository \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu $(lsb_release -sc) main\" \\\n    #&& \\\n    #apt-key add 1E9377A2BA9EF27F \\\n    #&& \\\n    #printf \"deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu ${CODE_NAME} main\\n\" >> /etc/apt/sources.list.d/git-core-ubuntu-ppa-bionic.list \\\n    && \\\n    $APT install -y --no-install-recommends \\\n       software-properties-common \\\n       fakeroot ca-certificates tar gzip zip \\\n       autoconf automake bzip2 file g++ gcc \\\n       #imagemagick libbz2-dev libc6-dev libcurl4-openssl-dev \\\n       #libglib2.0-dev libevent-dev \\\n       #libdb-dev  libffi-dev libgeoip-dev libjpeg-dev libkrb5-dev \\\n       #liblzma-dev libncurses-dev \\\n       #libmagickcore-dev libmagickwand-dev libmysqlclient-dev libpng-dev \\\n       libssl-dev libtool libxslt-dev \\\n       #libpq-dev libreadline-dev libsqlite3-dev libwebp-dev libxml2-dev \\\n       #libyaml-dev zlib1g-dev \\\n       make patch xz-utils unzip curl  \\\n    && \\\n    sed -i -- 's/#deb-src/deb-src/g' /etc/apt/sources.list \\\n    && \\\n    sed -i -- 's/# deb-src/deb-src/g' /etc/apt/sources.list \\\n    && \\\n    $APT update \\\n    && \\\n    $APT install -y gnutls-bin openssl \\\n    && \\\n    $APT install -y build-essential fakeroot dpkg-dev -y \\\n    #&& \\\n    #($APT remove -y git || true ) \\\n    && \\\n    $APT build-dep git -y \\\n    && \\\n    # git build deps\n    $APT install -y libcurl4-openssl-dev liberror-perl git-man -y \\\n    && \\\n    mkdir source-git \\\n    && \\\n    cd source-git/ \\\n    && \\\n    $APT source git \\\n    && \\\n    cd git-2.*.*/ \\\n    && \\\n    sed -i -- 's/libcurl4-gnutls-dev/libcurl4-openssl-dev/' ./debian/control \\\n    && \\\n    sed -i -- '/TEST\\s*=\\s*test/d' ./debian/rules \\\n    && \\\n    dpkg-buildpackage -rfakeroot -b -uc -us \\\n    && \\\n    dpkg -i ../git_*ubuntu*.deb \\\n    ; \\\n  else \\\n    $APT install -y git \\\n    ; \\\n  fi \\\n  && \\\n  if [ \"$NO_SSL\" = \"True\" ]; then \\\n    echo 'WARNING: GIT SSL CHECKS DISABLED! SEE NO_SSL FLAG IN DOCKERFILE' \\\n    && \\\n    ($GIT config --global http.sslVerify false || true) \\\n    && \\\n    ($GIT config --global https.sslVerify false || true) \\\n    && \\\n    ($GIT config --global http.postBuffer 1048576000 || true) \\\n    && \\\n    # solves 'Connection time out' on server in company domain. \\\n    ($GIT config --global url.\"https://github.com\".insteadOf git://github.com || true) \\\n    && \\\n    export GIT_SSL_NO_VERIFY=true \\\n    ; \\\n  fi \\\n  && \\\n  if [ \"$GIT_CA_INFO\" != \"\" ]; then \\\n    echo 'WARNING: GIT_CA_INFO CHANGED! SEE GIT_CA_INFO FLAG IN DOCKERFILE' \\\n    && \\\n    ($GIT config --global http.sslCAInfo $GIT_CA_INFO || true) \\\n    && \\\n    ($GIT config --global http.sslCAPath $GIT_CA_INFO || true) \\\n    ; \\\n  fi \\\n  && \\\n  echo \"alias python='python3'\" >> /root/.bash_aliases \\\n  && \\\n  echo \"alias pip='pip3'\" >> /root/.bash_aliases \\\n  && \\\n  $APT install -y nano \\\n                            mc \\\n                            bash \\\n  && \\\n  mkdir -p $HOME/.pip/ \\\n  && \\\n  echo \"[global]\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"timeout = 60\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"index-url = https://pypi.python.org/simple\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"extra-index-url = http://151.101.112.223/root/pypi/+simple\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"                  http://pypi.python.org/simple\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"trusted-host = download.zope.org\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               pypi.python.org\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               secondary.extra.host\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               https://pypi.org\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               pypi.org\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               pypi.org:443\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               151.101.128.223\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               151.101.128.223:443\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               https://pypi.python.org\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               pypi.python.org\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               pypi.python.org:443\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               151.101.112.223\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               151.101.112.223:443\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               https://files.pythonhosted.org\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               files.pythonhosted.org\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               files.pythonhosted.org:443\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               151.101.113.63\" >> $HOME/.pip/pip.conf \\\n  && \\\n  echo \"               151.101.113.63:443\" >> $HOME/.pip/pip.conf \\\n  && \\\n  $APT clean \\\n  && \\\n  $APT autoremove \\\n  && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n  && \\\n  cd $WDIR \\\n  && \\\n  pip3 install --no-cache-dir --index-url=https://pypi.python.org/simple/ --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org wheel \\\n  && \\\n  pip3 install --no-cache-dir --index-url=https://pypi.python.org/simple/ --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org virtualenv \\\n  && \\\n  pip3 install --no-cache-dir --index-url=https://pypi.python.org/simple/ --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org conan \\\n  && \\\n  pip3 install --no-cache-dir --index-url=https://pypi.python.org/simple/ --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org conan_package_tools \\\n  && \\\n  conan remote update conan-center https://conan.bintray.com False \\\n  # TODO: use conan profile new https://github.com/conan-io/conan/issues/1541#issuecomment-321235829 \\\n  && \\\n  mkdir -p $HOME/.conan/profiles/ \\\n  && \\\n  echo \"[settings]\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"os_build=Linux\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"os=Linux\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"arch_build=x86_64\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"arch=x86_64\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"compiler=clang\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"compiler.version=6.0\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"compiler.libcxx=libstdc++11\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"[env]\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"CC=/usr/bin/clang-6.0\" >> ~/.conan/profiles/clang \\\n  && \\\n  echo \"CXX=/usr/bin/clang++-6.0\" >> ~/.conan/profiles/clang \\\n  && \\\n  # TODO: use conan profile new https://github.com/conan-io/conan/issues/1541#issuecomment-321235829 \\\n  mkdir -p $HOME/.conan/profiles/ \\\n  && \\\n  echo \"[settings]\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"os_build=Linux\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"os=Linux\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"arch_build=x86_64\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"arch=x86_64\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"compiler=gcc\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"compiler.version=7\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"compiler.libcxx=libstdc++11\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"[env]\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"CC=/usr/bin/gcc\" >> ~/.conan/profiles/gcc \\\n  && \\\n  echo \"CXX=/usr/bin/g++\" >> ~/.conan/profiles/gcc\n\nWORKDIR $WDIR\n\n# allows individual sections to be run by doing: docker build --target cxxctp_tool ...\nFROM        cxxctp_build_env as cxxctp_tool\nARG GIT_EMAIL=\"you@example.com\"\nARG GIT_USERNAME=\"Your Name\"\nARG APT=\"apt-get -qq --no-install-recommends\"\nARG GIT=\"git\"\nARG GIT_CA_INFO=\"\"\nARG NO_SSL=\"True\"\n# NOTE: UPPERCASE (TRUE or FALSE)\nARG ENABLE_CLING=\"TRUE\"\nENV LC_ALL=C.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US:en \\\n    #TERM=screen \\\n    PATH=/usr/local/bin/:/usr/local/include/:/usr/local/lib/:/usr/lib/clang/6.0/include:/usr/lib/llvm-6.0/include/:$PATH \\\n    LD_LIBRARY_PATH=/usr/local/lib/:$LD_LIBRARY_PATH \\\n    GIT_AUTHOR_NAME=$GIT_USERNAME \\\n    GIT_AUTHOR_EMAIL=$GIT_EMAIL \\\n    GIT_COMMITTER_NAME=$GIT_USERNAME \\\n    GIT_COMMITTER_EMAIL=$GIT_EMAIL \\\n    WDIR=/opt\nRUN mkdir -p $WDIR\n# https://askubuntu.com/a/1013396\n# https://github.com/phusion/baseimage-docker/issues/319\n# RUN export DEBIAN_FRONTEND=noninteractive\n# Set it via ARG as this only is available during build:\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\nRUN ldconfig\n\n# NOTE: create folder `.ca-certificates` with custom certs\n# switch to root\n#USER root\nCOPY ./.ca-certificates/* /usr/local/share/ca-certificates/\nRUN update-ca-certificates --fresh\n# switch back to custom user\n#USER docker\n\nWORKDIR $WDIR\n\n# NOTE: ADD invalidate the cache for the copy\nADD . $WDIR/CXXCTP\n\n# RUN git clone --depth=1 --recurse-submodules --single-branch --branch=master https://github.com/blockspacer/CXXCTP.git\n\nWORKDIR $WDIR/CXXCTP\n\n\n# TODO https://stackoverflow.com/a/40465312\n# RUN git submodule deinit -f . || true\n#RUN git pull --recurse-submodules || true\n#RUN git submodule sync --recursive || true\n#RUN git fetch --recurse-submodules || true\n#RUN git submodule update --init --recursive --depth 5 || true\n#RUN git submodule update --force --recursive --init --remote || true\n\n# CMake\n#RUN /bin/bash -c \"source $WDIR/CXXCTP/scripts/install_cmake.sh\"\n#RUN cmake --version\n\n# cling\n# NOTE: run from scripts folder!\n\n#RUN set -ex \\\n#  && \\\n#  /bin/bash -c \"source $WDIR/CXXCTP/scripts/install_cmake.sh\" \\\n#  && \\\n#  /bin/bash -c \"source $WDIR/CXXCTP/scripts/install_cling.sh\"\n\n# NOTE: need libunwind with -fPIC (POSITION_INDEPENDENT_CODE) support\n#RUN set -ex \\\n#  && \\\n#  /bin/bash -c \"source $WDIR/CXXCTP/scripts/install_libunwind.sh\"\n\n#RUN set -ex \\\n#  && \\\n#  /bin/bash -c \"source $WDIR/CXXCTP/submodules/CXTPL/scripts/install_g3log.sh\" \\\n#  && \\\n#  # gtest \\\n#  /bin/bash -c \"source $WDIR/CXXCTP/submodules/CXTPL/scripts/install_gtest.sh\" \\\n#  && \\\n#  # gflags \\\n#  /bin/bash -c \"source $WDIR/CXXCTP/submodules/CXTPL/scripts/install_gflags.sh\" \\\n#  && \\\n#  # folly \\\n#  # NOTE: we patched folly for clang support https://github.com/facebook/folly/issues/976 \\\n#  /bin/bash -c \"source $WDIR/CXXCTP/submodules/CXTPL/scripts/install_folly.sh\"\n\nRUN set -ex \\\n  && \\\n  if [ \"$NO_SSL\" = \"True\" ]; then \\\n    echo 'WARNING: GIT SSL CHECKS DISABLED! SEE NO_SSL FLAG IN DOCKERFILE' \\\n    && \\\n    ($GIT config --global http.sslVerify false || true) \\\n    && \\\n    ($GIT config --global https.sslVerify false || true) \\\n    && \\\n    ($GIT config --global http.postBuffer 1048576000 || true) \\\n    && \\\n    # solves 'Connection time out' on server in company domain. \\\n    ($GIT config --global url.\"https://github.com\".insteadOf git://github.com || true) \\\n    && \\\n    export GIT_SSL_NO_VERIFY=true \\\n    ; \\\n  fi \\\n  && \\\n  if [ \"$GIT_CA_INFO\" != \"\" ]; then \\\n    echo 'WARNING: GIT_CA_INFO CHANGED! SEE GIT_CA_INFO FLAG IN DOCKERFILE' \\\n    && \\\n    ($GIT config --global http.sslCAInfo $GIT_CA_INFO || true) \\\n    && \\\n    ($GIT config --global http.sslCAPath $GIT_CA_INFO || true) \\\n    ; \\\n  fi \\\n  && \\\n  # need some git config to apply git patch\n  git config --global user.email \"$GIT_EMAIL\" \\\n  && \\\n  git config --global user.name \"$GIT_USERNAME\" \\\n  && \\\n  (git submodule update --init --recursive --depth 50 --progress || true) \\\n  && \\\n  # Uninstall the default version provided by Ubuntu package manager, so we can install custom one\n  ($APT purge -y cmake || true) \\\n  && \\\n  cd $WDIR/CXXCTP/scripts \\\n  && \\\n  chmod +x $WDIR/CXXCTP/scripts/install_cmake.sh \\\n  && \\\n  chmod +x $WDIR/CXXCTP/scripts/install_cling.sh \\\n  && \\\n  chmod +x $WDIR/CXXCTP/scripts/install_libunwind.sh \\\n  && \\\n  chmod +x $WDIR/CXXCTP/submodules/CXTPL/scripts/install_g3log.sh \\\n  && \\\n  chmod +x $WDIR/CXXCTP/submodules/CXTPL/scripts/install_gtest.sh \\\n  && \\\n  chmod +x $WDIR/CXXCTP/submodules/CXTPL/scripts/install_gflags.sh \\\n  && \\\n  chmod +x $WDIR/CXXCTP/submodules/CXTPL/scripts/install_folly.sh \\\n  && \\\n  bash $WDIR/CXXCTP/scripts/install_cmake.sh \\\n  && \\\n  if [ \"$ENABLE_CLING\" = \"TRUE\" ]; then \\\n    cd $WDIR/CXXCTP/scripts \\\n    && \\\n    bash install_cling.sh \\\n    && \\\n    ls $WDIR/CXXCTP/cling-build \\\n    && \\\n    ls $WDIR/CXXCTP/cling-build/build \\\n    && \\\n    ls $WDIR/CXXCTP/cling-build/build/lib \\\n    && \\\n    # must exist\n    file $WDIR/CXXCTP/cling-build/build/lib/cmake/llvm/LLVMConfig.cmake \\\n    ; \\\n  fi \\\n  && \\\n  cd $WDIR/CXXCTP \\\n  #&& \\\n  #bash $WDIR/CXXCTP/scripts/install_libunwind.sh \\\n  && \\\n  cd $WDIR/CXXCTP/submodules/CXTPL \\\n  #&& \\\n  #bash $WDIR/CXXCTP/submodules/CXTPL/scripts/install_g3log.sh \\\n  #&& \\\n  #bash $WDIR/CXXCTP/submodules/CXTPL/scripts/install_gtest.sh \\\n  #&& \\\n  #bash $WDIR/CXXCTP/submodules/CXTPL/scripts/install_gflags.sh \\\n  #&& \\\n  #bash $WDIR/CXXCTP/submodules/CXTPL/scripts/install_folly.sh\n  && \\\n  export CC=clang-6.0 \\\n  && \\\n  export CXX=clang++-6.0 \\\n  #&& \\\n  #cmake -E remove_directory build \\\n  #&& \\\n  #cmake -E remove_directory *-build \\\n  && \\\n  # create build dir \\\n  cmake -E make_directory build \\\n  && \\\n  mkdir -p ~/.tmp \\\n  && \\\n  cd ~/.tmp \\\n  && \\\n  #type_safe\n  conan remote add Manu343726 https://api.bintray.com/conan/manu343726/conan-packages False \\\n  && \\\n  git clone http://github.com/foonathan/type_safe.git -b v0.2.1 \\\n  && \\\n  cd type_safe \\\n  && \\\n  # NOTE: change `build_type=Debug` to `build_type=Release` in production\n  CONAN_REVISIONS_ENABLED=1 \\\n      CONAN_VERBOSE_TRACEBACK=1 \\\n      CONAN_PRINT_RUN_COMMANDS=1 \\\n      CONAN_LOGGING_LEVEL=10 \\\n      GIT_SSL_NO_VERIFY=true \\\n      conan create . conan/stable -s build_type=Debug --profile clang --build missing \\\n  && \\\n  cd ~/.tmp \\\n  && \\\n  #corrade\n  # NOTE: change `build_type=Debug` to `build_type=Release` in production\n  git clone http://github.com/mosra/corrade.git  \\\n  && \\\n  cd corrade \\\n  && \\\n  CONAN_REVISIONS_ENABLED=1 \\\n      CONAN_VERBOSE_TRACEBACK=1 \\\n      CONAN_PRINT_RUN_COMMANDS=1 \\\n      CONAN_LOGGING_LEVEL=10 \\\n      GIT_SSL_NO_VERIFY=true \\\n      conan create . magnum/stable -s build_type=Debug --profile clang --build missing -tf package/conan/test_package \\\n  && \\\n  rm -rf ~/.tmp \\\n  && \\\n  cd $WDIR/CXXCTP/submodules/CXTPL \\\n  && \\\n  cmake -E time conan config install conan/remotes_disabled_ssl/ \\\n  && \\\n  cmake -DEXTRA_CONAN_OPTS=\"--profile;clang;-s;build_type=Debug;--build;missing\" -P tools/buildConanThirdparty.cmake \\\n  && \\\n  # configure \\\n  cmake -E chdir build conan install --build=missing --profile clang .. \\\n  && \\\n  cmake -E chdir build cmake -E time cmake -DCLING_DIR=\"$WDIR/CXXCTP/cling-build/\" -DCONAN_AUTO_INSTALL=OFF -DBUILD_EXAMPLES=FALSE -DENABLE_CLING=FALSE -DCMAKE_BUILD_TYPE=Debug .. \\\n  && \\\n  # build \\\n  cmake -E chdir build cmake -E time cmake --build . -- -j6 \\\n  && \\\n  # install lib and CXTPL_tool \\\n  cmake -E chdir build make install \\\n  #&& \\\n  #cmake -E remove_directory build \\\n  #&& \\\n  # \\\n  #cmake -E remove_directory *-build \\\n  && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n  && \\\n  cd $WDIR/CXXCTP \\\n  && \\\n  export CC=clang-6.0 \\\n  && \\\n  export CXX=clang++-6.0 \\\n  #&& \\\n  #cmake -E remove_directory build \\\n  #&& \\\n  #cmake -E remove_directory *-build \\\n  && \\\n  cmake -E make_directory build \\\n  && \\\n  cmake -E time conan config install conan/remotes_disabled_ssl/ \\\n  && \\\n  cmake -DEXTRA_CONAN_OPTS=\"--profile;clang;-s;build_type=Debug;--build;missing\" -P tools/buildConanThirdparty.cmake \\\n  && \\\n  cmake -E make_directory resources/cxtpl/generated \\\n  && \\\n  cmake -E chdir build conan install --build=missing --profile clang .. \\\n  && \\\n  cmake -E chdir build cmake -E time cmake -DCLING_DIR=\"$WDIR/CXXCTP/cling-build/\" -DCONAN_AUTO_INSTALL=OFF -DENABLE_CLING=$ENABLE_CLING -DBUILD_SHARED_LIBS=TRUE -DALLOW_PER_PROJECT_CTP_SCRIPTS=TRUE RUN -DBUILD_EXAMPLES=FALSE -DBUNDLE_EXAMPLE_SCRIPTS=FALSE -DCMAKE_BUILD_TYPE=Debug -DENABLE_CXXCTP=TRUE .. \\\n  && \\\n  cmake -E chdir build cmake -E time cmake --build . -- -j6 \\\n  #  you can install CXXCTP_tool: \\\n  && \\\n  cmake -E chdir build make install \\\n  #  check supported plugins \\\n  && \\\n  /usr/local/bin/CXXCTP_tool --plugins \\\n  #&& \\\n  #cmake -E remove_directory build \\\n  #&& \\\n  #cmake -E remove_directory *-build \\\n  && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/* /build/* \\\n  # remove unused apps after install\n  && \\\n  rm -rf $WDIR/CXXCTP \\\n  && \\\n  $APT remove -y \\\n                    git \\\n                    wget \\\n  && \\\n  $APT clean \\\n  && \\\n  $APT autoremove \\\n  && \\\n  mkdir -p /etc/ssh/ && echo ClientAliveInterval 60 >> /etc/ssh/sshd_config \\\n  && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/* /build/* \\\n  && \\\n  ($GIT config --global --unset http.proxyAuthMethod || true) \\\n  && \\\n  ($GIT config --global --unset http.proxy || true) \\\n  && \\\n  ($GIT config --global --unset https.proxy || true) \\\n  && \\\n  mkdir -p /etc/ssh/ && echo ClientAliveInterval 60 >> /etc/ssh/sshd_config\n\n#RUN service ssh restart\n\n#ENV DEBIAN_FRONTEND teletype\n\n# default\nFROM        cxxctp_tool\nWORKDIR $WDIR\nENTRYPOINT [\"/bin/bash\"]\nCMD [\"bash\"]\n"
}