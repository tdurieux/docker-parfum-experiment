{
  "startTime": 1674219898806,
  "endTime": 1674219900045,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GO_VERSION=1.17\nARG RUST_TOOLCHAIN=1.60.0\n\nFROM docker.io/golang:${GO_VERSION}-bullseye as go\nARG GOLANGCI_LINT_VERSION=v1.44.2\nRUN for p in \\\n    github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest \\\n    github.com/ramya-rao-a/go-outline@latest \\\n    github.com/cweill/gotests/gotests@latest \\\n    github.com/fatih/gomodifytags@latest \\\n    github.com/josharian/impl@latest \\\n    github.com/haya14busa/goplay/cmd/goplay@latest \\\n    github.com/go-delve/delve/cmd/dlv@latest \\\n    github.com/golangci/golangci-lint/cmd/golangci-lint@${GOLANGCI_LINT_VERSION} \\\n    golang.org/x/tools/gopls@latest \\\n    google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 \\\n    google.golang.org/protobuf/cmd/protoc-gen-go@v1.28 \\\n    ; do go install \"$p\" ; done\n\nFROM docker.io/golang:${GO_VERSION}-bullseye as cargo-deny\nARG CARGO_DENY_VERSION=0.12.1\nCOPY bin/scurl /usr/local/bin/scurl\nRUN scurl \"https://github.com/EmbarkStudios/cargo-deny/releases/download/${CARGO_DENY_VERSION}/cargo-deny-${CARGO_DENY_VERSION}-x86_64-unknown-linux-musl.tar.gz\" \\\n    | tar zvxf - --strip-components=1 -C /usr/local/bin \"cargo-deny-${CARGO_DENY_VERSION}-x86_64-unknown-linux-musl/cargo-deny\"\n\nFROM docker.io/golang:${GO_VERSION}-bullseye as yq\nARG YQ_VERSION=v4.25.1\nCOPY bin/scurl /usr/local/bin/scurl\nRUN scurl -vo /usr/local/bin/yq \"https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64\" \\\n    && chmod +x /usr/local/bin/yq\n\nFROM docker.io/golang:${GO_VERSION}-bullseye as kubectl\nARG KUBECTL_VERSION=v1.24.2\nCOPY bin/scurl /usr/local/bin/scurl\nRUN scurl -vo /usr/local/bin/kubectl \"https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl\" \\\n    && chmod 755 /usr/local/bin/kubectl\n\nFROM docker.io/golang:${GO_VERSION}-bullseye as k3d\nARG K3D_VERSION=v5.4.3\nCOPY bin/scurl /usr/local/bin/scurl\nRUN scurl -v https://raw.githubusercontent.com/rancher/k3d/$K3D_VERSION/install.sh \\\n    | USE_SUDO=false K3D_INSTALL_DIR=/usr/local/bin bash\n\nFROM docker.io/golang:${GO_VERSION}-bullseye as just\nARG JUST_VERSION=1.1.3\nRUN curl --proto '=https' --tlsv1.3 -vsSfL \"https://github.com/casey/just/releases/download/${JUST_VERSION}/just-${JUST_VERSION}-x86_64-unknown-linux-musl.tar.gz\" \\\n    | tar zvxf - -C /usr/local/bin just\n\nFROM docker.io/golang:${GO_VERSION}-bullseye as nextest\nARG NEXTEST_VERSION=0.9.14\nRUN curl --proto '=https' --tlsv1.3 -vsSfL \"https://github.com/nextest-rs/nextest/releases/download/cargo-nextest-${NEXTEST_VERSION}/cargo-nextest-${NEXTEST_VERSION}-x86_64-unknown-linux-gnu.tar.gz\" \\\n    | tar zvxf - -C /usr/local/bin cargo-nextest\n\nFROM docker.io/golang:${GO_VERSION}-bullseye as actionlint\nARG ACTION_LINT_VERSION=1.6.15\nCOPY bin/scurl /usr/local/bin/scurl\nRUN scurl -v \"https://raw.githubusercontent.com/rhysd/actionlint/v${ACTION_LINT_VERSION}/scripts/download-actionlint.bash\" \\\n  | bash -s -- \"${ACTION_LINT_VERSION}\" /usr/local/bin\n\nFROM docker.io/rust:${RUST_TOOLCHAIN}-bullseye as protoc\nARG PROTOC_VERSION=v3.20.1\nWORKDIR /tmp\nRUN arch=\"$(uname -m)\" ; \\\n    version=\"$PROTOC_VERSION\" ; \\\n    curl --proto '=https' --tlsv1.3 -vsSfLo protoc.zip  \"https://github.com/google/protobuf/releases/download/$version/protoc-${version#v}-linux-$arch.zip\" && \\\n    unzip protoc.zip bin/protoc && \\\n    chmod 755 bin/protoc\n\nFROM docker.io/rust:${RUST_TOOLCHAIN}-bullseye as rust\nRUN rustup component add rustfmt clippy rls\n\n##\n## Main container configuration\n##\n\nFROM docker.io/golang:${GO_VERSION}-bullseye\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt update && \\\n    apt upgrade -y --autoremove && \\\n    apt install --no-install-recommends -y \\\n        clang \\\n        cmake \\\n        jq \\\n        libssl-dev \\\n        lldb \\\n        locales \\\n        lsb-release \\\n        npm \\\n        shellcheck \\\n        sudo \\\n        time \\\n        unzip && \\\n    rm -rf /var/lib/apt/lists/*\nRUN npm install markdownlint-cli2@0.4.0 --global && npm cache clean --force;\n\nRUN sed -i 's/^# *\\(en_US.UTF-8\\)/\\1/' /etc/locale.gen && locale-gen\n\nARG USER=code\nARG USER_UID=1000\nARG USER_GID=1000\nRUN groupadd --gid=$USER_GID $USER \\\n    && useradd --uid=$USER_UID --gid=$USER_GID -m $USER \\\n    && echo \"$USER ALL=(root) NOPASSWD:ALL\" >/etc/sudoers.d/$USER \\\n    && chmod 0440 /etc/sudoers.d/$USER\n\n# Install a Docker client that uses the host's Docker daemon\nARG USE_MOBY=false\nENV DOCKER_BUILDKIT=1\nCOPY bin/scurl /usr/local/bin/scurl\nRUN scurl -v https://raw.githubusercontent.com/microsoft/vscode-dev-containers/main/script-library/docker-debian.sh \\\n    | bash -s --  true /var/run/docker-host.sock /var/run/docker.sock \"${USER}\" \"${USE_MOBY}\" latest\n\nRUN (echo \"LC_ALL=en_US.UTF-8\" \\\n    && echo \"LANGUAGE=en_US.UTF-8\") >/etc/default/locale\n\nUSER $USER\nENV USER=$USER\nENV HOME=/home/$USER\n\nCOPY --from=go /go/bin /go/bin\nCOPY --from=cargo-deny /usr/local/bin/cargo-deny /usr/local/bin/cargo-deny\nCOPY --from=k3d /usr/local/bin/k3d /usr/local/bin/k3d\nCOPY --from=kubectl /usr/local/bin/kubectl /usr/local/bin/kubectl\nCOPY --from=yq /usr/local/bin/yq /usr/local/bin/yq\nCOPY --from=just /usr/local/bin/just /usr/local/bin/just\nCOPY --from=nextest /usr/local/bin/cargo-nextest /usr/local/bin/cargo-nextest\nCOPY --from=actionlint /usr/local/bin/actionlint /usr/local/bin/actionlint\n\nCOPY --from=protoc /tmp/bin/protoc /usr/local/bin/protoc\nENV PROTOC_NO_VENDOR=1\nENV PROTOC=/usr/local/bin/protoc\n\nCOPY --from=rust /usr/local/cargo /usr/local/cargo\nCOPY --from=rust /usr/local/rustup /usr/local/rustup\nENV CARGO_HOME=/usr/local/cargo\nENV RUSTUP_HOME=/usr/local/rustup\nRUN sudo chmod 777 $CARGO_HOME $RUSTUP_HOME\nENV PATH=/usr/local/cargo/bin:$PATH\n\nRUN scurl -v https://run.linkerd.io/install-edge | sh\nENV PATH=$HOME/.linkerd2/bin:$PATH\n\nENTRYPOINT [\"/usr/local/share/docker-init.sh\"]\nCMD [\"sleep\", \"infinity\"]\n"
}