{
  "startTime": 1674246267623,
  "endTime": 1674246269150,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 64,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM linuxserver/openssh-server\n\n# -------------------------------------\n# Erlang (23.0) alpine Dockerfile\n# -------------------------------------\nENV OTP_VERSION=\"23.1\" \\\n    REBAR3_VERSION=\"3.14.1\"\n\nLABEL org.opencontainers.image.version=$OTP_VERSION\n\nRUN set -xe \\\n\t&& OTP_DOWNLOAD_URL=\"https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz\" \\\n\t&& OTP_DOWNLOAD_SHA256=\"3591903503ea70be3ef1e42abc7a3e1f8af90f2c8989506bf9832175f091e6e5\" \\\n\t&& REBAR3_DOWNLOAD_SHA256=\"b01275b6cbdb354dcf9ed686fce2b5f9dfdd58972ded9e970e31b9215a8521f2\" \\\n\t&& apk add --no-cache --virtual .fetch-deps \\\n\t\tcurl \\\n\t\tca-certificates \\\n\t&& curl -fSL -o otp-src.tar.gz \"$OTP_DOWNLOAD_URL\" \\\n\t&& echo \"$OTP_DOWNLOAD_SHA256  otp-src.tar.gz\" | sha256sum -c - \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tdpkg-dev dpkg \\\n\t\tgcc \\\n\t\tg++ \\\n\t\tlibc-dev \\\n\t\tlinux-headers \\\n\t\tmake \\\n\t\tautoconf \\\n\t\tncurses-dev \\\n\t\topenssl-dev \\\n\t\tunixodbc-dev \\\n\t\tlksctp-tools-dev \\\n\t\ttar \\\n\t&& export ERL_TOP=\"/usr/src/otp_src_${OTP_VERSION%%@*}\" \\\n\t&& mkdir -vp $ERL_TOP \\\n\t&& tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 \\\n\t&& rm otp-src.tar.gz \\\n\t&& ( cd $ERL_TOP \\\n\t  && ./otp_build autoconf \\\n\t  && gnuArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\" \\\n\t  && ./configure --build=\"$gnuArch\" \\\n\t  && make -j$(getconf _NPROCESSORS_ONLN) \\\n\t  && make install ) \\\n\t&& rm -rf $ERL_TOP \\\n\t&& find /usr/local -regex '/usr/local/lib/erlang/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|obj\\|c_src\\|emacs\\|info\\|examples\\)' | xargs rm -rf \\\n\t&& find /usr/local -name src | xargs -r find | grep -v '\\.hrl$' | xargs rm -v || true \\\n\t&& find /usr/local -name src | xargs -r find | xargs rmdir -vp || true \\\n\t&& scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /usr/local | xargs -r strip --strip-all \\\n\t&& scanelf --nobanner -E ET_DYN -BF '%F' --recursive /usr/local | xargs -r strip --strip-unneeded \\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& REBAR3_DOWNLOAD_URL=\"https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz\" \\\n\t&& curl -fSL -o rebar3-src.tar.gz \"$REBAR3_DOWNLOAD_URL\" \\\n\t&& echo \"${REBAR3_DOWNLOAD_SHA256}  rebar3-src.tar.gz\" | sha256sum -c - \\\n\t&& mkdir -p /usr/src/rebar3-src \\\n\t&& tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 \\\n\t&& rm rebar3-src.tar.gz \\\n\t&& cd /usr/src/rebar3-src \\\n\t&& HOME=$PWD ./bootstrap \\\n\t&& install -v ./rebar3 /usr/local/bin/ \\\n\t&& rm -rf /usr/src/rebar3-src \\\n\t&& apk add --no-cache --virtual .erlang-rundeps \\\n\t\t$runDeps \\\n\t\tlksctp-tools \\\n\t\tca-certificates \\\n\t&& apk del .fetch-deps .build-deps\n\n# -------------------------------------\n# ELixir (1.10.4) alpine Dockerfile\n# -------------------------------------\n# elixir expects utf8.\nENV ELIXIR_VERSION=\"v1.10.4\" \\\nLANG=C.UTF-8\n\nRUN set -xe \\\n&& ELIXIR_DOWNLOAD_URL=\"https://github.com/elixir-lang/elixir/archive/${ELIXIR_VERSION}.tar.gz\" \\\n&& ELIXIR_DOWNLOAD_SHA256=\"8518c78f43fe36315dbe0d623823c2c1b7a025c114f3f4adbb48e04ef63f1d9f\" \\\n&& buildDeps=' \\\n  ca-certificates \\\n  curl \\\n  make \\\n  ' \\\n&& apk add --no-cache --virtual .build-deps $buildDeps \\\n&& curl -fSL -o elixir-src.tar.gz $ELIXIR_DOWNLOAD_URL \\\n&& echo \"$ELIXIR_DOWNLOAD_SHA256  elixir-src.tar.gz\" | sha256sum -c - \\\n&& mkdir -p /usr/local/src/elixir \\\n&& tar -xzC /usr/local/src/elixir --strip-components=1 -f elixir-src.tar.gz \\\n&& rm elixir-src.tar.gz \\\n&& cd /usr/local/src/elixir \\\n&& make install clean \\\n&& apk del .build-deps\n\nCMD [\"iex\"]\n"
}