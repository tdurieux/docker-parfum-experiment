{
  "startTime": 1674252893027,
  "endTime": 1674252894631,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 13,
        "columnStart": 44,
        "columnEnd": 94
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 13,
        "columnStart": 44,
        "columnEnd": 94
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker image based on Ubuntu 20.04 which holds all frameworks for evaluation\n# (c) 2021 L.Spiegelberg, R. Yesantharao\n\nFROM ubuntu:20.04\nMAINTAINER Leonhard Spiegelberg \"leonhard_spiegelberg@brown.edu\"\n\n# Use /tmp folder to build everything...\nENV DEBIAN_FRONTEND=noninteractive\n\n# (1) general packages\nRUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y \\\n    apt-utils vim build-essential libssl-dev zlib1g-dev libncurses5-dev \\\n    libncursesw5-dev libreadline-dev libsqlite3-dev libgdbm-dev libdb5.3-dev \\\n     libbz2-dev libexpat1-dev liblzma-dev tk-dev libffi-dev wget git curl libcurl4-openssl-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN /bin/bash -c \"mkdir /opt; mkdir /code; mkdir /data; mkdir /results\"\n\n# (2.1) install python 3.6.12 system-wide because that's the stable version for pypy (v7.3.3)\n# cf. https://doc.pypy.org/en/latest/release-v7.3.3.html\n#RUN /bin/bash -c \"cd /tmp && wget https://www.python.org/ftp/python/3.6.12/Python-3.6.12.tgz && tar xf Python-3.6.12.tgz \\\n#    && cd Python-3.6.12 && ./configure --prefix=/opt --enable-optimizations && make -j $(nproc) \\\n#    && make altinstall\"\n#COPY install_python3.sh /tmp/install_python3.sh\n#RUN /bin/bash /tmp/install_python3.sh\n\n\n# from https://github.com/infosiftr/python/blob/f82205cde8f0a5ffa276103a50d843edced67757/3.6/alpine3.10/Dockerfile\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# runtime dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tca-certificates \\\n\t\tnetbase \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV PYTHON_VERSION 3.6.9\n\nRUN set -ex \\\n\t\\\n\t&& savedAptMark=\"$(apt-mark showmanual)\" \\\n\t&& apt-get update && apt-get install -y --no-install-recommends \\\n\t\tdpkg-dev \\\n\t\tgcc \\\n\t\tlibbz2-dev \\\n\t\tlibc6-dev \\\n\t\tlibexpat1-dev \\\n\t\tlibffi-dev \\\n\t\tlibgdbm-dev \\\n\t\tliblzma-dev \\\n\t\tlibncursesw5-dev \\\n\t\tlibreadline-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tmake \\\n\t\ttk-dev \\\n\t\twget \\\n\t\txz-utils \\\n\t\tzlib1g-dev \\\n\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n\t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n\t&& mkdir -p /usr/src/python \\\n\t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n\t&& rm python.tar.xz \\\n\t\\\n\t&& cd /usr/src/python \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-loadable-sqlite-extensions \\\n\t\t--enable-optimizations \\\n\t\t--enable-shared \\\n\t\t--with-system-expat \\\n\t\t--with-system-ffi \\\n\t\t--without-ensurepip \\\n\t&& make -j \"$(nproc)\" \\\n# https://github.com/docker-library/python/issues/160#issuecomment-509426916\n\t\tPROFILE_TASK='-m test.regrtest --pgo \\\n\t\t\ttest_array \\\n\t\t\ttest_base64 \\\n\t\t\ttest_binascii \\\n\t\t\ttest_binhex \\\n\t\t\ttest_binop \\\n\t\t\ttest_bytes \\\n\t\t\ttest_c_locale_coercion \\\n\t\t\ttest_class \\\n\t\t\ttest_cmath \\\n\t\t\ttest_codecs \\\n\t\t\ttest_compile \\\n\t\t\ttest_complex \\\n\t\t\ttest_csv \\\n\t\t\ttest_decimal \\\n\t\t\ttest_dict \\\n\t\t\ttest_float \\\n\t\t\ttest_fstring \\\n\t\t\ttest_hashlib \\\n\t\t\ttest_io \\\n\t\t\ttest_iter \\\n\t\t\ttest_json \\\n\t\t\ttest_long \\\n\t\t\ttest_math \\\n\t\t\ttest_memoryview \\\n\t\t\ttest_pickle \\\n\t\t\ttest_re \\\n\t\t\ttest_set \\\n\t\t\ttest_slice \\\n\t\t\ttest_struct \\\n\t\t\ttest_threading \\\n\t\t\ttest_time \\\n\t\t\ttest_traceback \\\n\t\t\ttest_unicode \\\n\t\t' \\\n\t&& make install \\\n\t&& ldconfig \\\n\t\\\n\t&& apt-mark auto '.*' > /dev/null \\\n\t&& apt-mark manual $savedAptMark \\\n\t&& find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { print $(NF-1) }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& rm -rf /usr/src/python \\\n\t\\\n\t&& python3 --version\n\n# make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n\t&& ln -s idle3 idle \\\n\t&& ln -s pydoc3 pydoc \\\n\t&& ln -s python3 python \\\n\t&& ln -s python3-config python-config\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 19.1.1\n\nRUN set -ex; \\\n\t\\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends wget; \\\n\t\\\n\twget -O get-pip.py 'https://bootstrap.pypa.io/pip/3.6/get-pip.py'; \\\n\t\\\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\tpython get-pip.py \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t\"pip==$PYTHON_PIP_VERSION\" \\\n\t; \\\n\tpip --version; \\\n\t\\\n\tfind /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' +; \\\n\trm -f get-pip.py\n\n\n# TODO: LS --> Pypy 7.3.3.\n\n# install cmake 3.19.7\nCOPY install_cmake.sh /usr/src/install_cmake.sh\nRUN /bin/bash /usr/src/install_cmake.sh\n\n## TODO: LS --> Weld\n# install llvm6.0 (required for weld)\nCOPY install_llvm6.sh /usr/src/install_llvm6.sh\nRUN /bin/bash /usr/src/install_llvm6.sh\n\n# install llvm9.0 (required for Tuplex)\nCOPY install_llvm9.sh /usr/src/install_llvm9.sh\nRUN /bin/bash /usr/src/install_llvm9.sh\n\n# TODO: LS --> Spark 2.4.7 + Scala 2.12.10\nCOPY install_spark.sh /usr/src/install_spark.sh\nRUN /bin/bash /usr/src/install_spark.sh\n\n# install pypy3\nCOPY install_pypy3.sh /usr/src/install_pypy3.sh\nRUN /bin/bash /usr/src/install_pypy3.sh\n\n# install all python (& pypy) packages (i.e. pandas/dask/...)\nCOPY install_python_packages.sh /usr/src/install_python_packages.sh\nRUN /bin/bash /usr/src/install_python_packages.sh\n\n# install recent boost\nADD install_boost.sh /usr/src/install_boost.sh\nRUN /bin/bash /usr/src/install_boost.sh\n\n## (2.2) add install reqs script & execute\nADD install_tuplex_reqs.sh /usr/src/install_tuplex_reqs.sh\nRUN /bin/bash /usr/src/install_tuplex_reqs.sh\n\n# install sbt\nADD install_sbt.sh /usr/src/install_sbt.sh\nRUN /bin/bash /usr/src/install_sbt.sh\n\n# install weld (last)\nADD PatchedGrizzlyMakefile.make /usr/src/PatchedGrizzlyMakefile.make\nCOPY install_weld.sh /usr/src/install_weld.sh\nRUN /bin/bash /usr/src/install_weld.sh\n\n# clean\nRUN rm -rf /usr/src\nRUN rm -rf /tmp/*\n\n#TODO: pypy...\n"
}