{
  "startTime": 1674215450618,
  "endTime": 1674215451683,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.2-devel-ubuntu16.04\nMAINTAINER avanetten\n\n# IF YOU WANT PROGRESS PRINTED TO TERMINAL\n# Update model_main to log to screen...\n# https://stackoverflow.com/questions/52016255/tensorflow-object-detection-api-not-displaying-global-steps\n# #. Add tf.logging.set_verbosity(tf.logging.INFO) after the import section of the model_main.py script. It will display a summary after every 100th step. (Can change frequency by log_step_count)\n# vi /tensorflow/models/research/object_detection/model_main.py\n# insert in on line 27:\n#  tf.logging.set_verbosity(tf.logging.INFO)\n# change line 63 to:\n#  config = tf.estimator.RunConfig(model_dir=FLAGS.model_dir, log_step_count_steps=10)\n\n# once started run:\n# export PYTHONPATH=$PYTHONPATH:/tensorflow/models/research/:/tensorflow/models/research/slim\n\n# # check if it's using gpu\n# python\n# import tensorflow as tf\n# sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n\n# resources:\n#. https://github.com/jkjung-avt/hand-detection-tutorial\n\nENV CUDNN_VERSION 7.3.0.29\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n\n# prep apt-get and cudnn\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t    apt-utils \\\n            libcudnn7=$CUDNN_VERSION-1+cuda9.0 \\\n            libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 && \\\n    apt-mark hold libcudnn7 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# install requirements\nRUN apt-get update \\\n  \t&& apt-get install -y --no-install-recommends \\\n\t    bc \\\n\t    bzip2 \\\n\t    ca-certificates \\\n\t    curl \\\n\t    git \\\n\t    libgdal-dev \\\n\t    libssl-dev \\\n\t    libffi-dev \\\n\t    libncurses-dev \\\n\t    libgl1 \\\n\t    jq \\\n\t    nfs-common \\\n\t    parallel \\\n\t    python-dev \\\n\t    python-pip \\\n\t    python-wheel \\\n\t    python-setuptools \\\n\t    unzip \\\n\t    vim \\\n\t\ttmux \\\n\t    wget \\\n\t    build-essential \\\n        libopencv-dev \\\n        python-opencv \\\n\t  && apt-get clean \\\n\t  && rm -rf /var/lib/apt/lists/*\n\nSHELL [\"/bin/bash\", \"-c\"]\nENV PATH /opt/conda/bin:$PATH\n\n# install anaconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda clean -tipsy && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc\n\n# prepend pytorch and conda-forge before default channel\nRUN conda update conda && \\\n    conda config --prepend channels conda-forge\n\n\n# set up conda environment and add to $PATH\nRUN conda create -n simrdwn python=3.6 \\\n                    && echo \"source activate simrdwn\" > ~/.bashrc\nENV PATH /opt/conda/envs/simrdwn/bin:$PATH\n\n# install GPU version of tensorflow\nRUN source activate simrdwn && \\\n    conda install -n simrdwn -c defaults tensorflow-gpu=1.13.1\n\n# install keras with tf backend\nENV KERAS_BACKEND=tensorflow\nRUN source activate simrdwn \\\n  && conda install -n simrdwn keras=2.2.4\n\nRUN source activate simrdwn \\\n\t&& conda install -n simrdwn \\\n    \t\t\t  gdal=2.4.2 \\\t\t\t\t \n\t\t\t   \t  geopandas=0.6.3 \\\n\t\t\t\t  fiona \\\n\t\t\t\t  rasterio \\\n\t     \t      awscli \\\n\t              affine \\\n\t              pyproj \\\n\t              pyhamcrest \\\n\t              cython \\\n\t              fiona \\\n\t              h5py \\\n\t              ncurses \\\n\t              jupyter \\\n\t              jupyterlab \\\n\t              ipykernel \\\n\t              libgdal \\\n\t              matplotlib \\\n\t\t          ncurses \\\n\t              numpy \\\n\t\t\t\t  statsmodels \\\n\t              pandas \\\n\t              pillow \\\n\t              pip \\\n\t              scipy \\\n\t              scikit-image \\\n\t              scikit-learn \\\n\t              shapely \\\n\t              rtree \\\n\t              testpath \\\n\t              tqdm \\\n\t\t\t\t  opencv \\\n\t\t\t\t  statsmodels \\\n\t\t\t\t  testpath \\\n\t\t\t\t  rtree \\\t\t\t\t  \n\t&& conda clean -p \\\n\t&& conda clean -t \\\n\t&& conda clean --yes --all\n\n# # Below is a hack to get around conda issues (2019-07-19)\n# RUN source activate simrdwn \\\n#     && conda install -n simrdwn \\\n# \t\t\t\t-c conda-forge rasterio=1.0.24 \\\n# \t&& conda clean -p \\\n# \t&& conda clean -t \\\n# \t&& conda clean --yes --all\n\n# tf object detection api\nRUN git clone https://github.com/tensorflow/models.git /tensorflow/models\n#WORKDIR /tensorflow/models/research/\n#RUN protoc object_detection/protos/*.proto --python_out=.\n# WORKDIR /tensorflow/models/research/\n# RUN export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n# ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\n# ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\n\n# also need coco api\n# manually\n# From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nRUN unzip protobuf.zip\nRUN ./bin/protoc object_detection/protos/*.proto --python_out=.\nRUN pip install --no-cache-dir pycocotools\n\n# From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\nENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\nENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\n\n# # this always seems to fail, so do it manually (as above)\n# RUN git clone https://github.com/cocodataset/cocoapi.git /cocoapi\n# WORKDIR /cocoapi/PythonAPI\n# RUN make\n# RUN cp -r pycocotools /tensorflow/models/research/\n# # From tensorflow/models/research/\n# WORKDIR /tensorflow/models/research/\n# RUN protoc object_detection/protos/*.proto --python_out=.\n\n# # test\n# WORKDIR /tensorflow/models/research/\n# RUN PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n# RUN python /tensorflow/models/research/object_detection/builders/model_builder_test.py\n#\n# # RUN source activate simrdwn && \\\n# #      python /tensorflow/models/research/object_detection/builders/model_builder_test.py\n# # # ENV MODELS_DIR /tensorflow/models/research/\n# # # PYTHONPATH=${MODELS_DIR}/research:$MODELS_DIR/research/slim \\\n# # #PYTHON $MODELS_DIR/research/object_detection/builders/model_builder_test.py\n\n# # add a jupyter kernel for the conda environment in case it's wanted\nRUN source activate simrdwn && python -m ipykernel.kernelspec\nRUN python -m ipykernel.kernelspec\n\n# clone simrdwn\nRUN mkdir -p /opt/\nRUN git clone https://github.com/avanetten/simrdwn.git /opt/simrdwn/\n\n###################\nWORKDIR \"/opt/simrdwn\"\n# Set up our notebook config.\n# open ports for jupyterlab and tensorboard\nEXPOSE 8888 6006\nRUN [\"/bin/bash\"]\n"
}