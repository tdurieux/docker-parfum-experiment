{
  "startTime": 1674252615307,
  "endTime": 1674252616431,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 75
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#* This file is part of the MOOSE framework\n#* https://www.mooseframework.org\n#*\n#* All rights reserved, see COPYRIGHT for full restrictions\n#* https://github.com/idaholab/moose/blob/master/COPYRIGHT\n#*\n#* Licensed under LGPL 2.1, please see LICENSE for details\n#* https://www.gnu.org/licenses/lgpl-2.1.html\n\n#-----------------------------------------------------------------------------#\n# This Dockerfile builds MPICH, PETSc, Libmesh, and finally MOOSE in a way that\n# is designed to take advantage of Docker's build caching.  Nominally, one\n# would clone MOOSE, then run the build scripts.  This approach would result in\n# unnecessary rebuilding of upstream dependencies due to changes that only\n# involve MOOSE, leading to unneccessary, redundant use of computing\n# resources, bandwidth, and storage.\n#\n# Optional arguments (set with --build-arg):\n# DISTRO_NAME: Linux distribution; defults to ubuntu.\n# DISTRO_VERSION: Linux distribution version; defaults to 20.04 with ubuntu.\n# LIBMESH_METHODS: Methods with which to build libmesh; defaults to \"opt dbg\".\n# MOOSE_JOBS: Sets number of cores for running make; defaults to 1.\n# MOOSE_METHODS: Methods with which to build MOOSE; defaults to opt.\n# PETSC_REV: Commit hash of submodule petsc.\n# PETSC_OPTIONS: Options to pass to update_and_rebuild_petsc.sh.\n# LIBMESH_REV: Commit hash of submodule libmesh.\n# LIBMESH_OPTIONS: Options to pass to update_and_rebuild_libmesh.sh.\n# BUILD_MODULES: Set to build all MOOSE modules.\n#-----------------------------------------------------------------------------#\nARG DISTRO_NAME=ubuntu\nARG DISTRO_VERSION=20.04\n\nFROM ${DISTRO_NAME}:${DISTRO_VERSION}\n\nWORKDIR /opt\n\nARG MOOSE_JOBS=1\n\n#-----------------------------------------------------------------------------#\n# Add user dev\n#-----------------------------------------------------------------------------#\nRUN useradd dev ; \\\nmkdir -p /home/dev/.ssh ; \\\nchmod 700 /home/dev/.ssh ; \\\nchown -R dev:dev /home/dev\n\n#-----------------------------------------------------------------------------#\n# Install managed packages and clear cache\n#-----------------------------------------------------------------------------#\nCOPY docker_ci/install_packages.sh docker_ci/apt_installs.sh docker_ci/yum_installs.sh ./\nRUN ./install_packages.sh || exit 1; rm *.sh\n\n#-----------------------------------------------------------------------------#\n# Ensure all local repos are marked as safe for all users\n#-----------------------------------------------------------------------------#\nRUN for CURR_USR in root dev; do \\\n    sudo -u $CURR_USR /bin/bash -c \"printf '[safe]\\n\\tdirectory = *\\n' > ~/.gitconfig\" ; \\\ndone\n\n#-----------------------------------------------------------------------------#\n# Install mpich-3.3 to system path\n#-----------------------------------------------------------------------------#\nRUN curl -f -L -O http://www.mpich.org/static/downloads/3.3/mpich-3.3.tar.gz; \\\ntar -xf mpich-3.3* ; \\\ncd mpich-3.3 && mkdir gcc-build && cd gcc-build ; \\\n# Configure build env\n../configure --prefix=/usr/local \\\n--enable-shared \\\n--enable-sharedlibs=gcc \\\n--enable-fast=O2 \\\n--enable-debuginfo \\\n--enable-totalview \\\n--enable-two-level-namespace \\\nCC=gcc \\\nCXX=g++ \\\nFC=gfortran \\\nF77=gfortran \\\nF90='' \\\nCFLAGS='' \\\nCXXFLAGS='' \\\nFFLAGS='' \\\nFCFLAGS='' \\\nF90FLAGS='' \\\nF77FLAGS='' ; \\\n# Build and install\nmake -j ${MOOSE_JOBS} ; \\\nmake install ; \\\n# Cleanup\ncd ../../ ; rm -rf mpich-3.3* ; \\\n# Ensure mpich was installed by checking for binary\nif [ ! -f $(which mpicc) ]; then exit 1; fi\n\nENV CC=mpicc \\\nCXX=mpicxx \\\nMOOSE_DIR=/opt/moose\n\nWORKDIR ${MOOSE_DIR}\n\n#-----------------------------------------------------------------------------#\n# Install PETSc to system path\n#-----------------------------------------------------------------------------#\nARG PETSC_REV=f855b95493736b087b8ccc16dc6c5b29bc4b5aa8\nARG PETSC_OPTIONS\nENV PETSC_DIR=/usr/local\nCOPY scripts/update_and_rebuild_petsc.sh ${MOOSE_DIR}/scripts/update_and_rebuild_petsc.sh\nCOPY scripts/configure_petsc.sh ${MOOSE_DIR}/scripts/configure_petsc.sh\nRUN git clone https://gitlab.com/petsc/petsc.git ; \\\ncd petsc && git checkout ${PETSC_REV} && cd .. ; \\\nPETSC_PREFIX=$PETSC_DIR ./scripts/update_and_rebuild_petsc.sh ${PETSC_OPTIONS} --download-cmake ; \\\nrm -rf petsc/* petsc/.* || true ; \\\n# Ensure PETSc was installed based on present of library directory\nif [ ! -d $PETSC_DIR/lib/petsc ]; then exit 1; fi\n\n#-----------------------------------------------------------------------------#\n# Install Libmesh to system path\n#-----------------------------------------------------------------------------#\nARG LIBMESH_REV=4747096de5d6c69ed79f28e38ce45c76546364c3\nARG LIBMESH_OPTIONS\nARG LIBMESH_METHODS=\"opt dbg\"\nENV LIBMESH_DIR=/usr/local \\\nlibmesh_CPPFLAGS=\"-D LIBMESH_HAVE_XDR\"\n\nCOPY scripts/update_and_rebuild_libmesh.sh ${MOOSE_DIR}/scripts/update_and_rebuild_libmesh.sh\nCOPY scripts/configure_libmesh.sh ${MOOSE_DIR}/scripts/configure_libmesh.sh\n\nRUN git clone https://github.com/libMesh/libmesh.git ; \\\ncd libmesh ; \\\ngit checkout ${LIBMESH_REV} ; \\\ngit submodule update --init ; \\\ncd .. ; \\\nMETHODS=\"${LIBMESH_METHODS}\" ./scripts/update_and_rebuild_libmesh.sh ${LIBMESH_OPTIONS} ; \\\nrm -rf libmesh/* libmesh/.* || true ; \\\n# Ensure Libmesh was installed via include directory\nif [ ! -d $LIBMESH_DIR/include/libmesh ]; then exit 1; fi\n\n#-----------------------------------------------------------------------------#\n# Copy and build MOOSE framework, test, and optionally modules\n#-----------------------------------------------------------------------------#\nRUN chown -R dev:dev /opt /home/dev\n\nUSER dev\nCOPY --chown=dev:dev . ${MOOSE_DIR}\n\nARG BUILD_MODULES\nARG MOOSE_METHODS=opt\nRUN ./docker_ci/build_moose.sh ; \\\n# Ensure a MOOSE test binary was built\nif [ ! -f $MOOSE_DIR/test/moose_test* ]; then exit 1; fi\n\n#-----------------------------------------------------------------------------#\n# Add needed env vars to /etc/environment\n#-----------------------------------------------------------------------------#\nUSER root\nRUN for CURR_VAR in $(env | grep 'CC\\|CXX\\|_DIR'); do \\\n    echo \"$CURR_VAR\" >> /etc/environment ; \\\ndone\n"
}