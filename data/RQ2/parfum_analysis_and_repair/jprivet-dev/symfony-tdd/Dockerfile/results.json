{
  "startTime": 1674254684968,
  "endTime": 1674254686086,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# the different stages of this Dockerfile are meant to be built into separate images\n# https://docs.docker.com/compose/compose-file/#target\n\nARG PHP_VERSION=7.2\nARG NGINX_VERSION=1.15\n\n### NGINX\nFROM nginx:${NGINX_VERSION}-alpine AS symfony_tdd_nginx\n\nCOPY docker/nginx/conf.d /etc/nginx/conf.d/\nCOPY public /srv/app/public/\n\n### H2 PROXY\nFROM alpine:latest AS symfony_tdd_h2-proxy-cert\n\nRUN apk add --no-cache openssl\n\n# Use this self-generated certificate only in dev, IT IS NOT SECURE!\nRUN openssl genrsa -des3 -passout pass:NotSecure -out server.pass.key 2048\nRUN openssl rsa -passin pass:NotSecure -in server.pass.key -out server.key\nRUN rm server.pass.key\nRUN openssl req -new -passout pass:NotSecure -key server.key -out server.csr \\\n    -subj '/C=SS/ST=SS/L=Gotham City/O=Symfony/CN=localhost'\nRUN openssl x509 -req -sha256 -days 365 -in server.csr -signkey server.key -out server.crt\n\nFROM nginx:${NGINX_VERSION}-alpine AS symfony_tdd_h2-proxy\n\nRUN mkdir -p /etc/nginx/ssl/\nCOPY --from=symfony_tdd_h2-proxy-cert server.key server.crt /etc/nginx/ssl/\nCOPY ./docker/h2-proxy/default.conf /etc/nginx/conf.d/default.conf\n\n### PHP\nFROM php:${PHP_VERSION}-fpm-alpine AS symfony_tdd_php\n\nRUN apk add --no-cache \\\n\t\tgit \\\n\t\ticu-libs \\\n\t\tzlib \\\n\t\tjq\n\nENV APCU_VERSION 5.1.12\nRUN set -eux \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\ticu-dev \\\n\t\tzlib-dev \\\n\t&& docker-php-ext-install -j$(nproc) \\\n\t\tintl \\\n\t\tzip \\\n\t&& pecl install \\\n\t\tapcu-${APCU_VERSION} \\\n\t&& docker-php-ext-enable --ini-name 20-apcu.ini apcu \\\n\t&& docker-php-ext-enable --ini-name 05-opcache.ini opcache \\\n\t&& runDeps=\"$( \\\n        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n            | tr ',' '\\n' \\\n            | sort -u \\\n            | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    )\" \\\n    && apk add --no-cache --virtual .api-phpexts-rundeps $runDeps \\\n\t&& apk del .build-deps\n\n###> Xdebug ###\nARG XDEBUG_VERSION=2.6.0\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps $PHPIZE_DEPS; \\\n\tpecl install xdebug-$XDEBUG_VERSION; \\\n\tdocker-php-ext-enable xdebug; \\\n\tapk del .build-deps\n###< Xdebug ###\n\n###> Panther & Chrome ###\n### @see https://github.com/symfony/panther#docker-integration\nENV PANTHER_NO_SANDBOX 1\nENV PANTHER_CHROME_DRIVER_BINARY /usr/lib/chromium/chromedriver\nRUN apk add --no-cache \\\n        libzip-dev \\\n        zlib-dev \\\n        chromium \\\n        chromium-chromedriver\n###< Panther & Chrome ###\n\n###> Database & PDO Connection ###\nRUN docker-php-ext-install pdo pdo_mysql\n###< Database & PDO Connection ###\n\n###> Yarn ###\nRUN apk add --no-cache yarn\n###< Yarn ###\n\nRUN ln -s $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini\nCOPY docker/app/conf.d/symfony.ini $PHP_INI_DIR/conf.d/symfony.ini\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nCOPY docker/app/docker-entrypoint.sh /usr/local/bin/docker-app-entrypoint\nRUN chmod +x /usr/local/bin/docker-app-entrypoint\n\nWORKDIR /srv/app\nENTRYPOINT [\"docker-app-entrypoint\"]\nCMD [\"php-fpm\"]\n\n# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER 1\n\n# Use prestissimo to speed up builds\nRUN composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative  --no-interaction\n\n# Allow to use development versions of Symfony\nARG STABILITY=\"stable\"\nENV STABILITY ${STABILITY:-stable}\n\n# Allow to select skeleton version\nARG SYMFONY_VERSION=\"\"\n\n# Download the Symfony skeleton and leverage Docker cache layers\nRUN composer create-project \"symfony/skeleton ${SYMFONY_VERSION}\" . --stability=$STABILITY --prefer-dist --no-dev --no-progress --no-scripts --no-plugins --no-interaction\n\n###> recipes ###\n###< recipes ###\n\nCOPY . .\n\nRUN mkdir -p var/cache var/logs var/sessions \\\n    && composer install --prefer-dist --no-dev --no-scripts --no-progress --no-suggest --classmap-authoritative --no-interaction \\\n    && composer clear-cache \\\n    && chown -R www-data var\n"
}