{
  "startTime": 1674255787651,
  "endTime": 1674255788398,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 160
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\n\n# This env variable makes sure installing the tzdata package doesn't hang in prompt\nENV DEBIAN_FRONTEND=noninteractive\n\n# This env variable makes sure installing the tzdata package doesn't hang in prompt\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\tbuild-essential \\\n\tcurl \\\n\tgit \\\n\tlibbsd-dev \\\n\tdoxygen \\\n\tsphinx-common \\\n\tcmake \\\n\tninja-build \\\n\tca-certificates \\\n\tsoftware-properties-common \\\n\tlibssl-dev \\\n\tpkg-config \\\n\tcsmith \\\n\tlibcsmith-dev \\\n\tcreduce \\\n\tgcc-multilib \\\n\tclang-6.0 \\\n\tllvm-6.0 \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-6.0 100\nRUN update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-6.0 100\n\n# Setting a consistent LD_LIBRARY_PATH across the entire environment prevents unnecessary Cargo\n# rebuilds.\nENV LD_LIBRARY_PATH=/usr/local/lib\n\n# Install our supported version of Rust, rustfmt, and the wasm32-wasi cross-compilation target\nRUN curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain 1.58.1 -y\nENV PATH=/root/.cargo/bin:$PATH\nRUN rustup component add rustfmt\nRUN rustup target add wasm32-wasi\n\n# Optional additional Rust programs\nRUN cargo install --debug rsign2 cargo-audit mdbook\n\nRUN curl -f -sSLO https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk_12.0_amd64.deb \\\n    && dpkg -i wasi-sdk_12.0_amd64.deb \\\n    && rm -f wasi-sdk_12.0_amd64.deb\n\nENV WASI_SDK=/opt/wasi-sdk\n\n# optional install of wasm-opt and wasm-reduce for fuzzing and benchmarking\nENV BINARYEN_DIR=/opt/binaryen\nENV BINARYEN_VERSION=86\nRUN curl -f -sS -L \"https://github.com/WebAssembly/binaryen/releases/download/version_${BINARYEN_VERSION}/binaryen-version_${BINARYEN_VERSION}-x86_64-linux.tar.gz\" | tar xzf - && \\\n    install -d -v \"${BINARYEN_DIR}/bin\" && \\\n    for tool in wasm-opt wasm-reduce; do install -v \"binaryen-version_${BINARYEN_VERSION}/${tool}\" \"${BINARYEN_DIR}/bin/\"; done && \\\n    rm -fr binaryen-version_${BINARYEN_VERSION}\nENV PATH=$BINARYEN_DIR/bin:$PATH\n"
}