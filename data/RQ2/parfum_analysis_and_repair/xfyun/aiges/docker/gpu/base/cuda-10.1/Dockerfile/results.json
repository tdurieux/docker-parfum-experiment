{
  "startTime": 1674255459116,
  "endTime": 1674255460461,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 1,
        "columnEnd": 41
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 1,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.1-devel-ubuntu18.04\n\nENV TZ=Asia/Shanghai \\\n    DEBIAN_FRONTEND=noninteractive\nENV GOLANG_VERSION 1.17.11\n# Setup Go\n# https://github.com/docker-library/golang/blob/master/1.17/bullseye/Dockerfile\n# install cgo-related dependencies\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc6-dev \\\n\t\tmake \\\n    \twget \\\n        pkg-config \\\n    ; \\\n\trm -rf /var/lib/apt/lists/*\n\nENV PATH /usr/local/go/bin:$PATH\nRUN set -eux; \\\n\tarch=\"$(dpkg --print-architecture)\"; arch=\"${arch##*-}\"; \\\n\turl=; \\\n\tcase \"$arch\" in \\\n\t\t'amd64') \\\n\t\t\turl='https://dl.google.com/go/go1.17.11.linux-amd64.tar.gz'; \\\n\t\t\tsha256='d69a4fe2694f795d8e525c72b497ededc209cb7185f4c3b62d7a98dd6227b3fe'; \\\n\t\t\t;; \\\n\t\t'armel') \\\n\t\t\texport GOARCH='arm' GOARM='5' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t'armhf') \\\n\t\t\turl='https://dl.google.com/go/go1.17.11.linux-armv6l.tar.gz'; \\\n\t\t\tsha256='56fb4a344bfe01427398083b3e82018fcde1f168a94e9df9820010b29e558f27'; \\\n\t\t\t;; \\\n\t\t'arm64') \\\n\t\t\turl='https://dl.google.com/go/go1.17.11.linux-arm64.tar.gz'; \\\n\t\t\tsha256='adefa7412c6798f9cad02d1e8336fc2242f5bade30c5b32781759181e01961b7'; \\\n\t\t\t;; \\\n\t\t'i386') \\\n\t\t\turl='https://dl.google.com/go/go1.17.11.linux-386.tar.gz'; \\\n\t\t\tsha256='8e43b4c63dda0612df0e1ed3cf8bed566fe8ae88082a46343c40be76a61371e4'; \\\n\t\t\t;; \\\n\t\t'mips64el') \\\n\t\t\texport GOARCH='mips64le' GOOS='linux'; \\\n\t\t\t;; \\\n\t\t'ppc64el') \\\n\t\t\turl='https://dl.google.com/go/go1.17.11.linux-ppc64le.tar.gz'; \\\n\t\t\tsha256='013624fc1964d576f314117f2f3b6a6a8f3d32f0ec8f55fa5962664537a34180'; \\\n\t\t\t;; \\\n\t\t's390x') \\\n\t\t\turl='https://dl.google.com/go/go1.17.11.linux-s390x.tar.gz'; \\\n\t\t\tsha256='0202a0b2ffaa9bdf1f2480789c2009ba6fde597e1f1c6d4cfb9559bb1964a39c'; \\\n\t\t\t;; \\\n\t\t*) echo >&2 \"error: unsupported architecture '$arch' (likely packaging update needed)\"; exit 1 ;; \\\n\tesac; \\\n\tbuild=; \\\n\tif [ -z \"$url\" ]; then \\\n# https://github.com/golang/go/issues/38536#issuecomment-616897960\n\t\tbuild=1; \\\n\t\turl='https://dl.google.com/go/go1.17.11.src.tar.gz'; \\\n\t\tsha256='ac2649a65944c6a5abe55054000eee3d77196880da36a3555f62e06540e8eb54'; \\\n\t\techo >&2; \\\n\t\techo >&2 \"warning: current architecture ($arch) does not have a compatible Go binary release; will be building from source\"; \\\n\t\techo >&2; \\\n\tfi; \\\n\n\twget -O go.tgz.asc \"$url.asc\"; \\\n\twget -O go.tgz \"$url\" --progress=dot:giga; \\\n\techo \"$sha256  *go.tgz\" | sha256sum -c -; \\\n\n# https://github.com/golang/go/issues/14739#issuecomment-324767697\n\tGNUPGHOME=\"$(mktemp -d)\"; export GNUPGHOME; \\\n# https://www.google.com/linuxrepositories/\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796'; \\\n# let's also fetch the specific subkey of that key explicitly that we expect \"go.tgz.asc\" to be signed by, just to make sure we definitely have it\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys '2F52 8D36 D67B 69ED F998  D857 78BD 6547 3CB3 BD13'; \\\n\tgpg --batch --verify go.tgz.asc go.tgz; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" go.tgz.asc; \\\n\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tif [ -n \"$build\" ]; then \\\n\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\tapt-get update; \\\n\t\tapt-get install -y --no-install-recommends golang-go; \\\n\t\t\\\n\t\texport GOCACHE='/tmp/gocache'; \\\n\t\t\\\n\t\t( \\\n\t\t\tcd /usr/local/go/src; \\\n# set GOROOT_BOOTSTRAP + GOHOST* such that we can build Go successfully\n\t\t\texport GOROOT_BOOTSTRAP=\"$(go env GOROOT)\" GOHOSTOS=\"$GOOS\" GOHOSTARCH=\"$GOARCH\"; \\\n\t\t\t./make.bash; \\\n\t\t); \\\n\t\t\\\n\t\tapt-mark auto '.*' > /dev/null; \\\n\t\tapt-mark manual $savedAptMark > /dev/null; \\\n\t\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\t\trm -rf /var/lib/apt/lists/*; \\\n\t\t\\\n# remove a few intermediate / bootstrapping files the official binary release tarballs do not contain\n\t\trm -rf \\\n\t\t\t/usr/local/go/pkg/*/cmd \\\n\t\t\t/usr/local/go/pkg/bootstrap \\\n\t\t\t/usr/local/go/pkg/obj \\\n\t\t\t/usr/local/go/pkg/tool/*/api \\\n\t\t\t/usr/local/go/pkg/tool/*/go_bootstrap \\\n\t\t\t/usr/local/go/src/cmd/dist/dist \\\n\t\t\t\"$GOCACHE\" \\\n\t\t; \\\n\tfi; \\\n\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:$PATH\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# runtime dependencies\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tlibbluetooth-dev \\\n\t\ttk-dev \\\n\t\tuuid-dev \\\n    \tlibffi-dev \\\n    \tlibssl-dev \\\n    \tlibbz2-dev \\\n    \tliblzma-dev  \\\n    ; \\\n\trm -rf /var/lib/apt/lists/*\n\nENV GPG_KEY E3FF2839C048B25C084DEBE9B26995E310250568\nENV PYTHON_VERSION 3.9.13\n\nRUN set -eux; \\\n\t\\\n\twget -O python.tar.xz \"https://registry.npmmirror.com/-/binary/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\"; \\\n\twget -O python.tar.xz.asc \"https://registry.npmmirror.com/-/binary/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\"; \\\n\tGNUPGHOME=\"$(mktemp -d)\"; export GNUPGHOME; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys \"$GPG_KEY\"; \\\n\tgpg --batch --verify python.tar.xz.asc python.tar.xz; \\\n\tcommand -v gpgconf > /dev/null && gpgconf --kill all || :; \\\n\trm -rf \"$GNUPGHOME\" python.tar.xz.asc; \\\n\tmkdir -p /usr/src/python; \\\n\ttar --extract --directory /usr/src/python --strip-components=1 --file python.tar.xz; \\\n\trm python.tar.xz; \\\n\t\\\n\tcd /usr/src/python; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-loadable-sqlite-extensions \\\n\t\t--enable-optimizations \\\n\t\t--enable-option-checking=fatal \\\n\t\t--enable-shared \\\n\t\t--with-system-expat \\\n\t\t--without-ensurepip \\\n\t; \\\n\tnproc=\"$(nproc)\"; \\\n\tmake -j \"$nproc\" \\\n\t; \\\n\tmake install; \\\n\t\\\n# enable GDB to load debugging data: https://github.com/docker-library/python/pull/701\n\tbin=\"$(readlink -ve /usr/local/bin/python3)\"; \\\n\tdir=\"$(dirname \"$bin\")\"; \\\n\tmkdir -p \"/usr/share/gdb/auto-load/$dir\"; \\\n\tcp -vL Tools/gdb/libpython.py \"/usr/share/gdb/auto-load/$bin-gdb.py\"; \\\n\t\\\n\tcd /; \\\n\trm -rf /usr/src/python; \\\n\t\\\n\tfind /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests -o -name idle_test \\) \\) \\\n\t\t\t-o \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t; \\\n\t\\\n\tldconfig; \\\n\t\\\n\tpython3 --version\n\n# make some useful symlinks that are expected to exist (\"/usr/local/bin/python\" and friends)\nRUN set -eux; \\\n\tfor src in idle3 pydoc3 python3 python3-config; do \\\n\t\tdst=\"$(echo \"$src\" | tr -d 3)\"; \\\n\t\t[ -s \"/usr/local/bin/$src\" ]; \\\n\t\t[ ! -e \"/usr/local/bin/$dst\" ]; \\\n\t\tln -svT \"$src\" \"/usr/local/bin/$dst\"; \\\n\tdone\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 22.0.4\n# https://github.com/docker-library/python/issues/365\nENV PYTHON_SETUPTOOLS_VERSION 58.1.0\n# https://github.com/pypa/get-pip\nENV PYTHON_GET_PIP_URL https://bootstrap.pypa.io/get-pip.py\nENV PYTHON_GET_PIP_SHA256 ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d\n\nRUN set -eux; \\\n\n\twget -O get-pip.py \"$PYTHON_GET_PIP_URL\"; \\\n\techo \"$PYTHON_GET_PIP_SHA256  *get-pip.py\" | sha256sum -c -; \\\n\n\texport PYTHONDONTWRITEBYTECODE=1; \\\n\n\tpython get-pip.py \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t--no-compile \\\n\t\t\"pip==$PYTHON_PIP_VERSION\" \\\n\t\t\"setuptools==$PYTHON_SETUPTOOLS_VERSION\" \\\n\t; \\\n\trm -f get-pip.py; \\\n\n\tpip --version\n\nCMD [\"python3\"]"
}