{
  "startTime": 1674255623413,
  "endTime": 1674255624308,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 33,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:rolling\n\nLABEL maintainer=\"info@andremeyering.de\"\n\n#####################################################################\n# This image can be used to develop and test MediaElch\n# It is an ALL-IN-ONE image that includes:\n#  - Latest GCC + gcov\n#  - Latest clang + clang tools\n#  - Latest stable Clazy\n#  - Latest CMake (via pip) + cmake_format\n#  - Mold Linker\n#  - Latest lcov from GitHub\n#  - shellcheck + cppcheck\n#####################################################################\n\nWORKDIR /opt\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository ppa:ubuntu-toolchain-r/test && \\\n    apt-get update && apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        git \\\n        wget \\\n        curl \\\n        zlib1g \\\n        zlib1g-dev \\\n        g++-11 \\\n        gcc-11 \\\n        libclang-13-dev \\\n        clang-tidy-13 \\\n        clang-tools-11 \\\n        clang-format-13 \\\n        clang-13 \\\n        llvm-13-dev \\\n        libstdc++-10-dev \\\n        libssl-dev \\\n        libxxhash-dev \\\n        pkg-config \\\n        ccache && \\\n    apt-get install -y --no-install-recommends \\\n        shellcheck \\\n        cppcheck \\\n        xvfb \\\n        python3 \\\n        python3-yaml \\\n        python3-pip \\\n        libjson-perl \\\n        libncurses5-dev \\\n        libncurses5 \\\n        ninja-build \\\n        doxygen \\\n        graphviz \\\n        libmediainfo-dev \\\n        ffmpeg && \\\n    apt-get install -y --no-install-recommends \\\n        qtbase5-dev \\\n        qtbase5-dev-tools \\\n        qt5-qmake \\\n        qtmultimedia5-dev \\\n        qtdeclarative5-dev \\\n        qttools5-dev \\\n        qttools5-dev-tools \\\n        libqt5opengl5 \\\n        libqt5opengl5-dev \\\n        libqt5svg5 \\\n        libqt5svg5-dev && \\\n    apt-get autoremove && \\\n    update-alternatives --install /usr/bin/gcc           gcc          /usr/bin/gcc-11          10 && \\\n    update-alternatives --install /usr/bin/gcov          gcov         /usr/bin/gcov-11         10 && \\\n    update-alternatives --install /usr/bin/g++           g++          /usr/bin/g++-11          10 && \\\n    update-alternatives --install /usr/bin/clang++       clang++      /usr/bin/clang++-13      10 && \\\n    update-alternatives --install /usr/bin/clang         clang        /usr/bin/clang-13        10 && \\\n    update-alternatives --install /usr/bin/clang-format  clang-format /usr/bin/clang-format-13 10 && \\\n    update-alternatives --install /usr/bin/clang-tidy    clang-tidy   /usr/bin/clang-tidy-13   10 && \\\n    update-alternatives --install /usr/bin/llvm-config   llvm-config  /usr/bin/llvm-config-13  10 && \\\n    update-alternatives --install /usr/bin/llvm-cov      llvm-cov     /usr/bin/llvm-cov-13     10 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Use latest lcov\nRUN cd /opt && git clone https://github.com/linux-test-project/lcov.git && \\\n    cd lcov && make install && \\\n    cd ..   && rm -rf lcov\nRUN perl -MCPAN -e 'install PerlIO::gzip'\nRUN perl -MCPAN -e 'JSON'\n\nRUN pip install --no-cache-dir --upgrade pip && pip3 install --no-cache-dir cmake cmake_format\n\n# https://github.com/rui314/mold\nRUN cd /opt && git clone https://github.com/rui314/mold.git && \\\n    cd mold && git checkout v1.1 && \\\n    make -j$(nproc) CXX=clang++ && \\\n    make install\n\n# Multicore build always fails for some reason, so we use -j1\nRUN cd /opt && git clone https://github.com/KDE/clazy.git && \\\n    cd /opt/clazy && git checkout 1.11 && \\\n    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -GNinja && \\\n    cmake --build build && \\\n    cmake --build build --target install && \\\n    cd /opt && rm -rf clazy\n\nRUN mkdir /opt/src\nVOLUME [\"/opt/src\"]\nWORKDIR /opt/src\n"
}