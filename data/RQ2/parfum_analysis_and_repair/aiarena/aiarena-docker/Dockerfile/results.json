{
  "startTime": 1674253650961,
  "endTime": 1674253652129,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedDockerfile": "# Sets up ai-arena client\nARG PYTHON_VERSION=3.9\nARG SC2_VERSION=4.10\nARG VERSION_NUMBER=1.0.0\nARG USE_SQUASHED\n\nFROM aiarena/sc2-linux-base:py_$PYTHON_VERSION-sc2_$SC2_VERSION-v$VERSION_NUMBER$USE_SQUASHED\nMAINTAINER AI Arena <staff@aiarena.net>\n\n# Debugging purposes\nRUN echo $PYTHON_VERSION\nRUN echo $SC2_VERSION\nRUN echo $VERSION_NUMBER\nRUN echo $USE_SQUASHED\n\nWORKDIR /root/\n\n# Prevent caching when client master branch changed\n# https://codehunter.cc/a/git/how-to-prevent-dockerfile-caching-git-clone\nADD https://api.github.com/repos/aiarena/aiarena-client/git/refs/heads/master version.json\nRUN rm version.json\n\n# procps required to run 'pkill' in rust_arenaclient\nRUN apt-get install -y --assume-yes --no-install-recommends --no-show-upgraded \\\n    procps \\\n    # Required to build wheels of some packages on new python versions\n    g++ && rm -rf /var/lib/apt/lists/*;\n\n# Download python requirements files\nADD https://raw.githubusercontent.com/aiarena/aiarena-client/master/requirements.txt client-requirements.txt\n\n# Add local pyproject.toml and poetry.lock which contain bot requirements\nCOPY pyproject.toml poetry.lock ./\n\n# Merge client and bot requirements into pyproject.toml, generate a requirements.txt and install the packages globally\nRUN pip install --no-cache-dir poetry \\\n    # Allows the final remove virtual env command\n    && poetry config virtualenvs.in-project true \\\n    # Merge client requirements into current requirements\n    && poetry add --lock $(cat client-requirements.txt) \\\n    # Export unified requirements as requirements.txt, this will not include dev dependencies\n    && poetry export -f requirements.txt --output requirements.txt --without-hashes \\\n    # Remove virtual environment and uninstall poetry\n    && pip uninstall -y poetry \\\n    && rm -rf /root/.venv \\\n    # Install requirements.txt globally\n    && pip install --no-cache-dir -r requirements.txt \\\n    # Remove cache created by poetry and pip\n    && rm -rf /root/.cache\n\n# Download the aiarena client to /root/aiarena-client\n# https://stackoverflow.com/a/3946745/10882657\nRUN wget --quiet --show-progress --progress=bar:force https://github.com/aiarena/aiarena-client/archive/refs/heads/master.zip \\\n    && unzip -q master.zip \\\n    && mv aiarena-client-master aiarena-client \\\n    && rm master.zip\n\n# Create bot users\nRUN useradd -ms /bin/bash bot_player1 \\\n    && useradd -ms /bin/bash bot_player2\n\n# Create Bot and Replay directories\nRUN mkdir -p /root/aiarena-client/Bots \\\n    && mkdir -p /root/aiarena-client/Replays\n\n# Change to working directory\nWORKDIR /root/aiarena-client/\n\n# Add Pythonpath to env\nENV PYTHONPATH=/root/aiarena-client/:/root/aiarena-client/arenaclient/\nENV HOST=0.0.0.0\n\n# Install the arena client as a module\nRUN python /root/aiarena-client/setup.py install\n\n# Debug: show size of python site-packages folder\nRUN du --max-depth=1 -h /usr/local/lib/*/site-packages | sort -h\n\n# Run the match runner\nENTRYPOINT [ \"timeout\", \"120m\", \"/usr/local/bin/python3.9\", \"-m\", \"arenaclient\" ]\n"
}