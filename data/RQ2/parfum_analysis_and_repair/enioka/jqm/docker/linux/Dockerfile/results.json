{
  "startTime": 1674251546024,
  "endTime": 1674251547081,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedDockerfile": "FROM maven:3-jdk-8 as installer\n\nARG MVN_SETTINGS=\" \"\nARG SKIP_TESTS=true\n\nWORKDIR /jqm-all\n\n# Hack to keep libraries in a layer to speed up subsequent builds (as long as pom.xml files do not change)\n#COPY ./jqm-all/**/pom.xml ./marsu/\n#RUN find .\n#RUN mvn dependency:go-offline\n\n# Resume normal operations\nCOPY ./docker/windows/nexus/settings.xml ./jqm-all ./\n\nRUN apt install -y --no-install-recommends unzip && rm -rf /var/lib/apt/lists/*;\n\nRUN mvn install -DskipTests=${SKIP_TESTS} ${MVN_SETTINGS}\nRUN mkdir /jqm\nRUN unzip ./jqm-service/target/jqm*.zip -d /tmp/\nRUN mv /tmp/jqm*/ /tmp/jqm/\n\nCOPY ./docker/linux/*.sh /tmp/jqm/bin/\nCOPY ./docker/config/selfConfig*.xml /tmp/jqm/\n\n\n\nFROM openjdk:8-jre-alpine\n\nCOPY --from=installer /tmp/jqm/ /jqm/\nRUN apk add --no-cache curl\n\nENV JAVA_OPTS=\"-Xms128m -Xmx512m -XX:MaxMetaspaceSize=128m\" \\\n    JQM_ROOT=\"/jqm\" \\\n    JQM_NODE_NAME=\"ContainerNode\" \\\n    JQM_NODE_WS_INTERFACE=\"0.0.0.0\" \\\n    JQM_CREATE_NODE_IF_MISSING=0 \\\n    JQM_CREATE_NODE_TEMPLATE=TEMPLATE_WEB \\\n    JQM_POOL_CONNSTR=\"jdbc:hsqldb:file:db/jqmdatabase;shutdown=true;hsqldb.write_delay=false\" \\\n    JQM_POOL_USER=\"sa\" \\\n    JQM_POOL_PASSWORD=\"\" \\\n    JQM_POOL_DRIVER=\"org.hsqldb.jdbcDriver\" \\\n    JQM_POOL_VALIDATION_QUERY=\"SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" \\\n    JQM_POOL_INIT_SQL=\\\n    JQM_POOL_MAX=10 \\\n    JQM_HEALTHCHECK_URL=\"http://localhost:1789/ws/simple/localnode/health\"\n\nEXPOSE 1789 1790 1791\nVOLUME /jqm/hotdeploy/ \\\n    /jqm/ext/drivers/\n\nWORKDIR /jqm\n\n# Import initial config\nRUN java -jar jqm.jar -u ; java -jar jqm.jar -c selfConfig.single.xml ; java -jar jqm.jar -importjobdef ./jobs/jqm-demo ; rm -f .\\logs\\*\n\n# Run node on startup\nENTRYPOINT /jqm/bin/node.sh\n\n# Healthcheck is equivalent to calling Node.AllPollersPolling\nHEALTHCHECK --interval=30s --start-period=91s --retries=2 --timeout=10s CMD curl --connect-timeout 2 -q --http1.1 -4 -s -S  ${JQM_HEALTHCHECK_URL}\nSTOPSIGNAL SIGINT\n"
}