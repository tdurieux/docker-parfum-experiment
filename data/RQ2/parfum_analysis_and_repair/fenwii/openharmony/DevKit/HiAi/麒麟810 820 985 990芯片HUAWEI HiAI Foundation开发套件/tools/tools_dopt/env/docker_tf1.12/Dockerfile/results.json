{
  "startTime": 1674218483347,
  "endTime": 1674218484688,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 26,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 49,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nARG TIMEZONE=\"Asia/Shanghai\"\nARG HTTP_PROXY\n\n# Copy tools\nCOPY tools /root/ddk/tools\n\n# Install cudnn\nRUN cp -P /usr/include/cudnn.h /usr/local/cuda/include\nRUN cp -P /usr/lib/x86_64-linux-gnu/libcudnn* /usr/local/cuda/lib64\nRUN chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\n\n# Install nccl\nRUN mkdir /usr/local/cuda/lib &&  \\\n    ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 && \\\n    ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\n\nENV PATH /usr/local/cuda/bin:${PATH}\nENV LIBRARY_PATH /usr/local/cuda/lib64:/usr/local/cuda/lib:$LIBRARY_PATH\nENV LD_LIBRARY_PATH /usr/local/cuda/lib64:/usr/local/cuda/lib:$LD_LIBRARY_PATH\n\nENV http_proxy  ${HTTP_PROXY}\nENV https_proxy  ${HTTP_PROXY}\n\n# Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n# No need nvidia apt-source, use huawei apt mirror\nRUN rm -f /etc/apt/sources.list.d/*.list && \\\n    cp -a /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    sed -i \"s@http://.*archive.ubuntu.com@http://mirrors.huaweicloud.com@g\" /etc/apt/sources.list && \\\n    sed -i \"s@http://.*security.ubuntu.com@http://mirrors.huaweicloud.com@g\" /etc/apt/sources.list\n\n# Install base tools\nRUN apt-get update && apt-get install -y --fix-missing --allow-downgrades --allow-change-held-packages --no-install-recommends\\\n        apt-utils locales openssh-client openssh-server build-essential libsqlite3-dev\\\n        cmake g++-4.8 git curl vim wget libjpeg-dev libpng-dev openssl \\\n        libssl-dev unzip liblz4-tool libglib2.0-0 \\\n        libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev libatlas-base-dev \\\n        protobuf-compiler libboost-all-dev libgflags-dev libgoogle-glog-dev liblmdb-dev python-numpy&& \\\n        rm -rf /var/lib/apt/lists/*\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget --no-check-certificate https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \\\n    tar zxf openmpi-4.0.0.tar.gz && \\\n    cd openmpi-4.0.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/* && rm openmpi-4.0.0.tar.gz\n\n# install pip2\nRUN mkdir /tmp/python && \\\n    cd /tmp/python && \\\n    wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py &&\\\n    python2 get-pip.py && pip install --no-cache-dir --upgrade pip && \\\n    ldconfig && \\\n    rm -rf /tmp/*\n\nENV PYTHON3_VERSION=\"3.6.8\"\n# Install Python3 Pip3\nRUN mkdir /tmp/python && \\\n    cd /tmp/python && \\\n    wget --no-check-certificate https://www.python.org/ftp/python/${PYTHON3_VERSION}/Python-${PYTHON3_VERSION}.tgz && \\\n    tar -zxvf Python-${PYTHON3_VERSION}.tgz && \\\n    cd Python-${PYTHON3_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/python${PYTHON3_VERSION} --with-ssl --enable-loadable-sqlite-extensions && \\\n    make -j $(nproc) all && \\\n    make -j $(nproc) install && \\\n    ldconfig && \\\n    rm -rf /tmp/* && rm Python-${PYTHON3_VERSION}.tgz\nENV PATH=/usr/local/python${PYTHON3_VERSION}/bin:$PATH\nENV LD_LIBRARY_PATH=/usr/local/python${PYTHON3_VERSION}/lib/python3.6:$LD_LIBRARY_PATH\nRUN ln -s /usr/local/python${PYTHON3_VERSION}/bin/python3.6 /usr/bin/python3 && \\\n    ln -s /usr/local/python${PYTHON3_VERSION}/bin/pip3.6 /usr/bin/pip3 && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3 500 && \\\n    update-alternatives --install /usr/local/bin/pip pip /usr/bin/pip3 500 && \\\n    pip3 install --no-cache-dir --upgrade pip\n\n# Install HiAIML requirements\nADD ./tools/tools_dopt/env/docker_tf1.12/requirements3.txt /requirements3.txt\nRUN cat /requirements3.txt | xargs -n1 pip3 install\n# Bugfix for pycocotools on py3\nRUN sed -ri 's/== unicode/== bytes/' /usr/local/python3.6.8/lib/python3.6/site-packages/pycocotools/coco.py\n\n# Install horovod\nRUN ldconfig /usr/local/cuda/lib64/stubs\nRUN HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITHOUT_PYTORCH=1 HOROVOD_WITHOUT_MXNET=1 \\\n    HOROVOD_NCCL_HOME=/usr/local/cuda HOROVOD_GPU_ALLREDUCE=NCCL \\\n    pip3 install --no-cache-dir horovod\nRUN ldconfig\n\n# Install caffe1 in ddk\nWORKDIR /root\nADD ./tools/tools_dopt/env/docker_tf1.12/requirements2.txt /requirements2.txt\nRUN cat /requirements2.txt | xargs -n1 pip2 install\nRUN wget --no-check-certificate https://github.com/BVLC/caffe/archive/1.0.tar.gz && \\\n    tar zxf 1.0.tar.gz -C /root/ddk/tools/tools_dopt/caffe/ && \\\n    rm -rf /root/1.0.tar.gz && \\\n    cd /root/ddk/tools/tools_dopt/caffe/caffe-1.0/python && \\\n    for req in $(cat requirements.txt)pydot; do \\\n     pip2 install --no-cache-dir $req; \\\n   done\nRUN cd /root/ddk/tools/tools_dopt/caffe/caffe-1.0 && \\\n    sed -i \"s/arch=compute_20,code=sm_20/arch=compute_30,code=sm_30/\" Makefile.config.example && \\\n    sed -i \"s/arch=compute_20,code=sm_21/arch=compute_30,code=sm_30/\" Makefile.config.example && \\\n    sed -i \"s/\\/usr\\/lib\\/python2.7/\\/usr\\/local\\/lib\\/python2.7/\" Makefile.config.example && \\\n    sed -i \"s/.\\/src .\\/include/.\\/src .\\/include \\/usr\\/include\\/hdf5\\/serial/\" Makefile && \\\n    sed -i \"s/hdf5_hl hdf5/hdf5_serial_hl hdf5_serial/\" Makefile && \\\n    cd /root/ddk/tools/tools_dopt/caffe/ && \\\n    chmod +x ./build_caffe.sh && \\\n    chmod +x ./caffe-patch/optpatch.sh && \\\n    sh build_caffe.sh\n\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/ddk/tools/tools_dopt/caffe/caffe-mod/libs/\nENV PYTHONPATH=/root/ddk/tools/tools_dopt/caffe/caffe-mod/python:$PYTHONPATH\n\n# Unset env\nENV http_proxy \"\"\nENV https_proxy \"\"\nENV HTTP_PROXY \"\"\n"
}