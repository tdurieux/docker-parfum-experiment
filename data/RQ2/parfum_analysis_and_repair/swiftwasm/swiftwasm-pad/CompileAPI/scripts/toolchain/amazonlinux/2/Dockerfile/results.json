{
  "startTime": 1674250282565,
  "endTime": 1674250283181,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 13,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 5,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM amazonlinux:2\n\nWORKDIR /home/ec2-user\n\nARG SWIFT_TAG=\"swift-wasm-5.3-SNAPSHOT-2020-08-28-a\"\n\n# The build needs a package from the EPEL repo so that needs to be enabled.\n# https://www.tecmint.com/install-epel-repository-on-centos/\nRUN yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && rm -rf /var/cache/yum\n\n# Update and install needed build packages\nRUN yum -y update\nRUN yum -y group install \"development tools\"\nRUN yum -y install \\\n      git cmake clang python swig uuid-devel libicu-devel libedit-devel \\\n      libxml2-devel sqlite-devel ncurses-devel pkgconfig python-devel \\\n      python-pkgconfig libbsd-devel libuuid-devel pexpect curl-devel \\\n      tzdata rsync wget which python-six && rm -rf /var/cache/yum\n\n# Grab an updated version of cmake\nRUN wget https://cmake.org/files/v3.15/cmake-3.15.5-Linux-x86_64.tar.gz \\\n      && tar xvzf cmake-3.15.5-Linux-x86_64.tar.gz \\\n      && rm cmake-3.15.5-Linux-x86_64.tar.gz\n\n# Add updated version of cmake to path\nENV PATH=\"/home/ec2-user/cmake-3.15.5-Linux-x86_64/bin/:${PATH}\"\n\n# Cloning ninja into the root build area will cause it to be built by\n# the build script and used instead of having to install a binary version\nRUN git clone https://github.com/ninja-build/ninja.git\n\n# Bootstrap the swift source and do a full checkout\nRUN git clone --branch ${SWIFT_TAG} https://github.com/swiftwasm/swift.git\nWORKDIR /home/ec2-user/swift\nRUN ./utils/update-checkout --clone --scheme wasm/5.3\n\n# Configure all build directories\nRUN ./utils/build-script --release \\\n        --wasm --build-stdlib-deployment-targets=wasi-wasm32 \\\n        --build-swift-dynamic-sdk-overlay=false \\\n        --build-swift-dynamic-stdlib=false \\\n        --build-swift-static-sdk-overlay \\\n        --build-swift-static-stdlib \\\n        --llvm-targets-to-build=\"X86;WebAssembly\" \\\n        --stdlib-deployment-targets=wasi-wasm32 \\\n        --wasi-sdk=/home/ec2-user/wasi-sdk \\\n        --extra-cmake-options=' \\\n        -DWASI_ICU_URL:STRING=\"https://github.com/swiftwasm/icu4c-wasi/releases/download/0.5.0/icu4c-wasi.tar.xz\" \\\n        -DWASI_ICU_MD5:STRING=\"d41d8cd98f00b204e9800998ecf8427e\" \\\n        -DSWIFT_PRIMARY_VARIANT_SDK:STRING=WASI \\\n        -DSWIFT_PRIMARY_VARIANT_ARCH:STRING=wasm32 \\\n        -DSWIFT_SDKS='\"'\"'WASI;LINUX'\"'\"' \\\n        -DSWIFT_BUILD_SOURCEKIT=FALSE \\\n        -DSWIFT_ENABLE_SOURCEKIT_TESTS=FALSE \\\n        -DSWIFT_BUILD_SYNTAXPARSERLIB=FALSE' \\\n        --skip-build\n\n# Build LLVM and dependencies\nRUN ./utils/build-script --release \\\n        --wasm --build-stdlib-deployment-targets=wasi-wasm32 \\\n        --build-swift-dynamic-sdk-overlay=false \\\n        --build-swift-dynamic-stdlib=false \\\n        --build-swift-static-sdk-overlay \\\n        --build-swift-static-stdlib \\\n        --llvm-targets-to-build=\"X86;WebAssembly\" \\\n        --stdlib-deployment-targets=wasi-wasm32 \\\n        --wasi-sdk=/home/ec2-user/wasi-sdk \\\n        --extra-cmake-options=' \\\n        -DWASI_ICU_URL:STRING=\"https://github.com/swiftwasm/icu4c-wasi/releases/download/0.5.0/icu4c-wasi.tar.xz\" \\\n        -DWASI_ICU_MD5:STRING=\"d41d8cd98f00b204e9800998ecf8427e\" \\\n        -DSWIFT_PRIMARY_VARIANT_SDK:STRING=WASI \\\n        -DSWIFT_PRIMARY_VARIANT_ARCH:STRING=wasm32 \\\n        -DSWIFT_SDKS='\"'\"'WASI;LINUX'\"'\"' \\\n        -DSWIFT_BUILD_SOURCEKIT=FALSE \\\n        -DSWIFT_ENABLE_SOURCEKIT_TESTS=FALSE \\\n        -DSWIFT_BUILD_SYNTAXPARSERLIB=FALSE' \\\n        --skip-build-swift\n\n# Build swiftc\nRUN /home/ec2-user/build/Ninja-ReleaseAssert/ninja-build/ninja swift \\\n       -C /home/ec2-user/build/Ninja-ReleaseAssert/swift-linux-x86_64\n\nWORKDIR /home/ec2-user\n\nRUN wget https://github.com/swiftwasm/swift/releases/download/$SWIFT_TAG/$SWIFT_TAG-linux.tar.gz \\\n  && tar xfzv $SWIFT_TAG-linux.tar.gz && rm $SWIFT_TAG-linux.tar.gz\n\nRUN cp build/Ninja-ReleaseAssert/swift-linux-x86_64/bin/swift $SWIFT_TAG/usr/bin/swift \\\n  && tar cfz $SWIFT_TAG-amazonlinux2.tar.gz $SWIFT_TAG\n"
}