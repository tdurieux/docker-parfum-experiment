{
  "startTime": 1674246135511,
  "endTime": 1674246136403,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 7,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 29,
        "columnStart": 25,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.10-stretch\n\nRUN dpkg --add-architecture armel \\\n    && dpkg --add-architecture armhf \\\n    && dpkg --add-architecture arm64 \\\n    && dpkg --add-architecture ppc64el \\\n    && apt-get update && apt-get install -y \\\n    build-essential \\\n    curl \\\n    sudo \\\n    gawk \\\n    iptables \\\n    jq \\\n    pkg-config \\\n    libaio-dev \\\n    libcap-dev \\\n    libprotobuf-dev \\\n    libprotobuf-c0-dev \\\n    libnl-3-dev \\\n    libnet-dev \\\n    libseccomp2 \\\n    libseccomp-dev \\\n    protobuf-c-compiler \\\n    protobuf-compiler \\\n    python-minimal \\\n    uidmap \\\n    kmod \\\n    crossbuild-essential-armel crossbuild-essential-armhf crossbuild-essential-arm64 crossbuild-essential-ppc64el \\\n    libseccomp-dev:armel libseccomp-dev:armhf libseccomp-dev:arm64 libseccomp-dev:ppc64el \\\n    --no-install-recommends \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Add a dummy user for the rootless integration tests. While runC does\n# not require an entry in /etc/passwd to operate, one of the tests uses\n# `git clone` -- and `git clone` does not allow you to clone a\n# repository if the current uid does not have an entry in /etc/passwd.\nRUN useradd -u1000 -m -d/home/rootless -s/bin/bash rootless\n\n# install bats\nRUN cd /tmp \\\n    && git clone https://github.com/sstephenson/bats.git \\\n    && cd bats \\\n    && git reset --hard 03608115df2071fff4eaaff1605768c275e5f81f \\\n    && ./install.sh /usr/local \\\n    && rm -rf /tmp/bats\n\n# install criu\nENV CRIU_VERSION v3.7\nRUN mkdir -p /usr/src/criu \\\n    && curl -f -sSL https://github.com/checkpoint-restore/criu/archive/${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \\\n    && cd /usr/src/criu \\\n    && make install-criu \\\n    && rm -rf /usr/src/criu\n\n# setup a playground for us to spawn containers in\nENV ROOTFS /busybox\nRUN mkdir -p ${ROOTFS}\n\nCOPY script/tmpmount /\nWORKDIR /go/src/github.com/opencontainers/runc\nENTRYPOINT [\"/tmpmount\"]\n\nADD . /go/src/github.com/opencontainers/runc\n\nRUN . tests/integration/multi-arch.bash \\\n    && curl -f -o- -sSL `get_busybox` | tar xfJC - ${ROOTFS}\n"
}