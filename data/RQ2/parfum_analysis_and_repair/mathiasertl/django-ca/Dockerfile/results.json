{
  "startTime": 1674252589681,
  "endTime": 1674252590498,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 52,
        "columnEnd": 87
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 43,
        "columnStart": 52,
        "columnEnd": 41
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 45,
        "columnEnd": 103
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 17,
        "columnStart": 45,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG IMAGE=python:3.10-alpine3.16\n\nFROM $IMAGE as base\nWORKDIR /usr/src/django-ca\n\nRUN --mount=type=cache,target=/etc/apk/cache apk upgrade\nRUN --mount=type=cache,target=/etc/apk/cache apk add --no-cache --update \\\n        pcre openssl tzdata binutils busybox libpq postgresql-client mariadb-connector-c mariadb-client\n\n# Add user (some tests check if it's impossible to write a file)\nRUN addgroup -g 9000 -S django-ca && \\\n    adduser -S -u 9000 -G django-ca django-ca\n\nFROM base as build\nRUN --mount=type=cache,target=/etc/apk/cache apk add --no-cache \\\n        build-base linux-headers libffi libffi-dev openssl-dev \\\n        pcre-dev mailcap mariadb-connector-c-dev postgresql-dev cargo\n\nCOPY requirements/ requirements/\nRUN --mount=type=cache,target=/root/.cache/pip/http pip install --no-cache-dir -U setuptools pip wheel\n\nCOPY ca/django_ca/__init__.py ca/django_ca/\nCOPY setup.cfg setup.py pyproject.toml ./\nCOPY --chown=django-ca:django-ca docs/source/intro.rst docs/source/intro.rst\nRUN --mount=type=cache,target=/root/.cache/pip/http \\\n    pip install --no-cache-dir --no-warn-script-location --ignore-installed --prefix=/install \\\n        -r requirements/requirements-docker.txt \\\n        -e .[celery,acme,redis,mysql,postgres]\n\n# Finally, copy sources\nCOPY ca/ ca/\n\n##############\n# Test stage #\n##############\nFROM build as test\nCOPY --from=build /install /usr/local\nENV SKIP_SELENIUM_TESTS=y\nENV SQLITE_NAME=:memory:\n\n# Install additional requirements for testing:\nRUN --mount=type=cache,target=/root/.cache/pip/http pip install --no-cache-dir \\\n    -r requirements/requirements-test.txt\n\n# copy this late so that changes do not trigger a cache miss during build\nCOPY tox.ini pyproject.toml ./\nCOPY setup.py dev.py common.py recreate-fixtures.py ./\nCOPY --chown=django-ca:django-ca ca/ ca/\n\n# Create some files/directories that we need later on\nRUN touch .coverage\nRUN mkdir -p /var/lib/django-ca/\nRUN chown django-ca:django-ca .coverage /var/lib/django-ca/ /usr/src/django-ca/ca\n\n# From here on, we run as normal user\nUSER django-ca:django-ca\n\n# doctests are run by test suite, CA files are also loaded\nCOPY docs/source/ docs/source/\n\n# Run linters and unit tests\nCOPY devscripts/ devscripts/\nARG FAIL_UNDER=100\nRUN python dev.py coverage --format=text --fail-under=$FAIL_UNDER\n\n###############\n# Build stage #\n###############\nFROM build as prepare\nCOPY --from=build /install /install\n\nCOPY ca/ ca/\nCOPY scripts/* ca/\nCOPY conf/ ca/conf/\nCOPY uwsgi/ uwsgi/\nCOPY nginx/ nginx/\nRUN rm -rf requirements/ ca/django_ca/tests ca/ca/test_settings.py ca/ca/localsettings.py.example ca/.coverage\n\n# Test that imports are working\nCOPY dev.py common.py ./\nRUN cp -a /install/* /usr/local/\nENV DJANGO_CA_SECRET_KEY=dummy\nCOPY devscripts/test-imports.py ./\nRUN ./test-imports.py\n\n# Remove files from working directory\nRUN rm dev.py\n\n# Seems like with BuildKit, the test stage is never executed unless we somehow depend on it\nCOPY --from=test /usr/src/django-ca/.coverage /tmp\n\n###############\n# final stage #\n###############\nFROM base\nCOPY --from=build /install /usr/local\n\nRUN mkdir -p /usr/share/django-ca/static /usr/share/django-ca/media /var/lib/django-ca/ \\\n             /var/lib/django-ca/certs/ca/shared /var/lib/django-ca/certs/ocsp \\\n             /var/lib/django-ca/shared && \\\n    chown -R django-ca:django-ca /usr/share/django-ca/ /var/lib/django-ca/\n\nCOPY --from=prepare /usr/src/django-ca/ ./\nRUN ln -s /usr/src/django-ca/ca/manage.py /usr/local/bin/manage\n\nUSER django-ca:django-ca\nEXPOSE 8000\nVOLUME [\"/var/lib/django-ca/\", \"/usr/share/django-ca/media/\"]\nWORKDIR /usr/src/django-ca/ca/\nENV DJANGO_CA_SETTINGS=conf/\nCMD ./uwsgi.sh\n"
}