diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/paddlepaddle/serving/tools/Dockerfile.devel b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/paddlepaddle/serving/tools/Dockerfile.devel/repaired.Dockerfile
index 791bf69..2f95528 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/paddlepaddle/serving/tools/Dockerfile.devel
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/paddlepaddle/serving/tools/Dockerfile.devel/repaired.Dockerfile
@@ -22,20 +22,20 @@ RUN sed -i s:/archive.ubuntu.com:/mirrors.tuna.tsinghua.edu.cn/ubuntu:g /etc/apt
     apt-get -y update --fix-missing
 
 # Prepare packages for Python
-RUN apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
+RUN apt-get install --no-install-recommends -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
     libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
-    xz-utils tk-dev libffi-dev liblzma-dev
+    xz-utils tk-dev libffi-dev liblzma-dev && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get install -y --allow-downgrades --allow-change-held-packages \
+RUN apt-get install --no-install-recommends -y --allow-downgrades --allow-change-held-packages \
     patchelf git python-pip python-dev python-opencv openssh-server bison \
     wget unzip unrar tar xz-utils bzip2 gzip coreutils ntp \
-    curl sed grep graphviz libjpeg-dev zlib1g-dev  \
+    curl sed grep graphviz libjpeg-dev zlib1g-dev \
     python-matplotlib unzip \
-    automake locales clang-format swig  \
+    automake locales clang-format swig \
     liblapack-dev liblapacke-dev libcurl4-openssl-dev \
     net-tools libtool module-init-tools vim && \
-    apt-get install libprotobuf-dev -y && \
-    apt-get clean -y
+    apt-get install --no-install-recommends libprotobuf-dev -y && \
+    apt-get clean -y && rm -rf /var/lib/apt/lists/*;
 
 RUN ln -s /usr/lib/x86_64-linux-gnu/libssl.so /usr/lib/libssl.so.10 && \
     ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so /usr/lib/libcrypto.so.10
@@ -45,15 +45,15 @@ RUN wget -q --no-check-certificate https://paddle-serving.bj.bcebos.com/python/s
     rm -rf shellcheck-v0.7.1.linux.x86_64.tar.xz shellcheck-v0.7.1
 
 # Downgrade gcc&&g++
-WORKDIR /usr/bin 
-      COPY tools/dockerfiles/build_scripts /build_scripts 
-      RUN bash /build_scripts/install_gcc.sh gcc82 && rm -rf /build_scripts 
-      RUN cp gcc gcc.bak && cp g++ g++.bak && rm gcc && rm g++ 
-      RUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/local/bin/gcc 
-      RUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/local/bin/g++ 
-      RUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/bin/gcc 
-      RUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/bin/g++ 
-      ENV PATH=/usr/local/gcc-8.2/bin:$PATH 
+WORKDIR /usr/bin
+      COPY tools/dockerfiles/build_scripts /build_scripts
+      RUN bash /build_scripts/install_gcc.sh gcc82 && rm -rf /build_scripts
+      RUN cp gcc gcc.bak && cp g++ g++.bak && rm gcc && rm g++
+      RUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/local/bin/gcc
+      RUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/local/bin/g++
+      RUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/bin/gcc
+      RUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/bin/g++
+      ENV PATH=/usr/local/gcc-8.2/bin:$PATH
 
 # install cmake
 WORKDIR /home
@@ -63,31 +63,31 @@ ENV PATH=/home/cmake-3.16.0-Linux-x86_64/bin:$PATH
 # Install Python build
 RUN mkdir -p /root/python_build/ && wget -q https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz && \
     tar -zxf sqlite-autoconf-3250300.tar.gz && cd sqlite-autoconf-3250300 && \
-    ./configure -prefix=/usr/local && make -j8 && make install && cd ../ && rm sqlite-autoconf-3250300.tar.gz
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" -prefix=/usr/local && make -j8 && make install && cd ../ && rm sqlite-autoconf-3250300.tar.gz
 
 # Install Python3.6
 RUN wget -q --no-check-certificate https://paddle-serving.bj.bcebos.com/python/Python-3.6.0.tgz && \
     tar -xzf Python-3.6.0.tgz && cd Python-3.6.0 && \
-    CFLAGS="-Wformat" ./configure --prefix=/usr/local/ --enable-shared > /dev/null && \
-    make -j8 > /dev/null && make altinstall > /dev/null && ldconfig && cd .. && rm -rf Python-3.6.0*
+    CFLAGS="-Wformat" ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local/ --enable-shared > /dev/null && \
+    make -j8 > /dev/null && make altinstall > /dev/null && ldconfig && cd .. && rm -rf Python-3.6.0* && rm Python-3.6.0.tgz
 
 # Install Python3.7
 RUN wget -q --no-check-certificate https://paddle-serving.bj.bcebos.com/python/Python-3.7.0.tgz && \
     tar -xzf Python-3.7.0.tgz && cd Python-3.7.0 && \
-    CFLAGS="-Wformat" ./configure --prefix=/usr/local/ --enable-shared > /dev/null && \
-    make -j8 > /dev/null && make altinstall > /dev/null && ldconfig && cd .. && rm -rf Python-3.7.0*
+    CFLAGS="-Wformat" ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local/ --enable-shared > /dev/null && \
+    make -j8 > /dev/null && make altinstall > /dev/null && ldconfig && cd .. && rm -rf Python-3.7.0* && rm Python-3.7.0.tgz
 
 # Install Python3.8
 RUN wget -q --no-check-certificate https://paddle-serving.bj.bcebos.com/python/Python-3.8.0.tgz && \
     tar -xzf Python-3.8.0.tgz && cd Python-3.8.0 && \
-    CFLAGS="-Wformat" ./configure --prefix=/usr/local/ --enable-shared > /dev/null && \
-    make -j8 > /dev/null && make altinstall > /dev/null && ldconfig && cd .. && rm -rf Python-3.8.0*
+    CFLAGS="-Wformat" ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local/ --enable-shared > /dev/null && \
+    make -j8 > /dev/null && make altinstall > /dev/null && ldconfig && cd .. && rm -rf Python-3.8.0* && rm Python-3.8.0.tgz
 
 # Install Python3.9
 RUN wget -q --no-check-certificate https://paddle-serving.bj.bcebos.com/python/Python-3.9.0.tgz && \
     tar -xzf Python-3.9.0.tgz && cd Python-3.9.0 && \
-    CFLAGS="-Wformat" ./configure --prefix=/usr/local/ --enable-shared > /dev/null && \
-    make -j8 > /dev/null && make altinstall > /dev/null && ldconfig && cd .. && rm -rf Python-3.9.0*
+    CFLAGS="-Wformat" ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local/ --enable-shared > /dev/null && \
+    make -j8 > /dev/null && make altinstall > /dev/null && ldconfig && cd .. && rm -rf Python-3.9.0* && rm Python-3.9.0.tgz
 
 
 ENV LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}
@@ -115,9 +115,9 @@ ENV PATH=usr/local/go/bin:/root/go/bin:${PATH}
 # 2. Manually add ~IPluginFactory() in IPluginFactory class of NvInfer.h, otherwise, it couldn't work in paddle.
 #    See https://github.com/PaddlePaddle/Paddle/issues/10129 for details.
 
-# Downgrade TensorRT 
+# Downgrade TensorRT
 COPY tools/dockerfiles/build_scripts /build_scripts
-RUN bash /build_scripts/install_trt.sh 
+RUN bash /build_scripts/install_trt.sh
 RUN rm -rf /build_scripts
 
 # git credential to skip password typing
@@ -139,11 +139,11 @@ CMD source ~/.bashrc
 # ccache 3.7.9
 RUN wget https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \
     tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \
-    ./configure -prefix=/usr/local/ccache-3.7.9 && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" -prefix=/usr/local/ccache-3.7.9 && \
     make -j8 && make install && \
-    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache
+    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache && rm ccache-3.7.9.tar.gz
 
-# Update pip version 
+# Update pip version
 RUN python3.9 -m pip install --upgrade pip==22.0.3 -i https://pypi.douban.com/simple && \
     python3.8 -m pip install --upgrade pip -i https://pypi.douban.com/simple && \
     python3.7 -m pip install --upgrade pip -i https://pypi.douban.com/simple && \