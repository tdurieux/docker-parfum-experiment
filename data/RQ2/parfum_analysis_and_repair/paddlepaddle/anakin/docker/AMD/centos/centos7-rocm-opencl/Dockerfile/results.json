{
  "startTime": 1674252217564,
  "endTime": 1674252218660,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 28,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7.4.1708\n\n# anakin install ubuntu GPU env\nRUN yum -y install vim wget git make glibc-devel libstdc++-deve epel-release gcc gcc-c++ libstdc++ && rm -rf /var/cache/yum/*\n\nRUN yum -y install python-pip && rm -rf /var/cache/yum/*\n\nRUN pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir \\\n        flask numpy pyyaml scipy pandas\n\n# set env\nENV LIBRARY_PATH /usr/lib64:$LIBRARY_PATH\n\n# install cmake\nRUN wget https://cmake.org/files/v3.2/cmake-3.2.0.tar.gz && tar xzf cmake-3.2.0.tar.gz && \\\n    cd cmake-3.2.0 && ./bootstrap && \\\n    make -j4 && make install && cd .. && rm -f cmake-3.2.0.tar.gz\n\n# install protobuf\nRUN wget --no-check-certificate https://mirror.sobukus.de/files/src/protobuf/protobuf-cpp-3.4.0.tar.gz \\\n    && tar -xvf protobuf-cpp-3.4.0.tar.gz \\\n    && cd protobuf-3.4.0 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j4 && make install && cd .. \\\n    && rm -f protobuf-cpp-3.4.0.tar.gz\n\nRUN echo \"[ROCm]\" > /etc/yum.repos.d/rocm.repo \\\n    && echo \"name=ROCm\" >> /etc/yum.repos.d/rocm.repo \\\n    && echo \"baseurl=http://repo.radeon.com/rocm/yum/rpm\" >> /etc/yum.repos.d/rocm.repo \\\n    && echo \"enabled=1\" >> /etc/yum.repos.d/rocm.repo \\\n    && echo \"gpgcheck=0\" >> /etc/yum.repos.d/rocm.repo\n\nRUN yum -y install rocm-opencl rocm-opencl-devel && rm -rf /var/cache/yum/*\n\n# set env\nENV LIBRARY_PATH /opt/rocm/lib:/opt/rocm/opencl/lib/x86_64:$LIBRARY_PATH\nENV OCL_ROOT /opt/rocm/opencl/lib/x86_64\nENV PATH /opt/rocm/bin:/opt/rocm/opencl/bin/x86_64:$PATH\n\nRUN git clone --branch AMD --recursive \"https://github.com/PaddlePaddle/Anakin.git\" /root/Anakin && cd /root/Anakin/tools/ && ./amd_gpu_build.sh && cd -\n\n"
}