diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/paddlepaddle/continuous_evaluation/continuous_evaluation_py23/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/paddlepaddle/continuous_evaluation/continuous_evaluation_py23/Dockerfile/repaired.Dockerfile
index 8c27dfb..1f3fafb 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/paddlepaddle/continuous_evaluation/continuous_evaluation_py23/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/paddlepaddle/continuous_evaluation/continuous_evaluation_py23/Dockerfile/repaired.Dockerfile
@@ -26,17 +26,17 @@ ENV HOME /root
 COPY ./paddle/scripts/docker/root/ /root/
 
 RUN apt-get update && \
-    apt-get install -y --allow-downgrades \
+    apt-get install --no-install-recommends -y --allow-downgrades \
     git python-pip python-dev openssh-server bison \
     libnccl2 libnccl-dev \
     wget unzip unrar tar xz-utils bzip2 gzip coreutils ntp \
-    curl sed grep graphviz libjpeg-dev zlib1g-dev  \
+    curl sed grep graphviz libjpeg-dev zlib1g-dev \
     python-matplotlib gcc-4.8 g++-4.8 \
-    automake locales clang-format swig doxygen cmake  \
+    automake locales clang-format swig doxygen cmake \
     liblapack-dev liblapacke-dev \
     clang-3.8 llvm-3.8 libclang-3.8-dev \
     net-tools libtool && \
-    apt-get clean -y
+    apt-get clean -y && rm -rf /var/lib/apt/lists/*;
 
 # Install Go and glide
 RUN wget -qO- https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz | \
@@ -48,7 +48,7 @@ ENV GOROOT=/usr/local/go GOPATH=/root/gopath
 # should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.
 ENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
 # install glide
-RUN curl -s -q https://glide.sh/get | sh
+RUN curl -f -s -q https://glide.sh/get | sh
 
 # Install TensorRT
 # following TensorRT.tar.gz is not the default official one, we do two miny changes:
@@ -56,7 +56,7 @@ RUN curl -s -q https://glide.sh/get | sh
 #    and its size is only one-third of the official one.
 # 2. Manually add ~IPluginFactory() in IPluginFactory class of NvInfer.h, otherwise, it couldn't work in paddle.
 #    See https://github.com/PaddlePaddle/Paddle/issues/10129 for details.
-RUN wget -qO- http://paddlepaddledeps.bj.bcebos.com/TensorRT-4.0.0.3.Ubuntu-16.04.4.x86_64-gnu.cuda-8.0.cudnn7.0.tar.gz | \
+RUN wget -qO- https://paddlepaddledeps.bj.bcebos.com/TensorRT-4.0.0.3.Ubuntu-16.04.4.x86_64-gnu.cuda-8.0.cudnn7.0.tar.gz | \
     tar -xz -C /usr/local && \
     cp -rf /usr/local/TensorRT/include /usr && \
     cp -rf /usr/local/TensorRT/lib /usr
@@ -73,22 +73,22 @@ RUN localedef -i en_US -f UTF-8 en_US.UTF-8
 # specify sphinx version as 1.5.6 and remove -U option for [pip install -U
 # sphinx-rtd-theme] since -U option will cause sphinx being updated to newest
 # version(1.7.1 for now), which causes building documentation failed.
-RUN pip install --upgrade pip==9.0.3 && \
-    pip install -U wheel && \
-    pip install -U docopt PyYAML sphinx==1.5.6 && \
-    pip install sphinx-rtd-theme==0.1.9 recommonmark
+RUN pip install --no-cache-dir --upgrade pip==9.0.3 && \
+    pip install --no-cache-dir -U wheel && \
+    pip install --no-cache-dir -U docopt PyYAML sphinx==1.5.6 && \
+    pip install --no-cache-dir sphinx-rtd-theme==0.1.9 recommonmark
 
-RUN pip install pre-commit 'ipython==5.3.0' && \
-    pip install 'ipykernel==4.6.0' 'jupyter==1.0.0' && \
-    pip install opencv-python
+RUN pip install --no-cache-dir pre-commit 'ipython==5.3.0' && \
+    pip install --no-cache-dir 'ipykernel==4.6.0' 'jupyter==1.0.0' && \
+    pip install --no-cache-dir opencv-python
 
 COPY ./python/requirements.txt /root/
-RUN pip install -r /root/requirements.txt
+RUN pip install --no-cache-dir -r /root/requirements.txt
 
 # To fix https://github.com/PaddlePaddle/Paddle/issues/1954, we use
 # the solution in https://urllib3.readthedocs.io/en/latest/user-guide.html#ssl-py2
-RUN apt-get install -y libssl-dev libffi-dev
-RUN pip install certifi urllib3[secure]
+RUN apt-get install --no-install-recommends -y libssl-dev libffi-dev && rm -rf /var/lib/apt/lists/*;
+RUN pip install --no-cache-dir certifi urllib3[secure]
 
 
 # Install woboq_codebrowser to /woboq
@@ -107,10 +107,10 @@ RUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config
 EXPOSE 22
 
 # build the app and host it
-RUN apt-get update && apt-get install -y python3 python3-pip mongodb openjdk-8-jdk ccache
-RUN pip3 install flask flask-cache pymongo xonsh numpy
+RUN apt-get update && apt-get install --no-install-recommends -y python3 python3-pip mongodb openjdk-8-jdk ccache && rm -rf /var/lib/apt/lists/*;
+RUN pip3 install --no-cache-dir flask flask-cache pymongo xonsh numpy
 
-RUN apt-get update && apt install -y uwsgi nginx supervisor software-properties-common python-software-properties
+RUN apt-get update && apt install --no-install-recommends -y uwsgi nginx supervisor software-properties-common python-software-properties && rm -rf /var/lib/apt/lists/*;
 
 ENV NGINX_MAX_UPLOAD 0