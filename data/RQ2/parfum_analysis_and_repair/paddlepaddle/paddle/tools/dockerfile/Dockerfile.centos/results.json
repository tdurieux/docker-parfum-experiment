{
  "startTime": 1674253452038,
  "endTime": 1674253453659,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 48
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 25,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 68,
        "columnEnd": 79
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 144
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 2,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NOTE The manylinux1 policy mandates CentOS-5. We replace it with CentOS-6 in\n# order to satisfy the build of capnproto library (a nupic.core dependency),\n# which requires some headers and symbols not present on CentOS-5 (e.g.,\n# signalfd.h, pipe2, O_NONBLOCK, SOCK_NONBLOCK, etc.). See\n# https://github.com/sandstorm-io/capnproto/issues/350.\nFROM nvidia/cuda:<baseimg>\nMAINTAINER Numenta, based on the ManyLinux project\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\nENV PATH /opt/rh/devtoolset-2/root/usr/bin:$PATH\nENV LD_LIBRARY_PATH /usr/local/ssl/lib:/opt/rh/devtoolset-2/root/usr/lib64:/opt/rh/devtoolset-2/root/usr/lib:/usr/local/lib64:/usr/local/lib:${LD_LIBRARY_PATH}\nENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig\n\nRUN yum install -y bzip2 gettext-devel sqlite-devel zlib-devel openssl-devel pcre-devel vim tk-devel tkinter libtool xz graphviz wget curl-devel && rm -rf /var/cache/yum\nCOPY build_scripts /build_scripts\nRUN bash build_scripts/build.sh\nRUN bash build_scripts/install_nccl2.sh\nRUN bash build_scripts/install_trt.sh\nRUN rm -rf build_scripts\nRUN ln -s /usr/local/ssl/include/openssl /usr/include\n\n# git 2.17.1\nRUN wget -q https://paddle-ci.gz.bcebos.com/git-2.17.1.tar.gz && \\\n  tar -xvf git-2.17.1.tar.gz && \\\n  cd git-2.17.1 && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-openssl --prefix=/usr/local && \\\n  make -j8 && make install && rm git-2.17.1.tar.gz\n\nENV SSL_CERT_FILE=/opt/_internal/certs.pem\nENV GOROOT=/usr/local/go GOPATH=/root/gopath\nENV PATH=/usr/local/ssl:${GOROOT}/bin:${GOPATH}/bin:${PATH}\nENV LIBRARY_PATH=/usr/local/ssl/lib:$LIBRARY_PATH\n\n# for paddle\nRUN wget --no-check-certificate -qO- https://paddle-ci.gz.bcebos.com/go1.15.12.linux-amd64.tar.gz | \\\n    tar -xz -C /usr/local && \\\n    mkdir /root/gopath && \\\n    mkdir /root/gopath/bin && \\\n    mkdir /root/gopath/src\n\n\n# protobuf 3.6.1\nRUN cd /opt && wget -q --no-check-certificate https://paddle-ci.cdn.bcebos.com/protobuf-cpp-3.6.1.tar.gz && \\ \n    tar xzf protobuf-cpp-3.6.1.tar.gz && \\\n    cd protobuf-3.6.1 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j4 && make install && cd .. && rm -f protobuf-cpp-3.6.1.tar.gz\n\nRUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/requirements.txt -O /root/requirements.txt\n\nRUN LD_LIBRARY_PATH=/opt/_internal/cpython-3.6.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.6.0/bin/pip3 install setuptools -U && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.7.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.7.0/bin/pip3 install setuptools -U && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.8.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.8.0/bin/pip3 install setuptools -U && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.9.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.9.0/bin/pip3 install setuptools -U\n\nRUN LD_LIBRARY_PATH=/opt/_internal/cpython-3.6.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.6.0/bin/pip3 install -r /root/requirements.txt && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.7.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.7.0/bin/pip3 install -r /root/requirements.txt && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.8.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.8.0/bin/pip3 install -r /root/requirements.txt && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.9.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.9.0/bin/pip3 install -r /root/requirements.txt && \\\n    go get github.com/Masterminds/glide && \\\n    rm -rf /root/requirements.txt\n\nRUN LD_LIBRARY_PATH=/opt/_internal/cpython-3.6.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.6.0/bin/pip3 install pre-commit 'ipython==5.3.0' && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.7.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.7.0/bin/pip3 install pre-commit 'ipython==5.3.0' && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.8.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.8.0/bin/pip3 install pre-commit 'ipython==5.3.0' && \\\n    LD_LIBRARY_PATH=/opt/_internal/cpython-3.9.0/lib/:${LD_LIBRARY_PATH} /opt/_internal/cpython-3.9.0/bin/pip3 install pre-commit 'ipython==5.3.0'\n\nRUN wget -O /opt/swig-2.0.12.tar.gz --no-check-certificate https://sourceforge.net/projects/swig/files/swig/swig-2.0.12/swig-2.0.12.tar.gz/download && \\\n    cd /opt && tar xzf swig-2.0.12.tar.gz && cd /opt/swig-2.0.12 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && cd /opt && rm swig-2.0.12.tar.gz\n\n# ccache 3.7.9\nRUN wget https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \\\n    tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -prefix=/usr/local/ccache-3.7.9 && \\\n    make -j8 && make install && \\\n    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache && rm ccache-3.7.9.tar.gz\n\nCMD [\"bash\", \"/paddle/paddle/scripts/docker/build.sh\"]\n"
}