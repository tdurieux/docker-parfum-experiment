diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/paddlepaddle/paddle/tools/dockerfile/Dockerfile.npu_aarch64 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/paddlepaddle/paddle/tools/dockerfile/Dockerfile.npu_aarch64/repaired.Dockerfile
index 9317311..8e523db 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/paddlepaddle/paddle/tools/dockerfile/Dockerfile.npu_aarch64
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/paddlepaddle/paddle/tools/dockerfile/Dockerfile.npu_aarch64/repaired.Dockerfile
@@ -3,7 +3,7 @@
 # Update CANN_VERSION if using other versions
 #
 # Build: CANN 5.0.2.alpha005
-# Download pkgs from https://www.hiascend.com/software/cann/community 
+# Download pkgs from https://www.hiascend.com/software/cann/community
 # and copy them to current dir first, then run build commands
 # cd Paddle/tools/dockerfile
 # docker build -f Dockerfile.npu_aarch64  \
@@ -19,14 +19,14 @@
 FROM ubuntu:18.04
 MAINTAINER PaddlePaddle Authors <paddle-dev@baidu.com>
 
-RUN apt-get update && apt-get install -y apt-utils
+RUN apt-get update && apt-get install --no-install-recommends -y apt-utils && rm -rf /var/lib/apt/lists/*;
 RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
-RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
-RUN apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test
-RUN apt-get update && apt-get install -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip make libgcc-s1 sudo openssh-server \
+RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install --no-install-recommends -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip make libgcc-s1 sudo openssh-server \
             coreutils ntp language-pack-zh-hans python-qt4 libsm6 libxext6 libxrender-dev libgl1-mesa-glx libsqlite3-dev libopenblas-dev \
             bison graphviz libjpeg-dev zlib1g zlib1g-dev automake locales swig net-tools libtool module-init-tools numactl libnuma-dev \
-            openssl libffi-dev pciutils libblas-dev gfortran libblas3 liblapack-dev liblapack3 default-jre screen tmux gdb lldb gcc g++
+            openssl libffi-dev pciutils libblas-dev gfortran libblas3 liblapack-dev liblapack3 default-jre screen tmux gdb lldb gcc g++ && rm -rf /var/lib/apt/lists/*;
 
 # GCC 8.2
 WORKDIR /opt
@@ -45,7 +45,7 @@ RUN wget -q https://paddle-ci.gz.bcebos.com/gcc-8.2.0.tar.xz && \
     cp /opt/compiler/gcc-8.2/lib64/libstdc++.so.6.0.25 /usr/lib/aarch64-linux-gnu && \
     cd /usr/bin && mv gcc gcc.bak && mv g++ g++.bak && \
     ln -s /opt/compiler/gcc-8.2/bin/gcc /usr/bin/gcc && \
-    ln -s /opt/compiler/gcc-8.2/bin/g++ /usr/bin/g++
+    ln -s /opt/compiler/gcc-8.2/bin/g++ /usr/bin/g++ && rm gcc-8.2.0.tar.xz
 ENV PATH=/opt/compiler/gcc-8.2/bin:$PATH
 ENV LD_LIBRARY_PATH=/opt/compiler/gcc-8.2/lib:/opt/compiler/gcc-8.2/lib64:$LD_LIBRARY_PATH
 
@@ -65,7 +65,7 @@ ENV PATH=/opt/conda/bin:${PATH}
 RUN conda init bash && conda install -n base jupyter jupyterlab
 
 # install pylint and pre-commit
-RUN /opt/conda/bin/pip install pre-commit pylint pylint pytest astroid isort coverage qtconsole 
+RUN /opt/conda/bin/pip install pre-commit pylint pylint pytest astroid isort coverage qtconsole
 # install CANN 5.0.2 requirement
 RUN /opt/conda/bin/pip install 'numpy<1.20,>=1.13.3' 'decorator>=4.4.0' 'sympy>=1.4' 'cffi>=1.12.3' 'protobuf>=3.11.3'
 RUN /opt/conda/bin/pip install attrs pyyaml pathlib2 scipy requests psutil
@@ -86,7 +86,7 @@ ENV GOROOT=/usr/local/go GOPATH=/root/gopath
 # should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.
 ENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
 # install glide
-RUN curl -s -q https://glide.sh/get | sh
+RUN curl -f -s -q https://glide.sh/get | sh
 
 # git credential to skip password typing
 RUN git config --global credential.helper store
@@ -94,14 +94,14 @@ RUN git config --global credential.helper store
 # Fix locales to en_US.UTF-8
 RUN localedef -i en_US -f UTF-8 en_US.UTF-8
 
-RUN apt-get install libprotobuf-dev -y
+RUN apt-get install --no-install-recommends libprotobuf-dev -y && rm -rf /var/lib/apt/lists/*;
 
-RUN apt install lsof -y
+RUN apt install --no-install-recommends lsof -y && rm -rf /var/lib/apt/lists/*;
 
 # Older versions of patchelf limited the size of the files being processed and were fixed in this pr.
 # https://github.com/NixOS/patchelf/commit/ba2695a8110abbc8cc6baf0eea819922ee5007fa
 # So install a newer version here.
-RUN wget -q http://ports.ubuntu.com/pool/universe/p/patchelf/patchelf_0.10-2build1_arm64.deb && \
+RUN wget -q https://ports.ubuntu.com/pool/universe/p/patchelf/patchelf_0.10-2build1_arm64.deb && \
     dpkg -i patchelf_0.10-2build1_arm64.deb && rm -rf patchelf_0.10-2build1_arm64.deb
 
 # Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service
@@ -111,14 +111,14 @@ CMD source ~/.bashrc
 # ccache 3.7.9
 RUN wget https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \
     tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \
-    ./configure -prefix=/usr/local/ccache-3.7.9 && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" -prefix=/usr/local/ccache-3.7.9 && \
     make -j8 && make install && cd .. && rm -rf ccache-3.7.9* && \
-    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache
+    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache && rm ccache-3.7.9.tar.gz
 
 # clang-form 3.8.0
 RUN wget https://releases.llvm.org/3.8.0/clang+llvm-3.8.0-aarch64-linux-gnu.tar.xz && \ 
     tar xf clang+llvm-3.8.0-aarch64-linux-gnu.tar.xz && cd clang+llvm-3.8.0-aarch64-linux-gnu && \
-    cp -r * /usr/local && cd .. && rm -rf clang+llvm-3.8.0-aarch64-linux-gnu*
+    cp -r * /usr/local && cd .. && rm -rf clang+llvm-3.8.0-aarch64-linux-gnu* && rm clang+llvm-3.8.0-aarch64-linux-gnu.tar.xz
 
 # HwHiAiUser
 RUN groupadd HwHiAiUser && \