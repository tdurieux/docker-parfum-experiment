{
  "startTime": 1674246534667,
  "endTime": 1674246536329,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 135
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 102
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 135
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# A image for building paddle binaries\n\n# build docker image\n# docker build -t paddlepaddle/paddle:latest-dev-ipu -f tools/dockerfile/Dockerfile.ipu .\n\n# run a container\n# docker run --ulimit memlock=-1:-1 --net=host --cap-add=IPC_LOCK --device=/dev/infiniband/ --ipc=host --rm -it paddlepaddle/paddle:latest-dev-ipu bash\n\nFROM graphcore/poplar:2.5.1\nMAINTAINER PaddlePaddle Authors <paddle-dev@baidu.com>\n\n# ENV variables\nARG WITH_AVX\nENV HOME /root\nENV WITH_AVX=${WITH_AVX:-ON}\n\n# Add bash enhancements\nCOPY paddle/scripts/docker/root/ /root/\nRUN apt-get update && apt-get install --no-install-recommends -y apt-utils && rm -rf /var/lib/apt/lists/*;\nRUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip make libgcc-s1 sudo openssh-server \\\n            coreutils ntp language-pack-zh-hans python-qt4 libsm6 libxext6 libxrender-dev libgl1-mesa-glx libsqlite3-dev libopenblas-dev \\\n            bison graphviz libjpeg-dev zlib1g zlib1g-dev automake locales swig net-tools libtool module-init-tools numactl libnuma-dev \\\n            openssl libffi-dev pciutils libblas-dev gfortran libblas3 liblapack-dev liblapack3 default-jre screen tmux gdb lldb gcc g++ && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y rdma-core librdmacm1 && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install -y --no-install-recommends libspdlog-dev && rm -rf /var/lib/apt/lists/*;\n\n# Downgrade gcc&&g++\nWORKDIR /usr/bin\nCOPY tools/dockerfile/build_scripts /build_scripts\nRUN bash /build_scripts/install_gcc.sh gcc82 && rm -rf /build_scripts\nRUN cp gcc gcc.bak && cp g++ g++.bak && rm gcc && rm g++\nRUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/local/bin/gcc\nRUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/local/bin/g++\nRUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/bin/gcc\nRUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/bin/g++\nENV PATH=/usr/local/gcc-8.2/bin:$PATH\n\n# install cmake\nWORKDIR /home\nRUN wget -q https://cmake.org/files/v3.16/cmake-3.16.0-Linux-x86_64.tar.gz && tar -zxvf cmake-3.16.0-Linux-x86_64.tar.gz && rm cmake-3.16.0-Linux-x86_64.tar.gz\nENV PATH=/home/cmake-3.16.0-Linux-x86_64/bin:$PATH\n\n# conda 4.9.2\nWORKDIR /opt\nARG CONDA_FILE=Miniconda3-py37_4.9.2-Linux-x86_64.sh\nRUN cd /opt && wget -q https://repo.anaconda.com/miniconda/${CONDA_FILE} && chmod +x ${CONDA_FILE}\nRUN mkdir /opt/conda && ./${CONDA_FILE} -b -f -p \"/opt/conda\" && rm -rf ${CONDA_FILE}\nENV PATH=/opt/conda/bin:${PATH}\nRUN conda init bash && conda install -n base jupyter jupyterlab\n\n# Install Go and glide\nRUN wget -qO- https://paddle-ci.cdn.bcebos.com/go1.8.1.linux-amd64.tar.gz | \\\n    tar -xz -C /usr/local && \\\n    mkdir /root/gopath && \\\n    mkdir /root/gopath/bin && \\\n    mkdir /root/gopath/src\nENV GOROOT=/usr/local/go GOPATH=/root/gopath\n# should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.\nENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin\n# install glide\nRUN curl -f -s -q https://glide.sh/get | sh\n\n# git credential to skip password typing\nRUN git config --global credential.helper store\n\n# Fix locales to en_US.UTF-8\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\n\n# install pylint and pre-commit\nRUN /opt/conda/bin/pip install pre-commit pylint pytest astroid isort protocol PyGithub\n\n# install Paddle requirement\nRUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/requirements.txt -O /root/requirements.txt\nRUN /opt/conda/bin/pip install -r /root/requirements.txt && \\\n    rm -rf /root/requirements.txt\n\nRUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/unittest_py/requirements.txt -O /root/requirements.txt\nRUN /opt/conda/bin/pip install -r /root/requirements.txt && rm -rf /root/requirements.txt\n\n# Older versions of patchelf limited the size of the files being processed and were fixed in this pr.\n# https://github.com/NixOS/patchelf/commit/ba2695a8110abbc8cc6baf0eea819922ee5007fa\n# So install a newer version here.\nRUN wget -q https://paddle-ci.cdn.bcebos.com/patchelf_0.10-2_amd64.deb && \\\n    dpkg -i patchelf_0.10-2_amd64.deb\n\n# ccache 3.7.9\nRUN wget https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \\\n    tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -prefix=/usr/local/ccache-3.7.9 && \\\n    make -j8 && make install && \\\n    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache && rm ccache-3.7.9.tar.gz\n\n# clang-form 3.8.0\nRUN wget https://paddle-ci.cdn.bcebos.com/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz && \\ \n    tar xf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz && cd clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04 && \\\n    cp -r * /usr/local && cd .. && rm -rf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04 && rm -rf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz\n\nRUN apt-get clean -y\nEXPOSE 22\n"
}