diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/paddlepaddle/paddle/tools/dockerfile/Dockerfile.ipu b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/paddlepaddle/paddle/tools/dockerfile/Dockerfile.ipu/repaired.Dockerfile
index 8f1948d..531ba25 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/paddlepaddle/paddle/tools/dockerfile/Dockerfile.ipu
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/paddlepaddle/paddle/tools/dockerfile/Dockerfile.ipu/repaired.Dockerfile
@@ -16,27 +16,27 @@ ENV WITH_AVX=${WITH_AVX:-ON}
 
 # Add bash enhancements
 COPY paddle/scripts/docker/root/ /root/
-RUN apt-get update && apt-get install -y apt-utils
+RUN apt-get update && apt-get install --no-install-recommends -y apt-utils && rm -rf /var/lib/apt/lists/*;
 RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
-RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
-RUN apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test
-RUN apt-get update && apt-get install -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip make libgcc-s1 sudo openssh-server \
+RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install --no-install-recommends -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip make libgcc-s1 sudo openssh-server \
             coreutils ntp language-pack-zh-hans python-qt4 libsm6 libxext6 libxrender-dev libgl1-mesa-glx libsqlite3-dev libopenblas-dev \
             bison graphviz libjpeg-dev zlib1g zlib1g-dev automake locales swig net-tools libtool module-init-tools numactl libnuma-dev \
-            openssl libffi-dev pciutils libblas-dev gfortran libblas3 liblapack-dev liblapack3 default-jre screen tmux gdb lldb gcc g++
-RUN apt-get update && apt-get install -y rdma-core librdmacm1
-RUN apt-get update && apt-get install libspdlog-dev
+            openssl libffi-dev pciutils libblas-dev gfortran libblas3 liblapack-dev liblapack3 default-jre screen tmux gdb lldb gcc g++ && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install --no-install-recommends -y rdma-core librdmacm1 && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install -y --no-install-recommends libspdlog-dev && rm -rf /var/lib/apt/lists/*;
 
 # Downgrade gcc&&g++
-WORKDIR /usr/bin 
-COPY tools/dockerfile/build_scripts /build_scripts 
-RUN bash /build_scripts/install_gcc.sh gcc82 && rm -rf /build_scripts 
-RUN cp gcc gcc.bak && cp g++ g++.bak && rm gcc && rm g++ 
-RUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/local/bin/gcc 
-RUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/local/bin/g++ 
-RUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/bin/gcc 
-RUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/bin/g++ 
-ENV PATH=/usr/local/gcc-8.2/bin:$PATH 
+WORKDIR /usr/bin
+COPY tools/dockerfile/build_scripts /build_scripts
+RUN bash /build_scripts/install_gcc.sh gcc82 && rm -rf /build_scripts
+RUN cp gcc gcc.bak && cp g++ g++.bak && rm gcc && rm g++
+RUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/local/bin/gcc
+RUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/local/bin/g++
+RUN ln -s /usr/local/gcc-8.2/bin/gcc /usr/bin/gcc
+RUN ln -s /usr/local/gcc-8.2/bin/g++ /usr/bin/g++
+ENV PATH=/usr/local/gcc-8.2/bin:$PATH
 
 # install cmake
 WORKDIR /home
@@ -61,7 +61,7 @@ ENV GOROOT=/usr/local/go GOPATH=/root/gopath
 # should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.
 ENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
 # install glide
-RUN curl -s -q https://glide.sh/get | sh
+RUN curl -f -s -q https://glide.sh/get | sh
 
 # git credential to skip password typing
 RUN git config --global credential.helper store
@@ -89,14 +89,14 @@ RUN wget -q https://paddle-ci.cdn.bcebos.com/patchelf_0.10-2_amd64.deb && \
 # ccache 3.7.9
 RUN wget https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \
     tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \
-    ./configure -prefix=/usr/local/ccache-3.7.9 && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" -prefix=/usr/local/ccache-3.7.9 && \
     make -j8 && make install && \
-    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache
+    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache && rm ccache-3.7.9.tar.gz
 
 # clang-form 3.8.0
 RUN wget https://paddle-ci.cdn.bcebos.com/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz && \ 
     tar xf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz && cd clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04 && \
-    cp -r * /usr/local && cd .. && rm -rf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04 && rm -rf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz 
+    cp -r * /usr/local && cd .. && rm -rf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04 && rm -rf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz
 
 RUN apt-get clean -y
 EXPOSE 22