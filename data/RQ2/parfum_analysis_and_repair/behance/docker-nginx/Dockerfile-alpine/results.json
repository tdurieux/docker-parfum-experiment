{
  "startTime": 1674254395759,
  "endTime": 1674254396181,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM behance/docker-base:5.0.1-alpine\n\n# Use in multi-phase builds, when an init process requests for the container to gracefully exit, so that it may be committed\n# Used with alternative CMD (worker.sh), leverages supervisor to maintain long-running processes\nENV CONTAINER_ROLE=web \\\n    CONTAINER_PORT=8080 \\\n    CONF_NGINX_SITE=\"/etc/nginx/sites-available/default\" \\\n    CONF_NGINX_SERVER=\"/etc/nginx/nginx.conf\" \\\n    NOT_ROOT_USER=www-data \\\n    S6_KILL_FINISH_MAXTIME=55000\n\n# Using a non-privileged port to prevent having to use setcap internally\nEXPOSE ${CONTAINER_PORT}\n\n# Create an unprivileged user\nRUN adduser -D -S -H $NOT_ROOT_USER\n\nRUN apk update --no-cache && \\\n    apk add --no-cache \\\n        ca-certificates \\\n        nginx \\\n    && \\\n    /bin/bash -e /clean.sh\n\n# Overlay the root filesystem from this repo\nCOPY --chown=www-data ./container/root /\n\n# - Set nginx to listen on defined port\n# - Make temp directory for .nginx runtime files\n# - Fix permissions for nginx folders and run set_permissions.sh to allow running image under a non root user\nRUN sed -i \"s/listen [0-9]*;/listen ${CONTAINER_PORT};/\" $CONF_NGINX_SITE && \\\n    bash -c \"chown www-data:www-data /var/{lib,log}/nginx -Rh\" && \\\n    bash -c \"chmod 0755 -R /var/{lib,log}/nginx\" && \\\n    mkdir /tmp/.nginx && \\\n    /bin/bash -e /scripts/set_permissions.sh\n\nRUN goss -g /tests/alpine/nginx.goss.yaml validate && \\\n    /aufs_hack.sh\n"
}