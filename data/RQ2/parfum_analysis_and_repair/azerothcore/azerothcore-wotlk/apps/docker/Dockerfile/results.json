{
  "startTime": 1674249949533,
  "endTime": 1674249951573,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 33,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 109,
        "lineEnd": 111,
        "columnStart": 22,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 241,
        "lineEnd": 241,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 284,
        "lineEnd": 286,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#================================================================\n#\n# DEV: Stage used for the development environment\n#      and the locally built services\n#\n#=================================================================\n\nFROM ubuntu:20.04 as base\nARG USER_ID=1000\nARG GROUP_ID=1000\nARG DOCKER_USER=acore\n\nLABEL description=\"AC base image for dev containers\"\n\n# List of timezones: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nENV DOCKER=1\n\n# set timezone environment variable\nENV TZ=Etc/UTC\n\n# set noninteractive mode so tzdata doesn't ask to set timezone on install\nENV DEBIAN_FRONTEND=noninteractive\n\n# Do not use acore dashboard to install\n# since it's not cacheable by docker\nRUN apt-get update && apt-get install --no-install-recommends -y gdb gdbserver git dos2unix lsb-core sudo curl unzip \\\n  make cmake clang libmysqlclient-dev \\\n  libboost-system1.7*-dev libboost-filesystem1.7*-dev libboost-program-options1.7*-dev libboost-iostreams1.7*-dev \\\n  build-essential libtool cmake-data openssl libgoogle-perftools-dev google-perftools \\\n  libssl-dev libmysql++-dev libreadline6-dev zlib1g-dev libbz2-dev mysql-client \\\n  libncurses5-dev ccache \\\n  && rm -rf /var/lib/apt/lists/*\n\n# change timezone in container\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata\n\n# Create a non-root user\nRUN addgroup --gid $GROUP_ID acore && \\\n    adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID acore && \\\n    passwd -d acore && \\\n    echo 'acore ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers\n\n# must be created to set the correct permissions on them\nRUN mkdir -p /azerothcore/env/dist/bin\nRUN mkdir -p /azerothcore/env/dist/data\nRUN mkdir -p /azerothcore/env/dist/logs\nRUN mkdir -p /azerothcore/env/dist/etc\nRUN mkdir -p /azerothcore/var/build/obj\n\n# Correct permissions for non-root operations\nRUN chown -R $DOCKER_USER:$DOCKER_USER /home/acore\nRUN chown -R $DOCKER_USER:$DOCKER_USER /run\nRUN chown -R $DOCKER_USER:$DOCKER_USER /opt\nRUN chown -R $DOCKER_USER:$DOCKER_USER /azerothcore\n\nUSER $DOCKER_USER\n\n# copy everything so we can work directly within the container\n# using tools such as vscode dev-container\n# NOTE: this folder is different by the /azerothcore (which is binded instead)\nCOPY --chown=$DOCKER_USER:$DOCKER_USER . /azerothcore\n\n# Download deno and make sure the dashboard works\nRUN bash /azerothcore/acore.sh quit\n\nWORKDIR /azerothcore\n\n#================================================================\n#\n# Dev: create dev server image\n#\n#=================================================================\n\nFROM base as dev\n\nLABEL description=\"AC dev image for dev containers\"\n\n#================================================================\n#\n# SERVICE BASE: prepare the OS for the production-ready services\n#\n#=================================================================\n\nFROM ubuntu:20.04 as servicebase\n\nARG USER_ID=1000\nARG GROUP_ID=1000\nARG DOCKER_USER=acore\n\nLABEL description=\"AC service image for server applications\"\n\n# List of timezones: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\n# set timezone environment variable\nENV TZ=Etc/UTC\n\n# set noninteractive mode so tzdata doesn't ask to set timezone on install\nENV DEBIAN_FRONTEND=noninteractive\n\n# Create a non-root user\nRUN addgroup --gid $GROUP_ID acore && \\\n    adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID acore && \\\n    passwd -d acore && \\\n    echo 'acore ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers\n\n# install the required dependencies to run the server\nRUN apt-get update && apt-get install --no-install-recommends -y dos2unix gdb gdbserver google-perftools libgoogle-perftools-dev net-tools \\\n    libboost-system1.7*-dev libboost-filesystem1.7*-dev libboost-program-options1.7*-dev libboost-iostreams1.7*-dev \\\n    tzdata libmysqlclient-dev mysql-client curl unzip && rm -rf /var/lib/apt/lists/*;\n\n# change timezone in container\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata\n\n# copy the sources from the host machine\nCOPY --chown=$DOCKER_USER:$DOCKER_USER apps /azerothcore/apps\nCOPY --chown=$DOCKER_USER:$DOCKER_USER bin /azerothcore/bin\nCOPY --chown=$DOCKER_USER:$DOCKER_USER conf /azerothcore/conf\nCOPY --chown=$DOCKER_USER:$DOCKER_USER data /azerothcore/data\nCOPY --chown=$DOCKER_USER:$DOCKER_USER deps /azerothcore/deps\nCOPY --chown=$DOCKER_USER:$DOCKER_USER acore.json /azerothcore/acore.json\nCOPY --chown=$DOCKER_USER:$DOCKER_USER acore.sh /azerothcore/acore.sh\n\n# Correct permissions for non-root operations\nRUN chown -R $DOCKER_USER:$DOCKER_USER /home/acore\nRUN chown -R $DOCKER_USER:$DOCKER_USER /run\nRUN chown -R $DOCKER_USER:$DOCKER_USER /opt\n\nRUN chown $DOCKER_USER:$DOCKER_USER /azerothcore\n\nUSER $DOCKER_USER\n\n# must be created to avoid permissions errors\nRUN mkdir -p /azerothcore/env/dist/data\nRUN mkdir -p /azerothcore/env/dist/logs\nRUN mkdir -p /azerothcore/env/dist/etc\nRUN mkdir -p /azerothcore/env/dist/bin\n\n# Download deno and make sure the dashboard works\nRUN bash /azerothcore/acore.sh quit\n\nWORKDIR /azerothcore/\n\n#================================================================\n#\n# AUTH & WORLD local: images used for local services\n# These images don't include binaries by default\n#\n#=================================================================\n\nFROM servicebase as authserver-local\n\nLABEL description=\"AC authserver image for local environment\"\n\nCMD ./acore.sh run-authserver\n\nFROM servicebase as worldserver-local\n\nLABEL description=\"AC worldserver image for local environment\"\n\nCMD ./acore.sh run-worldserver\n\n#================================================================\n#\n# BUILD: compile sources\n#\n#=================================================================\nFROM base as build\n\nARG DOCKER_USER=acore\n\nLABEL description=\"AC Image used by the build stage to generate production images\"\n\nRUN mkdir -p /azerothcore/env/etc/\n\n# check if we have ccache files available outside\nCOPY --chown=$DOCKER_USER:$DOCKER_USER var/docker/ccache /azerothcore/var/ccache\nCOPY --chown=$DOCKER_USER:$DOCKER_USER env/docker/etc/authserver.conf.dockerdist /azerothcore/env/dist/etc/authserver.conf.dockerdist\nCOPY --chown=$DOCKER_USER:$DOCKER_USER env/docker/etc/worldserver.conf.dockerdist /azerothcore/env/dist/etc/worldserver.conf.dockerdist\n\n# install eluna\nRUN git clone --depth=1 --branch=master https://github.com/azerothcore/mod-eluna.git /azerothcore/modules/mod-eluna\n\nENV USER_CONF_PATH=/azerothcore/apps/docker/config-docker.sh\nENV CTYPE=RelWithDebInfo\nENV AC_CCACHE=true\nENV CCACHE_CPP2=true\nENV CSCRIPTPCH=OFF\nENV CCOREPCH=OFF\n# ENV CTOOLS_BUILD=all\nENV CTOOLS_BUILD=maps-only\nENV CSCRIPTS=static\nRUN bash apps/docker/docker-build-prod.sh\n\n#================================================================\n#\n# AUTH SERVICE: create a ready-to-use authserver image\n# with binaries included\n#\n#=================================================================\nFROM authserver-local as authserver\n\nLABEL description=\"AC Production: authserver\"\n\nARG DOCKER_USER=acore\n\nCOPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/etc /azerothcore/env/dist/etc\nCOPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/bin/authserver /azerothcore/env/dist/bin/authserver\n\n#================================================================\n#\n# WORLD SERVICE: create a ready-to-use worldserver image\n# with binaries and data included\n#\n#=================================================================\nFROM worldserver-local as worldserver\n\nLABEL description=\"AC Production: worldserver\"\n\nARG DOCKER_USER=acore\n\nRUN mkdir -p /azerothcore/env/dist/bin/lua_scripts\nCOPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/etc /azerothcore/env/dist/etc\nCOPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/bin/worldserver /azerothcore/env/dist/bin/worldserver\nCOPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/bin/lua_scripts /azerothcore/env/dist/bin/lua_scripts\n\n#================================================================\n#\n# CLIENT DATA\n#\n#=================================================================\n\nFROM ubuntu:20.04 as client-data\nARG USER_ID=1000\nARG GROUP_ID=1000\nARG DOCKER_USER=acore\n\nLABEL description=\"AC Production: client-data\"\n\nRUN apt-get update && apt-get install --no-install-recommends -y tzdata curl unzip && rm -rf /var/lib/apt/lists/*;\n\n# set timezone environment variable\nENV TZ=Etc/UTC\n\n# set noninteractive mode so tzdata doesn't ask to set timezone on install\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN addgroup --gid $GROUP_ID acore && \\\n    adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID acore && \\\n    passwd -d acore && \\\n    echo 'acore ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers\n\nENV DATAPATH=/azerothcore/env/dist/data\nENV DATAPATH_ZIP=/tmp/data.zip\n\nRUN --mount=type=bind,target=/azerothcore-temp,readwrite /azerothcore-temp/acore.sh client-data && chown -R $DOCKER_USER:$DOCKER_USER /azerothcore\n\nRUN apt-get remove --purge -y tzdata curl unzip && apt-get autoremove -y\n\nUSER $DOCKER_USER\n\n#================================================================\n#\n# TOOLS\n#\n#=================================================================\n\nFROM ubuntu:20.04 as tools\nARG USER_ID=1000\nARG GROUP_ID=1000\nARG DOCKER_USER=acore\n\nLABEL description=\"AC Production: tools\"\n\n# List of timezones: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\n# set timezone environment variable\nENV TZ=Etc/UTC\n\n# set noninteractive mode so tzdata doesn't ask to set timezone on install\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -y libmysqlclient-dev libssl-dev libbz2-dev \\\n    libboost-system1.7*-dev libboost-filesystem1.7*-dev libboost-program-options1.7*-dev libboost-iostreams1.7*-dev \\\n    sudo && rm -rf /var/lib/apt/lists/*;\n\n# Create a non-root user\nRUN addgroup --gid $GROUP_ID acore && \\\n    adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID acore && \\\n    passwd -d acore && \\\n    echo 'acore ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers\n\nRUN mkdir -p /azerothcore/env/client/\nRUN chown -R $DOCKER_USER:$DOCKER_USER /azerothcore\n\nUSER $DOCKER_USER\n\nWORKDIR /azerothcore/env/client/\n\nRUN mkdir -p /azerothcore/env/client/dbc\nRUN mkdir -p /azerothcore/env/client/maps\nRUN mkdir -p /azerothcore/env/client/mmaps\nRUN mkdir -p /azerothcore/env/client/vmaps\n\n# Need fix\n# COPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/bin/mapextractor /azerothcore/env/client/mapextractor\n# COPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/bin/mmaps_generator /azerothcore/env/client/mmaps_generator\n# COPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/bin/vmap4assembler /azerothcore/env/client/vmap4assembler\n# COPY --chown=$DOCKER_USER:$DOCKER_USER --from=build /azerothcore/env/dist/bin/vmap4extractor /azerothcore/env/client/vmap4extractor\n\n"
}