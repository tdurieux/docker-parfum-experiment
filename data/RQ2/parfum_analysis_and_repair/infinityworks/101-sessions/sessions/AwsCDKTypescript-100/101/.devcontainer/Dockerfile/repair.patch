diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/infinityworks/101-sessions/sessions/AwsCDKTypescript-100/101/.devcontainer/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/infinityworks/101-sessions/sessions/AwsCDKTypescript-100/101/.devcontainer/Dockerfile/repaired.Dockerfile
index c73ecb6..936f2b3 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/infinityworks/101-sessions/sessions/AwsCDKTypescript-100/101/.devcontainer/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/infinityworks/101-sessions/sessions/AwsCDKTypescript-100/101/.devcontainer/Dockerfile/repaired.Dockerfile
@@ -21,8 +21,8 @@ ARG USER_GID=1000
 RUN apt-get update \
     && apt-get -y install --no-install-recommends apt-utils dialog 2>&1 \
     #
-    # install git iproute2, required tools installed
-    && apt-get install -y \
+    # install git iproute2, required tools installed \
+    && apt-get install --no-install-recommends -y \
     bash-completion \
     git \
     openssh-client \
@@ -39,30 +39,30 @@ RUN apt-get update \
     graphviz \
     jq \
     vim \
-    lsb-release 2>&1
+    lsb-release 2>&1 && rm -rf /var/lib/apt/lists/*;
     #
     # [Optional] For local testing instead of cloud shell
     # Install Docker CE CLI.
 RUN curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | apt-key add - 2>/dev/null \
     && add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable" \
     && apt-get update \
-    && apt-get install -y docker-ce-cli
+    && apt-get install --no-install-recommends -y docker-ce-cli && rm -rf /var/lib/apt/lists/*;
     #
     # Install the AWS CLI tools
     #
 RUN mkdir -p /tmp/aws \
     && cd /tmp/aws \
-    && curl "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip" -o "awscliv2.zip" \
+    && curl -f "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip" -o "awscliv2.zip" \
     && unzip awscliv2.zip \
     && ./aws/install \
-    && pip3 install git-remote-codecommit \
-    && pip3 install boto3 \
+    && pip3 install --no-cache-dir git-remote-codecommit \
+    && pip3 install --no-cache-dir boto3 \
     # Support `cidr.py`
-    && pip3 install tabulate \
+    && pip3 install --no-cache-dir tabulate \
     # Session manager plugin for SSHing etc
     # Determine the correct plugin for the CPU architecture https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html#install-plugin-debian
     && [ "$(dpkg --print-architecture)" = "arm64" ] && arch="arm64" || arch="64bit" \
-    && curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_$arch/session-manager-plugin.deb" -o "/tmp/session-manager-plugin.deb" \
+    && curl -f "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_$arch/session-manager-plugin.deb" -o "/tmp/session-manager-plugin.deb" \
     && dpkg -i /tmp/session-manager-plugin.deb
     # Create a non-root user to use if preferred - see https://aka.ms/vscode-remote/containers/non-root-user.
     #
@@ -76,13 +76,13 @@ RUN curl -fsSL https://starship.rs/install.sh | sh -s -- --yes \
     #
     # Add sudo support for the non-root user
     #
-RUN apt-get install -y sudo \
-    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\
-    && chmod 0440 /etc/sudoers.d/$USERNAME
+RUN apt-get install --no-install-recommends -y sudo \
+    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
+    && chmod 0440 /etc/sudoers.d/$USERNAME && rm -rf /var/lib/apt/lists/*;
     #
     # GO - https://golang.org/doc/install
     #
-RUN curl -sL https://golang.org/dl/go1.15.3.linux-$(dpkg --print-architecture).tar.gz | tar -xz -C /usr/local
+RUN curl -f -sL https://golang.org/dl/go1.15.3.linux-$(dpkg --print-architecture).tar.gz | tar -xz -C /usr/local
 ENV PATH=$PATH:/usr/local/go/bin
     #
     # Assume role
@@ -98,17 +98,17 @@ RUN mkdir /home/${USERNAME}/.ssh \
     #
     # Locales
     #
-RUN apt-get install -y locales \
+RUN apt-get install --no-install-recommends -y locales \
     && echo "LC_ALL=en_US.UTF-8" >> /etc/environment \
     && echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
     && echo "LANG=en_US.UTF-8" > /etc/locale.conf \
-    && locale-gen en_US.UTF-8
+    && locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;
     #
     # NVM and Exact version of Node
     #
 RUN mkdir /usr/local/nvm \
     && chown $USERNAME /usr/local/nvm \
-    && curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | NVM_DIR=/usr/local/nvm bash \
+    && curl -f https://raw.githubusercontent.com/creationix/nvm/master/install.sh | NVM_DIR=/usr/local/nvm bash \
     && export NVM_DIR="/usr/local/nvm" \
     && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" \
     && nvm install 14.19.1 \
@@ -117,10 +117,10 @@ RUN mkdir /usr/local/nvm \
     #
     # Yarn & Groff needed for AWS CLI
     #
-RUN curl -sS http://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
+RUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
 RUN echo "deb http://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
     && apt-get update
-RUN apt-get install -y apt-utils nodejs yarn groff
+RUN apt-get install --no-install-recommends -y apt-utils nodejs yarn groff && rm -rf /var/lib/apt/lists/*;
     #
     # Clean up
     #