{
  "startTime": 1674246818252,
  "endTime": 1674246819844,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a\n# copy of this software and associated documentation files (the \"Software\"),\n# to deal in the Software without restriction, including without limitation\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n# and/or sell copies of the Software, and to permit persons to whom the\n# Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\n\n\n#\n# setup environment\n#\nENV DEBIAN_FRONTEND=noninteractive\nARG HDF5_DIR=\"/usr/lib/aarch64-linux-gnu/hdf5/serial/\"\nARG MAKEFLAGS=-j$(nproc)\n\nRUN printenv\n\n\n#\n# install prerequisites - https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html#prereqs\n#\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n          python3-pip \\\n\t\t  python3-dev \\\n\t\t  gfortran \\\n\t\t  build-essential \\\n\t\t  liblapack-dev \\ \n\t\t  libblas-dev \\\n\t\t  libhdf5-serial-dev \\\n\t\t  hdf5-tools \\\n\t\t  libhdf5-dev \\\n\t\t  zlib1g-dev \\\n\t\t  zip \\\n\t\t  unzip \\\n\t\t  libjpeg8-dev \\\n\t\t  autoconf \\ \n\t\t  automake \\\n\t\t  libtool \\\n\t\t  curl \\\n\t\t  make \\\n\t\t  g++ \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\nRUN pip3 install --no-cache-dir setuptools Cython wheel\n\n\n#\n# build protobuf using cpp implementation\n# https://jkjung-avt.github.io/tf-trt-revisited/\n#\nARG PROTOBUF_VERSION=3.19.4\nARG PROTOBUF_URL=https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VERSION}\nARG PROTOBUF_DIR=protobuf-python-${PROTOBUF_VERSION}\nARG PROTOC_DIR=protoc-${PROTOBUF_VERSION}-linux-aarch_64\nENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp\n\nRUN cd /tmp && \\\n    wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${PROTOBUF_URL}/$PROTOBUF_DIR.zip && \\\n    wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${PROTOBUF_URL}/$PROTOC_DIR.zip && \\\n    unzip ${PROTOBUF_DIR}.zip -d ${PROTOBUF_DIR} && \\\n    unzip ${PROTOC_DIR}.zip -d ${PROTOC_DIR} && \\\n    cp ${PROTOC_DIR}/bin/protoc /usr/local/bin/protoc && \\\n    cd ${PROTOBUF_DIR}/protobuf-${PROTOBUF_VERSION} && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && \\\n    make -j$(nproc) && \\\n    make check -j4 && \\\n    make install && \\\n    ldconfig && \\\n    cd python && \\\n    python3 setup.py build --cpp_implementation && \\\n    python3 setup.py test --cpp_implementation && \\\n    python3 setup.py bdist_wheel --cpp_implementation && \\\n    cp dist/*.whl /opt && \\\n    pip3 install --no-cache-dir dist/*.whl && \\\n    cd ../../../ && \\\n    rm ${PROTOBUF_DIR}.zip && \\\n    rm ${PROTOC_DIR}.zip && \\\n    rm -rf ${PROTOBUF_DIR} && \\\n    rm -rf ${PROTOC_DIR}\n\n#RUN python3 setup.py install --cpp_implementation && \\\n#RUN pip3 install protobuf==${PROTOBUF_VERSION} --install-option=\"--cpp_implementation\" --no-cache-dir --verbose\n\nRUN pip3 show protobuf && \\\n    protoc --version\n\n\n#\n# install Python TF dependencies\n#\nRUN pip3 install --no-cache-dir --verbose numpy==1.19.4\nRUN H5PY_SETUP_REQUIRES=0 pip3 install --no-cache-dir --verbose h5py==3.1.0\nRUN pip3 install --no-cache-dir --verbose future==0.18.2 mock==3.0.5 keras_preprocessing==1.1.2 keras_applications==1.0.8 gast==0.4.0 futures pybind11\n\n\n#\n# TensorFlow\n#\nARG TENSORFLOW_URL=https://developer.download.nvidia.com/compute/redist/jp/v44/tensorflow/tensorflow-1.15.3+nv20.9-cp36-cp36m-linux_aarch64.whl\nARG TENSORFLOW_WHL=tensorflow-1.15.3+nv20.9-cp36-cp36m-linux_aarch64.whl\n\nRUN wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${TENSORFLOW_URL} -O ${TENSORFLOW_WHL} && \\\n    pip3 install --no-cache-dir --verbose ${TENSORFLOW_WHL} && \\\n    rm ${TENSORFLOW_WHL}\n\n\n#\n# PyCUDA\n#\nENV PATH=\"/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:${LD_LIBRARY_PATH}\"\nRUN echo \"$PATH\" && echo \"$LD_LIBRARY_PATH\"\n\nRUN pip3 install --no-cache-dir --verbose pycuda six\n\n"
}