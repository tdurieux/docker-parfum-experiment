{
  "startTime": 1674217618878,
  "endTime": 1674217620061,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 123
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# this dockerfile roughly follows the 'Install ROS From Source' procedures from:\n#   https://docs.ros.org/en/humble/Installation/Alternatives/Ubuntu-Development-Setup.html\n#\nARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.5.0\nFROM ${BASE_IMAGE}\n\nARG ROS_PKG=ros_base\nENV ROS_DISTRO=humble\nENV ROS_ROOT=/opt/ros/${ROS_DISTRO}\nENV ROS_PYTHON_VERSION=3\n\nENV DEBIAN_FRONTEND=noninteractive\nENV SHELL /bin/bash\nSHELL [\"/bin/bash\", \"-c\"]\n\nWORKDIR /tmp\n\n# change the locale from POSIX to UTF-8\nRUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nENV LANG=en_US.UTF-8\nENV PYTHONIOENCODING=utf-8\n\n# set Python3 as default\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1\n\n\n#\n# add the ROS deb repo to the apt sources list\n#\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n\t\tcurl \\\r\n\t\twget \\\r\n\t\tgnupg2 \\\r\n\t\tlsb-release \\\r\n\t\tca-certificates \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\nRUN curl -f -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\nRUN echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" | tee /etc/apt/sources.list.d/ros2.list > /dev/null\n\n\n#\n# install development packages\n#\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n\t\tbuild-essential \\\r\n\t\tcmake \\\r\n\t\tgit \\\r\n\t\tlibbullet-dev \\\r\n\t\tlibpython3-dev \\\r\n\t\tpython3-colcon-common-extensions \\\r\n\t\tpython3-flake8 \\\r\n\t\tpython3-pip \\\r\n\t\tpython3-numpy \\\r\n\t\tpython3-pytest-cov \\\r\n\t\tpython3-rosdep \\\r\n\t\tpython3-setuptools \\\r\n\t\tpython3-vcstool \\\r\n\t\tpython3-rosinstall-generator \\\r\n\t\tlibasio-dev \\\r\n\t\tlibtinyxml2-dev \\\r\n\t\tlibcunit1-dev \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\n# install some pip packages needed for testing\nRUN python3 -m pip install -U \\\r\n\t\targcomplete \\\r\n\t\tflake8-blind-except \\\r\n\t\tflake8-builtins \\\r\n\t\tflake8-class-newline \\\r\n\t\tflake8-comprehensions \\\r\n\t\tflake8-deprecated \\\r\n\t\tflake8-docstrings \\\r\n\t\tflake8-import-order \\\r\n\t\tflake8-quotes \\\r\n\t\tpytest-repeat \\\r\n\t\tpytest-rerunfailures \\\r\n\t\tpytest\n\n#\n# install OpenCV (with CUDA)\n#\nARG OPENCV_URL=https://nvidia.box.com/shared/static/2hssa5g3v28ozvo3tc3qwxmn78yerca9.gz\nARG OPENCV_DEB=OpenCV-4.5.0-aarch64.tar.gz\n\nRUN apt-get purge -y '*opencv*' || echo \"previous OpenCV installation not found\" && \\\r\n    mkdir opencv && \\\r\n    cd opencv && \\\r\n    wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${OPENCV_URL} -O ${OPENCV_DEB} && \\\r\n    tar -xzvf ${OPENCV_DEB} && \\\r\n    dpkg -i --force-depends *.deb && \\\r\n    apt-get update && \\\r\n    apt-get install -y -f --no-install-recommends && \\\r\n    dpkg -i *.deb && \\\r\n    rm -rf /var/lib/apt/lists/* && \\\r\n    apt-get clean && \\\r\n    cd ../ && \\\r\n    rm -rf opencv && \\\r\n    PYTHON3_VERSION=`python3 -c 'import sys; version=sys.version_info[:3]; print(\"{0}.{1}\".format(*version))'` && \\\r\n    cp -r /usr/include/opencv4 /usr/local/include/opencv4 && \\\r\n    cp -r /usr/lib/python${PYTHON3_VERSION}/dist-packages/cv2 /usr/local/lib/python${PYTHON3_VERSION}/dist-packages/cv2\n\n\n#\n# upgrade cmake - https://stackoverflow.com/a/56690743\n# this is needed to build some of the ROS2 packages\n#\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n\t\t  software-properties-common \\\r\n\t\t  apt-transport-https \\\r\n\t\t  ca-certificates \\\r\n\t\t  gnupg \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\nRUN wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - && \\\r\n    apt-add-repository \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\" && \\\r\n    apt-get update && \\\r\n    apt-get install -y --no-install-recommends --only-upgrade \\\r\n            cmake \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\nRUN cmake --version\n\n\n#\n# download/build ROS from source\n#\nRUN mkdir -p ${ROS_ROOT}/src && \\\r\n    cd ${ROS_ROOT} && \\\r\n    \r\n    # https://answers.ros.org/question/325245/minimal-ros2-installation/?answer=325249#post-id-325249\r\n    rosinstall_generator --deps --rosdistro ${ROS_DISTRO} ${ROS_PKG} \\\r\n\t\tlaunch_xml \\\r\n\t\tlaunch_yaml \\\r\n\t\tlaunch_testing \\\r\n\t\tlaunch_testing_ament_cmake \\\r\n\t\tdemo_nodes_cpp \\\r\n\t\tdemo_nodes_py \\\r\n\t\texample_interfaces \\\r\n\t\tcamera_calibration_parsers \\\r\n\t\tcamera_info_manager \\\r\n\t\tcv_bridge \\\r\n\t\tv4l2_camera \\\r\n\t\tvision_opencv \\\r\n\t\tvision_msgs \\\r\n\t\timage_geometry \\\r\n\t\timage_pipeline \\\r\n\t\timage_transport \\\r\n\t\tcompressed_image_transport \\\r\n\t\tcompressed_depth_image_transport \\\r\n\t\t> ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \\\r\n    cat ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \\\r\n    vcs import src < ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \\\r\n\r\n    # install dependencies using rosdep\r\n    apt-get update && \\\r\n    cd ${ROS_ROOT} && \\\r\n    rosdep init && \\\r\n    rosdep update && \\\r\n    rosdep install -y \\\r\n    \t  --ignore-src \\\r\n       --from-paths src \\\r\n\t  --rosdistro ${ROS_DISTRO} \\\r\n\t  --skip-keys \"libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv\" && \\\r\n    rm -rf /var/lib/apt/lists/* && \\\r\n    apt-get clean && \\\r\n\r\n    # build it!\r\n    colcon build \\\r\n        --merge-install \\\r\n        --cmake-args -DCMAKE_BUILD_TYPE=Release && \\\r\n    \r\n    # remove build files\r\n    rm -rf ${ROS_ROOT}/src && \\\r\n    rm -rf ${ROS_ROOT}/logs && \\\r\n    rm -rf ${ROS_ROOT}/build && \\\r\n    rm ${ROS_ROOT}/*.rosinstall\n\n\n#\n# fix broken package.xml in test_pluginlib that crops up if/when rosdep is run again\n#\n#   Error(s) in package '/opt/ros/foxy/build/pluginlib/prefix/share/test_pluginlib/package.xml':\n#   Package 'test_pluginlib' must declare at least one maintainer\n#   The package node must contain at least one \"license\" tag\n#\n#RUN TEST_PLUGINLIB_PACKAGE=\"${ROS_ROOT}/build/pluginlib/pluginlib_enable_plugin_testing/install/test_pluginlib__test_pluginlib/share/test_pluginlib/package.xml\" && \\\n#    sed -i '/<\\/description>/a <license>BSD<\\/license>' $TEST_PLUGINLIB_PACKAGE && \\\n#    sed -i '/<\\/description>/a <maintainer email=\"michael@openrobotics.org\">Michael Carroll<\\/maintainer>' $TEST_PLUGINLIB_PACKAGE && \\\n#    cat $TEST_PLUGINLIB_PACKAGE\n\n\n#\n# Set the default DDS middleware to cyclonedds\n# https://github.com/ros2/rclcpp/issues/1335\n#\nENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n\n\n#\n# setup entrypoint\n#\nCOPY ./packages/ros_entrypoint.sh /ros_entrypoint.sh\n\nRUN sed -i \\\r\n    's/ros_env_setup=\"\\/opt\\/ros\\/$ROS_DISTRO\\/setup.bash\"/ros_env_setup=\"${ROS_ROOT}\\/install\\/setup.bash\"/g' \\\r\n    /ros_entrypoint.sh && \\\r\n    cat /ros_entrypoint.sh\n\nRUN echo 'source ${ROS_ROOT}/install/setup.bash' >> /root/.bashrc\n\nENTRYPOINT [\"/ros_entrypoint.sh\"]\nCMD [\"bash\"]\nWORKDIR /\n"
}