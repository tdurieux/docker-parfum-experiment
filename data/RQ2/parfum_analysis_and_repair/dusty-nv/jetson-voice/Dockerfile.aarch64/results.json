{
  "startTime": 1674249719773,
  "endTime": 1674249721393,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 211,
        "lineEnd": 211,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 229,
        "lineEnd": 229,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2021, NVIDIA CORPORATION. All rights reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a\n# copy of this software and associated documentation files (the \"Software\"),\n# to deal in the Software without restriction, including without limitation\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n# and/or sell copies of the Software, and to permit persons to whom the\n# Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\n\nENV DEBIAN_FRONTEND=noninteractive\nENV SHELL /bin/bash\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'\nARG MAKEFLAGS=-j$(nproc)\nARG WORKSPACE=/jetson-voice\n\nWORKDIR ${WORKSPACE}\n\n# alias python3 -> python\nRUN rm /usr/bin/python && \\\r\n    ln -s /usr/bin/python3 /usr/bin/python && \\\r\n    ln -s /usr/bin/pip3 /usr/bin/pip\n\n\n################################################################\n## tokenizers/transformers\n################################################################\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n            cmake \\\r\n\t\t  curl \\\r\n\t\t  pkg-config \\\r\n\t\t  protobuf-compiler \\\r\n\t\t  libprotoc-dev \\\r\n\t\t  nano \\\r\n\t\t  tzdata \\\r\n\t\t  libssl-dev \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\n# install sentencepiece\nRUN git clone https://github.com/google/sentencepiece && \\\r\n\tcd sentencepiece && \\\r\n\tmkdir build && \\\r\n\tcd build && \\\r\n\tcmake .. && \\\r\n\tmake -j $(nproc) && \\\r\n\tmake install && \\\r\n\tldconfig -v && \\\r\n\tcd .. && \\\r\n\tcd python && \\\r\n\tpython3 setup.py install --verbose && \\\r\n\tcd ../../ && \\\r\n\trm -r -f sentencepiece\n\n# install rust (used by tokenizers)\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y\nENV PATH=\"/root/.cargo/bin:${PATH}\"\nRUN rustc --version && \\\n    pip3 install --no-cache-dir setuptools-rust\n\n# install tokenizers\nRUN pip3 install --no-cache-dir tokenizers --verbose\n\n# Apache arrow is needed by datasets package ('pip install pyarrow' is broken, so built from source)\n#  https://github.com/apache/arrow/blob/master/docs/source/developers/python.rst#using-pip\n#  https://raspberrypi.stackexchange.com/a/117723\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n\t\t\tlibjemalloc-dev \\\r\n\t\t\tlibboost-dev \\\r\n\t\t\tlibboost-filesystem-dev \\\r\n\t\t\tlibboost-system-dev \\\r\n\t\t\tlibboost-regex-dev \\\r\n\t\t\tautoconf \\\r\n\t\t\tflex \\\r\n\t\t\tbison \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\nRUN git clone --branch apache-arrow-3.0.0 https://github.com/apache/arrow.git && \\\r\n\tcd arrow/cpp && \\\r\n\tmkdir build && \\\r\n\tcd build && \\\r\n\texport ARROW_HOME=/usr/local && \\\r\n\tcmake \\\r\n\t\t-DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\r\n\t\t-DCMAKE_INSTALL_LIBDIR=lib \\\r\n\t\t-DARROW_WITH_BZ2=ON \\\r\n\t\t-DARROW_WITH_ZLIB=ON \\\r\n\t\t-DARROW_WITH_ZSTD=ON \\\r\n\t\t-DARROW_WITH_LZ4=ON \\\r\n\t\t-DARROW_WITH_SNAPPY=ON \\\r\n\t\t-DARROW_PARQUET=ON \\\r\n\t\t-DARROW_CUDA=ON \\\r\n\t\t-DARROW_PYTHON=ON \\\r\n\t\t-DARROW_BUILD_TESTS=OFF \\\r\n\t\t.. && \\\r\n\tmake -j$(nproc) && \\\r\n\tmake install && \\\r\n\tcd ../../python && \\\r\n\tpython3 setup.py build_ext --build-type=release --with-parquet --with-cuda --verbose && \\\r\n\tpython3 setup.py install --verbose && \\\r\n\tcd ../../ && \\\r\n\trm -r -f arrow\n\nRUN pip3 show pyarrow && \\\r\n\tpython3 -c \"import pyarrow\" && \\\r\n\tpython3 -c \"from pyarrow import cuda\"\n\n# install huggingface (locked to 4.5.1, which the patches are based on)\n# datasets package is needed to run the huggingface examples\nRUN pip3 install --no-cache-dir transformers==4.5.1 datasets --verbose\n\n\n################################################################\n## onnx / onnxruntime / onnx-graphsurgeon\n################################################################\nARG ONNXRUNTIME_URL=https://nvidia.box.com/shared/static/ukszbm1iklzymrt54mgxbzjfzunq7i9t.whl\nARG ONNXRUNTIME_WHL=onnxruntime_gpu-1.7.0-cp36-cp36m-linux_aarch64.whl\n\nRUN wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${ONNXRUNTIME_URL} -O ${ONNXRUNTIME_WHL} && \\\n    pip3 install --no-cache-dir ${ONNXRUNTIME_WHL} --verbose && \\\n    pip3 install --no-cache-dir onnx psutil sympy --verbose && \\\n    rm ${ONNXRUNTIME_WHL}\n\n# install onnx-graphsurgeon\nRUN cd /opt && \\\r\n    git clone --recursive https://github.com/nvidia/tensorrt tensorrt && \\\r\n    cd tensorrt/tools/onnx-graphsurgeon && \\\r\n    python3 setup.py install --verbose && \\\r\n    cd ../../../ && \\\r\n    rm -r -f tensorrt\n\n\n################################################################\n## NeMo\n################################################################\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n\t\t  libopencc-dev \\\r\n\t\t  python3-tk \\\r\n\t\t  libmecab-dev \\\r\n\t\t  mecab \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\nRUN cd /opt && \\\r\n    git clone --recursive --branch v0.11.1 https://github.com/pytorch/text torchtext && \\\r\n    cd torchtext && \\\r\n    python3 setup.py clean install\n\nRUN pip3 show torch torchvision torchaudio torchtext\n\n# clone/build nemo\nARG NEMO_VERSION\nRUN cd /opt && git clone --recursive --branch v${NEMO_VERSION} https://github.com/nvidia/nemo\n\n# needed for nemo 1.0\n#COPY patches/nemo/${NEMO_VERSION}/setup.py /opt/nemo/setup.py\n\n# needed for nemo 1.6\nCOPY patches/nemo/${NEMO_VERSION}/requirements.txt /opt/nemo/requirements/requirements.txt\nCOPY patches/nemo/${NEMO_VERSION}/requirements_nlp.txt /opt/nemo/requirements/requirements_nlp.txt\n\nRUN pip3 install --no-cache-dir -r /opt/nemo/requirements/requirements.txt --verbose\nRUN pip3 install --no-cache-dir -r /opt/nemo/requirements/requirements_asr.txt --verbose\nRUN pip3 install --no-cache-dir -r /opt/nemo/requirements/requirements_nlp.txt --verbose\nRUN pip3 install --no-cache-dir -r /opt/nemo/requirements/requirements_tts.txt --verbose\n#RUN pip3 install omegaconf==2.1.0dev24 --verbose\n\nRUN cd /opt/nemo && python3 setup.py install --verbose\n\n\n################################################################\n## ctc-decoders\n################################################################\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n\t\t  swig \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\nRUN git clone https://github.com/dusty-nv/OpenSeq2Seq -b ctc-decoders && \\\r\n    cd OpenSeq2Seq/decoders && \\\r\n    ./setup.sh\n\nRUN pip3 install --no-cache-dir git+https://github.com/NVIDIA/dllogger\nRUN pip3 install --no-cache-dir nltk\n\n\n################################################################\n## Riva GRPC\n################################################################\nARG RIVA_URL=https://nvidia.box.com/shared/static/cu8z4t1n6shkxl6z5nh9hpkpn9yxomcz.whl\nARG RIVA_WHL=riva_api-1.0.0ea-py3-none-any.whl\n\nRUN wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${RIVA_URL} -O ${RIVA_WHL} && \\\n    pip3 install --no-cache-dir ${RIVA_WHL} --verbose && \\\n    rm ${RIVA_WHL}\n\n\n################################################################\n## install some audio stuff\n################################################################\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n\t\t  alsa-base \\\r\n            libasound2-dev \\\r\n            alsa-utils \\\r\n            portaudio19-dev \\\r\n\t\t  libsndfile1 \\\r\n\t\t  unzip \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\nRUN pip3 install --no-cache-dir soundfile pyaudio wave\n\n\n################################################################\n## various patches to install\n################################################################\n#COPY patches patches\n\n#RUN PYTHON_ROOT=`pip3 show torch | grep Location: | cut -d' ' -f2` && \\\n#    PYTORCH_VERSION=`pip3 show torch | grep Version: | cut -d' ' -f2` && \\\n#    TRANSFORMERS_VERSION=`pip3 show transformers | grep Version: | cut -d' ' -f2` && \\\n#    NEMO_PATH=\"$PYTHON_ROOT/nemo_toolkit-${NEMO_VERSION}-py3.6.egg/nemo\" && \\\n#    echo \"Python package root path:  $PYTHON_ROOT\" && \\\n#    echo \"Applying patches for PyTorch $PYTORCH_VERSION\" && \\\n#    echo \"Applying patches for transformers $TRANSFORMERS_VERSION\" && \\\n#    cp patches/pytorch/$PYTORCH_VERSION/functional.py $PYTHON_ROOT/torch/functional.py && \\\n#    cp patches/transformers/$TRANSFORMERS_VERSION/convert_graph_to_onnx.py $PYTHON_ROOT/transformers/convert_graph_to_onnx.py && \\\n#    cp patches/transformers/$TRANSFORMERS_VERSION/modeling_distilbert.py $PYTHON_ROOT/transformers/models/distilbert/modeling_distilbert.py && \\\n#    cp patches/nemo/${NEMO_VERSION}/nlp/distilbert.py $NEMO_PATH/collections/nlp/modules/common/huggingface/distilbert.py && \\\n#    cp patches/nemo/${NEMO_VERSION}/exportable.py $NEMO_PATH/core/classes/exportable.py\n\n\n# set Python to unicode\nENV PYTHONIOENCODING=utf-8\n\n# disable JupyterLab from auto-starting (inherited behavior from l4t-ml)\nCMD /bin/bash\n"
}