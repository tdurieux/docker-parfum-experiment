{
  "startTime": 1674248067441,
  "endTime": 1674248068831,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a\n# copy of this software and associated documentation files (the \"Software\"),\n# to deal in the Software without restriction, including without limitation\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n# and/or sell copies of the Software, and to permit persons to whom the\n# Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n#\n# Build this Dockerfile by running the following commands:\n#\n#     $ cd /path/to/your/jetbot_ros\n#     $ docker/build.sh\n#\n# Also you should set your docker default-runtime to nvidia:\n#     https://github.com/dusty-nv/jetson-containers#docker-default-runtime\n#\n\nARG BASE_IMAGE=dustynv/ros:foxy-pytorch-l4t-r32.5.0\nFROM ${BASE_IMAGE}\n\nSHELL [\"/bin/bash\", \"-c\"]\nENV SHELL /bin/bash\n\nENV DEBIAN_FRONTEND=noninteractive\nARG MAKEFLAGS=-j$(nproc)\nENV LANG=en_US.UTF-8\nENV PYTHONIOENCODING=utf-8\nRUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\n\nWORKDIR /tmp\n\n\n#\n# install gazebo & utilities\n#\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n\t\t  nano \\\r\n\t\t  xterm \\\r\n\t\t  lxterminal \\\r\n\t\t  blender \\\r\n\t\t  libgazebo9-dev \\\r\n\t\t  gazebo9 \\\r\n\t\t  gazebo9-common \\\r\n\t\t  gazebo9-plugin-base \\\r\n    && rm -rf /var/lib/apt/lists/* \\\r\n    && apt-get clean\n\nRUN git clone https://github.com/dusty-nv/py3gazebo /opt/py3gazebo && \\\n    pip3 install --no-cache-dir protobuf >=2.6 --verbose && \\\n    pip3 install --no-cache-dir trollius --verbose && \\\n    pip3 install --no-cache-dir pynput --verbose\n\nENV PYTHONPATH=/opt/py3gazebo\n\n\n#\n# Gazebo plugins for ROS\n#\nRUN source ${ROS_ROOT}/install/setup.bash && \\\r\n    export ROS_PACKAGE_PATH=${AMENT_PREFIX_PATH} && \\\r\n    cd ${ROS_ROOT} && \\\r\n    mkdir -p src/gazebo && \\\r\n    rosinstall_generator --deps --exclude RPP --rosdistro ${ROS_DISTRO} \\\r\n          gazebo_ros_pkgs \\\r\n\t> ros2.${ROS_DISTRO}.gazebo.rosinstall && \\\r\n    cat ros2.${ROS_DISTRO}.gazebo.rosinstall && \\\r\n    vcs import src/gazebo < ros2.${ROS_DISTRO}.gazebo.rosinstall && \\\r\n    apt-get update && \\\r\n    rosdep install -y \\\r\n       --ignore-src \\\r\n       --from-paths src/gazebo \\\r\n\t  --rosdistro ${ROS_DISTRO} \\\r\n\t  --skip-keys \"gazebo11 libgazebo11-dev libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv\" && \\\r\n    rm -rf /var/lib/apt/lists/* && \\\r\n    apt-get clean && \\\r\n    colcon build --merge-install --base-paths src/gazebo \\\r\n    && rm -rf ${ROS_ROOT}/src \\\r\n    && rm -rf ${ROS_ROOT}/logs \\\r\n    && rm -rf ${ROS_ROOT}/build\n\n\n#\n# JetBot hw controllers\n#\nRUN pip3 install --no-cache-dir Adafruit-MotorHAT Adafruit-SSD1306 pyserial sparkfun-qwiic --verbose\n\n\n#\n# environment setup\n#  \nENV WORKSPACE_ROOT=/workspace\nENV JETBOT_ROOT=${WORKSPACE_ROOT}/src/jetbot_ros\nARG ROS_ENVIRONMENT=${ROS_ROOT}/install/setup.bash\n\nENV GAZEBO_MODEL_PATH=/usr/share/gazebo-9/models:/root/.gazebo/models:${JETBOT_ROOT}/gazebo/models\nENV GAZEBO_PLUGIN_PATH=${GAZEBO_PLUGIN_PATH}:${JETBOT_ROOT}/gazebo/plugins/build/:/usr/local/lib/\nENV GAZEBO_MASTER_URI=http://localhost:11346\n\n# setup workspace\nWORKDIR ${WORKSPACE_ROOT}\nRUN mkdir -p ${WORKSPACE_ROOT}/src\n\nCOPY scripts/setup_workspace.sh ${WORKSPACE_ROOT}/setup_workspace.sh\nENV PYTHONPATH=\"${JETBOT_ROOT}:${PYTHONPATH}\"\n\n\n#\n# ros_deep_learning package\n#\nRUN source ${ROS_ENVIRONMENT} && \\\r\n    cd ${WORKSPACE_ROOT}/src && \\\r\n    git clone https://github.com/dusty-nv/ros_deep_learning && \\\r\n    cd ../ && \\\r\n    colcon build --symlink-install --event-handlers console_direct+\n\n\n#\n# build project\n#\nCOPY jetbot_ros ${JETBOT_ROOT}/jetbot_ros\nCOPY launch ${JETBOT_ROOT}/launch\nCOPY gazebo ${JETBOT_ROOT}/gazebo\nCOPY resource ${JETBOT_ROOT}/resource\n\nCOPY package.xml ${JETBOT_ROOT}\nCOPY setup.py ${JETBOT_ROOT}\nCOPY setup.cfg ${JETBOT_ROOT}\n\nRUN cd ${JETBOT_ROOT}/gazebo/plugins/ && \\\r\n    mkdir build && \\\r\n    cd build && \\\r\n    cmake ../ && \\\r\n    make -j$(nproc) && \\\r\n    make install\n\nRUN source ${ROS_ENVIRONMENT} && \\\r\n    cd ${WORKSPACE_ROOT} && \\\r\n    colcon build --symlink-install --event-handlers console_direct+\n\n\n#\n# setup entrypoint\n#\nCOPY scripts/ros_entrypoint.sh /ros_entrypoint.sh\n\nRUN sed -i \\\r\n    's/ros_env_setup=\"\\/opt\\/ros\\/$ROS_DISTRO\\/setup.bash\"/ros_env_setup=\"${ROS_ROOT}\\/install\\/setup.bash\"/g' \\\r\n    /ros_entrypoint.sh && \\\r\n    cat /ros_entrypoint.sh\n\nRUN echo 'source ${ROS_ROOT}/install/setup.bash' >> /root/.bashrc && \\\r\n    echo 'source ${WORKSPACE_ROOT}/install/local_setup.bash' >> /root/.bashrc\n\nENTRYPOINT [\"/ros_entrypoint.sh\"]\nCMD [\"bash\"]\n"
}