{
  "startTime": 1674250895083,
  "endTime": 1674250896397,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# install base dependencies and supported compilers\nRUN apt update && DEBIAN_FRONTEND=\"noninteractive\" apt --no-install-recommends install -y \\\n    build-essential bzip2 libpcre3-dev wget \\\n    clang-7 gcc-8 g++-8 \\\n    bison flex tcl zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# install swig\nRUN wget https://prdownloads.sourceforge.net/swig/swig-4.0.0.tar.gz && \\\n    tar -xf swig-4.0.0.tar.gz && \\\n    cd swig-4.0.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(nproc) && \\\n    make install && rm swig-4.0.0.tar.gz\n\n# install cmake\nRUN wget https://cmake.org/files/v3.14/cmake-3.14.0-Linux-x86_64.sh && \\\n    chmod +x cmake-3.14.0-Linux-x86_64.sh  && \\\n    ./cmake-3.14.0-Linux-x86_64.sh --skip-license --prefix=/usr/local && \\\n    rm -rf cmake-3.14.0-Linux-x86_64.sh\n\n# install boost\nRUN wget https://sourceforge.net/projects/boost/files/boost/1.72.0/boost_1_72_0.tar.bz2/download && \\\n    tar -xf download && \\\n    cd boost_1_72_0 && \\\n    ./bootstrap.sh && \\\n    ./b2 install --with-iostreams --with-test link=shared -j $(nproc)\n\nCOPY .  /TritonRoute\nWORKDIR /TritonRoute\n\n# set compiiler (gcc is default), to change to clang use\n# docker build --build-arg compiler=clang7 [...]\nARG compiler=gcc8\nRUN ./jenkins/build_ubuntu20_$compiler.sh\n"
}