{
  "startTime": 1674252736897,
  "endTime": 1674252737607,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 132
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster\n\n#install general setup tools\nRUN apt-get update -y && apt-get install --no-install-recommends -y build-essential git software-properties-common emacs ocaml ocamlbuild ocaml-findlib wget openjdk-11-jdk unzip && rm -rf /var/lib/apt/lists/*;\n\n\n# Install miniconda & sympy & z3\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nRUN bash ./Miniconda3-latest-Linux-x86_64.sh -b\nRUN /root/miniconda3/bin/conda install sympy pip -y \nRUN /root/miniconda3/bin/pip3 install z3-solver\n\n\n# # # download Eclipse Foundation's AdoptOpenJDK build of jdk 8\n# # RUN apt-get wget apt-transport-https gnupg -y\n# # RUN wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -\n# # RUN echo \"deb https://adoptopenjdk.jfrog.io/adoptopenjdk/deb bullseye main\" | tee /etc/apt/sources.list.d/adoptopenjdk.list\n# # RUN apt-get update -y\n# # RUN apt-get install adoptopenjdk-8-hotspot -y\n# # RUN update-alternatives --set java /usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/bin/java\n\n\nWORKDIR /\nCOPY . /dig\n\n## Ocaml and CIL for C code instrumentation\nWORKDIR /dig/EXTERNAL_FILES\nRUN unzip develop.zip && mv cil-develop cil\nWORKDIR cil\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make\n\nWORKDIR /dig/src/ocaml\nRUN make clean; make\n\n## CIVL\nWORKDIR /dig/EXTERNAL_FILES\nRUN tar xf CIVL-1.20_5259.tgz ; rm CIVL-1.20_5259.tgz ln -sf CIVL-1.20_5259 civl ; ln -sf civl/lib/ lib\nRUN cp dot_sarl ~/.sarl\n\n\n## now can run DIG on trace files\n## /root/miniconda3/bin/python3  dig.py ../tests/traces/cohendiv.csv\n## DIG results ...\n\n# running DIG on C files\n\n\n\n\n# #download java and jpf\n# # RUN mkdir /usr/lib/JPF\n# # WORKDIR /usr/lib/JPF\n# # RUN git clone https://github.com/javapathfinder/jpf-core\n# # RUN git clone https://github.com/SymbolicPathFinder/jpf-symbc\n\n# #setup jpf env\n# # RUN mkdir /root/.jpf\n# # RUN echo 'jpf-core = /usr/lib/JPF/jpf-core' >> /root/.jpf/site.properties\n# # RUN echo 'jpf-symbc = /usr/lib/JPF/jpf-symbc' >> /root/.jpf/site.properties\n# # RUN echo 'extensions=${jpf-core},${jpf-symbc}' >> /root/.jpf/site.properties\n\n# #build jpf\n# # WORKDIR /usr/lib/JPF/jpf-core\n# # RUN git checkout java-8\n# # RUN ant\n# # RUN cp /dig/src/java/InvariantListenerVu.java /usr/lib/JPF/jpf-symbc/src/main/gov/nasa/jpf/symbc\n# # WORKDIR /usr/lib/JPF/jpf-symbc\n# # RUN ant\n\n# # RUN apt-get install -y sagemath z3\n# # RUN pip install z3-solver\n\n# #build dig\n# # WORKDIR /dig/src/java\n# # RUN make\n\n# #setup path\n# # ENV JPF_HOME=/usr/lib/JPF\n# # ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/\n# # ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$JPF_HOME/jpf-symbc/lib\n# # ENV JAVA8_HOME=/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/\n\n\n\n# RUN mkdir CIL\n# WORKDIR CIL\n# # RUN apt-get install -y libzarith-ocaml-dev libbatteries-ocaml-dev libyojson-ocaml-dev libppx-deriving-yojson-ocaml-dev\n# # RUN wget https://github.com/goblint/cil/archive/refs/tags/1.8.0.tar.gz\n# # RUN tar xf 1.8.0.tar.gz\n# # WORKDIR cil-1.8.0/\n# RUN pwd\n# RUN ./configure\n# RUN make\n\n\n\n\n\n\n\n\n\nWORKDIR /dig/src\n"
}