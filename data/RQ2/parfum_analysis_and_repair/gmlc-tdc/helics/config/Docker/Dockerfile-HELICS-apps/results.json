{
  "startTime": 1674250089566,
  "endTime": 1674250090289,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 22,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The docker build command should be run from the root folder of the HELICS source code repository with submodules cloned\n# Some of the possible ways to get a working directory are:\n# 1. clone the repository with git clone --recurse-submodules\n# 2. run git submodule update --init after a normal git clone\n# 3. download and extract a tar file from a HELICS release that includes submodules\n\nFROM helics/buildenv:gcc12-builder as builder\n\n# Copies the current directory from the host to use as the source code for building HELICS\nCOPY . /root/HELICS\nWORKDIR /root\n\n# Sets the number of threads for make to use\nARG MAKE_PARALLEL\n\n# Set ENABLE_GITHUB to true if you have only downloaded this Dockerfile without the rest of the HELICS source code repository\n# For users, it is recommended to just pull an already built Docker image from Docker Hub (building can take up to 30 minutes)\nARG ENABLE_GITHUB=false\nARG GIT_BRANCH=develop\n\n# Remove the copied source directory and replace it with a GitHub clone\n# The git clone part of this line shows how to recursively clone a specific branch from a git repository\nRUN if [ \"${ENABLE_GITHUB-}\" = \"true\" ]; then rm -rf HELICS && git clone --depth 1 --recurse-submodules --branch $GIT_BRANCH https://github.com/GMLC-TDC/HELICS; fi\n\n# Generates the makefiles for building HELICS without tests, examples, C shared library, or the IPC core\n# Build type is set to release for the optimized binaries (and smaller size)\nRUN mkdir build && cd build && cmake -DHELICS_BUILD_TESTS=OFF \\\n  -DHELICS_BUILD_EXAMPLES=OFF -DHELICS_DISABLE_C_SHARED_LIB=ON -DHELICS_ENABLE_IPC_CORE=OFF \\\n  -DCMAKE_BUILD_TYPE=Release -DHELICS_BINARY_ONLY_INSTALL=ON -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n  -DCMAKE_INSTALL_PREFIX=/root/develop/helics-install /root/HELICS\n\n# Compile and install HELICS to a temporary prefix (for easy copying to the final image)\nRUN cd build && make -j${MAKE_PARALLEL:-2} install\n\n##############################################################################\n\n# Create final image with the HELICS apps\nFROM ubuntu:22.04\n\n# Install the runtime libraries needed for ZeroMQ without development files\nRUN apt-get update && apt-get install --no-install-recommends -y libzmq5 openssl && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nARG GIT_COMMIT=unspecified\n\nLABEL maintainer=\"helicsdevelopers@helics.org\"\n\nLABEL name=\"helics.apps\"\nLABEL org.helics.description=\"HELICS applications\"\nLABEL org.helics.vcs-ref=$GIT_COMMIT\nLABEL org.helics.vcs-url=\"https://github.com/GMLC-TDC/helics\"\nLABEL version=\"3.2.1\"\nLABEL date=\"2022-05-24\"\n\n# Copy the HELICS install from the builder image stage above to a location in the PATH env var\nCOPY --from=builder /root/develop/helics-install /usr\n"
}