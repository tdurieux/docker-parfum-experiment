{
  "startTime": 1674253578293,
  "endTime": 1674253579887,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 177
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 76,
        "columnEnd": 152
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-alpine\n\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY requirements.txt /usr/src/app/\n\n# https://stackoverflow.com/questions/66118337/how-to-get-rid-of-cryptography-build-error\n# ENV CRYPTOGRAPHY_DONT_BUILD_RUST 1\n# apk add gcc musl-dev python3-dev libffi-dev openssl-dev cargo\n\nRUN apk add --update --virtual build-dependencies \\\n        pkgconfig \\\n        openssl-dev \\\n        libffi-dev \\\n        musl-dev \\\n        make \\\n        gcc \\\n        g++ \\\n        curl \\\n        cargo \\\n    && apk add --update git \\\n    && curl -f -LO https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \\\n    && chmod +x kubectl \\\n    && mv kubectl /usr/local/bin \\\n    && pip install --no-cache-dir --upgrade pip \\\n    && pip install --no-cache-dir -r requirements.txt \\\n    && apk del --purge build-dependencies \\\n    && rm -rf \\\n        /var/cache/apk/* \\\n        /root/.cache \\\n        /tmp/*\n\nRUN pip list\n\nCOPY . /usr/src/app\n\nRUN ls */*\n\nEXPOSE 8080\n\nENTRYPOINT [\"python3\"]\n\nCMD [\"-m\", \"swagger_server\"]\n"
}