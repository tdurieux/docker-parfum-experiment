{
  "startTime": 1674255212736,
  "endTime": 1674255214375,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 163
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 166
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 29,
        "columnEnd": 158
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 23,
        "columnEnd": 288
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 98,
        "columnEnd": 184
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 23,
        "columnEnd": 288
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 98,
        "columnEnd": 184
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 165
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 29,
        "columnEnd": 170
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 28,
        "columnEnd": 88
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 221,
        "lineEnd": 221,
        "columnStart": 4,
        "columnEnd": 165
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 241,
        "lineEnd": 241,
        "columnStart": 29,
        "columnEnd": 170
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 178
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 198,
        "lineEnd": 216,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 178
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 70,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 198,
        "lineEnd": 216,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 178
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 197,
        "lineEnd": 215,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedDockerfile": "### ---------------------------ddev-webserver-base--------------------------------------\n### Build ddev-php-base from ddev-webserver-base\n### ddev-php-base is the basic of ddev-php-prod\n### and ddev-webserver-* (For DDEV-Local)\nFROM drud/ddev-php-base:v1.19.3 as ddev-webserver-base\n\nENV BACKDROP_DRUSH_VERSION=1.4.0\nENV MKCERT_VERSION=v1.4.6\nENV DEBIAN_FRONTEND=noninteractive\n\nENV NGINX_SITE_TEMPLATE /etc/nginx/nginx-site.conf\nENV APACHE_SITE_TEMPLATE /etc/apache2/apache-site.conf\nENV TERMINUS_CACHE_DIR=/mnt/ddev-global-cache/terminus/cache\nENV CAROOT /mnt/ddev-global-cache/mkcert\n\n# TARGETPLATFORM is Docker buildx's target platform (e.g. linux/arm64), while\n# BUILDPLATFORM is the platform of the build host (e.g. linux/amd64)\nARG TARGETPLATFORM\nARG BUILDPLATFORM\n\nADD ddev-webserver-etc-skel /\nRUN /sbin/mkhomedir_helper www-data\n\nRUN apt-get -qq update\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qq install -y -o Dpkg::Options::=\"--force-confold\" --no-install-recommends --no-install-suggests -y libcap2-bin locales-all supervisor && rm -rf /var/lib/apt/lists/*;\n\n# Arbitrary user needs to be able to bind to privileged ports (for nginx and apache2)\nRUN setcap CAP_NET_BIND_SERVICE=+eip /usr/sbin/nginx\nRUN setcap CAP_NET_BIND_SERVICE=+eip /usr/sbin/apache2\n\nADD ddev-webserver-base-files /\nADD ddev-webserver-base-scripts /\n\n# magerun and magerun2 for magento\nRUN curl -f -sSL https://files.magerun.net/n98-magerun-latest.phar -o /usr/local/bin/magerun && chmod 777 /usr/local/bin/magerun\nRUN curl -f -sSL https://raw.githubusercontent.com/netz98/n98-magerun/develop/res/autocompletion/bash/n98-magerun.phar.bash -o /etc/bash_completion.d/n98-magerun.phar\nRUN curl -f -sSL https://files.magerun.net/n98-magerun2-latest.phar -o /usr/local/bin/magerun2 && chmod 777 /usr/local/bin/magerun2\nRUN curl -f -sSL https://raw.githubusercontent.com/netz98/n98-magerun2/develop/res/autocompletion/bash/n98-magerun2.phar.bash -o /etc/bash_completion.d/n98-magerun2.phar && chmod +x /usr/local/bin/magerun\n\n# /usr/local/bin may need to be updated by start.sh, etc\nRUN chmod -f ugo+rwx /usr/local/bin /usr/local/bin/composer\n\nRUN apt-get -qq autoremove && apt-get -qq clean -y && rm -rf /var/lib/apt/lists/*\n\n# END ddev-webserver-base\n\n\n### ---------------------------ddev-webserver-dev-base--------------------------------------\n### Build ddev-webserver-dev-base from ddev-webserver-base\nFROM ddev-webserver-base as ddev-webserver-dev-base\nENV MAILHOG_VERSION=\"1.0.2\"\nENV CAROOT /mnt/ddev-global-cache/mkcert\nENV PHP_DEFAULT_VERSION=\"7.4\"\n\nRUN wget -q -O - https://packages.blackfire.io/gpg.key | apt-key add -\nRUN echo \"deb http://packages.blackfire.io/debian any main\" > /etc/apt/sources.list.d/blackfire.list\nRUN apt-get update\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN mkdir /tmp/ddev && \\\n    if [[ $TARGETPLATFORM == \"linux/arm64\" ]]; then \\\n        printf 'MKCERT_ARCH=\"linux-arm64\" \\n\\\n        MAILHOG_ARCH=\"linux_arm64\"' > /tmp/ddev/vars; \\\n    else \\\n        printf 'MKCERT_ARCH=\"linux-amd64\" \\n\\\n        MAILHOG_ARCH=\"linux_amd64\"' > /tmp/ddev/vars; \\\n    fi\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qq install -o Dpkg::Options::=\"--force-confold\" --no-install-recommends --no-install-suggests -y \\\n    blackfire \\\n    blackfire-php \\\n    fontconfig \\\n    gettext \\\n    git \\\n    graphviz \\\n    iproute2 \\\n    iputils-ping \\\n    jq \\\n    libldap-common \\\n    libpcre3 \\\n    locales-all \\\n    nano \\\n    ncurses-bin \\\n    netcat \\\n    openssh-client \\\n    patch \\\n    rsync \\\n    sqlite3 \\\n    sudo \\\n    telnet \\\n    unzip \\\n    zip && rm -rf /var/lib/apt/lists/*;\n\nADD ddev-webserver-dev-base-files /\nRUN phpdismod blackfire xhprof\nRUN source /tmp/ddev/vars && curl -f -sSL https://github.com/drud/MailHog/releases/download/v${MAILHOG_VERSION}/MailHog_${MAILHOG_ARCH} -o /usr/local/bin/mailhog;\n\nRUN phpdismod xdebug && curl -sSL --fail --output /usr/local/bin/phive \"https://phar.io/releases/phive.phar\" && chmod 777 /usr/local/bin/phive && phpenmod xdebug\nRUN set -o pipefail && curl -f -sSL https://github.com/pantheon-systems/terminus/releases/download/$( curl -f --silent \"https://api.github.com/repos/pantheon-systems/terminus/releases/latest\" | perl -nle'print $& while m{\"tag_name\": \"\\K.*?(?=\")}g')/terminus.phar --output /usr/local/bin/terminus && chmod 777 /usr/local/bin/terminus\nRUN set -o pipefail && curl -f -sSL https://github.com/platformsh/platformsh-cli/releases/download/$( curl -f --silent \"https://api.github.com/repos/platformsh/platformsh-cli/releases/latest\" | perl -nle'print $& while m{\"tag_name\": \"\\K.*?(?=\")}g')/platform.phar --output /usr/local/bin/platform && chmod 777 /usr/local/bin/platform\n\nRUN mkdir -p \"/opt/phpstorm-coverage\" && \\\n    chmod a+rw \"/opt/phpstorm-coverage\"\n\nRUN curl -f -sSL --output /usr/local/bin/acli https://github.com/acquia/cli/releases/latest/download/acli.phar && chmod 777 /usr/local/bin/acli\n\nRUN curl -f -sSL https://github.com/backdrop-contrib/drush/releases/download/${BACKDROP_DRUSH_VERSION}/backdrop-drush-extension.zip -o /tmp/backdrop-drush-extension.zip && unzip -o /tmp/backdrop-drush-extension.zip -d /var/tmp/backdrop_drush_commands && rm /tmp/backdrop-drush-extension.zip\n\nRUN mkdir -p /etc/nginx/sites-enabled /var/log/apache2 /var/run/apache2 /var/lib/apache2/module/enabled_by_admin /var/lib/apache2/module/disabled_by_admin && \\\n    touch /var/log/php-fpm.log && \\\n    chmod ugo+rw /var/log/php-fpm.log && \\\n    chmod ugo+rwx /var/run && \\\n    touch /var/log/nginx/access.log && \\\n    touch /var/log/nginx/error.log && \\\n    chmod -R ugo+rw /var/log/nginx/ && \\\n    chmod ugo+rwx /usr/local/bin/* && \\\n    update-alternatives --set php /usr/bin/php${PHP_DEFAULT_VERSION} && \\\n    ln -sf /usr/sbin/php-fpm${PHP_DEFAULT_VERSION} /usr/sbin/php-fpm\n\nRUN chmod -R 777 /var/log\n\n# we need to create the /var/cache/linux and /var/lib/nginx manually for the arm64 image and chmod them, please don't remove them!\nRUN mkdir -p /mnt/ddev-global-cache/mkcert /run/{php,blackfire} /var/cache/nginx /var/lib/nginx && chmod -R ugo+rw /mnt/ddev-global-cache/\n\nRUN chmod -R ugo+w /usr/sbin /usr/bin /etc/nginx /var/cache/nginx /var/lib/nginx /run /var/www /etc/php/*/*/conf.d/ /var/lib/php/modules /etc/alternatives /usr/lib/node_modules /etc/php /etc/apache2 /var/log/apache2/ /var/run/apache2 /var/lib/apache2 /mnt/ddev-global-cache/*\n\nRUN source /tmp/ddev/vars && curl -f -sSL https://github.com/drud/mkcert/releases/download/${MKCERT_VERSION}/mkcert-${MKCERT_VERSION}-${MKCERT_ARCH} -o /usr/local/bin/mkcert && chmod 777 /usr/local/bin/mkcert\n\nRUN mkdir -p /var/xhprof && curl -f -o /tmp/xhprof.tgz -sSL https://pecl.php.net/get/xhprof && tar -zxf /tmp/xhprof.tgz --strip-components=1 -C /var/xhprof && chmod 777 /var/xhprof/xhprof_html && rm /tmp/xhprof.tgz\n\nRUN touch /var/log/nginx/error.log /var/log/nginx/access.log /var/log/php-fpm.log && \\\n  chmod 666 /var/log/nginx/error.log /var/log/nginx/access.log /var/log/php-fpm.log\n\nRUN a2dismod mpm_event\nRUN a2enmod ssl headers expires\n\n# scripts added last because they're most likely place to make changes, speeds up build\nADD ddev-webserver-base-scripts /\nRUN chmod ugo+x /start.sh /healthcheck.sh\n\n# Composer, etc may need to be updated by composer self-update\nRUN chmod -f ugo+rwx /usr/local/bin /usr/local/bin/*\n\nRUN chmod ugo+w /etc/ssl/certs /usr/local/share/ca-certificates\n\nHEALTHCHECK --interval=1s --retries=10 --timeout=120s --start-period=10s CMD [\"/healthcheck.sh\"]\nCMD [\"/start.sh\"]\nRUN apt-get -qq clean -y && rm -rf /var/lib/apt/lists/* /tmp/ddev\n#END ddev-webserver-dev-base\n\n### ---------------------------ddev-webserver--------------------------------------\n### This could be known as ddev-webserver-dev as it's development-env targeted\n### But for historical reasons, it's just ddev-webserver\n### Build ddev-webserver by turning ddev-webserver-dev-base into one layer\nFROM scratch as ddev-webserver\nENV PHP_DEFAULT_VERSION=\"7.4\"\nENV NGINX_SITE_TEMPLATE /etc/nginx/nginx-site.conf\nENV APACHE_SITE_TEMPLATE /etc/apache2/apache-site.conf\nENV TERMINUS_CACHE_DIR=/mnt/ddev-global-cache/terminus/cache\nENV CAROOT /mnt/ddev-global-cache/mkcert\nENV COMPOSER_ALLOW_SUPERUSER=1\nENV COMPOSER_CACHE_DIR=/mnt/ddev-global-cache/composer\nENV COMPOSER_PROCESS_TIMEOUT=2000\nENV DEBIAN_FRONTEND noninteractive\nENV TERM xterm\nENV MH_SMTP_BIND_ADDR 127.0.0.1:1025\nENV BASH_ENV /etc/bash.nointeractive.bashrc\nENV LANG=C.UTF-8\nENV XHPROF_OUTPUT_DIR=/tmp/xhprof\n\nCOPY --from=ddev-webserver-dev-base / /\nEXPOSE 80 8025\nHEALTHCHECK --interval=1s --retries=10 --timeout=120s --start-period=10s CMD [\"/healthcheck.sh\"]\nCMD [\"/start.sh\"]\n#END ddev-webserver\n\n### ---------------------------ddev-webserver-prod-base--------------------------------------\n### Build ddev-webserver-prod-base from ddev-webserver-base\n### This image is aimed at actual hardened production environments\nFROM ddev-webserver-base as ddev-webserver-prod-base\nENV CAROOT /mnt/ddev-global-cache/mkcert\nENV PHP_DEFAULT_VERSION=\"7.4\"\n\nRUN wget -q -O - https://packages.blackfire.io/gpg.key | apt-key add -\nRUN echo \"deb http://packages.blackfire.io/debian any main\" > /etc/apt/sources.list.d/blackfire.list\nRUN apt-get update\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN mkdir /tmp/ddev && \\\n    if [[ $TARGETPLATFORM == \"linux/arm64\" ]]; then \\\n        echo 'MKCERT_ARCH=\"linux-arm64\"' > /tmp/ddev/vars; \\\n    else \\\n        echo 'MKCERT_ARCH=\"linux-amd64\"' >/tmp/ddev/vars; \\\n    fi\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qq install -o Dpkg::Options::=\"--force-confold\" --no-install-recommends --no-install-suggests -y \\\n    blackfire-php \\\n    fontconfig \\\n    gettext \\\n    git \\\n    iproute2 \\\n    iputils-ping \\\n    jq \\\n    libpcre3 \\\n    locales-all \\\n    nano \\\n    ncurses-bin \\\n    netcat \\\n    openssh-client \\\n    patch \\\n    rsync \\\n    sqlite3 \\\n    unzip \\\n    zip && rm -rf /var/lib/apt/lists/*;\n\nADD ddev-webserver-prod-files /\nRUN phpdismod blackfire xhprof\n\nRUN curl -f -sSL https://github.com/backdrop-contrib/drush/releases/download/${BACKDROP_DRUSH_VERSION}/backdrop-drush-extension.zip -o /tmp/backdrop-drush-extension.zip && unzip -o /tmp/backdrop-drush-extension.zip -d /var/tmp/backdrop_drush_commands\n\nRUN mkdir -p /etc/nginx/sites-enabled /var/lock/apache2 /var/log/apache2 /var/run/apache2 /var/lib/apache2/module/enabled_by_admin /var/lib/apache2/module/disabled_by_admin && \\\n    touch /var/log/php-fpm.log && \\\n    chmod ugo+rw /var/log/php-fpm.log && \\\n    chmod ugo+rwx /var/run && \\\n    touch /var/log/nginx/access.log && \\\n    touch /var/log/nginx/error.log && \\\n    chmod -R ugo+rw /var/log/nginx/ && \\\n    chmod ugo+rx /usr/local/bin/* && \\\n    update-alternatives --set php /usr/bin/php${PHP_DEFAULT_VERSION} && \\\n    ln -sf /usr/sbin/php-fpm${PHP_DEFAULT_VERSION} /usr/sbin/php-fpm\n\nRUN chmod -R 777 /var/log\n\n# we need to create the /var/cache/linux and /var/lib/nginx manually for the arm64 image and chmod them, please don't remove them!\nRUN mkdir -p /mnt/ddev-global-cache/mkcert /run/php /var/cache/nginx /var/lib/nginx && chmod -R ugo+rw /home /mnt/ddev-global-cache/\n\nRUN chmod -R ugo+w /usr/sbin /usr/bin /etc/nginx /var/cache/nginx /var/lib/nginx /run /var/www /etc/php/*/*/conf.d/ /var/lib/php/modules /etc/alternatives /usr/lib/node_modules /etc/php /etc/apache2 /var/lock/apache2 /var/log/apache2/ /var/run/apache2 /var/lib/apache2 /mnt/ddev-global-cache/*\n\nRUN source /tmp/ddev/vars && curl -f -sSL https://github.com/drud/mkcert/releases/download/${MKCERT_VERSION}/mkcert-${MKCERT_VERSION}-${MKCERT_ARCH} -o /usr/local/bin/mkcert && chmod +x /usr/local/bin/mkcert\n\nRUN touch /var/log/nginx/error.log /var/log/nginx/access.log /var/log/php-fpm.log && \\\n  chmod 666 /var/log/nginx/error.log /var/log/nginx/access.log /var/log/php-fpm.log\n\nRUN a2dismod mpm_event\nRUN a2enmod ssl headers expires\n\n# scripts added last because they're most likely place to make changes, speeds up build\nADD ddev-webserver-prod-scripts /\nRUN chmod ugo+x /start.sh /healthcheck.sh\n\nRUN /sbin/mkhomedir_helper www-data\n\nRUN chmod ugo+w /etc/ssl/certs /usr/local/share/ca-certificates\n\nHEALTHCHECK --interval=1s --retries=10 --timeout=120s --start-period=10s CMD [\"/healthcheck.sh\"]\nCMD [\"/start.sh\"]\nRUN apt-get -qq clean -y && rm -rf /var/lib/apt/lists/*\n\n#END ddev-webserver-prod-base\n\n### ---------------------------ddev-webserver-prod--------------------------------------\n### Build ddev-webserver-prod, the hardened version of ddev-webserver-base\n### (Withut dev features, single layer)\nFROM scratch as ddev-webserver-prod\nENV PHP_DEFAULT_VERSION=\"7.4\"\nENV NGINX_SITE_TEMPLATE /etc/nginx/nginx-site.conf\nENV APACHE_SITE_TEMPLATE /etc/apache2/apache-site.conf\nENV CAROOT /mnt/ddev-global-cache/mkcert\nENV COMPOSER_ALLOW_SUPERUSER=1\nENV COMPOSER_CACHE_DIR=/mnt/ddev-global-cache/composer\nENV COMPOSER_PROCESS_TIMEOUT=2000\nENV DEBIAN_FRONTEND noninteractive\nENV LANG=C.UTF-8\nENV TERM xterm\nENV BASH_ENV /etc/bash.nointeractive.bashrc\n\nCOPY --from=ddev-webserver-prod-base / /\nHEALTHCHECK --interval=1s --retries=10 --timeout=120s --start-period=10s CMD [\"/healthcheck.sh\"]\nCMD [\"/start.sh\"]\n#END ddev-webserver-prod\n"
}