{
  "startTime": 1674251396781,
  "endTime": 1674251397720,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 36,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 130,
        "columnEnd": 237
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 39,
        "columnEnd": 73
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 31,
        "columnEnd": 105
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 31,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 31,
        "columnEnd": 105
      }
    }
  ],
  "repairedDockerfile": "### ---------------------------base--------------------------------------\n### Build the base Debian image that will be used in every other image\nFROM debian:bullseye-slim as base\n\nRUN ls -l $(which dpkg-split) && ls -l $(which dpkg-deb)\nRUN for item in dpkg-split dpkg-deb; do \\\n  if [ ! -f /usr/sbin/$item ]; then \\\n    ln -sf /usr/bin/$item /usr/sbin/$item; \\\n  fi; \\\ndone\nRUN for item in tar rm; do \\\n  if [ ! -f /usr/sbin/$item ]; then \\\n    ln -sf /bin/$item /usr/sbin/$item; \\\n  fi; \\\ndone\n\nRUN ls -l /usr/sbin/dpkg-split /usr/sbin/dpkg-deb /usr/sbin/tar /usr/sbin/rm\n\nRUN apt-get -qq update\nRUN apt-get -qq install --no-install-recommends --no-install-suggests -y \\\n    apt-transport-https \\\n    ca-certificates \\\n    bzip2 \\\n    curl \\\n    git \\\n    gnupg \\\n    less \\\n    lsb-release \\\n    procps \\\n    tree \\\n    vim \\\n    wget && rm -rf /var/lib/apt/lists/*;\n#END base\n\n### ---------------------------ddev-php-base--------------------------------------\n### Build ddev-php-base, which is the base for ddev-php-prod and ddev-webserver-*\n### This combines the packages and features of DDEV-Local's ddev-webserver and\n### DDEV-Live's PHP image\nFROM base AS ddev-php-base\nARG PHP_DEFAULT_VERSION=\"7.4\"\nENV DDEV_PHP_VERSION=$PHP_DEFAULT_VERSION\nENV PHP_VERSIONS=\"php5.6 php7.0 php7.1 php7.2 php7.3 php7.4 php8.0 php8.1\"\nENV PHP_INI=/etc/php/$PHP_DEFAULT_VERSION/fpm/php.ini\nENV YQ_VERSION=v4.7.1\nENV DRUSH_VERSION=8.4.8\nENV NODE_LTS=16\n# composer normally screams about running as root, we don't need that.\nENV COMPOSER_ALLOW_SUPERUSER 1\nENV COMPOSER_PROCESS_TIMEOUT 2000\n\n# TARGETPLATFORM is Docker buildx's target platform (e.g. linux/arm64), while\n# BUILDPLATFORM is the platform of the build host (e.g. linux/amd64)\nARG TARGETPLATFORM\nARG BUILDPLATFORM\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN wget -q -O /tmp/nginx_signing.key https://nginx.org/keys/nginx_signing.key && \\\n    apt-key add /tmp/nginx_signing.key && \\\n    rm /tmp/nginx_signing.key && \\\n    echo \"deb http://nginx.org/packages/debian/ $(lsb_release -sc) nginx\" > /etc/apt/sources.list.d/nginx.list\n\nRUN wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg && \\\n    echo \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" > /etc/apt/sources.list.d/php.list && apt-get update\nRUN curl -sSL --fail https://deb.nodesource.com/setup_${NODE_LTS}.x | bash -\n\nRUN apt-get -qq update\nRUN apt-get -qq install --no-install-recommends --no-install-suggests -y \\\n    apache2 \\\n    file \\\n    ghostscript \\\n    imagemagick \\\n    graphicsmagick \\\n    jq \\\n    mariadb-client \\\n    msmtp \\\n    nginx \\\n    nodejs \\\n    php-uploadprogress \\\n    postgresql-client \\\n    sqlite3 && rm -rf /var/lib/apt/lists/*;\n\nRUN npm config set unsafe-perm true && npm install --global gulp-cli yarn && npm cache clean --force;\n# Normal user needs to be able to write to php sessions\nRUN chmod 777 /var/lib/php/sessions\nRUN set -eu -o pipefail && LATEST=$( curl -f --silent \"https://api.github.com/repos/nvm-sh/nvm/releases/latest\" | jq -r .tag_name) && curl -f -sL https://raw.githubusercontent.com/nvm-sh/nvm/${LATEST}/install.sh -o /usr/local/bin/install_nvm.sh && chmod +x /usr/local/bin/install_nvm.sh\n\n# The number of permutations of php packages available on each architecture because\n# too much to handle, so has been codified here instead of in obscure logic\nENV php56_amd64=\"apcu bcmath bz2 curl cli common fpm gd imagick intl json ldap mbstring mcrypt memcached mysql opcache pgsql readline redis soap sqlite3 uploadprogress xdebug xhprof xml xmlrpc zip\"\nENV php56_arm64=\"apcu bcmath bz2 curl cli common fpm gd imagick intl json ldap mbstring mcrypt mysql opcache pgsql readline soap sqlite3 uploadprogress xdebug xml xhprof xmlrpc zip\"\nENV php70_amd64=\"apcu apcu-bc bcmath bz2 curl cli common fpm gd imagick intl json ldap mbstring mcrypt memcached mysql opcache pgsql readline redis soap sqlite3 uploadprogress xdebug xhprof xml xmlrpc zip\"\nENV php70_arm64=$php70_amd64\nENV php71_amd64=$php70_amd64\nENV php71_arm64=$php70_arm64\nENV php72_amd64=\"apcu apcu-bc bcmath bz2 curl cli common fpm gd imagick intl json ldap mbstring memcached mysql opcache pgsql readline redis soap sqlite3 uploadprogress xdebug xhprof xml xmlrpc zip\"\nENV php72_arm64=$php72_amd64\nENV php73_amd64=$php72_amd64\nENV php73_arm64=$php72_arm64\nENV php74_amd64=\"apcu apcu-bc bcmath bz2 curl cli common fpm gd imagick intl json ldap mbstring memcached mysql opcache pgsql readline redis soap sqlite3 uploadprogress xdebug xhprof xml xmlrpc zip\"\nENV php74_arm64=$php74_amd64\n\n# As of php8.0 json is now part of core package and xmlrpc has been removed from PECL\nENV php80_amd64=\"apcu bcmath bz2 curl cli common fpm gd imagick intl ldap mbstring memcached mysql opcache pgsql readline redis soap sqlite3 uploadprogress xdebug xhprof xml xmlrpc zip\"\nENV php80_arm64=$php80_amd64\n\nENV php81_amd64=$php80_amd64\nENV php81_arm64=$php81_amd64\n\nRUN for v in $PHP_VERSIONS; do \\\n    targetarch=${TARGETPLATFORM#linux/}; \\\n    pkgvar=${v//.}_${targetarch}; \\\n    pkgs=$(echo ${!pkgvar} | awk -v v=\"$v\" ' BEGIN {RS=\" \"; }  { printf \"%s-%s \",v,$0 ; }' ); \\\n    [[ ${pkgs// } != \"\" ]] && (apt-get -qq install --no-install-recommends --no-install-suggests -y $pkgs || exit $?) \\\ndone && rm -rf /var/lib/apt/lists/*;\nRUN phpdismod xhprof\nRUN apt-get -qq autoremove -y\nRUN curl -f -o /usr/local/bin/composer -sSL https://getcomposer.org/composer-stable.phar && chmod ugo+wx /usr/local/bin/composer\nRUN curl -f -sSL \"https://github.com/drush-ops/drush/releases/download/${DRUSH_VERSION}/drush.phar\" -o /usr/local/bin/drush8 && chmod +x /usr/local/bin/drush8\nRUN curl -f -sSL -o /usr/local/bin/wp-cli -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && chmod +x /usr/local/bin/wp-cli && ln -sf /usr/local/bin/wp-cli /usr/local/bin/wp\nRUN url=\"https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_${TARGETPLATFORM#linux/}\"; wget ${url} -O /usr/bin/yq && chmod +x /usr/bin/yq\nADD ddev-php-files /\nRUN apt-get -qq autoremove && apt-get -qq clean -y && rm -rf /var/lib/apt/lists/*\nRUN\tupdate-alternatives --set php /usr/bin/php${DDEV_PHP_VERSION}\nRUN ln -sf /usr/sbin/php-fpm${DDEV_PHP_VERSION} /usr/sbin/php-fpm\nRUN mkdir -p /run/php && chown -R www-data:www-data /run\n\n#END ddev-php-base\n\n### ---------------------------ddev-php-prod--------------------------------------\n### Build ddev-php-prod from ddev-php-base as a single layer\n### There aren't any differences\nFROM scratch AS ddev-php-prod\nCOPY --from=ddev-php-base / /\nEXPOSE 8080 8585\nCMD [\"/usr/sbin/php-fpm\", \"-F\"]\n#END ddev-php-prod\n"
}