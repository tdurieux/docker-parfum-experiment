{
  "startTime": 1674254865218,
  "endTime": 1674254865776,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Welcome to MLReef frontend's dockerfile.\n#\n# Stage 1: build the React app in production mode\n#\n# The image must correspond with the image used in bin/npm\nFROM node:14.16.1-alpine AS BUILDER\nARG CI_COMMIT_REF_SLUG\nARG CI_PIPELINE_ID=-1\nARG CI_PIPELINE_URL=\"CI URL N/A\"\nARG NODE_OPTIONS=\"--max-old-space-size=2048\"\n\n# add npm binaries to shell path\nENV PATH /app/node_modules/.bin:$PATH\n\n# all following commands will be executed in /app\nWORKDIR /workdir\n# copy the sources to image (except .dockerignore)\nADD . /workdir\n\n# create build.info with build and add build information to React's env variables\nRUN echo \"Gitlab Pipeline $CI_PIPELINE_ID built on \"$(date +%Y-%m-%d\\ %H:%M:%S)  > build.info   && \\\n    echo \"build branch was $CI_COMMIT_REF_SLUG\"                                 >> build.info   && \\\n    echo \"$CI_PIPELINE_URL\"                                                     >> build.info   && \\\n    cat build.info                                                                              && \\\n    # Use Gitlab's internal unique job ID as build version. This way versions can be traced back to a specific build.\n    echo \"SKIP_PREFLIGHT_CHECK=true\"                                             > .env         && \\\n    echo \"REACT_APP_VERSION=$CI_PIPELINE_ID\"                                    >> .env         && \\\n    echo \"REACT_APP_BUILD_NUMBER=$CI_PIPELINE_ID\"                               >> .env         && \\\n    echo \"REACT_APP_BRANCH_NAME=$CI_COMMIT_REF_SLUG\"                            >> .env         && \\\n    echo \"REACT_APP_EXTERNAL_URL=https://mlreef.com\"                            >> .env         && \\\n    echo \"Time: $(date +%Y-%m-%d\\ %H:%M:%S)\"                                                    && \\\n    cat .env\n\n\n# install all NPM packages and compile the react app\nRUN echo \"Frontend Build Time: $(date +%Y-%m-%d\\ %H:%M:%S)\" && \\\n    npm install --global --silent react-scripts@3.4.3       && \\\n    npm ci --silent .                                       && \\\n    echo \"Frontend Build Time: $(date +%Y-%m-%d\\ %H:%M:%S)\" && \\\n    # execute tests first, so there should be a halt when compiling if tests fail\n    # npm test                                                && \\\n    echo \"Frontend Build Time: $(date +%Y-%m-%d\\ %H:%M:%S)\" && \\\n    npm run build && \\\n    echo \"Frontend Build Time: $(date +%Y-%m-%d\\ %H:%M:%S)\" && npm cache clean --force;\n\n#\n# Stage 2: Use nginx for serving the finished production build\n#\nFROM nginx:latest AS PROD\n# Copy frontend production build from the NPM stage\n# This path has to correspond to the configuration in nginx_default.conf\nCOPY --from=BUILDER /workdir/build /usr/share/nginx/html\n\n# Add nginx configuration. Note the name change of the file\nADD nginx_default.conf /etc/nginx/conf.d/default.conf\nRUN chmod 777 /etc/nginx/conf.d/default.conf\n"
}