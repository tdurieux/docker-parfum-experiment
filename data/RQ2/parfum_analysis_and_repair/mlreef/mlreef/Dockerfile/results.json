{
  "startTime": 1674252588571,
  "endTime": 1674252589699,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 160,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 160,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 196,
        "lineEnd": 197,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 160,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 196,
        "lineEnd": 197,
        "columnStart": 4,
        "columnEnd": 114
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 117
      }
    }
  ],
  "repairedDockerfile": "####################################################################\n####################################################################\n# Welcome to MLReef Nautilus dockerfile.\n#\n# https://gitlab.com/gitlab-org/omnibus-gitlab/-/tree/master/docker\n#\n####################################################################\nFROM gradle:6.5-jdk8 AS BACKEND_BUILDER\nENV JVM_OPTS -Xmx2g -Xms2g -XX:MaxPermSize=1024m\n# provide a tmp/cache dir\nVOLUME /tmp\n\n# all following commands will be executed from inside the workdir\nWORKDIR /workdir\n# copy the sources to image (except .dockerignore)\nADD backend/ /workdir\nRUN gradle -x test :mlreef-rest:bootJar :mlreef-rest:prepareDocker -x :mlreef-rest:asciidoctor\n\n\n\n# The image must correspond with the image used in bin/npm\nFROM node:14.16.1-alpine AS FRONTEND_BUILDER\nARG CI_COMMIT_REF_SLUG\nARG CI_PIPELINE_ID=-1\nARG CI_PIPELINE_URL=\"CI URL N/A\"\nARG NODE_OPTIONS=\"--max-old-space-size=2048\"\n\n# add npm binaries to shell path\nENV PATH /app/node_modules/.bin:$PATH\n\n# all following commands will be executed from inside the workdir\nWORKDIR /workdir\n# copy the sources to image (except .dockerignore)\nADD web/ /workdir\n\n# create build.info with build and add build information to React's env variables\nRUN echo \"Gitlab Pipeline $CI_PIPELINE_ID built on \"$(date +%Y-%m-%d\\ %H:%M:%S)  > build.info   && \\\n    echo \"build branch was $CI_COMMIT_REF_SLUG\"                                 >> build.info   && \\\n    echo \"$CI_PIPELINE_URL\"                                                     >> build.info   && \\\n    cat build.info                                                                              && \\\n    # Use Gitlab's internal unique job ID as build version. This way versions can be traced back to a specific build.\n    echo \"SKIP_PREFLIGHT_CHECK=true\"                                             > .env         && \\\n    echo \"REACT_APP_VERSION=$CI_PIPELINE_ID\"                                    >> .env         && \\\n    echo \"REACT_APP_BUILD_NUMBER=$CI_PIPELINE_ID\"                               >> .env         && \\\n    echo \"REACT_APP_BRANCH_NAME=$CI_COMMIT_REF_SLUG\"                            >> .env         && \\\n    echo \"REACT_APP_EXTERNAL_URL=https://mlreef.com\"                            >> .env         && \\\n    echo \"Time: $(date +%Y-%m-%d\\ %H:%M:%S)\"                                                    && \\\n    cat .env\n\n\n# install all NPM packages and compile the react app\nRUN echo \"Frontend Build Time: $(date +%Y-%m-%d\\ %H:%M:%S)\" && \\\n    npm install --global --silent react-scripts@3.0.1       && \\\n    npm install --silent .                                  && \\\n    echo \"Frontend Build Time: $(date +%Y-%m-%d\\ %H:%M:%S)\" && \\\n    # execute tests first, so there should be a halt when compiling if tests fail\n    npm test                                                && \\\n    echo \"Frontend Build Time: $(date +%Y-%m-%d\\ %H:%M:%S)\" && \\\n    npm run build && \\\n    echo \"Frontend Build Time: $(date +%Y-%m-%d\\ %H:%M:%S)\" && npm cache clean --force;\n\n\n\nFROM gitlab/gitlab-ce:12.7.0-ce.0 AS NAUTILUS\nMAINTAINER mlreef.com\n\n# Setup JAVA_HOME -- useful for docker commandline\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/\nRUN export JAVA_HOME\n\n# TODO rename to MLREEF_INSTANCE_HOST\nENV INSTANCE_HOST \"localhost\"\n# TODO rename to MLREEF_GITLAB_PORT\nENV GITLAB_PORT \"10080\"\nENV MLREEF_DOCKER_REGISTRY_PORT \"5050\"\n\n# TODO is this correct, can it be moved in the above GITLAB_OMNIBUS_CONFIG block\nENV GITLAB_HTTPS \"false\"\n# TODO is this correct, can it be moved in the above GITLAB_OMNIBUS_CONFIG block\nENV TZ 'Austria/Vienna'\n# TODO is this correct, can it be moved in the above GITLAB_OMNIBUS_CONFIG block\nENV GITLAB_TIMEZONE 'Vienna'\n# TODO is this correct, can it be moved in the above GITLAB_OMNIBUS_CONFIG block\nENV SSL_SELF_SIGNED 'false'\n\n# MLReef Confguration\n# Postgres version for MLReef backend Database\nENV MLREEF_PG_VERSION \"11\"\n# Postgres OS and super user\nENV MLREEF_PG_USER \"postgres\"\n# Postgres cluster name\nENV MLREEF_PG_CLUSTER \"mlreefdb\"\n# TODO rename to MLREEF_DB_EXTENSION\nENV DB_EXTENSION \"pg_trgm\"\n### Backend Config\nENV MLREEF_BACKEND_PORT \"8081\"\n#Select the Backend's Spring profile\n# TODO rename to MLREEF_SPRING_PROFILES_ACTIVE\nENV SPRING_PROFILES_ACTIVE \"docker\"\n# Backend DB host\n# TODO rename to MLREEF_DB_HOST\nENV DB_HOST \"localhost\"\n# Backend DB port\n# TODO rename to MLREEF_DB_PORT\nENV DB_PORT \"6000\"\n# Backend DB user\n# TODO rename to MLREEF_DB_USER\nENV DB_USER \"mlreef\"\n# Backend DB password\n# TODO rename to MLREEF_DB_PASS\nENV DB_PASS \"password\"\n# Backend DB name\n# TODO rename to MLREEF_DB_NAME\nENV DB_NAME \"mlreef_backend\"\n# Backend Redis host\n# TODO rename to MLREEF_REDIS_HOST\nENV REDIS_HOST \"localhost\"\n# Backend Startup delay\n# TODO rename to MLREEF_STARTUP_DELAY\nENV STARTUP_DELAY \"30\"\n# EPF image tag, by default it will pick up master\nENV EPF_IMAGE_TAG \"master\"\n# Experiment image tag, by default it will pick up master\nENV EXPERIMENT_IMAGE_TAG \"master\"\n# Set PIP_SERVER to blank. In Nautilus, it could be set to local pip server to run Nautilus in offline mode\nENV PIP_SERVER \"\"\n\n\n###\n### Modify Gitlab Omnibus scripts\n###\nRUN mv /assets/wrapper /assets/gitlab-wrapper\n# Remove the wait for sigterm from the gitlab wrapper script to make it \"interactive\"\n# The MLReef wrapper will handle starting and stopping of services\nRUN sed -i \"/# Tail all logs/d\" /assets/gitlab-wrapper\nRUN sed -i \"/# gitlab-ctl tail &/d\" /assets/gitlab-wrapper\nRUN sed -i \"/# Wait for SIGTERM/d\" /assets/gitlab-wrapper\nRUN sed -i \"/wait/d\" /assets/gitlab-wrapper\n\n\n\n###\n### GITLAB RUNNER\n###\n# Install Gitlab Runner in Docker container\n# https://docs.gitlab.com/runner/install/linux-manually.html\nRUN apt-get update && \\\n    curl -f -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | bash && \\\n    apt-get install --no-install-recommends --yes gitlab-runner && \\\n    apt-get clean && \\\n    gitlab-runner --version && rm -rf /var/lib/apt/lists/*;\n\n\n\n###\n### SOFTWARE\n###\n# Install NGINX reverse proxy\n# Install Open JDK 8 and fix cert issues\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends --assume-yes \\\n    # NGINX is MLReef's API gateway\n    nginx \\\n    ant \\\n    # THe java runtime for the MLReef backend\n    openjdk-8-jdk \\\n    ca-certificates-java && \\\n    # cleanup apt-get cache\n    apt-get clean && \\\n    # Fix cert issues\n    update-ca-certificates -f && \\\n    # Remove nginx default config\n    rm -rf /etc/nginx/sites-enabled/default && rm -rf /var/lib/apt/lists/*;\n\n# Install Docker and jq\nRUN apt-get -y --no-install-recommends install curl apt-transport-https ca-certificates software-properties-common jq && \\\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add && \\\n    add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable\" |  \\\n                        tee /etc/apt/sources.list.d/docker.list && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y docker-ce && rm -rf /var/lib/apt/lists/*;\n\n\n####\n#### BACKEND DATABASE\n####\n# Set up PostgreSQL for mlreefdb\n# Add postgres repo to apt package manager\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y wget vim lsb-release && \\\n    wget --no-check-certificate -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc |  apt-key add - && \\\n    RELEASE=$(lsb_release -cs) && \\\n    echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)\"-pgdg main |  tee  /etc/apt/sources.list.d/pgdg.list && rm -rf /var/lib/apt/lists/*;\n\n# Install Postgres\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y acl sudo locales \\\n    postgresql-${MLREEF_PG_VERSION} postgresql-client-${MLREEF_PG_VERSION} postgresql-contrib-${MLREEF_PG_VERSION} && rm -rf /var/lib/apt/lists/*;\n\n######\n###### BACKEND\n######\n# either from master:\n# COPY --from=BACKEND_MASTER /app /app\n# or: from BACKEND_BUILDER\n# add the gradle dependencies and own artificats in a docker-friendly way\nCOPY --from=BACKEND_BUILDER /workdir/mlreef-rest/build/dependency/BOOT-INF/classes /app\nCOPY --from=BACKEND_BUILDER /workdir/mlreef-rest/build/dependency/BOOT-INF/lib     /app/lib\nCOPY --from=BACKEND_BUILDER /workdir/mlreef-rest/build/dependency/META-INF         /app/META-INF\n\n\n\n######\n###### FRONTEND\n######\n# Add nginx configuration. Note the name change of the file\n# Copy frontend production build from the NPM stage\n# This path has to correspond to the configuration in nginx_default.conf\nCOPY --from=FRONTEND_BUILDER /workdir/build /usr/share/nginx/html\n# Add nginx configuration. Note the name change of the file\nADD web/nginx_default.conf /etc/nginx/conf.d/default.conf\nRUN chmod 777 /etc/nginx/conf.d/default.conf\n# TODO FIXME: nginx: [emerg] \"gzip\" directive is duplicate in /etc/nginx/conf.d/default.conf:14\nRUN sed -i \"/gzip on;/d\" /etc/nginx/conf.d/default.conf\n\n\n# Wrapper to handle additional script to run after default gitlab image's /assets/wrapper\nADD nautilus/assets/ /assets\nADD epf/ /epf\nADD images/ /images\n\n# Export derived env variables from the above defined ENV variables.These should not be directly overwritten.\nRUN cat /assets/dynamic-env > /etc/bash.bashrc\n\nCMD [\"/assets/mlreef-wrapper\"]\n\n# Volumes from Gitlab base image\nVOLUME [\"/etc/gitlab\", \"/var/log/gitlab\", \"/var/opt/gitlab\"]\n# Volumes for mlreef's backend database\nVOLUME  [\"/etc/postgresql\", \"/var/log/${MLREEF_PG_CLUSTER}-postgresql\", \"/var/opt/mlreef\"]\n\n# Expose mlreef postgres\nEXPOSE $DB_PORT\n# Expose HTTPS ports\nEXPOSE $MLREEF_BACKEND_PORT 80 443 $GITLAB_PORT\n# Expose Gitlab SSH port\nEXPOSE 22\n# Expose Docker registry port\nEXPOSE $MLREEF_DOCKER_REGISTRY_PORT\n\nENV GITLAB_ROOT_EMAIL    \"root@localhost\"\nENV GITLAB_ROOT_PASSWORD \"password\"\n# The GITLAB_ADMIN_TOKEN is shared between Gitlab and the Backend\nENV GITLAB_ADMIN_TOKEN   \"token\"\n\n# These secrets are used by Gitlab to encrypt passwords and tokens\n# Changing them will invalidate the GITLAB_ADMIN_TOKEN as well as all other tokens\nENV GITLAB_SECRETS_SECRET_KEY_BASE  \"secret1111111111122222222222333333333334444444444555555555566666666661234\"\nENV GITLAB_SECRETS_OTP_KEY_BASE     \"secret1111111111122222222222333333333334444444444555555555566666666661234\"\nENV GITLAB_SECRETS_DB_KEY_BASE      \"secret1111111111122222222222333333333334444444444555555555566666666661234\"\n"
}