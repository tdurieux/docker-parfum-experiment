{
  "startTime": 1674218473374,
  "endTime": 1674218474651,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:8\n\nRUN yum -y update\n#RUN yum update groupinstall -y 'Development Tools'\nRUN yum -y --enablerepo=extras install epel-release && rm -rf /var/cache/yum\nRUN yum -y install squashfs-tools libseccomp-devel libuuid-devel openssl-devel && rm -rf /var/cache/yum\nRUN yum -y install python3-pip && rm -rf /var/cache/yum\nRUN yum -y install git wget gcc R-core && rm -rf /var/cache/yum\n#RUN pip install coverage nose nose-watch\n\nRUN export VERSION=1.14.6 OS=linux ARCH=amd64 && \\\n    wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \\\n    tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \\\n    rm go$VERSION.$OS-$ARCH.tar.gz\n\nENV GOPATH=\"${HOME}/go\"\nENV PATH=\"/usr/local/go/bin:${PATH}:${GOPATH}/bin\"\n\n#RUN echo 'export GOPATH=${HOME}/go' >> ~/.bashrc && \\\n#    echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc && \\\n#    source ~/.bashrc\n\nRUN export VERSION=3.2.0 &&  \\\n    wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-${VERSION}.tar.gz && \\\n    tar -xzf singularity-${VERSION}.tar.gz && rm singularity-${VERSION}.tar.gz\n\nRUN cd singularity && ./mconfig && \\\n    make -C ./builddir && \\\n    make -C ./builddir install\n\n\nRUN cd / && wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && bash Miniconda3-latest-Linux-x86_64.sh -b\n\nENV PATH=\"/root/miniconda3/bin:${PATH}\"\n\nRUN conda create -y --name metag\nRUN source activate metag\nRUN conda config --add channels bioconda && conda config --add channels r && conda config --add channels conda-forge\nRUN conda install datrie -y\nRUN conda install psutil -y\nRUN conda install snakemake=5.5.3  -y\nRUN conda install -c r r-essentials r-base r-ggplot2 -y\n\nRUN pip install --no-cache-dir osfclient\nRUN git clone https://github.com/signaturescience/metagenomics\n\nRUN cd /metagenomics/workflows && python download_offline_files.py --workflow all\n\nWORKDIR /metagenomics/test\nCMD [ \"sh\", \"-c\", \"source activate metag && export SINGULARITY_BINDPATH=\"data:/tmp\" && python test_all_workflows.py\"]\n"
}