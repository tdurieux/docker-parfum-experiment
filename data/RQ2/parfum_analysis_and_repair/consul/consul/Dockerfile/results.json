{
  "startTime": 1674253350625,
  "endTime": 1674253351810,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 26,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 26,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.7.6-buster\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Install essential Linux packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    cmake \\\n    imagemagick \\\n    libappindicator1 \\\n    libindicator7 \\\n    libpq-dev \\\n    libxss1 \\\n    memcached \\\n    nodejs \\\n    pkg-config \\\n    postgresql-client \\\n    shared-mime-info \\\n    sudo \\\n    unzip && rm -rf /var/lib/apt/lists/*;\n\n# Install Chromium for E2E integration tests\nRUN apt-get update -qq && apt-get install --no-install-recommends -y chromium && rm -rf /var/lib/apt/lists/*;\n\n# Files created inside the container repect the ownership\nRUN adduser --shell /bin/bash --disabled-password --gecos \"\" consul \\\n && adduser consul sudo \\\n && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\nRUN echo 'Defaults secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bundle/bin\"' > /etc/sudoers.d/secure_path\nRUN chmod 0440 /etc/sudoers.d/secure_path\n\n# Define where our application will live inside the image\nENV RAILS_ROOT /var/www/consul\n\n# Create application home. App server will need the pids dir so just create everything in one shot\nRUN mkdir -p $RAILS_ROOT/tmp/pids\n\n# Set our working directory inside the image\nWORKDIR $RAILS_ROOT\n\n# Use the Gemfiles as Docker cache markers. Always bundle before copying app src.\n# (the src likely changed and we don't want to invalidate Docker's cache too early)\nCOPY Gemfile* ./\nRUN bundle install\n\n# Copy the Rails application into place\nCOPY . .\n\nENTRYPOINT [\"./docker-entrypoint.sh\"]\n# Define the script we want run once the container boots\n# Use the \"exec\" form of CMD so our script shuts down gracefully on SIGTERM (i.e. `docker stop`)\n# CMD [ \"config/containers/app_cmd.sh\" ]\nCMD [\"bundle\", \"exec\", \"rails\", \"server\", \"-b\", \"0.0.0.0\"]\n"
}