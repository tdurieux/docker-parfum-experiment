{
  "startTime": 1674246577747,
  "endTime": 1674246579048,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 18,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 8,
        "columnEnd": 96
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 51,
        "columnStart": 36,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 8,
        "columnEnd": 96
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 51,
        "columnStart": 36,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "# Base softlearning container that contains all softlearning requirements,\n# but not the actual softlearning repo. Could be used for example when developing\n# softlearning, in which case you would mount softlearning repo in to the container\n# as a volume, and thus be able to modify code on the host, yet run things inside\n# the container. You are encouraged to use docker-compose (docker-compose.dev.yml),\n# which should allow you to setup your environment with a single one command.\n#\n# Usage:\n# 1) Build image. Typically `docker-compose` would handle this automatically for us\n# # but due to incompatible secret handling, we have to build the image manually.\n# DOCKER_BUILDKIT=1 \\\n#   docker build \\\n#   -f ./docker/Dockerfile.softlearning.base.gpu \\\n#   -t softlearning:latest-gpu \\\n#   --progress=plain \\\n#   --secret id=mjkey,src=\"${HOME}/.mujoco/mjkey.txt\" .\n# 2) Run:\n# docker-compose \\\n#   -p ${USER} \\\n#   -f ./docker/docker-compose.dev.gpu.yml \\\n#   up \\\n#   -d \\\n#   --force-recreate\n\n\nARG UBUNTU_VERSION=18.04\nARG ARCH=\nARG CUDA=10.0\n\nFROM nvidia/cudagl${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\n\nARG UBUNTU_VERSION\nARG ARCH\nARG CUDA\nARG CUDNN=7.4.1.5-1\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# MAINTAINER Kristian Hartikainen <kristian.hartikainen@gmail.com>\n\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# See http://bugs.python.org/issue19846\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nENV PATH /opt/conda/bin:$PATH\n\nRUN apt-get update --fix-missing && apt-get install --no-install-recommends -y wget bzip2 ca-certificates \\\n    libglib2.0-0 libxext6 libsm6 libxrender1 \\\n    git mercurial subversion && rm -rf /var/lib/apt/lists/*;\n\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh && \\\n    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \\\n    rm /tmp/miniconda.sh && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> /etc/bash.bashrc\n\nRUN apt-get install --no-install-recommends -y curl grep sed dpkg && \\\n    TINI_VERSION=$( curl -f https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:') && \\\n    curl -f -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb && \\\n    dpkg -i tini.deb && \\\n    rm tini.deb && \\\n    apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n\nRUN conda update -y --name base conda \\\n    && conda clean --all -y\n\n\n# ========== Tensorflow dependencies ==========\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        cuda-cublas-${CUDA/./-} \\\n        cuda-cufft-${CUDA/./-} \\\n        cuda-curand-${CUDA/./-} \\\n        cuda-cusolver-${CUDA/./-} \\\n        cuda-cusparse-${CUDA/./-} \\\n        curl \\\n        libcudnn7=${CUDNN}+cuda${CUDA} \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        software-properties-common \\\n        zip \\\n        unzip \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN [ ${ARCH} = ppc64le ] || ( apt-get update && \\\n        apt-get install -y --no-install-recommends nvinfer-runtime-trt-repo-ubuntu${UBUNTU_VERSION/./}-5.0.2-ga-cuda${CUDA} \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends libnvinfer5=5.0.2-1+cuda${CUDA} \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/*)\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\n\n# ========== Softlearning dependencies ==========\nRUN apt-get update -y \\\n    && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl \\\n        git \\\n        gnupg2 \\\n        make \\\n        cmake \\\n        ffmpeg \\\n        swig \\\n        libz-dev \\\n        unzip \\\n        zlib1g-dev \\\n        libglfw3 \\\n        libglfw3-dev \\\n        libxrandr2 \\\n        libxinerama-dev \\\n        libxi6 \\\n        libxcursor-dev \\\n        libgl1-mesa-dev \\\n        libgl1-mesa-glx \\\n        libglew-dev \\\n        libosmesa6-dev \\\n        lsb-release \\\n        ack-grep \\\n        patchelf \\\n        vim \\\n        emacs \\\n        wget \\\n        xpra \\\n        xserver-xorg-dev \\\n        xvfb \\\n    && export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" \\\n    && echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" \\\n            | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n    && curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg \\\n            | apt-key add - \\\n    && apt-get update -y \\\n    && apt-get install --no-install-recommends -y google-cloud-sdk \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# ========= MuJoCo ===============\nCOPY ./scripts/install_mujoco.py /tmp/\n\nRUN /tmp/install_mujoco.py --mujoco-path=/root/.mujoco --versions 1.50 2.00 \\\n    && ln -s /root/.mujoco/mujoco200_linux /root/.mujoco/mujoco200 \\\n    && rm /tmp/install_mujoco.py\n\nENV LD_LIBRARY_PATH /root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\nENV LD_LIBRARY_PATH /root/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}\nENV LD_LIBRARY_PATH /root/.mujoco/mujoco200_linux/bin:${LD_LIBRARY_PATH}\n\n# This is a hack required to make mujocopy to compile in gpu mode\nRUN mkdir -p /usr/lib/nvidia-000\nENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/usr/lib/nvidia-000\n\n\n# ========== Conda Environment ==========\nCOPY ./environment.yml /tmp/environment.yml\nCOPY ./requirements.txt /tmp/requirements.txt\n\n# NOTE: Fetch `mjkey.txt` from secret mount to avoid writing it to the build\n# history. For details, see:\n# https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information\nRUN --mount=type=secret,id=mjkey,dst=/root/.mujoco/mjkey.txt \\\n    conda env update -f /tmp/environment.yml \\\n    && conda clean --all -y\n\nRUN echo \"conda activate softlearning\" >> ~/.bashrc \\\n    && echo \"cd ~/softlearning\" >> ~/.bashrc\n\n\n# =========== Container Entrypoint =============\nCOPY ./docker/entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/entrypoint.sh\"]\n"
}