{
  "startTime": 1674255611695,
  "endTime": 1674255612410,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 12,
        "columnStart": 26,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14\n\n# Install prerequisites\n# https://docs.docker.com/engine/articles/dockerfile_best-practices/#apt-get\n# Base image should also have these already installed: gcc, git, make, python\n# - `build-essential` and `make` are required by some Node modules\n# - `unzip` & `wget` are required by API docs generator\nRUN apt-get -qq update && apt-get -q --no-install-recommends install -y \\\n    build-essential \\\n    graphicsmagick \\\n    openssl \\\n    unzip \\\n    wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Create working directory\nRUN mkdir -p /trustroots\nWORKDIR /trustroots\n\n# Copies the local package.json and package-lock.json files to the container\n# and utilities docker container cache to not needing to rebuild\n# and install node_modules/ every time we build the docker, but only\n# when the local package.json file changes.\n# Install npm packages\nCOPY package*.json ./\nRUN npm ci --quiet\n\n# Set environment variables\nENV NODE_ENV development\nENV DB_1_PORT_27017_TCP_ADDR mongodb\n\n# Share local directory on the docker container\n# ...therefore the previous docker \"layer\" thats been cached will be used if possible\nCOPY . /trustroots\n\n# Expose ports\n# - Maildev            1080\n# - Webpack-dev-server 3000\n# - Nodemon server     3001\n# - Node debug         5858\n# - MongoDB            27017\nEXPOSE 1080\nEXPOSE 3000\nEXPOSE 3001\nEXPOSE 5858\nEXPOSE 27017\nCMD [\"npm\", \"start\"]\n"
}