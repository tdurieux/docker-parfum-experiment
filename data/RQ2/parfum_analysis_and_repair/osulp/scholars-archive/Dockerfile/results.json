{
  "startTime": 1674220337567,
  "endTime": 1674220338725,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 2,
        "columnEnd": 76
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 19
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 2,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##########################################################################\n## Dockerfile for SA@OSU\n##########################################################################\nFROM ruby:2.6-alpine3.12 as bundler\n\n# Necessary for bundler to properly install some gems\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\n# Install bundler\nRUN gem install bundler\n\n##########################################################################\n## Install dependencies\n##########################################################################\nFROM bundler as dependencies\n\nRUN apk --no-cache update && apk --no-cache upgrade && \\\n  apk add --no-cache alpine-sdk nodejs imagemagick unzip ghostscript vim yarn \\\n  git sqlite sqlite-dev mysql mysql-client mysql-dev libressl libressl-dev \\\n  curl libc6-compat build-base tzdata zip autoconf automake libtool texinfo \\\n  bash bash-completion java-common openjdk11-jre-headless graphicsmagick \\\n  ffmpeg openjpeg-dev openjpeg-tools openjpeg lcms2 lcms2-dev py3-pip gcompat\n\n# Set the timezone to America/Los_Angeles (Pacific) then get rid of tzdata\nRUN cp -f /usr/share/zoneinfo/America/Los_Angeles /etc/localtime && \\\n  echo 'America/Los_Angeles' > /etc/timezone && \\\n  pip install --no-cache-dir s3cmd\n\n# install libffi 3.2.1\n# https://github.com/libffi/libffi/archive/refs/tags/v3.2.1.tar.gz\n# https://codeload.github.com/libffi/libffi/tar.gz/refs/tags/v3.2.1\n# apk add autoconf aclocal automake libtool\n# tar -xvzpf libffi-3.2.1.tar.gz\n# ./configure --prefix=/usr/local\nRUN mkdir -p /tmp/ffi && \\\n  curl -f -sL https://codeload.github.com/libffi/libffi/tar.gz/refs/tags/v3.2.1 \\\n  | tar -xz -C /tmp/ffi && cd /tmp/ffi/libffi-3.2.1 && ./autogen.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && make && make install && rm -rf /tmp/ffi\n\n# download and install FITS from Github\nRUN mkdir -p /opt/fits && \\\n  curl -fSL -o /opt/fits-1.5.0.zip https://github.com/harvard-lts/fits/releases/download/1.5.0/fits-1.5.0.zip && \\\n  cd /opt/fits && unzip /opt/fits-1.5.0.zip  && chmod +X fits.sh && \\\n  rm -f /opt/fits-1.5.0.zip\n\n##########################################################################\n## Add our Gemfile and install our gems\n##########################################################################\nFROM dependencies as gems\n\nRUN mkdir /data\nWORKDIR /data\n\nADD Gemfile /data/Gemfile\nADD Gemfile.lock /data/Gemfile.lock\nRUN mkdir /data/build\n\nARG RAILS_ENV=${RAILS_ENV}\nENV RAILS_ENV=${RAILS_ENV}\n\nADD ./build/install_gems.sh /data/build\nRUN ./build/install_gems.sh && bundle clean --force\n\n##########################################################################\n## Add code to the container, clean up any garbage\n##########################################################################\nFROM gems as code\n\nADD . /data\n\n# Clean up stuff not needed to run in the cluster\nRUN rm -rf /data/.env /data/docker-compose.* /data/Dockerfile \\\n  /data/solr/conf* /data/coverage /data/config/local_env.* /data/config/mysql \\\n  /data/config/solr_wrapper_test.yml /data/config/fcrepo_wrapper_test.yml \\\n  /data/config/blazegraph /data/config/puma/development.rb \\\n  /data/config/nginx_rewrites.conf /data/build/build.sh /data/tmp \\\n  /data/public /data/.solr_wrapper /data/.solr_wrapper.yml \\\n  /data/.fcrepo_wrapper /data/.version /data/.github && \\\n  mkdir -p /data/tmp /data/public\n\n#USER root\n# Uninstall any dev tools we don't need at runtime\nRUN apk --no-cache update && apk del autoconf automake gcc g++ --purge\n\n## Precompile assets\nFROM code\n\nRUN if [ \"${RAILS_ENV}\" == \"production\" -o \"$RAILS_ENV\" == \"staging\" ]; then \\\n  echo \"Precompiling assets with $RAILS_ENV environment\"; \\\n  RAILS_ENV=$RAILS_ENV SECRET_KEY_BASE=temporary bundle exec rails assets:precompile; \\\n  cp public/assets/404-*.html public/404.html; \\\n  cp public/assets/500-*.html public/500.html; \\\n  fi\n"
}