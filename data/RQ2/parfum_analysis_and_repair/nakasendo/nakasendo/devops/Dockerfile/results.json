{
  "startTime": 1674246103504,
  "endTime": 1674246105119,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 58,
        "columnEnd": 85
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 64,
        "columnEnd": 75
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 56,
        "columnEnd": 124
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 6,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 6,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 6,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:19.10\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y git \\\n    gcc \\\n    g++ \\\n    make \\\n    wget \\\n    cmake \\\n    build-essential \\\n    maven \\\n    ca-certificates \\\n    gosu \\\n    dirmngr \\\n    libboost-all-dev \\\n    libtool \\\n    libssl-dev \\\n    libzmq3-dev \\\n    python3 \\\n    python3-pip \\\n    coreutils \\\n    doxygen \\\n    libgmp3-dev \\\n    libkeyutils1 \\\n    vim \\\n    rpm \\\n    npm \\\n    software-properties-common && rm -rf /var/lib/apt/lists/*;\n\nRUN npm install -g mocha mocha-junit-reporter binaryen && pip3 install --no-cache-dir pytest certifi && apt-get purge -y --auto-remove openssl \\\n   && apt-get install --no-install-recommends -y ca-certificates && update-ca-certificates --fresh && export SSL_CERT_DIR=/etc/ssl/certs && apt-get clean && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n#update the memory settings according to the SDK source\nRUN sed -i.bak '/# End of file/i root\\t\\thard\\tmemlock\\t\\tunlimited\\nroot\\t\\tsoft\\tmemlock\\t\\tunlimited' /etc/security/limits.conf \\\n    && sed -i.bak '$a kernel.keys.maxkeys = 25000\\nkernal.keys.maxbytes = 2500000' /etc/sysctl.conf\n\n# install key utils\nWORKDIR /home\nRUN wget -O keyutils-1.5.10.tar.bz2 https://people.redhat.com/~dhowells/keyutils/keyutils-1.5.10.tar.bz2 \\\n    && tar xvf keyutils-1.5.10.tar.bz2 && cd keyutils-1.5.10 && make && make install \\\n    && cp /x86_64-linux-gnu/* /usr/lib/x86_64-linux-gnu && rm keyutils-1.5.10.tar.bz2\n\nWORKDIR /\nSHELL [\"/bin/bash\", \"-c\"]\n# Get the emsdk repo\nRUN  git clone https://github.com/emscripten-core/emsdk.git\n\nWORKDIR /emsdk\nRUN ./emsdk list && ./emsdk install 1.38.42 && ./emsdk activate 1.38.42 && chmod a+x ./emsdk_env.sh\n\nWORKDIR /\nRUN OPENSSL_VERSION=\"1.1.1d\" ; . /emsdk/emsdk_env.sh ; \\\n    wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz ; \\\n    mkdir -p openssl ; \\\n    tar xvf \"openssl-${OPENSSL_VERSION}.tar.gz\" --strip-components=1 --directory=openssl && rm \"openssl-${OPENSSL_VERSION}.tar.gz\"\n\nWORKDIR /openssl\nRUN export CC=emcc ; export CXX=emcc ; export LINK=${CXX} ;export ARCH_FLAGS=\"\" ; export ARCH_LINK=\"\" ; \\\n    export CXX=${CC} ; export LINK=${CXX} ; export ARCH_FLAGS=\"\" ; export ARCH_LINK=\"\" ; \\\n    export CPPFLAGS=\" ${ARCH_FLAGS} \" ; export CXXFLAGS=\" ${ARCH_FLAGS} \" ; \\\n    export CFLAGS=\" -D__STDC_NO_ATOMICS__=1 -DUSE_PTHREADS=0\" ; export LIBS=-ldl ;\\\n    . /emsdk/emsdk_env.sh ; \\\n    ./Configure linux-generic64 no-shared no-ssl2 no-ssl3 no-comp \\\n    no-engine no-dso no-dgram no-sock no-threads no-ocsp no-psk no-ts no-asm  --prefix=/openssl --openssldir=/openssl && \\\n    PATH=$TOOLCHAIN_PATH:$PATH __STDC_NO_ATOMICS__=1 USE_PTHREADS=0 make depend && __STDC_NO_ATOMICS__=1 USE_PTHREADS=0 \\\n    make  &&  unset CC ; unset CXX ; unset LINK ; unset ARCH_FLAGS ; unset ARCH_LINK ; \\\n    unset CXX ; unset LINK ; unset ARCH_FLAGS ; unset ARCH_LINK ; unset CPPFLAGS ; unset CXXFLAGS ; \\\n    unset CFLAGS ; unset LDFLAGS && mkdir /openssl/lib && cp /openssl/libssl.a /openssl/lib/ && cp /openssl/libcrypto.a /openssl/lib/\n\nWORKDIR /\n\nRUN mkdir -p /opt/openssl && OPENSSL_VERSION=\"1.1.1d\" ; tar xvf \"openssl-${OPENSSL_VERSION}.tar.gz\" --directory=/opt/openssl && rm \"openssl-${OPENSSL_VERSION}.tar.gz\"\nWORKDIR /opt/openssl/openssl-1.1.1d\nRUN  export LIBS=-ldl && ./config no-shared --prefix=/opt/openssl --openssldir=/opt/openssl \\\n     && make && make install\n\nWORKDIR /\n\nRUN  git clone https://github.com/protocolbuffers/protobuf.git\nWORKDIR protobuf\nRUN git submodule update --init --recursive && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && ldconfig\n\nWORKDIR /\n\nCOPY ./devops/entrypoint.py .\nCOPY ./devops/releasenotes.py .\nRUN chmod +x /entrypoint.py && chmod +x /releasenotes.py && useradd -G users Jenkins\nUSER Jenkins\n\n"
}