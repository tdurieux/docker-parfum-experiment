diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nakasendo/nakasendo/devops/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nakasendo/nakasendo/devops/Dockerfile/repaired.Dockerfile
index e7291a1..8f5d758 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/nakasendo/nakasendo/devops/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/nakasendo/nakasendo/devops/Dockerfile/repaired.Dockerfile
@@ -1,13 +1,13 @@
 FROM ubuntu:19.10
 
 RUN apt-get update \
-    && apt-get install -y git \
+    && apt-get install --no-install-recommends -y git \
     gcc \
-    g++  \
+    g++ \
     make \
     wget \
     cmake \
-    build-essential\
+    build-essential \
     maven \
     ca-certificates \
     gosu \
@@ -25,10 +25,10 @@ RUN apt-get update \
     vim \
     rpm \
     npm \
-    software-properties-common
-    
-RUN npm install -g mocha mocha-junit-reporter binaryen && pip3 install pytest certifi && apt-get purge -y --auto-remove openssl \
-   && apt-get install -y ca-certificates && update-ca-certificates --fresh && export SSL_CERT_DIR=/etc/ssl/certs && apt-get clean
+    software-properties-common && rm -rf /var/lib/apt/lists/*;
+
+RUN npm install -g mocha mocha-junit-reporter binaryen && pip3 install --no-cache-dir pytest certifi && apt-get purge -y --auto-remove openssl \
+   && apt-get install --no-install-recommends -y ca-certificates && update-ca-certificates --fresh && export SSL_CERT_DIR=/etc/ssl/certs && apt-get clean && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;
 
 #update the memory settings according to the SDK source
 RUN sed -i.bak '/# End of file/i root\t\thard\tmemlock\t\tunlimited\nroot\t\tsoft\tmemlock\t\tunlimited' /etc/security/limits.conf \
@@ -36,9 +36,9 @@ RUN sed -i.bak '/# End of file/i root\t\thard\tmemlock\t\tunlimited\nroot\t\tsof
 
 # install key utils
 WORKDIR /home
-RUN wget -O keyutils-1.5.10.tar.bz2  http://people.redhat.com/~dhowells/keyutils/keyutils-1.5.10.tar.bz2 \
+RUN wget -O keyutils-1.5.10.tar.bz2 https://people.redhat.com/~dhowells/keyutils/keyutils-1.5.10.tar.bz2 \
     && tar xvf keyutils-1.5.10.tar.bz2 && cd keyutils-1.5.10 && make && make install \
-    && cp /x86_64-linux-gnu/* /usr/lib/x86_64-linux-gnu
+    && cp /x86_64-linux-gnu/* /usr/lib/x86_64-linux-gnu && rm keyutils-1.5.10.tar.bz2
 
 WORKDIR /
 SHELL ["/bin/bash", "-c"]
@@ -49,11 +49,11 @@ WORKDIR /emsdk
 RUN ./emsdk list && ./emsdk install 1.38.42 && ./emsdk activate 1.38.42 && chmod a+x ./emsdk_env.sh
 
 WORKDIR /
-RUN OPENSSL_VERSION="1.1.1d" ;  . /emsdk/emsdk_env.sh ; \
-    wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz ;  \
+RUN OPENSSL_VERSION="1.1.1d" ; . /emsdk/emsdk_env.sh ; \
+    wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz ; \
     mkdir -p openssl ; \
-    tar xvf "openssl-${OPENSSL_VERSION}.tar.gz" --strip-components=1 --directory=openssl
-    
+    tar xvf "openssl-${OPENSSL_VERSION}.tar.gz" --strip-components=1 --directory=openssl && rm "openssl-${OPENSSL_VERSION}.tar.gz"
+
 WORKDIR /openssl
 RUN export CC=emcc ; export CXX=emcc ; export LINK=${CXX} ;export ARCH_FLAGS="" ; export ARCH_LINK="" ; \
     export CXX=${CC} ; export LINK=${CXX} ; export ARCH_FLAGS="" ; export ARCH_LINK="" ; \
@@ -68,17 +68,17 @@ RUN export CC=emcc ; export CXX=emcc ; export LINK=${CXX} ;export ARCH_FLAGS=""
     unset CFLAGS ; unset LDFLAGS && mkdir /openssl/lib && cp /openssl/libssl.a /openssl/lib/ && cp /openssl/libcrypto.a /openssl/lib/
 
 WORKDIR /
-   
-RUN mkdir -p /opt/openssl && OPENSSL_VERSION="1.1.1d" ; tar xvf "openssl-${OPENSSL_VERSION}.tar.gz" --directory=/opt/openssl
+
+RUN mkdir -p /opt/openssl && OPENSSL_VERSION="1.1.1d" ; tar xvf "openssl-${OPENSSL_VERSION}.tar.gz" --directory=/opt/openssl && rm "openssl-${OPENSSL_VERSION}.tar.gz"
 WORKDIR /opt/openssl/openssl-1.1.1d
 RUN  export LIBS=-ldl && ./config no-shared --prefix=/opt/openssl --openssldir=/opt/openssl \
      && make && make install
 
 WORKDIR /
 
-RUN  git clone https://github.com/protocolbuffers/protobuf.git 
+RUN  git clone https://github.com/protocolbuffers/protobuf.git
 WORKDIR protobuf
-RUN  git submodule update --init --recursive && ./autogen.sh && ./configure && make && make install && ldconfig 
+RUN git submodule update --init --recursive && ./autogen.sh && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && make && make install && ldconfig
 
 WORKDIR /