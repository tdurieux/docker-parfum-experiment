{
  "startTime": 1674221099102,
  "endTime": 1674221099878,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubi8/ubi-minimal:latest\n\nEXPOSE 8080\n\nENV PYTHON_VERSION=3.9 \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONIOENCODING=UTF-8 \\\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    CNB_STACK_ID=com.redhat.stacks.ubi8-python-39 \\\n    CNB_USER_ID=1001 \\\n    CNB_GROUP_ID=0 \\\n    PIP_NO_CACHE_DIR=off \\\n    # The following variables are usually available from parent s2i images \\\n    STI_SCRIPTS_PATH=/usr/libexec/s2i \\\n    APP_ROOT=/opt/app-root \\\n    HOME=/opt/app-root/src \\\n    PLATFORM=\"el8\"\n\n# /opt/app-root/bin - the main venv\n# /opt/app-root/src/bin - app-specific binaries\n# /opt/app-root/src/.local/bin - tools like pipenv\nENV PATH=$APP_ROOT/bin:$HOME/bin:$HOME/.local/bin:$PATH\n\n# RHEL7 base images automatically set these envvars to run scl_enable. RHEl8\n# images, however, don't as most images don't need SCLs any more. But we want\n# to run it even on RHEL8, because we set the virtualenv environment as part of\n# that script\nENV BASH_ENV=${APP_ROOT}/etc/scl_enable \\\n    ENV=${APP_ROOT}/etc/scl_enable \\\n    PROMPT_COMMAND=\". ${APP_ROOT}/etc/scl_enable\"\n\nENV SUMMARY=\"Minimal platform for building and running Python $PYTHON_VERSION applications\" \\\n    DESCRIPTION=\"Python $PYTHON_VERSION available as container is a base platform for \\\nbuilding and running various Python $PYTHON_VERSION applications and frameworks. \\\nPython is an easy to learn, powerful programming language. It has efficient high-level \\\ndata structures and a simple but effective approach to object-oriented programming. \\\nPython's elegant syntax and dynamic typing, together with its interpreted nature, \\\nmake it an ideal language for scripting and rapid application development in many areas \\\non most platforms.\"\n\nLABEL summary=\"$SUMMARY\" \\\n      description=\"$DESCRIPTION\" \\\n      io.k8s.description=\"$DESCRIPTION\" \\\n      io.k8s.display-name=\"Python 3.9\" \\\n      io.openshift.expose-services=\"8080:http\" \\\n      io.openshift.tags=\"builder,python,python39,python-39,rh-python39\" \\\n      com.redhat.component=\"python-39-container\" \\\n      name=\"ubi8/python-39-minimal\" \\\n      version=\"1\" \\\n      usage=\"s2i build https://github.com/sclorg/s2i-python-container.git --context-dir=3.9/test/setup-test-app/ ubi8/python-39-minimal python-sample-app\" \\\n      com.redhat.license_terms=\"https://www.redhat.com/en/about/red-hat-end-user-license-agreements#UBI\" \\\n      io.buildpacks.stack.id=\"com.redhat.stacks.ubi8-python-39-minimal\" \\\n      maintainer=\"SoftwareCollections.org <sclorg@redhat.com>\"\n\n# Very minimal set of packages\n# Python is obvious in the Python container :)\n# glibc-langpack-en is needed to set locale to en_US and disable warning about it\n# findutils - find command is needed for fix-permissions script\n# nss_wrapper - used in generate_container_user script\nRUN INSTALL_PKGS=\"python39 glibc-langpack-en findutils nss_wrapper\" && \\\n    microdnf -y --setopt=tsflags=nodocs --setopt=install_weak_deps=0 install $INSTALL_PKGS && \\\n    rpm -V $INSTALL_PKGS && \\\n    microdnf -y clean all --enablerepo='*'\n\n# Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH.\nCOPY 3.9-minimal/s2i/bin/ $STI_SCRIPTS_PATH\n\n# Copy extra files to the image.\nCOPY 3.9-minimal/root/ /\n\n# Python 3 only\n# Yes, the directory below is already copied by the previous command.\n# The problem here is that the wheels directory is copied as a symlink.\n# Only if you specify symlink directly as a source, COPY copies all the\n# files from the symlink destination.\nCOPY 3.9/root/opt/wheels /opt/wheels\n\n# This command sets (and also creates if necessary)\n# the home directory - it has to be done here so the latter\n# fix-permissions fixes this directory as well.\nWORKDIR ${HOME}\n\n# - Create a Python virtual environment for use by any application to avoid\n#   potential conflicts with Python packages preinstalled in the main Python\n#   installation.\n# - In order to drop the root user, we have to make some directories world\n#   writable as OpenShift default security model is to run the container\n#   under random UID.\nRUN \\\n    python3.9 -m venv ${APP_ROOT} && \\\n    # Python 3 only code, Python 2 installs pip from PyPI in the assemble script. \\\n    # We have to upgrade pip to a newer verison because: \\\n    # * pip < 9 does not support different packages' versions for Python 2/3 \\\n    # * pip < 19.3 does not support manylinux2014 wheels. Only manylinux2014 (and later) wheels \\\n    #   support platforms like ppc64le, aarch64 or armv7 \\\n    # We are newly using wheel from one of the latest stable Fedora releases (from RPM python-pip-wheel) \\\n    # because it's tested better then whatever version from PyPI and contains useful patches. \\\n    # We have to do it here (in the macro) so the permissions are correctly fixed and pip is able \\\n    # to reinstall itself in the next build phases in the assemble script if user wants the latest version \\\n    ${APP_ROOT}/bin/pip install --no-cache-dir /opt/wheels/pip-* && \\\n    rm -r /opt/wheels && \\\n    chown -R 1001:0 ${APP_ROOT} && \\\n    fix-permissions ${APP_ROOT} -P && \\\n    rpm-file-permissions\n\nUSER 1001\n\n# Set the default CMD to print the usage of the language image.\nCMD $STI_SCRIPTS_PATH/usage\n"
}