diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/stellar/stellar-core/.devcontainer/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/stellar/stellar-core/.devcontainer/Dockerfile/repaired.Dockerfile
index 0c0346e..b67c001 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/stellar/stellar-core/.devcontainer/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/stellar/stellar-core/.devcontainer/Dockerfile/repaired.Dockerfile
@@ -17,7 +17,7 @@ ARG USER_GID=$USER_UID
 
 # setup apt / certificates
 RUN apt-get update \
-    && apt-get -y install --no-install-recommends apt-utils dialog ca-certificates 2>&1
+    && apt-get -y install --no-install-recommends apt-utils dialog ca-certificates 2>&1 && rm -rf /var/lib/apt/lists/*;
 
 # use apt mirror instead of default archives if specified
 # to use, specify the build arg or as an env var on the host machine
@@ -37,16 +37,16 @@ RUN if [ ! -z "${APT_MIRROR}" ]; then \
 
 # install base container packages and prep for VSCode
 RUN apt-get update \
-    # Verify process tools, lsb-release (common in install instructions for CLIs) installed
-    && apt-get -y install iproute2 procps lsb-release \
+    # Verify process tools, lsb-release (common in install instructions for CLIs) installed \
+    && apt-get -y --no-install-recommends install iproute2 procps lsb-release \
     #
     # Create a non-root user to use if preferred - see https://aka.ms/vscode-remote/containers/non-root-user.
     && groupadd --gid $USER_GID $USERNAME \
     && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
     # [Optional] Add sudo support for the non-root user
-    && apt-get install -y sudo \
-    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\
-    && chmod 0440 /etc/sudoers.d/$USERNAME
+    && apt-get install --no-install-recommends -y sudo \
+    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
+    && chmod 0440 /etc/sudoers.d/$USERNAME && rm -rf /var/lib/apt/lists/*;
 
 # Add test tool chain
 # NOTE: newer version of the compilers are not
@@ -57,24 +57,24 @@ RUN apt-get update \
 #    && apt-get update
 
 # Install common compilation tools
-RUN apt-get -y install git build-essential pkg-config autoconf automake libtool bison flex libpq-dev parallel libunwind-dev
+RUN apt-get -y --no-install-recommends install git build-essential pkg-config autoconf automake libtool bison flex libpq-dev parallel libunwind-dev && rm -rf /var/lib/apt/lists/*;
 
 # Update compiler tools
-RUN apt-get -y install libstdc++-8-dev clang-format-10 ccache
+RUN apt-get -y --no-install-recommends install libstdc++-8-dev clang-format-10 ccache && rm -rf /var/lib/apt/lists/*;
 
 # gcc
-RUN apt-get -y install cpp-8 gcc-8 g++-8
+RUN apt-get -y --no-install-recommends install cpp-8 gcc-8 g++-8 && rm -rf /var/lib/apt/lists/*;
 # clang
-RUN apt-get -y install clang-10 llvm-10
+RUN apt-get -y --no-install-recommends install clang-10 llvm-10 && rm -rf /var/lib/apt/lists/*;
 # rust
-RUN apt-get -y install cargo rustc
+RUN apt-get -y --no-install-recommends install cargo rustc && rm -rf /var/lib/apt/lists/*;
 
 # clang by default
 ENV CC=clang-10
 ENV CXX=clang++-10
 
 # Install postgresql to enable tests under make check
-RUN apt-get -y install postgresql
+RUN apt-get -y --no-install-recommends install postgresql && rm -rf /var/lib/apt/lists/*;
 
 # Set up locale
 RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \