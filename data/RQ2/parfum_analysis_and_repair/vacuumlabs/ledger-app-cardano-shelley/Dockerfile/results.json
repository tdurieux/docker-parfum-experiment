{
  "startTime": 1674249494100,
  "endTime": 1674249494827,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\nENV LANGUAGE en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\n\n\nARG DEBIAN_FRONTEND=noninteractive\n\nARG LLVM_VERSION=12\n\nRUN apt-get update && apt-get upgrade -qy && \\\n    apt-get install --no-install-recommends -qy \\\n        astyle \\\n        clang-$LLVM_VERSION \\\n        clang-tools-$LLVM_VERSION \\\n        clang-format-$LLVM_VERSION \\\n        cmake \\\n        curl \\\n        doxygen \\\n        gdb \\\n        git \\\n        lcov \\\n        libbsd-dev \\\n        libcmocka0 \\\n        libcmocka-dev \\\n        lld-$LLVM_VERSION \\\n        locales \\\n        make \\\n        protobuf-compiler \\\n        python-is-python3 \\\n        python3 \\\n        python3-pip && \\\n    apt-get autoclean -y && \\\n    apt-get autoremove -y && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Set locale\nRUN echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen\nRUN locale-gen && update-locale LANG=en_US.UTF-8\n\n# Create generic clang & lld symbolic links to their installed version\nRUN cd /usr/bin && \\\n    find . -name \"*-\"$LLVM_VERSION | sed \"s/^\\(.*\\)\\(-\"$LLVM_VERSION\"\\)$/ln -s \\1\\2 \\1/\" | sh\n\n# ARM Embedded Toolchain\n# Integrity is checked using the MD5 checksum provided by ARM at https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads\nRUN curl -sSfL -o arm-toolchain.tar.bz2 \"https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2\" && \\\n    echo 2383e4eb4ea23f248d33adc70dc3227e arm-toolchain.tar.bz2 > /tmp/arm-toolchain.md5 && \\\n    md5sum --check /tmp/arm-toolchain.md5 && rm /tmp/arm-toolchain.md5 && \\\n    tar xf arm-toolchain.tar.bz2 -C /opt && \\\n    rm arm-toolchain.tar.bz2\n\n# Adding GCC to PATH and defining rustup/cargo home directories\nENV PATH=/opt/gcc-arm-none-eabi-10.3-2021.10/bin:$PATH \\\n    RUSTUP_HOME=/opt/rustup \\\n    CARGO_HOME=/opt/.cargo\n\n# Install rustup to manage rust toolchains\nRUN curl https://sh.rustup.rs -sSf | \\\n    sh -s -- --default-toolchain stable -y\n\n# Adding cargo binaries to PATH\nENV PATH=${CARGO_HOME}/bin:${PATH}\n\n# Adding ARMV6M target to the default toolchain\nRUN rustup target add thumbv6m-none-eabi\n\n# Python packages commonly used by apps\nRUN pip3 install --no-cache-dir ledgerblue pytest\n\n# Latest Nano S SDK\nENV NANOS_SDK=/opt/nanos-secure-sdk\nRUN git clone --branch 2.1.0 --depth 1 https://github.com/LedgerHQ/nanos-secure-sdk.git \"${NANOS_SDK}\"\n\n# Latest Nano X SDK\nENV NANOX_SDK=/opt/nanox-secure-sdk\nRUN git clone --branch 2.0.2-2 --depth 1 https://github.com/LedgerHQ/nanox-secure-sdk.git \"${NANOX_SDK}\"\n\n# Latest Nano S+ SDK\nENV NANOSP_SDK=/opt/nanosplus-secure-sdk\nRUN git clone --branch 1.0.2 --depth 1 https://github.com/LedgerHQ/nanosplus-secure-sdk.git \"${NANOSP_SDK}\"\n\n# Default SDK\nENV BOLOS_SDK=${NANOS_SDK}\n\nWORKDIR /app\n\nCMD [\"/usr/bin/env\", \"bash\"]"
}