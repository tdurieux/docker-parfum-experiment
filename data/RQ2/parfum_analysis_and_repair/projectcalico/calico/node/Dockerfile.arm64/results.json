{
  "startTime": 1674246075344,
  "endTime": 1674246076825,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2015-2022 Tigera, Inc. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nARG ARCH=aarch64\nARG GIT_VERSION=unknown\nARG IPTABLES_VER=1.8.4-17\nARG LIBNFTNL_VER=1.1.5-4\nARG IPSET_VER=7.11-6\nARG RUNIT_VER=2.1.2\nARG QEMU_IMAGE\nARG BIRD_IMAGE=calico/bird:latest\nARG UBI_IMAGE\n\nFROM calico/bpftool:v5.0-arm64 as bpftool\nFROM ${QEMU_IMAGE} as qemu\nFROM ${BIRD_IMAGE} as bird\n\nFROM quay.io/centos/centos:stream8 as centos\n\nMAINTAINER Reza Ramezanpour <reza@projectcalico.org>\n# Enable non-native builds of this image on an amd64 hosts.\n# This must be the first RUN command in this file!\nCOPY --from=qemu /usr/bin/qemu-*-static /usr/bin/\n\nARG ARCH\nARG IPTABLES_VER\nARG LIBNFTNL_VER\nARG IPSET_VER\nARG RUNIT_VER\nARG CENTOS_MIRROR_BASE_URL=http://linuxsoft.cern.ch/centos-vault/8.4.2105\nARG LIBNFTNL_SOURCERPM_URL=${CENTOS_MIRROR_BASE_URL}/BaseOS/Source/SPackages/libnftnl-${LIBNFTNL_VER}.el8.src.rpm\nARG IPTABLES_SOURCERPM_URL=${CENTOS_MIRROR_BASE_URL}/BaseOS/Source/SPackages/iptables-${IPTABLES_VER}.el8.src.rpm\nARG STREAM9_MIRROR_BASE_URL=https://iad.mirror.rackspace.com/centos-stream/9-stream\nARG IPSET_SOURCERPM_URL=${STREAM9_MIRROR_BASE_URL}/BaseOS/source/tree/Packages/ipset-${IPSET_VER}.el9.src.rpm\n\n# Install build dependencies and security updates.\nRUN dnf install -y 'dnf-command(config-manager)' && \\\n    # Enable PowerTools repo for '-devel' packages\n    dnf config-manager --set-enabled powertools && \\\n    # Install required packages for building rpms. yum-utils is not required but it gives us yum-builddep to easily install build deps.\n    yum install --allowerasing -y rpm-build yum-utils make && \\\n    # Need these to build runit.\n    yum install --allowerasing -y wget glibc-static gcc && \\\n    # Ensure security updates are installed.\n    yum -y update-minimal --security --sec-severity=Important --sec-severity=Critical && rm -rf /var/cache/yum\n\n# In order to rebuild the iptables RPM, we first need to rebuild the libnftnl RPM because building\n# iptables requires libnftnl-devel but libnftnl-devel is not available on ubi or CentOS repos.\n# (Note: it's not in RHEL8.1 either https://bugzilla.redhat.com/show_bug.cgi?id=1711361).\n# Rebuilding libnftnl will give us libnftnl-devel too.\nRUN rpm -i ${LIBNFTNL_SOURCERPM_URL} && \\\n    yum-builddep -y --spec /root/rpmbuild/SPECS/libnftnl.spec && \\\n    rpmbuild -bb /root/rpmbuild/SPECS/libnftnl.spec && \\\n    # Now install libnftnl and libnftnl-devel\n    rpm -Uv /root/rpmbuild/RPMS/${ARCH}/libnftnl-${LIBNFTNL_VER}.el8.${ARCH}.rpm && \\\n    rpm -Uv /root/rpmbuild/RPMS/${ARCH}/libnftnl-devel-${LIBNFTNL_VER}.el8.${ARCH}.rpm && \\\n    # Install source RPM for iptables and install its build dependencies.\n    rpm -i ${IPTABLES_SOURCERPM_URL} && \\\n    yum-builddep -y --spec /root/rpmbuild/SPECS/iptables.spec\n\n# Patch the iptables build spec so that we keep the legacy iptables binaries.\nRUN sed -i '/drop all legacy tools/,/sbindir.*legacy/d' /root/rpmbuild/SPECS/iptables.spec\n\n# Patch the iptables build spec to drop the renaming of nft binaries. Instead of renaming binaries,\n# we will use alternatives to set the canonical iptables binaries.\nRUN sed -i '/rename nft versions to standard name/,/^done/d' /root/rpmbuild/SPECS/iptables.spec\n\n# Patch the iptables build spec so that legacy and nft iptables binaries are verified to be in the resulting rpm.\nRUN sed -i '/%files$/a \\\n\\%\\{_sbindir\\}\\/xtables-legacy-multi \\n\\\n\\%\\{_sbindir\\}\\/ip6tables-legacy \\n\\\n\\%\\{_sbindir\\}\\/ip6tables-legacy-restore \\n\\\n\\%\\{_sbindir\\}\\/ip6tables-legacy-save \\n\\\n\\%\\{_sbindir\\}\\/iptables-legacy \\n\\\n\\%\\{_sbindir\\}\\/iptables-legacy-restore \\n\\\n\\%\\{_sbindir\\}\\/iptables-legacy-save \\n\\\n\\%\\{_sbindir\\}\\/ip6tables-nft\\n\\\n\\%\\{_sbindir\\}\\/ip6tables-nft-restore\\n\\\n\\%\\{_sbindir\\}\\/ip6tables-nft-save\\n\\\n\\%\\{_sbindir\\}\\/iptables-nft\\n\\\n\\%\\{_sbindir\\}\\/iptables-nft-restore\\n\\\n\\%\\{_sbindir\\}\\/iptables-nft-save\\n\\\n' /root/rpmbuild/SPECS/iptables.spec\n\n# Finally rebuild iptables.\nRUN rpmbuild -bb /root/rpmbuild/SPECS/iptables.spec\n\n# Install source RPM for ipset and install its build dependencies.\nRUN rpm -i ${IPSET_SOURCERPM_URL} && \\\n    yum-builddep -y --spec /root/rpmbuild/SPECS/ipset.spec && \\\n    rpmbuild -bb /root/rpmbuild/SPECS/ipset.spec\n\n# runit is not available in ubi or CentOS repos so build it.\nRUN wget -P /tmp https://smarden.org/runit/runit-${RUNIT_VER}.tar.gz && \\\n    gunzip /tmp/runit-${RUNIT_VER}.tar.gz && \\\n    tar -xpf /tmp/runit-${RUNIT_VER}.tar -C /tmp && \\\n    cd /tmp/admin/runit-${RUNIT_VER}/ && \\\n    # runit compilation trigger a false positive error halting the process.\n    sed -i \"s/runit-init/\\/tmp\\/admin\\/runit-2.1.2\\/compile\\/runit-init/\" src/runit-init.dist && \\\n    sed -i \"s/runsv/\\/tmp\\/admin\\/runit-2.1.2\\/compile\\/runsv/\" src/runsv.dist && \\\n    sed -i \"s/runsvchdir/\\/tmp\\/admin\\/runit-2.1.2\\/compile\\/runsvchdir/\" src/runsvchdir.dist && \\\n    sed -i \"s/runsvdir/\\/tmp\\/admin\\/runit-2.1.2\\/compile\\/runsvdir/\" src/runsvdir.dist && \\\n    sed -i \"s/svlogd/\\/tmp\\/admin\\/runit-2.1.2\\/compile\\/svlogd/\" src/svlogd.dist && \\\n    sed -i \"s/utmpset/\\/tmp\\/admin\\/runit-2.1.2\\/compile\\/utmpset/\" src/utmpset.dist && \\\n    package/install && rm /tmp/runit-${RUNIT_VER}.tar\n\nARG UBI_DIGEST\n\nFROM --platform=linux/arm64 ${UBI_IMAGE} as ubi\n\nARG ARCH\nARG GIT_VERSION\nARG IPTABLES_VER\nARG LIBNFTNL_VER\nARG IPSET_VER\nARG RUNIT_VER\n\n# Enable non-native builds of this image on an amd64 hosts.\n# This must be the first RUN command in this file!\nCOPY --from=qemu /usr/bin/qemu-*-static /usr/bin/\n\n# Update base packages to pick up security updates.  Must do this before adding the centos repo.\nRUN microdnf update\n\n# Copy in runit binaries\nCOPY --from=centos  /tmp/admin/runit-${RUNIT_VER}/command/* /usr/local/bin/\n\n# Copy in our rpms\nCOPY --from=centos  /root/rpmbuild/RPMS/${ARCH}/* /tmp/rpms/\n\n# Install the necessary packages, making sure that we're using only CentOS repos.\n# Since the ubi repos do not contain all the packages we need (they're missing conntrack-tools),\n# we're using CentOS repos for all our packages. Using packages from a single source (CentOS) makes\n# it less likely we'll run into package dependency version mismatches.\n#\n# NOTE: new packages need to be added to the keep-list in clean-up-filesystem.sh.\nCOPY centos.repo /etc/yum.repos.d/\n\nRUN sed -i 's/x86_64/aarch64/' /etc/yum.repos.d/centos.repo\n\nRUN rm /etc/yum.repos.d/ubi.repo && \\\n    touch /in-the-container && \\\n    microdnf install \\\n    # Don't install copious docs.\n    --setopt=tsflags=nodocs \\\n    # Needed for iptables\n    libpcap libmnl libnfnetlink libnetfilter_conntrack \\\n    iputils \\\n    # Need arp\n    net-tools \\\n    # Need kmod to ensure ip6tables-save works correctly\n    kmod \\\n    # Also needed (provides utilities for browsing procfs like ps)\n    procps-ng \\\n    iproute \\\n    iproute-tc \\\n    # Needed for conntrack\n    libnetfilter_cthelper libnetfilter_cttimeout libnetfilter_queue \\\n    conntrack-tools \\\n    # Needed for runit startup script\n    which \\\n    # Needed for the cleanup script\n    findutils && \\\n    microdnf clean all && \\\n    # Install iptables via rpms. The libs must be force installed because the iptables source RPM has the release\n    # version '9.el8_0.1' while the existing iptables-libs (pulled in by the iputils package) has version '9.el8.1'.\n    rpm --force -i /tmp/rpms/iptables-libs-${IPTABLES_VER}.el8.${ARCH}.rpm && \\\n    # Install compatible libnftnl version with selected iptables version\n    rpm --force -i /tmp/rpms/libnftnl-${LIBNFTNL_VER}.el8.${ARCH}.rpm && \\\n    rpm -i /tmp/rpms/iptables-${IPTABLES_VER}.el8.${ARCH}.rpm && \\\n    # Install ipset version\n    rpm --force -i /tmp/rpms/ipset-libs-${IPSET_VER}.el8.${ARCH}.rpm && \\\n    rpm -i /tmp/rpms/ipset-${IPSET_VER}.el8.${ARCH}.rpm && \\\n    # Set alternatives\n    alternatives --install /usr/sbin/iptables iptables /usr/sbin/iptables-legacy 1 && \\\n    alternatives --install /usr/sbin/ip6tables ip6tables /usr/sbin/ip6tables-legacy 1\n\n# Add mitigation for https://access.redhat.com/security/cve/CVE-2019-15718\n# This can be removed once we update to ubi:8.1\nRUN systemctl disable systemd-resolved\n\n# Copy our bird binaries in\nCOPY --from=bird /bird* /bin/\n\n# Copy in the filesystem - this contains licenses, etc...\nCOPY filesystem/etc/ /etc\nCOPY filesystem/included-source/ /included-source\nCOPY filesystem/licenses/ /licenses\nCOPY filesystem/usr/ /usr\nCOPY filesystem/sbin/* /usr/sbin/\n\nCOPY --from=bpftool /bpftool /bin\n\n# Copy in the calico-node binary\nCOPY dist/bin/calico-node-arm64 /bin/calico-node\n\n# Copy in the moutnns binary\nCOPY dist/bin/mountns-arm64 /bin/mountns\n\n# Set the suid bit on mountns\nRUN chmod u+s /bin/mountns\n\n# Clean out as many files as we can from the filesystem.  We no longer need dnf or the platform python install\n# or any of its dependencies.\nADD clean-up-filesystem.sh /\n\n# Allowing qemu binaries to persist.\nRUN sed -i 's#zmore#zmore\\n\\tqemu\\n#m' clean-up-filesystem.sh\nRUN /clean-up-filesystem.sh\n\n# Copy everything into a fresh scratch image so that naive CVE scanners don't pick up binaries and libraries\n# that have been removed in our later layers.\nFROM scratch\nCOPY --from=ubi / /\n\n# Add in top-level license file\nCOPY LICENSE /licenses\n\n# Delete qemu binaries\nRUN rm /usr/bin/qemu-*-static\n\nCMD [\"start_runit\"]\n\n# Required labels for certification\nLABEL name=\"Calico node\" \\\n      vendor=\"Project Calico\" \\\n      version=$GIT_VERSION \\\n      release=\"1\" \\\n      summary=\"Calico node handles networking and policy for Calico\" \\\n      description=\"Calico node handles networking and policy for Calico\" \\\n      maintainer=\"reza@tigera.io\"\n\n# Tell sv where to find the services.\nENV SVDIR=/etc/service/enabled\n"
}