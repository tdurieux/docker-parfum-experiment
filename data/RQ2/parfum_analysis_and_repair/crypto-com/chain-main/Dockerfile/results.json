{
  "startTime": 1674215269999,
  "endTime": 1674215271188,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Simple usage with a mounted data directory:\n# > docker build -t cryptocom/chain-main .\n# > docker run -it -p 26657:26657 -p 26656:26656 -v ~/.chain-maind:/chain-main/.chain-maind -v ~/.chainmaincli:/chain-main/.chainmaincli cryptocom/chain-main chain-maind init [moniker] [flags]\n# > docker run -it -p 26657:26657 -p 26656:26656 -v ~/.chain-maind:/chain-main/.chain-maind -v ~/.chainmaincli:/chain-main/.chainmaincli cryptocom/chain-main chain-maind start\nFROM golang:alpine AS build-env\n\nARG NETWORK=testnet\n\n# Set up dependencies\nENV PACKAGES curl make git libc-dev bash gcc linux-headers eudev-dev python3\n\n# Set working directory for the build\nWORKDIR /go/src/github.com/crypto-org-chain/chain-main\n\n# Add source files\nCOPY . .\n\n# Install minimum necessary dependencies, build Cosmos SDK, remove packages\nRUN apk add --no-cache $PACKAGES && \\\n  git submodule update --init --recursive && \\\n  NETWORK=${NETWORK} make install\n\n# Final image\nFROM alpine:edge\n\nENV CHAIN_MAIN /chain-main\n\n# Install ca-certificates\nRUN apk add --no-cache --update ca-certificates\n\nRUN addgroup chain-main && \\\n  adduser -S -G chain-main chain-main -h \"$CHAIN_MAIN\"\n\nUSER chain-main\n\nWORKDIR $CHAIN_MAIN\n\n# Copy over binaries from the build-env\nCOPY --from=build-env /go/bin/chain-maind /usr/bin/chain-maind\n\n# Run chain-maind by default, omit entrypoint to ease using container with chain-maincli\nCMD [\"chain-maind\"]"
}