{
  "startTime": 1674250974356,
  "endTime": 1674250975121,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2016 - 2018  Ternaris.\n# SPDX-License-Identifier: AGPL-3.0-only\n\nFROM ubuntu:focal\n\nARG PYTHON=python3.8\n\n# This warning can simply be ignored:\n# debconf: delaying package configuration, since apt-utils is not installed\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        bash-completion \\\n        bc \\\n        capnproto \\\n        curl \\\n        ffmpeg \\\n        iputils-ping \\\n        jq \\\n        less \\\n        libcapnp-dev \\\n        libffi-dev \\\n        libfreetype6-dev \\\n        libjpeg-dev \\\n        liblz4-dev \\\n        libpng-dev \\\n        libssl-dev \\\n        libz-dev \\\n        locales \\\n        lsof \\\n        man \\\n        python3-pip \\\n        ${PYTHON} \\\n        ${PYTHON}-dev \\\n        ${PYTHON}-venv \\\n        rsync \\\n        sqlite3 \\\n        ssh \\\n        strace \\\n        tzdata \\\n        unzip \\\n        vim \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN locale-gen en_US.UTF-8; dpkg-reconfigure -f noninteractive locales\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\nENV MARV_VENV=/opt/marv\nCOPY requirements/* ${MARV_VENV}/requirements/\nRUN cd ${MARV_VENV} && \\\n    ${PYTHON} -m venv . && \\\n    ./bin/pip install -U -r requirements/venv.txt && \\\n    ./bin/pip install -U -c requirements/marv.txt cython && \\\n    ./bin/pip install -U -r requirements/marv.txt && \\\n    ./bin/pip install -U -r requirements/marv-robotics.txt && \\\n    ./bin/pip install opencv-python-headless==4.3.0.36 && \\\n    ./bin/pip install -U -r requirements/develop.txt && \\\n    rm -rf /root/.cache/pip /root/.cache/matplotlib && \\\n    rmdir /root/.cache || (ls -la /root/.cache; exit 1)\n\nCOPY CHANGES.rst ${MARV_VENV}/CHANGES.rst\nCOPY CONTRIBUTING.rst ${MARV_VENV}/CONTRIBUTING.rst\nCOPY tutorial ${MARV_VENV}/tutorial\nCOPY code ${MARV_VENV}/code\nCOPY docs ${MARV_VENV}/docs\nRUN rm ${MARV_VENV}/docs/config/marv.conf\nCOPY sites/example/marv.conf ${MARV_VENV}/docs/config/marv.conf\nCOPY scripts ${MARV_VENV}/scripts\n\nARG version=\n\n# For internal use only\nARG dist=\nCOPY ${dist:-CHANGES.rst} ${MARV_VENV}/dist\n\nRUN bash -c '\\\n    set -e; \\\n    cd ${MARV_VENV}; \\\n    if [[ -n \"${dist}\" ]]; then \\\n        ./bin/pip install --no-index -f ${MARV_VENV}/dist marv==\"${version}\"; \\\n        ./bin/pip install --no-index -f ${MARV_VENV}/dist marv-robotics==\"${version}\"; \\\n    else \\\n        rm ${MARV_VENV}/dist; \\\n        find code -maxdepth 2 -name setup.py -execdir ${MARV_VENV}/bin/pip install --no-deps . \\; ; \\\n        (source ./bin/activate && ./scripts/build-docs); \\\n        ./bin/pip install -U --no-deps ./code/marv; \\\n    fi; \\\n    if [[ -d /root/.cache ]]; then \\\n        rm -rf /root/.cache/pip /root/.cache/matplotlib; \\\n        rmdir /root/.cache || (ls -la /root/.cache; exit 1) \\\n    fi; \\\n    '\nRUN chown -R 1000:1000 /opt/marv\n\nCOPY .docker/entrypoint.sh /marv_entrypoint.sh\nCOPY .docker/env.sh /etc/profile.d/marv_env.sh\nRUN echo 'source /etc/profile.d/marv_env.sh' >> /etc/bash.bashrc\n\nENV ACTIVATE_VENV=1\nENTRYPOINT [\"/marv_entrypoint.sh\"]\nCMD [\"/bin/sh\", \"-c\", \"trap 'exit 147' TERM; tail -f /dev/null & while wait ${!}; [ $? -ge 128 ]; do true; done\"]\n"
}