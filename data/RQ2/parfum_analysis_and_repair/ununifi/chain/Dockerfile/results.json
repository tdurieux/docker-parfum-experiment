{
  "startTime": 1674252267846,
  "endTime": 1674252268616,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Simple usage with a mounted data directory:\n# > docker build -t ununifid .\n# > docker run -it -p 26656:26656 -p 26657:26657 -v ~/.ununifi:/root/.ununifi ghcr.io/ununifi/ununifid ununifid init\n# > docker run -it -p 26656:26656 -p 26657:26657 -v ~/.ununifi:/root/.ununifi ghcr.io/ununifi/ununifid ununifid start\nFROM golang:1.17-alpine AS build-env\n\n# Set up dependencies\nENV PACKAGES curl make git libc-dev bash gcc linux-headers eudev-dev python3\n\n# Set working directory for the build\nWORKDIR /go/src/github.com/UnUniFi/chain\n\n# Add source files\nCOPY . .\n\nRUN go version\n\n# Install minimum necessary dependencies, build Cosmos SDK, remove packages\nRUN apk add --no-cache $PACKAGES\n\n# install and setup glibc\nRUN wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\nRUN wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-2.25-r0.apk\nRUN wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-bin-2.25-r0.apk\nRUN wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-i18n-2.25-r0.apk\nRUN apk add --no-cache glibc-2.25-r0.apk glibc-bin-2.25-r0.apk glibc-i18n-2.25-r0.apk\nENV LD_LIBRARY_PATH /usr/glibc-compat/lib\nRUN /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\nRUN make install\n\n# Final image\nFROM alpine:edge\n\n# Install ca-certificates\nRUN apk add --no-cache --update ca-certificates\n\nWORKDIR /root\n\n# Copy over binaries from the build-env\nCOPY --from=build-env /go/bin/ununifid /usr/bin/ununifid\nCOPY --from=build-env /go/pkg/mod/github.com/!cosm!wasm/wasmvm@v1.0.0-beta10/api/libwasmvm.so /usr/lib/libwasmvm.so\nCOPY --from=build-env /lib/ld-musl-x86_64.so.1 /usr/lib/ld-musl-x86_64.so.1\nCOPY --from=build-env /usr/lib/libgcc_s.so.1 /usr/lib/libgcc_s.so.1\nCOPY --from=build-env /usr/glibc-compat/lib/ld-linux-x86-64.so.2 /usr/lib/ld-linux-x86-64.so.2\n\n# Run ununifid by default, omit entrypoint to ease using container with ununificli\nCMD [\"ununifid\"]\n"
}