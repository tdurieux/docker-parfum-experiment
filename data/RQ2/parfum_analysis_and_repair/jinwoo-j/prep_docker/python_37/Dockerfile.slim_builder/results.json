{
  "startTime": 1674216458999,
  "endTime": 1674216460172,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 11,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE\nFROM ${BASE_IMAGE} AS build_stage\nARG VERSION\nARG NAME\nARG TAGNAME\nARG IS_STATIC=$IS_STATIC\nENV TZ=\"Asia/Seoul\"  \\\n    TERM=\"xterm-256color\" \\\n    USERID=24988 \\\n    APP_DIR=\"prep_peer\" \\\n    APP_VERSION=${NAME}_${TAGNAME} \\\n    GOPATH=/go \\\n    GOROOT=/usr/local/go \\\n    PATH=$GOROOT/bin:$GOPATH:/src/:$PATH \\\n    IS_LOCAL=true \\\n    INSTALL_PACKAGE=\"make gcc libssl-dev zlib1g-dev \\\n    libbz2-dev libreadline-dev libsqlite3-dev \\\n    wget curl llvm libncurses5-dev libncursesw5-dev \\\n    xz-utils tk-dev libffi-dev liblzma-dev automake \\\n    libtool unzip jq netcat moreutils libsecp256k1-dev \\\n    git gnupg2 socat ntp  logrotate ntpdate vim procps \\\n    iproute2 lsof jq pigz axel monit gawk libcurl4-openssl-dev\" \\\n    ERLANG_PACKAGE=\"erlang-base erlang-asn1 erlang-crypto \\\n    erlang-eldap erlang-ftp erlang-inets \\\n    erlang-mnesia erlang-os-mon erlang-parsetools \\\n    erlang-public-key  erlang-runtime-tools erlang-snmp \\\n    erlang-ssl  erlang-syntax-tools erlang-tftp \\\n    erlang-tools erlang-xmerl\"\\\n    DELETE_PACKAGE=\"gcc gcc-6 g++* g++-6* make git automake\"\n\nCOPY src /src\nCOPY src/pip.conf /etc/\nCOPY conf $APP_DIR/conf\nRUN echo \"IS_STATIC = $IS_STATIC\"; \\\n    echo \"Starting static build\" ; \\\n    /src/static_builder.py -o /${APP_DIR}/whl ; \\\n    WHL_LIST=`find /$APP_DIR/ -name \"*.whl\"` && \\\n    ICON_RC=`find /$APP_DIR/ -name \"icon_rc\"` && \\\n    if [ \"x${ICON_RC}\" != \"x\" ]; then \\\n        cp $ICON_RC /usr/local/bin  || exit 1;\\\n    fi; \\\n    if [ ! -f \"/usr/local/bin/icon_rc\" ]; then \\\n        echo \"icon_rc not found\"; \\\n        exit 127;\\\n    fi; \\\n    for FILE in $WHL_LIST; do \\\n    \n        pip3 install --no-cache-dir $FILE; \\\n        if [ $? != 0 ]; \\\n            then exit 127; \\\n        fi; \\\n       done \\\n    ; \\\n    apt-get purge -y --auto-remove $DELETE_PACKAGE gnupg mysql-common llvm; \\\n    rm -rf /src/get-pip.py /src/*.deb /src/*.rpm ; \\\n    rm -rf /prep_peer/whl/* ; \\\n    rm -rf /usr/lib/x86_64-linux-gnu/libLLVM-3.8.so.1\n\nRUN apt-get autoremove -y\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/*\n\nRUN find / -xdev -type d -a \\( \\\n        -name test -o \\\n        -name tests -o \\\n        -name idlelib -o \\\n        -name turtledemo -o \\\n        -name pydoc_data -o \\\n        -name tkinter \\) -exec rm -rf {} +\n\nFROM python:3.7.3-slim-stretch\nCOPY --from=build_stage /bin /bin\nCOPY --from=build_stage /etc /etc\nCOPY --from=build_stage /lib /lib\nCOPY --from=build_stage /var/lib /var/lib\nCOPY --from=build_stage /usr/lib /usr/lib\nCOPY --from=build_stage /usr/bin /usr/bin\nCOPY --from=build_stage /usr/sbin /usr/sbin\nCOPY --from=build_stage /bin/nc /bin/nc\nCOPY --from=build_stage /usr/local/bin /usr/local/bin\nCOPY --from=build_stage /usr/local/lib/python3.7 /usr/local/lib/python3.7\nCOPY --from=build_stage /prep_peer /prep_peer\nCOPY --from=build_stage /src /src\nENV TZ=\"Asia/Seoul\"  \\\n    TERM=\"xterm-256color\" \\\n    USERID=24988 \\\n    APP_DIR=\"prep_peer\" \\\n    APP_VERSION=${NAME}_${TAGNAME} \\\n    IS_LOCAL=true\nRUN mkdir -p /var/log/rabbitmq ; \\\n    chown rabbitmq.rabbitmq -R /var/lib/rabbitmq /var/log/rabbitmq\n\nEXPOSE 9000\nEXPOSE 7100\nHEALTHCHECK --retries=4 --interval=30s --timeout=20s --start-period=60s \\\n    CMD python3 /src/healthcheck.py\nRUN echo 'export PS1=\" \\[\\e[00;32m\\]${APP_VERSION}\\[\\e[0m\\]\\[\\e[00;37m\\]@\\[\\e[0m\\]\\[\\e[00;31m\\]\\H :\\\\$\\[\\e[0m\\] \"' >> /root/.bashrc\nENTRYPOINT [ \"/init\", \"/src/entrypoint.sh\" ]\n"
}