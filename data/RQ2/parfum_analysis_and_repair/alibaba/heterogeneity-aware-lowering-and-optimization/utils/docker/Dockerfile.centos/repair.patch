diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/alibaba/heterogeneity-aware-lowering-and-optimization/utils/docker/Dockerfile.centos b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/alibaba/heterogeneity-aware-lowering-and-optimization/utils/docker/Dockerfile.centos/repaired.Dockerfile
index 6ec7a2e..2ed8991 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/alibaba/heterogeneity-aware-lowering-and-optimization/utils/docker/Dockerfile.centos
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/alibaba/heterogeneity-aware-lowering-and-optimization/utils/docker/Dockerfile.centos/repaired.Dockerfile
@@ -1,4 +1,3 @@
-# syntax=docker/dockerfile:experimental
 # Build this image:  docker build -t halo:[version] .
 #
 
@@ -8,10 +7,10 @@ FROM  ${BASE_IMAGE}
 
 RUN yum install -y zlib-devel curl-devel wget make bzip2 python3 \
     which unzip git && \
-    yum clean all
+    yum clean all && rm -rf /var/cache/yum
 RUN yum install -y centos-release-scl && \
     yum install -y devtoolset-7-gcc-c++-7.3.1 && \
-    yum clean all
+    yum clean all && rm -rf /var/cache/yum
 
 ARG BASE_IMAGE=${BASE_IMAGE}
 
@@ -23,7 +22,7 @@ RUN if [[ ${BASE_IMAGE} =~ nvidia ]]; then \
             libnvinfer-plugin8-${NV_NVINFER_DEV_VERSION} \
             libnvinfer-devel-${NV_NVINFER_DEV_VERSION}  \
             libnvinfer8-${NV_NVINFER_DEV_VERSION} && \
-        yum clean all ; \
+        yum clean all ; rm -rf /var/cache/yum \
     fi
 
 SHELL ["/usr/bin/scl", "enable", "devtoolset-7"]
@@ -37,7 +36,7 @@ RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cm
     ./bootstrap --system-curl --parallel=48 && \
     make -j all && \
     make install && \
-    rm -rf /tmp/cmake
+    rm -rf /tmp/cmake && rm cmake-${CMAKE_VERSION}.tar.gz
 
 # Install Ninja
 RUN cd /tmp && git clone https://github.com/ninja-build/ninja.git && \
@@ -71,7 +70,7 @@ RUN cd /tmp && git clone --depth=1 https://github.com/intel/mkl-dnn.git --branch
 
 # Install Eigen
 RUN cd /tmp && wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.bz2 && \
-    tar jxvf eigen-3.4.0.tar.bz2 && mv eigen-3.4.0 /opt
+    tar jxvf eigen-3.4.0.tar.bz2 && mv eigen-3.4.0 /opt && rm eigen-3.4.0.tar.bz2
 
 # Install XNNPack
 RUN cd /tmp && git clone https://github.com/google/XNNPACK.git && \
@@ -95,12 +94,12 @@ RUN cd /tmp && \
     rpm -i ccache-3.7.7-1.el7.x86_64.rpm && rm /tmp/*.rpm
 ENV CCACHE_DIR=/cache
 
-RUN rpm --rebuilddb && yum install -y rpm-build && yum clean all
+RUN rpm --rebuilddb && yum install -y rpm-build && yum clean all && rm -rf /var/cache/yum
 
 # Install Ascend Toolkit
 RUN cd /tmp && wget https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tgz && tar xvf Python-3.8.12.tgz \
- && cd Python-3.8*/ && ./configure  --prefix=/opt/python3.8 && make altinstall
-RUN /opt/python3.8/bin/python3.8 -m venv /tmp/venv && source /tmp/venv/bin/activate &&  curl --output /tmp/ascend.run https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN/5.1.RC2.alpha006/Ascend-cann-toolkit_5.1.RC2.alpha006_linux-x86_64.run \
+ && cd Python-3.8*/ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/opt/python3.8 && make altinstall && rm Python-3.8.12.tgz
+RUN /opt/python3.8/bin/python3.8 -m venv /tmp/venv && source /tmp/venv/bin/activate && curl -f --output /tmp/ascend.run https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN/5.1.RC2.alpha006/Ascend-cann-toolkit_5.1.RC2.alpha006_linux-x86_64.run \
  && bash /tmp/ascend.run --full && rm -fr /tmp/*
 
 # Install models & test cases