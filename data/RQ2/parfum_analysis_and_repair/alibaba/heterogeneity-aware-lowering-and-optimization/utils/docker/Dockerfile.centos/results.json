{
  "startTime": 1674248152626,
  "endTime": 1674248154547,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 88,
        "columnEnd": 245
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 23,
        "columnEnd": 59
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 8,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 24,
        "columnStart": 8,
        "columnEnd": 49
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 23,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 82,
        "columnEnd": 107
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build this image:  docker build -t halo:[version] .\n#\n\nARG BASE_IMAGE\n\nFROM  ${BASE_IMAGE}\n\nRUN yum install -y zlib-devel curl-devel wget make bzip2 python3 \\\n    which unzip git && \\\n    yum clean all && rm -rf /var/cache/yum\nRUN yum install -y centos-release-scl && \\\n    yum install -y devtoolset-7-gcc-c++-7.3.1 && \\\n    yum clean all && rm -rf /var/cache/yum\n\nARG BASE_IMAGE=${BASE_IMAGE}\n\nSHELL [\"/bin/bash\", \"-c\"]\nENV NV_NVINFER_DEV_VERSION=8.2.5-1.cuda11.4\nRUN if [[ ${BASE_IMAGE} =~ nvidia ]]; then \\\n        yum update -y && \\\n        yum install -y libnvinfer-plugin-devel-${NV_NVINFER_DEV_VERSION} \\\n            libnvinfer-plugin8-${NV_NVINFER_DEV_VERSION} \\\n            libnvinfer-devel-${NV_NVINFER_DEV_VERSION}  \\\n            libnvinfer8-${NV_NVINFER_DEV_VERSION} && \\\n        yum clean all ; rm -rf /var/cache/yum \\\n    fi\n\nSHELL [\"/usr/bin/scl\", \"enable\", \"devtoolset-7\"]\n\n# Install cmake\nENV CMAKE_VERSION=3.16.7\nWORKDIR /tmp/cmake\nRUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz && \\\n    tar zxf cmake-${CMAKE_VERSION}.tar.gz && \\\n    cd cmake-${CMAKE_VERSION} && \\\n    ./bootstrap --system-curl --parallel=48 && \\\n    make -j all && \\\n    make install && \\\n    rm -rf /tmp/cmake && rm cmake-${CMAKE_VERSION}.tar.gz\n\n# Install Ninja\nRUN cd /tmp && git clone https://github.com/ninja-build/ninja.git && \\\n    cd ninja && \\\n    git checkout v1.10.2 &&  cmake -G \"Unix Makefiles\" . && make -j && make install && \\\n    rm -fr /tmp/ninja\n\n# INSTALL Protobuf (static)\nRUN cd /tmp && \\\n    git clone --depth=1 https://github.com/protocolbuffers/protobuf.git -b v3.9.1 && \\\n    cd protobuf/cmake && \\\n    cmake -G Ninja . -Dprotobuf_BUILD_TESTS=OFF \\\n      -Dprotobuf_BUILD_SHARED_LIBS=OFF \\\n      -DCMAKE_POSITION_INDEPENDENT_CODE=ON && \\\n    ninja install && \\\n    rm -fr /tmp/protobuf\n\n# INSTALL glog\nRUN cd /tmp && \\\n    git clone --depth=1 https://github.com/google/glog.git -b v0.4.0 && \\\n    cd glog && \\\n    cmake -H. -Bbuild -G \"Unix Makefiles\" && cmake --build build && \\\n    cmake --build build --target install && ldconfig && \\\n    rm -fr /tmp/glog\n\n# Build & Install DNNL (MKLDNN)\nRUN cd /tmp && git clone --depth=1 https://github.com/intel/mkl-dnn.git --branch v1.7-rc && \\\n    cd /tmp/mkl-dnn && \\\n    cmake -G Ninja -DDNNL_BUILD_EXAMPLES=OFF -DDNNL_BUILD_TESTS=OFF -DDNNL_ENABLE_PRIMITIVE_CACHE=ON -DCMAKE_INSTALL_PREFIX=/opt/dnnl && \\\n    ninja install\n\n# Install Eigen\nRUN cd /tmp && wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.bz2 && \\\n    tar jxvf eigen-3.4.0.tar.bz2 && mv eigen-3.4.0 /opt && rm eigen-3.4.0.tar.bz2\n\n# Install XNNPack\nRUN cd /tmp && git clone https://github.com/google/XNNPACK.git && \\\n    cd /tmp/XNNPACK && git checkout -b tmp 90db69f681ea9abd1ced813c17c00007f14ce58b && \\\n    mkdir /tmp/xnn_build_static && cd /tmp/xnn_build_static && \\\n    cmake -G Ninja ../XNNPACK -DXNNPACK_LIBRARY_TYPE=static -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n      -DXNNPACK_BUILD_TESTS=OFF -DXNNPACK_BUILD_BENCHMARKS=OFF -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/opt/XNNPACK && \\\n    ninja install\n\n# Install Flatbuffer\nRUN cd /tmp && \\\n    git clone --depth=1 https://github.com/google/flatbuffers.git -b v1.12.0 && \\\n    cd flatbuffers && \\\n    cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release  -DFLATBUFFERS_BUILD_SHAREDLIB=ON && make -j && make install && \\\n    rm -fr /tmp/flatbuffers\n\n# Install ccache\nRUN cd /tmp && \\\n    wget https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/c/ccache-3.7.7-1.el7.x86_64.rpm && \\\n    rpm -i ccache-3.7.7-1.el7.x86_64.rpm && rm /tmp/*.rpm\nENV CCACHE_DIR=/cache\n\nRUN rpm --rebuilddb && yum install -y rpm-build && yum clean all && rm -rf /var/cache/yum\n\n# Install Ascend Toolkit\nRUN cd /tmp && wget https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tgz && tar xvf Python-3.8.12.tgz \\\n && cd Python-3.8*/ && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/python3.8 && make altinstall && rm Python-3.8.12.tgz\nRUN /opt/python3.8/bin/python3.8 -m venv /tmp/venv && source /tmp/venv/bin/activate && curl -f --output /tmp/ascend.run https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN/5.1.RC2.alpha006/Ascend-cann-toolkit_5.1.RC2.alpha006_linux-x86_64.run \\\n && bash /tmp/ascend.run --full && rm -fr /tmp/*\n\n# Install models & test cases\nCOPY --from=registry-intl.us-west-1.aliyuncs.com/computation/halo:v0.1-model-zoo /models /models\nCOPY --from=registry-intl.us-west-1.aliyuncs.com/computation/halo:v0.1-model-zoo /unittests /unittests\n\nWORKDIR /host\nRUN echo \"source scl_source enable devtoolset-7\" >> /etc/bashrc\n\n#ENTRYPOINT [\"/usr/bin/scl\", \"enable\", \"devtoolset-7\"]\n"
}