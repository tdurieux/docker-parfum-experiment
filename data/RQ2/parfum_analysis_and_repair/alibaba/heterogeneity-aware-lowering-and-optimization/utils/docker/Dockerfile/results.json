{
  "startTime": 1674253499174,
  "endTime": 1674253501392,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 234,
        "lineEnd": 234,
        "columnStart": 4,
        "columnEnd": 161
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 209,
        "lineEnd": 209,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 60,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 60,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build this image:  docker build -t halo:[version] .\n\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\n\n# Redeclare the argument\nARG BASE_IMAGE\n\nARG python=3.7.0\nENV PYTHON_VERSION=${python}\n\n# To access the host directory\nRUN mkdir /host\n\n# update cuda repo public key\nRUN mv /etc/apt/sources.list.d/cuda.list /tmp/\nRUN apt-get update && apt-get install --no-install-recommends -y curl && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub | apt-key add - && \\\n    mv /tmp/cuda.list /etc/apt/sources.list.d/ && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && apt-get -y --no-install-recommends install software-properties-common apt-utils wget && rm -fr /var/lib/apt/lists/*\n\nARG GCC_VERSION=7\nRUN apt-get update -y && \\\n    apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n      apt-transport-https \\\n      build-essential \\\n      autoconf \\\n      automake \\\n      libtool \\\n      cgdb \\\n      ccache \\\n      nasm \\\n      libc6-dbg \\\n      qemu-user \\\n      git-core \\\n      ca-certificates \\\n      gdb \\\n      vim \\\n      curl \\\n      libcurl4-openssl-dev \\\n      cpio \\\n      sudo \\\n      pkg-config \\\n      zip \\\n      zlib1g-dev \\\n      xterm \\\n      unzip \\\n      libpcre3 \\\n      libpcre3-dev \\\n      checkinstall \\\n      yasm \\\n      gfortran \\\n      libpng-dev \\\n      libjpeg8 \\\n      libjpeg8-dev \\\n      gpg-agent \\\n      graphviz \\\n      doxygen \\\n      python3-setuptools \\\n      python3-dev \\\n      python3-pip \\\n      openssh-client \\\n      openssh-server  \\\n      g++-${GCC_VERSION} gcc-${GCC_VERSION}  \\\n      g++-${GCC_VERSION}-aarch64-linux-gnu \\\n      less \\\n      scons \\\n      git-lfs \\\n      ninja-build \\\n      libopencv-core-dev \\\n      libopencv-highgui-dev \\\n      libopencv-videoio-dev \\\n      libmpc-dev \\\n      libmpfr-dev \\\n      libgmp-dev\\\n      gawk \\\n      imagemagick \\\n      bison \\\n      flex \\\n      texinfo \\\n      texlive \\\n      texlive-latex-extra \\\n      latex-cjk-all \\\n      libglib2.0-dev \\\n      libpixman-1-dev \\\n      bc \\\n      ffmpeg \\\n      libsm6=2:1.2.2-1 \\\n      libxext6=2:1.3.3-1 && \\\n    apt-get clean && apt-get purge && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#install the Git\nRUN add-apt-repository ppa:git-core/ppa -y && apt update && apt install --no-install-recommends git -y && rm -rf /var/lib/apt/lists/*;\n\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 60 --slave /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION} && \\\n    update-alternatives --install /usr/bin/aarch64-linux-gnu-g++ aarch64-linux-gnu-g++ /usr/bin/aarch64-linux-gnu-g++-${GCC_VERSION} 60 && \\\n    update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-${GCC_VERSION} 60 && \\\n    update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.gold\" 20 && \\\n    update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.bfd\" 10\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Install TensorRT\nARG TENSORRT_VERSION=8.2.1-1+cuda11.4\nRUN if [[ \"${BASE_IMAGE}\" =~ \"nvidia\" ]]; then apt-get update -y && \\\n    apt-get install -y --no-install-recommends --allow-change-held-packages \\\n        libnvinfer8=${TENSORRT_VERSION} \\\n        libnvinfer-dev=${TENSORRT_VERSION} \\\n        libnvinfer-plugin8=${TENSORRT_VERSION} \\\n        libnvonnxparsers8=${TENSORRT_VERSION} \\\n        python3-libnvinfer-dev=${TENSORRT_VERSION} \\\n        python3-libnvinfer=${TENSORRT_VERSION} \\\n        libnvinfer-plugin-dev=${TENSORRT_VERSION} \\\n        libnvparsers-dev=${TENSORRT_VERSION} \\\n        libnvonnxparsers-dev=${TENSORRT_VERSION} \\\n        libnvparsers8=${TENSORRT_VERSION} && \\\n    apt-get clean && apt-get purge && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* ; fi\n\n# INSTALL LLVM\nARG LLVM_VERSION=9\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \\\n    add-apt-repository \"deb http://apt.llvm.org/bionic/   llvm-toolchain-bionic-${LLVM_VERSION}  main\"  && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n      clang-${LLVM_VERSION} \\\n      clangd-${LLVM_VERSION} \\\n      clang-tools-${LLVM_VERSION} \\\n      clang-tidy-${LLVM_VERSION} \\\n      clang-format-${LLVM_VERSION} && \\\n    apt-get clean && apt-get purge && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#python\nRUN pip3 install --no-cache-dir --upgrade pip && \\\n    pip3 install --no-cache-dir wheel numpy six jupyter enum34 mock h5py pillow scipy==1.5.4 opencv-python==4.5.5.64\n\n# Update binutils\nARG BINUTILS_VERSION=2.35\nRUN mkdir /tmp/binutils && \\\n    cd /tmp/binutils && \\\n    wget https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VERSION}.tar.gz && \\\n    tar zxf binutils-${BINUTILS_VERSION}.tar.gz && \\\n    cd binutils-${BINUTILS_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j all && \\\n    make install && \\\n    rm -rf /tmp/binutils && rm binutils-${BINUTILS_VERSION}.tar.gz\n\n# Install cmake\nARG CMAKE_VERSION=3.14.5\nRUN mkdir /tmp/cmake && \\\n    cd /tmp/cmake && \\\n    wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz && \\\n    tar zxf cmake-${CMAKE_VERSION}.tar.gz && \\\n    cd cmake-${CMAKE_VERSION} && \\\n    ./bootstrap --system-curl --parallel=48 && \\\n    make -j all && \\\n    make install && \\\n    rm -rf /tmp/cmake && rm cmake-${CMAKE_VERSION}.tar.gz\n\n# Install valgrind\nARG VALGRIND_VERSION=3.13.0\nRUN mkdir /tmp/valgrind && \\\n    cd /tmp/valgrind && \\\n    wget ftp://sourceware.org/pub/valgrind/valgrind-${VALGRIND_VERSION}.tar.bz2 && \\\n    tar jxf valgrind-${VALGRIND_VERSION}.tar.bz2 && \\\n    cd valgrind-${VALGRIND_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j all && \\\n    make install && \\\n    rm -rf /tmp/valgrind && rm valgrind-${VALGRIND_VERSION}.tar.bz2\n\n# INSTALL Protobuf (static)\nRUN cd /tmp && \\\n    git clone --depth=1 https://github.com/protocolbuffers/protobuf.git -b v3.9.1 && \\\n    cd protobuf/cmake && \\\n    cmake -G Ninja . -Dprotobuf_BUILD_TESTS=OFF \\\n      -Dprotobuf_BUILD_SHARED_LIBS=OFF \\\n      -DCMAKE_POSITION_INDEPENDENT_CODE=ON && \\\n    ninja install && \\\n    rm -fr /tmp/protobuf\n\n# INSTALL glog\nRUN cd /tmp && \\\n    git clone --depth=1 https://github.com/google/glog.git -b v0.4.0 && \\\n    cd glog && \\\n    cmake -H. -Bbuild -G \"Unix Makefiles\" && cmake --build build && \\\n    cmake --build build --target install && ldconfig && \\\n    rm -fr /tmp/glog\n\n# Install GCC-10\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test && \\\n    apt-get update && \\\n    apt-get install -y gcc-10 g++-10 -y --no-install-recommends && \\\n    apt-get clean && apt-get purge && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Build & Install DNNL (MKLDNN)\nRUN cd /tmp && git clone --depth=1 https://github.com/oneapi-src/oneDNN.git --branch v1.7 && \\\n    cd /tmp/oneDNN && \\\n    cmake -G Ninja -DDNNL_BUILD_EXAMPLES=OFF -DDNNL_BUILD_TESTS=OFF -DDNNL_ENABLE_PRIMITIVE_CACHE=ON -DCMAKE_INSTALL_PREFIX=/opt/dnnl && \\\n    ninja install\n\n# Install Parallel\nRUN apt-get update && \\\n    apt-get install -y parallel --no-install-recommends && \\\n    apt-get clean && apt-get purge && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install Eigen\nRUN cd /tmp && wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.bz2 && \\\n    tar jxvf eigen-3.4.0.tar.bz2 && mv eigen-3.4.0 /opt && rm eigen-3.4.0.tar.bz2\n\n# Install XNNPack\nRUN cd /tmp && git clone https://github.com/google/XNNPACK.git && \\\n    cd /tmp/XNNPACK && git checkout -b tmp  90db69f681ea9abd1ced813c17c00007f14ce58b && \\\n    mkdir /tmp/xnn_build_static && cd /tmp/xnn_build_static && \\\n    cmake -G Ninja ../XNNPACK -DXNNPACK_LIBRARY_TYPE=static -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n      -DXNNPACK_BUILD_TESTS=OFF -DXNNPACK_BUILD_BENCHMARKS=OFF -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/opt/XNNPACK && \\\n    ninja install\n\n# Install Flatbuffer\nRUN cd /tmp && \\\n    git clone --depth=1 https://github.com/google/flatbuffers.git -b v1.12.0 && \\\n    cd flatbuffers && \\\n    cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release  -DFLATBUFFERS_BUILD_SHAREDLIB=ON && make -j && make install && \\\n    rm -fr /tmp/flatbuffers\n\n# INSATLL ONEAPI\nRUN if [[ ! \"${BASE_IMAGE}\" =~ \"nvidia\" ]]; then wget https://registrationcenter-download.intel.com/akdlm/irc_nas/17769/l_BaseKit_p_2021.2.0.2883_offline.sh && \\\n    chmod +x ./l_BaseKit_p_2021.2.0.2883_offline.sh && \\\n    ./l_BaseKit_p_2021.2.0.2883_offline.sh -s -a --silent --eula accept; fi\n\n# Install Ascend Toolkit\nRUN apt-get update && apt-get install --no-install-recommends -y python3.8 \\\n && curl -f --output /tmp/ascend.run https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN/5.1.RC2.alpha006/Ascend-cann-toolkit_5.1.RC2.alpha006_linux-x86_64.run \\\n && bash /tmp/ascend.run --full \\\n && apt-get remove -y python3.8 && apt clean && rm -fr /var/lib/apt/lists* /tmp/* /var/tmp*\n\n# Install models & test cases\nCOPY --from=registry-intl.us-west-1.aliyuncs.com/computation/halo:v0.1-model-zoo /models /models\nCOPY --from=registry-intl.us-west-1.aliyuncs.com/computation/halo:v0.1-model-zoo /unittests /unittests\n\nRUN mkdir -p /var/run/sshd\nRUN sed -i 's/prohibit-password/yes/' /etc/ssh/sshd_config\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\n\n# Set SSH with the deploy key\nENV SSHDIR /root/.ssh\nRUN mkdir -p ${SSHDIR}\nRUN echo \"StrictHostKeyChecking no\" > ${SSHDIR}/config\n\n# Add PATH\nRUN echo \"PATH=\\\".:/usr/local/cuda/bin:\\$PATH\\\"\" >> /root/.profile\n\n#Clean up\nRUN apt clean && apt purge && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Start the ssh\nENTRYPOINT service ssh restart && ldconfig && bash\n"
}