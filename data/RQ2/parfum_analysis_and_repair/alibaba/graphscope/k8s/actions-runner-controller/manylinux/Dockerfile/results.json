{
  "startTime": 1674216677148,
  "endTime": 1674216677871,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 121
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.6.0\n\nARG TARGETPLATFORM\nARG RUNNER_VERSION=2.287.1\nARG DOCKER_CHANNEL=stable\nARG DOCKER_VERSION=20.10.12\nARG DUMB_INIT_VERSION=1.2.5\n\nRUN test -n \"$TARGETPLATFORM\" || (echo \"TARGETPLATFORM must be set\" && false)\n\n\n# arch command on OS X reports \"i386\" for Intel CPUs regardless of bitness\nRUN export ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \\\n    && if [ \"$ARCH\" = \"arm64\" ]; then export ARCH=aarch64 ; fi \\\n    && if [ \"$ARCH\" = \"amd64\" ] || [ \"$ARCH\" = \"i386\" ]; then export ARCH=x86_64 ; fi \\\n    && sudo curl -f -L -o /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v${DUMB_INIT_VERSION}/dumb-init_${DUMB_INIT_VERSION}_${ARCH} \\\n    && sudo chmod +x /usr/local/bin/dumb-init\n\n# Docker download supports arm64 as aarch64 & amd64 / i386 as x86_64\nRUN set -vx; \\\n    export ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \\\n    && if [ \"$ARCH\" = \"arm64\" ]; then export ARCH=aarch64 ; fi \\\n    && if [ \"$ARCH\" = \"amd64\" ] || [ \"$ARCH\" = \"i386\" ]; then export ARCH=x86_64 ; fi \\\n    && curl -f -L -o docker.tgz https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${ARCH}/docker-${DOCKER_VERSION}.tgz \\\n    && tar zxvf docker.tgz \\\n    && sudo install -o root -g root -m 755 docker/docker /usr/local/bin/docker \\\n    && rm -rf docker docker.tgz\n\nENV RUNNER_ASSETS_DIR=/runnertmp\nENV HOME=/home/graphscope\n\n# Uncomment the below COPY to use your own custom build of actions-runner.\n#\n# To build a custom runner:\n# - Clone the actions/runner repo `git clone git@github.com:actions/runner.git $repo`\n# - Run `cd $repo/src`\n# - Run `./dev.sh layout Release linux-x64`\n# - Run `./dev.sh package Release linux-x64`\n# - Run cp ../_package/actions-runner-linux-x64-2.280.3.tar.gz ../../actions-runner-controller/runner/\n#   - Beware that `2.280.3` might change across versions\n#\n# See https://github.com/actions/runner/blob/main/.github/workflows/release.yml for more informatino on how you can use dev.sh\n#\n# If you're willing to uncomment the following line, you'd also need to comment-out the\n#   && curl -L -o runner.tar.gz https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${ARCH}-${RUNNER_VERSION}.tar.gz \\\n# line in the next `RUN` command in this Dockerfile, to avoid overwirting this runner.tar.gz with a remote one.\n\n# COPY actions-runner-linux-x64-2.280.3.tar.gz /runnertmp/runner.tar.gz\n\n# Runner download supports amd64 as x64. Externalstmp is needed for making mount points work inside DinD.\n#\n# libyaml-dev is required for ruby/setup-ruby action.\n# It is installed after installdependencies.sh and before removing /var/lib/apt/lists\n# to avoid rerunning apt-update on its own.\nRUN export ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \\\n    && if [ \"$ARCH\" = \"amd64\" ] || [ \"$ARCH\" = \"x86_64\" ] || [ \"$ARCH\" = \"i386\" ]; then export ARCH=x64 ; fi \\\n    && sudo mkdir -p \"$RUNNER_ASSETS_DIR\" \\\n    && cd \"$RUNNER_ASSETS_DIR\" \\\n    # Comment-out the below curl invocation when you use your own build of actions/runner\n    && sudo curl -f -L -o runner.tar.gz https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${ARCH}-${RUNNER_VERSION}.tar.gz \\\n    && sudo tar xzf ./runner.tar.gz \\\n    && sudo rm runner.tar.gz \\\n    && sudo ./bin/installdependencies.sh \\\n    && sudo mv ./externals ./externalstmp\n\nRUN curl -f -L https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz | sudo tar xz \\\n    && sudo mv sccache-v0.2.15-x86_64-unknown-linux-musl/sccache /usr/local/bin/ \\\n    && sudo chmod +x /usr/local/bin/sccache\n\nENV RUNNER_TOOL_CACHE=/opt/hostedtoolcache\nRUN sudo mkdir /opt/hostedtoolcache \\\n    && sudo chgrp graphscope /opt/hostedtoolcache \\\n    && sudo chmod g+rwx /opt/hostedtoolcache\n\nCOPY entrypoint.sh /\n\n# Add the Python \"User Script Directory\" to the PATH\nENV PATH=\"${PATH}:${HOME}/.local/bin\"\nENV ImageOS=manylinux2014\n\nUSER graphscope\n\nENTRYPOINT [\"/usr/local/bin/dumb-init\", \"--\"]\nCMD [\"/entrypoint.sh\"]\n\n"
}