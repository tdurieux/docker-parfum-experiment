{
  "startTime": 1674220213620,
  "endTime": 1674220215781,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 259,
        "lineEnd": 259,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 253,
        "lineEnd": 253,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# the graphscope-manylinux2010 image is based on manylinux2010, including all necessary\n# dependencies for graphscope's wheel package.\n\nFROM registry.cn-hongkong.aliyuncs.com/graphscope/manylinux2014:2021-10-14-14ac00e\n\n# yum install dependencies\nRUN yum install -y autoconf m4 git krb5-devel perl-IPC-Cmd rapidjson-devel \\\n        libcurl-devel libevent-devel libgsasl-devel libunwind-devel.x86_64 \\\n        libuuid-devel libxml2-devel libzip libzip-devel minizip minizip-devel \\\n        make net-tools rsync telnet unzip vim wget which zip bind-utils sudo \\\n        msgpack-devel && \\\n    yum clean all && \\\n    rm -fr /var/cache/yum && \\\n    cd /tmp && \\\n    wget -q https://github.com/Kitware/CMake/releases/download/v3.19.1/cmake-3.19.1-Linux-x86_64.sh && \\\n    bash cmake-3.19.1-Linux-x86_64.sh --prefix=/usr --skip-license && \\\n    cd /tmp && \\\n    rm -rf /tmp/cmake-3.19.1-Linux-x86_64.sh\n\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib:/usr/local/lib64\nENV PATH=${PATH}:/usr/local/bin\n\n# install clang-11 with gold optimizer plugin, depends on header include/plugin-api.h\nRUN ln -s /opt/rh/devtoolset-10/root/lib/gcc/x86_64-redhat-linux/10 /usr/lib/gcc/x86_64-redhat-linux/10 && \\\n    cd /tmp && \\\n    mkdir -p binutils/include && \\\n    cd binutils/include && \\\n    wget -q https://raw.githubusercontent.com/bminor/binutils-gdb/binutils-2_37-branch/include/plugin-api.h && \\\n    cd /tmp && \\\n    wget -q https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-11.1.0.tar.gz && \\\n    tar zxf /tmp/llvmorg-11.1.0.tar.gz -C /tmp/ && \\\n    cd llvm-project-llvmorg-11.1.0/ && \\\n    mkdir build && cd build && \\\n    cmake -G \"Unix Makefiles\" -DLLVM_ENABLE_PROJECTS='clang;lld' \\\n                              -DCMAKE_INSTALL_PREFIX=/opt/llvm11 \\\n                              -DCMAKE_BUILD_TYPE=Release \\\n                              -DLLVM_TARGETS_TO_BUILD=X86 \\\n                              -DLLVM_BINUTILS_INCDIR=/tmp/binutils/include \\\n                              ../llvm && \\\n    make install -j`nproc` && \\\n    rm -rf /tmp/llvm-project-llvmorg-11.1.0 /tmp/llvmorg-11.1.0.tar.gz /tmp/binutils\n\nENV LLVM11_HOME=/opt/llvm11\n\n# openssl 1.1.1\nRUN cd /tmp && \\\n    wget -q https://github.com/openssl/openssl/archive/OpenSSL_1_1_1h.tar.gz && \\\n    tar zxvf OpenSSL_1_1_1h.tar.gz && \\\n    cd openssl-OpenSSL_1_1_1h && \\\n    ./config -fPIC -shared && \\\n    make -j && \\\n    make install -j || true && \\\n    cd /tmp && \\\n    rm -rf /tmp/OpenSSL_1_1_1h.tar.gz /tmp/openssl-OpenSSL_1_1_1h\n\n# apache arrow v7.0.0\nRUN cd /tmp && \\\n    wget -q https://github.com/apache/arrow/archive/apache-arrow-7.0.0.tar.gz && \\\n    tar zxvf apache-arrow-7.0.0.tar.gz && \\\n    cd arrow-apache-arrow-7.0.0 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../cpp \\\n        -DARROW_COMPUTE=ON \\\n        -DARROW_WITH_UTF8PROC=OFF \\\n        -DARROW_CSV=ON \\\n        -DARROW_CUDA=OFF \\\n        -DARROW_DATASET=OFF \\\n        -DARROW_FILESYSTEM=ON \\\n        -DARROW_FLIGHT=OFF \\\n        -DARROW_GANDIVA=OFF \\\n        -DARROW_GANDIVA_JAVA=OFF \\\n        -DARROW_HDFS=OFF \\\n        -DARROW_HIVESERVER2=OFF \\\n        -DARROW_JSON=OFF \\\n        -DARROW_ORC=OFF \\\n        -DARROW_PARQUET=OFF \\\n        -DARROW_PLASMA=OFF \\\n        -DARROW_PLASMA_JAVA_CLIENT=OFF \\\n        -DARROW_PYTHON=OFF \\\n        -DARROW_S3=OFF \\\n        -DARROW_WITH_BZ2=OFF \\\n        -DARROW_WITH_ZLIB=OFF \\\n        -DARROW_WITH_LZ4=OFF \\\n        -DARROW_WITH_SNAPPY=OFF \\\n        -DARROW_WITH_ZSTD=OFF \\\n        -DARROW_WITH_BROTLI=OFF \\\n        -DARROW_IPC=ON \\\n        -DARROW_BUILD_BENCHMARKS=OFF \\\n        -DARROW_BUILD_EXAMPLES=OFF \\\n        -DARROW_BUILD_INTEGRATION=OFF \\\n        -DARROW_BUILD_UTILITIES=OFF \\\n        -DARROW_BUILD_TESTS=OFF \\\n        -DARROW_ENABLE_TIMING_TESTS=OFF \\\n        -DARROW_FUZZING=OFF \\\n        -DARROW_USE_ASAN=OFF \\\n        -DARROW_USE_TSAN=OFF \\\n        -DARROW_USE_UBSAN=OFF \\\n        -DARROW_JEMALLOC=OFF \\\n        -DARROW_BUILD_SHARED=ON \\\n        -DARROW_BUILD_STATIC=OFF && \\\n    make -j`nproc` && \\\n    make install && \\\n    cd /tmp && \\\n    rm -fr /tmp/arrow-apache-arrow-7.0.0 /tmp/apache-arrow-7.0.0.tar.gz\n\n# boost v1.73.0\nRUN cd /tmp && \\\n    wget -q https://boostorg.jfrog.io/artifactory/main/release/1.73.0/source/boost_1_73_0.tar.gz && \\\n    tar zxf boost_1_73_0.tar.gz && \\\n    cd boost_1_73_0 && \\\n    ./bootstrap.sh && \\\n    ./b2 install link=shared runtime-link=shared variant=release threading=multi || true && \\\n    cd /tmp && \\\n    rm -fr /tmp/boost_1_73_0 /tmp/boost_1_73_0.tar.gz\n\n# gflags v2.2.2\nRUN cd /tmp && \\\n    wget -q https://github.com/gflags/gflags/archive/v2.2.2.tar.gz && \\\n    tar zxvf v2.2.2.tar.gz && \\\n    cd gflags-2.2.2 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DBUILD_SHARED_LIBS=ON && \\\n    make -j && \\\n    make install && \\\n    cd /tmp && \\\n    rm -fr /tmp/v2.2.2.tar.gz /tmp/gflags-2.2.2\n\n# zlib v1.2.11\nRUN cd /tmp && \\\n    wget -q https://github.com/madler/zlib/archive/v1.2.11.tar.gz && \\\n    tar zxvf v1.2.11.tar.gz && \\\n    cd zlib-1.2.11 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DBUILD_SHARED_LIBS=ON && \\\n    make -j && \\\n    make install && \\\n    cd /tmp && \\\n    rm -fr /tmp/v1.2.11.tar.gz /tmp/zlib-1.2.11\n\n# glog v0.4.0\nRUN cd /tmp && \\\n    wget -q https://github.com/google/glog/archive/v0.4.0.tar.gz && \\\n    tar zxvf v0.4.0.tar.gz && \\\n    cd glog-0.4.0 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DBUILD_SHARED_LIBS=ON && \\\n    make -j && \\\n    make install && \\\n    cd /tmp && \\\n    rm -fr /tmp/v0.4.0.tar.gz /tmp/glog-0.4.0\n\n# protobuf v.3.13.0\nRUN cd /tmp && \\\n    wget -q https://github.com/protocolbuffers/protobuf/releases/download/v3.13.0/protobuf-all-3.13.0.tar.gz && \\\n    tar zxvf protobuf-all-3.13.0.tar.gz && \\\n    cd protobuf-3.13.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared --disable-static && \\\n    make -j && \\\n    make install && \\\n    ldconfig && \\\n    cd /tmp && \\\n    rm -fr /tmp/protobuf-all-3.13.0.tar.gz /tmp/protobuf-3.13.0\n\n# grpc v1.33.1\nRUN cd /tmp && \\\n    git clone --depth 1 --branch v1.33.1 https://github.com/grpc/grpc.git && \\\n    cd grpc && \\\n    git submodule update --init && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DBUILD_SHARED_LIBS=ON \\\n        -DgRPC_INSTALL=ON \\\n        -DgRPC_BUILD_TESTS=OFF \\\n        -DgRPC_BUILD_CSHARP_EXT=OFF \\\n        -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \\\n        -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \\\n        -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \\\n        -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \\\n        -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \\\n        -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \\\n        -DgRPC_BACKWARDS_COMPATIBILITY_MODE=ON \\\n        -DgRPC_PROTOBUF_PROVIDER=package \\\n        -DgRPC_ZLIB_PROVIDER=package \\\n        -DgRPC_SSL_PROVIDER=package \\\n        -DOPENSSL_ROOT_DIR=/usr/local \\\n        -DCMAKE_CXX_FLAGS=\"-fpermissive\" && \\\n    make -j && \\\n    make install && \\\n    cd /tmp && \\\n    rm -fr /tmp/grpc\n\n# install openmpi v4.0.5 to /opt/openmpi and link to /usr/local\nRUN cd /tmp && \\\n    wget -q https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.5.tar.gz && \\\n    tar zxvf openmpi-4.0.5.tar.gz && \\\n    cd openmpi-4.0.5 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-mpi-cxx --disable-dlopen --prefix=/opt/openmpi && \\\n    make -j`nproc` && \\\n    make install && \\\n    cp -rs /opt/openmpi/* /usr/local/ && \\\n    cd /tmp && \\\n    rm -fr /tmp/openmpi-4.0.5 /tmp/openmpi-4.0.5.tar.gz\n\n# install hdfs runtime library\nRUN cd /tmp && \\\n    git clone https://github.com/7br/libhdfs3-downstream.git && \\\n    cd libhdfs3-downstream/libhdfs3 && \\\n    mkdir -p /tmp/libhdfs3-downstream/libhdfs3/build && \\\n    cd /tmp/libhdfs3-downstream/libhdfs3/build && \\\n    cmake .. -DBUILD_SHARED_LIBS=ON \\\n             -DBUILD_HDFS3_TESTS=OFF && \\\n    make install -j && \\\n    cd /tmp && \\\n    rm -rf /tmp/libhdfs3-downstream\n\n# GIE RUNTIME\n\n# Install java and maven\nRUN yum install -y perl java-1.8.0-openjdk-devel && \\\n    yum clean all && \\\n    rm -fr /var/cache/yum\n\n# install hadoop\nRUN cd /tmp && \\\n    wget -q https://archive.apache.org/dist/hadoop/core/hadoop-2.8.4/hadoop-2.8.4.tar.gz && \\\n    tar zxf hadoop-2.8.4.tar.gz -C /usr/local && \\\n    rm -rf hadoop-2.8.4.tar.gz\n\nENV JAVA_HOME /usr/lib/jvm/java\nENV HADOOP_HOME /usr/local/hadoop-2.8.4\nENV HADOOP_CONF_DIR $HADOOP_HOME/etc/hadoop\nENV HADOOP_COMMON_LIB_NATIVE_DIR $HADOOP_HOME/lib/native\nENV PATH $PATH:$HADOOP_HOME/bin\n\nRUN bash -l -c 'echo export CLASSPATH=\"$($HADOOP_HOME/bin/hdfs classpath --glob)\" >> /etc/bashrc'\n\n# Prepare and set workspace\nRUN mkdir -p /tmp/maven /usr/share/maven/ref \\\n    && curl -fsSL -o /tmp/apache-maven.tar.gz https://apache.osuosl.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz \\\n    && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n    && rm -f /tmp/apache-maven.tar.gz \\\n    && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn \\\n    && export LD_LIBRARY_PATH=$(echo \"$LD_LIBRARY_PATH\" | sed \"s/::/:/g\")\n\n# patchelf\nRUN cd /tmp && \\\n    git clone --depth=1 https://github.com/NixOS/patchelf.git && \\\n    cd patchelf && \\\n    ./bootstrap.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install -j && \\\n    rm -rf patchelf/\n\n# kubectl v1.19.2\nRUN cd /tmp && export KUBE_VER=v1.19.2 && \\\n    curl -f -LO https://storage.googleapis.com/kubernetes-release/release/${KUBE_VER}/bin/linux/amd64/kubectl && \\\n    chmod +x ./kubectl && \\\n    cd /tmp && \\\n    mv ./kubectl /usr/local/bin/kubectl\n\n# install python3.9 deps for all\nRUN /opt/python/cp39-cp39/bin/pip3 install -U pip && \\\n    /opt/python/cp39-cp39/bin/pip3 --no-cache-dir install auditwheel==5.0.0 daemons etcd-distro grpcio-tools gremlinpython \\\n        hdfs3 fsspec oss2 s3fs ipython kubernetes libclang networkx==2.4 numpy pandas parsec pycryptodome \\\n        pyorc pytest scipy scikit_learn wheel && \\\n    /opt/python/cp39-cp39/bin/pip3 --no-cache-dir install Cython --pre -U\n\n# shanghai zoneinfo\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \\\n    echo '$TZ' > /etc/timezone\n\n# for programming output\nRUN localedef -c -f UTF-8 -i en_US en_US.UTF-8\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'\n\nENV PATH=${PATH}:/usr/local/go/bin:/opt/python/cp39-cp39/bin\nENV RUST_BACKTRACE=1\n\n# change user: graphscope\nRUN useradd -m graphscope -u 1001 \\\n    && echo 'graphscope ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\nUSER graphscope\nWORKDIR /home/graphscope\nENV PATH=${PATH}:/home/graphscope/.local/bin\nENV LIBCLANG_PATH=/opt/llvm11/lib\nENV LLVM_CONFIG_PATH=/opt/llvm11/bin/llvm-config\n\n# Rust\nRUN curl -sf -L https://static.rust-lang.org/rustup.sh | \\\n        sh -s -- -y --profile minimal --default-toolchain stable && \\\n    echo \"source ~/.cargo/env\" >> ~/.bashrc && \\\n    source /home/graphscope/.cargo/env && \\\n    rustup component add rustfmt\n"
}