{
  "startTime": 1674251496622,
  "endTime": 1674251498214,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 17,
        "columnStart": 21,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 92
      }
    }
  ],
  "repairedDockerfile": "# the graphscope-runtime image is based on ubuntu-20, including all necessary runtime\n# dependencies for graphscope.\n\nFROM ubuntu:20.04\n\n# shanghai zoneinfo\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# apt install dependencies\n# openjdk-8-jdk perl maven for GIE\nRUN apt update -y && apt install --no-install-recommends -y \\\n    ca-certificates ccache cmake curl etcd git \\\n    libbrotli-dev libbz2-dev libcurl4-openssl-dev libevent-dev libgflags-dev \\\n    libboost-all-dev libgoogle-glog-dev libgrpc-dev libgrpc++-dev libgtest-dev libgsasl7-dev \\\n    libtinfo5 libkrb5-dev liblz4-dev libprotobuf-dev librdkafka-dev libre2-dev libsnappy-dev \\\n    libssl-dev libunwind-dev libutf8proc-dev libxml2-dev libz-dev libzstd-dev lsb-release maven openjdk-8-jdk \\\n    perl protobuf-compiler-grpc python3-pip sudo telnet uuid-dev vim wget zip zlib1g-dev && \\\n  rm -fr /var/lib/apt/lists/*\n\n# rust\nRUN cd /tmp && \\\n  curl -sf -L https://static.rust-lang.org/rustup.sh | \\\n      sh -s -- -y --profile minimal --default-toolchain 1.48.0 && \\\n  echo \"source ~/.cargo/env\" >> ~/.bashrc\n\n# apache arrow 3.0.0\nRUN wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \\\n    apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \\\n    apt update -y && \\\n    apt install --no-install-recommends -y libarrow-dev=3.0.0-1 libarrow-python-dev=3.0.0-1 && \\\n    rm ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && rm -rf /var/lib/apt/lists/*;\n\n# pip dependencies\nRUN pip3 install --no-cache-dir -U pip && \\\n  pip3 --no-cache-dir install auditwheel daemons grpcio-tools gremlinpython hdfs3 fsspec oss2 s3fs ipython kubernetes \\\n    libclang networkx==2.4 numpy pandas parsec pycryptodome pyorc pytest scipy scikit_learn wheel && \\\n  pip3 --no-cache-dir install Cython --pre -U\n\nENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\nENV PATH=${JAVA_HOME}/bin:${PATH}\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib\n\n# for programming output\nENV LC_ALL=C\n"
}