{
  "startTime": 1674251177499,
  "endTime": 1674251178514,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 217,
        "lineEnd": 217,
        "columnStart": 7,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\n# The federatedscope-jupyterhub image includes all runtime stuffs of federatedscope,\n# with customized miniconda, required packages installed and jupyter-singleuser running.\n\nARG ROOT_CONTAINER=nvidia/cuda:11.3.1-runtime-ubuntu20.04\n\nFROM $ROOT_CONTAINER\n\nLABEL maintainer=\"FederatedScope\"\nARG NB_USER=\"jovyan\"\nARG NB_UID=\"1000\"\nARG NB_GID=\"100\"\n\n# Fix: https://github.com/hadolint/hadolint/wiki/DL4006\n# Fix: https://github.com/koalaman/shellcheck/wiki/SC3014\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nUSER root\n\n# ***************************************\n# Install JupyterHub\n# ***************************************\n\n# Install all OS dependencies for notebook server that starts but lacks all\n# features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update --yes && \\\n    # - apt-get upgrade is run to patch known vulnerabilities in apt-get packages as\n    #   the ubuntu base image is rebuilt too seldom sometimes (less than once a month)\n    apt-get upgrade --yes && \\\n    apt-get install --yes --no-install-recommends \\\n    ca-certificates \\\n    fonts-liberation \\\n    locales \\\n    # - pandoc is used to convert notebooks to html files\n    #   it's not present in arm64 ubuntu image, so we install it here\n    pandoc \\\n    # - run-one - a wrapper script that runs no more\n    #   than one unique  instance  of  some  command with a unique set of arguments,\n    #   we use `run-one-constantly` to support `RESTARTABLE` option\n    run-one \\\n    sudo \\\n    # - tini is installed as a helpful container entrypoint that reaps zombie\n    #   processes and such of the actual executable we want to start, see\n    #   https://github.com/krallin/tini#why-tini for details.\n    tini \\\n    wget && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* && \\\n    echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n    locale-gen\n\n# Configure environment\nENV CONDA_DIR=/opt/conda \\\n    SHELL=/bin/bash \\\n    NB_USER=\"${NB_USER}\" \\\n    NB_UID=${NB_UID} \\\n    NB_GID=${NB_GID} \\\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US.UTF-8\nENV PATH=\"${CONDA_DIR}/bin:${PATH}\" \\\n    HOME=\"/home/${NB_USER}\"\n\n# Copy a script that we will use to correct permissions after running certain commands\nCOPY fix-permissions /usr/local/bin/fix-permissions\nRUN chmod a+rx /usr/local/bin/fix-permissions\n\n# Enable prompt color in the skeleton .bashrc before creating the default NB_USER\n# hadolint ignore=SC2016\nRUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc && \\\n   # Add call to conda init script see https://stackoverflow.com/a/58081608/4413446\n   echo 'eval \"$(command conda shell.bash hook 2> /dev/null)\"' >> /etc/skel/.bashrc\n\n# Create NB_USER with name jovyan user with UID=1000 and in the 'users' group\n# and make sure these dirs are writable by the `users` group.\nRUN echo \"auth requisite pam_deny.so\" >> /etc/pam.d/su && \\\n    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \\\n    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \\\n    useradd -l -m -s /bin/bash -N -u \"${NB_UID}\" \"${NB_USER}\" && \\\n    mkdir -p \"${CONDA_DIR}\" && \\\n    chown \"${NB_USER}:${NB_GID}\" \"${CONDA_DIR}\" && \\\n    chmod g+w /etc/passwd && \\\n    fix-permissions \"${HOME}\" && \\\n    fix-permissions \"${CONDA_DIR}\"\n\nUSER ${NB_UID}\nARG PYTHON_VERSION=default\n\n# Setup work directory for backward-compatibility\nRUN mkdir \"/home/${NB_USER}/work\" && \\\n    fix-permissions \"/home/${NB_USER}\"\n\n# Install conda as jovyan and check the sha256 sum provided on the download site\nWORKDIR /tmp\n\n# CONDA_MIRROR is a mirror prefix to speed up downloading\n# For example, people from mainland China could set it as\n# https://mirrors.tuna.tsinghua.edu.cn/github-release/conda-forge/miniforge/LatestRelease\nARG CONDA_MIRROR=https://github.com/conda-forge/miniforge/releases/latest/download\n\n# ---- Miniforge installer ----\n# Check https://github.com/conda-forge/miniforge/releases\n# Package Manager and Python implementation to use (https://github.com/conda-forge/miniforge)\n# We're using Mambaforge installer, possible options:\n# - conda only: either Miniforge3 to use Python or Miniforge-pypy3 to use PyPy\n# - conda + mamba: either Mambaforge to use Python or Mambaforge-pypy3 to use PyPy\n# Installation: conda, mamba, pip\nRUN set -x && \\\n    # Miniforge installer\n    miniforge_arch=$(uname -m) && \\\n    miniforge_installer=\"Mambaforge-Linux-${miniforge_arch}.sh\" && \\\n    wget --quiet \"${CONDA_MIRROR}/${miniforge_installer}\" && \\\n    /bin/bash \"${miniforge_installer}\" -f -b -p \"${CONDA_DIR}\" && \\\n    rm \"${miniforge_installer}\" && \\\n    # Conda configuration see https://conda.io/projects/conda/en/latest/configuration.html\n    conda config --system --set auto_update_conda false && \\\n    conda config --system --set show_channel_urls true && \\\n    if [[ \"${PYTHON_VERSION}\" != \"default\" ]]; then mamba install --quiet --yes python=\"${PYTHON_VERSION}\"; fi && \\\n    # Pin major.minor version of python\n    mamba list python | grep '^python ' | tr -s ' ' | cut -d ' ' -f 1,2 >> \"${CONDA_DIR}/conda-meta/pinned\" && \\\n    # Using conda to update all packages: https://github.com/mamba-org/mamba/issues/1092\n    conda update --all --quiet --yes && \\\n    conda clean --all -f -y && \\\n    rm -rf \"/home/${NB_USER}/.cache/yarn\" && \\\n    fix-permissions \"${CONDA_DIR}\" && \\\n    fix-permissions \"/home/${NB_USER}\"\n\n# Using fixed version of mamba in arm, because the latest one has problems with arm under qemu\n# See: https://github.com/jupyter/docker-stacks/issues/1539\nRUN set -x && \\\n    arch=$(uname -m) && \\\n    if [ \"${arch}\" == \"aarch64\" ]; then \\\n        mamba install --quiet --yes \\\n            'mamba<0.18' && \\\n            mamba clean --all -f -y && \\\n            fix-permissions \"${CONDA_DIR}\" && \\\n            fix-permissions \"/home/${NB_USER}\"; \\\n    fi;\n\n# Install Jupyter Notebook, Lab, and Hub\n# Generate a notebook server config\n# Cleanup temporary files\n# Correct permissions\n# Do all this in a single RUN command to avoid duplicating all of the\n# files across image layers when the permissions change\nRUN mamba install --quiet --yes \\\n    'notebook' \\\n    'jupyterhub' \\\n    'jupyterlab' && \\\n    mamba clean --all -f -y && \\\n    npm cache clean --force && \\\n    jupyter notebook --generate-config && \\\n    jupyter lab clean && \\\n    rm -rf \"/home/${NB_USER}/.cache/yarn\" && \\\n    fix-permissions \"${CONDA_DIR}\" && \\\n    fix-permissions \"/home/${NB_USER}\"\n\nEXPOSE 8888\n\n# Configure container startup\nENTRYPOINT [\"tini\", \"-g\", \"--\"]\nCMD [\"start-notebook.sh\"]\n\n# Copy local files as late as possible to avoid cache busting\nCOPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/\n# Currently need to have both jupyter_notebook_config and jupyter_server_config to support classic and lab\nCOPY jupyter_server_config.py /etc/jupyter/\n\n# Fix permissions on /etc/jupyter as root\nUSER root\n\n# Legacy for Jupyter Notebook Server, see: [#1205](https://github.com/jupyter/docker-stacks/issues/1205)\nRUN sed -re \"s/c.ServerApp/c.NotebookApp/g\" \\\n    /etc/jupyter/jupyter_server_config.py > /etc/jupyter/jupyter_notebook_config.py && \\\n    fix-permissions /etc/jupyter/\n\n# HEALTHCHECK documentation: https://docs.docker.com/engine/reference/builder/#healthcheck\n# This healtcheck works well for `lab`, `notebook`, `nbclassic`, `server` and `retro` jupyter commands\n# https://github.com/jupyter/docker-stacks/issues/915#issuecomment-1068528799\nHEALTHCHECK  --interval=15s --timeout=3s --start-period=5s --retries=3 \\\n    CMD wget -O- --no-verbose --tries=1 http://localhost:8888/api || exit 1\n\n# Switch back to jovyan to avoid accidental container runs as root\nUSER ${NB_UID}\n\n# ***************************************\n# Install FederatedScope dependencies\n# ***************************************\n\nWORKDIR \"${HOME}\"\n\nUSER root\n# change bash as default\nSHELL [\"/bin/bash\", \"-c\"]\n# shanghai zoneinfo\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# install packages required by federatedscope\nRUN conda update -y conda \\\n    && conda config --add channels conda-forge\n# basic machine learning env\nRUN conda install -y numpy=1.21.2 scikit-learn=1.0.2 scipy=1.7.3 pandas=1.4.1 -c scikit-learn \\\n    && conda clean -a -y\n# basic torch env\nRUN conda install -y pytorch=1.10.1 torchvision=0.11.2 torchaudio=0.10.1 cudatoolkit=11.3 -c pytorch -c conda-forge \\\n    && conda install -y torchtext -c pytorch \\\n    && conda clean -a -y\n# gfl\nRUN conda install -y pyg=2.0.4 -c pyg  \\\n    && conda install -y rdkit=2021.09.4=py39hccf6a74_0 -c conda-forge \\\n    && conda install -y nltk \\\n    && conda clean -a -y\n# communications and auxiliaries\nRUN conda install -y wandb -c conda-forge \\\n    && pip install --no-cache-dir grpcio grpcio-tools protobuf==3.19.4 setuptools==61.2.0 \\\n    && conda clean -a -y\n\nUSER ${NB_UID}"
}