{
  "startTime": 1674250138730,
  "endTime": 1674250139585,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 193,
        "lineEnd": 193,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020-2021 Alibaba Group Holding Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM quay.io/pypa/manylinux2010_x86_64_centos6_no_vsyscall\n\n# target: docker.pkg.github.com/v6d-io/v6d/vineyardd-alpine-builder:20210929\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nENV DEVTOOLSET_ROOTPATH=\"/opt/rh/devtoolset-8/root\"\nENV PATH=\"${DEVTOOLSET_ROOTPATH}/usr/bin:${PATH}\"\nENV LD_LIBRARY_PATH_ARG=\"${DEVTOOLSET_ROOTPATH}/usr/lib64:${DEVTOOLSET_ROOTPATH}/usr/lib:${DEVTOOLSET_ROOTPATH}/usr/lib64/dyninst:${DEVTOOLSET_ROOTPATH}/usr/lib/dyninst:/usr/local/lib64:/usr/local/lib\"\n\nENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig\nENV LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8\n\nCOPY build_scripts/fixup-mirrors.sh /usr/local/sbin/fixup-mirrors\n\n# install base repo and deps\nRUN echo \"multilib_policy=best\" >> /etc/yum.conf && \\\n    fixup-mirrors && \\\n    yum -y update && \\\n    yum -y install https://archives.fedoraproject.org/pub/archive/epel/6/x86_64/epel-release-6-8.noarch.rpm && \\\n    fixup-mirrors && \\\n    yum -y install centos-release-scl && \\\n    fixup-mirrors && \\\n    yum -y install devtoolset-8-binutils devtoolset-8-gcc devtoolset-8-gcc-c++ && \\\n    localedef -i en_US -f UTF-8 en_US.UTF-8 && \\\n    yum -y install curl git wget m4 && \\\n    yum clean all && \\\n\trm -rf /var/cache/yum\n\n# install cmake\nRUN cd /tmp && \\\n    wget https://cmake.org/files/v3.19/cmake-3.19.5-Linux-x86_64.sh && \\\n    bash cmake-3.19.5-Linux-x86_64.sh --skip-license --prefix=/usr && \\\n    rm cmake-3.19.5-Linux-x86_64.sh\n\n# install apache-arrow\nRUN cd /tmp && \\\n    git clone https://github.com/apache/arrow.git --depth=1 && \\\n    cd arrow && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../cpp \\\n        -DARROW_COMPUTE=OFF \\\n        -DARROW_WITH_UTF8PROC=OFF \\\n        -DARROW_CSV=ON \\\n        -DARROW_CUDA=OFF \\\n        -DARROW_DATASET=OFF \\\n        -DARROW_FILESYSTEM=OFF \\\n        -DARROW_FLIGHT=OFF \\\n        -DARROW_GANDIVA=OFF \\\n        -DARROW_GANDIVA_JAVA=OFF \\\n        -DARROW_HDFS=OFF \\\n        -DARROW_HIVESERVER2=OFF \\\n        -DARROW_JSON=OFF \\\n        -DARROW_ORC=OFF \\\n        -DARROW_PARQUET=OFF \\\n        -DARROW_PLASMA=OFF \\\n        -DARROW_PLASMA_JAVA_CLIENT=OFF \\\n        -DARROW_PYTHON=OFF \\\n        -DARROW_S3=OFF \\\n        -DARROW_WITH_BZ2=OFF \\\n        -DARROW_WITH_ZLIB=OFF \\\n        -DARROW_WITH_LZ4=OFF \\\n        -DARROW_WITH_SNAPPY=OFF \\\n        -DARROW_WITH_ZSTD=OFF \\\n        -DARROW_WITH_BROTLI=OFF \\\n        -DARROW_IPC=ON \\\n        -DARROW_BUILD_BENCHMARKS=OFF \\\n        -DARROW_BUILD_EXAMPLES=OFF \\\n        -DARROW_BUILD_INTEGRATION=OFF \\\n        -DARROW_BUILD_UTILITIES=OFF \\\n        -DARROW_BUILD_TESTS=OFF \\\n        -DARROW_ENABLE_TIMING_TESTS=OFF \\\n        -DARROW_FUZZING=OFF \\\n        -DARROW_USE_ASAN=OFF \\\n        -DARROW_USE_TSAN=OFF \\\n        -DARROW_USE_UBSAN=OFF \\\n        -DARROW_JEMALLOC=OFF \\\n        -DARROW_BUILD_SHARED=OFF \\\n        -DARROW_BUILD_STATIC=ON && \\\n    make install -j`nproc` && \\\n    cd /tmp && \\\n    rm -rf arrow\n\n# install boost\nRUN cd /tmp && \\\n    wget https://boostorg.jfrog.io/artifactory/main/release/1.75.0/source/boost_1_75_0.tar.gz && \\\n    tar zxf boost_1_75_0.tar.gz && \\\n    cd boost_1_75_0 && \\\n    ./bootstrap.sh && \\\n    ./b2 install -j`nproc` link=static runtime-link=static variant=release threading=multi \\\n        --with-atomic \\\n        --with-chrono \\\n        --with-date_time \\\n        --with-filesystem \\\n        --with-random \\\n        --with-system \\\n        --with-thread && \\\n    cd /tmp && \\\n    rm -rf boost_1_75_0.tar.gz boost_1_75_0\n\n# install gflags\nRUN cd /tmp && \\\n    wget https://github.com/gflags/gflags/archive/v2.2.2.tar.gz -O gflags-v2.2.2.tar.gz && \\\n    tar zxf gflags-v2.2.2.tar.gz && \\\n    cd gflags-2.2.2 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DBUILD_SHARED_LIBS=OFF && \\\n    make install -j`nproc` && \\\n    cd /tmp && \\\n    rm -rf gflags-v2.2.2.tar.gz gflags-2.2.2\n\n# install glog\nRUN cd /tmp && \\\n    wget https://github.com/google/glog/archive/v0.5.0.tar.gz -O glog-v0.5.0.tar.gz && \\\n    tar zxf glog-v0.5.0.tar.gz && \\\n    cd glog-0.5.0/ && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DBUILD_SHARED_LIBS=OFF && \\\n    make install -j`nproc` && \\\n    cd /tmp && \\\n    rm -rf glog-v0.5.0.tar.gz glog-0.5.0\n\n# install libz\n#\n# note: remove shared libs\nRUN cd /tmp && \\\n    wget https://zlib.net/zlib-1.2.11.tar.gz && \\\n    tar zxf zlib-1.2.11.tar.gz && \\\n    cd zlib-1.2.11 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DBUILD_SHARED_LIBS=OFF && \\\n    make install -j`nproc` && \\\n    rm -rf /usr/local/lib/libz.so* && \\\n    cd /tmp && \\\n    rm -rf zlib-1.2.11.tar.gz zlib-1.2.11\n\n# install openssl: boringssl doesn't bring headers when installing\nRUN cd /tmp && \\\n    wget https://www.openssl.org/source/openssl-1.1.1j.tar.gz && \\\n    tar zxf openssl-1.1.1j.tar.gz && \\\n    cd openssl-1.1.1j && \\\n    ./config -no-shared -no-tests && \\\n    make -j`nproc` && make install -j`nproc` || true && \\\n    cd /tmp && \\\n    rm -rf openssl-1.1.1j.tar.gz openssl-1.1.1j\n\n# install protobuf & grpc: v1.36.x\nRUN cd /tmp && \\\n    git clone https://github.com/grpc/grpc.git -b v1.36.x --depth=1 && \\\n    cd grpc && \\\n    git submodule update --init && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DBUILD_SHARED_LIBS=OFF \\\n         -DgRPC_INSTALL=ON \\\n         -DgRPC_BUILD_TESTS=OFF \\\n         -DgRPC_BUILD_CSHARP_EXT=OFF \\\n         -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \\\n         -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \\\n         -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \\\n         -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \\\n         -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \\\n         -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \\\n         -DgRPC_SSL_PROVIDER=package \\\n         -DgRPC_ZLIB_PROVIDER=package \\\n         -DgRPC_BACKWARDS_COMPATIBILITY_MODE=ON && \\\n    make install -j`nproc` && \\\n    cd /tmp && \\\n    rm -rf grpc/\n\n# install autoconf (requires 2.68)\nRUN cd /tmp && \\\n    wget https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz && \\\n    tar zxf autoconf-2.69.tar.gz && \\\n    cd autoconf-2.69 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install -j`nproc` && \\\n    rm -rf autoconf-2.69 autoconf-2.69.tar.gz\n"
}