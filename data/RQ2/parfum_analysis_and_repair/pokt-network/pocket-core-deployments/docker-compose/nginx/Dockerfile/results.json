{
  "startTime": 1674251269206,
  "endTime": 1674251270113,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 72
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.11.5\n# REF: https://github.com/ekino/docker-nginx-brotli/blob/master/Dockerfile\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\n\nENV NGINX_VERSION 1.18.0\nENV NGX_BROTLI_COMMIT 8104036af9cff4b1d34f22d00ba857e2a93a243c\nENV NAXSI_VERSION 0.56\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8\\ \n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/var/log/nginx/error.log \\\n\t\t--http-log-path=/var/log/nginx/access.log \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=nginx \\\n\t\t--group=nginx \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module=dynamic \\\n\t\t--with-http_image_filter_module=dynamic \\\n\t\t--with-http_geoip_module=dynamic \\\n\t\t--with-http_perl_module=dynamic \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-stream_ssl_preread_module \\\n\t\t--with-stream_realip_module \\\n\t\t--with-stream_geoip_module=dynamic \\\n\t\t--with-http_slice_module \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-compat \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\t--add-module=/usr/src/ngx_brotli \\\n\t\t--add-module=/tmp/naxsi-$NAXSI_VERSION/naxsi_src/ \\\n\t\" \\\n\t&& addgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg1 \\\n\t\tlibxslt-dev \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t\tperl-dev \\\n        clang \\\n        gettext \\\n\t\tcurl \\\n\t&& apk add --no-cache --virtual .brotli-build-deps \\\n\t\tautoconf \\\n\t\tlibtool \\\n\t\tautomake \\\n\t\tgit \\\n\t\tg++ \\\n\t\tcmake \\\n\t# Download naxsi module\n\t&& cd /tmp/ \\\n\t&& curl -fSL https://github.com/nbs-system/naxsi/archive/$NAXSI_VERSION.tar.gz -o naxsi.tar.gz \\\n\t&& tar -xzf naxsi.tar.gz \\\n\t&& mkdir -p /usr/src \\\n\t&& cd /usr/src \\\n\t&& git clone --recursive https://github.com/eustas/ngx_brotli.git \\\n\t&& cd ngx_brotli \\\n\t&& git checkout -b $NGX_BROTLI_COMMIT $NGX_BROTLI_COMMIT \\\n\t&& cd .. \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \\\n        && sha512sum nginx.tar.gz nginx.tar.gz.asc \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver ipv4.ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEYS\" \\\n\t&& gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& CC=clang CFLAGS=\"-pipe -O\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t&& mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n\t&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n\t# && ./configure $CONFIG \\\n\t&& CC=clang CFLAGS=\"-pipe -O\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& mkdir /etc/nginx/conf.d/ \\\n\t&& mkdir -p /usr/share/nginx/html/ \\\n\t&& install -m644 \\\n        /tmp/naxsi-$NAXSI_VERSION/naxsi_config/naxsi_core.rules \\\n        /etc/nginx \\\n\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t&& install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n\t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& strip /usr/lib/nginx/modules/*.so \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\t&& rm -rf /tmp/naxsi-$NAXSI_VERSION \\\n\t&& rm -rf /usr/src/ngx_brotli \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps tzdata $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .brotli-build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log \\\n        # create a docker-entrypoint.d directory\n     && mkdir /docker-entrypoint.d\n\nCOPY docker-entrypoint.sh /\nCOPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d\nCOPY 20-envsubst-on-templates.sh /docker-entrypoint.d\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\n\nEXPOSE 80 443\n\nSTOPSIGNAL SIGTERM\n\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}