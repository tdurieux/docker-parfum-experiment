{
  "startTime": 1674254214131,
  "endTime": 1674254215532,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM node:16-alpine AS react\n# AWS CodeBuild fails due to Docker's pull rate limit, using ECR.\nFROM public.ecr.aws/bitnami/node:16 AS react\nWORKDIR /usr/src/app\nCOPY web/react/package*.json ./\nRUN npm install && npm cache clean --force;\nCOPY web/react ./\nRUN npm run build\n\n# FROM node:16-alpine AS bootstrap\nFROM public.ecr.aws/bitnami/node:16 AS bootstrap\nWORKDIR /usr/src/app\nCOPY web/bootstrap/package*.json ./\nRUN npm install && npm cache clean --force;\nCOPY cmd/server/template ./ref/\nCOPY --from=react /usr/src/app/build ./ref/\nCOPY web/bootstrap ./\nRUN npm run css\n\n# Build container for server\n# FROM golang:1.17-alpine AS server\nFROM public.ecr.aws/bitnami/golang:1.17 AS server\nWORKDIR /go/src/app\nCOPY go.* ./\nCOPY internal ./internal\nRUN go mod download\nCOPY --from=react /usr/src/app/build ./static/build/\nCOPY --from=bootstrap /usr/src/app/build ./static/build/\nCOPY cmd/server ./\n# Flag info https://golang.org/cmd/link/\nRUN CGO_ENABLED=0 GOOS=linux go build -ldflags '-s' -o server .\n\nFROM scratch\nCOPY --from=server /go/src/app/server /server\nEXPOSE 8080\nCMD [\"/server\"]\n"
}