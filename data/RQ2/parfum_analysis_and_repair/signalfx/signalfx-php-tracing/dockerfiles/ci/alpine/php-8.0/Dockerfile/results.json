{
  "startTime": 1674250472256,
  "endTime": 1674250473371,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 5,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM datadog/dd-trace-ci:alpine AS base\n\nARG phpVersion\nENV PHP_INSTALL_DIR_DEBUG_ZTS=${PHP_INSTALL_DIR}/${phpVersion}-debug-zts\nENV PHP_INSTALL_DIR_DEBUG_NTS=${PHP_INSTALL_DIR}/${phpVersion}-debug\nENV PHP_INSTALL_DIR_NTS=${PHP_INSTALL_DIR}/${phpVersion}\nENV PHP_VERSION=${phpVersion}\n\nFROM base as build\nARG phpTarGzUrl\nARG phpSha256Hash\nRUN set -eux; \\\n    curl -fsSL -o /tmp/php.tar.gz \"${phpTarGzUrl}\"; \\\n    ( echo \"${phpSha256Hash}  /tmp/php.tar.gz\" | sha256sum -c -) \\\n    tar xf /tmp/php.tar.gz -C \"${PHP_SRC_DIR}\" --strip-components=1; \\\n    rm -f /tmp/php.tar.gz; \\\n    cd ${PHP_SRC_DIR}; \\\n    ./buildconf --force;\nCOPY configure.sh /home/circleci\n\nFROM build as php-debug-zts\n# TODO Fix Asan build\n#ENV CFLAGS=\"-fsanitize=address -DZEND_TRACK_ARENA_ALLOC\"\n#ENV LDFLAGS=\"-fsanitize=address\"\nRUN set -eux; \\\n    mkdir -p /tmp/build-php && cd /tmp/build-php; \\\n    /home/circleci/configure.sh \\\n        --enable-debug \\\n        --enable-zts \\\n        --prefix=${PHP_INSTALL_DIR_DEBUG_ZTS} \\\n        --with-config-file-path=${PHP_INSTALL_DIR_DEBUG_ZTS} \\\n        --with-config-file-scan-dir=${PHP_INSTALL_DIR_DEBUG_ZTS}/conf.d \\\n    ; \\\n    make -j \"$((`nproc`+1))\"; \\\n    make install; \\\n    mkdir -p ${PHP_INSTALL_DIR_DEBUG_ZTS}/conf.d;\n\nFROM build as php-debug\nRUN set -eux; \\\n    mkdir -p /tmp/build-php && cd /tmp/build-php; \\\n    /home/circleci/configure.sh \\\n        --enable-debug \\\n        --prefix=${PHP_INSTALL_DIR_DEBUG_NTS} \\\n        --with-config-file-path=${PHP_INSTALL_DIR_DEBUG_NTS} \\\n        --with-config-file-scan-dir=${PHP_INSTALL_DIR_DEBUG_NTS}/conf.d; \\\n    make -j \"$((`nproc`+1))\"; \\\n    make install; \\\n    mkdir -p ${PHP_INSTALL_DIR_DEBUG_NTS}/conf.d;\n\nFROM build as php-nts\nRUN set -eux; \\\n    mkdir -p /tmp/build-php && cd /tmp/build-php; \\\n    /home/circleci/configure.sh \\\n        --prefix=${PHP_INSTALL_DIR_NTS} \\\n        --with-config-file-path=${PHP_INSTALL_DIR_NTS} \\\n        --with-config-file-scan-dir=${PHP_INSTALL_DIR_NTS}/conf.d; \\\n    make -j \"$((`nproc`+1))\"; \\\n    make install; \\\n    mkdir -p ${PHP_INSTALL_DIR_NTS}/conf.d;\n\nFROM base as final\nCOPY --chown=circleci:circleci --from=build $PHP_SRC_DIR $PHP_SRC_DIR\nCOPY --chown=circleci:circleci --from=php-debug-zts $PHP_INSTALL_DIR_DEBUG_ZTS $PHP_INSTALL_DIR_DEBUG_ZTS\nCOPY --chown=circleci:circleci --from=php-debug $PHP_INSTALL_DIR_DEBUG_NTS $PHP_INSTALL_DIR_DEBUG_NTS\nCOPY --chown=circleci:circleci --from=php-nts $PHP_INSTALL_DIR_NTS $PHP_INSTALL_DIR_NTS\n\nRUN set -eux; \\\n    for phpVer in $(ls ${PHP_INSTALL_DIR}); \\\n    do \\\n        echo \"Install exts for PHP $phpVer...\"; \\\n        switch-php ${phpVer}; \\\n        iniDir=$(php -i | awk -F\"=> \" '/Scan this dir for additional .ini files/ {print $2}'); \\\n        \\\n        yes '' | pecl install apcu; echo \"extension=apcu.so\" >> ${iniDir}/apcu.ini; \\\n        pecl install ast; echo \"extension=ast.so\" >> ${iniDir}/ast.ini; \\\n        #yes 'no' | pecl install memcached; \\ # TODO Does not support PHP 8 yet\n        pecl install mongodb; echo \"extension=mongodb.so\" >> ${iniDir}/mongodb.ini; \\\n        pecl install redis-5.3.2; echo \"extension=redis.so\" >> ${iniDir}/redis.ini; \\\n        # Xdebug is disabled by default\n        pecl install xdebug-3.0.0; \\\n        cd $(php-config --extension-dir); \\\n        mv xdebug.so xdebug-3.0.0.so; \\\n    done;\n\nRUN set -eux; \\\n# TODO Remove this when apcu supports ZTS on Alpine\n# Causes error: \"_tsrm_ls_cache: initial-exec TLS resolves to dynamic definition\"\n    rm /opt/php/8.0-debug-zts/conf.d/apcu.ini; \\\n# Set the default PHP version\n    switch-php ${PHP_VERSION}-debug;\n\n# Install Composer\nCOPY --from=composer:1 /usr/bin/composer /usr/local/bin/composer\n\nCOPY welcome /etc/motd\n\nCMD [\"php-fpm\", \"-F\"]\n"
}