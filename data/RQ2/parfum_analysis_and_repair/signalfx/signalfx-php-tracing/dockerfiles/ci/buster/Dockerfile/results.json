{
  "startTime": 1674251976619,
  "endTime": 1674251977508,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 15,
        "columnEnd": 135
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 15,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 15,
        "columnEnd": 129
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 5,
        "columnEnd": 87
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 5,
        "columnEnd": 71
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 5,
        "columnEnd": 71
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 5,
        "columnEnd": 104
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster AS base\n\nENV LANG=C.UTF-8\nENV DEBIAN_FRONTEND=noninteractive\n\nENV RUNTIME_DEPS \\\n    apache2 \\\n    apache2-dev \\\n    ca-certificates \\\n    clang-format \\\n    curl \\\n    debian-goodies \\\n    gdb \\\n    git \\\n    less \\\n    libcurl4-openssl-dev \\\n    libedit-dev \\\n    libmcrypt-dev \\\n    libmemcached-dev \\\n    libonig-dev \\\n    libpq-dev \\\n    libsodium-dev \\\n    libsqlite3-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libzip-dev \\\n    netbase \\\n    nginx \\\n    sudo \\\n    unzip \\\n    valgrind \\\n    vim \\\n    xz-utils \\\n    zip \\\n    zlib1g-dev\n\nENV PHPIZE_DEPS \\\n    autoconf \\\n    bison \\\n    dpkg-dev \\\n    file \\\n    g++ \\\n    gcc \\\n    libc-dev \\\n    make \\\n    pkg-config \\\n    re2c\n\nRUN set -eux; \\\n# Set timezone to UTC by default\n    ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime; \\\n\n# Use unicode\n    locale-gen C.UTF-8 || true; \\\n\n# Core Dumps\n    ulimit -c unlimited; \\\n\n# Ensure debug symbols are available\n    echo \"deb http://deb.debian.org/debian-debug/ buster-debug main\" | \\\n        tee -a /etc/apt/sources.list; \\\n\n# prevent Debian's PHP packages from being installed\n# https://github.com/docker-library/php/pull/542\n    { \\\n        echo 'Package: php*'; \\\n        echo 'Pin: release *'; \\\n        echo 'Pin-Priority: -1'; \\\n    } > /etc/apt/preferences.d/no-debian-php; \\\n\n# persistent / runtime deps\n    apt-get update; \\\n    apt-get install -y --no-install-recommends \\\n        $PHPIZE_DEPS \\\n        $RUNTIME_DEPS; rm -rf /var/lib/apt/lists/*; \\\n\n# circleci user + sudo\n    groupadd --gid 3434 circleci; \\\n        useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci; \\\n        echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci; \\\n        echo 'Defaults    env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep; \\\n\n# Allow nginx to be run as non-root for tests\n    chown -R circleci:circleci /var/log/nginx/ /var/lib/nginx/; \\\n# Install CMake\n    CMAKE_VERSION=\"3.20.1\"; \\\n    CMAKE_SHA256=\"b8c141bd7a6d335600ab0a8a35e75af79f95b837f736456b5532f4d717f20a09\"; \\\n    cd /tmp && curl -f -OL https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz; \\\n    ( echo \"${CMAKE_SHA256}  cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz\" | sha256sum -c -) \\\n    mkdir -p /opt/cmake/${CMAKE_VERSION}; \\\n    tar --strip-components 1 -C /opt/cmake/${CMAKE_VERSION} -xf /tmp/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz; \\\n# Install Catch2\n    CATCH2_VERSION=\"2.13.5\"; \\\n    CATCH2_SHA256=\"7fee7d643599d10680bfd482799709f14ed282a8b7db82f54ec75ec9af32fa76\"; \\\n    cd /tmp && curl -f -OL https://github.com/catchorg/Catch2/archive/v${CATCH2_VERSION}.tar.gz; \\\n    ( echo \"${CATCH2_SHA256}  v${CATCH2_VERSION}.tar.gz\" | sha256sum -c -) \\\n    mkdir catch2 && cd catch2; \\\n    tar -xf ../v${CATCH2_VERSION}.tar.gz --strip 1; \\\n    /opt/cmake/${CMAKE_VERSION}/bin/cmake -Bbuild -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=/opt/catch2; \\\n    /opt/cmake/${CMAKE_VERSION}/bin/cmake --build build/ --target install; \\\n# Install lcov\n    LCOV_VERSION=\"1.15\"; \\\n    LCOV_SHA256=\"c1cda2fa33bec9aa2c2c73c87226cfe97de0831887176b45ee523c5e30f8053a\"; \\\n    cd /tmp && curl -f -OL https://github.com/linux-test-project/lcov/releases/download/v${LCOV_VERSION}/lcov-${LCOV_VERSION}.tar.gz; \\\n    ( echo \"${LCOV_SHA256}  lcov-${LCOV_VERSION}.tar.gz\" | sha256sum -c -) \\\n    mkdir lcov && cd lcov; \\\n    tar -xf ../lcov-${LCOV_VERSION}.tar.gz --strip 1; \\\n    make install; \\\n    lcov --version; \\\n# Docker\n    DOCKERIZE_VERSION=\"0.6.1\"; \\\n    DOCKERIZE_SHA256=\"1fa29cd41a5854fd5423e242f3ea9737a50a8c3bcf852c9e62b9eb02c6ccd370\"; \\\n    curl --silent --show-error --location --fail --retry 3 \\\n        --output /tmp/dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz \\\n        https://github.com/jwilder/dockerize/releases/download/v${DOCKERIZE_VERSION}/dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz; \\\n    ( echo \"${DOCKERIZE_SHA256}  /tmp/dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz\" | sha256sum -c -) \\\n    tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz; \\\n    rm -rf /tmp/dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz; \\\n    dockerize --version;\n\n# Apache config\nENV APACHE_CONFDIR /etc/apache2\nENV APACHE_ENVVARS $APACHE_CONFDIR/envvars\n\nRUN set -eux; \\\n# generically convert lines like\n#   export APACHE_RUN_USER=www-data\n# into\n#   : ${APACHE_RUN_USER:=www-data}\n#   export APACHE_RUN_USER\n# so that they can be overridden at runtime (\"-e APACHE_RUN_USER=...\")\n    sed -ri 's/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/' \"$APACHE_ENVVARS\"; \\\n    \\\n# setup directories and permissions\n    . \"$APACHE_ENVVARS\"; \\\n    for dir in \\\n        \"$APACHE_LOCK_DIR\" \\\n        \"$APACHE_RUN_DIR\" \\\n        \"$APACHE_LOG_DIR\" \\\n    ; do \\\n        rm -rvf \"$dir\"; \\\n        mkdir -p \"$dir\"; \\\n        chown \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$dir\"; \\\n# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)\n        chmod 777 \"$dir\"; \\\n    done; \\\n    \\\n# delete the \"index.html\" that installing Apache drops in here\n    rm -rvf /var/www/html/*; \\\n    \\\n# logs should go to stdout / stderr\n    ln -sfT /dev/stderr \"$APACHE_LOG_DIR/error.log\"; \\\n    ln -sfT /dev/stdout \"$APACHE_LOG_DIR/access.log\"; \\\n    ln -sfT /dev/stdout \"$APACHE_LOG_DIR/other_vhosts_access.log\"; \\\n    chown -R --no-dereference \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$APACHE_LOG_DIR\"; \\\n    \\\n# Apache + PHP requires preforking Apache for best results\n    a2dismod mpm_event && a2enmod mpm_prefork ;\\\n# PHP files should be handled by PHP, and should be preferred over any other file type\n    { \\\n        echo '<FilesMatch \\.php$>'; \\\n        echo '\\tSetHandler application/x-httpd-php'; \\\n        echo '</FilesMatch>'; \\\n        echo; \\\n        echo 'DirectoryIndex disabled'; \\\n        echo 'DirectoryIndex index.php index.html'; \\\n        echo; \\\n        echo '<Directory /var/www/>'; \\\n        echo '\\tOptions -Indexes'; \\\n        echo '\\tAllowOverride All'; \\\n        echo '</Directory>'; \\\n    } | tee \"$APACHE_CONFDIR/conf-available/docker-php.conf\" \\\n    && a2enconf docker-php;\n\nRUN set -eux; \\\n# Share welcome message with the world\n    echo '[ ! -z \"$TERM\" -a -r /etc/motd ] && cat /etc/motd' \\\n        >> /etc/bash.bashrc;\n\n# Set up PHP directories\nENV PHP_SRC_DIR=/usr/local/src/php\nENV PHP_INSTALL_DIR=/opt/php\n\nRUN set -eux; \\\n# Setup php source directory\n    mkdir -p $PHP_SRC_DIR; \\\n    chown -R circleci:circleci /usr/local/src; \\\n# Setup php install directory\n    mkdir -p $PHP_INSTALL_DIR; \\\n    chown -R circleci:circleci /opt;\n\n# Run everything else as circleci user\nUSER circleci\n\nRUN set -eux; \\\n# Pretty prompt\n    echo \"PS1='\\[\\033[01;32m\\]\\u\\[\\033[00m\\]\\[\\033[00;35m\\](buster)\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ '\" | \\\n        tee -a /home/circleci/.bashrc; \\\n# Handy aliases\n    echo \"alias ll='ls -al'\" | \\\n        tee -a /home/circleci/.bash_aliases; \\\n# Please remember gdb history\n    echo 'set history save on' >> /home/circleci/.gdbinit; \\\n        chmod 600 /home/circleci/.gdbinit;\n\nCOPY install-ext-from-source /usr/local/bin/install-ext-from-source\nCOPY switch-php /usr/local/bin/\n\nWORKDIR /home/circleci\n\n# Override stop signal to stop process gracefully\n# https://github.com/php/php-src/blob/17baa87faddc2550def3ae7314236826bc1b1398/sapi/fpm/php-fpm.8.in#L163\nSTOPSIGNAL SIGQUIT\n\nEXPOSE 9000\nEXPOSE 80\n\nCMD [ \"bash\" ]\n"
}