{
  "startTime": 1674250350430,
  "endTime": 1674250351755,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 5,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 6,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 70
      }
    }
  ],
  "repairedDockerfile": "#######################\n# Step 1: Base target #\n#######################\nFROM node:17-bullseye-slim as base\nARG http_proxy\nARG https_proxy\nARG no_proxy\nARG npm_registry\nARG sass_registry\nARG MIRROR_DEBIAN\nARG NPM_GIT\nARG NPM_FIX\nARG NPM_LATEST\nARG NPM_VERBOSE\nARG app_path\nARG app_name\nARG app_ver\nENV APP ${APP}\nENV APP_VERSION ${app_ver}\n\nWORKDIR /$app_path\n\nRUN apt-get update\nRUN apt-get install --no-install-recommends python3 build-essential -y && rm -rf /var/lib/apt/lists/*;\n\n# update debian w/proxy & mirror then installs git in case of git dependencies\nRUN if [ ! -z \"${NPM_GIT}\" ]; then \\\n      echo \"$http_proxy $no_proxy\"; \\\n      (set -x && [ -z \"$MIRROR_DEBIAN\" ] || sed -i.orig -e \"s|http://deb.debian.org\\([^[:space:]]*\\)|$MIRROR_DEBIAN/debian11|g ; s|http://security.debian.org\\([^[:space:]]*\\)|$MIRROR_DEBIAN/debian11-security|g\" /etc/apt/sources.list) ; \\\n      apt-get update; \\\n      buildDeps=\"git\"; \\\n      apt-get install -qy --no-install-recommends $buildDeps ; rm -rf /var/lib/apt/lists/*; \\\n      git config --global url.\"https://\".insteadOf git:// ; \\\n   fi\n\n# use proxy & private npm registry\nRUN if [ ! -z \"$http_proxy\" ] ; then \\\n        npm config delete proxy; \\\n        npm config set proxy $http_proxy; \\\n        npm config set proxy $http_proxy --global; \\\n        npm config set https-proxy $https_proxy; \\\n        npm config set https-proxy $https_proxy --global; \\\n        npm config set no-proxy $no_proxy; \\\n   fi ; \\\n   [ -z \"${npm_registry}\" ] || npm config set registry=$npm_registry; \\\n   [ -z \"$npm_registry\" ] || npm config set strict-ssl false ; \\\n   [ -z \"${sass_registry}\" ] || npm config set sass_binary_site=$sass_registry;\n\n# 15 min\nRUN npm config set fetch-timeout 900000\n\nRUN echo \"NPM_LATEST = ${NPM_LATEST}\"\nRUN if [ \"${NPM_LATEST}\" = \"true\" ]; then \\\n    echo \"Let's install npm latest version\"; \\\n    npm i npm@latest -g; npm cache clean --force; \\\n  else \\\n    echo \"Don't install npm latest version\"; \\\n  fi\n\nCOPY package.json ./\nRUN npm --no-git-tag-version version ${APP_VERSION}\n\nRUN echo \"NPM_VERBOSE = ${NPM_VERBOSE}\"\nRUN if [ \"${NPM_VERBOSE}\" = \"true\" ]; then \\\n    npm install --verbose; npm cache clean --force; \\\n  else \\\n     npm install; npm cache clean --force; \\\n  fi\n\n# RUN npm config set audit-level high\n# RUN echo \"NPM_FIX = ${NPM_FIX}\"\n# RUN if [ \"${NPM_FIX}\" = \"true\" ]; then \\\n#     npm audit fix --registry=https://registry.npmjs.org; \\\n#   else \\\n#     npm audit --registry=https://registry.npmjs.org; \\\n#   fi\n\nCOPY run.sh .\nRUN chmod +x run.sh\n\n################################\n# Step 2: \"development\" target #\n################################\nFROM base as development\nARG http_proxy\nARG https_proxy\nARG no_proxy\nARG npm_registry\nARG sass_registry\nARG MIRROR_DEBIAN\nARG app_path\nARG app_name\nARG app_ver\nENV VUE_APP_PORT ${VUE_APP_PORT}\nENV VUE_UI_PORT ${VUE_UI_PORT}\n\nVOLUME /$app_path/src\nVOLUME /$app_path/public\n\nEXPOSE ${VUE_APP_PORT}\n\nEXPOSE ${VUE_UI_PORT}\n\nCMD [\"./run.sh\", \"dev-ui\"]\n\n################################\n# Step 3:   \"build\" target     #\n################################\nFROM base as build\nARG http_proxy\nARG https_proxy\nARG no_proxy\nARG npm_registry\nARG sass_registry\nARG MIRROR_DEBIAN\nARG app_path\nARG app_name\nARG app_ver\nENV APP ${APP}\nENV APP_VERSION ${app_ver}\n\nVOLUME /$app_path/dist\n\nCOPY .babelrc .editorconfig .eslintignore .eslintrc.js vue.config.js ./\nCOPY src src\nCOPY public public\n\nCMD [\"./run.sh\", \"build\"]\n\n################################\n# Step 4:\"build-deploy\" target #\n################################\nFROM base as build-deploy\nARG http_proxy\nARG https_proxy\nARG no_proxy\nARG npm_registry\nARG sass_registry\nARG MIRROR_DEBIAN\nARG app_path\nARG app_name\nARG app_ver\nARG AB_TESTING_PERCENTAGE\nARG VUE_APP_SOURCE_MAP\nENV APP ${app_name}\nENV APP_VERSION ${app_ver}\nENV VUE_APP_TITLE ${app_name}\nENV VUE_APP_AB_TESTING_PERCENTAGE ${AB_TESTING_PERCENTAGE}\nENV VUE_APP_SOURCE_MAP ${VUE_APP_SOURCE_MAP}\n\nCOPY ${app_name}-${app_ver}-frontend.tar.gz .\n\nRUN env | grep VUE_APP_ > .env\n\nRUN cat .env\n\n\nRUN  set -ex ; tar -zxvf ${app_name}-${app_ver}-frontend.tar.gz  && \\\n     npm run build 2>&1 | tee npm.log; egrep -E '(ERROR|error)' npm.log && exit 1 ; rm -rf npm.log \\\n     rm -rf ${app_name}-${app_ver}-frontend.tar.gz\n\n\nCMD [\"npm\", \"run\", \"build\"]\n"
}