{
  "startTime": 1674216334460,
  "endTime": 1674216335360,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 12,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "FROM node:16-alpine\n\n# Create and change to the app directory.\nWORKDIR /home/node/app\n# Copy application dependency manifests to the container image.\n# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).\n# Copying this first prevents re-running npm install on every code change.\nCOPY package*.json ./\nCOPY . ./\n# Install production dependencies.\n# If you add a package-lock.json, speed your build by switching to 'npm ci'.\n# RUN npm ci --only=production\nRUN yarn && yarn cache clean;\nRUN npx tsc\nRUN yarn build && yarn cache clean;\n# Copy local code to the container image.\n\n\n# Run the web service on container startup.\nCMD [ \"yarn\", \"start\" ]"
}