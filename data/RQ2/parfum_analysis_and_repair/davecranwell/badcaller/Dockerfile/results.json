{
  "startTime": 1674255697087,
  "endTime": 1674255697623,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM arm32v7/node:14.18.1-alpine3.12 as builderserver\nRUN apk update\n# linux headers required for serial.h\nRUN apk add --no-cache linux-headers --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main\nRUN apk --no-cache add --virtual build-deps build-base python2 make gcc g++ udev\n\n# Copy only package.json of the client across so server can build reading the version\n# for broadcast to the front end\nWORKDIR /app/client\nCOPY ./client/package.json ./\nWORKDIR /app/server\nCOPY ./server/package.json ./server/package-lock.json ./server/tsconfig.json ./\nENV NODE_ENV=production\nRUN npm ci --only=production\nCOPY ./server/src ./src\nCOPY ./server/config ./config\nRUN npm run build\n\nFROM arm32v7/node:16-alpine as builderclient\nWORKDIR /app/client\nCOPY ./client/package.json ./client/package-lock.json ./\nENV NODE_ENV=production\nRUN npm ci --only=production\n\nCOPY ./client/public ./public\nCOPY ./client/src ./src\nRUN npm run build\n\n# NB: https://github.com/nodejs/docker-node/issues/1589\n# It seems many alpine images do not work with node, so a very specific version is needed\nFROM arm32v7/node:14.18.1-alpine3.12\nWORKDIR /app/server\nCOPY ./server/package.json ./\nCOPY --from=builderserver /app/server/node_modules ./node_modules\nCOPY --from=builderserver /app/server/build ./build\nCOPY --from=builderserver /app/server/config ./config\n\nWORKDIR /app/client/build\nCOPY --from=builderclient /app/client/build ./\n\nWORKDIR /app/server\nENV NODE_ENV=production\nCMD [ \"npm\", \"start\" ]"
}