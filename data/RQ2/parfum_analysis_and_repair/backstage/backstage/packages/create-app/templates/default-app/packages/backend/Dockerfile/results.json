{
  "startTime": 1674249420494,
  "endTime": 1674249421629,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 72
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This dockerfile builds an image for the backend package.\n# It should be executed with the root of the repo as docker context.\n#\n# Before building this image, be sure to have run the following commands in the repo root:\n#\n# yarn install\n# yarn tsc\n# yarn build\n#\n# Once the commands have been run, you can build the image using `yarn build-image`\n\nFROM node:16-bullseye-slim\n\nWORKDIR /app\n\n# install sqlite3 dependencies, you can skip this if you don't use sqlite3 in the image\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends libsqlite3-dev python3 build-essential && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    yarn config set python /usr/bin/python3 && yarn cache clean;\n\n# Copy repo skeleton first, to avoid unnecessary docker cache invalidation.\n# The skeleton contains the package.json of each package in the monorepo,\n# and along with yarn.lock and the root package.json, that's enough to run yarn install.\nCOPY yarn.lock package.json packages/backend/dist/skeleton.tar.gz ./\nRUN tar xzf skeleton.tar.gz && rm skeleton.tar.gz\n\nRUN yarn install --frozen-lockfile --production --network-timeout 300000 && rm -rf \"$(yarn cache dir)\" && yarn cache clean;\n\n# Then copy the rest of the backend bundle, along with any other files we might want.\nCOPY packages/backend/dist/bundle.tar.gz app-config*.yaml ./\nRUN tar xzf bundle.tar.gz && rm bundle.tar.gz\n\nCMD [\"node\", \"packages/backend\", \"--config\", \"app-config.yaml\", \"--config\", \"app-config.production.yaml\"]\n"
}