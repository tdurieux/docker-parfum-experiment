{
  "startTime": 1674216072440,
  "endTime": 1674216073260,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 20,
        "columnEnd": 36
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 32,
        "columnEnd": 48
      }
    }
  ],
  "repairedDockerfile": "# The purpose of this image is to serve the frontend app content separately.\n# By default the Backstage backend uses the app-backend plugin to serve the\n# app from the backend itself, but it may be desirable to move the frontend\n# content serving to a separate deployment, in which case this image can be\n# used.\n\n# This dockerfile also performs the build first inside docker. This may come\n# with a build time impact, but is sometimes desirable. If you want to run the\n# build on the host instead, use the file simply named Dockerfile in this folder\n# instead.\n\n# USAGE:\n#\n# - Copy this file and the \"docker\" folder from this directory to your project\n#   root\n#\n# - Update your .dockerignore, make sure that the source folders are not\n#   excluded, but do exclude node_modules and build artifacts:\n#\n#       .git\n#       node_modules\n#       packages/*/dist\n#       packages/*/node_modules\n#       plugins/*/dist\n#       plugins/*/node_modules\n#\n# - Update the copy of this file to add configuration arguments to the \"build\"\n#   command, for example:\n#\n#       RUN yarn workspace app build --config <config1> --config <config2> ...\n#\n# - In your project root, run:\n#\n#       docker build -t backstage-frontend -f Dockerfile.dockerbuild .\n\n\n\nFROM node:14-buster AS build\n\nRUN mkdir /app\nCOPY . /app\nWORKDIR /app\n\nRUN yarn install && yarn cache clean;\nRUN yarn workspace app build && yarn cache clean;\n\n\n\nFROM nginx:mainline\n\nRUN apt-get update && apt-get -y --no-install-recommends install jq && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=build /app/packages/app/dist /usr/share/nginx/html\nCOPY docker/default.conf.template /etc/nginx/templates/default.conf.template\n\nCOPY docker/inject-config.sh /docker-entrypoint.d/40-inject-config.sh\n\nENV PORT 80\n"
}