{
  "startTime": 1674254802497,
  "endTime": 1674254803184,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The purpose of this image is to serve the frontend app content separately.\n# By default the Backstage backend uses the app-backend plugin to serve the\n# app from the backend itself, but it may be desirable to move the frontend\n# content serving to a separate deployment, in which case this image can be\n# used.\n\n# This dockerfile requires the app to be built on the host first, as it\n# simply copies in the build output into the image. If you want to also perform\n# the build itself inside docker, use Dockerfile.build in this folder instead.\n\n# USAGE:\n#\n# - Copy this file and the \"docker\" folder from this directory to your project\n#   root\n#\n# - Add the following line to your .dockerignore to make sure that the built\n#   frontend actually can be transferred into the docker image:\n#\n#       !packages/app/dist\n#\n# - In your project root, run:\n#\n#       yarn install\n#       yarn tsc\n#       yarn workspace app build --config <config1> --config <config2> ...\n#       docker build -t backstage-frontend -f Dockerfile.hostbuild .\n\n\n\nFROM nginx:mainline\n\nRUN apt-get update && apt-get -y --no-install-recommends install jq && rm -rf /var/lib/apt/lists/*\n\nCOPY packages/app/dist /usr/share/nginx/html\nCOPY docker/default.conf.template /etc/nginx/templates/default.conf.template\n\nCOPY docker/inject-config.sh /docker-entrypoint.d/40-inject-config.sh\n\nENV PORT 80\n"
}