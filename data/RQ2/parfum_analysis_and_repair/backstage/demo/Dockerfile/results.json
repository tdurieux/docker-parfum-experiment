{
  "startTime": 1674250749968,
  "endTime": 1674250750861,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Stage 1 - Create yarn install skeleton layer\nFROM node:16-bullseye-slim AS packages\n\nWORKDIR /app\nCOPY package.json yarn.lock ./\n\nCOPY packages packages\n# COPY plugins plugins\n\nRUN find packages \\! -name \"package.json\" -mindepth 2 -maxdepth 2 -print | xargs rm -rf\n\n# Stage 2 - Install dependencies and build packages\nFROM node:14-buster AS build\n\nWORKDIR /app\nCOPY --from=packages /app .\n\nRUN yarn install --network-timeout 600000 && rm -rf \"$(yarn cache dir)\" && yarn cache clean;\n\nCOPY . .\n\nRUN yarn tsc\nRUN yarn --cwd packages/backend backstage-cli backend:bundle --build-dependencies\n\n# Stage 3 - Build the actual backend image and install production dependencies\nFROM node:14-buster\n\nWORKDIR /app\n\n# Copy from build stage\nCOPY --from=build /app/yarn.lock /app/package.json /app/packages/backend/dist/skeleton.tar.gz ./\nRUN tar xzf skeleton.tar.gz && rm skeleton.tar.gz\n\n# install sqlite3 dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y libsqlite3-dev python3 cmake g++ && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    yarn config set python /usr/bin/python3 && yarn cache clean;\n\nRUN yarn install --production --network-timeout 600000 && rm -rf \"$(yarn cache dir)\" && yarn cache clean;\n\nCOPY --from=build /app/packages/backend/dist/bundle.tar.gz .\nRUN tar xzf bundle.tar.gz && rm bundle.tar.gz\n\nCOPY app-config.yaml app-config.heroku.yaml ./\n\nENV PORT 7000\n\nENV GITHUB_PRODUCTION_CLIENT_ID \"\"\nENV GITHUB_PRODUCTION_CLIENT_SECRET \"\"\n\nENV GITHUB_DEVELOPMENT_CLIENT_ID \"\"\nENV GITHUB_DEVELOPMENT_CLIENT_SECRET \"\"\n\n# For now we need to manually add these configs through environment variables but in the\n# future, we should be able to fetch the frontend config from the backend somehow\nENV APP_CONFIG_app_baseUrl \"https://demo.backstage.io\"\nENV APP_CONFIG_backend_baseUrl \"https://demo.backstage.io\"\nENV APP_CONFIG_auth_environment \"production\"\n\nCMD [\"node\", \"packages/backend\", \"--config\", \"app-config.yaml\", \"--config\", \"app-config.heroku.yaml\"]\n"
}