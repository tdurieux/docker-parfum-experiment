{
  "startTime": 1674256187529,
  "endTime": 1674256188196,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Create builder step\nFROM rocker/r-ver:4.2.0 AS builder\nWORKDIR /src/worker\n\n# install required debian packages to install R packages\nCOPY setup/install_debian_packages.sh .\nCOPY setup/sysdeps_build_debian.txt .\nRUN cat sysdeps_build_debian.txt | xargs ./install_debian_packages.sh\n\n# need GITHUB_PAT to authenticate github installations\nARG GITHUB_PAT\nENV GITHUB_PAT $GITHUB_PAT\nRUN R -e \"if(Sys.getenv('GITHUB_PAT') == '') stop('need to export GITHUB_PAT')\"\n\n# add renv library to .libPaths\nENV RENV_LIB=/src/lib\nRUN echo \".libPaths(c('$RENV_LIB', .libPaths()))\" >> $(R RHOME)/etc/Rprofile.site\n\n# install renv to install required R packages\nRUN R -e \"install.packages('remotes', repos = c(CRAN = 'https://cloud.r-project.org'))\" && \\\n    R -e \"remotes::install_github('rstudio/renv@0.15.5')\" && \\\n    R -e \"renv::init(bare = TRUE, settings = list(use.cache = FALSE))\"\n\n# an initial lockfile is used to avoid frequent re-installs\n# use renv::snapshot(lockfile='renv.lock.init') if R dependency updates become slow to build\n# delete renv cache\n# strip debug from shared libraries\n# see http://dirk.eddelbuettel.com/blog/2017/08/20/#010_stripping_shared_libraries\nCOPY ./renv.lock.init .\nRUN R -e \"renv::restore(lockfile='renv.lock.init', library = '$RENV_LIB')\" && \\\n    R -e 'root <- renv::paths$root(); unlink(root, recursive = TRUE)' && \\\n    strip --strip-debug $RENV_LIB/*/libs/*.so\n\nRUN R -e \"renv::deactivate()\"\n\n# install miniconda and python umap-learn for RunUMAP\n# clean conda\nENV RETICULATE_MINICONDA_PATH=/src/r-miniconda\nRUN R -e \"reticulate::install_miniconda()\" && \\\n    R -e \"reticulate::conda_install(packages = 'umap-learn=0.5.3', python_version='3.10')\" && \\\n    CONDA_PATH=$(echo \"cat(reticulate::conda_binary())\" | Rscript -) && \\\n    $CONDA_PATH clean --force-pkgs-dirs -y\n\n# use renv::snapshot() while R dependency updates are quick to build\nCOPY ./renv.lock .\nRUN R -e \"renv::restore(lockfile='renv.lock', library = '$RENV_LIB', clean = TRUE)\" && \\\n    R -e 'root <- renv::paths$root(); unlink(root, recursive = TRUE)' && \\\n    strip --strip-debug $RENV_LIB/*/libs/*.so\n\n# determine system run-time deps\nCOPY setup/get_sysdeps_run.R .\nRUN Rscript get_sysdeps_run.R\n\n# ---------------------------------------------------\n# COMMON MINIMAL BUILD\n# ---------------------------------------------------\nFROM rocker/r-ver:4.2.0 AS common\nWORKDIR /src/worker\nENV RETICULATE_MINICONDA_PATH=/src/r-miniconda\n\n# get source code and R packages\nCOPY --from=builder /src /src\n\n# add renv library to .libPaths\nENV RENV_LIB=/src/lib\nRUN echo \".libPaths(c('$RENV_LIB', .libPaths()))\" >> $(R RHOME)/etc/Rprofile.site\n\n# install runtime system deps\n# cleanup setup files\nRUN echo \"python3-pip\" >> sysdeps_run.txt && \\\n    cat sysdeps_run.txt | xargs ./install_debian_packages.sh && \\\n    rm -rf *\n\n# ---------------------------------------------------\n# PRODUCTION BUILD\n# ---------------------------------------------------\nFROM common AS prod\n\n# add R package and runner\nADD R ./R\nADD tests ./tests\nCOPY DESCRIPTION NAMESPACE work.R ./\n\n# start app\nENTRYPOINT [\"bash\", \"/var/lib/watchfile/entrypoint.sh\"]\nCMD [\"Rscript\", \"work.R\"]\n\n# ---------------------------------------------------\n# DEVELOPMENT BUILD\n# ---------------------------------------------------\nFROM common AS dev\n\n# install Radian for interactive R shell\n# also install watchdog to automatically restart\n# when source files change\nRUN pip install --no-cache-dir -U jedi radian PyYAML watchdog[watchmedo]\n\n# add R package and runner\nADD R ./R\nADD tests ./tests\nCOPY DESCRIPTION NAMESPACE work.R ./\n\nCMD watchmedo auto-restart --directory=. --pattern='*.R' --recursive -- Rscript work.R\n"
}