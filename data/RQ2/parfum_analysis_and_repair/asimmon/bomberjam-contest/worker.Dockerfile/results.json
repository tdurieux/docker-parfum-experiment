{
  "startTime": 1674253353472,
  "endTime": 1674253354342,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 165
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 133
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 165
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 133
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nENV DOTNET_CLI_TELEMETRY_OPTOUT=1\nENV DOTNET_NOLOGO=1\n\n## Install updates and required tools with disabled prompts\nRUN echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections && \\\n    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections && \\\n    apt-get update && \\\n    apt-get -y upgrade && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install wget curl sudo systemd iptables-persistent cgroup-tools apt-transport-https dos2unix software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n## Python 3.8 with pip, Java 8, .NET Core 3.1, .NET 5.0 & 6.0, Node.js, Go 1.16.3 and PHP 8.0\nRUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \\\n    dpkg -i packages-microsoft-prod.deb && \\\n    curl -f -sL https://deb.nodesource.com/setup_12.x | bash - && \\\n    add-apt-repository ppa:ondrej/php\n\nRUN apt-get update && apt-get install --no-install-recommends -y python3 python3-pip openjdk-8-jdk dotnet-sdk-3.1 dotnet-sdk-5.0 dotnet-sdk-6.0 nodejs php8.0 && \\\n    wget -c https://golang.org/dl/go1.16.3.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local && \\\n    echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/skel/.profile && \\\n    echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile && rm -rf /var/lib/apt/lists/*;\n\n## 1. Create four users to isolate bots execution, all network will be disabled for them: bot_0, bot_1, bot_2 and bot_3\n## 2. Create a user to be used compilation tasks: bot_compilation\n## 3. Create a user to be used by the worker exclusively: worker. This account will be able to sudo as any bot_[0-3] or bot_compilation user\n## 4. Disable fqdn in sudo. This prevents most DNS lookups, and hopefully will avoid the `sudo: failed to resolve` error that comes up.\nRUN useradd -m -U bot_0 && \\\n    useradd -m -U bot_1 && \\\n    useradd -m -U bot_2 && \\\n    useradd -m -U bot_3 && \\\n    useradd -m -U bot_compilation && \\\n    useradd -m -U worker -G bot_0,bot_1,bot_2,bot_3,bot_compilation -s /bin/bash && \\\n    sh -c \"echo \\\"worker ALL=(bot_compilation) NOPASSWD: ALL\\\" > /etc/sudoers.d/worker_bot_compilation\" && \\\n    sh -c \"echo \\\"worker ALL=(bot_0) NOPASSWD: ALL\\\" > /etc/sudoers.d/worker_bot_0\" && \\\n    sh -c \"echo \\\"worker ALL=(bot_1) NOPASSWD: ALL\\\" > /etc/sudoers.d/worker_bot_1\" && \\\n    sh -c \"echo \\\"worker ALL=(bot_2) NOPASSWD: ALL\\\" > /etc/sudoers.d/worker_bot_2\" && \\\n    sh -c \"echo \\\"worker ALL=(bot_3) NOPASSWD: ALL\\\" > /etc/sudoers.d/worker_bot_3\" && \\\n    chmod 0400 /etc/sudoers.d/worker_bot_compilation && \\\n    chmod 0400 /etc/sudoers.d/worker_bot_0 && \\\n    chmod 0400 /etc/sudoers.d/worker_bot_1 && \\\n    chmod 0400 /etc/sudoers.d/worker_bot_2 && \\\n    chmod 0400 /etc/sudoers.d/worker_bot_3 && \\\n    echo 'Defaults !fqdn' | sudo tee /etc/sudoers.d/no-fqdn\n\n# Copy bomberjam engine and worker scripts\nWORKDIR /home/worker/\n\nCOPY [\"engine/Bomberjam/\", \"engine/Bomberjam/\"]\nCOPY [\"common/Bomberjam.Common/\", \"common/Bomberjam.Common/\"]\nRUN dotnet publish --nologo -c Release -r linux-x64 engine/Bomberjam/Bomberjam.csproj -o . && \\\n    chmod 0500 bomberjam && \\\n    chown worker:worker bomberjam && \\\n    rm -rf engine/ common/\n\nCOPY --chown=worker:worker [\"worker/*.py\", \"worker/requirements.txt\", \"./\"]\nRUN pip3 install --no-cache-dir -r requirements.txt && \\\n    chmod 0400 *.py requirements.txt\n\nWORKDIR /root\nCOPY [\"worker/cgconfig.conf\", \"/etc/cgconfig.conf\"]\nCOPY [\"worker/main.sh\", \"./\"]\nRUN chmod 0400 main.sh\n\nCMD /bin/bash /root/main.sh"
}