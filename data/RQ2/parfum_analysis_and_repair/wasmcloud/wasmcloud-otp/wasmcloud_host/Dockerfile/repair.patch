diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/wasmcloud/wasmcloud-otp/wasmcloud_host/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/wasmcloud/wasmcloud-otp/wasmcloud_host/Dockerfile/repaired.Dockerfile
index 9c33abf..a2c856e 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/wasmcloud/wasmcloud-otp/wasmcloud_host/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/wasmcloud/wasmcloud-otp/wasmcloud_host/Dockerfile/repaired.Dockerfile
@@ -25,7 +25,7 @@ RUN apt update && \
   DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
   git \
   ca-certificates && \
-  update-ca-certificates
+  update-ca-certificates && rm -rf /var/lib/apt/lists/*;
 
 # This step installs all the build tools we'll need
 RUN mix local.rebar --force && \
@@ -76,7 +76,7 @@ RUN apt update && \
   libssl-dev \
   pkg-config \
   inotify-tools \
-  build-essential
+  build-essential && rm -rf /var/lib/apt/lists/*;
 
 # This step installs all the build tools we'll need
 RUN mix local.rebar --force && \
@@ -86,7 +86,7 @@ RUN ls -R ./host_core/priv/built
 COPY ./host_core/priv/built/x86_64/libhostcore_wasmcloud_native.so ./host_core/priv/built/x86_64/libhostcore_wasmcloud_native.so
 COPY ./host_core/priv/built/aarch64/libhostcore_wasmcloud_native.so ./host_core/priv/built/aarch64/libhostcore_wasmcloud_native.so
 # Grab platform-specific NIF
-RUN cp ./host_core/priv/built/`uname -m`/libhostcore_wasmcloud_native.so ./host_core/priv/built/libhostcore_wasmcloud_native.so 
+RUN cp ./host_core/priv/built/`uname -m`/libhostcore_wasmcloud_native.so ./host_core/priv/built/libhostcore_wasmcloud_native.so
 WORKDIR ./wasmcloud_host
 RUN mix do deps.compile, compile
 
@@ -96,7 +96,7 @@ RUN mkdir -p /opt/built && \
   cd /opt/built && \
   tar -xzf ${APP_NAME}.tar.gz && \
   mkdir -p /opt/rel && \
-  mv ${APP_NAME}.tar.gz /opt/rel
+  mv ${APP_NAME}.tar.gz /opt/rel && rm ${APP_NAME}.tar.gz
 
 ##
 # STEP 3: Build optimized final release image