{
  "startTime": 1674215958532,
  "endTime": 1674215960595,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 8,
        "columnEnd": 118
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 8,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 8,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 8,
        "columnEnd": 107
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 8,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 8,
        "columnEnd": 146
      }
    }
  ],
  "repairedDockerfile": "# Stage 1: build artifact\nFROM golang:1.17-alpine AS builder\n\nWORKDIR /app\nCOPY . /app\nRUN CGO_ENABLED=0 go build -trimpath -ldflags \"-s -w\" -v -o atlantis .\n\n# Stage 2\n# The runatlantis/atlantis-base is created by docker-base/Dockerfile.\nFROM ghcr.io/runatlantis/atlantis-base:2022.05.13 AS base\n\n# Get the architecture the image is being built for\nARG TARGETPLATFORM\n\n# install terraform binaries\nENV DEFAULT_TERRAFORM_VERSION=1.2.4\n\n# In the official Atlantis image we only have the latest of each Terraform version.\nRUN AVAILABLE_TERRAFORM_VERSIONS=\"0.11.15 0.12.31 0.13.7 0.14.11 0.15.5 1.0.11 1.1.9 ${DEFAULT_TERRAFORM_VERSION}\" && \\\n    case ${TARGETPLATFORM} in \\\n        \"linux/amd64\") TERRAFORM_ARCH=amd64 ;; \\\n        \"linux/arm64\") TERRAFORM_ARCH=arm64 ;; \\\n        \"linux/arm/v7\") TERRAFORM_ARCH=arm ;; \\\n        *) echo \"ERROR: 'TARGETPLATFORM' value expected: ${TARGETPLATFORM}\"; exit 1 ;; \\\n    esac && \\\n    for VERSION in ${AVAILABLE_TERRAFORM_VERSIONS}; do \\\n    \n        curl -f -LOs https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_linux_${TERRAFORM_ARCH}.zip && \\\n        curl -f -LOs https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_SHA256SUMS && \\\n        sed -n \"/terraform_${VERSION}_linux_${TERRAFORM_ARCH}.zip/p\" terraform_${VERSION}_SHA256SUMS | sha256sum -c && \\\n        mkdir -p /usr/local/bin/tf/versions/${VERSION} && \\\n        unzip terraform_${VERSION}_linux_${TERRAFORM_ARCH}.zip -d /usr/local/bin/tf/versions/${VERSION} && \\\n        ln -s /usr/local/bin/tf/versions/${VERSION}/terraform /usr/local/bin/terraform${VERSION} && \\\n        rm terraform_${VERSION}_linux_${TERRAFORM_ARCH}.zip && \\\n        rm terraform_${VERSION}_SHA256SUMS; \\\n       done \\\n    && \\\n    ln -s /usr/local/bin/tf/versions/${DEFAULT_TERRAFORM_VERSION}/terraform /usr/local/bin/terraform\n\nENV DEFAULT_CONFTEST_VERSION=0.33.0\n\nRUN AVAILABLE_CONFTEST_VERSIONS=\"${DEFAULT_CONFTEST_VERSION}\" && \\\n    case ${TARGETPLATFORM} in \\\n        \"linux/amd64\") CONFTEST_ARCH=x86_64 ;; \\\n        \"linux/arm64\") CONFTEST_ARCH=arm64 ;; \\\n        # There is currently no compiled version of conftest for armv7\n        \"linux/arm/v7\") CONFTEST_ARCH=x86_64 ;; \\\n    esac && \\\n    for VERSION in ${AVAILABLE_CONFTEST_VERSIONS}; do \\\n    \n        curl -f -LOs https://github.com/open-policy-agent/conftest/releases/download/v${VERSION}/conftest_${VERSION}_Linux_${CONFTEST_ARCH}.tar.gz && \\\n        curl -f -LOs https://github.com/open-policy-agent/conftest/releases/download/v${VERSION}/checksums.txt && \\\n        sed -n \"/conftest_${VERSION}_Linux_${CONFTEST_ARCH}.tar.gz/p\" checksums.txt | sha256sum -c && \\\n        mkdir -p /usr/local/bin/cft/versions/${VERSION} && \\\n        tar -C /usr/local/bin/cft/versions/${VERSION} -xzf conftest_${VERSION}_Linux_${CONFTEST_ARCH}.tar.gz && \\\n        ln -s /usr/local/bin/cft/versions/${VERSION}/conftest /usr/local/bin/conftest${VERSION} && \\\n        rm conftest_${VERSION}_Linux_${CONFTEST_ARCH}.tar.gz && \\\n        rm checksums.txt; \\\n       done\n\nRUN ln -s /usr/local/bin/cft/versions/${DEFAULT_CONFTEST_VERSION}/conftest /usr/local/bin/conftest\n\n# copy binary\nCOPY --from=builder /app/atlantis /usr/local/bin/atlantis\n\n# copy docker entrypoint\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"server\"]\n"
}