{
  "startTime": 1674251230563,
  "endTime": 1674251231996,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 170
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 8,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile builds our base image with gosu, dumb-init and the atlantis\n# user. We split this from the main Dockerfile because this base doesn't change\n# and also because it kept breaking the build due to flakiness.\nFROM alpine:3.15.4\nLABEL authors=\"Anubhav Mishra, Luke Kysow\"\n\n# We use gosu to step down from root and run as the atlantis user so we need\n# to create that user and group.\n# We add the atlantis user to the root group and make its home directory\n# owned by root so that OpenShift users can use /home/atlantis as their\n# data dir because OpenShift runs containers as a random uid that's part of\n# the root group.\nRUN addgroup atlantis && \\\n    adduser -S -G atlantis atlantis && \\\n    adduser atlantis root && \\\n    chown atlantis:root /home/atlantis/ && \\\n    chmod g=u /home/atlantis/ && \\\n    chmod g=u /etc/passwd\n\n# Install gosu and git-lfs.\nENV GOSU_VERSION=1.14\nENV GIT_LFS_VERSION=3.1.2\n\n# Automatically populated with the architecture the image is being built for.\nARG TARGETPLATFORM\n\n# Install packages needed for running Atlantis.\nRUN apk add --no-cache ca-certificates curl git unzip bash openssh libcap dumb-init gcompat && \\\n    # Install packages needed for building dependencies.\n    apk add --no-cache --virtual .build-deps gnupg openssl && \\\n    mkdir -p /tmp/build && \\\n    cd /tmp/build && \\\n\n    # git-lfs\n    case ${TARGETPLATFORM} in \\\n        \"linux/amd64\") GIT_LFS_ARCH=amd64 ;; \\\n        \"linux/arm64\") GIT_LFS_ARCH=arm64 ;; \\\n        \"linux/arm/v7\") GIT_LFS_ARCH=arm ;; \\\n    esac && \\\n    curl -f -L -s --output git-lfs.tar.gz \"https://github.com/git-lfs/git-lfs/releases/download/v${GIT_LFS_VERSION}/git-lfs-linux-${GIT_LFS_ARCH}-v${GIT_LFS_VERSION}.tar.gz\" && \\\n    tar -xf git-lfs.tar.gz && \\\n    chmod +x git-lfs && \\\n    mv git-lfs /usr/bin/git-lfs && \\\n    git-lfs --version && \\\n\n    # gosu\n    case ${TARGETPLATFORM} in \\\n        \"linux/amd64\") GOSU_ARCH=amd64 ;; \\\n        \"linux/arm64\") GOSU_ARCH=arm64 ;; \\\n        \"linux/arm/v7\") GOSU_ARCH=armhf ;; \\\n    esac && \\\n    curl -f -L -s --output gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-${GOSU_ARCH}\" && \\\n    curl -f -L -s --output gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-${GOSU_ARCH}.asc\" && \\\n    for server in $(shuf -e ipv4.pool.sks-keyservers.net \\\n                            hkp://p80.pool.sks-keyservers.net:80 \\\n                            keyserver.ubuntu.com \\\n                            hkp://keyserver.ubuntu.com:80 \\\n                            pgp.mit.edu); do \\\n        gpg --batch --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || :; \\\n    done && \\\n    gpg --batch --verify gosu.asc gosu && \\\n    chmod +x gosu && \\\n    cp gosu /bin && \\\n    gosu --version && \\\n\n    # Cleanup\n    cd /tmp && \\\n    rm -rf /tmp/build && \\\n    gpgconf --kill dirmngr && \\\n    gpgconf --kill gpg-agent && \\\n    apk del .build-deps && \\\n    rm -rf /root/.gnupg && rm git-lfs.tar.gz\n\n# Set up nsswitch.conf for Go's \"netgo\" implementation\n# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n"
}