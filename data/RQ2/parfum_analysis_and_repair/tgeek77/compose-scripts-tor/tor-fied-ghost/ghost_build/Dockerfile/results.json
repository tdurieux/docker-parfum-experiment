{
  "startTime": 1674252453503,
  "endTime": 1674252454551,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 24,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://docs.ghost.org/faq/node-versions/\n# https://github.com/nodejs/LTS\nFROM node:10-slim\n\n# grab gosu for easy step-down from root\nENV GOSU_VERSION 1.10\nRUN set -x \\\n\t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n\t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n\t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n\t&& { command -v gpgconf && gpgconf --kill all || :; } \\\n\t&& rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n\t&& chmod +x /usr/local/bin/gosu \\\n\t&& gosu nobody true && rm -rf -d\n\nENV NODE_ENV production\n\nENV GHOST_CLI_VERSION 1.12.0\nRUN set -eux; \\\n\tnpm install -g \"ghost-cli@$GHOST_CLI_VERSION\"; \\\n\tnpm cache clean --force\n\nENV GHOST_INSTALL /var/lib/ghost\nENV GHOST_CONTENT /var/lib/ghost/content\n\nENV GHOST_VERSION 3.0.0\n\nRUN set -eux; \\\n\tmkdir -p \"$GHOST_INSTALL\"; \\\n\tchown node:node \"$GHOST_INSTALL\"; \\\n\t\\\n\tgosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\"; \\\n\t\\\n# Tell Ghost to listen on all ips and not prompt for additional configuration\n\tcd \"$GHOST_INSTALL\"; \\\n\tgosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://localhost:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\"; \\\n\tgosu node ghost config paths.contentPath \"$GHOST_CONTENT\"; \\\n\t\\\n# make a config.json symlink for NODE_ENV=development (and sanity check that it's correct)\n\tgosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\"; \\\n\treadlink -f \"$GHOST_INSTALL/config.development.json\"; \\\n\t\\\n# need to save initial content for pre-seeding empty volumes\n\tmv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\"; \\\n\tmkdir -p \"$GHOST_CONTENT\"; \\\n\tchown node:node \"$GHOST_CONTENT\"; \\\n\t\\\n# force install \"sqlite3\" manually since it's an optional dependency of \"ghost\"\n# (which means that if it fails to install, like on ARM/ppc64le/s390x, the failure will be silently ignored and thus turn into a runtime error instead)\n# see https://github.com/TryGhost/Ghost/pull/7677 for more details\n\tcd \"$GHOST_INSTALL/current\"; \\\n# scrape the expected version of sqlite3 directly from Ghost itself\n\tsqlite3Version=\"$(npm view . optionalDependencies.sqlite3)\"; \\\n\tif ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force; then \\\n# must be some non-amd64 architecture pre-built binaries aren't published for, so let's install some build deps and do-it-all-over-again\n\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\tapt-get update; \\\n\t\tapt-get install -y --no-install-recommends python make gcc g++ libc-dev; \\\n\t\trm -rf /var/lib/apt/lists/*; \\\n\t\t\\\n\t\tgosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source; \\\n\t\t\\\n\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \\\n\t\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\t\tapt-get purge -y --auto-remove; \\\n\tfi; \\\n\t\\\n\tgosu node yarn cache clean; \\\n\tgosu node npm cache clean --force; \\\n\tnpm cache clean --force; \\\n\trm -rv /tmp/yarn* /tmp/v8*\n\nWORKDIR $GHOST_INSTALL\nVOLUME $GHOST_CONTENT\n\nCOPY docker-entrypoint.sh /usr/local/bin\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 2368\nCMD [\"node\", \"current/index.js\"]\n"
}