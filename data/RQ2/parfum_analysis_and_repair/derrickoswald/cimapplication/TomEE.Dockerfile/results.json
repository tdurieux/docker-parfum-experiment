{
  "startTime": 1674253687468,
  "endTime": 1674253688146,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedDockerfile": "# build:\n#   $ cd CIMApplication; mvn -DskipTests install; docker build --file TomEE.Dockerfile --tag derrickoswald/cimapplication .\n# run:\n#   $ docker run --rm --publish 9080:9080 --net spark_default --link=\"spark_master:sandbox\" derrickoswald/cimapplication start-tomee sandbox beach\n# access:\n#   http://localhost:8080/cimweb/cim/ping\n#   http://localhost:8080/cimweb/cim/list\n\n# Most of this is directly copied from https://github.com/tomitribe/docker-tomee/blob/master/8-jre-7.1.0-plus/Dockerfile\n# but based on a hadoop image from spark-docker, both of which have a common root at openjdk:8-jre.\n\nFROM derrickoswald/spark-docker:latest\nLABEL maintainer = \"Derrick.Oswald@9code.ch\"\n\n# Install Cassandra\nRUN echo \"deb http://www.apache.org/dist/cassandra/debian 311x main\" | tee -a /etc/apt/sources.list.d/cassandra.sources.list\nRUN curl -f https://downloads.apache.org/cassandra/KEYS | apt-key add -\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq apt-transport-https ca-certificates && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update \\\n  && apt-key adv --keyserver pool.sks-keyservers.net --recv-key A278B781FE4B2BDA\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends cassandra && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean\nRUN  sed --in-place 's/enable_user_defined_functions: false/enable_user_defined_functions: true/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/enable_scripted_user_defined_functions: false/enable_scripted_user_defined_functions: true/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/read_request_timeout_in_ms: 5000/read_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/range_request_timeout_in_ms: 10000/range_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/write_request_timeout_in_ms: 2000/write_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/INFO/WARN/g' /etc/cassandra/logback.xml \\\n  && sed --in-place 's/level=\"DEBUG\"/level=\"WARN\"/g' /etc/cassandra/logback.xml \\\n  && sed --in-place 's/level=\"ERROR\"/level=\"WARN\"/g' /etc/cassandra/logback.xml\n\n# Cassandra ports\n# Cassandra storage_port\nEXPOSE 7000\n# Cassandra ssl_storage_port\nEXPOSE 7001\n# Cassandra JMX monitoring port\n# EXPOSE 7199\n# Cassandra native_transport_port\nEXPOSE 9042\n# Cassandra rpc_port\nEXPOSE 9160\n\nENV PATH /usr/local/tomee/bin:$PATH\nRUN mkdir -p /usr/local/tomee\n\nWORKDIR /usr/local/tomee\n\n# for now skip verification step:\n# see https://checker.apache.org/projs/tomee.html :\n#     expired signiture cf6fc99c2cc77782\tDavid Blevins <dblevins@tomitribe.com>\n\n#RUN set -xe \\\n#\t&& export GPG_KEYS=\"`curl -fsSL 'https://www.apache.org/dist/tomee/KEYS' | awk -F ' = ' '$1 ~ /^ +Key fingerprint$/ { gsub(\" \", \"\", $2); print $2 }' | sort --unique`\" \\\n#\t&& for key in $GPG_KEYS; do \\\n#\t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n#\tdone\n\n#\t&& curl -fSL https://repo.maven.apache.org/maven2/org/apache/tomee/apache-tomee/${TOMEE_VERSION}/apache-tomee-${TOMEE_VERSION}-plus.tar.gz.asc -o tomee.tar.gz.asc \\\n\n#\t&& gpg --batch --verify tomee.tar.gz.asc tomee.tar.gz \\\n\nENV TOMEE_VERSION 8.0.0\nENV CATALINA_BASE /usr/local/tomee\n# a little more memory than 4049600512 bytes\nENV CATALINA_OPTS -Xmx8g\n\nRUN set -x \\\n\t&& curl --fail --show-error --location https://repo.maven.apache.org/maven2/org/apache/tomee/apache-tomee/${TOMEE_VERSION}/apache-tomee-${TOMEE_VERSION}-plus.tar.gz --output tomee.tar.gz \\\n\t&& tar --gunzip --extract --file=tomee.tar.gz \\\n\t&& mv apache-tomee-plus-${TOMEE_VERSION}/* /usr/local/tomee \\\n\t&& rm --recursive --force apache-tomee-plus-${TOMEE_VERSION} \\\n\t&& rm /usr/local/tomee/bin/*.bat \\\n\t&& rm tomee.tar.gz*\n\n# increase the cache size\nRUN sed -i.bak \"s|</Context>|    <Resources cacheMaxSize=\\\"51200\\\" />\\r\\n</Context>|g\" ${CATALINA_BASE}/conf/context.xml\n\n# Tomcat/TomEE+ web UI\nRUN sed -i.bak \"s|Connector port=\\\"8080\\\" protocol=\\\"HTTP/1.1\\\"|Connector port=\\\"9080\\\" protocol=\\\"HTTP/1.1\\\"|g\" ${CATALINA_BASE}/conf/server.xml\nEXPOSE 9080\n\n# remove jul-to-slf4j, jul-to-slf4j is used by Spark and Hadoop and both can't exist together: see https://www.slf4j.org/legacy.html#jul-to-slf4j\n# RUN rm /usr/local/tomee/lib/slf4j-jdk14-1.7.21.jar doesn't work (org.glassfish.jersey.server.ContainerException: java.lang.NoClassDefFoundError: org/slf4j/impl/StaticLoggerBinder)\n# RUN rm /usr/local/spark-2.2.0/jars/jul-to-slf4j-1.7.16.jar doesn't work (java.lang.NoClassDefFoundError: org/slf4j/bridge/SLF4JBridgeHandler)\n\n# deleting both together doesn't work either\n# RUN rm /usr/local/tomee/lib/slf4j-jdk14-1.7.21.jar\n# RUN rm /usr/local/tomee/lib/slf4j-api-1.7.21.jar\n\n# naively removing AsyncConsoleHandler references doesn't work either\n# RUN mv /usr/local/tomee/conf/logging.properties /usr/local/tomee/conf/logging.properties.original\n# COPY CIMEar/logging.properties /usr/local/tomee/conf/logging.properties\n\n# configuring Tomcat to use log4j rather than java.util.logging doesn't work either, see https://tomcat.apache.org/tomcat-8.0-doc/logging.html#Using_Log4j\n# the only juli jars are for an earlier version and support was apparently dropped in 8.5.20 (TomEE 7.1.0)\n# RUN mv /usr/local/tomee/conf/logging.properties /usr/local/tomee/conf/logging.properties.original\n# COPY CIMEar/log4j.properties /usr/local/tomee/lib/log4j.properties\n# COPY CIMEar/apache-log4j-1.2.17/log4j-1.2.17.jar /usr/local/tomee/liblog4j-1.2.17.jar\n# COPY CIMEar/tomcat-juli-adapters.jar /usr/local/tomee/lib/tomcat-juli-adapters.jar\n# RUN rm /usr/local/tomee/bin/tomcat-juli.jar\n# COPY CIMEar/tomcat-juli.jar /usr/local/tomee/bin/tomcat-juli.jar\n\n# naive remove slf4j doesn't work (catalina complains bitterly)\n# RUN rm /usr/local/tomee/lib/slf4j-api-1.7.21.jar\n# RUN rm /usr/local/tomee/lib/slf4j-jdk14-1.7.21.jar\n\n# try no logging - still StackOverflowError\n# COPY CIMEar/no_logging.properties /usr/local/tomee/conf/logging.properties\n\n# removing slf4j from Spark doesn't work (org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat could not be instantiated)\n# RUN rm /usr/local/spark-2.2.0/jars/jul-to-slf4j-1.7.16.jar\n# RUN rm /usr/local/spark-2.2.0/jars/slf4j-api-1.7.16.jar\n\n# layers added for CIMApplication (do this last to speed up Docker build)\n\n# copy start script\nCOPY CIMEar/start-tomee /opt/util/bin/start-tomee\nCOPY CIMEar/simulation_schema.sql /opt/util/bin/simulation_schema.sql\n\n# set up apps directory\nRUN mv /usr/local/tomee/conf/tomee.xml /usr/local/tomee/conf/tomee.xml.bak\nCOPY CIMEar/tomee.xml /usr/local/tomee/conf/tomee.xml\n\n# set up tomee user and manager\nRUN mv /usr/local/tomee/conf/tomcat-users.xml /usr/local/tomee/conf/tomcat-users.bak\nCOPY CIMEar/tomcat-users.xml /usr/local/tomee/conf/tomcat-users.xml\nRUN mkdir --parents /usr/local/tomee/conf/Catalina/localhost/\nCOPY CIMEar/manager.xml /usr/local/tomee/conf/Catalina/localhost/manager.xml\n\n# set up CIMApplication\nADD CIMEar/target/CIMApplication.ear /usr/local/tomee/apps/\nRUN echo 'openejb.deployments.classpath.include = .*ninecode.*' >> /usr/local/tomee/conf/system.properties\n\n# set up CORS\nRUN sed -i.bak \"s|</web-app>|\\\n  <!-- ==================== CORS support ==================== -->\\n\\\n  <!-- see http://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#CORS_Filter -->\\n\\\n    <filter>\\n\\\n        <filter-name>CorsFilter</filter-name>\\n\\\n        <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>\\n\\\n        <init-param>\\n\\\n          <param-name>cors.allowed.origins</param-name>\\n\\\n          <param-value>*</param-value>\\n\\\n        </init-param>\\n\\\n        <init-param>\\n\\\n            <param-name>cors.allowed.methods</param-name>\\n\\\n            <param-value>GET,POST,HEAD,OPTIONS,PUT,DELETE</param-value>\\n\\\n        </init-param>\\n\\\n    </filter>\\n\\\n    <filter-mapping>\\n\\\n        <filter-name>CorsFilter</filter-name>\\n\\\n        <url-pattern>/*</url-pattern>\\n\\\n    </filter-mapping>\\n\\n\\\n</web-app>|g\" /usr/local/tomee/conf/web.xml\n"
}