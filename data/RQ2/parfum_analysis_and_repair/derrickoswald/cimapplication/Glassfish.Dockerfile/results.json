{
  "startTime": 1674253815821,
  "endTime": 1674253816454,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 170
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedDockerfile": "# build:\n#   $ cd CIMApplication; mvn -DskipTests install; docker build --file Glassfish.Dockerfile --tag derrickoswald/cimapplication .\n# run:\n#   $ docker run --rm --publish 9080:9080 --net spark_default --link=\"spark_master:sandbox\" derrickoswald/cimapplication start-tomee sandbox beach\n# access:\n#   http://localhost:8080/cimweb/cim/ping\n#   http://localhost:8080/cimweb/cim/list\n\nFROM derrickoswald/spark-docker:latest\nLABEL maintainer = \"Derrick.Oswald@9code.ch\"\n\n# Install Cassandra\nRUN echo \"deb http://www.apache.org/dist/cassandra/debian 311x main\" | tee -a /etc/apt/sources.list.d/cassandra.sources.list\nRUN curl -f https://downloads.apache.org/cassandra/KEYS | apt-key add -\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq apt-transport-https ca-certificates && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update \\\n  && apt-key adv --keyserver pool.sks-keyservers.net --recv-key A278B781FE4B2BDA\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends cassandra && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean\nRUN  sed --in-place 's/enable_user_defined_functions: false/enable_user_defined_functions: true/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/enable_scripted_user_defined_functions: false/enable_scripted_user_defined_functions: true/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/read_request_timeout_in_ms: 5000/read_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/range_request_timeout_in_ms: 10000/range_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/write_request_timeout_in_ms: 2000/write_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/INFO/WARN/g' /etc/cassandra/logback.xml \\\n  && sed --in-place 's/level=\"DEBUG\"/level=\"WARN\"/g' /etc/cassandra/logback.xml \\\n  && sed --in-place 's/level=\"ERROR\"/level=\"WARN\"/g' /etc/cassandra/logback.xml\n\n# Cassandra ports\n# Cassandra storage_port\nEXPOSE 7000\n# Cassandra ssl_storage_port\nEXPOSE 7001\n# Cassandra JMX monitoring port\n# EXPOSE 7199\n# Cassandra native_transport_port\nEXPOSE 9042\n# Cassandra rpc_port\nEXPOSE 9160\n\nENV PATH /usr/local/tomee/bin:$PATH\nRUN mkdir -p /usr/local/tomee\n\nWORKDIR /usr/local/glassfish\n#\t&& curl --fail --show-error --location http://download.oracle.com/glassfish/${GLASS_VERSION}/release/glassfish-${GLASS_VERSION}.zip --output glassfish.zip \\\n\nRUN set -x \\\n\t&& export GLASS_MAJOR_VERSION=5 \\\n\t&& export GLASS_VERSION=5.0.1 \\\n\t&& curl --fail --show-error --location https://download.oracle.com/glassfish/${GLASS_VERSION}/nightly/glassfish-${GLASS_VERSION}-b05-01_23_2019.zip --output glassfish.zip \\\n\t&& unzip glassfish.zip \\\n\t&& mv glassfish${GLASS_MAJOR_VERSION}/* /usr/local/glassfish \\\n\t&& rm --recursive --force glassfish${GLASS_MAJOR_VERSION} \\\n\t&& rm /usr/local/glassfish/bin/*.bat \\\n\t&& rm /usr/local/glassfish/glassfish/bin/*.bat \\\n\t&& rm /usr/local/glassfish/javadb/bin/*.bat \\\n\t&& rm glassfish.zip*\n\n# a little more memory than 536870912 bytes\nRUN sed --in-place \"s|<jvm-options>-Xmx512m</jvm-options>|<jvm-options>-Xmx4g</jvm-options>|g\" /usr/local/glassfish/glassfish/domains/domain1/config/domain.xml\n\n# Default web UI\nRUN sed --in-place \"s|<network-listener port=\\\"8080\\\" protocol=\\\"http-listener-1\\\" transport=\\\"tcp\\\" name=\\\"http-listener-1\\\" thread-pool=\\\"http-thread-pool\\\"></network-listener>|<network-listener port=\\\"9080\\\" protocol=\\\"http-listener-1\\\" transport=\\\"tcp\\\" name=\\\"http-listener-1\\\" thread-pool=\\\"http-thread-pool\\\"></network-listener>|g\" /usr/local/glassfish/glassfish/domains/domain1/config/domain.xml\nEXPOSE 9080\nEXPOSE 4848\n\n# layers added for CIMApplication (do this last to speed up Docker build)\n\n# copy start script\nCOPY CIMEar/start-glassfish /opt/util/bin/start-glassfish\nCOPY CIMEar/simulation_schema.sql /opt/util/bin/simulation_schema.sql\n\n# set up CIMApplication\n# this doesn't work because of a bug loading the joda time jar:\n#    Exception while loading the app : Type org.joda.time.ReadableInstant not present\n# see https://stackoverflow.com/questions/46604406/when-jodatime-v-2-5-library-included-into-war-file-deployment-fails\n# see also: https://github.com/javaee/glassfish/blob/562677552f8b9325435101d9eda12a8ee3a8f457/appserver/connectors/connectors-runtime/src/main/java/com/sun/enterprise/connectors/module/ConnectorDeployer.java\nADD CIMEar/target/CIMApplication.ear /usr/local/glassfish/glassfish/domains/domain1/autodeploy\n# this fails with messages about CDI:\n#[#|2020-01-30T16:00:15.479+0000|SEVERE|glassfish 5.0|javax.enterprise.system.core|_ThreadID=65;_ThreadName=AutoDeployer;_TimeMillis=1580400015479;_LevelValue=1000;|\n#  Exception while loading the app : CDI deployment failure:null\n#java.lang.reflect.MalformedParameterizedTypeException\n\n# To set up the admin, you need to use the asadmin utility.\n# I don't know a way to drive the asadmin utility, other than with a redirect to stdin,\n# this is what need to be done:\n\n#root@glassfish:/usr/local/glassfish# bin/asadmin\n#Use \"exit\" to exit and \"help\" for online help.\n#asadmin> change-admin-password\n#Enter admin user name [default: admin]>      yes, it's admin\n#Enter the admin password>       note that it is initially no passowrd, i.e. blank, so just press return\n#Enter the new admin password>        note it silently doesn't echo Green1antern\n#Enter the new admin password again>       note here too Green1antern\n#Command change-admin-password executed successfully.\n#\n#asadmin> enable-secure-admin\n#Enter admin user name>  admin\n#Enter admin password for user \"admin\">       note that it's the Green1antern entered above\n#You must restart all running servers for the change in secure admin to take effect.\n#Command enable-secure-admin executed successfully.\n#\n#asadmin> stop-domain\n#asadmin> start-domain\n# But this fails with messages about class not found exception in the security (HTTPS) layer.\n\n## set up CORS\n#RUN sed -i.bak \"s|</web-app>|\\\n#  <!-- ==================== CORS support ==================== -->\\n\\\n#  <!-- see http://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#CORS_Filter -->\\n\\\n#    <filter>\\n\\\n#        <filter-name>CorsFilter</filter-name>\\n\\\n#        <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>\\n\\\n#        <init-param>\\n\\\n#          <param-name>cors.allowed.origins</param-name>\\n\\\n#          <param-value>*</param-value>\\n\\\n#        </init-param>\\n\\\n#        <init-param>\\n\\\n#            <param-name>cors.allowed.methods</param-name>\\n\\\n#            <param-value>GET,POST,HEAD,OPTIONS,PUT,DELETE</param-value>\\n\\\n#        </init-param>\\n\\\n#    </filter>\\n\\\n#    <filter-mapping>\\n\\\n#        <filter-name>CorsFilter</filter-name>\\n\\\n#        <url-pattern>/*</url-pattern>\\n\\\n#    </filter-mapping>\\n\\n\\\n#</web-app>|g\" /usr/local/tomee/conf/web.xml\n"
}