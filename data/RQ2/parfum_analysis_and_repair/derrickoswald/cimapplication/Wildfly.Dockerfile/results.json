{
  "startTime": 1674251580831,
  "endTime": 1674251582034,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 98
      }
    }
  ],
  "repairedDockerfile": "# build:\n#   $ cd CIMApplication; mvn -DskipTests install; docker build --file Wildfly.Dockerfile --tag derrickoswald/cimapplication .\n# run:\n#   $ docker run --rm --publish 9080:9080 --net spark_default --link=\"spark_master:sandbox\" derrickoswald/cimapplication start-wildfly sandbox beach\n# access:\n#   http://localhost:8080/cimweb/cim/ping\n#   http://localhost:8080/cimweb/cim/list\n\nFROM derrickoswald/spark-docker:latest\nLABEL maintainer = \"Derrick.Oswald@9code.ch\"\n\n# Install Cassandra\nRUN echo \"deb http://www.apache.org/dist/cassandra/debian 311x main\" | tee -a /etc/apt/sources.list.d/cassandra.sources.list\nRUN curl -f https://downloads.apache.org/cassandra/KEYS | apt-key add -\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install --yes --quiet apt-transport-https ca-certificates && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update \\\n  && apt-key adv --keyserver pool.sks-keyservers.net --recv-key A278B781FE4B2BDA\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --yes --quiet --no-install-recommends cassandra && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean\nRUN  sed --in-place 's/enable_user_defined_functions: false/enable_user_defined_functions: true/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/enable_scripted_user_defined_functions: false/enable_scripted_user_defined_functions: true/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/read_request_timeout_in_ms: 5000/read_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/range_request_timeout_in_ms: 10000/range_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/write_request_timeout_in_ms: 2000/write_request_timeout_in_ms: 100000/g' /etc/cassandra/cassandra.yaml \\\n  && sed --in-place 's/INFO/WARN/g' /etc/cassandra/logback.xml \\\n  && sed --in-place 's/level=\"DEBUG\"/level=\"WARN\"/g' /etc/cassandra/logback.xml \\\n  && sed --in-place 's/level=\"ERROR\"/level=\"WARN\"/g' /etc/cassandra/logback.xml\n\n# Cassandra ports\n# Cassandra storage_port\nEXPOSE 7000\n# Cassandra ssl_storage_port\nEXPOSE 7001\n# Cassandra JMX monitoring port\n# EXPOSE 7199\n# Cassandra native_transport_port\nEXPOSE 9042\n# Cassandra rpc_port\nEXPOSE 9160\n\nENV PATH /usr/local/wildfly/bin:$PATH\nRUN mkdir -p /usr/local/wildfly\n\nWORKDIR /usr/local/wildfly\n\nRUN set -x \\\n\t&& export WILDFLY_VERSION=19.0.0.Final \\\n\t&& curl --fail --show-error --location https://download.jboss.org/wildfly/${WILDFLY_VERSION}/wildfly-${WILDFLY_VERSION}.zip --output wildfly.zip \\\n\t&& unzip wildfly.zip \\\n\t&& mv wildfly-${WILDFLY_VERSION}/* /usr/local/wildfly \\\n\t&& rm --recursive --force wildfly-${WILDFLY_VERSION} \\\n\t&& rm /usr/local/wildfly/bin/*.bat \\\n\t&& rm wildfly.zip\n\n# a little more memory than 536870912 bytes\nRUN sed --in-place \"s|-Xmx512m|-Xmx4g|g\" /usr/local/wildfly/bin/standalone.conf\n\n# Default web UI\nRUN sed --in-place \"s|<socket-binding name=\\\"http\\\" port=\\\"\\${jboss.http.port:8080}\\\"/>|<socket-binding name=\\\"http\\\" port=\\\"\\${jboss.http.port:9080}\\\"/>|g\" /usr/local/wildfly/standalone/configuration/standalone.xml\nRUN sed --in-place \"s|<inet-address value=\\\"\\${jboss.bind.address:127.0.0.1}\\\"/>|<any-address/>|g\" /usr/local/wildfly/standalone/configuration/standalone.xml\nRUN sed --in-place \"s|<inet-address value=\\\"\\${jboss.bind.address.management:127.0.0.1}\\\"/>|<any-address/>|g\" /usr/local/wildfly/standalone/configuration/standalone.xml\nEXPOSE 9080\nEXPOSE 9990\n\n# layers added for CIMApplication (do this last to speed up Docker build)\n\n# copy start script\nCOPY CIMEar/start-wildfly /opt/util/bin/start-wildfly\nCOPY CIMEar/simulation_schema.sql /opt/util/bin/simulation_schema.sql\n\n# set up wildfly manager\nRUN /usr/local/wildfly/bin/add-user.sh wildfly Green1antern\n\n# Notes:\n# to change from logging INFO to TRACE:\n# edit standalone/configuration/standalone.xml\n#\n# Wildfly tries to load every native library contained in a jar file - WTF? and this crashes:\n#   SIGSEGV in ld-linux-x86-64.so\n# to avoid the crash, remove native libraries for platforms other than x86_64-Linux from:\n# - com.github.jnr.jffi\n# - org.apache.commons.commons-crypto\n\n# ToDo:\n# - raise issue with Wildfly about loading native libraries\n# - why are Net and Util jars sent to the cluster with package prefix names?\n# - set up CIMApplication\n# note, this doesn't work because because there is a conflict between JAX-RS providers (I think, call it a working hypothesis):\n#    JBOSS (Wildfly) comes with RestEasy as a JAX-RS provider\n#    Hadoop uses Jersey (version 1.9 ?) as a JAX-RS provider\n# this leads to the following error in deployment:\n#    ERROR [org.jboss.msc.service.fail] (MSC service thread 1-2) MSC000001: Failed to start service jboss.deployment.subunit.\"CIMApplication.ear\".\"CIMWeb.war\".INSTALL: org.jboss.msc.service.StartException in service jboss.deployment.subunit.\"CIMApplication.ear\".\"CIMWeb.war\".INSTALL: WFLYSRV0153: Failed to process phase INSTALL of subdeployment \"CIMWeb.war\" of deployment \"CIMApplication.ear\"\n#    Caused by: java.lang.NoClassDefFoundError: Failed to link org/apache/hadoop/hdfs/web/resources/UserProvider (Module \"deployment.CIMApplication.ear\" from Service Module Loader): com/sun/jersey/server/impl/inject/AbstractHttpContextInjectable\n# Tried various combinations of jboss-deployment-structure.xml in CIMEar META-INF with no success.\n#\nADD CIMEar/target/CIMApplication.ear /usr/local/wildfly/standalone/deployments/\n#RUN echo 'openejb.deployments.classpath.include = .*ninecode.*' >> /usr/local/tomee/conf/system.properties\n\n# set up CORS\n#RUN sed --in-place \"s|</web-app>|\\\n#  <!-- ==================== CORS support ==================== -->\\n\\\n#  <!-- see http://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#CORS_Filter -->\\n\\\n#    <filter>\\n\\\n#        <filter-name>CorsFilter</filter-name>\\n\\\n#        <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>\\n\\\n#        <init-param>\\n\\\n#          <param-name>cors.allowed.origins</param-name>\\n\\\n#          <param-value>*</param-value>\\n\\\n#        </init-param>\\n\\\n#        <init-param>\\n\\\n#            <param-name>cors.allowed.methods</param-name>\\n\\\n#            <param-value>GET,POST,HEAD,OPTIONS,PUT,DELETE</param-value>\\n\\\n#        </init-param>\\n\\\n#    </filter>\\n\\\n#    <filter-mapping>\\n\\\n#        <filter-name>CorsFilter</filter-name>\\n\\\n#        <url-pattern>/*</url-pattern>\\n\\\n#    </filter-mapping>\\n\\n\\\n#</web-app>|g\" /usr/local/tomee/conf/web.xml\n"
}