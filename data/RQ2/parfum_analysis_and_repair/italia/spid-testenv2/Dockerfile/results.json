{
  "startTime": 1674219847929,
  "endTime": 1674219848478,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-slim\n\n# Install prerequisites\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        ca-certificates \\\n        xmlsec1 \\\n        libffi6 \\\n        build-essential \\\n        libpq-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# We copy just the requirements.txt first to leverage Docker cache\n# (avoid rebuilding the requirements layer when application changes)\nCOPY ./requirements.txt /app/requirements.txt\nWORKDIR /app\nRUN pip install --no-cache-dir -r requirements.txt\n\n# When started, the container checks for the required configuration files\n# and if it can't find them, it uses the example files to make the server\n# start.\n#\n# The example files won't be available if the user rebinds /app/conf,\n# so we make a copy somewhere else.\nCOPY conf/*.example conf/*.example /usr/local/share/spid-testenv2/\n\n# Copy the full application in a single layer\nCOPY . /app\n\nEXPOSE 8088\nVOLUME /app/conf\n\nENTRYPOINT [\"/app/entrypoint.sh\"]\nCMD [\"python\", \"spid-testenv.py\"]\n"
}