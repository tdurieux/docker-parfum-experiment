{
  "startTime": 1674246155745,
  "endTime": 1674246157589,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 7,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##################################################################\n# Use Ubuntu 16.04 LTS as base image\n##################################################################\nFROM ubuntu:xenial-20210804 AS main\n\n##################################################################\n# Pre-cache neurodebian key\n##################################################################\nCOPY docker/files/neurodebian.gpg /root/.neurodebian.gpg\n\n##################################################################\n# Install system library dependencies including\n# exfat libraries for exfat-formatted hard-drives (only MAC?) :\n# exfat-fuse exfat-utils Neurodebian\n##################################################################\nRUN apt-get update && \\\n    apt-get install --no-install-recommends software-properties-common -y && \\\n    apt-get install -qq -y --no-install-recommends bc \\\n    locales libstdc++6 npm curl perl gzip bzip2 xvfb liblzma-dev locate exfat-fuse exfat-utils default-jre && \\\n    curl -f -sSL https://neuro.debian.net/lists/xenial.us-ca.full >> /etc/apt/sources.list.d/neurodebian.sources.list && \\\n    apt-key add /root/.neurodebian.gpg && \\\n    (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true) && \\\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \\\n    apt-get update && \\\n    apt-get clean && \\\n    apt-get remove -y curl && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n##################################################################\n## Install freesurfer 7.1.1, FSL and AFNI\n##################################################################\nFROM main AS neurobuntu\n\n# Installing Freesurfer\nWORKDIR /opt/freesurfer\n\n# Download and install\nRUN apt-get update && \\\n    apt-get install -qq -y --no-install-recommends curl && \\\n    curl -f -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.1.1/freesurfer-linux-centos6_x86_64-7.1.1.tar.gz | tar zxv --no-same-owner -C /opt \\\n    --exclude='freesurfer/diffusion' \\\n    --exclude='freesurfer/docs' \\\n    --exclude='freesurfer/fsfast' \\\n    --exclude='freesurfer/trctrain' \\\n    --exclude='freesurfer/subjects/fsaverage_sym' \\\n    --exclude='freesurfer/subjects/fsaverage3' \\\n    --exclude='freesurfer/subjects/fsaverage4' \\\n    --exclude='freesurfer/subjects/cvs_avg35' \\\n    --exclude='freesurfer/subjects/cvs_avg35_inMNI152' \\\n    --exclude='freesurfer/subjects/bert' \\\n    --exclude='freesurfer/subjects/V1_average' \\\n    --exclude='freesurfer/average/mult-comp-cor' \\\n    --exclude='freesurfer/subjects/lh.EC_average' \\\n    --exclude='freesurfer/subjects/rh.EC_average' \\\n    --exclude='freesurfer/subjects/sample-*.mgz' \\\n    --exclude='freesurfer/lib/cuda' \\\n    --exclude='freesurfer/lib/qt' && \\\n    apt-get remove -y curl && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Installing the Matlab R2014b\n# Required by the brainstem and hippocampal subfield modules in FreeSurfer 7.1.1\nWORKDIR /opt/freesurfer/bin\n\nENV OS=\"Linux\" FREESURFER_HOME=\"/opt/freesurfer\"\nRUN apt-get update && \\\n    apt-get install -qq -y --no-install-recommends curl libxt-dev libxext-dev libncurses5 unzip && \\\n    curl -f \"https://raw.githubusercontent.com/freesurfer/freesurfer/dev/scripts/fs_install_mcr\" -o fs_install_mcr && \\\n    ls -al . && \\\n    chmod +x ./fs_install_mcr && \\\n    ./fs_install_mcr R2014b && \\\n    rm -rf ./fs_install_mcr ./R2014b && \\\n    apt-get remove -y curl && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Installing Neurodebian packages (FSL, AFNI)\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    dc wget \\\n    fsl-core=5.0.9-5~nd16.04+1 \\\n    fsl-mni152-templates=5.0.7-2 \\\n    fsl-5.0-eddy-nonfree \\\n    afni=16.2.07~dfsg.1-5~nd16.04+1 && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Patch that replaces replace aff2rigid fsl_abspath fsladd imglob\n# for python3 compatibility\nWORKDIR /tmp\nENV FSLDIR=\"/usr/share/fsl/5.0\"\nRUN wget https://fsl.fmrib.ox.ac.uk/fsldownloads/patches/fsl-5.0.10-python3.tar.gz \\\n    && tar -zxvf ./fsl-5.0.10-python3.tar.gz \\\n    && cp ./fsl/bin/* \"$FSLDIR/bin/\" \\\n    && rm -r ./fsl* && rm ./fsl-5.0.10-python3.tar.gz\n\n# Mark a package as being manually installed, which will\n# prevent the package from being automatically removed if no other packages\n# depend on it\n#RUN apt-mark manual package_name\n\n##################################################################\n## Install Miniconda3 and the environment incl. ANTs and MRtrix\n##################################################################\nFROM main AS neurocondabuntu\n\n# Add conda to $PATH\nENV PATH=\"/opt/conda/bin:$PATH\"\n\n# Install Miniconda3\nRUN apt-get update && \\\n    apt-get install -qq -y --no-install-recommends curl && \\\n    curl -f -sSL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o /tmp/miniconda.sh && \\\n    bash /tmp/miniconda.sh -bfp /opt/conda && \\\n    rm -rf /tmp/miniconda.sh && \\\n    apt-get remove -y curl && \\\n    conda update conda && \\\n    conda clean --all --yes && \\\n    rm -rf ~/.conda ~/.cache/pip/* && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n## Create conda environment, including ANTs 2.2.0 and MRtrix 3.0.2\nENV CONDA_ENV=\"py37cmp-core\"\nCOPY docker/spec-file.txt /app/spec-file.txt\nCOPY docker/requirements.txt /app/requirements.txt\nRUN /bin/bash -c \"conda config --set default_threads 4 &&\\\n    conda create --name ${CONDA_ENV} --file /app/spec-file.txt &&\\\n    . activate ${CONDA_ENV} &&\\\n    pip install -r /app/requirements.txt &&\\\n    conda clean -v --all --yes &&\\\n    rm -rf ~/.conda ~/.cache/pip/*\"\n\n##################################################################\n# Install BIDS validator\n##################################################################\n# RUN npm install -g bids-validator && \\\n#     rm -rf ~/.npm ~/.empty\n\n##################################################################\n# Installation of Connectome Mapper 3 packages\n##################################################################\nFROM neurocondabuntu AS cmpbuntu\n\n# Docker build command arguments\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\n# Copy content of neurobuntu intermediate stage build\nCOPY --from=neurobuntu /opt/freesurfer /opt/freesurfer\nCOPY --from=neurobuntu /etc /etc\nCOPY --from=neurobuntu /usr/lib /usr/lib\nCOPY --from=neurobuntu /usr/bin /usr/bin\nCOPY --from=neurobuntu /usr/sbin /usr/sbin\nCOPY --from=neurobuntu /usr/local/bin /usr/local/bin\nCOPY --from=neurobuntu /usr/local/sbin /usr/local/sbin\nCOPY --from=neurobuntu /bin /bin\nCOPY --from=neurobuntu /sbin /sbin\n\nCOPY --from=neurobuntu /usr/share/fsl /usr/share/fsl\nCOPY --from=neurobuntu /usr/share/afni /usr/share/afni\nCOPY --from=neurobuntu /usr/share/man /usr/share/man\nCOPY --from=neurobuntu /usr/share/matlab /usr/share/matlab\nCOPY --from=neurobuntu /usr/share/octave /usr/share/octave\n\n# Set the working directory to /app/connectomemapper3\nWORKDIR /app/connectomemapper3\n\n# Copy Python contents of this repository.\nCOPY LICENSE ./LICENSE\nCOPY setup.py ./setup.py\nCOPY README.md ./README.md\nCOPY cmp ./cmp\nCOPY cmtklib ./cmtklib\nCOPY resources ./resources\nCOPY run.py ../run.py\nCOPY .coveragerc ../.coveragerc\n\n# Create cache directory for python eggs\nRUN mkdir -p /cache/python-eggs && \\\n    chmod -R 777 /cache/python-eggs\n\n# Install cmp and cmtklib packages in the conda environment $CONDA_ENV\nENV CONDA_ENV=\"py37cmp-core\"\nRUN /bin/bash -c \". activate ${CONDA_ENV} &&\\\n    pip install .\"\n\n##################################################################\n# Copy primary BIDSapp entrypoint script\n##################################################################\nCOPY scripts/bidsapp/run_cmp3.sh /app/run_cmp3.sh\nRUN cat /app/run_cmp3.sh\n\n##################################################################\n# Copy secondary BIDSapp entrypoint script with code coverage\n##################################################################\nCOPY scripts/bidsapp/run_coverage_cmp3.sh /app/run_coverage_cmp3.sh\nRUN cat /app/run_coverage_cmp3.sh\n\n##################################################################\n# Acquire script to be executed\n##################################################################\nRUN chmod 775 /app/.coveragerc && \\\n    chmod 775 /app/run.py && \\\n    chmod 775 /app/run_cmp3.sh && \\\n    chmod 775 /app/run_coverage_cmp3.sh && \\\n    chmod 777 /opt/freesurfer\n\n##################################################################\n# Add conda to $PATH\n##################################################################\nENV PATH=\"/opt/conda/bin:$PATH\"\n\n##################################################################\n# Simulate SetUpFreeSurfer.sh\n##################################################################\nENV OS=\"Linux\" \\\n    FS_OVERRIDE=0 \\\n    FIX_VERTEX_AREA=\"\" \\\n    FSF_OUTPUT_FORMAT=\"nii.gz\" \\\n    FREESURFER_HOME=\"/opt/freesurfer\"\nENV SUBJECTS_DIR=\"$FREESURFER_HOME/subjects\" \\\n    FUNCTIONALS_DIR=\"$FREESURFER_HOME/sessions\" \\\n    MNI_DIR=\"$FREESURFER_HOME/mni\" \\\n    LOCAL_DIR=\"$FREESURFER_HOME/local\" \\\n    MINC_BIN_DIR=\"$FREESURFER_HOME/mni/bin\" \\\n    MINC_LIB_DIR=\"$FREESURFER_HOME/mni/lib\" \\\n    MNI_DATAPATH=\"$FREESURFER_HOME/mni/data\"\nENV PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    MNI_PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    PATH=\"$FREESURFER_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH\"\n\n##################################################################\n# Setting AFNI envvars\n##################################################################\nENV PATH=\"/usr/lib/afni/bin:$PATH\" \\\n    AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\n\n##################################################################\n# Setting FSL envvars\n##################################################################\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    PATH=\"/usr/lib/fsl/5.0:$PATH\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\"\n\n##################################################################\n# Make ANTs happy\n##################################################################\nENV ANTSPATH=\"/opt/conda/envs/${CONDA_ENV}/bin\" \\\n    PYTHONPATH=\"/opt/conda/envs/${CONDA_ENV}/bin\" \\\n    PYTHON_EGG_CACHE=\"/cache/python-eggs\" \\\n    PATH=\"$ANTSPATH:$PATH\" \\\n    LD_LIBRARY_PATH=\"/opt/conda/envs/${CONDA_ENV}/lib:${LD_LIBRARY_PATH}\" \\\n    LD_LIBRARY_PATH=\"/lib/x86_64-linux-gnu:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH\"\n\n##################################################################\n# Temporary tmp folder\n##################################################################\nRUN /bin/bash -c \"mkdir -p /var/tmp\"\nENV TMPDIR=\"/var/tmp\" \\\n    TMP=\"/var/tmp\" \\\n    TEMP=\"/var/tmp\"\n\n##################################################################\n# Create input and output directories for BIDS App\n##################################################################\nRUN mkdir /bids_dir && \\\n    mkdir /output_dir && \\\n    chmod -R 777 /bids_dir && \\\n    chmod -R 777 /output_dir\n\n##################################################################\n# Define Freesurfer license\n##################################################################\nENV FS_LICENSE=\"/bids_dir/code/license.txt\"\n\n##################################################################\n# Set locale settings\n##################################################################\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\n\n##################################################################\n# Unless otherwise specified each process should only use one\n# thread - nipype will handle parallelization\n##################################################################\nENV MKL_NUM_THREADS=1 \\\n    OMP_NUM_THREADS=1\n\n##################################################################\n# Control random number generation\n##################################################################\n# Control MRTrix random number generation (RDG) for replicatable probabilistic tractography\n# See https://community.mrtrix.org/t/random-number-generator/2063 for more details\n# ENV MRTRIX_RNG_SEED=1234\n\n# Control ANTs random number generation (RDG) and multithreading\n# See https://github.com/ANTsX/ANTs/wiki/antsRegistration-reproducibility-issues for more details\n# ENV ANTS_RANDOM_SEED=1234\n# ENV ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS\n\n##################################################################\n# Run ldconfig for compatibility with Singularity\n##################################################################\nRUN ldconfig\n\n##################################################################\n# Show all environment variables\n##################################################################\nRUN export\n\n##################################################################\n# Define primary entryppoint script\n##################################################################\nWORKDIR /tmp/\nENTRYPOINT [\"/app/run_cmp3.sh\"]\n\n##################################################################\n# Copy version information\n##################################################################\n# COPY version /version\n\n##################################################################\n# Metadata\n##################################################################\nLABEL org.label-schema.build-date=${BUILD_DATE} \\\n      org.label-schema.name=\"Connectome Mapper BIDS App\" \\\n      org.label-schema.description=\"Connectome Mapper BIDS App - the processing core of Connectome Mapper 3\" \\\n      org.label-schema.url=\"https://connectome-mapper-3.readthedocs.io\" \\\n      org.label-schema.vcs-ref=${VCS_REF} \\\n      org.label-schema.vcs-url=\"https://github.com/connectomicslab/connectomemapper3\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.maintainer=\"Sebastien Tourbier <sebastien.tourbier@alumni.epfl.ch>\" \\\n      org.label-schema.vendor=\"Connectomics Lab, Centre Hospitalier Universitaire Vaudois (CHUV), Lausanne, Switzerland\" \\\n      org.label-schema.schema-version=\"1.0\" \\\n      org.label-schema.docker.cmd=\"docker run --rm -v ~/data/bids_dataset:/bids_dir -t sebastientourbier/connectomemapper-bidsapp:${VERSION} /bids_dir /bids_dir/derivatives participant [--participant_label PARTICIPANT_LABEL [PARTICIPANT_LABEL ...]] [-session_label SESSION_LABEL [SESSION_LABEL ...]] [--anat_pipeline_config ANAT_PIPELINE_CONFIG] [--dwi_pipeline_config DWI_PIPELINE_CONFIG] [--func_pipeline_config FUNC_PIPELINE_CONFIG]  [--number_of_participants_processed_in_parallel NUMBER_OF_PARTICIPANTS_PROCESSED_IN_PARALLEL] [--fs_license FS_LICENSE]\" \\\n"
}