{
  "startTime": 1674246730263,
  "endTime": 1674246731455,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 15,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 138,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 23,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-devel-ubuntu18.04 as ffmpeg-builder\n\n# https://github.com/NVIDIA/nvidia-docker/issues/969\nRUN rm /etc/apt/sources.list.d/nvidia-ml.list\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y curl git pkg-config yasm libx264-dev checkinstall \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install nv-codec-headers for FFmpeg NVIDIA hardware acceleration\nRUN cd /tmp \\\n && git clone --branch n9.0.18.1 --single-branch --depth 1 \\\n    https://github.com/FFmpeg/nv-codec-headers.git \\\n && cd nv-codec-headers \\\n && make && make install \\\n && rm -rf /tmp/nv-codec-headers\n\n# Build FFmpeg, enabling only selected features\nARG FFMPEG_VERSION=4.2.2\nRUN cd /tmp && curl -f -sLO http://ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && rm ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && cd ffmpeg-$FFMPEG_VERSION \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n    --disable-static \\\n    --enable-shared \\\n    --enable-gpl \\\n    --disable-iconv \\\n    --disable-doc \\\n    --disable-ffplay \\\n && make -j8 \\\n && checkinstall -y --nodoc --install=no \\\n && mv ffmpeg_$FFMPEG_VERSION-1_amd64.deb /ffmpeg.deb \\\n && cd /tmp && rm -rf ffmpeg-$FFMPEG_VERSION\n\n\n################################################################################\n\n\nFROM nvidia/cuda:10.0-devel-ubuntu18.04 as tvl-builder\n\n# https://github.com/NVIDIA/nvidia-docker/issues/969\nRUN rm /etc/apt/sources.list.d/nvidia-ml.list\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y curl git \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install Miniconda and Python 3.6.13\nENV CONDA_AUTO_UPDATE_CONDA=false\nENV PATH=/root/miniconda/bin:$PATH\nRUN curl -f -sLo ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-py39_4.10.3-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p ~/miniconda \\\n && rm ~/miniconda.sh \\\n && conda install -y python==3.6.13 \\\n && conda clean -ya\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y pkg-config \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install project requirements\nCOPY environment.yml /tmp/environment.yml\nRUN conda env update -n base -f /tmp/environment.yml \\\n && conda clean -ya \\\n && rm /tmp/environment.yml\n\n# Install FFmpeg\nCOPY --from=ffmpeg-builder /ffmpeg.deb /tmp/ffmpeg.deb\nRUN dpkg -i /tmp/ffmpeg.deb && rm /tmp/ffmpeg.deb\n\n# Add a stub version of libnvcuvid.so for building (required for CUDA backends).\n# This library is provided by nvidia-docker at runtime when the environment variable\n# NVIDIA_DRIVER_CAPABILITIES includes \"video\".\nRUN curl -f -sLo /usr/lib/x86_64-linux-gnu/libnvcuvid.so.1 \\\n    https://raw.githubusercontent.com/NVIDIA/nvvl/bde20830cf171af8d10ef8222449237382b178ef/pytorch/test/docker/libnvcuvid.so \\\n && ln -s /usr/local/nvidia/lib64/libnvcuvid.so.1 /usr/local/lib/libnvcuvid.so \\\n && ln -s libnvcuvid.so.1 /usr/lib/x86_64-linux-gnu/libnvcuvid.so\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY . /app\nRUN make dist\n\n\n################################################################################\n\n\nFROM nvidia/cuda:10.0-devel-ubuntu18.04\n\n# https://github.com/NVIDIA/nvidia-docker/issues/969\nRUN rm /etc/apt/sources.list.d/nvidia-ml.list\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y curl git \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install Miniconda and Python 3.6.13\nENV CONDA_AUTO_UPDATE_CONDA=false\nENV PATH=/root/miniconda/bin:$PATH\nRUN curl -f -sLo ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-py39_4.10.3-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p ~/miniconda \\\n && rm ~/miniconda.sh \\\n && conda install -y python==3.6.13 \\\n && conda clean -ya\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y pkg-config \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install project requirements\nCOPY environment.yml /tmp/environment.yml\nRUN conda env update -n base -f /tmp/environment.yml \\\n && conda clean -ya \\\n && rm /tmp/environment.yml\n\n# Install X display server client\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y libx11-6 \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install FFmpeg\nCOPY --from=ffmpeg-builder /ffmpeg.deb /tmp/ffmpeg.deb\nRUN dpkg -i /tmp/ffmpeg.deb && rm /tmp/ffmpeg.deb\n\nRUN mkdir /app\nWORKDIR /app\n\n# Install OpenCV dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y libsm6 libxext6 libxrender1 \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install tvl\nCOPY --from=tvl-builder /app/dist/tvl*.whl /tmp/\nRUN pip install --no-cache-dir -f /tmp \\\n    tvl \\\n    tvl-backends-nvdec \\\n    tvl-backends-opencv \\\n    tvl-backends-pyav \\\n    tvl-backends-fffr \\\n  && rm /tmp/tvl*.whl\n\nCOPY . /app\n\nENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility\n\nCMD [\"make\", \"test\"]\n"
}