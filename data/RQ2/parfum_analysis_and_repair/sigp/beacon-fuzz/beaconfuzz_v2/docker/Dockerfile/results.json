{
  "startTime": 1674249112878,
  "endTime": 1674249115425,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 99,
        "lineEnd": 100,
        "columnStart": 1,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 109,
        "columnStart": 1,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 137,
        "lineEnd": 138,
        "columnStart": 1,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 14,
        "columnStart": 1,
        "columnEnd": 5
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 26,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 48,
        "columnStart": 1,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 69,
        "lineEnd": 92,
        "columnStart": 1,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 99,
        "lineEnd": 100,
        "columnStart": 1,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 109,
        "columnStart": 1,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 137,
        "lineEnd": 138,
        "columnStart": 1,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 AS build\n\nARG RUST_TOOLCHAIN=\"nightly\"\nENV CARGO_HOME=/usr/local/rust\nENV RUSTUP_HOME=/usr/local/rust\nENV PATH=\"$PATH:$CARGO_HOME/bin\"\n\n# Update ubuntu\n# Install dependencies\nRUN apt-get update && \\\n\tapt-get install -y --no-install-recommends \\\n\t\tbuild-essential \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\tgit && rm -rf /var/lib/apt/lists/*;\n\n# Install Rust and Cargo\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\"\n\n#####################################\n############ lighthouse #################\n\n# Install dependencies\nRUN apt-get update && \\\n\tapt-get install -y --no-install-recommends \\\n\t\tpkg-config \\\n\t\tlibssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# Clone lighthouse\nRUN git clone \\\n\t--branch \"master\" \\\n\t--recursive \\\n\t--depth 1 \\\n\thttps://github.com/sigp/lighthouse\n\n#####################################\n############ nimbus #################\n\nWORKDIR /\n\nARG NIMBUS_GIT_BRANCH=\"devel\"\nARG PRESET=\"mainnet\"\n\n# Update ubuntu\nRUN apt-get update && \\\n\tapt-get install -y --no-install-recommends \\\n\t\tcmake \\\n\t\tlibpcre3-dev \\\n\t\tclang && rm -rf /var/lib/apt/lists/*;\n\n# Clone the project\nRUN git clone \\\n\t--branch \"$NIMBUS_GIT_BRANCH\" \\\n\t--recursive \\\n \t--depth 1 \\\n\thttps://github.com/status-im/nimbus-eth2\n\nWORKDIR /nimbus-eth2\n\n# Build nimbus\nRUN NIMFLAGS=\"-d:disableLTO\" make libnfuzz.so libnfuzz.a\n\n#####################################\n############ prysm #################\n\nWORKDIR /prysm\n\n# Update ubuntu\nRUN apt-get update && \\\n\tapt-get install -y --no-install-recommends \\\n\t\tca-certificates \\\n\t\tsoftware-properties-common \\\n\t\tcurl \\\n\t\tgit \\\n\t\tgpg-agent \\\n\t\tbuild-essential \\\n\t\tpkg-config \\\n\t\tlibssl-dev \\\n\t\tbuild-essential \\\n\t\tlibtool-bin \\\n\t\tpython3-dev \\\n\t\tautomake \\\n\t\tflex \\\n\t\tbison \\\n\t\tlibglib2.0-dev \\\n\t\tlibpixman-1-dev \\\n\t\tclang \\\n\t\tpython3-setuptools \\\n\t\tllvm \\\n\t\tbinutils-dev \\\n\t\tlibunwind-dev \\\n\t\tlibblocksruntime-dev \\\n\t\tcmake && rm -rf /var/lib/apt/lists/*;\n\n\n\n# Install golang\nRUN add-apt-repository ppa:longsleep/golang-backports\nRUN apt-get update && \\\n\tapt-get install --no-install-recommends -y \\\n\tgolang && rm -rf /var/lib/apt/lists/*;\n\n# Install Bazel\nRUN curl -f https://bazel.build/bazel-release.pub.gpg | \\\n\tapt-key add -\nRUN echo \"deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8\" | tee /etc/apt/sources.list.d/bazel.list\nRUN apt-get update && \\\n\tapt-get install --no-install-recommends -y \\\n\t\tbazel \\\n   bazel-3.7.0 && rm -rf /var/lib/apt/lists/*;\n\n# Copy all\nCOPY libs/pfuzz /prysm/pfuzz/\n\n# Setup golang path\nENV GOPATH=\"/prysm\"\n\n# Get all golang dependencies\n# RUN cd /prysm/ && go get -u github.com/prysmaticlabs/prysm || true\n\n# Build prysm with bazel\n# RUN cd /prysm/src/github.com/prysmaticlabs/prysm/ && bazel build\n\n# Compile pfuzz lib\n# RUN cd /prysm/pfuzz/ && go get . || true\n# RUN cd /prysm/pfuzz/ && go build -o libpfuzz.a -tags=blst_enabled -buildmode=c-archive pfuzz.go\n\n\n#####################################\n############ teku #################\n\nWORKDIR /\n\nARG TEKU_GIT_BRANCH=\"0.12.9\"\n\n# Update ubuntu\nRUN apt-get update && \\\n\tapt-get install --no-install-recommends -y \\\n\t\topenjdk-11-jdk clang openjdk-11-jre build-essential default-jdk && rm -rf /var/lib/apt/lists/*;\n\n# set teku environment variables\n# RUN export JAVA_HOME=\"$(dirname $(dirname $(readlink -f $(command -v java))))\"\nENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\n\nENV LD_LIBRARY_PATH=$JAVA_HOME/lib/server\n\n# Clone the project\nRUN git clone \\\n\t--branch \"$TEKU_GIT_BRANCH\" \\\n\t--recursive \\\n \t--depth 1 \\\n\thttps://github.com/PegaSysEng/teku.git\n\nWORKDIR /teku\n\n# Build teku\n# RUN BFUZZ_TEKU_DIR=\"$(realpath -e .)\" && export BFUZZ_TEKU_DIR\nENV BFUZZ_TEKU_DIR=/teku/\n\nRUN ./gradlew installDist fuzz:build -x test --stacktrace\n\n#####################################\n########### Rust fuzzer #############\n\n# Install Rust fuzzer\nRUN cargo install honggfuzz\nRUN cargo install cargo-fuzz\nRUN cargo install afl\n\n#####################################\n############ eth2fuzz ###############\n\nWORKDIR /beacon-fuzz/beaconfuzz_v2\n\n# Copy all\nCOPY . .\n\n# Build the CLI tool\nRUN make build-docker\n\nENTRYPOINT [\"/beacon-fuzz/beaconfuzz_v2/beaconfuzz_v2\"]"
}