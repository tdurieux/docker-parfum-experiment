{
  "startTime": 1674219989878,
  "endTime": 1674219990558,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=debian:bullseye-slim\n\n# Mutli-stage build to keep final image small. Otherwise end up with\n# curl and openssl installed\nFROM --platform=$BUILDPLATFORM $BASE_IMAGE AS stage1\nARG VERSION=0.24.0\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    bzip2 \\\n    ca-certificates \\\n    curl \\\n    && rm -rf /var/lib/{apt,dpkg,cache,log} && rm -rf /var/lib/apt/lists/*;\nARG TARGETARCH\nRUN test \"$TARGETARCH\" = 'amd64' && export ARCH='64'; \\\n    test \"$TARGETARCH\" = 'arm64' && export ARCH='aarch64'; \\\n    test \"$TARGETARCH\" = 'ppc64le' && export ARCH='ppc64le'; \\\n    curl -f -L \"https://micromamba.snakepit.net/api/micromamba/linux-${ARCH}/${VERSION}\" | \\\n    tar -xj -C \"/tmp\" \"bin/micromamba\"\n\nFROM $BASE_IMAGE\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nENV ENV_NAME=\"base\"\nENV MAMBA_ROOT_PREFIX=\"/opt/conda\"\nENV MAMBA_EXE=\"/bin/micromamba\"\n\nCOPY --from=stage1 /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=stage1 /tmp/bin/micromamba \"$MAMBA_EXE\"\n\nARG MAMBA_USER=mambauser\nARG MAMBA_USER_ID=1000\nARG MAMBA_USER_GID=1000\nENV MAMBA_USER=$MAMBA_USER\n\nCOPY _dockerfile_initialize_user_accounts.sh /usr/local/bin/_dockerfile_initialize_user_accounts.sh\nCOPY _dockerfile_setup_root_prefix.sh /usr/local/bin/_dockerfile_setup_root_prefix.sh\n\nRUN /usr/local/bin/_dockerfile_initialize_user_accounts.sh && \\\n    /usr/local/bin/_dockerfile_setup_root_prefix.sh\n\nUSER $MAMBA_USER\n\nWORKDIR /tmp\n\n# Script which launches commands passed to \"docker run\"\nCOPY _entrypoint.sh /usr/local/bin/_entrypoint.sh\nCOPY _activate_current_env.sh /usr/local/bin/_activate_current_env.sh\nENTRYPOINT [\"/usr/local/bin/_entrypoint.sh\"]\n\n# Default command for \"docker run\"\nCMD [\"/bin/bash\"]\n\n# Script which launches RUN commands in Dockerfile\nCOPY _dockerfile_shell.sh /usr/local/bin/_dockerfile_shell.sh\nSHELL [\"/usr/local/bin/_dockerfile_shell.sh\"]\n"
}