{
  "startTime": 1674256093876,
  "endTime": 1674256095353,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 60,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 25,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 25,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 25,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 26,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 22,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 25,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 85,
        "lineEnd": 87,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 96,
        "columnStart": 22,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 101,
        "lineEnd": 102,
        "columnStart": 25,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 119,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n################################################################################\n# Environment variables (required for installation)\n# NOTE: environment variables not required for installation can be placed in\n# `Configurations` section.\n################################################################################\n\nENV DEBIAN_FRONTEND noninteractive\nENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn\n\nARG UNAGI_PASSWORD\nRUN [ \"${UNAGI_PASSWORD}\" != '' ]\nENV UNAGI_PASSWORD=$UNAGI_PASSWORD\n\nENV RUSTUP_HOME=/usr/local/rustup\nENV CARGO_HOME=/usr/local/cargo\nENV PATH=/work/bin:/usr/local/cargo/bin:/usr/local/go/bin:$PATH\nENV GOROOT=/usr/local/go\nENV GOPATH=/go\n\n################################################################################\n# Installation\n################################################################################\n\n# Use GCP apt.\nRUN sed -i.bak -e \"s%http://archive.ubuntu.com/ubuntu/%http://asia-northeast1.gce.archive.ubuntu.com/ubuntu/%g\" /etc/apt/sources.list\n\n# Install fundamental tools.\nRUN apt-get update -q && apt-get install --no-install-recommends -qy apt-utils curl && \\\n    apt-get clean -q && rm -rf /var/lib/apt/lists/*\n\n# Do not exclude man pages & other documentation\nRUN rm /etc/dpkg/dpkg.cfg.d/excludes\n# Reinstall all currently installed packages in order to get the man pages back\nRUN apt-get update -q && \\\n    dpkg -l | grep ^ii | cut -d' ' -f3 | \\\n        xargs apt-get install -qy --reinstall && \\\n    apt-get clean -q && rm -rf /var/lib/apt/lists/*\n\n# Install C++.\nRUN apt-get update -q && apt-get install --no-install-recommends -qy clang clang-format g++ && \\\n    apt-get clean -q && rm -rf /var/lib/apt/lists/*\n\n# Install C#.\nRUN apt-get update -q && apt-get install --no-install-recommends -qy gnupg ca-certificates && \\\n    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 \\\n        --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \\\n    echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" \\\n        > /etc/apt/sources.list.d/mono-official-stable.list && \\\n    apt-get update -qy && apt-get install --no-install-recommends -qy mono-devel && \\\n    apt-get clean -q && rm -rf /var/lib/apt/lists/*\n\n# Install Java.\nRUN apt-get update && apt-get install --no-install-recommends -y default-jre default-jdk && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install Bazel.\nRUN apt-get update -q && apt-get install --no-install-recommends -qy unzip && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* && \\\n    curl -f -L -o installer \\\n    \"https://github.com/bazelbuild/bazel/releases/download/0.26.1/bazel-0.26.1-installer-linux-x86_64.sh\" && \\\n    chmod +x installer && ./installer && rm ./installer && \\\n    echo 'source /usr/local/lib/bazel/bin/bazel-complete.bash' > /etc/profile.d/99-bazel-complete.sh && \\\n    chmod +x /etc/profile.d/99-bazel-complete.sh\n\n# Install Rust.\nRUN set -eux; \\\n    curl -f -o rustup-init \"https://static.rust-lang.org/rustup/archive/1.12.0/x86_64-unknown-linux-gnu/rustup-init\"; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --default-toolchain 1.35.0; \\\n    rm rustup-init; \\\n    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \\\n    rustup --version; cargo --version; rustc --version\n\n# Install Go.\nRUN curl -f -o go.tar.gz https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz && \\\n    tar -xf go.tar.gz && \\\n    mv go /usr/local/ && \\\n    rm go.tar.gz && \\\n    mkdir -p /go/src && \\\n    echo 'GOROOT=\"/usr/local/go\"' >> /etc/environment && \\\n    echo 'GOPATH=\"/go\"' >> /etc/environment\n\n# Install scripts (python, php, ruby).\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n        php-cli php-mysql php-curl php-pear \\\n        python python-pip python3 python3-pip ruby && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install other useful tools.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential devscripts ubuntu-standard software-properties-common \\\n        screen lxc traceroute gdb \\\n        vim git subversion mercurial cmake make \\\n        dos2unix nkf curl xz-utils graphviz imagemagick \\\n        openssh-server sudo autoconf automake libtool make unzip net-tools && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\nRUN mkdir -p /var/run/sshd\n\n# Install protobuf.\nRUN apt-get update -q && apt-get install --no-install-recommends -qy \\\n        libprotobuf-dev libprotoc-dev protobuf-compiler && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Set locale to suppress an sshd warning.\nRUN echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale\n\n# Install additional packages.\nRUN apt-get update && apt-get install --no-install-recommends -y libssl-dev && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install gcloud.\nRUN echo \"deb http://packages.cloud.google.com/apt\" \\\n        \"cloud-sdk-$(lsb_release -c -s) main\" \\\n        > /etc/apt/sources.list.d/google-cloud-sdk.list && \\\n    curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | \\\n        apt-key add - && \\\n    apt-get update -qqy && \\\n    apt-get install --no-install-recommends -qqy google-cloud-sdk google-cloud-sdk-app-engine-go \\\n        google-cloud-sdk-app-engine-python google-cloud-sdk-app-engine-go \\\n        google-cloud-sdk-datastore-emulator && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\nRUN wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 \\\n    -O /usr/local/bin/cloud_sql_proxy && \\\n    chmod +x /usr/local/bin/cloud_sql_proxy\n\n# Install AWS CLI.\nRUN python3 -m pip install awscli\n\n# Install Docker.\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\\n        apt-key add - && \\\n    add-apt-repository \"$(echo \\\n        \"deb [arch=amd64] https://download.docker.com/linux/ubuntu\" \\\n        \"$(lsb_release -cs)\" stable)\" && \\\n    apt-get update -qqy && \\\n    apt-get install --no-install-recommends -qyy docker-ce docker-ce-cli containerd.io && \\\n    curl -f -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` \\\n        -o /usr/local/bin/docker-compose && \\\n    chmod +x /usr/local/bin/docker-compose && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install nodejs.\nRUN apt-get update && apt-get install --no-install-recommends -y nodejs-dev npm && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install sshfs.\nRUN apt-get update && apt-get install --no-install-recommends -y jq sshfs && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install protoc-gen-go.\nRUN go get github.com/golang/protobuf/protoc-gen-go && \\\n    go install github.com/golang/protobuf/protoc-gen-go\nENV PATH=$PATH:/go/bin\n\nADD ./solution-check /usr/local/bin/validate\nRUN chmod +x /usr/local/bin/validate\n\n# Install dependency for lambda-cli.\nRUN python3 -m pip install werkzeug json-rpc jsonrpc-requests cachetools\n\n################################################################################\n# Configurations\n################################################################################\n\n# Gcloud service account.\nADD ./service_account.json /root/.config/service_account.json\nADD ./service_account.p12 /root/.config/service_account.p12\nADD ./service_account.pem /root/.config/service_account.pem\nRUN gcloud auth activate-service-account \\\n    docker@icfpc-primary.iam.gserviceaccount.com \\\n    --key-file=/root/.config/service_account.json && \\\n    gcloud config set project icfpc-primary && \\\n    gcloud config set compute/region asia-northeast1 && \\\n    gcloud config set compute/zone asia-northeast1-a\n\n# Create unagi user.\nRUN useradd \\\n        --home-dir=/home/unagi \\\n        --create-home \\\n        --uid=10001 \\\n        --user-group \\\n        --shell=/bin/bash \\\n        unagi\nRUN echo 'unagi ALL=(ALL:ALL) NOPASSWD: ALL' > /etc/sudoers.d/unagi\n\n# Unagi password.\nRUN echo \"export UNAGI_PASSWORD='${UNAGI_PASSWORD}'\" > /etc/profile.d/99-unagi.sh\nRUN chmod +x /etc/profile.d/99-unagi.sh\n\n# Docker configuration.\nADD ./docker_config.json /root/.docker/config.json\n\n# Git settings.\nRUN git config --global user.email '5896564+ninetan@users.noreply.github.com' && \\\n    git config --global user.name 'Ninetan'\n\n# SSH settings.\nADD ./unagi.pem /root/.ssh/id_rsa\nADD ./unagi.pem /root/.ssh/google_compute_engine\nADD ./unagi.pem /home/unagi/.ssh/id_rsa\nADD ./unagi.pem /home/unagi/.ssh/google_compute_engine\nRUN chmod 400 \\\n    /root/.ssh/id_rsa \\\n    /root/.ssh/google_compute_engine \\\n    /home/unagi/.ssh/id_rsa \\\n    /home/unagi/.ssh/google_compute_engine\nADD ./unagi.pub /root/.ssh/authorized_keys\nADD ./unagi.pub /root/.ssh/id_rsa.pub\nADD ./unagi.pub /root/.ssh/google_compute_engine.pub\nADD ./unagi.pub /home/unagi/.ssh/authorized_keys\nADD ./unagi.pub /home/unagi/.ssh/id_rsa.pub\nADD ./unagi.pub /home/unagi/.ssh/google_compute_engine.pub\nADD ./ssh_config /root/.ssh/config\nADD ./ssh_config /home/unagi/.ssh/config\nRUN ssh-keyscan github.com >> /root/.ssh/known_hosts\nRUN ssh-keyscan github.com >> /home/unagi/.ssh/known_hosts\nRUN chown -R unagi:unagi /home/unagi/.ssh\n\n# AWS settings.\nADD ./aws_config /root/.aws/config\nADD ./aws_credentials /root/.aws/credentials\nRUN chmod 400 /root/.aws/credentials\n\n# Add unagi command as proxy.\nRUN echo '#!/usr/bin/env bash' > /usr/local/bin/unagi && \\\n    echo 'exec \"$@\"' >> /usr/local/bin/unagi && \\\n    chmod +x /usr/local/bin/unagi\n\n# Mark as UNAGI_IMAGE.\nRUN touch /UNAGI_IMAGE\n\n################################################################################\n# Experimental\n################################################################################\n\nENV CARGO_TARGET_DIR=/work/build\nENV RUST_BACKTRACE=1\n\nENV SHELL=/bin/bash\nRUN echo 'PS1=\"\\e[0;32m\\]\\u@unagi\\[\\e[m\\]:\\e[0;34m\\]\\w\\[\\e[m\\]# \"' \\\n    >> /root/.bashrc\n\nADD ./init-wrapper /usr/local/bin/init-wrapper\nRUN chmod +x /usr/local/bin/init-wrapper\n\n################################################################################\n# Repository pull\n################################################################################\n\n# Download repository.\nRUN git clone git@github.com:imos/icfpc2019.git /repo\n\n# Fill quick survey.\nRUN echo \"last_answer_survey_time: $(date '+%s')\" > \\\n    /root/.config/gcloud/.last_survey_prompt.yaml\n\nCMD /bin/bash --login\nENTRYPOINT [ \"/usr/local/bin/init-wrapper\" ]\n"
}