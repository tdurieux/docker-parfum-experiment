{
  "startTime": 1674253546558,
  "endTime": 1674253547588,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "########## DON'T MODIFY THIS SECTION, SCROLL DOWN ###########\n# The next configurations do some configuring that can take a\n# bit of time, so best make modifications AFTER them to allow\n# utilization of cached steps.\n#\n# Note: As of 2015/03/05 this is Ubuntu 14.04.\nFROM ubuntu\nMAINTAINER Aron Ahmadia <aahmadia@continuum.io>\n\n#------------ Install development software --------------#\nUSER root\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl \\\n    g++ \\\n    git \\\n    libssl-dev \\\n    make \\\n    nginx \\\n    openjdk-7-jdk \\\n    pkg-config \\\n    rabbitmq-server \\\n    wget && rm -rf /var/lib/apt/lists/*;\n\nRUN groupadd -r explorer -g 433 && \\\n    useradd -u 431 -m -r -g explorer -d /home/explorer -s /bin/bash -c \"Docker image user\" explorer && \\\nchown -R explorer:explorer /home/explorer\nRUN adduser explorer sudo\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\nUSER explorer\n\nWORKDIR /home/explorer\nRUN wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh\nRUN bash ./Miniconda-latest-Linux-x86_64.sh -b\nRUN git clone https://github.com/memex-explorer/memex-explorer\n\nWORKDIR /home/explorer/memex-explorer/\n\nWORKDIR /home/explorer/memex-explorer\nENV PATH /home/explorer/miniconda2/bin:$PATH\nRUN conda update conda -y\nRUN conda install conda-env -y\nRUN conda env update\n\nWORKDIR /home/explorer/memex-explorer/source/memex\nRUN cp settings_files/dev_settings.py settings.py\n\nWORKDIR /home/explorer/memex-explorer/source\n#replaces source activate... sorta\nENV PATH /home/explorer/miniconda2/envs/memex/bin:$PATH\nENV CONDA_DEFAULT_ENV memex\nENV CONDA_ENV_PATH /home/explorer/miniconda2\n\n# move these into another environment.yaml?  Or better, apply them as a patch?\nRUN conda install -c memex ddt\n# TAD dependencies\nRUN pip install --no-cache-dir celery fisher elasticsearch flask flask_restful\n\n# ready for deployment\nRUN python manage.py migrate\nRUN python manage.py collectstatic -v0 --noinput\n\n# Install elasticdump\nRUN npm install -g elasticdump && npm cache clean --force;\n\n#------------- Pull TAD software --------------#\nUSER root\nRUN mkdir -p /service/build\nWORKDIR /service/build\nRUN git clone https://github.com/autonlab/tad.git\n\n# Build and install TAD library.\nRUN ln -s /service/build/tad/service /service/tad\nRUN mkdir /service/tad/config\n\n# Explorer configuration\nUSER explorer\nCOPY supervisord.conf /home/explorer/memex-explorer/source/supervisord.conf\nCOPY docker_settings.py /home/explorer/memex-explorer/source/memex/settings.py\n# patched in\nWORKDIR /home/explorer/memex-explorer\nRUN conda install markdown\nRUN markdown_py CHANGES.md > source/base/static/changes.html\nWORKDIR /home/explorer/memex-explorer/docs\nRUN make html\nRUN mv build/html ../source/base/static/docs\n\n# TAD configuration\nCOPY tad.cfg /service/tad/config/tad.cfg\n\n\n# UNCOMMENT THIS SECTION TO PRELOAD THE ELASTICSEARCH INSTANCE\n# ------------------------------------------------------------- #\n\n# Now bring over elasticsearch index data\n# COPY elasticdump.json /home/explorer/elasticdump.json\n\n# Load data\n# Elasticsearch data\n# COPY populate_elasticsearch.sh /home/explorer/populate_elasticsearch.sh\n# WORKDIR /home/explorer\n# RUN /bin/bash ./populate_elasticsearch.sh\n# ------------------------------------------------------------- #\n\n\n# ------------------------------------------------------------- #\n# UNCOMMENT THIS SECTION TO PRELOAD CRAWL DATA\n# Crawl data\n# COPY resources /home/explorer/memex-explorer/source/resources/\n# ------------------------------------------------------------- #\n\n\n# ------------------------------------------------------------- #\n# UNCOMMENT THIS SECTION TO PRELOAD SQL DATABASE\n# SQLite (Django)\n# COPY db.sqlite3 /home/explorer/memex-explorer/source/db.sqlite3\n# ------------------------------------------------------------- #\n\n# TAD run script\nCOPY tad_run /home/explorer/miniconda2/envs/memex/bin/tad\n\nCOPY nginx.conf /etc/nginx/sites-enabled/default\n# uncomment these to install secrets into the container\n# COPY secrets/nginx.crt /etc/nginx/ssl/nginx.crt\n# COPY secrets/nginx.key /etc/nginx/ssl/nginx.key\n# COPY secrets/htpasswd /etc/nginx/htpasswd\n\n# Permissions clean-up\nUSER root\nRUN chown -R explorer /service\nRUN chown -R explorer /home/explorer/memex-explorer/source\nRUN chmod +x /home/explorer/miniconda2/envs/memex/bin/tad\nRUN chown -R explorer /home/explorer/miniconda2/envs/memex/bin/tad\n\n##################### INSTALLATION END #####################\n\n# Expose the default ports\nEXPOSE 80\nEXPOSE 443\n\n# Set default container command\nUSER explorer\nWORKDIR /home/explorer/memex-explorer/source\nENV HTTP_PROTOCOL http\nENV WS_PROTOCOL ws\nENV INLINE 1\nENTRYPOINT \"supervisord\""
}