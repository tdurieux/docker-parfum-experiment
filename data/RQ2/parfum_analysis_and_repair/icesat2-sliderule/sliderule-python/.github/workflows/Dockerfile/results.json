{
  "startTime": 1674254689029,
  "endTime": 1674254691154,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 57,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 126,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 174,
        "lineEnd": 201,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-slim-buster\n\nENV DEBIAN_FRONTEND=\"noninteractive\" TZ=\"America/Los_Angeles\"\n\nRUN useradd --create-home --shell /bin/bash sliderule\n\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y \\\n        build-essential \\\n        build-essential \\\n        ca-certificates \\\n        cmake \\\n        gcc \\\n        git \\\n        tcl-dev \\\n        tk-dev \\\n        wget \\\n        unzip && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nENV JOBS 2\n\nENV CFLAGS=\"-fPIC\"\nENV ZLIB_VERSION=1.2.12\nRUN wget -q https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && \\\n    tar -xzf zlib-${ZLIB_VERSION}.tar.gz && \\\n    cd zlib-${ZLIB_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm zlib-${ZLIB_VERSION}.tar.gz\n\nENV CFLAGS=\"-fPIC\"\nENV SZIP_SHORT_VERSION=2.1.1\nENV SZIP_VERSION=2.1.1\nRUN wget -q https://support.hdfgroup.org/ftp/lib-external/szip/${SZIP_SHORT_VERSION}/src/szip-${SZIP_VERSION}.tar.gz && \\\n    tar -xzf szip-${SZIP_VERSION}.tar.gz && \\\n    cd szip-${SZIP_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm szip-${SZIP_VERSION}.tar.gz\n\nENV OPENSSL_SHORT_VERSION=1.1.1\nENV OPENSSL_VERSION=1.1.1k\nRUN wget -q https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz && \\\n    tar -xzf openssl-${OPENSSL_VERSION}.tar.gz && \\\n    cd openssl-${OPENSSL_VERSION} && \\\n    ./config shared --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm openssl-${OPENSSL_VERSION}.tar.gz\n\nENV CURL_VERSION=7.77.0\nRUN wget -q https://curl.haxx.se/download/curl-${CURL_VERSION}.tar.gz && \\\n    tar -xzf curl-${CURL_VERSION}.tar.gz && \\\n    cd curl-${CURL_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet \\\n        --enable-versioned-symbols \\\n        --enable-openssl-auto-load-config \\\n        --with-openssl \\\n        --with-zlib=/usr/local \\\n        --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm curl-${CURL_VERSION}.tar.gz\n\nENV SQLITE_VERSION=3370200\nENV SQLITE_YEAR 2022\nRUN wget -q https://sqlite.org/${SQLITE_YEAR}/sqlite-autoconf-${SQLITE_VERSION}.tar.gz && \\\n    tar -xzf sqlite-autoconf-${SQLITE_VERSION}.tar.gz && \\\n    cd sqlite-autoconf-${SQLITE_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm sqlite-autoconf-${SQLITE_VERSION}.tar.gz\n\nENV LIBJPEG_SHORT_VERSION=9d\nENV LIBJPEG_VERSION=v9d\nRUN wget -q https://ijg.org/files/jpegsrc.${LIBJPEG_VERSION}.tar.gz && \\\n    tar -xzf jpegsrc.${LIBJPEG_VERSION}.tar.gz && \\\n    cd jpeg-${LIBJPEG_SHORT_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm jpegsrc.${LIBJPEG_VERSION}.tar.gz\n\nENV ZLIBLIB=\"/usr/local/lib\"\nENV ZLIBINC=\"/usr/local/include\"\nENV CPPFLAGS=\"-I/usr/local/include\"\nENV LDFLAGS=\"-L/usr/local/lib\"\nENV LD_LIBRARY_PATH=\"${ZLIBLIB}:${LD_LIBRARY_PATH}\"\nENV CFLAGS=\"-Wall -O -funroll-loops -malign-loops=2 -malign-functions=2\"\nENV LIBPNG_VERSION=1.6.37\nRUN wget -q https://download.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz && \\\n    tar -xzf libpng-${LIBPNG_VERSION}.tar.gz && \\\n    cd libpng-${LIBPNG_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm libpng-${LIBPNG_VERSION}.tar.gz\n\nENV LIBTIFF_VERSION=4.3.0\nRUN wget -q https://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz && \\\n    tar -xzf tiff-${LIBTIFF_VERSION}.tar.gz && \\\n    cd tiff-${LIBTIFF_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet --prefix=/usr/local \\\n        --with-jpeg-include-dir=/usr/local/include \\\n        --with-jpeg-lib-dir=/usr/local/lib && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm tiff-${LIBTIFF_VERSION}.tar.gz\n\nENV GEOS_VERSION=3.10.2\nRUN wget -q https://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 && \\\n    tar -xjf geos-${GEOS_VERSION}.tar.bz2 && \\\n    cd geos-${GEOS_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm geos-${GEOS_VERSION}.tar.bz2\n\nENV HDF5_VERSION=1.10.5\nRUN wget -q https://support.hdfgroup.org/ftp/HDF5/current/src/hdf5-${HDF5_VERSION}.tar.gz && \\\n    tar -xzf hdf5-${HDF5_VERSION}.tar.gz && \\\n    cd hdf5-${HDF5_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet \\\n        --enable-hl \\\n        --enable-shared \\\n        --prefix=/usr/local \\\n        --with-zlib=/usr/local \\\n        --with-szlib=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm hdf5-${HDF5_VERSION}.tar.gz\n\n# update to PROJ8\nENV PROJ_VERSION=8.2.1\nENV PROJ_DATUMGRID_VERSION=1.8\nENV PROJ_NETWORK ON\nENV SQLITE3_CFLAGS=\"-I/usr/local/include\"\nENV SQLITE3_LIBS=\"-L/usr/local/lib -lsqlite3\"\nRUN wget -q https://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz && \\\n    wget -q https://download.osgeo.org/proj/proj-datumgrid-${PROJ_DATUMGRID_VERSION}.zip && \\\n    tar -xzf proj-${PROJ_VERSION}.tar.gz && \\\n    unzip proj-datumgrid-${PROJ_DATUMGRID_VERSION}.zip -d proj-${PROJ_VERSION}/data/ && \\\n    cd proj-${PROJ_VERSION} && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DSQLITE3_INCLUDE_DIR=/usr/local/include/ \\\n        -DSQLITE3_LIBRARY=/usr/local/lib/libsqlite3.so \\\n        -DTIFF_INCLUDE_DIR=/usr/local/include \\\n        -DTIFF_LIBRARY_RELEASE=/usr/local/lib/libtiff.so \\\n        -DCURL_INCLUDE_DIR=/usr/local/include/ \\\n        -DCURL_LIBRARY=/usr/local/lib/libcurl.so \\\n        -DPYTHON_EXECUTABLE=/usr/local/bin/python3 \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local/ .. && \\\n    cmake --build . && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm proj-${PROJ_VERSION}.tar.gz\n\n# use latest GDAL\nENV CPPFLAGS=\"-I/usr/local/include\"\nENV LDFLAGS=\"-L/usr/local/lib\"\nENV HDF5_CFLAGS=\"--enable-hl --enable-shared\"\nENV HDF5_INCLUDE=\"/usr/local/include\"\nENV HDF5_LIBS=\"/usr/local/lib\"\nENV GDAL_VERSION=3.4.1\nRUN wget -q https://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz && \\\n    tar -xzf gdal-${GDAL_VERSION}.tar.gz && \\\n    cd gdal-${GDAL_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --quiet \\\n        --disable-debug \\\n        --disable-static \\\n        --with-hdf5=/usr/local \\\n        --with-netcdf=/usr/local \\\n        --with-curl=/usr/local/bin/curl-config \\\n        --with-crypto=/usr/local \\\n        --with-geos=/usr/local/bin/geos-config \\\n        --with-geotiff \\\n        --with-hide-internal-symbols=yes \\\n        --with-liblzma=/usr/local \\\n        --with-libtiff=/usr/local \\\n        --with-libz=/usr/local \\\n        --with-jpeg=/usr/local \\\n        --with-openjpeg \\\n        --with-png=/usr/local \\\n        --with-proj=/usr/local \\\n        --with-sqlite3=/usr/local \\\n        --with-proj=/usr/local \\\n        --with-rename-internal-libgeotiff-symbols=yes \\\n        --with-rename-internal-libtiff-symbols=yes \\\n        --with-threads=yes \\\n        --without-hdf4 \\\n        --without-idb \\\n        --without-jpeg12 \\\n        --without-perl \\\n        --without-python \\\n        --prefix=/usr/local && \\\n    make --quiet --jobs=${JOBS} && \\\n    make --quiet install && \\\n    make clean && rm gdal-${GDAL_VERSION}.tar.gz\n\nWORKDIR /home/sliderule\n\nRUN pip3 install --no-cache-dir \\\n        cython \\\n        gdal==${GDAL_VERSION} \\\n        geopandas \\\n        h5py \\\n        ipykernel \\\n        ipympl \\\n        ipywidgets \\\n        ipyleaflet \\\n        jupyterlab==3 \\\n        jupyterlab_widgets \\\n        matplotlib \\\n        numpy \\\n        pandas \\\n        requests \\\n        scipy \\\n        setuptools_scm \\\n        shapely \\\n        tables \\\n        tk \\\n        traitlets \\\n        xyzservices\n\nCOPY . .\n\nRUN --mount=source=.git,target=.git,type=bind \\\n    pip install --no-cache-dir --no-deps .\n\nUSER sliderule\n\nEXPOSE 9999\nENTRYPOINT [\"jupyter-lab\", \"--ip=0.0.0.0\", \"--port=9999\", \"--allow-root\"]\n"
}