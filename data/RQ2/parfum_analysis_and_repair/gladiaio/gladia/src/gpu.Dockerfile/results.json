{
  "startTime": 1674246836004,
  "endTime": 1674246841020,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 103,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 111,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 118,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 122,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 103,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 122,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 103,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 118,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 122,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 103,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 122,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedDockerfile": "#https://www.docker.com/blog/advanced-dockerfiles-faster-builds-and-smaller-images-using-buildkit-and-multistage-builds/\nARG GLADIA_DOCKER_BASE=nvcr.io/nvidia/tritonserver:22.03-py3\n\nFROM $GLADIA_DOCKER_BASE\n\nARG SKIP_CUSTOM_ENV_BUILD=\"false\"\nARG SKIP_ROOT_CACHE_CLEANING=\"false\"\nARG SKIP_PIP_CACHE_CLEANING=\"false\"\nARG SKIP_YARN_CACHE_CLEANING=\"false\"\nARG SKIP_NPM_CACHE_CLEANING=\"false\"\nARG SKIP_TMPFILES_CACHE_CLEANING=\"false\"\nARG GLADIA_TMP_PATH=\"/tmp/gladia/\"\n\nENV GLADIA_TMP_PATH=$GLADIA_TMP_PATH \\\n    MODEL_CACHE_ROOT=\"$GLADIA_TMP_PATH/models\"\n\nENV TRANSFORMERS_CACHE=$MODEL_CACHE_ROOT\"/transformers\" \\\n    PIPENV_VENV_IN_PROJECT=\"enabled\" \\\n    PYTORCH_TRANSFORMERS_CACHE=$MODEL_CACHE_ROOT\"/pytorch_transformers\" \\\n    PYTORCH_PRETRAINED_BERT_CACHE=$MODEL_CACHE_ROOT\"/pytorch_pretrained_bert\" \\\n    NLTK_DATA=$GLADIA_TMP_PATH\"/nltk\" \\\n    TOKENIZERS_PARALLELISM=\"true\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\" \\\n    distro=\"ubuntu2004\" \\\n    arch=\"x86_64\" \\\n    TRITON_MODELS_PATH=$GLADIA_TMP_PATH\"/triton\" \\\n    TRITON_SERVER_PORT_HTTP=8000 \\\n    TRITON_SERVER_PORT_GRPC=8001 \\\n    TRITON_SERVER_PORT_METRICS=8002 \\\n    PATH_TO_GLADIA_SRC=\"/app\" \\\n    API_SERVER_WORKERS=1 \\\n    TORCH_HOME=$MODEL_CACHE_ROOT\"/torch\" \\\n    TORCH_HUB=$MODEL_CACHE_ROOT\"/torch/hub\"\n\nRUN mkdir -p $TRITON_MODELS_PATH && \\\n    mkdir -p $GLADIA_TMP_PATH && \\\n    mkdir -p $MODEL_CACHE_ROOT && \\\n    mkdir -p $TRANSFORMERS_CACHE && \\\n    mkdir -p $PYTORCH_TRANSFORMERS_CACHE && \\\n    mkdir -p $PYTORCH_PRETRAINED_BERT_CACHE && \\\n    mkdir -p $NLTK_DATA && \\\n    mkdir -p $TRITON_MODELS_PATH \\\n    mkdir -p $PATH_TO_GLADIA_SRC\n\n# Update apt repositories\n# Add Nvidia GPG key\nRUN apt-key del 7fa2af80\nRUN wget https://developer.download.nvidia.com/compute/cuda/repos/$distro/$arch/cuda-keyring_1.0-1_all.deb\n\nRUN dpkg -i cuda-keyring_1.0-1_all.deb\n\nRUN sed -i 's/deb https:\\/\\/developer.download.nvidia.com\\/compute\\/cuda\\/repos\\/ubuntu2004\\/x86_64.*//g' /etc/apt/sources.list\n\nRUN apt-get install --no-install-recommends -y apt-transport-https && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    apt-get update --allow-insecure-repositories -y && \\\n    apt install --no-install-recommends -y libssl-dev \\\n    libpng-dev \\\n    libjpeg-dev && rm -rf /var/lib/apt/lists/*;\n\nCOPY . $PATH_TO_GLADIA_SRC\n\nWORKDIR /tmp\n\nRUN cd /tmp && \\\n    wget https://github.com/git-lfs/git-lfs/releases/download/v3.0.1/git-lfs-linux-386-v3.0.1.tar.gz && \\\n    tar -xvf git-lfs-linux-386-v3.0.1.tar.gz && \\\n    bash /tmp/install.sh && rm git-lfs-linux-386-v3.0.1.tar.gz\n\n# Add Nvidia GPG key\nRUN apt-key del 7fa2af80\nRUN wget https://developer.download.nvidia.com/compute/cuda/repos/$distro/$arch/cuda-keyring_1.0-1_all.deb\n\nRUN dpkg -i cuda-keyring_1.0-1_all.deb\n\nRUN sed -i 's/deb https:\\/\\/developer.download.nvidia.com\\/compute\\/cuda\\/repos\\/ubuntu2004\\/x86_64.*//g' /etc/apt/sources.list\n\n# env vars for micro-mamba\nENV MAMBA_ROOT_PREFIX=\"/opt/conda\"\nENV MAMBA_EXE=\"/usr/local/bin/micromamba\"\nENV MAMBA_DOCKERFILE_ACTIVATE=1\nENV MAMBA_ALWAYS_YES=true\nENV PATH=$PATH:/usr/local/bin/:$MAMBA_EXE\n\n# Install micromamba\nRUN wget -qO- \"https://micro.mamba.pm/api/micromamba/linux-64/latest\" | tar -xvj bin/micromamba\nRUN mv bin/micromamba /usr/local/bin/micromamba\nRUN micromamba shell init -s bash\n\n# Script which launches commands passed to \"docker run\"\nCOPY _entrypoint.sh /usr/local/bin/_entrypoint.sh\nCOPY _activate_current_env.sh /usr/local/bin/_activate_current_env.sh\n# ENTRYPOINT [\"/usr/local/bin/_entrypoint.sh\"]\n\n# Automatically activate micromaba for every bash shell\nRUN echo \"source /usr/local/bin/_activate_current_env.sh\" >> ~/.bashrc && \\\n    echo \"source /usr/local/bin/_activate_current_env.sh\" >> /etc/skel/.bashrc && \\\n    echo \"micromamba activate server\" >> ~/.bashrc\n\n# Add python repository and install python3.7\nRUN add-apt-repository -y ppa:deadsnakes/ppa && \\\n    apt-get install --no-install-recommends -y \\\n        python3.7 \\\n        python3.7-distutils \\\n        python3.7-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install dep pacakges\nRUN apt-get update && \\\n    apt-get autoclean && \\\n    apt-get install --no-install-recommends -y \\\n        python3-setuptools \\\n        git-lfs \\\n        libmagic1 \\\n        libmysqlclient-dev \\\n        libgl1 \\\n        software-properties-common && \\\n    apt-get install --no-install-recommends -y \\\n        cmake && rm -rf /var/lib/apt/lists/*;\n\n# Install terressact and its dependencies\nRUN apt-get install --no-install-recommends -y \\\n        libleptonica-dev \\\n        tesseract-ocr \\\n        libtesseract-dev \\\n        python3-pil \\\n        tesseract-ocr-all && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /app\n\nRUN micromamba create -f env.yaml\nRUN if [ \"$SKIP_CUSTOM_ENV_BUILD\" = \"false\" ]; then micromamba run -n server /bin/bash -c \"cd venv-builder/ && python3 create_custom_envs.py\"; fi\nSHELL [\"/usr/local/bin/micromamba\", \"run\", \"-n\", \"server\", \"/bin/bash\", \"-c\"]\n\nENV LD_PRELOAD=\"/opt/tritonserver/backends/pytorch/libmkl_rt.so\"\nENV LD_LIBRARY_PATH=\"/opt/conda/envs/server/lib/\":$MAMBA_ROOT_PREFIX\"/envs/server/lib/\"\nENV PATH_TO_GLADIA_SRC=\"/app\"\n\n# Clean caches\nRUN if [ \"$SKIP_ROOT_CACHE_CLEANING\" = \"false\" ]; then [ -d \"/root/.cache/\" ] && rm -rf \"/root/.cache/*\"; fi && \\\n    if [ \"$SKIP_PIP_CACHE_CLEANING\" = \"false\" ]; then rm -rf \"/tmp/pip*\"; fi && \\\n    if [ \"$SKIP_YARN_CACHE_CLEANING\" = \"false\" ]; then rm -rf \"/tmp/yarn*\"; fi && \\\n    if [ \"$SKIP_NPM_CACHE_CLEANING\" = \"false\" ]; then rm -rf \"/tmp/npm*\"; fi && \\\n    if [ \"$SKIP_TMPFILES_CACHE_CLEANING\" = \"false\" ]; then rm -rf \"/tmp/tmp*\"; fi && \\\n    apt-get clean && \\\n    apt-get autoremove --purge\n\nRUN mv /usr/bin/python3 /usr/bin/python38 && \\\n    ln -sf /usr/bin/python /usr/bin/python3\n\nRUN mv /app/entrypoint.sh /opt/nvidia/nvidia_entrypoint.sh\n\nARG DOCKER_USER=root\nARG DOCKER_GROUP=root\n\n# API_SERVER_PORT_HTTP is set as a build arg\n# in order to manage the EXPOSE port param\nARG API_SERVER_PORT_HTTP=8080\n\nRUN chown -R $DOCKER_USER:$DOCKER_GROUP $PATH_TO_GLADIA_SRC && \\\n    chown -R $DOCKER_USER:$DOCKER_GROUP $GLADIA_TMP_PATH\n\nEXPOSE $API_SERVER_PORT_HTTP\n\nRUN rm $MAMBA_ROOT_PREFIX/envs/server/lib/libcurl.so.4 && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcurl.so.4.6.0 $MAMBA_ROOT_PREFIX/envs/server/lib/libcurl.so.4\n\nENTRYPOINT [\"micromamba\", \"run\", \"-n\", \"server\"]\n\nCMD [\"/app/run_server_prod.sh\"]\n"
}