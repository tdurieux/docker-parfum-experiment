{
  "startTime": 1674216760390,
  "endTime": 1674216761635,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 1,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 1,
        "columnEnd": 28
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 1,
        "columnEnd": 27
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 1,
        "columnEnd": 28
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 1,
        "columnEnd": 22
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 48,
        "lineEnd": 51,
        "columnStart": 1,
        "columnEnd": 9
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 1,
        "columnEnd": 27
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 1,
        "columnEnd": 20
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 1,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 67,
        "lineEnd": 72,
        "columnStart": 1,
        "columnEnd": 13
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 76,
        "lineEnd": 78,
        "columnStart": 1,
        "columnEnd": 7
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 82,
        "lineEnd": 90,
        "columnStart": 1,
        "columnEnd": 24
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 94,
        "lineEnd": 95,
        "columnStart": 1,
        "columnEnd": 15
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 23,
        "columnEnd": 42
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 19,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We start with CentOS 7, because it is commonly used in production, and meets\n# the glibc requirements of VFXPlatform 2022 (2.17 or lower).\n\nFROM centos:7.9.2009\n\n# As we don't want to inadvertently grab newer versions of our yum-installed\n# packages, we use yum-versionlock to keep them pinned. We track the list of\n# image packages here, then compare after our install steps to see what was\n# added, and only lock those. This saves us storing redundant entires for\n# packages installed in the base image.\n\n# To unlock versions, just make sure yum-versionlock.list is empty in the repo\n#COPY versionlock.sh ./\n#COPY yum-versionlock.list /etc/yum/pluginconf.d/versionlock.list\n\n#RUN yum install -y yum-versionlock && \\\n#\t./versionlock.sh list-installed /tmp/packages && \\\n#\n#\n# NOTE: If you add a new yum package here, make sure you update the version\n# lock files as follows and commit the changes to yum-versionlock.list:\n#\n#   ./build-docker.py --update-package-versions --new-only\n#\n# We have to install scl as a separate yum command for some reason\n# otherwise we get `scl not found` errors...\n#\nRUN yum install -y centos-release-scl && \\\n\tyum install -y devtoolset-9 && \\\n#\n#\tInstall Python 3, and enable it so that `pip install` installs modules for\n#\tit rather than the system Python (which is stuck at the unsupported 2.7).\n\tyum install -y rh-python38 && \\\n\tsource /opt/rh/rh-python38/enable && \\\n#\n#\tInstall CMake, SCons, and other miscellaneous build tools.\n#\tWe install SCons via `pip install --egg` rather than by\n#\t`yum install` because this prevents a Cortex build failure\n#\tcaused by SCons picking up the wrong Python version and being\n#\tunable to find its own modules.\n#\n\tyum install -y epel-release && \\\n#\n\tyum install -y cmake3 && \\\n\tln -s /usr/bin/cmake3 /usr/bin/cmake && \\\n#\n\tpip install --no-cache-dir scons==3.1.2 && \\\n#\n\tyum install -y \\\n\t\tgit \\\n\t\tpatch \\\n\t\tdoxygen && \\\n#\n#\tInstall boost dependencies (needed by boost::iostreams)\n#\n\tyum install -y bzip2-devel && \\\n#\n#\tInstall JPEG dependencies\n#\n\tyum install -y nasm && \\\n#\n#\tInstall PNG dependencies && \\\n#\n\tyum install -y zlib-devel && \\\n#\n#\tInstall GLEW dependencies\n#\n\tyum install -y \\\n\t\tlibX11-devel \\\n\t\tmesa-libGL-devel \\\n\t\tmesa-libGLU-devel \\\n\t\tlibXmu-devel \\\n\t\tlibXi-devel && \\\n#\n#\tInstall OSL dependencies\n#\n\tyum install -y \\\n\t\tflex \\\n\t\tbison && \\\n#\n#\tInstall Qt dependencies\n#\n\tyum install -y \\\n\t\txkeyboard-config.noarch \\\n\t\tfontconfig-devel.x86_64 \\\n\t\tlibxkbcommon-x11-devel.x86_64 \\\n\t\txcb-util-renderutil-devel \\\n\t\txcb-util-wm-devel \\\n\t\txcb-util-devel \\\n\t\txcb-util-image-devel \\\n\t\txcb-util-keysyms-devel && \\\n#\n#\tInstall Appleseed dependencies\n#\n\tyum install -y \\\n\t\tlz4 lz4-devel && rm -rf /var/cache/yum\n#\n# Install packages needed to generate the\n# Gaffer documentation.\n\n#RUN yum install -y \\\n#\t\txorg-x11-server-Xvfb \\\n#\t\tmesa-dri-drivers.x86_64 \\\n#\t\tmetacity \\\n#\t\tgnome-themes-standard && \\\n# Note: When updating these, also update gaffer/config/azure/build.yaml\n#\tpip install \\\n#\t\tsphinx==4.3.1 \\\n#\t\tsphinx_rtd_theme==1.0.0 \\\n#\t\tmyst-parser==0.15.2 \\\n#\t\tdocutils==0.17.1 && \\\n#\n#\tyum install -y inkscape\n\n# Now we've installed all our packages, update yum-versionlock for all the\n# new packages so we can copy the versionlock.list out of the container when we\n# want to update the build env.\n# If there were already locks in the list from the source checkout then the\n# correct version will already be installed and we just ignore this...\n#\t./versionlock.sh lock-new /tmp/packages\n\nRUN yum install -y wget && rm -rf /var/cache/yum\n#\n#\n# CUDA 11.5.1\n#\nRUN wget -O cuda.rpm https://developer.download.nvidia.com/compute/cuda/11.5.1/local_installers/cuda-repo-rhel7-11-5-local-11.5.1_495.29.05-1.x86_64.rpm --progress=dot:mega \\\n\t&& rpm -i cuda.rpm && yum install -y cuda && rm cuda.rpm && rm -rf /var/cache/yum\n#\n# ISPC 1.16.1\n#\nRUN wget -O ispc.tar.gz https://github.com/ispc/ispc/releases/download/v1.16.1/ispc-v1.16.1-linux.tar.gz -- \\\n\t&& mkdir /ispc && tar xf ispc.tar.gz -C /ispc --strip-components=1 && mv /ispc/bin/ispc /usr/bin/ispc && rm -rf /ispc && rm ispc.tar.gz\n#\n# OptiX 7.4.0\n#\nCOPY NVIDIA-OptiX-SDK-7.4.0-linux64-x86_64.sh /\nRUN mkdir /optix && chmod +x NVIDIA-OptiX-SDK-7.4.0-linux64-x86_64.sh && ./NVIDIA-OptiX-SDK-7.4.0-linux64-x86_64.sh --skip-license --prefix=/optix --exclude-subdir\n#\n# ROCm/HIP 4.5\n#\nRUN echo -e \"[ROCm]\\nname=ROCm\\nbaseurl=https://repo.radeon.com/rocm/yum/4.5\\nenabled=1\\ngpgcheck=0\" >> /etc/yum.repos.d/rocm.repo \\\n\t&& yum install -y rocm-dev rocm-libs && rm -rf /var/cache/yum\n\n# Copy over build script and set an entry point that\n# will use the compiler we want.\n\nCOPY build.py ./\n\nENTRYPOINT [ \"scl\", \"enable\", \"devtoolset-9\", \"rh-python38\", \"--\", \"bash\" ]\n"
}