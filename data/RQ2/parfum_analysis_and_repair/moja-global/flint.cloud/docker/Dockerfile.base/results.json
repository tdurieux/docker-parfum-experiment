{
  "startTime": 1674218694974,
  "endTime": 1674218696981,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 114,
        "lineEnd": 125,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 43,
        "columnStart": 7,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:focal\n\n# build args\nARG NUM_CPU=1\nARG BUILD_TYPE=RELEASE\nARG DEBIAN_FRONTEND=noninteractive\n\n# env. variables\nENV ROOTDIR /usr/local\nENV GDAL_VERSION 3.4.1\nENV POCO_VERSION 1.11.1\nENV BOOST_VERSION 1_78_0\nENV BOOST_VERSION_DOT 1.78.0\nENV FMT_VERSION 8.1.1\n\nENV PATH $ROOTDIR/bin:$PATH\nENV LD_LIBRARY_PATH $ROOTDIR/lib:$LD_LIBRARY_PATH\nENV PYTHONPATH $ROOTDIR/lib:$PYTHONPATH\n\nENV CURL_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt\nENV GDAL_DATA=/usr/local/share/gdal\nENV GDAL_HTTP_VERSION 2\nENV GDAL_HTTP_VERSION 2\nENV GDAL_HTTP_MERGE_CONSECUTIVE_RANGES YES\nENV GDAL_HTTP_MULTIPLEX YES\n\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\n\nWORKDIR $ROOTDIR/\n\n# Install basic dependencies\nRUN apt-get update -y \\\n    && apt-get install -y --fix-missing --no-install-recommends \\\n      software-properties-common build-essential ca-certificates \\\n      git g++ make cmake libssl-dev openssl wget bash-completion nasm \\\n      pkg-config libtool automake  libcurl4-gnutls-dev \\\n      zlib1g-dev libpcre3-dev libxml2-dev libexpat-dev libxerces-c-dev \\\n      doxygen doxygen-latex graphviz \\\n  \t  python3-dev python3-numpy python3-pip \\\n      libproj-dev libgeos-dev \\\n      unixodbc unixodbc-dev \\\n      libspatialite-dev libsqlite3-dev sqlite3 \\\n      libpq-dev postgresql-client-12 postgresql-server-dev-12 postgis\\\n    && apt-get -y autoremove \\\n   && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install -y\n\nWORKDIR $ROOTDIR/src\n\n# Download and install POCO C++ Libraries\nRUN wget -q https://github.com/pocoproject/poco/archive/refs/tags/poco-${POCO_VERSION}-release.tar.gz \\\n    && tar -xzf poco-${POCO_VERSION}-release.tar.gz \\\n    && mkdir poco-poco-${POCO_VERSION}-release/cmake-build \\\n    && cd poco-poco-${POCO_VERSION}-release/cmake-build \\\n    && cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \\\n        -DCMAKE_INSTALL_PREFIX=$ROOTDIR \\\n        -DPOCO_UNBUNDLED=ON \\\n        -DENABLE_JSON=ON \\\n        -DENABLE_DATA=ON \\\n        -DENABLE_DATA_ODBC=ON \\\n        -DENABLE_DATA_SQLITE=ON \\\n        -DENABLE_DATA_MYSQL=OFF \\\n        -DENABLE_ACTIVERECORD=OFF \\\n        -DENABLE_ACTIVERECORD_COMPILER=OFF \\\n        -DENABLE_ENCODINGS=OFF \\\n        -DENABLE_ENCODINGS_COMPILER=OFF \\\n        -DENABLE_XML=OFF \\\n        -DENABLE_MONGODB=OFF \\\n        -DENABLE_REDIS=OFF \\\n        -DENABLE_PDF=OFF \\\n        -DENABLE_UTIL=OFF \\\n        -DENABLE_NET=OFF \\\n        -DENABLE_NETSSL=OFF \\\n        -DENABLE_CRYPTO=OFF \\\n        -DENABLE_SEVENZIP=OFF \\\n        -DENABLE_ZIP=OFF \\\n        -DENABLE_PAGECOMPILER=OFF \\\n        -DENABLE_PAGECOMPILER_FILE2PAGE=OFF .. \\\n    && make --quiet -j $NUM_CPU \\\n    && make --quiet install/strip \\\n    && make clean \\\n    && cd .. && rm poco-${POCO_VERSION}-release.tar.gz\n\n# build user-config.jam files\nRUN echo \"using python : 3.6 : /usr ;\" > ~/user-config.jam\n\n# Download and install Boost C++ Libraries\nRUN wget -q https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n    && tar --bzip2 -xf boost_${BOOST_VERSION}.tar.bz2 \\\n    && cd boost_${BOOST_VERSION}  \\\n    && ./bootstrap.sh --prefix=$ROOTDIR \\\n    && ./b2 -d0 -j $NUM_CPU cxxstd=14 install variant=release link=shared  \\\n    && ./b2 clean \\\n    && cd $ROOTDIR/src && rm boost_${BOOST_VERSION}.tar.bz2\n\n# Download and install FMT formatting library\nRUN wget -q https://github.com/fmtlib/fmt/archive/${FMT_VERSION}.tar.gz \\\n    && mkdir libfmt-${FMT_VERSION} \\\n    && tar -xzf ${FMT_VERSION}.tar.gz -C libfmt-${FMT_VERSION} --strip-components=1 \\\n    && cd libfmt-${FMT_VERSION} \\\n    && cmake -G\"Unix Makefiles\" \\\n            -DCMAKE_BUILD_TYPE=RELEASE \\\n            -DCMAKE_INSTALL_PREFIX=$ROOTDIR \\\n            -DFMT_DOC=OFF \\\n            -DFMT_TEST=OFF . \\\n    && make --quiet -j $NUM_CPU install/strip \\\n    && make clean \\\n    && cd $ROOTDIR/src && rm ${FMT_VERSION}.tar.gz\n\n# Download and install GDAL\nRUN wget -q https://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz \\\n    && tar -xvf gdal-${GDAL_VERSION}.tar.gz && cd gdal-${GDAL_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --without-libtool \\\n        --with-hide-internal-symbols \\\n        --with-python \\\n        --with-spatialite \\\n        --with-pg \\\n        --with-curl \\\n        --prefix=$ROOTDIR \\\n        --with-libtiff=internal \\\n        --with-rename-internal-libtiff-symbols \\\n        --with-geotiff=internal \\\n        --with-rename-internal-libgeotiff-symbols \\\n    && make --quiet -j $NUM_CPU \\\n    && make install \\\n    && make clean \\\n    && cd $ROOTDIR/src && rm gdal-${GDAL_VERSION}.tar.gz\n\nRUN strip -s $ROOTDIR/lib/libgdal.so\nRUN for i in $ROOTDIR/lib/python3/dist-packages/osgeo/*.so; do strip -s $i 2>/dev/null || /bin/true; done\nRUN strip -s $ROOTDIR/bin/gdal_contour \\\n    && strip -s $ROOTDIR/bin/gdal_grid \\\n    && strip -s $ROOTDIR/bin/gdal_rasterize \\\n    && strip -s $ROOTDIR/bin/gdal_translate \\\n    && strip -s $ROOTDIR/bin/gdaladdo \\\n    && strip -s $ROOTDIR/bin/gdalbuildvrt \\\n    && strip -s $ROOTDIR/bin/gdaldem \\\n    && strip -s $ROOTDIR/bin/gdalenhance \\\n    && strip -s $ROOTDIR/bin/gdalinfo \\\n    && strip -s $ROOTDIR/bin/gdallocationinfo \\\n    && strip -s $ROOTDIR/bin/gdalmanage \\\n    && strip -s $ROOTDIR/bin/gdalsrsinfo \\\n    && strip -s $ROOTDIR/bin/gdaltindex \\\n    && strip -s $ROOTDIR/bin/gdaltransform \\\n    && strip -s $ROOTDIR/bin/gdalwarp \\\n    && strip -s $ROOTDIR/bin/gnmanalyse \\\n    && strip -s $ROOTDIR/bin/gnmmanage \\\n    && strip -s $ROOTDIR/bin/nearblack \\\n    && strip -s $ROOTDIR/bin/ogr2ogr \\\n    && strip -s $ROOTDIR/bin/ogrinfo \\\n    && strip -s $ROOTDIR/bin/ogrlineref \\\n    && strip -s $ROOTDIR/bin/ogrtindex\n\nRUN apt-get update -y \\\n    && apt-get remove -y --purge build-essential \\\n    && cd $ROOTDIR/src/gdal-${GDAL_VERSION}/swig/python \\\n    && python3 setup.py build \\\n    && python3 setup.py install\n\n# Download and install C++ wrapper around minizip compression library\nRUN\tgit clone --recursive https://github.com/sebastiandev/zipper.git \\\n    && mkdir zipper/build \\\n    && cd zipper/build \\\n  \t&& cmake .. \\\n  \t&& make --quiet -j $NUM_CPU \\\n    && make --quiet install \\\n    && make clean \\\n    && cd $ROOTDIR/src\n\nRUN ldconfig\nRUN rm -r $ROOTDIR/src/*\n"
}