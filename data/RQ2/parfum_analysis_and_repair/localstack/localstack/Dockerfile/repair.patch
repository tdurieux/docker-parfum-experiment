diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/localstack/localstack/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/localstack/localstack/Dockerfile/repaired.Dockerfile
index 1c6c75f..494ce29 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/localstack/localstack/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/localstack/localstack/Dockerfile/repaired.Dockerfile
@@ -5,7 +5,7 @@ FROM python:3.10.5-slim-buster@sha256:a2e9d4e5340453ec31ef0a7e5fb928b3f224387c2f
 ARG TARGETARCH
 
 # install OpenJDK 11
-RUN apt-get update && apt-get install -y openjdk-11-jdk-headless
+RUN apt-get update && apt-get install --no-install-recommends -y openjdk-11-jdk-headless && rm -rf /var/lib/apt/lists/*;
 
 ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-${TARGETARCH}
 
@@ -42,7 +42,7 @@ RUN apt-get update && \
         # Install dependencies to add additional repos
         apt-get install -y --no-install-recommends ca-certificates curl && \
         # Setup Node 14 Repo
-        curl -sL https://deb.nodesource.com/setup_14.x | bash - && \
+        curl -f -sL https://deb.nodesource.com/setup_14.x | bash - && \
         # Install Packages
         apt-get update && \
         apt-get install -y --no-install-recommends \
@@ -130,9 +130,9 @@ FROM base as builder
 ARG TARGETARCH
 
 # Install build dependencies to base
-RUN apt-get update && apt-get install -y autoconf automake cmake libsasl2-dev \
+RUN apt-get update && apt-get install --no-install-recommends -y autoconf automake cmake libsasl2-dev \
         g++ gcc libffi-dev libkrb5-dev libssl-dev \
-        postgresql-server-dev-11 libpq-dev
+        postgresql-server-dev-11 libpq-dev && rm -rf /var/lib/apt/lists/*;
 
 # Install timescaledb into postgresql
 RUN (cd /tmp && git clone https://github.com/timescale/timescaledb.git) && \
@@ -142,11 +142,11 @@ RUN (cd /tmp && git clone https://github.com/timescale/timescaledb.git) && \
 # init environment and cache some dependencies
 ARG DYNAMODB_ZIP_URL=https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.zip
 RUN mkdir -p /usr/lib/localstack/dynamodb && \
-      curl -L -o /tmp/localstack.ddb.zip ${DYNAMODB_ZIP_URL} && \
+      curl -f -L -o /tmp/localstack.ddb.zip ${DYNAMODB_ZIP_URL} && \
       (cd /usr/lib/localstack/dynamodb && unzip -q /tmp/localstack.ddb.zip && rm /tmp/localstack.ddb.zip)
 
 # upgrade python build tools
-RUN (virtualenv .venv && source .venv/bin/activate && pip3 install --upgrade pip wheel setuptools)
+RUN ( virtualenv .venv && source .venv/bin/activate && pip3 install --no-cache-dir --upgrade pip wheel setuptools)
 
 # add files necessary to install all dependencies
 ADD Makefile setup.py setup.cfg pyproject.toml ./
@@ -180,7 +180,7 @@ ENV ES_TMPDIR /tmp
 ENV ES_BASE_DIR=/usr/lib/localstack/elasticsearch
 ENV ES_JAVA_HOME /usr/lib/jvm/java-11
 RUN TARGETARCH_SYNONYM=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "aarch64"); \
-    curl -L -o /tmp/localstack.es.tar.gz \
+    curl -f -L -o /tmp/localstack.es.tar.gz \
         https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.10.0-linux-${TARGETARCH_SYNONYM}.tar.gz && \
     (cd /usr/lib/localstack && tar -xf /tmp/localstack.es.tar.gz && \
         mv elasticsearch* elasticsearch && rm /tmp/localstack.es.tar.gz) && \
@@ -231,7 +231,7 @@ RUN mkdir -p /.npm && \
     ln -s `pwd` /tmp/localstack_install_dir
 
 # Install the latest version of awslocal globally
-RUN pip3 install --upgrade awscli awscli-local requests
+RUN pip3 install --no-cache-dir --upgrade awscli awscli-local requests
 
 # Adds the results of `make init` that are explicitly include in .dockerignore to the image.
 # `make init` needs to be executed before building the image, because some package installers need docker themselves.
@@ -247,9 +247,9 @@ RUN make init
 # Install the latest version of localstack-ext and generate the plugin entrypoints.
 # If this is a pre-release build, also include dev releases of these packages.
 ARG LOCALSTACK_PRE_RELEASE=1
-RUN (PIP_ARGS=$([[ "$LOCALSTACK_PRE_RELEASE" == "1" ]] && echo "--pre" || true); \
+RUN ( PIP_ARGS=$([[ "$LOCALSTACK_PRE_RELEASE" == "1" ]] && echo "--pre" || true); \
       virtualenv .venv && source .venv/bin/activate && \
-      pip3 install --upgrade ${PIP_ARGS} localstack-ext[runtime])
+      pip3 install --no-cache-dir --upgrade ${PIP_ARGS} localstack-ext[runtime])
 RUN make entrypoints
 
 # Add the build date and git hash at last (changes everytime)