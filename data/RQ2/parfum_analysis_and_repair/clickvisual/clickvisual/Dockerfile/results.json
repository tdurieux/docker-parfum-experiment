{
  "startTime": 1674251743117,
  "endTime": 1674251743884,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# UI build stage\nFROM node:16-alpine3.14 as js-builder\n\nENV NODE_OPTIONS=--max_old_space_size=8000\nWORKDIR /clickvisual\nCOPY ui/package.json ui/yarn.lock ./\n\nRUN yarn install --frozen-lockfile --network-timeout 100000 && yarn cache clean;\nENV NODE_ENV production\nCOPY ui .\nRUN yarn build\n\n\n# API build stage\nFROM golang:1.17.3-alpine3.14 as go-builder\nARG GOPROXY=goproxy.cn\n\nENV GOPROXY=https://${GOPROXY},direct\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\nRUN apk add --no-cache make bash git tzdata\n\nWORKDIR /clickvisual\n\nCOPY go.mod go.sum ./\nRUN go mod download -x\nCOPY scripts scripts\nCOPY api api\nCOPY config config\nCOPY Makefile Makefile\nCOPY --from=js-builder /clickvisual/dist ./api/internal/ui/dist\nRUN ls -rlt ./api/internal/ui/dist && make build.api\n\n\n# Fianl running stage\nFROM alpine:3.14.3\nLABEL maintainer=\"clickvisual@shimo.im\"\n\nWORKDIR /clickvisual\n\nCOPY --from=go-builder /clickvisual/bin/clickvisual ./bin/\nCOPY --from=go-builder /clickvisual/config ./config\n\nEXPOSE 9001\nEXPOSE 9003\n\nRUN apk add --no-cache tzdata\n\nCMD [\"sh\", \"-c\", \"./bin/clickvisual\"]\n"
}