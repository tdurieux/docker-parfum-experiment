{
  "startTime": 1674217559118,
  "endTime": 1674217559874,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Stage 0, \"build-stage\", based on Node.js, to build and compile the frontend\nFROM node:12.8.1-alpine as build-stage\n\n# Set environment\nARG configuration=production\n\nRUN apk update && apk add --no-cache make git\n\n# Install Angular CLI\nRUN npm install @angular/cli@8.2.2 -g && npm cache clean --force;\n\n# Change directory so that our commands run inside this new directory\nWORKDIR /app\n\n# Get all the code needed to run the app\nCOPY ./ /app/\n\n# Install dependecies\nRUN npm install && npm cache clean --force;\n\n\n# Run the angular in product\nRUN ng build --configuration=$configuration\n\n# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx\nFROM nginx:1.15.8-alpine\n\n# Remove default Nginx website\nRUN rm -rf /usr/share/nginx/html/*\n\n# Copy builded static web from build-stage into nginx\nCOPY --from=build-stage /app/dist/oidc-angular/ /usr/share/nginx/html\n\nCOPY ./nginx/nginx.conf /etc/nginx/nginx.conf\n\nEXPOSE 80\n\nCMD nginx -g \"daemon off;\"\n"
}