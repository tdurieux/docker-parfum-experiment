{
  "startTime": 1674253351434,
  "endTime": 1674253352607,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos/postgresql-12-centos7\n\n# Set the locale (important for poetry)\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n# Download the Amazon CLI installer.\nADD \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" /tmp/awscliv2.zip\n\n# Switch to root user for package installs.\nUSER root\nRUN unzip /tmp/awscliv2.zip -d /tmp/ &&\\\n    /tmp/aws/install\n\nRUN yum install -y python3 python3-setuptools && rm -rf /var/cache/yum\n\n# Install poetry.\n# This is not the recommended way to install poetry, but it works.\nRUN pip3 install --no-cache-dir --upgrade pip setuptools wheel\nRUN pip3 install --no-cache-dir --upgrade poetry\n\n# Getting poetry to play nice with centos in openshift is a nightmare, so we just\n# take the easy route and create a requirements.txt file.\nCOPY pyproject.toml poetry.lock /tmp/\nRUN cd /tmp && \\\n    python3 -m poetry export -f requirements.txt --output requirements.txt && \\\n    pip3 install --no-cache-dir -r requirements.txt\n\n# Switch back to default user - 26 is the postgres user.\nUSER 26\n\n# Copy scripts.\nCOPY backup_to_s3.sh .\nCOPY cleanup_bucket.sh .\nCOPY prune.py .\nCOPY prune_test.py .\n\n# Configure the default command to run.\nCMD sh backup_to_s3.sh"
}