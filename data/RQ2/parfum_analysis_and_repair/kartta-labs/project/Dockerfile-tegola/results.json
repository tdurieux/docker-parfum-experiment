{
  "startTime": 1674248063799,
  "endTime": 1674248064650,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build, run in root of tegola source tree:\n#\n#\t$ git clone git@github.com:go-spatial/tegola.git or git clone https://github.com/go-spatial/tegola.git\n#\t$ cd tegola\n#\t$ docker build -t tegola .\n#\n# To use with local files, add file data sources (i.e. Geopackages) and config as config.toml to a\n# local directory and mount that directory as a volume at /opt/tegola_config/.  Examples:\n#\n# To display command-line options available:\n# \n#\t$ docker run --rm tegola\n#\n# Example PostGIS use w/ http-based config:\n#\n#\t$ docker run -p 8080 tegola --config http://my-domain.com/config serve\n#\n# Example PostGIS use w/ local config:\n#\t$ mkdir docker-config\n#\t$ cp my-config-file docker-config/config.toml\n#\t$ docker run -v /path/to/docker-config:/opt/tegola_config -p 8080 tegola serve\n#\n# Example gpkg use:\n#  $ mkdir docker-config\n#  $ cp my-config-file docker-config/config.toml\n#  $ cp my-db.gpkg docker-config/\n#  $ docker run -v /path/to/docker-config:/opt/tegola_config -p 8080 tegola serve\n\n# Intermediary container for building\nFROM golang:1.14.1-alpine3.11 AS build\n\nARG VERSION=\"Version Not Set\"\nENV VERSION=\"${VERSION}\"\n\n# Only needed for CGO support at time of build, results in no noticable change in binary size\n# incurs approximately 1:30 extra build time (1:54 vs 0:27) to install packages.  Doesn't impact\n# development as these layers are drawn from cache after the first build.\nRUN apk update \\\n\t&& apk add --no-cache musl-dev=1.1.24-r2 \\\n\t&& apk add --no-cache gcc=9.3.0-r0\n\n# Set up source for compilation\nRUN mkdir -p /go/src/github.com/go-spatial/tegola\nCOPY ./tegola /go/src/github.com/go-spatial/tegola\n\n# Build binary\nRUN cd /go/src/github.com/go-spatial/tegola/cmd/tegola \\\n\t&& go build -v -ldflags \"-w -X github.com/go-spatial/tegola/cmd/tegola/cmd.Version=${VERSION}\" -gcflags \"-N -l\" -o /opt/tegola \\ \n\t&& chmod a+x /opt/tegola\n\n# Create minimal deployment image, just alpine & the binary\nFROM alpine:3.11\n\nRUN apk update \\\n\t&& apk add ca-certificates \\\n\t&& rm -rf /var/cache/apk/*\n\nCOPY --from=build /opt/tegola /opt/\nWORKDIR /opt\nENTRYPOINT [\"/opt/tegola\"]\n"
}