{
  "startTime": 1674254615620,
  "endTime": 1674254616666,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 46,
        "columnEnd": 80
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 43,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 98,
        "columnStart": 25,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM must be called before other ARGS except for ARG BASE_IMAGE\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\n\n# For the rest of this Dockerfile\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Required build args, should be specified in docker_build.sh\nARG CMAKE_VERSION\nARG CCACHE_TAR_NAME\nARG PYTHON_VERSION\nARG DEVELOPER_BUILD\nRUN if [ -z \"${CMAKE_VERSION}\"   ]; then echo \"Error: ARG CMAKE_VERSION   not specified.\"; exit 1; fi \\\n && if [ -z \"${CCACHE_TAR_NAME}\" ]; then echo \"Error: ARG CCACHE_TAR_NAME not specified.\"; exit 1; fi \\\n && if [ -z \"${PYTHON_VERSION}\"  ]; then echo \"Error: ARG PYTHON_VERSION  not specified.\"; exit 1; fi \\\n && if [ -z \"${DEVELOPER_BUILD}\" ]; then echo \"Error: ARG DEVELOPER_BUILD not specified.\"; exit 1; fi\n\n# Prevent interactive inputs when installing packages\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=America/Los_Angeles\nENV SUDO=command\n\n# Minimal dependencies for running Docker\n# wget    : for downloading\n# libgl1  : available on Ubuntu ARM desktop by default\n# libgomp1: available on Ubuntu ARM desktop by default\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    wget \\\n    libgl1 \\\n    libgomp1 \\\n && rm -rf /var/lib/apt/lists/*\n\n# Minimal dependencies for building\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    clang-7 \\\n    git \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install ccache after build-essential (gcc, g++).\n# Open3D CMake can detect and use ccache automatically, except for OpenBLAS.\n# Setting the /usr/lib/ccache path is necessary to cache OpenBLAS build.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    ccache \\\n && rm -rf /var/lib/apt/lists/*\nENV PATH=\"/usr/lib/ccache:${PATH}\"\nRUN mkdir -p /usr/lib/ccache \\\n && ln -sf $(which ccache) /usr/lib/ccache/gcc \\\n && ln -sf $(which ccache) /usr/lib/ccache/g++ \\\n && ln -sf $(which ccache) /usr/lib/ccache/clang-7\nRUN echo ${PATH} \\\n && ls -alh /usr/lib/ccache \\\n && echo \"gcc=$(which gcc)\" \\\n && gcc --version \\\n && echo \"g++=$(which g++)\" \\\n && g++ --version \\\n && echo \"clang-7=$(which clang-7)\" \\\n && clang-7 --version\n\n# Uncomment this line to always fetch the latest ccache\n# ADD \"https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h\" skipcache\n\n# Download ccache from GCS bucket\n# If it doesn't exist on the cloud, an empty ${CCACHE_DIR} will be created.\n# Example directory structure:\n# - CCACHE_DIR        = ~/.cache/ccache\n# - CCACHE_DIR_NAME   = ccache\n# - CCACHE_DIR_PARENT = ~/.cache\nRUN CCACHE_DIR=$(ccache -p | grep \"cache_dir =\" | grep -oE \"[^ ]+$\") \\\n && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \\\n && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \\\n && mkdir -p ${CCACHE_DIR_PARENT} \\\n && cd ${CCACHE_DIR_PARENT} \\\n && (wget -q https://storage.googleapis.com/open3d-ci-cache/${CCACHE_TAR_NAME}.tar.gz || true) \\\n && if [ -f ${CCACHE_TAR_NAME}.tar.gz ]; then \\\n tar -xf ${CCACHE_TAR_NAME}.tar.gz; rm ${CCACHE_TAR_NAME}.tar.gzfi \\\n && mkdir -p ${CCACHE_DIR}\nRUN ccache -M 5G \\\n && ccache -s\n\n# Install Pyenv\n# Conda is not reliable on Linux ARM64.\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n    make \\\n    build-essential \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    libreadline-dev \\\n    libsqlite3-dev \\\n    wget \\\n    llvm \\\n    libncurses5-dev \\\n    libncursesw5-dev \\\n    xz-utils \\\n    tk-dev \\\n    libffi-dev \\\n    liblzma-dev \\\n    python-openssl \\\n    git \\\n && rm -rf /var/lib/apt/lists/*\nRUN git clone --depth=1 https://github.com/pyenv/pyenv.git /root/.pyenv\nENV PYENV_ROOT=\"/root/.pyenv\"\nENV PATH=\"${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:${PATH}\"\n\n# CMake\n# PWD is /, cmake will be installed to /root/${CMAKE_VERSION}/bin/cmake\nRUN CMAKE_VER_NUMBERS=$(echo \"${CMAKE_VERSION}\" | cut -d\"-\" -f2) \\\n && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER_NUMBERS}/${CMAKE_VERSION}.tar.gz \\\n && tar -xf ${CMAKE_VERSION}.tar.gz \\\n && cp -ar ${CMAKE_VERSION} ${HOME} && rm ${CMAKE_VERSION}.tar.gz\nENV PATH=${HOME}/${CMAKE_VERSION}/bin:${PATH}\n\n# Open3D C++ dependencies\n# Done before copying the full Open3D directory for better Docker caching\nCOPY ./util/install_deps_ubuntu.sh /root/Open3D/util/\nRUN /root/Open3D/util/install_deps_ubuntu.sh assume-yes \\\n && rm -rf /var/lib/apt/lists/*\n\n# Open3D repo\n# Always keep /root/Open3D as the WORKDIR\nCOPY . /root/Open3D\nWORKDIR /root/Open3D\n\n# Build Python wheel\nRUN pyenv install $(pyenv install --list | sort -r --version-sort | grep -m1 \"^ *${PYTHON_VERSION}\\.\")\nRUN pyenv local $(pyenv versions | grep ${PYTHON_VERSION})\nRUN which python \\\n && python --version \\\n && python -m pip install -U \\\n    pip==\"21.1.1\" \\\n    wheel==\"0.35.1\" \\\n    setuptools==\"50.3.2\" \\\n    yapf==\"0.30.0\" \\\n    pytest==\"6.0.1\"\n\nRUN mkdir build \\\n && cd build \\\n && cmake \\\n    -DBUILD_UNIT_TESTS=ON \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=~/open3d_install \\\n    -DDEVELOPER_BUILD=${DEVELOPER_BUILD} \\\n    .. \\\n && make -j$(nproc) \\\n && make install-pip-package -j$(nproc) \\\n && make install -j$(nproc) \\\n && pyenv rehash\nRUN cp build/lib/python_package/pip_package/*.whl /\n\n# Compress ccache folder, move to / directory (optional)\nRUN ccache -s \\\n && CCACHE_DIR=$(ccache -p | grep \"cache_dir =\" | grep -oE \"[^ ]+$\") \\\n && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \\\n && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \\\n && cd ${CCACHE_DIR_PARENT} \\\n && tar -czf ${CCACHE_TAR_NAME}.tar.gz ${CCACHE_DIR_NAME} \\\n && mv ${CCACHE_TAR_NAME}.tar.gz / && rm ${CCACHE_TAR_NAME}.tar.gz\n"
}