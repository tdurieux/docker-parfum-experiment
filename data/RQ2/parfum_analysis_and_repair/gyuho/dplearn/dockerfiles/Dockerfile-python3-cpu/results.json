{
  "startTime": 1674215647041,
  "endTime": 1674215648667,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 43,
        "columnStart": 5,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##########################\n# https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile\n# https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile.gpu\n# https://gcr.io/tensorflow/tensorflow\nFROM gcr.io/tensorflow/tensorflow:1.3.0-py3\n##########################\n\n##########################\n# Set working directory\nENV ROOT_DIR /\nWORKDIR ${ROOT_DIR}\nENV HOME /root\n##########################\n\n##########################\n# Update OS\n# Configure 'bash' for 'source' commands\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n  && apt-get -y update \\\n  && apt-get -y --no-install-recommends install \\\n  build-essential \\\n  gcc \\\n  apt-utils \\\n  pkg-config \\\n  software-properties-common \\\n  apt-transport-https \\\n  libssl-dev \\\n  sudo \\\n  bash \\\n  bash-completion \\\n  tar \\\n  unzip \\\n  curl \\\n  wget \\\n  git \\\n  libcupti-dev \\\n  rsync \\\n  python \\\n  python-pip \\\n  python-dev \\\n  python3-pip \\\n  libhdf5-dev \\\n  python-tk \\\n  python3-tk \\\n  && rm /bin/sh \\\n  && ln -s /bin/bash /bin/sh \\\n  && ls -l $(which bash) \\\n  && echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n  && apt-get -y clean \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get -y update \\\n  && apt-get -y upgrade \\\n  && apt-get -y dist-upgrade \\\n  && apt-get -y update \\\n  && apt-get -y upgrade \\\n  && apt-get -y autoremove \\\n  && apt-get -y autoclean\n##########################\n\n##########################\n# built for CPU, no need to install cuda\n##########################\n\n##########################\n# install basic packages\nRUN pip3 --no-cache-dir install \\\n  requests \\\n  glog \\\n  humanize \\\n  bcolz \\\n  h5py\n##########################\n\n##########################\n# install Keras\nRUN pip3 --no-cache-dir install \\\n  theano \\\n  keras==2.0.8 \\\n  && echo $'[global]\\n\\\ndevice = cpu\\n\\\nfloatX = float32\\n\\\n[cuda]\\n\\\nroot = /usr/local/cuda\\n'\\\n> ${HOME}/.theanorc \\\n  && cat ${HOME}/.theanorc \\\n  && mkdir -p ${HOME}/.keras/datasets \\\n  && mkdir -p ${HOME}/.keras/models \\\n  && echo $'{\\n\\\n  \"image_data_format\": \"channels_last\",\\n\\\n  \"epsilon\": 1e-07,\\n\\\n  \"floatx\": \"float32\",\\n\\\n  \"backend\": \"tensorflow\"\\n\\\n}\\n'\\\n> ${HOME}/.keras/keras.json \\\n  && cat ${HOME}/.keras/keras.json\n##########################\n\n##########################\n# Clone source code, static assets\nADD ./datasets/parameters-cats.npy /root/datasets/parameters-cats.npy\nADD ./backend ${ROOT_DIR}/backend\nADD ./scripts/docker/run ${ROOT_DIR}/scripts/docker/run\nADD ./scripts/tests ${ROOT_DIR}/scripts/tests\n##########################\n\n##########################\n# Configure Jupyter\nADD ./jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\n# We just add a little wrapper script.\nADD ./run_jupyter.sh /\n##########################\n\n"
}