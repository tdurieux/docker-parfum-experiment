{
  "startTime": 1674253257025,
  "endTime": 1674253258786,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 5,
        "columnEnd": 66
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 5,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 5,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 24,
        "columnStart": 5,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 26,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 26,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##########################\n# Last updated at 2017-11-24 15:06:50.175919 -0800 PST\nFROM ubuntu:17.10\n##########################\n\n##########################\n# Set working directory\nENV ROOT_DIR /\nWORKDIR ${ROOT_DIR}\nENV HOME /root\n##########################\n\n##########################\n# Update OS\n# Configure 'bash' for 'source' commands\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n  && apt-get -y update \\\n  && apt-get -y --no-install-recommends install \\\n  build-essential \\\n  gcc \\\n  apt-utils \\\n  software-properties-common \\\n  curl \\\n  python \\\n  git \\\n  && rm /bin/sh \\\n  && ln -s /bin/bash /bin/sh \\\n  && ls -l $(which bash) \\\n  && echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n  && apt-get -y clean \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get -y update \\\n  && apt-get -y upgrade \\\n  && apt-get -y dist-upgrade \\\n  && apt-get -y update \\\n  && apt-get -y upgrade \\\n  && apt-get -y autoremove \\\n  && apt-get -y autoclean\n##########################\n\n##########################\n# install Go\nENV GOROOT /usr/local/go\nENV GOPATH /gopath\nENV PATH ${GOPATH}/bin:${GOROOT}/bin:${PATH}\nENV GO_VERSION 1.9.2\nENV GO_DOWNLOAD_URL https://storage.googleapis.com/golang\nRUN rm -rf ${GOROOT} \\\n  && curl -f -s ${GO_DOWNLOAD_URL}/go${GO_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local/ -xz \\\n  && mkdir -p ${GOPATH}/src ${GOPATH}/bin \\\n  && go version\n##########################\n\n##########################\n# Clone source code, static assets\n# start at repository root\nRUN mkdir -p ${GOPATH}/src/github.com/gyuho/dplearn\nWORKDIR ${GOPATH}/src/github.com/gyuho/dplearn\n\nADD ./cmd ${GOPATH}/src/github.com/gyuho/dplearn/cmd\nADD ./backend ${GOPATH}/src/github.com/gyuho/dplearn/backend\nADD ./pkg ${GOPATH}/src/github.com/gyuho/dplearn/pkg\nADD ./vendor ${GOPATH}/src/github.com/gyuho/dplearn/vendor\nADD ./Gopkg.lock ${GOPATH}/src/github.com/gyuho/dplearn/Gopkg.lock\nADD ./Gopkg.toml ${GOPATH}/src/github.com/gyuho/dplearn/Gopkg.toml\n\nADD ./frontend ${GOPATH}/src/github.com/gyuho/dplearn/frontend\nADD ./angular-cli.json ${GOPATH}/src/github.com/gyuho/dplearn/angular-cli.json\nADD ./package.json ${GOPATH}/src/github.com/gyuho/dplearn/package.json\nADD ./proxy.config.json ${GOPATH}/src/github.com/gyuho/dplearn/proxy.config.json\nADD ./yarn.lock ${GOPATH}/src/github.com/gyuho/dplearn/yarn.lock\n\nADD ./scripts/docker/run ${GOPATH}/src/github.com/gyuho/dplearn/scripts/docker/run\nADD ./scripts/tests ${GOPATH}/src/github.com/gyuho/dplearn/scripts/tests\n\nRUN go install -v ./cmd/backend-web-server \\\n  && go install -v ./cmd/gen-frontend-dep\n##########################\n\n##########################\n# install Angular, NodeJS for frontend\n# 'node' needs to be in $PATH for 'yarn start' command\nENV NVM_DIR /usr/local/nvm\nRUN pushd ${GOPATH}/src/github.com/gyuho/dplearn \\\n  && curl -f https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | /bin/bash \\\n  && echo \"Running nvm scripts...\" \\\n  && source $NVM_DIR/nvm.sh \\\n  && nvm ls-remote \\\n  && nvm install v9.3.0 \\\n  && curl -f https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n  && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n  && apt-get -y update && apt-get -y --no-install-recommends install yarn \\\n  && echo \"Updating frontend dependencies...\" \\\n  && rm -rf ./node_modules \\\n  && yarn install \\\n  && npm rebuild node-sass --force \\\n  && npm install \\\n  && nvm alias default 9.3.0 \\\n  && nvm alias default node \\\n  && which node \\\n  && node -v \\\n  && cp /usr/local/nvm/versions/node/v9.3.0/bin/node /usr/bin/node \\\n  && popd && npm cache clean --force; && yarn cache clean; && rm -rf /var/lib/apt/lists/*;\n##########################\n\n"
}