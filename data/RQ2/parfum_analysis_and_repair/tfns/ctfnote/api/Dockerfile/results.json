{
  "startTime": 1674221045340,
  "endTime": 1674221045919,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 71,
        "columnEnd": 87
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 38
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 70,
        "columnEnd": 86
      }
    }
  ],
  "repairedDockerfile": "# Dockerfile\n\n# Global args, set before the first FROM, shared by all stages\nARG NODE_ENV=\"production\"\n\n################################################################################\n# Build stage 1 - `yarn build`\n\nFROM node:16-alpine as builder\n# Import our shared args\nARG NODE_ENV\n\n# Cache node_modules for as long as possible\nCOPY package.json yarn.lock tsconfig.json start.sh /app/\nWORKDIR /app/\nRUN yarn install --frozen-lockfile --production=false --no-progress && yarn cache clean;\n# Copy over the server source code\nCOPY src/ /app/src/\nCOPY migrations/ /app/migrations/\n\n# Finally run the build script\nRUN yarn run build && yarn cache clean;\n\n################################################################################\n# Build stage 2 - COPY the relevant things (multiple steps)\n\nFROM node:16-alpine as clean\n# Import our shared args\nARG NODE_ENV\n\n# Copy over selectively just the tings we need, try and avoid the rest\nCOPY --from=builder /app/package.json /app/yarn.lock /app/start.sh /app/\nCOPY --from=builder /app/dist/ /app/dist/\nCOPY --from=builder /app/migrations/ /app/migrations/\n\n################################################################################\n# Build stage FINAL - COPY everything, once, and then do a clean `yarn install`\n\nFROM node:16-alpine\n# Import our shared args\nARG NODE_ENV\n\nEXPOSE 3000\nWORKDIR /app/\n# Copy everything from stage 2, it's already been filtered\nCOPY --from=clean /app/ /app/\n\n# Install yarn ASAP because it's the slowest\nRUN yarn install --frozen-lockfile --production=true --no-progress && yarn cache clean;\nRUN chmod -R 0555 .\nRUN mkdir /app/uploads\nRUN chown node /app/uploads\n# You might want to disable GRAPHILE_TURBO if you have issues\nENV GRAPHILE_TURBO=1\nENV NODE_ENV=$NODE_ENV\nUSER node\nCMD ./start.sh db 5432 yarn start\n"
}