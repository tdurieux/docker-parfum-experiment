{
  "startTime": 1674216983854,
  "endTime": 1674216985306,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 78,
        "lineEnd": 84,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 89,
        "lineEnd": 91,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 146,
        "lineEnd": 149,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 78,
        "lineEnd": 84,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 91,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 146,
        "lineEnd": 149,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build, cd to this directory, then:\n#   docker build --build-arg GITHUB_PAT=${GITHUB_PAT} -t rstudio/shinycoreci:base-4.1-focal .\n#   docker build --build-arg GITHUB_PAT=${GITHUB_PAT} --build-arg R_VERSION=3.5 -t rstudio/shinycoreci:base-3.5-bionic .\n#   docker build --build-arg GITHUB_PAT=${GITHUB_PAT} --build-arg RELEASE=xenial -t rstudio/shinycoreci:base-3.6-xenial .\n#   docker build --build-arg GITHUB_PAT=${GITHUB_PAT} --build-arg SHINYCORECI_SHA=\"shiny-1.4.0.1\" -t rstudio/shinycoreci:base-3.6-bionic-rc_v1.4.0.1 .\n\n#\n\nARG R_VERSION=4.1\n\n# bionic, xenial\nARG RELEASE=focal\nFROM rstudio/r-base:${R_VERSION}-${RELEASE}\nARG RELEASE=focal\n\nMAINTAINER Barret Schloerke \"barret@rstudio.com\"\n\n# Don't print \"debconf: unable to initialize frontend: Dialog\" messages\nARG DEBIAN_FRONTEND=noninteractive\n\n# Prep\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  software-properties-common \\\n  locales \\\n  wget \\\n  apt-utils && rm -rf /var/lib/apt/lists/*;\n\n# Create docker user with empty password (will have uid and gid 1000)\nRUN useradd --create-home --shell /bin/bash docker \\\n  && passwd docker -d \\\n  && adduser docker sudo\n\nRUN locale-gen en_US.utf8 \\\n  && /usr/sbin/update-locale LANG=en_US.UTF-8\nENV LANG=en_US.UTF-8\n\n\n####\n# R\n####\n\n# Test\nRUN R --version\nRUN Rscript --version\n\n####\n# TeX\n####\n\n# Install TinyTeX (subset of TeXLive)\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  texinfo && rm -rf /var/lib/apt/lists/*;\n# From FAQ 5 and 6 here: https://yihui.name/tinytex/faq/\n# Also install ae, parskip, and listings packages to build R vignettes\nRUN wget -qO- \\\n  \"https://github.com/yihui/tinytex/raw/main/tools/install-unx.sh\" | \\\n  sh -s - --admin --no-path \\\n  && ~/.TinyTeX/bin/*/tlmgr path add \\\n  && tlmgr install metafont mfware inconsolata tex ae parskip listings \\\n  && tlmgr path add \\\n  && Rscript -e \"source('https://install-github.me/yihui/tinytex'); tinytex::r_texmf()\"\n\n# This is necessary for non-root users to follow symlinks to /root/.TinyTeX\nRUN chmod 755 /root\n\n\n# =====================================================================\n# Shiny Server\n# =====================================================================\n\nEXPOSE 3838\n\n# installer - gdebi wget\n# cairo device - libcairo2-dev\n# libcurl - libcurl4-gnutls-dev\n# openssl - libssl-dev\n# X11 toolkit intrinsics library - libxt-dev\n# markdown - pandoc pandoc-citeproc\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  gdebi wget \\\n  libcairo2-dev \\\n  libcurl4-gnutls-dev \\\n  libssl-dev \\\n  libxt-dev \\\n  pandoc pandoc-citeproc && rm -rf /var/lib/apt/lists/*;\n\n####\n# Common\n####\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  less \\\n  vim-tiny && rm -rf /var/lib/apt/lists/*;\n\n\n####\n# RSPM\n####\n\n# set up R to point to latest binary cran\nRUN echo \"options(\\n\\\n  repos = c('https://packagemanager.rstudio.com/cran/__linux__/${RELEASE}/latest', 'https://cloud.r-project.org/'),\\n\\\n  download.file.method = 'libcurl',\\n\\\n  # Detect number of physical cores\\n\\\n  Ncpus = parallel::detectCores(logical=FALSE)\\n\\\n  )\" >> `Rscript -e \"cat(R.home())\"`/etc/Rprofile.site\n\nRUN R -e 'source(\"https://packagemanager.rstudio.com/__docs__/admin/check-user-agent.R\")'\n\n###\n# shinycoreci\n###\n\nARG GITHUB_PAT=NOTSUPPLIED\n# make sure the variable persists\nENV GITHUB_PAT=$GITHUB_PAT\n\n# prep install\nRUN R --quiet -e \"install.packages('remotes')\"\nRUN R --quiet -e \"remotes::install_cran(c('knitr', 'rmarkdown', 'curl'))\"\nRUN R --quiet -e \"remotes::install_cran(c('shinytest'))\"\n\nARG SHINYCORECI_SHA=main\nARG APPS_SHA=main\n\n# install testing repo at specific sha\nRUN R --quiet -e \"remotes::install_github('rstudio/shinycoreci@${SHINYCORECI_SHA}', auth_token ='${GITHUB_PAT}')\"\n\n\n###\n# shinycoreci-apps\n###\n\n# Download the repo in a temp folder, then unzip it into the home folder\nRUN mkdir -p /tmp/apps_repo && \\\n  cd /tmp/apps_repo && \\\n  wget --no-check-certificate -O _apps.zip https://github.com/rstudio/shinycoreci-apps/archive/${APPS_SHA}.zip && \\\n  unzip _apps.zip -d . && \\\n  mv */* ~\n\n# list the folders to see that it worked\nRUN ls -alh ~ && echo '' &&  ls -alh ~/apps\n# remove radiant as it has a lot of trouble being installed\nRUN rm -r ~/apps/141-radiant\n\n# install R pkg system requirements\n## Install manually until ragg / RSPM fixes it; https://github.com/r-lib/ragg/issues/41\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  libfreetype6-dev \\\n  libpng-dev \\\n  libtiff5-dev && rm -rf /var/lib/apt/lists/*;\n# Must use `~/apps` as default working directory is not `~`\nRUN R --quiet -e \"system(print(shinycoreci::rspm_all_install_scripts('~/apps', release = '${RELEASE}')))\"\n# install r pkgs\nRUN R --quiet -e \"shinycoreci:::update_packages_installed('~/apps')\"\n\n\nCOPY retail.c _retail.c\nRUN gcc _retail.c -o /usr/bin/retail\nRUN chmod +x /usr/bin/retail\n\nCOPY shiny-server.sh /usr/bin/shiny-server.sh\n\nCMD [\"/bin/bash\", \"/usr/bin/shiny-server.sh\"]\n"
}