{
  "startTime": 1674217551741,
  "endTime": 1674217552541,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build, cd to this directory, then:\n#   docker build --progress=plain --build-arg GITHUB_PAT=${GITHUB_PAT} -t ghcr.io/rstudio/shinycoreci:base-4.2-focal .\n#   docker build --progress=plain --build-arg GITHUB_PAT=${GITHUB_PAT} --build-arg R_VERSION=3.5 -t ghcr.io/rstudio/shinycoreci:base-3.5-bionic .\n#   docker build --progress=plain --build-arg GITHUB_PAT=${GITHUB_PAT} --build-arg SHINYCORECI_SHA=\"shiny-1.4.0.1\" -t ghcr.io/rstudio/shinycoreci:base-3.6-bionic-rc_v1.4.0.1 .\n\n#\n\nARG R_VERSION=4.2\n\n# Not `xenial` because it is EOL\n# bionic, focal\nARG RELEASE=focal\nFROM rstudio/r-base:${R_VERSION}-${RELEASE}\nARG RELEASE=focal\n\n# MAINTAINER Barret Schloerke \"barret@rstudio.com\"\n\n# Don't print \"debconf: unable to initialize frontend: Dialog\" messages\nARG DEBIAN_FRONTEND=noninteractive\n\n## Prep\n# texinfo - TeX\n# installer - gdebi wget\n# cairo device - libcairo2-dev\n# libcurl - libcurl4-gnutls-dev\n# openssl - libssl-dev\n# X11 toolkit intrinsics library - libxt-dev\n# markdown - pandoc pandoc-citeproc\n# less, vim-tiny - common\n# cmake libnlopt-dev pkg-config - nloptr; https://stackoverflow.com/a/39597809/591574\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  software-properties-common \\\n  locales \\\n  wget \\\n  apt-utils \\\n  less \\\n  vim-tiny \\\n  texinfo \\\n  gdebi wget \\\n  libcairo2-dev \\\n  libcurl4-gnutls-dev \\\n  libssl-dev \\\n  libxt-dev \\\n  pandoc pandoc-citeproc \\\n  cmake libnlopt-dev pkg-config && rm -rf /var/lib/apt/lists/*;\n\n# Create docker user with empty password (will have uid and gid 1000)\nRUN useradd --create-home --shell /bin/bash docker \\\n  && passwd docker -d \\\n  && adduser docker sudo\n\nRUN locale-gen en_US.utf8 \\\n  && /usr/sbin/update-locale LANG=en_US.UTF-8\nENV LANG=en_US.UTF-8\n\n\n####\n# R\n####\n\n# Test\nRUN R --version\nRUN Rscript --version\n\n####\n# RSPM\n####\n\n\n# set up R to point to latest binary cran\nRUN mkdir -p '/shinycoreci/R/library' && echo \"options(\\n\\\n  repos = c('https://packagemanager.rstudio.com/cran/__linux__/${RELEASE}/latest', 'https://cloud.r-project.org/'),\\n\\\n  download.file.method = 'libcurl',\\n\\\n  # Detect number of physical cores\\n\\\n  Ncpus = parallel::detectCores(logical=FALSE)\\n\\\n  )\\n\\\n  .libPaths('/shinycoreci/R/library')\\n\\\n  \" >> `Rscript -e \"cat(R.home())\"`/etc/Rprofile.site\n\nRUN R -e 'source(\"https://packagemanager.rstudio.com/__docs__/admin/check-user-agent.R\")'\n\n####\n# TeX\n####\n\n# Install TinyTeX (subset of TeXLive)\n# From FAQ 5 and 6 here: https://yihui.name/tinytex/faq/\n# Also install ae, parskip, and listings packages to build R vignettes\nRUN wget -qO- \\\n  \"https://raw.githubusercontent.com/yihui/tinytex/main/tools/install-unx.sh\" | \\\n  sh -s - --admin --no-path \\\n  && ~/.TinyTeX/bin/*/tlmgr path add \\\n  && tlmgr install metafont mfware inconsolata tex ae parskip listings \\\n  && tlmgr path add \\\n  && Rscript -e \"install.packages('tinytex'); tinytex::r_texmf()\"\n\n# This is necessary for non-root users to follow symlinks to /root/.TinyTeX\nRUN chmod 755 /root\n\n\n# =====================================================================\n# Shiny Server\n# =====================================================================\n\n\n###\n# shinycoreci\n###\n\nARG SHINYCORECI_SHA=HEAD\n\nARG GITHUB_PAT=NOTSUPPLIED\n## Do not persist GITHUB_PAT. Supply it at run time if needed\n# # make sure the variable persists\n# ENV GITHUB_PAT=$GITHUB_PAT\n\n# pak\nRUN R --quiet -e 'install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform[[\"pkgType\"]], R.Version()[[\"os\"]], R.Version()[[\"arch\"]]))'\n\n# Install system requirements of packages\n# Install packages using binary builds from package manager\n# Install shinycoreci then install shinyverse; Do not install apps deps as they have been installed via binary in prior step\nRUN R --quiet \\\n  -e \" \\\n  pkgs <- c('base64enc', 'bslib', 'Cairo', 'clipr', 'curl', 'dbplyr', 'DiagrammeR', \\\n  'dplyr', 'DT', 'evaluate', 'flexdashboard', 'future', 'ggplot2', \\\n  'ggvis', 'hexbin', 'htmltools', 'htmlwidgets', \\\n  'httpuv', 'jsonlite', 'knitr', 'later', 'leaflet', 'magrittr', \\\n  'maps', 'markdown', 'memoise', 'networkD3', 'plotly', 'png', \\\n  'progress', 'promises', 'pryr', 'radiant', 'ragg', 'RColorBrewer', \\\n  'reactable', 'reactlog', 'reactR', 'rlang', 'rmarkdown', 'rprojroot', \\\n  'rsconnect', 'RSQLite', 'rversions', 'scales', 'sf', 'shiny', \\\n  'shinyAce', 'shinydashboard', 'shinyjs', 'shinymeta', \\\n  'shinytest2', 'shinythemes', 'shinyvalidate', 'showtext', 'sysfonts', \\\n  'systemfonts', 'testthat', 'thematic', 'tidyr', 'tm', 'websocket', \\\n  'withr', 'wordcloud', \\\n  'sessioninfo', \\\n  'debugme', 'highcharter', 'parsedate', 'quantmod', 'rjson', 'rlist', 'showimage', 'TTR', 'XML', 'xts' \\\n  ); \\\n  pak::pkg_system_requirements(pkgs, execute = TRUE); \\\n  install.packages(pkgs); \\\n  pak::pkg_install('rstudio/shinycoreci@${SHINYCORECI_SHA}');\\\n  shinycoreci:::install_shinyverse_local(upgrade = FALSE, install_apps_deps = FALSE);\\\n  \"\n\n\n###\n# Logs\n###\nCOPY retail.c _retail.c\nRUN gcc _retail.c -o /usr/bin/retail && chmod +x /usr/bin/retail\n\n\n###\n# Docker\n###\nEXPOSE 3838\n\nCOPY shiny-server.sh /usr/bin/shiny-server.sh\n\nCMD [\"/bin/bash\", \"/usr/bin/shiny-server.sh\"]\n"
}