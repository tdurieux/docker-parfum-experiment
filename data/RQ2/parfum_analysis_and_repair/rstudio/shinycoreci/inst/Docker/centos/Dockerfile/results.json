{
  "startTime": 1674254278507,
  "endTime": 1674254279701,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 5,
        "columnEnd": 62
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 2,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 31,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 97,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 5,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 5,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build, cd to this directory, then:\n#   docker build --progress=plain --build-arg GITHUB_PAT=${GITHUB_PAT} -t ghcr.io/rstudio/shinycoreci:base-4.2-centos7 .\n\n\nARG R_VERSION=4.2\n\n# centos7\nARG RELEASE=centos7\nFROM rstudio/r-base:${R_VERSION}-${RELEASE}\nARG RELEASE=centos7\n\n# MAINTAINER Barret Schloerke \"barret@rstudio.com\"\n\nRUN yum -y update && \\\n  yum -y install epel-release && \\\n  yum -y groupinstall \"Development Tools\" && rm -rf /var/cache/yum\n\n# RUN yum-builddep -y R\n\n# Create docker user with empty password (will have uid and gid 1000)\nRUN useradd --create-home --shell /bin/bash docker \\\n  && passwd docker -d \\\n  && usermod -a -G wheel docker\n\n# curl - install script below\n# vim - nice to have\n# gtest - libkml\n# expat - gdal\n# postgresql - gdal\n# proj-* - gdal\n# libXt - building R? - remove?\nRUN yum -y install \\\n  curl \\\n  expat-devel \\\n  gtest-devel \\\n  libXt-devel \\\n  postgresql-devel \\\n  proj-epsg \\\n  proj-nad \\\n  vim && rm -rf /var/cache/yum\n\n# sf is required by shiny-examples, and requires gdal > 2.0\n# gdal-devel centos package is 1.1, so we need to build libkml (a gdal dep, not\n# available as package) and then build gdal 2.4.2 ourselves\n#\n# https://gis.stackexchange.com/questions/263495/how-to-install-gdal-on-centos-7-4/263602\n# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=667247\nRUN curl -f -L -O https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/libkml/libkml-1.2.0.tar.gz \\\n  && tar -zxvf libkml-1.2.0.tar.gz \\\n  && cd libkml-1.2.0 \\\n  && sed -e '32i#include <unistd.h>' -i src/kml/base/file_posix.cc \\\n  && sed -e '435,436d' -i third_party/boost_1_34_1/boost/config/suffix.hpp \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --libdir=/usr/lib64 \\\n  && make -j2 \\\n  && make install && rm libkml-1.2.0.tar.gz\n\nRUN curl -f -O https://download.osgeo.org/gdal/2.2.3/gdal-2.2.3.tar.gz \\\n  && tar -zxvf gdal-2.2.3.tar.gz \\\n  && cd gdal-2.2.3 \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --libdir=/usr/lib64 --with-libkml --with-geos \\\n  && make -j2 \\\n  && make install \\\n  && echo '/usr/local/lib' >> /etc/ld.so.conf.d/libgdal-x86_64.conf \\\n  && ldconfig && rm gdal-2.2.3.tar.gz\n\n####\n# RSPM\n####\n\n# RUN mkdir -p /usr/local/lib64/R/etc\nRUN echo \"options(repos = c('https://packagemanager.rstudio.com/cran/__linux__/${RELEASE}/latest', 'https://cloud.r-project.org/'), download.file.method = 'libcurl', Ncpus = parallel::detectCores(logical=FALSE) )\" >> `Rscript -e \"cat(R.home())\"`/etc/Rprofile.site\nRUN cat `Rscript -e \"cat(R.home())\"`/etc/Rprofile.site\n\nRUN R -e 'source(\"https://packagemanager.rstudio.com/__docs__/admin/check-user-agent.R\")'\n\n# Install TinyTeX (subset of TeXLive)\n# From FAQ 5 and 6 here: https://yihui.name/tinytex/faq/\n# Also install ae, parskip, and listings packages to build R vignettes\nRUN wget -qO- \\\n  \"https://raw.githubusercontent.com/yihui/tinytex/main/tools/install-unx.sh\" | \\\n  sh -s - --admin --no-path \\\n  && ~/.TinyTeX/bin/*/tlmgr path add \\\n  && tlmgr install metafont mfware inconsolata tex ae parskip listings \\\n  && tlmgr path add \\\n  && Rscript -e \"install.packages('tinytex'); tinytex::r_texmf()\"\n\n# This is necessary for non-root users to follow symlinks to /root/.TinyTeX\nRUN chmod 755 /root\n\n\n###\n# shinycoreci\n###\n\n# Known deps for shinycoreci\n# pak::pkg_system_requirements(pkgs, os = \"centos\", os_release = \"7\");\n# Removed chrome installation instructions\nRUN yum install -y \\\n  epel-release \\\n  which \\\n  make \\\n  libpng-devel \\\n  libxml2-devel \\\n  libcurl-devel \\\n  openssl-devel \\\n  zlib-devel \\\n  freetype-devel \\\n  fribidi-devel \\\n  harfbuzz-devel \\\n  libicu-devel \\\n  udunits2-devel \\\n  fontconfig-devel \\\n  libjpeg-turbo-devel \\\n  libtiff-devel \\\n  gdal-devel \\\n  geos-devel \\\n  proj-devel \\\n  proj-epsg \\\n  cairo-devel \\\n  glpk-devel \\\n  gmp-devel \\\n  pandoc \\\n  cmake && rm -rf /var/cache/yum\n\nARG SHINYCORECI_SHA=HEAD\n\nARG GITHUB_PAT=NOTSUPPLIED\n## Do not persist GITHUB_PAT. Supply it at run time if needed\n# # make sure the variable persists\n# ENV GITHUB_PAT=$GITHUB_PAT\n\n# pak\nRUN R --quiet -e 'install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform[[\"pkgType\"]], R.Version()[[\"os\"]], R.Version()[[\"arch\"]]))'\n\n# Install system requirements of packages\n# Install packages using binary builds from package manager\n# Install shinycoreci then install shinyverse; Do not install apps deps as they have been installed via binary in prior step\nRUN R --quiet \\\n  -e \" \\\n  pkgs <- c('base64enc', 'bslib', 'Cairo', 'clipr', 'curl', 'dbplyr', 'DiagrammeR', \\\n  'dplyr', 'DT', 'evaluate', 'flexdashboard', 'future', 'ggplot2', \\\n  'ggvis', 'hexbin', 'htmltools', 'htmlwidgets', \\\n  'httpuv', 'jsonlite', 'knitr', 'later', 'leaflet', 'magrittr', \\\n  'maps', 'markdown', 'memoise', 'networkD3', 'plotly', 'png', \\\n  'progress', 'promises', 'pryr', 'radiant', 'ragg', 'RColorBrewer', \\\n  'reactable', 'reactlog', 'reactR', 'rlang', 'rmarkdown', 'rprojroot', \\\n  'rsconnect', 'RSQLite', 'rversions', 'scales', 'sf', 'shiny', \\\n  'shinyAce', 'shinydashboard', 'shinyjs', 'shinymeta', \\\n  'shinytest2', 'shinythemes', 'shinyvalidate', 'showtext', 'sysfonts', \\\n  'systemfonts', 'testthat', 'thematic', 'tidyr', 'tm', 'websocket', \\\n  'withr', 'wordcloud', \\\n  'sessioninfo', \\\n  'debugme', 'highcharter', 'parsedate', 'quantmod', 'rjson', 'rlist', 'showimage', 'TTR', 'XML', 'xts' \\\n  ); \\\n  # NOTE! System requirements must be updated by hand. :-(\n  # pak::pkg_system_requirements(pkgs, execute = TRUE); \\\n  install.packages(pkgs); \\\n  pak::pkg_install('rstudio/shinycoreci@${SHINYCORECI_SHA}');\\\n  shinycoreci:::install_shinyverse_local(upgrade = FALSE, install_apps_deps = FALSE);\\\n  \"\n\n\n# # list the folders to see that it worked\n# RUN ls -alh ~ && echo '' &&  ls -alh ~/apps\n# # remove radiant as it has a lot of trouble being installed\n# RUN rm -r ~/apps/141-radiant\n\n## doesn't work\n# COPY retail.c _retail.c\n# RUN gcc _retail.c -o /usr/bin/retail\n# RUN chmod +x /usr/bin/retail\n\nCOPY shiny-server.sh /usr/bin/shiny-server.sh\n\nCMD [\"/bin/bash\", \"/usr/bin/shiny-server.sh\"]\n\nRUN yum clean all\n"
}