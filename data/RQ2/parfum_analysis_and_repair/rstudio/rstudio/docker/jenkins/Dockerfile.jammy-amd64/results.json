{
  "startTime": 1674217380661,
  "endTime": 1674217381655,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:jammy\n\nENV OPERATING_SYSTEM=ubuntu_jammy\n\nARG AWS_REGION=us-east-1\n\n# install needed packages. replace httpredir apt source with cloudfront\nRUN set -x \\\n    && sed -i \"s/archive.ubuntu.com/$AWS_REGION.ec2.archive.ubuntu.com/\" /etc/apt/sources.list \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y gnupg1 && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get install --no-install-recommends -y \\\n    ant \\\n    build-essential \\\n    clang \\\n    curl \\\n    debsigs \\\n    dpkg-sig \\\n    expect \\\n    fakeroot \\\n    git-core \\\n    jq \\\n    libattr1-dev \\\n    libacl1-dev \\\n    libbz2-dev \\\n    libcap-dev \\\n    libcurl4-openssl-dev \\\n    libfuse2 \\\n    libgtk-3-0 \\\n    libgl1-mesa-dev \\\n    libegl1-mesa \\\n    libpam-dev \\\n    libpango1.0-dev \\\n    libpq-dev \\\n    libsqlite3-dev \\\n    libuser1-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libxslt1-dev \\\n    lsof \\\n    ninja-build \\\n    openjdk-11-jdk \\\n    p7zip-full \\\n    patchelf \\\n    pkg-config \\\n    python3-dev \\\n    python-is-python3 \\\n    r-base \\\n    sudo \\\n    unzip \\\n    uuid-dev \\\n    valgrind \\\n    wget \\\n    xvfb \\\n    zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# ensure we use the java 11 compiler\nRUN update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java\n\n# copy RStudio tools (needed so that our other dependency scripts can find it)\nRUN mkdir -p /tools\nCOPY dependencies/tools/rstudio-tools.sh /tools/rstudio-tools.sh\n\nRUN mkdir -p /opt/rstudio-tools/dependencies/tools\nCOPY dependencies/tools/rstudio-tools.sh /opt/rstudio-tools/dependencies/tools/rstudio-tools.sh\n\n# run install-boost twice - boost exits 1 even though it has installed good enough for our uses.\n# https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15\nCOPY dependencies/common/install-boost /tmp/\nRUN bash /tmp/install-boost || bash /tmp/install-boost\n\n# install cmake\nCOPY package/linux/install-dependencies /tmp/\nRUN /bin/bash /tmp/install-dependencies\n\n# install crashpad and its dependencies\nCOPY dependencies/common/install-crashpad /tmp/\nRUN bash /tmp/install-crashpad bionic\n\n# copy common dependency installation scripts\nRUN mkdir -p /opt/rstudio-tools/dependencies/common\nCOPY dependencies/common/ /opt/rstudio-tools/dependencies/common/\n\n# copy panmirror project setup (so install-common can install needed deps)\nRUN mkdir -p /opt/rstudio-tools/panmirror\nCOPY src/gwt/panmirror/src/editor/yarn.lock /opt/rstudio-tools/panmirror/\nCOPY src/gwt/panmirror/src/editor/package.json /opt/rstudio-tools/panmirror/\n\n# install common dependencies\nRUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-common jammy\n\n# cachebust for Quarto release\nADD https://quarto.org/docs/download/_download.json quarto_releases\nRUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-quarto\n\n# set github login from build argument if defined\nARG GITHUB_LOGIN\nENV RSTUDIO_GITHUB_LOGIN=$GITHUB_LOGIN\n\n# create jenkins user, make sudo. try to keep this toward the bottom for less cache busting\nARG JENKINS_GID=999\nARG JENKINS_UID=999\nRUN groupadd -g $JENKINS_GID jenkins && \\\n    useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins && \\\n    echo \"jenkins ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n"
}