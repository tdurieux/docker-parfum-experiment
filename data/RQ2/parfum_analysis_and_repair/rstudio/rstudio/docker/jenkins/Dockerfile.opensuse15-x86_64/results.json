{
  "startTime": 1674216775597,
  "endTime": 1674216776222,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM opensuse/leap:15.1\n\nENV OPERATING_SYSTEM=opensus_leap15\n\n# needed to build RPMs\nRUN zypper --non-interactive addrepo http://download.opensuse.org/repositories/systemsmanagement:wbem:deps/openSUSE_Tumbleweed/systemsmanagement:wbem:deps.repo\n\n# refresh repos and install required packages\nRUN zypper --non-interactive --gpg-auto-import-keys refresh && \\\n    zypper --non-interactive install -y \\\n    ant \\\n    boost-devel \\\n    clang \\\n    curl \\\n    expect \\\n    fakeroot \\\n    gcc \\\n    gcc-c++ \\\n    gdb \\\n    git \\\n    java-1_8_0-openjdk-devel  \\\n    jq \\\n    libacl-devel \\\n    libatk-1_0-0 \\\n    libatk-bridge-2_0-0 \\\n    libattr-devel \\\n    libcap-devel \\\n    libcups2 \\\n    libcurl-devel \\\n    libgtk-3-0 \\\n    libuser-devel \\\n    libuuid-devel \\\n    libxml2-devel \\\n    libXcursor-devel \\\n    libXrandr-devel \\\n    lsof \\\n    make \\\n    ninja \\\n    openssl-devel \\\n    p7zip \\\n    pam-devel \\\n    pango-devel \\\n    postgresql-devel \\\n    python \\\n    python-xml \\\n    python3 \\\n    R \\\n    rpm-build \\\n    sqlite-devel \\\n    sudo \\\n    tar \\\n    unzip \\\n    valgrind \\\n    wget \\\n    xml-commons-apis \\\n    xvfb-run \\\n    zlib-devel\n\n# copy RStudio tools (needed so that our other dependency scripts can find it)\nRUN mkdir -p /tools\nCOPY dependencies/tools/rstudio-tools.sh /tools/rstudio-tools.sh\n\nRUN mkdir -p /opt/rstudio-tools/dependencies/tools\nCOPY dependencies/tools/rstudio-tools.sh /opt/rstudio-tools/dependencies/tools/rstudio-tools.sh\n\n# run install-boost twice - boost exits 1 even though it has installed good enough for our uses.\n# https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15\nCOPY dependencies/common/install-boost /tmp/\nRUN bash /tmp/install-boost || bash /tmp/install-boost\n\n# install cmake\nCOPY package/linux/install-dependencies /tmp/\nRUN bash /tmp/install-dependencies\n\n# install crashpad and its dependencies\nCOPY dependencies/common/install-crashpad /tmp/\nRUN bash /tmp/install-crashpad opensuse15\n\n# ensure we use the java 8 compiler\nRUN update-alternatives --set java /usr/lib64/jvm/jre-1.8.0-openjdk/bin/java\n\n# copy common dependency installation scripts\nRUN mkdir -p /opt/rstudio-tools/dependencies/common\nCOPY dependencies/common/ /opt/rstudio-tools/dependencies/common/\n\n# copy panmirror project setup (so install-common can install needed deps)\nRUN mkdir -p /opt/rstudio-tools/panmirror\nCOPY src/gwt/panmirror/src/editor/yarn.lock /opt/rstudio-tools/panmirror/\nCOPY src/gwt/panmirror/src/editor/package.json /opt/rstudio-tools/panmirror/\n\n# install common dependencies\nRUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-common opensuse15\n\n# install GnuPG 1.4 from source (needed for release signing)\nRUN cd /tmp && \\\n    wget https://gnupg.org/ftp/gcrypt/gnupg/gnupg-1.4.23.tar.bz2 && \\\n    bzip2 -d gnupg-1.4.23.tar.bz2 && \\\n    tar xvf gnupg-1.4.23.tar && \\\n    cd gnupg-1.4.23 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    make install && rm gnupg-1.4.23.tar\n\n# cachebust for Quarto release\nADD https://quarto.org/docs/download/_download.json quarto_releases\nRUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-quarto\n\n# set github login from build argument if defined\nARG GITHUB_LOGIN\nENV RSTUDIO_GITHUB_LOGIN=$GITHUB_LOGIN\n\n# create nobody user and group, used by unit tests\nRUN groupadd -g 65534 nobody && \\\n    useradd -m -d /var/lib/nobody -u 65534 -g nobody nobody\n\n# create jenkins user, make sudo. try to keep this toward the bottom for less cache busting\nARG JENKINS_GID=999\nARG JENKINS_UID=999\nRUN groupadd -g $JENKINS_GID jenkins && \\\n    useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins && \\\n    echo \"jenkins ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n"
}