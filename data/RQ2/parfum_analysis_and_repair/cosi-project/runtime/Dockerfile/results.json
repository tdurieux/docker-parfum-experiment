{
  "startTime": 1674215632215,
  "endTime": 1674215633354,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# THIS FILE WAS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT.\n#\n# Generated on 2022-06-28T16:24:58Z by kres ba905fc-dirty.\n\nARG TOOLCHAIN\n\nFROM ghcr.io/siderolabs/ca-certificates:v1.0.0 AS image-ca-certificates\n\nFROM ghcr.io/siderolabs/fhs:v1.0.0 AS image-fhs\n\n# runs markdownlint\nFROM node:18.2.0-alpine AS lint-markdown\nWORKDIR /src\nRUN npm i -g markdownlint-cli@0.31.1 && npm cache clean --force;\nRUN npm i sentences-per-line@0.2.1 && npm cache clean --force;\nCOPY .markdownlint.json .\nCOPY ./README.md ./README.md\nRUN markdownlint --ignore \"CHANGELOG.md\" --ignore \"**/node_modules/**\" --ignore '**/hack/chglog/**' --rules node_modules/sentences-per-line/index.js .\n\n# collects proto specs\nFROM scratch AS proto-specs\nADD https://raw.githubusercontent.com/cosi-project/specification/fd31e32e8060fec72a4f9ee7f3b7d1924ea3e4d0/proto/v1alpha1/resource.proto /api/v1alpha1/\nADD https://raw.githubusercontent.com/cosi-project/specification/fd31e32e8060fec72a4f9ee7f3b7d1924ea3e4d0/proto/v1alpha1/state.proto /api/v1alpha1/\nADD https://raw.githubusercontent.com/cosi-project/specification/fd31e32e8060fec72a4f9ee7f3b7d1924ea3e4d0/proto/v1alpha1/runtime.proto /api/v1alpha1/\nADD https://raw.githubusercontent.com/cosi-project/specification/fd31e32e8060fec72a4f9ee7f3b7d1924ea3e4d0/proto/v1alpha1/meta.proto /api/v1alpha1/\n\n# base toolchain image\nFROM ${TOOLCHAIN} AS toolchain\nRUN apk --update --no-cache add bash curl build-base protoc protobuf-dev\n\n# build tools\nFROM toolchain AS tools\nENV GO111MODULE on\nENV CGO_ENABLED 0\nENV GOPATH /go\nARG GOLANGCILINT_VERSION\nRUN curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/${GOLANGCILINT_VERSION}/install.sh | bash -s -- -b /bin ${GOLANGCILINT_VERSION}\nARG GOFUMPT_VERSION\nRUN go install mvdan.cc/gofumpt@${GOFUMPT_VERSION} \\\n\t&& mv /go/bin/gofumpt /bin/gofumpt\nARG GOIMPORTS_VERSION\nRUN go install golang.org/x/tools/cmd/goimports@${GOIMPORTS_VERSION} \\\n\t&& mv /go/bin/goimports /bin/goimports\nARG PROTOBUF_GO_VERSION\nRUN go install google.golang.org/protobuf/cmd/protoc-gen-go@v${PROTOBUF_GO_VERSION}\nRUN mv /go/bin/protoc-gen-go /bin\nARG GRPC_GO_VERSION\nRUN go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v${GRPC_GO_VERSION}\nRUN mv /go/bin/protoc-gen-go-grpc /bin\nARG GRPC_GATEWAY_VERSION\nRUN go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v${GRPC_GATEWAY_VERSION}\nRUN mv /go/bin/protoc-gen-grpc-gateway /bin\nARG VTPROTOBUF_VERSION\nRUN go install github.com/planetscale/vtprotobuf/cmd/protoc-gen-go-vtproto@v${VTPROTOBUF_VERSION}\nRUN mv /go/bin/protoc-gen-go-vtproto /bin\nARG DEEPCOPY_VERSION\nRUN go install github.com/siderolabs/deep-copy@${DEEPCOPY_VERSION} \\\n\t&& mv /go/bin/deep-copy /bin/deep-copy\n\n# tools and sources\nFROM tools AS base\nWORKDIR /src\nCOPY ./go.mod .\nCOPY ./go.sum .\nRUN --mount=type=cache,target=/go/pkg go mod download\nRUN --mount=type=cache,target=/go/pkg go mod verify\nCOPY ./api ./api\nCOPY ./cmd ./cmd\nCOPY ./pkg ./pkg\nRUN --mount=type=cache,target=/go/pkg go list -mod=readonly all >/dev/null\n\n# runs protobuf compiler\nFROM tools AS proto-compile\nCOPY --from=proto-specs / /\nRUN protoc -I/api --grpc-gateway_out=paths=source_relative:/api --grpc-gateway_opt=generate_unbound_methods=true --go_out=paths=source_relative:/api --go-grpc_out=paths=source_relative:/api --go-vtproto_out=paths=source_relative:/api --go-vtproto_opt=features=marshal+unmarshal+size --experimental_allow_proto3_optional /api/v1alpha1/resource.proto /api/v1alpha1/state.proto /api/v1alpha1/runtime.proto /api/v1alpha1/meta.proto\nRUN rm /api/v1alpha1/resource.proto\nRUN rm /api/v1alpha1/state.proto\nRUN rm /api/v1alpha1/runtime.proto\nRUN rm /api/v1alpha1/meta.proto\nRUN goimports -w -local github.com/cosi-project/runtime /api\nRUN gofumpt -w /api\n\n# runs gofumpt\nFROM base AS lint-gofumpt\nRUN FILES=\"$(gofumpt -l .)\" && test -z \"${FILES}\" || (echo -e \"Source code is not formatted with 'gofumpt -w .':\\n${FILES}\"; exit 1)\n\n# runs goimports\nFROM base AS lint-goimports\nRUN FILES=\"$(goimports -l -local github.com/cosi-project/runtime .)\" && test -z \"${FILES}\" || (echo -e \"Source code is not formatted with 'goimports -w -local github.com/cosi-project/runtime .':\\n${FILES}\"; exit 1)\n\n# runs golangci-lint\nFROM base AS lint-golangci-lint\nCOPY .golangci.yml .\nENV GOGC 50\nRUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/root/.cache/golangci-lint --mount=type=cache,target=/go/pkg golangci-lint run --config .golangci.yml\n\n# runs unit-tests with race detector\nFROM base AS unit-tests-race\nARG TESTPKGS\nRUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg --mount=type=cache,target=/tmp CGO_ENABLED=1 go test -v -race -count 1 ${TESTPKGS}\n\n# runs unit-tests\nFROM base AS unit-tests-run\nARG TESTPKGS\nRUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg --mount=type=cache,target=/tmp go test -v -covermode=atomic -coverprofile=coverage.txt -coverpkg=${TESTPKGS} -count 1 ${TESTPKGS}\n\n# cleaned up specs and compiled versions\nFROM scratch AS generate\nCOPY --from=proto-compile /api/ /api/\n\nFROM scratch AS unit-tests\nCOPY --from=unit-tests-run /src/coverage.txt /coverage.txt\n\n# builds runtime-linux-amd64\nFROM base AS runtime-linux-amd64-build\nCOPY --from=generate / /\nWORKDIR /src/cmd/runtime\nRUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg go build -ldflags \"-s -w\" -o /runtime-linux-amd64\n\nFROM scratch AS runtime-linux-amd64\nCOPY --from=runtime-linux-amd64-build /runtime-linux-amd64 /runtime-linux-amd64\n\nFROM runtime-linux-${TARGETARCH} AS runtime\n\nFROM scratch AS image-runtime\nARG TARGETARCH\nCOPY --from=runtime runtime-linux-${TARGETARCH} /runtime\nCOPY --from=image-fhs / /\nCOPY --from=image-ca-certificates / /\nLABEL org.opencontainers.image.source https://github.com/cosi-project/runtime\nENTRYPOINT [\"/runtime\"]\n\n"
}