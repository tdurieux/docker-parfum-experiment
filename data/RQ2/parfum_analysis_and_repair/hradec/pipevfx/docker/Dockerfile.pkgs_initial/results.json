{
  "startTime": 1674253822139,
  "endTime": 1674253823822,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 29,
        "columnEnd": 56
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# this pipevfx_centos_pkgs image is the main parent image to build pipeVFX\n# so we don't have to download packages all the time.\n\n# we can also create new images based on this one to download new packages\n# without having to re-download the ones in this image!\n\n# ARG BASE_IMAGE\n# FROM $BASE_IMAGE\nFROM centos:7.6.1810\n\nARG http\nARG https\n\nENV http_proxy=$http\nENV https_proxy=$https\n\n# yum parallel download\nRUN [ ! -e /etc/yum/pluginconf.d/multithread.conf ] && \\\n    curl -f -O https://raw.githubusercontent.com/mjschultz/yum-multithread/master/multithread.py && \\\n    curl -f -O https://raw.githubusercontent.com/mjschultz/yum-multithread/master/multithread.conf && \\\n    mv ./multithread.py /usr/lib/yum-plugins && \\\n    mv ./multithread.conf /etc/yum/pluginconf.d/multithread.conf || \\\n    echo \"done\"\n\nRUN [ ! -e /atomo/.root ] && yum clean all && yum makecache || echo done\nRUN [ ! -e /atomo/.root ] && yum -y install epel-release || echo done && rm -rf /var/cache/yum\n# remove mirrors from epel or else it will fail if there are no mirrors\n# in the country the build machine is running\n# RUN cat /etc/yum.repos.d/epel.repo \\\n#     | sed 's/.baseurl/baseurl/' \\\n#     | sed 's/metalink/#metalink/' > /tmp/epel.repo && \\\n#     /bin/mv /tmp/epel.repo /etc/yum.repos.d/epel.repo\nRUN [ ! -e /atomo/.root ] && yum clean all && yum makecache && \\\n    yum -y install python2-scons wget git zip || echo \"done\" && rm -rf /var/cache/yum\n\n#COPY docker/run.sh /run.sh\nCOPY pipeline/tools/scripts/pipevfx_docker_init.sh /run.sh\n\nADD pipeline/tools/python /atomo/pipeline/tools/python\nADD pipeline/tools/config /atomo/pipeline/tools/config\nCOPY pipeline/build/SConstruct /atomo/pipeline/build/SConstruct\n\n# since we're having trouble with a gcc 4.1.2 built in centos\n# (link complains about code needing -fPIC, when it was compiled with it!)\n# we are adopting this quick and dirty solution, using a pre-compiled binary\n# of gcc 4.1.2, done in an arch linux distro!\n# this binaries work without issue, not complening about -fPIC.\nCOPY docker/gcc-bin-4.1.2.tgz       /atomo/pipeline/build/.download/4.1.2.tar.gz\nCOPY docker/setuptools-33.1.1.zip   /atomo/pipeline/build/.download/setuptools-33.1.1.zip\n\n# copy over the latest packages from the latest pkg TAG image!\n# this makes upload/download a large layer all the time,\n# but prevents this image from being rebuild all the time when we add\n# a new package.\n# By copying over, we don't run into the \"max depth exced\" docker build error for\n# having more than 125 layers, which happens a lot if we use the previous tag as base image.\n# after building this image, we tag it as centos7_latest, so next build will\n# pull the up2date cache from this build.\n#\n# # WARNING: if building for the first time, comment this line out!\n# RUN mkdir -p /atomo/pipeline/build/.download/\n# COPY --from=hradec/pipevfx_pkgs:centos7_latest /atomo/pipeline/build/.download  /atomo/pipeline/build/.download/\n\n# download packages so the image contain all tarballs.\nRUN yum install -y python2-pip python3-pip && rm -rf /var/cache/yum\n# RUN echo \"nameserver 8.8.8.8\" > /etc/resolv.conf && \\\n#     ( cat /etc/yum.repos.d/epel.repo \\\n#      | sed 's/.baseurl/baseurl/' \\\n#      | sed 's/metalink/#metalink/' > /tmp/epel.repo && \\\n#      /bin/mv /tmp/epel.repo /etc/yum.repos.d/epel.repo ) && \\\n#     export TERM=xterm && \\\n#     export ftp_proxy=$http_proxy && \\\n#     touch /atomo/.root && \\\n#     mkdir -p /atomo/pipeline/build/ && \\\n#     cd /atomo/pipeline/build && \\\n#     env && \\\n#     PYTHONPATH=/atomo/pipeline/tools/python \\\n#     scons download -j $(( $(grep MHz /proc/cpuinfo | wc -l) * 2 ))\n#|| true\n\nRUN yum clean all\nRUN rm -rf /var/cache/yum/*\nRUN rm -rvf \\\n    /run.sh \\\n    /atomo/pipeline/tools/python \\\n    /atomo/pipeline/tools/config \\\n    /atomo/pipeline/build/SConstruct \\\n    /atomo/pipeline/build/.build\n\nRUN touch /atomo/.root\n"
}