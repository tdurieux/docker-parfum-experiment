{
  "startTime": 1674256158206,
  "endTime": 1674256158973,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 125,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# this pipevfx_centos_pkgs image is the main parent image to build pipeVFX\n# so we don't have to download packages all the time.\n\n# we can also create new images based on this one to download new packages\n# without having to re-download the ones in this image!\n\nARG BASE_IMAGE\n# FROM $BASE_IMAGE\nFROM centos:7.6.1810\n# FROM hradec/pipevfx_pkgs:centos7_latest\n\nARG http\nARG https\n\nENV http_proxy=$http\nENV https_proxy=$https\nENV ftp_proxy=$http\n\nARG PRE_CMD\nENV _PRE_CMD=$PRE_CMD\n\nARG POS_CMD\nENV _POS_CMD=$POS_CMD\n\n# install gcc, git, wget, zip and scons so we can run sconstruct\nRUN yum groupinstall -y \"Development Tools\"\nRUN yum -y install python2-scons wget git zip zlib-devel openssl-devel && rm -rf /var/cache/yum\nRUN yum -y install source-highlight && rm -rf /var/cache/yum\n\n#COPY docker/run.sh /run.sh\nCOPY pipeline/tools/scripts/pipevfx_docker_init.sh /run.sh\n\n# create the build folder, if one doesn't exist\nRUN mkdir -p /atomo/pipeline/build/\n\n# WARNING: if building for the first time, comment this line out!\nRUN mkdir -p /atomo/pipeline/build/.download/\nCOPY --from=hradec/pipevfx_pkgs:centos7_latest /atomo/pipeline/build/.download  /atomo/pipeline/build/.download/\n\n# install scons\nRUN yum -y install wget git zip && rm -rf /var/cache/yum\nRUN yum -y install python-setuptools && rm -rf /var/cache/yum\nRUN curl -f -s https://bootstrap.pypa.io/pip/2.7/get-pip.py > get-pip.py && python2 ./get-pip.py\nRUN python2 -m pip install SCons\nRUN yum -y install libffi-devel && rm -rf /var/cache/yum\n\n# cleanup download folder\nRUN cd /atomo/pipeline/build && \\\n    if [ -e /atomo/pipeline/build/.download ] ; then \\\n        ls -1 .download/*{.tar,.zip}* > /tmp/xx ; \\\n        ls -1 .download/ | grep -v pip | while read p ; do \\\n            [ \"$(egrep $p /tmp/xx)\" == \"\" ] && rm -rf \".download/$p\" ; \\\n            [ -d .download/$p ] && rm -rf \".download/$p\" ; \\\n        done ; \\\n        rm /tmp/xx ; \\\n    fi\n\n# this triggers scons to build python from the pre-downloaded packages\nENV DOCKER_PYTHON=/python/\n\n# download packages so the image contain all tarballs.\n# RUN yum install -y python2-pip python3-pip\nRUN echo \"nameserver 8.8.8.8\" > /etc/resolv.conf && \\\n    touch /atomo/.root\n\nADD pipeline/tools/python /atomo/pipeline/tools/python\nADD pipeline/tools/config /atomo/pipeline/tools/config\nCOPY pipeline/build/SConstruct /atomo/pipeline/build/SConstruct\n\n# since we're having trouble with a gcc 4.1.2 built in centos\n# (link complains about code needing -fPIC, when it was compiled with it!)\n# we are adopting this quick and dirty solution, using a pre-compiled binary\n# of gcc 4.1.2, done in an arch linux distro!\n# this binaries work without issue, not complening about -fPIC.\nCOPY docker/gcc-bin-4.1.2.tgz       /atomo/pipeline/build/.download/4.1.2.tar.gz\nCOPY docker/setuptools-33.1.1.zip   /atomo/pipeline/build/.download/setuptools-33.1.1.zip\n\n\nENV TERM=xterm\nRUN cd /atomo/pipeline/build && if [ \"$_PRE_CMD\" != \"\" ] ; then \\\n        echo \"$_PRE_CMD\" ; \\\n        bash -c \"$_PRE_CMD\" ; \\\n    fi\n\nCOPY .github /.github\n# COPY .github /atomo/.github\nRUN ls -l /.github/\nRUN cd /atomo/pipeline/build && \\\n    export CACHING=1 && \\\n    PYTHONPATH=/atomo/pipeline/tools/python \\\n    STUDIO=atomo \\\n    scons install -j $(( $(grep MHz /proc/cpuinfo | wc -l) * 2 ))\n\nRUN cd /atomo/pipeline/build && if [ \"$_POS_CMD\" != \"\" ] ; then \\\n        echo \"$_POS_CMD\" ; \\\n        bash -c \"$_POS_CMD\" ; \\\n    fi\n\nRUN yum clean all\nRUN rm -rf /var/cache/yum/*\nRUN rm -r \\\n    /.github \\\n    /run.sh \\\n    /atomo/pipeline/tools/python \\\n    /atomo/pipeline/tools/config \\\n    /atomo/pipeline/build/SConstruct \\\n    /atomo/pipeline/build/.build\n\n# cleanup download folder\nRUN cd /atomo/pipeline/build && [ -e /atomo/pipeline/build/.download ] && \\\n    ( ls -1 .download/*{.tar.gz,.tar,.zip,.run,.rpm,.tgz}* > /tmp/xx ; ls -1 .download/ | grep -v pip | \\\n    while read p ; do \\\n        [ \"$(egrep $p /tmp/xx)\" == \"\" ] && rm -rf \".download/$p\" ; \\\n        [ -d .download/$p ] && rm -rf \".download/$p\" ; \\\n    done ; rm /tmp/xx ) || true\n\nRUN ls -lh /atomo/pipeline/build/.download/pip*/*/ | egrep pipeline.build\nRUN ls -lh /atomo/pipeline/build/.download/pip*/*/\nRUN ls -lh /atomo/pipeline/build/.download/\n\n\nRUN touch /atomo/.root\n\n\nRUN yum -y install \\\n    libXcursor-devel \\\n    libXrandr-devel \\\n    libXinerama-devel \\\n    libXi-devel \\\n    mesa-libGLU-devel && rm -rf /var/cache/yum\n\n\n# RUN ln -s /lib64/libssl.so /lib64/libssl.so.10 && \\\n#     ln -s /lib64/libcrypto.so /lib64/libcrypto.so.10 && \\\n#     ln -s /lib64/libtinfo.so.6 /lib64/libtinfo.so.5 && \\\n#     ln -s /lib64/libnsl.so.2 /lib64/libnsl.so.1\n\nRUN yum clean all\n"
}