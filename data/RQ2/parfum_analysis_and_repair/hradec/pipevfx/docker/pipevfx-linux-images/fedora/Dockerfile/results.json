{
  "startTime": 1674256175741,
  "endTime": 1674256176883,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# =================================================================================\n#    This file is part of pipeVFX.\n#\n#    pipeVFX is a software system initally authored back in 2006 and currently\n#    developed by Roberto Hradec - https://bitbucket.org/robertohradec/pipevfx\n#\n#    pipeVFX is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU Lesser General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#\n#    pipeVFX is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU Lesser General Public License for more details.\n#\n#    You should have received a copy of the GNU Lesser General Public License\n#    along with pipeVFX.  If not, see <http://www.gnu.org/licenses/>.\n# =================================================================================\n\nFROM fedora:35\n\nARG http\nARG https\nARG CUDA_URL='https://developer.download.nvidia.com/compute/cuda/11.6.1/local_installers/cuda_11.6.1_510.47.03_linux.run'\n\nENV http_proxy=$http\nENV https_proxy=$https\n\n\n# turn the docker image into a full flag fedora workstation image\nRUN dnf -y update\nRUN dnf -y install systemd grub2\nRUN dnf -y group install \"Fedora Workstation\" \"Development and Creative Workstation\"\n\n# atom repository\nRUN mkdir -p /tmp/.disk2/run/lock/subsys/ ; \\\n    rpm --import https://packagecloud.io/AtomEditor/atom/gpgkey ; \\\n    echo -e \"[Atom]\\nname=Atom Editor\\nbaseurl=https://packagecloud.io/AtomEditor/atom/el/7/\\$basearch\\nenabled=1\\ngpgcheck=0\\nrepo_gpgcheck=1\\ngpgkey=https://packagecloud.io/AtomEditor/atom/gpgkey\" > /etc/yum.repos.d/atom.repo ;\\\n\n# rpmfusion repository\nRUN dnf install -y \\\n    https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \\\n    https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm\n\n# ==============================================================================\n# install everything we need to run 3rd party software\n# ==============================================================================\nRUN dnf install -y \\\n        google-chrome-stable.x86_64 \\\n        xorg-x11-fonts-ISO8859-1-100dpi \\\n        xorg-x11-fonts-ISO8859-1-75dpi \\\n        liberation-mono-fonts \\\n        liberation-fonts-common \\\n        liberation-sans-fonts \\\n        liberation-serif-fonts \\\n        libXmu libXt libXi libXinerama libxcb tcsh \\\n        audiofile audiofile-devel \\\n        libpng15  \\\n        audiofile audiofile-devel e2fsprogs-libs libpng12 \\\n        x11vnc xrdp mesa-libGLw mesa-libGLU libXp \\\n        VirtualGL \\\n        gnome-tweaks libglvnd-devel cronie \\\n        gnome-extensions-app \\\n        python2 \\\n        autofs \\\n        xpra \\\n        sssd sssd-tools oddjob-mkhomedir \\\n        openssh nbd tftp rclone \\\n        ffmpeg ffmpeg-devel \\\n        vlc vlc-python \\\n        atom \\\n        dkms \\\n        avahi avahi-tools \\\n        sssd sssd-tools  oddjob-mkhomedir \\\n        gobject-introspection-devel cairo-gobject-devel dbus-devel\n\nRUN python2 -m ensurepip && \\\n    pip2 install --no-cache-dir PyGObject dbus-python\n\n# we don't want a ramdisk tmp folder.\nRUN systemctl mask tmp.mount\n\n# install docker\nRUN dnf -y remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine || true\nRUN dnf -y install dnf-plugins-core && \\\n    dnf -y config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo && \\\n    dnf -y install docker-ce docker-ce-cli containerd.io\n\n# ==============================================================================\n# damn NVIDIA\n# ==============================================================================\n# cuda\n# RUN curl -L -O \"$CUDA_URL\"\n# RUN chmod a+x ./$(basename $CUDA_URL)\n# RUN sh ./$(basename $CUDA_URL) --toolkit --samples --silent\n# RUN rm ./$(basename $CUDA_URL)\n#\n# # driver\n# RUN curl -L -O  https:$(curl -L https://www.nvidia.com$(curl -L $(curl -L 'https://www.nvidia.com/en-us/drivers/unix/' | grep 'Latest Production Branch' | head -1 | awk -F'\"' '{print $2}') | egrep 'href.*NVIDIA-Linux-x86_64' | awk -F'\"' '{print $2}') | grep 'href.*NVIDIA-Linux-x86_64' | awk -F'\"' '{print $2}')\n# RUN ls -1 ./NVIDIA-Lin*  | sort -V | tail -n 1 | while read p ; do chmod a+x $p ; done\n# RUN ls -1 /usr/src/kernels | while read k ; do \\\n#             sh $(ls -1 ./NVIDIA-Lin* | sort -V | tail -n 1)  \\\n#             -a  -s  --no-abi-note  --ui=none -j 4 \\\n#             --no-x-check \\\n#             --force-libglx-indirect \\\n#             --dkms \\\n#             --skip-depmod \\\n#             --no-nouveau-check \\\n#             --no-x-check \\\n#             --kernel-name $k \\\n#             --kernel-source-path=/usr/src/kernels/$k ; \\\n#     done\n\n# install nvidia using repository\nRUN dnf -y install akmod-nvidia \\\n    dnf -y install xorg-x11-drv-nvidia-cuda \\\n    dnf -y install vdpauinfo libva-vdpau-driver libva-utils ;\\\n\n# rebuild antyhing needed using dkms\nRUN ls -1 /usr/src/kernels | while read k ; do dkms autoinstall -k $k --kernelsourcedir /usr/src/kernels/$k ; depmod -a $k ; done\n\n# patch it\nCOPY patches/* /\n\n# ==============================================================================\n# ldap setup\n# ==============================================================================\n# configure ldap on fedora\nRUN chown -R root:root /etc/sssd ; chmod 600 -R /etc/sssd\nRUN sssctl config-check\nRUN systemctl enable sssd\n\n# select ldap autentication\nRUN authselect select sssd\n\n# use sudoers from ldap\n#RUN echo \"sudoers:    files sss\" >> /etc/nsswitch.conf\n\n# configure automatic home folder creation\nRUN echo \"session optional pam_oddjob_mkhomedir.so skel=/etc/skel/ umask=0022\" >> /etc/pam.d/system-auth\nRUN systemctl enable  oddjobd\n\n# ==============================================================================\n# fix gdm login\n# ==============================================================================\nRUN if [ \"$(grep 'IncludeAll.false' /etc/gdm/custom.conf)\" == \"\" ] ; then \\\n        echo \"[greeter]\"        | sudo tee -a /etc/gdm/custom.conf ;\\\n        echo \"IncludeAll=false\" | sudo tee -a /etc/gdm/custom.conf ;\\\n    fi\n# RUN sudo xhost +SI:localuser:gdm\nRUN sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true\n# RUN sudo -u gdm gsettings get org.gnome.login-screen disable-user-list\n\n# ==============================================================================\n# create symlinks to fix missing libraries\n# ==============================================================================\nRUN ln -s /lib64/libssl.so /lib64/libssl.so.10\nRUN ln -s /lib64/libcrypto.so /lib64/libcrypto.so.10\n\n# ==============================================================================\n# build up2date dracut initrd files, for any hardware, that have\n# network boot support, including NBD\n# ==============================================================================\nRUN dracut -fNv --regenerate-all\n"
}