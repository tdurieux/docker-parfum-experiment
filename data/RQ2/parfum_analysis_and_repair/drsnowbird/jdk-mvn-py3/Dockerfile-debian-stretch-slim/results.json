{
  "startTime": 1674255107087,
  "endTime": 1674255108390,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 25,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 5,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 5,
        "columnEnd": 245
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 25,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 25,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# use the latest LTS Ubuntu\n#FROM ubuntu:xenial\n\n#ARG JDK_VERSION=${JDK_VERSION:-openjdk-8-jdk}\n#FROM ${JDK_VERSION}\n\n#ENV DEBIAN_FRONTEND noninteractive\n\n####################################################################################################################\n#### Source: https://github.com/docker-library/openjdk\n####################################################################################################################\n#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM debian:stretch-slim\n\nMAINTAINER openkbs.org@gmail.com\n\n\n# A few reasons for installing distribution-provided OpenJDK:\n#\n#  1. Oracle.  Licensing prevents us from redistributing the official JDK.\n#\n#  2. Compiling OpenJDK also requires the JDK to be installed, and it gets\n#     really hairy.\n#\n#     For some sample build times, see Debian's buildd logs:\n#       https://buildd.debian.org/status/logs.php?pkg=openjdk-8\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tbzip2 \\\n\t\tunzip \\\n\t\txz-utils \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# Default to UTF-8 file.encoding\nENV LANG C.UTF-8\n\n# add a simple script that can auto-detect the appropriate JAVA_HOME value\n# based on whether the JDK or only the JRE is installed\nRUN { \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'set -e'; \\\n\t\techo; \\\n\t\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n\t} > /usr/local/bin/docker-java-home \\\n\t&& chmod +x /usr/local/bin/docker-java-home\n\n# do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)\" /docker-java-home\nENV JAVA_HOME /docker-java-home\n\nENV JAVA_VERSION 8u181\nENV JAVA_DEBIAN_VERSION 8u181-b13-1~deb9u1\n\n# see https://bugs.debian.org/775775\n# and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION 20170531+nmu1\n\nRUN set -ex; \\\n\t\\\n# deal with slim variants not having man page directories (which causes \"update-alternatives\" to fail)\n\tif [ ! -d /usr/share/man/man1 ]; then \\\n\t\tmkdir -p /usr/share/man/man1; \\\n\tfi; \\\n\t\\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\topenjdk-8-jdk-headless=\"$JAVA_DEBIAN_VERSION\" \\\n\t\tca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n# verify that \"docker-java-home\" returns what we expect\n\t[ \"$(readlink -f \"$JAVA_HOME\")\" = \"$(docker-java-home)\" ]; \\\n\t\\\n# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java\n\tupdate-alternatives --get-selections | awk -v home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }'; \\\n# ... and verify that it actually worked for one of the alternatives we care about\n\tupdate-alternatives --query java | grep -q 'Status: manual'\n\n# see CA_CERTIFICATES_JAVA_VERSION notes above\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\n\n# If you're reading this and have any feedback on how this image could be\n# improved, please open an issue or a pull request so we can discuss it!\n#\n#   https://github.com/docker-library/openjdk/issues\n####################################################################################################################\n\n\n##### update ubuntu and Install Python 3\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev \\\n  && apt-get install --no-install-recommends -y curl net-tools build-essential software-properties-common libsqlite3-dev sqlite3 bzip2 libbz2-dev git wget unzip vim python3-pip python3-setuptools python3-dev python3-numpy python3-scipy python3-pandas python3-matplotlib \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/*\n\n###################################\n#### ---- Java Path setup ----\n###################################\nENV PATH=$PATH:${JAVA_HOME}/bin\n\n###################################\n#### ---- Pip install packages ----\n###################################\n#### Install Maven 3\nARG MAVEN_VERSION=${MAVEN_VERSION:-3.5.4}\nENV MAVEN_VERSION=${MAVEN_VERSION}\nENV MAVEN_HOME=/usr/apache-maven-${MAVEN_VERSION}\nENV PATH $PATH:${MAVEN_HOME}/bin\nRUN curl -f -sL https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n  | gunzip \\\n  | tar x -C /usr/ \\\n  && ln -s ${MAVEN_HOME} /usr/maven\n\n###################################\n#### ---- Pip install packages ----\n###################################\nCOPY requirements.txt ./\n\n## ---------------------------------------------------\n## Don't upgrade pip to 10.0.x version -- it's broken!\n## Staying with version 8 to avoid the problem\n## ---------------------------------------------------\n\nRUN pip3 install --no-cache-dir -r ./requirements.txt\n\nRUN pip3 install --no-cache-dir --upgrade pip\n\n## VERSIONS ##\nRUN apt-get update -y && apt-get install -y --no-install-recommends sudo && \\\n    echo \"JAVA_HOME=${JAVA_HOME}\" && \\\n    java -version && \\\n    mvn --version && \\\n    #python -V && \\\n    python3 -V && \\\n    pip3 --version && rm -rf /var/lib/apt/lists/*;\n\n#### define working directory.\nRUN mkdir -p /data\nCOPY ./data /data\n\nVOLUME \"/data\"\n\nWORKDIR /data\n\n#### Define default command.\n#ENTRYPOINT [\"/bin/bash\"]\nCMD [\"/bin/bash\"]\n\n"
}