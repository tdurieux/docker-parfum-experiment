{
  "startTime": 1674220896214,
  "endTime": 1674220897509,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12.22.1-alpine\n\n# set our node environment, either development or production\n# defaults to production, compose overrides this to development on build and run\nARG NODE_ENV=production\nENV NODE_ENV $NODE_ENV\n\n# default to port 3000 for node, and 9229 and 9230 (tests) for debug\nARG PORT=8080\nENV PORT $PORT\nEXPOSE $PORT 9229 9230\n\n# you'll likely want the latest npm, regardless of node version, for speed and fixes\n# but pin this version for the best stability\nRUN npm i npm@7.5.2 -g && npm cache clean --force;\n\n# install dependencies first, in a different location for easier app bind mounting for local development\n# due to default /opt permissions we have to create the dir with root and change perms\nRUN mkdir /opt/node_app && chown node:node /opt/node_app\n# the official node image provides an unprivileged user as a security best practice\n# but we have to manually enable it. We put it here so npm installs dependencies as the same\n# user who runs the app.\n# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#non-root-user\nUSER node\nWORKDIR /opt/node_app\nCOPY --chown=node:node package*.json package-lock.json* ./\nRUN npm config list \\\n    && npm ci \\\n    && npm cache clean --force\nENV PATH /opt/node_app/node_modules/.bin:$PATH\n\nFROM base as source\n# copy in our source code last, as it changes the most\nCOPY --chown=node:node . ./app\n\nFROM source as prod\n# check every 30s to ensure this service returns HTTP 200\nCOPY --chown=node:node ./dist ./app/dist\n\n# if you want to use npm start instead, then use `docker run --init in production`\n# so that signals are passed properly. Note the code in index.js is needed to catch Docker signals\n# using node here is still more graceful stopping then npm with --init afaik\n# I still can't come up with a good production way to run with npm and graceful shutdown\nCMD [ \"node\", \"./app/dist/src/main\" ]\n\n## Stage 2 (development)\n# we don't COPY in this stage because for dev you'll bind-mount anyway\n# this saves time when building locally for dev via docker-compose\nFROM source as dev\nENV NODE_ENV=development\nENV PATH /opt/node_app/node_modules/.bin:$PATH\nRUN npm install --only=development \\\n    && npm cache clean --force\nWORKDIR /opt/node_app/app\nCMD [\"npm\", \"run\", \"start:debug\"]\n"
}