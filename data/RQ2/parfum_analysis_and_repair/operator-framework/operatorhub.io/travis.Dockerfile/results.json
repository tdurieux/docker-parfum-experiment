{
  "startTime": 1674252551350,
  "endTime": 1674252552200,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 154
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 29,
        "columnEnd": 40
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 7,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.12 as alpine_deps_builder\n\nENV DOCKERIZE_VERSION v0.6.1\nENV APP_ROOT=/app\n\nARG OPERATORS_REPO=https://github.com/operator-framework/community-operators\nARG OPERATORS_BRANCH=master\n\nRUN apk add --no-cache git curl\n\nWORKDIR ${APP_ROOT}\n\n# prepare dockerize\nRUN curl -f -#L -o dockerize.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -xzvf dockerize.tar.gz && rm dockerize.tar.gz\n\n# prepare upstream operators for server processing\nRUN mkdir -p ${APP_ROOT}/server/data/community-operators \\\n    && mkdir -p /tmp/community-operators \\\n    && git clone --depth 1 -b $OPERATORS_BRANCH $OPERATORS_REPO\n\n# build frontend dist files\nFROM node:10.19.0-alpine as alpine_frontend_builder\n\nENV APP_ROOT=/app\n\nWORKDIR ${APP_ROOT}\n\n# root for build stages\nUSER root\n\nCOPY frontend/ ${APP_ROOT}/frontend\nRUN cd ${APP_ROOT}/frontend; npm install \\\n    && npm run-script build && npm cache clean --force;\n\nFROM node:10.19.0-buster-slim\n#FROM node:10.19.0-alpine\n\nENV APP_ROOT=/app\nENV HOME=${APP_ROOT}\n\n# root for build stages\n# USER root\n\n# RUN apk add --no-cache vips-dev\n# gcc g++ make libc6-compat\n\n# server\nCOPY server/ ${APP_ROOT}/server\nRUN cd ${APP_ROOT}/server \\\n    && npm install \\\n    && npm run tsc \\\n    && rm -rf /opt/app-root/src/.npm /tmp/v8-compile-cache-0 ${APP_ROOT}/app/.config ${APP_ROOT}/.npm && npm cache clean --force;\n\nCOPY --from=alpine_deps_builder ${APP_ROOT}/dockerize /usr/local/bin/dockerize\n# COPY --from=alpine_deps_builder ${APP_ROOT}/community-operators/upstream-community-operators ${APP_ROOT}/server/data/community-operators/upstream-community-operators\nCOPY --from=alpine_frontend_builder ${APP_ROOT}/frontend/dist ${APP_ROOT}/frontend/dist\n# COPY --from=alpine_server_builder ${APP_ROOT}/server ${APP_ROOT}/server\n\n### Setup user for build execution and application runtime\nRUN chmod -R u+x ${APP_ROOT}/server/bin && \\\n    chgrp -R 0 ${APP_ROOT} && \\\n    chmod -R g=u ${APP_ROOT} /etc/passwd\n\n### Containers should NOT run as root as a good practice\nUSER 1001\n\n# Finalize\nWORKDIR ${APP_ROOT}/server\nENTRYPOINT [ \"/app/server/bin/uid_entrypoint\" ]\nEXPOSE 8080\n"
}