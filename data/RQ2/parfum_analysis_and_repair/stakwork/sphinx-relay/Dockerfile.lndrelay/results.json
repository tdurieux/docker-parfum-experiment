{
  "startTime": 1674249555724,
  "endTime": 1674249556534,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.13-alpine as builder\nLABEL maintainer=\"gonzaloaune@stakwork.com\"\n\n# Force Go to use the cgo based DNS resolver. This is required to ensure DNS\n# queries required to connect to linked containers succeed.\nENV GODEBUG netdns=cgo\n\n# Pass a tag, branch or a commit using build-arg.  This allows a docker\n# image to be built from a specified Git state.  The default image\n# will use the Git tip of master by default.\nARG checkout=\"v0.11.1-beta\"\n# ARG checkout=\"master\"\n\n# Install dependencies and build the binaries.\nRUN apk add --no-cache --update alpine-sdk git make gcc openssh-client\n\nRUN git clone https://github.com/lightningnetwork/lnd /go/src/github.com/lightningnetwork/lnd\nRUN cd /go/src/github.com/lightningnetwork/lnd \\\n&&  git checkout $checkout \\\n&&  make \\\n&&  make install tags=\"signrpc walletrpc chainrpc invoicesrpc experimental\"\n\n# Start a new, final image.\nFROM alpine:3.11 as final\n\nEXPOSE 80\nEXPOSE 9735\n\nENV NODE_ENV production\nENV NODE_SCHEME http\n\n# Add bash and ca-certs, for quality of life and SSL-related reasons.\nRUN apk --no-cache add bash ca-certificates\n\n# Copy the binaries from the builder image.\nCOPY --from=builder /go/bin/lncli /bin/\nCOPY --from=builder /go/bin/lnd /bin/\n\nRUN apk add --no-cache --update nodejs=12.22.6-r0 nodejs-npm=12.22.6-r0 sqlite=3.30.1-r2 git supervisor\n\nRUN git clone https://github.com/stakwork/sphinx-relay /relay/\n\nWORKDIR /relay/\n\nARG sphinx_checkout=\"master\"\n\nRUN git checkout $sphinx_checkout\n\nRUN apk --no-cache add g++ gcc libgcc libstdc++ linux-headers make python jq git curl libmcrypt-dev\n\nUSER root\n\nRUN rm -rf node_modules/\nRUN npm install && npm cache clean --force;\nRUN npm install --quiet node-gyp@3.8.0 -g && npm cache clean --force;\nRUN npm -g config set user root\nRUN npm install nw-gyp -g && npm cache clean --force;\nRUN npm uninstall sqlite3\nRUN npm install sqlite3 --build-from-source --runtime=node-webkit --target_arch=x64 --target=0.42.0 && npm cache clean --force;\nRUN npm uninstall sqlite3\nRUN npm install sqlite3 --build-from-source --runtime=node-webkit --target_arch=x64 --target=0.42.0 && npm cache clean --force;\nRUN npm rebuild\nRUN npm run tsc\n\nVOLUME /relay/.lnd\n\nCOPY ./docker/lnd.conf.sample /relay/.lnd/lnd.conf\n\n#Uncomment if you have a copy of the channel.db you want to use.\n#COPY ./channel.db /relay/.lnd/data/graph/mainnet/\n\nRUN git clone https://github.com/stakwork/sphinx-keysend-test/ /sphinx-keysend/\nWORKDIR /sphinx-keysend/\n\nARG sphinx_keysend_checkout=\"binary\"\n\nRUN git checkout $sphinx_keysend_checkout\nRUN npm install && npm cache clean --force;\n\nWORKDIR /relay/\n\nRUN apk --no-cache add expect bash\n\nRUN mkdir -p /var/log/supervisor\nCOPY ./docker/supervisord.conf /etc/supervisord.conf\nCOPY ./docker/lnd_supervisor.conf /etc/supervisor.d/lnd_supervisor.ini\nCOPY ./docker/relay_supervisor.conf /etc/supervisor.d/relay_supervisor.ini\nCOPY ./docker/aliases.sh /etc/profile.d/aliases.sh\n\nENV ENV=\"/etc/profile\"\n\nENTRYPOINT [ \"bash\", \"/relay/docker/entrypoint.sh\" ]\n"
}