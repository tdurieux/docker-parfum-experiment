{
  "startTime": 1674255661690,
  "endTime": 1674255662999,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 107
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# refer : https://github.com/docker-library/postgres\n# license : MIT\n# https://github.com/docker-library/postgres/blob/master/LICENSE\n\nRUN install_packages libnss-wrapper unixodbc xz-utils gnupg\n\nRUN set -ex; \\\n# pub   4096R/ACCC4CF8 2011-10-13 [expires: 2019-07-02]\n#       Key fingerprint = B97B 0AFC AA1A 47F0 44F2  44A0 7FCC 7D46 ACCC 4CF8\n# uid                  PostgreSQL Debian Repository\n\tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\"; \\\n\tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \\\n\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\tapt-key list\n\n# ENV PATH $PATH:/usr/lib/postgresql/$PG_MAJOR/bin\n\nENV PGPOOL_VERSION {{{VERSION}}}-1.pgdg110+1\n\nRUN set -ex; \\\n\t\\\n# see note below about \"*.pyc\" files\n\texport PYTHONDONTWRITEBYTECODE=1; \\\n\t\\\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"$dpkgArch\" in \\\n\t\tamd64 | arm64 | ppc64el) \\\n# arches officialy built by upstream\n\t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \\\n\t\t\tapt-get update; \\\n\t\t\t;; \\\n\t\t*) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from their published source packages\n\t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \\\n\t\t\t\\\n\t\t\ttempDir=\"$(mktemp -d)\"; \\\n\t\t\tcd \"$tempDir\"; \\\n\t\t\t\\\n\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\t\t\\\n# build .deb files from upstream's source packages (which are verified by apt-get)\n\t\t\tapt-get update; \\\n\t\t\tapt-get build-dep -y \\\n\t\t\t\tpostgresql-common pgdg-keyring \\\n\t\t\t\t\"pgpool2=$PGPOOL_VERSION\" \\\n\t\t\t; \\\n\t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \\\n\t\t\t\tapt-get source --compile \\\n\t\t\t\t\tpostgresql-common pgdg-keyring \\\n\t\t\t\t\t\"pgpool2=$PGPOOL_VERSION\" \\\n\t\t\t; \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n\t\t\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \\\n\t\t\tapt-mark manual $savedAptMark; \\\n\t\t\t\\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n\t\t\tls -lAFh; \\\n\t\t\tdpkg-scanpackages . > Packages; \\\n\t\t\tgrep '^Package: ' Packages; \\\n\t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n\t\t\tapt-get -o Acquire::GzipIndexes=false update; \\\n\t\t\t;; \\\n\tesac; \\\n\t\\\n\tapt-cache search pgpool2; \\\n\tapt-cache policy pgpool2; \\\n\tapt-get install -y --no-install-recommends postgresql-common; \\\n\tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \\\n\tapt-get install -y --no-install-recommends \\\n\t\t\"pgpool2=$PGPOOL_VERSION\" \\\n\t; \\\n\t\\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\tif [ -n \"$tempDir\" ]; then \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n\t\tapt-get purge -y --auto-remove; \\\n\t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n\tfi; \\\n\t\\\n# some of the steps above generate a lot of \"*.pyc\" files (and setting \"PYTHONDONTWRITEBYTECODE\" beforehand doesn't propagate properly for some reason), so we clean them up manually (as long as they aren't owned by a package)\n\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +; \\\n\t\\\n\tpgpool --version\n\nRUN mkdir -p /opt/bitnami/common/bin \\\n    && mkdir -p /opt/bitnami/common/sbin \\\n    && mkdir -p /opt/bitnami/common/lib \\\n\t&& mkdir -p /opt/bitnami/pgpool/bin \\\n    && mkdir -p /opt/bitnami/pgpool/sbin \\\n    && mkdir -p /opt/bitnami/pgpool/lib \\\n    && mkdir -p /opt/bitnami/pgpool/share \\\n    && mkdir -p /opt/bitnami/pgpool/etc \\\n    && ln -sf /usr/bin/pg_*                            /opt/bitnami/pgpool/bin/ \\\n    && ln -sf /usr/sbin/pg*                            /opt/bitnami/pgpool/bin/ \\\n    && ln -sf /usr/sbin/pcp_*                          /opt/bitnami/pgpool/bin/ \\\n    && ln -sf /usr/sbin/wd_*                           /opt/bitnami/pgpool/bin/ \\\n    && ln -sf /usr/sbin/watchdog_*                     /opt/bitnami/pgpool/bin/ \\\n\t&& ln -sf /opt/bitnami/pgpool/conf/pgpool.conf     /etc/pgpool2/pgpool.conf \\\n\t&& ln -sf /opt/bitnami/pgpool/etc/pcp.conf         /etc/pgpool2/pcp.conf \\\n\t&& ln -sf /opt/bitnami/pgpool/conf/pool_hba.conf   /etc/pgpool2/pool_hba.conf \\\n\t&& deluser postgres \\\n    && chown 1001:4096 -R /var/run/postgresql /var/lib/postgresql /var/log/postgresql \\\n    && chown 1001:4096 -R /etc/pgpool2\n\nRUN cd /tmp \\\n && curl -f -LO https://downloads.bitnami.com/files/stacksmith/pgpool-{{{VERSION_ORIGINAL}}}-linux-amd64-{{{OS_FLAVOUR}}}.tar.gz \\\n && tar -xzf pgpool-{{{VERSION_ORIGINAL}}}-linux-amd64-{{{OS_FLAVOUR}}}.tar.gz -C /tmp --strip-components=1 \\\n && cp -rf /tmp/files/pgpool/etc/* /opt/bitnami/pgpool/etc/ \\\n && chown 1001:1001 -R /opt/bitnami/pgpool \\\n && rm -rf /tmp/* && rm pgpool-{{{VERSION_ORIGINAL}}}-linux-amd64-{{{OS_FLAVOUR}}}.tar.gz\n"
}