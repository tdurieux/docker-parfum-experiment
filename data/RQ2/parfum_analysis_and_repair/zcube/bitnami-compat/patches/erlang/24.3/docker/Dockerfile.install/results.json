{
  "startTime": 1674253747532,
  "endTime": 1674253748875,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 1,
        "columnEnd": 84
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 1,
        "columnEnd": 94
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 1,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 1,
        "columnEnd": 86
      }
    }
  ],
  "repairedDockerfile": "# refer : https://github.com/docker-library/rabbitmq/blob/master/3.9/ubuntu/Dockerfile\n# license : MIT\n# https://github.com/docker-library/rabbitmq/blob/master/LICENSE\n\n# Default to a PGP keyserver that pgp-happy-eyeballs recognizes, but allow for substitutions locally\nARG PGP_KEYSERVER=keyserver.ubuntu.com\n# If you are building this image locally and are getting `gpg: keyserver receive failed: No data` errors,\n# run the build with a different PGP_KEYSERVER, e.g. docker build --tag rabbitmq:3.8 --build-arg PGP_KEYSERVER=pgpkeys.eu 3.8/ubuntu\n# For context, see https://github.com/docker-library/official-images/issues/4252\n\nENV OPENSSL_VERSION 1.1.1q\nENV OPENSSL_SOURCE_SHA256=\"d7939ce614029cdff0b6c20f0e2e5703158a489a72b2507b8bd51bf8c8fd10ca\"\n# https://www.openssl.org/community/omc.html\nENV OPENSSL_PGP_KEY_IDS=\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\"\n\nENV OTP_VERSION {{{VERSION}}}\n# TODO add PGP checking when the feature will be added to Erlang/OTP's build system\n# https://erlang.org/pipermail/erlang-questions/2019-January/097067.html\nENV OTP_SOURCE_SHA256=\"380a77aef34ad449bf8370a380b7901364b9be23e3d25068fc5c43258bcbec11\"\n\n# Install dependencies required to build Erlang/OTP from source\n# https://erlang.org/doc/installation_guide/INSTALL.html\n# autoconf: Required to configure Erlang/OTP before compiling\n# dpkg-dev: Required to set up host & build type when compiling Erlang/OTP\n# gnupg: Required to verify OpenSSL artefacts\n# libncurses5-dev: Required for Erlang/OTP new shell & observer_cli - https://github.com/zhongwencool/observer_cli\nRUN set -eux; \\\n\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install --yes --no-install-recommends \\\n\t\tautoconf \\\n\t\tca-certificates \\\n\t\tdpkg-dev \\\n\t\tgcc \\\n\t\tg++ \\\n\t\tgnupg \\\n\t\tlibncurses5-dev \\\n\t\tmake \\\n\t\twget \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \\\n\tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \\\n\tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \\\n\n# Required by the crypto & ssl Erlang/OTP applications\n\twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \\\n\twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tfor key in $OPENSSL_PGP_KEY_IDS; do \\\n\t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \\\n\tdone; \\\n\tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\techo \"$OPENSSL_SOURCE_SHA256  *$OPENSSL_PATH.tar.gz\" | sha256sum --check --strict -; \\\n\tmkdir -p \"$OPENSSL_PATH\"; \\\n\ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; rm \"$OPENSSL_PATH.tar.gz\" \\\n\n# Configure OpenSSL for compilation\n\tcd \"$OPENSSL_PATH\"; \\\n# without specifying \"--libdir\", Erlang will fail during \"crypto:supports()\" looking for a \"pthread_atfork\" function that doesn't exist (but only on arm32v7/armhf??)\n\tdebMultiarch=\"$(dpkg-architecture --query DEB_HOST_MULTIARCH)\"; \\\n# OpenSSL's \"config\" script uses a lot of \"uname\"-based target detection...\n\tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \\\n\tRELEASE=\"4.x.y-z\" \\\n\tSYSTEM='Linux' \\\n\tBUILD='???' \\\n\t./config \\\n\t\t--openssldir=\"$OPENSSL_CONFIG_DIR\" \\\n\t\t--libdir=\"lib/$debMultiarch\" \\\n# add -rpath to avoid conflicts between our OpenSSL's \"libssl.so\" and the libssl package by making sure /usr/local/lib is searched first (but only for Erlang/OpenSSL to avoid issues with other tools using libssl; https://github.com/docker-library/rabbitmq/issues/364)\n\t\t-Wl,-rpath=/usr/local/lib \\\n\t; \\\n# Compile, install OpenSSL, verify that the command-line works & development headers are present\n\tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \\\n\tmake install_sw install_ssldirs; \\\n\tcd ..; \\\n\trm -rf \"$OPENSSL_PATH\"*; \\\n\tldconfig; \\\n# use Debian's CA certificates\n\trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \\\n\tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \\\n# smoke test\n\topenssl version; \\\n\n\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/releases/download/OTP-$OTP_VERSION/otp_src_$OTP_VERSION.tar.gz\"; \\\n\tOTP_SHA256_URL=\"https://github.com/erlang/otp/releases/download/OTP-$OTP_VERSION/SHA256.txt\"; \\\n\tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \\\n\n# Download, verify & extract OTP_SOURCE\n\tmkdir -p \"$OTP_PATH\"; \\\n\twget --progress dot:giga --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \\\n\twget --progress dot:giga --output-document \"SHA256.txt\" \"$OTP_SHA256_URL\"; \\\n\tcat SHA256.txt | grep \"otp_src\" | awk -v version=$OTP_VERSION '{print $1,\"otp-\" version \".tar.gz\"}' | sha256sum --check --strict -; \\\n\ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \\\n\n# Configure Erlang/OTP for compilation, disable unused features & applications\n# https://erlang.org/doc/applications.html\n# ERL_TOP is required for Erlang/OTP makefiles to find the absolute path for the installation\n\tcd \"$OTP_PATH\"; \\\n\texport ERL_TOP=\"$OTP_PATH\"; \\\n\t./otp_build autoconf; \\\n\tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \\\n# add -rpath to avoid conflicts between our OpenSSL's \"libssl.so\" and the libssl package by making sure /usr/local/lib is searched first (but only for Erlang/OpenSSL to avoid issues with other tools using libssl; https://github.com/docker-library/rabbitmq/issues/364)\n\texport CFLAGS=\"$CFLAGS -Wl,-rpath=/usr/local/lib\"; \\\n\thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \\\n\tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \\\n# JIT is only supported on amd64 (until 24.x+1, where it will support arm64 as well); https://github.com/erlang/otp/blob/OTP-24.0.5/erts/configure#L21694-L21709 / https://github.com/erlang/otp/pull/4869\n\tjitFlag=; \\\n\tcase \"$dpkgArch\" in \\\n\t\tamd64) jitFlag='--enable-jit' ;; \\\n\tesac; \\\n\t./configure \\\n\t\t--host=\"$hostArch\" \\\n\t\t--build=\"$buildArch\" \\\n\t\t--disable-dynamic-ssl-lib \\\n\t\t--disable-hipe \\\n\t\t--disable-sctp \\\n\t\t--disable-silent-rules \\\n\t\t--enable-clock-gettime \\\n\t\t--enable-hybrid-heap \\\n\t\t--enable-kernel-poll \\\n\t\t--enable-shared-zlib \\\n\t\t--enable-smp-support \\\n\t\t--enable-threads \\\n\t\t--with-microstate-accounting=extra \\\n\t\t--without-common_test \\\n\t\t--without-debugger \\\n\t\t--without-dialyzer \\\n\t\t--without-diameter \\\n\t\t--without-edoc \\\n\t\t--without-erl_docgen \\\n\t\t--without-et \\\n\t\t--without-eunit \\\n\t\t--without-ftp \\\n\t\t--without-hipe \\\n\t\t--without-jinterface \\\n\t\t--without-megaco \\\n\t\t--without-observer \\\n\t\t--without-odbc \\\n\t\t--without-reltool \\\n\t\t--without-ssh \\\n\t\t--without-tftp \\\n\t\t--without-wx \\\n\t\t$jitFlag \\\n\t; \\\n# Compile & install Erlang/OTP\n\tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \\\n\tmake install; \\\n\tcd ..; \\\n\trm -rf \\\n\t\t\"$OTP_PATH\"* \\\n\t\t/usr/local/lib/erlang/lib/*/examples \\\n\t\t/usr/local/lib/erlang/lib/*/src \\\n\t; \\\n\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\tfind /usr/local -type f -executable -exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { print $(NF-1) }' \\\n\t\t| sort -u \\\n\t\t| grep -v libcrypto \\\n\t\t| grep -v libssl \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\n# Check that OpenSSL still works after purging build dependencies\n\topenssl version; \\\n# Check that Erlang/OTP crypto & ssl were compiled against OpenSSL correctly\n\terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'\n"
}