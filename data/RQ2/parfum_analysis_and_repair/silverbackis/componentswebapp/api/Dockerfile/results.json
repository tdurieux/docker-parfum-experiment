{
  "startTime": 1674255894306,
  "endTime": 1674255895132,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 5,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# the different stages of this Dockerfile are meant to be built into separate images\n# https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n# https://docs.docker.com/compose/compose-file/#target\n\n# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PHP_VERSION=7.4\nARG OPENRESTY_VERSION=1.15.8.3\nARG VARNISH_VERSION=6.4\n\n# \"php\" stage\nFROM registry.gitlab.com/silverback-web-apps/cwa/docker/php:${PHP_VERSION}-fpm-alpine AS cwa_php\n\nRUN ln -s $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini\nCOPY _docker/php/conf.d $PHP_INI_DIR/\n\n# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=1\n# install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux; \\\n\tcomposer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative; \\\n\tcomposer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\n\n# build for production\nARG APP_ENV=prod\n\n# prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.* symfony.lock ./\nRUN set -eux; \\\n\tcomposer install --prefer-dist --no-dev --no-scripts --no-progress --no-suggest; \\\n\tcomposer clear-cache\n\n# do not use .env files in production\nCOPY .env ./\nRUN composer dump-env prod; \\\n\trm .env\n\n# copy only specifically what we need\nCOPY bin bin/\nCOPY config config/\nCOPY public public/\nCOPY src src/\nCOPY assets assets/\nCOPY templates templates/\n\nRUN set -eux; \\\n\tmkdir -p var/cache var/log; \\\n\tcomposer dump-autoload --classmap-authoritative --no-dev; \\\n\tcomposer run-script --no-dev post-install-cmd; \\\n\tchmod +x bin/console; sync\n\nVOLUME /srv/api/var\n\nCOPY _docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\n\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n\n# \"nginx\" stage\n# depends on the \"php\" stage above\n# The OpenResty distribution of NGINX is only needed for Kubernetes compatiblity (dynamic upstream resolution)\nFROM openresty/openresty:${OPENRESTY_VERSION}-alpine AS cwa_nginx\n\nRUN echo -e \"env UPSTREAM;\\n$(cat /usr/local/openresty/nginx/conf/nginx.conf)\" > /usr/local/openresty/nginx/conf/nginx.conf\nCOPY _docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf\n\nWORKDIR /srv/api/public\n\nCOPY --from=cwa_php /srv/api/public ./\n\n\n# \"varnish\" stage\n# does not depend on any of the above stages, but placed here to keep everything in one Dockerfile\nFROM varnish:${VARNISH_VERSION} AS cwa_varnish\n\nRUN \\\n  apt-get update \\\n  && apt-get -y --no-install-recommends install gettext-base \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/*\n\nCOPY _docker/varnish/conf/default.vcl /tmp/varnish/conf/default.vcl\nCOPY _docker/varnish/persist-environment.sh /usr/local/bin/persist-environment\n\nRUN chmod +x /usr/local/bin/persist-environment\nENTRYPOINT [\"persist-environment\", \"docker-varnish-entrypoint\"]\n\nCMD [\"varnishd\", \"-F\", \"-f\", \"/etc/varnish/default.vcl\", \"-p\", \"http_resp_hdr_len=65536\", \"-p\", \"http_resp_size=98304\", \"-p\", \"workspace_backend=512K\"]\n"
}