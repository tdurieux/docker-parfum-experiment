{
  "startTime": 1674249871164,
  "endTime": 1674249872264,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Stage 1:\n# - base: ubuntu (default) OR prebuilt image0\n# - install build tools\n# - clone playbook\n# Stage 2: build galaxy client and server in parallel\n# Stage 2.1:\n# - run playbook with server build steps only\n# - remove build artifacts + files not needed in container\n# Stage 2.2:\n# - run playbook with client build steps only\n# - remove build artifacts + files not needed in container\n# Stage 3:\n# - create galaxy user + group + directory\n# - copy galaxy files from stage 2.1 and 2.2\n# - finalize container (set path, user...)\n\n# Init ARGs\nARG ROOT_DIR=/galaxy\nARG SERVER_DIR=$ROOT_DIR/server\n\nARG STAGE1_BASE=python:3.7-slim\nARG FINAL_STAGE_BASE=$STAGE1_BASE\nARG GALAXY_USER=galaxy\nARG GALAXY_PLAYBOOK_REPO=https://github.com/galaxyproject/galaxy-docker-k8s\nARG GALAXY_PLAYBOOK_BRANCH=v2.0.0\n\nARG GIT_COMMIT=unspecified\nARG BUILD_DATE=unspecified\nARG IMAGE_TAG=unspecified\n\n#======================================================\n# Stage 1 - Setup common requirements for build\n#======================================================\nFROM $STAGE1_BASE AS stage1\nARG DEBIAN_FRONTEND=noninteractive\nARG SERVER_DIR\nARG GALAXY_PLAYBOOK_REPO\nARG GALAXY_PLAYBOOK_BRANCH\n\n# Init Env\nENV LC_ALL=en_US.UTF-8\nENV LANG=en_US.UTF-8\n\n# Install build dependencies + ansible\nRUN set -xe; \\\n    echo \"Acquire::http {No-Cache=True;};\" > /etc/apt/apt.conf.d/no-cache \\\n    && apt-get -qq update && apt-get install -y --no-install-recommends \\\n        locales locales-all \\\n        git \\\n        make \\\n        libc-dev \\\n        bzip2 \\\n        gcc \\\n    && pip install --no-cache-dir --no-cache virtualenv 'ansible<2.10' \\\n    && apt-get autoremove -y && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Remove context from previous build; copy current context; run playbook\nWORKDIR /tmp/ansible\nRUN rm -rf *\nENV LC_ALL en_US.UTF-8\nRUN git clone --depth 1 --branch $GALAXY_PLAYBOOK_BRANCH $GALAXY_PLAYBOOK_REPO galaxy-docker\nWORKDIR /tmp/ansible/galaxy-docker\nRUN ansible-galaxy install -r requirements.yml -p roles --force-with-deps\n\n# Add Galaxy source code\nCOPY . $SERVER_DIR/\n\n#======================================================\n# Stage 2.1 - Build galaxy server\n#======================================================\nFROM stage1 AS server_build\nARG SERVER_DIR\n\nRUN ansible-playbook -i localhost, playbook.yml -v -e galaxy_build_client=False -e galaxy_virtualenv_command=virtualenv\n\nRUN cat /galaxy/server/lib/galaxy/dependencies/conditional-requirements.txt | grep psycopg2-binary | xargs /galaxy/server/.venv/bin/pip install\n\n# Remove build artifacts + files not needed in container\nWORKDIR $SERVER_DIR\n# Save commit hash of HEAD before zapping git folder\nRUN git rev-parse HEAD > GITREVISION\nRUN rm -rf \\\n        .ci \\\n        .git \\\n        .venv/include/node \\\n        .venv/src/node* \\\n        doc \\\n        test \\\n        test-data\n# Clean up *all* node_modules, including plugins.  Everything is already built+staged.\nRUN find . -name \"node_modules\" -type d -prune -exec rm -rf '{}' +\n\n#======================================================\n# Stage 2.2 - Build galaxy client\n#======================================================\nFROM stage1 AS client_build\nARG SERVER_DIR\n\nRUN ansible-playbook -i localhost, playbook.yml -v --tags \"galaxy_build_client\" -e galaxy_virtualenv_command=virtualenv\n\nWORKDIR $SERVER_DIR\nRUN rm -rf \\\n        .ci \\\n        .git \\\n        .venv/include/node \\\n        .venv/src/node* \\\n        doc \\\n        test \\\n        test-data\n# Clean up *all* node_modules, including plugins.  Everything is already built+staged.\nRUN find . -name \"node_modules\" -type d -prune -exec rm -rf '{}' +\n\n#======================================================\n# Stage 3 - Build final image based on previous stages\n#======================================================\nFROM $FINAL_STAGE_BASE\nARG DEBIAN_FRONTEND=noninteractive\nARG ROOT_DIR\nARG SERVER_DIR\nARG GALAXY_USER\n\nARG GIT_COMMIT\nARG BUILD_DATE\nARG IMAGE_TAG\n\nLABEL org.opencontainers.image.title=\"Galaxy Minimal Image\" \\\n      org.opencontainers.image.description=\"A size optimized image for Galaxy targeting k8s and ci applications\" \\\n      org.opencontainers.image.authors=\"galaxyproject.org\" \\\n      org.opencontainers.image.vendor=\"Galaxy Project\" \\\n      org.opencontainers.image.documentation=\"https://github.com/galaxyproject/galaxy-docker-k8s\" \\\n      org.opencontainers.image.licenses=\"MIT\" \\\n      org.opencontainers.image.version=\"$IMAGE_TAG\" \\\n      org.opencontainers.image.url=\"https://github.com/galaxyproject/galaxy-docker-k8s\" \\\n      org.opencontainers.image.source=\"https://github.com/galaxyproject/galaxy.git\" \\\n      org.opencontainers.image.revision=$GIT_COMMIT \\\n      org.opencontainers.image.created=$BUILD_DATE\n\n# Init Env\nENV LC_ALL=en_US.UTF-8\nENV LANG=en_US.UTF-8\n\n# Install procps (contains kill, ps etc.), less, curl, vim-tiny and nano-tiny\n# for convenience and debugging purposes. Nano and vim commands are aliased\n# to their tiny variants using the debian alternatives system.\n# Bzip2 and virtualenv are installed for backwards compatibility with older\n# versions of this image which was based on Ubuntu and contained these\n# utilities.\nRUN set -xe; \\\n    echo \"Acquire::http {No-Cache=True;};\" > /etc/apt/apt.conf.d/no-cache \\\n    && apt-get -qq update && apt-get install -y --no-install-recommends \\\n        locales \\\n        vim-tiny \\\n        nano-tiny \\\n        curl \\\n        procps \\\n        less \\\n        bzip2 \\\n        tini \\\n    && update-alternatives --install /usr/bin/nano nano /bin/nano-tiny 0 \\\n    && update-alternatives --install /usr/bin/vim vim /usr/bin/vim.tiny 0 \\\n    && echo \"set nocompatible\\nset backspace=indent,eol,start\" >> /usr/share/vim/vimrc.tiny \\\n    && echo \"$LANG UTF-8\" > /etc/locale.gen \\\n    && locale-gen $LANG && update-locale LANG=$LANG \\\n    && apt-get autoremove -y && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Create Galaxy user, group, directory; chown\nRUN set -xe; \\\n      adduser --system --group $GALAXY_USER \\\n      && mkdir -p $SERVER_DIR \\\n      && chown $GALAXY_USER:$GALAXY_USER $ROOT_DIR -R\n\nWORKDIR $ROOT_DIR\n# Copy galaxy files to final image\n# The chown value MUST be hardcoded (see https://github.com/moby/moby/issues/35018)\nCOPY --chown=$GALAXY_USER:$GALAXY_USER --from=server_build $ROOT_DIR .\nCOPY --chown=$GALAXY_USER:$GALAXY_USER --from=client_build $SERVER_DIR/static ./server/static\n\nWORKDIR $SERVER_DIR\n\n# The data in version.json will be displayed in Galaxy's /api/version endpoint\nRUN printf \"{\\n  \\\"git_commit\\\": \\\"$(cat GITREVISION)\\\",\\n  \\\"build_date\\\": \\\"$BUILD_DATE\\\",\\n  \\\"image_tag\\\": \\\"$IMAGE_TAG\\\"\\n}\\n\" > version.json\n\nEXPOSE 8080\nUSER $GALAXY_USER\n\nENV PATH=\"$SERVER_DIR/.venv/bin:${PATH}\"\nENV GALAXY_CONFIG_CONDA_AUTO_INIT=False\n\nENTRYPOINT [\"tini\", \"--\"]\n\n# [optional] to run:\nCMD galaxy\n"
}