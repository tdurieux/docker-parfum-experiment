{
  "startTime": 1674252258257,
  "endTime": 1674252259853,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 25,
        "columnEnd": 75
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM toolshed/requirements\nMAINTAINER John Chilton <jmchilton@gmail.com>\n\nENV MYSQL_MAJOR=5.7 \\\n    MYSQL_VERSION=5.7.5-m15\n\n# Pre-install a bunch of packages to speed up ansible steps.\nRUN apt-get update -y && apt-get install --no-install-recommends -y software-properties-common curl && \\\n    apt-add-repository -y ppa:ansible/ansible && \\\n    curl -f -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \\\n    echo 'deb https://deb.nodesource.com/node trusty main' > /etc/apt/sources.list.d/nodesource.list && \\\n    apt-key adv --keyserver pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5 && \\\n    echo \"deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-${MYSQL_MAJOR}-dmr\" > /etc/apt/sources.list.d/mysql.list && \\\n    { \\\n\t\techo mysql-community-server mysql-community-server/data-dir select ''; \\\n\t\techo mysql-community-server mysql-community-server/root-pass password ''; \\\n\t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \\\n\t\techo mysql-community-server mysql-community-server/remove-test-db select false; \\\n\t} | debconf-set-selections && \\\n    apt-get update -y && \\\n    apt-get install --no-install-recommends -y libpq-dev postgresql postgresql-client postgresql-plpython-9.3 \\\n            ansible postgresql-server-dev-9.3 wget mysql-server=\"${MYSQL_VERSION}\"* \\\n            nodejs && \\\n    npm install -g grunt-contrib-qunit grunt grunt-cli casperjs phantomjs && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && npm cache clean --force;\n\nRUN mkdir -p /tmp/ansible && \\\n    mkdir -p /opt/galaxy/db && \\\n    chown -R postgres:postgres /opt/galaxy/db && \\\n    sed -Ei 's/^(bind-address|log)/#&/' /etc/mysql/my.cnf\n\nADD start_mysql.sh /opt/galaxy/start_mysql.sh\nADD ansible_vars.yml /tmp/ansible/ansible_vars.yml\nADD provision.yml /tmp/ansible/provision.yml\n\nENV PYTHON_EGG_CACHE=/root/.python-eggs \\\n    GALAXY_ROOT=/opt/galaxy/galaxy-app\n\nRUN cd /tmp/ansible && \\\n    mkdir roles && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-os && \\\n\twget -qO- https://github.com/galaxyproject/ansible-galaxy-os/archive/master.tar.gz | tar -xzvf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-os && \\\n    mkdir roles/galaxyprojectdotorg.cloudman-database && \\\n    wget -qO- https://github.com/galaxyproject/ansible-cloudman-database/archive/master.tar.gz | tar -xzvf- --strip-components=1 -C roles/galaxyprojectdotorg.cloudman-database && \\\n    mkdir roles/galaxyprojectdotorg.galaxy && \\\n    wget -qO- https://github.com/galaxyproject/ansible-galaxy/archive/master.tar.gz | tar -xzvf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=image -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=database -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=galaxy -c local -e \"@ansible_vars.yml\" && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN cd $GALAXY_ROOT && \\\n    echo \"Prepopuating postgres database\" && \\\n    su -c '/usr/lib/postgresql/9.3/bin/pg_ctl -o \"-F\" start -D /opt/galaxy/db' postgres && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"postgresql://galaxy@localhost:5930/galaxy\" sh create_db.sh && \\\n    echo \"Prepopuating sqlite database\" && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/galaxy.sqlite\" sh create_db.sh && \\\n\tsh /opt/galaxy/start_mysql.sh && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"mysql://galaxy:galaxy@localhost/galaxy?unix_socket=/var/run/mysqld/mysqld.sock\" sh create_db.sh\n\nADD run_test_wrapper.sh /usr/local/bin/run_test_wrapper.sh\n\nENTRYPOINT [\"/bin/bash\", \"/usr/local/bin/run_test_wrapper.sh\"]\n"
}