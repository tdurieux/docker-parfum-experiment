{
  "startTime": 1674254885504,
  "endTime": 1674254886213,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 23,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install npm packages\nFROM node:10.17.0-alpine AS npm\nWORKDIR /code\nCOPY ./static/package*.json /code/static/\nRUN cd /code/static && npm install && npm cache clean --force;\n\n# Main image\nFROM python:3.7\n\n# Keeps Python from generating .pyc files in the container\nENV PYTHONDONTWRITEBYTECODE 1\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED 1\n\n# Add poetry to PATH\nENV PATH=\"${PATH}:/root/.poetry/bin\"\n\nWORKDIR /code\n\n# Copy poetry files\nCOPY poetry.lock pyproject.toml ./\n\n# Install and setup poetry\nRUN pip install --no-cache-dir -U pip \\\n    && apt-get update \\\n    && apt install --no-install-recommends -y curl netcat gcc python3-dev gnupg git libre2-dev \\\n    && curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - \\\n    # Remove curl and netcat from the image\n    && apt-get purge -y curl netcat \\\n    # Run poetry\n    && poetry config virtualenvs.create false \\\n    && poetry install  --no-interaction --no-ansi --no-root \\\n    # Clear apt cache \\\n    && apt-get purge -y libre2-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# copy npm packages\nCOPY --from=npm /code /code\n\n# copy everything else into /code\nCOPY . .\n\nEXPOSE 7777\n\n#gunicorn wsgi:app -b 0.0.0.0:7777 -w 2 --timeout 15 --log-level DEBUG\nCMD [\"gunicorn\",\"wsgi:app\",\"-b\",\"0.0.0.0:7777\",\"-w\",\"2\",\"--timeout\",\"15\"]\n"
}