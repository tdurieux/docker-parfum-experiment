{
  "startTime": 1674215151100,
  "endTime": 1674215152013,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM openjdk:8\n\nLABEL maintainer=\"ATOL Conseils & DÃ©veloppements\"\n\nARG GS_VERSION=2.16.2\n\n# Trick copy or download (Docker must exists). Pattern :\n# COPY Dockerfile <resource>* <dest>/\n# RUN ([ -f <dest>/<resource> ] || wget -P <dest> -q <>/<resource-part-url><resource>) && rm -f Dockerfile\n\nENV GEOSERVER_HOME=/var/lib/geoserver\nENV GEOSERVER_DATA_DIR=/var/remocra/geoserver_data\n\nENV TZ=Europe/Paris\n\nCOPY scripts/* /scripts/\n\n# unzip\nRUN set -e \\\n    && apt-get -y update \\\n    && apt-get install --no-install-recommends -y unzip htop \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && chmod +x /scripts/*.sh\n\n# GeoServer\nCOPY Dockerfile ext/geoserver-${GS_VERSION}-bin.zip* /tmp/\nRUN set -x \\\n  && ([ -f /tmp/geoserver-${GS_VERSION}-bin.zip ] \\\n    || wget -P /tmp -q https://sourceforge.net/projects/geoserver/files/GeoServer/${GS_VERSION}/geoserver-${GS_VERSION}-bin.zip) \\\n  && unzip -qn /tmp/geoserver-${GS_VERSION}-bin.zip -d $(dirname \"$GEOSERVER_HOME\") \\\n  && mv -f $(dirname \"$GEOSERVER_HOME\")/geoserver-${GS_VERSION} $GEOSERVER_HOME \\\n  && rm -f /tmp/geoserver-*-bin.zip \\\n  && rm -f Dockerfile # cleaning\n\n# Plugin querylayer\nCOPY Dockerfile ext/geoserver-${GS_VERSION}-querylayer-plugin.zip* /tmp/\nRUN set -x \\\n  && ([ -f /tmp/geoserver-${GS_VERSION}-querylayer-plugin.zip ] \\\n    || wget -P /tmp -q https://sourceforge.net/projects/geoserver/files/GeoServer/${GS_VERSION}/extensions/geoserver-${GS_VERSION}-querylayer-plugin.zip) \\\n  && unzip -qn /tmp/geoserver-*-querylayer-plugin.zip -d ${GEOSERVER_HOME}/webapps/geoserver/WEB-INF/lib/ \\\n  && rm -f /tmp/geoserver-*-querylayer-plugin.zip \\\n  && rm -f Dockerfile # cleaning\n\n# https://geoserver.geo-solutions.it/edu/en/install_run/jai_io_install.html\n\n# JAI\nCOPY Dockerfile ext/jai-1_1_3-lib-linux-amd64.tar.gz* /tmp/\nRUN set -x \\\n  && ([ -f /tmp/jai-1_1_3-lib-linux-amd64.tar.gz ] \\\n    || wget -P /tmp -q https://download.java.net/media/jai/builds/release/1_1_3/jai-1_1_3-lib-linux-amd64.tar.gz) \\\n  && tar -xzf /tmp/jai-1_1_3-lib-linux-amd64.tar.gz -C /tmp \\\n  && mv /tmp/jai-1_1_3/lib/*.jar $JAVA_HOME/jre/lib/ext/ \\\n  && mv /tmp/jai-1_1_3/lib/*.so $JAVA_HOME/jre/lib/amd64/ \\\n  && rm -f /tmp/jai-1_1_3-lib-linux-amd64.tar.gz \\\n  && rm -r /tmp/jai-1_1_3 \\\n  && rm -f Dockerfile # cleaning\n\n# JAI Image I/O\nCOPY Dockerfile ext/jai_imageio-1_1-lib-linux-amd64.tar.gz* /tmp/\nRUN set -x \\\n  && ([ -f /tmp/jai_imageio-1_1-lib-linux-amd64.tar.gz ] \\\n    || wget -P /tmp -q https://download.java.net/media/jai-imageio/builds/release/1.1/jai_imageio-1_1-lib-linux-amd64.tar.gz) \\\n  && tar -xzf /tmp/jai_imageio-1_1-lib-linux-amd64.tar.gz -C /tmp \\\n  && mv /tmp/jai_imageio-1_1/lib/*.jar $JAVA_HOME/jre/lib/ext/ \\\n  && mv /tmp/jai_imageio-1_1/lib/*.so $JAVA_HOME/jre/lib/amd64/ \\\n  && rm -f /tmp/jai_imageio-1_1-lib-linux-amd64.tar.gz \\\n  && rm -r /tmp/jai_imageio-1_1 \\\n  && rm -f Dockerfile # cleaning\n\n# Cleaning GeoServer\nRUN rm -f ${GEOSERVER_HOME}/webapps/geoserver/WEB-INF/lib/jai*.jar\n\nENV \\\n    GEOSERVER_INITIAL_MEMORY=\"1G\" \\\n    GEOSERVER_MAXIMUM_MEMORY=\"2G\"\n\n# ---------------\n# Non root user\n# ---------------\nARG UID=1000\nARG GID=1000\nRUN groupadd -g ${GID} geoserver \\\n  && useradd -u ${UID} -g geoserver geoserver \\\n  && chown -R geoserver ${GEOSERVER_HOME} \\\n  && mkdir -p ${GEOSERVER_DATA_DIR} \\\n  && chown -R geoserver ${GEOSERVER_DATA_DIR}\nUSER geoserver\n\nVOLUME ${GEOSERVER_DATA_DIR}\n\nENTRYPOINT [\"/scripts/entrypoint.sh\"]"
}