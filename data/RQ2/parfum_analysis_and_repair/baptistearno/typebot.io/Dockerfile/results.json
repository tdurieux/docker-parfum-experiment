{
  "startTime": 1674219412946,
  "endTime": 1674219414076,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 26,
        "columnEnd": 77
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 35,
        "columnEnd": 51
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 38,
        "columnEnd": 54
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 80,
        "columnEnd": 96
      }
    }
  ],
  "repairedDockerfile": "# https://github.com/vercel/turborepo/issues/215#issuecomment-1027058056\nFROM node:16-slim AS base\nWORKDIR /app\nARG SCOPE\nENV SCOPE=${SCOPE}\n\nFROM base AS pruner\nRUN yarn global add turbo@1.2.9 && yarn cache clean;\nCOPY . .\nRUN turbo prune --scope=\"${SCOPE}\" --docker\n\nFROM base AS installer\nCOPY --from=pruner /app/out/json/ .\nCOPY --from=pruner /app/out/yarn.lock ./yarn.lock\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\nFROM base AS builder\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nCOPY --from=installer /app/ .\nCOPY --from=pruner /app/out/full/ .\nCOPY ./apps/${SCOPE}/.env.docker ./apps/${SCOPE}/.env.production\nCOPY ./apps/${SCOPE}/.env.docker ./apps/${SCOPE}/.env.local\nRUN apt-get -qy update && apt-get -qy --no-install-recommends install openssl && rm -rf /var/lib/apt/lists/*;\nRUN yarn turbo run build --scope=\"${SCOPE}\" --include-dependencies --no-deps && yarn cache clean;\nRUN find . -name node_modules | xargs rm -rf\n\nFROM base AS runner\nWORKDIR /app\nENV NODE_ENV production\nCOPY ./packages/db/prisma ./prisma\nCOPY --from=installer /app/node_modules ./node_modules\nCOPY --from=builder /app/apps/${SCOPE}/next.config.js ./\nCOPY --from=builder /app/apps/${SCOPE}/public ./public\nCOPY --from=builder /app/apps/${SCOPE}/package.json ./package.json\nCOPY --from=builder /app/apps/${SCOPE}/.next/standalone ./\nCOPY --from=builder /app/apps/${SCOPE}/.next/static ./.next/static\nCOPY --from=builder /app/apps/${SCOPE}/.env.docker ./.env.production\nRUN apt-get -qy update \\\n    && apt-get -qy --no-install-recommends install \\\n    openssl \\\n    && apt-get autoremove -yq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY env.sh ${SCOPE}-entrypoint.sh ./\nRUN chmod +x ./\"${SCOPE}\"-entrypoint.sh \\\n    && chmod +x ./env.sh\nENTRYPOINT ./\"${SCOPE}\"-entrypoint.sh\n\nEXPOSE 3000\nENV PORT 3000\n"
}