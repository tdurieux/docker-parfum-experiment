{
  "startTime": 1674250686127,
  "endTime": 1674250687139,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:eoan as base\n\nENV LANG C.UTF-8\n\nRUN apt-get update && \\\n    apt-get install --yes --no-install-recommends \\\n        build-essential \\\n        python3 python3-dev python3-pip python3-setuptools python3-venv \\\n        swig portaudio19-dev libatlas-base-dev \\\n        fakeroot && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir pyinstaller\n\nFROM base as base-amd64\n\nFROM base as base-armv7\n\nFROM base as base-arm64\n\nARG TARGETARCH\nARG TARGETVARIANT\nFROM base-$TARGETARCH$TARGETVARIANT\n\nENV APP_DIR=/usr/lib/voice2json\nENV BUILD_DIR=/build\n\nCOPY VERSION ${BUILD_DIR}/\n\nRUN export DEBIAN_ARCH=\"$(dpkg-architecture | grep DEB_BUILD_ARCH= | sed -e 's/[^=]\\+=//')\" && \\\n    export VERSION=\"$(cat ${BUILD_DIR}/VERSION)\" && \\\n    export PACKAGE_NAME=voice2json_${VERSION}_${DEBIAN_ARCH} && \\\n    export DEBIAN_DIR=${BUILD_DIR}/${PACKAGE_NAME}\n\nRUN mkdir -p ${DEBIAN_DIR}/DEBIAN\nCOPY debian/control.in /\n\nRUN sed -e \"s/@DEBIAN_ARCH@/${DEBIAN_ARCH}/\" < /control.in > ${DEBIAN_DIR}/DEBIAN/control\n\n# Directory of prebuilt tools\nCOPY download/ ${BUILD_DIR}/download/\n\n# Cache pip downloads\nCOPY requirements.txt ${BUILD_DIR}/\nRUN pip3 download --dest /pipcache pip wheel setuptools\nRUN pip3 download --dest /pipcache -r ${BUILD_DIR}/requirements.txt\n\nCOPY m4/ ${BUILD_DIR}/m4/\nCOPY configure config.sub config.guess \\\n     install-sh missing aclocal.m4 \\\n     Makefile.in setup.py.in voice2json.sh.in ${BUILD_DIR}/\n\nRUN cd ${BUILD_DIR} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${APP_DIR}\n\nCOPY scripts/install/ ${BUILD_DIR}/scripts/install/\n\nCOPY etc/profile.defaults.yml ${BUILD_DIR}/etc/\nCOPY etc/precise/ ${BUILD_DIR}/etc/precise/\nCOPY site/ ${BUILD_DIR}/site/\n\nCOPY README.md LICENSE ${BUILD_DIR}/\nCOPY voice2json/ ${BUILD_DIR}/voice2json/\n\nRUN export VIRTUALENV_FLAGS='--copies' && \\\n    export PIP_INSTALL_ARGS='-f /pipcache --no-index' && \\\n    cd ${BUILD_DIR} && \\\n    make && \\\n    make install && \\\n    mkdir -p ${DEBIAN_DIR}${APP_DIR} && \\\n    mv ${APP_DIR}/* ${DEBIAN_DIR}${APP_DIR}/\n\nRUN mkdir -p ${DEBIAN_DIR}/usr/bin/ && \\\n    cp ${DEBIAN_DIR}${APP_DIR}/bin/voice2json ${DEBIAN_DIR}/usr/bin/\n\n# Copy libpython to virtual env\nRUN cp -a /usr/local/lib/libpython3.7*.so* ${DEBIAN_DIR}${APP_DIR}/lib/\n\n# Strip binaries and shared libraries\nRUN (find ${APP_VENV} -type f \\( -name '*.so*' -or -executable \\) -print0 | xargs -0 strip --strip-unneeded -- 2>/dev/null) || true\n\nRUN cd ${BUILD_DIR} && \\\n    fakeroot dpkg --build ${PACKAGE_NAME}"
}