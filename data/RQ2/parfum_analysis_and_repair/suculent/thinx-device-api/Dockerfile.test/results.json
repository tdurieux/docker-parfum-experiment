{
  "startTime": 1674254346346,
  "endTime": 1674254347449,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 20
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM thinxcloud/base:alpine\n\nLABEL maintainer=\"Matej Sychra <suculent@me.com>\"\nLABEL name=\"THiNX API\" version=\"1.7.1915\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# For test-env node-18\nENV NODE_TLS_REJECT_UNAUTHORIZED=0\nENV NODE_EXTRA_CA_CERTS=/mnt/data/ssl/testRoot.crt\n\nARG THINX_HOSTNAME\nENV THINX_HOSTNAME=${THINX_HOSTNAME}\n\nARG THINX_OWNER_EMAIL\nENV THINX_OWNER_EMAIL=${THINX_OWNER_EMAIL}\n\nARG COUCHDB_USER\nENV COUCHDB_USER=${COUCHDB_USER}\nARG COUCHDB_PASS\nENV COUCHDB_PASS=${COUCHDB_PASS}\nARG REDIS_PASSWORD\nENV REDIS_PASSWORD=${REDIS_PASSWORD}\n\nARG CODACY_PROJECT_TOKEN\nENV CODACY_PROJECT_TOKEN=${CODACY_PROJECT_TOKEN}\nARG SONAR_TOKEN\nENV SONAR_TOKEN=${SONAR_TOKEN}\nARG ROLLBAR_ACCESS_TOKEN\nENV ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}\nARG ROLLBAR_ENVIRONMENT\nARG ROLLBAR_ENVIRONMENT=${ROLLBAR_ENVIRONMENT}\nARG AQUA_SEC_TOKEN\nENV AQUA_SEC_TOKEN=${AQUA_SEC_TOKEN}\nARG SNYK_TOKEN\nENV SNYK_TOKEN=${SNYK_TOKEN}\nARG SQREEN_TOKEN\nENV SQREEN_TOKEN=${SQREEN_TOKEN}\n\nARG GITHUB_ACCESS_TOKEN\nENV GITHUB_ACCESS_TOKEN={GITHUB_ACCESS_TOKEN}\n\nARG ENVIRONMENT\nENV ENVIRONMENT=${ENVIRONMENT}\n\nARG NODE_ENV=production\nENV NODE_ENV=${NODE_ENV}\n\nARG SQREEN_APP_NAME\nENV SQREEN_APP_NAME=${SQREEN_APP_NAME}\n\nARG REVISION\nENV REVISION=${REVISION}\n\nARG GOOGLE_OAUTH_ID\nENV GOOGLE_OAUTH_ID=${GOOGLE_OAUTH_ID}\nARG GOOGLE_OAUTH_SECRET\nENV GOOGLE_OAUTH_SECRET=${GOOGLE_OAUTH_SECRET}\n\nARG GITHUB_CLIENT_ID\nENV GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}\nARG GITHUB_CLIENT_SECRET\nENV GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}\n\nARG SLACK_BOT_TOKEN\nENV SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}\n\nARG GITHUB_SECRET\nENV GITHUB_SECRET=${GITHUB_SECRET}\n\nARG ENTERPRISE\nENV ENTERPRISE=${ENTERPRISE}\n\nARG WORKER_SECRET\nENV WORKER_SECRET=${WORKER_SECRET}\n\nARG CIRCLE_NODE_TOTAL\nENV CIRCLE_NODE_TOTAL=${CIRCLE_NODE_TOTAL}\n\nARG CIRCLE_NODE_INDEX\nENV CIRCLE_NODE_INDEX=${CIRCLE_NODE_INDEX}\n\n# Create app directory\nWORKDIR /opt/thinx/thinx-device-api\n\n# Install test dependencies\nRUN apk add --no-cache openjdk8-jre p7zip\n\n# Install app dependencies\nCOPY package.json ./\n\nRUN npm install -g npm@8.6.0 \\\n    && npm install . && npm cache clean --force;\n\nVOLUME /var/lib/docker\n\n# THiNX Web & Device API (HTTP)\nEXPOSE 7442\n\n# THiNX Device API (HTTPS)\nEXPOSE 7443\n\n#Â GitLab Webbook\nEXPOSE 9002\n\n# Copy app source code\nCOPY . .\n\nRUN mkdir -p ./.nyc_output\n\n# only for test mocking (may not work, will need structure with mock data in repo)\nCOPY ./spec/mnt /mnt\n\n# download test reporter as a static binary\nRUN curl -f -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\nRUN chmod +x ./cc-test-reporter\n\n# Test modules\nRUN npm install -g nyc mocha jasmine mocha-lcov-reporter coveralls && npm cache clean --force;\n\n# TODO: Implement Snyk Container Scanning here in addition to DockerHub manual scans...\n\nCOPY ./docker-entrypoint.sh /docker-entrypoint.sh\n\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\n"
}