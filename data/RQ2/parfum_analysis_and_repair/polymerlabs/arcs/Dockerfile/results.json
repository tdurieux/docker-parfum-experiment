{
  "startTime": 1674251515314,
  "endTime": 1674251516532,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 5,
        "columnEnd": 51
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 28,
        "columnEnd": 39
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 18,
        "columnStart": 44,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 25,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 18,
        "columnStart": 44,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 25,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "# This is a fork of the tools/Dockerfile.CI with changes necessary for Google Cloud Build.\n\nFROM ubuntu:xenial\n\n# Install programs for runtime use (e.g. by Bazel, Node-GYP)\nRUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y \\\n      apt-transport-https \\\n      bash \\\n      ca-certificates \\\n      curl \\\n      g++ \\\n      git \\\n      lbzip2 \\\n      make \\\n      nodejs \\\n      openjdk-8-jdk \\\n      python \\\n      unzip \\\n      xz-utils && rm -rf /var/lib/apt/lists/*;\n\n# Install Chrome for Selenium\n#  Reference: https://tecadmin.net/setup-selenium-chromedriver-on-ubuntu/\nRUN curl -f -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add\nRUN echo \"deb [arch=amd64]  http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list\nRUN apt-get -y update && apt-get -y --no-install-recommends install google-chrome-stable && rm -rf /var/lib/apt/lists/*;\n\n# Set up workspace\nENV WORKSPACE /usr/src/app\nRUN mkdir -p $WORKSPACE\nWORKDIR $WORKSPACE\n\n# Install ktlint\nRUN ( cd /usr/bin/ && \\\n    curl -f -L -s -O https://github.com/pinterest/ktlint/releases/download/0.35.0/ktlint && \\\n    cd - && \\\n    chmod +x /usr/bin/ktlint)\n\n# Install Nodejs & npm\n# Also, allows running script with privileged permission\n# i.e. scripts {...} at package.json. See unsafe-perm below.\nRUN ( curl -f -sL https://deb.nodesource.com/setup_10.x | bash - && \\\n     apt-get install --no-install-recommends -y nodejs && \\\n     npm set unsafe-perm true) && rm -rf /var/lib/apt/lists/*;\n\n# Install Android SDK\nENV ANDROID_HOME \"/sdk\"\nCOPY tools/android-sdk-packages.txt tools/android-sdk-packages.txt\nCOPY tools/install-android-sdk tools/install-android-sdk\nCOPY tools/logging.sh tools/logging.sh\n# Android sdkmanager does not have a quiet option and outputs highly\n# verbose progress to stdout, so we forcibly silence it at risk of\n# missing insight into failure modes.\nRUN tools/install-android-sdk ${ANDROID_HOME} > /dev/null\n\n# Install npm packages\nCOPY concrete-storage/package.json concrete-storage/package.json\nRUN ( cd concrete-storage && npm install) && npm cache clean --force;\nCOPY package.json package.json\nCOPY tools tools\nCOPY config config\nCOPY devtools devtools\nRUN npm install && npm cache clean --force;\n\n# Fetch external Bazel artifacts.\n# Copy over the WORKSPACE file, everything it imports, and bazelisk.\nCOPY tools/bazelisk* tools/\nCOPY build_defs/emscripten build_defs/emscripten\nCOPY build_defs/kotlin_native build_defs/kotlin_native\nCOPY .bazelignore \\\n     .bazelversion \\\n     .editorconfig \\\n     WORKSPACE \\\n     BUILD.bazel \\\n     maven_install.json \\\n     ./\nRUN ./tools/bazelisk fetch @maven//...\n\nRUN ./tools/bazelisk fetch @kotlin_native_compiler//...\n\nRUN ./tools/bazelisk fetch @emsdk//...\n# Copy the contents of the working dir. After this the image should be ready for\n# use.\nCOPY . .\n"
}