{
  "startTime": 1674251632774,
  "endTime": 1674251634006,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ---\n# Cribl AppScopeâ„¢ - Build under Docker\n#\n# by Paul Dugas <paul@dugas.cc>\n#\n\n# ---\n# Use the Ubuntu 18.04 image by default. Override this like below.\n#\n#     docker build --build-arg IMAGE=ubuntu:latest ...\n#\nARG IMAGE=ubuntu:18.04\nFROM $IMAGE\n\n# ---\n# Use the current version of Go in the longsleep/golang-backports PPA by\n# default. Override this like below.\n#\n#     docker build --build-arg GOLANG=golang-1.16 ...\n#\nARG GOLANG=golang\nENV GOLANG=$GOLANG\n\n# These are needed to bypass the prompts when tzdata is installed.\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TZ=\"America/New_York\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# ---\n# Install packages. Note extra PPA for Go.\n#\n# Also note that this logic duplicates the top-level `install_build_tools.sh`\n# script. Trying to use that script here causes issues because of its use of\n# `sudu` when running the package installer. It clears the environment so the\n# additions above don't apply and we end up with interaction when some of the\n# dependencies (i.e. tzdata) are installed.\n#\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common gpg apt-utils && \\\n    add-apt-repository ppa:longsleep/golang-backports && \\\n    apt-get update && \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 52B59B1571A79DBC054901C0F6BC817356A3D45E && \\\n    apt-get install --no-install-recommends -y \\\n        $GOLANG \\\n        autoconf \\\n        automake \\\n        cmake \\\n        curl \\\n        emacs \\\n        gdb \\\n        git \\\n        lcov \\\n        libtool \\\n        lsof \\\n        make \\\n        strace \\\n        sudo \\\n        tzdata \\\n        upx \\\n        vim \\\n        && \\\n    dpkg-reconfigure --frontend noninteractive tzdata && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN useradd -d /home/builder -m builder && \\\n    useradd -d /home/builder -m builder1 && \\\n    \\\n    echo \"builder ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/builder && \\\n    echo \"builder1 ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/builder && \\\n    \\\n    echo \"alias ll='ls -alF'\" >> /home/builder/.bashrc && \\\n    echo \"alias la='ls -A'\" >> /home/builder/.bashrc && \\\n    echo \"alias l='ls -CF'\" >> /home/builder/.bashrc && \\\n    echo \"alias h='history'\" >> /home/builder/.bashrc && \\\n    \\\n    echo \"#set environment LD_PRELOAD=/home/builder/appscope/lib/linux/libscope.so\" >> /home/builder/.gdbinit && \\\n    echo \"set follow-fork-mode child\" >> /home/builder/.gdbinit && \\\n    echo \"set breakpoint pending on\" >> /home/builder/.gdbinit && \\\n    echo \"set directories /home/builder/appscope\" >> /home/builder/.gdbinit && \\\n    \\\n    mkdir /home/builder/appscope\n\n# ---\n# The local git clone of the project is mounted as /home/builder/appscope. See Makefile.\n#\n#     docker run -v $(pwd):/home/builder/appscope ...\n#\nWORKDIR /home/builder/appscope\n\n# fini\n"
}