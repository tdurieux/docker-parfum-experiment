{
  "startTime": 1674248812121,
  "endTime": 1674248813087,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 2,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nRUN yum -y update && \\\n    yum -y install centos-release-scl && \\\n    yum -y install rh-python38 python-virtualenv && \\\n    yum -y install epel-release && \\\n    yum -y install java-1.8.0-openjdk && \\\n    yum -y install mc net-tools lsof vim emacs gdb && rm -rf /var/cache/yum\n\nRUN mkdir -p /opt/test-runner/logs/\n\nRUN source scl_source enable rh-python38 &&\\\n    virtualenv -p $(which python) /opt/test-runner/\n\n# Originally used 2.1.1 and 2.11, but they're too old now.\nENV KAFKA_VERSION=2.7.0 KAFKA_SCALA_VERSION=2.13\nENV KAFKA_RELEASE_ARCHIVE kafka_${KAFKA_SCALA_VERSION}-${KAFKA_VERSION}.tgz\n\nRUN mkdir /kafka /data /logs\n\n# Download Kafka binary distribution\n#COPY ./kafka/kafka_2.13-2.5.0.tgz /tmp/kafka_2.13-2.5.0.tgz\n\nADD https://archive.apache.org/dist/kafka/${KAFKA_VERSION}/${KAFKA_RELEASE_ARCHIVE} /tmp/\nADD https://archive.apache.org/dist/kafka/${KAFKA_VERSION}/${KAFKA_RELEASE_ARCHIVE}.md5 /tmp/\n\nWORKDIR /tmp\n\n# Check artifact digest integrity\nRUN echo VERIFY CHECKSUM: && \\\n  gpg --batch --print-md MD5 ${KAFKA_RELEASE_ARCHIVE} 2>/dev/null && \\\n  cat ${KAFKA_RELEASE_ARCHIVE}.md5\n\n# Install Kafka to /kafka\nRUN tar -zx -C /kafka --strip-components=1 -f ${KAFKA_RELEASE_ARCHIVE} && \\\n  rm -rf kafka_*\n\nADD ./kafka/config /kafka/config\n\n# Set up a user to run Kafka\nRUN groupadd kafka && \\\n  useradd -d /kafka -g kafka -s /bin/false kafka && \\\n  chown -R kafka:kafka /kafka /data /logs\n\n#ENV SCOPE_OUT_DEST=udp://localhost:8125\n#ENV SCOPE_OUT_VERBOSITY=4\n#ENV SCOPE_EVENT_DEST=tcp://172.16.198.132:9109\nENV SCOPE_CRIBL_ENABLE=false\nENV SCOPE_METRIC_DEST=udp://localhost:8125\nENV SCOPE_LOG_LEVEL=info\nENV SCOPE_LOG_DEST=file:///opt/test-runner/logs/scope.log\nENV SCOPE_METRIC_VERBOSITY=4\nENV SCOPE_EVENT_LOGFILE=true\nENV SCOPE_EVENT_CONSOLE=true\nENV SCOPE_EVENT_METRIC=true\nENV SCOPE_EVENT_HTTP=true\n\nCOPY ./test_runner/requirements.txt /opt/test-runner/requirements.txt\nRUN /opt/test-runner/bin/pip install -r /opt/test-runner/requirements.txt\nRUN /opt/test-runner/bin/pip install kafka-python\n\nCOPY ./test_runner/ /opt/test-runner/\n\n# Switching to Python 3.8 required this hack. Not sure where the kafka packages are coming from.\nRUN sed -i 's/\\basync\\b/is_async/g' /opt/test-runner/lib/python3.8/site-packages/kafka/producer/*.py\n\nENV PATH /kafka/bin:$PATH\nWORKDIR /kafka\n\n# broker, jmx\nVOLUME [ \"/data\", \"/logs\" ]\n\nENV PATH=\"/usr/local/scope:/usr/local/scope/bin:${PATH}\"\nCOPY scope-profile.sh /etc/profile.d/scope.sh\nCOPY gdbinit /root/.gdbinit\n\nRUN  mkdir /usr/local/scope && \\\n     mkdir /usr/local/scope/bin && \\\n     mkdir /usr/local/scope/lib && \\\n     ln -s /opt/appscope/bin/linux/$(uname -m)/scope /usr/local/scope/bin/scope && \\\n     ln -s /opt/appscope/bin/linux/$(uname -m)/ldscope /usr/local/scope/bin/ldscope && \\\n     ln -s /opt/appscope/lib/linux/$(uname -m)/libscope.so /usr/local/scope/lib/libscope.so\n\nCOPY kafka/scope-test /usr/local/scope/scope-test\n\nCOPY docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"test\"]\n"
}