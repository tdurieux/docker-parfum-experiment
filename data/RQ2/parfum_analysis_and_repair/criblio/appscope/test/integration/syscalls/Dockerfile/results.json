{
  "startTime": 1674248693995,
  "endTime": 1674248694866,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 6,
        "columnEnd": 17
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nRUN yum -y update && \\\n    yum -y install centos-release-scl && \\\n    yum -y groupinstall \"Development Tools\" && \\\n    yum -y install libtool flex-devel devtoolset-7 wget automake rh-python38 python-virtualenv && \\\n    yum -y install vim emacs gdb tcpdump lsof && \\\n    yum clean all && rm -rf /var/cache/yum\n\nRUN mkdir -p /opt/test-runner/logs/ /opt/test\nCOPY ./syscalls/ltp_p1.patch /opt/test/\n\nARG LTP_VERSION=20210524\nRUN cd /opt/test && \\\n      wget https://github.com/linux-test-project/ltp/archive/refs/tags/${LTP_VERSION}.zip && \\\n      unzip ${LTP_VERSION}.zip && \\\n      rm -f ${LTP_VERSION}.zip && \\\n      mv ltp-${LTP_VERSION} ltp && \\\n      cd /opt/test/ltp && \\\n      patch -p1 < /opt/test/ltp_p1.patch && \\\n      make autotools && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n      make -j\n\nRUN source scl_source enable rh-python38 && \\\n    virtualenv -p $(which python) /opt/test-runner/\n\nENV SCOPE_CRIBL_ENABLE=false\nENV SCOPE_LOG_LEVEL=info\nENV SCOPE_METRIC_DEST=tcp://localhost:8125\nENV SCOPE_METRIC_VERBOSITY=4\nENV SCOPE_EVENT_LOGFILE=true\nENV SCOPE_EVENT_CONSOLE=true\nENV SCOPE_EVENT_METRIC=true\nENV SCOPE_EVENT_HTTP=true\n\nCOPY ./syscalls/altp /opt/test/altp\nRUN cd /opt/test/altp && make -j\n\nCOPY ./test_runner/requirements.txt /opt/test-runner/requirements.txt\nRUN /opt/test-runner/bin/pip install -r /opt/test-runner/requirements.txt\n\nCOPY ./test_runner /opt/test-runner/\nCOPY ./syscalls/syscall_tests_conf.json /opt/test-runner/syscall_tests_conf.json\n\n# Switching to Python 3.8 required this hack. Not sure where the kafka packages are coming from.\nRUN sed -i 's/\\basync\\b/is_async/g' /opt/test-runner/lib/python3.8/site-packages/kafka/producer/*.py\n\nENV PATH=\"/usr/local/scope:/usr/local/scope/bin:${PATH}\"\nCOPY scope-profile.sh /etc/profile.d/scope.sh\nCOPY gdbinit /root/.gdbinit\nRUN  mkdir /usr/local/scope && \\\n     mkdir /usr/local/scope/bin && \\\n     mkdir /usr/local/scope/lib && \\\n     ln -s /opt/appscope/bin/linux/$(uname -m)/scope /usr/local/scope/bin/scope && \\\n     ln -s /opt/appscope/bin/linux/$(uname -m)/ldscope /usr/local/scope/bin/ldscope && \\\n     ln -s /opt/appscope/lib/linux/$(uname -m)/libscope.so /usr/local/scope/lib/libscope.so\n\nCOPY ./syscalls/scope-test /usr/local/scope/\n\nCOPY docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"test\"]\n"
}