{
  "startTime": 1674255726201,
  "endTime": 1674255727289,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 60,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 1,
        "columnEnd": 47
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 134,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 1,
        "columnEnd": 105
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 56,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build dependencies\nFROM ubuntu:20.04 AS base\n\nARG DEBIAN_FRONTEND=noninteractive\nENV TZ=Europe/Madrid\n\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n  \tcurl git apt-transport-https ca-certificates software-properties-common gnupg && \\\n\tcurl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --batch --dearmor > bazel.gpg && \\\n\tmv bazel.gpg /etc/apt/trusted.gpg.d/ && \\\n\techo \"deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8\" | tee /etc/apt/sources.list.d/bazel.list && \\\n\tapt-get update && \\\n\tapt-get install -yq --no-install-recommends \\\n\tbuild-essential bc make cmake libopencv-dev python3-opencv bazel libnetpbm10-dev xxd \\\n    libjpeg-turbo-progs imagemagick-6.q16 jq automake g++ libtool libleptonica-dev pkg-config nasm ninja-build \\\n    meson doxygen libx264-dev libx265-dev libnuma-dev && \\\n\tpkg-config --cflags --libs opencv4 && \\\n\trm -rf /var/lib/apt/lists/*\n\n# Install dependencies that can't be installed via apt-get\n# Build VMAF\nFROM base AS vmaf\nWORKDIR /tmp\nRUN curl -f --output \"/tmp/vmaf.tar.gz\" \\\n        --continue-at - \\\n        --location \"https://github.com/Netflix/vmaf/archive/refs/tags/v2.3.0.tar.gz\"\nRUN tar -xvf vmaf.tar.gz && rm vmaf.tar.gz\nWORKDIR /tmp/vmaf-2.3.0/libvmaf/\nRUN meson build --buildtype release && \\\n\tninja -vC build && \\\n\tninja -vC build install\n\nFROM base AS vqmt\n# Build VQMT\nWORKDIR /tmp\nRUN git clone https://github.com/Rolinh/VQMT\nWORKDIR /tmp/VQMT\nRUN make\n\nFROM base AS pesq\n# Build PESQ\nWORKDIR /tmp\nRUN git clone https://github.com/dennisguse/ITU-T_pesq\nWORKDIR /tmp/ITU-T_pesq\nRUN make\n\nFROM base AS visqol\n# Build VISQOL\nWORKDIR /tmp\nRUN curl -f --output \"/tmp/visqol.tar.gz\" \\\n        --continue-at - \\\n        --location \"https://github.com/google/visqol/archive/refs/tags/v3.1.0.tar.gz\"\nRUN tar -xvf visqol.tar.gz && rm visqol.tar.gz\nWORKDIR /tmp/visqol-3.1.0/\nRUN bazel build :visqol -c opt\n\nFROM base AS tesseract\n# Build tesseract\n## Building tesseract ST for better performance, check https://tesseract-ocr.github.io/tessdoc/Compiling-%E2%80%93-GitInstallation.html#release-builds-for-mass-production\nWORKDIR /tmp\nRUN curl -f --output \"/tmp/tesseract.tar.gz\" \\\n        --continue-at - \\\n        --location \"https://github.com/tesseract-ocr/tesseract/archive/refs/tags/4.1.3.tar.gz\"\nRUN tar -xvf tesseract.tar.gz && rm tesseract.tar.gz\nWORKDIR /tmp/tesseract-4.1.3/\nRUN ./autogen.sh && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-openmp --disable-shared 'CXXFLAGS=-g -O2 -fno-math-errno -Wall -Wextra -Wpedantic' && \\\n\tmake -j$(nproc) && \\\n\tmake install\n\n# Build and run browser-emulator\nFROM ubuntu:20.04\n\nWORKDIR /opt/openvidu-loadtest/browser-emulator\nARG DEBIAN_FRONTEND=noninteractive\nENV IS_DOCKER_CONTAINER=true\nENV VMAF_PATH=/usr/local/bin\nENV VQMT_PATH=/usr/local/bin\nENV PESQ_PATH=/usr/local/bin\nENV VISQOL_PATH=/usr/local/visqol\nENV LD_LIBRARY_PATH=/usr/local/lib\nENV PYTHONPATH=/opt/openvidu-loadtest/browser-emulator\n\n# Get libraries\nCOPY --from=base /usr/local/bin/ /usr/local/bin/\nCOPY --from=base /usr/local/share/ /usr/local/share/\nCOPY --from=base /usr/local/lib/ /usr/local/lib/\nCOPY --from=base /usr/local/include/ /usr/local/include/\nCOPY --from=base /usr/include/ /usr/include/\nCOPY --from=base /usr/bin/ /usr/bin/\nCOPY --from=base /usr/lib/ /usr/lib/\nCOPY --from=base /usr/lib64/ /usr/lib64/\n\nCOPY --from=vmaf /usr/local/bin/ /usr/local/bin/\nCOPY --from=vmaf /usr/local/share/ /usr/local/share/\nCOPY --from=vmaf /usr/local/lib/ /usr/local/lib/\nCOPY --from=vmaf /usr/local/include/ /usr/local/include/\nCOPY --from=vmaf /usr/include/ /usr/include/\nCOPY --from=vmaf /usr/bin/ /usr/bin/\nCOPY --from=vmaf /usr/lib/ /usr/lib/\nCOPY --from=vmaf /usr/lib64/ /usr/lib64/\n\nCOPY --from=tesseract /usr/local/bin/ /usr/local/bin/\nCOPY --from=tesseract /usr/local/share/ /usr/local/share/\nCOPY --from=tesseract /usr/local/lib/ /usr/local/lib/\nCOPY --from=tesseract /usr/local/include/ /usr/local/include/\nCOPY --from=tesseract /usr/include/ /usr/include/\nCOPY --from=tesseract /usr/bin/ /usr/bin/\nCOPY --from=tesseract /usr/lib/ /usr/lib/\nCOPY --from=tesseract /usr/lib64/ /usr/lib64/\n\n# Get VMAF\nCOPY --from=vmaf /tmp/vmaf-2.3.0/model/* /usr/local/share/vmaf/models/\n\n# Get VQMT\nCOPY --from=vqmt /tmp/VQMT/build/bin/Release/vqmt /usr/local/bin/vqmt\n\n# Get PESQ\nCOPY --from=pesq /tmp/ITU-T_pesq/bin/itu-t-pesq2005 /usr/local/bin/pesq\n\n# Get VISQOL\nCOPY --from=visqol /root/.cache/bazel/ /root/.cache/bazel/\nCOPY --from=visqol /tmp/visqol-3.1.0 /usr/local/visqol\n\n# Install dependencies\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n  \tcurl apt-transport-https ca-certificates software-properties-common python3-pip gnupg && \\\n\tcurl -f -sL https://deb.nodesource.com/setup_14.x | bash - && \\\n\tapt-get install -yq --no-install-recommends \\\n\tnodejs ffmpeg libopencv-dev python3-opencv jq pkg-config && \\\n\tpkg-config --cflags --libs opencv4 && \\\n\trm -rf /var/lib/apt/lists/*\n\n# Get tesseract\nRUN curl -f --output \"/usr/local/share/tessdata/eng.traineddata\" \\\n        --continue-at - \\\n        --location \"https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata\"\n\nCOPY [\"browser-emulator/package.json\", \"browser-emulator/package-lock.json*\", \"./\"]\nRUN npm install && npm cache clean --force;\n\nCOPY [\"browser-emulator/qoe_scripts/requirements.txt\", \"./qoe_scripts/\"]\n\n## Install python dependencies\nRUN pip3 install --no-cache-dir -r /opt/openvidu-loadtest/browser-emulator/qoe_scripts/requirements.txt\n\nCOPY browser-emulator/ .\nRUN npm run build\n\n# Entrypoint\nCOPY ./entrypoint.sh /usr/local/bin\nRUN chmod +x /usr/local/bin/entrypoint.sh\n\nEXPOSE 5000\nEXPOSE 5001\n\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\nCMD [\"sh\"]"
}