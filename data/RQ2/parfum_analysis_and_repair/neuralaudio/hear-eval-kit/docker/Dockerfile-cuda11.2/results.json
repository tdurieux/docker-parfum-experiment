{
  "startTime": 1674215440684,
  "endTime": 1674215441920,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 84,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 86,
        "columnEnd": 107
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 86,
        "columnEnd": 107
      }
    }
  ],
  "repairedDockerfile": "# latest (git 'main') versions of all HEAR packages.\n\n# ==================================================================\n# module list\n# ------------------------------------------------------------------\n# python        3.7    (apt)\n# pytorch       latest (docker)\n# tensorflow    latest (pip)\n# keras         latest (pip)\n# ==================================================================\n\nFROM nvidia/cuda:11.2.0-cudnn8-devel-ubuntu18.04\n\nENV LANG C.UTF-8\n\nRUN echo ''\nRUN rm -rf /var/lib/apt/lists/* \\\n           /etc/apt/sources.list.d/cuda.list \\\n           /etc/apt/sources.list.d/nvidia-ml.list && \\\n    apt-get update\n    #   apt-get update && \\\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n\n# ==================================================================\n# tools\n# ------------------------------------------------------------------\n\n    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n        build-essential \\\n        apt-utils \\\n        ca-certificates \\\n        wget \\\n        git \\\n        vim \\\n        libssl-dev \\\n        curl \\\n        bc \\\n        less \\\n        locate \\\n        unzip \\\n        unrar\n\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && apt-get install -y -q\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --batch --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null && \\\n    echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null && \\\n    apt-get update && \\\n    rm /usr/share/keyrings/kitware-archive-keyring.gpg && \\\n    $APT_INSTALL kitware-archive-keyring && \\\n    $APT_INSTALL cmake\n\n# ==================================================================\n# python\n# ------------------------------------------------------------------\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n        software-properties-common \\\n        && \\\n    add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n        python3.7 \\\n        python3.7-dev \\\n        python3-distutils-extra \\\n        && \\\n    wget -O ~/get-pip.py \\\n        https://bootstrap.pypa.io/get-pip.py && \\\n    python3.7 ~/get-pip.py && \\\n    ln -s /usr/bin/python3.7 /usr/local/bin/python3 && \\\n    ln -s /usr/bin/python3.7 /usr/local/bin/python\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL \\\n        setuptools \\\n        pipdeptree \\\n        && \\\n    $PIP_INSTALL \\\n        numpy==1.19.2 \\\n        scipy \\\n        pandas \\\n        cloudpickle \\\n        scikit-image>=0.14.2 \\\n        scikit-learn \\\n        matplotlib \\\n        Cython \\\n        tqdm\n\n# ==================================================================\n# pytorch\n# ------------------------------------------------------------------\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL \\\n        future \\\n        numpy==1.19.2 \\\n        protobuf \\\n        enum34 \\\n        pyyaml \\\n        typing \\\n        && \\\n    $PIP_INSTALL \\\n        --pre torch torchvision -f \\\n        https://download.pytorch.org/whl/nightly/cu113/torch_nightly.html\n#        https://download.pytorch.org/whl/nightly/cu112/torch_nightly.html\n\n# ==================================================================\n# tensorflow\n# ------------------------------------------------------------------\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL \\\n        tensorflow-gpu\n\n# Hack to get tf 2.4.2 to play nice with CUDA 11.2\n# https://medium.com/mlearning-ai/tensorflow-2-4-with-cuda-11-2-gpu-training-fix-87f205215419\nRUN ln -s /usr/local/cuda-11.2/targets/x86_64-linux/lib/libcusolver.so.11 /usr/local/cuda-11.2/targets/x86_64-linux/lib/libcusolver.so.10\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/cuda-11.2/targets/x86_64-linux/lib\"\n\n# ==================================================================\n# keras\n# ------------------------------------------------------------------\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL \\\n        h5py \\\n        keras\n\n#        && \\\n\n# ==================================================================\n# heareval\n# ------------------------------------------------------------------\n\n## workaround readline fallback\n#RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && apt-get install -y -q\n\nRUN apt update\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL software-properties-common\nRUN apt update\nRUN apt upgrade -y\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL sox\n\n# h5\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL pkg-config libhdf5-100 libhdf5-dev\n\n# LLVM >= 9.0\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL --reinstall python3-apt && \\\n    $APT_INSTALL gpg-agent\nRUN wget --no-check-certificate -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\n# Might need to change python version: nano /usr/bin/add-apt-repository\n#RUN add-apt-repository 'deb http://apt.llvm.org/bionic/   llvm-toolchain-bionic-10  main'\nRUN add-apt-repository 'deb http://apt.llvm.org/bionic/   llvm-toolchain-bionic-11  main'\nRUN apt update\n#RUN $APT_INSTALL llvm-10 lldb-10 llvm-10-dev libllvm10 llvm-10-runtime\n#RUN update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-10 10\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL llvm-11 lldb-11 llvm-11-dev libllvm11 llvm-11-runtime\nRUN update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-11 11\nRUN update-alternatives --config llvm-config\n\n\n# For ffmpeg >= 4.2\n# Could also build from source:\n# https://github.com/jrottenberg/ffmpeg/blob/master/docker-images/4.3/ubuntu1804/Dockerfile\nRUN add-apt-repository ppa:jonathonf/ffmpeg-4\nRUN apt-get update\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL ffmpeg\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL cython ipython\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL \\\n        numpy==1.19.2 \\\n        pynvml\n\n\n# gsutil\n# https://cloud.google.com/storage/docs/gsutil_install#deb\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL apt-transport-https ca-certificates gnupg\nRUN wget -O - https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nRUN apt-get update\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL google-cloud-sdk\n#gcloud init\n\n# Install heareval pypi dependencies first, and after get the github versions,\n# because this makes it faster\n# to rebuild the docker if code changes but not dependencies\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL hearbaseline hearvalidator\n\n# Touch this to force a rebuild of everything below\nRUN echo 20211122\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $GIT_CLONE https://github.com/hearbenchmark/hear-baseline.git\nRUN cd hear-baseline && \\\n    python -m pip --no-cache-dir install -e \".[dev]\"\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $GIT_CLONE https://github.com/hearbenchmark/hear-eval-kit.git\nRUN cd hear-eval-kit && \\\n    python -m pip --no-cache-dir install -e \".[dev]\"\n\n# THIS COMPLETE WACKNESS IS BECAUSE FUCKING dcase-util DEPENDS UPON librosa,\n# which is a gnarly PITA to install and get play nice with other packages.\n# I have no idea why we have numba==0.54.0\n# and have to do numba==0.48 since that's in the setup.py for us\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL \\\n        numba==0.48\n\n# ==================================================================\n# TODO Move this earlier\n# ------------------------------------------------------------------\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $APT_INSTALL screen tmux\n\n## pyenv\n#RUN curl https://pyenv.run | bash\n## https://stackoverflow.com/a/66181816/82733\n##RUN git clone --depth=1 https://github.com/pyenv/pyenv.git .pyenv\n#ENV HOME=\"/root\"\n#ENV PYENV_ROOT=\"${HOME}/.pyenv\"\n#ENV PATH=\"${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}\"\n#RUN echo 'eval \"$(pyenv virtualenv-init -)\"' >> /root/.bashrc ; chmod +x /root/.bashrc\n##RUN $PYENV_ROOT/bin/pyenv install 3.7.12\n##RUN $PYENV_ROOT/bin/pyenv install 3.8.12\n##RUN $PYENV_ROOT/bin/pyenv global system 3.7.12 3.8.12\n\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" && \\\n    PIP_INSTALL=\"python -m pip --no-cache-dir install\" && \\\n    GIT_CLONE=\"git clone --depth 10\" && \\\n    $PIP_INSTALL gdown\n\n\n# ==================================================================\n# config & cleanup\n# ------------------------------------------------------------------\n\nRUN \\\n    ldconfig && \\\n    apt-get clean && \\\n    apt-get autoremove && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* ~/*\n\nRUN updatedb\n\nEXPOSE 6006\n"
}