{
  "startTime": 1674255624557,
  "endTime": 1674255625719,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 19,
        "columnStart": 25,
        "columnEnd": 114
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 32,
        "columnEnd": 363
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 19,
        "columnStart": 25,
        "columnEnd": 114
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 32,
        "columnEnd": 363
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:bionic\n\n# Update timezone data\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive TZ=Europe/Amsterdam apt-get --no-install-recommends install -y tzdata && rm -rf /var/lib/apt/lists/*;\n\n# Add ROS package repo\nRUN apt-get install --no-install-recommends -y gnupg2 lsb-release \\\n    && sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n    && apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && rm -rf /var/lib/apt/lists/*;\n\n# Install all required packages\nRUN [ \"$(getent group users | cut -d: -f3)\" = \"100\" ] \\\n    && apt-get update && apt-get -y --no-install-recommends install vim tmux htop mpv cppcheck valgrind doxygen usbutils sudo git ffmpeg wget \\\n         ttf-ubuntu-font-family qt5-default morse-simulator \\\n         libzbar-dev libpcl-dev libjpeg-turbo8-dev libturbojpeg0-dev libturbojpeg libglfw3-dev \\\n         libusb-1.0-0-dev libopenni2-dev opencl-headers openni2-utils \\\n         libjson-perl libperlio-gzip-perl \\\n         swig libusb-dev libreadline-dev libzzip-0-13 libavcodec-extra libssh-gcrypt-dev libzip-dev pbzip2 libpci-dev \\\n         ros-melodic-desktop-full ros-melodic-tf2-tools ros-melodic-webots-ros python-rospkg python-rospkg-modules && rm -rf /var/lib/apt/lists/*;\n\nARG INSTALL_WEBOTS=true\nARG WEBOTS_TAG=R2020a-rev1\nRUN if [ \"$INSTALL_WEBOTS\" = true ]; then \\\n    cd /opt \\\n    && git clone --single-branch --branch \"$WEBOTS_TAG\" --recurse-submodules https://github.com/cyberbotics/webots.git \\\n    && cd /opt/webots \\\n    && rm -rf ./.git \\\n    && env HOME=/opt bash -c \"source src/install_scripts/bashrc.linux && make release -j$(nproc)\" \\\n    ; else true; fi\nENV WEBOTS_HOME=/opt/webots\n\nARG INSTALL_FREENECT2=false\nARG FREENECT2_TAG=master\nRUN if [ \"$INSTALL_FREENECT2\" = true ]; then \\\n    cd /opt \\\n    && git clone --single-branch --branch \"$FREENECT2_TAG\" https://github.com/OpenKinect/libfreenect2.git \\\n    && cd libfreenect2 \\\n    && rm -rf ./.git \\\n    && mkdir build && cd build \\\n    && cmake .. -DBUILD_OPENNI2_DRIVER=ON -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=/opt/freenect2 \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cp /opt/libfreenect2/platform/linux/udev/90-kinect2.rules /etc/udev/rules.d/ \\\n    && ldconfig /opt/freenect2 \\\n    && ln -s /opt/libfreenect2/build/bin/Protonect /usr/local/bin/kinect_test \\\n    ; else true; fi\n\nARG INSTALL_LIBFRANKA=false\nRUN if [ \"$INSTALL_LIBFRANKA\" = true ]; then \\\n    cd /opt \\\n    && git clone --recursive https://github.com/frankaemika/libfranka \\\n    && cd libfranka \\\n    && rm -rf ./.git \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF .. \\\n    && cmake --build . \\\n    ; else true; fi\n\nARG INSTALL_LCOV=false\nRUN if [ \"$INSTALL_LCOV\" = true ]; then \\\n    cd /tmp \\\n    && git clone https://github.com/linux-test-project/lcov.git \\\n    && cd lcov \\\n    && make install \\\n    ; else true; fi\n\n# Install additional ROS SLAM packages\nRUN sudo apt-get update && sudo apt-get install --no-install-recommends -y python-rosdep ros-melodic-hector-slam ros-melodic-gmapping ros-melodic-cartographer ros-melodic-slam-toolbox ros-melodic-slam-karto ros-melodic-amcl ros-melodic-mrpt-rbpf-slam ros-melodic-mrpt-ekf-slam-2d ros-melodic-mrpt-icp-slam-2d ros-melodic-rplidar-ros ros-melodic-cartographer-ros ros-melodic-laser-filters && rm -rf /var/lib/apt/lists/*;\n\n# Remove temporary files\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Add normal user\nRUN useradd -m -u 1000 -g users -G dialout,sudo,tape -s /bin/bash casper; echo casper:casper | chpasswd\nRUN echo \"source /opt/bashrc.sh\" >> /etc/bash.bashrc\n\n# Install rust\nRUN su casper -c \"mkdir -p /home/casper/.cargo/registry\"\nVOLUME /home/casper/.cargo/registry\nRUN su casper -c \"export HOME=/home/casper; curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\"\n\n# Initialize rosdep\nRUN rosdep init\nRUN su casper -c \"export HOME=/home/casper; rosdep update\"\n\n# Copy configuration files\nCOPY startup.sh /opt/startup.sh\nCOPY bashrc.sh /opt/bashrc.sh\nCOPY tmux.conf /etc/tmux.conf\nRUN su casper -c \"mkdir -p /home/casper/.config/Cyberbotics\"\nCOPY --chown=casper:users Webots-R2020a.conf /home/casper/.config/Cyberbotics/Webots-R2020a.conf\nRUN chmod 644 /home/casper/.config/Cyberbotics/Webots-R2020a.conf\n\nENTRYPOINT [ \"/usr/bin/env\", \"bash\", \"/opt/startup.sh\" ]\n\nUSER casper\nWORKDIR /pwd\n"
}