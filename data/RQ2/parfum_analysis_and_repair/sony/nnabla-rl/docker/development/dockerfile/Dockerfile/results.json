{
  "startTime": 1674250329222,
  "endTime": 1674250330441,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cudagl:10.2-devel-ubuntu18.04\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update -y && \\\n    apt-get install -y --no-install-recommends \\\n    git \\\n    libopencv-dev \\\n    cmake \\\n    freeglut3-dev \\\n    wget \\\n    sudo \\\n    build-essential \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    libreadline-dev \\\n    libsqlite3-dev \\\n    llvm \\\n    libncurses5-dev \\\n    libncursesw5-dev \\\n    xz-utils \\\n    tk-dev \\\n    libffi-dev \\\n    liblzma-dev \\\n    python-openssl && rm -rf /var/lib/apt/lists/*;\n\n# Install cudnn\n# Set default to 8.0.2.39\nARG CUDNN_VERSION=8.0.2.39\nRUN apt-get install -y --no-install-recommends \\\n    libcudnn8=$CUDNN_VERSION-1+cuda10.2 \\\n    libcudnn8-dev=$CUDNN_VERSION-1+cuda10.2 && \\\n    apt-mark hold libcudnn8 && rm -rf /var/lib/apt/lists/*;\n\n# Add sudo user\nARG USER\nARG USER_ID\nRUN groupadd -g 1000 developer && \\\n    useradd  -g      developer -G sudo -m -u $USER_ID -s /bin/bash ${USER} && \\\n    echo \"${USER}:${USER}\" | chpasswd\n\nRUN echo \"Defaults visiblepw\"             >> /etc/sudoers\nRUN echo \"${USER} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n\nENV HOME /home/$USER\n\n# Install pyenv\n# Set default to python 3.6.0\nARG PYTHON_VERSION_MAJOR=3\nARG PYTHON_VERSION_MINOR=6\nARG PYTHON_VERSION_MICRO=0\nENV PYVERNAME=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.${PYTHON_VERSION_MICRO}\n\nRUN git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv\n\nENV PYENV_ROOT=\"$HOME/.pyenv\"\nENV PATH=\"$PYENV_ROOT/bin:$PATH\"\nRUN echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> $HOME/.bashrc\n\nRUN pyenv install ${PYVERNAME}\nRUN pyenv global ${PYVERNAME}\nRUN pyenv rehash\nRUN chmod -R a+w $HOME/.pyenv/shims\n\n# Install requirements\nRUN $HOME/.pyenv/shims/pip install --upgrade pip\nADD requirements.txt $HOME/tmp/deps/\nRUN $HOME/.pyenv/shims/pip install -U -r $HOME/tmp/deps/requirements.txt && rm -rf /tmp/*\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES \\\n    ${NVIDIA_VISIBLE_DEVICES:-all}\nENV NVIDIA_DRIVER_CAPABILITIES \\\n    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics\nENV NVIDIA_DRIVER_CAPABILITIES \\\n    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}display,compute\n\n# Remove apt caches\nRUN rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*\n\n# Switch user\nUSER $USER\n\nWORKDIR /home/$USER/nnabla-rl-dev\n\nCMD [ \"bash\" ]\n"
}