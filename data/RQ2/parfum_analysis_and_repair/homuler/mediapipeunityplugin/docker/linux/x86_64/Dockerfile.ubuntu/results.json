{
  "startTime": 1674220590404,
  "endTime": 1674220591428,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedDockerfile": "# ATTENTION:\n#     It's usually preferable to use `Dockerfile`.\n#     However, if your host (or target) machine's glibc version < 2.33, `libmediapipe_c.so` built on Arch Linux won't work on them.\n#     In suce a case, use this `Dockerfile.ubuntu` instead of `Dockerfile`.\nARG UID=1000\nARG ANDROID_SDK_BUILD_TOOLS_VERSION=30.0.3\nARG ANDROID_SDK_VERSION=30\nARG ANDROID_NDK_VERSION=21.4.7075529\n\nFROM ubuntu:18.04 AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        apt-transport-https \\\n        build-essential \\\n        ca-certificates \\\n        clang \\\n        curl \\\n        dirmngr \\\n        gcc-8 \\\n        g++-8 \\\n        git \\\n        gnupg \\\n        libegl1-mesa-dev \\\n        libgles2-mesa-dev \\\n        mesa-common-dev \\\n        nasm \\\n        npm \\\n        openjdk-11-jdk \\\n        pkg-config \\\n        software-properties-common \\\n        sudo \\\n        unzip \\\n        zip && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8 && rm -rf /var/lib/apt/lists/*;\n\n\nFROM base AS android\n\nWORKDIR /tmp\n\nARG ANDROID_SDK_BUILD_TOOLS_VERSION\nARG ANDROID_SDK_VERSION\nARG ANDROID_NDK_VERSION\n\nENV COMMANDLINETOOLS_ZIP commandlinetools.zip\nENV COMMANDLINETOOLS_SHA256 124f2d5115eee365df6cf3228ffbca6fc3911d16f8025bebd5b1c6e2fcfa7faf\n\n\nRUN curl -f -L https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip -o ${COMMANDLINETOOLS_ZIP} && \\\n    (test \"$(sha256sum ${COMMANDLINETOOLS_ZIP})\" = \"${COMMANDLINETOOLS_SHA256}  ${COMMANDLINETOOLS_ZIP}\" || { echo 'Checksum Failed'; exit 1; }) && \\\n    unzip ${COMMANDLINETOOLS_ZIP} -d /opt/android\n\nRUN  yes | /opt/android/cmdline-tools/bin/sdkmanager --sdk_root=/opt/android --licenses\nRUN /opt/android/cmdline-tools/bin/sdkmanager --sdk_root=/opt/android --install \\\n        \"platforms;android-${ANDROID_SDK_VERSION}\" \\\n        \"build-tools;${ANDROID_SDK_BUILD_TOOLS_VERSION}\" \\\n        \"ndk;${ANDROID_NDK_VERSION}\" && \\\n    rm ${COMMANDLINETOOLS_ZIP}\n\n\nFROM base AS builder\n\nARG UID\nWORKDIR /tmp\n\n# install Android SDK and NDK\nCOPY --from=android /opt/android /opt/android\n\n# Setup Python\nRUN add-apt-repository -y ppa:deadsnakes/ppa && \\\n    apt-get install -y --no-install-recommends python3.9-dev python3.9-distutils && \\\n    curl -f -L https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \\\n    python3.9 get-pip.py && \\\n    ln -s /usr/bin/python3.9 /usr/local/bin/python && rm -rf /var/lib/apt/lists/*;\n\n# Install NuGet\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \\\n    apt-add-repository -y 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main'\n\n####\n# NOTE\n#   At the moment (2021.12), the next step is very unstable in some country (https://github.com/mono/mono/issues/21273).\n#\n#   If you encounter 504 Timeout errors, insert RUN commands as follows and install those *.deb files forcefully (note `; exit 0` at the end).\n#\n#   # if failing to download libmono-system-reactive-providers2.2-cil_6.12.0.122-0xamarin1+ubuntu1804b1_all.deb...\n#   RUN curl -X GET https://download.mono-project.com/repo/ubuntu/pool/main/m/mono/libmono-system-reactive-providers2.2-cil_6.12.0.122-0xamarin1+ubuntu1804b1_all.deb -o libmono-system-reactive-providers2.2-cil_6.12.0.122-0xamarin1+ubuntu1804b1_all.deb && \\\n#       dpkg -i libmono-system-reactive-providers2.2-cil_6.12.0.122-0xamarin1+ubuntu1804b1_all.deb ; exit 0\n#\n#   # Repeat if failing to download other files\n#   # RUN curl -X GET ... -o ... ; exit 0\n#\n#   RUN apt --fix-broken install -y\n\nRUN apt-get install -y --no-install-recommends mono-complete && \\\n    curl -f -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe && \\\n    bash -c 'echo -e \"#!/bin/bash\\nmono /usr/local/bin/nuget.exe \\$@\" | tee -a /usr/local/bin/nuget' && \\\n    chmod +x /usr/local/bin/nuget && rm -rf /var/lib/apt/lists/*;\n\n# install Bazelisk\nRUN apt-get install -y --no-install-recommends npm && \\\n    npm install -g @bazel/bazelisk && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Create user\nRUN bash -c 'echo -e \"%wheel ALL=(ALL) NOPASSWD: ALL\\n\" > /etc/sudoers.d/01_wheel'\nRUN addgroup wheel && useradd -u ${UID} -m mediapipe && usermod -aG wheel mediapipe\n\nUSER mediapipe\nWORKDIR /home/mediapipe\n\nENV NPM_PREFIX /home/mediapipe/.npm-packages\nENV PATH ${NPM_PREFIX}/bin:/home/mediapipe/.local/bin:${PATH}\n\n# install numpy\nRUN pip install --no-cache-dir --user numpy\n\n\nFROM builder\n\nARG ANDROID_NDK_VERSION\n\nENV ANDROID_HOME /opt/android\nENV ANDROID_NDK_HOME /opt/android/ndk/${ANDROID_NDK_VERSION}\nENV PYTHON_BIN_PATH /usr/bin/python3.9\n\nCOPY packages.config .\nCOPY .bazelrc .\nCOPY .bazelversion .\nCOPY build.py .\nCOPY WORKSPACE .\nCOPY mediapipe_api mediapipe_api\nCOPY third_party third_party\n\nCMD [\"/bin/bash\"]\n"
}