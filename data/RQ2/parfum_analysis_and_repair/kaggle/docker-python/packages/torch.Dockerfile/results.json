{
  "startTime": 1674251533384,
  "endTime": 1674251534510,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE\n\nFROM ${BASE_IMAGE} AS builder\n\nARG PACKAGE_VERSION\nARG TORCHAUDIO_VERSION\nARG TORCHTEXT_VERSION\nARG TORCHVISION_VERSION\nARG CUDA_MAJOR_VERSION\nARG CUDA_MINOR_VERSION\n\n# TORCHVISION_VERSION is mandatory\nRUN test -n \"$TORCHVISION_VERSION\"\n\n# Build instructions: https://github.com/pytorch/pytorch#from-source\nRUN conda install astunparse numpy ninja pyyaml mkl mkl-include setuptools==59.5.0 cmake cffi typing_extensions future six requests dataclasses\nRUN conda install -c pytorch magma-cuda${CUDA_MAJOR_VERSION}${CUDA_MINOR_VERSION}\n\n# By default, it uses the version from version.txt which includes the `a0` (alpha zero) suffix and part of the git hash.\n# This causes dependency conflicts like these: https://paste.googleplex.com/4786486378496000\nENV PYTORCH_BUILD_VERSION=$PACKAGE_VERSION\nENV PYTORCH_BUILD_NUMBER=1\n\nENV TORCH_CUDA_ARCH_LIST=\"3.7;6.0;7.0+PTX;7.5+PTX\"\nENV FORCE_CUDA=1\nRUN cd /usr/local/src && \\\n    git clone --recursive https://github.com/pytorch/pytorch && \\\n    cd pytorch && \\\n    git checkout tags/v$PACKAGE_VERSION && \\\n    git submodule sync && \\\n    git submodule update --init --recursive --jobs 0 && \\\n    python setup.py bdist_wheel\n\n# Install torch which is required before we can build other torch* packages.\nRUN pip install --no-cache-dir /usr/local/src/pytorch/dist/*.whl\n\n# Build torchaudio\n# Instructions: https://github.com/pytorch/audio#from-source\n# See comment above for PYTORCH_BUILD_VERSION.\nENV BUILD_VERSION=$TORCHAUDIO_VERSION\nRUN cd /usr/local/src && \\\n    git clone https://github.com/pytorch/audio && \\\n    cd audio && \\\n    git checkout tags/v$TORCHAUDIO_VERSION && \\\n    git submodule sync && \\\n    git submodule update --init --recursive --jobs 0 && \\\n    # TODO(b/215031404#comment4) Remove after upgrade next release (0.11.1)\n    sed -i s?https://zlib.net/zlib-1.2.11.tar.gz?https://sourceforge.net/projects/libpng/files/zlib/1.2.11/zlib-1.2.11.tar.gz? third_party/zlib/CMakeLists.txt && \\\n    python setup.py bdist_wheel\n\n# Build torchtext\n# Instructions: https://github.com/pytorch/text#building-from-source\n# See comment above for PYTORCH_BUILD_VERSION.\nENV BUILD_VERSION=$TORCHTEXT_VERSION\nRUN cd /usr/local/src && \\\n    git clone https://github.com/pytorch/text && \\\n    cd text && \\\n    git checkout tags/v$TORCHTEXT_VERSION && \\\n    git submodule sync && \\\n    git submodule update --init --recursive --jobs 0 && \\\n    python setup.py bdist_wheel\n\n# Build torchvision.\n# Instructions: https://github.com/pytorch/vision/tree/main#installation\n# See comment above for PYTORCH_BUILD_VERSION.\nENV BUILD_VERSION=$TORCHVISION_VERSION\nRUN cd /usr/local/src && \\\n    git clone --recursive https://github.com/pytorch/vision && \\\n    cd vision && \\\n    git checkout tags/v$TORCHVISION_VERSION && \\\n    python setup.py bdist_wheel\n\n# Using multi-stage builds to ensure the output image is very small\n# See: https://docs.docker.com/develop/develop-images/multistage-build/\nFROM alpine:latest\n\nRUN mkdir -p /tmp/whl/\nCOPY --from=builder /usr/local/src/pytorch/dist/*.whl /tmp/whl\nCOPY --from=builder /usr/local/src/audio/dist/*.whl /tmp/whl\nCOPY --from=builder /usr/local/src/text/dist/*.whl /tmp/whl\nCOPY --from=builder /usr/local/src/vision/dist/*.whl /tmp/whl\n\n# Print out the built .whl file.\nRUN ls -lh /tmp/whl/"
}