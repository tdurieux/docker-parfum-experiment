{
  "startTime": 1674253365539,
  "endTime": 1674253368856,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 149
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE_TAG\nARG TENSORFLOW_VERSION\n\nFROM gcr.io/kaggle-images/python-tpu-tensorflow-whl:python-${BASE_IMAGE_TAG}-${TENSORFLOW_VERSION} AS tensorflow_whl\nFROM gcr.io/kaggle-images/python:${BASE_IMAGE_TAG}\n\n# We need to define the ARG here to get the ARG below the FROM statement to access it within this build context\n# See: https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG TORCH_VERSION\n\nENV ISTPUVM=1\n\nCOPY --from=tensorflow_whl /tmp/tensorflow_pkg/tensorflow*.whl /tmp/tensorflow_pkg/\nRUN pip install --no-cache-dir /tmp/tensorflow_pkg/tensorflow*.whl && \\\n    rm -rf /tmp/tensorflow_pkg && \\\n    /tmp/clean-layer.sh\n\n# LIBTPU installed here:\nENV DEFAULT_LIBTPU=/opt/conda/lib/python3.7/site-packages/libtpu/libtpu.so\nENV PYTORCH_LIBTPU=/opt/conda/lib/python3.7/site-packages/libtpu/torch-libtpu.so\nENV JAX_LIBTPU=/opt/conda/lib/python3.7/site-packages/libtpu/jax-libtpu.so\n\n# https://cloud.google.com/tpu/docs/pytorch-xla-ug-tpu-vm#changing_pytorch_version\nRUN pip uninstall -y torch && \\\n    pip install --no-cache-dir torch==${TORCH_VERSION} && \\\n    # The URL doesn't include patch version. i.e. must use 1.11 instead of 1.11.0\n    pip install --no-cache-dir torch_xla[tpuvm] -f https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-${TORCH_VERSION%.*}-cp37-cp37m-linux_x86_64.whl && \\\n    cp $DEFAULT_LIBTPU $PYTORCH_LIBTPU && \\\n    /tmp/clean-layer.sh\n\n# https://cloud.google.com/tpu/docs/jax-quickstart-tpu-vm#install_jax_on_your_cloud_tpu_vm\nRUN pip install --no-cache-dir \"jax[tpu]>=0.2.16\" -f https://storage.googleapis.com/jax-releases/libtpu_releases.html && \\\n    cp $DEFAULT_LIBTPU $JAX_LIBTPU && \\\n    /tmp/clean-layer.sh\n\n# Monkey-patch TF, JAX & PYTORCH to load the correct libtpu.so when they are imported:\nRUN sed -i \"s|^\\(\\(.*\\)libtpu.configure_library_path.*\\)|\\1\\n\\2os.environ['TPU_LIBRARY_PATH'] = '${PYTORCH_LIBTPU}'|\" /opt/conda/lib/python3.7/site-packages/torch_xla/__init__.py && \\\n    sed -i \"s|^\\(\\(.*\\)libtpu.configure_library_path.*\\)|\\1\\n\\2os.environ['TPU_LIBRARY_PATH'] = '${JAX_LIBTPU}'|\" /opt/conda/lib/python3.7/site-packages/jax/_src/cloud_tpu_init.py && \\\n    sed -i \"1s/^/from jax._src.cloud_tpu_init import cloud_tpu_init\\ncloud_tpu_init()\\n/\" /opt/conda/lib/python3.7/site-packages/tensorflow/__init__.py\n\n# Set these env vars so that they don't produce errs calling the metadata server to load them:\nENV TPU_ACCELERATOR_TYPE=v3-8\nENV TPU_PROCESS_ADDRESSES=local"
}