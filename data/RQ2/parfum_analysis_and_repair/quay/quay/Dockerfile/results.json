{
  "startTime": 1674250344675,
  "endTime": 1674250345578,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 39,
        "columnStart": 3,
        "columnEnd": 2
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 75,
        "columnStart": 3,
        "columnEnd": 2
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.access.redhat.com/ubi8/ubi:latest AS base\n# Only set variables or install packages that need to end up in the\n# final container here.\nENV PATH=/app/bin/:$PATH \\\n\tPYTHONUNBUFFERED=1 \\\n\tPYTHONIOENCODING=UTF-8 \\\n\tLC_ALL=C.UTF-8 \\\n\tLANG=C.UTF-8\nENV QUAYDIR /quay-registry\nENV QUAYCONF /quay-registry/conf\nENV QUAYRUN /quay-registry/conf\nENV QUAYPATH $QUAYDIR\nENV PYTHONUSERBASE /app\nENV PYTHONPATH $QUAYPATH\nRUN set -ex\\\n\t; dnf -y module enable nginx:1.20 \\\n\t; dnf -y module enable python39:3.9 \\\n\t; dnf -y -q --setopt=tsflags=nodocs --setopt=skip_missing_names_on_install=False install\\\n\t\tdnsmasq \\\n\t\tmemcached \\\n\t\tnginx \\\n\t\tlibpq-devel \\\n\t\topenldap \\\n\t\topenssl \\\n\t\tpython39 \\\n\t\tpython3-gpg \\\n\t\tskopeo \\\n\t; dnf -y -q clean all\n\n# Config-editor builds the javascript for the configtool.\nFROM registry.access.redhat.com/ubi8/nodejs-10 AS config-editor\nWORKDIR /opt/app-root/src\n# This argument must be repeated, and should have the same default as\n# the other CONFIGTOOL_VERSION argument.\nARG CONFIGTOOL_VERSION=v0.1.12\nRUN curl -fsSL \"https://github.com/quay/config-tool/archive/${CONFIGTOOL_VERSION}.tar.gz\"\\\n\t| tar xz --strip-components=4 --exclude='*.go'\nRUN set -ex\\\n\t; npm install --quiet --no-progress --ignore-engines\\\n\t; npm cache clean --force; npm run --quiet build\\\n\t;\n\n# Build-python installs the requirements for the python code.\nFROM base AS build-python\nENV PYTHONDONTWRITEBYTECODE 1\nRUN set -ex\\\n\t; dnf -y -q --setopt=tsflags=nodocs --setopt=skip_missing_names_on_install=False install\\\n\t\tgcc-c++\\\n\t\tgit\\\n\t\topenldap-devel\\\n\t\tpython39-devel\\\n\t\tlibffi-devel\\\n\t; dnf -y -q clean all\nWORKDIR /build\nCOPY requirements.txt .\n# Note that it installs into PYTHONUSERBASE because of the '--user'\n# flag.\nRUN set -ex\\\n\t; python3 -m pip install --no-cache-dir --progress-bar off --user $(grep -e '^pip=' -e '^wheel=' ./requirements.txt) \\\n\t; python3 -m pip install --no-cache-dir --progress-bar off --user --requirement requirements.txt \\\n\t;\nRUN set -ex\\\n# Doing this is explicitly against the purpose and use of certifi.\n\t; for dir in\\\n\t\t$(find \"$(python3 -m site --user-base)\" -type d -name certifi)\\\n\t; do chgrp -R 0 \"$dir\" && chmod -R g=u \"$dir\" ; done\\\n\t;\n\n# Build-static downloads the static javascript.\nFROM registry.access.redhat.com/ubi8/nodejs-10 AS build-static\nWORKDIR /opt/app-root/src\nCOPY --chown=1001:0 static/  ./static/\nCOPY --chown=1001:0 *.json *.js  ./\nRUN set -ex\\\n\t; npm install --quiet --no-progress --ignore-engines\\\n\t; npm cache clean --force; npm run --quiet build\\\n\t;\n\n# Pushgateway grabs pushgateway.\nFROM registry.access.redhat.com/ubi8/ubi:latest AS pushgateway\nENV OS=linux ARCH=amd64\nARG PUSHGATEWAY_VERSION=1.0.0\nRUN set -ex\\\n\t; curl -fsSL \"https://github.com/prometheus/pushgateway/releases/download/v${PUSHGATEWAY_VERSION}/pushgateway-${PUSHGATEWAY_VERSION}.${OS}-${ARCH}.tar.gz\"\\\n\t| tar xz \"pushgateway-${PUSHGATEWAY_VERSION}.${OS}-${ARCH}/pushgateway\"\\\n\t; install \"pushgateway-${PUSHGATEWAY_VERSION}.${OS}-${ARCH}/pushgateway\" /usr/local/bin/pushgateway\\\n\t;\n\n# Config-tool builds the go binary in the configtool.\nFROM registry.access.redhat.com/ubi8/go-toolset:1.16.12 as config-tool\nWORKDIR /opt/app-root/src\nARG CONFIGTOOL_VERSION=v0.1.12\nRUN curl -fsSL \"https://github.com/quay/config-tool/archive/${CONFIGTOOL_VERSION}.tar.gz\"\\\n\t| tar xz --strip-components=1 --exclude '*/pkg/lib/editor/static/build'\nCOPY --from=config-editor /opt/app-root/src/static/build  /opt/app-root/src/pkg/lib/editor/static/build\nRUN go install ./cmd/config-tool\n\n# Final is the end container, where all the work from the other\n# containers are copied in.\nFROM base AS final\nLABEL maintainer \"thomasmckay@redhat.com\"\n\n# All of these chgrp+chmod commands are an Openshift-ism.\n#\n# Openshift runs a container as a random UID and GID 0, so anything\n# that's in the base image and needs to be modified at runtime needs\n# to make sure it's group-writable.\nRUN alternatives --set python /usr/bin/python3\nRUN set -ex\\\n\t; setperms() { for d in \"$@\"; do chgrp -R 0 \"$d\" && chmod -R g=u \"$d\" && ls -ld \"$d\"; done; }\\\n\t; newdir() { for d in \"$@\"; do mkdir -m g+w \"$d\" || { mkdir -p \"$d\" && chgrp 0 \"$d\" && chmod g=u \"$d\"; }; ls -ld \"$d\"; done; }\\\n# Allow TLS certs to be created and installed as non-root user.\n# See also update-ca-trust(8).\n\t; setperms /etc/pki/ca-trust/extracted /etc/pki/ca-trust/source/anchors\\\n# Allow for nginx to run unprivledged.\n\t; setperms /etc/nginx\\\n\t; ln -sf /dev/stdout /var/log/nginx/access.log\\\n\t; ln -sf /dev/stdout /var/log/nginx/error.log\\\n# The code doesn't agree on where the configuration lives, so create a\n# symlink.\n\t; ln -s $QUAYCONF /conf\\\n# Make a grip of runtime directories.\n\t; newdir /certificates /quay-registry/conf/stack /datastorage\\\n# Another Openshift-ism: it doesn't bother picking a uid that means\n# anything to the OS inside the container, so the process needs\n# permissions to modify the user database.\n\t; setperms /etc/passwd\\\n\t;\n\nWORKDIR $QUAYDIR\nRUN mkdir ${QUAYDIR}/config_app\n# Ordered from least changing to most changing.\nCOPY --from=pushgateway /usr/local/bin/pushgateway /usr/local/bin/pushgateway\nCOPY --from=build-python /app /app\nCOPY --from=config-tool /opt/app-root/src/go/bin/config-tool /bin\nCOPY --from=config-editor /opt/app-root/src ${QUAYDIR}/config_app\nCOPY --from=build-static /opt/app-root/src/static ${QUAYDIR}/static\n# Copy in source and update local copy of AWS IP Ranges.\n# This is a bad place to do the curl, but there's no good place to do\n# it except to have it checked in.\nCOPY --chown=0:0 . ${QUAYDIR}\nRUN set -ex\\\n\t; chmod -R g=u \"${QUAYDIR}\"\\\n\t; curl -fsSL https://ip-ranges.amazonaws.com/ip-ranges.json -o util/ipresolver/aws-ip-ranges.json\\\n\t;\n\nRUN rm -Rf node_modules config_app/node_modules\n\nEXPOSE 8080 8443 7443 9091 55443\n# Don't expose /var/log as a volume, because we just configured it\n# correctly above.\n# It's probably unwise to mount /tmp as a volume but if someone must,\n# make sure it's mode 1777 like /tmp should be.\nVOLUME [\"/datastorage\", \"/tmp\", \"/conf/stack\"]\n# In non-Openshift environments, drop privilege.\nUSER 1001\nENTRYPOINT [\"dumb-init\", \"--\", \"/quay-registry/quay-entrypoint.sh\"]\nCMD [\"registry\"]\n"
}