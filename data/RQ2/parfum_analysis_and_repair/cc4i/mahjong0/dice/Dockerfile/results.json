{
  "startTime": 1674217951353,
  "endTime": 1674217952328,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 7,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 7,
        "columnEnd": 88
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 18,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 18,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dice\n#\n# Step 1 prepare dice\nFROM golang:alpine as dicebuilder\n\nENV GO111MODULE=on\nARG VERSION\nARG GIT_COMMIT\nARG BUILT\n\n# Install git\nRUN apk update && apk add --no-cache git\nCOPY . $GOPATH/src/mypackage/myapp/\nWORKDIR $GOPATH/src/mypackage/myapp/\n\n# Get dependancies\nRUN go get -d -v\n\n# Building the binary\nRUN CGO_ENABLED=0 GOOS=linux go build \\\n        -ldflags=\"-X 'dice/utils.ServerVersion=$VERSION' -X 'dice/utils.GitCommit=$GIT_COMMIT' -X 'dice/utils.Built=$BUILT'\" \\\n        -a -installsuffix cgo \\\n        -o /go/bin/dice\n\n# Step 2 prepare probe\nFROM golang:alpine as probebuilder\n\nENV GO111MODULE=on\n\n# Install git\nRUN apk update && apk add --no-cache git\nCOPY ./probe/. $GOPATH/src/mypackage/myapp/\nWORKDIR $GOPATH/src/mypackage/myapp/\n\n# Get dependancies\nRUN go get -d -v\n\n# Building the binary\nRUN CGO_ENABLED=0 GOOS=linux go build \\\n        -a -installsuffix cgo \\\n        -o /go/bin/probe\n\n\n# STEP 3 build release package\nFROM alpine:3.11\n\nARG BUILT\n\nLABEL org.label-schema.name=\"dice-all-in-one\" \\\n      org.label-schema.git=\"https://github.com/cc4i/mahjong0.git\" \\\n      org.label-schema.build-date=$BUILT\n\n# For installed packages\nENV KUBE_LATEST_VERSION=\"v1.16.9\"\nENV AWS_IAM_AUTHENTICATOR=\"0.5.0\"\nENV HELM_VERSION=\"v3.2.1\"\nENV GLIBC_VER=\"2.31-r0\"\n\n# For Dice\nENV M_WORK_HOME=\"/workspace\"\nENV M_MODE=\"prod\"\nENV M_S3_BUCKET_REGION=\"ap-southeast-1\"\nENV M_S3_BUCKET=\"cc-mahjong-0\"\nENV M_LOCAL_TILE_REPO=\"/workspace/tiles-repo\"\n\n# Install: bash/git/openssh/curl/nodejs/npm/kubectl/kustomize/kubeseal/awscli/jq\nRUN apk add --no-cache ca-certificates \\\n        bash \\\n        git \\\n        openssh \\\n        curl \\\n        jq \\\n        nodejs \\\n        nodejs-npm \\\n    && wget -q https://storage.googleapis.com/kubernetes-release/release/${KUBE_LATEST_VERSION}/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl \\\n    && chmod +x /usr/local/bin/kubectl \\\n    && wget -q https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v${AWS_IAM_AUTHENTICATOR}/aws-iam-authenticator_${AWS_IAM_AUTHENTICATOR}_linux_amd64 -O  /usr/local/bin/aws-iam-authenticator \\\n    && chmod +x /usr/local/bin/aws-iam-authenticator \\\n    && wget -q https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm \\\n    && chmod +x /usr/local/bin/helm \\\n    && wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.6.1/kustomize_v3.6.1_linux_amd64.tar.gz -O - | tar -xzO kustomize > /usr/local/bin/kustomize \\\n    && chmod +x /usr/local/bin/kustomize \\\n    && wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.12.4/kubeseal-linux-amd64 -O /usr/local/bin/kubeseal \\\n    && chmod +x /usr/local/bin/kubeseal \\\n    && curl -f -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub \\\n    && curl -f -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-${GLIBC_VER}.apk \\\n    && curl -f -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk \\\n    && apk add --no-cache \\\n        glibc-${GLIBC_VER}.apk \\\n        glibc-bin-${GLIBC_VER}.apk \\\n    && curl -f -sL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip \\\n    && unzip awscliv2.zip \\\n    && aws/install \\\n    && rm -rf \\\n        awscliv2.zip \\\n        aws \\\n        /usr/local/aws-cli/v2/*/dist/aws_completer \\\n        /usr/local/aws-cli/v2/*/dist/awscli/data/ac.index \\\n        /usr/local/aws-cli/v2/*/dist/awscli/examples \\\n    && npm i -g aws-cdk \\\n    && rm glibc-${GLIBC_VER}.apk \\\n    && rm glibc-bin-${GLIBC_VER}.apk \\\n    && rm -rf /var/cache/apk/* \\\n    && rm -rf /root/.config \\\n    && rm -rf /root/.npm \\\n    && echo export M_WORK_HOME=${M_WORK_HOME} >>/root/env \\\n    && echo export M_MODE=${M_MODE} >>/root/env \\\n    && echo export M_S3_BUCKET_REGION=${M_S3_BUCKET_REGION} >>/root/env \\\n    && echo export M_S3_BUCKET=${M_S3_BUCKET} >>/root/env \\\n    && echo export M_LOCAL_TILE_REPO=${M_LOCAL_TILE_REPO} >>/root/env \\\n    && git config --global user.email \"robot@mahjong.io\" \\\n    && git config --global user.name \"robot\" && npm cache clean --force;\n\n# Copy dice from Step 1\nCOPY --from=dicebuilder /go/bin/dice /usr/local/bin/dice\n# Copy probe from Step 2\nCOPY --from=probebuilder /go/bin/probe /usr/local/bin/probe\n# Copy static files\nCOPY ./toy /workspace/toy\nCOPY ./schema /workspace/schema\n\nWORKDIR /workspace\n\nEXPOSE 9090\nENTRYPOINT [\"/usr/local/bin/dice\"]\nCMD [\"-c\"]\n\n# Caommands example:\n#    docker run -it -v ~/mywork/mylabs/csdc/mahjong-0/tiles-repo:/workspace/tiles-repo \\\n#        -v ~/.aws:/root/.aws \\\n#        -e M_MODE=dev \\\n#        herochinese/dice\n#\n#    docker run -it -v ~/mywork/mylabs/csdc/mahjong-0/tiles-repo:/workspace/tiles-repo \\\n#        -v ~/.aws:/root/.aws \\\n#        -e M_MODE=prod\n#        -e M_S3_BUCKET_REGION=ap-southeast-1\n#        -e M_S3_BUCKET=cc-mahjong-0\n#        herochinese/dice"
}