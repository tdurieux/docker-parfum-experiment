{
  "startTime": 1674215618835,
  "endTime": 1674215620287,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 110
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG FROM_TAG=4.13-2-alpine\n\nFROM jenkins/inbound-agent:${FROM_TAG}\n\nARG GOSU_VERSION=1.11\nARG DOCKER_CHANNEL=stable\nARG DOCKER_VERSION=20.10.8\nARG TINY_VERSION=0.18.0\n\nUSER root\n\nRUN \\\n    set -ex; \\\n    # alpine only glibc\n    if [ -f /etc/alpine-release ] ; then \\\n        echo \"Alpine\" ; \\\n    elif [ -f /etc/debian_version ] ; then \\\n        echo \"Debian, setting locales\" \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends locales \\\n        && localedef  -i en_US -f UTF-8 en_US.UTF-8 \\\n        && rm -rf /var/lib/apt/lists/* \\\n        ; \\\n    fi\n\nENV LANG=en_US.UTF-8\n\nRUN \\\n    echo \"Installing required packages\" \\\n    ; \\\n    set -ex; \\\n    if [ -f /etc/alpine-release ] ; then \\\n        apk add --no-cache curl shadow iptables \\\n        ; \\\n    elif [ -f /etc/debian_version ] ; then \\\n        apt-get update \\\n        && apt-get install -y --no-install-recommends curl iptables \\\n        && rm -rf /var/lib/apt/lists/* \\\n        ; \\\n    fi\n\n\nRUN \\\n    set -ex; \\\n    echo \"Installing tiny and gosu\" \\\n    ; \\\n    curl -f -SsLo /usr/bin/gosu https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64 \\\n    && chmod +x /usr/bin/gosu \\\n    && curl -f -SsLo /usr/bin/tiny https://github.com/krallin/tini/releases/download/v${TINY_VERSION}/tini-static-amd64 \\\n    && chmod +x /usr/bin/tiny\n\n\nRUN \\\n    set -ex; \\\n    echo \"Installing docker\" \\\n    ; \\\n    curl -f -Ssl \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" | \\\n    tar -xz  --strip-components 1 --directory /usr/bin/\n\nRUN \\\n    set -ex; \\\n    echo \"Installing docker-compose\" \\\n    ; \\\n    export CRYPTOGRAPHY_DONT_BUILD_RUST=1; \\\n    if [ -f /etc/alpine-release ] ; then \\\n        apk add --no-cache python3 py3-pip \\\n        \\\n        && apk add --no-cache --virtual .build-deps \\\n            python3-dev libffi-dev openssl-dev gcc libc-dev make \\\n        && pip3 install --upgrade --no-cache-dir pip wheel \\\n        && pip3 install --upgrade --no-cache-dir docker-compose \\\n        && apk del .build-deps \\\n        ; \\\n    elif [ -f /etc/debian_version ] ; then \\\n        buildDeps=\"python3-dev libffi-dev gcc make\" \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends python3 python3-pip python3-setuptools \\\n        \\\n        && apt-get install -y --no-install-recommends $buildDeps \\\n        && pip3 install --upgrade --no-cache-dir pip wheel \\\n        && pip3 install --upgrade --no-cache-dir docker-compose \\\n        && apt-get purge -y --auto-remove \\\n                  -o APT::AutoRemove::RecommendsImportant=false \\\n                  $buildDeps \\\n        && rm -rf /var/lib/apt/lists/* \\\n        ; \\\n    fi\n\nCOPY entrypoint.sh /entrypoint.sh\n\n## https://github.com/docker-library/docker/blob/fe2ca76a21fdc02cbb4974246696ee1b4a7839dd/18.06/modprobe.sh\nCOPY modprobe.sh /usr/local/bin/modprobe\n## https://github.com/jpetazzo/dind/blob/72af271b1af90f6e2a4c299baa53057f76df2fe0/wrapdocker\nCOPY wrapdocker.sh /usr/local/bin/wrapdocker\n\nVOLUME /var/lib/docker\n\nENTRYPOINT [ \"tiny\", \"--\", \"/entrypoint.sh\" ]\n"
}