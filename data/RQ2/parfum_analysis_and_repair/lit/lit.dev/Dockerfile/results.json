{
  "startTime": 1674246084829,
  "endTime": 1674246085857,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Official lightweight Node.js image\n# https://hub.docker.com/_/node\nFROM node:18-slim\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  # Dependencies of Playwright Chromium for Playground SSR\n  libgtk-3-0 \\\n  libnss3 \\\n  libasound2 \\\n  libdrm2 \\\n  libgbm1 \\\n  # Git needed for cloning Lit monorepo for API docs generation\n  git \\\n  # Certificates needed for Git HTTPS\n  ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n# Arbitrary but conventional working directory\nWORKDIR /usr/src/app\n\n# Note we isolate work across sub-packages below, organized from least to most\n# likely to change, to maximize Docker filesystem layer cache hits. For\n# example, organized this way a site content only change will usually only need\n# to execute the final Eleventy build step.\n\n# External dependencies\nCOPY package*.json tsconfig.base.json ./\nCOPY packages/lit-dev-tools-cjs/package*.json ./packages/lit-dev-tools-cjs/\nCOPY packages/lit-dev-tools-esm/package*.json ./packages/lit-dev-tools-esm/\nCOPY packages/lit-dev-server/package*.json ./packages/lit-dev-server/\nCOPY packages/lit-dev-api/package*.json ./packages/lit-dev-api/\nCOPY packages/lit-dev-content/package*.json ./packages/lit-dev-content/\nRUN npm ci\n\n# Tooling code\nCOPY packages/lit-dev-tools-cjs/ ./packages/lit-dev-tools-cjs/\nCOPY packages/lit-dev-tools-esm/ ./packages/lit-dev-tools-esm/\nCOPY packages/lit-dev-server/ ./packages/lit-dev-server/\nRUN npm run build:ts -w packages/lit-dev-tools-cjs -w packages/lit-dev-tools-esm -w packages/lit-dev-server\n\n# Pre-generated API docs data\nCOPY packages/lit-dev-api/ ./packages/lit-dev-api/\n\n# Site content\nCOPY packages/lit-dev-content/ ./packages/lit-dev-content/\n\n# Environment variables used by Eleventy build\nARG LITDEV_ENV\nARG REVISION_TAG\nARG SHORT_SHA\n\n# Kaniko doesn't include ARG values in the layer cache key (see\n# https://github.com/GoogleContainerTools/kaniko/pull/1085). This is different\n# to normal Docker behavior, which would invalidate anything after the ARG\n# declaration if the value changes. So, we need to write it to the file system\n# to force a cache invalidation. Otherwise, we might re-use the most recent\n# Eleventy build output, even when our build environment variables have changed.\nRUN echo \"LITDEV_ENV=$LITDEV_ENV\" >> env \\\n  && echo \"REVISION_TAG=$REVISION_TAG\" >> env \\\n  && echo \"SHORT_SHA=$SHORT_SHA\" >> env\n\n# Eleventy build\nRUN npm run prod:build -w packages/lit-dev-content\n\n# Run the web service on container startup.\n#\n# IMPORTANT: Keep --max-old-space-size in sync with the --memory flag in\n# ./cloudbuild-main.yaml. The flag here should be set a little lower than\n# --memory (e.g. 75%) to give headroom for other uses [0].\n#\n# (Node isn't aware of Docker memory limits, so if we don't set this flag we're\n# at higher risk for termination and restart. This value determines when V8\n# decides to perform garbage collection. Node uses sysinfo totalram as the\n# default limit [1], which will be higher than our Docker memory limit.)\n#\n# [0] https://nodejs.org/api/cli.html#cli_max_old_space_size_size_in_megabytes\n# [1] https://github.com/nodejs/node/pull/25576\nCMD [ \"node\", \"--max-old-space-size=768\", \"packages/lit-dev-server/lib/server.js\" ]\n"
}