{
  "startTime": 1674221216497,
  "endTime": 1674221217860,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To check running container: docker exec -it indexd /bin/bash\n\nFROM quay.io/cdis/python:python3.9-buster-2.0.0\n\nENV appname=indexd\n\nRUN pip install --no-cache-dir --upgrade pip poetry\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential libffi-dev musl-dev gcc libxml2-dev libxslt-dev \\\n    curl bash git vim && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p /var/www/$appname \\\n    && mkdir -p /var/www/.cache/Python-Eggs/ \\\n    && mkdir /run/nginx/ \\\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log \\\n    && chown nginx -R /var/www/.cache/Python-Eggs/ \\\n    && chown nginx /var/www/$appname\n\nEXPOSE 80\n\nWORKDIR /$appname\n\n# copy ONLY poetry artifact, install the dependencies but not indexd\n# this will make sure than the dependencies is cached\nCOPY poetry.lock pyproject.toml /$appname/\nRUN poetry config virtualenvs.create false \\\n    && poetry install -vv --no-root --no-dev --no-interaction \\\n    && poetry show -v\n\n# copy source code ONLY after installing dependencies\nCOPY . /$appname\nCOPY ./deployment/uwsgi/uwsgi.ini /etc/uwsgi/uwsgi.ini\nCOPY ./deployment/uwsgi/wsgi.py /$appname/wsgi.py\nCOPY clear_prometheus_multiproc /$appname/clear_prometheus_multiproc\n\n# install indexd\nRUN poetry config virtualenvs.create false \\\n    && poetry install -vv --no-dev --no-interaction \\\n    && poetry show -v\n\nRUN COMMIT=`git rev-parse HEAD` && echo \"COMMIT=\\\"${COMMIT}\\\"\" >$appname/index/version_data.py \\\n    && VERSION=`git describe --always --tags` && echo \"VERSION=\\\"${VERSION}\\\"\" >>$appname/index/version_data.py\n\nWORKDIR /var/www/$appname\n\nCMD /dockerrun.sh\n"
}