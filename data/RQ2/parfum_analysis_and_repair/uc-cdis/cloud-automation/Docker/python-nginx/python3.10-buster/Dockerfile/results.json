{
  "startTime": 1674252008513,
  "endTime": 1674252010017,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 22,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://github.com/tiangolo/uwsgi-nginx-docker/blob/master/docker-images/python3.6.dockerfile\nFROM quay.io/cdis/python:3.10-buster\n\n# https://github.com/nginxinc/docker-nginx/blob/f958fbacada447737319e979db45a1da49123142/mainline/debian/Dockerfile\nENV NGINX_VERSION   1.21.1\nENV NJS_VERSION     0.6.1\nENV PKG_RELEASE     1~buster\n\nRUN set -x \\\n# create nginx user/group first, to be consistent throughout docker variants\n    && addgroup --system --gid 102 nginx \\\n    && adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos \"nginx user\" --shell /bin/false --uid 102 nginx \\\n# also add nginx user to gid 101 (ssh) groups\n    && adduser nginx ssh \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates \\\n    && \\\n    NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \\\n    found=''; \\\n    for server in \\\n        ha.pool.sks-keyservers.net \\\n        hkp://keyserver.ubuntu.com:80 \\\n        hkp://p80.pool.sks-keyservers.net:80 \\\n        pgp.mit.edu \\\n    ; do \\\n        echo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \\\n        apt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" && found=yes && break; \\\n    done; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $NGINX_GPGKEY\" && exit 1; \\\n    apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \\\n    && dpkgArch=\"$(dpkg --print-architecture)\" \\\n    && nginxPackages=\" \\\n        nginx=${NGINX_VERSION}-${PKG_RELEASE} \\\n        nginx-module-xslt=${NGINX_VERSION}-${PKG_RELEASE} \\\n        nginx-module-geoip=${NGINX_VERSION}-${PKG_RELEASE} \\\n        nginx-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE} \\\n        nginx-module-njs=${NGINX_VERSION}+${NJS_VERSION}-${PKG_RELEASE} \\\n    \" \\\n    && case \"$dpkgArch\" in \\\n        amd64|i386|arm64) \\\n# arches officialy built by upstream\n            echo \"deb https://nginx.org/packages/mainline/debian/ buster nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n            && apt-get update \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published source packages\n            echo \"deb-src https://nginx.org/packages/mainline/debian/ buster nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n            \\\n# new directory for storing sources and .deb files\n            && tempDir=\"$(mktemp -d)\" \\\n            && chmod 777 \"$tempDir\" \\\n# (777 to ensure APT's \"_apt\" user can access it too)\n            \\\n# save list of currently-installed packages so build dependencies can be cleanly removed later\n            && savedAptMark=\"$(apt-mark showmanual)\" \\\n            \\\n# build .deb files from upstream's source packages (which are verified by apt-get)\n            && apt-get update \\\n            && apt-get build-dep -y $nginxPackages \\\n            && ( \\\n                cd \"$tempDir\" \\\n                && DEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \\\n                    apt-get source --compile $nginxPackages \\\n            ) \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n            \\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n            && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n            && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \\\n            \\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n            && ls -lAFh \"$tempDir\" \\\n            && ( cd \"$tempDir\" && dpkg-scanpackages . > Packages ) \\\n            && grep '^Package: ' \"$tempDir/Packages\" \\\n            && echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n            && apt-get -o Acquire::GzipIndexes=false update \\\n            ;; \\\n    esac \\\n    \\\n    && apt-get install --no-install-recommends --no-install-suggests -y \\\n                        $nginxPackages \\\n                        gettext-base \\\n                        curl \\\n    && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n    \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then \\\n        apt-get purge -y --auto-remove \\\n        && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n    fi \\\n# forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log \\\n# create a docker-entrypoint.d directory\n    && mkdir /docker-entrypoint.d\n\nEXPOSE 80\n\n# # Expose 443, in case of LTS / HTTPS\nEXPOSE 443\n\n# install uwsgi\n# https://uwsgi-docs.readthedocs.io/en/latest/Install.html\nRUN python -m pip install --upgrade pip\nRUN pip install --no-cache-dir uwsgi ddtrace\n\n# Remove default configuration from Nginx\nRUN rm /etc/nginx/conf.d/default.conf\n# Copy the base uWSGI ini file to enable default dynamic uwsgi process number\nCOPY uwsgi.ini /etc/uwsgi/\n\nCOPY uwsgi.conf /etc/nginx/sites-available/\n\nRUN ln -s /etc/nginx/sites-available/uwsgi.conf /etc/nginx/conf.d/uwsgi.conf\n\n# Install Supervisord\nRUN apt-get update && apt-get install --no-install-recommends -y supervisor \\\n&& rm -rf /var/lib/apt/lists/*\n# Custom Supervisord config\nCOPY supervisord.ini /etc/supervisor.d/supervisord.ini\n\n# Which uWSGI .ini file should be used, to make it customizable\nENV UWSGI_INI /app/uwsgi.ini\n\n# By default, disable uwsgi cheaper mode and run 2 processes.\n# If UWSGI_CHEAPER=N and UWSGI_PROCESSES=M, N is the min and M is the max\n# number of processes. UWSGI_CHEAPER must be lower than UWSGI_PROCESSES.\n# We set them here instead of in uwsgi.ini so that they can be overwritten.\nENV UWSGI_CHEAPER=\nENV UWSGI_PROCESSES=2\n\n# By default, allow unlimited file sizes, modify it to limit the file sizes\n# To have a maximum of 1 MB (Nginx's default) change the line to:\n# ENV NGINX_MAX_UPLOAD 1m\nENV NGINX_MAX_UPLOAD 0\n\n# By default, Nginx will run a single worker process, setting it to auto\n# will create a worker for each CPU core\nENV NGINX_WORKER_PROCESSES 1\n\n# By default, Nginx listens on port 80.\n# To modify this, change LISTEN_PORT environment variable.\n# (in a Dockerfile or with an option for `docker run`)\nENV LISTEN_PORT 80\n\n# Copy the entrypoint that will generate Nginx additional configs\nCOPY entrypoint.sh /entrypoint.sh\nCOPY logrotate-nginx.conf /etc/logrotate.d/nginx\nRUN chmod +x /entrypoint.sh\n\nENV PATH=\"/root/.cargo/bin:${PATH}\"\n\nCOPY dockerrun.sh /dockerrun.sh\nRUN mkdir -p /var/www/metrics/ && chmod +x /dockerrun.sh\n\nENTRYPOINT [\"sh\", \"/entrypoint.sh\"]\n\n# Add demo app\nCOPY ./app /app\nWORKDIR /app\n\nCMD [\"/usr/bin/supervisord\"]"
}