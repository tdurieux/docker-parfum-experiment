{
  "startTime": 1674246573335,
  "endTime": 1674246574479,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 74
      }
    }
  ],
  "repairedDockerfile": "# NOTE: This Dockerfile is meant to be used from the mkdocker_x86.sh script.\n\n# Pull a concrete version of Linux that does NOT receive updates after it's\n# been created.  This is so that the image is as stable as possible to make\n# image creation reproducible.\n# NB: this also means there may be no security-related fixes there, need to\n# move the version to the next manually.\n#FROM i386/ubuntu:xenial\n#FROM i386/ubuntu:bionic\nFROM i386/ubuntu:focal\n\nRUN linux32 \\\n    apt-get update && apt-get install -y --no-install-recommends apt-utils && rm -rf /var/lib/apt/lists/*;\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    export DEBCONF_NONINTERACTIVE_SEEN=true && \\\n    echo 'tzdata tzdata/Areas select Etc' | debconf-set-selections; \\\n    echo 'tzdata tzdata/Zones/Etc select UTC' | debconf-set-selections; \\\n    linux32 \\\n    apt-get -y install \\\n        autoconf \\\n        build-essential \\\n        curl \\\n        file \\\n        git \\\n        libx11-dev \\\n        libxext-dev \\\n        libxrender-dev \\\n        libxrandr-dev \\\n        libxtst-dev \\\n        libxt-dev \\\n        libcups2-dev \\\n        libasound2-data \\\n#        libpng12-0 \\\n        libasound2 \\\n        libfreetype6 \\\n        libfontconfig1-dev \\\n        libasound2-dev \\\n        rsync \\\n        unzip \\\n        zip\nRUN linux32 \\\n    apt-get -y install \\\n        g++-10 \\\n        gcc-10 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 && \\\n    apt-get clean -qy && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set up boot JDK for building\nCOPY boot_jdk_x86.tar.gz /jdk17/\nRUN cd /jdk17 && tar --strip-components=1 -xzf boot_jdk_x86.tar.gz && rm /jdk17/boot_jdk_x86.tar.gz\nENV BOOT_JDK=/jdk17\n\nRUN git config --global user.email \"teamcity@jetbrains.com\" && \\\n    git config --global user.name \"builduser\"\n"
}