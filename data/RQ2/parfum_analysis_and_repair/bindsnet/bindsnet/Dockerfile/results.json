{
  "startTime": 1674219779143,
  "endTime": 1674219780507,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG DEPS=development\nARG NVIDIA_30XX=false\n\nFROM nvidia/cuda:11.1-base AS base-default\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends --no-install-suggests -y \\\n    build-essential libgeos-dev liblzma-dev libssl-dev libbz2-dev curl vim python3.8-dev python-dev git libffi-dev \\\n    libglib2.0-0 libsm6 libxext6 libblas-dev libatlas-base-dev ffmpeg \\\n       && rm -rf /var/lib/apt/lists/*\n\n# install pyenv\nENV PYENV_ROOT=$HOME/.pyenv\nENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\nRUN curl -f -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\nRUN echo 'eval \"$(pyenv init -)\"' >> $HOME/.bashrc\n\n# install python version specified in the .python-version file\nCOPY .python-version .\nRUN PYTHON_VERSION=$(cat .python-version) pyenv install $PYTHON_VERSION && pyenv global $PYTHON_VERSION && pyenv rehash\n\n# install poetry and our package\nENV POETRY_NO_INTERACTION=1\\\n    # send python output directory to stdout\n    PYTHONUNBUFFERED=1\\\n    PIP_NO_CACHE_DIR=off\\\n    PIP_DISABLE_PIP_VERSION_CHECK=on\\\n    PIP_DEFAULT_TIMEOUT=100\\\n    POETRY_HOME=\"/opt/poetry\"\\\n    VENV_PATH=\"/opt/pysetup/.venv\"\\\n\n# install poetry and our package\nENV POETRY_NO_INTERACTION=1 \\\n    # send python output directory to stdout\n    PYTHONUNBUFFERED=1 \\\n    PIP_NO_CACHE_DIR=off \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    PIP_DEFAULT_TIMEOUT=100\n\nENV PATH=\"$POETRY_HOME/bin:$VENV_PATH/bin:$PATH\" POETRY_VERSION=1.1.8\n\nRUN mkdir $HOME/opt/ && \\\n    curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - && \\\n    poetry config virtualenvs.create false\n\nWORKDIR /bindsnet\n\nRUN mkdir bindsnet && touch bindsnet/__init__.py ## empty package for Poetry to add to path\nCOPY pyproject.toml poetry.lock README.md ./\n\nFROM base-default AS base-production\nRUN poetry install --no-dev  # this will only install production dependencies\n\nFROM base-default AS base-development\nRUN poetry install\n\nFROM base-${DEPS} AS nvidia-30xx-false\nRUN rm -rf $HOME/.cache/pypoetry/artifacts  # remove downloaded wheels\n\n# a fix for NVIDIA 30xx GPUs\nFROM installed AS nvidia-30xx-true\n\nRUN python -m pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html\n\nFROM nvidia-30xx-${NVIDIA_30XX} AS final\nCOPY . .\n"
}