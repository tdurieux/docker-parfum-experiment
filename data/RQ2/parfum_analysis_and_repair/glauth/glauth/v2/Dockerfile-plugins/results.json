{
  "startTime": 1674254816580,
  "endTime": 1674254817210,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 90
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 90
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#################\n# Build Step\n#################\n\nFROM golang:buster as build\nLABEL maintainers=\"Ben Yanke <ben@benyanke.com>, Jörn Friedrich Dreyer <jfd@butonic.de>, Chris F Ravenscroft <chris@voilaweb.com>\"\n\n# Setup work env\nRUN mkdir /app /tmp/gocode\nADD local/app /app/\nWORKDIR /app/v2\n\n# Required envs for GO\nENV GOPATH=/tmp/gocode\nENV GOOS=linux\nENV GOARCH=amd64\nENV GO_ENABLED=1\n\n# Only needed for alpine builds // also: busybox\nRUN apt -qq update && apt -qq --no-install-recommends install -y git make build-essential busybox-static dumb-init && rm -rf /var/lib/apt/lists/*;\n\n# Install deps\nRUN go get -d -v ./...\n\n# Build and copy final result\nRUN uname -a\nRUN uname -m\nRUN bash -c '[[ $(uname -m) == x86_64 ]] && { make linuxamd64 && cp ./bin/linuxamd64/glauth /app/v2/glauth; make plugins_linux_amd64 && cp ./bin/linuxamd64/*.so /app/v2/; } || { true; }'\nRUN bash -c '[[ $(uname -m) == aarch64 ]] && { make linuxarm64 && cp ./bin/linuxarm64/glauth /app/v2/glauth; make plugins_linux_arm64 && cp ./bin/linuxarm64/*.so /app/v2/; } || { true; }'\nRUN ls -l /app/v2/bin/linuxamd64\n\n# Check glauth works\nRUN /app/v2/glauth --version\n\n#################\n# Run Step\n#################\n\nFROM gcr.io/distroless/base-debian10 as run\nLABEL maintainers=\"Ben Yanke <ben@benyanke.com>, Jörn Friedrich Dreyer <jfd@butonic.de>, Chris F Ravenscroft <chris@voilaweb.com>\"\n\n# Copy binary from build container\nCOPY --from=build /app/v2/glauth /app/glauth\nCOPY --from=build /app/v2/*.so /app/\n\n# Copy docker specific scripts from build container\nCOPY --from=build /app/v2/scripts/docker/start-plugins.sh /app/docker/\nCOPY --from=build /app/v2/scripts/docker/default-config-plugins.cfg /app/docker/\nCOPY --from=build /app/v2/scripts/docker/gl.db /app/docker/\n\n# Just what we need\nCOPY --from=build /usr/bin/dumb-init /usr/bin/dumb-init\nCOPY --from=build /bin/busybox /bin/sh\nCOPY --from=build /bin/busybox /bin/ln\nCOPY --from=build /bin/busybox /bin/rm\n# Debug env: COPY --from=build /bin/busybox /bin/busybox\nRUN ln /bin/sh /usr/bin/cp && ln /bin/sh /usr/bin/mkdir && rm /bin/ln /bin/rm\n\n# Install init\n\n# Expose web and LDAP ports\nEXPOSE 389 636 5555\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/bin/sh\", \"/app/docker/start-plugins.sh\"]\n"
}