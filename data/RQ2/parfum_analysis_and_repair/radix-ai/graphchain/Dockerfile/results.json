{
  "startTime": 1674217470607,
  "endTime": 1674217471711,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 54,
        "columnEnd": 89
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 104
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.8-slim AS base\n\n# Configure Python to print tracebacks on crash [1], and to not buffer stdout and stderr [2].\n# [1] https://docs.python.org/3/using/cmdline.html#envvar-PYTHONFAULTHANDLER\n# [2] https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUNBUFFERED\nENV PYTHONFAULTHANDLER 1\nENV PYTHONUNBUFFERED 1\n\n# Install Poetry.\nENV POETRY_VERSION 1.1.13\nRUN --mount=type=cache,id=poetry,target=/root/.cache/ pip install --no-cache-dir poetry==$POETRY_VERSION\n\n# Create and activate a virtual environment.\nRUN python -m venv /opt/app-env\nENV PATH /opt/app-env/bin:$PATH\nENV VIRTUAL_ENV /opt/app-env\n\n# Set the working directory.\nWORKDIR /app/\n\nFROM base as dev\n\n# Install development tools: compilers, curl, git, gpg, ssh, starship, vim, and zsh.\nRUN rm /etc/apt/apt.conf.d/docker-clean\nRUN --mount=type=cache,id=apt-cache,target=/var/cache/apt/ \\\n    --mount=type=cache,id=apt-lib,target=/var/lib/apt/ \\\n    apt-get update && \\\n    apt-get install --no-install-recommends --yes build-essential curl git gnupg ssh vim zsh zsh-antigen && \\\n    chsh --shell /usr/bin/zsh && \\\n    sh -c \"$(curl -fsSL https://starship.rs/install.sh)\" -- \"--yes\" && \\\n    echo 'source /usr/share/zsh-antigen/antigen.zsh' >> ~/.zshrc && \\\n    echo 'antigen bundle zsh-users/zsh-autosuggestions' >> ~/.zshrc && \\\n    echo 'antigen apply' >> ~/.zshrc && \\\n    echo 'eval \"$(starship init zsh)\"' >> ~/.zshrc && \\\n    zsh -c 'source ~/.zshrc' && rm -rf /var/lib/apt/lists/*;\n\n# Install the development Python environment.\nCOPY .pre-commit-config.yaml poetry.lock* pyproject.toml /app/\nRUN --mount=type=cache,id=poetry,target=/root/.cache/ \\\n    mkdir -p src/graphchain/ && touch src/graphchain/__init__.py && touch README.md && \\\n    poetry install --no-interaction && \\\n    mkdir -p /var/lib/poetry/ && cp poetry.lock /var/lib/poetry/ && \\\n    git init && pre-commit install --install-hooks && \\\n    mkdir -p /var/lib/git/ && cp .git/hooks/commit-msg .git/hooks/pre-commit /var/lib/git/\n\nFROM base as ci\n\n# Install the run time Python environment.\n# TODO: Replace `--no-dev` with `--without test` when Poetry 1.2.0 is released.\nCOPY poetry.lock pyproject.toml /app/\nRUN --mount=type=cache,id=poetry,target=/root/.cache/ \\\n    mkdir -p src/graphchain/ && touch src/graphchain/__init__.py && touch README.md && \\\n    poetry install --no-dev --no-interaction\n"
}