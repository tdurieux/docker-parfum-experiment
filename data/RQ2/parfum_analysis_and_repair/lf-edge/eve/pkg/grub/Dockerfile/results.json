{
  "startTime": 1674220870656,
  "endTime": 1674220872459,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 34,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG EVE_BUILDER_IMAGE=lfedge/eve-alpine:6.7.0\n# hadolint ignore=DL3006\nFROM ${EVE_BUILDER_IMAGE} as grub-build\n# hadolint ignore=DL3018\nRUN apk add --no-cache \\\n  automake \\\n  make \\\n  bison \\\n  gettext \\\n  flex \\\n  gcc \\\n  git \\\n  libtool \\\n  libc-dev \\\n  linux-headers \\\n  python3 \\\n  autoconf \\\n  pkgconf \\\n  patch \\\n  gettext-dev\nRUN [ \"$(uname -m)\" = x86_64 ] || apk add --no-cache coreutils\n\n# because python is not available\nRUN ln -s python3 /usr/bin/python\n\n# list of grub modules that are portable between x86_64 and aarch64\nENV GRUB_MODULES_PORT=\"part_gpt fat ext2 iso9660 squash4 gzio linux acpi normal cpio crypto disk boot crc64 \\\nsearch_disk_uuid search_part_label search_label xzio xfs video gfxterm serial gptprio chain probe reboot regexp smbios \\\npart_msdos cat echo test configfile loopback\"\nENV GRUB_MODULES_i386_pc=\"multiboot multiboot2 biosdisk gpt verify\"\nENV GRUB_MODULES_x86_64=\"multiboot multiboot2 efi_uga efi_gop linuxefi gpt verify gcry_sha256 measurefs\"\nENV GRUB_MODULES_aarch64=\"xen_boot efi_gop gpt\"\nENV GRUB_MODULES_riscv64=\"\"\nENV GRUB_COMMIT=71f9e4ac44142af52c3fc1860436cf9e432bf764\nENV GRUB_TAG_riscv64=2.06\nENV GRUB_TAG_aarch64=2.06\n\nENV GRUB_REPO=https://git.savannah.gnu.org/git/grub.git\n\nCOPY / /\nRUN mkdir /grub-lib\n\n# hadolint ignore=DL3003\nRUN if [ ! -d \"grub\" ]; then \\\n        git clone ${GRUB_REPO} \\\n        && cd /grub \\\n        && git config --add user.email a@b.c \\\n        && git config user.name a \\\n        && if [ \"$(uname -m)\" != x86_64 ]; then \\\n            GRUB_COMMIT=\"$(git show-ref -s tags/grub-\"$(eval echo \"\\$GRUB_TAG_$(uname -m)\")\")\"; \\\n        fi \\\n        && git checkout -b grub-build \"$GRUB_COMMIT\" \\\n        && if [ \"$(uname -m)\" != x86_64 ]; then \\\n            rm -rf /patches \\\n            && mv /patches-\"$(eval echo \"\\$GRUB_TAG_$(uname -m)\")\" /patches \\\n            && cp /patches-\"$(uname -m)\"-\"$(eval echo \"\\$GRUB_TAG_$(uname -m)\")\"/* /patches/; \\\n        fi \\\n        && git am /patches/* \\\n        && (./bootstrap || ./autogen.sh) ; \\\n    fi\n\n\nWORKDIR /grub\n\nENV BUILD_GRUB=\"set -e && \\\n  if [ -f Makefile ]; then make distclean; fi && \\\n  ./configure --disable-werror --libdir=/grub-lib --with-platform=\\${GRUB_PLATFORM} CFLAGS='-Os -Wno-unused-value' && \\\n  make -j $(getconf _NPROCESSORS_ONLN) && \\\n  make install\"\n\nENV GRUB_PLATFORM=efi\nRUN eval $BUILD_GRUB\nRUN if [ \"$(uname -m)\" = x86_64 ]; then GRUB_PLATFORM=\"pc --disable-efiemu\" && eval \"$BUILD_GRUB\" ; fi\n\n\nCOPY embedded.cfg /\n\n# create the grub core image\nRUN case $(uname -m) in \\\n  x86_64) \\\n    ./grub-mkimage -O x86_64-efi -d /grub-lib/grub/x86_64-efi -o /grub-lib/BOOTX64.EFI -p /EFI/BOOT ${GRUB_MODULES_PORT} ${GRUB_MODULES_x86_64} &&\\\n    ./grub-mkimage -O i386-pc -d /grub-lib/grub/i386-pc -o /grub-lib/BOOT.pc -p /EFI/BOOT -c /embedded.cfg ${GRUB_MODULES_PORT} ${GRUB_MODULES_i386_pc} && \\\n    cp /grub-lib/grub/i386-pc/boot.img /grub-lib/BOOT.img ;;\\\n  aarch64) \\\n    ./grub-mkimage -O arm64-efi -d /grub-lib/grub/arm64-efi -o /grub-lib/BOOTAA64.EFI -p /EFI/BOOT ${GRUB_MODULES_PORT} ${GRUB_MODULES_aarch64} ;; \\\n  riscv64) \\\n     ./grub-mkimage -O riscv64-efi -d /grub-lib/grub/riscv64-efi -o /grub-lib/BOOTRISCV64.EFI -p /EFI/BOOT ${GRUB_MODULES_PORT} ${GRUB_MODULES_riscv64} ;;\\\n  esac\n\nFROM scratch\nENTRYPOINT []\nCMD []\nWORKDIR /EFI/BOOT\nCOPY --from=grub-build /grub-lib/BOOT* ./\nCOPY rootfs.cfg grub.cfg\n"
}