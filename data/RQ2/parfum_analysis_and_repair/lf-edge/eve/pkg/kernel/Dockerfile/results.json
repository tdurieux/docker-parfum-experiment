{
  "startTime": 1674250582766,
  "endTime": 1674250583874,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file must be kept as much in sync with pkg/new-kernel/Dockerfile as posisble\nFROM lfedge/eve-alpine:6.7.0 AS kernel-build\n\nENV BUILD_PKGS \\\n    argp-standalone automake bash bc binutils-dev bison build-base curl \\\n    diffutils flex git gmp-dev gnupg installkernel kmod elfutils-dev    \\\n    linux-headers libunwind-dev mpc1-dev mpfr-dev ncurses-dev findutils \\\n    openssl-dev patch rsync sed squashfs-tools tar xz xz-dev zlib-dev openssl \\\n    attr-dev autoconf file coreutils libtirpc-dev libtool util-linux-dev\nRUN eve-alpine-deploy.sh\n\nARG KERNEL_VERSION_aarch64=5.10.121\nARG KERNEL_VERSION_x86_64=5.10.121\nARG KERNEL_SOURCE\nARG KERNEL_SHA256_SUMS\nARG KERNEL_PGP2_SIGN\n\n# The only variable that is used everywhere is KERNEL_SERIES, so we stick it into env\nSHELL [\"/bin/sh\", \"-c\", \"export KERNEL_SERIES=$(eval echo \\\\$KERNEL_VERSION_$(uname -m) | sed -e 's#.[^.]*$#.x#') ; /bin/sh -c \\\"$1\\\"\", \"-\" ]\n\n# We copy the entire directory. This copies some unneeded files, but\n# allows us to check for the existence /patches-${KERNEL_SERIES} to\n# build kernels without patches.\nCOPY / /\n\n# Download and verify kernel\n# PGP keys: 589DA6B1 (greg@kroah.com) & 6092693E (autosigner@kernel.org) & 00411886 (torvalds@linux-foundation.org)\nRUN KERNEL_VERSION=\"$(eval echo \\$KERNEL_VERSION_\"$(uname -m)\")\" && KERNEL_MAJOR=\"$(echo \"$KERNEL_VERSION\" | cut -f1 -d.)\" && \\\n    KERNEL_SOURCE=${KERNEL_SOURCE:-https://www.kernel.org/pub/linux/kernel/v${KERNEL_MAJOR}.x/linux-${KERNEL_VERSION}.tar.xz} && \\\n    KERNEL_SHA256_SUMS=${KERNEL_SHA256_SUMS:-https://www.kernel.org/pub/linux/kernel/v${KERNEL_MAJOR}.x/sha256sums.asc} && \\\n    KERNEL_PGP2_SIGN=${KERNEL_PGP2_SIGN:-https://www.kernel.org/pub/linux/kernel/v${KERNEL_MAJOR}.x/linux-${KERNEL_VERSION}.tar.sign} && \\\n    curl -fsSLO ${KERNEL_SHA256_SUMS} && \\\n    gpg2 -q --import keys.asc && \\\n    gpg2 --verify sha256sums.asc && \\\n    KERNEL_SHA256=$(grep linux-${KERNEL_VERSION}.tar.xz sha256sums.asc | cut -d ' ' -f 1) && \\\n    [ -f linux-${KERNEL_VERSION}.tar.xz ] || curl -fsSLO ${KERNEL_SOURCE} && \\\n    echo \"${KERNEL_SHA256}  linux-${KERNEL_VERSION}.tar.xz\" | sha256sum -c - && \\\n    xz -d linux-${KERNEL_VERSION}.tar.xz && \\\n    curl -fsSLO ${KERNEL_PGP2_SIGN} && \\\n    gpg2 --verify linux-${KERNEL_VERSION}.tar.sign linux-${KERNEL_VERSION}.tar && \\\n    cat linux-${KERNEL_VERSION}.tar | tar --absolute-names -x && mv /linux-${KERNEL_VERSION} /linux && \\\n    rm -rf /out && mkdir /out && echo \"KERNEL_SOURCE=${KERNEL_SOURCE}\" > /out/kernel-source-info\n\n# Apply local patches\nWORKDIR /linux\nRUN set -e ; [ ! -d /patches-\"${KERNEL_SERIES}\" ] || for patch in /patches-\"${KERNEL_SERIES}\"/*.patch; do \\\n        echo \"Applying $patch\"; \\\n        patch -p1 < \"$patch\"; \\\n    done\n\nRUN case $(uname -m) in \\\n    x86_64) \\\n        KERNEL_DEF_CONF=/linux/arch/x86/configs/x86_64_defconfig; \\\n        ;; \\\n    aarch64) \\\n        KERNEL_DEF_CONF=/linux/arch/arm64/configs/defconfig; \\\n        ;; \\\n    esac  && \\\n    cp /kernel_config-${KERNEL_SERIES}-$(uname -m) ${KERNEL_DEF_CONF}; \\\n    if [ -n \"${EXTRA}\" ]; then \\\n        sed -i \"s/CONFIG_LOCALVERSION=\\\"-linuxkit\\\"/CONFIG_LOCALVERSION=\\\"-linuxkit${EXTRA}\\\"/\" ${KERNEL_DEF_CONF}; \\\n        if [ \"${EXTRA}\" = \"-dbg\" ]; then \\\n            sed -i 's/CONFIG_PANIC_ON_OOPS=y/# CONFIG_PANIC_ON_OOPS is not set/' ${KERNEL_DEF_CONF}; \\\n        fi && \\\n        cat /kernel_config${EXTRA} >> ${KERNEL_DEF_CONF}; \\\n    fi && \\\n    make defconfig && \\\n    make oldconfig && \\\n    if [ -z \"${EXTRA}\" ]; then diff -cw .config ${KERNEL_DEF_CONF}; fi\n\n# Kernel\nRUN make -j \"$(getconf _NPROCESSORS_ONLN)\" KCFLAGS=\"-fno-pie\" && \\\n    case $(uname -m) in \\\n    x86_64) \\\n        cp arch/x86_64/boot/bzImage /out/kernel; \\\n        ;; \\\n    aarch64) \\\n        cp arch/arm64/boot/Image.gz /out/kernel; \\\n        ;; \\\n    esac && \\\n    cp System.map /out && \\\n    ([ \"${EXTRA}\" = \"-dbg\" ] && cp vmlinux /out || true)\n\n# Modules\nRUN make INSTALL_MOD_PATH=/tmp/kernel-modules modules_install\n\n# Out-of-tree, open source modules\n#  * ZFS on Linux\nENV ZFS_VERSION=2.1.2\nENV ZFS_COMMIT=zfs-${ZFS_VERSION}\nENV ZFS_REPO=https://github.com/openzfs/zfs.git\nENV ZFS_PATCH_DIR=/patches-zfs-\"${ZFS_VERSION}\"\n\nWORKDIR /tmp/zfs\n\nRUN git clone --depth 1 -b ${ZFS_COMMIT} ${ZFS_REPO} .\nRUN set -e; \\\n    if [ ! -d \"${ZFS_PATCH_DIR}\" ]; then \\\n        echo \"No such dir ${ZFS_PATCH_DIR}\"; \\\n    else \\\n        for patch in \"${ZFS_PATCH_DIR}\"/*.patch; do \\\n            echo \"Applying $patch\"; \\\n            patch -p1 < \"$patch\"; \\\n        done \\\n    fi\nRUN ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-linux=/linux && \\\n    ./scripts/make_gitrev.sh && \\\n    make -C module -j \"$(getconf _NPROCESSORS_ONLN)\" && \\\n    make -C module INSTALL_MOD_PATH=/tmp/kernel-modules install# cd /lib/modules && depmod -ae *\n\n# Out-of-tree, creepy modules\n#  * Maxlinear USB (option #2 https://github.com/lipnitsk/xr/archive/master.zip)\nWORKDIR /linux\nADD https://www.maxlinear.com/document?id=21651 /tmp/xr.zip\nRUN unzip -d /tmp /tmp/xr.zip ;\\\n    make -C /linux INSTALL_MOD_PATH=/tmp/kernel-modules \\\n                   M=/tmp/xr_usb_serial_common_lnx-3.6-and-newer-pak \\\n         modules modules_install\n\nRUN git clone https://github.com/brektrou/rtl8821CU.git /tmp/rtl8821CU &&\\\n    (cd /tmp/rtl8821CU && git checkout 8c2226a7 ) &&\\\n    make -C /tmp/rtl8821CU KSRC=/linux modules &&\\\n    install -D -p -m 644 /tmp/rtl8821CU/8821cu.ko $(echo /tmp/kernel-modules/lib/modules/*)/kernel/drivers/net/wireless/realtek/rtl8821cu/8821cu.ko\n\n# Strip at least some of the modules to conserve space\nRUN if [ \"$(uname -m)\" = aarch64 ];then strip --strip-debug `find /tmp/kernel-modules/lib/modules -name \\*.ko` ;fi\n\n# Device Tree Blobs\nRUN if [ \"$(uname -m)\" = aarch64 ];then make INSTALL_DTBS_PATH=/tmp/kernel-modules/boot/dtb dtbs_install ;fi\n\n# Package all the modules up\nRUN ( DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)) && \\\n      cd /tmp/kernel-modules/lib/modules/$DVER && \\\n      rm build source && \\\n      ln -s /usr/src/linux-headers-$DVER build ) && \\\n    ( cd /tmp/kernel-modules && tar cf /out/kernel.tar . )\n\n# Headers (userspace API)\nRUN mkdir -p /tmp/kernel-headers/usr && \\\n    make INSTALL_HDR_PATH=/tmp/kernel-headers/usr headers_install && \\\n    ( cd /tmp/kernel-headers && tar cf /out/kernel-headers.tar usr )\n\n# Headers (kernel development)\nRUN DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)) && \\\n    dir=/tmp/usr/src/linux-headers-$DVER && \\\n    mkdir -p $dir && \\\n    cp /linux/.config $dir && \\\n    cp /linux/Module.symvers $dir && \\\n    find . -path './include/*' -prune -o \\\n           -path './arch/*/include' -prune -o \\\n           -path './scripts/*' -prune -o \\\n           -type f \\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \\\n                      -name '*.lds' -o -name '*.pl' -o -name '*.sh' \\) | \\\n         tar cf - -T - | (cd $dir; tar xf -) && \\\n    ( cd /tmp && tar cf /out/kernel-dev.tar usr/src )\n\nFROM scratch\nENTRYPOINT []\nCMD []\nWORKDIR /\nCOPY --from=kernel-build /out/* /\n"
}