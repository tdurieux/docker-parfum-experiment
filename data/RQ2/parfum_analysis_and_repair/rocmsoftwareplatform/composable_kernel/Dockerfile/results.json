{
  "startTime": 1674250978383,
  "endTime": 1674250979846,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 52,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nARG ROCMVERSION=5.1\nARG OSDB_BKC_VERSION\nARG compiler_version\n\nRUN set -xe\n\nARG BUILD_THREADS=8\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/.apt_$ROCMVERSION/\n# Add rocm repository\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y wget gnupg && rm -rf /var/lib/apt/lists/*;\nRUN wget -qO - https://repo.radeon.com/rocm/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO ubuntu main > /etc/apt/sources.list.d/rocm.list\"\nRUN wget --no-check-certificate -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -\nRUN sh -c \"echo deb https://apt.kitware.com/ubuntu/ bionic main | tee -a /etc/apt/sources.list\"\n\n# ADD requirements.txt requirements.txt\n# Install dependencies\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y --allow-unauthenticated \\\n    apt-utils \\\n    build-essential \\\n    cmake-data=3.15.1-0kitware1 \\\n    cmake=3.15.1-0kitware1 \\\n    curl \\\n    g++ \\\n    gdb \\\n    git \\\n    hip-rocclr \\\n    jq \\\n    libelf-dev \\\n    libncurses5-dev \\\n    libnuma-dev \\\n    libpthread-stubs0-dev \\\n    llvm-amdgpu \\\n    pkg-config \\\n    python \\\n    python3.8 \\\n    python-dev \\\n    python3-dev \\\n    python-pip \\\n    python3-pip \\\n    software-properties-common \\\n    wget \\\n    rocm-dev \\\n    rocm-device-libs \\\n    rocm-cmake \\\n    vim \\\n    zlib1g-dev \\\n    openssh-server \\\n    clang-format-10 \\\n    kmod && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup ubsan environment to printstacktrace\nRUN ln -s /usr/bin/llvm-symbolizer-3.8 /usr/local/bin/llvm-symbolizer\nENV UBSAN_OPTIONS=print_stacktrace=1\n\n# Install an init system\nRUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\nRUN dpkg -i dumb-init_*.deb && rm dumb-init_*.deb\n\n# Install cget\nRUN pip install --no-cache-dir cget\n\n# Install rclone\nRUN pip install --no-cache-dir https://github.com/pfultz2/rclone/archive/master.tar.gz\n\nARG PREFIX=/opt/rocm\n# Install dependencies\nRUN cget install pfultz2/rocm-recipes\n# Install rbuild\nRUN pip3 install --no-cache-dir https://github.com/RadeonOpenCompute/rbuild/archive/6d78a0553babdaea8d2da5de15cbda7e869594b8.tar.gz\n# Install packages for processing the performance results\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir sqlalchemy\nRUN pip3 install --no-cache-dir pymysql\nRUN pip3 install --no-cache-dir pandas\nRUN pip3 install --no-cache-dir setuptools-rust\nRUN pip3 install --no-cache-dir sshtunnel\n# Setup ubsan environment to printstacktrace\nENV UBSAN_OPTIONS=print_stacktrace=1\n\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\nADD rbuild.ini /rbuild.ini\nADD dev-requirements.txt dev-requirements.txt\nRUN rbuild prepare -s develop -d $PREFIX\nRUN groupadd -f render\n\n# Install the new rocm-cmake version\nRUN git clone -b master https://github.com/RadeonOpenCompute/rocm-cmake.git  && \\\n  cd rocm-cmake && mkdir build && cd build && \\\n  cmake  .. && cmake --build . && cmake --build . --target install\n\nWORKDIR /\n\nENV compiler_version=$compiler_version\nRUN sh -c \"echo compiler version = '$compiler_version'\"\n\nRUN if [ \"$compiler_version\" = \"9110\" ]; then \\\n        git clone -b ck-9110 https://github.com/RadeonOpenCompute/llvm-project.git && \\\n        cd llvm-project && mkdir build && cd build && \\\n        cmake -DCMAKE_INSTALL_PREFIX=/opt/rocm/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=1 -DLLVM_TARGETS_TO_BUILD=\"AMDGPU;X86\" -DLLVM_ENABLE_PROJECTS=\"clang;lld;compiler-rt\" ../llvm && \\\n        make -j 8 ; \\\n    else echo \"using the release compiler\"; \\\n    fi\n\n#ENV HIP_CLANG_PATH='/llvm-project/build/bin'\n#RUN sh -c \"echo HIP_CLANG_PATH = '$HIP_CLANG_PATH'\"\n"
}