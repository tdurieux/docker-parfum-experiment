{
  "startTime": 1674252871322,
  "endTime": 1674252872129,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 54,
        "columnEnd": 90
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 54,
        "columnEnd": 90
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ===================\n# ===== Builder =====\n# ===================\n\nFROM --platform=${BUILDPLATFORM} golang:1.17 AS builder\nARG TARGETOS\nARG TARGETARCH\nARG VERSION\nARG RELEASE\nARG GCFLAGS\n\n# Install required packages\nRUN apt-get update && apt-get install --no-install-recommends -y apt-utils && apt-get install --no-install-recommends -y gettext-base wget && rm -rf /var/lib/apt/lists/*;\nRUN wget --progress=bar:force:noscroll \"https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64\" -O /usr/bin/yq && chmod +x /usr/bin/yq\n\n# Reconstruct source tree inside docker\nWORKDIR /clickhouse-operator\nADD . .\nENV GCFLAGS=\"${GCFLAGS}\"\nENV GOOS=\"${TARGETOS}\"\nENV GOARCH=\"${TARGETARCH}\"\n\n# Build operator binary with explicitly specified output\nRUN OPERATOR_BIN=/tmp/clickhouse-operator bash -xe ./dev/go_build_operator.sh\n\n# ===================\n# == Delve builder ==\n# ===================\nFROM --platform=${BUILDPLATFORM} golang:1.17 AS delve-builder\nRUN CGO_ENABLED=0 GO111MODULE=on GOOS=\"${TARGETOS}\" GOARCH=\"${TARGETARCH}\" go install -ldflags \"-s -w -extldflags '-static'\" github.com/go-delve/delve/cmd/dlv@latest && rm -rf /root/.cache/go-build/ /go/pkg/mod/\n\n# ======================\n# ===== Image Base =====\n# ======================\n\nFROM registry.access.redhat.com/ubi8/ubi-minimal:latest AS image-base\nRUN microdnf update && microdnf clean all\n\nMAINTAINER \"Altinity <support@altinity.com>\"\n\nLABEL name=\"ClickHouse operator\" \\\n      maintainer=\"support@altinity.com\" \\\n      vendor=\"Altinity\" \\\n      version=\"${VERSION:-dev}\" \\\n      release=\"${RELEASE:-1}\" \\\n      summary=\"ClickHouse operator\" \\\n      description=\"ClickHouse operator operates ClickHouse clusters in kubernetes\"\n\nADD LICENSE /licenses/\n\nWORKDIR /\n\n# Add config files from local source dir into image\nADD config/config.yaml   /etc/clickhouse-operator/\nADD config/conf.d/*      /etc/clickhouse-operator/conf.d/\nADD config/config.d/*    /etc/clickhouse-operator/config.d/\nADD config/templates.d/* /etc/clickhouse-operator/templates.d/\nADD config/users.d/*     /etc/clickhouse-operator/users.d/\n\n# Copy clickhouse-operator binary into operator image from builder\nCOPY --from=builder /tmp/clickhouse-operator .\n\n# =======================\n# ===== Image Debug =====\n# =======================\nFROM image-base AS image-debug\nRUN echo \"Building DEBUG image\"\nWORKDIR /\nCOPY --from=delve-builder /go/bin/dlv /go/bin/dlv\nCMD [\"/go/bin/dlv\", \"--listen=:40001\", \"--headless=true\", \"--api-version=2\", \"exec\", \"/clickhouse-operator\",\"--\",\"-logtostderr=true\", \"-v=5\"]\n\n# ======================\n# ===== Image Prod =====\n# ======================\nFROM image-base AS image-prod\nRUN echo \"Building PROD image\"\nWORKDIR /\nUSER nobody\n\n# Run /clickhouse-operator -alsologtostderr=true -v=1\n# We can specify additional options, such as:\n#   --config=/path/to/config\n#   --kube-config=/path/to/kubeconf\nENTRYPOINT [\"/clickhouse-operator\"]\nCMD [\"-logtostderr=true\", \"-v=1\"]\n#CMD [\"-alsologtostderr=true\", \"-v=1\"]\n"
}