{
  "startTime": 1674248460150,
  "endTime": 1674248462155,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 155,
        "lineEnd": 159,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 95,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 104,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 110,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 115,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 155,
        "lineEnd": 159,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 155,
        "lineEnd": 159,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedDockerfile": "################################################################\n# Devcontainer Image (for local development and CI)\n################################################################\nFROM ghcr.io/magma/magma/bazel-base:latest as devcontainer\n\n# [Option] Install zsh\nARG INSTALL_ZSH=\"true\"\n# [Option] Upgrade OS packages to their latest versions\nARG UPGRADE_PACKAGES=\"false\"\n# [Option] Enable non-root Docker access in container\nARG ENABLE_NONROOT_DOCKER=\"true\"\n# [Option] Use the OSS Moby CLI instead of the licensed Docker CLI\nARG USE_MOBY=\"true\"\n\n# Install needed packages and setup non-root user. Use a separate RUN statement to add your\n# own dependencies. A user of \"automatic\" attempts to reuse an user ID if one already exists.\nARG USERNAME=automatic\nARG USER_UID=1000\nARG USER_GID=$USER_UID\nCOPY .devcontainer/library-scripts/*.sh /tmp/library-scripts/\nRUN apt-get update \\\n    && /bin/bash /tmp/library-scripts/common-debian.sh \"${INSTALL_ZSH}\" \"${USERNAME}\" \"${USER_UID}\" \"${USER_GID}\" \"${UPGRADE_PACKAGES}\" \\\n    # Use Docker script from script library to set things up\n    && /bin/bash /tmp/library-scripts/docker-debian.sh \"${ENABLE_NONROOT_DOCKER}\" \"/var/run/docker-host.sock\" \"/var/run/docker.sock\" \"${USERNAME}\" \"${USE_MOBY}\" \\\n    # Clean up\n    && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/library-scripts/\n\n# Setting the ENTRYPOINT to docker-init.sh will configure non-root access to\n# the Docker socket if \"overrideCommand\": false is set in devcontainer.json.\n# The script will also execute CMD if you need to alter startup behaviors.\nENTRYPOINT [ \"/usr/local/share/docker-init.sh\" ]\nCMD [ \"sleep\", \"infinity\" ]\n\nARG PYTHON_VERSION=3.8\n# PYTHON_VERSION must be in sync with \"python.defaultInterpreterPath\" and \"python.analysis.extraPaths\" in .devcontainer/devcontainer.json\nENV MAGMA_ROOT=/workspaces/magma\nENV BUILD_TYPE=Debug\nENV C_BUILD=/workspaces/magma/build/c\n\n\nRUN echo \"Install general purpose packages\" && \\\n    apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n        autoconf \\\n        automake \\\n        clang-11 \\\n        clang-format-11 \\\n        clang-tidy-11 \\\n        clangd-12 \\\n        g++-9 \\\n        gcc-9 \\\n        gdb \\\n        lcov \\\n        libclang-11-dev \\\n        lldb \\\n        llvm-11-dev \\\n        make \\\n        ninja-build \\\n        openjdk-8-jdk \\\n        perl \\\n        pkg-config \\\n        python3-pip \\\n        redis-server \\\n        ruby \\\n        rubygems \\\n        ruby-dev \\\n        software-properties-common \\\n        tzdata \\\n        virtualenv=20.0.17-1ubuntu0.4 && \\\n    gem install fpm && \\\n    update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-11/bin/clang 10 && \\\n    update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-11/bin/clang++ 10 && \\\n    update-alternatives --install /usr/bin/clang-format clang-format /usr/lib/llvm-11/bin/clang-format 10 && \\\n    update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/lib/llvm-11/bin/clang-tidy 10 && \\\n    update-alternatives --install /usr/bin/clang-apply-replacements clang-apply-replacements /usr/lib/llvm-11/bin/clang-apply-replacements 10 && rm -rf /var/lib/apt/lists/*;\n\n# Install golang 1.18\nWORKDIR /usr/local\nARG GOLANG_VERSION=\"1.18.3\"\nRUN GO_TARBALL=\"go${GOLANG_VERSION}.linux-amd64.tar.gz\" \\\n && curl -f https://artifactory.magmacore.org/artifactory/generic/${GO_TARBALL} --remote-name --location \\\n && tar -xzf ${GO_TARBALL} \\\n && rm ${GO_TARBALL}\nENV PATH=$PATH:/usr/local/go/bin\n\nRUN echo \"Install 3rd party dependencies\" && \\\n    apt-get update && \\\n    echo \"Install FMT lib requirements\" && \\\n    apt-get -y install --no-install-recommends \\\n        libunwind8-dev \\\n        libelf-dev \\\n        libdwarf-dev \\\n        bzip2 && \\\n    echo \"Install Folly requirements\" && \\\n    apt-get -y install --no-install-recommends \\\n        liblz4-dev \\\n        liblzma-dev \\\n        libsnappy-dev \\\n        binutils-dev \\\n        libjemalloc-dev \\\n        pkg-config \\\n        libunwind-dev && \\\n    echo \"Install check for test support\" && \\\n    apt-get -y install --no-install-recommends \\\n        check && \\\n    echo \"Install gtest for test support\" && \\\n    apt-get -y install --no-install-recommends \\\n        libgtest-dev && \\\n    echo \"Install Nettle requirements\" && \\\n    apt-get -y install --no-install-recommends \\\n        libxml2-dev \\\n        libyaml-cpp-dev \\\n        nlohmann-json3-dev && \\\n    echo \"GRPC and it's dependencies\" && \\\n    apt-get -y install --no-install-recommends \\\n        grpc-dev && rm -rf /var/lib/apt/lists/*;\n\n##### Useful for logfile modification e.g. pruning all /magma/... prefix from GCC warning logs\nRUN GOBIN=\"/usr/bin/\" go install github.com/ezekg/xo@0f7f076932dd\n\n##### GRPC and it's dependencies\nRUN git clone --recurse-submodules -b v1.35.0 https://github.com/grpc/grpc && \\\n    cd grpc && \\\n    mkdir -p cmake/build && \\\n    cd cmake/build && \\\n    cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON ../.. && \\\n    make -j\"$(nproc)\" && \\\n    make install && \\\n    cd / && \\\n    rm -rf grpc\n\n##### libprotobuf-mutator is used for randomized proto unit tests / property tests\nRUN git clone -b v1.0 https://github.com/google/libprotobuf-mutator && \\\n    mkdir -p libprotobuf-mutator/build && \\\n    cd libprotobuf-mutator/build && \\\n    cmake .. -GNinja -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Debug && \\\n    ninja && \\\n    ninja install && \\\n    cd / && \\\n    rm -rf libprotobuf-mutator\n\n##### Prometheus CPP\nRUN git clone https://github.com/jupp0r/prometheus-cpp.git && \\\n    cd prometheus-cpp && \\\n    git checkout d8326b2bba945a435f299e7526c403d7a1f68c1f && \\\n    git submodule init && git submodule update && \\\n    mkdir _build && \\\n    cd _build/ && \\\n    cmake .. && \\\n    make -j\"$(nproc)\" && \\\n    make install && \\\n    rm -rf /prometheus-cpp\n\n# install magma dependencies\nRUN apt-get install -y --no-install-recommends \\\n        libtins-dev \\\n        magma-cpp-redis \\\n        magma-libfluid \\\n        python3-aioeventlet && rm -rf /var/lib/apt/lists/*;\n\n##### libgtpnl\n# review https://github.com/OPENAIRINTERFACE/openair-cn/blob/master/build/tools/build_helper.gtpnl\nRUN git clone https://git.osmocom.org/libgtpnl && \\\n    cd libgtpnl && \\\n    git reset --hard 345d687 && \\\n    autoreconf -fi && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j\"$(nproc)\" && \\\n    make install && \\\n    ldconfig && \\\n    cd / && \\\n    rm -rf libgtpnl\n\n##### Build and install libgtest and gmock\nRUN cd /usr/src/googletest && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DBUILD_SHARED_LIBS=ON .. && \\\n    echo \"Build gtest and gmock\" && \\\n    make && \\\n    echo \"Install gtest and gmock\" && \\\n    make install && \\\n    ldconfig -v\n\n###### Install Include What You Use for c/cpp header include fixup tooling\n# Tag 0.15 tracks Clang 11.0 per https://github.com/include-what-you-use/include-what-you-use/tags\nRUN git clone https://github.com/include-what-you-use/include-what-you-use && \\\n    cd include-what-you-use && \\\n    git checkout 0.15 && \\\n    cd .. && \\\n    mkdir build_iwyu && cd build_iwyu && \\\n    cmake -G \"Unix Makefiles\" -DCMAKE_PREFIX_PATH=/usr/lib/llvm-11 ../include-what-you-use/ && \\\n    make && \\\n    make install && \\\n    cd / && \\\n    rm -rf include-what-you-use && \\\n    rm -rf build_liwyu\n\n##### Go language server support for vscode\nRUN GOBIN=\"/usr/bin/\" go install -v golang.org/x/tools/gopls@v0.8.3\n\n#### Update shared library configuration\nRUN ldconfig -v\n\n\n##### Install Python requirements\n\n### create virtualenv\nARG PYTHON_VENV=/home/vscode/build/python\nENV PYTHON_VENV_EXECUTABLE=${PYTHON_VENV}/bin/python${PYTHON_VERSION}\n# PYTHON_VENV must by in sync with \"python.defaultInterpreterPath\", \"python.analysis.extraPaths\" and magtivate path in \"postCreateCommand\" in .devcontainer/devcontainer.json\n\nRUN virtualenv --system-site-packages --python=/usr/bin/python${PYTHON_VERSION} ${PYTHON_VENV}\nRUN ${PYTHON_VENV_EXECUTABLE} -m pip install --quiet --upgrade --no-cache-dir \"setuptools==49.6.0\"\n\n# add patch that is missing in jfrog version of aioeventlet (it only comes with 1 of 2 patches)\nCOPY lte/gateway/deploy/roles/magma/files/patches/aioeventlet_fd_exception.patch /tmp/\nRUN (patch -N -s -f /usr/local/lib/python${PYTHON_VERSION}/dist-packages/aioeventlet.py < /tmp/aioeventlet_fd_exception.patch) || ( true && echo \"skipping aioeventlet patch since it was already applied\") && \\\n    rm -rf /tmp/*\n\n### install eggs (lte, orc8r)\nCOPY /lte/gateway/python/ ${MAGMA_ROOT}/lte/gateway/python/\nWORKDIR ${MAGMA_ROOT}/lte/gateway/python/\nRUN ${PYTHON_VENV_EXECUTABLE} -m pip install --quiet --upgrade --no-build-isolation --no-cache-dir --verbose --editable .[dev] && \\\n    rm -rf lte.egg-info\n\nCOPY /orc8r/gateway/python/ ${MAGMA_ROOT}/orc8r/gateway/python/\nWORKDIR ${MAGMA_ROOT}/orc8r/gateway/python/\nRUN ${PYTHON_VENV_EXECUTABLE} -m pip install --quiet --upgrade --no-build-isolation --no-cache-dir --verbose --editable .[dev] && \\\n    rm -rf orc8r.egg-info\n\n### install formatter autopep8\nRUN ${PYTHON_VENV_EXECUTABLE} -m pip install --no-cache-dir autopep8\n\n#### protos\nARG GEN_DIR=lib/python${PYTHON_VERSION}/gen\n\nCOPY /protos/ ${MAGMA_ROOT}/protos/\nCOPY /lte/protos/ ${MAGMA_ROOT}/lte/protos/\nCOPY /orc8r/protos/ ${MAGMA_ROOT}/orc8r/protos/\nCOPY /feg/protos/ ${MAGMA_ROOT}/feg/protos/\nCOPY /dp/protos/ ${MAGMA_ROOT}/dp/protos/\nWORKDIR ${MAGMA_ROOT}\nRUN ${PYTHON_VENV_EXECUTABLE} -m pip install --no-cache-dir \"mypy-protobuf==2.4\" && \\\n    mkdir ${PYTHON_VENV}/${GEN_DIR} && \\\n    for PROTO_SRC in orc8r lte feg dp; \\\n    do \\\n    ${PYTHON_VENV_EXECUTABLE} protos/gen_protos.py ${PROTO_SRC}/protos ${MAGMA_ROOT},orc8r/protos/prometheus ${MAGMA_ROOT} ${PYTHON_VENV}/${GEN_DIR} && \\\n    ${PYTHON_VENV_EXECUTABLE} protos/gen_prometheus_proto.py ${MAGMA_ROOT} ${PYTHON_VENV}/${GEN_DIR}; \\\n    done && \\\n    echo \"${PYTHON_VENV}/${GEN_DIR}\" > ${PYTHON_VENV}/lib/python${PYTHON_VERSION}/site-packages/magma_gen.pth\n\n### swagger\nENV SWAGGER_CODEGEN_DIR=/var/tmp/codegen\nENV SWAGGER_CODEGEN_JAR=${SWAGGER_CODEGEN_DIR}/swagger-codegen-cli.jar\nARG CODEGEN_VERSION=2.2.3\n\nRUN mkdir -p ${SWAGGER_CODEGEN_DIR}; \\\n    wget --no-verbose https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/${CODEGEN_VERSION}/swagger-codegen-cli-${CODEGEN_VERSION}.jar -O ${SWAGGER_CODEGEN_JAR}\n\n# Copy swagger specs over to the build directory,\n# so that eventd can access them at runtime\nCOPY lte/swagger/*.yml ${PYTHON_VENV}/${GEN_DIR}/lte/swagger/specs/\nCOPY orc8r/swagger/*.yml ${PYTHON_VENV}/${GEN_DIR}/orc8r/swagger/specs/\nRUN for SWAGGER_SRC in lte orc8r; \\\n    do \\\n    # Generate the files\n    ls ${PYTHON_VENV}/${GEN_DIR}/${SWAGGER_SRC}/swagger/specs/*.yml \\\n    | xargs -t -I% /usr/bin/java -jar ${SWAGGER_CODEGEN_JAR} generate \\\n    -i % \\\n    -o ${PYTHON_VENV}/${GEN_DIR}/${SWAGGER_SRC}/swagger \\\n    -l python \\\n    -D models && \\\n    # Flatten and clean up directory\n    mv ${PYTHON_VENV}/${GEN_DIR}/${SWAGGER_SRC}/swagger/swagger_client/* ${PYTHON_VENV}/${GEN_DIR}/${SWAGGER_SRC}/swagger/ && \\\n    rmdir ${PYTHON_VENV}/${GEN_DIR}/${SWAGGER_SRC}/swagger/swagger_client && \\\n    rm -r ${PYTHON_VENV}/${GEN_DIR}/${SWAGGER_SRC}/swagger/test; \\\n    done\n\nWORKDIR $MAGMA_ROOT\n"
}