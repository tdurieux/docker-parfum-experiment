{
  "startTime": 1674255806865,
  "endTime": 1674255807723,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-slim-buster\nARG ENV=prod\nARG TERRAFORM_VERSION=\"0.15.5\"\nARG KUBECTL_VERSION=\"1.20.2\"\nARG ANSIBLE_VERSION=\"3.0.0\"\n\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n            git \\\n            wget \\\n            unzip \\\n            vim \\\n            jq \\\n            gcc \\\n            procps && \\\n    apt-get clean -y && \\\n    apt-get autoclean -y && \\\n    apt-get autoremove -y && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    rm -rf /var/cache/apt/archives/*\n\nRUN pip3 install --no-cache-dir \\\n                        boto \\\n                        boto3 \\\n                        kubernetes \\\n                        ansible==${ANSIBLE_VERSION} \\\n                        prettytable \\\n                        requests \\\n                        docker \\\n                        pyOpenSSL \\\n                        unittest2 \\\n                        colorama \\\n                        dataclasses-json \\\n                        pytest\n\nWORKDIR /root/download\n\n# Install aws cli\nRUN wget \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -O \"/root/download/awscli2.zip\" && \\\n    unzip awscli2.zip && \\\n    ./aws/install\n\n# Install aws iam authenticator\nRUN wget https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws-iam-authenticator -O /usr/local/bin/aws-iam-authenticator && \\\n    chmod +x /usr/local/bin/aws-iam-authenticator\n\n# Install helm\nARG HELM_VERSION=\"3.5.1\"\nRUN HELM_TARBALL=\"helm-v${HELM_VERSION}-linux-amd64.tar.gz\" \\\n && wget --no-verbose https://get.helm.sh/${HELM_TARBALL} \\\n && tar --strip-components=1 -C /usr/local/bin -xzf ${HELM_TARBALL} linux-amd64/helm \\\n && rm ${HELM_TARBALL}\n\n# Install terraform\nRUN wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform\\_${TERRAFORM_VERSION}\\_linux_amd64.zip && \\\n    unzip ./terraform\\_${TERRAFORM_VERSION}\\_linux_amd64.zip -d terraform14_cli && \\\n    cp /root/download/terraform14_cli/terraform /usr/local/bin/terraform && \\\n    wget https://storage.googleapis.com/kubernetes-release/release/v$KUBECTL_VERSION/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl && \\\n    chmod +x /usr/local/bin/kubectl && \\\n    rm -rf /root/download/*\n\n# Install go if we are building testframework image\nARG GOLANG_VERSION=\"1.18.3\"\nRUN if [ \"$ENV\" = \"testframework\" ]; \\\n    then \\\n        GO_TARBALL=\"go${GOLANG_VERSION}.linux-amd64.tar.gz\" \\\n     && wget --no-verbose https://artifactory.magmacore.org/artifactory/generic/${GO_TARBALL} \\\n     && tar --strip-components=2 -C /usr/local/bin -xzf ${GO_TARBALL} go/bin/go go/bin/gofmt \\\n     && rm ${GO_TARBALL}; \\\n    fi\n\nENV GO111MODULE=on\nENV GOPROXY=https://proxy.golang.org\nENV ANSIBLE_CONFIG=/root/.ansible.cfg\n\n# Uncomment to install avalanche\n# WORKDIR /root/download\n# RUN if [ \"$ENV\" = \"testframework\" ] ; then go get -v github.com/open-fresh/avalanche/cmd/... && \\\n#     mv /root/go/bin/cmd /usr/local/bin/avalanche && \\\n#     chmod +x /usr/local/bin/avalanche ; fi\n\nCOPY root/ /root/\n\n# Install the orc8r cli (orcl)\nWORKDIR /root/scripts\nRUN pip3 install --no-cache-dir .\n\n# Set these environment variables to ensure aws configuration remains\n# in the deployment directory even when container is removed\nENV AWS_CONFIG_FILE=/root/project/.aws/config\nENV AWS_SHARED_CREDENTIALS_FILE=/root/project/.aws/credentials\nENV AWS_DEFAULT_OUTPUT=json\n\nWORKDIR /root/project\nCMD [\"/bin/bash\"]\n"
}