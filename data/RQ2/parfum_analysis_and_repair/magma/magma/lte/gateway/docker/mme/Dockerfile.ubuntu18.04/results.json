{
  "startTime": 1674248608255,
  "endTime": 1674248610123,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 271,
        "lineEnd": 276,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "################################################################\n# Builder Image (can also be used as developer's image)\n################################################################\nFROM ubuntu:bionic as magma-mme-builder\n\nARG GIT_PROXY\nARG FEATURES=mme_oai\nENV MAGMA_ROOT=/magma\nENV BUILD_TYPE=RelWithDebInfo\nENV C_BUILD=/build/c\nENV TZ=Europe/Paris\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN mkdir -p $C_BUILD\n\nRUN [ \"/bin/bash\", \"-c\", \"echo \\\"Install general purpose packages\\\" && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y gnupg wget software-properties-common autoconf automake \\\n    libtool curl make g++ unzip git build-essential autoconf libtool pkg-config \\\n    gcc-7 g++-7 apt-transport-https ca-certificates apt-utils vim redis-server tzdata \\\n    libssl-dev ninja-build golang python2.7 automake perl libgmp3-dev clang-format-7 && \\\n    echo \\\"Configure C/C++ compiler v7.5 as primary\\\" && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 20 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 20 && \\\n    echo \\\"Add required package repository for CMake\\\" && \\\n    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add - && \\\n    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \\\n    ln -s /usr/bin/clang-format-7 /usr/bin/clang-format\" ]\n\nRUN echo \"Install 3rd party dependencies\" && \\\n    apt-get update && \\\n    echo \"Install CMake\" && \\\n    apt-get -y --no-install-recommends install cmake && \\\n    echo \"Install FMT lib requirements\" && \\\n    apt-get -y --no-install-recommends install libunwind8-dev libelf-dev libdwarf-dev bzip2 && \\\n    echo \"Install FreeDiameter requirements\" && \\\n    apt-get -y --no-install-recommends install libsctp1 libsctp-dev libgcrypt-dev \\\n    bison flex libidn11-dev && \\\n    echo \"Install libgtpnl requirements\" && \\\n    apt-get -y --no-install-recommends install libmnl-dev && \\\n    echo \"Install Nettle requirements\" && \\\n    apt-get install --no-install-recommends -y libgoogle-glog-dev libconfig-dev libxml2-dev \\\n    libyaml-cpp-dev nlohmann-json-dev && \\\n    echo \"Install Prometheus requirements\" && \\\n    wget --quiet https://dl.influxdata.com/telegraf/releases/telegraf_1.18.2-1_amd64.deb && \\\n    dpkg -i telegraf_1.18.2-1_amd64.deb && \\\n    echo \"Install ZeroMQ\" && \\\n    apt-get install --no-install-recommends -y libczmq-dev=4.1.0-2 && \\\n    echo \"Install libtins\" && \\\n    apt-get install --no-install-recommends -y libtins-dev && \\\n    ln -s /usr/bin/python2.7 /usr/local/bin/python && rm -rf /var/lib/apt/lists/*;\n\nRUN [\"/bin/bash\", \"-c\", \"if [[ -v GIT_PROXY ]]; then git config --global http.proxy $GIT_PROXY; fi\"]\n\n##### NETTLE\nRUN wget --quiet https://ftp.gnu.org/gnu/nettle/nettle-2.5.tar.gz && \\\n    tar -xf nettle-2.5.tar.gz && \\\n    cd nettle-2.5 && \\\n    mkdir build && \\\n    cd build/ && \\\n    ../configure --disable-openssl --enable-shared --libdir=/usr/local/lib && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig -v && \\\n    cd / && \\\n    wget --quiet https://www.gnupg.org/ftp/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz && \\\n    tar xf gnutls-3.1.23.tar.xz && \\\n    cd gnutls-3.1.23 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-libnettle-prefix=/usr/local && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig -v && rm nettle-2.5.tar.gz\n\n##### GRPC and it's dependencies\nRUN git clone --recurse-submodules -b v1.15.0 https://github.com/grpc/grpc && \\\n    echo \"Install c-ares\" && \\\n    cd grpc && \\\n    cd third_party/cares/cares && \\\n    git fetch origin && \\\n    git checkout cares-1_13_0 && \\\n    mkdir -p cmake/build && \\\n    cd cmake/build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release ../.. && \\\n    make -j`nproc` && \\\n    make install && \\\n    cd ../../../../.. && \\\n    rm -rf third_party/cares/cares && \\\n    echo \"Install zlib\" && \\\n    cd third_party/zlib && \\\n    mkdir -p cmake/build && \\\n    cd cmake/build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release ../.. && \\\n    make -j`nproc` && \\\n    make install && \\\n    cd ../../../.. && \\\n    rm -rf third_party/zlib && \\\n    echo \"Install protobuf\" && \\\n    cd third_party/protobuf && \\\n    git submodule update --init --recursive  && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install && \\\n    cd ../.. && \\\n    rm -rf third_party/protobuf && \\\n    ldconfig && \\\n    echo \"Install GRPC\" && \\\n    mkdir -p cmake/build && \\\n    cd cmake/build && \\\n    cmake \\\n        -DgRPC_INSTALL=ON \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DgRPC_BUILD_TESTS=OFF \\\n        -DgRPC_PROTOBUF_PROVIDER=package \\\n        -DgRPC_ZLIB_PROVIDER=package \\\n        -DgRPC_CARES_PROVIDER=package \\\n        -DgRPC_SSL_PROVIDER=package \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        ../.. && \\\n    make -j`nproc` && \\\n    make install\n\n##### Prometheus CPP\nRUN git clone https://github.com/jupp0r/prometheus-cpp.git && \\\n    cd prometheus-cpp && \\\n    git checkout d8326b2bba945a435f299e7526c403d7a1f68c1f && \\\n    git submodule init && git submodule update && \\\n    mkdir _build && \\\n    cd _build/ && \\\n    cmake .. && \\\n    make -j`nproc` && \\\n    make install\n\n##### Redis CPP\nRUN git clone https://github.com/cpp-redis/cpp_redis.git && \\\n    cd cpp_redis && \\\n    git checkout bbe38a7f83de943ffcc90271092d689ae02b3489 && \\\n    git submodule init && git submodule update && \\\n    mkdir build && cd build && \\\n    cmake .. -DCMAKE_BUILD_TYPE=Release && \\\n    make -j`nproc` && \\\n    make install\n\n##### liblfds\n# https://www.liblfds.org/mediawiki/index.php?title=r7.1.0:Building_Guide_(liblfds)\nRUN git clone https://github.com/liblfds/liblfds.git && \\\n    cd liblfds/liblfds/liblfds7.1.0/liblfds710/build/gcc_gnumake/ && \\\n    make -j`nproc` && \\\n    make ar_install\n\n##### libgtpnl\n# review https://github.com/OPENAIRINTERFACE/openair-cn/blob/master/build/tools/build_helper.gtpnl\nRUN git clone https://git.osmocom.org/libgtpnl && \\\n    cd libgtpnl && \\\n    git reset --hard 345d687 && \\\n    autoreconf -fi && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig\n\n#####  asn1c\nRUN git clone https://gitlab.eurecom.fr/oai/asn1c.git && \\\n    cd asn1c && \\\n    git checkout f12568d617dbf48497588f8e227d70388fa217c9 && \\\n    autoreconf -iv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig\n\n\n# Add Converged MME sources to the container\nCOPY ./ $MAGMA_ROOT\n\n##### FreeDiameter\nRUN git clone https://github.com/OPENAIRINTERFACE/opencord.org.freeDiameter.git freediameter && \\\n    cd freediameter && \\\n    patch -p1 < $MAGMA_ROOT/lte/gateway/c/core/oai/patches/0001-opencoord.org.freeDiameter.patch && \\\n    patch -p1 < $MAGMA_ROOT/lte/gateway/c/core/oai/patches/0002-opencoord.org.freeDiameter.patch && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../ && \\\n    awk '{if (/^DISABLE_SCTP/) gsub(/OFF/, \"ON\"); print}' CMakeCache.txt > tmp && mv tmp CMakeCache.txt && \\\n    make -j`nproc` && \\\n    make install\n\n# Build MME executables\nRUN ldconfig && \\\n    cd $MAGMA_ROOT/lte/gateway && \\\n    echo $FEATURES && \\\n    make build_oai && \\\n    make build_sctpd && \\\n    cp $C_BUILD/core/oai/oai_mme/mme $C_BUILD/core/oai/oai_mme/oai_mme && \\\n    ldd $C_BUILD/core/oai/oai_mme/oai_mme && \\\n    ldd $C_BUILD/sctpd/src/sctpd\n\n# Prepare config file\nRUN apt-get install --no-install-recommends -y python3-pip && \\\n    pip3 install --no-cache-dir jinja2-cli && \\\n    cd $MAGMA_ROOT/lte/gateway/docker/mme/configs/ && \\\n    echo '{ \\n' \\\n    '\"realm\": \"magma.com\",\t \\n'\\\n    '\"use_stateless\": \"\", \\n'\\\n    '\"conf_dir\": \"/magma-mme/etc\", \\n'\\\n    '\"hss_hostname\": \"hss\", \\n'\\\n    '\"mcc\": \"001\", \\n'\\\n    '\"mnc\": \"01\", \\n'\\\n    '\"mmeGid\": \"1\", \\n'\\\n    '\"mmeCode\": \"1\", \\n'\\\n    '\"tac\": \"1\", \\n'\\\n    '\"non_eps_service_control\": \"OFF\", \\n'\\\n    '\"csfb_mcc\": \"001\", \\n'\\\n    '\"csfb_mnc\": \"01\", \\n'\\\n    '\"lac\": \"1\", \\n'\\\n    '\"s1ap_iface_name\": \"eth0\", \\n'\\\n    '\"s1ap_ip\": \"192.168.61.133/24\", \\n'\\\n    '\"s11_iface_name\": \"eth0\", \\n'\\\n    '\"mme_s11_ip\": \"192.168.61.133/24\", \\n'\\\n    '\"oai_log_level\": \"INFO\", \\n'\\\n    '\"remote_sgw_ip\": \"192.168.61.130\", \\n'\\\n    '\"attachedEnodebTacs\": [], \\n'\\\n    '\"attached_enodeb_tacs\": [1] }' \\\n    > mme_vars.json && \\\n    jinja2 ../../../configs/templates/mme.conf.template mme_vars.json --format=json  > mme.conf && rm -rf /var/lib/apt/lists/*;\n\n# For developer's to have the same run env as in target image to debug\n# Copy the configuration file templates and mean to modify/generate certificates\nWORKDIR /magma-mme/bin\nRUN cp $C_BUILD/core/oai/oai_mme/mme oai_mme\nRUN cp $C_BUILD/sctpd/src/sctpd .\nWORKDIR /magma-mme/etc\nRUN cp $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme.conf .\nRUN cp $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme_fd.conf .\n\n# Create running dirs\nWORKDIR /var/opt/magma/configs\n# Adding mme configuration for stateful run\nRUN echo \"use_stateless: false\" > mme.yml\n\nWORKDIR /etc/magma\nRUN cp $MAGMA_ROOT/lte/gateway/configs/control_proxy.yml .\nRUN cp $MAGMA_ROOT/lte/gateway/configs/redis.yml .\nRUN cp $MAGMA_ROOT/lte/gateway/configs/service_registry.yml .\n\nWORKDIR /magma-mme/scripts\nRUN cp $MAGMA_ROOT/lte/gateway/c/core/oai/test/check_mme_s6a_certificate . && \\\n    sed -i -e \"s@^.*THIS_SCRIPT_PATH@#@\" \\\n           -e \"s@\\$SUDO@@\" \\\n           -e \"s@echo_error@echo@\" \\\n           -e \"s@echo_success@echo@\" \\\n           -e \"s@echo_warning@echo@\" check_mme_s6a_certificate\n\nWORKDIR /magma-mme\nRUN openssl rand -out /root/.rnd 128\n\n################################################################\n# Target Image\n################################################################\nFROM ubuntu:bionic as magma-mme\n\nENV MAGMA_ROOT=/magma\nENV C_BUILD=/build/c\n\n# Install a few tools (may not be necessary later on)\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=Europe/Paris\n\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install --yes \\\n      psmisc \\\n      openssl \\\n      net-tools \\\n      tshark \\\n      tzdata \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Copy pre-built shared object files\nCOPY --from=magma-mme-builder \\\n    /usr/lib/x86_64-linux-gnu/liblsan.so.0 \\\n    /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 \\\n    /usr/lib/x86_64-linux-gnu/libconfig.so.9 \\\n    /usr/lib/x86_64-linux-gnu/libglog.so.0  \\\n    /usr/lib/x86_64-linux-gnu/libyaml-cpp.so.0.5 \\\n    /usr/lib/x86_64-linux-gnu/libsctp.so.1 \\\n    /usr/lib/x86_64-linux-gnu/libunwind.so.8 \\\n    /usr/lib/x86_64-linux-gnu/libssl.so.1.1 \\\n    /usr/lib/x86_64-linux-gnu/libczmq.so.4.1.0 \\\n    /usr/lib/x86_64-linux-gnu/libzmq.so.5.1.5 \\\n    /usr/lib/x86_64-linux-gnu/libsodium.so.23.1.0 \\\n    /usr/lib/x86_64-linux-gnu/libpgm-5.2.so.0.0.122 \\\n    /usr/lib/x86_64-linux-gnu/libnorm.so.1.0.0 \\\n    /lib/x86_64-linux-gnu/libidn.so.11 \\\n    /usr/lib/x86_64-linux-gnu/\n\nCOPY --from=magma-mme-builder \\\n    /usr/local/lib/libfdproto.so.6 \\\n    /usr/local/lib/libfdcore.so.6 \\\n    /usr/local/lib/libgrpc++.so \\\n    /usr/local/lib/libprotobuf.so.17 \\\n    /usr/local/lib/libgrpc.so \\\n    /usr/local/lib/libgpr.so \\\n    /usr/local/lib/libgflags.so.2.2 \\\n    /usr/local/lib/libcares.so.2 \\\n    /usr/local/lib/libaddress_sorting.so \\\n    /usr/local/lib/libnettle.so.4 \\\n    /usr/local/lib/libgnutls.so.28 \\\n    /usr/local/lib/libhogweed.so.2 \\\n    /usr/local/lib/\n\n# Copy all fdx files from freeDiameter installation\nWORKDIR /usr/local/lib/freeDiameter\nCOPY --from=magma-mme-builder /usr/local/lib/freeDiameter/* ./\n\n# Refresh library cache\nRUN ldconfig\n\n# Copy pre-built binaries for MME and SCTPD\nWORKDIR /magma-mme/bin\nCOPY --from=magma-mme-builder \\\n    $C_BUILD/core/oai/oai_mme/oai_mme \\\n    $C_BUILD/sctpd/src/sctpd \\\n    ./\n\n# Copy the configuration file templates and mean to modify/generate certificates\nWORKDIR /magma-mme/etc\nCOPY --from=magma-mme-builder \\\n    $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme.conf \\\n    $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme_fd.conf \\\n    ./\n\n# Create running dirs\nWORKDIR /var/opt/magma/configs\n# Adding mme configuration for stateful run\nRUN echo \"use_stateless: false\" > mme.yml && \\\n    openssl rand -out /root/.rnd 128 && \\\n    ldd /magma-mme/bin/oai_mme && \\\n    ldd /magma-mme/bin/sctpd\n\nWORKDIR /etc/magma\nCOPY --from=magma-mme-builder \\\n    $MAGMA_ROOT/lte/gateway/configs/control_proxy.yml \\\n    $MAGMA_ROOT/lte/gateway/configs/redis.yml \\\n    $MAGMA_ROOT/lte/gateway/configs/service_registry.yml \\\n    $MAGMA_ROOT/lte/gateway/configs/sctpd.yml \\\n    ./\n\n# Scripts to re-generate certificates\nWORKDIR /magma-mme/scripts\nCOPY --from=magma-mme-builder $MAGMA_ROOT/lte/gateway/c/core/oai/test/check_mme_s6a_certificate .\nRUN sed -i -e \"s@^.*THIS_SCRIPT_PATH@#@\" \\\n           -e \"s@\\$SUDO@@\" \\\n           -e \"s@echo_error@echo@\" \\\n           -e \"s@echo_success@echo@\" \\\n           -e \"s@echo_warning@echo@\" check_mme_s6a_certificate\n\nWORKDIR /magma-mme\n\n# use this label for CI purpose\nLABEL use-separate-hss-realm=\"true\"\n\n# expose ports\nEXPOSE 3870/tcp 5870/tcp 2123/udp\n\n# For the moment, let have a dummy command\nCMD [\"sleep\", \"infinity\"]\n"
}