{
  "startTime": 1674255183667,
  "endTime": 1674255185959,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 358,
        "lineEnd": 358,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 239,
        "lineEnd": 239,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 257,
        "lineEnd": 257,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 267,
        "lineEnd": 267,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 284,
        "lineEnd": 284,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 331,
        "lineEnd": 331,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 338,
        "lineEnd": 338,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 5,
        "columnEnd": 90
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 23,
        "lineEnd": 46,
        "columnStart": 5,
        "columnEnd": 14
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 50,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 102,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 357,
        "lineEnd": 357,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 226,
        "lineEnd": 226,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 237,
        "lineEnd": 237,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################\n# Builder Image (can also be used as developer's image)\n################################################################\nFROM registry.access.redhat.com/ubi8/ubi:latest as magma-mme-builder\n\nARG GIT_PROXY\nARG FEATURES=mme_oai\nENV MAGMA_ROOT=/magma\nENV BUILD_TYPE=RelWithDebInfo\nENV C_BUILD=/build/c\nENV TZ=Europe/Paris\n# Copy RHEL certificates for builder image\nCOPY tmp/entitlement/*.pem /etc/pki/entitlement\nCOPY tmp/ca/redhat-uep.pem /etc/rhsm/ca\n\nRUN mkdir -p $C_BUILD\n\nRUN rm /etc/rhsm-host && \\\n    yum repolist --disablerepo=* && \\\n    subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms \\\n  && yum update -y \\\n  && yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n  && yum install dnf-plugins-core -y \\\n  && yum install -y --enablerepo=\"codeready-builder-for-rhel-8-x86_64-rpms\" \\\n    psmisc \\\n    git \\\n    python3 \\\n    python3-setuptools \\\n    python3-pip \\\n    libselinux-python3 \\\n    vim \\\n    gcc \\\n    cmake3 \\\n    automake \\\n    autoconf \\\n    tmux \\\n    ninja-build \\\n    json-devel \\\n    libxml2-devel \\\n    libconfig-devel \\\n    czmq-devel \\\n    libasan \\\n    liblsan \\\n    libubsan \\\n    protobuf-compiler \\\n    ruby \\\n    ruby-devel \\\n  && ln -s /usr/bin/python3 /usr/bin/python \\\n  && ln -s /usr/bin/cmake3 /usr/bin/cmake && rm -rf /var/cache/yum\n\nRUN yum install -y \\\n    gnupg \\\n    wget \\\n    autoconf \\\n    automake \\\n    make \\\n    bzip2 \\\n    libtool \\\n    curl \\\n    make \\\n    unzip \\\n    git \\\n    git-clang-format \\\n    clang-tools-extra \\\n    ninja-build \\\n    pkg-config \\\n    gcc \\\n    gcc-c++ \\\n    ca-certificates \\\n    vim \\\n    openssl-devel \\\n    golang \\\n    python2 \\\n    perl \\\n    # Install FMT lib requirements\n    elfutils-libelf-devel-static \\\n    libdwarf-devel \\\n    # Install double-conversion and unwind requirements\n    boost \\\n    boost-devel \\\n    glog-devel \\\n    binutils-devel \\\n    # Install FreeDiameter requirements\n    lksctp-tools \\\n    lksctp-tools-devel \\\n    bison \\\n    flex \\\n    patch \\\n    libidn-devel \\\n    libgcrypt-devel \\\n    # Install libgtpnl requirements\n    libmnl-devel \\\n    # Install Nettle requirements\n    libconfig-devel \\\n    libxml2-devel \\\n    libyaml-devel \\\n    gmp-devel \\\n    xz \\\n    # Install czmq requirements\n    uuid-devel \\\n  && ln -s /usr/bin/python2.7 /usr/local/bin/python && rm -rf /var/cache/yum\n\nRUN yum install -y \\\n\n    diffutils \\\n    file \\\n\n    gdb \\\n    iputils \\\n    net-tools \\\n    valgrind \\\n    tcpdump \\\n    openssh-server \\\n    tree && rm -rf /var/cache/yum\n\nRUN yum install -y \\\n    # redis is temporary --> has to be deployed w/ an other pod/container\n    redis \\\n  && yum clean all -y \\\n  && rm -rf /var/cache/yum\n\n# Add Converged MME sources to the container\nWORKDIR /patches\nCOPY  lte/gateway/c/core/oai/patches/0001-opencoord.org.freeDiameter.patch .\nCOPY  lte/gateway/c/core/oai/patches/0002-opencoord.org.freeDiameter.patch .\nCOPY  lte/gateway/c/core/oai/patches/libzmq-strncpy.patch .\nCOPY  lte/gateway/c/core/oai/patches/czmq-strncat.patch .\n\n# In some network environments, GIT proxy is required\nRUN /bin/bash -c \"if [[ -v GIT_PROXY ]]; then git config --global http.proxy $GIT_PROXY; fi\"\n\n# All works will be done from root of file system\nWORKDIR /\n\n# git clone may fail on our OC cluster (could not resolve github.com, other sites\n# may happen), we may have to tweak some limits...\n# Prefer to fail as soon as possible if it has to happen\nRUN  git clone --recurse-submodules -b v1.15.0 https://github.com/grpc/grpc && \\\n     git clone https://github.com/jupp0r/prometheus-cpp.git && \\\n     git clone https://github.com/cpp-redis/cpp_redis.git && \\\n     wget https://ftp.gnu.org/gnu/nettle/nettle-2.5.tar.gz && \\\n     wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz && \\\n     git clone https://github.com/liblfds/liblfds.git && \\\n     git clone https://git.osmocom.org/libgtpnl && \\\n     git clone https://github.com/OPENAIRINTERFACE/asn1c.git && \\\n     git clone https://github.com/fmtlib/fmt.git && \\\n     git clone --depth=1 --branch=v3.1.5 https://github.com/google/double-conversion.git && \\\n     git clone --depth=1 --branch=v1.2.1 https://github.com/libunwind/libunwind.git && \\\n     git clone https://github.com/OPENAIRINTERFACE/opencord.org.freeDiameter.git freediameter && \\\n     git clone https://github.com/jbeder/yaml-cpp.git && \\\n     git clone https://github.com/nlohmann/json.git && \\\n     git clone --branch=v4.2.3 https://github.com/zeromq/libzmq.git\n\n##### GRPC and it's dependencies\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/local-lib.conf && \\\n    echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local-lib.conf && \\\n    # Moved git clone --recurse-submodules -b v1.15.0 https://github.com/grpc/grpc && \\\n    echo \"Install c-ares\" && \\\n    cd grpc && \\\n    cd third_party/cares/cares && \\\n    git fetch origin && \\\n    git checkout cares-1_13_0 && \\\n    mkdir -p cmake/build && \\\n    cd cmake/build && \\\n    cmake3 -DCMAKE_BUILD_TYPE=Release ../.. && \\\n    make -j`nproc` && \\\n    make install && \\\n    cd ../../../../.. && \\\n    rm -rf third_party/cares/cares && \\\n    echo \"Install zlib\" && \\\n    cd third_party/zlib && \\\n    mkdir -p cmake/build && \\\n    cd cmake/build && \\\n    cmake3 -DCMAKE_BUILD_TYPE=Release ../.. && \\\n    make -j`nproc` && \\\n    make install && \\\n    cd ../../../.. && \\\n    rm -rf third_party/zlib && \\\n    echo \"Install protobuf\" && \\\n    cd third_party/protobuf && \\\n    git submodule update --init --recursive  && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install && \\\n    cd ../.. && \\\n    rm -rf third_party/protobuf && \\\n    ldconfig && \\\n    echo \"Install GRPC\" && \\\n    mkdir -p cmake/build && \\\n    cd cmake/build && \\\n    cmake3 \\\n        -DgRPC_INSTALL=ON \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DgRPC_BUILD_TESTS=OFF \\\n        -DgRPC_PROTOBUF_PROVIDER=package \\\n        -DgRPC_ZLIB_PROVIDER=package \\\n        -DgRPC_CARES_PROVIDER=package \\\n        -DgRPC_SSL_PROVIDER=package \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        ../.. && \\\n    make -j`nproc` && \\\n    make install\n\n##### Prometheus CPP\nRUN cd prometheus-cpp && \\\n    # Moved git clone https://github.com/jupp0r/prometheus-cpp.git && \\\n    git checkout d8326b2bba945a435f299e7526c403d7a1f68c1f && \\\n    git submodule init && git submodule update && \\\n    mkdir _build && \\\n    cd _build/ && \\\n    cmake3 .. && \\\n    make -j`nproc` && \\\n    make install\n\n##### Redis CPP\nRUN cd cpp_redis && \\\n    # Moved git clone https://github.com/cpp-redis/cpp_redis.git && \\\n    git checkout bbe38a7f83de943ffcc90271092d689ae02b3489 && \\\n    git submodule init && git submodule update && \\\n    mkdir build && cd build && \\\n    cmake3 .. -DCMAKE_BUILD_TYPE=Release && \\\n    make -j`nproc` && \\\n    make install\n\n##### NETTLE / gnutls\nRUN tar -xf nettle-2.5.tar.gz && \\\n    # Moved wget https://ftp.gnu.org/gnu/nettle/nettle-2.5.tar.gz && \\\n    cd nettle-2.5 && \\\n    mkdir build && \\\n    cd build/ && \\\n    ../configure --libdir=/usr/local/lib && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig -v && \\\n    cd / && \\\n    # Moved wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz && \\\n    tar xf gnutls-3.1.23.tar.xz && \\\n    cd gnutls-3.1.23 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-libnettle-prefix=/usr/local && \\\n    sed -i -e \"s#elif 0#elif 1#\" gl/fseterr.c && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig -v && rm nettle-2.5.tar.gz\n\n##### liblfds\n# https://www.liblfds.org/mediawiki/index.php?title=r7.1.0:Building_Guide_(liblfds)\nRUN cd /liblfds/liblfds/liblfds7.1.0/liblfds710/build/gcc_gnumake/ && \\\n    make -j`nproc` && \\\n    make ar_install\n\n##### libgtpnl\n# review https://github.com/OPENAIRINTERFACE/openair-cn/blob/master/build/tools/build_helper.gtpnl\nRUN cd libgtpnl && \\\n    # Moved git clone https://git.osmocom.org/libgtpnl && \\\n    git reset --hard 345d687 && \\\n    autoreconf -fi && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig\n\n#####  asn1c\nRUN cd asn1c && \\\n    # Moved git clone https://github.com/OPENAIRINTERFACE/asn1c.git && \\\n    git checkout f12568d617dbf48497588f8e227d70388fa217c9 && \\\n    autoreconf -iv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install\n\n##### Unwind and Double-Conversion\nRUN echo \"Install Double Conversion\" && \\\n    # Moved git clone --depth=1 --branch=v3.1.5 https://github.com/google/double-conversion.git && \\\n    cd double-conversion && \\\n    cmake3 -DBUILD_SHARED_LIBS=ON . && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig && \\\n    cd / && \\\n    echo \"Install Unwind\" && \\\n    # Moved git clone --depth=1 --branch=v1.2.1 https://github.com/libunwind/libunwind.git && \\\n    cd libunwind && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install && \\\n    ldconfig\n\n##### FreeDiameter\nRUN cd freediameter && \\\n    # Moved git clone https://github.com/OPENAIRINTERFACE/opencord.org.freeDiameter.git freediameter && \\\n    git pull origin master && \\\n    git log -n1 && \\\n    echo \"Patching dict_S6as6d\" && \\\n    patch -p1 < /patches/0001-opencoord.org.freeDiameter.patch && \\\n    patch -p1 < /patches/0002-opencoord.org.freeDiameter.patch && \\\n    mkdir build && \\\n    cd build && \\\n    cmake3 ../ && \\\n    grep DISABLE_SCTP CMakeCache.txt && \\\n    awk '{if (/^DISABLE_SCTP/) gsub(/OFF/, \"ON\"); print}' CMakeCache.txt > tmp && mv tmp CMakeCache.txt && \\\n    grep DISABLE_SCTP CMakeCache.txt && \\\n    make -j`nproc` && \\\n    make install\n\n##### lib nlohmann json\nRUN cd json && \\\n    # Moved git clone https://github.com/nlohmann/json.git && \\\n    git log -n1 && \\\n    mkdir _build && \\\n    cd _build && \\\n    cmake3 -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release .. && \\\n    make -j`nproc` && \\\n    make install\n\n##### lib yaml-cpp\nRUN cd yaml-cpp && \\\n    # Moved git clone https://github.com/jbeder/yaml-cpp.git && \\\n    git checkout -f yaml-cpp-0.6.3 && \\\n    mkdir _build && \\\n    cd _build && \\\n    cmake3 -DYAML_BUILD_SHARED_LIBS=ON .. && \\\n    make -j`nproc` && \\\n    make install\n\n##### lib czmq\nRUN cd libzmq && \\\n    # Moved git clone --branch=v4.2.3 https://github.com/zeromq/libzmq.git && \\\n    patch -p1 < /patches/libzmq-strncpy.patch && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install && \\\n    git clone --branch=v4.1.0 https://github.com/zeromq/czmq.git && \\\n    cd czmq && \\\n    patch -p1 < /patches/czmq-strncat.patch && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j`nproc` && \\\n    make install\n\n# Add Converged MME sources to the container\nCOPY ./ $MAGMA_ROOT\n\n# Build MME executables\nRUN ldconfig --verbose && \\\n    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig/ && \\\n    cd $MAGMA_ROOT/lte/gateway && \\\n    echo $FEATURES && \\\n    make build_oai && \\\n    make build_sctpd && \\\n    cp $C_BUILD/core/oai/oai_mme/mme $C_BUILD/core/oai/oai_mme/oai_mme && \\\n    ldd $C_BUILD/core/oai/oai_mme/oai_mme && \\\n    ldd $C_BUILD/sctpd/src/sctpd\n\n# Prepare config file\nRUN yum install -y python3-pip && \\\n    pip3 install --no-cache-dir jinja2-cli && \\\n    cd $MAGMA_ROOT/lte/gateway/docker/mme/configs/ && \\\n    echo -e '{ \\n' \\\n    '\"realm\": \"magma.com\",\t \\n'\\\n    '\"use_stateless\": \"\", \\n'\\\n    '\"conf_dir\": \"/magma-mme/etc\", \\n'\\\n    '\"hss_hostname\": \"hss\", \\n'\\\n    '\"mcc\": \"001\", \\n'\\\n    '\"mnc\": \"01\", \\n'\\\n    '\"mmeGid\": \"1\", \\n'\\\n    '\"mmeCode\": \"1\", \\n'\\\n    '\"tac\": \"1\", \\n'\\\n    '\"non_eps_service_control\": \"OFF\", \\n'\\\n    '\"csfb_mcc\": \"001\", \\n'\\\n    '\"csfb_mnc\": \"01\", \\n'\\\n    '\"lac\": \"1\", \\n'\\\n    '\"s1ap_iface_name\": \"eth0\", \\n'\\\n    '\"s1ap_ip\": \"192.168.61.133/24\", \\n'\\\n    '\"s11_iface_name\": \"eth0\", \\n'\\\n    '\"mme_s11_ip\": \"192.168.61.133/24\", \\n'\\\n    '\"oai_log_level\": \"INFO\", \\n'\\\n    '\"remote_sgw_ip\": \"192.168.61.130\", \\n'\\\n    '\"attachedEnodebTacs\": [], \\n'\\\n    '\"attached_enodeb_tacs\": [1] }' \\\n    > mme_vars.json && \\\n    jinja2 ../../../configs/templates/mme.conf.template mme_vars.json --format=json  > mme.conf && rm -rf /var/cache/yum\n\n# For developer's to have the same run env as in target image to debug\n# Copy the configuration file templates and mean to modify/generate certificates\nWORKDIR /magma-mme/bin\nRUN cp $C_BUILD/core/oai/oai_mme/mme oai_mme\nRUN cp $C_BUILD/sctpd/src/sctpd .\nWORKDIR /magma-mme/etc\nRUN cp $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme.conf .\nRUN cp $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme_fd.conf .\n\n# Create running dirs\nWORKDIR /var/opt/magma/configs\n# Adding mme configuration for stateful run\nRUN echo \"use_stateless: false\" > mme.yml\n\nWORKDIR /etc/magma\nRUN cp $MAGMA_ROOT/lte/gateway/configs/control_proxy.yml .\nRUN cp $MAGMA_ROOT/lte/gateway/configs/redis.yml .\nRUN cp $MAGMA_ROOT/lte/gateway/configs/service_registry.yml .\n\nWORKDIR /magma-mme/scripts\nRUN cp $MAGMA_ROOT/lte/gateway/c/core/oai/test/check_mme_s6a_certificate . && \\\n    sed -i -e \"s@^.*THIS_SCRIPT_PATH@#@\" \\\n           -e \"s@\\$SUDO@@\" \\\n           -e \"s@echo_error@echo@\" \\\n           -e \"s@echo_success@echo@\" \\\n           -e \"s@echo_warning@echo@\" check_mme_s6a_certificate\n\nWORKDIR /magma-mme\nRUN openssl rand -out /root/.rnd 128\n\n################################################################\n# Target Image\n################################################################\nFROM registry.access.redhat.com/ubi8/ubi:latest as magma-mme\nENV MAGMA_ROOT=/magma\nENV C_BUILD=/build/c\n\n# Install a few tools (may not be necessary later on)\nENV TZ=Europe/Paris\nRUN yum update -y && \\\n    yum -y install --enablerepo=\"ubi-8-codeready-builder\" \\\n      libubsan \\\n      libasan \\\n      liblsan \\\n      psmisc \\\n      procps-ng \\\n      tcpdump \\\n      openssl \\\n      net-tools \\\n      tzdata && \\\n    echo \"/usr/local/lib\" > /etc/ld.so.conf.d/local-lib.conf && \\\n    echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local-lib.conf && \\\n    yum clean all -y && \\\n    rm -rf /var/cache/yum\n\n# Copy runtime-used shared libraries from builder\nWORKDIR /lib64\nCOPY --from=magma-mme-builder \\\n    /lib64/libsctp.so.1 \\\n    /lib64/libconfig.so.9 \\\n    /lib64/libboost_program_options.so.1.66.0 \\\n    /lib64/libboost_filesystem.so.1.66.0 \\\n    /lib64/libboost_system.so.1.66.0 \\\n    /lib64/libboost_regex.so.1.66.0 \\\n    /lib64/libgflags.so.2.1 \\\n    /lib64/libglog.so.0 \\\n    /lib64/libczmq.so.3 \\\n    /lib64/libicudata.so.60 \\\n    /lib64/libicui18n.so.60 \\\n    /lib64/libicuuc.so.60 \\\n    /lib64/libidn.so.11 \\\n    /usr/local/lib64/libdouble-conversion.so.3 \\\n    /lib64/\n\nWORKDIR /usr/local/lib\nCOPY --from=magma-mme-builder \\\n    /usr/local/lib/libnettle.so.4 \\\n    /usr/local/lib/libgnutls.so.28 \\\n    /usr/local/lib/libgrpc.so \\\n    /usr/local/lib/libgrpc++.so \\\n    /usr/local/lib/libgpr.so \\\n    /usr/local/lib/libyaml-cpp.so.0.6 \\\n    /usr/local/lib/libcares.so.2 \\\n    /usr/local/lib/libaddress_sorting.so  \\\n    /usr/local/lib/libunwind.so.8 \\\n    /usr/local/lib/libfdproto.so.6 \\\n    /usr/local/lib/libfdcore.so.6 \\\n    /usr/local/lib/libprotobuf.so.17 \\\n    /usr/local/lib/libhogweed.so.2 \\\n    /usr/local/lib/libzmq.so.5 \\\n    /usr/local/lib/\n\n# Copy all fdx files from freeDiameter installation\nWORKDIR /usr/local/lib/freeDiameter\nCOPY --from=magma-mme-builder /usr/local/lib/freeDiameter/* ./\n\n# Refresh library cache\nRUN ldconfig\n\n# Copy pre-built binaries for MME and SCTPD\nWORKDIR /magma-mme/bin\nCOPY --from=magma-mme-builder \\\n    $C_BUILD/core/oai/oai_mme/oai_mme \\\n    $C_BUILD/sctpd/src/sctpd \\\n    ./\n\n# Copy the configuration file templates and mean to modify/generate certificates\nWORKDIR /magma-mme/etc\nCOPY --from=magma-mme-builder \\\n    $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme.conf \\\n    $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme_fd.conf \\\n    /magma-mme/etc/\n\n# Create running dirs\nWORKDIR /var/opt/magma/configs\n# Adding mme configuration for stateful run\nRUN echo \"use_stateless: false\" > mme.yml && \\\n    openssl rand -out /root/.rnd 128 && \\\n    ldd /magma-mme/bin/oai_mme && \\\n    ldd /magma-mme/bin/sctpd\n\nWORKDIR /etc/magma\nCOPY --from=magma-mme-builder \\\n    $MAGMA_ROOT/lte/gateway/configs/control_proxy.yml \\\n    $MAGMA_ROOT/lte/gateway/configs/redis.yml \\\n    $MAGMA_ROOT/lte/gateway/configs/service_registry.yml \\\n    $MAGMA_ROOT/lte/gateway/configs/sctpd.yml \\\n    /etc/magma/\n\n# Adding means to re-generate certificates\nWORKDIR /magma-mme/scripts\nCOPY --from=magma-mme-builder $MAGMA_ROOT/lte/gateway/c/core/oai/test/check_mme_s6a_certificate .\nRUN sed -i -e \"s@^.*THIS_SCRIPT_PATH@#@\" \\\n           -e \"s@\\$SUDO@@\" \\\n           -e \"s@echo_error@echo@\" \\\n           -e \"s@echo_success@echo@\" \\\n           -e \"s@echo_warning@echo@\" check_mme_s6a_certificate\n\nWORKDIR /magma-mme\n\n# use this label for CI purpose\nLABEL use-separate-hss-realm=\"true\"\n\n# expose ports\nEXPOSE 3870/tcp 5870/tcp 2123/udp\n\n# For the moment, let have a dummy command\nCMD [\"sleep\", \"infinity\"]\n"
}