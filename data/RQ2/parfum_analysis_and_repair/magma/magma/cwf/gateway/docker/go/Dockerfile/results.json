{
  "startTime": 1674218897832,
  "endTime": 1674218899118,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 25,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 25,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG baseImage=\"ubuntu:focal\"\nFROM ${baseImage} as base\n\n# Add the magma apt repo\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y apt-utils software-properties-common apt-transport-https && rm -rf /var/lib/apt/lists/*;\nCOPY orc8r/tools/ansible/roles/pkgrepo/files/jfrog.pub /tmp/jfrog.pub\nRUN apt-key add /tmp/jfrog.pub && \\\n    apt-add-repository \"deb https://artifactory.magmacore.org/artifactory/debian-test focal-ci main\"\n\n# Install the runtime deps.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    bzr \\\n    curl \\\n    daemontools \\\n    gcc \\\n    git \\\n    libc-ares-dev \\\n    libev-dev \\\n    libevent-dev \\\n    libffi-dev \\\n    libjansson-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    libsystemd-dev \\\n    magma-nghttpx=1.31.1-1 \\\n    make \\\n    net-tools \\\n    pkg-config \\\n    python-cffi \\\n    python3-pip \\\n    redis-server \\\n    rsyslog \\\n    sudo \\\n    unzip \\\n    vim \\\n    virtualenv && rm -rf /var/lib/apt/lists/*;\n\n# Golang 1.18\nWORKDIR /usr/local\nARG GOLANG_VERSION=\"1.18.3\"\nRUN GO_TARBALL=\"go${GOLANG_VERSION}.linux-amd64.tar.gz\" \\\n && curl -f https://artifactory.magmacore.org/artifactory/generic/${GO_TARBALL} --remote-name --location \\\n && tar -xzf ${GO_TARBALL} \\\n && ln -s /usr/local/go/bin/go /usr/local/bin/go \\\n && rm ${GO_TARBALL}\n\n# Install protobuf compiler.\nRUN curl -Lfs https://github.com/protocolbuffers/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip && \\\n    unzip protoc3.zip -d protoc3 && \\\n    mv protoc3/bin/protoc /bin/protoc && \\\n    chmod a+rx /bin/protoc && \\\n    mv protoc3/include/google /usr/include/ && \\\n    chmod -R a+Xr /usr/include/google && \\\n    rm -rf protoc3.zip protoc3\n\nENV GOBIN /var/opt/magma/bin\nENV MAGMA_ROOT /magma\nENV PIP_CACHE_HOME ~/.pipcache\nENV PYTHON_BUILD /build/python\nENV PATH ${PYTHON_BUILD}/bin:${PATH}:${GOBIN}\nENV GO111MODULE on\n# Use public go modules proxy\nENV GOPROXY https://proxy.golang.org\n\nRUN printenv > /etc/environment\n\n\n# Copy just the go.mod and go.sum files to download the golang deps.\n# This step allows us to cache the downloads, and prevents reaching out to\n# the internet unless any of the go.mod or go.sum files are changed.\nCOPY cwf/cloud/go/go.* $MAGMA_ROOT/cwf/cloud/go/\nCOPY cwf/gateway/go.* $MAGMA_ROOT/cwf/gateway/\nCOPY lte/cloud/go/go.* $MAGMA_ROOT/lte/cloud/go/\nCOPY feg/cloud/go/go.* $MAGMA_ROOT/feg/cloud/go/\nCOPY feg/cloud/go/protos/go.* $MAGMA_ROOT/feg/cloud/go/protos/\nCOPY feg/radius/lib/go/ $MAGMA_ROOT/feg/radius/lib/go/\nCOPY feg/radius/src/go.* $MAGMA_ROOT/feg/radius/src/\nCOPY feg/gateway/go.* $MAGMA_ROOT/feg/gateway/\nCOPY orc8r/lib/go/go.* $MAGMA_ROOT/orc8r/lib/go/\nCOPY orc8r/lib/go/protos/go.* $MAGMA_ROOT/orc8r/lib/go/protos/\nCOPY orc8r/cloud/go/go.* $MAGMA_ROOT/orc8r/cloud/go/\nCOPY orc8r/gateway/go/go.* $MAGMA_ROOT/orc8r/gateway/go/\nWORKDIR $MAGMA_ROOT/cwf/gateway\nRUN go mod download\n# Install protoc-gen-go\nRUN go install github.com/golang/protobuf/protoc-gen-go\n\n# Symlink python scripts.\nRUN ln -s /build/python/bin/generate_service_config.py /usr/local/bin/generate_service_config.py\nRUN ln -s /build/python/bin/generate_nghttpx_config.py /usr/local/bin/generate_nghttpx_config.py\n\n# -----------------------------------------------------------------------------\n# Builder image with binary\n# -----------------------------------------------------------------------------\nFROM base as builder\n\n# Build the code.\nCOPY cwf $MAGMA_ROOT/cwf\nCOPY feg $MAGMA_ROOT/feg\nCOPY lte/cloud $MAGMA_ROOT/lte/cloud\nCOPY orc8r/lib/go $MAGMA_ROOT/orc8r/lib/go\nCOPY orc8r/cloud $MAGMA_ROOT/orc8r/cloud\nCOPY orc8r/gateway/go $MAGMA_ROOT/orc8r/gateway/go\n\n# Enable make gen if proto gen is required\n# RUN make -C $MAGMA_ROOT/cwf/gateway gen\nRUN make -C $MAGMA_ROOT/cwf/gateway build\n\n# -----------------------------------------------------------------------------\n# Production image\n# -----------------------------------------------------------------------------\nFROM ${baseImage} AS cwag_go\n\n# Install envdir.\nRUN apt-get -y update && apt-get -y --no-install-recommends install daemontools curl arping && rm -rf /var/lib/apt/lists/*;\n\n# Copy the build artifacts.\nCOPY --from=builder /var/opt/magma/bin /var/opt/magma/bin\n\n# Copy the configs.\nCOPY cwf/gateway/configs /etc/magma\n\n# Create empty envdir directory\nRUN mkdir -p /var/opt/magma/envdir\n\nRUN mkdir -p /var/opt/magma/configs\n"
}