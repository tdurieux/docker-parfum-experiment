{
  "startTime": 1674249304031,
  "endTime": 1674249304691,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:15.9-alpine as build\n\nENV NODE_ENV=production\n\n## Install build toolchain, install node deps and compile native add-ons\nRUN apk --no-cache add python3 make g++\n\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nRUN mkdir -p /usr/src/app/packages && rm -rf /usr/src/app/packages\n\nWORKDIR /usr/src/app\n\nCOPY package.json .\nCOPY yarn.lock .\nCOPY tsconfig.json .\n\nCOPY docs ./docs\nWORKDIR /usr/src/app/docs\n\nRUN yarn install --production=false --pure-lockfile --non-interactive --network-timeout 100000 && yarn cache clean;\nRUN yarn build\n\nFROM node:15.9-alpine as app\n\nARG NEW_RELIC_APP_NAME=DesignSystemDocs::Production\nENV NEW_RELIC_APP_NAME $NEW_RELIC_APP_NAME\n\nARG NEW_RELIC_ENABLED=true\nENV NEW_RELIC_ENABLED $NEW_RELIC_ENABLED\n\nENV NEW_RELIC_LICENSE_KEY $NEW_RELIC_LICENSE_KEY\n\nENV NODE_ENV=production\n\nARG HOST=0.0.0.0\nENV HOST $HOST\n\nARG PORT=3000\nENV PORT $PORT\n\nENV TZ=America/Denver\n\nARG LOG_LEVEL=info\nENV LOG_LEVEL $LOG_LEVEL\n\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nRUN mkdir -p /usr/src/app/packages && rm -rf /usr/src/app/packages\n\nWORKDIR /usr/src/app\n\nCOPY package.json .\nCOPY yarn.lock .\nCOPY tsconfig.json .\n\nCOPY --from=build /usr/src/app/package.json /usr/src/app/package.json\nCOPY --from=build /usr/src/app/yarn.lock /usr/src/app/yarn.lock\n\nCOPY --from=build /usr/src/app/docs/package.json /usr/src/app/docs/package.json\nCOPY --from=build /usr/src/app/docs/health-check.js /usr/src/app/docs/health-check.js\nCOPY --from=build /usr/src/app/docs/newrelic.js /usr/src/app/docs/newrelic.js\nCOPY --from=build /usr/src/app/docs/dist /usr/src/app/docs/dist\nCOPY --from=build /usr/src/app/docs/public /usr/src/app/docs/public\n\nWORKDIR /usr/src/app/docs\nRUN yarn install --pure-lockfile --non-interactive --production && yarn cache clean;\n\n# the official node image provides an unprivileged user as a security best practice\n# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#non-root-user\nUSER node\n\nHEALTHCHECK --interval=5s --timeout=30s --retries=3 \\\n  CMD node /usr/src/app/docs/health-check.js\n\nCMD [\"node\", \"./dist/server/main.js\"]\n"
}