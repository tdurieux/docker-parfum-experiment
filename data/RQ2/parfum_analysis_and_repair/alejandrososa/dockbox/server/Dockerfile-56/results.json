{
  "startTime": 1674253969559,
  "endTime": 1674253971561,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 256,
        "lineEnd": 256,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 298,
        "lineEnd": 298,
        "columnStart": 8,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 300,
        "lineEnd": 300,
        "columnStart": 8,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 454,
        "lineEnd": 454,
        "columnStart": 5,
        "columnEnd": 70
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 261,
        "lineEnd": 261,
        "columnStart": 8,
        "columnEnd": 27
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 262,
        "lineEnd": 262,
        "columnStart": 8,
        "columnEnd": 30
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 263,
        "lineEnd": 263,
        "columnStart": 8,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 264,
        "lineEnd": 264,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 431,
        "lineEnd": 431,
        "columnStart": 23,
        "columnEnd": 42
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 479,
        "lineEnd": 479,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 480,
        "lineEnd": 480,
        "columnStart": 5,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 327,
        "lineEnd": 327,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 404,
        "lineEnd": 404,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 429,
        "lineEnd": 429,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 441,
        "lineEnd": 441,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 478,
        "lineEnd": 478,
        "columnStart": 5,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 404,
        "lineEnd": 404,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 429,
        "lineEnd": 429,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 327,
        "lineEnd": 327,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 404,
        "lineEnd": 404,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 429,
        "lineEnd": 429,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 441,
        "lineEnd": 441,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 478,
        "lineEnd": 478,
        "columnStart": 5,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 405,
        "lineEnd": 405,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 430,
        "lineEnd": 430,
        "columnStart": 4,
        "columnEnd": 94
      }
    }
  ],
  "repairedDockerfile": "FROM phusion/baseimage:latest\n\nMAINTAINER Alejandro Sosa <alesjohnson@hotmail.com>\n\nRUN DEBIAN_FRONTEND=noninteractive\nRUN locale-gen en_US.UTF-8\n\nENV LANGUAGE=en_US.UTF-8\nENV LC_ALL=en_US.UTF-8\nENV LC_CTYPE=UTF-8\nENV LANG=en_US.UTF-8\nENV TERM xterm\n\n# Add the \"PHP 5\" ppa\nRUN apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository -y ppa:ondrej/php && rm -rf /var/lib/apt/lists/*;\n\n#Net tools\n#RUN apt-get install -y net-tools\n\n#\n#--------------------------------------------------------------------------\n# Software's Installation\n#--------------------------------------------------------------------------\n#\n\n# Install \"PHP Extentions\", \"libraries\", \"Software's\"\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y --allow-downgrades --allow-remove-essential \\\n        --allow-change-held-packages \\\n        sudo \\\n        php-pear \\\n        php5.6-cli \\\n        php5.6-common \\\n        php5.6-curl \\\n        php5.6-json \\\n        php5.6-xml \\\n        php5.6-mbstring \\\n        php5.6-mcrypt \\\n        php5.6-mysql \\\n        php5.6-pgsql \\\n        php5.6-sqlite \\\n        php5.6-sqlite3 \\\n        php5.6-zip \\\n        php5.6-bcmath \\\n        php5.6-memcached \\\n        php5.6-gd \\\n        php5.6-bcmath \\\n        php5.6-dev \\\n        pkg-config \\\n        libcurl4-openssl-dev \\\n        libedit-dev \\\n        libssl-dev \\\n        libxml2-dev \\\n        xz-utils \\\n        libsqlite3-dev \\\n        sqlite3 \\\n        git \\\n        curl \\\n        vim \\\n        nano \\\n        postgresql-client \\\n        git-core \\\n        zlib1g-dev \\\n        build-essential \\\n        libreadline-dev \\\n        libyaml-dev \\\n        libxslt1-dev \\\n        python-software-properties \\\n        libffi-dev \\\n        nodejs \\\n        ruby-full \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n\n#####################################\n# Composer:\n#####################################\n\n# Install composer and add its bin to the PATH.\nRUN curl -f -s https://getcomposer.org/installer | php && \\\n    echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc && \\\n    mv composer.phar /usr/local/bin/composer\n\n# Source the bash\nRUN . ~/.bashrc\n\n\n#####################################\n# Non-Root User:\n#####################################\n\n# Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\n\nENV PUID ${PUID}\nENV PGID ${PGID}\n\nRUN groupadd -g ${PGID} desarrolladores && \\\n    useradd -u ${PUID} -g desarrolladores -m desarrollador && \\\n    apt-get update -yqq\n\nRUN echo \"\" >> /etc/sudoers  && \\\n    echo \"# User privilege specification\" >> /etc/sudoers  && \\\n    echo \"desarrollador   ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers  && \\\n    echo \"\" >> /etc/sudoers\n\n\n#####################################\n# SOAP:\n#####################################\nUSER root\n\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP ${INSTALL_SOAP}\n\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n  add-apt-repository -y ppa:ondrej/php && \\\n  apt-get update -yqq && \\\n  apt-get -y --no-install-recommends install libxml2-dev php5.6-soap \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n\n#####################################\n# Set Timezone\n#####################################\n\nARG TZ=UTC\nENV TZ ${TZ}\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n\n#####################################\n# Composer:\n#####################################\n# Add the composer.json\nCOPY ./composer.json /home/desarrollador/.composer/composer.json\n\n# Make sure that ~/.composer belongs to desarrollador\nRUN chown -R desarrollador:desarrolladores /home/desarrollador/.composer\nUSER desarrollador\n\n# Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL ${COMPOSER_GLOBAL_INSTALL}\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then \\\n    # run the install\n    composer global install \\\n;fi\n\n# Export composer vendor path\nRUN echo \"\" >> ~/.bashrc && \\\necho 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n\n\n#####################################\n# Crontab\n#####################################\nUSER root\n\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n\n\n#####################################\n# User Aliases\n#####################################\nUSER desarrollador\nCOPY ./aliases.sh /home/desarrollador/aliases.sh\nCOPY ./aliases.sh /home/desarrollador/.aliases\nRUN echo \"\" >> ~/.bashrc\nRUN echo \"# Load Custom Aliases\" >> ~/.bashrc\nRUN echo \"source /home/desarrollador/aliases.sh\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc && \\\n    sed -i 's/\\r//' /home/desarrollador/aliases.sh && \\\n    sed -i 's/^#! \\/bin\\/sh/#! \\/bin\\/bash/' /home/desarrollador/aliases.sh\n\nUSER root\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source /home/desarrollador/aliases.sh\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc && \\\n    sed -i 's/\\r//' /home/desarrollador/aliases.sh && \\\n    sed -i 's/^#! \\/bin\\/sh/#! \\/bin\\/bash/' /home/desarrollador/aliases.sh\n\n\n#####################################\n# xDebug:\n#####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y --force-yes php5.6-xdebug && \\\n    sed -i 's/^/;/g' /etc/php/5.6/cli/conf.d/20-xdebug.ini && \\\n    echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc \\\n; rm -rf /var/lib/apt/lists/*; fi\n# ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/5.6/cli/conf.d/xdebug.ini\n\n\n#####################################\n# ssh:\n#####################################\nARG INSTALL_WORKSPACE_SSH=false\nENV INSTALL_WORKSPACE_SSH ${INSTALL_WORKSPACE_SSH}\n\nADD ssh/insecure_id_rsa /tmp/id_rsa\nADD ssh/insecure_id_rsa.pub /tmp/id_rsa.pub\nADD ssh/ssh-key /tmp/ssh-key\nADD ssh/sshd_config /etc/ssh/sshd_config\nRUN ssh-keygen -A\n\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ]; then \\\n    rm -f /etc/service/sshd/down && \\\n    cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n        && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n        && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n        && cat /tmp/ssh-key >> /root/.ssh/authorized_keys \\\n        && rm -f /tmp/id_rsa* \\\n        && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n    && chmod 400 /root/.ssh/id_rsa \\\n    && service ssh restart \\\n;fi\n\n#####################################\n# MongoDB:\n#####################################\n\n# Check if Mongo needs to be installed\nARG INSTALL_MONGO=false\nENV INSTALL_MONGO ${INSTALL_MONGO}\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    # Install the mongodb extension\n    pecl install mongodb && \\\n    echo \"extension=mongodb.so\" >> /etc/php/5.6/mods-available/mongodb.ini && \\\n    ln -s /etc/php/5.6/mods-available/mongodb.ini /etc/php/5.6/cli/conf.d/30-mongodb.ini \\\n;fi\n\n\nUSER desarrollador\n\n#####################################\n# Node / NVM:\n#####################################\n\n# Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION ${NODE_VERSION}\nARG INSTALL_NODE=false\nENV INSTALL_NODE ${INSTALL_NODE}\nENV NVM_DIR /home/desarrollador/.nvm\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    curl -f -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \\\n        . $NVM_DIR/nvm.sh && \\\n        nvm install ${NODE_VERSION} && \\\n        nvm use ${NODE_VERSION} && \\\n        nvm alias ${NODE_VERSION} && \\\n        npm install -g less && \\\n        npm install -g webpack && \\\n        npm install -g vue && \\\n        npm install -g react react-dom \\\n; npm cache clean --force; fi\n\n# Wouldn't execute when added to the RUN statement in the above block\n# Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n# Add NVM binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"/home/desarrollador/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n#####################################\n# YARN:\n#####################################\n\nUSER desarrollador\n\nARG INSTALL_YARN=false\nENV INSTALL_YARN ${INSTALL_YARN}\nARG YARN_VERSION=latest\nENV YARN_VERSION ${YARN_VERSION}\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" && \\\n    if [ ${YARN_VERSION} = \"latest\" ]; then \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash; \\\n    else \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi && \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc \\\n; else \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi \\\n\n\nfi\n\n# Add YARN binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export YARN_DIR=\"/home/desarrollador/.yarn\"' >> ~/.bashrc && \\\n    echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc \\\n;fi\n\n#####################################\n# PHP V8JS:\n#####################################\nUSER root\n\nARG INSTALL_V8JS_EXTENSION=false\nENV INSTALL_V8JS_EXTENSION ${INSTALL_V8JS_EXTENSION}\n\nRUN if [ ${INSTALL_V8JS_EXTENSION} = true ]; then \\\n    add-apt-repository -y ppa:pinepain/libv8-5.4 \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y php-dev php-pear libv8-5.4 \\\n    && pecl install v8js \\\n    && echo \"extension=v8js.so\" >> /etc/php/5.6/cli/php.ini \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# SASS:\n#####################################\nUSER desarrollador\n\nARG INSTALL_SASS=false\nENV INSTALL_SASS ${INSTALL_SASS}\n\nRUN if [ ${INSTALL_SASS} = true ]; then \\\n    # Install the sass bin\n    sudo gem install sass \\\n;fi\n\n#####################################\n# Non-root user : PHPUnit path\n#####################################\n\n# add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER desarrollador\n\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n\n#####################################\n# Laravel Envoy:\n#####################################\nUSER desarrollador\n\nARG INSTALL_LARAVEL_ENVOY=true\nENV INSTALL_LARAVEL_ENVOY ${INSTALL_LARAVEL_ENVOY}\n\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ]; then \\\n    # Install the Laravel Envoy\n    composer global require \"laravel/envoy=~1.0\" \\\n;fi\n\n#####################################\n# Laravel Installer:\n#####################################\nUSER root\n\nARG INSTALL_LARAVEL_INSTALLER=true\nENV INSTALL_LARAVEL_INSTALLER ${INSTALL_LARAVEL_INSTALLER}\n\nRUN if [ ${INSTALL_LARAVEL_INSTALLER} = true ]; then \\\n    # Install the Laravel Installer\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc \\\n    && composer global require \"laravel/installer\" \\\n;fi\n\n#####################################\n# Deployer:\n#####################################\nUSER desarrollador\n\nARG INSTALL_DEPLOYER=false\nENV INSTALL_DEPLOYER ${INSTALL_DEPLOYER}\n\nRUN if [ ${INSTALL_DEPLOYER} = true ]; then \\\n    # Install the Deployer\n    composer global require \"deployer/deployer\" \\\n;fi\n\n#####################################\n# SQL SERVER:\n#####################################\nUSER root\nARG INSTALL_MSSQL=false\nENV INSTALL_MSSQL ${INSTALL_MSSQL}\n\nRUN if [ ${INSTALL_MSSQL} = true ]; then \\\n    apt-get -y --no-install-recommends install php5.6-sybase freetds-bin freetds-common libsybdb5 \\\n    && echo \"extension=pdo_dblib.so\" > /etc/php/5.6/cli/conf.d/20-pdo_dblib.ini \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Minio:\n#####################################\nUSER root\nARG INSTALL_MC=false\nENV INSTALL_MC ${INSTALL_MC}\n\nCOPY mc/config.json /root/.mc/config.json\n\nRUN if [ ${INSTALL_MC} = true ]; then\\\n    curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc && \\\n    chmod +x /usr/local/bin/mc \\\n;fi\n\n#####################################\n# Image optimizers:\n#####################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nENV INSTALL_IMAGE_OPTIMIZERS ${INSTALL_IMAGE_OPTIMIZERS}\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then \\\n    apt-get install --no-install-recommends -y --force-yes jpegoptim optipng pngquant gifsicle && \\\n    if [ ${INSTALL_NODE} = true ]; then \\\n        . ~/.bashrc && npm install -g svgo \\\n    ; npm cache clean --force; fi \\\n; rm -rf /var/lib/apt/lists/*; fi\n#####################################\n# ZeroMQ:\n#####################################\nARG INSTALL_ZMQ=false\nRUN if [ ${INSTALL_ZMQ} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get install --no-install-recommends -y build-essential libtool autoconf pkg-config libsodium-dev libzmq-dev && \\\n    pecl install -o -f zmq-beta && rm -rf /tmp/pear && \\\n    echo \"extension=zmq.so\" > /etc/php/5.6/cli/conf.d/zmq.ini \\\n; rm -rf /var/lib/apt/lists/*; fi\n#####################################\n# Symfony:\n#####################################\nUSER root\nARG INSTALL_SYMFONY=false\nENV INSTALL_SYMFONY ${INSTALL_SYMFONY}\nRUN if [ ${INSTALL_SYMFONY} = true ]; then \\\n  mkdir -p /usr/local/bin \\\n  && curl -f -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n  && chmod a+x /usr/local/bin/symfony \\\n\n  #  Symfony 3 alias\n  && echo 'alias sydev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n  && echo 'alias syprod=\"php bin/console -e=prod\"' >> ~/.bashrc \\\n\n\n\n\n\n; fi\n\n\n#RUN source ~/.bashrc\n\n#####################################\n# PYTHON:\n#####################################\n\nARG INSTALL_PYTHON=false\nENV INSTALL_PYTHON ${INSTALL_PYTHON}\nRUN if [ ${INSTALL_PYTHON} = true ]; then \\\n  apt-get update \\\n  && apt-get -y --no-install-recommends install python python-pip python-dev build-essential \\\n  && pip install --no-cache-dir --upgrade pip \\\n  && pip install --no-cache-dir --upgrade virtualenv \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\n# Clean up\nUSER root\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set default work directory\nWORKDIR /var/www\n"
}