{
  "startTime": 1674220921041,
  "endTime": 1674220921904,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 175
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 166
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 120
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ANCHORE_REPO=\"anchore/anchore-engine\"\nARG ANCHORE_VERSION=\"latest\"\nFROM ${ANCHORE_REPO}:${ANCHORE_VERSION}\n\nUSER root:root\n\nENV JQ_VERSION=1.6\nENV GOSU_VERSION=1.11\n\nRUN set -ex; \\\n    yum -y upgrade; \\\n    yum install -y ca-certificates; rm -rf /var/cache/yum \\\n    curl -f -Lo /usr/local/bin/jq \"https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64\"; \\\n    curl -f -o /usr/local/bin/jq.asc \"https://raw.githubusercontent.com/stedolan/jq/master/sig/v${JQ_VERSION}/jq-linux64.asc\"; \\\n    curl -f -o /usr/local/bin/jq-public.asc \"https://raw.githubusercontent.com/stedolan/jq/master/sig/jq-release.key\"; \\\n    curl -f -Lo /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\"; \\\n    curl -f -Lo /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc\"; \\\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n    gpg --batch --keyserver keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n    gpg --batch --import /usr/local/bin/jq-public.asc; \\\n    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n    gpg --batch --verify /usr/local/bin/jq.asc /usr/local/bin/jq; \\\n    command -v gpgconf && gpgconf --kill all || :; \\\n    chmod +x /usr/local/bin/jq; \\\n    chmod +x /usr/local/bin/gosu; \\\n    rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc /usr/local/bin/jq.asc; \\\n    rm -rf /anchore-engine/* /root/.cache /config/config.yaml\n\nENV PG_MAJOR=\"9.6\"\nENV PGDATA=\"/var/lib/postgresql/data\"\n\nRUN set -eux; \\\n    yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm && \\\n    yum install -y postgresql96 postgresql96-server && rm -rf /var/cache/yum\n\nRUN set -eux; \\\n    mkdir -p /var/lib/postgresql; \\\n    chown -R anchore:anchore /var/lib/postgresql; \\\n    mkdir /docker-entrypoint-initdb.d; \\\n    touch /var/log/postgres.log; \\\n    chown anchore:anchore /var/log/postgres.log; \\\n    mkdir -p /var/run/postgresql; \\\n    chown -R anchore:anchore /var/run/postgresql; \\\n    chmod 2775 /var/run/postgresql; \\\n    mkdir -p \"$PGDATA\"; \\\n    chown -R anchore:anchore \"$PGDATA\"; \\\n    chmod 700 \"$PGDATA\"\n\nCOPY anchore-bootstrap.sql.gz /docker-entrypoint-initdb.d/\n\nENV POSTGRES_USER=\"postgres\" \\\n    POSTGRES_DB=\"postgres\" \\\n    POSTGRES_PASSWORD=\"${POSTGRES_PASSWORD:-mysecretpassword}\"\n\nRUN set -eux; \\\n    export PATH=${PATH}:/usr/pgsql-${PG_MAJOR}/bin/; \\\n    gosu anchore bash -c 'initdb --username=${POSTGRES_USER} --pwfile=<(echo \"$POSTGRES_PASSWORD\")'; \\\n    PGUSER=\"${PGUSER:-$POSTGRES_USER}\" \\\n    gosu anchore bash -c 'pg_ctl -D \"$PGDATA\" -o \"-c listen_addresses='*'\" -w start'; \\\n    printf '\\n%s' 'host all all 0.0.0.0/0 md5' >> ${PGDATA}/pg_hba.conf; \\\n    export PGPASSWORD=\"${PGPASSWORD:-$POSTGRES_PASSWORD}\"; \\\n    gosu anchore bash -c '\\\n        export PGPASSWORD=\"${PGPASSWORD:-$POSTGRES_PASSWORD}\"; \\\n        export psql=( psql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" --no-password --dbname \"$POSTGRES_DB\" ); \\\n        for f in /docker-entrypoint-initdb.d/*; do \\\n            echo running \"$f\"; gunzip -c \"$f\" | \"${psql[@]}\"; echo ; \\\n        done'; \\\n    PGUSER=\"${PGUSER:-$POSTGRES_USER}\" \\\n    gosu anchore bash -c 'pg_ctl -D \"$PGDATA\" -m fast -w stop'; \\\n    unset PGPASSWORD; \\\n    rm -f /docker-entrypoint-initdb.d/anchore-bootstrap.sql.gz\n\nENV REGISTRY_VERSION 2.7\n\nRUN set -eux; \\\n    mkdir -p /etc/docker/registry; \\\n    mkdir /var/lib/registry; \\\n    chown anchore:anchore /var/lib/registry; \\\n    curl -f -LH 'Accept: application/octet-stream' -o /usr/local/bin/registry https://github.com/docker/distribution-library-image/raw/release/${REGISTRY_VERSION}/amd64/registry; \\\n    chmod +x /usr/local/bin/registry; \\\n    curl -f -Lo /etc/docker/registry/config.yml https://raw.githubusercontent.com/docker/distribution-library-image/release/${REGISTRY_VERSION}/amd64/config-example.yml; \\\n    touch /var/log/registry.log; \\\n    chown anchore:anchore /var/log/registry.log\n\nENV ANCHORE_ENDPOINT_HOSTNAME=\"localhost\"\nRUN set -eux; \\\n    echo \"127.0.0.1 $ANCHORE_ENDPOINT_HOSTNAME\" >> /etc/hosts; \\\n    touch /var/log/anchore.log; \\\n    chown anchore:anchore /var/log/anchore.log; \\\n    chown anchore:anchore /anchore-engine\n\nCOPY conf/stateless_ci_config.yaml /config/config.yaml\nCOPY scripts/anchore_ci_tools.py  \\\n     scripts/docker-entrypoint.sh \\\n     scripts/image_analysis.sh \\\n     scripts/image_vuln_scan.sh /usr/local/bin/\n\nUSER anchore:anchore\nWORKDIR /anchore-engine\nENV PATH ${PATH}:/anchore-cli/bin\n\nEXPOSE 5432 5000\nENTRYPOINT [\"docker-entrypoint.sh\"]\n"
}