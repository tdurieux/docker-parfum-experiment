diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/anchore/anchore-engine/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/anchore/anchore-engine/Dockerfile/repaired.Dockerfile
index 0b09508..3206b94 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/anchore/anchore-engine/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/anchore/anchore-engine/Dockerfile/repaired.Dockerfile
@@ -8,7 +8,7 @@ FROM ${BASE_REGISTRY}/${BASE_IMAGE}:${BASE_TAG} as anchore-engine-builder
 
 ARG CLI_COMMIT
 
-ENV LANG=en_US.UTF-8 
+ENV LANG=en_US.UTF-8
 ENV LC_ALL=C.UTF-8
 
 # environment variables for dependent binary versions
@@ -42,7 +42,7 @@ RUN set -ex && \
         python38-psycopg2 \
         python38-wheel && \
     yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && \
-    pip3 install pip=="${PIP_VERSION}"
+    pip3 install --no-cache-dir pip=="${PIP_VERSION}" && rm -rf /var/cache/yum
 
 # stage dependent binaries into /build_output
 RUN set -ex && \
@@ -51,7 +51,7 @@ RUN set -ex && \
     yum install -y --downloadonly --downloaddir=/build_output/deps/ \
         clamav \
         clamav-update \
-        dpkg
+        dpkg && rm -rf /var/cache/yum
 
 RUN set -ex && \
     echo "downloading anchore-cli" && \
@@ -79,7 +79,7 @@ RUN set -ex && \
 # create p1 buildblob & checksum
 RUN set -ex && \
     tar -z -c -v -C /build_output -f /anchore-buildblob.tgz . && \
-    sha256sum /anchore-buildblob.tgz > /buildblob.tgz.sha256sum
+    sha256sum /anchore-buildblob.tgz > /buildblob.tgz.sha256sum && rm /anchore-buildblob.tgz
 
 #### Start second stage
 #### Setup and install using first stage artifacts in /build_output
@@ -103,7 +103,7 @@ LABEL anchore_cli_commit="${CLI_COMMIT}" \
 
 # Environment variables to be present in running environment
 ENV AUTHLIB_INSECURE_TRANSPORT=true
-ENV LANG=en_US.UTF-8 
+ENV LANG=en_US.UTF-8
 ENV LC_ALL=C.UTF-8
 ENV PATH="${PATH}:/anchore-cli/bin"
 ENV SET_HOSTID_TO_HOSTNAME=false
@@ -203,7 +203,7 @@ RUN set -ex && \
         python38-psycopg2 \
         python38-wheel \
         skopeo && \
-    yum clean all
+    yum clean all && rm -rf /var/cache/yum
 
 # Copy the installed artifacts from the first stage
 COPY --from=anchore-engine-builder /build_output /build_output
@@ -211,11 +211,11 @@ COPY --from=anchore-engine-builder /build_output /build_output
 # Install anchore-cli into a virtual environment
 RUN set -ex && \
     echo "updating pip" && \
-    pip3 install --upgrade --no-index --find-links=/build_output/wheels/ pip && \
+    pip3 install --no-cache-dir --upgrade --no-index --find-links=/build_output/wheels/ pip && \
     echo "installing anchore-cli into virtual environment" && \
     python3 -m venv /anchore-cli && \
     source /anchore-cli/bin/activate && \
-    pip3 install --no-index --find-links=/build_output/cli_wheels/ anchorecli && \
+    pip3 install --no-cache-dir --no-index --find-links=/build_output/cli_wheels/ anchorecli && \
     deactivate
 
 # Install required OS deps & application config files
@@ -223,12 +223,12 @@ RUN set -exo pipefail && \
     cp /build_output/deps/syft /usr/bin/syft && \
     cp /build_output/deps/grype /usr/bin/grype && \
     yum install -y /build_output/deps/*.rpm && \
-    yum clean all
+    yum clean all && rm -rf /var/cache/yum
 
 # Install anchore-engine & cleanup filesystem
 RUN set -ex && \
     echo "installing anchore-engine and required dependencies" && \
-    pip3 install --no-index --find-links=/build_output/wheels/ anchore-engine && \
+    pip3 install --no-cache-dir --no-index --find-links=/build_output/wheels/ anchore-engine && \
     echo "copying default application config files" && \
     cp /build_output/LICENSE /licenses/ && \
     cp /build_output/configs/default_config.yaml /config/config.yaml && \