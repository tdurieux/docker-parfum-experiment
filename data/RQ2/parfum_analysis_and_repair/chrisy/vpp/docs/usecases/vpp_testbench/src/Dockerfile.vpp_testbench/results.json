{
  "startTime": 1674255755833,
  "endTime": 1674255757054,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#------------------------------------------------------------------------------#\n# @brief:       Dockerfile for building the VPP testbench project.\n# @author:      Matthew Giassa <mgiassa@cisco.com>\n# @copyright:   (C) Cisco 2021.\n#------------------------------------------------------------------------------#\n# Baseline image both client and server inherit from.\nFROM ubuntu:focal as baseline\n\n# System packages.\nRUN apt update -y && \\\n    DEBIAN_FRONTEND=\"noninteractive\" apt --no-install-recommends install -y tzdata termshark && \\\n    apt install --no-install-recommends -y \\\n        apt-transport-https \\\n        axel \\\n        bash \\\n        binutils \\\n        bridge-utils \\\n        ca-certificates \\\n        coreutils \\\n        curl \\\n        gnupg \\\n        htop \\\n        iftop \\\n        iproute2 \\\n        iptables \\\n        iputils-ping \\\n        netcat \\\n        net-tools \\\n        nload \\\n        nmap \\\n        procps \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        sudo \\\n        wget \\\n        tcpdump \\\n        vim \\\n        && \\\n    apt clean -y && rm -rf /var/lib/apt/lists/*;\n# Python packages.\nRUN python3 -m pip install \\\n    scapy\n\n# VPP.\nRUN bash -c \"curl -L https://packagecloud.io/fdio/master/gpgkey | apt-key add -\" && \\\n    bash -c \"echo \\\"deb [trusted=yes] https://packagecloud.io/fdio/release/ubuntu focal main\\\" >> /etc/apt/sources.list.d/99fd.io.list\" && \\\n    apt update && \\\n    apt install --no-install-recommends -y \\\n        vpp \\\n        vpp-plugin-core \\\n        vpp-plugin-dpdk \\\n    && \\\n    apt clean -y && rm -rf /var/lib/apt/lists/*;\n\n# Used by client/server entrypoint scripts.\nADD vpp_testbench_helpers.sh /\n\n\n#------------------------------------------------------------------------------#\n# Client image.\nFROM baseline as client_img\n# Enable a health probe.\nARG HEALTHCHECK_PORT=8080\nENV HEALTHCHECK_PORT_RUNTIME=\"${HEALTHCHECK_PORT}\"\nHEALTHCHECK CMD curl --fail \"http://localhost:$HEALTHCHECK_PORT_RUNTIME\" || exit 1\n# Image-specific overrides.\nADD ./entrypoint_client.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n\n\n#------------------------------------------------------------------------------#\n# Server image.\nFROM baseline as server_img\n# Enable a health probe.\nARG HEALTHCHECK_PORT=8080\nENV HEALTHCHECK_PORT_RUNTIME=\"${HEALTHCHECK_PORT}\"\nHEALTHCHECK CMD curl --fail \"http://localhost:$HEALTHCHECK_PORT_RUNTIME\" || exit 1\n# Image-specific overrides.\nADD ./entrypoint_server.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n\n"
}