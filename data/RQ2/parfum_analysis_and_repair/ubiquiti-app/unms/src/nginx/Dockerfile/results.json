{
  "startTime": 1674253191980,
  "endTime": 1674253193292,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 80
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 23,
        "lineEnd": 51,
        "columnStart": 41,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.7\nUSER root\n\nENV NGINX_VERSION=nginx-1.14.2 \\\n    NGINX_LUA_VERSION=0.10.11 \\\n    NGINX_DEVEL_KIT_VERSION=0.3.0 \\\n    LUAJIT_VERSION=2.1.0-beta3 \\\n    CERTBOT_VERSION=0.21.0\n\nRUN devDeps=\"wget openssl-dev pcre-dev zlib-dev build-base libffi-dev python-dev build-base\" \\\n    && apk add --no-cache --update ${devDeps} sudo dumb-init openssl pcre libgcc gettext py-pip coreutils \\\n    && pip install --no-cache-dir \"certbot==${CERTBOT_VERSION}\" \\\n    && mkdir -p /tmp/src && cd /tmp/src \\\n    && wget -q https://nginx.org/download/${NGINX_VERSION}.tar.gz -O nginx.tar.gz \\\n    && wget -q \"https://github.com/openresty/lua-nginx-module/archive/v${NGINX_LUA_VERSION}.tar.gz\" -O lua-nginx-module.tar.gz \\\n    && wget -q \"https://github.com/simpl/ngx_devel_kit/archive/v${NGINX_DEVEL_KIT_VERSION}.tar.gz\" -O ndk.tar.gz \\\n    && wget -q \"https://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz\" -O luajit.tar.gz \\\n    && tar -zxvf lua-nginx-module.tar.gz \\\n    && tar -zxvf ndk.tar.gz \\\n    && tar -zxvf luajit.tar.gz \\\n    && tar -zxvf nginx.tar.gz \\\n    && cd \"/tmp/src/LuaJIT-${LUAJIT_VERSION}\" && make amalg PREFIX='/usr' && make install PREFIX='/usr' \\\n    && export LUAJIT_LIB=/usr/lib/libluajit-5.1.so && export LUAJIT_INC=/usr/include/luajit-2.1 \\\n    && cd \"/tmp/src/${NGINX_VERSION}\" && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' \\\n        --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -fPIC' \\\n        --with-pcre-jit \\\n        --with-threads \\\n        --add-module=\"/tmp/src/lua-nginx-module-${NGINX_LUA_VERSION}\" \\\n        --add-module=\"/tmp/src/ngx_devel_kit-${NGINX_DEVEL_KIT_VERSION}\" \\\n        --with-http_ssl_module \\\n        --with-http_realip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_secure_link_module \\\n        --without-mail_pop3_module \\\n        --without-mail_imap_module \\\n        --without-http_upstream_ip_hash_module \\\n        --without-http_memcached_module \\\n        --without-http_auth_basic_module \\\n        --without-http_userid_module \\\n        --without-http_fastcgi_module \\\n        --without-http_uwsgi_module \\\n        --without-http_scgi_module \\\n        --prefix=/var/lib/nginx \\\n        --sbin-path=/usr/sbin/nginx \\\n        --conf-path=/etc/nginx/nginx.conf \\\n        --http-log-path=/dev/stdout \\\n        --error-log-path=/dev/stderr \\\n        --lock-path=/tmp/nginx.lock \\\n        --pid-path=/tmp/nginx.pid \\\n        --http-client-body-temp-path=/tmp/body \\\n        --http-proxy-temp-path=/tmp/proxy \\\n    && make \\\n    && make install \\\n    && apk del ${devDeps} \\\n    && rm \"/usr/bin/luajit-${LUAJIT_VERSION}\" \\\n    && rm -rf /tmp/src \\\n    && rm -rf /var/cache/apk/* && rm lua-nginx-module.tar.gz\n\nENV NGINX_UID=1000 \\\n    HTTP_PORT=80 \\\n    HTTPS_PORT=443 \\\n    SUSPEND_PORT=81 \\\n    WS_PORT=443 \\\n    UNMS_HOST=unms \\\n    UNMS_HTTP_PORT=8081 \\\n    UNMS_WS_PORT=8082 \\\n    UNMS_WS_SHELL_PORT=8083 \\\n    UNMS_WS_API_PORT=8084 \\\n    UNMS_IP_WHITELIST=\"\"\\\n    UCRM_HOST=ucrm \\\n    UCRM_HTTP_PORT=80 \\\n    UCRM_SUSPEND_PORT=81 \\\n    PUBLIC_HTTPS_PORT=443 \\\n    SECURE_LINK_SECRET=enigma\n\nRUN echo \"unms ALL=(ALL) NOPASSWD: /usr/sbin/nginx -s *\" >> /etc/sudoers \\\n    && echo \"unms ALL=(ALL) NOPASSWD: /bin/cat *\" >> /etc/sudoers \\\n    && echo \"unms ALL=(ALL) NOPASSWD:SETENV: /refresh-configuration.sh *\" >> /etc/sudoers\n\nCOPY entrypoint.sh refresh-certificate.sh refresh-configuration.sh openssl.cnf ip-whitelist.sh /\nCOPY templates /templates\n\nRUN mkdir -p -m 777 /www\n\nCOPY public /www/public\n\nRUN chmod +x /entrypoint.sh /refresh-certificate.sh /refresh-configuration.sh /ip-whitelist.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}