{
  "startTime": 1674249041730,
  "endTime": 1674249042834,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "# Grafana container\n\n# Stage1: build from source\nFROM quay.io/cybozu/golang:1.17-focal AS build\nARG GRAFANA_VERSION=8.5.4\n\nENV NODE_OPTIONS=--max_old_space_size=6144\n\nWORKDIR /work/grafana\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN curl -sSLf https://github.com/grafana/grafana/archive/v${GRAFANA_VERSION}.tar.gz | \\\n    tar zxf - --strip-components 1 -C /work/grafana\n\n# Install Node.js 16.x & yarn\n# https://github.com/nodesource/distributions/blob/master/README.md#debinstall\nRUN curl -sSLf https://deb.nodesource.com/setup_16.x | bash - \\\n    && apt-get install -y --no-install-recommends nodejs \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && npm install --global yarn && npm cache clean --force;\n\nRUN yarn install --immutable && yarn cache clean;\nENV NODE_ENV production\nRUN yarn build\n\nRUN go mod verify\nRUN make build-go\n\n# Stage2: setup runtime container\n# refer to : https://github.com/grafana/grafana/blob/v7.3.7/Dockerfile#L35-L80\nFROM quay.io/cybozu/ubuntu:20.04\nARG GF_UID=\"10000\"\nARG GF_GID=\"10000\"\n\nENV PATH=/usr/share/grafana/bin:$PATH \\\n    GF_PATHS_CONFIG=\"/etc/grafana/grafana.ini\" \\\n    GF_PATHS_DATA=\"/var/lib/grafana\" \\\n    GF_PATHS_HOME=\"/usr/share/grafana\" \\\n    GF_PATHS_LOGS=\"/var/log/grafana\" \\\n    GF_PATHS_PLUGINS=\"/var/lib/grafana/plugins\" \\\n    GF_PATHS_PROVISIONING=\"/etc/grafana/provisioning\"\n\nWORKDIR $GF_PATHS_HOME\n\nCOPY --from=build /work/grafana/conf ./conf\n\nRUN mkdir -p \"$GF_PATHS_HOME/.aws\" && \\\n    groupadd -r -g $GF_GID grafana && \\\n    useradd -r -u $GF_UID -g grafana grafana && \\\n    mkdir -p \"$GF_PATHS_PROVISIONING/datasources\" \\\n             \"$GF_PATHS_PROVISIONING/dashboards\" \\\n             \"$GF_PATHS_PROVISIONING/notifiers\" \\\n             \"$GF_PATHS_PROVISIONING/plugins\" \\\n             \"$GF_PATHS_PROVISIONING/access-control\" \\\n             \"$GF_PATHS_LOGS\" \\\n             \"$GF_PATHS_PLUGINS\" \\\n             \"$GF_PATHS_DATA\" && \\\n    cp \"$GF_PATHS_HOME/conf/sample.ini\" \"$GF_PATHS_CONFIG\" && \\\n    cp \"$GF_PATHS_HOME/conf/ldap.toml\" /etc/grafana/ldap.toml && \\\n    chown -R 10000:10000 \"$GF_PATHS_DATA\" \"$GF_PATHS_HOME/.aws\" \"$GF_PATHS_LOGS\" \"$GF_PATHS_PLUGINS\" \"$GF_PATHS_PROVISIONING\" && \\\n    chmod 777 \"$GF_PATHS_DATA\" \"$GF_PATHS_HOME/.aws\" \"$GF_PATHS_LOGS\" \"$GF_PATHS_PLUGINS\" \"$GF_PATHS_PROVISIONING\"\n\nCOPY --from=build /work/grafana/bin/*/grafana-server /work/grafana/bin/*/grafana-cli ./bin/\nCOPY --from=build /work/grafana/public ./public\nCOPY --from=build /work/grafana/tools ./tools\nCOPY --from=build /work/grafana/LICENSE ./LICENSE\n\nEXPOSE 3000\n\nCOPY --from=build /work/grafana/packaging/docker/run.sh /run.sh\n\nUSER 10000:10000\nENTRYPOINT [ \"/run.sh\" ]\n"
}