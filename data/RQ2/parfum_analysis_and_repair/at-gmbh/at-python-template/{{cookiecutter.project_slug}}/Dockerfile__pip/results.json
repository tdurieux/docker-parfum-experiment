{
  "startTime": 1674219989111,
  "endTime": 1674219989878,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 30,
        "columnEnd": 52
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_IMAGE_TAG=3.7-stretch\n\n#\n# First stage: get dependencies, build the project, store binaries (whl)\n#\n\nFROM python:${PYTHON_IMAGE_TAG} as py-build\nWORKDIR /build\n# install and store the requirements (this stage will be re-used unless requirements.txt changes)\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt && pip wheel -r requirements.txt -w deps\n# add all other source files, force rebuild only from here\nCOPY . .\nRUN python setup.py install && python setup.py bdist_wheel\n\n#\n# Second stage: create the smallest possible image for deployment\n#\n\nFROM python:${PYTHON_IMAGE_TAG}\n{% if cookiecutter.company_name %}\nLABEL maintainer=\"{{ cookiecutter.company_name }}\"\n{% else %}\nLABEL maintainer=\"{{ cookiecutter.full_name }}\"\n{% endif %}\nWORKDIR /app\n# install all dependencies from wheel packages in the 'deps' folder\nCOPY --from=py-build /build/deps/ deps/\nRUN [ -n \"$(ls -A deps)\" ] && pip install --no-cache-dir deps/*.whl && rm -rf deps || echo \"no dependencies to install\"\n# install the application from a wheel package in the 'dist' folder\nCOPY --from=py-build /build/dist/ dist/\nRUN pip install --no-cache-dir dist/*.whl && rm -rf dist\nENTRYPOINT [\"python\", \"-OO\", \"-m\", \"{{ cookiecutter.module_name }}\"]\n"
}