{
  "startTime": 1674254880725,
  "endTime": 1674254881784,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 16,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This attempts to create an environment close to what ./bin/bootstrap.sh creates\n# with the images available. Note that we install code (and the virtual environment)\n# into /opt. There will be a copy of the source code in /arthur-redshift-etl. If you\n# make changes, run \"python setup.py develop\"!\n#\n# N.B. Make sure to keep the Dockerfile and bootstrap script in sync wrt. packages.\n\nFROM amazonlinux:2.0.20201218.1 AS local\n\n# AWS Default Region so that building images doesn't stumble over a missing region information.\nARG AWS_DEFAULT_REGION=us-east-1\nENV AWS_DEFAULT_REGION=\"$AWS_DEFAULT_REGION\"\n\n# See the same setting in bin/bootstrap.sh\nARG PROJ_NAME=redshift_etl\n\nRUN yum install -y \\\n        awscli \\\n        git \\\n        jq \\\n        libyaml-devel \\\n        openssh-clients \\\n        passwd \\\n        postgresql \\\n        procps-ng \\\n        python3 \\\n        python3-devel \\\n        sudo \\\n        tar \\\n        tmux \\\n        vim-minimal && rm -rf /var/cache/yum\n\nRUN amazon-linux-extras install docker\n\n# Run as non-priviledged user \"arthur\".\nRUN useradd --comment 'Arthur ETL' --user-group --groups wheel --create-home arthur  && \\\n    mkdir --parent /opt/data-warehouse \"/opt/local/$PROJ_NAME\" /opt/src/arthur-redshift-etl && \\\n    chown -R arthur.arthur /opt/*\n\nRUN echo \"arthur:arthur\" | chpasswd\n\nUSER arthur\n\n# The .bashrc will ensure the virutal environment is activated when running interactive shells.\nCOPY --chown=arthur:arthur docker/* /home/arthur/\n\n# Install code under /opt/local/ (although it is under /tmp/ on an EC2 host).\nCOPY --chown=arthur:arthur \\\n    bin/create_validation_credentials \\\n    bin/release_version.sh \\\n    bin/send_health_check.sh \\\n    bin/sync_env.sh \\\n    bin/upload_env.sh \\\n    \"/opt/local/$PROJ_NAME/bin/\"\n\nCOPY requirements*.txt /tmp/\nRUN python3 -m venv \"/opt/local/$PROJ_NAME/venv\" && \\\n    source \"/opt/local/$PROJ_NAME/venv/bin/activate\" && \\\n    python3 -m pip install --upgrade pip==20.3.4 --disable-pip-version-check --no-cache-dir && \\\n    python3 -m pip install --requirement /tmp/requirements-all.txt --disable-pip-version-check --no-cache-dir\n\n# Create an empty .pgpass file to help with the format of this file.\nRUN echo '# Format to set password when updating users: *:5439:*:<user>:<password>' > /home/arthur/.pgpass \\\n    && chmod go= /home/arthur/.pgpass\n\n# Note that at runtime we (can or may) mount the local directory here.\n# But we want to be independent of the source so copy everything over once.\nWORKDIR /opt/src/arthur-redshift-etl\nCOPY --chown=arthur:arthur ./ ./\n\n# We run this here once in case somebody overrides the entrypoint.\nRUN source \"/opt/local/$PROJ_NAME/venv/bin/activate\" && \\\n    python3 setup.py install && \\\n    rm -rf build dist && \\\n    python3 -m etl.selftest && \\\n    arthur.py --version\n\n# Whenever there is an ETL running, it offers progress information on port 8086.\nEXPOSE 8086\n\n# The data warehouse (with schemas, config, etc.) will be mounted here:\nWORKDIR /opt/data-warehouse\n\nENTRYPOINT [\"/home/arthur/entrypoint.sh\"]\nCMD [\"/bin/bash\", \"--login\"]\n\n# Second stage, overriding entrypoint in the image to not have to override it everytime\n# we use the Arthur image in a remote environment. entrypoint_remote.sh will fetch config\n# and schema files from S3\nFROM local AS remote\nCOPY --chown=arthur:arthur \\\n    bin/bootstrap_remote_dw.sh \\\n    \"/opt/local/$PROJ_NAME/bin/\"\nENV PROJ_NAME=$PROJ_NAME\nENTRYPOINT [\"/home/arthur/entrypoint_remote.sh\"]\n"
}