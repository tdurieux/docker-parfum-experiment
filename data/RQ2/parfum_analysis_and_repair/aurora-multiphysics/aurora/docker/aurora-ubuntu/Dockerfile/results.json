{
  "startTime": 1674216658077,
  "endTime": 1674216659037,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 61
      }
    }
  ],
  "repairedDockerfile": "# To make use of multiple cores during the compile stages of the docker build\n# docker build -t aurora-ubuntu --build-arg compile_cores=8 .\n\n# To compile a particular git sha use\n# docker build -t aurora-ubuntu --build-arg build_git_sha=${GITHUB_SHA} .\n\n# To compile with gcov support and generate coverage report\n# docker build -t aurora-ubuntu --build-arg test_coverage=true .\n\n# Get MOOSE image with aurora deps\nFROM helenbrooks/aurora-deps-ubuntu:v.0.2.1\n\n# By default one core is used to compile\nARG compile_cores=1\n\n# By default checkout main branch\nARG build_git_sha=\"main\"\n\n# Should we generate a coverage report\nARG test_coverage=false\n\n# Coverage repo token\nARG coveralls_token=\"\"\n\n# Branch name for coveralls\nARG coveralls_branch=\"\"\n\n# Install pip and gcovr if we want test coverage\nRUN if \"$test_coverage\" ; then \\\n       apt-get install --no-install-recommends -y python3-pip && \\\n       pip install --no-cache-dir cpp-coveralls && \\\n       pip install --no-cache-dir coveralls; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n# Build\nRUN if \"$test_coverage\" ; then \\\n       export CXXFLAGS=\"--coverage $CXXFLAGS\"; \\\n       export CFLAGS=\"-fprofile-arcs -ftest-coverage\"; \\\n       echo \"Generating test coverage\"; \\\n    fi && \\\n    cd /home && \\\n    git clone https://github.com/aurora-multiphysics/aurora.git && \\\n    cd aurora && \\\n    git checkout \"$build_git_sha\" && \\\n    cd data && \\\n    tar xzvf endfb71_hdf5.tgz && \\\n    export OPENMC_CROSS_SECTIONS=/home/aurora/data/endfb71_hdf5/cross_sections.xml && \\\n    cd ../openmc/unit && \\\n    make -j\"$compile_cores\" && \\\n    cd ../../unit && \\\n    make -j\"$compile_cores\" && \\\n    ./run_tests && rm endfb71_hdf5.tgz\n\n# Generate test coverage report using coveralls and upload\nRUN if \"$test_coverage\" ; then \\\n       export COVERALLS_REPO_TOKEN=\"$coveralls_token\" && \\\n       export CI_BRANCH=\"$coveralls_branch\" && \\\n       cd /home/aurora/ && \\\n       cpp-coveralls -i src/ -i include/ -i openmc/src/ -i openmc/include/ --exclude-pattern \"/usr/*\" --dump cpp_cov.json && \\\n       coveralls --merge=cpp_cov.json; \\\n    fi\n"
}