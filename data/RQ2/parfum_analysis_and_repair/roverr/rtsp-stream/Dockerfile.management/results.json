{
  "startTime": 1674246600184,
  "endTime": 1674246601136,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Build server\nFROM golang:1.13-alpine AS build-backend\nADD ./main.go /go/src/github.com/Roverr/rtsp-stream/main.go\nADD ./core /go/src/github.com/Roverr/rtsp-stream/core\nADD ./Gopkg.toml /go/src/github.com/Roverr/rtsp-stream/Gopkg.toml\nWORKDIR /go/src/github.com/Roverr/rtsp-stream\nRUN apk add --update --no-cache git\nRUN go get -u github.com/golang/dep/cmd/dep\nRUN dep ensure -v\nRUN go build -o server\n\n## Build UI\nFROM node:lts-slim as build-ui\nADD ./ui /tmp/ui\nWORKDIR /tmp/ui\nRUN npm install && npm cache clean --force;\nRUN echo API_URL=http://127.0.0.1:8080 > ./src/.env\nRUN npm run build\n\n## Creating potential production image\nFROM woahbase/alpine-supervisor:x86_64\nRUN apk update && apk add bash ca-certificates ffmpeg nodejs npm && rm -rf /var/cache/apk/*\nRUN npm install http-server -g && npm cache clean --force;\nCOPY ./build/management/supervisord.conf /etc/supervisord.conf\nWORKDIR /app\nCOPY --from=build-backend /go/src/github.com/Roverr/rtsp-stream/server /app/\nCOPY ./build/rtsp-stream.yml /app/rtsp-stream.yml\nCOPY --from=build-ui /tmp/ui/dist /ui/\n"
}