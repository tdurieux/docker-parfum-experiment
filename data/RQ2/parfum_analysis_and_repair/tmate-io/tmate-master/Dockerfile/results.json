{
  "startTime": 1674253728150,
  "endTime": 1674253728739,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 17,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM elixir:1.9-alpine AS build\n\nRUN mix local.hex --force && mix local.rebar --force\nRUN apk --no-cache add git npm\n\nWORKDIR /build\n\nCOPY mix.exs .\nCOPY mix.lock .\n\nENV MIX_ENV prod\n\nRUN mix deps.get\nRUN mix deps.compile\n\nCOPY assets/package-lock.json assets/package-lock.json\nCOPY assets/package.json assets/package.json\nRUN cd assets && npm install && npm cache clean --force;\n\nCOPY assets assets\nRUN cd assets && npm run deploy\n\nCOPY lib lib\nCOPY test test\nCOPY config config\nCOPY priv/gettext priv/gettext\nCOPY priv/repo priv/repo\nCOPY rel rel\n\nENV HOSTNAME \"master-0\"\nRUN mix do phx.digest, distillery.release --no-tar && \\\n        mkdir _build/lib-layer && \\\n        mv _build/prod/rel/tmate/lib/tmate* _build/lib-layer\n\n### Minimal run-time image\nFROM alpine:3.9\n\nRUN apk --no-cache add ncurses-libs openssl ca-certificates bash\n\nRUN adduser -D app\n\nENV MIX_ENV prod\n\nWORKDIR /opt/app\n\n# Copy release from build stage\n# We copy in two passes to benefit from docker layers\n# Note \"COPY some_dir dst\" will copy the content of some_dir into dst\nCOPY --from=build /build/_build/prod/rel/* .\nCOPY --from=build /build/_build/lib-layer lib/\n\nUSER app\n\nRUN mkdir /tmp/app\nENV RELEASE_MUTABLE_DIR /tmp/app\nENV REPLACE_OS_VARS true\n\n# Start command\nCMD [\"/opt/app/bin/tmate\", \"foreground\"]\n"
}