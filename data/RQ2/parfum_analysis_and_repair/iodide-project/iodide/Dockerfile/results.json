{
  "startTime": 1674251832158,
  "endTime": 1674251833118,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.8-slim AS python-builder\n\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\nENV PATH=\"/venv/bin:$PATH\"\n\nWORKDIR /app\n\nRUN apt-get update && \\\n    apt-get -y upgrade && \\\n    apt-get -y --no-install-recommends install \\\n    libpq-dev \\\n    libffi-dev \\\n    python-dev \\\n    build-essential && rm -rf /var/lib/apt/lists/*;\n\n# Install virtualenv\nRUN pip install --no-cache-dir virtualenv==20.0.1\nRUN virtualenv --seeder pip /venv\n\n# Install base python dependencies\nCOPY requirements/*.txt ./requirements/\nRUN pip install --require-hashes --no-cache-dir -r requirements/build.txt\n\nFROM python:3.8-slim AS base\n\n# install a few essentials and clean apt caches afterwards\nRUN mkdir -p \\\n        /usr/share/man/man1 \\\n        /usr/share/man/man2 \\\n        /usr/share/man/man3 \\\n        /usr/share/man/man4 \\\n        /usr/share/man/man5 \\\n        /usr/share/man/man6 \\\n        /usr/share/man/man7 \\\n        /usr/share/man/man8 && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        apt-transport-https postgresql-client netcat build-essential git curl  && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\nENV PATH=\"/venv/bin:$PATH\"\nRUN echo export PATH=\"/venv/bin:\\$PATH\" > /etc/profile.d/venv.sh\n\nRUN groupadd --gid 10001 app && useradd -g app --uid 10001 --shell /usr/sbin/nologin --create-home app\n\nCOPY --chown=app:app --from=python-builder /venv /venv\n\nWORKDIR /app\nCOPY . /app\n\n# Set user permissions\nCOPY --chown=app:app . .\nRUN chown app /app\nUSER app\n\n# Collect static files\nRUN DEBUG=False SECRET_KEY=foo ./manage.py collectstatic --noinput -c\n\n# Using /bin/bash as the entrypoint works around some volume mount issues on Windows\n# where volume-mounted files do not have execute bits set.\n# https://github.com/docker/compose/issues/2301#issuecomment-154450785 has additional background.\nENTRYPOINT [\"/bin/bash\", \"/app/bin/run\"]\n\nEXPOSE 8000\n\nFROM base AS devapp\n\n# Install dev python dependencies\nRUN pip install --require-hashes --no-cache-dir -r requirements/all.txt\nUSER app\n"
}