{
  "startTime": 1674215519137,
  "endTime": 1674215520307,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedDockerfile": "FROM debian:sid\n\nLABEL maintainer \"fooinha@gmail.com\"\n\n# Build arguments\nARG DEBIAN_REPO_HOST=httpredir.debian.org\n\n# Mirror to my location\nRUN echo \"deb http://${DEBIAN_REPO_HOST}/debian sid main\" > /etc/apt/sources.list\nRUN echo \"deb-src http://${DEBIAN_REPO_HOST}/debian sid main\" >> /etc/apt/sources.list\n\n# Update\nRUN DEBIAN_FRONTEND=noninteractive apt-get update || true\n\n# Install build dependencies\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y --fix-missing \\\n    apt-utils \\\n    autoconf \\\n    automake \\\n    bind9-host \\\n    build-essential \\\n    dh-autoreconf \\\n    cpanminus \\\n    curl \\\n    devscripts \\\n    exuberant-ctags \\\n    git-core \\\n    jq \\\n    llvm \\\n    libgeoip1 \\\n    libgeoip-dev \\\n    libpcre3 \\\n    libpcre3-dbg \\\n    libpcre3-dev \\\n    libperl-dev \\\n    libmagic-dev \\\n    libtool \\\n    lsof \\\n    make \\\n    mercurial \\\n    ngrep \\\n    procps \\\n    python3 \\\n    telnet \\\n    tcpflow \\\n    valgrind \\\n    vim \\\n    wget \\\n    zlib1g \\\n    zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# Create build directory\nRUN mkdir -p /build\n\nWORKDIR /build\n\nVOLUME [\"/build/nginx-ssl-ja3\"]\n\n# Get test framework\nRUN git clone https://github.com/nginx/nginx-tests\n\n# Get openssl master from git\nRUN git clone https://github.com/openssl/openssl\n\n# Build and install openssl\nWORKDIR /build/openssl\n\nRUN git checkout OpenSSL_1_1_1 -b patched\nCOPY patches/openssl.extensions.patch /build/openssl\nRUN patch -p1 < openssl.extensions.patch\nRUN ./config -d\nRUN make\nRUN make install\n\n# Clone from nginx\nWORKDIR /build\nRUN hg clone http://hg.nginx.org/nginx\n\n# Patch nginx for fetching ssl client extensions\nWORKDIR /build/nginx\nCOPY patches/nginx.latest.patch /build/nginx\nRUN patch -p1 < nginx.latest.patch\n\n# Install files\nRUN mkdir -p /usr/local/nginx/conf/\nCOPY docker/debian-nginx-ssl-ja3/nginx.conf /usr/local/nginx/conf/nginx.conf\n\n# Install self-signed certificate\nRUN LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib /usr/local/bin/openssl req -new -x509 -days 365 -nodes -out /usr/local/nginx/conf/cert.pem -keyout /usr/local/nginx/conf/rsa.key -subj \"/C=PT/ST=Lisbon/L=Lisbon/O=Development/CN=foo.local\"\n\n# vim config\nCOPY docker/debian-nginx-ssl-ja3/vimrc /etc/vim/vimrc\n\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' | tee -a /root/.bashrc\nRUN echo 'export PATH=$PATH:/usr/local/bin:/usr/local/nginx/sbin' | tee -a /root/.bashrc\nRUN echo '' | tee -a /root/.bashrc\nRUN echo 'export ASAN_OPTIONS=symbolize=1' | tee -a /root/.bashrc\nRUN echo 'export export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer' | tee -a /root/.bashrc\nRUN echo '' | tee -a /root/.bashrc\n\nWORKDIR /build\nCOPY docker/debian-nginx-ssl-ja3/compile.sh /build/compile.sh\nRUN echo 'TO COMPILE RUN:\\n    cd nginx\\n    ASAN_OPTIONS=symbolize=1 ./auto/configure --add-module=/build/nginx-ssl-ja3 --with-http_ssl_module --with-stream_ssl_module --with-debug --with-stream --with-cc-opt=\"-fsanitize=address -O -fno-omit-frame-pointer\" --with-ld-opt=\"-L/usr/local/lib -Wl,-E -lasan\"\\n    make install' | tee -a /build/COMPILE.ASAN.README\nRUN echo 'TO TEST RUN:\\n    nginx &\\n    openssl s_client -connect 127.0.0.1:12345 -cipher \"AES128-SHA\" -curves secp521r1' | tee -a /build/TEST.README\n\n"
}