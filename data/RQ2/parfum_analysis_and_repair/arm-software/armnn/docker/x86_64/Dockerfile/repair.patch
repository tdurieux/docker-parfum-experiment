diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/arm-software/armnn/docker/x86_64/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/arm-software/armnn/docker/x86_64/Dockerfile/repaired.Dockerfile
index e96b1e9..4c8a239 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/arm-software/armnn/docker/x86_64/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/arm-software/armnn/docker/x86_64/Dockerfile/repaired.Dockerfile
@@ -23,7 +23,7 @@ trusted-host = pypi.python.org \n \
 \t              files.pythonhosted.org" >> /etc/pip.conf
 
 # Get basic packages
-RUN apt-get update && apt-get install -y \
+RUN apt-get update && apt-get install --no-install-recommends -y \
     apparmor \
     aufs-tools \
     automake \
@@ -70,7 +70,7 @@ RUN apt-get update && apt-get install -y \
     g++ && rm -rf /var/lib/apt/lists/*
 
 # Install Cross-compiling ToolChain
-RUN apt-get update && apt-get install -y crossbuild-essential-arm64 crossbuild-essential-armhf
+RUN apt-get update && apt-get install --no-install-recommends -y crossbuild-essential-arm64 crossbuild-essential-armhf && rm -rf /var/lib/apt/lists/*;
 
 # Install Cmake 3.19
 RUN cd $HOME && \
@@ -79,14 +79,14 @@ RUN cd $HOME && \
     cd $HOME/cmake-3.19.0 && \
     ./bootstrap && \
     make && \
-    make install
+    make install && rm cmake-3.19.0.tar.gz
 
 # Build and install Google's Protobuf library
 # Download and Extract
 RUN mkdir -p $HOME/google && \
     cd $HOME/google && \
     wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.0/protobuf-all-3.12.0.tar.gz && \
-    tar -zxvf protobuf-all-3.12.0.tar.gz
+    tar -zxvf protobuf-all-3.12.0.tar.gz && rm protobuf-all-3.12.0.tar.gz
 
 # Build a native (x86_64) version
 RUN cd $HOME/google/protobuf-3.12.0 && \
@@ -115,8 +115,8 @@ RUN cd $HOME/google/protobuf-3.12.0 && \
     make install -j$(nproc)
 
 # Dep Error - Bug ARMNN
-RUN apt-get update && apt-get install -y \
-     python-numpy
+RUN apt-get update && apt-get install --no-install-recommends -y \
+     python-numpy && rm -rf /var/lib/apt/lists/*;
 
 # Setup Env
 # ENV PATH=$HOME/armnn-devenv/google/x86_64_pb_install/bin/:$PATH
@@ -150,8 +150,8 @@ RUN cd $HOME/armnn-devenv && \
 
 # Build 64-bit TF Lite
 RUN cd $HOME/armnn-devenv && \
-    curl -LO https://storage.googleapis.com/mirror.tensorflow.org/developer.arm.com/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz && \
-    mkdir tflite-toolchains &&\
+    curl -f -LO https://storage.googleapis.com/mirror.tensorflow.org/developer.arm.com/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz && \
+    mkdir tflite-toolchains && \
     tar xvf gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz -C tflite-toolchains && \
     mkdir -p tflite/build && \
     cd tflite/build && \
@@ -164,11 +164,11 @@ RUN cd $HOME/armnn-devenv && \
           -DTFLITE_ENABLE_XNNPACK=OFF \
           -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
           $HOME/armnn-devenv/tensorflow/tensorflow/lite/ && \
-    cmake --build .
+    cmake --build . && rm gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz
 
 # Build 32-bit TF Lite
 RUN cd $HOME/armnn-devenv && \
-    curl -LO https://storage.googleapis.com/mirror.tensorflow.org/developer.arm.com/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz && \
+    curl -f -LO https://storage.googleapis.com/mirror.tensorflow.org/developer.arm.com/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz && \
     mkdir tflite-toolchains-32 && \
     tar xf gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz -C tflite-toolchains-32 && \
     mkdir -p tflite-32/build && \
@@ -182,14 +182,14 @@ RUN cd $HOME/armnn-devenv && \
           -DTFLITE_ENABLE_XNNPACK=OFF \
           -DCMAKE_SYSTEM_PROCESSOR=armv7a \
           $HOME/armnn-devenv/tensorflow/tensorflow/lite/ && \
-    cmake --build .
+    cmake --build . && rm gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz
 
 # Download Flatbuffers
 RUN cd $HOME/armnn-devenv && \
     wget -O flatbuffers-1.12.0.tar.gz https://github.com/google/flatbuffers/archive/v1.12.0.tar.gz && \
     tar xf flatbuffers-1.12.0.tar.gz && \
     cd flatbuffers-1.12.0 && \
-    rm -f CMakeCache.txt
+    rm -f CMakeCache.txt && rm flatbuffers-1.12.0.tar.gz
 
 # Build native x86_64 version of Flatbuffers
 RUN cd $HOME/armnn-devenv && cd flatbuffers-1.12.0 && \