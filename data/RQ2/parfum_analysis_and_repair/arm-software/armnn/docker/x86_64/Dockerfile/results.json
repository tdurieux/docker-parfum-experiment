{
  "startTime": 1674220723760,
  "endTime": 1674220726155,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 182
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 184
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 69,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 22,
        "columnEnd": 94
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 22,
        "columnEnd": 94
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 22,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nENV TERM linux\nENV DEBIAN_FRONTEND noninteractive\n\n# Forward system proxy setting\n# ARG proxy\n# ENV http_proxy $proxy\n# ENV https_proxy $proxy\n\n# Basic apt update\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends locales ca-certificates &&  rm -rf /var/lib/apt/lists/*\n\n# Set the locale to en_US.UTF-8, because the Yocto build fails without any locale set.\nRUN locale-gen en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# Again, off the certificare\nRUN echo \"check_certificate = off\" >> ~/.wgetrc\nRUN echo \"[global] \\n\\\ntrusted-host = pypi.python.org \\n \\\n\\t               pypi.org \\n \\\n\\t              files.pythonhosted.org\" >> /etc/pip.conf\n\n# Get basic packages\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    apparmor \\\n    aufs-tools \\\n    automake \\\n    bash-completion \\\n    btrfs-tools \\\n    build-essential \\\n    cmake \\\n    createrepo \\\n    curl \\\n    dpkg-sig \\\n    g++ \\\n    gcc \\\n    git \\\n    iptables \\\n    jq \\\n    libapparmor-dev \\\n    libc6-dev \\\n    libcap-dev \\\n    libsystemd-dev \\\n    libyaml-dev \\\n    mercurial \\\n    net-tools \\\n    parallel \\\n    pkg-config \\\n    python-dev \\\n    python-mock \\\n    python-pip \\\n    python-setuptools \\\n    python-websocket \\\n    golang-go \\\n    iproute2 \\\n    iputils-ping \\\n    vim-common \\\n    vim \\\n    wget \\\n    libtool \\\n    unzip \\\n    scons \\\n    curl \\\n    autoconf \\\n    libtool \\\n    build-essential \\\n    libssl-dev \\\n    g++ && rm -rf /var/lib/apt/lists/*\n\n# Install Cross-compiling ToolChain\nRUN apt-get update && apt-get install --no-install-recommends -y crossbuild-essential-arm64 crossbuild-essential-armhf && rm -rf /var/lib/apt/lists/*;\n\n# Install Cmake 3.19\nRUN cd $HOME && \\\n    wget -O cmake-3.19.0.tar.gz https://cmake.org/files/v3.19/cmake-3.19.0.tar.gz && \\\n    tar -xzf cmake-3.19.0.tar.gz && \\\n    cd $HOME/cmake-3.19.0 && \\\n    ./bootstrap && \\\n    make && \\\n    make install && rm cmake-3.19.0.tar.gz\n\n# Build and install Google's Protobuf library\n# Download and Extract\nRUN mkdir -p $HOME/google && \\\n    cd $HOME/google && \\\n    wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.0/protobuf-all-3.12.0.tar.gz && \\\n    tar -zxvf protobuf-all-3.12.0.tar.gz && rm protobuf-all-3.12.0.tar.gz\n\n# Build a native (x86_64) version\nRUN cd $HOME/google/protobuf-3.12.0 && \\\n    mkdir x86_build && cd x86_build && \\\n    ../configure --prefix=$HOME/armnn-devenv/google/x86_64_pb_install && \\\n    make install -j$(nproc)\n\n# Build the arm64 version of the protobuf libraries\nRUN cd $HOME/google/protobuf-3.12.0 && \\\n    mkdir arm64_build && cd arm64_build && \\\n    export CC=aarch64-linux-gnu-gcc && \\\n    export CXX=aarch64-linux-gnu-g++ && \\\n    ../configure --host=aarch64-linux \\\n    --prefix=$HOME/armnn-devenv/google/arm64_pb_install \\\n    --with-protoc=$HOME/armnn-devenv/google/x86_64_pb_install/bin/protoc && \\\n    make install -j$(nproc)\n\n# Build the arm32 version of the protobuf libraries\nRUN cd $HOME/google/protobuf-3.12.0 && \\\n    mkdir arm32_build && cd arm32_build && \\\n    export CC=arm-linux-gnueabihf-gcc && \\\n    export CXX=arm-linux-gnueabihf-g++ && \\\n    ../configure --host=arm-linux \\\n    --prefix=$HOME/armnn-devenv/google/arm32_pb_install \\\n    --with-protoc=$HOME/armnn-devenv/google/x86_64_pb_install/bin/protoc && \\\n    make install -j$(nproc)\n\n# Dep Error - Bug ARMNN\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n     python-numpy && rm -rf /var/lib/apt/lists/*;\n\n# Setup Env\n# ENV PATH=$HOME/armnn-devenv/google/x86_64_pb_install/bin/:$PATH\n# ENV LD_LIBRARY_PATH=$HOME/armnn-devenv/google/x86_64_pb_install/lib/:$LD_LIBRARY_PATH\n\n# Download ArmNN 64-bit\nRUN cd $HOME/armnn-devenv && git clone \"https://review.mlplatform.org/ml/armnn\" && \\\n    cd armnn/ && git checkout master\n\n# Download ArmNN 32-bit\nRUN cd $HOME/armnn-devenv && git clone \"https://review.mlplatform.org/ml/armnn\" armnn-32 && \\\n    cd armnn-32/ && git checkout master\n\n# Build 64-bit Compute Library\nRUN cd $HOME/armnn-devenv/ && git clone https://review.mlplatform.org/ml/ComputeLibrary && \\\n    cd ComputeLibrary && \\\n    git checkout $($HOME/armnn-devenv/armnn/scripts/get_compute_library.sh -p) && \\\n    scons Werror=0 arch=arm64-v8a neon=1 opencl=1 embed_kernels=1 extra_cxx_flags=\"-fPIC\" -j$(nproc)\n\n# Build 32-bit Compute Library\nRUN cd $HOME/armnn-devenv/ && mkdir ComputeLibrary_32 && git clone https://review.mlplatform.org/ml/ComputeLibrary ComputeLibrary_32 && \\\n    cd ComputeLibrary_32 &&\\\n    git checkout $($HOME/armnn-devenv/armnn/scripts/get_compute_library.sh -p) && \\\n    scons Werror=0 arch=armv7a neon=1 opencl=1 embed_kernels=1 extra_cxx_flags=\"-fPIC\" -j$(nproc)\n\n# Download Tensorflow (Checkout latest tested version of TF using get_tensorflow.sh)\nRUN cd $HOME/armnn-devenv && \\\n    git clone https://github.com/tensorflow/tensorflow.git && \\\n    cd tensorflow && \\\n    git checkout $($HOME/armnn-devenv/armnn/scripts/get_tensorflow.sh -p)\n\n# Build 64-bit TF Lite\nRUN cd $HOME/armnn-devenv && \\\n    curl -f -LO https://storage.googleapis.com/mirror.tensorflow.org/developer.arm.com/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz && \\\n    mkdir tflite-toolchains && \\\n    tar xvf gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz -C tflite-toolchains && \\\n    mkdir -p tflite/build && \\\n    cd tflite/build && \\\n    ARMCC_PREFIX=$HOME/armnn-devenv/tflite-toolchains/gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu/bin/aarch64-linux-gnu- && \\\n    ARMCC_FLAGS=\"-funsafe-math-optimizations\" && \\\n    cmake -DCMAKE_C_COMPILER=${ARMCC_PREFIX}gcc \\\n          -DCMAKE_CXX_COMPILER=${ARMCC_PREFIX}g++ \\\n          -DCMAKE_C_FLAGS=\"${ARMCC_FLAGS}\" -DCMAKE_CXX_FLAGS=\"${ARMCC_FLAGS}\" \\\n          -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON  -DCMAKE_SYSTEM_NAME=Linux \\\n          -DTFLITE_ENABLE_XNNPACK=OFF \\\n          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \\\n          $HOME/armnn-devenv/tensorflow/tensorflow/lite/ && \\\n    cmake --build . && rm gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz\n\n# Build 32-bit TF Lite\nRUN cd $HOME/armnn-devenv && \\\n    curl -f -LO https://storage.googleapis.com/mirror.tensorflow.org/developer.arm.com/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz && \\\n    mkdir tflite-toolchains-32 && \\\n    tar xf gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz -C tflite-toolchains-32 && \\\n    mkdir -p tflite-32/build && \\\n    cd tflite-32/build && \\\n    ARMCC_PREFIX=$HOME/armnn-devenv/tflite-toolchains-32/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin/arm-linux-gnueabihf- && \\\n    ARMCC_FLAGS=\"-funsafe-math-optimizations\" && \\\n    cmake -DCMAKE_C_COMPILER=${ARMCC_PREFIX}gcc \\\n          -DCMAKE_CXX_COMPILER=${ARMCC_PREFIX}g++ \\\n          -DCMAKE_C_FLAGS=\"${ARMCC_FLAGS}\" -DCMAKE_CXX_FLAGS=\"${ARMCC_FLAGS}\" \\\n          -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON  -DCMAKE_SYSTEM_NAME=Linux \\\n          -DTFLITE_ENABLE_XNNPACK=OFF \\\n          -DCMAKE_SYSTEM_PROCESSOR=armv7a \\\n          $HOME/armnn-devenv/tensorflow/tensorflow/lite/ && \\\n    cmake --build . && rm gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz\n\n# Download Flatbuffers\nRUN cd $HOME/armnn-devenv && \\\n    wget -O flatbuffers-1.12.0.tar.gz https://github.com/google/flatbuffers/archive/v1.12.0.tar.gz && \\\n    tar xf flatbuffers-1.12.0.tar.gz && \\\n    cd flatbuffers-1.12.0 && \\\n    rm -f CMakeCache.txt && rm flatbuffers-1.12.0.tar.gz\n\n# Build native x86_64 version of Flatbuffers\nRUN cd $HOME/armnn-devenv && cd flatbuffers-1.12.0 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. -DFLATBUFFERS_BUILD_FLATC=1 \\\n         -DCMAKE_INSTALL_PREFIX:PATH=$HOME/armnn-devenv/flatbuffers \\\n         -DFLATBUFFERS_BUILD_TESTS=0 && \\\n    make all install -j$(nproc)\n\n# Build arm64 version of Flatbuffers\nRUN cd $HOME/armnn-devenv && cd flatbuffers-1.12.0 && \\\n    mkdir build-arm64 && \\\n    cd build-arm64 && \\\n    CXXFLAGS=\"-fPIC\" cmake .. -DCMAKE_C_COMPILER=/usr/bin/aarch64-linux-gnu-gcc \\\n         -DCMAKE_CXX_COMPILER=/usr/bin/aarch64-linux-gnu-g++ \\\n         -DFLATBUFFERS_BUILD_FLATC=1 \\\n         -DCMAKE_INSTALL_PREFIX:PATH=$HOME/armnn-devenv/flatbuffers-arm64 \\\n         -DFLATBUFFERS_BUILD_TESTS=0 && \\\n    make all install -j$(nproc)\n\n# Build arm32 version of Flatbuffers\nRUN cd $HOME/armnn-devenv && cd flatbuffers-1.12.0  && \\\n    mkdir build-arm32 && \\\n    cd build-arm32 && \\\n    CXXFLAGS=\"-fPIC\" cmake .. -DCMAKE_C_COMPILER=/usr/bin/arm-linux-gnueabihf-gcc \\\n         -DCMAKE_CXX_COMPILER=/usr/bin/arm-linux-gnueabihf-g++ \\\n         -DFLATBUFFERS_BUILD_FLATC=1 \\\n         -DCMAKE_INSTALL_PREFIX:PATH=$HOME/armnn-devenv/flatbuffers-arm32 \\\n         -DFLATBUFFERS_BUILD_TESTS=0 && \\\n    make all install -j$(nproc)\n\n# Build onnx\nRUN cd $HOME/armnn-devenv && git clone https://github.com/onnx/onnx.git && \\\n    cd onnx && \\\n    git fetch https://github.com/onnx/onnx.git 553df22c67bee5f0fe6599cff60f1afc6748c635 && git checkout FETCH_HEAD && \\\n    LD_LIBRARY_PATH=$HOME/armnn-devenv/google/x86_64_pb_install/lib:$LD_LIBRARY_PATH \\\n    $HOME/armnn-devenv/google/x86_64_pb_install/bin/protoc \\\n    onnx/onnx.proto --proto_path=. --proto_path=../google/x86_64_pb_install/include --cpp_out $HOME/armnn-devenv/onnx\n\n# Generate TF Lite Schema 64-bit\nRUN cd $HOME/armnn-devenv && \\\n    cd tflite && \\\n    cp ../tensorflow/tensorflow/lite/schema/schema.fbs . && \\\n    ../flatbuffers-1.12.0/build/flatc -c --gen-object-api --reflect-types --reflect-names schema.fbs\n\n# Generate TF Lite Schema 32-bit\nRUN cd $HOME/armnn-devenv && \\\n    cd tflite-32 && \\\n    cp ../tensorflow/tensorflow/lite/schema/schema.fbs . && \\\n    ../flatbuffers-1.12.0/build/flatc -c --gen-object-api --reflect-types --reflect-names schema.fbs\n\n# Build 64-bit ArmNN\nRUN cd $HOME/armnn-devenv && \\\n    cd armnn && mkdir build && cd build && \\\n    export CXX=aarch64-linux-gnu-g++ && \\\n    export CC=aarch64-linux-gnu-gcc && \\\n    cmake .. \\\n    -DCMAKE_CXX_FLAGS=-w \\\n    -DBUILD_TESTS=1 \\\n    -DARMCOMPUTE_ROOT=$HOME/armnn-devenv/ComputeLibrary \\\n    -DARMCOMPUTE_BUILD_DIR=$HOME/armnn-devenv/ComputeLibrary/build/ \\\n    -DARMCOMPUTENEON=1 -DARMCOMPUTECL=1 -DARMNNREF=1 \\\n    -DONNX_GENERATED_SOURCES=$HOME/armnn-devenv/onnx \\\n    -DBUILD_ONNX_PARSER=1 \\\n    -DBUILD_TF_LITE_PARSER=1 \\\n    -DBUILD_ARMNN_TFLITE_DELEGATE=1 \\\n    -DTENSORFLOW_ROOT=$HOME/armnn-devenv/tensorflow \\\n    -DTFLITE_LIB_ROOT=$HOME/armnn-devenv/tflite/build \\\n    -DTF_LITE_SCHEMA_INCLUDE_PATH=$HOME/armnn-devenv/tflite \\\n    -DFLATBUFFERS_ROOT=$HOME/armnn-devenv/flatbuffers-arm64 \\\n    -DFLATC_DIR=$HOME/armnn-devenv/flatbuffers-1.12.0/build \\\n    -DPROTOBUF_ROOT=$HOME/armnn-devenv/google/x86_64_pb_install \\\n    -DPROTOBUF_LIBRARY_DEBUG=$HOME/armnn-devenv/google/arm64_pb_install/lib/libprotobuf.so.23.0.0 \\\n    -DPROTOBUF_LIBRARY_RELEASE=$HOME/armnn-devenv/google/arm64_pb_install/lib/libprotobuf.so.23.0.0 && \\\n    make -j$(nproc)\n\n# Build 32-bit ArmNN\nRUN cd $HOME/armnn-devenv && \\\n    cd armnn-32 && mkdir build && cd build && \\\n    export CXX=arm-linux-gnueabihf-g++ && \\\n    export CC=arm-linux-gnueabihf-gcc && \\\n    cmake .. \\\n    -DCMAKE_CXX_FLAGS=-w \\\n    -DBUILD_TESTS=1 \\\n    -DARMCOMPUTE_ROOT=$HOME/armnn-devenv/ComputeLibrary_32 \\\n    -DARMCOMPUTE_BUILD_DIR=$HOME/armnn-devenv/ComputeLibrary_32/build/ \\\n    -DARMCOMPUTENEON=1 -DARMCOMPUTECL=1 -DARMNNREF=1 \\\n    -DONNX_GENERATED_SOURCES=$HOME/armnn-devenv/onnx \\\n    -DBUILD_ONNX_PARSER=1 \\\n    -DBUILD_TF_LITE_PARSER=1 \\\n    -DBUILD_ARMNN_TFLITE_DELEGATE=1 \\\n    -DTENSORFLOW_ROOT=$HOME/armnn-devenv/tensorflow \\\n    -DTFLITE_LIB_ROOT=$HOME/armnn-devenv/tflite-32/build \\\n    -DTF_LITE_SCHEMA_INCLUDE_PATH=$HOME/armnn-devenv/tflite-32 \\\n    -DFLATBUFFERS_ROOT=$HOME/armnn-devenv/flatbuffers-arm32 \\\n    -DFLATC_DIR=$HOME/armnn-devenv/flatbuffers-1.12.0/build \\\n    -DPROTOBUF_ROOT=$HOME/armnn-devenv/google/x86_64_pb_install \\\n    -DPROTOBUF_LIBRARY_DEBUG=$HOME/armnn-devenv/google/arm32_pb_install/lib/libprotobuf.so.23.0.0 \\\n    -DPROTOBUF_LIBRARY_RELEASE=$HOME/armnn-devenv/google/arm32_pb_install/lib/libprotobuf.so.23.0.0 \\\n    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON && \\\n    make -j$(nproc)\n\n"
}