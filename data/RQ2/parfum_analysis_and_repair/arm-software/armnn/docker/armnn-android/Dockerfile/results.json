{
  "startTime": 1674254740504,
  "endTime": 1674254741797,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 69,
        "columnStart": 22,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nENV TERM linux\nENV DEBIAN_FRONTEND noninteractive\n\n# Forward system proxy setting\n# ARG proxy\n# ENV http_proxy $proxy\n# ENV https_proxy $proxy\n\n# Basic apt update\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends locales ca-certificates &&  rm -rf /var/lib/apt/lists/*\n\n# Set the locale to en_US.UTF-8, because the Yocto build fails without any locale set.\nRUN locale-gen en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# Again, off the certificare\nRUN echo \"check_certificate = off\" >> ~/.wgetrc\nRUN echo \"[global] \\n\\\ntrusted-host = pypi.python.org \\n \\\n\\t               pypi.org \\n \\\n\\t              files.pythonhosted.org\" >> /etc/pip.conf\n\n# Get basic packages\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    apparmor \\\n    aufs-tools \\\n    automake \\\n    bash-completion \\\n    btrfs-tools \\\n    build-essential \\\n    cmake \\\n    createrepo \\\n    curl \\\n    dpkg-sig \\\n    g++ \\\n    gcc \\\n    git \\\n    iptables \\\n    jq \\\n    libapparmor-dev \\\n    libc6-dev \\\n    libcap-dev \\\n    libsystemd-dev \\\n    libyaml-dev \\\n    mercurial \\\n    net-tools \\\n    parallel \\\n    pkg-config \\\n    python-dev \\\n    python-mock \\\n    python-pip \\\n    python-setuptools \\\n    python-websocket \\\n    golang-go \\\n    iproute2 \\\n    iputils-ping \\\n    vim-common \\\n    vim \\\n    wget \\\n    libtool \\\n    unzip \\\n    scons \\\n    curl \\\n    autoconf \\\n    libtool \\\n    build-essential \\\n    g++ \\\n    cmake && rm -rf /var/lib/apt/lists/*\n\n# Download the Android NDK and make a standalone toolchain\nRUN mkdir -p /home/armnn-devenv/toolchains && \\\n    cd /home/armnn-devenv/toolchains && \\\n    wget https://dl.google.com/android/repository/android-ndk-r17b-linux-x86_64.zip && \\\n    unzip android-ndk-r17b-linux-x86_64.zip\n\nENV NDK /home/armnn-devenv/toolchains/android-ndk-r17b\n\nRUN $NDK/build/tools/make_standalone_toolchain.py \\\n    --arch arm64 \\\n    --api 26 \\\n    --stl=libc++ \\\n    --install-dir=/home/armnn-devenv/toolchains/aarch64-android-r17b\n\nENV PATH=/home/armnn-devenv/toolchains/aarch64-android-r17b/bin:$PATH\n\n# Build the Boost C++ libraries\nRUN mkdir /home/armnn-devenv/boost && \\\n    cd /home/armnn-devenv/boost && \\\n    wget https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.bz2 && \\\n    tar xvf boost_1_64_0.tar.bz2 && rm boost_1_64_0.tar.bz2\n\nRUN echo \"using gcc : arm : aarch64-linux-android-clang++ ;\" > /home/armnn-devenv/boost/user-config.jam && \\\n    cd /home/armnn-devenv/boost/boost_1_64_0 && \\\n    ./bootstrap.sh --prefix=/home/armnn-devenv/boost/install && \\\n    ./b2 install --user-config=/home/armnn-devenv/boost/user-config.jam \\\n    toolset=gcc-arm link=static cxxflags=-fPIC --with-filesystem \\\n    --with-test --with-log --with-program_options -j8\n\n# Build the Compute Library\nRUN cd /home/armnn-devenv && \\\n    git clone https://github.com/ARM-software/ComputeLibrary.git && \\\n    cd ComputeLibrary && \\\n    scons arch=arm64-v8a neon=1 opencl=1 embed_kernels=1 extra_cxx_flags=\"-fPIC\" \\\n    benchmark_tests=0 validation_tests=0 os=android -j8\n\n# RUN mkdir /home/armnn-devenv/google && \\\nRUN mkdir -p /home/armnn-devenv/google && \\\n    cd /home/armnn-devenv/google && \\\n    git clone https://github.com/google/protobuf.git && \\\n    cd protobuf && \\\n    git checkout -b v3.5.2 v3.5.2 && \\\n    ./autogen.sh && \\\n    mkdir x86_build && \\\n    cd x86_build && \\\n    ../configure --prefix=/home/armnn-devenv/google/x86_pb_install && \\\n    make install -j8\n\nRUN cd /home/armnn-devenv/google/protobuf && \\\n    mkdir arm64_build && cd arm64_build && \\\n    CC=aarch64-linux-android-clang \\\n    CXX=aarch64-linux-android-clang++ \\\n    CFLAGS=\"-fPIE -fPIC\" LDFLAGS=\"-pie -llog\" \\\n    ../configure --host=aarch64-linux-android \\\n    --prefix=/home/armnn-devenv/google/arm64_pb_install \\\n    --with-protoc=/home/armnn-devenv/google/x86_pb_install/bin/protoc && \\\n    make install -j8\n\n# clone Tensorflow\nRUN cd /home/armnn-devenv/google/ && \\\n    git clone https://github.com/tensorflow/tensorflow.git\n\n# Clone ARMNN\nRUN cd /home/armnn-devenv/ && \\\n    git clone https://github.com/ARM-software/armnn.git\n\n# Generate TensorFlow protobuf definitions\nRUN cd /home/armnn-devenv/google/tensorflow && \\\n    git checkout a0043f9262dc1b0e7dc4bdf3a7f0ef0bebc4891e && \\\n    /home/armnn-devenv/armnn/scripts/generate_tensorflow_protobuf.sh \\\n    /home/armnn-devenv/google/tf_pb /home/armnn-devenv/google/x86_pb_install\n\nENV PATH=/home/armnn-devenv/toolchains/android-ndk-r17b:$PATH\n# Build Google Flatbuffers for ARMNN TFLite Parser\nRUN cd /home/armnn-devenv/ && \\\n    git clone https://github.com/google/flatbuffers.git && \\\n    cd flatbuffers && \\\n    cd android && cd jni && \\\n    rm -rf Application.mk && \\\n    echo \"APP_STL := c++_static\" >> Application.mk && \\\n    echo \"NDK_TOOLCHAIN_VERSION\" := clang >> Application.mk && \\\n    echo \"APP_CPPFLAGS :=-std=c++11\" >> Application.mk && \\\n    echo \"APP_ABI := arm64-v8a\" >> Application.mk && \\\n    echo \"APP_PLATFORM := android-23\" >> Application.mk && \\\n    echo \"NDK_PLATFORM=android-23\" >> Application.mk && \\\n    cd ../ && ndk-build -B\n\nCOPY ./docker-entrypoint.sh /usr/bin\nRUN chmod +x /usr/bin/docker-entrypoint.sh\nENTRYPOINT [\"/usr/bin/docker-entrypoint.sh\"]\n\n#To do:\n# 1. Flatbuffers build Application.mk hardcode value need to fix."
}