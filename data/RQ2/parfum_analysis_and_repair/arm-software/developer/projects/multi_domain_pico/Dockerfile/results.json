{
  "startTime": 1674220289953,
  "endTime": 1674220291139,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 9,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 29,
        "columnStart": 28,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 9,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 9,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 29,
        "columnStart": 28,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 9,
        "columnEnd": 61
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04\nENV TERM linux\nENV DEBIAN_FRONTEND noninteractive\n# Basic apt update\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends locales ca-certificates &&  rm -rf /var/lib/apt/lists/*\nRUN apt-get update && apt-get -y --no-install-recommends install sudo && rm -rf /var/lib/apt/lists/*;\n\n# make sure cmake is v12.0\nRUN sudo apt -y --no-install-recommends install g++ wget make && rm -rf /var/lib/apt/lists/*;\nADD https://cmake.org/files/v3.14/cmake-3.14.1-Linux-x86_64.sh /cmake-3.14.1-Linux-x86_64.sh\nRUN mkdir /opt/cmake\nRUN sh /cmake-3.14.1-Linux-x86_64.sh --prefix=/opt/cmake --skip-license\nRUN ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake\nRUN cmake --version\n\n# Install dependencies\nRUN sudo apt update && sudo apt -y --no-install-recommends install gcc-arm-none-eabi \\\n      gcc \\\n      g++ \\\n      git \\\n      gdb-multiarch \\\n      automake \\\n      autoconf \\\n      build-essential \\\n      texinfo \\\n      libtool \\\n      libftdi-dev \\\n      wget \\\n      libusb-1.0-0-dev \\\n      python3 && \\\n      mkdir pico && rm -rf /var/lib/apt/lists/*;\n\n# copy required files into docker image\nCOPY pico-sdk pico/pico-sdk\nRUN mkdir pico/mult_domain_poc\nCOPY mult_domain pico/mult_domain_poc/mult_domain\nCOPY single_core pico/mult_domain_poc/single_core\nCOPY CMakeLists.txt pico/mult_domain_poc/CMakeLists.txt\nCOPY pico_sdk_import.cmake pico/mult_domain_poc/pico_sdk_import.cmake\n\n#setup pico using pico_setup.sh\nRUN OUTDIR=\"$(pwd)pico\" && \\\n      export PICO_SDK_PATH=\"$OUTDIR/pico-sdk\" && \\\n      cd $PICO_SDK_PATH && \\\n      echo \"Adding PICO_SDK_PATH to ~/.bashrc\" && \\\n      echo \"export PICO_SDK_PATH=$PICO_SDK_PATH\" >> ~/.bashrc\n\nRUN OUTDIR=\"$(pwd)pico\" && \\\n      export PICO_SDK_PATH=\"$OUTDIR/pico-sdk\" && \\\n      mkdir -p pico/mult_domain_poc/build && \\\n      cd pico/mult_domain_poc/build && \\\n      cmake .. && \\\n      make -j8\n\n# now build the model\n#RUN OUTDIR=\"$(pwd)pico\" && \\\n#      export PICO_SDK_PATH=\"$OUTDIR/pico-sdk\" && \\\n#      cd pico/mult_domain_poc && mkdir build && \\\n#      cd build && cmake .. && \\\n#      cd mult_domain && make\n\n#docker create -ti --name dummy pico_hello_world:1 bash\n#docker cp dummy:/pico/pico-examples/build/hello_xor/hello_xor.uf2 gen/hello_xor.uf2\n#docker rm -fv dummy\n"
}