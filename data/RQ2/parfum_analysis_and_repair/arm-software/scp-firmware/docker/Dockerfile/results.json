{
  "startTime": 1674220035903,
  "endTime": 1674220038072,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Arm SCP/MCP Software\n# Copyright (c) 2021, Arm Limited and Contributors. All rights reserved.\n#\n# SPDX-License-Identifier: BSD-3-Clause\n#\n\nFROM ubuntu:20.04 as ci\n\nARG ARM_GNU_RM_URL=\"https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2\"\nARG ARM_COMPILER_6_URL=\"https://developer.arm.com/-/media/Files/downloads/compiler/DS500-BN-00026-r5p0-16rel1.tgz\"\nARG DOXYGEN_URL=\"https://sourceforge.net/projects/doxygen/files/rel-1.8.20/doxygen-1.8.20.linux.bin.tar.gz\"\nARG CMAKE_URL=\"https://github.com/Kitware/CMake/releases/download/v3.18.3/cmake-3.18.3-Linux-x86_64.tar.gz\"\nARG AARCH64_GCC_URL=\"https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-a/9.2-2019.12/binrel/gcc-arm-9.2-2019.12-x86_64-aarch64-none-elf.tar.xz\"\nARG CPPCHECK_SRC_URL=\"git://github.com/danmar/cppcheck.git\"\nARG CPPCHECK_CHECKOUT_TAG=\"1.90\"\nARG IWYU_SRC_URL=\"https://github.com/include-what-you-use/include-what-you-use.git\"\n\n\nENV ARMLMD_LICENSE_FILE=\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n        bundler gcc g++ gpg-agent git gosu lsb-release make ninja-build \\\n        xz-utils python3 python3-pip software-properties-common wget && \\\n    wget -nv -O - -c \"https://apt.llvm.org/llvm.sh\" | bash && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        clang-format libclang-cpp9 libclang1-9 \\\n        clang-tidy-10 libclang-9-dev \\\n        clang-10 llvm-10 libclang-10-dev \\\n        llvm-10-dev && \\\n    python3 -m pip install --upgrade pip && rm -rf /var/lib/apt/lists/*;\n\nENV DEBIAN_FRONTEND=\n\nRUN mkdir \"/opt/arm-gnu-rm\" && \\\n    wget -nv -O - -c \"${ARM_GNU_RM_URL}\" | \\\n    tar -jxf - -C \"/opt/arm-gnu-rm\" --strip-components=1 && \\\n    echo 'export PATH=/opt/arm-gnu-rm/bin:${PATH}' >> \\\n        \"/etc/profile.d/50-scp-firmware-env.sh\"\n\nENV PATH=\"/opt/arm-gnu-rm/bin:${PATH}\"\n\nRUN mkdir \"/tmp/arm-compiler-6\" && \\\n    wget -nv -O - -c \"${ARM_COMPILER_6_URL}\" | \\\n    tar -zxf - -C \"/tmp/arm-compiler-6\" && \\\n    sh \"/tmp/arm-compiler-6/install_x86_64.sh\" -d \"/opt/arm-compiler-6\" \\\n        --no-interactive --i-agree-to-the-contained-eula && \\\n    rm -rf \"/tmp/arm-compiler-6\" && \\\n    echo 'export PATH=/opt/arm-compiler-6/bin:${PATH}' >> \\\n        \"/etc/profile.d/50-scp-firmware-env.sh\"\n\nENV PATH=\"/opt/arm-compiler-6/bin:${PATH}\"\n\nRUN mkdir \"/opt/doxygen\" && \\\n    wget -nv -O - -c \"${DOXYGEN_URL}\" | \\\n    tar -zxf - -C \"/opt/doxygen\" --strip-components=1 && \\\n    echo 'export PATH=/opt/doxygen/bin:${PATH}' >> \\\n        \"/etc/profile.d/50-scp-firmware-env.sh\"\n\nENV PATH=\"/opt/doxygen/bin:${PATH}\"\n\nRUN mkdir \"/opt/cmake\" && \\\n    wget -nv -O - -c \"${CMAKE_URL}\" | \\\n    tar -zxf - -C \"/opt/cmake\" --strip-components=1 && \\\n    echo 'export PATH=/opt/cmake/bin:${PATH}' >> \\\n        \"/etc/profile.d/50-scp-firmware-env.sh\"\n\nENV PATH=\"/opt/cmake/bin:${PATH}\"\n\nRUN mkdir \"/opt/aarch64-gcc\" && \\\n    wget -nv -O - -c \"${AARCH64_GCC_URL}\" | \\\n    tar -Jxf - -C \"/opt/aarch64-gcc\" --strip-components=1 && \\\n    echo 'export PATH=/opt/aarch64-gcc/bin:${PATH}' >> \\\n        \"/etc/profile.d/50-scp-firmware-env.sh\"\n\nENV PATH=\"/opt/aarch64-gcc/bin:${PATH}\"\n\nRUN cwd=$PWD && mkdir \"/opt/cppcheck\" && cd \"/opt/cppcheck\" && \\\n    git clone --depth 1 --branch \"${CPPCHECK_CHECKOUT_TAG}\" \\\n    \"${CPPCHECK_SRC_URL}\" source && \\\n    cmake -G \"Ninja\" -DCMAKE_INSTALL_PREFIX=/opt/cppcheck \\\n        -DFILESDIR=/opt/cppcheck ./source && \\\n    cmake --build . -- install && cd $cwd && \\\n    echo 'export PATH=/opt/cppcheck/bin:${PATH}' >> \\\n        \"/etc/profile.d/50-scp-firmware-env.sh\"\n\nENV PATH=\"/opt/cppcheck/bin:${PATH}\"\n\nRUN cwd=$PWD && mkdir \"/opt/iwyu\" && cd \"/opt/iwyu\" && \\\n    git clone \"${IWYU_SRC_URL}\" -b clang_10 --single-branch iwyu-10 && \\\n    cmake -G \"Ninja\" -DCMAKE_PREFIX_PATH=/usr/lib/llvm-10 \\\n    ./iwyu-10 && cmake --build . && \\\n    cd bin && ln -s include-what-you-use iwyu && cd $cwd && \\\n    echo 'export PATH=/opt/iwyu/bin:${PATH}' >> \\\n        \"/etc/profile.d/50-scp-firmware-env.sh\"\n\nENV PATH=\"/opt/iwyu/bin:${PATH}\"\n\nCOPY rootfs/usr/local/bin/init /usr/local/bin/init\nRUN  chmod 755 \"/usr/local/bin/init\"\n\nENTRYPOINT [ \"sh\", \"/usr/local/bin/init\" ]\n\nFROM ci as jenkins\n\nARG JENKINS_UID=1000\nARG JENKINS_GID=1000\n\nRUN addgroup --gid \"${JENKINS_GID}\" jenkins && \\\n    adduser --uid \"${JENKINS_UID}\" --gid \"${JENKINS_GID}\" --disabled-password \\\n        --gecos \"\" jenkins\n\nENTRYPOINT [ \"sh\", \"-c\" ]\n\nFROM ci as dev\n\nVOLUME /scp-firmware\nWORKDIR /scp-firmware\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install -y --no-install-recommends nano sudo && rm -rf /var/lib/apt/lists/*;\n\nENV DEBIAN_FRONTEND=\n\nFROM dev as vagrant\n\nVOLUME /vagrant\nWORKDIR /vagrant\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install -y --no-install-recommends openssh-server && \\\n    mkdir \"/run/sshd\" && rm -rf /var/lib/apt/lists/*;\n\nENV DEBIAN_FRONTEND=\n\nRUN adduser --disabled-password --gecos \"\" vagrant && \\\n    usermod -aG sudo vagrant && \\\n    passwd -d vagrant\n\nENV NOTVISIBLE=\"in users profile\"\nRUN echo \"export VISIBLE=now\" >> \"/etc/profile\"\n\nRUN printf \"\\nAcceptEnv ARMLMD_LICENSE_FILE\" >> /etc/ssh/sshd_config\n\nRUN mkdir -p \"/home/vagrant/.ssh\" && \\\n    chmod 755 \"/home/vagrant/.ssh\"\n\nCOPY rootfs/home/vagrant/.ssh/authorized_keys /home/vagrant/.ssh/authorized_keys\nRUN  chmod 644 \"/home/vagrant/.ssh/authorized_keys\"\n\nRUN printf \"\\ncd /vagrant\" >> \"/home/vagrant/.bashrc\"\n\nEXPOSE 22\n"
}