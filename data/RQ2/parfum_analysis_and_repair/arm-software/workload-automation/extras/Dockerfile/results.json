{
  "startTime": 1674255751780,
  "endTime": 1674255752807,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 3
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 3
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile creates an image for use with Workload Automation\n# and/or devlib.\n#\n# To build this Docker image, please run the following command from\n# this directory:\n#\n#   docker build -t wa .\n#\n# This will create an image called wa, which is preconfigured to\n# run WA and devlib. Please note that the build process automatically\n# accepts the licenses for the Android SDK, so please be sure that you\n# are willing to accept these prior to building and running the image\n# in a container.\n#\n# To run the container, please run the following command from the\n# directory you wish to work from:\n#\n#   docker run -it --privileged -v /dev/bus/usb:/dev/bus/usb --volume ${PWD}:/workspace --workdir /workspace wa\n#\n# If using selinux you may need to add the `z` option when mounting\n# volumes e.g.:\n#   --volume ${PWD}:/workspace:z\n# Warning: Please ensure you do not use this option when mounting\n# system directores. For more information please see:\n# https://docs.docker.com/storage/bind-mounts/#configure-the-selinux-label\n#\n# The above command starts the container in privileged mode, with\n# access to USB devices. The current directory is mounted into the\n# image, allowing you to work from there. Any files written to this\n# directory are directly written to the host. Additional \"volumes\",\n# such as required assets, can be mounted into the container using a\n# second --volume command.\n#\n# If you require access to a TTY from the Docker container, please\n# also mount this into the container in the same style as is used to\n# mount USB devices. For example:\n#\n#   docker run -it --privileged -v /dev/ttyUSB0:/dev/ttyUSB0 -v /dev/bus/usb:/dev/bus/usb --volume ${PWD}:/workspace --workdir /workspace wa\n#\n# When you are finished, please run `exit` to leave the container.\n#\n# The relevant environment variables are stored in a separate\n# file which is automatically sourced in an interactive shell.\n# If running from a non-interactive environment this can\n# be manually sourced with `source /home/wa/.wa_environment`\n#\n# NOTE: Please make sure that the ADB server is NOT running on the\n# host. If in doubt, run `adb kill-server` before running the docker\n# container.\n#\n\n# We want to make sure to base this on a recent ubuntu release\nFROM ubuntu:20.04\n\n# Please update the references below to use different versions of\n# devlib, WA or the Android SDK\nARG DEVLIB_REF=v1.3\nARG WA_REF=v3.3\nARG ANDROID_SDK_URL=https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\n\n# Set a default timezone to use\nENV TZ=Europe/London\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\napache2-utils \\\nbison \\\ncmake \\\ncurl \\\nemacs \\\nflex \\\ngit \\\nlibcdk5-dev \\\nlibiio-dev \\\nlibxml2 \\\nlibxml2-dev \\\nlocales \\\nnano \\\nopenjdk-8-jre-headless \\\npython3 \\\npython3-pip \\\nssh \\\nsshpass \\\nsudo \\\ntrace-cmd \\\nusbutils \\\nvim \\\nwget \\\nzip && rm -rf /var/lib/apt/lists/*;\n\n# Clone and download iio-capture\nRUN git clone -v https://github.com/BayLibre/iio-capture.git /tmp/iio-capture && \\\n    cd /tmp/iio-capture && \\\n    make && \\\n    make install\n\nRUN pip3 install --no-cache-dir pandas\n\n# Ensure we're using utf-8 as our default encoding\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# Let's get the two repos we need, and install them\nRUN git clone -v https://github.com/ARM-software/devlib.git /tmp/devlib && \\\n    cd /tmp/devlib && \\\n    git checkout $DEVLIB_REF && \\\n    python3 setup.py install && \\\n    pip3 install --no-cache-dir .[full]\nRUN git clone -v https://github.com/ARM-software/workload-automation.git /tmp/wa && \\\n    cd /tmp/wa && \\\n    git checkout $WA_REF && \\\n    python3 setup.py install && \\\n    pip3 install --no-cache-dir .[all]\n\n# Clean-up\nRUN rm -R /tmp/devlib /tmp/wa\n\n# Create and switch to the wa user\nRUN useradd -m -G plugdev,dialout wa\nUSER wa\n\n# Let's set up the Android SDK for the user\nRUN mkdir -p /home/wa/.android\nRUN mkdir -p /home/wa/AndroidSDK && cd /home/wa/AndroidSDK && wget $ANDROID_SDK_URL -O sdk.zip && unzip sdk.zip\nRUN cd /home/wa/AndroidSDK/tools/bin && yes | ./sdkmanager --licenses && ./sdkmanager platform-tools && ./sdkmanager 'build-tools;27.0.3'\n\n# Download Monsoon\nRUN mkdir -p /home/wa/monsoon\nRUN curl -f https://android.googlesource.com/platform/cts/+/master/tools/utils/monsoon.py\\?format\\=TEXT | base64 --decode > /home/wa/monsoon/monsoon.py\nRUN chmod +x /home/wa/monsoon/monsoon.py\n\n# Update WA's required environment variables.\nRUN echo 'export PATH=/home/wa/monsoon:${PATH}' >> /home/wa/.wa_environment\nRUN echo 'export PATH=/home/wa/AndroidSDK/platform-tools:${PATH}' >> /home/wa/.wa_environment\nRUN echo 'export PATH=/home/wa/AndroidSDK/build-tools:${PATH}' >> /home/wa/.wa_environment\nRUN echo 'export ANDROID_HOME=/home/wa/AndroidSDK' >> /home/wa/.wa_environment\n\n# Source WA environment variables in an interactive environment\nRUN echo 'source /home/wa/.wa_environment' >> /home/wa/.bashrc\n\n# Generate some ADB keys. These will change each time the image is build but will otherwise persist.\nRUN /home/wa/AndroidSDK/platform-tools/adb keygen /home/wa/.android/adbkey\n\n# We need to make sure to add the remote assets too\nRUN wa --version && echo 'remote_assets_url: https://raw.githubusercontent.com/ARM-software/workload-automation-assets/master/dependencies' >> /home/wa/.workload_automation/config.yaml\n\n"
}