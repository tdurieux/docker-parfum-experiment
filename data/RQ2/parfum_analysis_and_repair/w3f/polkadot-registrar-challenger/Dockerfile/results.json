{
  "startTime": 1674253187611,
  "endTime": 1674253188448,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://github.com/LukeMathWalker/cargo-chef\n# Leveraging the pre-built Docker images with cargo-chef and the Rust toolchain\nFROM lukemathwalker/cargo-chef:latest-rust-1.56.0 AS chef\nWORKDIR app\n\nFROM chef AS planner\nCOPY . .\nRUN cargo chef prepare --recipe-path recipe.json\n\nFROM chef AS builder\nCOPY --from=planner /app/recipe.json recipe.json\n# Build dependencies - this is the caching Docker layer!\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\tlld pkg-config openssl libssl-dev gcc g++ clang cmake && rm -rf /var/lib/apt/lists/*;\nRUN cargo chef cook --release --recipe-path recipe.json\n# Build application\nCOPY . .\nRUN cargo build --release --bin registrar\n\n# We do not need the Rust toolchain to run the binary!\nFROM debian:buster-slim AS runtime\nWORKDIR app\nCOPY --from=builder /app/target/release/registrar /usr/local/bin\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\topenssl ca-certificates && rm -rf /var/lib/apt/lists/*;\nRUN update-ca-certificates --fresh\nENTRYPOINT [\"/usr/local/bin/registrar\"]\n"
}