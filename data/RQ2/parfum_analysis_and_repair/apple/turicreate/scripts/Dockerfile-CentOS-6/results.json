{
  "startTime": 1674251902202,
  "endTime": 1674251904036,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This image is intended for building Turi Create for maximum compatibility\n# with various Linux distributions.\n# Based on CentOS 6 for compatibility with older glibc versions.\n# Builds with LLVM 8.0.0 for modern compiler features and bug fixes.\n# Builds against libstdc++ from GCC 4.8 for compatibility with older libstdc++\n# runtime versions.\n\nFROM quay.io/pypa/manylinux2010_x86_64\n\n# Set env variables for tools to pick up\nENV CC=\"gcc\"\nENV CXX=\"g++\"\nENV PATH=\"/opt/rh/devtoolset-8/root/usr/bin:/usr/local/bin:${PATH}\"\nENV CCACHE_DIR=/build/.docker_ccache\nENV CCACHE_COMPILERCHECK=content\nRUN ldconfig\n\n# Install dependencies\nRUN yum -y update && \\\n    yum -y install \\\n               vim-common \\\n               libX11-devel \\\n               sqlite-devel \\\n               gcc \\\n               gcc-multilib \\\n               glibc-devel \\\n               ccache \\\n               tk-devel \\\n               patch \\\n               rsync \\\n               git \\\n               file \\\n               xz && rm -rf /var/cache/yum\n\nRUN yum install -y wget tar make flex gcc gcc-c++ gcc-devel.s390 binutils-devel bzip2 && rm -rf /var/cache/yum\nENV PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN mkdir /src\nWORKDIR /src\nRUN wget ftp://gcc.gnu.org/pub/gcc/releases/gcc-4.8.5/gcc-4.8.5.tar.gz\nRUN tar xzf gcc-4.8.5.tar.gz && rm gcc-4.8.5.tar.gz\nWORKDIR gcc-4.8.5\nRUN ./contrib/download_prerequisites\nWORKDIR ..\nRUN mkdir build\nWORKDIR build\nRUN ../gcc-4.8.5/configure --enable-languages=c,c++ --disable-checking --disable-multilib --disable-bootstrap\nRUN make -j16\nRUN make install\n\n# Install OpenSSL\n# The built-in SSL is so old it can't talk to anything on the internet anymore\n# (so even get-pip.py doesn't work!)\nWORKDIR /src\nRUN curl -f -O https://www.openssl.org/source/openssl-1.1.0j.tar.gz\nRUN tar xf openssl-1.1.0j.tar.gz && rm openssl-1.1.0j.tar.gz\nRUN mkdir -p /etc/ssl/certs/\nWORKDIR /src/openssl-1.1.0j\nRUN ./config --prefix=/usr/local --openssldir=/usr/local && \\\n    make -j4 --quiet && \\\n    make install && \\\n    cp libssl.a /usr/local/lib/libssl.a && \\\n    cp libcrypto.a /usr/local/lib/libcrypto.a && \\\n    cp libcrypto.so.1.1 /usr/local/lib/libcrypto.so.1.1 && \\\n    cp libcrypto.so /usr/local/lib/libcrypto.so && \\\n    cp libssl.so.1.1 /usr/local/lib/libssl.so.1.1 && \\\n    cp libssl.so /usr/local/lib/libssl.so && \\\n    ldconfig && \\\n    rm -rf /src/openssl*\n\n# Install cmake from binary release\nRUN mkdir -p /opt\nWORKDIR /opt\nRUN curl -f -O https://cmake.org/files/v3.13/cmake-3.13.4-Linux-x86_64.tar.gz\nRUN tar xf cmake-3.13.4-Linux-x86_64.tar.gz && \\\n    rm -rf /opt/cmake-3.13.4-Linux-x86_64.tar.gz\nENV PATH=\"/opt/cmake-3.13.4-Linux-x86_64/bin:${PATH}\"\n\n# Install libffi from source\nRUN mkdir -p /src\nWORKDIR /src\nRUN curl -f -O ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\nRUN tar xf libffi-3.2.1.tar.gz && rm libffi-3.2.1.tar.gz\nWORKDIR /src/libffi-3.2.1\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && \\\n    make -j4 --quiet && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /src/libffi-3.2.1*\n\n# Install Python 2.7 from source\nWORKDIR /src\nRUN curl -f -O https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tgz\nRUN tar xf Python-2.7.15.tgz && rm Python-2.7.15.tgz\nWORKDIR /src/Python-2.7.15\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions && \\\n    make -j4 --quiet && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /src/Python-2.7.15*\n\n# Install Python 3.5 from source\nWORKDIR /src\nRUN curl -f -O https://www.python.org/ftp/python/3.5.6/Python-3.5.6.tgz\nRUN tar xf Python-3.5.6.tgz && rm Python-3.5.6.tgz\nWORKDIR /src/Python-3.5.6\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions && \\\n    make -j4 --quiet && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /src/Python-3.5.6*\n\n# Install Python 3.6 from source\nWORKDIR /src\nRUN curl -f -O https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz\nRUN tar xf Python-3.6.8.tgz && rm Python-3.6.8.tgz\nWORKDIR /src/Python-3.6.8\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions && \\\n    make -j4 --quiet && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /src/Python-3.6.8*\n\n# Install Python 3.7 from source\nWORKDIR /src\nRUN curl -f -O https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\nRUN tar xf Python-3.7.3.tgz && rm Python-3.7.3.tgz\nWORKDIR /src/Python-3.7.3\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions && \\\n    make -j4 --quiet && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /src/Python-3.7.3*\n\n# Install Python 3.8 from source\nWORKDIR /src\nRUN curl -f -O https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz\nRUN tar xf Python-3.8.5.tgz && rm Python-3.8.5.tgz\nWORKDIR /src/Python-3.8.5\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions && \\\n    make -j4 --quiet && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /src/Python-3.8.5*\n\n# Install Python 3.9 from source\nWORKDIR /src\nRUN curl -f -O https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz\nRUN tar xf Python-3.9.6.tgz && rm Python-3.9.6.tgz\nWORKDIR /src/Python-3.9.6\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions && \\\n    make -j4 --quiet && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /src/Python-3.9.5*\n\nENV CC=\"/usr/local/bin/gcc\"\nENV CXX=\"/usr/local/bin/g++\"\n\n# Install pip and virtualenv\nWORKDIR /src\nRUN curl -f -O https://bootstrap.pypa.io/pip/2.7/get-pip.py\nRUN python2.7 get-pip.py\nRUN pip2.7 install virtualenv\nRUN python3.5 get-pip.py\nRUN pip3.5 install virtualenv\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py\nRUN python3.6 get-pip.py\nRUN pip3.6 install virtualenv\nRUN python3.7 get-pip.py\nRUN pip3.7 install virtualenv\nRUN python3.8 get-pip.py\nRUN pip3.8 install virtualenv\nRUN python3.9 get-pip.py\nRUN pip3.9 install virtualenv\nRUN rm -rf /src/get-pip.py\n\nENV LD=\"/usr/local/lib64\"\n\n# So this is where the real magic happens. Clang has a flag to specify the\n# version of libstdc++ `--gcc-toolchain`. In turicreate we don't necessarily\n# have a flag to take care of this so we can re-create the expected directory\n# structure using the script below. This is effectively creating the structure\n# you'd expect when calling yum install gcc-4.*\n#\n# Using `clang -v` you can see the version of gcc that clang picks up\n# automatically from `/usr`. If all goes well, this should be the `libstdc++`\n# from gcc-4.8.5 and turicreate can build.\nRUN mkdir -p /usr/libexec/gcc/x86_64-redhat-linux/4.8.5\nRUN mkdir -p /usr/include/c++/4.8.5\nRUN mkdir -p /usr/lib/gcc/x86_64-redhat-linux/4.8.5\n\nRUN cp -a /usr/local/libexec/gcc/x86_64-unknown-linux-gnu/4.8.5/* /usr/libexec/gcc/x86_64-redhat-linux/4.8.5/\nRUN cp -a /usr/local/include/c++/4.8.5/* /usr/include/c++/4.8.5/\nRUN cp -a /usr/local/lib/gcc/x86_64-unknown-linux-gnu/4.8.5/* /usr/lib/gcc/x86_64-redhat-linux/4.8.5/\nRUN cp -a /usr/local/lib64/* /usr/lib/gcc/x86_64-redhat-linux/4.8.5/\n\n# Install llvm 8.0.0 from source with clang (no libc++)\nWORKDIR /src\nRUN curl -f -O https://releases.llvm.org/8.0.0/llvm-8.0.0.src.tar.xz\nRUN curl -f -O https://releases.llvm.org/8.0.0/cfe-8.0.0.src.tar.xz\nRUN tar xf llvm-8.0.0.src.tar.xz && \\\n    tar xf cfe-8.0.0.src.tar.xz && \\\n    mv cfe-8.0.0.src llvm-8.0.0.src/tools/clang && \\\n    mkdir llvm-8.0.0.build && rm llvm-8.0.0.src.tar.xz\nWORKDIR /src/llvm-8.0.0.build\nRUN cmake ../llvm-8.0.0.src/ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON && \\\n    make -j24 || make -j4 && \\\n    make --quiet install && \\\n    ldconfig && \\\n    rm -rf /src/llvm-8.0.0*\n\n# Make clang the default compiler\n# To work around https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60367\n# (By not using gcc 4.8)\nENV CC=\"clang\"\nENV CXX=\"clang++\"\n\n# Start at repo root (mounted into Docker)\nWORKDIR /build\n\n# Set ccache size to 4GB\nRUN mkdir -p $CCACHE_DIR\nRUN ccache -M 4G\n\n# Clean up now-unnecessary paths in image\nRUN rm -rf /src\n\nWORKDIR /build/\n"
}