{
  "startTime": 1674253693737,
  "endTime": 1674253694992,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 11,
        "columnEnd": 100
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 11,
        "columnEnd": 107
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.18 AS go_builder\nWORKDIR /go/src/github.com/percona/percona-server-mysql-operator\n\nCOPY . .\n\nARG GIT_COMMIT\nARG BUILD_TIME\nARG BUILD_TIME\nARG GO_LDFLAGS\nARG GOOS=linux\nARG GOARCH=amd64\nARG CGO_ENABLED=0\n\nRUN mkdir -p build/_output/bin \\\n    && GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=$CGO_ENABLED GO_LDFLAGS=$GO_LDFLAGS \\\n    go build -mod=vendor -ldflags \"-w -s -X main.GitCommit=$GIT_COMMIT -X main.GitBranch=$GIT_BRANCH -X main.BuildTime=$BUILD_TIME\" \\\n        -o build/_output/bin/percona-server-mysql-operator \\\n            cmd/manager/main.go \\\n    && cp -r build/_output/bin/percona-server-mysql-operator /usr/local/bin/percona-server-mysql-operator\nRUN GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=$CGO_ENABLED GO_LDFLAGS=$GO_LDFLAGS \\\n    go build -mod=vendor -ldflags \"-w -s -X main.GitCommit=$GIT_COMMIT -X main.GitBranch=$GIT_BRANCH -X main.BuildTime=$BUILD_TIME\" \\\n        -o build/_output/bin/bootstrap \\\n            cmd/bootstrap/main.go \\\n    && cp -r build/_output/bin/bootstrap /usr/local/bin/bootstrap\nRUN GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=$CGO_ENABLED GO_LDFLAGS=$GO_LDFLAGS \\\n    go build -mod=vendor -ldflags \"-w -s -X main.GitCommit=$GIT_COMMIT -X main.GitBranch=$GIT_BRANCH -X main.BuildTime=$BUILD_TIME\" \\\n        -o build/_output/bin/healthcheck \\\n            cmd/healthcheck/main.go \\\n    && cp -r build/_output/bin/healthcheck /usr/local/bin/healthcheck\nRUN GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=$CGO_ENABLED GO_LDFLAGS=$GO_LDFLAGS \\\n    go build -mod=vendor -ldflags \"-w -s -X main.GitCommit=$GIT_COMMIT -X main.GitBranch=$GIT_BRANCH -X main.BuildTime=$BUILD_TIME\" \\\n        -o build/_output/bin/sidecar \\\n            cmd/sidecar/main.go \\\n    && cp -r build/_output/bin/sidecar /usr/local/bin/sidecar\n\nFROM redhat/ubi8-minimal AS ubi8\n\n# check repository package signature in secure way\nRUN export GNUPGHOME=\"$(mktemp -d)\" \\\n        && microdnf install -y findutils \\\n        && gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A \\\n        && gpg --batch --export --armor 430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A > ${GNUPGHOME}/RPM-GPG-KEY-Percona \\\n        && rpmkeys --import ${GNUPGHOME}/RPM-GPG-KEY-Percona \\\n        && curl -Lf -o /tmp/percona-release.rpm https://repo.percona.com/yum/percona-release-latest.noarch.rpm \\\n        && rpmkeys --checksig /tmp/percona-release.rpm \\\n        && rpm -i /tmp/percona-release.rpm \\\n        && rm -rf \"$GNUPGHOME\" /tmp/percona-release.rpm \\\n        && rpm --import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY \\\n        && percona-release setup pdps-8.0\n\nRUN set -ex; \\\n    microdnf update; \\\n    microdnf install -y percona-mysql-shell; \\\n    microdnf clean all; \\\n    rm -rf /var/cache\n\nRUN mkdir /sbin/.mysqlsh && chown 2:2 /sbin/.mysqlsh\n\nLABEL name=\"Percona Distribution for MySQL Operator\" \\\n      vendor=\"Percona\" \\\n      summary=\"Percona Distribution for MySQL Operator v1alpha1 contains everything you need to quickly and consistently deploy and scale Percona Server for MySQL instances\" \\\n      description=\"Percona Distribution for MySQL Operator v1alpha1 contains everything you need to quickly and consistently deploy and scale Percona Server for MySQL instances in a Kubernetes-based environment, both on-premises or in the cloud\" \\\n      maintainer=\"Percona Development <info@percona.com>\"\n\nCOPY LICENSE /licenses/\nCOPY --from=go_builder /usr/local/bin/percona-server-mysql-operator /usr/local/bin/percona-server-mysql-operator\nCOPY --from=go_builder /usr/local/bin/bootstrap /bootstrap\nCOPY --from=go_builder /usr/local/bin/healthcheck /healthcheck\nCOPY --from=go_builder /usr/local/bin/sidecar /sidecar\nCOPY build/ps-entrypoint.sh /ps-entrypoint.sh\nCOPY build/ps-init-entrypoint.sh /ps-init-entrypoint.sh\nCOPY build/run-backup.sh /run-backup.sh\nCOPY build/run-restore.sh /run-restore.sh\n\nUSER 2\n"
}