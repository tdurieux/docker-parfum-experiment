{
  "startTime": 1674251907394,
  "endTime": 1674251908653,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 18,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9.13-alpine\n\nENV PYTHONUNBUFFERED=1\n\nRUN python3 -m pip install pip==22.1.2\n\nCOPY ./server/requirements/base.txt /requirements.txt\nCOPY ./server/requirements/base.txt /base.txt\nCOPY ./server/requirements/dev.txt /dev.txt\n\n# let's install additional dev package only if there is no production build\nARG mode\nRUN echo \"Mode=$mode\"\nRUN if [ \"$mode\" != \"production\" ] ; then cat /base.txt /dev.txt > /requirements.txt ; fi\n\nRUN apk update && apk add --no-cache libpq gettext-dev\n\nRUN \\\n apk add --no-cache --virtual .build-deps postgresql-dev gcc musl-dev && \\\n python3 -m pip install -r /requirements.txt --no-cache-dir && \\\n apk --purge del .build-deps\n\nCOPY ./docker/django/entrypoint.sh /entrypoint.sh\nRUN sed -i 's/\\r//' /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nADD ./docker/django/crontab /etc/crontabs/root\n\nRUN addgroup -S docker && adduser -S docker-user -G docker\n\nCOPY ./server/ /app/\nWORKDIR /app/\n\nRUN rm /requirements.txt\nRUN rm /base.txt\nRUN rm /dev.txt\nRUN rm -r /app/requirements/\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nRUN mkdir -p /django_cache\nRUN chown docker-user /django_cache\n\nUSER docker-user\n"
}