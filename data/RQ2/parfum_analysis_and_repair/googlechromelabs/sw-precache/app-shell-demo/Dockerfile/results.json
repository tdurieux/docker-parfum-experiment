{
  "startTime": 1674254770786,
  "endTime": 1674254771432,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 14,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 17,
        "columnEnd": 101
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile extending the generic Node image with application files for a\n# single application.\nFROM beta.gcr.io/google_appengine/nodejs\n\n# Uncomment and customize these if you're copying this by hand (use \"app\n# gen-config\" to generate a Dockerfile.\n# ADD package.json npm-shrinkwrap.json* /app/\n# RUN npm --unsafe-perm install\n# ADD . /app\n#COPY package.json /app/\nCOPY . /app/\n# You have to specify \"--unsafe-perm\" with npm install\n# when running as root.  Failing to do this can cause\n# install to appear to succeed even if a preinstall\n# script fails, and may have other adverse consequences\n# as well.\nRUN npm --unsafe-perm install && npm cache clean --force;\n\n# Check to see if the the version included in the base runtime satisfies \\\n# >=0.12.7, if not then do an npm install of the latest available \\\n# version that satisfies it. \\\nRUN npm install         https://storage.googleapis.com/gae_node_packages/semver.tar.gz && \\\n  ( node -e 'var semver = require(\"semver\"); \\\n            if (!semver.satisfies(process.version, \">=0.12.7\")) \\\n              process.exit(1);' || \\\n   ( version=$( curl -f -L https://storage.googleapis.com/gae_node_packages/node_versions | \\\n              node -e ' \\\n                var semver = require(\"semver\"); \\\n                var http = require(\"http\"); \\\n                var spec = process.argv[1]; \\\n                var latest = \"\"; \\\n                var versions = \"\"; \\\n                var selected_version; \\\n \\\n                function verifyBinary(version) { \\\n                  var options = { \\\n                    \"host\": \"storage.googleapis.com\", \\\n                    \"method\": \"HEAD\", \\\n                    \"path\": \"/gae_node_packages/node-\" + version + \\\n                            \"-linux-x64.tar.gz\" \\\n                  }; \\\n                  var req = http.request(options, function (res) { \\\n                    if (res.statusCode == 404) { \\\n                      console.error(\"Binaries for Node satisfying version \" + \\\n                                    version + \" are not available.\"); \\\n                      process.exit(1); \\\n                    } \\\n                  }); \\\n                  req.end(); \\\n                } \\\n                function satisfies(version) { \\\n                  if (semver.satisfies(version, spec)) { \\\n                    process.stdout.write(version); \\\n                    verifyBinary(version); \\\n                    return true; \\\n                  } \\\n                } \\\n                process.stdin.on(\"data\", function(data) { \\\n                  versions += data; \\\n                }); \\\n                process.stdin.on(\"end\", function() { \\\n                  versions = \\\n                      versions.split(\"\\n\").sort().reverse(); \\\n                  if (!versions.some(satisfies)) { \\\n                    console.error(\"No version of Node found satisfying: \" + \\\n                                  spec); \\\n                    process.exit(1); \\\n                  } \\\n                });' \\\n                \">=0.12.7\") && \\\n                rm -rf /nodejs/* && \\\n                ( curl -f https://storage.googleapis.com/gae_node_packages/node-$version-linux-x64.tar.gz | \\\n                 tar xzf - -C /nodejs --strip-components=1))) && npm cache clean --force;\nCMD npm start\n"
}