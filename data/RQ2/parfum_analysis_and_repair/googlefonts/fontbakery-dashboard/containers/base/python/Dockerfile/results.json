{
  "startTime": 1674250322839,
  "endTime": 1674250324526,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 98
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:eoan\n\nRUN touch /tmp/cache_spoof_7\n\n\n# START TZCONFIG FIX suggested in:\n# https://stackoverflow.com/a/47909037/1315369\n# The tzdata package was expecting interaction to configure it\n\n## for apt to be noninteractive\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\n## preset tzdata, update package index, upgrade packages and install needed software\nRUN echo \"tzdata tzdata/Areas select Europe\" > /tmp/preseed.txt; \\\n    echo \"tzdata tzdata/Zones/Europe select Berlin\" >> /tmp/preseed.txt; \\\n    debconf-set-selections /tmp/preseed.txt && \\\n    rm -f /etc/timezone && \\\n    rm -f /etc/localtime && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y tzdata && rm -rf /var/lib/apt/lists/*;\n\n## cleanup of files from setup\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n# END TZCONFIG FIX\n\n# universe in bionic has a Package: fontforge (1:20170731~dfsg-1)\n# while the ppa currently has no newer version and no bionic version yet\n# TODO: re-check and insrt the following line before the \"&& apt-get update \\\" line\n#     && add-apt-repository ppa:fontforge/fontforge \\\n\nRUN apt-get update && apt-get upgrade -y \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y curl libicu-dev \\\n                          fontforge-nox python-fontforge git build-essential \\\n                          libssl-dev libffi-dev python-dev libxmlsec1-dev \\\n                          libxml2 libxml2-dev tzdata python3-minimal; rm -rf /var/lib/apt/lists/*;\n\n# diffenator dependencies, to install pycairo\nRUN apt-get install --no-install-recommends -y python3-dev libcairo2 libcairo2-dev libharfbuzz-bin && rm -rf /var/lib/apt/lists/*;\n\n\n# RUN curl -o /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py; python /tmp/get-pip.py;\nRUN curl -f -o /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py; python3 /tmp/get-pip.py;\n\nrun pip3 install --no-cache-dir --upgrade pip\n\n# FIXME!\n# Also, fontbakery should come with all requirements in it's setup.py\n# how does fontTools or defcon handle this?\n# ADD requirements.txt /\n# RUN pip3 install --no-cache-dir -r requirements.txt\n\n# FIXME: need all external dependencies\n# ADD prebuilt/ot-sanitise /usr/local/bin/\n\n# This is taking forever to compile, so it slows down reiterations\n# it's a dependency of fontbakery. Adding it early, so it is cached\n# by the docker build\n# This is bad: fontbakery requirements.txt needs a version and setup.py doesn't, we\n# install from both ...\nRUN pip3 install --no-cache-dir lxml; # ==3.5.0\n\nADD requirements.txt /var/python/requirements.txt\nRUN pip3 install --no-cache-dir -r /var/python/requirements.txt\n\nRUN touch /tmp/cache_spoof_4\n\n# FIXME: doesn't install all dependencies!\n# RUN pip3 install git+https://github.com/graphicore/fontbakery@dashboard_related\n\n#RUN git clone --depth 1 -b p3_fixes git://github.com/graphicore/fontbakery /var/fontbakery;\\\n#RUN git clone --depth 1 -b main git://github.com/googlefonts/fontbakery /var/fontbakery;\\\n#    pip3 install /var/fontbakery;\n\n# FIXME: probably all `pip3 install dependencies should be in requirements.txt\n\n# See: https://github.com/fonttools/ttfautohint-py/issues/5\n# RUN apt-get install -y flex autotools-dev libtool bison cmake\n# RUN pip install scikit-build\n# RUN pip install git+https://github.com/fonttools/ttfautohint-py.git@v0.4.3#egg=ttfautohint-py\n\nRUN pip3 install --no-cache-dir fontbakery;\n\n\n# There's a temporary error in Pillow after 7.0.0:\n# https://github.com/python-pillow/Pillow/issues/4518#issuecomment-616377174\n# At version 7.1.1: \"Downgrade to Pillow 7.0.0 until a newer Pillow is released\"\n\nRUN pip3 -v --no-cache-dir install Pillow==7.0.0;\n\n# tools used for live debugging and profiling\n# RUN pip3 install memory-profiler\n# RUN apt-get install -y vim tmux htop\n# RUN touch /tmp/cache_spoof_1\n# RUN pip3 install remote-pdb\n# RUN git clone --depth 1 -b fb_dashboard_bughunt_issue100_OOM https://github.com/graphicore/fontdiffenator.git /var/fontdiffenator;\\\n#     pip3 install -e /var/fontdiffenator;\nRUN pip3 install --no-cache-dir fontdiffenator;\n\nRUN pip3 install --no-cache-dir gfdiffbrowsers\n\nRUN touch /tmp/cache_spoof_1\n\n# in update_protobufs.sh the command `python -m grpc_tools.protoc`\n# doesn't create python 3 ready relative imports\n# see: https://github.com/protocolbuffers/protobuf/issues/1491\n# setting PYTHONPATH ths way helps.\nENV PYTHONPATH=\"/var/python/protocolbuffers/:${PYTHONPATH}\"\n\n# Solves isses raising errors like:\n#     UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-8: ordinal not in range(128)\n# See e.g.: https://github.com/docker-library/python/issues/13\n# also an option: ENV PYTHONIOENCODING=UTF-8\nENV LANG C.UTF-8\n\n\nADD . /var/python/\n"
}