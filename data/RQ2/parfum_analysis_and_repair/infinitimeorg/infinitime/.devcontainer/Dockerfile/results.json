{
  "startTime": 1674254553584,
  "endTime": 1674254554703,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:latest\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update -qq \\\n    && apt-get install --no-install-recommends -y \\\n# x86_64 / generic packages\n      bash \\\n      build-essential \\\n      cmake \\\n      git \\\n      make \\\n      python3 \\\n      python3-pip \\\n      tar \\\n      unzip \\\n      wget \\\n      curl \\\n      dos2unix \\\n      clang-format-12 \\\n      clang-tidy \\\n      locales \\\n      libncurses5 \\\n# aarch64 packages\n      libffi-dev \\\n      libssl-dev \\\n      python3-dev \\\n      rustc \\\n    && rm -rf /var/cache/apt/* /var/lib/apt/lists/*;\n\n#SET LOCALE\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nRUN pip3 install --no-cache-dir adafruit-nrfutil\n# required for McuBoot\nRUN pip3 install --no-cache-dir setuptools_rust\n\nWORKDIR /opt/\n# build.sh knows how to compile but it problimatic on Win10\nCOPY build.sh .\nRUN chmod +x build.sh\n# create_build_openocd.sh uses cmake to crate to build directory\nCOPY create_build_openocd.sh .\nRUN chmod +x create_build_openocd.sh\n# Lets get each in a separate docker layer for better downloads\n# GCC\n# RUN bash -c \"source /opt/build.sh; GetGcc;\"\nRUN wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2 -O - | tar -xj -C /opt\n# NrfSdk\n# RUN bash -c \"source /opt/build.sh; GetNrfSdk;\"\nRUN wget -q \"https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v15.x.x/nRF5_SDK_15.3.0_59ac345.zip\" -O /tmp/nRF5_SDK_15.3.0_59ac345\nRUN unzip -q /tmp/nRF5_SDK_15.3.0_59ac345 -d /opt\nRUN rm /tmp/nRF5_SDK_15.3.0_59ac345\n# McuBoot\n# RUN bash -c \"source /opt/build.sh; GetMcuBoot;\"\nRUN git clone https://github.com/mcu-tools/mcuboot.git\nRUN pip3 install --no-cache-dir -r ./mcuboot/scripts/requirements.txt\n\nRUN adduser infinitime\n\nENV NRF5_SDK_PATH /opt/nRF5_SDK_15.3.0_59ac345\nENV ARM_NONE_EABI_TOOLCHAIN_PATH /opt/gcc-arm-none-eabi-9-2020-q2-update\nENV SOURCES_DIR /workspaces/InfiniTime\n"
}