{
  "startTime": 1674216242751,
  "endTime": 1674216243861,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 28,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 65,
        "columnEnd": 76
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 21,
        "columnEnd": 48
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 99
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG from\nFROM ${from}\nARG use_tuna_yum=0\nARG pip_args=\"\"\nARG bazel_url=\"https://github.com/bazelbuild/bazel/releases/download/3.4.1/bazel-3.4.1-linux-x86_64\"\nLABEL maintainer=\"OneFlow Maintainers\"\n\n# manylinux2014\nENV AUDITWHEEL_ARCH x86_64\nENV AUDITWHEEL_PLAT manylinux2014_$AUDITWHEEL_ARCH\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\nENV PATH $PATH:/usr/local/bin\nENV LD_LIBRARY_PATH /usr/local/lib64:/usr/local/lib\nENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig\n\n# use tuna mirror\nCOPY docker/package/manylinux/CentOS7-Base-163.repo /tmp/CentOS-Base.repo\nRUN if [ \"${use_tuna_yum}\" = \"1\" ]; then mv /tmp/CentOS-Base.repo /etc/yum.repos.d/ && yum makecache ; fi\n\n# to speed up docker img building disable cuda repo\n# in 10.1, cuda yum repo will update cublas to 10.2 and breaks build\nRUN yum-config-manager --disable cuda nvidia-ml\n\nARG MANYLINUX_SHA=b634044\nRUN yum -y install unzip && curl -f -L -o manylinux.zip https://github.com/Oneflow-Inc/manylinux/archive/${MANYLINUX_SHA}.zip && unzip manylinux.zip -d tmp && cp -r tmp/*/docker/build_scripts /build_scripts && bash build_scripts/build.sh && rm -r build_scripts tmp manylinux.zip && rm -rf /var/cache/yum\n\nENV SSL_CERT_FILE=/opt/_internal/certs.pem\n# manylinux2014 end\n\nRUN yum-config-manager --add-repo https://yum.repos.intel.com/oneapi && \\\n    rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \\\n    yum update -y && yum install -y epel-release && \\\n    yum -y install centos-release-scl && \\\n    yum install -y intel-oneapi-mkl-devel-2021.2.0 nasm rdma-core-devel devtoolset-7-gcc* rsync gdb && rm -rf /var/cache/yum\n\nRUN /opt/python/cp35-cp35m/bin/pip install $pip_args -U cmake==3.18.4.post1 && ln -s /opt/_internal/cpython-3.5.9/bin/cmake /usr/bin/cmake\n\nRUN mkdir -p /tmp && cd /tmp && \\\n    curl -f -L -o patchelf-src.zip \\\n    https://github.com/Oneflow-Inc/patchelf/archive/64bf5388ef7d45d3697c4aadbd3f5d7d68a22aa3.zip && \\\n    unzip patchelf-src.zip && cd patchelf-* && ./bootstrap.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j`nproc` && \\\n    make install && cd .. && rm -rf patchelf-*\n\nRUN curl -f -L $bazel_url -o /usr/local/bin/bazel \\\n    && chmod +x /usr/local/bin/bazel \\\n    && bazel\n\nCOPY dev-requirements.txt /tmp/dev-requirements.txt\nRUN /opt/python/cp36-cp36m/bin/pip install $pip_args -r /tmp/dev-requirements.txt --user \\\n    && /opt/python/cp37-cp37m/bin/pip install $pip_args -r /tmp/dev-requirements.txt --user \\\n    && /opt/python/cp38-cp38/bin/pip install $pip_args -r /tmp/dev-requirements.txt --user \\\n    && rm /tmp/dev-requirements.txt\n"
}