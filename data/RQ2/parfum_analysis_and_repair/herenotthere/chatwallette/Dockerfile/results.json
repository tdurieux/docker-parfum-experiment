{
  "startTime": 1674252128342,
  "endTime": 1674252129097,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install dependencies only when needed\nFROM node:alpine AS deps\n\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\nRUN apk add --no-cache libc6-compat build-base gcc wget git python3\nWORKDIR /app\n\nCOPY package.json ./\nCOPY yarn.lock ./\nCOPY .yarnrc.yml ./\nCOPY .yarn ./.yarn\nCOPY client/package.json ./client/\nCOPY server/package.json ./server/\n\nRUN $(corepack enable)\nRUN yarn install --immutable && yarn cache clean;\n\n# Rebuild the source code only when needed\nFROM node:alpine AS builder\nWORKDIR /app\nCOPY . .\nCOPY --from=deps /app/node_modules ./node_modules/\nCOPY --from=deps /app/.yarn ./.yarn/\n\nRUN echo $(ls -a -1 ./)\nRUN echo $(ls -a -1 ./.yarn)\n\nRUN yarn workspaces foreach run build && yarn cache clean;\n\nRUN echo $(ls -a -1 ./)\nRUN echo $(ls -a -1 ./.yarn)\n\n\n# Production image, copy all the files and run next\nFROM node:alpine AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\n# Required build arguments.\nARG _GCP_PROJECT_ID\nARG _REDISHOST\n# Optional arguments\nARG _ANALYTICS_ID=\nARG _REDISPORT=6379\n\nENV ANALYTICS_ID=$_ANALYTICS_ID\nENV GCP_PROJECT_ID=$_GCP_PROJECT_ID\nENV REDISHOST=$_REDISHOST\nENV REDISPORT=$_REDISPORT\n\nRUN echo Substituted values for GCP_PROJECT_ID=${GCP_PROJECT_ID}, REDISHOST=${REDISHOST}, REDISPORT=${REDISPORT}, ANALYTICS_ID=${ANALYTICS_ID}\n\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\n# Copy the static client from next:export\nCOPY --from=builder /app/client/out ./out\n\n# Copy the server code and node_modules\nCOPY --from=builder /app/node_modules ./node_modules/\nCOPY --from=builder /app/server/package.json ./\nCOPY --from=builder /app/server/dist ./dist\n\nRUN echo $(ls -a -1 ./)\n\nUSER nextjs\n\nEXPOSE 3000 8080\n\nENV PORT 3000\n\nCMD [\"node\", \"dist/server/src/main.js\"]"
}