{
  "startTime": 1674255967651,
  "endTime": 1674255968665,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The building of ProtoBuf \"messages\" must be done out of Docker because grpc-node does not ship with ARM64 binaries.\n# See: https://github.com/grpc/grpc-node/issues/1405\n# When the issue above is closed, we can move back messages building inside Dockerfile\n\n# protobuf build\nFROM --platform=$BUILDPLATFORM node:16.15-buster-slim@sha256:9ad2f889d4a15ef94e40ac75e95c28daa34073dbc25d7b1e619caacc6b83623c as proto-builder\nWORKDIR /usr/src\nCOPY messages/yarn.lock messages/package.json ./\nRUN yarn install && yarn cache clean;\nCOPY messages .\nRUN yarn run tag-version && yarn run ts-proto\n\n# typescript build\nFROM --platform=$BUILDPLATFORM node:16.15-buster-slim@sha256:9ad2f889d4a15ef94e40ac75e95c28daa34073dbc25d7b1e619caacc6b83623c as builder\nWORKDIR /usr/src\nCOPY front/yarn.lock front/package.json ./\nRUN yarn install --network-timeout 1000000 && yarn cache clean;\nCOPY front .\n\nCOPY --from=proto-builder /usr/src/ts-proto-generated src/Messages/ts-proto-generated\nRUN sed -i 's/import { Observable } from \"rxjs\";/import type { Observable } from \"rxjs\";/g' src/Messages/ts-proto-generated/protos/messages.ts\nCOPY --from=proto-builder /usr/src/JsonMessages src/Messages/JsonMessages\n\n# upgrade RAM available to 6G\nRUN yarn run typesafe-i18n && yarn run build-iframe-api && NODE_OPTIONS=\"--max-old-space-size=6144\" yarn build\n\n# final production image\nFROM nginx:1.21.6-alpine\n\nCOPY front/nginx.conf /etc/nginx/conf.d/default.conf\nCOPY front/templater.sh /\n\nCOPY --from=builder /usr/src/dist /usr/share/nginx/html\nCOPY --from=builder /usr/src/server.template.json /usr/share/nginx/html/server.template.json\n\nEXPOSE 80\nCMD [\"/bin/sh\", \"-c\", \"/templater.sh && envsubst < /usr/share/nginx/html/env-config.template.js > /usr/share/nginx/html/env-config.js && envsubst < /usr/share/nginx/html/server.template.json > /usr/share/nginx/html/server.json && exec nginx -g 'daemon off;'\"]\n"
}