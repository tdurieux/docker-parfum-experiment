{
  "startTime": 1674250664124,
  "endTime": 1674250666084,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# DO NOT EDIT THIS FILE : Make yours changes in /utils/Dockerfile.*.blueprint)\nFROM ubuntu:20.04\n\nLABEL authors=\"Julien Neuhart <j.neuhart@thecodingmachine.com>, David NÃ©grier <d.negrier@thecodingmachine.com>\"\n\n# Fixes some weird terminal issues such as broken clear / CTRL+L\n#ENV TERM=linux\n\n# Ensure apt doesn't ask questions when installing stuff\nENV DEBIAN_FRONTEND=noninteractive\n\nARG PHP_VERSION\nENV PHP_VERSION=$PHP_VERSION\n\n# |--------------------------------------------------------------------------\n# | Main PHP extensions\n# |--------------------------------------------------------------------------\n# |\n# | Installs the main PHP extensions\n# |\n\n# Install php an other packages\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends gnupg \\\n    && echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu focal main\" > /etc/apt/sources.list.d/ondrej-php.list \\\n    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4F4EA0AAE5267A6C \\\n    && apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install -y --no-install-recommends \\\n        git \\\n        nano \\\n        sudo \\\n        iproute2 \\\n        openssh-client \\\n        procps \\\n        unzip \\\n        ca-certificates \\\n        curl \\\n        php${PHP_VERSION}-cli \\\n        php${PHP_VERSION}-curl \\\n        php${PHP_VERSION}-mbstring \\\n        php${PHP_VERSION}-opcache \\\n        php${PHP_VERSION}-readline \\\n        php${PHP_VERSION}-xml \\\n        php${PHP_VERSION}-zip \\\n    && if [[ \"${PHP_VERSION}\" =~ ^7 ]]; then apt-get install -y --no-install-recommends php${PHP_VERSION}-json; fi \\\n    && if [[ \"${PHP_VERSION}\" =~ ^8 ]]; then apt-get install -y --no-install-recommends php${PHP_VERSION}-json; fi \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/*\n\n# |--------------------------------------------------------------------------\n# | User\n# |--------------------------------------------------------------------------\n# |\n# | Define a default user with sudo rights.\n# |\n\nRUN useradd -ms /bin/bash docker && adduser docker sudo\n# Users in the sudoers group can sudo as root without password.\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# |--------------------------------------------------------------------------\n# | Default php.ini file\n# |--------------------------------------------------------------------------\n# |\n# | For some reasons, the official image has a php.ini-production.cli file\n# | but no php.ini-development.cli file. Let's create this one.\n# |\n\nRUN cp /usr/lib/php/${PHP_VERSION}/php.ini-development /usr/lib/php/${PHP_VERSION}/php.ini-development.cli && \\\n    sed -i 's/^disable_functions/;disable_functions/g' /usr/lib/php/${PHP_VERSION}/php.ini-development.cli && \\\n    sed -i 's/^memory_limit = .*/memory_limit = -1/g' /usr/lib/php/${PHP_VERSION}/php.ini-development.cli\n\n#ADD https://raw.githubusercontent.com/php/php-src/PHP-${PHP_VERSION}/php.ini-production /usr/local/etc/php/php.ini-production\n#ADD https://raw.githubusercontent.com/php/php-src/PHP-${PHP_VERSION}/php.ini-development /usr/local/etc/php/php.ini-development\n#RUN chmod 644 /usr/local/etc/php/php.ini-*\n\nENV TEMPLATE_PHP_INI=development\n\n# Let's remove the default CLI php.ini file (it will be copied from TEMPLATE_PHP_INI)\nRUN rm /etc/php/${PHP_VERSION}/cli/php.ini\n\n# |--------------------------------------------------------------------------\n# | Composer\n# |--------------------------------------------------------------------------\n# |\n# | Installs Composer to easily manage your PHP dependencies.\n# |\n\n#ENV COMPOSER_ALLOW_SUPERUSER 1\n\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \\\n    chmod +x /usr/local/bin/composer\n\n# TODO: utils.php in /usr/local/bin... bof!\nCOPY utils/utils.php /usr/local/bin/utils.php\nRUN mv /usr/bin/php /usr/bin/real_php\nCOPY utils/php_proxy.sh /usr/bin/php\nCOPY utils/check_php_env_var_changes.php /usr/local/bin/check_php_env_var_changes.php\nCOPY utils/php_env_var_cache.php /opt/php_env_var_cache.php\nCOPY utils/generate_conf.php /usr/local/bin/generate_conf.php\nCOPY utils/setup_extensions.php /usr/local/bin/setup_extensions.php\n\n# |--------------------------------------------------------------------------\n# | Default PHP extensions to be enabled\n# | By default, enable all the extensions that are enabled on a base Ubuntu install\n# |--------------------------------------------------------------------------\nENV PHP_EXTENSION_CALENDAR=1 \\\n    PHP_EXTENSION_CTYPE=1 \\\n    PHP_EXTENSION_CURL=1 \\\n    PHP_EXTENSION_DOM=1 \\\n    PHP_EXTENSION_EXIF=1 \\\n    PHP_EXTENSION_FILEINFO=1 \\\n    PHP_EXTENSION_FTP=1 \\\n    PHP_EXTENSION_GETTEXT=1 \\\n    PHP_EXTENSION_ICONV=1 \\\n    PHP_EXTENSION_JSON=1 \\\n    PHP_EXTENSION_MBSTRING=1 \\\n    PHP_EXTENSION_OPCACHE=1 \\\n    PHP_EXTENSION_PDO=1 \\\n    PHP_EXTENSION_PHAR=1 \\\n    PHP_EXTENSION_POSIX=1 \\\n    PHP_EXTENSION_READLINE=1 \\\n    PHP_EXTENSION_SHMOP=1 \\\n    PHP_EXTENSION_SIMPLEXML=1 \\\n    PHP_EXTENSION_SOCKETS=1 \\\n    PHP_EXTENSION_SYSVMSG=1 \\\n    PHP_EXTENSION_SYSVSEM=1 \\\n    PHP_EXTENSION_SYSVSHM=1 \\\n    PHP_EXTENSION_TOKENIZER=1 \\\n    PHP_EXTENSION_WDDX=1 \\\n    PHP_EXTENSION_XML=1 \\\n    PHP_EXTENSION_XMLREADER=1 \\\n    PHP_EXTENSION_XMLWRITER=1 \\\n    PHP_EXTENSION_XSL=1 \\\n    PHP_EXTENSION_ZIP=1\n\nUSER docker\nRUN composer global require bamarni/symfony-console-autocomplete && \\\n    rm -rf ~/.composer/cache\n\nUSER root\n\n\n\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends php${PHP_VERSION}-fpm \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/*\n\n# Let's remove the default PHP-FPM php.ini file (it will be copied from TEMPLATE_PHP_INI)\nRUN rm /etc/php/${PHP_VERSION}/fpm/php.ini\nRUN ln -s /usr/sbin/php-fpm${PHP_VERSION} /usr/sbin/php-fpm\nCOPY utils/fpm-docker.conf /etc/php/${PHP_VERSION}/fpm/pool.d/docker.conf\nCOPY utils/fpm-zz-docker.conf /etc/php/${PHP_VERSION}/fpm/pool.d/zz-docker.conf\n\n\n\n\n\nRUN mkdir -p /var/www/html && chown -R docker: /var/www\n\n\nRUN chown docker:docker /var/www/html\nWORKDIR /var/www/html\n\n\n# |--------------------------------------------------------------------------\n# | PATH updating\n# |--------------------------------------------------------------------------\n# |\n# | Let's add ./vendor/bin to the PATH (utility function to use Composer bin easily)\n# |\nENV PATH=\"$PATH:./vendor/bin:~/.composer/vendor/bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./vendor/bin:~/.composer/vendor/bin#g' /etc/sudoers\n\nUSER docker\n# |--------------------------------------------------------------------------\n# | SSH client\n# |--------------------------------------------------------------------------\n# |\n# | Let's set-up the SSH client (for connections to private git repositories)\n# | We create an empty known_host file and we launch the ssh-agent\n# |\n\nRUN mkdir ~/.ssh && touch ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts && eval $(ssh-agent -s)\n\n\n# |--------------------------------------------------------------------------\n# | .bashrc updating\n# |--------------------------------------------------------------------------\n# |\n# | Let's update the .bashrc to add nice aliases\n# |\n\nRUN echo 'eval \"$(symfony-autocomplete)\"' > ~/.bash_profile\n\nRUN { \\\n        echo \"alias ls='ls --color=auto'\"; \\\n        echo \"alias ll='ls --color=auto -alF'\"; \\\n        echo \"alias la='ls --color=auto -A'\"; \\\n        echo \"alias l='ls --color=auto -CF'\"; \\\n    } >> ~/.bashrc\n\nUSER root\n\n# |--------------------------------------------------------------------------\n# | NodeJS\n# |--------------------------------------------------------------------------\n# |\n# | NodeJS path registration (if we install NodeJS, this is useful).\n# |\nENV PATH=\"$PATH:./node_modules/.bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./node_modules/.bin#g' /etc/sudoers\n\n# |--------------------------------------------------------------------------\n# | Entrypoint\n# |--------------------------------------------------------------------------\n# |\n# | Defines the entrypoint.\n# |\n\nENV IMAGE_VARIANT=fpm\n\n# Add Tini (to be able to stop the container with ctrl-c).\n# See: https://github.com/krallin/tini\nENV TINI_VERSION v0.16.1\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\nCOPY utils/generate_cron.php /usr/local/bin/generate_cron.php\nCOPY utils/startup_commands.php /usr/local/bin/startup_commands.php\n\nCOPY utils/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nCOPY utils/docker-entrypoint-as-root.sh /usr/local/bin/docker-entrypoint-as-root.sh\n\nCOPY extensions/ /usr/local/lib/thecodingmachine-php/extensions\nRUN ln -s ${PHP_VERSION} /usr/local/lib/thecodingmachine-php/extensions/current\n\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n\n\n\n\nCMD [\"php-fpm\"]\n\n\nRUN touch /etc/php/${PHP_VERSION}/mods-available/generated_conf.ini && ln -s /etc/php/${PHP_VERSION}/mods-available/generated_conf.ini /etc/php/${PHP_VERSION}/cli/conf.d/generated_conf.ini\n\n\n\nRUN ln -s /etc/php/${PHP_VERSION}/mods-available/generated_conf.ini /etc/php/${PHP_VERSION}/fpm/conf.d/generated_conf.ini && \\\n    sed -i 's/^user = www-data/;user = www-data/g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf && \\\n    sed -i 's/^group = www-data/;group = www-data/g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf && \\\n    sed -i 's#listen = /run/php/php${PHP_VERSION}-fpm.sock#;listen = /run/php/php${PHP_VERSION}-fpm.sock#g' /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf && \\\n    sed -i \"s#pid = /run/php/php${PHP_VERSION}-fpm.pid#;pid = /run/php/php${PHP_VERSION}-fpm.pid#g\" /etc/php/${PHP_VERSION}/fpm/php-fpm.conf && \\\n    if [ \"$PHP_VERSION\" = \"7.2\" ]; then \\\n        sed -i 's/^log_limit =/;log_limit =/g' /etc/php/${PHP_VERSION}/fpm/pool.d/docker.conf && \\\n        sed -i 's/^decorate_workers_output =/;decorate_workers_output =/g' /etc/php/${PHP_VERSION}/fpm/pool.d/docker.conf; \\\n    fi\n\n\nUSER docker\n\nCOPY utils/install_selected_extensions.php /usr/local/bin/install_selected_extensions.php\nCOPY utils/install_selected_extensions.sh /usr/local/bin/install_selected_extensions.sh\n\nONBUILD ARG PHP_EXTENSIONS\nONBUILD ENV PHP_EXTENSIONS=\"$PHP_EXTENSIONS\"\nONBUILD RUN sudo -E PHP_EXTENSIONS=\"$PHP_EXTENSIONS\" /usr/local/bin/install_selected_extensions.sh\n\n# |--------------------------------------------------------------------------\n# | Supercronic\n# |--------------------------------------------------------------------------\n# |\n# | Supercronic is a drop-in replacement for cron (for containers).\n# |\nENV SUPERCRONIC_OPTIONS=\n\nONBUILD ARG INSTALL_CRON\nONBUILD RUN if [ -n \"$INSTALL_CRON\" ]; then \\\n SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.9/supercronic-linux-amd64 \\\n && SUPERCRONIC=supercronic-linux-amd64 \\\n && SUPERCRONIC_SHA1SUM=5ddf8ea26b56d4a7ff6faecdd8966610d5cb9d85 \\\n && curl -fsSLO \"$SUPERCRONIC_URL\" \\\n && echo \"${SUPERCRONIC_SHA1SUM}  ${SUPERCRONIC}\" | sha1sum -c - \\\n && chmod +x \"$SUPERCRONIC\" \\\n && sudo mv \"$SUPERCRONIC\" \"/usr/local/bin/${SUPERCRONIC}\" \\\n && sudo ln -s \"/usr/local/bin/${SUPERCRONIC}\" /usr/local/bin/supercronic; \\\n fi;\n\n\n# |--------------------------------------------------------------------------\n# | NodeJS\n# |--------------------------------------------------------------------------\n# |\n# | Installs NodeJS and npm. The later will allow you to easily manage\n# | your frontend dependencies.\n# | Also installs yarn. It provides some nice improvements over npm.\n# |\nONBUILD ARG NODE_VERSION\n \\\nRUN if [ -n \"$NODE_VERSION\" ]; then \\\n    sudo apt-get update && \\\n    sudo apt-get install -y --no-install-recommends gnupg && \\\n    curl -f -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo bash - && \\\n    sudo apt-get update && \\\n    sudo apt-get install -y --no-install-recommends nodejs && \\\n    curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \\\n    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list && \\\n    sudo apt-get update && \\\n    sudo apt-get install -y --no-install-recommends yarn && \\\n    sudo apt-get clean && \\\n    sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/*; \\\n    fi; ONBUILD\n\n\n\n\n\n\n\n\n\n\n\n\n"
}