diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ua-snap/dvm-dos-tem/Dockerfile-mapping-support b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ua-snap/dvm-dos-tem/Dockerfile-mapping-support/repaired.Dockerfile
index 911ffab..6a40132 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ua-snap/dvm-dos-tem/Dockerfile-mapping-support
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ua-snap/dvm-dos-tem/Dockerfile-mapping-support/repaired.Dockerfile
@@ -1,12 +1,12 @@
 # Dockerfile for an image that has geospatial tools, i.e. GDAL.
-# I was unable to get GDAL to work well in the same image with dvmdostem 
+# I was unable to get GDAL to work well in the same image with dvmdostem
 # and it's associated python scripts. So here is a separate image that has
 # GDAL and Python working well together.
 
 # need this for netCDF
-FROM osgeo/gdal:ubuntu-full-latest 
+FROM osgeo/gdal:ubuntu-full-latest
 
-# Might want this if workflow includes running interactive shell on 
+# Might want this if workflow includes running interactive shell on
 # the container resulting from this image...
 #USER root
 #RUN apt-get update
@@ -20,10 +20,9 @@ USER develop
 
 # Pyenv dependencies
 USER root
-RUN apt-get update
-RUN apt-get install -y --fix-missing build-essential libssl-dev zlib1g-dev libbz2-dev \
+RUN apt-get update && apt-get install --no-install-recommends -y --fix-missing build-essential libssl-dev zlib1g-dev libbz2-dev \
 libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
-xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
+xz-utils tk-dev libffi-dev liblzma-dev python-openssl git && rm -rf /var/lib/apt/lists/*;
 
 # Pyenv seems to work well for overall python versioning and packagemanagement.
 # Not sure how to best manage pip requirements.txt yet between this mapping
@@ -38,9 +37,9 @@ RUN pyenv install 3.8.6
 RUN pyenv global 3.8.6
 RUN pyenv rehash
 RUN python --version
-RUN pip install -U pip pipenv
+RUN pip install --no-cache-dir -U pip pipenv
 COPY requirements.txt .
-RUN pip install -r requirements.txt
+RUN pip install --no-cache-dir -r requirements.txt
 
 # or use this if not wanting to use requirements.txt...
 # Bug with ipython 7.19.0, so need to downgrade and pin jedi verison