{
  "startTime": 1674249598861,
  "endTime": 1674249599664,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for an image that has geospatial tools, i.e. GDAL.\n# I was unable to get GDAL to work well in the same image with dvmdostem\n# and it's associated python scripts. So here is a separate image that has\n# GDAL and Python working well together.\n\n# need this for netCDF\nFROM osgeo/gdal:ubuntu-full-latest\n\n# Might want this if workflow includes running interactive shell on\n# the container resulting from this image...\n#USER root\n#RUN apt-get update\n#RUN apt-get install bash-completion\n\n\n# Make a developer user so as not to always be root\nRUN useradd -ms /bin/bash develop\nRUN echo \"develop   ALL=(ALL:ALL) ALL\" >> /etc/sudoers\nUSER develop\n\n# Pyenv dependencies\nUSER root\nRUN apt-get update && apt-get install --no-install-recommends -y --fix-missing build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\nxz-utils tk-dev libffi-dev liblzma-dev python-openssl git && rm -rf /var/lib/apt/lists/*;\n\n# Pyenv seems to work well for overall python versioning and packagemanagement.\n# Not sure how to best manage pip requirements.txt yet between this mapping\n# support image and the other dvmdostem images.\nUSER develop\nENV HOME=/home/develop\nRUN git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv\nENV PYENV_ROOT=$HOME/.pyenv\nENV PATH=$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\nRUN git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv\nRUN pyenv install 3.8.6\nRUN pyenv global 3.8.6\nRUN pyenv rehash\nRUN python --version\nRUN pip install --no-cache-dir -U pip pipenv\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# or use this if not wanting to use requirements.txt...\n# Bug with ipython 7.19.0, so need to downgrade and pin jedi verison\n# https://github.com/ipython/ipython/issues/12740\n#RUN pip install matplotlib numpy pandas bokeh netCDF4 commentjson\n#RUN pip install ipython\n#RUN pip install jedi==0.17.2\n\nWORKDIR /work\n# docker build --tag dvmdostem-mapping-support:0.0.1 -f Dockerfile-mapping-support .\n\n\n## EXAMPLES\n\n# run bokeh server in scripts directory on container start:\n#CMD bokeh serve scripts\n\n# setup to run the container with input catalog attached a volume.\n#INCATALOG=/some/path/to/your/catalog\n# docker run -it --rm -p 5006:5006 --volume $(pwd):/work --volume $INCATALOG:/data/dvmdostem-input-catalog dvmdostem-mapping-support:0.0.1\n\n\n## NOTES #\n\n# Dockerfile words:\n# RUN - is used to install stuff and setup environment\n# CMD - only a single CMD per image, default command when starting container, easily overrridden by docker run\n# ENTRYPOINT - the CMD is *always* appended to ENTRYPOINT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#-------------------\n# FROM perrygeo/gdal-base:latest as builder\n# # Python dependencies that require compilation\n# COPY requirements.txt .\n# RUN python -m pip install cython numpy -c requirements.txt\n# RUN python -m pip install --no-binary fiona,rasterio,shapely -r requirements.txt\n# RUN pip uninstall cython --yes\n\n# # ------ Second stage\n# # Start from a clean image\n# FROM python:3.8-slim-buster as final\n\n# # Install some required runtime libraries from apt\n# RUN apt-get update \\\n#     && apt-get install --yes --no-install-recommends \\\n#        libfreexl1 libxml2 libffi-dev\\\n#     && rm -rf /var/lib/apt/lists/*\n\n# # Install the previously-built shared libaries from the builder image\n# COPY --from=builder /usr/local/* /usr/local/\n# RUN ldconfig -v\n\n#FROM osgeo/gdal:ubuntu-small-latest"
}