diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ua-snap/dvm-dos-tem/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ua-snap/dvm-dos-tem/Dockerfile/repaired.Dockerfile
index 5f8f34b..ce78169 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/ua-snap/dvm-dos-tem/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/ua-snap/dvm-dos-tem/Dockerfile/repaired.Dockerfile
@@ -7,9 +7,9 @@
 #
 #    Note trailing '.' specifying build context as current directory!
 #
-# If you simply docker build the entire file, or one of the 
-# later stages you will end up with several un-named, un-tagged 
-# images from the preceeding stages (i.e. <none>:<none> in the output 
+# If you simply docker build the entire file, or one of the
+# later stages you will end up with several un-named, un-tagged
+# images from the preceeding stages (i.e. <none>:<none> in the output
 # docker image ls). For this reason, it might
 # be nicer to build and tag each stage successively,
 #
@@ -20,7 +20,7 @@ ENV DEBIAN_FRONTEND=noninteractive
 # Might combine these two using &&, somwewhere I read that is better
 RUN apt-get update
 # general tools and dependencies for development
-RUN apt-get install -y build-essential git gdb gdbserver doxygen vim
+RUN apt-get install --no-install-recommends -y build-essential git gdb gdbserver doxygen vim && rm -rf /var/lib/apt/lists/*;
 # docker build --target cpp-dev --tag cpp-dev:0.0.1 .
 
 
@@ -28,10 +28,10 @@ RUN apt-get install -y build-essential git gdb gdbserver doxygen vim
 # running python scripts
 FROM cpp-dev:0.0.1 as dvmdostem-build
 # dvmdostem dependencies
-RUN apt-get install -y libjsoncpp-dev libnetcdf-dev libboost-all-dev libreadline-dev liblapacke liblapacke-dev
+RUN apt-get install --no-install-recommends -y libjsoncpp-dev libnetcdf-dev libboost-all-dev libreadline-dev liblapacke liblapacke-dev && rm -rf /var/lib/apt/lists/*;
 
 # Various command line netcdf tools
-RUN apt-get install -y nco netcdf-bin
+RUN apt-get install --no-install-recommends -y nco netcdf-bin && rm -rf /var/lib/apt/lists/*;
 
 # Make a developer user so as not to always be root
 RUN useradd -ms /bin/bash develop
@@ -41,12 +41,12 @@ USER develop
 # Pyenv dependencies for building full Python with all extensions.
 USER root
 RUN apt-get update
-RUN apt-get install -y --fix-missing build-essential libssl-dev zlib1g-dev libbz2-dev \
+RUN apt-get install --no-install-recommends -y --fix-missing build-essential libssl-dev zlib1g-dev libbz2-dev \
 libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
-xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
+xz-utils tk-dev libffi-dev liblzma-dev python-openssl git && rm -rf /var/lib/apt/lists/*;
 
 
-# Bare bones python approach might be to use system provided python, which in 
+# Bare bones python approach might be to use system provided python, which in
 # ubuntu focal (20.4) means python3 and pip3, or installing python-is-python3
 #RUN apt-get install python3-pip
 #RUN apt-get install python-is-python3
@@ -57,7 +57,7 @@ xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
 # but never got it to work. Decided to use a separate image with gdal support
 # but pyenv might be useful for other packages in the future and is a nice
 # unified way to package and version manage our tooling that has been working
-# well across macOS, Ubunut, CentOS, etc. 
+# well across macOS, Ubunut, CentOS, etc.
 USER develop
 ENV HOME=/home/develop
 RUN git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv
@@ -68,11 +68,11 @@ RUN pyenv install 3.8.6
 RUN pyenv global 3.8.6
 RUN pyenv rehash
 RUN python --version
-RUN pip install -U pip pipenv
-RUN pip install matplotlib numpy pandas bokeh netCDF4 commentjson
-RUN pip install ipython
-RUN pip install jupyter
-RUN pip install lhsmdu
+RUN pip install --no-cache-dir -U pip pipenv
+RUN pip install --no-cache-dir matplotlib numpy pandas bokeh netCDF4 commentjson
+RUN pip install --no-cache-dir ipython
+RUN pip install --no-cache-dir jupyter
+RUN pip install --no-cache-dir lhsmdu
 COPY --chown=develop:develop special_configurations/jupyter_notebook_config.py /home/develop/.jupyter/jupyter_notebook_config.py
 
 #RUN pip install gdal ## Doesn't work...
@@ -89,7 +89,7 @@ ENV PATH="/work/scripts:$PATH"
 # docker build --target dvmdostem-run --tag dvmdostem-run:0.0.1 .
 
 # A production ready container...
-# At some point we could trim down and selectively copy out only the 
+# At some point we could trim down and selectively copy out only the
 # required shared libraries needed for running dvmdostem...
 #FROM dvmdostem-run as dvmdostem-lean
 
@@ -99,8 +99,8 @@ ENV PATH="/work/scripts:$PATH"
 # NOTES #
 #########
 
-# Examples of stand alone use. Alternatively it seems you can use 
-# docker-compose for a lot of this and avoid having to explcitly specify 
+# Examples of stand alone use. Alternatively it seems you can use
+# docker-compose for a lot of this and avoid having to explcitly specify
 # volumes, etc:
 # docker run --rm -it --volume $(pwd):/work dvmdostem-run:0.0.1 bash
 # docker run --rm -it --volume $(pwd):/work dvmdostem-run:0.0.1 make