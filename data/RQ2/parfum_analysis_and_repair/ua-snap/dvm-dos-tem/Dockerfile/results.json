{
  "startTime": 1674255029048,
  "endTime": 1674255030005,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 134
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "# Dockerfile for dvmdostem project.\n#\n# Uses a multi-stage build. If you want to only create one of the\n# intermediate stages, then run something like:\n#\n#    $ docker build --target cpp-dev --tag cpp-dev:0.0.1 .\n#\n#    Note trailing '.' specifying build context as current directory!\n#\n# If you simply docker build the entire file, or one of the\n# later stages you will end up with several un-named, un-tagged\n# images from the preceeding stages (i.e. <none>:<none> in the output\n# docker image ls). For this reason, it might\n# be nicer to build and tag each stage successively,\n#\n\n# General dev tools compilers, etc\nFROM ubuntu:focal as cpp-dev\nENV DEBIAN_FRONTEND=noninteractive\n# Might combine these two using &&, somwewhere I read that is better\nRUN apt-get update\n# general tools and dependencies for development\nRUN apt-get install --no-install-recommends -y build-essential git gdb gdbserver doxygen vim && rm -rf /var/lib/apt/lists/*;\n# docker build --target cpp-dev --tag cpp-dev:0.0.1 .\n\n\n# More specific build stuff for compiling dvmdostem and\n# running python scripts\nFROM cpp-dev:0.0.1 as dvmdostem-build\n# dvmdostem dependencies\nRUN apt-get install --no-install-recommends -y libjsoncpp-dev libnetcdf-dev libboost-all-dev libreadline-dev liblapacke liblapacke-dev && rm -rf /var/lib/apt/lists/*;\n\n# Various command line netcdf tools\nRUN apt-get install --no-install-recommends -y nco netcdf-bin && rm -rf /var/lib/apt/lists/*;\n\n# Make a developer user so as not to always be root\nRUN useradd -ms /bin/bash develop\nRUN echo \"develop   ALL=(ALL:ALL) ALL\" >> /etc/sudoers\nUSER develop\n\n# Pyenv dependencies for building full Python with all extensions.\nUSER root\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y --fix-missing build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\nxz-utils tk-dev libffi-dev liblzma-dev python-openssl git && rm -rf /var/lib/apt/lists/*;\n\n\n# Bare bones python approach might be to use system provided python, which in\n# ubuntu focal (20.4) means python3 and pip3, or installing python-is-python3\n#RUN apt-get install python3-pip\n#RUN apt-get install python-is-python3\n#RUN pip install matplotlib numpy pandas bokeh netCDF4 commentjson ipython\n\n# For a more robust version managed python system, use Pyenv.\n# Pyenv may be overkill - was trying it in order to help with gdal install\n# but never got it to work. Decided to use a separate image with gdal support\n# but pyenv might be useful for other packages in the future and is a nice\n# unified way to package and version manage our tooling that has been working\n# well across macOS, Ubunut, CentOS, etc.\nUSER develop\nENV HOME=/home/develop\nRUN git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv\nENV PYENV_ROOT=$HOME/.pyenv\nENV PATH=$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\nRUN git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv\nRUN pyenv install 3.8.6\nRUN pyenv global 3.8.6\nRUN pyenv rehash\nRUN python --version\nRUN pip install --no-cache-dir -U pip pipenv\nRUN pip install --no-cache-dir matplotlib numpy pandas bokeh netCDF4 commentjson\nRUN pip install --no-cache-dir ipython\nRUN pip install --no-cache-dir jupyter\nRUN pip install --no-cache-dir lhsmdu\nCOPY --chown=develop:develop special_configurations/jupyter_notebook_config.py /home/develop/.jupyter/jupyter_notebook_config.py\n\n#RUN pip install gdal ## Doesn't work...\n#RUN pip install GDAL ## Doesn't work...\n# docker build --target dvmdostem-build --tag dvmdostem-build:0.0.1 .\n\n# The final image that we will run as a container.\nFROM dvmdostem-build:0.0.1 as dvmdostem-run\nWORKDIR /work\nENV SITE_SPECIFIC_INCLUDES=\"-I/usr/include/jsoncpp\"\nENV SITE_SPECIFIC_LIBS=\"-I/usr/lib\"\nENV PATH=\"/work:$PATH\"\nENV PATH=\"/work/scripts:$PATH\"\n# docker build --target dvmdostem-run --tag dvmdostem-run:0.0.1 .\n\n# A production ready container...\n# At some point we could trim down and selectively copy out only the\n# required shared libraries needed for running dvmdostem...\n#FROM dvmdostem-run as dvmdostem-lean\n\n\n\n#########\n# NOTES #\n#########\n\n# Examples of stand alone use. Alternatively it seems you can use\n# docker-compose for a lot of this and avoid having to explcitly specify\n# volumes, etc:\n# docker run --rm -it --volume $(pwd):/work dvmdostem-run:0.0.1 bash\n# docker run --rm -it --volume $(pwd):/work dvmdostem-run:0.0.1 make\n# docker run --rm -it --volume $(pwd):/work dvmdostem-run:0.0.1 /work/dvmdostem --help\n#INCATALOG=\"/Users/tobeycarman/Documents/SEL/dvmdostem-input-catalog\"\n#docker run -it --rm -p 5006:5006 --volume $(pwd):/work --volume $INCATALOG:/data/dvmdostem-input-catalog dvmdostem-run:0.0.1\n\n\n# Dockerfile words:\n# RUN - is used to install stuff and setup environment\n# CMD - only a single CMD per image, default command when starting container, easily overrridden by docker run\n# ENTRYPOINT - the CMD is *always* appended to ENTRYPOINT\n\n#Lots of good ideas here:\n# https://github.com/cpp-projects-showcase/docker-images/blob/master/ubuntu2004/Dockerfile\n\n"
}