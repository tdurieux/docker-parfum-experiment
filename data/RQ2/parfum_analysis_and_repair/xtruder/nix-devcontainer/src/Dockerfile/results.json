{
  "startTime": 1674252175606,
  "endTime": 1674252176306,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.17 as ext-preloader\n\nADD ext-preloader /src\nWORKDIR /src\nRUN go build -o /ext-preloader main.go\n\nFROM debian:stable-slim\n\nLABEL maintainer=\"X-Truder <dev@x-truder.net>\"\n\n# change build shell to /bin/bash, so env will be set correctly\nSHELL [\"/bin/bash\", \"-c\"]\n\n# make /bin/sh symlink to bash instead of dash:\nRUN echo \"dash dash/sh boolean false\" | debconf-set-selections\nRUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash\n\n# update and install base packages\nRUN apt update -y && apt -y install --no-install-recommends \\\n    sudo \\\n    ca-certificates \\\n    psmisc \\\n    procps \\\n    less \\\n    xz-utils \\\n    vim-tiny \\\n    nano \\\n    curl \\\n    git \\\n    ssh \\\n    direnv \\\n    gnupg2 \\\n    iproute2 \\\n    inetutils-ping \\\n    rsync \\\n    lsb-release \\\n    dialog \\\n    locales \\\n    man-db \\\n    bash-completion && rm -rf /var/lib/apt/lists/*;\n\n# create at least locae for en_US.UTF-8\nRUN echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen\n\n# create non-root user and group and add it sudoers\nARG USERNAME=code\nARG USER_UID=1000\nARG USER_GID=${USER_UID}\nRUN groupadd --gid ${USER_GID} ${USERNAME} && \\\n    useradd --uid ${USER_UID} --gid ${USER_GID} -m ${USERNAME} -s /bin/bash && \\\n    echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/devcontainer && \\\n    chmod 0440 /etc/sudoers.d/devcontainer\n\n# copy nix configuration\nCOPY etc/nix.conf /etc/nix/nix.conf\n\n# install nix\nARG NIX_INSTALL_SCRIPT=https://nixos.org/nix/install\nRUN curl -f -L ${NIX_INSTALL_SCRIPT} | sudo -u ${USERNAME} NIX_INSTALLER_NO_MODIFY_PROFILE=1 sh\n\n# install devcontainer extra profile that loads nix and has vscode user env probe\nCOPY etc/devcontainer.sh /etc/profile.d/devcontainer.sh\n\n# install bash config\nCOPY etc/bash.bashrc /etc/bash.bashrc\n\n# set env for non interactve shell to load nix\nCOPY etc/envrc /etc/envrc\nENV ENV=\"/etc/envrc\" BASH_ENV=\"/etc/envrc\"\n\n# copy direnv config and set conig path\nCOPY etc/direnv.toml /etc\nENV DIRENV_CONFIG=/etc\n\nCOPY --from=ext-preloader /ext-preloader /usr/bin/ext-preloader\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\n\n# set defaut user, can be changed via ONBUILD triggers\nUSER ${USERNAME}\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\n\nONBUILD USER root\n\n# Arguments for username and user_uid and user_gid that can be changed\nONBUILD ARG USERNAME=code\nONBUILD ARG USER_UID=1000\nONBUILD ARG USER_GID=${USER_UID}\n\n# onbuild uid and gid fixes\nONBUILD RUN \\\n    if [ -z ${USER_UID} ] || [ -z ${USER_UID} ] || [ -z ${USERNAME} ]; then exit 0; fi && \\\n    set -x && \\\n    if [ \"$(id -u code)\" != \"${USER_UID}\" ] || [ \"$(id -g code)\" != \"${USER_GID}\" ]; then \\\n        groupmod -g ${USER_GID} -n ${USERNAME} code || true && \\\n        usermod -u ${USER_UID} -g ${USER_GID} -l ${USERNAME} -m -d /home/${USERNAME} code && \\\n        chown -R ${USER_UID}:${USER_GID} /nix && \\\n        chown -R ${USER_UID}:${USER_GID} /home/${USERNAME} && \\\n        echo ${USERNAME} ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/devcontainer; \\\n    fi\n\nONBUILD USER ${USERNAME}\n"
}