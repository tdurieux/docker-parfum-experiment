{
  "startTime": 1674251638721,
  "endTime": 1674251641727,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 19,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 62,
        "columnEnd": 94
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 61,
        "columnEnd": 87
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 61,
        "columnEnd": 87
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Step 1 - Build Front End Application\nFROM node:16 AS build\n\n# Copy the entire project - Webpack puts compiled assets into the Django folder\nWORKDIR /app\nCOPY . .\n\nRUN cd frontend && npm install --quiet --production && npm cache clean --force;\nENV ENV=prod\nENV STATIC_ASSET_CDN_URL=/static/\nRUN cd frontend && npm run bundledjango\n\n\n# Step 2 - Build Django Application\nFROM python:3.10-slim as application\n\nWORKDIR /app\nCOPY api /app/\n\n# arm architecture platform builds need postgres drivers installing via apt\nARG TARGETARCH\nRUN if [ \"${TARGETARCH}\" != \"amd64\" ]; then \\\n apt-get update && apt-get install --no-install-recommends -y gcc libpq-dev && rm -rf /var/lib/apt/lists/*; fi;\n\n# Install re2\nARG GOOGLE_RE2_VERSION=\"0.2.20220601\"\nARG TARGETPLATFORM\nRUN pip install --no-cache-dir google-re2==${GOOGLE_RE2_VERSION}\n\n# Install SAML dependency if required\nARG SAML_INSTALLED=\"0\"\nRUN if [ \"${SAML_INSTALLED}\" = \"1\" ]; then \\\n apt-get update && apt-get install --no-install-recommends -y xmlsec1; rm -rf /var/lib/apt/lists/*; fi;\n\n# Install python dependencies\nRUN pip install -r requirements.txt --no-cache-dir --compile\n\n# Compile static Django assets\nRUN python /app/manage.py collectstatic --no-input\n\n# Copy the compiled front end assets from the previous build step\nCOPY --from=build /app/api/static /app/static/\nCOPY --from=build /app/api/app/templates/webpack /app/app/templates/webpack\n\nARG ACCESS_LOG_LOCATION=\"/dev/null\"\nENV ACCESS_LOG_LOCATION=${ACCESS_LOG_LOCATION}\nENV DJANGO_SETTINGS_MODULE=app.settings.production\n\nEXPOSE 8000\n\nUSER nobody\n\nENTRYPOINT [\"./scripts/run-docker.sh\"]\n\n# other options below are `migrate` or `serve`\nCMD [\"migrate-and-serve\"]\n"
}