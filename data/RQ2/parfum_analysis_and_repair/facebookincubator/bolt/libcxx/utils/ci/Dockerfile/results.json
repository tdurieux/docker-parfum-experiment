{
  "startTime": 1674252738474,
  "endTime": 1674252739361,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 12,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 15,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 101
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 48,
        "columnStart": 22,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 101
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 48,
        "columnStart": 22,
        "columnEnd": 79
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 22,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 80
      }
    }
  ],
  "repairedDockerfile": "#===----------------------------------------------------------------------===##\n#\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n#\n#===----------------------------------------------------------------------===##\n\n#\n# This Dockerfile describes the base image used to run the various libc++\n# build bots. By default, the image runs the Buildkite Agent, however one\n# can also just start the image with a shell to debug CI failures.\n#\n# To start a Buildkite Agent, run it as:\n#   $ docker run --env-file <secrets> -it $(docker build -q libcxx/utils/ci)\n#\n# The environment variables in `<secrets>` should be the ones necessary\n# to run a BuildKite agent.\n#\n# If you're only looking to run the Docker image locally for debugging a\n# build bot, see the `run-buildbot-container` script located in this directory.\n#\n# A pre-built version of this image is maintained on DockerHub as ldionne/libcxx-builder.\n# To update the image, rebuild it and push it to ldionne/libcxx-builder (which\n# will obviously only work if you have permission to do so).\n#\n#   $ docker build -t ldionne/libcxx-builder libcxx/utils/ci\n#   $ docker push ldionne/libcxx-builder\n#\n\nFROM ubuntu:focal\n\n# Make sure apt-get doesn't try to prompt for stuff like our time zone, etc.\nENV DEBIAN_FRONTEND=noninteractive\n\n# This dummy command is meant to be edited from time to time, which causes the\n# CI builders to rebuild their copy of the Docker image. This is not a great\n# solution, however without that, the CI builders will keep the same cached\n# Docker image forever.\nRUN echo 6\n\nRUN apt-get update && apt-get install --no-install-recommends -y bash curl && rm -rf /var/lib/apt/lists/*;\n\n# Install various tools used by the build or the test suite\nRUN apt-get update && apt-get install --no-install-recommends -y ninja-build python3 python3-sphinx python3-distutils git gdb && rm -rf /var/lib/apt/lists/*;\n\n# Locales for gdb and localization tests\nRUN apt-get update && apt-get install --no-install-recommends -y language-pack-en language-pack-fr \\\n                                         language-pack-ru language-pack-zh-hans && rm -rf /var/lib/apt/lists/*;\n# These two are not enabled by default so generate them\nRUN printf \"fr_CA ISO-8859-1\\ncs_CZ ISO-8859-2\" >> /etc/locale.gen\nRUN mkdir /usr/local/share/i1en/\nRUN printf \"fr_CA ISO-8859-1\\ncs_CZ ISO-8859-2\" >> /usr/local/share/i1en/SUPPORTED\nRUN locale-gen\n\n# Install Clang <latest>, <latest-1> and ToT, which are the ones we support.\nENV LLVM_LATEST_VERSION=13\nRUN apt-get update && apt-get install --no-install-recommends -y lsb-release wget software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh\nRUN bash /tmp/llvm.sh $(($LLVM_LATEST_VERSION - 1)) # previous release\nRUN bash /tmp/llvm.sh $LLVM_LATEST_VERSION          # latest release\nRUN bash /tmp/llvm.sh $(($LLVM_LATEST_VERSION + 1)) # current ToT\n\n# Make the ToT Clang the \"default\" compiler on the system\nRUN ln -fs /usr/bin/clang++-$(($LLVM_LATEST_VERSION + 1)) /usr/bin/c++ && [ -e $(readlink /usr/bin/c++) ]\nRUN ln -fs /usr/bin/clang-$(($LLVM_LATEST_VERSION + 1)) /usr/bin/cc && [ -e $(readlink /usr/bin/cc) ]\n\n# Install clang-format\nRUN apt-get install --no-install-recommends -y clang-format-$LLVM_LATEST_VERSION && rm -rf /var/lib/apt/lists/*;\nRUN ln -s /usr/bin/clang-format-$LLVM_LATEST_VERSION /usr/bin/clang-format && [ -e $(readlink /usr/bin/clang-format) ]\nRUN ln -s /usr/bin/git-clang-format-$LLVM_LATEST_VERSION /usr/bin/git-clang-format && [ -e $(readlink /usr/bin/git-clang-format) ]\n\n# Install the most recent GCC\nENV GCC_LATEST_VERSION=11\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test\nRUN apt-get update && apt install --no-install-recommends -y gcc-$GCC_LATEST_VERSION g++-$GCC_LATEST_VERSION && rm -rf /var/lib/apt/lists/*;\n\n# Install a recent CMake\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.21.1/cmake-3.21.1-linux-x86_64.sh -O /tmp/install-cmake.sh\nRUN bash /tmp/install-cmake.sh --prefix=/usr --exclude-subdir --skip-license\nRUN rm /tmp/install-cmake.sh\n\n# Change the user to a non-root user, since some of the libc++ tests\n# (e.g. filesystem) require running as non-root. Also setup passwordless sudo.\nRUN apt-get update && apt-get install --no-install-recommends -y sudo && rm -rf /var/lib/apt/lists/*;\nRUN echo \"ALL ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers\nRUN useradd --create-home libcxx-builder\nUSER libcxx-builder\nWORKDIR /home/libcxx-builder\n\n# Install the Buildkite agent and dependencies. This must be done as non-root\n# for the Buildkite agent to be installed in a path where we can find it.\nRUN bash -c \"$( curl -f -sL https://raw.githubusercontent.com/buildkite/agent/main/install.sh)\" -f\nENV PATH=\"${PATH}:/home/libcxx-builder/.buildkite-agent/bin\"\nRUN echo \"tags=\\\"queue=libcxx-builders,arch=$(uname -m),os=linux\\\"\" >> \"/home/libcxx-builder/.buildkite-agent/buildkite-agent.cfg\"\n\n# By default, start the Buildkite agent (this requires a token).\nCMD buildkite-agent start\n"
}