{
  "startTime": 1674248030067,
  "endTime": 1674248031444,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 41,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#===- llvm/tools/clang/tools/clang-fuzzer ---------------------------------===//\n#\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n#\n#===----------------------------------------------------------------------===//\n# Produces an image that builds clang-proto-fuzzer\nFROM ubuntu:16.04\nRUN apt-get update -y && apt-get install --no-install-recommends -y autoconf automake libtool curl make g++ unzip wget git \\\n    binutils liblzma-dev libz-dev python-all cmake ninja-build subversion \\\n    pkg-config docbook2x && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /root\n\n# Get protobuf\nRUN wget -qO- https://github.com/google/protobuf/releases/download/v3.3.0/protobuf-cpp-3.3.0.tar.gz | tar zxf -\nRUN cd protobuf-3.3.0 && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j $(nproc) && make check -j $(nproc) && make install && ldconfig\n# Get LLVM\nRUN svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm\nRUN cd llvm/tools && svn co http://llvm.org/svn/llvm-project/cfe/trunk clang -r $(cd ../ && svn info | grep Revision | awk '{print $2}')\nRUN cd llvm/projects && svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt -r $(cd ../ && svn info | grep Revision | awk '{print $2}')\n# Build plain LLVM (stage 0)\nRUN mkdir build0 && cd build0 && cmake -GNinja -DCMAKE_BUILD_TYPE=Release ../llvm && ninja\n# Configure instrumented LLVM (stage 1)\nRUN mkdir build1 && cd build1 && cmake -GNinja -DCMAKE_BUILD_TYPE=Release ../llvm \\\n    -DLLVM_ENABLE_ASSERTIONS=ON \\\n    -DCMAKE_C_COMPILER=`pwd`/../build0/bin/clang \\\n    -DCMAKE_CXX_COMPILER=`pwd`/../build0/bin/clang++ \\\n    -DLLVM_USE_SANITIZE_COVERAGE=YES \\\n    -DLLVM_USE_SANITIZER=Address -DCLANG_ENABLE_PROTO_FUZZER=ON\n# Build the fuzzers\nRUN cd build1 && ninja clang-fuzzer\nRUN cd build1 && ninja clang-objc-fuzzer\nRUN cd build1 && ninja clang-proto-fuzzer\nRUN cd build1 && ninja clang-proto-to-cxx\nRUN cd build1 && ninja clang-loop-proto-to-cxx\nRUN cd build1 && ninja clang-loop-proto-to-llvm\nRUN cd build1 && ninja clang-loop-proto-fuzzer\nRUN cd build1 && ninja clang-llvm-proto-fuzzer\n"
}