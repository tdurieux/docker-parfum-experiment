{
  "startTime": 1674249505955,
  "endTime": 1674249506955,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile configures a Debian system with Nix, builds Polygames and\n# runs some tests. To build this docker image, run:\n# `docker build -t polygames .`\n\n\n###############################################################################\n# Initialize the docker image. You can ignore this when installing on a real\n# system.\n###############################################################################\nFROM debian:buster\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update -y && apt-get install --no-install-recommends -y git curl sudo xz-utils && rm -rf /var/lib/apt/lists/*;\nRUN useradd -ms /bin/bash -G sudo myuser\nRUN echo \"myuser ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\nUSER myuser\nENV USER=\"myuser\"\nENV HOME=\"/home/myuser\"\n\n\n###############################################################################\n# Install Nix.\n###############################################################################\nRUN curl -f https://nixos.org/releases/nix/latest/install | sh\n\n# For docker only:\nENV PATH=\"$HOME/.nix-profile/bin/:$PATH\"\n\n# On a real system, yau have to run these two lines instead:\n#RUN echo \"source $HOME/.nix-profile/etc/profile.d/nix.sh\" >> $HOME/.bashrc\n#RUN source $HOME/.bashrc\n\n\n###############################################################################\n# Activate the cachix repo.\n###############################################################################\nRUN nix-env -iA nixpkgs.cachix\nRUN cachix use polygames\n\n\n###############################################################################\n# Get Polygames.\n###############################################################################\nWORKDIR $HOME\nRUN git clone https://github.com/facebookincubator/polygames.git\nWORKDIR $HOME/Polygames\n\n# On a real system with CUDA devices, you have to run `./nix/get-nvidia.sh`\n# here.\n\n\n###############################################################################\n# Build Polygames.\n###############################################################################\nRUN mkdir $HOME/Polygames/build\nWORKDIR $HOME/Polygames/build\nRUN nix-shell ../nix/shell-cpu.nix --run \"cmake -DPYTORCH12=ON .. ; make -j4\"\n\n\n###############################################################################\n# Run unit-tests.\n###############################################################################\nRUN mkdir $HOME/Polygames/tests/build\nWORKDIR $HOME/Polygames/tests/build\nRUN nix-shell ../../nix/shell-cpu.nix --run \"cmake .. ; make -j4 ; ./polygames-tests\"\n\n\n###############################################################################\n# Run tests.\n###############################################################################\nWORKDIR $HOME/Polygames/\nRUN nix-shell nix/shell-cpu.nix --run \"pytest pypolygames --durations=10 --verbose\"\n\n\n"
}