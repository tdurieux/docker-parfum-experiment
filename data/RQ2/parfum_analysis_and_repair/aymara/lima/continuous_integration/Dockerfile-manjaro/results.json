{
  "startTime": 1674253983247,
  "endTime": 1674253984337,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 34,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 357,
        "columnEnd": 465
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM manjarolinux/base:latest\n\nRUN pacman -Syu\nRUN pacman -Sy --noconfirm --needed base-devel git cmake clang ninja qt5 boost qwt enchant tre\nRUN pacman -Sy --noconfirm --needed python-nltk\n# RUN pacman -Sy --noconfirm --needed qhttpserver\n\nARG BRANCH=master\nARG USE_TENSORFLOW=\"true\"\nARG GITHUB_TOKEN\nARG LIMA_DISABLE_FSW_TESTING\nARG LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS\nARG NLTK_PTB_DP_FILE\n\n# # Setup\n# RUN apt-get update -y -qq && apt-get install -y apt-utils lsb-release git gcc g++ make curl python3-nltk gawk wget python3 ninja-build qtbase5-dev-tools libqt5xmlpatterns5-dev libqt5qml5 qtdeclarative5-dev qml-module-qtquick-extras qml-module-qtquick-controls qml-module-qtquick-layouts qml-module-qtquick2 libenchant-2-dev libtre-dev libboost-all-dev gnupg build-essential libssl-dev nodejs npm\n#\n# RUN wget https://launchpad.net/~limapublisher/+archive/ubuntu/ppa/+files/libtensorflow-for-lima-generic_1.9-ubuntu7~20.04_amd64.deb -q \\\n#     && dpkg -i libtensorflow-for-lima-generic_1.9-ubuntu7~20.04_amd64.deb \\\n#     && rm -f libtensorflow-for-lima-generic_1.9-ubuntu7~20.04_amd64.deb\n#\n# RUN wget https://launchpad.net/~limapublisher/+archive/ubuntu/ppa/+files/libtensorflow-for-lima-dev_1.9-ubuntu7~20.04_amd64.deb -q \\\n#     && dpkg -i libtensorflow-for-lima-dev_1.9-ubuntu7~20.04_amd64.deb \\\n#     && rm -f libtensorflow-for-lima-dev_1.9-ubuntu7~20.04_amd64.deb\n\n# # Install recent cmake\n# WORKDIR /cmake_build\n# RUN wget --no-check-certificate https://cmake.org/files/v3.16/cmake-3.16.4-Linux-x86_64.sh -q\n# RUN sh cmake-3.16.4-Linux-x86_64.sh --prefix=/usr --exclude-subdir --skip-license\n# RUN cmake --version\n# WORKDIR /\n\n# RUN npm install -g json\n\nRUN sed -ie \"s|DEFAULT_URL = 'http://nltk.googlecode.com/svn/trunk/nltk_data/index.xml'|DEFAULT_URL = 'http://nltk.github.com/nltk_data/'|\" /usr/lib/python*/*/nltk/downloader.py\nRUN python3 -m nltk.downloader -d nltk_data dependency_treebank\nRUN cat nltk_data/corpora/dependency_treebank/wsj_*.dp | grep -v \"^$\" > nltk_data/corpora/dependency_treebank/nltk-ptb.dp\n\nWORKDIR /\nRUN pacman -Sy --noconfirm --needed dos2unix wget go\nRUN git clone https://aur.archlinux.org/yay-git.git\nWORKDIR /yay-git\nRUN useradd -ms /bin/bash  yay\nRUN echo \"yay ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\nRUN echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\nRUN chown -R yay /yay-git\nUSER yay\nRUN yes | makepkg -si\nRUN yes | yay -S debtap\nUSER root\nWORKDIR /\n\nCOPY continuous_integration/svmtool.sh  continuous_integration/svmtool-cpp.sh continuous_integration/qhttpserver.sh /\nRUN /svmtool.sh $GITHUB_TOKEN\n# RUN /svmtool-cpp.sh $GITHUB_TOKEN\n# RUN /qhttpserver.sh $GITHUB_TOKEN\nRUN install -d /svmtool-cpp\nRUN SVMTOOL_LATEST_RELEASE_JSON=$( curl -f -s https://api.github.com/repos/aymara/svmtool-cpp/releases/latest?access_token=$GITHUB_TOKEN) && echo \"SVMTOOL_LATEST_RELEASE_JSON=$SVMTOOL_LATEST_RELEASE_JSON\" && URL=$(echo \"$SVMTOOL_LATEST_RELEASE_JSON\" | grep browser_download_url | grep debian9 | grep '.deb\"' | head -n 1 | cut -d '\"' -f 4) && echo \"URL=$URL\" && curl -f -vLJ -H 'Accept: application/octet-stream' $URL?access_token=$GITHUB_TOKEN -o /svmtool-cpp/svmtool.deb\nWORKDIR /svmtool-cpp\nRUN debtap -u\nRUN debtap -Q svmtool.deb\nRUN ls /svmtool-cpp\nRUN ls /svmtool-cpp\nRUN sudo pacman --noconfirm -U ./*.zst\n\nRUN mkdir -p /src/\nRUN git clone --branch=$BRANCH --recurse-submodules https://${GITHUB_TOKEN}@github.com/aymara/lima /src/lima\nRUN ls /src\nRUN ls /src/lima/extern/fastText\nRUN ls /src/lima/extern/fastText/src\nWORKDIR /src/lima\nRUN mkdir -p /src/lima/build\nWORKDIR /src/lima/build\n\n#ENV PERL5LIB /SVMTool-1.3.1/lib:$PERL5LIB\n#ENV PATH /SVMTool-1.3.1/bin:/usr/share/apps/lima/scripts:/usr/bin:$PATH\nENV NLTK_PTB_DP_FILE /nltk_data/corpora/dependency_treebank/nltk-ptb.dp\nENV LIMA_DISABLE_FSW_TESTING true\nENV LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS true\nENV LIMA_DIST /usr\nENV LIMA_CONF /usr/share/config/lima\nENV LIMA_RESOURCES /usr/share/apps/lima/resources\n\n# Build\n#\nRUN cmake -G Ninja -DLIMA_RESOURCES:STRING=build -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_BUILD_TYPE:STRING=Release -DLIMA_VERSION_RELEASE:STRING=\"$(cat /src/lima/release)\" -DSHORTEN_POR_CORPUS_FOR_SVMLEARN:BOOL=ON -DWITH_DEBUG_MESSAGES=ON -DWITH_ARCH=OFF -DWITH_ASAN=OFF -DWITH_GUI=ON ..\nRUN ninja\nRUN ninja test\nRUN ninja install\n# RUN ninja package\n# RUN install -D -t /usr/share/apps/lima/packages /src/lima/build/*.deb\n#\n# WORKDIR /usr/share/apps/lima/tests\n# RUN /bin/bash -c \"set -o pipefail && tva --language=eng test-eng.*.xml 2>&1 | tee tva-eng.log\"\n# RUN /bin/bash -c \"set -o pipefail && tva --language=fre test-fre.default.xml test-fre.disambiguated.xml test-fre.hyphen.xml test-fre.idiom.xml test-fre.sa.xml test-fre.se.xml test-fre.simpleword.xml test-fre.tokenizer.xml 2>&1 | tee tva-fre.log\"\n# WORKDIR /usr/share/apps/lima/tests/xmlreader\n# RUN /bin/bash -c \"set -o pipefail && tvx --language=eng --language=fre test-fre.xmlreader.xml 2>&1 | tee tvx-fre.log\"\n#\n# # # install github-release to be able to deploy packages\n# # RUN wget https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2 -q && tar xjf linux-amd64-github-release.tar.bz2 && cp bin/linux/amd64/github-release /usr/bin\n# #\n# # # install python packages necessary to use the language resources install script\n# # RUN apt-get install -y python3-pip -qq\n# # RUN /bin/bash -c \"if [ \\\"$USE_TENSORFLOW\\\" = true ] ; then pip3 install arpy requests tqdm ; fi\"\n# #\n# # # install English and French UD models\n# # RUN /bin/bash -c \"if [ \\\"$USE_TENSORFLOW\\\" = true ] ; then lima_models.py -l english ; fi\"\n# # RUN /bin/bash -c \"if [ \\\"$USE_TENSORFLOW\\\" = true ] ; then lima_models.py -l french ; fi\"\n# #\n"
}