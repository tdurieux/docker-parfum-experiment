diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/aymara/lima/continuous_integration/Dockerfile-manylinux_2_24 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/aymara/lima/continuous_integration/Dockerfile-manylinux_2_24/repaired.Dockerfile
index e519ca2..28c85e3 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/aymara/lima/continuous_integration/Dockerfile-manylinux_2_24
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/aymara/lima/continuous_integration/Dockerfile-manylinux_2_24/repaired.Dockerfile
@@ -3,7 +3,7 @@ FROM quay.io/pypa/manylinux_2_24_x86_64 AS manylinux_2_24_with_qt_and_pyside
 ENV DEBIAN_FRONTEND=noninteractive
 ENV PATH="/opt/python/cp38-cp38/bin:${PATH}"
 
-RUN apt-get clean && apt-get update && apt-get install -y locales
+RUN apt-get clean && apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;
 RUN locale-gen en_US.UTF-8
 ENV LANG en_US.UTF-8
 ENV LANGUAGE en_US:en
@@ -11,8 +11,8 @@ ENV LC_ALL en_US.UTF-8
 RUN locale
 
 RUN apt-get update && \
-    apt-get install -y \
-        wget build-essential pkg-config automake  gawk gettext \
+    apt-get install --no-install-recommends -y \
+        wget build-essential pkg-config automake gawk gettext \
         firebird-dev \
         freetds-dev \
         gstreamer1.0-plugins-base \
@@ -102,12 +102,12 @@ RUN apt-get update && \
         lsb-release \
         libssl-dev \
         gperf \
-        dos2unix
+        dos2unix && rm -rf /var/lib/apt/lists/*;
 RUN apt remove -y libpython3.5-stdlib libpython3.5-minimal
 RUN install -d /src
 WORKDIR /src
 RUN wget -q https://download.qt.io/archive/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz
-RUN tar xf qt-everywhere-src-5.15.2.tar.xz
+RUN tar xf qt-everywhere-src-5.15.2.tar.xz && rm qt-everywhere-src-5.15.2.tar.xz
 
 WORKDIR /
 COPY build_qt5.sh /
@@ -130,7 +130,7 @@ ENV PATH=/opt/qt5/5.15.2/gcc_64/bin:$PATH
 
 WORKDIR /
 RUN wget -q https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-13.0.0.tar.gz
-RUN tar xf llvmorg-13.0.0.tar.gz
+RUN tar xf llvmorg-13.0.0.tar.gz && rm llvmorg-13.0.0.tar.gz
 WORKDIR /llvm-project-llvmorg-13.0.0
 RUN cmake -S llvm -B build -G Ninja -DLLVM_PARALLEL_LINK_JOBS=1 -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_ENABLE_PROJECTS="clang"
 # -DLLVM_USE_LINKER=gold -DLLVM_USE_SPLIT_DWARF=ON
@@ -148,7 +148,7 @@ RUN git checkout 5.15.2
 RUN install -d /opt/_internal/cpython-3.8.12/lib/x86_64-linux-gnu/
 RUN touch /opt/_internal/cpython-3.8.12/lib/x86_64-linux-gnu/libpython3.8.a
 
-RUN apt-get update -y -qq && apt-get install -y libpulse-mainloop-glib0
+RUN apt-get update -y -qq && apt-get install --no-install-recommends -y libpulse-mainloop-glib0 && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /pyside-setup
 RUN python3.8 -m pip install cmake
@@ -175,7 +175,7 @@ FROM quay.io/pypa/manylinux_2_24_x86_64 AS manylinux_2_24_with_tensorflow_for_li
 
 ENV DEBIAN_FRONTEND=noninteractive
 
-RUN apt-get clean && apt-get update && apt-get install -y locales
+RUN apt-get clean && apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;
 RUN echo "LC_ALL=en_US.UTF-8" > /etc/default/locale
 RUN echo "LANG=en_US.UTF-8" >> /etc/default/locale
 RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
@@ -193,7 +193,7 @@ ARG LIMA_DISABLE_FSW_TESTING
 ARG LIMA_DISABLE_CPACK_DEBIAN_PACKAGE_SHLIBDEPS
 ARG NLTK_PTB_DP_FILE
 
-RUN apt-get update -y -qq && apt-get install -y git build-essential pkg-config automake wget
+RUN apt-get update -y -qq && apt-get install --no-install-recommends -y git build-essential pkg-config automake wget && rm -rf /var/lib/apt/lists/*;
 
 
 RUN python3.8 -m pip install cmake ninja
@@ -201,7 +201,7 @@ ENV PATH="/opt/python/cp38-cp38/bin:${PATH}"
 
 WORKDIR /
 RUN wget -q https://launchpad.net/~limapublisher/+archive/ubuntu/ppa/+sourcefiles/tensorflow-for-lima/1.9-ubuntu7~20.10/tensorflow-for-lima_1.9.orig.tar.xz
-RUN tar xf tensorflow-for-lima_1.9.orig.tar.xz
+RUN tar xf tensorflow-for-lima_1.9.orig.tar.xz && rm tensorflow-for-lima_1.9.orig.tar.xz
 RUN git clone -b r1.9 https://github.com/aymara/tensorflow.git
 RUN cp -r /tensorflow-for-lima-1.9/external /tensorflow
 WORKDIR /tensorflow
@@ -226,7 +226,7 @@ FROM quay.io/pypa/manylinux_2_24_x86_64 AS manylinux_2_24_with_icu
 
 ENV DEBIAN_FRONTEND=noninteractive
 
-RUN apt-get clean && apt-get update && apt-get install -y locales
+RUN apt-get clean && apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;
 RUN echo "LC_ALL=en_US.UTF-8" > /etc/default/locale
 RUN echo "LANG=en_US.UTF-8" >> /etc/default/locale
 RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
@@ -238,8 +238,8 @@ ENV LANGUAGE en_US:en
 ENV LC_ALL en_US.UTF-8
 
 RUN apt-get update && \
-    apt-get install -y \
-        wget build-essential pkg-config automake  gawk gettext
+    apt-get install --no-install-recommends -y \
+        wget build-essential pkg-config automake gawk gettext && rm -rf /var/lib/apt/lists/*;
 
 WORKDIR /
 # Cloning icu ASAP to avoid
@@ -250,8 +250,8 @@ RUN ./runConfigureICU Linux --prefix=/usr/local --enable-static && make -j && ma
 WORKDIR /
 # Download boost, untar, setup install with bootstrap and only do the Program Options library,
 # and then install
-RUN wget -q http://downloads.sourceforge.net/project/boost/boost/1.78.0/boost_1_78_0.tar.gz
-RUN tar xfz boost_1_78_0.tar.gz
+RUN wget -q https://downloads.sourceforge.net/project/boost/boost/1.78.0/boost_1_78_0.tar.gz
+RUN tar xfz boost_1_78_0.tar.gz && rm boost_1_78_0.tar.gz
 RUN rm boost_1_78_0.tar.gz
 WORKDIR /boost_1_78_0
 RUN ./bootstrap.sh --prefix=/usr/local --with-libraries=program_options,regex,filesystem,system,thread,test
@@ -272,7 +272,7 @@ FROM quay.io/pypa/manylinux_2_24_x86_64 AS manylinux_2_24_with_nltk_data
 
 ENV DEBIAN_FRONTEND=noninteractive
 
-RUN apt-get clean && apt-get update && apt-get install -y locales
+RUN apt-get clean && apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;
 RUN echo "LC_ALL=en_US.UTF-8" > /etc/default/locale
 RUN echo "LANG=en_US.UTF-8" >> /etc/default/locale
 RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
@@ -283,7 +283,7 @@ ENV LANG en_US.UTF-8
 ENV LANGUAGE en_US:en
 ENV LC_ALL en_US.UTF-8
 
-RUN apt-get update -y -qq && apt-get install -y python3-nltk libtre-dev gnupg libssl-dev nodejs
+RUN apt-get update -y -qq && apt-get install --no-install-recommends -y python3-nltk libtre-dev gnupg libssl-dev nodejs && rm -rf /var/lib/apt/lists/*;
 # Not available in manylinux: libenchant-2-dev npm
 
 WORKDIR /
@@ -306,7 +306,7 @@ FROM quay.io/pypa/manylinux_2_24_x86_64 AS lima-manylinux
 
 ENV DEBIAN_FRONTEND=noninteractive
 
-RUN apt-get clean && apt-get update && apt-get install -y locales
+RUN apt-get clean && apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;
 RUN echo "LC_ALL=en_US.UTF-8" > /etc/default/locale
 RUN echo "LANG=en_US.UTF-8" >> /etc/default/locale
 RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
@@ -332,7 +332,7 @@ ARG NLTK_PTB_DP_FILE
 
 # Setup
 RUN apt --fix-broken install
-RUN apt-get update -y -qq && apt-get install -y \
+RUN apt-get update -y -qq && apt-get install --no-install-recommends -y \
         wget build-essential pkg-config automake \
         gawk \
         ninja-build \
@@ -341,7 +341,7 @@ RUN apt-get update -y -qq && apt-get install -y \
         libasound2 \
         libgstreamer1.0 \
         libpulse-mainloop-glib0 \
-        gstreamer1.0-x
+        gstreamer1.0-x && rm -rf /var/lib/apt/lists/*;
 
 ENV QTDIR=/opt/qt5
 ENV PATH=/opt/qt5/bin:$PATH
@@ -349,21 +349,21 @@ ENV LD_LIBRARY_PATH=/opt/qt5/lib:$LD_LIBRARY_PATH
 
 WORKDIR /
 RUN wget -q https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz
-RUN tar xf git-2.9.5.tar.xz
+RUN tar xf git-2.9.5.tar.xz && rm git-2.9.5.tar.xz
 WORKDIR /git-2.9.5
-RUN ./configure --prefix=/usr && make -j && make install
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr && make -j && make install
 
 WORKDIR /git-lfs
 RUN wget -q https://github.com/git-lfs/git-lfs/releases/download/v3.0.2/git-lfs-linux-amd64-v3.0.2.tar.gz
-RUN tar xf git-lfs-linux-amd64-v3.0.2.tar.gz
+RUN tar xf git-lfs-linux-amd64-v3.0.2.tar.gz && rm git-lfs-linux-amd64-v3.0.2.tar.gz
 RUN bash install.sh
 
 RUN git lfs install --skip-repo
 
 WORKDIR /
-RUN wget --no-check-certificate http://osmot.cs.cornell.edu/svm_light/current/svm_light.tar.gz -q
+RUN wget --no-check-certificate https://osmot.cs.cornell.edu/svm_light/current/svm_light.tar.gz -q
 WORKDIR /svm_light
-RUN tar xzf ../svm_light.tar.gz
+RUN tar xzf ../svm_light.tar.gz && rm ../svm_light.tar.gz
 RUN make
 RUN cp svm_classify svm_learn /usr/bin
 RUN rm -Rf /svm_light
@@ -409,7 +409,7 @@ WORKDIR /usr/share/apps/lima/tests/xmlreader
 RUN /bin/bash -c "set -o pipefail && tvx --language=eng --language=fre test-fre.xmlreader.xml 2>&1 | tee tvx-fre.log"
 
 # install github-release to be able to deploy packages
-RUN wget https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2 -q && tar xjf linux-amd64-github-release.tar.bz2 && cp bin/linux/amd64/github-release /usr/bin
+RUN wget https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2 -q && tar xjf linux-amd64-github-release.tar.bz2 && cp bin/linux/amd64/github-release /usr/bin && rm linux-amd64-github-release.tar.bz2
 
 # install python packages necessary to use the language resources install script
 RUN /bin/bash -c "if [ \"$USE_TENSORFLOW\" = true ] ; then pip3.8 install arpy requests tqdm ; fi"