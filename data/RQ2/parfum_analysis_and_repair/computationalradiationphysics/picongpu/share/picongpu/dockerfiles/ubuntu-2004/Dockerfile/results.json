{
  "startTime": 1674219081267,
  "endTime": 1674219082295,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 11,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 11,
        "columnEnd": 99
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM       nvidia/cuda:11.2.0-base-ubuntu20.04\nMAINTAINER Axel Huebl <a.huebl@hzdr.de>\nLABEL      authors=\"Axel Huebl, RenÃ© Widera\"\n\n# docker and image environment\nENV        DEBIAN_FRONTEND=noninteractive \\\n           FORCE_UNSAFE_CONFIGURE=1 \\\n           SPACK_ROOT=/usr/local \\\n           SPACK_EXTRA_REPO=/usr/local/share/spack-repo \\\n           PIC_PACKAGE='picongpu@develop+isaac backend=cuda target=x86_64' \\\n           CUDA_PKG_VERSION=\"11-2\"\n\n# install minimal spack dependencies\n#   - adds gfortran for spack's openmpi package\n#   - adds the standard editors for users: vim, nano\n#     (excluded: emacs-nox pulls up to 90MB in)\n#   - adds build tools which are NOT linked in the final app\n#   - selected cuda toolkit components\n# note: do you need more cuda toolkit components?\n# check:   apt-get update && apt-cache search cuda && apt-cache search nvcc\nRUN        apt-get update && \\\n           apt-get install -y --no-install-recommends \\\n              autoconf \\\n              build-essential \\\n              ca-certificates \\\n              coreutils \\\n              cuda-cupti-$CUDA_PKG_VERSION \\\n              cuda-command-line-tools-$CUDA_PKG_VERSION \\\n              cuda-cudart-dev-$CUDA_PKG_VERSION \\\n              libcurand-dev-$CUDA_PKG_VERSION \\\n              cuda-minimal-build-$CUDA_PKG_VERSION \\\n              cuda-nvml-dev-$CUDA_PKG_VERSION \\\n              curl \\\n              environment-modules \\\n              gfortran \\\n              git \\\n              nano \\\n              openssh-client \\\n              patchelf \\\n              pkg-config \\\n              python3-dev \\\n              rsync \\\n              time \\\n              unzip \\\n              vim && \\\n           rm -rf /var/lib/apt/lists/*\n\n# spack settings\nCOPY       compilers.yaml packages.yaml modules.yaml $SPACK_ROOT/etc/spack/\n\n# install spack && PIConGPU dependencies\n# TODO: fix to a specific spack SHA or tag\nRUN curl -f -s -L https://github.com/spack/spack/archive/develop.tar.gz \\\n                | tar xzC $SPACK_ROOT --strip 1 && \\\n           mkdir -p $SPACK_EXTRA_REPO && \\\n           curl -f -s -L https://api.github.com/repos/ComputationalRadiationPhysics/spack-repo/tarball \\\n                | tar xzC $SPACK_EXTRA_REPO --strip 1 && \\\n           spack repo add --scope=system $SPACK_EXTRA_REPO && \\\n           . $SPACK_ROOT/share/spack/setup-env.sh\nRUN        spack install --only dependencies $PIC_PACKAGE\nRUN        spack install $PIC_PACKAGE && \\\n           spack clean -a\n\n# load spack & picongpu environment on login\nRUN        /bin/echo -e \"source $SPACK_ROOT/share/spack/setup-env.sh\\n\" \\\n                        \"spack load $PIC_PACKAGE\\n\" \\\n                        'if [ $(id -u) -eq 0 ]; then\\n' \\\n                        '   function mpirun { $(which mpirun) --allow-run-as-root $@; }\\n' \\\n                        '   export -f mpirun\\n' \\\n                        'fi\\n' \\\n                        'if [ $(id -u) -eq 0 ]; then\\n' \\\n                        '   function mpiexec { $(which mpiexec) --allow-run-as-root $@; }\\n' \\\n                        '   export -f mpiexec\\n' \\\n                        'fi\\n' \\\n               > /etc/profile.d/picongpu.sh\n\n# force the use of a login shell\nRUN        /bin/echo -e '#!/bin/bash -l\\n' \\\n                        'exec \"$@\"\\n' \\\n               > /etc/entrypoint.sh && \\\n           chmod a+x /etc/entrypoint.sh\n\n# build example for out-of-the-box usage: LWFA\nRUN        /bin/bash -l -c ' \\\n               pic-create $PICSRC/share/picongpu/examples/LaserWakefield /opt/picInputs/lwfa && \\\n               cd /opt/picInputs/lwfa && \\\n               pic-build -b \"cuda:35;37;50;60;70;80\" -c\"-DCUDAMEMTEST_ENABLE=OFF\" && \\\n               rm -rf .build && \\\n               chmod a+x /opt/picInputs/*/bin/* && \\\n               chmod a+r -R /opt/picInputs/* && \\\n               find /opt/picInputs -type d -exec chmod a+rx {} \\;'\n# KHI (Benchmark)\nRUN        /bin/bash -l -c ' \\\n               pic-create $PICSRC/share/picongpu/examples/KelvinHelmholtz /opt/picInputs/khi && \\\n               cd /opt/picInputs/khi && \\\n               pic-build -b \"cuda:35;37;50;60;70;80\" -c\"-DCUDAMEMTEST_ENABLE=OFF\" && \\\n               rm -rf .build && \\\n               chmod a+x /opt/picInputs/*/bin/* && \\\n               chmod a+r -R /opt/picInputs/* && \\\n               find /opt/picInputs -type d -exec chmod a+rx {} \\;'\n# Laser-Ion Acceleration\nRUN        /bin/bash -l -c ' \\\n               pic-create $PICSRC/share/picongpu/examples/FoilLCT /opt/picInputs/foil && \\\n               cd /opt/picInputs/foil && \\\n               pic-build -b \"cuda:35;37;50;60;70;80\" -c\"-DCUDAMEMTEST_ENABLE=OFF\" && \\\n               rm -rf .build && \\\n               chmod a+x /opt/picInputs/*/bin/* && \\\n               chmod a+r -R /opt/picInputs/* && \\\n               find /opt/picInputs -type d -exec chmod a+rx {} \\;'\n# ... also made input directories readable and files executable for all users\n\nCOPY       start_lwfa.sh /usr/bin/lwfa\nCOPY       start_lwfa_4.sh /usr/bin/lwfa4\nCOPY       start_lwfa_8.sh /usr/bin/lwfa8\nCOPY       start_lwfa_live.sh /usr/bin/lwfa_live\nCOPY       start_lwfa_live_4.sh /usr/bin/lwfa_live4\nCOPY       start_lwfa_live_8.sh /usr/bin/lwfa_live8\nCOPY       start_khi_1.sh /usr/bin/bench1\nCOPY       start_khi_4.sh /usr/bin/bench4\nCOPY       start_khi_8.sh /usr/bin/bench8\nCOPY       start_foil_4.sh /usr/bin/foil4\nCOPY       start_foil_8.sh /usr/bin/foil8\n\nENTRYPOINT [\"/etc/entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n"
}