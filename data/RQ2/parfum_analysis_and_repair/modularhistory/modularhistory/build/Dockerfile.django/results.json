{
  "startTime": 1674256078658,
  "endTime": 1674256079743,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 34,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-buster\n\nLABEL org.opencontainers.image.source https://github.com/ModularHistory/modularhistory\n\n# https://docs.docker.com/engine/reference/builder/#arg\nARG ENVIRONMENT=dev\n\n# Set environment vars.\nENV \\\n  PYTHONUNBUFFERED=1 \\\n  PYTHONFAULTHANDLER=1 \\\n  PYTHONHASHSEED=random \\\n  PIP_NO_CACHE_DIR=off \\\n  PIP_DISABLE_PIP_VERSION_CHECK=on \\\n  PIP_DEFAULT_TIMEOUT=100\n\n# Add PostgreSQL repo.\nRUN wget --quiet https://www.postgresql.org/media/keys/ACCC4CF8.asc && \\\n  apt-key add ACCC4CF8.asc && \\\n  echo \"deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list\n\n# Install packages.\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  dnsutils \\\n  fdupes \\\n  gnupg2 \\\n  graphviz graphviz-dev \\\n  libenchant-dev \\\n  libmagic1 \\\n  postgresql-client-common postgresql-client-14 \\\n  vim \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nRUN pip install --no-cache-dir \"poetry>=1.0.5\"\n\n# Install rclone (for media backup/sync).\nRUN curl -f https://rclone.org/install.sh | bash\n\n# Create and enter the working directory.\nRUN mkdir -p /modularhistory\nWORKDIR /modularhistory\n\n# Install project dependencies.\nCOPY poetry.lock pyproject.toml /modularhistory/\nRUN poetry config virtualenvs.create false\nRUN \\\n  if [ \"$ENVIRONMENT\" = \"dev\" ]; then poetry_args=\"\"; pip_args=\"--dev\"; \\\n  # TODO: Use this logic after it's supported in next Poetry version\n  # elif [ \"$ENVIRONMENT\" = \"test\" ]; then poetry_args=\"--without dev\"; pip_args=\"--dev\"; \\\n  # else poetry_args=\"--without dev,test\"; pip_args=\"\"; fi; \\\n  else poetry_args=\"--no-dev\"; pip_args=\"\"; fi; \\\n  poetry install --no-interaction --no-ansi --no-root $poetry_args || ( poetry export -f requirements.txt --without-hashes $pip_args -o requirements.txt \\\n  && pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir -r requirements.txt)\n\n# Create required directories.\nRUN mkdir -p -- \\\n  /modularhistory/_volumes/static \\\n  /modularhistory/_volumes/media \\\n  /modularhistory/_volumes/db/backups \\\n  /modularhistory/_volumes/db/init \\\n  /opt/atlas \\\n  /var/www/nltk_data/corpora\n\n# Download required files.\nRUN python -c \"import nltk; nltk.download('punkt')\" && \\\n  NLTK_DATA=var/www/nltk_data python -m textblob.download_corpora\n# cp -avr nltk_data/ /var/www/\n\n# Add source code.\nCOPY . /modularhistory/\nCOPY config/scripts/wait-for-it.sh /usr/local/bin/wait-for-it.sh\nCOPY config/invoke.yaml /etc/invoke.yaml\n\n# Collect static files.\nRUN python manage.py collectstatic --no-input\n\n# Grant necessary permissions to non-root user.\nRUN chown -R www-data:www-data /modularhistory && \\\n  chmod g+w -R /modularhistory/_volumes && \\\n  chmod +x /usr/local/bin/wait-for-it.sh && \\\n  chown -R www-data:www-data /var/www/nltk_data && chmod g+w -R /var/www/nltk_data\n\n# Expose port 8000\nEXPOSE 8000\n\n# Switch from root to non-root user.\nUSER www-data\n\n# Specify the default command to run when the container is started.\nCMD /bin/bash /modularhistory/config/scripts/init/django.sh\n"
}