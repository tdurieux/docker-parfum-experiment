{
  "startTime": 1674246459087,
  "endTime": 1674246459884,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 92
      }
    }
  ],
  "repairedDockerfile": "ARG sys_image=debian:jessie-slim\n\nFROM $sys_image\n\nRUN mkdir -p /temp/docker/shared/\nWORKDIR /temp/docker/shared/\n\n# NOTE: copy shared scripts and run them separately\n# this helps when changing commands only in a single script,\n# since it will not requrie rebuilding all docker image layers\n# but just the ones that were affected\n\nCOPY ./shared/install.debian.packages.sh /temp/docker/shared\nRUN ./install.debian.packages.sh\n\nENV ANDROID_HOME \"/usr/local/android-sdk\"\n\nENV NDK_VERSION \"r18\"\nENV NDK_NAME \"android-ndk-$NDK_VERSION-linux-x86_64\"\nRUN echo \"Preparing Android NDK...\" && \\\n    mkdir -p /build && \\\n    cd /build && \\\n    curl -fSOL https://dl.google.com/android/repository/$NDK_NAME.zip && \\\n    unzip -qq $NDK_NAME.zip && \\\n    rm $NDK_NAME.zip\n\nRUN echo \"Preparing Android GCC-Toolchain...\" && \\\n    mkdir -p /build && \\\n    cd /build && \\\n    git clone https://github.com/sjitech/android-gcc-toolchain\nENV NDK \"/build/android-ndk-$NDK_VERSION\"\nENV PATH \"$PATH:/build/android-gcc-toolchain:$NDK\"\n\nENV PATH \"$PATH:$ANDROID_HOME/tools\"\nENV PATH \"$PATH:$ANDROID_HOME/platform-tools\"\n\nRUN mkdir -p ${ANDROID_HOME} && \\\n    cd ${ANDROID_HOME} && \\\n    wget -q https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip -O android_tools.zip && \\\n    unzip -qq android_tools.zip && \\\n    rm android_tools.zip\n\nRUN mkdir /usr/local/android-sdk/tools/keymaps && \\\n    touch /usr/local/android-sdk/tools/keymaps/en-us\n\nCOPY ./shared/install.jdk.sh /temp/docker/shared\nRUN ./install.jdk.sh\nENV JAVA_HOME \"/opt/jdk/jdk1.8.0_131\"\n\nENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools\n\nCOPY ./shared/install-android-dependencies.sh /temp/docker/shared\nRUN ./install-android-dependencies.sh\n\nCOPY ./shared/install.cmake.sh /temp/docker/shared\nRUN ./install.cmake.sh\nENV PATH \"$PATH:/opt/cmake/bin\"\n\nCOPY ./shared/install.gradle.sh /temp/docker/shared\nRUN ./install.gradle.sh\nENV GRADLE_HOME \"/opt/gradle-3.5\"\nENV PATH \"$PATH:$GRADLE_HOME/bin\"\n\nRUN mkdir -p /temp\nCOPY ./shared/build.gradle /temp\nCOPY ./android/AndroidManifest.xml /temp/src/main/AndroidManifest.xml\nWORKDIR /temp\nRUN cd /temp && gradle --dry-run\n\n# Install the Android tools\nRUN sdkmanager emulator\nRUN sdkmanager tools\nRUN sdkmanager \"system-images;android-21;default;armeabi-v7a\"\n\n# Required for Android ARM Emulator\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y libqt5widgets5 && rm -rf /var/lib/apt/lists/*;\nENV QT_QPA_PLATFORM offscreen\nENV LD_LIBRARY_PATH ${ANDROID_HOME}/tools/lib64:${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib\n\nARG KEYSTORE\nARG KEYSTORE_PASSWORD\n\nENV KEYSTORE=$KEYSTORE\nENV KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD\n\nRUN mkdir ~/.gnupg\n\nRUN if [ -n \"$KEYSTORE\" ]; then echo $KEYSTORE | base64 -d > my-private-key.asc; fi\nRUN if [ -n \"$KEYSTORE\" -a -n \"$KEYSTORE_PASSWORD\" ]; then echo $KEYSTORE_PASSWORD | gpg --import --batch --yes --passphrase-fd 0 my-private-key.asc; fi\n\nRUN cp -r ~/.gnupg /\n\nEXPOSE 22\nEXPOSE 5037\nEXPOSE 5554\nEXPOSE 5555\nEXPOSE 5900\n\n"
}