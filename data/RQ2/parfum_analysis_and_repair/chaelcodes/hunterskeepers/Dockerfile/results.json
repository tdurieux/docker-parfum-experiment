{
  "startTime": 1674254967769,
  "endTime": 1674254968655,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Generating a generic Rails image.\n# Just for caching.\nFROM ruby:2.7.3-alpine AS rails\n\n# `apk` is like `apt`, but for Alpine Linux.\nRUN apk add --update --no-cache --quiet \\\n    build-base \\\n    nodejs-current \\\n    postgresql-dev \\\n    python2 \\\n    tzdata \\\n    yarn\n\n# Uses the image above as the base for a builder image.\n# This will **include** development and testing gems.\nFROM rails as rails-builder\n\n# Set the value of `pwd` for all following operations.\nWORKDIR /app/\n\n# Add the Gemfile and Gemfile.lock from this application.\nCOPY Gemfile Gemfile.lock /app/\n\n# Installs gems, quietly, in 4 threads, and retry if broken.\nRUN bundle install --quiet -j4 --retry 3 \\\n    # Remove unneeded files (cached *.gem, *.o, *.c)\n    && rm -rf /usr/local/bundle/cache/*.gem \\\n    && find /usr/local/bundle/gems/ -name \"*.c\" -delete \\\n    && find /usr/local/bundle/gems/ -name \"*.o\" -delete\n\n# This image is used to build assets and delete side effects.\n# This will **include** development and test gems.\nFROM rails-builder AS builder\n\n# Copy in the Gemfile and Gemfile.lock files in.\nCOPY Gemfile Gemfile.lock /app/\n# Delete the existing bundle.\nRUN rm -rf /usr/local/bundle \\\n    # Configure bundle to freeze gems.\n    && bundle config --global frozen 1 \\\n    # Configure bundle to exclude development and test environments.\n    && bundle config set without 'development test' \\\n    # Installs gems, quietly, in 4 threads, and retry if broken.\n    && bundle install --quiet -j4 --retry 3 \\\n    # Remove unneeded files (cached *.gem, *.o, *.c)\n    && rm -rf /usr/local/bundle/cache/*.gem \\\n    && find /usr/local/bundle/gems/ -name \"*.c\" -delete \\\n    && find /usr/local/bundle/gems/ -name \"*.o\" -delete\n\n# Add the npm package.json and yarn.lock to install packages.\nCOPY package.json yarn.lock /app/\n# Use yarn to install node dependencies.\nRUN yarn install && yarn cache clean;\n\n# Copy in everything from the current directory.\nCOPY ./ /app/\n\n# Compile assets in Production mode.\nRUN RAILS_ENV=production SECRET_KEY_BASE=not_for_prod bundle exec rake assets:precompile\n\n# Clean up temporary files.\nRUN rm -rf node_modules tmp/cache vendor/assets lib/assets spec\n\n# Final, production, image.  Minimum footprint.\nFROM ruby:2.7-alpine AS final\n\n# Set rails to production mode.\nENV RAILS_ENV production\n# Tell Rails to log to STDOUT so it shows in Docker logs.\nENV RAILS_LOG_TO_STDOUT true\n# Tell Rails to server static files, rather than using a\n# reverse proxy.\nENV RAILS_SERVE_STATIC_FILES true\n# Tell Rails not to worry about the ExecJS Runtime, since\n# the assets are already compiled.\nENV EXECJS_RUNTIME Disabled\n\n# Still need postgres libraries and timezone data.\nRUN apk add --update --no-cache postgresql-client tzdata\n\n# Add the user `app` so we are not running privileged.\nRUN addgroup -g 1000 -S app \\\n    && adduser -u 1000 -S app -G app\n\n# Switch to the user named `app`.  All following commands\n# will be run as the `app` user.\nUSER app\n\n# Change our working directory to /app\nWORKDIR /app\n\n# Copy gems from the builder image to this image.\nCOPY --from=builder /usr/local/bundle/ /usr/local/bundle/\n\n# Copy the compiled app (with assets) from the builder image\n# to this image.\nCOPY --from=builder --chown=app:app /app /app\n\n# When starting this container, run the rails server\n# binding to all IP's, and port 5000.\nCMD bundle exec rails server -b 0.0.0.0 -p 5000\n"
}