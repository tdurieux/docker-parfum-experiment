{
  "startTime": 1674249187187,
  "endTime": 1674249188395,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 8,
        "columnEnd": 63
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 26,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 104,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 26,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multistage Dockerfile to build the Splitgraph engine: because of all the compilation of\n# FDWs/libraries needed, we have to download a few hundred MB of dev tooling which we don't\n# need at runtime. So, we define a single \"toolchain\" image, multiple images that build various\n# FDWs and other extensions from it and then the final engine image that cherry-picks required\n# binaries from the previous build stages: this is done by \"make installing\" them into a different\n# prefix (PGXS's feature) and then copying that over into the filesystem root in the target.\n\n\n#####\n##### toolchain\n#####\n\nFROM postgres:12.3 AS toolchain\n\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -y --allow-downgrades \\\n        build-essential \\\n        curl \\\n        wget \\\n        git \\\n        libssl-dev \\\n        libsasl2-dev \\\n        pkgconf \\\n        autoconf \\\n        libtool \\\n        # https://github.com/docker-library/postgres/issues/678#issuecomment-586888013\n        postgresql-server-dev-$PG_MAJOR \\\n        libmongoc-1.0.0 \\\n        libmongoc-dev \\\n        protobuf-c-compiler \\\n        libprotobuf-c-dev \\\n        libpython3.7-dev \\\n        python3.7 \\\n        python3-setuptools \\\n        cmake \\\n        clang-7 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# python3.8 executable required by Multicorn to install itself\n# python3-setuptools also needed by Multicorn and it pulls in python3.7 but\n# we'll get rid of all this junk in the next build stage.\n\n# Set locale to C instead of en-US, Postgres initdb breaks with default\n# locale otherwise + we get build warnings for FDWs.\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\n# Fix taken from https://github.com/f-secure-foundry/usbarmory-debian-base_image/issues/9\nRUN mkdir ~/.gnupg && echo \"disable-ipv6\" >> ~/.gnupg/dirmngr.conf && \\\n    apt-key adv --homedir ~/.gnupg --keyserver hkp://keyserver.ubuntu.com --recv-keys 467B942D3A79BD29 && \\\n    echo \"deb http://repo.mysql.com/apt/debian/ buster mysql-8.0\" > /etc/apt/sources.list.d/mysql.list && \\\n    apt-get update -qq && apt-get install --no-install-recommends -y libmysqlclient-dev && rm -rf /var/lib/apt/lists/*\n\n# Build scripts for subsequent FDW builder images\nRUN mkdir -p /build\n\nRUN ldconfig\n\n# Output root for the FDW builders (e.g. /output/root/usr/lib/postgresql/12/extensions...)\nRUN mkdir -p /output/root\n\n#####\n##### cstore_fdw and multicorn\n#####\n\nFROM toolchain AS builder_cstore_multicorn\nCOPY ./engine/src/cstore_fdw /src/cstore_fdw\nCOPY ./engine/src/Multicorn /src/Multicorn\n\nCOPY ./engine/build_scripts/fdws/multicorn /build\nCOPY ./engine/build_scripts/fdws/cstore_fdw /build\n\nRUN /build/build_cstore_fdw.sh\nRUN /build/build_multicorn.sh\n\n#####\n##### mongo_fdw\n#####\n\nFROM toolchain AS builder_mongo_fdw\nCOPY ./engine/build_scripts/fdws/mongo_fdw /build\nRUN /build/build_mongo_fdw.sh\n\n\n#####\n##### mysql_fdw\n#####\n\nFROM toolchain AS builder_mysql_fdw\nCOPY ./engine/build_scripts/fdws/mysql_fdw /build\nRUN /build/build_mysql_fdw.sh\n\n\n#####\n##### splitgraph/engine\n#####\n\nFROM postgres:12.3\n\n# We still have to install some runtime libraries here, but no dev.\n\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -y \\\n        curl \\\n        libprotobuf-c1 \\\n        libmongoc-1.0-0 \\\n        libpython3.7 \\\n        python3.7 \\\n        python3-setuptools \\\n        postgresql-plpython3-12 \\\n        git \\\n        wget && \\\n\n        curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \\\n        python3.7 get-pip.py && \\\n        rm get-pip.py && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set locale to C instead of en-US, Postgres initdb breaks with default\n# locale otherwise + we get build warnings for FDWs.\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\n# Install Splitgraph itself (required for layered querying)\n\nRUN mkdir -p /var/lib/splitgraph/objects && chmod 777 /var/lib/splitgraph/objects\n\n# Do the installation in two phases to use Docker caching: first,\n# install all the dependencies and then copy the Splitgraph code over (way later in the build).\n# That way, if we just change the code, we only need to rebuild one last layer rather than\n# reinstall all dependencies from scratch. We also do dependency installation before\n# copying over various FDW SOs, since those are cheaper to copy and can get rebuilt more often.\n\n# However, we need to make Poetry think that we actually have a genuine package\n# that we want to install in editable mode in here, so we create and copy some files to fool it.\nRUN mkdir -p /splitgraph/splitgraph && touch /splitgraph/splitgraph/__init__.py\nCOPY poetry.lock pyproject.toml README.md /splitgraph/\nRUN mkdir /build\nCOPY ./engine/build_scripts/build_splitgraph.sh /build/\nRUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip /build/build_splitgraph.sh\n\n\nRUN mkdir ~/.gnupg && echo \"disable-ipv6\" >> ~/.gnupg/dirmngr.conf && \\\n    apt-key adv --homedir ~/.gnupg --keyserver hkp://keyserver.ubuntu.com --recv-keys 467B942D3A79BD29 && \\\n    echo \"deb http://repo.mysql.com/apt/debian/ buster mysql-8.0\" > /etc/apt/sources.list.d/mysql.list && \\\n    apt-get update -qq && apt-get install --no-install-recommends -y libmysqlclient-dev && rm -rf /var/lib/apt/lists/*\n\n# Extract and copy over all binaries from the builder stages\n# This is slightly sad: whilst multicorn's make install respects DESTDIR,\n# python setup.py doesn't and installs it to /usr/local.\n# Since nothing else in here uses easy_install, we grab the .pth file and the unpacked egg.\n\nCOPY --from=builder_cstore_multicorn /output/root /\nCOPY --from=builder_cstore_multicorn \\\n    /usr/local/lib/python3.7/dist-packages/easy-install.pth \\\n    /usr/local/lib/python3.7/dist-packages/easy-install.pth\nCOPY --from=builder_cstore_multicorn \\\n    /usr/local/lib/python3.7/dist-packages/multicorn-1.4.0.dev0-py3.7-linux-x86_64.egg \\\n    /usr/local/lib/python3.7/dist-packages/multicorn-1.4.0.dev0-py3.7-linux-x86_64.egg\n\nCOPY --from=builder_mongo_fdw /output/root /\nCOPY --from=builder_mysql_fdw /output/root /\n\nRUN ldconfig\n\n# Set up Postgres config files/envvars/init scripts\n\nEXPOSE 5432\nENV POSTGRES_DB splitgraph\nENV POSTGRES_USER sgr\n\nCOPY ./engine/etc /etc/\nCOPY ./engine/init_scripts /docker-entrypoint-initdb.d/\n\n\n# Copy the actual Splitgraph code over at this point.\nCOPY ./splitgraph /splitgraph/splitgraph\nCOPY ./bin /splitgraph/bin\n\n# \"Install\" elasticsearch_fdw\nRUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip \\\n    mkdir /pg_es_fdw && \\\n    pip install --no-cache-dir \"elasticsearch>=7.7.0,<8.0\"\nCOPY ./engine/src/postgres-elasticsearch-fdw/pg_es_fdw /pg_es_fdw/pg_es_fdw\n\n# Install the Snowflake SQLAlchemy connector\n# Use our fork that supports server-side cursors\nRUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip \\\n    pip install --no-cache-dir \"git+https://github.com/splitgraph/snowflake-sqlalchemy.git@14e64cc0ef7374df0cecc91923ff6901b0d721b7\"\n\n# Install PyAthena for Amazon Athena SQLAlchemy-based FDW, as well as pandas\nRUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip \\\n    pip install --no-cache-dir \"PyAthena>=2.4.1\" && \\\n    pip install --no-cache-dir \"pandas>=1.0.0\"\n\n# Install Google's Big Query SQLAlchemy dialect lib\nRUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip \\\n    pip install --no-cache-dir \"sqlalchemy-bigquery\"\n\nENV PATH \"${PATH}:/splitgraph/bin\"\nENV PYTHONPATH \"${PYTHONPATH}:/splitgraph:/pg_es_fdw\"\n\n# https://github.com/postgis/docker-postgis/blob/master/12-3.0/Dockerfile\nARG with_postgis\nRUN test -z \"${with_postgis}\" || (\\\n    export POSTGIS_MAJOR=3 && \\\n    export POSTGIS_VERSION=3.2.1+dfsg-1.pgdg100+1 && \\\n    apt-get update \\\n      && apt-cache showpkg postgresql-$PG_MAJOR-postgis-$POSTGIS_MAJOR \\\n      && apt-get install -y --no-install-recommends \\\n           postgresql-$PG_MAJOR-postgis-$POSTGIS_MAJOR=$POSTGIS_VERSION \\\n           postgresql-$PG_MAJOR-postgis-$POSTGIS_MAJOR-scripts=$POSTGIS_VERSION \\\n      && rm -rf /var/lib/apt/lists/* && \\\n    echo \"CREATE EXTENSION postgis;\" >> /docker-entrypoint-initdb.d/000_create_extensions.sql)\n\nCMD [\"postgres\", \"-c\", \"config_file=/etc/postgresql/postgresql.conf\"]\n"
}