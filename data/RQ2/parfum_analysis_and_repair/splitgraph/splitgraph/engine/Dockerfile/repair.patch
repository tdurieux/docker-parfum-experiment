diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/splitgraph/splitgraph/engine/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/splitgraph/splitgraph/engine/Dockerfile/repaired.Dockerfile
index 72e5305..d1e12ad 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/splitgraph/splitgraph/engine/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/splitgraph/splitgraph/engine/Dockerfile/repaired.Dockerfile
@@ -1,5 +1,3 @@
-# syntax = docker/dockerfile:experimental
-
 # Multistage Dockerfile to build the Splitgraph engine: because of all the compilation of
 # FDWs/libraries needed, we have to download a few hundred MB of dev tooling which we don't
 # need at runtime. So, we define a single "toolchain" image, multiple images that build various
@@ -15,7 +13,7 @@
 FROM postgres:12.3 AS toolchain
 
 RUN apt-get update -qq && \
-    apt-get install -y --allow-downgrades \
+    apt-get install --no-install-recommends -y --allow-downgrades \
         build-essential \
         curl \
         wget \
@@ -51,7 +49,7 @@ ENV LC_ALL C.UTF-8
 RUN mkdir ~/.gnupg && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf && \
     apt-key adv --homedir ~/.gnupg --keyserver hkp://keyserver.ubuntu.com --recv-keys 467B942D3A79BD29 && \
     echo "deb http://repo.mysql.com/apt/debian/ buster mysql-8.0" > /etc/apt/sources.list.d/mysql.list && \
-    apt-get update -qq && apt-get install -y libmysqlclient-dev && rm -rf /var/lib/apt/lists/*
+    apt-get update -qq && apt-get install --no-install-recommends -y libmysqlclient-dev && rm -rf /var/lib/apt/lists/*
 
 # Build scripts for subsequent FDW builder images
 RUN mkdir -p /build
@@ -102,7 +100,7 @@ FROM postgres:12.3
 # We still have to install some runtime libraries here, but no dev.
 
 RUN apt-get update -qq && \
-    apt-get install -y \
+    apt-get install --no-install-recommends -y \
         curl \
         libprotobuf-c1 \
         libmongoc-1.0-0 \
@@ -113,7 +111,7 @@ RUN apt-get update -qq && \
         git \
         wget && \
 
-        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
+        curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
         python3.7 get-pip.py && \
         rm get-pip.py && \
     rm -rf /var/lib/apt/lists/*
@@ -145,7 +143,7 @@ RUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip /build/build_splitgr
 RUN mkdir ~/.gnupg && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf && \
     apt-key adv --homedir ~/.gnupg --keyserver hkp://keyserver.ubuntu.com --recv-keys 467B942D3A79BD29 && \
     echo "deb http://repo.mysql.com/apt/debian/ buster mysql-8.0" > /etc/apt/sources.list.d/mysql.list && \
-    apt-get update -qq && apt-get install -y libmysqlclient-dev && rm -rf /var/lib/apt/lists/*
+    apt-get update -qq && apt-get install --no-install-recommends -y libmysqlclient-dev && rm -rf /var/lib/apt/lists/*
 
 # Extract and copy over all binaries from the builder stages
 # This is slightly sad: whilst multicorn's make install respects DESTDIR,
@@ -182,22 +180,22 @@ COPY ./bin /splitgraph/bin
 # "Install" elasticsearch_fdw
 RUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip \
     mkdir /pg_es_fdw && \
-    pip install "elasticsearch>=7.7.0,<8.0"
+    pip install --no-cache-dir "elasticsearch>=7.7.0,<8.0"
 COPY ./engine/src/postgres-elasticsearch-fdw/pg_es_fdw /pg_es_fdw/pg_es_fdw
 
 # Install the Snowflake SQLAlchemy connector
 # Use our fork that supports server-side cursors
 RUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip \
-    pip install "git+https://github.com/splitgraph/snowflake-sqlalchemy.git@14e64cc0ef7374df0cecc91923ff6901b0d721b7"
+    pip install --no-cache-dir "git+https://github.com/splitgraph/snowflake-sqlalchemy.git@14e64cc0ef7374df0cecc91923ff6901b0d721b7"
 
 # Install PyAthena for Amazon Athena SQLAlchemy-based FDW, as well as pandas
 RUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip \
-    pip install "PyAthena>=2.4.1" && \
-    pip install "pandas>=1.0.0"
+    pip install --no-cache-dir "PyAthena>=2.4.1" && \
+    pip install --no-cache-dir "pandas>=1.0.0"
 
 # Install Google's Big Query SQLAlchemy dialect lib
 RUN --mount=type=cache,id=pip-cache,target=/root/.cache/pip \
-    pip install "sqlalchemy-bigquery"
+    pip install --no-cache-dir "sqlalchemy-bigquery"
 
 ENV PATH "${PATH}:/splitgraph/bin"
 ENV PYTHONPATH "${PYTHONPATH}:/splitgraph:/pg_es_fdw"