{
  "startTime": 1674253789459,
  "endTime": 1674253790613,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 7,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.2-cudnn7-devel-ubuntu16.04\n\nENV OPENCV_VERSION=\"3.4.6\"\n\n# Basic toolchain\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        apt-utils \\\n        build-essential \\\n        git \\\n        wget \\\n        unzip \\\n        yasm \\\n        pkg-config \\\n        libcurl4-openssl-dev \\\n        zlib1g-dev \\\n        htop \\\n        cmake \\\n        nano \\\n        python3-pip \\\n        python3-dev \\\n        python3-tk \\\n        libx264-dev \\\n    && cd /usr/local/bin \\\n    && ln -s /usr/bin/python3 python \\\n    && pip3 install --no-cache-dir --upgrade pip \\\n    && apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\n# Getting OpenCV dependencies available with apt\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        libeigen3-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        libtiff-dev \\\n        libjasper-dev \\\n        libswscale-dev \\\n        libavcodec-dev \\\n        libavformat-dev && \\\n    apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\n# Getting other dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        cppcheck \\\n        graphviz \\\n        doxygen \\\n        p7zip-full \\\n        libdlib18 \\\n        libdlib-dev && \\\n    apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\n\n# Install OpenCV + OpenCV contrib (takes forever)\nRUN mkdir -p /tmp && \\\n    cd /tmp && \\\n    wget --no-check-certificate -O opencv.zip https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \\\n    wget --no-check-certificate -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \\\n    unzip opencv.zip && \\\n    unzip opencv_contrib.zip && \\\n    mkdir opencv-${OPENCV_VERSION}/build && \\\n    cd opencv-${OPENCV_VERSION}/build && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\\n        -D WITH_CUDA=ON \\\n        -D CUDA_FAST_MATH=1 \\\n        -D WITH_CUBLAS=1 \\\n        -D WITH_FFMPEG=ON \\\n        -D WITH_OPENCL=ON \\\n        -D WITH_V4L=ON \\\n        -D WITH_OPENGL=ON \\\n        -D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib-${OPENCV_VERSION}/modules \\\n        .. && \\\n    make -j$(nproc) && \\\n    make install && \\\n    echo \"/usr/local/lib\" > /etc/ld.so.conf.d/opencv.conf && \\\n    ldconfig && \\\n    cd /tmp && \\\n    rm -rf opencv-${OPENCV_VERSION} opencv.zip opencv_contrib-${OPENCV_VERSION} opencv_contrib.zip && \\\n    cd /\n\n# Compile and install ffmpeg from source\nRUN git clone https://github.com/FFmpeg/FFmpeg /root/ffmpeg && \\\n    cd /root/ffmpeg && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-gpl --enable-libx264 --enable-nonfree --disable-shared --extra-cflags=-I/usr/local/include && \\\n    make -j8 && make install -j8\n\n# clone deep-high-resolution-net\nARG POSE_ROOT=/pose_root\nRUN git clone https://github.com/leoxiaobin/deep-high-resolution-net.pytorch.git $POSE_ROOT\nWORKDIR $POSE_ROOT\nRUN mkdir output && mkdir log\n\nRUN pip3 install --no-cache-dir -r requirements.txt && \\\n    pip3 install --no-cache-dir torch==1.1.0 \\\n    torchvision==0.3.0 \\\n    opencv-python \\\n    pillow==6.2.1\n\n# build deep-high-resolution-net lib\nWORKDIR $POSE_ROOT/lib\nRUN make\n\n# install COCO API\nARG COCOAPI=/cocoapi\nRUN git clone https://github.com/cocodataset/cocoapi.git $COCOAPI\nWORKDIR $COCOAPI/PythonAPI\n# Install into global site-packages\nRUN make install\n\n# download fastrrnn pretrained model for person detection\nRUN python -c \"import torchvision; model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True); model.eval()\"\n\nCOPY inference.py $POSE_ROOT/tools\nCOPY inference-config.yaml $POSE_ROOT/\n"
}