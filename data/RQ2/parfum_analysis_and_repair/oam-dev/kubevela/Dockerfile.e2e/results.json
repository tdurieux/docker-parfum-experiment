{
  "startTime": 1674220605434,
  "endTime": 1674220606099,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 5,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE\n# Build the manager binary\nFROM --platform=${BUILDPLATFORM:-linux/amd64} golang:1.17-alpine as builder\n\nWORKDIR /workspace\n# Copy the Go Modules manifests\nCOPY go.mod go.mod\nCOPY go.sum go.sum\n# cache deps before building and copying source so that we don't need to re-download as much\n# and so that source changes don't invalidate our downloaded layer\nRUN go mod download\n\n# Copy the go source\nCOPY cmd/core/main.go main.go\nCOPY cmd/core/main_e2e_test.go main_e2e_test.go\nCOPY cmd/apiserver/main.go cmd/apiserver/main.go\nCOPY cmd/ cmd/\nCOPY apis/ apis/\nCOPY pkg/ pkg/\nCOPY version/ version/\nCOPY references/ references/\n\n# Build\nARG TARGETARCH\nARG VERSION\nARG GITVERSION\n\nRUN apk add --no-cache gcc musl-dev libc-dev; \\\n    GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=${TARGETARCH} \\\n    go test -c -o manager-${TARGETARCH}  -cover -covermode=atomic -coverpkg ./... .\n\nRUN GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=${TARGETARCH} \\\n    go build -a -ldflags \"-s -w -X github.com/oam-dev/kubevela/version.VelaVersion=${VERSION:-undefined} -X github.com/oam-dev/kubevela/version.GitRevision=${GITVERSION:-undefined}\" \\\n    -o apiserver-${TARGETARCH} cmd/apiserver/main.go\n\n# Use alpine as base image due to the discussion in issue #1448\n# You can replace distroless as minimal base image to package the manager binary\n# Refer to https://github.com/GoogleContainerTools/distroless for more details\n# Overwrite `BASE_IMAGE` by passing `--build-arg=BASE_IMAGE=gcr.io/distroless/static:nonroot`\n\nFROM ${BASE_IMAGE:-alpine:3.15}\n# This is required by daemon connecting with cri\nRUN apk add --no-cache ca-certificates bash expat\n\nWORKDIR /\n\nARG TARGETARCH\nCOPY --from=builder /workspace/manager-${TARGETARCH} /usr/local/bin/manager\nCOPY --from=builder /workspace/apiserver-${TARGETARCH} /usr/local/bin/apiserver\n\nCOPY entrypoint.sh /usr/local/bin/\n\nVOLUME [\"/workspace/data\"]\n\nENTRYPOINT [\"entrypoint.sh\"]\n\nCMD [\"manager\"]\n"
}