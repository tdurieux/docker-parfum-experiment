{
  "startTime": 1674254544809,
  "endTime": 1674254546280,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 2,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 2,
        "columnEnd": 127
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 2,
        "columnEnd": 20
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 2,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 2,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 43,
        "columnStart": 20,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 2,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Some inspiration was taken from here https://github.com/mdegans/nano_build_opencv/blob/docker/build_opencv.sh\nARG PYTHON_VERSION\nARG UBUNTU_VERSION\nARG FFMPEG_VERSION\nARG JETPACK_VERSION\nFROM roflcoopter/jetson-nano-ffmpeg:${FFMPEG_VERSION} as ffmpeg\nFROM roflcoopter/jetson-nano-python:${PYTHON_VERSION} as python\nFROM balenalib/jetson-nano-ubuntu:${UBUNTU_VERSION}-build as qemu\nFROM nvcr.io/nvidia/l4t-base:${JETPACK_VERSION} as build\n\nCOPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static\nCOPY --from=qemu /bin/sh /bin/sh\nCOPY --from=qemu /bin/sh.real /bin/sh.real\nCOPY --from=qemu /usr/bin/cross-build-start /bin/cross-build-start\nCOPY --from=qemu /usr/bin/cross-build-end /bin/cross-build-end\nCOPY --from=qemu /usr/bin/resin-xbuild /usr/bin/resin-xbuild\n\nCOPY --from=ffmpeg /usr/local /usr/local/\n\nCOPY --from=python /usr/local /usr/local/\nRUN \\\n  cd /usr/local/bin && \\\n  ln -s idle3 idle && \\\n  ln -s pydoc3 pydoc && \\\n  ln -s python3 python\n\nRUN [ \"cross-build-start\" ]\n\nWORKDIR /tmp/workdir\n\nARG OPENCV_VERSION\nARG MAKEFLAGS=\"-j2\"\nENV \\\n  DEBIAN_FRONTEND=noninteractive \\\n  PKG_CONFIG_PATH=\"/opt/opencv/share/pkgconfig:/opt/opencv/lib/pkgconfig:/opt/opencv/lib64/pkgconfig\" \\\n  PREFIX=/opt/opencv \\\n  # Jetson Nano uses compute capability 5.3\n  CUDA_ARCH_BIN=\"53\" \\\n  CUDA_ARCH_PTX=\"70\"\n\nRUN \\\n  apt-get update && apt-get install -y --no-install-recommends \\\n  ca-certificates \\\n  gnupg && \\\n  echo \"deb https://repo.download.nvidia.com/jetson/common r32.5 main\" >>  /etc/apt/sources.list.d/nvidia.list \\\n  && echo \"deb https://repo.download.nvidia.com/jetson/t210 r32.5 main\" >>  /etc/apt/sources.list.d/nvidia.list \\\n  && apt-key adv --fetch-key http://repo.download.nvidia.com/jetson/jetson-ota-public.asc \\\n  && mkdir -p /opt/nvidia/l4t-packages/ && touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall && rm -rf /var/lib/apt/lists/*;\n\nRUN buildDeps=\"autoconf \\\n  automake \\\n  ca-certificates \\\n  cmake \\\n  curl \\\n  clinfo \\\n  bzip2 \\\n  expat \\\n  libexpat1-dev \\\n  g++ \\\n  gcc \\\n  git \\\n  gperf \\\n  libtool \\\n  make \\\n  nasm \\\n  perl \\\n  pkg-config \\\n  python3 \\\n  python3-dev \\\n  # python3-numpy \\\n  libssl-dev \\\n  yasm \\\n  libgomp1 \\\n  libnuma-dev \\\n  zlib1g-dev \\\n  libcudnn8-dev \\\n  libcublas-dev\" && \\\n  apt-get -yqq update && \\\n  apt-get install -yq --no-install-recommends ${buildDeps} && \\\n  pip3 install --no-cache-dir numpy && rm -rf /var/lib/apt/lists/*;\n\n# Minimal cuda install does not create symlink so we do it manually\nRUN ln -s /usr/local/cuda-10.2 /usr/local/cuda\n\n## OpenCV\nRUN \\\n  DIR=/tmp/opencv && mkdir -p ${DIR} && cd ${DIR} && \\\n  curl -f -sL -o opencv-${OPENCV_VERSION}.tar.gz https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz && \\\n  tar -x --strip-components=1 -f opencv-${OPENCV_VERSION}.tar.gz && rm opencv-${OPENCV_VERSION}.tar.gz\nRUN \\\n  DIR=/tmp/opencv_contrib && mkdir -p ${DIR} && cd ${DIR} && \\\n  curl -f -sL -o opencv_contrib-${OPENCV_VERSION}.tar.gz https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.tar.gz && \\\n  tar -x --strip-components=1 -f opencv_contrib-${OPENCV_VERSION}.tar.gz && rm opencv_contrib-${OPENCV_VERSION}.tar.gz\n\nRUN \\\n  DIR=/tmp/opencv/build && mkdir -p ${DIR} && cd ${DIR} && \\\n  cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n  -DBUILD_TIFF=ON \\\n  -DBUILD_opencv_java=OFF \\\n  -D BUILD_SHARED_LIBS=ON \\\n  -D WITH_OPENGL=ON \\\n  -D WITH_OPENCL=ON \\\n  -D WITH_OPENMP=ON \\\n  -D WITH_TBB=ON \\\n  -D WITH_EIGEN=ON \\\n  -D WITH_V4L=ON \\\n  -D WITH_GTK=OFF \\\n  -D WITH_GTK_2_X=OFF \\\n  -D WITH_FFMPEG=ON \\\n  -D WITH_GSTREAMER=ON \\\n  -D WITH_GSTREAMER_0_10=OFF \\\n  -D WITH_LIBV4L=ON \\\n  -D WITH_CSTRIPES=ON \\\n  -D BUILD_TESTS=OFF \\\n  -D BUILD_PERF_TESTS=OFF \\\n  -D BUILD_opencv_python2=OFF \\\n  -D BUILD_opencv_python3=ON \\\n  -D PYTHON3_INCLUDE_DIR=$(python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\")  \\\n  -D PYTHON3_LIBRARY=$(python3 -c \"import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))\") \\\n  -D CMAKE_INSTALL_PREFIX=${PREFIX} \\\n  -D INSTALL_PYTHON_EXAMPLES=OFF \\\n  -D INSTALL_C_EXAMPLES=OFF \\\n  -D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib/modules \\\n  -D BUILD_DOCS=OFF \\\n  -D BUILD_EXAMPLES=OFF \\\n  -D WITH_CUDA=ON \\\n  -D WITH_CUDNN=ON \\\n  -D CUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" \\\n  -D CUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" \\\n  -D CUDA_FAST_MATH=1 \\\n  -D WITH_CUBLAS=1 \\\n  -D CMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs \\\n  -D WITH_MKL=ON \\\n  -D MKL_USE_MULTITHREAD=ON \\\n  -D MKL_WITH_TBB=ON \\\n  -D OPENCV_DNN_CUDA=ON \\\n  -D ENABLE_NEON=ON \\\n  # Turn off some unnecessary modules that only take extra time to build\n  -D BUILD_opencv_face=OFF \\\n  -D HIGHGUI_ENABLE_PLUGINS=OFF \\\n  -D WITH_WIN32UI=OFF \\\n  -D WITH_GTK=OFF \\\n  -D WITH_QT=OFF \\\n  /tmp/opencv && \\\n  make && \\\n  make install\n\nFROM scratch as opencv\nCOPY --from=build /opt/opencv /opt/opencv/\n"
}