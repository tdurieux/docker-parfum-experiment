{
  "startTime": 1674246430699,
  "endTime": 1674246431740,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 34,
        "columnStart": 20,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 2,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_VERSION\nARG UBUNTU_VERSION\nARG JETPACK_VERSION\nFROM roflcoopter/jetson-nano-python:${PYTHON_VERSION} as python\nFROM balenalib/jetson-nano-ubuntu:${UBUNTU_VERSION}-build as qemu\nFROM nvcr.io/nvidia/l4t-base:${JETPACK_VERSION} as build\n\nCOPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin/qemu-aarch64-static\nCOPY --from=qemu /bin/sh /bin/sh\nCOPY --from=qemu /bin/sh.real /bin/sh.real\nCOPY --from=qemu /usr/bin/cross-build-start /bin/cross-build-start\nCOPY --from=qemu /usr/bin/cross-build-end /bin/cross-build-end\nCOPY --from=qemu /usr/bin/resin-xbuild /usr/bin/resin-xbuild\n\nCOPY --from=python /usr/local /usr/local/\nRUN \\\n  cd /usr/local/bin && \\\n  ln -s idle3 idle && \\\n  ln -s pydoc3 pydoc && \\\n  ln -s python3 python\n\nRUN [ \"cross-build-start\" ]\n\nARG DLIB_VERSION\nARG MAKEFLAGS=\"-j2\"\n\nENV \\\n  DEBIAN_FRONTEND=noninteractive \\\n  PIP_IGNORE_INSTALLED=0\n\n# NVIDIA repos use HTTPS so we need some additional libraries first\nRUN \\\n  apt-get update && apt-get install -y --no-install-recommends \\\n  ca-certificates \\\n  gnupg && \\\n  echo \"deb https://repo.download.nvidia.com/jetson/common r32.5 main\" >>  /etc/apt/sources.list.d/nvidia.list \\\n  && echo \"deb https://repo.download.nvidia.com/jetson/t210 r32.5 main\" >>  /etc/apt/sources.list.d/nvidia.list \\\n  && apt-key adv --fetch-key http://repo.download.nvidia.com/jetson/jetson-ota-public.asc \\\n  && mkdir -p /opt/nvidia/l4t-packages/ && touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall && rm -rf /var/lib/apt/lists/*;\n\nRUN buildDeps=\"autoconf \\\n  automake \\\n  ca-certificates \\\n  cmake \\\n  g++ \\\n  gcc \\\n  git \\\n  libopenblas-dev \\\n  liblapack-dev \\\n  make \\\n  python3-dev \\\n  python3-pip \\\n  python3-setuptools \\\n  python3-wheel \\\n  libcudnn8-dev \\\n  libcublas-dev \\\n  cuda-libraries-dev-10-2\" && \\\n  apt-get -yqq update && \\\n  apt-get install -yq --no-install-recommends ${buildDeps} && rm -rf /var/lib/apt/lists/*;\n\n# Minimal cuda install does not create symlink so we do it manually\nRUN ln -s /usr/local/cuda-10.2 /usr/local/cuda\n\n# Create dlib wheel\nRUN \\\n  DIR=/tmp && mkdir -p ${DIR} && cd ${DIR} && \\\n  git clone --branch v${DLIB_VERSION} --depth 1 https://github.com/davisking/dlib.git && \\\n  # Fix bug, explained here https://medium.com/@ageitgey/build-a-hardware-based-face-recognition-system-for-150-with-the-nvidia-jetson-nano-and-python-a25cb8c891fd\n  sed -i -e 's/forward_algo = forward_best_algo;/\\/\\/forward_algo = forward_best_algo;/' dlib/dlib/cuda/cudnn_dlibapi.cpp && \\\n  cd dlib; python3 setup.py bdist_wheel --dist-dir=/wheels\n\nRUN \\\n  pip3 wheel face_recognition dlib==${DLIB_VERSION} --wheel-dir=/wheels/ --find-links=/wheels/\n\nRUN [ \"cross-build-end\" ]\n\nFROM scratch as scratch\nCOPY --from=build /wheels /wheels/\n"
}