{
  "startTime": 1674251022908,
  "endTime": 1674251023860,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 16,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\n####### PHP custom runtime #######\n\n####### Install and compile everything #######\n\n# Same AL version as Lambda execution environment AMI\nFROM amazonlinux:2018.03.0.20190514 as builder\n\n# Set desired PHP Version\nARG php_version=\"7.3.6\"\n\n# Lock to 2018.03 release (same as Lambda) and install compilation dependencies\nRUN sed -i 's;^releasever.*;releasever=2018.03;;' /etc/yum.conf && \\\n    yum clean all && \\\n    yum install -y autoconf \\\n                bison \\\n                bzip2-devel \\\n                gcc \\\n                gcc-c++ \\\n                git \\\n                gzip \\\n                libcurl-devel \\\n                libxml2-devel \\\n                make \\\n                openssl-devel \\\n                tar \\\n                unzip \\\n                zip && rm -rf /var/cache/yum\n\n# Download the PHP source, compile, and install both PHP and Composer\nRUN curl -f -sL https://github.com/php/php-src/archive/php-${php_version}.tar.gz | tar -xvz && \\\n    cd php-src-php-${php_version} && \\\n    ./buildconf --force && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/php-7-bin/ --with-openssl --with-curl --with-zlib --without-pear --enable-bcmath --with-bz2 --enable-mbstring --with-mysqli && \\\n    make -j 5 && \\\n    make install && \\\n    /opt/php-7-bin/bin/php -v && \\\n    curl -f -sS https://getcomposer.org/installer | /opt/php-7-bin/bin/php -- --install-dir=/opt/php-7-bin/bin/ --filename=composer\n\n# Prepare runtime files\nRUN mkdir -p /lambda-php-runtime/bin && \\\n    cp /opt/php-7-bin/bin/php /lambda-php-runtime/bin/php\n\nCOPY runtime/bootstrap /lambda-php-runtime/\nRUN chmod 0555 /lambda-php-runtime/bootstrap\n\n# Install Guzzle, prepare vendor files\nRUN mkdir /lambda-php-vendor && \\\n    cd /lambda-php-vendor && \\\n    /opt/php-7-bin/bin/php /opt/php-7-bin/bin/composer require guzzlehttp/guzzle\n\n###### Create runtime image ######\n\nFROM lambci/lambda:provided as runtime\n\n# Layer 1\nCOPY --from=builder /lambda-php-runtime /opt/\n\n# Layer 2\nCOPY --from=builder /lambda-php-vendor/vendor /opt/vendor\n\n###### Create function image ######\n\nFROM runtime as function\n\nCOPY function/src /var/task/src/\n"
}