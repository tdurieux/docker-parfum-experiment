{
  "startTime": 1674255751504,
  "endTime": 1674255752163,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright The PyTorch Lightning team.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:20.04\n\nLABEL maintainer=\"Lightning-AI <https://github.com/Lightning-AI>\"\n\nARG PYTHON_VERSION=3.9\nARG CONDA_VERSION=4.9.2\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# for skipping configurations\nENV \\\n    DEBIAN_FRONTEND=noninteractive \\\n    CONDA_ENV=lightning\n\nRUN apt-get update -qq && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        cmake \\\n        curl \\\n        git \\\n        jq \\\n        libopenmpi-dev \\\n        unzip \\\n        wget \\\n    && \\\n# Install conda and python.\n# NOTE new Conda does not forward the exit status... https://github.com/conda/conda/issues/8385\n    curl -f -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_${CONDA_VERSION}-Linux-x86_64.sh && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b && \\\n    rm ~/miniconda.sh && \\\n# Cleaning\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /root/.cache && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV \\\n    PATH=\"/root/miniconda3/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/miniconda3/lib:$LD_LIBRARY_PATH\"\n\nCOPY environment.yml environment.yml\n\nRUN conda create -y --name $CONDA_ENV python=${PYTHON_VERSION} pytorch=${PYTORCH_VERSION} cudatoolkit=${CUDA_VERSION} -c pytorch && \\\n    conda init bash && \\\n    python -c \"import re ; fname = 'environment.yml' ; req = re.sub(r'python>=[\\d\\.]+', 'python=${PYTHON_VERSION}', open(fname).read()) ; open(fname, 'w').write(req)\" && \\\n    python -c \"import re ; fname = 'environment.yml' ; req = re.sub(r'- pytorch[>=]+[\\d\\.]+', '# - pytorch=${PYTORCH_VERSION}', open(fname).read()) ; open(fname, 'w').write(req)\" && \\\n    python -c \"fname = 'environment.yml' ; req = open(fname).readlines() ; open(fname, 'w').writelines([ln for ln in req if not any(n in ln for n in ['pytorch>', 'horovod'])])\" && \\\n    cat environment.yml && \\\n    conda env update --file environment.yml && \\\n    conda clean -ya && \\\n    rm environment.yml\n\nENV \\\n    PATH=/root/miniconda3/envs/${CONDA_ENV}/bin:$PATH \\\n    LD_LIBRARY_PATH=\"/root/miniconda3/envs/${CONDA_ENV}/lib:$LD_LIBRARY_PATH\" \\\n    # if you want this environment to be the default one, uncomment the following line:\n    CONDA_DEFAULT_ENV=${CONDA_ENV} \\\n    MKL_THREADING_LAYER=GNU\n\nCOPY ./requirements/pytorch/* requirements/\nCOPY ./.actions/assistant.py assistant.py\n\nRUN \\\n    pip list | grep torch && \\\n    python -c \"import torch; print(torch.__version__)\" && \\\n    pip install --no-cache-dir -q fire && \\\n    python requirements/adjust-versions.py requirements/extra.txt && \\\n    # Install remaining requirements\n    pip install -r requirements/extra.txt --no-cache-dir && \\\n    pip install -r requirements/test.txt --no-cache-dir && \\\n    rm -rf requirements/\n\nRUN \\\n    # Show what we have\n    pip --version && \\\n    conda info && \\\n    pip list && \\\n    python -c \"import sys; assert sys.version[:3] == '$PYTHON_VERSION', sys.version\" && \\\n    python -c \"import torch; assert torch.__version__.startswith('$PYTORCH_VERSION'), torch.__version__\"\n"
}