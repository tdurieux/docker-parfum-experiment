{
  "startTime": 1674253085158,
  "endTime": 1674253086539,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\n\nMAINTAINER @mynameismaxz (github.com/mynameismaxz)\n\n# install all-of-package\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository ppa:jonathonf/ffmpeg-4 -y && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y build-essential \\\n    python-pip \\\n    python-dev \\\n    python-numpy \\\n    python3-dev \\\n    python3-setuptools \\\n    python3-numpy \\\n    python3-pip \\\n    make \\\n    cmake \\\n    libavcodec-dev \\\n    libavfilter-dev \\\n    libavformat-dev \\\n    libavutil-dev \\\n    ffmpeg \\\n    wget \\\n    git \\\n    libcurl4-gnutls-dev \\\n    zlib1g-dev \\\n    liblapack-dev \\\n    libatlas-base-dev \\\n    libgstreamer1.0-dev \\\n    libgstreamer-plugins-base1.0-dev \\\n    libswscale-dev \\\n    libdc1394-22-dev \\\n    libzip-dev \\\n    libboost* \\\n    zip \\\n    unrar \\\n    yasm \\\n    pkg-config \\\n    libtbb2 \\\n    libtbb-dev \\\n    libjpeg-dev \\\n    libpng-dev \\\n    libtiff-dev \\\n    libjasper-dev \\\n    libavformat-dev \\\n    libpq-dev \\\n\tlibxine2-dev \\\n\tlibglew-dev \\\n\tlibtiff5-dev \\\n\tzlib1g-dev \\\n\tlibjpeg-dev \\\n\tlibpng12-dev \\\n\tlibjasper-dev \\\n\tlibavcodec-dev \\\n\tlibavformat-dev \\\n\tlibavutil-dev \\\n\tlibpostproc-dev \\\n\tlibswscale-dev \\\n\tlibeigen3-dev \\\n\tlibtbb-dev \\\n\tlibgtk2.0-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /data\n\nWORKDIR /data\n\n# unlink old-python (python2) & make new symbolic-link for python3\nRUN unlink /usr/bin/python \\\n    && unlink /usr/bin/pip \\\n    && ln -s /usr/bin/python3 /usr/bin/python \\\n    && ln -s /usr/bin/pip3 /usr/bin/pip \\\n    && pip install --no-cache-dir --upgrade pip\n\n# install essential python package\nRUN pip install --no-cache-dir torchvision==0.4.0 \\\n    cython==0.29.11 \\\n    numpy==1.16.4 \\\n    scipy \\\n    pandas \\\n    matplotlib \\\n    scikit-learn\n\n# 1 st step - clone repository & install opencv 4.1.0 (using a lot of time!!)\nRUN wget -O OpenCV-4.1.0.zip https://github.com/opencv/opencv/archive/4.1.0.zip \\\n    && unzip OpenCV-4.1.0.zip \\\n    && rm -rf OpenCV-4.1.0.zip \\\n    && wget -O OpenCV_contrib-4.1.0.zip https://github.com/opencv/opencv_contrib/archive/4.1.0.zip \\\n    && unzip OpenCV_contrib-4.1.0.zip \\\n    && rm -rf OpenCV_contrib-4.1.0.zip \\\n    && cd opencv-4.1.0 \\\n    && mkdir build \\\n    && cd build \\\n    ### using cmake refer from INSTALLATION.md default file ###\n    && cmake \\ \n        -DCMAKE_BUILD_TYPE=Release \\\n        -DWITH_CUDA=ON \\\n        -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.0/modules/ \\\n        -DWITH_TBB=ON \\\n        -DBUILD_opencv_cnn_3dobj=OFF \\\n        -DBUILD_opencv_dnn=OFF \\\n        -DBUILD_opencv_dnn_modern=OFF \\\n        -DBUILD_opencv_dnns_easily_fooled=OFF \\\n        -DOPENCV_ENABLE_NONFREE=ON \\\n        .. \\\n    && make -j\n\n# clone repository (mmaction)\nRUN git clone --recursive https://github.com/open-mmlab/mmaction.git\n\n# install cmake first\nRUN wget --no-check-certificate https://cmake.org/files/v3.9/cmake-3.9.0.tar.gz \\\n    && tar -zxvf cmake-3.9.0.tar.gz \\\n    && rm -rf cmake-3.9.0.tar.gz \\\n    && cd cmake-3.9.0 \\\n    && ./bootstrap --system-curl \\\n    && make -j && make install\n\n# install decord\nRUN cd mmaction/third_party/decord \\\n    && mkdir -p build \\\n    && cd build \\\n    && cmake .. -DUSE_CUDA=0 \\\n    && make -j \\\n    && cd ../python \\\n    && python3 setup.py install --user\n\n# install dense flow\nRUN cd mmaction/third_party/dense_flow \\\n    && mkdir build \\\n    && cd build \\\n    && OpenCV_DIR=/data/opencv-4.1.0/build/ cmake .. \\\n    && make -j\n\n# install mmcv\nRUN pip install --no-cache-dir mmcv==0.2.16\n\n# setup mmaction\nRUN cd mmaction \\ \n    && chmod 777 compile.sh \\\n    && ./compile.sh \\\n    && python3 setup.py develop\n"
}