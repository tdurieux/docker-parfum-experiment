{
  "startTime": 1674252087041,
  "endTime": 1674252088952,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 5,
        "columnEnd": 86
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 45,
        "columnStart": 22,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#--------------------------------------------------------------------\n# ARGs for FROM statements\n#--------------------------------------------------------------------\nARG ubuntu_ver=20.04\n\n#--------------------------------------------------------------------\n# TF Serving base build\n#--------------------------------------------------------------------\nFROM ubuntu:$ubuntu_ver as tfserving_build\n\nARG TF_SERVING_VERSION_GIT_BRANCH=r2.4\nARG TF_SERVING_VERSION_GIT_COMMIT=head\n\nENV no_proxy=.intel.com,intel.com\nENV http_proxy=http://proxy-chain.intel.com:911\nENV https_proxy=http://proxy-chain.intel.com:912\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends automake build-essential \\\n    ca-certificates curl git libcurl3-dev libfreetype6-dev libpng-dev libtool libzmq3-dev \\\n    mlocate openjdk-8-jdk openjdk-8-jre-headless pkg-config \\\n    software-properties-common swig unzip wget zip zlib1g-dev python3-distutils \\\n    libmkl-intel-thread \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python3 get-pip.py && \\\n    rm get-pip.py\n\n# Install python 3.6.\nRUN add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n    python3.6 python3.6-dev python3-pip python3.6-venv && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    python3.6 -m pip install pip --upgrade && \\\n    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 0\n\n# Make python3.6 the default python version\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3.6 0\n\nRUN pip3 --no-cache-dir install \\\n    future>=0.17.1 \\\n    grpcio \\\n    h5py \\\n    keras_applications>=1.0.8 \\\n    keras_preprocessing>=1.1.0 \\\n    mock \\\n    numpy \\\n    requests \\\n    --ignore-installed setuptools \\\n    --ignore-installed six>=1.12.0\n\n# Set up Bazel\nENV BAZEL_VERSION 3.0.0\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download TF Serving sources (optionally at specific commit).\nWORKDIR /tensorflow-serving\nRUN git clone --branch=${TF_SERVING_VERSION_GIT_BRANCH} https://github.com/tensorflow/serving . && \\\n    git remote add upstream https://github.com/tensorflow/serving.git && \\\n    if [ \"${TF_SERVING_VERSION_GIT_COMMIT}\" != \"head\" ]; then git checkout ${TF_SERVING_VERSION_GIT_COMMIT} ; fi\n\n#--------------------------------------------------------------------\n# Binary build\n#--------------------------------------------------------------------\nFROM tfserving_build as binary_build\n# Build, and install TensorFlow Serving\nARG TF_SERVING_BUILD_OPTIONS=\"--config=release --config=mkl\"\nRUN echo \"Building with build options: ${TF_SERVING_BUILD_OPTIONS}\"\nARG TF_SERVING_BAZEL_OPTIONS=\"\"\nRUN echo \"Building with Bazel options: ${TF_SERVING_BAZEL_OPTIONS}\"\n\nRUN bazel build --color=yes --curses=yes \\\n    ${TF_SERVING_BAZEL_OPTIONS} \\\n    --verbose_failures \\\n    --output_filter=DONT_MATCH_ANYTHING \\\n    --copt=-march=\"skylake-avx512\" \\\n    ${TF_SERVING_BUILD_OPTIONS} \\\n    tensorflow_serving/model_servers:tensorflow_model_server && \\\n    cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server \\\n    /usr/local/bin/\n\n# Build and install TensorFlow Serving API\nRUN bazel build --color=yes --curses=yes \\\n    ${TF_SERVING_BAZEL_OPTIONS} \\\n    --verbose_failures \\\n    --output_filter=DONT_MATCH_ANYTHING \\\n    --copt=-march=\"skylake-avx512\" \\\n    ${TF_SERVING_BUILD_OPTIONS} \\\n    tensorflow_serving/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow_serving/tools/pip_package/build_pip_package \\\n    /tmp/pip\n\n#--------------------------------------------------------------------\n# Openvino and TF Serving Install\n#--------------------------------------------------------------------\nFROM ubuntu:$ubuntu_ver as serving_build\nLABEL maintainer=otc-swstacks@intel.com\n\n# Install SW packages\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get -y upgrade \\\n  && apt-get install -y --no-install-recommends apt-utils \\\n  curl ca-certificates gpg-agent pkg-config gnupg2 wget python3-pip \\\n  libtool libdrm2 udev libgtk-3-0 python3-dev software-properties-common \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && ln -s /usr/bin/python3 /usr/bin/python \\\n  && ln -s /usr/bin/pip3 /usr/bin/pip\n\n# install opencl\nRUN apt-get update \\\n   && apt-get install -y --no-install-recommends ocl-icd-libopencl1 \\\n   && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /workspace/\n\nRUN export no_proxy=*.intel.com && update-ca-certificates --fresh \\\n  && curl -f -k https://apt.repos.intel.com/openvino/2021/GPG-PUB-KEY-INTEL-OPENVINO-2021 \\\n  | apt-key add - \\\n  && echo \"deb https://apt.repos.intel.com/openvino/2021 all main\" | tee /etc/apt/sources.list.d/intel-openvino-2021.list \\\n  && add-apt-repository -y \"deb https://apt.repos.intel.com/openvino/2021 all main\"\n\nRUN export no_proxy=*.intel.com && apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n  intel-openvino-eula-2021.1.110 intel-openvino-ie-rt-2021.2.200 \\\n  intel-openvino-ie-rt-core-ubuntu-focal-2021.2.200 \\\n  intel-openvino-ie-rt-cpu-ubuntu-focal-2021.2.200 \\\n  intel-openvino-ie-rt-gna-ubuntu-focal-2021.2.200 \\\n  intel-openvino-ie-rt-gpu-ubuntu-focal-2021.2.200 \\\n  intel-openvino-opencv-lib-ubuntu-focal-2021.2.200 \\\n  intel-openvino-ie-bin-python-tools-ubuntu-focal-2021.2.200 \\\n  intel-openvino-ie-sdk-ubuntu-focal-2021.2.200 \\\n  intel-openvino-opencv-generic-2021.2.200 \\\n  intel-openvino-pot-2021.2.200 \\\n  intel-openvino-dev-ubuntu20-2021.2.200 \\\n  intel-openvino-dl-workbench-2021.2.200 \\\n  intel-openvino-ie-samples-2021.2.200 \\\n  intel-openvino-model-optimizer-2021.2.200 \\\n  intel-openvino-opencv-etc-2021.2.200 \\\n  intel-openvino-setupvars-2021.2.200 \\\n  && apt-get -y remove intel-openvino-ie-rt-hddl-ubuntu-focal-2021.2.200 \\\n  && apt autoremove -y && rm -rf /var/lib/apt/lists/*\n\n# install gpu drivers\nENV VERSION=\"20.41.18123\"\nRUN  cd /workspace \\\n  && mkdir neo && cd neo \\\n  && wget https://github.com/intel/compute-runtime/releases/download/$VERSION/intel-gmmlib_20.3.1_amd64.deb \\\n  && wget https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.5186/intel-igc-core_1.0.5186_amd64.deb \\\n  && wget https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.5186/intel-igc-opencl_1.0.5186_amd64.deb \\\n  && wget https://github.com/intel/compute-runtime/releases/download/$VERSION/intel-opencl_20.41.18123_amd64.deb \\\n  && wget https://github.com/intel/compute-runtime/releases/download/$VERSION/intel-ocloc_20.41.18123_amd64.deb \\\n  && dpkg -i *.deb && ldconfig && rm -r /workspace/neo\n\n# install python user packages\nRUN pip --no-cache-dir install \"opencv-python==3.4.*\" \"numpy==1.19.*\"\n\nRUN echo \"source /opt/intel/openvino_2021.2.200/bin/setupvars.sh\" >> /root/.bashrc \\\n  && /bin/bash -c \"source /root/.bashrc\"\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends --yes cmake cpio build-essential \\\n  autoconf automake lsb-release libglib2.0-0 libgflags-dev \\\n  && /opt/intel/openvino_2021/inference_engine/samples/c/build_samples.sh \\\n  && /opt/intel/openvino_2021/inference_engine/samples/cpp/build_samples.sh \\\n  && apt-get remove -y python3-dev automake autoconf build-essential cmake lsb-release libgflags-dev \\\n  && apt autoremove -y \\\n  && apt-get update && apt-get install --no-install-recommends --yes libgflags2.2 \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Install TensorFlow Serving API from builder image\nCOPY --from=binary_build /usr/local/bin/tensorflow_model_server /usr/local/bin/tensorflow_model_server\nCOPY --from=binary_build /tmp/pip/ /tmp/pip/\nCOPY --from=binary_build /root/.cache/bazel/_bazel_root/*/external/mkl_linux/lib/* /usr/lib\nCOPY --from=binary_build /root/.cache/bazel/_bazel_root/*/execroot/tf_serving/bazel-out/k8-opt/bin/external/llvm_openmp/libiomp5.so /usr/lib\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    automake build-essential openjdk-8-jdk openjdk-8-jre-headless \\\n    && curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n    && python3 get-pip.py \\\n    && rm get-pip.py \\\n    && pip install --no-cache-dir setuptools \\\n    && pip --no-cache-dir install --upgrade /tmp/pip/tensorflow_serving_api-*.whl \\\n    && rm -rf /tmp/pip \\\n    && apt-get remove -y gcc automake build-essential openjdk-8-jdk openjdk-8-jre-headless \\\n    && apt-get install -y --no-install-recommends --no-install-suggests libpython3.8 libpython3.8-dev \\\n    && apt-get clean \\\n     && apt-get autoclean -y && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# cleanup\nCOPY ./scripts/cleanup.sh ./cleanup.sh\nRUN chmod +x ./cleanup.sh && ./cleanup.sh && rm ./cleanup.sh\n\nCOPY ./licenses/ /workspace/licenses\n#--------------------------------------------------------------------\n# Final Serving image\n#--------------------------------------------------------------------\nFROM ubuntu:$ubuntu_ver as serving\nLABEL maintainer=otc-swstacks@intel.com\n\nCOPY --from=serving_build / /\nHEALTHCHECK --interval=5m --timeout=3s \\\n  CMD python -c \"import sys\" || exit 1\nSHELL [\"/bin/bash\",  \"-c\"]\n"
}