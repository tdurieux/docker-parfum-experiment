{
  "startTime": 1674249238023,
  "endTime": 1674249242197,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 5,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 5,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 2,
        "columnEnd": 90
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 280,
        "lineEnd": 326,
        "columnStart": 2,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 2,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 3,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 595,
        "lineEnd": 595,
        "columnStart": 2,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 742,
        "lineEnd": 742,
        "columnStart": 2,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 25,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 735,
        "lineEnd": 735,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 209
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 25,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 22,
        "columnEnd": 122
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 22,
        "columnEnd": 131
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 259,
        "lineEnd": 259,
        "columnStart": 22,
        "columnEnd": 162
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 349,
        "lineEnd": 350,
        "columnStart": 25,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 375,
        "lineEnd": 376,
        "columnStart": 20,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 393,
        "lineEnd": 394,
        "columnStart": 25,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 411,
        "lineEnd": 411,
        "columnStart": 22,
        "columnEnd": 188
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 428,
        "lineEnd": 428,
        "columnStart": 22,
        "columnEnd": 81
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 444,
        "lineEnd": 444,
        "columnStart": 22,
        "columnEnd": 217
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 462,
        "lineEnd": 462,
        "columnStart": 23,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 493,
        "lineEnd": 493,
        "columnStart": 23,
        "columnEnd": 91
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 598,
        "lineEnd": 601,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 632,
        "lineEnd": 633,
        "columnStart": 20,
        "columnEnd": 121
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 735,
        "lineEnd": 735,
        "columnStart": 4,
        "columnEnd": 110
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 735,
        "lineEnd": 735,
        "columnStart": 4,
        "columnEnd": 110
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04 AS build\nWORKDIR /home\n\nENV LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:/usr/lib/x86_64-linux-gnu:/usr/lib\nENV LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu\nENV PKG_CONFIG_PATH=/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pgkconfig:/usr/lib/pkgconfig\nENV XDG_RUNTIME_DIR=/home/mers-user\nARG DEBIAN_FRONTEND=noninteractive\nARG TZ='GST-1'\n\nARG CFLAGS=\"-O3 \"\nARG CXXFLAGS=\"-O3 \"\nARG FCFLAGS=\"$CFLAGS \"\nARG FFLAGS=\"$CFLAGS \"\nARG CFLAGS=\"$CFLAGS -mfma -msse -msse2 -msse3 -mssse3 -mcx16 -msahf -mmovbe -mlzcnt -mavx -mtune=skylake-avx512 -m64\"\nARG CXXFLAGS=\"$CXXFLAGS -mfma -msse -msse2 -msse3 -mssse3 -mcx16 -msahf -mmovbe -mlzcnt -mtune=skylake-avx512 -m64\"\nARG GCC_IGNORE_WERROR=1\nARG CMAKE_CXX_FLAGS=\"Wno-error=deprecated-declarations -Wno-error=redundant-move -Wno-error=pessimizing-move -Wno-error=unused-function -Wno-error=parentheses -Wno-error=implicit-function-declaration\"\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n# Install cmake\nARG CMAKE_VER=3.16.3\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \\\n    cd cmake-${CMAKE_VER} && \\\n    ./bootstrap --prefix=/usr/local --system-curl && \\\n    make -j $(nproc) && \\\n    make install\n\n# Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\n\nRUN apt-get install --no-install-recommends -y -q automake && rm -rf /var/lib/apt/lists/*;\n\n# Build NASM\nARG NASM_VER=2.14.02\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} && \\\n     tar -xaf nasm* && \\\n     cd nasm-${NASM_VER} && \\\n     ./autogen.sh && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n     make -j $(nproc) && \\\n     make install\n\n# Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\n\nRUN wget -O - ${YASM_REPO} | tar xz && \\\n     cd yasm-${YASM_VER} && \\\n     sed -i \"s/) ytasm.*/)/\" Makefile.in && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n     make -j $(nproc) && \\\n     make install\n\nRUN apt-get update -y && apt-get install --no-install-recommends -y python3-pip ninja-build && rm -rf /var/lib/apt/lists/*;\nARG MESON_VER=0.53.1\nARG MESON_REPO=https://github.com/mesonbuild/meson\n\nRUN git clone ${MESON_REPO}; \\\n    cd meson; \\\n    git checkout ${MESON_VER}; \\\n    python3 setup.py install;\n\n# DAV1D_DOT=OS;color=red\nARG LIBDAV1D_VERSION=0.8.1\nARG LIBDAV1D_URL=\"https://code.videolan.org/videolan/dav1d/-/archive/$LIBDAV1D_VERSION/dav1d-$LIBDAV1D_VERSION.tar.gz\"\n\nRUN \\\n  wget -O dav1d.tar.gz \"$LIBDAV1D_URL\" && \\\n  tar xfz dav1d.tar.gz && \\\n  cd dav1d-* && \\\n  meson build --prefix=/usr/local --libdir /usr/local/lib/x86_64-linux-gnu --buildtype=plain && \\\n  cd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install && rm dav1d.tar.gz\n\n# X264_DOT=OS\nARG X264_VER=b3aadb76329d3c2aedac85142441476bbe5f002c\nARG X264_REPO=https://code.videolan.org/videolan/x264.git\n\nRUN \\\n  git clone ${X264_REPO} && \\\n  cd x264 && \\\n  git checkout ${X264_VER} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared && \\\n  make -j $(nproc) && \\\n\tmake install DESTDIR=/home/build && \\\n\tmake install\n\n# SVT_HEVC_DOT=OS\nARG SVT_HEVC_VER=ead6fdf7c9ff84511b42fc1658c1654b84d83e4b\nARG SVT_HEVC_REPO=https://github.com/OpenVisualCloud/SVT-HEVC\n\nRUN \\\n  git clone ${SVT_HEVC_REPO} && \\\n  cd SVT-HEVC/Build/linux && \\\n  git checkout ${SVT_HEVC_VER} && \\\n  mkdir -p ../../Bin/Release && \\\n  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\n# SVT_AV1_DOT=OS\nARG SVT_AV1_VER=v0.8.4\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\n\nRUN \\\n  git clone ${SVT_AV1_REPO} && \\\n  cd SVT-AV1/Build/linux && \\\n  git checkout ${SVT_AV1_VER} && \\\n  mkdir -p ../../Bin/Release && \\\n  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\n# GMMLIB_DOT=OS;color=red\nARG GMMLIB_VER=intel-gmmlib-20.4.1\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/${GMMLIB_VER}.tar.gz\n\nRUN \\\n   wget -O ${GMMLIB_VER}.tar.gz ${GMMLIB_REPO} && \\\n   tar zxf ${GMMLIB_VER}.tar.gz && mv gmmlib-${GMMLIB_VER} gmmlib && \\\n   cd gmmlib && \\\n   mkdir build && cd build && \\\n   cmake .. -DCMAKE_BUILD_TYPE=release && \\\n   make -j $(nproc) && \\\n   make install DESTDIR=/home/build && \\\n   make install; rm ${GMMLIB_VER}.tar.gz\n\n\n# LIBVA_DOT=OS;color=red\nARG LIBVA_VER=2.10.0\nARG LIBVA_REPO=https://github.com/intel/libva/archive/${LIBVA_VER}.tar.gz\n\nRUN apt-get remove libva*\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends libdrm-dev libx11-dev xorg-dev libgl1-mesa-dev openbox && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  wget -O ${LIBVA_VER} ${LIBVA_REPO} && \\\n  tar zxf ${LIBVA_VER} && \\\n  cd libva-${LIBVA_VER} && \\\n  ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install;\n\n# LIBVA_UTILS_DOT=OS;color=red\nARG LIBVA_UTILS_VER=2.10.0\nARG LIBVA_UTILS_REPO=https://github.com/intel/libva-utils/archive/${LIBVA_UTILS_VER}.tar.gz\n\nRUN \\\n  wget -O ${LIBVA_UTILS_VER} ${LIBVA_UTILS_REPO} && \\\n  tar zxf ${LIBVA_UTILS_VER} && \\\n  cd libva-utils-${LIBVA_UTILS_VER} && \\\n  ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install;\n\n# MEDIA_DRIVER_DOT=GMMLIB,LIBVA;color=red\nARG MEDIA_DRIVER_VER=intel-media-20.4.5\nARG MEDIA_DRIVER_REPO=https://github.com/intel/media-driver/archive/${MEDIA_DRIVER_VER}.tar.gz\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends libdrm-dev libpciaccess-dev libx11-dev xorg-dev libgl1-mesa-dev && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  wget -O ${MEDIA_DRIVER_VER} ${MEDIA_DRIVER_REPO} && \\\n  tar zxf ${MEDIA_DRIVER_VER} && mv media-driver-${MEDIA_DRIVER_VER} media-driver && \\\n  mkdir -p media-driver/build && \\\n  cd media-driver/build && \\\n  export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\" && \\\n  cmake -DBUILD_TYPE=release -DBUILD_ALONG_WITH_CMRTLIB=1 \\\n        -DBS_DIR_GMMLIB=/home/gmmlib/Source/GmmLib \\\n        -DBS_DIR_COMMON=/home/gmmlib/Source/Common \\\n        -DBS_DIR_INC=/home/gmmlib/Source/inc \\\n        -DBS_DIR_MEDIA=/home/media-driver -Wno-dev \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local .. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\n# The iHD_drv_video.so library is heavy so strip debug symbols\n# See https://github.com/intel/media-driver/issues/859\nRUN strip -S \\\n    /home/build//usr/local/lib/x86_64-linux-gnu/dri/iHD_drv_video.so\n\n# MEDIA_SDK_DOT=LIBVA;color=red\nARG MSDK_VER=intel-mediasdk-20.5.1\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VER}.tar.gz\n\nRUN \\\n  wget -O ${MSDK_VER} ${MSDK_REPO} && \\\n  tar zxf ${MSDK_VER} && mv MediaSDK-${MSDK_VER} MediaSDK && \\\n  mkdir -p MediaSDK/build && \\\n  cd MediaSDK/build && \\\n  cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SAMPLES=OFF -DENABLE_OPENCL=OFF -Wno-dev .. && \\\n  make -j$(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  rm -rf /home/build/samples && \\\n  rm -rf /home/build/plugins && \\\n  make install\n\n# Post instalation of mfx headers and pkgconfigs\n# https://github.com/Intel-FFmpeg-Plugin/Intel_FFmpeg_plugins/wiki/Working-with-Open-Source-MediaSDK-and-iHD-driver-for-QSV-codecs#get-mediasdk\nRUN mkdir -p /usr/local/include/mfx && \\\n\t\tcp /home/build//usr/local/include/mfx/*.h  /usr/local/include/mfx/ && \\\n    mkdir -p /usr/local/lib/x86_64-linux-gnu/pkgconfig && \\\n\t\tcp -a /home/build//usr/local/lib/pkgconfig/*mfx*.pc /usr/local/lib/x86_64-linux-gnu/pkgconfig/\n\n# FFMPEG_DOT=OS;color=red,style=dashed\nARG FFMPEG_VER=7800cc6e82068c6dfb5af53817f03dfda794c568\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg.git\n\n# FFMPEG_LIBSVT_HEVC_ENC_DOT=FFMPEG,SVT_HEVC\n# FFMPEG_LIBSVT_AV1_ENC_DOT=FFMPEG,SVT_AV1\n# FFMPEG_LIBX264_ENC_DOT=FFMPEG,X264\n# FFMPEG_HEVC_QSV_ENC_DOT=FFMPEG,MEDIA_SDK,SVT_HEVC;color=red\n# FFMPEG_H264_QSV_ENC_DOT=FFMPEG,MEDIA_SDK,X264;color=red\n# FFMPEG_HEVC_VAAPI_ENC_DOT=FFMPEG,MEDIA_DRIVER,SVT_HEVC;color=red\n# FFMPEG_H264_VAAPI_ENC_DOT=FFMPEG,MEDIA_DRIVER,X264;color=red\n# FFMPEG_AAC_ENC_DOT=FFMPEG;color=red\nARG MERS_ENABLE_ENCODERS=libsvt_hevc,libsvt_av1,libx264,hevc_qsv,h264_qsv,henv_vaapi,h264_vaapi,aac\n\n# FFMPEG_H264_DEC_DOT=FFMPEG,X264\n# FFMPEG_HEVC_DEC_DOT=FFMPEG,SVT_HEVC\n# FFMPEG_HEVC_QSV_DEC_DOT=FFMPEG,MEDIA_SDK,SVT_HEVC;color=red\n# FFMPEG_HEVC_QSV_DEC_DOT=FFMPEG,MEDIA_SDK,X264;color=red\n# FFMPEG_LIBDAV1D_DEC_DOT=FFMPEG,DAV1D;color=red\n# FFMPEG_AAC_DEC_DOT=FFMPEG;color=red\n# FFMPEG_MP3_DEC_DOT=FFMPEG;color=red\nARG MERS_ENABLE_DECODERS=h264,hevc,hevc_qsv,h264_qsv,libdav1d,aac,mp3\n\n# FFMPEG_MP4_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_HLS_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_RTSP_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_DASH_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_MPEGTS_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_MP4_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_AV1_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_WEBM_MUXER_DOT=FFMPEG;color=red\nARG MERS_ENABLE_MUXERS=mp4,hls,rtsp,dash,mpegts,avi,webm\n\n# FFMPEG_RTSP_DEMUXER_DOT=FFMPEG;color=red\n# FFMPEG_DASH_DEMUXER_DOT=FFMPEG;color=red\n# FFMPEG_MPEGTS_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_AVI_DEMUXER_DOT=FFMPEG;color=red\n# FFMPEG_WEBM_DEMUXER_DOT=FFMPEG;color=red\nARG MERS_ENABLE_DEMUXERS=rtsp,dash,mpegts,avi,webm\n\n# FFMPEG_H264_PARSER_DOT=FFMPEG;color=red\nARG MERS_ENABLE_PARSERS=h264\n\nARG MERS_ENABLES=\"--enable-libsvthevc --enable-libsvtav1 --enable-nonfree --enable-gpl --enable-libx264 --enable-libdav1d \"\nARG MERS_OTHERS=\"--enable-ffprobe\"\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends libass-dev libsdl2-dev libssl-dev libvdpau-dev librtmp-dev libv4l-dev libvorbis-dev libvpx-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\n  git clone ${FFMPEG_REPO} && \\\n  cd FFmpeg && \\\n  git checkout ${FFMPEG_VER}\n\n# Patch FFmpeg source for SVT-HEVC\nRUN \\\n  cd FFmpeg && \\\n  patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch;\n\n# Patches for build issues, ffmpeg issues and/or CVE issues\nCOPY ffmpeg-patches/* ffmpeg-patches/\nRUN \\\n  cd FFmpeg && \\\n  for file in ../ffmpeg-patches/*.patch; do patch -p1 < $file; done\n\n# Compile FFmpeg (base on http://kojiclear.jf.intel.com/cgit/packages/not-ffmpeg/plain/configure + MeRS codecs and tools)\nRUN \\\n  cd FFmpeg && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/usr/local \\\n    --disable-static \\\n    --extra-ldflags='-ldl' \\\n    --enable-avcodec \\\n    --enable-avformat \\\n    --enable-avutil \\\n    --enable-avdevice \\\n    --enable-rdft \\\n    --enable-pixelutils \\\n    --enable-libvorbis \\\n    --enable-muxer=\"crc,image2,jpeg,ogg,md5,nut,webm,webm_chunk,webm_dash_manifest,rawvideo,ivf,null,wav,framecrc,rtp,rtsp,ass,webvtt,mjpeg,framehash,hash,${MERS_ENABLE_MUXERS}\" \\\n    --enable-bsf=\"mp3_header_decompress,vp9_superframe\" \\\n    --enable-demuxer=\"mjpeg,image2,webm_dash_manifest,ogg,matroska,mp3,pcm_s16le,rawvideo,wav,mov,ivf,rtp,rtsp,flv,ass,subviewer,subviewer1,webvtt,${MERS_ENABLE_DEMUXERS}\" \\\n    --enable-decoder=\"rawvideo,libvorbis,mjpeg,jpeg,opus,mp3,pcm_u8,pcm_s16le,pcm_s24le,pcm_s32le,pcm_f32le,pcm_s16be,pcm_s24be,pcm_mulaw,pcm_alaw,pcm_u24le,pcm_u32be,pcm_u32le,pgm,pgmyuv,libvpx_vp8,vp8_qsv,vp8,libvpx_vp9,vp9,tiff,bmp,wavpack,ass,saa,subviewer,subviewer1,webvtt,${MERS_ENABLE_DECODERS}\" \\\n    --enable-encoder=\"rawvideo,wrapped_avframe,libvorbis,opus,yuv4,tiff,bmp,libvpx_vp8,vp8_vaapi,libvpx_vp9,vp9_vaapi,mjpeg_vaapi,pcm_u8,pcm_s16le,pcm_s24le,pcm_s32le,pcm_f32le,pcm_s16be,pcm_s24be,pcm_mulaw,pcm_alaw,pcm_u24le,pcm_u32be,pcm_u32le,ass,ssa,webvtt,mjpeg_qsv,${MERS_ENABLE_ENCODERS}\" \\\n    --enable-hwaccel=\"vp8_vaapi,vp9_vaapi,mjpeg_vaapi\" \\\n    --enable-parser=\"opus,libvorbis,vp3,vp8,vp9,mjpeg,${MERS_ENABLE_PARSERS}\" \\\n    --enable-protocol=\"file,md5,pipe,rtp,tcp,http,https,httpproxy,ftp,librtmp,librtmpe,librtmps,librtmpt,librtmpte,rtmpe,rtmps,rtmpt,rtmpte,rtmpts\" \\\n    --enable-filter=\"aresample,asetpts,denoise_vaapi,deinterlace_vaapi,hwupload,hwdownload,pixdesctest,procamp_vaapi,scale,scale_vaapi,sharpness_vaapi,color,format,subtitles,select,setpts\" \\\n    --enable-libvpx \\\n    --enable-pic \\\n    --enable-shared \\\n    --enable-swscale \\\n    --enable-avfilter \\\n    --enable-vaapi \\\n    --enable-libmfx \\\n    --disable-xvmc \\\n    --disable-doc \\\n    --disable-htmlpages \\\n    --disable-podpages \\\n    --disable-txtpages \\\n    --enable-version3 \\\n    --disable-mmx \\\n    --disable-mmxext \\\n    --disable-programs \\\n    --enable-ffmpeg \\\n    --enable-ffplay \\\n    --enable-sdl2 \\\n    --enable-network \\\n    --enable-openssl \\\n    --enable-librtmp \\\n    --enable-libv4l2 \\\n    --enable-indev=v4l2 \\\n    --enable-libass \\\n    ${MERS_ENABLES} \\\n    ${MERS_OTHERS} && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\n# Build Intel Graphic Compiler\nARG IGC_VER=igc-1.0.5964\nARG LLVM_SPIRV_VER=v10.0.0\nARG LLVM_PROJECT_VER=llvmorg-10.0.0\nARG OPENCL_CLANG_VER=v10.0.0\nARG SPIRV_LLVM_TRANSLATOR_VER=v10.0.0\nARG VC_INTRINSICS_VER=master\nARG LLVM_PATCHES_VER=master\n\nARG IGC_REPO=https://github.com/intel/intel-graphics-compiler.git\nARG LLVM_SPIRV_REPO=https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git\nARG LLVM_PROJECT_REPO=https://github.com/llvm/llvm-project.git\nARG OPENCL_CLANG_REPO=https://github.com/intel/opencl-clang.git\nARG SPIRV_LLVM_TRANSLATOR_REPO=https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git\nARG VC_INTRINSICS_REPO=https://github.com/intel/vc-intrinsics.git\nARG LLVM_PATCHES_REPO=https://github.com/intel/llvm-patches.git\n\nRUN \\\n    apt-get -y update && apt-get --no-install-recommends install -y \\\n    ccache flex bison flex bison libz-dev patch git && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\n    mkdir -p /home/intel-compute-runtime/workspace/build_igc\n\nRUN cd /home/intel-compute-runtime/workspace; \\\n    git clone -b ${IGC_VER} ${IGC_REPO} igc; \\\n    git clone -b ${LLVM_SPIRV_VER} ${LLVM_SPIRV_REPO} llvm-spirv; \\\n    git clone -b ${LLVM_PROJECT_VER} ${LLVM_PROJECT_REPO} llvm-project; \\\n    git clone -b ${OPENCL_CLANG_VER} ${OPENCL_CLANG_REPO} llvm-project/llvm/projects/opencl-clang; \\\n    git clone -b ${SPIRV_LLVM_TRANSLATOR_VER} ${SPIRV_LLVM_TRANSLATOR_REPO} llvm-project/llvm/projects/llvm-spirv; \\\n    git clone -b ${VC_INTRINSICS_VER} ${VC_INTRINSICS_REPO} vc-intrinsics; \\\n    git clone -b ${LLVM_PATCHES_VER} ${LLVM_PATCHES_REPO} llvm_patches;\n\nRUN cd /home/intel-compute-runtime/workspace/build_igc && \\\n    cmake ../igc/IGC && \\\n    make -j $(nproc) && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# LEVEL_ZERO_DOT=OS;color=red\nARG LEVEL_ZERO_VER=1.0.26\nARG LEVEL_ZERO_REPO=https://github.com/oneapi-src/level-zero/archive/v${LEVEL_ZERO_VER}.tar.gz\n\nRUN \\\n  apt-get update && apt-get install -y -q --no-install-recommends \\\n  ccache && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\n  wget -O - ${LEVEL_ZERO_REPO} | tar xz && \\\n  cd level-zero-${LEVEL_ZERO_VER} && mkdir build && cd build && \\\n  cmake .. && \\\n  cmake --build . --config Release && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\n# INTEL_NEO_DOT=GMMLIB,LEVEL_ZERO;color=red\nARG OCL_VER=20.52.18783\nARG OCL_REPO=https://github.com/intel/compute-runtime/archive/${OCL_VER}.tar.gz\n\n\nRUN \\\n    apt-get -y update && apt-get --no-install-recommends install -y \\\n    cmake make g++ pkg-config && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\n    wget -O - ${OCL_REPO} | tar xz && \\\n    cd compute-runtime-${OCL_VER} && mkdir build && cd build && \\\n    cmake ../ \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DSKIP_UNIT_TESTS=1 \\\n    -DSKIP_NEO_UNIT_TESTS=1 \\\n    -DBUILD_WITH_L0=1 && \\\n    make -j$(nproc) && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# GST_DOT=OS,X264;color=red,style=dashed\nARG GST_VER=1.18.2\nARG GST_REPO=https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-${GST_VER}.tar.xz\nRUN apt-get update && apt-get install -y -q --no-install-recommends libglib2.0-dev gobject-introspection libgirepository1.0-dev libpango-1.0-0 libpangocairo-1.0-0 autopoint libcurl3-gnutls && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  wget -O - ${GST_REPO} | tar xJ && \\\n  cd gstreamer-${GST_VER} &&  \\\n  meson build --libdir=lib/x86_64-linux-gnu --libexecdir=lib/x86_64-linux-gnu \\\n  --prefix=/usr/local --buildtype=plain \\\n  -Dbenchmarks=disabled \\\n  -Dexamples=disabled \\\n  -Dtests=disabled \\\n  -Dgtk_doc=disabled  && \\\n\tcd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install\n\n# GST_PLUGIN_ORC_DOT=GST\nARG GST_ORC_VER=0.4.32\nARG GST_PLUGIN_ORC_REPO=https://gstreamer.freedesktop.org/src/orc/orc-${GST_ORC_VER}.tar.xz\nRUN apt-get update && apt-get install -y -q --no-install-recommends gtk-doc-tools && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  wget -O - ${GST_PLUGIN_ORC_REPO} | tar xJ && \\\n  cd orc-${GST_ORC_VER} &&  \\\n  meson build --libdir=lib/x86_64-linux-gnu --libexecdir=lib/x86_64-linux-gnu \\\n  --prefix=/usr/local --buildtype=plain \\\n  -Dbenchmarks=disabled \\\n  -Dexamples=disabled \\\n  -Dtests=disabled \\\n  -Dgtk_doc=disabled  && \\\n\tcd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install\n\n# GST_PLUGIN_BASE_DOT=GST\nARG GST_PLUGIN_BASE_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-${GST_VER}.tar.xz\nRUN apt-get update && apt-get install -y -q --no-install-recommends libxv-dev libtheora-dev libglib2.0-dev libasound2-dev libgl1-mesa-dev libpango1.0-dev libxrandr-dev libegl1-mesa-dev autopoint bison flex libudev-dev && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  wget -O - ${GST_PLUGIN_BASE_REPO} | tar xJ && \\\n  cd gst-plugins-base-${GST_VER} &&  \\\n  meson build --libdir=lib/x86_64-linux-gnu --libexecdir=lib/x86_64-linux-gnu \\\n  --prefix=/usr/local --buildtype=plain \\\n  -Dbenchmarks=disabled \\\n  -Dexamples=disabled \\\n  -Dtests=disabled \\\n  -Dgtk_doc=disabled -Dlibvisual=disabled -Dcdparanoia=disabled && \\\n\tcd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install\n\n\n# GST_PLUGIN_GOOD_DOT=GST\nARG GST_PLUGIN_GOOD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-${GST_VER}.tar.xz\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends libcurl3-gnutls && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  wget -O - ${GST_PLUGIN_GOOD_REPO} | tar xJ && \\\n  cd gst-plugins-good-${GST_VER} &&  \\\n  meson build --libdir=lib/x86_64-linux-gnu --libexecdir=lib/x86_64-linux-gnu \\\n  --prefix=/usr/local --buildtype=plain \\\n  -Dbenchmarks=disabled \\\n  -Dexamples=disabled \\\n  -Dtests=disabled \\\n  -Dgtk_doc=disabled  && \\\n\tcd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install\n\n# GST_PLUGIN_BAD_DOT=GST\n# GST_MSDK_DOT=GST_PLUGIN_BAD;color=blue\n# GST_MSDKVPP_DOT=GST_MSDK;color=blue\n# GST_MSDKVP9DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKVC1DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKVP8ENC_DOT=GST_MSDK;color=blue\n# GST_MSDKVP8DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKMPEG2ENC_DOT=GST_MSDK;color=blue\n# GST_MSDKMPEG2DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKMJPEGENC_DOT=GST_MSDK;color=blue\n# GST_MSDKMJPEGDEC_DOT=GST_MSDK;color=blue\n# GST_MSDKH265ENC_DOT=GST_MSDK;color=blue\n# GST_MSDKH265DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKH264ENC_DOT=GST_MSDK;color=blue\n# GST_MSDKH264DEC_DOT=GST_MSDK;color=blue\nARG GST_PLUGIN_BAD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-bad/gst-plugins-bad-${GST_VER}.tar.xz\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends libssl-dev librtmp-dev && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  wget -O - ${GST_PLUGIN_BAD_REPO} | tar xJ && \\\n  cd gst-plugins-bad-${GST_VER} &&  \\\n  meson build --libdir=lib/x86_64-linux-gnu --libexecdir=lib/x86_64-linux-gnu \\\n  --prefix=/usr/local --buildtype=plain \\\n  -Dbenchmarks=disabled \\\n  -Dexamples=disabled \\\n  -Dtests=disabled \\\n  -Dgtk_doc=disabled  && \\\n\tcd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install\n\n# GST_PLUGIN_UGLY_DOT=GST\nARG GST_PLUGIN_UGLY_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-ugly/gst-plugins-ugly-${GST_VER}.tar.xz\n\nRUN \\\n  wget -O - ${GST_PLUGIN_UGLY_REPO} | tar xJ && \\\n  cd gst-plugins-ugly-${GST_VER} &&  \\\n  meson build --libdir=lib/x86_64-linux-gnu --libexecdir=lib/x86_64-linux-gnu \\\n  --prefix=/usr/local --buildtype=plain \\\n  -Dbenchmarks=disabled \\\n  -Dexamples=disabled \\\n  -Dtests=disabled \\\n  -Dgtk_doc=disabled  && \\\n\tcd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install\n\n# GST_PLUGIN_LIBAV_DOT=GST,FFMPEG\nARG GST_PLUGIN_LIBAV_REPO=https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${GST_VER}.tar.xz\n\nRUN \\\n  wget -O - ${GST_PLUGIN_LIBAV_REPO} | tar xJ && \\\n  cd gst-libav-${GST_VER} &&  \\\n  meson build --libdir=lib/x86_64-linux-gnu --libexecdir=lib/x86_64-linux-gnu \\\n  --prefix=/usr/local --buildtype=plain \\\n  -Dbenchmarks=disabled \\\n  -Dexamples=disabled \\\n  -Dtests=disabled \\\n  -Dgtk_doc=disabled  && \\\n\tcd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install\n\n# GST_PLUGIN_SVT_HEVC_DOT=SVT_HEVC,GST\n# GST_PLUGIN_SVT_AV1_DOT=SVT_AV1,GST\n\nRUN \\\n  cd SVT-HEVC/gstreamer-plugin && \\\n  meson build -Dprefix=/usr/local --buildtype=plain && \\\n  cd build && \\\n\tninja install && \\\n  DESTDIR=/home/build ninja install\n\nRUN \\\n  cd SVT-AV1/gstreamer-plugin && \\\n  meson build -Dprefix=/usr/local --buildtype=plain && \\\n  cd build && \\\n\tninja install && \\\n  DESTDIR=/home/build ninja install\n\n# GST_PLUGIN_VAAPI_DOT=GST,LIBVA;color=red\n# GST_VAAPIJPEGDEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIMPEG2DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH264DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIVC1DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIVP8DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIVP9DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH265DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIPOSTPROC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIDECODEBIN_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPISINK_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIMPEG2ENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH265ENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIVP8ENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIJPEGENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH264ENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH264FEIENC_DOT=GST_PLUGIN_VAAPI;color=red\nARG GST_PLUGIN_VAAPI_REPO=https://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-${GST_VER}.tar.xz\nARG GST_PLUGIN_VAAPI_REPO_GIT=https://gitlab.freedesktop.org/gstreamer/gstreamer-vaapi.git\n\nRUN \\\n  wget -O - ${GST_PLUGIN_VAAPI_REPO} | tar xJ && \\\n  cd gstreamer-vaapi-${GST_VER} &&  \\\n  meson build --libdir=lib/x86_64-linux-gnu --libexecdir=lib/x86_64-linux-gnu \\\n  --prefix=/usr/local --buildtype=plain \\\n  -Dbenchmarks=disabled \\\n  -Dexamples=disabled \\\n  -Dtests=disabled \\\n  -Dgtk_doc=disabled  && \\\n\tcd build && \\\n  ninja install && \\\n  DESTDIR=/home/build ninja install\n\n# OPENCV_DOT=OS\nARG OPENCV_VER=4.5.1\nARG OPENCV_REPO=https://github.com/opencv/opencv/archive/${OPENCV_VER}.tar.gz\n\nRUN \\\n  wget ${OPENCV_REPO} && \\\n  tar -zxvf ${OPENCV_VER}.tar.gz && rm ${OPENCV_VER}.tar.gz\n\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends \\\n    pkg-config \\\n    # Parallelism and linear algebra libraries: \\\n    libeigen3-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\n  cd opencv-${OPENCV_VER} && \\\n  mkdir build && \\\n  cd build && \\\n  cmake -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local \\\n        -D BUILD_EXAMPLES=OFF \\\n        -D BUILD_PERF_TESTS=OFF \\\n        -D BUILD_DOCS=OFF \\\n        -D BUILD_TESTS=OFF \\\n        -D WITH_GSTREAMER=ON \\\n        -D WITH_OPENEXR=OFF \\\n        -D WITH_JPEG=OFF \\\n        -D BUILD_JPEG=OFF \\\n        -D WITH_OPENJPEG=OFF \\\n        -D WITH_JASPER=OFF \\\n        -D BUILD_JASPER=OFF .. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\n# DLDT_DOT=OS,INTEL_NEO\nARG DLDT_VER=2021.2\nARG DLDT_REPO=https://github.com/opencv/dldt.git\n\nARG CLDNN__OUTPUT_BIN_DIR=/home/dldt/bin/intel64/Release\nARG CLDNN__OUTPUT_LIB_DIR=/home/dldt/bin/intel64/Release/lib\n\nRUN \\\n  apt-get update && apt-get install -y -q --no-install-recommends \\\n  cmake gcc g++ git libboost-all-dev libgtk2.0-dev libgtk-3-dev libtool libusb-1.0-0-dev make python python-yaml xz-utils && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  git clone -b ${DLDT_VER} ${DLDT_REPO} && \\\n  cd dldt && \\\n  git submodule init && \\\n  git submodule update --recursive && \\\n  cd inference-engine && \\\n  mkdir build && \\\n  cd build && \\\n  cmake -DCMAKE_INSTALL_PREFIX=/opt/intel/dldt \\\n        -DTREAT_WARNING_AS_ERROR=OFF \\\n        -DENABLE_CPPLINT=OFF \\\n        -DENABLE_SSE42=ON \\\n        -DENABLE_AVX2=ON \\\n        -DENABLE_AVX512F=ON \\\n        -DENABLE_MKL_DNN=ON \\\n        -DGEMM=JIT \\\n        -DTHREADING=TBB \\\n        -DENABLE_GNA=OFF \\\n        -DENABLE_CLDNN=ON \\\n        -DENABLE_MYRIAD=OFF \\\n        -DENABLE_VPU=OFF \\\n        -DNGRAPH_PYTHON_BUILD_ENABLE=OFF \\\n        -DENABLE_TESTS=OFF \\\n        -DENABLE_SPEECH_DEMO=OFF \\\n        -DENABLE_SAMPLES=OFF \\\n        -DENABLE_PROFILING_ITT=OFF \\\n        -DBUILD_TESTS=OFF \\\n        -DNGRAPH_UNIT_TEST_ENABLE=OFF \\\n        -DNGRAPH_TEST_UTIL_ENABLE=OFF \\\n        -DENABLE_OPENCV=OFF ../.. && \\\n  make -j $(nproc) && \\\n  make -C ngraph install && \\\n  make -C ngraph DESTDIR=/home/build && \\\n  rm -rf ../bin/intel64/Release/lib/libgtest* && \\\n  rm -rf ../bin/intel64/Release/lib/libgmock* && \\\n  rm -rf ../bin/intel64/Release/lib/libmock* && \\\n  rm -rf ../bin/intel64/Release/lib/libtest*\n\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\n\nRUN \\\n  mkdir -p /opt/intel/dldt/inference-engine/include && \\\n  cp -r dldt/inference-engine/include/* /opt/intel/dldt/inference-engine/include && \\\n  mkdir -p /${libdir} && \\\n  cp -r $CLDNN__OUTPUT_LIB_DIR/*  ${libdir} && \\\n  mkdir -p /opt/intel/dldt/inference-engine/src && \\\n  cp -r dldt/inference-engine/src/* /opt/intel/dldt/inference-engine/src/ && \\\n  mkdir -p /opt/intel/dldt/inference-engine/share && \\\n  cp -r dldt/inference-engine/build/share/* /opt/intel/dldt/inference-engine/share/ && \\\n  mkdir -p    /opt/intel/dldt/inference-engine/external/ && \\\n  cp -r dldt/inference-engine/temp/* /opt/intel/dldt/inference-engine/external\n\nRUN \\\n  mkdir -p build//opt/intel/dldt/inference-engine/include && \\\n  cp -r dldt/inference-engine/include/* build//opt/intel/dldt/inference-engine/include && \\\n  mkdir -p build/${libdir} && \\\n  cp -r $CLDNN__OUTPUT_LIB_DIR/* build${libdir} && \\\n  mkdir -p build//opt/intel/dldt/inference-engine/src && \\\n  cp -r dldt/inference-engine/src/* build//opt/intel/dldt/inference-engine/src/ && \\\n  mkdir -p build//opt/intel/dldt/inference-engine/share && \\\n  cp -r dldt/inference-engine/build/share/* build//opt/intel/dldt/inference-engine/share/ && \\\n  mkdir -p build//opt/intel/dldt/inference-engine/external/ && \\\n  cp -r dldt/inference-engine/temp/* build//opt/intel/dldt/inference-engine/external\n\nRUN \\\n  for p in /usr/local /home/build//usr/local /opt/intel/dldt/inference-engine /home/build//opt/intel/dldt/inference-engine; do \\\n    pkgconfiglibdir=\"$p/lib/x86_64-linux-gnu\" && \\\n    mkdir -p \"${pkgconfiglibdir}/pkgconfig\" && \\\n    pc=\"${pkgconfiglibdir}/pkgconfig/dldt.pc\" && \\\n    echo \"prefix=/opt\" > \"$pc\" && \\\n    echo \"libdir=${libdir}\" >> \"$pc\" && \\\n    echo \"includedir=/opt/intel/dldt/inference-engine/include\" >> \"$pc\" && \\\n    echo \"\" >> \"$pc\" && \\\n    echo \"Name: DLDT\" >> \"$pc\" && \\\n    echo \"Description: Intel Deep Learning Deployment Toolkit\" >> \"$pc\" && \\\n    echo \"Version: 5.0\" >> \"$pc\" && \\\n    echo \"\" >> \"$pc\" && \\\n    echo \"Libs: -L\\${libdir} -linference_engine -linference_engine_c_wrapper\" >> \"$pc\" && \\\n    echo \"Cflags: -I\\${includedir}\" >> \"$pc\"; \\\n  done;\n\n# GST_PLUGIN_VIDEO_ANALYTICS_DOT=GST,OPENCV,DLDT\n# GST_GVAINFERENCE_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVADETECT_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVACLASSIFY_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAIDENTIFY_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAMETACONVERT_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAWATERMARK_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAFPSCOUNTER_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAMETAPUBLISH_DOT=GST_PLUGIN_VIDEO_ANALYTICS\nARG VA_GSTREAMER_PLUGINS_VER=1.3\nARG VA_GSTREAMER_PLUGIN_DEST_NAME=gst-video-analytics\nARG VA_GSTREAMER_PLUGINS_REPO=https://github.com/opencv/${VA_GSTREAMER_PLUGIN_DEST_NAME}/archive/v${VA_GSTREAMER_PLUGINS_VER}.tar.gz\n\nARG ENABLE_PAHO_INSTALLATION=OFF\nARG ENABLE_RDKAFKA_INSTALLATION=OFF\n\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/lib/intel64:/opt/intel/dldt/inference-engine/external/tbb/lib\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV OpenCV_DIR=/opt/intel/dldt/inference-engine/external/opencv/cmake\n\nRUN apt-get install -y -q --no-install-recommends gtk-doc-tools uuid-dev python-gi-dev python3-dev libtool-bin && rm -rf /var/lib/apt/lists/*;\n\nARG CMAKE_PREFIX_PATH=\"/home/dldt/inference-engine/build/ngraph/:${CMAKE_PREFIX_PATH}\"\n\nRUN \\\n  wget -O ${VA_GSTREAMER_PLUGIN_DEST_NAME}.tar.gz ${VA_GSTREAMER_PLUGINS_REPO} && \\\n  mkdir ${VA_GSTREAMER_PLUGIN_DEST_NAME} && \\\n  tar zxf ${VA_GSTREAMER_PLUGIN_DEST_NAME}.tar.gz -C ${VA_GSTREAMER_PLUGIN_DEST_NAME} --strip-components 1 && \\\n\tcd ${VA_GSTREAMER_PLUGIN_DEST_NAME} && \\\n  mkdir build && \\\n  cd build && \\\n  cmake \\\n    -DVERSION_PATCH=$(echo \"$(git rev-list --count --first-parent HEAD)\") \\\n    -DGIT_INFO=$(echo \"git_$(git rev-parse --short HEAD)\") \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DDISABLE_SAMPLES=ON \\\n    -DDISABLE_VAAPI=ON  \\\n    -DENABLE_PAHO_INSTALLATION=${ENABLE_PAHO_INSTALLATION} \\\n    -DENABLE_RDKAFKA_INSTALLATION=${ENABLE_RDKAFKA_INSTALLATION} \\\n    -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local .. && \\\n  make -j $(nproc) && rm ${VA_GSTREAMER_PLUGIN_DEST_NAME}.tar.gz\n\nRUN \\\n  mkdir -p /home/build//usr/local/lib/x86_64-linux-gnu/gstreamer-1.0 && \\\n  cp -r ${VA_GSTREAMER_PLUGIN_DEST_NAME}/build/intel64/Release/lib/* /home/build//usr/local/lib/x86_64-linux-gnu/gstreamer-1.0\nRUN \\\n  mkdir -p /usr/local/lib/x86_64-linux-gnu/gstreamer-1.0 && \\\n  cp -r ${VA_GSTREAMER_PLUGIN_DEST_NAME}/build/intel64/Release/lib/* /usr/local/lib/x86_64-linux-gnu/gstreamer-1.0\n\n# Clean up after build\nRUN rm -rf /home/build/usr/include && \\\n    rm -rf /home/build/usr/share/doc && \\\n    rm -rf /home/build/usr/share/gtk-doc && \\\n    rm -rf /home/build/usr/share/man && \\\n    rm -rf /home/build/usr/local/include && \\\n    rm -rf /home/build/usr/local/share/doc && \\\n    rm -rf /home/build/usr/local/share/gtk-doc && \\\n    rm -rf /home/build/usr/local/share/man && \\\n    find /home/build -name \"*.a\" -exec rm -f {} \\;\n\n\nFROM ubuntu:20.04\nLABEL Description=\"The Intel Media Reference Stack (MeRS) on ubuntu (20.04) OS\"\nLABEL Vendor=\"Intel Corporation\"\nLABEL maintainer=\"otc-swstacks@intel.com\"\nLABEL internal_hash=55b8cd7\nLABEL internal_tag=v0.4.0-rc1\nENV INTERNAL_HASH=55b8cd7\nENV INTERNAL_TAG=v0.4.0-rc1\n\nWORKDIR /home\n\nENV LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:/usr/lib/x86_64-linux-gnu:/usr/lib\nENV LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu\nENV PKG_CONFIG_PATH=/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pgkconfig:/usr/lib/pkgconfig\nENV XDG_RUNTIME_DIR=/home/mers-user\nARG DEBIAN_FRONTEND=noninteractive\nARG TZ='GST-1'\n\nCOPY --from=build /home/build /\nRUN \\\n  apt-get update && \\\n  apt-get install -y -q --no-install-recommends \\\n  libsdl2-2.0-0 libasound2 libvdpau1 libass9 libssl1.1 libpciaccess0 \\\n  libsndio7.0 libv4l-0 libvorbis0a libvorbisenc2 libvpx6  libglib2.0 libpango-1.0-0 libpangocairo-1.0-0 gobject-introspection libcurl3-gnutls libdrm-intel1 libudev1 libx11-xcb1 libgl1-mesa-glx libxrandr2 libglib2.0-0 libxv1 libgl1-mesa-glx libegl1-mesa libpango-1.0-0 libtheora0 libasound2 libgtk2.0 libdrm2 libxv1 libpugixml1v5 uuid python3-dev libdrm2 \\\n  # Parallelism and linear algebra libraries: \\\n  libeigen3-dev \\\n  ocl-icd-libopencl1  && \\\n  apt clean && \\\n  rm -rf /var/lib/apt/lists/*\nENV LIBVA_DRIVERS_PATH=/usr/local/lib/x86_64-linux-gnu/dri\nENV LIBVA_DRIVER_NAME=iHD\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib/x86_64-linux-gnu/gstreamer-1.0\nENV GST_PLUGIN_PATH=/usr/local/lib/x86_64-linux-gnu/gstreamer-1.0\nENV GST_PLUGIN_SCANNER=/usr/local/lib/x86_64-linux-gnu/gstreamer-1.0/gst-plugin-scanner\nENV GST_VAAPI_ALL_DRIVERS=1\nENV DISPLAY=:0.0\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/lib/intel64:/opt/intel/dldt/inference-engine/external/tbb/lib\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV OpenCV_DIR=/opt/intel/dldt/inference-engine/external/opencv/cmake\n\nRUN useradd --create-home --home /home/mers-user --shell /bin/bash mers-user --gid video\nARG VIDEO_GID=109\nRUN groupadd -g ${VIDEO_GID} render && usermod -a -G render mers-user\nWORKDIR /home/mers-user\nUSER mers-user\n\nCOPY scripts/entrypoint.sh scripts/docker-healthcheck /usr/bin/\nHEALTHCHECK --interval=15s CMD [\"docker-healthcheck\"]\nENTRYPOINT [\"entrypoint.sh\"]\n\nCOPY tpp/ /home/mers-user/licenses/\n\nCMD [\"start\"]\n\n\n"
}