{
  "startTime": 1674254595531,
  "endTime": 1674254598294,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 2,
        "columnEnd": 75
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 326,
        "lineEnd": 371,
        "columnStart": 2,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 2,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 3,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 453,
        "lineEnd": 453,
        "columnStart": 2,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM clearlinux:latest AS build\nWORKDIR /home\n\n# build tools\nRUN swupd bundle-add c-basic dev-utils devpkg-libusb devpkg-openssl devpkg-gstreamer \\\n          devpkg-gst-plugins-base git kde-frameworks5-dev make os-core-update patch \\\n          sysadmin-basic yasm wget\n\n# versions\n# DAV1D_DOT=OS;color=red\nARG LIBDAV1D_VERSION=0.5.2\nARG LIBDAV1D_URL=\"https://code.videolan.org/videolan/dav1d/-/archive/$LIBDAV1D_VERSION/dav1d-$LIBDAV1D_VERSION.tar.gz\"\nARG LIBDAV1D_MD5SUM=cb8557037a46d9a580ba749033643741\n\n# X264_DOT=OS\nARG X264_VER=1771b556ee45207f8711744ccbd5d42a3949b14c\nARG X264_REPO=https://code.videolan.org/videolan/x264.git\n\n# SVT_HEVC_DOT=OS\nARG SVT_HEVC_VER=v1.4.3\nARG SVT_HEVC_REPO=https://github.com/OpenVisualCloud/SVT-HEVC\n\n# SVT_AV1_DOT=OS\nARG SVT_AV1_VER=v0.8.0\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\n\n# GMMLIB_DOT=OS;color=red\nARG GMMLIB_VER=intel-gmmlib-19.4.1\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/${GMMLIB_VER}.tar.gz\nARG GMMLIB_MD5SUM=e26eb324fc4082fd73d90f1721154af2\n\n# LIBVA_DOT=OS;color=red\nARG LIBVA_VER=2.6.0\nARG LIBVA_REPO=https://github.com/intel/libva/archive/${LIBVA_VER}.tar.gz\nARG LIBVA_MD5SUM=3b24c4ea8c85ab08e2d526d39af9a249\n\n# LIBVA_UTILS_DOT=OS;color=red\nARG LIBVA_UTILS_VER=2.6.0\nARG LIBVA_UTILS_REPO=https://github.com/intel/libva-utils/archive/${LIBVA_UTILS_VER}.tar.gz\nARG LIBVA_UTILS_MD5SUM=d28e285c53a3d813e03dd37fd56a7200\n\n# MEDIA_DRIVER_DOT=GMMLIB,LIBVA;color=red\nARG MEDIA_DRIVER_VER=intel-media-19.4.0r\nARG MEDIA_DRIVER_REPO=https://github.com/intel/media-driver/archive/${MEDIA_DRIVER_VER}.tar.gz\nARG MEDIA_DRIVER_MD5SUM=4bb729e2dd2b74e52168d3d8f9f816d8\n\n# MEDIA_SDK_DOT=LIBVA;color=red\nARG MSDK_VER=intel-mediasdk-19.4.0\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VER}.tar.gz\nARG MSDK_MD5SUM=5cc9be55395feea95174800a6c37327d\n\n# FFMPEG_DOT=OS;color=red,style=dashed\nARG FFMPEG_VER=n4.2\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_MA_RELEASE_VER=0.4\nARG FFMPEG_MA_RELEASE_URL=https://github.com/VCDP/FFmpeg-patch/archive/v${FFMPEG_MA_RELEASE_VER}.tar.gz\nARG FFMPEG_MA_PATH=/home/FFmpeg-patch-${FFMPEG_MA_RELEASE_VER}\nARG FFMPEG_MD5SUM=199e664666c6cde776f51a4312521489\n\n# FFMPEG_LIBSVT_HEVC_ENC_DOT=FFMPEG,SVT_HEVC\n# FFMPEG_LIBSVT_AV1_ENC_DOT=FFMPEG,SVT_AV1\n# FFMPEG_LIBX264_ENC_DOT=FFMPEG,X264\n# FFMPEG_HEVC_QSV_ENC_DOT=FFMPEG,MEDIA_SDK,SVT_HEVC;color=red\n# FFMPEG_H264_QSV_ENC_DOT=FFMPEG,MEDIA_SDK,X264;color=red\n# FFMPEG_HEVC_VAAPI_ENC_DOT=FFMPEG,MEDIA_DRIVER,SVT_HEVC;color=red\n# FFMPEG_H264_VAAPI_ENC_DOT=FFMPEG,MEDIA_DRIVER,X264;color=red\n# FFMPEG_AAC_ENC_DOT=FFMPEG;color=red\nARG MERS_ENABLE_ENCODERS=libsvt_hevc,libsvt_av1,libx264,hevc_qsv,h264_qsv,henv_vaapi,h264_vaapi,aac\n\n# FFMPEG_H264_DEC_DOT=FFMPEG,X264\n# FFMPEG_HEVC_DEC_DOT=FFMPEG,SVT_HEVC\n# FFMPEG_HEVC_QSV_DEC_DOT=FFMPEG,MEDIA_SDK,SVT_HEVC;color=red\n# FFMPEG_HEVC_QSV_DEC_DOT=FFMPEG,MEDIA_SDK,X264;color=red\n# FFMPEG_LIBDAV1D_DEC_DOT=FFMPEG,DAV1D;color=red\n# FFMPEG_AAC_DEC_DOT=FFMPEG;color=red\n# FFMPEG_MP3_DEC_DOT=FFMPEG;color=red\nARG MERS_ENABLE_DECODERS=h264,hevc,hevc_qsv,h264_qsv,libdav1d,aac,mp3\n\n# FFMPEG_MP4_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_HLS_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_RTSP_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_DASH_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_MPEGTS_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_MP4_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_AV1_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_WEBM_MUXER_DOT=FFMPEG;color=red\nARG MERS_ENABLE_MUXERS=mp4,hls,rtsp,dash,mpegts,avi,webm\n\n# FFMPEG_RTSP_DEMUXER_DOT=FFMPEG;color=red\n# FFMPEG_DASH_DEMUXER_DOT=FFMPEG;color=red\n# FFMPEG_MPEGTS_MUXER_DOT=FFMPEG;color=red\n# FFMPEG_AVI_DEMUXER_DOT=FFMPEG;color=red\n# FFMPEG_WEBM_DEMUXER_DOT=FFMPEG;color=red\nARG MERS_ENABLE_DEMUXERS=rtsp,dash,mpegts,avi,webm\n\n# FFMPEG_H264_PARSER_DOT=FFMPEG;color=red\nARG MERS_ENABLE_PARSERS=h264\n\nARG MERS_ENABLES=\"--enable-libsvthevc --enable-libsvtav1 --enable-nonfree --enable-gpl --enable-libx264 --enable-libdav1d \"\nARG MERS_OTHERS=\"--enable-ffprobe\"\n\n# GST_DOT=OS,X264;color=red,style=dashed\nARG GST_VER=1.16.0\nARG GST_REPO=https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-${GST_VER}.tar.xz\n\n# GST_PLUGIN_BASE_DOT=GST\n# GST_PLUGIN_GOOD_DOT=GST\n# GST_PLUGIN_BAD_DOT=GST\n# GST_PLUGIN_UGLY_DOT=GST\n# GST_MSDK_DOT=GST_PLUGIN_BAD;color=blue\n# GST_MSDKVPP_DOT=GST_MSDK;color=blue\n# GST_MSDKVP9DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKVC1DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKVP8ENC_DOT=GST_MSDK;color=blue\n# GST_MSDKVP8DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKMPEG2ENC_DOT=GST_MSDK;color=blue\n# GST_MSDKMPEG2DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKMJPEGENC_DOT=GST_MSDK;color=blue\n# GST_MSDKMJPEGDEC_DOT=GST_MSDK;color=blue\n# GST_MSDKH265ENC_DOT=GST_MSDK;color=blue\n# GST_MSDKH265DEC_DOT=GST_MSDK;color=blue\n# GST_MSDKH264ENC_DOT=GST_MSDK;color=blue\n# GST_MSDKH264DEC_DOT=GST_MSDK;color=blue\n\nARG GST_PLUGIN_BASE_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-${GST_VER}.tar.xz\nARG GST_PLUGIN_GOOD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-${GST_VER}.tar.xz\nARG GST_PLUGIN_BAD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-bad/gst-plugins-bad-${GST_VER}.tar.xz\nARG GST_PLUGIN_UGLY_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-ugly/gst-plugins-ugly-${GST_VER}.tar.xz\n\n# GST_PLUGIN_LIBAV_DOT=GST,FFMPEG\nARG GST_PLUGIN_LIBAV_REPO=https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${GST_VER}.tar.xz\n\n# GST_PLUGIN_SVT_HEVC_DOT=SVT_HEVC,GST\n# GST_PLUGIN_SVT_AV1_DOT=SVT_AV1,GST\n\n# OPENCV_DOT=OS\nARG OPENCV_VER=4.1.2\nARG OPENCV_REPO=https://github.com/opencv/opencv/archive/${OPENCV_VER}.tar.gz\n\n# DLDT_DOT=OS\nARG DLDT_VER=2019_R3.1\nARG DLDT_REPO=https://github.com/opencv/dldt.git\n\nARG MKL_VERSION=mklml_lnx_2019.0.5.20190502\nARG MKLDNN=v1.0.1\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\n\n# GST_PLUGIN_VIDEO_ANALYTICS_DOT=GST,OPENCV,DLDT\n# GST_GVAINFERENCE_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVADETECT_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVACLASSIFY_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAIDENTIFY_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAMETACONVERT_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAWATERMARK_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAFPSCOUNTER_DOT=GST_PLUGIN_VIDEO_ANALYTICS\n# GST_GVAMETAPUBLISH_DOT=GST_PLUGIN_VIDEO_ANALYTICS\nARG VA_GSTREAMER_PLUGINS_VER=0.6.1\nARG VA_GSTREAMER_PLUGINS_REPO=https://github.com/opencv/gst-video-analytics/archive/v${VA_GSTREAMER_PLUGINS_VER}.tar.gz\nARG ENABLE_PAHO_INSTALLATION=OFF\nARG ENABLE_RDKAFKA_INSTALLATION=OFF\n\n# GST_PLUGIN_VAAPI_DOT=GST,LIBVA;color=red\n# GST_VAAPIJPEGDEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIMPEG2DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH264DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIVC1DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIVP8DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIVP9DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH265DEC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIPOSTPROC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIDECODEBIN_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPISINK_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIMPEG2ENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH265ENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIVP8ENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIJPEGENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH264ENC_DOT=GST_PLUGIN_VAAPI;color=red\n# GST_VAAPIH264FEIENC_DOT=GST_PLUGIN_VAAPI;color=red\nARG GST_PLUGIN_VAAPI_REPO=https://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-${GST_VER}.tar.xz\nARG GST_PLUGIN_VAAPI_REPO_GIT=https://gitlab.freedesktop.org/gstreamer/gstreamer-vaapi.git\n\n# enviroment variables\nENV GCC_IGNORE_WERROR=1\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64:/usr/local/lib64/gstreamer-1.0:/opt/intel/dldt/inference-engine/lib/intel64:/opt/intel/dldt/inference-engine/external/omp/lib\nENV PKG_CONFIG_PATH=/usr/lib64/pkgconfig:/usr/local/lib64/pkgconfig\n\nRUN \\\n  wget -O dav1d.tar.gz \"$LIBDAV1D_URL\" && \\\n  echo \"${LIBDAV1D_MD5SUM}  dav1d.tar.gz\" | md5sum -c - && \\\n  tar xfz dav1d.tar.gz && \\\n  cd dav1d-* && \\\n  meson usr-build --prefix=/usr/local --buildtype=plain && \\\n  meson home-build --prefix=/usr/local --buildtype=plain && \\\n  ninja -C usr-build install && \\\n  DESTDIR=/home/build ninja -C home-build install && rm dav1d.tar.gz\n\nRUN \\\n  git clone ${X264_REPO} && \\\n  cd x264 && \\\n  git checkout ${X264_VER} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\nRUN \\\n  git clone ${SVT_HEVC_REPO} && \\\n  cd SVT-HEVC/Build/linux && \\\n  git checkout ${SVT_HEVC_VER} && \\\n  mkdir -p ../../Bin/Release && \\\n  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\nRUN \\\n  git clone ${SVT_AV1_REPO} && \\\n  cd SVT-AV1/Build/linux && \\\n  git checkout ${SVT_AV1_VER} && \\\n  mkdir -p ../../Bin/Release && \\\n  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\n#Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ]; then rm -rf build/home/; fi\n\nRUN \\\n   wget -O ${GMMLIB_VER}.tar.gz ${GMMLIB_REPO} && \\\n   echo \"${GMMLIB_MD5SUM}  ${GMMLIB_VER}.tar.gz\" | md5sum -c - && \\\n   tar zxf ${GMMLIB_VER}.tar.gz && mv gmmlib-${GMMLIB_VER} gmmlib; rm ${GMMLIB_VER}.tar.gz\n\nRUN \\\n  wget -O ${LIBVA_VER} ${LIBVA_REPO} && \\\n  echo \"${LIBVA_MD5SUM}  ${LIBVA_VER}\" | md5sum -c - && \\\n  tar zxf ${LIBVA_VER} && \\\n  cd libva-${LIBVA_VER} && \\\n  ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib64 && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install;\n\nRUN \\\n  wget -O ${LIBVA_UTILS_VER} ${LIBVA_UTILS_REPO} && \\\n  echo \"${LIBVA_UTILS_MD5SUM}  ${LIBVA_UTILS_VER}\" | md5sum -c - && \\\n  tar zxf ${LIBVA_UTILS_VER} && \\\n  cd libva-utils-${LIBVA_UTILS_VER} && \\\n  ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib64 && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install;\n\nRUN \\\n  wget -O ${MEDIA_DRIVER_VER} ${MEDIA_DRIVER_REPO} && \\\n  echo \"${MEDIA_DRIVER_MD5SUM}  ${MEDIA_DRIVER_VER}\" | md5sum -c - && \\\n  tar zxf ${MEDIA_DRIVER_VER} && mv media-driver-${MEDIA_DRIVER_VER} media-driver && \\\n  mkdir -p media-driver/build && \\\n  cd media-driver/build && \\\n  export PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\" && \\\n  cmake -DBUILD_TYPE=release -DBUILD_ALONG_WITH_CMRTLIB=1 \\\n        -DBS_DIR_GMMLIB=/home/gmmlib/Source/GmmLib \\\n        -DBS_DIR_COMMON=/home/gmmlib/Source/Common \\\n        -DBS_DIR_INC=/home/gmmlib/Source/inc \\\n        -DBS_DIR_MEDIA=/home/media-driver -Wno-dev \\\n        -DCMAKE_INSTALL_PREFIX=/usr/local .. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\n# The iHD_drv_video.so library is heavy so strip debug symbols\n# See https://github.com/intel/media-driver/issues/859\nRUN strip -S \\\n    /home/build/usr/local/lib64/dri/iHD_drv_video.so \\\n    /usr/local/lib64/dri/iHD_drv_video.so\n\nRUN \\\n  wget -O ${MSDK_VER} ${MSDK_REPO} && \\\n  echo \"${MSDK_MD5SUM}  ${MSDK_VER}\" | md5sum -c - && \\\n  tar zxf ${MSDK_VER} && mv MediaSDK-${MSDK_VER} MediaSDK && \\\n  mkdir -p MediaSDK/build && \\\n  cd MediaSDK/build && \\\n  export PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\" && \\\n  cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SAMPLES=OFF -DENABLE_OPENCL=OFF -Wno-dev .. && \\\n  make -j$(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  rm -rf /home/build/samples && \\\n  rm -rf /home/build/plugins && \\\n  rm -rf /home/build/samples && \\\n  rm -rf /home/build/plugins && \\\n  make install\n\n# Post instalation of mfx headers and pkgconfigs\n# https://github.com/Intel-FFmpeg-Plugin/Intel_FFmpeg_plugins/wiki/Working-with-Open-Source-MediaSDK-and-iHD-driver-for-QSV-codecs#get-mediasdk\nRUN mkdir -p /usr/local/include/mfx     && cp    /home/build/usr/local/include/mfx/*.h          /usr/local/include/mfx/ && \\\n    mkdir -p /usr/local/lib64/pkgconfig && cp -a /home/build/usr/local/lib64/pkgconfig/*mfx*.pc /usr/local/lib64/pkgconfig/\n\nRUN wget -O - ${FFMPEG_MA_RELEASE_URL} | tar xz\n\nRUN \\\n  wget -O ${FFMPEG_VER} ${FFMPEG_REPO} && \\\n  echo \"${FFMPEG_MD5SUM}  ${FFMPEG_VER}\" | md5sum -c - && \\\n  tar zxf ${FFMPEG_VER} && mv FFmpeg-${FFMPEG_VER} FFmpeg && \\\n  cd FFmpeg && \\\n  find ${FFMPEG_MA_PATH}/patches -type f -name '*.patch' -print0 | sort -z | xargs -t -0 -n 1 patch -p1 -i;\n\n# Patch FFmpeg source for SVT-HEVC\nRUN \\\n  cd FFmpeg && \\\n  patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch;\n\n# Patch FFmpeg source for SVT-AV1\nRUN \\\n  cd FFmpeg; \\\n  patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch;\n\n# Patches for CLR build issues and CVE issues\nCOPY ffmpeg-patches/* ffmpeg-patches/\nRUN \\\n  cd FFmpeg && \\\n  for file in ../ffmpeg-patches/*.patch; do patch -p1 < $file; done\n\n# Compile FFmpeg (base on http://kojiclear.jf.intel.com/cgit/packages/not-ffmpeg/plain/configure + MeRS codecs and tools)\nRUN \\\n  cd FFmpeg && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/usr/local \\\n    --disable-static \\\n    --extra-ldflags='-ldl' \\\n    --enable-avcodec \\\n    --enable-avformat \\\n    --enable-avutil \\\n    --enable-avdevice \\\n    --enable-rdft \\\n    --enable-pixelutils \\\n    --enable-libvorbis \\\n    --enable-libvpx \\\n    --enable-muxer=\"crc,image2,jpeg,ogg,md5,nut,webm,webm_chunk,webm_dash_manifest,rawvideo,ivf,null,wav,framecrc,rtp,rtsp,ass,webvtt,mjpeg,framehash,hash,${MERS_ENABLE_MUXERS}\" \\\n    --enable-bsf=\"mp3_header_decompress,vp9_superframe\" \\\n    --enable-demuxer=\"mjpeg,image2,webm_dash_manifest,ogg,matroska,mp3,pcm_s16le,rawvideo,wav,mov,ivf,rtp,rtsp,flv,ass,subviewer,subviewer1,webvtt,${MERS_ENABLE_DEMUXERS}\" \\\n    --enable-decoder=\"rawvideo,libvorbis,mjpeg,jpeg,opus,mp3,pcm_u8,pcm_s16le,pcm_s24le,pcm_s32le,pcm_f32le,pcm_s16be,pcm_s24be,pcm_mulaw,pcm_alaw,pcm_u24le,pcm_u32be,pcm_u32le,pgm,pgmyuv,libvpx_vp8,vp8_qsv,vp8,libvpx_vp9,vp9,tiff,bmp,wavpack,ass,saa,subviewer,subviewer1,webvtt,${MERS_ENABLE_DECODERS}\" \\\n    --enable-encoder=\"rawvideo,wrapped_avframe,libvorbis,opus,yuv4,tiff,bmp,libvpx_vp8,vp8_vaapi,libvpx_vp9,vp9_vaapi,mjpeg_vaapi,pcm_u8,pcm_s16le,pcm_s24le,pcm_s32le,pcm_f32le,pcm_s16be,pcm_s24be,pcm_mulaw,pcm_alaw,pcm_u24le,pcm_u32be,pcm_u32le,ass,ssa,webvtt,mjpeg_qsv,${MERS_ENABLE_ENCODERS}\" \\\n    --enable-hwaccel=\"vp8_vaapi,vp9_vaapi,mjpeg_vaapi\" \\\n    --enable-parser=\"opus,libvorbis,vp3,vp8,vp9,mjpeg,${MERS_ENABLE_PARSERS}\" \\\n    --enable-protocol=\"file,md5,pipe,rtp,tcp,http,https,httpproxy,ftp,librtmp,librtmpe,librtmps,librtmpt,librtmpte,rtmpe,rtmps,rtmpt,rtmpte,rtmpts\" \\\n    --enable-filter=\"aresample,asetpts,denoise_vaapi,deinterlace_vaapi,hwupload,hwdownload,pixdesctest,procamp_vaapi,scale,scale_vaapi,sharpness_vaapi,color,format,subtitles,select,setpts\" \\\n    --disable-error-resilience \\\n    --enable-pic \\\n    --enable-shared \\\n    --enable-swscale \\\n    --enable-avfilter \\\n    --enable-vaapi \\\n    --enable-libmfx \\\n    --disable-xvmc \\\n    --disable-doc \\\n    --disable-htmlpages \\\n    --enable-version3 \\\n    --disable-mmx \\\n    --disable-mmxext \\\n    --disable-programs \\\n    --enable-ffmpeg \\\n    --enable-ffplay \\\n    --enable-sdl2 \\\n    --enable-network \\\n    --enable-openssl \\\n    --enable-librtmp \\\n    --enable-libv4l2 \\\n    --enable-indev=v4l2 \\\n    --enable-libass \\\n    ${MERS_ENABLES} \\\n    ${MERS_OTHERS} && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\nRUN \\\n  wget -O - ${GST_REPO} | tar xJ && \\\n  cd gstreamer-${GST_VER} && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain   usr-builddir && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain  home-builddir && \\\n  ninja -v -C usr-builddir install && \\\n  DESTDIR=/home/build ninja -v -C home-builddir install\n\nRUN \\\n  wget -O - ${GST_PLUGIN_BASE_REPO} | tar xJ && \\\n  cd gst-plugins-base-${GST_VER} && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain   usr-builddir && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain  home-builddir && \\\n  ninja -v -C usr-builddir install && \\\n  DESTDIR=/home/build ninja -v -C home-builddir install\n\nRUN \\\n  wget -O - ${GST_PLUGIN_GOOD_REPO} | tar xJ && \\\n  cd gst-plugins-good-${GST_VER} && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain   usr-builddir && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain  home-builddir && \\\n  ninja -v -C usr-builddir install && \\\n  DESTDIR=/home/build ninja -v -C home-builddir install\n\nRUN \\\n  wget -O - ${GST_PLUGIN_BAD_REPO} | tar xJ && \\\n  cd gst-plugins-bad-${GST_VER} && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain   usr-builddir && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain  home-builddir && \\\n  ninja -v -C usr-builddir install && \\\n  DESTDIR=/home/build ninja -v -C home-builddir install\n\nRUN \\\n  wget -O - ${GST_PLUGIN_UGLY_REPO} | tar xJ; \\\n  cd gst-plugins-ugly-${GST_VER}; \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain   usr-builddir && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain  home-builddir && \\\n  ninja -v -C usr-builddir install && \\\n  DESTDIR=/home/build ninja -v -C home-builddir install\n\nRUN \\\n  wget -O - ${GST_PLUGIN_VAAPI_REPO} | tar xJ && \\\n  cd gstreamer-vaapi-${GST_VER} && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain   usr-builddir && \\\n  meson --libdir=lib64 --libexecdir=lib64 --prefix=/usr/local --buildtype=plain  home-builddir && \\\n  ninja -v -C usr-builddir install && \\\n  DESTDIR=/home/build ninja -v -C home-builddir install\n\nRUN \\\n  cd SVT-HEVC/gstreamer-plugin && \\\n  mkdir -p usr-builddir  && meson -Dprefix=/usr/local --buildtype=plain usr-builddir && \\\n  mkdir -p home-builddir && meson -Dprefix=/usr/local --buildtype=plain home-builddir && \\\n  ninja -C usr-builddir install && \\\n  DESTDIR=/home/build ninja -C home-builddir install\n\nRUN \\\n  cd SVT-AV1/gstreamer-plugin && \\\n  mkdir -p usr-builddir  && meson -Dprefix=/usr/local usr-builddir && \\\n  mkdir -p home-builddir && meson -Dprefix=/usr/local home-builddir && \\\n  ninja -C usr-builddir install && \\\n  DESTDIR=/home/build ninja -C home-builddir install\n\nRUN \\\n  wget -O - ${GST_PLUGIN_LIBAV_REPO} | tar xJ && \\\n  cd gst-libav-${GST_VER} && \\\n  ./autogen.sh \\\n      --prefix=/usr/local \\\n      --libdir=/usr/local/lib64 \\\n      --enable-shared \\\n      --enable-gpl \\\n       --disable-gtk-doc && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\nRUN \\\n  wget ${OPENCV_REPO} && \\\n  tar -zxvf ${OPENCV_VER}.tar.gz && rm ${OPENCV_VER}.tar.gz\n\n# Patch CVE issues on OpenCV\nCOPY opencv-patches/* opencv-patches/\nRUN \\\n  cd opencv-${OPENCV_VER} && \\\n  for file in ../opencv-patches/*.patch; do patch -p1 < $file; done\n\nRUN \\\n  cd opencv-${OPENCV_VER} && \\\n  mkdir build && \\\n  cd build && \\\n  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -D BUILD_EXAMPLES=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF -D BUILD_TESTS=OFF .. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\nRUN \\\n  git clone -b ${DLDT_VER} ${DLDT_REPO} && \\\n  cd dldt && \\\n  git submodule init && \\\n  git submodule update --recursive && \\\n  cd inference-engine && \\\n  mkdir build && \\\n  cd build && \\\n  cmake -DENABLE_VALIDATION_SET=OFF \\\n        -DCMAKE_INSTALL_PREFIX=/opt/intel/dldt \\\n        -DLIB_INSTALL_PATH=/opt/intel/dldt \\\n        -DENABLE_MKL_DNN=ON \\\n        -DTHREADING=OMP \\\n        -DENABLE_GNA=OFF \\\n        -DENABLE_CLDNN=OFF \\\n        -DENABLE_MYRIAD=OFF \\\n        -DENABLE_VPU=OFF \\\n        -DENABLE_SAMPLE_CORE=OFF .. && \\\n  make -j $(nproc) && \\\n  rm -rf ../bin/intel64/Release/lib/libgtest* && \\\n  rm -rf ../bin/intel64/Release/lib/libgmock* && \\\n  rm -rf ../bin/intel64/Release/lib/libmock* && \\\n  rm -rf ../bin/intel64/Release/lib/libtest*\n\nRUN \\\n  mkdir -p /opt/intel/dldt/inference-engine/include && \\\n  cp -r dldt/inference-engine/include/* /opt/intel/dldt/inference-engine/include && \\\n  mkdir -p /${libdir} && \\\n  cp -r dldt/inference-engine/bin/intel64/Release/lib/*  ${libdir} && \\\n  mkdir -p /opt/intel/dldt/inference-engine/src && \\\n  cp -r dldt/inference-engine/src/* /opt/intel/dldt/inference-engine/src/ && \\\n  mkdir -p /opt/intel/dldt/inference-engine/share && \\\n  cp -r dldt/inference-engine/build/share/* /opt/intel/dldt/inference-engine/share/ && \\\n  mkdir -p    /opt/intel/dldt/inference-engine/external/ && \\\n  cp -r dldt/inference-engine/temp/* /opt/intel/dldt/inference-engine/external\n\nRUN \\\n  mkdir -p build/opt/intel/dldt/inference-engine/include && \\\n  cp -r dldt/inference-engine/include/* build/opt/intel/dldt/inference-engine/include && \\\n  mkdir -p build/${libdir} && \\\n  cp -r dldt/inference-engine/bin/intel64/Release/lib/* build${libdir} && \\\n  mkdir -p build/opt/intel/dldt/inference-engine/src && \\\n  cp -r dldt/inference-engine/src/* build/opt/intel/dldt/inference-engine/src/ && \\\n  mkdir -p build/opt/intel/dldt/inference-engine/share && \\\n  cp -r dldt/inference-engine/build/share/* build/opt/intel/dldt/inference-engine/share/ && \\\n  mkdir -p build/opt/intel/dldt/inference-engine/external/ && \\\n  cp -r dldt/inference-engine/temp/* build/opt/intel/dldt/inference-engine/external\n\nRUN \\\n  for p in /usr /home/build/usr/local /opt/intel/dldt/inference-engine /home/build/opt/intel/dldt/inference-engine; do \\\n        pkgconfiglibdir=\"$p/lib64\" && \\\n      mkdir -p \"${pkgconfiglibdir}/pkgconfig\" && \\\n      pc=\"${pkgconfiglibdir}/pkgconfig/dldt.pc\" && \\\n      echo \"prefix=/opt\" > \"$pc\" && \\\n      echo \"libdir=${libdir}\" >> \"$pc\" && \\\n      echo \"includedir=/opt/intel/dldt/inference-engine/include\" >> \"$pc\" && \\\n      echo \"\" >> \"$pc\" && \\\n      echo \"Name: DLDT\" >> \"$pc\" && \\\n      echo \"Description: Intel Deep Learning Deployment Toolkit\" >> \"$pc\" && \\\n      echo \"Version: 5.0\" >> \"$pc\" && \\\n      echo \"\" >> \"$pc\" && \\ \n      echo \"Libs: -L\\${libdir} -linference_engine -linference_engine_c_wrapper\" >> \"$pc\" && \\\n      echo \"Cflags: -I\\${includedir}\" >> \"$pc\"; \\\n  done;\n\nRUN \\\n  wget -O - ${VA_GSTREAMER_PLUGINS_REPO} | tar xz && \\\n  cd gst-video-analytics-${VA_GSTREAMER_PLUGINS_VER} && \\\n  mkdir build && \\\n  cd build && \\\n  cmake \\\n    -DVERSION_PATCH=$(echo \"$(git rev-list --count --first-parent HEAD)\") \\\n    -DGIT_INFO=$(echo \"git_$(git rev-parse --short HEAD)\") \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DDISABLE_SAMPLES=ON \\\n    -DDISABLE_VAAPI=ON  \\\n    -DENABLE_PAHO_INSTALLATION=${ENABLE_PAHO_INSTALLATION} \\\n    -DENABLE_RDKAFKA_INSTALLATION=${ENABLE_RDKAFKA_INSTALLATION} \\\n    -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local .. && \\\n  make -j $(nproc) && \\\n  make install DESTDIR=/home/build && \\\n  make install\n\nRUN \\\n  mkdir -p build/usr/local/lib64/gstreamer-1.0 && \\\n  cp -r gst-video-analytics-${VA_GSTREAMER_PLUGINS_VER}/build/intel64/Release/lib/* build/usr/local/lib64/gstreamer-1.0\nRUN \\\n  mkdir -p /usr/lib64/gstreamer-1.0 && \\\n  cp -r gst-video-analytics-${VA_GSTREAMER_PLUGINS_VER}/build/intel64/Release/lib/* /usr/local/lib64/gstreamer-1.0\n\n# Clean up after build\nRUN \\\n  rm -rf \\\n    /home/build/include \\\n    /home/build/share/doc \\\n    /home/build/share/gtk-doc \\\n    /home/build/share/man && \\\n  find /home/build -name \"*.a\" -exec rm -f {} \\;\n\nFROM clearlinux:latest AS runtime-bundles\n\n# Grab os-release info from the minimal base image so\n# that the new content matches the exact OS version\nCOPY --from=clearlinux/os-core:latest /usr/lib/os-release /\n\n# Update to clearlinux/os-core version to ensure\n# that the swupd command line arguments are identical\nRUN source /os-release && \\\n    swupd update -V ${VERSION_ID} --no-boot-update $swupd_args\n\n# Install additional content in a target directory\n# using the os version from the minimal base\nRUN source /os-release && \\\n    mkdir /install_root \\\n    && swupd os-install -V ${VERSION_ID} \\\n    --path /install_root --statedir /swupd-state \\\n    --bundles=devpkg-libass,devpkg-opus,devpkg-libsrtp,devpkg-taglib,transcoding-support --no-boot-update \\\n    && rm -rf /install_root/var/lib/swupd/*\n\nFROM clearlinux:latest AS extra-bundles\n\n# Grab os-release info from the minimal base image so\n# that the new content matches the exact OS version\nCOPY --from=clearlinux/os-core:latest /usr/lib/os-release /\n\n# Update to clearlinux/os-core version to ensure\n# that the swupd command line arguments are identical\nRUN source /os-release && \\\n    swupd update -V ${VERSION_ID} --no-boot-update $swupd_args\n\n# Install additional content in a target directory\n# using the os version from the minimal base\n# os-core-update provides swupd\n# procps-ng provides ps\nRUN source /os-release && \\\n    mkdir /install_root \\\n    && swupd os-install -V ${VERSION_ID} \\\n    --path /install_root --statedir /swupd-state \\\n    --bundles=os-core-update,procps-ng --no-boot-update \\\n    && rm -rf /install_root/var/lib/swupd/*\n\nFROM clearlinux/os-core:latest\nLABEL Description=\"Media Stack (MeRS) on ClearLinux OS\"\nLABEL Vendor=\"Intel Corporation\"\nLABEL maintainer=otc-swstacks@intel.com\n\nCOPY --from=runtime-bundles /install_root /\nCOPY --from=extra-bundles /install_root /\n\n# Copy all built files from build stage to /usr/local\n# .\n# ├── opt\n# │   └── intel\n# │       └── dldt\n# └── usr\n#     ├── local\n#     │   ├── bin\n#     │   ├── include\n#     │   ├── lib\n#     │   ├── lib64\n#     │   └── share\n#     └── share\n#         └── bash-completion\nCOPY --from=build /home/build/ /home/build/\nRUN cd /home/build && \\\n\t\tcp -a opt / && \\\n    cp -a {usr/share,usr/local/bin,usr/local/include,usr/local/lib,usr/local/lib64,usr/local/share} /usr/local && \\\n    cd - && rm -rf /home/build\n\nCOPY scripts/entrypoint.sh scripts/docker-healthcheck /usr/bin/\n\nENV LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64:/usr/local/lib64/gstreamer-1.0:/opt/intel/dldt/inference-engine/lib/intel64:/opt/intel/dldt/inference-engine/external/omp/lib\nENV LIBVA_DRIVERS_PATH=/usr/local/lib64/dri\nENV LIBVA_DRIVER_NAME=iHD\nENV GST_VAAPI_ALL_DRIVERS=1\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV OpenCV_DIR=/opt/intel/dldt/inference-engine/external/opencv/cmake\nENV LIBRARY_PATH=/usr/lib:${LIBRARY_PATH}\nENV GST_PLUGIN_PATH=/usr/local/lib64/gstreamer-1.0\nENV GST_PLUGIN_SCANNER=/usr/local/lib64/gstreamer-1.0/gst-plugin-scanner\nENV PKG_CONFIG_PATH=/usr/lib64/pkgconfig:/usr/local/lib64/pkgconfig\nENV XDG_RUNTIME_DIR=/home/mers-user\n\nRUN useradd mers-user\nWORKDIR /home/mers-user\nUSER mers-user\n\nHEALTHCHECK --interval=15s CMD [\"docker-healthcheck\"]\nENTRYPOINT [\"entrypoint.sh\"]\nCMD [\"start\"]\n"
}