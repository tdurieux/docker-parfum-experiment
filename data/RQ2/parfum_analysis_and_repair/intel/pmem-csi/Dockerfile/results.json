{
  "startTime": 1674249865801,
  "endTime": 1674249867347,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 10,
        "columnEnd": 71
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 14,
        "columnEnd": 97
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2021 Intel Coporation.\n#\n# SPDX-License-Identifier: Apache-2.0\n\n# Image builds are not reproducible because the base layer is changing over time.\nARG LINUX_BASE=debian:buster-slim\n\n# Common base image for building PMEM-CSI and running CI tests.\nFROM ${LINUX_BASE} AS build\nARG APT_GET=\"env DEBIAN_FRONTEND=noninteractive apt-get\"\n\nARG GO_VERSION=\"1.18.1\"\n\n# CACHEBUST is set by the CI when building releases to ensure that apt-get really gets\n# run instead of just using some older, cached result.\nARG CACHEBUST\n\n# We want newer ndctl that is available in buster:\nRUN echo 'deb http://ftp.debian.org/debian buster-backports main' > /etc/apt/sources.list.d/buster-backports.list\nRUN echo 'deb-src http://ftp.debian.org/debian buster-backports main' >> /etc/apt/sources.list.d/buster-backports.list\n# In contrast to the runtime image below, here we can afford to install additional\n# tools and recommended packages. But this image gets pushed to a registry by the CI as a cache,\n# so it still makes sense to keep this layer small by removing /var/cache.\nRUN ${APT_GET} update && \\\n    ${APT_GET} install -y gcc libndctl-dev/buster-backports make git curl iproute2 pkg-config xfsprogs e2fsprogs parted openssh-client python3 python3-venv equivs debhelper cmake python asciidoctor pkg-config && \\\n    rm -rf /var/cache/*\nRUN curl -f -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -zxf - -C / && \\\n    mkdir -p /usr/local/bin/ && \\\n    for i in /go/bin/*; do ln -s $i /usr/local/bin/; done\n\nADD hack/python3-fake-debian-package .\n\n# Creates python3_100.0_all.deb\nRUN equivs-build python3-fake-debian-package\n\n# Build ipmctl from source.\n# We use the latest official release and determine that via\n# the HTML redirect page.\nRUN set -x && \\\n    git clone https://github.com/intel/ipmctl.git && \\\n    cd ipmctl && \\\n    tag=$( curl -f --silent https://github.com/intel/ipmctl/releases/latest | sed -e 's;.*tag/\\([^\"]*\\).*;\\1;') && \\\n    git checkout $tag && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DRELEASE=ON -DCMAKE_INSTALL_PREFIX=/usr/local .. && \\\n    make -j all && \\\n    make install\n\n# Clean image for deploying PMEM-CSI.\nFROM ${LINUX_BASE} as runtime\nARG APT_GET=\"env DEBIAN_FRONTEND=noninteractive apt-get\"\nARG CACHEBUST\nARG BIN_SUFFIX\nLABEL maintainers=\"Intel\"\nLABEL description=\"PMEM CSI Driver\"\n\nCOPY --from=build python3_100.0_all.deb /var/cache/python3_100.0_all.deb\n\n# Update and install the minimal amount of additional packages that\n# are needed at runtime:\n# file - driver uses file utility to determine filesystem type\n# xfsprogs, e2fsprogs - formating filesystems\n# lvm2 - volume management\n# ndctl - pulls in the necessary library, useful by itself\n# parted - for Kata Containers support\nRUN echo 'deb http://ftp.debian.org/debian buster-backports main' > /etc/apt/sources.list.d/buster-backports.list\nRUN echo 'deb-src http://ftp.debian.org/debian buster-backports main' >> /etc/apt/sources.list.d/buster-backports.list\nRUN ${APT_GET} update && \\\n    mkdir -p /usr/local/share && \\\n    dpkg -i /var/cache/python3_100.0_all.deb && \\\n    bash -c 'set -o pipefail; ${APT_GET} install -y --no-install-recommends file xfsprogs e2fsprogs lvm2 libndctl-dev/buster-backports ndctl/buster-backports parted \\\n       | tee --append /usr/local/share/package-install.log' && \\\n    rm -rf /var/cache/*\n\n# Image in which PMEM-CSI binaries get built.\nFROM build as binaries\nARG APT_GET=\"env DEBIAN_FRONTEND=noninteractive apt-get\"\n\n# Some of the licenses might require us to distribute source code.\n# We cannot just point to the upstream download locations because those might\n# disappear. We could host a copy at a location under our control,\n# but keeping that in sync with the published container images\n# would be tricky. So what we do instead is copy the source code\n# which has this requirement into the image.\n#\n# Here we determine which packages were added to the runtime image,\n# then get the source code of packages under a copyleft license.\n#\n# The check for \"copyleft\" is crude (= search for MPL/GPL/LGPL)\n# and intentionally errs on the side of including source code\n# even when the copyright file just mentions those words in some\n# other context.\n#\n# Some known cases of non-copyleft source are therefore skipped\n# directly.\n#\n# Copying the source code intentionally comes before building\n# PMEM-CSI, because then the result is typically cached when\n# a developer builds images repeatedly.\n#\n# The following warning can be ignored:\n#   \"Download is performed unsandboxed as root as file ... couldn't be accessed by user '_apt'\"\n\nCOPY --from=runtime /usr/local/share/package-install.log /usr/local/share/package-install.log\nCOPY --from=runtime /usr/share/doc /tmp/runtime-doc\nRUN sed -i -e 's/^deb \\(.*\\)/deb \\1\\ndeb-src \\1/' /etc/apt/sources.list\nRUN mkdir -p /usr/local/share/package-sources\nRUN cd /usr/local/share/package-sources && \\\n    ${APT_GET} update && \\\n    grep ^Get: /usr/local/share/package-install.log | cut -d ' ' -f 5,7 | \\\n    while read pkg version; do \\\n       if ! [ -f /tmp/runtime-doc/$pkg/copyright ]; then \\\n           echo \"ERROR: missing copyright file for $pkg\"; exit 1; \\\n       fi; \\\n       case $pkg in \\\n          libpython*|python*|libsqlite3*) echo \"INFO: not downloading source of $pkg, it is known to be under a non-copyleft license\";; \\\n          *) \\\n         if matches=$(grep -B5 -w -e MPL -e GPL -e LGPL /tmp/runtime-doc/$pkg/copyright); then \\\n             echo \"INFO: downloading source of $pkg because of the following licenses:\"; \\\n             echo \"$matches\" | sed -e 's/^/    /'; \\\n             ${APT_GET} source --download-only $pkg=$version || exit 1; \\\n         else \\\n             echo \"INFO: not downloading source of $pkg, found no copyleft license\"; \\\n         fi; \\\n         ;; \\\n    esac; \\\n    done && \\\n    echo \"INFO: all additional packages:\" && \\\n    for pkg in $(grep ^Get: /usr/local/share/package-install.log | cut -d ' ' -f 5); do \\\n        if source=$(apt-cache show $pkg | grep '^Source: '); then \\\n            echo \"$source\" | sed -e 's/^Source: \\([^ ]*\\).*/    \\1'\" ($pkg)/\"; \\\n        else \\\n            echo \"    $pkg\"; \\\n        fi; \\\n    done && \\\n    rm -rf /var/cache/*\n\n# build pmem-csi-driver\nARG VERSION=\"unknown\"\nADD . /src/pmem-csi\nENV PKG_CONFIG_PATH=/usr/lib/pkgconfig/\nWORKDIR /src/pmem-csi\nARG BIN_SUFFIX\n\n# If \"docker build\" is invoked with the \"vendor\" directory correctly\n# populated, then this argument can be set to -mod=vendor. \"make\n# build-images\" does both automatically.\nARG GOFLAGS=\n\n# Here we choose explicitly which binaries we want in the image and in\n# which flavor (production or testing). The actual binary name in the\n# image is going to be the same, to avoid unnecessary deployment\n# differences.\nRUN set -x && \\\n    make VERSION=${VERSION} pmem-csi-driver${BIN_SUFFIX} pmem-csi-operator${BIN_SUFFIX} && \\\n    mkdir -p /usr/local/bin && \\\n    mv _output/pmem-csi-driver${BIN_SUFFIX} /usr/local/bin/pmem-csi-driver && \\\n    mv _output/pmem-csi-operator${BIN_SUFFIX} /usr/local/bin/pmem-csi-operator && \\\n    go build -o /usr/local/bin/pmem-dax-check ./test/cmd/pmem-dax-check && \\\n    mkdir -p /usr/local/share/package-licenses && \\\n    hack/copy-modules-license.sh /usr/local/share/package-licenses ./cmd/pmem-csi-driver ./cmd/pmem-csi-operator && \\\n    cp /go/LICENSE /usr/local/share/package-licenses/go.LICENSE && \\\n    cp LICENSE /usr/local/share/package-licenses/PMEM-CSI.LICENSE\n\n# Now also copy copyleft source code that was used during the build of our binaries.\nRUN set -x && \\\n    mkdir -p /usr/local/share/package-sources && \\\n    for license in $(grep -l -r -w -e MPL -e GPL -e LGPL /usr/local/share/package-licenses | sed -e 's;^/usr/local/share/package-licenses/;;'); do \\\n        if ! (dir=$(dirname $license) && \\\n              tar -Jvcf /usr/local/share/package-sources/$(echo $dir | tr / _).tar.xz vendor/$dir ); then \\\n              exit 1; \\\n        fi; \\\n    done; rm /usr/local/share/package-sources/$( echo $dir | tr / _).tar.xz \\\n    ls -l /usr/local/share/package-sources; \\\n    du -h /usr/local/share/package-sources\n\nCOPY --from=build /ipmctl/LICENSE /usr/local/share/package-licenses/ipmctl.LICENSE\n\n# The actual pmem-csi-driver image.\nFROM runtime as pmem\n\n# Move required binaries and libraries to clean container.\nCOPY --from=binaries /usr/local/bin/pmem-* /usr/local/bin/ipmctl /usr/local/bin/\nCOPY --from=binaries /usr/local/lib/libipmctl*.so.* /usr/local/lib/\nCOPY --from=binaries /usr/local/man /usr/local/man\nCOPY --from=binaries /usr/local/share/package-licenses /usr/local/share/package-licenses\nCOPY --from=binaries /usr/local/share/package-sources /usr/local/share/package-sources\n\n# /usr/local/lib is not in the default library search path.\nRUN for i in /usr/local/lib/*.so.*; do ln -s $i /usr/lib; done\n\n# Don't rely on udevd, it isn't available (https://unix.stackexchange.com/questions/591724/how-to-add-a-block-to-udev-database-that-works-after-reboot).\n# Same with D-Bus.\n# Backup and archival of metadata inside the container is useless.\nRUN sed -i \\\n        -e 's/udev_sync = 1/udev_sync = 0/' \\\n        -e 's/udev_rules = 1/udev_rules = 0/' \\\n        -e 's/obtain_device_list_from_udev = 1/obtain_device_list_from_udev = 0/' \\\n        -e 's/multipath_component_detection = 1/multipath_component_detection = 0/' \\\n        -e 's/md_component_detection = 1/md_component_detection = 0/' \\\n        -e 's/notify_dbus = 1/notify_dbus = 0/' \\\n        -e 's/backup = 1/backup = 0/' \\\n        -e 's/archive = 1/archive = 0/' \\\n        /etc/lvm/lvm.conf\n\nENV LD_LIBRARY_PATH=/usr/lib\n"
}