{
  "startTime": 1674253329828,
  "endTime": 1674253332212,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 323,
        "lineEnd": 336,
        "columnStart": 2,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2020 Intel Corporation\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n\n# This file is automatically generated from .m4 template.\n# To update, modify the template and regenerate.\n\nARG IMAGE=ubuntu:20.04\nFROM $IMAGE AS base\n\nFROM base as content\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates wget && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Refer to usage.txt for the content copyright notice(s)\nRUN mkdir -p /downloads && cd /downloads && \\\n  wget --progress=bar:force https://repositories.intel.com/media/usage.txt && \\\n  wget --progress=bar:force https://repositories.intel.com/media/WAR_TRAILER_HiQ_10_withAudio.mp4\n\nFROM base as build\n\nRUN mkdir -p /opt/build && mkdir -p /opt/dist\n\nENV PKG_CONFIG_PATH=/opt/intel/samples/lib/pkgconfig\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    cmake && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    automake \\\n    ca-certificates \\\n    gcc \\\n    libdrm-dev \\\n    libtool \\\n    make \\\n    pkg-config \\\n    wget \\\n    libx11-dev \\\n    libxext-dev \\\n    libxfixes-dev \\\n     && \\\n  rm -rf /var/lib/apt/lists/*\n# build libva2\nARG LIBVA2_REPO=https://github.com/intel/libva/archive/2.14.0.tar.gz\nRUN cd /opt/build && \\\n  wget -O - ${LIBVA2_REPO} | tar xz\nRUN cd /opt/build/libva-2.14.0 && \\\n  ./autogen.sh --prefix=/opt/intel/samples --libdir=/opt/intel/samples/lib && \\\n  make -j$(nproc) && \\\n  make install DESTDIR=/opt/dist && \\\n  make install\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    g++ \\\n    make \\\n    wget && \\\n  rm -rf /var/lib/apt/lists/*\n\n# build gmmlib\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/intel-gmmlib-22.1.4.tar.gz\nRUN cd /opt/build && \\\n  wget -O - ${GMMLIB_REPO} | tar xz\nRUN cd /opt/build/gmmlib-intel-gmmlib-22.1.4 && mkdir build && cd build && \\\n  cmake \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/opt/intel/samples \\\n    -DCMAKE_INSTALL_LIBDIR=/opt/intel/samples/lib \\\n    .. && \\\n  make -j$(nproc) && \\\n  make install DESTDIR=/opt/dist && \\\n  make install\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    g++ \\\n    make \\\n    patch \\\n    pkg-config \\\n    wget && \\\n  rm -rf /var/lib/apt/lists/*\n# build media driver\nARG MEDIA_DRIVER_REPO=https://github.com/intel/media-driver/archive/intel-media-22.4.3.tar.gz\nRUN cd /opt/build && \\\n  wget -O - ${MEDIA_DRIVER_REPO} | tar xz\n\nCOPY patches/media-driver /opt/build/media-driver-intel-media-22.4.3\nRUN cd /opt/build/media-driver-intel-media-22.4.3 && { set -e; \\\n  for patch_file in $(find -iname \"*.patch\" | sort -n); do \\\n    echo \"Applying: ${patch_file}\"; \\\n    patch -p1 < ${patch_file}; \\\n  done; }\nRUN cd /opt/build/media-driver-intel-media-22.4.3 && mkdir build && cd build && \\\n  cmake \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/opt/intel/samples \\\n    -DCMAKE_INSTALL_LIBDIR=/opt/intel/samples/lib \\\n    -DENABLE_PRODUCTION_KMD=ON \\\n    .. && \\\n  make -j$(nproc) && \\\n  make install DESTDIR=/opt/dist && \\\n  make install\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    automake \\\n    ca-certificates \\\n    gcc \\\n    g++ \\\n    libdrm-dev \\\n    libtool \\\n    make \\\n    pkg-config \\\n    wget && \\\n  rm -rf /var/lib/apt/lists/*\n# build libva2-utils\nARG LIBVA2_UTILS_REPO=https://github.com/intel/libva-utils/archive/2.14.0.tar.gz\nRUN cd /opt/build && wget -O - ${LIBVA2_UTILS_REPO} | tar xz\nRUN cd /opt/build/libva-utils-2.14.0 && \\\n  ./autogen.sh --prefix=/opt/intel/samples --libdir=/opt/intel/samples/lib && \\\n  make -j$(nproc) && \\\n  make install DESTDIR=/opt/dist && \\\n  make install\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    automake \\\n    ca-certificates \\\n    gcc \\\n    g++ \\\n    make \\\n    pkg-config \\\n    wget \\\n    cmake \\\n    dh-autoreconf && \\\n  rm -rf /var/lib/apt/lists/*\nARG ONEVPL_REPO=https://github.com/oneapi-src/oneVPL/archive/v2022.1.5.tar.gz\nRUN cd /opt/build && \\\n  wget -O - ${ONEVPL_REPO} | tar xz\n\nCOPY patches/libvpl2 /opt/build/oneVPL-2022.1.5\nRUN cd /opt/build/oneVPL-2022.1.5 && { set -e; \\\n  for patch_file in $(find -iname \"*.patch\" | sort -n); do \\\n    echo \"Applying: ${patch_file}\"; \\\n    patch -p1 < ${patch_file}; \\\n  done; }\n# build oneVPL\nRUN cd /opt/build/oneVPL-2022.1.5 && \\\n    mkdir build && cd build && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DCMAKE_INSTALL_PREFIX=/opt/intel/samples \\\n      -DCMAKE_INSTALL_LIBDIR=/opt/intel/samples/lib \\\n      .. && \\\n    make -j$(nproc) && \\\n    make install DESTDIR=/opt/dist && \\\n    make install\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    gcc \\\n    g++ \\\n    wget \\\n    pkg-config \\\n    cmake \\\n    make && \\\n  rm -rf /var/lib/apt/lists/*\nARG ONEVPLGPU_REPO=https://github.com/oneapi-src/oneVPL-intel-gpu/archive/intel-onevpl-22.4.3.tar.gz\nRUN cd /opt/build && \\\n  wget -O - ${ONEVPLGPU_REPO} | tar xz\n# build oneVPL gpu\nRUN cd /opt/build/oneVPL-intel-gpu-intel-onevpl-22.4.3 && \\\n    mkdir -p _build && cd _build && \\\n    cmake \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/opt/intel/samples \\\n    -DCMAKE_INSTALL_LIBDIR=/opt/intel/samples/lib \\\n    -DMFX_ENABLE_AENC=ON \\\n    .. && \\\n    make -j$(nproc) && \\\n    make install DESTDIR=/opt/dist && \\\n    make install\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    gcc \\\n    g++ \\\n    make \\\n    pkg-config \\\n    wget && \\\n  rm -rf /var/lib/apt/lists/*\n# build media sdk\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/intel-mediasdk-22.4.3.tar.gz\nRUN cd /opt/build && \\\n  wget -O - ${MSDK_REPO} | tar xz\nRUN cd /opt/build/MediaSDK-intel-mediasdk-22.4.3 && \\\n  mkdir -p build && cd build && \\\n  cmake \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/opt/intel/samples \\\n    -DCMAKE_INSTALL_LIBDIR=/opt/intel/samples/lib \\\n    -DBUILD_SAMPLES=OFF \\\n    -DBUILD_TUTORIALS=OFF \\\n    .. && \\\n  make -j$(nproc) && \\\n  make install DESTDIR=/opt/dist && \\\n  make install\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    gcc \\\n    g++ \\\n    git \\\n    make \\\n    meson \\\n    nasm \\\n    patch \\\n    pkg-config \\\n    cython3 \\\n    python3 \\\n    python3-dev \\\n    python3-numpy \\\n    python3-setuptools \\\n    python3-wheel && \\\n  rm -rf /var/lib/apt/lists/*\n# As of now we need 2 things from VMAF: libvmaf library against which we will link\n# ffmpeg and model *.pkl files to be able to calculate VMAF.\nRUN git clone --depth 1 --branch v2.2.1 https://github.com/Netflix/vmaf.git /opt/build/vmaf\n\nCOPY patches/vmaf /opt/build/vmaf\nRUN cd /opt/build/vmaf && { set -e; \\\n  for patch_file in $(find -iname \"*.patch\" | sort -n); do \\\n    echo \"Applying: ${patch_file}\"; \\\n    patch -p1 < ${patch_file}; \\\n  done; }\n\nRUN cd /opt/build/vmaf/libvmaf \\\n  && meson build \\\n  --buildtype=release \\\n  --prefix=/opt/intel/samples \\\n  --libdir=/opt/intel/samples/lib \\\n  && ninja -j $(nproc --all) -C build \\\n  && DESTDIR=/opt/dist ninja -C build install \\\n  && ninja -C build install\n\nRUN cd /opt/build/vmaf/python \\\n    && python3 setup.py build \\\n    && python3 setup.py bdist_wheel --dist-dir=/opt/wheel\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    tar \\\n    g++ \\\n    wget \\\n    pkg-config \\\n    nasm \\\n    meson && \\\n  rm -rf /var/lib/apt/lists/*\n\n# build dav1d\nARG DAV1D_REPO=https://code.videolan.org/videolan/dav1d/-/archive/0.9.2/dav1d-0.9.2.tar.gz\nRUN cd /opt/build && \\\n  wget -O - ${DAV1D_REPO} | tar xz\nRUN cd /opt/build/dav1d-0.9.2 && \\\n  meson build --prefix=/opt/intel/samples --libdir /opt/intel/samples/lib --buildtype=plain && \\\n  cd build && \\\n  ninja install && \\\n  DESTDIR=/opt/dist ninja install\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    gcc \\\n    g++ \\\n    git \\\n    libx264-dev \\\n    libx265-dev \\\n    make \\\n    patch \\\n    pkg-config \\\n    yasm && \\\n  rm -rf /var/lib/apt/lists/*\nRUN git clone https://github.com/ffmpeg/ffmpeg /opt/build/ffmpeg && \\\n  cd /opt/build/ffmpeg && \\\n  git checkout bea841a\n\nCOPY patches/ffmpeg /opt/build/ffmpeg\nRUN cd /opt/build/ffmpeg && { set -e; \\\n  for patch_file in $(find -iname \"*.patch\" | sort -n); do \\\n    echo \"Applying: ${patch_file}\"; \\\n    patch -p1 < ${patch_file}; \\\n  done; }\n\nRUN cd /opt/build/ffmpeg && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=/opt/intel/samples \\\n  --libdir=/opt/intel/samples/lib \\\n  --disable-static \\\n  --disable-doc \\\n  --enable-shared \\\n  --enable-vaapi \\\n  --enable-libvpl \\\n  --enable-gpl \\\n  --enable-libx264 \\\n  --enable-libx265 \\\n  --enable-version3 \\\n  --enable-libvmaf \\\n  --enable-libdav1d \\\n  && make -j $(nproc --all) \\\n  && make install DESTDIR=/opt/dist \\\n  && make install\n\n# Cleaning up...\nRUN rm -rf /opt/build/ffmpeg\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    asciidoc-base \\\n    docbook-utils \\\n    docbook-xsl \\\n    make \\\n    xmlto \\\n    xsltproc && \\\n  rm -rf /var/lib/apt/lists/*\n# Building some manual pages for the sample\nCOPY doc/man /opt/build/manuals\nRUN cd /opt/build/manuals && make -j $(nproc --all) && \\\n  DESTDIR=/opt/dist make prefix=/opt/intel/samples install\nRUN rm -rf /opt/build/manuals\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    gcc \\\n    bison \\\n    flex \\\n    git \\\n    libcairo-dev \\\n    libdrm-dev \\\n    libdw-dev \\\n    libkmod-dev \\\n    libpciaccess-dev \\\n    libpixman-1-dev \\\n    libprocps-dev \\\n    libudev-dev \\\n    meson \\\n    pkg-config && \\\n  rm -rf /var/lib/apt/lists/*\nARG IGT_REPO=https://gitlab.freedesktop.org/drm/igt-gpu-tools.git\nRUN git clone $IGT_REPO /opt/build/igt\nRUN cd /opt/build/igt \\\n  && git checkout 1869d560c550ac273f495076ead46f8a337fc20b \\\n  && meson build \\\n  --buildtype=release \\\n  --prefix=/opt/intel/samples \\\n  --libdir=/opt/intel/samples/lib \\\n  -Ddocs=disabled -Dman=disabled -Dlibdrm_drivers=intel \\\n  -Doverlay=disabled -Drunner=disabled -Dtests=disabled \\\n  && ninja -j $(nproc --all) -C build \\\n  && DESTDIR=/opt/dist ninja -C build install \\\n  && ninja -C build install\n\n\n\n\n# Ok, here goes the final image end-user will actually see\nFROM base\n\nLABEL vendor=\"Intel Corporation\"\n\nCOPY --from=content /downloads /opt/data/embedded\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    libdrm2 \\\n    libx11-6 \\\n    libxext6 \\\n    libxfixes3 \\\n    python3 \\\n    python3-pip \\\n    libx264-155 \\\n    libx265-179 \\\n    libxcb-shm0 \\\n    less \\\n    man-db \\\n    libnginx-mod-http-lua \\\n    libnginx-mod-rtmp \\\n    linux-tools-generic \\\n    nginx \\\n    pciutils \\\n    python3-matplotlib \\\n    python3-numpy \\\n    socat \\\n    tmux \\\n    curl \\\n    sudo \\\n    vim \\\n    wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nCOPY --from=build /opt/dist /\nRUN echo \"/opt/intel/samples/lib\" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig\n\n# Custom component installation rules, if any...\nCOPY --from=build /opt/wheel /opt/wheel\nRUN python3 -m pip install --no-deps --prefix=/opt/intel/samples /opt/wheel/* && rm -rf /opt/wheel\n\n# Restoring man which is excluded from the minimal ubuntu image\nRUN rm -f /usr/bin/man && dpkg-divert --quiet --remove --rename /usr/bin/man\nRUN setcap cap_sys_admin+ep $(find /opt -name intel_gpu_top)\n# perf is tight to particular kernel version per old WA which will never\n# be fixed, we just need to use some version\nRUN ln -fs $(find /usr/lib/linux-tools -name perf) /usr/bin/perf;\n\n# Granting CAP_SYS_ADMIN to the Linux perf to be able to get global perf\n# events (specifically: i915 events). Mind that this will work if container\n# is started with:\n#   --cap-add SYS_ADMIN --security-opt=\"no-new-privileges:false\"\n# If it was started with\n#   --cap-add SYS_ADMIN --security-opt=\"no-new-privileges:true\"\n# then you need to adjust /proc/sys/kernel/perf_event_paranoid on a host to have\n# value <=0\nRUN setcap cap_sys_admin+ep $(readlink -f $(which perf))\n#RUN setcap cap_sys_admin+ep $(readlink -f $(which intel_gpu_top))\n\n# Installing entrypoint helper scripts\nCOPY assets/demo-alive /usr/bin/\nCOPY assets/demo-bash /usr/bin/\nCOPY assets/hello-bash /usr/bin/\n\n# Create default container user <user>\nRUN groupadd -r user && useradd -lrm -s /bin/bash -g user user\nRUN usermod -aG sudo user && \\\n  sed -i -e \"s/%sudo.*/%sudo ALL=(ALL) NOPASSWD:ALL/g\" /etc/sudoers\n\n# Creating locations sample will need and giving permissions\n# to the default user\nRUN mkdir -p /opt/data/content\nRUN mkdir -p /opt/data/artifacts && chown user /opt/data/artifacts\nRUN mkdir -p /opt/data/duplicates && chown user /opt/data/duplicates\n# The following are locations used by nginx to produce HLS streams,\n# dump logs, etc.\nRUN mkdir -p /var/www/hls && chown user /var/www/hls\nRUN chown -R user /var/log/nginx\nRUN chown -R user /var/lib/nginx\n\n# Setting up sample\nARG SAMPLE=cdn\nCOPY . /tmp/src\nRUN cd /tmp/src/samples/$SAMPLE && ./setup.sh /opt/intel/samples && rm -rf /tmp/src\n\n# Setting up environment common for all samples\n\n# Declaring volumes which you might wish to optionally mount\n#  * /opt/data/content is where you can put your own content to access from inside\n#    the sample demos\n#  * /opt/data/artifacts is a location where sample will produce some output\n#    artifacts like generated or captured stream and logs. You can wish to twick\n#    this location to get artifacts on your host system\n#  * /var/www/hls is a location where sample demos will generate HLS streams. You\n#    might wish to twick this location to get access to these streams. Mind that\n#    this is server side raw HLS stream. If you run some demo client to capture\n#    streaming video - look in the /opt/data/artifacts\n\nVOLUME /opt/data/content\nVOLUME /opt/data/artifacts\nVOLUME /var/www/hls\n\n# Check running container healthy status with:\n#  docker inspect --format=\"{{json .State.Health}}\" <container-id>\nHEALTHCHECK CMD /usr/bin/demo-alive\n\n# hello-bash is a default command which will be executed by demo-bash if\n# user did not provide any arguments starting the container. Basically hello-bash\n# will print welcome message and enter regular bash with correct environment.\nCMD [\"/usr/bin/hello-bash\"]\n\n# demo-bash will execute whatever command is provided by the user making\n# sure that environment settings are correct.\nENTRYPOINT [\"/usr/bin/demo-bash\"]\n# ... end of custom installation rules\n\n# Custom component environment variables, if any...\nENV ONEVPL_SEARCH_PATH=/opt/intel/samples/lib/\n# ... end of custom environment variables\n\n\nUSER user\nWORKDIR /home/user\n"
}