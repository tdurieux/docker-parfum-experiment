{
  "startTime": 1674248074786,
  "endTime": 1674248075671,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 134
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 55,
        "columnStart": 2,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 77,
        "columnStart": 2,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-buster\n\n# ========================== BEGIN DOCKER SETUP ================================\n#\n# Docker related setup\n\n# Tell apt that we can't answer it's questions if it has any (time zone is a\n# common one)\nENV DEBIAN_FRONTEND noninteractive\n\n# The version of python we're using in pyXY format (changes with base image)\nARG PYTHON_SHORT_VERSION=py37\nENV PYTHON_SHORT_VERSION ${PYTHON_SHORT_VERSION}\n\n# Set current working directory\nWORKDIR /usr/src/dffml\n\n# Update existing packages\nRUN apt-get update && \\\n  apt-get upgrade -y && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# ==========================  END  DOCKER SETUP ================================\n\n\n# ========================== BEGIN GLOBAL DEPENDENCIES =========================\n#\n# Dependencies that are applicable to the main package and plugins, or just must\n# be installed first.\n\n# Install and upgrade\n# pip and setuptools, which are used to install other packages\n# twine, which is used to upload released packages to PyPi\nRUN python -m pip install --upgrade pip setuptools wheel\nRUN python -m pip install --upgrade twine\n\n# ==========================  END  GLOBAL DEPENDENCIES =========================\n\n\n# ====================== BEGIN NON PYTHON DEPENDENCIES =========================\n#\n# Dependencies for specific plugins that cannot be installed with pip\n\n# feature/git\n# operations/deploy\nRUN curl -f -o /tmp/tokei.tar.gz -L 'https://github.com/XAMPPRocky/tokei/releases/download/v12.0.4/tokei-x86_64-unknown-linux-gnu.tar.gz' && \\\n  sha384sum /tmp/tokei.tar.gz | grep \"^60ea048eca4d5e9f413400a561c775ccd21ffb63e3d15cc60703156bd634eb4c3ddec3bd8e8b8aabdaf97bb9b8d0ec11\" && \\\n  tar xvzf /tmp/tokei.tar.gz -C \"/usr/bin/\" && \\\n  rm /tmp/tokei.tar.gz && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y \\\n    git \\\n    subversion \\\n    cloc \\\n    openssl && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# ======================  END  NON PYTHON DEPENDENCIES =========================\n\n\n# ========================== BEGIN INSTALL DEPENDENCIES ========================\n#\n# Dependencies which must be installed prior to installing a plugin. If a plugin\n# requires something be installed, it must also ensure that those dependencies\n# get installed when we are running the tests for the main package (.) or the\n# docs (docs). Each if statement seen here will check if we are running tests\n# for the plugin, main package, or docs, and install if any of those conditions\n# are true.\n\n# model/autosklearn\n# .\n# docs\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y \\\n    build-essential \\\n    swig && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  python -m pip install pyrfr cython liac-arff\n\n# ==========================  END  INSTALL DEPENDENCIES ========================\n\n\n# ========================== BEGIN INSTALL DEPENDENCIES ========================\n#\n# Here we install DFFML and all the plugins\n\n# The release of dffml we're using, latest is the latest PyPi release, main is\n# the main branch\nARG DFFML_RELEASE=latest\nENV DFFML_RELEASE ${DFFML_RELEASE}\n\n# Copy over DFFML\nCOPY . /usr/src/dffml\n# Install the correct version of DFFML\nRUN /usr/src/dffml/.ci/dffml-install.sh\n\n# Copy over entrypoint script\nCOPY scripts/docker-entrypoint.sh /usr/bin/docker-entrypoint.sh\n\nENTRYPOINT [\"/usr/bin/docker-entrypoint.sh\"]\n"
}