{
  "startTime": 1674215326365,
  "endTime": 1674215327411,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:21.10\n\nENV TESTING_HOME=/testing\n\nENV GCC_HOME=$TESTING_HOME/gcc\nARG GCC_REPO=git://gcc.gnu.org/git/gcc.git\nARG GCC_VERSION=master\n\nENV LLVM_HOME=$TESTING_HOME/llvm\nARG LLVM_REPO=https://github.com/llvm/llvm-project.git\nARG LLVM_VERSION=main\n\nARG SDE_REPO=https://downloadmirror.intel.com/684899\nARG SDE_VERSION=sde-external-9.0.0-2021-11-07-lin\n\nENV YARPGEN_HOME=$TESTING_HOME/yarpgen\nARG YARPGEN_REPO=https://github.com/intel/yarpgen\nARG YARPGEN_VERSION=main\n\nENV BINUTILS_HOME=$TESTING_HOME/binutils\nARG BINUTILS_REPO=git://sourceware.org/git/binutils-gdb.git\n\nARG USER_AGENT=\"Mozilla/5.0\"\n\nRUN apt-get -y update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    bison \\\n    bzip2 \\\n    cmake \\\n    creduce \\\n    curl \\\n    flex \\\n    gcc \\\n    gcc-multilib \\\n    g++ \\\n    git \\\n    libgmp3-dev \\\n    libz-dev \\\n    ninja-build \\\n    python3 \\\n    texinfo \\\n    wget \\\n    xz-utils \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR $TESTING_HOME\n\nRUN git clone $YARPGEN_REPO $YARPGEN_HOME &&\\\n    cd $YARPGEN_HOME &&\\\n    git checkout $YARPGEN_VERSION\n\nRUN $YARPGEN_HOME/scripts/build_gcc.sh $GCC_REPO $GCC_VERSION\n\n# We want to test Sapphire Rapids target. The problem is that\n# the system default version of binutils doesn't support it yet.\n# Therefore, we have to build them by ourselves.\n# We should switch back to the system default version when it is updated.\nRUN $YARPGEN_HOME/scripts/build_binutils.sh $BINUTILS_REPO\n\nRUN $YARPGEN_HOME/scripts/build_llvm.sh $LLVM_REPO $LLVM_VERSION\n\nRUN wget -U $USER_AGENT --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 5 $SDE_REPO/$SDE_VERSION.tar.xz\nRUN tar -xf $SDE_VERSION.tar.xz && rm $SDE_VERSION.tar.xz\nENV PATH=$TESTING_HOME/$SDE_VERSION:$PATH\n\nRUN $YARPGEN_HOME/scripts/build_yarpgen.sh\n\nENV PATH=$GCC_HOME/bin_$GCC_VERSION/bin:$PATH\nENV LD_LIBRARY_PATH=$GCC_HOME/bin_$GCC_VERSION/lib64/:$LD_LIBRARY_PATH\n\nENV PATH=$BINUTILS_HOME/bin/bin:$PATH\nENV LD_LIBRARY_PATH=$BINUTILS_HOME/bin/lib/:$LD_LIBRARY_PATH\n\nENV PATH=$LLVM_HOME/bin_$LLVM_VERSION/bin/:$PATH\nENV LD_LIBRARY_PATH=$LLVM_HOME/bin_$LLVM_VERSION/lib/:$LD_LIBRARY_PATH\n\nARG RESULT_DIR\nENV RESULT_DIR=${RESULT_DIR:-$TESTING_HOME/result}\n\nCOPY docker-entrypoint.sh /\n# It is recommended to use a no-cache build, otherwise compiler won't be updated:\n# docker build --no-cache -t yarpgen-testing .\n#\n# Use this command to start a testing for 24-hours.\n# Feel free to change the parameters that are passed to run_gen.py\n# docker run --rm --name yarpgen-daily --mount source=yarpgen-result,target=/testing/result -e HOST_HOSTNAME=$(uname -n) yarpgen-testing -t 1440\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"-t 1\"]\n\n"
}