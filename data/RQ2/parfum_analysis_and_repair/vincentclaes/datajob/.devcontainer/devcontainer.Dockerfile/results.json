{
  "startTime": 1674251139640,
  "endTime": 1674251140487,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 5,
        "columnEnd": 63
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 50,
        "columnEnd": 116
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 5,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 5,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#-------------------------------------------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See https://go.microsoft.com/fwlink/?linkid=2090316 for license information.\n#-------------------------------------------------------------------------------------------------------------\n\n# Update the VARIANT arg in devcontainer.json to pick a Python version: 3, 3.8, 3.7, 3.6\nARG VARIANT=3.6\nFROM python:${VARIANT}\n\n# If you would prefer to have multiple Python versions in your container,\n# replace the FROM statement above with the following:\n#\n# FROM ubuntu:bionic\n# ARG PYTHON_PACKAGES=\"python3.5 python3.6 python3.7 python3.8 python3 python3-pip python3-venv\"\n# RUN apt-get update && apt-get install --no-install-recommends -yq software-properties-common \\\n#     && add-apt-repository ppa:deadsnakes/ppa && apt-get update \\\n#     && apt-get install -yq --no-install-recommends ${PYTHON_PACKAGES} \\\n#     && pip3 install --no-cache-dir --upgrade pip setuptools wheel\n\n# This Dockerfile adds a non-root user with sudo access. Use the \"remoteUser\"\n# property in devcontainer.json to use it. On Linux, the container user's GID/UIDs\n# will be updated to match your local UID/GID (when using the dockerFile property).\n# See https://aka.ms/vscode-remote/containers/non-root-user for details.\nARG USERNAME=vscode\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Uncomment the following COPY line and the corresponding lines in the `RUN` command if you wish to\n# include your requirements in the image itself. Only do this if your requirements rarely change.\n# COPY requirements.txt /tmp/pip-tmp/\n\n# Default set of utilities to install in a side virtual env\nARG DEFAULT_UTILS=\"\\\n  pylint \\\n  flake8 \\\n  autopep8 \\\n  black \\\n  pytest \\\n  yapf \\\n  mypy \\\n  pydocstyle \\\n  pycodestyle \\\n  bandit \\\n  virtualenv \\\n  pipenv \\\n  poetry\"\n\nENV PIPX_HOME=/usr/local/py-utils\nENV PIPX_BIN_DIR=${PIPX_HOME}/bin\nENV PATH=${PATH}:${PIPX_BIN_DIR}\n\n# Options for common package install script\nARG INSTALL_ZSH=\"true\"\nARG UPGRADE_PACKAGES=\"true\"\nARG COMMON_SCRIPT_SOURCE=\"https://raw.githubusercontent.com/microsoft/vscode-dev-containers/master/script-library/common-debian.sh\"\nARG COMMON_SCRIPT_SHA=\"dev-mode\"\n\n# Configure apt and install packages\nRUN apt-get update \\\n  && export DEBIAN_FRONTEND=noninteractive \\\n  #\n  # Verify git, common tools / libs installed, add/modify non-root user, optionally install zsh\n  && apt-get -y install --no-install-recommends curl ca-certificates 2>&1 \\\n  && curl -f -sSL ${COMMON_SCRIPT_SOURCE} -o /tmp/common-setup.sh \\\n  && ( [ \"${COMMON_SCRIPT_SHA}\" = \"dev-mode\" ] || ( echo \"${COMMON_SCRIPT_SHA}  */tmp/common-setup.sh\" | sha256sum -c -)) \\\n  && /bin/bash /tmp/common-setup.sh \"${INSTALL_ZSH}\" \"${USERNAME}\" \"${USER_UID}\" \"${USER_GID}\" \"${UPGRADE_PACKAGES}\" \\\n  && rm /tmp/common-setup.sh \\\n  #\n  # Setup default python tools in a venv via pipx to avoid conflicts\n  && mkdir -p ${PIPX_BIN_DIR} \\\n  && export PYTHONUSERBASE=/tmp/pip-tmp \\\n  && pip3 install --disable-pip-version-check --no-warn-script-location --no-cache-dir --user pipx \\\n  && /tmp/pip-tmp/bin/pipx install --pip-args=--no-cache-dir pipx \\\n  && echo \"${DEFAULT_UTILS}\" | xargs -n 1 /tmp/pip-tmp/bin/pipx install --system-site-packages --pip-args=--no-cache-dir \\\n  && chown -R ${USER_UID}:${USER_GID} ${PIPX_HOME} \\\n  && rm -rf /tmp/pip-tmp \\\n  #\n  # Tactically remove imagemagick due to https://security-tracker.debian.org/tracker/CVE-2019-10131\n  # Can leave in Dockerfile once upstream base image moves to > 7.0.7-28.\n  && apt-get purge -y imagemagick imagemagick-6-common \\\n  #\n  # Clean up\n  && apt-get autoremove -y \\\n  && apt-get clean -y \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Install github cli\nRUN apt-get update && apt-get -y --no-install-recommends install software-properties-common \\\n  && apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0 \\\n  && apt-add-repository https://cli.github.com/packages \\\n  && apt-get update \\\n  && apt-get -y --no-install-recommends install gh && rm -rf /var/lib/apt/lists/*;\n\n# Install AWS CLI\nRUN curl -f \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" \\\n  && unzip awscliv2.zip \\\n  && ./aws/install \\\n  && rm awscliv2.zip\n\n# install AWS CDK\n# this worked to install a specific node version\n# https://stackoverflow.com/a/62838796/1771155\nENV NVM_DIR /usr/local/nvm\nRUN mkdir -p /usr/local/nvm\nRUN curl -f -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nENV NODE_VERSION v14.13.1\nRUN /bin/bash -c \"source $NVM_DIR/nvm.sh && nvm install $NODE_VERSION && nvm use --delete-prefix $NODE_VERSION\"\n\nENV NODE_PATH $NVM_DIR/versions/node/$NODE_VERSION/lib/node_modules\nENV PATH      $NVM_DIR/versions/node/$NODE_VERSION/bin:$PATH\nENV AWS_DEFAULT_REGION=eu-west-1\nRUN npm install -g aws-cdk@1.109.0 && npm cache clean --force;\n"
}