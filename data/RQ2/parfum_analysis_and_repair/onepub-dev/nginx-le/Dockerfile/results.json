{
  "startTime": 1674254242624,
  "endTime": 1674254244029,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 10,
        "columnStart": 19,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 85,
        "columnStart": 19,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# builder\n# compiles the dart scripts.\nFROM ubuntu:20.04 as builder\n\n\nRUN apt update && apt install --no-install-recommends -y \\\n    ca-certificates \\\n    git \\\n    gnupg2 \\\n    openssh-client \\\n    wget && rm -rf /var/lib/apt/lists/*;\n\n\n# install dcli.\n# nginx-le build will update the '# flush-cache' to force a new download of dcli if the -u switch is passed\n# to the build command\n#RUN wget https://github.com/noojee/dcli/releases/download/latest.linux/dcli_install # flush-cache: 4a94d0b7-9d53-4f67-b5b9-56eebfd3d41c\nRUN wget https://github.com/noojee/dcli/releases/download/1.18.1/dcli_install # flush-cache: 4a94d0b7-9d53-4f67-b5b9-56eebfd3d41c\nRUN chmod +x dcli_install\nENV PATH=\"${PATH}:/usr/lib/dart/bin:/root/.pub-cache/bin\"\nRUN echo $PATH\nRUN ./dcli_install\n\n# looks like there is a problem with the dart archive\n# not setting the execute bit on the utils which\n# causes dcli compile to fail\nRUN chmod +x /usr/lib/dart/bin/utils/*\n\nRUN dcli version\n\n\nRUN mkdir -p /home/build/container/bin/cerbot_hooks\nRUN mkdir -p /home/build/container/lib\n\nRUN echo 'forcing source update' # update-source: 1604d2c3-be4c-4933-871a-207857ef3212\n\nCOPY container/bin /home/build/container/bin/\nCOPY container/lib /home/build/container/lib/\nCOPY container/pubspec.yaml /home/build/container\nCOPY container/analysis_options.yaml /home/build/container\n\nRUN mkdir -p /home/build/shared\nCOPY shared/bin /home/build/shared/bin/\nCOPY shared/lib /home/build/shared/lib/\nCOPY shared/pubspec.yaml /home/build/shared\nCOPY shared/analysis_options.yaml /home/build/shared\n\n\nWORKDIR /home/build\n\n# compile all the nginx-le tools.\nRUN dcli compile container/bin/*.dart\nRUN dcli compile container/bin/certbot_hooks/*.dart\n\n\n\n# CMD [\"/bin/bash\"]\n\n# Final image\nFROM ubuntu:20.04\n\nWORKDIR /\n\nRUN mkdir -p /home\nENV HOME=\"/home\"\n\n# set the timezone\nENV TZ=Australia/Melbourne\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n\nRUN apt  update && apt install --no-install-recommends -y \\\n    ca-certificates \\\n    dnsutils \\\n    gnupg \\\n    pip \\\n    nginx \\\n    openssl \\\n    software-properties-common \\\n    tzdata \\\n    vim \\\n    python3 \\\n    python3-venv \\\n    libaugeas0 \\\n    logrotate \\\n    gzip && rm -rf /var/lib/apt/lists/*;\n\nRUN python3 -m venv /opt/certbot/\nRUN /opt/certbot/bin/pip install --upgrade pip\nRUN /opt/certbot/bin/pip install certbot\nRUN ln -s /opt/certbot/bin/certbot /usr/bin/certbot\nRUN /opt/certbot/bin/pip install certbot-dns-cloudflare\n\n\n# config nginx\nRUN useradd nginx\n\n# setup nginx log files.\nRUN mkdir -p /var/nginx\n# make certain the log file exists so the LogsCommand works without errors.\nRUN touch /var/nginx/error.log\nRUN touch /var/nginx/access.log\n\n# we have two alternate configurations.\n# operating where a user of this container places the content they wish to serve.\n# acquire used when we don't have a cert and need to place the server it aquisition mode.\nRUN mkdir /etc/nginx/operating\nRUN mkdir /etc/nginx/acquire\n\n# nginx looks here for our certs.\nRUN mkdir /etc/nginx/certs\n\n# nginx defaults.conf looks here for .location and .upstream files\n# which need to be mounted via a volume mount.\nRUN mkdir /etc/nginx/include\n\n#\n# install certbot\n#\n\n\nENV LETS_ENCRYPT_ROOT_PATH=/etc/letsencrypt\n\n# root path for storing lets-encrypt certificates\n# This needs to be mapped to a persistent volume\n# so the certificates persist across sessions.\nRUN mkdir -p /etc/letsencrypt\n\n\n# create the log file so the logs command doesn't get upset.\nRUN mkdir -p /etc/letsencrypt/logs\nRUN touch /etc/letsencrypt/logs/letsencrypt.log\n\n# per generate diffie helman key exchange parameters\nRUN mkdir -p /etc/nginx/ssl/\nRUN openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048\n\n# location for the .well-know folder certbot will interact with.\nRUN mkdir -p /opt/letsencrypt/wwwroot/.well-known/acme-challenge\n\n#\n# Install the nginx-le components.\n#\n\n# create directory for nginx-le to save its runtime config.\nRUN mkdir -p /etc/nginx-le\n\n# copy the default nginx-le config in\nCOPY container/nginx_config/etc/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY container/nginx_config/etc/nginx/logrotate.conf /etc/nginx/logrotate.conf\nCOPY container/nginx_config/etc/nginx/operating/ /etc/nginx/operating\nCOPY container/nginx_config/etc/nginx/acquire/ /etc/nginx/acquire\n\n# lograte requires group and other to not have write access.\nRUN chmod 400  /etc/nginx/logrotate.conf\n\n\n# copy in the nginx-le compiled tools\nRUN mkdir -p /home/bin\nCOPY --from=builder /home/build/container/bin/service /home/bin/service\nCOPY --from=builder /home/build/container/bin/acquire /home/bin/acquire\nCOPY --from=builder /home/build/container/bin/revoke /home/bin/revoke\nCOPY --from=builder /home/build/container/bin/renew /home/bin/renew\nCOPY --from=builder /home/build/container/bin/logs /home/bin/logs\nCOPY --from=builder /home/build/container/bin/certificates /home/bin/certificates\nCOPY --from=builder /home/build/container/bin/certbot_hooks/auth_hook /home/bin/certbot_hooks/auth_hook\nCOPY --from=builder /home/build/container/bin/certbot_hooks/cleanup_hook /home/bin/certbot_hooks/cleanup_hook\nCOPY --from=builder /home/build/container/bin/certbot_hooks/deploy_hook /home/bin/certbot_hooks/deploy_hook\n\n\n\n# define the location of the Certbot hooks\nENV CERTBOT_AUTH_HOOK_PATH=\"/home/bin/certbot_hooks/auth_hook\"\nENV CERTBOT_CLEANUP_HOOK_PATH=\"/home/bin/certbot_hooks/cleanup_hook\"\nENV CERTBOT_DEPLOY_HOOK_PATH=\"/home/bin/certbot_hooks/deploy_hook\"\n\n\nEXPOSE 80 443\n\nCMD [\"/home/bin/service\"]\n\n"
}