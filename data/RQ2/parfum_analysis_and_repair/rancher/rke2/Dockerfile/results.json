{
  "startTime": 1674217864908,
  "endTime": 1674217866049,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 8,
        "columnEnd": 57
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 8,
        "columnEnd": 58
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 193,
        "lineEnd": 204,
        "columnStart": 7,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 193,
        "lineEnd": 204,
        "columnStart": 7,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG KUBERNETES_VERSION=dev\n\n# Build environment\nFROM rancher/hardened-build-base:v1.18.1b7 AS build\nARG DAPPER_HOST_ARCH\nENV ARCH $DAPPER_HOST_ARCH\nRUN set -x \\\n    && apk --no-cache add \\\n    bash \\\n    curl \\\n    file \\\n    git \\\n    libseccomp-dev \\\n    rsync \\\n    gcc \\\n    bsd-compat-headers \\\n    py-pip \\\n    pigz \\\n    tar \\\n    yq\n\nRUN if [ \"${ARCH}\" != \"s390x\" ]; then \\\n    \tapk --no-cache add mingw-w64-gcc; \\\n    fi\n\nFROM registry.suse.com/bci/bci-base AS rpm-macros\nRUN zypper install -y systemd-rpm-macros\n\n# Dapper/Drone/CI environment\nFROM build AS dapper\nENV DAPPER_ENV GODEBUG REPO TAG DRONE_TAG PAT_USERNAME PAT_TOKEN KUBERNETES_VERSION DOCKER_BUILDKIT DRONE_BUILD_EVENT IMAGE_NAME GCLOUD_AUTH ENABLE_REGISTRY\nARG DAPPER_HOST_ARCH\nENV ARCH $DAPPER_HOST_ARCH\nENV DAPPER_OUTPUT ./dist ./bin ./build\nENV DAPPER_DOCKER_SOCKET true\nENV DAPPER_TARGET dapper\nENV DAPPER_RUN_ARGS \"--privileged --network host -v /tmp:/tmp -v rke2-pkg:/go/pkg -v rke2-cache:/root/.cache/go-build -v trivy-cache:/root/.cache/trivy\"\nRUN if [ \"${ARCH}\" = \"amd64\" ] || [ \"${ARCH}\" = \"arm64\" ]; then \\\n    VERSION=0.50.0 OS=linux && \\\n    curl -f -sL \"https://github.com/vmware-tanzu/sonobuoy/releases/download/v${VERSION}/sonobuoy_${VERSION}_${OS}_${ARCH}.tar.gz\" | \\\n    tar -xzf - -C /usr/local/bin; \\\n    fi\nRUN curl -f -sL https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt) \\\n    /bin/linux/${ARCH}/kubectl -o /usr/local/bin/kubectl && \\\n    chmod a+x /usr/local/bin/kubectl; \\\n    pip install --no-cache-dir codespell\n\nRUN curl -f -sL https://raw.githubusercontent.com/golangci/golangci-lint/v1.45.2/install.sh | sh -s;\nRUN set -x \\\n    && apk --no-cache add \\\n    libarchive-tools \\\n    zstd \\\n    jq \\\n    python2 \\\n    \\\n    && if [ \"${ARCH}\" != \"s390x\" ]; then \\\n    \tapk add --no-cache rpm-dev; \\\n    fi\n\nRUN GOCR_VERSION=\"v0.5.1\" && \\\n        if [ \"${ARCH}\" = \"arm64\" ]; then \\\n        wget https://github.com/google/go-containerregistry/releases/download/${GOCR_VERSION}/go-containerregistry_Linux_arm64.tar.gz && \\\n        tar -zxvf go-containerregistry_Linux_arm64.tar.gz && \\\n        mv crane /usr/local/bin && \\\n        chmod a+x /usr/local/bin/crane; rm go-containerregistry_Linux_arm64.tar.gz \\\n        else \\\n        wget https://github.com/google/go-containerregistry/releases/download/${GOCR_VERSION}/go-containerregistry_Linux_x86_64.tar.gz && \\\n        tar -zxvf go-containerregistry_Linux_x86_64.tar.gz && \\\n        mv crane /usr/local/bin && \\\n        chmod a+x /usr/local/bin/crane; rm go-containerregistry_Linux_x86_64.tar.gz \\\n        fi\n\nRUN VERSION=0.16.0 && \\\n    if [ \"${ARCH}\" = \"arm64\" ]; then \\\n    wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-ARM64.tar.gz && \\\n    tar -zxvf trivy_${VERSION}_Linux-ARM64.tar.gz && \\\n    mv trivy /usr/local/bin; rm trivy_${VERSION}_Linux-ARM64.tar.gz \\\n    else \\\n    wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz && \\\n    tar -zxvf trivy_${VERSION}_Linux-64bit.tar.gz && \\\n    mv trivy /usr/local/bin; rm trivy_${VERSION}_Linux-64bit.tar.gz \\\n    fi\nWORKDIR /source\n\nCOPY --from=rpm-macros /usr/lib/rpm/macros.d/macros.systemd /usr/lib/rpm/macros.d\n# End Dapper stuff\n\n# Shell used for debugging\nFROM dapper AS shell\nRUN set -x \\\n    && apk --no-cache add \\\n    bash-completion \\\n    iptables \\\n    less \\\n    psmisc \\\n    rsync \\\n    socat \\\n    sudo \\\n    vim\n# For integration tests\nRUN go get github.com/onsi/ginkgo/v2 github.com/onsi/gomega/...\nRUN GO111MODULE=off GOBIN=/usr/local/bin go get github.com/go-delve/delve/cmd/dlv\nRUN echo 'alias abort=\"echo -e '\\''q\\ny\\n'\\'' | dlv connect :2345\"' >> /root/.bashrc\nENV PATH=/var/lib/rancher/rke2/bin:$PATH\nENV KUBECONFIG=/etc/rancher/rke2/rke2.yaml\nVOLUME /var/lib/rancher/rke2\n# This makes it so we can run and debug k3s too\nVOLUME /var/lib/rancher/k3s\n\nFROM build AS charts\nARG CHART_REPO=\"https://rke2-charts.rancher.io\"\nARG KUBERNETES_VERSION=\"\"\nARG CACHEBUST=\"cachebust\"\nCOPY charts/ /charts/\nRUN echo ${CACHEBUST}>/dev/null\nRUN CHART_VERSION=\"1.11.502\"                  CHART_FILE=/charts/rke2-cilium.yaml         CHART_BOOTSTRAP=true   /charts/build-chart.sh\nRUN CHART_VERSION=\"v3.22.2-build2022050902\"   CHART_FILE=/charts/rke2-canal.yaml          CHART_BOOTSTRAP=true   /charts/build-chart.sh\nRUN CHART_VERSION=\"v3.23.103\"                 CHART_FILE=/charts/rke2-calico.yaml         CHART_BOOTSTRAP=true   /charts/build-chart.sh\nRUN CHART_VERSION=\"v3.23.103\"                 CHART_FILE=/charts/rke2-calico-crd.yaml     CHART_BOOTSTRAP=true   /charts/build-chart.sh\nRUN CHART_VERSION=\"1.19.400\"                  CHART_FILE=/charts/rke2-coredns.yaml        CHART_BOOTSTRAP=true   /charts/build-chart.sh\nRUN CHART_VERSION=\"4.1.004\"                   CHART_FILE=/charts/rke2-ingress-nginx.yaml  CHART_BOOTSTRAP=false  /charts/build-chart.sh\nRUN CHART_VERSION=\"2.11.100-build2021111904\"  CHART_FILE=/charts/rke2-metrics-server.yaml CHART_BOOTSTRAP=false  /charts/build-chart.sh\nRUN CHART_VERSION=\"v3.8-build2021110403\"      CHART_FILE=/charts/rke2-multus.yaml         CHART_BOOTSTRAP=true   /charts/build-chart.sh\nRUN CHART_VERSION=\"1.2.201\"                   CHART_FILE=/charts/rancher-vsphere-cpi.yaml CHART_BOOTSTRAP=true   /charts/build-chart.sh\nRUN CHART_VERSION=\"2.5.1-rancher101\"          CHART_FILE=/charts/rancher-vsphere-csi.yaml CHART_BOOTSTRAP=true   /charts/build-chart.sh\nRUN CHART_VERSION=\"0.1.1300\"                  CHART_FILE=/charts/harvester-cloud-provider.yaml CHART_BOOTSTRAP=true /charts/build-chart.sh\nRUN CHART_VERSION=\"0.1.1100\"                  CHART_FILE=/charts/harvester-csi-driver.yaml     CHART_BOOTSTRAP=true /charts/build-chart.sh\nRUN rm -vf /charts/*.sh /charts/*.md\n\n# rke-runtime image\n# This image includes any host level programs that we might need. All binaries\n# must be placed in bin/ of the file image and subdirectories of bin/ will be flattened during installation.\n# This means bin/foo/bar will become bin/bar when rke2 installs this to the host\nFROM rancher/hardened-kubernetes:v1.24.2-rke2r1-build20220617 AS kubernetes\nFROM rancher/hardened-containerd:v1.6.6-k3s1-build20220606 AS containerd\nFROM rancher/hardened-crictl:v1.24.0-build20220506 AS crictl\nFROM rancher/hardened-runc:v1.1.2-build20220606 AS runc\n\nFROM scratch AS runtime-collect\nCOPY --from=runc \\\n    /usr/local/bin/runc \\\n    /bin/\nCOPY --from=crictl \\\n    /usr/local/bin/crictl \\\n    /bin/\nCOPY --from=containerd \\\n    /usr/local/bin/containerd \\\n    /usr/local/bin/containerd-shim \\\n    /usr/local/bin/containerd-shim-runc-v1 \\\n    /usr/local/bin/containerd-shim-runc-v2 \\\n    /usr/local/bin/ctr \\\n    /bin/\nCOPY --from=kubernetes \\\n    /usr/local/bin/kubectl \\\n    /usr/local/bin/kubelet \\\n    /bin/\nCOPY --from=charts \\\n    /charts/ \\\n    /charts/\n\nFROM scratch AS runtime\nCOPY --from=runtime-collect / /\n\nFROM ubuntu:20.04 AS test\nARG TARGETARCH\nVOLUME /var/lib/rancher/rke2\nVOLUME /var/lib/kubelet\nVOLUME /var/lib/cni\nVOLUME /var/log\nCOPY bin/rke2 /bin/\n# use built air-gap images\nCOPY build/images/rke2-images.linux-amd64.tar.zst /var/lib/rancher/rke2/agent/images/\nCOPY build/images.txt /images.txt\n\n# use rke2 bundled binaries\nENV PATH=/var/lib/rancher/rke2/bin:$PATH\n# for kubectl\nENV KUBECONFIG=/etc/rancher/rke2/rke2.yaml\n# for crictl\nENV CONTAINER_RUNTIME_ENDPOINT=\"unix:///run/k3s/containerd/containerd.sock\"\n# for ctr\nRUN mkdir -p /run/containerd \\\n    &&  ln -s /run/k3s/containerd/containerd.sock /run/containerd/containerd.sock\n# for go dns bug\nRUN mkdir -p /etc && \\\n    echo 'hosts: files dns' > /etc/nsswitch.conf\n# for conformance testing\nRUN chmod 1777 /tmp\nRUN set -x \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get -y update \\\n    && apt-get -y upgrade \\\n    && apt-get -y --no-install-recommends install \\\n    bash \\\n    bash-completion \\\n    ca-certificates \\\n    conntrack \\\n    ebtables \\\n    ethtool \\\n    iptables \\\n    jq \\\n    less \\\n    socat \\\n    vim && rm -rf /var/lib/apt/lists/*;\nENTRYPOINT [\"/bin/rke2\"]\nCMD [\"server\"]\n"
}