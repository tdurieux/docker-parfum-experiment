{
  "startTime": 1674219217614,
  "endTime": 1674219218577,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic\n# FROM arm64=arm64v8/ubuntu:bionic\n\n# get the apt-cacher proxy set\nARG APTPROXY=\n\nRUN echo \"Acquire::http { Proxy \\\"$APTPROXY\\\"; };\" >> /etc/apt/apt.conf.d/01proxy \\\n    && cat /etc/apt/apt.conf.d/01proxy \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        cpio \\\n        curl \\\n        dosfstools \\\n        gccgo \\\n        genisoimage \\\n        gettext \\\n        git \\\n        isolinux \\\n        less \\\n        libblkid-dev \\\n        libmount-dev \\\n        libselinux1-dev \\\n        locales \\\n        module-init-tools \\\n        mtools \\\n        openssh-client \\\n        pkg-config \\\n        qemu \\\n        qemu-kvm \\\n        rsync \\\n        sudo \\\n        syslinux-common \\\n        vim \\\n        wget \\\n        xorriso \\\n        xz-utils \\\n        telnet && rm -rf /var/lib/apt/lists/*;\n\n########## Dapper Configuration #####################\n\nENV DAPPER_ENV VERSION DEV_BUILD RUNTEST DEBUG APTPROXY ENGINE_REGISTRY_MIRROR KERNEL_CHECK APPEND_SYSTEM_IMAGES APPEND_USER_IMAGES\nENV DAPPER_DOCKER_SOCKET true\nENV DAPPER_SOURCE /go/src/github.com/rancher/os\nENV DAPPER_OUTPUT ./bin ./dist ./build/initrd ./build/kernel\nENV DAPPER_RUN_ARGS --privileged\nENV TRASH_CACHE ${DAPPER_SOURCE}/.trash-cache\nENV SHELL /bin/bash\nWORKDIR ${DAPPER_SOURCE}\n\n########## General Configuration #####################\nARG DAPPER_HOST_ARCH=amd64\nARG HOST_ARCH=${DAPPER_HOST_ARCH}\nARG ARCH=${HOST_ARCH}\n\nARG OS_REPO=rancher\nARG HOSTNAME_DEFAULT=rancher\nARG DISTRIB_ID=RancherOS\n\nARG SELINUX_POLICY_URL=https://github.com/rancher/refpolicy/releases/download/v0.0.3/policy.29\n\nARG KERNEL_VERSION=4.14.176-rancher\nARG KERNEL_URL_amd64=https://github.com/rancher/os-kernel/releases/download/v${KERNEL_VERSION}/linux-${KERNEL_VERSION}-x86.tar.gz\nARG KERNEL_URL_arm64=https://github.com/rancher/os-kernel/releases/download/v${KERNEL_VERSION}/linux-${KERNEL_VERSION}-arm64.tar.gz\n\nARG BUILD_DOCKER_URL_amd64=https://get.docker.com/builds/Linux/x86_64/docker-1.10.3\nARG BUILD_DOCKER_URL_arm64=https://github.com/rancher/docker/releases/download/v1.10.3-ros1/docker-1.10.3_arm64\n\nARG OS_RELEASES_YML=https://releases.rancher.com/os\n\nARG OS_SERVICES_REPO=https://raw.githubusercontent.com/${OS_REPO}/os-services\nARG IMAGE_NAME=${OS_REPO}/os\n\nARG OS_CONSOLE=default\nARG OS_AUTOFORMAT=false\n\nARG OS_BASE_URL_amd64=https://github.com/rancher/os-base/releases/download/v2018.02.11-1/os-base_amd64.tar.xz\nARG OS_BASE_URL_arm64=https://github.com/rancher/os-base/releases/download/v2018.02.11-1/os-base_arm64.tar.xz\n\nARG OS_INITRD_BASE_URL_amd64=https://github.com/rancher/os-initrd-base/releases/download/v2018.02.11-1/os-initrd-base-amd64.tar.gz\nARG OS_INITRD_BASE_URL_arm64=https://github.com/rancher/os-initrd-base/releases/download/v2018.02.11-1/os-initrd-base-arm64.tar.gz\n\nARG SYSTEM_DOCKER_VERSION=17.06-ros6\nARG SYSTEM_DOCKER_URL_amd64=https://github.com/rancher/os-system-docker/releases/download/${SYSTEM_DOCKER_VERSION}/docker-amd64-${SYSTEM_DOCKER_VERSION}.tgz\nARG SYSTEM_DOCKER_URL_arm64=https://github.com/rancher/os-system-docker/releases/download/${SYSTEM_DOCKER_VERSION}/docker-arm64-${SYSTEM_DOCKER_VERSION}.tgz\n\nARG USER_DOCKER_VERSION=19.03.8\nARG USER_DOCKER_ENGINE_VERSION=docker-${USER_DOCKER_VERSION}\n\nARG AZURE_SERVICE=false\nARG PROXMOXVE_SERVICE=false\n######################################################\n\n# Set up environment and export all ARGS as ENV\nENV ARCH=${ARCH} \\\n    HOST_ARCH=${HOST_ARCH} \\\n    XZ_DEFAULTS=\"-T0\"\n\nENV BUILD_DOCKER_URL=BUILD_DOCKER_URL_${ARCH} \\\n    BUILD_DOCKER_URL_amd64=${BUILD_DOCKER_URL_amd64} \\\n    BUILD_DOCKER_URL_arm64=${BUILD_DOCKER_URL_arm64} \\\n    DAPPER_HOST_ARCH=${DAPPER_HOST_ARCH} \\\n    DISTRIB_ID=${DISTRIB_ID} \\\n    DOWNLOADS=/usr/src/downloads \\\n    GOPATH=/go \\\n    GO_VERSION=1.8.5 \\\n    GOARCH=$ARCH \\\n    HOSTNAME_DEFAULT=${HOSTNAME_DEFAULT} \\\n    IMAGE_NAME=${IMAGE_NAME} \\\n    KERNEL_VERSION=${KERNEL_VERSION} \\\n    KERNEL_URL=KERNEL_URL_${ARCH} \\\n    KERNEL_URL_amd64=${KERNEL_URL_amd64} \\\n    KERNEL_URL_arm64=${KERNEL_URL_arm64} \\\n    OS_BASE_URL=OS_BASE_URL_${ARCH} \\\n    OS_BASE_URL_amd64=${OS_BASE_URL_amd64} \\\n    OS_BASE_URL_arm64=${OS_BASE_URL_arm64} \\\n    OS_INITRD_BASE_URL=OS_INITRD_BASE_URL_${ARCH} \\\n    OS_INITRD_BASE_URL_amd64=${OS_INITRD_BASE_URL_amd64} \\\n    OS_INITRD_BASE_URL_arm64=${OS_INITRD_BASE_URL_arm64} \\\n    OS_RELEASES_YML=${OS_RELEASES_YML} \\\n    OS_REPO=${OS_REPO} \\\n    OS_SERVICES_REPO=${OS_SERVICES_REPO} \\\n    OS_CONSOLE=${OS_CONSOLE} \\\n    OS_AUTOFORMAT=${OS_AUTOFORMAT} \\\n    REPO_VERSION=master \\\n    SELINUX_POLICY_URL=${SELINUX_POLICY_URL} \\\n    SYSTEM_DOCKER_URL=SYSTEM_DOCKER_URL_${ARCH} \\\n    SYSTEM_DOCKER_URL_amd64=${SYSTEM_DOCKER_URL_amd64} \\\n    SYSTEM_DOCKER_URL_arm64=${SYSTEM_DOCKER_URL_arm64} \\\n    USER_DOCKER_VERSION=${USER_DOCKER_VERSION} \\\n    USER_DOCKER_ENGINE_VERSION=${USER_DOCKER_ENGINE_VERSION} \\\n    AZURE_SERVICE=${AZURE_SERVICE} \\\n    PROXMOXVE_SERVICE=${PROXMOXVE_SERVICE}\nENV PATH=${GOPATH}/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p ${DOWNLOADS}\n\n# Download kernel\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\nRUN echo \"... Downloading  ${!KERNEL_URL}\"; \\\n    if [ -n \"${!KERNEL_URL}\" ]; then \\\n        curl -fL ${!KERNEL_URL} > ${DOWNLOADS}/kernel.tar.gz \\\n    ;fi\n\n# Download SELinux Policy\nRUN curl -pfL ${SELINUX_POLICY_URL} > ${DOWNLOADS}/$(basename ${SELINUX_POLICY_URL})\n\n# Install Go\nRUN wget -O - https://storage.googleapis.com/golang/go${GO_VERSION}.linux-${GOARCH}.tar.gz | tar -xzf - -C /usr/local && \\\n    go get github.com/rancher/trash\n\nRUN mkdir -p ${GOPATH}/src/golang.org/x && cd ${GOPATH}/src/golang.org/x/ && git clone https://github.com/golang/tools && \\\n    cd tools && git checkout 6adeb8aab2ded9eb693b831d5fd090c10a6ebdfa -b temp && go get golang.org/x/lint/golint\n\n# Install Host Docker\nRUN curl -fL ${!BUILD_DOCKER_URL} > /usr/bin/docker && \\\n    chmod +x /usr/bin/docker\n\n# Install dapper\nRUN curl -f -sL https://releases.rancher.com/dapper/latest/dapper-`uname -s`-`uname -m | sed 's/arm.*/arm/'` > /usr/bin/dapper && \\\n    chmod +x /usr/bin/dapper\n\nRUN cd ${DOWNLOADS} && \\\n    curl -pfL ${!OS_BASE_URL} | tar xvJf -\n\nENTRYPOINT [\"./scripts/entry\"]\nCMD [\"ci\"]\n"
}