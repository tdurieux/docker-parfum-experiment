{
  "startTime": 1674254968877,
  "endTime": 1674254969599,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Building this container:\n# docker-compose build --no-cache --progress=plain\n# Building will take some time, especially the libsass, unbound and nassl.\n# todo: fix nassl build, has the anoying unknown argument -m64, even though the shell is not -m64...\n# todo: the docker image is 1.5 gigabyte, which probably contains a lot of unneeded stuff\n# debian:10-slim is a bit smaller, with 1.4 gigabyte, which is still insane.\n# debugging the container if it does not start: docker run -it --entrypoint sh internetnl/internetnl\n# todo: given there is no mapping to redis from localhost, this has never worked...\n\n# Todo: reduce file size, use alpine instead of ubuntu. At least use debian, as the GUI is not needed.\n# Choose an LTS. The version mentioned was not supported for a while (19)\n# See the release schedule here: https://ubuntu.com/blog/what-is-an-ubuntu-lts-release\n# So it would be either 18.04, 20.04 or 22.04, debian buster....\nFROM debian:10-slim\n\nLABEL vendor=\"Internet Standards\" \\\n      license=\"Apache License, Version 2.0\"\n\nARG BRANCH\nENV APP_PATH /app\nENV DEBIAN_FRONTEND noninteractive\nENV BRANCH ${BRANCH:-master}\n\n# Configure the Internet.nl Django app, e.g. to know how to connect to RabbitMQ, Redis and PostgreSQL.\n# Default values for the environment variables referred to below are provided by the Docker image but can be\n# overridden at container start time.\n\n# The ENV variables are also available inside the container _and_ can be changed on startup of the container.\n# @see: https://stackoverflow.com/questions/39597925/how-do-i-set-environment-variables-during-the-build-in-docker\n# More details about specific settings in the shipped settings-dist.py file.\n# Cannot use the shipped environemnt file as the syntax is different and the values are specific.\nENV LDNS_DANE /usr/bin/ldns-dane\nENV TIME_ZONE UTC\nENV ADMIN_EMAIL admin@i.dont.exist\nENV ENABLE_BATCH False\nENV DB_NAME internetnl_db1\nENV DB_USER internetnl\nENV DB_PASSWORD password\nENV DB_HOST localhost\nENV DB_PORT 5432\nENV RABBIT_HOST localhost:15672\nENV CELERY_BROKER_URL amqp://guest@localhost//\nENV CELERY_RESULT_BACKEND redis://localhost:6379/0\nENV CACHE_LOCATION redis://localhost:6379/0\n\n# Stuff not in the settings.py file, but in the entrypoint of the container (entrypoint.sh)\nENV RUN_SERVER_CMD runserver\nENV LDNS_DANE_VALIDATION_DOMAIN internet.nl\n\n\n# Make port 8080 available to the world outside this container\nEXPOSE 8080\n\n# 19.04 is not supported anymore, use old-releases.ubuntu.com for the package maamger.\nRUN sed -i -re 's/([a-z]{2}\\.)?archive.ubuntu.com|security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list\n\n# Install required dependencies\n# swig is needed to build Unbound with Python bindings\n# gettext is needed by python manage.py compilemessages\n# libwww-perl is needed by make update_cert_fingerprints\n# libssl 1.1.1b was mentioned, without specific reasons. We use a different openssl in checks, so this can be the latest.\n# Python 3.7 was mentioned, but the software is also built for later versions. The system version is the one that will\n# build unbound the easiest. Other versions are _not_ included in debian/ubuntu by default and will require separate\n# builds and steps to get unbound to find the right libraries.\n# 18.4 has postgresql 10, not 11. 20.4 has 12. 20.4 uses python 3.8. https://packages.ubuntu.com/focal/python3\n# Bison is needed to compile unbound\n# # https://dajobe.org/blog/2015/04/18/making-debian-docker-images-smaller/\nARG BUILD_PACKAGES=\"build-essential \\\n        curl \\\n        gcc \\\n        gettext \\\n        git \\\n        ldnsutils \\\n        libevent-dev \\\n        libhiredis-dev \\\n        libssl-dev \\\n        libwww-perl \\\n        openssl \\\n        postgresql-client-11 \\\n        postgresql-server-dev-11 \\\n        python3-gdbm \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        python3-venv \\\n        swig3.0 \\\n        wget \\\n        bison \\\n        sudo\"\n\nRUN apt update && \\\n    apt upgrade -y && \\\n    apt install --no-install-recommends -y \\\n         $BUILD_PACKAGES \\\n    && rm -rf /var/lib/apt/lists/*\n    # && apt remove --purge -y $BUILD_PACKAGES $(apt-mark showauto) && rm -rf /var/lib/apt/lists/*\n\n\n# Create a user for the internetnl app to run as\nRUN useradd -ms /bin/bash -G sudo internetnl && echo \"internetnl ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/internetnl\n\n# Ensure python 3.7 and pip3 are available as 'python' and 'pip' respectively\n# probably not needed anymore given this is the system default...\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3.7 1 && \\\n    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1\n\n# Upgrade pip, and install setuptools (needed below to build Python whois)\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir setuptools\n\nWORKDIR ${APP_PATH}\n\n# Copy our files into the image. Doing this after and separately to installing\n# dependencies avoids re-installing dependencies when the set of dependencies\n# is unchanged. Do not copy any unneeded files.\n# todo: the app source should not be mixed with all kinds of other directories and junk\nCOPY --chown=internetnl:internetnl .well-known ${APP_PATH}/.well-known\nCOPY --chown=internetnl:internetnl bin ${APP_PATH}/bin\nCOPY --chown=internetnl:internetnl checks ${APP_PATH}/checks\nCOPY --chown=internetnl:internetnl documentation ${APP_PATH}/documentation\nCOPY --chown=internetnl:internetnl frontend ${APP_PATH}/frontend\nCOPY --chown=internetnl:internetnl interface ${APP_PATH}/interface\nCOPY --chown=internetnl:internetnl internetnl ${APP_PATH}/internetnl\nCOPY --chown=internetnl:internetnl remote_data ${APP_PATH}/remote_data\nCOPY --chown=internetnl:internetnl tests ${APP_PATH}/tests\nCOPY --chown=internetnl:internetnl frontend ${APP_PATH}/frontend\nCOPY --chown=internetnl:internetnl translations ${APP_PATH}/translations\nCOPY --chown=internetnl:internetnl Changelog.md ${APP_PATH}/Changelog\nCOPY --chown=internetnl:internetnl LICENSE.spdx ${APP_PATH}/LICENSE.spdx\nCOPY --chown=internetnl:internetnl Makefile ${APP_PATH}/Makefile\nCOPY --chown=internetnl:internetnl manage.py ${APP_PATH}/manage.py\nCOPY --chown=internetnl:internetnl README.md ${APP_PATH}/README.md\nCOPY --chown=internetnl:internetnl requirements.txt ${APP_PATH}/requirements.txt\nCOPY --chown=internetnl:internetnl requirements-dev.txt ${APP_PATH}/requirements-dev.txt\nCOPY --chown=internetnl:internetnl robots.txt ${APP_PATH}/robots.txt\nCOPY --chown=internetnl:internetnl setup.cfg ${APP_PATH}/setup.cfg\nCOPY --chown=internetnl:internetnl docker ${APP_PATH}/docker\n\n# Failed to find the swig tool:\nRUN ln -s /usr/bin/swig3.0 /usr/bin/swig\nRUN chmod +x ${APP_PATH}/docker/entrypoint.sh\n\nRUN make venv\nRUN chmod +x ${APP_PATH}/.venv/bin/activate\nRUN chmod +x ${APP_PATH}/docker/celery-ping.sh\nRUN chmod +x ${APP_PATH}/docker/postgres-ping.sh\n\n# Todo: this will currently not work on arm machines as somehow the build will still say arch -m64 during build.\n# RUN make nassl_complete\nRUN make unbound-3.7\nRUN make python-whois\n\n# Cleanup temporary build files\nRUN rm -rf nassl_freebsd\nRUN rm -rf unbound\nRUN rm -rf python-whois\n\n# Make sure internetnl user can access all code in the app.\nRUN chown -R internetnl:internetnl ${APP_PATH}\n\n# These manual steps should be the same as in the makefile of the project. Otherise it's basically impossible to maintain.\n# Therefore these are replaced with the few make commands above.\n# Install forked pythonwhois\n# WORKDIR /tmp/build/python-whois\n# RUN curl -fsSLo- 'https://github.com/internetstandards/python-whois/tarball/internetnl' | tar zx --strip-components 1\n# RUN python setup.py install\n\n# Build nassl from sources for deprecated protocol support and \"extra features\" compared to the stock package\n# Don't be misled by the 1.0.2e and master directory names for OpenSSL, these are the names required by the\n# NASSL build process and don't accurately reflect the versions of OpenSSL used, for that look at the versions\n# downloaded from GitHub by the commands below.\n# WORKDIR /tmp/build/nassl_free_bsd\n# RUN mkdir -p bin/openssl-legacy/freebsd64 \\\n#              bin/openssl-modern/freebsd64 \\\n#              openssl-1.0.2e \\\n#              openssl-master && \\\n#     curl -fsSLo- 'https://github.com/internetstandards/nassl/tarball/internetnl' | tar zx --strip-components 1 && \\\n#     curl -fsSLo- 'https://zlib.net/zlib-1.2.11.tar.gz' | tar zx && \\\n#     curl -fsSLo- 'https://github.com/PeterMosmans/openssl/tarball/1.0.2-chacha' | tar zx --strip-components 1 -C openssl-1.0.2e && \\\n#     curl -fsSLo- 'https://github.com/openssl/openssl/archive/OpenSSL_1_1_1c.tar.gz' | tar zx --strip-components 1 -C openssl-master && \\\n#     python build_from_scratch.py && \\\n#     python setup.py install\n\n# Unbound\n# See: https://github.com/internetstandards/unbound/blob/internetnl/README.md\n# TODO: edit internetnl/internetnl.c to match our deployment of Internet.nl\n#    ln -s /usr/local/bin/python3.5 /usr/local/bin/python3.5.6 && \\\n# WORKDIR /tmp/build/unbound\n# RUN curl -fsSLo- 'https://github.com/internetstandards/unbound/tarball/internetnl' | tar zx --strip-components 1 && \\\n#     ln -s /usr/bin/swig3.0 /usr/bin/swig && \\\n#     ./configure --enable-internetnl --with-pyunbound --with-libevent --with-libhiredis && \\\n#     make && \\\n#     make install\n\n# Point unbound-anchor and Python at the standard location for the unbound lib\nENV LD_LIBRARY_PATH /usr/local/lib\n\n# Configure Unbound for use by Internet.nl, in particular so that LDNS-DANE can depend on a resolver that is DNSSEC\n# enabled, which might not be true of the host resolver made available by Docker by default.\n# The \"unbound.conf\" was a product from the previous unbound step? Probably from the `make install`.\n# The previous version (1.3) did also not contain an unbound conf. So this probably never worked?\nUSER root\nWORKDIR /usr/local/etc/unbound\nRUN useradd unbound && \\\n    cp unbound.conf unbound.conf.org && \\\n    sed -e 's/# auto-trust-anchor-file:/auto-trust-anchor-file:/' \\\n        -e 's/# control-enable: no/control-enable: yes/' \\\n        unbound.conf.org > unbound.conf && \\\n    unbound-control-setup && \\\n    unbound-anchor || test $? -eq 1 && \\\n    chown -R unbound: .\n\n\nUSER internetnl\n\n# Prepare translations\nWORKDIR ${APP_PATH}\nRUN make translations\n\n# Setup the entrypoint command which will be executed when a container built from this image is run\nENTRYPOINT [\"/app/docker/entrypoint.sh\"]\n"
}