{
  "startTime": 1674249856213,
  "endTime": 1674249857270,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 9,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build Debian package using dh-virtualenv\n#\n# To create a package for Stretch in `dist/`, call:\n#\n#   ./build.sh debian:stretch\n\n# Build arguments, as provided by 'build.sh'\nARG DIST_ID=\"debian\"\nARG CODENAME=\"stretch\"\nARG PYVERSION=\"3\"\nARG PKGNAME\n\n# Other build arguments (adapt as needed)\nARG NODEREPO=\"node_12.x\"\nARG DEB_POOL=\"http://ftp.nl.debian.org/debian/pool/main\"\n\n## Start package builder image for the chosen platform\nFROM ${DIST_ID}:${CODENAME} AS dpkg-build\n\n# Pass build args into image scope\nARG CODENAME\nARG PYVERSION\nARG PKGNAME\nARG NODEREPO\nARG DEB_POOL\n\n# Install build tools and package build deps including nodejs\nRUN ( test \"${CODENAME}\" = \"xenial\" \\\n        && echo \"deb [trusted=yes] http://ppa.launchpad.net/deadsnakes/ppa/ubuntu ${CODENAME} main\" \\\n            >/etc/apt/sources.list.d/deadsnakes.list || : ) \\\n    && env LANG=C apt-get update -qq -o Acquire::Languages=none \\\n    && env LANG=C DEBIAN_FRONTEND=noninteractive apt-get install \\\n        -yqq --no-install-recommends -o Dpkg::Options::=--force-unsafe-io \\\n        \"\" \\\n        apt-transport-https \\\n        apt-utils \\\n        build-essential \\\n        curl \\\n        debhelper \\\n        devscripts \\\n        equivs \\\n        gnupg2 \\\n        gzip \\\n        libjs-sphinxdoc \\\n        libparse-debianchangelog-perl \\\n        lsb-release \\\n        python${PYVERSION} \\\n        python${PYVERSION}-venv \\\n        python${PYVERSION}-tk \\\n        python${PYVERSION}-dev \\\n        python3-pkg-resources \\\n        python3-setuptools \\\n        python3-venv \\\n        sphinx-rtd-theme-common \\\n        tar \\\n        \"\" \\\n        libcurl4-openssl-dev \\\n        libffi-dev \\\n        libfontconfig1 \\\n        libfreetype6-dev \\\n        libjpeg-dev \\\n        libncurses5-dev \\\n        libncursesw5-dev \\\n        libssl-dev \\\n        libxml2-dev \\\n        libxslt1-dev \\\n        libyaml-dev \\\n        libz-dev \\\n        libzmq3-dev \\\n    && ( curl -f -sL https://deb.nodesource.com/gpgkey/nodesource.gpg.key \\\n         | env APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=true apt-key add -) \\\n    && echo \"deb https://deb.nodesource.com/${NODEREPO} ${CODENAME} main\" \\\n            >/etc/apt/sources.list.d/nodesource.list \\\n    && apt-get update -qq -o Acquire::Languages=none \\\n    && env LANG=C DEBIAN_FRONTEND=noninteractive apt-get install \\\n        -yqq --no-install-recommends -o Dpkg::Options::=--force-unsafe-io nodejs \\\n    && apt-get clean && rm -rf \"/var/lib/apt/lists\"/*\n\n# Uncomment and adapt these ENV instructions to use a local PyPI mirror\n# (examples for devpi and JFrog Artifactory)\n#ENV PIP_TRUSTED_HOST=\"devpi.local\"\n#ENV PIP_INDEX_URL=\"http://${PIP_TRUSTED_HOST}:3141/root/pypi/+simple/\"\n#ENV PIP_TRUSTED_HOST=\"artifactory.local\"\n#ENV PIP_INDEX_URL=\"https://${PIP_TRUSTED_HOST}/artifactory/api/pypi/pypi.python.org/simple\"\n\n# Install updated Python tooling and a current 'dh-virtualenv'\nWORKDIR /dpkg-build\nADD \"${DEB_POOL}/d/dh-virtualenv/dh-virtualenv_1.1-1_all.deb\" ./\nRUN dpkg -i --force-unsafe-io \\\n         --ignore-depends=python:any \\\n         --ignore-depends=virtualenv \\\n         --ignore-depends=sphinx-rtd-theme-common \\\n         *_all.deb \\\n    && python${PYVERSION} -m easy_install pip \\\n    && python${PYVERSION} -m pip install -U setuptools wheel\n\n# Build project and show metadata of built package\nCOPY ./ ./\nRUN hr() { printf '\\n   %-74s\\n' \"[$1]\" | tr ' ' = ; } \\\n    && hr Versions && python${PYVERSION} -m pip --version && dh_virtualenv --version \\\n    && sed -i -r \\\n           -e \"1s/(UNRELEASED|unstable|jessie|stretch|xenial|bionic)/$(lsb_release -cs)/g\" \\\n           debian/changelog \\\n    && dpkg-buildpackage -us -uc -b && mkdir -p /dpkg && cp -pl /${PKGNAME}[-_]* /dpkg \\\n    && hr DPKG-Info && dpkg-deb -I /dpkg/${PKGNAME}_*.deb\n"
}