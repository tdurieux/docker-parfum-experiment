{
  "startTime": 1674249555480,
  "endTime": 1674249556014,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16 AS builder\nWORKDIR /srv/www\n\n# make node_modules cached.\n# Src: https://nodesource.com/blog/8-protips-to-start-killing-it-when-dockerizing-node-js/\n#\nCOPY package.json package-lock.json ./\nRUN npm install && npm cache clean --force;\n\n# Other files, so that other files do not interfere with node_modules cache\n#\nCOPY . .\n\n# These will be captured by process.env in next.config.js\nARG LOCALE=en_US\nARG APP_ID=DEV\n\n# Generate storybook files\nRUN npm run build-storybook -- -c .storybook/ -o public/storybook/\n\n# Generate .next, which includes absolute path to package so it must be done\n# within container.\n#\nRUN npm run build\n\nRUN npm prune --production\n\n#########################################\nFROM node:16-alpine\n\nWORKDIR /srv/www\nEXPOSE 3000\n\n# Note: using npm start here will cause error when exiting the container\nCMD [\"node_modules/.bin/pm2-runtime\", \"ecosystem.config.js\"]\n\nCOPY package.json package-lock.json next.config.js ecosystem.config.js server.js ./\nCOPY --from=builder /srv/www/.next ./.next\nCOPY --from=builder /srv/www/public ./public\nCOPY --from=builder /srv/www/node_modules ./node_modules\n"
}