{
  "startTime": 1674216222037,
  "endTime": 1674216224622,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 263,
        "lineEnd": 264,
        "columnStart": 1,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 270,
        "lineEnd": 270,
        "columnStart": 1,
        "columnEnd": 149
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 276,
        "lineEnd": 276,
        "columnStart": 1,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 282,
        "lineEnd": 282,
        "columnStart": 1,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 291,
        "lineEnd": 291,
        "columnStart": 2,
        "columnEnd": 133
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 303,
        "lineEnd": 303,
        "columnStart": 2,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 320,
        "lineEnd": 320,
        "columnStart": 15,
        "columnEnd": 189
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 327,
        "lineEnd": 327,
        "columnStart": 1,
        "columnEnd": 98
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 8,
        "columnEnd": 58
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 265,
        "lineEnd": 265,
        "columnStart": 1,
        "columnEnd": 120
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 283,
        "lineEnd": 283,
        "columnStart": 1,
        "columnEnd": 123
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 19,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 55,
        "lineEnd": 56,
        "columnStart": 19,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 114,
        "lineEnd": 116,
        "columnStart": 2,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 19,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 174,
        "lineEnd": 217,
        "columnStart": 1,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 289,
        "lineEnd": 289,
        "columnStart": 2,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 303,
        "lineEnd": 303,
        "columnStart": 2,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedDockerfile": "ARG KUBE_VER=v1.21.2\nARG SECCOMP_VER=2.3.1-2.1+deb9u1\nARG DOCKER_VER=20.10.7\n# we currently use our own flannel fork: gravitational/flannel\nARG FLANNEL_VER=v0.10.5-gravitational\nARG HELM_VER=2.16.12\nARG HELM3_VER=3.3.4\nARG COREDNS_VER=1.7.0\nARG NODE_PROBLEM_DETECTOR_VER=v0.6.4\nARG CNI_VER=0.8.6\nARG IPTABLES_VER=v1.8.5\nARG PLANET_UID=980665\nARG PLANET_GID=980665\nARG GO_VERSION=1.17.5\nARG ALPINE_VERSION=3.12\nARG DEBIAN_IMAGE=quay.io/gravitational/debian-mirror@sha256:4b6ec644c29e4964a6f74543a5bf8c12bed6dec3d479e039936e4a37a8af9116\nARG GO_BUILDER_VERSION=go1.17.5-stretch\nARG AWS_ENCRYPTION_PROVIDER_VER=c4abcb30b4c1ab1961369e1e50a98da2cedb765d\n# TODO(dima): update to 2.7.2 release once available\n# ARG DISTRIBUTION_VER=release/2.7\nARG DISTRIBUTION_VER=v2.7.1-gravitational\nARG ARTEFACTS_DIR=_build\n\nARG PLANET_PKG_PATH=/gopath/src/github.com/gravitational/planet\nARG PLANET_BUILDFLAGS=\"-tags 'selinux sqlite_omit_load_extension'\"\n\n# ETCD Versions to include in the release\n# This list needs to include every version of etcd that we can upgrade from + latest\n# Version log\n# v3.3.4\n# v3.3.9  - 5.2.x,\n# v3.3.11 - 5.5.x,\n# v3.3.12 - 6.3.x, 6.1.x, 5.5.x\n# v3.3.15 - 6.3.x\n# v3.3.20 - 6.3.x, 6.1.x, 5.5.x\n# v3.3.22 - 6.3.x, 6.1.x, 5.5.x\n# v3.4.3  - 7.0.x\n# v3.4.7  - 7.0.x\n# v3.4.9  - 7.0.x\nARG ETCD_VER=\"v3.3.12 v3.3.15 v3.3.20 v3.3.22 v3.4.3 v3.4.7 v3.4.9\"\nARG ETCD_LATEST_VER=v3.4.9\n\n# go builder\nFROM golang:${GO_VERSION}-stretch AS gobase\nRUN apt install -y --no-install-recommends git && rm -rf /var/lib/apt/lists/*;\n\nFROM alpine:${ALPINE_VERSION} AS downloader\nRUN apk add --no-cache curl tar && mkdir -p /tmp\n\nFROM ${DEBIAN_IMAGE} AS iptables-builder\nARG IPTABLES_VER\nRUN --mount=type=cache,sharing=locked,target=/var/cache/apt--mount=type=cache,sharing=locked,target=/var/lib/apt \\\n\tset -ex && \\\n\tapt-get update && apt-get install -y --no-install-recommends \\\n\t\tgit pkg-config autoconf automake libtool libmnl-dev make build-essential && rm -rf /var/lib/apt/lists/*;\nRUN set -ex && \\\n        mkdir /tmp/iptables.build /tmp/iptables.local && \\\n        git clone git://git.netfilter.org/iptables.git --branch ${IPTABLES_VER} --single-branch /tmp/iptables.build && \\\n        cd /tmp/iptables.build && \\\n        ./autogen.sh && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-nftables --prefix=/usr/local && \\\n        make && \\\n        make install\n\n# Builder box\n# FIXME(dima): for Go1.16 use:\n# go install github.com/gravitational/version/cmd/linkflags@latest\nARG GO_BUILDER_VERSION\nFROM quay.io/gravitational/debian-venti:${GO_BUILDER_VERSION} AS planet-builder-base\nRUN apt-get update && apt-get install --no-install-recommends -y libc6-dev libudev-dev && mkdir -p /tmp && \\\n\tGO111MODULE=on go install github.com/gravitational/version/cmd/linkflags@0.0.2 && rm -rf /var/lib/apt/lists/*;\n\nFROM planet-builder-base AS planet-builder\nENV PATH=\"$PATH:/gopath/bin\"\nWORKDIR /gopath/src/github.com/gravitational/planet\nRUN --mount=target=. --mount=target=/root/.cache,type=cache --mount=target=/go/pkg/mod,type=cache \\\n\tset -ex && \\\n\tCGO_LDFLAGS_ALLOW=\".*\" \\\n\tGOOS=linux GOARCH=amd64 GO111MODULE=on \\\n\tgo build -mod=vendor -ldflags \"$(linkflags -pkg=. -verpkg=github.com/gravitational/version)\" -tags \"selinux sqlite_omit_load_extension\" -o /planet ./tool/planet/...\n\nFROM planet-builder-base AS docker-import-builder\nWORKDIR /gopath/src/github.com/gravitational/planet\nRUN --mount=target=. --mount=target=/root/.cache,type=cache --mount=target=/go/pkg/mod,type=cache \\\n\tset -ex && \\\n\tGOOS=linux GOARCH=amd64 \\\n\tgo build -mod=vendor -o /docker-import github.com/gravitational/planet/tool/docker-import\n\nFROM gobase AS create-tarball-builder\nWORKDIR /go/src/github.com/gravitational/planet\nRUN --mount=target=. --mount=target=/root/.cache,type=cache --mount=target=/go/pkg/mod,type=cache \\\n\tset -ex && \\\n\tGOOS=linux GOARCH=amd64 GCO_ENABLED=0 \\\n\tgo build -mod=vendor -o /create-tarball ./tool/create-tarball/...\n\n# OS base image\n# debian:stretch-backports tagged 20200501\nFROM ${DEBIAN_IMAGE} AS os\nARG SECCOMP_VER\n# planet user to use inside the rootfs tarball. This serves as a placeholder\n# and the files will be owned by the actual planet user after extraction\nARG PLANET_UID\nARG PLANET_GID\n\nENV DEBIAN_FRONTEND noninteractive\n\nCOPY ./build.assets/docker/os-rootfs/ /\n\nRUN --mount=type=cache,sharing=locked,target=/var/cache/apt--mount=type=cache,sharing=locked,target=/var/lib/apt \\\n\tset -ex; \\\n\tif ! command -v gpg > /dev/null; then \\\n\t\tapt-get update; \\\n\t\tapt-get install -y --no-install-recommends \\\n\t\tgnupg2 \\\n\t\tdirmngr; rm -rf /var/lib/apt/lists/*; \\\n\tfi\n\nRUN --mount=type=cache,target=/var/cache/apt,rw--mount=type=cache,target=/var/lib/apt,rw \\\n\tset -ex && \\\n\tsed -i 's/main/main contrib non-free/g' /etc/apt/sources.list && \\\n\tapt-get update && apt-get -q --no-install-recommends -y install apt-transport-https \\\n\t&& apt-get install --no-install-recommends -q -y apt-utils less locales \\\n\t&& apt-get install --no-install-recommends -t stretch-backports -q -y systemd && rm -rf /var/lib/apt/lists/*;\n\n# Set locale to en_US.UTF-8\nRUN locale-gen \\\n\t&& locale-gen en_US.UTF-8 \\\n\t&& dpkg-reconfigure locales\n\n# https://github.com/systemd/systemd/blob/v230/src/shared/install.c#L413\n# Exit code 1 is either created successfully or symlink already exists\n# Exit codes < 0 are failures\nRUN systemctl set-default multi-user.target; if [ \"$?\" -lt 0 ]; then exit $?; fi;\nRUN set -ex && systemctl mask \\\n\tcgproxy.service cgmanager.service \\\n\tapt-daily.service apt-daily-upgrade.service \\\n\tlvm2-monitor.service lvm2-lvmetad.service lvm2-lvmetad.socket \\\n\tblk-availability.service \\\n\t# Mask timers\n\tapt-daily.timer apt-daily-upgrade.timer \\\n\t# Mask mount units and getty service so that we don't get login prompt\n\tsystemd-remount-fs.service dev-hugepages.mount sys-fs-fuse-connections.mount \\\n\tgetty.target console-getty.service;\n\n# TODO(r0mant): Disable *iscsi* services since they may be running on host\n#               In the future we will need to enable them conditionally to\n#               be able to support OpenEBS cStor engine out of the box\nRUN set -ex && \\\n\tsystemctl mask iscsi.service iscsid.service open-iscsi.service systemd-udevd.service\n\nENV LANGUAGE en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nENV LC_CTYPE en_US.UTF-8\nENV PAGER /usr/bin/less\nENV LESS -isM\n\n# Base planet image\nFROM os AS base\nARG SECCOMP_VER\nARG PLANET_UID\nARG PLANET_GID\n\nENV DEBIAN_FRONTEND noninteractive\n\nCOPY --from=iptables-builder /usr/local/ /usr/local/\n\n# FIXME: allowing downgrades and pinning the version of libip4tc0 for iptables\n# as the package has a dependency on the older version as the one available.\nRUN --mount=type=cache,target=/var/cache/apt,rw--mount=type=cache,target=/var/lib/apt,rw \\\n\tset -ex && \\\n\tapt-get update && \\\n\tapt-get install -q -y --allow-downgrades --no-install-recommends \\\n\tbridge-utils \\\n\tseccomp=$SECCOMP_VER \\\n\tbash-completion \\\n\tkmod \\\n\tlibip4tc0=1.6.0+snapshot20161117-6 \\\n\tebtables \\\n\tlibsqlite3-0 \\\n\te2fsprogs \\\n\tlibncurses5 \\\n\tnet-tools \\\n\tcurl \\\n\tiproute2 \\\n\tlsb-base \\\n\tdash \\\n\tca-certificates \\\n\taufs-tools \\\n\txfsprogs \\\n\tdbus \\\n\tdnsutils \\\n\tethtool \\\n\tsysstat \\\n\tnano \\\n\tvim \\\n\tiotop \\\n\thtop \\\n\tifstat \\\n\tiftop \\\n\ttraceroute \\\n\ttcpdump \\\n\tprocps \\\n\tcoreutils \\\n\tlsof \\\n\tsocat \\\n\tnmap \\\n\tnetcat \\\n\tnfs-common \\\n\tjq \\\n\tconntrack \\\n\topen-iscsi \\\n\tstrace \\\n\tnetbase \\\n\tfile \\\n\tbsdmainutils; rm -rf /var/lib/apt/lists/*; \\\n\t# update loader's cache after pulling in iptables build\n\tldconfig\n\nRUN set -ex && \\\n\tgroupadd --system --non-unique --gid ${PLANET_GID} planet && \\\n\tuseradd --system --non-unique --no-create-home -g ${PLANET_GID} -u ${PLANET_UID} planet && \\\n\tgroupadd --system docker && \\\n\tusermod -a -G planet root && \\\n\tusermod -a -G docker planet;\n\nFROM gobase AS flannel-builder\nARG FLANNEL_VER\nRUN --mount=target=/root/.cache,type=cache --mount=target=/go/pkg/mod,type=cache \\\n\tset -ex && \\\n\tmkdir -p /go/src/github.com/coreos && \\\n\tcd /go/src/github.com/coreos && \\\n\tgit clone https://github.com/gravitational/flannel -b ${FLANNEL_VER} --depth 1 && \\\n\tcd /go/src/github.com/coreos/flannel && \\\n\tgo build -mod=vendor -o /flanneld .\n\nFROM gobase AS aws-encryption-builder\nARG AWS_ENCRYPTION_PROVIDER_VER\nRUN --mount=target=/root/.cache,type=cache --mount=target=/go/pkg/mod,type=cache \\\n\tset -ex && \\\n\tmkdir -p /go/src/github.com/kubernetes-sigs && \\\n\tcd /go/src/github.com/kubernetes-sigs && \\\n\tgit clone https://github.com/kubernetes-sigs/aws-encryption-provider && \\\n\tcd /go/src/github.com/kubernetes-sigs/aws-encryption-provider && \\\n\tgit checkout ${AWS_ENCRYPTION_PROVIDER_VER} && \\\n\tmake build-server && \\\n\tcp /go/src/github.com/kubernetes-sigs/aws-encryption-provider/bin/aws-encryption-provider /aws-encryption-provider\n\nFROM gobase AS distribution-builder\nARG DISTRIBUTION_VER\nENV GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GO111MODULE=off\nWORKDIR /go/src/github.com/docker/distribution\nRUN --mount=target=/root/.cache,type=cache --mount=target=/go/pkg/mod,type=cache \\\n\tset -ex && \\\n\tgit clone https://github.com/gravitational/distribution -b ${DISTRIBUTION_VER} --depth 1 . && \\\n\tgo build -a -installsuffix cgo -o /registry -ldflags \"-X `go list ./version`.Version=${DISTRIBUTION_VER} -X `go list ./version`.Package=planet/docker/distribution -w\" ./cmd/registry\n\nFROM downloader AS cni-downloader\nARG CNI_VER\nRUN set -ex && \\\n\tmkdir -p /opt/cni/bin && \\\n\tcurl -f -L --retry 5 \\\n\thttps://github.com/containernetworking/plugins/releases/download/v${CNI_VER}/cni-plugins-linux-amd64-v${CNI_VER}.tgz -o /tmp/cni.tar.gz && \\\n\ttar -xzvf /tmp/cni.tar.gz --no-same-owner -C /opt/cni/bin ./bridge ./loopback ./host-local ./portmap ./tuning ./flannel && rm /tmp/cni.tar.gz\n\nFROM downloader AS coredns-downloader\nARG COREDNS_VER\nRUN set -ex && \\\n\tcurl -f -L --retry 5 https://github.com/coredns/coredns/releases/download/v${COREDNS_VER}/coredns_${COREDNS_VER}_linux_amd64.tgz -o /tmp/coredns.tar.gz && \\\n\ttar xvzf /tmp/coredns.tar.gz --no-same-owner -C / coredns\n\nFROM downloader AS helm-downloader\nARG HELM_VER\nRUN set -ex && \\\n\tcurl -f https://get.helm.sh/helm-v${HELM_VER}-linux-amd64.tar.gz -o /tmp/helm.tar.gz && \\\n\ttar xvzf /tmp/helm.tar.gz --no-same-owner --strip-components=1 -C / linux-amd64/helm\n\nFROM downloader AS helm3-downloader\nARG HELM3_VER\nRUN set -ex && \\\n\tcurl -f https://get.helm.sh/helm-v${HELM3_VER}-linux-amd64.tar.gz -o /tmp/helm3.tar.gz && \\\n\ttar --transform='flags=r;s|helm|helm3|' -xvzf /tmp/helm3.tar.gz --no-same-owner --strip-components=1 -C / linux-amd64/helm && rm /tmp/helm3.tar.gz\n\nFROM downloader AS k8s-downloader\nARG KUBE_VER\nENV DOWNLOAD_URL=https://storage.googleapis.com/kubernetes-release/release/${KUBE_VER}/bin/linux/amd64\nENV BINARIES=\"kube-apiserver kube-controller-manager kube-scheduler kubectl kube-proxy kubelet\"\nRUN set -ex && \\\n\tfor r in ${BINARIES}; do \\\n\n\t\tcurl -f --retry 100 --retry-delay 0 --connect-timeout 10 --max-time 300 --tlsv1.2 --silent --show-error -o /tmp/$r ${DOWNLOAD_URL}/$r; \\\n\t\tchmod +x /tmp/$r; \\\n\tdone \\\n\t;\n\nFROM downloader AS etcd-downloader\nARG ETCD_VER\nENV OS=linux\nENV ARCH=amd64\nRUN set -ex && \\\n\tmkdir -p /tmp/bin/ && \\\n\tcd /tmp && \\\n\tfor v in ${ETCD_VER}; do \\\n\n\t\tcurl -f -L https://github.com/etcd-io/etcd/releases/download/$v/etcd-$v-${OS}-${ARCH}.tar.gz -O; \\\n\t\ttar xf /tmp/etcd-$v-${OS}-${ARCH}.tar.gz \\\n\t\t\t--no-same-owner \\\n\t\t\t--strip-components 1 \\\n\t\t\t--directory /tmp/bin/ \\\n\t\t\t--transform=\"s|etcd$|etcd-$v|\" \\\n\t\t\tetcd-$v-${OS}-${ARCH}/etcd; \\\n\t\ttar xf /tmp/etcd-$v-${OS}-${ARCH}.tar.gz \\\n\t\t\t--no-same-owner \\\n\t\t\t--strip-components 1 \\\n\t\t\t--directory /tmp/bin/ \\\n\t\t\t--transform=\"s|etcdctl$|etcdctl-cmd-$v|\" \\\n\t\t\tetcd-$v-${OS}-${ARCH}/etcdctl; \\\n\tdone \\\n\t;\n\nFROM downloader AS node-problem-detector-downloader\nARG NODE_PROBLEM_DETECTOR_VER\nRUN set -ex && curl -f -L --retry 5 https://github.com/kubernetes/node-problem-detector/releases/download/${NODE_PROBLEM_DETECTOR_VER}/node-problem-detector-${NODE_PROBLEM_DETECTOR_VER}.tar.gz | tar xz --no-same-owner -C /tmp/\n\n# docker.mk\nFROM downloader AS docker-downloader\nARG DOCKER_VER\nRUN set -ex && \\\n\tmkdir -p /docker && \\\n\tcurl -f -L --retry 5 https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VER}.tgz | tar xvz --no-same-owner --strip-components=1 -C /docker\n\nFROM base AS rootfs\nARG ETCD_LATEST_VER\nARG ARTEFACTS_DIR\n\n# systemd.mk\nRUN set -ex && \\\n\tmkdir -p \\\n\t\t/lib/systemd/system/systemd-journald.service.d/ \\\n\t\t/etc/systemd/system.conf.d/ \\\n\t\t/etc/docker/offline/\nCOPY ./build.assets/makefiles/base/systemd/journald.conf /lib/systemd/system/systemd-journald.service.d/\nCOPY ./build.assets/makefiles/base/systemd/system.conf /etc/systemd/system.conf.d/\n\n# containers.mk\nCOPY ${ARTEFACTS_DIR}/nettest.tar.gz /etc/docker/offline/\nCOPY ${ARTEFACTS_DIR}/pause.tar.gz /etc/docker/offline/\nCOPY ./build.assets/makefiles/master/k8s-master/offline-container-import.service /lib/systemd/system/\nRUN set -ex && \\\n\tln -sf /lib/systemd/system/offline-container-import.service /lib/systemd/system/multi-user.target.wants/\n\n# network.mk\nCOPY --from=flannel-builder /flanneld /usr/bin/flanneld\nCOPY ./build.assets/makefiles/base/network/flanneld.service /lib/systemd/system/\n# Setup cni and include flannel as a plugin\nRUN set -ex && mkdir -p /etc/cni/net.d/ /opt/cni/bin\nCOPY --from=cni-downloader /opt/cni/bin/ /opt/cni/bin/\n\n# scripts to wait for etcd/flannel to come up\nRUN --mount=target=/host \\\n\tset -ex && \\\n\tmkdir -p /usr/bin/scripts && \\\n\tinstall -m 0755 /host/build.assets/makefiles/base/network/wait-for-etcd.sh /usr/bin/scripts && \\\n\tinstall -m 0755 /host/build.assets/makefiles/base/network/wait-for-flannel.sh /usr/bin/scripts && \\\n\tinstall -m 0755 /host/build.assets/makefiles/base/network/setup-etc.sh /usr/bin/scripts\n\n# encryption.mk\nCOPY --from=aws-encryption-builder /aws-encryption-provider /usr/bin/aws-encryption-provider\nCOPY ./build.assets/makefiles/encryption/aws-encryption-provider.service /lib/systemd/system/\nRUN set -ex && \\\n\tmkdir -p /etc/kmsplugin && \\\n\tchmod o+t /etc/kmsplugin && \\\n\tchmod a+rwx /etc/kmsplugin\n\n# node-problem-detector.mk\nCOPY --from=node-problem-detector-downloader /tmp/bin/ /usr/bin\nCOPY ./build.assets/makefiles/base/node-problem-detector/node-problem-detector.service /lib/systemd/system/\nRUN set -ex && ln -sf /lib/systemd/system/node-problem-detector.service /lib/systemd/system/multi-user.target.wants/\n\n# dns.mk\nRUN set -ex && mkdir -p /etc/coredns/configmaps/ /usr/lib/sysusers.d/\nCOPY ./build.assets/makefiles/base/dns/coredns.service /lib/systemd/system/\nRUN set -ex && ln -sf /lib/systemd/system/coredns.service /lib/systemd/system/multi-user.target.wants/\n\n# docker.mk\nCOPY ./build.assets/makefiles/base/docker/docker.service /lib/systemd/system/\nCOPY ./build.assets/makefiles/base/docker/docker.socket /lib/systemd/system/\nENV REGISTRY_ALIASES=\"apiserver:5000 leader.telekube.local:5000 leader.gravity.local:5000 registry.local:5000\"\nRUN set -ex && \\\n\tln -sf /lib/systemd/system/docker.service /lib/systemd/system/multi-user.target.wants/ && \\\n\tfor r in ${REGISTRY_ALIASES}; do \\\n\t\tmkdir -p /etc/docker/certs.d/$r; \\\n\t\tln -sf /var/state/root.cert /etc/docker/certs.d/$r/$r.crt; \\\n\t\tln -sf /var/state/kubelet.cert /etc/docker/certs.d/$r/client.cert; \\\n\t\tln -sf /var/state/kubelet.key /etc/docker/certs.d/$r/client.key; \\\n\tdone;\nRUN --mount=target=/host \\\n\tset -ex && \\\n\tinstall -m 0755 /host/build.assets/makefiles/base/docker/unmount-devmapper.sh /usr/bin/scripts/\nCOPY --from=docker-downloader /docker/ /usr/bin/\n\n# agent.mk\nCOPY ./build.assets/makefiles/base/agent/planet-agent.service /lib/systemd/system\nRUN set -ex && \\\n\tln -sf /lib/systemd/system/planet-agent.service /lib/systemd/system/multi-user.target.wants/\n\n# kubernetes.mk\nCOPY --from=k8s-downloader /tmp/ /usr/bin/\nCOPY --from=helm-downloader /helm /usr/bin/\nCOPY --from=helm3-downloader /helm3 /usr/bin/\nCOPY --from=coredns-downloader /coredns /usr/bin/\nCOPY --from=docker-import-builder /docker-import /usr/bin/\nCOPY ./build.assets/makefiles/master/k8s-master/*.service /lib/systemd/system/\nRUN --mount=target=/host \\\n\tset -ex && \\\n\tcp -TRv -p /host/build.assets/makefiles/master/k8s-master/rootfs/etc/kubernetes /etc/kubernetes && \\\n\tln -sf /lib/systemd/system/kube-kubelet.service /lib/systemd/system/multi-user.target.wants/ && \\\n\tln -sf /lib/systemd/system/kube-proxy.service /lib/systemd/system/multi-user.target.wants/ && \\\n\tmkdir -p /usr/bin/scripts && \\\n\tinstall -m 0755 /host/build.assets/makefiles/master/k8s-master/cluster-dns.sh /usr/bin/scripts/\n# etcd.mk\nCOPY --from=etcd-downloader /tmp/bin/ /usr/bin/\nCOPY --from=planet-builder /planet /usr/bin/\nCOPY ./build.assets/makefiles/etcd/etcd.service /lib/systemd/system/\nCOPY ./build.assets/makefiles/etcd/etcd-upgrade.service /lib/systemd/system/\nCOPY ./build.assets/makefiles/etcd/etcd-gateway.dropin /lib/systemd/system/\nCOPY ./build.assets/makefiles/etcd/etcdctl3 /usr/bin/etcdctl3\nCOPY ./build.assets/makefiles/etcd/etcdctl /usr/bin/etcdctl\nRUN set -ex && \\\n\tchmod +x /usr/bin/etcdctl3 /usr/bin/etcdctl && \\\n\tln -sf /lib/systemd/system/etcd.service /lib/systemd/system/multi-user.target.wants/ && \\\n\t# mask the etcd-upgrade service so that it can only be run if intentionally unmasked\n\tln -sf /dev/null /etc/systemd/system/etcd-upgrade.service && \\\n\t# write to the release file to indicate the latest release\n\techo PLANET_ETCD_VERSION=${ETCD_LATEST_VER} >> /etc/planet-release\n\n# registry.mk\nCOPY --from=distribution-builder /registry /usr/bin/registry\nCOPY ./build.assets/makefiles/base/docker/registry.service /lib/systemd/system\nCOPY ./build.assets/docker/registry/config.yml /etc/docker/registry/\nRUN set -ex && \\\n\tln -sf /lib/systemd/system/registry.service /lib/systemd/system/multi-user.target.wants/\n\nFROM gobase AS tarball-builder\nARG ETCD_LATEST_VER\nARG KUBE_VER\nARG FLANNEL_VER\nARG DOCKER_VER\nARG HELM_VER\nARG HELM3_VER\nARG COREDNS_VER\nARG NODE_PROBLEM_DETECTOR_VER\nENV REPLACE_ETCD_LATEST_VERSION=${ETCD_LATEST_VER}\nENV REPLACE_KUBE_LATEST_VERSION=${KUBE_VER}\nENV REPLACE_FLANNEL_LATEST_VERSION=${FLANNEL_VER}\nENV REPLACE_DOCKER_LATEST_VERSION=${DOCKER_VER}\nENV REPLACE_HELM_LATEST_VERSION=${HELM_VER}\nENV REPLACE_HELM3_LATEST_VERSION=${HELM3_VER}\nENV REPLACE_COREDNS_LATEST_VERSION=${COREDNS_VER}\nENV REPLACE_NODE_PROBLEM_DETECTOR_LATEST_VERSION=${NODE_PROBLEM_DETECTOR_VER}\nCOPY ./build.assets/docker/os-rootfs/etc/planet/orbit.manifest.json /output/\nRUN --mount=from=rootfs,src=/,target=/output/rootfs \\\n --mount=from=create-tarball-builder,src=/create-tarball,target=/create-tarball \\\n\tset -ex && /create-tarball /output /planet.tar.gz\n\nFROM scratch AS binary-releaser\nCOPY --from=planet-builder /planet /\n\nFROM scratch AS releaser\nCOPY --from=tarball-builder /planet.tar.gz /\n\nFROM releaser\n"
}