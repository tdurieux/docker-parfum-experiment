{
  "startTime": 1674218541397,
  "endTime": 1674218543387,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG python_tag=3.9-slim-bullseye\n\n\nFROM docker.io/library/python:${python_tag} AS poetry\n\nWORKDIR /app\nCOPY pyproject.toml poetry.lock ./\nRUN python -m pip install poetry\nRUN poetry export --format requirements.txt \\\n\t\t--extras sqlite \\\n\t\t--extras postgres \\\n\t\t--extras mysql \\\n\t\t> requirements.txt\n\n\nFROM docker.io/library/python:${python_tag} AS dependencies\n\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends --yes openssh-client \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nCOPY --from=poetry /app/requirements.txt ./\nRUN python -m pip install --requirement requirements.txt \\\n\t&& rm -rf ~/.cache\n\n\nFROM poetry AS build\n\nCOPY fact/ ./fact/\nRUN poetry build --format wheel\n\n\nFROM dependencies AS production\n\nCOPY --from=build /app/dist/ ./dist/\nRUN python -m pip install ./dist/* \\\n\t&& rm -rf ~/.cache ./dist\n\n\nFROM production AS worker\n\nENTRYPOINT [\"python\", \"-m\", \"fact.worker\"]\nCMD [\"--controller-addr\", \"controller:5123\"]\n\n\nFROM production AS controller\n\nENTRYPOINT [\"python\", \"-m\", \"fact.controller\"]\nCMD [\"--listen-addr\", \"0.0.0.0:5123\"]\n"
}