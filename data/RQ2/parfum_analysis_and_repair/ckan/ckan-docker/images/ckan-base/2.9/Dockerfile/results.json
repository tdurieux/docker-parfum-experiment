{
  "startTime": 1674220682610,
  "endTime": 1674220683656,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.13\n\n# Internal environment variables\nENV APP_DIR=/srv/app\nENV SRC_DIR=/srv/app/src\nENV CKAN_INI=${APP_DIR}/ckan.ini\nENV PIP_SRC=${SRC_DIR}\nENV CKAN_STORAGE_PATH=/var/lib/ckan\nENV GIT_URL=https://github.com/ckan/ckan.git\n# CKAN version to build\nENV GIT_BRANCH=ckan-2.9.5\n# Customize these on the .env file if needed\nENV CKAN_SITE_URL=http://localhost:5000\nENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars\n\nWORKDIR ${APP_DIR}\n\n# Install necessary packages to run CKAN\nRUN apk add --no-cache tzdata \\\n        git \\\n        gettext \\\n        postgresql-client \\\n        python3 \\\n        apache2-utils \\\n        libxml2 \\\n        libxslt \\\n        musl-dev \\\n        uwsgi-http \\\n        uwsgi-corerouter \\\n        uwsgi-python3 \\\n        py3-gevent \\\n        uwsgi-gevent \\\n        libmagic \\\n        curl \\\n        sudo && \\\n    # Packages to build CKAN requirements and plugins\n    apk add --no-cache --virtual .build-deps \\\n        postgresql-dev \\\n        gcc \\\n        make \\\n        g++ \\\n        autoconf \\\n        automake \\\n\t    libtool \\\n        python3-dev \\\n        py3-virtualenv \\\n        libxml2-dev \\\n        libxslt-dev \\\n        linux-headers\n\n# Create SRC_DIR and install pip\nRUN mkdir -p ${SRC_DIR} && \\\n    # Install pip\n    curl -f -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python3 ${SRC_DIR}/get-pip.py && \\\n    rm -rf ${SRC_DIR}/get-pip.py\n\n# Set up Python3 virtual environment\nRUN cd ${APP_DIR} && \\\n    python3 -m venv ${APP_DIR} && \\\n    source ${APP_DIR}/bin/activate\n\n# Virtual environment binaries/scripts to be used first\nENV PATH=${APP_DIR}/bin:${PATH}  \n\n# Install CKAN, uwsgi, ckanext-envvars and generate CKAN config file\nRUN pip3 install --no-cache-dir -e git+${GIT_URL}@${GIT_BRANCH} #egg=ckan && \\\n    pip3 install uwsgi && \\\n    cd ${SRC_DIR}/ckan && \\\n    cp who.ini ${APP_DIR} && \\\n    pip3 install --no-cache-dir -r requirement-setuptools.txt && \\\n    pip3 install --no-cache-dir --no-binary :all: -r requirements.txt && \\\n    # Install CKAN envvars to support loading config from environment variables\n    pip3 install --no-cache-dir -e git+https://github.com/okfn/ckanext-envvars.git#egg=ckanext-envvars && \\\n    # Create and update CKAN config\n    ckan generate config ${CKAN_INI}\n\n# Install and configure supervisor\nRUN pip3 install --no-cache-dir supervisor && \\\nmkdir /etc/supervisord.d\n\n# Copy setup files\nCOPY 2.9/setup ${APP_DIR}\nRUN mv ${APP_DIR}/supervisord.conf /etc/supervisord.conf\n\n# Create a local user and group to run the app\nRUN addgroup -g 92 -S ckan && \\\n    adduser -u 92 -h /srv/app -H -D -S -G ckan ckan\n\n# Create local storage folder\nRUN mkdir -p $CKAN_STORAGE_PATH && \\\n    chown -R ckan:ckan $CKAN_STORAGE_PATH\n\n# Create entrypoint directory for children image scripts\nONBUILD RUN mkdir /docker-entrypoint.d\n\nRUN chown ckan -R /srv/app\n\nEXPOSE 5000\n\nHEALTHCHECK --interval=10s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit 1\n\nCMD [\"/srv/app/start_ckan.sh\"]"
}