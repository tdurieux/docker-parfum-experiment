{
  "startTime": 1674249234536,
  "endTime": 1674249235979,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 8,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 0,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM amazonlinux:2.0.20200722.0\n\nENV OPENCV_VERSION=4.5.0\n\nWORKDIR /\n\nRUN yum update -y && \\\n    yum groupinstall -y \"Development Tools\" && \\\n    yum install -y \\\n        wget openssl-devel cmake3 && rm -rf /var/cache/yum\n\n# Setup opencv and opencv-contrib source\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && \\\n    rm ${OPENCV_VERSION}.zip && \\\n    mv opencv-${OPENCV_VERSION} opencv && \\\n    wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && \\\n    rm ${OPENCV_VERSION}.zip && \\\n    mv opencv_contrib-${OPENCV_VERSION} opencv_contrib\n\n# Build OpenCV\nRUN cd opencv && mkdir build && cd build && \\\n    cmake3 \\\n    -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules \\\n    -D CMAKE_BUILD_TYPE=RELEASE \\\n    -D BUILD_SHARED_LIBS=OFF \\\n    -D ENABLE_CXX11=ON \\\n    -D BUILD_EXAMPLES=OFF \\\n    -D BUILD_DOCS=OFF \\\n    -D BUILD_PERF_TESTS=OFF \\\n    -D BUILD_TESTS=OFF \\\n    -D BUILD_JAVA=OFF \\\n    -D BUILD_opencv_app=OFF \\\n    -D BUILD_opencv_java_bindings_generator=OFF \\\n    -D BUILD_opencv_python_bindings_generator=OFF \\\n    -D BUILD_opencv_python_tests=OFF \\\n    -D BUILD_opencv_ts=OFF \\\n    -D BUILD_opencv_js=OFF \\ \n    -D BUILD_opencv_bioinspired=OFF \\\n    -D BUILD_opencv_ccalib=OFF \\\n    -D BUILD_opencv_datasets=OFF \\\n    -D BUILD_opencv_dnn_objdetect=OFF \\\n    -D BUILD_opencv_dpm=OFF \\\n    -D BUILD_opencv_fuzzy=OFF \\\n    -D BUILD_opencv_gapi=OFF \\\n    -D BUILD_opencv_intensity_transform=OFF \\\n    -D BUILD_opencv_mcc=OFF \\\n    -D BUILD_opencv_rapid=OFF \\\n    -D BUILD_opencv_reg=OFF \\\n    -D BUILD_opencv_stereo=OFF \\\n    -D BUILD_opencv_structured_light=OFF \\\n    -D BUILD_opencv_surface_matching=OFF \\\n    -D BUILD_opencv_videostab=OFF \\\n    -D WITH_GSTREAMER=OFF \\ \n    -D OPENCV_ENABLE_NONFREE=ON \\\n    .. && make -j8 && make install\n\n# Download OpenCvSharp\nRUN wget https://github.com/shimat/opencvsharp/archive/master.zip && \\\n    unzip master.zip && rm master.zip && \\\n    mv opencvsharp-master opencvsharp && \\\n    cd opencvsharp\n\n# Install the Extern lib.\nRUN mkdir /opencvsharp/make && cd /opencvsharp/make && \\\n    cmake3 -D CMAKE_INSTALL_PREFIX=/opencvsharp/make /opencvsharp/src && \\\n    make -j && make install && \\\n    rm -rf /opencv && \\\n    rm -rf /opencv_contrib && \\\n    mkdir /artifacts && \\\n    cp /opencvsharp/make/OpenCvSharpExtern/libOpenCvSharpExtern.so /artifacts/ && \\\n    cp /artifacts/libOpenCvSharpExtern.so /usr/lib64/\n#RUN ldd /artifacts/libOpenCvSharpExtern.so\n\n# Test OpenCvSharpExtern\nRUN echo -e \"\\n\\\nint core_Mat_sizeof(); \\n\\\nint main(){ \\n\\\n  int i = core_Mat_sizeof(); \\n\\\n  printf(\\\"sizeof(Mat) = %d\\\", i); \\n\\\n  return 0; \\n\\\n}\" > /test.c && \\\n    gcc -I./ -L. test.c -o test -lOpenCvSharpExtern && \\\n    ./test && \\\n    rm -f /test*\n\nRUN rm -rf /opencvsharp\n\n# Simple console app test using NuGet\nRUN rpm -Uvh https://packages.microsoft.com/config/centos/8/packages-microsoft-prod.rpm && \\\nyum install -y dotnet-sdk-3.1 && rm -rf /var/cache/yum\nRUN dotnet --info\nRUN dotnet new console -f netcoreapp3.1 -o \"ConsoleApp01\" && cd /ConsoleApp01 && \\\n    echo -e \"\\n\\\nusing System; \\n\\\nusing OpenCvSharp; \\n\\\nclass Program{ \\n\\\n  static void Main(){ \\n\\\n    Console.WriteLine(Cv2.GetTickCount()); \\n\\\n    using var mat = new Mat(1, 1, MatType.CV_8UC1); \\n\\\n    Console.WriteLine(mat.CvPtr); \\n\\\n  } \\n\\\n}\" > Program.cs && \\\n    dotnet add package OpenCvSharp4 && \\\n    dotnet run && \\\n    rm -rf /ConsoleApp01\n"
}