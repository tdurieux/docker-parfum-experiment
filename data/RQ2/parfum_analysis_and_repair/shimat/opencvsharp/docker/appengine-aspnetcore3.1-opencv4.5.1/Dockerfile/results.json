{
  "startTime": 1674250704725,
  "endTime": 1674250706405,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "FROM gcr.io/google-appengine/aspnetcore:3.1.9\n\nENV OPENCV_VERSION=4.5.1\n\nWORKDIR /\n\n# Install opencv dependencies\nRUN apt-get update && apt-get -y install --no-install-recommends \\\n    apt-transport-https \\\n    wget \\\n    unzip \\\n    curl \\\n    ca-certificates \\\n    build-essential \\\n    cmake \\\n    git \\\n    gfortran \\\n    libjpeg8-dev \\\n    libpng-dev \\\n    software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\" && \\\n    apt-get update && apt-get -y install --no-install-recommends \\\n    libjasper1 \\\n    libtiff-dev \\\n    libavcodec-dev \\\n    libavformat-dev \\\n    libswscale-dev \\\n    libdc1394-22-dev \\\n    libxine2-dev \\\n    libv4l-dev && rm -rf /var/lib/apt/lists/*;\nRUN cd /usr/include/linux && ln -s -f ../libv4l1-videodev.h videodev.h && cd ~ && \\\n    apt-get -y install --no-install-recommends \\\n    libgtk2.0-dev libtbb-dev qt5-default \\\n    libatlas-base-dev \\\n    libfaac-dev \\\n    libmp3lame-dev \\\n    libtheora-dev \\\n    libvorbis-dev \\\n    libxvidcore-dev \\\n    libopencore-amrnb-dev \\\n    libopencore-amrwb-dev \\\n    libavresample-dev \\\n    x264 \\\n    v4l-utils \\\n    libwebp-dev \\\n    tesseract-ocr libtesseract-dev libleptonica-dev && rm -rf /var/lib/apt/lists/*;\n\n# Setup opencv and opencv-contrib source\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && \\\n    rm ${OPENCV_VERSION}.zip && \\\n    mv opencv-${OPENCV_VERSION} opencv && \\\n    wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && \\\n    rm ${OPENCV_VERSION}.zip && \\\n    mv opencv_contrib-${OPENCV_VERSION} opencv_contrib\n\n# Build OpenCV\nRUN cd opencv && mkdir build && cd build && \\\n    cmake \\\n    -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules \\\n    -D CMAKE_BUILD_TYPE=RELEASE \\\n    -D BUILD_SHARED_LIBS=OFF \\\n    -D ENABLE_CXX11=ON \\\n    -D BUILD_EXAMPLES=OFF \\\n    -D BUILD_DOCS=OFF \\\n    -D BUILD_PERF_TESTS=OFF \\\n    -D BUILD_TESTS=OFF \\\n    -D BUILD_JAVA=OFF \\\n    -D BUILD_opencv_app=OFF \\\n    -D BUILD_opencv_java_bindings_generator=OFF \\\n    -D BUILD_opencv_python_bindings_generator=OFF \\\n    -D BUILD_opencv_python_tests=OFF \\\n    -D BUILD_opencv_ts=OFF \\\n    -D BUILD_opencv_js=OFF \\ \n    -D BUILD_opencv_bioinspired=OFF \\\n    -D BUILD_opencv_ccalib=OFF \\\n    -D BUILD_opencv_datasets=OFF \\\n    -D BUILD_opencv_dnn_objdetect=OFF \\\n    -D BUILD_opencv_dpm=OFF \\\n    -D BUILD_opencv_fuzzy=OFF \\\n    -D BUILD_opencv_gapi=OFF \\\n    -D BUILD_opencv_intensity_transform=OFF \\\n    -D BUILD_opencv_mcc=OFF \\\n    -D BUILD_opencv_rapid=OFF \\\n    -D BUILD_opencv_reg=OFF \\\n    -D BUILD_opencv_stereo=OFF \\\n    -D BUILD_opencv_structured_light=OFF \\\n    -D BUILD_opencv_surface_matching=OFF \\\n    -D BUILD_opencv_videostab=OFF \\\n    -D WITH_GSTREAMER=OFF \\ \n    -D OPENCV_ENABLE_NONFREE=ON \\\n    .. && make -j6 && make install && ldconfig\n\n# Download OpenCvSharp\nRUN git clone https://github.com/shimat/opencvsharp.git && cd opencvsharp\n\n# Install the Extern lib.\nRUN mkdir /opencvsharp/make && cd /opencvsharp/make && \\\n    cmake -D CMAKE_INSTALL_PREFIX=/opencvsharp/make /opencvsharp/src && \\\n    make -j && make install && \\\n    rm -rf /opencv && \\\n    rm -rf /opencv_contrib && \\\n    cp /opencvsharp/make/OpenCvSharpExtern/libOpenCvSharpExtern.so /usr/lib/\n\n# Test OpenCvSharpExtern\nRUN echo \"\\n\\\n#include <stdio.h> \\n\\\nint core_Mat_sizeof(); \\n\\\nint main(){ \\n\\\n  int i = core_Mat_sizeof(); \\n\\\n  printf(\\\"sizeof(Mat) = %d\\\", i); \\n\\\n  return 0; \\n\\\n}\" > /test.c && \\\n    gcc -I./ -L./ test.c -o test -lOpenCvSharpExtern && \\\n    LD_LIBRARY_PATH=. ./test && \\\n    rm -f /test*\n\nRUN rm -rf /opencvsharp\n\n# Simple console app test using NuGet\nRUN dotnet new console -f netcoreapp3.1 -o \"ConsoleApp01\" && cd /ConsoleApp01 && \\\n    echo \"\\n\\\nusing System; \\n\\\nusing OpenCvSharp; \\n\\\nclass Program{ \\n\\\n  static void Main(){ \\n\\\n    Console.WriteLine(Cv2.GetTickCount()); \\n\\\n    using var mat = new Mat(1, 1, MatType.CV_8UC1); \\n\\\n    Console.WriteLine(mat.CvPtr); \\n\\\n  } \\n\\\n}\" > Program.cs && \\\n    dotnet add package OpenCvSharp4 && \\\n    dotnet run && \\\n    rm -rf /ConsoleApp01\n"
}