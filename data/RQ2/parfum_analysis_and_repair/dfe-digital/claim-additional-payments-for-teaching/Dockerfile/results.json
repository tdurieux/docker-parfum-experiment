{
  "startTime": 1674252829475,
  "endTime": 1674252830546,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 140
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 2,
        "columnEnd": 46
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 2,
        "columnEnd": 33
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ------------------------------------------------------------------------------\n# base\n# ------------------------------------------------------------------------------\nFROM ruby:2.7.3-alpine AS base\n\nRUN addgroup -S appgroup && adduser -S appuser -G appgroup\n\nUSER root\n\nRUN apk add --no-cache bash\nRUN apk add --no-cache postgresql-dev\nRUN apk add --no-cache tzdata\nRUN apk add --no-cache nodejs\nRUN apk add --no-cache curl\nRUN apk add --no-cache libc6-compat\nRUN apk add --no-cache shared-mime-info\n\nUSER appuser\n\nENV APP_HOME /app\nENV DEPS_HOME /deps\nARG RAILS_ENV\nENV RAILS_ENV ${RAILS_ENV:-production}\nENV NODE_ENV ${RAILS_ENV:-production}\n\n# ------------------------------------------------------------------------------\n# dependencies\n# ------------------------------------------------------------------------------\nFROM base AS dependencies\n\nUSER root\n\nRUN apk add --no-cache build-base\nRUN apk add --no-cache git\nRUN apk add --no-cache yarn\n\n# Set up install environment\nRUN mkdir -p ${DEPS_HOME}\nWORKDIR ${DEPS_HOME}\nRUN chmod -R 777 ${DEPS_HOME}\n# End\n\nUSER appuser\n\n# Install Ruby dependencies\nCOPY Gemfile ${DEPS_HOME}/Gemfile\nCOPY Gemfile.lock ${DEPS_HOME}/Gemfile.lock\nRUN gem install bundler\nENV BUNDLE_BUILD__SASSC=--disable-march-tune-native\nRUN bundle config set frozen 'true'\nRUN if [ ${RAILS_ENV} = \"production\" ]; then \\\n  bundle config set without 'development test'; \\\n  elif [ ${RAILS_ENV} = \"test\" ]; then \\\n  bundle config set without 'development'; \\\n  else \\\n  bundle config set without 'test'; \\\n  fi\n# End\n\nRUN bundle config\nRUN bundle install --retry 3\n\n# Install JavaScript dependencies\nCOPY package.json ${DEPS_HOME}/package.json\nCOPY yarn.lock ${DEPS_HOME}/yarn.lock\n\nUSER root\n\nRUN if [ ${RAILS_ENV} = \"production\" ]; then \\\n  yarn install --frozen-lockfile --production; yarn cache clean; \\\n  else \\\n  yarn install --frozen-lockfile; yarn cache clean; \\\n  fi\n# End\n\n# ------------------------------------------------------------------------------\n# web\n# ------------------------------------------------------------------------------\n\nFROM base AS web\n\nUSER root\n\n# Set up install environment\nRUN mkdir -p ${APP_HOME}\nWORKDIR ${APP_HOME}\nRUN chmod -R 777 ${APP_HOME}\n\n# End\nUSER appuser\n\n# Download and install filebeat for sending logs to logstash\nENV FILEBEAT_VERSION=7.6.2\nENV FILEBEAT_DOWNLOAD_PATH=/tmp/filebeat.tar.gz\nENV FILEBEAT_CHECKSUM=482304509aed80db78ef63a0fed88e4453ebe7b11f6b4ab3168036a78f6a413e2f6a5c039f405e13984653b1a094c23f7637ac7daf3da75a032692d1c34a9b65\n\nUSER root\n\nRUN curl -f https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-${FILEBEAT_VERSION}-linux-x86_64.tar.gz -o ${FILEBEAT_DOWNLOAD_PATH} && \\\n  [ \"$(sha512sum ${FILEBEAT_DOWNLOAD_PATH})\" = \"${FILEBEAT_CHECKSUM}  ${FILEBEAT_DOWNLOAD_PATH}\" ] && \\\n  tar xzvf ${FILEBEAT_DOWNLOAD_PATH} && \\\n  rm ${FILEBEAT_DOWNLOAD_PATH} && \\\n  mv filebeat-${FILEBEAT_VERSION}-linux-x86_64 /filebeat && \\\n  rm -f /filebeat/filebeat.yml\n\nRUN chmod -R 777 /filebeat\n\nUSER appuser\n\n# Copy our local filebeat config to the installation\nCOPY filebeat.yml /filebeat/filebeat.yml\n\n# Copy dependencies (relying on dependencies using the same base image as this)\nCOPY --from=dependencies ${DEPS_HOME}/Gemfile ${APP_HOME}/Gemfile\nCOPY --from=dependencies ${DEPS_HOME}/Gemfile.lock ${APP_HOME}/Gemfile.lock\nCOPY --from=dependencies ${GEM_HOME} ${GEM_HOME}\nCOPY --from=dependencies ${DEPS_HOME}/node_modules ${APP_HOME}/node_modules\n# End\n\nUSER root\n# Copy app code (sorted by vague frequency of change for caching)\nRUN mkdir -p ${APP_HOME}/log\nRUN mkdir -p ${APP_HOME}/tmp\nRUN chmod -R 777 ${APP_HOME}\nRUN chown -hR appuser:appgroup ${APP_HOME}/log\nRUN chown -hR appuser:appgroup ${APP_HOME}/tmp\n\nUSER appuser\n\nCOPY config.ru ${APP_HOME}/config.ru\nCOPY Rakefile ${APP_HOME}/Rakefile\nCOPY public ${APP_HOME}/public\nCOPY vendor ${APP_HOME}/vendor\nCOPY bin ${APP_HOME}/bin\nCOPY lib ${APP_HOME}/lib\nCOPY config ${APP_HOME}/config\nCOPY db ${APP_HOME}/db\nCOPY app ${APP_HOME}/app\n\n# End\nUSER root\n\nRUN chmod -R 777 ${APP_HOME}/\nRUN chown -hR appuser:appgroup ${APP_HOME}/\n\nRUN if [ ${RAILS_ENV} = \"production\" ]; then \\\n  DFE_SIGN_IN_API_CLIENT_ID= \\\n  DFE_SIGN_IN_API_SECRET= \\\n  DFE_SIGN_IN_API_ENDPOINT= \\\n  DQT_CLIENT_HEADERS= \\\n  DQT_CLIENT_HOST= \\\n  DQT_CLIENT_PARAMS= \\\n  ADMIN_ALLOWED_IPS= \\\n  ENVIRONMENT_NAME= \\\n  bundle exec rake assets:precompile; \\\n  fi\nEXPOSE 3000\n\nUSER appuser\nARG GIT_COMMIT_HASH\nENV GIT_COMMIT_HASH ${GIT_COMMIT_HASH}\nCMD /filebeat/filebeat -c /filebeat/filebeat.yml & bundle exec rails server\n\n# move all app directories and files to appuser and the appgroup\nUSER root\n\nRUN chmod 777 -R ${APP_HOME}/app\n\nRUN chown -hR appuser:appgroup ${APP_HOME}/log\nRUN chown -hR appuser:appgroup ${APP_HOME}/app\nRUN chown -hR appuser:appgroup ${APP_HOME}/tmp\n\nRUN touch ${APP_HOME}/log/${RAILS_ENV}.log\n\nRUN chown -hR appuser:appgroup ${APP_HOME}/log/${RAILS_ENV}.log\n\nRUN chmod 777 ${APP_HOME}/log/${RAILS_ENV}.log\n\nUSER appuser\n\n\n# ------------------------------------------------------------------------------\n# shellcheck\n# ------------------------------------------------------------------------------\n\nFROM koalaman/shellcheck:stable AS shellcheck\n\n# ------------------------------------------------------------------------------\n# test\n# ------------------------------------------------------------------------------\nFROM web AS test\n\nUSER root\n\nRUN apk add --no-cache chromium chromium-chromedriver\n\nUSER appuser\n# Install ShellCheck\nCOPY --from=shellcheck / /opt/shellcheck/\nENV PATH /opt/shellcheck/bin:${PATH}\n\n# End\n# Copy all files\n# This is only for the test target and ensures that all the files that could be linted locally are also linted on CI.\n# We need to be mindful of files that get added to the project, if they are secrets or superfluous we should add them\n# to the .dockerignore file.\nCOPY . ${APP_HOME}/\n# End\nCMD [ \"bundle\", \"exec\", \"rake\" ]\n\n# move all app directories and files to appuser and the appgroup\nUSER root\n\nRUN chmod 777 -R ${APP_HOME}/app\n\nRUN chown -hR appuser:appgroup ${APP_HOME}/log\nRUN chown -hR appuser:appgroup ${APP_HOME}/app\nRUN chown -hR appuser:appgroup ${APP_HOME}/tmp\n\nRUN touch ${APP_HOME}/log/${RAILS_ENV}.log\n\nRUN chown -hR appuser:appgroup ${APP_HOME}/log/${RAILS_ENV}.log\n\nRUN chmod 777 ${APP_HOME}/log/${RAILS_ENV}.log\n\nUSER appuser\n"
}