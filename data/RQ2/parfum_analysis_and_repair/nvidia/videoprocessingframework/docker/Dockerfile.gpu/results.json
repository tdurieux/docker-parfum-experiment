{
  "startTime": 1674249883283,
  "endTime": 1674249883933,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 21,
        "columnStart": 18,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker.io/nvidia/cuda:11.2.0-cudnn8-devel-ubuntu20.04 as build\n\nENV POETRY_HOME=\"/opt/poetry\" \\\n    POETRY_VIRTUALENVS_IN_PROJECT=true \\\n    POETRY_VERSION=1.1.7\n\nENV PATH=\"/opt/.venv/bin:$POETRY_HOME/bin:$PATH\" \\\n    PYTHON_BINARY=\"/opt/.venv/bin/python\"\n\nARG GEN_PYTORCH_EXT\nARG GEN_OPENGL_EXT\n\nRUN apt update && DEBIAN_FRONTEND=noninteractive \\\n    apt --no-install-recommends -y install \\\n    git wget cmake \\\n    build-essential curl \\\n    libavcodec-dev libavformat-dev libswscale-dev \\\n    libxvidcore-dev x264 libx264-dev libfaac-dev \\\n    libmp3lame-dev libtheora-dev libvorbis-dev \\\n    libglu1-mesa-dev freeglut3-dev \\\n    python3.8 python3-pip python3.8-venv && \\\n    rm -rf /var/lib/apt/lists/*\n\n# https://python-poetry.org/docs/\nWORKDIR $POETRY_HOME\nRUN curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python3\n\nWORKDIR /opt\n\nCOPY docker/Makefile docker/Makefile\nCOPY poetry.lock poetry.lock\nCOPY pyproject.toml pyproject.toml\nCOPY docker/poetry-env.sh docker/poetry-env.sh\n\n# Build poetry virtual environment\nRUN bash docker/poetry-env.sh PYTHON_BINARY=$PYTHON_BINARY GEN_PYTORCH_EXT=\"$GEN_PYTORCH_EXT\" GEN_OPENGL_EXT=\"$GEN_OPENGL_EXT\"\n\n# Build vpf\nCOPY . .\n\nRUN make -f docker/Makefile vpf_built \\\n                            PYTHON_BINARY=$PYTHON_BINARY \\\n                            VIDEO_CODEC_SDK=/opt/Video_Codec_SDK \\\n                            GEN_PYTORCH_EXT=$GEN_PYTORCH_EXT\n\nFROM docker.io/nvidia/cuda:11.2.0-cudnn8-runtime-ubuntu20.04\n\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n    git build-essential libbsd0 \\\n    wget cmake ffmpeg libtbb-dev \\\n    libjpeg8-dev libpng-dev libtiff-dev \\\n    libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \\\n    libdc1394-22-dev libssl-dev \\\n    libxine2-dev libv4l-dev \\\n    libboost-all-dev libdc1394-22-dev \\\n    libglu1-mesa-dev freeglut3-dev \\\n    python3.8 python3-pip python3.8-venv curl && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt\n\nCOPY --from=build /opt/dist /opt/dist\nCOPY --from=build /opt/poetry /opt/poetry\n# Normally we'd reinstall the enviroment but pycuda is built with cuda headers\n# which are not available in the nvidia runtime image\nCOPY --from=build /opt/.venv /opt/.venv\nCOPY . .\n\nENV POETRY_HOME=\"/opt/poetry\"\n\nENV PATH=\"/opt/.venv/bin:$POETRY_HOME/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/opt/dist:/opt/dist/bin:/opt/.venv/lib/python3.8/site-packages/torch/lib\" \\\n    PYTHONPATH=/opt/.venv/bin:/opt/dist:/opt/dist/bin\n\nENTRYPOINT [\"/bin/bash\"]\n"
}