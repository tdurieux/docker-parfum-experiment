{
  "startTime": 1674248402211,
  "endTime": 1674248403479,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 8,
        "columnEnd": 61
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 8,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 20,
        "columnEnd": 90
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 25,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 113
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG AARCH64_BASE_IMAGE=nvidia/cuda:10.2-devel-ubuntu18.04\nFROM ${AARCH64_BASE_IMAGE}\n\nENV DEBIAN_FRONTEND=noninteractive\nENV CUDA_CROSS_VERSION=10.2\n\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    wget \\\n    unzip \\\n    git \\\n    rsync \\\n    libjpeg-dev \\\n    dh-autoreconf \\\n    gcc-aarch64-linux-gnu \\\n    g++-aarch64-linux-gnu \\\n    pkg-config \\\n    libtool \\\n    libtool-bin \\\n    python3-distutils \\\n    autogen \\\n    zip \\\n    python3.6 python3.6-dev \\\n    python3.7 python3.7-dev \\\n    python3.8 python3.8-dev \\\n    && \\\n    if [ $(apt-cache search python3.9 | wc -l) -eq 0 ]; then \\\n        apt-get install software-properties-common -y --no-install-recommends && \\\n        add-apt-repository ppa:deadsnakes/ppa -y && \\\n        apt-get update; \\\n    fi && \\\n    apt-key adv --fetch-key http://repo.download.nvidia.com/jetson/jetson-ota-public.asc && \\\n    add-apt-repository 'deb http://repo.download.nvidia.com/jetson/x86_64 bionic r32.4' && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y cuda-cudart-cross-aarch64-${CUDA_CROSS_VERSION} \\\n                       cuda-cufft-cross-aarch64-${CUDA_CROSS_VERSION} \\\n                       cuda-curand-cross-aarch64-${CUDA_CROSS_VERSION} \\\n                       cuda-driver-cross-aarch64-${CUDA_CROSS_VERSION} \\\n                       cuda-misc-headers-cross-aarch64-${CUDA_CROSS_VERSION} \\\n                       cuda-npp-cross-aarch64-${CUDA_CROSS_VERSION} \\\n    && \\\n    apt-get install --no-install-recommends -y python3.9 python3.9-dev python3.9-distutils python3.10 python3.10-dev python3.10-distutils && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    PYTHON_VER=$(python3 -c \"import sys;print(f'{sys.version_info[0]}{sys.version_info[1]}')\") && \\\n    if [ \"${PYTHON_VER}\" = \"36\" ]; then \\\n        curl -f -O https://bootstrap.pypa.io/pip/3.6/get-pip.py; \\\n    else \\\n        curl -f -O https://bootstrap.pypa.io/get-pip.py; \\\n    fi && python3 get-pip.py && rm get-pip.py && \\\n    # decouple libclang and clang installation so libclang changes are not overriden by clang\n    pip install --no-cache-dir clang && pip install --no-cache-dir libclang && \\\n    rm -rf /root/.cache/pip/ && \\\n    cd /tmp && git clone https://github.com/NixOS/patchelf && cd patchelf && \\\n    ./bootstrap.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/ && make -j install && cd / && rm -rf /tmp/patchelf && \\\n    ln -s /usr/bin/python3 /usr/bin/python\n\nENV PKG_CONFIG_PATH=/usr/aarch64-linux-gnu/lib/pkgconfig\n\nCOPY DALI_DEPS_VERSION /tmp\n\nARG DALI_DEPS_REPO\nENV DALI_DEPS_REPO=${DALI_DEPS_REPO:-https://github.com/NVIDIA/DALI_deps}\n\nARG DALI_DEPS_VERSION_SHA\nENV DALI_DEPS_VERSION_SHA=${DALI_DEPS_VERSION_SHA}\n\n# run in /bin/bash to have more advanced features supported like list\nRUN /bin/bash -c 'DALI_DEPS_VERSION_SHA=${DALI_DEPS_VERSION_SHA:-$(cat /tmp/DALI_DEPS_VERSION)}    && \\\n    git clone ${DALI_DEPS_REPO} /tmp/dali_deps                                                     && \\\n    cd /tmp/dali_deps                                                                              && \\\n    git checkout ${DALI_DEPS_VERSION_SHA}                                                          && \\\n    git submodule init                                                                             && \\\n    git submodule update --depth 1 --recursive                                                     && \\\n    export CC_COMP=aarch64-linux-gnu-gcc                                                           && \\\n    export CXX_COMP=aarch64-linux-gnu-g++                                                          && \\\n    export INSTALL_PREFIX=\"/usr/aarch64-linux-gnu/\"                                                && \\\n    export HOST_ARCH_OPTION=\"--host=aarch64-unknown-linux-gnu\"                                     && \\\n    export CMAKE_TARGET_ARCH=aarch64                                                               && \\\n    export OPENCV_TOOLCHAIN_FILE=\"linux/aarch64-gnu.toolchain.cmake\"                               && \\\n    export WITH_FFMPEG=0                                                                           && \\\n    /tmp/dali_deps/build_scripts/build_deps.sh && rm -rf /tmp/dali_deps && rm -rf /tmp/DALI_DEPS_VERSION'\n\n# hack - install cross headers in the default python paths, so host python3-config would point to them\nRUN export PYVERS=\"3.6.9 3.7.8 3.8.5 3.9.0 3.10.0\" && \\\n    for PYVER in ${PYVERS}; do \\\n        cd /tmp && ( curl -f -L https://www.python.org/ftp/python/${PYVER}/Python-${PYVER}.tgz | tar -xzf - || exit 1) && \\\n        rm -rf *.tgz && cd Python* && \\\n        ./configure --disable-ipv6 ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no \\\n            --disable-shared CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \\\n            --build=x86_64-pc-linux-gnu --host=aarch64-linux-gnu --prefix=/usr/ && \\\n        make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" inclinstall && \\\n        cd / && rm -rf /tmp/Python*; \\\n    done && \\\n    # hack - patch the host pythonX-config to return --extension-suffix for the target\n    find /usr/ -iname x86_64-linux-gnu-python* -exec sed -i \"s/\\(SO.*\\)\\(x86_64\\)\\(.*\\)/\\1aarch64\\3/\" {} \\;\n\nVOLUME /dali\n\nWORKDIR /dali\n\nENV PATH=/usr/local/cuda-10.2/bin:$PATH\n\nARG DALI_BUILD_DIR=build_aarch64_linux\n\nWORKDIR /dali/${DALI_BUILD_DIR}\n\nCMD WERROR=ON           \\\n    ARCH=aarch64-linux  \\\n    BUILD_TEST=ON       \\\n    BUILD_BENCHMARK=OFF \\\n    BUILD_NVTX=OFF      \\\n    BUILD_LMDB=ON       \\\n    BUILD_JPEG_TURBO=ON \\\n    BUILD_LIBTIFF=ON    \\\n    BUILD_LIBSND=ON     \\\n    BUILD_LIBTAR=ON     \\\n    BUILD_FFTS=ON       \\\n    BUILD_NVJPEG=OFF    \\\n    BUILD_NVJPEG2K=OFF  \\\n    BUILD_NVOF=OFF      \\\n    BUILD_NVDEC=OFF     \\\n    BUILD_NVML=OFF      \\\n    VERBOSE_LOGS=OFF    \\\n    BUILD_CUFILE=OFF    \\\n    TEST_BUNDLED_LIBS=NO\\\n    WITH_DYNAMIC_CUDA_TOOLKIT=ON\\\n    WHL_PLATFORM_NAME=manylinux2014_aarch64            \\\n    BUNDLE_PATH_PREFIX=\"/usr/aarch64-linux-gnu\"        \\\n    EXTRA_CMAKE_OPTIONS=\"-DCMAKE_TOOLCHAIN_FILE:STRING=$PWD/../platforms/aarch64-linux/aarch64-linux.toolchain.cmake \\\n                        -DCMAKE_COLOR_MAKEFILE=ON                                 \\\n                        -DCMAKE_CUDA_COMPILER=/usr/local/cuda-10.2/bin/nvcc       \\\n                        -DCUDA_HOST=/usr/local/cuda-10.2                          \\\n                        -DCUDA_TARGET=/usr/local/cuda-10.2/targets/aarch64-linux\" \\\n    /dali/docker/build_helper.sh                    && \\\n    rm -rf /dali/${DALI_BUILD_DIR}/nvidia*          && \\\n    cd /dali/dali_tf_plugin                         && \\\n    bash /dali/dali_tf_plugin/make_dali_tf_sdist.sh && \\\n    mv /dali_tf_sdist/*.tar.gz /wheelhouse/         && \\\n    cp -r /wheelhouse /dali/\n"
}