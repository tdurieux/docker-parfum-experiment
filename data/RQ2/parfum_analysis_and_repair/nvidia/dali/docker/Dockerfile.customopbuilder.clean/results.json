{
  "startTime": 1674218602959,
  "endTime": 1674218603836,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 8,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 12,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 12,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 8,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 8,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_IMAGE\nARG TF_CUSTOM_OP_IMAGE\nFROM ${CUDA_IMAGE} as cuda\nFROM ${TF_CUSTOM_OP_IMAGE}\n\n# TF_CUSTOM_OP_IMAGE=tensorflow/tensorflow:custom-op-gpu-ubuntu14 for manylinux1 tagged TF pip artifacts\n# TF_CUSTOM_OP_IMAGE=tensorflow/tensorflow:custom-op-gpu-ubuntu16 for manylinux2010 tagged TF pip artifacts\n# More info here: https://github.com/tensorflow/custom-op\n\nARG PYVER=3.6\nENV PYVER=${PYVER}\nARG PYV=36\nENV PYV=${PYV}\n\n# Python 3.6 and 3.7 are not available in Ubuntu 14\n# Python 3.7 can't be installed with PPA method in this Ubuntu 14\n# NOTE: jonathonf has removed his PPAs, but TensorFlow still has the repo in its docker image\n# NOTE: Ubuntu 14.04 doesn't support cyphers used by developer.download.nvidia.com, and update returns warning on them\n#       so \"update; do_something\" instead of \"update && do_something\"\nRUN rm -rf /etc/apt/sources.list.d/jonathonf-* && \\\n    apt-get update; \\\n    apt-get install -y --no-install-recommends curl && \\\n    if [ \"${PYVER}\" = \"3.7\" ]; then \\\n        apt-get install -y --no-install-recommends libffi-dev && \\\n        wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz && \\\n        tar -xf Python-3.7.2.tar.xz && \\\n        cd Python-3.7.2 && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-optimizations && \\\n        make -j8 build_all && \\\n        make -j8 altinstall; rm Python-3.7.2.tar.xz \\\n    elif \\\n        [ $(apt-cache search python$PYVER | wc -l) -eq 0 ]; then \\\n        if [ $(apt-cache search python$PYVER | wc -l) -eq 0 ]; then \\\n            apt-get install software-properties-common -y --no-install-recommends && \\\n            add-apt-repository ppa:deadsnakes/ppa -y && \\\n            apt-get update; \\\n        fi && \\\n        curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n        apt-get install -y --no-install-recommends \\\n                git \\\n                git-lfs \\\n                python$PYVER \\\n                python$PYVER-dev && \\\n        # In Ubuntu 18.04 and Python 3.6 and 3.7 we need to install it. It is not available for 16.04\n        apt-get install python3-distutils -y --no-install-recommends || true; \\\n    fi && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV PYTHONIOENCODING=utf-8\nENV LC_ALL=C.UTF-8\nRUN rm -f /usr/bin/python && \\\n    rm -f /usr/bin/python`echo $PYVER | cut -c1-1` && \\\n    rm -f /usr/local/bin/pip || true && \\\n    if [ \"${PYVER}\" = \"3.7\" ];then \\\n        ln -s /usr/local/bin/python3.7 /usr/bin/python3.7 && \\\n        ln -s /usr/local/bin/python3.7 /usr/bin/python && \\\n        ln -s /usr/local/bin/pip3.7 /usr/local/bin/pip && \\\n        ln -s /usr/local/bin/pip3.7 /usr/bin/pip3.7 && \\\n        ln -s /usr/local/bin/pip3.7 /usr/bin/pip; \\\n    elif \\\n\n\n\n        [ \"${PYTHON_VER}\" == \"36\" ]; then \\\n        ln -s /usr/bin/python$PYVER /usr/bin/python && \\\n        ln -s /usr/bin/python$PYVER /usr/bin/python`echo $PYVER | cut -c1-1` && \\\n        PYTHON_VER=$(python -c \"import sys;print(f'{sys.version_info[0]}{sys.version_info[1]}')\") && \\\n        if [ \"${PYTHON_VER}\" == \"36\" ]; then \\\n            curl -f -O https://bootstrap.pypa.io/pip/3.6/get-pip.py; \\\n        else \\\n            curl -f -O https://bootstrap.pypa.io/get-pip.py; \\\n        fi && \\\n        python get-pip.py && \\\n        rm get-pip.py; else \\\n            curl -f -O https://bootstrap.pypa.io/get-pip.py; \\\n        fi \\\n\n\n    fi && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    python --version && \\\n    pip --version\n\nCOPY --from=cuda /usr/local/cuda /usr/local/cuda\nENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs/:${LD_LIBRARY_PATH}\n\nWORKDIR /opt/dali\nCOPY qa/setup_packages.py qa/setup_packages.py\n\n# get current CUDA version, ask setup_packages.py which TensorFlow we need to support and loop over all version downloading\n# them to /pip-packages dir one by one. In effect all TF versions are stored in only one place setup_packages.py\nSHELL [\"/bin/bash\", \"-c\"]\nRUN export USE_CUDA_VERSION=$(echo $(ls /usr/local/cuda/lib64/libcudart.so*) | sed 's/.*\\.\\([0-9]\\+\\)\\.\\([0-9]\\+\\)\\.\\([0-9]\\+\\)/\\1\\2/') && \\\n    export last_config_index=$(python qa/setup_packages.py -n -u tensorflow-gpu --cuda ${USE_CUDA_VERSION}) && \\\n    for i in `seq 0 $last_config_index`; do \\\n        package=$(python qa/setup_packages.py -i $i -u tensorflow-gpu --cuda ${USE_CUDA_VERSION}); \\\n        if [[ \"${package}\" != *\"nvidia-tensorflow\"* ]]; then \\\n            pip download ${package} -d /pip-packages; \\\n        fi \\\n    done\n"
}