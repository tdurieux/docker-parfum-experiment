{
  "startTime": 1674255924419,
  "endTime": 1674255924895,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#########################################################################################\n##  Stage 2: build DALI wheels on top of the dependencies image built in Stage 1\n#########################################################################################\nARG DEPS_IMAGE_NAME\n# clean builder without source code inside\nFROM ${DEPS_IMAGE_NAME} as builder\n\nARG PYVER=3.6\nARG PYV=36\n\nENV PYVER=${PYVER} PYV=${PYV} PYTHONPATH=/opt/python/v\n\nENV PYBIN=${PYTHONPATH}/bin \\\n    PYLIB=${PYTHONPATH}/lib\n\nENV PATH=/opt/python/cp36-cp36/bin:/opt/python/cp37-cp37m/bin:/opt/python/cp38-cp38/bin:/opt/python/cp39-cp39/bin:${PYBIN}:/opt/python/cp310-cp310/bin:${PYBIN}:${PATH} \\\n    LD_LIBRARY_PATH=/usr/local/lib:/opt/dali/${DALI_BUILD_DIR}:/opt/python/cp36-cp36/lib:/opt/python/cp37-cp37m/lib:/opt/python/cp38-cp38/lib:/opt/python/cp39-cp39/lib:/opt/python/cp310-cp310/lib:${PYLIB}:${LD_LIBRARY_PATH} \\\n    LIBRARY_PATH=/usr/local/lib:/opt/dali/${DALI_BUILD_DIR}:/opt/python/cp36-cp36/lib:/opt/python/cp37-cp37m/lib:/opt/python/cp38-cp38/lib:/opt/python/cp39-cp39/lib:/opt/python/cp310-cp310/lib:${PYLIB}:${LIBRARY_PATH}\n\nRUN ln -s /opt/python/cp${PYV}* /opt/python/v\n\n# install Python bindings and patch it to use the clang we have here\nRUN pip install --no-cache-dir future setuptools wheel clang flake8 && \\\n    PY_CLANG_PATH=$(echo $(pip show clang) | sed 's/.*Location: \\(.*\\) Requires.*/\\1/')/clang/cindex.py && \\\n    LIBCLANG_PATH=/usr/local/lib/libclang.so && \\\n    sed -i \"s|library_file = None|library_file = \\\"${LIBCLANG_PATH}\\\"|\" ${PY_CLANG_PATH} && \\\n    rm -rf /root/.cache/pip/\n\nRUN ldconfig\n\nWORKDIR /opt/dali\n\nARG CC\nARG CXX\nENV CC=${CC}\nENV CXX=${CXX}\n# Optional build arguments\n\nARG ARCH\nENV ARCH=${ARCH}\nARG CUDA_TARGET_ARCHS\nENV CUDA_TARGET_ARCHS=${CUDA_TARGET_ARCHS}\nARG CMAKE_BUILD_TYPE\nENV CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\nARG BUILD_TEST\nENV BUILD_TEST=${BUILD_TEST}\nARG BUILD_BENCHMARK\nENV BUILD_BENCHMARK=${BUILD_BENCHMARK}\nARG BUILD_NVTX\nENV BUILD_NVTX=${BUILD_NVTX}\nARG BUILD_PYTHON\nENV BUILD_PYTHON=${BUILD_PYTHON}\nARG BUILD_LMDB\nENV BUILD_LMDB=${BUILD_LMDB}\nARG BUILD_JPEG_TURBO\nENV BUILD_JPEG_TURBO=${BUILD_JPEG_TURBO}\nARG BUILD_NVJPEG\nENV BUILD_NVJPEG=${BUILD_NVJPEG}\nARG BUILD_NVJPEG2K\nENV BUILD_NVJPEG2K=${BUILD_NVJPEG2K}\nARG BUILD_LIBTIFF\nENV BUILD_LIBTIFF=${BUILD_LIBTIFF}\nARG BUILD_LIBSND\nENV BUILD_LIBSND=${BUILD_LIBSND}\nARG BUILD_LIBTAR\nENV BUILD_LIBTAR=${BUILD_LIBTAR}\nARG BUILD_FFTS\nENV BUILD_FFTS=${BUILD_FFTS}\nARG BUILD_NVOF\nENV BUILD_NVOF=${BUILD_NVOF}\nARG BUILD_NVDEC\nENV BUILD_NVDEC=${BUILD_NVDEC}\nARG BUILD_NVML\nENV BUILD_NVML=${BUILD_NVML}\nARG BUILD_CUFILE\nENV BUILD_CUFILE=${BUILD_CUFILE}\nARG LINK_DRIVER\nENV LINK_DRIVER=${LINK_DRIVER}\nARG WITH_DYNAMIC_CUDA_TOOLKIT\nENV WITH_DYNAMIC_CUDA_TOOLKIT=${WITH_DYNAMIC_CUDA_TOOLKIT}\nARG BUILD_WITH_ASAN\nENV BUILD_WITH_ASAN=${BUILD_WITH_ASAN}\nARG BUILD_WITH_LSAN\nENV BUILD_WITH_LSAN=${BUILD_WITH_LSAN}\nARG BUILD_WITH_UBSAN\nENV BUILD_WITH_UBSAN=${BUILD_WITH_UBSAN}\nARG STRIP_BINARY\nENV STRIP_BINARY=${STRIP_BINARY}\nARG VERBOSE_LOGS\nENV VERBOSE_LOGS=${VERBOSE_LOGS}\nARG NVIDIA_DALI_BUILD_FLAVOR\nENV NVIDIA_DALI_BUILD_FLAVOR=${NVIDIA_DALI_BUILD_FLAVOR}\nARG GIT_SHA\nENV GIT_SHA=${GIT_SHA}\nARG DALI_TIMESTAMP\nENV DALI_TIMESTAMP=${DALI_TIMESTAMP}\nARG WHL_PLATFORM_NAME\nENV WHL_PLATFORM_NAME=${WHL_PLATFORM_NAME}\nARG WHL_COMPRESSION\nENV WHL_COMPRESSION=${WHL_COMPRESSION}\nARG EXTRA_CMAKE_OPTIONS\nENV EXTRA_CMAKE_OPTIONS=${EXTRA_CMAKE_OPTIONS}\n\nARG NVIDIA_BUILD_ID\nENV NVIDIA_BUILD_ID ${NVIDIA_BUILD_ID:-0}\nRUN mkdir /wheelhouse && chmod 0777 /wheelhouse\n\nFROM builder\nCOPY . .\n\nARG DALI_BUILD_DIR=build-docker-release\nWORKDIR /opt/dali/${DALI_BUILD_DIR}\n\nRUN bash /opt/dali/docker/build_helper.sh\n"
}