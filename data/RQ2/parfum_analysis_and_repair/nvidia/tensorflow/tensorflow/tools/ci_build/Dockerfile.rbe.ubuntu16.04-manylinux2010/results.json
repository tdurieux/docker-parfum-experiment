{
  "startTime": 1674250150017,
  "endTime": 1674250150547,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 59,
        "columnStart": 22,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build a manylinux 2010 compliant cross-compiler.\n#\n# Builds a devtoolset gcc/libstdc++ that targets manylinux 2010 compatible\n# glibc (2.12) and system libstdc++ (4.4).\n#\n# To push a new version, run:\n# $ docker build -f Dockerfile.rbe.ubuntu16.04-manylinux2010 \\\n#  --tag \"gcr.io/tensorflow-testing/nosla-ubuntu16.04-manylinux2010\" .\n# $ docker push gcr.io/tensorflow-testing/nosla-ubuntu16.04-manylinux2010\n\nFROM ubuntu:16.04 as devtoolset\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      bzip2 \\\n      cpio \\\n      file \\\n      flex \\\n      g++ \\\n      make \\\n      patch \\\n      rpm2cpio \\\n      unar \\\n      wget \\\n      tar \\\n      xz-utils \\\n      && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD devtoolset/fixlinks.sh fixlinks.sh\nADD devtoolset/build_devtoolset.sh build_devtoolset.sh\nADD devtoolset/rpm-patch.sh rpm-patch.sh\n\n# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-7 in /dt7.\nRUN /build_devtoolset.sh devtoolset-7 /dt7\n# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-8 in /dt8.\nRUN /build_devtoolset.sh devtoolset-8 /dt8\n\n# TODO(klimek): Split up into two different docker images.\nFROM ubuntu:16.04\nCOPY --from=devtoolset /dt7 /dt7\nCOPY --from=devtoolset /dt8 /dt8\n\n# Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN /install/install_deb_packages.sh\nRUN /install/install_clang.sh\nRUN /install/install_bazel.sh\n\n# Install golang.\nRUN /install/install_golang.sh\nenv GOROOT=/usr/local/go\nenv PATH=$GOROOT/bin:$PATH\n\n# Install python 3.6.\nRUN add-apt-repository ppa:jonathonf/python-3.6 && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n    python3.6 python3.6-dev python3-pip python3.6-venv && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    python3.6 -m pip install pip --upgrade && \\\n    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 0\n\nRUN /install/install_pip_packages.sh\n\n# TODO(klimek): Figure out a better way to get the right include paths\n# forwarded when we install new packages.\nRUN ln -s \"/usr/include/x86_64-linux-gnu/python2.7\" \"/dt7/usr/include/x86_64-linux-gnu/python2.7\"\nRUN ln -s \"/usr/include/x86_64-linux-gnu/python2.7\" \"/dt8/usr/include/x86_64-linux-gnu/python2.7\"\n\nRUN ln -s \"/usr/include/x86_64-linux-gnu/python3.6m\" \"/dt7/usr/include/x86_64-linux-gnu/python3.6m\"\nRUN ln -s \"/usr/include/x86_64-linux-gnu/python3.6m\" \"/dt8/usr/include/x86_64-linux-gnu/python3.6m\"\n"
}