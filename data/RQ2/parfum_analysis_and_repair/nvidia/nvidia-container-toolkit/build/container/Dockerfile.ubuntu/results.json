{
  "startTime": 1674216892521,
  "endTime": 1674216893542,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 72,
        "columnStart": 8,
        "columnEnd": 125
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG BASE_DIST\nARG CUDA_VERSION\nARG GOLANG_VERSION=x.x.x\nARG VERSION=\"N/A\"\n\n# NOTE: In cases where the libc version is a concern, we would have to use an\n# image based on the target OS to build the golang executables here -- especially\n# if cgo code is included.\nFROM golang:${GOLANG_VERSION} as build\n\n# We override the GOPATH to ensure that the binaries are installed to\n# /artifacts/bin\nARG GOPATH=/artifacts\n\n# Install the experiemental nvidia-container-runtime\n# NOTE: This will be integrated into the nvidia-container-toolkit package / repo\nARG NVIDIA_CONTAINER_RUNTIME_EXPERIMENTAL_VERSION=experimental\nRUN GOPATH=/artifacts go install github.com/NVIDIA/nvidia-container-toolkit/cmd/nvidia-container-runtime.experimental@${NVIDIA_CONTAINER_RUNTIME_EXPERIMENTAL_VERSION}\n\nWORKDIR /build\nCOPY . .\n\n# NOTE: Until the config utilities are properly integrated into the\n# nvidia-container-toolkit repository, these are built from the `tools` folder\n# and not `cmd`.\nRUN GOPATH=/artifacts go install -ldflags=\"-s -w -X 'main.Version=${VERSION}'\" ./tools/...\n\n\nFROM nvcr.io/nvidia/cuda:${CUDA_VERSION}-base-${BASE_DIST}\n\n# Remove the CUDA repository configurations to avoid issues with rotated GPG keys\nRUN rm -f /etc/apt/sources.list.d/cuda.list\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libcap2 \\\n    curl \\\n        && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV NVIDIA_DISABLE_REQUIRE=\"true\"\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=utility\n\nARG ARTIFACTS_ROOT\nARG PACKAGE_DIST\nCOPY ${ARTIFACTS_ROOT}/${PACKAGE_DIST} /artifacts/packages/${PACKAGE_DIST}\n\nWORKDIR /artifacts/packages\n\nARG PACKAGE_VERSION\nARG TARGETARCH\nENV PACKAGE_ARCH ${TARGETARCH}\n\nARG LIBNVIDIA_CONTAINER_REPO=\"https://nvidia.github.io/libnvidia-container\"\nARG LIBNVIDIA_CONTAINER0_VERSION\nRUN if [ \"${PACKAGE_ARCH}\" = \"arm64\" ]; then \\\n        curl -f -L ${LIBNVIDIA_CONTAINER_REPO}/${PACKAGE_DIST}/${PACKAGE_ARCH}/libnvidia-container0_${LIBNVIDIA_CONTAINER0_VERSION}_${PACKAGE_ARCH}.deb \\\n            --output ${PACKAGE_DIST}/${PACKAGE_ARCH}/libnvidia-container0_${LIBNVIDIA_CONTAINER0_VERSION}_${PACKAGE_ARCH}.deb && \\\n        dpkg -i ${PACKAGE_DIST}/${PACKAGE_ARCH}/libnvidia-container0_${LIBNVIDIA_CONTAINER0_VERSION}_${PACKAGE_ARCH}.deb; \\\n    fi\n\nRUN dpkg -i \\\n    ${PACKAGE_DIST}/${PACKAGE_ARCH}/libnvidia-container1_1.*.deb \\\n    ${PACKAGE_DIST}/${PACKAGE_ARCH}/libnvidia-container-tools_1.*.deb \\\n    ${PACKAGE_DIST}/${PACKAGE_ARCH}/nvidia-container-toolkit_${PACKAGE_VERSION}*.deb\n\nWORKDIR /work\n\nCOPY --from=build /artifacts/bin /work/\n\nENV PATH=/work:$PATH\n\nLABEL io.k8s.display-name=\"NVIDIA Container Runtime Config\"\nLABEL name=\"NVIDIA Container Runtime Config\"\nLABEL vendor=\"NVIDIA\"\nLABEL version=\"${VERSION}\"\nLABEL release=\"N/A\"\nLABEL summary=\"Automatically Configure your Container Runtime for GPU support.\"\nLABEL description=\"See summary\"\n\nRUN mkdir /licenses && mv /NGC-DL-CONTAINER-LICENSE /licenses/NGC-DL-CONTAINER-LICENSE\n\n# Install / upgrade packages here that are required to resolve CVEs\nARG CVE_UPDATES\nRUN if [ -n \"${CVE_UPDATES}\" ]; then \\\n        apt-get update && apt-get upgrade -y ${CVE_UPDATES} && \\\n        rm -rf /var/lib/apt/lists/*; \\\n    fi\n\nENTRYPOINT [\"/work/nvidia-toolkit\"]\n"
}