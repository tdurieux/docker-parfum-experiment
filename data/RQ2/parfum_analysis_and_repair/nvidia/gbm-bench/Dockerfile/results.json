{
  "startTime": 1674216022951,
  "endTime": 1674216024279,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_VERSION\nFROM nvidia/cuda:$CUDA_VERSION-devel-ubuntu18.04\nSHELL [\"/bin/bash\", \"-c\"]\n# Install conda (and use python 3.7)\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        curl \\\n        doxygen \\\n        git \\\n        graphviz \\\n        libcurl4-openssl-dev \\\n        libboost-all-dev \\\n        make \\\n        tar \\\n        unzip \\\n        wget \\\n        zlib1g-dev && \\\n    rm -rf /var/lib/apt/* && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -o /opt/miniconda.sh \\\n\thttps://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    chmod +x /opt/miniconda.sh && \\\n    /opt/miniconda.sh -b -p /opt/conda && \\\n    /opt/conda/bin/conda update -n base conda && \\\n    rm /opt/miniconda.sh\nENV PATH /opt/conda/bin:$PATH\nRUN conda install -c conda-forge -c rapidsai -c nvidia -c defaults \\\n        bokeh \\\n        cmake>=3.14 \\\n        h5py \\\n        ipython \\\n        ipywidgets \\\n        jupyter \\\n        kaggle \\\n        matplotlib \\\n        nose \\\n        numpy \\\n        pandas \\\n        Pillow \\\n        pydot \\\n        pylint\\\n        psutil\\\n        scikit-learn \\\n        scipy \\\n        six \\\n        dask \\\n        distributed \\\n        tqdm \\\n        cudf=0.18.0 \\\n        dask-cuda \\\n        rmm \\\n        librmm \\\n        rapids-xgboost \\\n        cuml=0.18 && \\\n    conda clean -ya\n\n# lightgbm\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        bzip2 \\\n        ca-certificates \\\n        curl \\\n        git \\\n        libblas-dev \\\n        libboost-dev \\\n        libboost-filesystem-dev \\\n        libboost-system-dev \\\n        libbz2-dev \\\n        libc6 \\\n        libglib2.0-0 \\\n        liblapack-dev \\\n        libsm6 \\\n        libxext6 \\\n        libxrender1 \\\n        make \\\n        tar \\\n        unzip \\\n        wget && \\\n    rm -rf /var/lib/apt/* && rm -rf /var/lib/apt/lists/*;\nRUN mkdir -p /etc/OpenCL/vendors && \\\n    echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\nENV OPENCL_LIBRARIES /usr/local/cuda/lib64\nENV OPENCL_INCLUDE_DIR /usr/local/cuda/include\nRUN git config --global http.sslVerify false && \\\n    git clone --recursive https://github.com/Microsoft/LightGBM /opt/LightGBM && \\\n    cd /opt/LightGBM && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. \\\n        -DUSE_GPU=1 \\\n        -DOpenCL_LIBRARY=$OPENCL_LIBRARIES/libOpenCL.so \\\n        -DOpenCL_INCLUDE_DIR=$OPENCL_INCLUDE_DIR && \\\n    make OPENCL_HEADERS=\"/usr/local/cuda/targets/x86_64-linux/include\" \\\n        LIBOPENCL=\"/usr/local/cuda/targets/x86_64-linux/lib\" -j4 && \\\n    cd ../python-package && \\\n    python setup.py install --precompile\n\n# catboost\nRUN if [ \"`echo $CUDA_VERSION | sed -e 's/[.].*//'`\" -lt \"11\" ]; then git config --global http.sslVerify false && \\\n    git clone --recursive \"https://github.com/catboost/catboost\" /opt/catboost && \\\n    cd /opt/catboost && \\\n    cd catboost/python-package/catboost && \\\n    ../../../ya make \\\n        -r \\\n        -o ../../.. \\\n        -DUSE_ARCADIA_PYTHON=no \\\n        -DUSE_SYSTEM_PYTHON=3.7\\\n        -DPYTHON_CONFIG=python3-config \\\n        -DCUDA_ROOT=$(dirname $(dirname $(which nvcc))); \\\n        fi\nENV if [ \"`echo $CUDA_VERSION | sed -e 's/[.].*//'`\" -lt \"11\" ]; then PYTHONPATH=$PYTHONPATH:/opt/catboost/catboost/python-package; fi\n\n\n\n# xgboost\nRUN git config --global http.sslVerify false && \\\n    git clone --recursive https://github.com/dmlc/xgboost /opt/xgboost && \\\n    cd /opt/xgboost && \\\n    mkdir build && \\\n    cd build && \\\n    RMM_ROOT=/opt/conda cmake .. \\\n        -DUSE_CUDA=ON \\\n        -DUSE_NCCL=ON \\\n        -DPLUGIN_RMM=ON && \\\n    make -j4 && \\\n    cd ../python-package && \\\n    pip uninstall -y xgboost && \\\n    python setup.py install\n"
}