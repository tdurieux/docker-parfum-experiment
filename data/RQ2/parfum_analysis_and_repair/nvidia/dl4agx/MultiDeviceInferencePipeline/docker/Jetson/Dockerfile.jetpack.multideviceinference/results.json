{
  "startTime": 1674251542490,
  "endTime": 1674251544387,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 7,
        "columnEnd": 98
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 47,
        "columnStart": 23,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 105,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 276,
        "lineEnd": 276,
        "columnStart": 4,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#############################################################################\n# Copyright (c) 2018-2019 NVIDIA Corporation. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# File: DL4AGX/MultiDeviceInferencePipeline/docker/DRIVE/Dockerfile.jetpack.multideviceinference\n# Description: Docker image for MultiDeviceInferencePipeline for Jetson aarch64-linux\n############################################################################\nARG BASE_PDK_IMAGE=nvidia/jetpack:4.1\nFROM $BASE_PDK_IMAGE\n\nWORKDIR /\n# CMake\nRUN CMAKE_VERSION=3.5 && \\\n    CMAKE_BUILD=3.5.0 && \\\n    curl -f -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - && \\\n    cd /cmake-${CMAKE_BUILD} && \\\n    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    rm -rf /cmake-${CMAKE_BUILD}\n\n# protobuf v3.5.1\nENV PROTOBUF_VERSION=3.5.1\nRUN curl -f -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf -\n\nRUN cd /protobuf-${PROTOBUF_VERSION} && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install 2>&1 > /dev/null && \\\n    make clean\n\nRUN cd /protobuf-${PROTOBUF_VERSION} \\\n    && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    CC=aarch64-linux-gnu-gcc \\\n    CXX=aarch64-linux-gnu-g++ \\\n      --host=aarch64-unknown-linux-gnu \\\n      --with-protoc=/usr/local/bin/protoc \\\n      --prefix=/usr/aarch64-linux-gnu/ && make -j$(nproc) install && \\\n    make clean\n\nENV JPEG_TURBO_VERSION=1.5.3\nRUN curl -f -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf -\n\nRUN cd /libjpeg-turbo-${JPEG_TURBO_VERSION} && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      --enable-shared \\\n      --prefix=/usr/local/ && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    make clean\n\nRUN cd /libjpeg-turbo-${JPEG_TURBO_VERSION} && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      --enable-shared \\\n      CC=aarch64-linux-gnu-gcc \\\n      CXX=aarch64-linux-gnu-g++ \\\n      --host=aarch64-unknown-linux-gnu \\\n      --prefix=/usr/aarch64-linux-gnu/ && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    make clean\n\nRUN rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n\n# FFMpeg\nENV FFMPEG_VERSION=3.4.2\nRUN cd /tmp && wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \\\n    tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    rm ffmpeg-$FFMPEG_VERSION.tar.bz2\n\nRUN cd /tmp/ffmpeg-$FFMPEG_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      --arch=aarch64 \\\n      --target_os=linux \\\n      --prefix=/usr/aarch64-linux-gnu/ \\\n      --disable-static \\\n      --disable-all \\\n      --disable-autodetect \\\n      --disable-iconv \\\n      --enable-shared \\\n      --enable-avformat \\\n      --enable-avcodec \\\n      --enable-avfilter \\\n      --enable-protocol=file \\\n      --enable-cross-compile \\\n      --enable-demuxer=mov,matroska \\\n      --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb \\\n      --cc=aarch64-linux-gnu-gcc \\\n      --cxx=aarch64-linux-gnu-g++ \\\n      --disable-stripping \\\n      --extra-cflags=\"-D_XOPEN_SOURCE=600 -std=gnu99 -fPIC\" && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" && make install && \\\n    make clean\n\nRUN cd /tmp/ffmpeg-$FFMPEG_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      --target_os=linux \\\n      --prefix=/usr/local/ \\\n      --disable-static \\\n      --disable-all \\\n      --disable-autodetect \\\n      --disable-iconv \\\n      --enable-shared \\\n      --enable-avformat \\\n      --enable-avcodec \\\n      --enable-avfilter \\\n      --enable-protocol=file \\\n      --enable-demuxer=mov,matroska \\\n      --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb \\\n      --disable-stripping \\\n      --extra-cflags=\"-D_XOPEN_SOURCE=600 -std=gnu99 -fPIC\" && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" && make install && \\\n    make clean\n\n# OpenCV\nENV OPENCV_VERSION=3.4.3\nRUN curl -f -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf -\n\nRUN cd /opencv-${OPENCV_VERSION} && mkdir build && cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_TOOLCHAIN_FILE=$PWD/../platforms/linux/aarch64-gnu.toolchain.cmake \\\n          -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu/ \\\n          -DBUILD_LIST=core,improc,imgcodecs \\\n          -DBUILD_PNG=ON \\\n          -DBUILD_TIFF=OFF \\\n          -DBUILD_TBB=OFF \\\n          -DBUILD_WEBP=OFF \\\n          -DBUILD_JPEG=ON \\\n          -DBUILD_JASPER=OFF \\\n          -DBUILD_ZLIB=ON \\\n          -DBUILD_EXAMPLES=OFF \\\n          -DBUILD_FFMPEG=ON \\\n          -DBUILD_opencv_java=OFF \\\n          -DBUILD_opencv_python2=OFF \\\n          -DBUILD_opencv_python3=OFF \\\n          -DENABLE_NEON=OFF \\\n          -DWITH_PROTOBUF=OFF \\\n          -DWITH_PTHREADS_PF=OFF \\\n          -DWITH_OPENCL=OFF \\\n          -DWITH_OPENMP=OFF \\\n          -DWITH_FFMPEG=OFF \\\n          -DWITH_GSTREAMER=OFF \\\n          -DWITH_GSTREAMER_0_10=OFF \\\n          -DWITH_CUDA=OFF \\\n          -DWITH_GTK=OFF \\\n          -DWITH_VTK=OFF \\\n          -DWITH_TBB=OFF \\\n          -DWITH_1394=OFF \\\n          -DWITH_OPENEXR=OFF \\\n          -DINSTALL_C_EXAMPLES=OFF \\\n          -DINSTALL_TESTS=OFF \\\n          -DVIBRANTE=TRUE \\\n          VERBOSE=1 ../  && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    cd .. && rm -rf build\n\nRUN cd /opencv-${OPENCV_VERSION} && mkdir build && cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_INSTALL_PREFIX=/usr/local/ \\\n          -DBUILD_LIST=core,improc,imgcodecs \\\n          -DBUILD_PNG=ON \\\n          -DBUILD_TIFF=OFF \\\n          -DBUILD_TBB=OFF \\\n          -DBUILD_WEBP=OFF \\\n          -DBUILD_JPEG=ON \\\n          -DBUILD_JASPER=OFF \\\n          -DBUILD_ZLIB=ON \\\n          -DBUILD_EXAMPLES=OFF \\\n          -DBUILD_FFMPEG=ON \\\n          -DBUILD_opencv_java=OFF \\\n          -DBUILD_opencv_python2=OFF \\\n          -DBUILD_opencv_python3=OFF \\\n          -DENABLE_NEON=OFF \\\n          -DWITH_PROTOBUF=OFF \\\n          -DWITH_PTHREADS_PF=OFF \\\n          -DWITH_OPENCL=OFF \\\n          -DWITH_OPENMP=OFF \\\n          -DWITH_FFMPEG=OFF \\\n          -DWITH_GSTREAMER=OFF \\\n          -DWITH_GSTREAMER_0_10=OFF \\\n          -DWITH_CUDA=OFF \\\n          -DWITH_GTK=OFF \\\n          -DWITH_VTK=OFF \\\n          -DWITH_TBB=OFF \\\n          -DWITH_1394=OFF \\\n          -DWITH_OPENEXR=OFF \\\n          -DINSTALL_C_EXAMPLES=OFF \\\n          -DINSTALL_TESTS=OFF \\\n          VERBOSE=1 ../  && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    cd .. && rm -rf build\n# Boost\nRUN BOOST_VERSION=1_66_0 \\\n    && cd /usr/local \\\n    && curl -f -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION}.tar.gz | tar -xzf - \\\n    && cp -r  boost_${BOOST_VERSION}/boost  /usr/include/boost \\\n    && cp -r  boost_${BOOST_VERSION}/boost  /usr/aarch64-linux-gnu/include/boost \\\n    && rm -rf boost_${BOOST_VERSION}\n\nRUN rm -rf /opencv-${OPENCV_VERSION}\n\nRUN cd /tmp && rm -rf ffmpeg-$FFMPEG_VERSION\n\nENV PATH=/usr/local/cuda-${CUDA_VERSION}/bin:$PATH\n\nENV DALI_TAG_VERSION=0.14.0-rc1\nRUN git clone https://github.com/NVIDIA/DALI.git --recursive && cd DALI && git checkout $DALI_TAG_VERSION && git submodule update --init --recursive\n\nRUN cd DALI && mkdir -p build && cd build && cmake \\\n      -DCMAKE_INSTALL_PREFIX=./install \\\n      -DCMAKE_COLOR_MAKEFILE=ON \\\n      -DBUILD_NVJPEG=OFF \\\n      -DBUILD_TENSORFLOW=OFF \\\n      -DBUILD_TEST=OFF \\\n      -DBUILD_JPEG_TURBO=ON \\\n      -DJPEG_INCLUDE_DIR=/usr/local/include \\\n      -DJPEG_LIBRARY=/usr/local/lib \\\n      -DBUILD_PYTHON=OFF \\\n      -DBUILD_LMDB=OFF \\\n      -DBUILD_NVTX=OFF \\\n      -DBUILD_BENCHMARK=OFF \\\n      -DOPENCV_PATH=/usr/local/ \\\n      -DFFMPEG_ROOT_DIR=/usr/local/ \\\n      -DProtobuf_LIBRARIES=/usr/local/lib \\\n      -DFFMPEG_ROOT_DIR=/usr/local/ \\\n      ../ && make install -j12 && \\\n    cp dali/python/nvidia/dali/libdali.so /usr/local/lib/ && \\\n    rsync -a  dali/python/nvidia/dali/include /usr/local/ && \\\n    rsync -a install/include /usr/local/ && \\\n    rm -rf build\n\nRUN cd DALI && mkdir -p build_aarch64-linux && cd build_aarch64-linux && cmake \\\n      -DCMAKE_INSTALL_PREFIX=./install \\\n      -DARCH=aarch64-linux \\\n      -DCMAKE_COLOR_MAKEFILE=ON \\\n      -DBUILD_NVJPEG=OFF \\\n      -DBUILD_NVML=OFF \\\n      -DBUILD_TENSORFLOW=OFF \\\n      -DBUILD_TEST=OFF \\\n      -DBUILD_JPEG_TURBO=ON \\\n      -DJPEG_INCLUDE_DIR=/usr/aarch64-linux-gnu/include \\\n      -DJPEG_LIBRARY=/usr/aarch64-linux-gnu/lib \\\n      -DBUILD_PYTHON=OFF \\\n      -DBUILD_LMDB=OFF \\\n      -DBUILD_NVTX=OFF \\\n      -DCMAKE_TOOLCHAIN_FILE:STRING=\"$PWD/../platforms/aarch64-linux/aarch64-linux.toolchain.cmake\" \\\n      -DBUILD_BENCHMARK=OFF \\\n      -DCUDA_HOST=/usr/local/cuda-${CUDA_VERSION} \\\n      -DOPENCV_PATH=/usr/aarch64-linux-gnu/ \\\n      -DCUDA_TARGET=/usr/local/cuda-${CUDA_VERSION}/targets/aarch64-linux \\\n      -DPROTOBUF_TARGET=/usr/aarch64-linux-gnu/ \\\n      -DProtobuf_LIBRARIES=/usr/aarch64-linux-gnu/lib \\\n      -DFFMPEG_ROOT_DIR=/usr/aarch64-linux-gnu/ \\\n      -E env LDFLAGS=\"-ljpeg\" \\\n      -DVERBOSE=1 \\\n      ../ && make install -j12 && \\\n    cp dali/python/nvidia/dali/libdali.so /usr/aarch64-linux-gnu/lib/ && \\\n    rsync -a  dali/python/nvidia/dali/include /usr/aarch64-linux-gnu/ && \\\n    rsync -a install/include /usr/aarch64-linux-gnu/ && \\\n    rm -rf build\n\nRUN rm -rf DALI\n\n# Weird bugs with having this compiled first\nRUN cd /protobuf-${PROTOBUF_VERSION} && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CXXFLAGS=\"-fPIC\" --prefix=/usr/local 2>&1 > /dev/null && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install 2>&1 > /dev/null && \\\n    make clean\n\nRUN rm -rf /protobuf-${PROTOBUF_VERSION}\n"
}