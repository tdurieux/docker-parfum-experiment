{
  "startTime": 1674220388992,
  "endTime": 1674220391206,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 6,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 8,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 33,
        "columnEnd": 74
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 36,
        "columnEnd": 82
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 32,
        "columnEnd": 77
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 197,
        "lineEnd": 197,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 28,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 29,
        "columnEnd": 54
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 84,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 20,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 4,
        "columnEnd": 134
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 6,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 20,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 4,
        "columnEnd": 134
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 4,
        "columnEnd": 134
      }
    }
  ],
  "repairedDockerfile": "#\n# Copyright (c) 2021, NVIDIA CORPORATION. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nARG IMAGE=nvcr.io/nvidia/tensorflow:21.03-tf2-py3\nFROM ${IMAGE}\nENV CUDA_SHORT_VERSION=11.2\n\nSHELL [\"/bin/bash\", \"-c\"]\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/lib:/repos/dist/lib\n\nENV DEBIAN_FRONTEND=noninteractive\n\nARG RELEASE=true\nARG RMM_VER=v21.10.00\nARG CUDF_VER=v21.10.00\nARG NVTAB_VER=v0.6.0\nARG SM=\"60;61;70;75;80\"\n\nENV CUDA_HOME=/usr/local/cuda\nENV CUDA_PATH=$CUDA_HOME\nENV CUDA_CUDA_LIBRARY=${CUDA_HOME}/lib64/stubs\nENV PATH=${CUDA_HOME}/lib64/:${PATH}:${CUDA_HOME}/bin\n\n# Build env variables for rmm\nENV INSTALL_PREFIX=/usr\n\nRUN apt update -y --fix-missing && \\\n    apt upgrade -y && \\\n      apt install -y --no-install-recommends software-properties-common && \\\n      apt update -y --fix-missing && rm -rf /var/lib/apt/lists/*;\n\nRUN apt install -y --no-install-recommends \\\n      git \\\n      libboost-all-dev \\\n      python3.8-dev \\\n      build-essential \\\n      autoconf \\\n      bison \\\n      flex \\\n      libboost-filesystem-dev \\\n      libboost-system-dev \\\n      libboost-regex-dev \\\n      libjemalloc-dev \\\n      wget \\\n      libssl-dev \\\n      protobuf-compiler \\\n      clang-format \\\n      aptitude \\\n      numactl \\\n      libnuma-dev \\\n      libaio-dev \\\n      libibverbs-dev \\\n      libtool && \\\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n    #update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1 && \\\n    #wget https://bootstrap.pypa.io/get-pip.py && \\\n    #python get-pip.py\n\n# Install cmake\nRUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --batch --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \\\n    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y cmake && rm -rf /var/lib/apt/lists/*;\n\n# Install arrow from source\nENV ARROW_HOME=/usr/local\nRUN git clone --branch apache-arrow-4.0.1 --recurse-submodules https://github.com/apache/arrow.git build-env && \\\n    pushd build-env && \\\n      export PARQUET_TEST_DATA=\"${PWD}/cpp/submodules/parquet-testing/data\" && \\\n      export ARROW_TEST_DATA=\"${PWD}/testing/data\" && \\\n      pip install --no-cache-dir -r python/requirements-build.txt && \\\n      mkdir cpp/release && \\\n      pushd cpp/release && \\\n        cmake -DCMAKE_INSTALL_PREFIX=${ARROW_HOME} \\\n              -DCMAKE_INSTALL_LIBDIR=lib \\\n              -DCMAKE_LIBRARY_PATH=${CUDA_CUDA_LIBRARY} \\\n              -DARROW_FLIGHT=ON \\\n              -DARROW_GANDIVA=OFF \\\n              -DARROW_ORC=ON \\\n              -DARROW_WITH_BZ2=ON \\\n              -DARROW_WITH_ZLIB=ON \\\n              -DARROW_WITH_ZSTD=ON \\\n              -DARROW_WITH_LZ4=ON \\\n              -DARROW_WITH_SNAPPY=ON \\\n              -DARROW_WITH_BROTLI=ON \\\n              -DARROW_PARQUET=ON \\\n              -DARROW_PYTHON=ON \\\n              -DARROW_PLASMA=ON \\\n              -DARROW_BUILD_TESTS=ON \\\n              -DARROW_CUDA=ON \\\n              -DARROW_DATASET=ON \\\n              .. && \\\n        make -j$(nproc) && \\\n        make install && \\\n      popd && \\\n      pushd python && \\\n        export PYARROW_WITH_PARQUET=ON && \\\n        export PYARROW_WITH_CUDA=ON && \\\n        export PYARROW_WITH_ORC=ON && \\\n        export PYARROW_WITH_DATASET=ON && \\\n        python setup.py build_ext --build-type=release bdist_wheel && \\\n        pip install --no-cache-dir dist/*.whl && \\\n      popd && \\\n    popd && \\\n    rm -rf build-env\n\n\n# Install rmm from source\nRUN git clone https://github.com/rapidsai/rmm.git build-env && cd build-env/ && \\\n    if [ \"$RELEASE\" == \"true\" ] && [ ${RMM_VER} != \"vnightly\" ] ; then git fetch --all --tags && git checkout tags/${RMM_VER}; else git checkout main; fi; \\\n    sed -i '/11.2/ a \"11.4\": \"11.x\",' python/setup.py && \\\n    cd ..; \\\n    pushd build-env && \\\n    ./build.sh librmm && \\\n    pip install --no-cache-dir python/. && \\\n    popd && \\\n    rm -rf build-env\n\n\n\n# Build env for CUDF build\nRUN git clone https://github.com/rapidsai/cudf.git build-env && cd build-env/ && \\\n    if [ \"$RELEASE\" == \"true\" ] && [ ${CUDF_VER} != \"vnightly\" ] ; then git fetch --all --tags && git checkout tags/${CUDF_VER}; else git checkout main; fi; \\\n    git submodule update --init --recursive && \\\n    cd .. && \\\n    pushd build-env && \\\n      export CUDF_HOME=${PWD} && \\\n      export CUDF_ROOT=${PWD}/cpp/build/ && \\\n      export CMAKE_LIBRARY_PATH=${CUDA_CUDA_LIBRARY} && \\\n      ./build.sh libcudf cudf dask_cudf && \\\n      protoc -I=python/cudf/cudf/utils/metadata --python_out=/usr/local/lib/python3.8/dist-packages/cudf/utils/metadata python/cudf/cudf/utils/metadata/orc_column_statistics.proto && \\\n    popd && \\\n    rm -rf build-env\n\nRUN apt-get update -y && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        vim gdb git wget unzip tar python3.8-dev \\\n        zlib1g-dev lsb-release clang-format libboost-all-dev \\\n        openssl curl zip\\\n       \tslapd && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION='python'\n\n\nRUN pip install --no-cache-dir pandas sklearn ortools nvtx-plugins pydot && \\\n    pip cache purge\n\n# tf-nightly for performance test\n# more details: https://github.com/tensorflow/tensorflow/issues/44194\nRUN pip uninstall tensorflow -y; pip install --no-cache-dir tf-nightly==2.7.0.dev20210722\nRUN pip uninstall keras-nightly -y; pip install --no-cache-dir keras-nightly==2.7.0.dev2021072200\n\n\nRUN mkdir -p /usr/local/nvidia/lib64 && \\\n    ln -s /usr/local/cuda/lib64/libcusolver.so /usr/local/nvidia/lib64/libcusolver.so.10\n\nRUN pip install --no-cache-dir pybind11\nSHELL [\"/bin/bash\", \"-c\"]\n\n# prepare nccl\nRUN apt remove -y libnccl2 libnccl-dev\nRUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin \\\n    && mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 \\\n    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub \\\n    && add-apt-repository \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /\" \\\n    && apt-get update \\\n    && apt install -y --no-install-recommends libnccl2=2.8.4-1+cuda11.2 libnccl-dev=2.8.4-1+cuda11.2 && rm -rf /var/lib/apt/lists/*;\n\n# install Horovod\nRUN pip uninstall horovod -y\nRUN HOROVOD_WITH_MPI=1 HOROVOD_WITH_TENSORFLOW=1 HOROVOD_GPU_OPERATIONS=NCCL \\\n    pip install horovod[spark] --no-cache-dir\n\n# Install NVTabular\nRUN git clone https://github.com/NVIDIA/NVTabular.git /nvtabular/ && \\\n    cd /nvtabular/; if [ \"$RELEASE\" == \"true\" ] && [ ${NVTAB_VER} != \"vnightly\" ] ; then git fetch --all --tags && git checkout tags/${NVTAB_VER}; else git checkout main; fi; \\\n    python setup.py develop --user;\n\n\nRUN pip install --no-cache-dir pynvml pytest graphviz sklearn scipy matplotlib\nRUN pip install --no-cache-dir nvidia-pyindex; pip install --no-cache-dir tritonclient[all] grpcio-channelz\nRUN pip install --no-cache-dir nvtx mpi4py==3.0.3 cupy-cuda112 cachetools typing_extensions fastavro\n\nRUN apt-get update; apt-get install --no-install-recommends -y graphviz && rm -rf /var/lib/apt/lists/*;\n\nRUN pip uninstall numpy -y; pip install --no-cache-dir numpy\nRUN pip install --no-cache-dir dask==2021.04.1 distributed==2021.04.1 dask-cuda\nRUN pip install --no-cache-dir dask[dataframe]==2021.04.1\nRUN pip uninstall pandas -y; pip install --no-cache-dir pandas==1.1.5\nRUN echo $(du -h --max-depth=1 /)\n\n\n# install spark-3.1.2-bin-hadoop3.2\nRUN wget \\\n    https://mirror-hk.koddos.net/apache/spark/spark-3.1.2/spark-3.1.2-bin-hadoop3.2.tgz \\\n    && tar -xzf spark-3.1.2-bin-hadoop3.2.tgz -C /opt/ \\\n    && rm spark-3.1.2-bin-hadoop3.2.tgz\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get install openjdk-8-jdk openjdk-8-jre lsb-release -y --allow-downgrades --allow-change-held-packages --no-install-recommends && rm -rf /var/lib/apt/lists/*;\nENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-amd64\nENV PATH $PATH:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/bin:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin\n\n# add spark env to conf\nADD spark-env.sh /opt/spark-3.1.2-bin-hadoop3.2/conf/\n\nADD start-spark.sh /workspace/\nADD submit.sh /workspace/\nADD criteo_keras.py /workspace/\n\nHEALTHCHECK NONE\nENTRYPOINT []\nCMD [\"/bin/bash\"]\n"
}