{
  "startTime": 1674248721541,
  "endTime": 1674248722799,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 3,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 46,
        "columnStart": 3,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright (c) 2021-2022, NVIDIA CORPORATION. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# A container that can be used to build UDF native code against libcudf\nARG CUDA_VERSION=11.5.0\nARG LINUX_VERSION=ubuntu18.04\n\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\n\nARG DEBIAN_FRONTEND=noninteractive\nARG PARALLEL_LEVEL=10\nENV PARALLEL_LEVEL=10\n\nRUN GCC_VERSION=$(bash -c '\\\nCUDA_VERSION=$(nvcc --version | head -n4 | tail -n1 | cut -d\" \" -f5 | cut -d\",\" -f1); \\\nCUDA_VERSION_MAJOR=$(echo $CUDA_VERSION | tr -d '.' | cut -c 1-2); \\\nCUDA_VERSION_MINOR=$(echo $CUDA_VERSION | tr -d '.' | cut -c 3); \\\n  if [[ \"$CUDA_VERSION_MAJOR\" == 9 ]]; then echo \"7\"; \\\n  elif [[ \"$CUDA_VERSION_MAJOR\" == 10 ]]; then echo \"8\"; \\\n  elif [[ \"$CUDA_VERSION_MAJOR\" == 11 ]]; then echo \"9\"; \\\n  else echo \"10\"; \\\n  fi') \\\n&& apt update -y \\\n&& apt install --no-install-recommends -y software-properties-common \\\n&& add-apt-repository -y ppa:git-core/ppa \\\n&& add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n&& add-apt-repository ppa:deadsnakes/ppa \\\n&& apt update -y \\\n&& apt install --no-install-recommends -y \\\n   build-essential git rsync wget \\\n   gcc-${GCC_VERSION} g++-${GCC_VERSION} \\\n   openjdk-8-jdk maven tzdata \\\n   # CMake dependencies\n   curl libssl-dev libcurl4-openssl-dev zlib1g-dev \\\n&& apt autoremove -y \\\n&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n&& update-alternatives \\\n   --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 100 \\\n&& update-alternatives \\\n   --install /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION} 100 \\\n# Set gcc-${GCC_VERSION} as the default gcc\n&& update-alternatives --set gcc /usr/bin/gcc-${GCC_VERSION} \\\n# Set gcc-${GCC_VERSION} as the default g++\n&& update-alternatives --set g++ /usr/bin/g++-${GCC_VERSION} \\\n# Set JDK8 as the default Java\n&& update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n\nARG CMAKE_VERSION=3.20.5\n\n# Install CMake\nRUN cd /tmp \\\n && curl -fsSLO --compressed \"https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.tar.gz\" -o /tmp/cmake-$CMAKE_VERSION.tar.gz \\\n && tar -xvzf /tmp/cmake-$CMAKE_VERSION.tar.gz && cd /tmp/cmake-$CMAKE_VERSION \\\n && /tmp/cmake-$CMAKE_VERSION/bootstrap \\\n    --system-curl \\\n    --parallel=${PARALLEL_LEVEL} \\\n && make install -j${PARALLEL_LEVEL} \\\n && cd /tmp && rm -rf /tmp/cmake-$CMAKE_VERSION* && rm /tmp/cmake-$CMAKE_VERSION.tar.gz\n\n"
}