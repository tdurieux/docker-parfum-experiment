{
  "startTime": 1674250277224,
  "endTime": 1674250278515,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 69,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 55,
        "columnStart": 22,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "# Updated from Horovod Dockerfile, updated with latest software and verified on DGX Kubernetes cluster\n#\nFROM nvidia/cuda:11.2.1-devel-ubuntu20.04\n\n# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV TENSORFLOW_VERSION=2.4.1\nENV PYTORCH_VERSION=1.6.0\nENV TORCHVISION_VERSION=0.7.0\nENV CUDNN_VERSION=8.1.0.77-1+cuda11.2\nENV NCCL_VERSION=2.8.4-1+cuda11.2\nENV MXNET_VERSION=1.6.0.post0\n\nARG python=3.8\nENV PYTHON_VERSION=${python}\n\nENV TZ=US/Pacific\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Temporary fix for \"libcusolver.so.10 not found\" in TF2.4 with cuda > 11.0\nENV CUDA_LIB_PATH=/usr/local/cuda-11.2/targets/x86_64-linux/lib/\nRUN ln -s ${CUDA_LIB_PATH}libcusolver.so.11 ${CUDA_LIB_PATH}libcusolver.so.10\n\n# Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n\nRUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        g++-7 \\\n        git \\\n        curl \\\n        vim \\\n        wget \\\n\tapt-utils \\\n        ca-certificates \\\n\t\\\n        iproute2 \\\n        iputils-ping \\\n        net-tools \\\n        ethtool \\\n        pciutils \\\n        libnl-route-3-200 \\\n        kmod \\\n        lsof \\\n\t\\\n        libcudnn8=${CUDNN_VERSION} \\\n        libnccl2=${NCCL_VERSION} \\\n        libnccl-dev=${NCCL_VERSION} \\\n        libjpeg-dev \\\n        libpng-dev \\\n        python${PYTHON_VERSION} \\\n        python${PYTHON_VERSION}-dev \\\n        python${PYTHON_VERSION}-distutils \\\n        librdmacm1 \\\n        libibverbs1 \\\n        ibverbs-providers && rm -rf /var/lib/apt/lists/*;\n\nRUN ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python\nRUN rm /usr/bin/python3 && ln -s python3.8 /usr/bin/python3\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n# Install TensorFlow, Keras, PyTorch and MXNet\nRUN pip install --no-cache-dir future typing packaging\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir tensorflow==${TENSORFLOW_VERSION} keras h5py\n\nRUN PYTAGS=$(python -c \"from packaging import tags; tag = list(tags.sys_tags())[0]; print(f'{tag.interpreter}-{tag.abi}')\") && \\\n    pip install --no-cache-dir https://download.pytorch.org/whl/cu101/torch-${PYTORCH_VERSION}%2Bcu101-${PYTAGS}-linux_x86_64.whl \\\n        https://download.pytorch.org/whl/cu101/torchvision-${TORCHVISION_VERSION}%2Bcu101-${PYTAGS}-linux_x86_64.whl\nRUN pip install --no-cache-dir mxnet-cu101==${MXNET_VERSION}\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://www.open-mpi.org/software/ompi/v4.1/downloads/openmpi-4.1.0.tar.gz && \\\n    tar zxf openmpi-4.1.0.tar.gz && \\\n    cd openmpi-4.1.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-4.1.0.tar.gz\n\n# Install Horovod\nRUN HOROVOD_GPU_OPERATIONS=NCCL pip --no-cache-dir install horovod\n\n## Install Mellano OFED\nENV MOFED_DIR MLNX_OFED_LINUX-5.2-2.2.0.0-ubuntu20.04-x86_64\nENV MOFED_SITE_PLACE MLNX_OFED-5.2-2.2.0.0\nENV MOFED_IMAGE MLNX_OFED_LINUX-5.2-2.2.0.0-ubuntu20.04-x86_64.tgz\n\nRUN apt-get update && apt-get install --no-install-recommends -y lsb-core && rm -rf /var/lib/apt/lists/*;\nRUN wget https://content.mellanox.com/ofed/${MOFED_SITE_PLACE}/${MOFED_IMAGE} && \\\n    tar -xzvf ${MOFED_IMAGE} && \\\n    ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update -q --force && \\\n    cd .. && \\\n    rm -rf ${MOFED_DIR} && \\\n    rm -rf *.tgz\nRUN apt-get install --no-install-recommends dkms -y && rm -rf /var/lib/apt/lists/*;\n\n# Install OpenSSH for MPI to communicate between containers\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && \\\n    mkdir -p /var/run/sshd && rm -rf /var/lib/apt/lists/*;\n\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Download examples\nRUN apt-get install -y --no-install-recommends subversion && \\\n    svn checkout https://github.com/horovod/horovod/trunk/examples && \\\n    rm -rf /examples/.svn && rm -rf /var/lib/apt/lists/*;\n\n# Install NCCL-Test step ------------------------------------------------------\nWORKDIR /nccl_tests\nRUN wget -q -O - https://github.com/NVIDIA/nccl-tests/archive/master.tar.gz | tar --strip-components=1 -xzf - \\\n    && make MPI=1\n\n# Tensorflow TF examples\nWORKDIR \"/examples\"\nRUN git clone https://github.com/tensorflow/benchmarks.git && \\\n    cd benchmarks/\nWORKDIR \"/examples/benchmarks\"\n\nENV LD_LIBRARY_PATH /usr/local/lib:/usr/lib:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\nCMD [\"/bin/bash\"]\n"
}