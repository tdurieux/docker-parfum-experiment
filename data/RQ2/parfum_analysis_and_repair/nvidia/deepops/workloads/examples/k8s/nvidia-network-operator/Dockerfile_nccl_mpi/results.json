{
  "startTime": 1674248225071,
  "endTime": 1674248226448,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 52,
        "columnStart": 22,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:11.6.0-devel-ubuntu20.04\n\n# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV TENSORFLOW_VERSION=2.7.0\nENV PYTORCH_VERSION=1.10.2+cu113\nARG PYTORCH_LIGHTNING_VERSION=1.5.9\nENV TORCHVISION_VERSION=0.11.3+cu113\nENV CUDNN_VERSION=8.3.2.44-1+cuda11.5\nENV NCCL_VERSION=2.11.4-1+cuda11.6\nENV MXNET_VERSION=1.8.0.post0\n\nARG python=3.8\nENV PYTHON_VERSION=${python}\n\nENV TZ=US/Pacific\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n\nRUN apt-key del 7fa2af80\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/7fa2af80.pub\n\nRUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        g++-7 \\\n        git \\\n        curl \\\n        vim \\\n        wget \\\n        apt-utils \\\n        ca-certificates \\\n        iproute2 \\\n        iputils-ping \\\n        net-tools \\\n        ethtool \\\n        pciutils \\\n        libnl-route-3-200 \\\n        kmod \\\n        lsof \\\n        libcudnn8=${CUDNN_VERSION} \\\n        libnccl2=${NCCL_VERSION} \\\n        libnccl-dev=${NCCL_VERSION} \\\n        libjpeg-dev \\\n        libpng-dev \\\n        python${PYTHON_VERSION} \\\n        python${PYTHON_VERSION}-dev \\\n        python${PYTHON_VERSION}-distutils \\\n        librdmacm1 \\\n        libibverbs1 \\\n        ibverbs-providers && rm -rf /var/lib/apt/lists/*;\n\nRUN ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python\n\n# pinning pip to 21.0.0 as 22.0.0 cannot fetch pytorch packages from html linl\n# https://github.com/pytorch/pytorch/issues/72045\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py && \\\n    pip install --no-cache-dir -U --force pip~=21.0.0\n\n# Install recent CMake.\nRUN pip install --no-cache-dir -U cmake~=3.13.0\n\n# Install PyTorch, TensorFlow, Keras and MXNet\nRUN pip install --no-cache-dir \\\n    torch==${PYTORCH_VERSION} \\\n    torchvision==${TORCHVISION_VERSION} \\\n    -f https://download.pytorch.org/whl/${PYTORCH_VERSION/*+/}/torch_stable.html\nRUN pip install --no-cache-dir pytorch_lightning==${PYTORCH_LIGHTNING_VERSION}\n\nRUN pip install --no-cache-dir future typing packaging\nRUN pip install --no-cache-dir \\\n    tensorflow==${TENSORFLOW_VERSION} \\\n    keras \\\n    h5py\n\nRUN pip install --no-cache-dir mxnet-cu112==${MXNET_VERSION}\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://www.open-mpi.org/software/ompi/v4.1/downloads/openmpi-4.1.3.tar.gz && \\\n    tar zxf openmpi-4.1.3.tar.gz && \\\n    cd openmpi-4.1.3 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-4.1.3.tar.gz\n\n## Install Horovod\nRUN HOROVOD_GPU_OPERATIONS=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install horovod --no-cache-dir -v && \\\n    horovodrun --check-build\n\n# Install OpenSSH for MPI to communicate between containers\nRUN apt-get install -y --no-install-recommends openssh-client openssh-server && \\\n    mkdir -p /var/run/sshd && rm -rf /var/lib/apt/lists/*;\nRUN sed -i 's/[ #]\\(.*StrictHostKeyChecking \\).*/ \\1no/g' /etc/ssh/ssh_config && \\\n    echo \"    UserKnownHostsFile /dev/null\" >> /etc/ssh/ssh_config && \\\n    sed -i 's/#\\(StrictModes \\).*/\\1no/g' /etc/ssh/sshd_config\n\n## Install Mellano OFED\nENV MOFED_VERSION 5.5-1.0.3.2\nENV MOFED_DIR MLNX_OFED_LINUX-${MOFED_VERSION}-ubuntu20.04-x86_64\nENV MOFED_SITE_PLACE MLNX_OFED-${MOFED_VERSION}\nENV MOFED_IMAGE MLNX_OFED_LINUX-${MOFED_VERSION}-ubuntu20.04-x86_64.tgz\n\nRUN apt-get update && apt-get install --no-install-recommends -y lsb-core && rm -rf /var/lib/apt/lists/*;\nRUN wget https://content.mellanox.com/ofed/${MOFED_SITE_PLACE}/${MOFED_IMAGE} && \\\n    tar -xzvf ${MOFED_IMAGE} && \\\n    ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update -q --force && \\\n    cd .. && \\\n    rm -rf ${MOFED_DIR} && \\\n    rm -rf *.tgz\nRUN apt-get install --no-install-recommends dkms -y && rm -rf /var/lib/apt/lists/*;\n\n# Download examples\nRUN apt-get install -y --no-install-recommends subversion && \\\n    svn checkout https://github.com/horovod/horovod/trunk/examples && \\\n    rm -rf /examples/.svn && rm -rf /var/lib/apt/lists/*;\n\n# Install NCCL-Test step ------------------------------------------------------\nWORKDIR /nccl_tests\nRUN wget -q -O - https://github.com/NVIDIA/nccl-tests/archive/master.tar.gz | tar --strip-components=1 -xzf - \\\n    && make MPI=1\n\n# Tensorflow TF examples\nWORKDIR \"/examples\"\nRUN git clone https://github.com/tensorflow/benchmarks.git && \\\n    cd benchmarks/\nWORKDIR \"/examples/benchmarks\"\n\nENV LD_LIBRARY_PATH /usr/local/lib:/usr/lib:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\nCMD [\"/bin/bash\"]\n\n"
}