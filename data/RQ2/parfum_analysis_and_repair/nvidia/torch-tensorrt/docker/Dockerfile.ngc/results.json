{
  "startTime": 1674249603694,
  "endTime": 1674249604483,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 120
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE=22.04\nARG BASE_IMG=nvcr.io/nvidia/pytorch:${BASE}-py3\nFROM ${BASE_IMG} as base\n\nFROM base as torch-tensorrt-builder-base\n\n# Removing any bazel or torch-tensorrt pre-installed from the base image\nRUN rm -rf /opt/pytorch/torch_tensorrt /usr/bin/bazel\n\nARG ARCH=\"x86_64\"\nARG TARGETARCH=\"amd64\"\nARG BAZEL_VERSION=5.1.1\n\nRUN [[ \"$TARGETARCH\" == \"amd64\" ]] && ARCH=\"x86_64\" || ARCH=\"${TARGETARCH}\" \\\n && wget -q https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-linux-${ARCH} -O /usr/bin/bazel \\\n && chmod a+x /usr/bin/bazel\n\n# Workaround for bazel expecting both static and shared versions, we only use shared libraries inside container\nRUN touch /usr/lib/$HOSTTYPE-linux-gnu/libnvinfer_static.a\n\nRUN rm -rf /usr/local/cuda/lib* /usr/local/cuda/include \\\n  && ln -sf /usr/local/cuda/targets/$HOSTTYPE-linux/lib /usr/local/cuda/lib64 \\\n  && ln -sf /usr/local/cuda/targets/$HOSTTYPE-linux/include /usr/local/cuda/include\n\nRUN apt-get update && apt-get install -y --no-install-recommends locales ninja-build && rm -rf /var/lib/apt/lists/* && locale-gen en_US.UTF-8\n\nFROM torch-tensorrt-builder-base as torch-tensorrt-builder\n\n# Removing any bazel or torch-tensorrt pre-installed from the base image\nRUN rm -rf /opt/pytorch/torch_tensorrt\n\nCOPY . /workspace/torch_tensorrt/src\nWORKDIR /workspace/torch_tensorrt/src\nRUN cp ./docker/WORKSPACE.docker WORKSPACE\n\n# This script builds both libtorchtrt bin/lib/include tarball and the Pythin wheel, in dist/\nRUN USE_CXX11=1 ./docker/dist-build.sh\n\nFROM base as torch-tensorrt\n\n# Removing any bazel or torch-tensorrt pre-installed from the base image\nRUN rm -rf /opt/pytorch/torch_tensorrt\n\n# copy source repo\nCOPY . /workspace/torch_tensorrt\nCOPY --from=torch-tensorrt-builder  /workspace/torch_tensorrt/src/py/dist/ .\nRUN conda init bash\n\nRUN pip3 install --no-cache-dir ipywidgets --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host pypi.python.org --trusted-host=files.pythonhosted.org\nRUN jupyter nbextension enable --py widgetsnbextension\n\nRUN pip3 install --no-cache-dir *.whl && rm -fr /workspace/torch_tensorrt/py/dist/* *.whl\n\nENV LD_LIBRARY_PATH /opt/conda/lib/python3.8/site-packages/torch/lib:/opt/conda/lib/python3.8/site-packages/torch_tensorrt/lib:${LD_LIBRARY_PATH}\nENV PATH /opt/conda/lib/python3.8/site-packages/torch_tensorrt/bin:${PATH}\n#\nWORKDIR /workspace\nRUN mv /workspace/torch_tensorrt /opt/pytorch/torch_tensorrt\nRUN cp /opt/pytorch/torch_tensorrt/docker/WORKSPACE.docker /opt/pytorch/torch_tensorrt/WORKSPACE\nRUN mkdir torch_tensorrt\nRUN ln -s /opt/pytorch/torch_tensorrt/notebooks /workspace/torch_tensorrt/notebooks\n\nCMD /bin/bash\n"
}