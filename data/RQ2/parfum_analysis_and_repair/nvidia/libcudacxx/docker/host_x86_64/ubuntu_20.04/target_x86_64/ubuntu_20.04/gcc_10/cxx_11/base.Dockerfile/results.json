{
  "startTime": 1674249698233,
  "endTime": 1674249699737,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 37,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for libcudacxx_base:host_x86_64_ubuntu_20.04__target_x86_64_ubuntu_20.04__gcc_9_cxx_11\n\nFROM ubuntu:20.04\n\nMAINTAINER Bryce Adelstein Lelbach <blelbach@nvidia.com>\n\nARG LIBCUDACXX_SKIP_BASE_TESTS_BUILD\nARG LIBCUDACXX_COMPUTE_ARCHS\nARG COMPILER_CXX_DIALECT\n\nENV COMPILER_CXX_DIALECT=$COMPILER_CXX_DIALECT\n\n###############################################################################\n# BUILD: The following is invoked when the image is built.\n\nSHELL [\"/usr/bin/env\", \"bash\", \"-c\"]\n\nRUN apt-get -y update \\\n && DEBIAN_FRONTEND=\"noninteractive\" TZ=\"US/Pacific\" \\\n    apt-get --no-install-recommends \\\n    -y install g++-9 clang-6.0 python3-pip \\\n && python3 -m pip install lit \\\n && mkdir -p /sw/gpgpu/libcudacxx/build \\\n && mkdir -p /sw/gpgpu/libcudacxx/libcxx/build && rm -rf /var/lib/apt/lists/*;\n\n# Update CMake to 3.18\nADD https://github.com/Kitware/CMake/releases/download/v3.18.5/cmake-3.18.5-Linux-x86_64.sh /tmp/cmake.sh\nRUN sh /tmp/cmake.sh --skip-license --prefix=/usr\n\n# For debugging\\.\n#RUN apt-get -y install gdb strace vim\n\n# We use ADD here because it invalidates the cache for subsequent steps, which\n# is what we want, as we need to rebuild if the sources have changed.\n\n# Copy NVCC and the CUDA runtime from the source tree.\nADD bin /sw/gpgpu/bin\n\n\n# Copy libcu++ sources from the source tree.\nADD libcudacxx /sw/gpgpu/libcudacxx\n\n# List out everything in /sw before the build.\nRUN echo \"Contents of /sw:\" && cd /sw/ && find\n\n# Build libc++ and configure libc++ tests.\nRUN set -o pipefail; cd /sw/gpgpu/libcudacxx/libcxx/build\\\n && cmake ../..\\\n -DLIBCUDACXX_ENABLE_STATIC_LIBRARY=OFF\\\n -DLIBCUDACXX_ENABLE_LIBCUDACXX_TESTS=OFF\\\n -DLIBCUDACXX_ENABLE_LIBCXX_TESTS=ON\\\n -DLIBCXX_TEST_STANDARD_VER=c++$COMPILER_CXX_DIALECT\\\n -DCMAKE_CXX_COMPILER=g++-9\\\n -DCMAKE_CUDA_COMPILER=/sw/gpgpu/bin/x86_64_Linux_release/nvcc\\\n && make -j\\\n 2>&1 | tee /sw/gpgpu/libcudacxx/build/cmake_libcxx.log\n\n# Configure libcu++ tests.\nRUN set -o pipefail; cd /sw/gpgpu/libcudacxx/build\\\n && cmake ..\\\n -DCMAKE_CXX_COMPILER=g++-9\\\n -DCMAKE_CUDA_COMPILER=/sw/gpgpu/bin/x86_64_Linux_release/nvcc\\\n -DLIBCUDACXX_ENABLE_LIBCUDACXX_TESTS=ON\\\n -DLIBCUDACXX_ENABLE_LIBCXX_TESTS=OFF\\\n -DLIBCUDACXX_TEST_STANDARD_VER=c++$COMPILER_CXX_DIALECT\\\n 2>&1 | tee /sw/gpgpu/libcudacxx/build/cmake_libcudacxx.log\n\n# Build tests if requested.\nRUN set -o pipefail; cd /sw/gpgpu/libcudacxx\\\n && LIBCUDACXX_COMPUTE_ARCHS=$LIBCUDACXX_COMPUTE_ARCHS\\\n LIBCUDACXX_SKIP_BASE_TESTS_BUILD=$LIBCUDACXX_SKIP_BASE_TESTS_BUILD\\\n /sw/gpgpu/libcudacxx/utils/nvidia/linux/perform_tests.bash\\\n --skip-tests-runs\\\n 2>&1 | tee /sw/gpgpu/libcudacxx/build/build_lit_all.log\n\n# Build tests for sm6x if requested.\nRUN set -o pipefail; cd /sw/gpgpu/libcudacxx\\\n && LIBCUDACXX_COMPUTE_ARCHS=\"60 61 62\"\\\n LIBCUDACXX_SKIP_BASE_TESTS_BUILD=$LIBCUDACXX_SKIP_BASE_TESTS_BUILD\\\n /sw/gpgpu/libcudacxx/utils/nvidia/linux/perform_tests.bash\\\n --skip-tests-runs\\\n --skip-libcxx-tests\\\n 2>&1 | tee /sw/gpgpu/libcudacxx/build/build_lit_sm6x.log\n\n# Build tests for sm7x if requested.\nRUN set -o pipefail; cd /sw/gpgpu/libcudacxx\\\n && LIBCUDACXX_COMPUTE_ARCHS=\"70 72 75\"\\\n LIBCUDACXX_SKIP_BASE_TESTS_BUILD=$LIBCUDACXX_SKIP_BASE_TESTS_BUILD\\\n /sw/gpgpu/libcudacxx/utils/nvidia/linux/perform_tests.bash\\\n --skip-tests-runs\\\n --skip-libcxx-tests\\\n 2>&1 | tee /sw/gpgpu/libcudacxx/build/build_lit_sm7x.log\n\n# Build tests for sm8x if requested.\nRUN set -o pipefail; cd /sw/gpgpu/libcudacxx\\\n && LIBCUDACXX_COMPUTE_ARCHS=\"80\"\\\n LIBCUDACXX_SKIP_BASE_TESTS_BUILD=$LIBCUDACXX_SKIP_BASE_TESTS_BUILD\\\n /sw/gpgpu/libcudacxx/utils/nvidia/linux/perform_tests.bash\\\n --skip-tests-runs\\\n --skip-libcxx-tests\\\n 2>&1 | tee /sw/gpgpu/libcudacxx/build/build_lit_sm8x.log\n\n# Package the logs up, because `docker container cp` doesn't support wildcards,\n# and I want to limit the number of places we have to make changes when we ship\n# new architectures.\nRUN cd /sw/gpgpu/libcudacxx/build && tar -cvf logs.tar *.log && rm logs.tar\n\nWORKDIR /sw/gpgpu/libcudacxx\n\n"
}