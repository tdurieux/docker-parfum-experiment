{
  "startTime": 1674249417022,
  "endTime": 1674249418385,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 5,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 5,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 5,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 5,
        "columnEnd": 97
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 5,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 5,
        "columnEnd": 103
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 5,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 77
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 81,
        "columnStart": 2,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "#########################\n# Polar needs c-lightning compiled with the DEVELOPER=1 flag in order to decrease the\n# normal 30 second bitcoind poll interval using the argument --dev-bitcoind-poll=<seconds>.\n# When running in regtest, we want to be able to mine blocks and confirm transactions instantly.\n# Original Source: https://github.com/ElementsProject/lightning/blob/v0.7.3/Dockerfile\n#########################\n\n#########################\n# BEGIN ElementsProject/lightning/Dockerfile\n#########################\n\n# This dockerfile is meant to compile a core-lightning x64 image\n# It is using multi stage build:\n# * downloader: Download litecoin/bitcoin and qemu binaries needed for core-lightning\n# * builder: Compile core-lightning dependencies, then core-lightning itself with static linking\n# * final: Copy the binaries required at runtime\n# The resulting image uploaded to dockerhub will only contain what is needed for runtime.\n# From the root of the repository, run \"docker build -t yourimage:yourtag .\"\nFROM debian:bullseye-slim as downloader\n\nRUN set -ex \\\n  && apt-get update \\\n  && apt-get install -y -qq --no-install-recommends ca-certificates dirmngr wget && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt\n\nRUN wget -qO /opt/tini \"https://github.com/krallin/tini/releases/download/v0.18.0/tini\" \\\n  && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855  /opt/tini\" | sha256sum -c - \\\n  && chmod +x /opt/tini\n\nARG BITCOIN_VERSION=22.0\nENV BITCOIN_TARBALL bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz\nENV BITCOIN_URL https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/$BITCOIN_TARBALL\nENV BITCOIN_ASC_URL https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/SHA256SUMS\n\nRUN mkdir /opt/bitcoin && cd /opt/bitcoin \\\n  && wget -qO $BITCOIN_TARBALL \"$BITCOIN_URL\" \\\n  && wget -qO bitcoin \"$BITCOIN_ASC_URL\" \\\n  && grep $BITCOIN_TARBALL bitcoin | tee SHA256SUMS \\\n  && sha256sum -c SHA256SUMS \\\n  && BD=bitcoin-$BITCOIN_VERSION/bin \\\n  && tar -xzvf $BITCOIN_TARBALL $BD/bitcoin-cli --strip-components=1 \\\n  && rm $BITCOIN_TARBALL\n\nENV LITECOIN_VERSION 0.16.3\nENV LITECOIN_PGP_KEY FE3348877809386C\nENV LITECOIN_URL https://download.litecoin.org/litecoin-${LITECOIN_VERSION}/linux/litecoin-${LITECOIN_VERSION}-x86_64-linux-gnu.tar.gz\nENV LITECOIN_ASC_URL https://download.litecoin.org/litecoin-${LITECOIN_VERSION}/linux/litecoin-${LITECOIN_VERSION}-linux-signatures.asc\nENV LITECOIN_SHA256 686d99d1746528648c2c54a1363d046436fd172beadaceea80bdc93043805994\n\n# install litecoin binaries\nRUN mkdir /opt/litecoin && cd /opt/litecoin \\\n  && wget -qO litecoin.tar.gz \"$LITECOIN_URL\" \\\n  && echo \"$LITECOIN_SHA256  litecoin.tar.gz\" | sha256sum -c - \\\n  && BD=litecoin-$LITECOIN_VERSION/bin \\\n  && tar -xzvf litecoin.tar.gz $BD/litecoin-cli --strip-components=1 --exclude=*-qt \\\n  && rm litecoin.tar.gz\n\nFROM debian:bullseye-slim as builder\n\nENV LIGHTNINGD_VERSION=master\nRUN apt-get update -qq && \\\n  apt-get install -qq -y --no-install-recommends \\\n  autoconf \\\n  automake \\\n  build-essential \\\n  ca-certificates \\\n  curl \\\n  dirmngr \\\n  gettext \\\n  git \\\n  gnupg \\\n  libpq-dev \\\n  libtool \\\n  libffi-dev \\\n  python3 \\\n  python3-dev \\\n  python3-mako \\\n  python3-pip \\\n  python3-venv \\\n  python3-setuptools \\\n  wget && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -q https://zlib.net/zlib-1.2.12.tar.gz \\\n  && tar xvf zlib-1.2.12.tar.gz \\\n  && cd zlib-1.2.12 \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make \\\n  && make install && cd .. && rm zlib-1.2.12.tar.gz && rm -rf zlib-1.2.12\n\nRUN apt-get install -y --no-install-recommends unzip tclsh \\\n  && wget -q https://www.sqlite.org/2019/sqlite-src-3290000.zip \\\n  && unzip sqlite-src-3290000.zip \\\n  && cd sqlite-src-3290000 \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-readline --disable-threadsafe --disable-load-extension \\\n  && make \\\n  && make install && cd .. && rm sqlite-src-3290000.zip && rm -rf sqlite-src-3290000 && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -q https://gmplib.org/download/gmp/gmp-6.1.2.tar.xz \\\n  && tar xvf gmp-6.1.2.tar.xz \\\n  && cd gmp-6.1.2 \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-assembly \\\n  && make \\\n  && make install && cd .. && rm gmp-6.1.2.tar.xz && rm -rf gmp-6.1.2\n\nENV RUST_PROFILE=release\nENV PATH=$PATH:/root/.cargo/bin/\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nRUN rustup toolchain install stable --component rustfmt --allow-downgrade\n\nWORKDIR /opt/lightningd\n#################### Polar Modification\n# Pull source code from github instead of a local repo\n# Original lines:\n# COPY . /tmp/lightning\n# RUN git clone --recursive /tmp/lightning . && \\\n#     git checkout $(git --work-tree=/tmp/lightning --git-dir=/tmp/lightning/.git rev-parse HEAD)\nARG CLN_VERSION\nRUN git clone --recursive --branch=v${CLN_VERSION} https://github.com/ElementsProject/lightning .\n####################\n\n#################### Polar Modification\n# This line is modified to enable developer command line flags\n# Original line: ARG DEVELOPER=0\nARG DEVELOPER=1\n####################\n\nENV PYTHON_VERSION=3\nRUN curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python3 - \\\n  && pip3 install --no-cache-dir -U pip \\\n  && pip3 install --no-cache-dir -U wheel \\\n  && /root/.local/bin/poetry config virtualenvs.create false \\\n  && /root/.local/bin/poetry install\n\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/tmp/lightning_install --enable-static && make -j3 DEVELOPER=${DEVELOPER} && make install\n\nFROM debian:bullseye-slim as final\n\nCOPY --from=downloader /opt/tini /usr/bin/tini\nRUN apt-get update && apt-get install -y --no-install-recommends socat inotify-tools python3 python3-pip libpq5\\\n  && rm -rf /var/lib/apt/lists/*\n\nENV LIGHTNINGD_DATA=/root/.lightning\nENV LIGHTNINGD_RPC_PORT=9835\nENV LIGHTNINGD_PORT=9735\nENV LIGHTNINGD_NETWORK=bitcoin\n\nRUN mkdir $LIGHTNINGD_DATA && \\\n  touch $LIGHTNINGD_DATA/config\nVOLUME [ \"/root/.lightning\" ]\nCOPY --from=builder /tmp/lightning_install/ /usr/local/\nCOPY --from=downloader /opt/bitcoin/bin /usr/bin\nCOPY --from=downloader /opt/litecoin/bin /usr/bin\n\n#################### Polar Modification\nCOPY --from=builder /opt/lightningd/contrib/lightning-cli.bash-completion /etc/bash_completion.d/\n####################\n\n#################### Polar Modification\n# This line is removed as we have our own entrypoint file\n# Original line: COPY tools/docker-entrypoint.sh entrypoint.sh\n####################\n\n#########################\n# END ElementsProject/lightning/Dockerfile\n#########################\n\n# install nodejs\nRUN apt-get update -y \\\n  && apt-get install --no-install-recommends -y curl gosu git \\\n  && curl -f -sL https://deb.nodesource.com/setup_12.x | bash - \\\n  && apt-get install --no-install-recommends -y nodejs \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# install c-lightning-REST API plugin\nRUN git clone https://github.com/Ride-The-Lightning/c-lightning-REST.git /opt/c-lightning-rest/ \\\n  && cd /opt/c-lightning-rest \\\n  && npm install \\\n  && chmod -R a+rw /opt/c-lightning-rest && npm cache clean --force;\n\n# install lightning-cli bash completion\nRUN curl -f -SLO https://raw.githubusercontent.com/scop/bash-completion/master/bash_completion \\\n  && mv bash_completion /usr/share/bash-completion/\n\nCOPY docker-entrypoint.sh /entrypoint.sh\nCOPY bashrc /home/clightning/.bashrc\n\nRUN chmod a+x /entrypoint.sh\n\nVOLUME [\"/home/clightning\"]\nVOLUME [\"/opt/c-lightning-rest/certs\"]\n\nEXPOSE 9735 9835 8080 10000\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD [\"lightningd\"]\n"
}