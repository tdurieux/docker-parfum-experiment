{
  "startTime": 1674249191529,
  "endTime": 1674249192457,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 5,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#########################\n# Original Source: https://github.com/ACINQ/eclair/blob/v0.3.3/Dockerfile\n#########################\nFROM adoptopenjdk/openjdk11:jdk-11.0.3_7-alpine as BUILD\n\n# Setup maven, we don't use https://hub.docker.com/_/maven/ as it declare .m2 as volume, we loose all mvn cache\n# We can alternatively do as proposed by https://github.com/carlossg/docker-maven#packaging-a-local-repository-with-the-image\n# this was meant to make the image smaller, but we use multi-stage build so we don't care\nRUN apk add --no-cache curl tar bash git\n\nARG MAVEN_VERSION=3.6.3\nARG USER_HOME_DIR=\"/root\"\nARG SHA=c35a1803a6e70a126e80b2b3ae33eed961f83ed74d18fcd16909b2d44d7dada3203f1ffe726c17ef8dcca2dcaa9fca676987befeadc9b9f759967a8cb77181c0\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\n\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n  && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n  && echo \"${SHA}  /tmp/apache-maven.tar.gz\" | sha512sum -c - \\\n  && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n  && rm -f /tmp/apache-maven.tar.gz \\\n  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\n\nENV MAVEN_HOME /usr/share/maven\nENV MAVEN_CONFIG \"$USER_HOME_DIR/.m2\"\n\n# Let's fetch eclair dependencies, so that Docker can cache them\n# This way we won't have to fetch dependencies again if only the source code changes\n# The easiest way to reliably get dependencies is to build the project with no sources\n#################### Polar Modification\n# No need to copy local files\n# Original lines:\n# WORKDIR /usr/src\n# COPY pom.xml pom.xml\n# COPY eclair-core/pom.xml eclair-core/pom.xml\n# COPY eclair-node/pom.xml eclair-node/pom.xml\n# COPY eclair-node-gui/pom.xml eclair-node-gui/pom.xml\n# COPY eclair-node/modules/assembly.xml eclair-node/modules/assembly.xml\n# COPY eclair-node-gui/modules/assembly.xml eclair-node-gui/modules/assembly.xml\n# RUN mkdir -p eclair-core/src/main/scala && touch eclair-core/src/main/scala/empty.scala\n# # Blank build. We only care about eclair-node, and we use install because eclair-node depends on eclair-core\n# RUN mvn install -pl eclair-node -am\n# RUN mvn clean\n#\n# Only then do we copy the sources\n# COPY . .\n####################\n\n#################### Polar Modification\n# Pull source code from github instead of a local repo\nWORKDIR /usr/repo\nARG ECLAIR_VERSION\nRUN git clone --branch=v${ECLAIR_VERSION} https://github.com/ACINQ/eclair.git .\n# Let's fetch eclair dependencies, so that Docker can cache them\nWORKDIR /usr/src\nRUN cp /usr/repo/pom.xml pom.xml\nRUN mkdir -p eclair-core && cp /usr/repo/eclair-core/pom.xml eclair-core/pom.xml\nRUN mkdir -p eclair-front && cp /usr/repo/eclair-front/pom.xml eclair-front/pom.xml\nRUN mkdir -p eclair-node && cp /usr/repo/eclair-node/pom.xml eclair-node/pom.xml\nRUN mkdir -p eclair-node/modules && cp /usr/repo/eclair-node/modules/assembly.xml eclair-node/modules/assembly.xml\nRUN mkdir -p eclair-core/src/main/scala && touch eclair-core/src/main/scala/empty.scala\n# Blank build. We only care about eclair-node, and we use install because eclair-node depends on eclair-core\nENV MAVEN_OPTS=-Xmx256m -XX:MaxPermSize=512m\nRUN mvn install -pl eclair-node -am\nRUN mvn clean\n# Only then do we copy the sources\nRUN cp -R -f /usr/repo/* .\n####################\n\n# And this time we can build in offline mode, specifying 'notag' instead of git commit\nRUN mvn package -pl eclair-node -am -DskipTests -Dgit.commit.id=notag -Dgit.commit.id.abbrev=notag -o\n# It might be good idea to run the tests here, so that the docker build fail if the code is bugged\n\n# We currently use a debian image for runtime because of some jni-related issue with sqlite\nFROM openjdk:11.0.15-jre-slim\nWORKDIR /app\n\n# install jq for eclair-cli\nRUN apt-get update && apt-get install --no-install-recommends -y bash jq curl unzip gosu && rm -rf /var/lib/apt/lists/*;\n\n# copy and install eclair-cli executable\nCOPY --from=BUILD /usr/src/eclair-core/eclair-cli .\nRUN chmod +x eclair-cli && mv eclair-cli /sbin/eclair-cli\n\n# we only need the eclair-node.zip to run\nCOPY --from=BUILD /usr/src/eclair-node/target/eclair-node-*.zip ./eclair-node.zip\nRUN unzip eclair-node.zip && mv eclair-node-* eclair-node && chmod +x eclair-node/bin/eclair-node.sh\n\n#################### Polar Modification\n# Original lines:\n# ENV ECLAIR_DATADIR=/data\n# ENV JAVA_OPTS=\n# RUN mkdir -p \"$ECLAIR_DATADIR\"\n# VOLUME [ \"/data\" ]\n# ENTRYPOINT JAVA_OPTS=\"${JAVA_OPTS}\" eclair-node/bin/eclair-node.sh \"-Declair.datadir=${ECLAIR_DATADIR}\"\nENV ECLAIR_DATADIR=/home/eclair/\nRUN chmod -R a+x eclair-node/*\nRUN ls -al eclair-node/bin\n\nRUN curl -f -SLO https://raw.githubusercontent.com/ACINQ/eclair/master/contrib/eclair-cli.bash-completion \\\n  && mkdir /etc/bash_completion.d \\\n  && mv eclair-cli.bash-completion /etc/bash_completion.d/ \\\n  && curl -f -SLO https://raw.githubusercontent.com/scop/bash-completion/master/bash_completion \\\n  && mv bash_completion /usr/share/bash-completion/\n\nCOPY docker-entrypoint.sh /entrypoint.sh\nCOPY bashrc /home/eclair/.bashrc\n\nRUN chmod a+x /entrypoint.sh\n\nVOLUME [\"/home/eclair\"]\n\nEXPOSE 9735 8080\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD JAVA_OPTS=\"${JAVA_OPTS}\" eclair-node/bin/eclair-node.sh \"-Declair.datadir=${ECLAIR_DATADIR}\"\n####################\n"
}