{
  "startTime": 1674221067424,
  "endTime": 1674221069429,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 7,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 7,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 125,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 226,
        "lineEnd": 234,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 7,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#-------------------------------------------------------------------------------------------------------------\n# The 'lite-build' target builds a container image to be used as the base of the supported build environment\n# for Qserv binaries.  It includes the compiler toolchain and other developer tools, system libraries, and\n# relatively-slowly changing third-party libs and tools (boost, antlr, protobuf, mysql-proxy, xrootd, etc.)\n#\n# The idea is that this container should change relatively infrequently (i.e. every few months or so), and\n# that developers will be able to pull and cache the latest version generated by CI.  Developers should not\n# need to regularly rebuild this image themselves, though they will typically build a few layers on top to\n# make a user-customized build image to ease development workflow (matching their user/group ids with their\n# development host for source file sharing, etc. -- see ../build-user/Dockerfile.)\n#\n# Packages are managed/built with OS-native package management, rather than eups, conda, etc. Off-the-shelf\n# packages are preferred whenever suitable, though some here require source builds.\n#-------------------------------------------------------------------------------------------------------------\n\nFROM almalinux:8 AS lite-build\n\nRUN dnf install -y 'dnf-command(config-manager)' \\\n    && dnf config-manager --set-enabled powertools \\\n    && dnf install -y epel-release \\\n    && dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo \\\n    && dnf update -y \\\n    && dnf install -y \\\n        apr-devel \\\n        apr-util-devel \\\n        bash-completion \\\n        boost-devel \\\n        clang \\\n        clang-tools-extra \\\n        docker-ce-cli \\\n        flex \\\n        gcc-c++ \\\n        gdb \\\n        gdb-gdbserver \\\n        git \\\n        glib2-devel \\\n        glibc-langpack-en \\\n        java-devel \\\n        jemalloc \\\n        libcurl-devel \\\n        libevent-devel \\\n        libtool \\\n        libuuid-devel \\\n        lsof \\\n        lua5.1-devel \\\n        make \\\n        mariadb-connector-c-devel \\\n        netcat \\\n        openssl-devel \\\n        patch \\\n        protobuf-compiler \\\n        protobuf-devel \\\n        python38-devel \\\n        tree \\\n        vim \\\n    && dnf clean all \\\n    && rm -rf /var/cache/yum\n\nRUN curl -f -s \"https://cmake.org/files/v3.17/cmake-3.17.2-Linux-x86_64.tar.gz\" \\\n    | tar --strip-components=1 -xz -C /usr/local\n\nRUN cd /tmp \\\n    && git clone https://github.com/apache/logging-log4cxx \\\n    && cd logging-log4cxx \\\n    && git checkout a7d562806f0512683d9f32b3c3f95300d4c62fbe \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-doxygen \\\n    && make -j8 \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf logging-log4cxx\n\nRUN cd /tmp \\\n    && git clone https://github.com/nlohmann/json \\\n    && mkdir json/build \\\n    && cd json/build \\\n    && cmake -DJSON_BuildTests=off .. \\\n    && make -j8 \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf json\n\nRUN cd /usr/share/java \\\n    && curl -f -O https://www.antlr.org/download/antlr-4.8-complete.jar \\\n    && cd /tmp \\\n    && git clone https://github.com/antlr/antlr4 \\\n    && cd antlr4 \\\n    && git reset --hard 1284814c2112c7ffe275a4831511b4a0f21dd44c \\\n    && git config user.email \"qserv@qserv-build\" \\\n    && curl -f https://patch-diff.githubusercontent.com/raw/antlr/antlr4/pull/2773.patch | git am \\\n    && mkdir runtime/Cpp/build \\\n    && cd runtime/Cpp/build \\\n    && cmake -DANTLR4_INSTALL=on .. \\\n    && make -j8 \\\n    && make install \\\n    && cp ../cmake/FindANTLR.cmake /usr/local/share/cmake-3.17/Modules/ \\\n    && cd /tmp \\\n    && rm -rf antlr4\n\nRUN cd /tmp \\\n    && git clone https://github.com/lsst/mysqlproxy \\\n    && cd mysqlproxy \\\n    && cp /usr/lib64/pkgconfig/lua-5.1.pc /usr/lib64/pkgconfig/lua5.1.pc \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf mysqlproxy\n\nRUN cd /tmp \\\n    && git clone https://github.com/lsst/xrootd \\\n    && cd xrootd \\\n    && git checkout affinity-flex-hash \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DENABLE_PYTHON=off .. \\\n    && make -j8 \\\n    && make install \\\n    && cd /tmp \\\n    && rm -rf xrootd\n\nRUN echo /usr/local/lib > /etc/ld.so.conf.d/local.conf \\\n    && echo /usr/local/lib64 >> /etc/ld.so.conf.d/local.conf \\\n    && ldconfig\n\nRUN pip3 install --no-cache-dir \\\n    backoff \\\n    backoff-stubs \\\n    click \\\n    deprecated \\\n    docker-compose \\\n    documenteer \\\n    jinja2 \\\n    ltd-conveyor \\\n    mypy \\\n    sphinx-rtd-theme \\\n    mysql-connector-python \\\n    numpy \\\n    pybind11[global] \\\n    pyyaml \\\n    sqlalchemy \\\n    sqlalchemy-stubs \\\n    types-PyYAML \\\n    types-requests\n\nRUN useradd --create-home --uid 1000 --shell /bin/bash qserv\n\nCMD [\"tail\", \"-f\", \"/dev/null\"]\n\n#-------------------------------------------------------------------------------------------------------------\n# The 'lite-run-base' target builds a container image that will be used as the base for Qserv production\n# runtime containers (right now, the single Qserv unified-binary container.)  This image is built as a second\n# stage following 'lite-build' in order to be able to pull in runtime components of packages we have built\n# there from source.  Qserv binaries will later be layered on top (see ../run/Dockerfile.)\n#\n# Like the 'lite-build' container image, this is envisioned to change relatively infrequently.  'lite-build'\n# and 'lite-run-base' should always be built and published as a matched set by CI.\n#\n# This image will be the base of runtime images that will need to be pushed/pulled from/to a lot of places in\n# production.  We are well-served by keeping this image as thin/light as practical (in particular, consider\n# adding debug tools, etc. to a separate debug sidecar container.)\n#\n# DO NOT BLOAT THE RUN BASE\n#-------------------------------------------------------------------------------------------------------------\n\nFROM almalinux:8 AS lite-run-base\n\nRUN dnf install -y 'dnf-command(config-manager)' \\\n    && dnf config-manager --set-enabled powertools \\\n    && dnf install -y epel-release \\\n    && dnf update -y \\\n    && dnf install -y \\\n        apr \\\n        apr-util \\\n        bash-completion \\\n        boost-filesystem \\\n        boost-program-options \\\n        boost-regex \\\n        boost-system \\\n        boost-thread \\\n        glib2 \\\n        glibc-langpack-en \\\n        jemalloc \\\n        libevent \\\n        libuuid \\\n        lua5.1 \\\n        mariadb-connector-c \\\n        openssl \\\n        procps-ng \\\n        protobuf \\\n        python38 \\\n        tree \\\n        vim \\\n    && dnf module install -y mariadb/client \\\n    && dnf clean all \\\n    && rm -rf /var/cache/yum\n\nRUN useradd --create-home --uid 1000 --shell /bin/bash qserv\nWORKDIR /home/qserv\n\nRUN mkdir -p /qserv/data && \\\n    mkdir /config-etc && \\\n    mkdir -p /qserv/run/tmp && \\\n    mkdir -p /var/run/xrootd && \\\n    chown qserv:qserv /qserv/data /config-etc /qserv/run/tmp /var/run/xrootd\n\nRUN alternatives --set python /usr/bin/python3\nENV PYTHONPATH \"${PYTHONPATH}:/usr/local/python\"\n\nCOPY --from=lite-build /usr/local/lib/liblog4cxx.so /usr/local/lib/\nCOPY --from=lite-build /usr/local/lib/libantlr4-runtime.so /usr/local/lib/\nCOPY --from=lite-build /usr/local/bin/mysql-proxy /usr/local/bin/\nCOPY --from=lite-build /usr/local/lib/libmysql-*.so /usr/local/lib/\nCOPY --from=lite-build /usr/local/lib/mysql-proxy/lua/*.so /usr/local/lib/mysql-proxy/lua/\nCOPY --from=lite-build /usr/local/lib/mysql-proxy/plugins/*.so /usr/local/lib/mysql-proxy/plugins/\n\nCOPY --from=lite-build /usr/local/include/xrootd/ /usr/local/include/\nCOPY --from=lite-build /usr/local/lib64/libXrd*.so /usr/local/lib64/\nCOPY --from=lite-build /usr/local/bin/xrootd /usr/local/bin/\nCOPY --from=lite-build /usr/local/bin/cmsd /usr/local/bin/\nCOPY --from=lite-build /usr/local/bin/xrdfs /usr/local/bin/\n\nRUN echo /usr/local/lib > /etc/ld.so.conf.d/local.conf \\\n    && echo /usr/local/lib64 >> /etc/ld.so.conf.d/local.conf \\\n    && ldconfig\n\nRUN pip3 install --no-cache-dir \\\n    backoff \\\n    click \\\n    deprecated \\\n    jinja2 \\\n    mysql-connector-python \\\n    pyyaml \\\n    requests \\\n    sqlalchemy\n"
}