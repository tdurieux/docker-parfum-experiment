{
  "startTime": 1674256185141,
  "endTime": 1674256186212,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 55,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 82
      }
    }
  ],
  "repairedDockerfile": "#===-- Dockerfile --------------------------------------------------------===//\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n#\n#===----------------------------------------------------------------------===//\n# Docker image used for the mlir-nvidia builder\n#\n# Environment variables configurable at runtime:\n#    BUILDBOT_PORT - server port to connect to\n#===----------------------------------------------------------------------===//\n\n# Use the image from NVIDIA as base\nFROM nvidia/cuda:10.2-base-ubuntu18.04\n\n\n# install build tools\nRUN apt-get update; \\\n    apt-get install --no-install-recommends -y software-properties-common apt-transport-https ca-certificates \\\n    clang-8 lld-8 ninja-build git wget gnupg ccache \\\n    python3 python3-pip python3-psutil \\\n    # dumb-init recommended in\n    # https://hub.docker.com/r/buildbot/buildbot-worker/dockerfile\n    dumb-init; rm -rf /var/lib/apt/lists/*; \\\n    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 100 ; \\\n    update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 100 ; \\\n    update-alternatives --install /usr/bin/lld lld /usr/bin/lld-8 100\n\n# LTS releases often bundle obsolete pip versions that cannot access newest\n# Linux binary wheels. This pinned version is not special: it was just current\n# at the time this was added. Refer to compatibility table:\n# https://github.com/pypa/manylinux\nRUN python3 -m pip install --upgrade pip==21.0.1\n\n# Refer to mlir/lib/Bindings/Python/requirements.txt. Listed explicitly here\n# and version pinned for consistency as this is a bot.\nRUN python3 -m pip install numpy==1.19.3 pybind11==2.8.0 PyYAML==5.4.1\n\n# install cuda\n# avoid popups for keyboard configurations\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y cuda && rm -rf /var/lib/apt/lists/*;\n\n# Ubuntu ships with old cmake version, install the latest one\n# from https://apt.kitware.com/\nRUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \\\n       gpg --batch --dearmor - | \\\n       tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null; \\\n    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' ; \\\n    apt-get update ; \\\n    apt-get install --no-install-recommends -y cmake && rm -rf /var/lib/apt/lists/*;\n\n# Get the Vulkan SDK from LunarG. The CUDA meta package already pulls in NVIDIA\n# Vulkan ICD.\nRUN wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc 2>/dev/null | \\\n       apt-key add -; \\\n    wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.141-bionic.list \\\n       https://packages.lunarg.com/vulkan/1.2.141/lunarg-vulkan-1.2.141-bionic.list; \\\n    apt-get update ; \\\n    apt-get install --no-install-recommends -y vulkan-sdk && rm -rf /var/lib/apt/lists/*;\n\n# Install build bot (server was at 2.8.5-dev at time of writing).\nRUN pip3 install --no-cache-dir buildbot-worker==2.8.4\n\n# Workaround permissions issues when writing to named volumes\n# https://github.com/docker/compose/issues/3270#issuecomment-206214034\nRUN mkdir -p /vol/test /vol/ccache /vol/worker ; \\\n    chmod -R 777 /vol\n\n# Volume to mount secrets into the container.\nVOLUME /vol/secrets\n# Volume to store data for local, manual testing of the container.\nVOLUME /vol/test\n# Volume to store ccache.\nVOLUME /vol/ccache\nENV CCACHE_DIR=/vol/ccache\n# Volume for worker working directory.\nVOLUME /vol/worker\n\n# Create user account, some tests fail if run as root.\nRUN useradd buildbot --create-home\nWORKDIR /vol/worker\n\n# copy startup script\nCOPY run.sh /home/buildbot/\nRUN chmod a+rx /home/buildbot/run.sh\n\nUSER buildbot\nENV WORKER_NAME=\"mlir-nvidia\"\n\n# Allow the server port of this agent to be configurable during deployment.\n# This way we can connect the same image to production and integration.\n# Ports:\n#   9990 - production\n#   9994 - integration\nENV BUILDBOT_PORT=\"9994\"\n\nCMD /home/buildbot/run.sh\n"
}