{
  "startTime": 1674255405695,
  "endTime": 1674255407566,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 75
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 85
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 7,
        "columnEnd": 141
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 18,
        "columnEnd": 126
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 220,
        "lineEnd": 220,
        "columnStart": 18,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 63,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 63,
        "columnEnd": 88
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 18,
        "columnEnd": 126
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 220,
        "lineEnd": 220,
        "columnStart": 18,
        "columnEnd": 99
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 242,
        "lineEnd": 242,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 63,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 66,
        "columnEnd": 115
      }
    }
  ],
  "repairedDockerfile": "# Multistage docker build, requires docker 17.05\n\n# builder stage\nFROM ubuntu:16.04 as blockchain\n\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install \\\n        ca-certificates \\\n        cmake \\\n        g++ \\\n        make \\\n        pkg-config \\\n        graphviz \\\n        doxygen \\\n        git \\\n        curl \\\n        libtool-bin \\\n        autoconf \\\n        automake \\\n        bzip2 \\\n        xsltproc \\\n        gperf \\\n        unzip && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /usr/local\n\n#Cmake\nARG CMAKE_VERSION=3.13.0\nARG CMAKE_VERSION_DOT=v3.13\nARG CMAKE_HASH=4058b2f1a53c026564e8936698d56c3b352d90df067b195cb749a97a3d273c90\nRUN set -ex \\\n    && curl -f -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n    && echo \"${CMAKE_HASH}  cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n    && cd cmake-${CMAKE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm cmake-${CMAKE_VERSION}.tar.gz\n\n## Boost\nARG BOOST_VERSION=1_68_0\nARG BOOST_VERSION_DOT=1.68.0\nARG BOOST_HASH=7f6130bc3cf65f56a618888ce9d5ea704fa10b462be126ad053e80e553d6d8b7\nRUN set -ex \\\n    && curl -f -s -L -o  boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n    && echo \"${BOOST_HASH}  boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n    && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n    && cd boost_${BOOST_VERSION} \\\n    && ./bootstrap.sh \\\n    && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage && rm boost_${BOOST_VERSION}.tar.bz2\nENV BOOST_ROOT /usr/local/boost_${BOOST_VERSION}\n\n# OpenSSL\nARG OPENSSL_VERSION=1.1.0j\nARG OPENSSL_HASH=31bec6c203ce1a8e93d5994f4ed304c63ccf07676118b6634edded12ad1b3246\nRUN set -ex \\\n    && curl -f -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n    && echo \"${OPENSSL_HASH}  openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n    && cd openssl-${OPENSSL_VERSION} \\\n    && ./Configure linux-x86_64 no-shared --static -fPIC \\\n    && make build_generated \\\n    && make libcrypto.a \\\n    && make install && rm openssl-${OPENSSL_VERSION}.tar.gz\nENV OPENSSL_ROOT_DIR=/usr/local/openssl-${OPENSSL_VERSION}\n\n# ZMQ\nARG ZMQ_VERSION=v4.2.5\nARG ZMQ_HASH=d062edd8c142384792955796329baf1e5a3377cd\nRUN set -ex \\\n    && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n    && cd libzmq \\\n    && test `git rev-parse HEAD` = ${ZMQ_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make \\\n    && make install \\\n    && ldconfig\n\n# ncurses\nARG NCURSES_VERSION=6.1\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n    && curl -f -s -O ftp://ftp.invisible-island.net/ncurses/ncurses-6.1.tar.gz \\\n    && tar -xzf ncurses-${NCURSES_VERSION}.tar.gz \\\n    && cd ncurses-${NCURSES_VERSION} \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-P -fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-termcap --with-termlib \\\n    && make \\\n    && make install && rm ncurses-${NCURSES_VERSION}.tar.gz\n\n# zmq.hpp\nARG CPPZMQ_VERSION=v4.3.0\nARG CPPZMQ_HASH=213da0b04ae3b4d846c9abc46bab87f86bfb9cf4\nRUN set -ex \\\n    && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} --depth=1 \\\n    && cd cppzmq \\\n    && test `git rev-parse HEAD` = ${CPPZMQ_HASH} || exit 1 \\\n    && mv *.hpp /usr/local/include\n\n# Readline\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n    && curl -f -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n    && echo \"${READLINE_HASH}  readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n    && cd readline-${READLINE_VERSION} \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm readline-${READLINE_VERSION}.tar.gz\n\n# Sodium\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n    && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} --depth=1 \\\n    && cd libsodium \\\n    && test `git rev-parse HEAD` = ${SODIUM_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make check \\\n    && make install\n\n# Udev\nARG UDEV_VERSION=v3.2.6\nARG UDEV_HASH=0c35b136c08d64064efa55087c54364608e65ed6\nRUN set -ex \\\n    && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} \\\n    && cd eudev \\\n    && test `git rev-parse HEAD` = ${UDEV_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n    && make \\\n    && make install\n\n# Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n    && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} \\\n    && cd libusb \\\n    && test `git rev-parse HEAD` = ${USB_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared \\\n    && make \\\n    && make install\n\n# Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n    && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} \\\n    && cd hidapi \\\n    && test `git rev-parse HEAD` = ${HIDAPI_HASH} || exit 1 \\\n    && ./bootstrap \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make \\\n    && make install\n\n# Protobuf\nARG PROTOBUF_VERSION=v3.6.1\nARG PROTOBUF_HASH=48cb18e5c419ddd23d9badcfe4e9df7bde1979b2\nRUN set -ex \\\n    && git clone https://github.com/protocolbuffers/protobuf -b ${PROTOBUF_VERSION} \\\n    && cd protobuf \\\n    && test `git rev-parse HEAD` = ${PROTOBUF_HASH} || exit 1 \\\n    && git submodule update --init --recursive \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make \\\n    && make install \\\n    && ldconfig\n\nWORKDIR /src\n#COPY src/loki .\n\nADD https://api.github.com/repos/loki-project/loki/git/refs/heads/dev version.json\nRUN git clone https://github.com/loki-project/loki.git && cd loki && git checkout dev && git submodule init && git submodule update\n\nENV USE_SINGLE_BUILDDIR=1\nWORKDIR /src/loki\nARG NPROC\nRUN set -ex && \\\n    rm -rf build && \\\n    if [ -z \"$NPROC\" ] ; \\\n    then make -j$(nproc) release-static; \\\n    else make -j$NPROC release-static; \\\n    fi\n\n# verify genesis\n#RUN cat src/cryptonote_config.h|grep -i GENESIS\n\n# lokinet build\n#FROM alpine:latest as network\nFROM ubuntu:latest as network\n\n#RUN apk update && \\\n#    apk add build-base cmake git libcap-dev curl ninja bash binutils-gold\nRUN apt update && apt install --no-install-recommends -y build-essential cmake git libcap-dev bsdmainutils curl git ca-certificates ccache ninja-build && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /src\n#COPY src/loki-network /src/\n\nADD https://api.github.com/repos/loki-project/loki-network/git/refs/heads/master version.json\nRUN git clone https://github.com/loki-project/loki-network.git\nWORKDIR /src/loki-network\n#&& git checkout master && git submodule init && git submodule update\n\n# do we want Release?\nRUN make NINJA=ninja\n#BUILD_TYPE=Release\n#RUN ./lokinet-bootstrap\n\n# storage server build\n#FROM alpine:latest as storage\nFROM ubuntu:latest as storage\n\n#RUN apk update && apk add build-essential git cmake libssl-dev libsodium-dev wget pkg-config\nRUN apt update && apt install --no-install-recommends -y build-essential git cmake libssl-dev libsodium-dev wget pkg-config && rm -rf /var/lib/apt/lists/*;\nWORKDIR /src\n\nCOPY src/loki-storage-server/install-deps-linux.sh install-deps-linux.sh\nRUN ./install-deps-linux.sh\n#COPY src/loki-storage-server .\n\nADD https://api.github.com/repos/loki-project/loki-storage-server/git/refs/heads/dev version.json\nRUN git clone https://github.com/loki-project/loki-storage-server.git && cd loki-storage-server && git checkout dev && git submodule init && git submodule update\n\nWORKDIR /src/loki-storage-server\nRUN mkdir -p build && cd build && sodium_LIBRARY_RELEASE=\"deps/sodium/lib\" cmake .. -DBOOST_ROOT=\"/src/deps/boost\" -DOPENSSL_ROOT_DIR=\"/usr/include/openssl/\" -DCMAKE_BUILD_TYPE=Release -DDISABLE_SNODE_SIGNATURE=OFF && cmake --build .\n#RUN find . -name httpserver\n\n#CMD [\"build/httpserver\", \"127.0.0.1\", \"3000\"]\n#EXPOSE 3000\n\n# runtime stage\nFROM ubuntu:latest\n# have to reinstall netbase for /etc/services which the storage server needs\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install ca-certificates curl && \\\n    apt-get --reinstall --no-install-recommends --purge install -y netbase iputils-ping net-tools gdb systemd-coredump && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt && rm -rf /var/lib/apt/lists/*;\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash - && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /usr/src/app\nRUN mkdir bin\nCOPY --from=blockchain /src/loki/build/release/bin/lokid bin/lokid\n#COPY --from=blockchain /src/build/release/bin/loki-wallet-cli bin/loki-wallet-cli\n#COPY lokinet-docker.ini /root/.lokinet/lokinet.ini\nCOPY --from=network /src/loki-network/build/lokinet bin/lokinet\n#COPY --from=network /root/.lokinet/bootstrap.signed /root/.lokinet/\nCOPY --from=storage /src/loki-storage-server/build/httpserver/loki-storage bin/loki-storage\nCOPY package.json daemon.js ini.js lib.js lokinet.js index.js start.js config.js uid.js get-uid.js ./\nCOPY modes modes/\nCOPY launcher-docker.ini launcher.ini\n# this doesn't work because mount stomps it\nRUN mkdir -p /root/storage\nRUN mkdir -p /root/lokinet\n#RUN mkdir -p /usr/src/app/storage-logs\n\n#RUN echo \"nameserver 127.0.0.1\" > /etc/resolv.conf\n#RUN echo \"nameserver 1.1.1.1\" >> /etc/resolv.conf\n\nEXPOSE 22022 22023 22024 1090/udp 1190 38154 38155 38157 38158 38159 38161 8080\nCMD [\"./index.js\", \"daemon-start\"]\n"
}