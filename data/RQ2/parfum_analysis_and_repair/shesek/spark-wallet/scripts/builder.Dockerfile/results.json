{
  "startTime": 1674216545224,
  "endTime": 1674216546488,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 5,
        "columnEnd": 106
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 112
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 23,
        "columnEnd": 96
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 5,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16.8-bullseye\n\nENV TZ=UTC\nENV PATH=./node_modules/.bin:$PATH\n# npm doesn't normally like running as root, allow it since we're in docker\nRUN npm config set unsafe-perm true\n\nRUN apt-get update && apt-get install -y --no-install-recommends software-properties-common=0.96.20.2-2.1 \\\n  faketime=0.9.8-9 fuse=2.9.9-5 disorderfs=0.5.11-1 && rm -rf /var/lib/apt/lists/*;\n\n# Wine for Electron Windows builds\n# copied from https://github.com/electron-userland/electron-builder/blob/master/docker/wine/Dockerfile\nRUN dpkg --add-architecture i386 \\\n  && apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys D43F640145369C51D786DDEA76F1A20FF987672F \\\n  && apt-add-repository https://dl.winehq.org/wine-builds/debian \\\n  && apt-get update && apt-get install -y --no-install-recommends winehq-stable=6.0.2~bullseye-1 && rm -rf /var/lib/apt/lists/*;\nENV WINEDEBUG -all,err+all\nENV WINEDLLOVERRIDES winemenubuilder.exe=d\n\n# make sure Wine runs without libfaketime, which is required for the parent process (electron-builder) to make\n# builds reproducible, but breaks wine.\nRUN echo '#!/bin/sh\\nLD_PRELOAD=\"\" '$(which wine)' \"$@\"' > /usr/local/sbin/wine && chmod +x /usr/local/sbin/wine\n\n\n# Dependencies for building Android apps: Java, SDK tools & Gradle\nENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\nENV ANDROID_HOME=/root/sdktools\nENV PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:/root/gradle-4.1/bin\nWORKDIR /root\n# Java 8 (OpenJDK)\nRUN apt-add-repository 'deb http://security.debian.org/debian-security stretch/updates main' && apt-get update \\\n  && apt-get install -y --no-install-recommends openjdk-8-jdk-headless=8u302-b08-1~deb9u1 \\\n  && apt-add-repository --remove 'deb http://security.debian.org/debian-security stretch/updates main' && apt-get update && rm -rf /var/lib/apt/lists/*;\n\n# Android SKD tools\nRUN wget -q -O sdktools.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip \\\n  && echo \"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9  sdktools.zip\" | sha256sum -c - \\\n  && unzip -q sdktools.zip -d $ANDROID_HOME && rm sdktools.zip \\\n  && yes | (sdkmanager platform-tools \"platforms;android-27\" \"build-tools;27.0.3\" && sdkmanager --licenses) > /dev/null 2>&1\n# Gradle 4.1\nRUN wget -q https://services.gradle.org/distributions/gradle-4.1-bin.zip \\\n  && echo \"d55dfa9cfb5a3da86a1c9e75bb0b9507f9a8c8c100793ccec7beb6e259f9ed43  gradle-4.1-bin.zip\" | sha256sum -c - \\\n  && unzip -q gradle-4.1-bin.zip -d ~ && rm gradle-4.1-bin.zip\n\n\n# Electron dependencies\nWORKDIR /opt/spark/electron\nCOPY electron/package.json electron/npm-shrinkwrap.json electron/hook-afterPack.js ./\nRUN npm install && npm cache clean --force;\n# build a dummy electron app, to trigger a download of all the required artifacts files in docker build time\n# see https://github.com/electron-userland/electron-builder/issues/3220 for details.\nRUN mkdir www && echo '/**/' > main.js && electron-builder --linux --mac --win -c.extraMetadata.version=0.0.0 && rm -rf www main.js dist\n\n# Cordova dependencies\nWORKDIR /opt/spark/cordova\nCOPY cordova/package.json cordova/npm-shrinkwrap.json cordova/config.xml ./\nCOPY cordova/res ./res\nRUN npm install && cordova telemetry off && npm cache clean --force;\n# build a dummy cordova app to download required artifacts in docker build time\n# `electron prepare` sometimes fails on the first attempt but works on the second. this appears related to  https://github.com/apache/cordova-plugin-screen-orientation/issues/55\nRUN mkdir www && (cordova prepare || cordova prepare) && cordova build && rm -r www platforms/android/app/build\n\n# Spark client\nWORKDIR /opt/spark/client\nCOPY client/package.json client/npm-shrinkwrap.json ./\nCOPY client/fonts ./fonts\nRUN npm install && npm cache clean --force;\n\n# Spark main\nWORKDIR /opt/spark\nCOPY package.json npm-shrinkwrap.json ./\nRUN npm install && npm cache clean --force;\n\nCOPY . .\n\n# required for reproducible snap builds\nRUN chmod -R 755 electron\n\n# Build NPM package, Electron apps and Android Cordova to /target\nCMD (test ! -c /dev/fuse || (mv -f cordova cordova-src && mkdir cordova && disorderfs --sort-dirents=yes --reverse-dirents=no cordova-src cordova)) \\\n && npm run dist:npm -- --pack-tgz \\\n && npm run dist:electron -- --linux --mac --win \\\n && npm run dist:cordova \\\n && ([ ! -d /etc/signing-keys ] || BUILD_TYPE=release npm run dist:cordova -- --buildConfig /etc/signing-keys/build.json) \\\n && mkdir -p /target && rm -rf /target/* \\\n && echo '-----BEGIN SHA256SUM-----' \\\n && ./scripts/dist-shasums.sh | tee /target/SHA256SUMS \\\n && mv spark-wallet-*-npm.tgz /target \\\n && mv -f dist /target/npm-unpacked \\\n && mv -f electron/dist /target/electron \\\n && mv -f cordova/platforms/android/app/build/outputs/apk/debug /target/cordova-android-debug \\\n && ([ ! -d /etc/signing-keys ] || mv -f cordova/platforms/android/app/build/outputs/apk/release /target/cordova-android-release) \\\n && (test -z \"$OWNER\" || chown -R $OWNER /target)\n\n# NOTE: The APK reproducibility described below is no longer working :<\n#\n# disorderfs (fuse mount configured with stable file sorting) is required for reproducible android apk builds. See:\n# https://lists.reproducible-builds.org/pipermail/rb-general/2018-June/001027.html\n# https://issuetracker.google.com/issues/110237303\n# https://code.briarproject.org/briar/briar/issues/1273\n#\n# This requires running docker with \"--cap-add SYS_ADMIN --device /dev/fuse --security-opt apparmor:unconfined\".\n# If you don't care about apk reproducibility, you can skip this.\n"
}