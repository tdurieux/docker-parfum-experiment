{
  "startTime": 1674220575787,
  "endTime": 1674220576845,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 28,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 40,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 40,
        "columnEnd": 69
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 40,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 1,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:latest\nSHELL [\"/bin/bash\", \"-c\"]\n\nARG TZ=\"UTC\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \\\n    echo $TZ > /etc/timezone\n\nWORKDIR /usr/src/app\n\n# Make sure user cloned caldera recursively before installing anything.\nADD . .\nRUN if [ -z \"$(ls plugins/stockpile)\" ]; then echo \"stockpile plugin not downloaded - please ensure you recursively cloned the caldera git repository and try again.\"; exit 1; fi\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install python3 python3-pip git curl && rm -rf /var/lib/apt/lists/*;\n\n#WIN_BUILD is used to enable windows build in sandcat plugin\nARG WIN_BUILD=false\nRUN if [ \"$WIN_BUILD\" = \"true\" ] ; then \\\n apt-get -y --no-install-recommends install mingw-w64; rm -rf /var/lib/apt/lists/*; fi\n\n# Install pip requirements\nRUN pip3 install --no-cache-dir -r requirements.txt\n\n# Set up config file and disable atomic by default\nRUN grep -v \"\\- atomic\" conf/default.yml > conf/local.yml\n\n# Install golang\nRUN curl -f -L https://go.dev/dl/go1.17.6.linux-amd64.tar.gz -o go1.17.6.linux-amd64.tar.gz\nRUN rm -rf /usr/local/go && tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz; rm go1.17.6.linux-amd64.tar.gz\nENV PATH=\"${PATH}:/usr/local/go/bin\"\nRUN go version;\n\n# Compile default sandcat agent binaries, which will download basic golang dependencies.\nWORKDIR /usr/src/app/plugins/sandcat\n\n# Fix line ending error that can be caused by cloning the project in a Windows environment\nRUN if [ \"$WIN_BUILD\" = \"true\" ] ; then cp ./update-agents.sh ./update-agents-copy.sh; fi\nRUN if [ \"$WIN_BUILD\" = \"true\" ] ; then tr -d '\\15\\32' < ./update-agents-copy.sh > ./update-agents.sh; fi\nRUN if [ \"$WIN_BUILD\" = \"true\" ] ; then rm ./update-agents-copy.sh; fi\n\nRUN ./update-agents.sh\n\n# Check if we can compile the sandcat extensions, which will download golang dependencies for agent extensions\nRUN mkdir /tmp/gocatextensionstest\n\nRUN cp -R ./gocat /tmp/gocatextensionstest/gocat\nRUN cp -R ./gocat-extensions/* /tmp/gocatextensionstest/gocat/\n\nRUN cp ./update-agents.sh /tmp/gocatextensionstest/update-agents.sh\n\nWORKDIR /tmp/gocatextensionstest\n\nRUN mkdir /tmp/gocatextensionstest/payloads\n\nRUN ./update-agents.sh\n\n# Clone atomic red team repo for the atomic plugin\nRUN if [ ! -d \"/usr/src/app/plugins/atomic/data/atomic-red-team\" ]; then   \\\n    git clone --depth 1 https://github.com/redcanaryco/atomic-red-team.git \\\n        /usr/src/app/plugins/atomic/data/atomic-red-team;                  \\\nfi\n\nWORKDIR /usr/src/app\n\n# Default HTTP port for web interface and agent beacons over HTTP\nEXPOSE 8888\n\n# Default HTTPS port for web interface and agent beacons over HTTPS (requires SSL plugin to be enabled)\nEXPOSE 8443\n\n# TCP and UDP contact ports\nEXPOSE 7010\nEXPOSE 7011/udp\n\n# Websocket contact port\nEXPOSE 7012\n\n# Default port to listen for DNS requests for DNS tunneling C2 channel\nEXPOSE 8853\n\n# Default port to listen for SSH tunneling requests\nEXPOSE 8022\n\n# Default FTP port for FTP C2 channel\nEXPOSE 2222\n\nENTRYPOINT [\"python3\", \"server.py\"]\n"
}