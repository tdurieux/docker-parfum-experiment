{
  "startTime": 1674250631088,
  "endTime": 1674250632097,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\nLABEL maintainer=\"Brady Wetherington <bwetherington@grokability.com>\"\n\n# No need to add `apt-get clean` here, reference:\n# - https://github.com/snipe/snipe-it/pull/9201\n# - https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#apt-get\n\nRUN export DEBIAN_FRONTEND=noninteractive; \\\n    export DEBCONF_NONINTERACTIVE_SEEN=true; \\\n    echo 'tzdata tzdata/Areas select Etc' | debconf-set-selections; \\\n    echo 'tzdata tzdata/Zones/Etc select UTC' | debconf-set-selections; \\\n    apt-get update -qqy \\\n && apt-get install -qqy --no-install-recommends \\\napt-utils \\\napache2 \\\napache2-bin \\\nlibapache2-mod-php7.4 \\\nphp7.4-curl \\\nphp7.4-ldap \\\nphp7.4-mysql \\\nphp7.4-gd \\\nphp7.4-xml \\\nphp7.4-mbstring \\\nphp7.4-zip \\\nphp7.4-bcmath \\\nphp7.4-redis \\\npatch \\\ncurl \\\nwget  \\\nvim \\\ngit \\\ncron \\\nmysql-client \\\nsupervisor \\\ncron \\\ngcc \\\nmake \\\nautoconf \\\nlibc-dev \\\npkg-config \\\nlibmcrypt-dev \\\nphp7.4-dev \\\nca-certificates \\\nunzip \\\ndnsutils \\\n&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\nRUN curl -f -L -O https://github.com/pear/pearweb_phars/raw/master/go-pear.phar\nRUN php go-pear.phar\n\nRUN pecl install mcrypt-1.0.3\n\nRUN bash -c \"echo extension=/usr/lib/php/20190902/mcrypt.so > /etc/php/7.4/mods-available/mcrypt.ini\"\n\nRUN phpenmod mcrypt\nRUN phpenmod gd\nRUN phpenmod bcmath\n\nRUN sed -i 's/variables_order = .*/variables_order = \"EGPCS\"/' /etc/php/7.4/apache2/php.ini\nRUN sed -i 's/variables_order = .*/variables_order = \"EGPCS\"/' /etc/php/7.4/cli/php.ini\n\nRUN useradd -m --uid 1000 --gid 50 docker\n\nRUN echo export APACHE_RUN_USER=docker >> /etc/apache2/envvars\nRUN echo export APACHE_RUN_GROUP=staff >> /etc/apache2/envvars\n\nCOPY docker/000-default.conf /etc/apache2/sites-enabled/000-default.conf\n\n#SSL\nRUN mkdir -p /var/lib/snipeit/ssl\n#COPY docker/001-default-ssl.conf /etc/apache2/sites-enabled/001-default-ssl.conf\nCOPY docker/001-default-ssl.conf /etc/apache2/sites-available/001-default-ssl.conf\n\nRUN a2enmod ssl\nRUN a2ensite 001-default-ssl.conf\n\nCOPY . /var/www/html\n\nRUN a2enmod rewrite\n\nCOPY docker/column-statistics.cnf /etc/mysql/conf.d/column-statistics.cnf\n\n############ INITIAL APPLICATION SETUP #####################\n\nWORKDIR /var/www/html\n\n#Append to bootstrap file (less brittle than 'patch')\n# RUN sed -i 's/return $app;/$env=\"production\";\\nreturn $app;/' bootstrap/start.php\n\n#copy all configuration files\n# COPY docker/*.php /var/www/html/app/config/production/\nCOPY docker/docker.env /var/www/html/.env\n\nRUN chown -R docker /var/www/html\n\nRUN \\\n\trm -r \"/var/www/html/storage/private_uploads\" && ln -fs \"/var/lib/snipeit/data/private_uploads\" \"/var/www/html/storage/private_uploads\" \\\n      && rm -rf \"/var/www/html/public/uploads\" && ln -fs \"/var/lib/snipeit/data/uploads\" \"/var/www/html/public/uploads\" \\\n      && rm -r \"/var/www/html/storage/app/backups\" && ln -fs \"/var/lib/snipeit/dumps\" \"/var/www/html/storage/app/backups\" \\\n      && mkdir -p \"/var/lib/snipeit/keys\" && ln -fs \"/var/lib/snipeit/keys/oauth-private.key\" \"/var/www/html/storage/oauth-private.key\" \\\n      && ln -fs \"/var/lib/snipeit/keys/oauth-public.key\" \"/var/www/html/storage/oauth-public.key\" \\\n      && ln -fs \"/var/lib/snipeit/keys/ldap_client_tls.cert\" \"/var/www/html/storage/ldap_client_tls.cert\" \\\n      && ln -fs \"/var/lib/snipeit/keys/ldap_client_tls.key\" \"/var/www/html/storage/ldap_client_tls.key\" \\\n      && chown docker \"/var/lib/snipeit/keys/\" \\\n      && chown -h docker \"/var/www/html/storage/\" \\\n      && chmod +x /var/www/html/artisan \\\n      && echo \"Finished setting up application in /var/www/html\"\n\n############## DEPENDENCIES via COMPOSER ###################\n\n#global install of composer\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\n\n# Get dependencies\nUSER docker\nRUN composer install --no-dev --working-dir=/var/www/html\nUSER root\n\n############### APPLICATION INSTALL/INIT #################\n\n#RUN php artisan app:install\n# too interactive! Try something else\n\n#COPY docker/app_install.exp /tmp/app_install.exp\n#RUN chmod +x /tmp/app_install.exp\n#RUN /tmp/app_install.exp\n\n############### DATA VOLUME #################\n\nVOLUME [\"/var/lib/snipeit\"]\n\n##### START SERVER\n\nCOPY docker/startup.sh docker/supervisord.conf /\nCOPY docker/supervisor-exit-event-listener /usr/bin/supervisor-exit-event-listener\nRUN chmod +x /startup.sh /usr/bin/supervisor-exit-event-listener\n\nCMD [\"/startup.sh\"]\n\nEXPOSE 80\nEXPOSE 443"
}