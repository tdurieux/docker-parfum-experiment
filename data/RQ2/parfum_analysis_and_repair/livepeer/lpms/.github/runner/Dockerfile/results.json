{
  "startTime": 1674254788895,
  "endTime": 1674254789851,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 5,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 138
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 5,
        "columnEnd": 132
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 95,
        "columnEnd": 145
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 66
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 10,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 5,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 5,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 5,
        "columnEnd": 144
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 5,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 5,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 5,
        "columnEnd": 144
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.2.0-cudnn8-runtime-ubuntu20.04\n\n# set the github runner version\nARG RUNNER_VERSION=\"2.287.1\"\n\n# update package list and create user\nRUN apt-get update -y && useradd -m devops\nRUN usermod -aG sudo devops\n\nRUN apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y tzdata \\\n  && apt-get install --no-install-recommends -y software-properties-common curl apt-transport-https jq \\\n  && curl -f https://dl.google.com/go/go1.15.5.linux-amd64.tar.gz | tar -C /usr/local -xz \\\n  && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \\\n  && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs)  stable\" \\\n  && apt-key adv --keyserver keyserver.ubuntu.com --recv 15CF4D18AF4F7421 \\\n  && add-apt-repository \"deb [arch=amd64] http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main\" \\\n  && apt-get update \\\n  && apt-get -y --no-install-recommends install clang clang-tools build-essential pkg-config autoconf sudo git python docker-ce-cli xxd netcat-openbsd libnuma-dev cmake && rm -rf /var/lib/apt/lists/*;\n\n# Set Env\nENV PKG_CONFIG_PATH /home/devops/compiled/lib/pkgconfig\nENV LD_LIBRARY_PATH /home/devops/compiled/lib:/usr/local/lib:/usr/local/cuda-11.2/lib64:/usr/lib/x86_64-linux-gnu\nENV PATH $PATH:/usr/local/go/bin:/home/devops/compiled/bin:/home/devops/ffmpeg\nENV BUILD_TAGS \"debug-video experimental\"\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,video,utility\n\n# Give sudo permission to user \"devops\"\nRUN echo 'devops ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# install go\nRUN curl -f -O -L https://dl.google.com/go/go1.17.6.linux-amd64.tar.gz && rm -rf /usr/local/go && tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz && rm go1.17.6.linux-amd64.tar.gz\n\n# download and install GH actions runner\nRUN cd /home/devops && mkdir actions-runner && cd actions-runner \\\n    && curl -f -O -L https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz \\\n    && tar xzf ./actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz && chown -R devops ~devops && rm ./actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\n\nRUN LIBTENSORFLOW_VERSION=2.6.3 \\\n  && curl -f -LO https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-${LIBTENSORFLOW_VERSION}.tar.gz \\\n  && sudo tar -C /usr/local -xzf libtensorflow-gpu-linux-x86_64-${LIBTENSORFLOW_VERSION}.tar.gz \\\n  && sudo ldconfig && rm libtensorflow-gpu-linux-x86_64-${LIBTENSORFLOW_VERSION}.tar.gz\n\n# Add mime type for ts\nRUN sudo echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?><mime-info xmlns=\"http://www.freedesktop.org/standards/shared-mime-info\"><mime-type type=\"video/mp2t\"><comment>ts</comment><glob pattern=\"*.ts\"/></mime-type></mime-info>'>>/usr/share/mime/packages/custom_mime_type.xml\nRUN sudo update-mime-database /usr/share/mime\n\n# install additional runner dependencies\nRUN /home/devops/actions-runner/bin/installdependencies.sh\n\nUSER devops\n\nWORKDIR /home/devops/actions-runner\n\n# create script to handle graceful container shutdown\nRUN echo -e '\\n\\\n#!/bin/bash \\n\\\nset -e \\n\\\ncleanup() { \\n\\\n    ./config.sh remove --unattended --token $(cat .reg-token) \\n\\\n}\\n\\\ntrap \"cleanup\" INT \\n\\\ntrap \"cleanup\" TERM \\n\\\necho \"get new runner token via GitHub API\" \\n\\\ncurl -sX POST -H \"Authorization: token ${ACCESS_TOKEN}\" https://api.github.com/repos/${ORGANIZATION}/${REPOSITORY}/actions/runners/registration-token | jq .token --raw-output > .reg-token \\n\\\necho \"configure runner\" \\n\\\n./config.sh --url https://github.com/${ORGANIZATION}/${REPOSITORY} --token $(cat .reg-token) --name lpms-linux-runner --labels lpms-linux-runner --unattended --replace \\n\\\necho \"start runner\" \\n\\\n./bin/runsvc.sh & wait $! \\n\\\n'>create_and_run.sh\n\nRUN chmod +x create_and_run.sh\n\nENTRYPOINT [\"sh\", \"./create_and_run.sh\"]\n"
}