{
  "startTime": 1674252293083,
  "endTime": 1674252293907,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 18,
        "columnEnd": 77
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install dependencies only when needed\nFROM node:14-alpine as deps\nLABEL author=\"masb0ymas\"\n\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\nRUN apk add --no-cache libc6-compat\nRUN apk add --update --no-cache curl py-pip\nRUN apk add --no-cache make python2 g++ gcc libgcc libstdc++\nRUN npm install --quiet node-gyp -g && npm cache clean --force;\n\n# install for sharp library\nRUN apk add --update --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/community --repository http://dl-3.alpinelinux.org/alpine/edge/main vips-dev\n\n# Setup Timezone\nRUN apk add --no-cache tzdata\nENV TZ=Asia/Jakarta\n\nRUN apk add --no-cache nano\n\nWORKDIR /app\nCOPY package.json ./\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\n# Rebuild the source code only when needed\nFROM node:14-alpine AS builder\nWORKDIR /app\n\nRUN export NODE_OPTIONS=\\\"--max_old_space_size=4096\\\"\n\nCOPY . .\n\nRUN cp .env.example .env\n\nCOPY --from=deps /app/node_modules ./node_modules\nRUN yarn build && yarn install --production --ignore-scripts --prefer-offline && yarn cache clean;\n\n# Production image, copy all the files and run next\nFROM node:14-alpine AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\n# RUN addgroup -g 1001 -S nodejs\n# RUN adduser -S expresso -u 1001\n\n# Set config npm & install dependencies\nRUN npm config set scripts-prepend-node-path true\nRUN npm install -g typescript && npm cache clean --force;\nRUN npm install -g pm2 && npm cache clean --force;\n\n# You only need to copy next.config.js if you are NOT using the default configuration\nCOPY --from=builder /app/public ./public\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --from=builder /app/package.json ./package.json\nCOPY --from=builder /app/tsconfig.json ./tsconfig.json\nCOPY --from=builder /app/.sequelizerc ./.sequelizerc\nCOPY --from=builder /app/logs ./logs\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/src ./src\nCOPY --from=builder /app/.env ./.env\n\n# initial app\nRUN node ./dist/@expresso/scripts/generate.js\n\n# USER expresso\n\nEXPOSE 8000\n\n# Run for production\nCMD [\"yarn\", \"serve:production-docker\"]\n"
}