{
  "startTime": 1674219966849,
  "endTime": 1674219967483,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ---- Base Node ----\nFROM node:14-alpine AS base\n# set working directory\nWORKDIR /app\n\n#\n# ---- Dependencies ----\nFROM base AS dependencies\n# Copy project file\nCOPY [\"package.json\", \"package-lock.json*\", \"npm-shrinkwrap.json*\", \"./\"]\n\n#\n# ---- Test ----\n# run linters, setup and tests\nFROM dependencies AS test\n# Install ALL node_modules, including 'devDependencies'\nRUN npm install && npm cache clean --force;\nCOPY . .\nRUN  npm run test\n\n\n#\n# ---- Release ----\nFROM base AS release\n#Add environment variables\nENV NODE_ENV production\n# copy production node_modules\nCOPY [\"package.json\", \"package-lock.json*\", \"npm-shrinkwrap.json*\", \"./\"] --from=dependencies\n#Install app dependencies\nRUN npm install --silent --production && mv node_modules ../ && npm cache clean --force;\n# copy app sources\nCOPY . .\n# expose port and define CMD\nEXPOSE 3000\n#specify what command it'll execute when you create a container\nCMD [\"npm\", \"start\"]"
}