{
  "startTime": 1674246443173,
  "endTime": 1674246444086,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 2,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multi-stage\n# 1) Node image for building frontend assets\n# 2) nginx stage to serve frontend assets\n\n# Stage 1\nFROM node:15-buster-slim AS builder\n\n# Install some dependencies before building\nRUN apt-get update && \\\n  apt-get upgrade -y && \\\n  apt-get install --no-install-recommends -y git && \\\n  apt-get install --no-install-recommends -y python && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /app\n\n# Copy only the package files and install necessary dependencies.\n# This reduces cache busting when source files are changed.\nCOPY package.json .\nCOPY package-lock.json .\nRUN npm ci\n\n# Copy the rest of the project files and build\nCOPY . .\nRUN npm run build\n\n# Stage 2\nFROM nginx\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n# Set working directory to nginx asset directory\n# Copy static assets from builder stage\nCOPY --from=builder /app/build /usr/share/nginx/html/\nEXPOSE 80\n# Containers run nginx with global directives and daemon off\nENTRYPOINT [\"nginx\", \"-g\", \"daemon off;\"]\n"
}