{
  "startTime": 1674255223953,
  "endTime": 1674255225154,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 6,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 5,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 63,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 63,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 29,
        "columnStart": 5,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 63,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 63,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedDockerfile": "FROM golang:latest\n\n# Set the default timezone to EST.\nENV TZ=America/New_York\nRUN echo $TZ | tee /etc/timezone \\\n\t&& dpkg-reconfigure --frontend noninteractive tzdata\n\n# Install nginx and build tools.\nENV NGINX_VERSION 1.11.6-1~jessie\nRUN apt-key update \\\n  && apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \\\n  && echo \"deb http://nginx.org/packages/mainline/debian/ jessie nginx\" >> /etc/apt/sources.list \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends --no-install-suggests -y \\\n    ca-certificates \\\n    nginx=${NGINX_VERSION} \\\n    nginx-module-geoip \\\n    nginx-module-image-filter \\\n    nginx-module-perl \\\n    nginx-module-njs \\\n    gettext-base \\\n    gitweb \\\n    autoconf \\\n    build-essential \\\n    pkg-config \\\n    automake \\\n    libtool \\\n    libfcgi-dev \\\n    git-core \\\n    gitweb && rm -rf /var/lib/apt/lists/*;\n\n# Build and install fcgiwrap.\nRUN git clone https://github.com/gnosek/fcgiwrap.git \\\n    && cd fcgiwrap/ \\\n    && autoreconf -i \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && cp fcgiwrap /usr/bin\n\n# Symlink gitweb.cgi.\nRUN mkdir -p /var/www/git \\\n    && ln -s /usr/lib/cgi-bin/gitweb.cgi /var/www/git/gitweb.cgi \\\n    && chmod ugo+x /var/www/git/gitweb.cgi\n\n# Copy in gitweb and nginx configurations.\nCOPY ./infra/docker/depot/internal/files/nginx/git.conf /etc/nginx/conf.d/git.conf\nCOPY ./infra/docker/depot/internal/files/bin/spawn-fcgi /usr/bin/spawn-fcgi\nCOPY ./infra/docker/depot/internal/files/init.d/spawn-fcgi /etc/init.d/spawn-fcgi\nCOPY ./infra/docker/depot/internal/files/start.sh /start.sh\nCOPY ./infra/docker/depot/internal/files/git/gitconfig /etc/gitconfig\n\n# Delete default nginx conf. and give correct permissions to the fcgi spawners &\n# the entrypoint.\nRUN rm /etc/nginx/conf.d/default.conf \\\n  && chmod +x /usr/bin/spawn-fcgi \\\n  && chmod +x /etc/init.d/spawn-fcgi \\\n  && chmod +x /start.sh\n\n# Get git for pulling deps. Then compile and install libssh2.\n# git2go ref 241aa34d83b210ceaab7029c46e05794f2ea9797\nENV LIBSSH2_VERSION libssh2-1.7.0\nENV LIBGIT2_VERSION 0.24.1\nRUN apt-get -q --no-install-recommends -y install \\\n     git openssl apt-transport-https ca-certificates curl g++ gcc libc6-dev \\\n     make pkg-config libssl-dev cmake \\\n  && mkdir \"/build-artifacts\" \\\n  && cd \"/build-artifacts\" \\\n  && echo -e \"\\nDownloading native libs...\\n\" \\\n  && curl -fsSL \"https://github.com/libssh2/libssh2/archive/$LIBSSH2_VERSION.tar.gz\" -o \"libssh2.tar.gz\" \\\n  && curl -fsSL \"https://github.com/libgit2/libgit2/archive/v$LIBGIT2_VERSION.tar.gz\" -o \"libgit2.tar.gz\" \\\n  && mkdir \"libssh2\" \\\n  && mkdir \"libgit2\" \\\n   && tar xvf \"libssh2.tar.gz\" -C \"libssh2\" \\\n  && tar xvf \"libgit2.tar.gz\" -C \"libgit2\" \\\n  && cd \"/build-artifacts/libssh2/libssh2-$LIBSSH2_VERSION\" \\\n  && echo -e \"\\nBuilding libssh2...\\n\" \\\n  && cmake -DBUILD_SHARED_LIBS=ON . \\\n  && cmake --build . \\\n  && make \\\n  && make install \\\n  && ldconfig \\\n  && cd \"/build-artifacts/libgit2/libgit2-$LIBGIT2_VERSION\" \\\n  && echo -e \"\\nBuilding libgit2...\\n\" \\\n  && cmake -DCURL=OFF . \\\n  && cmake --build . \\\n  && make \\\n  && make install \\\n  && ldconfig \\\n  && cd / \\\n  && echo -e \"\\nCleaning up native lib build artifacts...\\n\" \\\n  && rm -rf \"/build-artifacts\" && rm \"libssh2.tar.gz\" && rm -rf /var/lib/apt/lists/*;\n\n# Copy in source for the API binary.\nCOPY ./infra /go/src/github.com/gophr-pm/gophr/infra\nCOPY ./depot /go/src/github.com/gophr-pm/gophr/depot\nCOPY ./lib /go/src/github.com/gophr-pm/gophr/lib\n\n# Build source and move things around.\nRUN cd /go/src/github.com/gophr-pm/gophr/depot \\\n  && echo -e \"\\nFetching depot API dependencies...\\n\" \\\n  && go get -d -v \\\n  && echo -e \"\\nBuilding the depot API binary...\\n\" \\\n  && go build -v -o gophr-depot-api-binary \\\n  && chmod +x ./gophr-depot-api-binary \\\n  && echo -e \"\\nMoving things around...\\n\" \\\n  && mkdir /gophr \\\n  && mv ./gophr-depot-api-binary /gophr/gophr-depot-api-binary \\\n  && mv ../infra/scripts/wait-for-it.sh /gophr/wait-for-it.sh \\\n  && cd /gophr \\\n  && echo -e \"\\nCleaning up API build artifacts...\\n\" \\\n  && rm -rf /go\n\n# Purge leftover artifacts, binaries and packages.\nRUN apt-get purge -y \\\n     ca-certificates curl g++ gcc libc6-dev make pkg-config libssl-dev cmake\n\n# Set the environment variables.\nENV PORT=\"3000\"\nENV GOPHR_ENV=\"prod\"\nENV GOPHR_DB_ADDR=\"db-svc\"\nENV GOPHR_DEPOT_PATH=\"/repos\"\n\nEXPOSE 80\nVOLUME [\"/repos\"]\nWORKDIR /gophr\nENTRYPOINT /start.sh\n"
}