{
  "startTime": 1674251420592,
  "endTime": 1674251421966,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 41,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Docker image contains a minimal build environment for TiKV\n#\n# It contains all the tools necessary to reproduce official production builds of TiKV\n\n# We need to use CentOS 7 because many of our users choose this as their deploy machine.\n# Since the glibc it uses (2.17) is from 2012 (https://sourceware.org/glibc/wiki/Glibc%20Timeline)\n# it is our lowest common denominator in terms of distro support.\n\n# Some commands in this script are structured in order to reduce the number of layers Docker\n# generates. Unfortunately Docker is limited to only 125 layers:\n# https://github.com/moby/moby/blob/a9507c6f76627fdc092edc542d5a7ef4a6df5eec/layer/layer.go#L50-L53\n\n# We require epel packages, so enable the fedora EPEL repo then install dependencies.\n# Install the system dependencies\n# Attempt to clean and rebuild the cache to avoid 404s\n\n# To avoid rebuilds we first install all Cargo dependencies\n\n\n# The prepare image avoid ruining the cache of the builder\nFROM centos:7.6.1810 as prepare\nWORKDIR /tikv\n\n# This step will always ruin the cache\n# There isn't a way with docker to wildcard COPY and preserve the directory structure\nCOPY . .\nRUN mkdir /output\nRUN for component in $(find . -type f -name 'Cargo.toml' -exec dirname {} \\; | sort -u); do \\\n     mkdir -p \"/output/${component}/src\" \\\n  && touch \"/output/${component}/src/lib.rs\" \\\n  && cp \"${component}/Cargo.toml\" \"/output/${component}/Cargo.toml\" \\\n  ; done\n\n\nFROM centos:7.6.1810 as builder\n\nRUN yum install -y epel-release && \\\n    yum clean all && \\\n    yum makecache && rm -rf /var/cache/yum\n\nRUN yum install -y centos-release-scl && \\\n    yum install -y \\\n      devtoolset-8 \\\n      perl cmake3 && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# CentOS gives cmake 3 a weird binary name, so we link it to something more normal\n# This is required by many build scripts, including ours.\nRUN ln -s /usr/bin/cmake3 /usr/bin/cmake\nENV LIBRARY_PATH /usr/local/lib:$LIBRARY_PATH\nENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH\n\n# Install Rustup\nRUN curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path --default-toolchain none -y\nENV PATH /root/.cargo/bin/:$PATH\n\n# Install the Rust toolchain\nWORKDIR /tikv\nCOPY rust-toolchain ./\nRUN rustup self update \\\n  && rustup set profile minimal \\\n  && rustup default $(cat \"rust-toolchain\")\n\n# For cargo\nCOPY scripts ./scripts\nCOPY etc ./etc\nCOPY Cargo.lock ./Cargo.lock\n\nCOPY --from=prepare /output/ ./\n\nRUN mkdir -p ./cmd/tikv-ctl/src ./cmd/tikv-server/src && \\\n    echo 'fn main() {}' > ./cmd/tikv-ctl/src/main.rs && \\\n    echo 'fn main() {}' > ./cmd/tikv-server/src/main.rs && \\\n    for cargotoml in $(find . -type f -name \"Cargo.toml\"); do \\\n        sed -i '/fuzz/d' ${cargotoml} && \\\n        sed -i '/profiler/d' ${cargotoml} ; \\\n    done\n\nCOPY Makefile ./\nRUN source /opt/rh/devtoolset-8/enable && make build_dist_release\n\n# Remove fingerprints for when we build the real binaries.\nRUN rm -rf ./target/release/.fingerprint/tikv-* && \\\n  for i in $(find . -type f -name 'Cargo.toml' -exec dirname {} \\; | sort -u); do \\\n    rm -rf ./target/release/.fingerprint/$(basename ${i})-*; \\\n  done\n\n# Add full source code\nCOPY cmd/ ./cmd/\nCOPY components/ ./components/\nCOPY src/ ./src/\n\n# Build real binaries now\nARG GIT_FALLBACK=\"Unknown (no git or not git repo)\"\nARG GIT_HASH=${GIT_FALLBACK}\nARG GIT_TAG=${GIT_FALLBACK}\nARG GIT_BRANCH=${GIT_FALLBACK}\nENV TIKV_BUILD_GIT_HASH=${GIT_HASH}\nENV TIKV_BUILD_GIT_TAG=${GIT_TAG}\nENV TIKV_BUILD_GIT_BRANCH=${GIT_BRANCH}\nRUN source /opt/rh/devtoolset-8/enable && make build_dist_release\n\n# Export to a clean image\nFROM pingcap/alpine-glibc\nCOPY --from=builder /tikv/target/release/tikv-server /tikv-server\nCOPY --from=builder /tikv/target/release/tikv-ctl /tikv-ctl\n\nEXPOSE 20160 20180\n\nENTRYPOINT [\"/tikv-server\"]\n"
}