diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/robotlearn/pyrobolearn/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/robotlearn/pyrobolearn/Dockerfile/repaired.Dockerfile
index 15e3b2e..24e7f0e 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/robotlearn/pyrobolearn/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/robotlearn/pyrobolearn/Dockerfile/repaired.Dockerfile
@@ -1,7 +1,7 @@
 FROM ubuntu:18.04
 LABEL maintainer="Brian Delhaisse <brian.delhaisse@iit.it> - Daniele Bonatto <dbonatto@ulb.ac.be>"
 
-RUN apt-get update && yes | apt-get upgrade && apt-get -y install wget
+RUN apt-get update && yes | apt-get upgrade && apt-get -y --no-install-recommends install wget && rm -rf /var/lib/apt/lists/*;
 
 ### Main Directory
 
@@ -10,7 +10,7 @@ WORKDIR /pyrobolearn/
 
 ### Main Downloads to avoid rebuilding the docker image every time we change something
 
-RUN wget https://bitbucket.org/rbdl/rbdl/get/default.zip 
+RUN wget https://bitbucket.org/rbdl/rbdl/get/default.zip
 RUN wget https://www.coin-or.org/download/source/Ipopt/Ipopt-3.12.12.zip
 RUN wget https://sourceforge.net/projects/roboticslab/files/External/nite/NiTE-Linux-x64-2.2.tar.bz2
 RUN wget -c "https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda-repo-ubuntu1804-10-1-local-10.1.168-418.67_1.0-1_amd64.deb"
@@ -23,23 +23,23 @@ RUN wget -c "https://developer.download.nvidia.com/compute/machine-learning/repo
 
 # tzdata is interactive, we don't want this
 ARG DEBIAN_FRONTEND=noninteractive
-RUN apt-get -y install python3.6 python3-pip build-essential clang  tzdata python3-tk cmake gcc gfortran g++ wget libpng-dev libopenblas-dev git python3.6-dev python-numpy lsb-release libeigen3-dev unzip libxi-dev libxmu-dev libusb-1.0.0-dev pkg-config freeglut3-dev libudev-dev openjdk-8-jdk usbutils libopenni-sensor-primesense0 libatlas-base-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler libboost-all-dev libgflags-dev libgoogle-glog-dev liblmdb-dev python3-protobuf protobuf-compiler python3-setuptools python3-dev libopencv-dev opencl-headers ocl-icd-opencl-dev libviennacl-dev
+RUN apt-get -y --no-install-recommends install python3.6 python3-pip build-essential clang tzdata python3-tk cmake gcc gfortran g++ wget libpng-dev libopenblas-dev git python3.6-dev python-numpy lsb-release libeigen3-dev unzip libxi-dev libxmu-dev libusb-1.0.0-dev pkg-config freeglut3-dev libudev-dev openjdk-8-jdk usbutils libopenni-sensor-primesense0 libatlas-base-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler libboost-all-dev libgflags-dev libgoogle-glog-dev liblmdb-dev python3-protobuf protobuf-compiler python3-setuptools python3-dev libopencv-dev opencl-headers ocl-icd-opencl-dev libviennacl-dev && rm -rf /var/lib/apt/lists/*;
 # TODO I we should put all those in the requirements.txt instead but we need to be careful with the ln -s command
-RUN yes | pip3 install numpy
-RUN yes | pip3 install torch torchvision
-RUN yes | pip3 install cython
-RUN yes | pip3 install gpytorch
+RUN yes | pip3 install --no-cache-dir numpy
+RUN yes | pip3 install --no-cache-dir torch torchvision
+RUN yes | pip3 install --no-cache-dir cython
+RUN yes | pip3 install --no-cache-dir gpytorch
 # scikit-build needed first for installing the requirements properly
-RUN yes | pip3 install scikit-build
-RUN yes | pip3 install cmake
+RUN yes | pip3 install --no-cache-dir scikit-build
+RUN yes | pip3 install --no-cache-dir cmake
 RUN ln -s /usr/include/locale.h /usr/include/xlocale.h
-RUN yes | pip3 install git+https://github.com/python-control/python-control
+RUN yes | pip3 install --no-cache-dir git+https://github.com/python-control/python-control
 
 # Needed for slycot as the cmake did not found fortranobject.c
 # /usr/local/lib/python3.6/dist-packages/numpy/f2py/src/fortranobject.c
 RUN ln -sf /usr/local/lib/python3.6/dist-packages/numpy/ /usr/lib/python3/dist-packages/numpy
 ADD requirements.txt .
-RUN yes | pip3 install -r requirements.txt
+RUN yes | pip3 install --no-cache-dir -r requirements.txt
 
 
 ### rbdl
@@ -57,16 +57,16 @@ WORKDIR /pyrobolearn/
 RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
 RUN yes | apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
 RUN apt-get update
-RUN apt-get -y install ros-melodic-desktop-full
+RUN apt-get -y --no-install-recommends install ros-melodic-desktop-full && rm -rf /var/lib/apt/lists/*;
 RUN rosdep init
 RUN rosdep update
-RUN apt-get -y install python-rosinstall ros-melodic-catkin 
+RUN apt-get -y --no-install-recommends install python-rosinstall ros-melodic-catkin && rm -rf /var/lib/apt/lists/*;
 RUN sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-stable.list'
-RUN wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -
-RUN apt-get -y install ros-melodic-gazebo-ros-pkgs ros-melodic-gazebo-ros-control
-RUN apt-get -y install ros-melodic-ros-control ros-melodic-ros-controllers
+RUN wget https://packages.osrfoundation.org/gazebo.key -O - | apt-key add -
+RUN apt-get -y --no-install-recommends install ros-melodic-gazebo-ros-pkgs ros-melodic-gazebo-ros-control && rm -rf /var/lib/apt/lists/*;
+RUN apt-get -y --no-install-recommends install ros-melodic-ros-control ros-melodic-ros-controllers && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get -y install python-catkin-tools
+RUN apt-get -y --no-install-recommends install python-catkin-tools && rm -rf /var/lib/apt/lists/*;
 #RUN echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc && /bin/bash -c 'source ~/.bashrc'
 #RUN /bin/bash -x -c "source /opt/ros/melodic/setup.bash"
 ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"
@@ -112,9 +112,9 @@ RUN ./get.Mumps
 
 
 WORKDIR /pyrobolearn/Ipopt-3.12.12/
-RUN ./configure --prefix=/usr/local/ coin_skip_warn_cxxflags=yes --with-blas="/usr/local/lib/libcoinblas.a -lgfortran" --with-lapack=/usr/local/lib/libcoinlapack.a && make -j`nproc` && make test && make install
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local/ coin_skip_warn_cxxflags=yes --with-blas="/usr/local/lib/libcoinblas.a -lgfortran" --with-lapack=/usr/local/lib/libcoinlapack.a && make -j`nproc` && make test && make install
 ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib/"
-RUN yes | pip3 install ipopt
+RUN yes | pip3 install --no-cache-dir ipopt
 
 WORKDIR /pyrobolearn/
 
@@ -124,7 +124,7 @@ RUN git clone https://github.com/occipital/OpenNI2.git && cd OpenNI2 && make -j`
 
 RUN git clone https://github.com/OpenKinect/libfreenect && cd libfreenect && mkdir -p build && cd build && cmake .. -DBUILD_OPENNI2_DRIVER=ON && make -j`nproc` && make install && ldconfig && ln -s /usr/local/lib/OpenNI2-FreenectDriver/libFreenectDriver.so /usr/local/lib/OpenNI2/Drivers && cd .. && cp platform/linux/udev/51-kinect.rules /etc/udev/rules.d/ && cd wrappers/python/ && python setup.py install && echo 'KERNEL == \"ttyUSB0\", MODE = \"0777\"' > 80-persistent-local-usb.rules
 
-RUN tar xvf NiTE-Linux-*.tar.bz2 && cd NiTE-*/ && ./install.sh && ln -s $PWD/Redist/libNiTE2.so /usr/local/lib/ && ln -s $PWD/Include /usr/local/include/NiTE-Linux-x64-2.2 && cd .. && ldconfig
+RUN tar xvf NiTE-Linux-*.tar.bz2 && cd NiTE-*/ && ./install.sh && ln -s $PWD/Redist/libNiTE2.so /usr/local/lib/ && ln -s $PWD/Include /usr/local/include/NiTE-Linux-x64-2.2 && cd .. && ldconfig && rm NiTE-Linux-*.tar.bz2
 
 # x64
 ENV OPENNI2_INCLUDE="/pyrobolearn/OpenNI2/Include"
@@ -145,7 +145,7 @@ WORKDIR /pyrobolearn/openpose
 RUN mv ../cuda-repo*.deb .
 RUN dpkg -i cuda-repo*.deb
 RUN apt-key add '/var/cuda-repo-10-1-local-10.1.168-418.67/7fa2af80.pub'
-RUN apt-get update && apt-get -y install cuda
+RUN apt-get update && apt-get -y --no-install-recommends install cuda && rm -rf /var/lib/apt/lists/*;
 ENV PATH="/usr/local/cuda-10.1/bin:${PATH}"
 
 # INSTALL CUDNN
@@ -162,43 +162,43 @@ ENV OPENPOSE_PATH=/pyrobolearn/openpose/
 WORKDIR /pyrobolearn/
 
 # Audio
-RUN apt-get install -y libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg #libav-tools
-RUN yes | pip3 install pyaudio
+RUN apt-get install --no-install-recommends -y libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg && rm -rf /var/lib/apt/lists/*; #libav-tools
+RUN yes | pip3 install --no-cache-dir pyaudio
 
 # GDAL
 
-RUN apt-get install -y libgdal-dev
+RUN apt-get install --no-install-recommends -y libgdal-dev && rm -rf /var/lib/apt/lists/*;
 ENV CPLUS_INCLUDE_PATH=/usr/include/gdal
 ENV C_INCLUDE_PATH=/usr/include/gdal
-RUN apt-get install -y python-gdal
+RUN apt-get install --no-install-recommends -y python-gdal && rm -rf /var/lib/apt/lists/*;
 
 # INSTALL PYROBOLEARN
 RUN git clone https://github.com/robotlearn/pyrobolearn.git
-RUN cd /pyrobolearn/pyrobolearn/ && yes | pip3 install -e .
+RUN cd /pyrobolearn/pyrobolearn/ && yes | pip3 install --no-cache-dir -e .
 
 WORKDIR /pyrobolearn/pyrobolearn/
 
 # gazebo models
 
-RUN apt-get install mercurial
+RUN apt-get install -y --no-install-recommends mercurial && rm -rf /var/lib/apt/lists/*;
 RUN hg clone https://bitbucket.org/osrf/gazebo_models/
 
 
 # trac ik
 # TODO not found libfcl-dev
-RUN apt-get install -y libccd-dev libccd2 libfcl0.5 libnlopt-dev libnlopt0 libeigen3-dev
-RUN yes | pip3 install nlopt
-RUN yes | pip3 install catkin_pkg
+RUN apt-get install --no-install-recommends -y libccd-dev libccd2 libfcl0.5 libnlopt-dev libnlopt0 libeigen3-dev && rm -rf /var/lib/apt/lists/*;
+RUN yes | pip3 install --no-cache-dir nlopt
+RUN yes | pip3 install --no-cache-dir catkin_pkg
 
 
 RUN cd /pyrobolearn/catkin_ws/ && git clone https://github.com/ros/cmake_modules.git && catkin_make
 
-RUN apt-get install -y ros-melodic-cmake-modules
+RUN apt-get install --no-install-recommends -y ros-melodic-cmake-modules && rm -rf /var/lib/apt/lists/*;
 ENV CMAKE_PREFIX_PATH /usr/local/share/trac_ik_lib/cmake/;/opt/ros/melodic/share/cmake_modules/cmake/
 RUN git clone https://bitbucket.org/traclabs/trac_ik.git
 RUN cd trac_ik/trac_ik_lib/ && mkdir build && cd build && cmake -Dkdl_parser_DIR=/opt/ros/melodic/share/kdl_parser/cmake/ -Dcmake_modules_DIR=/opt/ros/melodic/share/cmake_modules/cmake/ -DCATKIN_ENABLE_TESTING=FALSE -DPYTHON_VERSION=3.6 .. && make -j`nproc` && make install
 
-RUN apt-get install -y swig
+RUN apt-get install --no-install-recommends -y swig && rm -rf /var/lib/apt/lists/*;
 RUN cd trac_ik/trac_ik_python/ && mkdir build && cd build && cmake -Drospy_DIR=/opt/ros/melodic/share/rospy/cmake/ -Dtrac_ik_lib_DIR=/usr/local/share/trac_ik_lib/cmake/ -Dtf_conversions_DIR=/opt/ros/melodic/share/tf_conversions/cmake/ -DPYTHON_VERSION=3.6 .. && make -j`nproc` && make install
 
 ### Finishing