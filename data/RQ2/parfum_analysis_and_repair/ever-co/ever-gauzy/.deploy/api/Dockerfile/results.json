{
  "startTime": 1674251956944,
  "endTime": 1674251957957,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 7,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Ever Gauzy Platform API (Core)\n\nARG NODE_OPTIONS\nARG NODE_ENV\nARG API_BASE_URL\nARG CLIENT_BASE_URL\nARG API_HOST\nARG API_PORT\nARG SENTRY_DSN\nARG DB_URI\nARG DB_HOST\nARG DB_NAME\nARG DB_PORT\nARG DB_USER\nARG DB_PASS\nARG DB_TYPE\nARG DB_SSL_MODE\nARG DB_CA_CERT\nARG DEMO\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nARG AWS_REGION\nARG AWS_S3_BUCKET\nARG WASABI_ACCESS_KEY_ID\nARG WASABI_SECRET_ACCESS_KEY\nARG WASABI_REGION\nARG WASABI_SERVICE_URL\nARG WASABI_S3_BUCKET\nARG EXPRESS_SESSION_SECRET\nARG JWT_SECRET\nARG JWT_REFRESH_TOKEN_SECRET\nARG REFRESH_TOKEN_EXPIRATION_TIME\nARG MAIL_FROM_ADDRESS\nARG MAIL_HOST\nARG MAIL_PORT\nARG MAIL_USERNAME\nARG MAIL_PASSWORD\nARG ALLOW_SUPER_ADMIN_ROLE\nARG GOOGLE_CLIENT_ID\nARG GOOGLE_CLIENT_SECRET\nARG GOOGLE_CALLBACK_URL\nARG FACEBOOK_CLIENT_ID\nARG FACEBOOK_CLIENT_SECRET\nARG FACEBOOK_GRAPH_VERSION\nARG FACEBOOK_CALLBACK_URL\nARG INTEGRATED_USER_DEFAULT_PASS\nARG UPWORK_CALLBACK_URL\nARG FILE_PROVIDER\nARG GAUZY_AI_GRAPHQL_ENDPOINT\nARG DEFAULT_CURRENCY\nARG CLOUDINARY_CLOUD_NAME\nARG CLOUDINARY_API_KEY\nARG UNLEASH_APP_NAME\nARG UNLEASH_API_URL\nARG UNLEASH_INSTANCE_ID\nARG UNLEASH_REFRESH_INTERVAL\nARG UNLEASH_METRICS_INTERVAL\n\nFROM node:16-alpine3.14 AS dependencies\n\nLABEL maintainer=\"ever@ever.co\"\nLABEL org.opencontainers.image.source https://github.com/ever-co/ever-gauzy\n\nENV CI=true\n\nRUN apk --update --no-cache add bash \\\n    && apk add --no-cache libexecinfo libexecinfo-dev \\\n\t&& npm i -g npm \\\n    && apk add --no-cache --virtual build-dependencies build-base \\\n    snappy libheif dos2unix gcc g++ snappy-dev git libgcc libstdc++ linux-headers autoconf automake make nasm python2 py2-setuptools vips-dev vips \\\n    && npm install --quiet node-gyp -g \\\n\t&& npm config set python /usr/bin/python \\\n\t&& npm install yarn -g --force \\\n    && mkdir /srv/gauzy && chown -R node:node /srv/gauzy && npm cache clean --force;\n\nCOPY wait .deploy/api/entrypoint.prod.sh .deploy/api/entrypoint.compose.sh /\nRUN chmod +x /wait /entrypoint.compose.sh /entrypoint.prod.sh && dos2unix /entrypoint.prod.sh && dos2unix /entrypoint.compose.sh\n\nUSER node:node\n\nWORKDIR /srv/gauzy\n\nCOPY --chown=node:node apps/gauzy/package.json ./apps/gauzy/\nCOPY --chown=node:node apps/api/package.json ./apps/api/\n\nCOPY --chown=node:node packages/common/package.json ./packages/common/\nCOPY --chown=node:node packages/common-angular/package.json ./packages/common-angular/\nCOPY --chown=node:node packages/config/package.json ./packages/config/\nCOPY --chown=node:node packages/contracts/package.json ./packages/contracts/\nCOPY --chown=node:node packages/auth/package.json ./packages/auth/\nCOPY --chown=node:node packages/core/package.json ./packages/core/\nCOPY --chown=node:node packages/plugin/package.json ./packages/plugin/\nCOPY --chown=node:node packages/plugins/integration-ai/package.json ./packages/plugins/integration-ai/\nCOPY --chown=node:node packages/plugins/integration-hubstaff/package.json ./packages/plugins/integration-hubstaff/\nCOPY --chown=node:node packages/plugins/integration-upwork/package.json ./packages/plugins/integration-upwork/\nCOPY --chown=node:node packages/plugins/product-reviews/package.json ./packages/plugins/product-reviews/\nCOPY --chown=node:node packages/plugins/knowledge-base/package.json ./packages/plugins/knowledge-base/\nCOPY --chown=node:node packages/plugins/changelog/package.json ./packages/plugins/changelog/\n\nCOPY --chown=node:node decorate-angular-cli.js lerna.json package.json yarn.lock ./\n\nRUN yarn install --network-timeout 1000000 --frozen-lockfile && yarn cache clean\n# RUN apk del build-dependencies make gcc g++ python2 py2-setuptools vips-dev\n\nFROM node:16-alpine3.14 AS prodDependencies\n\nRUN apk --update --no-cache add bash \\\n    && apk add --no-cache libexecinfo libexecinfo-dev \\\n\t&& npm i -g npm \\\n    && apk add --no-cache --virtual build-dependencies build-base \\\n    snappy libheif dos2unix gcc g++ snappy-dev git libgcc libstdc++ linux-headers autoconf automake make nasm python2 py2-setuptools vips-dev vips \\\n    && npm install --quiet node-gyp -g \\\n\t&& npm config set python /usr/bin/python \\\n\t&& npm install yarn -g --force \\\n    && mkdir /srv/gauzy && chown -R node:node /srv/gauzy && npm cache clean --force;\n\nUSER node:node\n\nWORKDIR /srv/gauzy\n\nCOPY --chown=node:node apps/api/package.json ./apps/api/\n\nCOPY --chown=node:node packages/common/package.json ./packages/common/\nCOPY --chown=node:node packages/config/package.json ./packages/config/\nCOPY --chown=node:node packages/contracts/package.json ./packages/contracts/\nCOPY --chown=node:node packages/auth/package.json ./packages/auth/\nCOPY --chown=node:node packages/core/package.json ./packages/core/\nCOPY --chown=node:node packages/plugin/package.json ./packages/plugin/\nCOPY --chown=node:node packages/plugins/integration-ai/package.json ./packages/plugins/integration-ai/\nCOPY --chown=node:node packages/plugins/integration-hubstaff/package.json ./packages/plugins/integration-hubstaff/\nCOPY --chown=node:node packages/plugins/integration-upwork/package.json ./packages/plugins/integration-upwork/\nCOPY --chown=node:node packages/plugins/product-reviews/package.json ./packages/plugins/product-reviews/\nCOPY --chown=node:node packages/plugins/knowledge-base/package.json ./packages/plugins/knowledge-base/\nCOPY --chown=node:node packages/plugins/changelog/package.json ./packages/plugins/changelog/\n\nCOPY --chown=node:node package.json yarn.lock ./\n\nRUN yarn install --network-timeout 1000000 --frozen-lockfile --production && yarn cache clean\n# RUN apk del build-dependencies make gcc g++ python2 py2-setuptools vips-dev\n\nRUN rm -r node_modules/@angular\n\nFROM node:16-alpine3.14 AS development\n\nUSER node:node\n\nWORKDIR /srv/gauzy\n\nCOPY --chown=node:node --from=dependencies /wait /entrypoint.prod.sh /entrypoint.compose.sh /\nCOPY --chown=node:node --from=dependencies /srv/gauzy .\nCOPY . .\n\nFROM node:16-alpine3.14 AS build\n\nWORKDIR /srv/gauzy\n\nRUN mkdir dist\n\nCOPY --chown=node:node --from=development /srv/gauzy .\n\nENV NODE_OPTIONS=${NODE_OPTIONS:-\"--max-old-space-size=2048\"}\nENV NODE_ENV=${NODE_ENV:-production}\nENV DEMO=${DEMO:-false}\n\nENV IS_DOCKER=true\n\nRUN yarn build:package:api\nRUN yarn build:api:prod\n\nFROM node:16-alpine3.14 AS production\n\nWORKDIR /srv/gauzy\n\nCOPY --chown=node:node --from=dependencies /wait /entrypoint.prod.sh /entrypoint.compose.sh ./\nCOPY --chown=node:node --from=prodDependencies /srv/gauzy/node_modules/ ./node_modules/\nCOPY --chown=node:node --from=build /srv/gauzy/packages/ ./packages/\n\n# Copy static assets files which used for example in the seeds (e.g. images for features, reports, screenshots)\nCOPY --chown=node:node apps/api/src/assets apps/api/src/assets\n\n# Copy folder to which we later move static assets (e.g. images for features, reports, screenshots)\nCOPY --chown=node:node apps/api/public apps/api/public\n\n# Copy static assets used in seeds (e.g. reports screenshots images, see report.seed.ts) to public folder.\n# We are doing it in the seed code too, however if DB seed already was done one time and\n# docker container rebuilds, we will not have images unless we copy them during docker build manually here.\nCOPY --chown=node:node apps/api/src/assets/seed apps/api/public\n\nCOPY --chown=node:node --from=build /srv/gauzy/dist/apps/api .\n\nRUN npm install pm2 -g && \\\n    mkdir /import && chown node:node /import && \\\n    touch ormlogs.log && chown node:node ormlogs.log && chown node:node wait && \\\n    chmod +x wait entrypoint.compose.sh entrypoint.prod.sh && chown -R node:node apps/ && npm cache clean --force;\n\nUSER node:node\n\nENV NODE_OPTIONS=${NODE_OPTIONS:-\"--max-old-space-size=2048\"}\nENV NODE_ENV=${NODE_ENV:-production}\nENV API_HOST=${API_HOST:-api}\nENV API_PORT=${API_PORT:-3000}\nENV API_BASE_URL=${API_BASE_URL:-http://localhost:3000}\nENV CLIENT_BASE_URL=${CLIENT_BASE_URL:-http://localhost:4200}\nENV SENTRY_DSN=${SENTRY_DSN}\nENV DB_URI=${DB_URI}\nENV DB_HOST=${DB_HOST:-db}\nENV DB_NAME=${DB_NAME:-postgres}\nENV DB_PORT=${DB_PORT:-5432}\nENV DB_USER=${DB_USER}\nENV DB_PASS=${DB_PASS}\nENV DB_TYPE=${DB_TYPE:-sqlite}\nENV DB_SSL_MODE=${DB_SSL_MODE}\nENV DB_CA_CERT=${DB_CA_CERT}\nENV DEMO=${DEMO:-false}\nENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\nENV AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\nENV AWS_REGION=${AWS_REGION}\nENV AWS_S3_BUCKET=${AWS_S3_BUCKET}\nENV WASABI_ACCESS_KEY_ID=${WASABI_ACCESS_KEY_ID}\nENV WASABI_SECRET_ACCESS_KEY=${WASABI_SECRET_ACCESS_KEY}\nENV WASABI_REGION=${WASABI_REGION}\nENV WASABI_SERVICE_URL=${WASABI_SERVICE_URL}\nENV WASABI_S3_BUCKET=${WASABI_S3_BUCKET}\nENV EXPRESS_SESSION_SECRET=${EXPRESS_SESSION_SECRET:-gauzy}\nENV JWT_SECRET=${JWT_SECRET:-secretKey}\nENV JWT_REFRESH_TOKEN_SECRET=${JWT_REFRESH_TOKEN_SECRET:-refreshSecretKey}\nENV REFRESH_TOKEN_EXPIRATION_TIME=${REFRESH_TOKEN_EXPIRATION_TIME:-86400}\nENV MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}\nENV MAIL_HOST=${MAIL_HOST}\nENV MAIL_PORT=${MAIL_PORT}\nENV MAIL_USERNAME=${MAIL_USERNAME}\nENV MAIL_PASSWORD=${MAIL_PASSWORD}\nENV ALLOW_SUPER_ADMIN_ROLE=${ALLOW_SUPER_ADMIN_ROLE}\nENV GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}\nENV GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}\nENV GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}\nENV FACEBOOK_CLIENT_ID=${FACEBOOK_CLIENT_ID}\nENV FACEBOOK_CLIENT_SECRET=${FACEBOOK_CLIENT_SECRET}\nENV FACEBOOK_GRAPH_VERSION=${FACEBOOK_GRAPH_VERSION}\nENV FACEBOOK_CALLBACK_URL=${FACEBOOK_CALLBACK_URL}\nENV INTEGRATED_USER_DEFAULT_PASS=${INTEGRATED_USER_DEFAULT_PASS}\nENV UPWORK_CALLBACK_URL=${UPWORK_CALLBACK_URL}\nENV FILE_PROVIDER=${FILE_PROVIDER}\nENV GAUZY_AI_GRAPHQL_ENDPOINT=${GAUZY_AI_GRAPHQL_ENDPOINT}\nENV DEFAULT_CURRENCY=${DEFAULT_CURRENCY}\nENV CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}\nENV CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}\nENV UNLEASH_APP_NAME=${UNLEASH_APP_NAME}\nENV UNLEASH_API_URL=${UNLEASH_API_URL}\nENV UNLEASH_INSTANCE_ID=${UNLEASH_INSTANCE_ID}\nENV UNLEASH_REFRESH_INTERVAL=${UNLEASH_REFRESH_INTERVAL}\nENV UNLEASH_METRICS_INTERVAL=${UNLEASH_METRICS_INTERVAL}\n\nEXPOSE ${API_PORT}\n\nENTRYPOINT [ \"./entrypoint.prod.sh\" ]\n\nCMD [ \"pm2-runtime\", \"main.js\" ]\n"
}