{
  "startTime": 1674250486562,
  "endTime": 1674250487383,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Usage:\n#\n#    Build image:\n#    docker build -t ever-shop .\n#\n#    Run image (on localhost:8080):\n#    docker run --name ever-shop -p 8080:80 ever-shop\n#\n#    Run image as virtual host (read more: https://github.com/jwilder/nginx-proxy):\n#    docker run -e VIRTUAL_HOST=ever-shop.your-domain.com --name ever-shop ever-shop\n\n# Stage 1, based on Node.js, to build and compile Angular\n\nFROM node:8.9.4-alpine as builder\n\nCOPY package.json ./\n\n## Storing node modules on a separate layer will prevent unnecessary npm installs at each build\nRUN npm i && mkdir /ng-app && mv ./node_modules ./ng-app && npm cache clean --force;\n\nWORKDIR /ng-app\n\nCOPY . .\n\nRUN npm run build:aot:prod\n\n# Stage 2, based on Nginx, to have only the compiled app, ready for production with Nginx\n\nFROM nginx:1.13.9-alpine\n\nCOPY ./config/nginx-custom.conf /etc/nginx/conf.d/default.conf\n\n## Remove default nginx website\nRUN rm -rf /usr/share/nginx/html/*\n\n## From ‘builder’ stage copy over the artifacts in dist folder to default nginx public folder\nCOPY --from=builder /ng-app/dist /usr/share/nginx/html\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}