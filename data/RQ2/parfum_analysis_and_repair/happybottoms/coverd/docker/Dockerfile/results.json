{
  "startTime": 1674254313159,
  "endTime": 1674254314029,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# start with the official Composer image and name it\nFROM composer:2 AS composer\n# continue with the official PHP image\nFROM php:7.3-fpm\n# copy the Composer PHAR from the Composer image into the PHP image\nCOPY --from=composer /usr/bin/composer /usr/bin/composer\n\n# Prep for downloading Yarn\nRUN apt-get update && apt-get install --no-install-recommends -y gnupg && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\n\n# Install\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libpng-dev \\\n        libzip-dev \\\n        libpq-dev \\\n        nodejs \\\n        yarn \\\n        libxslt1-dev \\\n    && docker-php-ext-install -j$(nproc) iconv \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd \\\n    && docker-php-ext-install -j$(nproc) zip \\\n    && docker-php-ext-install -j$(nproc) opcache \\\n    && docker-php-ext-install -j$(nproc) xsl \\\n    && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \\\n    && docker-php-ext-install -j$(nproc) pdo pdo_pgsql pgsql && rm -rf /var/lib/apt/lists/*;\n\nRUN mv \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\"\n\n\n# install xdebug\nARG XDEBUG_INI=/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\nRUN \\\n    pecl install xdebug; \\\n    docker-php-ext-enable xdebug; \\\n    echo \"error_reporting = E_ALL\" >> ${XDEBUG_INI}; \\\n    echo \"display_startup_errors = yes\" >> ${XDEBUG_INI}; \\\n    echo \"xdebug.force_display_errors = 1\" >> ${XDEBUG_INI}; \\\n    echo \"xdebug.start_with_request = yes\" >> ${XDEBUG_INI}; \\\n    echo \"xdebug.discover_client_host = false\" >> ${XDEBUG_INI}; \\\n    echo \"xdebug.max_nesting_level = 1500\" >> ${XDEBUG_INI};\n\nWORKDIR /app\n"
}