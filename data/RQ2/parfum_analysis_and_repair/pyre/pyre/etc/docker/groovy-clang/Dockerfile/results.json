{
  "startTime": 1674249205004,
  "endTime": 1674249205624,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## -*- docker-image-name: \"pyre:groovy-clang\" -*-\n#\n# michael a.g. aïvázis <michael.aivazis@para-sim.com>\n# (c) 1998-2022 all rights reserved\n\n# based on ubuntu\nFROM ubuntu:groovy\n\n# set up some build variables\n# python version\nARG python_version=3.8\nARG python=python${python_version}\n# locations\nARG prefix=/usr/local\nARG srcdir=${prefix}/src\n# the build system\nARG mm=\"${python} ${srcdir}/mm/mm.py\"\n\n# environment\n# colorize (for fun)\nENV TERM=xterm-256color\n# set up the dynamic linker path\nENV LD_LIBRARY_PATH=${prefix}/lib\n# export the python choice\nENV PYTHON=${python}\n# and the path to {mm}\nENV MM=${mm}\n\n\n# update the package repository\nRUN apt update -y && DEBIAN_FRONTEND=noninteractive \\\n        apt --no-install-recommends install -y \\\n        git vim zip unzip \\\n        openssh-server \\\n        clang gfortran make \\\n        ${python} ${python}-dev \\\n        python3-pybind11 python3-yaml python3-numpy \\\n        libopenmpi-dev \\\n        libgsl-dev && rm -rf /var/lib/apt/lists/*; # get the latest\nRUN apt dist-upgrade -y\n\n# install the base software stack\n#  - {vim} is for interactive use\n#  - {openssh}, {zip}, {unzip} are needed for some of the tests\n\n\n\n\n\n\n\n\n\n\n\n# setup the interactive environment\n# go home\nWORKDIR /root\n# copy the files with support for interactive use\nCOPY etc/docker/groovy-gcc/inputrc .inputrc\n# the startup file\nCOPY etc/docker/groovy-gcc/bashrc bashrc.in\n# expand\nRUN sed \\\n        -e \"s:@SRCDIR@:${srcdir}:g\" \\\n        bashrc.in > .bashrc\n\n# make the pyre configuration directory\nWORKDIR /root/.pyre\n# the mpi configuration\nCOPY etc/docker/groovy-gcc/mpi.pfg mpi.pfg\n# the {mm} coniguration file\nCOPY etc/docker/groovy-clang/mm.pfg mm.pfg.in\n# expand\nRUN sed \\\n        -e \"s:@PREFIX@:${prefix}:g\" \\\n        mm.pfg.in > mm.pfg\n\n# place the {mm} control file\nWORKDIR /root/.mm\n# copy the relevant configuration file\nCOPY etc/docker/groovy-clang/config.mm config.mm.in\n# expand\nRUN sed \\\n        -e \"s:@PYTHON_VERSION@:${python_version}:g\" \\\n        config.mm.in > config.mm\n\n\n# make the development area\nWORKDIR ${srcdir}\n# pull mm\nRUN git clone https://github.com/aivazis/mm.git\n# pull pyre\nCOPY . pyre\n\n# go to the {pyre} top level directory\nWORKDIR ${srcdir}/pyre\n# build\nRUN ${mm}\n# show me the build context\nRUN ${mm} --serial host.info builder.info compilers.info\n\n# start the ssh daemon and test\nCMD service ssh start && ${MM} tests\n\n\n# end of file\n"
}