{
  "startTime": 1674252519256,
  "endTime": 1674252520380,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 7,
        "columnEnd": 149
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 7,
        "columnEnd": 38
      }
    }
  ],
  "repairedDockerfile": "FROM python:3.7-slim\nMAINTAINER Benjamin Hutchins <ben@hutchins.co>\nMAINTAINER Riotkit <riotkit_org@riseup.net>\n\n# build-time arguments, use them in docker build with --build-arg switch to build different version\nARG RKT_APP_VERSION=UNKNOWN\nARG FRONTEND_VERSION=UNKNOWN\n\n# runtime arguments\nENV DEBIAN_FRONTEND=noninteractive \\\n    # Set to \"c\" for English, pl-PL.UTF-8 for Polish etc.\n    LANG=en_US.UTF-8 \\\n    # Timezone\n    TZ=\"Europe/Warsaw\" \\\n    # Set to \"c\" for English, pl-PL.UTF-8 for Polish etc.\n    LC_TYPE=en_US.UTF-8 \\\n    # Enable mail server\n    TAIGA_ENABLE_EMAIL=False \\\n    # Use TLS encryption when sending mails\n    TAIGA_EMAIL_USE_TLS=true\\\n    # SMTP server host\n    TAIGA_EMAIL_HOST=smtp \\\n    # SMTP server port\n    TAIGA_EMAIL_PORT=25 \\\n    # SMTP user login\n    TAIGA_EMAIL_USER=taiga@riotkit.org \\\n    # SMTP user password\n    TAIGA_EMAIL_PASS=some-password \\\n    # SMTP \"From\" header value\n    TAIGA_EMAIL_FROM=taiga@localhost \\\n    # Queue connection string\n    TAIGA_BROKER_URL=amqp://guest:guest@rabbit:5672 \\\n    # Redis url\n    TAIGA_REDIS_URL=\"redis://redis:6379/0\" \\\n    # Enables Celery support\n    CELERY_ENABLED=false \\\n    # Serializer type supported by Taiga at Celery\n    CELERY_SERIALIZER_TYPE=pickle \\\n    # Default locale ex. en, pl\n    TAIGA_DEFAULT_LOCALE=en \\\n    # !!! Secret key, please change it with your own\n    TAIGA_SECRET_KEY=REPLACE-ME-j1598u1J^U*(y251u98u51u5981urf98u2o5uvoiiuzhlit3) \\\n    # PostgreSQL database name\n    TAIGA_DB_NAME=taiga \\\n    # PostgreSQL database hostname\n    TAIGA_DB_HOST=postgres \\\n    # PostgreSQL database user login\n    TAIGA_DB_USER=taiga \\\n    # PostgreSQL database user password\n    TAIGA_DB_PASSWORD= \\\n    # Protocol http or https your instance will listen on\n    TAIGA_SCHEME=http \\\n    # Enable or disable events?\n    TAIGA_ENABLE_EVENTS=false \\\n    # Hostname for events server\n    TAIGA_EVENTS_HOST=events \\\n    # Hostname of your instance (domain ex. riotkit.org or subdomain - board.riotkit.org)\n    TAIGA_HOSTNAME=localhost \\\n    # Set to `true` to enable the LDAP authentication.\n    TAIGA_LDAP=false \\\n    # The LDAP server URL.\n    LDAP_SERVER=\"\" \\\n    # The port to connect to the LDAP server on.\n    LDAP_PORT=0 \\\n    # Set to `true` to enable StartTLS when connecting to the server.\n    LDAP_START_TLS=\"false\" \\\n    # The DN to bind to the LDAP server with. If left blank the client will attempt to bind anonymously.\n    LDAP_BIND_DN=\"\" \\\n    # The password for the bind DN.\n    LDAP_BIND_PASSWORD=\"\" \\\n    # The root of the LDAP structure in which to search for user accounts.\n    LDAP_SEARCH_BASE=\"\" \\\n    # Additional filter added to the user account query.\n    LDAP_SEARCH_FILTER_ADDITIONAL=\"\" \\\n    # The LDAP attribute that will be used for the account's Taiga username.\n    LDAP_USERNAME_ATTRIBUTE=\"uid\" \\\n    # The LDAP attribute that will be used for the account's Email address.\n    LDAP_EMAIL_ATTRIBUTE=\"mail\" \\\n    # The LDAP attribute that will be used for the account's full name.\n    LDAP_FULL_NAME_ATTRIBUTE=\"cn\" \\\n    # The fallback authentication method to use if LDAP fails. This will allows users to login with either an LDAP account or a local account. Set to a blank string to prevent logging in with anything other than LDAP.\n    LDAP_FALLBACK=\"normal\" \\\n    # Whether or not to save the LDAP password in the local database. If `LDAP_FALLBACK` is set to `normal` this will allow users that have logged in with LDAP before to login even if the LDAP server is unavailable.\n    LDAP_SAVE_LOGIN_PASSWORD=\"true\" \\\n    # Enable the GitHub project importer\n    TAIGA_IMPORTER_GITHUB_ENABLED=\"false\" \\\n    # GitHub importer client ID\n    TAIGA_IMPORTER_GITHUB_CLIENT_ID=\"\" \\\n    # GitHub importer client secret\n    TAIGA_IMPORTER_GITHUB_CLIENT_SECRET=\"\" \\\n    # Enable the Trello project importer\n    TAIGA_IMPORTER_TRELLO_ENABLED=\"false\" \\\n    # Trello importer api key\n    TAIGA_IMPORTER_TRELLO_API_KEY=\"\" \\\n    # Trello importer secret key\n    TAIGA_IMPORTER_TRELLO_SECRET_KEY=\"\" \\\n    # Enable the JIRA project importer\n    TAIGA_IMPORTER_JIRA_ENABLED=\"false\" \\\n    # JIRA importer consumer key\n    TAIGA_IMPORTER_JIRA_CONSUMER_KEY=\"\" \\\n    # JIRA importer cert\n    TAIGA_IMPORTER_JIRA_CERT=\"\" \\\n    # JIRA importer public cert\n    TAIGA_IMPORTER_JIRA_PUB_CERT=\"\" \\\n    # Enable the Asana project importer\n    TAIGA_IMPORTER_ASANA_ENABLED=\"false\" \\\n    # Override callback URL for Asana importer. Will be automatically set based on Taiga URL if left blank.\n    TAIGA_IMPORTER_ASANA_CALLBACK_URL=\"\" \\\n    # Asana importer app ID\n    TAIGA_IMPORTER_ASANA_APP_ID=\"\" \\\n    # Asana importer app secret\n    TAIGA_IMPORTER_ASANA_APP_SECRET=\"\" \\\n    DEBUG=false \\\n    # Default container user id\n    TAIGA_UID=1000 \\\n    # Default container group id\n    TAIGA_GID=1000 \\\n    # List of plugins to enable eg. \"slack, other, other\" or just \"slack\"\n    TAIGA_PLUGINS=\"\" \\\n    # Interval (in seconds) for a background task that sends mails\n    MAIL_NOTIFICATIONS_SEND_EVERY=120 \\\n    # The number of worker processes for handling requests\n    GUNICORN_WORKERS=4 \\\n    # Workers silent for more than this many seconds are killed and restarted\n    GUNICORN_TIMEOUT=60 \\\n    # The number of worker threads for handling requests\n    GUNICORN_WORKER_THREADS=1 \\\n    # The maximum number of simultaneous clients\n    GUNICORN_WORKER_CONNECTIONS=1000 \\\n    # The maximum number of requests a worker will process before restarting\n    GUNICORN_WORKER_MAX_REQUESTS=3000 \\\n    # The granularity of Error log outputs\n    GUNICRON_LOG_LEVEL=info \\\n    # The maximum number of pending connections\n    GUNICORN_BACKLOG=2048 \\\n    # Enable or not the webhooks\n    TAIGA_ENABLE_WEBHOOKS=False \\\n    RKD_PATH=\"/opt/rkd/.rkd\"\n\nCOPY container-files/opt/rkd /opt/rkd\nCOPY bin/plugins/plugin-manager.py /opt/riotkit/bin/\nCOPY bin/cron/send-mail-notifications.sh /opt/riotkit/bin/\nCOPY bin/taiga/launch-gunicorn.sh /opt/riotkit/bin/\nCOPY plugins /usr/src/taiga-plugins\n\n#\n# Setup RKD\n#\nRUN pip install --no-cache-dir -r /opt/rkd/requirements.txt \\\n    && rkd :tasks\n\n# install dependencies\n# download and unpack applications in selected versions\n# set a locale\n# clean up\nRUN set -x \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends locales gettext ca-certificates nginx libcap2-bin supervisor wget curl subversion postgresql-client \\\n    && apt-get clean \\\n    \\\n    && echo \"LANG=en_US.UTF-8\" > /etc/default/locale \\\n    && echo \"LC_TYPE=en_US.UTF-8\" > /etc/default/locale \\\n    && echo \"LC_MESSAGES=POSIX\" >> /etc/default/locale \\\n    && echo \"LANGUAGE=en\" >> /etc/default/locale \\\n    && locale-gen en_US.UTF-8 && dpkg-reconfigure locales \\\n    && locale -a \\\n    \\\n    && addgroup --gid $TAIGA_GID taiga \\\n    && adduser taiga --uid $TAIGA_UID --home /usr/src --disabled-password --shell /bin/bash --gid $TAIGA_GID \\\n    && setcap cap_net_bind_service=ep /usr/sbin/nginx \\\n    \\\n    && wget https://github.com/taigaio/taiga-back/archive/$RKT_APP_VERSION.tar.gz -O /usr/src/taiga-back.tar.gz \\\n    && wget https://github.com/taigaio/taiga-front-dist/archive/$FRONTEND_VERSION.tar.gz -O /usr/src/taiga-front-dist.tar.gz \\\n    && cd /usr/src/ \\\n    && tar -xvf taiga-back.tar.gz \\\n    && mkdir -p /usr/src/taiga-back \\\n    && mv taiga-back-*/* taiga-back/ \\\n    \\\n    && tar -xvf taiga-front-dist.tar.gz \\\n    && mkdir -p /usr/src/taiga-front-dist \\\n    && mv taiga-front-*/* taiga-front-dist/ \\\n    \\\n    && rm /usr/src/*.tar.gz \\\n    \\\n    && mkdir -p /taiga /usr/src/taiga-front-dist/dist/js/ /usr/src/taiga-front-dist/dist/plugins \\\n    && pip install --no-cache-dir -r /usr/src/taiga-back/requirements.txt \\\n    && pip install --no-cache-dir j2cli \\\n    && pip install --no-cache-dir taiga-contrib-ldap-auth-ext \\\n    && chmod +x /opt/riotkit/bin/* \\\n    && mkdir -p /usr/src/taiga-plugins \\\n    && /opt/riotkit/bin/plugin-manager.py install-all-plugins && rm -rf /taiga && rm -rf /var/lib/apt/lists/*;\n\n\n# Configure SSL ( Required for the LDAP plugin )\nRUN echo \"CipherString=DEFAULT@SECLEVEL=1\" >> /etc/ssl/openssl.cnf\n\n# copy configs and scripts\nCOPY container-files/opt/taiga-conf /opt/taiga-conf\nCOPY container-files/docker-entrypoint.sh /docker-entrypoint.sh\nCOPY container-files/etc/supervisor.conf /etc/supervisord.conf\n\n# configure\nRUN cp /opt/taiga-conf/taiga/local.py /usr/src/taiga-back/settings/local.py \\\n    && cp /opt/taiga-conf/taiga/docker.py /usr/src/taiga-back/settings/docker.py \\\n    && cp /opt/taiga-conf/taiga/celery.py /usr/src/taiga-back/settings/celery.py \\\n    && j2 /opt/taiga-conf/locale.gen.j2 > /etc/locale.gen \\\n    \\\n    # NOTICE: In case that \"collectstatic\" would not be found, it means in Django that the Taiga was not loaded\n    # and only basic Django application is configured because of an error, so Taiga commands are not loaded in that case\n    \\\n    && cd /usr/src/taiga-back/ && python manage.py collectstatic --noinput \\\n    && mkdir -p /var/log/nginx /var/lib/nginx \\\n    && touch /var/run/nginx.pid\n\nEXPOSE 80 9001\nVOLUME /usr/src/taiga-back/media\nWORKDIR /usr/src/taiga-back\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"supervisord\", \"-c\", \"/etc/supervisord.conf\"]\n\nHEALTHCHECK --interval=1m --timeout=5s \\\n  CMD curl -s -f http://localhost/ || exit 1\n"
}