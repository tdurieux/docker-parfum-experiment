{
  "startTime": 1674249243527,
  "endTime": 1674249244122,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# AriaCoda Development Container:\n# A container that contains the bare minimum for building AriaCoda, which can be used as a \"dev container\"\n# with the Visual Studio Code \"Remote Containers\" feature. See .devcontainer/devcontainer.json for VS Code config.\n#\n# Accepts an argument IMAGE with the name of the base docker image to derive this container from,\n# e.g. a base OS image from Docker Hub, or image file, or URL.\n# The default is \"ubuntu:latest\" for latest stable. You can set IMAGE to choose another version of Ubuntu, or another version of Linux.\n# Set IMAGE on the \"docker build\" command line like this:\n#   docker build --build-arg IMAGE=ubuntu:xenial .\n#\n# e.g.\n#   ubuntu:xenial     Ubuntu 16.04   NOTE: you will also neet to set ARIA_OMIT_DEPRECATED_MATH_FUNCS=1 when running make\n#   ubuntu:bionic     Ubuntu 18.04\n#   ubuntu:focal      Ubuntu 20.04\n#   ubuntu:impish     Ubuntu 21.10\n#   ubuntu:rolling    Latest non-LTS Ubuntu\n#   debian:latest-slim      Latest stable Debian (\"slim\" variant)\n#   debian:testing-slim     Testing Debian\n#   debian:unstable-slim    Unstable Debian\n#   debian:11-slim    Debian 11\n#   debian:10-slim    Debian 10\n#   alpine:latest     Latest Alpine (a very lightweight Linux distribution with only busybox instead of the usual utilities)\n#   archlinux:latest  Latest Arch\n#\n# Use \"docker pull\" to download an image from Docker Hub if needed.\n\n\nARG IMAGE=ubuntu:latest\nFROM ${IMAGE}\n\n# TODO if image is ubuntu:xenial, set ARIA_OMIT_DEPRECATED_MATH_FUNCS in environment\n# TODO use appropriate package manager if using another version of Linux (e.g. alpine needs to use apk instead of apt)\n# TODO maybe we just need different Dockerfiles for different linuxes?\n\nRUN apt-get update && apt-get --yes --no-install-recommends install g++ make gdb git && rm -rf /var/lib/apt/lists/*;\n\n\n# TODO include a CMD or ENTRYPOINT to build AriaCoda if NOT run as devcontainer from Visual Studio Code or github or wherever.\n\n"
}