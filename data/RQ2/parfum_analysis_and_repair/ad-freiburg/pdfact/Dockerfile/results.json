{
  "startTime": 1674246167891,
  "endTime": 1674246168462,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 47,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 47,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nWORKDIR /\n\nRUN apt-get update -y && apt-get upgrade -y && apt-get install --no-install-recommends -y maven && rm -rf /var/lib/apt/lists/*;\n\nCOPY pdfact-cli ./pdfact-cli\nCOPY pdfact-core ./pdfact-core\nCOPY resources ./resources\nCOPY pom.xml .\n\nRUN mvn install -DskipTests\n\n# Define the entrypoint.\nENTRYPOINT [\"java\", \"-jar\", \"/bin/pdfact.jar\"]\n\n# Build image.\n# docker build -t pdfact .\n\n# Get usage info.\n# docker run --rm --name pdfact pdfact --help\n\n# Extract all paragraphs from a single PDF and print the output to stdout.\n# docker run --rm --name pdfact -v <path-to-pdf>:/input.pdf pdfact input.pdf\n\n# Extract the body paragraphs from a single PDF, print the output to output.xml (in XML format)\n# and create a visualization file.\n# NOTE: In the command below, <path-to-xml-file> and <path-to-visualization-pdf-file> must be paths to existent files on the host because otherwise Docker creates and mounts directories (instead of files).\n# docker run --rm --name pdfact -v <path-to-pdf>:/input.pdf -v <path-to-xml-file>:/output.xml -v <path-to-visualization-pdf-file>:/visualization.pdf pdfact input.pdf output.xml --include-roles body --visualize visualization.pdf --format xml"
}