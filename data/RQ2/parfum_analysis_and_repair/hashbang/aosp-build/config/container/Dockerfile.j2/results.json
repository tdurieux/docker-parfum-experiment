{
  "startTime": 1674216725008,
  "endTime": 1674216725823,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "{{ \"# This file was generated using a Jinja2 template.\" }}\n{{ \"# Please make your changes in `Dockerfile.j2` and then `make` the individual Dockerfile's.\" }}\n\n{% if \"golang\" in tags %}\nARG GOLANG_IMAGE_REF=@sha256:84349ee862d8bafff35e0d2bfd539da565b536b4dfce654773fc21a1db2da6d7\n{% endif %}\nARG DEBIAN_IMAGE_REF=@sha256:102ab2db1ad671545c0ace25463c4e3c45f9b15e319d3a00a1b2b085293c27fb\n\n{% if \"golang\" in tags %}\nFROM golang${GOLANG_IMAGE_REF} as golang\n\nARG FIXUID_GIT_REF=\"0ec93d22e52bde5b7326e84cb62fd26a3d20cead\"\nARG OZZOCONFIG_GIT_REF=\"0ff174cf5aa6480026e0b40c14fd9cfb61c4abf6\"\nARG JSONPREPROCESS_GIT_REF=\"a4e954386171be645f1eb7c41865d2624b69259d\"\nARG TOML_GIT_REF=\"3012a1dbe2e4bd1391d42b32f0577cb7bbc7f005\"\nARG YAMLV2_GIT_REF=\"51d6538a90f86fe93ac480b35f37b2be17fef232\"\nARG GLIDE_GIT_REF=\"b94b39d657d8abcccba6545e148f1201aee6ffec\"\n\nRUN apk add --no-cache bash git make\n\nRUN printf \"\\\ngithub.com/boxboat/fixuid.git github.com/boxboat/fixuid ${FIXUID_GIT_REF} \\n\\\ngithub.com/go-ozzo/ozzo-config github.com/go-ozzo/ozzo-config ${OZZOCONFIG_GIT_REF} \\n\\\ngithub.com/hnakamur/jsonpreprocess github.com/hnakamur/jsonpreprocess ${JSONPREPROCESS_GIT_REF} \\n\\\ngithub.com/BurntSushi/toml github.com/BurntSushi/toml ${TOML_GIT_REF} \\n\\\ngithub.com/go-yaml/yaml gopkg.in/yaml.v2 ${YAMLV2_GIT_REF} \\n\" \\\n> /go/src/repos\n\nRUN echo ' \\\n    set -o nounset -o pipefail -o errexit; \\\n    cat /go/src/repos | while read -r line; do \\\n        repo=$(echo $line | awk \"{ print \\$1 }\"); \\\n        folder=$(echo $line | awk \"{ print \\$2 }\"); \\\n        ref=$(echo $line | awk \"{ print \\$3 }\"); \\\n        git clone \"https://${repo}\" \"/go/src/${folder}\"; \\\n        git -C \"/go/src/${folder}\" checkout ${ref};  \\\n    done' \\\n| bash\n\nRUN go build -o /usr/local/bin/fixuid github.com/boxboat/fixuid\n{% endif %}\n\n# TODO: Install repo from backports.\nFROM debian:buster-20210621${DEBIAN_IMAGE_REF}\n\nARG DEBIAN_FRONTEND=noninteractive\n\n{% if \"golang\" in tags %}\nCOPY --from=golang /usr/local/bin/ /usr/local/bin/\n{% endif %}\n\nENV HOME=/home/build\nENV PATH=/home/build/scripts:/opt/aosp-build/scripts:/home/build/out/host/linux-x86/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\nENV LANG=C.UTF-8 \\\n    TZ=UTC \\\n    TERM=xterm-256color\n\nADD config/container/sources.list /etc/apt/sources.list\n{% if \"latest\" in tags %}\nADD config/container/packages.list /etc/apt/packages.list\n{% else %}\nADD config/container/packages-pinned.list /etc/apt/packages.list\n{% endif %}\n\nRUN echo 'Acquire::Check-Valid-Until \"false\";' > /etc/apt/apt.conf.d/00debuerreotype_snapshot \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y $(grep -v '^#' /etc/apt/packages.list) \\\n    && sed --in-place '/en_US.UTF-8/s/^#\\s*//;' /etc/locale.gen \\\n    && dpkg-reconfigure locales \\\n    && update-locale LANG=en_US.UTF-8 \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nADD config /opt/aosp-build/config\nADD scripts /opt/aosp-build/scripts\n\nRUN useradd -G plugdev,sudo -ms /bin/bash build \\\n    && chown -R build:build /home/build \\\n    && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n{% if \"golang\" in tags %}\nRUN chown root:root /usr/local/bin/fixuid \\\n    && chmod 4755 /usr/local/bin/fixuid \\\n    && mkdir -p /etc/fixuid \\\n    && printf \"user: build\\ngroup: build\\npaths:\\n  - /\\n  - /home/build/build\\n\" > /etc/fixuid/config.yml\n\nENTRYPOINT [\"/usr/local/bin/fixuid\", \"-q\"]\n{% endif %}\n\nWORKDIR /home/build\n\nCMD [ \"/bin/bash\", \"/usr/local/bin/build\" ]\n\nUSER build\n\n# Other scripts might also need to use git. So do it here.\nRUN printf \"[color]\\nui=auto\\n[user]\\nemail=aosp@example.org\\nname=AOSP User\" > ~/.gitconfig\n"
}