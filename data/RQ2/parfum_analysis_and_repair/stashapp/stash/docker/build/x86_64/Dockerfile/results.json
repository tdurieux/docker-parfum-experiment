{
  "startTime": 1674251418296,
  "endTime": 1674251418895,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This dockerfile should be built with `make docker-build` from the stash root.\n\n# Build Frontend\nFROM node:alpine as frontend\nRUN apk add --no-cache make\n## cache node_modules separately\nCOPY ./ui/v2.5/package.json ./ui/v2.5/yarn.lock /stash/ui/v2.5/\nWORKDIR /stash\nRUN yarn --cwd ui/v2.5 install --frozen-lockfile. && yarn cache clean;\nCOPY Makefile /stash/\nCOPY ./graphql /stash/graphql/\nCOPY ./ui /stash/ui/\nRUN make generate-frontend\nARG GITHASH\nARG STASH_VERSION\nRUN BUILD_DATE=$(date +\"%Y-%m-%d %H:%M:%S\") make ui\n\n# Build Backend\nFROM golang:1.17-alpine as backend\nRUN apk add --no-cache make alpine-sdk\nWORKDIR /stash\nCOPY ./go* ./*.go Makefile gqlgen.yml .gqlgenc.yml /stash/\nCOPY ./scripts /stash/scripts/\nCOPY ./vendor /stash/vendor/\nCOPY ./pkg /stash/pkg/\nCOPY ./cmd /stash/cmd\nCOPY ./internal /stash/internal\nCOPY --from=frontend /stash /stash/\nRUN make generate-backend\nARG GITHASH\nARG STASH_VERSION\nRUN make build\n\n# Final Runnable Image\nFROM alpine:latest\nRUN apk add --no-cache ca-certificates vips-tools ffmpeg\nCOPY --from=backend /stash/stash /usr/bin/\nENV STASH_CONFIG_FILE=/root/.stash/config.yml\nEXPOSE 9999\nENTRYPOINT [\"stash\"]\n"
}