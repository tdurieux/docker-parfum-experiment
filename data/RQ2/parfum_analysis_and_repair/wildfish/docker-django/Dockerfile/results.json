{
  "startTime": 1674252570367,
  "endTime": 1674252571588,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 26,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 26,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-slim\n\nENV UWSGI_CONF ./etc/uwsgi.ini\n\nRUN sed 's/jessie/stretch/g' /etc/apt/sources.list -i && \\\n        apt-get update && apt-get upgrade -y\n\n# create the django user\nRUN groupadd -r django && useradd -r -d /home/django -g django django\nRUN mkdir /home/django\nRUN chown -R django:django /home/django\n\n# Essentials not included in slim\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        curl \\\n        wget \\\n        git-core \\\n        ssh \\\n        gnupg \\\n        dirmngr \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\n# Database drivers\nRUN apt-get update && apt-get install -y \\\n        libpq-dev \\\n        gdal-bin binutils libgdal-dev \\\n        gcc \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\nRUN echo deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main >> /etc/apt/sources.list && \\\n        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \\\n        apt-get update && apt-get install --no-install-recommends postgresql-client -y && rm -rf /var/lib/apt/lists/*;\n\n# Pillow dependencies\nRUN apt-get update && apt-get install -y \\\n        libtiff5-dev \\\n        libjpeg-dev \\\n        zlib1g-dev \\\n        libfreetype6-dev \\\n        liblcms2-dev \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\n# GeoDjango dependencies\nRUN apt-get update && apt-get install -y \\\n        binutils \\\n        libproj-dev \\\n        gdal-bin \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\n# lxml dependencies\nRUN apt-get update && apt-get install -y \\\n        libxml2-dev \\\n        libxslt-dev \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && apt-get install -y \\\n        libffi-dev \\\n        g++ \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\n# pcre for uwsgi routing\nRUN apt-get update && apt-get install -y \\\n        libpcre3 \\\n        libpcre3-dev \\\n        --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\n# Upgrade pip\nRUN pip install --no-cache-dir pip pip-tools -U\n\n# Slow Python packages\nRUN pip install --no-cache-dir psycopg2 \\\n                pillow \\\n                uwsgi \\\n                lxml\n\n# create the script for installing the version of node from .nvmrc\n# gpg keys listed at https://github.com/nodejs/node\nRUN set -ex \\\n  && for key in \\\n    9554F04D7259F04124DE6B476D5A82AC7E37093B \\\n    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n    FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n    B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n    56730D5401028683275BD23C23EFEFE93C4CFFFE; \\\n  do \\\n    gpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" || \\\n    gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\" || \\\n    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n  done\n\nCOPY ./scripts/bootstrap-node.sh /usr/bin/\nRUN chmod 755 /usr/bin/bootstrap-node.sh\n\nARG NODE_VERSION\nENV NODE_VERSION ${NODE_VERSION}\nRUN bootstrap-node.sh\n\n# Python onbuild steps from https://github.com/docker-library/python/blob/master/3.6/onbuild/Dockerfile\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\n# create the default entry point, command and static build scripts\nRUN mkdir /usr/src/app/scripts/ && rm -rf /usr/src/app/scripts/\nCOPY ./scripts/entrypoint.sh /usr/src/app/scripts/entrypoint.sh\nCOPY ./scripts/run-uwsgi.sh /usr/src/app/scripts/run-uwsgi.sh\nCOPY ./scripts/build-static.sh /usr/src/app/scripts/build-static.sh\nRUN chmod 755 /usr/src/app/scripts/*\n\n# by default run the entry point script\nENTRYPOINT [\"scripts/entrypoint.sh\"]\nCMD [\"scripts/run-uwsgi.sh\"]\n\nEXPOSE 8000\n"
}