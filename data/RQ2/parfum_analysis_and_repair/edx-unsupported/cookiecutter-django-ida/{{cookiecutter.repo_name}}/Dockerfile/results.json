{
  "startTime": 1674251654194,
  "endTime": 1674251655103,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 0,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 45,
        "columnEnd": 157
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic as app\nMAINTAINER devops@edx.org\n\n\n# Packages installed:\n# git; Used to pull in particular requirements from github rather than pypi,\n# and to check the sha of the code checkout.\n\n# language-pack-en locales; ubuntu locale support so that system utilities have a consistent\n# language and time zone.\n\n# python; ubuntu doesnt ship with python, so this is the python we will use to run the application\n\n# python3-pip; install pip to install application requirements.txt files\n\n# libssl-dev; # mysqlclient wont install without this.\n\n# libmysqlclient-dev; to install header files needed to use native C implementation for\n# MySQL-python for performance gains.\n\n# If you add a package here please include a comment above describing what it is used for\nRUN apt-get update && apt-get upgrade -qy && apt-get install --no-install-recommends language-pack-en locales git python3.5 python3-pip libmysqlclient-dev libssl-dev python3-dev -qy && \\\n pip3 install --no-cache-dir --upgrade pip setuptools && \\\nrm -rf /var/lib/apt/lists/*\n\nRUN ln -s /usr/bin/pip3 /usr/bin/pip\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV DJANGO_SETTINGS_MODULE {{cookiecutter.repo_name}}.settings.production\n\nEXPOSE {{cookiecutter.port}}\nRUN useradd -m --shell /bin/false app\n\nWORKDIR /edx/app/{{cookiecutter.repo_name}}\n\n# Copy the requirements explicitly even though we copy everything below\n# this prevents the image cache from busting unless the dependencies have changed.\nCOPY requirements/production.txt /edx/app/{{cookiecutter.repo_name}}/requirements/production.txt\n\n# Dependencies are installed as root so they cannot be modified by the application user.\nRUN pip3 install --no-cache-dir -r requirements/production.txt\n\nRUN mkdir -p /edx/var/log\n\n# Code is owned by root so it cannot be modified by the application user.\n# So we copy it before changing users.\nUSER app\n\n# Gunicorn 19 does not log to stdout or stderr by default. Once we are past gunicorn 19, the logging to STDOUT need not be specified.\nCMD gunicorn --workers=2 --name {{cookiecutter.repo_name}} -c /edx/app/{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}/docker_gunicorn_configuration.py --log-file - --max-requests=1000 {{cookiecutter.repo_name}}.wsgi:application\n\n# This line is after the requirements so that changes to the code will not\n# bust the image cache\nCOPY . /edx/app/{{cookiecutter.repo_name}}\n\n\nFROM app as newrelic\nRUN pip install --no-cache-dir newrelic\nCMD newrelic-admin run-program gunicorn --workers=2 --name {{cookiecutter.repo_name}} -c /edx/app/{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}/docker_gunicorn_configuration.py --log-file - --max-requests=1000 {{cookiecutter.repo_name}}.wsgi:application\n\n"
}