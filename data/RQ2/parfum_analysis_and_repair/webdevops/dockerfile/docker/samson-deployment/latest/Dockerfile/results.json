{
  "startTime": 1674251199542,
  "endTime": 1674251200871,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 193,
        "lineEnd": 193,
        "columnStart": 7,
        "columnEnd": 74
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 167,
        "columnStart": 7,
        "columnEnd": 21
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#+++++++++++++++++++++++++++++++++++++++\n# Dockerfile for webdevops/samson-deployment:latest\n#    -- automatically generated  --\n#+++++++++++++++++++++++++++++++++++++++\n\n\n# Staged baselayout builder\nFROM webdevops/toolbox AS baselayout\nRUN mkdir -p \\\n        /baselayout/sbin \\\n        /baselayout/usr/local/bin \\\n    # Baselayout scripts\n    && wget -O /tmp/baselayout-install.sh https://raw.githubusercontent.com/webdevops/Docker-Image-Baselayout/master/install.sh \\\n    && sh /tmp/baselayout-install.sh /baselayout \\\n    ## Install go-replace\n    && wget -O \"/baselayout/usr/local/bin/go-replace\" \"https://github.com/webdevops/goreplace/releases/download/1.1.2/gr-64-linux\" \\\n    && chmod +x \"/baselayout/usr/local/bin/go-replace\" \\\n    && \"/baselayout/usr/local/bin/go-replace\" --version \\\n    # Install gosu\n    && wget -O \"/baselayout/sbin/gosu\" \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64\" \\\n    && wget -O \"/tmp/gosu.asc\" \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64.asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n    && gpg --batch --verify /tmp/gosu.asc \"/baselayout/sbin/gosu\" \\\n    && rm -rf \"$GNUPGHOME\" /tmp/gosu.asc \\\n    && chmod +x \"/baselayout/sbin/gosu\" \\\n    && \"/baselayout/sbin/gosu\" nobody true\n\n\nFROM zendesk/samson:latest\n\nENV TERM=\"xterm\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV DOCKER_CONF_HOME=/opt/docker/ \\\n    LOG_STDOUT=\"\" \\\n    LOG_STDERR=\"\"\nENV APPLICATION_USER=application \\\n    APPLICATION_GROUP=application \\\n    APPLICATION_PATH=/app \\\n    APPLICATION_UID=1000 \\\n    APPLICATION_GID=1000\n\n###############################################################################\n# Bootstrap\n###############################################################################\n\n\n# Baselayout copy (from staged image)\nCOPY --from=baselayout /baselayout /\n\n\nRUN set -x \\\n    # Init bootstrap\n    && apt-update \\\n    && /usr/local/bin/generate-dockerimage-info \\\n    # Enable non-free\n    && sed -ri \"s/(deb.*\\/debian $(docker-image-info dist-codename) main)/\\1 contrib non-free /\" -- /etc/apt/sources.list \\\n    && apt-update \\\n    # System update\n    && /usr/local/bin/apt-upgrade \\\n    # Base stuff\n    && apt-install \\\n        apt-transport-https \\\n        ca-certificates \\\n        locales \\\n        gnupg \\\n    && docker-image-cleanup\n\n###############################################################################\n# Base\n###############################################################################\n\nCOPY conf/ /opt/docker/\n\nRUN set -x \\\n    # Install ansible\n    && apt-install \\\n        # Install ansible\n        python-minimal \\\n        python-setuptools \\\n        python-pip \\\n        python-paramiko \\\n        python-jinja2 \\\n        python-dev \\\n        libffi-dev \\\n        libssl-dev \\\n        build-essential \\\n        openssh-client \\\n    && pip install --no-cache-dir --upgrade pip \\\n    && hash -r \\\n    && pip install --no-cache-dir ansible \\\n    && chmod 750 /usr/local/bin/ansible* \\\n    # Cleanup\n    && apt-get purge -y -f --force-yes \\\n        python-dev \\\n        build-essential \\\n        libssl-dev \\\n        libffi-dev \\\n    && docker-image-cleanup\n\nRUN set -x \\\n    # Install packages\n    && chmod +x /opt/docker/bin/* \\\n    && apt-install \\\n        supervisor \\\n        wget \\\n        curl \\\n        vim \\\n        net-tools \\\n        tzdata \\\n    && chmod +s /sbin/gosu \\\n    && docker-run-bootstrap \\\n    && docker-image-cleanup\n\n###############################################################################\n# Base-app\n###############################################################################\n\nRUN set -x \\\n    # Install services\n    && apt-install \\\n        # Install common tools\n        zip \\\n        unzip \\\n        bzip2 \\\n        moreutils \\\n        dnsutils \\\n        openssh-client \\\n        rsync \\\n        git \\\n        patch \\\n    && /usr/local/bin/generate-locales \\\n    && docker-run-bootstrap \\\n    && docker-image-cleanup\n\n###############################################################################\n# Samson\n###############################################################################\n\nRUN set -x \\\n    ENV RAILS_ENV=\"production\"\n\nENV SQLITE_CLEANUP_DAYS=0\n\n# NGINX reverse proxy\nRUN export DEBIAN_FRONTEND=noninteractive && set -x \\\n       && echo deb https://apt.dockerproject.org/repo debian-jessie main > /etc/apt/sources.list.d/docker.list \\\n       && curl -fsSL https://yum.dockerproject.org/gpg | apt-key add - \\\n    && apt-install \\\n        # Install nginx\n        nginx \\\n        # Install docker\n        docker-engine \\\n        # Install php\n        php-cli \\\n        php-mysqlnd \\\n        php-mcrypt \\\n        php-curl \\\n        php-recode \\\n        php-json \\\n        # Install java\n        openjdk-8-jre \\\n        # SQlite 3\n        sqlite3 \\\n    && pip install --no-cache-dir -U \\\n        docker-compose \\\n        python-dotenv \\\n    && curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer \\\n    && curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer1 --version=1.10.16 \\\n    ## Enable ansible for deployment user\n    && chmod 755 /usr/local/bin/ansible* \\\n    && docker-image-cleanup\n\n# NPM stack\nRUN curl -f -sL https://deb.nodesource.com/setup_9.x | bash - \\\n    && apt-get install --no-install-recommends -y nodejs \\\n    && npm install -g gulp \\\n    && npm install -g grunt-cli \\\n    && npm install -g bower \\\n    && npm install -g npm-cache \\\n    && docker-image-cleanup && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Deployer stack\nRUN set -x \\\n    # Compiler stuff\n    && apt-install \\\n        build-essential \\\n    # Deployer: Ansistratno (https://github.com/ansistrano)\n    && ansible-galaxy install --force \\\n        ansistrano.deploy \\\n        ansistrano.rollback \\\n    # Deployer: PHP Deployer (http://deployer.org/) \\\n    && wget --quiet -O/usr/local/bin/dep https://deployer.org/deployer.phar \\\n    && chmod +x /usr/local/bin/dep \\\n    # Deployer: capistrano (http://capistranorb.com/)\n    && gem install capistrano \\\n    && docker-image-cleanup\n\n# Upload\nADD database.yml    /app/config/database.yml\nADD web/            /app/public/assets/\n\nADD crontab         /etc/cron.d/webdevops-samson-deployment\n\nRUN rake assets:precompile \\\n    && docker-service enable cron \\\n    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-samson-deployment \\\n    && /opt/docker/bin/bootstrap.sh \\\n    && docker-run-bootstrap \\\n    && docker-image-cleanup\n\nEXPOSE 80\nVOLUME /storage\n\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"supervisord\"]\n"
}