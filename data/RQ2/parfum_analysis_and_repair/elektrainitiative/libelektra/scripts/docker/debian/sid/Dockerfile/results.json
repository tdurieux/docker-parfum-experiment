{
  "startTime": 1674221098482,
  "endTime": 1674221099731,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 83,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 93,
        "columnStart": 7,
        "columnEnd": 118
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 99,
        "columnStart": 7,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 7,
        "columnEnd": 123
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 63,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:sid\n\nENV LANG C.UTF-8\nENV LANGUAGE C.UTF-8\nENV LC_ALL C.UTF-8\n\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n        antlr4 \\\n        automake \\\n        autotools-dev \\\n        bison \\\n        build-essential \\\n        checkinstall \\\n        clang-13 \\\n        clang-format-13 \\\n        cmake \\\n        curl \\\n        dh-lua \\\n        ed \\\n        flex \\\n        gawk \\\n        git \\\n        gnupg2 \\\n        gobject-introspection \\\n        icheck \\\n        lcov \\\n        libantlr4-runtime-dev \\\n        libaugeas-dev \\\n        libc6-dbg \\\n        libdbus-1-dev \\\n        libev-dev \\\n        libgcrypt20-dev \\\n        libgirepository1.0-dev \\\n        libgit2-dev \\\n        libglib2.0-dev \\\n        libgpgme-dev \\\n        liblua5.3-dev \\\n        libpcre++-dev \\\n        libpcre3-dev \\\n        libpython3-dev \\\n        libssl-dev \\\n        libsystemd-dev \\\n        libuv1-dev \\\n        libxerces-c-dev \\\n        libyajl-dev \\\n        libyaml-cpp-dev \\\n        libzmq3-dev \\\n        llvm-13 \\\n        moreutils \\\n        ninja-build \\\n        npm \\\n        openjdk-11-jdk \\\n        pkg-config \\\n        python3-dev \\\n        python3-pip \\\n        ruby \\\n        ruby-dev \\\n        sloccount \\\n        swig4.0 \\\n        systemd \\\n        tclcl-dev \\\n        unzip \\\n        valgrind \\\n        wget \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Add Clang 13 to path\nENV PATH=\"/usr/lib/llvm-13/bin:$PATH\"\n\n# Update cache for shared libraries\nRUN ldconfig\n\n# Build dependency for libelektra-fuse\nRUN pip3 install --no-cache-dir wheel\n\nRUN pip3 install --no-cache-dir cmake-format[yaml]==0.6.13\n\n# Google Test\nENV GTEST_ROOT=/opt/gtest\nARG GTEST_VER=release-1.11.0\nRUN mkdir -p ${GTEST_ROOT} \\\n    && cd /tmp \\\n    && curl -f -o gtest.tar.gz \\\n      -L https://github.com/google/googletest/archive/${GTEST_VER}.tar.gz \\\n    && tar -zxvf gtest.tar.gz --strip-components=1 -C ${GTEST_ROOT} \\\n    && rm gtest.tar.gz\n\n# Prettier\nRUN npm install --global prettier@2.5.1 && npm cache clean --force;\n\n# Google Java formatter\nRUN cd /opt \\\n    && curl -f -o google-java-format.jar \\\n      -L https://github.com/google/google-java-format/releases/download/v1.11.0/google-java-format-1.11.0-all-deps.jar\n\n# hyperfine\nARG HYPERFINE_VERSION=1.5.0\nRUN cd /tmp \\\n    && curl -f -o hyperfine.deb \\\n       -L https://github.com/sharkdp/hyperfine/releases/download/v${HYPERFINE_VERSION}/hyperfine_${HYPERFINE_VERSION}_amd64.deb \\\n    && dpkg -i hyperfine.deb \\\n    && rm hyperfine.deb\n\n# Create User:Group\n# The id is important as jenkins docker agents use the same id that is running\n# on the slaves to execute containers\nARG JENKINS_GROUPID\nRUN groupadd \\\n    -g ${JENKINS_GROUPID} \\\n    -f \\\n    jenkins\n\nARG JENKINS_USERID\nRUN useradd \\\n    --create-home \\\n    --uid ${JENKINS_USERID} \\\n    --gid ${JENKINS_GROUPID} \\\n    --shell \"/bin/bash\" \\\n    jenkins\n\n# download and install gradle\nRUN cd /tmp && wget https://services.gradle.org/distributions/gradle-7.4-bin.zip && unzip gradle-7.4-bin.zip && rm gradle-7.4-bin.zip && mv gradle-7.4 /opt/gradle\nENV PATH \"${PATH}:/opt/gradle/bin\"\n\nUSER ${JENKINS_USERID}\n\n\n\n# shfmt\nENV SHFMT_PATH=/home/jenkins/bin\nENV SHFMT_VERSION=v3.3.1\nENV PATH=\"${SHFMT_PATH}:${PATH}\"\nRUN mkdir -p \"${SHFMT_PATH}\" \\\n    && cd \"${SHFMT_PATH}\" \\\n    && curl -f -L \"https://github.com/mvdan/sh/releases/download/${SHFMT_VERSION}/shfmt_${SHFMT_VERSION}_linux_amd64\" -o shfmt \\\n    && chmod a+x shfmt\n\n# Ronn-NG\nENV PATH=\"$PATH:/home/jenkins/.local/share/gem/ruby/3.0.0/bin\"\nRUN gem install --user-install ronn-ng -v 0.10.1.pre1 && ronn --version\n"
}