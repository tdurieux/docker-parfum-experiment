{
  "startTime": 1674248524029,
  "endTime": 1674248524908,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 18,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 18,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 18,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 18,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 18,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 18,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#########################\n#\n# This docker file creates an image for the Flood Visualisation.\n#\n# NOTE: The \"docker build\" command used to build this file\n# into a image should be run from the mapbox-vis folder,\n# not from within the \"docker\" directory. See the README\n# for more details.\n#\n#########################\n\n##### DEVELOPMENT STAGE #####\n# Base image is Python\nFROM python:3.7.10 as dev\n\n# Install utilities\nRUN apt update && apt-get install --no-install-recommends -y cron procps nano dos2unix && rm -rf /var/lib/apt/lists/*;\n\n# Install PHP\nRUN apt update && apt-get install --no-install-recommends -y php libapache2-mod-php && rm -rf /var/lib/apt/lists/*;\n\n# Install web server\nRUN apt update && apt install --no-install-recommends -y apache2 && rm -rf /var/lib/apt/lists/*;\nRUN mkdir -p /var/www/html/\nRUN chown -R www-data:www-data /var/www/\nRUN chmod -R 775 /var/www/\n\n# Copy in custom Apache configuration\nCOPY apache2.conf /etc/apache2/apache2.conf\nRUN dos2unix /etc/apache2/apache2.conf\nRUN chmod 644 /etc/apache2/apache2.conf\n\n# Keeps Python from generating .pyc files in the container\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED=1\n\n# Install the required Python libraries\nCOPY docker/requirements.txt .\nRUN python -m pip install -r requirements.txt\n\n# Set the default working directory, then copy the start-up script\nCOPY docker/start-up.sh /usr/local/start-up.sh\nRUN chmod 755 /usr/local/start-up.sh\nRUN dos2unix /usr/local/start-up.sh\n\n# Copy in the files\nWORKDIR /var/www/html\nCOPY . .\n\n# Copy in the head.html specific to the DEVELOPMENT setup\nCOPY head-dev.html head.html\n\nRUN chown -R www-data:www-data /var/www/\nRUN chmod -R 775 /var/www/\n\n# Expose port 80\nEXPOSE 80\n\n# Run cron daemon and boot script at start\nCMD [ \"/bin/bash\", \"-c\", \"/usr/local/start-up.sh && tail -f /dev/null\" ]\n\n\n##### PRODUCTION STAGE #####\n# Using dev as the base\nFROM dev as prod\n\n# Copy in the download script specific to the PRODUCTION setup\nCOPY head-prod.html head.html\nRUN chmod 775 head.html\n"
}