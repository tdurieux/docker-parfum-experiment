{
  "startTime": 1674250181915,
  "endTime": 1674250182629,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 19,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 22,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 22,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedDockerfile": "# This Dockerfile creates an image for the Linked Data Fragments Server used by JPS_Chatbot (Marie)\n\n# First stage: build war file\n#==================================================================================================\nFROM maven:3.6-openjdk-11-slim as builder\n\n# Copy in the .m2 directory and credentials\nADD docker /root\n\n# Populate the settings templates with credentials\nWORKDIR /root/.m2\n# (Note that | rather than / is used as the sed delimiter, since encrypted passwords can contain the former, but not the latter\nRUN sed -i \"s|MASTER_PASSWORD|$(mvn --encrypt-master-password master_password)|\" settings-security.xml\nRUN sed -i \"s|REPO_USERNAME|$(cat ../credentials/repo_username.txt)|;s|REPO_PASSWORD|$(cat ../credentials/repo_password.txt|xargs mvn --encrypt-password)|\" settings.xml\n\n# Copy in the Java source and build the .war file\nWORKDIR /root/build\nCOPY components/LDF_SERVER_JAVA/Server .\nRUN --mount=type=cache,target=/root/.m2/repository mvn -Dmaven.test.skip=true -Dmaven.javadoc.skip=true package -U\n\n# Unpack other dependencies\nRUN --mount=type=cache,target=/root/.m2/repository mvn org.apache.maven.plugins:maven-dependency-plugin:unpack-dependencies -U\n#==================================================================================================\n\n# Second stage - copy in dependencies, run war file in Tomcat,\n#==================================================================================================\nFROM tomcat:9.0.46-jdk11-openjdk-slim-buster\n\n# Fixes a bug with gcrypt in Debian-based distros that can cause hash mismatches when trying to apt-install certain packages (including npm)\n# See https://bugs.launchpad.net/ubuntu/+source/libgcrypt20/+bug/1890006\nRUN mkdir -p /etc/gcrypt && echo all > /etc/gcrypt/hwf.deny\n\n# Install prequisites: nodeJS, pm2 and redis-server\nRUN apt-get update && apt-get install --no-install-recommends -y curl npm redis-server && rm -rf /var/lib/apt/lists/*;\nRUN curl -f -sL https://deb.nodesource.com/setup_15.x | bash\nRUN apt-get install --no-install-recommends nodejs -y --fix-missing && rm -rf /var/lib/apt/lists/*;\nRUN npm install && npm install pm2 -g && npm cache clean --force;\n\nWORKDIR /usr/src/app\n\n# Copy in the entrypoint script\nCOPY entrypoint.sh .\n\n# Copy in dependencies from the first stage\nCOPY --from=builder /root/build/dependencies ./\n# Copy in .war file from the first stage\nCOPY --from=builder /root/build/target/ldfserver.war /usr/local/tomcat/webapps/\n\n# Copy in source files for the Cache server\nCOPY components/CACHE_SERVER .\n\n# Entrypoint script starts redis, tomcat, node app\nENTRYPOINT [\"./entrypoint.sh\"]"
}