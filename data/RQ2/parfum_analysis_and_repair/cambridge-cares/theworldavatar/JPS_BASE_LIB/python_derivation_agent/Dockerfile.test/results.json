{
  "startTime": 1674255042619,
  "endTime": 1674255043595,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile has been adapted from the VS Code example at https://code.visualstudio.com/docs/containers/quickstart-python\n\n# Base image is a lightweight version of Python\nFROM python:3.7-slim-buster\n\n# Install required software\nRUN apt update && apt install --no-install-recommends -y git && rm -rf /var/lib/apt/lists/*;\n\n# Install Java openjdk-8 to enable py4jps\n# (See https://github.com/puckel/docker-airflow/issues/182#issuecomment-594906148)\nUSER root\nRUN echo \"deb http://security.debian.org/debian-security stretch/updates main\" >> /etc/apt/sources.list\nRUN mkdir -p /usr/share/man/man1 && \\\n    apt-get update -y && \\\n    apt-get install --no-install-recommends -y openjdk-8-jdk && rm -rf /var/lib/apt/lists/*;\n\n# Expose the port on which our server will run\nEXPOSE 5000\n\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED=1\nRUN echo ABCD\n# Install the required Python libraries\nCOPY docker_test_requirements.txt .\nRUN python -m pip install -r docker_test_requirements.txt\n\n# Install the pyderivationagent package in development mode\nRUN mkdir /pytemp\nCOPY pyderivationagent ./pytemp/pyderivationagent\nCOPY setup.py ./pytemp/\nCOPY README.md ./pytemp/\nRUN cd ./pytemp && python -m pip install -e .\n\n\n# # Re-install the version of JPS_BASE_LIB that is been developing\n# # (this will be required if the new features are not merged back to main)\n# RUN jpsrm uninstall JpsBaseLib\n# RUN mkdir /jpstemp\n# COPY /_temp/jps-base-lib.jar ./jpstemp/jps-base-lib.jar\n# COPY /_temp/lib ./jpstemp/lib\n# RUN jpsrm install JpsBaseLib ./jpstemp/\n\n# Set the default working directory, then copy the Python source code into it\nWORKDIR /app\nADD tests /app/tests\n\n# Switch to a non-root user before running the server, for security reasons\n# (See https://code.visualstudio.com/docs/containers/python-user-rights)\nRUN useradd appuser && chown -R appuser /app\n\n# Creating the user doesn't create their home directory for some reason, so create it now\nRUN mkdir /home/appuser\nRUN chown -R appuser:appuser /home/appuser\nRUN chmod -R 755 /home/appuser\n\n# Start the gunicorn server on port 5000, using a Flask object called 'app' imported from the 'python_agent' module\n# Note that port 5000 is *inside the container*; this can be mapped to a port on the host when running the container on the command line or in docker-compose.yml\nUSER appuser\n# The ENTRYPOINT is provided in docker-compose.test.yml file\n# ENTRYPOINT [\"gunicorn\", \"--bind\", \"0.0.0.0:5000\", \"tests.entry_point:create_rng_app()\"]\n"
}