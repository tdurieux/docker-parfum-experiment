{
  "startTime": 1674248655156,
  "endTime": 1674248655976,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile has been adapted from the VS Code example at https://code.visualstudio.com/docs/containers/quickstart-python\n\n# Base image is a lightweight version of Python\nFROM python:3.8-slim-buster\n\n# Install required software\nRUN apt update && apt install --no-install-recommends -y git && rm -rf /var/lib/apt/lists/*;\n\n# Expose the port on which our server will run\nEXPOSE 5000\n\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED=1\n\n# Install the required Python libraries\nCOPY requirements.txt .\nRUN python -m pip install -r requirements.txt\n\n# Set the default working directory, then copy the Python source code into it\nWORKDIR /app\nADD python_agent /app/python_agent\n\n# Switch to a non-root user before running the server, for security reasons\n# (See https://code.visualstudio.com/docs/containers/python-user-rights)\nRUN useradd appuser && chown -R appuser /app\n\n# Creating the user doesn't create their home directory for some reason, so create it now\nRUN mkdir /home/appuser\nRUN chown -R appuser:appuser /home/appuser\nRUN chmod -R 755 /home/appuser\n\n# Start the gunicorn server on port 5000, using a Flask object called 'app' imported from the 'python_agent' module\n# Note that port 5000 is *inside the container*; this can be mapped to a port on the host when running the container on the command line or in docker-compose.yml\nUSER appuser\nENTRYPOINT [\"gunicorn\", \"--bind\", \"0.0.0.0:5000\", \"python_agent:app\"]"
}