{
  "startTime": 1674255859486,
  "endTime": 1674255860265,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 38,
        "columnEnd": 159
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 104,
        "columnEnd": 127
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 7,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6-alpine\n\n# Copy in your requirements file\nADD ./compose/master/requirements.txt /requirements.txt\n\n# Install postgres\nENV PG_MAJOR 9.6\nENV PG_VERSION 9.6.8\n\nENV PATH /usr/lib/postgresql/$PG_MAJOR/bin:$PATH\nENV PGDATA /var/lib/postgresql/data\n\nENV LANG en_US.utf8\n\nRUN apk update && apk add build-base readline-dev openssl-dev zlib-dev libxml2-dev glib-lang wget gnupg ca-certificates libssl1.0 && \\\n    gpg --batch --keyserver ipv4.ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && \\\n    gpg --batch --list-keys --fingerprint --with-colons | sed -E -n -e 's/^fpr:::::::::([0-9A-F]+):$/\\1:6:/p' | gpg --batch --import-ownertrust && \\\n    wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64\" && \\\n    wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64.asc\" && \\\n    gpg --batch --verify /usr/local/bin/gosu.asc && \\\n    rm /usr/local/bin/gosu.asc && \\\n    chmod +x /usr/local/bin/gosu && \\\n    mkdir -p /docker-entrypoint-initdb.d && \\\n    wget https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2 -O /tmp/postgresql-$PG_VERSION.tar.bz2 && \\\n    tar xvfj /tmp/postgresql-$PG_VERSION.tar.bz2 -C /tmp && \\\n    cd /tmp/postgresql-$PG_VERSION && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-integer-datetimes --enable-thread-safety --prefix=/usr/local --with-libedit-preferred --with-openssl && make world && make install world && make -C contrib install && \\\n    cd /tmp/postgresql-$PG_VERSION/contrib && make && make install && \\\n    apk --purge del build-base openssl-dev zlib-dev libxml2-dev wget gnupg ca-certificates && \\\n    rm -r /tmp/postgresql-$PG_VERSION* /var/cache/apk/* && rm /tmp/postgresql-$PG_VERSION.tar.bz2\n\nCOPY ./compose/master/setup-postgres.sh /\n\n# Install build deps, then run `pip install`, then remove unneeded build deps all in a single step. Correct the path to your production requirements file, if needed.\nRUN set -ex \\\n    && apk add --no-cache --virtual .build-deps \\\n            gcc \\\n            make \\\n            libc-dev \\\n            musl-dev \\\n            linux-headers \\\n            pcre-dev \\\n            git \\\n    && python -m venv /venv \\\n    && /venv/bin/pip install -U pip \\\n    #&& git clone https://github.com/istrategylabs/django-rq-scheduler.git \\\n    #&& cd django-rq-scheduler \\\n    #&& LIBRARY_PATH=/lib:/usr/lib /bin/sh -c '/venv/bin/pip install --no-cache-dir . ' \\\n    #&& cd .. \\\n    && LIBRARY_PATH=/lib:/usr/lib /bin/sh -c \"/venv/bin/pip install --no-cache-dir -r /requirements.txt\" \\\n    && runDeps=\"$( \\\n            scanelf --needed --nobanner --recursive /venv \\\n                    | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n                    | sort -u \\\n                    | xargs -r apk info --installed \\\n                    | sort -u \\\n    )\" \\\n    && apk add --no-cache --virtual .python-rundeps $runDeps \\\n    && apk add --no-cache \\\n            nginx \\\n            sqlite \\\n            supervisor \\\n            redis \\\n            postgresql \\\n    && mkdir /data \\\n    && chown -R redis:redis /data \\\n    && echo -e \"include /etc/redis-local.conf\\n\" >> /etc/redis.conf \\\n    && mkdir /run/nginx/ \\\n    && apk del .build-deps\n\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\nCOPY ./compose/master/nginx-app.conf /etc/nginx/conf.d/default.conf\nCOPY ./compose/master/supervisord.conf /etc/supervisor/conf.d/\n\n# Copy your application code to the container (make sure you create a .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /app/\nRUN mkdir /app/code/\nRUN mkdir /app/static/\nRUN mkdir /app/media/\n\nWORKDIR /app/\n\nCOPY ./compose/master/uwsgi.ini /app/\nCOPY ./compose/master/uwsgi_params /app/\n\nEXPOSE 80\n\nADD ./mlbench/master/ /app/code/\n\nRUN rm /app/code/master/settings.py \\\n    && mv /app/code/master/settings_production.py /app/code/master/settings.py\n\n#Setup django\nRUN /venv/bin/python code/manage.py collectstatic\nRUN sh /setup-postgres.sh\nRUN rm /setup-postgres.sh\nCMD [\"supervisord\", \"-n\", \"-c\", \"/etc/supervisor/conf.d/supervisord.conf\"]"
}