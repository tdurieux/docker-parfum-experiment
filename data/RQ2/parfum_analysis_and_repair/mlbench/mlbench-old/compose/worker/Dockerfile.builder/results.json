{
  "startTime": 1674215532362,
  "endTime": 1674215533405,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 68,
        "columnEnd": 84
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 69
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 62
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 as mlbench-worker-base\n# TODO: reduce size and complexity of image.\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    gcc \\\n    make \\\n    libc-dev \\\n    musl-dev \\\n    openssh-server \\\n    g++ \\\n    git \\\n    curl \\\n    sudo && rm -rf /var/lib/apt/lists/*;\n\n# -------------------- SSH --------------------\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\nARG SSH_USER=root\nENV SSH_USER=$SSH_USER\nRUN mkdir -p /ssh-key/$SSH_USER && chown -R $SSH_USER:$SSH_USER /ssh-key/$SSH_USER\nRUN mkdir -p /.sshd/host_keys && \\\n  chown -R $SSH_USER:$SSH_USER /.sshd/host_keys && chmod 700 /.sshd/host_keys\nRUN mkdir -p /.sshd/user_keys/$SSH_USER && \\\n  chown -R $SSH_USER:$SSH_USER /.sshd/user_keys/$SSH_USER && chmod 700 /.sshd/user_keys/$SSH_USER\nVOLUME /ssh-key/$SSH_USER\n\n# -----–––---------------------- Cuda Dependency --------------------\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nRUN apt-get update && apt-get install -y --no-install-recommends --allow-downgrades \\\n        --allow-change-held-packages \\\n         libnccl2=2.0.5-3+cuda9.0 \\\n         libnccl-dev=2.0.5-3+cuda9.0 &&\\\n     rm -rf /var/lib/apt/lists/*\n\n# -------------------- Conda environment --------------------\nRUN curl -f -o ~/miniconda.sh -O  https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n     sh ~/miniconda.sh -b -p /conda && rm ~/miniconda.sh\nENV PATH /conda/bin:$PATH\nENV LD_LIBRARY_PATH /conda/lib:$LD_LIBRARY_PATH\n\n# TODO: Source code in Channel Anaconda can be outdated, switch to conda-forge if posible.\nRUN conda install -y -c anaconda numpy pyyaml scipy mkl setuptools cmake cffi mkl-include typing \\\n    && conda install -y -c mingfeima mkldnn \\\n    && conda install -y -c soumith magma-cuda90 \\\n    && conda install -y -c conda-forge python-lmdb opencv numpy \\\n    && conda clean --all -y\n\n# -------------------- Open MPI --------------------\nRUN mkdir /.openmpi/\nRUN apt-get update && apt-get install -y --no-install-recommends wget \\\n    && wget https://www.open-mpi.org/software/ompi/v3.0/downloads/openmpi-3.0.0.tar.gz\\\n    && gunzip -c openmpi-3.0.0.tar.gz | tar xf - \\\n    && cd openmpi-3.0.0 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/.openmpi/ --with-cuda \\\n    && make all install \\\n    && rm /openmpi-3.0.0.tar.gz \\\n    && rm -rf /openmpi-3.0.0 \\\n    && apt-get remove -y wget && rm -rf /var/lib/apt/lists/*;\n\nENV PATH /.openmpi/bin:$PATH\nENV LD_LIBRARY_PATH /.openmpi/lib:$LD_LIBRARY_PATH\n\nRUN mv /.openmpi/bin/mpirun /.openmpi/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /.openmpi/bin/mpirun && \\\n    echo \"/.openmpi/bin/mpirun.real\" '--allow-run-as-root \"$@\"' >> /.openmpi/bin/mpirun && \\\n    chmod a+x /.openmpi/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /.openmpi/etc/openmpi-mca-params.conf && \\\n    echo \"rmaps_base_mapping_policy = slot\" >> /.openmpi/etc/openmpi-mca-params.conf && \\\n    echo \"btl_tcp_if_exclude = lo,docker0\" >> /.openmpi/etc/openmpi-mca-params.conf\n\n# configure the path.\nRUN echo export 'PATH=$HOME/conda/envs/pytorch-py$PYTHON_VERSION/bin:$HOME/.openmpi/bin:$PATH' >> ~/.bashrc\nRUN echo export 'LD_LIBRARY_PATH=$HOME/.openmpi/lib:$LD_LIBRARY_PATH' >> ~/.bashrc\n\n\n# -------------------- PyTorch --------------------\nENV CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\"\n\n# Install basic dependencies\n# RUN git clone --recursive https://github.com/pytorch/pytorch && cd pytorch && python setup.py install\nRUN git clone --recursive https://github.com/pytorch/pytorch && \\\n    cd pytorch && \\\n    git submodule update --init && \\\n    TORCH_CUDA_ARCH_LIST=\"3.5 3.7 5.2 6.0 6.1 7.0+PTX\" TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" \\\n    CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\" \\\n    pip --no-cache-dir \\\n\n    install -v . && \\\n    rm -rf /pytorch\n\n\n\nRUN git clone https://github.com/pytorch/vision.git && cd vision && pip install --no-cache-dir -v .\n\n# RUN pip install -U git+https://github.com/ppwwyyxx/tensorpack.git\n\n# RUN conda install -y -c anaconda msgpack\n# RUN conda install -y -c anaconda msgpack msgpack-numpy pyzmq pillow\n# RUN conda install -y -c conda-forge tqdm\n# # RUN conda install -y -c pchrapka zmq\n# # RUN conda install -c omnia termcolor\n\n# -------------------- patch --------------------\n# libGL.so.1 might be lost when nvidia driver is installed\n# sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev\nRUN apt-get install --no-install-recommends -y libgl1-mesa-glx && rm -rf /var/lib/apt/lists/*;\n\n\n# -------------------- Others --------------------\nRUN echo \"orte_keep_fqdn_hostnames=t\" >> /.openmpi/etc/openmpi-mca-params.conf\n\nADD ./compose/worker/entrypoint.sh /usr/local/bin/\nRUN chmod a+x /usr/local/bin/entrypoint.sh\n\n# Copy your application code to the container (make sure you create a .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /app/\nWORKDIR /app/\n\nEXPOSE 22\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\nCMD [\"/usr/sbin/sshd\",\"-eD\", \"-f\", \"/.sshd/user_keys/root/sshd_config\"]\n"
}