{
  "startTime": 1674256034980,
  "endTime": 1674256035936,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM lsiobase/alpine:3.15 as base\n\nENV TZ=Etc/GMT\n\n# borrowed from node/alpine:3.15\n# https://github.com/nodejs/docker-node/blob/main/16/alpine3.15/Dockerfile\n#\n# Start of node docker stuff\n#\nENV NODE_VERSION 16.14.2\n\nRUN apk add --no-cache \\\n        libstdc++ \\\n    && apk add --no-cache --virtual .build-deps \\\n        curl \\\n    && ARCH= && alpineArch=\"$(apk --print-arch)\" \\\n      && case \"${alpineArch##*-}\" in \\\n        x86_64) \\\n          ARCH='x64' \\\n          CHECKSUM=\"a6dc255e1ef1f20372306eec932b4a3648575c6d3024bcd685b8efc93dc95569\" \\\n          ;; \\\n        *) ;; \\\n      esac \\\n  && if [ -n \"${CHECKSUM}\" ];then \\\n    set -eu; \\\n    curl -fsSLO --compressed \"https://unofficial-builds.nodejs.org/download/release/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz\"; \\\n    echo \"$CHECKSUM  node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz\" | sha256sum -c - \\\n      && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner \\\n      && ln -s /usr/local/bin/node /usr/local/bin/nodejs; \\\n  else \\\n    echo \"Building from source\" \\\n    # backup build\n    && apk add --no-cache --virtual .build-deps-full \\\n        binutils-gold \\\n        g++ \\\n        gcc \\\n        gnupg \\\n        libgcc \\\n        linux-headers \\\n        make \\\n        python3 \\\n    # gpg keys listed at https://github.com/nodejs/node#release-keys\n    && for key in \\\n      4ED778F539E3634C779C87C6D7062848A1AB005C \\\n      141F07595B7B3FFE74309A937405533BE57C7D57 \\\n      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n      74F12602B6F1C4E913FAA37AD3A89613643B6201 \\\n      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \\\n      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n      C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \\\n      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n      A48C2BEE680E841632CD4E44F07496B3EB3C1762 \\\n      108F52B48DB57BB0CC439B2997B01419BD92F80A \\\n      B9E2F5981AA6E0CD28160D9FF13993A75599653C \\\n    ; do \\\n      gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys \"$key\" || \\\n      gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\" ; \\\n    done \\\n    && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz\" \\\n    && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n    && grep \" node-v$NODE_VERSION.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n    && tar -xf \"node-v$NODE_VERSION.tar.xz\" \\\n    && cd \"node-v$NODE_VERSION\" \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j$(getconf _NPROCESSORS_ONLN) V= \\\n    && make install \\\n    && apk del .build-deps-full \\\n    && cd .. \\\n    && rm -Rf \"node-v$NODE_VERSION\" \\\n    && rm \"node-v$NODE_VERSION.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt; \\\n  fi \\\n  && rm -f \"node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz\" \\\n  && apk del .build-deps \\\n  # smoke tests\n  && node --version \\\n  && npm --version\n#\n# end of docker node stuff\n#\n\n# vips required to run sharp library for image comparison\nRUN echo \"http://dl-4.alpinelinux.org/alpine/v3.14/community\" >> /etc/apk/repositories \\\n    && apk --no-cache add vips\n\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nARG data_dir=/config\nVOLUME $data_dir\nENV DATA_DIR=$data_dir\n\nCOPY docker/root/ /\n\nWORKDIR /app\n\nFROM base as build\n\nCOPY --chown=abc:abc package*.json ./\nCOPY --chown=abc:abc tsconfig.json .\n\nRUN npm install && npm cache clean --force;\n\nCOPY --chown=abc:abc . /app\n\nRUN npm run build && rm -rf node_modules\n\nFROM base as app\n\nCOPY --from=build --chown=abc:abc /app /app\n\nRUN npm install --production \\\n    && npm cache clean --force \\\n    && chown abc:abc node_modules \\\n    && rm -rf node_modules/ts-node \\\n    && rm -rf node_modules/typescript\n\nENV NPM_CONFIG_LOGLEVEL debug\n\n# can set database to use more performant better-sqlite3 since we control everything\nENV DB_DRIVER=better-sqlite3\n\nARG webPort=8085\nENV PORT=$webPort\nEXPOSE $PORT\n\n# convenience variable for more helpful error messages\nENV IS_DOCKER=true\n\n"
}