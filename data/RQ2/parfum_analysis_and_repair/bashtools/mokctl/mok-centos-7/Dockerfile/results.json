{
  "startTime": 1674249598913,
  "endTime": 1674249599809,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 397
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 193
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 20,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\nARG CRICTL_VERSION\nARG K8SVERSION\nARG CRIO_MAJOR\nARG CRIO_MINOR\nARG CRIO_PATCH\n# Tell systemd that it's running in a container\nENV container docker\nCOPY kubernetes.repo /etc/yum.repos.d/kubernetes.repo\nRUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do \\\n    [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\n    rm -f /lib/systemd/system/multi-user.target.wants/*; \\\n    rm -f /etc/systemd/system/*.wants/*; \\\n    rm -f /lib/systemd/system/local-fs.target.wants/*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\n    rm -f /lib/systemd/system/basic.target.wants/*; \\\n    rm -f /lib/systemd/system/anaconda.target.wants/*; \\\n    yum -y update \\\n    && curl -f -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_MAJOR.$CRIO_MINOR:/$CRIO_MAJOR.$CRIO_MINOR.$CRIO_PATCH/CentOS_7/devel:kubic:libcontainers:stable:cri-o:$CRIO_MAJOR.$CRIO_MINOR:$CRIO_MAJOR.$CRIO_MINOR.$CRIO_PATCH.repo >/etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_MAJOR.$CRIO_MINOR:$CRIO_MAJOR.$CRIO_MINOR.$CRIO_PATCH.repo \\\n    && yum install -y \\\n      cri-o \\\n      iptables \\\n      iproute-tc \\\n      openssl \\\n      socat \\\n      conntrack \\\n      ipset \\\n      kubelet-$K8SVERSION \\\n      kubeadm-$K8SVERSION \\\n      kubectl-$K8SVERSION \\\n      --disableexcludes=kubernetes \\\n    && sed -i 's/\\(cgroup_manager =\\).*/\\1 \"systemd\"/' /etc/crio/crio.conf \\\n    && sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config \\\n    && sed -i 's/\\(conmon = .*\\)/#\\1/' /etc/crio/crio.conf \\\n    && rm -f /etc/cni/net.d/100-crio-bridge.conf \\\n    && rm -f /etc/cni/net.d/200-loopback.conf \\\n    && sed -i 's/\\(^driver = \\).*/\\1\"vfs\"/' /etc/containers/storage.conf \\\n    && systemctl enable crio \\\n    && curl -f -L https://github.com/kubernetes-sigs/cri-tools/releases/download/v$CRICTL_VERSION/crictl-v${CRICTL_VERSION}-linux-amd64.tar.gz --output crictl-v${CRICTL_VERSION}-linux-amd64.tar.gz \\\n    && tar zxvf crictl-v$CRICTL_VERSION-linux-amd64.tar.gz -C /usr/local/bin \\\n    && rm -f crictl-v$CRICTL_VERSION-linux-amd64.tar.gz \\\n    && mkdir -p /opt/cni/ \\\n    && ln -s /usr/libexec/cni /opt/cni/bin && rm -rf /var/cache/yum\nCOPY k8s.conf /etc/sysctl.d/k8s.conf\nCOPY 100-crio-bridge.conf-flannel /etc/cni/net.d/100-crio-bridge.conf\nCOPY kubelet-config /etc/sysconfig/kubelet\nCOPY entrypoint /usr/local/bin\nVOLUME [ \"/sys/fs/cgroup\" ]\n# SystemD's instuction to halt\nSTOPSIGNAL SIGRTMIN+3\nENTRYPOINT [\"/usr/local/bin/entrypoint\", \"/usr/sbin/init\"]\n"
}