{
  "startTime": 1674254724957,
  "endTime": 1674254725956,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILDER_IMAGE\n\nFROM $BUILDER_IMAGE AS builder\n\nARG SEAFILE_SERVER_VERSION\n\n# Build libevhtp\nRUN ./build.sh -1 -v $SEAFILE_SERVER_VERSION\n# Build libsearpc\nRUN ./build.sh -2 -v $SEAFILE_SERVER_VERSION\n# Build seafile (c_fileserver)\nRUN ./build.sh -3 -v $SEAFILE_SERVER_VERSION\n# Build seafile (go_fileserver)\nRUN ./build.sh -4 -v $SEAFILE_SERVER_VERSION\n\nARG PYTHON_REQUIREMENTS_URL_SEAHUB\nARG PYTHON_REQUIREMENTS_URL_SEAFDAV\n\n# Install dependencies and thirdparty requirements\n# FIXME: tmpfs mount to prevent some odd qemu issue when building a rust\n# dependency targeting a 32 bits platform on a 64 bits host\n# Affects the cryptography pip package on arm/v7, see this issue for detailed explanations:\n# https://github.com/JonasAlfredsson/docker-nginx-certbot/issues/109\nRUN --mount=type=tmpfs,target=/root/.cargo ./build.sh -T -v $SEAFILE_SERVER_VERSION \\\n    -h $PYTHON_REQUIREMENTS_URL_SEAHUB \\\n    -d $PYTHON_REQUIREMENTS_URL_SEAFDAV\n\n# Build seahub\nRUN ./build.sh -5 -v $SEAFILE_SERVER_VERSION\n# Build seafobj\nRUN ./build.sh -6 -v $SEAFILE_SERVER_VERSION\n# Build seafdav\nRUN ./build.sh -7 -v $SEAFILE_SERVER_VERSION\n# Build Seafile server\nRUN ./build.sh -8 -v $SEAFILE_SERVER_VERSION\n\n# Extract package\nRUN tar -xzf built-seafile-server-pkgs/*.tar.gz && rm built-seafile-server-pkgs/*.tar.gz\nRUN mkdir seafile \\\n    && mv seafile-server-$SEAFILE_SERVER_VERSION seafile \\\n    && mv /haiwen-build/seafile-server/fileserver/fileserver seafile/seafile-server-$SEAFILE_SERVER_VERSION/seafile/bin/\n\nWORKDIR /seafile\n\n# Additional dependencies\nRUN python3 -m pip install --force-reinstall --target seafile-server-$SEAFILE_SERVER_VERSION/seahub/thirdpart --upgrade \\\n    # Memcached\n    pylibmc \\\n    django-pylibmc \\\n    && rm -rf seafile-server-$SEAFILE_SERVER_VERSION/seahub/thirdpart/*/__pycache__\n\n# Prepare media folder to be exposed\nRUN mv seafile-server-$SEAFILE_SERVER_VERSION/seahub/media . && echo $SEAFILE_SERVER_VERSION > ./media/version\n\nCOPY custom/setup-seafile-mysql.py seafile-server-$SEAFILE_SERVER_VERSION/setup-seafile-mysql.py\nCOPY custom/db_update_helper.py seafile-server-$SEAFILE_SERVER_VERSION/upgrade/db_update_helper.py\n\nRUN chmod -R g+w .\n\nFROM ubuntu:jammy\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n    sudo \\\n    tzdata \\\n    procps \\\n    sqlite3 \\\n    libmariadb3 \\\n    libmemcached11 \\\n    python3 \\\n    python3-setuptools \\\n    python3-ldap \\\n    python3-sqlalchemy \\\n    # Improve Mysql 8 suppport\n    python3-cryptography \\\n    # Folowing libs are useful for the armv7 arch only\n    # Since they're not heavy, no need to create separate pipelines atm\n    libopenjp2-7 \\\n    libtiff5 \\\n    libxcb1 \\\n    libfreetype6 \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt/seafile\n\n# Rights management\nRUN groupadd -g 999 runtime \\\n    && useradd -ms /bin/bash -G sudo,runtime seafile \\\n    && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \\\n    && chown seafile:runtime . \\\n    && chmod g+w .\n\nCOPY --from=builder --chown=seafile:runtime /seafile /opt/seafile\nCOPY docker_entrypoint.sh /\nCOPY --chown=seafile:seafile scripts /home/seafile\n\nARG SEAFILE_SERVER_VERSION\nARG REVISION\n\n# Add Seafile version in container context\nENV SEAFILE_SERVER_VERSION $SEAFILE_SERVER_VERSION\n\n# Add image revision in container context\nENV REVISION $REVISION\n\nCMD [\"/docker_entrypoint.sh\"]\n"
}