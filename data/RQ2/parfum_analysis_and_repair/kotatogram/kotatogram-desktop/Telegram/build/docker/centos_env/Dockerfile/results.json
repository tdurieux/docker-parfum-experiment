{
  "startTime": 1674220624878,
  "endTime": 1674220629350,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 155,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 364,
        "lineEnd": 460,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 529,
        "lineEnd": 529,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 544,
        "lineEnd": 544,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 562,
        "lineEnd": 565,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 601,
        "lineEnd": 622,
        "columnStart": 23,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 642,
        "lineEnd": 661,
        "columnStart": 23,
        "columnEnd": 42
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 681,
        "lineEnd": 681,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 29,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Default value of the arg should be specified here\nARG QT6=true\n\nFROM centos:7 AS builder\n\nENV GIT https://github.com\nENV GIT_FREEDESKTOP ${GIT}/gitlab-freedesktop-mirrors\nENV PKG_CONFIG_PATH /usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig\nENV QT5_VER 5_15_2\nENV QT5_TAG v5.15.2\nENV QT5_PREFIX /usr/local/desktop-app/Qt-5.15.2\nENV Qt5_DIR ${QT5_PREFIX}\nENV QT6_VER 6_2_2\nENV QT6_TAG v6.2.2\nENV QT6_PREFIX /usr/local/desktop-app/Qt-6.2.2\nENV Qt6_DIR ${QT6_PREFIX}\nENV OPENSSL_VER 1_1_1\nENV OPENSSL_PREFIX /usr/local/desktop-app/openssl-1.1.1\nENV OPENSSL_ROOT_DIR ${OPENSSL_PREFIX}\nENV CMAKE_VER 3.21.3\nENV CMAKE_FILE cmake-$CMAKE_VER-Linux-x86_64.sh\nENV PATH ${PATH}:${QT5_PREFIX}/bin:${QT6_PREFIX}/bin\nENV HFLAGS_DEBUG \"-fstack-protector-all -fstack-clash-protection -fPIC\"\nENV HFLAGS \"$HFLAGS_DEBUG -D_FORTIFY_SOURCE=2\"\n\nRUN yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && yum clean all && rm -rf /var/cache/yum\nRUN yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm && yum clean all && rm -rf /var/cache/yum\nRUN yum -y install centos-release-scl && yum clean all && rm -rf /var/cache/yum\n\nRUN yum -y install git meson ninja-build autoconf automake libtool patch \\\n\tfontconfig-devel freetype-devel libX11-devel at-spi2-core-devel alsa-lib-devel \\\n\tpulseaudio-libs-devel mesa-libGL-devel mesa-libEGL-devel mesa-libgbm-devel \\\n\tlibdrm-devel gtk3-devel \\\n\tperl-XML-Parser pkgconfig bison yasm file which xorg-x11-util-macros \\\n\tdevtoolset-10-make devtoolset-10-gcc devtoolset-10-gcc-c++ \\\n\tdevtoolset-10-binutils llvm-toolset-7.0 llvm-toolset-7.0-clang-devel \\\n\tllvm-toolset-7.0-llvm-devel && yum clean all && rm -rf /var/cache/yum\n\n# Fix a bug with argument naming in CentOS 7 glibc\nRUN sed -i 's/char \\*__block/char */' /usr/include/unistd.h\n\nSHELL [ \"bash\", \"-c\", \". /opt/rh/devtoolset-10/enable; exec bash -c \\\"$@\\\"\", \"-s\"]\n\nENV LibrariesPath /usr/src/Libraries\nWORKDIR $LibrariesPath\n\nRUN mkdir /opt/cmake\nRUN curl -f -sSLo $CMAKE_FILE $GIT/Kitware/CMake/releases/download/v$CMAKE_VER/$CMAKE_FILE\nRUN sh $CMAKE_FILE --prefix=/opt/cmake --skip-license\nRUN ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake\nRUN rm $CMAKE_FILE\n\nFROM builder AS patches\nRUN git clone $GIT/desktop-app/patches.git && cd patches && git checkout 1206363d59\n\nFROM builder AS libffi\nRUN git clone -b v3.4.2 --depth=1 $GIT/libffi/libffi.git\n\nWORKDIR libffi\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-docs\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libffi-cache\" install\n\nWORKDIR ..\nRUN rm -rf libffi\n\nFROM builder AS zlib\nRUN git clone -b v1.2.11 --depth=1 $GIT/madler/zlib.git\n\nWORKDIR zlib\nRUN CFLAGS=\"-O3 $HFLAGS\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/zlib-cache\" install\n\nWORKDIR ..\nRUN rm -rf zlib\n\nFROM builder AS xz\nRUN git clone -b v5.2.5 https://git.tukaani.org/xz.git\n\nWORKDIR xz\nRUN CFLAGS=\"$HFLAGS\" \\\n\tcmake -GNinja -B build . -DCMAKE_BUILD_TYPE=Release\nRUN cmake --build build --parallel\nRUN DESTDIR=\"$LibrariesPath/xz-cache\" cmake --install build\n\nWORKDIR ..\nRUN rm -rf xz\n\nFROM patches AS libepoxy\nRUN git clone -b 1.5.9 --depth=1 $GIT/anholt/libepoxy.git\n\nWORKDIR libepoxy\nRUN git apply ../patches/libepoxy.patch\nRUN meson build \\\n\t--buildtype=release \\\n\t--default-library=both \\\n\t-Dtests=false\n\nRUN meson compile -C build\nRUN DESTDIR=\"$LibrariesPath/libepoxy-cache\" meson install -C build\n\nWORKDIR ..\nRUN rm -rf libepoxy\n\nFROM patches AS libproxy\nRUN git clone -b 0.4.17 --depth=1 $GIT/libproxy/libproxy.git\n\nWORKDIR libproxy\nRUN git apply ../patches/libproxy.patch\nRUN CFLAGS=\"$HFLAGS\" CXXFLAGS=\"$HFLAGS\" cmake -GNinja -B build . \\\n\t-DCMAKE_BUILD_TYPE=Release \\\n\t-DWITH_DBUS=OFF \\\n\t-DWITH_NM=OFF \\\n\t-DWITH_NMold=OFF\n\nRUN cmake --build build --parallel\nRUN DESTDIR=\"$LibrariesPath/libproxy-cache\" cmake --install build\n\nWORKDIR ..\nRUN rm -rf libproxy\n\nFROM builder AS mozjpeg\nRUN git clone -b v4.0.3 --depth=1 $GIT/mozilla/mozjpeg.git\n\nWORKDIR mozjpeg\nRUN CFLAGS=\"$HFLAGS\" cmake -GNinja -B build . \\\n\t-DCMAKE_BUILD_TYPE=Release \\\n\t-DCMAKE_INSTALL_PREFIX=/usr/local \\\n\t-DWITH_JPEG8=ON \\\n\t-DPNG_SUPPORTED=OFF\n\nRUN cmake --build build --parallel\nRUN DESTDIR=\"$LibrariesPath/mozjpeg-cache\" cmake --install build\n\nWORKDIR ..\nRUN rm -rf mozjpeg\n\nFROM builder AS opus\nRUN git clone -b v1.3.1 --depth=1 $GIT/xiph/opus.git\n\nWORKDIR opus\nRUN ./autogen.sh\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/opus-cache\" install\n\nWORKDIR ..\nRUN rm -rf opus\n\nFROM builder AS libvpx\nRUN git clone -b v1.11.0 --depth=1 $GIT/webmproject/libvpx.git\n\nWORKDIR libvpx\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t--disable-examples \\\n\t--disable-unit-tests \\\n\t--disable-tools \\\n\t--disable-docs \\\n\t--enable-vp8 \\\n\t--enable-vp9 \\\n\t--enable-webm-io\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libvpx-cache\" install\n\nWORKDIR ..\nRUN rm -rf libvpx\n\nFROM builder AS rnnoise\nRUN git clone -b master --depth=1 $GIT/desktop-app/rnnoise\n\nWORKDIR rnnoise\nRUN CFLAGS=\"$HFLAGS\" cmake -GNinja -B build . \\\n\t-DCMAKE_BUILD_TYPE=Release\n\nRUN cmake --build build --parallel\nRUN mkdir -p \"$LibrariesPath/rnnoise-cache/usr/local/include\"\nRUN cp \"include/rnnoise.h\" \"$LibrariesPath/rnnoise-cache/usr/local/include/\"\nRUN mkdir -p \"$LibrariesPath/rnnoise-cache/usr/local/lib\"\nRUN cp \"build/librnnoise.a\" \"$LibrariesPath/rnnoise-cache/usr/local/lib/\"\n\nWORKDIR ..\nRUN rm -rf rnnoise\n\nFROM builder AS xcb-proto\nRUN git clone -b xcb-proto-1.14.1 --depth=1 $GIT_FREEDESKTOP/xcbproto.git\n\nWORKDIR xcbproto\nRUN ./autogen.sh\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/xcb-proto-cache\" install\n\nWORKDIR ..\nRUN rm -rf xcbproto\n\nFROM builder AS xcb\nCOPY --from=xcb-proto ${LibrariesPath}/xcb-proto-cache /\n\nRUN git clone -b libxcb-1.14 --depth=1 $GIT_FREEDESKTOP/libxcb.git\n\nWORKDIR libxcb\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/xcb-cache\" install\n\nWORKDIR ..\nRUN rm -rf libxcb\n\nFROM builder AS xcb-wm\n\nRUN git clone -b 0.4.1 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-wm.git\n\nWORKDIR libxcb-wm\nRUN ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/xcb-wm-cache\" install\n\nFROM builder AS xcb-util\n\nRUN git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-util.git\n\nWORKDIR libxcb-util\nRUN ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/xcb-util-cache\" install\n\nFROM builder AS xcb-image\nCOPY --from=xcb-util ${LibrariesPath}/xcb-util-cache /\n\nRUN git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-image.git\n\nWORKDIR libxcb-image\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/xcb-image-cache\" install\n\nFROM builder AS xcb-keysyms\n\nRUN git clone -b 0.4.0 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-keysyms.git\n\nWORKDIR libxcb-keysyms\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/xcb-keysyms-cache\" install\n\nFROM builder AS xcb-render-util\n\nRUN git clone -b 0.3.9 --depth=1 --recursive $GIT_FREEDESKTOP/libxcb-render-util.git\n\nWORKDIR libxcb-render-util\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/xcb-render-util-cache\" install\n\nFROM builder AS libXext\nRUN git clone -b libXext-1.3.4 --depth=1 $GIT_FREEDESKTOP/libxext.git\n\nWORKDIR libxext\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libXext-cache\" install\n\nWORKDIR ..\nRUN rm -rf libxext\n\nFROM builder AS libXtst\nRUN git clone -b libXtst-1.2.3 --depth=1 $GIT_FREEDESKTOP/libxtst.git\n\nWORKDIR libxtst\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libXtst-cache\" install\n\nWORKDIR ..\nRUN rm -rf libxtst\n\nFROM builder AS libXfixes\nRUN git clone -b libXfixes-5.0.3 --depth=1 $GIT_FREEDESKTOP/libxfixes.git\n\nWORKDIR libxfixes\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libXfixes-cache\" install\n\nWORKDIR ..\nRUN rm -rf libxfixes\n\nFROM builder AS libXrandr\nRUN git clone -b libXrandr-1.5.2 --depth=1 $GIT_FREEDESKTOP/libxrandr.git\n\nWORKDIR libxrandr\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libXrandr-cache\" install\n\nWORKDIR ..\nRUN rm -rf libxrandr\n\nFROM builder AS libXrender\nRUN git clone -b libXrender-0.9.10 --depth=1 $GIT_FREEDESKTOP/libxrender.git\n\nWORKDIR libxrender\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libXrender-cache\" install\n\nWORKDIR ..\nRUN rm -rf libxrender\n\nFROM builder AS libXdamage\nRUN git clone -b libXdamage-1.1.5 --depth=1 $GIT_FREEDESKTOP/libxdamage.git\n\nWORKDIR libxdamage\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libXdamage-cache\" install\n\nWORKDIR ..\nRUN rm -rf libxdamage\n\nFROM builder AS libXcomposite\nRUN git clone -b libXcomposite-0.4.5 --depth=1 $GIT_FREEDESKTOP/libxcomposite.git\n\nWORKDIR libxcomposite\nRUN CFLAGS=\"-g -O2 $HFLAGS\" ./autogen.sh --enable-static\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libXcomposite-cache\" install\n\nWORKDIR ..\nRUN rm -rf libxcomposite\n\nFROM builder AS wayland\nCOPY --from=libffi ${LibrariesPath}/libffi-cache /\n\nRUN git clone -b 1.20.0 --depth=1 $GIT_FREEDESKTOP/wayland.git\n\nWORKDIR wayland\nRUN meson build \\\n\t--buildtype=release \\\n\t--default-library=both \\\n\t-Dtests=false \\\n\t-Ddocumentation=false \\\n\t-Ddtd_validation=false \\\n\t-Dicon_directory=/usr/share/icons\n\nRUN meson compile -C build\nRUN DESTDIR=\"$LibrariesPath/wayland-cache\" meson install -C build\n\nWORKDIR ..\nRUN rm -rf wayland\n\nFROM builder AS ffmpeg\n\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nCOPY --from=libvpx ${LibrariesPath}/libvpx-cache /\n\nRUN mkdir ffmpeg\nWORKDIR ffmpeg\nRUN git init\nRUN git remote add origin $GIT/FFmpeg/FFmpeg.git\nRUN git fetch --depth=1 origin cc33e73618a981de7fd96385ecb34719de031f16\nRUN git reset --hard FETCH_HEAD\n\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t--extra-cflags=\"-DCONFIG_SAFE_BITSTREAM_READER=1 $HFLAGS\" \\\n\t--extra-cxxflags=\"-DCONFIG_SAFE_BITSTREAM_READER=1 $HFLAGS\" \\\n\t--disable-debug \\\n\t--disable-programs \\\n\t--disable-doc \\\n\t--disable-network \\\n\t--disable-autodetect \\\n\t--disable-everything \\\n\t--enable-libopus \\\n\t--enable-libvpx \\\n\t--enable-protocol=file \\\n\t--enable-decoder=aac \\\n\t--enable-decoder=aac_fixed \\\n\t--enable-decoder=aac_latm \\\n\t--enable-decoder=aasc \\\n\t--enable-decoder=alac \\\n\t--enable-decoder=flac \\\n\t--enable-decoder=gif \\\n\t--enable-decoder=h264 \\\n\t--enable-decoder=hevc \\\n\t--enable-decoder=libvpx_vp8 \\\n\t--enable-decoder=libvpx_vp9 \\\n\t--enable-decoder=mp1 \\\n\t--enable-decoder=mp1float \\\n\t--enable-decoder=mp2 \\\n\t--enable-decoder=mp2float \\\n\t--enable-decoder=mp3 \\\n\t--enable-decoder=mp3adu \\\n\t--enable-decoder=mp3adufloat \\\n\t--enable-decoder=mp3float \\\n\t--enable-decoder=mp3on4 \\\n\t--enable-decoder=mp3on4float \\\n\t--enable-decoder=mpeg4 \\\n\t--enable-decoder=msmpeg4v2 \\\n\t--enable-decoder=msmpeg4v3 \\\n\t--enable-decoder=opus \\\n\t--enable-decoder=pcm_alaw \\\n\t--enable-decoder=pcm_f32be \\\n\t--enable-decoder=pcm_f32le \\\n\t--enable-decoder=pcm_f64be \\\n\t--enable-decoder=pcm_f64le \\\n\t--enable-decoder=pcm_lxf \\\n\t--enable-decoder=pcm_mulaw \\\n\t--enable-decoder=pcm_s16be \\\n\t--enable-decoder=pcm_s16be_planar \\\n\t--enable-decoder=pcm_s16le \\\n\t--enable-decoder=pcm_s16le_planar \\\n\t--enable-decoder=pcm_s24be \\\n\t--enable-decoder=pcm_s24daud \\\n\t--enable-decoder=pcm_s24le \\\n\t--enable-decoder=pcm_s24le_planar \\\n\t--enable-decoder=pcm_s32be \\\n\t--enable-decoder=pcm_s32le \\\n\t--enable-decoder=pcm_s32le_planar \\\n\t--enable-decoder=pcm_s64be \\\n\t--enable-decoder=pcm_s64le \\\n\t--enable-decoder=pcm_s8 \\\n\t--enable-decoder=pcm_s8_planar \\\n\t--enable-decoder=pcm_u16be \\\n\t--enable-decoder=pcm_u16le \\\n\t--enable-decoder=pcm_u24be \\\n\t--enable-decoder=pcm_u24le \\\n\t--enable-decoder=pcm_u32be \\\n\t--enable-decoder=pcm_u32le \\\n\t--enable-decoder=pcm_u8 \\\n\t--enable-decoder=pcm_zork \\\n\t--enable-decoder=vorbis \\\n\t--enable-decoder=wavpack \\\n\t--enable-decoder=wmalossless \\\n\t--enable-decoder=wmapro \\\n\t--enable-decoder=wmav1 \\\n\t--enable-decoder=wmav2 \\\n\t--enable-decoder=wmavoice \\\n\t--enable-encoder=libopus \\\n\t--enable-parser=aac \\\n\t--enable-parser=aac_latm \\\n\t--enable-parser=flac \\\n\t--enable-parser=h264 \\\n\t--enable-parser=hevc \\\n\t--enable-parser=mpeg4video \\\n\t--enable-parser=mpegaudio \\\n\t--enable-parser=opus \\\n\t--enable-parser=vorbis \\\n\t--enable-demuxer=aac \\\n\t--enable-demuxer=flac \\\n\t--enable-demuxer=gif \\\n\t--enable-demuxer=h264 \\\n\t--enable-demuxer=hevc \\\n\t--enable-demuxer=matroska \\\n\t--enable-demuxer=m4v \\\n\t--enable-demuxer=mov \\\n\t--enable-demuxer=mp3 \\\n\t--enable-demuxer=ogg \\\n\t--enable-demuxer=wav \\\n\t--enable-muxer=ogg \\\n\t--enable-muxer=opus\n\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/ffmpeg-cache\" install\n\nFROM builder AS openal\nADD https://api.github.com/repos/telegramdesktop/openal-soft/git/refs/heads/fix_pulse_default openal-soft-version.json\nRUN git clone -b fix_pulse_default --depth=1 $GIT/telegramdesktop/openal-soft.git\n\nWORKDIR openal-soft\nRUN CFLAGS=\"$HFLAGS\" CXXFLAGS=\"$HFLAGS\" cmake -GNinja -B build . \\\n\t-DCMAKE_BUILD_TYPE=Release \\\n\t-DLIBTYPE:STRING=STATIC \\\n\t-DALSOFT_EXAMPLES=OFF \\\n\t-DALSOFT_TESTS=OFF \\\n\t-DALSOFT_UTILS=OFF \\\n\t-DALSOFT_CONFIG=OFF\n\nRUN cmake --build build --parallel\nRUN DESTDIR=\"$LibrariesPath/openal-cache\" cmake --install build\n\nWORKDIR ..\nRUN rm -rf openal\n\nFROM builder AS openssl\nENV opensslDir openssl_${OPENSSL_VER}\nRUN git clone -b OpenSSL_${OPENSSL_VER}-stable --depth=1 \\\n\t$GIT/openssl/openssl.git $opensslDir\n\nWORKDIR ${opensslDir}\nRUN ./config \\\n\t--prefix=\"$OPENSSL_PREFIX\" \\\n\t--openssldir=/etc/ssl \\\n\tno-tests \\\n\tno-dso\n\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/openssl-cache\" install_sw\n\nWORKDIR ..\nRUN rm -rf $opensslDir\n\nFROM builder AS xkbcommon\nCOPY --from=xcb ${LibrariesPath}/xcb-cache /\n\nRUN git clone -b xkbcommon-1.3.1 --depth=1 $GIT/xkbcommon/libxkbcommon.git\n\nWORKDIR libxkbcommon\nRUN meson build \\\n\t--buildtype=release \\\n\t--default-library=both \\\n\t-Denable-docs=false \\\n\t-Denable-wayland=false \\\n\t-Denable-xkbregistry=false \\\n\t-Dxkb-config-root=/usr/share/X11/xkb \\\n\t-Dxkb-config-extra-path=/etc/xkb \\\n\t-Dx-locale-root=/usr/share/X11/locale\n\nRUN meson compile -C build\nRUN DESTDIR=\"$LibrariesPath/xkbcommon-cache\" meson install -C build\n\nWORKDIR ..\nRUN rm -rf libxkbcommon\n\nFROM builder AS mm-common\nRUN git clone -b 1.0.3 --depth=1 $GIT/GNOME/mm-common.git\n\nWORKDIR mm-common\nRUN NOCONFIGURE=1 ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-network\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/mm-common-cache\" install\n\nWORKDIR ..\nRUN rm -rf mm-common\n\nFROM builder AS libsigcplusplus\nCOPY --from=mm-common ${LibrariesPath}/mm-common-cache /\n\nRUN git clone -b 2.10.7 --depth=1 $GIT/libsigcplusplus/libsigcplusplus.git\n\nWORKDIR libsigcplusplus\nENV ACLOCAL_PATH=\"/usr/local/share/aclocal\"\nRUN NOCONFIGURE=1 ./autogen.sh\nRUN CFLAGS=\"-g -O2 $HFLAGS\" CXXFLAGS=\"-g -O2 $HFLAGS\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-maintainer-mode --enable-static --disable-documentation\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/libsigcplusplus-cache\" install\n\nWORKDIR ..\nRUN rm -rf libsigcplusplus\n\nFROM patches AS glibmm\nCOPY --from=mm-common ${LibrariesPath}/mm-common-cache /\nCOPY --from=libsigcplusplus ${LibrariesPath}/libsigcplusplus-cache /\n\n# equals to glib version of Ubuntu 14.04\nRUN git clone -b 2.40.0 --depth=1 $GIT/GNOME/glibmm.git\n\nWORKDIR glibmm\nRUN git apply ../patches/glibmm.patch\nENV ACLOCAL_PATH=\"/usr/local/share/aclocal\"\nRUN NOCONFIGURE=1 ./autogen.sh\nRUN CC=\"gcc -flto $HFLAGS\" CXX=\"g++ -flto $HFLAGS\" AR=gcc-ar RANLIB=gcc-ranlib ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t--enable-maintainer-mode \\\n\t--enable-static \\\n\t--disable-documentation\n\nRUN make -j$(nproc)\nRUN make DESTDIR=\"$LibrariesPath/glibmm-cache\" install\n\nWORKDIR ..\nRUN rm -rf glibmm\n\nFROM patches AS qt\nARG QT6\n\nCOPY --from=libffi ${LibrariesPath}/libffi-cache /\nCOPY --from=zlib ${LibrariesPath}/zlib-cache /\nCOPY --from=libepoxy ${LibrariesPath}/libepoxy-cache /\nCOPY --from=libproxy ${LibrariesPath}/libproxy-cache /\nCOPY --from=mozjpeg ${LibrariesPath}/mozjpeg-cache /\nCOPY --from=xcb ${LibrariesPath}/xcb-cache /\nCOPY --from=xcb-wm ${LibrariesPath}/xcb-wm-cache /\nCOPY --from=xcb-util ${LibrariesPath}/xcb-util-cache /\nCOPY --from=xcb-image ${LibrariesPath}/xcb-image-cache /\nCOPY --from=xcb-keysyms ${LibrariesPath}/xcb-keysyms-cache /\nCOPY --from=xcb-render-util ${LibrariesPath}/xcb-render-util-cache /\nCOPY --from=wayland ${LibrariesPath}/wayland-cache /\nCOPY --from=openssl ${LibrariesPath}/openssl-cache /\nCOPY --from=xkbcommon ${LibrariesPath}/xkbcommon-cache /\n\nRUN [ -n \"${QT6}\" ] || git clone -b ${QT5_TAG} --depth=1 git://code.qt.io/qt/qt5.git qt_${QT5_VER}\nWORKDIR qt_${QT5_VER}\nRUN [ -n \"${QT6}\" ] || perl init-repository --module-subset=qtbase,qtwayland,qtimageformats,qtsvg\n\nWORKDIR qtbase\nRUN [ -n \"${QT6}\" ] || find ../../patches/qtbase_${QT5_VER} -type f -print0 | sort -z | xargs -r0 git apply\nWORKDIR ../qtwayland\nRUN [ -n \"${QT6}\" ] || find ../../patches/qtwayland_${QT5_VER} -type f -print0 | sort -z | xargs -r0 git apply\nWORKDIR ..\n\nRUN [ -n \"${QT6}\" ] || ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -prefix \"$QT5_PREFIX\" \\\n\t-release \\\n\t-force-debug-info \\\n\t-opensource \\\n\t-confirm-license \\\n\t-xcb \\\n\t-libproxy \\\n\t-qt-libpng \\\n\t-qt-harfbuzz \\\n\t-qt-pcre \\\n\t-no-icu \\\n\t-no-feature-xcb-sm \\\n\t-no-feature-wayland-server \\\n\t-no-feature-egl-extension-platform-wayland \\\n\t-static \\\n\t-dbus-runtime \\\n\t-openssl-linked \\\n\t-I \"$OPENSSL_PREFIX/include\" \\\n\tOPENSSL_LIBS=\"$OPENSSL_PREFIX/lib/libssl.a $OPENSSL_PREFIX/lib/libcrypto.a -lz -ldl -lpthread\" \\\n\tLIBPROXY_LIBS=\"-lproxy -ldl\" \\\n\t-nomake examples \\\n\t-nomake tests\n\nRUN [ -n \"${QT6}\" ] || make -j$(nproc)\nRUN [ -n \"${QT6}\" ] || make INSTALL_ROOT=\"$LibrariesPath/qt-cache\" install\n\nWORKDIR ..\nRUN [ -n \"${QT6}\" ] || rm -rf qt_${QT5_VER}\n\nRUN [ -z \"${QT6}\" ] || git clone -b ${QT6_TAG} --depth=1 git://code.qt.io/qt/qt5.git qt_${QT6_VER}\nWORKDIR qt_${QT6_VER}\nRUN [ -z \"${QT6}\" ] || perl init-repository --module-subset=qtbase,qtwayland,qtimageformats,qtsvg,qt5compat\n\nWORKDIR qtbase\nRUN [ -z \"${QT6}\" ] || find ../../patches/qtbase_${QT6_VER} -type f -print0 | sort -z | xargs -r0 git apply\nWORKDIR ../qtwayland\nRUN [ -z \"${QT6}\" ] || find ../../patches/qtwayland_${QT6_VER} -type f -print0 | sort -z | xargs -r0 git apply\nWORKDIR ../qt5compat\nRUN [ -z \"${QT6}\" ] || find ../../patches/qt5compat_${QT6_VER} -type f -print0 | sort -z | xargs -r0 git apply\nWORKDIR ..\n\nRUN [ -z \"${QT6}\" ] || ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -prefix \"$QT6_PREFIX\" \\\n\t-release \\\n\t-force-debug-info \\\n\t-opensource \\\n\t-confirm-license \\\n\t-libproxy \\\n\t-qt-libpng \\\n\t-qt-harfbuzz \\\n\t-qt-pcre \\\n\t-no-pch \\\n\t-no-icu \\\n\t-no-feature-xcb-sm \\\n\t-no-feature-highdpiscaling \\\n\t-static \\\n\t-dbus-runtime \\\n\t-openssl-linked \\\n\t-nomake examples \\\n\t-nomake tests \\\n\t-- \\\n\t-DINPUT_egl_extension_platform_wayland=no\n\nRUN [ -z \"${QT6}\" ] || cmake --build . --parallel\nRUN [ -z \"${QT6}\" ] || DESTDIR=\"$LibrariesPath/qt-cache\" cmake --install .\n\nWORKDIR ..\nRUN [ -z \"${QT6}\" ] || rm -rf qt_${QT6_VER}\n\nFROM patches AS breakpad\nRUN git clone https://chromium.googlesource.com/breakpad/breakpad.git\n\nWORKDIR breakpad\nRUN git checkout dfcb7b6799\nRUN git apply ../patches/breakpad.diff\nRUN git clone https://chromium.googlesource.com/linux-syscall-support.git src/third_party/lss\n\nWORKDIR src/third_party/lss\nRUN git checkout e1e7b0ad8e\n\nWORKDIR ../../..\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make -j$(nproc)\nRUN make DESTDIR=\"${LibrariesPath}/breakpad-cache\" install\n\nWORKDIR ..\n\nFROM builder AS webrtc\n\nCOPY --from=libepoxy ${LibrariesPath}/libepoxy-cache /\nCOPY --from=mozjpeg ${LibrariesPath}/mozjpeg-cache /\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nCOPY --from=libvpx ${LibrariesPath}/libvpx-cache /\nCOPY --from=ffmpeg ${LibrariesPath}/ffmpeg-cache /\nCOPY --from=openssl ${LibrariesPath}/openssl-cache /\nCOPY --from=libXtst ${LibrariesPath}/libXtst-cache /\n\n# Shallow clone on a specific commit.\nRUN mkdir tg_owt\nWORKDIR tg_owt\nRUN git init\nRUN git remote add origin $GIT/desktop-app/tg_owt.git\nRUN git fetch --depth=1 origin 347400dc2377b16be702397ff8db44d5739d2650\nRUN git reset --hard FETCH_HEAD\nRUN git submodule init\nRUN git submodule update\n\nWORKDIR src/third_party/pipewire\nRUN meson build -Dspa-plugins=disabled\n\nWORKDIR ../../..\n\nRUN cmake -G\"Ninja Multi-Config\" -B out . \\\n\t-DCMAKE_C_FLAGS_RELEASE=\"-O3 -DNDEBUG $HFLAGS\" \\\n\t-DCMAKE_C_FLAGS_DEBUG=\"-g $HFLAGS_DEBUG\" \\\n\t-DCMAKE_CXX_FLAGS_RELEASE=\"-O3 -DNDEBUG $HFLAGS\" \\\n\t-DCMAKE_CXX_FLAGS_DEBUG=\"-g $HFLAGS_DEBUG\" \\\n\t-DTG_OWT_SPECIAL_TARGET=linux \\\n\t-DTG_OWT_LIBJPEG_INCLUDE_PATH=/usr/local/include \\\n\t-DTG_OWT_OPENSSL_INCLUDE_PATH=$OPENSSL_PREFIX/include \\\n\t-DTG_OWT_OPUS_INCLUDE_PATH=/usr/local/include/opus \\\n\t-DTG_OWT_LIBVPX_INCLUDE_PATH=/usr/local/include \\\n\t-DTG_OWT_FFMPEG_INCLUDE_PATH=/usr/local/include\n\nRUN cmake --build out --config Release --parallel\nRUN cmake --build out --config Debug --parallel\n\nFROM builder\n\nCOPY --from=libffi ${LibrariesPath}/libffi-cache /\nCOPY --from=zlib ${LibrariesPath}/zlib-cache /\nCOPY --from=xz ${LibrariesPath}/xz-cache /\nCOPY --from=libepoxy ${LibrariesPath}/libepoxy-cache /\nCOPY --from=libproxy ${LibrariesPath}/libproxy-cache /\nCOPY --from=mozjpeg ${LibrariesPath}/mozjpeg-cache /\nCOPY --from=opus ${LibrariesPath}/opus-cache /\nCOPY --from=libvpx ${LibrariesPath}/libvpx-cache /\nCOPY --from=rnnoise ${LibrariesPath}/rnnoise-cache /\nCOPY --from=xcb ${LibrariesPath}/xcb-cache /\nCOPY --from=xcb-wm ${LibrariesPath}/xcb-wm-cache /\nCOPY --from=xcb-util ${LibrariesPath}/xcb-util-cache /\nCOPY --from=xcb-image ${LibrariesPath}/xcb-image-cache /\nCOPY --from=xcb-keysyms ${LibrariesPath}/xcb-keysyms-cache /\nCOPY --from=xcb-render-util ${LibrariesPath}/xcb-render-util-cache /\nCOPY --from=libXext ${LibrariesPath}/libXext-cache /\nCOPY --from=libXfixes ${LibrariesPath}/libXfixes-cache /\nCOPY --from=libXtst ${LibrariesPath}/libXtst-cache /\nCOPY --from=libXrandr ${LibrariesPath}/libXrandr-cache /\nCOPY --from=libXrender ${LibrariesPath}/libXrender-cache /\nCOPY --from=libXdamage ${LibrariesPath}/libXdamage-cache /\nCOPY --from=libXcomposite ${LibrariesPath}/libXcomposite-cache /\nCOPY --from=wayland ${LibrariesPath}/wayland-cache /\nCOPY --from=ffmpeg ${LibrariesPath}/ffmpeg ffmpeg\nCOPY --from=ffmpeg ${LibrariesPath}/ffmpeg-cache /\nCOPY --from=openal ${LibrariesPath}/openal-cache /\nCOPY --from=openssl ${LibrariesPath}/openssl-cache /\nCOPY --from=xkbcommon ${LibrariesPath}/xkbcommon-cache /\nCOPY --from=libsigcplusplus ${LibrariesPath}/libsigcplusplus-cache /\nCOPY --from=glibmm ${LibrariesPath}/glibmm-cache /\nCOPY --from=qt ${LibrariesPath}/qt-cache /\nCOPY --from=breakpad ${LibrariesPath}/breakpad breakpad\nCOPY --from=breakpad ${LibrariesPath}/breakpad-cache /\nCOPY --from=webrtc ${LibrariesPath}/tg_owt tg_owt\n\nWORKDIR ../tdesktop\nVOLUME [ \"/usr/src/tdesktop\" ]\nCMD [ \"/usr/src/tdesktop/Telegram/build/docker/centos_env/build.sh\" ]\n"
}