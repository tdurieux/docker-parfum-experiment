{
  "startTime": 1674219027031,
  "endTime": 1674219027574,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Base root container on cuda/cudnn enabled image\nFROM orchest/kernel-py:2.5.2-gpu\n\n# --------------------------------------------------\n# All lines below are the same for all base-kernel-* images that we\n# have. Due to how Docker works we sadly have to copy it into every\n# Dockerfile (instead of a DRY solution), you can read more here:\n# https://github.com/moby/moby/issues/3378\n# --------------------------------------------------\nUSER root\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends default-libmysqlclient-dev sudo -y && rm -rf /var/lib/apt/lists/*;\n\nRUN passwd -d $NB_USER \\\n    # Enable `sudo` for the $NB_USER by default.\n    && echo \"$NB_USER   ALL=(ALL)   NOPASSWD:ALL\" | tee /etc/sudoers.d/$NB_USER \\\n    # Persist the value of `DEBIAN_FRONTEND` when running with `sudo`,\n    # so that installing packages works as expected.\n    && echo \"Defaults env_keep += \\\"DEBIAN_FRONTEND\\\"\" | tee --append /etc/sudoers.d/$NB_USER \\\n    # All files in this directory should be mode 0440.\n    && chmod 0440 /etc/sudoers.d/$NB_USER\n\n# Get all requirements in place.\nCOPY ./runnable-shared/runner/requirements* /orchest/services/base-images/runnable-shared/runner/\nCOPY ./lib/python /orchest/lib/python\nCOPY ./orchest-sdk /orchest/orchest-sdk\nRUN chown $NB_USER -R /orchest/orchest-sdk \\\n    && chown $NB_USER -R /orchest/lib\n\nUSER $NB_USER\n\n# Install requirements on base environment\nWORKDIR /orchest/services/base-images/runnable-shared/runner\nRUN pip install --no-cache-dir -r requirements-user.txt\n\n# Install Orchest dependencies in our own environment so they are\n# completely isolated from user dependencies. Use a venv instead\n# of conda environment because it is much smaller.\nRUN python -m venv /home/$NB_USER/venv \\\n    && source /home/$NB_USER/venv/bin/activate \\\n    && pip install --no-cache-dir -r requirements.txt --no-cache \\\n    && deactivate\n\n# Empty configuration file for kernel initialization\nRUN touch /home/jovyan/.orchestrc\n\n# Get application files.\nCOPY ./runnable-shared/runner /orchest/services/base-images/runnable-shared/runner\n\n# This path is searched first to locate kernels. Without this variable\n# Jupyter will search inside the orchestdependencies environment first\n# and end up using the wrong executable to start the kernel.\nENV JUPYTER_PATH=/opt/conda/share/jupyter\nENV HOME=/home/$NB_USER\nENV BASH_ENV=/home/jovyan/.orchestrc\n\n# Environment variable that can be set to specify the conda environment\n# to use to start Jupyter kernels.\nENV CONDA_ENV=\"base\"\n\nARG ORCHEST_VERSION\nENV ORCHEST_VERSION=${ORCHEST_VERSION}\n\n# Set a default renderer for plotly that actually renders in JupyterLab.\nENV PLOTLY_RENDERER=\"iframe\"\n\nCOPY ./runnable-shared/bootscript.sh /orchest/bootscript.sh\nCMD [ \"/orchest/bootscript.sh\" ]\n"
}