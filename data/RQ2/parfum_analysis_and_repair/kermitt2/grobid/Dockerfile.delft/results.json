{
  "startTime": 1674254077073,
  "endTime": 1674254078025,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 7,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Docker GROBID image using deep learning models and/or CRF models\n\n## See https://grobid.readthedocs.io/en/latest/Grobid-docker/\n\n## usage example with version 0.7.1-SNAPSHOT:\n## docker build -t grobid/grobid:0.7.1-SNAPSHOT --build-arg GROBID_VERSION=0.7.1-SNAPSHOT --file Dockerfile.delft .\n\n## no GPU:\n## docker run -t --rm --init -p 8070:8070 -p 8071:8071 -v /home/lopez/grobid/grobid-home/config/grobid.properties:/opt/grobid/grobid-home/config/grobid.properties:ro  grobid/grobid:0.7.1-SNAPSHOT\n\n## allocate all available GPUs (only Linux with proper nvidia driver installed on host machine):\n## docker run --rm --gpus all --init -p 8070:8070 -p 8071:8071 -v /home/lopez/obid/grobid-home/config/grobid.properties:/opt/grobid/grobid-home/config/grobid.properties:ro  grobid/grobid:0.7.1-SNAPSHOT\n\n# -------------------\n# build builder image\n# -------------------\n\nFROM openjdk:8u275-jdk as builder\n\nUSER root\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install unzip && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /opt/grobid-source\n\n# gradle\nCOPY gradle/ ./gradle/\nCOPY gradlew ./\nCOPY gradle.properties ./\nCOPY build.gradle ./\nCOPY settings.gradle ./\n\n# source\nCOPY grobid-home/ ./grobid-home/\nCOPY grobid-core/ ./grobid-core/\nCOPY grobid-service/ ./grobid-service/\nCOPY grobid-trainer/ ./grobid-trainer/\n\n# cleaning unused native libraries before packaging\nRUN rm -rf grobid-home/pdf2xml\nRUN rm -rf grobid-home/pdfalto/lin-32\nRUN rm -rf grobid-home/pdfalto/mac-64\nRUN rm -rf grobid-home/pdfalto/win-*\nRUN rm -rf grobid-home/lib/lin-32\nRUN rm -rf grobid-home/lib/win-*\nRUN rm -rf grobid-home/lib/mac-64\n\nRUN ./gradlew clean assemble --no-daemon  --info --stacktrace\n\nWORKDIR /opt/grobid\nRUN unzip -o /opt/grobid-source/grobid-service/build/distributions/grobid-service-*.zip && \\\n    mv grobid-service* grobid-service\nRUN unzip -o /opt/grobid-source/grobid-home/build/distributions/grobid-home-*.zip && \\\n    chmod -R 755 /opt/grobid/grobid-home/pdfalto\nRUN rm -rf grobid-source\n\n# -------------------\n# build runtime image\n# -------------------\n\n# use NVIDIA Container Toolkit to automatically recognize possible GPU drivers on the host machine\nFROM tensorflow/tensorflow:2.7.0-gpu\n#CMD nvidia-smi\n\n# setting locale is likely useless but to be sure\nENV LANG C.UTF-8\n\n# install JRE 8, python and other dependencies\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install apt-utils build-essential gcc libxml2 libfontconfig unzip curl \\\n    openjdk-8-jre-headless ca-certificates-java \\\n    musl gfortran \\\n    python3 python3-pip python3-setuptools python3-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt/grobid\n\nCOPY --from=builder /opt/grobid .\n\nRUN python3 -m pip install pip --upgrade\n\n# install DeLFT via pypi\nRUN pip3 install --no-cache-dir requests delft==0.3.1\n# link the data directory to /data\n# the current working directory will most likely be /opt/grobid\nRUN mkdir -p /data \\\n    && ln -s /data /opt/grobid/data \\\n    && ln -s /data ./data\n\n# disable python warnings (and fix logging)\nENV PYTHONWARNINGS=\"ignore\"\n\nWORKDIR /opt/grobid\n\nENV JAVA_OPTS=-Xmx4g\n\n# Add Tini\nENV TINI_VERSION v0.18.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"-s\", \"--\"]\n\n#RUN chmod -R 755 /opt/grobid/grobid-home/pdf2xml\n#RUN chmod 777 /opt/grobid/grobid-home/tmp\n\n# install jep (and temporarily the matching JDK)\nENV TEMP_JDK_HOME=/tmp/jdk-${JAVA_VERSION}\nENV JDK_URL=https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-x64_linux_8u212b04.tar.gz\nRUN curl --fail --show-error --location -q ${JDK_URL} -o /tmp/openjdk.tar.gz \\\n    && ls -lh /tmp/openjdk.tar.gz \\\n    && mkdir - \"${TEMP_JDK_HOME}\" \\\n    && tar --extract \\\n        --file /tmp/openjdk.tar.gz \\\n        --directory \"${TEMP_JDK_HOME}\" \\\n        --strip-components 1 \\\n        --no-same-owner \\\n    && JAVA_HOME=${TEMP_JDK_HOME} pip3 --no-cache-dir install jep==4.0.2 \\\n    && rm -f /tmp/openjdk.tar.gz \\\n    && rm -rf \"${TEMP_JDK_HOME}\"\nENV LD_LIBRARY_PATH=/usr/local/lib/python3.8/dist-packages/jep:${LD_LIBRARY_PATH}\n# remove libjep.so because we are providng our own version in the virtual env\nRUN rm /opt/grobid/grobid-home/lib/lin-64/jep/libjep.so\n\n# preload embeddings, for GROBID all the RNN models use glove-840B (default for the script), ELMo is currently not loaded\n# to be done: mechanism to download GROBID fine-tuned models based on SciBERT if selected\n\nCOPY --from=builder /opt/grobid-source/grobid-home/scripts/preload_embeddings.py .\nCOPY --from=builder /opt/grobid-source/grobid-home/config/resources-registry.json .\nRUN python3 preload_embeddings.py --registry ./resources-registry.json\nRUN ln -s /opt/grobid /opt/delft\n\nRUN mkdir delft\nRUN cp ./resources-registry.json delft/\n\nCMD [\"./grobid-service/bin/grobid-service\"]\n\nARG GROBID_VERSION\n\nLABEL \\\n    authors=\"The contributors\" \\\n    org.label-schema.name=\"GROBID\" \\\n    org.label-schema.description=\"Image with GROBID service\" \\\n    org.label-schema.url=\"https://github.com/kermitt2/grobid\" \\\n    org.label-schema.version=${GROBID_VERSION}\n"
}