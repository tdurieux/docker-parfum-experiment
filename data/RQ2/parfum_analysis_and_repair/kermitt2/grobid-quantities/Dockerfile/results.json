{
  "startTime": 1674221174523,
  "endTime": 1674221175481,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 140
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Docker GROBID-quantities image using deep learning models and/or CRF models, and various python modules\n## Borrowed from https://github.com/kermitt2/grobid/blob/master/Dockerfile.delft\n## See https://grobid.readthedocs.io/en/latest/Grobid-docker/\n\n## usage example with grobid: https://github.com/kermitt2/grobid/blob/master/Dockerfile.delft\n\n## docker build -t lfoppiano/grobid-quantities:0.7.0 --build-arg GROBID_VERSION=0.7.0 --file Dockerfile .\n\n## no GPU:\n## docker run -t --rm --init -p 8060:8060 -p 8061:8061 -v config.yml:/opt/grobid/grobid-quantities:ro  lfoppiano/grobid-quantities:0.7.1\n\n## allocate all available GPUs (only Linux with proper nvidia driver installed on host machine):\n## docker run --rm --gpus all --init -p 8072:8072 -p 8073:8073 -v grobid.yaml:/opt/grobid/grobid-home/config/grobid.yaml:ro  lfoppiano/grobid-superconductors:0.3.0-SNAPSHOT\n\n# -------------------\n# build builder image\n# -------------------\n\nFROM openjdk:8u275-jdk as builder\n\nUSER root\n\nRUN apt-key del 7fa2af80 && \\\n    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb && \\\n    dpkg -i cuda-keyring_1.0-1_all.deb && \\\n    apt-get update && \\\n    apt-get -y --no-install-recommends install apt-utils libxml2 git && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone https://github.com/kermitt2/grobid.git /opt/grobid-source && cd /opt/grobid-source && git checkout 0.7.1\nWORKDIR /opt/grobid-source\nCOPY gradle.properties .\n\nRUN git clone https://github.com/kermitt2/grobid-quantities.git ./grobid-quantities && cd grobid-quantities\nWORKDIR /opt/grobid-source/grobid-quantities\nCOPY gradle.properties .\n\n# Adjust config\nRUN sed -i '/#Docker-ignore-log-start/,/#Docker-ignore-log-end/d'  ./resources/config/config.yml\n\n# Preparing models\nRUN rm -rf /opt/grobid-source/grobid-home/models/*\n\nWORKDIR /opt/grobid-source/grobid-quantities\nRUN ./gradlew clean assemble --no-daemon  --info --stacktrace\n#RUN ./gradlew installScibert --no-daemon --info --stacktrace && rm -f /opt/grobid-source/grobid-home/models/*.zip\nRUN ./gradlew copyModels --no-daemon --info --stacktrace && rm -f /opt/grobid-source/grobid-home/models/*.tar.gz\n\n\nWORKDIR /opt\n\n# -------------------\n# build runtime image\n# -------------------\n\nFROM grobid/grobid:0.7.1 as runtime\n\n# setting locale is likely useless but to be sure\nENV LANG C.UTF-8\n\n# install JRE 8, python and other dependencies\nRUN apt-key del 7fa2af80 && \\\n    curl -f https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb -O cuda-keyring_1.0-1_all.deb && \\\n    dpkg -i cuda-keyring_1.0-1_all.deb && \\\n    rm /etc/apt/sources.list.d/cuda.list && \\\n    rm /etc/apt/sources.list.d/nvidia-ml.list\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install git wget && rm -rf /var/lib/apt/lists/*;\n#    apt-get -y remove python3.6 && \\\n#    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata && \\\n#    apt-get -y --no-install-recommends install git python3.7 python3.7-venv python3.7-dev python3.7-distutil\n\nWORKDIR /opt/grobid\n\nRUN mkdir -p /opt/grobid/grobid-quantities/resources/clearnlp/models /opt/grobid/grobid-quantities/resources/clearnlp/config\nCOPY --from=builder /opt/grobid-source/grobid-home/models ./grobid-home/models\nCOPY --from=builder /opt/grobid-source/grobid-quantities/build/libs/* ./grobid-quantities/\nCOPY --from=builder /opt/grobid-source/grobid-quantities/resources/config/config.yml ./grobid-quantities/\nCOPY --from=builder /opt/grobid-source/grobid-quantities/resources/clearnlp/config/* ./grobid-quantities/resources/clearnlp/config\nCOPY --from=builder /opt/grobid-source/grobid-quantities/resources/clearnlp/models/* ./grobid-quantities/resources/clearnlp/models\n\nVOLUME [\"/opt/grobid/grobid-home/tmp\"]\n\n# Install requirements\nWORKDIR /opt/grobid/grobid-quantities\n\nRUN sed -i 's/pythonVirtualEnv:.*/pythonVirtualEnv: /g' config.yml\nRUN sed -i 's/grobidHome:.*/grobidHome: ..\\/grobid-home/g' config.yml\n\n# JProfiler\n#RUN wget https://download-gcdn.ej-technologies.com/jprofiler/jprofiler_linux_12_0_2.tar.gz -P /tmp/ && \\\n#  tar -xzf /tmp/jprofiler_linux_12_0_2.tar.gz -C /usr/local &&\\\n#  rm /tmp/jprofiler_linux_12_0_2.tar.gz\n\nEXPOSE 8060 8061\n#EXPOSE 8080 8081\n\n#CMD [\"java\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005\", \"-jar\", \"grobid-superconductors/grobid-superconductors-0.2.1-SNAPSHOT-onejar.jar\", \"server\", \"grobid-superconductors/config.yml\"]\n#CMD [\"java\", \"-agentpath:/usr/local/jprofiler12.0.2/bin/linux-x64/libjprofilerti.so=port=8849\", \"-jar\", \"grobid-superconductors/grobid-superconductors-0.2.1-SNAPSHOT-onejar.jar\", \"server\", \"grobid-superconductors/config.yml\"]\nCMD [\"java\", \"-jar\", \"grobid-quantities-0.7.1-SNAPSHOT-onejar.jar\", \"server\", \"config.yml\"]\n\nARG GROBID_VERSION\n\n\nLABEL \\\n    authors=\"Luca Foppiano, Patrice Lopez\" \\\n    org.label-schema.name=\"grobid-quantities\" \\\n    org.label-schema.description=\"Docker image for grobid-quantities service\" \\\n    org.label-schema.url=\"https://github.com/kermitt2/grobid-quantities\" \\\n    org.label-schema.version=${GROBID_VERSION}\n\n\n## Docker tricks:\n\n# - remove all stopped containers\n# > docker rm $(docker ps -a -q)\n\n# - remove all unused images\n# > docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc)\n\n# - remove all untagged images\n# > docker rmi $(docker images | grep \"^<none>\" | awk \"{print $3}\")\n\n# - \"Cannot connect to the Docker daemon. Is the docker daemon running on this host?\"\n# > docker-machine restart\n\n"
}