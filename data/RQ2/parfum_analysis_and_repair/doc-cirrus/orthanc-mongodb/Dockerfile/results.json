{
  "startTime": 1674250237914,
  "endTime": 1674250239141,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 176
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 61,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Orthanc Docker image based on CentOS Linux\n#\n# Building the image:\n#\n#    $ docker build  -t orthanc .\n#\n# Running the container:\n#\n#  - The configuration file or directory should be mounted into the container\n#    and its path should to be specified as the last command line argument. If\n#    not specified, the default configuration is used. Default configuration\n#    file can be generated by 'Orthanc --config=orthanc.json'.\n#\n#    The plugin requires mongodb running please run the mongodb on host or in docker container\n#\n#     docker run --network host -d mongo\n#\n#    Sample config files are in the config folder.\n#\n# Run Orthanc server in docer example:\n#\n#   $ docker run \\\n#       --network host \\\n#       -v <config directory on host>:/etc/orthanc \\\n#       -it --rm \\\n#       orthanc \\\n#         /etc/orthanc\n#\n# ------------------------------------------------------------------------------\n\n# ==============================================================================\n# Build stage\n# ==============================================================================\n\nFROM centos:7 AS build\n\nARG CMAKE_VERSION=3.13.2\n\n# Default build type for each Orthanc component. Accepted values are \"Release\"\n# and \"Debug\". It can be overridden for each component, individually.\nARG ORTHANC_BUILD_TYPE=Release\n\n# Number of compilation jobs to run simultaneously\nARG JOBS=3\n\n# ------------------------------------------------------------------------------\n# Add locale support and set UTF-8 locale.\n# ------------------------------------------------------------------------------\n\nENV LANG en_US.UTF-8\n\n# ------------------------------------------------------------------------------\n# Compile Orthanc Core\n# ------------------------------------------------------------------------------\n\nARG ORTHANC_CORE_VERSION=1.5.0\nARG ORTHANC_CORE_BUILD_TYPE=${ORTHANC_BUILD_TYPE}\n\nRUN yum -y install centos-release-scl \\\n && yum -y install centos-release-scl-rh \\\n && yum -y install devtoolset-7 \\\n && yum -y install \\\n      libuuid-devel \\\n      openssl-devel \\\n      cyrus-sasl-devel \\\n      patch \\\n      unzip \\\n      python \\\n      curl-devel \\\n      dcmtk-devel \\\n      gtest-devel \\\n      jsoncpp-devel \\\n      libjpeg-devel \\\n      libpng-devel \\\n      sqlite-devel \\\n      lua-devel >= 5.1.0 \\\n      mongoose-devel \\\n      openssl-devel \\\n      pugixml-devel && rm -rf /var/cache/yum\n\nRUN curl -f -L --output cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz \\\n && tar xf cmake.tar.gz -C /usr --strip-components=1 && rm cmake.tar.gz\n\nRUN curl -f -L --output orthanc.tar.gz https://www.orthanc-server.com/downloads/get.php?path=/orthanc/Orthanc-${ORTHANC_CORE_VERSION}.tar.gz \\\n && mkdir orthanc orthanc-build \\\n && tar xf orthanc.tar.gz -C orthanc --strip-components=1 \\\n && cd orthanc-build \\\n && source /opt/rh/devtoolset-7/enable \\\n && cmake \\\n      -DCMAKE_BUILD_TYPE:STRING=${ORTHANC_CORE_BUILD_TYPE} \\\n      -DCMAKE_INSTALL_PREFIX:PATH=/install \\\n      -DSTANDALONE_BUILD:BOOL=ON \\\n      -DSTATIC_BUILD:BOOL=ON \\\n      -DALLOW_DOWNLOADS:BOOL=ON \\\n      -DUSE_SYSTEM_SQLITE:BOOL=OFF \\\n      -DUSE_SYSTEM_BOOST:BOOL=OFF \\\n      -DUSE_SYSTEM_CURL:BOOL=OFF \\\n      -DSYSTEM_MONGOOSE_USE_CALLBACKS:BOOL=OFF \\\n      -DUNIT_TESTS_WITH_HTTP_CONNEXIONS:BOOL=OFF \\\n      ../orthanc \\\n && make -j ${JOBS} \\\n && make install && rm orthanc.tar.gz\n\n# ------------------------------------------------------------------------------\n# Compile MongoDB plugin\n# ------------------------------------------------------------------------------\n\nARG ORTHANC_MONGODB_ENABLED=true\nARG ORTHANC_MONGODB_BUILD_TYPE=${ORTHANC_BUILD_TYPE}\n\nARG MONGO_C_DRIVER_VERSION=1.12.0\n\nRUN if ${ORTHANC_MONGODB_ENABLED} ; then \\\n    curl -f -L --output mongo-c-driver.tar.gz https://github.com/mongodb/mongo-c-driver/releases/download/${MONGO_C_DRIVER_VERSION}/mongo-c-driver-${MONGO_C_DRIVER_VERSION}.tar.gz \\\n && mkdir mongo-c-driver mongo-c-driver-build \\\n && tar xf mongo-c-driver.tar.gz -C mongo-c-driver --strip-components=1 \\\n && cd mongo-c-driver-build \\\n && source /opt/rh/devtoolset-7/enable \\\n && cmake \\\n      -DCMAKE_BUILD_TYPE=${ORTHANC_MONGODB_BUILD_TYPE} \\\n      -DCMAKE_CXX_FLAGS=\"-fPIC\" \\\n      -DCMAKE_INSTALL_PREFIX=/install \\\n      ../mongo-c-driver \\\n && make -j ${JOBS} \\\n && make install \\\n ; rm mongo-c-driver.tar.gzfi\n\nARG MONGO_CXX_DRIVER_VERSION=3.3.1\n\nRUN if ${ORTHANC_MONGODB_ENABLED} ; then \\\n    yum -y install git \\\n && curl -f -L --output mongo-cxx-driver.tar.gz https://github.com/mongodb/mongo-cxx-driver/archive/r${MONGO_CXX_DRIVER_VERSION}.tar.gz \\\n && mkdir mongo-cxx-driver mongo-cxx-driver-build \\\n && tar xf mongo-cxx-driver.tar.gz -C mongo-cxx-driver --strip-components=1 \\\n && cd mongo-cxx-driver-build \\\n && source /opt/rh/devtoolset-7/enable \\\n && cmake \\\n      -DCMAKE_BUILD_TYPE=${ORTHANC_MONGODB_BUILD_TYPE} \\\n      -DCMAKE_CXX_FLAGS=\"-fPIC\" \\\n      -DCMAKE_INSTALL_PREFIX=/install \\\n      -DLIBBSON_DIR=/install \\\n      -DLIBMONGOC_DIR=/install \\\n      ../mongo-cxx-driver \\\n && make -j ${JOBS} \\\n && make install \\\n ; rm -rf /var/cache/yum rm mongo-cxx-driver.tar.gzfi\n\nARG JSONCPP_VERSION=1.8.0\n\nRUN if ${ORTHANC_MONGODB_ENABLED} ; then \\\n    curl -f -L --output jsoncpp.tar.gz https://github.com/open-source-parsers/jsoncpp/archive/${JSONCPP_VERSION}.tar.gz \\\n && mkdir jsoncpp jsoncpp-build \\\n && tar xf jsoncpp.tar.gz -C jsoncpp --strip-components=1 \\\n && cd jsoncpp-build \\\n && source /opt/rh/devtoolset-7/enable \\\n && cmake \\\n      -DCMAKE_BUILD_TYPE:STRING=${ORTHANC_MONGODB_BUILD_TYPE} \\\n      -DCMAKE_CXX_FLAGS=\"-fPIC\" \\\n      -DCMAKE_INSTALL_PREFIX=/install \\\n      ../jsoncpp \\\n && make -j ${JOBS} \\\n && make install \\\n ; rm jsoncpp.tar.gzfi\n\nRUN  mkdir orthanc-mongodb orthanc-mongodb-build\n\nCOPY ./ orthanc-mongodb/\n\nRUN if ${ORTHANC_MONGODB_ENABLED} ; then \\\n cd orthanc-mongodb-build \\\n && source /opt/rh/devtoolset-7/enable \\\n && cmake \\\n      -DBUILD_TESTS:BOOL=OFF \\\n      -DCMAKE_BUILD_TYPE=${ORTHANC_MONGODB_BUILD_TYPE} \\\n      -DCMAKE_CXX_FLAGS=\"-fPIC\" \\\n      -DCMAKE_INSTALL_PREFIX=/install \\\n      -DCMAKE_PREFIX_PATH=\"/install\" \\\n      -DORTHANC_ROOT:PATH=/orthanc \\\n      ../orthanc-mongodb \\\n && make -j ${JOBS} \\\n# && ./IndexTest \\\n# && ./StorageTest \\\n && install libOrthancMongoDB{Index,Storage}.so /install/share/orthanc/plugins/ \\\n && strip /install/share/orthanc/plugins/* \\\n ; fi\n\n# ==============================================================================\n# Install stage\n# ==============================================================================\n\nFROM centos:7\n\n# ------------------------------------------------------------------------------\n# Add locale support and set UTF-8 locale.\n# ------------------------------------------------------------------------------\n\nENV LANG en_US.UTF-8\n\nCOPY --from=build /install/ /usr/\n\nEXPOSE 4242\nEXPOSE 8042\n\nENTRYPOINT [ \"Orthanc\" ]\n\n"
}