{
  "startTime": 1674248463673,
  "endTime": 1674248464805,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 15,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 45,
        "columnStart": 22,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG UBUNTU_VERSION=18.04\n\nARG ARCH=\nARG CUDA=10.1\nFROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\nARG ARCH\nARG CUDA\n#ARG CUDNN=8.0.4.30-1\nARG CUDNN=7.6.5.32-1\n\nARG CUDNN_MAJOR_VERSION=7\nARG LIB_DIR_PREFIX=x86_64\nARG LIBNVINFER=7.1.3-1\nARG LIBNVINFER_MAJOR_VERSION=7\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\n# Pick up some TF dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        libcublas10=10.2.1.243-1 \\\n        cuda-nvrtc-${CUDA/./-} \\\n        cuda-cufft-${CUDA/./-} \\\n        cuda-curand-${CUDA/./-} \\\n        cuda-cusolver-${CUDA/./-} \\\n        cuda-cusparse-${CUDA/./-} \\\n        curl \\\n        libcudnn7=${CUDNN}+cuda${CUDA} \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        software-properties-common \\\n        unzip \\\n        netbase && rm -rf /var/lib/apt/lists/*;\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\nENV LANG C.UTF-8\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    python3.8 \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN python3.8 -m pip --no-cache-dir install --upgrade \\\n    \"pip<20.3\" \\\n    setuptools\n\nCOPY requirements.txt /tmp\n# RUN cd /tmp && pipenv lock --requirements > requirements.txt\nRUN cd /tmp && pip install --no-cache-dir -r requirements.txt\nCOPY . /tmp/myapp\nRUN pip install --no-cache-dir /tmp/myapp\n\nADD https://github.com/ufoscout/docker-compose-wait/releases/download/2.7.3/wait /tmp/myapp/wait\nRUN chmod +x /tmp/myapp/wait\n#RUN groupadd -g 999 celery && \\\n#    useradd -r -u 999 -g celery celery\n#USER celery\n\nEXPOSE 5000\nWORKDIR /tmp/myapp\nCOPY envs/env.docker .env\n\nCMD alias python3=/usr/bin/python3.8\nENTRYPOINT [\"/tmp/myapp/docker-entrypoint.sh\"]"
}