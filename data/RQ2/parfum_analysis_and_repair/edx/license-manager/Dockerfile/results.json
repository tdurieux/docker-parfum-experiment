{
  "startTime": 1674249436651,
  "endTime": 1674249437995,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 0,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 29,
        "columnStart": 23,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic as app\nMAINTAINER devops@edx.org\n\n\n# Packages installed:\n# git; Used to pull in particular requirements from github rather than pypi,\n# and to check the sha of the code checkout.\n\n# language-pack-en locales; ubuntu locale support so that system utilities have a consistent\n# language and time zone.\n\n# python; ubuntu doesnt ship with python, so this is the python we will use to run the application\n\n# python3-pip; install pip to install application requirements.txt files\n\n# libssl-dev; # mysqlclient wont install without this.\n\n# libmysqlclient-dev; to install header files needed to use native C implementation for\n# MySQL-python for performance gains.\n\n# wget to download a watchman binary archive\n\n# unzip to unzip a watchman binary archive\n\n# If you add a package here please include a comment above describing what it is used for\nRUN apt-get update && \\\n apt-get install --no-install-recommends -y software-properties-common && \\\napt-add-repository -y ppa:deadsnakes/ppa && apt-get update && \\\napt-get upgrade -qy && apt-get install --no-install-recommends language-pack-en locales git \\\npython3.8-dev python3.8-venv libmysqlclient-dev libssl-dev build-essential wget unzip -qy && \\\nrm -rf /var/lib/apt/lists/*\n\nWORKDIR /tmp\nRUN wget https://packages.confluent.io/clients/deb/pool/main/libr/librdkafka/librdkafka_1.8.2.orig.tar.gz\nRUN tar -xf librdkafka_1.8.2.orig.tar.gz && rm librdkafka_1.8.2.orig.tar.gz\nWORKDIR /tmp/librdkafka-1.8.2\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && ldconfig\n\nENV VIRTUAL_ENV=/edx/app/license-manager/venvs/license-manager\nRUN python3.8 -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV DJANGO_SETTINGS_MODULE license_manager.settings.production\n\nEXPOSE 18170\nEXPOSE 18171\nRUN useradd -m --shell /bin/false app\n\n# Install watchman\nRUN wget https://github.com/facebook/watchman/releases/download/v2020.08.17.00/watchman-v2020.08.17.00-linux.zip\nRUN unzip watchman-v2020.08.17.00-linux.zip\nRUN mkdir -p /usr/local/{bin,lib} /usr/local/var/run/watchman\nRUN cp watchman-v2020.08.17.00-linux/bin/* /usr/local/bin\nRUN cp watchman-v2020.08.17.00-linux/lib/* /usr/local/lib\nRUN chmod 755 /usr/local/bin/watchman\nRUN chmod 2777 /usr/local/var/run/watchman\n\n# Now install license-manager\nWORKDIR /edx/app/license_manager\n\n# Copy the requirements explicitly even though we copy everything below\n# this prevents the image cache from busting unless the dependencies have changed.\nCOPY requirements/production.txt /edx/app/license_manager/requirements/production.txt\nCOPY requirements/pip.txt /edx/app/license_manager/requirements/pip.txt\n\n# Dependencies are installed as root so they cannot be modified by the application user.\nRUN pip install --no-cache-dir -r requirements/pip.txt\nRUN pip install --no-cache-dir -r requirements/production.txt\n\nRUN mkdir -p /edx/var/log\n\n# Code is owned by root so it cannot be modified by the application user.\n# So we copy it before changing users.\nUSER app\n\n# Gunicorn 19 does not log to stdout or stderr by default. Once we are past gunicorn 19, the logging to STDOUT need not be specified.\nCMD gunicorn --workers=2 --name license_manager -c /edx/app/license_manager/license_manager/docker_gunicorn_configuration.py --log-file - --max-requests=1000 license_manager.wsgi:application\n\n# This line is after the requirements so that changes to the code will not\n# bust the image cache\nCOPY . /edx/app/license_manager\n\nFROM app as newrelic\nRUN pip install --no-cache-dir newrelic\nCMD newrelic-admin run-program gunicorn --workers=2 --name license_manager -c /edx/app/license_manager/license_manager/docker_gunicorn_configuration.py --log-file - --max-requests=1000 license_manager.wsgi:application\n\n\nFROM app as devstack\nUSER root\nRUN pip install --no-cache-dir -r /edx/app/license_manager/requirements/dev.txt\nUSER app\nCMD gunicorn --reload --workers=2 --name license_manager -c /edx/app/license_manager/license_manager/docker_gunicorn_configuration.py --log-file - --max-requests=1000 license_manager.wsgi:application\n\n\nFROM app as legacy_devapp\n# Dev ports\nEXPOSE 18170\nEXPOSE 18171\nUSER root\nRUN pip install --no-cache-dir -r /edx/app/license_manager/requirements/dev.txt\nUSER app\nCMD gunicorn --reload --workers=2 --name license_manager -c /edx/app/license_manager/license_manager/docker_gunicorn_configuration.py --log-file - --max-requests=1000 license_manager.wsgi:application\n"
}