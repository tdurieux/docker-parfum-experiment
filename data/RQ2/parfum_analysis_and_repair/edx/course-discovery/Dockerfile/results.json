{
  "startTime": 1674215786223,
  "endTime": 1674215789441,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:focal as app\n\n# System requirements.\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && \\\n\tapt-get upgrade -qy\nRUN apt-get install --no-install-recommends --yes \\\n\tgit \\\n\tlanguage-pack-en \\\n\tpython3-venv \\\n\tpython3.8-dev \\\n\tpython3.8-venv \\\n\tbuild-essential \\\n\tlibffi-dev \\\n\tlibmysqlclient-dev \\\n\tlibxml2-dev \\\n\tlibxslt1-dev \\\n\tlibjpeg-dev \\\n\tlibssl-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN rm -rf /var/lib/apt/lists/*\n\nENV VIRTUAL_ENV=/venv\nRUN python3.8 -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\nRUN pip install --no-cache-dir pip==20.2.3 setuptools==50.3.0 nodeenv\n\n# Use UTF-8.\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# Make necessary directories and environment variables.\nRUN mkdir -p /edx/var/discovery/staticfiles\nRUN mkdir -p /edx/var/discovery/media\nENV DJANGO_SETTINGS_MODULE course_discovery.settings.production\n\n# Working directory will be root of repo.\nWORKDIR /edx/app/discovery\n\n# Copy just JS requirements and install them.\nCOPY package.json package.json\nCOPY package-lock.json package-lock.json\nRUN nodeenv /edx/app/nodeenv --node=16.14.2 --npm=8.5.x --prebuilt\nENV PATH /edx/app/nodeenv/bin:${PATH}\nRUN npm install --production && npm cache clean --force;\nCOPY bower.json bower.json\nRUN ./node_modules/.bin/bower install --allow-root --production\n\n# Copy just Python requirements & install them.\nCOPY requirements/ requirements/\nRUN pip install --no-cache-dir -r requirements/production.txt\n\n# Copy over rest of code.\n# We do this AFTER requirements so that the requirements cache isn't busted\n# every time any bit of code is changed.\nCOPY . .\n\n# Expose canonical Discovery port\nEXPOSE 8381\n\nCMD gunicorn --bind=0.0.0.0:8381 --workers 2 --max-requests=1000 -c course_discovery/docker_gunicorn_configuration.py course_discovery.wsgi:application\n\nFROM app as newrelic\nRUN pip install --no-cache-dir newrelic\nCMD newrelic-admin run-program gunicorn --bind=0.0.0.0:8381 --workers 2 --max-requests=1000 -c course_discovery/docker_gunicorn_configuration.py course_discovery.wsgi:application\n"
}