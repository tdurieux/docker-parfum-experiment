{
  "startTime": 1674256335394,
  "endTime": 1674256335963,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 0,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 38,
        "columnStart": 23,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal as base\nMAINTAINER devops@edx.org\n\n# Warning: This file is experimental.\n#\n# Short-term goals:\n# * Be a suitable replacement for the `edxops/credentials` image in devstack (in progress).\n# * Take advantage of Docker caching layers: aim to put commands in order of\n#   increasing cache-busting frequency.\n# * Related to ^, use no Ansible or Paver.\n# Long-term goal:\n# * Be a suitable base for production Credentials images. This may not yet be the case.\n\n# Packages installed:\n# git; Used to pull in particular requirements from github rather than pypi,\n# and to check the sha of the code checkout.\n\n# language-pack-en locales; ubuntu locale support so that system utilities have a consistent\n# language and time zone.\n\n# python; ubuntu doesnt ship with python, so this is the python we will use to run the application\n\n# python3-pip; install pip to install application requirements.txt files\n\n# libssl-dev; # mysqlclient wont install without this.\n\n# libmysqlclient-dev; to install header files needed to use native C implementation for\n# MySQL-python for performance gains.\n\n# wget to download a watchman binary archive\n\n# unzip to unzip a watchman binary archive\n\n# If you add a package here please include a comment above describing what it is used for\nRUN apt-get update && \\\n apt-get install --no-install-recommends -y software-properties-common && \\\napt-add-repository -y ppa:deadsnakes/ppa && apt-get update && \\\napt-get upgrade -qy && apt-get install --no-install-recommends language-pack-en locales git \\\npython3.8-dev python3.8-venv libmysqlclient-dev libssl-dev build-essential wget unzip -qy && \\\nrm -rf /var/lib/apt/lists/*\n\n# Create Python env\nENV VIRTUAL_ENV=/edx/app/credentials/venvs/credentials\nRUN python3.8 -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Create Node env\nRUN pip install --no-cache-dir nodeenv\nENV NODE_ENV=/edx/app/credentials/nodeenvs/credentials\nRUN nodeenv $NODE_ENV --node=16.14.0 --prebuilt\nENV PATH=\"$NODE_ENV/bin:$PATH\"\nRUN npm install -g npm@8.5.3 && npm cache clean --force;\n\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV DJANGO_SETTINGS_MODULE credentials.settings.production\n\nEXPOSE 18150\nRUN useradd -m --shell /bin/false app\n\n# Install watchman\nRUN wget https://github.com/facebook/watchman/releases/download/v2020.08.17.00/watchman-v2020.08.17.00-linux.zip\nRUN unzip watchman-v2020.08.17.00-linux.zip\nRUN mkdir -p /usr/local/{bin,lib} /usr/local/var/run/watchman\nRUN cp watchman-v2020.08.17.00-linux/bin/* /usr/local/bin\nRUN cp watchman-v2020.08.17.00-linux/lib/* /usr/local/lib\nRUN chmod 755 /usr/local/bin/watchman\nRUN chmod 2777 /usr/local/var/run/watchman\n\n# Now install credentials\nWORKDIR /edx/app/credentials/credentials\n\n# Copy the requirements explicitly even though we copy everything below\n# this prevents the image cache from busting unless the dependencies have changed.\nCOPY requirements/production.txt /edx/app/credentials/credentials/requirements/production.txt\nCOPY requirements/pip_tools.txt /edx/app/credentials/credentials/requirements/pip_tools.txt\n\n# Dependencies are installed as root so they cannot be modified by the application user.\nRUN pip install --no-cache-dir -r requirements/pip_tools.txt\nRUN pip install --no-cache-dir -r requirements/production.txt\n\nRUN mkdir -p /edx/var/log\n\n# Code is owned by root so it cannot be modified by the application user.\n# So we copy it before changing users.\nUSER app\n\n# Gunicorn 19 does not log to stdout or stderr by default. Once we are past gunicorn 19, the logging to STDOUT need not be specified.\nCMD gunicorn --workers=2 --name credentials -c /edx/app/credentials/credentials/credentials/docker_gunicorn_configuration.py --log-file - --max-requests=1000 credentials.wsgi:application\n\n# This line is after the requirements so that changes to the code will not\n# bust the image cache\nCOPY . /edx/app/credentials/credentials\n\n# We don't switch back to the app user for devstack because we need devstack users to be\n# able to update requirements and generally run things as root.\nFROM base as dev\nUSER root\nENV DJANGO_SETTINGS_MODULE credentials.settings.devstack\nRUN pip install --no-cache-dir -r /edx/app/credentials/credentials/requirements/dev.txt\n\n# Temporary compatibility hack while devstack is supporting\n# both the old `edxops/credentials` image and this image:\n# Add in a dummy ../credentials_env file.\n# The credentials_env file was originally needed for sourcing to get\n# environment variables like DJANGO_SETTINGS_MODULE, but now we just set\n# those variables right in the Dockerfile.\nRUN touch ../credentials_env\n\nCMD while true; do python ./manage.py runserver 0.0.0.0:18150; sleep 2; done\n"
}