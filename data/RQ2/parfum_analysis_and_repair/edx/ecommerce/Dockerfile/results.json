{
  "startTime": 1674253111311,
  "endTime": 1674253112427,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 4
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal as app\nMAINTAINER sre@edx.org\n\n# Packages installed:\n# git; Used to pull in particular requirements from github rather than pypi,\n# and to check the sha of the code checkout.\n\n# build-essentials; so we can use make with the docker container\n\n# language-pack-en locales; ubuntu locale support so that system utilities have a consistent\n# language and time zone.\n\n# python; ubuntu doesnt ship with python, so this is the python we will use to run the application\n\n# python3-pip; install pip to install application requirements.txt files\n\n# libmysqlclient-dev; to install header files needed to use native C implementation for\n# MySQL-python for performance gains.\n\n# libssl-dev; # mysqlclient wont install without this.\n\n# python3-dev; to install header files for python extensions; much wheel-building depends on this\n\n# gcc; for compiling python extensions distributed with python packages like mysql-client\n\n# If you add a package here please include a comment above describing what it is used for\nRUN apt-get update && apt-get -qy install --no-install-recommends \\\n language-pack-en \\\n locales \\\n python3.8 \\\n python3-pip \\\n libmysqlclient-dev \\\n libssl-dev \\\n python3-dev \\\n gcc \\\n build-essential \\\n git && rm -rf /var/lib/apt/lists/*;\n\n\nRUN pip install --no-cache-dir --upgrade pip setuptools\n# delete apt package lists because we do not need them inflating our image\nRUN rm -rf /var/lib/apt/lists/*\n\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV DJANGO_SETTINGS_MODULE ecommerce.settings.production\n\n# Env vars: configuration\nENV CONFIG_ROOT='/edx/etc'\nENV ECOMMERCE_CFG=\"$CONFIG_ROOT/ecommerce.yml\"\n\nEXPOSE 18130\nEXPOSE 18131\nRUN useradd -m --shell /bin/false app\n\n# Create config directory. Create, define, and switch to working directory.\nRUN mkdir -p \"$CONFIG_ROOT\"\nWORKDIR /edx/app/ecommerce\n\n# Copy the requirements explicitly even though we copy everything below\n# this prevents the image cache from busting unless the dependencies have changed.\nCOPY requirements/production.txt /edx/app/ecommerce/requirements/production.txt\n\n# Dependencies are installed as root so they cannot be modified by the application user.\nRUN pip install --no-cache-dir -r requirements/production.txt\n\n\nRUN mkdir -p /edx/var/log\n\n# Code is owned by root so it cannot be modified by the application user.\n# So we copy it before changing users.\nUSER app\n\n# Gunicorn 19 does not log to stdout or stderr by default. Once we are past gunicorn 19, the logging to STDOUT need not be specified.\nCMD gunicorn --workers=2 --name ecommerce -c /edx/app/ecommerce/ecommerce/docker_gunicorn_configuration.py --log-file - --max-requests=1000 ecommerce.wsgi:application\n\n\n# This line is after the requirements so that changes to the code will not\n# bust the image cache\nCOPY . /edx/app/ecommerce\n\n\n##################################################\nFROM app as newrelic\nRUN pip install --no-cache-dir newrelic\nCMD newrelic-admin run-program gunicorn --workers=2 --name ecommerce -c /edx/app/ecommerce/ecommerce/docker_gunicorn_configuration.py --log-file - --max-requests=1000 ecommerce.wsgi:application\n\n\n##################################################\nFROM app as ecommerce-docker\nARG ECOMMERCE_CFG_OVERRIDE\nRUN echo \"$ECOMMERCE_CFG_OVERRIDE\"\nENV ECOMMERCE_CFG=\"${ECOMMERCE_CFG_OVERRIDE:-$ECOMMERCE_CFG}\"\nRUN echo \"$ECOMMERCE_CFG\"\nENV DJANGO_SETTINGS_MODULE=\"ecommerce.settings.docker-production\"\nRUN pip install --no-cache-dir edx-arch-experiments\n\n\n##################################################\n# Define an experimental docker target\n# Setting user to root to allow for free range of your container\n#\n# Useful for testing config changes before going to production\nFROM app as docker-experimental\nENV DJANGO_SETTINGS_MODULE=\"ecommerce.settings.docker-production\"\nRUN pip install --no-cache-dir edx-arch-experiments\nUSER root\nRUN ln -s \"$(pwd)/ecommerce/settings/docker-experimental.yml\" \"$ECOMMERCE_CFG\"\n"
}