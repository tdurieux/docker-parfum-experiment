{
  "startTime": 1674252329075,
  "endTime": 1674252330023,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 129
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster-slim\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql && useradd -r -g mysql mysql\n\nRUN apt-get update && apt-get install -y --no-install-recommends gnupg dirmngr && rm -rf /var/lib/apt/lists/*\n\n# add gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.12\nRUN set -eux; \\\r\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\r\n\tapt-get update; \\\r\n\tapt-get install -y --no-install-recommends ca-certificates wget; \\\r\n\trm -rf /var/lib/apt/lists/*; \\\r\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\r\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\r\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\r\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\r\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\r\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\r\n\tgpgconf --kill all; \\\r\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\r\n\tapt-mark auto '.*' > /dev/null; \\\r\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\r\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\r\n\tchmod +x /usr/local/bin/gosu; \\\r\n\tgosu --version; \\\r\n\tgosu nobody true\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\r\n# for MYSQL_RANDOM_ROOT_PASSWORD\r\n\t\tpwgen \\\r\n# for mysql_ssl_rsa_setup\r\n\t\topenssl \\\r\n# FATAL ERROR: please install the following Perl modules before executing /usr/local/mysql/scripts/mysql_install_db:\r\n# File::Basename\r\n# File::Copy\r\n# Sys::Hostname\r\n# Data::Dumper\r\n\t\tperl \\\r\n# install \"xz-utils\" for .sql.xz docker-entrypoint-initdb.d files\r\n\t\txz-utils \\\r\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN set -ex; \\\r\n# gpg: key 5072E1F5: public key \"MySQL Release Engineering <mysql-build@oss.oracle.com>\" imported\r\n\tkey='A4A9406876FCBD3C456770C88C718D3B5072E1F5'; \\\r\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\r\n\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\r\n\tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/mysql.gpg; \\\r\n\tgpgconf --kill all; \\\r\n\trm -rf \"$GNUPGHOME\"; \\\r\n\tapt-key list > /dev/null\n\nENV MYSQL_MAJOR 8.0\nENV MYSQL_VERSION 8.0.20-1debian10\n\nRUN echo \"deb http://repo.mysql.com/apt/debian/ buster mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list\n\n# the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n# also, we set debconf keys to make APT a little quieter\nRUN { \\\r\n\t\techo mysql-community-server mysql-community-server/data-dir select ''; \\\r\n\t\techo mysql-community-server mysql-community-server/root-pass password ''; \\\r\n\t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \\\r\n\t\techo mysql-community-server mysql-community-server/remove-test-db select false; \\\r\n\t} | debconf-set-selections \\\r\n\t&& apt-get update && apt-get install --no-install-recommends -y mysql-community-client=\"${MYSQL_VERSION}\" mysql-community-server-core=\"${MYSQL_VERSION}\" && rm -rf /var/lib/apt/lists/* \\\n\t&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld \\\n\t&& chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n# ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime\r\n\t&& chmod 777 /var/run/mysqld\n\nVOLUME /var/lib/mysql\n# Config files\nCOPY config/ /etc/mysql/\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 3306 3306\n# CMD [\"sh start.sh\"]"
}