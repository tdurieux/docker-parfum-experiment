{
  "startTime": 1674253740410,
  "endTime": 1674253741288,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "import argparse\nimport functools\nimport sys\nfrom enum import Enum\nfrom functools import reduce\nfrom pathlib import Path\n\nOS = {\n    \"windows\": (),\n    \"macos\": (),\n    \"manylinux2014\": (\"\", ),\n    \"ubuntu\": (\n        \"18.04\",\n        \"20.04\",\n    )\n}\nHARDWARE = (\"cpu\", \"gpu\")\n\nHEAD_BLOCK = \"\"\"# This file is generated by python Dockerfile_generator.py -o {os} -t {target}\n\"\"\"\n\nCPU_BASE_BLOCK = \"\"\"# Taichi Dockerfile for development\nFROM {os}:{version}\n\"\"\"\n\nCPU_MANYLINUX_BASE_BLOCK = \"\"\"# Taichi Dockerfile (CPU only) for Manylinux2014 compliant\nFROM quay.io/pypa/manylinux2014_x86_64\n\"\"\"\n\nGPU_BASE_BLOCK = \"\"\"# Taichi Dockerfile for development\nFROM nvidia/cudagl:11.2.2-devel-ubuntu{version}\n# Use 11.2 instead of 11.4 to avoid forward compatibility issue on Nvidia driver 460\n\"\"\"\n\nCPU_YUM_INSTALL_BLOCK = \"\"\"\nRUN yum check-update && \\\\\n    yum install -y git \\\\ && rm -rf /var/cache/yum \\\n                   cmake \\\\\n                   wget \\\\\n                   libXrandr\n\"\"\"\n\nADD_GIT_PPA = \"add-apt-repository -y ppa:git-core/ppa && apt-get update && \"\n\nCPU_APT_INSTALL_BLOCK = \"\"\"\nRUN apt-get update && \\\\\n    apt-get install --no-install-recommends -y software-properties-common \\\\ && rm -rf /var/lib/apt/lists/*; \\\n                       python3-pip \\\\\n                       libtinfo-dev \\\\\n                       clang-10 \\\\\n                       wget \\\\\n                       git \\\\\n                       unzip \\\\\n                       libx11-xcb-dev\n\"\"\"\n\nGPU_APT_INSTALL_BLOCK = \"\"\"\nRUN apt-get update && \\\\\n    apt-get install --no-install-recommends -y software-properties-common && {}\\\\\n    apt-get install --no-install-recommends -y python3-pip \\\\ && rm -rf /var/lib/apt/lists/*; \\\n                       libtinfo-dev \\\\\n                       clang-10 \\\\\n                       wget \\\\\n                       git \\\\\n                       unzip \\\\\n                       libxrandr-dev \\\\\n                       libxinerama-dev \\\\\n                       libxcursor-dev \\\\\n                       libxi-dev \\\\\n                       libglu1-mesa-dev \\\\\n                       freeglut3-dev \\\\\n                       mesa-common-dev \\\\\n                       libssl-dev \\\\\n                       libglm-dev \\\\\n                       libxcb-keysyms1-dev \\\\\n                       libxcb-dri3-dev \\\\\n                       libxcb-randr0-dev \\\\\n                       libxcb-ewmh-dev \\\\\n                       libpng-dev \\\\\n                       g++-multilib \\\\\n                       libmirclient-dev \\\\\n                       libwayland-dev \\\\\n                       bison \\\\\n                       libx11-xcb-dev \\\\\n                       liblz4-dev \\\\\n                       libzstd-dev \\\\\n                       qt5-default \\\\\n                       libglfw3 \\\\\n                       libglfw3-dev \\\\\n                       libjpeg-dev \\\\\n                       libvulkan-dev\n\"\"\"\n\nNVIDIA_DRIVER_CAPABILITIES_BLOCK = \"\"\"\nENV NVIDIA_DRIVER_CAPABILITIES compute,graphics,utility\n\"\"\"\n\nDEBIAN_NONINTERACTIVE_BLOCK = \"\"\"\nENV DEBIAN_FRONTEND=noninteractive\n\"\"\"\n\nMAINTAINER_BLOCK = \"\"\"\nLABEL maintainer=\"https://github.com/taichi-dev\"\n\"\"\"\n\nCMAKE_BLOCK = \"\"\"\n# Install the latest version of CMAKE v3.20.5 from source\nWORKDIR /\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.20.5/cmake-3.20.5-linux-x86_64.tar.gz\nRUN tar xf cmake-3.20.5-linux-x86_64.tar.gz && \\\\\n    rm cmake-3.20.5-linux-x86_64.tar.gz\nENV PATH=\"/cmake-3.20.5-linux-x86_64/bin:$PATH\"\n\"\"\"\n\nLLVM_BLOCK = \"\"\"\n# Install LLVM 10\nWORKDIR /\n# Make sure this URL gets updated each time there is a new prebuilt bin release\nRUN wget https://github.com/taichi-dev/taichi_assets/releases/download/llvm10_linux_patch2/taichi-llvm-10.0.0-linux.zip\nRUN unzip taichi-llvm-10.0.0-linux.zip && \\\\\n    rm taichi-llvm-10.0.0-linux.zip\nENV PATH=\"/taichi-llvm-10.0.0-linux/bin:$PATH\"\n# Use Clang as the default compiler\nENV CC=\"clang-10\"\nENV CXX=\"clang++-10\"\n\"\"\"\n\nLLVM_CLANG_FROM_SOURCE_BLOCK = \"\"\"\n# Build LLVM/Clang 10 from source\nWORKDIR /\nRUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/llvm-10.0.0.src.tar.xz\nRUN tar -xf llvm-10.0.0.src.tar.xz && \\\n    rm llvm-10.0.0.src.tar.xz\nRUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang-10.0.0.src.tar.xz\nRUN tar -xf clang-10.0.0.src.tar.xz && \\\n    rm clang-10.0.0.src.tar.xz\nRUN cp -r clang-10.0.0.src llvm-10.0.0.src/tools/clang\n\nWORKDIR /llvm-10.0.0.src/build\nRUN cmake .. -DLLVM_ENABLE_RTTI:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86\" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_TERMINFO=OFF\nRUN make -j 8 && \\\n    make install\nENV CC=\"/usr/local/bin/clang\"\nENV CXX=\"/usr/local/bin/clang++\"\n\"\"\"\n\nGCC_LINK_BLOCK = \"\"\"\n# Link gcc 10 to build Taichi\nWORKDIR /usr/lib/gcc/x86_64-redhat-linux/\nRUN ln -s /opt/rh/devtoolset-10/root/usr/lib/gcc/x86_64-redhat-linux/10 10\n# Check gcc-10 is used\nRUN clang++ -v\n\"\"\"\n\nUSER_BLOCK = \"\"\"\n# Create non-root user for running the container\nRUN useradd -ms /bin/bash dev\nWORKDIR /home/dev\nUSER dev\n\"\"\"\n\nVULKAN_BLOCK = \"\"\"\n# Setting up Vulkan SDK\n# References\n# [1] https://github.com/edowson/docker-nvidia-vulkan\n# [2] https://gitlab.com/nvidia/container-images/vulkan/-/tree/master/docker\nWORKDIR /vulkan\nRUN wget https://sdk.lunarg.com/sdk/download/1.2.189.0/linux/vulkansdk-linux-x86_64-1.2.189.0.tar.gz\nRUN tar xf vulkansdk-linux-x86_64-1.2.189.0.tar.gz && \\\\\n    rm vulkansdk-linux-x86_64-1.2.189.0.tar.gz\n# Locate Vulkan components\nENV VULKAN_SDK=\"/vulkan/1.2.189.0/x86_64\"\nENV PATH=\"$VULKAN_SDK/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"$VULKAN_SDK/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"\nENV VK_LAYER_PATH=\"$VULKAN_SDK/etc/vulkan/explicit_layer.d\"\nWORKDIR /usr/share/vulkan/icd.d\nCOPY ci/vulkan/icd.d/nvidia_icd.json nvidia_icd.json\n\"\"\"\n\nCONDA_BLOCK = \"\"\"\n# Install miniconda\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\\\n    bash Miniconda3-latest-Linux-x86_64.sh -p /home/dev/miniconda -b\nENV PATH=\"/home/dev/miniconda/bin:$PATH\"\n\n# Set up multi-python environment\nRUN conda init bash\nRUN conda create -n py36 python=3.6 -y\nRUN conda create -n py37 python=3.7 -y\nRUN conda create -n py38 python=3.8 -y\nRUN conda create -n py39 python=3.9 -y\n\"\"\"\n\nSCRIPTS_BLOCK = \"\"\"\n# Load scripts for build and test\nWORKDIR /home/dev/scripts\nCOPY ci/scripts/{script} {script}\n\nWORKDIR /home/dev\nENV LANG=\"C.UTF-8\"\n\"\"\"\n\n\nclass Parser(argparse.ArgumentParser):\n    def error(self, message):\n        \"\"\"Make it print help message by default.\"\"\"\n        sys.stderr.write(f\"error: {message}\\n\")\n        self.print_help()\n        sys.exit(2)\n\n\nclass AvailableColors(Enum):\n    GRAY = 90\n    RED = 91\n    GREEN = 92\n    YELLOW = 93\n    BLUE = 94\n    PURPLE = 95\n    WHITE = 97\n    BLACK = 30\n    DEFAULT = 39\n\n\ndef _apply_color(color: str, message: str) -> str:\n    \"\"\"Dye message with color, fall back to default if it fails.\"\"\"\n    color_code = AvailableColors[\"DEFAULT\"].value\n    try:\n        color_code = AvailableColors[color.upper()].value\n    except KeyError:\n        pass\n    return f\"\\033[1;{color_code}m{message}\\033[0m\"\n\n\ndef info(message: str, plain=False):\n    \"\"\"Log the info to stdout\"\"\"\n    print(_apply_color(\"default\", message) if not plain else message)\n\n\ndef success(message: str):\n    \"\"\"Log the success to stdout\"\"\"\n    print(_apply_color(\"green\", f\"[✔] {message}\"))\n\n\ndef error(message: str):\n    \"\"\"Log the error to stderr\"\"\"\n    print(_apply_color(\"red\", f\"[✗] {message}\"), file=sys.stderr)\n\n\ndef warn(message: str):\n    \"\"\"Log the warning to stdout\"\"\"\n    print(_apply_color(\"yellow\", f\"[!] {message}\"))\n\n\ndef main(arguments=None):\n    parser = Parser(description=\"\"\"A CLI to generate Taichi CI Dockerfiles.\n        Example usage:\n            python3 Dockerfile_generator.py -o ubuntu -t cpu\n        \"\"\")\n    parser.add_argument(\n        \"-o\",\n        \"--os\",\n        help=\"The target os of the Dockerfile.\",\n        required=True,\n        type=str,\n        choices=OS,\n        metavar=\"\\b\",\n    )\n    parser.add_argument(\n        \"-t\",\n        \"--target\",\n        help=\"The target hardware of the Dockerfile. [cpu/gpu]\",\n        required=True,\n        type=str,\n        choices=HARDWARE,\n        metavar=\"\\b\",\n    )\n    args = parser.parse_args()\n    pwd = Path(__file__).resolve().parent\n\n    head_block = HEAD_BLOCK.format(os=args.os, target=args.target)\n\n    if args.target == \"cpu\":\n        info(\"Generating Dockerfile(s) for CPU.\")\n\n        def f(os: str, version: str) -> str:\n            info(f\"OS: {os}, version: {version}\")\n\n            if os == \"manylinux2014\":\n                base_block = CPU_MANYLINUX_BASE_BLOCK\n                install_block = CPU_YUM_INSTALL_BLOCK\n                scripts_block = SCRIPTS_BLOCK.format(\n                    script=f\"manylinux_build_wheel.sh\")\n\n                dockerfile = reduce(\n                    lambda x, y: x + y,\n                    (head_block, base_block, MAINTAINER_BLOCK, install_block,\n                     LLVM_CLANG_FROM_SOURCE_BLOCK, GCC_LINK_BLOCK, USER_BLOCK,\n                     CONDA_BLOCK, scripts_block))\n\n                filename = pwd / f\"Dockerfile.{os}.cpu\"\n            else:\n                base_block = CPU_BASE_BLOCK.format(os=os, version=version)\n                install_block = CPU_APT_INSTALL_BLOCK\n                scripts_block = SCRIPTS_BLOCK.format(\n                    script=f\"{os}_build_test_cpu.sh\")\n                # ubuntu 18.04 needs special treatments\n                if os == \"ubuntu\" and version == \"18.04\":\n                    install_block = install_block.rstrip() + \"\"\" \\\\\n                       zlib1g-dev\"\"\"\n\n                dockerfile = reduce(\n                    lambda x, y: x + y,\n                    (head_block, base_block, DEBIAN_NONINTERACTIVE_BLOCK,\n                     MAINTAINER_BLOCK, install_block, CMAKE_BLOCK, LLVM_BLOCK,\n                     USER_BLOCK, CONDA_BLOCK, scripts_block))\n\n                filename = pwd / f\"Dockerfile.{os}.{version}.cpu\"\n\n            info(f\"Storing at: {filename}\")\n            with filename.open(\"w\") as fp:\n                fp.write(dockerfile)\n    else:\n        info(\"Generating Dockerfile(s) for GPU.\")\n\n        def f(os: str, version: str) -> str:\n            info(f\"OS: {os}, version: {version}\")\n            base_block = GPU_BASE_BLOCK.format(version=version)\n            scripts_block = SCRIPTS_BLOCK.format(script=f\"{os}_build_test.sh\")\n            install_block = GPU_APT_INSTALL_BLOCK\n\n            # ubuntu 20.04 needs special treatments\n            if os == \"ubuntu\" and version == \"20.04\":\n                install_block = install_block.rstrip() + \"\"\" \\\\\n                       vulkan-tools \\\\\n                       vulkan-validationlayers-dev\"\"\"\n\n            dockerfile = reduce(\n                lambda x, y: x + y,\n                (head_block, base_block, NVIDIA_DRIVER_CAPABILITIES_BLOCK,\n                 DEBIAN_NONINTERACTIVE_BLOCK, MAINTAINER_BLOCK, install_block,\n                 CMAKE_BLOCK, LLVM_BLOCK, VULKAN_BLOCK, USER_BLOCK,\n                 CONDA_BLOCK, scripts_block))\n            filename = pwd / f\"Dockerfile.{os}.{version}\"\n            info(f\"Storing at: {filename}\")\n            with (filename).open(\"w\") as fp:\n                fp.write(dockerfile)\n\n    list(map(functools.partial(f, args.os), OS[args.os]))\n    success(\"Dockerfile generation is complete.\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
}