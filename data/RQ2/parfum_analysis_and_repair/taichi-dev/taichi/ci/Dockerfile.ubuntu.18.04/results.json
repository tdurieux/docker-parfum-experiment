{
  "startTime": 1674252479793,
  "endTime": 1674252480954,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file is generated by python Dockerfile_generator.py -o ubuntu -t gpu\n# Taichi Dockerfile for development\nFROM nvidia/cudagl:11.2.2-devel-ubuntu18.04\n# Use 11.2 instead of 11.4 to avoid forward compatibility issue on Nvidia driver 460\n\nENV NVIDIA_DRIVER_CAPABILITIES compute,graphics,utility\n\nENV DEBIAN_FRONTEND=noninteractive\n\nLABEL maintainer=\"https://github.com/taichi-dev\"\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common && add-apt-repository -y ppa:git-core/ppa && apt-get update && \\\n    apt-get install --no-install-recommends -y python3-pip \\\n                       libtinfo-dev \\\n                       clang-10 \\\n                       wget \\\n                       git \\\n                       unzip \\\n                       libxrandr-dev \\\n                       libxinerama-dev \\\n                       libxcursor-dev \\\n                       libxi-dev \\\n                       libglu1-mesa-dev \\\n                       freeglut3-dev \\\n                       mesa-common-dev \\\n                       libssl-dev \\\n                       libglm-dev \\\n                       libxcb-keysyms1-dev \\\n                       libxcb-dri3-dev \\\n                       libxcb-randr0-dev \\\n                       libxcb-ewmh-dev \\\n                       libpng-dev \\\n                       g++-multilib \\\n                       libmirclient-dev \\\n                       libwayland-dev \\\n                       bison \\\n                       libx11-xcb-dev \\\n                       liblz4-dev \\\n                       libzstd-dev \\\n                       qt5-default \\\n                       libglfw3 \\\n                       libglfw3-dev \\\n                       libjpeg-dev \\\n                       libvulkan-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install the latest version of CMAKE v3.20.5 from source\nWORKDIR /\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.20.5/cmake-3.20.5-linux-x86_64.tar.gz\nRUN tar xf cmake-3.20.5-linux-x86_64.tar.gz && \\\n    rm cmake-3.20.5-linux-x86_64.tar.gz\nENV PATH=\"/cmake-3.20.5-linux-x86_64/bin:$PATH\"\n\n# Install LLVM 10\nWORKDIR /\n# Make sure this URL gets updated each time there is a new prebuilt bin release\nRUN wget https://github.com/taichi-dev/taichi_assets/releases/download/llvm10_linux_patch2/taichi-llvm-10.0.0-linux.zip\nRUN unzip taichi-llvm-10.0.0-linux.zip && \\\n    rm taichi-llvm-10.0.0-linux.zip\nENV PATH=\"/taichi-llvm-10.0.0-linux/bin:$PATH\"\n# Use Clang as the default compiler\nENV CC=\"clang-10\"\nENV CXX=\"clang++-10\"\n\n# Setting up Vulkan SDK\n# References\n# [1] https://github.com/edowson/docker-nvidia-vulkan\n# [2] https://gitlab.com/nvidia/container-images/vulkan/-/tree/master/docker\nWORKDIR /vulkan\nRUN wget https://sdk.lunarg.com/sdk/download/1.2.189.0/linux/vulkansdk-linux-x86_64-1.2.189.0.tar.gz\nRUN tar xf vulkansdk-linux-x86_64-1.2.189.0.tar.gz && \\\n    rm vulkansdk-linux-x86_64-1.2.189.0.tar.gz\n# Locate Vulkan components\nENV VULKAN_SDK=\"/vulkan/1.2.189.0/x86_64\"\nENV PATH=\"$VULKAN_SDK/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"$VULKAN_SDK/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"\nENV VK_LAYER_PATH=\"$VULKAN_SDK/etc/vulkan/explicit_layer.d\"\nWORKDIR /usr/share/vulkan/icd.d\nCOPY vulkan/icd.d/nvidia_icd.json nvidia_icd.json\n\n# Create non-root user for running the container\nRUN useradd -ms /bin/bash dev\nWORKDIR /home/dev\nUSER dev\n\n# Install miniconda\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    bash Miniconda3-latest-Linux-x86_64.sh -p /home/dev/miniconda -b\nENV PATH=\"/home/dev/miniconda/bin:$PATH\"\n\n# Set up multi-python environment\nRUN conda init bash\nRUN conda create -n py36 python=3.6 pytorch cudatoolkit=10.2 -c pytorch -y\nRUN conda create -n py37 python=3.7 pytorch cudatoolkit=10.2 -c pytorch -y\nRUN conda create -n py38 python=3.8 pytorch cudatoolkit=10.2 -c pytorch -y\nRUN conda create -n py39 python=3.9 pytorch cudatoolkit=10.2 -c pytorch -y\n# TODO add torch to 3.10 when supported\nRUN conda create -n py310 python=3.10 -y\n\nWORKDIR /home/dev\nENV LANG=\"C.UTF-8\"\n"
}