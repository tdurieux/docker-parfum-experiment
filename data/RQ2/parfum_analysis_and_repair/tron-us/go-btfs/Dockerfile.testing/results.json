{
  "startTime": 1674218789986,
  "endTime": 1674218791282,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.15\nMAINTAINER TRON-US <support@tron.network>\n\n# Install deps\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  libssl-dev \\\n  ca-certificates \\\n  fuse && rm -rf /var/lib/apt/lists/*;\n\n# Dockerfile.testing will build an image that contains the go-btfs source and binary.\n# It is quite large.  Its primary use case is to run the unit tests and test/sharness tests.\n# Use Dockerfile to run a btfs daemon instead\nENV SRC_DIR /go-btfs\nENV TEST_NO_FUSE 1\n\n# Download packages first so they can be cached.\nCOPY go.mod go.sum $SRC_DIR/\nRUN cd $SRC_DIR \\\n  && go mod download\n\nCOPY . $SRC_DIR\n\n# Newer git submodule uses \"absorbgitdirs\" option by default which does not\n# include .git folder inside a submodule.\n# Use a build time variable $gitdir to specify the location of the actual .git folder.\nARG gitdir=.git\nRUN test -d $SRC_DIR/.git \\\n  || mv $SRC_DIR/$gitdir $SRC_DIR/.git\n\n# Preload an in-tree but disabled-by-default plugin by adding it to the IPFS_PLUGINS variable\n# e.g. docker build --build-arg IPFS_PLUGINS=\"foo bar baz\"\nARG IPFS_PLUGINS\n\n# Build the thing.\n# Also: fix getting HEAD commit hash via git rev-parse.\nRUN cd $SRC_DIR \\\n  && mkdir .git/objects \\\n  && make build GOTAGS=openssl IPFS_PLUGINS=$IPFS_PLUGINS\n\n# Get su-exec, a very minimal tool for dropping privileges,\n# and tini, a very minimal init daemon for containers\nENV SUEXEC_VERSION v0.2\nENV TINI_VERSION v0.19.0\nRUN set -eux; \\\n    dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"${dpkgArch##*-}\" in \\\n        \"amd64\" | \"armhf\" | \"arm64\") tiniArch=\"tini-$dpkgArch\" ;;\\\n        *) echo >&2 \"unsupported architecture: ${dpkgArch}\"; exit 1 ;; \\\n    esac; \\\n  cd /tmp \\\n  && git clone https://github.com/ncopa/su-exec.git \\\n  && cd su-exec \\\n  && git checkout -q $SUEXEC_VERSION \\\n  && make \\\n  && cd /tmp \\\n  && wget -q -O tini https://github.com/krallin/tini/releases/download/$TINI_VERSION/$tiniArch \\\n  && chmod +x tini\n\n# Do this in the current container\nRUN mv /tmp/su-exec/su-exec /sbin/su-exec\nRUN mv /bin/fusermount /usr/local/bin/fusermount\n\n# Add suid bit on fusermount so it will run properly\nRUN chmod 4755 /usr/local/bin/fusermount\n\n# Fix permissions on start_btfs (ignore the build machine's permissions)\nRUN chmod 0755 /usr/local/bin/start_btfs\n\n# Create the fs-repo directory and switch to a non-privileged user.\nENV BTFS_PATH /data/btfs\nRUN mkdir -p $BTFS_PATH \\\n  && adduser -D -h $BTFS_PATH -u 1000 -G users btfs \\\n  && chown btfs:users $BTFS_PATH\n\n# Create mount points for `btfs mount` command\nRUN mkdir /btfs /btns \\\n  && chown btfs:users /btfs /btns\n\n# Change owner of go-btfs source and go folder\nRUN chown -R btfs:users /go \\ \n  && chown -R btfs:users /go-btfs\n\n# Expose the fs-repo as a volume.\n# start_btfs initializes an fs-repo if none is mounted.\n# Important this happens after the USER directive so permission are correct.\nVOLUME $BTFS_PATH\n\n# The default logging level\nENV BTFS_LOGGING \"\"\nENV PATH=\"/usr/local/go/bin:${PATH}\"\n\n# Commands are run as user btfs not root\n# Comment line below out if you want to run as root\nENTRYPOINT [\"/sbin/su-exec\", \"btfs:1000\"]\n\n# by default lets run the make test\nCMD cd /go-btfs && make test\n"
}