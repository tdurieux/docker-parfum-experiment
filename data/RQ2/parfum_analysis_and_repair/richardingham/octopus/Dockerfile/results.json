{
  "startTime": 1674249698940,
  "endTime": 1674249700284,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 40,
        "columnEnd": 75
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14.15.5-buster-slim AS webpack\n\nWORKDIR /app\n\nRUN apt-get update \\\n  && apt-get install -y build-essential --no-install-recommends \\\n  && rm -rf /var/lib/apt/lists/* /usr/share/doc /usr/share/man \\\n  && apt-get clean \\\n  && chown node:node -R /app\n\nUSER node\n\nCOPY --chown=node:node package.json *yarn* rollup.config.js ./\n\nRUN yarn install && yarn cache clean;\n\nARG NODE_ENV=\"production\"\nENV NODE_ENV=\"${NODE_ENV}\" \\\n    USER=\"node\"\n\nRUN mkdir -p octopus/blocktopus/resources/blockly/pack/ && mkdir -p octopus/blocktopus/blockly/ && chown node:node -R octopus\nCOPY --chown=node:node octopus/blocktopus/blockly octopus/blocktopus/blockly\n\nRUN if [ \"${NODE_ENV}\" != \"development\" ]; then \\\n  yarn run build; fi\n\nCMD [\"bash\"]\n\n#\n# App\n#\n\nFROM python:3.9.5-slim-buster AS app\n\nWORKDIR /app\n\nRUN apt-get update \\\n  && apt-get install -y build-essential curl libpq-dev git --no-install-recommends \\\n  && apt-get install -y libatlas-base-dev libffi-dev libglib2.0-0 libgl1 usbutils dos2unix --no-install-recommends \\\n  && rm -rf /var/lib/apt/lists/* /usr/share/doc /usr/share/man \\\n  && apt-get clean \\\n  && useradd --create-home python \\\n  && chown python:python -R /app\n\nUSER python\n\n# Install requirements and plugins\nCOPY --chown=python:python requirements*.txt octopus-plugins.txt ./\nCOPY --chown=python:python bin/ ./bin\n\nRUN chmod 0755 bin/* && dos2unix bin/pip3-install && bin/pip3-install\n\nRUN if [ -f octopus-plugins.txt ]; then \\\n pip install --no-cache-dir -r octopus-plugins.txt; fi\n\n# Set environment variables\nARG OCTOPUS_ENV=\"production\"\nENV OCTOPUS_ENV=\"${OCTOPUS_ENV}\" \\\n    OCTOPUS_PLUGINS_DIR=\"/app/plugins\" \\\n    PYTHONUNBUFFERED=\"true\" \\\n    PYTHONPATH=\".\" \\\n    PATH=\"${PATH}:/home/python/.local/bin\" \\\n    USER=\"python\"\n\n# Download the JS/CSS/etc resources if in prodution env\nRUN mkdir -p octopus/blocktopus/resources/cache/ && mkdir -p octopus/blocktopus/templates/ && chown python:python -R octopus\nRUN mkdir tools && chown python:python tools\nCOPY --chown=python:python octopus/blocktopus/templates/template-resources.json octopus/blocktopus/templates/template-resources.json\nCOPY --chown=python:python tools/build.py tools\nRUN if [ \"$OCTOPUS_ENV\" == \"production\" ]; then \\\n  python tools/build.py ; fi\n\n# Copy packed javascript from the webpack worker\nCOPY --chown=python:python --from=webpack /app/octopus/blocktopus/resources/blockly/pack /pack/\n\n# Copy rest of source\nCOPY --chown=python:python . ./\n\nCMD [\"python\", \"-m\", \"octopus.blocktopus.server\"]\n\n\n"
}