{
  "startTime": 1674255459797,
  "endTime": 1674255461005,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 2,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 191,
        "lineEnd": 191,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 37,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 115,
        "lineEnd": 118,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 156,
        "lineEnd": 158,
        "columnStart": 2,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PARENT_IMAGE=ubuntu:18.04\n\n# Garage base target ###########################################################\nFROM $PARENT_IMAGE AS garage-base\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# apt dependencies\nRUN \\\n  apt-get -y -q update && \\\n  # Prevents debconf from prompting for user input\n  # See https://github.com/phusion/baseimage-docker/issues/58\n  DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    # Dockerfile deps\n    wget \\\n    unzip \\\n    git \\\n    curl \\\n    # For building glfw\n    cmake \\\n    xorg-dev \\\n    # mujoco_py\n    # See https://github.com/openai/mujoco-py/blob/master/Dockerfile\n    libglew-dev \\\n    libosmesa6-dev \\\n    patchelf \\\n    # OpenAI baselines\n    libopenmpi-dev \\\n    # virtualenv\n    libbz2-dev \\\n    libreadline-dev \\\n    libssl-dev \\\n    libsqlite3-dev \\\n    # ruby\n    ruby-full && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Build GLFW because the Ubuntu 18.04 version is too old\n# See https://github.com/glfw/glfw/issues/1004\nRUN wget https://github.com/glfw/glfw/releases/download/3.3/glfw-3.3.zip && \\\n  unzip glfw-3.3.zip && \\\n  rm glfw-3.3.zip && \\\n  cd glfw-3.3 && \\\n  mkdir glfw-build && \\\n  cd glfw-build && \\\n  cmake -DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF .. && \\\n  make -j\"$(nproc)\" && \\\n  make install && \\\n  cd ../../ && \\\n  rm -rf glfw-3.3\n\nARG user=garage-user\nARG uid=999\nRUN groupadd -g $uid $user && \\\n    useradd -m -r -u $uid -g $user $user && \\\n    chown -R $user:$user /home/$user\nENV USER $user\nUSER $user\nENV HOME /home/$user\nENV PYENV_ROOT \"$HOME/.pyenv\"\nENV PATH \"$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH:$HOME/.local/bin\"\nENV PATH_NO_VENV $PATH\nWORKDIR $HOME\n\nRUN curl -f https://pyenv.run | bash && \\\n  pyenv install 3.6.12 && \\\n  pyenv global 3.6.12 && \\\n  pip install --no-cache-dir virtualenv && \\\n  rm -r $HOME/.cache/pip\n\n# MuJoCo 2.0 (for dm_control)\nRUN mkdir -p $HOME/.mujoco && \\\n  wget https://www.roboti.us/download/mujoco200_linux.zip -O mujoco.zip --no-check-certificate && \\\n  unzip mujoco.zip -d $HOME/.mujoco && \\\n  rm mujoco.zip && \\\n  ln -s $HOME/.mujoco/mujoco200_linux $HOME/.mujoco/mujoco200\n# This is a hack required to make mujoco-py compile in gpu mode\nUSER root\nRUN mkdir -p /usr/lib/nvidia-000\nUSER $user\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:$HOME/.mujoco/mujoco200/bin:/usr/lib/nvidia-000\n\n# Fixes Segmentation Fault\n# See: https://github.com/openai/mujoco-py/pull/145#issuecomment-356938564\nENV LD_PRELOAD /usr/lib/x86_64-linux-gnu/libGLEW.so\n\n# Set MuJoCo rendering mode (for dm_control)\nENV MUJOCO_GL \"glfw\"\n\n\n# Create virtualenv\nENV VIRTUAL_ENV $HOME/venv\nRUN python -m virtualenv $VIRTUAL_ENV\nENV PATH \"$VIRTUAL_ENV/bin:$PATH\"\n\n# Prevent pip from complaining about available upgrades inside virtualenv\nRUN pip install --no-cache-dir --upgrade pip setuptools wheel && \\\n  rm -r $HOME/.cache/pip\n\n# We need a MuJoCo key to install mujoco_py\n# In this step only the presence of the file mjkey.txt is required, so we only\n# create an empty file\nENV MJKEY_PATH $HOME/.mujoco/mjkey.txt\nRUN touch $MJKEY_PATH\n\n# xvfb, so that rendering works\nUSER root\nRUN \\\n  apt-get -y -q update && \\\n  # Prevents debconf from prompting for user input\n  # See https://github.com/phusion/baseimage-docker/issues/58\n  DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    # Dummy X server\n    xvfb \\\n    pulseaudio && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  mkdir -p -m 1777 /tmp/.X11-unix\n\nARG user=garage-user\nARG uid=999\nUSER $user\n\n# Ready, set, go.\nCOPY --chown=$user:$user docker/entrypoint-headless.sh $HOME/code/garage/docker/entrypoint-headless.sh\nENTRYPOINT [\"code/garage/docker/entrypoint-headless.sh\"]\n\n# Garage target for latest release from pypi ###################################\nFROM garage-base AS garage\n\nRUN pip install --no-cache-dir --upgrade pip setuptools wheel && \\\n  pip install --no-cache-dir garage[all] && \\\n  rm -r $HOME/.cache/pip && \\\n  (python -c 'import mujoco_py' || true) && \\\n  rm $MJKEY_PATH\n\n# Nvidia target ################################################################\nFROM garage AS garage-nvidia\nCOPY --chown=$user:$user docker/entrypoint-runtime.sh $HOME/code/garage/docker/entrypoint-runtime.sh\nENTRYPOINT [\"code/garage/docker/entrypoint-runtime.sh\"]\n\n\n# Special setup for garage developers, which installs garage from source #######\n# Assumes $PWD is the garage repository.\nFROM garage-base AS garage-dev\n\n# apt dependencies\nUSER root\nRUN \\\n  apt-get -y -q update && \\\n  # Prevents debconf from prompting for user input\n  # See https://github.com/phusion/baseimage-docker/issues/58\n  DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    # graphviz for autoapi documentation\n    graphviz && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\nARG user=garage-user\nARG uid=999\nUSER $user\n\n# Copy over just setup.py first, so the Docker cache doesn't expire until\n# dependencies change\n#\n# Files needed to run setup.py\n# - README.md\n# - VERSION\n# - scripts/garage\n# - src/garage/__init__.py\n# - setup.py\nCOPY --chown=$user:$user README.md $HOME/code/garage/README.md\nCOPY --chown=$user:$user VERSION $HOME/code/garage/VERSION\nCOPY --chown=$user:$user scripts/garage $HOME/code/garage/scripts/garage\nCOPY --chown=$user:$user src/garage/__init__.py $HOME/code/garage/src/garage/__init__.py\nCOPY --chown=$user:$user setup.py $HOME/code/garage/setup.py\nWORKDIR $HOME/code/garage\n\n# Pre-build pre-commit env\nCOPY --chown=$user:$user .pre-commit-config.yaml $HOME/code/garage\nRUN git init && \\\n  pip install --no-cache-dir pre-commit && \\\n  pre-commit install && \\\n  pre-commit install-hooks && \\\n  rm -r $HOME/.cache/pip\n\n# Install deps (but not the code)\nRUN pip install --no-cache-dir --upgrade pip setuptools wheel && \\\n  pip install --no-cache-dir .[all,dev] && \\\n  (python -c 'import mujoco_py' || true) && \\\n  rm $MJKEY_PATH && \\\n  rm -r $HOME/.cache/pip\n\n# Add code stub last (ensures code changes have the shortest builds)\nCOPY --chown=$user:$user . $HOME/code/garage\n\n# Build and install the sdist\nRUN python setup.py sdist && \\\n    cp dist/*.tar.gz dist/garage.tar.gz && \\\n    pip install --no-cache-dir dist/garage.tar.gz[all,dev]\n\nRUN cd benchmarks && python setup.py sdist && \\\n    cp dist/*.tar.gz dist/benchmarks.tar.gz && \\\n    pip install --no-cache-dir dist/benchmarks.tar.gz\n\nENTRYPOINT [\"docker/entrypoint-headless.sh\"]\n\n# Nvidia Dev target ############################################################\nFROM garage-dev AS garage-dev-nvidia\nENTRYPOINT [\"docker/entrypoint-runtime.sh\"]\n\n# Test target ##################################################################\nFROM garage-dev AS garage-test\nCMD nice -n 11 pytest -v -n auto -m 'not huge and not flaky' --durations=20\n"
}