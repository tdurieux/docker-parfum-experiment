{
  "startTime": 1674248184720,
  "endTime": 1674248185703,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 6,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 6,
        "columnEnd": 83
      }
    }
  ],
  "repairedDockerfile": "ARG BASE_IMAGE=ubuntu:20.04\n\nFROM $BASE_IMAGE\n\n# set jfrog autoclean policy\nLABEL com.jfrog.artifactory.retention.maxDays=\"21\"\n\nENV DEBIAN_FRONTEND=noninteractive \\\n    PATH=\"$PATH:/opt/spack/bin:/opt/libtree\" \\\n    SPACK_COLOR=always\nSHELL [\"/bin/bash\", \"-c\"]\n\nARG EXTRA_APTGET\nRUN apt-get -yqq update && \\\n    apt-get -yqq install --no-install-recommends \\\n    software-properties-common \\\n    build-essential gfortran \\\n    autoconf automake \\\n    ${EXTRA_APTGET} \\\n    gawk \\\n    python3 python3-distutils \\\n    git tar wget curl ca-certificates gpg-agent jq tzdata \\\n    patchelf unzip file gnupg2 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install cmake\nRUN wget -qO- \"https://cmake.org/files/v3.22/cmake-3.22.1-linux-x86_64.tar.gz\" | tar --strip-components=1 -xz -C /usr/local\n\n# Install libtree for packaging\nRUN mkdir -p /opt/libtree && \\\n    curl -Lfso /opt/libtree/libtree https://github.com/haampie/libtree/releases/download/v2.0.0/libtree_x86_64 && \\\n    chmod +x /opt/libtree/libtree\n\n# Install MKL and remove static libs (to keep image smaller)\nARG USE_MKL=ON\nARG MKL_VERSION=2020.4-912\nARG MKL_SPEC=2020.4.304\nRUN if [ \"$USE_MKL\" = \"ON\" ]; then \\\n      wget -qO - https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB 2>/dev/null | apt-key add - && \\\n      apt-add-repository 'deb https://apt.repos.intel.com/mkl all main' && \\\n      apt-get install -y -qq --no-install-recommends intel-mkl-64bit-${MKL_VERSION} && \\\n      rm -rf /var/lib/apt/lists/* && \\\n      find \"/opt/intel/\" -name \"*.a\" -delete && \\\n      echo -e \"/opt/intel/lib/intel64\\n/opt/intel/compilers_and_libraries/linux/mkl/lib/intel64\" >> /etc/ld.so.conf.d/intel.conf && \\\n      ldconfig ; \\\n    fi\n\n# This is the spack version we want to have\nARG SPACK_SHA\nENV SPACK_SHA=$SPACK_SHA\n\n# Install the specific ref of Spack provided by the user and find compilers\nRUN mkdir -p /opt/spack && \\\n    curl -f -Ls \"https://api.github.com/repos/spack/spack/tarball/$SPACK_SHA\" | tar --strip-components=1 -xz -C /opt/spack\n\n# Find compilers + Add gfortran to clang specs + Define which compiler we want to use\nARG COMPILER\nRUN spack compiler find && \\\n    gawk -i inplace '$0 ~ \"compiler:\" {flag=0} $0 ~ \"spec:.*clang\" {flag=1} flag == 1 && $1 ~ \"^f[c7]\" && $2 ~ \"null\" {gsub(\"null\",\"/usr/bin/gfortran\",$0)} {print $0}' /root/.spack/linux/compilers.yaml && \\\n    spack config add \"packages:all:compiler:[${COMPILER}]\"\n\nRUN spack external find \\\n    autoconf \\\n    automake \\\n    bzip2 \\\n    cmake \\\n    cuda \\\n    diffutils \\\n    findutils \\\n    git \\\n    m4 \\\n    openssl \\\n    perl \\\n    python \\\n    xz && \\\n    if [ \"$USE_MKL\" = \"ON\" ]; then \\\n      echo -e \"  intel-mkl:\\n    externals:\\n    - spec: \\\"intel-mkl@$MKL_SPEC\\\"\\n      prefix: /opt/intel\\n    buildable: False\" >> ~/.spack/packages.yaml ; \\\n    fi\n\n# Set up the binary cache and trust the public part of our signing key\nCOPY ./ci/docker/spack.cloud_key.asc ./spack.cloud_key.asc\nRUN spack mirror add --scope site cscs https://spack.cloud && \\\n    spack gpg trust ./spack.cloud_key.asc\n\n# Add our custom spack repo from here\nARG SPACK_DLAF_REPO\nCOPY $SPACK_DLAF_REPO /user_repo\n\nRUN spack repo add --scope site /user_repo\n\n# Set this to a spack.yaml file which contains a spec\n# e.g. --build-arg SPACK_ENVIRONMENT=ci/spack/my-env.yaml\nARG SPACK_ENVIRONMENT\n# Build dependencies\n# 1. Create a spack environment named `ci` from the input spack.yaml file\n# 2. Install only the dependencies of this (top level is our package)\nCOPY $SPACK_ENVIRONMENT /spack_environment/spack.yaml\nRUN spack env create --without-view ci /spack_environment/spack.yaml\nRUN spack -e ci install --fail-fast --only=dependencies\n"
}