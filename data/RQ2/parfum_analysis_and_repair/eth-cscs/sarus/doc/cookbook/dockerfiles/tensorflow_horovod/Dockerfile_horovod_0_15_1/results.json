{
  "startTime": 1674217855838,
  "endTime": 1674217856995,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-devel-ubuntu16.04\n\n# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV HOROVOD_VERSION=0.15.1\nENV TENSORFLOW_VERSION=1.7.0\nENV PYTORCH_VERSION=0.4.1\nENV CUDNN_VERSION=7.0.5.15-1+cuda9.0\n\n# NCCL_VERSION is set by NVIDIA parent image to \"2.3.7\"\nENV NCCL_VERSION=2.3.7-1+cuda9.0\n\n# Python 2.7 or 3.5 is supported by Ubuntu Xenial out of the box\nARG python=3.5\nENV PYTHON_VERSION=${python}\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        curl \\\n        vim \\\n        wget \\\n        ca-certificates \\\n        libcudnn7=${CUDNN_VERSION} \\\n        libnccl2=${NCCL_VERSION} \\\n        libnccl-dev=${NCCL_VERSION} \\\n        libjpeg-dev \\\n        libpng-dev \\\n        python${PYTHON_VERSION} \\\n        python${PYTHON_VERSION}-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python\n\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n# Install TensorFlow, Keras and PyTorch\nRUN pip install --no-cache-dir tensorflow-gpu==${TENSORFLOW_VERSION} keras h5py torch==${PYTORCH_VERSION} torchvision\n\n# Install MPICH 3.1.4\nRUN cd /tmp \\\n    && wget -q https://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz \\\n    && tar xf mpich-3.1.4.tar.gz \\\n    && cd mpich-3.1.4 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-fortran --enable-fast=all,O3 --prefix=/usr \\\n    && make -j$(nproc) \\\n    && make install \\\n    && ldconfig \\\n    && cd .. \\\n    && rm -rf mpich-3.1.4 mpich-3.1.4.tar.gz \\\n    && cd /\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs && \\\n    HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir horovod==${HOROVOD_VERSION} && \\\n    ldconfig\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\n# Download examples\nRUN apt-get install -y --no-install-recommends subversion && \\\n    svn checkout https://github.com/uber/horovod/trunk/examples && \\\n    rm -rf /examples/.svn && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR \"/examples\"\n"
}