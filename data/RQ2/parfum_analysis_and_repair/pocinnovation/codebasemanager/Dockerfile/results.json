{
  "startTime": 1674220851774,
  "endTime": 1674220853028,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Start from golang base image\n#FROM golang:alpine as builder\nFROM golang:1.14.6-alpine as builder\n#FROM golang:rc-alpine3.12 as builder\n\n# ENV GO111MODULE=on\n\n# Add Image info\nLABEL name='Golang 1.14 (alpine) Image'\nLABEL maintainer=\"Damien Bernard <damien.bernard@epitech.eu>\"\nLABEL version=\"2.0\"\nLABEL description=\"Temporary Image for Multi stage usage in Cbm\"\n\n# Install git.\n# Git is required for fetching the dependencies.\nRUN apk update                                          \\\n    && apk add --no-cache git \\\n    && apk add --no-cache gcc \\\n    && apk add --no-cache libc-dev\n\n# Set the current working directory inside the container\nWORKDIR /app\n\n# Copy go mod and sum files\nCOPY backend/tests/go.mod .\n\n# Download all dependencies. Dependencies will be cached if the go.mod and the go.sum files are not changed\nRUN go mod download\n\n# Copy the source from the current directory to the working Directory inside the container\nCOPY backend .\n\n# Build the Go app\n#RUN GOOS=linux go build -a -installsuffix cgo -o main .\n#RUN go build -a -o main .\nRUN go build -installsuffix cgo -o main .\n\n# Start a new stage from scratch\nFROM alpine:latest\nLABEL name='CBM - go Rest API'\nLABEL maintainer=\"Damien Bernard <damien.bernard@epitech.eu>\"\nLABEL version=\"1.0\"\nLABEL description=\"Go Api for CBM\"\n\nRUN apk --no-cache add ca-certificates\n\nWORKDIR /root/\n\n# Copy the Pre-built binary file from the previous stage. Observe we also copied the .env file\nCOPY --from=builder /app/main .\n\n# Expose port 8080 to the outside world\n#EXPOSE 8080\nEXPOSE $CBM_PORT\n\n#Command to run the executable\n#CMD [\"./main\"]\nENTRYPOINT ./main\n"
}