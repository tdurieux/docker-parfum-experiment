{
  "startTime": 1674219982168,
  "endTime": 1674219983560,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 18,
        "columnEnd": 77
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 20,
        "columnEnd": 36
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 81,
        "columnEnd": 97
      }
    }
  ],
  "repairedDockerfile": "# -------- Step 1 - Base node --------\n\nFROM node:alpine AS base\n\nRUN apk add --no-cache libc6-compat\n\nWORKDIR /duxcore\nCOPY package.json yarn.lock ./\nCOPY frontend/package.json ./frontend/\nCOPY wrapper/package.json ./wrapper/\n\n# -------- Step 2 - Dependencies --------\n\nFROM base AS dependencies\n\n# Ideally this would have --frozen-lockfile, but it crashes for some reason\nRUN yarn install && yarn cache clean;\n\n# -------- Step 3 - Build wrapper --------\n\nFROM base AS wrapper-builder\n\nCOPY wrapper ./wrapper\nCOPY --from=dependencies /duxcore/node_modules ./node_modules\n\nWORKDIR /duxcore/wrapper\nRUN yarn build && yarn cache clean;\n\n# -------- Step 4 - Build frontend --------\n\nFROM base AS frontend-builder\n\nCOPY frontend ./frontend\nCOPY --from=wrapper-builder /duxcore/wrapper/lib ./wrapper/lib\nCOPY --from=dependencies /duxcore/node_modules ./node_modules\n\nWORKDIR /duxcore/frontend\nRUN yarn build && yarn install --production --ignore-scripts --prefer-offline && yarn cache clean;\n\n# -------- Step 5 - Start frontend --------\n\nFROM node:alpine as frontend-runner\n\nWORKDIR /duxcore\n\n# Copy wrapper\nCOPY --from=wrapper-builder /duxcore/wrapper/lib ./wrapper/lib\n\nENV NODE_ENV production\n\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\nCOPY --from=frontend-builder /duxcore/frontend/public ./frontend/public\nCOPY --from=frontend-builder --chown=nextjs:nodejs /duxcore/frontend/.next ./frontend/.next\nCOPY --from=frontend-builder /duxcore/node_modules ./node_modules\nCOPY --from=frontend-builder /duxcore/frontend/package.json ./frontend/package.json\n\nUSER nextjs\n\nWORKDIR /duxcore/frontend\n\nEXPOSE 3000\n\nCMD [ \"yarn\", \"start\" ]\n\n\n\n"
}