diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/dreamsxin/example/docker/Dockerfile.md b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/dreamsxin/example/docker/Dockerfile.md/repaired.Dockerfile
index 16e7ff0..cf0959e 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/dreamsxin/example/docker/Dockerfile.md
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/dreamsxin/example/docker/Dockerfile.md/repaired.Dockerfile
@@ -13,7 +13,7 @@ touch Dockerfile
 FROM ubuntu  #基础镜像
 MAINTAINER roubin "test@example.com"  #作者和联系方式
 RUN apt-get update
-RUN apt-get install -y nginx #安装web服务
+RUN apt-get install --no-install-recommends -y nginx && rm -rf /var/lib/apt/lists/*; #安装web服务
 RUN echo 'hi, I am in your container' > /usr/share/nginx/html/index.html
 EXPOSE 80  #开放80口
 ```
@@ -59,11 +59,11 @@ docker port webserver
 
 通过-f参数指定Dockerfile路径，进行构建image
 ```shell
-docker build -f /path/to/a/Dockerfile . 
+docker build -f /path/to/a/Dockerfile .
 ```
 或者，Dockerfile在当前目录，使用
 ```shell
-docker build  . 
+docker build  .
 ```
 使用-t参数，指定image名称
 
@@ -243,21 +243,21 @@ LABEL multi.label1="value1" \
 设置指令，该指令会将容器中的端口映射成宿主机器中的某个端口。当你需要访问容器的时候，可以不是用容器的IP地址而是使用宿主机器的IP地址和映射后的端口。要完成整个操作需要两个步骤，首先在Dockerfile使用EXPOSE设置需要映射的容器端口，然后在运行容器的时候指定-p选项加上EXPOSE设置的端口，这样EXPOSE设置的端口号会被随机映射成宿主机器中的一个端口号。也可以指定需要映射到宿主机器的那个端口，这时要确保宿主机器上的端口号没有被使用。EXPOSE指令可以一次设置多个端口号，相应的运行容器的时候，可以配套的多次使用-p选项。
 
 - EXPOSE <port> [<port>...]
-映射一个端口  
-- EXPOSE port1  
+映射一个端口 
+- EXPOSE port1 
 相应的运行容器使用的命令
 ```shell
-docker run -p port1 image  
+docker run -p port1 image 
 ```
-映射多个端口  
-- EXPOSE port1 port2 port3  
-相应的运行容器使用的命令  
+映射多个端口 
+- EXPOSE port1 port2 port3 
+相应的运行容器使用的命令 
 ```shell
 docker run -p port1 -p port2 -p port3 image
 ```
 还可以指定需要映射到宿主机器上的某个端口号
 ```shell
-docker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image  
+docker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image 
 ```
 对于一个运行的容器，可以使用docker port加上容器中需要映射的端口和容器的ID来查看该端口号在宿主机器上的映射端口。
 
@@ -310,17 +310,17 @@ COPY test /absoluteDir/  # adds "test" to /absoluteDir/
 当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么CMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。
 
 ```dockerfile
-# CMD指令将不会被执行，只有ENTRYPOINT指令被执行  
-CMD echo “Hello, World!”  
-ENTRYPOINT ls -l  
+# CMD指令将不会被执行，只有ENTRYPOINT指令被执行 
+CMD echo “Hello, World!” 
+ENTRYPOINT ls -l 
 ```
 
 另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执行命令，而不能指定参数。
 
 ```dockerfile
-FROM ubuntu  
-CMD ["-l"]  
-ENTRYPOINT ["/usr/bin/ls"]  
+FROM ubuntu 
+CMD ["-l"] 
+ENTRYPOINT ["/usr/bin/ls"] 
 ```
 
 docker run image命令的参数，将会追加到ENTRYPOINT命令以exec方式的参数之后，并且会覆盖所有CMD指令的参数，可以使用--entrypoint参数覆盖ENTRYPOINT命令的参数。