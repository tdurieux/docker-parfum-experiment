{
  "startTime": 1674216251816,
  "endTime": 1674216253032,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 8,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 8,
        "columnEnd": 41
      }
    }
  ],
  "repairedDockerfile": "FROM alpine:3.12\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN addgroup -S -g 1000 keydb && adduser -S -G keydb -u 999 keydb\nRUN mkdir -p /etc/keydb\nARG BRANCH\nRUN set -eux; \\\n\n        apk add --no-cache su-exec; \\\n        apk add --no-cache --virtual .build-deps \\\n                coreutils \\\n                gcc \\\n                linux-headers \\\n                make \\\n                musl-dev \\\n                openssl-dev \\\n                git \\\n                util-linux-dev \\\n                curl-dev \\\n                g++ \\\n                libunwind-dev \\\n                bash \\\n                perl \\\n                git \\\n        ; \\\n        cd /tmp && git clone --branch $BRANCH https://github.com/Snapchat/KeyDB.git --recursive; \\\n        cd /tmp/KeyDB; \\\n        # disable protected mode as it relates to docker\n        grep -E '^ *createBoolConfig[(]\"protected-mode\",.*, *1 *,.*[)],$' ./src/config.cpp; \\\n        sed -ri 's!^( *createBoolConfig[(]\"protected-mode\",.*, *)1( *,.*[)],)$!\\10\\2!' ./src/config.cpp; \\\n        grep -E '^ *createBoolConfig[(]\"protected-mode\",.*, *0 *,.*[)],$' ./src/config.cpp; \\\n        make -j$(nproc) BUILD_TLS=yes; \\\n        cd src; \\\n        strip keydb-cli keydb-benchmark keydb-check-rdb keydb-check-aof keydb-diagnostic-tool keydb-sentinel keydb-server; \\\n        mv keydb-server keydb-cli keydb-benchmark keydb-check-rdb keydb-check-aof keydb-diagnostic-tool keydb-sentinel /usr/local/bin/; \\\n        runDeps=\"$( \\\n                scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n                        | tr ',' '\\n' \\\n                        | sort -u \\\n                        | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n        )\"; \\\n        apk add --no-cache --no-network --virtual .keydb-rundeps $runDeps; \\\n        apk del --no-network .build-deps; \\\n        # create working directories and organize files\n        mkdir /data && chown keydb:keydb /data; \\\n        mkdir /flash && chown keydb:keydb /flash; \\\n        mkdir -p /etc/keydb; \\\n        cp /tmp/KeyDB/keydb.conf /etc/keydb/; \\\n        sed -i 's/^\\(daemonize .*\\)$/# \\1/' /etc/keydb/keydb.conf; \\\n        sed -i 's/^\\(dir .*\\)$/# \\1\\ndir \\/data/' /etc/keydb/keydb.conf; \\\n        sed -i 's/^\\(logfile .*\\)$/# \\1/' /etc/keydb/keydb.conf; \\\n        sed -i 's/protected-mode yes/protected-mode no/g' /etc/keydb/keydb.conf; \\\n        sed -i 's/^\\(bind .*\\)$/# \\1/' /etc/keydb/keydb.conf; \\\n        ln -s keydb-cli redis-cli; \\\n        cd /etc/keydb; \\\n        ln -s keydb.conf redis.conf; \\\n        rm -rf /tmp/*\n# generate entrypoint script\nRUN set -eux; \\\n        echo '#!/bin/sh' > /usr/local/bin/docker-entrypoint.sh; \\\n        echo 'set -e' >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo \"# first arg is '-f' or '--some-option'\" >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo \"# or first arg is `something.conf`\" >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo 'if [ \"${1#-}\" != \"$1\" ] || [ \"${1%.conf}\" != \"$1\" ]; then' >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo '        set -- keydb-server \"$@\"' >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo 'fi' >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo \"# allow the container to be started with `--user`\" >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo 'if [ \"$1\" = \"keydb-server\" -a \"$(id -u)\" = \"0\" ]; then' >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo \"        find . \\! -user keydb -exec chown keydb '{}' +\" >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo '        exec su-exec keydb \"$0\" \"$@\"' >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo 'fi' >> /usr/local/bin/docker-entrypoint.sh; \\\n        echo 'exec \"$@\"' >> /usr/local/bin/docker-entrypoint.sh; \\\n        chmod +x /usr/local/bin/docker-entrypoint.sh\nVOLUME /data\nWORKDIR /data\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 6379\nCMD [\"keydb-server\", \"/etc/keydb/keydb.conf\"]\n"
}