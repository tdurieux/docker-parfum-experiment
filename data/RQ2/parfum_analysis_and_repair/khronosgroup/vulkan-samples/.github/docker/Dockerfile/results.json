{
  "startTime": 1674248663460,
  "endTime": 1674248664719,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 18,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 18,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 42,
        "columnStart": 22,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 60,
        "columnStart": 7,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 42,
        "columnStart": 22,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 60,
        "columnStart": 7,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2022, Arm Limited and Contributors\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 the \"License\";\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:20.04\n\n# Vulkan Samples Docker\n# This image is using the the KhronosGroup/Vulkan-Samples project\n#\n# When adding new dependencies the /tmp directory can be used for building and installation\n# This is cleaned at the end of the docker build\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        wget \\\n        alien \\\n        git \\\n        libssl-dev \\\n        build-essential \\\n        checkinstall \\\n        dos2unix \\\n        unzip \\\n        openjdk-11-jdk \\\n        python3 \\\n        python3-pip \\\n        flex \\\n        libglu1-mesa-dev \\\n        xorg-dev \\\n        adb \\\n        software-properties-common && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 --no-cache-dir install \\\n    pyyaml \\\n    requests\n\n# Install Clang-Format and Clang-Tidy\n# Clang-Tidy-9 required for Doxygen\nENV LLVM_VERSION=10\n\nRUN wget -O- https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n    && apt-add-repository \"deb http://apt.llvm.org/focal/ llvm-toolchain-focal-$LLVM_VERSION main\" \\\n    && apt-add-repository \"deb http://apt.llvm.org/focal/ llvm-toolchain-focal-9 main\" \\\n    && apt-get -yqq update \\\n    && apt-get -yqq --no-install-recommends install \\\n        clang-format-$LLVM_VERSION \\\n        clang-tidy-$LLVM_VERSION \\\n        clang-tidy-9 \\\n        ccache && rm -rf /var/lib/apt/lists/*;\n\n# Install Gradle\nENV GRADLE_VERSION_MAJOR=7 \\\n    GRADLE_VERSION_MINOR=0 \\\n    GRADLE_VERSION_PATCH=2 \\\n    GRADLE_HOME=/usr/local/gradle\n\nENV GRADLE_VERSION=$GRADLE_VERSION_MAJOR.$GRADLE_VERSION_MINOR.$GRADLE_VERSION_PATCH\n\nRUN wget -q https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip -O /tmp/gradle.zip \\\n    && unzip -qq /tmp/gradle.zip -d /usr/local \\\n    && mv /usr/local/gradle-* $GRADLE_HOME\n\n# Configure Android env variables\nENV ANDROID_SDK=/usr/local/android-sdk \\\n    ANDROID_NDK=/usr/local/android-ndk\nENV ANDROID_SDK_ROOT=$ANDROID_SDK \\\n    ANDROID_HOME=$ANDROID_SDK \\\n    ANDROID_SDK_TOOLS=$ANDROID_SDK/cmdline-tools \\\n    ANDROID_NDK_ROOT=$ANDROID_NDK \\\n    ANDROID_NDK_ARM=$ANDROID_NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64\nENV PATH=\"$PATH:$ANDROID_HOME/platform-tools:${ANDROID_SDK_TOOLS}/tools/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/bin:$GRADLE_HOME/bin:/usr/local/doxygen/bin\"\nRUN mkdir -p $ANDROID_HOME\n\n# Configure Android NDK\nENV NDK_VERSION=r23\n\nRUN set -x && wget -q https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux.zip -O /tmp/android-ndk.zip \\\n    && unzip -qq /tmp/android-ndk.zip -d /usr/local \\\n    && mv /usr/local/android-ndk-* $ANDROID_NDK\n\n# Confugre SDK Tools\nENV SDK_TOOLS_VERSION=6514223\n\nADD files/package-list.txt $ANDROID_HOME/package-list.txt\n\nRUN set -x && wget -q https://dl.google.com/android/repository/commandlinetools-linux-${SDK_TOOLS_VERSION}_latest.zip -O /tmp/sdk-tools-linux.zip \\\n    && echo ${ANDROID_SDK_TOOLS} \\\n    && mkdir -p ${ANDROID_SDK_TOOLS} \\\n    && unzip -qq /tmp/sdk-tools-linux.zip -d ${ANDROID_SDK_TOOLS} \\\n    && echo y | $ANDROID_SDK_TOOLS/tools/bin/sdkmanager --package_file=$ANDROID_HOME/package-list.txt --verbose\n\n# Install Doxygen\nENV DOXYGEN_VERSION_MAJOR=1 \\\n    DOXYGEN_VERSION_MINOR=9 \\\n    DOXYGEN_VERSION_PATCH=1\n\nENV DOXYGEN_VERSION=$DOXYGEN_VERSION_MAJOR.$DOXYGEN_VERSION_MINOR.$DOXYGEN_VERSION_PATCH\n\nRUN wget https://doxygen.nl/files/doxygen-$DOXYGEN_VERSION.linux.bin.tar.gz -O /tmp/doxygen.tar.gz \\\n    && tar -xzf /tmp/doxygen.tar.gz -C /usr/local \\\n    && mv /usr/local/doxygen-* /usr/local/doxygen && rm /tmp/doxygen.tar.gz\n\n# Install CMake\nENV CMAKE_VERSION_MAJOR=3 \\\n    CMAKE_VERSION_MINOR=17 \\\n    CMAKE_VERSION_PATCH=3\n\nENV CMAKE_VERSION=$CMAKE_VERSION_MAJOR.$CMAKE_VERSION_MINOR.$CMAKE_VERSION_PATCH\n\nRUN set -x && echo \"Installing $CMAKE_VERSION\" \\\n    && apt-get remove --purge --auto-remove cmake \\\n    && wget https://cmake.org/files/v$CMAKE_VERSION_MAJOR.$CMAKE_VERSION_MINOR/cmake-$CMAKE_VERSION.tar.gz -O /tmp/cmake.tar.gz \\\n    && cd /tmp && tar -xzvf /tmp/cmake.tar.gz \\\n    && cd /tmp/cmake-${CMAKE_VERSION} \\\n    && ./bootstrap \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd ~/ && cmake --version && rm /tmp/cmake.tar.gz\n\n# Install Latest ImageMagick\nRUN wget https://www.imagemagick.org/download/ImageMagick.tar.gz -O /tmp/ImageMagick.tar.gz \\\n    && cd /tmp && tar -xf /tmp/ImageMagick.tar.gz \\\n    && cd /tmp/ImageMagick-* \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && ldconfig /usr/local/lib && rm /tmp/ImageMagick.tar.gz\n\n# Create lexer used in snake_case.py\nADD scripts/vk_convert.lex /tmp/vk_convert.lex\nRUN set -x \\\n    && cd /tmp \\\n    && flex -+ vk_convert.lex \\\n    && gcc lex.yy.cc -ll -lstdc++ \\\n    && mv ./a.out /usr/local/bin\n\n# Add Other scripts\nADD scripts/check_copyright_headers.py /usr/local/bin/check_copyright_headers.py\nADD scripts/snake_case.py /usr/local/bin/snake_case.py\nADD scripts/run-clang-tidy.py /usr/local/bin/run-clang-tidy.py\nADD scripts/clang_format.py /usr/local/bin/clang_format.py\n\n# Convert script file endings from dos to unix.\n# Fixes an issue when trying to run the script from inside the docker container\nRUN set -x \\\n    && dos2unix /usr/local/bin/check_copyright_headers.py \\\n    && dos2unix /usr/local/bin/snake_case.py \\\n    && dos2unix /usr/local/bin/run-clang-tidy.py \\\n    && dos2unix /usr/local/bin/clang_format.py\n\n# Finalise script setup\nRUN set -x \\\n    && git config --global clangFormat.binary clang-format-10 \\\n    && git config --global clangFormat.style file \\\n    && git config --global clangFormat.extensions h,hpp,c,cpp \\\n    && chmod +x /usr/local/bin/snake_case.py \\\n    && chmod +x /usr/local/bin/run-clang-tidy.py \\\n    && chmod +x /usr/local/bin/clang_format.py\n\n# Remove all files created in the /tmp folder\n# Dependencies should be installed above this command\nRUN rm -rf /tmp/*\n"
}