{
  "startTime": 1674254397460,
  "endTime": 1674254398595,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 8,
        "columnEnd": 120
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 8,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.suse.com/bci/bci-base:15.3\n\nARG DAPPER_HOST_ARCH=amd64\nARG http_proxy\nARG https_proxy\nENV HOST_ARCH=${DAPPER_HOST_ARCH} ARCH=${DAPPER_HOST_ARCH}\nENV PROTOBUF_VER=3.18.0\n\n# Setup environment\nENV PATH /go/bin:$PATH\nENV DAPPER_DOCKER_SOCKET true\nENV DAPPER_ENV TAG REPO\nENV DAPPER_OUTPUT bin\nENV DAPPER_RUN_ARGS --privileged --tmpfs /go/src/github.com/longhorn/longhorn-engine/integration/.venv:exec --tmpfs /go/src/github.com/longhorn/longhorn-engine/integration/.tox:exec -v /dev:/host/dev -v /proc:/host/proc\nENV DAPPER_SOURCE /go/src/github.com/longhorn/longhorn-engine\nWORKDIR ${DAPPER_SOURCE}\n\nRUN zypper -n addrepo --refresh https://download.opensuse.org/repositories/system:/snappy/SLE_15/system:snappy.repo && \\\n    zypper -n addrepo --refresh https://download.opensuse.org/repositories/devel:tools:scm/15.3/devel:tools:scm.repo && \\\n    zypper --gpg-auto-import-keys ref\n\n# Install packages\nRUN zypper -n install cmake wget curl git less file gcc \\\n    libkmod-devel libnl3-devel linux-glibc-devel pkg-config psmisc tox qemu-tools fuse python3-devel \\\n    bash-completion librdmacm1 librdmacm-utils libibverbs xsltproc docbook-xsl-stylesheets \\\n    perl-Config-General libaio-devel glibc-devel-static glibc-devel sg3_utils iptables libltdl7 \\\n    python3-pip uuid-runtime libdevmapper1_03 iproute2 jq unzip zlib-devel zlib-devel-static \\\n    rpm-build rdma-core-devel gcc-c++ docker && \\\n    rm -rf rm -rf /var/cache/zypp/*\n\n# needed for ${!var} substitution\nRUN rm -f /bin/sh && ln -s /bin/bash /bin/sh\n\nRUN if [ ${ARCH} == \"s390x\" ]; then \\\n        ln -s /usr/bin/gcc /usr/bin/s390x-linux-gnu-gcc;\\\n    fi\n\n# Install Go & tools\nENV GOLANG_ARCH_amd64=amd64 GOLANG_ARCH_arm64=arm64 GOLANG_ARCH_s390x=s390x GOLANG_ARCH=GOLANG_ARCH_${ARCH} \\\n    GOPATH=/go PATH=/go/bin:/usr/local/go/bin:${PATH} SHELL=/bin/bash\nRUN wget -O - https://storage.googleapis.com/golang/go1.14.15.linux-${!GOLANG_ARCH}.tar.gz | tar -xzf - -C /usr/local && \\\n    go get github.com/rancher/trash && go get -u golang.org/x/lint/golint\n\n# Minio\nENV MINIO_URL_amd64=https://dl.min.io/server/minio/release/linux-amd64/archive/minio.RELEASE.2021-12-20T22-07-16Z \\\n    MINIO_URL_arm64=https://dl.min.io/server/minio/release/linux-arm64/archive/minio.RELEASE.2021-12-20T22-07-16Z \\\n    MINIO_URL_s390x=https://dl.min.io/server/minio/release/linux-s390x/archive/minio.RELEASE.2021-12-20T22-07-16Z \\\n\tMINIO_URL=MINIO_URL_${ARCH}\n\nRUN wget ${!MINIO_URL} -O /usr/bin/minio && chmod +x /usr/bin/minio\n\n# Install libqcow\nRUN wget -O - https://s3-us-west-1.amazonaws.com/rancher-longhorn/libqcow-alpha-20181117.tar.gz | tar xvzf - -C /usr/src\nRUN cd /usr/src/libqcow-20181117 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN cd /usr/src/libqcow-20181117 && \\\n    make -j$(nproc) && \\\n    make install\nRUN ldconfig\n\n# GRPC dependencies\n# GRPC health probe\nENV GRPC_HEALTH_PROBE_amd64=https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.2/grpc_health_probe-linux-amd64 \\\n    GRPC_HEALTH_PROBE_arm64=https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.2/grpc_health_probe-linux-arm64 \\\n    GRPC_HEALTH_PROBE_s390x=https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.2/grpc_health_probe-linux-s390x \\\n\tGRPC_HEALTH_PROBE=GRPC_HEALTH_PROBE_${ARCH}\n\nRUN wget ${!GRPC_HEALTH_PROBE} -O /usr/local/bin/grpc_health_probe && \\\n    chmod +x /usr/local/bin/grpc_health_probe\n\n# protoc\nENV PROTOC_amd64=https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VER}/protoc-${PROTOBUF_VER}-linux-x86_64.zip \\\n\tPROTOC_arm64=https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VER}/protoc-${PROTOBUF_VER}-linux-aarch_64.zip \\\n\tPROTOC_s390x=https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VER}/protoc-${PROTOBUF_VER}-linux-s390_64.zip \\\n\tPROTOC=PROTOC_${ARCH}\n\nRUN cd /usr/src && \\\n\twget ${!PROTOC} -O protoc_${ARCH}.zip && \\\n    unzip protoc_${ARCH}.zip -d /usr/local/\n\n# protoc-gen-go\nRUN cd /go/src/github.com/ && \\\n    mkdir golang/ && \\\n    cd golang && \\\n    git clone https://github.com/golang/protobuf.git && \\\n    cd protobuf && \\\n    git checkout v1.3.2 && \\\n    cd protoc-gen-go && \\\n    go build && \\\n    cp protoc-gen-go /usr/local/bin\n\n# python grpc-tools\nRUN if [ \"${ARCH}\" == \"s390x\" ]; then \\\n        zypper -n in libopenssl-devel && \\\n        GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=True pip3 --no-cache-dir install grpcio==1.25.0 grpcio_tools==1.25.0 protobuf==${PROTOBUF_VER}; \\\n    else \\\n        pip3 install --no-cache-dir grpcio==1.25.0 grpcio_tools==1.25.0 protobuf==${PROTOBUF_VER}; \\\n    fi\n\n# buf\nENV GO111MODULE=on\nRUN go get \\\n  github.com/bufbuild/buf/cmd/buf@v0.26.0 \\\n  github.com/bufbuild/buf/cmd/protoc-gen-buf-check-breaking@v0.26.0 \\\n  github.com/bufbuild/buf/cmd/protoc-gen-buf-check-lint@v0.26.0\n\n# Build liblonghorn\nRUN cd /usr/src && \\\n    git clone https://github.com/rancher/liblonghorn.git && \\\n    cd liblonghorn && \\\n    git checkout 6544c2432d543137a198e4a779f676369dbd9e82 && \\\n    make && \\\n    make install\n\n# Build TGT\nRUN cd /usr/src && \\\n    git clone https://github.com/rancher/tgt.git && \\\n    cd tgt && \\\n    git checkout e042fdd3616ca90619637b5826695a3de9b5dd8e && \\\n    make && \\\n    make install\n\n# Build cache for tox\nRUN mkdir integration/\nCOPY integration/setup.py integration/tox.ini integration/requirements.txt integration/flake8-requirements.txt integration/\nRUN cd integration && \\\n    if [ \"${ARCH}\" == \"s390x\" ]; then \\\n        GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=True tox --notest;\\\n    else \\\n        tox --notest; \\\n    fi\n\n# Build longhorn-instance-manager for integration testing\nRUN cd /go/src/github.com/longhorn && \\\n    git clone https://github.com/longhorn/longhorn-instance-manager.git && \\\n    cd longhorn-instance-manager && \\\n    git checkout v1_20210731 && \\\n    go build -o ./longhorn-instance-manager && \\\n    cp -r integration/rpc/ ${DAPPER_SOURCE}/integration/rpc/ && \\\n    cp longhorn-instance-manager /usr/local/bin\n\nVOLUME /tmp\nENV TMPDIR /tmp\nENTRYPOINT [\"./scripts/entry\"]\nCMD [\"ci\"]\n"
}