{
  "startTime": 1674248768531,
  "endTime": 1674248769479,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedDockerfile": "FROM python:3.7\n\nENV PYTHONUNBUFFERED 1\nENV PYTHONDONTWRITEBYTECODE 1\nENV DEBIAN_FRONTEND noninteractive\n\nWORKDIR /app\n\nRUN apt-get clean \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n       locales \\\n       locales-all \\\n       apt-utils \\\n    && locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\nRUN apt-get install --no-install-recommends -y \\\n       build-essential \\\n       libpq-dev \\\n       postgresql-client \\\n       curl \\\n       binutils \\\n       libproj-dev \\\n       gdal-bin && rm -rf /var/lib/apt/lists/*;\n\n# Install Poetry & ensure it is in $PATH\nRUN curl -f -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | POETRY_PREVIEW=1 python\nENV PATH \"/root/.poetry/bin:/opt/venv/bin:${PATH}\"\n\n# Only copying these files here in order to take advantage of Docker cache. We only want the\n# next stage (poetry install) to run if these files change, but not the rest of the app.\nCOPY pyproject.toml poetry.lock ./\n\n# Currently poetry install is significantly slower than pip install, so we're creating a\n# requirements.txt output and running pip install with it.\n# Follow this issue: https://github.com/python-poetry/poetry/issues/338\n# Setting --without-hashes because of this issue: https://github.com/pypa/pip/issues/4995\nRUN poetry config virtualenvs.create false \\\n                && poetry export --without-hashes -f requirements.txt --dev \\\n                |  poetry run pip install -r /dev/stdin \\\n                && poetry debug\n\nCOPY . /app\n\n# Because initially we only copy the lock and pyproject file, we can only install the dependencies\n# in the RUN above, as the `packages` portion of the pyproject.toml file is not\n# available at this point. Now, after the whole package has been copied in, we run `poetry install`\n# again to only install packages, scripts, etc. (and thus it should be very quick).\n# See this issue for more context: https://github.com/python-poetry/poetry/issues/1899\nRUN poetry install --no-interaction\n\nRUN mkdir ./_static ./_media || true\n\nCOPY ./devops/entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nRUN chmod +x ./manage.py\n\nCMD /entrypoint.sh\n\nHEALTHCHECK CMD curl -s -S -H http://$HOSTNAME:8000\n\nEXPOSE 8000"
}