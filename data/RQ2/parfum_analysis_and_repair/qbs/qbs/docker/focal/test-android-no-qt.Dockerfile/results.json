{
  "startTime": 1674215577139,
  "endTime": 1674215578252,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 155
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Android SDK/NDK for testing Qbs\n#\nFROM ubuntu:focal\nLABEL Description=\"Ubuntu test environment for Qbs for Android\"\n\n# Allow colored output on command line.\nENV TERM=xterm-color\n\n#\n# Make it possible to change UID/GID in the entrypoint script. The docker\n# container usually runs as root user on Linux hosts. When the Docker container\n# mounts a folder on the host and creates files there, those files would be\n# owned by root instead of the current user. Thus we create a user here who's\n# UID will be changed in the entrypoint script to match the UID of the current\n# host user.\n#\nARG USER_UID=1000\nARG USER_NAME=devel\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -qq -y \\\n        ca-certificates \\\n        gosu \\\n        sudo && \\\n    groupadd -g ${USER_UID} ${USER_NAME} && \\\n    useradd -s /bin/bash -u ${USER_UID} -g ${USER_NAME} -o -c \"\" -m ${USER_NAME} && \\\n    usermod -a -G sudo ${USER_NAME} && \\\n    echo \"%devel         ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers && rm -rf /var/lib/apt/lists/*;\n\nCOPY docker/focal/entrypoint.sh /sbin/entrypoint.sh\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\n\n# Qbs build dependencies\nRUN apt-get update -qq && \\\n    apt-get install -qq -y --no-install-recommends \\\n        ca-certificates \\\n        curl \\\n        libasan5 \\\n        libglib2.0-0 \\\n        openjdk-8-jdk-headless \\\n        p7zip-full \\\n        unzip && rm -rf /var/lib/apt/lists/*;\n\nENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\nRUN echo \"export JAVA_HOME=${JAVA_HOME}\" > /etc/profile.d/android.sh && \\\n    echo \"export PATH=${JAVA_HOME}/bin:\\${PATH}\" >> /etc/profile.d/android.sh\n\nARG ANDROID_NDK_VERSION\n\nENV ANDROID_HOME=\"/home/${USER_NAME}/android\"\nENV ANDROID_SDK_ROOT=${ANDROID_HOME}\nENV ANDROID_NDK_ROOT=${ANDROID_HOME}/\"ndk\"/${ANDROID_NDK_VERSION}\nENV PATH=\"${JAVA_HOME}:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/cmdline-tools/bin:$PATH\"\nRUN echo \"export ANDROID_HOME=/home/${USER_NAME}/android\" >> /etc/profile.d/android.sh && \\\n    echo \"export ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}\" >> /etc/profile.d/android.sh && \\\n    echo \"export ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}\" >> /etc/profile.d/android.sh && \\\n    echo \"export PATH=${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/cmdline-tools/bin:\\$PATH\" >> /etc/profile.d/android.sh\n\n#\n# We ned to run the following steps as the target user\n#\nUSER ${USER_NAME}\nRUN mkdir ${ANDROID_HOME}\n\n# Get Android command line tools\nARG COMMAND_LINE_TOOLS_VERSION=\"6858069\"\nRUN curl -f -s https://dl.google.com/android/repository/commandlinetools-linux-${COMMAND_LINE_TOOLS_VERSION}_latest.zip > ${ANDROID_HOME}/commandlinetools.zip && \\\n    unzip ${ANDROID_HOME}/commandlinetools.zip -d ${ANDROID_HOME} && \\\n    rm -v ${ANDROID_HOME}/commandlinetools.zip\n\n# Accept SDK license\nARG ANDROID_PLATFORM=\"android-29\"\nARG BUILD_TOOLS=\"29.0.2\"\nRUN yes | sdkmanager \"--sdk_root=${ANDROID_HOME}\" --verbose --licenses && \\\n          sdkmanager \"--sdk_root=${ANDROID_HOME}\" --update && \\\n          sdkmanager \"--sdk_root=${ANDROID_HOME}\" \"platforms;${ANDROID_PLATFORM}\"\n\nRUN yes | sdkmanager \"--sdk_root=${ANDROID_HOME}\" \"build-tools;${BUILD_TOOLS}\"\nRUN yes | sdkmanager \"--sdk_root=${ANDROID_HOME}\" \"platform-tools\"\nRUN yes | sdkmanager \"--sdk_root=${ANDROID_HOME}\" \"tools\"\nRUN yes | sdkmanager \"--sdk_root=${ANDROID_HOME}\" \"ndk;${ANDROID_NDK_VERSION}\"\n\nRUN /usr/lib/jvm/java-8-openjdk-amd64/bin/keytool -genkey -keystore /home/${USER_NAME}/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname 'CN=Android Debug,O=Android,C=US'\n\n# Install ndk samples in ${ANDROID_NDK_ROOT}/samples\nRUN cd ${ANDROID_NDK_ROOT} && \\\n    curl -f -sLO https://github.com/android/ndk-samples/archive/master.zip && \\\n    unzip -q master.zip && \\\n    rm -v master.zip && \\\n    mv ndk-samples-master samples\n\n# Install android-BasicMediaDecoder in ${ANDROID_SDK_ROOT}/samples\nRUN mkdir ${ANDROID_SDK_ROOT}/samples && \\\n    cd ${ANDROID_SDK_ROOT}/samples && \\\n    curl -f -sLO https://github.com/googlearchive/android-BasicMediaDecoder/archive/master.zip && \\\n    unzip -q master.zip && \\\n    rm -v master.zip && \\\n    mv android-BasicMediaDecoder-master android-BasicMediaDecoder\n\n# Download buildtool to generate aab packages in ${ANDROID_SDK_ROOT}\nRUN cd ${ANDROID_SDK_ROOT} && \\\n    curl -f -sLO https://github.com/google/bundletool/releases/download/1.3.0/bundletool-all-1.3.0.jar\n\nUSER root\n\n"
}