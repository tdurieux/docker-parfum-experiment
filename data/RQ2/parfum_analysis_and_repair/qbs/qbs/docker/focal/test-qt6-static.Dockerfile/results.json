{
  "startTime": 1674255275854,
  "endTime": 1674255277658,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 84,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 134,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 134,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 149,
        "lineEnd": 187,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Testing Qbs with static qt6\n#\nFROM ubuntu:focal\nLABEL Description=\"Ubuntu static qt6 test environment for Qbs\"\nARG QT_VERSION\nARG QTCREATOR_VERSION\n\n# Allow colored output on command line.\nENV TERM=xterm-color\n\n#\n# Make it possible to change UID/GID in the entrypoint script. The docker\n# container usually runs as root user on Linux hosts. When the Docker container\n# mounts a folder on the host and creates files there, those files would be\n# owned by root instead of the current user. Thus we create a user here who's\n# UID will be changed in the entrypoint script to match the UID of the current\n# host user.\n#\nARG USER_UID=1000\nARG USER_NAME=devel\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -qq -y \\\n        wget \\\n        ca-certificates \\\n        gosu \\\n        software-properties-common \\\n        sudo && \\\n    groupadd -g ${USER_UID} ${USER_NAME} && \\\n    useradd -s /bin/bash -u ${USER_UID} -g ${USER_NAME} -o -c \"\" -m ${USER_NAME} && \\\n    usermod -a -G sudo ${USER_NAME} && \\\n    echo \"%devel         ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers && rm -rf /var/lib/apt/lists/*;\n\nCOPY docker/focal/entrypoint.sh /sbin/entrypoint.sh\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\n\nRUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --batch --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null\nRUN echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null\nRUN cat /etc/apt/sources.list.d/kitware.list\n\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=\"noninteractive\" apt-get install -qq -y --no-install-recommends \\\n    build-essential \\\n    git \\\n    perl \\\n    cmake \\\n    python \\\n    zlib1g-dev \\\n    libzstd-dev \\\n    libdbus-1-dev \\\n    libglib2.0-dev \\\n    libssl-dev \\\n    libdrm-dev \\\n    libegl-dev \\\n    libwayland-dev \\\n    libvulkan-dev \\\n    libicu-dev \\\n    libb2-dev \\\n    libsystemd-dev \\\n    libfontconfig1-dev \\\n    libfreetype6-dev \\\n    libx11-dev \\\n    libx11-xcb-dev \\\n    libxext-dev \\\n    libxfixes-dev \\\n    libxi-dev \\\n    libxrender-dev \\\n    libxcb1-dev \\\n    libxcb-glx0-dev \\\n    libxcb-keysyms1-dev \\\n    libxcb-image0-dev \\\n    libxcb-shm0-dev \\\n    libxcb-icccm4-dev \\\n    libxcb-sync0-dev \\\n    libxcb-xfixes0-dev \\\n    libxcb-shape0-dev \\\n    libxcb-randr0-dev \\\n    libxcb-render-util0-dev \\\n    libxcb-xinerama0-dev \\\n    libxkbcommon-dev \\\n    libxkbcommon-x11-dev \\\n    libxcb-xinput-dev \\\n    ninja-build \\\n    libudev-dev \\\n    libxcb-cursor-dev \\\n    libxcb-composite0-dev \\\n    libxcb-dri2-0-dev \\\n    libxcb-dri3-dev \\\n    libxcb-ewmh-dev \\\n    libxcb-present-dev \\\n    libxcb-present-dev \\\n    libxcb-record0-dev \\\n    libxcb-res0-dev \\\n    libxcb-screensaver0-dev \\\n    libxcb-sync-dev \\\n    libxcb-util-dev \\\n    libxcb-xf86dri0-dev \\\n    libxcb-xtest0-dev \\\n    libxcb-xv0-dev \\\n    libxcb-xvmc0-dev \\\n    libxcb-damage0-dev \\\n    libxcb-dpms0-dev \\\n    libgstreamer1.0-dev \\\n    apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\nENV QT_HOME=\"/home/${USER_NAME}/qt\"\nUSER ${USER_NAME}\nRUN mkdir ${QT_HOME}\n\nRUN cd ${QT_HOME} && git clone https://code.qt.io/qt/qt5.git\n\nRUN cd ${QT_HOME}/qt5 && git checkout v${QT_VERSION} && perl init-repository\n\nRUN mkdir ${QT_HOME}/static-build && cd ${QT_HOME}/static-build && ../qt5/configure -prefix /opt/Qt/${QT_VERSION}/gcc_64\n\nRUN cd ${QT_HOME}/static-build && cmake --build . --parallel\n\nUSER root\n\nRUN cd ${QT_HOME}/static-build && cmake --install .\n\nFROM ubuntu:focal\nLABEL Description=\"Ubuntu static qt6 test environment for Qbs\"\nARG QT_VERSION\nARG QTCREATOR_VERSION\n\nRUN mkdir -p /opt/Qt\nCOPY --from=0 /opt/Qt/${QT_VERSION} /opt/Qt/${QT_VERSION}\n\n# Allow colored output on command line.\nENV TERM=xterm-color\nARG USER_UID=1000\nARG USER_NAME=devel\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -qq -y \\\n        ca-certificates \\\n        gosu \\\n        software-properties-common \\\n        sudo && \\\n    groupadd -g ${USER_UID} ${USER_NAME} && \\\n    useradd -s /bin/bash -u ${USER_UID} -g ${USER_NAME} -o -c \"\" -m ${USER_NAME} && \\\n    usermod -a -G sudo ${USER_NAME} && \\\n    echo \"%devel         ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers && rm -rf /var/lib/apt/lists/*;\n\nCOPY docker/focal/entrypoint.sh /sbin/entrypoint.sh\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\n\n# Qbs build dependencies\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=\"noninteractive\" apt-get install -qq -y --no-install-recommends \\\n        bison \\\n        build-essential \\\n        ca-certificates \\\n        capnproto \\\n        ccache \\\n        clang-8 \\\n        clang-tidy-8 \\\n        cmake \\\n        curl \\\n        flex \\\n        git \\\n        help2man \\\n        icoutils \\\n        libcapnp-dev \\\n        libdbus-1-3 \\\n        libfreetype6 \\\n        libfontconfig1 \\\n        libgl1-mesa-dev \\\n        libgl1-mesa-glx \\\n        libnanopb-dev \\\n        libprotobuf-dev \\\n        libgrpc++-dev \\\n        libxkbcommon-x11-0 \\\n        nanopb \\\n        ninja-build \\\n        nsis \\\n        pkg-config \\\n        protobuf-compiler \\\n        protobuf-compiler-grpc \\\n        psmisc \\\n        python3-pip \\\n        python3-setuptools \\\n        p7zip-full \\\n        subversion \\\n        unzip \\\n        zip \\\n        libb2-1 \\\n        libpcre++ && \\\n    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 100 && \\\n    update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 100 && \\\n    update-alternatives --install /usr/bin/clang-check clang-check /usr/bin/clang-check-8 100 && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3 100 && \\\n    pip install --no-cache-dir beautifulsoup4 lxml protobuf pyyaml && rm -rf /var/lib/apt/lists/*;\n\nENV LLVM_INSTALL_DIR=/usr/lib/llvm-8\n\n#\n# Install Qbs for Linux from qt.io\n#\nCOPY scripts/install-qt.sh install-qt.sh\n\nRUN ./install-qt.sh --version ${QTCREATOR_VERSION} qtcreator && \\\n    echo \"export PATH=/opt/Qt/${QT_VERSION}/gcc_64/bin:/opt/Qt/Tools/QtCreator/bin:\\${PATH}\" > /etc/profile.d/qt.sh\n\nENV PATH=/opt/Qt/${QT_VERSION}/gcc_64/bin:/opt/Qt/Tools/QtCreator/bin:${PATH}\n\n# Configure Qbs\nUSER $USER_NAME\nRUN qbs-setup-toolchains /usr/bin/g++ gcc && \\\n    qbs-setup-qt /opt/Qt/${QT_VERSION}/gcc_64/bin/qmake qt-gcc_64 && \\\n    qbs config profiles.qt-gcc_64.baseProfile gcc && \\\n    qbs config defaultProfile qt-gcc_64\n\n# Switch back to root user for the entrypoint script.\nUSER root\n\n# Work-around for QTBUG-79020\nRUN echo \"export QT_NO_GLIB=1\" >> /etc/profile.d/qt.sh\n"
}