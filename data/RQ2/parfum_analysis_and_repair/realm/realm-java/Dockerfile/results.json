{
  "startTime": 1674220114436,
  "endTime": 1674220115767,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 42,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 42,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n# Locales\nRUN apt-get clean && apt-get -y update && apt-get install --no-install-recommends -y locales && locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\nENV LANG \"en_US.UTF-8\"\nENV LANGUAGE \"en_US.UTF-8\"\nENV LC_ALL \"en_US.UTF-8\"\nENV TZ=Europe/Copenhagen\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Set the environment variables\nENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64\nENV JAVA8_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV ANDROID_HOME /opt/android-sdk-linux\n# Need by cmake\nENV ANDROID_NDK_HOME /opt/android-ndk\nENV ANDROID_NDK /opt/android-ndk\nENV PATH ${PATH}:${ANDROID_HOME}/emulator:${ANDROID_HOME}/cmdline-tools/latest:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools\nENV PATH ${PATH}:${NDK_HOME}\nENV NDK_CCACHE /usr/bin/ccache\nENV CCACHE_CPP2 yes\nENV REALM_DISABLE_ANALYTICS true\n\n# Keep the packages in alphabetical order to make it easy to avoid duplication\n# tzdata needs to be installed first. See https://askubuntu.com/questions/909277/avoiding-user-interaction-with-tzdata-when-installing-certbot-in-a-docker-contai\n# `file` is need by the Android Emulator\nRUN DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update -qq \\\n    && apt-get install --no-install-recommends -y tzdata \\\n    && apt-get install --no-install-recommends -y bsdmainutils \\\n                          bridge-utils \\\n                          build-essential \\\n                          ccache \\\n                          curl \\\n                          file \\\n                          git \\\n                          jq \\\n                          libc6 \\\n                          libgcc1 \\\n                          libglu1 \\\n                          libncurses5 \\\n                          libstdc++6 \\\n                          libz1 \\\n                          libvirt-clients \\\n                          libvirt-daemon-system \\\n                          openjdk-11-jdk-headless \\\n                          openjdk-8-jdk-headless \\\n                          qemu-kvm \\\n                          s3cmd \\\n                          unzip \\\n                          virt-manager \\\n                          wget \\\n                          zip \\\n                          ninja-build \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Install the Android SDK\n# See https://developer.android.com/studio/index.html#downloads for latest version\nRUN cd /opt && \\\n    wget -q https://dl.google.com/android/repository/commandlinetools-linux-7302050_latest.zip -O android-tools-linux.zip && \\\n    mkdir --parents ${ANDROID_HOME}/cmdline-tools/latest && \\\n    unzip android-tools-linux.zip -d ${ANDROID_HOME}/cmdline-tools/latest && \\\n    mv ${ANDROID_HOME}/cmdline-tools/latest/cmdline-tools/* ${ANDROID_HOME}/cmdline-tools/latest/ && \\\n    rm -f android-tools-linux.zip\n\n# Grab what's needed in the SDK\nRUN sdkmanager --update\n\n# Accept licenses before installing components, no need to echo y for each component\n# License is valid for all the standard components in versions installed from this file\n# Non-standard components: MIPS system images, preview versions, GDK (Google Glass) and Android Google TV require separate licenses, not accepted there\nRUN yes | sdkmanager --licenses\n\n# SDKs\n# The `yes` is for accepting all non-standard tool licenses.\n# Please keep all sections in descending order!\nRUN yes | sdkmanager \\\n    'build-tools;30.0.3' \\\n    'emulator' \\\n    'extras;android;m2repository' \\\n    'platforms;android-30' \\\n    'platform-tools' \\\n    'ndk;23.1.7779620' \\\n    'system-images;android-29;default;x86'\n\n# Make the SDK universally writable\nRUN chmod -R a+rwX ${ANDROID_HOME}\n\n# Ensure a new enough version of CMake is available.\nRUN cd /opt \\\n    && wget -nv https://cmake.org/files/v3.21/cmake-3.21.4-linux-x86_64.tar.gz \\\n    && tar zxf cmake-3.21.4-linux-x86_64.tar.gz && rm cmake-3.21.4-linux-x86_64.tar.gz\n\n# Workaround for https://issuetracker.google.com/issues/206099937\nRUN ln -s /usr/bin/ninja /opt/cmake-3.21.4-linux-x86_64/bin/ninja\n\nENV PATH \"/opt/cmake-3.21.4-linux-x86_64/bin:$PATH\"\n"
}