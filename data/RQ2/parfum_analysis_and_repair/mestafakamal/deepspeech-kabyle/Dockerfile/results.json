{
  "startTime": 1674251864536,
  "endTime": 1674251865215,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 93,
        "columnStart": 26,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04\n\nARG ds_repo=mozilla/DeepSpeech\nARG ds_branch=02e4c7624063377cdb711d13a0fc8e901818cf1a\nARG ds_sha1=02e4c7624063377cdb711d13a0fc8e901818cf1a\nARG cc_repo=MestafaKamal/CorporaCreator\nARG kenlm_repo=kpu/kenlm\nARG kenlm_branch=87e85e66c99ceff1fab2500a7c60c01da7315eec\n\nARG model_language=kab\n\nARG batch_size=96\nARG n_hidden=2048\nARG epochs=75\nARG learning_rate=0.001\nARG dropout=0.05\nARG lm_alpha=0.65\nARG lm_beta=1.45\nARG beam_width=500\nARG early_stop=1\nARG lm_top_k=500000\n\nARG amp=0\n\nARG duplicate_sentence_count=1\n\nARG lm_evaluate_range=\nARG english_compatible=0\n\n# Make sure we can extract filenames with UTF-8 chars\nENV LANG=C.UTF-8\n\n# Avoid keyboard-configuration step\nENV DEBIAN_FRONTEND noninteractive\n\nENV HOMEDIR /home/trainer\n\nENV VIRTUAL_ENV_NAME ds-train\nENV VIRTUAL_ENV $HOMEDIR/$VIRTUAL_ENV_NAME\nENV DS_DIR $HOMEDIR/ds\nENV CC_DIR $HOMEDIR/cc\n\nENV DS_BRANCH=$ds_branch\nENV DS_SHA1=$ds_sha1\n\nENV MODEL_LANGUAGE=$model_language\n\nENV BATCH_SIZE=$batch_size\nENV N_HIDDEN=$n_hidden\nENV EPOCHS=$epochs\nENV LEARNING_RATE=$learning_rate\nENV DROPOUT=$dropout\nENV LM_ALPHA=$lm_alpha\nENV LM_BETA=$lm_beta\nENV BEAM_WIDTH=$beam_width\nENV LM_TOP_K=$lm_top_k\n\nENV AMP=$amp\n\nENV DUPLICATE_SENTENCE_COUNT=$duplicate_sentence_count\n\nENV LM_EVALUATE_RANGE=$lm_evaluate_range\nENV ENGLISH_COMPATIBLE=$english_compatible\n\nENV EARLY_STOP=$early_stop\n\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\nRUN env\n\n# Get basic packages\nRUN apt-get -qq update && apt-get -qq install -y --no-install-recommends \\\n    build-essential \\\n    curl \\\n    wget \\\n    git \\\n    python3 \\\n    python3-pip \\\n    ca-certificates \\\n    cmake \\\n    libboost-all-dev \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    liblzma-dev \\\n    pkg-config \\\n    g++ \\\n    virtualenv \\\n    unzip \\\n    pixz \\\n    sox \\\n    sudo \\\n    libsox-fmt-all \\\n    locales locales-all \\\n    xz-utils && rm -rf /var/lib/apt/lists/*;\n\nRUN groupadd -g 999 trainer && \\\n    adduser --system --uid 999 --group trainer\n\nRUN echo \"trainer ALL=(root) NOPASSWD:ALL\" > /etc/sudoers.d/trainer && \\\n    chmod 0440 /etc/sudoers.d/trainer\n\n# Below that point, nothing requires being root\nUSER trainer\n\nWORKDIR $HOMEDIR\n\nRUN wget -O - https://gitlab.com/libeigen/eigen/-/archive/3.2.8/eigen-3.2.8.tar.bz2 | tar xj\n\nRUN git clone https://github.com/$kenlm_repo.git && cd kenlm && git checkout $kenlm_branch \\\n    && mkdir -p build \\\n    && cd build \\\n    && EIGEN3_ROOT=$HOMEDIR/eigen-eigen-07105f7124f9 cmake .. \\\n    && make -j\n\nWORKDIR $HOMEDIR\n\nRUN virtualenv --python=/usr/bin/python3 $VIRTUAL_ENV_NAME\n\nRUN git clone https://github.com/$ds_repo.git $DS_DIR\n\nWORKDIR $DS_DIR\n\nRUN git checkout $ds_branch\n\nWORKDIR $DS_DIR\n\nRUN pip install --no-cache-dir --upgrade pip==20.0.2 wheel==0.34.2 setuptools==46.1.3\nRUN DS_NOTENSORFLOW=y pip --no-cache-dir install --upgrade --force-reinstall -e .\nRUN pip install --no-cache-dir --upgrade tensorflow-gpu==1.15.2\n\n\nRUN python util/taskcluster.py \\\n\t--target=\"$(pwd)\" \\\n\t--artifact=\"native_client.tar.xz\" && ls -hal generate_scorer_package\n\n\nRUN TASKCLUSTER_SCHEME=\"https://community-tc.services.mozilla.com/api/index/v1/task/project.deepspeech.tensorflow.pip.%(branch_name)s.%(arch_string)s/artifacts/public/%(artifact_name)s\" python3 util/taskcluster.py \\\n\t--target=\"$(pwd)\" \\\n\t--artifact=\"convert_graphdef_memmapped_format\" \\\n\t--branch=\"r1.15\" && chmod +x convert_graphdef_memmapped_format\n\nWORKDIR $HOMEDIR\n\nRUN git clone https://github.com/$cc_repo.git $CC_DIR\n\nWORKDIR $CC_DIR\n\n# Copy copora patch\nCOPY --chown=trainer:trainer corpora.patch $CC_DIR\n\nRUN patch -p1 < corpora.patch\n\n# Avoid \"error: pandas 1.1.0 is installed but pandas==1.1.4 is required by {'modin'}\"\nRUN pip install --no-cache-dir pandas==1.1.4\n\n# error: parso 0.8.0 is installed but parso<0.8.0,>=0.7.0 is required by {'jedi'}\nRUN pip install --no-cache-dir parso==0.7.0\n\nRUN python3 setup.py install\n\nWORKDIR $HOMEDIR\n\nENV PATH=\"$HOMEDIR/kenlm/build/bin/:$PATH\"\n\n# Copy now so that docker build can leverage caches\nCOPY --chown=trainer:trainer run.sh checks.sh corpora.patch package.sh $HOMEDIR/\n\nCOPY --chown=trainer:trainer ${MODEL_LANGUAGE}/* $HOMEDIR/${MODEL_LANGUAGE}/\n\nCOPY --chown=trainer:trainer ${MODEL_LANGUAGE}/data_kab/* $HOMEDIR/${MODEL_LANGUAGE}/data_kab/\n\nENTRYPOINT \"$HOMEDIR/run.sh\"\n"
}