{
  "startTime": 1674249017700,
  "endTime": 1674249018799,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Copyright (C) 2019 Intel Corporation\n#\n\nFROM centos:8\n\n# Proxy configuration\n#ENV http_proxy  \"http://your.actual_http_proxy.com:your_port\"\n#ENV https_proxy \"https://your.actual_https_proxy.com:your_port\"\n#ENV ftp_proxy   \"http://your.actual_ftp_proxy.com:your_port\"\n\nENV http_proxy  \"http://192.168.3.130:3333\"\nENV https_proxy \"http://192.168.3.130:3333\"\nENV ftp_proxy   \"http://192.168.3.130:3333\"\n\nRUN echo \"proxy=$http_proxy\" >> /etc/yum.conf && \\\n    echo -e \"export http_proxy=$http_proxy\\nexport https_proxy=$https_proxy\\n\\\nexport ftp_proxy=$ftp_proxy\" >> /root/.bashrc\n\nRUN echo \"http_caching=packages\" >> /etc/yum.conf\n\n# username you will docker exec into the container as.\n# It should NOT be your host username so you can easily tell\n# if you are in our out of the container.\nARG MYUNAME=builder\nARG MYUID=1000\n\nENV container=docker\n\n# Download required dependencies by mirror/build processes.\n# Notice there are 3 invocations to yum package manage.\n# 1) Enable EPEL repository.\n# 2) Download required packages.\n# 3) Clean yum cache.\nRUN groupadd -g 751 cgts && \\\n    echo \"mock:x:751:root\" >> /etc/group && \\\n    echo \"mockbuild:x:9001:\" >> /etc/group && \\\n    dnf install -y epel-release && \\\n    dnf install -y anaconda \\\n        #anaconda-help \\\n        anaconda-runtime \\\n        #autoconf-archive \\\n        #autogen \\\n        automake \\\n        bc \\\n        bind \\\n        bind-utils \\\n        cpanminus \\\n        createrepo \\\n       \t#deltarpm \\\n        expat-devel \\\n        isomd5sum \\\n        gcc \\\n        gettext \\\n        git \\\n        libguestfs-tools \\\n        libtool \\\n        libxml2 \\\n        lighttpd \\\n        #lighttpd-fastcgi \\\n        #lighttpd-mod_geoip \\\n        net-tools \\\n        mkisofs \\\n        mock \\\n        #mongodb \\\n        #mongodb-server \\\n        #pax \\\n        perl-CPAN \\\n        #python3-deltarpm \\\n        #python3-pep8 \\\n        python3-pip \\\n        #python3-psutil \\\n        python3-psutil \\\n        #python36-psutil \\\n        #python3-sphinx \\\n        #python3-subunit \\\n        #python3-pip \\\n        #python3-testrepository \\\n        #python3-tox \\\n        python3-yaml \\\n        postgresql \\\n        qemu-kvm \\\n        quilt \\\n        rpm-build \\\n        rpm-sign \\\n        #rpm-python \\\n        squashfs-tools \\\n        sudo \\\n        systemd \\\n        syslinux \\\n        #syslinux-utils \\\n        udisks2 \\\n        vim-enhanced \\\n        wget \\\n        yum-utils\n\n# This image requires a set of scripts and helpers\n# for working correctly, in this section they are\n# copied inside the image.\nCOPY toCOPY/finishSetup.sh /usr/local/bin\nCOPY toCOPY/populate_downloads.sh /usr/local/bin\nCOPY toCOPY/generate-cgcs-tis-repo /usr/local/bin\nCOPY toCOPY/generate-cgcs-centos-repo.sh /usr/local/bin\nCOPY toCOPY/.inputrc /home/$MYUNAME/\n\n# cpan modules, installing with cpanminus to avoid stupid questions since cpan is whack\nRUN cpanm --notest Fatal && \\\n    cpanm --notest XML::SAX  && \\\n    cpanm --notest XML::SAX::Expat && \\\n    cpanm --notest XML::Parser && \\\n    cpanm --notest XML::Simple\n\n# pip installs\nRUN pip3 install --no-cache-dir python-subunit junitxml --upgrade && \\\n    pip3 install --no-cache-dir tox --upgrade\n\n# Install repo tool\nRUN curl -f https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo && \\\n    chmod a+x /usr/local/bin/repo\n\n# installing go and setting paths\nENV GOPATH=\"/usr/local/go\"\nENV PATH=\"${GOPATH}/bin:${PATH}\"\nRUN yum install -y golang && \\\n    mkdir -p ${GOPATH}/bin && \\\n    curl -f https://raw.githubusercontent.com/golang/dep/master/install.sh | sh && rm -rf /var/cache/yum\n\n# mock time\n# forcing chroots since a couple of packages naughtily insist on network access and\n# we dont have nspawn and networks happy together.\nRUN useradd -s /sbin/nologin -u 9001 -g 9001 mockbuild && \\\n    rmdir /var/lib/mock && \\\n    ln -s /localdisk/loadbuild/mock /var/lib/mock && \\\n    rmdir /var/cache/mock && \\\n    ln -s /localdisk/loadbuild/mock-cache /var/cache/mock && \\\n    echo \"config_opts['use_nspawn'] = False\" >> /etc/mock/site-defaults.cfg && \\\n    echo \"config_opts['rpmbuild_networking'] = True\" >> /etc/mock/site-defaults.cfg && \\\n    echo  >> /etc/mock/site-defaults.cfg\n\n# Inherited  tools for mock stuff\n# we at least need the mock_cache_unlock tool\n# they install into /usr/bin\nCOPY toCOPY/mock_overlay /opt/mock_overlay\nRUN cd /opt/mock_overlay && \\\n    make && \\\n    make install\n\n#  ENV setup\nRUN echo \"# Load stx-builder configuration\" >> /etc/profile.d/TC.sh && \\\n    echo \"if [[ -r \\${HOME}/buildrc ]]; then\" >> /etc/profile.d/TC.sh && \\\n    echo \"    source \\${HOME}/buildrc\" >> /etc/profile.d/TC.sh && \\\n    echo \"    export PROJECT SRC_BUILD_ENVIRONMENT MYPROJECTNAME MYUNAME\" >> /etc/profile.d/TC.sh && \\\n    echo \"    export MY_BUILD_CFG MY_BUILD_CFG_RT MY_BUILD_CFG_STD MY_BUILD_DIR MY_BUILD_ENVIRONMENT MY_BUILD_ENVIRONMENT_FILE MY_BUILD_ENVIRONMENT_FILE_RT MY_BUILD_ENVIRONMENT_FILE_STD MY_DEBUG_BUILD_CFG_RT MY_DEBUG_BUILD_CFG_STD MY_LOCAL_DISK MY_MOCK_ROOT MY_REPO MY_REPO_ROOT_DIR MY_SRC_RPM_BUILD_DIR MY_TC_RELEASE MY_WORKSPACE\" >> /etc/profile.d/TC.sh && \\\n    echo \"fi\" >> /etc/profile.d/TC.sh && \\\n    echo \"export FORMAL_BUILD=0\" >> /etc/profile.d/TC.sh && \\\n    echo \"export PATH=\\$MY_REPO/build-tools:\\$PATH\" >> /etc/profile.d/TC.sh\n\n# centos locales are broken. this needs to be run after the last yum install/update\n#RUN localedef -i en_US -f UTF-8 en_US.UTF-8\n\n# setup\nRUN mkdir -p /www/run && \\\n    mkdir -p /www/logs && \\\n    mkdir -p /www/home && \\\n    mkdir -p /www/root/htdocs/localdisk && \\\n    chown -R $MYUID:cgts /www && \\\n    ln -s /localdisk/loadbuild /www/root/htdocs/localdisk/loadbuild && \\\n    ln -s /import/mirrors/CentOS /www/root/htdocs/CentOS && \\\n    ln -s /import/mirrors/fedora /www/root/htdocs/fedora && \\\n    ln -s /localdisk/designer /www/root/htdocs/localdisk/designer\n\n# lighthttpd setup\n# chmod for /var/log/lighttpd fixes a centos issue\n# in place sed for server root since it's expanded soon thereafter\n#     echo \"server.bind = \\\"localhost\\\"\" >> /etc/lighttpd/lighttpd.conf && \\\nRUN echo \"$MYUNAME ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers && \\\n    mkdir -p  /var/log/lighttpd  && \\\n    chmod a+rwx /var/log/lighttpd/ && \\\n    sed -i 's%^var\\.log_root.*$%var.log_root = \"/www/logs\"%g' /etc/lighttpd/lighttpd.conf  && \\\n    sed -i 's%^var\\.server_root.*$%var.server_root = \"/www/root\"%g' /etc/lighttpd/lighttpd.conf  && \\\n    sed -i 's%^var\\.home_dir.*$%var.home_dir = \"/www/home\"%g' /etc/lighttpd/lighttpd.conf  && \\\n    sed -i 's%^var\\.state_dir.*$%var.state_dir = \"/www/run\"%g' /etc/lighttpd/lighttpd.conf  && \\\n    sed -i \"s/server.port/#server.port/g\" /etc/lighttpd/lighttpd.conf  && \\\n    sed -i \"s/server.use-ipv6/#server.use-ipv6/g\" /etc/lighttpd/lighttpd.conf && \\\n    sed -i \"s/server.username/#server.username/g\" /etc/lighttpd/lighttpd.conf && \\\n    sed -i \"s/server.groupname/#server.groupname/g\" /etc/lighttpd/lighttpd.conf && \\\n    sed -i \"s/server.bind/#server.bind/g\" /etc/lighttpd/lighttpd.conf && \\\n    sed -i \"s/server.document-root/#server.document-root/g\" /etc/lighttpd/lighttpd.conf && \\\n    sed -i \"s/server.dirlisting/#server.dirlisting/g\" /etc/lighttpd/lighttpd.conf && \\\n    echo \"server.port = 8088\" >> /etc/lighttpd/lighttpd.conf && \\\n    echo \"server.use-ipv6 = \\\"disable\\\"\" >> /etc/lighttpd/lighttpd.conf && \\\n    echo \"server.username = \\\"$MYUNAME\\\"\" >> /etc/lighttpd/lighttpd.conf && \\\n    echo \"server.groupname = \\\"cgts\\\"\" >> /etc/lighttpd/lighttpd.conf && \\\n    echo \"server.bind = \\\"localhost\\\"\" >> /etc/lighttpd/lighttpd.conf && \\\n    echo \"server.document-root   = \\\"/www/root/htdocs\\\"\" >> /etc/lighttpd/lighttpd.conf && \\\n    sed -i \"s/dir-listing.activate/#dir-listing.activate/g\" /etc/lighttpd/conf.d/dirlisting.conf && \\\n    echo \"dir-listing.activate = \\\"enable\\\"\" >> /etc/lighttpd/conf.d/dirlisting.conf\n\n#RUN ln -s /usr/local/lighttpd/sbin/lighttpd /usr/sbin/lighttpd\nRUN ln -s /usr/bin/python3.6 /usr/bin/python\n\n# Systemd Enablement\nRUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\n    rm -f /lib/systemd/system/multi-user.target.wants/*;\\\n    rm -f /etc/systemd/system/*.wants/*;\\\n    rm -f /lib/systemd/system/local-fs.target.wants/*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\n    rm -f /lib/systemd/system/basic.target.wants/*;\\\n    rm -f /lib/systemd/system/anaconda.target.wants/*\n\n# Without this, init won't start the enabled services and exec'ing and starting\n# them reports \"Failed to get D-Bus connection: Operation not permitted\".\nVOLUME /run /tmp\n\nRUN useradd -r -u $MYUID -g cgts -m $MYUNAME && \\\n    ln -s /home/$MYUNAME/.ssh /mySSH && \\\n    rsync -av /etc/skel/ /home/$MYUNAME/\n\n# now that we are doing systemd, make the startup script be in bashrc\n# also we need to SHADOW the udev centric mkefiboot script with a sudo centric one\nRUN echo \"bash -C /usr/local/bin/finishSetup.sh\" >> /home/$MYUNAME/.bashrc && \\\n    echo \"export PATH=/usr/local/bin:/localdisk/designer/$MYUNAME/bin:\\$PATH\" >> /home/$MYUNAME/.bashrc && \\\n    chmod a+x /usr/local/bin/*\n\n# Genrate a git configuration file in order to save an extra step\n# for end users, this file is required by \"repo\" tool.\nRUN chown $MYUNAME /home/$MYUNAME && \\\n    runuser -u $MYUNAME -- git config --global user.email $MYUNAME@starlingx.com && \\\n    runuser -u $MYUNAME -- git config --global user.name $MYUNAME && \\\n    runuser -u $MYUNAME -- git config --global color.ui false\n\n# Customizations for mirror creation\n#RUN rm /etc/yum.repos.d/CentOS-Sources.repo\n#RUN rm /etc/yum.repos.d/epel.repo\n#COPY centos-mirror-tools/yum.repos.d/* /etc/yum.repos.d/\n#COPY centos-mirror-tools/rpm-gpg-keys/* /etc/pki/rpm-gpg/\n\n# Open PowerTools repo in centos8 to download rpm package\nRUN yum-config-manager --enable PowerTools\n\n# Import GPG keys\nRUN rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY*\n\n# Try to continue a yum command even if a StarlingX repo is unavailable.\nRUN yum-config-manager --setopt=StarlingX\\*.skip_if_unavailable=1 --save\n\n# When we run 'init' below, it will run systemd, and systemd requires RTMIN+3\n# to exit cleanly. By default, docker stop uses SIGTERM, which systemd ignores.\nSTOPSIGNAL RTMIN+3\n\n# Don't know if it's possible to run services without starting this\nCMD /usr/sbin/init\n"
}