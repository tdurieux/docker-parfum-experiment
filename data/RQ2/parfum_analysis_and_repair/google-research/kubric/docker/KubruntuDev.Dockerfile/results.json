{
  "startTime": 1674251407971,
  "endTime": 1674251408921,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Docker Image is meant for development purposes.\n# It includes all the dev-requirements needed for testing and for building the docs.\n# The kubric package is installed in editable mode (-e) so that changes in /kubric\n# immediately affect the installed kubric.\n# The intended way to use this image is by mounting a kubric development folder\n# from the host over the included sources.\n#\n# For example from the kubric directory a bash session can be started as:\n#\n# docker run --rm --interactive \\\n#   --user $(id -u):$(id -g) \\\n#   --volume \"$PWD:/workspace\" \\\n#   --workdir \"/workspace\" \\\n#   kubricdockerhub/kubruntudev:latest \\\n#   /bin/bash\n\nFROM kubricdockerhub/blender:latest\n\n# --- working directory (entered on `docker run`)\nWORKDIR /workspace\n\n# --- allows \"import kubric\" w/o install (via `--volume`, see Makefile)\nENV PYTHONPATH=\"/workspace\"\n\n# --- copy requirements in workdir\nCOPY requirements.txt .\nCOPY requirements_full.txt .\nCOPY requirements_dev.txt .\nCOPY docs/requirements.txt ./requirements_docs.txt\n\n# --- install python dependencies\nRUN pip install --no-cache-dir --upgrade pip wheel\nRUN pip install --no-cache-dir --upgrade -r requirements.txt\nRUN pip install --no-cache-dir --upgrade -r requirements_full.txt\nRUN pip install --no-cache-dir --upgrade -r requirements_dev.txt\nRUN pip install --no-cache-dir --upgrade -r requirements_docs.txt\n\n# --- cleanup\nRUN rm -f requirements.txt\nRUN rm -f requirements_full.txt\nRUN rm -f requirements_dev.txt\nRUN rm -f requirements_docs.txt\n\n# --- silences tensorflow\nENV TF_CPP_MIN_LOG_LEVEL=\"3\"\n"
}