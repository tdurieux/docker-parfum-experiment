{
  "startTime": 1674220513428,
  "endTime": 1674220515125,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 2,
        "columnEnd": 18
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 2,
        "columnEnd": 21
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 252,
        "lineEnd": 252,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 2,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 2,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 2,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Pull base image.\nFROM ubuntu:bionic-20210416\n\nCOPY . /opt/Empirical\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Prevent interactive time zone config.\n# adapted from https://askubuntu.com/a/1013396\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN \\\n  echo 'Acquire::http::Timeout \"60\";' >> \"/etc/apt/apt.conf.d/99timeout\" \\\n    && \\\n  echo 'Acquire::ftp::Timeout \"60\";' >> \"/etc/apt/apt.conf.d/99timeout\" \\\n    && \\\n  echo 'Acquire::Retries \"100\";' >> \"/etc/apt/apt.conf.d/99timeout\" \\\n    && \\\n  echo \"buffed apt-get resiliency\"\n\n# Install apt packages\n# xvfb nonsense adapted from https://github.com/samgiles/docker-xvfb\n# remove -backports, -updates, -proposed, -security repositories\n# looks like we have to grab libxxhash0 from -updates now\nRUN \\\n  apt-get update -y \\\n    && \\\n  apt-get install -y --no-install-recommends libxxhash0 \\\n    && \\\n  apt-get clean \\\n    && \\\n  rm -rf /var/lib/apt/lists/* \\\n    && \\\n  find /etc/apt -type f -name '*.list' -exec sed -i 's/\\(^deb.*-backports.*\\)/#\\1/; s/\\(^deb.*-updates.*\\)/#\\1/; s/\\(^deb.*-proposed.*\\)/#\\1/; s/\\(^deb.*-security.*\\)/#\\1/' {} + \\\n    && \\\n  apt-get update -y \\\n    && \\\n  apt-get install --no-install-recommends -y software-properties-common=0.96.24.32.1 \\\n    && \\\n  add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n    && \\\n  apt-get update -y \\\n    && \\\n  apt-get install --no-install-recommends --allow-downgrades -y \\\n    dpkg-dev \\\n    libc6=2.27-3ubuntu1 \\\n    libc6-dev \\\n    libc6-dbg \\\n    build-essential \\\n    xvfb \\\n    x11vnc \\\n    x11-xkb-utils \\\n    xfonts-100dpi \\\n    xfonts-75dpi \\\n    xfonts-scalable \\\n    xfonts-cyrillic \\\n    x11-apps \\\n    gtk2-engines-pixbuf \\\n    firefox \\\n    libnss3 \\\n    lsb-release \\\n    xdg-utils \\\n    g++-8=8-20180414-1ubuntu2 \\\n    gcc-8-base=8-20180414-1ubuntu2 \\\n    cpp-8=8-20180414-1ubuntu2 \\\n    gcc-8=8-20180414-1ubuntu2 \\\n    gcc-8-base=8-20180414-1ubuntu2 \\\n    libgcc-8-dev \\\n    libstdc++-8-dev \\\n    cmake \\\n    python-virtualenv \\\n    python-pip-whl \\\n    python-pip \\\n    python-setuptools \\\n    python3-setuptools \\\n    python3-virtualenv \\\n    python3-pip \\\n    nodejs \\\n    npm \\\n    tar \\\n    gzip \\\n    libpthread-stubs0-dev \\\n    gdb \\\n    doxygen \\\n    curl \\\n    perl \\\n    perl-base=5.26.1-6 \\\n    git \\\n    htop \\\n    man \\\n    unzip \\\n    vim-common \\\n    vim-runtime \\\n    vim \\\n    nano \\\n    wget \\\n    ssh-client \\\n    libasound2 \\\n    gpg-agent \\\n    && \\\n  apt-get clean \\\n    && \\\n  rm -rf /var/lib/apt/lists/* \\\n    && \\\n  echo \"installed apt packages\"\n\nRUN \\\n  echo $' \\n\\\nXVFB=/usr/bin/Xvfb \\n\\\nXVFBARGS=\"$DISPLAY -ac -screen 0 1024x768x16 +extension RANDR\" \\n\\\nPIDFILE=/var/xvfb_${DISPLAY:1}.pid \\n\\\ncase \"$1\" in \\n\\\n  start) \\n\\\n    echo -n \"Starting virtual X frame buffer: Xvfb\" \\n\\\n    /sbin/start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile --background --exec $XVFB -- $XVFBARGS \\n\\\n    echo \".\" \\n\\\n    ;; \\n\\\n  stop) \\n\\\n    echo -n \"Stopping virtual X frame buffer: Xvfb\" \\n\\\n    /sbin/start-stop-daemon --stop --quiet --pidfile $PIDFILE \\n\\\n    echo \".\" \\n\\\n    ;; \\n\\\n  restart) \\n\\\n    $0 stop \\n\\\n    $0 start \\n\\\n    ;; \\n\\\n  *) \\n\\\n  echo \"Usage: /etc/init.d/xvfb {start|stop|restart}\" \\n\\\n  exit 1 \\n\\\nesac \\n\\\nexit 0 \\n\\\n' > /etc/init.d/xvfb \\\n  && \\\n  echo \"write xvfb init.d script\"\n\nRUN \\\n  chmod a+x /etc/init.d/xvfb \\\n    && \\\n  echo \"make xvfb init.d script executable\"\n\nRUN \\\n  echo $'#!/bin/bash\\n\\\nexport DISPLAY=:99\\n\\\n/etc/init.d/xvfb start\\n\\\nsleep 1\\n\\\n$@\\n\\\nexit_value=$?\\n\\\n/etc/init.d/xvfb stop\\n\\\nexit $exit_value\\n\\\n' > /usr/bin/xvfb-daemon-run \\\n  && \\\n  echo \"write xvfb daemon script\"\n\nRUN \\\n  chmod a+x /usr/bin/xvfb-daemon-run \\\n    && \\\n  echo \"make xvfb daemon script executable\"\n\nENV DISPLAY :99\n\n# magic from https://github.com/puppeteer/puppeteer/issues/3451#issuecomment-523961368\nRUN echo 'kernel.unprivileged_userns_clone=1' > /etc/sysctl.d/userns.conf\n\nRUN \\\n  update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 90 \\\n  && \\\n  npm install -g n \\\n  && \\\n  n 14.17 \\\n  && \\\n  export python=\"/usr/bin/python3\" \\\n  && \\\n  npm install source-map \\\n  && \\\n  echo \"finalized set up dependency versions\" && npm cache clean --force;\n\nRUN \\\n  pip install --no-cache-dir wheel==0.30.0 \\\n    && \\\n  pip3 install --no-cache-dir wheel==0.30.0 \\\n    && \\\n  pip3 install --no-cache-dir -r /opt/Empirical/doc/requirements.txt \\\n    && \\\n  echo \"installed documentation build requirements\"\n\nRUN \\\n  cd /opt/Empirical \\\n    && \\\n  git submodule deinit -f . \\\n    && \\\n  git submodule init \\\n    && \\\n  git submodule update -f \\\n    && \\\n  echo \"initialized submodules\"\n\nRUN \\\n  cd /opt/Empirical \\\n    && \\\n  make install-test-dependencies \\\n    && \\\n  echo \"installed test dependencies\"\n\nRUN \\\n  cd /opt/Empirical \\\n    && \\\n  git remote set-url origin https://github.com/devosoft/Empirical.git \\\n    && \\\n  echo \"switched to https origin remote url\"\n\nRUN \\\n  /etc/init.d/xvfb start \\\n   && \\\n  make test-web-ConfigPanel -C /opt/Empirical/tests/web \\\n    && \\\n  make test-native-ConfigPanel -C /opt/Empirical/tests/web \\\n    && \\\n  make test-vector -C /opt/Empirical/tests/base \\\n    && \\\n  make clean -C /opt/Empirical/tests \\\n    && \\\n  echo \"representative tests passed!\"\n\n# Define default working directory.\nWORKDIR /opt/Empirical\n\n\nRUN \\\n  echo $'#!/bin/bash\\n\\\nset -e\\n\\\n/etc/init.d/xvfb start\\n\\\nexec \"$@\"\\n\\\n' > /opt/entrypoint.sh \\\n    && \\\n  echo \"write entrypoint script\"\n\nRUN \\\n  chmod a+x /opt/entrypoint.sh \\\n    && \\\n  echo \"make entrypoint script executable\"\n\n# Adapted from https://github.com/karma-runner/karma-firefox-launcher/issues/93#issuecomment-519333245\n# Maybe important for container compatability running on Windows?\nRUN \\\n  cd /opt/ \\\n  && \\\n  npm install -g yarn \\\n  && \\\n  git clone https://github.com/karma-runner/karma-firefox-launcher.git \\\n  && \\\n  cd karma-firefox-launcher \\\n  && \\\n  yarn install \\\n  && \\\n  echo \"installed karma-firefox-launcher\" && npm cache clean --force; && yarn cache clean;\n\n# @mmore500 10-2021: python3 -m pip fixes UnicodeDecodeError\n# when installing charset-normalizer from github\nRUN \\\n  python3 -m pip install -r /opt/Empirical/third-party/requirements.txt \\\n    && \\\n  echo \"installed documentation build requirements\"\n\n# Perform any further action as an unprivileged user.\n# adapted from https://stackoverflow.com/a/27703359\n# and https://superuser.com/a/235398\nRUN \\\n  useradd --create-home --shell /bin/bash user \\\n    && \\\n  groupadd group \\\n    && \\\n  gpasswd -a user group \\\n    && \\\n  chgrp --recursive user /opt \\\n    && \\\n  chmod --recursive g+rwx /opt \\\n    && \\\n  echo \"user added and granted permissions to /opt\"\n\nUSER user\n\n# Define default entrypoint.\nENTRYPOINT [\"/opt/entrypoint.sh\"]\n\nCMD [\"bash\"]\n"
}