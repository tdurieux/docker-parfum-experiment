{
  "startTime": 1674250613509,
  "endTime": 1674250614767,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 19,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###########################################################################\n# Dockerfile to build node-app-template container image for development\n#\n# The development container is identical to the production container except\n# that it includes development and debugging tools and it mounts the host's\n# project directory so that tests can automatically be run and the server\n# restarted on code change.\n#\n# Re-build the image and restart the container when package.json changes.\n# When running the container:\n#\n# 1. Mount the /src/app volume to watch the edited source tree\n# 2. Copy /tmp/app/node_modules to /src/app\n#\n# Note: Dockerfile instructions to mount a volume and copy the node_modules\n# directory each execute in a new layer on top of the current image and\n# commit the results. No matter which order we execute these instructions,\n# we can't produce a mounted volume with node_modules dependencies\n# populated at build time. We can either mount the volume and copy\n# dependencies at run time; or we can forgo the mounted volume and build\n# dependencies and source when we build the image, losing the ability to\n# watch the source tree for changes and automatically run tests and reload\n# the server.\n###########################################################################\n\nFROM thehackerati/node-app-template\n\n# Install development and debugging tools\nRUN npm install nodemon -g && \\\n    npm install grunt-cli -g && npm cache clean --force;\n\n# Use changes to package.json to force Docker not to use the cache\n# when we change our application's nodejs dependencies:\nADD package.json /tmp/app/package.json\nRUN cd /tmp/app && npm install && npm cache clean --force;\n\nWORKDIR /opt/app\n\n# Run CMD from the default ENTRYPOINT: /bin/sh -c /opt/app/run-dev-mode.sh\nCMD [\"/opt/app/run-dev-mode.sh\"]\n"
}