{
  "startTime": 1674251695673,
  "endTime": 1674251696557,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###########################################################################\n# Dockerfile to build node-app-template container image for development\n#\n# The development container is identical to the production container except\n# that it includes development and debugging tools and it mounts the host's\n# project directory so that tests can automatically be run and the server\n# restarted on code change.\n#\n# Re-build the image and restart the container when package.json changes.\n# When running the container:\n#\n# 1. Mount the /src/app volume to watch the edited source tree\n# 2. Copy /tmp/app/node_modules to /src/app\n#\n# Note: Dockerfile instructions to mount a volume and copy the node_modules\n# directory each execute in a new layer on top of the current image and\n# commit the results. No matter which order we execute these instructions,\n# we can't produce a mounted volume with node_modules dependencies\n# populated at build time. We can either mount the volume and copy\n# dependencies at run time; or we can forgo the mounted volume and build\n# dependencies and source when we build the image, losing the ability to\n# watch the source tree for changes and automatically run tests and reload\n# the server.\n###########################################################################\n#Dockerfile to build AWS deployment node-app-template container image\n###########################################################################\n\n\nFROM python:2-onbuild\n\n# Update the sources list\nRUN apt-get update && apt-get install --no-install-recommends -y tar git curl nano wget dialog net-tools build-essential && rm -rf /var/lib/apt/lists/*; # Install basic applications\n\n\n#WORKDIR app\n\nEXPOSE 5000\n\n# Set the default command to execute   \n# when creating a new container\n# i.e. using CherryPy to serve the application\nRUN pwd\nCMD python app.py                    \n"
}