{
  "startTime": 1674246266156,
  "endTime": 1674246267287,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ARCH=%%BALENA_ARCH%%\nARG NODE_VERSION=12.16.2\n\nFROM balenalib/$ARCH-alpine-supervisor-base:3.11 as BUILD\n\nARG ARCH\nARG NODE_VERSION\nARG NODE_ARCHIVE=\"node-no-intl-v${NODE_VERSION}-linux-alpine-${ARCH}.tar.gz\"\nARG S3_BASE=\"https://resin-packages.s3.amazonaws.com\"\nARG NODE_LOCATION=\"${S3_BASE}/node/v${NODE_VERSION}/${NODE_ARCHIVE}\"\n\n# DO NOT REMOVE THE cross-build-* COMMANDS\n# The following commands are absolutely needed. When we\n# build for ARM architectures, we run this Dockerfile\n# through sed, which uncomments these lines. There were\n# other options for achieving the same setup, but this seems\n# to be the least intrusive. The commands start commented\n# out because the default build for balenaCI is amd64 (and\n# we can't run any sed preprocessing on it there)\n# RUN [\"cross-build-start\"]\n\nWORKDIR /usr/src/app\n\nRUN apk add --no-cache \\\n\tg++ \\\n\tgit \\\n\tmake \\\n\tpython \\\n\tcurl \\\n\tbinutils \\\n\tlibgcc \\\n\tlibstdc++ \\\n\tlibuv \\\n\tsqlite-libs \\\n\tsqlite-dev \\\n\tdmidecode \\\n\tdbus-dev \\\n\tprocmail\n# procmail is installed for the lockfile binary\n\nCOPY build-utils/node-sums.txt .\n\n# Install node from balena's prebuilt cache\nRUN curl -f -SLO \"${NODE_LOCATION}\" \\\n\t&& grep \"${NODE_ARCHIVE}\" node-sums.txt | sha256sum -c - \\\n\t&& tar -xzf \"${NODE_ARCHIVE}\" -C /usr/local --strip-components=1 \\\n\t&& rm -f \"${NODE_ARCHIVE}\" \\\n\t&& strip /usr/local/bin/node\n\nCOPY package*.json ./\n\nRUN npm ci --build-from-source --sqlite=/usr/lib\n\n# We only run these commands when executing through\n# livepush, so they are presented as livepush directives\n#dev-run=apk add --no-cache ip6tables iptables\n#dev-copy=entry.sh .\n#dev-cmd-live=LIVEPUSH=1 ./entry.sh\n\nCOPY build-utils ./build-utils\nCOPY webpack.config.js tsconfig.json tsconfig.release.json ./\nCOPY src ./src\nCOPY test ./test\nCOPY typings ./typings\n\nRUN npm run test-nolint \\\n\t&& npm run build\n\n# Run the production install here, to avoid the npm dependency on\n# the later stage\nRUN npm ci --production --no-optional --unsafe-perm --build-from-source --sqlite=/usr/lib \\\n\t&& npm cache clean --force \\\n\t# For some reason this doesn't get cleared with the other\n\t# cache\n\t&& rm -rf node_modules/.cache \\\n\t# Remove various uneeded filetypes in order to reduce space\n\t# We also remove the spurious node.dtps, see https://github.com/mapbox/node-sqlite3/issues/861\n\t&& find . -path '*/coverage/*' -o -path '*/test/*' -o -path '*/.nyc_output/*' \\\n\t\t-o -name '*.tar.*'      -o -name '*.in'     -o -name '*.cc' \\\n\t\t-o -name '*.c'          -o -name \"*.ts\"     -o -name '*.eslintrc' \\\n\t\t-o -name '*.h'          -o -name '*.html'   -o -name '*.markdown' \\\n\t\t-o -name '*.md'         -o -name '*.patch'  -o -name '*.png' \\\n\t\t-o -name '*.yml' \\\n\t\t-delete \\\n\t&& find . -type f -path '*/node_modules/sqlite3/deps*' -delete \\\n\t&& find . -type f -path '*/node_modules/knex/build*' -delete \\\n\t&& rm -rf node_modules/sqlite3/node.dtps\n\n\n# RUN [\"cross-build-end\"]\n\nFROM balenalib/$ARCH-alpine-supervisor-base:3.11\n\n# RUN [\"cross-build-start\"]\n\nRUN apk add --no-cache \\\n\tca-certificates \\\n\tkmod \\\n\tiptables \\\n\tip6tables \\\n\trsync \\\n\tavahi \\\n\tdbus \\\n\tlibstdc++ \\\n\tdmidecode \\\n\tsqlite-libs\n\nWORKDIR /usr/src/app\n\nCOPY --from=BUILD /usr/local/bin/node /usr/local/bin/node\nCOPY --from=BUILD /usr/bin/lockfile /usr/bin/lockfile\nCOPY --from=BUILD /usr/src/app/dist ./dist\nCOPY --from=BUILD /usr/src/app/package.json ./\nCOPY --from=BUILD /usr/src/app/node_modules ./node_modules\n\nCOPY entry.sh .\n\nRUN mkdir -p rootfs-overlay && \\\n\t(([ ! -d rootfs-overlay/lib64 ] && ln -s /lib rootfs-overlay/lib64) || true)\n\nARG ARCH\nARG VERSION=master\nARG DEFAULT_MIXPANEL_TOKEN=bananasbananas\nENV CONFIG_MOUNT_POINT=/boot/config.json \\\n\tLED_FILE=/dev/null \\\n\tSUPERVISOR_IMAGE=balena/$ARCH-supervisor \\\n\tVERSION=$VERSION \\\n\tDEFAULT_MIXPANEL_TOKEN=$DEFAULT_MIXPANEL_TOKEN\nCOPY avahi-daemon.conf /etc/avahi/avahi-daemon.conf\n\nVOLUME /data\nHEALTHCHECK --interval=5m --start-period=1m --timeout=30s --retries=3 \\\n\tCMD wget http://127.0.0.1:${LISTEN_PORT:-48484}/v1/healthy -O - -q\n\n# RUN [\"cross-build-end\"]\n\nCMD [\"/usr/src/app/entry.sh\"]\n"
}