{
  "startTime": 1674255409425,
  "endTime": 1674255410859,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# arguments and defaults used with docker build command\nARG EDD_VERSION=\"manual-build\"\nARG TARGET=\"dev\"\n\n# ---\n\nFROM node:lts-alpine as edd-node\n\nLABEL maintainer=\"William Morrell <WCMorrell@lbl.gov>\"\n\nCOPY ./docker/edd/core/package.json /run/\n\nWORKDIR /run/\n\nRUN apk add --no-cache zsh \\\n && yarn install --non-interactive --ignore-optional \\\n && yarn cache clean\n\nCMD [\"/bin/zsh\"]\n\n# ---\n\nFROM library/python:3.10-slim-bullseye as pybase\n\nLABEL maintainer=\"William Morrell <WCMorrell@lbl.gov>\"\nENV PYTHONUNBUFFERED=1 LANG=C.UTF-8\n\nWORKDIR /tmp\n\nRUN set -ex \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get -y upgrade \\\n && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends \\\n    curl \\\n    git \\\n    gosu \\\n    mime-support \\\n    netcat-openbsd \\\n    tini \\\n && pip install --no-cache-dir \\\n    numpy \\\n    pipenv \\\n    python-libsbml \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /root/.cache \\\n && find /usr/local/lib/ -name __pycache__ | xargs rm -rf\n\n# ---\n\nFROM pybase as prod-preinstall\n\nWORKDIR /install\nENV PYTHONUNBUFFERED=1 LANG=C.UTF-8\n\nCOPY ./docker/edd/core/Pipfile* /install/\n\nRUN set -ex \\\n# update package index from base file\n && apt-get update \\\n# need build tools to compile some python packages\n && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends \\\n    build-essential \\\n    libldap2-dev \\\n    libsasl2-dev \\\n# not installing dev packages in prod\n && pipenv install --system --deploy --verbose \\\n && DEBIAN_FRONTEND=noninteractive apt-get -y purge \\\n    build-essential \\\n    libldap2-dev \\\n    libsasl2-dev \\\n && apt autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /root/.cache\n\n# ---\n\nFROM pybase as dev-preinstall\n\nWORKDIR /install\nENV PYTHONUNBUFFERED=1 LANG=C.UTF-8\n\nCOPY ./docker/edd/core/Pipfile* /install/\nCOPY ./docker/edd/core/bin/* /usr/local/bin/\n\nRUN set -ex \\\n# update package index from base file\n && apt-get update \\\n# need build tools to compile some python packages\n && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends \\\n    build-essential \\\n    libldap2-dev \\\n    libsasl2-dev \\\n# including dev packages in dev\n && pipenv install --dev --system --deploy --verbose \\\n && DEBIAN_FRONTEND=noninteractive apt-get -y purge \\\n    build-essential \\\n    libldap2-dev \\\n    libsasl2-dev \\\n && apt autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /root/.cache\n\n# ---\n\nFROM edd-node as typescript\n\nWORKDIR /run/\nCOPY ./typescript ./.prettierrc.js /run/\n\n# build & test the TypeScript code\nRUN ls -al && yarn build\n\n# ---\n\nFROM ${TARGET}-preinstall as configure\n\nWORKDIR /tmp/\nCOPY ./.git /tmp/.git\n\nRUN git rev-parse --short HEAD > /tmp/edd.hash\n\n# ---\n\nFROM ${TARGET}-preinstall as staticfiles\n\nWORKDIR /usr/local/edd\n# Copy in python code\nCOPY ./server /usr/local/edd\n# Copy in commit hash from configure image\nCOPY --from=configure /tmp/edd.hash /edd.hash\n\nRUN python manage.py collectstatic \\\n    --noinput \\\n    --settings \"edd.settings.build_collectstatic\" \\\n && find /usr/local/edd/ -type d -name static -exec rm -rf \\{\\} \\+ \\\n && find /usr/local/edd/ -type d -name __pycache__ -exec rm -rf \\{\\} \\+\n\n# ---\n\nFROM ${TARGET}-preinstall as install\n\nLABEL maintainer=\"William Morrell <WCMorrell@lbl.gov>\"\nARG EDD_VERSION\n\nENV EDD_VERSION=\"${EDD_VERSION}\"\nWORKDIR /code\n\n# Copy in invoke config\nCOPY ./docker/edd/core/invoke.yaml /etc/invoke.yaml\n# Copy in invoke scripts\nCOPY ./docker/edd/core/tasks /usr/local/edd-invoke/tasks\n# Copy in entrypoint\nCOPY ./docker/edd/core/entrypoint.sh /usr/local/bin/entrypoint.sh\n# Copy in python code\nCOPY --from=staticfiles /usr/local/edd /usr/local/edd\n# Copy in static assets\nCOPY --from=staticfiles /usr/local/edd-static /usr/local/edd-static\nCOPY --from=typescript /run/dist /usr/local/edd-static/dist\n# Copy in commit hash from configure image\nCOPY --from=configure /tmp/edd.hash /edd.hash\n\n# Create user/group to run code\nRUN addgroup --gid 1000 --system edduser \\\n && adduser --uid 1000 --system edduser --gid 1000 \\\n# create log directory\n && mkdir -p /var/log/edd\n\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/usr/local/bin/entrypoint.sh\"]\nCMD [\"--list\"]\n"
}