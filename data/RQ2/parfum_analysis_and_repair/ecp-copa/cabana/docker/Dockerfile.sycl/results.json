{
  "startTime": 1674249128510,
  "endTime": 1674249130573,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE=nvidia/cuda:11.0-devel-ubuntu20.04\nFROM $BASE\n\nARG NPROCS=4\n\nRUN DISTRO=ubuntu2004 && \\\n    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/$DISTRO/x86_64/3bf863cc.pub\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        bc \\\n        wget \\\n        ccache \\\n        ninja-build \\\n        python3 \\\n        git \\\n        vim \\\n        jq \\\n        libgtest-dev \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN KEYDUMP_URL=https://cloud.cees.ornl.gov/download && \\\n    KEYDUMP_FILE=keydump && \\\n    wget --quiet ${KEYDUMP_URL}/${KEYDUMP_FILE} && \\\n    wget --quiet ${KEYDUMP_URL}/${KEYDUMP_FILE}.sig && \\\n    gpg --batch --import ${KEYDUMP_FILE} && \\\n    gpg --batch --verify ${KEYDUMP_FILE}.sig ${KEYDUMP_FILE} && \\\n    rm ${KEYDUMP_FILE}*\n\nARG CMAKE_VERSION=3.19.0\nENV CMAKE_DIR=/opt/cmake\nRUN CMAKE_KEY=2D2CEF1034921684 && \\\n    CMAKE_URL=https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION} && \\\n    CMAKE_SCRIPT=cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    CMAKE_SHA256=cmake-${CMAKE_VERSION}-SHA-256.txt && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SHA256} && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SHA256}.asc && \\\n    wget --quiet ${CMAKE_URL}/${CMAKE_SCRIPT} && \\\n    gpg --batch --verify ${CMAKE_SHA256}.asc ${CMAKE_SHA256} && \\\n    grep ${CMAKE_SCRIPT} ${CMAKE_SHA256} | sha256sum --check && \\\n    mkdir -p ${CMAKE_DIR} && \\\n    sh ${CMAKE_SCRIPT} --skip-license --prefix=${CMAKE_DIR} && \\\n    rm cmake*\nENV PATH=${CMAKE_DIR}/bin:$PATH\n\nENV SYCL_DIR=/opt/sycl\nRUN SYCL_VERSION=20210311 && \\\n    SYCL_ARCHIVE=${SYCL_VERSION}.tar.gz && \\\n    SYCL_URL=https://github.com/intel/llvm/archive/sycl-nightly/${SYCL_ARCHIVE} && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${SYCL_URL} && \\\n    mkdir llvm && \\\n    tar -xf ${SYCL_ARCHIVE} -C llvm --strip-components=1 && \\\n    cd llvm && \\\n    python3 buildbot/configure.py --cuda && \\\n    python3 buildbot/compile.py && \\\n    mkdir -p ${SYCL_DIR} && \\\n    mv ${SCRATCH_DIR}/llvm/build/install/* ${SYCL_DIR} && \\\n    echo \"${SYCL_DIR}/lib\" > /etc/ld.so.conf.d/sycl.conf && ldconfig && \\\n    rm -rf ${SCRATCH_DIR}\nENV PATH=${SYCL_DIR}/bin:$PATH\n\n# Install CUDA-aware Open MPI\nENV OPENMPI_DIR=/opt/openmpi\nRUN OPENMPI_VERSION=4.0.2 && \\\n    OPENMPI_VERSION_SHORT=4.0 && \\\n    OPENMPI_SHA1=32ce3761288575fb8e4f6296c9105c3a25cf3235 && \\\n    OPENMPI_URL=https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION_SHORT}/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    OPENMPI_ARCHIVE=openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    [ ! -z \"${CUDA_VERSION}\" ] && CUDA_OPTIONS=--with-cuda || true && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${OPENMPI_URL} --output-document=${OPENMPI_ARCHIVE} && \\\n    echo \"${OPENMPI_SHA1} ${OPENMPI_ARCHIVE}\" | sha1sum -c && \\\n    mkdir -p openmpi && \\\n    tar -xf ${OPENMPI_ARCHIVE} -C openmpi --strip-components=1 && \\\n    mkdir -p build && cd build && \\\n    ../openmpi/configure --prefix=${OPENMPI_DIR} ${CUDA_OPTIONS} CFLAGS=-w && \\\n    make -j${NPROCS} install && \\\n    rm -rf ${SCRATCH_DIR}\nENV PATH=${OPENMPI_DIR}/bin:$PATH\n\n# Install Kokkos\nARG KOKKOS_VERSION=3.4.01\nARG KOKKOS_OPTIONS=\"-DKokkos_ENABLE_SYCL=ON -DCMAKE_CXX_FLAGS=-Wno-unknown-cuda-version -DKokkos_ENABLE_UNSUPPORTED_ARCHS=ON -DKokkos_ARCH_VOLTA70=ON -DCMAKE_CXX_STANDARD=17\"\nENV KOKKOS_DIR=/opt/kokkos\nRUN KOKKOS_URL=https://github.com/kokkos/kokkos/archive/${KOKKOS_VERSION}.tar.gz && \\\n    KOKKOS_ARCHIVE=kokkos-${KOKKOS_HASH}.tar.gz && \\\n    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \\\n    wget --quiet ${KOKKOS_URL} --output-document=${KOKKOS_ARCHIVE} && \\\n    mkdir -p kokkos && \\\n    tar -xf ${KOKKOS_ARCHIVE} -C kokkos --strip-components=1 && \\\n    cd kokkos && \\\n    mkdir -p build && cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=${KOKKOS_DIR} -D CMAKE_CXX_COMPILER=clang++ ${KOKKOS_OPTIONS} .. && \\\n    make -j${NPROCS} install && \\\n    rm -rf ${SCRATCH_DIR}\n"
}