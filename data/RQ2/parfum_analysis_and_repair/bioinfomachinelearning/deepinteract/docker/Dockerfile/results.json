{
  "startTime": 1674250136080,
  "endTime": 1674250137316,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_FULL=11.2.2\nFROM nvidia/cuda:${CUDA_FULL}-cudnn8-runtime-ubuntu20.04\n# FROM directive resets ARGS, so we specify again (the value is retained if\n# previously set).\nARG CUDA_FULL\nARG CUDA=11.2\n\n# Use bash to support string substitution.\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n      build-essential \\\n      cmake \\\n      cuda-command-line-tools-${CUDA/./-} \\\n      git \\\n      wget \\\n      software-properties-common \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Compile PSAIA from source.\n# First, install GCC 10 for Ubuntu 20.04.\nRUN add-apt-repository ppa:ubuntu-toolchain-r/ppa \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y gcc-10 g++-10 && rm -rf /var/lib/apt/lists/*;\n# Second, install QT4 for Ubuntu 20.04.\nRUN add-apt-repository ppa:rock-core/qt4 \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y libqt4* libqtcore4 libqtgui4 libqtwebkit4 qt4* libxext-dev && rm -rf /var/lib/apt/lists/*;\n# Then, begin compiling PSAIA along with PSA and PIA.\nRUN mkdir -p /home/Programs\nWORKDIR /home/Programs\nRUN wget https://complex.zesoi.fer.hr/data/PSAIA-1.0-source.tar.gz \\\n    && tar -xvzf PSAIA-1.0-source.tar.gz && rm PSAIA-1.0-source.tar.gz\nWORKDIR PSAIA_1.0_source/make/linux/psaia/\nRUN qmake-qt4 psaia.pro \\\n    && make\nWORKDIR ../psa/\nRUN qmake-qt4 psa.pro \\\n    && make\nWORKDIR ../pia/\nRUN qmake-qt4 pia.pro \\\n    && make\n\n# Compile HHsuite from source.\nRUN git clone --branch v3.3.0 https://github.com/soedinglab/hh-suite.git /tmp/hh-suite \\\n    && mkdir /tmp/hh-suite/build\nWORKDIR /tmp/hh-suite/build\nRUN cmake -DCMAKE_INSTALL_PREFIX=/opt/hhsuite .. \\\n    && make -j 4 && make install \\\n    && ln -s /opt/hhsuite/bin/* /usr/bin \\\n    && rm -rf /tmp/hh-suite\n\n# Install Miniconda package manager.\nRUN wget -q -P /tmp \\\n  https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-x86_64.sh \\\n    && bash /tmp/Miniconda3-py38_4.9.2-Linux-x86_64.sh -b -p /opt/conda \\\n    && rm /tmp/Miniconda3-py38_4.9.2-Linux-x86_64.sh\n\n# Install conda packages.\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN conda update -qy conda \\\n    && conda install -y -c pytorch -c conda-forge -c defaults -c anaconda -c bioconda -c salilab \\\n      python==3.8 \\\n      pip==21.1.2 \\\n      cudatoolkit==${CUDA} \\\n      pytorch==1.7.1 \\\n      torchvision==0.8.2 \\\n      torchaudio==0.7.2 \\\n      numpy==1.21.2 \\\n      scipy==1.4.1 \\\n      pandas==1.2.4 \\\n      scikit-learn==0.24.2 \\\n      requests==2.26.0 \\\n      biopython==1.78 \\\n      hhsuite==3.3.0 \\\n      msms==2.6.1 \\\n      dssp==3.0.0 \\\n      aria2==1.34.0\n\n# Mirror the curated directory structure in the Docker image's application execution directory.\nCOPY . /app/DeepInteract\n\n# Install pip packages.\nWORKDIR /app/DeepInteract\nRUN pip3 install --no-cache-dir --upgrade pip \\\n    && pip3 install --no-cache-dir -e . \\\n    && pip3 install --no-cache-dir -r /app/DeepInteract/requirements.txt \\\n    && pip3 install --no-cache-dir https://data.dgl.ai/wheels/dgl_cu110-0.6-cp38-cp38-manylinux1_x86_64.whl\n\n# Remove Git artifacts from local repository clone.\nRUN rm -rf .git/\n\n# We need to run `ldconfig` first to ensure GPUs are visible, due to some quirk\n# with Debian. See https://github.com/NVIDIA/nvidia-docker/issues/1399 for details.\n# ENTRYPOINT does not support easily running multiple commands, so instead we\n# write a shell script to wrap them up.\nRUN echo $'#!/bin/bash\\n\\\nldconfig\\n\\\npython /app/DeepInteract/project/lit_model_predict_docker.py \"$@\"' > /app/run_deepinteract.sh \\\n  && chmod +x /app/run_deepinteract.sh\nENTRYPOINT [\"/app/run_deepinteract.sh\"]"
}