{
  "startTime": 1674253817223,
  "endTime": 1674253818055,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster as base\nARG TARGETARCH\nARG TARGETVARIANT\n\nENV LANG C.UTF-8\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo \"Dir::Cache var/cache/apt/${TARGETARCH}${TARGETVARIANT};\" > /etc/apt/apt.conf.d/01cache\n\nRUN --mount=type=cache,id=apt-base,target=/var/cache/apt \\\n    mkdir -p /var/cache/apt/${TARGETARCH}${TARGETVARIANT}/archives/partial && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends --yes \\\n        build-essential swig portaudio19-dev \\\n        libatlas-base-dev libopenblas-dev gfortran \\\n        liblapack-dev cython \\\n        curl ca-certificates \\\n\tlibffi-dev && rm -rf /var/lib/apt/lists/*;\n\nENV NUM_JOBS=8\n\nENV BUILD_DIR=/build\nENV APP_DIR=${BUILD_DIR}/rhasspy/usr/lib/rhasspy\n\n# -----------------------------------------------------------------------------\n\nFROM base as base-amd64\n\nFROM base as base-armv7\n\nFROM base as base-arm64\n\nFROM balenalib/raspberry-pi-debian:buster-build-20210225 as base-armv6\n\nENV LANG C.UTF-8\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo \"Dir::Cache var/cache/apt/${TARGETARCH}${TARGETVARIANT};\" > /etc/apt/apt.conf.d/01cache\n\nRUN --mount=type=cache,id=apt-build,target=/var/cache/apt \\\n    mkdir -p /var/cache/apt/${TARGETARCH}${TARGETVARIANT}/archives/partial && \\\n    install_packages \\\n        swig portaudio19-dev libatlas-base-dev \\\n        curl ca-certificates \\\n        gfortran\n\nENV NUM_JOBS=8\n\nENV BUILD_DIR=/build\nENV APP_DIR=${BUILD_DIR}/rhasspy/usr/lib/rhasspy\n\n# -----------------------------------------------------------------------------\n# Python 3.7\n# -----------------------------------------------------------------------------\n\nARG TARGETARCH\nARG TARGETVARIANT\nFROM base-$TARGETARCH$TARGETVARIANT as python\nARG TARGETARCH\nARG TARGETVARIANT\n\nRUN echo \"Dir::Cache var/cache/apt/${TARGETARCH}${TARGETVARIANT};\" > /etc/apt/apt.conf.d/01cache\n\nRUN --mount=type=cache,target=/var/cache/apt \\\n    mkdir -p /var/cache/apt/${TARGETARCH}${TARGETVARIANT}/archives/partial && \\\n    apt-get update && \\\n    apt-get install --yes --no-install-recommends \\\n        build-essential \\\n        git zlib1g-dev patchelf rsync \\\n        libncursesw5-dev libreadline-gplv2-dev libssl-dev \\\n        libgdbm-dev libc6-dev libsqlite3-dev libbz2-dev libffi-dev && rm -rf /var/lib/apt/lists/*;\n\nADD download/source/Python-3.7.8.tgz /build\n\nRUN cd /build/Python-3.7.8 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j $NUM_JOBS && \\\n    make install DESTDIR=$APP_DIR\n\n# -----------------------------------------------------------------------------\n# Rhasspy\n# -----------------------------------------------------------------------------\n\nARG TARGETARCH\nARG TARGETVARIANT\nFROM base-$TARGETARCH$TARGETVARIANT as rhasspy\n\nCOPY --from=python ${APP_DIR}/ ${APP_DIR}/\nCOPY --from=python ${APP_DIR}/usr/local/include/python3.7m/ /usr/include/\nENV PYTHON=${APP_DIR}/usr/local/bin/python3\n\n# IFDEF PYPI_PROXY\n#! ENV PIP_INDEX_URL=http://${PYPI_PROXY_HOST}:${PYPI_PROXY_PORT}/simple/\n#! ENV PIP_TRUSTED_HOST=${PYPI_PROXY_HOST}\n# ENDIF\n\nRUN ${PYTHON} -m pip install --upgrade pip\nRUN ${PYTHON} -m pip install --upgrade wheel setuptools\n\nARG TARGETARCH\nARG TARGETVARIANT\n\n# Directory of prebuilt tools\nENV DOWNLOAD_DIR=${BUILD_DIR}/download\nCOPY download/shared/ ${DOWNLOAD_DIR}/shared/\nCOPY download/${TARGETARCH}${TARGETVARIANT}/ ${DOWNLOAD_DIR}/${TARGETARCH}${TARGETVARIANT}/\n\n# Copy Rhasspy source\nCOPY rhasspy/ ${APP_DIR}/rhasspy/\nCOPY rhasspy-server-hermes/ ${APP_DIR}/rhasspy-server-hermes/\nCOPY rhasspy-wake-snowboy-hermes/ ${APP_DIR}/rhasspy-wake-snowboy-hermes/\nCOPY rhasspy-wake-porcupine-hermes/ ${APP_DIR}/rhasspy-wake-porcupine-hermes/\nCOPY rhasspy-wake-precise-hermes/ ${APP_DIR}/rhasspy-wake-precise-hermes/\nCOPY rhasspy-profile/ ${APP_DIR}/rhasspy-profile/\nCOPY rhasspy-asr/ ${APP_DIR}/rhasspy-asr/\nCOPY rhasspy-asr-deepspeech ${APP_DIR}/rhasspy-asr-deepspeech/\nCOPY rhasspy-asr-deepspeech-hermes/ ${APP_DIR}/rhasspy-asr-deepspeech-hermes/\nCOPY rhasspy-asr-pocketsphinx/ ${APP_DIR}/rhasspy-asr-pocketsphinx/\nCOPY rhasspy-asr-pocketsphinx-hermes/ ${APP_DIR}/rhasspy-asr-pocketsphinx-hermes/\nCOPY rhasspy-asr-kaldi/ ${APP_DIR}/rhasspy-asr-kaldi/\nCOPY rhasspy-asr-kaldi-hermes/ ${APP_DIR}/rhasspy-asr-kaldi-hermes/\nCOPY rhasspy-asr-vosk-hermes/ ${APP_DIR}/rhasspy-asr-vosk-hermes/\nCOPY rhasspy-dialogue-hermes/ ${APP_DIR}/rhasspy-dialogue-hermes/\nCOPY rhasspy-fuzzywuzzy/ ${APP_DIR}/rhasspy-fuzzywuzzy/\nCOPY rhasspy-fuzzywuzzy-hermes/ ${APP_DIR}/rhasspy-fuzzywuzzy-hermes/\nCOPY rhasspy-hermes/ ${APP_DIR}/rhasspy-hermes/\nCOPY rhasspy-homeassistant-hermes/ ${APP_DIR}/rhasspy-homeassistant-hermes/\nCOPY rhasspy-microphone-cli-hermes/ ${APP_DIR}/rhasspy-microphone-cli-hermes/\nCOPY rhasspy-microphone-pyaudio-hermes/ ${APP_DIR}/rhasspy-microphone-pyaudio-hermes/\nCOPY rhasspy-nlu/ ${APP_DIR}/rhasspy-nlu/\nCOPY rhasspy-nlu-hermes/ ${APP_DIR}/rhasspy-nlu-hermes/\nCOPY rhasspy-rasa-nlu-hermes/ ${APP_DIR}/rhasspy-rasa-nlu-hermes/\nCOPY rhasspy-remote-http-hermes/ ${APP_DIR}/rhasspy-remote-http-hermes/\nCOPY rhasspy-silence/ ${APP_DIR}/rhasspy-silence/\nCOPY rhasspy-speakers-cli-hermes/ ${APP_DIR}/rhasspy-speakers-cli-hermes/\nCOPY rhasspy-supervisor/ ${APP_DIR}/rhasspy-supervisor/\nCOPY rhasspy-tts-cli-hermes/ ${APP_DIR}/rhasspy-tts-cli-hermes/\nCOPY rhasspy-tts-wavenet-hermes/ ${APP_DIR}/rhasspy-wavenet-cli-hermes/\nCOPY rhasspy-wake-pocketsphinx-hermes/ ${APP_DIR}/rhasspy-wake-pocketsphinx-hermes/\nCOPY rhasspy-wake-raven/ ${APP_DIR}/rhasspy-wake-raven/\nCOPY rhasspy-wake-raven-hermes/ ${APP_DIR}/rhasspy-wake-raven-hermes/\nCOPY rhasspy-tts-larynx-hermes/ ${APP_DIR}/rhasspy-tts-larynx-hermes/\n\n# Autoconf\nCOPY m4/ ${APP_DIR}/m4/\nCOPY configure config.sub config.guess \\\n     install-sh missing aclocal.m4 \\\n     RHASSPY_DIRS Makefile.in setup.py.in rhasspy.sh.in rhasspy.spec.in \\\n     ${APP_DIR}/\n\nRUN cd ${APP_DIR} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-in-place --disable-virtualenv --prefix=${APP_DIR}/\n\nCOPY scripts/install/ ${APP_DIR}/scripts/install/\n\nCOPY etc/shflags ${APP_DIR}/etc/\nCOPY etc/wav/ ${APP_DIR}/etc/wav/\nCOPY README.md LICENSE RHASSPY_DIRS ${APP_DIR}/\n\nRUN --mount=type=cache,id=pip-rhasspy,target=/root/.cache/pip \\\n    export PIP_INSTALL_ARGS=\"-f ${DOWNLOAD_DIR}/shared -f ${DOWNLOAD_DIR}/${TARGETARCH}${TARGETVARIANT}\" && \\\n    export PIP_PRE_PREINSTALL_PACKAGES='cython' && \\\n    export PIP_PREINSTALL_PACKAGES='numpy==1.20.1 scipy==1.5.1' && \\\n    export PIP_VERSION='pip<=20.2.4' && \\\n    if [ \"${TARGETARCH}${TARGETVARIANT}\" = 'amd64' ]; then \\\n        export PIP_PREINSTALL_PACKAGES=\"${PIP_PREINSTALL_PACKAGES} detect-simd~=0.2.0\"; \\\n    fi && \\\n    if [ ! \"${TARGETARCH}${TARGETVARIANT}\" = 'armv6' ]; then \\\n        export PIP_VERSION='pip'; \\\n        export PIP_PREINSTALL_PACKAGES=\"${PIP_PREINSTALL_PACKAGES} scikit-learn==0.23.2\"; \\\n    fi && \\\n    export POCKETSPHINX_FROM_SRC=no && \\\n    cd ${APP_DIR} && \\\n    make && \\\n    make install\n\n# Clean up\nRUN cd ${APP_DIR} && \\\n    find . -depth -type d -name '.git' -exec rm -rf {} \\; && \\\n    find . -depth -type d -name '__pycache__' -exec rm -rf {} \\; && \\\n    find . -type f -name 'g2p.fst.gz' -exec gunzip -f {} \\;\n\nCOPY VERSION ${BUILD_DIR}/\nCOPY debian/control.in /\n\nRUN export DEBIAN_ARCH=\"$(dpkg-architecture | grep DEB_BUILD_ARCH= | sed -e 's/[^=]\\+=//')\" && \\\n    export VERSION=\"$(cat ${BUILD_DIR}/VERSION)\" && \\\n    mkdir -p ${BUILD_DIR}/rhasspy/DEBIAN && \\\n    sed -e s\"/@VERSION@/${VERSION}/\" -e \"s/@DEBIAN_ARCH@/${DEBIAN_ARCH}/\" < /control.in > ${BUILD_DIR}/rhasspy/DEBIAN/control\n\nCOPY debian/rhasspy ${BUILD_DIR}/rhasspy/usr/bin/\n\nRUN cd ${BUILD_DIR} && \\\n    dpkg --build rhasspy\n\nRUN cd ${BUILD_DIR} && \\\n    dpkg-name *.deb\n\n# -----------------------------------------------------------------------------\n\nFROM scratch\n\nCOPY --from=rhasspy /build/*.deb /\n"
}