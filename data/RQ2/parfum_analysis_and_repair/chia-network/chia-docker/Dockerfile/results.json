{
  "startTime": 1674250308609,
  "endTime": 1674250309210,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# CHIA BUILD STEP\nFROM python:3.9 AS chia_build\n\nARG BRANCH=latest\nARG COMMIT=\"\"\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n        lsb-release sudo && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /chia-blockchain\n\nRUN echo \"cloning ${BRANCH}\" && \\\n    git clone --branch ${BRANCH} --recurse-submodules=mozilla-ca https://github.com/Chia-Network/chia-blockchain.git . && \\\n    # If COMMIT is set, check out that commit, otherwise just continue\n    ( [ ! -z \"$COMMIT\" ] && git checkout $COMMIT ) || true && \\\n    echo \"running build-script\" && \\\n    /bin/sh ./install.sh\n\n# IMAGE BUILD\nFROM python:3.9-slim\n\nEXPOSE 8555 8444\n\nENV CHIA_ROOT=/root/.chia/mainnet\nENV keys=\"generate\"\nENV service=\"farmer\"\nENV plots_dir=\"/plots\"\nENV farmer_address=\nENV farmer_port=\nENV testnet=\"false\"\nENV TZ=\"UTC\"\nENV upnp=\"true\"\nENV log_to_file=\"true\"\nENV healthcheck=\"true\"\n\n# Deprecated legacy options\nENV harvester=\"false\"\nENV farmer=\"false\"\n\n# Minimal list of software dependencies\n#   sudo: Needed for alternative plotter install\n#   tzdata: Setting the timezone\n#   curl: Health-checks\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y sudo tzdata curl && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    ln -snf \"/usr/share/zoneinfo/$TZ\" /etc/localtime && echo \"$TZ\" > /etc/timezone && \\\n    dpkg-reconfigure -f noninteractive tzdata\n\nCOPY --from=chia_build /chia-blockchain /chia-blockchain\n\nENV PATH=/chia-blockchain/venv/bin:$PATH\nWORKDIR /chia-blockchain\n\nCOPY docker-start.sh /usr/local/bin/\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY docker-healthcheck.sh /usr/local/bin/\n\nHEALTHCHECK --interval=1m --timeout=10s --start-period=20m \\\n  CMD /bin/bash /usr/local/bin/docker-healthcheck.sh || exit 1\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"docker-start.sh\"]\n"
}