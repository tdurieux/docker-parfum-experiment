{
  "startTime": 1674248795731,
  "endTime": 1674248797489,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 0,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 283,
        "lineEnd": 283,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 321,
        "lineEnd": 321,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 352,
        "lineEnd": 352,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 381,
        "lineEnd": 381,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 208,
        "lineEnd": 213,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 241,
        "lineEnd": 264,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 291,
        "lineEnd": 304,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 364,
        "lineEnd": 364,
        "columnStart": 3,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 388,
        "lineEnd": 391,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 404,
        "lineEnd": 404,
        "columnStart": 4,
        "columnEnd": 104
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The container we build here contains everything needed to compile PHP.\n\n\n# Lambda instances use a custom AMI named Amazon Linux 2, as\n# documented under the AWS Lambda Runtimes.\n# https://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html\n# AWS provides it a Docker image that we use here:\n# https://github.com/amazonlinux/container-images/tree/amzn2\nFROM public.ecr.aws/lambda/provided:al2\n\n\n# Move to /tmp to compile everything in there.\nWORKDIR /tmp\n\n\n# Lambda is based on Amazon Linux 2. Lock YUM to that release version.\nRUN sed -i 's/releasever=latest/releaserver=amzn2/' /etc/yum.conf\n\n\nRUN set -xe \\\n    # Download yum repository data to cache\n && yum makecache \\\n    # Default Development Tools\n && yum groupinstall -y \"Development Tools\" --setopt=group_package_types=mandatory,default\n\n\n# The default version of cmake we can get from the yum repo is 2.8.12. We need cmake to build a few of\n# our libraries, and at least one library requires a version of cmake greater than that.\n#\n# Needed to build:\n# - libzip: minimum required CMAKE version 3.0.\nRUN LD_LIBRARY_PATH= yum install -y cmake3 && rm -rf /var/cache/yum\nRUN ln -s /usr/bin/cmake3 /usr/bin/cmake\n\n# Use the bash shell, instead of /bin/sh\n# Why? We need to document this.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# We need a base path for all the sourcecode we will build from.\nENV BUILD_DIR=\"/tmp/build\"\n\n# We need a base path for the builds to install to. This path must\n# match the path that bref will be unpackaged to in Lambda.\nENV INSTALL_DIR=\"/opt/bref\"\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# ## # Enable size optimization (-Os)\n# # Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# # Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n\n# We need some default compiler variables setup\nENV PKG_CONFIG_PATH=\"${INSTALL_DIR}/lib64/pkgconfig:${INSTALL_DIR}/lib/pkgconfig\" \\\n    PKG_CONFIG=\"/usr/bin/pkg-config\" \\\n    PATH=\"${INSTALL_DIR}/bin:${PATH}\"\n\n\nENV LD_LIBRARY_PATH=\"${INSTALL_DIR}/lib64:${INSTALL_DIR}/lib\"\n\n# Enable parallelism for cmake (like make -j)\n# See https://stackoverflow.com/a/50883540/245552\nRUN export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)\n\n# Ensure we have all the directories we require in the container.\nRUN mkdir -p ${BUILD_DIR}  \\\n    ${INSTALL_DIR}/bin \\\n    ${INSTALL_DIR}/doc \\\n    ${INSTALL_DIR}/etc/php \\\n    ${INSTALL_DIR}/etc/php/conf.d \\\n    ${INSTALL_DIR}/include \\\n    ${INSTALL_DIR}/lib \\\n    ${INSTALL_DIR}/lib64 \\\n    ${INSTALL_DIR}/libexec \\\n    ${INSTALL_DIR}/sbin \\\n    ${INSTALL_DIR}/share\n\n\n###############################################################################\n# ZLIB Build\n# https://github.com/madler/zlib/releases\n# Needed for:\n#   - openssl\n#   - curl\n#   - php\n# Used By:\n#   - xml2\nENV VERSION_ZLIB=1.2.12\nENV ZLIB_BUILD_DIR=${BUILD_DIR}/xml2\n\nRUN set -xe; \\\n    mkdir -p ${ZLIB_BUILD_DIR}; \\\n# Download and upack the source code\n    curl -f -Ls https://zlib.net/zlib-${VERSION_ZLIB}.tar.xz \\\n  | tar xJC ${ZLIB_BUILD_DIR} --strip-components=1\n\n# Move into the unpackaged code directory\nWORKDIR  ${ZLIB_BUILD_DIR}/\n\n# Configure the build\nRUN set -xe; \\\n    make distclean \\\n && CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n    --prefix=${INSTALL_DIR} \\\n    --64\n\nRUN set -xe; \\\n    make install \\\n && rm ${INSTALL_DIR}/lib/libz.a\n\n###############################################################################\n# OPENSSL Build\n# https://github.com/openssl/openssl/releases\n# Needs:\n#   - zlib\n# Needed by:\n#   - curl\n#   - php\nENV VERSION_OPENSSL=1.1.1q\nENV OPENSSL_BUILD_DIR=${BUILD_DIR}/openssl\nENV CA_BUNDLE_SOURCE=\"https://curl.se/ca/cacert.pem\"\nENV CA_BUNDLE=\"${INSTALL_DIR}/ssl/cert.pem\"\n\n\nRUN set -xe; \\\n    mkdir -p ${OPENSSL_BUILD_DIR}; \\\n# Download and upack the source code\n    curl -f -Ls https://github.com/openssl/openssl/archive/OpenSSL_${VERSION_OPENSSL//./_}.tar.gz \\\n  | tar xzC ${OPENSSL_BUILD_DIR} --strip-components=1\n\n# Move into the unpackaged code directory\nWORKDIR  ${OPENSSL_BUILD_DIR}/\n\n\n# Configure the build\nRUN set -xe; \\\n    CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    ./config \\\n        --prefix=${INSTALL_DIR} \\\n        --openssldir=${INSTALL_DIR}/ssl \\\n        --release \\\n        no-tests \\\n        shared \\\n        zlib\n\nRUN set -xe; \\\n    make install \\\n && curl -f -Lk -o ${CA_BUNDLE} ${CA_BUNDLE_SOURCE}\n\n###############################################################################\n# LIBSSH2 Build\n# https://github.com/libssh2/libssh2/releases\n# Needs:\n#   - zlib\n#   - OpenSSL\n# Needed by:\n#   - curl\nENV VERSION_LIBSSH2=1.10.0\nENV LIBSSH2_BUILD_DIR=${BUILD_DIR}/libssh2\n\nRUN set -xe; \\\n    mkdir -p ${LIBSSH2_BUILD_DIR}/bin; \\\n    # Download and upack the source code\n    curl -f -Ls https://github.com/libssh2/libssh2/releases/download/libssh2-${VERSION_LIBSSH2}/libssh2-${VERSION_LIBSSH2}.tar.gz \\\n  | tar xzC ${LIBSSH2_BUILD_DIR} --strip-components=1\n\n# Move into the unpackaged code directory\nWORKDIR  ${LIBSSH2_BUILD_DIR}/bin/\n\n# Configure the build\nRUN set -xe; \\\n    CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    cmake .. \\\n    -DBUILD_SHARED_LIBS=ON \\\n    -DCRYPTO_BACKEND=OpenSSL \\\n    -DENABLE_ZLIB_COMPRESSION=ON \\\n    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \\\n    -DCMAKE_BUILD_TYPE=RELEASE\n\nRUN set -xe; \\\n    cmake  --build . --target install\n\n###############################################################################\n# LIBNGHTTP2 Build\n# This adds support for HTTP 2 requests in curl.\n# See https://github.com/brefphp/bref/issues/727 and https://github.com/brefphp/bref/pull/740\n# https://github.com/nghttp2/nghttp2/releases\n# Needs:\n#   - zlib\n#   - OpenSSL\n# Needed by:\n#   - curl\nENV VERSION_NGHTTP2=1.48.0\nENV NGHTTP2_BUILD_DIR=${BUILD_DIR}/nghttp2\n\nRUN set -xe; \\\n    mkdir -p ${NGHTTP2_BUILD_DIR}; \\\n    curl -f -Ls https://github.com/nghttp2/nghttp2/releases/download/v${VERSION_NGHTTP2}/nghttp2-${VERSION_NGHTTP2}.tar.gz \\\n    | tar xzC ${NGHTTP2_BUILD_DIR} --strip-components=1\n\nWORKDIR  ${NGHTTP2_BUILD_DIR}/\n\nRUN set -xe; \\\n    CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n    --enable-lib-only \\\n    --prefix=${INSTALL_DIR}\n\nRUN set -xe; \\\n    make install\n\n\n###############################################################################\n# CURL Build\n# # https://github.com/curl/curl/releases\n# # Needs:\n# #   - zlib\n# #   - OpenSSL\n# #   - libssh2\n# # Needed by:\n# #   - php\nENV VERSION_CURL=7.84.0\nENV CURL_BUILD_DIR=${BUILD_DIR}/curl\n\nRUN set -xe; \\\n            mkdir -p ${CURL_BUILD_DIR}/bin; \\\n curl -f -Ls https://github.com/curl/curl/archive/curl-${VERSION_CURL//./_}.tar.gz \\\n| tar xzC ${CURL_BUILD_DIR} --strip-components=1\n\n\nWORKDIR  ${CURL_BUILD_DIR}/\n\nRUN set -xe; \\\n    ./buildconf \\\n && CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n    --prefix=${INSTALL_DIR} \\\n    --with-ca-bundle=${CA_BUNDLE} \\\n    --enable-shared \\\n    --disable-static \\\n    --enable-optimize \\\n    --disable-warnings \\\n    --disable-dependency-tracking \\\n    --with-zlib \\\n    --enable-http \\\n    --enable-ftp \\\n    --enable-file \\\n    --enable-proxy \\\n    --enable-tftp \\\n    --enable-ipv6 \\\n    --enable-openssl-auto-load-config \\\n    --enable-cookies \\\n    --with-gnu-ld \\\n    --with-ssl \\\n    --with-libssh2 \\\n    --with-nghttp2\n\n\nRUN set -xe; \\\n    make install\n\n###############################################################################\n# LIBXML2 Build\n# https://github.com/GNOME/libxml2/releases\n# Uses:\n#   - zlib\n# Needed by:\n#   - php\nENV VERSION_XML2=2.9.14\nENV XML2_BUILD_DIR=${BUILD_DIR}/xml2\n\nRUN set -xe; \\\n    mkdir -p ${XML2_BUILD_DIR}; \\\n# Download and upack the source code\n    curl -f -Ls https://download.gnome.org/sources/libxml2/2.9/libxml2-${VERSION_XML2}.tar.xz \\\n  | tar xJC ${XML2_BUILD_DIR} --strip-components=1\n\n# Move into the unpackaged code directory\nWORKDIR  ${XML2_BUILD_DIR}/\n\n# Configure the build\nRUN set -xe; \\\n    CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n    --prefix=${INSTALL_DIR} \\\n    --with-sysroot=${INSTALL_DIR} \\\n    --enable-shared \\\n    --disable-static \\\n    --with-html \\\n    --with-history \\\n    --enable-ipv6=no \\\n    --with-icu \\\n    --with-zlib=${INSTALL_DIR} \\\n    --without-python\n\nRUN set -xe; \\\n    make install \\\n && cp xml2-config ${INSTALL_DIR}/bin/xml2-config\n\n###############################################################################\n# LIBZIP Build\n# https://github.com/nih-at/libzip/releases\n# Needed by:\n#   - php\nENV VERSION_ZIP=1.9.2\nENV ZIP_BUILD_DIR=${BUILD_DIR}/zip\n\nRUN set -xe; \\\n    mkdir -p ${ZIP_BUILD_DIR}/bin/; \\\n# Download and upack the source code\n    curl -f -Ls https://github.com/nih-at/libzip/releases/download/v${VERSION_ZIP}/libzip-${VERSION_ZIP}.tar.gz \\\n  | tar xzC ${ZIP_BUILD_DIR} --strip-components=1\n\n# Move into the unpackaged code directory\nWORKDIR  ${ZIP_BUILD_DIR}/bin/\n\n# Configure the build\nRUN set -xe; \\\n    CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    cmake .. \\\n    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \\\n    -DCMAKE_BUILD_TYPE=RELEASE\n\nRUN set -xe; \\\n    cmake  --build . --target install\n\n###############################################################################\n# LIBSODIUM Build\n# https://github.com/jedisct1/libsodium/releases\n# Needs:\n#\n# Needed by:\n#   - php\nENV VERSION_LIBSODIUM=1.0.18\nENV LIBSODIUM_BUILD_DIR=${BUILD_DIR}/libsodium\n\nRUN set -xe; \\\n    mkdir -p ${LIBSODIUM_BUILD_DIR}; \\\n   # Download and unpack the source code\n    curl -f -Ls https://github.com/jedisct1/libsodium/archive/${VERSION_LIBSODIUM}.tar.gz \\\n  | tar xzC ${LIBSODIUM_BUILD_DIR} --strip-components=1\n\n# Move into the unpackaged code directory\nWORKDIR  ${LIBSODIUM_BUILD_DIR}/\n\n# Configure the build\nRUN set -xe; \\\n    CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    ./autogen.sh \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${INSTALL_DIR}\n\nRUN set -xe; \\\n    make install\n\n###############################################################################\n# Postgres Build\n# https://github.com/postgres/postgres/releases\n# Needs:\n#   - OpenSSL\n# Needed by:\n#   - php\nENV VERSION_POSTGRES=14.4\nENV POSTGRES_BUILD_DIR=${BUILD_DIR}/postgres\n\nRUN set -xe; \\\n    mkdir -p ${POSTGRES_BUILD_DIR}/bin; \\\n    curl -f -Ls https://github.com/postgres/postgres/archive/REL_${VERSION_POSTGRES//./_}.tar.gz \\\n    | tar xzC ${POSTGRES_BUILD_DIR} --strip-components=1\n\n\nWORKDIR  ${POSTGRES_BUILD_DIR}/\n\nRUN set -xe; \\\n    CFLAGS=\"\" \\\n    CPPFLAGS=\"-I${INSTALL_DIR}/include  -I/usr/include\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib\" \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n    --prefix=${INSTALL_DIR} --with-openssl --without-readline\n\nRUN set -xe; cd ${POSTGRES_BUILD_DIR}/src/interfaces/libpq && make -j $(nproc) && make install\nRUN set -xe; cd ${POSTGRES_BUILD_DIR}/src/bin/pg_config && make -j $(nproc) && make install\nRUN set -xe; cd ${POSTGRES_BUILD_DIR}/src/backend && make generated-headers\nRUN set -xe; cd ${POSTGRES_BUILD_DIR}/src/include && make install\n\n# Install some dev files for using old libraries already on the system\n# readline-devel : needed for the --with-libedit flag\n# gettext-devel : needed for the --with-gettext flag\n# libicu-devel : needed for\n# libxslt-devel : needed for the XSL extension\n# sqlite-devel : Since PHP 7.4 this must be installed (https://github.com/php/php-src/blob/99b8e67615159fc600a615e1e97f2d1cf18f14cb/UPGRADING#L616-L619)\nRUN LD_LIBRARY_PATH= yum install -y readline-devel gettext-devel libicu-devel libxslt-devel sqlite-devel && rm -rf /var/cache/yum\n\nRUN cp -a /usr/lib64/libgcrypt.so* ${INSTALL_DIR}/lib64/\n\n# Copy readline shared libs that are not present in amazonlinux2\nRUN cp -a /usr/lib64/libreadline.so?* ${INSTALL_DIR}/lib64/\n\n# Copy gpg-error shared libds that are not present in amazonlinux2\nRUN cp -a /usr/lib64/libgpg-error.so* ${INSTALL_DIR}/lib64/\n\n# Copy gettext shared libs that are not present in amazonlinux2\nRUN cp -a /usr/lib64/libasprintf.so* ${INSTALL_DIR}/lib64/\nRUN cp -a /usr/lib64/libgettextpo.so* ${INSTALL_DIR}/lib64/\nRUN cp -a /usr/lib64/preloadable_libintl.so* ${INSTALL_DIR}/lib64/\n\n# Copy xslt shared libs that are not present in amazonlinux2\nRUN cp -a /usr/lib64/lib*xslt*.so* ${INSTALL_DIR}/lib64/\n\n# Copy sqlite3 shared libs that are not present in amazonlinux2\nRUN cp -a /usr/lib64/libsqlite3*.so* ${INSTALL_DIR}/lib64/\n"
}