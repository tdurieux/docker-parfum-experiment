{
  "startTime": 1674255813916,
  "endTime": 1674255815064,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The container we build here contains everything needed to compile PHP + PHP.\n#\n# It can be used as a base to compile extra extensions.\n\n# PHP Build\n# https://github.com/php/php-src/releases\n# Needs:\n#   - zlib\n#   - libxml2\n#   - openssl\n#   - readline\n#   - sodium\n\nFROM bref/tmp/step-1/build-environment as build-environment\n\n\n###############################################################################\n# Oniguruma\n# This library is not packaged in PHP since PHP 7.4.\n# See https://github.com/php/php-src/blob/43dc7da8e3719d3e89bd8ec15ebb13f997bbbaa9/UPGRADING#L578-L581\n# We do not install the system version because I didn't manage to make it work...\n# Ideally we shouldn't compile it ourselves.\n# https://github.com/kkos/oniguruma/releases\n# Needed by:\n#   - php mbstring\nENV VERSION_ONIG=6.9.8\nENV ONIG_BUILD_DIR=${BUILD_DIR}/oniguruma\nRUN set -xe; \\\n    mkdir -p ${ONIG_BUILD_DIR}; \\\n    curl -f -Ls https://github.com/kkos/oniguruma/releases/download/v${VERSION_ONIG}/onig-${VERSION_ONIG}.tar.gz \\\n    | tar xzC ${ONIG_BUILD_DIR} --strip-components=1\nWORKDIR  ${ONIG_BUILD_DIR}/\nRUN set -xe; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${INSTALL_DIR}; \\\n    make -j $(nproc); \\\n    make install\n\n\nENV VERSION_PHP=7.4.30\n\n\nENV PHP_BUILD_DIR=${BUILD_DIR}/php\nRUN set -xe; \\\n    mkdir -p ${PHP_BUILD_DIR}; \\\n    # Download and upack the source code\n    # --location will follow redirects\n    # --silent will hide the progress, but also the errors: we restore error messages with --show-error\n    # --fail makes sure that curl returns an error instead of fetching the 404 page\n    curl --location --silent --show-error --fail https://www.php.net/get/php-${VERSION_PHP}.tar.gz/from/this/mirror \\\n  | tar xzC ${PHP_BUILD_DIR} --strip-components=1\n# Move into the unpackaged code directory\nWORKDIR  ${PHP_BUILD_DIR}/\n\n# Configure the build\n# -fstack-protector-strong : Be paranoid about stack overflows\n# -fpic : Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# -fpie : Support Address Space Layout Randomization (see -fpic)\n# -O3 : Optimize for fastest binaries possible.\n# -I : Add the path to the list of directories to be searched for header files during preprocessing.\n# --enable-option-checking=fatal: make sure invalid --configure-flags are fatal errors instead of just warnings\n# --enable-ftp: because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n# --enable-mbstring: because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n# --with-zlib and --with-zlib-dir: See https://stackoverflow.com/a/42978649/245552\n# --with-pear: necessary for `pecl` to work (to install PHP extensions)\n#\nRUN set -xe \\\n && ./buildconf --force \\\n && CFLAGS=\"-fstack-protector-strong -fpic -fpie -O3 -I${INSTALL_DIR}/include -I/usr/include -ffunction-sections -fdata-sections\" \\\n    CPPFLAGS=\"-fstack-protector-strong -fpic -fpie -O3 -I${INSTALL_DIR}/include -I/usr/include -ffunction-sections -fdata-sections\" \\\n    LDFLAGS=\"-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib -Wl,-O1 -Wl,--strip-all -Wl,--hash-style=both -pie\" \\\n    ./configure \\\n        --build=x86_64-pc-linux-gnu \\\n        --prefix=${INSTALL_DIR} \\\n        --enable-option-checking=fatal \\\n        --enable-sockets \\\n        --with-config-file-path=${INSTALL_DIR}/etc/php \\\n        --with-config-file-scan-dir=${INSTALL_DIR}/etc/php/conf.d:/var/task/php/conf.d \\\n        --enable-fpm \\\n        --disable-cgi \\\n        --enable-cli \\\n        --disable-phpdbg \\\n        --disable-phpdbg-webhelper \\\n        --with-sodium \\\n        --with-readline \\\n        --with-openssl \\\n        --with-zlib=${INSTALL_DIR} \\\n        --with-zlib-dir=${INSTALL_DIR} \\\n        --with-curl \\\n        --enable-exif \\\n        --enable-ftp \\\n        --with-gettext \\\n        --enable-mbstring \\\n        --with-pdo-mysql=shared,mysqlnd \\\n        --with-mysqli \\\n        --enable-pcntl \\\n        --with-zip \\\n        --enable-bcmath \\\n        --with-pdo-pgsql=shared,${INSTALL_DIR} \\\n        --enable-intl=shared \\\n        --enable-soap \\\n        --with-xsl=${INSTALL_DIR} \\\n        --with-pear\nRUN make -j $(nproc)\n# Run `make install` and override PEAR's PHAR URL because pear.php.net is down\nRUN set -xe; \\\n make install PEAR_INSTALLER_URL='https://github.com/pear/pearweb_phars/raw/master/install-pear-nozlib.phar'; \\\n { find ${INSTALL_DIR}/bin ${INSTALL_DIR}/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; }; \\\n make clean; \\\n cp php.ini-production ${INSTALL_DIR}/etc/php/php.ini\n\n# Symlink all our binaries into /opt/bin so that Lambda sees them in the path.\nRUN mkdir -p /opt/bin \\\n    && cd /opt/bin \\\n    && ln -s ../bref/bin/* . \\\n    && ln -s ../bref/sbin/* .\n\n# Install extensions\n# We can install extensions manually or using `pecl`\nRUN pecl install APCu\n\n# Run the next step in the previous environment because the `clean.sh` script needs `find`,\n# which isn't installed by default\nFROM build-environment as build-environment-cleaned\n# Remove extra files to make the layers as slim as possible\nCOPY clean.sh /tmp/clean.sh\nRUN /tmp/clean.sh && rm /tmp/clean.sh\n\n\n# Now we start back from a clean image.\n# We get rid of everything that is unnecessary (build tools, source code, and anything else\n# that might have created intermediate layers for docker) by copying online the /opt directory.\nFROM public.ecr.aws/lambda/provided:al2\nENV PATH=\"/opt/bin:${PATH}\" \\\n    LD_LIBRARY_PATH=\"/opt/bref/lib64:/opt/bref/lib\"\n\n# Copy everything we built above into the same dir on the base AmazonLinux container.\nCOPY --from=build-environment-cleaned /opt /opt\n\n# Set the workdir to the same directory as in AWS Lambda\nWORKDIR /var/task\n"
}