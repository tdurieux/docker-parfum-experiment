{
  "startTime": 1674253228421,
  "endTime": 1674253229182,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerized nvm development environment\n#\n# This Dockerfile is for building nvm development environment only,\n# not for any distribution/production usage.\n#\n# Please note that it'll use about 1.2 GB disk space and about 15 minutes to\n# build this image, it depends on your hardware.\n\n# Use Ubuntu Trusty Tahr as base image as we're using on Travis CI\n# I also tested with Ubuntu 16.04, should be good with it!\nFrom ubuntu:14.04\nMAINTAINER Peter Dave Hello <hsu@peterdavehello.org>\n\n# Prevent dialog during apt install\nENV DEBIAN_FRONTEND noninteractive\n\n# ShellCheck version\nENV SHELLCHECK_VERSION=0.4.7\n\n# Pick a Ubuntu apt mirror site for better speed\n# ref: https://launchpad.net/ubuntu/+archivemirrors\nENV UBUNTU_APT_SITE ubuntu.cs.utah.edu\n\n# Disable src package source\nRUN sed -i 's/^deb-src\\ /\\#deb-src\\ /g' /etc/apt/sources.list\n\n# Replace origin apt package site with the mirror site\nRUN sed -E -i \"s/([a-z]+.)?archive.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\nRUN sed -i \"s/security.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\n\n# Install apt packages\nRUN apt update         && \\\n    apt upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" && \\\n    apt install --no-install-recommends -y -o Dpkg::Options::=\"--force-confdef\" -o \\\n        coreutils \\\n        util-linux \\\n        bsdutils \\\n        file \\\n        openssl \\\n        ca-certificates \\\n        ssh \\\n        wget \\\n        patch \\\n        sudo \\\n        htop \\\n        dstat \\\n        vim \\\n        tmux \\\n        curl \\\n        git \\\n        jq \\\n        realpath \\\n        zsh \\\n        ksh \\\n        gcc-4.8 \\\n        g++-4.8 \\\n        xz-utils \\\n        build-essential \\\n        bash-completion && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# ShellCheck with Ubuntu 14.04 container workaround\nRUN wget https://storage.googleapis.com/shellcheck/shellcheck-v$SHELLCHECK_VERSION.linux.x86_64.tar.xz -O- | \\\n    tar xJvf - shellcheck-v$SHELLCHECK_VERSION/shellcheck          && \\\n    mv shellcheck-v$SHELLCHECK_VERSION/shellcheck /bin             && \\\n    rmdir shellcheck-v$SHELLCHECK_VERSION                          && \\\n    touch /tmp/libc.so.6                                           && \\\n    echo \"alias shellcheck='LD_LIBRARY_PATH=/tmp /bin/shellcheck'\" >> /etc/bash.bashrc\nRUN LD_LIBRARY_PATH=/tmp shellcheck -V\n\n# Set locale\nRUN locale-gen en_US.UTF-8\n\n# Print tool versions\nRUN bash --version | head -n 1\nRUN zsh --version\nRUN ksh --version || true\nRUN dpkg -s dash | grep ^Version | awk '{print $2}'\nRUN git --version\nRUN curl -f --version\nRUN wget --version\n\n# Add user \"nvm\" as non-root user\nRUN useradd -ms /bin/bash nvm\n\n# Set sudoer for \"nvm\"\nRUN echo 'nvm ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n\n# Switch to user \"nvm\" from now\nUSER nvm\n\n# nvm\nCOPY . /home/nvm/.nvm/\nRUN sudo chown nvm:nvm -R $HOME/.nvm\nRUN echo 'export NVM_DIR=\"$HOME/.nvm\"'                                        >> $HOME/.bashrc\nRUN echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> $HOME/.bashrc\nRUN echo '[ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion' >> $HOME/.bashrc\n\n# nodejs and tools\nRUN bash -c 'source $HOME/.nvm/nvm.sh   && \\\n    nvm install node                    && \\\n    npm install -g doctoc urchin        && \\\n    npm install --prefix \"$HOME/.nvm/\"'\n\n# Set WORKDIR to nvm directory\nWORKDIR /home/nvm/.nvm\n\nENTRYPOINT /bin/bash\n"
}