{
  "startTime": 1674251781089,
  "endTime": 1674251782285,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:17.3-alpine3.12 as node_runner\n\nENV NODE_ENV=production\nENV PYTHONUNBUFFERED=1\n\nWORKDIR /srv/app\n\nCOPY gulp-config.js .\nCOPY gulpfile.js .\nCOPY package.json .\nCOPY yarn.lock .\n\nRUN set -eux; \\\n    apk add --update --no-cache \\\n      g++ \\\n      make \\\n      python3; \\\n    ln -sf python3 /usr/bin/python; \\\n    python3 -m ensurepip; \\\n    pip3 install --no-cache-dir --no-cache --upgrade pip setuptools\n\nRUN npm start\n\nFROM php:7.4-fpm-alpine3.13 as symfony_php\n\nARG APCU_VERSION=5.1.21\nARG APCU_BC_VERSION=1.0.5\n\nENV LC_ALL POSIX\n\n# install gnu-libiconv and set LD_PRELOAD env to make iconv work fully on Alpine image.\n# see https://github.com/docker-library/php/issues/240#issuecomment-763112749\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so\n\nWORKDIR /srv/app\n\nCOPY --from=composer /usr/bin/composer /usr/local/bin/composer\nCOPY . .\nCOPY --from=node_runner /srv/app/node_modules .\nCOPY docker/php/zz-apcu_bc.ini /usr/local/etc/php/conf.d/\nCOPY docker/php/wait-for /usr/local/bin/\nCOPY docker/php/docker-entrypoint /usr/local/bin/\n\nRUN set -eux; \\\n    cp /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini; \\\n    chmod +x /usr/local/bin/docker-entrypoint; \\\n    chmod +x /usr/local/bin/wait-for\n\nRUN apk add --no-cache \\\n        acl \\\n        fcgi \\\n        file \\\n        gettext \\\n        git \\\n        gnu-libiconv \\\n        vim \\\n        zip\n\nRUN set -eux; \\\n    apk add --no-cache --virtual .build-deps \\\n        $PHPIZE_DEPS \\\n        icu-dev \\\n        libzip-dev \\\n        zlib-dev \\\n    ; \\\n    \\\n    docker-php-ext-configure zip; \\\n    docker-php-ext-install -j$(nproc) \\\n        intl \\\n        zip \\\n        pdo \\\n        pdo_mysql \\\n    ; \\\n    pecl install \\\n        apcu-${APCU_VERSION} \\\n        apcu_bc-${APCU_BC_VERSION} \\\n    ; \\\n    pecl clear-cache; \\\n    docker-php-ext-enable \\\n        apcu \\\n    ; \\\n    \\\n    runDeps=\"$( \\\n        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n            | tr ',' '\\n' \\\n            | sort -u \\\n            | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    )\"; \\\n    apk add --no-cache --virtual .phpexts-rundeps $runDeps; \\\n    \\\n    apk del .build-deps\n\nRUN set -eux; \\\n    mkdir -p var/cache logs; \\\n    setfacl -R -m u:www-data:rwX -m u:\"$(whoami)\":rwX var; \\\n    setfacl -dR -m u:www-data:rwX -m u:\"$(whoami)\":rwX var; \\\n    setfacl -R -m u:www-data:rwX -m u:\"$(whoami)\":rwX logs; \\\n    setfacl -dR -m u:www-data:rwX -m u:\"$(whoami)\":rwX logs; \\\n    composer install; \\\n    chmod +x bin/console; \\\n    sync;\n\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint\"]\nCMD [\"php-fpm\"]\n\nFROM nginx:stable-alpine as symfony_nginx\n\nWORKDIR /srv/app\n\nCOPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf\nCOPY --from=symfony_php /srv/app/www www/\n"
}