{
  "startTime": 1674247890202,
  "endTime": 1674247890942,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 176
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 92,
        "columnEnd": 158
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG LLVM_VERSION=11\nARG ARCH=amd64\nARG UBUNTU_VERSION=20.04\nARG DISTRO_BASE=ubuntu${UBUNTU_VERSION}\nARG BUILD_BASE=ubuntu:${UBUNTU_VERSION}\nARG LIBRARIES=/opt/trailofbits\n\n# Using this file:\n# 1. Clone the mcsema repo https://github.com/lifting-bits/mcsema\n# 2. docker build -t=mcsema .\n# To run the lifter\n# 3. docker run --rm -it --ipc=host -v \"${PWD}\":/home/user/local mcsema\n# To run the disassembler\n# 4. docker run --rm --entrypoint=mcsema-disass -it --ipc=host -v \"${PWD}\":/home/user/local mcsema\n\n# Run-time dependencies go here\nFROM ${BUILD_BASE} as base\nARG UBUNTU_VERSION\nARG LIBRARIES\nRUN apt-get update && \\\n    apt-get install -qqy --no-install-recommends python3 python3-pip python3-setuptools python3-six python3.8 zlib1g curl ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# Build-time dependencies go here\nFROM trailofbits/cxx-common-vcpkg-builder-ubuntu:${UBUNTU_VERSION} as deps\nARG UBUNTU_VERSION\nARG ARCH\nARG LLVM_VERSION\nARG LIBRARIES\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -qqy python3 python3-pip libc6-dev wget liblzma-dev zlib1g-dev curl git build-essential ninja-build libselinux1-dev libbsd-dev ccache pixz xz-utils make rpm && \\\n    if [ \"$(uname -m)\" = \"x86_64\" ]; then \\\n    dpkg --add-architecture i386 && apt-get update && apt-get install --no-install-recommends -qqy gcc-multilib g++-multilib zip zlib1g-dev:i386; fi && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    pip3 install --no-cache-dir ccsyspath\n\n# Build dependencies\nRUN git clone --branch master https://github.com/lifting-bits/remill.git && \\\n    cd remill && git checkout -b release_710013a 710013a && \\\n    ./scripts/build.sh --llvm-version ${LLVM_VERSION} --prefix ${LIBRARIES} --download-dir /tmp\n\n# Make this a separate RUN because the build script above downloads a lot\nRUN cd remill && \\\n    cmake --build remill-build --target install -- -j \"$(nproc)\" && \\\n    cd ../ && \\\n    git clone --branch master https://github.com/lifting-bits/anvill.git && \\\n    ( cd anvill && git checkout -b release_bc3183b bc3183b ) && \\\n    mkdir -p anvill/build && cd anvill/build && \\\n    cmake -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=${LIBRARIES} -Dremill_DIR=${LIBRARIES}/lib/cmake/remill -DVCPKG_ROOT=/tmp/vcpkg_ubuntu-${UBUNTU_VERSION}_llvm-${LLVM_VERSION}_${ARCH} .. && \\\n    cmake --build . --target install -- -j \"$(nproc)\"\n\nWORKDIR /mcsema\n\n# Source code build\nFROM deps as build\nARG UBUNTU_VERSION\nARG ARCH\nARG LLVM_VERSION\nARG LIBRARIES\n\nCOPY . ./\n\n# Need to move python version-specific installation directory to general\n# version directory since we don't know exactly which Python3 version Ubutnu\n# ships with to set the environment variable PYTHONPATH in dist image\nRUN mkdir -p ./build && cd ./build && \\\n    cmake -G Ninja -Danvill_DIR=${LIBRARIES}/lib/cmake/anvill -Dremill_DIR=${LIBRARIES}/lib/cmake/remill -DMCSEMA_DISABLED_ABI_LIBRARIES:STRING=\"\" -DCMAKE_VERBOSE_MAKEFILE=True -DVCPKG_ROOT=/tmp/vcpkg_ubuntu-${UBUNTU_VERSION}_llvm-${LLVM_VERSION}_${ARCH} -DCMAKE_INSTALL_PREFIX=${LIBRARIES} .. && \\\n    cmake --build . --target install\nRUN mv ${LIBRARIES}/lib/python3.* ${LIBRARIES}/lib/python3\n\n# WORKDIR tests/test_suite_generator\n# RUN mkdir -p build && \\\n#     cd build && \\\n#     cmake -DMCSEMALIFT_PATH=/opt/trailofbits/bin \\\n#           -DMCSEMA_PREBUILT_CFG_PATH=\"$(pwd)/../generated/prebuilt_cfg/\" \\\n#       -DMCSEMADISASS_PATH=/opt/trailofbits/bin \\\n#       .. && \\\n#     cmake --build . --target install\n#\n# RUN cd test_suite && \\\n#     PATH=\"/opt/trailofbits/bin:${PATH}\" python3 start.py\n\nFROM base as dist\nARG LIBRARIES\nARG LLVM_VERSION\n\n# Allow for mounting of local folder\nRUN mkdir -p /mcsema/local\n\nCOPY --from=build ${LIBRARIES} ${LIBRARIES}\nCOPY scripts/docker-lifter-entrypoint.sh ${LIBRARIES}\nENV LLVM_VERSION=llvm${LLVM_VERSION} \\\n    PATH=\"${LIBRARIES}/bin:${PATH}\" \\\n    PYTHONPATH=\"${LIBRARIES}/lib/python3/site-packages\"\nENTRYPOINT [\"/opt/trailofbits/docker-lifter-entrypoint.sh\"]\n\n################################\n# Left to reader to install    #\n#  their disassembler (IDA/BN) #\n################################\n# But, as an example:\n# ADD local-relative/path/to/binaryninja/ /root/binaryninja/\n# ADD local-relative/path/to/.binaryninja/ /root/.binaryninja/ # <- Make sure there's no `lastrun` file\n# RUN /root/binaryninja/scripts/linux-setup.sh\n"
}