{
  "startTime": 1674216140014,
  "endTime": 1674216141254,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 2,
        "columnEnd": 20
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 20,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 24,
        "columnStart": 25,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 20,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 24,
        "columnStart": 25,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 20,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 100,
        "lineEnd": 104,
        "columnStart": 20,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 58,
        "columnEnd": 74
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 18,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 71,
        "columnEnd": 87
      }
    }
  ],
  "repairedDockerfile": "ARG UBUNTU_VERSION=20.04\nFROM ubuntu:${UBUNTU_VERSION} as haskell-builder\nENV DEBIAN_FRONTEND=nonintercative\nRUN mkdir -p /app/src\nWORKDIR /app\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n  automake=1:1.16.* \\\n  build-essential=12.* \\\n  g++=4:9.3.* \\\n  git=1:2.25.* \\\n  jq \\\n  libffi-dev=3.* \\\n  libghc-postgresql-libpq-dev=0.9.4.* \\\n  libgmp-dev=2:6.2.* \\\n  libncursesw5=6.* \\\n  libpq-dev=12.* \\\n  libssl-dev=1.1.* \\\n  libsystemd-dev=245.* \\\n  libtinfo-dev=6.* \\\n  libtool=2.4.* \\\n  make=4.2.* \\\n  pkg-config=0.29.* \\\n  tmux=3.* \\\n  wget=1.20.* \\\n  zlib1g-dev=1:1.2.* && rm -rf /var/lib/apt/lists/*;\nARG CABAL_VERSION=3.2.0.0\nRUN wget --secure-protocol=TLSv1_2 \\\n  https://downloads.haskell.org/~cabal/cabal-install-${CABAL_VERSION}/cabal-install-${CABAL_VERSION}-x86_64-unknown-linux.tar.xz &&\\\n  tar -xf cabal-install-${CABAL_VERSION}-x86_64-unknown-linux.tar.xz &&\\\n  rm cabal-install-${CABAL_VERSION}-x86_64-unknown-linux.tar.xz cabal.sig &&\\\n  mv cabal /usr/local/bin/\nRUN cabal update\nWORKDIR /app/ghc\nARG GHC_VERSION=8.10.7\nRUN wget --secure-protocol=TLSv1_2 \\\n  https://downloads.haskell.org/~ghc/${GHC_VERSION}/ghc-${GHC_VERSION}-x86_64-deb9-linux.tar.xz &&\\\n  tar -xf ghc-${GHC_VERSION}-x86_64-deb9-linux.tar.xz &&\\\n  rm ghc-${GHC_VERSION}-x86_64-deb9-linux.tar.xz\nWORKDIR /app/ghc/ghc-${GHC_VERSION}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make install\nWORKDIR /app/src\nARG IOHK_LIBSODIUM_GIT_REV=66f017f16633f2060db25e17c170c2afa0f2a8a1\nRUN git clone https://github.com/input-output-hk/libsodium.git &&\\\n  cd libsodium &&\\\n  git fetch --all --tags &&\\\n  git checkout ${IOHK_LIBSODIUM_GIT_REV}\nWORKDIR /app/src/libsodium\nRUN ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\"\nWORKDIR /app/src\nRUN git clone https://github.com/bitcoin-core/secp256k1 &&\\\n  cd secp256k1 &&\\\n  git checkout ac83be33\nWORKDIR /app/src/secp256k1\nRUN ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-module-schnorrsig --enable-experimental && \\\n    make && make install\nWORKDIR /app/src\nARG CARDANO_NODE_VERSION=1.35.0\nRUN git clone https://github.com/input-output-hk/cardano-node.git &&\\\n  cd cardano-node &&\\\n  git fetch --all --tags &&\\\n  git checkout ${CARDANO_NODE_VERSION}\nWORKDIR /app/src/cardano-node\nRUN cabal install cardano-node \\\n  --install-method=copy \\\n  --installdir=/usr/local/bin \\\n  -f -systemd\nRUN cabal install cardano-cli \\\n  --install-method=copy \\\n  --installdir=/usr/local/bin \\\n  -f -systemd\nWORKDIR /app/src\nARG CARDANO_DB_SYNC_VERSION=13.0.0\nRUN git clone https://github.com/input-output-hk/cardano-db-sync.git &&\\\n  cd cardano-db-sync &&\\\n  git fetch --all --tags &&\\\n  git checkout ${CARDANO_DB_SYNC_VERSION}\nWORKDIR /app/src/cardano-db-sync\nRUN cabal install cardano-db-sync \\\n  --install-method=copy \\\n  --installdir=/usr/local/bin\n# Cleanup for runtiume-base copy of /usr/local/lib\nRUN rm -rf /usr/local/lib/ghc-${GHC_VERSION} /usr/local/lib/pkgconfig\n\nFROM ubuntu:${UBUNTU_VERSION} as ubuntu-nodejs\nARG NODEJS_MAJOR_VERSION=14\nENV DEBIAN_FRONTEND=nonintercative\nRUN apt-get update && apt-get install --no-install-recommends curl -y && \\\n  curl --proto '=https' --tlsv1.2 -sSf -L https://deb.nodesource.com/setup_${NODEJS_MAJOR_VERSION}.x | bash - && \\\n  apt-get install --no-install-recommends nodejs -y && rm -rf /var/lib/apt/lists/*;\n\nFROM ubuntu-nodejs as nodejs-builder\nRUN curl --proto '=https' --tlsv1.2 -sSf -L https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &&\\\n  echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list &&\\\n  apt-get update && apt-get install --no-install-recommends gcc g++ make gnupg2 yarn -y && rm -rf /var/lib/apt/lists/*;\n\nFROM ubuntu-nodejs as runtime-base\nRUN curl --proto '=https' --tlsv1.2 -sSf -L https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - &&\\\n  echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" | tee  /etc/apt/sources.list.d/pgdg.list &&\\\n  apt-get update && apt-get install -y --no-install-recommends \\\n  ca-certificates \\\n  jq \\\n  postgresql-12 \\\n  postgresql-client-12 && \\\n  npm install pm2 -g && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\nCOPY --from=haskell-builder /usr/local/lib /usr/local/lib\nCOPY --from=haskell-builder /usr/local/bin/cardano-node /usr/local/bin/\nCOPY --from=haskell-builder /usr/local/bin/cardano-cli /usr/local/bin/\nCOPY --from=haskell-builder /usr/local/bin/cardano-db-sync /usr/local/bin/\nCOPY --from=haskell-builder /app/src/cardano-db-sync/schema /cardano-db-sync/schema\n# easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.12\nRUN set -eux; \\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\tcurl --proto '=https' --tlsv1.2 -sSf -L -o /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-${dpkgArch}\"; \\\n\tcurl --proto '=https' --tlsv1.2 -sSf -L -o /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-${dpkgArch}.asc\"; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n gpg --batch --keyserver keyserver.ubuntu.com --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -rf \"${GNUPGHOME}\" /usr/local/bin/gosu.asc; \\\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"${savedAptMark}\" ] || apt-mark manual ${savedAptMark} > /dev/null; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\tchmod +x /usr/local/bin/gosu; \\\n\tgosu --version; \\\n\tgosu nobody true\nRUN mkdir /ipc\nVOLUME /data\nEXPOSE 8080\nENTRYPOINT [\"./entrypoint.sh\"]\n\nFROM nodejs-builder as rosetta-server-base\nRUN mkdir -p /app/src\nWORKDIR /app\nCOPY cardano-rosetta-server/packages-cache /app/packages-cache\nCOPY cardano-rosetta-server/package.json \\\n  cardano-rosetta-server/yarn.lock \\\n  cardano-rosetta-server/.yarnrc \\\n  /app/\n\nFROM rosetta-server-base as rosetta-server-builder\nCOPY cardano-rosetta-server/tsconfig-dist.json \\\n  cardano-rosetta-server/tsconfig.json \\\n  /app/\nRUN yarn --offline --frozen-lockfile --non-interactive && yarn cache clean;\nCOPY cardano-rosetta-server/src /app/src\nRUN yarn build && yarn cache clean;\n\nFROM rosetta-server-base as rosetta-server-production-deps\nRUN yarn --offline --frozen-lockfile --non-interactive --production && yarn cache clean;\n\nFROM ubuntu-nodejs as cardano-rosetta-server\nARG NETWORK=mainnet\nCOPY --from=haskell-builder /usr/local/bin/cardano-cli \\\n  /usr/local/bin/cardano-node \\\n  /usr/local/bin/\nCOPY --from=rosetta-server-builder /app/dist /cardano-rosetta-server/dist\nCOPY --from=rosetta-server-production-deps /app/node_modules /cardano-rosetta-server/node_modules\nCOPY config/network/${NETWORK} /config/\nEXPOSE 8080\nCMD [\"node\", \"/cardano-rosetta-server/dist/src/server/index.js\"]\n\nFROM runtime-base\nARG NETWORK=mainnet\nARG SNAPSHOT_URL\nENV DEFAULT_RELATIVE_TTL=1000 LOGGER_MIN_SEVERITY=info PAGE_SIZE=25\nCOPY --from=rosetta-server-builder /app/dist /cardano-rosetta-server/dist\nCOPY --from=rosetta-server-production-deps /app/node_modules /cardano-rosetta-server/node_modules\nCOPY ecosystem.config.js .\nCOPY postgresql.conf /etc/postgresql/12/main/postgresql.conf\nCOPY scripts/start_cardano-db-sync.sh scripts/maybe_download_cardano-db-sync_snapshot.sh /scripts/\nCOPY config/network/${NETWORK} /config/\nENV PGPASSFILE=/config/cardano-db-sync/pgpass\nRUN echo \"/var/run/postgresql:5432:cexplorer:*:*\" > $PGPASSFILE &&\\\n chmod 600 $PGPASSFILE && chown postgres:postgres $PGPASSFILE\nRUN mkdir /snapshot &&\\\n  ./scripts/maybe_download_cardano-db-sync_snapshot.sh $SNAPSHOT_URL /snapshot\nCOPY scripts/entrypoint.sh .\n"
}