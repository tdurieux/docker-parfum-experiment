{
  "startTime": 1674255158964,
  "endTime": 1674255159518,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 49,
        "columnEnd": 81
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 87,
        "columnEnd": 123
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-slim\n\nARG ENVIRONMENT\n\nENV ENVIRONMENT ${ENVIRONMENT:-production}\nENV DJANGO_SETTINGS_MODULE seismic_site.settings.${ENVIRONMENT}\nENV DOCKERIZE_VERSION v0.6.1\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    build-essential \\\n                    postgresql-client \\\n                    libpq-dev \\\n                    gettext \\\n                    wget && rm -rf /var/lib/apt/lists/*;\n\n# install dockerize and update pip\nRUN wget https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz && \\\n    tar -C /usr/local/bin -xzvf dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz && \\\n    rm dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz && \\\n    chown root:root /usr/local/bin/dockerize && \\\n    pip install --no-cache-dir pip -U\n\n# install and cache app dependencies\nWORKDIR /opt/\n\nCOPY ./requirements*.txt ./\nRUN if [ \"${ENVIRONMENT}\" = \"production\" ]; then \\\n pip install --no-cache-dir -r requirements.txt; else pip install --no-cache-dir -r requirements-dev.txt; fi\n\nWORKDIR /code/\n\nCOPY ./docker-entrypoint /\nCOPY ./ /code/\n\nENTRYPOINT [\"/docker-entrypoint\"]\nEXPOSE 8030\n"
}