{
  "startTime": 1674255293231,
  "endTime": 1674255294210,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ========================\n# == CLIENT BUILD STAGE ==\n# ========================\nFROM node:16 as client-builder\nWORKDIR /app\n\n# Install dependencies\nCOPY client/package.json client/yarn.lock /app/\nRUN yarn install --frozen-lockfile --network-timeout 300000 && yarn cache clean;\n# Build\nCOPY .git/ /app/.git/\nCOPY client/ /app/\nRUN yarn build:web\n\n# ========================\n# == SERVER BUILD STAGE ==\n# ========================\n# Note: server-builder stage will be the same in both dockerfiles\nFROM python:3.8-buster as server-builder\n\nWORKDIR /opt/dive/src\n\n# https://cryptography.io/en/latest/installation/#debian-ubuntu\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential libssl-dev libffi-dev python3-dev cargo npm && rm -rf /var/lib/apt/lists/*;\n# Recommended poetry install https://python-poetry.org/docs/master/#installation\nRUN curl -f -sSL https://install.python-poetry.org | POETRY_VERSION=1.1.2 POETRY_HOME=/opt/dive/local python -\nENV PATH=\"/opt/dive/local/venv/bin:$PATH\"\n# Copy only the lock and project files to optimize cache\nCOPY server/pyproject.toml server/poetry.lock /opt/dive/src/\n# Use the system installation\nRUN poetry env use system\nRUN poetry config virtualenvs.create false\n# Install dependencies only\nRUN poetry install --no-root\n# Build girder client, including plugins like worker/jobs\nRUN girder build\n\n# Copy full source code and install\nCOPY server/ /opt/dive/src/\nRUN poetry install --no-dev\n\n# =================\n# == DIST SERVER ==\n# =================\nFROM python:3.8-slim-buster as server\n\n# Hack: Tell GitPython to be quiet, we aren't using git\nENV GIT_PYTHON_REFRESH=\"quiet\"\nENV PATH=\"/opt/dive/local/venv/bin:$PATH\"\n\n# Copy site packages and executables\nCOPY --from=server-builder /opt/dive/local/venv /opt/dive/local/venv\n# Copy the source code of the editable module\nCOPY --from=server-builder /opt/dive/src /opt/dive/src\n# Copy the client code into the static source location\nCOPY --from=client-builder /app/dist/ /opt/dive/local/venv/share/girder/static/viame/\n# Install startup scripts\nCOPY docker/entrypoint_server.sh docker/server_setup.py /\n\nENTRYPOINT [ \"/entrypoint_server.sh\" ]\n"
}