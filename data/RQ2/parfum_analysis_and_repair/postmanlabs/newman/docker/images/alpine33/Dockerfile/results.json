{
  "startTime": 1674248699137,
  "endTime": 1674248700291,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 24,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 196
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.3\nLABEL maintainer=\"Postman Labs <help@postman.com>\"\n\nARG NODE_VERSION=10\nARG NEWMAN_VERSION\n\n# Set environment variables\nENV LC_ALL=\"en_US.UTF-8\" LANG=\"en_US.UTF-8\" LANGUAGE=\"en_US.UTF-8\" ALPINE_NODE_REPO=\"oznu/alpine-node\"\n\n# Bail out early if NODE_VERSION is not provided\nRUN if [ ! $(echo $NEWMAN_VERSION | grep -oE \"^[0-9]+\\.[0-9]+\\.[0-9]+$\") ]; then \\\n        echo \"\\033[0;31mA valid semver Newman version is required in the NEWMAN_VERSION build-arg\\033[0m\"; \\\n        exit 1; \\\n    fi && \\\n    # Add the latest Alpine Linux package to the repositories list\n    echo -e \"https://nl.alpinelinux.org/alpine/v3.3/main/\\nhttps://nl.alpinelinux.org/alpine/v3.3/community/\" > /etc/apk/repositories && \\\n    # Update existing packages and install Node dependencies\n    apk add --update --no-cache libgcc libstdc++ jq curl && \\\n    # Determine the complete Semver Node version for the provided Node major version in $NODE_VERSION\n    FULL_NODE_VERSION=$( curl -f --silent \"https://api.github.com/repos/${ALPINE_NODE_REPO}/releases\" | jq -r '.[].tag_name' | grep -oE \"^${NODE_VERSION}\\.\\d+\\.\\d+$\" | sort -r -t. -k 1,1nr -k 2,2nr -k 3,3nr | head -n1) && \\\n    # Download the appropriate Node binary for Alpine Linux\n    curl -f --silent -L \"https://github.com/${ALPINE_NODE_REPO}/releases/download/${FULL_NODE_VERSION}/node-v${FULL_NODE_VERSION}-linux-x86_64-alpine.tar.gz\" > /etc/alpine-node-${NODE_VERSION}.tar.gz && \\\n    # Extract and install Node from the binary downloaded in the previous step\n    tar -xzf /etc/alpine-node-${NODE_VERSION}.tar.gz -C /usr --no-same-owner && \\\n    # Install Newman globally\n    npm install --global newman@${NEWMAN_VERSION} && \\\n    # Prune redundant packages\n    apk del jq curl && \\\n    # Clear Alpine Node binary\n    rm /etc/alpine-node-${NODE_VERSION}.tar.gz; npm cache clean --force;\n\n# Set workdir to /etc/newman\n# When running the image, mount the directory containing your collection to this location\n#\n# docker run -v <path to collections directory>:/etc/newman ...\n#\n# In case you mount your collections directory to a different location, you will need to give absolute paths to any\n# collection, environment files you want to pass to newman, and if you want newman reports to be saved to your disk.\n# Or you can change the workdir by using the -w or --workdir flag\nWORKDIR /etc/newman\n\n# Set newman as the default container command\n# Now you can run the container via\n#\n# docker run -v /home/collections:/etc/newman -t postman/newman_alpine33 run YourCollection.json.postman_collection \\\n#                                                                        -e YourEnvironment.postman_environment \\\n#                                                                        -H newman_report.html\nENTRYPOINT [\"newman\"]\n"
}