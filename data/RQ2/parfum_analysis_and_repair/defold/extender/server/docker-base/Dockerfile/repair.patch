diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/defold/extender/server/docker-base/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/defold/extender/server/docker-base/Dockerfile/repaired.Dockerfile
index b5a071b..15ed1e8 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/defold/extender/server/docker-base/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/defold/extender/server/docker-base/Dockerfile/repaired.Dockerfile
@@ -3,7 +3,7 @@ FROM ubuntu:20.04
 RUN \
   echo "LINUX TOOLS + COMPILER" && \
   apt-get update && \
-  apt-get install -y software-properties-common && \
+  apt-get install --no-install-recommends -y software-properties-common && \
   add-apt-repository ppa:openjdk-r/ppa && \
   apt-get update && \
   apt-get install -y --no-install-recommends \
@@ -29,7 +29,7 @@ RUN \
     nano \
     && \
 # cleanup
-  apt-get clean autoclean autoremove
+  apt-get clean autoclean autoremove && rm -rf /var/lib/apt/lists/*;
 
 ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64
 
@@ -68,7 +68,7 @@ RUN \
   apt-get update && \
   apt-get install -y --no-install-recommends python2.7 python-setuptools && \
   ln -s /usr/bin/python2.7 /usr/local/bin/python && \
-  ln -s /usr/bin/python2.7 /usr/local/bin/python2
+  ln -s /usr/bin/python2.7 /usr/local/bin/python2 && rm -rf /var/lib/apt/lists/*;
 
 #
 # EMSCRIPTEN
@@ -87,7 +87,7 @@ RUN \
   apt-get install -y --no-install-recommends python3.9 && \
   update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1 && \
   update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 2 && \
-  python3 --version
+  python3 --version && rm -rf /var/lib/apt/lists/*;
 
 ENV EMSCRIPTEN_SDK_2_0_11 ${PLATFORMSDK_DIR}/emsdk-2.0.11
 ENV EMSCRIPTEN_HOME_2_0_11 ${EMSCRIPTEN_SDK_2_0_11}
@@ -154,9 +154,9 @@ ENV \
 RUN \
   echo "Win32 SDK - WINDRES" && \
   apt-get update && \
-  apt-get install -y binutils-mingw-w64-x86-64 && \
+  apt-get install --no-install-recommends -y binutils-mingw-w64-x86-64 && \
   ls -la /usr/bin/x86_64-w64-mingw32-windres && \
-  ln -s /usr/bin/x86_64-w64-mingw32-windres /usr/local/bin/windres
+  ln -s /usr/bin/x86_64-w64-mingw32-windres /usr/local/bin/windres && rm -rf /var/lib/apt/lists/*;
 
 RUN \
   echo "WIN32 2019 SDK" && \
@@ -249,7 +249,7 @@ ENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_
 RUN \
   apt-get update && \
   apt-get install -y --no-install-recommends proguard && \
-  ls -la /usr/share/java/proguard.jar
+  ls -la /usr/share/java/proguard.jar && rm -rf /var/lib/apt/lists/*;
 
 ENV ANDROID_PROGUARD=/usr/share/java/proguard.jar
 
@@ -337,7 +337,7 @@ RUN \
   echo "Mono" && \
   apt-get update && \
   apt-get install -y --no-install-recommends mono-complete && \
-  apt-get clean autoclean autoremove
+  apt-get clean autoclean autoremove && rm -rf /var/lib/apt/lists/*;
 
 # Installation notes: https://wiki.winehq.org/Ubuntu
 # TODO: Backup the files as descibed here: https://wiki.winehq.org/Ubuntu
@@ -345,7 +345,7 @@ RUN \
  echo "Wine deps" && \
  apt-get update && \
  apt-get install -y --no-install-recommends apt-transport-https ca-certificates ca-certificates-java xvfb cabextract && \
- apt-get clean autoclean autoremove
+ apt-get clean autoclean autoremove && rm -rf /var/lib/apt/lists/*;
 
 RUN \
   echo "Wine" && \
@@ -354,9 +354,9 @@ RUN \
   apt-add-repository "deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main" && \
   dpkg --add-architecture i386 && \
   apt-get update && \
-  DEBIAN_FRONTEND="noninteractive" apt-get install -y --install-recommends winehq-stable winetricks && \
+  DEBIAN_FRONTEND="noninteractive" apt-get --no-install-recommends install -y --install-recommends winehq-stable winetricks && \
   apt-get clean autoclean autoremove && \
-  rm winehq.key
+  rm winehq.key && rm -rf /var/lib/apt/lists/*;
 
 ENV PATH ${PATH}:/opt/wine-stable/bin
 
@@ -446,7 +446,7 @@ ENV SWIFT_5_5_VERSION       5.5
 # The updated install flow
 RUN \
   apt-get update && \
-  apt-get install -y git cmake build-essential && \
+  apt-get install --no-install-recommends -y git cmake build-essential && \
   cd /tmp && \
   TAPITMP=/usr/local/tapi1.6 && \
   mkdir $TAPITMP && \
@@ -459,17 +459,17 @@ RUN \
   git clone https://github.com/tpoechtrager/cctools-port.git && \
   cd cctools-port/cctools && \
   git checkout 6c438753d2252274678d3e0839270045698c159b && \
-  ./configure --prefix=/usr/local --target=arm-apple-darwin19 --with-libtapi=$TAPITMP && \
+  ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local --target=arm-apple-darwin19 --with-libtapi=$TAPITMP && \
   make -j8 && \
   make install && \
   make distclean && \
-  ./configure --prefix=/usr/local --target=x86_64-apple-darwin19 --with-libtapi=$TAPITMP && \
+  ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr/local --target=x86_64-apple-darwin19 --with-libtapi=$TAPITMP && \
   make -j8 && \
   make install && \
   make distclean && \
   cd ../.. && \
   rm -rf apple-libtapi && \
-  rm -rf cctools-port
+  rm -rf cctools-port && rm -rf /var/lib/apt/lists/*;
 
 RUN \
   echo "iOS 14 + macOS 10/11 + XCode 12" && \
@@ -523,7 +523,7 @@ RUN \
   apt-get install -y --no-install-recommends \
 # utilities for keeping Debian and OpenJDK CA certificates in sync
     ca-certificates p11-kit \
-  ; \
+  ; rm -rf /var/lib/apt/lists/*; \
 # update "cacerts" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
@@ -537,10 +537,14 @@ RUN \
     echo 'cacertsFile=; for f in "$JAVA_HOME/lib/security/cacerts" "$JAVA_HOME/jre/lib/security/cacerts"; do if [ -e "$f" ]; then cacertsFile="$f"; break; fi; done'; \
     echo 'if [ -z "$cacertsFile" ] || ! [ -f "$cacertsFile" ]; then echo >&2 "error: failed to find cacerts file in $JAVA_HOME"; exit 1; fi'; \
     echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth "$cacertsFile"'; \
-  } > /etc/ca-certificates/update.d/docker-openjdk; \
+  } > /etc/ca-certificates/update.d/docker-openjdk;# 8-jdk uses "$JAVA_HOME/jre/lib/security/cacerts" and 8-jre and 11+ uses "$JAVA_HOME/lib/security/cacerts" directly (no "jre" directory)
+
+
+
+
   chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
   /etc/ca-certificates/update.d/docker-openjdk; \
-  \
+
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
   find "$JAVA_HOME/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
   ldconfig;