{
  "startTime": 1674253537001,
  "endTime": 1674253539599,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 461,
        "lineEnd": 461,
        "columnStart": 2,
        "columnEnd": 85
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 465,
        "lineEnd": 465,
        "columnStart": 2,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 2,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 2,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 356,
        "lineEnd": 356,
        "columnStart": 2,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 448,
        "lineEnd": 448,
        "columnStart": 2,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 2,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 28,
        "columnStart": 2,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 2,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 2,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 2,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 250,
        "lineEnd": 250,
        "columnStart": 2,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 338,
        "lineEnd": 338,
        "columnStart": 2,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 346,
        "lineEnd": 346,
        "columnStart": 1,
        "columnEnd": 116
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 356,
        "lineEnd": 356,
        "columnStart": 2,
        "columnEnd": 99
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 448,
        "lineEnd": 448,
        "columnStart": 2,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 522,
        "lineEnd": 525,
        "columnStart": 2,
        "columnEnd": 3
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\nRUN \\\n  echo \"LINUX TOOLS + COMPILER\" && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y software-properties-common && \\\n  add-apt-repository ppa:openjdk-r/ppa && \\\n  apt-get update && \\\n  apt-get install -y --no-install-recommends \\\n    wget \\\n    locales \\\n    openjdk-11-jdk \\\n    libssl-dev \\\n    openssl \\\n    libtool \\\n    autoconf \\\n    automake \\\n    uuid-dev \\\n    libxi-dev \\\n    libopenal-dev \\\n    libgl1-mesa-dev \\\n    libglw1-mesa-dev \\\n    freeglut3-dev \\\n    unzip \\\n    # for use when debugging\n    tree \\\n    silversearcher-ag \\\n    less \\\n    nano \\\n    && \\\n# cleanup\n  apt-get clean autoclean autoremove && rm -rf /var/lib/apt/lists/*;\n\nENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64\n\n# Add extender user\nRUN  useradd -r -u 2222 extender && \\\n  mkdir -p /var/extender && \\\n  chown extender: /var/extender && \\\n  chown extender: $(readlink -f /usr/bin/java) && \\\n  chmod +s $(readlink -f /usr/bin/java)\n\nARG DM_PACKAGES_URL\n\n# Put all SDK's into a single folder (just as we do in the regular engine build)\nENV PLATFORMSDK_DIR /opt/platformsdk\nRUN mkdir $PLATFORMSDK_DIR\n\n# These packages are downloaded from here: https://github.com/llvm/llvm-project/releases/\n# and then uploaded as-is to S3\nRUN wget -q -O - ${DM_PACKAGES_URL}/clang%2Bllvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz | tar xJ -C /usr/local --strip-components=1\n\n# Darwin\nRUN locale-gen en_US.UTF-8\nENV LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US:en \\\n    LC_ALL=en_US.UTF-8\n\n#\n# Python\n#\n\n# NOTE: setuptools for protobuf builder\n\nRUN \\\n  echo \"PYTHON\" && \\\n  apt-get autoclean && \\\n  apt-get update && \\\n  apt-get install -y --no-install-recommends python2.7 python-setuptools && \\\n  ln -s /usr/bin/python2.7 /usr/local/bin/python && \\\n  ln -s /usr/bin/python2.7 /usr/local/bin/python2 && rm -rf /var/lib/apt/lists/*;\n\n#\n# EMSCRIPTEN\n#\n\nENV EMCC_SKIP_SANITY_CHECK 1\n\n## Emscripten 2.0.11 (from version 1.2.178)\n\n# Ubuntu still seem to use python3 3.8 as default version\nRUN \\\n  add-apt-repository ppa:deadsnakes/ppa && \\\n  apt-get autoclean && \\\n  apt-get update && \\\n  apt-get clean autoclean autoremove && \\\n  apt-get install -y --no-install-recommends python3.9 && \\\n  update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1 && \\\n  update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 2 && \\\n  python3 --version && rm -rf /var/lib/apt/lists/*;\n\nENV EMSCRIPTEN_SDK_2_0_11 ${PLATFORMSDK_DIR}/emsdk-2.0.11\nENV EMSCRIPTEN_HOME_2_0_11 ${EMSCRIPTEN_SDK_2_0_11}\nENV EMSCRIPTEN_CONFIG_2_0_11 ${EMSCRIPTEN_HOME_2_0_11}/.emscripten\nENV EMSCRIPTEN_BIN_2_0_11 ${EMSCRIPTEN_HOME_2_0_11}/upstream/emscripten\nENV EMSCRIPTEN_CACHE_2_0_11 /var/extender/emcache_2_0_11\nENV EMSCRIPTEN_PYTHON_2_0_11 /usr/bin/python3.9\n# Setup a special env variable that will be prefixed to PATH if requested version is 2.0.11\nENV EMSCRIPTEN_PATH_2_0_11 ${EMSCRIPTEN_HOME_2_0_11}:${EMSCRIPTEN_HOME_2_0_11}/upstream/bin:${EMSCRIPTEN_HOME_2_0_11}/node/12.9.1_64bit/bin:${EMSCRIPTEN_BIN_2_0_11}\n\nRUN \\\n  mkdir ${EMSCRIPTEN_SDK_2_0_11} && \\\n  wget -q -O - ${DM_PACKAGES_URL}/emsdk-2.0.11-linux.tar.gz | tar xz -C ${EMSCRIPTEN_SDK_2_0_11} --strip-components=1\n\nRUN \\\n  ${EMSCRIPTEN_HOME_2_0_11}/emsdk activate sdk-2.0.11-64bit --embedded && \\\n  EM_CONFIG=$EMSCRIPTEN_CONFIG_2_0_11 EM_CACHE=${EMSCRIPTEN_CACHE_2_0_11} python3 ${EMSCRIPTEN_BIN_2_0_11}/embuilder.py build SYSTEM MINIMAL && \\\n  chmod -R 755 ${EMSCRIPTEN_HOME_2_0_11} && \\\n  chown -R extender: ${EMSCRIPTEN_CACHE_2_0_11} && \\\n  chown -R extender: ${EMSCRIPTEN_CACHE_2_0_11}/wasm/cache.lock\n\n\n# We use the same temp directory for both versions.\nENV EMSCRIPTEN_TEMP_DIR /var/extender/ems_temp\nRUN mkdir -p ${EMSCRIPTEN_TEMP_DIR}\nRUN chmod -R 755 ${EMSCRIPTEN_TEMP_DIR} && chown extender: ${EMSCRIPTEN_TEMP_DIR}\n# The \"sed\" command below removes the /TEMP_DIR line from the generated configs\n# We replace it with a folder of our own\nRUN sed '/TEMP_DIR =/d' ${EMSCRIPTEN_CONFIG_2_0_11} && \\\n  echo TEMP_DIR = \\'${EMSCRIPTEN_TEMP_DIR}\\' >> ${EMSCRIPTEN_CONFIG_2_0_11}\n  #  && \\\n  # sed '/TEMP_DIR =/d' ${EMSCRIPTEN_CONFIG_1_39_16} && \\\n  # echo TEMP_DIR = \\'${EMSCRIPTEN_TEMP_DIR}\\' >> ${EMSCRIPTEN_CONFIG_1_39_16}\n\nRUN \\\n  update-alternatives --set python3 /usr/bin/python3.8\n\n\n#\n# Windows\n#\n\nENV \\\n  PLATFORMSDK_WIN32=$PLATFORMSDK_DIR/Win32 \\\n  WINDOWS_SDK_10_VERSION=10.0.18362.0 \\\n  WINDOWS_MSVC_2019_VERSION=14.25.28610\n\n# Grabbed after a starting MSVC 2019, and choosing \"Tools -> Command Line -> Developer Command Prompt\"\n# Note: VCINSTALLDIR is special since clang will use it as the last \"-internal-isystem\" option\nENV \\\n  VCINSTALLDIR=\"${PLATFORMSDK_WIN32}/MicrosoftVisualStudio2019/VC/\" \\\n  VSINSTALLDIR=\"${PLATFORMSDK_WIN32}/MicrosoftVisualStudio2019/\" \\\n  WINDOWS_MSVC_2019_DIR=\"${PLATFORMSDK_WIN32}/MicrosoftVisualStudio2019/VC/Tools/MSVC/${WINDOWS_MSVC_2019_VERSION}/\" \\\n  WINDOWS_SDK_10_DIR=\"${PLATFORMSDK_WIN32}/WindowsKits/10/\" \\\n  VS160COMNTOOLS=\"${PLATFORMSDK_WIN32}/MicrosoftVisualStudio2019/Common7/Tools/\" \\\n  WINDOWS_VCINSTALLDIR=\"${PLATFORMSDK_WIN32}/MicrosoftVisualStudio2019/VC/Tools/MSVC/${WINDOWS_MSVC_2019_VERSION}/\" \\\n  WINDOWS_VSINSTALLDIR=\"${PLATFORMSDK_WIN32}/MicrosoftVisualStudio2019/\" \\\n  WindowsLibPath=\"${PLATFORMSDK_WIN32}/WindowsKits/10/References/${WINDOWS_SDK_10_VERSION}\" \\\n  WindowsSdkDir=\"${PLATFORMSDK_WIN32}/WindowsKits/10/\" \\\n  WindowsSDKLibVersion=\"${WINDOWS_SDK_10_VERSION}\" \\\n  WindowsSDKVersion=\"${WINDOWS_SDK_10_VERSION}\"\n\n# windres: Allows for generating .res files that can be used during linking\nRUN \\\n  echo \"Win32 SDK - WINDRES\" && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y binutils-mingw-w64-x86-64 && \\\n  ls -la /usr/bin/x86_64-w64-mingw32-windres && \\\n  ln -s /usr/bin/x86_64-w64-mingw32-windres /usr/local/bin/windres && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\n  echo \"WIN32 2019 SDK\" && \\\n  mkdir -p ${PLATFORMSDK_WIN32}/MicrosoftVisualStudio2019 && \\\n  wget -q -O - ${DM_PACKAGES_URL}/Microsoft-Visual-Studio-2019-${WINDOWS_MSVC_2019_VERSION}.tar.gz | tar xz -C ${PLATFORMSDK_WIN32}/MicrosoftVisualStudio2019\n\nRUN \\\n  echo \"WIN32 10 SDK\" && \\\n  mkdir -p ${PLATFORMSDK_WIN32}/WindowsKits && \\\n  wget -q -O - ${DM_PACKAGES_URL}/WindowsKits-${WINDOWS_SDK_10_VERSION}.tar.gz | tar xz -C ${PLATFORMSDK_WIN32}/WindowsKits\n\nRUN \\\n  ln -s /usr/local/bin/clang /usr/local/bin/x86_64-pc-win32-clang && \\\n  ln -s /usr/local/bin/llvm-ar /usr/local/bin/x86_64-pc-win32-clang-ar\n\n# Due to Windows' case insensitive file system, the sources reference lib files with wrong cases\n# so we solve the bulk by making the suffixes lowercase\nRUN find $PLATFORMSDK_WIN32 -iname '*.Lib' -exec sh -c 'a=$(echo \"$0\" | sed -r \"s/([^.]*)\\$/\\L\\1/\"); [ \"$a\" != \"$0\" ] && mv \"$0\" \"$a\" ' {} \\;\n# Make a copy of all the headers too, in lower case (e.g. Windows.h -> windows.h etc)\nRUN find $PLATFORMSDK_WIN32 -iname '*.h' -exec sh -c 'd=$(dirname \"$0\"); a=$(basename \"$0\" | tr [:upper:] [:lower:]); [ \"$a\" != $(basename \"$0\") ] && cp \"$0\" \"$d/$a\" ' {} \\;\n\nRUN \\\n  echo \"WIN32 SDK - Cleanup\" && \\\n# and the rest are manually copied (or made lower case)\n  (cd ${WINDOWS_MSVC_2019_DIR}/lib/x64 && cp oldnames.lib OLDNAMES.lib) && \\\n  (cd ${WINDOWS_MSVC_2019_DIR}/lib/x86 && cp oldnames.lib OLDNAMES.lib) && \\\n  (cd ${WINDOWS_MSVC_2019_DIR}/lib/x64 && cp delayimp.lib Delayimp.lib) && \\\n  (cd ${WINDOWS_MSVC_2019_DIR}/lib/x86 && cp delayimp.lib Delayimp.lib)\n\n# Some headers are named by the wrong name in the windows sdk's...\n# We need to make certain names lowercase because some users\n# have put \"pragma lib\" comments in some libraries :(\nRUN \\\n  echo \"WIN32 WindowsKits 10 - Cleanup\" && \\\n  (cd ${WINDOWS_SDK_10_DIR}/Include/${WINDOWS_SDK_10_VERSION}/shared && cp driverspecs.h DriverSpecs.h) && \\\n  (cd ${WINDOWS_SDK_10_DIR}/Include/${WINDOWS_SDK_10_VERSION}/shared && cp specstrings.h SpecStrings.h) && \\\n  (cd ${WINDOWS_SDK_10_DIR}/Include/${WINDOWS_SDK_10_VERSION}/shared && cp concurrencysal.h ConcurrencySal.h) && \\\n  (cd ${WINDOWS_SDK_10_DIR}/Lib/${WINDOWS_SDK_10_VERSION} && find . -type f -exec sh -c 'x=\"{}\"; xl=$(echo $x | sed -e \"s/\\(.*\\)/\\L\\1/\"); if [ $x != $xl ]; then cp $x $xl; fi' \\;)\n\n# Also, the OpenGL headers in the windows SDK is in a folder with lower case letters, which doesn't match the includes\nRUN \\\n  echo \"WIN32 WindowsKits 10 - OpenGL Cleanup\" && \\\n  cd ${WINDOWS_SDK_10_DIR}/Include/${WINDOWS_SDK_10_VERSION}/um && \\\n  mkdir ./GL && \\\n  cp -v ./gl/*.* ./GL/\n\n#\n# Android SDK/NDK\n# https://developer.android.com/studio/command-line/variables\n#\nENV ANDROID_ROOT ${PLATFORMSDK_DIR}/android\nENV ANDROID_BUILD_TOOLS_VERSION 32.0.0\n# ANDROID_HOME has been replaced with ANDROID_SDK_ROOT\nENV ANDROID_HOME ${ANDROID_ROOT}/android-sdk-linux\nENV ANDROID_SDK_ROOT ${ANDROID_HOME}\n# ANDROID_SDK_HOME is the location of the .android folder\nENV ANDROID_SDK_HOME ${ANDROID_ROOT}/.android\nENV ANDROID_TARGET_API_LEVEL 31\nENV ANDROID_MIN_API_LEVEL 16\nENV ANDROID_GCC_VERSION 4.8\nENV ANDROID_SDK_VERSION 31\nENV ANDROID_SDK_FILENAME android-sdk-linux-android-${ANDROID_SDK_VERSION}-${ANDROID_BUILD_TOOLS_VERSION}.tar.gz\nENV ANDROID_STL_INCLUDE ${ANDROID_ROOT}/android-ndk-r${ANDROID_NDK_VERSION}/sources/cxx-stl/gnu-libstdc++/${ANDROID_GCC_VERSION}/include\nENV ANDROID_STL_ARCH_INCLUDE ${ANDROID_ROOT}/android-ndk-r${ANDROID_NDK_VERSION}/sources/cxx-stl/gnu-libstdc++/${ANDROID_GCC_VERSION}/libs/armeabi-v7a/include\nENV ANDROID_STL_LIB ${ANDROID_ROOT}/android-ndk-r${ANDROID_NDK_VERSION}/sources/cxx-stl/gnu-libstdc++/${ANDROID_GCC_VERSION}/libs/armeabi-v7a\nENV ANDROID_SYSROOT ${ANDROID_ROOT}/android-ndk-r${ANDROID_NDK_VERSION}/platforms/android-${ANDROID_NDK_API_VERSION}/arch-arm\nENV ANDROID_BIN_PATH ${ANDROID_ROOT}/android-ndk-r${ANDROID_NDK_VERSION}/toolchains/arm-linux-androideabi-${ANDROID_GCC_VERSION}/prebuilt/linux-x86_64/bin\nENV ANDROID_SDK_BUILD_TOOLS_PATH ${ANDROID_HOME}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}\nENV ANDROID_LIBRARYJAR ${ANDROID_HOME}/platforms/android-${ANDROID_SDK_VERSION}/android.jar\n\n# We must keep two NDKs alive for now, since migrating to the latest (i.e 20) will break\n# for users that try to build with an older build.yml.\nENV ANDROID_NDK20_VERSION        20\nENV ANDROID_NDK20_API_VERSION    16\nENV ANDROID_64_NDK20_API_VERSION 21\n\n# These paths are the same for both the 32 and 64 bit toolchains\nENV ANDROID_NDK20_PATH       ${ANDROID_ROOT}/android-ndk-r${ANDROID_NDK20_VERSION}\nENV ANDROID_NDK20_BIN_PATH   ${ANDROID_NDK20_PATH}/toolchains/llvm/prebuilt/linux-x86_64/bin\nENV ANDROID_NDK20_SYSROOT    ${ANDROID_NDK20_PATH}/toolchains/llvm/prebuilt/linux-x86_64/sysroot\nENV ANDROID_NDK20_STL_LIB    ${ANDROID_NDK20_PATH}/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a\nENV ANDROID_64_NDK20_STL_LIB ${ANDROID_NDK20_PATH}/sources/cxx-stl/llvm-libc++/libs/arm64-v8a\nENV ANDROID_NDK20_FILENAME   android-ndk-r${ANDROID_NDK20_VERSION}-linux-x86_64.tar.gz\n\nENV AAPT ${ANDROID_SDK_BUILD_TOOLS_PATH}/aapt\n\nENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_SDK_BUILD_TOOLS_PATH}:${ANDROID_NDK20_BIN_PATH}\n\n# android proguard was version 4.7, this is at least 5.2.1 which seems to work with OpenJDK 11\nRUN \\\n  apt-get update && \\\n  apt-get install -y --no-install-recommends proguard && \\\n  ls -la /usr/share/java/proguard.jar && rm -rf /var/lib/apt/lists/*;\n\nENV ANDROID_PROGUARD=/usr/share/java/proguard.jar\n\nRUN \\\n    echo \"Android SDK\" && \\\n    mkdir -p ${ANDROID_HOME} && \\\n    wget -q -O - ${DM_PACKAGES_URL}/${ANDROID_NDK20_FILENAME} | tar xz -C ${ANDROID_ROOT} && \\\n    wget -q -O - ${DM_PACKAGES_URL}/${ANDROID_SDK_FILENAME} | tar xz -C ${ANDROID_HOME} --strip-components=1 && \\\n#cleanup\n    rm -rf ${ANDROID_NDK20_PATH}/simpleperf && \\\n    rm -rf ${ANDROID_NDK20_PATH}/shader-tools && \\\n    rm -rf ${ANDROID_NDK20_PATH}/sources/third_party && \\\n    rm -rf ${ANDROID_NDK20_PATH}/sources/cxx-stl && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/renderscript && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/arm-linux-androideabi-4.9 && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/aarch64-linux-android-4.9 && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/x86-4.9 && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/x86_64-4.9 && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/llvm/prebuilt/linux-x86_64/i686-linux-android && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/llvm/prebuilt/linux-x86_64/x86_64-linux-android && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-* && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-* && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/x86_64-linux-android && \\\n    rm -rf ${ANDROID_NDK20_PATH}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/i686-linux-android && \\\n# create the .android folder and give read+write permissions (the Android Gradle plugin will write to the folder)\n# It is not enough to give 'user' and 'group'. We unfortunately also need 'others'\n    mkdir ${ANDROID_SDK_HOME} && \\\n    chmod ugo+rw -R ${ANDROID_SDK_HOME} && \\\n# fix permissions\n    chmod +r -R ${ANDROID_ROOT} && \\\n    chmod +w -R ${ANDROID_SDK_ROOT} && \\\n    chmod -R 755 ${ANDROID_ROOT}/android-ndk-r${ANDROID_NDK20_VERSION} && \\\n# check that dx installed properly\n    ls -la ${ANDROID_SDK_BUILD_TOOLS_PATH}/d8 && \\\n    which armv7a-linux-androideabi${ANDROID_NDK20_API_VERSION}-clang++ && \\\n    which aarch64-linux-android${ANDROID_64_NDK20_API_VERSION}-clang++ && \\\n# check that aapt installed correctly\n    aapt v\n\n#\n# Switch SDK\n#\n\nENV NINTENDO_SDK_ROOT_13_3_0 ${PLATFORMSDK_DIR}/nx-13.3.0\n# Backwards compatibility, since they're still using that env variable\nENV NINTENDO_SDK_ROOT         ${NINTENDO_SDK_ROOT_13_3_0}\n\nENV SWITCH_SDK_13_FILENAME nx64-sdk-13.3.0.tar.gz\n\nRUN \\\n  echo \"Switch SDK 13.3.0\" && \\\n  mkdir -p ${NINTENDO_SDK_ROOT} && \\\n  wget -q -O - ${DM_PACKAGES_URL}/${SWITCH_SDK_13_FILENAME} | tar xz -C ${NINTENDO_SDK_ROOT}\n\n# Added in version 1.3.3\nENV NINTENDO_SDK_ROOT_14_3_0 ${PLATFORMSDK_DIR}/nx-14.3.0\n\nENV SWITCH_SDK_14_FILENAME nx64-sdk-14.3.0.tar.gz\n\nRUN \\\n  echo \"Switch SDK 14.3.0\" && \\\n  mkdir -p ${NINTENDO_SDK_ROOT_14_3_0} && \\\n  wget -q -O - ${DM_PACKAGES_URL}/${SWITCH_SDK_13_FILENAME} | tar xz -C ${NINTENDO_SDK_ROOT_14_3_0}\n\n\n#\n# PS4 SDK\n#\n\nENV PS4_SDK_9_000 ${PLATFORMSDK_DIR}/ps4-sdk-9.000\n\nENV PS4_SDK_9_FILENAME ps4-sdk-9.000.tar.gz\n\nRUN \\\n  echo \"PS4 SDK 9.000\" && \\\n  mkdir -p ${PS4_SDK_9_000} && \\\n  wget -q -O - ${DM_PACKAGES_URL}/${PS4_SDK_9_FILENAME} | tar xz -C ${PS4_SDK_9_000} --strip-components=1\n\n\n#\n# Wine\n#\n\nRUN \\\n  echo \"Mono\" && \\\n  apt-get update && \\\n  apt-get install -y --no-install-recommends mono-complete && \\\n  apt-get clean autoclean autoremove && rm -rf /var/lib/apt/lists/*;\n\n# Installation notes: https://wiki.winehq.org/Ubuntu\n# TODO: Backup the files as descibed here: https://wiki.winehq.org/Ubuntu\nRUN \\\n echo \"Wine deps\" && \\\n apt-get update && \\\n apt-get install -y --no-install-recommends apt-transport-https ca-certificates ca-certificates-java xvfb cabextract && \\\n apt-get clean autoclean autoremove && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\n  echo \"Wine\" && \\\n  wget -nc https://dl.winehq.org/wine-builds/winehq.key && \\\n  APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 apt-key add winehq.key && \\\n  apt-add-repository \"deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main\" && \\\n  dpkg --add-architecture i386 && \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=\"noninteractive\" apt-get --no-install-recommends install -y --install-recommends winehq-stable winetricks && \\\n  apt-get clean autoclean autoremove && \\\n  rm winehq.key && rm -rf /var/lib/apt/lists/*;\n\nENV PATH ${PATH}:/opt/wine-stable/bin\n\nRUN \\\n  wget -q https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks && \\\n  chmod +rx winetricks && \\\n  mv winetricks /usr/local/bin/winetricks\n\n# Disable all debug messages\nENV WINEDEBUG \"-all\"\n\nENV WINEPREFIX \"/var/extender/.wine\"\n\nRUN \\\n  echo \"Wine Init\" && \\\n  mkdir -p ${WINEPREFIX}\n\nENV DISPLAY=\":1\"\nRUN \\\n  set -xe                     && \\\n  WINEDLLOVERRIDES=\"mscoree,mshtml=\" xvfb-run wine wineboot && \\\n  xvfb-run wineserver -w\n  # xvfb-run wineserver -w      && \\\n  # xvfb-run winetricks -q vcrun2015\n\nRUN \\\n  chown -R extender: $WINEPREFIX\n\n# Technically part of the Android build, but also required by the GradleService.java\n# until it can be disabled (e.g. by looking for the existance of GRADLE_USER_HOME)\n\n# Versions: https://developer.android.com/studio/releases/gradle-plugin?buildsystem=ndk-build#updating-gradle\n# Java+Gradle version matrix: https://docs.gradle.org/current/userguide/compatibility.html\nENV GRADLE_USER_HOME /tmp/.gradle\nENV GRADLE_VERSION 6.1.1\nENV GRADLE_PLUGIN_VERSION 4.0.1\nENV PATH ${PATH}:/opt/gradle/gradle-${GRADLE_VERSION}/bin\nRUN \\\n  echo \"Gradle\" && \\\n  wget -q https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip && \\\n  mkdir /opt/gradle && \\\n  unzip -q -d /opt/gradle gradle-${GRADLE_VERSION}-bin.zip && \\\n  rm gradle-${GRADLE_VERSION}-bin.zip && \\\n  which gradle && \\\n  chown -R extender: /opt/gradle\n\nENV EXTENSION_BUILD_GRADLE_TEMPLATE /var/extender/template.build.gradle\nENV EXTENSION_GRADLE_PROPERTIES_TEMPLATE /var/extender/template.gradle.properties\nENV EXTENSION_LOCAL_PROPERTIES_TEMPLATE /var/extender/template.local.properties\nCOPY template.build.gradle ${EXTENSION_BUILD_GRADLE_TEMPLATE}\nCOPY template.gradle.properties ${EXTENSION_GRADLE_PROPERTIES_TEMPLATE}\nCOPY template.local.properties ${EXTENSION_LOCAL_PROPERTIES_TEMPLATE}\n\n#\n# iOS + OSX\n#\n\n# For package instructions, see <defold>/scripts/mobile/package_xcode_and_sdks.sh\n# and <defold>/scripts/mobile/package_cctools.sh\n\n# TODO: (remove this comment) This comment was added to force a rebuild of the container\nENV FORCE_IOS_REBUILD 1\n\nENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}\n\n# NOTE: These values are replicated in server/scripts/standalone/service-standalone.sh\n# Install flow from  >=1.2.174\nENV XCODE_12_VERSION      12.5\nENV MACOS_10_15_VERSION   10.15\nENV IOS_14_VERSION        14.5\nENV LIB_TAPI_1_6_PATH     /usr/local/tapi1.6/lib\n# Install flow from >=1.2.185\nENV MACOS_11_VERSION        11.3\nENV XCODE_12_CLANG_VERSION  12.0.5\nENV SWIFT_5_VERSION         5.0\n\n# Versions from >=1.2.191\nENV XCODE_13_VERSION        13.2.1\nENV MACOS_12_VERSION        12.1\nENV IOS_15_VERSION          15.2\nENV XCODE_13_CLANG_VERSION  13.0.0\nENV SWIFT_5_5_VERSION       5.5\n\n# IMPORTANT!: For the standalone darwin server to work, it also\n# needs some of these environment variables. See service-standalone.sh\n\n# The updated install flow\nRUN \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y git cmake build-essential && \\\n  cd /tmp && \\\n  TAPITMP=/usr/local/tapi1.6 && \\\n  mkdir $TAPITMP && \\\n  git clone https://github.com/tpoechtrager/apple-libtapi.git && \\\n  cd apple-libtapi && \\\n  git checkout 664b8414f89612f2dfd35a9b679c345aa5389026 && \\\n  INSTALLPREFIX=$TAPITMP ./build.sh && \\\n  ./install.sh && \\\n  cd .. && \\\n  git clone https://github.com/tpoechtrager/cctools-port.git && \\\n  cd cctools-port/cctools && \\\n  git checkout 6c438753d2252274678d3e0839270045698c159b && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --target=arm-apple-darwin19 --with-libtapi=$TAPITMP && \\\n  make -j8 && \\\n  make install && \\\n  make distclean && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --target=x86_64-apple-darwin19 --with-libtapi=$TAPITMP && \\\n  make -j8 && \\\n  make install && \\\n  make distclean && \\\n  cd ../.. && \\\n  rm -rf apple-libtapi && \\\n  rm -rf cctools-port && rm -rf /var/lib/apt/lists/*;\n\nRUN \\\n  echo \"iOS 14 + macOS 10/11 + XCode 12\" && \\\n  wget -q -O - ${DM_PACKAGES_URL}/iPhoneOS${IOS_14_VERSION}.sdk.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/iPhoneOS.sdk ${PLATFORMSDK_DIR}/iPhoneOS${IOS_14_VERSION}.sdk && \\\n  wget -q -O - ${DM_PACKAGES_URL}/iPhoneSimulator${IOS_14_VERSION}.sdk.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/iPhoneSimulator.sdk ${PLATFORMSDK_DIR}/iPhoneSimulator${IOS_14_VERSION}.sdk && \\\n  wget -q -O - ${DM_PACKAGES_URL}/MacOSX${MACOS_10_15_VERSION}.sdk.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/MacOSX.sdk ${PLATFORMSDK_DIR}/MacOSX${MACOS_10_15_VERSION}.sdk && \\\n  wget -q -O - ${DM_PACKAGES_URL}/MacOSX${MACOS_11_VERSION}.sdk.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/MacOSX.sdk ${PLATFORMSDK_DIR}/MacOSX${MACOS_11_VERSION}.sdk && \\\n  wget -q -O - ${DM_PACKAGES_URL}/XcodeDefault${XCODE_12_VERSION}.xctoolchain.linux.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/XcodeDefault.xctoolchain ${PLATFORMSDK_DIR}/XcodeDefault${XCODE_12_VERSION}.xctoolchain\n\nRUN \\\n  echo \"iOS 15 + macOS 12 + XCode 13\" && \\\n  wget -q -O - ${DM_PACKAGES_URL}/iPhoneOS${IOS_15_VERSION}.sdk.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/iPhoneOS.sdk ${PLATFORMSDK_DIR}/iPhoneOS${IOS_15_VERSION}.sdk && \\\n  wget -q -O - ${DM_PACKAGES_URL}/iPhoneSimulator${IOS_15_VERSION}.sdk.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/iPhoneSimulator.sdk ${PLATFORMSDK_DIR}/iPhoneSimulator${IOS_15_VERSION}.sdk && \\\n  wget -q -O - ${DM_PACKAGES_URL}/MacOSX${MACOS_12_VERSION}.sdk.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/MacOSX.sdk ${PLATFORMSDK_DIR}/MacOSX${MACOS_12_VERSION}.sdk && \\\n  wget -q -O - ${DM_PACKAGES_URL}/XcodeDefault${XCODE_13_VERSION}.xctoolchain.linux.tar.gz | tar xz -C ${PLATFORMSDK_DIR} && \\\n  mv ${PLATFORMSDK_DIR}/XcodeDefault.xctoolchain ${PLATFORMSDK_DIR}/XcodeDefault${XCODE_13_VERSION}.xctoolchain\n\n# This part is not yet separable between xcode versions, but should work\nRUN \\\n  ln -s /usr/local/bin/llvm-ar /usr/local/bin/ar && \\\n  ln -s ${PLATFORMSDK_DIR}/XcodeDefault${XCODE_13_VERSION}.xctoolchain/usr/lib/arc /usr/local/lib/arc\n\n# The shared library isn't really used yet, but it's good to have it in place so we can build upon it\nRUN mkdir -p /usr/local/lib/clang/13.0.0/lib/darwin && \\\n    ln -s /opt/platformsdk/XcodeDefault${XCODE_13_VERSION}.xctoolchain/usr/lib/clang/${XCODE_13_CLANG_VERSION}/lib/darwin/libclang_rt.asan_osx_dynamic.dylib \\\n    /usr/local/lib/clang/13.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib && \\\n    ln -s /opt/platformsdk/XcodeDefault${XCODE_13_VERSION}.xctoolchain/usr/lib/clang/${XCODE_13_CLANG_VERSION}/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib \\\n    /usr/local/lib/clang/13.0.0/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib && \\\n    ln -s /opt/platformsdk/XcodeDefault${XCODE_13_VERSION}.xctoolchain/usr/lib/clang/${XCODE_13_CLANG_VERSION}/lib/darwin/libclang_rt.tsan_osx_dynamic.dylib \\\n    /usr/local/lib/clang/13.0.0/lib/darwin/libclang_rt.tsan_osx_dynamic.dylib\n\n# Final cleanup\n\nRUN \\\n  apt-get remove -y apt-transport-https xvfb && \\\n  apt-get clean autoclean autoremove\n\n\n# To avoid the mysterious error \"Unexpected error: java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty\"\n# # From https://github.com/docker-library/openjdk/blob/master/11/jdk/slim/Dockerfile\nRUN \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends \\\n# utilities for keeping Debian and OpenJDK CA certificates in sync\n    ca-certificates p11-kit \\\n  ; rm -rf /var/lib/apt/lists/*; \\\n# update \"cacerts\" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)\n# see https://github.com/docker-library/openjdk/issues/327\n#     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075\n#     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in\n#     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29\n  { \\\n    echo '#!/usr/bin/env bash'; \\\n    echo 'set -Eeuo pipefail'; \\\n    echo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \\\n# 8-jdk uses \"$JAVA_HOME/jre/lib/security/cacerts\" and 8-jre and 11+ uses \"$JAVA_HOME/lib/security/cacerts\" directly (no \"jre\" directory)\n    echo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \\\n    echo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \\\n    echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \\\n  } > /etc/ca-certificates/update.d/docker-openjdk;# 8-jdk uses \"$JAVA_HOME/jre/lib/security/cacerts\" and 8-jre and 11+ uses \"$JAVA_HOME/lib/security/cacerts\" directly (no \"jre\" directory)\n\n\n\n\n  chmod +x /etc/ca-certificates/update.d/docker-openjdk; \\\n  /etc/ca-certificates/update.d/docker-openjdk; \\\n\n# https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472\n  find \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \\\n  ldconfig;\n\n# Always run last to minimize the size\nRUN apt-get clean autoclean autoremove\n"
}