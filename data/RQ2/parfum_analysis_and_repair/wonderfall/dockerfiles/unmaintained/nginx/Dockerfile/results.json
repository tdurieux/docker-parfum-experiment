{
  "startTime": 1674252447978,
  "endTime": 1674252449157,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 19,
        "columnEnd": 87
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 19,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.4\nMAINTAINER Wonderfall <wonderfall@schrodinger.io>\n\nENV UID=991 GID=991\n\nARG NGINX_VERSION=1.11.4\nARG LIBRESSL_VERSION=2.5.0\nARG GPG_LIBRESSL=\"A1EB 079B 8D3E B92B 4EBD  3139 663A F51B D5E4 D8D5\"\nARG GPG_NGINX=\"B0F4 2533 73F8 F6F5 10D4  2178 520A 9993 A1C0 52F8\"\nARG BUILD_CORES\n\nRUN echo \"@commuedge https://nl.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n && NB_CORES=${BUILD_CORES-$(getconf _NPROCESSORS_CONF)} \\\n && BUILD_DEPS=\" \\\n    build-base \\\n    linux-headers \\\n    ca-certificates \\\n    automake \\\n    autoconf \\\n    git \\\n    tar \\\n    libtool \\\n    pcre-dev \\\n    zlib-dev \\\n    binutils \\\n    gnupg\" \\\n && apk -U add \\\n    ${BUILD_DEPS} \\\n    pcre \\\n    zlib \\\n    libgcc \\\n    libstdc++ \\\n    su-exec \\\n    openssl \\\n    bind-tools \\\n    tini@commuedge \\\n && cd /tmp \\\n && git clone https://github.com/bagder/libbrotli --depth=1 && cd libbrotli \\\n && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j ${NB_CORES} && make install \\\n && cd /tmp \\\n && git clone https://github.com/google/ngx_brotli --depth=1 \\\n && git clone https://github.com/openresty/headers-more-nginx-module --depth=1 \\\n && LIBRESSL_TARBALL=\"libressl-${LIBRESSL_VERSION}.tar.gz\" \\\n && wget -q https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL} \\\n && echo \"Verifying ${LIBRESSL_TARBALL} using GPG...\" \\\n && wget -q https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL}.asc \\\n && wget -q https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl.asc \\\n && gpg --batch --import libressl.asc \\\n && FINGERPRINT=\"$( LANG=C gpg --batch --verify ${LIBRESSL_TARBALL}.asc ${LIBRESSL_TARBALL} 2>&1 \\\n  | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\")\" \\\n && if [ -z \"${FINGERPRINT}\" ]; then echo \"Warning! Invalid GPG signature!\" && exit 1; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_LIBRESSL}\" ]; then echo \"Warning! Wrong GPG fingerprint!\" && exit 1; fi \\\n && echo \"All seems good, now unpacking ${LIBRESSL_TARBALL}...\" \\\n && tar xzf ${LIBRESSL_TARBALL} \\\n && NGINX_TARBALL=\"nginx-${NGINX_VERSION}.tar.gz\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL} \\\n && echo \"Verifying ${NGINX_TARBALL} using GPG...\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL}.asc \\\n && wget -q https://nginx.org/keys/mdounin.key \\\n && gpg --batch --import mdounin.key \\\n && FINGERPRINT=\"$( LANG=C gpg --batch --verify ${NGINX_TARBALL}.asc ${NGINX_TARBALL} 2>&1 \\\n  | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\")\" \\\n && if [ -z \"${FINGERPRINT}\" ]; then echo \"Warning! Invalid GPG signature!\" && exit 1; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_NGINX}\" ]; then echo \"Warning! Wrong GPG fingerprint!\" && exit 1; fi \\\n && echo \"All seems good, now unpacking ${NGINX_TARBALL}...\" \\\n && tar xzf ${NGINX_TARBALL} && cd nginx-${NGINX_VERSION} \\\n && wget -q https://raw.githubusercontent.com/felixbuenemann/sslconfig/updated-nginx-1.9.15-spdy-patch/patches/nginx_1_9_15_http2_spdy.patch -O spdy.patch \\\n && patch -p1 < spdy.patch \\\n && wget -q https://raw.githubusercontent.com/cloudflare/sslconfig/master/patches/nginx__dynamic_tls_records.patch \\\n && patch -p1 < nginx__dynamic_tls_records.patch \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/etc/nginx \\\n    --sbin-path=/usr/sbin/nginx \\\n    --with-cc-opt='-O3 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wno-deprecated-declarations' \\\n    --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro' \\\n    --with-openssl=/tmp/libressl-${LIBRESSL_VERSION} \\\n    --with-http_ssl_module \\\n    --with-http_v2_module \\\n    --with-http_spdy_module \\\n    --with-http_gzip_static_module \\\n    --with-http_stub_status_module \\\n    --with-file-aio \\\n    --with-threads \\\n    --with-pcre-jit \\\n    --without-http_ssi_module \\\n    --without-http_scgi_module \\\n    --without-http_uwsgi_module \\\n    --without-http_geo_module \\\n    --without-http_autoindex_module \\\n    --without-http_map_module \\\n    --without-http_split_clients_module \\\n    --without-http_memcached_module \\\n    --without-http_empty_gif_module \\\n    --without-http_browser_module \\\n    --http-log-path=/var/log/nginx/access.log \\\n    --error-log-path=/var/log/nginx/error.log \\\n    --add-module=/tmp/headers-more-nginx-module \\\n    --add-module=/tmp/ngx_brotli \\\n && make -j ${NB_CORES} && make install && make clean \\\n && strip -s /usr/sbin/nginx \\\n && apk del ${BUILD_DEPS} \\\n && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg\n\nCOPY nginx.conf /etc/nginx/conf/nginx.conf\nCOPY run.sh /usr/local/bin/run.sh\nCOPY ngxpasswd /usr/local/bin/ngxpasswd\nCOPY ngxproxy /usr/local/bin/ngxproxy\nCOPY vhost_http.conf /etc/nginx/conf/vhost_http.conf\nCOPY vhost_https.conf /etc/nginx/conf/vhost_https.conf\nCOPY ssl_params /etc/nginx/conf/ssl_params\nCOPY headers_params /etc/nginx/conf/headers_params\nCOPY proxy_params /etc/nginx/conf/proxy_params\n\nRUN chmod +x /usr/local/bin/*\n\nEXPOSE 8000 4430\n\nVOLUME /sites-enabled /www /conf.d /passwds /certs /var/log/nginx\n\nLABEL description=\"nginx built from source.\" \\\n      openssl=\"LibreSSL ${LIBRESSL_VERSION}.\" \\\n      nginx=\"nginx ${NGINX_VERSION}.\"\n\nCMD [\"run.sh\"]\n"
}