{
  "startTime": 1674253415983,
  "endTime": 1674253417066,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 15,
        "columnEnd": 83
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 19,
        "columnEnd": 103
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 19,
        "columnEnd": 99
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:edge\n\nARG MPFR_VERSION=3.1.5\nARG MPC_VERSION=1.0.3\n\nARG GPG_MPFR=\"07F3 DBBE CC1A 3960 5078  094D 980C 1976 98C3 739D\"\nARG GPG_MPC=\"AD17 A21E F8AE D8F1 CC02  DBD9 F7D5 C9BF 765C 61E3\"\nARG SHA1_MPC=\"b8be66396c726fdc36ebb0f692ed8a8cca3bcc66\"\n\nENV UID=991 GID=991\n\nRUN BUILD_DEPS=\" \\\n    build-base \\\n    libtool \\\n    libffi-dev \\\n    libressl-dev \\\n    python-dev \\\n    gmp-dev \\\n    mariadb-dev \\\n    py2-pip \\\n    tar \\\n    gnupg\" \\\n && apk -U upgrade && apk add \\\n    ${BUILD_DEPS} \\\n    libffi \\\n    gmp \\\n    libressl \\\n    python \\\n    py-setuptools \\\n    openssh-client \\\n    mariadb-client-libs \\\n    tini \\\n    su-exec \\\n && cd /tmp && wget -q https://www.mpfr.org/mpfr-current/mpfr-${MPFR_VERSION}.tar.gz \\\n && echo \"Verifying authenticity of mpfr-${MPFR_VERSION}.tar.gz...\" \\\n && wget -q https://www.mpfr.org/mpfr-current/mpfr-${MPFR_VERSION}.tar.gz.asc \\\n && gpg --batch --recv-keys 98C3739D \\\n && FINGERPRINT=\"$( LANG=C gpg --batch --verify mpfr-${MPFR_VERSION}.tar.gz.asc mpfr-${MPFR_VERSION}.tar.gz 2>&1 \\\n  | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\")\" \\\n && if [ -z \"${FINGERPRINT}\" ]; then echo \"Warning! Invalid GPG signature!\" && exit 1; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_MPFR}\" ]; then echo \"Warning! Wrong GPG fingerprint!\" && exit 1; fi \\\n && echo \"All seems good, now unpacking mpfr-${MPFR_VERSION}.tar.gz...\" \\\n && tar xzf mpfr-${MPFR_VERSION}.tar.gz && cd mpfr-${MPFR_VERSION} \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install \\\n && cd /tmp && wget -q ftp://ftp.gnu.org/gnu/mpc/mpc-${MPC_VERSION}.tar.gz \\\n && echo \"Verifying both integrity and authenticity of mpc-${MPC_VERSION}.tar.gz...\" \\\n && CHECKSUM=$(sha1sum mpc-${MPC_VERSION}.tar.gz | awk '{print $1}') \\\n && if [ \"${CHECKSUM}\" != \"${SHA1_MPC}\" ]; then echo \"Warning! Checksum does not match!\" && exit 1; fi \\\n && wget -q ftp://ftp.gnu.org/gnu/mpc/mpc-${MPC_VERSION}.tar.gz.sig \\\n && gpg --batch --recv-keys 0xF7D5C9BF765C61E3 \\\n && FINGERPRINT=\"$( LANG=C gpg --batch --verify mpc-${MPC_VERSION}.tar.gz.sig mpc-${MPC_VERSION}.tar.gz 2>&1 \\\n  | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\")\" \\\n && if [ -z \"${FINGERPRINT}\" ]; then echo \"Warning! Invalid GPG signature!\" && exit 1; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_MPC}\" ]; then echo \"Warning! Wrong GPG fingerprint!\" && exit 1; fi \\\n && echo \"All seems good, now unpacking mpc-${MPC_VERSION}.tar.gz...\" \\\n && tar xzf mpc-${MPC_VERSION}.tar.gz && cd mpc-${MPC_VERSION} \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-mpfr-lib=/usr/local/lib --with-mpfr-include=/usr/local/include \\\n && make && make install \\\n && mkdir /cowrie && cd /cowrie \\\n && wget -qO- https://github.com/micheloosterhof/cowrie/archive/master.tar.gz | tar xz --strip 1 \\\n && pip install --no-cache-dir --no-cache -r requirements.txt \\\n && pip install --no-cache-dir --no-cache mysql-python \\\n && mv cowrie.cfg.dist cowrie.cfg \\\n && apk del ${BUILD_DEPS} \\\n && rm -rf /var/cache/apk/* /tmp/* /root/.gnupg && rm mpfr-${MPFR_VERSION}.tar.gz\n\nCOPY run.sh /usr/local/bin/run.sh\n\nRUN chmod +x /usr/local/bin/run.sh\n\nVOLUME /cowrie/log /cowrie/dl /custom\n\nEXPOSE 2222\n\nLABEL maintainer=\"Wonderfall <wonderfall@targaryen.house>\"\n\nCMD [\"run.sh\"]\n"
}