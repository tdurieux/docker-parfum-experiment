{
  "startTime": 1674252562709,
  "endTime": 1674252564038,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 28,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 251
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 246
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 251
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 246
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 251
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 246
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 275
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 270
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04 as builder\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get --no-install-recommends install -y libjack-jackd2-dev libsamplerate0-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline-dev libfftw3-dev libudev-dev libncurses5-dev cmake git unzip wget build-essential g++ && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir compile\nWORKDIR /compile\n\n# build supercollider\nRUN git clone --recurse-submodules https://github.com/SuperCollider/SuperCollider.git /compile/sc\nWORKDIR /compile/sc\nRUN git checkout Version-3.12.2\nRUN git submodule update --init --recursive\nRUN mkdir build\nWORKDIR /compile/sc/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DSUPERNOVA=OFF -DSC_ED=OFF -DSC_EL=OFF -DSC_VIM=ON -DNATIVE=ON -DSC_IDE=OFF -DNO_X11=ON -DSC_QT=OFF ..\nRUN cmake --build . --config Release --target all -- -j3\nRUN cmake --build . --config Release --target install\nRUN ldconfig\n\n\n# sc3 extensions\nWORKDIR /compile\nRUN git clone --recursive https://github.com/supercollider/sc3-plugins.git\nWORKDIR /compile/sc3-plugins\nRUN git checkout Version-3.11.1\nRUN mkdir build\nWORKDIR /compile/sc3-plugins/build\nRUN cmake -DSC_PATH=/compile/sc -DCMAKE_BUILD_TYPE=Release -DSUPERNOVA=OFF ..\nRUN cmake --build . --config Release\nRUN cmake --build . --config Release --target install\n\n\n# ported-plugins\nRUN git clone --recurse-submodules https://github.com/madskjeldgaard/portedplugins.git /compile/pp\nRUN mkdir /compile/pp/build\nWORKDIR /compile/pp/build\nRUN cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=/compile/sc -DCMAKE_INSTALL_PREFIX=/root/.local/share/SuperCollider/Extensions\nRUN cmake --build . --config Release\nRUN cmake --build . --config Release --target install\n\n\n# mi-ugens\nRUN git clone --recurse-submodules https://github.com/v7b1/mi-UGens.git /compile/miugens\nWORKDIR /compile/miugens\nRUN bash build.sh /compile/sc\nRUN cp -r /compile/miugens/build/mi-UGens /root/.local/share/SuperCollider/Extensions/\n\n# build sendosc\n# WORKDIR /compile\n# RUN wget https://go.dev/dl/go1.18.linux-amd64.tar.gz\n# RUN rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz\n# COPY main.go /compile/main.go\n# COPY src /compile/src\n# COPY go.mod /compile/go.mod\n# COPY go.sum /compile/go.sum\n# RUN /usr/local/go/bin/go install -v\n\n# build the slimmed down image\nFROM ubuntu:20.04\nRUN echo \"HI\"\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get --no-install-recommends install -y libjack-jackd2-dev libsamplerate0-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline-dev libfftw3-dev libudev-dev libncurses5-dev sox jackd2 python3 python3-pip wget && rm -rf /var/lib/apt/lists/*;\nRUN wget https://go.dev/dl/go1.18.linux-amd64.tar.gz\nRUN rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz && rm go1.18.linux-amd64.tar.gz\n\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install numpy scipy\nRUN echo /usr/bin/jackd -d dummy -r 48000 > /root/.jackdrc\n\nCOPY --from=builder /usr/local/include/SuperCollider /usr/local/include/SuperCollider\nCOPY --from=builder /usr/local/lib/SuperCollider /usr/local/lib/SuperCollider\nCOPY --from=builder /usr/local/share/SuperCollider /usr/local/share/SuperCollider\nCOPY --from=builder /usr/local/bin/sclang /usr/local/bin/sclang\nCOPY --from=builder /usr/local/bin/scsynth /usr/local/bin/scsynth\nCOPY --from=builder /root/.local /root/.local\n# COPY --from=builder /usr/local/go /usr/local/go\nCOPY main.go /root/main.go\nCOPY src /root/src\nCOPY go.mod /root/go.mod\nCOPY go.sum /root/go.sum\nWORKDIR /root\n\n# debug purposes\nCOPY raw /root/raw\n#RUN /usr/local/go/bin/go build -v\n\nCMD [\"/bin/sh\",\"-c\",\"/root/raw stemstitch --config /data/${CONFIGDIR}/config.toml\"]"
}