{
  "startTime": 1674255664567,
  "endTime": 1674255665735,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 115,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 70,
        "columnEnd": 83
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 7,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile is a facsimile of the \"ubuntu-2004\" GitHub action runner,\n# trimmed down to those software packages which we actually use.\n# https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md\n#\n# Don't install anything in this Dockerfile which isn't also present in that environment!\n# Instead, further packages must be installed through explicit build steps.\n# This practice keeps builds within devcontainer environments (i.e. codespaces) in lock-step\n# with what works in GitHub Actions CI.\nFROM ubuntu:20.04\n\n## Set a configured locale.\nARG LOCALE=en_US.UTF-8\n\n# See the package list in the GitHub reference link above, at the very bottom,\n# which lists installed apt packages.\nRUN apt update -y \\\n && apt upgrade -y \\\n && DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends -y \\\n      bash-completion \\\n      build-essential \\\n      ca-certificates \\\n      clang-12 \\\n      cmake \\\n      curl \\\n      docker-compose \\\n      docker.io \\\n      git \\\n      gnupg2 \\\n      iproute2 \\\n      jq \\\n      less \\\n      libclang-12-dev \\\n      libsqlite3-dev \\\n      libssl-dev \\\n      lld-12 \\\n      locales \\\n      musl-tools \\\n      net-tools \\\n      netcat \\\n      openssh-client  \\\n      pkg-config \\\n      postgresql-client \\\n      psmisc \\\n      sqlite3 \\\n      strace \\\n      sudo \\\n      tcpdump \\\n      unzip \\\n      vim-tiny \\\n      wget \\\n      zip && rm -rf /var/lib/apt/lists/*;\n\nRUN locale-gen ${LOCALE}\n\n# Install git-lfs.\nRUN wget https://packagecloud.io/github/git-lfs/packages/debian/bullseye/git-lfs_3.2.0_amd64.deb/download \\\n && dpkg --install download \\\n && rm download\n\n# Install package sources for google-cloud-sdk repository.\n# Run `gcloud auth application-default login` to enable key management with the `sops` tool.\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n    && curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\n# Install package source for more recent Nodejs packages.\nRUN echo \"Add NodeSource keyring for more recent nodejs packages\" \\\n && export NODE_KEYRING=/usr/share/keyrings/nodesource.gpg \\\n && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --batch --dearmor | tee \"$NODE_KEYRING\" >/dev/null \\\n && gpg --batch --no-default-keyring --keyring \"$NODE_KEYRING\" --list-keys \\\n && echo \"deb [signed-by=$NODE_KEYRING] https://deb.nodesource.com/node_14.x bullseye main\" | tee /etc/apt/sources.list.d/nodesource.list\n\n# Install google-cloud-sdk and nodejs.\nRUN apt update -y \\\n    && apt install google-cloud-sdk nodejs --no-install-recommends -y \\\n    && apt auto-remove -y && rm -rf /var/lib/apt/lists/*;\n\n## Install Rust. This is pasted from:\n## https://github.com/rust-lang/docker-rust/blob/master/1.57.0/bullseye/Dockerfile\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH \\\n    RUST_VERSION=1.61.0\n\nRUN set -eux; \\\n    dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"${dpkgArch##*-}\" in \\\n        amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='3dc5ef50861ee18657f9db2eeb7392f9c2a6c95c90ab41e45ab4ca71476b4338' ;; \\\n        armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='67777ac3bc17277102f2ed73fd5f14c51f4ca5963adadf7f174adf4ebc38747b' ;; \\\n        arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='32a1532f7cef072a667bac53f1a5542c99666c4071af0c9549795bbdb2069ec1' ;; \\\n        i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='e50d1deb99048bc5782a0200aa33e4eea70747d49dffdc9d06812fd22a372515' ;; \\\n        *) echo >&2 \"unsupported architecture: ${dpkgArch}\"; exit 1 ;; \\\n    esac; \\\n    url=\"https://static.rust-lang.org/rustup/archive/1.24.3/${rustArch}/rustup-init\"; \\\n    wget \"$url\"; \\\n    echo \"${rustupSha256}  *rustup-init\" | sha256sum -c -; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \\\n    rm rustup-init; \\\n    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \\\n    rustup --version; \\\n    cargo --version; \\\n    rustc --version;\n\n# The above copy-paste installed the \"minimal\" profile, but GitHub runners\n# feature additional tools.\n# See: https://blog.rust-lang.org/2019/10/15/Rustup-1.20.0.html#profiles\nRUN rustup set profile default \\\n && rustup component add clippy rustfmt rust-docs\n\n## Install Go.\n## See releases and SHAs at: https://go.dev/dl/\nARG GOLANG_VERSION=1.18.3\nARG GOLANG_SHA256=956f8507b302ab0bb747613695cdae10af99bbd39a90cae522b7c0302cc27245\nENV PATH=/usr/local/go/bin:$PATH\n\nRUN curl -f -L -o /tmp/golang.tgz \\\n      https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz \\\n && echo \"${GOLANG_SHA256}  /tmp/golang.tgz\" | sha256sum -c - \\\n && tar --extract \\\n      --file /tmp/golang.tgz \\\n      --directory /usr/local \\\n && rm /tmp/golang.tgz \\\n && go version\n\n# Add `flow` user with sudo access.\nRUN useradd flow --create-home --shell /bin/bash \\\n    && echo flow ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/flow \\\n    && chmod 0440 /etc/sudoers.d/flow\n\n# Adapted from: https://github.com/microsoft/vscode-dev-containers/tree/main/containers/docker-from-docker#adding-the-user-to-a-docker-group\nCOPY docker-debian.sh /tmp\nRUN bash /tmp/docker-debian.sh true /var/run/docker-host.sock /var/run/docker.sock flow false\n\n# VS Code overrides ENTRYPOINT and CMD when executing `docker run` by default.\n# Setting the ENTRYPOINT to docker-init.sh will configure non-root access to\n# the Docker socket if \"overrideCommand\": false is set in devcontainer.json.\n# The script will also execute CMD if you need to alter startup behaviors.\nENTRYPOINT [ \"/usr/local/share/docker-init.sh\" ]\nCMD [ \"sleep\", \"infinity\" ]"
}