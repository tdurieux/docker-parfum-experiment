{
  "startTime": 1674219645218,
  "endTime": 1674219646205,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ALPINE_VERSION=3.13\n\nFROM elixir:1.11-alpine as elixir_alpine\n\nENV APP_PATH=/app\n\nRUN apk add --no-cache \\\n    --update-cache \\\n    nodejs \\\n    npm\n\nRUN mix do local.hex --force, local.rebar --force\n\nWORKDIR $APP_PATH\n\nFROM elixir_alpine as development\n\nRUN apk add --no-cache \\\n\n    inotify-tools \\\n    postgresql-client\n\n# Install mix dependencies\nCOPY mix.exs mix.lock $APP_PATH/\nRUN mix do deps.get\n\nCOPY assets/package.json assets/package-lock.json $APP_PATH/assets/\nRUN npm install --prefix assets && npm cache clean --force;\n\nCOPY . .\n\n# Building a release version\n# https://hexdocs.pm/phoenix/releases.html\nFROM elixir_alpine AS production_build\n\n# Set build ENV\nENV MIX_ENV=prod\n\n# Install mix dependencies\nCOPY mix.exs mix.lock $APP_PATH/\nRUN mix do deps.get, deps.compile\n\n# Build assets\nCOPY assets $APP_PATH/assets/\nRUN set -eux; \\\n    npm \\\n      --loglevel=error \\\n      --no-audit \\\n      --prefix assets \\\n      --progress=false \\\n      ci ; \\\n    npm \\\n      --prefix assets \\\n      run \\\n      deploy\n\n# Compile and build release\nCOPY . .\nRUN mix do phx.digest, compile, release\n\n# Prepare release image\nFROM alpine:${ALPINE_VERSION} AS production\n\n# Labels Standard\nLABEL org.label-schema.schema-version=\"1.0\"\n# LABEL org.label-schema.build-date=$BUILD_DATE\nLABEL org.label-schema.name=\"mindwendel/mindwendel\"\nLABEL org.label-schema.description=\"mindwendel application\"\nLABEL org.label-schema.vcs-url=\"https://github.com/mindwendel/mindwendel\"\n# LABEL org.label-schema.vcs-ref=$VCS_REF\nLABEL org.label-schema.vendor=\"WSO2\"\n# LABEL org.label-schema.version=$BUILD_VERSION\nLABEL org.label-schema.docker.cmd=\"docker run -d --name mindwendel -p 127.0.0.1:80:4000 -e DATABASE_HOST=\\\"...\\\" -e DATABASE_PORT=\\\"5432\\\" -e DATABASE_NAME=\\\"mindwendel_prod\\\" -e DATABASE_USER=\\\"mindwendel_db_user\\\" -e DATABASE_USER_PASSWORD=\\\"mindwendel_db_user_password\\\" -e SECRET_KEY_BASE=\\\"generate_your_own_secret_key_base_and_save_it\\\" -e URL_HOST=\\\"your_domain_to_mindwendel\\\" ghcr.io/mindwendel/mindwendel\"\nLABEL org.opencontainers.image.source=\"https://github.com/mindwendel/mindwendel\"\nLABEL maintainer=\"gerardo.navarro.suarez@gmail.com\"\n\nENV APP_PATH=/app\n\nRUN apk add --no-cache \\\n      libgcc \\\n      libstdc++ \\\n      ncurses-libs \\\n      openssl \\\n      postgresql-client\n\nWORKDIR $APP_PATH\n\nRUN chown nobody:nobody $APP_PATH/\n\nUSER nobody:nobody\n\nCOPY --from=production_build --chown=nobody:nobody $APP_PATH/_build/prod/rel/mindwendel ./\n\nENV HOME=$APP_PATH\n\nCOPY --chown=nobody:nobody entrypoint.release.sh $APP_PATH/entrypoint.release.sh\nENTRYPOINT [\"sh\", \"entrypoint.release.sh\"]\n\nEXPOSE 80"
}