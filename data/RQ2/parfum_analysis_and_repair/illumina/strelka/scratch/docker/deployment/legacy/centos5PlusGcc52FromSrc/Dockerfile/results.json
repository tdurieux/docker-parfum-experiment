{
  "startTime": 1674248732893,
  "endTime": 1674248733811,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# This is a simple image used to assist with deploying portable\n# binaries, by allowing us to build in a virtual centos 5\n# environment.\n#\n# At present we simply add all of the projects build requirements onto\n# the centos5 base image.\n#\n# This version is extended to build gcc 5.2 from source. The purpose is\n# to investigate a small performance gap in the deployed binary compared\n# to our non-docker based deployment:\n#\n\nFROM astj/centos5-vault\n\n# add standard centos5 packages && swap in newer cmake as default:\nRUN yum install -y bzip2 make gcc gcc-c++ tar wget zlib-devel git && \\\n    yum install -y epel-release && \\\n    yum install -y cmake28 && cd /usr/bin && ln -s cmake28 cmake && rm -rf /var/cache/yum\n\n## update binutils\n##\n## this was a test to get lto working in centos5\n#\n#RUN mkdir -p /download/binutils && cd /download/binutils && wget ftp://ftp.gnu.org/gnu/binutils/binutils-2.25.tar.bz2 && \\\n#    tar -xjf binutils-2.25.tar.bz2 && cd binutils-2.25 && ./configure --prefix=/opt/binutils-2.25 --enable-lto && \\\n#    make -j2 && make install && cd / && rm -rf /download\n#\n## other lto stuff for gcc configure below:\n#        --with-ld=/opt/binutils-2.25/bin/ld \\\n#        --with-as=/opt/binutils-2.25/bin/as \\\n\n# build gcc 5.2 from source\nRUN GCCVER=5.2.0 && mkdir -p /download/gcc-${GCCVER} && cd /download/gcc-${GCCVER} && wget ftp://ftp.gnu.org/gnu/gcc/gcc-${GCCVER}/gcc-${GCCVER}.tar.bz2 && \\\n    tar -xjf gcc-${GCCVER}.tar.bz2 && cd gcc-${GCCVER} && ./contrib/download_prerequisites && \\\n    cd .. && mkdir -p build && cd build && \\\n    ../gcc-${GCCVER}/configure \\\n        --prefix=/opt/gcc-${GCCVER} \\\n        --disable-multilib \\\n        --disable-bootstrap \\\n        --enable-lto \\\n        --with-system-zlib \\\n        --enable-languages=c,c++ && \\\n    make -j2 && make install && cd / && rm -rf /download && \\\n    GCC_PATH=/opt/gcc-${GCCVER} && SPECS_PATH=${GCC_PATH}/lib/gcc/x86_64-unknown-linux-gnu/${GCCVER} && SPECS_FILE=${SPECS_PATH}/specs && \\\n    ${GCC_PATH}/bin/gcc -dumpspecs > ${SPECS_FILE} && echo '*link:'$'\\n'+ -R ${GCC_PATH}/lib64$'\\n'  >> ${SPECS_FILE} && rm gcc-${GCCVER}.tar.bz2\n\n# Prior to build configuration, set CC/CXX to new gcc version:\nENV CC /opt/gcc-5.2.0/bin/gcc\nENV CXX /opt/gcc-5.2.0/bin/g++\n"
}