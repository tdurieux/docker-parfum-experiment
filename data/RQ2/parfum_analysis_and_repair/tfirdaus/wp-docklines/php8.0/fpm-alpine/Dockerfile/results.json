{
  "startTime": 1674251234507,
  "endTime": 1674251235404,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 1,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:8.0-fpm-alpine\n\nLABEL org.opencontainers.image.source https://github.com/tfirdaus/wp-docklines\n\n# persistent dependencies\nRUN apk add --no-cache \\\n# in theory, docker-entrypoint.sh is POSIX-compliant, but priority is a working, consistent image\n\t\tbash \\\n# BusyBox sed is not sufficient for some of our sed expressions\n\t\tsed \\\n# Ghostscript is required for rendering PDF previews\n\t\tghostscript \\\n# Alpine package for \"imagemagick\" contains ~120 .so files, see: https://github.com/docker-library/wordpress/pull/497\n\t\timagemagick\n\n# install the PHP extensions we need (https://make.wordpress.org/hosting/handbook/handbook/server-environment/#php-extensions)\nRUN set -ex; \\\n\n\tapk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\tfreetype-dev \\\n\t\timagemagick-dev \\\n\t\tlibjpeg-turbo-dev \\\n\t\tlibpng-dev \\\n\t\tlibzip-dev \\\n\t; \\\n\n\tdocker-php-ext-configure gd --with-freetype --with-jpeg; \\\n\tdocker-php-ext-install -j \"$(nproc)\" \\\n\t\tbcmath \\\n\t\texif \\\n\t\tgd \\\n\t\tmysqli \\\n\t\tzip \\\n\t; \\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --virtual .wordpress-phpexts-rundeps $runDeps; \\\n\tapk del .build-deps\n\n# set recommended PHP.ini settings\n# see https://secure.php.net/manual/en/opcache.installation.php\nRUN set -eux; \\\n\tdocker-php-ext-enable opcache; \\\n\t{ \\\n\t\techo 'opcache.memory_consumption=128'; \\\n\t\techo 'opcache.interned_strings_buffer=8'; \\\n\t\techo 'opcache.max_accelerated_files=4000'; \\\n\t\techo 'opcache.revalidate_freq=2'; \\\n\t\techo 'opcache.fast_shutdown=1'; \\\n\t} > /usr/local/etc/php/conf.d/opcache-recommended.ini\n# https://wordpress.org/support/article/editing-wp-config-php/#configure-error-logging\nRUN { \\\n# https://www.php.net/manual/en/errorfunc.constants.php\n# https://github.com/docker-library/wordpress/issues/420#issuecomment-517839670\n\t\techo 'error_reporting = E_ERROR | E_WARNING | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING | E_RECOVERABLE_ERROR'; \\\n\t\techo 'display_errors = Off'; \\\n\t\techo 'display_startup_errors = Off'; \\\n\t\techo 'log_errors = On'; \\\n\t\techo 'error_log = /dev/stderr'; \\\n\t\techo 'log_errors_max_len = 1024'; \\\n\t\techo 'ignore_repeated_errors = On'; \\\n\t\techo 'ignore_repeated_source = Off'; \\\n\t\techo 'html_errors = Off'; \\\n\t} > /usr/local/etc/php/conf.d/error-logging.ini\n\n\nENV WORDPRESS_VERSION 5.6\nENV WORDPRESS_SHA1 db8b75bfc9de27490434b365c12fd805ca6784ce\n\nRUN set -ex; \\\n\tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \\\n\techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \\\n# upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress\n\ttar -xzf wordpress.tar.gz -C /usr/src/; \\\n\trm wordpress.tar.gz; \\\n\tchown -R www-data:www-data /usr/src/wordpress; \\\n# pre-create wp-content (and single-level children) for folks who want to bind-mount themes, etc so permissions are pre-created properly instead of root:root\n# wp-content/cache: https://github.com/docker-library/wordpress/issues/534#issuecomment-705733507\n\tmkdir wp-content; \\\n\tfor dir in /usr/src/wordpress/wp-content/*/ cache; do \\\n\t\tdir=\"$(basename \"${dir%/}\")\"; \\\n\t\tmkdir \"wp-content/$dir\"; \\\n\tdone; \\\n\tchown -R www-data:www-data wp-content; \\\n\tchmod -R 777 wp-content\n\n# Install extra packages\nRUN set -ex; \\\n\tapk add --update --no-cache mysql-client openssh-client unzip subversion git\n\n# Install and enable extra PHP extensions.\nRUN docker-php-ext-install mysqli pdo pdo_mysql\n\n# Install WP-CLI\nENV WP_CLI_VERSION 2.4.0\nENV WP_CLI_SHA512 4049c7e45e14276a70a41c3b0864be7a6a8cfa8ea65ebac8b184a4f503a91baa1a0d29260d03248bc74aef70729824330fb6b396336172a624332e16f64e37ef\n\nRUN set -ex; \\\n\tcurl -o /usr/local/bin/wp.phar -fSL \"https://github.com/wp-cli/wp-cli/releases/download/v${WP_CLI_VERSION}/wp-cli-${WP_CLI_VERSION}.phar\" \\\n\t&& echo \"$WP_CLI_SHA512 */usr/local/bin/wp.phar\" | sha512sum -c - \\\n\t&& chmod +x /usr/local/bin/wp.phar \\\n\t&& mv /usr/local/bin/wp.phar /usr/local/bin/wp \\\n\t&& mkdir -p /var/www/.wp-cli && chown www-data:www-data -R /var/www/.wp-cli \\\n\t&& wp cli info\n\n# Install Composer\nENV COMPOSER_VERSION 1.10.17\n\nRUN set -eux; \\\n  curl --silent --fail --location --retry 3 --output /tmp/installer.php --url https://raw.githubusercontent.com/composer/getcomposer.org/cb19f2aa3aeaa2006c0cd69a7ef011eb31463067/web/installer; \\\n  php -r \" \\\n    \\$signature = '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5'; \\\n    \\$hash = hash('sha384', file_get_contents('/tmp/installer.php')); \\\n    if (!hash_equals(\\$signature, \\$hash)) { \\\n      unlink('/tmp/installer.php'); \\\n      echo 'Integrity check failed, installer is either corrupt or worse.' . PHP_EOL; \\\n      exit(1); \\\n    }\"; \\\n  php /tmp/installer.php --no-ansi --install-dir=/usr/local/bin --filename=composer --version=${COMPOSER_VERSION}; \\\n  composer --ansi --version --no-interaction; \\\n  rm -rf /tmp/*;\n\nVOLUME /var/www/html\n\nCOPY docker-entrypoint.sh /usr/local/bin/\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"php-fpm\"]\n"
}