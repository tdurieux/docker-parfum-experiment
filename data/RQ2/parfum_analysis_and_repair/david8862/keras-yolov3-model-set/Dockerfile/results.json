{
  "startTime": 1674250775023,
  "endTime": 1674250777143,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 76,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 85,
        "lineEnd": 99,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 40,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 76,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 85,
        "lineEnd": 99,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG UBUNTU_VERSION=18.04\n\nARG ARCH=\nARG CUDA=10.0\nFROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base\n\nLABEL maintainer=\"Xiaobin Zhang <david8862@gmail.com>\"\n\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\nARG ARCH\nARG CUDA\nARG CUDNN=7.4.1.5-1\nARG CUDNN_MAJOR_VERSION=7\nARG LIB_DIR_PREFIX=x86_64\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        cuda-cublas-dev-${CUDA/./-} \\\n        cuda-cudart-dev-${CUDA/./-} \\\n        cuda-cufft-dev-${CUDA/./-} \\\n        cuda-curand-dev-${CUDA/./-} \\\n        cuda-cusolver-dev-${CUDA/./-} \\\n        cuda-cusparse-dev-${CUDA/./-} \\\n        libcudnn7=${CUDNN}+cuda${CUDA} \\\n        libcudnn7-dev=${CUDNN}+cuda${CUDA} \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        wget \\\n        git \\\n        && \\\n    find /usr/local/cuda-${CUDA}/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/${LIB_DIR_PREFIX}-linux-gnu/libcudnn_static_v7.a && rm -rf /var/lib/apt/lists/*;\n\n\n# Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON python\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\nENV TF_NEED_CUDA 1\nENV TF_NEED_TENSORRT 1\nENV TF_CUDA_COMPUTE_CAPABILITIES=3.5,5.2,6.0,6.1,7.0\nENV TF_CUDA_VERSION=${CUDA}\nENV TF_CUDNN_VERSION=${CUDNN_MAJOR_VERSION}\n# CACHE_STOP is used to rerun future commands, otherwise cloning tensorflow will be cached and will not pull the most recent version\nARG CACHE_STOP=1\n# Check out TensorFlow source code if --build-arg CHECKOUT_TF_SRC=1\n#ARG CHECKOUT_TF_SRC=0\n#RUN test \"${CHECKOUT_TF_SRC}\" -eq 1 && git clone https://github.com/tensorflow/tensorflow.git /tensorflow_src || true\n\n# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure\n# dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\nARG USE_PYTHON_3_NOT_2\nARG _PY_SUFFIX=${USE_PYTHON_3_NOT_2:+3}\nARG PYTHON=python${_PY_SUFFIX}\nARG PIP=pip${_PY_SUFFIX}\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    ${PYTHON} \\\n    ${PYTHON}-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN ${PIP} --no-cache-dir install --upgrade \\\n    pip \\\n    setuptools\n\n# Some TF tools expect a \"python\" binary\nRUN ln -s $(which ${PYTHON}) /usr/local/bin/python\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    iputils-ping \\\n    net-tools \\\n    build-essential \\\n    curl \\\n    git \\\n    wget \\\n    vim \\\n    cmake \\\n    imagemagick \\\n    python3-opencv \\\n    openjdk-8-jdk \\\n    ${PYTHON}-dev \\\n    virtualenv \\\n    swig && rm -rf /var/lib/apt/lists/*;\n\n# Install python packages\nRUN ${PIP} --no-cache-dir install \\\n    Pillow \\\n    h5py \\\n    keras_applications \\\n    keras_preprocessing \\\n    matplotlib \\\n    mock \\\n    numpy \\\n    scipy \\\n    sklearn \\\n    pandas \\\n    future \\\n    portpicker \\\n    && test \"${USE_PYTHON_3_NOT_2}\" -eq 1 && true || ${PIP} --no-cache-dir install \\\n    tensorflow-gpu \\\n    tensorflow-model-optimization \\\n    keras \\\n    mnn \\\n    pycocotools \\\n    enum34\n\n# Change workdir\nWORKDIR /root\n\n# Prepare code & dataset (PascalVOC)\nRUN git clone https://github.com/david8862/keras-YOLOv3-model-set.git && \\\n    mkdir -p data/PascalVOC && \\\n    wget -O data/PascalVOC/VOCtrainval_06-Nov-2007.tar https://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar && \\\n    wget -O data/PascalVOC/VOCtest_06-Nov-2007.tar https://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar && \\\n    wget -O data/PascalVOC/VOCtrainval_11-May-2012.tar https://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar && \\\n    wget -O data/PascalVOC/VOC2012test.tar https://pjreddie.com/media/files/VOC2012test.tar && \\\n    pushd data/PascalVOC && \\\n    tar xf VOCtest_06-Nov-2007.tar && \\\n    tar xf VOCtrainval_06-Nov-2007.tar && \\\n    tar xf VOCtrainval_11-May-2012.tar && \\\n    popd && \\\n    pushd keras-YOLOv3-model-set/tools/ && \\\n    python voc_annotation.py --dataset_path=/root/data/PascalVOC/VOCdevkit/ --output_path=/root/data/PascalVOC && \\\n    popd && \\\n    pushd data/PascalVOC && cp -rf 2007_train.txt trainval.txt && cat 2007_val.txt >> trainval.txt && cat 2012_train.txt >> trainval.txt && cat 2012_val.txt >> trainval.txt && \\\n    cp -rf trainval.txt 2007_test.txt /root/keras-YOLOv3-model-set/ && \\\n    popd && \\\n    wget -O keras-YOLOv3-model-set/weights/yolov3.weights https://pjreddie.com/media/files/yolov3.weights && \\\n    wget -O keras-YOLOv3-model-set/weights/yolov3-tiny.weights https://pjreddie.com/media/files/yolov3-tiny.weights && \\\n    wget -O keras-YOLOv3-model-set/weights/yolov3-spp.weights https://pjreddie.com/media/files/yolov3-spp.weights && \\\n    wget -O keras-YOLOv3-model-set/weights/darknet53.conv.74.weights https://pjreddie.com/media/files/darknet53.conv.74 && \\\n    wget -O keras-YOLOv3-model-set/weights/darknet19_448.conv.23.weights https://pjreddie.com/media/files/darknet19_448.conv.23 && \\\n    wget -O keras-YOLOv3-model-set/weights/yolov2.weights https://pjreddie.com/media/files/yolo.weights && \\\n    wget -O keras-YOLOv3-model-set/weights/yolov2-voc.weights https://pjreddie.com/media/files/yolo-voc.weights && \\\n    pushd keras-YOLOv3-model-set/ && \\\n    python tools/convert.py cfg/yolov3.cfg weights/yolov3.weights weights/yolov3.h5 && \\\n    python tools/convert.py cfg/yolov3-tiny.cfg weights/yolov3-tiny.weights weights/yolov3-tiny.h5 && \\\n    python tools/convert.py cfg/yolov3-spp.cfg weights/yolov3-spp.weights weights/yolov3-spp.h5 && \\\n    python tools/convert.py cfg/yolov2.cfg weights/yolov2.weights weights/yolov2.h5 && \\\n    python tools/convert.py cfg/yolov2-voc.cfg weights/yolov2-voc.weights weights/yolov2-voc.h5 && \\\n    python tools/convert.py cfg/darknet53.cfg weights/darknet53.conv.74.weights weights/darknet53.h5 && \\\n    python tools/convert.py cfg/darknet19_448_body.cfg weights/darknet19_448.conv.23.weights weights/darknet19.h5 && \\\n    popd && rm VOCtest_06-Nov-2007.tar\n\n# Optional: Prepare MS COCO 2017 dataset\n#RUN mkdir -p data/COCO2017 && \\\n    #wget -O data/COCO2017/train2017.zip http://images.cocodataset.org/zips/train2017.zip && \\\n    #wget -O data/COCO2017/val2017.zip http://images.cocodataset.org/zips/val2017.zip && \\\n    #wget -O data/COCO2017/test2017.zip http://images.cocodataset.org/zips/test2017.zip && \\\n    #wget -O data/COCO2017/annotations_trainval2017.zip http://images.cocodataset.org/annotations/annotations_trainval2017.zip && \\\n    #wget -O data/COCO2017/image_info_test2017.zip http://images.cocodataset.org/annotations/image_info_test2017.zip && \\\n    #pushd data/COCO2017 && \\\n    #unzip -e train2017.zip && unzip -e val2017.zip && unzip -e test2017.zip && \\\n    #unzip -e annotations_trainval2017.zip && unzip -e image_info_test2017.zip && \\\n    #popd && \\\n    #pushd keras-YOLOv3-model-set/tools/ && \\\n    #python coco_annotation.py --dataset_path=/root/data/COCO2017/ --output_path=/root/data/COCO2017 && \\\n    #pushd data/COCO2017 && cp -rf train2017.txt trainval.txt && cat val2017.txt >> trainval.txt && \\\n    #cp -rf trainval.txt /root/keras-YOLOv3-model-set/ && \\\n    #popd\n\n\n\n#COPY bashrc /etc/bash.bashrc\n#RUN chmod a+rwx /etc/bash.bashrc\n"
}