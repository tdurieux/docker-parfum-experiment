{
  "startTime": 1674250616694,
  "endTime": 1674250617254,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 27,
        "columnEnd": 39
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 5,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#Based on the multi-stage build example by codefresh.io\n#https://codefresh.io/blog/node_docker_multistage/\n\n# ---- Build Node ----\nFROM node:8.9.1-alpine AS build\n# set working directory\nWORKDIR /root/todo-app\n# Set tini as entrypoint\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n# copy package files as indicator if layer with dependencies should re-run.\nCOPY ./package.json .\nCOPY ./yarn.lock .\n\n# install yarn and project dependencies\nRUN npm i -g yarn@1.3.2 && yarn install && npm cache clean --force; && yarn cache clean;\n\n# copy the rest of the project, test and build\nCOPY . .\nRUN CI=true yarn test && yarn build && yarn cache clean;\n\n#\n# ---- Release Node ----\nFROM nginx:1.13.7\nWORKDIR /app\n# copy production build output from build node\nCOPY --from=build /root/todo-app/build .\n\nCOPY ./nginx.conf /etc/nginx/conf.d/default.conf.template\n\nSTOPSIGNAL SIGTERM\n\n# Empty config array\nENV REACT_APP_CLIENT_ID \"\"\nENV REACT_APP_TENANT \"\"\nENV REACT_APP_TEST_MODE \"false\"\n\n# run nginx\nCMD envsubst '\\$REACT_APP_CLIENT_ID \\$REACT_APP_TEST_MODE \\$REACT_APP_TENANT' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'\n\n\n"
}