diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/tibcosoftware/snappy-on-k8s/dockerfiles/zeppelin/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/tibcosoftware/snappy-on-k8s/dockerfiles/zeppelin/Dockerfile/repaired.Dockerfile
index 79c96e2..6762c1a 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/tibcosoftware/snappy-on-k8s/dockerfiles/zeppelin/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/tibcosoftware/snappy-on-k8s/dockerfiles/zeppelin/Dockerfile/repaired.Dockerfile
@@ -31,66 +31,66 @@ ENV LOG_TAG="[ZEPPELIN_${Z_VERSION}]:" \
 
 RUN echo "$LOG_TAG update and install basic packages" && \
     apt-get -y update && \
-    apt-get install -y locales && \
+    apt-get install --no-install-recommends -y locales && \
     locale-gen $LANG && \
-    apt-get install -y software-properties-common && \
+    apt-get install --no-install-recommends -y software-properties-common && \
     apt -y autoclean && \
     apt -y dist-upgrade && \
-    apt-get install -y build-essential
+    apt-get install --no-install-recommends -y build-essential && rm -rf /var/lib/apt/lists/*;
 
 RUN echo "$LOG_TAG install tini related packages" && \
-    apt-get install -y wget curl grep sed dpkg && \
-    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
-    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
+    apt-get install --no-install-recommends -y wget curl grep sed dpkg && \
+    TINI_VERSION=$( curl -f https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:') && \
+    curl -f -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
     dpkg -i tini.deb && \
-    rm tini.deb
+    rm tini.deb && rm -rf /var/lib/apt/lists/*;
 
 ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
 RUN echo "$LOG_TAG Install java8" && \
     apt-get -y update && \
-    apt-get install -y openjdk-8-jdk && \
+    apt-get install --no-install-recommends -y openjdk-8-jdk && \
     rm -rf /var/lib/apt/lists/*
 
 # Should install conda first before numpy, matploylib since pip and python will be installed by conda
 RUN echo "$LOG_TAG Install miniconda2 related packages" && \
     apt-get -y update && \
-    apt-get install -y bzip2 ca-certificates \
+    apt-get install --no-install-recommends -y bzip2 ca-certificates \
     libglib2.0-0 libxext6 libsm6 libxrender1 \
     git mercurial subversion && \
     echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \
     wget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.3.11-Linux-x86_64.sh -O ~/miniconda.sh && \
     /bin/bash ~/miniconda.sh -b -p /opt/conda && \
-    rm ~/miniconda.sh
+    rm ~/miniconda.sh && rm -rf /var/lib/apt/lists/*;
 ENV PATH /opt/conda/bin:$PATH
 
 RUN echo "$LOG_TAG Install python related packages" && \
     apt-get -y update && \
-    apt-get install -y python-dev python-pip && \
-    apt-get install -y gfortran && \
+    apt-get install --no-install-recommends -y python-dev python-pip && \
+    apt-get install --no-install-recommends -y gfortran && \
     # numerical/algebra packages
-    apt-get install -y libblas-dev libatlas-dev liblapack-dev && \
+    apt-get install --no-install-recommends -y libblas-dev libatlas-dev liblapack-dev && \
     # font, image for matplotlib
-    apt-get install -y libpng-dev libfreetype6-dev libxft-dev && \
+    apt-get install --no-install-recommends -y libpng-dev libfreetype6-dev libxft-dev && \
     # for tkinter
-    apt-get install -y python-tk libxml2-dev libxslt-dev zlib1g-dev && \
-    pip install numpy && \
-    pip install matplotlib
+    apt-get install --no-install-recommends -y python-tk libxml2-dev libxslt-dev zlib1g-dev && \
+    pip install --no-cache-dir numpy && \
+    pip install --no-cache-dir matplotlib && rm -rf /var/lib/apt/lists/*;
 
 RUN echo "$LOG_TAG Install R related packages" && \
     echo "deb http://cran.rstudio.com/bin/linux/ubuntu xenial/" | tee -a /etc/apt/sources.list && \
-    gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9 && \
-    gpg -a --export E084DAB9 | apt-key add - && \
+    gpg --batch --keyserver keyserver.ubuntu.com --recv-key E084DAB9 && \
+    gpg --batch -a --export E084DAB9 | apt-key add - && \
     apt-get -y update && \
-    apt-get -y install r-base r-base-dev && \
+    apt-get -y --no-install-recommends install r-base r-base-dev && \
     R -e "install.packages('knitr', repos='http://cran.us.r-project.org')" && \
     R -e "install.packages('ggplot2', repos='http://cran.us.r-project.org')" && \
     R -e "install.packages('googleVis', repos='http://cran.us.r-project.org')" && \
     R -e "install.packages('data.table', repos='http://cran.us.r-project.org')" && \
     # for devtools, Rcpp
-    apt-get -y install libcurl4-gnutls-dev libssl-dev && \
+    apt-get -y --no-install-recommends install libcurl4-gnutls-dev libssl-dev && \
     R -e "install.packages('devtools', repos='http://cran.us.r-project.org')" && \
     R -e "install.packages('Rcpp', repos='http://cran.us.r-project.org')" && \
-    Rscript -e "library('devtools'); library('Rcpp'); install_github('ramnathv/rCharts')"
+    Rscript -e "library('devtools'); library('Rcpp'); install_github('ramnathv/rCharts')" && rm -rf /var/lib/apt/lists/*;
 
 ENV SEARCH_STRING="<name>zeppelin.interpreters<\/name>"
 ENV INSERT_STRING="org.apache.zeppelin.interpreter.SnappyDataZeppelinInterpreter,org.apache.zeppelin.interpreter.SnappyDataSqlZeppelinInterpreter,"
@@ -98,7 +98,7 @@ ENV LEAD_HOST="localhost"
 ENV LEAD_PORT="3768"
 
 RUN echo "$LOG_TAG Download Zeppelin binary and install interpreter for snappydata" && \
-    wget -O /tmp/zeppelin-${Z_VERSION}-bin-all.tgz http://archive.apache.org/dist/zeppelin/zeppelin-${Z_VERSION}/zeppelin-${Z_VERSION}-bin-all.tgz && \
+    wget -O /tmp/zeppelin-${Z_VERSION}-bin-all.tgz https://archive.apache.org/dist/zeppelin/zeppelin-${Z_VERSION}/zeppelin-${Z_VERSION}-bin-all.tgz && \
     tar -zxvf /tmp/zeppelin-${Z_VERSION}-bin-all.tgz && \
     rm -rf /tmp/zeppelin-${Z_VERSION}-bin-all.tgz && \
     mv /zeppelin-${Z_VERSION}-bin-all ${Z_HOME} && \