{
  "startTime": 1674256188652,
  "endTime": 1674256190744,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 101
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# CLI container.\n#\n# All CLI operations performed in this container.\n#\n# @see https://hub.docker.com/r/uselagoon/php-7.4-cli-drupal/tags\n# @see https://github.com/uselagoon/lagoon-images/tree/main/images/php-cli-drupal\nFROM uselagoon/php-8.0-cli-drupal:22.4.1\n\n# Add missing variables.\n# @todo Remove once https://github.com/uselagoon/lagoon/issues/3121 is resolved.\nARG LAGOON_PR_HEAD_BRANCH=\"\"\nENV LAGOON_PR_HEAD_BRANCH=$LAGOON_PR_HEAD_BRANCH\nARG LAGOON_PR_HEAD_SHA=\"\"\nENV LAGOON_PR_HEAD_SHA=$LAGOON_PR_HEAD_SHA\n\n# Set default values for environment variables. Any values provided in\n# docker-compose.yml or .env file will override these values during build stage.\nENV WEBROOT=docroot \\\n    COMPOSER_ALLOW_SUPERUSER=1 \\\n    COMPOSER_CACHE_DIR=/tmp/.composer/cache \\\n    MYSQL_HOST=mariadb \\\n    SIMPLETEST_DB=mysql://drupal:drupal@mariadb/drupal \\\n    SIMPLETEST_BASE_URL=http://nginx:8080 \\\n    SYMFONY_DEPRECATIONS_HELPER=disabled\n\n# Strating from this line, Docker will add result of each command into a\n# separate layer. These layers are then cached, and re-used when project is\n# rebuilt.\n# Note that layers are rebuilt only if files added into image with `ADD`\n# have changed since the last build. So adding files that are most like to be\n# rarely changed earlier in the build process (closer to the start of this\n# file) adds more efficiency when working with stack - layers will be rarely\n# rebuilt.\n\n# Adding more tools.\nRUN apk add --no-cache pv~1.6\n\n# Adding patches and scripts.\nCOPY patches /app/patches\nCOPY scripts /app/scripts\n\n# Copy files required for PHP dependencies resolution.\n# Note that composer.lock is not explicitly copied, allowing to run the stack\n# without existing lock file (this is not advisable, but allows to build\n# using latest versions of packages). composer.lock should be comitted to the\n# repository.\n# File .env (and other environment files) is copied into image as it may be\n# required by composer scripts to get some additions variables.\nCOPY composer.json composer.* .env* auth* /app/\n\n# Install PHP dependencies, but without development dependencies. This is very\n# important, because we do not want potential security issues to be exposed to\n# production environment.\nRUN COMPOSER_MEMORY_LIMIT=-1 composer install -n --no-dev --ansi --prefer-dist --optimize-autoloader\n\n# Install NodeJS dependencies.\n# Note that package-lock.json is not explicitly copied, allowing to run the\n# stack without existing lock file (this is not advisable, but allows to build\n# using latest versions of packages). package-lock.json should be comitted to\n# the repository.\n# File Gruntfile.sj is copied into image as it is required to generate\n# front-end assets.\nCOPY docroot/themes/custom/your_site_theme/Gruntfile.js docroot/themes/custom/your_site_theme/.eslintrc.json docroot/themes/custom/your_site_theme/package.json docroot/themes/custom/your_site_theme/package* /app/docroot/themes/custom/your_site_theme/\nCOPY docroot/themes/custom/your_site_theme/patches /app/docroot/themes/custom/your_site_theme/patches\n\n# Install NodeJS dependencies.\n# Since Drupal does not use NodeJS for production, it does not matter if we\n# install development dependencnies here - they are not exposed in any way.\nRUN npm --prefix docroot/themes/custom/your_site_theme install --no-audit --no-progress --unsafe-perm && npm cache clean --force;\n\n# Copy all files into appllication source directory. Existing files are always\n# overridden.\nCOPY . /app\n\n# Compile front-end assets. Running this after copying all files as we need\n# sources to compile assets.\nWORKDIR /app/docroot/themes/custom/your_site_theme\nRUN npm run build\n\nWORKDIR /app\n"
}