{
  "startTime": 1674253769325,
  "endTime": 1674253770569,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 88
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:21.04\n\nRUN apt-get update -qq \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n        tini build-essential git \\\n        ccache cmake ninja-build llvm clang clang-format clang-tidy curl python3 \\\n        bison flex \\\n        brotli rsync \\\n        libpthread-stubs0-dev \\\n        libboost-all-dev \\\n        firefox \\\n        wget gnupg ca-certificates procps libxss1 \\\n        zip sqlite3 \\\n    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n    && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y google-chrome-stable \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/google.list\n\nARG EMSDK_VERSION=\"3.1.9\"\nRUN mkdir -p /opt/emsdk \\\n    && cd /opt/emsdk \\\n    && curl -f -SL https://github.com/emscripten-core/emsdk/archive/${EMSDK_VERSION}.tar.gz | tar -xz --strip-components=1 \\\n    && ./emsdk install ${EMSDK_VERSION} ccache-git-emscripten-64bit \\\n    && ./emsdk activate ${EMSDK_VERSION} ccache-git-emscripten-64bit \\\n    && /bin/bash ./emsdk_env.sh \\\n    && chmod a+x /opt/emsdk/ccache/git-emscripten_64bit/bin/ccache \\\n    && rm -rf ./emscripten/tag-*/tests \\\n    && rm -rf ./emscripten/tag-*/site \\\n    && rm -rf ./emscripten/tag-*/docs \\\n    && rm -rf ./zips \\\n    && find . -name \"*.o\" -exec rm {} \\; \\\n    && find . -name \"*.a\" -exec rm {} \\; \\\n    && find . -name \"*.tmp\" -exec rm {} \\;\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nARG UNAME=actions\nARG UID=1000\nARG GID=1000\nRUN groupadd -g ${GID} -o ${UNAME} \\\n    && useradd -m -g ${GID} -u ${UID} -s /bin/bash ${UNAME}\n\nENV NVM_DIR=/opt/nvm\nARG NVM_VERSION=\"v0.39.1\"\nARG NODE_VERSION=\"v17.6.0\"\nRUN mkdir -p /opt/nvm \\\n    && ls -lisah /opt/nvm \\\n    && curl -f https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash \\\n    && source ${NVM_DIR}/nvm.sh \\\n    && nvm install ${NODE_VERSION} \\\n    && nvm alias default ${NODE_VERSION} \\\n    && nvm use default \\\n    && npm install --global yarn \\\n    && chown -R ${UID}:${GID} /opt/nvm && npm cache clean --force;\n\nARG RUST_VERSION=\"1.60.0\"\nRUN export RUSTUP_HOME=/opt/rust \\\n    && export CARGO_HOME=/opt/rust \\\n    && curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain ${RUST_VERSION} -y \\\n    && export PATH=$PATH:/opt/rust/bin \\\n    && rustup target add wasm32-unknown-unknown \\\n    && chown -R ${UID}:${GID} /opt/rust\n\nRUN source /opt/emsdk/emsdk_env.sh \\\n    && echo \"export PATH=$PATH:/opt/rust/bin\" >> /opt/env.sh \\\n    && echo \"export EMSDK=$EMSDK\" >> /opt/env.sh \\\n    && echo \"export EM_CONFIG=$EM_CONFIG\" >> /opt/env.sh \\\n    && echo \"export EMSCRIPTEN=$EMSCRIPTEN\" >> /opt/env.sh \\\n    && echo \"export CARGO_HOME=/opt/rust\" >> /opt/env.sh \\\n    && echo \"export RUSTUP_HOME=/opt/rust\" >> /opt/env.sh \\\n    && echo \"export BOOST_ARCHIVE=/opt/boost.tar.gz\" >> /opt/env.sh \\\n    && echo \"source /opt/nvm/nvm.sh\" >> /opt/env.sh \\\n    && printf '#!/bin/bash\\nsource /opt/env.sh\\nexec env \"$@\"\\n' > /opt/entrypoint.sh \\\n    && chmod +x /opt/entrypoint.sh \\\n    && chown -R ${UID}:${GID} /opt/entrypoint.sh\n\nUSER ${UNAME}\n\nENTRYPOINT [\"tini\", \"-v\", \"--\", \"/opt/entrypoint.sh\"]\nWORKDIR /wd\n"
}