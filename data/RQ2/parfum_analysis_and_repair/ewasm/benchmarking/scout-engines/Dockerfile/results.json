{
  "startTime": 1674248412509,
  "endTime": 1674248414374,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 24,
        "columnEnd": 35
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 25,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 19,
        "columnEnd": 30
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 18,
        "columnEnd": 29
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 25,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 2,
        "columnEnd": 93
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ewasm/llvm-10:1 as build\n\nWORKDIR /engines\n\n# install google benchmark lib, needed for wabt-secp\nRUN git clone https://github.com/google/benchmark.git google-benchmark\n# commit 8e0b1913d4ea803dfeb2e55567208fcab6b1b6c7\nRUN git clone https://github.com/google/googletest.git google-benchmark/googletest\nRUN cd google-benchmark && mkdir build\n#RUN cd google-benchmark/build && cmake -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_LTO=true ../\n# we need BENCHMARK_USE_LIBCXX=true because we're going to use clang to compile wabt\nRUN cd google-benchmark/build && cmake -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_USE_LIBCXX=true ../\nRUN cd google-benchmark/build && make -j4\nRUN cd google-benchmark/build && make install\n\n\n\n# wabt branch for websnark-bn128 slowhost slowmont (no superops)\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-websnark-slowhost-slowmont https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-websnark-slowmont-slowhost\nRUN cd wabt-bn128-websnark-slowmont-slowhost && make clang-release -j4\n# could also use `make gcc-release`, but gcc is slower than clang\n\n# wabt branch for websnark-bn128 slowhost slowmont superops\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-websnark-slowhost-slowmont-superops https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-websnark-slowmont-slowhost-superops\nRUN cd wabt-bn128-websnark-slowmont-slowhost-superops && make clang-release -j4\n\n# wabt branch for websnark-bn128 fasthost slowmont superops\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-websnark-fasthost-slowmont-superops https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-websnark-slowmont-fasthost-superops\nRUN cd wabt-bn128-websnark-slowmont-fasthost-superops && make clang-release -j4\n\n# wabt branch for websnark-bn128 fasthost fastmont superops\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-websnark-fasthost-fastmont-superops https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-websnark-fastmont-fasthost-superops\nRUN cd wabt-bn128-websnark-fastmont-fasthost-superops && make clang-release -j4\n\n# wabt branch for websnark-bn128 fasthost fastmont (no superops)\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-websnark-fasthost-fastmont https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-websnark-fastmont-fasthost\nRUN cd wabt-bn128-websnark-fastmont-fasthost && make clang-release -j4\n\n\n# the branch scout-bignums-daiquiri-withdraw is the same as scout-bignum-hostfuncs, but with a hardcoded prestate returned by eth2_loadPrestateRoot().\n# the ecpairing-zkrollup-bn128 scout benchmark doesn't load the prestate, so this branch is compatible with that and with the daiquiri-withdraw benchmark\nRUN git clone --recursive --single-branch --branch scout-bignums-daiquiri-withdraw https://github.com/ewasm-benchmarking/wabt.git wabt-bn128\nRUN cd wabt-bn128 && make clang-release -j4\n\n\n# install wabt with bignum host fuctions for secp256k1 (no superops)\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-secp256k1 https://github.com/ewasm-benchmarking/wabt.git wabt-secp\nRUN cd wabt-secp && make clang-release -j4\n\n\n\n# install wabt branch with host functions for biturbo/turbo-token-realistic (this branch has superops, but is a bit messy)\nRUN git clone --recursive --single-branch --branch scout-for-biturbo-token https://github.com/ewasm-benchmarking/wabt.git wabt-biturbo\n\nRUN cd wabt-biturbo && make clang-release -j4\n\n# turbo-token wabt branch without superops\nRUN git clone --recursive --single-branch --branch scout-biturbo-no-superops https://github.com/ewasm-benchmarking/wabt.git wabt-biturbo-no-superops\nRUN cd wabt-biturbo-no-superops && make clang-release -j4\n\n\n# wabt branch for rollup.rs bignums slowmont slowhost\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-rolluprs-slowmont-slowhost https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-rolluprs-slowmont-slowhost\nRUN cd wabt-bn128-rolluprs-slowmont-slowhost && make clang-release -j4\n\n# wabt branch for rollup.rs bignums slowmont slowhost superops\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-rolluprs-slowmont-slowhost-superops https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-rolluprs-slowmont-slowhost-superops\nRUN cd wabt-bn128-rolluprs-slowmont-slowhost-superops && make clang-release -j4\n\n# wabt branch for rollup.rs with bignums slowmont fasthost superops\n# not much diff on rollup.rs, but show anyway\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-rolluprs-slowmont-fasthost-superops https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-rolluprs-slowmont-fasthost-superops\nRUN cd wabt-bn128-rolluprs-slowmont-fasthost-superops && make clang-release -j4\n\n# wabt branch for rollup.rs with bignum fastmont fasthost superops\n# not much diff on rollup.rs, but show anyway\nRUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-rolluprs-fastmont-fasthost-superops https://github.com/ewasm-benchmarking/wabt.git wabt-bn128-rolluprs-fastmont-fasthost-superops\nRUN cd wabt-bn128-rolluprs-fastmont-fasthost-superops && make clang-release -j4\n\n# only missing rollup.rs fastmont slowhost superops\n# wabt branch for rollup.rs bignums slowmont fasthost (no superops)\n# not much diff on rollup.rs, ignore\n#RUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-rolluprs-fastmont-fasthost https://github.com/ewasm/wabt.git wabt-bn128-rolluprs-fastmont-fasthost\n#RUN cd wabt-bn128-rolluprs-fastmont-fasthost && make clang-release -j4\n\n# wabt branch for rollup.rs bignums fastmont fasthost (no superops)\n# not much diff on rollup.rs, ignore\n#RUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-rolluprs-fastmont-fasthost https://github.com/ewasm/wabt.git wabt-bn128-rolluprs-fastmont-fasthost\n#RUN cd wabt-bn128-rolluprs-fastmont-fasthost && make clang-release -j4\n\n# wabt branch for rollup.rs bignum fastmont slowhost (no superops)\n# not much diff on rollup.rs, ignore\n#RUN git clone --recursive --single-branch --branch scout-bignum-hostfuncs-bn128-rolluprs-fastmont-slowhost https://github.com/ewasm/wabt.git wabt-bn128-rolluprs-fastmont-slowhost\n#RUN cd wabt-bn128-rolluprs-fastmont-slowhost && make clang-release -j4\n\n# wabt branch for wasmsnark bls12\nRUN git clone --recursive --single-branch --branch bls12-bignums-fastmont-superops https://github.com/ewasm/wabt.git wabt-bls12-fastmont-fasthost-superops\nRUN cd wabt-bls12-fastmont-fasthost-superops && make clang-release -j4\n\n# for the \"host func variations\" (i.e. using host funcs for [f1m_mul], [f1m_mul, f1m_add], [f1m_mul, f1m_add, f1m_sub], ...)\n# we need to use the no-superops wabt branch because there's a bug in superops triggered by the wasm code in one of {int_mul, int_sub, int_add, int_div} (I can't remember which)\nRUN git clone --recursive --single-branch --branch bls12-bignums-fasthost-fastmont-no-superops https://github.com/ewasm/wabt.git wabt-bls12-bignums-fasthost-fastmont-no-superops\nRUN cd wabt-bls12-bignums-fasthost-fastmont-no-superops && make clang-release -j4\n\n# Note: these scout.cpp branches are disabled because the wabt version scout.cpp is based on is slower than the wabt version used in the `github.com/ewasm/wabt` branches\n# We don't know why scout.cpp is slower than `github.com/ewasm/wabt`, in theory it should be the same speed.\n# scout.cpp is based on a later version of wabt (wabt-2020), `github.com/ewasm/wabt` is an older version (wabt-2018).\n# There might be a performance regression in later versions of wabt.\n\n# install scout.cpp branch with bignum host functions for bn128\n#RUN git clone --recursive --single-branch --branch bignum-host-funcs https://github.com/ewasm-benchmarking/scout_wabt.cpp.git scoutcpp-bn128\n# commit 7afd65dda637436151d69fb47d22034c2ecfea45 (fix interleaved)\n#RUN cd scoutcpp-bn128 && mkdir build && cd build && cmake -DBUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release .. && make -j4\n\n# install scout.cpp branch with bignum host functions for secp256k1\n#RUN git clone --recursive --single-branch --branch bignum-hostfuncs-secp256k1 https://github.com/ewasm-benchmarking/scout_wabt.cpp.git scoutcpp-secp\n#RUN cd scoutcpp-secp && mkdir build && cd build && cmake -DBUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release .. && make -j4\n\n# install scout.cpp branch for rollup.rs\n#RUN git clone --recursive --single-branch --branch bignum-hostfuncs-bn128-rolluprs https://github.com/ewasm-benchmarking/scout_wabt.cpp.git scoutcpp-bn128-rolluprs\n#RUN cd scoutcpp-bn128-rolluprs && mkdir build && cd build && cmake -DBUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release .. && make -j4\n\nWORKDIR /scoutyamls\n\n\n# install node 12\nRUN curl -fsSLO --compressed https://nodejs.org/download/release/v12.18.2/node-v12.18.2-linux-x64.tar.gz && \\\n  tar -xvf node-v12.18.2-linux-x64.tar.gz -C /usr/local/ --strip-components=1 --no-same-owner && rm node-v12.18.2-linux-x64.tar.gz\n\nENV PATH=\"/usr/local/bin:${PATH}\"\n\n# clone scout.ts branch with secp-sig-verify\nRUN git clone https://github.com/ewasm-benchmarking/scout.ts.git --single-branch --branch secp-sig-verify scout.ts-secp\nRUN cd scout.ts-secp && npm install && npm run build && npm cache clean --force;\n\n# clone scout.ts branch with bn128-pairing\nRUN git clone https://github.com/ewasm-benchmarking/scout.ts.git --single-branch --branch bn128-pairing scout.ts-bn128\nRUN cd scout.ts-bn128 && npm install && npm run build && npm cache clean --force;\n\n# clone daiquri branch\nRUN git clone https://github.com/ewasm-benchmarking/daiquiri.git --single-branch --branch scout-benchreport-withdraw daiquiri\nRUN cd daiquiri && npm install && npm run build && npm cache clean --force;\n\n# clone biturbo branch\nRUN git clone https://github.com/ewasm-benchmarking/biturbo.git --single-branch --branch scout-benchreport biturbo\nRUN cd biturbo && npm install && npm run build && npm cache clean --force;\nRUN cd biturbo && npm run token:relayer:realistic && npm run token:build\n\n# TODO: for the bls12 branch (and probably the other scout.ts branches), doing `npm run build` in the scout.ts dir\n# will build the scout.ts runner. In `scout.ts/assembly/bls12-pairing`, `npm run build` will build the wasm file.\n# Building the wasm file is currently fragile, and won't work if the right `asc` version isn't installed.\n# Need to investigate what the right `asc` version is, or fix so it builds on later asc versions.\n# For now, the wasm builds are pushed to the repo. The `npm run build` below only builds the scout.ts runner.\n\n# clone scout.ts branch with bls12\nRUN git clone https://github.com/ewasm/scout.ts.git --single-branch --branch bls12-bench-report scout.ts-bls12\nRUN cd scout.ts-bls12 && npm install && npm run build && npm cache clean --force;\n\n\n# clone c_ewasm_contracts (commit 29356a22ea38cf2f1bbab05a4b8974822834f4e7)\nRUN git clone https://github.com/ewasm-benchmarking/C_ewasm_contracts.git --single-branch --branch master C_ewasm_contracts\n# remove some tests we don't want\nRUN cd C_ewasm_contracts/tests && rm ecrecover.yaml ecrecover_trezor.yaml ed25519verify.yaml helloworld.yaml\n\n# clone rollup.rs native\nRUN git clone https://github.com/ewasm-benchmarking/rollup.rs --single-branch --branch benchreport-rust-native rollup-rs-native\nRUN cd rollup-rs-native && cargo build --release\n\n# clone rollup.rs scout no bignums\nRUN git clone https://github.com/ewasm-benchmarking/rollup.rs --single-branch --branch benchreport-scout-no-bignums rollup-rs-no-bignums\nRUN cd rollup-rs-no-bignums && cargo build --lib --release\nRUN cd /scoutyamls/scout.ts-bn128 && mkdir -p target/wasm32-unknown-unknown/release\nRUN cd /scoutyamls/scout.ts-bn128 && cp /scoutyamls/rollup-rs-no-bignums/target/wasm32-unknown-unknown/release/rollup_rs_wasm.wasm ./target/wasm32-unknown-unknown/release/rollup_rs_wasm.wasm\nRUN cp /scoutyamls/rollup-rs-no-bignums/rolluprs.yaml /scoutyamls/scout.ts-bn128/rolluprs.yaml\n\n# clone rollup.rs for scout with bignums\nRUN git clone https://github.com/ewasm-benchmarking/rollup.rs --single-branch --branch benchreport-scout-bignums rollup-rs-with-bignums\nRUN cd rollup-rs-with-bignums && cargo build --lib --release\n\nRUN rustup default nightly-2020-04-23\n\n# clone eip1962-bls12.rs native\nRUN git clone --single-branch --branch dev https://github.com/jwasinger/eip1962-bls12-381-bench.git eip1962-bls12-rs-native\nRUN cd eip1962-bls12-rs-native && git submodule update --init\nRUN cd eip1962-bls12-rs-native && cargo build --release\n\nWORKDIR /engines\n\n# install scout-wamr\nRUN git clone https://github.com/ewasm-benchmarking/scout_wamr.c -b bls12-test-cases && \\\n\tcd scout_wamr.c && \\\n\tgit submodule update --init && \\\n\tmkdir build && \\\n\tcd build && \\\n\tcmake .. && \\\n\tmake -j4\n\n# install fizzy\n\n# fizzy for bls12 using host funcs\nRUN git clone --single-branch --branch v0.3.0-ewasm-bench-bls12 https://github.com/ewasm-benchmarking/fizzy.git fizzy-bls12-hostfuncs && \\\n  cd fizzy-bls12-hostfuncs && \\\n  mkdir build && cd build && \\\n  cmake -DFIZZY_TESTING=ON .. && \\\n  make -j4\n\nWORKDIR /engines\n\nRUN cd fizzy-bls12-hostfuncs/build/bin && mkdir bls12-synth-loop && \\\n  echo -e \"synth\\nmain\\n:\\n\\n\\n\\n\" > bls12-synth-loop/main_with_websnark_bignum_hostfuncs.inputs && \\\n  mkdir bls12-pairing && mkdir bls12-pairing-nohostfuncs && \\\n  echo -e \"synth\\nmain\\n:\\n\\n\\n\\n\" > bls12-pairing/main_with_websnark_bignum_hostfuncs.inputs && \\\n  echo -e \"synth\\nmain\\n:\\n\\n\\n\\n\" > bls12-pairing-nohostfuncs/main_with_websnark.inputs\n\n# get non-scout/standalone builds of wasmsnark\nWORKDIR /scoutyamls\n\nRUN git clone https://github.com/ewasm/scout.ts.git --single-branch --branch f6m_mul_loop-standalone scout.ts-bls12-standalone-synth-loop\nRUN git clone https://github.com/ewasm/scout.ts.git --single-branch --branch bls12-bench-standalone scout.ts-bls12-standalone-pairing\n\n# copy wasm files to fizzy dir\nRUN cp /scoutyamls/scout.ts-bls12-standalone-synth-loop/assembly/bls12-pairing/out/main_with_websnark_bignum_hostfuncs.wasm /engines/fizzy-bls12-hostfuncs/build/bin/bls12-synth-loop && \\\n  cp /scoutyamls/scout.ts-bls12-standalone-pairing/assembly/bls12-pairing/out/main_with_websnark_bignum_hostfuncs.wasm /engines/fizzy-bls12-hostfuncs/build/bin/bls12-pairing && \\\n  cp /scoutyamls/scout.ts-bls12-standalone-pairing/assembly/bls12-pairing/out/main_with_websnark.wasm /engines/fizzy-bls12-hostfuncs/build/bin/bls12-pairing-nohostfuncs\n\n# copy the python script to run the benchmarks\nRUN mkdir /benchscript\n\n# benchmark_results_data should be a mounted volume\nRUN mkdir -p /benchmark_results_data\n\n## pandas needed for nanodurationpy (for the benchmarking script)\nRUN pip3 install --no-cache-dir pandas\n\nWORKDIR /benchscript\n\nCMD /bin/bash\n"
}