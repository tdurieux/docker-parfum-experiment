{
  "startTime": 1674220905201,
  "endTime": 1674220906198,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# build stage: fetch bower dependencies\nFROM node AS bower\n\nWORKDIR /dvizz\n\n# Copy only needed frontend files instead of everything\nADD .bowerrc /dvizz\nADD bower.json /dvizz\nADD static/* /dvizz/static/\n\nRUN npm install -g bower && bower --allow-root install && npm cache clean --force;\n\n\n# build stage: dvizz golang binary\nFROM golang:1.12.0-stretch AS build_base\n\nENV GO111MODULE=on \\\n\tCGO_ENABLED=1 \\\n\tGOOS=linux \\\n\tGOARCH=amd64\n\nWORKDIR /go/src/github.com/eriklupander/dvizz\n\n# allows docker to cache go modules based on these layers remaining unchanged.\nCOPY go.mod .\nCOPY go.sum .\n\nRUN go mod download\n\nCOPY . .\n\nRUN\tgo build -a \\\n\t-o bin/dvizz $PWD/cmd/dvizz\n\n# final image\nFROM alpine:latest\n\nEXPOSE 6969\n\nWORKDIR /app\n\n# Copy frontend code\nADD static/ static/\n\n# Copy binary from build_base image\nCOPY --from=build_base /go/src/github.com/eriklupander/dvizz/bin/* /app\n\n# Copy frontend/js dependencies from bower build image\nCOPY --from=bower /dvizz/static/js static/js\n\n# Support static build docker binary\nRUN mkdir /lib64 \\\n&& ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2\n\n# Not sure why I have to chmod/chown\nRUN chmod +x /app/dvizz\nRUN chmod 777 /app/dvizz\n\nCMD [\"./dvizz\"]\n"
}