{
  "startTime": 1674249411957,
  "endTime": 1674249412680,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# DEPLOYMENT INSTRUCTIONS\n\n# To build the image, refer:\n# docker build -t sarjitsu_api .\n\n# To run using the container, refer the following command:\n# docker run --privileged -it -d --name api_jitsu -v /sys/fs/cgroup:/sys/fs/cgroup:ro  sarjitsu_api\n###########################################################\n\nFROM fedora:25\nMAINTAINER arcolife <archit.py@gmail.com>\n\nRUN dnf -y install initscripts nss_wrapper gettext\n# needed for psycopg2 postgres library\nRUN dnf -y install python3-pip postgresql-devel gcc redhat-rpm-config python3-devel\nCOPY conf/requirements.txt /root/requirements.txt\nRUN pip3 install --no-cache-dir -r /root/requirements.txt\n\nADD scripts/ /scripts\nADD api_server/ /opt/api_server\n\nCOPY conf/sar-index.cfg.example /opt/api_server/sar-index.cfg\nCOPY conf/passwd.template /${HOME}/passwd.template\n\nARG ES_HOST\nENV ES_HOST=${ES_HOST}\nARG ES_PORT\nENV ES_PORT=${ES_PORT}\nARG ES_PROTOCOL\nENV ES_PROTOCOL=${ES_PROTOCOL}\nARG INDEX_PREFIX\nENV INDEX_PREFIX=${INDEX_PREFIX}\nARG BULK_ACTION_COUNT\nENV BULK_ACTION_COUNT=${BULK_ACTION_COUNT}\nARG INDEX_VERSION\nENV INDEX_VERSION=${INDEX_VERSION}\nARG SHARD_COUNT\nENV SHARD_COUNT=${SHARD_COUNT}\nARG REPLICAS_COUNT\nENV REPLICAS_COUNT=${REPLICAS_COUNT}\nARG GRAFANA_DS_NAME\nENV GRAFANA_DS_NAME=${GRAFANA_DS_NAME}\nARG GRAFANA_DS_PATTERN\nENV GRAFANA_DS_PATTERN=${GRAFANA_DS_PATTERN}\nARG GRAFANA_TIMEFIELD\nENV GRAFANA_TIMEFIELD=${GRAFANA_TIMEFIELD}\nARG DB_HOST\nENV DB_HOST=${DB_HOST}\nARG DB_NAME\nENV DB_NAME=${DB_NAME}\nARG DB_USER\nENV DB_USER=${DB_USER}\nARG DB_PASSWORD\nENV DB_PASSWORD=${DB_PASSWORD}\nARG DB_PORT\nENV DB_PORT=${DB_PORT}\nARG MIDDLEWARE_PORT\nENV MIDDLEWARE_PORT=${MIDDLEWARE_PORT}\n\n# expose ports for api server\n# EXPOSE $MIDDLEWARE_PORT}\nEXPOSE ${MIDDLEWARE_PORT}\n\nRUN useradd -ms /bin/bash flask\n\nRUN chgrp -R 0 /scripts /opt/api_server \\\n  && chmod -R g+rwX /scripts /opt/api_server \\\n  && chown -R flask:root /scripts /opt/api_server\n\nCOPY docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nUSER flask\n\nCMD [\"api_engine\"]\n"
}