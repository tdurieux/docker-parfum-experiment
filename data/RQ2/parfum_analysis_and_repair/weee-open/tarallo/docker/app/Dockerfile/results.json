{
  "startTime": 1674253410991,
  "endTime": 1674253411849,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 11,
        "columnEnd": 136
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 59
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:8.0-fpm\n\nARG XDEBUG\nARG PROFILER\nARG DEVELOPMENT\n\n# Expose the arguments as environment variables, in case their value might be useful inside the container\nENV XDEBUG=${XDEBUG}\nENV PROFILER=${PROFILER}\nENV DEVELOPMENT=${DEVELOPMENT}\n\nRUN apt-get update && apt-get install --no-install-recommends -y git unzip iproute2 && docker-php-ext-install pdo_mysql && rm -rf /var/lib/apt/lists/*;\n\n# Create server root directory and enter it\nRUN mkdir -p /var/www/html\nWORKDIR /var/www/html\n\n# Download and install Adminer. Also substitute default server host from \"localhost\" to \"db\" for convenience\nRUN if [ \"$DEVELOPMENT\" = \"true\" ]; then \\\n        mkdir -p /var/www/html/admin \\\n        && curl -f -o /var/www/html/admin/index.php -L https://github.com/vrana/adminer/releases/download/v4.8.1/adminer-4.8.1-mysql-en.php \\\n        && sed -i \"s#'\\.h(SERVER)\\.'\\\" title#db\\\" title#g\" /var/www/html/admin/index.php; \\\n    fi\n\n# Create mountpoints\nRUN mkdir ./sql ./bin ./public ./src ./tests\n\nCOPY config/config-docker.php ./config/config.php\nCOPY ./composer.json ./composer.json\nCOPY ./composer.lock ./composer.lock\nCOPY ./phpcs.xml ./phpcs.xml\n\n# install composer\nRUN php -r \"readfile('http://getcomposer.org/installer');\" | php -- --install-dir=/usr/bin/ --filename=composer\n\n# Install dependencies. Also install development dependencies if not in production\nRUN if [ \"$DEVELOPMENT\" = \"true\" ]; \\\n        then composer install; \\\n        else composer install --no-dev; \\\n    fi\n\n# install xdebug\n# https://stackoverflow.com/questions/49907308/installing-xdebug-in-docker\nRUN if [ \"$DEVELOPMENT\" = \"true\" -a \"$XDEBUG\" = \"true\" ]; \\\n        then yes | pecl install xdebug \\\n        && echo \"zend_extension=$(find /usr/local/lib/php/extensions/ -name xdebug.so)\" > /usr/local/etc/php/conf.d/xdebug.ini \\\n        && echo \"xdebug.client_host=$(/sbin/ip route|awk '/default/ { print $3 }')\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n        && echo 'xdebug.discover_client_host=true' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n        && echo 'xdebug.start_with_request=trigger' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n        && echo 'xdebug.output_dir=\"/xdebug\"' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n        && echo 'xdebug.profiler_output_name = \"cachegrind_%H_%t.out\"' >> /usr/local/etc/php/conf.d/xdebug.ini; \\\n    fi\n\n# Conditionally enable the profiler\nRUN if [ \"$DEVELOPMENT\" = \"true\" -a \"$XDEBUG\" = \"true\" -a \"$PROFILER\" = \"true\" ]; \\\n        then mkdir /xdebug && echo 'xdebug.mode=debug,profile' >> /usr/local/etc/php/conf.d/xdebug.ini; \\\n        else echo 'xdebug.mode=debug' >> /usr/local/etc/php/conf.d/xdebug.ini; \\\n    fi\n"
}