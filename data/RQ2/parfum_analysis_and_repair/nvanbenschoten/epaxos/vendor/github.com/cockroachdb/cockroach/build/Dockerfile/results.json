{
  "startTime": 1674215512308,
  "endTime": 1674215513475,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 37,
        "columnEnd": 100
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 37,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 37,
        "columnEnd": 105
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 67,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:xenial-20170214\n\nMAINTAINER Tamir Duberstein <tamird@gmail.com>\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fsSL -O https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb \\\n && dpkg -i dumb-init_1.2.0_amd64.deb && rm dumb-init_1.2.0_amd64.deb\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_6.x xenial main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list\n\n# autoconf - crosstool-ng/bootstrap\n# bison - crosstool-ng/configure\n# bzip2 - crosstool-ng/configure\n# clang - msan: -fsanitize\n# cmake - msan: libcxx\n# file - crosstool-ng/build\n# flex - crosstool-ng/configure\n# g++ - crosstool-ng/build\n# gawk - crosstool-ng/configure\n# git - crosstool-ng/configure\n# golang - go: bootstrap\n# gperf - crosstool-ng/configure\n# help2man - crosstool-ng/configure\n# iptables - acceptance tests' partition nemesis\n# libncurses-dev - crosstool-ng/configure\n# make - crosstool-ng boostrap / CRDB build system\n# nodejs - ui: all\n# openssh-client - terraform / jepsen\n# patch - crosstool-ng/configure\n# python - msan: libcxx\n# texinfo - crosstool-ng/configure\n# unzip - terraform\n# xz-utils - msan: libcxx / CRDB build system\n# yarn - ui: all\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    autoconf \\\n    bison \\\n    bzip2 \\\n    clang \\\n    cmake \\\n    file \\\n    flex \\\n    g++ \\\n    gawk \\\n    git \\\n    golang \\\n    gperf \\\n    help2man \\\n    iptables \\\n    libncurses-dev \\\n    make \\\n    nodejs \\\n    openssh-client \\\n    patch \\\n    python \\\n    texinfo \\\n    unzip \\\n    xz-utils \\\n    yarn && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir crosstool-ng \\\n && curl -fsSL https://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \\\n && cd crosstool-ng \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix /usr/local/ct-ng \\\n && make -j$(nproc) \\\n && make install \\\n && cp ct-ng.comp /etc/bash_completion.d/ \\\n && cd .. \\\n && rm -rf crosstool-ng\n\nCOPY x86_64-unknown-linux-gnu.defconfig x86_64-unknown-linux-musl.defconfig x86_64-w64-mingw.defconfig ./\nRUN mkdir build src && cd build \\\n && rm -rf * && DEFCONFIG=../x86_64-unknown-linux-gnu.defconfig  /usr/local/ct-ng/bin/ct-ng defconfig && /usr/local/ct-ng/bin/ct-ng build \\\n && rm -rf * && DEFCONFIG=../x86_64-unknown-linux-musl.defconfig /usr/local/ct-ng/bin/ct-ng defconfig && /usr/local/ct-ng/bin/ct-ng build \\\n && rm -rf * && DEFCONFIG=../x86_64-w64-mingw.defconfig          /usr/local/ct-ng/bin/ct-ng defconfig && /usr/local/ct-ng/bin/ct-ng build \\\n && cd .. \\\n && rm -rf build src\n\nRUN apt-get autoremove -y gcc g++\n\n# Build an msan-enabled build of libc++, following instructions from\n# https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo\nRUN mkdir llvm && curl -sfSL https://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \\\n && mkdir llvm/projects/libcxx && curl -sfSL https://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \\\n && mkdir llvm/projects/libcxxabi && curl -sfSL https://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \\\n && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \\\n && mkdir libcxx_msan && (cd libcxx_msan && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory && make cxx -j$(nproc))\n\nRUN git clone --depth 1 https://github.com/tpoechtrager/osxcross.git \\\n && (cd osxcross/tarballs && curl -sfSL https://s3.amazonaws.com/andrew-osx-sdks/MacOSX10.9.sdk.tar.xz -O) \\\n && OSX_VERSION_MIN=10.9 PORTABLE=1 UNATTENDED=1 osxcross/build.sh \\\n && mv osxcross/target /x-tools/x86_64-apple-darwin13 \\\n && rm -rf osxcross\n\n# BEGIN https://github.com/docker-library/golang/blob/master/1.8/alpine/Dockerfile\n\nCOPY parallelbuilds-go1.8.patch /\nRUN curl -fsSL https://storage.googleapis.com/golang/go1.8.3.src.tar.gz -o golang.tar.gz \\\n && echo '5f5dea2447e7dcfdc50fa6b94c512e58bfba5673c039259fd843f68829d99fa6  golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && patch -p2 -i /parallelbuilds-go1.8.patch \\\n && GOROOT_BOOTSTRAP=$(go env GOROOT) CC=clang CXX=clang++ ./make.bash \\\n && rm -rf /*.patch \\\n && apt-get autoremove -y golang\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n\n# END https://github.com/docker-library/golang/blob/master/1.8/alpine/Dockerfile\n\nRUN chmod -R a+w $(go env GOTOOLDIR)\n\n# Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $(go env GOROOT)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\n\nRUN curl -fsSL https://releases.hashicorp.com/terraform/0.8.7/terraform_0.8.7_linux_amd64.zip -o terraform.zip \\\n && unzip -d /usr/local/bin terraform.zip \\\n && rm terraform.zip\n\nENV PATH /opt/backtrace/bin:$PATH\n"
}