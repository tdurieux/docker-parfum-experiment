{
  "startTime": 1674219429605,
  "endTime": 1674219430706,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 23,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# sha256 as of 2021-07-22\nFROM node:14-alpine@sha256:5c33bc6f021453ae2e393e6e20650a4df0a4737b1882d389f17069dc1933fdc5 AS node-assets\n\n# Install npm, making output less verbose\nARG NPM_VER=6.14.11\nENV NPM_CONFIG_LOGLEVEL warn\nRUN npm install npm@${NPM_VER} -g && npm cache clean --force;\n\n# Oddly, node-sass requires both python and make to build bindings\nRUN apk add --no-cache paxctl python make g++\nRUN paxctl -cm /usr/local/bin/node\n\n# Install gulp globally so it can be used during builds\nRUN npm install --global gulp-cli && npm cache clean --force;\n\nCOPY ./ /src-files\nRUN cd /src-files && ( npm install && npm run build ) && npm cache clean --force;\n\n\nLABEL MAINTAINER=\"Freedom of the Press Foundation\"\nLABEL APP=\"securedrop.org\"\n\n# sha256 as of 2021-05-10 for 3.9-slim-buster\nFROM python@sha256:655f71f243ee31eea6774e0b923b990cd400a0689eff049facd2703e57892447\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl \\\n    gcc \\\n    build-essential \\\n    git \\\n    libffi-dev \\\n    libssl-dev \\\n    libpq-dev \\\n    libxml2-dev \\\n    libxslt-dev \\\n    libz-dev \\\n    netcat \\\n    python3-dev \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n\nCOPY devops/docker/django-start.sh /usr/local/bin\nRUN  chmod +x /usr/local/bin/django-start.sh\n\nARG USERID\nRUN getent passwd \"${USERID?USERID must be supplied}\" || adduser --uid \"${USERID}\" --disabled-password --gecos \"\" gcorn\n\nCOPY --from=node-assets /src-files/ /django/\n# Unfortunately the chown flag in COPY is not\n# available in my docker system version :(\nRUN find /django -path /django/node_modules -prune -o -print -exec chown gcorn: '{}' \\;\n\nWORKDIR /django\nRUN pip install --no-cache-dir --require-hashes -r /django/requirements.txt\n\n\n# Really not used in production. Needed for mapped named volume\n# permission handling https://github.com/docker/compose/issues/3270\nRUN  mkdir /django-media /django-static /django-logs && \\\n    chown -R gcorn: /django-media && \\\n    chown -R gcorn: /django-static && \\\n    chown -R gcorn: /django-logs\n\nRUN mkdir -p /etc/gunicorn && chown -R gcorn: /etc/gunicorn\nCOPY devops/docker/gunicorn/gunicorn.py /etc/gunicorn/gunicorn.py\n\nRUN mkdir /deploy && \\\n    chown -R gcorn: /deploy && \\\n    /django/devops/scripts/version-file.sh\n\nEXPOSE 8000\nUSER ${USERID}\n# since no django env is specified, runs in dev; disable DEBUG\nRUN env DJANGO_DISABLE_DEBUG=1 ./manage.py collectstatic -c --noinput\nCMD django-start.sh\n"
}