{
  "startTime": 1674248942726,
  "endTime": 1674248943813,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 18,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 128
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 6,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 6,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ubuntu 20.04 image from 2021-09-21\nFROM ubuntu@sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761\nARG USER_NAME\nENV USER_NAME ${USER_NAME:-root}\nARG USER_ID\nENV USER_ID ${USER_ID:-0}\n\n# If running grsecurity kernel on the host, Memprotect must be disabled on mono-sgen in the container\nRUN apt-get update && apt-get install --no-install-recommends -y paxctl && \\\n    { \\\n     apt-get install --no-install-recommends -y libgtk2.0 || echo 'libgtk2.0 was not installed'; \\\n   } && \\\n    paxctl -cm /usr/bin/mono-sgen && dpkg-reconfigure mono-runtime-sgen && \\\n    apt-get install --no-install-recommends -y apache2-dev coreutils devscripts vim \\\n                       python3-pip python3-all python3-venv virtualenv libpython3.8-dev libssl-dev \\\n                       gnupg2 ruby redis-server git xvfb curl wget \\\n                       x11vnc enchant libffi-dev sqlite3 gettext sudo \\\n\n\n\n                       default-jdk \\\n                       libasound2 libdbus-glib-1-2 libgtk2.0-0 libfontconfig1 libxrender1 \\\n                       libcairo-gobject2 libgtk-3-0 libstartup-notification0 tor basez && rm -rf /var/lib/apt/lists/*;\n\nRUN gem install sass -v 3.4.23\n\n# Current versions of the test browser software. Tor Browser is based\n# on a specific version of Firefox, noted in Help > About Tor Browser.\n# Ideally we'll keep those in sync.\nENV FF_VERSION 91.5.0esr\nENV GECKODRIVER_VERSION v0.29.1\n\n# Import Tor release signing key\nENV TOR_RELEASE_KEY_FINGERPRINT \"EF6E286DDA85EA2A4BA7DE684E2C6E8793298290\"\nRUN curl -f -s https://openpgpkey.torproject.org/.well-known/openpgpkey/torproject.org/hu/kounek7zrdx745qydx6p59t9mqjpuhdf | gpg2 --import -\n\n# Fetch latest TBB version (obtained from https://github.com/micahflee/torbrowser-launcher/blob/develop/torbrowser_launcher/common.py#L198) and install Tor Browser\nRUN TBB_VERSION=$( curl -f -s https://aus1.torproject.org/torbrowser/update_3/release/Linux_x86_64-gcc3/x/en-US | grep -oP 'appVersion=\"\\K[^\"]*' | head -1) && \\\n    wget https://www.torproject.org/dist/torbrowser/${TBB_VERSION}/tor-browser-linux64-${TBB_VERSION}_en-US.tar.xz && \\\n    wget https://www.torproject.org/dist/torbrowser/${TBB_VERSION}/tor-browser-linux64-${TBB_VERSION}_en-US.tar.xz.asc && \\\n    gpg2 --verify tor-browser-linux64-${TBB_VERSION}_en-US.tar.xz.asc 2>&1 | grep \"Primary key fingerprint:\" | sed -e 's/Primary key fingerprint: //' -e 's/ //g' | tail -1 | grep -qE \"${TOR_RELEASE_KEY_FINGERPRINT}\" && \\\n    tar -xvJf tor-browser-linux64-${TBB_VERSION}_en-US.tar.xz && \\\n    mkdir -p /root/.local/tbb && mv tor-browser_en-US /root/.local/tbb && \\\n    paxctl -cm /root/.local/tbb/tor-browser_en-US/Browser/firefox.real && \\\n    paxctl -cm /root/.local/tbb/tor-browser_en-US/Browser/libnspr4.so && \\\n    paxctl -cm /root/.local/tbb/tor-browser_en-US/Browser/plugin-container && rm tor-browser-linux64-${TBB_VERSION}_en-US.tar.xz\n\n# Import Mozilla release signing key\nENV MOZILLA_RELEASE_KEY_FINGERPRINT \"14F26682D0916CDD81E37B6D61B7B526D98F0353\"\nRUN curl -f -s https://archive.mozilla.org/pub/firefox/releases/${FF_VERSION}/KEY | gpg2 --import -\n\n# Install the version of Firefox on which Tor Browser is based\nRUN curl -f -LO https://archive.mozilla.org/pub/firefox/releases/${FF_VERSION}/linux-x86_64/en-US/firefox-${FF_VERSION}.tar.bz2 && \\\n    curl -f -LO https://archive.mozilla.org/pub/firefox/releases/${FF_VERSION}/linux-x86_64/en-US/firefox-${FF_VERSION}.tar.bz2.asc && \\\n    gpg2 --verify firefox-${FF_VERSION}.tar.bz2.asc 2>&1 | grep \"Primary key fingerprint:\" | sed -e 's/Primary key fingerprint: //' -e 's/ //g' | tail -1 | grep -qE \"${MOZILLA_RELEASE_KEY_FINGERPRINT}\" && \\\n    tar xjf firefox-*.tar.bz2 && \\\n    mv firefox /usr/bin && \\\n    paxctl -cm /usr/bin/firefox/firefox && rm firefox-*.tar.bz2\n\n# Install geckodriver\nRUN wget https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz && \\\n    wget https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz.asc && \\\n    gpg2 --verify geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz.asc && \\\n    tar -zxvf geckodriver*tar.gz && chmod +x geckodriver && mv geckodriver /bin && \\\n    paxctl -cm /bin/geckodriver && rm geckodriver*tar.gz\n\nCOPY requirements requirements\nRUN python3 -m venv /opt/venvs/securedrop-app-code && \\\n    /opt/venvs/securedrop-app-code/bin/pip3 install --no-deps --require-hashes -r requirements/python3/docker-requirements.txt && \\\n    /opt/venvs/securedrop-app-code/bin/pip3 install --no-deps --require-hashes -r requirements/python3/test-requirements.txt && \\\n    /opt/venvs/securedrop-app-code/bin/pip3 install --no-deps --require-hashes -r requirements/python3/securedrop-app-code-requirements.txt\n\nRUN if test $USER_NAME != root ; then useradd --no-create-home --home-dir /tmp --uid $USER_ID $USER_NAME && echo \"$USER_NAME ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers ; fi && \\\n    cp -r /root/.local /tmp/ && chmod +x /tmp/.local/tbb/tor-browser_en-US/Browser/firefox && chmod -R 777 /tmp/.local && \\\n    chown -R $USER_NAME.$USER_NAME /tmp/.local/ && \\\n    chown -R $USER_NAME.$USER_NAME /opt/venvs/securedrop-app-code/\n\nSTOPSIGNAL SIGKILL\n\nEXPOSE 8080 8081 5909\n"
}