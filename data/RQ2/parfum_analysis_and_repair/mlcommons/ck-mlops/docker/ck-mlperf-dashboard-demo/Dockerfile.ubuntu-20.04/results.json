{
  "startTime": 1674221157124,
  "endTime": 1674221158633,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Adaptive container with the CK interface\n# Concept: https://arxiv.org/abs/2011.01149\n\nFROM ubuntu:20.04\n\n# Contact\nLABEL maintainer=\"Grigori Fursin <grigori@octoml.ai>\"\n\n# Shell info\nSHELL [\"/bin/bash\", \"-c\"]\n#ENTRYPOINT [\"/bin/bash\", \"-c\"]\n\n# Set noninteractive mode for apt (do not use ENV)\nARG DEBIAN_FRONTEND=noninteractive\n\n# Notes: https://runnable.com/blog/9-common-dockerfile-mistakes\n# Install system dependencies\nRUN apt update && \\\n    apt install -y --no-install-recommends \\\n           apt-utils \\\n           git wget zip bzip2 libz-dev libbz2-dev cmake curl unzip \\\n           openssh-client vim mc tree \\\n           gcc g++ autoconf autogen libtool make libc6-dev build-essential \\\n           libssl-dev libbz2-dev libffi-dev \\\n           python3 python3-pip python3-dev \\\n           daemonize\\\n           sudo && rm -rf /var/lib/apt/lists/*;\n\n# Prepare a user with a user group with a random id\nRUN groupadd -g 1111 ckuser\nRUN useradd -u 2222 -g ckuser --create-home --shell /bin/bash ckuser\nRUN echo \"ckuser:ckuser\" | chpasswd\nRUN adduser ckuser sudo\nRUN echo \"ckuser   ALL=(ALL)  NOPASSWD:ALL\" >> /etc/sudoers\n\n# Set user\nUSER ckuser:ckuser\nWORKDIR /home/ckuser\nENV PATH=\"/home/ckuser/.local/bin:${PATH}\"\nRUN mkdir .ssh\n\n# Install CK\nRUN export DUMMY_CK=C\nRUN ${DUMMY_CK} pip3 install virtualenv\nRUN ${DUMMY_CK} pip3 install ck\n\n# Install pandas for the CK dashboard\nRUN python3 -m pip install pandas --user\n\n# Clone CK repo\nRUN ck pull repo:mlcommons@ck-mlops\n\n# Install packages to CK env entries\nRUN ck setup kernel --var.install_to_env=yes\n\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\nRUN ck detect soft:compiler.python --full_path=/usr/bin/python3\n\nRUN ck detect soft:compiler.gcc --full_path=`which gcc`\n\nRUN ck install package --tags=tool,cmake,prebuilt --quiet\n\nRUN ck install package --tags=lib,python-package,absl\nRUN ck install package --tags=lib,python-package,numpy\nRUN ck install package --tags=lib,python-package,scipy\nRUN ck install package --tags=lib,python-package,matplotlib\nRUN ck install package --tags=lib,python-package,cython\nRUN ck install package --tags=lib,python-package,pillow\nRUN ck install package --tags=lib,python-package,opencv-python-headless\n\n#RUN ck install package --tags=lib,tflite,via-cmake,v2.4.1,with.ruy\n\n# Install TFLite.\nRUN ck install package --tags=lib,tensorflow-lite,tensorflow-static,v1.13.1 --quiet\n\n# Download and preprocess the first 500 images of the ImageNet 2012 validation dataset.\nRUN ck install package --tags=dataset,imagenet,aux,from.berkeley\nRUN ck install package --tags=dataset,imagenet,val,original,min --no_tags=resized\nRUN ck install package --tags=dataset,imagenet,val,preprocessed,using-pillow,side.224\n\n# Create a repository for benchmarking results.\n# Can't easily change this repo since it's hardwired in module:mlperf* ...\nRUN ck create repo:mlperf-mobilenets --quiet\n\n# Reused from docker:image-classification-tflite.dashboard.ubuntu-18.04\n\n# Download the MobileNet TF/TFLite models (non-quantized and quantized).\n# https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-mobilenet-models-for-tflite\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,non-quantized,from-zenodo\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,quantized,from-google\n\n# Benchmark the performance of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 \\\n--dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-performance \\\n--tags=mlperf,image-classification,mobilenet,non-quantized,tflite,performance \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Benchmark the accuracy of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 \\\n--dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-accuracy \\\n--tags=mlperf,image-classification,mobilenet,non-quantized,tflite,accuracy \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Benchmark the performance of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 \\\n--dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-performance \\\n--tags=mlperf,image-classification,mobilenet,quantized,tflite,performance \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Benchmark the accuracy of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 \\\n--dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-accuracy \\\n--tags=mlperf,image-classification,mobilenet,quantized,tflite,accuracy \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Download the ResNet TFLite models (with and without the ArgMax operator).\n# https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-resnet-model\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,with-argmax\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,no-argmax\n\n# Benchmark the performance of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 \\\n--dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-performance \\\n--tags=mlperf,image-classification,resnet,with-argmax,tflite,performance \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Benchmark the accuracy of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 \\\n--dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-accuracy \\\n--tags=mlperf,image-classification,resnet,with-argmax,tflite,accuracy \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Benchmark the performance of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 \\\n--dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-performance \\\n--tags=mlperf,image-classification,resnet,no-argmax,tflite,performance \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Benchmark the accuracy of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 \\\n--dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-accuracy \\\n--tags=mlperf,image-classification,resnet,no-argmax,tflite,accuracy \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# This command spawns the server in the background (daemon) mode, while\n# also brings up an interactive shell in the same container.\nCMD echo -e \"You can now point your browser to: http://localhost:3355/?template=dashboard&scenario=mlperf.mobilenets\"\\\n && daemonize -o ${HOME}/ck_server.out -e ${HOME}/ck_server.err\\\n `which ck` display dashboard --scenario=mlperf.mobilenets\\\n --host=0.0.0.0 --wfe_host=localhost --wfe_port=3355\\\n && /bin/bash\n"
}