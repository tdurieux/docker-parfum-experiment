diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mlcommons/ck-mlops/docker/mlperf-inference-speech-recognition-rnnt/Dockerfile.ubuntu-16.04 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mlcommons/ck-mlops/docker/mlperf-inference-speech-recognition-rnnt/Dockerfile.ubuntu-16.04/repaired.Dockerfile
index de4b191..76fa2e5 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/mlcommons/ck-mlops/docker/mlperf-inference-speech-recognition-rnnt/Dockerfile.ubuntu-16.04
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/mlcommons/ck-mlops/docker/mlperf-inference-speech-recognition-rnnt/Dockerfile.ubuntu-16.04/repaired.Dockerfile
@@ -16,18 +16,18 @@ ENTRYPOINT ["/bin/bash", "-c"]
 # Python needs: ssl, bz2, lzma.
 # Speech Recognition program needs: sndfile (which in turn needs ffi).
 # librosa needs: scipy (which in turn needs gfortran, lapack, blas).
-ENV DEBIAN_FRONTEND="noninteractive" 
-RUN apt update -y\
- && apt install -y apt-utils\
- && apt upgrade -y\
- && apt install -y\
- gcc g++\
- make patch vim\
- git wget zip libz-dev\
- libssl-dev libbz2-dev liblzma-dev\
- libsndfile1-dev libffi-dev\
- gfortran libblas-dev liblapack-dev\
- && apt clean
+ENV DEBIAN_FRONTEND="noninteractive"
+RUN apt update -y \
+ && apt install --no-install-recommends -y apt-utils \
+ && apt upgrade -y \
+ && apt install --no-install-recommends -y \
+ gcc g++ \
+ make patch vim \
+ git wget zip libz-dev \
+ libssl-dev libbz2-dev liblzma-dev \
+ libsndfile1-dev libffi-dev \
+ gfortran libblas-dev liblapack-dev \
+ && apt clean && rm -rf /var/lib/apt/lists/*;
 
 # Install Python 3.7. (If upgrading to 3.8 or higher, also change CK_PYTHON below.)
 ENV PYTHON_VERSION=3.7.8
@@ -35,7 +35,7 @@ RUN cd /usr/src \
  && wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \
  && tar xzf Python-${PYTHON_VERSION}.tgz \
  && rm Python-${PYTHON_VERSION}.tgz \
- && cd /usr/src/Python-${PYTHON_VERSION} && ./configure --enable-optimizations && make altinstall \
+ && cd /usr/src/Python-${PYTHON_VERSION} && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-optimizations && make altinstall \
  && rm -rf /usr/src/Python-${PYTHON_VERSION}*
 
 # Create non-root user.
@@ -54,7 +54,7 @@ ENV CK_REPOS=/home/dvdt/CK_REPOS \
 RUN mkdir -p ${CK_REPOS} ${CK_TOOLS}
 
 # Install CK (CK automation f49f20744aba90e2)
-# We need to install new pip and setuptools otherwise there is a conflict 
+# We need to install new pip and setuptools otherwise there is a conflict
 # with the local CK installation of Python packages ...
 RUN export DUMMY_CK=A
 RUN ${CK_PYTHON} --version