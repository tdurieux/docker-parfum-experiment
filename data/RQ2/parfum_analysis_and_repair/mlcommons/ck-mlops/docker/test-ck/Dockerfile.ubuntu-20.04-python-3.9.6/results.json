{
  "startTime": 1674249220215,
  "endTime": 1674249221416,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 44,
        "columnEnd": 132
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Adaptive container with the CK interface\n# Concept: https://arxiv.org/abs/2011.01149\n\n# (CK automation 6ab9df569d0d1e6b)\nFROM ubuntu:20.04\n\nLABEL maintainer=\"Grigori Fursin <grigori@octoml.ai>\"\n\nSHELL [\"/bin/bash\", \"-c\"]\nENTRYPOINT [\"/bin/bash\", \"-c\"]\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# (CK automation ee47d84311b9373d)\n# Notes: https://runnable.com/blog/9-common-dockerfile-mistakes\n# Install system dependencies\nRUN apt update && \\\n    apt install -y --no-install-recommends \\\n           apt-utils \\\n           git wget zip bzip2 libz-dev libbz2-dev cmake curl unzip \\\n           openssh-client vim mc tree \\\n           gcc g++ autoconf autogen libtool make libc6-dev \\\n           libssl-dev libbz2-dev libffi-dev \\\n           python3 python3-pip python3-dev \\\n           libsqlite3-dev \\\n           sudo && rm -rf /var/lib/apt/lists/*;\n\n# Install required Python: 3.9.6\nENV PYTHON_VERSION=3.9.6\nRUN cd /usr/src \\\n && wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz --no-check-certificate \\\n && tar xzf Python-${PYTHON_VERSION}.tgz \\\n && rm Python-${PYTHON_VERSION}.tgz \\\n && cd /usr/src/Python-${PYTHON_VERSION} && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared --enable-loadable-sqlite-extensions --with-ensurepip=install \\\n && make altinstall \\\n && rm -rf /usr/src/Python-${PYTHON_VERSION}*\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/local/lib64:${LD_LIBRARY_PATH}\"\nENV CK_PYTHON=python3.9\n\n# Check python version\nRUN which ${CK_PYTHON}\nRUN ${CK_PYTHON} --version\n\n# Prepare a user with a user group with a random id (CK automation 7b3ec2b6534f3394)\nRUN groupadd -g 1111 ckuser\nRUN useradd -u 2222 -g ckuser --create-home --shell /bin/bash ckuser\nRUN echo \"ckuser:ckuser\" | chpasswd\nRUN adduser ckuser sudo\nRUN echo \"ckuser   ALL=(ALL)  NOPASSWD:ALL\" >> /etc/sudoers\n\n# Set user (CK automation 8b8944a9b2c1f341)\nUSER ckuser:ckuser\nWORKDIR /home/ckuser\nENV PATH=\"/home/ckuser/.local/bin:${PATH}\"\nRUN mkdir .ssh\n\n# Set the CK web service defaults.\nENV CK_PORT=3344 \\\n    WFE_PORT=3344\n\nEXPOSE ${CK_PORT}\n\n# Install CK (CK automation f49f20744aba90e2)\n# We need to install new pip and setuptools otherwise there is a conflict\n# with the local CK installation of Python packages ...\nRUN ${CK_PYTHON} -m pip install --ignore-installed pip setuptools wheel --user\nRUN ${CK_PYTHON} -m pip install virtualenv --user\nRUN ${CK_PYTHON} -m pip install coveralls --user\nRUN ${CK_PYTHON} -m pip install pyyaml --user\n\n# Install CK from GitHub to test the latest version\n# Change the DUMMY_CK variable to rebuild Docker from this point\nRUN export DUMMY_CK=A\nRUN echo \"{DUMMY_CK}\"\nRUN git clone https://github.com/ctuning/ck.git ck-from-git\nRUN cd ck-from-git \\\n && ${CK_PYTHON} setup.py install --user\\\n && ${CK_PYTHON} -c \"import ck.kernel as ck; print ('Collective Knowledge v%s' % ck.__version__)\"\n\nRUN ck\n\nRUN ck version\n\n# Test CK internals\nRUN cd ck-from-git && coverage run -m tests.test\n\n# Clone CK repo(s) or pull them from Zenodo (CK automation f49f20744aba90e2)\nRUN ck pull repo:mlcommons@ck-mlops\n\n# Configure CK (CK automation ddea4415c4133ef9)\nRUN ck setup kernel --var.install_to_env=yes\n\n# May need to setup up different platform with different scripts if needed\n# (for Windows or MacOS for example)\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\nRUN ck detect soft:compiler.python --full_path=/usr/local/bin/${CK_PYTHON}\nRUN ck detect soft:compiler.gcc --full_path=`which gcc`\n\n# New testing\nRUN ck install package --tags=tool,cmake,prebuilt,v3.18.2\n\nRUN ck install package --tags=lib,python-package,absl\nRUN ck install package --tags=lib,python-package,numpy\nRUN ck install package --tags=lib,python-package,scipy\nRUN ck install package --tags=lib,python-package,matplotlib\nRUN ck install package --tags=lib,python-package,cython\nRUN ck install package --tags=lib,python-package,pillow\nRUN ck install package --tags=lib,python-package,opencv-python-headless\n\n# Need to change to OctoML branch soon\nRUN ck install package --tags=mlperf,inference,src,r1.1\nRUN ck install package --tags=lib,python-package,mlperf,loadgen\n\nRUN ck install package --tags=tool,coco,api\n\nRUN ck install package --tags=dataset,coco,val,2017,full\n\nRUN ck install package --tags=lib,python-package,onnxruntime-cpu,1.7.0\nRUN ck install package --tags=lib,python-package,onnx,1.9.0\n\nRUN ck install package --tags=model,object-detection,mlperf,onnx,ssd-mobilenet,side.300,non-quantized,opset-8\nRUN ck install package --tags=model,object-detection,mlperf,onnx,ssd-mobilenet,side.300,non-quantized,opset-11\nRUN ck install package --tags=model,object-detection,mlperf,onnx,ssd-resnet34,side.1200,non-quantized,opset-8\n\nRUN ck show env\n\n# Install MLPerf task requirements\nRUN ck run program:mlperf-inference-bench-object-detection-onnx-cpu --cmd_key=install-python-requirements\n\n# Run TVM-based MLPerf inference benchmark (Offline;Accuracy)\nRUN ck run program:mlperf-inference-bench-object-detection-onnx-cpu \\\n          --dep_add_tags.model=side.300,opset-11 \\\n          --cmd_key=accuracy-offline \\\n          --env.EXTRA_OPS=\"--count 100\"\n\n# Start bash\nCMD bash\n"
}