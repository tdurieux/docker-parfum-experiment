{
  "startTime": 1674220890823,
  "endTime": 1674220891601,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 3
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 3
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\n# News:\n#  * 20210525: Grigori updated this container to support the latest CK framework\n#              with the latest CK components from ctuning@ck-ml repo\nLABEL maintainer=\"Grigori Fursin <grigori@octoml.ai>\"\n\n# Use the Bash shell.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Allow stepping into the Bash shell interactively.\n#ENTRYPOINT [\"/bin/bash\", \"-c\"]\n\n# Install known system dependencies and immediately clean up to make the image smaller.\n# CK needs: git, wget, zip.\n# TF needs: curl.\n# Install to share with other images: cmake.\nRUN apt update -y \\\n && apt install --no-install-recommends -y apt-utils \\\n && apt upgrade -y \\\n && apt install --no-install-recommends -y \\\n git wget zip libz-dev \\\n curl \\\n cmake \\\n python3 python3-pip \\\n vim \\\n mc \\\n && apt clean && rm -rf /var/lib/apt/lists/*;\n\n# Create non-root user.\nRUN useradd --create-home --user-group --shell /bin/bash dvdt\nUSER dvdt:dvdt\nWORKDIR /home/dvdt\n\n# Install Collective Knowledge (CK).\nENV CK_REPOS=/home/dvdt/CK_REPOS \\\n    CK_TOOLS=/home/dvdt/CK_TOOLS \\\n    PATH=/home/dvdt/.local/bin:${PATH} \\\n    CK_PYTHON=python3 \\\n    CK_CC=gcc \\\n    LANG=C.UTF-8\n\nRUN mkdir -p ${CK_REPOS} ${CK_TOOLS}\n\n# Install CK (CK automation f49f20744aba90e2)\n# We need to install new pip and setuptools otherwise there is a conflict\n# with the local CK installation of Python packages ...\nRUN export DUMMY_CK=A\nRUN ${CK_PYTHON} --version\nRUN ${DUMMY_CK} ${CK_PYTHON} -m pip install --ignore-installed pip setuptools wheel --user\nRUN ${DUMMY_CK} ${CK_PYTHON} -m pip install pyyaml virtualenv --user\nRUN ${DUMMY_CK} ${CK_PYTHON} -m pip install ck --user\n\n# Pull CK repositories\nRUN ck pull repo:mlcommons@ck-mlops\n\n# Create a repository for benchmarking results.\nRUN ck create repo:mlperf-mobilenets --quiet\n\n# Use generic Linux settings with dummy frequency setting scripts.\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\n\n# Detect Python.\nRUN ck detect soft:compiler.python --full_path=`which ${CK_PYTHON}`\n\n# Detect C/C++ compiler (gcc).\nRUN ck detect soft:compiler.gcc --full_path=`which ${CK_CC}`\n\n# Install Python dependencies.\nRUN ck install package --tags=lib,python-package,numpy\nRUN ck install package --tags=lib,python-package,scipy --force_version=1.2.1\nRUN ck install package --tags=lib,python-package,pillow\n# Install pandas for dashboard.\nRUN ${CK_PYTHON} -m pip install pandas --user\n\n# Install TFLite.\nRUN ck install package:lib-tflite-1.13.1-src-static\n\n# Download and preprocess the first 500 images of the ImageNet 2012 validation dataset.\nRUN ck install package --tags=dataset,imagenet,aux,from.berkeley\nRUN ck install package --tags=dataset,imagenet,val,original,min --no_tags=resized\nRUN ck install package --tags=lib,python-package,cv2,opencv-python-headless\nRUN ck install package --tags=dataset,imagenet,val,preprocessed,using-opencv\n\n# Download the MobileNet TF/TFLite models (non-quantized and quantized).\n# https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-mobilenet-models-for-tflite\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,non-quantized,from-zenodo\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,quantized,from-google\n\n# Benchmark the performance of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 \\\n--dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-performance \\\n--tags=mlperf,image-classification,mobilenet,non-quantized,tflite,performance \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n# Benchmark the accuracy of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 \\\n--dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-accuracy \\\n--tags=mlperf,image-classification,mobilenet,non-quantized,tflite,accuracy \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Benchmark the performance of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 \\\n--dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-performance \\\n--tags=mlperf,image-classification,mobilenet,quantized,tflite,performance \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n# Benchmark the accuracy of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 \\\n--dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-accuracy \\\n--tags=mlperf,image-classification,mobilenet,quantized,tflite,accuracy \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Download the ResNet TFLite models (with and without the ArgMax operator).\n# https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-resnet-model\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,with-argmax\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,no-argmax\n\n# Benchmark the performance of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 \\\n--dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-performance \\\n--tags=mlperf,image-classification,resnet,with-argmax,tflite,performance \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n# Benchmark the accuracy of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 \\\n--dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-accuracy \\\n--tags=mlperf,image-classification,resnet,with-argmax,tflite,accuracy \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\n# Benchmark the performance of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 \\\n--dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-performance \\\n--tags=mlperf,image-classification,resnet,no-argmax,tflite,performance \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n# Benchmark the accuracy of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite \\\n--repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 \\\n--dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite \\\n--record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-accuracy \\\n--tags=mlperf,image-classification,resnet,no-argmax,tflite,accuracy \\\n--skip_print_timers --skip_stat_analysis --process_multi_keys\n\nCMD echo -e \"Point your browser to: http://localhost:3355/?template=dashboard&scenario=mlperf.mobilenets\"\\\n && ck display dashboard --scenario=mlperf.mobilenets --host=0.0.0.0 --wfe_host=localhost --wfe_port=3355\n\n# This command spawns the server in the background (daemon) mode, while\n# also brings up an interactive shell in the same container.\n#CMD echo -e \"Point your browser to: http://localhost:3355/?template=dashboard&scenario=mlperf.mobilenets\"\\\n# && daemonize -o ${HOME}/ck_server.out -e ${HOME}/ck_server.err\\\n# `which ck` display dashboard --scenario=mlperf.mobilenets\\\n# --host=0.0.0.0 --wfe_host=localhost --wfe_port=3355\\\n# && /bin/bash\n"
}