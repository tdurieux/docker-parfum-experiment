{
  "startTime": 1674251313697,
  "endTime": 1674251314646,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 4
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 4
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvcr.io/nvidia/tensorrt:20.03-py3\n\n# News:\n#  * 20210525: Grigori updated this container to support the latest CK framework\n#              with the latest CK components from ctuning@ai repo.\n#              Works with AWS: Deep Learning AMI (Ubuntu 18.04) Version 44.0 - ami-0e5406a90a38f0b79\n#              g4dn.xlarge\n\n# Use the Bash shell.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Allow stepping into the Bash shell interactively.\nENTRYPOINT [\"/bin/bash\", \"-c\"]\n\n# Install known system dependencies and immediately clean up to make the image smaller.\n# CK needs: git, wget, zip.\n# TF needs: curl.\n# TF Object Detection API needs ProtoBuf 3.0 which needs CMake.\nRUN apt update -y \\\n && apt install --no-install-recommends -y apt-utils \\\n && apt upgrade -y \\\n && apt install --no-install-recommends -y \\\n git wget zip libz-dev \\\n curl \\\n cmake \\\n python3 python3-pip \\\n vim \\\n && apt clean && rm -rf /var/lib/apt/lists/*;\n\n# Create a non-root user with a fixed group id 1500 and a fixed user id 2000\n# (hopefully distinct from any host user id for security reasons).\n# See the README for the gory details.\nRUN groupadd -g 1500 dvdtg\nRUN useradd -u 2000 -g dvdtg --create-home --shell /bin/bash dvdt\nUSER dvdt:dvdtg\nWORKDIR /home/dvdt\n\n# Install Collective Knowledge (CK). Make it group-executable.\nENV CK_REPOS=/home/dvdt/CK_REPOS \\\n    CK_TOOLS=/home/dvdt/CK_TOOLS \\\n    PATH=/home/dvdt/.local/bin:${PATH} \\\n    CK_CC=gcc \\\n    CK_PYTHON=python3.6 \\\n    LANG=C.UTF-8\n\nRUN mkdir -p ${CK_REPOS} ${CK_TOOLS}\n\n# Install CK (CK automation f49f20744aba90e2)\n# We need to install new pip and setuptools otherwise there is a conflict\n# with the local CK installation of Python packages ...\nRUN export DUMMY_CK=A\nRUN ${CK_PYTHON} --version\nRUN ${DUMMY_CK} ${CK_PYTHON} -m pip install --ignore-installed pip setuptools wheel --user\nRUN ${DUMMY_CK} ${CK_PYTHON} -m pip install pyyaml virtualenv --user\nRUN ${DUMMY_CK} ${CK_PYTHON} -m pip install ck --user\n\n# Explicitly create a CK experiment entry, a folder that will be mounted\n# (with '--volume=<folder_for_results>:/home/dvdt/CK_REPOS/local/experiment').\n# as a shared volume between the host and the container, and make it group-writable.\n# For consistency, use the \"canonical\" uid from ck-analytics:module:experiment.\nRUN ck create_entry --data_uoa=experiment --data_uid=bc0409fb61f0aa82 --path=${CK_REPOS}/local\\\n && chmod -R g+w ${CK_REPOS}/local/experiment\n\n# Pull CK repositories\nRUN ck pull repo:mlcommons@ck-mlops\n\n# Use generic Linux settings with dummy frequency setting scripts.\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\n\n# Detect C/C++ compiler (gcc).\nRUN ck detect soft:compiler.gcc --full_path=`which ${CK_CC}`\n\n# Detect Python.\nRUN ck detect soft:compiler.python --full_path=`which ${CK_PYTHON}`\n\n\n#-----------------------------------------------------------------------------#\n# Step 1. Install prebuilt TensorFlow v2.1 (via pip).\n#-----------------------------------------------------------------------------#\nRUN ck install package --tags=lib,tensorflow,python-package --force_version=2.1.0\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 2. Install TensorFlow v2.0 with CUDA/TensorRT support from sources.\n#-----------------------------------------------------------------------------#\n# Install TF dependencies that currently have no CK packages.\nRUN ${CK_PYTHON} -m pip install --user absl-py==0.9.0              # >=0.7.0\nRUN ${CK_PYTHON} -m pip install --user astor==0.7.1                # >=0.6.0\nRUN ${CK_PYTHON} -m pip install --user cachetools==4.0.0           # <5.0,>=2.0.0\nRUN ${CK_PYTHON} -m pip install --user gast==0.2.2                 # ==0.2.2 (exact)\nRUN ${CK_PYTHON} -m pip install --user google-auth==1.13.1         # <2,>=1.6.3\nRUN ${CK_PYTHON} -m pip install --user google-auth-oauthlib==0.4.1 # <0.5,>=0.4.1\nRUN ${CK_PYTHON} -m pip install --user google-pasta==0.2.0         # >=0.1.6\nRUN ${CK_PYTHON} -m pip install --user grpcio==1.27.2              # >=1.8.6\nRUN ${CK_PYTHON} -m pip install --user h5py==2.10.0                # exact?\nRUN ${CK_PYTHON} -m pip install --user keras-applications==1.0.8   # >=1.0.8\nRUN ${CK_PYTHON} -m pip install --user keras-preprocessing==1.1.0  # >=1.0.5\nRUN ${CK_PYTHON} -m pip install --user markdown==3.2.1             # >=2.6.8\nRUN ${CK_PYTHON} -m pip install --user numpy==1.18.2               # <2.0,>=1.16.0\nRUN ${CK_PYTHON} -m pip install --user oauthlib==3.1.0             # ?\nRUN ${CK_PYTHON} -m pip install --user opt-einsum==3.2.0           # >=2.3.2\nRUN ${CK_PYTHON} -m pip install --user protobuf==3.11.3            # >=3.8.0\nRUN ${CK_PYTHON} -m pip install --user pyasn1==0.4.8               # <0.5.0,>=0.4.6\nRUN ${CK_PYTHON} -m pip install --user pyasn1-modules==0.2.8       # >=0.2.1\nRUN ${CK_PYTHON} -m pip install --user requests==2.23.0            # <3,>=2.21.0\nRUN ${CK_PYTHON} -m pip install --user requests-oauthlib==1.3.0    # >=0.7.0\nRUN ${CK_PYTHON} -m pip install --user rsa==4.0                    # <4.1,>=3.1.4\nRUN ${CK_PYTHON} -m pip install --user scipy==1.4.1                # ==1.4.1 (exact)\nRUN ${CK_PYTHON} -m pip install --user setuptools==46.1.3          # >=41.0.0\nRUN ${CK_PYTHON} -m pip install --user six==1.14.0                 # >=1.12.0\nRUN ${CK_PYTHON} -m pip install --user tensorboard==2.1.1          # <2.2.0,>=2.1.0 (almost exact)\nRUN ${CK_PYTHON} -m pip install --user tensorflow-estimator==2.1.0 # <2.2.0,>=2.1.0 (almost exact)\nRUN ${CK_PYTHON} -m pip install --user termcolor==1.1.0            # >=1.1.0\nRUN ${CK_PYTHON} -m pip install --user wheel==0.30.0               # >=0.26\nRUN ${CK_PYTHON} -m pip install --user werkzeug==1.0.1             # >=0.11.15\nRUN ${CK_PYTHON} -m pip install --user wrapt==1.11.2               # >=1.11.1\n\n# Detect TF CUDA dependencies.\nRUN ck detect soft:compiler.cuda --full_path=/usr/local/cuda-10.2/bin/nvcc \\\n && ck detect soft:lib.cublas --full_path=/usr/lib/x86_64-linux-gnu/libcublas.so \\\n && ck detect soft:lib.cudnn\n# Install TF build dependencies.\nRUN ck install package:jdk-8u131-universal\nRUN ck install package:tool-bazel-0.27.1-linux\n# Build TF from sources with TensorRT support. Remove the Bazel cache (~16 GB) once done.\nRUN ck install package --tags=lib,tensorflow,vsrc,vcuda,v2.1.0 \\\n--env.CK_TF_NEED_TENSORRT=YES --cus.version=2.1.0\\\n && rm -rf ~/.cache/bazel\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 3. Install the COCO 2017 validation dataset (5,000 images).\n#-----------------------------------------------------------------------------#\n# Download the dataset to the default path. Remove all training annotations (~765 MB).\nRUN echo | ck install package --tags=object-detection,dataset,coco.2017,val,original,full\\\n && ck virtual env --tags=object-detection,dataset,coco.2017,val,original,full --shell_cmd=\\\n'rm $CK_ENV_DATASET_COCO_LABELS_DIR/*train2017.json'\n# Install Python COCO API.\nRUN ck install package --tags=lib,python-package,cython\nRUN ck install package --tags=lib,python-package,numpy\nRUN ck install package --tags=lib,python-package,matplotlib\nRUN ck install package --tags=tool,coco,api\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 4. Install the object detection models.\n#-----------------------------------------------------------------------------#\n# Install TF model API, but remove useless API files to free up space.\nRUN ck detect soft --tags=cmake --full_path=/usr/local/bin/cmake\nRUN ck install package --tags=model,tensorflow,api,r1.13.0\\\n && ck virtual env --tags=model,tensorflow,api --shell_cmd=\\\n'cd $CK_ENV_TENSORFLOW_MODELS;\\\n mv object_detection ..;\\\n rm * -r;\\\n mv ../object_detection .;\\\n cd ..;\\\n rm official -rf;\\\n rm samples -rf;\\\n rm tutorials -rf;\\\n rm .git -rf'\n\nRUN ck install package --tags=rcnn,nas,lowproposals,vcoco\nRUN ck install package --tags=rcnn,resnet50,lowproposals\nRUN ck install package --tags=rcnn,resnet101,lowproposals\nRUN ck install package --tags=rcnn,inception-resnet-v2,lowproposals\nRUN ck install package --tags=rcnn,inception-v2\nRUN ck install package --tags=ssd,inception-v2\nRUN ck install package --tags=ssd,mobilenet-v1,non-quantized,mlperf,tf,from-zenodo\nRUN ck install package --tags=ssd,mobilenet-v1,quantized,mlperf,tf,from-zenodo\nRUN ck install package --tags=ssd,mobilenet-v1,fpn\nRUN ck install package --tags=ssd,resnet50,fpn\nRUN ck install package --tags=ssdlite,mobilenet-v2,vcoco\nRUN ck install package --tags=yolo-v3\n\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 5. Make final preparations to run the Object Detection TF-Python program.\n#-----------------------------------------------------------------------------#\n# Install remaining Python dependencies of the program.\n# (Some have already been installed.)\nRUN ck install package --tags=lib,python-package,cv2,opencv-python-headless\n# Allow the program create tmp files when running under an external user.\nRUN chmod -R g+rwx ${CK_REPOS}/ck-mlops/program/object-detection-tf-py/\n#-----------------------------------------------------------------------------#\n\n\n#=============================================================================#\n# NB: The above is shared with object-detection-tf-py.tensorrt.ubuntu-18.04\n#=============================================================================#\n\n\n#-----------------------------------------------------------------------------#\n# Step 6. Make final preparations to run the official vision app with CK mods.\n#-----------------------------------------------------------------------------#\n# NB: Apparently, we still need Pillow to run the official vision app.\nRUN ck install package --tags=lib,python-package,pillow\n# NB: While Abseil has already been installed above, we install and register it\n# with CK here as well, as it is needed for LoadGen.\nRUN ck install package --tags=lib,python-package,absl\n# Install LoadGen from the official MLPerf Inference repo.\nRUN ck install package --tags=mlperf,inference,source,upstream.master\nRUN ck install package --tags=lib,python-package,mlperf,loadgen\n# Install the official vision app with CK modifications and make it use\n# the default LoadGen config file.\nRUN ck install package --tags=mlperf,inference,source,dividiti.vision_with_ck\nRUN ck detect  soft    --tags=loadgen,config,from.inference.master\n# Allow the program to create tmp files when running under an external user.\nRUN chmod -R g+rwx `ck find program:mlperf-inference-vision`\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Run the official MLPerf Inference vision app\n# in the Accuracy mode and the SingleStream scenario\n# on the first 50 images of the COCO 2017 validation dataset\n# with the TensorFlow CPU backend and the SSD-MobileNet-FPN model.\n#-----------------------------------------------------------------------------#\nCMD [\"ck run program:mlperf-inference-vision --cmd_key=direct \\\n--env.CK_LOADGEN_MODE='--accuracy' \\\n--env.CK_LOADGEN_SCENARIO=SingleStream \\\n--env.CK_LOADGEN_EXTRA_PARAMS='--count 50' \\\n--env.CK_LOADGEN_BACKEND=tensorflow \\\n--dep_add_tags.lib-tensorflow=vcuda --env.CUDA_VISIBLE_DEVICES=-1 \\\n--dep_add_tags.weights=ssd,mobilenet-v1,fpn \\\n--env.CK_LOADGEN_REF_PROFILE=default_tf_object_det_zoo \\\n--env.CK_METRIC_TYPE=COCO \\\n--skip_print_timers\"]\n"
}