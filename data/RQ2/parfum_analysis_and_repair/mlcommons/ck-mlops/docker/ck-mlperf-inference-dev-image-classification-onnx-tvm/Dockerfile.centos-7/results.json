{
  "startTime": 1674215560293,
  "endTime": 1674215561374,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 19,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Adaptive container with the CK interface\n# Concept: https://arxiv.org/abs/2011.01149\n\nFROM centos:7\n\n# Contact\nLABEL maintainer=\"Grigori Fursin <grigori@octoml.ai>\"\n\n# Shell info\nSHELL [\"/bin/bash\", \"-c\"]\n#ENTRYPOINT [\"/bin/bash\", \"-c\"]\n\n# Set noninteractive mode for apt (do not use ENV)\nARG DEBIAN_FRONTEND=noninteractive\n\n# Notes: https://runnable.com/blog/9-common-dockerfile-mistakes\n# Install system dependencies with gcc-9 (gcc-8 doesn't compile loadgen)\nRUN yum update -y && \\\n    yum install -y centos-release-scl && \\\n    yum install -y devtoolset-9 \\\n    yum install -y git wget zip bzip2 libz-dev libbz2-dev cmake curl unzip \\\n           openssh-client vim mc tree \\\n           gcc gcc-c++ autoconf autogen libtool make \\\n           libffi-devel \\\n           python3 python3-pip python3-devel \\\n           sudo dnf && rm -rf /var/cache/yum\n\n# Unavailable?:\n# libc6-dev libssl-dev libbz2-dev  \\\n\n# Prepare a user with a user group with a random id\nRUN groupadd -g 1111 ckuser\nRUN useradd -u 2222 -g ckuser --create-home --shell /bin/bash ckuser\nRUN echo \"ckuser:ckuser\" | chpasswd\nRUN echo \"ckuser   ALL=(ALL)  NOPASSWD:ALL\" >> /etc/sudoers\n\n# Set user\nUSER ckuser:ckuser\nWORKDIR /home/ckuser\nENV PATH=\"/home/ckuser/.local/bin:${PATH}\"\nRUN mkdir .ssh\n\nRUN python3 --version\n\n# Switch to gcc-9 for a user\n#RUN source /opt/rh/devtoolset-9/enable\nENV PATH=/opt/rh/devtoolset-9/root/bin:$PATH\nRUN gcc --version\nRUN g++ --version\n\n# Need to upgrade pip (otherwise different problems)\nRUN python3 -m pip install --upgrade pip --user\n\n# Install CK\nRUN export DUMMY_CK=A\nRUN ${DUMMY_CK} python3 -m pip install ck --user\nRUN ${DUMMY_CK} python3 -m pip install wheel --user\n\n# Clone private CK repo\nRUN ck pull repo:mlcommons@ck-mlops\n\n# Install packages to CK env entries\nRUN ck setup kernel --var.install_to_env=yes\n\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\nRUN ck detect soft:compiler.python --full_path=/usr/bin/python3\n\nRUN ck detect soft:compiler.gcc --full_path=`which gcc`\n\nRUN python3 -m pip install protobuf --user\n\nRUN ck install package --tags=mlperf,inference,src,octoml.dev\n\nRUN ck install package --tags=lib,python-package,absl\n\nRUN ck install package --tags=lib,python-package,numpy\n\nRUN ck install package --tags=lib,python-package,mlperf,loadgen\n\nRUN ck install package --tags=lib,python-package,matplotlib\n\nRUN ck install package --tags=lib,python-package,cython\n\nRUN ck install package --tags=lib,python-package,opencv-python-headless\n\nRUN ck install package --tags=tool,coco,api\n\nRUN ck install package --tags=imagenet,2012,val,min,non-resized\nRUN ck install package --tags=imagenet,2012,aux,from.berkeley\n\nRUN ck install package --tags=lib,python-package,onnxruntime-cpu,1.7.0\nRUN ck install package --tags=lib,python-package,onnx,1.9.0\n\nRUN ck install package --tags=model,image-classification,mlperf,onnx,resnet50,v1.5-opset-11\n\nRUN ck install package --tags=lib,python-package,scipy\n\nRUN ck install package --tags=tool,cmake,prebuilt,v3.18.2\n\n# Prebuilt LLVM doesn't seem to work correctly via CK\nRUN ck install package --tags=compiler,llvm,src,v12.0.0\n\nRUN ck install package --tags=compiler,tvm,dev --env.CK_HOST_CPU_NUMBER_OF_PROCESSORS=4\n\n# Install MLPerf task requirements\nRUN ck run program:mlperf-inference-bench-image-classification-tvm-onnx-cpu --cmd_key=install-python-requirements\n\n# Run TVM-based MLPerf inference benchmark (Offline;Accuracy)\nCMD ck run program:mlperf-inference-bench-image-classification-tvm-onnx-cpu \\\n          --cmd_key=accuracy-offline \\\n          --env.EXTRA_OPS=\"--thread 1 --max-batchsize 1\"\n"
}