{
  "startTime": 1674250287247,
  "endTime": 1674250288502,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 186
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 214
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 162
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 24,
        "columnStart": 25,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 24,
        "columnStart": 25,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n#For OneAPI compilers, the compilers must be added to the builders path\n#FROM intel/oneapi-basekit:devel-ubuntu18.04\n#ENV PATH=/opt/intel/oneapi/compiler/latest/linux/bin:$PATH\n\nENV SOS_INSTALL=/home/sos\nRUN mkdir /home/sos\nENV DEBIAN_FRONTEND=noninteractive\nENV CC=gcc\nENV CXX=g++\n# For OneAPI compilers use clang and clang++\n#  ENV CC=icx\n#  ENV CXX=icpx\n\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n  git \\\n  vim \\\n  build-essential \\\n  wget \\\n  automake \\\n  libtool \\\n  flex \\\n  python \\\n  libhwloc-dev && rm -rf /var/lib/apt/lists/*;\n\n#Packages added on Travis\nRUN apt-get install --no-install-recommends -y libev-libevent-dev \\\n  libev-dev \\\n  mpich && rm -rf /var/lib/apt/lists/*;\n\n# Build Libevent\nWORKDIR $SOS_INSTALL\nRUN wget -c https://github.com/libevent/libevent/releases/download/release-2.1.10-stable/libevent-2.1.10-stable.tar.gz\nRUN tar -xzvf libevent-2.1.10-stable.tar.gz && rm libevent-2.1.10-stable.tar.gz\nWORKDIR libevent-2.1.10-stable\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$SOS_INSTALL/libevent-2.1.10-stable/install\nRUN make clean all install\n\n# Build Hydra\nWORKDIR $SOS_INSTALL\nRUN wget -c https://www.mpich.org/static/downloads/4.0/hydra-4.0.tar.gz\nRUN tar -xzvf hydra-4.0.tar.gz && rm hydra-4.0.tar.gz\nWORKDIR hydra-4.0\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$SOS_INSTALL/hydra-4.0/install\nRUN make all install\n\n# Build PMIx\nWORKDIR $SOS_INSTALL\nRUN git clone -b v4.1.1rc6 --depth 10 https://github.com/pmix/pmix pmix\nWORKDIR pmix\nRUN ./autogen.pl\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$SOS_INSTALL/pmix/install --with-libevent=$SOS_INSTALL/libevent-2.1.10-stable/install --without-libev --disable-debug CFLAGS=-O3 --disable-shared --enable-static\nRUN make -j\nRUN make install\n\n# Build PRRTE\nWORKDIR $SOS_INSTALL\nRUN git clone -b v2.0.0 --depth 10 https://github.com/pmix/prrte prrte\nWORKDIR prrte\nRUN ./autogen.pl\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$SOS_INSTALL/prrte/install --with-pmix=$SOS_INSTALL/pmix/install --without-slurm --with-libevent=$SOS_INSTALL/libevent-2.1.10-stable/install --without-libev --disable-shared --enable-static\nRUN make -j\nRUN make install\n\n# Build Libfabric\nWORKDIR $SOS_INSTALL\nRUN git clone -b v1.7.x --depth 10 https://github.com/ofiwg/libfabric.git libfabric\nWORKDIR libfabric\nRUN ./autogen.sh\n# To build basic Libfabric\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$SOS_INSTALL/libfabric/install\n# To build Libfabric to use GNI provider:\n  #RUN ./configure --prefix=$SOS_INSTALL/libfabric/install-gni --enable-gni --disable-verbs --disable-sockets --disable-udp --disable-psm --disable-tcp\nRUN make -j\nRUN make install\n\n# Build Portals 4\nWORKDIR $SOS_INSTALL\nRUN git clone --depth 10 https://github.com/regrant/portals4.git portals4\nWORKDIR portals4\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$SOS_INSTALL/portals4/install --enable-zero-mrs --enable-reliable-udp --disable-pmi-from-portals\nRUN make -j\nRUN make install\n\n# Build UCX\n#WORKDIR $SOS_INSTALL\n#RUN git clone -b v1.9.0 --depth 10 https://github.com/openucx/ucx.git\n#WORKDIR ucx\n#RUN ./autogen.sh\n#RUN ./configure --prefix=$SOS_INSTALL/ucx/install --enable-mt --disable-numa --without-java\n#RUN make -j\n#RUN make install\n\n# Build SOS\nWORKDIR $SOS_INSTALL\nRUN git clone https://github.com/Sandia-OpenSHMEM/SOS.git\nWORKDIR SOS\nRUN ./autogen.sh\n# To build SOS w/ basic Libfabric\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$SOS_INSTALL/SOS/install --with-ofi=$SOS_INSTALL/libfabric/install --without-ucx --without-portals4 --enable-pmi-simple --disable-fortran\n# To build SOS to use GNI provider\n  #RUN ./configure --prefix=$SOS_INSTALL/SOS/install-gni --with-ofi=$SOS_INSTALL/libfabric/install-gni --without-ucx --without-portals4 --enable-pmi-simple --enable-ofi-mr=basic --enable-completion-polling --disable-fortran\n# To build SOS w/ Libfabric & PMIx\n  #RUN ./configure --prefix=$SOS_INSTALL/SOS/install --with-ofi=$SOS_INSTALL/libfabric/install --without-ucx --without-portals4 --with-pmix=$SOS_INSTALL/pmix/install --disable-shared --enable-static\n# To build SOS w/ Portals 4\n  #RUN ./configure --prefix=$SOS_INSTALL/SOS/install-portals --with-ofi=$SOS_INSTALL/portals4/install --without-ucx --without-ofi --enable-pmi-simple\n# To build SOS w/ UCX\n  #RUN ./configure --prefix=$SOS_INSTALL/SOS/install-ucx --with-ucx=$SOS_INSTALL/ucx/install --without-ofi --without-portals4 --enable-pmi-simple\nRUN make -j\nRUN make install\nRUN make check TESTS= -j\n\n#Start PRRTE server and use prun to run tests\n#RUN make check TESTS= -j\n#ENV PATH=$SOS_INSTALL/prrte/install/bin:$PATH\n#RUN prte --daemonize --host localhost:4 --allow-run-as-root\n#RUN SHMEM_INFO=1 make VERBOSE=1 TEST_RUNNER=\"prun -np 2\" check\n#RUN pterm\n"
}