{
  "startTime": 1674255333740,
  "endTime": 1674255334401,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 5,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 5,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:16.10\nMAINTAINER Mathias Bourgoin <mathias.bourgoin@gmail.com>\nRUN apt-get -y update && \\\n#RUN apt-get -y install sudo pkg-config git build-essential m4 software-properties-common aspcud unzip curl libx11-dev ocaml ocaml-native-compilers camlp4-extra git libffi-dev emacs pkg-config wget aspcud\n     apt-get -y --no-install-recommends install sudo pkg-config git build-essential \\\n     m4 software-properties-common aspcud unzip curl \\\n     libx11-dev ocaml ocaml-native-compilers camlp4-extra \\\n     git libffi-dev emacs pkg-config wget aspcud && rm -rf /var/lib/apt/lists/*;\n#RUN apt-get install -y git libffi-dev emacs pkg-config wget aspcud\n#RUN apt-get install -y emacs\n#RUN apt-get install -y pkg-config\n#RUN apt-get install -y wget aspcud\n\nRUN git clone https://github.com/mathiasbourgoin/amd_sdk.git\n\nRUN sh amd_sdk/amd_sdk.sh\n\nRUN apt-get install --no-install-recommends -y opam && \\\n    useradd -ms /bin/bash spoc && echo \"spoc:spoc\" | chpasswd && adduser spoc sudo && rm -rf /var/lib/apt/lists/*;\n#RUN useradd -ms /bin/bash spoc && echo \"spoc:spoc\" | chpasswd && adduser spoc sudo\nUSER spoc\nWORKDIR /home/spoc\nCMD /bin/bash\n\n\n#RUN wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s ~/.opam\n\nRUN opam init -a --root /home/spoc/.opam && \\\n    opam switch 4.03.0\t&& \\\n#RUN opam switch 4.03.0\n#RUN eval `opam config env`\n#RUN eval `opam config env`&& opam update && \\\n    eval `opam config env`&& opam update && \\\n    opam depext conf-pkg-config.1.0 && \\\n    opam install camlp4 ctypes ocp-indent ctypes-foreign ocamlfind cppo\n#RUN eval `opam config env` && opam depext conf-pkg-config.1.0\n#RUN eval `opam config env` && opam install camlp4 ctypes ocp-indent ctypes-foreign ocamlfind\n#RUN eval `opam config env` && opam install ctypes\n#RUN eval `opam config env` && opam install ocp-indent\n#RUN eval `opam config env` && opam install ctypes-foreign\n#RUN opam install merlin\n#RUN eval `opam config env` && opam install ocamlfind\n\n\nRUN rm -rf SPOC\nRUN git clone https://github.com/mathiasbourgoin/SPOC.git\n\nADD docker_scripts/.bashrc /home/spoc/.bashrc\n\nWORKDIR SPOC/Spoc\nRUN eval `opam config env` && make && \\\n    ocamlfind install spoc *.cma *.a *.so *.cmxa *.cmi META  && \\\n    cd extension && make && make install\n#RUN eval `opam config env` && ocamlfind install spoc *.cma *.a *.so *.cmxa *.cmi META\n#RUN cd extension && eval `opam config env` && make && make install\n#RUN cd extension && eval `opam config env` && make install\n\nWORKDIR ../SpocLibs/Sarek\nRUN eval `opam config env` && make && make install\n\n\nRUN mkdir /home/spoc/emacs_install\nADD docker_scripts/emacs-pkg-install.el  /home/spoc/emacs_install/emacs-pkg-install.el\nADD docker_scripts/emacs-pkg-install.sh  /home/spoc/emacs_install/emacs-pkg-install.sh\n\nWORKDIR /home/spoc/emacs_install\n\nRUN (sh ./emacs-pkg-install.sh auto-complete && \\\n    sh ./emacs-pkg-install.sh company && \\\n    sh ./emacs-pkg-install.sh company-irony) || echo \"No emacs package installed\"\n#RUN sh ./emacs-pkg-install.sh company\n#RUN sh ./emacs-pkg-install.sh company-irony\n#RUN eval `opam config env`&& opam install merlin tuareg ocp-indent\n#RUN eval `opam config env`&& opam install tuareg\n#RUN eval `opam config env`&& opam install ocp-indent\n\nADD docker_scripts/.emacs /home/spoc/.emacs\n\nWORKDIR /home/spoc\n"
}