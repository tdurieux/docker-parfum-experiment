{
  "startTime": 1674251694020,
  "endTime": 1674251694975,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:gallium-buster AS builder\n\nARG PKG_VERSION\n\nWORKDIR /tmp\n\nRUN npm config set unsafe-perm true\n\nRUN npm i -g npm && npm cache clean --force;\n\nCOPY package.json .\n\nCOPY . .\n\nRUN npm i --build-from-source && npm cache clean --force;\n\nRUN npm version $PKG_VERSION --allow-same-version --no-git-tag-version\n\nRUN npm pack\n\nFROM node:gallium-alpine3.15\n\nRUN apk add --no-cache sudo logrotate g++ make\n\nENV NODE_ENV=development\n\nCOPY logrotate.conf /etc/logrotate.conf\n\n# Install python/pip\nENV PYTHONUNBUFFERED=1\nRUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python\nRUN python3 -m ensurepip\nRUN pip3 install --no-cache-dir --no-cache --upgrade pip setuptools\n\n# https://stackoverflow.com/questions/52196518/could-not-get-uid-gid-when-building-node-docker\n# Workaround until we fix our node alpine image\nRUN npm config set unsafe-perm true\n\nCOPY --from=builder /tmp/iofogcontroller-*.tgz /tmp/iofog-controller.tgz\n\nRUN npm i --unsafe-perm -g /tmp/iofog-controller.tgz && \\\n  rm -rf /tmp/iofog-controller.tgz && \\\n  iofog-controller config dev-mode --on && npm cache clean --force;\n\nCMD [ \"node\", \"/usr/local/lib/node_modules/iofogcontroller/src/server.js\" ]\n"
}