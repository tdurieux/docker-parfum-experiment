{
  "startTime": 1674246417234,
  "endTime": 1674246418669,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED FROM \"Dockerfile.template\" VIA\n# \"generate-dockerfiles.sh\".\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\n# Python is needed for building libnss.\n# Use it as a common base.\nFROM python:3.10.1-slim-buster\n\nWORKDIR /build\n\n# Common dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y git ninja-build cmake curl zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# The following are needed because we are going to change some autoconf scripts,\n# both for libnghttp2 and curl.\nRUN apt-get install --no-install-recommends -y autoconf automake autotools-dev pkg-config libtool && rm -rf /var/lib/apt/lists/*;\n\n# Dependencies for building libnss\n# See https://firefox-source-docs.mozilla.org/security/nss/build.html#mozilla-projects-nss-building\nRUN apt-get install --no-install-recommends -y mercurial python3-pip && rm -rf /var/lib/apt/lists/*;\n\n# curl tries to load the CA certificates for libnss.\n# It loads them from /usr/lib/x86_64-linux-gnu/nss/libnssckbi.so,\n# which is supplied by libnss3 on Debian/Ubuntu\nRUN apt-get install --no-install-recommends -y libnss3 && rm -rf /var/lib/apt/lists/*;\n\n# Download and compile libbrotli\nARG BROTLI_VERSION=1.0.9\nRUN curl -f -L https://github.com/google/brotli/archive/refs/tags/v${BROTLI_VERSION}.tar.gz -o brotli-${BROTLI_VERSION}.tar.gz && \\\n    tar xf brotli-${BROTLI_VERSION}.tar.gz && rm brotli-${BROTLI_VERSION}.tar.gz\nRUN cd brotli-${BROTLI_VERSION} && \\\n    mkdir build && cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed .. && \\\n    cmake --build . --config Release --target install\n\n# Needed for building libnss\nRUN pip install --no-cache-dir gyp-next\n\nARG NSS_VERSION=nss-3.77\n# This tarball is already bundled with nspr, a dependency of libnss.\nARG NSS_URL=https://ftp.mozilla.org/pub/security/nss/releases/NSS_3_77_RTM/src/nss-3.77-with-nspr-4.32.tar.gz\n\n# Download and compile nss.\nRUN curl -f -o ${NSS_VERSION}.tar.gz ${NSS_URL}\nRUN tar xf ${NSS_VERSION}.tar.gz && \\\n    cd ${NSS_VERSION}/nss && \\\n    ./build.sh -o --disable-tests --static --python=python3 && rm ${NSS_VERSION}.tar.gz\n\nARG NGHTTP2_VERSION=nghttp2-1.46.0\nARG NGHTTP2_URL=https://github.com/nghttp2/nghttp2/releases/download/v1.46.0/nghttp2-1.46.0.tar.bz2\n\n# Download nghttp2 for HTTP/2.0 support.\nRUN curl -f -o ${NGHTTP2_VERSION}.tar.bz2 -L ${NGHTTP2_URL}\nRUN tar xf ${NGHTTP2_VERSION}.tar.bz2 && rm ${NGHTTP2_VERSION}.tar.bz2\n\n# Compile nghttp2\nRUN cd ${NGHTTP2_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/build/${NGHTTP2_VERSION}/installed --with-pic --disable-shared && \\\n    make && make install\n\n# Download curl.\nARG CURL_VERSION=curl-7.81.0\nRUN curl -f -o ${CURL_VERSION}.tar.xz https://curl.se/download/${CURL_VERSION}.tar.xz\nRUN tar xf ${CURL_VERSION}.tar.xz && rm ${CURL_VERSION}.tar.xz\n\n# Patch curl and re-generate the configure script\nCOPY patches/curl-*.patch ${CURL_VERSION}/\nRUN cd ${CURL_VERSION} && \\\n    for p in $(ls curl-*.patch); do patch -p1 < $p; done && \\\n    autoreconf -fi\n\n# Compile curl with nghttp2, libbrotli and nss (firefox) or boringssl (chrome).\n# Enable keylogfile for debugging of TLS traffic.\nRUN cd ${CURL_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/build/install \\\n                --enable-static \\\n                --disable-shared \\\n                --with-nghttp2=/build/${NGHTTP2_VERSION}/installed \\\n                --with-brotli=/build/brotli-${BROTLI_VERSION}/build/installed \\\n                --with-nss=/build/${NSS_VERSION}/dist/Release \\\n                CFLAGS=\"-I/build/${NSS_VERSION}/dist/public/nss -I/build/${NSS_VERSION}/dist/Release/include/nspr\" \\\n                USE_CURL_SSLKEYLOGFILE=true && \\\n    make && make install\n\nRUN mkdir out && \\\n    cp /build/install/bin/curl-impersonate-ff out/ && \\\n    ln -s curl-impersonate-ff out/curl-impersonate && \\\n    strip out/curl-impersonate\n\n# Verify that the resulting 'curl' has all the necessary features.\nRUN ./out/curl-impersonate -V | grep -q zlib && \\\n    ./out/curl-impersonate -V | grep -q brotli && \\\n    ./out/curl-impersonate -V | grep -q nghttp2 && \\\n    ./out/curl-impersonate -V | grep -q -e NSS -e BoringSSL\n\n# Verify that the resulting 'curl' is really statically compiled\nRUN ! (ldd ./out/curl-impersonate | grep -q -e libcurl -e nghttp2 -e brotli -e ssl -e crypto)\n\nRUN rm -Rf /build/install\n\n# Re-compile libcurl dynamically\nRUN cd ${CURL_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/build/install \\\n                --with-nghttp2=/build/${NGHTTP2_VERSION}/installed \\\n                --with-brotli=/build/brotli-${BROTLI_VERSION}/build/installed \\\n                --with-nss=/build/${NSS_VERSION}/dist/Release \\\n                CFLAGS=\"-I/build/${NSS_VERSION}/dist/public/nss -I/build/${NSS_VERSION}/dist/Release/include/nspr\" \\\n                USE_CURL_SSLKEYLOGFILE=true && \\\n    make clean && make && make install\n\n# Copy libcurl-impersonate and symbolic links\nRUN cp -d /build/install/lib/libcurl-impersonate* /build/out\n\nRUN ver=$(readlink -f curl-7.81.0/lib/.libs/libcurl-impersonate-ff.so | sed 's/.*so\\.//') && \\\n    major=$(echo -n $ver | cut -d'.' -f1) && \\\n    ln -s \"libcurl-impersonate-ff.so.$ver\" \"out/libcurl-impersonate.so.$ver\" && \\\n    ln -s \"libcurl-impersonate.so.$ver\" \"out/libcurl-impersonate.so\" && \\\n    strip \"out/libcurl-impersonate.so.$ver\"\n\n# Verify that the resulting 'libcurl' is really statically compiled against its\n# dependencies.\nRUN ! (ldd ./out/curl-impersonate | grep -q -e nghttp2 -e brotli -e ssl -e crypto)\n\n# Wrapper scripts\nCOPY curl_ff* out/\nRUN chmod +x out/curl_*\n"
}