{
  "startTime": 1674254727763,
  "endTime": 1674254728876,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 79,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 108,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED FROM \"Dockerfile.template\" VIA\n# \"generate-dockerfiles.sh\".\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.15.0 as builder\n\nWORKDIR /build\n\n# Common dependencies\nRUN apk add --no-cache git build-base make cmake ninja curl zlib-dev patch linux-headers python3 python3-dev\n\n# The following are needed because we are going to change some autoconf scripts,\n# both for libnghttp2 and curl.\nRUN apk add --no-cache autoconf automake pkgconfig libtool\n\n# Dependencies for downloading and building BoringSSL\nRUN apk add --no-cache g++ go unzip\n\n# Download and compile libbrotli\nARG BROTLI_VERSION=1.0.9\nRUN curl -f -L https://github.com/google/brotli/archive/refs/tags/v${BROTLI_VERSION}.tar.gz -o brotli-${BROTLI_VERSION}.tar.gz && \\\n    tar xf brotli-${BROTLI_VERSION}.tar.gz && rm brotli-${BROTLI_VERSION}.tar.gz\nRUN cd brotli-${BROTLI_VERSION} && \\\n    mkdir build && cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed .. && \\\n    cmake --build . --config Release --target install\n\n# BoringSSL doesn't have versions. Choose a commit that is used in a stable\n# Chromium version.\nARG BORING_SSL_COMMIT=3a667d10e94186fd503966f5638e134fe9fb4080\nRUN curl -f -L https://github.com/google/boringssl/archive/${BORING_SSL_COMMIT}.zip -o boringssl.zip && \\\n    unzip boringssl && \\\n    mv boringssl-${BORING_SSL_COMMIT} boringssl\n\n# Compile BoringSSL.\n# See https://boringssl.googlesource.com/boringssl/+/HEAD/BUILDING.md\nCOPY patches/boringssl-*.patch boringssl/\nRUN cd boringssl && \\\n    for p in $(ls boringssl-*.patch); do patch -p1 < $p; done && \\\n    mkdir build && cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=on -GNinja .. && \\\n    ninja\n\n# Fix the directory structure so that curl can compile against it.\n# See https://everything.curl.dev/source/build/tls/boringssl\nRUN mkdir boringssl/build/lib && \\\n    ln -s ../crypto/libcrypto.a boringssl/build/lib/libcrypto.a && \\\n    ln -s ../ssl/libssl.a boringssl/build/lib/libssl.a && \\\n    cp -R boringssl/include boringssl/build\n\nARG NGHTTP2_VERSION=nghttp2-1.46.0\nARG NGHTTP2_URL=https://github.com/nghttp2/nghttp2/releases/download/v1.46.0/nghttp2-1.46.0.tar.bz2\n\n# Download nghttp2 for HTTP/2.0 support.\nRUN curl -f -o ${NGHTTP2_VERSION}.tar.bz2 -L ${NGHTTP2_URL}\nRUN tar xf ${NGHTTP2_VERSION}.tar.bz2 && rm ${NGHTTP2_VERSION}.tar.bz2\n\n# Compile nghttp2\nRUN cd ${NGHTTP2_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/build/${NGHTTP2_VERSION}/installed --with-pic --disable-shared && \\\n    make && make install\n\n# Download curl.\nARG CURL_VERSION=curl-7.81.0\nRUN curl -f -o ${CURL_VERSION}.tar.xz https://curl.se/download/${CURL_VERSION}.tar.xz\nRUN tar xf ${CURL_VERSION}.tar.xz && rm ${CURL_VERSION}.tar.xz\n\n# Patch curl and re-generate the configure script\nCOPY patches/curl-*.patch ${CURL_VERSION}/\nRUN cd ${CURL_VERSION} && \\\n    for p in $(ls curl-*.patch); do patch -p1 < $p; done && \\\n    autoreconf -fi\n\n# Compile curl with nghttp2, libbrotli and nss (firefox) or boringssl (chrome).\n# Enable keylogfile for debugging of TLS traffic.\nRUN cd ${CURL_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/build/install \\\n                --enable-static \\\n                --disable-shared \\\n                --with-nghttp2=/build/${NGHTTP2_VERSION}/installed \\\n                --with-brotli=/build/brotli-${BROTLI_VERSION}/build/installed \\\n                --with-openssl=/build/boringssl/build \\\n                LIBS=\"-pthread\" \\\n                CFLAGS=\"-I/build/boringssl/build\" \\\n                USE_CURL_SSLKEYLOGFILE=true && \\\n    make && make install\n\nRUN mkdir out && \\\n    cp /build/install/bin/curl-impersonate-chrome out/ && \\\n    ln -s curl-impersonate-chrome out/curl-impersonate && \\\n    strip out/curl-impersonate\n\n# Verify that the resulting 'curl' has all the necessary features.\nRUN ./out/curl-impersonate -V | grep -q zlib && \\\n    ./out/curl-impersonate -V | grep -q brotli && \\\n    ./out/curl-impersonate -V | grep -q nghttp2 && \\\n    ./out/curl-impersonate -V | grep -q -e NSS -e BoringSSL\n\n# Verify that the resulting 'curl' is really statically compiled\nRUN ! (ldd ./out/curl-impersonate | grep -q -e libcurl -e nghttp2 -e brotli -e ssl -e crypto)\n\nRUN rm -Rf /build/install\n\n# Re-compile libcurl dynamically\nRUN cd ${CURL_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/build/install \\\n                --with-nghttp2=/build/${NGHTTP2_VERSION}/installed \\\n                --with-brotli=/build/brotli-${BROTLI_VERSION}/build/installed \\\n                --with-openssl=/build/boringssl/build \\\n                LIBS=\"-pthread\" \\\n                CFLAGS=\"-I/build/boringssl/build\" \\\n                USE_CURL_SSLKEYLOGFILE=true && \\\n    make clean && make && make install\n\n# Copy libcurl-impersonate and symbolic links\nRUN cp -d /build/install/lib/libcurl-impersonate* /build/out\n\nRUN ver=$(readlink -f curl-7.81.0/lib/.libs/libcurl-impersonate-chrome.so | sed 's/.*so\\.//') && \\\n    major=$(echo -n $ver | cut -d'.' -f1) && \\\n    ln -s \"libcurl-impersonate-chrome.so.$ver\" \"out/libcurl-impersonate.so.$ver\" && \\\n    ln -s \"libcurl-impersonate.so.$ver\" \"out/libcurl-impersonate.so\" && \\\n    strip \"out/libcurl-impersonate.so.$ver\"\n\n# Verify that the resulting 'libcurl' is really statically compiled against its\n# dependencies.\nRUN ! (ldd ./out/curl-impersonate | grep -q -e nghttp2 -e brotli -e ssl -e crypto)\n\n# Wrapper scripts\nCOPY curl_chrome* curl_edge* curl_safari* out/\n# Replace /usr/bin/env bash with /usr/bin/env ash\nRUN sed -i 's@/usr/bin/env bash@/usr/bin/env ash@' out/curl_*\nRUN chmod +x out/curl_*\n\n# When using alpine, create a final, minimal image with the compiled binaries\n# only.\nFROM alpine:3.15.0\n\n# Copy curl-impersonate from the builder image\nCOPY --from=builder /build/install /usr/local\n# Wrapper scripts\nCOPY --from=builder /build/out/curl_* /usr/local/bin/\n"
}