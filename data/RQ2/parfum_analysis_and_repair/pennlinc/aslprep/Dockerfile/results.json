{
  "startTime": 1674256341745,
  "endTime": 1674256343576,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 128
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 219,
        "lineEnd": 219,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 214,
        "lineEnd": 214,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 214,
        "lineEnd": 214,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 214,
        "lineEnd": 214,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 214,
        "lineEnd": 214,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "# Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20200706\n\n# Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/neurodebian.gpg\n\n# Prepare environment\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    curl \\\n                    bzip2 \\\n                    ca-certificates \\\n                    xvfb \\\n                    cython3 \\\n                    build-essential \\\n                    autoconf \\\n                    libtool \\\n                    pkg-config \\\n                    bc \\\n                    dc \\\n                    file \\\n                    libopenblas-base \\\n                    libfontconfig1 \\\n                    libfreetype6 \\\n                    libgl1-mesa-dev \\\n                    libglu1-mesa-dev \\\n                    libgomp1 \\\n                    libice6 \\\n                    libxcursor1 \\\n                    libxft2 \\\n                    libxinerama1 \\\n                    libxrandr2 \\\n                    libxrender1 \\\n                    libxt6 \\\n                    wget \\\n                    libboost-all-dev \\\n                    zlib1g \\\n                    zlib1g-dev \\\n                    libfftw3-dev libtiff5-dev \\\n                    libqt5opengl5-dev \\\n                    unzip \\\n                    libgl1-mesa-dev \\\n                    libglu1-mesa-dev \\\n                    freeglut3-dev \\\n                    mesa-utils \\\n                    g++ \\\n                    gcc \\\n                    libeigen3-dev \\\n                    libqt5svg5* \\\n                    make \\\n                    python \\\n                    python-numpy \\\n                    zlib1g-dev \\\n                    imagemagick \\\n                    software-properties-common \\\n                    git && \\\n    curl -f -sL https://deb.nodesource.com/setup_10.x | bash - && \\\n    apt-get install -y --no-install-recommends \\\n      nodejs && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install latest pandoc\nRUN curl -f -o pandoc-2.2.2.1-1-amd64.deb -sSL \"https://github.com/jgm/pandoc/releases/download/2.2.2.1/pandoc-2.2.2.1-1-amd64.deb\" && \\\n    dpkg -i pandoc-2.2.2.1-1-amd64.deb && \\\n    rm pandoc-2.2.2.1-1-amd64.deb\n\n# Installing freesurfer\nRUN curl -f -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.1/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.1.tar.gz | tar zxv --no-same-owner -C /opt \\\n    --exclude='freesurfer/trctrain' \\\n    --exclude='freesurfer/subjects/fsaverage_sym' \\\n    --exclude='freesurfer/subjects/fsaverage3' \\\n    --exclude='freesurfer/subjects/fsaverage4' \\\n    --exclude='freesurfer/subjects/cvs_avg35' \\\n    --exclude='freesurfer/subjects/cvs_avg35_inMNI152' \\\n    --exclude='freesurfer/subjects/bert' \\\n    --exclude='freesurfer/subjects/V1_average' \\\n    --exclude='freesurfer/average/mult-comp-cor' \\\n    --exclude='freesurfer/lib/cuda' \\\n    --exclude='freesurfer/lib/qt'\n\n  ENV FSLDIR=\"/opt/fsl-6.0.3\" \\\n      PATH=\"/opt/fsl-6.0.3/bin:$PATH\"\n  RUN echo \"Downloading FSL ...\" \\\n      && mkdir -p /opt/fsl-6.0.3 \\\n      && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.3-centos6_64.tar.gz \\\n      | tar -xz -C /opt/fsl-6.0.3 --strip-components 1 \\\n      --exclude='fsl/doc' \\\n      --exclude='fsl/data/atlases' \\\n      --exclude='fsl/data/possum' \\\n      --exclude='fsl/src' \\\n      --exclude='fsl/extras/src' \\\n      --exclude='fsl/bin/fslview*' \\\n      --exclude='fsl/bin/FSLeyes' \\\n      && echo \"Installing FSL conda environment ...\" \\\n      && sed -i -e \"/fsleyes/d\" -e \"/wxpython/d\" \\\n         ${FSLDIR}/etc/fslconf/fslpython_environment.yml \\\n      && bash /opt/fsl-6.0.3/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.3 \\\n      && find ${FSLDIR}/fslpython/envs/fslpython/lib/python3.7/site-packages/ -type d -name \"tests\"  -print0 | xargs -0 rm -r \\\n      && ${FSLDIR}/fslpython/bin/conda clean --all\n\nENV FREESURFER_HOME=/opt/freesurfer \\\n    SUBJECTS_DIR=/opt/freesurfer/subjects \\\n    FUNCTIONALS_DIR=/opt/freesurfer/sessions \\\n    MNI_DIR=/opt/freesurfer/mni \\\n    LOCAL_DIR=/opt/freesurfer/local \\\n    FSFAST_HOME=/opt/freesurfer/fsfast \\\n    MINC_BIN_DIR=/opt/freesurfer/mni/bin \\\n    MINC_LIB_DIR=/opt/freesurfer/mni/lib \\\n    MNI_DATAPATH=/opt/freesurfer/mni/data \\\n    FMRI_ANALYSIS_DIR=/opt/freesurfer/fsfast\nENV PERL5LIB=$MINC_LIB_DIR/perl5/5.8.5 \\\n    MNI_PERL5LIB=$MINC_LIB_DIR/perl5/5.8.5 \\\n    PATH=$FREESURFER_HOME/bin:$FSFAST_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH\n\n# Installing Neurodebian packages (FSL, AFNI, git)\nRUN curl -f -sSL \"https://neuro.debian.net/lists/$( lsb_release -c | cut -f2 ).us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list && \\\n    apt-key add /usr/local/etc/neurodebian.gpg && \\\n    (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true)\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    afni=16.2.07~dfsg.1-5~nd16.04+1 \\\n                    git-annex-standalone && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Installing ANTs latest from source\nARG ANTS_SHA=e00e8164d7a92f048e5d06e388a15c1ee8e889c4\nADD https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.sh /cmake-3.11.4-Linux-x86_64.sh\nENV ANTSPATH=\"/opt/ants-latest/bin\" \\\n    PATH=\"/opt/ants-latest/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/opt/ants-latest/lib:$LD_LIBRARY_PATH\"\nRUN mkdir /opt/cmake \\\n  && sh /cmake-3.11.4-Linux-x86_64.sh --prefix=/opt/cmake --skip-license \\\n  && ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake \\\n  && apt-get update -qq \\\n    && mkdir /tmp/ants \\\n    && cd /tmp \\\n    && git clone https://github.com/ANTsX/ANTs.git \\\n    && mv ANTs /tmp/ants/source \\\n    && cd /tmp/ants/source \\\n    && git checkout ${ANTS_SHA} \\\n    && mkdir -p /tmp/ants/build \\\n    && cd /tmp/ants/build \\\n    && mkdir -p /opt/ants-latest \\\n    && git config --global url.\"https://\".insteadOf git:// \\\n    && cmake -DBUILD_TESTING=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/opt/ants-latest /tmp/ants/source \\\n    && make -j2 \\\n    && cd ANTS-build \\\n    && make install \\\n    && rm -rf /tmp/ants\n\n# Installing SVGO\n\n\n\n\nENV C3DPATH=\"/opt/convert3d-nightly\" \\\n    PATH=\"/opt/convert3d-nightly/bin:$PATH\"\nRUN echo \"Downloading Convert3D ...\" \\\n    && mkdir -p /opt/convert3d-nightly \\\n    && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/Nightly/c3d-nightly-Linux-x86_64.tar.gz/download \\\n    | tar -xz -C /opt/convert3d-nightly --strip-components 1\n\nRUN curl -f -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.12-Linux-x86_64.sh && \\\n    bash Miniconda3-4.5.12-Linux-x86_64.sh -b -p /usr/local/miniconda && \\\n    rm Miniconda3-4.5.12-Linux-x86_64.sh\n\nENV PATH=/usr/local/miniconda/bin:$PATH \\\n    CPATH=\"/usr/local/miniconda/include/:$CPATH\" \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    PYTHONNOUSERSITE=1\n\nENV AFNI_INSTALLDIR=/usr/lib/afni \\\n    PATH=${PATH}:/usr/lib/afni/bin \\\n    AFNI_PLUGINPATH=/usr/lib/afni/plugins \\\n    AFNI_MODELPATH=/usr/lib/afni/models \\\n    AFNI_TTATLAS_DATASET=/usr/share/afni/atlases \\\n    AFNI_IMSAVE_WARNINGS=NO \\\n    FSLOUTPUTTYPE=NIFTI_GZ \\\n    MRTRIX_NTHREADS=1 \\\n    IS_DOCKER_8395080871=1\n\n#RUN curl -sL https://deb.nodesource.com/setup_12.x | bash -\n#RUN apt-get install -y nodejs\n##RUN npm install -g npm\n#RUN npm install -g svgo\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash -\nRUN apt-get -y --no-install-recommends install nodejs && rm -rf /var/lib/apt/lists/*;\nRUN npm install -g svgo && npm cache clean --force;\n\n# Installing bids-validator\nRUN npm install -g bids-validator@1.8.4 && npm cache clean --force;\n\nRUN conda install -y python=3.7.4 \\\n                     pip=19.1 \\\n                     mkl=2018.0.3 \\\n                     mkl-service \\\n                     numpy=1.16.5 \\\n                     scipy=1.3.0 \\\n                     scikit-learn \\\n                     matplotlib \\\n                     pandas=0.23.4 \\\n                     libxml2=2.9.8 \\\n                     libxslt=1.1.32 \\\n                     graphviz=2.40.1 \\\n                     traits=4.6.0 \\\n                     zlib; sync && \\\n    chmod -R a+rX /usr/local/miniconda; sync && \\\n    chmod +x /usr/local/miniconda/bin/*; sync && \\\n    conda build purge-all; sync && \\\n    conda clean -tipsy && sync\n\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\nRUN npm install -g svgo && npm cache clean --force;\n\n# Installing bids-validator\nRUN npm install -g bids-validator@1.8.4 && npm cache clean --force;\n\n# Unless otherwise specified each process should only use one thread - nipype\n# will handle parallelization\nENV MKL_NUM_THREADS=1 \\\n    OMP_NUM_THREADS=1\n\nRUN useradd -m -s /bin/bash -G users aslprep\nWORKDIR /home/aslprep\nENV HOME=\"/home/aslprep\"\n\n# Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" && \\\n    sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" )\n\n# Precaching atlases\nCOPY setup.cfg aslprep-setup.cfg\nRUN pip install --no-cache-dir \"$( grep templateflow aslprep-setup.cfg | xargs )\" && \\\n    python -c \"from templateflow import api as tfapi; \\\n               tfapi.get('MNI152NLin6Asym', atlas=None, resolution=[1, 2], \\\n                         desc=None, extension=['.nii', '.nii.gz']); \\\n               tfapi.get('MNI152NLin6Asym', atlas=None, resolution=[1, 2], \\\n                         desc='brain', extension=['.nii', '.nii.gz']); \\\n               tfapi.get('MNI152NLin2009cAsym', atlas=None, resolution=[1, 2],\\\n                                        extension=['.nii', '.nii.gz']); \\\n               tfapi.get('OASIS30ANTs', extension=['.nii', '.nii.gz'])\" && \\\n    rm aslprep-setup.cfg && \\\n    find $HOME/.cache/templateflow -type d -exec chmod go=u {} + && \\\n    find $HOME/.cache/templateflow -type f -exec chmod go=u {} +\n\n# Installing ASLPREP\nCOPY . /src/aslprep\n\n#ARG VERSION\n\n# Force static versioning within container\n#RUN echo \"${VERSION}\" > /src/aslprep/aslprep/VERSION && \\\n    #echo \"include aslprep/VERSION\" >> /src/aslprep/MANIFEST.in && \\\nRUN pip install --no-cache-dir \"/src/aslprep[all]\"\n\nRUN install -m 0755 \\\n    /src/aslprep/scripts/generate_reference_mask.py \\\n    /usr/local/bin/generate_reference_mask\n\nRUN find $HOME -type d -exec chmod go=u {} + && \\\n    find $HOME -type f -exec chmod go=u {} + && \\\n    rm -rf $HOME/.npm $HOME/.conda $HOME/.empty\n\n#ENV IS_DOCKER_8395080871=1\n\nRUN ldconfig\nWORKDIR /tmp/\nENTRYPOINT [\"/usr/local/miniconda/bin/aslprep\"]\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"ASLPrep\" \\\n      org.label-schema.description=\"ASLPrep - robust ASL preprocessing tool\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/PennLINC/aslprep\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"1.0\"\n"
}