{
  "startTime": 1674249655840,
  "endTime": 1674249656922,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 5,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 5,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# From https://github.com/kaust-vislab/python-data-science-project\nFROM ubuntu:20.04\n\nLABEL maintainer=\"johnlees <john@johnlees.me>\"\n\nSHELL [ \"/bin/bash\", \"--login\", \"-c\" ]\n\nRUN apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y wget bzip2 curl git && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install ssh\nENV SSH_PASSWD \"root:Docker!\"\nENV ROOT_PASSWD \"Docker!\"\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends dialog \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends openssh-server \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends sudo \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends build-essential zlib1g-dev automake autoconf \\\n  && echo \"$SSH_PASSWD\" | chpasswd && rm -rf /var/lib/apt/lists/*;\nCOPY docker/sshd_config /etc/ssh\n# Use root password for sudo access\nRUN echo \"Defaults rootpw\" >> /etc/sudoers\n\n# Create a non-root user\nARG username=poppunk-usr\nARG uid=1000\nARG gid=100\nENV USER $username\nENV UID $uid\nENV GID $gid\nENV HOME /home/$USER\n\nRUN adduser --disabled-password \\\n    --gecos \"Non-root user\" \\\n    --uid $UID \\\n    --gid $GID \\\n    --home $HOME \\\n    $USER\nRUN usermod -aG sudo $USER\n\nCOPY environment.yml requirements.txt /tmp/\nRUN chown $UID:$GID /tmp/environment.yml /tmp/requirements.txt\n\nCOPY docker/entrypoint.sh /usr/local/bin/\nRUN chown $UID:$GID /usr/local/bin/entrypoint.sh && \\\n    chmod u+x /usr/local/bin/entrypoint.sh\n\nUSER $USER\n\n# install miniconda\nENV MINICONDA_VERSION latest\nENV CONDA_DIR $HOME/miniconda3\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-$MINICONDA_VERSION-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b -p $CONDA_DIR && \\\n    rm ~/miniconda.sh\n\n# make non-activate conda commands available\nENV PATH=$CONDA_DIR/bin:$PATH\n\n# make conda activate command available from /bin/bash --login shells\nRUN echo \". $CONDA_DIR/etc/profile.d/conda.sh\" >> ~/.profile\n\n# make conda activate command available from /bin/bash --interative shells\nRUN conda init bash\n\n# create a project directory inside user home\nENV PROJECT_DIR $HOME/app\nRUN mkdir $PROJECT_DIR\n# copy the code in\nCOPY . $PROJECT_DIR\nWORKDIR $PROJECT_DIR\n\n# build the conda environment\nENV ENV_PREFIX $PROJECT_DIR/env\nRUN conda update --name base --channel defaults conda && \\\n    conda env create --prefix $ENV_PREFIX --file /tmp/environment.yml --force && \\\n    conda clean --all --yes\n# build and install extensions\nRUN conda activate $ENV_PREFIX && python setup.py install && conda deactivate\n\n# use an entrypoint script to insure conda environment is properly activated at runtime\nUSER root\nENTRYPOINT [ \"/usr/local/bin/entrypoint.sh\" ]\n\n# default command will be to launch flask server for deployment\n# see https://pythonspeed.com/articles/gunicorn-in-docker/\nEXPOSE 8000 2222\nCMD [ \"gunicorn\", \\\n      \"-b\", \"0.0.0.0:8000\", \\\n      \"--worker-tmp-dir\", \"/dev/shm\", \\\n      \"--log-file=-\", \\\n      \"--timeout\", \"600\", \\\n      \"--workers=2\", \"--threads=2\", \"--worker-class=gthread\", \\\n      \"--chdir\", \"PopPUNK\", \\\n      \"web:app\" ]"
}