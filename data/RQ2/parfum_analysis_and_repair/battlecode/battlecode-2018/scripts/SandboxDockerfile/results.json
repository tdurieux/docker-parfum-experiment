{
  "startTime": 1674220660458,
  "endTime": 1674220662336,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 97,
        "columnEnd": 186
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 226
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 26,
        "columnEnd": 134
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 41,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 31,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 226
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 40,
        "lineEnd": 41,
        "columnStart": 6,
        "columnEnd": 110
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.7\n\nENV LANG=C.UTF-8\n\n# Install GCC\nRUN apk add --no-cache gcc musl-dev libffi-dev rust cargo swig dos2unix\n\n# Java Version and other ENV\nENV JAVA_VERSION_MAJOR=8 \\\n    JAVA_VERSION_MINOR=162 \\\n    JAVA_VERSION_BUILD=12 \\\n    JAVA_PACKAGE=jdk \\\n    JAVA_JCE=standard \\\n    JAVA_HOME=/opt/jdk \\\n    PATH=${PATH}:/opt/jdk/bin \\\n    GLIBC_REPO=https://github.com/sgerrand/alpine-pkg-glibc \\\n    GLIBC_VERSION=2.26-r0 \\\n    LANG=C.UTF-8\n\n# do all in one step\nRUN set -ex && \\\n    [[ ${JAVA_VERSION_MAJOR} != 7 ]] || ( echo >&2 'Oracle no longer publishes JAVA7 packages' && exit 1 ) && \\\n    apk upgrade --update && \\\n    apk add --update libstdc++ curl ca-certificates bash && \\\n    for pkg in glibc-${GLIBC_VERSION}glibc-bin-${GLIBC_VERSION}glibc-i18n-${GLIBC_VERSION}; do \\\n     curl -f -sSL ${GLIBC_REPO}/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk; \\\n   done && \\\n    apk add --allow-untrusted /tmp/*.apk && \\\n    rm -v /tmp/*.apk && \\\n    ( /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) && \\\n    echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh && \\\n    /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib && \\\n    mkdir /opt && \\\n    curl -f -jkSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz \\\n      https://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/0da788060d494f5095bf8624735fa2f1/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz && \\\n    JAVA_PACKAGE_SHA256=$( curl -f -sSL https://www.oracle.com/webfolder/s/digest/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}checksum.html | grep -E \"${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64\\.tar\\.gz\" | grep -Eo '(sha256: )[^<]+' | cut -d: -f2 | xargs) && \\\n    echo \"${JAVA_PACKAGE_SHA256}  /tmp/java.tar.gz\" > /tmp/java.tar.gz.sha256 && \\\n    sha256sum -c /tmp/java.tar.gz.sha256 && \\\n    gunzip /tmp/java.tar.gz && \\\n    tar -C /opt -xf /tmp/java.tar && \\\n    ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk && \\\n    if [ \"${JAVA_JCE}\" == \"unlimited\" ]; then \\\n    echo \"Installing Unlimited JCE policy\" >&2 && \\\n      curl -f -jkSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n        https://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip && \\\n      cd /tmp && unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip && \\\n      cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security; \\\n    fi && \\\n    sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=10/ $JAVA_HOME/jre/lib/security/java.security && \\\n    apk del curl glibc-i18n && \\\n    rm -rf /opt/jdk/*src.zip \\\n           /opt/jdk/lib/missioncontrol \\\n           /opt/jdk/lib/visualvm \\\n           /opt/jdk/lib/*javafx* \\\n           /opt/jdk/jre/plugin \\\n           /opt/jdk/jre/bin/javaws \\\n           /opt/jdk/jre/bin/jjs \\\n           /opt/jdk/jre/bin/orbd \\\n           /opt/jdk/jre/bin/pack200 \\\n           /opt/jdk/jre/bin/policytool \\\n           /opt/jdk/jre/bin/rmid \\\n           /opt/jdk/jre/bin/rmiregistry \\\n           /opt/jdk/jre/bin/servertool \\\n           /opt/jdk/jre/bin/tnameserv \\\n           /opt/jdk/jre/bin/unpack200 \\\n           /opt/jdk/jre/lib/javaws.jar \\\n           /opt/jdk/jre/lib/deploy* \\\n           /opt/jdk/jre/lib/desktop \\\n           /opt/jdk/jre/lib/*javafx* \\\n           /opt/jdk/jre/lib/*jfx* \\\n           /opt/jdk/jre/lib/amd64/libdecora_sse.so \\\n           /opt/jdk/jre/lib/amd64/libprism_*.so \\\n           /opt/jdk/jre/lib/amd64/libfxplugins.so \\\n           /opt/jdk/jre/lib/amd64/libglass.so \\\n           /opt/jdk/jre/lib/amd64/libgstreamer-lite.so \\\n           /opt/jdk/jre/lib/amd64/libjavafx*.so \\\n           /opt/jdk/jre/lib/amd64/libjfx*.so \\\n           /opt/jdk/jre/lib/ext/jfxrt.jar \\\n           /opt/jdk/jre/lib/ext/nashorn.jar \\\n           /opt/jdk/jre/lib/oblique-fonts \\\n           /opt/jdk/jre/lib/plugin.jar \\\n           /tmp/* /var/cache/apk/* && \\\necho 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && rm /tmp/java.tar\n\n# Install Python3\nRUN echo \"@community http://dl-cdn.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories\nRUN apk add --update --no-cache \\\n    build-base \\\n    openblas-dev@community \\\n    python3-dev && \\\n    python3 -m ensurepip && \\\n    rm -r /usr/lib/python*/ensurepip && \\\n    pip3 install --no-cache-dir --upgrade pip setuptools cffi nose && \\\n    rm -r /root/.cache\nRUN ln -s /usr/include/locale.h /usr/include/xlocale.h\nRUN pip3 install --no-cache-dir --disable-pip-version-check numpy==1.11.0 scipy==0.18.0 scikit-learn==0.18.1\n\n# Install battlecode bindings\n\n# Install pypy3\n# the pypy3 package we're using depends on an older version of libcrypto, which is only available in alpine 3.6\nRUN echo 'http://dl-cdn.alpinelinux.org/alpine/v3.6/main' >> /etc/apk/repositories\n# ensure local pypy is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\nENV PYPY_VERSION 5.9.0\nENV PYPY_SHA256SUM a85abaaa01f8db9210e7526ed36350c3269d008b7626c1202efd86b3c426f1ef\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 9.0.1\nRUN set -ex; \\\n    wget -O pypy.tar.bz2 \"https://github.com/JayH5/alpine-pypy/releases/download/3-$PYPY_VERSION/pypy3-v${PYPY_VERSION}-linux64.tar.bz2\"; \\\n    echo \"$PYPY_SHA256SUM  *pypy.tar.bz2\" | sha256sum -c -; \\\n    tar -xjC /usr/local --strip-components=1 -f pypy.tar.bz2; \\\n    rm pypy.tar.bz2; \\\n\n    runDeps=\"$( \\\n        scanelf --needed --nobanner --recursive /usr/local \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | sort -u \\\n            | grep -v 'libpypy3-c' \\\n    )\"; \\\n    apk add --no-cache --virtual .pypy-rundeps $runDeps\n# warn players about numpy; only occurs when running with pypy3 (normal code will hit the python3 install of numpy)\nRUN echo 'raise ImportError(\"Numpy is not supported when running with pypy3 in the Battlecode docker image. Either use python3 or write your hot loops yourself.\")' > /usr/local/lib-python/3/numpy.py\n# add pip for pypy3\nRUN set -ex; \\\n    \\\n    wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \\\n    \\\n    pypy3 get-pip.py \\\n        --disable-pip-version-check \\\n        --no-cache-dir \\\n        \"pip==$PYTHON_PIP_VERSION\" \\\n    ; \\\n    pip --version; \\\n    \\\nrm -f get-pip.py\n\nRUN apk add --no-cache ncurses\nRUN apk add --no-cache mono --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted\n\nENV PYTHONPATH=/battlecode/python\n\n# for timing control\nRUN apk add --no-cache shadow procps && useradd -M player -U -u 6147 && apk del shadow\n\n# remaining build is run in sandboxbuild.sh\n"
}