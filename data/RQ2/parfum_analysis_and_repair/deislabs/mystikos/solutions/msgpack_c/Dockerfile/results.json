{
  "startTime": 1674250626701,
  "endTime": 1674250627350,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 93
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# stage 1 build\nFROM alpine:3.10 AS base-image\n\nRUN apk add --no-cache curl build-base bash git unzip boost-dev cmake zlib-dev\n\n# Ubuntu configuration\n# FROM ubuntu:18.04 AS base-image\n\n# RUN apt-get install -y -q cmake curl build-essential bash git unzip libboost-dev libboost-chrono-dev libboost-system-dev libboost-timer-dev lib32z1-dev\n\nRUN rm -rf /app;mkdir -p /app\n\nWORKDIR /app\n\n# download and compile googletest 1.7.0 (official supported version)\nRUN curl -f -L https://github.com/google/googletest/archive/release-1.7.0.zip -o googletest.zip\nRUN unzip googletest.zip\nRUN cd googletest-release-1.7.0; \\\n    mkdir build;cd build;cmake ..;make; \\\n    mv *.a /usr/lib;cp -r ../include/gtest /usr/include\n\n# clone and compile msgpack repo\nRUN git clone --single-branch --branch cpp_master https://github.com/msgpack/msgpack-c.git msgpack\nRUN mkdir -p /app/msgpack/build; \\\n    cd /app/msgpack/build;git checkout cpp-3.3.0; cmake ..;make\nRUN mkdir -p /app/tests\n# filter and copy all executable test binaries to another directory\nRUN cd /app/msgpack/build/test; \\\n    cp $(find \\( ! -name \"*.cmake\" ! -name \"Makefile\" \\) -maxdepth 1 -type f) /app/tests\n\n# stage2 get binaries\nFROM alpine:3.10\n\nRUN apk add --no-cache zlib-dev libgcc libstdc++\n\nRUN rm -rf /tests;mkdir -p /tests\n\nCOPY --from=base-image /app/tests /tests\n\nCOPY --from=base-image /app/msgpack/build/libmsgpackc.so* /lib/\n\nWORKDIR /app\n"
}