{
  "startTime": 1674256031996,
  "endTime": 1674256033089,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 9,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 9,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\nLABEL maintainer=\"Kitware, Inc. <kitware@kitware.com>\"\n\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -qy tzdata && \\\n    apt-get install --yes --no-install-recommends software-properties-common && \\\n    add-apt-repository -y ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --yes --no-install-recommends -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" dist-upgrade && \\\n    apt-get remove -y python3-apt && \\\n    apt-get install -y --no-install-recommends \\\n    # Primary tools \\\n    sudo libssl-dev net-tools locales apt-utils curl gnupg2 \\\n    python3-apt \\\n    # Python 3.8 \\\n    python3.8-dev python3.8-distutils python3.8-venv \\\n    # Editors \\\n    vim nano \\\n    # Git \\\n    git \\\n    # Fuse \\\n    fuse \\\n    # Install packages for routing to mongodb \\\n    iptables dnsutils \\\n    # Install some additional packages for convenience when testing with bash \\\n    iputils-ping telnet-ssl tmux less \\\n    && \\\n    rm -rf /var/lib/apt/lists/* /tmp/*\nRUN locale-gen en_US.UTF-8\n# Make Python 3.8 the default to make ansible content\nRUN ln -s \"$(which python3.8)\" /usr/local/bin/python && \\\n    ln -s \"$(which python3.8)\" /usr/local/bin/python3 && \\\n    ln -s \"$(which python3.8)\" /usr/local/bin/python3m\nRUN curl -f --silent https://bootstrap.pypa.io/get-pip.py -O && \\\n    # As of 2021-12-20, the SETUPTOOLS_USE_DISTUTILS flag is needed to \\\n    # install pip \\\n    SETUPTOOLS_USE_DISTUTILS=stdlib python3 get-pip.py && \\\n    SETUPTOOLS_USE_DISTUTILS=stdlib python3.8 get-pip.py && \\\n    rm get-pip.py && \\\n    which pip && \\\n    which python && \\\n    pip --version && \\\n    python --version && \\\n    which pip3 && \\\n    which python3 && \\\n    pip3 --version && \\\n    python3 --version && \\\n    find / -xdev -name '*.py[oc]' -type f -exec rm {} \\+ && \\\n    find / -xdev -name __pycache__ -type d -exec rm -r {} \\+\nRUN pip install --no-cache-dir ansible && \\\n    sudo find / -xdev -name '*.py[oc]' -type f -exec rm {} \\+ && \\\n    sudo find / -xdev -name __pycache__ -type d -exec rm -r {} \\+\nRUN adduser --disabled-password --gecos '' ubuntu && \\\n    adduser ubuntu sudo && \\\n    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nUSER ubuntu\nENV LANG en_US.UTF-8\nWORKDIR /home/ubuntu\nRUN git clone --depth=1 --no-checkout https://github.com/DigitalSlideArchive/digital_slide_archive && \\\n    cd digital_slide_archive && \\\n    mkdir -p ansible && \\\n    rm -rf .git\nWORKDIR /home/ubuntu/digital_slide_archive\nENV GIRDER_EXEC_USER ubuntu\nCOPY --chown=ubuntu:ubuntu . /home/ubuntu/digital_slide_archive/ansible/.\nWORKDIR /home/ubuntu/digital_slide_archive/ansible\nRUN ansible-galaxy install -r requirements.yml -p /home/ubuntu/digital_slide_archive/ansible/roles/ && \\\n    sudo find / -xdev -name '*.py[oc]' -type f -exec rm {} \\+ && \\\n    sudo find / -xdev -name __pycache__ -type d -exec rm -r {} \\+\n\nRUN sudo apt-get update && \\\n    sudo apt-get install -y --no-install-recommends \\\n    # Needed for ansible's creation of python virtualenv \\\n    python3-venv \\\n    # Needed to build some python modules \\\n    gcc \\\n    # Convenience when updating from previous versions \\\n    mongodb-clients \\\n    # Python 3.6 \\\n    python3.6-dev python3.6-venv \\\n    # Python 3.7 \\\n    python3.7-dev python3.7-venv \\\n    # Python 3.8 \\\n    python3.8-dev python3.8-venv \\\n    # Python 3.9 \\\n    python3.9-dev python3.9-venv \\\n    # Python 3.10 \\\n    python3.10-dev python3.10-venv \\\n    && \\\n    sudo rm -rf /var/lib/apt/lists/* /tmp/*\nRUN curl -f --silent https://bootstrap.pypa.io/get-pip.py -O && \\\n    python3.7 get-pip.py && \\\n    python3.8 get-pip.py && \\\n    python3.9 get-pip.py && \\\n    python3.10 get-pip.py && \\\n    curl -f --silent https://bootstrap.pypa.io/pip/3.6/get-pip.py -O && \\\n    python3.6 get-pip.py && \\\n    rm get-pip.py && \\\n    sudo find / -xdev -name '*.py[oc]' -type f -exec rm {} \\+ && \\\n    sudo find / -xdev -name __pycache__ -type d -exec rm -r {} \\+\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - && \\\n    sudo apt-get install -y --no-install-recommends nodejs && \\\n    node --version && \\\n    npm --version && \\\n    sudo rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Explicitly use a specific version of python for girder\n# RUN python3.7 -m venv /home/ubuntu/.virtualenvs/girder && \\\n#     sudo rm -rf /home/ubuntu/.cache && \\\n#     sudo find / -xdev -name '*.py[oc]' -type f -exec rm {} \\+ && \\\n#     sudo find / -xdev -name __pycache__ -type d -exec rm -r {} \\+\nRUN ansible-playbook -i inventory/local docker_ansible.yml --extra-vars=docker=girder && \\\n    sudo rm -rf /var/lib/apt/lists/* /tmp/* \\\n                /home/ubuntu/.cache \\\n                /home/ubuntu/.ansible* \\\n                /home/ubuntu/.wget-hsts \\\n                /root/.cache/pip \\\n                /var/tmp/* \\\n                /home/ubuntu/.npm \\\n                /home/ubuntu/.cache \\\n                /home/ubuntu/.ansible* \\\n                /home/ubuntu/.wget-hsts \\\n                /home/ubuntu/.config \\\n                /root/.npm && \\\n    sudo find / -xdev -name '*.py[oc]' -type f -exec rm {} \\+ && \\\n    sudo find / -xdev -name __pycache__ -type d -exec rm -r {} \\+ && \\\n    bash -c ' \\\n    # Reduce number of files in the docker \\\n    sudo find {/home/ubuntu/.virtualenvs,/opt} -name node_modules -exec rm -rf {} \\+ && \\\n    # Make most files owned by root; this reduces owner issues when the \\\n    # docker user or group is different on the target host \\\n    sudo find {/home/ubuntu/.virtualenvs,/opt} -xdev \\( -uid 1000 -or -gid 1000 \\) -and \\( -perm -600 -not -perm -700 \\) -exec chmod 666 {} \\+ && \\\n    sudo find {/home/ubuntu/.virtualenvs,/opt} -xdev \\( -uid 1000 -or -gid 1000 \\) -and -perm -700 -exec chmod 777 {} \\+ && \\\n    sudo find {/home/ubuntu/.virtualenvs,/opt} -xdev \\( -uid 1000 -or -gid 1000 \\) -exec chown root:root {} \\+ && \\\n    # girder's shared output folder must still be owned by a user, not root \\\n    sudo find /home/ubuntu/.virtualenvs/girder/share/girder -exec chown ubuntu:ubuntu {} \\+ && \\\n    sudo find /home/ubuntu/.girder -exec chown ubuntu:ubuntu {} \\+ && \\\n    true'\n\nWORKDIR /opt/HistomicsUI\nEXPOSE 8080\n\n# If the environment variable\n#   HOST_MONGO=true\n# is set, mongodb is added to the /etc/hosts as mapping to the docker host ip\n# address\nCMD sudo -E python /opt/digital_slide_archive/set_environment.py ubuntu && \\\n    sudo -E sysctl -w net.ipv4.conf.eth0.route_localnet=1 && \\\n    sudo -E iptables -t nat -A OUTPUT -o lo -p tcp -m tcp --dport 27017 -j DNAT --to-destination `dig +short mongodb`:27017 && \\\n    sudo -E iptables -t nat -A POSTROUTING -o eth0 -m addrtype --src-type LOCAL --dst-type UNICAST -j MASQUERADE && \\\n    # reinstall some modules in editable mode to make it easier for \\\n    # developers to edit code outside of the docker \\\n    sudo -E su ubuntu -c \\\n    '/home/ubuntu/.virtualenvs/girder/bin/pip install -e /opt/HistomicsUI' ; \\\n    sudo -E su ubuntu -c \\\n    'pushd /opt/slicer_cli_web; /home/ubuntu/.virtualenvs/girder/bin/pip install -e .[girder]; popd' ; \\\n    sudo -E su ubuntu -c \\\n    'pushd /opt/girder; /home/ubuntu/.virtualenvs/girder/bin/pip install -e .[mount]; popd' ; \\\n    sudo -E su ubuntu -c \\\n    'PYTHONUNBUFFERED=true PATH=\"/home/ubuntu/.virtualenvs/girder/bin:$PATH\" girder mount /opt/digital_slide_archive/mount >/opt/logs/mount.log 2>&1' ; \\\n    sudo -E su ubuntu -c \\\n    'PYTHONUNBUFFERED=true PATH=\"/home/ubuntu/.virtualenvs/girder/bin:$PATH\" girder serve --dev >/opt/logs/girder.log 2>&1'\n"
}