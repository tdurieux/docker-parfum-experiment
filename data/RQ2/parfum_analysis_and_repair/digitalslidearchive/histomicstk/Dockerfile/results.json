{
  "startTime": 1674248762934,
  "endTime": 1674248764585,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile is used to generate the docker image dsarchive/histomicstk\n# This docker image includes the HistomicsTK python package along with its\n# dependencies.\n#\n# All plugins of HistomicsTK should derive from this docker image\n\nFROM nvidia/cuda:9.2-cudnn7-devel-ubuntu18.04\nLABEL maintainer=\"Kitware, Inc. <kitware@kitware.com>\"\n\nRUN apt-get update && \\\n    # We need software-properties-common for add-apt-repository \\\n    apt-get install --yes --no-install-recommends software-properties-common && \\\n    # Add python repos \\\n    add-apt-repository ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    apt-get install --yes --no-install-recommends \\\n    # Specific version of python \\\n    python3.8-dev \\\n    python3.8-distutils \\\n    # For installing pip \\\n    curl \\\n    ca-certificates \\\n    # For versioning \\\n    git \\\n    # for convenience \\\n    wget \\\n    # libcurl4-openssl-dev \\\n    # libssl-dev \\\n    # Needed for building \\\n    build-essential \\\n    # pkg-config \\\n    # needed for supporting CUDA \\\n    libcupti-dev \\\n    # can speed up large_image caching \\\n    memcached && \\\n    # Clean up to reduce docker size \\\n    apt-get autoremove && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Make a specific version of python the default and install pip\nRUN rm -f /usr/bin/python && \\\n    rm -f /usr/bin/python3 && \\\n    ln `which python3.8` /usr/bin/python && \\\n    ln `which python3.8` /usr/bin/python3 && \\\n    curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py && \\\n    ln `which pip3` /usr/bin/pip && \\\n    python --version\n\n# copy HistomicsTK files\nENV htk_path=$PWD/HistomicsTK\nRUN mkdir -p $htk_path\n\nRUN pip install --no-cache-dir --upgrade pip setuptools && \\\n    # Install bokeh to help debug dask \\\n    pip install --no-cache-dir 'bokeh>=0.12.14' && \\\n    # Install a specific version of numpy.  This needs to be compatible with\n    # tensorflow and our wheels \\\n    # pip install --no-cache-dir 'numpy==1.17.5' && \\\n    # Install large_image memcached and sources extras \\\n    pip install --no-cache-dir 'large-image[all]' --find-links https://girder.github.io/large_image_wheels && \\\n    # Install girder-client \\\n    pip install --no-cache-dir girder-client && \\\n    # Install some other dependencies here to save time in the histomicstk \\\n    # install step \\\n    pip install --no-cache-dir nimfa numpy scipy Pillow pandas scikit-image scikit-learn imageio 'shapely[vectorized]' opencv-python-headless sqlalchemy matplotlib 'dask[dataframe]' distributed && \\\n    # clean up \\\n    rm -rf /root/.cache/pip/*\n\n# Install the latest version of large_image.  This can be disabled if the\n# latest version we need has had an official release\n# RUN cd /opt && \\\n#     git clone https://github.com/girder/large_image && \\\n#     cd large_image && \\\n#     # git checkout write-with-mask && \\\n#     # We can't install editable when we share system-site-packages \\\n#     sed  's/-e //g' -i requirements-dev.txt && \\\n#     pip install .[all] -r requirements-dev.txt --find-links https://girder.github.io/large_image_wheels\n\nCOPY . $htk_path/\nWORKDIR $htk_path\n\n# Install HistomicsTK and its dependencies\nRUN pip install --no-cache-dir . --find-links https://girder.github.io/large_image_wheels && \\\n    # Create separate virtual environments with CPU and GPU versions of tensorflow \\\n    pip install --no-cache-dir virtualenv && \\\n    virtualenv --system-site-packages /venv-gpu && \\\n    chmod +x /venv-gpu/bin/activate && \\\n    /venv-gpu/bin/pip install --no-cache-dir 'tensorflow-gpu>=1.3.0' && \\\n    rm -rf /root/.cache/pip/*\n\n# Show what was installed\nRUN pip freeze && \\\n    /venv-gpu/bin/pip freeze\n\n# pregenerate font cache\nRUN python -c \"from matplotlib import pylab\"\n\n# define entrypoint through which all CLIs can be run\nWORKDIR $htk_path/histomicstk/cli\n\n# Test our entrypoint.  If we have incompatible versions of numpy and\n# openslide, one of these will fail\nRUN python -m slicer_cli_web.cli_list_entrypoint --list_cli\nRUN python -m slicer_cli_web.cli_list_entrypoint ColorDeconvolution --help\n# Debug import time\nRUN python -X importtime ColorDeconvolution/ColorDeconvolution.py --help\n\nENV PYTHONUNBUFFERED=TRUE\n\nENTRYPOINT [\"/bin/bash\", \"docker-entrypoint.sh\"]\n"
}