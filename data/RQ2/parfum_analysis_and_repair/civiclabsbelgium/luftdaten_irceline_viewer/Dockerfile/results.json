{
  "startTime": 1674252225588,
  "endTime": 1674252226656,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:dubnium-alpine\n\nRUN apk add tini --no-cache\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n\nEXPOSE 80\nEXPOSE 443\n\nWORKDIR /usr/src/server\n\nCOPY package*.json ./\nCOPY public ./public\n\n#install node_modules based on package.json\nRUN npm i && npm cache clean --force;\n\n#copy src dir from project to image\nCOPY src ./src\n\n#run npm script to create a build directory in this docker image\nRUN npm run build\n\n#delete everything except the previously created build directory from this directory\nRUN rm -r ./src\nRUN rm -r ./public\nRUN rm -r ./node_modules\nRUN rm  ./package.json\n\n#copy server/package.json and paste it as package.json alongside the build folder\nCOPY server/package.json ./package.json\n\n#install node_modules based on server/package.json\n#this json config contains only the minimum dependencies to support npm serve\nRUN npm i --only=prod && npm cache clean --force;\n\n#copy the express server.js file alongside the build folder\nCOPY server/server.js ./server.js\nCOPY server/irceline.js ./irceline.js\nCOPY server/luftdaten.js ./luftdaten.js\n\nCMD [ \"node\", \"server.js\" ]"
}