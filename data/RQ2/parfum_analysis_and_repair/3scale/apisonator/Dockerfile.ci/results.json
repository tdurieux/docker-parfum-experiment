{
  "startTime": 1674248387894,
  "endTime": 1674248389559,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 34,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM quay.io/centos/centos:stream9\nMAINTAINER Alejandro Martinez Ruiz <amr@redhat.com>\n\nARG CIRCLECI_TOOLS=\"git openssh-clients tar gzip ca-certificates glibc-locale-source glibc-langpack-en\"\n# set localtime to UTC and install basic build tools\nRUN (ln -s /usr/share/zoneinfo/UTC /etc/localtime 2> /dev/null || true) \\\n    && dnf update -y \\\n    && dnf install -y sudo git make gcc autoconf automake libtool gettext file \\\n       ${CIRCLECI_TOOLS} \\\n    && dnf clean all \\\n    && localedef -c -f UTF-8 -i en_US en_US.UTF-8\n\nARG USER_NAME=ruby\nRUN useradd -m -d \"/home/${USER_NAME}\" -l -G wheel ${USER_NAME} \\\n    && echo \"${USER_NAME} ALL=(ALL:ALL) NOPASSWD: ALL\" > \\\n    \"/etc/sudoers.d/${USER_NAME}\" \\\n    && chmod 0440 \"/etc/sudoers.d/${USER_NAME}\"\n\nUSER \"${USER_NAME}\"\n\n# PostgreSQL installation\nARG POSTGRES_BUILD_DEPS=\"bison flex zlib-devel readline-devel openssl-devel\"\nRUN test \"x${POSTGRES_BUILD_DEPS}\" = \"x\" \\\n    || sudo dnf install -y ${POSTGRES_BUILD_DEPS}\n\nARG POSTGRES_VERSION=REL_10_17\nRUN curl -sSLf \"https://github.com/postgres/postgres/archive/${POSTGRES_VERSION}.tar.gz\" \\\n    | tar -C \"/home/${USER_NAME}\" -xz\n\nARG POSTGRES_PREFIX=/usr/local\nARG POSTGRES_DATA_PREFIX=${POSTGRES_PREFIX}/pgsql\nARG POSTGRES_CONFIGURE_OPTIONS\nARG POSTGRES_MAKE_OPTIONS\nRUN cd ~/postgres-\"${POSTGRES_VERSION}\" \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${POSTGRES_PREFIX}\" --includedir=/usr/local/include \\\n       --with-openssl ${POSTGRES_CONFIGURE_OPTIONS} \\\n    && make ${POSTGRES_MAKE_OPTIONS}\nRUN cd ~/postgres-\"${POSTGRES_VERSION}\" \\\n    && sudo make install \\\n    && rm -rf ~/postgres-\"${POSTGRES_VERSION}\" \\\n    # the test tooling expects the pg_ctl binary in this directory\n    && sudo mkdir -p /usr/lib/postgresql/9.5/bin \\\n    && sudo ln -sf \"${POSTGRES_PREFIX}/bin/pg_ctl\" /usr/lib/postgresql/9.5/bin/pg_ctl \\\n    && sudo useradd postgres \\\n    && sudo mkdir -p \"${POSTGRES_DATA_PREFIX}/data\" \\\n    && sudo chown -R postgres: \"${POSTGRES_DATA_PREFIX}\" \\\n    && sudo chmod -R go-rwx \"${POSTGRES_DATA_PREFIX}\"\n\nRUN sudo runuser -l postgres -c \\\n    \"${POSTGRES_PREFIX}/bin/initdb --pgdata='${POSTGRES_DATA_PREFIX}/data' --auth='trust'\" < /dev/null \\\n    && sudo runuser -l postgres -c \\\n    \"${POSTGRES_PREFIX}/bin/postgres -D '${POSTGRES_DATA_PREFIX}/data'\" \\\n      > /tmp/postgres.log 2>&1 & sleep 5 \\\n    && sudo runuser -l postgres -c \"${POSTGRES_PREFIX}/bin/createdb test\" \\\n    && sudo runuser -l postgres -c \"${POSTGRES_PREFIX}/bin/psql test\"\n\n# Twemproxy installation\nARG TWEMPROXY_VERSION=0.5.0\nRUN curl -sSLf \\\n    \"https://github.com/twitter/twemproxy/releases/download/${TWEMPROXY_VERSION}/twemproxy-${TWEMPROXY_VERSION}.tar.gz\" \\\n    | tar -C \"/home/${USER_NAME}\" -xz\n\nARG TWEMPROXY_CONFIGURE_OPTIONS\nARG TWEMPROXY_BUILD_OPTIONS\nARG TWEMPROXY_PREFIX=/opt/twemproxy\nRUN cd ~/twemproxy-\"${TWEMPROXY_VERSION}\" \\\n    && autoreconf -fvi \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"${TWEMPROXY_PREFIX}\" ${TWEMPROXY_CONFIGURE_OPTIONS} \\\n    && make ${TWEMPROXY_BUILD_OPTIONS}\nRUN cd ~/twemproxy-\"${TWEMPROXY_VERSION}\" \\\n    && sudo make install \\\n    && rm -rf ~/twemproxy-\"${TWEMPROXY_VERSION}\"\n\n# Redis installation\nARG REDIS_VERSION=5.0.8\nRUN curl -sSLf \"https://github.com/antirez/redis/archive/${REDIS_VERSION}.tar.gz\" \\\n    | tar -C \"/home/${USER_NAME}\" -xz\n\nARG REDIS_BUILD_OPTIONS\nRUN cd ~/redis-\"${REDIS_VERSION}\" && make ${REDIS_BUILD_OPTIONS}\nARG REDIS_PREFIX=/usr/local\nRUN cd ~/redis-\"${REDIS_VERSION}\" \\\n    && sudo make PREFIX=\"${REDIS_PREFIX}\" install \\\n    && rm -rf ~/redis-\"${REDIS_VERSION}\"\n\n# not really meant to be changed\nARG RBENV_ROOT=\"/home/${USER_NAME}/.rbenv\"\nENV RBENV_ROOT=\"${RBENV_ROOT}\"\nARG RBENV_BINPATH=\"${RBENV_ROOT}/bin\"\nARG RBENV_PATH=\"${RBENV_ROOT}/shims:${RBENV_BINPATH}\"\nARG RBENV_RUBYBUILD_ROOT=\"${RBENV_ROOT}/plugins/ruby-build\"\n\n# update to git clone to include --shallow-submodules --no-tags --jobs $(nproc)\n# when newer git versions land in the base distro\nRUN git clone --recurse-submodules --depth 1 --no-checkout --progress \\\n    https://github.com/rbenv/rbenv.git \"${RBENV_ROOT}\"\n\nRUN git clone --recurse-submodules --depth 1 --no-checkout --progress \\\n    https://github.com/rbenv/ruby-build.git \"${RBENV_RUBYBUILD_ROOT}\"\n\nARG RBENV_TAG=v1.1.2\n# update git fetch to include --jobs $(nproc) when newer git versions land\nRUN cd \"${RBENV_ROOT}\" \\\n    && (git checkout -q -f \"${RBENV_TAG}\" 2> /dev/null \\\n    || (git fetch --prune --depth 1 origin tag \"${RBENV_TAG}\" \\\n    && git checkout -q -f \"${RBENV_TAG}\"))\n\nARG RBENV_RUBYBUILD_TAG=v20210825\nRUN cd \"${RBENV_RUBYBUILD_ROOT}\" \\\n    && (git checkout -q -f \"${RBENV_RUBYBUILD_TAG}\" 2> /dev/null \\\n    || (git fetch --prune --depth 1 origin tag \"${RBENV_RUBYBUILD_TAG}\" \\\n    && git checkout -q -f \"${RBENV_RUBYBUILD_TAG}\"))\n\nRUN sudo dnf update -y\nRUN cd \"${RBENV_ROOT}\" && src/configure && make -C src || true\n\nRUN echo -n \"export PATH=${RBENV_BINPATH}\" >> ~/.bash_rbenv \\\n    && echo \":${HOME}/.local/bin:$PATH\" >> ~/.bash_rbenv \\\n    && echo 'eval \"$(rbenv init -)\"' >> ~/.bash_rbenv \\\n    && echo 'source ~/.bash_rbenv' >> ~/.profile\n\nENV PATH=\"${RBENV_PATH}:/home/${USER_NAME}/.local/bin:${PATH}\"\n\nARG MRI_DEPS=\"bzip2 zlib-devel readline-devel openssl-devel libffi-devel ncurses-devel libdb-devel perl procps-ng\"\nRUN test \"x${MRI_DEPS}\" = \"x\" || sudo dnf install -y ${MRI_DEPS}\n\nARG OPENSSL_SRC_PATH=/home/${USER_NAME}/openssl_1_1_1\nARG OPENSSL_INSTALL_PATH=/usr/local/opt/openssl\nRUN git clone -b OpenSSL_1_1_1-stable --single-branch https://github.com/openssl/openssl.git ${OPENSSL_SRC_PATH} \\\n    && cd ${OPENSSL_SRC_PATH} \\\n    && ./config --prefix=${OPENSSL_INSTALL_PATH} \\\n    && make \\\n    && sudo make install\n\nRUN echo 'gem: --no-document' >> ~/.gemrc \\\n    && echo --color > ~/.rspec\n\nARG RUBY_CONFIGURE_OPTS=\"--with-openssl-dir=${OPENSSL_INSTALL_PATH}\"\nARG CONFIGURE_OPTS=--disable-install-doc\nRUN mkdir -p ~/.local/bin \\\n    && echo -e \"#!/bin/bash\\n\\n\" \\\n       \"source ~/.bash_rbenv\\n\\n\" \\\n       \"install_latest_bundler() {\\n\" \\\n       \"  # https://github.com/rubygems/rubygems/issues/2058\\n\" \\\n       \"  gem install --force bundler\\n\" \\\n       \"  rbenv rehash\\n\" \\\n       \"  bundle config --global jobs \\$(nproc)\\n\" \\\n       \"  bundle config --global cache_all false\\n\" \\\n       \"}\\n\\n\" \\\n       \"update_env() {\\n\" \\\n       \"  if ! ruby -v 2> /dev/null; then\\n\" \\\n       \"    CONFIGURE_OPTS=\\\"\\${CONFIGURE_OPTS:-${CONFIGURE_OPTS}}\\\" \" \\\n       \"RUBY_BUILD_SKIP_MIRROR=1 rbenv install -s \\\"\\${RBENV_VERSION:-}\\\"\\n\" \\\n       \"    rbenv rehash\\n\" \\\n       \"    rbenv shell \\\"\\${RBENV_VERSION:-}\\\" 2> /dev/null\\n\" \\\n       \"    gem update --system\\n\" \\\n       \"  fi\\n\" \\\n       \"}\\n\\n\" \\\n       \"if [[ \\\"\\${BASH_SOURCE[0]}\\\" = \\\"\\${0}\\\" ]]; then\\n\" \\\n       \"  set -eo pipefail\\n\" \\\n       \"  shopt -s failglob\\n\\n\" \\\n       \"  update_env\\n\" \\\n       \"fi\" \\\n       > ~/.local/bin/rbenv_update_env \\\n    && chmod +x ~/.local/bin/rbenv_update_env \\\n    && echo -e \"#!/bin/bash\\n\\n\" \\\n       \"source ~/.bash_rbenv\\n\\n\" \\\n       \"bundle_cmd() {\\n\" \\\n       \"  local version=\\\"\\${1:-}\\\"\\n\" \\\n       \"  local version_spec=\\\"\\${version:+_\\${version}_}\\\"\\n\" \\\n       \"  echo \\\"bundle \\${version_spec}\\\"\\n\" \\\n       \"}\\n\\n\" \\\n       \"bundled_with() {\\n\" \\\n       \"  local lockfile=\\\"\\${1}\\\"\\n\" \\\n       \"  cat \\${lockfile} | grep -A 1 \\\"^BUNDLED WITH\\$\\\" | tail -n 1 | sed -e 's/\\s//g'\\n\" \\\n       \"}\\n\\n\" \\\n       \"ensure_bundler_version() {\\n\" \\\n       \"  local version=\\\"\\${1:-}\\\"\\n\" \\\n       \"  \\$(bundle_cmd \\${version}) --version 2> /dev/null >&2 ||\\n\" \\\n       \"    (gem install --force \\\"bundler\\${version:+:\\${version}}\\\" &&\\n\" \\\n       \"    rbenv rehash)\\n\" \\\n       \"}\\n\\n\" \\\n       \"bundle_install_all_gemfiles() {\\n\" \\\n       \"  local array_requested=\\\"\\\"\\n\" \\\n       \"  for lockfile in Gemfile*.lock; do\\n\" \\\n       \"    local gemfile=\\\"\\${lockfile%.lock}\\\"\\n\" \\\n       \"    local requested=\\\"\\$(bundled_with \\${lockfile})\\\"\\n\" \\\n       \"    array_requested=\\\"\\${requested:-latest} \\${array_requested}\\\"\\n\" \\\n       \"    echo \\\"Bundling \\${gemfile} on \\$(ruby -v) with Bundler \\${requested}\\\"\\n\" \\\n       \"    ensure_bundler_version \\${requested}\\n\" \\\n       \"    BUNDLE_GEMFILE=\\${gemfile} \\$(bundle_cmd \\${requested}) install\\n\" \\\n       \"  done\\n\" \\\n       \"  echo \\\"Installed Bundler versions:\\\"\\n\" \\\n       \"  for v in \\${array_requested}; do\\n\" \\\n       \"    echo \\${v}\\n\" \\\n       \"  done | sort -u -r -V\\n\" \\\n       \"}\\n\\n\" \\\n       \"if [[ \\\"\\${BASH_SOURCE[0]}\\\" = \\\"\\${0}\\\" ]]; then\\n\" \\\n       \"  set -eo pipefail\\n\" \\\n       \"  shopt -s failglob\\n\\n\" \\\n       \"  bundle_install_all_gemfiles\\n\" \\\n       \"fi\" \\\n       > ~/.local/bin/bundle_install_gemfiles \\\n    && chmod +x ~/.local/bin/bundle_install_gemfiles \\\n    && echo -e \"#!/bin/bash\\n\\n\" \\\n       \"source ~/.bash_rbenv\\n\" \\\n       \"source \\$(dirname \\\"\\$(readlink -f \\$0)\\\")/rbenv_update_env\\n\\n\" \\\n       \"regex_escape() {\\n\" \\\n       \"  echo \\\"\\${1}\\\" | sed -e 's/[]\\/\\$*.^[]/\\\\\\\\\\\\\\\\&/g'\\n\" \\\n       \"}\\n\\n\" \\\n       \"match_version() {\\n\" \\\n       \"  local input=\\\"\\${1}\\\"\\n\" \\\n       \"  local version_esc=\\$(regex_escape \\\"\\${2}\\\")\\n\" \\\n       \"  echo \\\"\\${input}\\\" | grep -P \\\"^\\s*\\${version_esc}\\\" | sed -e \\\"s/[[:space:]]*\\(\\${version_esc}\\(\\.[0-9]\\+\\)*\\).*/\\1/\\\" | sort -V -r | head -n 1\\n\" \\\n       \"}\\n\\n\" \\\n       \"similar_installed_version() {\\n\" \\\n       \"  local req=\\\"\\${1}\\\"\\n\" \\\n       \"  match_version \\\"\\$(rbenv versions --bare --skip-aliases)\\\" \\\"\\${req}\\\"\\n\" \\\n       \"}\\n\\n\" \\\n       \"set_ruby_version() {\\n\" \\\n       \"  local req=\\\"\\${1}\\\"\\n\" \\\n       \"  local similar=\\$(similar_installed_version \\\"\\${req}\\\")\\n\" \\\n       \"  if test \\\"x\\${similar}\\\" = \\\"x\\\"; then\\n\" \\\n       \"    return 1\\n\" \\\n       \"  fi\\n\" \\\n       \"  rbenv shell \\\"\\${similar}\\\"\\n\" \\\n       \"}\\n\\n\" \\\n       \"similar_installable_version() {\\n\" \\\n       \"  local req=\\\"\\${1}\\\"\\n\" \\\n       \"  match_version \\\"\\$(rbenv install -l)\\\" \\\"\\${req}\\\"\\n\" \\\n       \"}\\n\\n\" \\\n       \"install_all_rubies() {\\n\" \\\n       \"  for req in \\\"\\${@}\\\"; do\\n\" \\\n       \"    if set_ruby_version \\\"\\${req}\\\"; then\\n\" \\\n       \"      echo \\\"Skipping version \\${req} as there is already version \\$(rbenv version-name) installed\\\"\\n\" \\\n       \"      continue\\n\" \\\n       \"    fi\\n\" \\\n       \"    echo Installing \\${req}\\n\" \\\n       \"    if ! RBENV_VERSION=\\\"\\${req}\\\" update_env; then\\n\" \\\n       \"      echo \\\"Trying to pick up a similar version to \\${req}\\\"\\n\" \\\n       \"      local new_version=\\$(similar_installable_version \\\"\\${req}\\\")\\n\" \\\n       \"      echo \\\"Picked up version \\${new_version:-(default)}\\\"\\n\" \\\n       \"      RBENV_VERSION=\\${new_version} update_env\\n\" \\\n       \"    fi\\n\" \\\n       \"  done\\n\" \\\n       \"}\\n\\n\" \\\n       \"if [[ \\\"\\${BASH_SOURCE[0]}\\\" = \\\"\\${0}\\\" ]]; then\\n\" \\\n       \"  set -eo pipefail\\n\" \\\n       \"  shopt -s failglob\\n\\n\" \\\n       \"  install_all_rubies \\\"\\${@}\\\"\\n\" \\\n       \"fi\" \\\n       > ~/.local/bin/ruby_versions \\\n    && chmod +x ~/.local/bin/ruby_versions \\\n    && echo -e \"#!/bin/bash\\n\\n\" \\\n       \"source ~/.bash_rbenv\\n\" \\\n       \"source \\$(dirname \\\"\\$(readlink -f \\$0)\\\")/bundle_install_gemfiles\\n\\n\" \\\n       \"bundle_install_all_rubies() {\\n\" \\\n       \"  for ruby_version in \\$(rbenv whence ruby); do\\n\" \\\n       \"    echo \\\"Switching to \\${ruby_version}\\\"\\n\" \\\n       \"    rbenv shell \\\"\\${ruby_version}\\\"\\n\" \\\n       \"    gem update --system\\n\" \\\n       \"    (bundle_install_all_gemfiles | tee /tmp/bundle_install.log)\\n\" \\\n       \"    BUNDLER_REQUESTED=\\\"\\$(sed -e '1,/Installed Bundler versions:/d' /tmp/bundle_install.log)\\\"\\n\" \\\n       \"    rm -f /tmp/bundle_install.log\\n\" \\\n       \"    echo \\\"Bundler versions installed: \\${BUNDLER_REQUESTED[*]}\\\"\\n\" \\\n       \"    echo -n \\\"Bundler versions available on \\$(ruby -v): \\\"\\n\" \\\n       \"    echo \\\"\\$(gem list bundler | \" \\\n       \"grep ^bundler | cut -d' ' -f2- | \" \\\n       \"sed -e 's/(\\(.*\\))/\\1/g' -e 's/,//g' -e 's/default:\\s*//g')\\\"\\n\" \\\n       \"  done\\n\" \\\n       \"}\\n\\n\" \\\n       \"if [[ \\\"\\${BASH_SOURCE[0]}\\\" = \\\"\\${0}\\\" ]]; then\\n\" \\\n       \"  set -eo pipefail\\n\" \\\n       \"  shopt -s failglob\\n\\n\" \\\n       \"  bundle_install_all_rubies\\n\" \\\n       \"fi\" \\\n       > ~/.local/bin/bundle_install_rubies \\\n    && chmod +x ~/.local/bin/bundle_install_rubies\n\nCOPY .ruby-* /tmp/apisonator/\nRUN sudo chown -R \"${USER_NAME}\": /tmp/apisonator \\\n    && cd /tmp/apisonator \\\n    && rbenv_update_env\n\n# specify all versions to be installed, partial versions also understood\nARG RUBY_VERSIONS=\"2.7\"\nRUN cd /tmp/apisonator \\\n    && ruby_versions ${RUBY_VERSIONS}\n\nARG APISONATOR_RUNTIME_DEPS=\"hostname\"\nARG APISONATOR_BUILD_DEPS\n# license_finder depends on which\nARG APISONATOR_TEST_DEPS=\"which\"\nRUN test \"x${APISONATOR_RUNTIME_DEPS}${APISONATOR_BUILD_DEPS}${APISONATOR_TEST_DEPS}\" = \"x\" \\\n    || (sudo dnf install -y ${APISONATOR_RUNTIME_DEPS} ${APISONATOR_BUILD_DEPS} \\\n          ${APISONATOR_TEST_DEPS} \\\n        && sudo dnf clean all)\n\nCOPY bin /tmp/apisonator/bin/\nCOPY Gemfile* *.gemspec /tmp/apisonator/\nCOPY lib/3scale/backend/version.rb /tmp/apisonator/lib/3scale/backend/\nRUN sudo chown -R \"${USER_NAME}\": /tmp/apisonator \\\n    && cd /tmp/apisonator \\\n    && bundle_install_rubies \\\n    && rm -rf /tmp/apisonator\n"
}