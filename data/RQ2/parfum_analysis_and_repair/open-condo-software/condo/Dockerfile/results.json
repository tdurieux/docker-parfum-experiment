{
  "startTime": 1674253991965,
  "endTime": 1674253993235,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 15,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM buildpack-deps:buster AS base\n# https://hub.docker.com/_/node\n# https://github.com/nodejs/docker-node/blob/6e7d6511aba22da645ec21bd157a369a78794e6c/14/buster/Dockerfile\n# https://hub.docker.com/_/python\n# https://github.com/docker-library/python/blob/3897bb4660fe97fc202f50431dd3e6cdc0dedd4a/3.8/buster/Dockerfile\nCOPY --from=python:3.8-buster /usr/local/ /usr/local/\nCOPY --from=node:14-buster /usr/local/ /usr/local/\nCOPY --from=node:14-buster /opt/ /opt/\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n# Add app user/group! Clean packages and fix links! Check version! And install some extra packages!\nARG DOCKER_FILE_INSTALL_COMMAND\nENV DOCKER_FILE_INSTALL_COMMAND ${DOCKER_FILE_INSTALL_COMMAND}\nRUN set -ex \\\n\t&& groupadd -r app --gid=999 \\\n\t&& useradd --system --create-home --home /home/app --gid 999 --uid=999 --shell /bin/bash app \\\n\t&& ldconfig -v \\\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests -o -name idle_test \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& rm -f /usr/local/bin/docker-entrypoint.sh \\\n\t&& python --version \\\n\t&& pip --version \\\n\t&& node --version \\\n\t&& npm --version \\\n\t&& yarn --version \\\n\t&& bash -c \"${DOCKER_FILE_INSTALL_COMMAND:?Build argument DOCKER_FILE_INSTALL_COMMAND needs to be set (check READEME.md)!}\" \\\n\t&& echo \"OK\"\n\n# Build container\nFROM base AS build\nARG DOCKER_FILE_BUILD_COMMAND\nENV DOCKER_FILE_BUILD_COMMAND ${DOCKER_FILE_BUILD_COMMAND}\nUSER app:app\nWORKDIR /home/app\nRUN echo \"# Build time .env config!\" >> /home/app/.env && \\\n\techo \"COOKIE_SECRET=undefined\" >> /home/app/.env && \\\n\techo \"DATABASE_URL=undefined\" >> /home/app/.env && \\\n\techo \"REDIS_URL=undefined\" >> /home/app/.env && \\\n\techo \"NODE_ENV=production\" >> /home/app/.env\n# If you don't have this directory, you can create it by command `bash ./bin/warm-docker-cache` or just create empty ./.docker-cache-warming dir (no cache mode)\nADD --chown=app:app ./.docker-cache-warming /home/app\n# Cache packages!\nRUN set -ex && yarn install --frozen-lockfile && yarn cache clean;\nADD --chown=app:app . /home/app\nRUN set -ex && yarn && bash -c \"${DOCKER_FILE_BUILD_COMMAND:?Build argument DOCKER_FILE_BUILD_COMMAND needs to be set (check READEME.md)!}\" && \\\n    yarn cache clean && rm -rf /home/app/.env && rm -rf /home/app/.config && rm -rf /home/app/.yarn && rm -rf /home/app/.cache && \\\n    ls -lah /home/app/\n\n# Runtime container\nFROM base\nUSER app:app\nWORKDIR /home/app\nCOPY --from=build --chown=root:root /home/app /home/app\n"
}