{
  "startTime": 1674256245753,
  "endTime": 1674256247015,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 206,
        "lineEnd": 206,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nUSER root\n\nENV \\\n    USER_GID=0 \\\n    RESOURCES_PATH=\"/resources\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    SHELL=\"/bin/bash\" \\\n    HOME=\"/root\"\n\nWORKDIR $HOME\n\n# Make folders\nRUN mkdir $RESOURCES_PATH && chmod a+rwx $RESOURCES_PATH\n\n# Layer cleanup script\nCOPY resources/scripts/clean-layer.sh  /usr/bin/clean-layer.sh\nCOPY resources/scripts/fix-permissions.sh  /usr/bin/fix-permissions.sh\n\n # Make clean-layer and fix-permissions executable\n RUN \\\n    chmod a+rwx /usr/bin/clean-layer.sh && \\\n    chmod a+rwx /usr/bin/fix-permissions.sh\n\n# Generate and Set locals\n# https://stackoverflow.com/questions/28405902/how-to-set-the-locale-inside-a-debian-ubuntu-docker-container#38553499\nRUN \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y locales && \\\n    # install locales-all?\n    sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n    locale-gen && \\\n    dpkg-reconfigure --frontend=noninteractive locales && \\\n    update-locale LANG=en_US.UTF-8 && \\\n    # Cleanup\n    clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\nENV LC_ALL=\"en_US.UTF-8\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\"\n\n# Install basics\nRUN \\\n\n\n    apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y sudo apt-utils && \\\n    apt-get upgrade -y && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        # This is necessary for apt to access HTTPS sources:\n        apt-transport-https \\\n        gnupg-agent \\\n        gpg-agent \\\n        gnupg2 \\\n        ca-certificates \\\n        build-essential \\\n        pkg-config \\\n        software-properties-common \\\n        libcurl4 \\\n        curl \\\n        wget \\\n        # zlibc \\\n        zlib1g-dev \\\n        git && \\\n    # Fix all execution permissions\n    chmod -R a+rwx /usr/local/bin/ && \\\n    # configure dynamic linker run-time bindings\n    ldconfig && \\\n    # Fix permissions\n    fix-permissions.sh $HOME && \\\n    # Cleanup\n    clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\n# Add tini\nRUN wget --no-verbose https://github.com/krallin/tini/releases/download/v0.19.0/tini -O /tini && \\\n    chmod +x /tini\n\n# Install OpenResty / Nginx\nRUN \\\n    OPEN_RESTY_VERSION=\"1.19.3.1\" && \\\n    mkdir $RESOURCES_PATH\"/openresty\" && \\\n    cd $RESOURCES_PATH\"/openresty\" && \\\n    apt-get update && \\\n    apt-get purge -y nginx nginx-common && \\\n    # libpcre required, otherwise you get a 'the HTTP rewrite module requires the PCRE library' error\n    # Install apache2-utils to generate user:password file for nginx.\n    apt-get install --no-install-recommends -y libssl-dev libpcre3 libpcre3-dev apache2-utils zlib1g-dev && \\\n    wget --no-verbose https://openresty.org/download/openresty-$OPEN_RESTY_VERSION.tar.gz  -O ./openresty.tar.gz && \\\n    tar xfz ./openresty.tar.gz && \\\n    rm ./openresty.tar.gz && \\\n    cd ./openresty-$OPEN_RESTY_VERSION/ && \\\n    # Surpress output - if there is a problem remove  > /dev/null\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-http_stub_status_module --with-http_sub_module > /dev/null && \\\n    make -j2 > /dev/null && \\\n    make install > /dev/null && \\\n    # create log dir and file - otherwise openresty will throw an error\n    mkdir -p /var/log/nginx/ && \\\n    touch /var/log/nginx/upstream.log && \\\n    cd $RESOURCES_PATH && \\\n    rm -r $RESOURCES_PATH\"/openresty\" && \\\n    # Fix permissions\n    chmod -R a+rwx $RESOURCES_PATH && \\\n    # Cleanup\n    clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\nENV PATH=/usr/local/openresty/nginx/sbin:$PATH\n\n### RUNTIMES ###\n# Install Miniconda: https://repo.continuum.io/miniconda/\n\nENV \\\n    # TODO: CONDA_DIR is deprecated and should be removed in the future\n    CONDA_DIR=/opt/conda \\\n    CONDA_ROOT=/opt/conda \\\n    PYTHON_VERSION=\"3.8.5\" \\\n    CONDA_PYTHON_DIR=/opt/conda/lib/python3.8 \\\n    MINICONDA_VERSION=4.9.2 \\\n    MINICONDA_MD5=122c8c9beb51e124ab32a0fa6426c656 \\\n    CONDA_VERSION=4.9.2\n\nRUN wget --no-verbose https://repo.anaconda.com/miniconda/Miniconda3-py38_${CONDA_VERSION}-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    echo \"${MINICONDA_MD5} *miniconda.sh\" | md5sum -c - && \\\n    /bin/bash ~/miniconda.sh -b -p $CONDA_ROOT && \\\n    export PATH=$CONDA_ROOT/bin:$PATH && \\\n    rm ~/miniconda.sh && \\\n    # Configure conda\n    # TODO: Add conde-forge as main channel -> remove if testted\n    # TODO, use condarc file\n    $CONDA_ROOT/bin/conda config --system --add channels conda-forge && \\\n    $CONDA_ROOT/bin/conda config --system --set auto_update_conda False && \\\n    $CONDA_ROOT/bin/conda config --system --set show_channel_urls True && \\\n    $CONDA_ROOT/bin/conda config --system --set channel_priority strict && \\\n    # Deactivate pip interoperability (currently default), otherwise conda tries to uninstall pip packages\n    $CONDA_ROOT/bin/conda config --system --set pip_interop_enabled false && \\\n    # Update conda\n    $CONDA_ROOT/bin/conda update -y -n base -c defaults conda && \\\n    $CONDA_ROOT/bin/conda update -y setuptools && \\\n    $CONDA_ROOT/bin/conda install -y conda-build && \\\n    # Update selected packages - install python 3.8.x\n    $CONDA_ROOT/bin/conda install -y --update-all python=$PYTHON_VERSION && \\\n    # Link Conda\n    ln -s $CONDA_ROOT/bin/python /usr/local/bin/python && \\\n    ln -s $CONDA_ROOT/bin/conda /usr/bin/conda && \\\n    # Update\n    $CONDA_ROOT/bin/conda install -y pip && \\\n    $CONDA_ROOT/bin/pip install --no-cache-dir --upgrade pip && \\\n    chmod -R a+rwx /usr/local/bin/ && \\\n    # Cleanup - Remove all here since conda is not in path as of now\n    # find /opt/conda/ -follow -type f -name '*.a' -delete && \\\n    # find /opt/conda/ -follow -type f -name '*.js.map' -delete && \\\n    $CONDA_ROOT/bin/conda clean -y --packages && \\\n    $CONDA_ROOT/bin/conda clean -y -a -f && \\\n    $CONDA_ROOT/bin/conda build purge-all && \\\n    # Fix permissions\n    fix-permissions.sh $CONDA_ROOT && \\\n    # Cleanup\n    clean-layer.sh\n\nENV PATH=$CONDA_ROOT/bin:$PATH\n\n# There is nothing added yet to LD_LIBRARY_PATH, so we can overwrite\nENV LD_LIBRARY_PATH=$CONDA_ROOT/lib\n\n# Install pipx\nRUN pip install --no-cache-dir pipx && \\\n    # Configure pipx\n    python -m pipx ensurepath && \\\n    # Cleanup\n    clean-layer.sh\nENV PATH=$HOME/.local/bin:$PATH\n\n# Install supervisor for process supervision\nRUN \\\n    apt-get update && \\\n    # Create sshd run directory - required for starting process via supervisor\n    mkdir -p /var/run/sshd && chmod 400 /var/run/sshd && \\\n    # Install rsyslog for syslog logging\n    apt-get install -y --no-install-recommends rsyslog && \\\n    pipx install supervisor && \\\n    pipx inject supervisor supervisor-stdout && \\\n    # supervisor needs this logging path\n    mkdir -p /var/log/supervisor/ && \\\n    # Cleanup\n    clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\n### Install python libs\nRUN \\\n    ln -s -f $CONDA_ROOT/bin/python /usr/bin/python && \\\n    apt-get update && \\\n    # Upgrade pip\n    pip install --no-cache-dir --upgrade pip && \\\n    # Install streamlit\n    pip install --no-cache-dir streamlit && \\\n    # Intsall bokeh, needed for streamlit open link hack\n    pip install --no-cache-dir bokeh && \\\n    # Install PyTorch: Required by transformer demos\n    pip install --no-cache-dir torch==1.8.1+cpu -f https://download.pytorch.org/whl/torch_stable.html && \\\n    # Cleanup\n    clean-layer.sh\n\n# Install opyrator from distribution\n# hadolint ignore=DL3010\nCOPY ./resources/opyrator.tar.gz $RESOURCES_PATH/opyrator.tar.gz\n# hadolint ignore=DL3013\nRUN pip install --no-cache-dir $RESOURCES_PATH/opyrator.tar.gz\n\n# Copy playground app to demos folder\nCOPY resources/playground_app.py  $RESOURCES_PATH/demos/\n# Copy demos to demos folder\nCOPY resources/demos/  $RESOURCES_PATH/demos/\n\n# Install ffmpeg for audio seperation demo\nRUN \\\n    apt-get update && \\\n    apt-get -y --no-install-recommends install ffmpeg && \\\n    # Cleanup\n    clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\nCOPY ./resources/scripts/install-demos.py $RESOURCES_PATH/scripts/install-demos.py\nRUN python $RESOURCES_PATH/scripts/install-demos.py\n    # TODO: No cleanup should be performed here, otherwise the huggingface models are missing\n    # clean-layer.sh\n\n# Copy files into workspace\nCOPY \\\n    resources/scripts/docker-entrypoint.py \\\n    resources/5xx.html \\\n    $RESOURCES_PATH/\n\nCOPY resources/scripts/activate-analytics.py $RESOURCES_PATH/scripts/\n\n# Configure nginx\nCOPY resources/nginx/nginx.conf /etc/nginx/nginx.conf\n\n# Configure supervisor process\nCOPY resources/supervisor/supervisord.conf /etc/supervisor/supervisord.conf\n# Copy all supervisor program definitions into workspace\nCOPY resources/supervisor/programs/ /etc/supervisor/conf.d/\n\n\n# use global option with tini to kill full process groups: https://github.com/krallin/tini#process-group-killing\nENTRYPOINT [\"/tini\", \"-g\", \"--\"]\n\nCMD [\"python\", \"/resources/docker-entrypoint.py\"]\n\nEXPOSE 8080\n"
}