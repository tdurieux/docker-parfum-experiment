{
  "startTime": 1674253799401,
  "endTime": 1674253800671,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 3,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 3,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 3,
        "columnEnd": 114
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 3,
        "columnEnd": 120
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 3,
        "columnEnd": 118
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 3,
        "columnEnd": 72
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 3,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 3,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 115,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 3,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 30,
        "columnStart": 3,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 3,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM mltooling/ssh-proxy:0.1.11\n\nWORKDIR /\n\n### INSTALL BASICS ###\n\n# Set Debian Frontend to 'noninteractive' as needed for some programs/installations (e.g. sslh does not ask for mode during installation)\nENV \\\n   DEBIAN_FRONTEND=\"noninteractive\" \\\n   _SSL_RESOURCES_PATH=$_RESOURCES_PATH/ssl\n\nRUN \\\n   apt-get update && \\\n   apt-get install -y --no-install-recommends \\\n      build-essential libssl-dev zlib1g-dev \\\n      git \\\n      #python3 \\\n      python3-dev \\\n      #python3-pip \\\n      python3-setuptools \\\n      python3-wheel \\\n      libssl-dev \\\n      libcurl4-openssl-dev \\\n      build-essential \\\n      sqlite3 \\\n      curl \\\n      dnsutils \\\n      $(bash -c 'if [[ $JUPYTERHUB_VERSION == \"git\"* ]]; then \\\n        # workaround for https://bugs.launchpad.net/ubuntu/+source/nodejs/+bug/1794589\n        echo nodejs=8.10.0~dfsg-2ubuntu0.2 nodejs-dev=8.10.0~dfsg-2ubuntu0.2 npm; \\\n      fi') \\\n      && \\\n   # Cleanup\n   clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\n# Add tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini -O /tini && \\\n    chmod +x /tini\n\n# Install resty version of nginx\n## We must build it ourselves as we need the newest version to tunnel SSH and HTTPS over the same port\nRUN \\\n    apt-get update && \\\n    apt-get purge -y nginx nginx-common && \\\n    # libpcre required, otherwise you get a 'the HTTP rewrite module requires the PCRE library' error\n    # Install apache2-utils to generate user:password file for nginx.\n    apt-get install --no-install-recommends -y libssl-dev libpcre3 libpcre3-dev apache2-utils && \\\n    mkdir $_RESOURCES_PATH\"/openresty\" && \\\n    cd $_RESOURCES_PATH\"/openresty\" && \\\n    wget --quiet https://openresty.org/download/openresty-1.15.8.1.tar.gz  -O ./openresty.tar.gz && \\\n    tar xfz ./openresty.tar.gz && \\\n    rm ./openresty.tar.gz && \\\n    cd ./openresty-1.15.8.1/ && \\\n    # Surpress output - if there is a problem remove  > /dev/null\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-http_stub_status_module --with-http_sub_module > /dev/null && \\\n    make -j2 > /dev/null && \\\n    make install > /dev/null && \\\n    # create log dir and file - otherwise openresty will throw an error\n    mkdir -p /var/log/nginx/ && \\\n    touch /var/log/nginx/upstream.log && \\\n    cd $_RESOURCES_PATH && \\\n    rm -r $_RESOURCES_PATH\"/openresty\" && \\\n    # Fix permissions\n    chmod -R a+rwx $_RESOURCES_PATH && \\\n    # Cleanup\n    clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\nENV \\\n   PATH=/usr/local/openresty/nginx/sbin:$PATH\n\n# Install nodejs & npm for JupyterHub's configurable-http-proxy\nRUN \\\n   apt-get update && \\\n   #apt-get install -y curl && \\\n   curl -f -sL https://deb.nodesource.com/setup_10.x | bash - && \\\n   apt-get install --no-install-recommends -y nodejs && \\\n   # Cleanup\n   clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\n# Install JupyterHub\nRUN \\\n   npm install -g configurable-http-proxy && \\\n   python3 -m pip install --no-cache jupyterhub && \\\n   # Cleanup\n   clean-layer.sh && npm cache clean --force;\n\n### END BASICS ###\n\n### MLHUB-SPECIFIC INSTALLATIONS ###\n\n# Copy mlhubspawner module to install it\nCOPY resources/mlhubspawner /mlhubspawner\n\nRUN \\\n   pip install --no-cache-dir --no-cache git+https://github.com/jupyterhub/dockerspawner@d1f27e2855d2cefbdb25b29cc069b9ca69d564e3 && \\\n   pip install --no-cache-dir --no-cache git+https://github.com/ml-tooling/nativeauthenticator@9859a69dcc9d2ae8d827f192a1580d86f897e9f1 && \\\n   pip install --no-cache-dir --no-cache git+https://github.com/jupyterhub/ldapauthenticator@b32a5ea23449edc0519ba4cd86dd0cc0c36896d5 && \\\n   pip install --no-cache-dir --no-cache git+https://github.com/ryanlovett/imagespawner && \\\n   pip install --no-cache-dir --no-cache /mlhubspawner && \\\n   rm -r /mlhubspawner && \\\n   pip install --no-cache-dir tornado==5.1.1 && \\\n   # Cleanup\n   clean-layer.sh\n\n### END MLHUB-SPECIFIC INSTALLATIONS ###\n\n### INCUBATION ZONE ###\n\n# Kubernetes Support\nADD https://raw.githubusercontent.com/ml-tooling/zero-to-mlhub-k8s/master/images/hub/cull_idle_servers.py /usr/local/bin/cull_idle_servers.py\nADD resources/kubernetes/jupyterhub_chart_config.py $_RESOURCES_PATH/jupyterhub_chart_config.py\n# Copy the jupyterhub config that has a lot of options to be configured\n\nRUN chmod u+rx /usr/local/bin/cull_idle_servers.py\n\nRUN pip3 install --no-cache-dir oauthenticator psutil yamlreader pyjwt \\\n\n\n         jupyterhub-kubespawner==0.11.* \\\n\n\n         kubernetes==10.0.* \\\n\n         pycurl==7.43.0.*\nRUN apt-get update && apt-get install --no-install-recommends -y pcregrep && clean-layer.sh && rm -rf /var/lib/apt/lists/*;\n\n### END INCUBATION ZONE ###\n\n### CONFIGURATION ###\n\nARG ARG_HUB_VERSION=\"unknown\"\nENV HUB_VERSION=$ARG_HUB_VERSION\n\nCOPY resources/nginx.conf /etc/nginx/nginx.conf\nCOPY resources/scripts $_RESOURCES_PATH/scripts\nCOPY resources/docker-entrypoint.sh $_RESOURCES_PATH/docker-entrypoint.sh\nCOPY resources/logo.png /usr/local/share/jupyterhub/static/images/jupyter.png\nCOPY resources/jupyterhub_config.py $_RESOURCES_PATH/jupyterhub_config.py\nCOPY resources/jupyterhub-mod/template-home.html /usr/local/share/jupyterhub/templates/home.html\nCOPY resources/jupyterhub-mod/template-admin.html /usr/local/share/jupyterhub/templates/admin.html\nCOPY resources/jupyterhub-mod/ssh-dialog-snippet.html /usr/local/share/jupyterhub/templates/ssh-dialog-snippet.html\nCOPY resources/jupyterhub-mod/info-dialog-snippet.html /usr/local/share/jupyterhub/templates/info-dialog-snippet.html\nCOPY resources/jupyterhub-mod/version-number-snippet.html /usr/local/share/jupyterhub/templates/version-number-snippet.html\nCOPY resources/jupyterhub-mod/jsonpresenter /usr/local/share/jupyterhub/static/components/jsonpresenter/\nCOPY resources/jupyterhub-mod/cleanup-service.py /resources/cleanup-service.py\n\nRUN \\\n   touch $_RESOURCES_PATH/jupyterhub_user_config.py && \\\n   mkdir $_SSL_RESOURCES_PATH && chmod ug+rwx $_SSL_RESOURCES_PATH && \\\n   chmod -R ug+rxw $_RESOURCES_PATH/scripts && \\\n   chmod ug+rwx $_RESOURCES_PATH/docker-entrypoint.sh\n\nRUN \\\n   # Replace the variable with the actual value. There seems to be no direct functionality in ninja-templates\n   sed -i \"s/\\$HUB_VERSION/$HUB_VERSION/g\" /usr/local/share/jupyterhub/templates/version-number-snippet.html\n\n# Set python3 to default python. Needed for the ssh-proxy scripts\nRUN \\\n   rm /usr/bin/python && \\\n   ln -s /usr/bin/python3 /usr/bin/python\n\nENV \\\n   DEFAULT_WORKSPACE_PORT=8080 \\\n   SSH_PERMIT_TARGET_PORT=8080 \\\n   SSH_PERMIT_TARGET_HOST=\"ws-*\" \\\n   START_NGINX=true \\\n   START_SSH=true \\\n   START_JHUB=true \\\n   START_CHP=false \\\n   EXECUTION_MODE=\"local\" \\\n   HUB_NAME=\"mlhub\" \\ \n   CLEANUP_INTERVAL_SECONDS=3600 \\\n   DYNAMIC_WHITELIST_ENABLED=\"false\" \\\n   IS_CLEANUP_SERVICE_ENABLED=\"true\"\n\n### END CONFIGURATION ###\n\n### LABELS ###\n\nARG ARG_BUILD_DATE=\"unknown\"\nARG ARG_VCS_REF=\"unknown\"\n\n# Overwrite & add common labels\nLABEL \\\n    \"maintainer\"=\"mltooling.team@gmail.com\" \\\n    # Kubernetes Labels\n    \"io.k8s.description\"=\"Multi-user hub which spawns and manages workspace instances.\" \\\n    \"io.k8s.display-name\"=\"Machine Learning Hub\" \\\n    # Openshift labels: https://docs.okd.io/latest/creating_images/metadata.html\n    \"io.openshift.expose-services\"=\"8080:http, 5901:xvnc\" \\\n    \"io.openshift.non-scalable\"=\"true\" \\\n    \"io.openshift.tags\"=\"workspace, machine learning, vnc, ubuntu, xfce\" \\\n    \"io.openshift.min-memory\"=\"1Gi\" \\\n    # Open Container labels: https://github.com/opencontainers/image-spec/blob/master/annotations.md\n    \"org.opencontainers.image.title\"=\"Machine Learning Hub\" \\\n    \"org.opencontainers.image.description\"=\"Multi-user hub which spawns and manages workspace instances.\" \\\n    \"org.opencontainers.image.documentation\"=\"https://github.com/ml-tooling/ml-hub\" \\\n    \"org.opencontainers.image.url\"=\"https://github.com/ml-tooling/ml-hub\" \\\n    \"org.opencontainers.image.source\"=\"https://github.com/ml-tooling/ml-hub\" \\\n    \"org.opencontainers.image.licenses\"=\"Apache-2.0\" \\\n    \"org.opencontainers.image.version\"=$HUB_VERSION \\\n    \"org.opencontainers.image.vendor\"=\"ML Tooling\" \\\n    \"org.opencontainers.image.authors\"=\"Benjamin Raehtlein & Lukas Masuch\" \\\n    \"org.opencontainers.image.revision\"=$ARG_VCS_REF \\\n    \"org.opencontainers.image.created\"=$ARG_BUILD_DATE \\ \n    # Label Schema Convention (deprecated): http://label-schema.org/rc1/\n    \"org.label-schema.name\"=\"Machine Learning Hub\" \\\n    \"org.label-schema.description\"=\"Multi-user hub which spawns and manages workspace instances.\" \\\n    \"org.label-schema.usage\"=\"https://github.com/ml-tooling/ml-hub\" \\\n    \"org.label-schema.url\"=\"https://github.com/ml-tooling/ml-hub\" \\\n    \"org.label-schema.vcs-url\"=\"https://github.com/ml-tooling/ml-hub\" \\\n    \"org.label-schema.vendor\"=\"ML Tooling\" \\\n    \"org.label-schema.version\"=$HUB_VERSION \\\n    \"org.label-schema.schema-version\"=\"1.0\" \\\n    \"org.label-schema.vcs-ref\"=$ARG_VCS_REF \\\n    \"org.label-schema.build-date\"=$ARG_BUILD_DATE\n\n### END LABELS ###\n\n# use global option with tini to kill full process groups: https://github.com/krallin/tini#process-group-killing\nENTRYPOINT [\"/tini\", \"-g\", \"--\"]\n\n# Entrypoint must use the array notation, otherwise the entrypoint.sh script does not receive passed cmd arguments (probably because Docker will start it like this: /bin/sh -c /bin/bash /resources/docker-entrypoint.sh <cmd-args>)\nCMD [\"/bin/bash\", \"/resources/docker-entrypoint.sh\"]\n\n# The port on which nginx listens and checks whether it's http(s) or ssh traffic\nEXPOSE 8080\n\n"
}