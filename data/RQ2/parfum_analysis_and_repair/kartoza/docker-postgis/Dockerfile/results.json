{
  "startTime": 1674253028683,
  "endTime": 1674253030263,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 16,
        "columnEnd": 27
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 82,
        "columnEnd": 136
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 29,
        "columnStart": 23,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 29,
        "columnStart": 23,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 103,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 8,
        "columnEnd": 138
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##############################################################################\n# Base stage                                                                 #\n##############################################################################\nARG DISTRO=debian\nARG IMAGE_VERSION=bullseye\nARG IMAGE_VARIANT=slim\nFROM $DISTRO:$IMAGE_VERSION-$IMAGE_VARIANT AS postgis-base\nLABEL maintainer=\"Tim Sutton<tim@kartoza.com>\"\n# Cache invalidation number is used to invalidate a cache.\n# Simply increment the number by 1 to reset the cache in local and GitHub Action\n# This is added because we can't purge GitHub Action cache manually\nLABEL cache.invalidation.number=\"1\"\nARG CACHE_INVALIDATION_NUMBER=1\n\n\n# Reset ARG for version\nARG IMAGE_VERSION\n\nRUN apt-get -qq update --fix-missing && apt-get -qq --yes upgrade\n\nRUN set -eux \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update \\\n    && apt-get -y --no-install-recommends install \\\n        locales gnupg2 wget ca-certificates rpl pwgen software-properties-common  iputils-ping \\\n        apt-transport-https curl gettext \\\n    && dpkg-divert --local --rename --add /sbin/initctl && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get -y update; apt-get -y --no-install-recommends install build-essential autoconf libxml2-dev zlib1g-dev netcat gdal-bin \\\n    figlet toilet && rm -rf /var/lib/apt/lists/*;\n\n# Generating locales takes a long time. Utilize caching by runnig it by itself\n# early in the build process.\n\n# Generate all locale only on deployment mode build\n# Set to empty string to generate only default locale\nARG GENERATE_ALL_LOCALE=1\nARG LANGS=\"en_US.UTF-8,id_ID.UTF-8\"\nARG LANG=en_US.UTF-8\nENV LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US:en \\\n    LC_ALL=en_US.UTF-8\n\nCOPY ./base_build/scripts/locale.gen /etc/all.locale.gen\nCOPY ./base_build/scripts/locale-filter.sh /etc/locale-filter.sh\nRUN if [ -z \"${GENERATE_ALL_LOCALE}\" ] || [ $GENERATE_ALL_LOCALE -eq 0 ]; \\\n\tthen \\\n\t\tcat /etc/all.locale.gen | grep \"${LANG}\" > /etc/locale.gen; \\\n\t\t/bin/bash /etc/locale-filter.sh; \\\n\telse \\\n\t\tcp -f /etc/all.locale.gen /etc/locale.gen; \\\n\tfi; \\\n\tset -eux \\\n\t&& /usr/sbin/locale-gen\n\nRUN update-locale ${LANG}\n# Cleanup resources\nRUN apt-get -y --purge autoremove  \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n##############################################################################\n# Production Stage                                                           #\n##############################################################################\nFROM postgis-base AS postgis-prod\n\n\n# Reset ARG for version\nARG IMAGE_VERSION\nARG POSTGRES_MAJOR_VERSION=14\nARG POSTGIS_MAJOR_VERSION=3\nARG POSTGIS_MINOR_RELEASE=2\nARG TIMESCALE_VERSION=2-2.5.0\nARG BUILD_TIMESCALE=false\n\n\n\nRUN set -eux \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update \\\n    && sh -c \"echo \\\"deb http://apt.postgresql.org/pub/repos/apt/ ${IMAGE_VERSION}-pgdg main\\\" > /etc/apt/sources.list.d/pgdg.list\" \\\n    && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc -O- | apt-key add - \\\n    && apt-get -y --purge autoremove \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && dpkg-divert --local --rename --add /sbin/initctl\n\n\n#-------------Application Specific Stuff ----------------------------------------------------\n\n# We add postgis as well to prevent build errors (that we dont see on local builds)\n# on docker hub e.g.\n# The following packages have unmet dependencies:\nRUN set -eux \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    &&  apt-get update \\\n    && apt-get -y --no-install-recommends install postgresql-client-${POSTGRES_MAJOR_VERSION} \\\n        postgresql-common postgresql-${POSTGRES_MAJOR_VERSION} \\\n        postgresql-${POSTGRES_MAJOR_VERSION}-postgis-${POSTGIS_MAJOR_VERSION} \\\n        netcat postgresql-${POSTGRES_MAJOR_VERSION}-ogr-fdw \\\n        postgresql-${POSTGRES_MAJOR_VERSION}-postgis-${POSTGIS_MAJOR_VERSION}-scripts \\\n        postgresql-plpython3-${POSTGRES_MAJOR_VERSION} postgresql-${POSTGRES_MAJOR_VERSION}-pgrouting \\\n        postgresql-server-dev-${POSTGRES_MAJOR_VERSION} postgresql-${POSTGRES_MAJOR_VERSION}-cron && rm -rf /var/lib/apt/lists/*;\n\n\nRUN if [ \"${BUILD_TIMESCALE}\" =~ [Tt][Rr][Uu][Ee] ]; then \\\n        export DEBIAN_FRONTEND=noninteractive && \\\n        sh -c \"echo \\\"deb [signed-by=/usr/share/keyrings/timescale.keyring] https://packagecloud.io/timescale/timescaledb/debian/ ${IMAGE_VERSION} main\\\" > /etc/apt/sources.list.d/timescaledb.list\" && \\\n        wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --batch --dearmor -o /usr/share/keyrings/timescale.keyring && \\\n        apt-get update && \\\n        apt-get -y --no-install-recommends install timescaledb-${TIMESCALE_VERSION}-postgresql-${POSTGRES_MAJOR_VERSION} timescaledb-tools; rm -rf /var/lib/apt/lists/*; \\\n    fi;\n\nRUN  echo $POSTGRES_MAJOR_VERSION >/tmp/pg_version.txt\nRUN  echo $POSTGIS_MAJOR_VERSION >/tmp/pg_major_version.txt\nRUN  echo $POSTGIS_MINOR_RELEASE >/tmp/pg_minor_version.txt\nENV \\\n    PATH=\"$PATH:/usr/lib/postgresql/${POSTGRES_MAJOR_VERSION}/bin\"\n# Compile pointcloud extension\n\nRUN wget -O- https://github.com/pgpointcloud/pointcloud/archive/master.tar.gz | tar xz && \\\ncd pointcloud-master && \\\n./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j 4 && make install && \\\ncd .. && rm -Rf pointcloud-master\n\n# Cleanup resources\nRUN apt-get -y --purge autoremove  \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Open port 5432 so linked containers can see them\nEXPOSE 5432\n\n# Copy scripts\nADD ./scripts /scripts\nWORKDIR /scripts\nRUN chmod +x *.sh\n\n# Run any additional tasks here that are too tedious to put in\n# this dockerfile directly.\nRUN set -eux \\\n    && /scripts/setup.sh;rm /scripts/.pass_*\nRUN echo 'figlet -t \"Kartoza Docker PostGIS\"' >> ~/.bashrc\nVOLUME /var/lib/postgresql\n\nENTRYPOINT /scripts/docker-entrypoint.sh\n\n\n##############################################################################\n# Testing Stage                                                           #\n##############################################################################\nFROM postgis-prod AS postgis-test\n\nCOPY ./scenario_tests/utils/requirements.txt /lib/utils/requirements.txt\n\nRUN set -eux \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update \\\n    && apt-get -y --no-install-recommends install python3-pip \\\n    && apt-get -y --purge autoremove \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN pip3 install --no-cache-dir -r /lib/utils/requirements.txt\n"
}