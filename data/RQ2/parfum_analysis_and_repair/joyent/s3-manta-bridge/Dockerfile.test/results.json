{
  "startTime": 1674252809984,
  "endTime": 1674252810617,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 7,
        "columnEnd": 171
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 8,
        "columnEnd": 19
      }
    },
    {
      "rule": "npmCacheCleanUseForce",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 8,
        "columnEnd": 23
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 16,
        "columnStart": 8,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile is soley intented for running automated tests in an environment\n# that is nearly identical to the deployed Docker environment.\n\nFROM alpine:3.4\nMAINTAINER Elijah Zupancic <elijah@zupancic.name>\n\nENV TZ=utc\nENV NODE_VERSION=4.5.0\n\n# Copy the application\nRUN mkdir -p /home/app/tmp\nCOPY docker/usr/local/bin/proclimit.sh /usr/local/bin/proclimit.sh\n\nRUN chmod +x /usr/local/bin/proclimit.sh \\\n     && apk upgrade --update \\\n     && apk add --no-cache curl make gcc g++ linux-headers paxctl musl-dev git \\\n        libgcc libstdc++ binutils-gold python openssl-dev zlib-dev \\\n     && mkdir -p /root/src\n\n# Enable to download already built node and just install it. The actual\n# production image will fully build it, but for the testing image we download\n# an already compiled version and install it because it makes the whole process\n# go faster.\nRUN cd /root/src \\\n    && curl -f -sSL https://us-east.manta.joyent.com/elijah.zupancic/public/s3-manta-bridge/node-v${NODE_VERSION}-x64-musl.tar.xz > /tmp/node-v${NODE_VERSION}-x64-musl.tar.xz \\\n    && echo \"97e60a7cba1f7a2e00a768fa597a1cfe738b335295f010f7a3dfbc7854278249  /tmp/node-v${NODE_VERSION}-x64-musl.tar.xz\" | sha256sum -c \\\n    && unxz -c /tmp/node-v${NODE_VERSION}-x64-musl.tar.xz | tar xf - \\\n    && rm -f /tmp/node-v${NODE_VERSION}-x64-musl.tar.xz\n\n# Enable to rebuild node from scratch - use this to build another version and\n# then you will manually need to create an archive and upload it to Manta.\n#RUN cd /root/src \\\n#     && curl -sSL https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.xz > /tmp/node-v${NODE_VERSION}.tar.xz \\\n#     && echo \"97b99d378c56802444208409568e2e66c46332897f06aead74d1ffbe733bd488  /tmp/node-v${NODE_VERSION}.tar.xz\" | sha256sum -c \\\n#     && unxz -c /tmp/node-v${NODE_VERSION}.tar.xz | tar xf - \\\n#     && cd /root/src/node-* \\\n#     && ./configure --prefix=/usr --without-snapshot \\\n#     && make -j$(/usr/local/bin/proclimit.sh || grep -c ^processor /proc/cpuinfo 2>/dev/null || 1)\n\nRUN cd /root/src/node-* \\\n     && make install \\\n     && paxctl -cm /usr/bin/node \\\n     && npm cache clean --force\n\nRUN adduser -h /home/app -s /bin/sh -D app\n\nCOPY . /home/app\n\nRUN cd /home/app \\\n     && npm install \\\n     && find /home/app/node_modules/ -name \\*.md -type f | xargs rm -rf $1 \\\n     && find /home/app/node_modules/ -name docs -or -name examples -type d | xargs rm -rf $1 \\\n\n# This doesn't save any space on the container, but it removes all of the files\n# that would be removed in the production container.\nRUN rm -rf /root/src /tmp/* /usr/share/man /var/cache/apk/* \\\n        /root/.npm /root/.node-gyp /usr/lib/node_modules/npm/man \\\n        /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html \\\n        /etc/ssl /usr/include /tmp/node-v${NODE_VERSION}.tar.xz && npm cache clean --force;\n\n\nRUN chown -R app:app /home/app\n\nUSER app\nWORKDIR /home/app\n\nCMD [\"/usr/bin/npm\", \"test\"]\n"
}