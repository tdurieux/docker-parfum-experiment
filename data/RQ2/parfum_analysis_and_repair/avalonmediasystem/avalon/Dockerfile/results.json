{
  "startTime": 1674251509979,
  "endTime": 1674251511061,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 12,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 12,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 12,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 12,
        "columnEnd": 57
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 12,
        "columnEnd": 61
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 12,
        "columnEnd": 24
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 12,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 30,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 12,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 84,
        "lineEnd": 86,
        "columnStart": 12,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 35,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 30,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 30,
        "columnEnd": 91
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 71,
        "columnStart": 12,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 12,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 86,
        "columnStart": 12,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 30,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 84,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 35,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "# Base stage for building gems\nFROM        ruby:2.7-bullseye as bundle\nLABEL       stage=build\nLABEL       project=avalon\nRUN        apt-get update && apt-get upgrade -y build-essential && apt-get autoremove \\\n         && apt-get install -y --no-install-recommends --fix-missing \\\n            cmake \\\n            pkg-config \\\n            zip \\\n            git \\\n            ffmpeg \\\n            libsqlite3-dev \\\n         && rm -rf /var/lib/apt/lists/* \\\n         && apt-get clean\n\nCOPY        Gemfile ./Gemfile\nCOPY        Gemfile.lock ./Gemfile.lock\n\nRUN         gem install bundler -v \"$(grep -A 1 \"BUNDLED WITH\" Gemfile.lock | tail -n 1)\" \\\n         && bundle config build.nokogiri --use-system-libraries\n\n\n# Build development gems\nFROM        bundle as bundle-dev\nLABEL       stage=build\nLABEL       project=avalon\nRUN         bundle config set --local without 'production' \\\n         && bundle config set --local with 'aws development test postgres' \\\n         && bundle install\n\n\n# Download binaries in parallel\nFROM        ruby:2.7-bullseye as download\nLABEL       stage=build\nLABEL       project=avalon\nRUN curl -f -L https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz | tar xvz -C /usr/bin/\nRUN curl -f https://chromedriver.storage.googleapis.com/2.46/chromedriver_linux64.zip -o /usr/local/bin/chromedriver \\\n         && chmod +x /usr/local/bin/chromedriver\nRUN curl -f https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o /chrome.deb\nRUN apt-get -y update && apt-get install --no-install-recommends -y ffmpeg && rm -rf /var/lib/apt/lists/*;\n\n\n# Base stage for building final images\nFROM        ruby:2.7-slim-bullseye as base\nLABEL       stage=build\nLABEL       project=avalon\nRUN echo \"deb     http://ftp.us.debian.org/debian/    bullseye main contrib non-free\"  >  /etc/apt/sources.list.d/bullseye.list \\\n         && echo \"deb-src http://ftp.us.debian.org/debian/    bullseye main contrib non-free\"  >> /etc/apt/sources.list.d/bullseye.list \\\n         && cat /etc/apt/sources.list.d/bullseye.list \\\n         && apt-get update && apt-get install -y --no-install-recommends curl gnupg2 ffmpeg \\\n         && curl -f -sL https://deb.nodesource.com/setup_12.x | bash - \\\n         && curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n         && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n         && cat /etc/apt/sources.list.d/nodesource.list \\\n         && cat /etc/apt/sources.list.d/yarn.list && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && \\\n            apt-get -y dist-upgrade && \\\n            apt-get install -y --no-install-recommends --allow-unauthenticated \\\n            nodejs \\\n            yarn \\\n            lsof \\\n            x264 \\\n            sendmail \\\n            git \\\n            libxml2-dev \\\n            libxslt-dev \\\n            libpq-dev \\\n            openssh-client \\\n            zip \\\n            dumb-init \\\n            libsqlite3-dev \\\n         && apt-get -y --no-install-recommends install mediainfo \\\n         && ln -s /usr/bin/lsof /usr/sbin/ && rm -rf /var/lib/apt/lists/*;\n\nRUN         useradd -m -U app \\\n         && su -s /bin/bash -c \"mkdir -p /home/app/avalon\" app\nWORKDIR     /home/app/avalon\n\n\n# Build devevelopment image\nFROM        base as dev\nLABEL       stage=final\nLABEL       project=avalon\nRUN apt-get install -y --no-install-recommends --allow-unauthenticated \\\n            build-essential \\\n            cmake && rm -rf /var/lib/apt/lists/*;\n\nCOPY        --from=bundle-dev /usr/local/bundle /usr/local/bundle\nCOPY        --from=download /chrome.deb /\nCOPY        --from=download /usr/local/bin/chromedriver /usr/local/bin/chromedriver\nCOPY        --from=download /usr/bin/dockerize /usr/bin/\nADD         docker_init.sh /\n\nARG         RAILS_ENV=development\nRUN         dpkg -i /chrome.deb || apt-get install -yf\n\n\n# Build production gems\nFROM        bundle as bundle-prod\nLABEL       stage=build\nLABEL       project=avalon\nRUN         bundle config set --local without 'development test' \\\n         && bundle config set --local with 'aws production postgres' \\\n         && bundle install\n\n\n# Install node modules\nFROM        node:12-bullseye-slim as node-modules\nLABEL       stage=build\nLABEL       project=avalon\nRUN apt-get update && apt-get install -y --no-install-recommends git ca-certificates && rm -rf /var/lib/apt/lists/*;\nCOPY        package.json .\nCOPY        yarn.lock .\nRUN yarn install && yarn cache clean;\n\n\n# Build production assets\nFROM        base as assets\nLABEL       stage=build\nLABEL       project=avalon\nCOPY        --from=bundle-prod --chown=app:app /usr/local/bundle /usr/local/bundle\nCOPY        --chown=app:app . .\nCOPY        --from=node-modules --chown=app:app /node_modules ./node_modules\n\nUSER        app\nENV         RAILS_ENV=production\n\nRUN         SECRET_KEY_BASE=$(ruby -r 'securerandom' -e 'puts SecureRandom.hex(64)') bundle exec rake webpacker:compile\nRUN         SECRET_KEY_BASE=$(ruby -r 'securerandom' -e 'puts SecureRandom.hex(64)') bundle exec rake assets:precompile\nRUN         cp config/controlled_vocabulary.yml.example config/controlled_vocabulary.yml\n\n\n# Build production image\nFROM        base as prod\nLABEL       stage=final\nLABEL       project=avalon\nCOPY        --from=assets --chown=app:app /home/app/avalon /home/app/avalon\nCOPY        --from=bundle-prod --chown=app:app /usr/local/bundle /usr/local/bundle\n\nUSER        app\nENV         RAILS_ENV=production\n"
}