{
  "startTime": 1674218443880,
  "endTime": 1674218445304,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 34,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 37,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 22,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\nLABEL Description=\"Aktualizr testing dockerfile for Ubuntu Focal with static checks\"\n\nENV DEBIAN_FRONTEND noninteractive\n\n# It is important to run these in the same RUN command, because otherwise\n# Docker layer caching breaks us\nRUN apt-get update && apt-get -y install --no-install-suggests --no-install-recommends \\\n  apt-transport-https \\\n  apt-utils \\\n  asn1c \\\n  autoconf \\\n  automake \\\n  bison \\\n  bash \\\n  ccache \\\n  clang-10 \\\n  clang-format-10 \\\n  clang-tidy-10 \\\n  clang-tools-10 \\\n  cmake \\\n  curl \\\n  doxygen \\\n  e2fslibs-dev \\\n  g++ \\\n  gcc \\\n  gdb \\\n  git \\\n  vim \\\n  graphviz \\\n  jq \\\n  lcov \\\n  libarchive-dev \\\n  libyaml-dev \\\n  libboost-dev \\\n  libboost-log-dev \\\n  libboost-program-options-dev \\\n  libboost-system-dev \\\n  libboost-test-dev \\\n  libboost-thread-dev \\\n  libcurl4-openssl-dev \\\n  libengine-pkcs11-openssl \\\n  libexpat1-dev \\\n  libfuse-dev \\\n  libglib2.0-dev \\\n  libgpgme11-dev \\\n  libgtest-dev \\\n  liblzma-dev \\\n  libp11-dev \\\n  libsofthsm2 \\\n  libsofthsm2-dev \\\n  libsodium-dev \\\n  libsqlite3-dev \\\n  libssl-dev \\\n  libltdl-dev \\\n  libtool \\\n  lshw \\\n  make \\\n  net-tools \\\n  ninja-build \\\n  opensc \\\n  pkg-config \\\n  psmisc \\\n  python-is-python3 \\\n  python3-dev \\\n  python3-gi \\\n  python3-openssl \\\n  python3-pip \\\n  python3-venv \\\n  softhsm2 \\\n  sqlite3 \\\n  strace \\\n  valgrind \\\n  wget \\\n  xsltproc \\\n  zip \\\n  docker-compose \\\n  sudo && rm -rf /var/lib/apt/lists/*;\n\nRUN ln -s clang-10 /usr/bin/clang && \\\n    ln -s clang++-10 /usr/bin/clang++\n\nWORKDIR /tmp\nRUN git clone https://github.com/pantoniou/libfyaml.git\nRUN cd libfyaml && ./bootstrap.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix /usr && make && make install\nRUN ldconfig\n\n# OSTREE with libcurl support for HSM\n#  This allows ostree calls to libcurl to be able to keys controlled by pkcs11\nWORKDIR /tmp\nRUN mkdir ostree && cd ostree && git init && git remote add origin https://github.com/ostreedev/ostree && \\\n    git fetch origin v2020.7 && git checkout FETCH_HEAD && \\\n    ./autogen.sh CFLAGS='-Wno-error=missing-prototypes' \\\n    --with-libarchive \\\n    --disable-man \\\n    --with-builtin-grub2-mkconfig \\\n    --with-curl --without-soup --prefix=/usr && \\\n    make -j8  install\n\n# Docker in docker\nRUN curl -f -sSL https://get.docker.com/ | sh\n\n# Install the magic wrapper.\nADD ./docker/wrapdocker /usr/local/bin/wrapdocker\nRUN chmod +x /usr/local/bin/wrapdocker\n\n# Install skopeo\nRUN echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list && \\\n    wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_20.04/Release.key -O- | apt-key add -\nRUN apt-get update && apt-get -y --no-install-recommends install skopeo && ln -s /usr/bin/skopeo /sbin/skopeo && rm -rf /var/lib/apt/lists/*;\n\n# Install specific version of docker-compose\nRUN pip3 install --no-cache-dir docker==4.2.1 && pip3 install --no-cache-dir docker-compose==1.26\n\nRUN useradd -m testuser && usermod -aG docker testuser\n\nWORKDIR /\n"
}