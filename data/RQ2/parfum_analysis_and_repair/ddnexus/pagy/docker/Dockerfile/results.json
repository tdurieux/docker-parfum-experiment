{
  "startTime": 1674250317110,
  "endTime": 1674250318436,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ruby_version=3\n\nFROM ruby:$ruby_version AS pagy-dev\n\nRUN apt-get update && apt-get install --no-install-recommends -y locales \\\n && sed -i 's/^# *\\(en_US.UTF-8\\)/\\1/' /etc/locale.gen \\\n && locale-gen \\\n && apt-get install --no-install-recommends -y \\\n        git \\\n        nano \\\n        libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb \\\n        libcanberra-gtk* \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n\nARG user\nARG group\nARG uid\nARG gid\nARG password=rubydev\nARG term=xterm-256color\nARG node_version=v16.10.0\n\nRUN mkdir /opt/node \\\n && curl -f https://nodejs.org/dist/${node_version}/node-${node_version}-linux-x64.tar.xz \\\n        | tar xfJ - --strip-components 1 -C /opt/node\n\nENV \\\n    PATH=/opt/node/bin:${PATH} \\\n    BUNDLE_PATH=/usr/local/bundle \\\n    GEM_HOME=/usr/local/bundle \\\n    BUNDLE_APP_CONFIG=/usr/local/bundle \\\n    BUNDLE_BIN=/usr/local/bundle/bin \\\n    LS_OPTIONS='--color=auto' \\\n    EDITOR=nano \\\n    SHELL=/bin/bash \\\n    TERM=$term \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US.UTF-8 \\\n    LC_ALL=en_US.UTF-8\n\n# setup users and .bashrc\n#   - same pasword for user and root\n#   - color prompt for user and root\n#   - create dirs and chown them\nRUN groupadd --gid=$gid --force $group \\\n && useradd --uid=$uid --gid=$gid --shell=/bin/bash --create-home $user \\\n && echo $user:$password | chpasswd \\\n && echo root:$password | chpasswd \\\n && sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/' /home/$user/.bashrc \\\n && sed -i 's/\\\\u@\\\\h\\\\\\[\\\\033\\[00m\\\\\\]:\\\\\\[\\\\033\\[01;34m\\\\\\]\\\\w\\\\\\[\\\\033\\[00m\\\\\\]/\\\\u \\\\\\[\\\\033\\[01;34m\\\\\\]\\\\w\\\\\\[\\\\033\\[00m\\\\\\] /' /home/$user/.bashrc \\\n && echo \"export PROMPT_COMMAND='history -a' && export HISTFILE=/home/$user/.bash_history\" >> /home/$user/.bashrc \\\n && cp /home/$user/.bashrc /root/.bashrc \\\n && mkdir -p \\\n        /home/$user/.config \\\n        /home/$user/.local/share \\\n        /pagy/node_modules \\\n && touch /pagy/node_modules/.keep \\\n && chown -R $uid:$gid \\\n        $BUNDLE_PATH \\\n        /home/$user \\\n        /pagy/node_modules\nWORKDIR /pagy\n\nVOLUME \\\n    /home/$user \\\n    $BUNDLE_PATH\n\n\n# Stage for user customization. Add here what you may need\n# and create your own a docker-compose.override.yml out of the\n# docker-compose.override-example.yml.\nFROM pagy-dev AS pagy-custom-dev\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        docker.io \\\n && rm -rf /var/lib/apt/lists/* && apt-get autoremove -y && apt-get clean -y\n\n\n# Stage for enabling also hardware acceleration (WebGL) for NVIDIA cards: Host and container use nouveau driver.\n# This is useful only if you want to use a browser installed in the container or shared from the host\nFROM pagy-custom-dev AS pagy-custom-nouveau-dev\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n && apt-get update && apt-get install --no-install-recommends -y \\\n        mesa-utils mesa-utils-extra xserver-xorg-video-nouveau \\\n && rm -rf /var/lib/apt/lists/* && apt-get clean -y\n\n\n# Stage for enabling also hardware acceleration (WebGL) for NVIDIA cards: Host and container use NVIDIA driver.\n# This is useful only if you want to use a browser installed in the container or shared from the host\n# IMPORTANT: you must run the setup-env.sh and rebuild this stage when you update the host's NVIDIA driver\nFROM pagy-custom-dev AS pagy-custom-nvidia-dev\nARG nvidia_version\nADD https://http.download.nvidia.com/XFree86/Linux-x86_64/${nvidia_version}/NVIDIA-Linux-x86_64-${nvidia_version}.run /tmp/NVIDIA-installer.run\nRUN apt-get update && apt-get install --no-install-recommends -y kmod \\\n && nvidia_opts='--accept-license --no-runlevel-check --no-questions --no-backup --ui=none --no-kernel-module --no-nouveau-check' ; \\\n    sh /tmp/NVIDIA-installer.run -A | grep -q -- '--install-libglvnd'        && nvidia_opts=\"$nvidia_opts --install-libglvnd\" ; \\\n    sh /tmp/NVIDIA-installer.run -A | grep -q -- '--no-nvidia-modprobe'      && nvidia_opts=\"$nvidia_opts --no-nvidia-modprobe\" ; \\\n    sh /tmp/NVIDIA-installer.run -A | grep -q -- '--no-kernel-module-source' && nvidia_opts=\"$nvidia_opts --no-kernel-module-source\" ; \\\n    sh /tmp/NVIDIA-installer.run $nvidia_opts || { echo 'ERROR: Installation of NVIDIA driver failed.' >&2 ; exit 1 ; } ; \\\n    rm /tmp/NVIDIA-installer.run \\\n && apt-get remove -y kmod && rm -rf /var/lib/apt/lists/* && apt-get autoremove -y && apt-get clean -y\n"
}