{
  "startTime": 1674217064101,
  "endTime": 1674217065252,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# mingw - build steps adapted from https://github.com/mmozeiko/docker-mingw-w64/blob/master/Dockerfile\nRUN apt-get update -y && \\\n    DEBIAN_FRONTEND=noninteractive apt-get upgrade --no-install-recommends -y && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n        bison \\\n        bzip2 \\\n        ca-certificates \\\n        curl \\\n        file \\\n        flex \\\n        g++-10 \\\n        gcc-10 \\\n        git \\\n        gnupg \\\n        gperf \\\n        libgmp-dev \\\n        libgmp10 \\\n        libisl-dev \\\n        libisl22 \\\n        libmpc-dev \\\n        libmpc3 \\\n        libmpfr-dev \\\n        libmpfr6 \\\n        libssl-dev \\\n        libssl1.1 \\\n        make \\\n        meson \\\n        ninja-build \\\n        patch \\\n        python \\\n        python-lxml \\\n        python-mako \\\n        texinfo \\\n        xz-utils \\\n        yasm \\\n        zip \\\n        zlib1g-dev && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 1000 --slave /usr/bin/g++ g++ /usr/bin/g++-10 && rm -rf /var/lib/apt/lists/*;\nENV MINGW=/mingw\nCOPY mingw.sh /tmp/mingw.sh\nRUN chmod +x /tmp/mingw.sh && \\\n    ARCH=\"$ARCH\" LIB3264=\"$LIB3264\" /tmp/mingw.sh\nRUN apt-get remove --purge -y \\\n        file gcc-10 g++-10 zlib1g-dev libssl-dev libgmp-dev libmpfr-dev libmpc-dev libisl-dev python-lxml python-mako\n\n# unprivileged user\nRUN mkdir -p /code && \\\n    (groupadd -g $HOST_GID user || true) && \\\n    (useradd -r -u $HOST_UID -g $HOST_GID user || true) && \\\n    chown $HOST_UID:$HOST_GID /code && \\\n    mkdir -p /home/user && \\\n    chown $HOST_UID:$HOST_GID /home/user\n\n# extra utilities\nRUN apt-get install --no-install-recommends -y \\\n        unzip \\\n        xxd \\\n        diffutils \\\n        dos2unix \\\n        build-essential \\\n        libncursesw5-dev \\\n        libncursesw5 && rm -rf /var/lib/apt/lists/*;\n\n# install wine if the host is x86_64, don't bother if the host is aarch64\n$WINE_INSTALL\n\n# tmbasic dependencies\nCOPY cmake-toolchain-win-$ARCH.cmake /tmp/\nCOPY libclipboard-CMakeLists.txt.diff /tmp/\nCOPY deps.mk /tmp/deps.mk\nCOPY deps.tar /tmp/\nRUN mkdir -p /tmp/downloads && \\\n    tar xf /tmp/deps.tar -C /tmp/downloads && \\\n    mkdir -p /tmp/deps && \\\n    cd /tmp/deps && \\\n    export NATIVE_PREFIX=/usr \\\n    export TARGET_PREFIX=/usr/$ARCH-w64-mingw32 \\\n    export ARCH=$ARCH \\\n    export TARGET_OS=win \\\n    export TARGET_CC=$ARCH-w64-mingw32-gcc \\\n    export TARGET_AR=$ARCH-w64-mingw32-ar \\\n    export DOWNLOAD_DIR=/tmp/downloads && \\\n    make -j$(nproc) -f /tmp/deps.mk && \\\n    rm -rf /tmp/deps /tmp/deps.mk && rm /tmp/deps.tar\n\n# environment\nRUN echo \"export ARCH=\\\"$ARCH\\\"\" >> /etc/profile.d/tmbasic.sh && \\\n    echo \"export IMAGE_NAME=\\\"$IMAGE_NAME\\\"\" >> /etc/profile.d/tmbasic.sh && \\\n    echo \"export PS1=\\\"[$IMAGE_NAME] \\w\\$ \\\"\" >> /etc/profile.d/tmbasic.sh && \\\n    echo \"export MAKEFLAGS=\\\"-j$(nproc)\\\"\" >> /etc/profile.d/tmbasic.sh && \\\n    echo \"export TARGET_OS=win\" >> /etc/profile.d/tmbasic.sh && \\\n    echo \"make -f /code/Makefile help\" >> /etc/profile.d/tmbasic.sh && \\\n    chmod +x /etc/profile.d/tmbasic.sh\n\nUSER $HOST_UID\nENTRYPOINT [\"/bin/bash\", \"-l\"]\n"
}