{
  "startTime": 1674216753292,
  "endTime": 1674216754543,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 93
      }
    }
  ],
  "repairedDockerfile": "FROM php:7-apache\n\n# set PATH for Wordpress CLI\nENV PATH=\"~/.composer/vendor/bin:${PATH}\"\n\n# reduce APT noise\nENV DEBIAN_FRONTEND=noninteractive\n\n# use proper shell\nSHELL [\"/bin/bash\", \"-c\"]\n\n# to avoid all too common aborts because of debian repo timeouts\nRUN echo 'APT::Acquire::Retries \"30\";' > /etc/apt/apt.conf.d/80-retries\n\n# upgrade package list and default packages\nRUN apt-get -qq update\nRUN apt-get -qq upgrade\n\n# install npm nodesource repo\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash -\n\n# install php extension dependencies\nRUN apt-get -qq -y --no-install-recommends install libmemcached-dev zlib1g-dev libpng-dev libonig-dev libtidy-dev && rm -rf /var/lib/apt/lists/*;\n\n# install dependencies for WP-CLI aand tools\nRUN apt-get -qq -y --no-install-recommends install git unzip vim mariadb-client zip jq nodejs && rm -rf /var/lib/apt/lists/*;\n\n# clean up to reduce docker image size\nRUN apt-get -qq autoremove\n\n# install PHP extensions required\nRUN bash -c \"pecl install xdebug memcached &> /dev/null\"\nRUN bash -c \"docker-php-ext-install -j64 gd mbstring mysqli pdo pdo_mysql tidy bcmath &> /dev/null\"\nRUN docker-php-ext-enable  memcached xdebug gd mbstring mysqli pdo pdo_mysql tidy bcmath\n\n# enable apache modules\nRUN a2enmod rewrite headers ext_filter expires\n\n# create self-signed cert and enable SSL on apache\nRUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/ssl-cert-snakeoil.key -out /etc/ssl/certs/ssl-cert-snakeoil.pem -subj \"/C=AT/ST=Vienna/L=Vienna/O=Security/OU=Development/CN=example.com\"\nRUN a2ensite default-ssl\nRUN a2enmod ssl\n\n# get composer binary from composer docker image\nCOPY --from=composer /usr/bin/composer /usr/bin/composer\n\n# override entrypoint\n# copy entrypoint script\nCOPY init.sh /usr/local/bin/init.sh\n\n# copy plugin fetch script\nCOPY get_plugin.sh /usr/local/bin/get_plugin.sh\n\n# copy ngrok script\nCOPY ngrok.sh /usr/local/bin/ngrok.sh\n\n# make scripts executable\nRUN chmod +x /usr/local/bin/*.sh\n\n# override default entrypoin with ours\nENTRYPOINT [ \"init.sh\" ]\n\n# add user and dir for executing composer\nRUN useradd -u 431 -r -g www-data -s /sbin/nologin -c \"Wordpress user\" wp\nRUN mkdir -p /home/wp && chown -R wp:www-data /home/wp /etc/ssl\nUSER wp\nWORKDIR /home/wp\n\n# install ngrok\nCOPY --from=ngrok/ngrok:debian /bin/ngrok /usr/bin/ngrok\n\n# install WP-CLI and recommended packages\nRUN composer global require wp-cli/wp-cli-bundle\nRUN composer global require --dev $(composer suggests --by-package | awk '/wp-cli\\/wp-cli-bundle/' RS= | grep -o -P '(?<=- ).*(?=:)')\n\nRUN mkdir /tmp/wp-data\nWORKDIR /tmp/wp-data\n\n# download latest stable Wordpress\nRUN wp core download\n\nWORKDIR /var/www/html\n\nEXPOSE 80\nEXPOSE 443\n"
}