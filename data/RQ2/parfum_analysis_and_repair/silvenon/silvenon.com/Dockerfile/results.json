{
  "startTime": 1674249447834,
  "endTime": 1674249449211,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# base node image\nFROM node:16-bullseye-slim as base\n\n# set for base and all layer that inherit from it\nENV NODE_ENV=production\n\n# Install all node_modules, including dev dependencies\nFROM base as deps\n\nWORKDIR /app\n\nCOPY package.json package-lock.json ./\nRUN npm install --production=false && npm cache clean --force;\n\n# Setup production node_modules\nFROM base as production-deps\n\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\nCOPY package.json package-lock.json ./\nRUN npm prune --production\n\n# Build the app\nFROM base as build\n\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules /app/node_modules\n\nCOPY . .\n# retrieve CLOUDINARY_URL from secrets, needed for building posts\n# https://andrei-calazans.com/posts/2021-06-23/passing-secrets-github-actions-docker\nRUN \\\n  --mount=type=secret,id=CLOUDINARY_URL \\\n  export CLOUDINARY_URL=$(cat /run/secrets/CLOUDINARY_URL) && \\\n  npm run build\n\n# Finally, build the production image with minimal footprint\nFROM base\n\n\nWORKDIR /app\n\nCOPY --from=production-deps /app/node_modules /app/node_modules\n\nCOPY --from=build /app/build /app/build\nCOPY --from=build /app/public /app/public\nCOPY --from=build /app/app/posts /app/app/posts\nCOPY . .\n\nEXPOSE 3000\n\nCMD [\"npm\", \"run\", \"start\"]\n"
}