{
  "startTime": 1674248753112,
  "endTime": 1674248754215,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 129
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 129
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 10
      }
    }
  ],
  "repairedDockerfile": "ARG GOVERSION=1.17\n\nFROM golang:${GOVERSION}-bullseye AS build\n\nWORKDIR /go/src/crowdsec\n\n# wizard.sh requires GNU coreutils\nRUN apt-get update && apt-get install --no-install-recommends -y git jq gcc libc-dev make bash gettext binutils-gold coreutils tzdata python3 python3-pip && rm -rf /var/lib/apt/lists/*;\n\nCOPY . .\n\nRUN SYSTEM=\"docker\" make release\nRUN cd crowdsec-v* && ./wizard.sh --docker-mode && cd -\nRUN cscli hub update && cscli collections install crowdsecurity/linux && cscli parsers install crowdsecurity/whitelists\nRUN GO111MODULE=on go get github.com/mikefarah/yq/v4\n\nFROM debian:bullseye-slim\n\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y -q --install-recommends --no-install-suggests \\\n    procps \\\n    systemd \\\n    iproute2 \\\n    ca-certificates \\\n    bash \\\n    jq \\\n    tzdata && \\\n    mkdir -p /staging/etc/crowdsec && \\\n    mkdir -p /staging/var/lib/crowdsec && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=build /go/bin/yq /usr/local/bin/yq\nCOPY --from=build /etc/crowdsec /staging/etc/crowdsec\nCOPY --from=build /var/lib/crowdsec /staging/var/lib/crowdsec\nCOPY --from=build /usr/local/bin/crowdsec /usr/local/bin/crowdsec\nCOPY --from=build /usr/local/bin/cscli /usr/local/bin/cscli\nCOPY --from=build /go/src/crowdsec/docker/docker_start.sh /\nCOPY --from=build /go/src/crowdsec/docker/config.yaml /staging/etc/crowdsec/config.yaml\nRUN yq eval -i \".plugin_config.group = \\\"nogroup\\\"\" /staging/etc/crowdsec/config.yaml\n#Due to the wizard using cp -n, we have to copy the config files directly from the source as -n does not exist in busybox cp\n#The files are here for reference, as users will need to mount a new version to be actually able to use notifications\nCOPY --from=build /go/src/crowdsec/plugins/notifications/email/email.yaml /staging/etc/crowdsec/notifications/email.yaml\nCOPY --from=build /go/src/crowdsec/plugins/notifications/http/http.yaml /staging/etc/crowdsec/notifications/http.yaml\nCOPY --from=build /go/src/crowdsec/plugins/notifications/slack/slack.yaml /staging/etc/crowdsec/notifications/slack.yaml\nCOPY --from=build /go/src/crowdsec/plugins/notifications/splunk/splunk.yaml /staging/etc/crowdsec/notifications/splunk.yaml\nCOPY --from=build /usr/local/lib/crowdsec/plugins /usr/local/lib/crowdsec/plugins\n\nENTRYPOINT /bin/bash docker_start.sh\n"
}