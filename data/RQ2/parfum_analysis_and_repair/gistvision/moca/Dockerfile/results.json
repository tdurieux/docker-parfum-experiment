{
  "startTime": 1674255475488,
  "endTime": 1674255476326,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\n\nARG USER_NAME\nARG USER_PASSWORD\nARG USER_ID\nARG USER_GID\n\nRUN apt-get update\nRUN apt install -y --no-install-recommends sudo && rm -rf /var/lib/apt/lists/*;\nRUN useradd -ms /bin/bash $USER_NAME\nRUN usermod -aG sudo $USER_NAME\nRUN yes $USER_PASSWORD | passwd $USER_NAME\n\n# set uid and gid to match those outside the container\nRUN usermod -u $USER_ID $USER_NAME\nRUN groupmod -g $USER_GID $USER_NAME\n\n# work directory\nWORKDIR /home/$USER_NAME\n\n# install system dependencies\nCOPY ./scripts/install_deps.sh /tmp/install_deps.sh\nRUN yes \"Y\" | /tmp/install_deps.sh\n\n# setup python environment\nRUN cd $WORKDIR\nENV VIRTUAL_ENV=/home/$USER_NAME/alfred_env\nRUN python3 -m virtualenv --python=/usr/bin/python3 $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# install python requirements\nRUN pip install --no-cache-dir --upgrade pip==19.3.1\nRUN pip install --no-cache-dir -U setuptools\nCOPY ./requirements.txt /tmp/requirements.txt\nRUN pip install --no-cache-dir -r /tmp/requirements.txt\n\n# install GLX-Gears (for debugging)\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n   mesa-utils && \\\n   rm -rf /var/lib/apt/lists/*\n\n\n###### COMMENT OUT THIS BLOCK IF USING NVIDIA-DOCKER1 ###########\n# SOURCE: https://github.com/RobotLocomotion/pytorch-dense-correspondence/blob/master/docker/pytorch-dense-correspondence.dockerfile\n# needed to get OpenGL running inside the docker\n# https://github.com/machinekoder/nvidia-opengl-docker\n\n# optional, if the default user is not \"root\", you might need to switch to root here and at the end of the script to the original user again.\n# e.g.\n# USER root\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        pkg-config \\\n        libxau-dev \\\n        libxdmcp-dev \\\n        libxcb1-dev \\\n        libxext-dev \\\n        libx11-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# replace with other Ubuntu version if desired\n# see: https://hub.docker.com/r/nvidia/opengl/\n# e.g. nvidia/opengl:1.1-glvnd-runtime-ubuntu16.04)\nCOPY --from=machinekoder/nvidia-opengl-docker:1.1-glvnd-runtime-stretch \\\n  /usr/local/lib/x86_64-linux-gnu \\\n  /usr/local/lib/x86_64-linux-gnu\n\n# replace with other Ubuntu version if desired\n# see: https://hub.docker.com/r/nvidia/opengl/\n# e.g. nvidia/opengl:1.1-glvnd-runtime-ubuntu16.04\nCOPY --from=machinekoder/nvidia-opengl-docker:1.1-glvnd-runtime-stretch \\\n  /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json \\\n  /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json\n\nRUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf && \\\n    ldconfig && \\\n    echo '/usr/local/$LIB/libGL.so.1' >> /etc/ld.so.preload && \\\n    echo '/usr/local/$LIB/libEGL.so.1' >> /etc/ld.so.preload\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES \\\n    ${NVIDIA_VISIBLE_DEVICES:-all}\nENV NVIDIA_DRIVER_CAPABILITIES \\\n    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics\n\n# USER original_user\n###### END BLOCK ###########\n\n\n\n# change ownership of everything to our user\nRUN mkdir /home/$USER_NAME/alfred\nRUN cd ${USER_HOME_DIR} && echo $(pwd) && chown $USER_NAME:$USER_NAME -R .\n\nENTRYPOINT bash -c \"export ALFRED_ROOT=~/alfred && /bin/bash\""
}