{
  "startTime": 1674248895405,
  "endTime": 1674248897388,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 19,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://index.docker.io/_/fedora/\nFROM fedora:21\n\n# http://jumanjiman.github.io/\nMAINTAINER Paul Morgan <jumanjiman@gmail.com>\n\n# Allow to install docs since this is a dev environment.\nRUN sed -i '/tsflags=nodocs/d' /etc/yum.conf\n\nRUN yum update -y; yum clean all\n\n# Work around https://bugzilla.redhat.com/show_bug.cgi?id=1066983\n# and remove prohibited packages.\nRUN yum remove -y vim-minimal \\\n    at \\\n    sudo \\\n    ; yum clean all\n\n# Install dependencies.\nRUN yum install -y \\\n    asciinema \\\n    bind-utils \\\n    bc \\\n    devscripts-minimal \\\n    dictd \\\n    diction \\\n    ftp tftp \\\n    hostname \\\n    openssh-server openssh-clients \\\n    man-db \\\n    man-pages mlocate \\\n    gcc gcc-c++ \\\n    glibc-static \\\n    gflags gflags-devel \\\n    gnupg \\\n    ruby ruby-devel rubygem-bundler \\\n    sqlite-devel \\\n    libcurl-devel libxslt-devel libxml2-devel \\\n    nano \\\n    vim-enhanced bash-completion \\\n    java-1.8.0-openjdk-headless \\\n    jq \\\n    openssl openssl-devel crypto-utils \\\n    tree \\\n    php \\\n    python-devel python-nose python-setuptools python-pep8 rpm-python \\\n    python3-devel python3-nose python3-setuptools python3-pep8 rpm-python3 \\\n    pylint python3-pylint \\\n    pykickstart \\\n    rpm-build libxslt createrepo git-annex \\\n    scap-security-guide \\\n    strace \\\n    tmux tmux-powerline reptyr \\\n    golang golang-cover golang-github-coreos-go-systemd-devel \\\n    golang-godoc golang-vim golang-github-coreos-go-log-devel \\\n    npm nodeunit \\\n    bzr \\\n    tito \\\n    git tar patch diffutils which \\\n    git-remote-hg \\\n    git-svn \\\n    make \\\n    mutt \\\n    jwhois \\\n    xmlstarlet \\\n    python-pygraphviz-doc \\\n    python-pygraphviz \\\n    python-xdot \\\n    python3-pygraphviz \\\n    python-lxml-docs \\\n    python-lxml \\\n    python3-lxml \\\n    python-requests-kerberos \\\n    python-requests-mock \\\n    python-requests-oauthlib \\\n    python3-requests-mock \\\n    python3-requests-oauthlib \\\n    python-CacheControl \\\n    python-pyramid-tm \\\n    python-requests \\\n    python3-CacheControl \\\n    python3-pyramid-tm \\\n    python3-requests \\\n    python-pyasn1-modules \\\n    python3-pyasn1-modules \\\n    python-pyasn1 \\\n    python3-pyasn1 \\\n    python-psycopg2 \\\n    python-psycopg2-debug \\\n    python-psycopg2-doc \\\n    python3-psycopg2.x86_64 \\\n    python3-psycopg2-debug \\\n    python-scp \\\n    python-paramiko \\\n    numpy \\\n    python3-numpydoc \\\n    python3-numpy \\\n    python3-PyYAML \\\n    python3-scipy \\\n    python-numpydoc \\\n    PyYAML \\\n    scipy \\\n    python-matplotlib-data-fonts \\\n    python-matplotlib-doc \\\n    python-matplotlib \\\n    python3-matplotlib \\\n    wget \\\n    ; rm -rf /var/cache/yum yum clean all\n\n# Break su for everybody but root.\n# Break cron for everybody.\n# Populate /etc/skel\n# Annoy user if they forget to set their username and email in git.\n# Configure security.\n# Install tools for validating xml.\nCOPY . /\nRUN chmod 0400 /usr/bin/crontab\nRUN chmod 0400 /usr/sbin/crond\n\n# Install duo for multifactor authentication.\nRUN rpm --import https://www.duosecurity.com/RPM-GPG-KEY-DUO ; \\\n    yum -y install duo_unix; rm -rf /var/cache/yum yum clean all\n# Avoid error `Only root may specify -c or -f` when using\n# ForceCommand with `-f` option at non-root ssh login.\n# https://www.duosecurity.com/docs/duounix-faq#can-i-use-login_duo-to-protect-non-root-shared-accounts,-or-can-i-do-an-install-without-root-privileges?\nRUN chmod u-s /usr/sbin/login_duo\n\n# Create sandbox user.\nRUN useradd user\n\n# Ugly workaround. Really ugly.\nRUN usermod -aG slocate user\n\n# Install latest docker client.\nRUN curl -f -sS -L -o /usr/bin/docker https://get.docker.com/builds/Linux/x86_64/docker-latest; \\\n    curl -f -sS -L -o /usr/bin/docker-compose https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname -s`-`uname -m`; \\\n    chmod 0755 /usr/bin/docker*\n\n# https://www.npmjs.com/package/dockerlint\nRUN npm install -g dockerlint && npm cache clean --force;\n\n# Do not track changes in volumes.\nVOLUME [\"/home/user\", \"/media/state/etc/ssh\"]\n\n# Be informative after successful login.\nRUN echo \"App container image built on $(date).\" > /etc/motd\n\nRUN /usr/local/sbin/install-jing.sh\n\n# Update system databases for user convenience.\nRUN mandb &> /dev/null\nRUN updatedb &> /dev/null\n\n# Remediate security after all packages are installed.\nRUN /usr/sbin/oscap-remediate.sh\n\n# Run oval security scan after remediation.\n# This script exits non-zero if container is non-compliant,\n# so 'docker build' fails if container has known vulnerabilities.\n# IOW it's impossible to build an image with known vulnerabilities.\nRUN /usr/sbin/oval-vulnerability-scan.sh\n\nEXPOSE 22\nENV LANG C\nCMD /usr/sbin/start.sh\n"
}