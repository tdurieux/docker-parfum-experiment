{
  "startTime": 1674217785184,
  "endTime": 1674217785701,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM --platform=linux/amd64 node:16-alpine as build\n\n# set app basepath\nENV HOME=/home/app\n\n# add app dependencies\nCOPY package.json $HOME/node/\nCOPY package-lock.json $HOME/node/\n\n# change workgin dir and install deps in quiet mode\nWORKDIR $HOME/node\nRUN npm ci -q\n\n# copy all app files\nCOPY . $HOME/node/\n\n# compile typescript and build all production stuff\nRUN npm run build\n\n# remove dev dependencies and files that are not needed in production\nRUN rm -rf node_modules\nRUN npm install --only=prod && npm cache clean --force;\nRUN npm prune --production\n\n# start new image for lower size\nFROM --platform=linux/amd64 node:16-alpine\n\n# dumb-init registers signal handlers for every signal that can be caught\nRUN apk update && apk add --no-cache dumb-init\n\n# create use with no permissions\nRUN addgroup -g 101 -S app && adduser -u 100 -S -G app -s /bin/false app\n\n# set app basepath\nENV HOME=/home/app\n\n# copy production complied node app to the new image\nCOPY --chown=app:app --from=build $HOME/node/ $HOME/node/\n\n# run app with low permissions level user\nUSER app\nWORKDIR $HOME/node\n\nEXPOSE 3000\n\nENV NODE_ENV=production\nENV TURBO_TOKEN=$TURBO_TOKEN\nENV STORAGE_PROVIDER=$STORAGE_PROVIDER\nENV STORAGE_PATH=$STORAGE_PATH\nENV AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\nENV AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\nENV AWS_REGION=$AWS_REGION\nENV S3_ENDPOINT=$S3_ENDPOINT\n\nENTRYPOINT [\"dumb-init\"]\nCMD [\"node\", \"--enable-source-maps\", \"build/index.js\"]\n"
}