{
  "startTime": 1674216132110,
  "endTime": 1674216133788,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "##############################################\n# Build backend artifacts\n##############################################\n\nFROM php:7.3-apache as backend_artifacts\nARG PASSWORDCOCKPIT_BACKEND_TAG=1.2.0\nRUN set -ex; \\\n    apt-get update; \\\n    apt-get install -y --no-install-recommends git && rm -rf /var/lib/apt/lists/*;\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\nRUN set -ex; \\\n    apt-get update; \\\n    # zip\n    apt-get install --no-install-recommends -y libzip-dev; rm -rf /var/lib/apt/lists/*; \\\n    docker-php-ext-install zip; \\\n    # ldap\n    apt-get install --no-install-recommends -y libldap2-dev; \\\n    docker-php-ext-install ldap; \\\n    # intl\n    apt-get install -y --no-install-recommends libicu-dev; \\\n    docker-php-ext-install intl\n\nWORKDIR /var/www/html\n\n# clone the source of the backend\nRUN set -ex; \\\ngit clone -v git://github.com/passwordcockpit/backend.git /var/www/html; \\\ngit checkout $PASSWORDCOCKPIT_BACKEND_TAG\n\n# remove git history\nRUN rm -rf .git\n\n# clean application\nRUN rm -rf docker\nRUN rm -rf tests\n\n# install and build\nRUN composer install --prefer-dist --optimize-autoloader --no-dev\n\n# generate swagger documentation\n# create constants.local.php\nRUN { \\\n\techo \"<?php\"; \\\n    echo \"define('SWAGGER_API_HOST', 'PASSWORDCOCKPIT_BASEHOST');\"; \\\n} > config/constants.local.php\nRUN composer swagger\n\n##############################################\n# Build frontend artifacts\n##############################################\n\nFROM node:10-alpine as frontend_artifacts\nARG PASSWORDCOCKPIT_FRONTEND_TAG=1.1.1\nRUN apk add --no-cache git\nWORKDIR /usr/src/app\n\n# clone the source of the frontend\nRUN set -ex; \\\ngit clone -v git://github.com/passwordcockpit/frontend.git /usr/src/app; \\\ngit checkout $PASSWORDCOCKPIT_FRONTEND_TAG\n\n# create local.js\nRUN { \\\n\techo \"module.exports = {\"; \\\n    echo \"    baseHost: 'PASSWORDCOCKPIT_BASEHOST'\"; \\\n    echo \"};\"; \\\n} > config/local.js\n\n# install and build\nRUN npm install -g ember-cli && npm cache clean --force;\nRUN npm install && npm cache clean --force;\nRUN ember build -p\n\n\n##############################################\n# Build the HTML and PHP container\n##############################################\n\nFROM php:7.3-apache\nRUN set -ex; \\\n\t\\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\\\n    apt-get update; \\\n    # ldap\n    apt-get install -y --no-install-recommends libldap2-dev; \\\n    docker-php-ext-install ldap; \\\n    # intl\n    apt-get install -y --no-install-recommends libicu-dev; \\\n    docker-php-ext-install intl; \\\n    # opcache\n    docker-php-ext-install opcache; \\\n    # pdo_mysql\n    docker-php-ext-install pdo_mysql; \\\n    # mod_rewrite extension\n    a2enmod rewrite; \\\n    # ssl extension\n    a2enmod ssl; \\\n    \\\n\t# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\tapt-mark manual $savedAptMark; \\\n\tldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/*.so \\\n\t\t| awk '/=>/ { print $3 }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query -S \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -rt apt-mark manual; \\\n\t\\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\trm -rf /var/lib/apt/lists/*\n\n# set recommended PHP.ini settings\n# set production configuration\nRUN mv /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini\n# see https://secure.php.net/manual/en/opcache.installation.php\nRUN { \\\n    echo 'opcache.memory_consumption=128'; \\\n    echo 'opcache.interned_strings_buffer=8'; \\\n    echo 'opcache.max_accelerated_files=4000'; \\\n    echo 'opcache.revalidate_freq=2'; \\\n    echo 'opcache.fast_shutdown=1'; \\\n    } > /usr/local/etc/php/conf.d/opcache-recommended.ini\n\nWORKDIR /var/www/html\n# set webroot\nENV APACHE_DOCUMENT_ROOT=/var/www/html/public\nRUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf\nRUN sed -ri -e 's!/var/www/!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf\n# set DirectoryIndex priority to index.html\nRUN sed -ri -e 's!DirectoryIndex index.php index.html!DirectoryIndex index.html index.php!g' /etc/apache2/conf-available/docker-php.conf\n\n# copy frontend_artifacts\nCOPY --from=backend_artifacts /var/www/html /var/www/html/\nCOPY --from=frontend_artifacts /usr/src/app/dist /var/www/html/public/\n\nVOLUME /var/www/html/data\n\nCOPY entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"entrypoint.sh\"]\n\nCMD [\"apache2-foreground\"]"
}