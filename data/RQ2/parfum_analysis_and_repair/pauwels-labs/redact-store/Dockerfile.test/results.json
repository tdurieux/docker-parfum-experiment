{
  "startTime": 1674248236668,
  "endTime": 1674248237218,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "# Rust-based image with cargo-tarpaulin pre-installed\nFROM xd009642/tarpaulin\n\n# This build-arg will be used by cargo-tarpaulin to upload code coverage reports to coveralls\nARG REPO_TOKEN\n\n# Perform apk actions as root\nRUN apt install -y --no-install-recommends libssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# Create build directory as root\nWORKDIR /usr/src\nRUN USER=root cargo new service\n\n# Perform an initial compilation to cache dependencies\nWORKDIR /usr/src/service\nCOPY Cargo.lock Cargo.toml ./\nRUN echo \"fn main() {println!(\\\"if you see this, the image build failed and kept the depency-caching entrypoint. check your dockerfile and image build logs.\\\")}\" > src/main.rs\nRUN cargo tarpaulin --locked\n\n# Load source code to create final binary\nRUN rm -rf src\n# If the bust file exists, it will be added\n# If it's filled with a random value, the testing and code coverage\n# cache will be broken\nCOPY src bust* ./src/\n# Copy the fit folder so code cov knows which branch we're on\nCOPY .git .git\nRUN cargo tarpaulin --locked --skip-clean --coveralls $REPO_TOKEN\n"
}