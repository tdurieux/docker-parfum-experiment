{
  "startTime": 1674255173083,
  "endTime": 1674255173761,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 26,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 26,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile based on the one at http://chrisstump.online/2016/02/20/docker-existing-rails-application/\n\n# Base our image on this: https://hub.docker.com/_/ruby/\nFROM ruby:2.7.1\n\n# Install essential Linux packages\nRUN apt-get update -qq && apt-get install --no-install-recommends -y build-essential postgresql-client && rm -rf /var/lib/apt/lists/*;\n\n# Define where our application will live inside the image\nENV RAILS_ROOT /var/www/musicboxfun\n\n# Create application home. App server will need the pids dir so just create everything in one shot\nRUN mkdir -p $RAILS_ROOT/tmp/pids\n\n# Set our working directory inside the image\nWORKDIR $RAILS_ROOT\n\n# Use the Gemfiles as Docker cache markers. Always bundle before copying app src.\n# (the src likely changed and we don't want to invalidate Docker's cache too early)\n# http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/\nCOPY Gemfile Gemfile\nCOPY Gemfile.lock Gemfile.lock\n\n# Ensure that we don't bundle gems for incorrect environments. This value is passed by docker-compose.yml.\n# See https://medium.com/@atomaka/a-more-flexible-dockerfile-for-rails-166227af69fc\nARG BUNDLE_WITHOUT\nENV BUNDLE_WITHOUT ${BUNDLE_WITHOUT}\n\n# Prevent bundler warnings; ensure that the bundler version executed is >= that which created Gemfile.lock\nRUN gem install bundler\n\n# Finish establishing our Ruby environment\nRUN bundle install\n\n# Copy the Rails application into place\nCOPY . .\n"
}