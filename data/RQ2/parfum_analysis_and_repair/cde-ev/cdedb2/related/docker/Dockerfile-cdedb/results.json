{
  "startTime": 1674249674270,
  "endTime": 1674249675109,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:bullseye-20210816\n\n# TODO this should be obsolete, since we generate the certificates with a first run script.\n#  however, this does not work for the ci (which becomes visible for the offline vm test)\nRUN apt-get update && apt-get install --yes --no-install-recommends openssl \\\n    && mkdir /etc/ssl/apache2 \\\n    && openssl req \\\n        -x509 \\\n        -newkey rsa:4096 \\\n        -out /etc/ssl/apache2/server.pem \\\n        -keyout /etc/ssl/apache2/server.key \\\n        -days 365 \\\n        -nodes \\\n        -subj \"/C=DE/O=CdE e.V./CN=cdedb.local/emailAddress=cdedb@lists.cde-ev.de\" \\\n    && apt-get purge --yes --autoremove openssl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# rarely changing base of bigger packages whose cache we do not want to bust\nRUN apt-get update && apt-get install --yes --no-install-recommends \\\n    sudo \\\n    make \\\n    gettext \\\n    git \\\n    \\\n    openssl \\\n    apache2 \\\n    python3 \\\n    libapache2-mod-wsgi-py3 \\\n    \\\n    postgresql-client \\\n    \\\n    texlive \\\n    texlive-latex-extra \\\n    texlive-lang-german \\\n    texlive-luatex \\\n    && rm -rf /var/lib/apt/lists/*\n\n# mostly python packages and some dev tools\nRUN apt-get update && apt-get install --yes --no-install-recommends \\\n    python3-psycopg2 \\\n    python3-dateutil \\\n    python3-babel \\\n    python3-icu \\\n    python3-jinja2 \\\n    python3-tz \\\n    python3-sphinx \\\n    python3-lxml \\\n    python3-pil \\\n    python3-webtest \\\n    python3-werkzeug \\\n    python3-ldap3 \\\n    python3-passlib \\\n    python3-bleach \\\n    python3-magic \\\n    python3-segno \\\n    python3-sphinx-rtd-theme \\\n    python3-zxcvbn \\\n    python3-markdown \\\n    python3-requests \\\n    python3-vobject \\\n    python3-graphviz \\\n    python3-phonenumbers \\\n    \\\n    python3-pip \\\n    python3-click \\\n    python3-freezegun \\\n    flake8 \\\n    isort \\\n    pylint \\\n    wget \\\n    unzip \\\n\n    && apt-get install --no-install-recommends --yes python3-coverage \\\n\n    && rm -rf /var/lib/apt/lists/* \\\n\n    && python3 -m pip --no-cache-dir install \\\n    ldaptor==21.2.0 \\\n    mailmanclient==3.3.3 \\\n    psycopg[binary]==3.0.15 \\\n    psycopg_pool==3.1.1 \\\n    schulze_condorcet==2.0.0 \\\n    subman==0.1.0 \\\n    segno==1.5.2 \\\n\n    && python3 -m pip --no-cache-dir install \\\n    mypy==0.950 \\\n    types-werkzeug \\\n    types-pytz \\\n    types-jinja2 \\\n    types-python-dateutil \\\n    types-freezegun \\\n    types-bleach \\\n    types-Markdown \\\n    types-click\n\n# get the configuration files from the autobuild\nCOPY ./related/docker/cdedb-entrypoint.sh ./related/auto-build/files/stage3 /tmp/autobuild/\n\n# This does the following:\n# - configure apache,\n# - add the mailman basic-auth password,\n# - put the localconfig at the default config path and\n#   create an empty secrets config (there has to exist one but the fallbacks are fine),\n# - add symlink to /cdedb2/cdedb directory so python can find it,\n# - create the cdedb user and enable passwordless sudo,\n# - create the magic file to signal that we are inside a container.\nRUN cp /tmp/autobuild/cdedb-entrypoint.sh /cdedb-entrypoint.sh \\\n    \\\n    && a2enmod ssl wsgi headers authnz_ldap \\\n    && a2dissite 000-default \\\n    && echo \"\" > /etc/apache2/ports.conf \\\n    && cp /tmp/autobuild/cdedb-site.conf /etc/apache2/sites-available \\\n    && a2ensite cdedb-site \\\n    && cp /tmp/autobuild/index.html /var/www/html/ \\\n    \\\n    && cp /tmp/autobuild/mailman-htpasswd /etc/cdedb-mailman-htpasswd \\\n    && chown www-data:www-data /etc/cdedb-mailman-htpasswd \\\n    && chmod 640 /etc/cdedb-mailman-htpasswd \\\n    \\\n    && install -D /tmp/autobuild/localconfig.py /etc/cdedb/config.py \\\n    && touch /etc/cdedb/public-secrets.py \\\n    \\\n    && rm -rf /tmp/autobuild \\\n    \\\n    && ln -s /cdedb2/cdedb/ /usr/lib/python3/dist-packages/cdedb \\\n    \\\n    && useradd --no-create-home cdedb \\\n    && echo \"%cdedb ALL=(ALL:ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n    \\\n    && touch /CONTAINER\n\n# make config persistent\nVOLUME /etc/cdedb\n# the ssl certificate is created dynamically and has should persist\nVOLUME /etc/ssl/apache2\n# the storage dir is created during the first startup by the entrypoint\nVOLUME /var/lib/cdedb\n\nEXPOSE 443\n\n# mount the code here\nWORKDIR /cdedb2\n\nSTOPSIGNAL SIGWINCH\nENTRYPOINT [\"/cdedb-entrypoint.sh\"]\nCMD [\"sh\", \"-c\", \"APACHE_HTTPD='exec /usr/sbin/apache2' exec apachectl -DFOREGROUND\"]\n"
}