{
  "startTime": 1674248237242,
  "endTime": 1674248238057,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 64,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 64,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# Install common dependencies\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get -y update && \\\n    apt-get -y --no-install-recommends install sudo \\\n    apt-utils \\\n    build-essential \\\n    openssl \\\n    clang \\\n    graphviz-dev \\\n    git \\\n    autoconf \\\n    libgnutls28-dev \\\n    libssl-dev \\\n    llvm \\\n    python3-pip \\\n    nano \\\n    net-tools \\\n    vim \\\n    gdb \\\n    netcat \\\n    strace \\\n    wget && rm -rf /var/lib/apt/lists/*;\n\n# Add a new user ubuntu, pass: ubuntu\nRUN groupadd ubuntu && \\\n    useradd -rm -d /home/ubuntu -s /bin/bash -g ubuntu -G sudo -u 1000 ubuntu -p \"$(openssl passwd -1 ubuntu)\"\n\nRUN chmod 777 /tmp\n\nRUN pip3 install --no-cache-dir gcovr==4.2\n\n# Use ubuntu as default username\nUSER ubuntu\nWORKDIR /home/ubuntu\n\n# Import environment variable to pass as parameter to make (e.g., to make parallel builds with -j)\nARG MAKE_OPT\n\n# Set up fuzzers\nRUN git clone https://github.com/profuzzbench/aflnet.git && \\\n    cd aflnet && \\\n    make clean all $MAKE_OPT && \\\n    cd llvm_mode && make $MAKE_OPT\n\nRUN git clone https://github.com/profuzzbench/aflnwe.git && \\\n    cd aflnwe && \\\n    make clean all $MAKE_OPT && \\\n    cd llvm_mode && make $MAKE_OPT\n\n# Set up environment variables for AFLNet\nENV WORKDIR=\"/home/ubuntu/experiments\"\nENV AFLNET=\"/home/ubuntu/aflnet\"\nENV PATH=\"${PATH}:${AFLNET}:/home/ubuntu/.local/bin:${WORKDIR}\"\nENV AFL_PATH=\"${AFLNET}\"\nENV AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 \\\n    AFL_SKIP_CPUFREQ=1 \\\n    AFL_NO_AFFINITY=1\n\n\nRUN mkdir $WORKDIR\n\nUSER root\nRUN apt-get -y --no-install-recommends install \\\n    bison \\\n    flex && rm -rf /var/lib/apt/lists/*;\nUSER ubuntu\n\nCOPY --chown=ubuntu:ubuntu kamailio.patch ${WORKDIR}/kamailio.patch\nCOPY --chown=ubuntu:ubuntu pjsip.patch ${WORKDIR}/pjsip.patch\n\n# Set up environment variables for ASAN\nenv ASAN_OPTIONS='abort_on_error=1:symbolize=0:detect_leaks=0:detect_stack_use_after_return=1:detect_container_overflow=0:poison_array_cookie=0:malloc_fill_byte=0:max_malloc_fill_size=16777216'\n\n# Download and compile Kamalio for fuzzing\nRUN cd $WORKDIR && \\\n    git clone https://github.com/kamailio/kamailio.git && \\\n    cd kamailio && \\\n    git checkout 2648eb3 && \\\n    patch -p1 < $WORKDIR/kamailio.patch && \\\n    CC=afl-clang-fast make MEMPKG=sys cfg && \\\n    AFL_USE_ASAN=1 CC=afl-clang-fast make all $MAKE_OPT\n\n# Build SIP client to simulate the callee\nRUN cd $WORKDIR && \\\n    git clone https://github.com/pjsip/pjproject.git && \\\n    cd pjproject && \\\n    git checkout bba95b8 && \\\n    patch -p1 < $WORKDIR/pjsip.patch && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make dep && make clean && make $MAKE_OPT\n\n# Download and compile Kamalio for code coverage analysis\nRUN cd $WORKDIR && \\\n    git clone https://github.com/kamailio/kamailio.git kamailio-gcov && \\\n    cd kamailio-gcov && \\\n    git checkout 2648eb3 && \\\n    patch -p1 < $WORKDIR/kamailio.patch && \\\n    make CC_EXTRA_OPTS=\"-fprofile-arcs -ftest-coverage\" LD_EXTRA_OPTS=\"-fprofile-arcs -ftest-coverage\" MEMPKG=sys cfg && \\\n    make CC_EXTRA_OPTS=\"-fprofile-arcs -ftest-coverage\" LD_EXTRA_OPTS=\"-fprofile-arcs -ftest-coverage\" all $MAKE_OPT\n\nCOPY --chown=ubuntu:ubuntu in-sip ${WORKDIR}/in-sip\nCOPY --chown=ubuntu:ubuntu cov_script.sh ${WORKDIR}/cov_script\nCOPY --chown=ubuntu:ubuntu run.sh ${WORKDIR}/run\nCOPY --chown=ubuntu:ubuntu run_pjsip.sh ${WORKDIR}/run_pjsip\nCOPY --chown=ubuntu:ubuntu kamailio-basic.cfg ${WORKDIR}/kamailio-basic.cfg\nCOPY --chown=ubuntu:ubuntu StarWars3.wav ${WORKDIR}/StarWars3.wav\n"
}