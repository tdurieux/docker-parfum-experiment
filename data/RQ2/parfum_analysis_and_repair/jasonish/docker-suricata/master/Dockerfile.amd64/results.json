{
  "startTime": 1674246811257,
  "endTime": 1674246812887,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 2,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 1,
        "columnEnd": 84
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 69,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 1,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM almalinux:8 AS builder\n\nRUN \\\n        dnf -y update && \\\n        dnf -y install epel-release dnf-plugins-core && \\\n        dnf config-manager --set-enabled powertools\n\nRUN dnf -y install \\\n        autoconf \\\n        automake \\\n        cargo \\\n        diffutils \\\n        file \\\n        file-devel \\\n        gcc \\\n        gcc-c++ \\\n        git \\\n        hiredis-devel \\\n        hyperscan-devel \\\n        jansson-devel \\\n        jq \\\n        lua-devel \\\n        libtool \\\n        libyaml-devel \\\n        libnfnetlink-devel \\\n        libnetfilter_queue-devel \\\n        libnet-devel \\\n        libcap-ng-devel \\\n        libevent-devel \\\n        libmaxminddb-devel \\\n        libpcap-devel \\\n        libprelude-devel \\\n        libtool \\\n        lz4-devel \\\n        make \\\n        nspr-devel \\\n        nss-devel \\\n        nss-softokn-devel \\\n        pcre2-devel \\\n        pkgconfig \\\n        python3-devel \\\n        python3-yaml \\\n        rust \\\n        which \\\n        zlib-devel\n\nARG VERSION\n\nRUN if [ \"${VERSION}\" = \"master\" ]; then \\\n        cargo install --root /usr/local cbindgen; \\\nfi\n\nWORKDIR /src\n\nRUN if [ \"${VERSION}\" = \"master\" ]; then \\\n\tgit clone https://github.com/OISF/suricata.git suricata-${VERSION}; \\\n\tgit clone https://github.com/OISF/libhtp.git suricata-${VERSION}/libhtp; \\\n        ( cd suricata-${VERSION}/suricata-update && \\\n\t\tcurl -f -L https://github.com/OISF/suricata-update/archive/master.tar.gz | tar zxf - --strip-components=1) \\\n\t(cd suricata-${VERSION} && ./autogen.sh); \\\nelse \\\n\tcurl -f -OL https://www.openinfosecfoundation.org/download/suricata-${VERSION}.tar.gz; \\\n\ttar zxf suricata-${VERSION}.tar.gz; rm suricata-${VERSION}.tar.gz \\\nfi\n\nWORKDIR /src/suricata-${VERSION}\n\nARG CONFIGURE_ARGS\n\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr \\\n        --disable-shared \\\n        --disable-gccmarch-native \\\n        --enable-lua \\\n        --enable-nfqueue \\\n        --enable-hiredis \\\n        --enable-geoip \\\n        ${CONFIGURE_ARGS}\n\nARG CORES=2\n\nRUN make -j \"${CORES}\"\n\nRUN make install install-conf DESTDIR=/fakeroot\n\n# Something about the Docker mounts won't let us copy /var/run in the\n# next stage.\nRUN rm -rf /fakeroot/var\n\nFROM almalinux/8-base:latest AS runner\nRUN \\\n        dnf -y update && \\\n        dnf -y install epel-release && \\\n        dnf -y install \\\n        cronie \\\n        file \\\n        findutils \\\n        hiredis \\\n        hyperscan \\\n        iproute \\\n        jansson \\\n        lua-libs \\\n        libyaml \\\n        libnfnetlink \\\n        libnetfilter_queue \\\n        libnet \\\n        libcap-ng \\\n        libevent \\\n        libmaxminddb \\\n        libpcap \\\n        libprelude \\\n        logrotate \\\n        lz4 \\\n        net-tools \\\n        nss \\\n        nss-softokn \\\n        pcre2 \\\n        procps-ng \\\n        python3 \\\n        python3-yaml \\\n        tcpdump \\\n        which \\\n        zlib && \\\n        dnf clean all && \\\n        find /etc/logrotate.d -type f -not -name suricata -delete\n\nCOPY --from=builder /fakeroot /\n\n# Create the directories that didn't get coped from the previous stage.\nRUN mkdir -p /var/log/suricata /var/run/suricata /var/lib/suricata\n\nCOPY /update.yaml /etc/suricata/update.yaml\nCOPY /suricata.logrotate /etc/logrotate.d/suricata\n\nRUN suricata-update update-sources && \\\n        suricata-update enable-source oisf/trafficid && \\\n        suricata-update --no-test --no-reload && \\\n        /usr/bin/suricata -V\n\nRUN useradd --system --create-home suricata && \\\n        chown -R suricata:suricata /etc/suricata && \\\n        chown -R suricata:suricata /var/log/suricata && \\\n        chown -R suricata:suricata /var/lib/suricata && \\\n        chown -R suricata:suricata /var/run/suricata && \\\n        cp -a /etc/suricata /etc/suricata.dist && \\\n        chmod 600 /etc/logrotate.d/suricata\n\nVOLUME /var/log/suricata\nVOLUME /var/lib/suricata\nVOLUME /etc/suricata\n\nCOPY /docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
}