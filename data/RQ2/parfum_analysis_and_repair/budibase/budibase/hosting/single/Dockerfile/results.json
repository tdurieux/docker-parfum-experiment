{
  "startTime": 1674253500249,
  "endTime": 1674253502597,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 2,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 2,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 2,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 2,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 44,
        "columnEnd": 117
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 2,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 2,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "FROM node:14-slim as build\n\n# install node-gyp dependencies\nRUN apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends apt-utils cron g++ make python && rm -rf /var/lib/apt/lists/*;\n\n# add pin script\nWORKDIR /\nADD scripts/pinVersions.js scripts/cleanup.sh ./\nRUN chmod +x /cleanup.sh\n\n# build server\nWORKDIR /app\nADD packages/server .\nRUN node /pinVersions.js && yarn && yarn build && /cleanup.sh\n\n# build worker\nWORKDIR /worker\nADD packages/worker .\nRUN node /pinVersions.js && yarn && yarn build && /cleanup.sh\n\nFROM couchdb:3.2.1\n# TARGETARCH can be amd64 or arm e.g. docker build --build-arg TARGETARCH=amd64\nARG TARGETARCH amd64\n#TARGETBUILD can be set to single (for single docker image) or aas (for azure app service)\n# e.g. docker build --build-arg TARGETBUILD=aas ....\nARG TARGETBUILD single\nENV TARGETBUILD $TARGETBUILD\n\nCOPY --from=build /app /app\nCOPY --from=build /worker /worker\n\nENV \\\n  APP_PORT=4001 \\\n  ARCHITECTURE=amd \\\n  BUDIBASE_ENVIRONMENT=PRODUCTION \\\n  CLUSTER_PORT=80 \\\n  # CUSTOM_DOMAIN=budi001.custom.com \\\n  DEPLOYMENT_ENVIRONMENT=docker \\\n  MINIO_URL=http://localhost:9000 \\\n  POSTHOG_TOKEN=phc_fg5I3nDOf6oJVMHSaycEhpPdlgS8rzXG2r6F2IpxCHS \\\n  REDIS_URL=localhost:6379 \\\n  SELF_HOSTED=1 \\\n  TARGETBUILD=$TARGETBUILD \\\n  WORKER_PORT=4002 \\\n  WORKER_URL=http://localhost:4002 \\\n  APPS_URL=http://localhost:4001\n\n# These secret env variables are generated by the runner at startup\n# their values can be overriden by the user, they will be written\n# to the .env file in the /data directory for use later on\n#  REDIS_PASSWORD=budibase \\\n#  COUCHDB_PASSWORD=budibase \\\n#  COUCHDB_USER=budibase \\\n#  COUCH_DB_URL=http://budibase:budibase@localhost:5984 \\\n#  INTERNAL_API_KEY=budibase \\\n#  JWT_SECRET=testsecret \\\n#  MINIO_ACCESS_KEY=budibase \\\n#  MINIO_SECRET_KEY=budibase \\\n\n# install base dependencies\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y software-properties-common wget nginx uuid-runtime && \\\n  apt-add-repository 'deb http://security.debian.org/debian-security stretch/updates main' && \\\n  apt-get update && rm -rf /var/lib/apt/lists/*;\n\n# install other dependencies, nodejs, oracle requirements, jdk8, redis, nginx\nWORKDIR /nodejs\nRUN curl -f -sL https://deb.nodesource.com/setup_16.x -o /tmp/nodesource_setup.sh && \\\n  bash /tmp/nodesource_setup.sh && \\\n  apt-get install --no-install-recommends -y libaio1 nodejs nginx openjdk-8-jdk redis-server unzip && \\\n  npm install --global yarn pm2 && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# setup nginx\nADD hosting/single/nginx/nginx.conf /etc/nginx\nADD hosting/single/nginx/nginx-default-site.conf /etc/nginx/sites-enabled/default\nRUN mkdir -p /var/log/nginx && \\\n  touch /var/log/nginx/error.log && \\\n  touch /var/run/nginx.pid\n\nWORKDIR /\nRUN mkdir -p scripts/integrations/oracle\nADD packages/server/scripts/integrations/oracle scripts/integrations/oracle\nRUN /bin/bash -e ./scripts/integrations/oracle/instantclient/linux/install.sh\n\n# setup clouseau\nWORKDIR /\nRUN wget https://github.com/cloudant-labs/clouseau/releases/download/2.21.0/clouseau-2.21.0-dist.zip && \\\n  unzip clouseau-2.21.0-dist.zip && \\\n  mv clouseau-2.21.0 /opt/clouseau && \\\n  rm clouseau-2.21.0-dist.zip\n\nWORKDIR /opt/clouseau\nRUN mkdir ./bin\nADD hosting/single/clouseau/clouseau ./bin/\nADD hosting/single/clouseau/log4j.properties hosting/single/clouseau/clouseau.ini ./\nRUN chmod +x ./bin/clouseau\n\n# setup CouchDB\nWORKDIR /opt/couchdb\nADD hosting/single/couch/vm.args hosting/single/couch/local.ini ./etc/\n\n# setup minio\nWORKDIR /minio\nADD scripts/install-minio.sh ./install.sh\nRUN chmod +x install.sh && ./install.sh\n\n# setup runner file\nWORKDIR /\nADD hosting/single/runner.sh .\nRUN chmod +x ./runner.sh\nADD hosting/scripts/healthcheck.sh .\nRUN chmod +x ./healthcheck.sh\n\nADD hosting/scripts/build-target-paths.sh .\nRUN chmod +x ./build-target-paths.sh\n\n# For Azure App Service install SSH & point data locations to /home\nRUN /build-target-paths.sh\n\n# cleanup cache\nRUN yarn cache clean -f\n\nEXPOSE 80\nEXPOSE 443\nVOLUME /opt/couchdb/data\nVOLUME /minio\n\n#  setup letsencrypt certificate\nRUN apt-get install --no-install-recommends -y certbot python3-certbot-nginx && rm -rf /var/lib/apt/lists/*;\nADD hosting/letsencrypt /app/letsencrypt\nRUN chmod +x /app/letsencrypt/certificate-request.sh /app/letsencrypt/certificate-renew.sh\n# Remove cached files\nRUN rm -rf \\\n  /root/.cache \\\n  /root/.npm \\\n  /root/.pip \\\n  /usr/local/share/doc \\\n  /usr/share/doc \\\n  /usr/share/man \\\n  /var/lib/apt/lists/* \\\n  /tmp/*\n\nHEALTHCHECK --interval=15s --timeout=15s --start-period=45s CMD \"/healthcheck.sh\"\n\n# must set this just before running\nENV NODE_ENV=production\nWORKDIR /\n\nCMD [\"./runner.sh\"]\n"
}