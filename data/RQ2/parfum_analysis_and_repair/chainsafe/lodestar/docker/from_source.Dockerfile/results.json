{
  "startTime": 1674215208985,
  "endTime": 1674215210425,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 56,
        "columnEnd": 66
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 23,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 73,
        "columnEnd": 89
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 70,
        "columnEnd": 86
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 46,
        "columnEnd": 62
      }
    }
  ],
  "repairedDockerfile": "#######################\n#\n# To build from source:\n#\n# Edit root docker-compose.yml\n# ```yaml\n# services:\n#   beacon_node:\n#     build:\n#       context: .\n#       dockerfile: docker/from_source.Dockerfile\n# ```\n#\n# If you need to see the commit and branch in logs + metrics,\n# comment this line from .dockerignore\n# ```\n# .git\n# ```\n#\n#######################\n\nFROM node:16-alpine as build\nWORKDIR /usr/app\nRUN apk update && apk add --no-cache g++ make python3 && rm -rf /var/cache/apk/*\n\n# Installs all deps in the root yarn.lock, which are most of them. To cache before copying the src\nCOPY package.json yarn.lock ./\nRUN yarn install --non-interactive --frozen-lockfile --ignore-scripts && yarn cache clean;\n\nCOPY . .\nRUN yarn install --non-interactive --frozen-lockfile && yarn build && yarn cache clean;\n\n# To have access to the specific branch and commit used to build this source,\n# a git-data.json file is created by persisting git data at build time. Then,\n# a version string like `v0.35.0-beta.0/HEAD/82219149 (git)` can be shown in\n# the terminal and in the logs; which is very useful to track tests better.\nRUN cd packages/cli && yarn write-git-data && yarn cache clean;\n\n# Copy built src + node_modules to a new layer to prune unnecessary fs\n# Previous layer weights 7.25GB, while this final 488MB (as of Oct 2020)\nFROM node:16-alpine\nWORKDIR /usr/app\nCOPY --from=build /usr/app .\n\n# NodeJS applications have a default memory limit of 2.5GB.\n# This limit is bit tight for a Prater node, it is recommended to raise the limit\n# since memory may spike during certain network conditions.\nENV NODE_OPTIONS=--max-old-space-size=4096\n\nENTRYPOINT [\"node\", \"./packages/cli/bin/lodestar\"]\n"
}