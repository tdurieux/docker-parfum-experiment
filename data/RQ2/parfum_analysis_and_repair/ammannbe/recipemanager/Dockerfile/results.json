{
  "startTime": 1674250602214,
  "endTime": 1674250602918,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:8.0-apache\n\n# set the application folder as env variable\nENV APP_HOME /var/www/html\n\n# Install system dependencies\nRUN curl -f -L https://deb.nodesource.com/setup_15.x | bash\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    jpegoptim optipng pngquant gifsicle \\\n    libfreetype6-dev \\\n    libjpeg62-turbo-dev \\\n    libpng-dev \\\n    libwebp-dev \\\n    libonig-dev \\\n    libxml2-dev \\\n    nodejs \\\n    git \\\n    sudo && rm -rf /var/lib/apt/lists/*;\n\n# Clear cache\nRUN apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install PHP extensions\nRUN pecl install redis\nRUN rm -rf /tmp/pear\nRUN docker-php-ext-enable redis\n\nRUN docker-php-ext-configure gd \\\n    --with-freetype \\\n    --with-jpeg \\\n    --with-webp\n\nRUN docker-php-ext-install -j$(nproc) \\\n    bcmath \\\n    pdo_mysql \\\n    intl \\\n    pcntl \\\n    opcache \\\n    exif \\\n    gd\n\n# Get latest Composer\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\n\n# change uid/gid of apache to docker user\nRUN usermod -u 1000 www-data && groupmod -g 1000 www-data\n\n# change the web root to /var/www/html/public and port to 8080\nRUN sed -i -e \"s/html/html\\/public/g\" /etc/apache2/sites-enabled/000-default.conf\nRUN sed -i -e \"s/80/8080/g\" /etc/apache2/sites-enabled/000-default.conf\n\n# enable apache module rewrite\nRUN a2enmod rewrite\n\n# copy source files and run composer\nCOPY . $APP_HOME\n\n# Get init data\nCOPY storage/docker/root /\nRUN chmod a+x /usr/local/bin/entrypoint.sh\nRUN chown www-data:www-data /etc/apache2/ports.conf\n\n# Install dependencies\nRUN composer install --optimize-autoloader --no-dev\nRUN npm install && npm cache clean --force;\n\n# change ownership of our applications\nRUN chown -R www-data:www-data $APP_HOME\n\nENTRYPOINT /usr/local/bin/entrypoint.sh\n"
}