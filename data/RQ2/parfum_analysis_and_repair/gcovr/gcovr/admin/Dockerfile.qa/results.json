{
  "startTime": 1674219106469,
  "endTime": 1674219107771,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 143
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG DOCKER_OS\n\nFROM $DOCKER_OS\n\nARG DOCKER_OS\nARG USERID\nARG CC\nARG CXX\n\n# Install dependencies.\n#\n# Installing pip is a bit more complicated though:\n# * `apt install python3.7-pip` -> does not exist\n# * `python3.7 -m ensurepip` -> standard library module removed by Debian\n# * `apt install python3-pip` -> pulls in >100MB of unneeded stuff\n# * `get-pip.py` script -> depends on distutils standard library module, removed by Debian\n#\n# Solution: install python3-setuptools (includes Python 3.6),\n# then use the get-pip script from Python 3.7.\nRUN \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y sudo make $CC $CXX python3-setuptools $(if [ \"$DOCKER_OS\" != \"ubuntu:22.04\" ]; then echo python3.7; fi) ninja-build curl && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Install Python 3.7 as the default \"python3\" executable on older linux distribution\nRUN if [ \"$DOCKER_OS\" = \"ubuntu:18.04\" ]; then \\\n       update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 10; \\\n    fi; \\\n    python3 --version\n\n# Install pip manually\nRUN \\\n    curl -f -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \\\n    python3 get-pip.py && \\\n    rm get-pip.py\n\n# Install nox\nRUN \\\n  python3 -m pip install --no-cache-dir nox\n\nWORKDIR /gcovr\n\nENV \\\n  CC=$CC \\\n  CXX=$CXX \\\n  GCOVR_ISOLATED_TEST=zkQEVaBpXF1i \\\n  NOX_ENV_DIR=/gcovr/.nox-containerized.$CC.uid_$USERID\n# Separate instruction because of reference to NOX_ENV_DIR\nENV \\\n  XDG_CACHE_HOME=$NOX_ENV_DIR/.cache\n\n# Create new user \"docker\" and set password to \"docker\"\nRUN addgroup docker\nRUN useradd -d $HOME -u $USERID -g docker -g sudo -s /bin/bash docker\nRUN echo \"docker:docker\" | chpasswd\n\nUSER docker:docker\n\n# Select language-agnostic \"C\" locale.\n# Unicode is necessary for some tools like \"black\" to work.\nENV LC_ALL=C.UTF-8 LANG=C.UTF-8\n\nCMD ( echo docker | sudo -S -p \"Running chmod with sudo...\" chown -R docker:docker /gcovr/gcovr ) && \\\n  echo \"\\ndone\\nStarting test...\" && \\\n  python3 -m nox --envdir $NOX_ENV_DIR --non-interactive $NOX_OPTIONS --\n"
}