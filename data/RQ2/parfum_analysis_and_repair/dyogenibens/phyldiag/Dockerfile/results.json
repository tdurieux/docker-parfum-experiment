{
  "startTime": 1674221271688,
  "endTime": 1674221273558,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 1,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 1,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 1,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 1,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 1,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 1,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 1,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 1,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:xenial\n\n# Install dependencies of the os\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && rm -rf /var/lib/apt/lists/*\n\n# Install dependencies of LibsDyogen\nRUN add-apt-repository universe && apt-get update &&\\\n echo 'Install core dependencies' && \\\n apt-get install --no-install-recommends -y python2.7 git cython && \\\n echo 'Install marginal dependencies' && \\\n apt-get install --no-install-recommends -y python-numpy && \\\n echo 'Install marginal dependencies from the universe deposit' && \\\n apt-get install --no-install-recommends -y python-matplotlib python-scipy && \\\n rm -rf /var/lib/apt/lists/*\n\n# Install LibsDyogen in INSTALL_DIR\nENV INSTALL_DIR \"/home/${USER}/Dev\"\nRUN mkdir -p ${INSTALL_DIR}\nWORKDIR ${INSTALL_DIR}\nRUN git clone https://github.com/DyogenIBENS/LibsDyogen &&\\\n bash LibsDyogen/cythonisePyxFiles.sh LibsDyogen\n\n# Install plugged-in softwares\n# NB:\n#   zip is used for unzipping, in homology teams only\n#   build-essential provides make, used in homology teams and i-ADHoRe 3.0\nRUN apt-get update && apt-get install --no-install-recommends -y wget zip build-essential && rm -rf /var/lib/apt/lists/*\n\n# Install homology teams\n# NB: homolgy teams depends on gcc compiler for make\nWORKDIR ${INSTALL_DIR}\nRUN wget https://euler.slu.edu/~goldwasser/homologyteams/homologyteams-1.1.zip && \\\n unzip homologyteams-1.1.zip && \\\n cd homologyteams-1.1/src && \\\n make\n# To plug homologyteams to LibsDyogen\n# sed -i \"/PATH_HOMOLOGYTEAMS_BIN =/c\\PATH_HOMOLOGYTEAMS_BIN = \\\"${INSTALL_DIR}/homologyteams-1.1/src/homologyteams\\\"\" ${PATH_LIBSDYOGEN}/utils/myGeneTeams.py\n\n# Install i-ADHoRe 3.0\n# Follow the INSTALL file (i-adhore-3.0.01/INSTALL) provided by the ADHoRe team\n# NB: needs the universe deposit for mpi: add-apt-repository universe\nWORKDIR ${INSTALL_DIR}\nRUN apt-get update &&\\\n echo 'Install core dependencies' && \\\n apt-get install --no-install-recommends -y cmake g++ && \\\n echo 'Install marginal dependencies' && \\\n apt-get install --no-install-recommends -y libpng-dev zlib1g-dev && \\\n echo 'Install marginal dependencies from the universe deposit' && \\\n apt-get install --no-install-recommends -y mpi && \\\n rm -rf /var/lib/apt/lists/* && \\\n wget https://bioinformatics.psb.ugent.be/downloads/psb/i-adhore/i-adhore-3.0.01.tar.gz && \\\n tar -zxvf i-adhore-3.0.01.tar.gz && \\\n rm i-adhore-3.0.01.tar.gz && \\\n cd i-adhore-3.0.01 && \\\n mkdir build && \\\n cd build && \\\n cmake .. && \\\n make\n# You do not need to install it, skip the make install\n# To plug i-adhore to LibsDyogen\n# sed -i \"/PATH_ADHORE_BIN =/c\\PATH_ADHORE_BIN = \\\"${INSTALL_DIR}/i-adhore-3.0.01/build/src/i-adhore\\\"\" ${PATH_LIBSDYOGEN}/utils/myADHoRe.py\n\n# Install Cyntenator\nWORKDIR ${INSTALL_DIR}\n# download the cyntenator files (pointed by https://www.bioinformatics.org/cyntenator/wiki/Main/HomePage)\nRUN apt-get update &&\\\n echo 'Install core dependencies' && \\\n apt-get install --no-install-recommends -y g++ && \\\n rm -rf /var/lib/apt/lists/* && \\\n wget -r -np -nH --cut-dirs=3 -R index.html https://bbc.mdc-berlin.de/svn/bioinformatics/Software/cyntenator/ && \\\n cd cyntenator && \\\n g++ -Wno-deprecated cyntenator.cpp localign.cpp genome.cpp flow.cpp species_tree.cpp -o cyntenator\n# To plug cyntenator to LibsDyogen\n# sed -i \"/PATH_CYNTENATOR_BIN =/c\\PATH_CYNTENATOR_BIN = \\\"${INSTALL_DIR}/cyntenator/cyntenator\\\"\" ${PATH_LIBSDYOGEN}/utils/myCyntenator.py\n\n# Put this at the end since LibsDyogen/enum.py conflicts with python3.5\n# If ENV PATH_LIBSDYOGEN \"${INSTALL_DIR}/LibsDyogen\" is just after the installation step of LibsDyogen:\n#    Traceback (most recent call last):\n#      File \"/usr/bin/add-apt-repository\", line 11, in <module>\n#        from softwareproperties.SoftwareProperties import SoftwareProperties, shortcut_handler\n#      File \"/usr/lib/python3/dist-packages/softwareproperties/SoftwareProperties.py\", line 49, in <module>\n#        from xml.sax.saxutils import escape\n#      File \"/usr/lib/python3.5/xml/sax/saxutils.py\", line 6, in <module>\n#        import os, urllib.parse, urllib.request\n#      File \"/usr/lib/python3.5/urllib/request.py\", line 88, in <module>\n#        import http.client\n#      File \"/usr/lib/python3.5/http/__init__.py\", line 1, in <module>\n#        from enum import IntEnum\n#      File \"/home/Dev/LibsDyogen/enum.py\", line 66\n#        raise NotImplementedError, \\\n#                                 ^\n#    SyntaxError: invalid syntax\nENV PATH_LIBSDYOGEN \"${INSTALL_DIR}/LibsDyogen\"\nENV PYTHONPATH \"${PYTHONPATH}:${PATH_LIBSDYOGEN}\"\n\n# Install PhylDiag\nWORKDIR ${INSTALL_DIR}\n# Clone the PhylDiag deposit\nRUN git clone https://github.com/DyogenIBENS/PhylDiag &&\\\n chmod +x PhylDiag/src/*.py &&\\\n chmod +x PhylDiag/src/analysis/*.py &&\\\n chmod +x PhylDiag/src/postprocessing/*.py &&\\\n cp PhylDiag/src/phylDiag.py /usr/local/bin/phylDiag.py &&\\\n cp PhylDiag/src/phylDiagViewer.py /usr/local/bin/phylDiagViewer.py\n\n# Docker containers mix stdout with stderr\n# Use this to only output stdout (stream 1)\nRUN echo '#!/usr/bin/env bash\\n\\\ndate=$(date +%Y-%m-%d-%H-%M-%S)\\n\\\n$@ 2>> ./${date}.stderr\\n'\\\n>> ./only_stdout.sh &&\\\n chmod +x ./only_stdout.sh &&\\\n mv ./only_stdout.sh /usr/local/bin/only_stdout\n# Use this to only output stderr (stream 2), usefull for debugging\nRUN echo '#!/usr/bin/env bash\\n\\\ndate=$(date +%Y-%m-%d-%H-%M-%S)\\n\\\n$@ 1>> ./${date}.stdout\\n'\\\n>> ./only_stderr.sh &&\\\n chmod +x ./only_stderr.sh &&\\\n mv ./only_stderr.sh /usr/local/bin/only_stderr\n\n# HOWTO to use this Dockerfile :\n\n# First of all build the docker image\n#   docker build -t phyldiagc .\n\n# The easiest way to use this container is to:\n# 1) Define  an input folder (INDIR) and an output folder (OUTDIR) for a 2-way sharing of data between host and container\n#       INDIR=\"/home/${USER}/Dev/PhylDiag/data\" && OUTDIR=\"/tmp\"\n# 2) Start a bash console into the container\n#       docker run -v ${INDIR}:/IN -v ${OUTDIR}:/OUT -ti phyldiagc bash\n# 3) Execute commands using data in IN/ folder and create results in the OUT/ folder, e.g.:\n#       PhylDiag/src/phylDiag.py /IN/Homo.sapiens.genome.bz2 /IN/Mus.musculus.genome.bz2 /IN/Euarchontoglires.families.bz2 > /OUT/res.sbs\n\n# Otherwise you can also use some features of the docker container from outside\n\n# Use phylDiag.py\n#   output: wherever you want with the \">\" at the end of the command\n#   input: ${INDIR}/Homo.sapiens.genome.bz2 ${INDIR}/Mus.musculus.genome.bz2 ${INDIR}/Euarchontoglires.families.bz2\n# 1) Set the INDIR (inputdirectory), for example:\n#   INDIR=\"/home/${USER}/Dev/PhylDiag/data\"\n# 2) Run phylDiag.py\n#   docker run -v ${INDIR}:/IN -ti phyldiagc only_stdout PhylDiag/src/phylDiag.py /IN/Homo.sapiens.genome.bz2 /IN/Mus.musculus.genome.bz2 /IN/Euarchontoglires.families.bz2 > ./HM_MM.sbs\n# DEBUG) output STDERR for debugging purposes\n#   docker run -v ${INDIR}:/IN -ti phyldiagc only_stderr PhylDiag/src/phylDiag.py /IN/Homo.sapiens.genome.bz2 /IN/Mus.musculus.genome.bz2 /IN/Euarchontoglires.families.bz2 > /tmp/err.log\n\n# Use phylDiagImageViewer.py\n#   output: ${OUTDIR}/image.svg\n#   input: ${INDIR}/Homo.sapiens.genome.bz2 ${INDIR}/Mus.musculus.genome.bz2 ${INDIR}/Euarchontoglires.families.bz2\n# 1) Set the INDIR (inputdirectory) and OUTDIR (output directory), for example:\n#   INDIR=\"/home/${USER}/Dev/PhylDiag/data\" && OUTDIR=\"/tmp/\"\n# 2) Run phyldiagViewer.py\n#   docker run -v ${INDIR}:/IN -v ${OUTDIR}:/OUT -ti phyldiagc only_stderr phylDiagViewer.py /IN/Homo.sapiens.genome.bz2 /IN/Mus.musculus.genome.bz2 /IN/Euarchontoglires.families.bz2 /OUT/image.svg > /tmp/err.log\n# NB: you can debug phylDiagImageViewer by looking into /tmp/err.log"
}