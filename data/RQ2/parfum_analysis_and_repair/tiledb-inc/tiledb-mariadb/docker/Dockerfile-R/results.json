{
  "startTime": 1674249679569,
  "endTime": 1674249680500,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 5,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 5,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 51,
        "columnStart": 22,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\nLABEL maintainer=\"support@tiledb.io\"\n\nENV AWS_EC2_METADATA_DISABLED true\n\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=GMT\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  gosu \\\n  pwgen \\\n  tzdata \\\n  gcc \\\n  g++ \\\n  build-essential \\\n  libasan5 \\\n  bison \\\n  chrpath \\\n  cmake \\\n  gdb \\\n  gnutls-dev \\\n  libaio-dev \\\n  libboost-dev \\\n  libdbd-mysql \\\n  libjudy-dev \\\n  libncurses5-dev \\\n  libpam0g-dev \\\n  libpcre3-dev \\\n  libreadline-gplv2-dev \\\n  libstemmer-dev \\\n  libssl-dev \\\n  libnuma-dev \\\n  libxml2-dev \\\n  lsb-release \\\n  perl \\\n  psmisc \\\n  zlib1g-dev \\\n  libcrack2-dev \\\n  cracklib-runtime \\\n  libjemalloc-dev \\\n  libsnappy-dev \\\n  liblzma-dev \\\n  libzmq3-dev \\\n  uuid-dev \\\n  ccache \\\n  git \\\n  wget \\\n  libcurl4-openssl-dev \\\n  software-properties-common \\\n  dirmngr \\\n  libcurl4 \\\n  libcurl4-openssl-dev \\\n  && add-apt-repository --yes \"ppa:marutter/rrutter4.0\" \\\n  && add-apt-repository --yes \"ppa:c2d4u.team/c2d4u4.0+\" \\\n  && apt-get install -y --no-install-recommends \\\n\tr-cran-dbplyr \\\n\tr-cran-bit64 \\\n\tr-cran-hms \\\n\tr-cran-lubridate \\\n\tr-cran-rcpp \\\n\tr-cran-bh \\\n\tr-cran-plogr \\\n\tr-cran-zoo \\\n\tr-cran-xts \\\n\tr-cran-bit64 \\\n\tr-cran-matrix \\\n  && rm -rf /var/lib/apt/lists/*\n\nENV MTR_MEM /tmp\n\nWORKDIR /tmp\n\nENV MARIADB_VERSION=\"mariadb-10.5.13\"\n\nARG MYTILE_VERSION=\"0.17.1\"\n\nARG TILEDB_VERSION=\"2.10.2\"\nARG TILEDB_VERSION_SHORT_SHA=\"9ab84f9\"\nARG TILEDB_PREBUILT_FILE=\"tiledb-linux-x86_64-${TILEDB_VERSION}-${TILEDB_VERSION_SHORT_SHA}.tar.gz\"\n\n# Download mytile release\nRUN wget https://github.com/TileDB-Inc/TileDB-MariaDB/archive/${MYTILE_VERSION}.tar.gz -O /tmp/${MYTILE_VERSION}.tar.gz \\\n  && tar xf /tmp/${MYTILE_VERSION}.tar.gz \\\n  && mv TileDB-MariaDB-${MYTILE_VERSION} mytile && rm /tmp/${MYTILE_VERSION}.tar.gz\n\n# Copy example arrays to opt\nRUN cp -r /tmp/mytile/mysql-test/mytile/test_data/tiledb_arrays /opt/\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql && useradd -r -g mysql mysql\n\n# Set git config so superbuild of tiledb can cherry-pick capnp fix\nRUN git config --global user.email \"you@example.com\" \\\n && git config --global user.name \"Your Name\"\n\n# Install tiledb using 2.4 release\nRUN wget https://github.com/TileDB-Inc/TileDB/releases/download/${TILEDB_VERSION}/${TILEDB_PREBUILT_FILE} \\\n && tar xf ${TILEDB_PREBUILT_FILE} -C /usr \\\n && rm  ${TILEDB_PREBUILT_FILE} \\\n && ldconfig\n\nRUN cp /tmp/mytile/docker/my.cnf /etc/mysql/my.cnf \\\n && cp /tmp/mytile/docker/mytile.cnf /etc/mysql/conf.d/mytile.cnf \\\n && cp /tmp/mytile/docker/docker-entrypoint-interactive.sh /usr/local/bin/docker-entrypoint-interactive.sh\n\nRUN cp /tmp/mytile/docker/init.sh /tmp/init.sh\n\nENV CXXFLAGS=\"${CXXFLAGS} -Wno-error=deprecated-declarations\"\nENV CFLAGS=\"${CFLAGS} -Wno-error=deprecated-declarations\"\n\nRUN wget https://downloads.mariadb.org/interstitial/${MARIADB_VERSION}/source/${MARIADB_VERSION}.tar.gz \\\n  && tar xf ${MARIADB_VERSION}.tar.gz \\\n  && mv /tmp/mytile ${MARIADB_VERSION}/storage/mytile \\\n  && cd ${MARIADB_VERSION} \\\n  && mkdir builddir \\\n  && cd builddir \\\n  && cmake -DPLUGIN_INNODB=NO -DPLUGIN_INNOBASE=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_SPHINX=NO -DPLUGIN_FEDERATED=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_CONNECT=NO -DCMAKE_BUILD_TYPE=Release -SWITH_DEBUG=0 -DBUILD_CONFIG=mysql_release -DWITH_EMBEDDED_SERVER=ON -DCMAKE_INSTALL_PREFIX=/opt/server .. \\\n  && make -j$(nproc) \\\n  && make install \\\n  && cd ../../ \\\n  && rm -r ${MARIADB_VERSION} && rm ${MARIADB_VERSION}.tar.gz\n\n\n# the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n# also, we set debconf keys to make APT a little quieter\nRUN set -ex; \\\n# comment out any \"user\" entires in the MySQL config (\"docker-entrypoint.sh\" or \"--user\" will handle user switching)\n\tsed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf /etc/mysql/conf.d/*; \\\n# purge and re-create /var/lib/mysql with appropriate ownership\n\trm -rf /var/lib/mysql; \\\n\tmkdir -p /var/lib/mysql /var/run/mysqld; \\\n\tchown -R mysql:mysql /var/lib/mysql /var/run/mysqld; \\\n# ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime\n\tchmod 777 /var/run/mysqld; \\\n# comment out a few problematic configuration values\n\tfind /etc/mysql/ -name '*.cnf' -print0 \\\n\t\t| xargs -0 grep -lZE '^(bind-address|log)' \\\n\t\t| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/'; \\\n# don't reverse lookup hostnames, they are usually another container\n\techo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf\n\nRUN chmod +x /usr/local/bin/docker-entrypoint-interactive.sh \\\n\t&& ln -s usr/local/bin/docker-entrypoint-interactive.sh / # backwards compat\n\nENV PATH=\"${PATH}:/opt/server/bin:/opt/server/scripts\"\n\nRUN mkdir /var/log/mysql \\\n\t&& chown -R mysql:mysql /var/log/mysql \\\n\t&& chown -R mysql:mysql /opt/server \\\n\t&& chown -R mysql:mysql /opt/tiledb_arrays\n\n# Set defaults for initializing the server\nENV MYSQL_ALLOW_EMPTY_PASSWORD=1\nENV MYSQL_DATABASE=test\n\n# Set paths needed for bitnami helm mariadb\nRUN mkdir /opt/bitnami && \\\n\tln -s /opt/server /opt/bitnami/mariadb\n\n# Make sure we can link against MariaDB\nRUN echo \"/opt/server/lib\" > /etc/ld.so.conf.d/mariadb.conf \\\n\t&& ldconfig\n\n# Install R packages tiledb and RMariaDB (most dependencies installed above) plus palmerpenguins for demo\nRUN R -q -e 'install.packages(c(\"tiledb\", \"RMariaDB\", \"palmerpenguins\"))'\n\n# Setup initial DB for faster starts\nRUN /tmp/init.sh \"mysqld\"\nUSER mysql\nEXPOSE 3306\n\nCMD [\"docker-entrypoint-interactive.sh\", \"mysqld\"]\n"
}