{
  "startTime": 1674251310266,
  "endTime": 1674251312378,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 55,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 1,
        "columnEnd": 48
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 6,
        "columnEnd": 85
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 6,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 20,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 16,
        "columnStart": 30,
        "columnEnd": 87
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 20,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch-slim\n\n#\n# cluster fuck of packages for neko, node, go and gstreamer\nRUN set -eux; apt-get update; apt-get install -y --no-install-recommends \\\n  apt-transport-https gnupg-agent software-properties-common lsb-release \\\n  autoconf ca-certificates curl netbase wget gnupg dirmngr libatomic1 \\\n  libghc-zlib-dev libexpat1-dev \\\n  bzr mercurial openssh-client subversion procps cmake automake bzip2 dpkg-dev file g++ gcc \\\n  libbz2-dev libc6-dev libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgdbm-dev libglib2.0-dev libgmp-dev \\\n  libjpeg-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev libmaxminddb-dev libncurses5-dev libncursesw5-dev \\\n  libpng-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt-dev libyaml-dev  \\\n  make patch unzip xz-utils zlib1g-dev pkg-config \\\n  build-essential perl python autopoint bison flex \\\n  gettext openssl libopus-dev libvpx-dev libpulse-dev libx11-dev libxv-dev libxt-dev libxrandr-dev \\\n  libxfixes-dev apt-utils x11vnc libxtst-dev dialog \\\n  pulseaudio openbox chromium firefox-esr dbus-x11 xserver-xorg-video-dummy supervisor; rm -rf /var/lib/apt/lists/*;\n\n#\n# add git\nENV GIT_VERSION 2.21.0\n\nRUN set -eux; \\\n  cd /tmp/; \\\n  wget https://github.com/git/git/archive/v$GIT_VERSION.zip -O latestgit.zip; \\\n  unzip latestgit.zip; \\\n  cd git-$GIT_VERSION; \\\n  make prefix=/usr/local all; \\\n  make prefix=/usr/local install; \\\n  rm -rf /tmp/latestgit.zip /tmp/git-$GIT_VERSION;\n\n#\n# install libclipboard\nRUN set -eux; \\\n    cd /tmp; \\\n    git clone https://github.com/jtanx/libclipboard; \\\n    cd libclipboard; \\\n    cmake . ; \\\n    make -j4; \\\n    make install; \\\n    rm -rf /tmp/libclipboard;\n\n#\n# set up env for gst\nENV PATH=/gst/local/bin:$PATH\nENV LD_LIBRARY_PATH=/gst/local/lib:$LD_LIBRARY_PATH\nENV PKG_CONFIG_PATH=/gst/local/lib/pkgconfig:$PKG_CONFIG_PATH\n\n#\n# copy gst\nCOPY .build/gst/local /gst/local/\n\n#\n# add node\nENV NODE_VERSION 12.16.2\nRUN ARCH= && dpkgArch=\"$(dpkg --print-architecture)\" \\\n    && case \"${dpkgArch##*-}\" in \\\n      amd64) ARCH='x64';; \\\n      ppc64el) ARCH='ppc64le';; \\\n      s390x) ARCH='s390x';; \\\n      arm64) ARCH='arm64';; \\\n      armhf) ARCH='armv7l';; \\\n      i386) ARCH='x86';; \\\n      * echo \"unsupported  architecture\"; exit 1;; \\\n    esac \\\n    && set -ex \\\n    && for key in \\\n      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n      FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n      B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n      77984A986EBC2AA786BC0F66B01FBB92821C587A \\\n      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \\\n      4ED778F539E3634C779C87C6D7062848A1AB005C \\\n      A48C2BEE680E841632CD4E44F07496B3EB3C1762 \\\n      B9E2F5981AA6E0CD28160D9FF13993A75599653C; \\\n    do \\\n      gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$key\" || \\\n      gpg --batch --keyserver hkp://ipv4.ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n      gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\"; \\\n    done \\\n    && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\" \\\n    && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n    && grep \" node-v$NODE_VERSION-linux-$ARCH.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n    && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner \\\n    && rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n    && apt-mark auto '.*' > /dev/null \\\n    && find /usr/local -type f -executable -exec ldd '{}' ';' \\\n      | awk '/=>/ { print $(NF-1) }' \\\n      | sort -u \\\n      | xargs -r dpkg-query --search \\\n      | cut -d: -f1 \\\n      | sort -u \\\n      | xargs -r apt-mark manual \\\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs \\\n    # smoke tests\n    && node --version \\\n    && npm --version\n\n#\n# add golang\nENV GOLANG_VERSION 1.14.2\nRUN set -eux; \\\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"${dpkgArch##*-}\" in \\\n\t\tamd64) goRelArch='linux-amd64'; goRelSha256='6272d6e940ecb71ea5636ddb5fab3933e087c1356173c61f4a803895e947ebb3' ;; \\\n\t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='eb4550ba741506c2a4057ea4d3a5ad7ed5a887de67c7232f1e4795464361c83c' ;; \\\n\t\tarm64) goRelArch='linux-arm64'; goRelSha256='bb6d22fe5806352c3d0826676654e09b6e41eb1af52e8d506d3fa85adf7f8d88' ;; \\\n\t\ti386) goRelArch='linux-386'; goRelSha256='cab5f51e6ffb616c6ee963c3d0650ca4e3c4108307c44f2baf233fcb8ff098f6' ;; \\\n\t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='48c22268c81ced9084a43bbe2c1596d3e636b5560b30a32434a7f15e561de160' ;; \\\n\t\ts390x) goRelArch='linux-s390x'; goRelSha256='501cc919648c9d85b901963303c5061ea6814c80f0d35fda9e62980d3ff58cf4' ;; \\\n\t\t*) goRelArch='src'; goRelSha256='98de84e69726a66da7b4e58eac41b99cbe274d7e8906eeb8a5b7eb0aadee7f7c'; \\\n\t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo >&2 ;; \\\n\tesac; \\\n\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \\\n\twget -O go.tgz \"$url\"; \\\n\techo \"${goRelSha256}  *go.tgz\" | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\tif [ \"$goRelArch\" = 'src' ]; then \\\n\t\techo >&2; \\\n\t\techo >&2 'error: UNIMPLEMENTED'; \\\n\t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \\\n\t\techo >&2; \\\n\t\texit 1; \\\n\tfi; \\\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\n\n#\n# install Go tools w/module support\nRUN mkdir -p /tmp/gotools \\\n    && cd /tmp/gotools \\\n    && GOPATH=/tmp/gotools GO111MODULE=on go get -v golang.org/x/tools/gopls@latest 2>&1 \\\n    && GOPATH=/tmp/gotools GO111MODULE=on go get -v \\\n        honnef.co/go/tools/...@latest \\\n        golang.org/x/tools/cmd/gorename@latest \\\n        golang.org/x/tools/cmd/goimports@latest \\\n        golang.org/x/tools/cmd/guru@latest \\\n        golang.org/x/lint/golint@latest \\\n        github.com/mdempsky/gocode@latest \\\n        github.com/cweill/gotests/...@latest \\\n        github.com/haya14busa/goplay/cmd/goplay@latest \\\n        github.com/sqs/goreturns@latest \\\n        github.com/josharian/impl@latest \\\n        github.com/davidrjenni/reftools/cmd/fillstruct@latest \\\n        github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest  \\\n        github.com/ramya-rao-a/go-outline@latest  \\\n        github.com/acroca/go-symbols@latest  \\\n        github.com/godoctor/godoctor@latest  \\\n        github.com/rogpeppe/godef@latest  \\\n        github.com/zmb3/gogetdoc@latest \\\n        github.com/fatih/gomodifytags@latest  \\\n        github.com/mgechev/revive@latest  \\\n        github.com/go-delve/delve/cmd/dlv@latest 2>&1 \\\n    #\n    # build Go tools w/o module support\n    && GOPATH=/tmp/gotools go get -v github.com/alecthomas/gometalinter 2>&1 \\\n    #\n    # build gocode-gomod\n    && GOPATH=/tmp/gotools go get -x -d github.com/stamblerre/gocode 2>&1 \\\n    && GOPATH=/tmp/gotools go build -o gocode-gomod github.com/stamblerre/gocode \\\n    #\n    # install Go tools\n    && mv /tmp/gotools/bin/* /usr/local/bin/ \\\n    && mv gocode-gomod /usr/local/bin/ \\\n    #\n    # install golangci-lint\n    && curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin 2>&1 \\\n    #\n    # setup paths\n    && mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \"$GOPATH/pkg/mod\" \\\n    && chmod -R 777 \"$GOPATH\"\n\n#\n# turn on go modules\nENV GO111MODULE=on\n\n#\n# install docker\nRUN set -eux; \\\n    curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | (OUT=$(apt-key add - 2>&1) || echo $OUT); \\\n    add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable\"; \\\n    apt-get update; apt-get install --no-install-recommends -y docker-ce-cli; rm -rf /var/lib/apt/lists/*;"
}