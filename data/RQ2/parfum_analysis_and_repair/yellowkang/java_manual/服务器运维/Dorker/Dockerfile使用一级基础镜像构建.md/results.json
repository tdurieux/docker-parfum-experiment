{
  "startTime": 1674253426402,
  "endTime": 1674253427346,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 292,
        "lineEnd": 292,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 495,
        "lineEnd": 495,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# 什么是Dockerfile？\n\n​\t\tDockerfile就是为了给我们的项目打包成一个镜像，Dockerfile实际上就是一串指令脚本，也就是将一个jdk或者mysql又或者是一个微服务打包成一个镜像，然后我们就可以通过打包好的镜像直接run容器，这样就可以快速部署，并且完全兼容不受环境的影响，\n\n# Dockerfile的简单使用\n\n​\t\t首先我们先将jdk复制到一个目录下\n\n​\t\t然后再写一个Dockerfile文件\n\n​\t\t名字也叫Dockerfile\n\n```\n#依赖镜像名称和ID\nFROM centos:7\n#指定镜像创建者信息\nMAINTAINER ITCAST\n#切换工作目录,工作目录为sh进入容器的默认路径\nWORKDIR /usr\nRUN mkdir /usr/local/java\n#ADD 是相对路径jar,把java添加到容器中\nADD jdk-8u171-linux-x64.tar.gz /usr/local/java/\n#配置java环境变量\nENV JAVA_HOME /usr/local/java/jdk1.8.0_171\nENV JRE_HOME $JAVA_HOME/jre\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\nENV PATH $JAVA_HOME/bin:$PATH\n```\n\n​\t\t这里我们可以看到他将当前目录的jdk加了进去并且配置了环境变量，然后我们直接使用Docker来构建镜像\n\n​\t使用docker build  然后-t指定名字，然后加上一个点表示当前目录下构建\n\ndocker build -t='jdk1.8' .\n\n然后我们就可以返回目录测试了\n\ncd ~\n\n然后\n\ndocker run 运行，-di后台 --name指定名字，最后空格运行jdk1.8这个镜像\n\ndocker run -di --name jdk1.8 jdk1.8\t\t\n\n# 构建JRE基础镜像\n\n## 打包Jre\n\n​\t\t先去官网下载JRE环境，然后删除多余的东西重新打包\n\n​\t\t下载Jre地址：[Jre地址](https://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html)\n\n​\t\t下载后解压,删除多余jre文件,然后重新压缩包\n\n```sh\nmkdir /tmp/jdk\ntar -zxvf jre-8u231-linux-x64.tar.gz -C /tmp/jdk\ncd /tmp/jdk\ncd jre1.8.0_231\nrm -rf COPYRIGHT LICENSE README* release THIRDPARTYLICENSEREADME-JAVAFX.txt THIRDPARTYLICENSEREADME.txt Welcome.html\nrm -rf   lib/plugin.jar \\\n           lib/ext/jfxrt.jar \\\n           bin/javaws \\\n           lib/javaws.jar \\\n           lib/desktop \\\n           plugin \\\n           lib/deploy* \\\n           lib/*javafx* \\\n           lib/*jfx* \\\n           lib/amd64/libdecora_sse.so \\\n           lib/amd64/libprism_*.so \\\n           lib/amd64/libfxplugins.so \\\n           lib/amd64/libglass.so \\\n           lib/amd64/libgstreamer-lite.so \\\n           lib/amd64/libjavafx*.so \\\n           lib/amd64/libjfx*.so\n\ncd ..\n# 压缩\ntar zcvf jre8.tar.gz jre1.8.0_231\n```\n\n​\t\t\n\n## alpine轻量级版本\n\n​\t\t然后新建Dockerfile文件\n\n```sh\n# 环境变量\nexport JRE_HOME=/usr/local/java/jre1.8.0_231\nexport JAVA_HOME=$JRE_HOME\necho \"FROM docker.io/jeanblanchard/alpine-glibc\nMAINTAINER bigkangsix@qq.com\n# 设置apk源\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\n# 设置时区\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN echo 'Asia/Shanghai' > /etc/timezone\n\nRUN mkdir /usr/local/java\n# 直接将JDK放入/usr/local/java\nADD jre8.tar.gz /usr/local/java\n# 设置环境变量\nENV LANG zh_CN.uft8\nENV JRE_HOME=$JRE_HOME\nENV JAVA_HOME=$JRE_HOME\n# 解决本地PATH导致容器异常，直接写死\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JRE_HOME/bin\" > Dockerfile\nrm -rf jre1.8.0_231\n```\n\n​\t\tbuild镜像\n\n```sh\ndocker build -t bigkang/jre8:alpine .\ndocker stop run\ndocker rm run\ndocker run --name run -di bigkang/jre8:alpine\ndocker exec -it run sh\n进入容器输入java命令出现java提示即可\n```\n\n​\t\t推送阿里云\n\n```sh\n# 登录\ndocker login registry.cn-shanghai.aliyuncs.com\n\n# 标记版本号\ndocker tag bigkang/jre8:alpine registry.cn-shanghai.aliyuncs.com/bigkang/jre8:alpine\n\n# 推送至阿里云\ndocker push registry.cn-shanghai.aliyuncs.com/bigkang/jre8:alpine\n```\n\n\n\n# 构建JDK基础镜像\n\n## 打包Jdk\n\n​\t\t下载地址：[Jdk地址](https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html)\n\n​\t\t首先解压jdk基础镜像\n\n```sh\n# 创建目录解压jdk\nrm -rf /tmp/jdk\nmkdir /tmp/jdk\ntar -zxvf jdk-8u211-linux-x64.tar.gz -C /tmp/jdk\ncd /tmp/jdk\ncd jdk1.8.0_211\n\n# 删除多余文件\nrm -rf  *src.zip \\\n        \"lib/missioncontrol\" \\\n        \"lib/visualvm\" \\\n        \"lib/\"*javafx* \\\n        \"jre/lib/plugin.jar\" \\\n        \"jre/lib/ext/jfxrt.jar\" \\\n        \"jre/bin/javaws\" \\\n        \"jre/lib/javaws.jar\" \\\n        \"jre/lib/desktop\" \\\n        \"jre/plugin\" \\\n        \"jre/lib/\"deploy* \\\n        \"jre/lib/\"*javafx* \\\n        \"jre/lib/\"*jfx* \\\n        \"jre/lib/amd64/libdecora_sse.so\" \\\n        \"jre/lib/amd64/\"libprism_*.so \\\n        \"jre/lib/amd64/libfxplugins.so\" \\\n        \"jre/lib/amd64/libglass.so\" \\\n        \"jre/lib/amd64/libgstreamer-lite.so\" \\\n        \"jre/lib/amd64/\"libjavafx*.so \\\n        \"jre/lib/amd64/\"libjfx*.so \\\n        \"jre/bin/jjs\" \\\n        \"jre/bin/keytool\" \\\n        \"jre/bin/orbd\" \\\n        \"jre/bin/pack200\" \\\n        \"jre/bin/policytool\" \\\n        \"jre/bin/rmid\" \\\n        \"jre/bin/rmiregistry\" \\\n        \"jre/bin/servertool\" \\\n        \"jre/bin/tnameserv\" \\\n        \"jre/bin/unpack200\" \\\n        \"jre/lib/ext/nashorn.jar\" \\\n        \"jre/lib/jfr.jar\" \\\n        \"jre/lib/jfr\" \\\n        \"jre/lib/oblique-fonts\" \\\n        \"jre/lib/security/README.txt\"\nrm -rf COPYRIGHT LICENSE README* release THIRDPARTYLICENSEREADME-JAVAFX.txt THIRDPARTYLICENSEREADME.txt Welcome.html\ncd jre\nrm -rf COPYRIGHT LICENSE README* release THIRDPARTYLICENSEREADME-JAVAFX.txt THIRDPARTYLICENSEREADME.txt Welcome.html\n\n\n# 返回目录重新打包\ncd ..\ncd ..\ntar zcvf jdk8.tar.gz jdk1.8.0_211\n```\n\n## Alpine轻量级版本\n\n```sh\n# 环境变量\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_211\nexport JRE_HOME=$JAVA_HOME/jre\necho \"FROM docker.io/jeanblanchard/alpine-glibc\nMAINTAINER bigkangsix@qq.com\n# 设置apk源\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\n\nRUN wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\nRUN wget -q -O /tmp/glibc-2.29-r0.apk  https://github.91chifun.workers.dev//https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.29-r0/glibc-2.29-r0.apk\nRUN apk add --no-cache /tmp/glibc-2.29-r0.apk\nRUN apk add --no-cache bash\n# 设置时区\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN echo 'Asia/Shanghai' > /etc/timezone\n\nRUN mkdir /usr/local/java\n# 直接将JDK放入/usr/local/java\nADD jdk8.tar.gz /usr/local/java\n# 设置环境变量\nENV LANG zh_CN.uft8\nENV JAVA_HOME=$JAVA_HOME\nENV JRE_HOME=$JRE_HOME\n# 解决本地PATH导致容器异常，直接写死\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JAVA_HOME/bin\" > Dockerfile\n\n\n# 删除停止以前容器\ndocker stop run\ndocker rm run\n# 构建镜像\ndocker build -t bigkang/jdk8:alpine .\n\n# 启动测试容器\ndocker run --name run -di bigkang/jdk8:alpine\n\n# 进入容器\ndocker exec -it run sh\n\n# 打印版本\njava -version\n```\n\n​\t\t安装字体工具库（选装，如果没有特殊要求则不需要安装其他字体）\n\n```sh\napk add font-adobe-100dpi\n```\n\n​\t\t推送镜像\n\n```sh\n# 登录\ndocker login registry.cn-shanghai.aliyuncs.com\n\n# 标记版本号\ndocker tag bigkang/jdk8:alpine registry.cn-shanghai.aliyuncs.com/bigkang/jdk8:alpine\n\n# 推送至阿里云\ndocker push registry.cn-shanghai.aliyuncs.com/bigkang/jdk8:alpine\n```\n\n## OpenJdk11+Alpine基础镜像\n\n\n\n\n\n```bash\ndocker push bigkang/jdk:openjdk-11-alpine-font\ndocker tag bigkang/jdk:openjdk-11-alpine-font registry.gitlab.botpy.com/botpy/vosp/backend-common/openjdk:11.0.9\n\npxto8ZwFz4B_ha2t_Qkj\n```\n\n\n\n\n\n```bash\n# 父镜像\nFROM alpine:3.12\nMAINTAINER bigkangsix@qq.com\n# 设置apk源为清华\n# RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirror.tuna.tsinghua.edu.cn/g' /etc/apk/repositories\n# 安装bash curl 以及jdk11 还有字体\nRUN apk add --no-cache bash curl openjdk11 ttf-dejavu fontconfig\n# 设置时区\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN echo 'Asia/Shanghai' > /etc/timezone\n\n# 设置环境变量\nENV LANG zh_CN.uft8\n```\n\n## CentOS版本\n\n新建Dockerfile文件\n\n```sh\n# 环境变量\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_211\nexport JRE_HOME=$JAVA_HOME/jre\n# 下载阿里云加速\nwget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\necho \"FROM centos:7\nMAINTAINER bigkangsix@qq.com\n# 设置编码\nRUN localedef -c -f UTF-8 -i zh_CN zh_CN.utf8\nENV LC_ALL \"zh_CN.UTF-8\"\n# 设置时区\nENV TZ=Asia/Shanghai\nRUN ls -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo '$TZ' > /etc/timezone\n\n# 设置yum加速源\nADD CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo\n# 直接将JDK放入/usr/local/java\nRUN mkdir /usr/local/java\nADD jdk8.tar.gz /usr/local/java\n# 设置环境变量\nENV JAVA_HOME=$JAVA_HOME\nENV JRE_HOME=$JRE_HOME\n# 解决本地PATH导致容器异常，直接写死\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JAVA_HOME/bin\" > Dockerfile\n\n# 删除停止以前容器\ndocker stop run\ndocker rm run\n# 构建镜像\ndocker build -t bigkang/jdk8:centos .\n\n# 启动测试容器\ndocker run --name run -di bigkang/jdk8:centos\n\n# 进入容器\ndocker exec -it run sh\n\n# 打印版本\njava -version\n```\n\n\n\n## 添加Arthas\n\n​\t\t如果需要将阿里的监控工具**Arthas**整和到jdk里面\n\n```\nwget https://arthas.aliyun.com/arthas-boot.jar\n```\n\n​\t\t然后修改DockerFile,将arthas-boot添加进去即可\n\n```sh\nCOPY arthas-boot.jar /arthas-boot.jar\n```\n\n​\t\t然后重新打包\t\t\n\n\n\n# 构建带Ubantu的Jre镜像\n\n先去官网下载JRE环境，然后删除多余的东西重新打包\n\n下载Jre地址：[Jre地址](https://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html)\n\n下载后解压\n\n```sh\nmkdir /tmp/jdk\ntar -zxvf jre-8u231-linux-x64.tar.gz -C /tmp/jdk\ncd /tmp/jdk\nmv jre1.8.0_231 usr\ncd usr\nrm -rf COPYRIGHT LICENSE README release THIRDPARTYLICENSEREADME-JAVAFX.txt THIRDPARTYLICENSEREADME.txt Welcome.html\nrm -rf   lib/plugin.jar \\\n           lib/ext/jfxrt.jar \\\n           bin/javaws \\\n           lib/javaws.jar \\\n           lib/desktop \\\n           plugin \\\n           lib/deploy* \\\n           lib/*javafx* \\\n           lib/*jfx* \\\n           lib/amd64/libdecora_sse.so \\\n           lib/amd64/libprism_*.so \\\n           lib/amd64/libfxplugins.so \\\n           lib/amd64/libglass.so \\\n           lib/amd64/libgstreamer-lite.so \\\n           lib/amd64/libjavafx*.so \\\n           lib/amd64/libjfx*.so\n\ncd ..\ntar zcvf jre8.tar.gz usr\n```\n\n然后创建Dockerfile，将jre8.tar.gz放入当前目录下，Dockerfile目录如下\n\n```sh\necho \"FROM boystar/ubantu\n# 设置apt源\nRUN touch /etc/apt/sources.list\nRUN echo \"deb http://mirrors.163.com/ubuntu precise main universe\" > /etc/apt/sources.list\n# 安装 vim ping ifconfig ip tcpdump nc curl iptables python 常用命令\nRUN apt-get -y update\nADD jre8.tar.gz /\" > Dockerfile\n```\n\n然后构建\n\n```\ndocker build -t \"xhbjdk1.8\" .\n```\n\n# 关于镜像命令行无法使用中文问题\n\n我们只需要指定环境，通常都是支持中文的\n\n```\nENV LANG=C.UTF-8\n```\n\n\n\n\n\n\n\n我们在Docker file 中新增参数即可\n\n测试添加jar包springboot项目以及arthas监控\n\n```\necho \"FROM kang/jdk1.8\nCOPY test-web.jar /app.jar\nCOPY arthas-boot.jar /arthas-boot.jar\nENV JAVA_OPTS=\"\"\nENV APP_OPTS=\"\"\nCMD java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -Dfile.encoding=UTF8 -Duser.timezone=GMT+08 -jar /app.jar $APP_OPTS\nEXPOSE 8081\" > Dockerfile-app\n```\n\n```\ndocker build -t test-web -f Dockerfile-app .\n```\n\n```\ndocker stop test-web\ndocker rm test-web\n\ndocker run --name test-web -di -p 8081:8081 test-web\n```\n\n```\ndocker images|grep none|awk '{print $3 }'|xargs docker rmi\n```\n\n```\ndocker ps -a |grep /bin/sh |awk '{print $1 }'|xargs docker rm\n```\n\n\n\n\n\n\n\n```\ndocker run --name run -di bigkang/jdk8-arthas:latest\ndocker exec -it run sh\n\ndocker stop run\ndocker rm run\n```\n\n\n\n```sh\n# 环境变量\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_211\nexport JRE_HOME=$JAVA_HOME/jre\necho \"FROM docker.io/jeanblanchard/alpine-glibc\nMAINTAINER bigkangsix@qq.com\n# 设置apk源\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\n\nRUN wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\nRUN wget -q -O /tmp/glibc-2.29-r0.apk  https://github.91chifun.workers.dev//https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.29-r0/glibc-2.29-r0.apk\nRUN apk add --no-cache /tmp/glibc-2.29-r0.apk\n# 设置时区\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN echo 'Asia/Shanghai' > /etc/timezone\n\nRUN mkdir /usr/local/java\n# 直接将JDK放入/usr/local/java\nADD jdk8.tar.gz /usr/local/java\n# 设置环境变量\nENV LANG zh_CN.uft8\nENV JAVA_HOME=$JAVA_HOME\nENV JRE_HOME=$JRE_HOME\n# 解决本地PATH导致容器异常，直接写死\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JAVA_HOME/bin\" > Dockerfile\n\n# 构建镜像\ndocker build -t bigkang/jdk8:alpine .\ndocker stop run\ndocker rm run\ndocker run --name run -di bigkang/jdk8:alpine\ndocker exec -it run sh\n```\n\n"
}