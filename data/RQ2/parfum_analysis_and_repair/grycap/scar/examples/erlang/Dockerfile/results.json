{
  "startTime": 1674246951501,
  "endTime": 1674246957171,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 45,
        "columnStart": 9,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Original Dockerfile from https://github.com/c0b/docker-erlang-otp/blob/8128be859f47c39473be9fa2c2ae33af28f74279/20/Dockerfile\n# Slightly adapted by @gmolto for reduced footprint to be run on AWS Lambda via SCAR\nFROM bitnami/minideb:jessie\n\nENV OTP_VERSION=\"20.0\"\n\n# We'll install the build dependencies, and purge them on the last step to make\n# sure our final image contains only what we've just built:\nRUN set -xe \\\n    && OTP_DOWNLOAD_URL=\"https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz\" \\\n    && OTP_DOWNLOAD_SHA256=\"548815fe08f5b661d38334ffa480e9e0614db5c505da7cb0dc260e729697f2ab\" \\\n    && fetchDeps=' \\\n        curl \\\n        ca-certificates' \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends $fetchDeps \\\n    && curl -fSL -o otp-src.tar.gz \"$OTP_DOWNLOAD_URL\" \\\n    && echo \"$OTP_DOWNLOAD_SHA256  otp-src.tar.gz\" | sha256sum -c - \\\n    && runtimeDeps=' \\\n        libodbc1 \\\n        libssl1.0.0 \\\n        libsctp1 \\\n        libwxgtk3.0-0 \\\n    ' \\\n    && buildDeps=' \\\n        autoconf \\\n        gcc \\\n        make \\\n        libncurses-dev \\\n        unixodbc-dev \\\n        libssl-dev \\\n        libsctp-dev \\\n        libwxgtk3.0-dev \\\n    ' \\\n    && apt-get install -y --no-install-recommends $runtimeDeps \\\n    && apt-get install -y --no-install-recommends $buildDeps \\\n    && curl -fSL -o otp-src.tar.gz \"$OTP_DOWNLOAD_URL\" \\\n    && echo \"$OTP_DOWNLOAD_SHA256  otp-src.tar.gz\" | sha256sum -c - \\\n    && export ERL_TOP=\"/usr/src/otp_src_${OTP_VERSION%%@*}\" \\\n    && mkdir -vp $ERL_TOP \\\n    && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 \\\n    && rm otp-src.tar.gz \\\n    && ( cd $ERL_TOP \\\n      && ./otp_build autoconf \\\n      && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --enable-dirty-schedulers \\\n      && make -j$(nproc) \\\n      && make install) \\\n    && find /usr/local -name examples | xargs rm -rf \\\n    && apt-get purge -y --auto-remove $buildDeps $fetchDeps \\\n    && rm -rf $ERL_TOP /var/lib/apt/lists/*\n\nCMD [\"/bin/sh\",\"/usr/local/bin/erl\"]\n"
}