{
  "startTime": 1674254066125,
  "endTime": 1674254068880,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 21,
        "columnEnd": 30
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 21,
        "columnEnd": 30
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 2,
        "columnEnd": 123
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 49,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file describes the standard way to build Docker on aarch64, using docker\n#\n# Usage:\n#\n# # Assemble the full dev environment. This is slow the first time.\n# docker build -t docker -f Dockerfile.aarch64 .\n#\n# # Mount your source in an interactive container for quick testing:\n# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n# # Run the test suite:\n# docker run --privileged docker hack/make.sh test\n#\n# Note: AppArmor used to mess with privileged mode, but this is no longer\n# the case. Therefore, you don't have to disable it anymore.\n#\n\nFROM aarch64/ubuntu:wily\n\n# Packaged dependencies\nRUN apt-get update && apt-get install -y \\\n\tapparmor \\\n\taufs-tools \\\n\tautomake \\\n\tbash-completion \\\n\tbtrfs-tools \\\n\tbuild-essential \\\n\tcreaterepo \\\n\tcurl \\\n\tdpkg-sig \\\n\tg++ \\\n\tgcc \\\n\tgit \\\n\tiptables \\\n\tjq \\\n\tlibapparmor-dev \\\n\tlibc6-dev \\\n\tlibcap-dev \\\n\tlibsqlite3-dev \\\n\tlibsystemd-dev \\\n\tmercurial \\\n\tnet-tools \\\n\tparallel \\\n\tpkg-config \\\n\tpython-dev \\\n\tpython-mock \\\n\tpython-pip \\\n\tpython-websocket \\\n\tgccgo \\\n\t--no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# Install armhf loader to use armv6 binaries on armv8\nRUN dpkg --add-architecture armhf \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends -y libc6:armhf && rm -rf /var/lib/apt/lists/*;\n\n# Get lvm2 source for compiling statically\nENV LVM2_VERSION 2.02.103\nRUN mkdir -p /usr/local/lvm2 \\\n\t&& curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" \\\n\t\t| tar -xzC /usr/local/lvm2 --strip-components=1\n# see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n\n# fix platform enablement in lvm2 to support aarch64 properly\nRUN set -e \\\n\t&& for f in config.guess config.sub; do \\\n\t\tcurl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\"; \\\n\tdone\n# \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n\n# Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n\t&& ./configure \\\n\t\t--build=\"$(gcc -print-multiarch)\" \\\n\t\t--enable-static_link \\\n\t&& make device-mapper \\\n\t&& make install_device-mapper\n# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n\n# install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION 2.3.0\nRUN set -x \\\n\t&& export SECCOMP_PATH=\"$(mktemp -d)\" \\\n\t&& curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" \\\n\t\t| tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n\t&& ( cd \"$SECCOMP_PATH\" \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n\t\t&& make \\\n\t\t&& make install \\\n\t\t&& ldconfig) \\\n\n\t&& rm -rf \"$SECCOMP_PATH\"\n\n# Install Go\n# We don't have official binary tarballs for ARM64, eigher for Go or bootstrap,\n# so we use the official armv6 released binaries as a GOROOT_BOOTSTRAP, and\n# build Go from source code.\nENV GO_VERSION 1.5.4\nRUN mkdir /usr/src/go && curl -fsSL https://storage.googleapis.com/golang/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/src/go -xz --strip-components=1 \\\n\t&& cd /usr/src/go/src \\\n\t&& GOOS=linux GOARCH=arm64 GOROOT_BOOTSTRAP=\"$(go env GOROOT)\" ./make.bash && rm -rf /usr/src/go\n\nENV PATH /usr/src/go/bin:$PATH\nENV GOPATH /go:/go/src/github.com/docker/docker/vendor\n\n# Only install one version of the registry, because old version which support\n# schema1 manifests is not working on ARM64, we should skip integration-cli\n# tests for schema1 manifests on ARM64.\nENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n\t&& (cd \"$GOPATH/src/github.com/docker/distribution\" && git checkout -q \"$REGISTRY_COMMIT\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n\t&& rm -rf \"$GOPATH\"\n\n# Install notary server\nENV NOTARY_VERSION docker-v1.11-3\nRUN set -x \\\n\t&& export GO15VENDOREXPERIMENT=1 \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n\t&& (cd \"$GOPATH/src/github.com/docker/notary\" && git checkout -q \"$NOTARY_VERSION\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n\t&& rm -rf \"$GOPATH\"\n\n# Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT e2878cbcc3a7eef99917adc1be252800b0e41ece\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n\t&& cd /docker-py \\\n\t&& git checkout -q $DOCKER_PY_COMMIT \\\n\t&& pip install --no-cache-dir -r test-requirements.txt\n\n# Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n\n# Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\n\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux\n\n# Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n\n# Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n\n# Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \\\n\taarch64/buildpack-deps:jessie@sha256:6aa1d6910791b7ac78265fd0798e5abd6cb3f27ae992f6f960f6c303ec9535f2 \\\n\taarch64/busybox:latest@sha256:b23a6a37cf269dff6e46d2473b6e227afa42b037e6d23435f1d2bc40fc8c2828 \\\n\taarch64/debian:jessie@sha256:4be74a41a7c70ebe887b634b11ffe516cf4fcd56864a54941e56bb49883c3170 \\\n\taarch64/hello-world:latest@sha256:65a4a158587b307bb02db4de41b836addb0c35175bdc801367b1ac1ddeb9afda\n# see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n\n# Download man page generator\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone --depth 1 -b v1.0.4 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n\t&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n\t&& go get -v -d github.com/cpuguy83/go-md2man \\\n\t&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n\t&& rm -rf \"$GOPATH\"\n\n# Download toml validator\nENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n\t&& (cd \"$GOPATH/src/github.com/BurntSushi/toml\" && git checkout -q \"$TOMLV_COMMIT\") \\\n\t&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n\t&& rm -rf \"$GOPATH\"\n\n# Install runc\nENV RUNC_COMMIT baf6536d6259209c3edfa2b22237af82942d3dfa\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone git://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n\t&& cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n\t&& git checkout -q \"$RUNC_COMMIT\" \\\n\t&& make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n\t&& cp runc /usr/local/bin/docker-runc && rm -rf -d\n\n# Install containerd\nENV CONTAINERD_COMMIT 9dc2b3273db42c75368988a3885a3afd770069d9\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone git://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n\t&& cd \"$GOPATH/src/github.com/docker/containerd\" \\\n\t&& git checkout -q \"$CONTAINERD_COMMIT\" \\\n\t&& make static \\\n\t&& cp bin/containerd /usr/local/bin/docker-containerd \\\n\t&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n\t&& cp bin/ctr /usr/local/bin/docker-containerd-ctr && rm -rf -d\n\n# Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n\n# Upload docker source\nCOPY . /go/src/github.com/docker/docker\n"
}