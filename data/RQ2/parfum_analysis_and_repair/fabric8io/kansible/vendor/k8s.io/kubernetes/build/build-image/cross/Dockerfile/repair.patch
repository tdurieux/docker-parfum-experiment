diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/fabric8io/kansible/vendor/k8s.io/kubernetes/build/build-image/cross/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/fabric8io/kansible/vendor/k8s.io/kubernetes/build/build-image/cross/Dockerfile/repaired.Dockerfile
index 333a6e3..90af665 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/fabric8io/kansible/vendor/k8s.io/kubernetes/build/build-image/cross/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/fabric8io/kansible/vendor/k8s.io/kubernetes/build/build-image/cross/Dockerfile/repaired.Dockerfile
@@ -32,28 +32,30 @@ RUN cd /usr/src/go/src \
 
 # Install g++, then download and install protoc for generating protobuf output
 RUN apt-get update \
-  && apt-get install -y g++ rsync \
+  && apt-get install --no-install-recommends -y g++ rsync \
   && apt-get clean && rm -rf /var/lib/apt/lists/*
 
 RUN mkdir -p /usr/local/src/protobuf && cd /usr/local/src/protobuf &&\
     wget -q https://github.com/google/protobuf/releases/download/v3.0.0-beta-2/protobuf-cpp-3.0.0-beta-2.tar.gz &&\
     tar xzvf protobuf-cpp-3.0.0-beta-2.tar.gz &&\
-    cd protobuf-3.0.0-beta-2 &&\
-    ./configure &&\
-    make install &&\
-    ldconfig &&\
-    cd .. &&\
-    rm -rf protobuf-3.0.0-beta-2 &&\
-    protoc --version
+    cd protobuf-3.0.0-beta-2 && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && \
+    make install && \
+    ldconfig && \
+    cd .. && \
+    rm -rf protobuf-3.0.0-beta-2 && \
+    protoc --version && rm protobuf-cpp-3.0.0-beta-2.tar.gz
 
 # Use dynamic cgo linking for architectures other than amd64 for the server platforms
 # More info here: https://wiki.debian.org/CrossToolchains
 RUN echo "deb http://emdebian.org/tools/debian/ jessie main" > /etc/apt/sources.list.d/cgocrosscompiling.list \
-  && curl -s http://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add - \
+  && curl -f -s https://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add - \
   && for platform in ${KUBE_DYNAMIC_CROSSPLATFORMS}; do dpkg --add-architecture ${platform}; done \
   && apt-get update \
-  && apt-get install -y build-essential \
-  && for platform in ${KUBE_DYNAMIC_CROSSPLATFORMS}; do apt-get install -y crossbuild-essential-${platform}; done \
+  && apt-get install --no-install-recommends -y build-essential \
+  && for platform in ${KUBE_DYNAMIC_CROSSPLATFORMS}; do \
+   apt-get install --no-install-recommends -y crossbuild-essential-${platform}; \
+ done \
   && apt-get clean && rm -rf /var/lib/apt/lists/*
 
 # work around 64MB tmpfs size in Docker 1.6
@@ -68,5 +70,5 @@ RUN export ETCD_VERSION=v2.2.1; \
     mkdir -p /usr/local/src/etcd &&\
     cd /usr/local/src/etcd &&\
     curl -fsSLO https://github.com/coreos/etcd/releases/download/$ETCD_VERSION/etcd-$ETCD_VERSION-linux-amd64.tar.gz &&\
-    tar xzf etcd-$ETCD_VERSION-linux-amd64.tar.gz &&\
-    ln -s ../src/etcd/etcd-$ETCD_VERSION-linux-amd64/etcd /usr/local/bin/
+    tar xzf etcd-$ETCD_VERSION-linux-amd64.tar.gz && \
+    ln -s ../src/etcd/etcd-$ETCD_VERSION-linux-amd64/etcd /usr/local/bin/ && rm etcd-$ETCD_VERSION-linux-amd64.tar.gz