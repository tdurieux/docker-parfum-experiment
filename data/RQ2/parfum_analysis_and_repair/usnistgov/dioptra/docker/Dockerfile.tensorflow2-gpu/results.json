{
  "startTime": 1674253096079,
  "endTime": 1674253098081,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 124,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Software (Dioptra) is being made available as a public service by the\n# National Institute of Standards and Technology (NIST), an Agency of the United\n# States Department of Commerce. This software was developed in part by employees of\n# NIST and in part by NIST contractors. Copyright in portions of this software that\n# were developed by NIST contractors has been licensed or assigned to NIST. Pursuant\n# to Title 17 United States Code Section 105, works of NIST employees are not\n# subject to copyright protection in the United States. However, NIST may hold\n# international copyright in software created by its employees and domestic\n# copyright (or licensing rights) in portions of software that were assigned or\n# licensed to NIST. To the extent that NIST holds copyright in this software, it is\n# being made available under the Creative Commons Attribution 4.0 International\n# license (CC BY 4.0). The disclaimers of the CC BY 4.0 license apply to all parts\n# of the software developed or licensed by NIST.\n#\n# ACCESS THE FULL CC BY 4.0 LICENSE HERE:\n# https://creativecommons.org/licenses/by/4.0/legalcode\n#\n# Part of this script is adapted from the work\n# https://github.com/jupyter/docker-stacks/blob/6bf5922f5a511b4ff28f23783a716df75b8b8d4b/base-notebook/Dockerfile.\n# See copyright below.\n#\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# Redistributions of source code must retain the above copyright notice, this\n# list of conditions and the following disclaimer.\n#\n# Redistributions in binary form must reproduce the above copyright notice, this\n# list of conditions and the following disclaimer in the documentation and/or\n# other materials provided with the distribution.\n#\n# Neither the name of the Jupyter Development Team nor the names of its\n# contributors may be used to endorse or promote products derived from this\n# software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n######################################################################################################\n# Base images\n######################################################################################################\n\nARG TENSORFLOW_NVIDIA_CUDA_VERSION\nARG BASE_IMAGE=public-base\n\n# -- Base image (public-facing) ----------------------------------------------------------------------\n\nFROM nvidia/cuda:${TENSORFLOW_NVIDIA_CUDA_VERSION} AS public-base\n\nUSER root\n\nENV DEBIAN_FRONTEND noninteractive\nENV LANG C.UTF-8\nENV LANGUAGE C.UTF-8\nENV LC_ALL C.UTF-8\n\n# -- Base image (includes corporate certs) -----------------------------------------------------------\n\nFROM public-base AS mitre-base\n\n# The MITRE certs are necessary to install in order for wget to work\nADD http://pki.mitre.org/MITRE%20BA%20ROOT.crt /usr/local/share/ca-certificates/MITRE-BA-ROOT.crt\nADD http://pki.mitre.org/MITRE%20BA%20NPE%20CA-3%281%29.crt /usr/local/share/ca-certificates/MITRE-BA-NPE-CA-3-1.crt\nADD http://pki.mitre.org/MITRE-chain.txt /usr/local/share/ca-certificates/MITRE-chain.pem\nADD http://pki.mitre.org/ZScaler_Root.crt /usr/local/share/ca-certificates/ZScaler_Root.crt\n\nRUN cat /etc/ssl/certs/ca-certificates.crt /usr/local/share/ca-certificates/MITRE-chain.pem /usr/local/share/ca-certificates/ZScaler_Root.crt >/etc/ssl/certs/ca-certificates-plus-mitre.pem && \\\n    /usr/sbin/update-ca-certificates\n\nENV AWS_CA_BUNDLE /etc/ssl/certs/ca-certificates-plus-mitre.pem\nENV CURL_CA_BUNDLE /etc/ssl/certs/ca-certificates-plus-mitre.pem\nENV NODE_EXTRA_CA_CERTS /etc/ssl/certs/ca-certificates-plus-mitre.pem\nENV REQUESTS_CA_BUNDLE /etc/ssl/certs/ca-certificates-plus-mitre.pem\nENV SSL_CERT_FILE /etc/ssl/certs/ca-certificates-plus-mitre.pem\n\n# -- Base image --------------------------------------------------------------------------------------\n\nFROM ${BASE_IMAGE} as base\n\nRUN apt-get update && \\\n    echo \"===> Upgrade existing packages....\" && \\\n    apt-get -y upgrade && \\\n    echo \"===> Installing ca-certificates curl git libbz2-1.0 liblz4-1 liblzma5 libsnappy1v5 libzstd1 unzip wget zlib1g....\" && \\\n    apt-get install -yq --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    git \\\n    libbz2-1.0 \\\n    libgl1 \\\n    liblz4-1 \\\n    liblzma5 \\\n    libsnappy1v5 \\\n    libzstd1 \\\n    unzip \\\n    wget \\\n    zlib1g && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# -- Base image (includes compiler toolchain) --------------------------------------------------------\n\nFROM base AS build-base\n\nRUN echo \"===> Installing compilers....\" && \\\n    apt-get update && \\\n    apt-get install -yq --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*;\n\n# -- Base image (includes system Python with build package) ------------------------------------------\n\nFROM base AS python-base\n\nRUN echo \"===> Installing system Python....\" && \\\n    apt-get update && \\\n    apt-get install -yq --no-install-recommends \\\n    python3.9 \\\n    python3.9-venv \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN echo \"===> Installing latest version of pip....\" && \\\n    python3.9 -m pip install --upgrade pip && \\\n    echo \"===> Installing build package....\" && \\\n    python3.9 -m pip install build\n\n# -- Base image (includes argbash tool) --------------------------------------------------------------\n\nFROM matejak/argbash:latest AS argbash-base\n\nRUN mkdir -p /shellscripts\n\n# -- Base image (includes yq tool) -------------------------------------------------------------------\n\nFROM base AS yq-base\n\nARG YQ_VERSION=v4.25.1\nARG YQ_BINARY=yq_linux_amd64\n\nRUN mkdir -p /conda-env && \\\n    wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${YQ_BINARY} && \\\n    chmod 0755 /usr/local/bin/yq\n\n######################################################################################################\n# Build\n######################################################################################################\n\n# -- Build: render bash script templates -------------------------------------------------------------\n\nFROM argbash-base AS build-bash-scripts\n\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/conda-env.m4 /templates/conda-env.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/entrypoint-mlflow-tracking.m4 /templates/entrypoint-mlflow-tracking.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/entrypoint-nginx.m4 /templates/entrypoint-nginx.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/entrypoint-restapi.m4 /templates/entrypoint-restapi.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/entrypoint-worker.m4 /templates/entrypoint-worker.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/fix-permissions.m4 /templates/fix-permissions.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/init-copy.m4 /templates/init-copy.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/init-git-clone.m4 /templates/init-git-clone.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/init-set-permissions.m4 /templates/init-set-permissions.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/parse-uri.m4 /templates/parse-uri.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/render-conda-env.m4 /templates/render-conda-env.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/run-mlflow-job.m4 /templates/run-mlflow-job.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/s3-cp.m4 /templates/s3-cp.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/s3-mb.m4 /templates/s3-mb.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/s3-sync.m4 /templates/s3-sync.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/secure-container.m4 /templates/secure-container.m4\nCOPY --chown=root:root --chmod=0755 docker/shellscripts/unpack-archive.m4 /templates/unpack-archive.m4\n\nRUN argbash /templates/conda-env.m4 -o /shellscripts/conda-env.sh && \\\n    argbash /templates/entrypoint-mlflow-tracking.m4 -o /shellscripts/entrypoint-mlflow-tracking.sh && \\\n    argbash /templates/entrypoint-nginx.m4 -o /shellscripts/entrypoint-nginx.sh && \\\n    argbash /templates/entrypoint-restapi.m4 -o /shellscripts/entrypoint-restapi.sh && \\\n    argbash /templates/entrypoint-worker.m4 -o /shellscripts/entrypoint-worker.sh && \\\n    argbash /templates/fix-permissions.m4 -o /shellscripts/fix-permissions.sh && \\\n    argbash /templates/init-copy.m4 -o /shellscripts/init-copy.sh && \\\n    argbash /templates/init-git-clone.m4 -o /shellscripts/init-git-clone.sh && \\\n    argbash /templates/init-set-permissions.m4 -o /shellscripts/init-set-permissions.sh && \\\n    argbash /templates/parse-uri.m4 -o /shellscripts/parse-uri.sh && \\\n    argbash /templates/render-conda-env.m4 -o /shellscripts/render-conda-env.sh && \\\n    argbash /templates/run-mlflow-job.m4 -o /shellscripts/run-mlflow-job.sh && \\\n    argbash /templates/s3-cp.m4 -o /shellscripts/s3-cp.sh && \\\n    argbash /templates/s3-mb.m4 -o /shellscripts/s3-mb.sh && \\\n    argbash /templates/s3-sync.m4 -o /shellscripts/s3-sync.sh && \\\n    argbash /templates/secure-container.m4 -o /shellscripts/secure-container.sh && \\\n    argbash /templates/unpack-archive.m4 -o /shellscripts/unpack-archive.sh\n\n# -- Build: render environment.yml templates ---------------------------------------------------------\n\nFROM yq-base AS build-environment-yml-files\n\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/render-conda-env.sh /usr/local/bin/render-conda-env.sh\nCOPY --chown=root:root --chmod=0644 docker/conda-env/environment-mlflow-tracking.yml /templates/environment-mlflow-tracking.yml\nCOPY --chown=root:root --chmod=0644 docker/conda-env/environment-pytorch-cpu.yml /templates/environment-pytorch-cpu.yml\nCOPY --chown=root:root --chmod=0644 docker/conda-env/environment-pytorch-gpu.yml /templates/environment-pytorch-gpu.yml\nCOPY --chown=root:root --chmod=0644 docker/conda-env/environment-restapi.yml /templates/environment-restapi.yml\nCOPY --chown=root:root --chmod=0644 docker/conda-env/environment-tensorflow2-cpu.yml /templates/environment-tensorflow2-cpu.yml\nCOPY --chown=root:root --chmod=0644 docker/conda-env/environment-tensorflow2-gpu.yml /templates/environment-tensorflow2-gpu.yml\n\nARG PROJECT_COMPONENT=tensorflow2-gpu\nARG IBM_ART_VERSION\nARG MLFLOW_VERSION\nARG PREFECT_VERSION\nARG PYTHON_VERSION\nARG PYTORCH_CUDA_VERSION\nARG PYTORCH_MAJOR_MINOR_VERSION\nARG PYTORCH_TORCHAUDIO_VERSION\nARG PYTORCH_TORCHVISION_VERSION\nARG PYTORCH_VERSION\nARG SKLEARN_VERSION\nARG TENSORFLOW_VERSION\n\nRUN /usr/local/bin/render-conda-env.sh \\\n    --file \"/templates/environment-${PROJECT_COMPONENT}.yml\" \\\n    --output \"/conda-env/environment-${PROJECT_COMPONENT}.yml\" \\\n    --ibm-art-version \"${IBM_ART_VERSION}\" \\\n    --mlflow-version \"${MLFLOW_VERSION}\" \\\n    --prefect-version \"${PREFECT_VERSION}\" \\\n    --python-version \"${PYTHON_VERSION}\" \\\n    --pytorch-cuda-version \"${PYTORCH_CUDA_VERSION}\" \\\n    --pytorch-major-minor-version \"${PYTORCH_MAJOR_MINOR_VERSION}\" \\\n    --pytorch-torchaudio-version \"${PYTORCH_TORCHAUDIO_VERSION}\" \\\n    --pytorch-torchvision-version \"${PYTORCH_TORCHVISION_VERSION}\" \\\n    --pytorch-version \"${PYTORCH_VERSION}\" \\\n    --sklearn-version \"${SKLEARN_VERSION}\" \\\n    --tensorflow-version \"${TENSORFLOW_VERSION}\"\n\n# -- Build: copy files -------------------------------------------------------------------------------\n\nFROM ${BASE_IMAGE} AS copy-files\n\nCOPY --chown=root:root --chmod=0644 docker/configs/aws-config /files/aws-config\nCOPY --chown=root:root --chmod=0644 docker/configs/bash.bashrc /files/bash.bashrc\nCOPY --chown=root:root --chmod=0644 docker/configs/build.pip.conf /files/build.pip.conf\nCOPY --chown=root:root --chmod=0644 docker/configs/dot-condarc /files/dot-condarc\nCOPY --chown=root:root --chmod=0644 docker/conda-env/environment-pinned-tensorflow2-gpu.yml /files/environment-pinned-tensorflow2-gpu.yml\n\n# -- Build: download and install aws-cli -------------------------------------------------------------\n\nFROM base AS install-awscli\n\nARG AWSCLI_DOWNLOAD_URL=https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\nARG AWSCLI_INSTALL_DIR=/opt/aws-cli\nARG AWSCLI_BIN_DIR=/usr/local/bin\n\nRUN cd /tmp && \\\n    wget -qO /tmp/awscliv2.zip ${AWSCLI_DOWNLOAD_URL} && \\\n    unzip awscliv2.zip && \\\n    rm /tmp/awscliv2.zip && \\\n    ./aws/install --install-dir ${AWSCLI_INSTALL_DIR} --bin-dir ${AWSCLI_BIN_DIR} && \\\n    rm -rf /tmp/aws\n\n# -- Build: download and install miniconda -----------------------------------------------------------\n\nFROM base AS install-miniconda\n\nARG CONDA_DIR=/opt/conda\nARG MINICONDA_VERSION\nARG MINICONDA3_PREFIX\n\nRUN echo \"===> Installing Miniconda3 version ${MINICONDA_VERSION} to ${CONDA_DIR}....\" && \\\n    cd /tmp && \\\n    wget -qO \"/tmp/${MINICONDA3_PREFIX}${MINICONDA_VERSION}-Linux-x86_64.sh\" \"https://repo.anaconda.com/miniconda/${MINICONDA3_PREFIX}${MINICONDA_VERSION}-Linux-x86_64.sh\" && \\\n    bash ${MINICONDA3_PREFIX}${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p ${CONDA_DIR} && \\\n    rm ${MINICONDA3_PREFIX}${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    ${CONDA_DIR}/condabin/conda install -q -y conda && \\\n    ${CONDA_DIR}/condabin/conda install -q -y pip && \\\n    ${CONDA_DIR}/condabin/conda update -q -y --all && \\\n    chmod 0775 ${CONDA_DIR} && \\\n    find ${CONDA_DIR} -type d -exec chmod 0775 \"{}\" \"+\"\n\n# -- Build: create dioptra wheel ---------------------------------------------------------------------\n\nFROM python-base AS build-dioptra-wheel\n\nWORKDIR /code\n\nCOPY --chown=root:root --chmod=0644 LICENSE /code/LICENSE\nCOPY --chown=root:root --chmod=0644 MANIFEST.in /code/MANIFEST.in\nCOPY --chown=root:root --chmod=0644 pyproject.toml /code/pyproject.toml\nCOPY --chown=root:root --chmod=0644 README.md /code/README.md\nCOPY --chown=root:root --chmod=0644 setup.cfg /code/setup.cfg\nCOPY --chown=root:root --chmod=0644 setup.py /code/setup.py\nCOPY --chown=root:root --chmod=0644 tox.ini /code/tox.ini\nCOPY --chown=root:root --chmod=0644 docs/make.bat /code/docs/make.bat\nCOPY --chown=root:root --chmod=0644 docs/Makefile /code/docs/Makefile\nCOPY --chown=root:root docs/assets /code/docs/assets\nCOPY --chown=root:root docs/source /code/docs/source\nCOPY --chown=root:root src/dioptra /code/src/dioptra\nCOPY --chown=root:root tests /code/tests\n\nRUN find /code -type d -exec chmod 0755 \"{}\" \"+\" && \\\n    find /code/docs/assets -type f -exec chmod 0644 \"{}\" \"+\" && \\\n    find /code/docs/source -type f -exec chmod 0644 \"{}\" \"+\" && \\\n    find /code/src -type f -exec chmod 0644 \"{}\" \"+\" && \\\n    find /code/tests -type f -exec chmod 0644 \"{}\" \"+\" && \\\n    echo \"===> Building the dioptra wheel....\" && \\\n    python3.9 -m build -sw\n\n# -- Build: create conda virtual environment ---------------------------------------------------------\n\nFROM build-base AS build-miniconda-venv\n\nARG CONDA_DIR=/opt/conda\nARG PROJECT_COMPONENT=tensorflow2-gpu\n\nCOPY --from=install-miniconda --chown=root:root ${CONDA_DIR} ${CONDA_DIR}\nCOPY --from=build-environment-yml-files --chown=root:root --chmod=0644 /conda-env/environment-${PROJECT_COMPONENT}.yml /tmp/environment.yml\nCOPY --from=copy-files --chown=root:root --chmod=0644 /files/build.pip.conf /etc/pip.conf\nCOPY --from=copy-files --chown=root:root --chmod=0644 /files/dot-condarc /etc/conda/condarc\n\nRUN echo \"===> Building Miniconda virtual environment with latest version of dependencies....\" && \\\n    ${CONDA_DIR}/condabin/conda env create --file /tmp/environment.yml\n\nCOPY --from=build-dioptra-wheel --chown=root:root --chmod=0644 /code/dist /code/dist\n\nARG CODE_PKG_VERSION\nARG DIOPTRA_CONDA_ENV=dioptra\n\nRUN echo \"===> Installing Dioptra code module....\" && \\\n    ${CONDA_DIR}/condabin/conda run -n ${DIOPTRA_CONDA_ENV} \\\n    pip install --no-cache-dir --no-deps \\\n    /code/dist/dioptra-${CODE_PKG_VERSION}-py3-none-any.whl && \\\n    ${CONDA_DIR}/condabin/conda clean -afy\n\nRUN echo \"===> Cleaning/pruning directories....\" && \\\n    find ${CONDA_DIR} -follow -type f -name '*.a' -delete && \\\n    find ${CONDA_DIR} -follow -type f -name '*.js.map' -delete && \\\n    find ${CONDA_DIR} -name \"__pycache__\" -type d -exec rm -rf \"{}\" \"+\" && \\\n    find ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages/scipy -name \"tests\" -type d -exec rm -rf \"{}\" \"+\" && \\\n    find ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages/numpy -name \"tests\" -type d -exec rm -rf \"{}\" \"+\" && \\\n    find ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages/pandas -name \"tests\" -type d -exec rm -rf \"{}\" \"+\" && \\\n    find ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages -name \"*.pyx\" -delete && \\\n    rm -rf ${CONDA_DIR}/conda-meta && \\\n    rm -rf ${CONDA_DIR}/include && \\\n    rm -rf ${CONDA_DIR}/lib/python3.[0-9]/site-packages/pip && \\\n    rm -rf ${CONDA_DIR}/lib/python3.[0-9]/ensurepip && \\\n    rm -rf ${CONDA_DIR}/lib/python3.[0-9]/idlelib && \\\n    rm -rf ${CONDA_DIR}/lib/libpython3.[0-9].so.[0-9].[0-9] && \\\n    rm -rf ${CONDA_DIR}/lib/lib[atlu][b]san.so.[0-9].[0-9].[0-9] && \\\n    rm -rf ${CONDA_DIR}/bin/x86_64-conda-linux-gnu-ld && \\\n    rm -rf ${CONDA_DIR}/bin/sqlite3 && \\\n    rm -rf ${CONDA_DIR}/bin/openssl && \\\n    rm -rf ${CONDA_DIR}/share/terminfo && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/include && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages/pip && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/ensurepip && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/idlelib && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/lib[atlu][b]san.so.[0-9].[0-9].[0-9] && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/bin/x86_64-conda-linux-gnu-ld && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/bin/sqlite3 && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/bin/openssl && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/share/terminfo\n\n# -- Build: create conda virtual environment (pinned deps) -------------------------------------------\n\nFROM build-base AS build-miniconda-venv-pinned\n\nARG CONDA_DIR=/opt/conda\nARG PROJECT_COMPONENT=tensorflow2-gpu\n\nCOPY --from=install-miniconda --chown=root:root ${CONDA_DIR} ${CONDA_DIR}\nCOPY --from=copy-files --chown=root:root --chmod=0644 /files/dot-condarc /etc/conda/condarc\nCOPY --from=copy-files --chown=root:root --chmod=0644 /files/build.pip.conf /etc/pip.conf\nCOPY --from=copy-files --chown=root:root --chmod=0644 /files/environment-pinned-${PROJECT_COMPONENT}.yml /tmp/environment.yml\n\nRUN echo \"===> Building Miniconda virtual environment with pinned versions of dependencies....\" && \\\n    ${CONDA_DIR}/condabin/conda env create --file /tmp/environment.yml\n\nCOPY --from=build-dioptra-wheel --chown=root:root --chmod=0644 /code/dist /code/dist\n\nARG CODE_PKG_VERSION\nARG DIOPTRA_CONDA_ENV=dioptra\n\nRUN echo \"===> Installing Dioptra code module....\" && \\\n    ${CONDA_DIR}/condabin/conda run -n ${DIOPTRA_CONDA_ENV} \\\n    pip install --no-cache-dir --no-deps \\\n    /code/dist/dioptra-${CODE_PKG_VERSION}-py3-none-any.whl && \\\n    ${CONDA_DIR}/condabin/conda clean -afy\n\nARG DIOPTRA_CONDA_ENV=dioptra\n\nRUN echo \"===> Cleaning/pruning directories....\" && \\\n    find ${CONDA_DIR} -follow -type f -name '*.a' -delete && \\\n    find ${CONDA_DIR} -follow -type f -name '*.js.map' -delete && \\\n    find ${CONDA_DIR} -name \"__pycache__\" -type d -exec rm -rf \"{}\" \"+\" && \\\n    find ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages/scipy -name \"tests\" -type d -exec rm -rf \"{}\" \"+\" && \\\n    find ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages/numpy -name \"tests\" -type d -exec rm -rf \"{}\" \"+\" && \\\n    find ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages/pandas -name \"tests\" -type d -exec rm -rf \"{}\" \"+\" && \\\n    find ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages -name \"*.pyx\" -delete && \\\n    rm -rf ${CONDA_DIR}/conda-meta && \\\n    rm -rf ${CONDA_DIR}/include && \\\n    rm -rf ${CONDA_DIR}/lib/python3.[0-9]/site-packages/pip && \\\n    rm -rf ${CONDA_DIR}/lib/python3.[0-9]/ensurepip && \\\n    rm -rf ${CONDA_DIR}/lib/python3.[0-9]/idlelib && \\\n    rm -rf ${CONDA_DIR}/lib/libpython3.[0-9].so.[0-9].[0-9] && \\\n    rm -rf ${CONDA_DIR}/lib/lib[atlu][b]san.so.[0-9].[0-9].[0-9] && \\\n    rm -rf ${CONDA_DIR}/bin/x86_64-conda-linux-gnu-ld && \\\n    rm -rf ${CONDA_DIR}/bin/sqlite3 && \\\n    rm -rf ${CONDA_DIR}/bin/openssl && \\\n    rm -rf ${CONDA_DIR}/share/terminfo && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/include && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/site-packages/pip && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/ensurepip && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/python3.[0-9]/idlelib && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/lib/lib[atlu][b]san.so.[0-9].[0-9].[0-9] && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/bin/x86_64-conda-linux-gnu-ld && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/bin/sqlite3 && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/bin/openssl && \\\n    rm -rf ${CONDA_DIR}/envs/${DIOPTRA_CONDA_ENV}/share/terminfo\n\n######################################################################################################\n# Target images\n######################################################################################################\n\n# -- Target image: add non-root user and dirs, add scripts, add configs, install aws-cli -------------\n\nFROM base AS image-non-root-user-configs-scripts\n\nARG AWSCLI_INSTALL_DIR=/opt/aws-cli\nARG AWSCLI_BIN_DIR=/usr/local/bin\n\nCOPY --from=install-awscli --chown=root:root ${AWSCLI_INSTALL_DIR} ${AWSCLI_INSTALL_DIR}\nCOPY --from=install-awscli --chown=root:root ${AWSCLI_BIN_DIR} ${AWSCLI_BIN_DIR}\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/fix-permissions.sh /usr/local/bin/fix-permissions.sh\n\nARG CONDA_DIR=/opt/conda\nARG DIOPTRA_USER=dioptra\nARG DIOPTRA_UID=39000\nARG DIOPTRA_GID=100\nARG DIOPTRA_WORKDIR=/work\n\nRUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc && \\\n    useradd -u ${DIOPTRA_UID} -N -m -s /bin/bash -c \"Dioptra user\" ${DIOPTRA_USER} && \\\n    mkdir -p /home/${DIOPTRA_USER}/.aws/cli && \\\n    mkdir -p /home/${DIOPTRA_USER}/.aws/config && \\\n    mkdir -p /home/${DIOPTRA_USER}/.conda && \\\n    mkdir -p ${DIOPTRA_WORKDIR}/plugins && \\\n    chown -R ${DIOPTRA_UID}:${DIOPTRA_GID} /home/${DIOPTRA_USER} && \\\n    chown -R ${DIOPTRA_UID}:${DIOPTRA_GID} ${DIOPTRA_WORKDIR} && \\\n    chmod g+w /etc/passwd && \\\n    ln -s ${CONDA_DIR}/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    fix-permissions.sh /home/${DIOPTRA_USER} ${DIOPTRA_WORKDIR}\n\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/conda-env.sh /usr/local/bin/conda-env.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/entrypoint-worker.sh /usr/local/bin/entrypoint.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/init-copy.sh /usr/local/bin/init-copy.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/init-git-clone.sh /usr/local/bin/init-git-clone.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/init-set-permissions.sh /usr/local/bin/init-set-permissions.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/parse-uri.sh /usr/local/bin/parse-uri.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/run-mlflow-job.sh /usr/local/bin/run-mlflow-job.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/s3-cp.sh /usr/local/bin/s3-cp.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/s3-mb.sh /usr/local/bin/s3-mb.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/s3-sync.sh /usr/local/bin/s3-sync.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/secure-container.sh /usr/local/bin/secure-container.sh\nCOPY --from=build-bash-scripts --chown=root:root --chmod=0755 /shellscripts/unpack-archive.sh /usr/local/bin/unpack-archive.sh\nCOPY --from=copy-files --chown=root:root --chmod=0644 /files/bash.bashrc /etc/bash.bashrc\nCOPY --from=copy-files --chown=root:root --chmod=0644 /files/dot-condarc /etc/conda/condarc\nCOPY --from=copy-files --chown=${DIOPTRA_UID}:${DIOPTRA_GID} --chmod=0644 /files/aws-config /home/${DIOPTRA_USER}/.aws/config/aws-config\n\nENV CONDA_DIR ${CONDA_DIR}\nENV DIOPTRA_USER ${DIOPTRA_USER}\nENV DIOPTRA_UID ${DIOPTRA_UID}\nENV DIOPTRA_GID ${DIOPTRA_GID}\nENV DIOPTRA_RESTAPI_ENV prod\nENV DIOPTRA_WORKDIR ${DIOPTRA_WORKDIR}\nENV DIOPTRA_PLUGIN_DIR ${DIOPTRA_WORKDIR}/plugins\n\nUSER ${DIOPTRA_UID}\nWORKDIR ${DIOPTRA_WORKDIR}\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\n# -- Target image: install miniconda with conda virtual environment (pinned deps) --------------------\n\nFROM image-non-root-user-configs-scripts AS image-pinned-deps\n\nARG CONDA_DIR=/opt/conda\nARG DIOPTRA_UID=39000\nARG DIOPTRA_GID=100\n\nCOPY --from=build-miniconda-venv-pinned --chown=${DIOPTRA_UID}:${DIOPTRA_GID} ${CONDA_DIR} ${CONDA_DIR}\n\n# -- Target image: install miniconda with conda virtual environment (pinned deps) --------------------\n\nFROM image-non-root-user-configs-scripts AS image-latest-deps\n\nARG CONDA_DIR=/opt/conda\nARG DIOPTRA_UID=39000\nARG DIOPTRA_GID=100\n\nCOPY --from=build-miniconda-venv --chown=${DIOPTRA_UID}:${DIOPTRA_GID} ${CONDA_DIR} ${CONDA_DIR}\n"
}