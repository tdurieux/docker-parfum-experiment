diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/huggingface/optimum/examples/onnxruntime/training/docker/conda/Dockerfile-conda b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/huggingface/optimum/examples/onnxruntime/training/docker/conda/Dockerfile-conda/repaired.Dockerfile
index cd08e8f..89ab15c 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/huggingface/optimum/examples/onnxruntime/training/docker/conda/Dockerfile-conda
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/huggingface/optimum/examples/onnxruntime/training/docker/conda/Dockerfile-conda/repaired.Dockerfile
@@ -3,7 +3,7 @@ FROM nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04
 CMD nvidia-smi
 WORKDIR /home/ubuntu/workdir
 
-RUN apt-get update && apt-get install -y --no-install-recommends apt-utils
+RUN apt-get update && apt-get install -y --no-install-recommends apt-utils && rm -rf /var/lib/apt/lists/*;
 
 # Bash shell
 RUN chsh -s /bin/bash
@@ -11,14 +11,14 @@ SHELL ["/bin/bash", "-c"]
 
 # Install and update tools to minimize security vulnerabilities
 RUN apt-get update
-RUN apt-get install -y software-properties-common wget apt-utils patchelf git libprotobuf-dev protobuf-compiler cmake
+RUN apt-get install --no-install-recommends -y software-properties-common wget apt-utils patchelf git libprotobuf-dev protobuf-compiler cmake && rm -rf /var/lib/apt/lists/*;
 RUN unattended-upgrade
 RUN apt-get autoremove -y
 
-# Install anaconda 
+# Install anaconda
 RUN apt-get update
-RUN apt-get install -y wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion && \
-        apt-get clean
+RUN apt-get install --no-install-recommends -y wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion && \
+        apt-get clean && rm -rf /var/lib/apt/lists/*;
 RUN wget --quiet https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh -O ~/anaconda.sh && \
         /bin/bash ~/anaconda.sh -b -p /opt/conda && \
         rm ~/anaconda.sh && \
@@ -32,10 +32,10 @@ ENV PATH /opt/conda/bin:$PATH
 
 # Create the environment:
 # Python and pip
-RUN apt-get install -y python3-pip
-RUN pip install --upgrade pip
-RUN apt-get install -y libopenmpi-dev
-RUN apt-get install -y  python-mpi4py
+RUN apt-get install --no-install-recommends -y python3-pip && rm -rf /var/lib/apt/lists/*;
+RUN pip install --no-cache-dir --upgrade pip
+RUN apt-get install --no-install-recommends -y libopenmpi-dev && rm -rf /var/lib/apt/lists/*;
+RUN apt-get install --no-install-recommends -y python-mpi4py && rm -rf /var/lib/apt/lists/*;
 # Clean up dependencies to only install necessary packages
 COPY ort_train_env.yml .
 RUN conda update conda \
@@ -47,13 +47,13 @@ ENV CONDA_DEFAULT_ENV $venv_ort
 
 # Install ort related dependencies
 # PyTorch
-RUN pip install onnx==1.9.0 ninja
-RUN pip install torch==1.9.0+cu102 torchvision==0.10.0+cu102 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html
+RUN pip install --no-cache-dir onnx==1.9.0 ninja
+RUN pip install --no-cache-dir torch==1.9.0+cu102 torchvision==0.10.0+cu102 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html
 
 # ORT Module
-RUN pip install onnxruntime-training==1.9.0
+RUN pip install --no-cache-dir onnxruntime-training==1.9.0
 
-RUN pip install torch-ort
+RUN pip install --no-cache-dir torch-ort
 RUN python -m torch_ort.configure
 
 # Clone the optimum repo