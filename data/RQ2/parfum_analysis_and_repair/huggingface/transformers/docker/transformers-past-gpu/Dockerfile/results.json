{
  "startTime": 1674248797528,
  "endTime": 1674248798169,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 97
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_DOCKER_IMAGE=\"nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04\"\nFROM $BASE_DOCKER_IMAGE\nLABEL maintainer=\"Hugging Face\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Use login shell to read variables from `~/.profile` (to pass dynamic created variables between RUN commands)\nSHELL [\"sh\", \"-lc\"]\n\nRUN apt update && apt install --no-install-recommends -y git libsndfile1-dev tesseract-ocr espeak-ng python3 python3-pip ffmpeg git-lfs && rm -rf /var/lib/apt/lists/*;\nRUN git lfs install\nRUN python3 -m pip install --no-cache-dir --upgrade pip\n\nARG REF=main\nRUN git clone https://github.com/huggingface/transformers && cd transformers && git checkout $REF\nRUN python3 -m pip install --no-cache-dir -e ./transformers[dev,onnxruntime]\n\n# When installing in editable mode, `transformers` is not recognized as a package.\n# this line must be added in order for python to be aware of transformers.\nRUN cd transformers && python3 setup.py develop\n\nARG FRAMEWORK\nARG VERSION\n\n# Remove all frameworks\n# (`accelerate` requires `torch`, and this causes import issues for TF-only testing)\nRUN python3 -m pip uninstall -y torch torchvision torchaudio accelerate tensorflow jax flax\n\n# Get the libraries and their versions to install, and write installation command to `~/.profile`.\nRUN python3 ./transformers/utils/past_ci_versions.py --framework $FRAMEWORK --version $VERSION\n\n# Install the target framework\nRUN echo \"INSTALL_CMD = $INSTALL_CMD\"\nRUN $INSTALL_CMD\n\n# Having installation problems for torch-scatter with torch <= 1.6. Disable so we have the same set of tests.\n# (This part will be removed once the logic of using `past_ci_versions.py` is used in other Dockerfile files.)\n# # Use installed torch version for `torch-scatter`.\n# # (The env. variable $CUDA is defined in `past_ci_versions.py`)\n# RUN [ \"$FRAMEWORK\" = \"pytorch\" ] && python3 -m pip install --no-cache-dir torch-scatter -f https://data.pyg.org/whl/torch-$(python3 -c \"from torch import version; print(version.__version__.split('+')[0])\")+$CUDA.html || echo \"torch-scatter not to be installed\"\n\nRUN python3 -m pip install -U \"itsdangerous<2.1.0\"\n"
}