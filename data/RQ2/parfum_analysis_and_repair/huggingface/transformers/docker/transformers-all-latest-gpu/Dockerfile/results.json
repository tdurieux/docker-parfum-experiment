{
  "startTime": 1674217707110,
  "endTime": 1674217708327,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 97
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04\nLABEL maintainer=\"Hugging Face\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Use login shell to read variables from `~/.profile` (to pass dynamic created variables between RUN commands)\nSHELL [\"sh\", \"-lc\"]\n\n# The following `ARG` are mainly used to specify the versions explicitly & directly in this docker file, and not meant\n# to be used as arguments for docker build (so far).\n\nARG PYTORCH='1.12.0'\n# (not always a valid torch version)\nARG INTEL_TORCH_EXT='1.11.0'\n# Example: `cu102`, `cu113`, etc.\nARG CUDA='cu113'\n\nRUN apt update && apt install --no-install-recommends -y git libsndfile1-dev tesseract-ocr espeak-ng python3 python3-pip ffmpeg git-lfs && rm -rf /var/lib/apt/lists/*;\nRUN git lfs install\nRUN python3 -m pip install --no-cache-dir --upgrade pip\n\nARG REF=main\nRUN git clone https://github.com/huggingface/transformers && cd transformers && git checkout $REF\nRUN python3 -m pip install --no-cache-dir -e ./transformers[dev,onnxruntime]\n\n# TODO: Handle these in a python utility script\nRUN [ ${#PYTORCH} -gt 0 -a \"$PYTORCH\" != \"pre\" ] && VERSION='torch=='$PYTORCH'.*' ||  VERSION='torch'; echo \"export VERSION='$VERSION'\" >> ~/.profile\nRUN echo torch=$VERSION\n# `torchvision` and `torchaudio` should be installed along with `torch`, especially for nightly build.\n# Currently, let's just use their latest releases (when `torch` is installed with a release version)\n# TODO: We might need to specify proper versions that work with a specific torch version (especially for past CI).\nRUN [ \"$PYTORCH\" != \"pre\" ] && python3 -m pip install --no-cache-dir -U $VERSION torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/$CUDA || python3 -m pip install --no-cache-dir -U --pre torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/$CUDA\n\nRUN python3 -m pip install --no-cache-dir -U tensorflow\nRUN python3 -m pip uninstall -y flax jax\n\n# Use installed torch version for `torch-scatter` to avid to deal with PYTORCH='pre'.\n# If torch is nightly version, the link is likely to be invalid, but the installation falls back to the latest torch-scatter\nRUN python3 -m pip install --no-cache-dir torch-scatter -f https://data.pyg.org/whl/torch-$(python3 -c \"from torch import version; print(version.__version__.split('+')[0])\")+$CUDA.html\nRUN python3 -m pip install --no-cache-dir intel_extension_for_pytorch==$INTEL_TORCH_EXT+cpu -f https://software.intel.com/ipex-whl-stable\n\nRUN python3 -m pip install --no-cache-dir git+https://github.com/facebookresearch/detectron2.git pytesseract https://github.com/kpu/kenlm/archive/master.zip\nRUN python3 -m pip install -U \"itsdangerous<2.1.0\"\n\nRUN python3 -m pip install --no-cache-dir git+https://github.com/huggingface/accelerate@main#egg=accelerate\n\n# When installing in editable mode, `transformers` is not recognized as a package.\n# this line must be added in order for python to be aware of transformers.\nRUN cd transformers && python3 setup.py develop\n"
}