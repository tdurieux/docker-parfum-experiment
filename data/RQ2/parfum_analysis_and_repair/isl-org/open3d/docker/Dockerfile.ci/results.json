{
  "startTime": 1674215094915,
  "endTime": 1674215096399,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 46,
        "columnEnd": 80
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 212,
        "lineEnd": 212,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 74,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM must be called before other ARGS except for ARG BASE_IMAGE\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\n\n# For bash-specific commands\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Required build args, should be specified in docker_build.sh\nARG DEVELOPER_BUILD\nARG CCACHE_TAR_NAME\nARG CMAKE_VERSION\nARG CCACHE_VERSION\nARG PYTHON_VERSION\nARG BUILD_SHARED_LIBS\nARG BUILD_CUDA_MODULE\nARG BUILD_TENSORFLOW_OPS\nARG BUILD_PYTORCH_OPS\nARG PACKAGE\nARG BUILD_SYCL_MODULE\n\nRUN if [ -z \"${DEVELOPER_BUILD}\"      ]; then echo \"Error: ARG DEVELOPER_BUILD      not specified.\"; exit 1; fi \\\n && if [ -z \"${CCACHE_TAR_NAME}\"      ]; then echo \"Error: ARG CCACHE_TAR_NAME      not specified.\"; exit 1; fi \\\n && if [ -z \"${CMAKE_VERSION}\"        ]; then echo \"Error: ARG CMAKE_VERSION        not specified.\"; exit 1; fi \\\n && if [ -z \"${CCACHE_VERSION}\"       ]; then echo \"Error: ARG CCACHE_VERSION       not specified.\"; exit 1; fi \\\n && if [ -z \"${PYTHON_VERSION}\"       ]; then echo \"Error: ARG PYTHON_VERSION       not specified.\"; exit 1; fi \\\n && if [ -z \"${BUILD_SHARED_LIBS}\"               ]; then echo \"Error: ARG BUILD_SHARED_LIBS               not specified.\"; exit 1; fi \\\n && if [ -z \"${BUILD_CUDA_MODULE}\"    ]; then echo \"Error: ARG BUILD_CUDA_MODULE    not specified.\"; exit 1; fi \\\n && if [ -z \"${BUILD_TENSORFLOW_OPS}\" ]; then echo \"Error: ARG BUILD_TENSORFLOW_OPS not specified.\"; exit 1; fi \\\n && if [ -z \"${BUILD_PYTORCH_OPS}\"    ]; then echo \"Error: ARG BUILD_PYTORCH_OPS    not specified.\"; exit 1; fi \\\n && if [ -z \"${PACKAGE}\"              ]; then echo \"Error: ARG PACKAGE              not specified.\"; exit 1; fi \\\n && if [ -z \"${BUILD_SYCL_MODULE}\"    ]; then echo \"Error: ARG BUILD_SYCL_MODULE    not specified.\"; exit 1; fi\n\n# Fix Nvidia repo key rotation issue\n# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771\n# https://forums.developer.nvidia.com/t/18-04-cuda-docker-image-is-broken/212892/10\n# https://code.visualstudio.com/remote/advancedcontainers/reduce-docker-warnings#:~:text=Warning%3A%20apt%2Dkey%20output%20should,not%20running%20from%20a%20terminal.\nRUN if [ \"${BUILD_CUDA_MODULE}\" = \"ON\" ]; then \\\n        export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn; \\\n        apt-key del 7fa2af80; \\\n        apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/3bf863cc.pub; \\\n        apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub; \\\n    fi\n\n# Forward all ARG to ENV\n# ci_utils.sh may require these environment variables\nENV DEVELOPER_BUILD=${DEVELOPER_BUILD}\nENV CCACHE_TAR_NAME=${CCACHE_TAR_NAME}\nENV CMAKE_VERSION=${CMAKE_VERSION}\nENV CCACHE_VERSION=${CCACHE_VERSION}\nENV PYTHON_VERSION=${PYTHON_VERSION}\nENV BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}\nENV BUILD_CUDA_MODULE=${BUILD_CUDA_MODULE}\nENV BUILD_TENSORFLOW_OPS=${BUILD_TENSORFLOW_OPS}\nENV BUILD_PYTORCH_OPS=${BUILD_PYTORCH_OPS}\nENV PACKAGE=${PACKAGE}\nENV BUILD_SYCL_MODULE=${BUILD_SYCL_MODULE}\n\n# Prevent interactive inputs when installing packages\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=America/Los_Angeles\nENV SUDO=command\n\n# The base image already contains the oneAPI packages.\n# Having this in the list can cause checksum errors when apt-get update.\nRUN if [ \"${BUILD_SYCL_MODULE}\" = \"ON\" ]; then \\\n        rm -rf /etc/apt/sources.list.d/oneAPI.list; \\\n    fi\n\n# Dependencies: basic\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    git \\\n    wget \\\n    curl \\\n    build-essential \\\n    pkg-config \\\n && rm -rf /var/lib/apt/lists/*\n\n# Miniconda or Intel conda\n# The **/open3d/bin paths are used during docker run, in this way docker run\n# does not need to activate the environment again.\nENV PATH=\"/root/miniconda3/bin:${PATH}\"\nENV PATH=\"/root/miniconda3/envs/open3d/bin:${PATH}\"\nENV PATH=\"/opt/intel/oneapi/intelpython/latest/bin:${PATH}\"\nENV PATH=\"/opt/intel/oneapi/intelpython/latest/envs/open3d/bin:${PATH}\"\nRUN if [ \"${BUILD_SYCL_MODULE}\" = \"OFF\" ]; then \\\n        wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh; \\\n        bash Miniconda3-latest-Linux-x86_64.sh -b; \\\n        rm Miniconda3-latest-Linux-x86_64.sh; \\\n    fi\nRUN conda --version \\\n && conda create -y -n open3d python=${PYTHON_VERSION}\n\n# Activate open3d virtualenv\n# This works during docker build. It becomes the prefix of all RUN commands.\n# Ref: https://stackoverflow.com/a/60148365/1255535\nSHELL [\"conda\", \"run\", \"-n\", \"open3d\", \"/bin/bash\", \"-c\"]\n\n# Dependencies: cmake\nENV PATH=${HOME}/${CMAKE_VERSION}/bin:${PATH}\nRUN CMAKE_VERSION_NUMBERS=$(echo \"${CMAKE_VERSION}\" | cut -d\"-\" -f2) \\\n && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION_NUMBERS}/${CMAKE_VERSION}.tar.gz \\\n && tar -xf ${CMAKE_VERSION}.tar.gz \\\n && cp -ar ${CMAKE_VERSION} ${HOME} \\\n && cmake --version && rm ${CMAKE_VERSION}.tar.gz\n\n# Dependencies: ccache\nWORKDIR /root\nRUN git clone https://github.com/ccache/ccache.git \\\n && cd ccache \\\n && git checkout v${CCACHE_VERSION} -b ${CCACHE_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DZSTD_FROM_INTERNET=ON .. \\\n && make install -j$(nproc) \\\n && which ccache \\\n && ccache --version \\\n && ccache -s\n\n# Download ccache from GCS bucket\n# If it doesn't exist on the cloud, an empty ${CCACHE_DIR} will be created.\n# Example directory structure:\n# - CCACHE_DIR        = ~/.cache/ccache\n# - CCACHE_DIR_NAME   = ccache\n# - CCACHE_DIR_PARENT = ~/.cache\n# We need to set ccache size explicitly with -M, otherwise the defualt size is\n# *not* determined by ccache's default, but the downloaded ccache file's config.\nRUN CCACHE_DIR=$(ccache -p | grep cache_dir | grep -oE \"[^ ]+$\") \\\n && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \\\n && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \\\n && mkdir -p ${CCACHE_DIR_PARENT} \\\n && cd ${CCACHE_DIR_PARENT} \\\n && (wget -q https://storage.googleapis.com/open3d-ci-cache/${CCACHE_TAR_NAME}.tar.gz || true) \\\n && if [ -f ${CCACHE_TAR_NAME}.tar.gz ]; then \\\n tar -xf ${CCACHE_TAR_NAME}.tar.gz; rm ${CCACHE_TAR_NAME}.tar.gz fi \\\n && mkdir -p ${CCACHE_DIR} \\\n && ccache -M 5G \\\n && ccache -s\n\n# Checkout Open3D-ML master branch\n# TODO: We may add support for local Open3D-ML repo or pinned ML repo tag\nENV OPEN3D_ML_ROOT=/root/Open3D-ML\nRUN git clone --depth 1 https://github.com/isl-org/Open3D-ML.git ${OPEN3D_ML_ROOT}\n\n# Open3D repo\n# Always keep /root/Open3D as the WORKDIR\nCOPY . /root/Open3D\nWORKDIR /root/Open3D\n\n# Open3D C++ dependencies\nRUN ./util/install_deps_ubuntu.sh assume-yes \\\n && rm -rf /var/lib/apt/lists/*\n\n# Open3D Python dependencies\nRUN source util/ci_utils.sh \\\n && if [ \"${BUILD_CUDA_MODULE}\" = \"ON\" ]; then \\\n        install_python_dependencies with-cuda with-jupyter; \\\n    else \\\n        install_python_dependencies with-jupyter; \\\n    fi \\\n && pip install --no-cache-dir -r python/requirements_test.txt\n\n# Open3D Jupyter dependencies\nRUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - \\\n && apt-get install --no-install-recommends -y nodejs \\\n && rm -rf /var/lib/apt/lists/* \\\n && node --version \\\n && npm install -g yarn \\\n && yarn --version && npm cache clean --force; && yarn cache clean;\n\n# Build all\nRUN if [ \"${BUILD_PYTORCH_OPS}\" = \"ON\" ] || [ \"${BUILD_TENSORFLOW_OPS}\" = \"ON\" ]; then \\\n        export GLIBCXX_USE_CXX11_ABI=OFF; \\\n    else \\\n        export GLIBCXX_USE_CXX11_ABI=ON; \\\n    fi \\\n && if [ \"${BUILD_SYCL_MODULE}\" = \"ON\" ]; then \\\n        export CMAKE_CXX_COMPILER=icpx; \\\n        export CMAKE_C_COMPILER=icx; \\\n    else \\\n        export CMAKE_CXX_COMPILER=g++; \\\n        export CMAKE_C_COMPILER=gcc; \\\n    fi \\\n && mkdir build \\\n && cd build \\\n && cmake -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} \\\n          -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} \\\n          -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} \\\n          -DBUILD_SYCL_MODULE=${BUILD_SYCL_MODULE} \\\n          -DDEVELOPER_BUILD=${DEVELOPER_BUILD} \\\n          -DBUILD_LIBREALSENSE=ON \\\n          -DBUILD_CUDA_MODULE=${BUILD_CUDA_MODULE} \\\n          -DBUILD_COMMON_CUDA_ARCHS=ON \\\n          -DBUILD_COMMON_ISPC_ISAS=ON \\\n          -DGLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI} \\\n          -DBUILD_TENSORFLOW_OPS=${BUILD_TENSORFLOW_OPS} \\\n          -DBUILD_PYTORCH_OPS=${BUILD_PYTORCH_OPS} \\\n          -DBUILD_UNIT_TESTS=ON \\\n          -DBUILD_BENCHMARKS=ON \\\n          -DBUILD_EXAMPLES=ON \\\n          -DCMAKE_INSTALL_PREFIX=~/open3d_install \\\n          .. \\\n && make VERBOSE=1 -j$(nproc) \\\n && make install-pip-package -j$(nproc) \\\n && make install -j$(nproc) \\\n && if [ \"${PACKAGE}\" = \"ON\" ]; then make package; fi\n\n# Compress ccache folder, move to / directory\nRUN ccache -s \\\n && CCACHE_DIR=$(ccache -p | grep cache_dir | grep -oE \"[^ ]+$\") \\\n && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \\\n && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \\\n && cd ${CCACHE_DIR_PARENT} \\\n && tar -czf /${CCACHE_TAR_NAME}.tar.gz ${CCACHE_DIR_NAME} \\\n && if [ \"${PACKAGE}\" = \"ON\" ]; then mv /root/Open3D/build/package/open3d-devel*.tar.xz /; fi \\\n && ls -alh / && rm /${CCACHE_TAR_NAME}.tar.gz\n\nRUN echo \"Docker build done.\"\n"
}