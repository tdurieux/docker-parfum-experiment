{
  "startTime": 1674249317074,
  "endTime": 1674249317965,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 7,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ghcr.io/lawrencegripper/azbrowse/snapbase:latest as builder\n\n# Multi-stage build, only need the snaps from the builder. Copy them one at a\n# time so they can be cached.\nFROM golang:1.18-bullseye\nLABEL org.opencontainers.image.source https://github.com/lawrencegripper/azbrowse\n\nCOPY --from=builder /snap/core /snap/core\nCOPY --from=builder /snap/core18 /snap/core18\nCOPY --from=builder /snap/core20 /snap/core20\nCOPY --from=builder /snap/snapcraft /snap/snapcraft\nCOPY --from=builder /snap/bin/snapcraft /snap/bin/snapcraft\n\n# Avoid warnings by switching to noninteractive\nENV DEBIAN_FRONTEND=noninteractive\n\n# This Dockerfile adds a non-root 'vscode' user with sudo access. However, for Linux,\n# this user's GID/UID must match your local user UID/GID to avoid permission issues\n# with bind mounts. Update USER_UID / USER_GID if yours is not 1000. See\n# https://aka.ms/vscode-remote/containers/non-root-user for details.\nARG USERNAME=vscode\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Envs\nENV GO111MODULE=on\nENV DEVCONTAINER=\"TRUE\"\n## Snap envs: Set the proper environment.\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV PATH=\"/snap/bin:$PATH\"\nENV SNAP=\"/snap/snapcraft/current\"\nENV SNAP_NAME=\"snapcraft\"\nENV SNAP_ARCH=\"amd64\"\n# Versions\nENV DOCKER_VERSION=20.10.17\nARG GO_PLS_VERSION=0.8.4\nARG DLV_VERSION=1.8.3\nARG GO_RELEASER_VERSION=1.9.2\nARG GOLANGCI_LINT_VERSION=1.46.2\n\nRUN \\\n    apt-get update \\\n    && apt-get -y install --no-install-recommends apt-utils dialog fuse nano locales ruby-full gnupg2 snapd sudo locales && locale-gen en_US.UTF-8 \\\n    #\n    # Verify git, process tools, lsb-release (common in install instructions for CLIs) installed \\\n    && apt-get -y --no-install-recommends install git iproute2 procps lsb-release unzip \\\n    #\n    # Install Release Tools\n    #\n    # --> RPM used by goreleaser\n    && apt install --no-install-recommends -y rpm \\\n    # Install python3\n    && apt-get -y --no-install-recommends install python3 python3-pip \\\n    && apt-get -y --no-install-recommends install bash-completion \\\n    # Clean up\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Setup locale as required by snapd: https://stackoverflow.com/questions/28405902/how-to-set-the-locale-inside-a-debian-ubuntu-docker-container\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n    dpkg-reconfigure --frontend=noninteractive locales && \\\n    update-locale LANG=en_US.UTF-8\n\nENV GIT_PROMPT_START='\\033[1;36mazb-devcon>\\033[0m\\033[0;33m\\w\\a\\033[0m'\n\n# Save command line history\nRUN echo \"export HISTFILE=/root/commandhistory/.bash_history\" >> \"/root/.bashrc\" \\\n    && echo \"export PROMPT_COMMAND='history -a'\" >> \"/root/.bashrc\" \\\n    && mkdir -p /root/commandhistory \\\n    && touch /root/commandhistory/.bash_history\n\nRUN echo \"source /usr/share/bash-completion/bash_completion\" >> \"/root/.bashrc\"\n\n# Git command prompt\nRUN git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1 \\\n    && echo \"if [ -f \\\"$HOME/.bash-git-prompt/gitprompt.sh\\\" ]; then GIT_PROMPT_ONLY_IN_REPO=1 && source $HOME/.bash-git-prompt/gitprompt.sh; fi\" >> \"/root/.bashrc\"\n\n# Install docker used by go releaser\nENV DOCKER_BUILDKIT=1\nRUN curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz \\\n  && tar xzvf docker-${DOCKER_VERSION}.tgz --strip 1 \\\n                 -C /usr/local/bin docker/docker \\\n  && rm docker-${DOCKER_VERSION}.tgz\n\n# Install autocompletion for azbrowse\nRUN echo 'source <(azbrowse completion bash)' >> \"/root/.bashrc\"\n\n# Install python deps for deving\nRUN pip3 install --no-cache-dir rope black\n\n# Install ruby bunder gem to support inline gems in ruby scripts\nRUN gem install bundler\n\n# azure-cli-no-mount\nCOPY scripts/azure-cli.sh /tmp/\nRUN /tmp/azure-cli.sh\n\n# Install Go tools (with cache https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md#example-cache-go-packages)\nRUN \\\n    # --> Delve for debugging\n    go install github.com/go-delve/delve/cmd/dlv@v${DLV_VERSION}\\\n    # --> Go language server\n    && go install golang.org/x/tools/gopls@v${GO_PLS_VERSION} \\\n    # --> Go symbols and outline for go to symbol support and test support \n    && go install github.com/acroca/go-symbols@v0.1.1 && go install github.com/ramya-rao-a/go-outline@7182a932836a71948db4a81991a494751eccfe77 \\\n    # --> GolangCI-lint\n    && curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v${GOLANGCI_LINT_VERSION} \\\n    # --> Go releaser \n    && go install github.com/goreleaser/goreleaser@v${GO_RELEASER_VERSION} \\\n    && rm -rf /go/src/ && rm -rf /go/pkg/mod/**\n"
}