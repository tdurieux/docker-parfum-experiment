{
  "startTime": 1674218320125,
  "endTime": 1674218321128,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 60,
        "lineEnd": 61,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 60,
        "lineEnd": 61,
        "columnStart": 7,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# This Dockerfile defines the container in which we perform the build\n# To build it, you must specify at least the following --build-arg values\n# with some suggested default shown here\n#\n# --build-arg GRADLE_VERSION=7.1        - The version of Gradle you want to build with\n# --build-arg AFCT_VERSION=3.0.3568     - The version of the Azure Functions Core Tools\n# --build-arg JAVA_VERSION=11           - The version of the JDK (and thus JRE) you want to build against/with\n#\n\n#\n# STAGE 1: This stage is responsible for things that change only when we retool our build chain and thus change very infrequently\n# (and in fact, probably less than the actual builder container image). This is a small optimization that will make your life\n# a tad bit easier when you are rebuilding the builder image\n#\nFROM alpine:latest AS downloader\nARG GRADLE_VERSION=7.1\nARG AFCT_VERSION=3.0.3568\n\nRUN apk update && apk add wget --no-cache\n\n# Get Gradle into /var/downloads/gradle (whithout version sub-directory\n# this makes it so that the GRADLE_VERSION does not need to leak into the\n# builder image below and only needs JAVA_VERSION as a build-arg\nRUN mkdir -p /var/downloads/gradle\nWORKDIR /var/downloads/gradle\nRUN wget -o /tmp/gradle.download.log https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip\nRUN unzip gradle-${GRADLE_VERSION}-bin.zip\nRUN mv /var/downloads/gradle/gradle-${GRADLE_VERSION}/* /var/downloads/gradle\nRUN rm -r /var/downloads/gradle/gradle-${GRADLE_VERSION}/ gradle-${GRADLE_VERSION}-bin.zip\n\n# Get Azure Functions Core Tools into /var/downloads/azure-functions\nRUN mkdir -p /var/downloads/azure-functions\nWORKDIR /var/downloads/azure-functions\nRUN wget -o /tmp/azure.functions.download.log https://github.com/Azure/azure-functions-core-tools/releases/download/${AFCT_VERSION}/Azure.Functions.Cli.linux-x64.${AFCT_VERSION}.zip\nRUN unzip Azure.Functions.Cli.linux-x64.${AFCT_VERSION}.zip 1>/tmp/azure.functions.extraction.log\nRUN rm Azure.Functions.Cli.linux-x64.${AFCT_VERSION}.zip\n\n\n#\n# STAGE 2: Build the actual container that does the build\n#\nFROM debian:bullseye AS builder\nARG JAVA_VERSION=11\n\n# Get the unpacked gradle binaries from the downloader stage\nRUN mkdir -p /opt/gradle\nCOPY --from=downloader /var/downloads/gradle/ /opt/gradle/\nENV PATH \"${PATH}:/opt/gradle/bin\"\n\n# Overlay the Azure Function binaries from the downloader\n# cf https://github.com/Azure/azure-functions-core-tools/blob/master/README.md#linux\nRUN mkdir -p /opt/azure-functions\nCOPY --from=downloader /var/downloads/azure-functions/ /opt/azure-functions/\nRUN chmod +x /opt/azure-functions/func /opt/azure-functions/gozip\nENV PATH \"${PATH}:/opt/azure-functions/\"\nENV FUNCTIONS_CORE_TOOLS_TELEMETRY_OPTOUT 1\n\n# Install pre-requisites\nRUN apt-get update \\\n    && apt-get --yes --no-install-recommends install \\\n    openjdk-${JAVA_VERSION}-jdk && rm -rf /var/lib/apt/lists/*;\n\n# A place to mount our source\nRUN mkdir -p \"/src\"\nWORKDIR \"/src\"\n"
}