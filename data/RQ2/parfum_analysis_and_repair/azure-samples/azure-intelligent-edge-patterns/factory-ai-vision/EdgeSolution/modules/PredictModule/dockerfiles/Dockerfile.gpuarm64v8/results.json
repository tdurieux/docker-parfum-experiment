{
  "startTime": 1674246468958,
  "endTime": 1674246469764,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 111,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# =========================================================\n# Base\n# =========================================================\nARG BASE_IMAGE=nvcr.io/nvidia/cuda-arm64:11.1-devel-ubuntu18.04\nFROM ${BASE_IMAGE} as base\n\nWORKDIR /app\nENV LANG=en_US.UTF-8\nENV LANGUAGE=en_US.UTF-8\nARG SYSTEM_CORES=8\n\n# =========================================================\n# Install system packages\n# =========================================================\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    git \\\n    wget \\\n    unzip \\\n    yasm \\\n    pkg-config \\\n    libtbb2 \\\n    libtbb-dev \\\n    libpq-dev \\\n    libprotobuf-dev \\\n    protobuf-compiler \\\n    libgeos-dev \\\n    ca-certificates \\\n    bzip2 \\\n    unzip \\\n    curl \\\n    libcurl4-openssl-dev \\\n    libssl-dev && \\\n    rm -rf /var/lib/apt/lists/*\n# protobuf-compiler:   https://github.com/onnx/onnx#build-onnx-on-arm-64\n# libprotobuf-dev:     https://github.com/onnx/onnx#build-onnx-on-arm-64\n# libgeos-dev:         Shapely\n\n# =========================================================\n# Install Python package\n# =========================================================\n# WORKDIR /code/\n# ARG MINIFORGE_VERSION=4.8.2-1\n# ENV CONDA_DIR=/opt/conda\n# ENV PATH=${CONDA_DIR}/bin:${PATH}\n\n# RUN wget --no-hsts \\\n#     --quiet \\\n#     https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-aarch64.sh \\\n#     -O /tmp/miniforge.sh && \\\n#     /bin/bash /tmp/miniforge.sh \\\n#     -b \\\n#     -p ${CONDA_DIR} && \\\n#     rm /tmp/miniforge.sh && \\\n#     conda clean -tipsy && \\\n#     find ${CONDA_DIR} -follow -type f -name '*.a' -delete && \\\n#     find ${CONDA_DIR} -follow -type f -name '*.pyc' -delete && \\\n#     conda clean -afy\n\n# RUN conda create --name python38 python=3.8 && \\\n#     echo \". ${CONDA_DIR}/etc/profile.d/conda.sh && conda activate python38\" >> /etc/skel/.bashrc && \\\n#     echo \". ${CONDA_DIR}/etc/profile.d/conda.sh && conda activate python38\" >> ~/.bashrc\n# SHELL [\"/bin/bash\", \"-c\"]\n\n# =========================================================\n# Install Python package\n# =========================================================\nWORKDIR /app\nCOPY requirements/base.txt ./requirements/base.txt\nRUN echo \"/usr/bin/make --jobs=${SYSTEM_CORES} \\$@\" > /usr/local/bin/make && \\\n    chmod 755 /usr/local/bin/make\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    pip3 install --no-cache-dir --upgrade pip && \\\n    pip3 install --no-cache-dir wheel cython protobuf\n# Workaround scikit image requires numpy while dependency is not resolved\n# RUN --mount=type=cache,target=/root/.cache/pip source activate python38 && pip install $(cat ./requirements/base.txt | grep numpy)\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    pip install --no-cache-dir $(cat ./requirements/base.txt | grep numpy)\n# RUN --mount=type=cache,target=/root/.cache/pip source activate python38 && pip install -r requirements/base.txt\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    pip install --no-cache-dir -r requirements/base.txt\n\n# =========================================================\n# Install onnxruntime\n# =========================================================\nARG ONNXRUNTIME_REPO=\"https://github.com/Microsoft/onnxruntime\"\nARG ONNXRUNTIME_SERVER_BRANCH=\"rel-1.5.2\"\nARG CMAKE_VERSION=\"3.14.3\"\nARG CMAKE_TAR_LINK=\"https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz\"\n\nWORKDIR /code\n\nRUN wget --no-hsts \\\n    --quiet \\\n    \"${CMAKE_TAR_LINK}\" &&\\\n    tar zxf \"cmake-${CMAKE_VERSION}.tar.gz\" &&\\\n    rm \"cmake-${CMAKE_VERSION}.tar.gz\"\n\nRUN cd /code/cmake-${CMAKE_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --system-curl --parallel=${SYSTEM_CORES} && \\\n    make -j${SYSTEM_CORES} && \\\n    make install && \\\n    cd /code && \\\n    rm -rf /code/cmake-${CMAKE_VERSION}\n\nWORKDIR /code\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n    libcudnn8=8.0.5.39-1+cuda11.1 \\\n    libcudnn8-dev=8.0.5.39-1+cuda11.1 \\\n    && rm -rf /var/lib/apt/lists/*\nRUN git clone \\\n    --single-branch \\\n    --branch ${ONNXRUNTIME_SERVER_BRANCH} \\\n    --recursive ${ONNXRUNTIME_REPO} onnxruntime && \\\n    cd onnxruntime && \\\n    # source activate python38 && \\\n    /bin/sh ./build.sh \\\n    --use_openmp \\\n    --config Release \\\n    --build_wheel \\\n    --update \\\n    --build \\\n    --parallel \\\n    --use_cuda \\\n    --cuda_home /usr/local/cuda \\\n    --cudnn_home /usr/lib/aarch64-linux-gnu \\\n    --cmake_extra_defines ONNXRUNTIME_VERSION=$(cat ./VERSION_NUMBER) && \\\n    pip install --no-cache-dir /code/onnxruntime/build/Linux/Release/dist/*.whl && \\\n    cd .. && \\\n    rm -rf onnxruntime\n\n# =========================================================\n# Install opencv\n# =========================================================\nWORKDIR /app\nCOPY requirements/gpuarm64v8.txt ./requirements/gpuarm64v8.txt\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    pip install --no-cache-dir -r requirements/gpuarm64v8.txt\n\n# =========================================================\n# Copy Source Code\n# =========================================================\nWORKDIR /app\n\nCOPY coco_classes.txt ./\nCOPY default_model default_model/\nCOPY default_model_6parts default_model_6parts/\nCOPY sample_video sample_video/\nCOPY scenario_models scenario_models/\nRUN chmod 777 sample_video/video.mp4\nRUN chmod 777 default_model\n\nCOPY api/__init__.py ./api/__init__.py\nCOPY api/models.py ./api/models.py\nCOPY config.py ./\nCOPY exception_handler.py ./\nCOPY logging_conf/logging_config.py ./logging_conf/logging_config.py\nCOPY model_wrapper.py ./\nCOPY object_detection.py ./\nCOPY object_detection2.py ./\nCOPY onnxruntime_predict.py ./\nCOPY server.py ./\nCOPY utility.py ./\n\nEXPOSE 7777\n\nCMD [ \"python3\", \"server.py\"]\n"
}