diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/azure-samples/azure-intelligent-edge-patterns/factory-ai-vision/EdgeSolution/modules/PredictModule/dockerfiles/Dockerfile.gpuarm64v8 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/azure-samples/azure-intelligent-edge-patterns/factory-ai-vision/EdgeSolution/modules/PredictModule/dockerfiles/Dockerfile.gpuarm64v8/repaired.Dockerfile
index 91e5eb9..f9ea044 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/azure-samples/azure-intelligent-edge-patterns/factory-ai-vision/EdgeSolution/modules/PredictModule/dockerfiles/Dockerfile.gpuarm64v8
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/azure-samples/azure-intelligent-edge-patterns/factory-ai-vision/EdgeSolution/modules/PredictModule/dockerfiles/Dockerfile.gpuarm64v8/repaired.Dockerfile
@@ -1,4 +1,3 @@
-# syntax = docker/dockerfile:experimental
 # =========================================================
 # Base
 # =========================================================
@@ -73,15 +72,15 @@ COPY requirements/base.txt ./requirements/base.txt
 RUN echo "/usr/bin/make --jobs=${SYSTEM_CORES} \$@" > /usr/local/bin/make && \
     chmod 755 /usr/local/bin/make
 RUN --mount=type=cache,target=/root/.cache/pip \
-    pip3 install --upgrade pip && \
-    pip3 install wheel cython protobuf
+    pip3 install --no-cache-dir --upgrade pip && \
+    pip3 install --no-cache-dir wheel cython protobuf
 # Workaround scikit image requires numpy while dependency is not resolved
 # RUN --mount=type=cache,target=/root/.cache/pip source activate python38 && pip install $(cat ./requirements/base.txt | grep numpy)
 RUN --mount=type=cache,target=/root/.cache/pip \
-    pip install $(cat ./requirements/base.txt | grep numpy)
+    pip install --no-cache-dir $(cat ./requirements/base.txt | grep numpy)
 # RUN --mount=type=cache,target=/root/.cache/pip source activate python38 && pip install -r requirements/base.txt
 RUN --mount=type=cache,target=/root/.cache/pip \
-    pip install -r requirements/base.txt
+    pip install --no-cache-dir -r requirements/base.txt
 
 # =========================================================
 # Install onnxruntime
@@ -100,7 +99,7 @@ RUN wget --no-hsts \
     rm "cmake-${CMAKE_VERSION}.tar.gz"
 
 RUN cd /code/cmake-${CMAKE_VERSION} && \
-    ./configure --system-curl --parallel=${SYSTEM_CORES} && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --system-curl --parallel=${SYSTEM_CORES} && \
     make -j${SYSTEM_CORES} && \
     make install && \
     cd /code && \
@@ -109,7 +108,7 @@ RUN cd /code/cmake-${CMAKE_VERSION} && \
 WORKDIR /code
 
 RUN apt-get update && \
-    apt-get install -y \
+    apt-get install --no-install-recommends -y \
     libcudnn8=8.0.5.39-1+cuda11.1 \
     libcudnn8-dev=8.0.5.39-1+cuda11.1 \
     && rm -rf /var/lib/apt/lists/*
@@ -130,7 +129,7 @@ RUN git clone \
     --cuda_home /usr/local/cuda \
     --cudnn_home /usr/lib/aarch64-linux-gnu \
     --cmake_extra_defines ONNXRUNTIME_VERSION=$(cat ./VERSION_NUMBER) && \
-    pip install /code/onnxruntime/build/Linux/Release/dist/*.whl && \
+    pip install --no-cache-dir /code/onnxruntime/build/Linux/Release/dist/*.whl && \
     cd .. && \
     rm -rf onnxruntime
 
@@ -140,7 +139,7 @@ RUN git clone \
 WORKDIR /app
 COPY requirements/gpuarm64v8.txt ./requirements/gpuarm64v8.txt
 RUN --mount=type=cache,target=/root/.cache/pip \
-    pip install -r requirements/gpuarm64v8.txt
+    pip install --no-cache-dir -r requirements/gpuarm64v8.txt
 
 # =========================================================
 # Copy Source Code