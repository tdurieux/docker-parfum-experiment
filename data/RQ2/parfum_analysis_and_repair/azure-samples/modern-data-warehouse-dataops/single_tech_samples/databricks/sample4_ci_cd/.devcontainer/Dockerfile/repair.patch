diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/azure-samples/modern-data-warehouse-dataops/single_tech_samples/databricks/sample4_ci_cd/.devcontainer/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/azure-samples/modern-data-warehouse-dataops/single_tech_samples/databricks/sample4_ci_cd/.devcontainer/Dockerfile/repaired.Dockerfile
index 0c5b3f3..f08f727 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/azure-samples/modern-data-warehouse-dataops/single_tech_samples/databricks/sample4_ci_cd/.devcontainer/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/azure-samples/modern-data-warehouse-dataops/single_tech_samples/databricks/sample4_ci_cd/.devcontainer/Dockerfile/repaired.Dockerfile
@@ -9,30 +9,31 @@ FROM python:3.7.3
 COPY .devcontainer/settings.vscode.json /root/.vscode-remote/data/Machine/settings.json
 
 # Install pylint
-RUN pip install pylint
+RUN pip install --no-cache-dir pylint
 
 # Install git, process tools
-RUN apt-get update && apt-get -y install git procps
+RUN apt-get update && apt-get -y --no-install-recommends install git procps && rm -rf /var/lib/apt/lists/*;
 
 # Install OpenJDK-8
 RUN apt-get update && \
-    apt-get install -y openjdk-8-jdk && \
-    apt-get install -y ant && \
-    apt-get clean;
+    apt-get install --no-install-recommends -y openjdk-8-jdk && \
+    apt-get install --no-install-recommends -y ant && \
+    apt-get clean; rm -rf /var/lib/apt/lists/*;
 
 
 ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/
 RUN export JAVA_HOME
 
 # Install any missing dependencies for enhanced language service
-RUN apt-get install -y libicu[0-9][0-9]
+RUN apt-get install --no-install-recommends -y libicu[0-9][0-9] && rm -rf /var/lib/apt/lists/*;
 
 RUN mkdir /workspace
 WORKDIR /workspace
 
 # Install Python dependencies from requirements.txt if it exists
 COPY ./requirements.txt requirements.txt* /workspace/
-RUN if [ -f "requirements.txt" ]; then pip install -r requirements.txt && rm requirements.txt*; fi
+RUN if [ -f "requirements.txt" ]; then \
+ pip install --no-cache-dir -r requirements.txt && rm requirements.txt*; fi
 
 # Clean up
 RUN apt-get autoremove -y \