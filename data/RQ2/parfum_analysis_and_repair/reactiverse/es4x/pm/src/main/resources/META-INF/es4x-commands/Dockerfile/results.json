{
  "startTime": 1674253405174,
  "endTime": 1674253405889,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use official node for build\nFROM node:lts AS NPM\n# Disable calls to es4x command (this container has no JVM)\nRUN ln -s /bin/true /usr/bin/es4x\n# Create app directory\nWORKDIR /usr/src/app\n# Add the application to the container\nCOPY . .\n# npm is run with unsafe permissions because the default docker user is root\n# also all dev packages are not installed\nRUN npm --unsafe-perm install --only=prod && npm cache clean --force;\n\n# Second stage (build the JVM related code)\nFROM adoptopenjdk/openjdk11 AS JVM\n# Download the ES4X runtime tool\nRUN curl -sL https://github.com/reactiverse/es4x/releases/download/${project.version}/es4x-pm-${project.version}-bin.tar.gz | tar zx --strip-components=1 -C /usr/local\n# Copy the previous build step\nCOPY --from=NPM /usr/src/app /usr/src/app\n# use the copied workspace\nWORKDIR /usr/src/app\n# force es4x maven resolution only to consider production dependencies\nRUN es4x install --only=prod\n\n# Third stage (contain)\nFROM gcr.io/distroless/java:11\n# Collect the jars from the previous step\nCOPY --from=JVM /usr/src/app /usr/src/app\n# use the copied workspace\nWORKDIR /usr/src/app\n# define the entrypoint\nENTRYPOINT [  \"/usr/bin/java\", \"--module-path=node_modules/.jvmci\", \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+EnableJVMCI\", \"--upgrade-module-path=node_modules/.jvmci/compiler.jar\", \"-XX:+UseContainerSupport\", \"-jar\", \"./node_modules/.bin/es4x-launcher.jar\" ]\n"
}