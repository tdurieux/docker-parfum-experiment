{
  "startTime": 1674254338195,
  "endTime": 1674254339115,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG centos_version=centos8\nARG factorio_version=1.1.30\nARG factorio_user=factorio\n\n### A base image without test resources:\nFROM centos:$centos_version AS sans-test-resources\nARG factorio_user\nRUN yum update -y && \\\n\tyum install -y \\\n      wget && \\\n\tyum clean all && \\\n    rm -rf /var/cache/yum\nRUN useradd $factorio_user\nUSER $factorio_user\nWORKDIR /opt/factorio-init\nENTRYPOINT [\"bash\", \"/opt/factorio-init/extras/test/libs/bats-core/bin/bats\"]\n\n### Build onto the base, add test resources:\nFROM sans-test-resources AS with-test-resources\nARG factorio_version\nENV FACTORIO_INIT_WITH_TEST_RESOURCES=1\nRUN wget -O /tmp/factorio_headless_x64_${factorio_version}.tar.xz \\\n     https://factorio.com/get-download/${factorio_version}/headless/linux64\n\n### Build onto the with-test-resources for alternate glibc (for centos7 testing)\nFROM with-test-resources AS with-glibc-sidebyside\nARG factorio_user\nUSER root\nRUN yum groupinstall -y \\\n\t\t\"Development tools\" && \\\n\tyum install -y \\\n\t\tglibc-devel.i686 \\\n\t\tglibc.i686 && \\\n\tyum clean all && \\\n    rm -rf /var/cache/yum\nWORKDIR /tmp\nRUN wget -q https://ftp.gnu.org/gnu/glibc/glibc-2.18.tar.gz -O - | tar -xvz\nWORKDIR /tmp/glibc-2.18/glibc-build\nRUN sed \"s/3\\.\\[89\\]/3\\.\\[89\\]\\* | 4/\" -i ../configure\nRUN ../configure --prefix='/opt/glibc-2.18' && \\\n\tsed -i -e 's#if (/$ld_so_name/) {#if (/\\Q$ld_so_name\\E/) {#' \\\n\t\t../scripts/test-installation.pl && \\\n\tmake && \\\n\tmake install # these take a while (~5 minutes on a i5 3.5GHz 32GB RAM WSL2 box)\n\nUSER $factorio_user\nENV FACTORIO_INIT_ALT_GLIBC=1\nWORKDIR /opt/factorio-init\n\n### and pre-install the game for glibc\nFROM with-glibc-sidebyside AS with-pre-installed-game-glibc\nARG factorio_user\nARG factorio_group\nARG factorio_version\n\nUSER root\nRUN tar -xvf /tmp/factorio_headless_x64_${factorio_version}.tar.xz -C /opt && \\\n\tchown -R ${factorio_user}:${factorio_group} /opt/factorio && rm /tmp/factorio_headless_x64_${factorio_version}.tar.xz\nUSER ${factorio_user}\nENV FACTORIO_INIT_WITH_PRE_INSTALLED_GAME=1\nRUN /opt/glibc-2.18/lib/ld-2.18.so --library-path /opt/glibc-2.18/lib \\\n\t/opt/factorio/bin/x64/factorio --create /opt/factorio/saves/server-save \\\n\t--executable-path /opt/factorio/bin/x64/factorio && \\\n\tcp /opt/factorio/data/server-settings.example.json /opt/factorio/data/server-settings.json\n\n### and pre-install the game\nFROM with-test-resources AS with-pre-installed-game\nARG factorio_user\nARG factorio_group\nARG factorio_version\n\nUSER root\nRUN tar -xvf /tmp/factorio_headless_x64_${factorio_version}.tar.xz -C /opt && \\\n\tchown -R ${factorio_user}:${factorio_group} /opt/factorio && rm /tmp/factorio_headless_x64_${factorio_version}.tar.xz\nUSER ${factorio_user}\nENV FACTORIO_INIT_WITH_PRE_INSTALLED_GAME=1\nRUN /opt/factorio/bin/x64/factorio --create /opt/factorio/saves/server-save && \\\n\tcp /opt/factorio/data/server-settings.example.json /opt/factorio/data/server-settings.json\n"
}