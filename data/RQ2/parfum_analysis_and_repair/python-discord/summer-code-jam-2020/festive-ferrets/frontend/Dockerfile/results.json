{
  "startTime": 1674255186566,
  "endTime": 1674255187155,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM node:14-alpine as builder\n\n# # install and cache app dependencies\n# COPY frontend/code-jam/package.json frontend/code-jam/package-lock.json ./\n# RUN npm install && mkdir /frontend && mv ./node_modules ./frontend && mv package.json ./frontend && mv package-lock.json ./frontend\n\n# WORKDIR /frontend\n\n# COPY . .\n\n# RUN npm run build\n\n\n\n# # ------------------------------------------------------\n# # Production Build\n# # ------------------------------------------------------\n# FROM nginx:1.16.0-alpine\n# COPY --from=builder /frontend/build /usr/share/nginx/html\n# RUN rm /etc/nginx/conf.d/default.conf\n# COPY nginx/nginx.conf /etc/nginx/conf.d\n# EXPOSE 80\n# CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n\n# Stage 0, \"build-stage\", based on Node.js, to build and compile the frontend\nFROM node:14-alpine as build-stage\nWORKDIR /app\nCOPY frontend/code-jam/package*.json /app/\nRUN npm install && npm cache clean --force;\nCOPY ./frontend/code-jam/ /app/\nARG configuration=production\nRUN npm run build -- --output-path=./dist/out --configuration $configuration\n# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx\nFROM nginx:1.15\n\nCOPY --from=build-stage /app/dist/out/ /usr/share/nginx/html\n# Copy the default nginx.conf provided by tiangolo/node-frontend\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY frontend/nginx.conf /etc/nginx/conf.d\n\nENV HOME=/home/app\nENV APP_HOME=/home/app/web\nRUN mkdir -p $APP_HOME\nRUN mkdir $APP_HOME/static\nWORKDIR $APP_HOME"
}