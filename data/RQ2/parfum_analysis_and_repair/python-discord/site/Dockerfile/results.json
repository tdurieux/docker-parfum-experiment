{
  "startTime": 1674217341832,
  "endTime": 1674217342440,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM --platform=linux/amd64 python:3.9-slim-buster\n\n# Allow service to handle stops gracefully\nSTOPSIGNAL SIGQUIT\n\n# Set pip to have cleaner logs and no saved cache\nENV PIP_NO_CACHE_DIR=false \\\n    POETRY_VIRTUALENVS_CREATE=false\n\n# Install poetry\nRUN pip install --no-cache-dir -U poetry\n\n# Copy the project files into working directory\nWORKDIR /app\n\n# Install project dependencies\nCOPY pyproject.toml poetry.lock ./\nRUN poetry install --no-dev\n\n# Set Git SHA environment variable\nARG git_sha=\"development\"\nENV GIT_SHA=$git_sha\n\n# Copy the source code in last to optimize rebuilding the image\nCOPY . .\n\n# Set dummy variables so collectstatic can load settings.py\nRUN \\\n    # Set BUILDING_DOCKER to anything but undefined so settings.py\n    # does not insert django_prometheus into the list of installed apps.\n    # This prevents django_prometheus from attempting to connect to the database\n    # when the collectstatic task is ran.\n    BUILDING_DOCKER=yes \\\n    SECRET_KEY=dummy_value \\\n    DATABASE_URL=postgres://localhost \\\n    METRICITY_DB_URL=postgres://localhost \\\n    python manage.py collectstatic --noinput --clear\n\n# Build static files if we are doing a static build\nARG STATIC_BUILD=false\nRUN if [ $STATIC_BUILD = \"TRUE\" ] ; \\\n  then SECRET_KEY=dummy_value python manage.py distill-local build --traceback --force ; \\\nfi\n\n# Run web server through custom manager\nENTRYPOINT [\"python\", \"manage.py\"]\nCMD [\"run\"]\n"
}