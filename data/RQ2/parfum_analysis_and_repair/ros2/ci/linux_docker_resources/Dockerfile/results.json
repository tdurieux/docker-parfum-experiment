{
  "startTime": 1674253438844,
  "endTime": 1674253440665,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 51,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 55,
        "columnEnd": 181
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 55,
        "columnEnd": 115
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 123,
        "columnEnd": 191
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 122,
        "columnEnd": 190
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 167,
        "lineEnd": 170,
        "columnStart": 22,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 177
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 22,
        "columnEnd": 92
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 79,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 65,
        "columnEnd": 138
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 22,
        "columnEnd": 69
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 123,
        "columnEnd": 191
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 122,
        "columnEnd": 190
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 54,
        "columnEnd": 117
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 22,
        "columnEnd": 80
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 22,
        "columnEnd": 112
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 22,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 22,
        "columnEnd": 78
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 22,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 22,
        "columnEnd": 242
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 22,
        "columnEnd": 157
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 22,
        "columnEnd": 93
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 22,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 146,
        "lineEnd": 155,
        "columnStart": 76,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 158,
        "lineEnd": 164,
        "columnStart": 22,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 167,
        "lineEnd": 170,
        "columnStart": 22,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\nARG BRIDGE=false\nARG INSTALL_CONNEXT_DEBS=false\nARG PLATFORM=x86\nARG ROS1_DISTRO=noetic\nARG ROS_DISTRO=rolling\nARG UBUNTU_DISTRO=focal\nARG COMPILE_WITH_CLANG=false\n\n# Prevent errors from apt-get.\n# See: http://askubuntu.com/questions/506158/unable-to-initialize-frontend-dialog-when-using-ssh\nENV DEBIAN_FRONTEND noninteractive\n\n# Opt-out of phased updates, which can create inconsistencies between installed package versions as different containers end up on different phases.\n# https://wiki.ubuntu.com/PhasedUpdates\nRUN echo 'APT::Get::Never-Include-Phased-Updates \"true\";' > /etc/apt/apt.conf.d/90-phased-updates\n\nRUN apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\n\n# net-tools is for ifconfig\n# Get curl for fetching the repo keys.\n# Get https transport for APT.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  lsb-release net-tools sudo \\\n  ca-certificates \\\n  curl \\\n  gnupg2 \\\n  apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\n# Add the ROS repositories to the apt sources list.\nRUN if test ${UBUNTU_DISTRO} != jammy; then echo \"deb http://repositories.ros.org/ubuntu/testing/ `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros-latest.list; fi\nRUN if test ${UBUNTU_DISTRO} = jammy; then echo \"deb http://repo.ros2.org/ubuntu/testing/ `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros2-latest.list; fi\nRUN echo \"Bust Cache for key update 2021-06-01\" && curl -f -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | apt-key add -\n\n# Add the OSRF repositories to the apt sources list.\nRUN echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-latest.list\nRUN curl -f --silent https://packages.osrfoundation.org/gazebo.key | apt-key add -\n\n# Install some development tools.\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential ccache cmake pkg-config python3-empy python3-pip python3-setuptools python3-vcstool python3-venv && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y python3-lark python3-opencv && rm -rf /var/lib/apt/lists/*;\n# Install virtualenv 16.7.9 needed for Foxy builds on Focal. https://github.com/ros2/ci/issues/400\nRUN if test ${UBUNTU_DISTRO} = focal; then python3 -m pip install virtualenv==16.7.9; fi\n\n# Install build and test dependencies of ROS 2 packages.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  clang-format \\\n  cppcheck \\\n  git \\\n  libbenchmark-dev \\\n  libbullet-dev \\\n  liblog4cxx-dev \\\n  liborocos-kdl-dev \\\n  libspdlog-dev \\\n  libxml2-dev \\\n  libxml2-utils \\\n  libxslt-dev \\\n  libyaml-cpp-dev \\\n  pydocstyle \\\n  python3-pyflakes \\\n  python3-coverage \\\n  python3-cryptography \\\n  python3-flake8 \\\n  python3-lxml \\\n  python3-mock \\\n  python3-mypy \\\n  python3-netifaces \\\n  python3-nose \\\n  python3-numpy \\\n  python3-pep8 \\\n  python3-psutil \\\n  python3-pykdl \\\n  python3-pyparsing \\\n  python3-pytest-mock \\\n  python3-pytest-timeout \\\n  python3-yaml \\\n  uncrustify \\\n  yamllint && rm -rf /var/lib/apt/lists/*;\n\n# Install clang if build arg is true\nRUN if test ${COMPILE_WITH_CLANG} = true; then \\\n apt-get update && apt-get install --no-install-recommends -y clang libc++-dev libc++abi-dev; rm -rf /var/lib/apt/lists/*; fi\n\n# Install coverage build dependencies.\nRUN apt-get update && apt-get install --no-install-recommends -y lcov && rm -rf /var/lib/apt/lists/*;\nRUN pip3 install --no-cache-dir -U lcov_cobertura_fix\n\n# Install the Connext binary from the OSRF repositories.\nRUN if test \\( ${PLATFORM} = x86 -a ${INSTALL_CONNEXT_DEBS} = true -a ${UBUNTU_DISTRO} != jammy \\); then \\\n apt-get update && RTI_NC_LICENSE_ACCEPTED=yes apt-get --no-install-recommends install -y rti-connext-dds-5.3.1; rm -rf /var/lib/apt/lists/*; fi\nRUN if test \\( ${PLATFORM} = x86 -a ${INSTALL_CONNEXT_DEBS} = true -a ${UBUNTU_DISTRO} = jammy \\); then \\\n apt-get update && RTI_NC_LICENSE_ACCEPTED=yes apt-get --no-install-recommends install -y rti-connext-dds-6.0.1; rm -rf /var/lib/apt/lists/*; fi\n\n# Install the RTI dependencies.\nRUN if test ${PLATFORM} = x86; then \\\n apt-get update && apt-get install --no-install-recommends -y default-jre-headless; rm -rf /var/lib/apt/lists/*; fi\n\n# Install dependencies for RTI web binaries install script.\nRUN apt-get update && apt-get install --no-install-recommends -y python3-pexpect && rm -rf /var/lib/apt/lists/*;\n\n# Get and install the RTI web binaries.\n# Connext 5.3.1 for focal and earlier.\nRUN if test ${UBUNTU_DISTRO} != jammy; then \\\n cd /tmp && curl -f --silent https://s3.amazonaws.com/RTI/Bundles/5.3.1/Evaluation/rti_connext_dds_secure-5.3.1-eval-x64Linux3gcc5.4.0.tar.gz | tar -xz; fi\nRUN if test ${UBUNTU_DISTRO} != jammy; then \\\n cd /tmp && tar -xvf /tmp/openssl-1.0.2n-target-x64Linux3gcc5.4.0.tar.gz; rm /tmp/openssl-1.0.2n-target-x64Linux3gcc5.4.0.tar.gzfi\n# Connext 6.0.1 for jammy, the evaluation bundles don't contain security extensions so we need to distribute the pro binaries to ourselves.\nCOPY rticonnextdds-src/ /tmp/rticonnextdds-src\nRUN for splitpkg in \\\n  /tmp/rticonnextdds-src/rti_connext_dds-6.0.1-pro-host-x64Linux.run \\\n  /tmp/rticonnextdds-src/rti_connext_dds-6.0.1.25-pro-host-x64Linux.rtipkg \\\n  /tmp/rticonnextdds-src/rti_connext_dds-6.0.1.25-pro-target-x64Linux4gcc7.3.0.rtipkg; do \\\n    cat $(echo ${splitpkg}.0?? | sort) > $splitpkg; \\\n  done\nRUN chmod 755 /tmp/rticonnextdds-src/rti_connext_dds-6.0.1-pro-host-x64Linux.run\n\n# Add the connextdds installation script used in entry_point.sh\nADD rti_web_binaries_install_script.py /tmp/rti_web_binaries_install_script.py\n\n# Add the RTI license file.\nADD rticonnextdds-license/rti_license.dat /tmp/rti_license.dat\n\n# Install the eProsima dependencies.\nRUN apt-get update && apt-get install --no-install-recommends -y libasio-dev libssl-dev libtinyxml2-dev valgrind && rm -rf /var/lib/apt/lists/*;\n\n# Install the CycloneDDS dependencies.\nRUN apt-get update && apt-get install --no-install-recommends -y bison libcunit1-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install OpenCV.\nRUN apt-get update && apt-get install --no-install-recommends -y libopencv-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install console_bridge for class_loader et al.\nRUN apt-get update && apt-get install --no-install-recommends -y libconsole-bridge-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install build dependencies for rviz et al.\nRUN apt-get update && apt-get install --no-install-recommends -y libassimp-dev libcurl4-openssl-dev libfreetype6-dev libgles2-mesa-dev libglu1-mesa-dev libqt5core5a libqt5gui5 libqt5opengl5 libqt5widgets5 libxaw7-dev libxrandr-dev qtbase5-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install build dependencies for rqt et al.\nRUN apt-get update && apt-get install --no-install-recommends -y pyqt5-dev python3-pyqt5 python3-pyqt5.qtsvg python3-sip-dev python3-pydot python3-pygraphviz && rm -rf /var/lib/apt/lists/*;\n\n# Install dependencies for robot_model and robot_state_publisher\nRUN apt-get update && apt-get install --no-install-recommends -y libtinyxml-dev libeigen3-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install Python3 development files.\nRUN apt-get update && apt-get install --no-install-recommends -y python3-dev && rm -rf /var/lib/apt/lists/*;\n\n# automatic invalidation once every day.\nRUN echo \"@today_str\"\n\n# Install build and test dependencies of ros1_bridge if there is a valid ROS 1 distro.\nRUN if test ${BRIDGE} = true -a -n \"${ROS1_DISTRO}\"; then \\\n apt-get update && apt-get install --no-install-recommends -y \\\n    ros-${ROS1_DISTRO}-catkin \\\n    ros-${ROS1_DISTRO}-common-msgs \\\n    ros-${ROS1_DISTRO}-rosbash \\\n    ros-${ROS1_DISTRO}-roscpp \\\n    ros-${ROS1_DISTRO}-roslaunch \\\n    ros-${ROS1_DISTRO}-rosmsg \\\n    ros-${ROS1_DISTRO}-roscpp-tutorials \\\n    ros-${ROS1_DISTRO}-rospy-tutorials \\\n    ros-${ROS1_DISTRO}-tf2-msgs; rm -rf /var/lib/apt/lists/*; fi\n\n# Install dependencies for RViz visual tests\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libgl1-mesa-dri \\\n    libglapi-mesa \\\n    libosmesa6 \\\n    mesa-utils \\\n    xvfb \\\n    matchbox-window-manager && rm -rf /var/lib/apt/lists/*;\n\n# Install dependencies for iceoryx\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    acl \\\n    libacl1-dev \\\n    libncurses5-dev && rm -rf /var/lib/apt/lists/*;\n\n# After all packages are installed, update ccache symlinks (see ros2/ci#326).\n# This command is supposed to be invoked whenever a new compiler is installed\n# but that isn't happening. So we invoke it here to make sure all compilers are\n# picked up.\nRUN update-ccache-symlinks\n\nENV DISPLAY=:99\n\n# Create a user to own the build output.\nRUN useradd -u 1234 -m rosbuild\nRUN sudo -H -u rosbuild -- git config --global user.email \"jenkins@ci.ros2.org\"\nRUN sudo -H -u rosbuild -- git config --global user.name \"Jenkins ROS 2\"\nRUN echo 'rosbuild ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# Add an entry point which changes rosbuild's UID from 1234 to the UID of the invoking user.\n# This means that the generated files will have the same ownership as the host OS user.\nCOPY entry_point.sh /entry_point.sh\nRUN chmod 755 /entry_point.sh\n\nENTRYPOINT [\"/entry_point.sh\"]\n\nCMD [\"matchbox-window-manager > /dev/null 2>&1 & python3 -u run_ros2_batch.py $CI_ARGS\"]\n"
}