{
  "startTime": 1674216878915,
  "endTime": 1674216880604,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 139
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 128
      }
    }
  ],
  "repairedDockerfile": "# It is recommended to use a machine which supports CUDA to build this image.\nFROM nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04 AS BUILDER\nRUN apt-get update --fix-missing\nRUN apt-get install --no-install-recommends -y curl git autoconf automake libtool curl make g++ unzip cmake build-essential cpio && rm -rf /var/lib/apt/lists/*;\nRUN apt-get -y clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# install zlib\nWORKDIR /\nRUN git clone --no-checkout https://github.com/madler/zlib\nWORKDIR /zlib\nRUN git checkout tags/v1.2.10 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install\n\n# protobuf install\nWORKDIR /\nRUN git clone --no-checkout https://github.com/protocolbuffers/protobuf.git\nWORKDIR /protobuf\nRUN git checkout tags/v3.8.0 && \\\n    git submodule update --init --recursive && \\\n    ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared --prefix=/usr CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" && \\\n    make && \\\n    make check && \\\n    make install && \\\n    ldconfig# refresh shared library cache.\n\n# Intel mkl install\nWORKDIR /\nRUN curl -f --tlsv1.2 --output l_mkl_2020.0.166.tgz https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/16318/l_mkl_2020.0.166.tgz\nRUN tar zxvf l_mkl_2020.0.166.tgz && rm l_mkl_2020.0.166.tgz\nWORKDIR /l_mkl_2020.0.166\nRUN ./install.sh --silent ./silent.cfg --install_dir /opt/intel/ --accept_eula\n\n# boost install\nWORKDIR /\nRUN git clone --recursive https://github.com/boostorg/boost --branch boost-1.72.0 /boost\nWORKDIR /boost\nRUN ./bootstrap.sh\nRUN ./b2 install --prefix=/usr --with-system --with-thread --with-date_time --with-regex --with-serialization\n\n# Marian install\nWORKDIR /\nRUN git clone --no-checkout https://github.com/marian-nmt/marian-dev\nWORKDIR marian-dev\nRUN git checkout youki/quantize-embedding\nRUN git checkout dad48865fd3b7f1d7b891de81040f7651e824510\nRUN mkdir src/static\nRUN mkdir build\nCOPY src/cmarian.cpp /marian-dev/src/static\nCOPY src/logging.cpp /marian-dev/src/common\nRUN rm src/CMakeLists.txt\nCOPY src/CMakeLists.txt /marian-dev/src\n\nWORKDIR /marian-dev/build\nRUN cmake .. -DCOMPILE_CPU=on -DCOMPILE_CUDA=on -DUSE_SENTENCEPIECE=on -DUSE_STATIC_LIBS=off -DCOMPILE_SERVER=off -DUSE_FBGEMM=on -DCUDA_cublas_device_LIBRARY=/usr/lib/x86_64-linux-gnu/libcublas.so\nRUN make -j $(grep -c ^processor /proc/cpuinfo)\n\n# build cmarian static library\nFROM nvcr.io/nvidia/tritonserver:20.09-py3\nRUN mkdir -p /marian-dev/build/src/3rd_party/sentencepiece/src\nCOPY --from=BUILDER /usr/lib/libprotobuf.a /usr/lib\nCOPY --from=BUILDER /usr/lib/libboost_system.a /usr/lib\nCOPY --from=BUILDER /marian-dev/build/src/3rd_party/fbgemm/libfbgemm.a /usr/lib\nCOPY --from=BUILDER /marian-dev/build/src/3rd_party/fbgemm/asmjit/libasmjit.a /usr/lib\nCOPY --from=BUILDER /marian-dev/build/src/3rd_party/sentencepiece/src/libsentencepiece_train.a /usr/lib\nCOPY --from=BUILDER /marian-dev/build/src/3rd_party/sentencepiece/src/libsentencepiece.a /usr/lib\nCOPY --from=BUILDER /marian-dev/build/libmarian.a /usr/lib/libcmarian.a\nCOPY --from=BUILDER /marian-dev/build/src/libmarian_cuda.a /usr/lib/libcmarian_cuda.a\n\n# build triton custom backend\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n            software-properties-common \\\n            build-essential \\\n            git \\\n            libopencv-dev \\\n            libopencv-core-dev \\\n            libssl-dev \\\n            libtool \\\n            pkg-config \\\n            rapidjson-dev && rm -rf /var/lib/apt/lists/*;\n\n# install cmake-3.19.0\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.19.0-rc1/cmake-3.19.0-rc1-Linux-x86_64.sh\nRUN sh cmake-3.19.0-rc1-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir\n\nADD marian_backend /opt/tritonserver/marian_backend\nWORKDIR /opt/tritonserver/marian_backend\nRUN mkdir build\nRUN cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/install .. && \\\n    make install\n"
}