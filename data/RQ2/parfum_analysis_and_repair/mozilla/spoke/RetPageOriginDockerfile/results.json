{
  "startTime": 1674255300837,
  "endTime": 1674255301824,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###\n# this dockerfile produces image/container that serves customly packaged spoke static files\n# the result container should serve reticulum as \"spoke_page_origin\" on (path) \"/spoke/pages\"\n###\nfrom node:16.13 as builder\nrun mkdir /spoke && cd /spoke\ncopy package.json ./\ncopy yarn.lock ./\nrun yarn install --frozen-lockfile && yarn cache clean;\ncopy . .\nenv BASE_ASSETS_PATH=\"{{rawspoke-base-assets-path}}\"\n# TODO we should be setting BUILD_VERSION, probably pass in git sha or run number as an ARG\nrun yarn build 1> /dev/null\nrun mkdir -p dist/pages && mv dist/*.html dist/pages\n# TODO can't we just move this directly from dist to /www ?\nrun mkdir /spoke/rawspoke && mv dist/pages /spoke/rawspoke && mv dist/assets /spoke/rawspoke\n\nfrom alpine/openssl as ssl\nrun mkdir /ssl && openssl req -x509 -newkey rsa:2048 -sha256 -days 36500 -nodes -keyout /ssl/key -out /ssl/cert -subj '/CN=spoke'\n\nfrom nginx:alpine\nrun apk add --no-cache bash\nrun mkdir /ssl && mkdir -p /www/spoke && mkdir -p /www/spoke/pages && mkdir -p /www/spoke/assets\ncopy --from=ssl /ssl /ssl\ncopy --from=builder /spoke/rawspoke/pages /www/spoke/pages\ncopy --from=builder /spoke/rawspoke/assets /www/spoke/assets\ncopy scripts/docker/nginx.config /etc/nginx/conf.d/default.conf\ncopy scripts/docker/run.sh /run.sh\nrun chmod +x /run.sh && cat /run.sh\ncmd bash /run.sh\n"
}