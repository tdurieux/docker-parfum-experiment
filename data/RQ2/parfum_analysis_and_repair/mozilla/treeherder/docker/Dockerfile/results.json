{
  "startTime": 1674216215768,
  "endTime": 1674216216682,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 20,
        "columnEnd": 36
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "## Frontend stage\nFROM node:18.5.0 AS frontend\n\nWORKDIR /app\n\nCOPY ui/ /app/ui/\nCOPY package.json babel.config.json webpack.config.js yarn.lock /app/\n\nRUN npm install -g --force yarn@1.22.19 && npm cache clean --force;\nRUN yarn install && yarn cache clean;\nRUN yarn build && yarn cache clean;\n\n\n## Backend stage\nFROM python:3.9.13-slim\n\n# libmysqlclient-dev is required for the mysqlclient Python package.\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    default-libmysqlclient-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nCOPY requirements/ /app/requirements/\nRUN apt-get update && apt-get install --no-install-recommends -q --yes gcc && \\\n    pip install --no-cache-dir -r requirements/common.txt && \\\n    apt-get -q --yes remove gcc && \\\n    apt-get -q --yes autoremove && \\\n    apt-get clean && \\\n    rm -rf /root/.cache && rm -rf /var/lib/apt/lists/*;\n\nCOPY bin/ /app/bin/\nCOPY docker/entrypoint_prod.sh /app/docker/entrypoint_prod.sh\nCOPY treeherder/ /app/treeherder/\nCOPY schemas/ /app/schemas/\nCOPY manage.py newrelic.ini version.json /app/\n\nCOPY --from=frontend /app/.build/ /app/.build/\n\nRUN python manage.py collectstatic --noinput\n\n# Generate gzipped versions of files that would benefit from compression, that\n# WhiteNoise can then serve in preference to the originals. This is required\n# since WhiteNoise's Django storage backend only gzips assets handled by\n# collectstatic, and so does not affect files in the `.build/` directory\n# since they are instead generated by webpack.\nRUN python -m whitenoise.compress .build\n\nENTRYPOINT [\"/bin/bash\", \"/app/docker/entrypoint_prod.sh\"]\nCMD [\"web\"]\n"
}