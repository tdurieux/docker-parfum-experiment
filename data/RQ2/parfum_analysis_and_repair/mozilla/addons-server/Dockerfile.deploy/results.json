{
  "startTime": 1674256141835,
  "endTime": 1674256142736,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 56,
        "columnStart": 25,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.9-slim-buster\n\n# need to compile swig\nENV SWIG_FEATURES=\"-D__x86_64__\"\n\n# Should change it to use ARG instead of ENV for OLYMPIA_UID\n# once the jenkins server is upgraded to support docker >= v1.9.0\nENV OLYMPIA_UID=9500\nRUN useradd -u ${OLYMPIA_UID} -s /sbin/nologin olympia\n\n# Add support for https apt repos and gpg signed repos\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        apt-transport-https \\\n        gnupg2 \\\n    && rm -rf /var/lib/apt/lists/*\n# Add keys and repos for node and mysql\nCOPY docker/*.gpg.key /etc/pki/gpg/\nRUN APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn \\\n    apt-key add /etc/pki/gpg/nodesource.gpg.key \\\n    && APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn \\\n    apt-key add /etc/pki/gpg/mysql.gpg.key\nCOPY docker/*.list /etc/apt/sources.list.d/\n\n# IMPORTANT: When editing this list below, make sure to also update\n# `Dockerfile.deploy`.\n# Allow scripts to detect we're running in our own container and install\n# packages.\nRUN touch /addons-server-docker-container \\\n    && apt-get update && apt-get -t buster --no-install-recommends install -y \\\n        # General (dev-) dependencies\n        bash-completion \\\n        build-essential \\\n        curl \\\n        libgit2-dev \\\n        libjpeg-dev \\\n        libsasl2-dev \\\n        libxml2-dev \\\n        libxslt-dev \\\n        locales \\\n        zlib1g-dev \\\n        libffi-dev \\\n        libssl-dev \\\n        nodejs \\\n        # Git, because we're using git-checkout dependencies\n        git \\\n        # Dependencies for mysql-python (from mysql apt repo, not debian)\n        mysql-client \\\n        libmysqlclient-dev \\\n        swig \\\n        gettext \\\n        # Use rsvg-convert to render our static theme previews\n        librsvg2-bin \\\n        # Use pngcrush to optimize the PNGs uploaded by developers\n        pngcrush \\\n        # Use libmaxmind for speedy geoip lookups\n        libmaxminddb0 \\\n        libmaxminddb-dev \\\n    && apt-get -t buster-backports --no-install-recommends install -y \\\n        libgit2-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# IMPORTANT: When editing one of these lists below, make sure to also update\n# `Dockerfile`.\nADD docker/etc/mime.types /etc/mime.types\n\n# Compile required locale\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\n# version.json is overwritten by CircleCI (see circle.yml).\n# The pipeline v2 standard requires the existence of /app/version.json\n# inside the docker image, thus it's copied there.\nCOPY version.json /app/version.json\nCOPY . /data/olympia\nWORKDIR /data/olympia\n\n# Install all python requires, and add symlink for old uwsgi binary paths\nRUN pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/system.txt   \\\n    && pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/prod.txt  \\\n    && pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/prod_without_hash.txt \\\n    && pip3 install --no-cache-dir --exists-action=w --no-deps -e . \\\n    && ln -s /usr/local/bin/uwsgi /usr/bin/uwsgi \\\n    && ln -s /usr/bin/uwsgi /usr/sbin/uwsgi\n\nWORKDIR /data/olympia\n\n# Build locales, assets, build id.\nRUN echo \"from olympia.lib.settings_base import *\\n\\\nLESS_BIN = 'node_modules/less/bin/lessc'\\n\\\nCLEANCSS_BIN = 'node_modules/clean-css-cli/bin/cleancss'\\n\\\nJS_MINIFIER_BIN = 'node_modules/terser/bin/terser'\\n\\\nFXA_CONFIG = {'default': {}, 'internal': {}}\\n\"\\\n> settings_local.py && DJANGO_SETTINGS_MODULE='settings_local' locale/compile-mo.sh locale \\\n    && npm install \\\n    && make -f Makefile-docker copy_node_js \\\n    && DJANGO_SETTINGS_MODULE='settings_local' python manage.py compress_assets \\\n    && DJANGO_SETTINGS_MODULE='settings_local' python manage.py generate_jsi18n_files \\\n    && DJANGO_SETTINGS_MODULE='settings_local' python manage.py collectstatic --noinput \\\n    && npm prune --production \\\n    && ./scripts/generate_build.py > build.py \\\n    && rm -f settings_local.py settings_local.pyc && npm cache clean --force;\n"
}