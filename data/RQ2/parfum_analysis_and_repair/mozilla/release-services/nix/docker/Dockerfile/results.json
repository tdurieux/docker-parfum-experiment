{
  "startTime": 1674218958514,
  "endTime": 1674218960320,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:jessie-slim\nMAINTAINER rgarbas@mozilla.com\n\nARG NIXPKGS_OWNER\nARG NIXPKGS_REPO\nARG NIXPKGS_REV\nARG NIXPKGS_SHA256\nARG NIX_VERSION\nARG NIX_SHA256\nARG NIX_CACHE_PUBLIC_KEYS\nARG NIX_CACHE_PUBLIC_URLS\n\nENV NIXPKGS_OWNER ${NIXPKGS_OWNER}\nENV NIXPKGS_REPO ${NIXPKGS_REPO}\nENV NIXPKGS_REV ${NIXPKGS_REV}\nENV NIXPKGS_SHA256 ${NIXPKGS_SHA256}\nENV NIX_VERSION ${NIX_VERSION}\nENV NIX_SHA256 ${NIX_SHA256}\nENV NIX_CACHE_PUBLIC_KEYS ${NIX_CACHE_PUBLIC_KEYS}\nENV NIX_CACHE_PUBLIC_URLS ${NIX_CACHE_PUBLIC_URLS}\nENV NIX_PATH \"nixpkgs=/etc/nix/nixpkgs\"\n\n#\n# install some package which are need from debian\n#\nRUN apt-get -q update \\\n && apt-get -q --no-install-recommends --yes install bash wget bzip2 tar locales sudo \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && locale-gen \\\n && sed -i \"s|mesg n|tty -s \\&\\& mesg n|\" /root/.profile\n\n\n#\n# create app user and make sure it is paswordless sudo, that way we could start\n# nix-daemon in the background when logging\n#\nRUN groupadd app \\\n && useradd --create-home -g app -G sudo app \\\n && sed -i -e \"s|%sudo\tALL=(ALL:ALL) ALL|%sudo\tALL=(ALL) NOPASSWD: ALL|\" /etc/sudoers \\\n && mkdir -p /home/app/.config/please && chown -R app:app /home/app/.config/please\n\n\n#\n# Downloading nixpkgs\nRUN wget -nv \"https://github.com/$NIXPKGS_OWNER/$NIXPKGS_REPO/archive/$NIXPKGS_REV.tar.gz\" \\\n && nixpkgs_sha256=$(sha256sum \"$NIXPKGS_REV.tar.gz\" | cut -d' ' -f1) \\\n && if [ \"$nixpkgs_sha256\" != \"$NIXPKGS_SHA256\" ]; then \\\n      echo \"nixpkgs sha256 doesn't match. Expecting '$NIXPKGS_SHA256', but we got is '$nixpkgs_sha256'\"; \\\n      exit 1; \\\n    fi \\\n && tar zxf \"$NIXPKGS_REV.tar.gz\" \\\n && mkdir /etc/services \\\n && mkdir -p /etc/nix \\\n && mv \"$NIXPKGS_REPO-$NIXPKGS_REV\" /etc/nix/nixpkgs && rm \"$NIXPKGS_REV.tar.gz\"\n\n\n#\n# Copy project into /app\n#\n\n#\n# Install nix\nRUN mkdir -m 0755 /nix \\\n && chown app:app /nix \\\n && mkdir -p /etc/nix \\\n && echo \"substituters = https://cache.nixos.org $NIX_CACHE_PUBLIC_URLS\" >> /etc/nix/nix.conf \\\n && echo \"trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= $NIX_CACHE_PUBLIC_KEYS\" >> /etc/nix/nix.conf \\\n # TODO: this is currently set to false once both cache bucket have only signed binaries we can set this to true\n && echo \"require-sigs = false\" >> /etc/nix/nix.conf \\\n && echo \"trusted-users = app\" >> /etc/nix/nix.conf \\\n && echo \"allowed-users = app\" >> /etc/nix/nix.conf \\\n && echo \"build-users-group =\" >> /etc/nix/nix.conf\n\n\nUSER app\nWORKDIR /home/app\nENV USER=\"app\"\n\nCOPY please /app/\nCOPY VERSION /app/\nCOPY nix/ /app/nix/\nCOPY lib/ /app/lib/\nCOPY src/ /app/src/\n\nRUN wget -nv \"https://nixos.org/releases/nix/nix-$NIX_VERSION/nix-$NIX_VERSION-x86_64-linux.tar.bz2\" \\\n && nix_sha256=$(sha256sum \"nix-$NIX_VERSION-x86_64-linux.tar.bz2\" | cut -d' ' -f1) \\\n && if [ \"$nix_sha256\" != \"$NIX_SHA256\" ]; then \\\n      echo \"nix sha256 doesn't match. Expecting '$NIX_SHA256', but we got is '$nix_sha256'\"; \\\n      exit 1; \\\n    fi \\\n && tar jxf \"nix-$NIX_VERSION-x86_64-linux.tar.bz2\" \\\n && sh ./nix-$NIX_VERSION-x86_64-linux/install \\\n && . $HOME/.nix-profile/etc/profile.d/nix.sh \\\n #&& nix-env -iA nixpkgs.docker nixpkgs.neovim nixpkgs.git \\\n && nix-build /app/nix/default.nix -A please-cli -o /home/app/result-please-cli \\\n && rm -r $HOME/nix-*-x86_64-linux \\\n && rm -rf $HOME/.cache/nix \\\n && nix-collect-garbage -d \\\n && nix optimise-store && rm \"nix-$NIX_VERSION-x86_64-linux.tar.bz2\"\n\n\nUSER root\n\n\nRUN chown -R root:root /nix \\\n && chmod 1777 /nix/var/nix/profiles/per-user /nix/var/nix/gcroots/per-user \\\n && rm -f /nix/var/nix/profiles/per-user/app/channels* \\\n && mv /nix/var/nix/profiles/per-user/app/profile-1-link /nix/var/nix/profiles/default-1-link \\\n && cd /nix/var/nix/profiles && ln -s default-1-link default && cd $HOME \\\n && /nix/var/nix/profiles/default/bin/nix-env -iA bash -p /nix/var/nix/profiles/sandbox -f /etc/nix/nixpkgs \\\n && /nix/var/nix/profiles/default/bin/nix-env -iA cacert -p /nix/var/nix/profiles/default -f /etc/nix/nixpkgs \\\n && BASH_PATH=$(realpath /nix/var/nix/profiles/sandbox/bin/bash) \\\n && BASH_DEPS=$(sudo \"/nix/var/nix/profiles/default/bin/nix-store\" -qR \"$BASH_PATH\" | tr '\\n' ' ') \\\n && echo \"sandbox = true\" >> /etc/nix/nix.conf \\\n && echo \"sandbox-paths = /bin/sh=$BASH_PATH $BASH_DEPS\">> /etc/nix/nix.conf \\\n && /nix/var/nix/profiles/default/bin/nix-collect-garbage -d \\\n && /nix/var/nix/profiles/default/bin/nix optimise-store\n\n\nCOPY nix/docker/profile.sh /etc/nix/\n\nRUN echo '. /etc/nix/profile.sh' >> $HOME/.bashrc \\\n && mkdir -p /nix/var/nix/gcroots/per-user/app \\\n && chown -R app:app /nix/var/nix/profiles/per-user/app /nix/var/nix/gcroots/per-user/app \\\n && rm -rf $HOME/.nix-*\n\nUSER app\nWORKDIR /app\n\nRUN echo \". /etc/nix/profile.sh\" >> $HOME/.bashrc \\\n && rm -rf $HOME/.nix-*\n\nCOPY nix/docker/entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD /bin/bash\nWORKDIR /app\n\nRUN sudo chown app:app /app -R\n\n#\n# install please command\n#\nENV GIT_SSL_CAINFO=/nix/var/nix/profiles/default/etc/ssl/certs/ca-bundle.crt\nENV NIX_SSL_CERT_FILE=/nix/var/nix/profiles/default/etc/ssl/certs/ca-bundle.crt\nENV LANG=en_US.UTF-8\n\n"
}