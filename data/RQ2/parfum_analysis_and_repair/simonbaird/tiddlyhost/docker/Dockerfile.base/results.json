{
  "startTime": 1674252736116,
  "endTime": 1674252736855,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 2,
        "columnEnd": 51
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "gemUpdateNoDocument",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 54,
        "columnEnd": 114
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 36,
        "columnStart": 24,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 52,
        "columnStart": 24,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Usage:\n#  make build-base\n#\n# or...\n#  docker build -t base --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -f Dockerfile.base .\n#\n\n# See https://hub.docker.com/_/ruby\nFROM ruby:3.1-slim\n\n# The values will be passed in with --build-arg\nARG USER_ID\nARG GROUP_ID\n\n# Just so they aren't hard coded below\nARG APP_USER=appuser\nARG APP_PATH=/opt/app\nARG APP_LOG_PATH=/var/log/app\nARG CERT_PATH=/opt/certs\n\nRUN \\\n  #\n  # Use the specified id so we can read and write directories outside the container\n  addgroup --gid $GROUP_ID $APP_USER && \\\n  adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID $APP_USER && \\\n  #\n  # Create app dir and app log dir\n  mkdir -p $APP_PATH && chown -R $APP_USER:$APP_USER $APP_PATH && \\\n  mkdir -p $APP_LOG_PATH && chown -R $APP_USER:$APP_USER $APP_LOG_PATH\n\nRUN \\\n\n\n  apt-get update -qq && apt-get install -y --no-install-recommends \\\n    curl \\\n    gnupg \\\n  && \\\n  #\n  # Install the package source for yarn and its signing key\n  curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --batch --dearmor > /usr/share/keyrings/yarn-archive-keyring.gpg && \\\n  echo 'deb [signed-by=/usr/share/keyrings/yarn-archive-keyring.gpg] https://dl.yarnpkg.com/debian/ stable main' > \\\n    /etc/apt/sources.list.d/yarn.list && \\\n  #\n  # Now install some required packages including yarn\n  apt-get update -qq && apt-get install -y --no-install-recommends \\\n    postgresql-client \\\n    # For webpacker\n    nodejs yarn \\\n    # For editing, e.g. rails secrets\n    vim-tiny \\\n    # Needed at build time to compile gems with native extensions\n    gcc g++ make libpq-dev && rm -rf /var/lib/apt/lists/*;\nRUN mkdir -p /usr/local/etc \\\n  && { \\\n    echo 'install: --no-document'; \\\n    echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc;\n\nRUN \\\n\n\n  gem update --system --silent --no-document && rm -rf /root/.gem;\n\n# Install script to help start rails\nCOPY --chown=$APP_USER:$APP_USER ./docker/start-rails.sh /bin\n\nWORKDIR $APP_PATH\nUSER $APP_USER\n\n# Install some helpful bash aliases for use inside the container\nCOPY ./docker/dot_bash_aliases /home/$APP_USER/.bash_aliases\n\n# Writes to /home/$APP_USER/.bundle/config\nRUN bundle config set --global path '/opt/bundle'\n\n# Make it easy to connect and do things in the container\n# See docker-compose for how we start rails\nCMD [\"/bin/bash\"]\n"
}