{
  "startTime": 1674215354994,
  "endTime": 1674215357066,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 95
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 226,
        "lineEnd": 227,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 39,
        "columnEnd": 55
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 120,
        "lineEnd": 124,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 139,
        "lineEnd": 144,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 149,
        "lineEnd": 153,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 228,
        "lineEnd": 228,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 229,
        "lineEnd": 229,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 8,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 120,
        "lineEnd": 124,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 139,
        "lineEnd": 144,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 149,
        "lineEnd": 153,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 7,
        "columnEnd": 57
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 8,
        "columnEnd": 96
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "# https://github.com/nginxinc/docker-nginx/blob/master/mainline/alpine/Dockerfile\nFROM alpine:3.10\nLABEL author=\"flytreeleft@crazydan.org\"\n\n\nENV LUA_JIT_VERSION 2.1-20190912\nENV LUA_ROCKS_VERSION 3.2.1\nENV LUA_RESTY_LRUCACHE_VERSION 0.09\nENV LUA_RESTY_CORE_VERSION 0.1.17\nENV LUA_RESTY_STRING_VERSION 0.11\n\nENV NGINX_VERSION 1.15.12\nENV NDK_VERSION 0.3.1\nENV NGX_LUA_VERSION 0.10.15\nENV NGX_GEOIP2_VERSION 2.0\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n    && CONFIG=\"\\\n        --prefix=/etc/nginx \\\n        --sbin-path=/usr/sbin/nginx \\\n        --modules-path=/usr/lib/nginx/modules \\\n        --conf-path=/etc/nginx/nginx.conf \\\n        --error-log-path=/var/log/nginx/error.log \\\n        --http-log-path=/var/log/nginx/access.log \\\n        --pid-path=/var/run/nginx.pid \\\n        --lock-path=/var/run/nginx.lock \\\n        --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n        --user=nginx \\\n        --group=nginx \\\n        --with-ipv6 \\\n        --with-http_ssl_module \\\n        --with-http_realip_module \\\n        --with-http_addition_module \\\n        --with-http_sub_module \\\n        --with-http_dav_module \\\n        --with-http_flv_module \\\n        --with-http_mp4_module \\\n        --with-http_gunzip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_random_index_module \\\n        --with-http_secure_link_module \\\n        --with-http_stub_status_module \\\n        --with-http_auth_request_module \\\n        --with-http_xslt_module=dynamic \\\n        --with-http_image_filter_module=dynamic \\\n        --with-threads \\\n        --with-stream \\\n        --with-stream_ssl_module \\\n        --with-stream_ssl_preread_module \\\n        --with-http_slice_module \\\n        --with-mail \\\n        --with-mail_ssl_module \\\n        --with-file-aio \\\n        --with-http_v2_module \\\n    \" \\\n    && apk add --update --no-cache openssl ca-certificates bash curl \\\n    && update-ca-certificates \\\n    && addgroup -S nginx \\\n    && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n    && apk add --no-cache --virtual .build-deps \\\n        git \\\n        gcc \\\n        libc-dev \\\n        make \\\n        openssl-dev \\\n        pcre-dev \\\n        zlib-dev \\\n        linux-headers \\\n        unzip \\\n        gnupg \\\n        libxslt-dev \\\n        gd-dev \\\n        libmaxminddb \\\n        libmaxminddb-dev \\\n    && curl -fSL https://github.com/openresty/luajit2/archive/v$LUA_JIT_VERSION.tar.gz  -o lua-jit.tar.gz \\\n    && curl -fSL https://github.com/luarocks/luarocks/archive/v$LUA_ROCKS_VERSION.tar.gz  -o lua-rocks.tar.gz \\\n    && curl -fSL https://github.com/openresty/lua-resty-lrucache/archive/v$LUA_RESTY_LRUCACHE_VERSION.tar.gz  -o lua-resty-lrucache.tar.gz \\\n    && curl -fSL https://github.com/openresty/lua-resty-core/archive/v$LUA_RESTY_CORE_VERSION.tar.gz  -o lua-resty-core.tar.gz \\\n    && curl -fSL https://github.com/openresty/lua-resty-string/archive/v$LUA_RESTY_STRING_VERSION.tar.gz  -o lua-resty-string.tar.gz \\\n    && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n    && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n    && curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v$NDK_VERSION.tar.gz  -o ngx_devel_kit.tar.gz \\\n    && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v$NGX_LUA_VERSION.tar.gz  -o lua-nginx-module.tar.gz \\\n    && curl -fSL https://github.com/leev/ngx_http_geoip2_module/archive/$NGX_GEOIP2_VERSION.tar.gz  -o ngx_http_geoip2_module.tar.gz \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && found=''; \\\n    for server in \\\n        ha.pool.sks-keyservers.net \\\n        hkp://keyserver.ubuntu.com:80 \\\n        hkp://p80.pool.sks-keyservers.net:80 \\\n        pgp.mit.edu; do \\\n        \n   \n        echo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n        gpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n       done \\\n    ; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n    gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n    && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n    && mkdir -p /usr/src \\\n    && tar -zxC /usr/src -f lua-jit.tar.gz \\\n    && tar -zxC /usr/src -f lua-rocks.tar.gz \\\n    && tar -zxC /usr/src -f lua-resty-lrucache.tar.gz \\\n    && tar -zxC /usr/src -f lua-resty-core.tar.gz \\\n    && tar -zxC /usr/src -f lua-resty-string.tar.gz \\\n    && tar -zxC /usr/src -f nginx.tar.gz \\\n    && tar -zxC /usr/src -f ngx_devel_kit.tar.gz \\\n    && tar -zxC /usr/src -f lua-nginx-module.tar.gz \\\n    && tar -zxC /usr/src -f ngx_http_geoip2_module.tar.gz \\\n    && rm -f *.tar.gz \\\n    && cd /usr/src/luajit2-$LUA_JIT_VERSION \\\n    && make \\\n    && make install \\\n    && ln -sf /usr/local/bin/luajit /usr/local/bin/lua \\\n    && export LUAJIT_LIB=/usr/local/lib \\\n    && export LUAJIT_INC=/usr/local/include/luajit-2.1 \\\n    && cd /usr/src/luarocks-$LUA_ROCKS_VERSION \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n            --lua-suffix=jit \\\n            --with-lua=/usr/local \\\n            --with-lua-include=$LUAJIT_INC \\\n            --with-lua-lib=$LUAJIT_LIB \\\n    && make build \\\n    && make install \\\n    && cd /usr/src/lua-resty-string-$LUA_RESTY_STRING_VERSION \\\n    && make \\\n    && make install LUA_INCLUDE_DIR=$LUAJIT_INC LUA_LIB_DIR=/usr/local/share/lua/5.1 \\\n    # Install Lua moduels\n    && luarocks install lua-cjson \\\n    && luarocks install lua-resty-http \\\n    && luarocks install lua-resty-session \\\n    && luarocks install lua-resty-jwt \\\n    && luarocks install lua-resty-openidc \\\n    && cp -r /usr/src/lua-resty-lrucache-$LUA_RESTY_LRUCACHE_VERSION/lib/* /usr/local/share/lua/5.1 \\\n    && cp -r /usr/src/lua-resty-core-$LUA_RESTY_CORE_VERSION/lib/* /usr/local/share/lua/5.1 \\\n    && cd /usr/src/nginx-$NGINX_VERSION \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n            --with-debug \\\n            --with-ld-opt=\"-Wl,-rpath,$LUAJIT_LIB\" \\\n            --add-module=/usr/src/ngx_devel_kit-$NDK_VERSION \\\n            --add-module=/usr/src/lua-nginx-module-$NGX_LUA_VERSION \\\n            --add-module=/usr/src/ngx_http_geoip2_module-$NGX_GEOIP2_VERSION \\\n    && make -j$(getconf _NPROCESSORS_ONLN) \\\n    && mv objs/nginx objs/nginx-debug \\\n    && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n    && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n            --with-ld-opt=\"-Wl,-rpath,$LUAJIT_LIB\" \\\n            --add-module=/usr/src/ngx_devel_kit-$NDK_VERSION \\\n            --add-module=/usr/src/lua-nginx-module-$NGX_LUA_VERSION \\\n            --add-module=/usr/src/ngx_http_geoip2_module-$NGX_GEOIP2_VERSION \\\n    && make -j$(getconf _NPROCESSORS_ONLN) \\\n    && make install \\\n    # Note: Keep the '/etc/nginx/html' to prevent 'testing \"/etc/nginx/html\" existence failed' error\n    #&& rm -rf /etc/nginx/html/\n    && mkdir /etc/nginx/conf.d/ \\\n    && mkdir -p /usr/share/nginx/html/ \\\n    && install -m644 html/index.html /usr/share/nginx/html/ \\\n    && install -m644 html/50x.html /usr/share/nginx/html/ \\\n    && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n    && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n    && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n    && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n    && strip /usr/sbin/nginx* \\\n    && strip /usr/lib/nginx/modules/*.so \\\n    && rm -rf /usr/src \\\n\n    # Bring in gettext so we can get `envsubst`, then throw\n    # the rest away. To do this, we need to install `gettext`\n    # then move `envsubst` out of the way so `gettext` can\n    # be deleted completely, then move `envsubst` back.\n    && apk add --no-cache --virtual .gettext gettext \\\n    && mv /usr/bin/envsubst /tmp/ \\\n\n    && runDeps=\"$( \\\n        scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so \\\n                                    /usr/local/bin/luarocks /usr/local/bin/luajit \\\n                                    /usr/local/lib/*.so /tmp/envsubst \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | sort -u \\\n            | xargs -r apk info --installed \\\n            | sort -u \\\n    )\" \\\n    && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n    && apk del .build-deps \\\n    && apk del .gettext \\\n    && mv /tmp/envsubst /usr/local/bin/ \\\n\n    # forward request and error logs to docker log collector\n    #&& ln -sf /dev/stdout /var/log/nginx/access.log\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n\n\nARG enable_gixy=false\n# https://github.com/docker-library/python/blob/master/3.7/alpine3.7/Dockerfile\nRUN set -ex; \\\n    [[ \"${enable_gixy}\" = \"true\" ]] \\\n    && apk add --update --no-cache python3 \\\n    && ln -s /usr/bin/python3 /usr/bin/python \\\n\t&& wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n\t&& python get-pip.py \\\n\t\t--no-cache-dir \\\n\t&& pip --version \\\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' +; \\\n\trm -f get-pip.py \\\n    ; echo \"\"\n# https://github.com/yandex/gixy\nRUN [[ \"${enable_gixy}\" = \"true\" ]] && pip install --no-cache-dir gixy \\\n    ; echo \"\"\n\n\nARG enable_geoip=false\n# https://github.com/leev/ngx_http_geoip2_module\n# http://www.treselle.com/blog/nginx-with-geoip2-maxmind-database-to-fetch-user-geo-location-data/\n# https://dev.maxmind.com/geoip/geoip2/geolite2/\nRUN [[ \"${enable_geoip}\" = \"true\" ]] \\\n    && mkdir -p /etc/nginx/geoip2 /tmp/geoip2 \\\n    && cd /tmp/geoip2 \\\n    && wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz \\\n            https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz \\\n    && tar -zxf GeoLite2-City.tar.gz \\\n    && tar -zxf GeoLite2-Country.tar.gz \\\n    && find . -name \"*.mmdb\" -type f -exec mv {} /etc/nginx/geoip2 \\; \\\n    && cd - && rm -rf /tmp/geoip2 \\\n    ; rm GeoLite2-City.tar.gz echo \"\"\n# https://github.com/dauer/geohash/blob/master/lua/README.md\nRUN [[ \"${enable_geoip}\" = \"true\" ]] \\\n    && luarocks install https://github.com/dauer/geohash/raw/master/lua/geohash-0.9-1.rockspec \\\n    ; echo \"\"\n\nRUN curl -fSL https://github.com/acmesh-official/acme.sh/archive/2.8.5.tar.gz -o acme-sh.tar.gz \\\n    && tar -zxC /opt -f acme-sh.tar.gz \\\n    && mv /opt/acme.sh-2.8.5 /opt/acme.sh-src \\\n    && rm -f acme-sh.tar.gz\n\n\nENV DEBUG=false\nENV DOMAIN=\nENV CERT_EMAIL=\nENV CERT_DIR=/etc/letsencrypt\nENV ENABLE_CUSTOM_ERROR_PAGE=false\nENV DEFAULT_ERROR_PAGES=/usr/share/nginx/error-pages\nENV VHOSTD=/etc/nginx/vhost.d\nENV STREAMD=/etc/nginx/stream.d\nENV EPAGED=/etc/nginx/epage.d\nENV NGINX_LOG=/var/log/nginx\nENV NGINX_SITES_LOG=/var/log/nginx/sites\n\nRUN mkdir -p /etc/nginx/ssl \\\n    && openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048\n\nRUN rm -rf /root/.cache\n\nRUN mkdir -p /var/log/cron /var/log/letsencrypt \\\n        /etc/nginx/lua /etc/nginx/vstream.d \\\n        ${NGINX_LOG} ${NGINX_SITES_LOG}\n#RUN mkdir -p /var/www/html && chown -R nginx:nginx /var/www/html\nRUN rm -f /etc/nginx/conf.d/default.conf\n\nADD config/nginx.conf /etc/nginx/nginx.conf\nADD config/00_vars.conf /etc/nginx/conf.d/00_vars.conf\nADD config/00_log.conf /etc/nginx/conf.d/00_log.conf\nADD config/01_ssl.conf /etc/nginx/conf.d/01_ssl.conf\nADD config/02_proxy.conf /etc/nginx/conf.d/02_proxy.conf\nADD config/03_geoip2.conf /etc/nginx/conf.d/03_geoip2.conf\nADD config/00_log_with_geoip.conf /etc/nginx/conf.d/00_log_with_geoip.conf\nADD config/10_default.conf /etc/nginx/conf.d/10_default.conf\n# NOTE: The other crontab file will not be scaned\nCOPY config/crontab /var/spool/cron/crontabs/root\nADD config/10_stream_acme.conf /etc/nginx/vstream.d/10_stream_acme.conf\n\nADD bin/nginx-utils.sh /usr/bin/nginx-utils.sh\nADD bin/nginx-utils.awk /usr/bin/nginx-utils.awk\nADD bin/build-certs /usr/bin/build-certs\nADD bin/update-certs /usr/bin/update-certs\nADD bin/watch-config /usr/bin/watch-config\nADD bin/entrypoint.sh /entrypoint.sh\n\nADD config/error-pages ${DEFAULT_ERROR_PAGES}\n\nRUN [[ \"${enable_geoip}\" != \"true\" ]] \\\n    && rm -f /etc/nginx/conf.d/*geoip* \\\n    ; echo \"\"\nRUN mkdir -p ${VHOSTD} ${STREAMD} ${CERT_DIR} ${EPAGED}\nRUN chmod +x /usr/bin/build-certs /usr/bin/update-certs \\\n        /usr/bin/watch-config /entrypoint.sh\n\nVOLUME [\"${VHOSTD}\", \"${STREAMD}\", \"${EPAGED}\", \"${CERT_DIR}\"]\n\nEXPOSE 80 443\n\n# CMD & ENTRYPOINT\n## https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact\nENTRYPOINT [\"/entrypoint.sh\"]\n"
}