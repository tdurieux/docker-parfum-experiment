{
  "startTime": 1674255853288,
  "endTime": 1674255854589,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 1,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 1,
        "columnEnd": 30
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Base build image\n\nFROM golang:1.16-alpine AS build_base\n\n# Install some dependencies needed to build the project\nRUN apk add --no-cache git ca-certificates gcc make libc-dev libftdi1-dev libftdi1-static\n\n# Compile libusb from source code because Alpine does not ship a package with\n# libusb as static library.\nRUN apk add --no-cache eudev-dev linux-headers\nRUN mkdir /tmp/libusb && \\\n\tcd /tmp/libusb && \\\n\twget -q https://github.com/libusb/libusb/releases/download/v1.0.24/libusb-1.0.24.tar.bz2 && \\\n\ttar xvf libusb-1.0.24.tar.bz2 && \\\n\tcd libusb-1.0.24 && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-dependency-tracking && \\\n\tmake && \\\n\tmake install && \\\n\tcd / && \\\n\trm -rf /tmp/libusb && rm libusb-1.0.24.tar.bz2\nENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig\n\n# We want to populate the module cache based on the go.{mod,sum} files.\nWORKDIR /src\nCOPY go.mod .\nCOPY go.sum .\n\n# Download all required dependencies. We do this separately from go build\n# so that we don't have to do it any time our source code changes.\nRUN go mod download\n\n# Here we copy the rest of the source code\nCOPY . .\n# And compile the project\nRUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -v -a -tags 'netgo osusergo' -ldflags '-s -w -extldflags \"-static -ludev\"' -o g64drive_linux\n"
}