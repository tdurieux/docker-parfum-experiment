{
  "startTime": 1674248800092,
  "endTime": 1674248800909,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 2,
        "columnEnd": 45
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 80,
        "columnEnd": 101
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM cypress/browsers:node14.17.6-chrome100-ff98 as builder-test-ui\nWORKDIR /usr/src/app\nCOPY package.json yarn.lock ./\nRUN yarn install --frozen-lockfile && yarn cache clean;\nCOPY ./ ./\nCMD ./cypress/run-tests.sh\n\nFROM node:14-alpine3.15 as builder-test-base\nWORKDIR /usr/src/app\nCOPY package.json yarn.lock /usr/src/app/\nRUN yarn install --frozen-lockfile && yarn cache clean;\nCOPY . /usr/src/app\n\nFROM builder-test-base as builder-code-style\nCMD yarn prettier:check && yarn lint:check\n\nFROM builder-test-base as builder-test-unit\nCMD yarn test && mv ./coverage/ /shared/coverage\n\nFROM node:14-alpine3.15 as builder-base\n\nARG version=develop\nENV VERSION=\"${version}\"\n\n# Prepare app directory\nWORKDIR /usr/src/app\n\n# copy package.json only to install angular dependencies first\nCOPY package.json yarn.lock /usr/src/app/\nRUN yarn install --frozen-lockfile && yarn cache clean;\nCOPY . /usr/src/app\n\nFROM builder-base as bridge-builder\nRUN yarn build\n\nFROM node:14-alpine3.15 as bridge-server-builder-base\n\nARG version=develop\nENV VERSION=\"${version}\"\n\n# Prepare app directory\nWORKDIR /usr/src/app/server\n\n# copy package.json only to install dependencies first\nCOPY ./server/package.json ./server/yarn.lock ./\nRUN yarn install --frozen-lockfile && yarn cache clean;\nCOPY ./server ./\nCOPY ./shared /usr/src/app/shared\n\nFROM bridge-server-builder-base as bridge-server-test\nCMD yarn test && \\\n  mv ./coverage/ /shared/coverage\n\nFROM bridge-server-builder-base as bridge-server-builder\nRUN yarn build && \\\n  yarn install --frozen-lockfile --production && yarn cache clean;\n\n# Use a Docker multi-stage build to create a lean production image.\n# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds\nFROM node:14-alpine3.15 as production\nARG version=develop\nLABEL org.opencontainers.image.source=\"https://github.com/keptn/keptn\" \\\n    org.opencontainers.image.url=\"https://keptn.sh\" \\\n    org.opencontainers.image.title=\"Keptn Bridge\" \\\n    org.opencontainers.image.vendor=\"Keptn\" \\\n    org.opencontainers.image.documentation=\"https://keptn.sh/docs/\" \\\n    org.opencontainers.image.licenses=\"Apache-2.0\" \\\n    org.opencontainers.image.version=\"${version}\"\n\nENV VERSION=\"${version}\"\nENV NODE_ENV \"production\"\nENV API_URL \"http://api-gateway-nginx.keptn.svc.cluster.local\"\nENV API_TOKEN \"\"\n\nWORKDIR /usr/src/app\n\n# copy angular output from angularBuilder\nCOPY --from=bridge-builder /usr/src/app/dist /usr/src/app/dist\nCOPY --from=bridge-server-builder /usr/src/app/server/dist /usr/src/app/server/dist\nCOPY --from=bridge-server-builder /usr/src/app/server/package.json /usr/src/app/server/\nCOPY --from=bridge-server-builder /usr/src/app/server/node_modules /usr/src/app/server/node_modules\n\nRUN addgroup mygroup --gid 65532 && adduser -D -G mygroup myuser --uid 65532 && mkdir -p /usr/src/app && chown -R myuser /usr/src/app && rm -rf /usr/src/app\n\n# Set user\nUSER myuser\n\nEXPOSE 3000\nCMD [\"npm\", \"start\", \"--prefix\", \"./server\"]\n"
}