{
  "startTime": 1674252995785,
  "endTime": 1674252997189,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 71,
        "columnStart": 54,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 91,
        "columnStart": 18,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 18,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_BASE=nvidia/cuda:10.1-base-ubuntu18.04\n# Build the public image:\n#   docker build -t horizonrobotics/alf:0.0.3-carla -f Dockerfile.carla .\n# To run the simulator:\n#   docker run -p 2000-2002:2000-2002 --rm --gpus all -it -u carla horizonrobotics/alf:0.0.3-carla\n\n########################## Build Vulkan #################################\n# Adapted from:\n# https://gitlab.com/nvidia/container-images/opengl/-/blob/ubuntu18.04/base/Dockerfile\n# https://gitlab.com/nvidia/container-images/opengl/-/blob/ubuntu18.04/glvnd/runtime/Dockerfile\n# https://gitlab.com/nvidia/container-images/vulkan/-/blob/master/docker/Dockerfile.ubuntu18.04\n\nFROM ubuntu:18.04 as vulkan-khronos\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    git \\\n    libegl1-mesa-dev \\\n    libwayland-dev \\\n    libx11-xcb-dev \\\n    libxkbcommon-dev \\\n    libxrandr-dev \\\n    python3 \\\n    python3-distutils \\\n    wget && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG VULKAN_VERSION=sdk-1.1.121.0\n\n# Download and compile vulkan components\nRUN ln -s /usr/bin/python3 /usr/bin/python && \\\n    git clone https://github.com/KhronosGroup/Vulkan-ValidationLayers.git /opt/vulkan && \\\n    cd /opt/vulkan && git checkout \"${VULKAN_VERSION}\" && \\\n    mkdir build && cd build && ../scripts/update_deps.py && \\\n    cmake -C helper.cmake -DCMAKE_BUILD_TYPE=Release .. && \\\n    cmake --build . && make install && ldconfig && \\\n    mkdir -p /usr/local/lib && cp -a Vulkan-Loader/build/install/lib/* /usr/local/lib && \\\n    mkdir -p /usr/local/include/vulkan && cp -r Vulkan-Headers/build/install/include/vulkan/* /usr/local/include/vulkan && \\\n    mkdir -p /usr/local/share/vulkan/registry && \\\n    cp -r Vulkan-Headers/build/install/share/vulkan/registry/* /usr/local/share/vulkan/registry && \\\n    rm -rf /opt/vulkan\n\nFROM ${CUDA_BASE}\n\nENV NVIDIA_DRIVER_CAPABILITIES compute,graphics,utility\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n    && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/i386-linux-gnu:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\nRUN dpkg --add-architecture i386 && apt-get update && apt-get install -y --no-install-recommends \\\n    libxau6 libxau6:i386 \\\n    libxdmcp6 libxdmcp6:i386 \\\n    libxcb1 libxcb1:i386 \\\n    libxext6 libxext6:i386 \\\n    libx11-6 libx11-6:i386 \\\n    libglvnd0 libglvnd0:i386 \\\n    libgl1 libgl1:i386 \\\n    libglx0 libglx0:i386 \\\n    libegl1 libegl1:i386 \\\n    libgles2 libgles2:i386 \\\n    pkg-config \\\n    libglvnd-dev libglvnd-dev:i386 \\\n    libgl1-mesa-dev libgl1-mesa-dev:i386 \\\n    libegl1-mesa-dev libegl1-mesa-dev:i386 \\\n    libgles2-mesa-dev libgles2-mesa-dev:i386 \\\n    libx11-xcb-dev \\\n    libxkbcommon-dev \\\n    libwayland-dev \\\n    libxrandr-dev \\\n    libegl1-mesa-dev && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=vulkan-khronos /usr/local/bin /usr/local/bin\nCOPY --from=vulkan-khronos /usr/local/lib /usr/local/lib\nCOPY --from=vulkan-khronos /usr/local/include/vulkan /usr/local/include/vulkan\nCOPY --from=vulkan-khronos /usr/local/share/vulkan /usr/local/share/vulkan\nCOPY ./nvidia_icd.json /etc/vulkan/icd.d/nvidia_icd.json\nCOPY ./10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json\n\n###################### ALF dependencies #############################\n# Adapted from: https://github.com/HorizonRobotics/alf/blob/pytorch/.ci-cd/Dockerfile.cpu\n\n# basic software package\nRUN apt update && apt install -y --no-install-recommends \\\n    build-essential \\\n    vim tree wget unzip git \\\n    libxml2 libxml2-dev libxslt1-dev libfreetype6-dev \\\n    dirmngr gnupg2 lsb-release \\\n    xvfb kmod swig patchelf ffmpeg rsync \\\n    libopenmpi-dev libcups2-dev libssl-dev \\\n    python3.7 python3-pip python3.7-dev python3-setuptools && rm -rf /var/lib/apt/lists/*;\n\nRUN python3.7 -m pip install --upgrade pip\n\nRUN ln -sf /usr/bin/python3.7 /usr/bin/python \\\n    && ln -sf /usr/bin/python3.7 /usr/bin/python3\n\nCOPY ./requirements_carla.txt /tmp/requirements.txt\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt \\\n    && rm -rf /tmp/requirements.txt\n\nRUN pip3 install --no-cache-dir git+https://github.com/HorizonRobotics/gin-config.git@50bbde3\n\nRUN pip3 install --no-cache-dir torch==1.8.1+cu101 torchvision==0.9.1+cu101 torchtext==0.9.1 -f https://download.pytorch.org/whl/torch_stable.html\n\n\nRUN pip3 install --no-cache-dir setuptools==45.2.0\n\n# Uncomment below for hobot cluster usage\n#COPY ./set_env.sh /opt/set_env.sh\n\n######################### Install Carla #########################\n# Adapted from: https://github.com/carla-simulator/carla/blob/master/Util/Docker/Release.Dockerfile\n\nRUN apt update && apt install -y libsdl2-2.0 --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# clean\nRUN  rm -rf /var/lib/apt/lists/* \\\n     && rm -rf /tmp/package \\\n     && rm -rf /install\n\nRUN useradd -m carla\nUSER carla\nWORKDIR /home/carla\n\nRUN wget https://carla-releases.s3.eu-west-3.amazonaws.com/Linux/CARLA_0.9.9.tar.gz \\\n    && tar zxf CARLA_0.9.9.tar.gz \\\n    && rm CARLA_0.9.9.tar.gz\nRUN cd Import && wget https://carla-releases.s3.eu-west-3.amazonaws.com/Linux/AdditionalMaps_0.9.9.tar.gz\nRUN sh ImportAssets.sh && rm /home/carla/Import/AdditionalMaps_0.9.9.tar.gz\n\nUSER root\nRUN cd /home/carla/PythonAPI/carla/dist && python3.7 -m easy_install carla-0.9.9-py3.7-linux-x86_64.egg\nRUN pip3 install --no-cache-dir -r /home/carla/PythonAPI/carla/requirements.txt\n\n# On desktop we can't run UE4 in root. Comment the line below for cluster usage\nUSER carla\n\nENV SDL_VIDEODRIVER=offscreen\nENV PYTHONPATH=/home/carla/PythonAPI/carla\n\nCMD /bin/bash CarlaUE4.sh\n"
}