{
  "startTime": 1674215168602,
  "endTime": 1674215169383,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 36,
        "columnEnd": 52
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "# => frontend build environment\nFROM node:13.12.0-alpine as frontend-builder\n\n# install git\nRUN apk update\nRUN apk add --no-cache git\n\nWORKDIR /frontend\nENV PATH /frontend/node_modules/.bin:$PATH\nCOPY frontend/package.json ./\nCOPY frontend/yarn.lock ./\nRUN yarn install --pure-lockfile && yarn cache clean;\n\nCOPY frontend ./\nRUN yarn build && yarn cache clean;\n\n# => backend build env\nFROM golang:1.14 as backend-builder\n\nWORKDIR /workspace\nCOPY ./go.mod ./go.sum ./\nRUN go mod download\n\nCOPY . .\n\nRUN make linux-amd64\nRUN make linux-arm64\nRUN echo 'nobody:x:65534:65534:Nobody:/:' > passwd.minimal\n\n# => Run container\nFROM ubuntu:18.04\nRUN apt-get update && apt-get install --no-install-recommends -y ffmpeg && rm -rf /var/lib/apt/lists/*;\nCOPY --from=backend-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=backend-builder /workspace/dist/linux/linux-amd64 /linux-amd64\nCOPY --from=backend-builder /workspace/dist/linux/linux-arm64 /linux-arm64\nCOPY --from=backend-builder /workspace/passwd.minimal /etc/passwd\nCOPY --from=frontend-builder /frontend/build /frontend/build\n\nENTRYPOINT [\"/linux-amd64\"]\n"
}