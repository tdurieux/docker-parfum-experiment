{
  "startTime": 1674250048204,
  "endTime": 1674250048925,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 6,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 73,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 73,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic\n\nENV DEBIAN_FRONTEND noninteractive\n\nARG APT_MIRROR=none\n\nRUN if [ ${APT_MIRROR} != none ] ; then \\\n        sed -i s/ports.ubuntu.com/${APT_MIRROR}/ /etc/apt/sources.list ; \\\n        apt-get clean all ; \\\n    fi\n\n# Build tools\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        curl \\\n        gettext-base \\\n        libgd-dev \\\n        libgeoip-dev \\\n        libncurses5-dev \\\n        libperl-dev \\\n        libreadline-dev \\\n        libxslt1-dev \\\n        libpasswdqc-dev \\\n        make \\\n        perl \\\n        unzip \\\n        zlib1g-dev \\\n        libssl-dev \\\n        git \\\n        m4 \\\n        libpcre3 \\\n        libpcre3-dev \\\n        libyaml-dev && rm -rf /var/lib/apt/lists/*;\n\n# LuaRocks - OpenSSL - OpenResty\nARG LUAROCKS\nARG OPENSSL\nARG OPENRESTY\nARG KONG_NGX_MODULE\nARG KONG_BUILD_TOOLS\nARG RESTY_EVENTS\nARG GO_VERSION\nARG KONG_GO_PLUGINSERVER\nARG KONG_LIBGMP\nARG KONG_LIBNETTLE\nARG KONG_LIBJQ\nARG RESTY_LMDB\nARG RESTY_WEBSOCKET\n\nENV BUILD_PREFIX=/build\nENV OPENSSL_INSTALL=${BUILD_PREFIX}/openssl\nENV OPENRESTY_INSTALL=${BUILD_PREFIX}/openresty\nENV LUAROCKS_INSTALL=${BUILD_PREFIX}/luarocks\nENV LIBGMP_INSTALL=${BUILD_PREFIX}/libgmp\nENV LIBNETTLE_INSTALL=${BUILD_PREFIX}/libnettle\nENV LIBJQ_INSTALL=${BUILD_PREFIX}/libjq\n\nRUN mkdir -p ${BUILD_PREFIX}\nCOPY build.sh ${BUILD_PREFIX}\nCOPY silent ${BUILD_PREFIX}/silent\nRUN ${BUILD_PREFIX}/build.sh\n\nENV OPENSSL_DIR=${OPENSSL_INSTALL}\nENV OPENSSL_LIBDIR=${OPENSSL_INSTALL}\n\nENV PATH=$PATH:${OPENRESTY_INSTALL}/nginx/sbin:${OPENRESTY_INSTALL}/bin:${LUAROCKS_INSTALL}/bin\nENV PATH=${OPENSSL_INSTALL}/bin:$PATH\nENV LD_LIBRARY_PATH=${OPENSSL_INSTALL}/lib:${LIBGMP_INSTALL}/lib:${LIBNETTLE_INSTALL}/lib:${LIBJQ_INSTALL}/lib:${LD_LIBRARY_PATH}\n\n# Extra tools\nRUN apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y \\\n        jq \\\n        httpie \\\n        iputils-ping \\\n        less \\\n        cpanminus \\\n        iproute2 \\\n        net-tools && rm -rf /var/lib/apt/lists/*;\n\n# Go and go-pluginserver\nENV GO_VERSION=${GO_VERSION}\nENV GOROOT=${BUILD_PREFIX}/go\nENV GOPATH=${BUILD_PREFIX}/gopath\nENV PATH=$GOPATH/bin:${GOROOT}/bin:$PATH\nRUN mkdir -p ${GOROOT} ${GOPATH}\n\nRUN [ ! -z ${GO_VERSION} ] && ( curl -f -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz -o /tmp/go.tar.gz && \\\n\t\t\ttar -xf /tmp/go.tar.gz -C ${GOROOT} --strip-components=1 && \\\n      rm /tmp/go.tar.gz) || \\\n    echo \"go is not required\"\n\nENV KONG_GO_PLUGINSERVER_INSTALL=${BUILD_PREFIX}/gps\nENV KONG_GO_PLUGINSERVER=${KONG_GO_PLUGINSERVER}\n\nRUN [ ! -z ${KONG_GO_PLUGINSERVER} ] && ( \\\n      go version && \\\n\t  mkdir ${KONG_GO_PLUGINSERVER_INSTALL} && \\\n      cd ${KONG_GO_PLUGINSERVER_INSTALL} && \\\n\t  go mod init go-pluginserver && \\\n\t  go get -d -v github.com/Kong/go-pluginserver@${KONG_GO_PLUGINSERVER} && \\\n\t  go install -ldflags=\"-s -w -X main.version=${KONG_GO_PLUGINSERVER}\" ... && \\\n\t  cd && \\\n      rm -r ${KONG_GO_PLUGINSERVER_INSTALL} && \\\n\t  go-pluginserver --version ) || \\\n    echo \"Kong go pluginserver is not required\"\n\n# ---------------\n# Test Enablement\n# ---------------\n# Add vegeta HTTP load testing tool for executing stress tests\nRUN [ ! -z ${GO_VERSION} ] && ( \\\n      go get -u github.com/tsenart/vegeta && \\\n      vegeta -version ) || \\\n    echo \"go has not been installed; vegeta requires golang\"\n\nRUN cpanm --notest Test::Nginx\nRUN cpanm --notest local::lib\n\nCOPY 42-kong-envs.sh /etc/profile.d/\n\nWORKDIR /kong\n"
}