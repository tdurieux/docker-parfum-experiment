{
  "startTime": 1674253519033,
  "endTime": 1674253520037,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "FROM rust:bullseye\n\n### Install Node.js\nRUN apt-get update\nRUN curl -f -sL https://deb.nodesource.com/setup_15.x | bash -\nRUN apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\nRUN node --version\n\n### Checkout Stacks 2.0 src\nARG STACKS_V2_BRANCH\nRUN git clone --depth 1 --branch $STACKS_V2_BRANCH https://github.com/blockstack/stacks-blockchain.git /stacks2.0\nWORKDIR /stacks2.0/testnet/stacks-node\nRUN cargo fetch\n\n### Install Stacks 1.0\nRUN git clone --depth 1 --branch v1-migration https://github.com/blockstack/stacks-blockchain.git /stacks1.0\nRUN python --version\nRUN apt-get install --no-install-recommends -y python-setuptools python-pip rng-tools libgmp3-dev && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir pyparsing\nWORKDIR /stacks1.0\nRUN python ./setup.py build\nRUN python ./setup.py install\nRUN blockstack-core version\n\n### Sync Stacks 1.0 chain\nRUN blockstack-core fast_sync --working-dir /stacks1.0-chain\n\n# Use sqlite cli to mark the chain as exported/frozen so Stacks 1.0 does not process new transactions\nRUN apt-get install --no-install-recommends -y sqlite3 && rm -rf /var/lib/apt/lists/*;\nRUN sqlite3 /stacks1.0-chain/blockstack-server.db 'UPDATE v2_upgrade_signal SET threshold_block_id = 1 WHERE id = 1'\nRUN sqlite3 /stacks1.0-chain/blockstack-server.db 'UPDATE v2_upgrade_signal SET import_block_id = 1 WHERE id = 1'\n\n# Perform fast sync snapshot\nRUN blockstack-core fast_sync_snapshot 0 /stacks1.0-snapshot --working-dir /stacks1.0-chain > fast_sync_snapshot.log\n\n# Extract the snapshotted block height and consensus hash\nRUN cat fast_sync_snapshot.log | grep \"consensus hash\" | tail -1 | sed \"s/.*at block \\(.*\\) with consensus hash \\(.*\\).*/\\1/\" > export_block\nRUN cat fast_sync_snapshot.log | grep \"consensus hash\" | tail -1 | sed \"s/.*at block \\(.*\\) with consensus hash \\(.*\\).*/\\2/\" > consensus_hash\nRUN echo \"Block $(cat export_block) hash $(cat consensus_hash)\"\n\n# Generate a chainstate export from the snapshot\nRUN blockstack-core export_migration_json /stacks1.0-snapshot $(cat export_block) $(cat consensus_hash) /stacks1.0-export --working-dir /stacks1.0-chain\n\n# Copy exported data into Stacks 2.0 src\nRUN cp /stacks1.0-export/chainstate.txt /stacks2.0/stx-genesis/chainstate.txt\nRUN cp /stacks1.0-export/chainstate.txt.sha256 /stacks2.0/stx-genesis/chainstate.txt.sha256\n\n# Build Stacks 2.0 with exported data\nWORKDIR /stacks2.0/testnet/stacks-node\nRUN cargo build --release\nRUN cp /stacks2.0/target/release/stacks-node /bin/stacks-node\nRUN stacks-node version\n\n# Dump 1000 high activity / balance addresses\nWORKDIR /test\nRUN echo \"select address, (cast(credit_value as integer) - cast(debit_value as integer)) as amount from ( \\\n            select * \\\n            from accounts \\\n            where type = \\\"STACKS\\\" \\\n            group by address \\\n            having block_id = max(block_id) and vtxindex = max(vtxindex) \\\n            order by block_id DESC, vtxindex DESC \\\n            ) amounts \\\n        order by amount DESC, address \\\n        limit 1000\" | sqlite3 /stacks1.0-chain/blockstack-server.db > check_addrs.txt\nRUN cat check_addrs.txt\n\n# Dump ~1000 randomly sampled vesting schedules\nRUN echo \"\\\n        SELECT address, vesting_value, block_id FROM account_vesting \\\n        WHERE address IN (SELECT address FROM account_vesting ORDER BY RANDOM() LIMIT 35) \\\n        ORDER BY address, block_id \\\n    \" | sqlite3 /stacks1.0-chain/blockstack-server.db > check_lockups.txt\nRUN cat check_lockups.txt\n\n# Run the js test script\nCOPY test ./\nRUN npm i && npm cache clean --force;\nRUN npm test\n"
}