{
  "startTime": 1674218987778,
  "endTime": 1674218988689,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 1,
        "columnEnd": 20
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 164,
        "columnStart": 1,
        "columnEnd": 2
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 1,
        "columnEnd": 78
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 109,
        "lineEnd": 156,
        "columnStart": 1,
        "columnEnd": 2
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 1,
        "columnEnd": 48
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 66
      }
    }
  ],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM debian:bullseye-slim\n\nRUN set -eux; \\\n# add backports for (potentially) newer QEMU firmware packages\n\tsuite=\"$(awk '$1 == \"deb\" { print $3; exit }' /etc/apt/sources.list)\"; \\\n\techo \"deb http://deb.debian.org/debian $suite-backports main\" > /etc/apt/sources.list.d/backports.list; \\\n# and add APT pinning to ensure we don't accidentally get QEMU from Debian\n\t{ \\\n\t\techo 'Package: src:edk2'; \\\n\t\techo 'Pin: release a=*-backports'; \\\n\t\techo 'Pin-Priority: 600'; \\\n\t\techo; \\\n\t\techo 'Package: src:qemu'; \\\n\t\techo 'Pin: version *'; \\\n\t\techo 'Pin-Priority: -10'; \\\n\t} > /etc/apt/preferences.d/qemu.pref; \\\n\tapt-get update; \\\n# https://github.com/tianon/docker-qemu/issues/30\n\tapt-get install -y --no-install-recommends ca-certificates; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tovmf \\\n\t\tovmf-ia32 \\\n\t\tqemu-efi-aarch64 \\\n\t\tqemu-efi-arm \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\nCOPY *.patch /qemu-patches/\n\n# https://wiki.qemu.org/SecurityProcess\nENV QEMU_KEYS \\\n# Michael Roth\n\t\tCEACC9E15534EBABB82D3FA03353C9CEF108B584\n# https://wiki.qemu.org/Planning/ReleaseProcess#Sign_the_resulting_tarball_with_GPG: (they get signed by whoever is making the release)\n\n# https://www.qemu.org/download/#source\n# https://download.qemu.org/?C=M;O=D\nENV QEMU_VERSION 6.1.1\nENV QEMU_URL https://download.qemu.org/qemu-6.1.1.tar.xz\n\nRUN set -eux; \\\n\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tgnupg dirmngr \\\n\t\twget \\\n\t\txz-utils \\\n\t\t\\\n\t\tpatch \\\n\t\t\\\n\t\tbzip2 \\\n\t\tgcc \\\n\t\tgnutls-dev \\\n\t\tlibaio-dev \\\n\t\tlibbz2-dev \\\n\t\tlibc-dev \\\n\t\tlibcap-dev \\\n\t\tlibcap-ng-dev \\\n\t\tlibcurl4-gnutls-dev \\\n\t\tlibglib2.0-dev \\\n\t\tlibiscsi-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibncursesw5-dev \\\n\t\tlibnfs-dev \\\n\t\tlibnuma-dev \\\n\t\tlibpixman-1-dev \\\n\t\tlibpng-dev \\\n\t\tlibrbd-dev \\\n\t\tlibseccomp-dev \\\n\t\tlibssh-dev \\\n\t\tlibusb-1.0-0-dev \\\n\t\tlibusbredirparser-dev \\\n\t\tlibxen-dev \\\n\t\tmake \\\n\t\tpkg-config \\\n\t\tpython3 \\\n\t\tzlib1g-dev \\\n# https://wiki.qemu.org/ChangeLog/5.2#Build_Information\n\t\tninja-build \\\n\t\tpython3-setuptools \\\n# https://www.qemu.org/2021/08/22/fuse-blkexport/\n\t\tlibfuse3-dev \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\ttarball=\"$(basename \"$QEMU_URL\")\"; \\\n\twget -O \"$tarball.sig\" \"$QEMU_URL.sig\"; \\\n\twget -O \"$tarball\" \"$QEMU_URL\" --progress=dot:giga; \\\n\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tfor key in $QEMU_KEYS; do \\\n\t\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\"; \\\n\tdone; \\\n\tgpg --batch --verify \"$tarball.sig\" \"$tarball\"; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\n\tmkdir /usr/src/qemu; \\\n\ttar -xf \"$tarball\" -C /usr/src/qemu --strip-components=1; \\\n\trm \"$tarball\" \"$tarball.sig\"; \\\n\n\tcd /usr/src/qemu; \\\n\n\tfor p in /qemu-patches/*.patch; do \\\n\t\tpatch --strip 1 --input \"$p\"; \\\n\tdone; \\\n\trm -rf /qemu-patches; \\\n\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --help; \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n# let's add a link to our source code in the output of \"--version\" in case our users end up filing bugs against the QEMU project O:)\n\t\t--with-pkgversion='https://github.com/tianon/docker-qemu' \\\n\t\t--target-list=' \\\n# system targets\n# (https://sources.debian.org/src/qemu/buster/debian/rules/#L59-L63, slimmed)\n\t\t\ti386-softmmu x86_64-softmmu aarch64-softmmu arm-softmmu m68k-softmmu \\\n\t\t\tmips64-softmmu mips64el-softmmu ppc64-softmmu riscv64-softmmu \\\n\t\t\tsparc64-softmmu s390x-softmmu \\\n\t\t' \\\n# let's point \"firmware path\" to Debian's value so we get access to \"OVMF.fd\" and friends more easily\n\t\t--firmwarepath=/usr/share/qemu:/usr/share/seabios:/usr/lib/ipxe/qemu \\\n# https://salsa.debian.org/qemu-team/qemu/-/blob/058ab4ec8623766b50055c8c56d0d5448d52fb0a/debian/rules#L38\n\t\t--disable-docs \\\n\t\t--disable-gtk --disable-vte \\\n\t\t--disable-sdl \\\n\t\t--enable-attr \\\n\t\t--enable-bzip2 \\\n\t\t--enable-cap-ng \\\n\t\t--enable-curl \\\n\t\t--enable-curses \\\n\t\t--enable-fdt \\\n\t\t--enable-gnutls \\\n\t\t--enable-kvm \\\n\t\t--enable-libiscsi \\\n\t\t--enable-libnfs \\\n\t\t--enable-libssh \\\n\t\t--enable-libusb \\\n\t\t--enable-linux-aio \\\n\t\t--enable-modules \\\n\t\t--enable-numa \\\n\t\t--enable-rbd \\\n\t\t--enable-seccomp \\\n\t\t--enable-tools \\\n\t\t--enable-usb-redir \\\n\t\t--enable-vhost-net \\\n\t\t--enable-vhost-user \\\n\t\t--enable-vhost-vsock \\\n\t\t--enable-virtfs \\\n\t\t--enable-vnc \\\n\t\t--enable-vnc-jpeg \\\n\t\t--enable-vnc-png \\\n\t\t--enable-xen \\\n# rbd support is enabled, but \"librbd1\" is not included since it adds ~60MB and is version-sensitive (https://github.com/tianon/docker-qemu/pull/11#issuecomment-689816553)\n#\t\t--enable-vde \\\n# https://www.qemu.org/2021/08/22/fuse-blkexport/\n\t\t--enable-fuse \\\n\t; \\\n\tmake -j \"$(nproc)\"; \\\n\tmake install; \\\n\n\tcd /; \\\n\trm -rf /usr/src/qemu; \\\n\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n\tfind /usr/local \\\n\t\t-type f \\\n\t\t\\( -executable -o -name '*.so' \\) \\\n# rbd support is enabled, but \"librbd1\" is not included since it adds ~60MB and is version-sensitive (https://github.com/tianon/docker-qemu/pull/11#issuecomment-689816553)\n\t\t-not -name 'block-rbd.so' \\\n\t\t-exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { print $(NF-1) }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\n# basic smoke test\n\tqemu-img --version\n\nSTOPSIGNAL SIGHUP\n\nEXPOSE 22\nEXPOSE 5900\n\nCOPY start-qemu /usr/local/bin/\nCMD [\"start-qemu\"]\n"
}