{
  "startTime": 1674218599458,
  "endTime": 1674218600357,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 1,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 90,
        "columnStart": 1,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 1,
        "columnEnd": 99
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 1,
        "columnEnd": 50
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 3,
        "columnEnd": 36
      }
    }
  ],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.15\n\n# https://ftp.gnu.org/gnu/bash/?C=M;O=D\nENV _BASH_VERSION 3.0.22\nENV _BASH_BASELINE 3.0.16\nENV _BASH_BASELINE_PATCH 16\n# https://ftp.gnu.org/gnu/bash/bash-3.0-patches/?C=M;O=D\nENV _BASH_LATEST_PATCH 22\n# prefixed with \"_\" since \"$BASH...\" have meaning in Bash parlance\n\nRUN set -eux; \\\n\n\tapk add --no-cache --virtual .build-deps \\\n\t\tbison \\\n\t\tcoreutils \\\n\t\tdpkg-dev dpkg \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tncurses-dev \\\n\t\ttar \\\n\t; \\\n\n\twget -O bash.tar.gz \"https://ftp.gnu.org/gnu/bash/bash-$_BASH_BASELINE.tar.gz\"; \\\n\twget -O bash.tar.gz.sig \"https://ftp.gnu.org/gnu/bash/bash-$_BASH_BASELINE.tar.gz.sig\"; \\\n\n\t: \"${_BASH_BASELINE_PATCH:=0}\" \"${_BASH_LATEST_PATCH:=0}\"; \\\n\tif [ \"$_BASH_LATEST_PATCH\" -gt \"$_BASH_BASELINE_PATCH\" ]; then \\\n\t\tmkdir -p bash-patches; \\\n\t\tfirst=\"$(printf '%03d' \"$(( _BASH_BASELINE_PATCH + 1 ))\")\"; \\\n\t\tlast=\"$(printf '%03d' \"$_BASH_LATEST_PATCH\")\"; \\\n\t\tmajorMinor=\"${_BASH_VERSION%.*}\"; \\\n\t\tfor patch in $(seq -w \"$first\" \"$last\"); do \\\n\t\t\turl=\"https://ftp.gnu.org/gnu/bash/bash-$majorMinor-patches/bash${majorMinor//./}-$patch\"; \\\n\t\t\twget -O \"bash-patches/$patch\" \"$url\"; \\\n\t\t\twget -O \"bash-patches/$patch.sig\" \"$url.sig\"; \\\n\t\tdone; \\\n\tfi; \\\n\n\tapk add --no-cache --virtual .gpg-deps gnupg; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n# gpg: key 64EA74AB: public key \"Chet Ramey <chet@cwru.edu>\" imported\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys 7C0135FB088AAF6C66C650B9BB5869F064EA74AB; \\\n\tgpg --batch --verify bash.tar.gz.sig bash.tar.gz; \\\n\trm bash.tar.gz.sig; \\\n\tif [ -d bash-patches ]; then \\\n\t\tfor sig in bash-patches/*.sig; do \\\n\t\t\tp=\"${sig%.sig}\"; \\\n\t\t\tgpg --batch --verify \"$sig\" \"$p\"; \\\n\t\t\trm \"$sig\"; \\\n\t\tdone; \\\n\tfi; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\tapk del --no-network .gpg-deps; \\\n\n\tmkdir -p /usr/src/bash; \\\n\ttar \\\n\t\t--extract \\\n\t\t--file=bash.tar.gz \\\n\t\t--strip-components=1 \\\n\t\t--directory=/usr/src/bash \\\n\t; \\\n\trm bash.tar.gz; \\\n\n\tif [ -d bash-patches ]; then \\\n\t\tapk add --no-cache --virtual .patch-deps patch; \\\n\t\tfor p in bash-patches/*; do \\\n\t\t\tpatch \\\n\t\t\t\t--directory=/usr/src/bash \\\n\t\t\t\t--input=\"$(readlink -f \"$p\")\" \\\n\t\t\t\t--strip=0 \\\n\t\t\t; \\\n\t\t\trm \"$p\"; \\\n\t\tdone; \\\n\t\trmdir bash-patches; \\\n\t\tapk del --no-network .patch-deps; \\\n\tfi; \\\n\n\tcd /usr/src/bash; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n# update \"config.guess\" and \"config.sub\" to get more aggressively inclusive architecture support\n\tfor f in config.guess config.sub; do \\\n\t\twget -O \"support/$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \\\n\tdone; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-readline \\\n\t\t--with-curses \\\n# musl does not implement brk/sbrk (they simply return -ENOMEM)\n#   bash: xmalloc: locale.c:81: cannot allocate 18 bytes (0 bytes allocated)\n\t\t--without-bash-malloc \\\n\t|| { \\\n\t\tcat >&2 config.log; \\\n\t\tfalse; \\\n\t}; \\\n# parallel jobs workaround borrowed from Alpine :)\n\tmake y.tab.c; make builtins/libbuiltins.a; \\\n\tmake -j \"$(nproc)\"; \\\n\tmake install; \\\n\tcd /; \\\n\trm -r /usr/src/bash; \\\n\n# delete a few installed bits for smaller image size\n\trm -rf \\\n\t\t/usr/local/share/doc/bash/*.html \\\n\t\t/usr/local/share/info \\\n\t\t/usr/local/share/locale \\\n\t\t/usr/local/share/man \\\n\t; \\\n\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --no-network --virtual .bash-rundeps $runDeps; \\\n\tapk del --no-network .build-deps; \\\n\n\t[ \"$(which bash)\" = '/usr/local/bin/bash' ]; \\\n\tbash --version; \\\n# for some reason, 3.0.xx manifests as 3.00.xx (hence the extra \"0\" added in the following check)\n\t[ \"$(bash -c 'echo \"${BASH_VERSION%%[^0-9.]*}\"')\" = \"${_BASH_VERSION//.0./.00.}\" ]; \\\n\tbash -c 'help' > /dev/null\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"bash\"]\n"
}