{
  "startTime": 1674251446903,
  "endTime": 1674251447550,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 150
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 144
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 149
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Defining environment\nARG APP_ENV=prod\n\nFROM alpine:3.14 AS base\n\nENV DOCKERIZE_VERSION v0.6.1\n\n# Upgrade Alpine and base packages\nRUN apk --no-cache --update-cache --available upgrade \\\n    && if [ $(arch) = \"aarch64\" ]; then \\\n       DOCKERIZE_ARCH='aarch64';\\\n    elif [ $(arch) = \"x86_64\" ]; then \\\n      DOCKERIZE_ARCH='amd64'; \\\n    else \\\n      echo >&2 \"Unsupported architecture $(arch)\" ; exit 1; \\\n    fi \\\n    && apk --no-cache add tar curl openjdk8-jre bash coreutils gcompat \\\n    && curl -f https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-runner/9.4.46.v20220331/jetty-runner-9.4.46.v20220331.jar --output jetty-runner.jar \\\n    && curl -f https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-jmx/9.4.46.v20220331/jetty-jmx-9.4.46.v20220331.jar --output jetty-jmx.jar \\\n    && curl -f https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-util/9.4.46.v20220331/jetty-util-9.4.46.v20220331.jar --output jetty-util.jar \\\n    && wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.4.1/opentelemetry-javaagent-all.jar \\\n    && wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.16.1/jmx_prometheus_javaagent-0.16.1.jar -O jmx_prometheus_javaagent.jar \\\n    && cp /usr/lib/jvm/java-1.8-openjdk/jre/lib/security/cacerts /tmp/kafka.client.truststore.jks \\\n    && curl -f -L https://github.com/treff7es/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-${DOCKERIZE_ARCH}-$DOCKERIZE_VERSION.tar.gz | tar -C /usr/local/bin -xzv\n\nFROM --platform=$BUILDPLATFORM alpine:3.14 AS prod-build\n\n# Upgrade Alpine and base packages\nRUN apk --no-cache --update-cache --available upgrade \\\n    && apk --no-cache add openjdk8 perl\n\nCOPY . /datahub-src\nRUN cd /datahub-src && ./gradlew :metadata-service:war:build -x test\nRUN cp /datahub-src/metadata-service/war/build/libs/war.war /war.war\n\nFROM base as prod-install\nCOPY --from=prod-build /war.war /datahub/datahub-gms/bin/war.war\nCOPY --from=prod-build /datahub-src/metadata-models/src/main/resources/entity-registry.yml /datahub/datahub-gms/resources/entity-registry.yml\nCOPY --from=prod-build /datahub-src/docker/datahub-gms/start.sh /datahub/datahub-gms/scripts/start.sh\nCOPY --from=prod-build /datahub-src/docker/datahub-gms/jetty.xml /datahub/datahub-gms/scripts/jetty.xml\nCOPY --from=prod-build /datahub-src/docker/monitoring/client-prometheus-config.yaml /datahub/datahub-gms/scripts/prometheus-config.yaml\nRUN chmod +x /datahub/datahub-gms/scripts/start.sh\n\nFROM base as dev-install\n# Dummy stage for development. Assumes code is built on your machine and mounted to this image.\n# See this excellent thread https://github.com/docker/cli/issues/1134\n\nFROM ${APP_ENV}-install as final\n\nRUN addgroup -S datahub && adduser -S datahub -G datahub\nUSER datahub\n\nENV JMX_OPTS=\"\"\nENV JAVA_OPTS=\"\"\n\nEXPOSE 8080\n\nHEALTHCHECK --start-period=2m --retries=4 CMD curl --fail http://localhost:8080/health || exit 1\n\nCMD /datahub/datahub-gms/scripts/start.sh\n"
}