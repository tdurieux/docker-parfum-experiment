{
  "startTime": 1674248753959,
  "endTime": 1674248755234,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 18,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.8.12-alpine as builder\n\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\nWORKDIR /usr/src/app\n\nRUN apk update \\\n    && apk add --no-cache --virtual build-deps gcc python3-dev musl-dev \\\n    && apk add --no-cache postgresql \\\n    && apk add --no-cache postgresql-dev \\\n    && apk add --no-cache jpeg-dev zlib-dev libjpeg\n\nRUN pip install --no-cache-dir --upgrade pip\nCOPY ./requirements-prod.txt .\nRUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements-prod.txt\n\n############################\n\nFROM python:3.8.12-alpine\n\nRUN addgroup --gid 1017 django_g && adduser django -S  --disabled-password --ingroup django_g\n\nENV APP_DIR=/usr/src/app\nWORKDIR $APP_DIR\n\nRUN apk update && apk add --no-cache libpq libjpeg\nCOPY --from=builder /usr/src/app/wheels /wheels\nCOPY --from=builder /usr/src/app/requirements-prod.txt .\nRUN pip install --no-cache-dir --no-cache /wheels/*\n\nENV GOSU_VERSION 1.12\nRUN set -eux; \\\n\t\\\n\tapk add --no-cache --virtual .gosu-deps \\\n\t\tca-certificates \\\n\t\tdpkg \\\n\t\tgnupg \\\n\t; \\\n\t\\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\t\\\n# verify the signature\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tcommand -v gpgconf && gpgconf --kill all || :; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\t\\\n# clean up fetch dependencies\n\tapk del --no-network .gosu-deps; \\\n\t\\\n\tchmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n\tgosu --version; \\\n\tgosu nobody true\n\nCOPY . .\n\nRUN mkdir -p media static\n\nENTRYPOINT [\"/usr/src/app/scripts/entrypoint.sh\"]\n"
}