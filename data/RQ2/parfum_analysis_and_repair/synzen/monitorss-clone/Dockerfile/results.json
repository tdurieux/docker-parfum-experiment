{
  "startTime": 1674250717408,
  "endTime": 1674250718644,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 6,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 6,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12-stretch AS build\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        g++ \\\n        git \\\n        make \\\n        python \\\n    && mkdir -p /usr/src/node_modules \\\n    && chown -R node:node /usr/src && rm -rf /usr/src/node_modules && rm -rf /var/lib/apt/lists/*;\nWORKDIR /usr/src\n# Copy the package.json first before copying app\nCOPY package*.json ./\nUSER node\n# If package.json hasn't changed, Docker uses same image layer, and npm install\n# will be skipped since Docker assumes output is the same as before\nRUN npm install && npm cache clean --force;\n\n\nFROM node:12-alpine\n\nRUN mkdir /app \\\n    && chown -R node:node /app\nWORKDIR /app\nCOPY --from=build /usr/src .\n# Copy the application from host machine directory argument of docker build\n# to virtual machine\nCOPY --chown=node:node . .\nUSER node\nENV DRSS_BOT_TOKEN='drss_docker_token' \\\n    DRSS_DATABASE_URI='mongodb://mongo:27017/rss'\nCMD [\"node\", \"server.js\"]\n"
}