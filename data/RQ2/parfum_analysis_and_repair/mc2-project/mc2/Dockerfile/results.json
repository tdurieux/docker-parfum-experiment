{
  "startTime": 1674251675205,
  "endTime": 1674251676334,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 9,
        "columnEnd": 167
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 9,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 9,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 9,
        "columnEnd": 167
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 9,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 9,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 9,
        "columnEnd": 167
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 9,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 9,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 9,
        "columnEnd": 191
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 9,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 9,
        "columnEnd": 95
      }
    }
  ],
  "repairedDockerfile": "# Using Ubuntu 18.04 image\nFROM ubuntu:18.04\n\nUSER root\n\nRUN mkdir -p /mc2/data\n\n######################\n# Install MC2 Client #\n######################\n\n# Copy the current directory contents into the container\nRUN mkdir -p /mc2/client\nCOPY . /mc2/client\n\n# Install wget\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y wget sudo gnupg2 git vim && rm -rf /var/lib/apt/lists/*;\nRUN useradd -m docker && echo \"docker:docker\" | chpasswd && adduser docker sudo\n\n# Install CMake\nRUN cd /mc2 && \\\n    wget https://github.com/Kitware/CMake/releases/download/v3.15.6/cmake-3.15.6-Linux-x86_64.sh && \\\n    sudo bash cmake-3.15.6-Linux-x86_64.sh --skip-license --prefix=/usr/local\n\n# Configure Intel and Microsoft APT repos\nRUN echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | sudo tee /etc/apt/sources.list.d/intel-sgx.list && \\\n    wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | sudo apt-key add - && \\\n    echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main\" | sudo tee /etc/apt/sources.list.d/llvm-toolchain-bionic-7.list && \\\n    wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - && \\\n    echo \"deb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod bionic main\" | sudo tee /etc/apt/sources.list.d/msprod.list && \\\n    wget -qO - https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - && \\\n    sudo apt update\n\n# Install Intel and Open Enclave packages and dependencies\nRUN sudo apt -y --no-install-recommends install clang-8 libssl-dev gdb libsgx-enclave-common libsgx-quote-ex libprotobuf10 libsgx-dcap-ql libsgx-dcap-ql-dev az-dcap-client open-enclave=0.17.1 && rm -rf /var/lib/apt/lists/*;\n\n# Install Azure CLI\nRUN curl -f -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Mbed TLS and pip\nRUN sudo apt-get install --no-install-recommends -y libmbedtls-dev python3-pip && rm -rf /var/lib/apt/lists/*;\n\n# Upgrade pip\nRUN pip3 install --no-cache-dir --upgrade pip\n\n# Install Python dependencies\nRUN cd /mc2/client && pip3 install --no-cache-dir -r requirements.txt\n\n# Install Opaque Systems' sequencefile\nRUN cd /mc2 && \\\n    git clone https://github.com/opaque-systems/sequencefile.git && \\\n    cd sequencefile && \\\n    sudo python3 setup.py install\n\n# Build mc2client\nRUN cd /mc2/client && \\\n    cd src && mkdir -p build && cd build && \\\n    cmake .. && \\\n    make -j4\n\n# Install mc2client Python package\nRUN cd /mc2/client/python-package/ && \\\n    sudo python3 setup.py install\n\nRUN echo \"alias mc2=\\\"python3 /mc2/client/mc2.py\\\"\" >> ~/.bashrc\n\n######################\n# Install Opaque SQL #\n######################\n\n# Clone Opaque SQL\nRUN cd /mc2/ && git clone https://github.com/mc2-project/opaque-sql.git\n\n# Install SBT dependencies\nRUN sudo apt -y --no-install-recommends install build-essential openjdk-8-jdk python libssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install Spark 3.1.1\nRUN wget https://archive.apache.org/dist/spark/spark-3.1.1/spark-3.1.1-bin-hadoop2.7.tgz && \\\n    tar xvf spark-3.1.1* && \\\n    sudo mkdir -p /opt/spark && \\\n    sudo mv spark-3.1.1*/* /opt/spark && \\\n    rm -rf spark-3.1.1* && \\\n    sudo mkdir -p /opt/spark/work && \\\n    sudo chmod -R a+wx /opt/spark/work\n\n# Set Spark environment variables in bashrc\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Spark settings\" >> ~/.bashrc && \\\n    echo \"export SPARK_HOME=/opt/spark\" >> ~/.bashrc && \\\n    echo \"export PATH=$PATH:/opt/spark/bin:/opt/spark/sbin\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc\n\n# Source Open Enclave on every login\nRUN echo \"source /opt/openenclave/share/openenclave/openenclaverc\" >> ~/.bashrc\n\n# Set environment variables\nENV OPAQUE_HOME=\"/mc2/opaque-sql\"\nENV OPAQUE_DATA_DIR=${OPAQUE_HOME}/data/\nENV PRIVATE_KEY_PATH=${OPAQUE_HOME}/src/test/keys/mc2_test_key.pem\nENV MODE=SIMULATE\nENV OE_SDK_PATH=/opt/openenclave/\n\n# Spark settings\nENV SPARK_SCALA_VERSION=2.12\nENV SPARK_HOME=/opt/spark\nENV PATH=$PATH:/opt/spark/bin:/opt/spark/sbin\n\n# Build Opaque SQL\nSHELL [\"/bin/bash\", \"-c\"]\nRUN cd /mc2/opaque-sql && source /opt/openenclave/share/openenclave/openenclaverc && build/sbt package\n\n# Set the working directory to /mc2\nWORKDIR /mc2/client\n"
}