{
  "startTime": 1674252913335,
  "endTime": 1674252914943,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker to serve Django via Unicorn and run\n# cron to regularly update the card database\nFROM ubuntu:20.04\n\n# Keeps Python from generating .pyc files in the container\nENV PYTHONDONTWRITEBYTECODE=1\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED=1\n\n# Install tools and additional dependencies\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        dos2unix \\\n        python3-pip python3-dev \\\n        gcc netcat curl cron libpq-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Cron: Clean system tasks and allow start as unprivileged user\n# This is a bit hacky but should be fine in Docker environment\nRUN rm -rf /etc/cron.*/* && \\\n    chmod u+s /usr/sbin/cron\n\n# Copy requirements.txt\nCOPY requirements.txt /MPCAutofill/\nWORKDIR /MPCAutofill\n\n# Install pip requirements\nRUN pip3 install --no-cache-dir gunicorn wheel\nRUN pip3 install --no-cache-dir -r requirements.txt\n\n# Copy relevant files from repository\nCOPY docker /MPCAutofill/docker\nCOPY MPCAutofill /MPCAutofill/MPCAutofill\n\n# Make sure that all scripts are executable, and in case we\n# checked out under Windows with CRLF, convert line endings\nRUN chmod +x docker/django/*.sh && \\\n    find . -type f -name \"*.sh\" -exec dos2unix {} \\;\n\n# Let's be nice to the user and give some clear error message\n# if they missed to install any of the mandatory files.\nRUN ./docker/django/check_client_secrets.sh && \\\n    ./docker/django/check_drives.sh\n\n# Install cronjobs\nRUN cp docker/django/crontab.txt /etc/crontab\n\n# Create a non-root user and add permission to access the /MPCAutofill folder\nRUN adduser -u 5678 --disabled-password --gecos \"\" mpcautofill && \\\n    chown -R mpcautofill /MPCAutofill\nUSER mpcautofill\n\n# Place environment file\nRUN cp docker/django/env.txt MPCAutofill/MPCAutofill/.env\n\n# Prepare folder for static files (create now as user for permissions)\nRUN mkdir -p static\n\n# Prepare to start\nEXPOSE 8000\nWORKDIR /MPCAutofill/MPCAutofill\nENTRYPOINT [\"/MPCAutofill/docker/django/entrypoint.sh\"]\nCMD [\"gunicorn\", \"MPCAutofill.wsgi:application\", \"--bind\", \"0.0.0.0:8000\"]\n"
}