{
  "startTime": 1674249308892,
  "endTime": 1674249309327,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 5,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# First, build a *static* 'semgrep-core' binary on Alpine because it comes set\n# up for it (requires using musl rather than glibc).\n#\n# Then 'semgrep-core' alone is copied to a container which takes care\n# of the 'semgrep-python' wrapping.\n#\n\n# The docker base image below in the FROM currently uses OCaml 4.14.0\n# See https://github.com/returntocorp/ocaml-layer/blob/master/configs/alpine.sh\n#\n# coupling: if you modify the OCaml version there, you probably also need\n# to modify:\n# - scripts/{osx-release,osx-m1-release,setup-m1-builder}.sh\n# - doc/SEMGREP_CORE_CONTRIBUTING.md\n# - https://github.com/Homebrew/homebrew-core/blob/master/Formula/semgrep.rb\n# Note that many .github/workflows/ use returntocorp/ocaml:alpine, which should\n# be the latest, but may differ from this one.\nFROM returntocorp/ocaml:alpine-2022-06-09@sha256:99b453a838c9d94414991c0fd7be4711aa1bcc120f576e0f0653c7b921ea9718 as semgrep-core\n\nUSER root\n# for ocaml-pcre now used in semgrep-core\n# TODO: update root image to include python 3.9\nRUN apk add --no-cache pcre-dev python3 &&\\\n     pip install --no-cache-dir pipenv==2022.6.7\n\nUSER user\n\nENV OPAMYES=true\n\nWORKDIR /semgrep/semgrep-core/src/ocaml-tree-sitter-core\nCOPY --chown=user semgrep-core/src/ocaml-tree-sitter-core/ .\nRUN scripts/install-tree-sitter-lib\n\nWORKDIR /semgrep/semgrep-core/src/pfff\nCOPY --chown=user semgrep-core/src/pfff/*.opam .\nWORKDIR /semgrep/semgrep-core/src/ocaml-tree-sitter-core\nCOPY --chown=user semgrep-core/src/ocaml-tree-sitter-core/*.opam .\nWORKDIR /semgrep/semgrep-core\nCOPY --chown=user semgrep-core/*.opam .\n\nRUN opam install --deps-only \\\n     /semgrep/semgrep-core/src/pfff \\\n     /semgrep/semgrep-core/src/ocaml-tree-sitter-core \\\n     /semgrep/semgrep-core\n\nWORKDIR /semgrep\nCOPY --chown=user semgrep-core/ ./semgrep-core\nCOPY --chown=user interfaces/ ./interfaces\nCOPY --chown=user cli/src/semgrep/lang ./cli/src/semgrep/lang\nCOPY --chown=user cli/src/semgrep/semgrep_interfaces ./cli/src/semgrep/semgrep_interfaces\n\nWORKDIR /semgrep/semgrep-core\nRUN opam exec -- dune build\n\nWORKDIR /semgrep\nRUN /semgrep/semgrep-core/_build/default/src/cli/Main.exe -version\n\n#\n# We change container, bringing the 'semgrep-core' binary with us.\n#\n\nFROM python:3.10-alpine AS semgrep-cli\n\nWORKDIR /semgrep\n\nENV PIP_DISABLE_PIP_VERSION_CHECK=true \\\n     PIP_NO_CACHE_DIR=true \\\n     PYTHONIOENCODING=utf8 \\\n     PYTHONUNBUFFERED=1\n\nRUN apk add --no-cache --virtual=.run-deps bash git git-lfs openssh\nCOPY cli ./\n\n# hadolint ignore=DL3013\nRUN apk add --no-cache --virtual=.build-deps build-base && \\\n     SEMGREP_SKIP_BIN=true pip --no-cache-dir install /semgrep && \\\n     # running this pre-compiles some python files for faster startup times\n     semgrep --version && \\\n     apk del .build-deps && \\\n     mkdir -p /tmp/.cache\n\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\n# Let the user know how their container was built\nCOPY dockerfiles/semgrep.Dockerfile /Dockerfile\n\nCOPY --from=semgrep-core /semgrep/semgrep-core/_build/default/src/cli/Main.exe /usr/local/bin/semgrep-core\n\nENV SEMGREP_IN_DOCKER=1 \\\n     SEMGREP_VERSION_CACHE_PATH=/tmp/.cache/semgrep_version \\\n     SEMGREP_USER_AGENT_APPEND=\"Docker\"\n\nWORKDIR /src\n\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"semgrep\", \"--help\"]\nLABEL maintainer=\"support@r2c.dev\"\n"
}