{
  "startTime": 1674248833569,
  "endTime": 1674248835508,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 5,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 5,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:bionic\n\n################################################################################\n#                                                                              #\n#   THIS CONTAINER IS FOR EDUCATIONAL USE ONLY!                                #\n#                                                                              #\n#   Never use this container for running production workloads!                 #\n#                                                                              #\n################################################################################\n\n# Update the package manager...\nRUN DEBIAN_FRONTEND=noninteractive \\\n  apt-get update\n\n# Install add-apt-repository\nRUN DEBIAN_FRONTEND=noninteractive \\\n  apt-get --no-install-recommends install -yq software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Add the PHP 7.3 repository\nRUN DEBIAN_FRONTEND=noninteractive \\\n  add-apt-repository ppa:ondrej/php; \\\n  DEBIAN_FRONTEND=noninteractive \\\n  add-apt-repository ppa:ondrej/apache2\n\n# ...then install packages.\nRUN DEBIAN_FRONTEND=noninteractive \\\n  apt-get --no-install-recommends install -yq \\\n  apache2 \\\n  build-essential \\\n  php7.4 \\\n  libapache2-mod-php7.4 \\\n  php7.4-bz2 \\\n  php7.4-cli \\\n  php7.4-common \\\n  php7.4-curl \\\n  php7.4-fpm \\\n  php7.4-gd \\\n  php7.4-json \\\n  php7.4-mbstring \\\n  php7.4-memcached \\\n  php7.4-mysql \\\n  php7.4-oauth \\\n  php7.4-opcache \\\n  php7.4-readline \\\n  php7.4-sqlite3 \\\n  php7.4-soap \\\n  php7.4-xdebug \\\n  php7.4-xml \\\n  mysql-client-5.7 \\\n  curl \\\n  git \\\n  imagemagick \\\n  vim \\\n  zip && rm -rf /var/lib/apt/lists/*;\n\n# Install google chrome (for some reason, tacking on gnupg to previous list failed).\n# https://github.com/NCIOCPL/cgov-digital-platform/issues/48\n# See also https://hub.docker.com/r/selenium/node-chrome/~/dockerfile/\nRUN apt install --no-install-recommends gnupg -y && rm -rf /var/lib/apt/lists/*;\nRUN curl -f https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n  && echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list \\\n  && apt-get update -qqy \\\n  && apt-get -qqy --no-install-recommends install google-chrome-stable \\\n  && rm /etc/apt/sources.list.d/google-chrome.list \\\n  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*\n\n# Install the chrome webdriver.\n# Using 'latest' in download URL no longer works, apparently.\nRUN CD_VERSION=2.44 && echo \"Using chromedriver version: \"$CD_VERSION \\\n  && curl -f -o /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip \\\n  && rm -rf /opt/selenium/chromedriver \\\n  && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \\\n  && rm /tmp/chromedriver_linux64.zip \\\n  && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-latest \\\n  && chmod 755 /opt/selenium/chromedriver-latest \\\n  && ln -fs /opt/selenium/chromedriver-latest /usr/bin/chromedriver\n\n# Copy up the available sites config. The startup script\n# manipulates this file based on env vars.\nCOPY ./build/000-default.conf /etc/apache2/sites-available/000-default.conf\n\n## These are the PHP modules that are available to be\n## loaded by the CLI & apache. This should be inline with\n## the modules installed above.\nCOPY ./build/php-conf /etc/php/7.4/mods-available\n\n## Install PhantomJS locally.\nCOPY ./build/usr/bin/phantomjs /usr/bin\n\n# Enable mod_rewrite 'cause we needs it.\nRUN a2enmod rewrite\n\n# Forward logs to docker log collector.\nRUN ln -sf /dev/stdout /var/log/apache2/access.log && \\\n  ln -sf /dev/stderr /var/log/apache2/error.log && \\\n  ln -sf /dev/stdout /var/log/apache2/000_default-access_log && \\\n  ln -sf /dev/stderr /var/log/apache2/000_default-error_log\n\n# Copy our custom entrypoint and make it executable.\nCOPY ./build/docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\n\n# Install Node\n# nvm environment variables\nENV NVM_DIR /usr/local\nENV NODE_VERSION 16.13.0\n\n# install nvm\n# https://github.com/creationix/nvm#install-script\nRUN curl -f --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.0/install.sh | bash\n\n# install node and npm\nRUN . $NVM_DIR/nvm.sh \\\n  && nvm install $NODE_VERSION \\\n  && nvm alias default $NODE_VERSION \\\n  && nvm use default\n\n# add node and npm to path so the commands are available\nENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules\nENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\n\n# update npm\nRUN npm install -g npm@8.1.0 && npm cache clean --force;\n\n# Install composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer --2\n\n## Install Drush Launcher (runs local drush instances)\nRUN curl -f -sL -o /usr/local/bin/drush https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar \\\n  && chmod +x /usr/local/bin/drush\n\n## Install Drupal console\nRUN curl -f https://drupalconsole.com/installer -L -o /usr/local/bin/drupal \\\n  && chmod +x /usr/local/bin/drupal\n\nRUN php --version; composer --version; drupal --version; drush --drush-launcher-version\n\n## Enable BLT function\nRUN curl -f -sL -o /usr/local/bin/blt https://github.com/acquia/blt-launcher/releases/download/v1.0.3/blt.phar \\\n  && chmod +x /usr/local/bin/blt\n\n## Turn off xdebug as it uses resources that could be best used\n## elsewhere. Once the container is up you can use\n## phpenmod -s <SAPI> xdebug\n## where SAPI is probably, most likely, apache2\nRUN phpdismod -s cli xdebug\nRUN phpdismod -s apache2 xdebug\n\n# Expose the default Apache port.\nEXPOSE 80\n\n# Replace the standard entrypoint /bin/sh with our script.\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# If no command is passed to the container, start Apache by default.\nCMD [\"apachectl\", \"-D\", \"FOREGROUND\"]\n\n# Default to /var/www so we don't need to do it by hand.\nWORKDIR /var/www\n"
}