{
  "startTime": 1674255469884,
  "endTime": 1674255470909,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 2,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 2,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 2,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 2,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Base our app image off of the WALKOFF App SDK image\nFROM frikky/shuffle:app_sdk as base\n\nFROM base\n\n# Install all alpine build tools needed for our pip installs\nRUN echo 'https://dl-cdn.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories && \\\n  apk add --no-cache --update \\ \n    libffi \\\n    abuild \\\n    build-base \\\n    cmake \\\n    flex \\\n    linux-headers \\\n    # Library\n    libffi-dev \\\n    musl-dev \\\n    libunwind-dev \\\n    libpcap-dev \\\n    libdnet-dev \\\n    hwloc-dev \\\n    luajit-dev \\\n    openssl-dev \\\n    pcre-dev \\\n    libtirpc-dev \\\n    flatbuffers-dev \\ \n    vectorscan-dev \\\n    flex-dev\n\nENV SRC_HOME=/snort_src\nWORKDIR ${SRC_HOME}\n\nARG SAFEC_VER=02092020\nADD https://github.com/rurban/safeclib/releases/download/v${SAFEC_VER}/libsafec-${SAFEC_VER}.tar.gz ${SRC_HOME}/libsafec-${SAFEC_VER}.tar\nARG GPERF_VER=2.9.1\nADD  https://github.com/gperftools/gperftools/releases/download/gperftools-${GPERF_VER}/gperftools-${GPERF_VER}.tar.gz ${SRC_HOME}/gperftools-${GPERF_VER}.tar\nARG DAQ_VER=3.0.2\nADD https://github.com/snort3/libdaq/releases/download/v${DAQ_VER}/libdaq-${DAQ_VER}.tar.gz $SRC_HOME/libdaq-${DAQ_VER}.tar\nARG SNORT_VER=3.1.3.0\nADD https://github.com/snort3/snort3/archive/${SNORT_VER}.tar.gz ${SRC_HOME}/snort3-${SNORT_VER}.tar\n\nRUN echo \"Build libsafec\" && \\\n  tar -xzvf libsafec-${SAFEC_VER}.tar && \\\n  cd libsafec-${SAFEC_VER}.0-g6d921f && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make -j 4 && \\\n  make install && \\\n  echo \"Build gperftools\" && \\\n  cd ${SRC_HOME} && \\\n  tar -xvf gperftools-$GPERF_VER.tar && \\\n  cd ${SRC_HOME}/gperftools-$GPERF_VER && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make -j 4 && \\\n  make install && \\\n  echo \"Build libdaq\" && \\\n  cd ${SRC_HOME} && \\\n  tar xvf libdaq-${DAQ_VER}.tar && \\\n  cd ${SRC_HOME}/libdaq-${DAQ_VER} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make -j 4 && \\\n  make install && \\\n  echo \"Build Snort3\" && \\\n  cd ${SRC_HOME} && \\\n  tar xvf snort3-${SNORT_VER}.tar && \\\n  cd ${SRC_HOME}/snort3-${SNORT_VER} && \\\n  ./configure_cmake.sh --prefix=/usr/local --enable-tcmalloc && \\\n  cd build && \\\n  make -j 4 && \\\n  make install && \\\n  # Cleanup compilation\n  cd / && \\\n  rm -rf ${SRC_HOME} && \\\n  apk del \\ \n    build-base \\ \n    cmake && rm libsafec-${SAFEC_VER}.tar\n# Install all of our pip packages in a single directory that we can copy to our base image later\nRUN mkdir /install && \\\n  mkdir /rules\nWORKDIR /install\nCOPY requirements.txt /requirements.txt\nRUN pip install --no-cache-dir -r /requirements.txt\n\nRUN addgroup snort3 && \\\n  adduser -h /app -G snort3 -D snort3\nCOPY src /app\nRUN chown -R snort3:snort3 /app && \\\n  chmod 755 /app/app.py\nUSER snort3\nWORKDIR /app\n\nCMD [\"python\", \"app.py\", \"--log-level\", \"DEBUG\"]\n"
}