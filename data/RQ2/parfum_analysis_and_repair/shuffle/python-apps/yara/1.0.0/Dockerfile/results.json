{
  "startTime": 1674251330490,
  "endTime": 1674251331464,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Base our app image off of the WALKOFF App SDK image\nFROM frikky/shuffle:app_sdk as base\n\n# We're going to stage away all of the bloat from the build tools so lets create a builder stage\nFROM base as builder\n\n# Install all alpine build tools needed for our pip installs\nRUN apk --no-cache add --update alpine-sdk libffi libffi-dev musl-dev openssl-dev\n\n# Install all of our pip packages in a single directory that we can copy to our base image later\nRUN mkdir /install\nWORKDIR /install\nCOPY requirements.txt /requirements.txt\nRUN pip install --no-cache-dir --prefix=\"/install\" -r /requirements.txt\n\n### Switch back to our base image and copy in all of our built packages and source code\nFROM base\nCOPY --from=builder /install /usr/local\nCOPY src /app\n\n# Install any binary dependencies needed in our final image\n# RUN apk --no-cache add --update my_binary_dependency\nENV YARA_VERSION 4.0.2\nENV YARA_PY_VERSION 4.0.2\n#RUN apk add --no-cache openssl file jansson bison python3 tini su-exec wget\n#RUN apk add --no-cache -t .build-deps py3-setuptools openssl-dev jansson-dev python3-dev build-base libc-dev file-dev automake autoconf libtool flex git\n\n### INSTALLING EVERYTHING REQUIRED\nRUN apk add --no-cache openssl file jansson bison python3 tini su-exec wget\nRUN apk add --no-cache -t .build-deps py3-setuptools openssl-dev jansson-dev\nRUN apk add --no-cache python3-dev build-base libc-dev file-dev automake\nRUN apk add --no-cache autoconf libtool flex git\n\n### SETTING UP YARA\nRUN set -x\nRUN echo \"Install Yara from source...\"\nRUN git clone --recursive --branch v$YARA_VERSION https://github.com/VirusTotal/yara.git /tmp/yara\nRUN cd /tmp/yara\nWORKDIR /tmp/yara\nRUN ./bootstrap.sh\nRUN sync\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-crypto --enable-magic --enable-cuckoo --enable-dotnet\nRUN make\nRUN make install\nRUN echo \"Install yara-python...\"\n\n### SETTING UP YARA PYTHON\nRUN git clone --recursive --branch v$YARA_PY_VERSION https://github.com/VirusTotal/yara-python /tmp/yara-python\nRUN cd /tmp/yara-python\nWORKDIR /tmp/yara-python\nRUN python3 setup.py build --dynamic-linking\nRUN python3 setup.py install\nRUN apk del --purge .build-deps\n\n### SETTING UP YARA RULES\nRUN git clone https://github.com/Yara-Rules/rules /rules\n\n# Finally, lets run our app!\nWORKDIR /app\nCMD python app.py --log-level DEBUG"
}