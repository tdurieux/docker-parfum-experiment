{
  "startTime": 1674254636891,
  "endTime": 1674254637792,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 144,
        "lineEnd": 150,
        "columnStart": 6,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:22.04@sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d\nLABEL maintainer=\"Nicola Corna <nicola@corna.info>\"\n\n# Environment variables\n#######################\n\nENV MIRROR_DIR /srv/mirror\nENV SRC_DIR /srv/src\nENV TMP_DIR /srv/tmp\nENV CCACHE_DIR /srv/ccache\nENV ZIP_DIR /srv/zips\nENV LMANIFEST_DIR /srv/local_manifests\nENV KEYS_DIR /srv/keys\nENV LOGS_DIR /srv/logs\nENV USERSCRIPTS_DIR /srv/userscripts\n\nENV DEBIAN_FRONTEND noninteractive\nENV USER root\n\n# Configurable environment variables\n####################################\n\n# By default we want to use CCACHE, you can disable this\n# WARNING: disabling this may slow down a lot your builds!\nENV USE_CCACHE 1\n\n# ccache maximum size. It should be a number followed by an optional suffix: k,\n# M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0\n# for no limit.\nENV CCACHE_SIZE 50G\n\n# We need to specify the ccache binary since it is no longer packaged along with AOSP\nENV CCACHE_EXEC /usr/bin/ccache\n\n# Environment for the LineageOS branches name\n# See https://github.com/LineageOS/android/branches for possible options\nENV BRANCH_NAME 'lineage-16.0'\n\n# Environment for the device list (separate by comma if more than one)\n# eg. DEVICE_LIST=hammerhead,bullhead,angler\nENV DEVICE_LIST ''\n\n# Release type string\nENV RELEASE_TYPE 'UNOFFICIAL'\n\n# OTA URL that will be used inside CMUpdater\n# Use this in combination with LineageOTA to make sure your device can auto-update itself from this buildbot\nENV OTA_URL ''\n\n# User identity\nENV USER_NAME 'LineageOS Buildbot'\nENV USER_MAIL 'lineageos-buildbot@docker.host'\n\n# Include proprietary files, downloaded automatically from github.com/TheMuppets/ and gitlab.com/the-muppets/\n# Only some branches are supported\nENV INCLUDE_PROPRIETARY true\n\n# Mount an overlay filesystem over the source dir to do each build on a clean source\nENV BUILD_OVERLAY false\n\n# Clone the full LineageOS mirror (> 200 GB)\nENV LOCAL_MIRROR false\n\n# If you want to preserve old ZIPs set this to 'false'\nENV CLEAN_OUTDIR false\n\n# Change this cron rule to what fits best for you\n# Use 'now' to start the build immediately\n# For example, '0 10 * * *' means 'Every day at 10:00 UTC'\nENV CRONTAB_TIME 'now'\n\n# Clean artifacts output after each build\nENV CLEAN_AFTER_BUILD true\n\n# Provide root capabilities builtin inside the ROM (see http://lineageos.org/Update-and-Build-Prep/)\nENV WITH_SU false\n\n# Provide a default JACK configuration in order to avoid out-of-memory issues\nENV ANDROID_JACK_VM_ARGS \"-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G\"\n\n# Custom packages to be installed\nENV CUSTOM_PACKAGES ''\n\n# Sign the builds with the keys in $KEYS_DIR\nENV SIGN_BUILDS false\n\n# When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject\nENV KEYS_SUBJECT '/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'\n\n# Move the resulting zips to $ZIP_DIR/$codename instead of $ZIP_DIR/\nENV ZIP_SUBDIR true\n\n# Write the verbose logs to $LOGS_DIR/$codename instead of $LOGS_DIR/\nENV LOGS_SUBDIR true\n\n# Apply the MicroG's signature spoofing patch\n# Valid values are \"no\", \"yes\" (for the original MicroG's patch) and\n# \"restricted\" (to grant the permission only to the system privileged apps).\n#\n# The original (\"yes\") patch allows user apps to gain the ability to spoof\n# themselves as other apps, which can be a major security threat. Using the\n# restricted patch and embedding the apps that requires it as system privileged\n# apps is a much secure option. See the README.md (\"Custom mode\") for an\n# example.\nENV SIGNATURE_SPOOFING \"no\"\n\n# Delete old zips in $ZIP_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_ZIPS 0\n\n# Delete old logs in $LOGS_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_LOGS 0\n\n# build type of your builds (user|userdebug|eng)\nENV BUILD_TYPE \"userdebug\"\n\n# You can optionally specify a USERSCRIPTS_DIR volume containing these scripts:\n#  * begin.sh, run at the very beginning\n#  * before.sh, run after the syncing and patching, before starting the builds\n#  * pre-build.sh, run before the build of every device\n#  * post-build.sh, run after the build of every device\n#  * end.sh, run at the very end\n# Each script will be run in $SRC_DIR and must be owned and writeable only by\n# root\n\n# Create Volume entry points\n############################\nVOLUME $MIRROR_DIR\nVOLUME $SRC_DIR\nVOLUME $TMP_DIR\nVOLUME $CCACHE_DIR\nVOLUME $ZIP_DIR\nVOLUME $LMANIFEST_DIR\nVOLUME $KEYS_DIR\nVOLUME $LOGS_DIR\nVOLUME $USERSCRIPTS_DIR\n\n# Create missing directories\n############################\nRUN mkdir -p $MIRROR_DIR $SRC_DIR $TMP_DIR $CCACHE_DIR $ZIP_DIR $LMANIFEST_DIR \\\n      $KEYS_DIR $LOGS_DIR $USERSCRIPTS_DIR\n\n# Install build dependencies\n############################\nRUN apt-get -qq update && \\\n      apt-get install --no-install-recommends -y bc bison bsdmainutils build-essential ccache cgpt clang \\\n      cron curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick \\\n      kmod lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool \\\n      libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 \\\n      libxml2-utils lsof lzop maven openjdk-8-jdk pngcrush procps python3 \\\n      python-is-python3 rsync schedtool squashfs-tools wget xdelta3 xsltproc yasm zip \\\n      zlib1g-dev \\\n      && rm -rf /var/lib/apt/lists/*\n\nRUN curl -f https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo && \\\n      chmod a+x /usr/local/bin/repo\n\n# Re-enable TLSv1 and TLSv1.1 in OpenJDK 8 config\n#(for cm-14.1/lineage-15.1, might be removed later)\n###################################################\nRUN echo \"jdk.tls.disabledAlgorithms=SSLv3, RC4, DES, MD5withRSA, DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL, include jdk.disabled.namedCurves\" | tee -a /etc/java-8-openjdk/security/java.security\n\n# Copy required files\n#####################\nCOPY src/ /root/\n\n# Set the work directory\n########################\nWORKDIR $SRC_DIR\n\n# Allow redirection of stdout to docker logs\n############################################\nRUN ln -sf /proc/1/fd/1 /var/log/docker.log\n\n# Set the entry point to init.sh\n################################\nENTRYPOINT /root/init.sh\n"
}