{
  "startTime": 1674250011457,
  "endTime": 1674250012550,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM composer:2.0 as vendor\n\nWORKDIR /app\n\nCOPY database database\nCOPY composer.json composer.lock  ./\n\nRUN composer install --optimize-autoloader --no-dev --no-scripts\nRUN composer update --no-scripts\n\nFROM node:lts-alpine as node\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install \\\n    && npm run production && npm cache clean --force;\n\nFROM php:7.2-fpm\n\nWORKDIR /var/www\n\nRUN docker-php-ext-install pdo_mysql\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y libgmp-dev re2c libmhash-dev libmcrypt-dev file \\\n    && ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/local/include/ \\\n    && docker-php-ext-configure gmp \\\n    && docker-php-ext-install gmp && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y nginx && rm -rf /var/lib/apt/lists/*;\n\nRUN rm -rf /var/www/html \\\n    && rm /etc/nginx/sites-enabled/default\n\nCOPY . .\nCOPY docker/nginx/conf.d /etc/nginx/conf.d\nCOPY --from=vendor /app/vendor vendor\nCOPY --from=node /app/public public\nCOPY docker/entrypoint.sh /etc/entrypoint.sh\n\nRUN chown -R www-data:www-data \\\n    /var/www/storage \\\n    /var/www/bootstrap/cache\n\nEXPOSE 80\n\nENTRYPOINT [\"sh\", \"/etc/entrypoint.sh\"]\n"
}