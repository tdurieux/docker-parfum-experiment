{
  "startTime": 1674252428093,
  "endTime": 1674252429064,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILDER_IMAGE=quay.io/geonet/golang:1.15-alpine\nARG RUNNER_IMAGE=quay.io/geonet/go-scratch:latest\nARG RUN_USER=nobody\n# Only support image based on AlpineLinux\nFROM ${BUILDER_IMAGE} as builder\n\n# Obtain ca-cert and tzdata, which we will add to the container\nRUN apk add --no-cache --update ca-certificates tzdata gcc make musl-dev\n\n# Project to build\nARG BUILD\n\n# Git commit SHA\nARG GIT_COMMIT_SHA\n\nCOPY ./ /repo\n\nWORKDIR /repo\n\n# Set a bunch of go env flags\nENV GOBIN /repo/gobin\nENV GOPATH /usr/src/go\nENV GOFLAGS -mod=vendor\nENV GOOS linux\nENV GOARCH amd64\n\nRUN echo 'nobody:x:65534:65534:Nobody:/:\\' > /passwd\nRUN CGO_ENABLED=0 go install -a -ldflags \"-X main.Prefix=${BUILD}/${GIT_COMMIT_SHA} -extldflags -static\" /repo/cmd/${BUILD}\n\nFROM ${RUNNER_IMAGE}\n# Export a port, default to 8080\nARG EXPOSE_PORT=8080\nEXPOSE $EXPOSE_PORT\n\n# Add common resource for ssl and timezones from the build container\n# Create a nobody user\nCOPY --from=builder /passwd /etc/passwd\n# Same ARG as before\nARG BUILD\n# Need to make this an env for it to be interpolated by the shell\nENV TZ Pacific/Auckland\nENV BUILD_BIN=${BUILD}\n# We have to make our binary have a fixed name, otherwise, we cannot run it without a shell\nCOPY --from=builder /repo/gobin/${BUILD} /${BUILD}\n# Copy the assets\nARG ASSET_DIR\nCOPY ${ASSET_DIR} /assets\nARG RUN_USER=nobody\nUSER ${RUN_USER}\n# Requires a CMD [\"/${BUILD}\"] appended by build.sh\n"
}