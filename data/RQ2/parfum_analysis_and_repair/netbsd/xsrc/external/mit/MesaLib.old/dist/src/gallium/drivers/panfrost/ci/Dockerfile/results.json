{
  "startTime": 1674218217817,
  "endTime": 1674218219112,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:testing\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo 'path-exclude=/usr/share/doc/*' > /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo 'path-exclude=/usr/share/man/*' >> /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d\nRUN echo 'exit 101' >> /usr/sbin/policy-rc.d\nRUN chmod +x /usr/sbin/policy-rc.d\n\nRUN dpkg --add-architecture arm64\nRUN echo deb-src http://deb.debian.org/debian testing main >> /etc/apt/sources.list\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install ca-certificates && \\\n    apt-get -y install --no-install-recommends \\\n      crossbuild-essential-arm64 \\\n      meson \\\n      g++ \\\n      git \\\n      ccache \\\n      pkg-config \\\n      python3-mako \\\n      python-numpy \\\n      python-six \\\n      python-mako \\\n      python3-pip \\\n      python3-setuptools \\\n      python3-six \\\n      python3-wheel \\\n      python3-jinja2 \\\n      bison \\\n      flex \\\n      libwayland-dev \\\n      gettext \\\n      cmake \\\n      bc \\\n      libssl-dev \\\n      lavacli \\\n      csvkit \\\n      curl \\\n      unzip \\\n      wget \\\n      debootstrap \\\n      procps \\\n      qemu-user-static \\\n      cpio \\\n      \\\n      libdrm-dev:arm64 \\\n      libx11-dev:arm64 \\\n      libxxf86vm-dev:arm64 \\\n      libexpat1-dev:arm64 \\\n      libsensors-dev:arm64 \\\n      libxfixes-dev:arm64 \\\n      libxdamage-dev:arm64 \\\n      libxext-dev:arm64 \\\n      x11proto-dev:arm64 \\\n      libx11-xcb-dev:arm64 \\\n      libxcb-dri2-0-dev:arm64 \\\n      libxcb-glx0-dev:arm64 \\\n      libxcb-xfixes0-dev:arm64 \\\n      libxcb-dri3-dev:arm64 \\\n      libxcb-present-dev:arm64 \\\n      libxcb-randr0-dev:arm64 \\\n      libxcb-sync-dev:arm64 \\\n      libxrandr-dev:arm64 \\\n      libxshmfence-dev:arm64 \\\n      libelf-dev:arm64 \\\n      libwayland-dev:arm64 \\\n      libwayland-egl-backend-dev:arm64 \\\n      libclang-7-dev:arm64 \\\n      zlib1g-dev:arm64 \\\n      libglvnd-core-dev:arm64 \\\n      wayland-protocols:arm64 \\\n      libpng-dev:arm64 && \\\n    rm -rf /var/lib/apt/lists && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p /artifacts/rootfs/deqp                                             && \\\n  wget https://github.com/KhronosGroup/VK-GL-CTS/archive/opengl-es-cts-3.2.5.0.zip && \\\n  unzip opengl-es-cts-3.2.5.0.zip -d /                                          && \\\n  rm opengl-es-cts-3.2.5.0.zip                                                  && \\\n  cd /VK-GL-CTS-opengl-es-cts-3.2.5.0                                           && \\\n  python3 external/fetch_sources.py                                             && \\\n  cd /artifacts/rootfs/deqp                                                     && \\\n  cmake -DDEQP_TARGET=wayland                                                      \\\n    -DCMAKE_BUILD_TYPE=Release                                                     \\\n    -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc                                       \\\n    -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++                                     \\\n    /VK-GL-CTS-opengl-es-cts-3.2.5.0                                            && \\\n  make -j$(nproc)                                                               && \\\n  rm -rf /artifacts/rootfs/deqp/external                                        && \\\n  rm -rf /artifacts/rootfs/deqp/modules/gles3                                   && \\\n  rm -rf /artifacts/rootfs/deqp/modules/gles31                                  && \\\n  rm -rf /artifacts/rootfs/deqp/modules/internal                                && \\\n  rm -rf /artifacts/rootfs/deqp/executor                                        && \\\n  rm -rf /artifacts/rootfs/deqp/execserver                                      && \\\n  rm -rf /artifacts/rootfs/deqp/modules/egl                                     && \\\n  rm -rf /artifacts/rootfs/deqp/framework                                       && \\\n  find . -name CMakeFiles | xargs rm -rf                                        && \\\n  find . -name lib\\*.a | xargs rm -rf                                           && \\\n  du -sh *                                                                      && \\\n  rm -rf /VK-GL-CTS-opengl-es-cts-3.2.5.0\n\n# TODO: Switch to 5.2-rc* when the time comes\nCOPY arm64.config /panfrost-ci/\nRUN mkdir -p /kernel                                                                   && \\\n  wget https://github.com/freedesktop/drm-misc/archive/drm-misc-next-2019-04-18.tar.gz && \\\n  tar xvfz drm-misc-next-2019-04-18.tar.gz -C /kernel --strip-components=1             && \\\n  rm drm-misc-next-2019-04-18.tar.gz                                                   && \\\n  cd /kernel                                                                           && \\\n  ARCH=arm64 CROSS_COMPILE=\"aarch64-linux-gnu-\" ./scripts/kconfig/merge_config.sh arch/arm64/configs/defconfig /panfrost-ci/arm64.config && \\\n  ARCH=arm64 CROSS_COMPILE=\"aarch64-linux-gnu-\" make -j12 Image dtbs                   && \\\n  cp arch/arm64/boot/Image /artifacts/.                                                && \\\n  cp arch/arm64/boot/dts/rockchip/rk3399-gru-kevin.dtb /artifacts/.                    && \\\n  rm -rf /kernel\n\nCOPY create-rootfs.sh /artifacts/rootfs/\nRUN debootstrap --variant=minbase --arch=arm64 testing /artifacts/rootfs/ http://deb.debian.org/debian && \\\n    chroot /artifacts/rootfs sh /create-rootfs.sh                                                      && \\\n    rm /artifacts/rootfs/create-rootfs.sh\n\nENTRYPOINT [\"\"]"
}