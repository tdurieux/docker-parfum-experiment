{
  "startTime": 1674220431947,
  "endTime": 1674220434111,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 7,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multistage docker build, requires docker 17.05\n\n# builder stage\nFROM ubuntu:16.04 as builder\n\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install \\\n        ca-certificates \\\n        cmake \\\n        g++ \\\n        make \\\n        pkg-config \\\n        graphviz \\\n        doxygen \\\n        git \\\n        curl \\\n        libtool-bin \\\n        autoconf \\\n        automake \\\n        bzip2 \\\n        xsltproc \\\n        gperf \\\n        unzip && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /usr/local\n\nENV CFLAGS='-fPIC'\nENV CXXFLAGS='-fPIC'\n\n#Cmake\nARG CMAKE_VERSION=3.14.6\nARG CMAKE_VERSION_DOT=v3.14\nARG CMAKE_HASH=4e8ea11cabe459308671b476469eace1622e770317a15951d7b55a82ccaaccb9\nRUN set -ex \\\n    && curl -f -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n    && echo \"${CMAKE_HASH}  cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n    && cd cmake-${CMAKE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm cmake-${CMAKE_VERSION}.tar.gz\n\n## Boost\nARG BOOST_VERSION=1_70_0\nARG BOOST_VERSION_DOT=1.70.0\nARG BOOST_HASH=430ae8354789de4fd19ee52f3b1f739e1fba576f0aded0897c3c2bc00fb38778\nRUN set -ex \\\n    && curl -f -s -L -o  boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n    && echo \"${BOOST_HASH}  boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n    && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n    && cd boost_${BOOST_VERSION} \\\n    && ./bootstrap.sh \\\n    && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"$CFLAGS\" cxxflags=\"$CXXFLAGS\" stage && rm boost_${BOOST_VERSION}.tar.bz2\nENV BOOST_ROOT /usr/local/boost_${BOOST_VERSION}\n\n# OpenSSL\nARG OPENSSL_VERSION=1.1.1b\nARG OPENSSL_HASH=5c557b023230413dfb0756f3137a13e6d726838ccd1430888ad15bfb2b43ea4b\nRUN set -ex \\\n    && curl -f -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n    && echo \"${OPENSSL_HASH}  openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n    && cd openssl-${OPENSSL_VERSION} \\\n    && ./Configure linux-x86_64 no-shared --static \"$CFLAGS\" \\\n    && make build_generated \\\n    && make libcrypto.a \\\n    && make install && rm openssl-${OPENSSL_VERSION}.tar.gz\nENV OPENSSL_ROOT_DIR=/usr/local/openssl-${OPENSSL_VERSION}\n\n# ZMQ\nARG ZMQ_VERSION=v4.3.2\nARG ZMQ_HASH=a84ffa12b2eb3569ced199660bac5ad128bff1f0\nRUN set -ex \\\n    && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n    && cd libzmq \\\n    && test `git rev-parse HEAD` = ${ZMQ_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make \\\n    && make install \\\n    && ldconfig\n\n# zmq.hpp\nARG CPPZMQ_VERSION=v4.4.1\nARG CPPZMQ_HASH=f5b36e563598d48fcc0d82e589d3596afef945ae\nRUN set -ex \\\n    && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \\\n    && cd cppzmq \\\n    && test `git rev-parse HEAD` = ${CPPZMQ_HASH} || exit 1 \\\n    && mv *.hpp /usr/local/include\n\n# Readline\nARG READLINE_VERSION=8.0\nARG READLINE_HASH=e339f51971478d369f8a053a330a190781acb9864cf4c541060f12078948e461\nRUN set -ex \\\n    && curl -f -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n    && echo \"${READLINE_HASH}  readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n    && cd readline-${READLINE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm readline-${READLINE_VERSION}.tar.gz\n\n# Sodium\nARG SODIUM_VERSION=1.0.18\nARG SODIUM_HASH=4f5e89fa84ce1d178a6765b8b46f2b6f91216677\nRUN set -ex \\\n    && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n    && cd libsodium \\\n    && test `git rev-parse HEAD` = ${SODIUM_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make check \\\n    && make install\n\n# Udev\nARG UDEV_VERSION=v3.2.8\nARG UDEV_HASH=d69f3f28348123ab7fa0ebac63ec2fd16800c5e0\nRUN set -ex \\\n    && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} \\\n    && cd eudev \\\n    && test `git rev-parse HEAD` = ${UDEV_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n    && make \\\n    && make install\n\n# Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n    && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} \\\n    && cd libusb \\\n    && test `git rev-parse HEAD` = ${USB_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared \\\n    && make \\\n    && make install\n\n# Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n    && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} \\\n    && cd hidapi \\\n    && test `git rev-parse HEAD` = ${HIDAPI_HASH} || exit 1 \\\n    && ./bootstrap \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make \\\n    && make install\n\n# Protobuf\nARG PROTOBUF_VERSION=v3.7.1\nARG PROTOBUF_HASH=6973c3a5041636c1d8dc5f7f6c8c1f3c15bc63d6\nRUN set -ex \\\n    && git clone https://github.com/protocolbuffers/protobuf -b ${PROTOBUF_VERSION} \\\n    && cd protobuf \\\n    && test `git rev-parse HEAD` = ${PROTOBUF_HASH} || exit 1 \\\n    && git submodule update --init --recursive \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make \\\n    && make install \\\n    && ldconfig\n\nWORKDIR /src\nCOPY . .\n\nENV USE_SINGLE_BUILDDIR=1\nARG NPROC\nRUN set -ex && \\\n    git submodule init && git submodule update && \\\n    rm -rf build && \\\n    if [ -z \"$NPROC\" ] ; \\\n    then make -j$(nproc) release-static ; \\\n    else make -j$NPROC release-static ; \\\n    fi\n\n# runtime stage\nFROM ubuntu:16.04\n\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install ca-certificates && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt && rm -rf /var/lib/apt/lists/*;\nCOPY --from=builder /src/build/release/bin /usr/local/bin/\n\n# Create monero user\nRUN adduser --system --group --disabled-password monero && \\\n\tmkdir -p /wallet /home/monero/.bitmonero && \\\n\tchown -R monero:monero /home/monero/.bitmonero && \\\n\tchown -R monero:monero /wallet\n\n# Contains the blockchain\nVOLUME /home/monero/.bitmonero\n\n# Generate your wallet via accessing the container and run:\n# cd /wallet\n# monero-wallet-cli\nVOLUME /wallet\n\nEXPOSE 18080\nEXPOSE 18081\n\n# switch to user monero\nUSER monero\n\nENTRYPOINT [\"monerod\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18080\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18081\", \"--non-interactive\", \"--confirm-external-bind\"]\n\n"
}