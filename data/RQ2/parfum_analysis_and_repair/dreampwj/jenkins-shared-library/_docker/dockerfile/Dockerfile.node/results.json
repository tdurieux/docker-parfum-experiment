{
  "startTime": 1674252387528,
  "endTime": 1674252388311,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Author: 潘维吉\n# Version 1.0.0\n# Description: 自定义构建Node项目服务端镜像\n\n# 构建镜像docker build --build-arg PROJECT_NAME=app 或 docker-compose.yaml args参数传入\n# ARG EXPOSE_PORT\n\n\n# 指定我们的基础镜像是node 如果指定的镜像不存在默认会自动从Docker Hub上下载\nFROM node:14\n\n# 设置镜像元数据，利用 docker inspect [镜像名称|镜像ID],即可查看\n#LABEL author=\"潘维吉\"\n\n# 挂载数据卷 docker删除后数据不丢失 docker run -v 映射\nVOLUME /logs\n\n# 指定切换用户\nUSER root\n\n# 设置时区\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# 将根目录下的文件都copy到docker容器文件系统的app文件夹下\nADD . /app/\n# cd到app文件夹下\nWORKDIR /app\n\n# 安装项目依赖包  RUN和CMD都是执行命令，他们的差异在于RUN中定义的命令会在执行docker build命令创建镜像时执行，而CMD中定义的命令会在执行docker run命令运行镜像时执行\nRUN npm install --only=production && npm rebuild node-sass --force && npm cache clean --force;\n\n# 配置环境变量\n# ENV HOST 0.0.0.0\nENV PORT 8000\n\n# 容器对外暴露的端口号\nEXPOSE 8000\n\n# 容器启动时执行的命令，类似npm run start\nCMD [\"npm\", \"start\"]\n\n#  node服务端\n\n#  构建镜像(无缓存构建)\n#  docker build -t at-things/node .  --no-cache\n#  停止指定的容器\n#  docker stop at-things-node\n#  删除未运行的容器\n#  docker rm $(docker ps -a -q)\n#  启动容器 指定端口映射 容器名称和对应的镜像名称\n#  docker run -d --restart=always --name at-things-node -p 8000:8000 at-things/node\n#  删除名称或标签为none的镜像\n#  docker rmi $(docker images | grep \"none\" | awk '{print $3}')\n"
}