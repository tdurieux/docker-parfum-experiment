{
  "startTime": 1674215213092,
  "endTime": 1674215213937,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build server and client\nFROM node:16-alpine3.16 as build\n\nWORKDIR /app\n\nCOPY server/ /app/server\nCOPY client/ /app/client\nCOPY rest-api/ /app/rest-api\nCOPY [\"package.json\", \"package-lock.json*\", \"./\"]\n\nRUN apk add --no-cache python3 g++ make\nRUN if [[ $(uname -m) == armv7l ]]; then apk add --no-cache vips-dev; fi\nRUN npm install && npm cache clean --force;\nRUN npm run build\n\n# Build server for production\nFROM node:16-alpine3.16 as server-build-production\n\nWORKDIR /server\nCOPY [\"server/package.json\", \"server/package-lock.json*\", \"./\"]\nRUN apk add --no-cache python3 g++ make\nRUN if [[ $(uname -m) == armv7l ]]; then apk add --no-cache vips-dev; fi\nRUN npm install --production && npm cache clean --force;\n\nFROM node:16-alpine3.16 as node\nFROM alpine:3.16\n\nRUN apk add --no-cache curl shadow\nRUN if [[ $(uname -m) == armv7l ]]; then apk add --no-cache vips; fi\n\nWORKDIR /storage\nVOLUME /storage\n\nWORKDIR /assets\nVOLUME /assets\n\nWORKDIR /logs\nVOLUME /logs\n\nWORKDIR /app\n\nCOPY --from=node /usr/local/bin/node /usr/local/bin/\nCOPY --from=node /usr/lib/ /usr/lib/\n\nCOPY --from=build /app/server/public public\nCOPY --from=build /app/server/build build\n\nCOPY --from=server-build-production /server/node_modules node_modules\n\nCOPY server/package.json ./\nCOPY docker/entrypoint.sh /docker/entrypoint.sh\n\nENV PORT=7481\nEXPOSE $PORT\n\nENV PUID=1000\nENV PGID=1000\n\nRUN groupadd --non-unique --gid 1000 abc\nRUN useradd --non-unique --create-home --uid 1000 --gid abc abc\n\nHEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD curl ${HOSTNAME}:${PORT}\n\nENV DATABASE_PATH=\"/storage/data.db\"\nENV ASSETS_PATH=\"/assets\"\nENV LOGS_PATH=\"/logs\"\nENV NODE_ENV=production\n\nENTRYPOINT  [\"sh\", \"/docker/entrypoint.sh\"]\n"
}