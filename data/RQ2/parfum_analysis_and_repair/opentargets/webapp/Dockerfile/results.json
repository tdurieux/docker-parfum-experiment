{
  "startTime": 1674255699450,
  "endTime": 1674255700389,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 18,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multi-stage dockerfile where the 1st stage builds the app on a specific version of node,\n# and the 2nd stage sets up the latest nginx:alpine.\n\n# ============================== node/build section =====================================================\nFROM node:8.15-alpine as build_section\n\n# build dependencies:\nRUN apk update\nRUN apk add --no-cache --update make\nRUN apk add --no-cache --update g++\nRUN apk add --no-cache --update python2\nRUN apk add --no-cache --update git\n\n# copy build config:\nCOPY ./*.* /var/www/\nCOPY ./LICENSE /var/www/\nWORKDIR /var/www\n# install project dependencies via yarn:\nRUN yarn install && yarn cache clean;\n# copy rest of code (we do this only here to avoid \"install dependencies\" step above each time *only* the code changes):\nCOPY . /var/www/\n# build code:\nRUN yarn run full-install\n\n# ============================== nginx section =====================================================\nFROM nginx:alpine\n\n# use jq to update custom.json at runtime\nRUN apk update && apk add --no-cache jq\n\n# copy build result from 1st stage\nCOPY --from=build_section /var/www/app/ /var/www/app/\n\n# append custom CSS to the end of main .css file:\nRUN ( ls /var/www/app/config/custom_style.css && cat /var/www/app/config/custom_style.css >> /var/www/app/build/OpenTargetsWebapp.min.css) || echo 'No custom .css'\n\n#move self-signed certificates in the right place\nCOPY ./nginx_conf/server.crt /usr/share/nginx/\nCOPY ./nginx_conf/server.key /usr/share/nginx/\n\n#move nginx.template in the right place\nCOPY ./nginx_conf/nginx.template /etc/nginx/nginx.template\n\nVOLUME /var/cache/nginx\n\nCOPY ./docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nEXPOSE 80 443\nWORKDIR /var/www/app\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}