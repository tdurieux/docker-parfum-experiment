{
  "startTime": 1674253597408,
  "endTime": 1674253598066,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile provides a build environment only,\n# it is not intended to be used for running Osiris-pwm.\n# See \"build/docker/build.sh\" for an example.\nFROM golang:1.15\n\nCOPY . /app\nWORKDIR /app\nRUN apt-get -qq update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -qq install \\\n  -y gcc libgl1-mesa-dev xorg-dev zip >> /dev/null && rm -rf /var/lib/apt/lists/*;\n\n# build will output to artifacts directory which may\n# or may not exist. if exists, clean it out\nRUN rm -f build/artifacts/* || mkdir -p build/artifacts/\n\n# cgo is required, and explicitly enabled here\nRUN CGO_ENABLED=1 go build -o build/artifacts/Osiris-pwm\n\n# zip built binary and get the checksums\nWORKDIR /app/build/artifacts\nRUN zip Osiris-pwm_linux_amd64.zip Osiris-pwm\nRUN sha256sum Osiris-pwm_linux_amd64.zip > Osiris-pwm.SHA256SUMS\nRUN sha256sum Osiris-pwm >> Osiris-pwm.SHA256SUMS\n"
}