{
  "startTime": 1674249154418,
  "endTime": 1674249155395,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 191,
        "lineEnd": 193,
        "columnStart": 63,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 143,
        "lineEnd": 163,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 191,
        "lineEnd": 193,
        "columnStart": 63,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 198,
        "lineEnd": 217,
        "columnStart": 18,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile builds an image with all dependencies needed for Origami.\n#\n# This includes:  Ubuntu 20.04, CUDA 10.1, CUDNN7, and Tensorflow-GPU 2.1.2\n#\n# Parts of this Dockerfile were modified from the official NVIDIA CUDA Dockerfile repo:\n#       https://gitlab.com/nvidia/container-images/cuda\n#  Specifically, everything up through the installation of CUDNN7.\n#\n# Notice mandated by the NVIDIA Deep Learning Container License:\n#  “This software contains source code provided by NVIDIA Corporation.”\n#\n# Other parts of this Dockerfile were modified from official Tensorflow Dockerfiles.\n#       https://github.com/tensorflow/tensorflow/tree/452c18fc5dfd64baf7ffdf6443b4aba8b0cc8b5e/tensorflow/tools/dockerfiles\n\n# The following was modified from the Dockerfile for NVIDIA CUDA 18.04 - base:\n#       https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/10.1/ubuntu18.04/base/Dockerfile\n\nFROM ubuntu:20.04 as base\n\n#FROM base as base-amd64\n\nLABEL maintainer \"Jack Rasiel <jrasiel@umd.edu>\"\n\nENV NVARCH x86_64\nENV NVIDIA_REQUIRE_CUDA \"cuda>=10.1 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419\"\nENV NV_CUDA_CUDART_VERSION 10.1.243-1\n\nENV NV_ML_REPO_ENABLED 1\nENV NV_ML_REPO_URL https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/${NVARCH}\n\n# The following was modified from the Dockerfile for NVIDIA CUDA 18.04 - runtime:\n#      https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/10.1/ubuntu18.04/runtime/Dockerfile\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    gnupg2 curl ca-certificates && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/${NVARCH}/7fa2af80.pub | apt-key add - && \\\n    echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/${NVARCH} /\" > /etc/apt/sources.list.d/cuda.list && \\\n    if [ ! -z ${NV_ML_REPO_ENABLED} ]; then echo \"deb ${NV_ML_REPO_URL} /\" > /etc/apt/sources.list.d/nvidia-ml.list; fi && \\\n    apt-get purge --autoremove -y curl \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV CUDA_VERSION 10.1.243\n\n# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    cuda-cudart-10-1=${NV_CUDA_CUDART_VERSION} \\\n    cuda-compat-10-1 \\\n    && ln -s cuda-10.1 /usr/local/cuda && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Required for nvidia-docker v1\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\n\nENV NV_CUDA_LIB_VERSION 10.1.243-1\nENV NV_NVTX_VERSION 10.1.243-1\nENV NV_LIBNPP_VERSION 10.1.243-1\nENV NV_LIBCUSPARSE_VERSION 10.1.243-1\n\n\nENV NV_LIBCUBLAS_PACKAGE_NAME libcublas10\n\nENV NV_LIBCUBLAS_VERSION 10.2.1.243-1\nENV NV_LIBCUBLAS_PACKAGE ${NV_LIBCUBLAS_PACKAGE_NAME}=${NV_LIBCUBLAS_VERSION}\n\n\nENV NV_LIBNCCL_PACKAGE_NAME \"libnccl2\"\nENV NV_LIBNCCL_PACKAGE_VERSION 2.8.3-1\nENV NCCL_VERSION 2.8.3\nENV NV_LIBNCCL_PACKAGE ${NV_LIBNCCL_PACKAGE_NAME}=${NV_LIBNCCL_PACKAGE_VERSION}+cuda10.1\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    cuda-libraries-10-1=${NV_CUDA_LIB_VERSION} \\\n    cuda-npp-10-1=${NV_LIBNPP_VERSION} \\\n    cuda-nvtx-10-1=${NV_NVTX_VERSION} \\\n    cuda-cusparse-10-1=${NV_LIBCUSPARSE_VERSION} \\\n    ${NV_LIBCUBLAS_PACKAGE} \\\n    ${NV_LIBNCCL_PACKAGE} \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88\nRUN apt-mark hold ${NV_LIBNCCL_PACKAGE_NAME} ${NV_LIBCUBLAS_PACKAGE_NAME}\n\n# The following was modified from the Dockerfile for NVIDIA CUDA 18.04 - runtime - cudnn7:\n#      https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/10.1/ubuntu18.04/runtime/cudnn7/Dockerfile\n\nENV NV_CUDNN_PACKAGE_VERSION 7.6.5.32-1\nENV NV_CUDNN_VERSION 7.6.5.32\n\nENV NV_CUDNN_PACKAGE_NAME libcudnn7\nENV NV_CUDNN_PACKAGE ${NV_CUDNN_PACKAGE_NAME}=${NV_CUDNN_PACKAGE_VERSION}+cuda10.1\n\nENV CUDNN_VERSION ${NV_CUDNN_VERSION}\n\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ${NV_CUDNN_PACKAGE} \\\n    ${NV_CUDNN_PACKAGE_DEV} \\\n    && apt-mark hold ${NV_CUDNN_PACKAGE_NAME} && \\\n    rm -rf /var/lib/apt/lists/*\n\n# The following was modified from the Dockerfile for Tensorflow-GPU (commit 452c18fc5d):\n# https://github.com/tensorflow/tensorflow/blob/452c18fc5dfd64baf7ffdf6443b4aba8b0cc8b5e/tensorflow/tools/dockerfiles/dockerfiles/gpu.Dockerfile\n\n# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# ARCH and CUDA are specified again because the FROM directive resets ARGs\n# (but their default value is retained if set previously)\nARG ARCH\nARG CUDA=10.1\nARG CUDNN=7.6.5.32-1\nARG CUDNN_MAJOR_VERSION=7\nARG LIB_DIR_PREFIX=x86_64\nARG LIBNVINFER=6.0.1-1\nARG LIBNVINFER_MAJOR_VERSION=6\n\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\n\n# No user prompts during apt install:\nARG DEBIAN_FRONTEND=noninteractive\n\n# Pick up some TF dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA/./-} \\\n        # There appears to be a regression in libcublas10=10.2.2.89-1 which\n        # prevents cublas from initializing in TF. See\n        # https://github.com/tensorflow/tensorflow/issues/9489#issuecomment-562394257\n        libcublas10=10.2.1.243-1 \\ \n        cuda-nvrtc-${CUDA/./-} \\\n        cuda-cufft-${CUDA/./-} \\\n        cuda-curand-${CUDA/./-} \\\n        cuda-cusolver-${CUDA/./-} \\\n        cuda-cusparse-${CUDA/./-} \\\n        curl \\\n        libcudnn7=${CUDNN}+cuda${CUDA} \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        software-properties-common \\\n        unzip \\\n        wget && rm -rf /var/lib/apt/lists/*;\n\n# Install TensorRT if not building for PowerPC\nRUN [[ \"${ARCH}\" = \"ppc64le\" ]] || { apt-get update && \\\n        apt-get install -y --no-install-recommends libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA} \\\n        libnvinfer-plugin${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA} \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/*; }\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n\n# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure\n# dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\n# See http://bugs.python.org/issue19846\nENV LANG C.UTF-8\n\n##############################################################\n####### END OF TENSORFLOW DOCKERFILE-DERIVED MATERIAL ########\n##############################################################\n\n# The following lines install dependencies specific to Origami:\n# Install Python3.7 from deadsnake ppa:\n#  (We need Python3.7 for compatibility reasons)\nRUN add-apt-repository ppa:deadsnakes/ppa && apt-get update && apt-get install --no-install-recommends -y \\\n    python3.7 \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN python3.7 -m pip install --upgrade pip\nRUN python3.7 -m pip install setuptools\n\nRUN apt update && apt install -y --no-install-recommends \\\n        gfortran \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        ffmpeg \\\n        libsm6 \\\n        libxext6 \\\n        tesseract-ocr \\\n        libtesseract-dev \\\n        libleptonica-dev \\\n        pkg-config \\\n        libcgal-dev \\\n        libopenmpi-dev \\\n        gfortran \\\n        libopenblas-dev \\\n        liblapack-dev \\\n        libffi-dev \\\n        python3.7-dev \\\n        libcairo2-dev \\\n        git && rm -rf /var/lib/apt/lists/*;\n\n# Install scikit-geometry from source.  This takes a while.\nRUN git clone https://github.com/scikit-geometry/scikit-geometry\nRUN echo \"NOTE!  Building scikit-geometry from source.  This will take a while!\" && \\\n        cd scikit-geometry && python3.7 setup.py install\n\n# Pip install from pip freeze with --no-deps flag\nCOPY pip_requirements.txt /tmp/pip_requirements.txt\nRUN python3.7 -m pip install -r /tmp/pip_requirements.txt --no-deps\n\n# uninstall and reinstall h5py<3.0.0\nRUN python3.7 -m pip uninstall --yes h5py && python3.7 -m pip install 'h5py<3.0.0'\n\n# Some TF tools expect a \"python\" binary\n#RUN ln -s $(which python3) /usr/local/bin/python\nRUN ln -s $(which python3.7) /usr/local/bin/python\n\n# Get the specific tflow-gpu wheel we need for Origami:\nRUN wget https://files.pythonhosted.org/packages/0d/eb/9e03ca9b0b1d91274d9cfc90bfca7d75ff90df8e28160626f7b016f05b69/tensorflow_gpu-2.1.2-cp37-cp37m-manylinux2010_x86_64.whl\n\n# Install TFlow GPU:\nRUN python3.7 -m pip install tensorflow_gpu-2.1.2-cp37-cp37m-manylinux2010_x86_64.whl \n\nCOPY bashrc /etc/bash.bashrc\nRUN chmod a+rwx /etc/bash.bashrc\n\n"
}