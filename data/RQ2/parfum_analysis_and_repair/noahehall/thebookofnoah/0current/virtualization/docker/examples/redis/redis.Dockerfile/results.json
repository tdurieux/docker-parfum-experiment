{
  "startTime": 1674248290514,
  "endTime": 1674248291456,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://github.com/docker-library/redis\n\nARG ALPINE_V=3.13\nFROM alpine:${ALPINE_V} as builder\n\n# https://github.com/hadolint/hadolint/wiki/DL4006#correct-code\nSHELL [\"/bin/ash\", \"-eoux\", \"pipefail\", \"-c\"]\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN addgroup -S -g 1000 redis && adduser -S -G redis -u 999 redis\n# alpine already has a gid 999, so we'll use the next id\n\nRUN apk add --no-cache \\\n# grab su-exec for easy step-down from root\n    'su-exec>=0.2' \\\n# add tzdata for https://github.com/docker-library/redis/issues/138\n    tzdata;\n\nFROM builder as redisinstall\n\nENV REDIS_VERSION=6.0.10 \\\n    REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.10.tar.gz \\\n    REDIS_DOWNLOAD_SHA=79bbb894f9dceb33ca699ee3ca4a4e1228be7fb5547aeb2f99d921e86c1285bd\n\nRUN apk add --no-cache --virtual .build-deps \\\n    coreutils \\\n    dpkg-dev dpkg \\\n    gcc \\\n    linux-headers \\\n    make \\\n    musl-dev \\\n    openssl-dev \\\n# install real \"wget\" to avoid:\n#   + wget -O redis.tar.gz http://download.redis.io/releases/redis-6.0.6.tar.gz\n#   Connecting to download.redis.io (45.60.121.1:80)\n#   wget: bad header line:     XxhODalH: btu; path=/; Max-Age=900\n    wget \\\n    ; \\\n\n    wget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\"; \\\n    echo \"$REDIS_DOWNLOAD_SHA  *redis.tar.gz\" | sha256sum -c -; \\\n    mkdir -p /usr/src/redis; \\\n    tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \\\n    rm redis.tar.gz; \\\n\n# disable Redis protected mode [1] as it is unnecessary in context of Docker\n# (ports are not automatically exposed when running inside Docker, but rather explicitly by specifying -p / -P)\n# [1]: https://github.com/redis/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da\n    grep -E '^ *createBoolConfig[(]\"protected-mode\",.*, *1 *,.*[)],$' /usr/src/redis/src/config.c; \\\n    sed -ri 's!^( *createBoolConfig[(]\"protected-mode\",.*, *)1( *,.*[)],)$!\\10\\2!' /usr/src/redis/src/config.c; \\\n    grep -E '^ *createBoolConfig[(]\"protected-mode\",.*, *0 *,.*[)],$' /usr/src/redis/src/config.c; \\\n# for future reference, we modify this directly in the source instead of just supplying a default configuration flag because apparently \"if you specify any argument to redis-server, [it assumes] you are going to specify everything\"\n# see also https://github.com/docker-library/redis/issues/4#issuecomment-50780840\n# (more exactly, this makes sure the default behavior of \"save on SIGTERM\" stays functional by default)\n\n# https://github.com/jemalloc/jemalloc/issues/467 -- we need to patch the \"./configure\" for the bundled jemalloc to match how Debian compiles, for compatibility\n# (also, we do cross-builds, so we need to embed the appropriate \"--build=xxx\" values to that \"./configure\" invocation)\n    gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n    extraJemallocConfigureFlags=\"--build=$gnuArch\"; \\\n    # https://salsa.debian.org/debian/jemalloc/-/blob/c0a88c37a551be7d12e4863435365c9a6a51525f/debian/rules#L8-23\n    dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"${dpkgArch##*-}\" in \\\n        amd64 | i386 | x32) extraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-page=12\" ;; \\\n        *) extraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-page=16\" ;; \\\n    esac; \\\n    extraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-hugepage=21\"; \\\n    grep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile; \\\n    sed -ri 's!cd jemalloc && ./configure !&'\"$extraJemallocConfigureFlags\"' !' /usr/src/redis/deps/Makefile; \\\n    grep -F \"cd jemalloc && ./configure $extraJemallocConfigureFlags \" /usr/src/redis/deps/Makefile; \\\n\n    export BUILD_TLS=yes; \\\n    make -C /usr/src/redis -j \"$(nproc)\" all; \\\n    make -C /usr/src/redis install; \\\n\n    # TODO https://github.com/redis/redis/pull/3494 (deduplicate \"redis-server\" copies)\n    serverMd5=\"$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)\"; export serverMd5; \\\n    find /usr/local/bin/redis* -maxdepth 0 \\\n        -type f -not -name redis-server \\\n        -exec sh -eux -c ' \\\n            md5=\"$(md5sum \"$1\" | cut -d\" \" -f1)\"; \\\n            test \"$md5\" = \"$serverMd5\"; \\\n        ' -- '{}' ';' \\\n        -exec ln -svfT 'redis-server' '{}' ';' \\\n    ; \\\n\n    rm -r /usr/src/redis; \\\n\n    runDeps=\"$( \\\n        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n            | tr ',' '\\n' \\\n            | sort -u \\\n        | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    )\"; \\\n    apk add --no-cache --no-network --virtual .redis-rundeps $runDeps; \\\n    apk del --no-network .build-deps; \\\n\n    redis-cli --version; \\\n    redis-server --version\n\nFROM redisinstall as redisbase\nRUN mkdir /data && chown redis:redis /data\nVOLUME /data\nWORKDIR /data\n\nCOPY redis-docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/redis-docker-entrypoint.sh \\\n    && ln -s /usr/local/bin/redis-docker-entrypoint.sh;\n\nENTRYPOINT [\"redis-docker-entrypoint.sh\"]\n\nEXPOSE 6379\nCMD [\"redis-server\"]"
}