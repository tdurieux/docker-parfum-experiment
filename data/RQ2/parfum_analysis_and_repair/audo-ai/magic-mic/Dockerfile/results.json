{
  "startTime": 1674254166838,
  "endTime": 1674254168161,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 41,
        "columnEnd": 66
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 34,
        "columnStart": 22,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 49,
        "columnStart": 22,
        "columnEnd": 85
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 74
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 34,
        "columnStart": 22,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 49,
        "columnStart": 22,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG TARGET=rnnoise\nARG BASE_IMAGE=ubuntu:18.04\nFROM $BASE_IMAGE as common\n\nSHELL [\"/bin/bash\", \"-c\"]\n# For some reason, things fail to install later without this command\nRUN apt-get update && apt-get install -y --no-install-recommends apt-utils && rm -rf /var/lib/apt/lists/*;\n\n# General softare build deps\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    git bash curl snapd wget software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Get newer version of g++ (this may no longer be necessary)\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y gcc-10 g++-10 && rm -rf /var/lib/apt/lists/*;\n\n# Need a newer cmake than ubuntu provides (for FetchContent)\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.19.5/cmake-3.19.5-Linux-x86_64.sh && \\\n    sh cmake-3.19.5-Linux-x86_64.sh -- --skip-license && \\\n    rm cmake-3.19.5-Linux-x86_64.sh\n\n# Tauri deps\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    build-essential \\\n    curl \\\n    wget \\\n    libssl-dev \\\n    appmenu-gtk3-module \\\n    libgtk-3-dev \\\n    squashfs-tools \\\n    libdbus-1-dev \\\n    libwebkit2gtk-4.0-dev && rm -rf /var/lib/apt/lists/*;\n\n# We need a newer version of node than ubuntu has\nRUN wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash\nRUN \\. ~/.nvm/nvm.sh && nvm install 12.13\nRUN \\. ~/.nvm/nvm.sh && nvm use 12.13 && npm install --global yarn && npm cache clean --force;\n\n# Install cargo and rust through rustup\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \\\n    source $HOME/.cargo/env && \\\n    rustup update stable && \\\n    cargo install tauri-bundler --force\n\n# magic-mic deps\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    libpulse-dev libappindicator3-dev libnotify-dev glib2.0 libgtkmm-3.0 libboost-dev && rm -rf /var/lib/apt/lists/*;\nRUN wget https://ftp.gnome.org/pub/gnome/sources/libnotifymm/0.7/libnotifymm-0.7.0.tar.xz && \\\n    tar xf libnotifymm-0.7.0.tar.xz && \\\n    cd libnotifymm-0.7.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j 4 install && rm libnotifymm-0.7.0.tar.xz\nRUN git clone --depth=1 https://github.com/xiph/rnnoise.git && \\\n    cd /rnnoise && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make install -j 4\n\n# Rust caching ideas from https://blog.mgattozzi.dev/caching-rust-docker-builds/\nRUN mkdir -p /src/src-tauri/src\nRUN echo \"fn main() {}\" > /src/src-tauri/dummy.rs\n# We might also need a dummy for build.rs but to be completely honest I'm not\n# sure what build.rs does\nCOPY ./src-tauri/src/build.rs /src/src-tauri/src/build.rs\nCOPY ./src-tauri/Cargo.lock /src/src-tauri\nCOPY ./src-tauri/Cargo.toml /src/src-tauri\nRUN sed -i 's/src\\/main.rs/dummy.rs/' /src/src-tauri/Cargo.toml\nRUN cd /src/src-tauri && \\\n    source $HOME/.cargo/env && \\\n    cargo build --release\nRUN sed -i 's/dummy.rs/src\\/main.rs/' /src/src-tauri/Cargo.toml\n\n# install src-web deps\nCOPY ./src-web /src/src-web\nRUN cd /src/src-web && \\\n    \\. ~/.nvm/nvm.sh && nvm use 12.13 && yarn\n\n# install tauri cli deps\nCOPY ./package.json /src\nRUN cd /src && \\\n    source $HOME/.cargo/env && \\\n    \\. ~/.nvm/nvm.sh && nvm use 12.13 && yarn\n\nCOPY . /src\n\n# appimagetool seems to want to use fuse for some reason to create the appimage,\n# but it doesn't need it. build_appimage.sh checks if fuse is usable with lsmod\n# | grep fuse. fuse is annoying to use on docker so we'll just shim lsmod not to\n# list fuse. I think the reason it lists fuse even though fuse is not usable on\n# docker is probably because of the docker sandboxing\nRUN echo -e '!/bin/bash\\necho NOTHING' >/usr/local/bin/lsmod && \\\n    chmod +x /usr/local/bin\n\nFROM common as rnnoise\nRUN cd /src && \\\n    PATH=$HOME/lsmod_shim:$PATH && \\\n    source $HOME/.cargo/env && \\\n    \\. ~/.nvm/nvm.sh && nvm use 12.13 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_CXX_COMPILER=`which g++-10` \\\n\t  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n\t  -DAUDIOPROC_CMAKES=\"$PWD/../src-native/RNNoiseAP.cmake\" \\\n\t  -DVIRTMIC_ENGINE=\"PIPESOURCE\" .. && \\\n    make build_tauri -j $(nproc)\n\nFROM common as audo\nRUN cd /src && \\\n    PATH=$HOME/lsmod_shim:$PATH && \\\n    source $HOME/.cargo/env && \\\n    \\. ~/.nvm/nvm.sh && nvm use 12.13 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -C /src-libdenoiser/cache.cmake \\\n\t  -DCMAKE_CXX_COMPILER=`which g++-10` \\\n\t  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n\t  -DAUDIOPROC_CMAKES=\"$PWD/../src-native/RNNoiseAP.cmake;/src-libdenoiser/AudoAP.cmake\" \\\n\t  -DVIRTMIC_ENGINE=\"PIPESOURCE\" \\\n\t  -DCMAKE_PREFIX_PATH=/src-libdenoiser/cmake_prefix .. && \\\n    make build_tauri -j $(nproc)\n\n# Give target a constant name so that the copy works\nFROM $TARGET as build\nFROM scratch as bin\nCOPY --from=build /src/src-tauri/target/release/bundle/appimage/magic-mic_0.1.0_amd64.AppImage .\n"
}