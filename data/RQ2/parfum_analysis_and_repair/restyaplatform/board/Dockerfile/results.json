{
  "startTime": 1674254660877,
  "endTime": 1674254661472,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.12 AS build\nRUN apk add -u --no-cache npm php7\n\nWORKDIR /code\n\nCOPY package.json .\n\nRUN npm install -g grunt && npm cache clean --force;\nRUN npm install && npm cache clean --force;\n\nCOPY .sandstorm/ .sandstorm/\nCOPY .tx/ .tx/\nCOPY docs/ docs/\nCOPY Jelastic/ Jelastic/\nCOPY build/ build/\nCOPY client/ client/\nCOPY docker-scripts/nginx.conf restyaboard.conf\nCOPY sql/ sql/\nCOPY api_explorer/ api_explorer/\nCOPY server/ server/\nCOPY media/ media/\nCOPY .codeclimate.yml .\nCOPY .htaccess .\nCOPY diagnose.php .\nCOPY ejabberd.yml .\nCOPY restyaboard.sh .\nCOPY restyaboard-ssl.conf .\nCOPY restyaboard_uninstall.sh .\nCOPY Gruntfile.js .\n\nRUN npm run docker:prebuild\n\n\nFROM alpine:3.12\n\n# update & install package\nRUN apk add -u --no-cache \\\n    bash \\\n    curl \\\n    # imagemagick is heavy. Adds a couple of MB to the image\n    imagemagick \\\n    jq \\\n    nginx \\\n    php7 \\\n    php7-curl \\\n    php7-fpm \\\n    php7-imagick \\\n    php7-imap \\\n    php7-json \\\n    php7-ldap \\\n    php7-mbstring \\\n    php7-pdo_pgsql \\\n    php7-pgsql \\\n    php7-xml \\\n    postgresql-client \\\n    unzip \\\n    tzdata && \\\n    sed -i 's/nobody/nginx/g' /etc/php7/php-fpm.d/www.conf && \\\n    rm /etc/nginx/conf.d/default.conf                      \n\n# after initial setup of deps to improve rebuilding speed\nENV ROOT_DIR=/var/lib/nginx/html \\\n    CONF_FILE=/etc/nginx/conf.d/restyaboard.conf \\\n    SMTP_SERVER=smtp_relay \\\n    SMTP_PORT=587 \\\n    TZ=Etc/UTC\n\n# deploy app\nCOPY --from=build /code/restyaboard-docker.zip /tmp/restyaboard.zip\nRUN unzip /tmp/restyaboard.zip -d ${ROOT_DIR} && \\\n    rm /tmp/restyaboard.zip && \\\n    chown -R nginx:nginx ${ROOT_DIR}\n\n# install apps\nADD docker-scripts/install_apps.sh /tmp/\nRUN chmod +x /tmp/install_apps.sh\nRUN . /tmp/install_apps.sh && \\\n    chown -R nginx:nginx ${ROOT_DIR}\n\n# configure app\nWORKDIR ${ROOT_DIR}\nRUN cp restyaboard.conf ${CONF_FILE} && \\\n    sed -i \"s/server_name.*$/server_name \\\"localhost\\\";/\" ${CONF_FILE} && \\\n    sed -i \"s|listen 80.*$|listen 80;|\" ${CONF_FILE} && \\\n    sed -i \"s|root.*html|root ${ROOT_DIR}|\" ${CONF_FILE}\n\n# entrypoint\nCOPY docker-scripts/docker-entrypoint.sh /\nCOPY docker-scripts/init-db.sh /\n\n# Default values. Can be changed during container start.\nENV POSTGRES_HOST=postgres \\\n    POSTGRES_PORT=5432 \\\n    RESTYA_DB=restyaboard\n\nRUN chmod +x /docker-entrypoint.sh\nRUN chmod +x /init-db.sh\nRUN chmod +x server/php/shell/main.sh\n\n# Default ports\nEXPOSE 80\n\n# TODO root user should be avoided but required for now\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"start\"]\n"
}