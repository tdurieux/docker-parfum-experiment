diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/tencentmusic/cube-studio/install/kubernetes/tmeps/Dockerfile_tfra_trainning b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/tencentmusic/cube-studio/install/kubernetes/tmeps/Dockerfile_tfra_trainning/repaired.Dockerfile
index 12aa0d4..5af104c 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/tencentmusic/cube-studio/install/kubernetes/tmeps/Dockerfile_tfra_trainning
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/tencentmusic/cube-studio/install/kubernetes/tmeps/Dockerfile_tfra_trainning/repaired.Dockerfile
@@ -10,16 +10,16 @@ FROM ubuntu:18.04 as org
 
 # 安装运维工具
 ENV DEBIAN_FRONTEND=noninteractive
-RUN apt update && apt install -y vim apt-transport-https gnupg2 ca-certificates-java rsync jq wget git dnsutils iputils-ping net-tools curl locales zip unzip tzdata zlib1g-dev
+RUN apt update && apt install --no-install-recommends -y vim apt-transport-https gnupg2 ca-certificates-java rsync jq wget git dnsutils iputils-ping net-tools curl locales zip unzip tzdata zlib1g-dev && rm -rf /var/lib/apt/lists/*;
 
 # 安装python
-RUN apt install -y python3.8-dev python3-pip libsasl2-dev libpq-dev \
+RUN apt install --no-install-recommends -y python3.8-dev python3-pip libsasl2-dev libpq-dev \
     && rm -f /usr/bin/python3 && ln -s /usr/bin/python3.8 /usr/bin/python3 \
     && rm -f /usr/bin/python && ln -s /usr/bin/python3.8 /usr/bin/python \
-    && ln -s /usr/bin/pip3 /usr/bin/pip
+    && ln -s /usr/bin/pip3 /usr/bin/pip && rm -rf /var/lib/apt/lists/*;
 
 # 安装中文
-RUN apt install -y locales ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy && locale-gen zh_CN && locale-gen zh_CN.utf8
+RUN apt install --no-install-recommends -y locales ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy && locale-gen zh_CN && locale-gen zh_CN.utf8 && rm -rf /var/lib/apt/lists/*;
 ENV LANG zh_CN.UTF-8
 ENV LC_ALL zh_CN.UTF-8
 ENV LANGUAGE zh_CN.UTF-8
@@ -39,21 +39,21 @@ WORKDIR /app
 
 FROM org as compiler
 # gcc
-RUN curl -L http://mirrors.ustc.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz -o gcc-7.3.0.tar.gz
-RUN tar -xvf gcc-7.3.0.tar.gz
-RUN cd gcc-7.3.0 && wget http://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 && \
-	wget http://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 && \
-	wget http://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz && \
-	wget http://gcc.gnu.org/pub/gcc/infrastructure/isl-0.16.1.tar.bz2
-
-RUN cd gcc-7.3.0 && ./contrib/download_prerequisites 
-RUN cd gcc-7.3.0 && ./configure --enable-languages=c,c++ --disable-multilib --with-system-zlib --prefix=/usr/local/gcc-7.3.0
+RUN curl -f -L https://mirrors.ustc.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz -o gcc-7.3.0.tar.gz
+RUN tar -xvf gcc-7.3.0.tar.gz && rm gcc-7.3.0.tar.gz
+RUN cd gcc-7.3.0 && wget https://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 && \
+	wget https://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 && \
+	wget https://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz && \
+	wget https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.16.1.tar.bz2
+
+RUN cd gcc-7.3.0 && ./contrib/download_prerequisites
+RUN cd gcc-7.3.0 && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --enable-languages=c,c++ --disable-multilib --with-system-zlib --prefix=/usr/local/gcc-7.3.0
 RUN cd gcc-7.3.0 && make -j32 && make install
 RUN ln -sf /usr/local/gcc-7.3.0/bin/gcc /usr/bin/gcc && ln -sf /usr/local/gcc-7.3.0/bin/g++ /usr/bin/g++
 RUN which gcc && gcc -v
 
 # bazel
-RUN curl -L https://github.com/bazelbuild/bazel/releases/download/3.7.2/bazel-3.7.2-installer-linux-x86_64.sh -o bazel-3.7.2-installer-linux-x86_64.sh
+RUN curl -f -L https://github.com/bazelbuild/bazel/releases/download/3.7.2/bazel-3.7.2-installer-linux-x86_64.sh -o bazel-3.7.2-installer-linux-x86_64.sh
 RUN	chmod 777 bazel-3.7.2-installer-linux-x86_64.sh && ./bazel-3.7.2-installer-linux-x86_64.sh
 
 # git-lfs
@@ -63,11 +63,11 @@ RUN	chmod 777 bazel-3.7.2-installer-linux-x86_64.sh && ./bazel-3.7.2-installer-l
 
 # tensorflow
 ARG TF_VERSION="2.5.1"
-RUN pip3 install --upgrade pip && pip3 install tensorflow==$TF_VERSION
+RUN pip3 install --no-cache-dir --upgrade pip && pip3 install --no-cache-dir tensorflow==$TF_VERSION
 
 # cmake
 WORKDIR /usr/local/share/cmake-3.15
-RUN curl -L https://cmake.org/files/v3.15/cmake-3.15.7-Linux-x86_64.sh -o make-3.15.7-Linux-x86_64.sh
+RUN curl -f -L https://cmake.org/files/v3.15/cmake-3.15.7-Linux-x86_64.sh -o make-3.15.7-Linux-x86_64.sh
 #COPY make-3.15.7-Linux-x86_64.sh ./
 RUN chmod 777 make-3.15.7-Linux-x86_64.sh && \
 	./make-3.15.7-Linux-x86_64.sh --skip-license --prefix=/usr
@@ -88,11 +88,11 @@ WORKDIR /app
 
 # tensorflow kafka
 ARG TF_VERSION="2.5.1"
-RUN pip3 install --upgrade pip && pip3 install tensorflow_datasets numpy tensorflow==$TF_VERSION traceback2 kafka-python
+RUN pip3 install --no-cache-dir --upgrade pip && pip3 install --no-cache-dir tensorflow_datasets numpy tensorflow==$TF_VERSION traceback2 kafka-python
 
 # tfra
 COPY --from=compiler /app/recommenders-addons/artifacts/tensorflow_recommenders_addons-*.whl ./
-RUN pip3 install tensorflow_recommenders_addons-*.whl
+RUN pip3 install --no-cache-dir tensorflow_recommenders_addons-*.whl
 # RUN pip3 install tensorflow-recommenders-addons-gpu==0.3.1
 
 # app