{
  "startTime": 1674218979193,
  "endTime": 1674218980254,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 150
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 20,
        "columnEnd": 84
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 1,
        "columnEnd": 66
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 1,
        "columnEnd": 64
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 1,
        "columnEnd": 66
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 34,
        "columnEnd": 70
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 34,
        "columnEnd": 120
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 20,
        "columnEnd": 124
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 18,
        "columnEnd": 175
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 18,
        "columnEnd": 175
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 93
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04 as org\n\n# 换内网源\n#RUN echo \"deb http://mirrors.tencent.com/ubuntu/ bionic main restricted universe multiverse\\n \\\n#deb http://mirrors.tencent.com/ubuntu/ bionic-security main restricted universe multiverse\\n \\\n#deb http://mirrors.tencent.com/ubuntu/ bionic-updates main restricted universe multiverse\\n \\\n#deb-src http://mirrors.tencent.com/ubuntu/ bionic main restricted universe multiverse\\n \\\n#deb-src http://mirrors.tencent.com/ubuntu/ bionic-security main restricted universe multiverse\\n \\\n#deb-src http://mirrors.tencent.com/ubuntu/ bionic-updates main restricted universe multiverse\" > /etc/apt/sources.list\n\n# 安装运维工具\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt update && apt install --no-install-recommends -y vim apt-transport-https gnupg2 ca-certificates-java rsync jq wget git dnsutils iputils-ping net-tools curl locales zip unzip tzdata zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# 安装python\nRUN apt install --no-install-recommends -y python3.8-dev python3-pip libsasl2-dev libpq-dev \\\n    && rm -f /usr/bin/python3 && ln -s /usr/bin/python3.8 /usr/bin/python3 \\\n    && rm -f /usr/bin/python && ln -s /usr/bin/python3.8 /usr/bin/python \\\n    && ln -s /usr/bin/pip3 /usr/bin/pip && rm -rf /var/lib/apt/lists/*;\n\n# 安装中文\nRUN apt install --no-install-recommends -y locales ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy && locale-gen zh_CN && locale-gen zh_CN.utf8 && rm -rf /var/lib/apt/lists/*;\nENV LANG zh_CN.UTF-8\nENV LC_ALL zh_CN.UTF-8\nENV LANGUAGE zh_CN.UTF-8\n\n# 设置时区\nRUN ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && dpkg-reconfigure -f noninteractive tzdata\n\n# 便捷操作\nRUN echo \"alias ll='ls -alF'\" >> /root/.bashrc && \\\n    echo \"alias la='ls -A'\" >> /root/.bashrc && \\\n    echo \"alias vi='vim'\" >> /root/.bashrc && \\\n    /bin/bash -c \"source /root/.bashrc\"\n\n# 构建编译依赖层\nRUN mkdir /app\nWORKDIR /app\n\nFROM org as compiler\n# gcc\nRUN curl -f -L https://mirrors.ustc.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz -o gcc-7.3.0.tar.gz\nRUN tar -xvf gcc-7.3.0.tar.gz && rm gcc-7.3.0.tar.gz\nRUN cd gcc-7.3.0 && wget https://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 && \\\n\twget https://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 && \\\n\twget https://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz && \\\n\twget https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.16.1.tar.bz2\n\nRUN cd gcc-7.3.0 && ./contrib/download_prerequisites\nRUN cd gcc-7.3.0 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-languages=c,c++ --disable-multilib --with-system-zlib --prefix=/usr/local/gcc-7.3.0\nRUN cd gcc-7.3.0 && make -j32 && make install\nRUN ln -sf /usr/local/gcc-7.3.0/bin/gcc /usr/bin/gcc && ln -sf /usr/local/gcc-7.3.0/bin/g++ /usr/bin/g++\nRUN which gcc && gcc -v\n\n# bazel\nRUN curl -f -L https://github.com/bazelbuild/bazel/releases/download/3.7.2/bazel-3.7.2-installer-linux-x86_64.sh -o bazel-3.7.2-installer-linux-x86_64.sh\nRUN\tchmod 777 bazel-3.7.2-installer-linux-x86_64.sh && ./bazel-3.7.2-installer-linux-x86_64.sh\n\n# git-lfs\n#RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n#\tapt install -o Acquire::AllowInsecureRepositories=true -o Acquire::AllowDowngradeToInsecureRepositories=true -y --allow-unauthenticated --no-install-recommends git-lfs && \\\n#\tgit lfs install\n\n# tensorflow\nARG TF_VERSION=\"2.5.1\"\nRUN pip3 install --no-cache-dir --upgrade pip && pip3 install --no-cache-dir tensorflow==$TF_VERSION\n\n# cmake\nWORKDIR /usr/local/share/cmake-3.15\nRUN curl -f -L https://cmake.org/files/v3.15/cmake-3.15.7-Linux-x86_64.sh -o make-3.15.7-Linux-x86_64.sh\n#COPY make-3.15.7-Linux-x86_64.sh ./\nRUN chmod 777 make-3.15.7-Linux-x86_64.sh && \\\n\t./make-3.15.7-Linux-x86_64.sh --skip-license --prefix=/usr\n\n# 编译\nWORKDIR /app/recommenders-addons\n\n#ARG TFRA_VERSION_GIT_COMMIT=v0.3.1\n#RUN curl -sSL --retry 5 https://github.com/tensorflow/recommenders-addons/tarball/${TFRA_VERSION_GIT_COMMIT} | tar --strip-components=1 -xzf -\nCOPY recommenders-addons/ /app/recommenders-addons/\n#ARG BAZEL_OPTIONS=\"--remote_cache=grpc://bazel-cache.woa.com:9090\"\nRUN python3 configure.py && bazel build ${BAZEL_OPTIONS} --enable_runfiles build_pip_pkg && \\\n\tbazel-bin/build_pip_pkg artifacts\n\n# 构建生产环境层\nFROM org as trainer\nWORKDIR /app\n\n# tensorflow kafka\nARG TF_VERSION=\"2.5.1\"\nRUN pip3 install --no-cache-dir --upgrade pip && pip3 install --no-cache-dir tensorflow_datasets numpy tensorflow==$TF_VERSION traceback2 kafka-python\n\n# tfra\nCOPY --from=compiler /app/recommenders-addons/artifacts/tensorflow_recommenders_addons-*.whl ./\nRUN pip3 install --no-cache-dir tensorflow_recommenders_addons-*.whl\n# RUN pip3 install tensorflow-recommenders-addons-gpu==0.3.1\n\n# app\nCOPY src/ /app/\nENV PYTHONPATH=/app:$PYTHONPATH\n\n#ENTRYPOINT [\"sleep\", \"99d\"]\nENTRYPOINT [\"/bin/bash\", \"-c\", \"cp -r /tmp/conf /tmp/conf_inner && python3 launcher.py\"]\n"
}