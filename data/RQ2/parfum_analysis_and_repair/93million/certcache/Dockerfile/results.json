{
  "startTime": 1674218356645,
  "endTime": 1674218357588,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 18,
        "columnEnd": 38
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12.16.0-alpine3.11 as deps\n\nRUN apk update && \\\n  apk add --no-cache openssl python3 && \\\n  rm -rf /var/cache/apk/*\n\nFROM deps as certbot-build\n\nCOPY ./docker/requirements.txt /certbot/requirements.txt\n\nWORKDIR /certbot/\n\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH \\\n    RUST_VERSION=1.50.0\n\nRUN set -eux; \\\n    apkArch=\"$(apk --print-arch)\"; \\\n    case \"$apkArch\" in \\\n        x86_64) rustArch='x86_64-unknown-linux-musl'; rustupSha256='05c5c05ec76671d73645aac3afbccf2187352fce7e46fc85be859f52a42797f6' ;; \\\n        aarch64) rustArch='aarch64-unknown-linux-musl'; rustupSha256='6a8a480d8d9e7f8c6979d7f8b12bc59da13db67970f7b13161ff409f0a771213' ;; \\\n        *) echo >&2 \"unsupported architecture: $apkArch\"; exit 1 ;; \\\n    esac; \\\n    url=\"https://static.rust-lang.org/rustup/archive/1.23.1/${rustArch}/rustup-init\"; \\\n    wget \"$url\"; \\\n    echo \"${rustupSha256}  *rustup-init\" | sha256sum -c -; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \\\n    rm rustup-init; \\\n    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \\\n    rustup --version; \\\n    cargo --version; \\\n    rustc --version; \\\n    apk add --no-cache bash gcc python3-dev libffi-dev openssl-dev musl-dev ca-certificates; \\\n    pip3 install --no-cache-dir virtualenv; \\\n    virtualenv venv; \\\n    bash -c \". /certbot/venv/bin/activate && pip install -r /certbot/requirements.txt\"\n\nFROM node:12.16.0-alpine3.11 as certcache-build-deps\n\nRUN apk update && apk add --no-cache g++ make git\n\nFROM certcache-build-deps as certcache-build\n\nCOPY src /certcachesrc/src\nCOPY package.json /certcachesrc/package.json\n\nENV NODE_ENV=production\n\nRUN npm install --production -g /certcachesrc/ && npm cache clean --force;\n\nFROM deps as dist-test\n\nWORKDIR /certcachesrc/\n\nCOPY --from=certcache-build /certcachesrc /certcachesrc\nCOPY --from=certbot-build /certbot/venv /certbot/venv\nCOPY sit /certcachesrc/sit\nCOPY jest.config.all.js /certcachesrc/jest.config.all.js\nCOPY jest.config.js /certcachesrc/jest.config.js\nCOPY jest.config.sit.js /certcachesrc/jest.config.sit.js\n\nRUN apk add --no-cache bash unzip && \\\n  npm install && \\\n  unzip /certcachesrc/sit/deps/ngrok-stable-linux-amd64.zip -d /usr/local/bin && \\\n  bash -c \". /certbot/venv/bin/activate &&  CERTCACHE_CERTBOT_EMAIL=tm_certcache-sit@93m.org npm test\" && npm cache clean --force;\n\nFROM deps as dist\n\nWORKDIR /certcache/\n\nCOPY --from=certcache-build /certcachesrc /usr/local/lib/node_modules/certcache\nCOPY --from=certbot-build /certbot/venv /certbot/venv\nCOPY docker/entrypoint.sh /entrypoint.sh\n\nRUN ln -s /usr/local/lib/node_modules/certcache/src/cli/cli.js \\\n    /usr/local/bin/certcache && \\\n  chmod +x /entrypoint.sh\n\nVOLUME /certcache/bin/\nVOLUME /certcache/cache/\nVOLUME /certcache/catkeys/\nVOLUME /certcache/certs/\nVOLUME /certcache/conf/\nVOLUME /certcache/credentials/\n\nEXPOSE 53\nEXPOSE 80\nEXPOSE 4433\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD [\"client\"]\n"
}