{
  "startTime": 1674254514112,
  "endTime": 1674254515336,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 84,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 84,
        "columnStart": 22,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use experimental buildkit for faster builds\n# https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md\n# Use `--progress=plain` to use plane stdout for docker build\n#\n# Example build command:\n# This determines which version of the ROS2 code base to pull\n# export ROS2_BRANCH=main\n# export DOCKER_BUILDKIT=1\n# docker build \\\n#   --tag nav2:source \\\n#   --file source.Dockerfile ../\n#\n# Use `--no-cache` to break the local docker build cache.\n# Use `--pull` to pull the latest parent image from the remote registry.\n# Use `--target=<stage_name>` to build stages not used for final stage.\n#\n# We're only building on top of a ros2 devel image to get the basics\n# prerequisites installed such as the apt source, rosdep, etc. We don't want to\n# actually use any of the ros release packages. Instead we are going to build\n# everything from source in one big workspace.\n\nARG FROM_IMAGE=osrf/ros2:devel\nARG UNDERLAY_WS=/opt/underlay_ws\nARG OVERLAY_WS=/opt/overlay_ws\n\n# multi-stage for caching\nFROM $FROM_IMAGE AS cacher\n\n# clone ros2 source\nARG ROS2_BRANCH=master\nARG ROS2_REPO=https://github.com/ros2/ros2.git\nWORKDIR $ROS2_WS/src\nRUN git clone $ROS2_REPO -b $ROS2_BRANCH && \\\n    vcs import ./ < ros2/ros2.repos && \\\n    find ./ -name \".git\" | xargs rm -rf\n\n# clone underlay source\nARG UNDERLAY_WS\nWORKDIR $UNDERLAY_WS/src\nCOPY ./tools/underlay.repos ../\nRUN vcs import ./ < ../underlay.repos && \\\n    find ./ -name \".git\" | xargs rm -rf\n\n# copy overlay source\nARG OVERLAY_WS\nWORKDIR $OVERLAY_WS/src\nCOPY ./ ./ros-planning/navigation2\nRUN colcon list --names-only | cat >> /opt/packages.txt\n\n# remove skiped packages\nWORKDIR /opt\nRUN find ./ \\\n      -name \"AMENT_IGNORE\" -o \\\n      -name \"CATKIN_IGNORE\" -o \\\n      -name \"COLCON_IGNORE\" \\\n      | xargs dirname | xargs rm -rf || true && \\\n    colcon list --paths-only \\\n      --packages-skip-up-to  \\\n        $(cat packages.txt | xargs) \\\n      | xargs rm -rf\n\n# copy manifests for caching\nRUN mkdir -p /tmp/opt && \\\n    find ./ -name \"package.xml\" | \\\n      xargs cp --parents -t /tmp/opt\n\n# multi-stage for ros2 dependencies\nFROM $FROM_IMAGE AS ros2_depender\nARG DEBIAN_FRONTEND=noninteractive\n\n# edit apt for caching\nRUN cp /etc/apt/apt.conf.d/docker-clean /etc/apt/ && \\\n    echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' \\\n      > /etc/apt/apt.conf.d/docker-clean\n\n# install packages\nRUN --mount=type=cache,target=/var/cache/apt \\\n    --mount=type=cache,target=/var/lib/apt \\\n    apt-get update && apt-get install --no-install-recommends -q -y \\\n      ccache \\\n      libasio-dev \\\n      libtinyxml2-dev \\\n      lld \\\n    && rosdep update && rm -rf /var/lib/apt/lists/*;\n\nENV ROS_VERSION=2 \\\n    ROS_PYTHON_VERSION=3\n\n# install ros2 dependencies\nWORKDIR $ROS2_WS\nCOPY --from=cacher /tmp/$ROS2_WS ./\nCOPY ./tools/skip_keys.txt /tmp/\nRUN --mount=type=cache,target=/var/cache/apt \\\n    --mount=type=cache,target=/var/lib/apt \\\n    apt-get update && rosdep install -q -y \\\n      --from-paths src \\\n      --ignore-src \\\n      --skip-keys \" \\\n        $(cat /tmp/skip_keys.txt | xargs) \\\n        \"\n\n# multi-stage for building ros2\nFROM ros2_depender AS ros2_builder\n\n# build ros2 source\nCOPY --from=cacher $ROS2_WS ./\nARG ROS2_MIXINS=\"release ccache lld\"\nRUN --mount=type=cache,target=/root/.ccache \\\n    colcon build \\\n      --symlink-install \\\n      --mixin $ROS2_MIXINS\n\n# multi-stage for testing ros2\nFROM ros2_builder AS ros2_tester\n\n# test overlay build\nARG RUN_TESTS\nARG FAIL_ON_TEST_FAILURE=True\nRUN if [ -n \"$RUN_TESTS\" ]; then \\\n        . install/setup.sh && \\\n        colcon test && \\\n        colcon test-result \\\n          || ([ -z \"$FAIL_ON_TEST_FAILURE\" ] || exit 1) \\\n    fi\n\n# multi-stage for underlay dependencies\nFROM ros2_depender AS underlay_depender\n\n# copy manifests for caching\nCOPY --from=cacher /tmp/$ROS2_WS $ROS2_WS\n\n# install underlay dependencies\nARG UNDERLAY_WS\nWORKDIR $UNDERLAY_WS\nCOPY --from=cacher /tmp/$UNDERLAY_WS ./\nRUN --mount=type=cache,target=/var/cache/apt \\\n    --mount=type=cache,target=/var/lib/apt \\\n    apt-get update && rosdep install -q -y \\\n      --from-paths src \\\n        $ROS2_WS/src \\\n      --ignore-src \\\n      --skip-keys \" \\\n        $(cat /tmp/skip_keys.txt | xargs) \\\n      \"\n\n# multi-stage for building underlay\nFROM underlay_depender AS underlay_builder\n\n# copy workspace for caching\nCOPY --from=ros2_builder $ROS2_WS $ROS2_WS\n\n# build underlay source\nCOPY --from=cacher $UNDERLAY_WS ./\nARG UNDERLAY_MIXINS=\"release ccache lld\"\nRUN --mount=type=cache,target=/root/.ccache \\\n    . $ROS2_WS/install/setup.sh && \\\n    colcon build \\\n      --symlink-install \\\n      --mixin $UNDERLAY_MIXINS\n\n# multi-stage for testing underlay\nFROM underlay_builder AS underlay_tester\n\n# test overlay build\nARG RUN_TESTS\nARG FAIL_ON_TEST_FAILURE=True\nRUN if [ -n \"$RUN_TESTS\" ]; then \\\n        . install/setup.sh && \\\n        colcon test && \\\n        colcon test-result \\\n          || ([ -z \"$FAIL_ON_TEST_FAILURE\" ] || exit 1) \\\n    fi\n\n# multi-stage for overlay dependencies\nFROM underlay_depender AS overlay_depender\n\n# copy manifests for caching\nCOPY --from=cacher /tmp/$ROS2_WS $ROS2_WS\nCOPY --from=cacher /tmp/$UNDERLAY_WS $UNDERLAY_WS\n\n# install overlay dependencies\nARG OVERLAY_WS\nWORKDIR $OVERLAY_WS\nCOPY --from=cacher /tmp/$OVERLAY_WS ./\nRUN --mount=type=cache,target=/var/cache/apt \\\n    --mount=type=cache,target=/var/lib/apt \\\n    apt-get update && rosdep install -q -y \\\n      --from-paths src \\\n        $ROS2_WS/src \\\n        $UNDERLAY_WS/src \\\n      --ignore-src \\\n      --skip-keys \" \\\n        $(cat /tmp/skip_keys.txt | xargs) \\\n      \"\n\n# multi-stage for building overlay\nFROM overlay_depender AS overlay_builder\n\n# copy workspace for caching\nCOPY --from=ros2_builder $ROS2_WS $ROS2_WS\nCOPY --from=underlay_builder $UNDERLAY_WS $UNDERLAY_WS\n\n# build overlay source\nCOPY --from=cacher $OVERLAY_WS ./\nARG OVERLAY_MIXINS=\"release ccache lld\"\nRUN --mount=type=cache,target=/root/.ccache \\\n    . $UNDERLAY_WS/install/setup.sh && \\\n    colcon build \\\n      --symlink-install \\\n      --mixin $OVERLAY_MIXINS\n\n# multi-stage for testing overlay\nFROM overlay_builder AS overlay_tester\n\n# test overlay build\nARG RUN_TESTS\nARG FAIL_ON_TEST_FAILURE=True\nRUN if [ -n \"$RUN_TESTS\" ]; then \\\n        . install/setup.sh && \\\n        colcon test && \\\n        colcon test-result \\\n          || ([ -z \"$FAIL_ON_TEST_FAILURE\" ] || exit 1) \\\n    fi\n\n# multi-stage for testing workspaces\nFROM overlay_builder AS workspaces_tester\n\n# copy workspace test results\nCOPY --from=ros2_tester     $ROS2_WS/log      $ROS2_WS/log\nCOPY --from=underlay_tester $UNDERLAY_WS/log  $UNDERLAY_WS/log\nCOPY --from=overlay_tester  $OVERLAY_WS/log   $OVERLAY_WS/log\n\n# multi-stage for shipping overlay\nFROM overlay_builder AS overlay_shipper\n\n# restore apt for docker\nRUN mv /etc/apt/docker-clean /etc/apt/apt.conf.d/ && \\\n    rm -rf /var/lib/apt/lists/\n\n# source overlay from entrypoint\nENV UNDERLAY_WS $UNDERLAY_WS\nENV OVERLAY_WS $OVERLAY_WS\nRUN sed --in-place \\\n      's|^source .*|source \"$OVERLAY_WS/install/setup.bash\"|' \\\n      /ros_entrypoint.sh\n"
}